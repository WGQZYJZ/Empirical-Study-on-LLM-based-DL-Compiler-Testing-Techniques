==========mod==========
#[version = "0.0.5"]
def @func_3731(%var_3684: Tensor[(2, 44), float32]) -> (Tensor[(780), float64], Tensor[(780), float64], Tensor[(2, 44), int8], Tensor[(2, 44), int8]) {
  %0 = @func_3397() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %1 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %2 = cast(%var_3684, dtype="float64") /* ty=Tensor[(2, 44), float64] */;
  %3 = log(%2) /* ty=Tensor[(2, 44), float64] */;
  %4 = cast(%var_3684, dtype="float32") /* ty=Tensor[(2, 44), float32] */;
  %5 = reshape(%4, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %6 = @func_1350(%5) /* ty=Tensor[(11, 4, 2), float64] */;
  %7 = cast(%6, dtype="int8") /* ty=Tensor[(11, 4, 2), int8] */;
  %8 = shape_of(%3, dtype="int32") /* ty=Tensor[(2), int32] */;
  %9 = cast(%3, dtype="int8") /* ty=Tensor[(2, 44), int8] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %11 = cast(%6, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %12 = shape_of(%var_3684, dtype="int32") /* ty=Tensor[(2), int32] */;
  %13 = cast(%var_3684, dtype="uint32") /* ty=Tensor[(2, 44), uint32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %15 = left_shift(%13, %14) /* ty=Tensor[(2, 44), uint32] */;
  %16 = cast(%var_3684, dtype="float64") /* ty=Tensor[(2, 44), float64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(2), int32] */;
  %18 = cast(%15, dtype="float64") /* ty=Tensor[(2, 44), float64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %20 = power(%18, %19) /* ty=Tensor[(2, 44), float64] */;
  %21 = cast(%20, dtype="int8") /* ty=Tensor[(2, 44), int8] */;
  %22 = shape_of(%3, dtype="int32") /* ty=Tensor[(2), int32] */;
  %23 = cast(%3, dtype="int8") /* ty=Tensor[(2, 44), int8] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %25 = %0.1;
  %26 = %1.0;
  %27 = multiply(%9, %10) /* ty=Tensor[(2, 44), int8] */;
  %28 = subtract(%23, %24) /* ty=Tensor[(2, 44), int8] */;
  (%25, %26, %27, %28)
}

def @func_3207() -> (Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) {
  %29 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %30 = %29.4;
  %31 = cast(%30, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %32 = cast(%30, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %33 = reshape(%31, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %34 = reshape(%32, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %35 = @func_693(%33, %34) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
  %36 = %35.0;
  (%30, %36)
}

def @func_4179(%var_4064: Tensor[(16, 5, 3), float64], %var_4068: Tensor[(88), float32], %var_4076: Tensor[(448), uint8]) -> (Tensor[(88), float32], Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(16, 5, 3), bool], Tensor[(11, 4, 2), uint32], Tensor[(28), uint16], Tensor[(780), float64], Tensor[(4, 8, 14), uint32], Tensor[(6, 6, 13), uint8], Tensor[(468), int8], Tensor[(16, 5, 3), int16], Tensor[(7, 2, 2), float64]) {
  %37 = cast(%var_4076, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %38 = reshape(%37, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %39 = @func_998(%38) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %40 = cast(%var_4064, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %41 = sin(%40) /* ty=Tensor[(16, 5, 3), float64] */;
  %42 = cast(%var_4064, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %46 = cast(%var_4068, dtype="float32") /* ty=Tensor[(88), float32] */;
  %47 = reshape(%46, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %48 = @func_1350(%47) /* ty=Tensor[(11, 4, 2), float64] */;
  %49 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 4, 2), float64] */, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%48, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %53 = cast(meta[relay.Constant][1] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %54 = %39.0;
  %55 = cast(%54, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %56 = reshape(%53, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %57 = reshape(%55, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %58 = @func_1317(%56, %57) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %60 = reshape(%59, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %61 = @func_1538(%60) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(468), int8] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(468), int8] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %64 = reshape(%62, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), int8] */;
  %65 = reshape(%63, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), int8] */;
  %66 = @func_3553(%64, %65) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(6, 6, 13), uint8]) */;
  %67 = cast(%41, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %68 = asinh(%67) /* ty=Tensor[(16, 5, 3), float64] */;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %70 = log(%69) /* ty=Tensor[(16, 5, 3), float64] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %72 = erf(%71) /* ty=Tensor[(16, 5, 3), float32] */;
  %73 = cast(%70, dtype="int16") /* ty=Tensor[(16, 5, 3), int16] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="int16") /* ty=Tensor[(16, 5, 3), int16] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %77 = %61.4;
  %78 = cast(%77, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %79 = reshape(%78, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %80 = @func_2736(%79) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(448), uint8], Tensor[(448), uint8]) */;
  %81 = not_equal(%44, %45) /* ty=Tensor[(16, 5, 3), bool] */;
  %82 = maximum(%51, %52) /* ty=Tensor[(11, 4, 2), uint32] */;
  %83 = %58.3;
  %84 = %66.1;
  %85 = left_shift(%75, %76) /* ty=Tensor[(16, 5, 3), int16] */;
  %86 = %80.1;
  (%var_4068, %54, %var_4076, %81, %82, %83, meta[relay.Constant][1] /* ty=Tensor[(780), float64] */, %77, %84, meta[relay.Constant][2] /* ty=Tensor[(468), int8] */, %85, %86)
}

def @func_4678(%var_4617: Tensor[(10, 5, 15), int16], %var_4618: Tensor[(10, 5, 15), int16], %var_4640: Tensor[(10, 5, 15), int16], %var_4665: Tensor[(880), float64], %var_4669: Tensor[(54), float32]) -> (Tensor[(10, 5, 15), int32], Tensor[(10, 5, 15), int16], Tensor[(10, 5, 15), float32], Tensor[(780), float64], Tensor[(56, 8), uint8], Tensor[(88), float32], Tensor[(880), float64], Tensor[(2, 9, 3), float32], Tensor[(54), float32]) {
  %87 = cast(%var_4640, dtype="int32") /* ty=Tensor[(10, 5, 15), int32] */;
  %88 = shape_of(%var_4618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%var_4618, dtype="int32") /* ty=Tensor[(10, 5, 15), int32] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %91 = cast(%var_4618, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %92 = shape_of(%var_4617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%var_4617, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %95 = greater_equal(%93, %94) /* ty=Tensor[(10, 5, 15), bool] */;
  %96 = cast(%var_4618, dtype="int16") /* ty=Tensor[(10, 5, 15), int16] */;
  %97 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%95, dtype="int16") /* ty=Tensor[(10, 5, 15), int16] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %100 = cast(%95, dtype="float64") /* ty=Tensor[(10, 5, 15), float64] */;
  %101 = acos(%100) /* ty=Tensor[(10, 5, 15), float64] */;
  %102 = cast(%101, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %103 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %104 = %103.2;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(780), float64] */;
  %106 = cast(meta[relay.Constant][3] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %107 = cast(%var_4665, dtype="float64") /* ty=Tensor[(880), float64] */;
  %108 = reshape(%105, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %109 = reshape(%106, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %110 = reshape(%107, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), float64] */;
  %111 = @func_1915(%108, %109, %110) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) */;
  %112 = cast(%var_4669, dtype="float32") /* ty=Tensor[(54), float32] */;
  %113 = reshape(%112, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float32] */;
  %114 = bitwise_and(%89, %90) /* ty=Tensor[(10, 5, 15), int32] */;
  %115 = left_shift(%98, %99) /* ty=Tensor[(10, 5, 15), int16] */;
  %116 = log2(%102) /* ty=Tensor[(10, 5, 15), float32] */;
  %117 = %111.6;
  %118 = @func_3519(%113) /* ty=Tensor[(2, 9, 3), float32] */;
  (%114, %115, %116, %104, %117, meta[relay.Constant][3] /* ty=Tensor[(88), float32] */, %var_4665, %118, %var_4669)
}

def @func_5444(%var_5430: Tensor[(780), float64], %var_5435: Tensor[(780), float64]) -> (Tensor[(780), bool], Tensor[(780), bool]) {
  %119 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
  %120 = %119.0;
  %121 = cast(%var_5430, dtype="bool") /* ty=Tensor[(780), bool] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(1), int32] */;
  %123 = cast(%120, dtype="bool") /* ty=Tensor[(780), bool] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?), bool] */;
  %125 = cast(%var_5435, dtype="bool") /* ty=Tensor[(780), bool] */;
  %126 = shape_of(%var_5430, dtype="int32") /* ty=Tensor[(1), int32] */;
  %127 = cast(%var_5430, dtype="bool") /* ty=Tensor[(780), bool] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?), bool] */;
  %129 = logical_or(%123, %124) /* ty=Tensor[(780), bool] */;
  %130 = not_equal(%127, %128) /* ty=Tensor[(780), bool] */;
  (%129, %130)
}

def @func_3325() -> Tensor[(1680), float32] {
  %131 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %131.5
}

def @func_2013(%var_2007: Tensor[(780), float64]) -> (Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) {
  %132 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %133 = cast(%var_2007, dtype="float64") /* ty=Tensor[(780), float64] */;
  %134 = reshape(%133, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %135 = @func_1538(%134) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %136 = %132.2;
  %137 = %135.4;
  (%136, %137, %var_2007)
}

def @func_1538(%var_1531: Tensor[(780), float64]) -> (Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) {
  %138 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 7, 10), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 10), float64] */;
  %139 = exp(%138) /* ty=Tensor[(13, 7, 10), float64] */;
  %140 = cast(%139, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
  %141 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(13, 7, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 7, 10), float64] */, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %144 = cast(%var_1531, dtype="float64") /* ty=Tensor[(780), float64] */;
  %145 = cast(meta[relay.Constant][5] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %146 = reshape(%144, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %147 = reshape(%145, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %148 = @func_1317(%146, %147) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %149 = cast(%var_1531, dtype="float64") /* ty=Tensor[(780), float64] */;
  %150 = cast(meta[relay.Constant][5] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %151 = reshape(%149, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %152 = reshape(%150, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %153 = @func_1317(%151, %152) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %154 = not_equal(%142, %143) /* ty=Tensor[(13, 7, 10), bool] */;
  %155 = %148.4;
  %156 = %153.5;
  (%154, %155, %var_1531, meta[relay.Constant][5] /* ty=Tensor[(448), uint8] */, %156)
}

def @func_2870() -> (Tensor[(448), uint8],) {
  %157 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %158 = %157.2;
  (%158,)
}

def @func_3619() -> (Tensor[(780), float64], Tensor[(56, 8), float32]) {
  %159 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %160 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %161 = %160.0;
  %162 = cast(%161, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
  %163 = %159.2;
  %164 = sigmoid(%162) /* ty=Tensor[(56, 8), float32] */;
  (%163, %164)
}

def @func_3895(%var_3876: Tensor[(13, 15, 15), bool], %var_3877: Tensor[(13, 15, 15), bool]) -> (Tensor[(13, 15, 15), bool], Tensor[(7, 2, 2), float64], Tensor[(28, 1), uint16]) {
  %165 = cast(%var_3877, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %166 = shape_of(%var_3876, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%var_3876, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %169 = cast(meta[relay.Constant][6] /* ty=Tensor[(28, 1), uint16] */, dtype="uint16") /* ty=Tensor[(28, 1), uint16] */;
  %170 = reshape(%169, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %171 = logical_and(%167, %168) /* ty=Tensor[(13, 15, 15), bool] */;
  %172 = @func_129(%170) /* ty=Tensor[(7, 2, 2), float64] */;
  (%171, %172, meta[relay.Constant][6] /* ty=Tensor[(28, 1), uint16] */)
}

def @func_998(%var_981: Tensor[(448), uint8]) -> (Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) {
  %173 = cast(%var_981, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %174 = cast(%var_981, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %175 = reshape(%173, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %176 = reshape(%174, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %177 = @func_693(%175, %176) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
  %178 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 4, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 4, 5), float64] */;
  %179 = asinh(%178) /* ty=Tensor[(8, 4, 5), float64] */;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(8, 4, 5), float32] */;
  %181 = %177.2;
  %182 = cos(%180) /* ty=Tensor[(8, 4, 5), float32] */;
  (%181, %var_981, %182)
}

def @func_4876() -> Tensor[(780), float64] {
  %183 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
  %183.0
}

def @func_5366(%var_5362: Tensor[(2925), bool]) -> (Tensor[(448), uint8], Tensor[(13, 15, 15), bool], Tensor[(2925), bool]) {
  %184 = cast(%var_5362, dtype="bool") /* ty=Tensor[(2925), bool] */;
  %185 = cast(%var_5362, dtype="bool") /* ty=Tensor[(2925), bool] */;
  %186 = reshape(%184, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), bool] */;
  %187 = reshape(%185, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), bool] */;
  %188 = @func_3895(%186, %187) /* ty=(Tensor[(13, 15, 15), bool], Tensor[(7, 2, 2), float64], Tensor[(28, 1), uint16]) */;
  %189 = @func_4991() /* ty=Tensor[(448), uint8] */;
  %190 = %188.0;
  (%189, %190, %var_5362)
}

def @func_5180() -> (Tensor[(448), uint8],) {
  %191 = @func_4478() /* ty=Tensor[(448), uint8] */;
  (%191,)
}

def @func_1350(%var_1338: Tensor[(11, 4, 2), float32]) -> Tensor[(11, 4, 2), float64] {
  %192 = cast(meta[relay.Constant][8] /* ty=Tensor[(11, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
  %193 = log(%192) /* ty=Tensor[(11, 4, 2), float32] */;
  %194 = cast(%var_1338, dtype="int64") /* ty=Tensor[(11, 4, 2), int64] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="int64") /* ty=Tensor[(11, 4, 2), int64] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %198 = multiply(%196, %197) /* ty=Tensor[(11, 4, 2), int64] */;
  %199 = cast(%198, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
  tan(%199) /* ty=Tensor[(11, 4, 2), float64] */
}

def @func_3166() -> (Tensor[(448), uint8],) {
  %200 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %201 = %200.2;
  (%201,)
}

def @func_5492(%var_5478: Tensor[(448), uint8]) -> (Tensor[(448), float32], Tensor[(56, 8), float32], Tensor[(448), float64], Tensor[(448), uint8]) {
  %202 = @func_3207() /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %203 = %202.0;
  %204 = cast(%var_5478, dtype="float32") /* ty=Tensor[(448), float32] */;
  %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(1), int32] */;
  %206 = cast(%203, dtype="float32") /* ty=Tensor[(448), float32] */;
  %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?), float32] */;
  %208 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
  %209 = cast(%var_5478, dtype="float64") /* ty=Tensor[(448), float64] */;
  %210 = @func_3166() /* ty=(Tensor[(448), uint8],) */;
  %211 = floor_mod(%206, %207) /* ty=Tensor[(448), float32] */;
  %212 = %208.1;
  %213 = asin(%209) /* ty=Tensor[(448), float64] */;
  %214 = %210.0;
  (%211, %212, %213, %214)
}

def @func_4234() -> (Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), int32]) {
  %215 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %216 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %217 = %216.1;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 14, 10), float32] */, dtype="int32") /* ty=Tensor[(12, 14, 10), int32] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="int32") /* ty=Tensor[(12, 14, 10), int32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %222 = %215.0;
  %223 = logical_xor(%220, %221) /* ty=Tensor[(12, 14, 10), int32] */;
  (%222, %223)
}

def @func_4991() -> Tensor[(448), uint8] {
  @func_4367() /* ty=Tensor[(448), uint8] */
}

def @func_1677(%var_1660: Tensor[(7, 2, 2), float64], %var_1674: Tensor[(130, 6), float64]) -> (Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) {
  %224 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %225 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %226 = %225.1;
  %227 = cast(%var_1660, dtype="uint32") /* ty=Tensor[(7, 2, 2), uint32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint32") /* ty=Tensor[(7, 2, 2), uint32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %231 = %224.2;
  %232 = cast(%231, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %233 = reshape(%232, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %234 = @func_998(%233) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %235 = cast(%var_1674, dtype="float64") /* ty=Tensor[(130, 6), float64] */;
  %236 = cast(%231, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %237 = reshape(%235, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %238 = reshape(%236, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %239 = @func_1317(%237, %238) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %240 = subtract(%229, %230) /* ty=Tensor[(7, 2, 2), uint32] */;
  %241 = %234.2;
  %242 = %239.5;
  (%231, %240, %241, %242, %var_1674)
}

def @func_1317(%var_1235: Tensor[(13, 5, 12), float64], %var_1294: Tensor[(448), uint8]) -> (Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) {
  %243 = cast(%var_1235, dtype="float64") /* ty=Tensor[(13, 5, 12), float64] */;
  %244 = cosh(%243) /* ty=Tensor[(13, 5, 12), float64] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(13, 5, 12), float32] */;
  %246 = cast(meta[relay.Constant][10] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %247 = reshape(%246, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %248 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %249 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %250 = reshape(%248, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %251 = reshape(%249, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %252 = @func_693(%250, %251) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
  %253 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %254 = reshape(%253, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %255 = @func_998(%254) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %256 = cast(%244, dtype="float32") /* ty=Tensor[(13, 5, 12), float32] */;
  %257 = @func_129(%247) /* ty=Tensor[(7, 2, 2), float64] */;
  %258 = cast(%257, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %259 = reshape(%258, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %260 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %261 = reshape(%260, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %262 = @func_998(%261) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %263 = exp(%245) /* ty=Tensor[(13, 5, 12), float32] */;
  %264 = %252.1;
  %265 = %255.0;
  %266 = sinh(%256) /* ty=Tensor[(13, 5, 12), float32] */;
  %267 = @func_129(%259) /* ty=Tensor[(7, 2, 2), float64] */;
  %268 = %262.0;
  (%263, %257, meta[relay.Constant][10] /* ty=Tensor[(28), uint16] */, %264, %var_1294, %265, %266, %267, %268)
}

def @func_4007(%var_3963: Tensor[(9, 13, 11), float32], %var_3966: Tensor[(9, 13, 11), float32], %var_3995: Tensor[(780), float64]) -> (Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float64], Tensor[(780), uint16], Tensor[(780), float64], Tensor[(9, 13, 11), float64]) {
  %269 = cast(%var_3966, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
  %270 = shape_of(%var_3963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%var_3963, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %273 = less_equal(%271, %272) /* ty=Tensor[(9, 13, 11), bool] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
  %275 = cast(%var_3963, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %276 = acos(%275) /* ty=Tensor[(9, 13, 11), float32] */;
  %277 = cast(%273, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %281 = cast(%var_3995, dtype="float64") /* ty=Tensor[(780), float64] */;
  %282 = reshape(%281, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %283 = cast(%var_3966, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %284 = sqrt(%283) /* ty=Tensor[(9, 13, 11), float32] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %286 = shape_of(%var_3966, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_3966, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %289 = mod(%287, %288) /* ty=Tensor[(9, 13, 11), float32] */;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
  %291 = erf(%274) /* ty=Tensor[(9, 13, 11), float64] */;
  %292 = floor_divide(%279, %280) /* ty=Tensor[(9, 13, 11), float64] */;
  %293 = @func_3435(%282) /* ty=Tensor[(780), uint16] */;
  %294 = log10(%290) /* ty=Tensor[(9, 13, 11), float64] */;
  (%291, %292, %293, %var_3995, %294)
}

def @func_3336() -> Tensor[(780), float64] {
  %295 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %295.2
}

def @func_4450(%var_4443: Tensor[(7, 2, 2), float32]) -> (Tensor[(7, 2, 2), uint16],) {
  %296 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %297 = %296.0;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %299 = sinh(%298) /* ty=Tensor[(7, 2, 2), float32] */;
  %300 = cast(%var_4443, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %304 = multiply(%302, %303) /* ty=Tensor[(7, 2, 2), uint16] */;
  (%304,)
}

def @func_5187() -> (Tensor[(780), float64],) {
  %305 = @func_3055() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */;
  %306 = %305.4;
  (%306,)
}

def @func_2158(%var_2082: Tensor[(780), float64], %var_2083: Tensor[(448), uint8]) -> (Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) {
  %307 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %308 = cast(meta[relay.Constant][11] /* ty=Tensor[(22, 4), float32] */, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %309 = reshape(%308, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %310 = cast(%var_2082, dtype="float64") /* ty=Tensor[(780), float64] */;
  %311 = cast(%var_2083, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %312 = reshape(%310, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %313 = reshape(%311, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %314 = @func_1317(%312, %313) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %315 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %316 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %317 = cast(%var_2082, dtype="float64") /* ty=Tensor[(780), float64] */;
  %318 = reshape(%317, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %319 = @func_1538(%318) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %320 = cast(meta[relay.Constant][12] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %321 = %315.0;
  %322 = cast(%321, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %323 = reshape(%320, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float32] */;
  %324 = reshape(%322, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %325 = @func_188(%323, %324) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */;
  %326 = %325.0;
  %327 = cast(meta[relay.Constant][12] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="float32") /* ty=Tensor[(12, 14, 10), float32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %331 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %332 = %307.1;
  %333 = @func_1350(%309) /* ty=Tensor[(11, 4, 2), float64] */;
  %334 = %314.4;
  %335 = %316.0;
  %336 = %319.3;
  %337 = multiply(%329, %330) /* ty=Tensor[(12, 14, 10), float32] */;
  %338 = %331.1;
  (%332, %333, meta[relay.Constant][11] /* ty=Tensor[(22, 4), float32] */, %334, %var_2082, %var_2083, %321, %335, %336, %337, %338)
}

def @func_2679() -> Tensor[(13, 5, 12), float32] {
  %339 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %339.1
}

def @func_4752() -> Tensor[(7, 2, 2), float64] {
  %340 = @func_3207() /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %340.1
}

def @func_2191(%var_2173: Tensor[(2, 11, 5), int64], %var_2174: Tensor[(2, 11, 5), int64]) -> (Tensor[(2, 11, 5), int64], Tensor[(88), float32]) {
  %341 = cast(%var_2174, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %342 = shape_of(%var_2173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_2173, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %345 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %346 = bitwise_or(%343, %344) /* ty=Tensor[(2, 11, 5), int64] */;
  %347 = %345.3;
  (%346, %347)
}

def @func_1602(%var_1580: Tensor[(780), float64], %var_1599: Tensor[(88), float32]) -> (Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) {
  %348 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
  %349 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(13, 16, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %350 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %352 = cast(meta[relay.Constant][15] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %353 = reshape(%352, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %354 = cast(%var_1580, dtype="float64") /* ty=Tensor[(780), float64] */;
  %355 = reshape(%354, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %356 = @func_1538(%355) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %357 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
  %358 = acosh(%357) /* ty=Tensor[(13, 16, 8), float64] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
  %360 = cast(%var_1580, dtype="float64") /* ty=Tensor[(780), float64] */;
  %361 = %356.4;
  %362 = cast(%361, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %363 = reshape(%360, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %364 = reshape(%362, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %365 = @func_1317(%363, %364) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %366 = cast(%var_1599, dtype="float32") /* ty=Tensor[(88), float32] */;
  %367 = reshape(%366, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %368 = multiply(%350, %351) /* ty=Tensor[(13, 16, 8), float64] */;
  %369 = @func_129(%353) /* ty=Tensor[(7, 2, 2), float64] */;
  %370 = cosh(%359) /* ty=Tensor[(13, 16, 8), float64] */;
  %371 = %365.0;
  %372 = @func_1350(%367) /* ty=Tensor[(11, 4, 2), float64] */;
  (%368, %369, meta[relay.Constant][15] /* ty=Tensor[(28), uint16] */, %361, %var_1580, %370, %371, %372, %var_1599)
}

def @func_129(%var_81: Tensor[(7, 2, 2), uint16]) -> Tensor[(7, 2, 2), float64] {
  %373 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 2, 2), uint16] */, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %374 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%var_81, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %377 = bitwise_xor(%375, %376) /* ty=Tensor[(7, 2, 2), uint16] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  %379 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%var_81, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %382 = floor_mod(%380, %381) /* ty=Tensor[(7, 2, 2), float64] */;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  acos(%383) /* ty=Tensor[(7, 2, 2), float64] */
}

def @func_5056(%var_5029: Tensor[(16, 6, 8), float64]) -> (Tensor[(16, 6, 8), uint8], Tensor[(12, 14, 10), float32]) {
  %384 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %385 = shape_of(%var_5029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%var_5029, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %388 = divide(%386, %387) /* ty=Tensor[(16, 6, 8), float64] */;
  %389 = cast(%var_5029, dtype="uint8") /* ty=Tensor[(16, 6, 8), uint8] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="uint8") /* ty=Tensor[(16, 6, 8), uint8] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %393 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %394 = subtract(%391, %392) /* ty=Tensor[(16, 6, 8), uint8] */;
  %395 = %393.1;
  (%394, %395)
}

def @func_2763(%var_2748: uint32) -> Tensor[(7, 14, 15), float64] {
  %396 = cast(%var_2748, dtype="uint32") /* ty=uint32 */;
  %397 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 14, 15), uint32] */, dtype="uint32") /* ty=Tensor[(7, 14, 15), uint32] */;
  %398 = add(%396, %397) /* ty=Tensor[(7, 14, 15), uint32] */;
  %399 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 14, 15), uint32] */, dtype="int8") /* ty=Tensor[(7, 14, 15), int8] */;
  %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%398, dtype="int8") /* ty=Tensor[(7, 14, 15), int8] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %403 = logical_xor(%401, %402) /* ty=Tensor[(7, 14, 15), int8] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(7, 14, 15), float64] */;
  sin(%404) /* ty=Tensor[(7, 14, 15), float64] */
}

def @func_2250() -> (Tensor[(780), float64],) {
  %405 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %406 = %405.2;
  (%406,)
}

def @func_3435(%var_3428: Tensor[(780), float64]) -> Tensor[(780), uint16] {
  %407 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %408 = %407.0;
  %409 = cast(%var_3428, dtype="uint16") /* ty=Tensor[(780), uint16] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(1), int32] */;
  %411 = cast(%408, dtype="uint16") /* ty=Tensor[(780), uint16] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?), uint16] */;
  minimum(%411, %412) /* ty=Tensor[(780), uint16] */
}

def @func_3519(%var_3512: Tensor[(2, 9, 3), float32]) -> Tensor[(2, 9, 3), float32] {
  %413 = cast(%var_3512, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  sqrt(%413) /* ty=Tensor[(2, 9, 3), float32] */
}

def @func_3956() -> (Tensor[(780), float64],) {
  %414 = @func_3336() /* ty=Tensor[(780), float64] */;
  (%414,)
}

def @func_4599(%var_4594: Tensor[(14, 10, 16), float64]) -> Tensor[(14, 10, 16), float64] {
  %415 = cast(%var_4594, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  acos(%415) /* ty=Tensor[(14, 10, 16), float64] */
}

def @func_1976(%var_1935: Tensor[(13, 3, 4), float32], %var_1948: Tensor[(88), float32], %var_1951: Tensor[(7, 2, 2), float64], %var_1972: Tensor[(1680), float32]) -> (Tensor[(13, 3, 4), float32], Tensor[(780), float64], Tensor[(88), float32], Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), uint32], Tensor[(7, 2, 2), float64], Tensor[(1680), float32], Tensor[(13, 3, 4), float32]) {
  %416 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %417 = shape_of(%var_1935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%var_1935, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %420 = cast(meta[relay.Constant][20] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %421 = cast(%var_1948, dtype="float32") /* ty=Tensor[(88), float32] */;
  %422 = reshape(%420, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %423 = reshape(%421, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %424 = @func_1602(%422, %423) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */;
  %425 = %424.1;
  %426 = cast(%var_1951, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = cast(%425, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  %431 = cast(meta[relay.Constant][20] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %432 = reshape(%430, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %433 = reshape(%431, newshape=[130, 6]) /* ty=Tensor[(130, 6), float64] */;
  %434 = @func_1677(%432, %433) /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) */;
  %435 = cast(%var_1972, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %436 = cast(%425, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %437 = reshape(%435, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float32] */;
  %438 = reshape(%436, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %439 = @func_188(%437, %438) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */;
  %440 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %441 = divide(%418, %419) /* ty=Tensor[(13, 3, 4), float32] */;
  %442 = equal(%428, %429) /* ty=Tensor[(7, 2, 2), bool] */;
  %443 = %434.1;
  %444 = %439.1;
  %445 = rsqrt(%440) /* ty=Tensor[(13, 3, 4), float32] */;
  (%441, meta[relay.Constant][20] /* ty=Tensor[(780), float64] */, %var_1948, %442, %443, %444, %var_1972, %445)
}

def @func_3553(%var_3536: Tensor[(6, 6, 13), int8], %var_3537: Tensor[(6, 6, 13), int8]) -> (Tensor[(13, 5, 12), float32], Tensor[(6, 6, 13), uint8]) {
  %446 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %447 = cast(%var_3537, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
  %448 = shape_of(%var_3536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_3536, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = greater(%449, %450) /* ty=Tensor[(6, 6, 13), bool] */;
  %452 = cast(%451, dtype="uint8") /* ty=Tensor[(6, 6, 13), uint8] */;
  %453 = shape_of(%var_3536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_3536, dtype="uint8") /* ty=Tensor[(6, 6, 13), uint8] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %456 = %446.1;
  %457 = bitwise_and(%454, %455) /* ty=Tensor[(6, 6, 13), uint8] */;
  (%456, %457)
}

def @func_3397() -> (Tensor[(448), uint8], Tensor[(780), float64]) {
  %458 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %459 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %460 = %458.0;
  %461 = %459.1;
  (%460, %461)
}

def @func_1762() -> (Tensor[(7, 2, 2), float64],) {
  %462 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %463 = %462.1;
  (%463,)
}

def @func_4413() -> Tensor[(880), float64] {
  %464 = @func_3055() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */;
  %464.3
}

def @func_5467(%var_5458: Tensor[(16, 13, 6), float32]) -> (Tensor[(16, 13, 6), float32], Tensor[(3, 9, 4), float64], Tensor[(6, 18), float32]) {
  %465 = cast(%var_5458, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
  %466 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 18), float32] */, dtype="float32") /* ty=Tensor[(6, 18), float32] */;
  %467 = reshape(%466, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), float32] */;
  %468 = @func_3792(%467) /* ty=(Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) */;
  %469 = log10(%465) /* ty=Tensor[(16, 13, 6), float32] */;
  %470 = %468.2;
  (%469, %470, meta[relay.Constant][21] /* ty=Tensor[(6, 18), float32] */)
}

def @func_4727() -> (Tensor[(7, 2, 2), float64],) {
  %471 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %472 = %471.0;
  (%472,)
}

def @func_4478() -> Tensor[(448), uint8] {
  %473 = @func_2870() /* ty=(Tensor[(448), uint8],) */;
  %473.0
}

def @func_188(%var_174: Tensor[(12, 14, 10), float32], %var_182: Tensor[(28), uint16]) -> (Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) {
  %474 = cast(%var_174, dtype="float32") /* ty=Tensor[(12, 14, 10), float32] */;
  %475 = cast(%var_182, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %476 = reshape(%475, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %477 = sinh(%474) /* ty=Tensor[(12, 14, 10), float32] */;
  %478 = @func_129(%476) /* ty=Tensor[(7, 2, 2), float64] */;
  (%477, %478, %var_182)
}

def @func_1715(%var_1704: Tensor[(448), float32]) -> (Tensor[(448), float64], Tensor[(448), int32], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) {
  %479 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %480 = %479.2;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(448), float64] */;
  %482 = cast(%480, dtype="float32") /* ty=Tensor[(448), float32] */;
  %483 = cosh(%482) /* ty=Tensor[(448), float32] */;
  %484 = cast(%var_1704, dtype="int32") /* ty=Tensor[(448), int32] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(1), int32] */;
  %486 = cast(%483, dtype="int32") /* ty=Tensor[(448), int32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?), int32] */;
  %488 = cast(meta[relay.Constant][22] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %489 = reshape(%488, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %490 = @func_1538(%489) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %491 = sinh(%481) /* ty=Tensor[(448), float64] */;
  %492 = bitwise_xor(%486, %487) /* ty=Tensor[(448), int32] */;
  %493 = %490.4;
  (%491, %492, %493, meta[relay.Constant][22] /* ty=Tensor[(780), float64] */)
}

def @func_1619() -> (Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) {
  %494 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 8, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 10), float64] */;
  %495 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %496 = cast(meta[relay.Constant][24] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %497 = reshape(%495, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %498 = reshape(%496, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %499 = @func_693(%497, %498) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
  %500 = erf(%494) /* ty=Tensor[(11, 8, 10), float64] */;
  %501 = %499.0;
  (%500, %501, meta[relay.Constant][24] /* ty=Tensor[(448), uint8] */)
}

def @func_3055() -> (Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) {
  %502 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %503 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 156), float64] */, dtype="float64") /* ty=Tensor[(5, 156), float64] */;
  %504 = %502.3;
  %505 = cast(%504, dtype="float32") /* ty=Tensor[(88), float32] */;
  %506 = cast(meta[relay.Constant][26] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
  %507 = reshape(%503, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %508 = reshape(%505, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %509 = reshape(%506, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), float64] */;
  %510 = @func_1915(%507, %508, %509) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) */;
  %511 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %512 = %510.6;
  %513 = %511.0;
  (%504, %512, meta[relay.Constant][25] /* ty=Tensor[(5, 156), float64] */, meta[relay.Constant][26] /* ty=Tensor[(880), float64] */, %513)
}

def @func_2736(%var_2712: Tensor[(448), uint8]) -> (Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(448), uint8], Tensor[(448), uint8]) {
  %514 = @func_2679() /* ty=Tensor[(13, 5, 12), float32] */;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(13, 5, 12), float64] */;
  %516 = cast(%var_2712, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %517 = reshape(%515, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %518 = reshape(%516, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %519 = @func_2158(%517, %518) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %520 = cast(%514, dtype="float64") /* ty=Tensor[(13, 5, 12), float64] */;
  %521 = cast(%var_2712, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %522 = reshape(%520, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %523 = reshape(%521, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %524 = @func_2158(%522, %523) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %525 = %519.0;
  %526 = %524.8;
  (%514, %525, %var_2712, %526)
}

def @func_3306() -> (Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) {
  %527 = @func_3055() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */;
  %528 = %527.1;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
  %530 = atanh(%529) /* ty=Tensor[(56, 8), float32] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(56, 8), float64] */;
  %532 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %533 = cast(meta[relay.Constant][27] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %534 = %532.3;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(88), float32] */;
  %536 = cast(meta[relay.Constant][28] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %537 = cast(meta[relay.Constant][29] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %538 = reshape(%533, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
  %539 = reshape(%535, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %540 = reshape(%536, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %541 = reshape(%537, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %542 = @func_1976(%538, %539, %540, %541) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(780), float64], Tensor[(88), float32], Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), uint32], Tensor[(7, 2, 2), float64], Tensor[(1680), float32], Tensor[(13, 3, 4), float32]) */;
  %543 = cast(%530, dtype="float64") /* ty=Tensor[(56, 8), float64] */;
  %544 = sqrt(%531) /* ty=Tensor[(56, 8), float64] */;
  %545 = %542.1;
  %546 = rsqrt(%543) /* ty=Tensor[(56, 8), float64] */;
  (%544, %534, %545, meta[relay.Constant][27] /* ty=Tensor[(156), float32] */, meta[relay.Constant][28] /* ty=Tensor[(28), float64] */, meta[relay.Constant][29] /* ty=Tensor[(1680), float32] */, %546)
}

def @func_3792(%var_3741: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) {
  %547 = cast(%var_3741, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %548 = asinh(%547) /* ty=Tensor[(3, 9, 4), float32] */;
  %549 = cast(%var_3741, dtype="int32") /* ty=Tensor[(3, 9, 4), int32] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="int32") /* ty=Tensor[(3, 9, 4), int32] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %553 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %554 = cast(%548, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %555 = asin(%554) /* ty=Tensor[(3, 9, 4), float32] */;
  %556 = cast(%555, dtype="float64") /* ty=Tensor[(3, 9, 4), float64] */;
  %557 = cast(%555, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %558 = multiply(%551, %552) /* ty=Tensor[(3, 9, 4), int32] */;
  %559 = %553.1;
  %560 = erf(%556) /* ty=Tensor[(3, 9, 4), float64] */;
  %561 = exp(%557) /* ty=Tensor[(3, 9, 4), float32] */;
  (%558, %559, %560, %561)
}

def @func_4324(%var_4270: int64, %var_4271: Tensor[(16, 1, 16), int64], %var_4305: Tensor[(780), float64]) -> (Tensor[(16, 1, 16), int64], Tensor[(2, 11, 5), int64], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(110), int32], Tensor[(110), float64]) {
  %562 = cast(%var_4270, dtype="int64") /* ty=int64 */;
  %563 = cast(%var_4271, dtype="int64") /* ty=Tensor[(16, 1, 16), int64] */;
  %564 = cast(meta[relay.Constant][30] /* ty=Tensor[(110), int64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
  %565 = cast(meta[relay.Constant][30] /* ty=Tensor[(110), int64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
  %566 = reshape(%564, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
  %567 = reshape(%565, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
  %568 = @func_2191(%566, %567) /* ty=(Tensor[(2, 11, 5), int64], Tensor[(88), float32]) */;
  %569 = cast(%var_4305, dtype="float64") /* ty=Tensor[(780), float64] */;
  %570 = reshape(%569, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %571 = @func_1538(%570) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %572 = cast(meta[relay.Constant][30] /* ty=Tensor[(110), int64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %573 = cos(%572) /* ty=Tensor[(110), float64] */;
  %574 = cast(%573, dtype="int32") /* ty=Tensor[(110), int32] */;
  %575 = cast(%var_4270, dtype="int32") /* ty=int32 */;
  %576 = cast(meta[relay.Constant][30] /* ty=Tensor[(110), int64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %577 = left_shift(%562, %563) /* ty=Tensor[(16, 1, 16), int64] */;
  %578 = %568.0;
  %579 = %571.3;
  %580 = bitwise_or(%574, %575) /* ty=Tensor[(110), int32] */;
  %581 = log(%576) /* ty=Tensor[(110), float64] */;
  (%577, %578, %579, %var_4305, %580, %581)
}

def @func_5145(%var_5112: Tensor[(2240), float64], %var_5118: Tensor[(14, 10, 16), float64]) -> (Tensor[(448), uint8], Tensor[(2240), float64], Tensor[(14, 10, 16), float64], Tensor[(780), float64]) {
  %582 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %583 = cast(%var_5112, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %584 = reshape(%583, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), float64] */;
  %585 = @func_4599(%584) /* ty=Tensor[(14, 10, 16), float64] */;
  %586 = cast(%var_5118, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %590 = %582.0;
  %591 = multiply(%588, %589) /* ty=Tensor[(14, 10, 16), float64] */;
  %592 = @func_3336() /* ty=Tensor[(780), float64] */;
  (%590, %var_5112, %591, %592)
}

def @func_5535(%var_5505: float32, %var_5506: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), float32], Tensor[(16, 6, 8), uint8], Tensor[(768), float64], Tensor[(7, 2, 2), float64]) {
  %593 = cast(%var_5505, dtype="float32") /* ty=float32 */;
  %594 = cast(%var_5506, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %595 = cast(meta[relay.Constant][31] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
  %596 = reshape(%595, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float64] */;
  %597 = @func_5056(%596) /* ty=(Tensor[(16, 6, 8), uint8], Tensor[(12, 14, 10), float32]) */;
  %598 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %599 = floor_mod(%593, %594) /* ty=Tensor[(12, 14, 7), float32] */;
  %600 = %597.0;
  %601 = %598.0;
  (%599, %600, meta[relay.Constant][31] /* ty=Tensor[(768), float64] */, %601)
}

def @func_4240() -> (Tensor[(448), uint8],) {
  %602 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %603 = %602.0;
  (%603,)
}

def @func_3654() -> (Tensor[(448), uint8],) {
  %604 = @func_2870() /* ty=(Tensor[(448), uint8],) */;
  %605 = %604.0;
  (%605,)
}

def @func_3638() -> (Tensor[(13, 5, 12), float32], Tensor[(448), uint8]) {
  %606 = @func_2870() /* ty=(Tensor[(448), uint8],) */;
  %607 = @func_2679() /* ty=Tensor[(13, 5, 12), float32] */;
  %608 = %606.0;
  (%607, %608)
}

def @func_2616(%var_2572: bool, %var_2573: Tensor[(13, 4, 6), bool]) -> (Tensor[(13, 7, 10), bool], Tensor[(5, 156), float64], Tensor[(13, 4, 6), uint8]) {
  %609 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 156), float64] */, dtype="float64") /* ty=Tensor[(5, 156), float64] */;
  %610 = reshape(%609, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %611 = @func_1538(%610) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %612 = cast(%var_2572, dtype="bool") /* ty=bool */;
  %613 = cast(%var_2573, dtype="bool") /* ty=Tensor[(13, 4, 6), bool] */;
  %614 = logical_and(%612, %613) /* ty=Tensor[(13, 4, 6), bool] */;
  %615 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 4, 6), bool] */, dtype="uint8") /* ty=Tensor[(13, 4, 6), uint8] */;
  %616 = shape_of(%614, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%614, dtype="uint8") /* ty=Tensor[(13, 4, 6), uint8] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %619 = %611.0;
  %620 = bitwise_and(%617, %618) /* ty=Tensor[(13, 4, 6), uint8] */;
  (%619, meta[relay.Constant][32] /* ty=Tensor[(5, 156), float64] */, %620)
}

def @main(%var_5557: Tensor[(3, 4, 4), int32], %var_5571: Tensor[(840, 2), float32], %var_5572: Tensor[(28), uint16]) -> (Tensor[(3, 4, 4), int32], Tensor[(56, 8), bool], Tensor[(448, 1), float32], Tensor[(7, 2, 2), float64], Tensor[(840, 2), float32], Tensor[(1680), float32], Tensor[(28), float64]) {
  %621 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 4, 4), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 4), int32] */;
  %622 = shape_of(%var_5557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%var_5557, dtype="int32") /* ty=Tensor[(3, 4, 4), int32] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %625 = cast(meta[relay.Constant][35] /* ty=Tensor[(448, 1), float32] */, dtype="float32") /* ty=Tensor[(448, 1), float32] */;
  %626 = reshape(%625, newshape=[56, 8]) /* ty=Tensor[(56, 8), float32] */;
  %627 = @func_3936(%626) /* ty=(Tensor[(56, 8), bool],) */;
  %628 = cast(%var_5571, dtype="float32") /* ty=Tensor[(840, 2), float32] */;
  %629 = cast(%var_5572, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %630 = reshape(%628, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float32] */;
  %631 = reshape(%629, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %632 = @func_188(%630, %631) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */;
  %633 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %634 = cast(%var_5572, dtype="float64") /* ty=Tensor[(28), float64] */;
  %635 = left_shift(%623, %624) /* ty=Tensor[(3, 4, 4), int32] */;
  %636 = %627.0;
  %637 = %632.1;
  %638 = %633.5;
  %639 = log2(%634) /* ty=Tensor[(28), float64] */;
  (%635, %636, meta[relay.Constant][35] /* ty=Tensor[(448, 1), float32] */, %637, %var_5571, %638, %639)
}

def @func_693(%var_641: Tensor[(4, 8, 14), uint8], %var_642: Tensor[(4, 8, 14), uint8]) -> (Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) {
  %640 = cast(meta[relay.Constant][36] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %641 = reshape(%640, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %642 = cast(%var_642, dtype="bool") /* ty=Tensor[(4, 8, 14), bool] */;
  %643 = shape_of(%var_641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%var_641, dtype="bool") /* ty=Tensor[(4, 8, 14), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %646 = greater(%644, %645) /* ty=Tensor[(4, 8, 14), bool] */;
  %647 = cast(%var_641, dtype="int64") /* ty=Tensor[(4, 8, 14), int64] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="int64") /* ty=Tensor[(4, 8, 14), int64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %651 = bitwise_and(%649, %650) /* ty=Tensor[(4, 8, 14), int64] */;
  %652 = cast(%651, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %653 = shape_of(%var_641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_641, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %656 = floor_mod(%654, %655) /* ty=Tensor[(4, 8, 14), float32] */;
  %657 = cast(%651, dtype="uint32") /* ty=Tensor[(4, 8, 14), uint32] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="uint32") /* ty=Tensor[(4, 8, 14), uint32] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %661 = @func_129(%641) /* ty=Tensor[(7, 2, 2), float64] */;
  %662 = multiply(%659, %660) /* ty=Tensor[(4, 8, 14), uint32] */;
  (%661, meta[relay.Constant][36] /* ty=Tensor[(28), uint16] */, %662)
}

def @func_4367() -> Tensor[(448), uint8] {
  %663 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %663.2
}

def @func_2073() -> (Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) {
  %664 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %665 = cast(meta[relay.Constant][37] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %666 = cast(meta[relay.Constant][38] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %667 = reshape(%665, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %668 = reshape(%666, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %669 = @func_1602(%667, %668) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */;
  %670 = %664.1;
  %671 = %669.6;
  (%670, %671, meta[relay.Constant][37] /* ty=Tensor[(780), float64] */, meta[relay.Constant][38] /* ty=Tensor[(88), float32] */)
}

def @func_4825() -> Tensor[(448), uint8] {
  @func_4478() /* ty=Tensor[(448), uint8] */
}

def @func_4899() -> (Tensor[(7, 2, 2), float64],) {
  %672 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %673 = %672.0;
  (%673,)
}

def @func_2803(%var_2782: Tensor[(6, 1, 4), bool], %var_2783: Tensor[(6, 5, 4), bool]) -> (Tensor[(6, 5, 4), bool], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(28), float64]) {
  %674 = cast(%var_2782, dtype="bool") /* ty=Tensor[(6, 1, 4), bool] */;
  %675 = cast(%var_2783, dtype="bool") /* ty=Tensor[(6, 5, 4), bool] */;
  %676 = cast(meta[relay.Constant][39] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %678 = reshape(%676, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %679 = reshape(%677, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %680 = @func_2158(%678, %679) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %681 = cast(meta[relay.Constant][41] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %682 = cast(meta[relay.Constant][39] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %683 = reshape(%681, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %684 = reshape(%682, newshape=[130, 6]) /* ty=Tensor[(130, 6), float64] */;
  %685 = @func_1677(%683, %684) /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) */;
  %686 = logical_or(%674, %675) /* ty=Tensor[(6, 5, 4), bool] */;
  %687 = %680.9;
  %688 = %685.3;
  (%686, %687, meta[relay.Constant][39] /* ty=Tensor[(780), float64] */, meta[relay.Constant][40] /* ty=Tensor[(448), uint8] */, %688, meta[relay.Constant][41] /* ty=Tensor[(28), float64] */)
}

def @func_1915(%var_1840: Tensor[(780), float64], %var_1841: Tensor[(22, 4), float32], %var_1878: Tensor[(11, 8, 10), float64]) -> (Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) {
  %689 = cast(%var_1840, dtype="float64") /* ty=Tensor[(780), float64] */;
  %690 = cast(%var_1841, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %691 = reshape(%689, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %692 = reshape(%690, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %693 = @func_1602(%691, %692) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */;
  %694 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %695 = %694.0;
  %696 = cast(%var_1878, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%695, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %700 = cast(%var_1841, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %701 = reshape(%700, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %702 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %703 = %702.0;
  %704 = cast(%703, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %705 = cast(%var_1840, dtype="float64") /* ty=Tensor[(780), float64] */;
  %706 = cast(meta[relay.Constant][42] /* ty=Tensor[(56, 8), uint8] */, dtype="uint8") /* ty=Tensor[(56, 8), uint8] */;
  %707 = reshape(%705, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %708 = reshape(%706, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %709 = @func_1317(%707, %708) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %710 = %709.7;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %712 = %693.1;
  %713 = cast(%712, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %714 = reshape(%713, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %715 = not_equal(%698, %699) /* ty=Tensor[(11, 8, 10), bool] */;
  %716 = @func_1350(%701) /* ty=Tensor[(11, 4, 2), float64] */;
  %717 = erf(%704) /* ty=Tensor[(7, 2, 2), float32] */;
  %718 = cosh(%711) /* ty=Tensor[(7, 2, 2), float32] */;
  %719 = @func_129(%714) /* ty=Tensor[(7, 2, 2), float64] */;
  (%712, %var_1840, %var_1841, %715, %716, %717, meta[relay.Constant][42] /* ty=Tensor[(56, 8), uint8] */, %718, %719)
}

def @func_2322() -> (Tensor[(448), uint8], Tensor[(780), float64]) {
  %720 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %721 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %722 = %720.2;
  %723 = %721.0;
  (%722, %723)
}

def @func_3936(%var_3930: Tensor[(56, 8), float32]) -> (Tensor[(56, 8), bool],) {
  %724 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
  %725 = %724.1;
  %726 = cast(%var_3930, dtype="bool") /* ty=Tensor[(56, 8), bool] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(2), int32] */;
  %728 = cast(%725, dtype="bool") /* ty=Tensor[(56, 8), bool] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %730 = logical_and(%728, %729) /* ty=Tensor[(56, 8), bool] */;
  (%730,)
}

def @func_2384(%var_2369: Tensor[(110), int64]) -> (Tensor[(7, 2, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(110), float32]) {
  %731 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %732 = cast(%var_2369, dtype="int64") /* ty=Tensor[(110), int64] */;
  %733 = cast(%var_2369, dtype="int64") /* ty=Tensor[(110), int64] */;
  %734 = reshape(%732, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
  %735 = reshape(%733, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
  %736 = @func_2191(%734, %735) /* ty=(Tensor[(2, 11, 5), int64], Tensor[(88), float32]) */;
  %737 = cast(%var_2369, dtype="float32") /* ty=Tensor[(110), float32] */;
  %738 = %731.0;
  %739 = %736.0;
  %740 = asin(%737) /* ty=Tensor[(110), float32] */;
  (%738, %739, %740)
}

def @func_5408(%var_5401: Tensor[(12, 14, 10), int32]) -> (Tensor[(12, 14, 10), int64],) {
  %741 = @func_4234() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), int32]) */;
  %742 = %741.1;
  %743 = cast(%var_5401, dtype="int64") /* ty=Tensor[(12, 14, 10), int64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="int64") /* ty=Tensor[(12, 14, 10), int64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %747 = bitwise_and(%745, %746) /* ty=Tensor[(12, 14, 10), int64] */;
  (%747,)
}

def @func_4977() -> (Tensor[(780), float64], Tensor[(7, 2, 2), float64], Tensor[(780), uint16]) {
  %748 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %749 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %750 = %748.0;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(780), float64] */;
  %752 = reshape(%751, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %753 = %749.0;
  %754 = @func_3435(%752) /* ty=Tensor[(780), uint16] */;
  (%750, %753, %754)
}

def @func_2561() -> (Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) {
  %755 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %756 = cast(meta[relay.Constant][43] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %757 = cast(meta[relay.Constant][44] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %758 = reshape(%756, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %759 = reshape(%757, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %760 = @func_2158(%758, %759) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %761 = cast(meta[relay.Constant][43] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %762 = reshape(%761, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %763 = @func_2013(%762) /* ty=(Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) */;
  %764 = %755.0;
  %765 = cast(%764, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %766 = reshape(%765, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %767 = %760.9;
  %768 = %763.0;
  %769 = @func_129(%766) /* ty=Tensor[(7, 2, 2), float64] */;
  (%764, %767, meta[relay.Constant][43] /* ty=Tensor[(780), float64] */, meta[relay.Constant][44] /* ty=Tensor[(448), uint8] */, %768, %769)
}

def @func_5237() -> (Tensor[(1680), float32], Tensor[(780), float64], Tensor[(780), float64], Tensor[(108), float32]) {
  %770 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %771 = cast(meta[relay.Constant][45] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %772 = reshape(%771, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), float32] */;
  %773 = @func_3792(%772) /* ty=(Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) */;
  %774 = %770.5;
  %775 = @func_4876() /* ty=Tensor[(780), float64] */;
  %776 = %773.1;
  (%774, %775, %776, meta[relay.Constant][45] /* ty=Tensor[(108), float32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2195(%var_2193: Tensor[(2, 11, 5), int64], %var_2194: Tensor[(2, 11, 5), int64]) -> (Tensor[(2, 11, 5), int64], Tensor[(88), float32]) {
  @func_2191(%var_2193, %var_2194) /* ty=(Tensor[(2, 11, 5), int64], Tensor[(88), float32]) */
}

def @func_2386(%var_2385: Tensor[(110), int64]) -> (Tensor[(7, 2, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(110), float32]) {
  %10 = fn (%var_2369: Tensor[(110), int64]) -> (Tensor[(7, 2, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(110), float32]) {
    %0 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
    %1 = cast(%var_2369, dtype="int64") /* ty=Tensor[(110), int64] */;
    %2 = cast(%var_2369, dtype="int64") /* ty=Tensor[(110), int64] */;
    %3 = reshape(%1, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
    %4 = reshape(%2, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
    %5 = @func_2191(%3, %4) /* ty=(Tensor[(2, 11, 5), int64], Tensor[(88), float32]) */;
    %6 = cast(%var_2369, dtype="float32") /* ty=Tensor[(110), float32] */;
    %7 = %0.0;
    %8 = %5.0;
    %9 = asin(%6) /* ty=Tensor[(110), float32] */;
    (%7, %8, %9)
  };
  %10(%var_2385) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(2, 11, 5), int64], Tensor[(110), float32]) */
}

def @func_5447(%var_5445: Tensor[(780), float64], %var_5446: Tensor[(780), float64]) -> (Tensor[(780), bool], Tensor[(780), bool]) {
  %23 = fn (%var_5430: Tensor[(780), float64], %var_5435: Tensor[(780), float64]) -> (Tensor[(780), bool], Tensor[(780), bool]) {
    %11 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
    %12 = %11.0;
    %13 = cast(%var_5430, dtype="bool") /* ty=Tensor[(780), bool] */;
    %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(1), int32] */;
    %15 = cast(%12, dtype="bool") /* ty=Tensor[(780), bool] */;
    %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?), bool] */;
    %17 = cast(%var_5435, dtype="bool") /* ty=Tensor[(780), bool] */;
    %18 = shape_of(%var_5430, dtype="int32") /* ty=Tensor[(1), int32] */;
    %19 = cast(%var_5430, dtype="bool") /* ty=Tensor[(780), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?), bool] */;
    %21 = logical_or(%15, %16) /* ty=Tensor[(780), bool] */;
    %22 = not_equal(%19, %20) /* ty=Tensor[(780), bool] */;
    (%21, %22)
  };
  %23(%var_5445, %var_5446) /* ty=(Tensor[(780), bool], Tensor[(780), bool]) */
}

def @func_3733(%var_3732: Tensor[(2, 44), float32]) -> (Tensor[(780), float64], Tensor[(780), float64], Tensor[(2, 44), int8], Tensor[(2, 44), int8]) {
  %53 = fn (%var_3684: Tensor[(2, 44), float32]) -> (Tensor[(780), float64], Tensor[(780), float64], Tensor[(2, 44), int8], Tensor[(2, 44), int8]) {
    %24 = @func_3397() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
    %25 = @func_2250() /* ty=(Tensor[(780), float64],) */;
    %26 = cast(%var_3684, dtype="float64") /* ty=Tensor[(2, 44), float64] */;
    %27 = log(%26) /* ty=Tensor[(2, 44), float64] */;
    %28 = cast(%var_3684, dtype="float32") /* ty=Tensor[(2, 44), float32] */;
    %29 = reshape(%28, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %30 = @func_1350(%29) /* ty=Tensor[(11, 4, 2), float64] */;
    %31 = cast(%30, dtype="int8") /* ty=Tensor[(11, 4, 2), int8] */;
    %32 = shape_of(%27, dtype="int32") /* ty=Tensor[(2), int32] */;
    %33 = cast(%27, dtype="int8") /* ty=Tensor[(2, 44), int8] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %35 = cast(%30, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
    %36 = shape_of(%var_3684, dtype="int32") /* ty=Tensor[(2), int32] */;
    %37 = cast(%var_3684, dtype="uint32") /* ty=Tensor[(2, 44), uint32] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %39 = left_shift(%37, %38) /* ty=Tensor[(2, 44), uint32] */;
    %40 = cast(%var_3684, dtype="float64") /* ty=Tensor[(2, 44), float64] */;
    %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(2), int32] */;
    %42 = cast(%39, dtype="float64") /* ty=Tensor[(2, 44), float64] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %44 = power(%42, %43) /* ty=Tensor[(2, 44), float64] */;
    %45 = cast(%44, dtype="int8") /* ty=Tensor[(2, 44), int8] */;
    %46 = shape_of(%27, dtype="int32") /* ty=Tensor[(2), int32] */;
    %47 = cast(%27, dtype="int8") /* ty=Tensor[(2, 44), int8] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %49 = %24.1;
    %50 = %25.0;
    %51 = multiply(%33, %34) /* ty=Tensor[(2, 44), int8] */;
    %52 = subtract(%47, %48) /* ty=Tensor[(2, 44), int8] */;
    (%49, %50, %51, %52)
  };
  %53(%var_3732) /* ty=(Tensor[(780), float64], Tensor[(780), float64], Tensor[(2, 44), int8], Tensor[(2, 44), int8]) */
}

def @func_5411(%var_5409: Tensor[(12, 14, 10), int32]) -> (Tensor[(12, 14, 10), int64],) {
  @func_5408(%var_5409) /* ty=(Tensor[(12, 14, 10), int64],) */
}

def @func_3556(%var_3554: Tensor[(6, 6, 13), int8], %var_3555: Tensor[(6, 6, 13), int8]) -> (Tensor[(13, 5, 12), float32], Tensor[(6, 6, 13), uint8]) {
  %66 = fn (%var_3536: Tensor[(6, 6, 13), int8], %var_3537: Tensor[(6, 6, 13), int8]) -> (Tensor[(13, 5, 12), float32], Tensor[(6, 6, 13), uint8]) {
    %54 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
    %55 = cast(%var_3537, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
    %56 = shape_of(%var_3536, dtype="int32") /* ty=Tensor[(3), int32] */;
    %57 = cast(%var_3536, dtype="bool") /* ty=Tensor[(6, 6, 13), bool] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %59 = greater(%57, %58) /* ty=Tensor[(6, 6, 13), bool] */;
    %60 = cast(%59, dtype="uint8") /* ty=Tensor[(6, 6, 13), uint8] */;
    %61 = shape_of(%var_3536, dtype="int32") /* ty=Tensor[(3), int32] */;
    %62 = cast(%var_3536, dtype="uint8") /* ty=Tensor[(6, 6, 13), uint8] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %64 = %54.1;
    %65 = bitwise_and(%62, %63) /* ty=Tensor[(6, 6, 13), uint8] */;
    (%64, %65)
  };
  %66(%var_3554, %var_3555) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(6, 6, 13), uint8]) */
}

def @func_1352(%var_1351: Tensor[(11, 4, 2), float32]) -> Tensor[(11, 4, 2), float64] {
  %75 = fn (%var_1338: Tensor[(11, 4, 2), float32]) -> Tensor[(11, 4, 2), float64] {
    %67 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 4, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 4, 2), float32] */;
    %68 = log(%67) /* ty=Tensor[(11, 4, 2), float32] */;
    %69 = cast(%var_1338, dtype="int64") /* ty=Tensor[(11, 4, 2), int64] */;
    %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%68, dtype="int64") /* ty=Tensor[(11, 4, 2), int64] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %73 = multiply(%71, %72) /* ty=Tensor[(11, 4, 2), int64] */;
    %74 = cast(%73, dtype="float64") /* ty=Tensor[(11, 4, 2), float64] */;
    tan(%74) /* ty=Tensor[(11, 4, 2), float64] */
  };
  %75(%var_1351) /* ty=Tensor[(11, 4, 2), float64] */
}

def @func_129(%var_81: Tensor[(7, 2, 2), uint16]) -> Tensor[(7, 2, 2), float64] {
  %76 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 2, 2), uint16] */, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %77 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_81, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %80 = bitwise_xor(%78, %79) /* ty=Tensor[(7, 2, 2), uint16] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  %82 = shape_of(%var_81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%var_81, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %85 = floor_mod(%83, %84) /* ty=Tensor[(7, 2, 2), float64] */;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  acos(%86) /* ty=Tensor[(7, 2, 2), float64] */
}

def @func_2561() -> (Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) {
  %87 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %88 = cast(meta[relay.Constant][2] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %90 = reshape(%88, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %91 = reshape(%89, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %92 = @func_2158(%90, %91) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %93 = cast(meta[relay.Constant][2] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %94 = reshape(%93, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %95 = @func_2013(%94) /* ty=(Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) */;
  %96 = %87.0;
  %97 = cast(%96, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %98 = reshape(%97, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %99 = %92.9;
  %100 = %95.0;
  %101 = @func_129(%98) /* ty=Tensor[(7, 2, 2), float64] */;
  (%96, %99, meta[relay.Constant][2] /* ty=Tensor[(780), float64] */, meta[relay.Constant][3] /* ty=Tensor[(448), uint8] */, %100, %101)
}

def @func_4328(%var_4325: int64, %var_4326: Tensor[(16, 1, 16), int64], %var_4327: Tensor[(780), float64]) -> (Tensor[(16, 1, 16), int64], Tensor[(2, 11, 5), int64], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(110), int32], Tensor[(110), float64]) {
  %122 = fn (%var_4270: int64, %var_4271: Tensor[(16, 1, 16), int64], %var_4305: Tensor[(780), float64]) -> (Tensor[(16, 1, 16), int64], Tensor[(2, 11, 5), int64], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(110), int32], Tensor[(110), float64]) {
    %102 = cast(%var_4270, dtype="int64") /* ty=int64 */;
    %103 = cast(%var_4271, dtype="int64") /* ty=Tensor[(16, 1, 16), int64] */;
    %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(110), int64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
    %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(110), int64] */, dtype="int64") /* ty=Tensor[(110), int64] */;
    %106 = reshape(%104, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
    %107 = reshape(%105, newshape=[2, 11, 5]) /* ty=Tensor[(2, 11, 5), int64] */;
    %108 = @func_2191(%106, %107) /* ty=(Tensor[(2, 11, 5), int64], Tensor[(88), float32]) */;
    %109 = cast(%var_4305, dtype="float64") /* ty=Tensor[(780), float64] */;
    %110 = reshape(%109, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %111 = @func_1538(%110) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
    %112 = cast(meta[relay.Constant][4] /* ty=Tensor[(110), int64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %113 = cos(%112) /* ty=Tensor[(110), float64] */;
    %114 = cast(%113, dtype="int32") /* ty=Tensor[(110), int32] */;
    %115 = cast(%var_4270, dtype="int32") /* ty=int32 */;
    %116 = cast(meta[relay.Constant][4] /* ty=Tensor[(110), int64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
    %117 = left_shift(%102, %103) /* ty=Tensor[(16, 1, 16), int64] */;
    %118 = %108.0;
    %119 = %111.3;
    %120 = bitwise_or(%114, %115) /* ty=Tensor[(110), int32] */;
    %121 = log(%116) /* ty=Tensor[(110), float64] */;
    (%117, %118, %119, %var_4305, %120, %121)
  };
  %122(%var_4325, %var_4326, %var_4327) /* ty=(Tensor[(16, 1, 16), int64], Tensor[(2, 11, 5), int64], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(110), int32], Tensor[(110), float64]) */
}

def @func_5239() -> (Tensor[(1680), float32], Tensor[(780), float64], Tensor[(780), float64], Tensor[(108), float32]) {
  @func_5237() /* ty=(Tensor[(1680), float32], Tensor[(780), float64], Tensor[(780), float64], Tensor[(108), float32]) */
}

def @func_3307() -> (Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) {
  %143 = fn () -> (Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) {
    %123 = @func_3055() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */;
    %124 = %123.1;
    %125 = cast(%124, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
    %126 = atanh(%125) /* ty=Tensor[(56, 8), float32] */;
    %127 = cast(%126, dtype="float64") /* ty=Tensor[(56, 8), float64] */;
    %128 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
    %129 = cast(meta[relay.Constant][5] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %130 = %128.3;
    %131 = cast(%130, dtype="float32") /* ty=Tensor[(88), float32] */;
    %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
    %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %134 = reshape(%129, newshape=[13, 3, 4]) /* ty=Tensor[(13, 3, 4), float32] */;
    %135 = reshape(%131, newshape=[88]) /* ty=Tensor[(88), float32] */;
    %136 = reshape(%132, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
    %137 = reshape(%133, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %138 = @func_1976(%134, %135, %136, %137) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(780), float64], Tensor[(88), float32], Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), uint32], Tensor[(7, 2, 2), float64], Tensor[(1680), float32], Tensor[(13, 3, 4), float32]) */;
    %139 = cast(%126, dtype="float64") /* ty=Tensor[(56, 8), float64] */;
    %140 = sqrt(%127) /* ty=Tensor[(56, 8), float64] */;
    %141 = %138.1;
    %142 = rsqrt(%139) /* ty=Tensor[(56, 8), float64] */;
    (%140, %130, %141, meta[relay.Constant][5] /* ty=Tensor[(156), float32] */, meta[relay.Constant][6] /* ty=Tensor[(28), float64] */, meta[relay.Constant][7] /* ty=Tensor[(1680), float32] */, %142)
  };
  %143() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */
}

def @func_1317(%var_1235: Tensor[(13, 5, 12), float64], %var_1294: Tensor[(448), uint8]) -> (Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) {
  %144 = cast(%var_1235, dtype="float64") /* ty=Tensor[(13, 5, 12), float64] */;
  %145 = cosh(%144) /* ty=Tensor[(13, 5, 12), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(13, 5, 12), float32] */;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %148 = reshape(%147, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %149 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %150 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %151 = reshape(%149, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %152 = reshape(%150, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %153 = @func_693(%151, %152) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
  %154 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %155 = reshape(%154, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %156 = @func_998(%155) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %157 = cast(%145, dtype="float32") /* ty=Tensor[(13, 5, 12), float32] */;
  %158 = @func_129(%148) /* ty=Tensor[(7, 2, 2), float64] */;
  %159 = cast(%158, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %160 = reshape(%159, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %161 = cast(%var_1294, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %162 = reshape(%161, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %163 = @func_998(%162) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %164 = exp(%146) /* ty=Tensor[(13, 5, 12), float32] */;
  %165 = %153.1;
  %166 = %156.0;
  %167 = sinh(%157) /* ty=Tensor[(13, 5, 12), float32] */;
  %168 = @func_129(%160) /* ty=Tensor[(7, 2, 2), float64] */;
  %169 = %163.0;
  (%164, %158, meta[relay.Constant][8] /* ty=Tensor[(28), uint16] */, %165, %var_1294, %166, %167, %168, %169)
}

def @func_5408(%var_5401: Tensor[(12, 14, 10), int32]) -> (Tensor[(12, 14, 10), int64],) {
  %170 = @func_4234() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), int32]) */;
  %171 = %170.1;
  %172 = cast(%var_5401, dtype="int64") /* ty=Tensor[(12, 14, 10), int64] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="int64") /* ty=Tensor[(12, 14, 10), int64] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %176 = bitwise_and(%174, %175) /* ty=Tensor[(12, 14, 10), int64] */;
  (%176,)
}

def @func_5538(%var_5536: float32, %var_5537: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), float32], Tensor[(16, 6, 8), uint8], Tensor[(768), float64], Tensor[(7, 2, 2), float64]) {
  %186 = fn (%var_5505: float32, %var_5506: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), float32], Tensor[(16, 6, 8), uint8], Tensor[(768), float64], Tensor[(7, 2, 2), float64]) {
    %177 = cast(%var_5505, dtype="float32") /* ty=float32 */;
    %178 = cast(%var_5506, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
    %179 = cast(meta[relay.Constant][9] /* ty=Tensor[(768), float64] */, dtype="float64") /* ty=Tensor[(768), float64] */;
    %180 = reshape(%179, newshape=[16, 6, 8]) /* ty=Tensor[(16, 6, 8), float64] */;
    %181 = @func_5056(%180) /* ty=(Tensor[(16, 6, 8), uint8], Tensor[(12, 14, 10), float32]) */;
    %182 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
    %183 = floor_mod(%177, %178) /* ty=Tensor[(12, 14, 7), float32] */;
    %184 = %181.0;
    %185 = %182.0;
    (%183, %184, meta[relay.Constant][9] /* ty=Tensor[(768), float64] */, %185)
  };
  %186(%var_5536, %var_5537) /* ty=(Tensor[(12, 14, 7), float32], Tensor[(16, 6, 8), uint8], Tensor[(768), float64], Tensor[(7, 2, 2), float64]) */
}

def @func_5237() -> (Tensor[(1680), float32], Tensor[(780), float64], Tensor[(780), float64], Tensor[(108), float32]) {
  %187 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(108), float32] */, dtype="float32") /* ty=Tensor[(108), float32] */;
  %189 = reshape(%188, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), float32] */;
  %190 = @func_3792(%189) /* ty=(Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) */;
  %191 = %187.5;
  %192 = @func_4876() /* ty=Tensor[(780), float64] */;
  %193 = %190.1;
  (%191, %192, %193, meta[relay.Constant][10] /* ty=Tensor[(108), float32] */)
}

def @func_1605(%var_1603: Tensor[(780), float64], %var_1604: Tensor[(88), float32]) -> (Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) {
  %219 = fn (%var_1580: Tensor[(780), float64], %var_1599: Tensor[(88), float32]) -> (Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) {
    %194 = cast(meta[relay.Constant][12] /* ty=Tensor[(13, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
    %195 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 16, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %196 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
    %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %198 = cast(meta[relay.Constant][13] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
    %199 = reshape(%198, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
    %200 = cast(%var_1580, dtype="float64") /* ty=Tensor[(780), float64] */;
    %201 = reshape(%200, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %202 = @func_1538(%201) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
    %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 16, 8), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
    %204 = acosh(%203) /* ty=Tensor[(13, 16, 8), float64] */;
    %205 = cast(%204, dtype="float64") /* ty=Tensor[(13, 16, 8), float64] */;
    %206 = cast(%var_1580, dtype="float64") /* ty=Tensor[(780), float64] */;
    %207 = %202.4;
    %208 = cast(%207, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
    %209 = reshape(%206, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
    %210 = reshape(%208, newshape=[448]) /* ty=Tensor[(448), uint8] */;
    %211 = @func_1317(%209, %210) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
    %212 = cast(%var_1599, dtype="float32") /* ty=Tensor[(88), float32] */;
    %213 = reshape(%212, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %214 = multiply(%196, %197) /* ty=Tensor[(13, 16, 8), float64] */;
    %215 = @func_129(%199) /* ty=Tensor[(7, 2, 2), float64] */;
    %216 = cosh(%205) /* ty=Tensor[(13, 16, 8), float64] */;
    %217 = %211.0;
    %218 = @func_1350(%213) /* ty=Tensor[(11, 4, 2), float64] */;
    (%214, %215, meta[relay.Constant][13] /* ty=Tensor[(28), uint16] */, %207, %var_1580, %216, %217, %218, %var_1599)
  };
  %219(%var_1603, %var_1604) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */
}

def @func_3655() -> (Tensor[(448), uint8],) {
  %222 = fn () -> (Tensor[(448), uint8],) {
    %220 = @func_2870() /* ty=(Tensor[(448), uint8],) */;
    %221 = %220.0;
    (%221,)
  };
  %222() /* ty=(Tensor[(448), uint8],) */
}

def @func_4979() -> (Tensor[(780), float64], Tensor[(7, 2, 2), float64], Tensor[(780), uint16]) {
  @func_4977() /* ty=(Tensor[(780), float64], Tensor[(7, 2, 2), float64], Tensor[(780), uint16]) */
}

def @func_132(%var_130: Tensor[(7, 2, 2), uint16]) -> Tensor[(7, 2, 2), float64] {
  @func_129(%var_130) /* ty=Tensor[(7, 2, 2), float64] */
}

def @func_5494(%var_5493: Tensor[(448), uint8]) -> (Tensor[(448), float32], Tensor[(56, 8), float32], Tensor[(448), float64], Tensor[(448), uint8]) {
  %236 = fn (%var_5478: Tensor[(448), uint8]) -> (Tensor[(448), float32], Tensor[(56, 8), float32], Tensor[(448), float64], Tensor[(448), uint8]) {
    %223 = @func_3207() /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
    %224 = %223.0;
    %225 = cast(%var_5478, dtype="float32") /* ty=Tensor[(448), float32] */;
    %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(1), int32] */;
    %227 = cast(%224, dtype="float32") /* ty=Tensor[(448), float32] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?), float32] */;
    %229 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
    %230 = cast(%var_5478, dtype="float64") /* ty=Tensor[(448), float64] */;
    %231 = @func_3166() /* ty=(Tensor[(448), uint8],) */;
    %232 = floor_mod(%227, %228) /* ty=Tensor[(448), float32] */;
    %233 = %229.1;
    %234 = asin(%230) /* ty=Tensor[(448), float64] */;
    %235 = %231.0;
    (%232, %233, %234, %235)
  };
  %236(%var_5493) /* ty=(Tensor[(448), float32], Tensor[(56, 8), float32], Tensor[(448), float64], Tensor[(448), uint8]) */
}

def @func_4235() -> (Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), int32]) {
  %246 = fn () -> (Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), int32]) {
    %237 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
    %238 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
    %239 = %238.1;
    %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 14, 10), float32] */, dtype="int32") /* ty=Tensor[(12, 14, 10), int32] */;
    %241 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %242 = cast(%239, dtype="int32") /* ty=Tensor[(12, 14, 10), int32] */;
    %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %244 = %237.0;
    %245 = logical_xor(%242, %243) /* ty=Tensor[(12, 14, 10), int32] */;
    (%244, %245)
  };
  %246() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), int32]) */
}

def @func_2736(%var_2712: Tensor[(448), uint8]) -> (Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(448), uint8], Tensor[(448), uint8]) {
  %247 = @func_2679() /* ty=Tensor[(13, 5, 12), float32] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(13, 5, 12), float64] */;
  %249 = cast(%var_2712, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %250 = reshape(%248, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %251 = reshape(%249, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %252 = @func_2158(%250, %251) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %253 = cast(%247, dtype="float64") /* ty=Tensor[(13, 5, 12), float64] */;
  %254 = cast(%var_2712, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %255 = reshape(%253, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %256 = reshape(%254, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %257 = @func_2158(%255, %256) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
  %258 = %252.0;
  %259 = %257.8;
  (%247, %258, %var_2712, %259)
}

def @func_3938(%var_3937: Tensor[(56, 8), float32]) -> (Tensor[(56, 8), bool],) {
  %267 = fn (%var_3930: Tensor[(56, 8), float32]) -> (Tensor[(56, 8), bool],) {
    %260 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
    %261 = %260.1;
    %262 = cast(%var_3930, dtype="bool") /* ty=Tensor[(56, 8), bool] */;
    %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(2), int32] */;
    %264 = cast(%261, dtype="bool") /* ty=Tensor[(56, 8), bool] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %266 = logical_and(%264, %265) /* ty=Tensor[(56, 8), bool] */;
    (%266,)
  };
  %267(%var_3937) /* ty=(Tensor[(56, 8), bool],) */
}

def @func_3056() -> (Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) {
  %280 = fn () -> (Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) {
    %268 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
    %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 156), float64] */, dtype="float64") /* ty=Tensor[(5, 156), float64] */;
    %270 = %268.3;
    %271 = cast(%270, dtype="float32") /* ty=Tensor[(88), float32] */;
    %272 = cast(meta[relay.Constant][16] /* ty=Tensor[(880), float64] */, dtype="float64") /* ty=Tensor[(880), float64] */;
    %273 = reshape(%269, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %274 = reshape(%271, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
    %275 = reshape(%272, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), float64] */;
    %276 = @func_1915(%273, %274, %275) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) */;
    %277 = @func_2250() /* ty=(Tensor[(780), float64],) */;
    %278 = %276.6;
    %279 = %277.0;
    (%270, %278, meta[relay.Constant][15] /* ty=Tensor[(5, 156), float64] */, meta[relay.Constant][16] /* ty=Tensor[(880), float64] */, %279)
  };
  %280() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */
}

def @func_4877() -> Tensor[(780), float64] {
  %282 = fn () -> Tensor[(780), float64] {
    %281 = @func_3619() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */;
    %281.0
  };
  %282() /* ty=Tensor[(780), float64] */
}

def @func_2322() -> (Tensor[(448), uint8], Tensor[(780), float64]) {
  %283 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %284 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %285 = %283.2;
  %286 = %284.0;
  (%285, %286)
}

def @func_1982(%var_1978: Tensor[(13, 3, 4), float32], %var_1979: Tensor[(88), float32], %var_1980: Tensor[(7, 2, 2), float64], %var_1981: Tensor[(1680), float32]) -> (Tensor[(13, 3, 4), float32], Tensor[(780), float64], Tensor[(88), float32], Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), uint32], Tensor[(7, 2, 2), float64], Tensor[(1680), float32], Tensor[(13, 3, 4), float32]) {
  @func_1976(%var_1978, %var_1979, %var_1980, %var_1981) /* ty=(Tensor[(13, 3, 4), float32], Tensor[(780), float64], Tensor[(88), float32], Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), uint32], Tensor[(7, 2, 2), float64], Tensor[(1680), float32], Tensor[(13, 3, 4), float32]) */
}

def @func_3522(%var_3520: Tensor[(2, 9, 3), float32]) -> Tensor[(2, 9, 3), float32] {
  @func_3519(%var_3520) /* ty=Tensor[(2, 9, 3), float32] */
}

def @func_1000(%var_999: Tensor[(448), uint8]) -> (Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) {
  %297 = fn (%var_981: Tensor[(448), uint8]) -> (Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) {
    %287 = cast(%var_981, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %288 = cast(%var_981, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %289 = reshape(%287, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
    %290 = reshape(%288, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
    %291 = @func_693(%289, %290) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
    %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 4, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 4, 5), float64] */;
    %293 = asinh(%292) /* ty=Tensor[(8, 4, 5), float64] */;
    %294 = cast(%293, dtype="float32") /* ty=Tensor[(8, 4, 5), float32] */;
    %295 = %291.2;
    %296 = cos(%294) /* ty=Tensor[(8, 4, 5), float32] */;
    (%295, %var_981, %296)
  };
  %297(%var_999) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */
}

def @func_2251() -> (Tensor[(780), float64],) {
  %300 = fn () -> (Tensor[(780), float64],) {
    %298 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
    %299 = %298.2;
    (%299,)
  };
  %300() /* ty=(Tensor[(780), float64],) */
}

def @func_3795(%var_3793: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) {
  @func_3792(%var_3793) /* ty=(Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) */
}

def @func_1321(%var_1319: Tensor[(13, 5, 12), float64], %var_1320: Tensor[(448), uint8]) -> (Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) {
  @func_1317(%var_1319, %var_1320) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */
}

def @func_3325() -> Tensor[(1680), float32] {
  %301 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %301.5
}

def @func_4184(%var_4181: Tensor[(16, 5, 3), float64], %var_4182: Tensor[(88), float32], %var_4183: Tensor[(448), uint8]) -> (Tensor[(88), float32], Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(16, 5, 3), bool], Tensor[(11, 4, 2), uint32], Tensor[(28), uint16], Tensor[(780), float64], Tensor[(4, 8, 14), uint32], Tensor[(6, 6, 13), uint8], Tensor[(468), int8], Tensor[(16, 5, 3), int16], Tensor[(7, 2, 2), float64]) {
  @func_4179(%var_4181, %var_4182, %var_4183) /* ty=(Tensor[(88), float32], Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(16, 5, 3), bool], Tensor[(11, 4, 2), uint32], Tensor[(28), uint16], Tensor[(780), float64], Tensor[(4, 8, 14), uint32], Tensor[(6, 6, 13), uint8], Tensor[(468), int8], Tensor[(16, 5, 3), int16], Tensor[(7, 2, 2), float64]) */
}

def @func_3792(%var_3741: Tensor[(3, 9, 4), float32]) -> (Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) {
  %302 = cast(%var_3741, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %303 = asinh(%302) /* ty=Tensor[(3, 9, 4), float32] */;
  %304 = cast(%var_3741, dtype="int32") /* ty=Tensor[(3, 9, 4), int32] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="int32") /* ty=Tensor[(3, 9, 4), int32] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %308 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %309 = cast(%303, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %310 = asin(%309) /* ty=Tensor[(3, 9, 4), float32] */;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(3, 9, 4), float64] */;
  %312 = cast(%310, dtype="float32") /* ty=Tensor[(3, 9, 4), float32] */;
  %313 = multiply(%306, %307) /* ty=Tensor[(3, 9, 4), int32] */;
  %314 = %308.1;
  %315 = erf(%311) /* ty=Tensor[(3, 9, 4), float64] */;
  %316 = exp(%312) /* ty=Tensor[(3, 9, 4), float32] */;
  (%313, %314, %315, %316)
}

def @func_4900() -> (Tensor[(7, 2, 2), float64],) {
  %319 = fn () -> (Tensor[(7, 2, 2), float64],) {
    %317 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
    %318 = %317.0;
    (%318,)
  };
  %319() /* ty=(Tensor[(7, 2, 2), float64],) */
}

def @func_2563() -> (Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) {
  @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */
}

def @func_1540(%var_1539: Tensor[(780), float64]) -> (Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) {
  %339 = fn (%var_1531: Tensor[(780), float64]) -> (Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) {
    %320 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 7, 10), float64] */, dtype="float64") /* ty=Tensor[(13, 7, 10), float64] */;
    %321 = exp(%320) /* ty=Tensor[(13, 7, 10), float64] */;
    %322 = cast(%321, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
    %323 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(13, 7, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %324 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 7, 10), float64] */, dtype="bool") /* ty=Tensor[(13, 7, 10), bool] */;
    %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %326 = cast(%var_1531, dtype="float64") /* ty=Tensor[(780), float64] */;
    %327 = cast(meta[relay.Constant][19] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %328 = reshape(%326, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
    %329 = reshape(%327, newshape=[448]) /* ty=Tensor[(448), uint8] */;
    %330 = @func_1317(%328, %329) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
    %331 = cast(%var_1531, dtype="float64") /* ty=Tensor[(780), float64] */;
    %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %333 = reshape(%331, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
    %334 = reshape(%332, newshape=[448]) /* ty=Tensor[(448), uint8] */;
    %335 = @func_1317(%333, %334) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
    %336 = not_equal(%324, %325) /* ty=Tensor[(13, 7, 10), bool] */;
    %337 = %330.4;
    %338 = %335.5;
    (%336, %337, %var_1531, meta[relay.Constant][19] /* ty=Tensor[(448), uint8] */, %338)
  };
  %339(%var_1539) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */
}

def @func_3957() -> (Tensor[(780), float64],) {
  %341 = fn () -> (Tensor[(780), float64],) {
    %340 = @func_3336() /* ty=Tensor[(780), float64] */;
    (%340,)
  };
  %341() /* ty=(Tensor[(780), float64],) */
}

def @func_2324() -> (Tensor[(448), uint8], Tensor[(780), float64]) {
  @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */
}

def @func_3399() -> (Tensor[(448), uint8], Tensor[(780), float64]) {
  @func_3397() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */
}

def @func_1976(%var_1935: Tensor[(13, 3, 4), float32], %var_1948: Tensor[(88), float32], %var_1951: Tensor[(7, 2, 2), float64], %var_1972: Tensor[(1680), float32]) -> (Tensor[(13, 3, 4), float32], Tensor[(780), float64], Tensor[(88), float32], Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), uint32], Tensor[(7, 2, 2), float64], Tensor[(1680), float32], Tensor[(13, 3, 4), float32]) {
  %342 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %343 = shape_of(%var_1935, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%var_1935, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %346 = cast(meta[relay.Constant][21] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %347 = cast(%var_1948, dtype="float32") /* ty=Tensor[(88), float32] */;
  %348 = reshape(%346, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %349 = reshape(%347, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %350 = @func_1602(%348, %349) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */;
  %351 = %350.1;
  %352 = cast(%var_1951, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = cast(%351, dtype="float64") /* ty=Tensor[(7, 2, 2), float64] */;
  %357 = cast(meta[relay.Constant][21] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %358 = reshape(%356, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %359 = reshape(%357, newshape=[130, 6]) /* ty=Tensor[(130, 6), float64] */;
  %360 = @func_1677(%358, %359) /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) */;
  %361 = cast(%var_1972, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %362 = cast(%351, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %363 = reshape(%361, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float32] */;
  %364 = reshape(%362, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %365 = @func_188(%363, %364) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */;
  %366 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 3, 4), float32] */, dtype="float32") /* ty=Tensor[(13, 3, 4), float32] */;
  %367 = divide(%344, %345) /* ty=Tensor[(13, 3, 4), float32] */;
  %368 = equal(%354, %355) /* ty=Tensor[(7, 2, 2), bool] */;
  %369 = %360.1;
  %370 = %365.1;
  %371 = rsqrt(%366) /* ty=Tensor[(13, 3, 4), float32] */;
  (%367, meta[relay.Constant][21] /* ty=Tensor[(780), float64] */, %var_1948, %368, %369, %370, %var_1972, %371)
}

def @func_3898(%var_3896: Tensor[(13, 15, 15), bool], %var_3897: Tensor[(13, 15, 15), bool]) -> (Tensor[(13, 15, 15), bool], Tensor[(7, 2, 2), float64], Tensor[(28, 1), uint16]) {
  %380 = fn (%var_3876: Tensor[(13, 15, 15), bool], %var_3877: Tensor[(13, 15, 15), bool]) -> (Tensor[(13, 15, 15), bool], Tensor[(7, 2, 2), float64], Tensor[(28, 1), uint16]) {
    %372 = cast(%var_3877, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
    %373 = shape_of(%var_3876, dtype="int32") /* ty=Tensor[(3), int32] */;
    %374 = cast(%var_3876, dtype="bool") /* ty=Tensor[(13, 15, 15), bool] */;
    %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %376 = cast(meta[relay.Constant][22] /* ty=Tensor[(28, 1), uint16] */, dtype="uint16") /* ty=Tensor[(28, 1), uint16] */;
    %377 = reshape(%376, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
    %378 = logical_and(%374, %375) /* ty=Tensor[(13, 15, 15), bool] */;
    %379 = @func_129(%377) /* ty=Tensor[(7, 2, 2), float64] */;
    (%378, %379, meta[relay.Constant][22] /* ty=Tensor[(28, 1), uint16] */)
  };
  %380(%var_3896, %var_3897) /* ty=(Tensor[(13, 15, 15), bool], Tensor[(7, 2, 2), float64], Tensor[(28, 1), uint16]) */
}

def @func_1920(%var_1917: Tensor[(780), float64], %var_1918: Tensor[(22, 4), float32], %var_1919: Tensor[(11, 8, 10), float64]) -> (Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) {
  @func_1915(%var_1917, %var_1918, %var_1919) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) */
}

def @func_3168() -> (Tensor[(448), uint8],) {
  @func_3166() /* ty=(Tensor[(448), uint8],) */
}

def @func_4480() -> Tensor[(448), uint8] {
  @func_4478() /* ty=Tensor[(448), uint8] */
}

def @func_2620(%var_2618: bool, %var_2619: Tensor[(13, 4, 6), bool]) -> (Tensor[(13, 7, 10), bool], Tensor[(5, 156), float64], Tensor[(13, 4, 6), uint8]) {
  @func_2616(%var_2618, %var_2619) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(5, 156), float64], Tensor[(13, 4, 6), uint8]) */
}

def @func_191(%var_189: Tensor[(12, 14, 10), float32], %var_190: Tensor[(28), uint16]) -> (Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) {
  %386 = fn (%var_174: Tensor[(12, 14, 10), float32], %var_182: Tensor[(28), uint16]) -> (Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) {
    %381 = cast(%var_174, dtype="float32") /* ty=Tensor[(12, 14, 10), float32] */;
    %382 = cast(%var_182, dtype="uint16") /* ty=Tensor[(28), uint16] */;
    %383 = reshape(%382, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
    %384 = sinh(%381) /* ty=Tensor[(12, 14, 10), float32] */;
    %385 = @func_129(%383) /* ty=Tensor[(7, 2, 2), float64] */;
    (%384, %385, %var_182)
  };
  %386(%var_189, %var_190) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */
}

def @func_4367() -> Tensor[(448), uint8] {
  %387 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %387.2
}

def @func_4727() -> (Tensor[(7, 2, 2), float64],) {
  %388 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %389 = %388.0;
  (%389,)
}

def @func_4977() -> (Tensor[(780), float64], Tensor[(7, 2, 2), float64], Tensor[(780), uint16]) {
  %390 = @func_2250() /* ty=(Tensor[(780), float64],) */;
  %391 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %392 = %390.0;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(780), float64] */;
  %394 = reshape(%393, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %395 = %391.0;
  %396 = @func_3435(%394) /* ty=Tensor[(780), uint16] */;
  (%392, %395, %396)
}

def @func_4992() -> Tensor[(448), uint8] {
  %397 = fn () -> Tensor[(448), uint8] {
    @func_4367() /* ty=Tensor[(448), uint8] */
  };
  %397() /* ty=Tensor[(448), uint8] */
}

def @func_4826() -> Tensor[(448), uint8] {
  %398 = fn () -> Tensor[(448), uint8] {
    @func_4478() /* ty=Tensor[(448), uint8] */
  };
  %398() /* ty=Tensor[(448), uint8] */
}

def @func_4179(%var_4064: Tensor[(16, 5, 3), float64], %var_4068: Tensor[(88), float32], %var_4076: Tensor[(448), uint8]) -> (Tensor[(88), float32], Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(16, 5, 3), bool], Tensor[(11, 4, 2), uint32], Tensor[(28), uint16], Tensor[(780), float64], Tensor[(4, 8, 14), uint32], Tensor[(6, 6, 13), uint8], Tensor[(468), int8], Tensor[(16, 5, 3), int16], Tensor[(7, 2, 2), float64]) {
  %399 = cast(%var_4076, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %400 = reshape(%399, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %401 = @func_998(%400) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %402 = cast(%var_4064, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %403 = sin(%402) /* ty=Tensor[(16, 5, 3), float64] */;
  %404 = cast(%var_4064, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %405 = shape_of(%403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%403, dtype="bool") /* ty=Tensor[(16, 5, 3), bool] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %408 = cast(%var_4068, dtype="float32") /* ty=Tensor[(88), float32] */;
  %409 = reshape(%408, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %410 = @func_1350(%409) /* ty=Tensor[(11, 4, 2), float64] */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(11, 4, 2), float64] */, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="uint32") /* ty=Tensor[(11, 4, 2), uint32] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %415 = cast(meta[relay.Constant][24] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %416 = %401.0;
  %417 = cast(%416, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %418 = reshape(%415, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %419 = reshape(%417, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %420 = @func_1317(%418, %419) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %421 = cast(meta[relay.Constant][24] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
  %422 = reshape(%421, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %423 = @func_1538(%422) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %424 = cast(meta[relay.Constant][25] /* ty=Tensor[(468), int8] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %425 = cast(meta[relay.Constant][25] /* ty=Tensor[(468), int8] */, dtype="int8") /* ty=Tensor[(468), int8] */;
  %426 = reshape(%424, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), int8] */;
  %427 = reshape(%425, newshape=[6, 6, 13]) /* ty=Tensor[(6, 6, 13), int8] */;
  %428 = @func_3553(%426, %427) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(6, 6, 13), uint8]) */;
  %429 = cast(%403, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %430 = asinh(%429) /* ty=Tensor[(16, 5, 3), float64] */;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(16, 5, 3), float64] */;
  %432 = log(%431) /* ty=Tensor[(16, 5, 3), float64] */;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(16, 5, 3), float32] */;
  %434 = erf(%433) /* ty=Tensor[(16, 5, 3), float32] */;
  %435 = cast(%432, dtype="int16") /* ty=Tensor[(16, 5, 3), int16] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="int16") /* ty=Tensor[(16, 5, 3), int16] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %439 = %423.4;
  %440 = cast(%439, dtype="uint8") /* ty=Tensor[(4, 8, 14), uint8] */;
  %441 = reshape(%440, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %442 = @func_2736(%441) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(448), uint8], Tensor[(448), uint8]) */;
  %443 = not_equal(%406, %407) /* ty=Tensor[(16, 5, 3), bool] */;
  %444 = maximum(%413, %414) /* ty=Tensor[(11, 4, 2), uint32] */;
  %445 = %420.3;
  %446 = %428.1;
  %447 = left_shift(%437, %438) /* ty=Tensor[(16, 5, 3), int16] */;
  %448 = %442.1;
  (%var_4068, %416, %var_4076, %443, %444, %445, meta[relay.Constant][24] /* ty=Tensor[(780), float64] */, %439, %446, meta[relay.Constant][25] /* ty=Tensor[(468), int8] */, %447, %448)
}

def @func_5059(%var_5057: Tensor[(16, 6, 8), float64]) -> (Tensor[(16, 6, 8), uint8], Tensor[(12, 14, 10), float32]) {
  @func_5056(%var_5057) /* ty=(Tensor[(16, 6, 8), uint8], Tensor[(12, 14, 10), float32]) */
}

def @func_5181() -> (Tensor[(448), uint8],) {
  %450 = fn () -> (Tensor[(448), uint8],) {
    %449 = @func_4478() /* ty=Tensor[(448), uint8] */;
    (%449,)
  };
  %450() /* ty=(Tensor[(448), uint8],) */
}

def @func_5469(%var_5468: Tensor[(16, 13, 6), float32]) -> (Tensor[(16, 13, 6), float32], Tensor[(3, 9, 4), float64], Tensor[(6, 18), float32]) {
  %457 = fn (%var_5458: Tensor[(16, 13, 6), float32]) -> (Tensor[(16, 13, 6), float32], Tensor[(3, 9, 4), float64], Tensor[(6, 18), float32]) {
    %451 = cast(%var_5458, dtype="float32") /* ty=Tensor[(16, 13, 6), float32] */;
    %452 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 18), float32] */, dtype="float32") /* ty=Tensor[(6, 18), float32] */;
    %453 = reshape(%452, newshape=[3, 9, 4]) /* ty=Tensor[(3, 9, 4), float32] */;
    %454 = @func_3792(%453) /* ty=(Tensor[(3, 9, 4), int32], Tensor[(780), float64], Tensor[(3, 9, 4), float64], Tensor[(3, 9, 4), float32]) */;
    %455 = log10(%451) /* ty=Tensor[(16, 13, 6), float32] */;
    %456 = %454.2;
    (%455, %456, meta[relay.Constant][26] /* ty=Tensor[(6, 18), float32] */)
  };
  %457(%var_5468) /* ty=(Tensor[(16, 13, 6), float32], Tensor[(3, 9, 4), float64], Tensor[(6, 18), float32]) */
}

def @func_3620() -> (Tensor[(780), float64], Tensor[(56, 8), float32]) {
  %464 = fn () -> (Tensor[(780), float64], Tensor[(56, 8), float32]) {
    %458 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
    %459 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
    %460 = %459.0;
    %461 = cast(%460, dtype="float32") /* ty=Tensor[(56, 8), float32] */;
    %462 = %458.2;
    %463 = sigmoid(%461) /* ty=Tensor[(56, 8), float32] */;
    (%462, %463)
  };
  %464() /* ty=(Tensor[(780), float64], Tensor[(56, 8), float32]) */
}

def @func_4369() -> Tensor[(448), uint8] {
  @func_4367() /* ty=Tensor[(448), uint8] */
}

def @func_4601(%var_4600: Tensor[(14, 10, 16), float64]) -> Tensor[(14, 10, 16), float64] {
  %466 = fn (%var_4594: Tensor[(14, 10, 16), float64]) -> Tensor[(14, 10, 16), float64] {
    %465 = cast(%var_4594, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
    acos(%465) /* ty=Tensor[(14, 10, 16), float64] */
  };
  %466(%var_4600) /* ty=Tensor[(14, 10, 16), float64] */
}

def @func_3397() -> (Tensor[(448), uint8], Tensor[(780), float64]) {
  %467 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %468 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %469 = %467.0;
  %470 = %468.1;
  (%469, %470)
}

def @func_1717(%var_1716: Tensor[(448), float32]) -> (Tensor[(448), float64], Tensor[(448), int32], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) {
  %486 = fn (%var_1704: Tensor[(448), float32]) -> (Tensor[(448), float64], Tensor[(448), int32], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) {
    %471 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
    %472 = %471.2;
    %473 = cast(%472, dtype="float64") /* ty=Tensor[(448), float64] */;
    %474 = cast(%472, dtype="float32") /* ty=Tensor[(448), float32] */;
    %475 = cosh(%474) /* ty=Tensor[(448), float32] */;
    %476 = cast(%var_1704, dtype="int32") /* ty=Tensor[(448), int32] */;
    %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(1), int32] */;
    %478 = cast(%475, dtype="int32") /* ty=Tensor[(448), int32] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?), int32] */;
    %480 = cast(meta[relay.Constant][27] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
    %481 = reshape(%480, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %482 = @func_1538(%481) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
    %483 = sinh(%473) /* ty=Tensor[(448), float64] */;
    %484 = bitwise_xor(%478, %479) /* ty=Tensor[(448), int32] */;
    %485 = %482.4;
    (%483, %484, %485, meta[relay.Constant][27] /* ty=Tensor[(780), float64] */)
  };
  %486(%var_1716) /* ty=(Tensor[(448), float64], Tensor[(448), int32], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) */
}

def @main(%var_5557: Tensor[(3, 4, 4), int32], %var_5571: Tensor[(840, 2), float32], %var_5572: Tensor[(28), uint16]) -> (Tensor[(3, 4, 4), int32], Tensor[(56, 8), bool], Tensor[(448, 1), float32], Tensor[(7, 2, 2), float64], Tensor[(840, 2), float32], Tensor[(1680), float32], Tensor[(28), float64]) {
  %487 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 4, 4), int32] */, dtype="int32") /* ty=Tensor[(3, 4, 4), int32] */;
  %488 = shape_of(%var_5557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%var_5557, dtype="int32") /* ty=Tensor[(3, 4, 4), int32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %491 = cast(meta[relay.Constant][29] /* ty=Tensor[(448, 1), float32] */, dtype="float32") /* ty=Tensor[(448, 1), float32] */;
  %492 = reshape(%491, newshape=[56, 8]) /* ty=Tensor[(56, 8), float32] */;
  %493 = @func_3938(%492) /* ty=(Tensor[(56, 8), bool],) */;
  %494 = cast(%var_5571, dtype="float32") /* ty=Tensor[(840, 2), float32] */;
  %495 = cast(%var_5572, dtype="uint16") /* ty=Tensor[(28), uint16] */;
  %496 = reshape(%494, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float32] */;
  %497 = reshape(%495, newshape=[28]) /* ty=Tensor[(28), uint16] */;
  %498 = @func_191(%496, %497) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */;
  %499 = @func_3307() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %500 = cast(%var_5572, dtype="float64") /* ty=Tensor[(28), float64] */;
  %501 = left_shift(%489, %490) /* ty=Tensor[(3, 4, 4), int32] */;
  %502 = %493.0;
  %503 = %498.1;
  %504 = %499.5;
  %505 = log2(%500) /* ty=Tensor[(28), float64] */;
  (%501, %502, meta[relay.Constant][29] /* ty=Tensor[(448, 1), float32] */, %503, %var_5571, %504, %505)
}

def @func_3166() -> (Tensor[(448), uint8],) {
  %506 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %507 = %506.2;
  (%507,)
}

def @func_5366(%var_5362: Tensor[(2925), bool]) -> (Tensor[(448), uint8], Tensor[(13, 15, 15), bool], Tensor[(2925), bool]) {
  %508 = cast(%var_5362, dtype="bool") /* ty=Tensor[(2925), bool] */;
  %509 = cast(%var_5362, dtype="bool") /* ty=Tensor[(2925), bool] */;
  %510 = reshape(%508, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), bool] */;
  %511 = reshape(%509, newshape=[13, 15, 15]) /* ty=Tensor[(13, 15, 15), bool] */;
  %512 = @func_3895(%510, %511) /* ty=(Tensor[(13, 15, 15), bool], Tensor[(7, 2, 2), float64], Tensor[(28, 1), uint16]) */;
  %513 = @func_4991() /* ty=Tensor[(448), uint8] */;
  %514 = %512.0;
  (%513, %514, %var_5362)
}

def @func_4754() -> Tensor[(7, 2, 2), float64] {
  @func_4752() /* ty=Tensor[(7, 2, 2), float64] */
}

def @func_1681(%var_1679: Tensor[(7, 2, 2), float64], %var_1680: Tensor[(130, 6), float64]) -> (Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) {
  @func_1677(%var_1679, %var_1680) /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) */
}

def @func_5145(%var_5112: Tensor[(2240), float64], %var_5118: Tensor[(14, 10, 16), float64]) -> (Tensor[(448), uint8], Tensor[(2240), float64], Tensor[(14, 10, 16), float64], Tensor[(780), float64]) {
  %515 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %516 = cast(%var_5112, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %517 = reshape(%516, newshape=[14, 10, 16]) /* ty=Tensor[(14, 10, 16), float64] */;
  %518 = @func_4599(%517) /* ty=Tensor[(14, 10, 16), float64] */;
  %519 = cast(%var_5118, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %523 = %515.0;
  %524 = multiply(%521, %522) /* ty=Tensor[(14, 10, 16), float64] */;
  %525 = @func_3336() /* ty=Tensor[(780), float64] */;
  (%523, %var_5112, %524, %525)
}

def @func_4242() -> (Tensor[(448), uint8],) {
  @func_4240() /* ty=(Tensor[(448), uint8],) */
}

def @func_4729() -> (Tensor[(7, 2, 2), float64],) {
  @func_4727() /* ty=(Tensor[(7, 2, 2), float64],) */
}

def @func_3639() -> (Tensor[(13, 5, 12), float32], Tensor[(448), uint8]) {
  %529 = fn () -> (Tensor[(13, 5, 12), float32], Tensor[(448), uint8]) {
    %526 = @func_2870() /* ty=(Tensor[(448), uint8],) */;
    %527 = @func_2679() /* ty=Tensor[(13, 5, 12), float32] */;
    %528 = %526.0;
    (%527, %528)
  };
  %529() /* ty=(Tensor[(13, 5, 12), float32], Tensor[(448), uint8]) */
}

def @func_3207() -> (Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) {
  %530 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %531 = %530.4;
  %532 = cast(%531, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %533 = cast(%531, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %534 = reshape(%532, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %535 = reshape(%533, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
  %536 = @func_693(%534, %535) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
  %537 = %536.0;
  (%531, %537)
}

def @func_3327() -> Tensor[(1680), float32] {
  @func_3325() /* ty=Tensor[(1680), float32] */
}

def @func_5188() -> (Tensor[(780), float64],) {
  %540 = fn () -> (Tensor[(780), float64],) {
    %538 = @func_3055() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */;
    %539 = %538.4;
    (%539,)
  };
  %540() /* ty=(Tensor[(780), float64],) */
}

def @func_1764() -> (Tensor[(7, 2, 2), float64],) {
  @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */
}

def @func_2074() -> (Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) {
  %549 = fn () -> (Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) {
    %541 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
    %542 = cast(meta[relay.Constant][30] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
    %543 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %544 = reshape(%542, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %545 = reshape(%543, newshape=[88]) /* ty=Tensor[(88), float32] */;
    %546 = @func_1602(%544, %545) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */;
    %547 = %541.1;
    %548 = %546.6;
    (%547, %548, meta[relay.Constant][30] /* ty=Tensor[(780), float64] */, meta[relay.Constant][31] /* ty=Tensor[(88), float32] */)
  };
  %549() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */
}

def @func_2616(%var_2572: bool, %var_2573: Tensor[(13, 4, 6), bool]) -> (Tensor[(13, 7, 10), bool], Tensor[(5, 156), float64], Tensor[(13, 4, 6), uint8]) {
  %550 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 156), float64] */, dtype="float64") /* ty=Tensor[(5, 156), float64] */;
  %551 = reshape(%550, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %552 = @func_1538(%551) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %553 = cast(%var_2572, dtype="bool") /* ty=bool */;
  %554 = cast(%var_2573, dtype="bool") /* ty=Tensor[(13, 4, 6), bool] */;
  %555 = logical_and(%553, %554) /* ty=Tensor[(13, 4, 6), bool] */;
  %556 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 4, 6), bool] */, dtype="uint8") /* ty=Tensor[(13, 4, 6), uint8] */;
  %557 = shape_of(%555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%555, dtype="uint8") /* ty=Tensor[(13, 4, 6), uint8] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %560 = %552.0;
  %561 = bitwise_and(%558, %559) /* ty=Tensor[(13, 4, 6), uint8] */;
  (%560, meta[relay.Constant][32] /* ty=Tensor[(5, 156), float64] */, %561)
}

def @func_2870() -> (Tensor[(448), uint8],) {
  %562 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %563 = %562.2;
  (%563,)
}

def @func_1762() -> (Tensor[(7, 2, 2), float64],) {
  %564 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %565 = %564.1;
  (%565,)
}

def @func_4453(%var_4451: Tensor[(7, 2, 2), float32]) -> (Tensor[(7, 2, 2), uint16],) {
  @func_4450(%var_4451) /* ty=(Tensor[(7, 2, 2), uint16],) */
}

def @func_2739(%var_2737: Tensor[(448), uint8]) -> (Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(448), uint8], Tensor[(448), uint8]) {
  @func_2736(%var_2737) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(448), uint8], Tensor[(448), uint8]) */
}

def @func_5149(%var_5147: Tensor[(2240), float64], %var_5148: Tensor[(14, 10, 16), float64]) -> (Tensor[(448), uint8], Tensor[(2240), float64], Tensor[(14, 10, 16), float64], Tensor[(780), float64]) {
  @func_5145(%var_5147, %var_5148) /* ty=(Tensor[(448), uint8], Tensor[(2240), float64], Tensor[(14, 10, 16), float64], Tensor[(780), float64]) */
}

def @func_3519(%var_3512: Tensor[(2, 9, 3), float32]) -> Tensor[(2, 9, 3), float32] {
  %566 = cast(%var_3512, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  sqrt(%566) /* ty=Tensor[(2, 9, 3), float32] */
}

def @func_4450(%var_4443: Tensor[(7, 2, 2), float32]) -> (Tensor[(7, 2, 2), uint16],) {
  %567 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %568 = %567.0;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %570 = sinh(%569) /* ty=Tensor[(7, 2, 2), float32] */;
  %571 = cast(%var_4443, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%570, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %575 = multiply(%573, %574) /* ty=Tensor[(7, 2, 2), uint16] */;
  (%575,)
}

def @func_4413() -> Tensor[(880), float64] {
  %576 = @func_3055() /* ty=(Tensor[(88), float32], Tensor[(56, 8), uint8], Tensor[(5, 156), float64], Tensor[(880), float64], Tensor[(780), float64]) */;
  %576.3
}

def @func_2013(%var_2007: Tensor[(780), float64]) -> (Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) {
  %577 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %578 = cast(%var_2007, dtype="float64") /* ty=Tensor[(780), float64] */;
  %579 = reshape(%578, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %580 = @func_1538(%579) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
  %581 = %577.2;
  %582 = %580.4;
  (%581, %582, %var_2007)
}

def @func_2806(%var_2804: Tensor[(6, 1, 4), bool], %var_2805: Tensor[(6, 5, 4), bool]) -> (Tensor[(6, 5, 4), bool], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(28), float64]) {
  %598 = fn (%var_2782: Tensor[(6, 1, 4), bool], %var_2783: Tensor[(6, 5, 4), bool]) -> (Tensor[(6, 5, 4), bool], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(28), float64]) {
    %583 = cast(%var_2782, dtype="bool") /* ty=Tensor[(6, 1, 4), bool] */;
    %584 = cast(%var_2783, dtype="bool") /* ty=Tensor[(6, 5, 4), bool] */;
    %585 = cast(meta[relay.Constant][34] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
    %586 = cast(meta[relay.Constant][35] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %587 = reshape(%585, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %588 = reshape(%586, newshape=[448]) /* ty=Tensor[(448), uint8] */;
    %589 = @func_2158(%587, %588) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */;
    %590 = cast(meta[relay.Constant][36] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
    %591 = cast(meta[relay.Constant][34] /* ty=Tensor[(780), float64] */, dtype="float64") /* ty=Tensor[(780), float64] */;
    %592 = reshape(%590, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
    %593 = reshape(%591, newshape=[130, 6]) /* ty=Tensor[(130, 6), float64] */;
    %594 = @func_1677(%592, %593) /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) */;
    %595 = logical_or(%583, %584) /* ty=Tensor[(6, 5, 4), bool] */;
    %596 = %589.9;
    %597 = %594.3;
    (%595, %596, meta[relay.Constant][34] /* ty=Tensor[(780), float64] */, meta[relay.Constant][35] /* ty=Tensor[(448), uint8] */, %597, meta[relay.Constant][36] /* ty=Tensor[(28), float64] */)
  };
  %598(%var_2804, %var_2805) /* ty=(Tensor[(6, 5, 4), bool], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(28), float64]) */
}

def @func_5056(%var_5029: Tensor[(16, 6, 8), float64]) -> (Tensor[(16, 6, 8), uint8], Tensor[(12, 14, 10), float32]) {
  %599 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %600 = shape_of(%var_5029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %601 = cast(%var_5029, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %603 = divide(%601, %602) /* ty=Tensor[(16, 6, 8), float64] */;
  %604 = cast(%var_5029, dtype="uint8") /* ty=Tensor[(16, 6, 8), uint8] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="uint8") /* ty=Tensor[(16, 6, 8), uint8] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %608 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %609 = subtract(%606, %607) /* ty=Tensor[(16, 6, 8), uint8] */;
  %610 = %608.1;
  (%609, %610)
}

def @func_5369(%var_5367: Tensor[(2925), bool]) -> (Tensor[(448), uint8], Tensor[(13, 15, 15), bool], Tensor[(2925), bool]) {
  @func_5366(%var_5367) /* ty=(Tensor[(448), uint8], Tensor[(13, 15, 15), bool], Tensor[(2925), bool]) */
}

def @func_3338() -> Tensor[(780), float64] {
  @func_3336() /* ty=Tensor[(780), float64] */
}

def @func_1620() -> (Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) {
  %619 = fn () -> (Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) {
    %611 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 8, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 10), float64] */;
    %612 = cast(meta[relay.Constant][39] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %613 = cast(meta[relay.Constant][39] /* ty=Tensor[(448), uint8] */, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %614 = reshape(%612, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
    %615 = reshape(%613, newshape=[4, 8, 14]) /* ty=Tensor[(4, 8, 14), uint8] */;
    %616 = @func_693(%614, %615) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */;
    %617 = erf(%611) /* ty=Tensor[(11, 8, 10), float64] */;
    %618 = %616.0;
    (%617, %618, meta[relay.Constant][39] /* ty=Tensor[(448), uint8] */)
  };
  %619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */
}

def @func_1915(%var_1840: Tensor[(780), float64], %var_1841: Tensor[(22, 4), float32], %var_1878: Tensor[(11, 8, 10), float64]) -> (Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) {
  %620 = cast(%var_1840, dtype="float64") /* ty=Tensor[(780), float64] */;
  %621 = cast(%var_1841, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %622 = reshape(%620, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %623 = reshape(%621, newshape=[88]) /* ty=Tensor[(88), float32] */;
  %624 = @func_1602(%622, %623) /* ty=(Tensor[(13, 16, 8), float64], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32], Tensor[(780), float64], Tensor[(13, 16, 8), float64], Tensor[(13, 5, 12), float32], Tensor[(11, 4, 2), float64], Tensor[(88), float32]) */;
  %625 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %626 = %625.0;
  %627 = cast(%var_1878, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %628 = shape_of(%626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%626, dtype="bool") /* ty=Tensor[(11, 8, 10), bool] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %631 = cast(%var_1841, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
  %632 = reshape(%631, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
  %633 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %636 = cast(%var_1840, dtype="float64") /* ty=Tensor[(780), float64] */;
  %637 = cast(meta[relay.Constant][40] /* ty=Tensor[(56, 8), uint8] */, dtype="uint8") /* ty=Tensor[(56, 8), uint8] */;
  %638 = reshape(%636, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %639 = reshape(%637, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %640 = @func_1317(%638, %639) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %641 = %640.7;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(7, 2, 2), float32] */;
  %643 = %624.1;
  %644 = cast(%643, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
  %645 = reshape(%644, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
  %646 = not_equal(%629, %630) /* ty=Tensor[(11, 8, 10), bool] */;
  %647 = @func_1350(%632) /* ty=Tensor[(11, 4, 2), float64] */;
  %648 = erf(%635) /* ty=Tensor[(7, 2, 2), float32] */;
  %649 = cosh(%642) /* ty=Tensor[(7, 2, 2), float32] */;
  %650 = @func_129(%645) /* ty=Tensor[(7, 2, 2), float64] */;
  (%643, %var_1840, %var_1841, %646, %647, %648, meta[relay.Constant][40] /* ty=Tensor[(56, 8), uint8] */, %649, %650)
}

def @func_696(%var_694: Tensor[(4, 8, 14), uint8], %var_695: Tensor[(4, 8, 14), uint8]) -> (Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) {
  %674 = fn (%var_641: Tensor[(4, 8, 14), uint8], %var_642: Tensor[(4, 8, 14), uint8]) -> (Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) {
    %651 = cast(meta[relay.Constant][41] /* ty=Tensor[(28), uint16] */, dtype="uint16") /* ty=Tensor[(28), uint16] */;
    %652 = reshape(%651, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), uint16] */;
    %653 = cast(%var_642, dtype="bool") /* ty=Tensor[(4, 8, 14), bool] */;
    %654 = shape_of(%var_641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %655 = cast(%var_641, dtype="bool") /* ty=Tensor[(4, 8, 14), bool] */;
    %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %657 = greater(%655, %656) /* ty=Tensor[(4, 8, 14), bool] */;
    %658 = cast(%var_641, dtype="int64") /* ty=Tensor[(4, 8, 14), int64] */;
    %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%657, dtype="int64") /* ty=Tensor[(4, 8, 14), int64] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %662 = bitwise_and(%660, %661) /* ty=Tensor[(4, 8, 14), int64] */;
    %663 = cast(%662, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
    %664 = shape_of(%var_641, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%var_641, dtype="float32") /* ty=Tensor[(4, 8, 14), float32] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %667 = floor_mod(%665, %666) /* ty=Tensor[(4, 8, 14), float32] */;
    %668 = cast(%662, dtype="uint32") /* ty=Tensor[(4, 8, 14), uint32] */;
    %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(%667, dtype="uint32") /* ty=Tensor[(4, 8, 14), uint32] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %672 = @func_129(%652) /* ty=Tensor[(7, 2, 2), float64] */;
    %673 = multiply(%670, %671) /* ty=Tensor[(4, 8, 14), uint32] */;
    (%672, meta[relay.Constant][41] /* ty=Tensor[(28), uint16] */, %673)
  };
  %674(%var_694, %var_695) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(4, 8, 14), uint32]) */
}

def @func_4011(%var_4008: Tensor[(9, 13, 11), float32], %var_4009: Tensor[(9, 13, 11), float32], %var_4010: Tensor[(780), float64]) -> (Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float64], Tensor[(780), uint16], Tensor[(780), float64], Tensor[(9, 13, 11), float64]) {
  %701 = fn (%var_3963: Tensor[(9, 13, 11), float32], %var_3966: Tensor[(9, 13, 11), float32], %var_3995: Tensor[(780), float64]) -> (Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float64], Tensor[(780), uint16], Tensor[(780), float64], Tensor[(9, 13, 11), float64]) {
    %675 = cast(%var_3966, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
    %676 = shape_of(%var_3963, dtype="int32") /* ty=Tensor[(3), int32] */;
    %677 = cast(%var_3963, dtype="bool") /* ty=Tensor[(9, 13, 11), bool] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %679 = less_equal(%677, %678) /* ty=Tensor[(9, 13, 11), bool] */;
    %680 = cast(%679, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
    %681 = cast(%var_3963, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %682 = acos(%681) /* ty=Tensor[(9, 13, 11), float32] */;
    %683 = cast(%679, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%682, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %687 = cast(%var_3995, dtype="float64") /* ty=Tensor[(780), float64] */;
    %688 = reshape(%687, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %689 = cast(%var_3966, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %690 = sqrt(%689) /* ty=Tensor[(9, 13, 11), float32] */;
    %691 = cast(%690, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %692 = shape_of(%var_3966, dtype="int32") /* ty=Tensor[(3), int32] */;
    %693 = cast(%var_3966, dtype="float32") /* ty=Tensor[(9, 13, 11), float32] */;
    %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %695 = mod(%693, %694) /* ty=Tensor[(9, 13, 11), float32] */;
    %696 = cast(%695, dtype="float64") /* ty=Tensor[(9, 13, 11), float64] */;
    %697 = erf(%680) /* ty=Tensor[(9, 13, 11), float64] */;
    %698 = floor_divide(%685, %686) /* ty=Tensor[(9, 13, 11), float64] */;
    %699 = @func_3435(%688) /* ty=Tensor[(780), uint16] */;
    %700 = log10(%696) /* ty=Tensor[(9, 13, 11), float64] */;
    (%697, %698, %699, %var_3995, %700)
  };
  %701(%var_4008, %var_4009, %var_4010) /* ty=(Tensor[(9, 13, 11), float64], Tensor[(9, 13, 11), float64], Tensor[(780), uint16], Tensor[(780), float64], Tensor[(9, 13, 11), float64]) */
}

def @func_4478() -> Tensor[(448), uint8] {
  %702 = @func_2870() /* ty=(Tensor[(448), uint8],) */;
  %702.0
}

def @func_2872() -> (Tensor[(448), uint8],) {
  @func_2870() /* ty=(Tensor[(448), uint8],) */
}

def @func_2680() -> Tensor[(13, 5, 12), float32] {
  %704 = fn () -> Tensor[(13, 5, 12), float32] {
    %703 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
    %703.1
  };
  %704() /* ty=Tensor[(13, 5, 12), float32] */
}

def @func_4685(%var_4680: Tensor[(10, 5, 15), int16], %var_4681: Tensor[(10, 5, 15), int16], %var_4682: Tensor[(10, 5, 15), int16], %var_4683: Tensor[(880), float64], %var_4684: Tensor[(54), float32]) -> (Tensor[(10, 5, 15), int32], Tensor[(10, 5, 15), int16], Tensor[(10, 5, 15), float32], Tensor[(780), float64], Tensor[(56, 8), uint8], Tensor[(88), float32], Tensor[(880), float64], Tensor[(2, 9, 3), float32], Tensor[(54), float32]) {
  @func_4678(%var_4680, %var_4681, %var_4682, %var_4683, %var_4684) /* ty=(Tensor[(10, 5, 15), int32], Tensor[(10, 5, 15), int16], Tensor[(10, 5, 15), float32], Tensor[(780), float64], Tensor[(56, 8), uint8], Tensor[(88), float32], Tensor[(880), float64], Tensor[(2, 9, 3), float32], Tensor[(54), float32]) */
}

def @func_3209() -> (Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) {
  @func_3207() /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */
}

def @func_3336() -> Tensor[(780), float64] {
  %705 = @func_3306() /* ty=(Tensor[(56, 8), float64], Tensor[(88), float32], Tensor[(780), float64], Tensor[(156), float32], Tensor[(28), float64], Tensor[(1680), float32], Tensor[(56, 8), float64]) */;
  %705.2
}

def @func_2016(%var_2014: Tensor[(780), float64]) -> (Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) {
  @func_2013(%var_2014) /* ty=(Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(780), float64]) */
}

def @func_1677(%var_1660: Tensor[(7, 2, 2), float64], %var_1674: Tensor[(130, 6), float64]) -> (Tensor[(448), uint8], Tensor[(7, 2, 2), uint32], Tensor[(8, 4, 5), float32], Tensor[(4, 8, 14), uint32], Tensor[(130, 6), float64]) {
  %706 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %707 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
  %708 = %707.1;
  %709 = cast(%var_1660, dtype="uint32") /* ty=Tensor[(7, 2, 2), uint32] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="uint32") /* ty=Tensor[(7, 2, 2), uint32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %713 = %706.2;
  %714 = cast(%713, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %715 = reshape(%714, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %716 = @func_998(%715) /* ty=(Tensor[(4, 8, 14), uint32], Tensor[(448), uint8], Tensor[(8, 4, 5), float32]) */;
  %717 = cast(%var_1674, dtype="float64") /* ty=Tensor[(130, 6), float64] */;
  %718 = cast(%713, dtype="uint8") /* ty=Tensor[(448), uint8] */;
  %719 = reshape(%717, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
  %720 = reshape(%718, newshape=[448]) /* ty=Tensor[(448), uint8] */;
  %721 = @func_1317(%719, %720) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
  %722 = subtract(%711, %712) /* ty=Tensor[(7, 2, 2), uint32] */;
  %723 = %716.2;
  %724 = %721.5;
  (%713, %722, %723, %724, %var_1674)
}

def @func_3437(%var_3436: Tensor[(780), float64]) -> Tensor[(780), uint16] {
  %731 = fn (%var_3428: Tensor[(780), float64]) -> Tensor[(780), uint16] {
    %725 = @func_2250() /* ty=(Tensor[(780), float64],) */;
    %726 = %725.0;
    %727 = cast(%var_3428, dtype="uint16") /* ty=Tensor[(780), uint16] */;
    %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(1), int32] */;
    %729 = cast(%726, dtype="uint16") /* ty=Tensor[(780), uint16] */;
    %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?), uint16] */;
    minimum(%729, %730) /* ty=Tensor[(780), uint16] */
  };
  %731(%var_3436) /* ty=Tensor[(780), uint16] */
}

def @func_4678(%var_4617: Tensor[(10, 5, 15), int16], %var_4618: Tensor[(10, 5, 15), int16], %var_4640: Tensor[(10, 5, 15), int16], %var_4665: Tensor[(880), float64], %var_4669: Tensor[(54), float32]) -> (Tensor[(10, 5, 15), int32], Tensor[(10, 5, 15), int16], Tensor[(10, 5, 15), float32], Tensor[(780), float64], Tensor[(56, 8), uint8], Tensor[(88), float32], Tensor[(880), float64], Tensor[(2, 9, 3), float32], Tensor[(54), float32]) {
  %732 = cast(%var_4640, dtype="int32") /* ty=Tensor[(10, 5, 15), int32] */;
  %733 = shape_of(%var_4618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%var_4618, dtype="int32") /* ty=Tensor[(10, 5, 15), int32] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %736 = cast(%var_4618, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %737 = shape_of(%var_4617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%var_4617, dtype="bool") /* ty=Tensor[(10, 5, 15), bool] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %740 = greater_equal(%738, %739) /* ty=Tensor[(10, 5, 15), bool] */;
  %741 = cast(%var_4618, dtype="int16") /* ty=Tensor[(10, 5, 15), int16] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="int16") /* ty=Tensor[(10, 5, 15), int16] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %745 = cast(%740, dtype="float64") /* ty=Tensor[(10, 5, 15), float64] */;
  %746 = acos(%745) /* ty=Tensor[(10, 5, 15), float64] */;
  %747 = cast(%746, dtype="float32") /* ty=Tensor[(10, 5, 15), float32] */;
  %748 = @func_2561() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(12, 14, 10), float32], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %749 = %748.2;
  %750 = cast(%749, dtype="float64") /* ty=Tensor[(780), float64] */;
  %751 = cast(meta[relay.Constant][42] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %752 = cast(%var_4665, dtype="float64") /* ty=Tensor[(880), float64] */;
  %753 = reshape(%750, newshape=[780]) /* ty=Tensor[(780), float64] */;
  %754 = reshape(%751, newshape=[22, 4]) /* ty=Tensor[(22, 4), float32] */;
  %755 = reshape(%752, newshape=[11, 8, 10]) /* ty=Tensor[(11, 8, 10), float64] */;
  %756 = @func_1915(%753, %754, %755) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(780), float64], Tensor[(22, 4), float32], Tensor[(11, 8, 10), bool], Tensor[(11, 4, 2), float64], Tensor[(7, 2, 2), float32], Tensor[(56, 8), uint8], Tensor[(7, 2, 2), float32], Tensor[(7, 2, 2), float64]) */;
  %757 = cast(%var_4669, dtype="float32") /* ty=Tensor[(54), float32] */;
  %758 = reshape(%757, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float32] */;
  %759 = bitwise_and(%734, %735) /* ty=Tensor[(10, 5, 15), int32] */;
  %760 = left_shift(%743, %744) /* ty=Tensor[(10, 5, 15), int16] */;
  %761 = log2(%747) /* ty=Tensor[(10, 5, 15), float32] */;
  %762 = %756.6;
  %763 = @func_3519(%758) /* ty=Tensor[(2, 9, 3), float32] */;
  (%759, %760, %761, %749, %762, meta[relay.Constant][42] /* ty=Tensor[(88), float32] */, %var_4665, %763, %var_4669)
}

def @func_4240() -> (Tensor[(448), uint8],) {
  %764 = @func_2322() /* ty=(Tensor[(448), uint8], Tensor[(780), float64]) */;
  %765 = %764.0;
  (%765,)
}

def @func_4752() -> Tensor[(7, 2, 2), float64] {
  %766 = @func_3207() /* ty=(Tensor[(448), uint8], Tensor[(7, 2, 2), float64]) */;
  %766.1
}

def @func_2765(%var_2764: uint32) -> Tensor[(7, 14, 15), float64] {
  %776 = fn (%var_2748: uint32) -> Tensor[(7, 14, 15), float64] {
    %767 = cast(%var_2748, dtype="uint32") /* ty=uint32 */;
    %768 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 14, 15), uint32] */, dtype="uint32") /* ty=Tensor[(7, 14, 15), uint32] */;
    %769 = add(%767, %768) /* ty=Tensor[(7, 14, 15), uint32] */;
    %770 = cast(meta[relay.Constant][43] /* ty=Tensor[(7, 14, 15), uint32] */, dtype="int8") /* ty=Tensor[(7, 14, 15), int8] */;
    %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
    %772 = cast(%769, dtype="int8") /* ty=Tensor[(7, 14, 15), int8] */;
    %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %774 = logical_xor(%772, %773) /* ty=Tensor[(7, 14, 15), int8] */;
    %775 = cast(%774, dtype="float64") /* ty=Tensor[(7, 14, 15), float64] */;
    sin(%775) /* ty=Tensor[(7, 14, 15), float64] */
  };
  %776(%var_2764) /* ty=Tensor[(7, 14, 15), float64] */
}

def @func_4415() -> Tensor[(880), float64] {
  @func_4413() /* ty=Tensor[(880), float64] */
}

def @func_2161(%var_2159: Tensor[(780), float64], %var_2160: Tensor[(448), uint8]) -> (Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) {
  %809 = fn (%var_2082: Tensor[(780), float64], %var_2083: Tensor[(448), uint8]) -> (Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) {
    %777 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
    %778 = cast(meta[relay.Constant][44] /* ty=Tensor[(22, 4), float32] */, dtype="float32") /* ty=Tensor[(22, 4), float32] */;
    %779 = reshape(%778, newshape=[11, 4, 2]) /* ty=Tensor[(11, 4, 2), float32] */;
    %780 = cast(%var_2082, dtype="float64") /* ty=Tensor[(780), float64] */;
    %781 = cast(%var_2083, dtype="uint8") /* ty=Tensor[(448), uint8] */;
    %782 = reshape(%780, newshape=[13, 5, 12]) /* ty=Tensor[(13, 5, 12), float64] */;
    %783 = reshape(%781, newshape=[448]) /* ty=Tensor[(448), uint8] */;
    %784 = @func_1317(%782, %783) /* ty=(Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16], Tensor[(28), uint16], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32], Tensor[(13, 5, 12), float32], Tensor[(7, 2, 2), float64], Tensor[(4, 8, 14), uint32]) */;
    %785 = @func_1762() /* ty=(Tensor[(7, 2, 2), float64],) */;
    %786 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
    %787 = cast(%var_2082, dtype="float64") /* ty=Tensor[(780), float64] */;
    %788 = reshape(%787, newshape=[780]) /* ty=Tensor[(780), float64] */;
    %789 = @func_1538(%788) /* ty=(Tensor[(13, 7, 10), bool], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(4, 8, 14), uint32]) */;
    %790 = cast(meta[relay.Constant][45] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %791 = %785.0;
    %792 = cast(%791, dtype="uint16") /* ty=Tensor[(7, 2, 2), uint16] */;
    %793 = reshape(%790, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float32] */;
    %794 = reshape(%792, newshape=[28]) /* ty=Tensor[(28), uint16] */;
    %795 = @func_188(%793, %794) /* ty=(Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64], Tensor[(28), uint16]) */;
    %796 = %795.0;
    %797 = cast(meta[relay.Constant][45] /* ty=Tensor[(1680), float32] */, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(3), int32] */;
    %799 = cast(%796, dtype="float32") /* ty=Tensor[(12, 14, 10), float32] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %801 = @func_1619() /* ty=(Tensor[(11, 8, 10), float64], Tensor[(7, 2, 2), float64], Tensor[(448), uint8]) */;
    %802 = %777.1;
    %803 = @func_1350(%779) /* ty=Tensor[(11, 4, 2), float64] */;
    %804 = %784.4;
    %805 = %786.0;
    %806 = %789.3;
    %807 = multiply(%799, %800) /* ty=Tensor[(12, 14, 10), float32] */;
    %808 = %801.1;
    (%802, %803, meta[relay.Constant][44] /* ty=Tensor[(22, 4), float32] */, %804, %var_2082, %var_2083, %791, %805, %806, %807, %808)
  };
  %809(%var_2159, %var_2160) /* ty=(Tensor[(7, 2, 2), float64], Tensor[(11, 4, 2), float64], Tensor[(22, 4), float32], Tensor[(448), uint8], Tensor[(780), float64], Tensor[(448), uint8], Tensor[(7, 2, 2), float64], Tensor[(11, 8, 10), float64], Tensor[(448), uint8], Tensor[(12, 14, 10), float32], Tensor[(7, 2, 2), float64]) */
}

def @func_2191(%var_2173: Tensor[(2, 11, 5), int64], %var_2174: Tensor[(2, 11, 5), int64]) -> (Tensor[(2, 11, 5), int64], Tensor[(88), float32]) {
  %810 = cast(%var_2174, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %811 = shape_of(%var_2173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_2173, dtype="int64") /* ty=Tensor[(2, 11, 5), int64] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %814 = @func_2073() /* ty=(Tensor[(7, 2, 2), float64], Tensor[(13, 5, 12), float32], Tensor[(780), float64], Tensor[(88), float32]) */;
  %815 = bitwise_or(%812, %813) /* ty=Tensor[(2, 11, 5), int64] */;
  %816 = %814.3;
  (%815, %816)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen102/build/output.py", line 1705, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:49:50] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

