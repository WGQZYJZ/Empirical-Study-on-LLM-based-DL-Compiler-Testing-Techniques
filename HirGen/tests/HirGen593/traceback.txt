==========mod==========
#[version = "0.0.5"]
def @func_3719() -> (Tensor[(3, 10, 13), bool],) {
  %0 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  (%0,)
}

def @func_5122(%var_5102: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), bool], Tensor[(3, 10, 13), bool]) {
  %1 = @func_3156() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) */;
  %2 = %1.3;
  %3 = cast(%var_5102, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = @func_3759() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %8 = equal(%5, %6) /* ty=Tensor[(13, 2, 13), bool] */;
  %9 = %7.0;
  (%8, %9)
}

def @func_6765(%var_6748: Tensor[(1820), float32]) -> (Tensor[(756), uint32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) {
  %10 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %11 = cast(%var_6748, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %12 = reshape(%11, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %13 = @func_3274(%12) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %14 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %15 = %10.4;
  %16 = %13.2;
  %17 = %14.3;
  (%15, %16, %var_6748, %17)
}

def @func_3911(%var_3909: Tensor[(1820), float32]) -> (Tensor[(30), float64], Tensor[(11, 5, 6), bool], Tensor[(7, 28), float32], Tensor[(330, 1), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  %18 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(330, 1), float64] */, dtype="float64") /* ty=Tensor[(330, 1), float64] */;
  %20 = reshape(%19, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %21 = @func_146(%20) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %22 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(330, 1), float64] */, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
  %24 = erf(%23) /* ty=Tensor[(330, 1), float32] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
  %26 = cast(%var_3909, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %27 = reshape(%26, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %28 = @func_3274(%27) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %29 = %18.2;
  %30 = %21.0;
  %31 = %22.3;
  %32 = log10(%25) /* ty=Tensor[(330, 1), float32] */;
  %33 = %28.2;
  (%29, %30, %31, %32, %33, %var_3909)
}

def @func_4282(%var_4238: Tensor[(14, 7, 16), float64], %var_4250: Tensor[(14, 7, 16), float32], %var_4267: Tensor[(14, 7, 16), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) {
  %34 = cast(%var_4238, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
  %35 = log2(%34) /* ty=Tensor[(14, 7, 16), float64] */;
  %36 = cast(%var_4267, dtype="bool") /* ty=Tensor[(14, 7, 16), bool] */;
  %37 = shape_of(%35, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%35, dtype="bool") /* ty=Tensor[(14, 7, 16), bool] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %40 = cast(%35, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
  %41 = exp(%40) /* ty=Tensor[(14, 7, 16), float32] */;
  %42 = cast(%var_4250, dtype="int64") /* ty=Tensor[(14, 7, 16), int64] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="int64") /* ty=Tensor[(14, 7, 16), int64] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %46 = subtract(%44, %45) /* ty=Tensor[(14, 7, 16), int64] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
  %48 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_4250, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %51 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %52 = greater(%38, %39) /* ty=Tensor[(14, 7, 16), bool] */;
  %53 = mod(%49, %50) /* ty=Tensor[(14, 7, 16), float32] */;
  (%51, %52, %53)
}

def @func_5533(%var_5436: Tensor[(13, 9, 8), int32], %var_5446: Tensor[(32), float64]) -> (Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32], Tensor[(13, 2, 12), float32], Tensor[(13, 9, 8), float32], Tensor[(13, 9, 8), float32], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) {
  %54 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %55 = cast(meta[relay.Constant][2] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %57 = cast(%var_5446, dtype="float64") /* ty=Tensor[(32), float64] */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %59 = reshape(%54, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %60 = reshape(%55, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
  %61 = reshape(%56, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %62 = reshape(%57, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
  %63 = reshape(%58, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %64 = @func_2428(%59, %60, %61, %62, %63) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
  %65 = cast(meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %66 = reshape(%65, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %67 = @func_708(%66) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(13, 9, 8), int32] */;
  %69 = shape_of(%var_5436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%var_5436, dtype="int32") /* ty=Tensor[(13, 9, 8), int32] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %72 = minimum(%70, %71) /* ty=Tensor[(13, 9, 8), int32] */;
  %73 = cast(%var_5436, dtype="float32") /* ty=Tensor[(13, 9, 8), float32] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="float32") /* ty=Tensor[(13, 9, 8), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 9, 8), int32] */, dtype="float32") /* ty=Tensor[(13, 9, 8), float32] */;
  %78 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %79 = cast(meta[relay.Constant][6] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %80 = reshape(%79, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %81 = @func_383(%80) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %82 = %64.5;
  %83 = %67.1;
  %84 = floor_mod(%75, %76) /* ty=Tensor[(13, 9, 8), float32] */;
  %85 = asinh(%77) /* ty=Tensor[(13, 9, 8), float32] */;
  %86 = %78.0;
  %87 = %81.0;
  (%82, meta[relay.Constant][1] /* ty=Tensor[(312), bool] */, meta[relay.Constant][2] /* ty=Tensor[(375), float32] */, meta[relay.Constant][3] /* ty=Tensor[(196), float32] */, %var_5446, meta[relay.Constant][4] /* ty=Tensor[(756), uint32] */, %83, %84, %85, %86, %87, meta[relay.Constant][6] /* ty=Tensor[(30), float64] */)
}

def @func_6849() -> (Tensor[(3, 10, 13), bool],) {
  %88 = @func_6079() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %89 = %88.1;
  (%89,)
}

def @func_7246() -> Tensor[(3, 10, 13), bool] {
  @func_7077() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_7395() -> (Tensor[(3, 10, 13), bool],) {
  %90 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %91 = %90.0;
  (%91,)
}

def @func_5871() -> (Tensor[(3, 10, 13), bool],) {
  %92 = @func_4409() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %93 = %92.0;
  (%93,)
}

def @func_6685(%var_6668: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(640), float32], Tensor[(30), float64]) {
  %94 = @func_4606() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %95 = cast(%var_6668, dtype="float32") /* ty=Tensor[(640), float32] */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %97 = reshape(%95, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %98 = reshape(%96, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %99 = @func_3801(%97, %98) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30), float64]) */;
  %100 = %94.0;
  %101 = %99.3;
  (%100, %101, %var_6668, meta[relay.Constant][7] /* ty=Tensor[(30), float64] */)
}

def @func_7365(%var_7351: Tensor[(338), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) {
  %102 = cast(%var_7351, dtype="float64") /* ty=Tensor[(338), float64] */;
  %103 = reshape(%102, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
  %104 = @func_2779(%103) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */;
  %105 = @func_4999() /* ty=Tensor[(3, 10, 13), bool] */;
  %106 = %104.1;
  (%105, %106, %var_7351)
}

def @func_3968(%var_3927: Tensor[(8, 3, 7), float32]) -> (Tensor[(1820), float32], Tensor[(312), bool], Tensor[(7, 28), float32], Tensor[(25, 15), float32], Tensor[(8, 3, 7), float64]) {
  %107 = cast(meta[relay.Constant][8] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %108 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %109 = cast(meta[relay.Constant][10] /* ty=Tensor[(25, 15), float32] */, dtype="float32") /* ty=Tensor[(25, 15), float32] */;
  %110 = reshape(%107, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %111 = reshape(%108, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %112 = reshape(%109, newshape=[125, 3]) /* ty=Tensor[(125, 3), float32] */;
  %113 = @func_1897(%110, %111, %112) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %114 = cast(%var_3927, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
  %115 = acosh(%114) /* ty=Tensor[(8, 3, 7), float32] */;
  %116 = cast(%var_3927, dtype="float64") /* ty=Tensor[(8, 3, 7), float64] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="float64") /* ty=Tensor[(8, 3, 7), float64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %120 = %113.6;
  %121 = divide(%118, %119) /* ty=Tensor[(8, 3, 7), float64] */;
  (%120, meta[relay.Constant][8] /* ty=Tensor[(312), bool] */, meta[relay.Constant][9] /* ty=Tensor[(7, 28), float32] */, meta[relay.Constant][10] /* ty=Tensor[(25, 15), float32] */, %121)
}

def @func_2279() -> Tensor[(3, 10, 13), bool] {
  %122 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %122.0
}

def @func_3601(%var_3596: Tensor[(3, 10, 13), bool]) -> (Tensor[(3, 10, 13), int64],) {
  %123 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %124 = cast(%var_3596, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %128 = right_shift(%126, %127) /* ty=Tensor[(3, 10, 13), int64] */;
  (%128,)
}

def @func_4149() -> Tensor[(3, 10, 13), bool] {
  @func_1495() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_3274(%var_3268: Tensor[(1820), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  %129 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %130 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %131 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %132 = reshape(%130, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %133 = reshape(%131, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %134 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %135 = %129.5;
  %136 = @func_336(%132, %133) /* ty=Tensor[(13, 10, 14), float32] */;
  (%134, %135, %136, %var_3268)
}

def @func_456(%var_431: Tensor[(9, 6, 14), uint32], %var_432: Tensor[(9, 6, 14), uint32]) -> (Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) {
  %137 = cast(%var_432, dtype="bool") /* ty=Tensor[(9, 6, 14), bool] */;
  %138 = shape_of(%var_431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_431, dtype="bool") /* ty=Tensor[(9, 6, 14), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = cast(meta[relay.Constant][11] /* ty=Tensor[(1820, 1), float32] */, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(1820, 1), float32] */, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %143 = reshape(%141, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %144 = reshape(%142, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %145 = equal(%139, %140) /* ty=Tensor[(9, 6, 14), bool] */;
  %146 = @func_336(%143, %144) /* ty=Tensor[(13, 10, 14), float32] */;
  (%145, %146, meta[relay.Constant][11] /* ty=Tensor[(1820, 1), float32] */)
}

def @func_1468() -> (Tensor[(3, 10, 13), bool],) {
  %147 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  (%147,)
}

def @func_4370() -> Tensor[(3, 10, 13), bool] {
  @func_1495() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_6079() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %148 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %149 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %150 = %148.0;
  %151 = %149.0;
  (%150, %151)
}

def @func_2730(%var_2640: Tensor[(3, 10, 13), bool], %var_2692: Tensor[(3, 10, 13), float32]) -> (Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) {
  %152 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  %153 = cast(%var_2640, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %157 = cast(meta[relay.Constant][12] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %158 = reshape(%157, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %159 = @func_708(%158) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %160 = cast(meta[relay.Constant][13] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %161 = cast(meta[relay.Constant][13] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %162 = reshape(%160, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
  %163 = reshape(%161, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
  %164 = @func_456(%162, %163) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */;
  %165 = %164.2;
  %166 = cast(%165, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %167 = cast(meta[relay.Constant][12] /* ty=Tensor[(312), bool] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %168 = cast(%152, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %169 = rsqrt(%168) /* ty=Tensor[(3, 10, 13), float32] */;
  %170 = cast(%var_2692, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %174 = cast(meta[relay.Constant][14] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %175 = reshape(%174, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %176 = @func_146(%175) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %177 = cast(%165, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %178 = cast(%165, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %179 = reshape(%177, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %180 = reshape(%178, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %181 = add(%155, %156) /* ty=Tensor[(3, 10, 13), float32] */;
  %182 = %159.1;
  %183 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %184 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %185 = subtract(%166, %167) /* ty=Tensor[(1820, 312), float32] */;
  %186 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %187 = divide(%172, %173) /* ty=Tensor[(3, 10, 13), float32] */;
  %188 = %176.0;
  %189 = @func_336(%179, %180) /* ty=Tensor[(13, 10, 14), float32] */;
  (%181, %182, %183, %184, meta[relay.Constant][13] /* ty=Tensor[(756), uint32] */, %185, %186, %187, %188, meta[relay.Constant][14] /* ty=Tensor[(330), float64] */, %189)
}

def @func_146(%var_5: Tensor[(11, 5, 6), float64]) -> (Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) {
  %190 = cast(%var_5, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %191 = log(%190) /* ty=Tensor[(11, 5, 6), float64] */;
  %192 = cast(%191, dtype="float32") /* ty=Tensor[(11, 5, 6), float32] */;
  %193 = acosh(%192) /* ty=Tensor[(11, 5, 6), float32] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(11, 5, 6), float32] */;
  %195 = acos(%194) /* ty=Tensor[(11, 5, 6), float32] */;
  %196 = cast(%193, dtype="bool") /* ty=Tensor[(11, 5, 6), bool] */;
  %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%195, dtype="bool") /* ty=Tensor[(11, 5, 6), bool] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %200 = cast(%191, dtype="uint32") /* ty=Tensor[(11, 5, 6), uint32] */;
  %201 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%195, dtype="uint32") /* ty=Tensor[(11, 5, 6), uint32] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %204 = cast(%193, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %205 = cos(%204) /* ty=Tensor[(11, 5, 6), float64] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(11, 5, 6), float32] */;
  %207 = logical_or(%198, %199) /* ty=Tensor[(11, 5, 6), bool] */;
  %208 = maximum(%202, %203) /* ty=Tensor[(11, 5, 6), uint32] */;
  %209 = sigmoid(%206) /* ty=Tensor[(11, 5, 6), float32] */;
  (%207, %208, %209)
}

def @func_4093() -> (Tensor[(3, 10, 13), bool],) {
  %210 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  (%210,)
}

def @func_7814() -> Tensor[(3, 10, 13), bool] {
  %211 = @func_5406() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %211.1
}

def @func_4112() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %212 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %213 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  (%212, %213)
}

def @func_1670(%var_1567: Tensor[(1, 312), bool], %var_1632: Tensor[(375), float32], %var_1651: Tensor[(196), float32]) -> (Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) {
  %214 = cast(meta[relay.Constant][15] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %215 = cast(meta[relay.Constant][15] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %216 = reshape(%214, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %217 = reshape(%215, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %218 = cast(meta[relay.Constant][16] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %219 = reshape(%218, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %220 = @func_1000(%219) /* ty=(Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) */;
  %221 = cast(%var_1632, dtype="float32") /* ty=Tensor[(375), float32] */;
  %222 = cast(%var_1632, dtype="float32") /* ty=Tensor[(375), float32] */;
  %223 = cast(meta[relay.Constant][16] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %224 = reshape(%221, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %225 = reshape(%222, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %226 = reshape(%223, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %227 = @func_889(%224, %225, %226) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
  %228 = %220.1;
  %229 = cast(%228, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %230 = reshape(%229, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %231 = @func_146(%230) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %232 = cast(%var_1651, dtype="float32") /* ty=Tensor[(196), float32] */;
  %233 = reshape(%232, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %234 = @func_205(%233) /* ty=(Tensor[(2, 14, 7), float32],) */;
  %235 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %238 = log(%237) /* ty=Tensor[(3, 10, 13), float32] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %240 = tan(%239) /* ty=Tensor[(3, 10, 13), float32] */;
  %241 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %242 = %241.0;
  %243 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="uint8") /* ty=Tensor[(3, 10, 13), uint8] */;
  %246 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%242, dtype="uint8") /* ty=Tensor[(3, 10, 13), uint8] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %249 = maximum(%247, %248) /* ty=Tensor[(3, 10, 13), uint8] */;
  %250 = cast(%249, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %251 = shape_of(%240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%240, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %254 = cast(%var_1567, dtype="bool") /* ty=Tensor[(1, 312), bool] */;
  %255 = reshape(%254, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %256 = @func_708(%255) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %257 = %256.1;
  %258 = cast(%257, dtype="float32") /* ty=Tensor[(13, 2, 12), float32] */;
  %259 = @func_336(%216, %217) /* ty=Tensor[(13, 10, 14), float32] */;
  %260 = %227.2;
  %261 = %231.1;
  %262 = %234.0;
  %263 = floor_divide(%252, %253) /* ty=Tensor[(3, 10, 13), float32] */;
  %264 = sin(%258) /* ty=Tensor[(13, 2, 12), float32] */;
  (%var_1567, %259, meta[relay.Constant][15] /* ty=Tensor[(1820), float32] */, %228, meta[relay.Constant][16] /* ty=Tensor[(160, 4), float32] */, %260, %var_1632, %261, %262, %var_1651, %263, %264)
}

def @func_3840() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %265 = @func_3759() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %266 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %267 = %265.0;
  %268 = %266.0;
  (%267, %268)
}

def @func_205(%var_202: Tensor[(2, 14, 7), float32]) -> (Tensor[(2, 14, 7), float32],) {
  %269 = cast(%var_202, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %270 = sqrt(%269) /* ty=Tensor[(2, 14, 7), float32] */;
  (%270,)
}

def @func_5710(%var_5702: Tensor[(1820), float32]) -> (Tensor[(5, 84), float64], Tensor[(30), float64], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) {
  %271 = @func_4725() /* ty=(Tensor[(5, 84), float64], Tensor[(3, 10, 13), bool]) */;
  %272 = cast(%var_5702, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %273 = reshape(%272, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %274 = @func_3911(%273) /* ty=(Tensor[(30), float64], Tensor[(11, 5, 6), bool], Tensor[(7, 28), float32], Tensor[(330, 1), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %275 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %276 = %271.0;
  %277 = %274.0;
  %278 = %275.0;
  (%276, %277, %var_5702, %278)
}

def @func_4511() -> Tensor[(3, 10, 13), bool] {
  @func_4149() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_5827() -> (Tensor[(3, 10, 13), bool],) {
  %279 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %280 = %279.3;
  (%280,)
}

def @func_7273(%var_7252: Tensor[(9, 14, 10), int32], %var_7253: Tensor[(9, 14, 10), int32]) -> (Tensor[(9, 14, 10), int32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) {
  %281 = cast(%var_7253, dtype="int32") /* ty=Tensor[(9, 14, 10), int32] */;
  %282 = shape_of(%var_7252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_7252, dtype="int32") /* ty=Tensor[(9, 14, 10), int32] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %286 = cast(meta[relay.Constant][17] /* ty=Tensor[(1568), float64] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %287 = cast(meta[relay.Constant][17] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %288 = reshape(%285, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %289 = reshape(%286, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float32] */;
  %290 = reshape(%287, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %291 = @func_4282(%288, %289, %290) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */;
  %292 = logical_xor(%283, %284) /* ty=Tensor[(9, 14, 10), int32] */;
  %293 = %291.0;
  %294 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  (%292, %293, meta[relay.Constant][17] /* ty=Tensor[(1568), float64] */, %294)
}

def @func_2994() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) {
  %295 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  %296 = cast(%295, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %297 = cast(%295, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %298 = reshape(%296, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %299 = reshape(%297, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), float32] */;
  %300 = @func_2730(%298, %299) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) */;
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %302 = reshape(%301, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %303 = @func_205(%302) /* ty=(Tensor[(2, 14, 7), float32],) */;
  %304 = cast(%295, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %305 = %300.0;
  %306 = cast(%305, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %307 = reshape(%304, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %308 = reshape(%306, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), float32] */;
  %309 = @func_2730(%307, %308) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) */;
  %310 = %303.0;
  %311 = %309.4;
  %312 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  (%295, %305, %310, meta[relay.Constant][18] /* ty=Tensor[(7, 28), float32] */, %311, %312)
}

def @func_4540() -> (Tensor[(3, 10, 13), bool],) {
  %313 = @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %314 = %313.0;
  (%314,)
}

def @func_4082(%var_4067: Tensor[(375), float32], %var_4070: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) {
  %315 = cast(meta[relay.Constant][19] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %316 = cast(%var_4067, dtype="float32") /* ty=Tensor[(375), float32] */;
  %317 = cast(meta[relay.Constant][20] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %318 = cast(meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %319 = cast(%var_4070, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %320 = reshape(%315, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %321 = reshape(%316, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
  %322 = reshape(%317, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %323 = reshape(%318, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
  %324 = reshape(%319, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %325 = @func_2428(%320, %321, %322, %323, %324) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
  %326 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
  %327 = %325.5;
  (%326, %327, meta[relay.Constant][19] /* ty=Tensor[(312), bool] */, %var_4067, meta[relay.Constant][20] /* ty=Tensor[(196), float32] */, meta[relay.Constant][21] /* ty=Tensor[(32), float64] */, %var_4070)
}

def @func_4533() -> (Tensor[(3, 10, 13), bool],) {
  %328 = @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %329 = %328.0;
  (%329,)
}

def @func_7594() -> (Tensor[(3, 10, 13), bool], Tensor[(5, 84), uint32]) {
  %330 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %331 = @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */;
  %332 = %330.0;
  %333 = %331.2;
  (%332, %333)
}

def @func_4630(%var_4623: Tensor[(3, 10, 13), bool]) -> Tensor[(3, 10, 13), int64] {
  %334 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %335 = %334.0;
  %336 = cast(%var_4623, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%338, %339) /* ty=Tensor[(3, 10, 13), int64] */
}

def @func_6935() -> (Tensor[(4, 3, 2), int32],) {
  %340 = @func_6654() /* ty=(Tensor[(4, 3, 2), int32],) */;
  %341 = %340.0;
  (%341,)
}

def @func_3156() -> (Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) {
  %342 = cast(meta[relay.Constant][22] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %343 = reshape(%342, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %344 = @func_383(%343) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %345 = %344.0;
  %346 = cast(%345, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
  %347 = cast(meta[relay.Constant][23] /* ty=Tensor[(338), float64] */, dtype="float64") /* ty=Tensor[(338), float64] */;
  %348 = reshape(%347, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
  %349 = @func_2779(%348) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */;
  %350 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %351 = asinh(%346) /* ty=Tensor[(5, 2, 3), float64] */;
  %352 = %349.0;
  (%350, meta[relay.Constant][22] /* ty=Tensor[(30), float64] */, %351, %352, meta[relay.Constant][23] /* ty=Tensor[(338), float64] */)
}

def @func_6300(%var_6209: Tensor[(312), bool], %var_6222: Tensor[(13, 2, 12), float32], %var_6258: Tensor[(1568), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(312), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), uint32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1820), float32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) {
  %353 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %354 = @func_4533() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %355 = cast(%var_6209, dtype="bool") /* ty=Tensor[(312), bool] */;
  %356 = reshape(%355, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %357 = @func_708(%356) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %358 = %357.1;
  %359 = cast(%var_6222, dtype="uint32") /* ty=Tensor[(13, 2, 12), uint32] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="uint32") /* ty=Tensor[(13, 2, 12), uint32] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %363 = @func_5333() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %364 = cast(meta[relay.Constant][24] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %365 = reshape(%364, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %366 = @func_3274(%365) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %367 = cast(%var_6258, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %368 = reshape(%367, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %369 = @func_5316(%368) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %370 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %371 = %353.0;
  %372 = %354.0;
  %373 = maximum(%361, %362) /* ty=Tensor[(13, 2, 12), uint32] */;
  %374 = %363.0;
  %375 = %366.1;
  %376 = %369.3;
  %377 = %370.0;
  (%371, %var_6209, %372, %373, %374, %375, meta[relay.Constant][24] /* ty=Tensor[(1820), float32] */, %376, %var_6258, %377)
}

def @func_7288(%var_7280: Tensor[(14, 8, 9), float64], %var_7281: Tensor[(14, 8, 9), float64]) -> (Tensor[(14, 8, 9), float64],) {
  %378 = cast(%var_7281, dtype="float64") /* ty=Tensor[(14, 8, 9), float64] */;
  %379 = shape_of(%var_7280, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%var_7280, dtype="float64") /* ty=Tensor[(14, 8, 9), float64] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %382 = floor_mod(%380, %381) /* ty=Tensor[(14, 8, 9), float64] */;
  (%382,)
}

def @func_2187(%var_2051: Tensor[(4, 8, 1), float64], %var_2064: Tensor[(420), uint32], %var_2107: Tensor[(196), float32], %var_2135: Tensor[(756), uint32], %var_2156: Tensor[(330), float64]) -> (Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) {
  %383 = cast(%var_2064, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %384 = reshape(%383, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %385 = @func_1863(%384) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */;
  %386 = cast(%var_2107, dtype="float32") /* ty=Tensor[(196), float32] */;
  %387 = reshape(%386, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %388 = @func_205(%387) /* ty=(Tensor[(2, 14, 7), float32],) */;
  %389 = cast(%var_2051, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
  %390 = log(%389) /* ty=Tensor[(4, 8, 1), float64] */;
  %391 = cast(%390, dtype="int8") /* ty=Tensor[(4, 8, 1), int8] */;
  %392 = shape_of(%var_2051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_2051, dtype="int8") /* ty=Tensor[(4, 8, 1), int8] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %395 = bitwise_xor(%393, %394) /* ty=Tensor[(4, 8, ?), int8] */;
  %396 = cast(%395, dtype="float64") /* ty=Tensor[(4, 8, ?), float64] */;
  %397 = atanh(%396) /* ty=Tensor[(4, 8, ?), float64] */;
  %398 = cast(%395, dtype="float32") /* ty=Tensor[(4, 8, ?), float32] */;
  %399 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%390, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %402 = divide(%400, %401) /* ty=Tensor[(4, 8, ?), float32] */;
  %403 = cast(%402, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
  %404 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %405 = cast(%395, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %407 = logical_or(%405, %406) /* ty=Tensor[(4, 8, ?), bool] */;
  %408 = cast(%407, dtype="uint64") /* ty=Tensor[(4, 8, ?), uint64] */;
  %409 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 8, 5), bool] */, dtype="uint64") /* ty=Tensor[(4, 8, 5), uint64] */;
  %410 = logical_xor(%408, %409) /* ty=Tensor[(4, 8, 5), uint64] */;
  %411 = cast(%397, dtype="int8") /* ty=Tensor[(4, 8, ?), int8] */;
  %412 = cast(%410, dtype="int8") /* ty=Tensor[(4, 8, 5), int8] */;
  %413 = cast(%397, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
  %414 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(%395, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %417 = cast(%var_2135, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %418 = cast(%var_2135, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %419 = reshape(%417, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
  %420 = reshape(%418, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
  %421 = @func_456(%419, %420) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */;
  %422 = %385.3;
  %423 = cast(%422, dtype="uint32") /* ty=Tensor[(7, 6, 10), uint32] */;
  %424 = reshape(%423, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %425 = @func_1863(%424) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */;
  %426 = cast(%390, dtype="uint8") /* ty=Tensor[(4, 8, 1), uint8] */;
  %427 = cast(%var_2064, dtype="uint8") /* ty=Tensor[(420), uint8] */;
  %428 = cast(meta[relay.Constant][26] /* ty=Tensor[(156, 2), bool] */, dtype="bool") /* ty=Tensor[(156, 2), bool] */;
  %429 = cast(meta[relay.Constant][27] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %430 = %388.0;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %432 = reshape(%428, newshape=[1, 312]) /* ty=Tensor[(1, 312), bool] */;
  %433 = reshape(%429, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %434 = reshape(%431, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %435 = @func_1670(%432, %433, %434) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */;
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %437 = cast(meta[relay.Constant][27] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %438 = cast(meta[relay.Constant][28] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %439 = reshape(%436, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %440 = reshape(%437, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %441 = reshape(%438, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %442 = @func_889(%439, %440, %441) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
  %443 = cast(%var_2156, dtype="float64") /* ty=Tensor[(330), float64] */;
  %444 = reshape(%443, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %445 = @func_146(%444) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %446 = cast(%390, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
  %447 = acosh(%446) /* ty=Tensor[(4, 8, 1), float32] */;
  %448 = cast(%390, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %452 = subtract(%411, %412) /* ty=Tensor[(4, 8, 5), int8] */;
  %453 = less(%415, %416) /* ty=Tensor[(4, 8, ?), bool] */;
  %454 = %421.1;
  %455 = %425.3;
  %456 = right_shift(%426, %427) /* ty=Tensor[(4, 8, 420), uint8] */;
  %457 = %435.6;
  %458 = %442.2;
  %459 = %445.0;
  %460 = power(%450, %451) /* ty=Tensor[(4, 8, ?), float64] */;
  (%422, %430, %var_2107, %452, %453, %454, %var_2135, %455, %456, %457, meta[relay.Constant][26] /* ty=Tensor[(156, 2), bool] */, meta[relay.Constant][27] /* ty=Tensor[(375), float32] */, %458, meta[relay.Constant][28] /* ty=Tensor[(640), float32] */, %459, %var_2156, %460)
}

def @func_3642() -> (Tensor[(420), uint32], Tensor[(5, 84), uint32], Tensor[(3, 10, 13), uint16]) {
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 84), uint32] */, dtype="uint32") /* ty=Tensor[(5, 84), uint32] */;
  %462 = reshape(%461, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %463 = @func_3407(%462) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) */;
  %464 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
  %465 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  %466 = cast(%465, dtype="uint16") /* ty=Tensor[(3, 10, 13), uint16] */;
  %467 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%464, dtype="uint16") /* ty=Tensor[(3, 10, 13), uint16] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %470 = %463.2;
  %471 = subtract(%468, %469) /* ty=Tensor[(3, 10, 13), uint16] */;
  (%470, meta[relay.Constant][29] /* ty=Tensor[(5, 84), uint32] */, %471)
}

def @func_6923() -> Tensor[(3, 10, 13), bool] {
  %472 = @func_4093() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %472.0
}

def @func_4791() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %473 = cast(meta[relay.Constant][30] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %474 = reshape(%473, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %475 = @func_2863(%474) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
  %476 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %477 = @func_4590() /* ty=Tensor[(3, 10, 13), bool] */;
  %478 = %475.3;
  %479 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  %480 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  (%476, %477, %478, meta[relay.Constant][30] /* ty=Tensor[(640), float32] */, %479, %480)
}

def @func_889(%var_837: Tensor[(5, 15, 5), float32], %var_838: Tensor[(5, 15, 5), float32], %var_875: Tensor[(640), float32]) -> (Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) {
  %481 = cast(meta[relay.Constant][31] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %482 = reshape(%481, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %483 = @func_146(%482) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %484 = cast(%var_838, dtype="float32") /* ty=Tensor[(5, 15, 5), float32] */;
  %485 = shape_of(%var_837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_837, dtype="float32") /* ty=Tensor[(5, 15, 5), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = power(%486, %487) /* ty=Tensor[(5, 15, 5), float32] */;
  %489 = cast(meta[relay.Constant][32] /* ty=Tensor[(5, 15, 5), float32] */, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %493 = cast(%var_875, dtype="float32") /* ty=Tensor[(640), float32] */;
  %494 = cast(meta[relay.Constant][33] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %495 = reshape(%493, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %496 = reshape(%494, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %497 = @func_655(%495, %496) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %498 = %483.2;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %500 = reshape(%499, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %501 = @func_146(%500) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %502 = divide(%491, %492) /* ty=Tensor[(5, 15, 5), float64] */;
  %503 = %497.0;
  %504 = %501.1;
  (%498, meta[relay.Constant][31] /* ty=Tensor[(330), float64] */, %502, %503, %var_875, meta[relay.Constant][33] /* ty=Tensor[(30, 1), float64] */, %504)
}

def @func_1897(%var_1882: Tensor[(312), bool], %var_1884: Tensor[(196), float32], %var_1886: Tensor[(125, 3), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  %505 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %506 = cast(%var_1882, dtype="bool") /* ty=Tensor[(312), bool] */;
  %507 = cast(meta[relay.Constant][34] /* ty=Tensor[(125, 3), float32] */, dtype="float32") /* ty=Tensor[(125, 3), float32] */;
  %508 = cast(%var_1884, dtype="float32") /* ty=Tensor[(196), float32] */;
  %509 = reshape(%506, newshape=[1, 312]) /* ty=Tensor[(1, 312), bool] */;
  %510 = reshape(%507, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %511 = reshape(%508, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %512 = @func_1670(%509, %510, %511) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */;
  %513 = cast(%var_1886, dtype="float32") /* ty=Tensor[(125, 3), float32] */;
  %514 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(125, 3), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %515 = cast(meta[relay.Constant][34] /* ty=Tensor[(125, 3), float32] */, dtype="float32") /* ty=Tensor[(125, 3), float32] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %517 = cast(meta[relay.Constant][35] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %518 = cast(meta[relay.Constant][35] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %519 = reshape(%517, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %520 = reshape(%518, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %521 = %505.0;
  %522 = %512.8;
  %523 = maximum(%515, %516) /* ty=Tensor[(125, 3), float32] */;
  %524 = @func_336(%519, %520) /* ty=Tensor[(13, 10, 14), float32] */;
  (%521, %522, %var_1882, %var_1884, %523, %524, meta[relay.Constant][35] /* ty=Tensor[(1820), float32] */)
}

def @func_7566(%var_7559: Tensor[(375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(756), uint32], Tensor[(375), float64]) {
  %525 = @func_6629() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %526 = cast(%var_7559, dtype="float32") /* ty=Tensor[(375), float32] */;
  %527 = cast(meta[relay.Constant][36] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %528 = reshape(%526, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %529 = reshape(%527, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %530 = @func_4082(%528, %529) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) */;
  %531 = cast(%var_7559, dtype="float64") /* ty=Tensor[(375), float64] */;
  %532 = %525.0;
  %533 = %530.6;
  %534 = asin(%531) /* ty=Tensor[(375), float64] */;
  (%532, %533, meta[relay.Constant][36] /* ty=Tensor[(756), uint32] */, %534)
}

def @func_3560() -> (Tensor[(3, 10, 13), bool],) {
  %535 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %536 = %535.0;
  (%536,)
}

def @func_7901() -> Tensor[(3, 10, 13), bool] {
  %537 = @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %537.0
}

def @func_7986(%var_7946: Tensor[(16, 11, 8), float32]) -> (Tensor[(16, 11, 8), float32],) {
  %538 = cast(%var_7946, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
  %539 = asin(%538) /* ty=Tensor[(16, 11, 8), float32] */;
  (%539,)
}

def @func_7510(%var_7474: Tensor[(1568), float64], %var_7505: Tensor[(26, 13), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(14, 7, 16), float64], Tensor[(13, 2, 13), float64], Tensor[(26, 13), float64]) {
  %540 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %541 = @func_5600() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %542 = cast(%var_7474, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %543 = cast(%var_7474, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %544 = cast(%var_7474, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %545 = reshape(%542, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %546 = reshape(%543, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float32] */;
  %547 = reshape(%544, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %548 = @func_4282(%545, %546, %547) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */;
  %549 = %548.1;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
  %551 = cast(%var_7505, dtype="float64") /* ty=Tensor[(26, 13), float64] */;
  %552 = reshape(%551, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
  %553 = @func_6988(%552) /* ty=(Tensor[(13, 2, 13), float64],) */;
  %554 = %540.0;
  %555 = %541.0;
  %556 = sqrt(%550) /* ty=Tensor[(14, 7, 16), float64] */;
  %557 = %553.0;
  (%554, %555, %var_7474, %556, %557, %var_7505)
}

def @func_1798() -> Tensor[(3, 10, 13), bool] {
  %558 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %558.0
}

def @func_3759() -> (Tensor[(3, 10, 13), bool],) {
  %559 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  (%559,)
}

def @func_4606() -> (Tensor[(3, 10, 13), bool],) {
  %560 = @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %561 = %560.0;
  (%561,)
}

def @func_4409() -> (Tensor[(3, 10, 13), bool],) {
  %562 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  (%562,)
}

def @func_6390() -> Tensor[(3, 10, 13), bool] {
  @func_1798() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_2428(%var_2360: Tensor[(312), bool], %var_2361: Tensor[(1, 375), float32], %var_2362: Tensor[(196), float32], %var_2396: Tensor[(1, 32), float64], %var_2398: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) {
  %563 = cast(%var_2360, dtype="bool") /* ty=Tensor[(312), bool] */;
  %564 = cast(%var_2361, dtype="float32") /* ty=Tensor[(1, 375), float32] */;
  %565 = cast(%var_2362, dtype="float32") /* ty=Tensor[(196), float32] */;
  %566 = reshape(%563, newshape=[1, 312]) /* ty=Tensor[(1, 312), bool] */;
  %567 = reshape(%564, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %568 = reshape(%565, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %569 = @func_1670(%566, %567, %568) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */;
  %570 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %571 = cast(%570, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %572 = cast(%var_2396, dtype="float64") /* ty=Tensor[(1, 32), float64] */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %574 = cast(%var_2362, dtype="float32") /* ty=Tensor[(196), float32] */;
  %575 = cast(%var_2398, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %576 = cast(meta[relay.Constant][38] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %577 = reshape(%572, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float64] */;
  %578 = reshape(%573, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %579 = reshape(%574, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %580 = reshape(%575, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %581 = reshape(%576, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %582 = @func_2187(%577, %578, %579, %580, %581) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */;
  %583 = cast(meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %584 = cast(meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %585 = reshape(%583, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %586 = reshape(%584, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %587 = @func_336(%585, %586) /* ty=Tensor[(13, 10, 14), float32] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(13, 10, 14), float32] */;
  %589 = sinh(%588) /* ty=Tensor[(13, 10, 14), float32] */;
  %590 = cast(%587, dtype="uint32") /* ty=Tensor[(13, 10, 14), uint32] */;
  %591 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %592 = cast(meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, dtype="uint32") /* ty=Tensor[(1820), uint32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %594 = left_shift(%592, %593) /* ty=Tensor[(1820), uint32] */;
  %595 = cast(%594, dtype="bool") /* ty=Tensor[(1820), bool] */;
  %596 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%589, dtype="bool") /* ty=Tensor[(13, 10, 14), bool] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %599 = greater_equal(%597, %598) /* ty=Tensor[(13, 10, 14), bool] */;
  %600 = cast(%599, dtype="float64") /* ty=Tensor[(13, 10, 14), float64] */;
  %601 = cast(%var_2396, dtype="float64") /* ty=Tensor[(1, 32), float64] */;
  %602 = cast(meta[relay.Constant][37] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %603 = cast(%var_2362, dtype="float32") /* ty=Tensor[(196), float32] */;
  %604 = cast(%var_2398, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %605 = cast(meta[relay.Constant][38] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %606 = reshape(%601, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float64] */;
  %607 = reshape(%602, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %608 = reshape(%603, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %609 = reshape(%604, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %610 = reshape(%605, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %611 = @func_2187(%606, %607, %608, %609, %610) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */;
  %612 = %569.10;
  %613 = cosh(%571) /* ty=Tensor[(3, 10, 13), float32] */;
  %614 = %582.0;
  %615 = tan(%600) /* ty=Tensor[(13, 10, 14), float64] */;
  %616 = %611.5;
  (%612, %var_2360, %var_2361, %var_2362, %613, %614, %var_2396, meta[relay.Constant][37] /* ty=Tensor[(420), uint32] */, %var_2398, meta[relay.Constant][38] /* ty=Tensor[(330), float64] */, %615, %616)
}

def @func_655(%var_609: Tensor[(10, 16, 4), float32], %var_630: Tensor[(30), float64]) -> (Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) {
  %617 = cast(%var_630, dtype="float64") /* ty=Tensor[(30), float64] */;
  %618 = reshape(%617, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %619 = @func_383(%618) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %620 = cast(%var_609, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %621 = sqrt(%620) /* ty=Tensor[(10, 16, 4), float32] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %623 = cast(meta[relay.Constant][40] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %624 = reshape(%623, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %625 = @func_146(%624) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %626 = cast(%621, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %627 = log(%626) /* ty=Tensor[(10, 16, 4), float32] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %629 = log2(%628) /* ty=Tensor[(10, 16, 4), float32] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %631 = %619.0;
  %632 = atanh(%622) /* ty=Tensor[(10, 16, 4), float32] */;
  %633 = %625.2;
  %634 = asin(%630) /* ty=Tensor[(10, 16, 4), float64] */;
  (%631, %var_630, %632, %633, meta[relay.Constant][40] /* ty=Tensor[(330), float64] */, %634)
}

def @func_4590() -> Tensor[(3, 10, 13), bool] {
  %635 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %635.0
}

def @func_1967() -> Tensor[(3, 10, 13), bool] {
  @func_1391() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_7077() -> Tensor[(3, 10, 13), bool] {
  %636 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %636.0
}

def @func_6377(%var_6346: Tensor[(7, 28), float32], %var_6360: Tensor[(7, 28), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 28), bool], Tensor[(7, 28), bool], Tensor[(7, 28), float32]) {
  %637 = @func_5333() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %638 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %639 = %638.3;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %641 = sinh(%640) /* ty=Tensor[(7, 28), float32] */;
  %642 = cast(%641, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %643 = sin(%642) /* ty=Tensor[(7, 28), float32] */;
  %644 = cast(%var_6346, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %648 = cast(%var_6360, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %649 = shape_of(%641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %650 = cast(%641, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %652 = cast(%643, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %653 = %637.0;
  %654 = logical_or(%646, %647) /* ty=Tensor[(7, 28), bool] */;
  %655 = equal(%650, %651) /* ty=Tensor[(7, 28), bool] */;
  %656 = rsqrt(%652) /* ty=Tensor[(7, 28), float32] */;
  (%653, %654, %655, %656)
}

def @func_4523() -> (Tensor[(3, 10, 13), bool],) {
  %657 = @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */;
  %658 = %657.0;
  (%658,)
}

def @func_3407(%var_3327: Tensor[(420), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) {
  %659 = cast(%var_3327, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %660 = cast(%var_3327, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %661 = reshape(%659, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
  %662 = reshape(%660, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
  %663 = @func_1195(%661, %662) /* ty=(Tensor[(7, 6, 10), uint32],) */;
  %664 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %666 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %667 = %663.0;
  %668 = acos(%665) /* ty=Tensor[(3, 10, 13), float32] */;
  (%666, %667, %var_3327, %668)
}

def @func_7757() -> (Tensor[(3, 10, 13), bool],) {
  %669 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %670 = %669.0;
  (%670,)
}

def @func_6900() -> (Tensor[(3, 10, 13), bool],) {
  %671 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %672 = %671.0;
  (%672,)
}

def @func_6466(%var_6447: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(756), uint32]) {
  %673 = @func_6079() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %674 = cast(meta[relay.Constant][41] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %675 = cast(%var_6447, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %676 = reshape(%674, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %677 = reshape(%675, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %678 = @func_4082(%676, %677) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) */;
  %679 = %673.0;
  %680 = %678.6;
  (%679, %680, meta[relay.Constant][41] /* ty=Tensor[(375), float32] */, %var_6447)
}

def @func_1000(%var_987: Tensor[(640), float32]) -> (Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) {
  %681 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 14, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 16), float32] */;
  %682 = cast(%var_987, dtype="float32") /* ty=Tensor[(640), float32] */;
  %683 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
  %684 = reshape(%682, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %685 = reshape(%683, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %686 = @func_655(%684, %685) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %687 = log2(%681) /* ty=Tensor[(15, 14, 16), float32] */;
  %688 = %686.3;
  (%687, %688, %var_987, meta[relay.Constant][43] /* ty=Tensor[(5, 6), float64] */)
}

def @func_5932(%var_5912: Tensor[(640), float32], %var_5925: Tensor[(30), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(10, 16, 4), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) {
  %689 = @func_4112() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %690 = cast(%var_5912, dtype="float32") /* ty=Tensor[(640), float32] */;
  %691 = reshape(%690, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %692 = @func_2863(%691) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
  %693 = cast(%var_5912, dtype="float32") /* ty=Tensor[(640), float32] */;
  %694 = cast(%var_5925, dtype="float64") /* ty=Tensor[(30), float64] */;
  %695 = reshape(%693, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %696 = reshape(%694, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %697 = @func_655(%695, %696) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %698 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %699 = %689.1;
  %700 = %692.0;
  %701 = %697.5;
  %702 = %698.0;
  (%699, %700, %var_5912, %701, %var_5925, %702)
}

def @func_6944() -> Tensor[(3, 10, 13), bool] {
  @func_4999() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_383(%var_375: Tensor[(5, 2, 3), float64]) -> (Tensor[(5, 2, 3), float64],) {
  %703 = cast(%var_375, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
  %704 = rsqrt(%703) /* ty=Tensor[(5, 2, 3), float64] */;
  (%704,)
}

def @func_7131() -> Tensor[(3, 10, 13), bool] {
  %705 = @func_4533() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %705.0
}

def @func_2863(%var_2854: Tensor[(20, 32), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) {
  %706 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 75), float32] */, dtype="float32") /* ty=Tensor[(5, 75), float32] */;
  %707 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 75), float32] */, dtype="float32") /* ty=Tensor[(5, 75), float32] */;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %709 = reshape(%706, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %710 = reshape(%707, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %711 = reshape(%708, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %712 = @func_889(%709, %710, %711) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
  %713 = cast(meta[relay.Constant][46] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %714 = reshape(%713, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %715 = @func_383(%714) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %716 = cast(%var_2854, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %717 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(20, 32), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %718 = cast(meta[relay.Constant][45] /* ty=Tensor[(20, 32), float32] */, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %720 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %721 = %712.6;
  %722 = %715.0;
  %723 = logical_or(%718, %719) /* ty=Tensor[(20, 32), bool] */;
  (%720, %721, meta[relay.Constant][44] /* ty=Tensor[(5, 75), float32] */, %722, meta[relay.Constant][46] /* ty=Tensor[(30, 1), float64] */, %723)
}

def @func_1726(%var_1696: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(5, 6), float64], Tensor[(640), float32]) {
  %724 = cast(%var_1696, dtype="float32") /* ty=Tensor[(640), float32] */;
  %725 = reshape(%724, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %726 = @func_1000(%725) /* ty=(Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) */;
  %727 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  %728 = %726.3;
  (%727, %728, %var_1696)
}

def @func_5333() -> (Tensor[(3, 10, 13), bool],) {
  %729 = @func_4606() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %730 = %729.0;
  (%730,)
}

def @func_3478(%var_3454: Tensor[(3, 10, 13), bool], %var_3466: Tensor[(196), float32], %var_3468: Tensor[(756), uint32], %var_3472: Tensor[(40, 16), float32]) -> (Tensor[(3, 10, 13), float64], Tensor[(420), uint32], Tensor[(3, 104), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(16, 2), float64], Tensor[(756), uint32], Tensor[(5, 15, 5), float64], Tensor[(40, 16), float32], Tensor[(2, 14, 7), float32]) {
  %731 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %732 = cast(%var_3454, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %736 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 104), bool] */, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
  %737 = cast(meta[relay.Constant][48] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %738 = cast(%var_3466, dtype="float32") /* ty=Tensor[(196), float32] */;
  %739 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
  %740 = cast(%var_3468, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %741 = reshape(%736, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %742 = reshape(%737, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
  %743 = reshape(%738, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %744 = reshape(%739, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
  %745 = reshape(%740, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %746 = @func_2428(%741, %742, %743, %744, %745) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
  %747 = cast(meta[relay.Constant][48] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %748 = cast(meta[relay.Constant][48] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %749 = cast(%var_3472, dtype="float32") /* ty=Tensor[(40, 16), float32] */;
  %750 = reshape(%747, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %751 = reshape(%748, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %752 = reshape(%749, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %753 = @func_889(%750, %751, %752) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
  %754 = cast(%var_3466, dtype="float32") /* ty=Tensor[(196), float32] */;
  %755 = reshape(%754, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %756 = @func_205(%755) /* ty=(Tensor[(2, 14, 7), float32],) */;
  %757 = floor_mod(%734, %735) /* ty=Tensor[(3, 10, 13), float64] */;
  %758 = %746.7;
  %759 = %753.2;
  %760 = %756.0;
  (%757, %758, meta[relay.Constant][47] /* ty=Tensor[(3, 104), bool] */, meta[relay.Constant][48] /* ty=Tensor[(375), float32] */, %var_3466, meta[relay.Constant][49] /* ty=Tensor[(16, 2), float64] */, %var_3468, %759, %var_3472, %760)
}

def @func_7919() -> Tensor[(3, 10, 13), bool] {
  %761 = @func_3840() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %761.1
}

def @main(%var_8015: Tensor[(196), float32], %var_8016: Tensor[(1, 375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(?, 375), int32]) {
  %762 = @func_4112() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %763 = cast(meta[relay.Constant][50] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %764 = cast(%var_8015, dtype="float32") /* ty=Tensor[(196), float32] */;
  %765 = cast(%var_8016, dtype="float32") /* ty=Tensor[(1, 375), float32] */;
  %766 = reshape(%763, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %767 = reshape(%764, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %768 = reshape(%765, newshape=[125, 3]) /* ty=Tensor[(125, 3), float32] */;
  %769 = @func_1897(%766, %767, %768) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %770 = cast(%var_8016, dtype="float64") /* ty=Tensor[(1, 375), float64] */;
  %771 = rsqrt(%770) /* ty=Tensor[(1, 375), float64] */;
  %772 = cast(%771, dtype="int32") /* ty=Tensor[(1, 375), int32] */;
  %773 = shape_of(%var_8016, dtype="int32") /* ty=Tensor[(2), int32] */;
  %774 = cast(%var_8016, dtype="int32") /* ty=Tensor[(1, 375), int32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %776 = %762.1;
  %777 = %769.1;
  %778 = subtract(%774, %775) /* ty=Tensor[(?, 375), int32] */;
  (%776, %777, meta[relay.Constant][50] /* ty=Tensor[(312), bool] */, %var_8015, %778)
}

def @func_336(%var_330: Tensor[(13, 10, 14), float32], %var_331: Tensor[(13, 10, 14), float32]) -> Tensor[(13, 10, 14), float32] {
  %779 = cast(%var_331, dtype="float32") /* ty=Tensor[(13, 10, 14), float32] */;
  %780 = shape_of(%var_330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%var_330, dtype="float32") /* ty=Tensor[(13, 10, 14), float32] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%781, %782) /* ty=Tensor[(13, 10, 14), float32] */
}

def @func_4974(%var_4929: Tensor[(13, 3, 15), float64], %var_4930: Tensor[(13, 3, 15), float64], %var_4971: Tensor[(30), float64]) -> (Tensor[(13, 3, 15), float32], Tensor[(11, 5, 6), uint32], Tensor[(640), float32], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) {
  %783 = cast(%var_4930, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
  %784 = shape_of(%var_4929, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_4929, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %787 = mod(%785, %786) /* ty=Tensor[(13, 3, 15), float64] */;
  %788 = cast(meta[relay.Constant][51] /* ty=Tensor[(13, 3, 15), float64] */, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %789 = shape_of(%787, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%787, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %792 = cast(meta[relay.Constant][52] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %793 = reshape(%792, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %794 = @func_2863(%793) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
  %795 = cast(%var_4971, dtype="float64") /* ty=Tensor[(30), float64] */;
  %796 = reshape(%795, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %797 = @func_383(%796) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %798 = floor_mod(%790, %791) /* ty=Tensor[(13, 3, 15), float32] */;
  %799 = %794.1;
  %800 = %797.0;
  (%798, %799, meta[relay.Constant][52] /* ty=Tensor[(640), float32] */, %800, %var_4971)
}

def @func_4999() -> Tensor[(3, 10, 13), bool] {
  %801 = @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %801.0
}

def @func_5600() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %802 = @func_4606() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %803 = @func_3840() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %804 = %802.0;
  %805 = %803.0;
  (%804, %805)
}

def @func_6988(%var_6971: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), float64],) {
  %806 = @func_3156() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) */;
  %807 = %806.3;
  %808 = cast(%var_6971, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %809 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(%807, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %812 = divide(%810, %811) /* ty=Tensor[(13, 2, 13), float64] */;
  (%812,)
}

def @func_5066(%var_5064: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(640), float32]) {
  %813 = @func_4791() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %814 = cast(%var_5064, dtype="float32") /* ty=Tensor[(640), float32] */;
  %815 = reshape(%814, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %816 = @func_2863(%815) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
  %817 = %813.0;
  %818 = %816.1;
  (%817, %818, %var_5064)
}

def @func_1391() -> Tensor[(3, 10, 13), bool] {
  %819 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
  %820 = sin(%819) /* ty=Tensor[(3, 10, 13), float64] */;
  %821 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 10, 13), float64] */, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%823, %824) /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_2779(%var_2752: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) {
  %825 = cast(%var_2752, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %826 = sin(%825) /* ty=Tensor[(13, 2, 13), float64] */;
  %827 = cast(%var_2752, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %828 = shape_of(%826, dtype="int32") /* ty=Tensor[(3), int32] */;
  %829 = cast(%826, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %830 = dyn.reshape(%827, %828, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %831 = cast(meta[relay.Constant][54] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %832 = cast(meta[relay.Constant][55] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %833 = cast(meta[relay.Constant][56] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %834 = cast(meta[relay.Constant][57] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %835 = cast(meta[relay.Constant][56] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %836 = reshape(%831, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %837 = reshape(%832, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %838 = reshape(%833, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %839 = reshape(%834, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %840 = reshape(%835, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %841 = @func_2614(%836, %837, %838, %839, %840) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) */;
  %842 = mod(%829, %830) /* ty=Tensor[(13, 2, 13), float64] */;
  %843 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
  %844 = %841.3;
  (%842, %843, %844, meta[relay.Constant][54] /* ty=Tensor[(420), uint32] */, meta[relay.Constant][55] /* ty=Tensor[(30), float64] */, meta[relay.Constant][56] /* ty=Tensor[(375), float32] */, meta[relay.Constant][57] /* ty=Tensor[(7, 28), float32] */)
}

def @func_4862(%var_4858: Tensor[(312), bool]) -> (Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), bool], Tensor[(312), bool]) {
  %845 = cast(%var_4858, dtype="bool") /* ty=Tensor[(312), bool] */;
  %846 = reshape(%845, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %847 = @func_708(%846) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %848 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  %849 = %847.0;
  (%848, %849, %var_4858)
}

def @func_5406() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %850 = @func_4533() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %851 = @func_4590() /* ty=Tensor[(3, 10, 13), bool] */;
  %852 = %850.0;
  (%851, %852)
}

def @func_1495() -> Tensor[(3, 10, 13), bool] {
  %853 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %853.0
}

def @func_2614(%var_2546: Tensor[(420), uint32], %var_2556: Tensor[(5, 2, 3), float64], %var_2580: Tensor[(375), float32], %var_2581: Tensor[(196), float32], %var_2606: Tensor[(375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) {
  %854 = cast(%var_2546, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %855 = reshape(%854, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %856 = @func_1863(%855) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */;
  %857 = cast(meta[relay.Constant][58] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %858 = reshape(%857, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %859 = @func_383(%858) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %860 = %859.0;
  %861 = cast(%var_2556, dtype="bool") /* ty=Tensor[(5, 2, 3), bool] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(3), int32] */;
  %863 = cast(%860, dtype="bool") /* ty=Tensor[(5, 2, 3), bool] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %865 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 104), bool] */, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
  %866 = cast(%var_2580, dtype="float32") /* ty=Tensor[(375), float32] */;
  %867 = cast(%var_2581, dtype="float32") /* ty=Tensor[(196), float32] */;
  %868 = cast(meta[relay.Constant][60] /* ty=Tensor[(2, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 16), float64] */;
  %869 = %856.2;
  %870 = cast(%869, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %871 = reshape(%865, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %872 = reshape(%866, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
  %873 = reshape(%867, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %874 = reshape(%868, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
  %875 = reshape(%870, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %876 = @func_2428(%871, %872, %873, %874, %875) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
  %877 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %878 = cast(%877, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %879 = cast(%var_2606, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %880 = shape_of(%var_2580, dtype="int32") /* ty=Tensor[(1), int32] */;
  %881 = cast(%var_2580, dtype="uint16") /* ty=Tensor[(375), uint16] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %883 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %884 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %885 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %886 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
  %887 = not_equal(%863, %864) /* ty=Tensor[(5, 2, 3), bool] */;
  %888 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %889 = %876.8;
  %890 = sqrt(%878) /* ty=Tensor[(3, 10, 13), float32] */;
  %891 = bitwise_and(%881, %882) /* ty=Tensor[(375), uint16] */;
  %892 = %883.0;
  (%884, meta[relay.Constant][58] /* ty=Tensor[(30), float64] */, %885, %886, %869, %var_2546, %887, %888, %889, meta[relay.Constant][59] /* ty=Tensor[(3, 104), bool] */, %var_2581, meta[relay.Constant][60] /* ty=Tensor[(2, 16), float64] */, %890, %891, %892)
}

def @func_7223(%var_7146: Tensor[(195, 3), float64], %var_7178: Tensor[(375), float32], %var_7179: Tensor[(196), float32], %var_7205: Tensor[(32), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(30), float64], Tensor[(195, 3), int32], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), bool], Tensor[(32), float64], Tensor[(330), float64], Tensor[(70, 6), float64]) {
  %893 = cast(meta[relay.Constant][61] /* ty=Tensor[(195, 3), float64] */, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %894 = cast(meta[relay.Constant][61] /* ty=Tensor[(195, 3), float64] */, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %895 = cast(meta[relay.Constant][62] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %896 = reshape(%893, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float64] */;
  %897 = reshape(%894, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float64] */;
  %898 = reshape(%895, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %899 = @func_4974(%896, %897, %898) /* ty=(Tensor[(13, 3, 15), float32], Tensor[(11, 5, 6), uint32], Tensor[(640), float32], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) */;
  %900 = cast(%var_7146, dtype="int32") /* ty=Tensor[(195, 3), int32] */;
  %901 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(195, 3), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %902 = cast(meta[relay.Constant][61] /* ty=Tensor[(195, 3), float64] */, dtype="int32") /* ty=Tensor[(195, 3), int32] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %904 = cast(meta[relay.Constant][63] /* ty=Tensor[(70, 6), uint32] */, dtype="uint32") /* ty=Tensor[(70, 6), uint32] */;
  %905 = cast(meta[relay.Constant][62] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %906 = cast(%var_7178, dtype="float32") /* ty=Tensor[(375), float32] */;
  %907 = cast(%var_7179, dtype="float32") /* ty=Tensor[(196), float32] */;
  %908 = cast(%var_7178, dtype="float32") /* ty=Tensor[(375), float32] */;
  %909 = reshape(%904, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %910 = reshape(%905, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %911 = reshape(%906, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %912 = reshape(%907, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %913 = reshape(%908, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %914 = @func_2614(%909, %910, %911, %912, %913) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) */;
  %915 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %916 = cast(%var_7205, dtype="float64") /* ty=Tensor[(32), float64] */;
  %917 = cast(meta[relay.Constant][63] /* ty=Tensor[(70, 6), uint32] */, dtype="uint32") /* ty=Tensor[(70, 6), uint32] */;
  %918 = cast(%var_7179, dtype="float32") /* ty=Tensor[(196), float32] */;
  %919 = %914.4;
  %920 = cast(%919, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %921 = cast(meta[relay.Constant][64] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %922 = reshape(%916, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float64] */;
  %923 = reshape(%917, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %924 = reshape(%918, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %925 = reshape(%920, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %926 = reshape(%921, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %927 = @func_2187(%922, %923, %924, %925, %926) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */;
  %928 = cast(meta[relay.Constant][63] /* ty=Tensor[(70, 6), uint32] */, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %929 = acosh(%928) /* ty=Tensor[(70, 6), float32] */;
  %930 = cast(%929, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %931 = tan(%930) /* ty=Tensor[(70, 6), float32] */;
  %932 = cast(%929, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %933 = shape_of(%931, dtype="int32") /* ty=Tensor[(2), int32] */;
  %934 = cast(%931, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %935 = dyn.reshape(%932, %933, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %936 = logical_xor(%934, %935) /* ty=Tensor[(70, 6), uint64] */;
  %937 = cast(meta[relay.Constant][63] /* ty=Tensor[(70, 6), uint32] */, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %938 = shape_of(%931, dtype="int32") /* ty=Tensor[(2), int32] */;
  %939 = cast(%931, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %941 = bitwise_xor(%939, %940) /* ty=Tensor[(70, 6), int16] */;
  %942 = cast(%941, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %943 = shape_of(%936, dtype="int32") /* ty=Tensor[(2), int32] */;
  %944 = cast(%936, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %946 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %947 = %899.2;
  %948 = add(%902, %903) /* ty=Tensor[(195, 3), int32] */;
  %949 = %915.0;
  %950 = @func_6829() /* ty=Tensor[(3, 10, 13), bool] */;
  %951 = %927.14;
  %952 = floor_mod(%944, %945) /* ty=Tensor[(70, 6), float64] */;
  (%946, %947, meta[relay.Constant][62] /* ty=Tensor[(30), float64] */, %948, %919, %var_7178, %var_7179, %949, %950, %951, %var_7205, meta[relay.Constant][64] /* ty=Tensor[(330), float64] */, %952)
}

def @func_5316(%var_5245: Tensor[(1568), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %953 = cast(%var_5245, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %954 = cast(%var_5245, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %955 = cast(%var_5245, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %956 = reshape(%953, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %957 = reshape(%954, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float32] */;
  %958 = reshape(%955, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %959 = @func_4282(%956, %957, %958) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */;
  %960 = @func_4511() /* ty=Tensor[(3, 10, 13), bool] */;
  %961 = %959.0;
  %962 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  %963 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  (%960, %961, %var_5245, %962, %963)
}

def @func_3680() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) {
  %964 = cast(meta[relay.Constant][65] /* ty=Tensor[(5, 84), uint32] */, dtype="uint32") /* ty=Tensor[(5, 84), uint32] */;
  %965 = reshape(%964, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %966 = @func_3407(%965) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) */;
  %967 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %968 = %966.3;
  (%967, %968, meta[relay.Constant][65] /* ty=Tensor[(5, 84), uint32] */)
}

def @func_6629() -> (Tensor[(3, 10, 13), bool],) {
  %969 = @func_6079() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %970 = %969.0;
  (%970,)
}

def @func_1863(%var_1857: Tensor[(420), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) {
  %971 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %972 = cast(meta[relay.Constant][66] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %973 = cast(meta[relay.Constant][66] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %974 = reshape(%972, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
  %975 = reshape(%973, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
  %976 = @func_456(%974, %975) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */;
  %977 = cast(%var_1857, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %978 = cast(%var_1857, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %979 = reshape(%977, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
  %980 = reshape(%978, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
  %981 = @func_1195(%979, %980) /* ty=(Tensor[(7, 6, 10), uint32],) */;
  %982 = %971.0;
  %983 = %976.0;
  %984 = %981.0;
  (%982, %983, meta[relay.Constant][66] /* ty=Tensor[(756), uint32] */, %984, %var_1857)
}

def @func_1195(%var_1182: Tensor[(7, 6, 10), uint32], %var_1183: Tensor[(7, 6, 10), uint32]) -> (Tensor[(7, 6, 10), uint32],) {
  %985 = cast(%var_1183, dtype="uint32") /* ty=Tensor[(7, 6, 10), uint32] */;
  %986 = shape_of(%var_1182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %987 = cast(%var_1182, dtype="uint32") /* ty=Tensor[(7, 6, 10), uint32] */;
  %988 = dyn.reshape(%985, %986, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %989 = bitwise_xor(%987, %988) /* ty=Tensor[(7, 6, 10), uint32] */;
  (%989,)
}

def @func_3801(%var_3797: Tensor[(640), float32], %var_3798: Tensor[(30), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30), float64]) {
  %990 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %991 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %992 = cast(%var_3797, dtype="float32") /* ty=Tensor[(640), float32] */;
  %993 = cast(%var_3798, dtype="float64") /* ty=Tensor[(30), float64] */;
  %994 = reshape(%992, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %995 = reshape(%993, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %996 = @func_655(%994, %995) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %997 = %990.0;
  %998 = %991.0;
  %999 = %996.0;
  (%997, %998, %999, %var_3797, %var_3798)
}

def @func_4725() -> (Tensor[(5, 84), float64], Tensor[(3, 10, 13), bool]) {
  %1000 = @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */;
  %1001 = %1000.2;
  %1002 = cast(%1001, dtype="float64") /* ty=Tensor[(5, 84), float64] */;
  %1003 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %1004 = acosh(%1002) /* ty=Tensor[(5, 84), float64] */;
  %1005 = %1003.0;
  (%1004, %1005)
}

def @func_6654() -> (Tensor[(4, 3, 2), int32],) {
  %1006 = cast(meta[relay.Constant][68] /* ty=Tensor[(4, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(4, 3, 2), int32] */;
  %1007 = shape_of(meta[relay.Constant][67] /* ty=Tensor[(4, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1008 = cast(meta[relay.Constant][67] /* ty=Tensor[(4, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(4, 3, 2), int32] */;
  %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1010 = left_shift(%1008, %1009) /* ty=Tensor[(4, 3, 2), int32] */;
  (%1010,)
}

def @func_3524() -> (Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) {
  %1011 = cast(meta[relay.Constant][69] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %1012 = reshape(%1011, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %1013 = @func_383(%1012) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %1014 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %1015 = %1013.0;
  %1016 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
  (%1014, %1015, meta[relay.Constant][69] /* ty=Tensor[(30), float64] */, %1016)
}

def @func_708(%var_691: Tensor[(13, 2, 12), bool]) -> (Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) {
  %1017 = cast(%var_691, dtype="bool") /* ty=Tensor[(13, 2, 12), bool] */;
  %1018 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(13, 2, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1019 = cast(meta[relay.Constant][70] /* ty=Tensor[(13, 2, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 2, 12), bool] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1021 = cast(%var_691, dtype="float32") /* ty=Tensor[(13, 2, 12), float32] */;
  %1022 = logical_and(%1019, %1020) /* ty=Tensor[(13, 2, 12), bool] */;
  %1023 = atan(%1021) /* ty=Tensor[(13, 2, 12), float32] */;
  (%1022, %1023)
}

def @func_6829() -> Tensor[(3, 10, 13), bool] {
  %1024 = @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %1024.0
}

def @func_6039(%var_5959: Tensor[(338), float64]) -> (Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) {
  %1025 = @func_4791() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %1026 = cast(%var_5959, dtype="float64") /* ty=Tensor[(338), float64] */;
  %1027 = reshape(%1026, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
  %1028 = @func_2779(%1027) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */;
  %1029 = @func_4093() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %1030 = cast(%var_5959, dtype="float64") /* ty=Tensor[(338), float64] */;
  %1031 = %1025.2;
  %1032 = %1028.4;
  %1033 = %1029.0;
  %1034 = asin(%1030) /* ty=Tensor[(338), float64] */;
  (%1031, %1032, %1033, %1034)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1800() -> Tensor[(3, 10, 13), bool] {
  @func_1798() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_3840() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %0 = @func_3759() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %1 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %2 = %0.0;
  %3 = %1.0;
  (%2, %3)
}

def @func_3407(%var_3327: Tensor[(420), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) {
  %4 = cast(%var_3327, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %5 = cast(%var_3327, dtype="uint32") /* ty=Tensor[(420), uint32] */;
  %6 = reshape(%4, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
  %7 = reshape(%5, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
  %8 = @func_1195(%6, %7) /* ty=(Tensor[(7, 6, 10), uint32],) */;
  %9 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %11 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %12 = %8.0;
  %13 = acos(%10) /* ty=Tensor[(3, 10, 13), float32] */;
  (%11, %12, %var_3327, %13)
}

def @func_5316(%var_5245: Tensor[(1568), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %14 = cast(%var_5245, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %15 = cast(%var_5245, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %16 = cast(%var_5245, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %17 = reshape(%14, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %18 = reshape(%15, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float32] */;
  %19 = reshape(%16, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
  %20 = @func_4282(%17, %18, %19) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */;
  %21 = @func_4511() /* ty=Tensor[(3, 10, 13), bool] */;
  %22 = %20.0;
  %23 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  %24 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  (%21, %22, %var_5245, %23, %24)
}

def @func_3801(%var_3797: Tensor[(640), float32], %var_3798: Tensor[(30), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30), float64]) {
  %25 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %26 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %27 = cast(%var_3797, dtype="float32") /* ty=Tensor[(640), float32] */;
  %28 = cast(%var_3798, dtype="float64") /* ty=Tensor[(30), float64] */;
  %29 = reshape(%27, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %30 = reshape(%28, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %31 = @func_655(%29, %30) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %32 = %25.0;
  %33 = %26.0;
  %34 = %31.0;
  (%32, %33, %34, %var_3797, %var_3798)
}

def @func_148(%var_147: Tensor[(11, 5, 6), float64]) -> (Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) {
  %55 = fn (%var_5: Tensor[(11, 5, 6), float64]) -> (Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) {
    %35 = cast(%var_5, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
    %36 = log(%35) /* ty=Tensor[(11, 5, 6), float64] */;
    %37 = cast(%36, dtype="float32") /* ty=Tensor[(11, 5, 6), float32] */;
    %38 = acosh(%37) /* ty=Tensor[(11, 5, 6), float32] */;
    %39 = cast(%38, dtype="float32") /* ty=Tensor[(11, 5, 6), float32] */;
    %40 = acos(%39) /* ty=Tensor[(11, 5, 6), float32] */;
    %41 = cast(%38, dtype="bool") /* ty=Tensor[(11, 5, 6), bool] */;
    %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %43 = cast(%40, dtype="bool") /* ty=Tensor[(11, 5, 6), bool] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %45 = cast(%36, dtype="uint32") /* ty=Tensor[(11, 5, 6), uint32] */;
    %46 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %47 = cast(%40, dtype="uint32") /* ty=Tensor[(11, 5, 6), uint32] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %49 = cast(%38, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
    %50 = cos(%49) /* ty=Tensor[(11, 5, 6), float64] */;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(11, 5, 6), float32] */;
    %52 = logical_or(%43, %44) /* ty=Tensor[(11, 5, 6), bool] */;
    %53 = maximum(%47, %48) /* ty=Tensor[(11, 5, 6), uint32] */;
    %54 = sigmoid(%51) /* ty=Tensor[(11, 5, 6), float32] */;
    (%52, %53, %54)
  };
  %55(%var_147) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */
}

def @func_4286(%var_4283: Tensor[(14, 7, 16), float64], %var_4284: Tensor[(14, 7, 16), float32], %var_4285: Tensor[(14, 7, 16), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) {
  %76 = fn (%var_4238: Tensor[(14, 7, 16), float64], %var_4250: Tensor[(14, 7, 16), float32], %var_4267: Tensor[(14, 7, 16), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) {
    %56 = cast(%var_4238, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
    %57 = log2(%56) /* ty=Tensor[(14, 7, 16), float64] */;
    %58 = cast(%var_4267, dtype="bool") /* ty=Tensor[(14, 7, 16), bool] */;
    %59 = shape_of(%57, dtype="int32") /* ty=Tensor[(3), int32] */;
    %60 = cast(%57, dtype="bool") /* ty=Tensor[(14, 7, 16), bool] */;
    %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %62 = cast(%57, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
    %63 = exp(%62) /* ty=Tensor[(14, 7, 16), float32] */;
    %64 = cast(%var_4250, dtype="int64") /* ty=Tensor[(14, 7, 16), int64] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%63, dtype="int64") /* ty=Tensor[(14, 7, 16), int64] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %68 = subtract(%66, %67) /* ty=Tensor[(14, 7, 16), int64] */;
    %69 = cast(%68, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
    %70 = shape_of(%var_4250, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%var_4250, dtype="float32") /* ty=Tensor[(14, 7, 16), float32] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %73 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %74 = greater(%60, %61) /* ty=Tensor[(14, 7, 16), bool] */;
    %75 = mod(%71, %72) /* ty=Tensor[(14, 7, 16), float32] */;
    (%73, %74, %75)
  };
  %76(%var_4283, %var_4284, %var_4285) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */
}

def @func_4591() -> Tensor[(3, 10, 13), bool] {
  %78 = fn () -> Tensor[(3, 10, 13), bool] {
    %77 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
    %77.0
  };
  %78() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_7815() -> Tensor[(3, 10, 13), bool] {
  %80 = fn () -> Tensor[(3, 10, 13), bool] {
    %79 = @func_5406() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
    %79.1
  };
  %80() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_6924() -> Tensor[(3, 10, 13), bool] {
  %82 = fn () -> Tensor[(3, 10, 13), bool] {
    %81 = @func_4093() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %81.0
  };
  %82() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_456(%var_431: Tensor[(9, 6, 14), uint32], %var_432: Tensor[(9, 6, 14), uint32]) -> (Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) {
  %83 = cast(%var_432, dtype="bool") /* ty=Tensor[(9, 6, 14), bool] */;
  %84 = shape_of(%var_431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_431, dtype="bool") /* ty=Tensor[(9, 6, 14), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = cast(meta[relay.Constant][0] /* ty=Tensor[(1820, 1), float32] */, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %88 = cast(meta[relay.Constant][0] /* ty=Tensor[(1820, 1), float32] */, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
  %89 = reshape(%87, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %90 = reshape(%88, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %91 = equal(%85, %86) /* ty=Tensor[(9, 6, 14), bool] */;
  %92 = @func_336(%89, %90) /* ty=Tensor[(13, 10, 14), float32] */;
  (%91, %92, meta[relay.Constant][0] /* ty=Tensor[(1820, 1), float32] */)
}

def @func_6080() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %97 = fn () -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
    %93 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %94 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %95 = %93.0;
    %96 = %94.0;
    (%95, %96)
  };
  %97() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_4511() -> Tensor[(3, 10, 13), bool] {
  @func_4149() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_5712(%var_5711: Tensor[(1820), float32]) -> (Tensor[(5, 84), float64], Tensor[(30), float64], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) {
  %106 = fn (%var_5702: Tensor[(1820), float32]) -> (Tensor[(5, 84), float64], Tensor[(30), float64], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) {
    %98 = @func_4725() /* ty=(Tensor[(5, 84), float64], Tensor[(3, 10, 13), bool]) */;
    %99 = cast(%var_5702, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %100 = reshape(%99, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
    %101 = @func_3911(%100) /* ty=(Tensor[(30), float64], Tensor[(11, 5, 6), bool], Tensor[(7, 28), float32], Tensor[(330, 1), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
    %102 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %103 = %98.0;
    %104 = %101.0;
    %105 = %102.0;
    (%103, %104, %var_5702, %105)
  };
  %106(%var_5711) /* ty=(Tensor[(5, 84), float64], Tensor[(30), float64], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) */
}

def @func_7919() -> Tensor[(3, 10, 13), bool] {
  %107 = @func_3840() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %107.1
}

def @func_7921() -> Tensor[(3, 10, 13), bool] {
  @func_7919() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_710(%var_709: Tensor[(13, 2, 12), bool]) -> (Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) {
  %115 = fn (%var_691: Tensor[(13, 2, 12), bool]) -> (Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) {
    %108 = cast(%var_691, dtype="bool") /* ty=Tensor[(13, 2, 12), bool] */;
    %109 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(13, 2, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %110 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 2, 12), bool] */, dtype="bool") /* ty=Tensor[(13, 2, 12), bool] */;
    %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %112 = cast(%var_691, dtype="float32") /* ty=Tensor[(13, 2, 12), float32] */;
    %113 = logical_and(%110, %111) /* ty=Tensor[(13, 2, 12), bool] */;
    %114 = atan(%112) /* ty=Tensor[(13, 2, 12), float32] */;
    (%113, %114)
  };
  %115(%var_709) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */
}

def @func_3525() -> (Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) {
  %122 = fn () -> (Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) {
    %116 = cast(meta[relay.Constant][2] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %117 = reshape(%116, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
    %118 = @func_383(%117) /* ty=(Tensor[(5, 2, 3), float64],) */;
    %119 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %120 = %118.0;
    %121 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
    (%119, %120, meta[relay.Constant][2] /* ty=Tensor[(30), float64] */, %121)
  };
  %122() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */
}

def @func_3560() -> (Tensor[(3, 10, 13), bool],) {
  %123 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %124 = %123.0;
  (%124,)
}

def @func_6039(%var_5959: Tensor[(338), float64]) -> (Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) {
  %125 = @func_4791() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %126 = cast(%var_5959, dtype="float64") /* ty=Tensor[(338), float64] */;
  %127 = reshape(%126, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
  %128 = @func_2779(%127) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */;
  %129 = @func_4093() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %130 = cast(%var_5959, dtype="float64") /* ty=Tensor[(338), float64] */;
  %131 = %125.2;
  %132 = %128.4;
  %133 = %129.0;
  %134 = asin(%130) /* ty=Tensor[(338), float64] */;
  (%131, %132, %133, %134)
}

def @func_1496() -> Tensor[(3, 10, 13), bool] {
  %136 = fn () -> Tensor[(3, 10, 13), bool] {
    %135 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %135.0
  };
  %136() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_3603(%var_3602: Tensor[(3, 10, 13), bool]) -> (Tensor[(3, 10, 13), int64],) {
  %143 = fn (%var_3596: Tensor[(3, 10, 13), bool]) -> (Tensor[(3, 10, 13), int64],) {
    %137 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %138 = cast(%var_3596, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
    %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(3), int32] */;
    %140 = cast(%137, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %142 = right_shift(%140, %141) /* ty=Tensor[(3, 10, 13), int64] */;
    (%142,)
  };
  %143(%var_3602) /* ty=(Tensor[(3, 10, 13), int64],) */
}

def @func_7229(%var_7225: Tensor[(195, 3), float64], %var_7226: Tensor[(375), float32], %var_7227: Tensor[(196), float32], %var_7228: Tensor[(32), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(30), float64], Tensor[(195, 3), int32], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), bool], Tensor[(32), float64], Tensor[(330), float64], Tensor[(70, 6), float64]) {
  @func_7223(%var_7225, %var_7226, %var_7227, %var_7228) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(30), float64], Tensor[(195, 3), int32], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), bool], Tensor[(32), float64], Tensor[(330), float64], Tensor[(70, 6), float64]) */
}

def @func_7759() -> (Tensor[(3, 10, 13), bool],) {
  @func_7757() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_7988(%var_7987: Tensor[(16, 11, 8), float32]) -> (Tensor[(16, 11, 8), float32],) {
  %146 = fn (%var_7946: Tensor[(16, 11, 8), float32]) -> (Tensor[(16, 11, 8), float32],) {
    %144 = cast(%var_7946, dtype="float32") /* ty=Tensor[(16, 11, 8), float32] */;
    %145 = asin(%144) /* ty=Tensor[(16, 11, 8), float32] */;
    (%145,)
  };
  %146(%var_7987) /* ty=(Tensor[(16, 11, 8), float32],) */
}

def @func_7223(%var_7146: Tensor[(195, 3), float64], %var_7178: Tensor[(375), float32], %var_7179: Tensor[(196), float32], %var_7205: Tensor[(32), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(30), float64], Tensor[(195, 3), int32], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), bool], Tensor[(32), float64], Tensor[(330), float64], Tensor[(70, 6), float64]) {
  %147 = cast(meta[relay.Constant][3] /* ty=Tensor[(195, 3), float64] */, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %148 = cast(meta[relay.Constant][3] /* ty=Tensor[(195, 3), float64] */, dtype="float64") /* ty=Tensor[(195, 3), float64] */;
  %149 = cast(meta[relay.Constant][4] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %150 = reshape(%147, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float64] */;
  %151 = reshape(%148, newshape=[13, 3, 15]) /* ty=Tensor[(13, 3, 15), float64] */;
  %152 = reshape(%149, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %153 = @func_4974(%150, %151, %152) /* ty=(Tensor[(13, 3, 15), float32], Tensor[(11, 5, 6), uint32], Tensor[(640), float32], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) */;
  %154 = cast(%var_7146, dtype="int32") /* ty=Tensor[(195, 3), int32] */;
  %155 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(195, 3), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %156 = cast(meta[relay.Constant][3] /* ty=Tensor[(195, 3), float64] */, dtype="int32") /* ty=Tensor[(195, 3), int32] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %158 = cast(meta[relay.Constant][5] /* ty=Tensor[(70, 6), uint32] */, dtype="uint32") /* ty=Tensor[(70, 6), uint32] */;
  %159 = cast(meta[relay.Constant][4] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %160 = cast(%var_7178, dtype="float32") /* ty=Tensor[(375), float32] */;
  %161 = cast(%var_7179, dtype="float32") /* ty=Tensor[(196), float32] */;
  %162 = cast(%var_7178, dtype="float32") /* ty=Tensor[(375), float32] */;
  %163 = reshape(%158, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %164 = reshape(%159, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %165 = reshape(%160, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %166 = reshape(%161, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %167 = reshape(%162, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %168 = @func_2614(%163, %164, %165, %166, %167) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) */;
  %169 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %170 = cast(%var_7205, dtype="float64") /* ty=Tensor[(32), float64] */;
  %171 = cast(meta[relay.Constant][5] /* ty=Tensor[(70, 6), uint32] */, dtype="uint32") /* ty=Tensor[(70, 6), uint32] */;
  %172 = cast(%var_7179, dtype="float32") /* ty=Tensor[(196), float32] */;
  %173 = %168.4;
  %174 = cast(%173, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %175 = cast(meta[relay.Constant][6] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %176 = reshape(%170, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float64] */;
  %177 = reshape(%171, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %178 = reshape(%172, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %179 = reshape(%174, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %180 = reshape(%175, newshape=[330]) /* ty=Tensor[(330), float64] */;
  %181 = @func_2187(%176, %177, %178, %179, %180) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */;
  %182 = cast(meta[relay.Constant][5] /* ty=Tensor[(70, 6), uint32] */, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %183 = acosh(%182) /* ty=Tensor[(70, 6), float32] */;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %185 = tan(%184) /* ty=Tensor[(70, 6), float32] */;
  %186 = cast(%183, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(2), int32] */;
  %188 = cast(%185, dtype="uint64") /* ty=Tensor[(70, 6), uint64] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %190 = logical_xor(%188, %189) /* ty=Tensor[(70, 6), uint64] */;
  %191 = cast(meta[relay.Constant][5] /* ty=Tensor[(70, 6), uint32] */, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %192 = shape_of(%185, dtype="int32") /* ty=Tensor[(2), int32] */;
  %193 = cast(%185, dtype="int16") /* ty=Tensor[(70, 6), int16] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %195 = bitwise_xor(%193, %194) /* ty=Tensor[(70, 6), int16] */;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %197 = shape_of(%190, dtype="int32") /* ty=Tensor[(2), int32] */;
  %198 = cast(%190, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %200 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %201 = %153.2;
  %202 = add(%156, %157) /* ty=Tensor[(195, 3), int32] */;
  %203 = %169.0;
  %204 = @func_6829() /* ty=Tensor[(3, 10, 13), bool] */;
  %205 = %181.14;
  %206 = floor_mod(%198, %199) /* ty=Tensor[(70, 6), float64] */;
  (%200, %201, meta[relay.Constant][4] /* ty=Tensor[(30), float64] */, %202, %173, %var_7178, %var_7179, %203, %204, %205, %var_7205, meta[relay.Constant][6] /* ty=Tensor[(330), float64] */, %206)
}

def @func_6988(%var_6971: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), float64],) {
  %207 = @func_3156() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) */;
  %208 = %207.3;
  %209 = cast(%var_6971, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %213 = divide(%211, %212) /* ty=Tensor[(13, 2, 13), float64] */;
  (%213,)
}

def @func_1798() -> Tensor[(3, 10, 13), bool] {
  %214 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %214.0
}

def @func_3970(%var_3969: Tensor[(8, 3, 7), float32]) -> (Tensor[(1820), float32], Tensor[(312), bool], Tensor[(7, 28), float32], Tensor[(25, 15), float32], Tensor[(8, 3, 7), float64]) {
  %230 = fn (%var_3927: Tensor[(8, 3, 7), float32]) -> (Tensor[(1820), float32], Tensor[(312), bool], Tensor[(7, 28), float32], Tensor[(25, 15), float32], Tensor[(8, 3, 7), float64]) {
    %215 = cast(meta[relay.Constant][7] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %216 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
    %217 = cast(meta[relay.Constant][9] /* ty=Tensor[(25, 15), float32] */, dtype="float32") /* ty=Tensor[(25, 15), float32] */;
    %218 = reshape(%215, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %219 = reshape(%216, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %220 = reshape(%217, newshape=[125, 3]) /* ty=Tensor[(125, 3), float32] */;
    %221 = @func_1897(%218, %219, %220) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
    %222 = cast(%var_3927, dtype="float32") /* ty=Tensor[(8, 3, 7), float32] */;
    %223 = acosh(%222) /* ty=Tensor[(8, 3, 7), float32] */;
    %224 = cast(%var_3927, dtype="float64") /* ty=Tensor[(8, 3, 7), float64] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="float64") /* ty=Tensor[(8, 3, 7), float64] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %228 = %221.6;
    %229 = divide(%226, %227) /* ty=Tensor[(8, 3, 7), float64] */;
    (%228, meta[relay.Constant][7] /* ty=Tensor[(312), bool] */, meta[relay.Constant][8] /* ty=Tensor[(7, 28), float32] */, meta[relay.Constant][9] /* ty=Tensor[(25, 15), float32] */, %229)
  };
  %230(%var_3969) /* ty=(Tensor[(1820), float32], Tensor[(312), bool], Tensor[(7, 28), float32], Tensor[(25, 15), float32], Tensor[(8, 3, 7), float64]) */
}

def @func_2434(%var_2429: Tensor[(312), bool], %var_2430: Tensor[(1, 375), float32], %var_2431: Tensor[(196), float32], %var_2432: Tensor[(1, 32), float64], %var_2433: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) {
  %285 = fn (%var_2360: Tensor[(312), bool], %var_2361: Tensor[(1, 375), float32], %var_2362: Tensor[(196), float32], %var_2396: Tensor[(1, 32), float64], %var_2398: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) {
    %231 = cast(%var_2360, dtype="bool") /* ty=Tensor[(312), bool] */;
    %232 = cast(%var_2361, dtype="float32") /* ty=Tensor[(1, 375), float32] */;
    %233 = cast(%var_2362, dtype="float32") /* ty=Tensor[(196), float32] */;
    %234 = reshape(%231, newshape=[1, 312]) /* ty=Tensor[(1, 312), bool] */;
    %235 = reshape(%232, newshape=[375]) /* ty=Tensor[(375), float32] */;
    %236 = reshape(%233, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %237 = @func_1670(%234, %235, %236) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */;
    %238 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %239 = cast(%238, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %240 = cast(%var_2396, dtype="float64") /* ty=Tensor[(1, 32), float64] */;
    %241 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %242 = cast(%var_2362, dtype="float32") /* ty=Tensor[(196), float32] */;
    %243 = cast(%var_2398, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %244 = cast(meta[relay.Constant][11] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %245 = reshape(%240, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float64] */;
    %246 = reshape(%241, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %247 = reshape(%242, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %248 = reshape(%243, newshape=[756]) /* ty=Tensor[(756), uint32] */;
    %249 = reshape(%244, newshape=[330]) /* ty=Tensor[(330), float64] */;
    %250 = @func_2187(%245, %246, %247, %248, %249) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */;
    %251 = cast(meta[relay.Constant][12] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %252 = cast(meta[relay.Constant][12] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %253 = reshape(%251, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
    %254 = reshape(%252, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
    %255 = @func_336(%253, %254) /* ty=Tensor[(13, 10, 14), float32] */;
    %256 = cast(%255, dtype="float32") /* ty=Tensor[(13, 10, 14), float32] */;
    %257 = sinh(%256) /* ty=Tensor[(13, 10, 14), float32] */;
    %258 = cast(%255, dtype="uint32") /* ty=Tensor[(13, 10, 14), uint32] */;
    %259 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(1820), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %260 = cast(meta[relay.Constant][12] /* ty=Tensor[(1820), float32] */, dtype="uint32") /* ty=Tensor[(1820), uint32] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %262 = left_shift(%260, %261) /* ty=Tensor[(1820), uint32] */;
    %263 = cast(%262, dtype="bool") /* ty=Tensor[(1820), bool] */;
    %264 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
    %265 = cast(%257, dtype="bool") /* ty=Tensor[(13, 10, 14), bool] */;
    %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %267 = greater_equal(%265, %266) /* ty=Tensor[(13, 10, 14), bool] */;
    %268 = cast(%267, dtype="float64") /* ty=Tensor[(13, 10, 14), float64] */;
    %269 = cast(%var_2396, dtype="float64") /* ty=Tensor[(1, 32), float64] */;
    %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %271 = cast(%var_2362, dtype="float32") /* ty=Tensor[(196), float32] */;
    %272 = cast(%var_2398, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %273 = cast(meta[relay.Constant][11] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %274 = reshape(%269, newshape=[4, 8, 1]) /* ty=Tensor[(4, 8, 1), float64] */;
    %275 = reshape(%270, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %276 = reshape(%271, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %277 = reshape(%272, newshape=[756]) /* ty=Tensor[(756), uint32] */;
    %278 = reshape(%273, newshape=[330]) /* ty=Tensor[(330), float64] */;
    %279 = @func_2187(%274, %275, %276, %277, %278) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */;
    %280 = %237.10;
    %281 = cosh(%239) /* ty=Tensor[(3, 10, 13), float32] */;
    %282 = %250.0;
    %283 = tan(%268) /* ty=Tensor[(13, 10, 14), float64] */;
    %284 = %279.5;
    (%280, %var_2360, %var_2361, %var_2362, %281, %282, %var_2396, meta[relay.Constant][10] /* ty=Tensor[(420), uint32] */, %var_2398, meta[relay.Constant][11] /* ty=Tensor[(330), float64] */, %283, %284)
  };
  %285(%var_2429, %var_2430, %var_2431, %var_2432, %var_2433) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */
}

def @func_1393() -> Tensor[(3, 10, 13), bool] {
  @func_1391() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_5407() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %289 = fn () -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
    %286 = @func_4533() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %287 = @func_4590() /* ty=Tensor[(3, 10, 13), bool] */;
    %288 = %286.0;
    (%287, %288)
  };
  %289() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_5334() -> (Tensor[(3, 10, 13), bool],) {
  %292 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %290 = @func_4606() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %291 = %290.0;
    (%291,)
  };
  %292() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_2996() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) {
  @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */
}

def @func_5873() -> (Tensor[(3, 10, 13), bool],) {
  @func_5871() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_6655() -> (Tensor[(4, 3, 2), int32],) {
  %298 = fn () -> (Tensor[(4, 3, 2), int32],) {
    %293 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(4, 3, 2), int32] */;
    %294 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(4, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(4, 3, 2), int32] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %297 = left_shift(%295, %296) /* ty=Tensor[(4, 3, 2), int32] */;
    (%297,)
  };
  %298() /* ty=(Tensor[(4, 3, 2), int32],) */
}

def @func_1729(%var_1727: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(5, 6), float64], Tensor[(640), float32]) {
  @func_1726(%var_1727) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 6), float64], Tensor[(640), float32]) */
}

def @func_6377(%var_6346: Tensor[(7, 28), float32], %var_6360: Tensor[(7, 28), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 28), bool], Tensor[(7, 28), bool], Tensor[(7, 28), float32]) {
  %299 = @func_5333() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %300 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %301 = %300.3;
  %302 = cast(%301, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %303 = sinh(%302) /* ty=Tensor[(7, 28), float32] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %305 = sin(%304) /* ty=Tensor[(7, 28), float32] */;
  %306 = cast(%var_6346, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(2), int32] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %310 = cast(%var_6360, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %311 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
  %312 = cast(%303, dtype="bool") /* ty=Tensor[(7, 28), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %314 = cast(%305, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %315 = %299.0;
  %316 = logical_or(%308, %309) /* ty=Tensor[(7, 28), bool] */;
  %317 = equal(%312, %313) /* ty=Tensor[(7, 28), bool] */;
  %318 = rsqrt(%314) /* ty=Tensor[(7, 28), float32] */;
  (%315, %316, %317, %318)
}

def @func_5124(%var_5123: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), bool], Tensor[(3, 10, 13), bool]) {
  %328 = fn (%var_5102: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), bool], Tensor[(3, 10, 13), bool]) {
    %319 = @func_3156() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) */;
    %320 = %319.3;
    %321 = cast(%var_5102, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
    %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
    %323 = cast(%320, dtype="bool") /* ty=Tensor[(13, 2, 13), bool] */;
    %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %325 = @func_3759() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %326 = equal(%323, %324) /* ty=Tensor[(13, 2, 13), bool] */;
    %327 = %325.0;
    (%326, %327)
  };
  %328(%var_5123) /* ty=(Tensor[(13, 2, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_3483(%var_3479: Tensor[(3, 10, 13), bool], %var_3480: Tensor[(196), float32], %var_3481: Tensor[(756), uint32], %var_3482: Tensor[(40, 16), float32]) -> (Tensor[(3, 10, 13), float64], Tensor[(420), uint32], Tensor[(3, 104), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(16, 2), float64], Tensor[(756), uint32], Tensor[(5, 15, 5), float64], Tensor[(40, 16), float32], Tensor[(2, 14, 7), float32]) {
  %359 = fn (%var_3454: Tensor[(3, 10, 13), bool], %var_3466: Tensor[(196), float32], %var_3468: Tensor[(756), uint32], %var_3472: Tensor[(40, 16), float32]) -> (Tensor[(3, 10, 13), float64], Tensor[(420), uint32], Tensor[(3, 104), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(16, 2), float64], Tensor[(756), uint32], Tensor[(5, 15, 5), float64], Tensor[(40, 16), float32], Tensor[(2, 14, 7), float32]) {
    %329 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
    %330 = cast(%var_3454, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
    %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %332 = cast(%329, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
    %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %334 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 104), bool] */, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
    %335 = cast(meta[relay.Constant][16] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %336 = cast(%var_3466, dtype="float32") /* ty=Tensor[(196), float32] */;
    %337 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 2), float64] */, dtype="float64") /* ty=Tensor[(16, 2), float64] */;
    %338 = cast(%var_3468, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %339 = reshape(%334, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %340 = reshape(%335, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
    %341 = reshape(%336, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %342 = reshape(%337, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
    %343 = reshape(%338, newshape=[756]) /* ty=Tensor[(756), uint32] */;
    %344 = @func_2428(%339, %340, %341, %342, %343) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
    %345 = cast(meta[relay.Constant][16] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %346 = cast(meta[relay.Constant][16] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %347 = cast(%var_3472, dtype="float32") /* ty=Tensor[(40, 16), float32] */;
    %348 = reshape(%345, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
    %349 = reshape(%346, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
    %350 = reshape(%347, newshape=[640]) /* ty=Tensor[(640), float32] */;
    %351 = @func_889(%348, %349, %350) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
    %352 = cast(%var_3466, dtype="float32") /* ty=Tensor[(196), float32] */;
    %353 = reshape(%352, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
    %354 = @func_205(%353) /* ty=(Tensor[(2, 14, 7), float32],) */;
    %355 = floor_mod(%332, %333) /* ty=Tensor[(3, 10, 13), float64] */;
    %356 = %344.7;
    %357 = %351.2;
    %358 = %354.0;
    (%355, %356, meta[relay.Constant][15] /* ty=Tensor[(3, 104), bool] */, meta[relay.Constant][16] /* ty=Tensor[(375), float32] */, %var_3466, meta[relay.Constant][17] /* ty=Tensor[(16, 2), float64] */, %var_3468, %357, %var_3472, %358)
  };
  %359(%var_3479, %var_3480, %var_3481, %var_3482) /* ty=(Tensor[(3, 10, 13), float64], Tensor[(420), uint32], Tensor[(3, 104), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(16, 2), float64], Tensor[(756), uint32], Tensor[(5, 15, 5), float64], Tensor[(40, 16), float32], Tensor[(2, 14, 7), float32]) */
}

def @func_205(%var_202: Tensor[(2, 14, 7), float32]) -> (Tensor[(2, 14, 7), float32],) {
  %360 = cast(%var_202, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
  %361 = sqrt(%360) /* ty=Tensor[(2, 14, 7), float32] */;
  (%361,)
}

def @func_659(%var_657: Tensor[(10, 16, 4), float32], %var_658: Tensor[(30), float64]) -> (Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) {
  @func_655(%var_657, %var_658) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */
}

def @func_5936(%var_5934: Tensor[(640), float32], %var_5935: Tensor[(30), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(10, 16, 4), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) {
  @func_5932(%var_5934, %var_5935) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(10, 16, 4), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */
}

def @func_1726(%var_1696: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(5, 6), float64], Tensor[(640), float32]) {
  %362 = cast(%var_1696, dtype="float32") /* ty=Tensor[(640), float32] */;
  %363 = reshape(%362, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %364 = @func_1000(%363) /* ty=(Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) */;
  %365 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  %366 = %364.3;
  (%365, %366, %var_1696)
}

def @func_5829() -> (Tensor[(3, 10, 13), bool],) {
  @func_5827() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_3719() -> (Tensor[(3, 10, 13), bool],) {
  %367 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  (%367,)
}

def @func_6304(%var_6301: Tensor[(312), bool], %var_6302: Tensor[(13, 2, 12), float32], %var_6303: Tensor[(1568), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(312), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), uint32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1820), float32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) {
  %393 = fn (%var_6209: Tensor[(312), bool], %var_6222: Tensor[(13, 2, 12), float32], %var_6258: Tensor[(1568), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(312), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), uint32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1820), float32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) {
    %368 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %369 = @func_4533() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %370 = cast(%var_6209, dtype="bool") /* ty=Tensor[(312), bool] */;
    %371 = reshape(%370, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
    %372 = @func_708(%371) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
    %373 = %372.1;
    %374 = cast(%var_6222, dtype="uint32") /* ty=Tensor[(13, 2, 12), uint32] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
    %376 = cast(%373, dtype="uint32") /* ty=Tensor[(13, 2, 12), uint32] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %378 = @func_5333() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %379 = cast(meta[relay.Constant][18] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %380 = reshape(%379, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
    %381 = @func_3274(%380) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
    %382 = cast(%var_6258, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %383 = reshape(%382, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %384 = @func_5316(%383) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
    %385 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %386 = %368.0;
    %387 = %369.0;
    %388 = maximum(%376, %377) /* ty=Tensor[(13, 2, 12), uint32] */;
    %389 = %378.0;
    %390 = %381.1;
    %391 = %384.3;
    %392 = %385.0;
    (%386, %var_6209, %387, %388, %389, %390, meta[relay.Constant][18] /* ty=Tensor[(1820), float32] */, %391, %var_6258, %392)
  };
  %393(%var_6301, %var_6302, %var_6303) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(312), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), uint32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1820), float32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) */
}

def @func_6946() -> Tensor[(3, 10, 13), bool] {
  @func_6944() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_2279() -> Tensor[(3, 10, 13), bool] {
  %394 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %394.0
}

def @func_6991(%var_6989: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), float64],) {
  @func_6988(%var_6989) /* ty=(Tensor[(13, 2, 13), float64],) */
}

def @func_7568(%var_7567: Tensor[(375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(756), uint32], Tensor[(375), float64]) {
  %405 = fn (%var_7559: Tensor[(375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(756), uint32], Tensor[(375), float64]) {
    %395 = @func_6629() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %396 = cast(%var_7559, dtype="float32") /* ty=Tensor[(375), float32] */;
    %397 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %398 = reshape(%396, newshape=[375]) /* ty=Tensor[(375), float32] */;
    %399 = reshape(%397, newshape=[756]) /* ty=Tensor[(756), uint32] */;
    %400 = @func_4082(%398, %399) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) */;
    %401 = cast(%var_7559, dtype="float64") /* ty=Tensor[(375), float64] */;
    %402 = %395.0;
    %403 = %400.6;
    %404 = asin(%401) /* ty=Tensor[(375), float64] */;
    (%402, %403, meta[relay.Constant][19] /* ty=Tensor[(756), uint32] */, %404)
  };
  %405(%var_7567) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(756), uint32], Tensor[(375), float64]) */
}

def @func_2733(%var_2731: Tensor[(3, 10, 13), bool], %var_2732: Tensor[(3, 10, 13), float32]) -> (Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) {
  %444 = fn (%var_2640: Tensor[(3, 10, 13), bool], %var_2692: Tensor[(3, 10, 13), float32]) -> (Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) {
    %406 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
    %407 = cast(%var_2640, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%406, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %411 = cast(meta[relay.Constant][20] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
    %412 = reshape(%411, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
    %413 = @func_708(%412) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
    %414 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %415 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %416 = reshape(%414, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
    %417 = reshape(%415, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
    %418 = @func_456(%416, %417) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */;
    %419 = %418.2;
    %420 = cast(%419, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
    %421 = cast(meta[relay.Constant][20] /* ty=Tensor[(312), bool] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %422 = cast(%406, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %423 = rsqrt(%422) /* ty=Tensor[(3, 10, 13), float32] */;
    %424 = cast(%var_2692, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%423, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %428 = cast(meta[relay.Constant][22] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
    %429 = reshape(%428, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
    %430 = @func_146(%429) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
    %431 = cast(%419, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
    %432 = cast(%419, dtype="float32") /* ty=Tensor[(1820, 1), float32] */;
    %433 = reshape(%431, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
    %434 = reshape(%432, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
    %435 = add(%409, %410) /* ty=Tensor[(3, 10, 13), float32] */;
    %436 = %413.1;
    %437 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %438 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %439 = subtract(%420, %421) /* ty=Tensor[(1820, 312), float32] */;
    %440 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
    %441 = divide(%426, %427) /* ty=Tensor[(3, 10, 13), float32] */;
    %442 = %430.0;
    %443 = @func_336(%433, %434) /* ty=Tensor[(13, 10, 14), float32] */;
    (%435, %436, %437, %438, meta[relay.Constant][21] /* ty=Tensor[(756), uint32] */, %439, %440, %441, %442, meta[relay.Constant][22] /* ty=Tensor[(330), float64] */, %443)
  };
  %444(%var_2731, %var_2732) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) */
}

def @func_4372() -> Tensor[(3, 10, 13), bool] {
  @func_4370() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_5000() -> Tensor[(3, 10, 13), bool] {
  %446 = fn () -> Tensor[(3, 10, 13), bool] {
    %445 = @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %445.0
  };
  %446() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_6685(%var_6668: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(640), float32], Tensor[(30), float64]) {
  %447 = @func_4606() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %448 = cast(%var_6668, dtype="float32") /* ty=Tensor[(640), float32] */;
  %449 = cast(meta[relay.Constant][23] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %450 = reshape(%448, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %451 = reshape(%449, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %452 = @func_3801(%450, %451) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30), float64]) */;
  %453 = %447.0;
  %454 = %452.3;
  (%453, %454, %var_6668, meta[relay.Constant][23] /* ty=Tensor[(30), float64] */)
}

def @func_4632(%var_4631: Tensor[(3, 10, 13), bool]) -> Tensor[(3, 10, 13), int64] {
  %461 = fn (%var_4623: Tensor[(3, 10, 13), bool]) -> Tensor[(3, 10, 13), int64] {
    %455 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %456 = %455.0;
    %457 = cast(%var_4623, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
    %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %459 = cast(%456, dtype="int64") /* ty=Tensor[(3, 10, 13), int64] */;
    %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    bitwise_and(%459, %460) /* ty=Tensor[(3, 10, 13), int64] */
  };
  %461(%var_4631) /* ty=Tensor[(3, 10, 13), int64] */
}

def @func_3643() -> (Tensor[(420), uint32], Tensor[(5, 84), uint32], Tensor[(3, 10, 13), uint16]) {
  %473 = fn () -> (Tensor[(420), uint32], Tensor[(5, 84), uint32], Tensor[(3, 10, 13), uint16]) {
    %462 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 84), uint32] */, dtype="uint32") /* ty=Tensor[(5, 84), uint32] */;
    %463 = reshape(%462, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %464 = @func_3407(%463) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) */;
    %465 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
    %466 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
    %467 = cast(%466, dtype="uint16") /* ty=Tensor[(3, 10, 13), uint16] */;
    %468 = shape_of(%465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %469 = cast(%465, dtype="uint16") /* ty=Tensor[(3, 10, 13), uint16] */;
    %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %471 = %464.2;
    %472 = subtract(%469, %470) /* ty=Tensor[(3, 10, 13), uint16] */;
    (%471, meta[relay.Constant][24] /* ty=Tensor[(5, 84), uint32] */, %472)
  };
  %473() /* ty=(Tensor[(420), uint32], Tensor[(5, 84), uint32], Tensor[(3, 10, 13), uint16]) */
}

def @func_1897(%var_1882: Tensor[(312), bool], %var_1884: Tensor[(196), float32], %var_1886: Tensor[(125, 3), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  %474 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %475 = cast(%var_1882, dtype="bool") /* ty=Tensor[(312), bool] */;
  %476 = cast(meta[relay.Constant][25] /* ty=Tensor[(125, 3), float32] */, dtype="float32") /* ty=Tensor[(125, 3), float32] */;
  %477 = cast(%var_1884, dtype="float32") /* ty=Tensor[(196), float32] */;
  %478 = reshape(%475, newshape=[1, 312]) /* ty=Tensor[(1, 312), bool] */;
  %479 = reshape(%476, newshape=[375]) /* ty=Tensor[(375), float32] */;
  %480 = reshape(%477, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %481 = @func_1670(%478, %479, %480) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */;
  %482 = cast(%var_1886, dtype="float32") /* ty=Tensor[(125, 3), float32] */;
  %483 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(125, 3), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %484 = cast(meta[relay.Constant][25] /* ty=Tensor[(125, 3), float32] */, dtype="float32") /* ty=Tensor[(125, 3), float32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %486 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %487 = cast(meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %488 = reshape(%486, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %489 = reshape(%487, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %490 = %474.0;
  %491 = %481.8;
  %492 = maximum(%484, %485) /* ty=Tensor[(125, 3), float32] */;
  %493 = @func_336(%488, %489) /* ty=Tensor[(13, 10, 14), float32] */;
  (%490, %491, %var_1882, %var_1884, %492, %493, meta[relay.Constant][26] /* ty=Tensor[(1820), float32] */)
}

def @func_4523() -> (Tensor[(3, 10, 13), bool],) {
  %494 = @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */;
  %495 = %494.0;
  (%495,)
}

def @func_2866(%var_2864: Tensor[(20, 32), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) {
  @func_2863(%var_2864) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */
}

def @func_5932(%var_5912: Tensor[(640), float32], %var_5925: Tensor[(30), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(10, 16, 4), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) {
  %496 = @func_4112() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %497 = cast(%var_5912, dtype="float32") /* ty=Tensor[(640), float32] */;
  %498 = reshape(%497, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %499 = @func_2863(%498) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
  %500 = cast(%var_5912, dtype="float32") /* ty=Tensor[(640), float32] */;
  %501 = cast(%var_5925, dtype="float64") /* ty=Tensor[(30), float64] */;
  %502 = reshape(%500, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %503 = reshape(%501, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %504 = @func_655(%502, %503) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %505 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %506 = %496.1;
  %507 = %499.0;
  %508 = %504.5;
  %509 = %505.0;
  (%506, %507, %var_5912, %508, %var_5925, %509)
}

def @func_4150() -> Tensor[(3, 10, 13), bool] {
  %510 = fn () -> Tensor[(3, 10, 13), bool] {
    @func_1495() /* ty=Tensor[(3, 10, 13), bool] */
  };
  %510() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_5601() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %515 = fn () -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
    %511 = @func_4606() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %512 = @func_3840() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
    %513 = %511.0;
    %514 = %512.0;
    (%513, %514)
  };
  %515() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_7248() -> Tensor[(3, 10, 13), bool] {
  @func_7246() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_7078() -> Tensor[(3, 10, 13), bool] {
  %517 = fn () -> Tensor[(3, 10, 13), bool] {
    %516 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %516.0
  };
  %517() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_4540() -> (Tensor[(3, 10, 13), bool],) {
  %518 = @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %519 = %518.0;
  (%519,)
}

def @func_6765(%var_6748: Tensor[(1820), float32]) -> (Tensor[(756), uint32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) {
  %520 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %521 = cast(%var_6748, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %522 = reshape(%521, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %523 = @func_3274(%522) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %524 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %525 = %520.4;
  %526 = %523.2;
  %527 = %524.3;
  (%525, %526, %var_6748, %527)
}

def @func_3911(%var_3909: Tensor[(1820), float32]) -> (Tensor[(30), float64], Tensor[(11, 5, 6), bool], Tensor[(7, 28), float32], Tensor[(330, 1), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  %528 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %529 = cast(meta[relay.Constant][27] /* ty=Tensor[(330, 1), float64] */, dtype="float64") /* ty=Tensor[(330, 1), float64] */;
  %530 = reshape(%529, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %531 = @func_146(%530) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %532 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
  %533 = cast(meta[relay.Constant][27] /* ty=Tensor[(330, 1), float64] */, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
  %534 = erf(%533) /* ty=Tensor[(330, 1), float32] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(330, 1), float32] */;
  %536 = cast(%var_3909, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %537 = reshape(%536, newshape=[1820]) /* ty=Tensor[(1820), float32] */;
  %538 = @func_3274(%537) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %539 = %528.2;
  %540 = %531.0;
  %541 = %532.3;
  %542 = log10(%535) /* ty=Tensor[(330, 1), float32] */;
  %543 = %538.2;
  (%539, %540, %541, %542, %543, %var_3909)
}

def @func_4114() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  @func_4112() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_4370() -> Tensor[(3, 10, 13), bool] {
  @func_1495() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_6849() -> (Tensor[(3, 10, 13), bool],) {
  %544 = @func_6079() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %545 = %544.1;
  (%545,)
}

def @func_4862(%var_4858: Tensor[(312), bool]) -> (Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), bool], Tensor[(312), bool]) {
  %546 = cast(%var_4858, dtype="bool") /* ty=Tensor[(312), bool] */;
  %547 = reshape(%546, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %548 = @func_708(%547) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %549 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  %550 = %548.0;
  (%549, %550, %var_4858)
}

def @func_7757() -> (Tensor[(3, 10, 13), bool],) {
  %551 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %552 = %551.0;
  (%552,)
}

def @func_2994() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) {
  %553 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
  %554 = cast(%553, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %555 = cast(%553, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %556 = reshape(%554, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %557 = reshape(%555, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), float32] */;
  %558 = @func_2730(%556, %557) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) */;
  %559 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
  %560 = reshape(%559, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %561 = @func_205(%560) /* ty=(Tensor[(2, 14, 7), float32],) */;
  %562 = cast(%553, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %563 = %558.0;
  %564 = cast(%563, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %565 = reshape(%562, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), bool] */;
  %566 = reshape(%564, newshape=[3, 10, 13]) /* ty=Tensor[(3, 10, 13), float32] */;
  %567 = @func_2730(%565, %566) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(1820, 312), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(13, 10, 14), float32]) */;
  %568 = %561.0;
  %569 = %567.4;
  %570 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  (%553, %563, %568, meta[relay.Constant][28] /* ty=Tensor[(7, 28), float32] */, %569, %570)
}

def @func_5066(%var_5064: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(640), float32]) {
  %571 = @func_4791() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %572 = cast(%var_5064, dtype="float32") /* ty=Tensor[(640), float32] */;
  %573 = reshape(%572, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
  %574 = @func_2863(%573) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
  %575 = %571.0;
  %576 = %574.1;
  (%575, %576, %var_5064)
}

def @func_6468(%var_6467: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(756), uint32]) {
  %585 = fn (%var_6447: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(756), uint32]) {
    %577 = @func_6079() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
    %578 = cast(meta[relay.Constant][29] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %579 = cast(%var_6447, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %580 = reshape(%578, newshape=[375]) /* ty=Tensor[(375), float32] */;
    %581 = reshape(%579, newshape=[756]) /* ty=Tensor[(756), uint32] */;
    %582 = @func_4082(%580, %581) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) */;
    %583 = %577.0;
    %584 = %582.6;
    (%583, %584, meta[relay.Constant][29] /* ty=Tensor[(375), float32] */, %var_6447)
  };
  %585(%var_6467) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(375), float32], Tensor[(756), uint32]) */
}

def @func_3721() -> (Tensor[(3, 10, 13), bool],) {
  @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_5533(%var_5436: Tensor[(13, 9, 8), int32], %var_5446: Tensor[(32), float64]) -> (Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32], Tensor[(13, 2, 12), float32], Tensor[(13, 9, 8), float32], Tensor[(13, 9, 8), float32], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) {
  %586 = cast(meta[relay.Constant][30] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %587 = cast(meta[relay.Constant][31] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
  %588 = cast(meta[relay.Constant][32] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %589 = cast(%var_5446, dtype="float64") /* ty=Tensor[(32), float64] */;
  %590 = cast(meta[relay.Constant][33] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %591 = reshape(%586, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %592 = reshape(%587, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
  %593 = reshape(%588, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %594 = reshape(%589, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
  %595 = reshape(%590, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %596 = @func_2428(%591, %592, %593, %594, %595) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
  %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %598 = reshape(%597, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %599 = @func_708(%598) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %600 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 9, 8), int32] */, dtype="int32") /* ty=Tensor[(13, 9, 8), int32] */;
  %601 = shape_of(%var_5436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_5436, dtype="int32") /* ty=Tensor[(13, 9, 8), int32] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %604 = minimum(%602, %603) /* ty=Tensor[(13, 9, 8), int32] */;
  %605 = cast(%var_5436, dtype="float32") /* ty=Tensor[(13, 9, 8), float32] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="float32") /* ty=Tensor[(13, 9, 8), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %609 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 9, 8), int32] */, dtype="float32") /* ty=Tensor[(13, 9, 8), float32] */;
  %610 = @func_3719() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %611 = cast(meta[relay.Constant][35] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
  %612 = reshape(%611, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %613 = @func_383(%612) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %614 = %596.5;
  %615 = %599.1;
  %616 = floor_mod(%607, %608) /* ty=Tensor[(13, 9, 8), float32] */;
  %617 = asinh(%609) /* ty=Tensor[(13, 9, 8), float32] */;
  %618 = %610.0;
  %619 = %613.0;
  (%614, meta[relay.Constant][30] /* ty=Tensor[(312), bool] */, meta[relay.Constant][31] /* ty=Tensor[(375), float32] */, meta[relay.Constant][32] /* ty=Tensor[(196), float32] */, %var_5446, meta[relay.Constant][33] /* ty=Tensor[(756), uint32] */, %615, %616, %617, %618, %619, meta[relay.Constant][35] /* ty=Tensor[(30), float64] */)
}

def @func_385(%var_384: Tensor[(5, 2, 3), float64]) -> (Tensor[(5, 2, 3), float64],) {
  %622 = fn (%var_375: Tensor[(5, 2, 3), float64]) -> (Tensor[(5, 2, 3), float64],) {
    %620 = cast(%var_375, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
    %621 = rsqrt(%620) /* ty=Tensor[(5, 2, 3), float64] */;
    (%621,)
  };
  %622(%var_384) /* ty=(Tensor[(5, 2, 3), float64],) */
}

def @func_5827() -> (Tensor[(3, 10, 13), bool],) {
  %623 = @func_3524() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool]) */;
  %624 = %623.3;
  (%624,)
}

def @func_7246() -> Tensor[(3, 10, 13), bool] {
  @func_7077() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_6901() -> (Tensor[(3, 10, 13), bool],) {
  %627 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %625 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %626 = %625.0;
    (%626,)
  };
  %627() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_655(%var_609: Tensor[(10, 16, 4), float32], %var_630: Tensor[(30), float64]) -> (Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) {
  %628 = cast(%var_630, dtype="float64") /* ty=Tensor[(30), float64] */;
  %629 = reshape(%628, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %630 = @func_383(%629) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %631 = cast(%var_609, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %632 = sqrt(%631) /* ty=Tensor[(10, 16, 4), float32] */;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %634 = cast(meta[relay.Constant][36] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %635 = reshape(%634, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %636 = @func_146(%635) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %637 = cast(%632, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %638 = log(%637) /* ty=Tensor[(10, 16, 4), float32] */;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(10, 16, 4), float32] */;
  %640 = log2(%639) /* ty=Tensor[(10, 16, 4), float32] */;
  %641 = cast(%640, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %642 = %630.0;
  %643 = atanh(%633) /* ty=Tensor[(10, 16, 4), float32] */;
  %644 = %636.2;
  %645 = asin(%641) /* ty=Tensor[(10, 16, 4), float64] */;
  (%642, %var_630, %643, %644, meta[relay.Constant][36] /* ty=Tensor[(330), float64] */, %645)
}

def @func_6768(%var_6766: Tensor[(1820), float32]) -> (Tensor[(756), uint32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) {
  @func_6765(%var_6766) /* ty=(Tensor[(756), uint32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(3, 10, 13), bool]) */
}

def @func_4542() -> (Tensor[(3, 10, 13), bool],) {
  @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_4513() -> Tensor[(3, 10, 13), bool] {
  @func_4511() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_336(%var_330: Tensor[(13, 10, 14), float32], %var_331: Tensor[(13, 10, 14), float32]) -> Tensor[(13, 10, 14), float32] {
  %646 = cast(%var_331, dtype="float32") /* ty=Tensor[(13, 10, 14), float32] */;
  %647 = shape_of(%var_330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%var_330, dtype="float32") /* ty=Tensor[(13, 10, 14), float32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%648, %649) /* ty=Tensor[(13, 10, 14), float32] */
}

def @func_6688(%var_6686: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(640), float32], Tensor[(30), float64]) {
  @func_6685(%var_6686) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(640), float32], Tensor[(640), float32], Tensor[(30), float64]) */
}

def @func_2281() -> Tensor[(3, 10, 13), bool] {
  @func_2279() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_7596() -> (Tensor[(3, 10, 13), bool], Tensor[(5, 84), uint32]) {
  @func_7594() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(5, 84), uint32]) */
}

def @func_6381(%var_6379: Tensor[(7, 28), float32], %var_6380: Tensor[(7, 28), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 28), bool], Tensor[(7, 28), bool], Tensor[(7, 28), float32]) {
  @func_6377(%var_6379, %var_6380) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 28), bool], Tensor[(7, 28), bool], Tensor[(7, 28), float32]) */
}

def @func_4726() -> (Tensor[(5, 84), float64], Tensor[(3, 10, 13), bool]) {
  %656 = fn () -> (Tensor[(5, 84), float64], Tensor[(3, 10, 13), bool]) {
    %650 = @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */;
    %651 = %650.2;
    %652 = cast(%651, dtype="float64") /* ty=Tensor[(5, 84), float64] */;
    %653 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %654 = acosh(%652) /* ty=Tensor[(5, 84), float64] */;
    %655 = %653.0;
    (%654, %655)
  };
  %656() /* ty=(Tensor[(5, 84), float64], Tensor[(3, 10, 13), bool]) */
}

def @func_5871() -> (Tensor[(3, 10, 13), bool],) {
  %657 = @func_4409() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %658 = %657.0;
  (%658,)
}

def @func_7903() -> Tensor[(3, 10, 13), bool] {
  @func_7901() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_1469() -> (Tensor[(3, 10, 13), bool],) {
  %660 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %659 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
    (%659,)
  };
  %660() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_7513(%var_7511: Tensor[(1568), float64], %var_7512: Tensor[(26, 13), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(14, 7, 16), float64], Tensor[(13, 2, 13), float64], Tensor[(26, 13), float64]) {
  %679 = fn (%var_7474: Tensor[(1568), float64], %var_7505: Tensor[(26, 13), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(14, 7, 16), float64], Tensor[(13, 2, 13), float64], Tensor[(26, 13), float64]) {
    %661 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %662 = @func_5600() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
    %663 = cast(%var_7474, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %664 = cast(%var_7474, dtype="float32") /* ty=Tensor[(1568), float32] */;
    %665 = cast(%var_7474, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %666 = reshape(%663, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
    %667 = reshape(%664, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float32] */;
    %668 = reshape(%665, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
    %669 = @func_4282(%666, %667, %668) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */;
    %670 = %669.1;
    %671 = cast(%670, dtype="float64") /* ty=Tensor[(14, 7, 16), float64] */;
    %672 = cast(%var_7505, dtype="float64") /* ty=Tensor[(26, 13), float64] */;
    %673 = reshape(%672, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
    %674 = @func_6988(%673) /* ty=(Tensor[(13, 2, 13), float64],) */;
    %675 = %661.0;
    %676 = %662.0;
    %677 = sqrt(%671) /* ty=Tensor[(14, 7, 16), float64] */;
    %678 = %674.0;
    (%675, %676, %var_7474, %677, %678, %var_7505)
  };
  %679(%var_7511, %var_7512) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(14, 7, 16), float64], Tensor[(13, 2, 13), float64], Tensor[(26, 13), float64]) */
}

def @func_3680() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) {
  %680 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 84), uint32] */, dtype="uint32") /* ty=Tensor[(5, 84), uint32] */;
  %681 = reshape(%680, newshape=[420]) /* ty=Tensor[(420), uint32] */;
  %682 = @func_3407(%681) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) */;
  %683 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %684 = %682.3;
  (%683, %684, meta[relay.Constant][37] /* ty=Tensor[(5, 84), uint32] */)
}

def @func_6851() -> (Tensor[(3, 10, 13), bool],) {
  @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_7276(%var_7274: Tensor[(9, 14, 10), int32], %var_7275: Tensor[(9, 14, 10), int32]) -> (Tensor[(9, 14, 10), int32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) {
  %699 = fn (%var_7252: Tensor[(9, 14, 10), int32], %var_7253: Tensor[(9, 14, 10), int32]) -> (Tensor[(9, 14, 10), int32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) {
    %685 = cast(%var_7253, dtype="int32") /* ty=Tensor[(9, 14, 10), int32] */;
    %686 = shape_of(%var_7252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%var_7252, dtype="int32") /* ty=Tensor[(9, 14, 10), int32] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %689 = cast(meta[relay.Constant][38] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %690 = cast(meta[relay.Constant][38] /* ty=Tensor[(1568), float64] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
    %691 = cast(meta[relay.Constant][38] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %692 = reshape(%689, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
    %693 = reshape(%690, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float32] */;
    %694 = reshape(%691, newshape=[14, 7, 16]) /* ty=Tensor[(14, 7, 16), float64] */;
    %695 = @func_4282(%692, %693, %694) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(14, 7, 16), bool], Tensor[(14, 7, 16), float32]) */;
    %696 = logical_xor(%687, %688) /* ty=Tensor[(9, 14, 10), int32] */;
    %697 = %695.0;
    %698 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
    (%696, %697, meta[relay.Constant][38] /* ty=Tensor[(1568), float64] */, %698)
  };
  %699(%var_7274, %var_7275) /* ty=(Tensor[(9, 14, 10), int32], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool]) */
}

def @func_4094() -> (Tensor[(3, 10, 13), bool],) {
  %701 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %700 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
    (%700,)
  };
  %701() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_1670(%var_1567: Tensor[(1, 312), bool], %var_1632: Tensor[(375), float32], %var_1651: Tensor[(196), float32]) -> (Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) {
  %702 = cast(meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %703 = cast(meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, dtype="float32") /* ty=Tensor[(1820), float32] */;
  %704 = reshape(%702, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %705 = reshape(%703, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
  %706 = cast(meta[relay.Constant][40] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %707 = reshape(%706, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %708 = @func_1000(%707) /* ty=(Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) */;
  %709 = cast(%var_1632, dtype="float32") /* ty=Tensor[(375), float32] */;
  %710 = cast(%var_1632, dtype="float32") /* ty=Tensor[(375), float32] */;
  %711 = cast(meta[relay.Constant][40] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %712 = reshape(%709, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %713 = reshape(%710, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %714 = reshape(%711, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %715 = @func_889(%712, %713, %714) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
  %716 = %708.1;
  %717 = cast(%716, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %718 = reshape(%717, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %719 = @func_146(%718) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %720 = cast(%var_1651, dtype="float32") /* ty=Tensor[(196), float32] */;
  %721 = reshape(%720, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
  %722 = @func_205(%721) /* ty=(Tensor[(2, 14, 7), float32],) */;
  %723 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %726 = log(%725) /* ty=Tensor[(3, 10, 13), float32] */;
  %727 = cast(%726, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %728 = tan(%727) /* ty=Tensor[(3, 10, 13), float32] */;
  %729 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %730 = %729.0;
  %731 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %732 = %731.0;
  %733 = cast(%732, dtype="uint8") /* ty=Tensor[(3, 10, 13), uint8] */;
  %734 = shape_of(%730, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%730, dtype="uint8") /* ty=Tensor[(3, 10, 13), uint8] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %737 = maximum(%735, %736) /* ty=Tensor[(3, 10, 13), uint8] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %739 = shape_of(%728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%728, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %742 = cast(%var_1567, dtype="bool") /* ty=Tensor[(1, 312), bool] */;
  %743 = reshape(%742, newshape=[13, 2, 12]) /* ty=Tensor[(13, 2, 12), bool] */;
  %744 = @func_708(%743) /* ty=(Tensor[(13, 2, 12), bool], Tensor[(13, 2, 12), float32]) */;
  %745 = %744.1;
  %746 = cast(%745, dtype="float32") /* ty=Tensor[(13, 2, 12), float32] */;
  %747 = @func_336(%704, %705) /* ty=Tensor[(13, 10, 14), float32] */;
  %748 = %715.2;
  %749 = %719.1;
  %750 = %722.0;
  %751 = floor_divide(%740, %741) /* ty=Tensor[(3, 10, 13), float32] */;
  %752 = sin(%746) /* ty=Tensor[(13, 2, 12), float32] */;
  (%var_1567, %747, meta[relay.Constant][39] /* ty=Tensor[(1820), float32] */, %716, meta[relay.Constant][40] /* ty=Tensor[(160, 4), float32] */, %748, %var_1632, %749, %750, %var_1651, %751, %752)
}

def @func_2863(%var_2854: Tensor[(20, 32), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) {
  %753 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 75), float32] */, dtype="float32") /* ty=Tensor[(5, 75), float32] */;
  %754 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 75), float32] */, dtype="float32") /* ty=Tensor[(5, 75), float32] */;
  %755 = cast(meta[relay.Constant][42] /* ty=Tensor[(20, 32), float32] */, dtype="float32") /* ty=Tensor[(20, 32), float32] */;
  %756 = reshape(%753, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %757 = reshape(%754, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
  %758 = reshape(%755, newshape=[640]) /* ty=Tensor[(640), float32] */;
  %759 = @func_889(%756, %757, %758) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
  %760 = cast(meta[relay.Constant][43] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %761 = reshape(%760, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
  %762 = @func_383(%761) /* ty=(Tensor[(5, 2, 3), float64],) */;
  %763 = cast(%var_2854, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %764 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(20, 32), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %765 = cast(meta[relay.Constant][42] /* ty=Tensor[(20, 32), float32] */, dtype="bool") /* ty=Tensor[(20, 32), bool] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %767 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  %768 = %759.6;
  %769 = %762.0;
  %770 = logical_or(%765, %766) /* ty=Tensor[(20, 32), bool] */;
  (%767, %768, meta[relay.Constant][41] /* ty=Tensor[(5, 75), float32] */, %769, meta[relay.Constant][43] /* ty=Tensor[(30, 1), float64] */, %770)
}

def @func_4086(%var_4084: Tensor[(375), float32], %var_4085: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) {
  @func_4082(%var_4084, %var_4085) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) */
}

def @func_4112() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %771 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
  %772 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  (%771, %772)
}

def @func_460(%var_458: Tensor[(9, 6, 14), uint32], %var_459: Tensor[(9, 6, 14), uint32]) -> (Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) {
  @func_456(%var_458, %var_459) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */
}

def @func_6830() -> Tensor[(3, 10, 13), bool] {
  %774 = fn () -> Tensor[(3, 10, 13), bool] {
    %773 = @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %773.0
  };
  %774() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_208(%var_206: Tensor[(2, 14, 7), float32]) -> (Tensor[(2, 14, 7), float32],) {
  @func_205(%var_206) /* ty=(Tensor[(2, 14, 7), float32],) */
}

def @func_1199(%var_1197: Tensor[(7, 6, 10), uint32], %var_1198: Tensor[(7, 6, 10), uint32]) -> (Tensor[(7, 6, 10), uint32],) {
  @func_1195(%var_1197, %var_1198) /* ty=(Tensor[(7, 6, 10), uint32],) */
}

def @func_5069(%var_5067: Tensor[(640), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(640), float32]) {
  @func_5066(%var_5067) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(640), float32]) */
}

def @func_3914(%var_3912: Tensor[(1820), float32]) -> (Tensor[(30), float64], Tensor[(11, 5, 6), bool], Tensor[(7, 28), float32], Tensor[(330, 1), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  @func_3911(%var_3912) /* ty=(Tensor[(30), float64], Tensor[(11, 5, 6), bool], Tensor[(7, 28), float32], Tensor[(330, 1), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */
}

def @func_4534() -> (Tensor[(3, 10, 13), bool],) {
  %777 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %775 = @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %776 = %775.0;
    (%776,)
  };
  %777() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_3562() -> (Tensor[(3, 10, 13), bool],) {
  @func_3560() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_1195(%var_1182: Tensor[(7, 6, 10), uint32], %var_1183: Tensor[(7, 6, 10), uint32]) -> (Tensor[(7, 6, 10), uint32],) {
  %778 = cast(%var_1183, dtype="uint32") /* ty=Tensor[(7, 6, 10), uint32] */;
  %779 = shape_of(%var_1182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%var_1182, dtype="uint32") /* ty=Tensor[(7, 6, 10), uint32] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %782 = bitwise_xor(%780, %781) /* ty=Tensor[(7, 6, 10), uint32] */;
  (%782,)
}

def @func_340(%var_338: Tensor[(13, 10, 14), float32], %var_339: Tensor[(13, 10, 14), float32]) -> Tensor[(13, 10, 14), float32] {
  @func_336(%var_338, %var_339) /* ty=Tensor[(13, 10, 14), float32] */
}

def @func_7368(%var_7366: Tensor[(338), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) {
  @func_7365(%var_7366) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) */
}

def @func_5537(%var_5535: Tensor[(13, 9, 8), int32], %var_5536: Tensor[(32), float64]) -> (Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32], Tensor[(13, 2, 12), float32], Tensor[(13, 9, 8), float32], Tensor[(13, 9, 8), float32], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) {
  @func_5533(%var_5535, %var_5536) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32], Tensor[(13, 2, 12), float32], Tensor[(13, 9, 8), float32], Tensor[(13, 9, 8), float32], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) */
}

def @func_4409() -> (Tensor[(3, 10, 13), bool],) {
  %783 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
  (%783,)
}

def @func_6944() -> Tensor[(3, 10, 13), bool] {
  @func_4999() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_7132() -> Tensor[(3, 10, 13), bool] {
  %785 = fn () -> Tensor[(3, 10, 13), bool] {
    %784 = @func_4533() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %784.0
  };
  %785() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_3276(%var_3275: Tensor[(1820), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  %794 = fn (%var_3268: Tensor[(1820), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
    %786 = @func_2994() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(2, 14, 7), float32], Tensor[(7, 28), float32], Tensor[(756), uint32], Tensor[(3, 10, 13), bool]) */;
    %787 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %788 = cast(%var_3268, dtype="float32") /* ty=Tensor[(1820), float32] */;
    %789 = reshape(%787, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
    %790 = reshape(%788, newshape=[13, 10, 14]) /* ty=Tensor[(13, 10, 14), float32] */;
    %791 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
    %792 = %786.5;
    %793 = @func_336(%789, %790) /* ty=Tensor[(13, 10, 14), float32] */;
    (%791, %792, %793, %var_3268)
  };
  %794(%var_3275) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */
}

def @func_4978(%var_4975: Tensor[(13, 3, 15), float64], %var_4976: Tensor[(13, 3, 15), float64], %var_4977: Tensor[(30), float64]) -> (Tensor[(13, 3, 15), float32], Tensor[(11, 5, 6), uint32], Tensor[(640), float32], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) {
  %813 = fn (%var_4929: Tensor[(13, 3, 15), float64], %var_4930: Tensor[(13, 3, 15), float64], %var_4971: Tensor[(30), float64]) -> (Tensor[(13, 3, 15), float32], Tensor[(11, 5, 6), uint32], Tensor[(640), float32], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) {
    %795 = cast(%var_4930, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
    %796 = shape_of(%var_4929, dtype="int32") /* ty=Tensor[(3), int32] */;
    %797 = cast(%var_4929, dtype="float64") /* ty=Tensor[(13, 3, 15), float64] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %799 = mod(%797, %798) /* ty=Tensor[(13, 3, 15), float64] */;
    %800 = cast(meta[relay.Constant][44] /* ty=Tensor[(13, 3, 15), float64] */, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%799, dtype="float32") /* ty=Tensor[(13, 3, 15), float32] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %804 = cast(meta[relay.Constant][45] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %805 = reshape(%804, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
    %806 = @func_2863(%805) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
    %807 = cast(%var_4971, dtype="float64") /* ty=Tensor[(30), float64] */;
    %808 = reshape(%807, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
    %809 = @func_383(%808) /* ty=(Tensor[(5, 2, 3), float64],) */;
    %810 = floor_mod(%802, %803) /* ty=Tensor[(13, 3, 15), float32] */;
    %811 = %806.1;
    %812 = %809.0;
    (%810, %811, meta[relay.Constant][45] /* ty=Tensor[(640), float32] */, %812, %var_4971)
  };
  %813(%var_4975, %var_4976, %var_4977) /* ty=(Tensor[(13, 3, 15), float32], Tensor[(11, 5, 6), uint32], Tensor[(640), float32], Tensor[(5, 2, 3), float64], Tensor[(30), float64]) */
}

def @func_3682() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) {
  @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */
}

def @main(%var_8015: Tensor[(196), float32], %var_8016: Tensor[(1, 375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(?, 375), int32]) {
  %814 = @func_4114() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
  %815 = cast(meta[relay.Constant][46] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %816 = cast(%var_8015, dtype="float32") /* ty=Tensor[(196), float32] */;
  %817 = cast(%var_8016, dtype="float32") /* ty=Tensor[(1, 375), float32] */;
  %818 = reshape(%815, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %819 = reshape(%816, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %820 = reshape(%817, newshape=[125, 3]) /* ty=Tensor[(125, 3), float32] */;
  %821 = @func_1902(%818, %819, %820) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */;
  %822 = cast(%var_8016, dtype="float64") /* ty=Tensor[(1, 375), float64] */;
  %823 = rsqrt(%822) /* ty=Tensor[(1, 375), float64] */;
  %824 = cast(%823, dtype="int32") /* ty=Tensor[(1, 375), int32] */;
  %825 = shape_of(%var_8016, dtype="int32") /* ty=Tensor[(2), int32] */;
  %826 = cast(%var_8016, dtype="int32") /* ty=Tensor[(1, 375), int32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %828 = %814.1;
  %829 = %821.1;
  %830 = subtract(%826, %827) /* ty=Tensor[(?, 375), int32] */;
  (%828, %829, meta[relay.Constant][46] /* ty=Tensor[(312), bool] */, %var_8015, %830)
}

def @func_3761() -> (Tensor[(3, 10, 13), bool],) {
  @func_3759() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_1391() -> Tensor[(3, 10, 13), bool] {
  %831 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 13), float64] */;
  %832 = sin(%831) /* ty=Tensor[(3, 10, 13), float64] */;
  %833 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 10, 13), float64] */, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="bool") /* ty=Tensor[(3, 10, 13), bool] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%835, %836) /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_3842() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  @func_3840() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_7901() -> Tensor[(3, 10, 13), bool] {
  %837 = @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %837.0
}

def @func_4082(%var_4067: Tensor[(375), float32], %var_4070: Tensor[(756), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(312), bool], Tensor[(375), float32], Tensor[(196), float32], Tensor[(32), float64], Tensor[(756), uint32]) {
  %838 = cast(meta[relay.Constant][48] /* ty=Tensor[(312), bool] */, dtype="bool") /* ty=Tensor[(312), bool] */;
  %839 = cast(%var_4067, dtype="float32") /* ty=Tensor[(375), float32] */;
  %840 = cast(meta[relay.Constant][49] /* ty=Tensor[(196), float32] */, dtype="float32") /* ty=Tensor[(196), float32] */;
  %841 = cast(meta[relay.Constant][50] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %842 = cast(%var_4070, dtype="uint32") /* ty=Tensor[(756), uint32] */;
  %843 = reshape(%838, newshape=[312]) /* ty=Tensor[(312), bool] */;
  %844 = reshape(%839, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
  %845 = reshape(%840, newshape=[196]) /* ty=Tensor[(196), float32] */;
  %846 = reshape(%841, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
  %847 = reshape(%842, newshape=[756]) /* ty=Tensor[(756), uint32] */;
  %848 = @func_2428(%843, %844, %845, %846, %847) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
  %849 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
  %850 = %848.5;
  (%849, %850, meta[relay.Constant][48] /* ty=Tensor[(312), bool] */, %var_4067, meta[relay.Constant][49] /* ty=Tensor[(196), float32] */, meta[relay.Constant][50] /* ty=Tensor[(32), float64] */, %var_4070)
}

def @func_1675(%var_1672: Tensor[(1, 312), bool], %var_1673: Tensor[(375), float32], %var_1674: Tensor[(196), float32]) -> (Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) {
  @func_1670(%var_1672, %var_1673, %var_1674) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */
}

def @func_6042(%var_6040: Tensor[(338), float64]) -> (Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) {
  @func_6039(%var_6040) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) */
}

def @func_889(%var_837: Tensor[(5, 15, 5), float32], %var_838: Tensor[(5, 15, 5), float32], %var_875: Tensor[(640), float32]) -> (Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) {
  %851 = cast(meta[relay.Constant][51] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %852 = reshape(%851, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %853 = @func_146(%852) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %854 = cast(%var_838, dtype="float32") /* ty=Tensor[(5, 15, 5), float32] */;
  %855 = shape_of(%var_837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%var_837, dtype="float32") /* ty=Tensor[(5, 15, 5), float32] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %858 = power(%856, %857) /* ty=Tensor[(5, 15, 5), float32] */;
  %859 = cast(meta[relay.Constant][52] /* ty=Tensor[(5, 15, 5), float32] */, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %860 = shape_of(%858, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(%858, dtype="float64") /* ty=Tensor[(5, 15, 5), float64] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %863 = cast(%var_875, dtype="float32") /* ty=Tensor[(640), float32] */;
  %864 = cast(meta[relay.Constant][53] /* ty=Tensor[(30, 1), float64] */, dtype="float64") /* ty=Tensor[(30, 1), float64] */;
  %865 = reshape(%863, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
  %866 = reshape(%864, newshape=[30]) /* ty=Tensor[(30), float64] */;
  %867 = @func_655(%865, %866) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
  %868 = %853.2;
  %869 = cast(%868, dtype="float64") /* ty=Tensor[(11, 5, 6), float64] */;
  %870 = reshape(%869, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
  %871 = @func_146(%870) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
  %872 = divide(%861, %862) /* ty=Tensor[(5, 15, 5), float64] */;
  %873 = %867.0;
  %874 = %871.1;
  (%868, meta[relay.Constant][51] /* ty=Tensor[(330), float64] */, %872, %873, %var_875, meta[relay.Constant][53] /* ty=Tensor[(30, 1), float64] */, %874)
}

def @func_2620(%var_2615: Tensor[(420), uint32], %var_2616: Tensor[(5, 2, 3), float64], %var_2617: Tensor[(375), float32], %var_2618: Tensor[(196), float32], %var_2619: Tensor[(375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) {
  %914 = fn (%var_2546: Tensor[(420), uint32], %var_2556: Tensor[(5, 2, 3), float64], %var_2580: Tensor[(375), float32], %var_2581: Tensor[(196), float32], %var_2606: Tensor[(375), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) {
    %875 = cast(%var_2546, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %876 = reshape(%875, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %877 = @func_1863(%876) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */;
    %878 = cast(meta[relay.Constant][54] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %879 = reshape(%878, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
    %880 = @func_383(%879) /* ty=(Tensor[(5, 2, 3), float64],) */;
    %881 = %880.0;
    %882 = cast(%var_2556, dtype="bool") /* ty=Tensor[(5, 2, 3), bool] */;
    %883 = shape_of(%881, dtype="int32") /* ty=Tensor[(3), int32] */;
    %884 = cast(%881, dtype="bool") /* ty=Tensor[(5, 2, 3), bool] */;
    %885 = dyn.reshape(%882, %883, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %886 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 104), bool] */, dtype="bool") /* ty=Tensor[(3, 104), bool] */;
    %887 = cast(%var_2580, dtype="float32") /* ty=Tensor[(375), float32] */;
    %888 = cast(%var_2581, dtype="float32") /* ty=Tensor[(196), float32] */;
    %889 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 16), float64] */, dtype="float64") /* ty=Tensor[(2, 16), float64] */;
    %890 = %877.2;
    %891 = cast(%890, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %892 = reshape(%886, newshape=[312]) /* ty=Tensor[(312), bool] */;
    %893 = reshape(%887, newshape=[1, 375]) /* ty=Tensor[(1, 375), float32] */;
    %894 = reshape(%888, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %895 = reshape(%889, newshape=[1, 32]) /* ty=Tensor[(1, 32), float64] */;
    %896 = reshape(%891, newshape=[756]) /* ty=Tensor[(756), uint32] */;
    %897 = @func_2428(%892, %893, %894, %895, %896) /* ty=(Tensor[(3, 10, 13), float32], Tensor[(312), bool], Tensor[(1, 375), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(7, 6, 10), uint32], Tensor[(1, 32), float64], Tensor[(420), uint32], Tensor[(756), uint32], Tensor[(330), float64], Tensor[(13, 10, 14), float64], Tensor[(13, 10, 14), float32]) */;
    %898 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %899 = cast(%898, dtype="float32") /* ty=Tensor[(3, 10, 13), float32] */;
    %900 = cast(%var_2606, dtype="uint16") /* ty=Tensor[(375), uint16] */;
    %901 = shape_of(%var_2580, dtype="int32") /* ty=Tensor[(1), int32] */;
    %902 = cast(%var_2580, dtype="uint16") /* ty=Tensor[(375), uint16] */;
    %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %904 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %905 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
    %906 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %907 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
    %908 = not_equal(%884, %885) /* ty=Tensor[(5, 2, 3), bool] */;
    %909 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %910 = %897.8;
    %911 = sqrt(%899) /* ty=Tensor[(3, 10, 13), float32] */;
    %912 = bitwise_and(%902, %903) /* ty=Tensor[(375), uint16] */;
    %913 = %904.0;
    (%905, meta[relay.Constant][54] /* ty=Tensor[(30), float64] */, %906, %907, %890, %var_2546, %908, %909, %910, meta[relay.Constant][55] /* ty=Tensor[(3, 104), bool] */, %var_2581, meta[relay.Constant][56] /* ty=Tensor[(2, 16), float64] */, %911, %912, %913)
  };
  %914(%var_2615, %var_2616, %var_2617, %var_2618, %var_2619) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) */
}

def @func_7365(%var_7351: Tensor[(338), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(338), float64]) {
  %915 = cast(%var_7351, dtype="float64") /* ty=Tensor[(338), float64] */;
  %916 = reshape(%915, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
  %917 = @func_2779(%916) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */;
  %918 = @func_4999() /* ty=Tensor[(3, 10, 13), bool] */;
  %919 = %917.1;
  (%918, %919, %var_7351)
}

def @func_7396() -> (Tensor[(3, 10, 13), bool],) {
  %922 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %920 = @func_4540() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %921 = %920.0;
    (%921,)
  };
  %922() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_6630() -> (Tensor[(3, 10, 13), bool],) {
  %925 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %923 = @func_6079() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */;
    %924 = %923.0;
    (%924,)
  };
  %925() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_894(%var_891: Tensor[(5, 15, 5), float32], %var_892: Tensor[(5, 15, 5), float32], %var_893: Tensor[(640), float32]) -> (Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) {
  @func_889(%var_891, %var_892, %var_893) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */
}

def @func_2193(%var_2188: Tensor[(4, 8, 1), float64], %var_2189: Tensor[(420), uint32], %var_2190: Tensor[(196), float32], %var_2191: Tensor[(756), uint32], %var_2192: Tensor[(330), float64]) -> (Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) {
  %1004 = fn (%var_2051: Tensor[(4, 8, 1), float64], %var_2064: Tensor[(420), uint32], %var_2107: Tensor[(196), float32], %var_2135: Tensor[(756), uint32], %var_2156: Tensor[(330), float64]) -> (Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) {
    %926 = cast(%var_2064, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %927 = reshape(%926, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %928 = @func_1863(%927) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */;
    %929 = cast(%var_2107, dtype="float32") /* ty=Tensor[(196), float32] */;
    %930 = reshape(%929, newshape=[2, 14, 7]) /* ty=Tensor[(2, 14, 7), float32] */;
    %931 = @func_205(%930) /* ty=(Tensor[(2, 14, 7), float32],) */;
    %932 = cast(%var_2051, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
    %933 = log(%932) /* ty=Tensor[(4, 8, 1), float64] */;
    %934 = cast(%933, dtype="int8") /* ty=Tensor[(4, 8, 1), int8] */;
    %935 = shape_of(%var_2051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %936 = cast(%var_2051, dtype="int8") /* ty=Tensor[(4, 8, 1), int8] */;
    %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %938 = bitwise_xor(%936, %937) /* ty=Tensor[(4, 8, ?), int8] */;
    %939 = cast(%938, dtype="float64") /* ty=Tensor[(4, 8, ?), float64] */;
    %940 = atanh(%939) /* ty=Tensor[(4, 8, ?), float64] */;
    %941 = cast(%938, dtype="float32") /* ty=Tensor[(4, 8, ?), float32] */;
    %942 = shape_of(%933, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(%933, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %945 = divide(%943, %944) /* ty=Tensor[(4, 8, ?), float32] */;
    %946 = cast(%945, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
    %947 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %948 = cast(%938, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
    %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %950 = logical_or(%948, %949) /* ty=Tensor[(4, 8, ?), bool] */;
    %951 = cast(%950, dtype="uint64") /* ty=Tensor[(4, 8, ?), uint64] */;
    %952 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 8, 5), bool] */, dtype="uint64") /* ty=Tensor[(4, 8, 5), uint64] */;
    %953 = logical_xor(%951, %952) /* ty=Tensor[(4, 8, 5), uint64] */;
    %954 = cast(%940, dtype="int8") /* ty=Tensor[(4, 8, ?), int8] */;
    %955 = cast(%953, dtype="int8") /* ty=Tensor[(4, 8, 5), int8] */;
    %956 = cast(%940, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
    %957 = shape_of(%938, dtype="int32") /* ty=Tensor[(3), int32] */;
    %958 = cast(%938, dtype="bool") /* ty=Tensor[(4, 8, ?), bool] */;
    %959 = dyn.reshape(%956, %957, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %960 = cast(%var_2135, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %961 = cast(%var_2135, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %962 = reshape(%960, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
    %963 = reshape(%961, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
    %964 = @func_456(%962, %963) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */;
    %965 = %928.3;
    %966 = cast(%965, dtype="uint32") /* ty=Tensor[(7, 6, 10), uint32] */;
    %967 = reshape(%966, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %968 = @func_1863(%967) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */;
    %969 = cast(%933, dtype="uint8") /* ty=Tensor[(4, 8, 1), uint8] */;
    %970 = cast(%var_2064, dtype="uint8") /* ty=Tensor[(420), uint8] */;
    %971 = cast(meta[relay.Constant][58] /* ty=Tensor[(156, 2), bool] */, dtype="bool") /* ty=Tensor[(156, 2), bool] */;
    %972 = cast(meta[relay.Constant][59] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %973 = %931.0;
    %974 = cast(%973, dtype="float32") /* ty=Tensor[(2, 14, 7), float32] */;
    %975 = reshape(%971, newshape=[1, 312]) /* ty=Tensor[(1, 312), bool] */;
    %976 = reshape(%972, newshape=[375]) /* ty=Tensor[(375), float32] */;
    %977 = reshape(%974, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %978 = @func_1670(%975, %976, %977) /* ty=(Tensor[(1, 312), bool], Tensor[(13, 10, 14), float32], Tensor[(1820), float32], Tensor[(11, 5, 6), float32], Tensor[(160, 4), float32], Tensor[(5, 15, 5), float64], Tensor[(375), float32], Tensor[(11, 5, 6), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(3, 10, 13), float32], Tensor[(13, 2, 12), float32]) */;
    %979 = cast(meta[relay.Constant][59] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %980 = cast(meta[relay.Constant][59] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %981 = cast(meta[relay.Constant][60] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %982 = reshape(%979, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
    %983 = reshape(%980, newshape=[5, 15, 5]) /* ty=Tensor[(5, 15, 5), float32] */;
    %984 = reshape(%981, newshape=[640]) /* ty=Tensor[(640), float32] */;
    %985 = @func_889(%982, %983, %984) /* ty=(Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(5, 15, 5), float64], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30, 1), float64], Tensor[(11, 5, 6), uint32]) */;
    %986 = cast(%var_2156, dtype="float64") /* ty=Tensor[(330), float64] */;
    %987 = reshape(%986, newshape=[11, 5, 6]) /* ty=Tensor[(11, 5, 6), float64] */;
    %988 = @func_146(%987) /* ty=(Tensor[(11, 5, 6), bool], Tensor[(11, 5, 6), uint32], Tensor[(11, 5, 6), float32]) */;
    %989 = cast(%933, dtype="float32") /* ty=Tensor[(4, 8, 1), float32] */;
    %990 = acosh(%989) /* ty=Tensor[(4, 8, 1), float32] */;
    %991 = cast(%933, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
    %992 = shape_of(%990, dtype="int32") /* ty=Tensor[(3), int32] */;
    %993 = cast(%990, dtype="float64") /* ty=Tensor[(4, 8, 1), float64] */;
    %994 = dyn.reshape(%991, %992, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %995 = subtract(%954, %955) /* ty=Tensor[(4, 8, 5), int8] */;
    %996 = less(%958, %959) /* ty=Tensor[(4, 8, ?), bool] */;
    %997 = %964.1;
    %998 = %968.3;
    %999 = right_shift(%969, %970) /* ty=Tensor[(4, 8, 420), uint8] */;
    %1000 = %978.6;
    %1001 = %985.2;
    %1002 = %988.0;
    %1003 = power(%993, %994) /* ty=Tensor[(4, 8, ?), float64] */;
    (%965, %973, %var_2107, %995, %996, %997, %var_2135, %998, %999, %1000, meta[relay.Constant][58] /* ty=Tensor[(156, 2), bool] */, meta[relay.Constant][59] /* ty=Tensor[(375), float32] */, %1001, meta[relay.Constant][60] /* ty=Tensor[(640), float32] */, %1002, %var_2156, %1003)
  };
  %1004(%var_2188, %var_2189, %var_2190, %var_2191, %var_2192) /* ty=(Tensor[(7, 6, 10), uint32], Tensor[(2, 14, 7), float32], Tensor[(196), float32], Tensor[(4, 8, 5), int8], Tensor[(4, 8, ?), bool], Tensor[(13, 10, 14), float32], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(4, 8, 420), uint8], Tensor[(375), float32], Tensor[(156, 2), bool], Tensor[(375), float32], Tensor[(5, 15, 5), float64], Tensor[(640), float32], Tensor[(11, 5, 6), bool], Tensor[(330), float64], Tensor[(4, 8, ?), float64]) */
}

def @func_3759() -> (Tensor[(3, 10, 13), bool],) {
  %1005 = @func_1967() /* ty=Tensor[(3, 10, 13), bool] */;
  (%1005,)
}

def @func_4865(%var_4863: Tensor[(312), bool]) -> (Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), bool], Tensor[(312), bool]) {
  @func_4862(%var_4863) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(13, 2, 12), bool], Tensor[(312), bool]) */
}

def @func_3157() -> (Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) {
  %1017 = fn () -> (Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) {
    %1006 = cast(meta[relay.Constant][61] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %1007 = reshape(%1006, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
    %1008 = @func_383(%1007) /* ty=(Tensor[(5, 2, 3), float64],) */;
    %1009 = %1008.0;
    %1010 = cast(%1009, dtype="float64") /* ty=Tensor[(5, 2, 3), float64] */;
    %1011 = cast(meta[relay.Constant][62] /* ty=Tensor[(338), float64] */, dtype="float64") /* ty=Tensor[(338), float64] */;
    %1012 = reshape(%1011, newshape=[13, 2, 13]) /* ty=Tensor[(13, 2, 13), float64] */;
    %1013 = @func_2779(%1012) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */;
    %1014 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
    %1015 = asinh(%1010) /* ty=Tensor[(5, 2, 3), float64] */;
    %1016 = %1013.0;
    (%1014, meta[relay.Constant][61] /* ty=Tensor[(30), float64] */, %1015, %1016, meta[relay.Constant][62] /* ty=Tensor[(338), float64] */)
  };
  %1017() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(5, 2, 3), float64], Tensor[(13, 2, 13), float64], Tensor[(338), float64]) */
}

def @func_7291(%var_7289: Tensor[(14, 8, 9), float64], %var_7290: Tensor[(14, 8, 9), float64]) -> (Tensor[(14, 8, 9), float64],) {
  %1023 = fn (%var_7280: Tensor[(14, 8, 9), float64], %var_7281: Tensor[(14, 8, 9), float64]) -> (Tensor[(14, 8, 9), float64],) {
    %1018 = cast(%var_7281, dtype="float64") /* ty=Tensor[(14, 8, 9), float64] */;
    %1019 = shape_of(%var_7280, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1020 = cast(%var_7280, dtype="float64") /* ty=Tensor[(14, 8, 9), float64] */;
    %1021 = dyn.reshape(%1018, %1019, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1022 = floor_mod(%1020, %1021) /* ty=Tensor[(14, 8, 9), float64] */;
    (%1022,)
  };
  %1023(%var_7289, %var_7290) /* ty=(Tensor[(14, 8, 9), float64],) */
}

def @func_6391() -> Tensor[(3, 10, 13), bool] {
  %1024 = fn () -> Tensor[(3, 10, 13), bool] {
    @func_1798() /* ty=Tensor[(3, 10, 13), bool] */
  };
  %1024() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_1902(%var_1899: Tensor[(312), bool], %var_1900: Tensor[(196), float32], %var_1901: Tensor[(125, 3), float32]) -> (Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) {
  @func_1897(%var_1899, %var_1900, %var_1901) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(2, 14, 7), float32], Tensor[(312), bool], Tensor[(196), float32], Tensor[(125, 3), float32], Tensor[(13, 10, 14), float32], Tensor[(1820), float32]) */
}

def @func_2781(%var_2780: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) {
  %1045 = fn (%var_2752: Tensor[(13, 2, 13), float64]) -> (Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) {
    %1025 = cast(%var_2752, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
    %1026 = sin(%1025) /* ty=Tensor[(13, 2, 13), float64] */;
    %1027 = cast(%var_2752, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
    %1028 = shape_of(%1026, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1029 = cast(%1026, dtype="float64") /* ty=Tensor[(13, 2, 13), float64] */;
    %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1031 = cast(meta[relay.Constant][63] /* ty=Tensor[(420), uint32] */, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %1032 = cast(meta[relay.Constant][64] /* ty=Tensor[(30), float64] */, dtype="float64") /* ty=Tensor[(30), float64] */;
    %1033 = cast(meta[relay.Constant][65] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %1034 = cast(meta[relay.Constant][66] /* ty=Tensor[(7, 28), float32] */, dtype="float32") /* ty=Tensor[(7, 28), float32] */;
    %1035 = cast(meta[relay.Constant][65] /* ty=Tensor[(375), float32] */, dtype="float32") /* ty=Tensor[(375), float32] */;
    %1036 = reshape(%1031, newshape=[420]) /* ty=Tensor[(420), uint32] */;
    %1037 = reshape(%1032, newshape=[5, 2, 3]) /* ty=Tensor[(5, 2, 3), float64] */;
    %1038 = reshape(%1033, newshape=[375]) /* ty=Tensor[(375), float32] */;
    %1039 = reshape(%1034, newshape=[196]) /* ty=Tensor[(196), float32] */;
    %1040 = reshape(%1035, newshape=[375]) /* ty=Tensor[(375), float32] */;
    %1041 = @func_2614(%1036, %1037, %1038, %1039, %1040) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(30), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(420), uint32], Tensor[(5, 2, 3), bool], Tensor[(3, 10, 13), bool], Tensor[(756), uint32], Tensor[(3, 104), bool], Tensor[(196), float32], Tensor[(2, 16), float64], Tensor[(3, 10, 13), float32], Tensor[(375), uint16], Tensor[(3, 10, 13), bool]) */;
    %1042 = mod(%1029, %1030) /* ty=Tensor[(13, 2, 13), float64] */;
    %1043 = @func_2279() /* ty=Tensor[(3, 10, 13), bool] */;
    %1044 = %1041.3;
    (%1042, %1043, %1044, meta[relay.Constant][63] /* ty=Tensor[(420), uint32] */, meta[relay.Constant][64] /* ty=Tensor[(30), float64] */, meta[relay.Constant][65] /* ty=Tensor[(375), float32] */, meta[relay.Constant][66] /* ty=Tensor[(7, 28), float32] */)
  };
  %1045(%var_2780) /* ty=(Tensor[(13, 2, 13), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(420), uint32], Tensor[(30), float64], Tensor[(375), float32], Tensor[(7, 28), float32]) */
}

def @func_4525() -> (Tensor[(3, 10, 13), bool],) {
  @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_1865(%var_1864: Tensor[(420), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) {
  %1060 = fn (%var_1857: Tensor[(420), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) {
    %1046 = @func_1468() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %1047 = cast(meta[relay.Constant][67] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %1048 = cast(meta[relay.Constant][67] /* ty=Tensor[(756), uint32] */, dtype="uint32") /* ty=Tensor[(756), uint32] */;
    %1049 = reshape(%1047, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
    %1050 = reshape(%1048, newshape=[9, 6, 14]) /* ty=Tensor[(9, 6, 14), uint32] */;
    %1051 = @func_456(%1049, %1050) /* ty=(Tensor[(9, 6, 14), bool], Tensor[(13, 10, 14), float32], Tensor[(1820, 1), float32]) */;
    %1052 = cast(%var_1857, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %1053 = cast(%var_1857, dtype="uint32") /* ty=Tensor[(420), uint32] */;
    %1054 = reshape(%1052, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
    %1055 = reshape(%1053, newshape=[7, 6, 10]) /* ty=Tensor[(7, 6, 10), uint32] */;
    %1056 = @func_1195(%1054, %1055) /* ty=(Tensor[(7, 6, 10), uint32],) */;
    %1057 = %1046.0;
    %1058 = %1051.0;
    %1059 = %1056.0;
    (%1057, %1058, meta[relay.Constant][67] /* ty=Tensor[(756), uint32] */, %1059, %var_1857)
  };
  %1060(%var_1864) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(9, 6, 14), bool], Tensor[(756), uint32], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32]) */
}

def @func_5319(%var_5317: Tensor[(1568), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  @func_5316(%var_5317) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(1568), float64], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_4792() -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
  %1069 = fn () -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) {
    %1061 = cast(meta[relay.Constant][68] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %1062 = reshape(%1061, newshape=[20, 32]) /* ty=Tensor[(20, 32), float32] */;
    %1063 = @func_2863(%1062) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(11, 5, 6), uint32], Tensor[(5, 75), float32], Tensor[(5, 2, 3), float64], Tensor[(30, 1), float64], Tensor[(20, 32), bool]) */;
    %1064 = @func_1798() /* ty=Tensor[(3, 10, 13), bool] */;
    %1065 = @func_4590() /* ty=Tensor[(3, 10, 13), bool] */;
    %1066 = %1063.3;
    %1067 = @func_1391() /* ty=Tensor[(3, 10, 13), bool] */;
    %1068 = @func_1495() /* ty=Tensor[(3, 10, 13), bool] */;
    (%1064, %1065, %1066, meta[relay.Constant][68] /* ty=Tensor[(640), float32] */, %1067, %1068)
  };
  %1069() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool]) */
}

def @func_4607() -> (Tensor[(3, 10, 13), bool],) {
  %1072 = fn () -> (Tensor[(3, 10, 13), bool],) {
    %1070 = @func_4523() /* ty=(Tensor[(3, 10, 13), bool],) */;
    %1071 = %1070.0;
    (%1071,)
  };
  %1072() /* ty=(Tensor[(3, 10, 13), bool],) */
}

def @func_6936() -> (Tensor[(4, 3, 2), int32],) {
  %1075 = fn () -> (Tensor[(4, 3, 2), int32],) {
    %1073 = @func_6654() /* ty=(Tensor[(4, 3, 2), int32],) */;
    %1074 = %1073.0;
    (%1074,)
  };
  %1075() /* ty=(Tensor[(4, 3, 2), int32],) */
}

def @func_7594() -> (Tensor[(3, 10, 13), bool], Tensor[(5, 84), uint32]) {
  %1076 = @func_6849() /* ty=(Tensor[(3, 10, 13), bool],) */;
  %1077 = @func_3680() /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), float32], Tensor[(5, 84), uint32]) */;
  %1078 = %1076.0;
  %1079 = %1077.2;
  (%1078, %1079)
}

def @func_3805(%var_3803: Tensor[(640), float32], %var_3804: Tensor[(30), float64]) -> (Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30), float64]) {
  @func_3801(%var_3803, %var_3804) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(3, 10, 13), bool], Tensor[(5, 2, 3), float64], Tensor[(640), float32], Tensor[(30), float64]) */
}

def @func_3410(%var_3408: Tensor[(420), uint32]) -> (Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) {
  @func_3407(%var_3408) /* ty=(Tensor[(3, 10, 13), bool], Tensor[(7, 6, 10), uint32], Tensor[(420), uint32], Tensor[(3, 10, 13), float32]) */
}

def @func_1968() -> Tensor[(3, 10, 13), bool] {
  %1080 = fn () -> Tensor[(3, 10, 13), bool] {
    @func_1391() /* ty=Tensor[(3, 10, 13), bool] */
  };
  %1080() /* ty=Tensor[(3, 10, 13), bool] */
}

def @func_1002(%var_1001: Tensor[(640), float32]) -> (Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) {
  %1089 = fn (%var_987: Tensor[(640), float32]) -> (Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) {
    %1081 = cast(meta[relay.Constant][69] /* ty=Tensor[(15, 14, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 14, 16), float32] */;
    %1082 = cast(%var_987, dtype="float32") /* ty=Tensor[(640), float32] */;
    %1083 = cast(meta[relay.Constant][70] /* ty=Tensor[(5, 6), float64] */, dtype="float64") /* ty=Tensor[(5, 6), float64] */;
    %1084 = reshape(%1082, newshape=[10, 16, 4]) /* ty=Tensor[(10, 16, 4), float32] */;
    %1085 = reshape(%1083, newshape=[30]) /* ty=Tensor[(30), float64] */;
    %1086 = @func_655(%1084, %1085) /* ty=(Tensor[(5, 2, 3), float64], Tensor[(30), float64], Tensor[(10, 16, 4), float32], Tensor[(11, 5, 6), float32], Tensor[(330), float64], Tensor[(10, 16, 4), float64]) */;
    %1087 = log2(%1081) /* ty=Tensor[(15, 14, 16), float32] */;
    %1088 = %1086.3;
    (%1087, %1088, %var_987, meta[relay.Constant][70] /* ty=Tensor[(5, 6), float64] */)
  };
  %1089(%var_1001) /* ty=(Tensor[(15, 14, 16), float32], Tensor[(11, 5, 6), float32], Tensor[(640), float32], Tensor[(5, 6), float64]) */
}

def @func_4411() -> (Tensor[(3, 10, 13), bool],) {
  @func_4409() /* ty=(Tensor[(3, 10, 13), bool],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen593/build/output.py", line 2422, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:37:15] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

