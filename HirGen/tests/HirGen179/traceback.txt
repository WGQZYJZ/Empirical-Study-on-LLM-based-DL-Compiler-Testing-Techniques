==========mod==========
#[version = "0.0.5"]
def @func_1413(%var_1389: Tensor[(10, 4), float64], %var_1397: Tensor[(720), float32], %var_1410: Tensor[(1089), int32]) -> (Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) {
  %0 = cast(%var_1389, dtype="float64") /* ty=Tensor[(10, 4), float64] */;
  %1 = cast(%var_1397, dtype="float32") /* ty=Tensor[(720), float32] */;
  %2 = reshape(%1, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %3 = cast(%var_1410, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %4 = reshape(%3, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), int32] */;
  %5 = @func_1227(%4) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */;
  %6 = acosh(%0) /* ty=Tensor[(10, 4), float64] */;
  %7 = @func_57(%2) /* ty=Tensor[(16, 5, 9), float32] */;
  %8 = %5.3;
  (%6, %7, %var_1397, %8, %var_1410)
}

def @func_1227(%var_1197: Tensor[(1089, 1), int32]) -> (Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) {
  %9 = cast(%var_1197, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
  %10 = cast(%var_1197, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
  %11 = reshape(%9, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %12 = reshape(%10, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %13 = @func_560(%11, %12) /* ty=(Tensor[(11, 11, 9), int32],) */;
  %14 = cast(%var_1197, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
  %15 = %13.0;
  %16 = cast(%15, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %17 = reshape(%14, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %18 = reshape(%16, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %19 = @func_560(%17, %18) /* ty=(Tensor[(11, 11, 9), int32],) */;
  %20 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 14, 9), float64] */;
  %21 = acos(%20) /* ty=Tensor[(1, 14, 9), float64] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(1, 14, 9), float32] */;
  %23 = sqrt(%22) /* ty=Tensor[(1, 14, 9), float32] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 14, 9), float64] */, dtype="int32") /* ty=Tensor[(1, 14, 9), int32] */;
  %25 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%21, dtype="int32") /* ty=Tensor[(1, 14, 9), int32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %28 = bitwise_or(%26, %27) /* ty=Tensor[(?, 14, 9), int32] */;
  %29 = cast(%28, dtype="bool") /* ty=Tensor[(?, 14, 9), bool] */;
  %30 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%23, dtype="bool") /* ty=Tensor[(1, 14, 9), bool] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %33 = not_equal(%31, %32) /* ty=Tensor[(?, 14, 9), bool] */;
  %34 = cast(%33, dtype="int32") /* ty=Tensor[(?, 14, 9), int32] */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 14, 9), bool] */, dtype="int32") /* ty=Tensor[(13, 14, 9), int32] */;
  %36 = cast(%33, dtype="uint16") /* ty=Tensor[(?, 14, 9), uint16] */;
  %37 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%21, dtype="uint16") /* ty=Tensor[(1, 14, 9), uint16] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %40 = %19.0;
  %41 = multiply(%34, %35) /* ty=Tensor[(13, 14, 9), int32] */;
  %42 = minimum(%38, %39) /* ty=Tensor[(?, 14, 9), uint16] */;
  (%15, %var_1197, %40, %41, %42)
}

def @func_3415() -> Tensor[(13, 1, 13), float32] {
  @func_2950() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_5069() -> (Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) {
  %43 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
  %44 = @func_3180() /* ty=Tensor[(1089), float32] */;
  (%43, %44)
}

def @func_5524(%var_5465: Tensor[(3, 16, 14), float32]) -> (Tensor[(1089), int32], Tensor[(3, 16, 14), float64], Tensor[(14, 5, 4), int64]) {
  %45 = @func_5135() /* ty=(Tensor[(1089), int32],) */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %47 = shape_of(%var_5465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %48 = cast(%var_5465, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %50 = floor_mod(%48, %49) /* ty=Tensor[(3, 16, 14), float32] */;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
  %52 = %45.0;
  %53 = sqrt(%51) /* ty=Tensor[(3, 16, 14), float64] */;
  %54 = @func_2464() /* ty=Tensor[(14, 5, 4), int64] */;
  (%52, %53, %54)
}

def @func_4371() -> (Tensor[(720), float32], Tensor[(2, 20), float64], Tensor[(180, 4), float32], Tensor[(1089), float32]) {
  %55 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 20), float64] */, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
  %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(180, 4), float32] */, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %57 = @func_4178() /* ty=Tensor[(1089), float32] */;
  %58 = cast(%57, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %59 = reshape(%55, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %60 = reshape(%56, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %61 = reshape(%58, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %62 = @func_1413(%59, %60, %61) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %63 = cast(%57, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %64 = sin(%63) /* ty=Tensor[(1089), float64] */;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %66 = %62.2;
  %67 = asin(%65) /* ty=Tensor[(1089), float32] */;
  (%66, meta[relay.Constant][3] /* ty=Tensor[(2, 20), float64] */, meta[relay.Constant][4] /* ty=Tensor[(180, 4), float32] */, %67)
}

def @func_5937() -> Tensor[(1089), float32] {
  %68 = @func_5069() /* ty=(Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) */;
  %68.1
}

def @func_4075() -> Tensor[(720), float32] {
  %69 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %69.3
}

def @func_5703() -> Tensor[(1089), float32] {
  @func_3343() /* ty=Tensor[(1089), float32] */
}

def @func_4601() -> Tensor[(13, 1, 13), float32] {
  @func_2950() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_3180() -> Tensor[(1089), float32] {
  @func_2801() /* ty=Tensor[(1089), float32] */
}

def @func_3546() -> Tensor[(1089), float32] {
  @func_3343() /* ty=Tensor[(1089), float32] */
}

def @func_5321() -> (Tensor[(16, 5, 9), float64],) {
  %70 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(16, 5, 9), float64] */;
  %73 = log10(%72) /* ty=Tensor[(16, 5, 9), float64] */;
  (%73,)
}

def @func_2828() -> (Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) {
  %74 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
  %75 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %76 = @func_2559() /* ty=(Tensor[(14, 5, 4), float32],) */;
  %77 = %74.0;
  %78 = %75.4;
  %79 = %76.0;
  (%77, %78, %79)
}

def @func_5923() -> (Tensor[(1089), float32], Tensor[(13, 1, 13), float32], Tensor[(720), int32], Tensor[(1, 720), float32]) {
  %80 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %81 = reshape(%80, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %82 = @func_4966(%81) /* ty=(Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(13, 14, 9), int32], Tensor[(720), int32], Tensor[(216), uint32], Tensor[(72), float64], Tensor[(14, 5, 4), int64], Tensor[(1089), float32], Tensor[(16, 5, 9), float32], Tensor[(22, 78), float64], Tensor[(11, 11, 9), int32], Tensor[(169, 1), float32]) */;
  %83 = @func_4178() /* ty=Tensor[(1089), float32] */;
  %84 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %85 = %82.5;
  (%83, %84, %85, meta[relay.Constant][5] /* ty=Tensor[(1, 720), float32] */)
}

def @func_4631() -> Tensor[(13, 6, 13), uint64] {
  %86 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(13, 1, 13), float32] */;
  %88 = rsqrt(%87) /* ty=Tensor[(13, 1, 13), float32] */;
  %89 = cast(%88, dtype="uint64") /* ty=Tensor[(13, 1, 13), uint64] */;
  %90 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 6, 13), float32] */, dtype="uint64") /* ty=Tensor[(13, 6, 13), uint64] */;
  bitwise_or(%89, %90) /* ty=Tensor[(13, 6, 13), uint64] */
}

def @func_2930(%var_2878: Tensor[(1, 13, 15), uint16], %var_2879: Tensor[(15, 13, 15), uint16]) -> (Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) {
  %91 = cast(%var_2878, dtype="bool") /* ty=Tensor[(1, 13, 15), bool] */;
  %92 = cast(%var_2879, dtype="bool") /* ty=Tensor[(15, 13, 15), bool] */;
  %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %95 = reshape(%93, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %96 = reshape(%94, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %97 = @func_1587(%95, %96) /* ty=Tensor[(16, 10, 10), float64] */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(1600), uint8] */, dtype="int32") /* ty=Tensor[(1600), int32] */;
  %99 = shape_of(%97, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%97, dtype="int32") /* ty=Tensor[(16, 10, 10), int32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(1600), uint8] */, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %103 = greater(%91, %92) /* ty=Tensor[(15, 13, 15), bool] */;
  %104 = minimum(%100, %101) /* ty=Tensor[(16, 10, 10), int32] */;
  %105 = sigmoid(%102) /* ty=Tensor[(1600), float64] */;
  %106 = @func_2801() /* ty=Tensor[(1089), float32] */;
  (%103, %104, %105, %106)
}

def @func_6490() -> (Tensor[(13, 6, 13), float64], Tensor[(1089), float64], Tensor[(1089), float64], Tensor[(1089), float32]) {
  %107 = @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(1089), float64] */, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %110 = reshape(%109, newshape=[1089]) /* ty=Tensor[(1089), float64] */;
  %111 = @func_5069() /* ty=(Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) */;
  %112 = cos(%108) /* ty=Tensor[(13, 6, 13), float64] */;
  %113 = @func_5376(%110) /* ty=Tensor[(1089), float64] */;
  %114 = %111.1;
  (%112, %113, meta[relay.Constant][8] /* ty=Tensor[(1089), float64] */, %114)
}

def @func_2355() -> (Tensor[(14, 5, 4), int64],) {
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 5, 4), int64] */, dtype="int64") /* ty=Tensor[(14, 5, 4), int64] */;
  %116 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(14, 5, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 5, 4), int64] */, dtype="int64") /* ty=Tensor[(14, 5, 4), int64] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %119 = subtract(%117, %118) /* ty=Tensor[(14, 5, 4), int64] */;
  (%119,)
}

def @func_3189() -> (Tensor[(1089), float32],) {
  %120 = @func_3180() /* ty=Tensor[(1089), float32] */;
  (%120,)
}

def @func_3343() -> Tensor[(1089), float32] {
  %121 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
  %121.0
}

def @func_6812(%var_6787: Tensor[(720), float32], %var_6788: Tensor[(1, 660), uint32], %var_6789: Tensor[(132), uint32], %var_6795: Tensor[(12, 660), uint32]) -> (Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(11, 11, 9), int32], Tensor[(8, 18), float64], Tensor[(720), float32], Tensor[(132), uint32], Tensor[(12, 660), float64]) {
  %122 = @func_4804() /* ty=(Tensor[(1089), float32],) */;
  %123 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %124 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %125 = cast(%var_6787, dtype="float32") /* ty=Tensor[(720), float32] */;
  %126 = cast(%var_6788, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %127 = cast(%var_6789, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %128 = reshape(%123, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %129 = reshape(%124, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %130 = reshape(%125, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %131 = reshape(%126, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %132 = reshape(%127, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %133 = @func_2223(%128, %129, %130, %131, %132) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %134 = cast(%var_6788, dtype="float64") /* ty=Tensor[(1, 660), float64] */;
  %135 = cast(%var_6795, dtype="float64") /* ty=Tensor[(12, 660), float64] */;
  %136 = @func_2801() /* ty=Tensor[(1089), float32] */;
  %137 = %122.0;
  %138 = %133.0;
  %139 = floor_mod(%134, %135) /* ty=Tensor[(12, 660), float64] */;
  (%136, %137, %138, meta[relay.Constant][11] /* ty=Tensor[(8, 18), float64] */, %var_6787, %var_6789, %139)
}

def @func_4578(%var_4539: Tensor[(9, 10, 15), float32], %var_4549: Tensor[(720), float32], %var_4551: Tensor[(132), uint32]) -> (Tensor[(9, 10, 15), float32], Tensor[(1089), int32], Tensor[(660), uint32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(1, 660), uint32], Tensor[(132), uint32]) {
  %140 = cast(%var_4539, dtype="float32") /* ty=Tensor[(9, 10, 15), float32] */;
  %141 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %142 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %143 = cast(meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %144 = cast(%var_4549, dtype="float32") /* ty=Tensor[(720), float32] */;
  %145 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 660), uint32] */, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %146 = cast(%var_4551, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %147 = reshape(%142, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %148 = reshape(%143, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %149 = reshape(%144, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %150 = reshape(%145, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %151 = reshape(%146, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %152 = @func_2223(%147, %148, %149, %150, %151) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %153 = asin(%140) /* ty=Tensor[(9, 10, 15), float32] */;
  %154 = %141.0;
  %155 = %152.9;
  (%153, %154, %155, meta[relay.Constant][12] /* ty=Tensor[(144), float64] */, %var_4549, meta[relay.Constant][13] /* ty=Tensor[(1, 660), uint32] */, %var_4551)
}

def @func_3663() -> (Tensor[(1089), float32],) {
  %156 = @func_3180() /* ty=Tensor[(1089), float32] */;
  (%156,)
}

def @func_4966(%var_4904: Tensor[(720), float32]) -> (Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(13, 14, 9), int32], Tensor[(720), int32], Tensor[(216), uint32], Tensor[(72), float64], Tensor[(14, 5, 4), int64], Tensor[(1089), float32], Tensor[(16, 5, 9), float32], Tensor[(22, 78), float64], Tensor[(11, 11, 9), int32], Tensor[(169, 1), float32]) {
  %157 = cast(meta[relay.Constant][14] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %158 = cast(meta[relay.Constant][14] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %159 = reshape(%157, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %160 = reshape(%158, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %161 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %162 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %163 = %162.3;
  %164 = cast(%var_4904, dtype="int32") /* ty=Tensor[(720), int32] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(1), int32] */;
  %166 = cast(%163, dtype="int32") /* ty=Tensor[(720), int32] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?), int32] */;
  %168 = cast(meta[relay.Constant][15] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %169 = reshape(%168, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %170 = @func_4312(%169) /* ty=(Tensor[(14, 5, 4), int64], Tensor[(72), float64], Tensor[(216), uint32], Tensor[(252, 2), float64]) */;
  %171 = cast(meta[relay.Constant][16] /* ty=Tensor[(22, 78), float64] */, dtype="float64") /* ty=Tensor[(22, 78), float64] */;
  %172 = bitwise_or(%166, %167) /* ty=Tensor[(720), int32] */;
  %173 = cast(%172, dtype="float32") /* ty=Tensor[(720), float32] */;
  %174 = reshape(%171, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float64] */;
  %175 = reshape(%173, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %176 = @func_383(%174, %175) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */;
  %177 = cast(meta[relay.Constant][17] /* ty=Tensor[(169, 1), float32] */, dtype="float32") /* ty=Tensor[(169, 1), float32] */;
  %178 = cast(meta[relay.Constant][17] /* ty=Tensor[(169, 1), float32] */, dtype="float32") /* ty=Tensor[(169, 1), float32] */;
  %179 = reshape(%177, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
  %180 = reshape(%178, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
  %181 = @func_2142(%179, %180) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) */;
  %182 = @func_3343() /* ty=Tensor[(1089), float32] */;
  %183 = @func_2801() /* ty=Tensor[(1089), float32] */;
  %184 = @func_3464(%159, %160) /* ty=Tensor[(16, 3, 3), bool] */;
  %185 = %161.1;
  %186 = %170.2;
  %187 = @func_4207() /* ty=Tensor[(14, 5, 4), int64] */;
  %188 = @func_3180() /* ty=Tensor[(1089), float32] */;
  %189 = %176.1;
  %190 = %181.4;
  (%182, %183, %184, meta[relay.Constant][14] /* ty=Tensor[(144), int64] */, %185, %172, %186, meta[relay.Constant][15] /* ty=Tensor[(72), float64] */, %187, %188, %189, meta[relay.Constant][16] /* ty=Tensor[(22, 78), float64] */, %190, meta[relay.Constant][17] /* ty=Tensor[(169, 1), float32] */)
}

def @func_2223(%var_2182: Tensor[(3, 8, 6), float64], %var_2190: Tensor[(3, 8, 6), float64], %var_2202: Tensor[(1, 720), float32], %var_2211: Tensor[(660), uint32], %var_2218: Tensor[(132), uint32]) -> (Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) {
  %191 = cast(meta[relay.Constant][18] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %192 = cast(meta[relay.Constant][18] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %193 = reshape(%191, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %194 = reshape(%192, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %195 = @func_560(%193, %194) /* ty=(Tensor[(11, 11, 9), int32],) */;
  %196 = cast(%var_2182, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %197 = log2(%196) /* ty=Tensor[(3, 8, 6), float64] */;
  %198 = cast(%var_2190, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %202 = cast(meta[relay.Constant][19] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %203 = cast(%var_2202, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %204 = %195.0;
  %205 = cast(%204, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %206 = reshape(%202, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %207 = reshape(%203, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %208 = reshape(%205, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %209 = @func_1413(%206, %207, %208) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %210 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %211 = cast(meta[relay.Constant][20] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %212 = cast(%var_2211, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %213 = reshape(%210, newshape=[]) /* ty=int32 */;
  %214 = reshape(%211, newshape=[7, 10, 9]) /* ty=Tensor[(7, 10, 9), int32] */;
  %215 = reshape(%212, newshape=[1, 660]) /* ty=Tensor[(1, 660), uint32] */;
  %216 = @func_2076(%213, %214, %215) /* ty=(Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) */;
  %217 = cast(%var_2218, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %218 = %216.3;
  %219 = cast(%218, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %220 = reshape(%217, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %221 = reshape(%219, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %222 = greater_equal(%200, %201) /* ty=Tensor[(3, 8, 6), bool] */;
  %223 = %209.1;
  %224 = @func_161(%220, %221) /* ty=Tensor[(11, 12, 5), uint32] */;
  (%204, meta[relay.Constant][18] /* ty=Tensor[(1089), int32] */, %222, %223, meta[relay.Constant][19] /* ty=Tensor[(40), float64] */, %var_2202, %218, -5 /* ty=int32 */, meta[relay.Constant][20] /* ty=Tensor[(630), int32] */, %var_2211, %224, %var_2218)
}

def @func_4798() -> (Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) {
  %225 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
  %226 = @func_4075() /* ty=Tensor[(720), float32] */;
  %227 = %225.0;
  %228 = @func_3180() /* ty=Tensor[(1089), float32] */;
  (%226, %227, %228)
}

def @func_2763(%var_2688: Tensor[(6, 13, 13), int8], %var_2702: Tensor[(1089), int32], %var_2717: Tensor[(1089), int32], %var_2739: int32, %var_2745: Tensor[(6, 13, 13), float32]) -> (Tensor[(6, 13, 13), int8], Tensor[(6, 13, 13), bool], Tensor[(13, 14, 9), int32], Tensor[(1089), bool], Tensor[(630), int32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(660), uint32], Tensor[(1, 132), uint32], Tensor[(16, 5, 9), float32], Tensor[(1, 660), uint32], int32, Tensor[(11, 12, 5), uint32], Tensor[(6, 13, 13), bool], Tensor[(16, 5, 9), float32], Tensor[(11, 156), float64]) {
  %229 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 13, 13), int8] */, dtype="int8") /* ty=Tensor[(6, 13, 13), int8] */;
  %230 = shape_of(%var_2688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_2688, dtype="int8") /* ty=Tensor[(6, 13, 13), int8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %233 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 13, 13), int8] */, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %234 = shape_of(%var_2688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%var_2688, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = cast(%var_2702, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %238 = reshape(%237, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), int32] */;
  %239 = @func_1227(%238) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */;
  %240 = cast(%var_2717, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %241 = shape_of(%var_2702, dtype="int32") /* ty=Tensor[(1), int32] */;
  %242 = cast(%var_2702, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?), bool] */;
  %244 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %245 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %246 = cast(meta[relay.Constant][23] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %247 = cast(meta[relay.Constant][24] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %248 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %249 = reshape(%244, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %250 = reshape(%245, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %251 = reshape(%246, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %252 = reshape(%247, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %253 = reshape(%248, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %254 = @func_2223(%249, %250, %251, %252, %253) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %255 = cast(meta[relay.Constant][23] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %256 = reshape(%255, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %257 = cast(%var_2739, dtype="int32") /* ty=int32 */;
  %258 = %254.8;
  %259 = cast(%258, dtype="int32") /* ty=Tensor[(630), int32] */;
  %260 = cast(meta[relay.Constant][24] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %261 = reshape(%257, newshape=[]) /* ty=int32 */;
  %262 = reshape(%259, newshape=[7, 10, 9]) /* ty=Tensor[(7, 10, 9), int32] */;
  %263 = reshape(%260, newshape=[1, 660]) /* ty=Tensor[(1, 660), uint32] */;
  %264 = @func_2076(%261, %262, %263) /* ty=(Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) */;
  %265 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %266 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %267 = @func_57(%256) /* ty=Tensor[(16, 5, 9), float32] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %269 = cast(meta[relay.Constant][24] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %270 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %271 = reshape(%265, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %272 = reshape(%266, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %273 = reshape(%268, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %274 = reshape(%269, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %275 = reshape(%270, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %276 = @func_2223(%271, %272, %273, %274, %275) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %277 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 13, 13), int8] */, dtype="float32") /* ty=Tensor[(6, 13, 13), float32] */;
  %278 = cosh(%277) /* ty=Tensor[(6, 13, 13), float32] */;
  %279 = cast(%var_2745, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %280 = shape_of(%278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%278, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %283 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 156), float64] */, dtype="float64") /* ty=Tensor[(11, 156), float64] */;
  %284 = cast(%267, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %285 = reshape(%283, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float64] */;
  %286 = reshape(%284, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %287 = @func_383(%285, %286) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */;
  %288 = right_shift(%231, %232) /* ty=Tensor[(6, 13, 13), int8] */;
  %289 = less(%235, %236) /* ty=Tensor[(6, 13, 13), bool] */;
  %290 = %239.3;
  %291 = less_equal(%242, %243) /* ty=Tensor[(1089), bool] */;
  %292 = %264.3;
  %293 = %276.10;
  %294 = less_equal(%281, %282) /* ty=Tensor[(6, 13, 13), bool] */;
  %295 = %287.1;
  (%288, %289, %290, %291, %258, meta[relay.Constant][22] /* ty=Tensor[(144), float64] */, meta[relay.Constant][23] /* ty=Tensor[(720), float32] */, meta[relay.Constant][24] /* ty=Tensor[(660), uint32] */, meta[relay.Constant][25] /* ty=Tensor[(1, 132), uint32] */, %267, %292, %var_2739, %293, %294, %295, meta[relay.Constant][26] /* ty=Tensor[(11, 156), float64] */)
}

def @func_4202() -> (Tensor[(1089), float64],) {
  %296 = @func_2801() /* ty=Tensor[(1089), float32] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %298 = log2(%297) /* ty=Tensor[(1089), float64] */;
  (%298,)
}

def @func_2801() -> Tensor[(1089), float32] {
  %299 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="float32") /* ty=Tensor[(1089), float32] */;
  atanh(%301) /* ty=Tensor[(1089), float32] */
}

def @func_4013(%var_3977: Tensor[(11, 15, 16), float32], %var_3989: Tensor[(12, 60), float32], %var_3990: Tensor[(1089), int32]) -> (Tensor[(11, 15, 16), float32], Tensor[(13, 14, 9), int32], Tensor[(20, 2), float64], Tensor[(12, 60), float32], Tensor[(1089), int32]) {
  %302 = cast(%var_3977, dtype="float32") /* ty=Tensor[(11, 15, 16), float32] */;
  %303 = cast(meta[relay.Constant][27] /* ty=Tensor[(20, 2), float64] */, dtype="float64") /* ty=Tensor[(20, 2), float64] */;
  %304 = cast(%var_3989, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
  %305 = cast(%var_3990, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %306 = reshape(%303, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %307 = reshape(%304, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %308 = reshape(%305, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %309 = @func_1413(%306, %307, %308) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %310 = rsqrt(%302) /* ty=Tensor[(11, 15, 16), float32] */;
  %311 = %309.3;
  (%310, %311, meta[relay.Constant][27] /* ty=Tensor[(20, 2), float64] */, %var_3989, %var_3990)
}

def @func_3146(%var_3096: Tensor[(7, 15, 4), float64]) -> (Tensor[(7, 15, 4), float64], Tensor[(13, 13), float64]) {
  %312 = cast(%var_3096, dtype="float64") /* ty=Tensor[(7, 15, 4), float64] */;
  %313 = @func_2998() /* ty=(Tensor[(5, 16, 15), float32], Tensor[(13, 13), float32], Tensor[(169), float32]) */;
  %314 = %313.1;
  %315 = cast(%314, dtype="float64") /* ty=Tensor[(13, 13), float64] */;
  %316 = erf(%312) /* ty=Tensor[(7, 15, 4), float64] */;
  %317 = sinh(%315) /* ty=Tensor[(13, 13), float64] */;
  (%316, %317)
}

def @func_6373() -> (Tensor[(13, 6, 13), uint64],) {
  %318 = @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */;
  (%318,)
}

def @func_6452() -> (Tensor[(1089), float32],) {
  %319 = @func_3663() /* ty=(Tensor[(1089), float32],) */;
  %320 = %319.0;
  (%320,)
}

def @func_6568(%var_6563: Tensor[(70, 1), float64]) -> (Tensor[(1089), float64], Tensor[(1089), float32], Tensor[(1690), bool], Tensor[(5, 7, 2), float64], Tensor[(70, 1), float64]) {
  %321 = @func_4798() /* ty=(Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) */;
  %322 = %321.2;
  %323 = cast(%322, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %324 = cast(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %325 = reshape(%324, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %326 = @func_4997(%325) /* ty=(Tensor[(13, 10, 13), uint16],) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="bool") /* ty=Tensor[(13, 10, 13), bool] */;
  %329 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %330 = cast(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="bool") /* ty=Tensor[(1690), bool] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?), bool] */;
  %332 = cast(%var_6563, dtype="float64") /* ty=Tensor[(70, 1), float64] */;
  %333 = reshape(%332, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float64] */;
  %334 = sinh(%323) /* ty=Tensor[(1089), float64] */;
  %335 = @func_3546() /* ty=Tensor[(1089), float32] */;
  %336 = logical_or(%330, %331) /* ty=Tensor[(1690), bool] */;
  %337 = @func_3618(%333) /* ty=Tensor[(5, 7, 2), float64] */;
  (%334, %335, %336, %337, %var_6563)
}

def @func_6710() -> Tensor[(14, 5, 4), float32] {
  %338 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
  %338.2
}

def @func_5234(%var_5142: Tensor[(7, 12, 9), float64], %var_5196: Tensor[(420), float64], %var_5205: Tensor[(660), uint32]) -> (Tensor[(720), float32], Tensor[(13, 6, 13), uint64], Tensor[(13, 13), float64], Tensor[(420), float64], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(660), uint32], Tensor[(7, 12, 9), float64]) {
  %339 = cast(%var_5196, dtype="float64") /* ty=Tensor[(420), float64] */;
  %340 = reshape(%339, newshape=[7, 15, 4]) /* ty=Tensor[(7, 15, 4), float64] */;
  %341 = @func_3146(%340) /* ty=(Tensor[(7, 15, 4), float64], Tensor[(13, 13), float64]) */;
  %342 = cast(meta[relay.Constant][29] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %343 = cast(%var_5205, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %344 = reshape(%342, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %345 = reshape(%343, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %346 = cast(%var_5142, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %347 = atanh(%346) /* ty=Tensor[(7, 12, 9), float64] */;
  %348 = cast(%347, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  %349 = tan(%348) /* ty=Tensor[(7, 12, 9), float32] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %351 = cosh(%350) /* ty=Tensor[(7, 12, 9), float64] */;
  %352 = cast(%351, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %353 = @func_4075() /* ty=Tensor[(720), float32] */;
  %354 = @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */;
  %355 = %341.1;
  %356 = @func_161(%344, %345) /* ty=Tensor[(11, 12, 5), uint32] */;
  %357 = exp(%352) /* ty=Tensor[(7, 12, 9), float64] */;
  (%353, %354, %355, %var_5196, %356, meta[relay.Constant][29] /* ty=Tensor[(132), uint32] */, %var_5205, %357)
}

def @func_5996(%var_5971: Tensor[(195, 15), uint16]) -> (Tensor[(13, 14, 9), int32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(13, 1, 13), float32], Tensor[(195, 15), float64], Tensor[(1089), float64], Tensor[(1089), float64]) {
  %358 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %359 = cast(meta[relay.Constant][30] /* ty=Tensor[(195), uint16] */, dtype="uint16") /* ty=Tensor[(195), uint16] */;
  %360 = cast(%var_5971, dtype="uint16") /* ty=Tensor[(195, 15), uint16] */;
  %361 = reshape(%359, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), uint16] */;
  %362 = reshape(%360, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint16] */;
  %363 = @func_2930(%361, %362) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) */;
  %364 = @func_5923() /* ty=(Tensor[(1089), float32], Tensor[(13, 1, 13), float32], Tensor[(720), int32], Tensor[(1, 720), float32]) */;
  %365 = cast(%var_5971, dtype="float64") /* ty=Tensor[(195, 15), float64] */;
  %366 = cast(meta[relay.Constant][31] /* ty=Tensor[(1089), float64] */, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %367 = reshape(%366, newshape=[1089]) /* ty=Tensor[(1089), float64] */;
  %368 = %358.1;
  %369 = %363.1;
  %370 = %364.1;
  %371 = log10(%365) /* ty=Tensor[(195, 15), float64] */;
  %372 = @func_5376(%367) /* ty=Tensor[(1089), float64] */;
  (%368, %369, meta[relay.Constant][30] /* ty=Tensor[(195), uint16] */, %370, %371, %372, meta[relay.Constant][31] /* ty=Tensor[(1089), float64] */)
}

def @func_2559() -> (Tensor[(14, 5, 4), float32],) {
  %373 = @func_2427() /* ty=Tensor[(14, 5, 4), int64] */;
  %374 = cast(%373, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %375 = acos(%374) /* ty=Tensor[(14, 5, 4), float32] */;
  (%375,)
}

def @func_3204(%var_3193: Tensor[(5, 16, 1), int64], %var_3194: Tensor[(5, 16, 13), int64]) -> (Tensor[(5, 16, 13), bool],) {
  %376 = cast(%var_3193, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
  %377 = cast(%var_3194, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
  %378 = less(%376, %377) /* ty=Tensor[(5, 16, 13), bool] */;
  %379 = cast(%var_3193, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
  %380 = cast(%378, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
  %381 = less_equal(%379, %380) /* ty=Tensor[(5, 16, 13), bool] */;
  (%381,)
}

def @func_3171(%var_3163: Tensor[(11, 5, 2), float64], %var_3164: Tensor[(11, 5, 2), float64]) -> (Tensor[(11, 5, 2), float64],) {
  %382 = cast(%var_3164, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %383 = shape_of(%var_3163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %384 = cast(%var_3163, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
  %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %386 = floor_divide(%384, %385) /* ty=Tensor[(11, 5, 2), float64] */;
  (%386,)
}

def @func_1995(%var_1931: Tensor[(1, 12, 6), float64], %var_1932: Tensor[(7, 12, 6), float64], %var_1943: Tensor[(1089), int32], %var_1985: Tensor[(1600), uint8]) -> (Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) {
  %387 = cast(%var_1931, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
  %388 = cast(%var_1932, dtype="float64") /* ty=Tensor[(7, 12, 6), float64] */;
  %389 = cast(%var_1943, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %390 = reshape(%389, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), int32] */;
  %391 = @func_1227(%390) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */;
  %392 = cast(%var_1985, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %393 = cast(%var_1985, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %394 = reshape(%392, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %395 = reshape(%393, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %396 = cast(meta[relay.Constant][32] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %397 = cast(meta[relay.Constant][33] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %398 = reshape(%396, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %399 = reshape(%397, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %400 = @func_161(%398, %399) /* ty=Tensor[(11, 12, 5), uint32] */;
  %401 = cast(meta[relay.Constant][33] /* ty=Tensor[(660), uint32] */, dtype="bool") /* ty=Tensor[(660), bool] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="bool") /* ty=Tensor[(11, 12, 5), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %405 = subtract(%387, %388) /* ty=Tensor[(7, 12, 6), float64] */;
  %406 = %391.3;
  %407 = @func_1587(%394, %395) /* ty=Tensor[(16, 10, 10), float64] */;
  %408 = logical_or(%403, %404) /* ty=Tensor[(11, 12, 5), bool] */;
  (%405, %406, %var_1943, meta[relay.Constant][32] /* ty=Tensor[(132), uint32] */, %407, %var_1985, %408)
}

def @func_2502() -> (Tensor[(1089), int32],) {
  %409 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %410 = %409.4;
  (%410,)
}

def @func_2950() -> Tensor[(13, 1, 13), float32] {
  %411 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 1, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 13), float32] */;
  acosh(%411) /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_3484() -> Tensor[(14, 5, 4), int64] {
  %412 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %412.0
}

def @func_4804() -> (Tensor[(1089), float32],) {
  %413 = @func_3663() /* ty=(Tensor[(1089), float32],) */;
  %414 = %413.0;
  (%414,)
}

def @func_5748(%var_5717: Tensor[(16, 5, 9), float32]) -> (Tensor[(16, 5, 9), float64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(16, 5, 9), bool]) {
  %415 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
  %416 = %415.1;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(16, 5, 9), float64] */;
  %418 = cast(meta[relay.Constant][35] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
  %419 = reshape(%418, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float64] */;
  %420 = cast(%var_5717, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %421 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%416, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = equal(%422, %423) /* ty=Tensor[(16, 5, 9), bool] */;
  %425 = cast(%var_5717, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = exp(%417) /* ty=Tensor[(16, 5, 9), float64] */;
  %430 = @func_3618(%419) /* ty=Tensor[(5, 7, 2), float64] */;
  %431 = not_equal(%427, %428) /* ty=Tensor[(16, 5, 9), bool] */;
  (%429, %430, meta[relay.Constant][35] /* ty=Tensor[(70), float64] */, %431)
}

def @func_383(%var_357: Tensor[(13, 12, 11), float64], %var_380: Tensor[(720), float32]) -> (Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) {
  %432 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 12, 11), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
  %433 = shape_of(%var_357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%var_357, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %436 = cast(%var_380, dtype="float32") /* ty=Tensor[(720), float32] */;
  %437 = reshape(%436, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %438 = greater_equal(%434, %435) /* ty=Tensor[(13, 12, 11), bool] */;
  %439 = @func_57(%437) /* ty=Tensor[(16, 5, 9), float32] */;
  (%438, %439, %var_380)
}

def @func_5135() -> (Tensor[(1089), int32],) {
  %440 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %441 = %440.0;
  (%441,)
}

def @func_2076(%var_2032: int32, %var_2033: Tensor[(7, 10, 9), int32], %var_2067: Tensor[(1, 660), uint32]) -> (Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) {
  %442 = cast(%var_2032, dtype="int32") /* ty=int32 */;
  %443 = cast(%var_2033, dtype="int32") /* ty=Tensor[(7, 10, 9), int32] */;
  %444 = cast(meta[relay.Constant][37] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %445 = cast(%var_2067, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %446 = reshape(%444, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %447 = reshape(%445, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %448 = multiply(%442, %443) /* ty=Tensor[(7, 10, 9), int32] */;
  %449 = @func_161(%446, %447) /* ty=Tensor[(11, 12, 5), uint32] */;
  (%448, %449, meta[relay.Constant][37] /* ty=Tensor[(132), uint32] */, %var_2067)
}

def @func_1675(%var_1654: Tensor[(14, 16, 2), float64], %var_1662: Tensor[(40), float64], %var_1663: Tensor[(720), float32], %var_1664: Tensor[(121, 9), int32], %var_1666: Tensor[(121, 9), int32]) -> (Tensor[(14, 16, 2), float64], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(121, 9), float32]) {
  %450 = cast(%var_1654, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
  %451 = cast(%var_1662, dtype="float64") /* ty=Tensor[(40), float64] */;
  %452 = cast(%var_1663, dtype="float32") /* ty=Tensor[(720), float32] */;
  %453 = cast(%var_1664, dtype="int32") /* ty=Tensor[(121, 9), int32] */;
  %454 = reshape(%451, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %455 = reshape(%452, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %456 = reshape(%453, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %457 = @func_1413(%454, %455, %456) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %458 = cast(%var_1666, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
  %459 = shape_of(%var_1664, dtype="int32") /* ty=Tensor[(2), int32] */;
  %460 = cast(%var_1664, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %462 = exp(%450) /* ty=Tensor[(14, 16, 2), float64] */;
  %463 = %457.1;
  %464 = floor_divide(%460, %461) /* ty=Tensor[(121, 9), float32] */;
  (%462, %463, %var_1662, %var_1663, %464)
}

def @func_161(%var_151: Tensor[(11, 12, 1), uint32], %var_152: Tensor[(11, 12, 5), uint32]) -> Tensor[(11, 12, 5), uint32] {
  %465 = cast(%var_151, dtype="uint32") /* ty=Tensor[(11, 12, 1), uint32] */;
  %466 = cast(%var_152, dtype="uint32") /* ty=Tensor[(11, 12, 5), uint32] */;
  multiply(%465, %466) /* ty=Tensor[(11, 12, 5), uint32] */
}

def @func_5842(%var_5816: Tensor[(36, 2), float64], %var_5828: Tensor[(195), uint16], %var_5829: Tensor[(2925), uint16]) -> (Tensor[(1089), int32], Tensor[(36, 2), float64], Tensor[(1600), uint8], Tensor[(216), uint32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(2925), uint16], Tensor[(14, 5, 4), float32]) {
  %467 = cast(%var_5816, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %468 = cast(meta[relay.Constant][38] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %469 = cast(meta[relay.Constant][39] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %470 = reshape(%467, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %471 = reshape(%468, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %472 = reshape(%469, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %473 = @func_3862(%470, %471, %472) /* ty=(Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) */;
  %474 = cast(%var_5828, dtype="uint16") /* ty=Tensor[(195), uint16] */;
  %475 = cast(%var_5829, dtype="uint16") /* ty=Tensor[(2925), uint16] */;
  %476 = reshape(%474, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), uint16] */;
  %477 = reshape(%475, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint16] */;
  %478 = @func_2930(%476, %477) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) */;
  %479 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
  %480 = cast(%479, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %481 = %473.7;
  %482 = %478.1;
  %483 = log(%480) /* ty=Tensor[(14, 5, 4), float32] */;
  (%481, %var_5816, meta[relay.Constant][38] /* ty=Tensor[(1600), uint8] */, meta[relay.Constant][39] /* ty=Tensor[(216), uint32] */, %482, %var_5828, %var_5829, %483)
}

def @func_4312(%var_4290: Tensor[(72), float64]) -> (Tensor[(14, 5, 4), int64], Tensor[(72), float64], Tensor[(216), uint32], Tensor[(252, 2), float64]) {
  %484 = cast(%var_4290, dtype="float64") /* ty=Tensor[(72), float64] */;
  %485 = cast(meta[relay.Constant][40] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %486 = reshape(%484, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %487 = reshape(%485, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %488 = @func_3900(%486, %487) /* ty=(Tensor[(1089), float32], Tensor[(252, 2), float64], Tensor[(72), float64], Tensor[(1600), uint8], Tensor[(216), uint32]) */;
  %489 = %488.1;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %491 = erf(%490) /* ty=Tensor[(252, 2), float32] */;
  %492 = cast(%489, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(2), int32] */;
  %494 = cast(%491, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %496 = @func_4207() /* ty=Tensor[(14, 5, 4), int64] */;
  %497 = minimum(%494, %495) /* ty=Tensor[(252, 2), float64] */;
  (%496, %var_4290, meta[relay.Constant][40] /* ty=Tensor[(216), uint32] */, %497)
}

def @func_4997(%var_4985: Tensor[(13, 10, 13), float32]) -> (Tensor[(13, 10, 13), uint16],) {
  %498 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %499 = cast(%498, dtype="uint16") /* ty=Tensor[(13, 1, 13), uint16] */;
  %500 = cast(%var_4985, dtype="uint16") /* ty=Tensor[(13, 10, 13), uint16] */;
  %501 = minimum(%499, %500) /* ty=Tensor[(13, 10, 13), uint16] */;
  (%501,)
}

def @func_2142(%var_2091: Tensor[(13, 13), float32], %var_2092: Tensor[(13, 13), float32]) -> (Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) {
  %502 = cast(%var_2092, dtype="float32") /* ty=Tensor[(13, 13), float32] */;
  %503 = shape_of(%var_2091, dtype="int32") /* ty=Tensor[(2), int32] */;
  %504 = cast(%var_2091, dtype="float32") /* ty=Tensor[(13, 13), float32] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %506 = cast(meta[relay.Constant][41] /* ty=Tensor[(1716), float64] */, dtype="float64") /* ty=Tensor[(1716), float64] */;
  %507 = cast(meta[relay.Constant][42] /* ty=Tensor[(720, 1), float32] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
  %508 = reshape(%506, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float64] */;
  %509 = reshape(%507, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %510 = @func_383(%508, %509) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */;
  %511 = cast(meta[relay.Constant][43] /* ty=Tensor[(1089, 1), int32] */, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
  %512 = cast(meta[relay.Constant][43] /* ty=Tensor[(1089, 1), int32] */, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
  %513 = reshape(%511, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %514 = reshape(%512, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %515 = @func_560(%513, %514) /* ty=(Tensor[(11, 11, 9), int32],) */;
  %516 = cast(meta[relay.Constant][43] /* ty=Tensor[(1089, 1), int32] */, dtype="float64") /* ty=Tensor[(1089, 1), float64] */;
  %517 = asinh(%516) /* ty=Tensor[(1089, 1), float64] */;
  %518 = cast(%517, dtype="float32") /* ty=Tensor[(1089, 1), float32] */;
  %519 = log2(%518) /* ty=Tensor[(1089, 1), float32] */;
  %520 = cast(meta[relay.Constant][43] /* ty=Tensor[(1089, 1), int32] */, dtype="uint64") /* ty=Tensor[(1089, 1), uint64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%519, dtype="uint64") /* ty=Tensor[(1089, 1), uint64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %524 = maximum(%504, %505) /* ty=Tensor[(13, 13), float32] */;
  %525 = %510.0;
  %526 = %515.0;
  %527 = bitwise_or(%522, %523) /* ty=Tensor[(1089, ?), uint64] */;
  (%524, %525, meta[relay.Constant][41] /* ty=Tensor[(1716), float64] */, meta[relay.Constant][42] /* ty=Tensor[(720, 1), float32] */, %526, %527)
}

def @func_2464() -> Tensor[(14, 5, 4), int64] {
  %528 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
  %528.0
}

def @func_2403() -> (Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) {
  %529 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
  %530 = cast(meta[relay.Constant][44] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %531 = cast(meta[relay.Constant][45] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %532 = cast(meta[relay.Constant][46] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %533 = reshape(%530, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %534 = reshape(%531, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %535 = reshape(%532, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %536 = @func_1413(%533, %534, %535) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %537 = cast(meta[relay.Constant][44] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %538 = cast(meta[relay.Constant][45] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %539 = cast(meta[relay.Constant][46] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %540 = reshape(%537, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %541 = reshape(%538, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %542 = reshape(%539, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %543 = @func_1413(%540, %541, %542) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %544 = %529.0;
  %545 = %536.3;
  %546 = %543.2;
  (%544, %545, meta[relay.Constant][44] /* ty=Tensor[(40), float64] */, meta[relay.Constant][45] /* ty=Tensor[(720), float32] */, meta[relay.Constant][46] /* ty=Tensor[(1089), int32] */, %546)
}

def @func_6747() -> Tensor[(14, 5, 4), int64] {
  %547 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
  %547.0
}

def @func_4207() -> Tensor[(14, 5, 4), int64] {
  %548 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
  %548.0
}

def @func_3160() -> (Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) {
  %549 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %550 = cast(meta[relay.Constant][48] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %551 = reshape(%550, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %552 = cos(%549) /* ty=Tensor[(16, 3, 6), float64] */;
  %553 = @func_57(%551) /* ty=Tensor[(16, 5, 9), float32] */;
  (%552, %553, meta[relay.Constant][48] /* ty=Tensor[(1, 720), float32] */)
}

def @func_5617(%var_5580: Tensor[(1089), float64], %var_5590: Tensor[(1089), float64], %var_5597: Tensor[(10, 4), float64]) -> (Tensor[(1089), float64], Tensor[(121, 9), float32], Tensor[(112, 4), float64], Tensor[(10, 4), float64], Tensor[(720), float32], Tensor[(1089), bool]) {
  %554 = cast(%var_5590, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %555 = shape_of(%var_5580, dtype="int32") /* ty=Tensor[(1), int32] */;
  %556 = cast(%var_5580, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?), float64] */;
  %558 = cast(meta[relay.Constant][49] /* ty=Tensor[(112, 4), float64] */, dtype="float64") /* ty=Tensor[(112, 4), float64] */;
  %559 = cast(%var_5597, dtype="float64") /* ty=Tensor[(10, 4), float64] */;
  %560 = cast(meta[relay.Constant][50] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %561 = @func_4202() /* ty=(Tensor[(1089), float64],) */;
  %562 = %561.0;
  %563 = cast(%562, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %564 = cast(%var_5580, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %565 = shape_of(%562, dtype="int32") /* ty=Tensor[(1), int32] */;
  %566 = cast(%562, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?), bool] */;
  %568 = logical_and(%566, %567) /* ty=Tensor[(1089), bool] */;
  %569 = cast(%568, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %570 = reshape(%558, newshape=[14, 16, 2]) /* ty=Tensor[(14, 16, 2), float64] */;
  %571 = reshape(%559, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %572 = reshape(%560, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %573 = reshape(%563, newshape=[121, 9]) /* ty=Tensor[(121, 9), int32] */;
  %574 = reshape(%569, newshape=[121, 9]) /* ty=Tensor[(121, 9), int32] */;
  %575 = @func_1675(%570, %571, %572, %573, %574) /* ty=(Tensor[(14, 16, 2), float64], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(121, 9), float32]) */;
  %576 = cast(%var_5590, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %577 = acosh(%576) /* ty=Tensor[(1089), float64] */;
  %578 = cast(%568, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(1), int32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?), bool] */;
  %582 = floor_divide(%556, %557) /* ty=Tensor[(1089), float64] */;
  %583 = %575.4;
  %584 = less(%580, %581) /* ty=Tensor[(1089), bool] */;
  (%582, %583, meta[relay.Constant][49] /* ty=Tensor[(112, 4), float64] */, %var_5597, meta[relay.Constant][50] /* ty=Tensor[(720), float32] */, %584)
}

def @func_4496(%var_4494: Tensor[(1040), int64]) -> (Tensor[(1089), float64], Tensor[(5, 16, 13), bool], Tensor[(2, 40), int64], Tensor[(1040), int64]) {
  %585 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
  %586 = %585.0;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %588 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 40), int64] */, dtype="int64") /* ty=Tensor[(2, 40), int64] */;
  %589 = cast(%var_4494, dtype="int64") /* ty=Tensor[(1040), int64] */;
  %590 = reshape(%588, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), int64] */;
  %591 = reshape(%589, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), int64] */;
  %592 = @func_3204(%590, %591) /* ty=(Tensor[(5, 16, 13), bool],) */;
  %593 = cos(%587) /* ty=Tensor[(1089), float64] */;
  %594 = %592.0;
  (%593, %594, meta[relay.Constant][51] /* ty=Tensor[(2, 40), int64] */, %var_4494)
}

def @func_5650(%var_5627: Tensor[(1089), float32], %var_5640: Tensor[(504), float64]) -> (Tensor[(1089), uint8], Tensor[(1089), int32], Tensor[(11, 12, 5), bool], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1600), uint8], Tensor[(1089), float32]) {
  %595 = @func_3180() /* ty=Tensor[(1089), float32] */;
  %596 = cast(%var_5627, dtype="uint8") /* ty=Tensor[(1089), uint8] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(1), int32] */;
  %598 = cast(%595, dtype="uint8") /* ty=Tensor[(1089), uint8] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %600 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %601 = cast(meta[relay.Constant][52] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %602 = cast(%var_5640, dtype="float64") /* ty=Tensor[(504), float64] */;
  %603 = cast(%var_5627, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %604 = cast(meta[relay.Constant][53] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %605 = reshape(%601, newshape=[1, 12, 6]) /* ty=Tensor[(1, 12, 6), float64] */;
  %606 = reshape(%602, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), float64] */;
  %607 = reshape(%603, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %608 = reshape(%604, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %609 = @func_1995(%605, %606, %607, %608) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */;
  %610 = @func_4371() /* ty=(Tensor[(720), float32], Tensor[(2, 20), float64], Tensor[(180, 4), float32], Tensor[(1089), float32]) */;
  %611 = right_shift(%598, %599) /* ty=Tensor[(1089), uint8] */;
  %612 = %600.0;
  %613 = %609.6;
  %614 = %610.3;
  (%611, %612, %613, meta[relay.Constant][52] /* ty=Tensor[(72), float64] */, %var_5640, meta[relay.Constant][53] /* ty=Tensor[(1600), uint8] */, %614)
}

def @func_4721(%var_4700: Tensor[(660, 4), float32]) -> (Tensor[(13, 10, 6), float64], Tensor[(13, 10, 6), float32], Tensor[(1089), float32], Tensor[(13, 14, 9), int32], Tensor[(660, 4), float32], Tensor[(720), float32], Tensor[(1089), float64]) {
  %615 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 10, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
  %616 = log10(%615) /* ty=Tensor[(13, 10, 6), float32] */;
  %617 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 10, 6), float32] */, dtype="float64") /* ty=Tensor[(13, 10, 6), float64] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%616, dtype="float64") /* ty=Tensor[(13, 10, 6), float64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %621 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 10, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
  %622 = @func_3663() /* ty=(Tensor[(1089), float32],) */;
  %623 = cast(%var_4700, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
  %624 = cast(meta[relay.Constant][55] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %625 = %622.0;
  %626 = cast(%625, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %627 = reshape(%623, newshape=[11, 15, 16]) /* ty=Tensor[(11, 15, 16), float32] */;
  %628 = reshape(%624, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %629 = reshape(%626, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %630 = @func_4013(%627, %628, %629) /* ty=(Tensor[(11, 15, 16), float32], Tensor[(13, 14, 9), int32], Tensor[(20, 2), float64], Tensor[(12, 60), float32], Tensor[(1089), int32]) */;
  %631 = @func_3546() /* ty=Tensor[(1089), float32] */;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %633 = mod(%619, %620) /* ty=Tensor[(13, 10, 6), float64] */;
  %634 = atanh(%621) /* ty=Tensor[(13, 10, 6), float32] */;
  %635 = %630.1;
  %636 = exp(%632) /* ty=Tensor[(1089), float64] */;
  (%633, %634, %625, %635, %var_4700, meta[relay.Constant][55] /* ty=Tensor[(720), float32] */, %636)
}

def @func_6621() -> (Tensor[(1089), float32],) {
  %637 = @func_3546() /* ty=Tensor[(1089), float32] */;
  (%637,)
}

def @func_1587(%var_1574: Tensor[(16, 10, 10), uint8], %var_1575: Tensor[(16, 10, 10), uint8]) -> Tensor[(16, 10, 10), float64] {
  %638 = cast(%var_1575, dtype="uint8") /* ty=Tensor[(16, 10, 10), uint8] */;
  %639 = shape_of(%var_1574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%var_1574, dtype="uint8") /* ty=Tensor[(16, 10, 10), uint8] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %642 = bitwise_and(%640, %641) /* ty=Tensor[(16, 10, 10), uint8] */;
  %643 = cast(%642, dtype="float64") /* ty=Tensor[(16, 10, 10), float64] */;
  exp(%643) /* ty=Tensor[(16, 10, 10), float64] */
}

def @func_6192() -> (Tensor[(13, 1, 13), float64], Tensor[(13, ?, 13), bool], Tensor[(13, 1, 13), float64]) {
  %644 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
  %646 = erf(%645) /* ty=Tensor[(13, 1, 13), float64] */;
  %647 = cast(%646, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
  %648 = cast(%646, dtype="bool") /* ty=Tensor[(13, 1, 13), bool] */;
  %649 = shape_of(%644, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%644, dtype="bool") /* ty=Tensor[(13, 1, 13), bool] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %652 = cast(%644, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
  %653 = log(%647) /* ty=Tensor[(13, 1, 13), float64] */;
  %654 = greater(%650, %651) /* ty=Tensor[(13, ?, 13), bool] */;
  %655 = cosh(%652) /* ty=Tensor[(13, 1, 13), float64] */;
  (%653, %654, %655)
}

def @func_5268(%var_5250: Tensor[(15, 10, 3), float64]) -> (Tensor[(15, 10, 3), float64],) {
  %656 = cast(-5.33596f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %657 = cast(%var_5250, dtype="bool") /* ty=Tensor[(15, 10, 3), bool] */;
  %658 = less_equal(%656, %657) /* ty=Tensor[(15, 10, 3), bool] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %660 = cosh(%659) /* ty=Tensor[(15, 10, 3), float64] */;
  (%660,)
}

def @func_4178() -> Tensor[(1089), float32] {
  %661 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
  %661.0
}

def @func_6408(%var_6386: Tensor[(1, 8, 14), uint32], %var_6387: Tensor[(14, 8, 14), uint32]) -> Tensor[(14, 8, 14), uint8] {
  %662 = cast(%var_6386, dtype="bool") /* ty=Tensor[(1, 8, 14), bool] */;
  %663 = cast(%var_6387, dtype="bool") /* ty=Tensor[(14, 8, 14), bool] */;
  %664 = equal(%662, %663) /* ty=Tensor[(14, 8, 14), bool] */;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(14, 8, 14), float32] */;
  %666 = acosh(%665) /* ty=Tensor[(14, 8, 14), float32] */;
  %667 = cast(%666, dtype="uint8") /* ty=Tensor[(14, 8, 14), uint8] */;
  %668 = cast(%var_6386, dtype="uint8") /* ty=Tensor[(1, 8, 14), uint8] */;
  logical_xor(%667, %668) /* ty=Tensor[(14, 8, 14), uint8] */
}

def @main(%var_6860: Tensor[(11, 1, 10), float64], %var_6861: Tensor[(11, 6, 10), float64]) -> (Tensor[(11, 6, 10), float64],) {
  %669 = cast(%var_6860, dtype="float64") /* ty=Tensor[(11, 1, 10), float64] */;
  %670 = cast(%var_6861, dtype="float64") /* ty=Tensor[(11, 6, 10), float64] */;
  %671 = floor_mod(%669, %670) /* ty=Tensor[(11, 6, 10), float64] */;
  (%671,)
}

def @func_2427() -> Tensor[(14, 5, 4), int64] {
  %672 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
  %672.0
}

def @func_5103(%var_5093: Tensor[(16, 5, 9), float32]) -> Tensor[(16, 5, 9), bool] {
  %673 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
  %674 = %673.1;
  %675 = cast(%var_5093, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%674, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%677, %678) /* ty=Tensor[(16, 5, 9), bool] */
}

def @func_560(%var_553: Tensor[(11, 11, 9), int32], %var_554: Tensor[(11, 11, 9), int32]) -> (Tensor[(11, 11, 9), int32],) {
  %679 = cast(%var_554, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %680 = shape_of(%var_553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%var_553, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %683 = subtract(%681, %682) /* ty=Tensor[(11, 11, 9), int32] */;
  (%683,)
}

def @func_2998() -> (Tensor[(5, 16, 15), float32], Tensor[(13, 13), float32], Tensor[(169), float32]) {
  %684 = cast(meta[relay.Constant][56] /* ty=Tensor[(5, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
  %685 = cast(meta[relay.Constant][57] /* ty=Tensor[(169), float32] */, dtype="float32") /* ty=Tensor[(169), float32] */;
  %686 = cast(meta[relay.Constant][57] /* ty=Tensor[(169), float32] */, dtype="float32") /* ty=Tensor[(169), float32] */;
  %687 = reshape(%685, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
  %688 = reshape(%686, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
  %689 = @func_2142(%687, %688) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) */;
  %690 = log2(%684) /* ty=Tensor[(5, 16, 15), float32] */;
  %691 = %689.0;
  (%690, %691, meta[relay.Constant][57] /* ty=Tensor[(169), float32] */)
}

def @func_3737(%var_3717: Tensor[(9, 4, 6), uint32]) -> (Tensor[(9, 4, 6), bool], Tensor[(1089), float32], Tensor[(1089), int32]) {
  %692 = cast(meta[relay.Constant][58] /* ty=Tensor[(9, 4, 6), uint32] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %693 = shape_of(%var_3717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%var_3717, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %696 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %697 = less(%694, %695) /* ty=Tensor[(9, 4, 6), bool] */;
  %698 = @func_3546() /* ty=Tensor[(1089), float32] */;
  %699 = %696.0;
  (%697, %698, %699)
}

def @func_3900(%var_3871: Tensor[(72), float64], %var_3873: Tensor[(216), uint32]) -> (Tensor[(1089), float32], Tensor[(252, 2), float64], Tensor[(72), float64], Tensor[(1600), uint8], Tensor[(216), uint32]) {
  %700 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
  %701 = cast(%var_3871, dtype="float64") /* ty=Tensor[(72), float64] */;
  %702 = cast(meta[relay.Constant][59] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %703 = cast(%var_3873, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %704 = reshape(%701, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %705 = reshape(%702, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %706 = reshape(%703, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %707 = @func_3862(%704, %705, %706) /* ty=(Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) */;
  %708 = %700.0;
  %709 = %707.6;
  (%708, %709, %var_3871, meta[relay.Constant][59] /* ty=Tensor[(1600), uint8] */, %var_3873)
}

def @func_3464(%var_3444: Tensor[(16, 3, 3), int64], %var_3445: Tensor[(16, 3, 3), int64]) -> Tensor[(16, 3, 3), bool] {
  %710 = cast(%var_3445, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
  %711 = shape_of(%var_3444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%var_3444, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%712, %713) /* ty=Tensor[(16, 3, 3), bool] */
}

def @func_3383() -> Tensor[(14, 5, 4), float32] {
  %714 = @func_2559() /* ty=(Tensor[(14, 5, 4), float32],) */;
  %714.0
}

def @func_6305(%var_6294: Tensor[(144), int64]) -> (Tensor[(14, 5, 4), int64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(720), float32], Tensor[(13, 10, 13), uint16], Tensor[(1690), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64]) {
  %715 = cast(meta[relay.Constant][60] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
  %716 = reshape(%715, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float64] */;
  %717 = @func_4798() /* ty=(Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) */;
  %718 = cast(meta[relay.Constant][61] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %719 = reshape(%718, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %720 = @func_4997(%719) /* ty=(Tensor[(13, 10, 13), uint16],) */;
  %721 = cast(%var_6294, dtype="int64") /* ty=Tensor[(144), int64] */;
  %722 = cast(%var_6294, dtype="int64") /* ty=Tensor[(144), int64] */;
  %723 = reshape(%721, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %724 = reshape(%722, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %725 = @func_4207() /* ty=Tensor[(14, 5, 4), int64] */;
  %726 = @func_3618(%716) /* ty=Tensor[(5, 7, 2), float64] */;
  %727 = %717.0;
  %728 = %720.0;
  %729 = @func_3464(%723, %724) /* ty=Tensor[(16, 3, 3), bool] */;
  (%725, %726, meta[relay.Constant][60] /* ty=Tensor[(70), float64] */, %727, %728, meta[relay.Constant][61] /* ty=Tensor[(1690), float32] */, %729, %var_6294)
}

def @func_57(%var_39: Tensor[(16, 5, 9), float32]) -> Tensor[(16, 5, 9), float32] {
  %730 = cast(%var_39, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  acosh(%730) /* ty=Tensor[(16, 5, 9), float32] */
}

def @func_3862(%var_3836: Tensor[(72), float64], %var_3839: Tensor[(1600), uint8], %var_3844: Tensor[(216), uint32]) -> (Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) {
  %731 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
  %732 = cast(%731, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %733 = tan(%732) /* ty=Tensor[(14, 5, 4), float32] */;
  %734 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
  %735 = %734.2;
  %736 = cast(%735, dtype="int8") /* ty=Tensor[(14, 5, 4), int8] */;
  %737 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %738 = cast(%733, dtype="int8") /* ty=Tensor[(14, 5, 4), int8] */;
  %739 = dyn.reshape(%736, %737, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %740 = cast(meta[relay.Constant][62] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %741 = cast(meta[relay.Constant][62] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
  %742 = reshape(%740, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %743 = reshape(%741, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %744 = cast(%var_3844, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %745 = reshape(%744, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), uint32] */;
  %746 = @func_3737(%745) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(1089), float32], Tensor[(1089), int32]) */;
  %747 = cast(%var_3836, dtype="float64") /* ty=Tensor[(72), float64] */;
  %748 = cast(meta[relay.Constant][63] /* ty=Tensor[(252, 2), float64] */, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %749 = cast(meta[relay.Constant][64] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %750 = cast(%var_3839, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %751 = reshape(%747, newshape=[1, 12, 6]) /* ty=Tensor[(1, 12, 6), float64] */;
  %752 = reshape(%748, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), float64] */;
  %753 = reshape(%749, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %754 = reshape(%750, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %755 = @func_1995(%751, %752, %753, %754) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */;
  %756 = %755.6;
  %757 = cast(%756, dtype="float32") /* ty=Tensor[(11, 12, 5), float32] */;
  %758 = log10(%757) /* ty=Tensor[(11, 12, 5), float32] */;
  %759 = cast(%756, dtype="int64") /* ty=Tensor[(11, 12, 5), int64] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="int64") /* ty=Tensor[(11, 12, 5), int64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %763 = bitwise_or(%738, %739) /* ty=Tensor[(14, 5, 4), int8] */;
  %764 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
  %765 = @func_2464() /* ty=Tensor[(14, 5, 4), int64] */;
  %766 = @func_3464(%742, %743) /* ty=Tensor[(16, 3, 3), bool] */;
  %767 = %746.1;
  %768 = bitwise_and(%761, %762) /* ty=Tensor[(11, 12, 5), int64] */;
  (%763, %764, %765, %766, meta[relay.Constant][62] /* ty=Tensor[(144), int64] */, %var_3836, meta[relay.Constant][63] /* ty=Tensor[(252, 2), float64] */, meta[relay.Constant][64] /* ty=Tensor[(1089), int32] */, %var_3839, %767, %var_3844, %768)
}

def @func_6845() -> (Tensor[(13, 1, 13), float32],) {
  %769 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  (%769,)
}

def @func_5376(%var_5369: Tensor[(1089), float64]) -> Tensor[(1089), float64] {
  %770 = @func_4202() /* ty=(Tensor[(1089), float64],) */;
  %771 = %770.0;
  %772 = cast(%var_5369, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(1), int32] */;
  %774 = cast(%771, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?), float64] */;
  multiply(%774, %775) /* ty=Tensor[(1089), float64] */
}

def @func_3618(%var_3600: Tensor[(5, 7, 2), float64]) -> Tensor[(5, 7, 2), float64] {
  %776 = cast(%var_3600, dtype="float64") /* ty=Tensor[(5, 7, 2), float64] */;
  acosh(%776) /* ty=Tensor[(5, 7, 2), float64] */
}

def @func_6114() -> Tensor[(7, 2, 16), float32] {
  %777 = cast(meta[relay.Constant][65] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  acosh(%777) /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_5544(%var_5536: Tensor[(504), float64], %var_5537: Tensor[(1, 1089), int32]) -> (Tensor[(16, 5, 9), float64], Tensor[(16, 10, 10), float64], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1, 1089), int32], Tensor[(1600, 1), uint8]) {
  %778 = @func_5321() /* ty=(Tensor[(16, 5, 9), float64],) */;
  %779 = cast(meta[relay.Constant][66] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %780 = cast(%var_5536, dtype="float64") /* ty=Tensor[(504), float64] */;
  %781 = cast(%var_5537, dtype="int32") /* ty=Tensor[(1, 1089), int32] */;
  %782 = cast(meta[relay.Constant][67] /* ty=Tensor[(1600, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1600, 1), uint8] */;
  %783 = reshape(%779, newshape=[1, 12, 6]) /* ty=Tensor[(1, 12, 6), float64] */;
  %784 = reshape(%780, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), float64] */;
  %785 = reshape(%781, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %786 = reshape(%782, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %787 = @func_1995(%783, %784, %785, %786) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */;
  %788 = %778.0;
  %789 = %787.4;
  (%788, %789, meta[relay.Constant][66] /* ty=Tensor[(72), float64] */, %var_5536, %var_5537, meta[relay.Constant][67] /* ty=Tensor[(1600, 1), uint8] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5996(%var_5971: Tensor[(195, 15), uint16]) -> (Tensor[(13, 14, 9), int32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(13, 1, 13), float32], Tensor[(195, 15), float64], Tensor[(1089), float64], Tensor[(1089), float64]) {
  %0 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(195), uint16] */, dtype="uint16") /* ty=Tensor[(195), uint16] */;
  %2 = cast(%var_5971, dtype="uint16") /* ty=Tensor[(195, 15), uint16] */;
  %3 = reshape(%1, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), uint16] */;
  %4 = reshape(%2, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint16] */;
  %5 = @func_2930(%3, %4) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) */;
  %6 = @func_5923() /* ty=(Tensor[(1089), float32], Tensor[(13, 1, 13), float32], Tensor[(720), int32], Tensor[(1, 720), float32]) */;
  %7 = cast(%var_5971, dtype="float64") /* ty=Tensor[(195, 15), float64] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(1089), float64] */, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %9 = reshape(%8, newshape=[1089]) /* ty=Tensor[(1089), float64] */;
  %10 = %0.1;
  %11 = %5.1;
  %12 = %6.1;
  %13 = log10(%7) /* ty=Tensor[(195, 15), float64] */;
  %14 = @func_5376(%9) /* ty=Tensor[(1089), float64] */;
  (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(195), uint16] */, %12, %13, %14, meta[relay.Constant][1] /* ty=Tensor[(1089), float64] */)
}

def @func_3180() -> Tensor[(1089), float32] {
  @func_2801() /* ty=Tensor[(1089), float32] */
}

def @func_4633() -> Tensor[(13, 6, 13), uint64] {
  @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */
}

def @func_4804() -> (Tensor[(1089), float32],) {
  %15 = @func_3663() /* ty=(Tensor[(1089), float32],) */;
  %16 = %15.0;
  (%16,)
}

def @func_2145(%var_2143: Tensor[(13, 13), float32], %var_2144: Tensor[(13, 13), float32]) -> (Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) {
  %43 = fn (%var_2091: Tensor[(13, 13), float32], %var_2092: Tensor[(13, 13), float32]) -> (Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) {
    %17 = cast(%var_2092, dtype="float32") /* ty=Tensor[(13, 13), float32] */;
    %18 = shape_of(%var_2091, dtype="int32") /* ty=Tensor[(2), int32] */;
    %19 = cast(%var_2091, dtype="float32") /* ty=Tensor[(13, 13), float32] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(1716), float64] */, dtype="float64") /* ty=Tensor[(1716), float64] */;
    %22 = cast(meta[relay.Constant][3] /* ty=Tensor[(720, 1), float32] */, dtype="float32") /* ty=Tensor[(720, 1), float32] */;
    %23 = reshape(%21, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float64] */;
    %24 = reshape(%22, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %25 = @func_383(%23, %24) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */;
    %26 = cast(meta[relay.Constant][4] /* ty=Tensor[(1089, 1), int32] */, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
    %27 = cast(meta[relay.Constant][4] /* ty=Tensor[(1089, 1), int32] */, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
    %28 = reshape(%26, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
    %29 = reshape(%27, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
    %30 = @func_560(%28, %29) /* ty=(Tensor[(11, 11, 9), int32],) */;
    %31 = cast(meta[relay.Constant][4] /* ty=Tensor[(1089, 1), int32] */, dtype="float64") /* ty=Tensor[(1089, 1), float64] */;
    %32 = asinh(%31) /* ty=Tensor[(1089, 1), float64] */;
    %33 = cast(%32, dtype="float32") /* ty=Tensor[(1089, 1), float32] */;
    %34 = log2(%33) /* ty=Tensor[(1089, 1), float32] */;
    %35 = cast(meta[relay.Constant][4] /* ty=Tensor[(1089, 1), int32] */, dtype="uint64") /* ty=Tensor[(1089, 1), uint64] */;
    %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(2), int32] */;
    %37 = cast(%34, dtype="uint64") /* ty=Tensor[(1089, 1), uint64] */;
    %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %39 = maximum(%19, %20) /* ty=Tensor[(13, 13), float32] */;
    %40 = %25.0;
    %41 = %30.0;
    %42 = bitwise_or(%37, %38) /* ty=Tensor[(1089, ?), uint64] */;
    (%39, %40, meta[relay.Constant][2] /* ty=Tensor[(1716), float64] */, meta[relay.Constant][3] /* ty=Tensor[(720, 1), float32] */, %41, %42)
  };
  %43(%var_2143, %var_2144) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) */
}

def @func_4724(%var_4722: Tensor[(660, 4), float32]) -> (Tensor[(13, 10, 6), float64], Tensor[(13, 10, 6), float32], Tensor[(1089), float32], Tensor[(13, 14, 9), int32], Tensor[(660, 4), float32], Tensor[(720), float32], Tensor[(1089), float64]) {
  @func_4721(%var_4722) /* ty=(Tensor[(13, 10, 6), float64], Tensor[(13, 10, 6), float32], Tensor[(1089), float32], Tensor[(13, 14, 9), int32], Tensor[(660, 4), float32], Tensor[(720), float32], Tensor[(1089), float64]) */
}

def @func_564(%var_562: Tensor[(11, 11, 9), int32], %var_563: Tensor[(11, 11, 9), int32]) -> (Tensor[(11, 11, 9), int32],) {
  @func_560(%var_562, %var_563) /* ty=(Tensor[(11, 11, 9), int32],) */
}

def @func_5376(%var_5369: Tensor[(1089), float64]) -> Tensor[(1089), float64] {
  %44 = @func_4202() /* ty=(Tensor[(1089), float64],) */;
  %45 = %44.0;
  %46 = cast(%var_5369, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %47 = shape_of(%45, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = cast(%45, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?), float64] */;
  multiply(%48, %49) /* ty=Tensor[(1089), float64] */
}

def @func_6193() -> (Tensor[(13, 1, 13), float64], Tensor[(13, ?, 13), bool], Tensor[(13, 1, 13), float64]) {
  %62 = fn () -> (Tensor[(13, 1, 13), float64], Tensor[(13, ?, 13), bool], Tensor[(13, 1, 13), float64]) {
    %50 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
    %51 = cast(%50, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
    %52 = erf(%51) /* ty=Tensor[(13, 1, 13), float64] */;
    %53 = cast(%52, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
    %54 = cast(%52, dtype="bool") /* ty=Tensor[(13, 1, 13), bool] */;
    %55 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
    %56 = cast(%50, dtype="bool") /* ty=Tensor[(13, 1, 13), bool] */;
    %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %58 = cast(%50, dtype="float64") /* ty=Tensor[(13, 1, 13), float64] */;
    %59 = log(%53) /* ty=Tensor[(13, 1, 13), float64] */;
    %60 = greater(%56, %57) /* ty=Tensor[(13, ?, 13), bool] */;
    %61 = cosh(%58) /* ty=Tensor[(13, 1, 13), float64] */;
    (%59, %60, %61)
  };
  %62() /* ty=(Tensor[(13, 1, 13), float64], Tensor[(13, ?, 13), bool], Tensor[(13, 1, 13), float64]) */
}

def @func_5999(%var_5997: Tensor[(195, 15), uint16]) -> (Tensor[(13, 14, 9), int32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(13, 1, 13), float32], Tensor[(195, 15), float64], Tensor[(1089), float64], Tensor[(1089), float64]) {
  @func_5996(%var_5997) /* ty=(Tensor[(13, 14, 9), int32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(13, 1, 13), float32], Tensor[(195, 15), float64], Tensor[(1089), float64], Tensor[(1089), float64]) */
}

def @main(%var_6860: Tensor[(11, 1, 10), float64], %var_6861: Tensor[(11, 6, 10), float64]) -> (Tensor[(11, 6, 10), float64],) {
  %63 = cast(%var_6860, dtype="float64") /* ty=Tensor[(11, 1, 10), float64] */;
  %64 = cast(%var_6861, dtype="float64") /* ty=Tensor[(11, 6, 10), float64] */;
  %65 = floor_mod(%63, %64) /* ty=Tensor[(11, 6, 10), float64] */;
  (%65,)
}

def @func_6491() -> (Tensor[(13, 6, 13), float64], Tensor[(1089), float64], Tensor[(1089), float64], Tensor[(1089), float32]) {
  %74 = fn () -> (Tensor[(13, 6, 13), float64], Tensor[(1089), float64], Tensor[(1089), float64], Tensor[(1089), float32]) {
    %66 = @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */;
    %67 = cast(%66, dtype="float64") /* ty=Tensor[(13, 6, 13), float64] */;
    %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(1089), float64] */, dtype="float64") /* ty=Tensor[(1089), float64] */;
    %69 = reshape(%68, newshape=[1089]) /* ty=Tensor[(1089), float64] */;
    %70 = @func_5069() /* ty=(Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) */;
    %71 = cos(%67) /* ty=Tensor[(13, 6, 13), float64] */;
    %72 = @func_5376(%69) /* ty=Tensor[(1089), float64] */;
    %73 = %70.1;
    (%71, %72, meta[relay.Constant][5] /* ty=Tensor[(1089), float64] */, %73)
  };
  %74() /* ty=(Tensor[(13, 6, 13), float64], Tensor[(1089), float64], Tensor[(1089), float64], Tensor[(1089), float32]) */
}

def @func_3737(%var_3717: Tensor[(9, 4, 6), uint32]) -> (Tensor[(9, 4, 6), bool], Tensor[(1089), float32], Tensor[(1089), int32]) {
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 4, 6), uint32] */, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %76 = shape_of(%var_3717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_3717, dtype="bool") /* ty=Tensor[(9, 4, 6), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %80 = less(%77, %78) /* ty=Tensor[(9, 4, 6), bool] */;
  %81 = @func_3546() /* ty=Tensor[(1089), float32] */;
  %82 = %79.0;
  (%80, %81, %82)
}

def @func_4203() -> (Tensor[(1089), float64],) {
  %86 = fn () -> (Tensor[(1089), float64],) {
    %83 = @func_2801() /* ty=Tensor[(1089), float32] */;
    %84 = cast(%83, dtype="float64") /* ty=Tensor[(1089), float64] */;
    %85 = log2(%84) /* ty=Tensor[(1089), float64] */;
    (%85,)
  };
  %86() /* ty=(Tensor[(1089), float64],) */
}

def @func_3383() -> Tensor[(14, 5, 4), float32] {
  %87 = @func_2559() /* ty=(Tensor[(14, 5, 4), float32],) */;
  %87.0
}

def @func_3484() -> Tensor[(14, 5, 4), int64] {
  %88 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %88.0
}

def @func_6747() -> Tensor[(14, 5, 4), int64] {
  %89 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
  %89.0
}

def @func_3190() -> (Tensor[(1089), float32],) {
  %91 = fn () -> (Tensor[(1089), float32],) {
    %90 = @func_3180() /* ty=Tensor[(1089), float32] */;
    (%90,)
  };
  %91() /* ty=(Tensor[(1089), float32],) */
}

def @func_5069() -> (Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) {
  %92 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
  %93 = @func_3180() /* ty=Tensor[(1089), float32] */;
  (%92, %93)
}

def @func_5000(%var_4998: Tensor[(13, 10, 13), float32]) -> (Tensor[(13, 10, 13), uint16],) {
  @func_4997(%var_4998) /* ty=(Tensor[(13, 10, 13), uint16],) */
}

def @func_2770(%var_2765: Tensor[(6, 13, 13), int8], %var_2766: Tensor[(1089), int32], %var_2767: Tensor[(1089), int32], %var_2768: int32, %var_2769: Tensor[(6, 13, 13), float32]) -> (Tensor[(6, 13, 13), int8], Tensor[(6, 13, 13), bool], Tensor[(13, 14, 9), int32], Tensor[(1089), bool], Tensor[(630), int32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(660), uint32], Tensor[(1, 132), uint32], Tensor[(16, 5, 9), float32], Tensor[(1, 660), uint32], int32, Tensor[(11, 12, 5), uint32], Tensor[(6, 13, 13), bool], Tensor[(16, 5, 9), float32], Tensor[(11, 156), float64]) {
  @func_2763(%var_2765, %var_2766, %var_2767, %var_2768, %var_2769) /* ty=(Tensor[(6, 13, 13), int8], Tensor[(6, 13, 13), bool], Tensor[(13, 14, 9), int32], Tensor[(1089), bool], Tensor[(630), int32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(660), uint32], Tensor[(1, 132), uint32], Tensor[(16, 5, 9), float32], Tensor[(1, 660), uint32], int32, Tensor[(11, 12, 5), uint32], Tensor[(6, 13, 13), bool], Tensor[(16, 5, 9), float32], Tensor[(11, 156), float64]) */
}

def @func_6812(%var_6787: Tensor[(720), float32], %var_6788: Tensor[(1, 660), uint32], %var_6789: Tensor[(132), uint32], %var_6795: Tensor[(12, 660), uint32]) -> (Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(11, 11, 9), int32], Tensor[(8, 18), float64], Tensor[(720), float32], Tensor[(132), uint32], Tensor[(12, 660), float64]) {
  %94 = @func_4804() /* ty=(Tensor[(1089), float32],) */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %97 = cast(%var_6787, dtype="float32") /* ty=Tensor[(720), float32] */;
  %98 = cast(%var_6788, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %99 = cast(%var_6789, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %100 = reshape(%95, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %101 = reshape(%96, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %102 = reshape(%97, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %103 = reshape(%98, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %104 = reshape(%99, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %105 = @func_2223(%100, %101, %102, %103, %104) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %106 = cast(%var_6788, dtype="float64") /* ty=Tensor[(1, 660), float64] */;
  %107 = cast(%var_6795, dtype="float64") /* ty=Tensor[(12, 660), float64] */;
  %108 = @func_2801() /* ty=Tensor[(1089), float32] */;
  %109 = %94.0;
  %110 = %105.0;
  %111 = floor_mod(%106, %107) /* ty=Tensor[(12, 660), float64] */;
  (%108, %109, %110, meta[relay.Constant][7] /* ty=Tensor[(8, 18), float64] */, %var_6787, %var_6789, %111)
}

def @func_3207(%var_3205: Tensor[(5, 16, 1), int64], %var_3206: Tensor[(5, 16, 13), int64]) -> (Tensor[(5, 16, 13), bool],) {
  %118 = fn (%var_3193: Tensor[(5, 16, 1), int64], %var_3194: Tensor[(5, 16, 13), int64]) -> (Tensor[(5, 16, 13), bool],) {
    %112 = cast(%var_3193, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
    %113 = cast(%var_3194, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
    %114 = less(%112, %113) /* ty=Tensor[(5, 16, 13), bool] */;
    %115 = cast(%var_3193, dtype="bool") /* ty=Tensor[(5, 16, 1), bool] */;
    %116 = cast(%114, dtype="bool") /* ty=Tensor[(5, 16, 13), bool] */;
    %117 = less_equal(%115, %116) /* ty=Tensor[(5, 16, 13), bool] */;
    (%117,)
  };
  %118(%var_3205, %var_3206) /* ty=(Tensor[(5, 16, 13), bool],) */
}

def @func_1995(%var_1931: Tensor[(1, 12, 6), float64], %var_1932: Tensor[(7, 12, 6), float64], %var_1943: Tensor[(1089), int32], %var_1985: Tensor[(1600), uint8]) -> (Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) {
  %119 = cast(%var_1931, dtype="float64") /* ty=Tensor[(1, 12, 6), float64] */;
  %120 = cast(%var_1932, dtype="float64") /* ty=Tensor[(7, 12, 6), float64] */;
  %121 = cast(%var_1943, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %122 = reshape(%121, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), int32] */;
  %123 = @func_1227(%122) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */;
  %124 = cast(%var_1985, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %125 = cast(%var_1985, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %126 = reshape(%124, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %127 = reshape(%125, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %128 = cast(meta[relay.Constant][8] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %129 = cast(meta[relay.Constant][9] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %130 = reshape(%128, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %131 = reshape(%129, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %132 = @func_161(%130, %131) /* ty=Tensor[(11, 12, 5), uint32] */;
  %133 = cast(meta[relay.Constant][9] /* ty=Tensor[(660), uint32] */, dtype="bool") /* ty=Tensor[(660), bool] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="bool") /* ty=Tensor[(11, 12, 5), bool] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %137 = subtract(%119, %120) /* ty=Tensor[(7, 12, 6), float64] */;
  %138 = %123.3;
  %139 = @func_1587(%126, %127) /* ty=Tensor[(16, 10, 10), float64] */;
  %140 = logical_or(%135, %136) /* ty=Tensor[(11, 12, 5), bool] */;
  (%137, %138, %var_1943, meta[relay.Constant][8] /* ty=Tensor[(132), uint32] */, %139, %var_1985, %140)
}

def @func_2503() -> (Tensor[(1089), int32],) {
  %143 = fn () -> (Tensor[(1089), int32],) {
    %141 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
    %142 = %141.4;
    (%142,)
  };
  %143() /* ty=(Tensor[(1089), int32],) */
}

def @func_3182() -> Tensor[(1089), float32] {
  @func_3180() /* ty=Tensor[(1089), float32] */
}

def @func_4017(%var_4014: Tensor[(11, 15, 16), float32], %var_4015: Tensor[(12, 60), float32], %var_4016: Tensor[(1089), int32]) -> (Tensor[(11, 15, 16), float32], Tensor[(13, 14, 9), int32], Tensor[(20, 2), float64], Tensor[(12, 60), float32], Tensor[(1089), int32]) {
  %154 = fn (%var_3977: Tensor[(11, 15, 16), float32], %var_3989: Tensor[(12, 60), float32], %var_3990: Tensor[(1089), int32]) -> (Tensor[(11, 15, 16), float32], Tensor[(13, 14, 9), int32], Tensor[(20, 2), float64], Tensor[(12, 60), float32], Tensor[(1089), int32]) {
    %144 = cast(%var_3977, dtype="float32") /* ty=Tensor[(11, 15, 16), float32] */;
    %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(20, 2), float64] */, dtype="float64") /* ty=Tensor[(20, 2), float64] */;
    %146 = cast(%var_3989, dtype="float32") /* ty=Tensor[(12, 60), float32] */;
    %147 = cast(%var_3990, dtype="int32") /* ty=Tensor[(1089), int32] */;
    %148 = reshape(%145, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
    %149 = reshape(%146, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %150 = reshape(%147, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
    %151 = @func_1413(%148, %149, %150) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
    %152 = rsqrt(%144) /* ty=Tensor[(11, 15, 16), float32] */;
    %153 = %151.3;
    (%152, %153, meta[relay.Constant][10] /* ty=Tensor[(20, 2), float64] */, %var_3989, %var_3990)
  };
  %154(%var_4014, %var_4015, %var_4016) /* ty=(Tensor[(11, 15, 16), float32], Tensor[(13, 14, 9), int32], Tensor[(20, 2), float64], Tensor[(12, 60), float32], Tensor[(1089), int32]) */
}

def @func_5925() -> (Tensor[(1089), float32], Tensor[(13, 1, 13), float32], Tensor[(720), int32], Tensor[(1, 720), float32]) {
  @func_5923() /* ty=(Tensor[(1089), float32], Tensor[(13, 1, 13), float32], Tensor[(720), int32], Tensor[(1, 720), float32]) */
}

def @func_2357() -> (Tensor[(14, 5, 4), int64],) {
  @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */
}

def @func_4806() -> (Tensor[(1089), float32],) {
  @func_4804() /* ty=(Tensor[(1089), float32],) */
}

def @func_1681(%var_1676: Tensor[(14, 16, 2), float64], %var_1677: Tensor[(40), float64], %var_1678: Tensor[(720), float32], %var_1679: Tensor[(121, 9), int32], %var_1680: Tensor[(121, 9), int32]) -> (Tensor[(14, 16, 2), float64], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(121, 9), float32]) {
  %170 = fn (%var_1654: Tensor[(14, 16, 2), float64], %var_1662: Tensor[(40), float64], %var_1663: Tensor[(720), float32], %var_1664: Tensor[(121, 9), int32], %var_1666: Tensor[(121, 9), int32]) -> (Tensor[(14, 16, 2), float64], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(121, 9), float32]) {
    %155 = cast(%var_1654, dtype="float64") /* ty=Tensor[(14, 16, 2), float64] */;
    %156 = cast(%var_1662, dtype="float64") /* ty=Tensor[(40), float64] */;
    %157 = cast(%var_1663, dtype="float32") /* ty=Tensor[(720), float32] */;
    %158 = cast(%var_1664, dtype="int32") /* ty=Tensor[(121, 9), int32] */;
    %159 = reshape(%156, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
    %160 = reshape(%157, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %161 = reshape(%158, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
    %162 = @func_1413(%159, %160, %161) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
    %163 = cast(%var_1666, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
    %164 = shape_of(%var_1664, dtype="int32") /* ty=Tensor[(2), int32] */;
    %165 = cast(%var_1664, dtype="float32") /* ty=Tensor[(121, 9), float32] */;
    %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %167 = exp(%155) /* ty=Tensor[(14, 16, 2), float64] */;
    %168 = %162.1;
    %169 = floor_divide(%165, %166) /* ty=Tensor[(121, 9), float32] */;
    (%167, %168, %var_1662, %var_1663, %169)
  };
  %170(%var_1676, %var_1677, %var_1678, %var_1679, %var_1680) /* ty=(Tensor[(14, 16, 2), float64], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(121, 9), float32]) */
}

def @func_6305(%var_6294: Tensor[(144), int64]) -> (Tensor[(14, 5, 4), int64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(720), float32], Tensor[(13, 10, 13), uint16], Tensor[(1690), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64]) {
  %171 = cast(meta[relay.Constant][11] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
  %172 = reshape(%171, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float64] */;
  %173 = @func_4798() /* ty=(Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) */;
  %174 = cast(meta[relay.Constant][12] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %175 = reshape(%174, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %176 = @func_4997(%175) /* ty=(Tensor[(13, 10, 13), uint16],) */;
  %177 = cast(%var_6294, dtype="int64") /* ty=Tensor[(144), int64] */;
  %178 = cast(%var_6294, dtype="int64") /* ty=Tensor[(144), int64] */;
  %179 = reshape(%177, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %180 = reshape(%178, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
  %181 = @func_4207() /* ty=Tensor[(14, 5, 4), int64] */;
  %182 = @func_3618(%172) /* ty=Tensor[(5, 7, 2), float64] */;
  %183 = %173.0;
  %184 = %176.0;
  %185 = @func_3464(%179, %180) /* ty=Tensor[(16, 3, 3), bool] */;
  (%181, %182, meta[relay.Constant][11] /* ty=Tensor[(70), float64] */, %183, %184, meta[relay.Constant][12] /* ty=Tensor[(1690), float32] */, %185, %var_6294)
}

def @func_2998() -> (Tensor[(5, 16, 15), float32], Tensor[(13, 13), float32], Tensor[(169), float32]) {
  %186 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 16, 15), float32] */;
  %187 = cast(meta[relay.Constant][14] /* ty=Tensor[(169), float32] */, dtype="float32") /* ty=Tensor[(169), float32] */;
  %188 = cast(meta[relay.Constant][14] /* ty=Tensor[(169), float32] */, dtype="float32") /* ty=Tensor[(169), float32] */;
  %189 = reshape(%187, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
  %190 = reshape(%188, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
  %191 = @func_2142(%189, %190) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) */;
  %192 = log2(%186) /* ty=Tensor[(5, 16, 15), float32] */;
  %193 = %191.0;
  (%192, %193, meta[relay.Constant][14] /* ty=Tensor[(169), float32] */)
}

def @func_2802() -> Tensor[(1089), float32] {
  %197 = fn () -> Tensor[(1089), float32] {
    %194 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
    %195 = %194.0;
    %196 = cast(%195, dtype="float32") /* ty=Tensor[(1089), float32] */;
    atanh(%196) /* ty=Tensor[(1089), float32] */
  };
  %197() /* ty=Tensor[(1089), float32] */
}

def @func_4601() -> Tensor[(13, 1, 13), float32] {
  @func_2950() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_4208() -> Tensor[(14, 5, 4), int64] {
  %199 = fn () -> Tensor[(14, 5, 4), int64] {
    %198 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
    %198.0
  };
  %199() /* ty=Tensor[(14, 5, 4), int64] */
}

def @func_6308(%var_6306: Tensor[(144), int64]) -> (Tensor[(14, 5, 4), int64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(720), float32], Tensor[(13, 10, 13), uint16], Tensor[(1690), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64]) {
  @func_6305(%var_6306) /* ty=(Tensor[(14, 5, 4), int64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(720), float32], Tensor[(13, 10, 13), uint16], Tensor[(1690), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64]) */
}

def @func_6571(%var_6569: Tensor[(70, 1), float64]) -> (Tensor[(1089), float64], Tensor[(1089), float32], Tensor[(1690), bool], Tensor[(5, 7, 2), float64], Tensor[(70, 1), float64]) {
  @func_6568(%var_6569) /* ty=(Tensor[(1089), float64], Tensor[(1089), float32], Tensor[(1690), bool], Tensor[(5, 7, 2), float64], Tensor[(70, 1), float64]) */
}

def @func_6818(%var_6814: Tensor[(720), float32], %var_6815: Tensor[(1, 660), uint32], %var_6816: Tensor[(132), uint32], %var_6817: Tensor[(12, 660), uint32]) -> (Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(11, 11, 9), int32], Tensor[(8, 18), float64], Tensor[(720), float32], Tensor[(132), uint32], Tensor[(12, 660), float64]) {
  @func_6812(%var_6814, %var_6815, %var_6816, %var_6817) /* ty=(Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(11, 11, 9), int32], Tensor[(8, 18), float64], Tensor[(720), float32], Tensor[(132), uint32], Tensor[(12, 660), float64]) */
}

def @func_1590(%var_1588: Tensor[(16, 10, 10), uint8], %var_1589: Tensor[(16, 10, 10), uint8]) -> Tensor[(16, 10, 10), float64] {
  %206 = fn (%var_1574: Tensor[(16, 10, 10), uint8], %var_1575: Tensor[(16, 10, 10), uint8]) -> Tensor[(16, 10, 10), float64] {
    %200 = cast(%var_1575, dtype="uint8") /* ty=Tensor[(16, 10, 10), uint8] */;
    %201 = shape_of(%var_1574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %202 = cast(%var_1574, dtype="uint8") /* ty=Tensor[(16, 10, 10), uint8] */;
    %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %204 = bitwise_and(%202, %203) /* ty=Tensor[(16, 10, 10), uint8] */;
    %205 = cast(%204, dtype="float64") /* ty=Tensor[(16, 10, 10), float64] */;
    exp(%205) /* ty=Tensor[(16, 10, 10), float64] */
  };
  %206(%var_1588, %var_1589) /* ty=Tensor[(16, 10, 10), float64] */
}

def @func_5923() -> (Tensor[(1089), float32], Tensor[(13, 1, 13), float32], Tensor[(720), int32], Tensor[(1, 720), float32]) {
  %207 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %208 = reshape(%207, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %209 = @func_4966(%208) /* ty=(Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(13, 14, 9), int32], Tensor[(720), int32], Tensor[(216), uint32], Tensor[(72), float64], Tensor[(14, 5, 4), int64], Tensor[(1089), float32], Tensor[(16, 5, 9), float32], Tensor[(22, 78), float64], Tensor[(11, 11, 9), int32], Tensor[(169, 1), float32]) */;
  %210 = @func_4178() /* ty=Tensor[(1089), float32] */;
  %211 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %212 = %209.5;
  (%210, %211, %212, meta[relay.Constant][15] /* ty=Tensor[(1, 720), float32] */)
}

def @func_4498(%var_4497: Tensor[(1040), int64]) -> (Tensor[(1089), float64], Tensor[(5, 16, 13), bool], Tensor[(2, 40), int64], Tensor[(1040), int64]) {
  %223 = fn (%var_4494: Tensor[(1040), int64]) -> (Tensor[(1089), float64], Tensor[(5, 16, 13), bool], Tensor[(2, 40), int64], Tensor[(1040), int64]) {
    %213 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
    %214 = %213.0;
    %215 = cast(%214, dtype="float64") /* ty=Tensor[(1089), float64] */;
    %216 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 40), int64] */, dtype="int64") /* ty=Tensor[(2, 40), int64] */;
    %217 = cast(%var_4494, dtype="int64") /* ty=Tensor[(1040), int64] */;
    %218 = reshape(%216, newshape=[5, 16, 1]) /* ty=Tensor[(5, 16, 1), int64] */;
    %219 = reshape(%217, newshape=[5, 16, 13]) /* ty=Tensor[(5, 16, 13), int64] */;
    %220 = @func_3204(%218, %219) /* ty=(Tensor[(5, 16, 13), bool],) */;
    %221 = cos(%215) /* ty=Tensor[(1089), float64] */;
    %222 = %220.0;
    (%221, %222, meta[relay.Constant][16] /* ty=Tensor[(2, 40), int64] */, %var_4494)
  };
  %223(%var_4497) /* ty=(Tensor[(1089), float64], Tensor[(5, 16, 13), bool], Tensor[(2, 40), int64], Tensor[(1040), int64]) */
}

def @func_4179() -> Tensor[(1089), float32] {
  %225 = fn () -> Tensor[(1089), float32] {
    %224 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
    %224.0
  };
  %225() /* ty=Tensor[(1089), float32] */
}

def @func_6412(%var_6410: Tensor[(1, 8, 14), uint32], %var_6411: Tensor[(14, 8, 14), uint32]) -> Tensor[(14, 8, 14), uint8] {
  @func_6408(%var_6410, %var_6411) /* ty=Tensor[(14, 8, 14), uint8] */
}

def @func_6408(%var_6386: Tensor[(1, 8, 14), uint32], %var_6387: Tensor[(14, 8, 14), uint32]) -> Tensor[(14, 8, 14), uint8] {
  %226 = cast(%var_6386, dtype="bool") /* ty=Tensor[(1, 8, 14), bool] */;
  %227 = cast(%var_6387, dtype="bool") /* ty=Tensor[(14, 8, 14), bool] */;
  %228 = equal(%226, %227) /* ty=Tensor[(14, 8, 14), bool] */;
  %229 = cast(%228, dtype="float32") /* ty=Tensor[(14, 8, 14), float32] */;
  %230 = acosh(%229) /* ty=Tensor[(14, 8, 14), float32] */;
  %231 = cast(%230, dtype="uint8") /* ty=Tensor[(14, 8, 14), uint8] */;
  %232 = cast(%var_6386, dtype="uint8") /* ty=Tensor[(1, 8, 14), uint8] */;
  logical_xor(%231, %232) /* ty=Tensor[(14, 8, 14), uint8] */
}

def @func_2427() -> Tensor[(14, 5, 4), int64] {
  %233 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
  %233.0
}

def @func_5622(%var_5619: Tensor[(1089), float64], %var_5620: Tensor[(1089), float64], %var_5621: Tensor[(10, 4), float64]) -> (Tensor[(1089), float64], Tensor[(121, 9), float32], Tensor[(112, 4), float64], Tensor[(10, 4), float64], Tensor[(720), float32], Tensor[(1089), bool]) {
  @func_5617(%var_5619, %var_5620, %var_5621) /* ty=(Tensor[(1089), float64], Tensor[(121, 9), float32], Tensor[(112, 4), float64], Tensor[(10, 4), float64], Tensor[(720), float32], Tensor[(1089), bool]) */
}

def @func_6454() -> (Tensor[(1089), float32],) {
  @func_6452() /* ty=(Tensor[(1089), float32],) */
}

def @func_6623() -> (Tensor[(1089), float32],) {
  @func_6621() /* ty=(Tensor[(1089), float32],) */
}

def @func_2763(%var_2688: Tensor[(6, 13, 13), int8], %var_2702: Tensor[(1089), int32], %var_2717: Tensor[(1089), int32], %var_2739: int32, %var_2745: Tensor[(6, 13, 13), float32]) -> (Tensor[(6, 13, 13), int8], Tensor[(6, 13, 13), bool], Tensor[(13, 14, 9), int32], Tensor[(1089), bool], Tensor[(630), int32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(660), uint32], Tensor[(1, 132), uint32], Tensor[(16, 5, 9), float32], Tensor[(1, 660), uint32], int32, Tensor[(11, 12, 5), uint32], Tensor[(6, 13, 13), bool], Tensor[(16, 5, 9), float32], Tensor[(11, 156), float64]) {
  %234 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 13), int8] */, dtype="int8") /* ty=Tensor[(6, 13, 13), int8] */;
  %235 = shape_of(%var_2688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%var_2688, dtype="int8") /* ty=Tensor[(6, 13, 13), int8] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 13), int8] */, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %239 = shape_of(%var_2688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%var_2688, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %242 = cast(%var_2702, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %243 = reshape(%242, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), int32] */;
  %244 = @func_1227(%243) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */;
  %245 = cast(%var_2717, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %246 = shape_of(%var_2702, dtype="int32") /* ty=Tensor[(1), int32] */;
  %247 = cast(%var_2702, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?), bool] */;
  %249 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %250 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %251 = cast(meta[relay.Constant][19] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %252 = cast(meta[relay.Constant][20] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %253 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %254 = reshape(%249, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %255 = reshape(%250, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %256 = reshape(%251, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %257 = reshape(%252, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %258 = reshape(%253, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %259 = @func_2223(%254, %255, %256, %257, %258) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %260 = cast(meta[relay.Constant][19] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %261 = reshape(%260, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %262 = cast(%var_2739, dtype="int32") /* ty=int32 */;
  %263 = %259.8;
  %264 = cast(%263, dtype="int32") /* ty=Tensor[(630), int32] */;
  %265 = cast(meta[relay.Constant][20] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %266 = reshape(%262, newshape=[]) /* ty=int32 */;
  %267 = reshape(%264, newshape=[7, 10, 9]) /* ty=Tensor[(7, 10, 9), int32] */;
  %268 = reshape(%265, newshape=[1, 660]) /* ty=Tensor[(1, 660), uint32] */;
  %269 = @func_2076(%266, %267, %268) /* ty=(Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) */;
  %270 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %271 = cast(meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %272 = @func_57(%261) /* ty=Tensor[(16, 5, 9), float32] */;
  %273 = cast(%272, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %274 = cast(meta[relay.Constant][20] /* ty=Tensor[(660), uint32] */, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %275 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 132), uint32] */, dtype="uint32") /* ty=Tensor[(1, 132), uint32] */;
  %276 = reshape(%270, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %277 = reshape(%271, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %278 = reshape(%273, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %279 = reshape(%274, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %280 = reshape(%275, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %281 = @func_2223(%276, %277, %278, %279, %280) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %282 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 13), int8] */, dtype="float32") /* ty=Tensor[(6, 13, 13), float32] */;
  %283 = cosh(%282) /* ty=Tensor[(6, 13, 13), float32] */;
  %284 = cast(%var_2745, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %285 = shape_of(%283, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%283, dtype="bool") /* ty=Tensor[(6, 13, 13), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = cast(meta[relay.Constant][22] /* ty=Tensor[(11, 156), float64] */, dtype="float64") /* ty=Tensor[(11, 156), float64] */;
  %289 = cast(%272, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  %290 = reshape(%288, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float64] */;
  %291 = reshape(%289, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %292 = @func_383(%290, %291) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */;
  %293 = right_shift(%236, %237) /* ty=Tensor[(6, 13, 13), int8] */;
  %294 = less(%240, %241) /* ty=Tensor[(6, 13, 13), bool] */;
  %295 = %244.3;
  %296 = less_equal(%247, %248) /* ty=Tensor[(1089), bool] */;
  %297 = %269.3;
  %298 = %281.10;
  %299 = less_equal(%286, %287) /* ty=Tensor[(6, 13, 13), bool] */;
  %300 = %292.1;
  (%293, %294, %295, %296, %263, meta[relay.Constant][18] /* ty=Tensor[(144), float64] */, meta[relay.Constant][19] /* ty=Tensor[(720), float32] */, meta[relay.Constant][20] /* ty=Tensor[(660), uint32] */, meta[relay.Constant][21] /* ty=Tensor[(1, 132), uint32] */, %272, %297, %var_2739, %298, %299, %300, meta[relay.Constant][22] /* ty=Tensor[(11, 156), float64] */)
}

def @func_2930(%var_2878: Tensor[(1, 13, 15), uint16], %var_2879: Tensor[(15, 13, 15), uint16]) -> (Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) {
  %301 = cast(%var_2878, dtype="bool") /* ty=Tensor[(1, 13, 15), bool] */;
  %302 = cast(%var_2879, dtype="bool") /* ty=Tensor[(15, 13, 15), bool] */;
  %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %304 = cast(meta[relay.Constant][23] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %305 = reshape(%303, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %306 = reshape(%304, newshape=[16, 10, 10]) /* ty=Tensor[(16, 10, 10), uint8] */;
  %307 = @func_1587(%305, %306) /* ty=Tensor[(16, 10, 10), float64] */;
  %308 = cast(meta[relay.Constant][23] /* ty=Tensor[(1600), uint8] */, dtype="int32") /* ty=Tensor[(1600), int32] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="int32") /* ty=Tensor[(16, 10, 10), int32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(1600), uint8] */, dtype="float64") /* ty=Tensor[(1600), float64] */;
  %313 = greater(%301, %302) /* ty=Tensor[(15, 13, 15), bool] */;
  %314 = minimum(%310, %311) /* ty=Tensor[(16, 10, 10), int32] */;
  %315 = sigmoid(%312) /* ty=Tensor[(1600), float64] */;
  %316 = @func_2801() /* ty=Tensor[(1089), float32] */;
  (%313, %314, %315, %316)
}

def @func_3345() -> Tensor[(1089), float32] {
  @func_3343() /* ty=Tensor[(1089), float32] */
}

def @func_3160() -> (Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) {
  %317 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 3, 6), float64] */, dtype="float64") /* ty=Tensor[(16, 3, 6), float64] */;
  %318 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 720), float32] */, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %319 = reshape(%318, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %320 = cos(%317) /* ty=Tensor[(16, 3, 6), float64] */;
  %321 = @func_57(%319) /* ty=Tensor[(16, 5, 9), float32] */;
  (%320, %321, meta[relay.Constant][25] /* ty=Tensor[(1, 720), float32] */)
}

def @func_5271(%var_5269: Tensor[(15, 10, 3), float64]) -> (Tensor[(15, 10, 3), float64],) {
  @func_5268(%var_5269) /* ty=(Tensor[(15, 10, 3), float64],) */
}

def @func_2561() -> (Tensor[(14, 5, 4), float32],) {
  @func_2559() /* ty=(Tensor[(14, 5, 4), float32],) */
}

def @func_2951() -> Tensor[(13, 1, 13), float32] {
  %323 = fn () -> Tensor[(13, 1, 13), float32] {
    %322 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 1, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 13), float32] */;
    acosh(%322) /* ty=Tensor[(13, 1, 13), float32] */
  };
  %323() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_5071() -> (Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) {
  @func_5069() /* ty=(Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) */
}

def @func_383(%var_357: Tensor[(13, 12, 11), float64], %var_380: Tensor[(720), float32]) -> (Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) {
  %324 = cast(meta[relay.Constant][27] /* ty=Tensor[(13, 12, 11), float64] */, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
  %325 = shape_of(%var_357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_357, dtype="bool") /* ty=Tensor[(13, 12, 11), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %328 = cast(%var_380, dtype="float32") /* ty=Tensor[(720), float32] */;
  %329 = reshape(%328, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
  %330 = greater_equal(%326, %327) /* ty=Tensor[(13, 12, 11), bool] */;
  %331 = @func_57(%329) /* ty=Tensor[(16, 5, 9), float32] */;
  (%330, %331, %var_380)
}

def @func_3621(%var_3619: Tensor[(5, 7, 2), float64]) -> Tensor[(5, 7, 2), float64] {
  @func_3618(%var_3619) /* ty=Tensor[(5, 7, 2), float64] */
}

def @func_5704() -> Tensor[(1089), float32] {
  %332 = fn () -> Tensor[(1089), float32] {
    @func_3343() /* ty=Tensor[(1089), float32] */
  };
  %332() /* ty=Tensor[(1089), float32] */
}

def @func_6568(%var_6563: Tensor[(70, 1), float64]) -> (Tensor[(1089), float64], Tensor[(1089), float32], Tensor[(1690), bool], Tensor[(5, 7, 2), float64], Tensor[(70, 1), float64]) {
  %333 = @func_4798() /* ty=(Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) */;
  %334 = %333.2;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="float32") /* ty=Tensor[(1690), float32] */;
  %337 = reshape(%336, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float32] */;
  %338 = @func_4997(%337) /* ty=(Tensor[(13, 10, 13), uint16],) */;
  %339 = %338.0;
  %340 = cast(%339, dtype="bool") /* ty=Tensor[(13, 10, 13), bool] */;
  %341 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %342 = cast(meta[relay.Constant][28] /* ty=Tensor[(1690), float32] */, dtype="bool") /* ty=Tensor[(1690), bool] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?), bool] */;
  %344 = cast(%var_6563, dtype="float64") /* ty=Tensor[(70, 1), float64] */;
  %345 = reshape(%344, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float64] */;
  %346 = sinh(%335) /* ty=Tensor[(1089), float64] */;
  %347 = @func_3546() /* ty=Tensor[(1089), float32] */;
  %348 = logical_or(%342, %343) /* ty=Tensor[(1690), bool] */;
  %349 = @func_3618(%345) /* ty=Tensor[(5, 7, 2), float64] */;
  (%346, %347, %348, %349, %var_6563)
}

def @func_3900(%var_3871: Tensor[(72), float64], %var_3873: Tensor[(216), uint32]) -> (Tensor[(1089), float32], Tensor[(252, 2), float64], Tensor[(72), float64], Tensor[(1600), uint8], Tensor[(216), uint32]) {
  %350 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
  %351 = cast(%var_3871, dtype="float64") /* ty=Tensor[(72), float64] */;
  %352 = cast(meta[relay.Constant][29] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %353 = cast(%var_3873, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %354 = reshape(%351, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %355 = reshape(%352, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %356 = reshape(%353, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %357 = @func_3862(%354, %355, %356) /* ty=(Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) */;
  %358 = %350.0;
  %359 = %357.6;
  (%358, %359, %var_3871, meta[relay.Constant][29] /* ty=Tensor[(1600), uint8] */, %var_3873)
}

def @func_6116() -> Tensor[(7, 2, 16), float32] {
  @func_6114() /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_5547(%var_5545: Tensor[(504), float64], %var_5546: Tensor[(1, 1089), int32]) -> (Tensor[(16, 5, 9), float64], Tensor[(16, 10, 10), float64], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1, 1089), int32], Tensor[(1600, 1), uint8]) {
  %372 = fn (%var_5536: Tensor[(504), float64], %var_5537: Tensor[(1, 1089), int32]) -> (Tensor[(16, 5, 9), float64], Tensor[(16, 10, 10), float64], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1, 1089), int32], Tensor[(1600, 1), uint8]) {
    %360 = @func_5321() /* ty=(Tensor[(16, 5, 9), float64],) */;
    %361 = cast(meta[relay.Constant][30] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %362 = cast(%var_5536, dtype="float64") /* ty=Tensor[(504), float64] */;
    %363 = cast(%var_5537, dtype="int32") /* ty=Tensor[(1, 1089), int32] */;
    %364 = cast(meta[relay.Constant][31] /* ty=Tensor[(1600, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1600, 1), uint8] */;
    %365 = reshape(%361, newshape=[1, 12, 6]) /* ty=Tensor[(1, 12, 6), float64] */;
    %366 = reshape(%362, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), float64] */;
    %367 = reshape(%363, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
    %368 = reshape(%364, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
    %369 = @func_1995(%365, %366, %367, %368) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */;
    %370 = %360.0;
    %371 = %369.4;
    (%370, %371, meta[relay.Constant][30] /* ty=Tensor[(72), float64] */, %var_5536, %var_5537, meta[relay.Constant][31] /* ty=Tensor[(1600, 1), uint8] */)
  };
  %372(%var_5545, %var_5546) /* ty=(Tensor[(16, 5, 9), float64], Tensor[(16, 10, 10), float64], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1, 1089), int32], Tensor[(1600, 1), uint8]) */
}

def @func_4373() -> (Tensor[(720), float32], Tensor[(2, 20), float64], Tensor[(180, 4), float32], Tensor[(1089), float32]) {
  @func_4371() /* ty=(Tensor[(720), float32], Tensor[(2, 20), float64], Tensor[(180, 4), float32], Tensor[(1089), float32]) */
}

def @func_3343() -> Tensor[(1089), float32] {
  %373 = @func_3189() /* ty=(Tensor[(1089), float32],) */;
  %373.0
}

def @func_2001(%var_1997: Tensor[(1, 12, 6), float64], %var_1998: Tensor[(7, 12, 6), float64], %var_1999: Tensor[(1089), int32], %var_2000: Tensor[(1600), uint8]) -> (Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) {
  @func_1995(%var_1997, %var_1998, %var_1999, %var_2000) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */
}

def @func_4968(%var_4967: Tensor[(720), float32]) -> (Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(13, 14, 9), int32], Tensor[(720), int32], Tensor[(216), uint32], Tensor[(72), float64], Tensor[(14, 5, 4), int64], Tensor[(1089), float32], Tensor[(16, 5, 9), float32], Tensor[(22, 78), float64], Tensor[(11, 11, 9), int32], Tensor[(169, 1), float32]) {
  %408 = fn (%var_4904: Tensor[(720), float32]) -> (Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(13, 14, 9), int32], Tensor[(720), int32], Tensor[(216), uint32], Tensor[(72), float64], Tensor[(14, 5, 4), int64], Tensor[(1089), float32], Tensor[(16, 5, 9), float32], Tensor[(22, 78), float64], Tensor[(11, 11, 9), int32], Tensor[(169, 1), float32]) {
    %374 = cast(meta[relay.Constant][32] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %375 = cast(meta[relay.Constant][32] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %376 = reshape(%374, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
    %377 = reshape(%375, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
    %378 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
    %379 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
    %380 = %379.3;
    %381 = cast(%var_4904, dtype="int32") /* ty=Tensor[(720), int32] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(1), int32] */;
    %383 = cast(%380, dtype="int32") /* ty=Tensor[(720), int32] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?), int32] */;
    %385 = cast(meta[relay.Constant][33] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %386 = reshape(%385, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %387 = @func_4312(%386) /* ty=(Tensor[(14, 5, 4), int64], Tensor[(72), float64], Tensor[(216), uint32], Tensor[(252, 2), float64]) */;
    %388 = cast(meta[relay.Constant][34] /* ty=Tensor[(22, 78), float64] */, dtype="float64") /* ty=Tensor[(22, 78), float64] */;
    %389 = bitwise_or(%383, %384) /* ty=Tensor[(720), int32] */;
    %390 = cast(%389, dtype="float32") /* ty=Tensor[(720), float32] */;
    %391 = reshape(%388, newshape=[13, 12, 11]) /* ty=Tensor[(13, 12, 11), float64] */;
    %392 = reshape(%390, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %393 = @func_383(%391, %392) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */;
    %394 = cast(meta[relay.Constant][35] /* ty=Tensor[(169, 1), float32] */, dtype="float32") /* ty=Tensor[(169, 1), float32] */;
    %395 = cast(meta[relay.Constant][35] /* ty=Tensor[(169, 1), float32] */, dtype="float32") /* ty=Tensor[(169, 1), float32] */;
    %396 = reshape(%394, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
    %397 = reshape(%395, newshape=[13, 13]) /* ty=Tensor[(13, 13), float32] */;
    %398 = @func_2142(%396, %397) /* ty=(Tensor[(13, 13), float32], Tensor[(13, 12, 11), bool], Tensor[(1716), float64], Tensor[(720, 1), float32], Tensor[(11, 11, 9), int32], Tensor[(1089, ?), uint64]) */;
    %399 = @func_3343() /* ty=Tensor[(1089), float32] */;
    %400 = @func_2801() /* ty=Tensor[(1089), float32] */;
    %401 = @func_3464(%376, %377) /* ty=Tensor[(16, 3, 3), bool] */;
    %402 = %378.1;
    %403 = %387.2;
    %404 = @func_4207() /* ty=Tensor[(14, 5, 4), int64] */;
    %405 = @func_3180() /* ty=Tensor[(1089), float32] */;
    %406 = %393.1;
    %407 = %398.4;
    (%399, %400, %401, meta[relay.Constant][32] /* ty=Tensor[(144), int64] */, %402, %389, %403, meta[relay.Constant][33] /* ty=Tensor[(72), float64] */, %404, %405, %406, meta[relay.Constant][34] /* ty=Tensor[(22, 78), float64] */, %407, meta[relay.Constant][35] /* ty=Tensor[(169, 1), float32] */)
  };
  %408(%var_4967) /* ty=(Tensor[(1089), float32], Tensor[(1089), float32], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(13, 14, 9), int32], Tensor[(720), int32], Tensor[(216), uint32], Tensor[(72), float64], Tensor[(14, 5, 4), int64], Tensor[(1089), float32], Tensor[(16, 5, 9), float32], Tensor[(22, 78), float64], Tensor[(11, 11, 9), int32], Tensor[(169, 1), float32]) */
}

def @func_5322() -> (Tensor[(16, 5, 9), float64],) {
  %413 = fn () -> (Tensor[(16, 5, 9), float64],) {
    %409 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
    %410 = %409.1;
    %411 = cast(%410, dtype="float64") /* ty=Tensor[(16, 5, 9), float64] */;
    %412 = log10(%411) /* ty=Tensor[(16, 5, 9), float64] */;
    (%412,)
  };
  %413() /* ty=(Tensor[(16, 5, 9), float64],) */
}

def @func_2230(%var_2225: Tensor[(3, 8, 6), float64], %var_2226: Tensor[(3, 8, 6), float64], %var_2227: Tensor[(1, 720), float32], %var_2228: Tensor[(660), uint32], %var_2229: Tensor[(132), uint32]) -> (Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) {
  @func_2223(%var_2225, %var_2226, %var_2227, %var_2228, %var_2229) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */
}

def @func_3663() -> (Tensor[(1089), float32],) {
  %414 = @func_3180() /* ty=Tensor[(1089), float32] */;
  (%414,)
}

def @func_4578(%var_4539: Tensor[(9, 10, 15), float32], %var_4549: Tensor[(720), float32], %var_4551: Tensor[(132), uint32]) -> (Tensor[(9, 10, 15), float32], Tensor[(1089), int32], Tensor[(660), uint32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(1, 660), uint32], Tensor[(132), uint32]) {
  %415 = cast(%var_4539, dtype="float32") /* ty=Tensor[(9, 10, 15), float32] */;
  %416 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %417 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %418 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %419 = cast(%var_4549, dtype="float32") /* ty=Tensor[(720), float32] */;
  %420 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 660), uint32] */, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %421 = cast(%var_4551, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %422 = reshape(%417, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %423 = reshape(%418, newshape=[3, 8, 6]) /* ty=Tensor[(3, 8, 6), float64] */;
  %424 = reshape(%419, newshape=[1, 720]) /* ty=Tensor[(1, 720), float32] */;
  %425 = reshape(%420, newshape=[660]) /* ty=Tensor[(660), uint32] */;
  %426 = reshape(%421, newshape=[132]) /* ty=Tensor[(132), uint32] */;
  %427 = @func_2223(%422, %423, %424, %425, %426) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) */;
  %428 = asin(%415) /* ty=Tensor[(9, 10, 15), float32] */;
  %429 = %416.0;
  %430 = %427.9;
  (%428, %429, %430, meta[relay.Constant][36] /* ty=Tensor[(144), float64] */, %var_4549, meta[relay.Constant][37] /* ty=Tensor[(1, 660), uint32] */, %var_4551)
}

def @func_6621() -> (Tensor[(1089), float32],) {
  %431 = @func_3546() /* ty=Tensor[(1089), float32] */;
  (%431,)
}

def @func_5938() -> Tensor[(1089), float32] {
  %433 = fn () -> Tensor[(1089), float32] {
    %432 = @func_5069() /* ty=(Tensor[(14, 5, 4), float32], Tensor[(1089), float32]) */;
    %432.1
  };
  %433() /* ty=Tensor[(1089), float32] */
}

def @func_2223(%var_2182: Tensor[(3, 8, 6), float64], %var_2190: Tensor[(3, 8, 6), float64], %var_2202: Tensor[(1, 720), float32], %var_2211: Tensor[(660), uint32], %var_2218: Tensor[(132), uint32]) -> (Tensor[(11, 11, 9), int32], Tensor[(1089), int32], Tensor[(3, 8, 6), bool], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(1, 720), float32], Tensor[(1, 660), uint32], int32, Tensor[(630), int32], Tensor[(660), uint32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32]) {
  %434 = cast(meta[relay.Constant][38] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %435 = cast(meta[relay.Constant][38] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %436 = reshape(%434, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %437 = reshape(%435, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
  %438 = @func_560(%436, %437) /* ty=(Tensor[(11, 11, 9), int32],) */;
  %439 = cast(%var_2182, dtype="float64") /* ty=Tensor[(3, 8, 6), float64] */;
  %440 = log2(%439) /* ty=Tensor[(3, 8, 6), float64] */;
  %441 = cast(%var_2190, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%440, dtype="bool") /* ty=Tensor[(3, 8, 6), bool] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %445 = cast(meta[relay.Constant][39] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %446 = cast(%var_2202, dtype="float32") /* ty=Tensor[(1, 720), float32] */;
  %447 = %438.0;
  %448 = cast(%447, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %449 = reshape(%445, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %450 = reshape(%446, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %451 = reshape(%448, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %452 = @func_1413(%449, %450, %451) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %453 = cast(-5 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %454 = cast(meta[relay.Constant][40] /* ty=Tensor[(630), int32] */, dtype="int32") /* ty=Tensor[(630), int32] */;
  %455 = cast(%var_2211, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %456 = reshape(%453, newshape=[]) /* ty=int32 */;
  %457 = reshape(%454, newshape=[7, 10, 9]) /* ty=Tensor[(7, 10, 9), int32] */;
  %458 = reshape(%455, newshape=[1, 660]) /* ty=Tensor[(1, 660), uint32] */;
  %459 = @func_2076(%456, %457, %458) /* ty=(Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) */;
  %460 = cast(%var_2218, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %461 = %459.3;
  %462 = cast(%461, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
  %463 = reshape(%460, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %464 = reshape(%462, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %465 = greater_equal(%443, %444) /* ty=Tensor[(3, 8, 6), bool] */;
  %466 = %452.1;
  %467 = @func_161(%463, %464) /* ty=Tensor[(11, 12, 5), uint32] */;
  (%447, meta[relay.Constant][38] /* ty=Tensor[(1089), int32] */, %465, %466, meta[relay.Constant][39] /* ty=Tensor[(40), float64] */, %var_2202, %461, -5 /* ty=int32 */, meta[relay.Constant][40] /* ty=Tensor[(630), int32] */, %var_2211, %467, %var_2218)
}

def @func_2559() -> (Tensor[(14, 5, 4), float32],) {
  %468 = @func_2427() /* ty=Tensor[(14, 5, 4), int64] */;
  %469 = cast(%468, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
  %470 = acos(%469) /* ty=Tensor[(14, 5, 4), float32] */;
  (%470,)
}

def @func_5526(%var_5525: Tensor[(3, 16, 14), float32]) -> (Tensor[(1089), int32], Tensor[(3, 16, 14), float64], Tensor[(14, 5, 4), int64]) {
  %481 = fn (%var_5465: Tensor[(3, 16, 14), float32]) -> (Tensor[(1089), int32], Tensor[(3, 16, 14), float64], Tensor[(14, 5, 4), int64]) {
    %471 = @func_5135() /* ty=(Tensor[(1089), int32],) */;
    %472 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 16, 14), float32] */, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
    %473 = shape_of(%var_5465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %474 = cast(%var_5465, dtype="float32") /* ty=Tensor[(3, 16, 14), float32] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %476 = floor_mod(%474, %475) /* ty=Tensor[(3, 16, 14), float32] */;
    %477 = cast(%476, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
    %478 = %471.0;
    %479 = sqrt(%477) /* ty=Tensor[(3, 16, 14), float64] */;
    %480 = @func_2464() /* ty=Tensor[(14, 5, 4), int64] */;
    (%478, %479, %480)
  };
  %481(%var_5525) /* ty=(Tensor[(1089), int32], Tensor[(3, 16, 14), float64], Tensor[(14, 5, 4), int64]) */
}

def @func_3665() -> (Tensor[(1089), float32],) {
  @func_3663() /* ty=(Tensor[(1089), float32],) */
}

def @func_3464(%var_3444: Tensor[(16, 3, 3), int64], %var_3445: Tensor[(16, 3, 3), int64]) -> Tensor[(16, 3, 3), bool] {
  %482 = cast(%var_3445, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
  %483 = shape_of(%var_3444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_3444, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%484, %485) /* ty=Tensor[(16, 3, 3), bool] */
}

def @func_5136() -> (Tensor[(1089), int32],) {
  %488 = fn () -> (Tensor[(1089), int32],) {
    %486 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
    %487 = %486.0;
    (%487,)
  };
  %488() /* ty=(Tensor[(1089), int32],) */
}

def @func_4997(%var_4985: Tensor[(13, 10, 13), float32]) -> (Tensor[(13, 10, 13), uint16],) {
  %489 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %490 = cast(%489, dtype="uint16") /* ty=Tensor[(13, 1, 13), uint16] */;
  %491 = cast(%var_4985, dtype="uint16") /* ty=Tensor[(13, 10, 13), uint16] */;
  %492 = minimum(%490, %491) /* ty=Tensor[(13, 10, 13), uint16] */;
  (%492,)
}

def @func_6114() -> Tensor[(7, 2, 16), float32] {
  %493 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  acosh(%493) /* ty=Tensor[(7, 2, 16), float32] */
}

def @func_5846(%var_5843: Tensor[(36, 2), float64], %var_5844: Tensor[(195), uint16], %var_5845: Tensor[(2925), uint16]) -> (Tensor[(1089), int32], Tensor[(36, 2), float64], Tensor[(1600), uint8], Tensor[(216), uint32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(2925), uint16], Tensor[(14, 5, 4), float32]) {
  %511 = fn (%var_5816: Tensor[(36, 2), float64], %var_5828: Tensor[(195), uint16], %var_5829: Tensor[(2925), uint16]) -> (Tensor[(1089), int32], Tensor[(36, 2), float64], Tensor[(1600), uint8], Tensor[(216), uint32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(2925), uint16], Tensor[(14, 5, 4), float32]) {
    %494 = cast(%var_5816, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
    %495 = cast(meta[relay.Constant][43] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
    %496 = cast(meta[relay.Constant][44] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
    %497 = reshape(%494, newshape=[72]) /* ty=Tensor[(72), float64] */;
    %498 = reshape(%495, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
    %499 = reshape(%496, newshape=[216]) /* ty=Tensor[(216), uint32] */;
    %500 = @func_3862(%497, %498, %499) /* ty=(Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) */;
    %501 = cast(%var_5828, dtype="uint16") /* ty=Tensor[(195), uint16] */;
    %502 = cast(%var_5829, dtype="uint16") /* ty=Tensor[(2925), uint16] */;
    %503 = reshape(%501, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), uint16] */;
    %504 = reshape(%502, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), uint16] */;
    %505 = @func_2930(%503, %504) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) */;
    %506 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
    %507 = cast(%506, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
    %508 = %500.7;
    %509 = %505.1;
    %510 = log(%507) /* ty=Tensor[(14, 5, 4), float32] */;
    (%508, %var_5816, meta[relay.Constant][43] /* ty=Tensor[(1600), uint8] */, meta[relay.Constant][44] /* ty=Tensor[(216), uint32] */, %509, %var_5828, %var_5829, %510)
  };
  %511(%var_5843, %var_5844, %var_5845) /* ty=(Tensor[(1089), int32], Tensor[(36, 2), float64], Tensor[(1600), uint8], Tensor[(216), uint32], Tensor[(16, 10, 10), int32], Tensor[(195), uint16], Tensor[(2925), uint16], Tensor[(14, 5, 4), float32]) */
}

def @func_4583(%var_4580: Tensor[(9, 10, 15), float32], %var_4581: Tensor[(720), float32], %var_4582: Tensor[(132), uint32]) -> (Tensor[(9, 10, 15), float32], Tensor[(1089), int32], Tensor[(660), uint32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(1, 660), uint32], Tensor[(132), uint32]) {
  @func_4578(%var_4580, %var_4581, %var_4582) /* ty=(Tensor[(9, 10, 15), float32], Tensor[(1089), int32], Tensor[(660), uint32], Tensor[(144), float64], Tensor[(720), float32], Tensor[(1, 660), uint32], Tensor[(132), uint32]) */
}

def @func_5617(%var_5580: Tensor[(1089), float64], %var_5590: Tensor[(1089), float64], %var_5597: Tensor[(10, 4), float64]) -> (Tensor[(1089), float64], Tensor[(121, 9), float32], Tensor[(112, 4), float64], Tensor[(10, 4), float64], Tensor[(720), float32], Tensor[(1089), bool]) {
  %512 = cast(%var_5590, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %513 = shape_of(%var_5580, dtype="int32") /* ty=Tensor[(1), int32] */;
  %514 = cast(%var_5580, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?), float64] */;
  %516 = cast(meta[relay.Constant][45] /* ty=Tensor[(112, 4), float64] */, dtype="float64") /* ty=Tensor[(112, 4), float64] */;
  %517 = cast(%var_5597, dtype="float64") /* ty=Tensor[(10, 4), float64] */;
  %518 = cast(meta[relay.Constant][46] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %519 = @func_4202() /* ty=(Tensor[(1089), float64],) */;
  %520 = %519.0;
  %521 = cast(%520, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %522 = cast(%var_5580, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %523 = shape_of(%520, dtype="int32") /* ty=Tensor[(1), int32] */;
  %524 = cast(%520, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?), bool] */;
  %526 = logical_and(%524, %525) /* ty=Tensor[(1089), bool] */;
  %527 = cast(%526, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %528 = reshape(%516, newshape=[14, 16, 2]) /* ty=Tensor[(14, 16, 2), float64] */;
  %529 = reshape(%517, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %530 = reshape(%518, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %531 = reshape(%521, newshape=[121, 9]) /* ty=Tensor[(121, 9), int32] */;
  %532 = reshape(%527, newshape=[121, 9]) /* ty=Tensor[(121, 9), int32] */;
  %533 = @func_1675(%528, %529, %530, %531, %532) /* ty=(Tensor[(14, 16, 2), float64], Tensor[(16, 5, 9), float32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(121, 9), float32]) */;
  %534 = cast(%var_5590, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %535 = acosh(%534) /* ty=Tensor[(1089), float64] */;
  %536 = cast(%526, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(1), int32] */;
  %538 = cast(%535, dtype="bool") /* ty=Tensor[(1089), bool] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?), bool] */;
  %540 = floor_divide(%514, %515) /* ty=Tensor[(1089), float64] */;
  %541 = %533.4;
  %542 = less(%538, %539) /* ty=Tensor[(1089), bool] */;
  (%540, %541, meta[relay.Constant][45] /* ty=Tensor[(112, 4), float64] */, %var_5597, meta[relay.Constant][46] /* ty=Tensor[(720), float32] */, %542)
}

def @func_6845() -> (Tensor[(13, 1, 13), float32],) {
  %543 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  (%543,)
}

def @func_4312(%var_4290: Tensor[(72), float64]) -> (Tensor[(14, 5, 4), int64], Tensor[(72), float64], Tensor[(216), uint32], Tensor[(252, 2), float64]) {
  %544 = cast(%var_4290, dtype="float64") /* ty=Tensor[(72), float64] */;
  %545 = cast(meta[relay.Constant][47] /* ty=Tensor[(216), uint32] */, dtype="uint32") /* ty=Tensor[(216), uint32] */;
  %546 = reshape(%544, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %547 = reshape(%545, newshape=[216]) /* ty=Tensor[(216), uint32] */;
  %548 = @func_3900(%546, %547) /* ty=(Tensor[(1089), float32], Tensor[(252, 2), float64], Tensor[(72), float64], Tensor[(1600), uint8], Tensor[(216), uint32]) */;
  %549 = %548.1;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(252, 2), float32] */;
  %551 = erf(%550) /* ty=Tensor[(252, 2), float32] */;
  %552 = cast(%549, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(2), int32] */;
  %554 = cast(%551, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %556 = @func_4207() /* ty=Tensor[(14, 5, 4), int64] */;
  %557 = minimum(%554, %555) /* ty=Tensor[(252, 2), float64] */;
  (%556, %var_4290, meta[relay.Constant][47] /* ty=Tensor[(216), uint32] */, %557)
}

def @func_3415() -> Tensor[(13, 1, 13), float32] {
  @func_2950() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_4077() -> Tensor[(720), float32] {
  @func_4075() /* ty=Tensor[(720), float32] */
}

def @func_4799() -> (Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) {
  %562 = fn () -> (Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) {
    %558 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
    %559 = @func_4075() /* ty=Tensor[(720), float32] */;
    %560 = %558.0;
    %561 = @func_3180() /* ty=Tensor[(1089), float32] */;
    (%559, %560, %561)
  };
  %562() /* ty=(Tensor[(720), float32], Tensor[(16, 3, 6), float64], Tensor[(1089), float32]) */
}

def @func_2355() -> (Tensor[(14, 5, 4), int64],) {
  %563 = cast(meta[relay.Constant][49] /* ty=Tensor[(14, 5, 4), int64] */, dtype="int64") /* ty=Tensor[(14, 5, 4), int64] */;
  %564 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(14, 5, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 5, 4), int64] */, dtype="int64") /* ty=Tensor[(14, 5, 4), int64] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %567 = subtract(%565, %566) /* ty=Tensor[(14, 5, 4), int64] */;
  (%567,)
}

def @func_3547() -> Tensor[(1089), float32] {
  %568 = fn () -> Tensor[(1089), float32] {
    @func_3343() /* ty=Tensor[(1089), float32] */
  };
  %568() /* ty=Tensor[(1089), float32] */
}

def @func_5268(%var_5250: Tensor[(15, 10, 3), float64]) -> (Tensor[(15, 10, 3), float64],) {
  %569 = cast(-5.33596f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %570 = cast(%var_5250, dtype="bool") /* ty=Tensor[(15, 10, 3), bool] */;
  %571 = less_equal(%569, %570) /* ty=Tensor[(15, 10, 3), bool] */;
  %572 = cast(%571, dtype="float64") /* ty=Tensor[(15, 10, 3), float64] */;
  %573 = cosh(%572) /* ty=Tensor[(15, 10, 3), float64] */;
  (%573,)
}

def @func_5751(%var_5749: Tensor[(16, 5, 9), float32]) -> (Tensor[(16, 5, 9), float64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(16, 5, 9), bool]) {
  @func_5748(%var_5749) /* ty=(Tensor[(16, 5, 9), float64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(16, 5, 9), bool]) */
}

def @func_3618(%var_3600: Tensor[(5, 7, 2), float64]) -> Tensor[(5, 7, 2), float64] {
  %574 = cast(%var_3600, dtype="float64") /* ty=Tensor[(5, 7, 2), float64] */;
  acosh(%574) /* ty=Tensor[(5, 7, 2), float64] */
}

def @func_5654(%var_5652: Tensor[(1089), float32], %var_5653: Tensor[(504), float64]) -> (Tensor[(1089), uint8], Tensor[(1089), int32], Tensor[(11, 12, 5), bool], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1600), uint8], Tensor[(1089), float32]) {
  @func_5650(%var_5652, %var_5653) /* ty=(Tensor[(1089), uint8], Tensor[(1089), int32], Tensor[(11, 12, 5), bool], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1600), uint8], Tensor[(1089), float32]) */
}

def @func_1229(%var_1228: Tensor[(1089, 1), int32]) -> (Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) {
  %609 = fn (%var_1197: Tensor[(1089, 1), int32]) -> (Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) {
    %575 = cast(%var_1197, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
    %576 = cast(%var_1197, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
    %577 = reshape(%575, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
    %578 = reshape(%576, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
    %579 = @func_560(%577, %578) /* ty=(Tensor[(11, 11, 9), int32],) */;
    %580 = cast(%var_1197, dtype="int32") /* ty=Tensor[(1089, 1), int32] */;
    %581 = %579.0;
    %582 = cast(%581, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
    %583 = reshape(%580, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
    %584 = reshape(%582, newshape=[11, 11, 9]) /* ty=Tensor[(11, 11, 9), int32] */;
    %585 = @func_560(%583, %584) /* ty=(Tensor[(11, 11, 9), int32],) */;
    %586 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(1, 14, 9), float64] */;
    %587 = acos(%586) /* ty=Tensor[(1, 14, 9), float64] */;
    %588 = cast(%587, dtype="float32") /* ty=Tensor[(1, 14, 9), float32] */;
    %589 = sqrt(%588) /* ty=Tensor[(1, 14, 9), float32] */;
    %590 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 14, 9), float64] */, dtype="int32") /* ty=Tensor[(1, 14, 9), int32] */;
    %591 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(%587, dtype="int32") /* ty=Tensor[(1, 14, 9), int32] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %594 = bitwise_or(%592, %593) /* ty=Tensor[(?, 14, 9), int32] */;
    %595 = cast(%594, dtype="bool") /* ty=Tensor[(?, 14, 9), bool] */;
    %596 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(%589, dtype="bool") /* ty=Tensor[(1, 14, 9), bool] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %599 = not_equal(%597, %598) /* ty=Tensor[(?, 14, 9), bool] */;
    %600 = cast(%599, dtype="int32") /* ty=Tensor[(?, 14, 9), int32] */;
    %601 = cast(meta[relay.Constant][51] /* ty=Tensor[(13, 14, 9), bool] */, dtype="int32") /* ty=Tensor[(13, 14, 9), int32] */;
    %602 = cast(%599, dtype="uint16") /* ty=Tensor[(?, 14, 9), uint16] */;
    %603 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %604 = cast(%587, dtype="uint16") /* ty=Tensor[(1, 14, 9), uint16] */;
    %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %606 = %585.0;
    %607 = multiply(%600, %601) /* ty=Tensor[(13, 14, 9), int32] */;
    %608 = minimum(%604, %605) /* ty=Tensor[(?, 14, 9), uint16] */;
    (%581, %var_1197, %606, %607, %608)
  };
  %609(%var_1228) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */
}

def @func_3486() -> Tensor[(14, 5, 4), int64] {
  @func_3484() /* ty=Tensor[(14, 5, 4), int64] */
}

def @func_5103(%var_5093: Tensor[(16, 5, 9), float32]) -> Tensor[(16, 5, 9), bool] {
  %610 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
  %611 = %610.1;
  %612 = cast(%var_5093, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %613 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%611, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%614, %615) /* ty=Tensor[(16, 5, 9), bool] */
}

def @func_5650(%var_5627: Tensor[(1089), float32], %var_5640: Tensor[(504), float64]) -> (Tensor[(1089), uint8], Tensor[(1089), int32], Tensor[(11, 12, 5), bool], Tensor[(72), float64], Tensor[(504), float64], Tensor[(1600), uint8], Tensor[(1089), float32]) {
  %616 = @func_3180() /* ty=Tensor[(1089), float32] */;
  %617 = cast(%var_5627, dtype="uint8") /* ty=Tensor[(1089), uint8] */;
  %618 = shape_of(%616, dtype="int32") /* ty=Tensor[(1), int32] */;
  %619 = cast(%616, dtype="uint8") /* ty=Tensor[(1089), uint8] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %621 = @func_2502() /* ty=(Tensor[(1089), int32],) */;
  %622 = cast(meta[relay.Constant][52] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %623 = cast(%var_5640, dtype="float64") /* ty=Tensor[(504), float64] */;
  %624 = cast(%var_5627, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %625 = cast(meta[relay.Constant][53] /* ty=Tensor[(1600), uint8] */, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
  %626 = reshape(%622, newshape=[1, 12, 6]) /* ty=Tensor[(1, 12, 6), float64] */;
  %627 = reshape(%623, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), float64] */;
  %628 = reshape(%624, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %629 = reshape(%625, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
  %630 = @func_1995(%626, %627, %628, %629) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */;
  %631 = @func_4371() /* ty=(Tensor[(720), float32], Tensor[(2, 20), float64], Tensor[(180, 4), float32], Tensor[(1089), float32]) */;
  %632 = right_shift(%619, %620) /* ty=Tensor[(1089), uint8] */;
  %633 = %621.0;
  %634 = %630.6;
  %635 = %631.3;
  (%632, %633, %634, meta[relay.Constant][52] /* ty=Tensor[(72), float64] */, %var_5640, meta[relay.Constant][53] /* ty=Tensor[(1600), uint8] */, %635)
}

def @func_6374() -> (Tensor[(13, 6, 13), uint64],) {
  %637 = fn () -> (Tensor[(13, 6, 13), uint64],) {
    %636 = @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */;
    (%636,)
  };
  %637() /* ty=(Tensor[(13, 6, 13), uint64],) */
}

def @func_5239(%var_5236: Tensor[(7, 12, 9), float64], %var_5237: Tensor[(420), float64], %var_5238: Tensor[(660), uint32]) -> (Tensor[(720), float32], Tensor[(13, 6, 13), uint64], Tensor[(13, 13), float64], Tensor[(420), float64], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(660), uint32], Tensor[(7, 12, 9), float64]) {
  @func_5234(%var_5236, %var_5237, %var_5238) /* ty=(Tensor[(720), float32], Tensor[(13, 6, 13), uint64], Tensor[(13, 13), float64], Tensor[(420), float64], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(660), uint32], Tensor[(7, 12, 9), float64]) */
}

def @func_3000() -> (Tensor[(5, 16, 15), float32], Tensor[(13, 13), float32], Tensor[(169), float32]) {
  @func_2998() /* ty=(Tensor[(5, 16, 15), float32], Tensor[(13, 13), float32], Tensor[(169), float32]) */
}

def @func_3740(%var_3738: Tensor[(9, 4, 6), uint32]) -> (Tensor[(9, 4, 6), bool], Tensor[(1089), float32], Tensor[(1089), int32]) {
  @func_3737(%var_3738) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(1089), float32], Tensor[(1089), int32]) */
}

def @func_6749() -> Tensor[(14, 5, 4), int64] {
  @func_6747() /* ty=Tensor[(14, 5, 4), int64] */
}

def @func_60(%var_58: Tensor[(16, 5, 9), float32]) -> Tensor[(16, 5, 9), float32] {
  @func_57(%var_58) /* ty=Tensor[(16, 5, 9), float32] */
}

def @func_2464() -> Tensor[(14, 5, 4), int64] {
  %638 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
  %638.0
}

def @func_3146(%var_3096: Tensor[(7, 15, 4), float64]) -> (Tensor[(7, 15, 4), float64], Tensor[(13, 13), float64]) {
  %639 = cast(%var_3096, dtype="float64") /* ty=Tensor[(7, 15, 4), float64] */;
  %640 = @func_2998() /* ty=(Tensor[(5, 16, 15), float32], Tensor[(13, 13), float32], Tensor[(169), float32]) */;
  %641 = %640.1;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(13, 13), float64] */;
  %643 = erf(%639) /* ty=Tensor[(7, 15, 4), float64] */;
  %644 = sinh(%642) /* ty=Tensor[(13, 13), float64] */;
  (%643, %644)
}

def @func_4631() -> Tensor[(13, 6, 13), uint64] {
  %645 = @func_3415() /* ty=Tensor[(13, 1, 13), float32] */;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(13, 1, 13), float32] */;
  %647 = rsqrt(%646) /* ty=Tensor[(13, 1, 13), float32] */;
  %648 = cast(%647, dtype="uint64") /* ty=Tensor[(13, 1, 13), uint64] */;
  %649 = cast(meta[relay.Constant][54] /* ty=Tensor[(13, 6, 13), float32] */, dtype="uint64") /* ty=Tensor[(13, 6, 13), uint64] */;
  bitwise_or(%648, %649) /* ty=Tensor[(13, 6, 13), uint64] */
}

def @func_1417(%var_1414: Tensor[(10, 4), float64], %var_1415: Tensor[(720), float32], %var_1416: Tensor[(1089), int32]) -> (Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) {
  %659 = fn (%var_1389: Tensor[(10, 4), float64], %var_1397: Tensor[(720), float32], %var_1410: Tensor[(1089), int32]) -> (Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) {
    %650 = cast(%var_1389, dtype="float64") /* ty=Tensor[(10, 4), float64] */;
    %651 = cast(%var_1397, dtype="float32") /* ty=Tensor[(720), float32] */;
    %652 = reshape(%651, newshape=[16, 5, 9]) /* ty=Tensor[(16, 5, 9), float32] */;
    %653 = cast(%var_1410, dtype="int32") /* ty=Tensor[(1089), int32] */;
    %654 = reshape(%653, newshape=[1089, 1]) /* ty=Tensor[(1089, 1), int32] */;
    %655 = @func_1227(%654) /* ty=(Tensor[(11, 11, 9), int32], Tensor[(1089, 1), int32], Tensor[(11, 11, 9), int32], Tensor[(13, 14, 9), int32], Tensor[(?, 14, 9), uint16]) */;
    %656 = acosh(%650) /* ty=Tensor[(10, 4), float64] */;
    %657 = @func_57(%652) /* ty=Tensor[(16, 5, 9), float32] */;
    %658 = %655.3;
    (%656, %657, %var_1397, %658, %var_1410)
  };
  %659(%var_1414, %var_1415, %var_1416) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */
}

def @func_3468(%var_3466: Tensor[(16, 3, 3), int64], %var_3467: Tensor[(16, 3, 3), int64]) -> Tensor[(16, 3, 3), bool] {
  @func_3464(%var_3466, %var_3467) /* ty=Tensor[(16, 3, 3), bool] */
}

def @func_5748(%var_5717: Tensor[(16, 5, 9), float32]) -> (Tensor[(16, 5, 9), float64], Tensor[(5, 7, 2), float64], Tensor[(70), float64], Tensor[(16, 5, 9), bool]) {
  %660 = @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */;
  %661 = %660.1;
  %662 = cast(%661, dtype="float64") /* ty=Tensor[(16, 5, 9), float64] */;
  %663 = cast(meta[relay.Constant][55] /* ty=Tensor[(70), float64] */, dtype="float64") /* ty=Tensor[(70), float64] */;
  %664 = reshape(%663, newshape=[5, 7, 2]) /* ty=Tensor[(5, 7, 2), float64] */;
  %665 = cast(%var_5717, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %666 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%661, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = equal(%667, %668) /* ty=Tensor[(16, 5, 9), bool] */;
  %670 = cast(%var_5717, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(3), int32] */;
  %672 = cast(%669, dtype="bool") /* ty=Tensor[(16, 5, 9), bool] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %674 = exp(%662) /* ty=Tensor[(16, 5, 9), float64] */;
  %675 = @func_3618(%664) /* ty=Tensor[(5, 7, 2), float64] */;
  %676 = not_equal(%672, %673) /* ty=Tensor[(16, 5, 9), bool] */;
  (%674, %675, meta[relay.Constant][55] /* ty=Tensor[(70), float64] */, %676)
}

def @func_4603() -> Tensor[(13, 1, 13), float32] {
  @func_4601() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_3904(%var_3902: Tensor[(72), float64], %var_3903: Tensor[(216), uint32]) -> (Tensor[(1089), float32], Tensor[(252, 2), float64], Tensor[(72), float64], Tensor[(1600), uint8], Tensor[(216), uint32]) {
  @func_3900(%var_3902, %var_3903) /* ty=(Tensor[(1089), float32], Tensor[(252, 2), float64], Tensor[(72), float64], Tensor[(1600), uint8], Tensor[(216), uint32]) */
}

def @func_6711() -> Tensor[(14, 5, 4), float32] {
  %678 = fn () -> Tensor[(14, 5, 4), float32] {
    %677 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
    %677.2
  };
  %678() /* ty=Tensor[(14, 5, 4), float32] */
}

def @func_5379(%var_5377: Tensor[(1089), float64]) -> Tensor[(1089), float64] {
  @func_5376(%var_5377) /* ty=Tensor[(1089), float64] */
}

def @func_5234(%var_5142: Tensor[(7, 12, 9), float64], %var_5196: Tensor[(420), float64], %var_5205: Tensor[(660), uint32]) -> (Tensor[(720), float32], Tensor[(13, 6, 13), uint64], Tensor[(13, 13), float64], Tensor[(420), float64], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(660), uint32], Tensor[(7, 12, 9), float64]) {
  %679 = cast(%var_5196, dtype="float64") /* ty=Tensor[(420), float64] */;
  %680 = reshape(%679, newshape=[7, 15, 4]) /* ty=Tensor[(7, 15, 4), float64] */;
  %681 = @func_3146(%680) /* ty=(Tensor[(7, 15, 4), float64], Tensor[(13, 13), float64]) */;
  %682 = cast(meta[relay.Constant][56] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
  %683 = cast(%var_5205, dtype="uint32") /* ty=Tensor[(660), uint32] */;
  %684 = reshape(%682, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
  %685 = reshape(%683, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
  %686 = cast(%var_5142, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %687 = atanh(%686) /* ty=Tensor[(7, 12, 9), float64] */;
  %688 = cast(%687, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  %689 = tan(%688) /* ty=Tensor[(7, 12, 9), float32] */;
  %690 = cast(%689, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %691 = cosh(%690) /* ty=Tensor[(7, 12, 9), float64] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(7, 12, 9), float64] */;
  %693 = @func_4075() /* ty=Tensor[(720), float32] */;
  %694 = @func_4631() /* ty=Tensor[(13, 6, 13), uint64] */;
  %695 = %681.1;
  %696 = @func_161(%684, %685) /* ty=Tensor[(11, 12, 5), uint32] */;
  %697 = exp(%692) /* ty=Tensor[(7, 12, 9), float64] */;
  (%693, %694, %695, %var_5196, %696, meta[relay.Constant][56] /* ty=Tensor[(132), uint32] */, %var_5205, %697)
}

def @func_387(%var_385: Tensor[(13, 12, 11), float64], %var_386: Tensor[(720), float32]) -> (Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) {
  @func_383(%var_385, %var_386) /* ty=(Tensor[(13, 12, 11), bool], Tensor[(16, 5, 9), float32], Tensor[(720), float32]) */
}

def @func_2429() -> Tensor[(14, 5, 4), int64] {
  @func_2427() /* ty=Tensor[(14, 5, 4), int64] */
}

def @func_3149(%var_3147: Tensor[(7, 15, 4), float64]) -> (Tensor[(7, 15, 4), float64], Tensor[(13, 13), float64]) {
  @func_3146(%var_3147) /* ty=(Tensor[(7, 15, 4), float64], Tensor[(13, 13), float64]) */
}

def @func_3162() -> (Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) {
  @func_3160() /* ty=(Tensor[(16, 3, 6), float64], Tensor[(16, 5, 9), float32], Tensor[(1, 720), float32]) */
}

def @func_2080(%var_2077: int32, %var_2078: Tensor[(7, 10, 9), int32], %var_2079: Tensor[(1, 660), uint32]) -> (Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) {
  %706 = fn (%var_2032: int32, %var_2033: Tensor[(7, 10, 9), int32], %var_2067: Tensor[(1, 660), uint32]) -> (Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) {
    %698 = cast(%var_2032, dtype="int32") /* ty=int32 */;
    %699 = cast(%var_2033, dtype="int32") /* ty=Tensor[(7, 10, 9), int32] */;
    %700 = cast(meta[relay.Constant][57] /* ty=Tensor[(132), uint32] */, dtype="uint32") /* ty=Tensor[(132), uint32] */;
    %701 = cast(%var_2067, dtype="uint32") /* ty=Tensor[(1, 660), uint32] */;
    %702 = reshape(%700, newshape=[11, 12, 1]) /* ty=Tensor[(11, 12, 1), uint32] */;
    %703 = reshape(%701, newshape=[11, 12, 5]) /* ty=Tensor[(11, 12, 5), uint32] */;
    %704 = multiply(%698, %699) /* ty=Tensor[(7, 10, 9), int32] */;
    %705 = @func_161(%702, %703) /* ty=Tensor[(11, 12, 5), uint32] */;
    (%704, %705, meta[relay.Constant][57] /* ty=Tensor[(132), uint32] */, %var_2067)
  };
  %706(%var_2077, %var_2078, %var_2079) /* ty=(Tensor[(7, 10, 9), int32], Tensor[(11, 12, 5), uint32], Tensor[(132), uint32], Tensor[(1, 660), uint32]) */
}

def @func_4315(%var_4313: Tensor[(72), float64]) -> (Tensor[(14, 5, 4), int64], Tensor[(72), float64], Tensor[(216), uint32], Tensor[(252, 2), float64]) {
  @func_4312(%var_4313) /* ty=(Tensor[(14, 5, 4), int64], Tensor[(72), float64], Tensor[(216), uint32], Tensor[(252, 2), float64]) */
}

def @func_3417() -> Tensor[(13, 1, 13), float32] {
  @func_3415() /* ty=Tensor[(13, 1, 13), float32] */
}

def @func_2404() -> (Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) {
  %725 = fn () -> (Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) {
    %707 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
    %708 = cast(meta[relay.Constant][58] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %709 = cast(meta[relay.Constant][59] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %710 = cast(meta[relay.Constant][60] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
    %711 = reshape(%708, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
    %712 = reshape(%709, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %713 = reshape(%710, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
    %714 = @func_1413(%711, %712, %713) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
    %715 = cast(meta[relay.Constant][58] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %716 = cast(meta[relay.Constant][59] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
    %717 = cast(meta[relay.Constant][60] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
    %718 = reshape(%715, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
    %719 = reshape(%716, newshape=[720]) /* ty=Tensor[(720), float32] */;
    %720 = reshape(%717, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
    %721 = @func_1413(%718, %719, %720) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
    %722 = %707.0;
    %723 = %714.3;
    %724 = %721.2;
    (%722, %723, meta[relay.Constant][58] /* ty=Tensor[(40), float64] */, meta[relay.Constant][59] /* ty=Tensor[(720), float32] */, meta[relay.Constant][60] /* ty=Tensor[(1089), int32] */, %724)
  };
  %725() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */
}

def @func_3174(%var_3172: Tensor[(11, 5, 2), float64], %var_3173: Tensor[(11, 5, 2), float64]) -> (Tensor[(11, 5, 2), float64],) {
  %731 = fn (%var_3163: Tensor[(11, 5, 2), float64], %var_3164: Tensor[(11, 5, 2), float64]) -> (Tensor[(11, 5, 2), float64],) {
    %726 = cast(%var_3164, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
    %727 = shape_of(%var_3163, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%var_3163, dtype="float64") /* ty=Tensor[(11, 5, 2), float64] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %730 = floor_divide(%728, %729) /* ty=Tensor[(11, 5, 2), float64] */;
    (%730,)
  };
  %731(%var_3172, %var_3173) /* ty=(Tensor[(11, 5, 2), float64],) */
}

def @func_3385() -> Tensor[(14, 5, 4), float32] {
  @func_3383() /* ty=Tensor[(14, 5, 4), float32] */
}

def @func_2829() -> (Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) {
  %738 = fn () -> (Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) {
    %732 = @func_2355() /* ty=(Tensor[(14, 5, 4), int64],) */;
    %733 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
    %734 = @func_2559() /* ty=(Tensor[(14, 5, 4), float32],) */;
    %735 = %732.0;
    %736 = %733.4;
    %737 = %734.0;
    (%735, %736, %737)
  };
  %738() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */
}

def @func_4721(%var_4700: Tensor[(660, 4), float32]) -> (Tensor[(13, 10, 6), float64], Tensor[(13, 10, 6), float32], Tensor[(1089), float32], Tensor[(13, 14, 9), int32], Tensor[(660, 4), float32], Tensor[(720), float32], Tensor[(1089), float64]) {
  %739 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 10, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
  %740 = log10(%739) /* ty=Tensor[(13, 10, 6), float32] */;
  %741 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 10, 6), float32] */, dtype="float64") /* ty=Tensor[(13, 10, 6), float64] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="float64") /* ty=Tensor[(13, 10, 6), float64] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %745 = cast(meta[relay.Constant][61] /* ty=Tensor[(13, 10, 6), float32] */, dtype="float32") /* ty=Tensor[(13, 10, 6), float32] */;
  %746 = @func_3663() /* ty=(Tensor[(1089), float32],) */;
  %747 = cast(%var_4700, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
  %748 = cast(meta[relay.Constant][62] /* ty=Tensor[(720), float32] */, dtype="float32") /* ty=Tensor[(720), float32] */;
  %749 = %746.0;
  %750 = cast(%749, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %751 = reshape(%747, newshape=[11, 15, 16]) /* ty=Tensor[(11, 15, 16), float32] */;
  %752 = reshape(%748, newshape=[12, 60]) /* ty=Tensor[(12, 60), float32] */;
  %753 = reshape(%750, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %754 = @func_4013(%751, %752, %753) /* ty=(Tensor[(11, 15, 16), float32], Tensor[(13, 14, 9), int32], Tensor[(20, 2), float64], Tensor[(12, 60), float32], Tensor[(1089), int32]) */;
  %755 = @func_3546() /* ty=Tensor[(1089), float32] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %757 = mod(%743, %744) /* ty=Tensor[(13, 10, 6), float64] */;
  %758 = atanh(%745) /* ty=Tensor[(13, 10, 6), float32] */;
  %759 = %754.1;
  %760 = exp(%756) /* ty=Tensor[(1089), float64] */;
  (%757, %758, %749, %759, %var_4700, meta[relay.Constant][62] /* ty=Tensor[(720), float32] */, %760)
}

def @func_5106(%var_5104: Tensor[(16, 5, 9), float32]) -> Tensor[(16, 5, 9), bool] {
  @func_5103(%var_5104) /* ty=Tensor[(16, 5, 9), bool] */
}

def @func_2466() -> Tensor[(14, 5, 4), int64] {
  @func_2464() /* ty=Tensor[(14, 5, 4), int64] */
}

def @func_57(%var_39: Tensor[(16, 5, 9), float32]) -> Tensor[(16, 5, 9), float32] {
  %761 = cast(%var_39, dtype="float32") /* ty=Tensor[(16, 5, 9), float32] */;
  acosh(%761) /* ty=Tensor[(16, 5, 9), float32] */
}

def @func_3866(%var_3863: Tensor[(72), float64], %var_3864: Tensor[(1600), uint8], %var_3865: Tensor[(216), uint32]) -> (Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) {
  %800 = fn (%var_3836: Tensor[(72), float64], %var_3839: Tensor[(1600), uint8], %var_3844: Tensor[(216), uint32]) -> (Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) {
    %762 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
    %763 = cast(%762, dtype="float32") /* ty=Tensor[(14, 5, 4), float32] */;
    %764 = tan(%763) /* ty=Tensor[(14, 5, 4), float32] */;
    %765 = @func_2828() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(1089), int32], Tensor[(14, 5, 4), float32]) */;
    %766 = %765.2;
    %767 = cast(%766, dtype="int8") /* ty=Tensor[(14, 5, 4), int8] */;
    %768 = shape_of(%764, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%764, dtype="int8") /* ty=Tensor[(14, 5, 4), int8] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %771 = cast(meta[relay.Constant][63] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %772 = cast(meta[relay.Constant][63] /* ty=Tensor[(144), int64] */, dtype="int64") /* ty=Tensor[(144), int64] */;
    %773 = reshape(%771, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
    %774 = reshape(%772, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), int64] */;
    %775 = cast(%var_3844, dtype="uint32") /* ty=Tensor[(216), uint32] */;
    %776 = reshape(%775, newshape=[9, 4, 6]) /* ty=Tensor[(9, 4, 6), uint32] */;
    %777 = @func_3737(%776) /* ty=(Tensor[(9, 4, 6), bool], Tensor[(1089), float32], Tensor[(1089), int32]) */;
    %778 = cast(%var_3836, dtype="float64") /* ty=Tensor[(72), float64] */;
    %779 = cast(meta[relay.Constant][64] /* ty=Tensor[(252, 2), float64] */, dtype="float64") /* ty=Tensor[(252, 2), float64] */;
    %780 = cast(meta[relay.Constant][65] /* ty=Tensor[(1089), int32] */, dtype="int32") /* ty=Tensor[(1089), int32] */;
    %781 = cast(%var_3839, dtype="uint8") /* ty=Tensor[(1600), uint8] */;
    %782 = reshape(%778, newshape=[1, 12, 6]) /* ty=Tensor[(1, 12, 6), float64] */;
    %783 = reshape(%779, newshape=[7, 12, 6]) /* ty=Tensor[(7, 12, 6), float64] */;
    %784 = reshape(%780, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
    %785 = reshape(%781, newshape=[1600]) /* ty=Tensor[(1600), uint8] */;
    %786 = @func_1995(%782, %783, %784, %785) /* ty=(Tensor[(7, 12, 6), float64], Tensor[(13, 14, 9), int32], Tensor[(1089), int32], Tensor[(132), uint32], Tensor[(16, 10, 10), float64], Tensor[(1600), uint8], Tensor[(11, 12, 5), bool]) */;
    %787 = %786.6;
    %788 = cast(%787, dtype="float32") /* ty=Tensor[(11, 12, 5), float32] */;
    %789 = log10(%788) /* ty=Tensor[(11, 12, 5), float32] */;
    %790 = cast(%787, dtype="int64") /* ty=Tensor[(11, 12, 5), int64] */;
    %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%789, dtype="int64") /* ty=Tensor[(11, 12, 5), int64] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %794 = bitwise_or(%769, %770) /* ty=Tensor[(14, 5, 4), int8] */;
    %795 = @func_3383() /* ty=Tensor[(14, 5, 4), float32] */;
    %796 = @func_2464() /* ty=Tensor[(14, 5, 4), int64] */;
    %797 = @func_3464(%773, %774) /* ty=Tensor[(16, 3, 3), bool] */;
    %798 = %777.1;
    %799 = bitwise_and(%792, %793) /* ty=Tensor[(11, 12, 5), int64] */;
    (%794, %795, %796, %797, meta[relay.Constant][63] /* ty=Tensor[(144), int64] */, %var_3836, meta[relay.Constant][64] /* ty=Tensor[(252, 2), float64] */, meta[relay.Constant][65] /* ty=Tensor[(1089), int32] */, %var_3839, %798, %var_3844, %799)
  };
  %800(%var_3863, %var_3864, %var_3865) /* ty=(Tensor[(14, 5, 4), int8], Tensor[(14, 5, 4), float32], Tensor[(14, 5, 4), int64], Tensor[(16, 3, 3), bool], Tensor[(144), int64], Tensor[(72), float64], Tensor[(252, 2), float64], Tensor[(1089), int32], Tensor[(1600), uint8], Tensor[(1089), float32], Tensor[(216), uint32], Tensor[(11, 12, 5), int64]) */
}

def @func_2934(%var_2932: Tensor[(1, 13, 15), uint16], %var_2933: Tensor[(15, 13, 15), uint16]) -> (Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) {
  @func_2930(%var_2932, %var_2933) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(16, 10, 10), int32], Tensor[(1600), float64], Tensor[(1089), float32]) */
}

def @func_4075() -> Tensor[(720), float32] {
  %801 = @func_2403() /* ty=(Tensor[(14, 5, 4), int64], Tensor[(13, 14, 9), int32], Tensor[(40), float64], Tensor[(720), float32], Tensor[(1089), int32], Tensor[(720), float32]) */;
  %801.3
}

def @func_6452() -> (Tensor[(1089), float32],) {
  %802 = @func_3663() /* ty=(Tensor[(1089), float32],) */;
  %803 = %802.0;
  (%803,)
}

def @func_6847() -> (Tensor[(13, 1, 13), float32],) {
  @func_6845() /* ty=(Tensor[(13, 1, 13), float32],) */
}

def @func_560(%var_553: Tensor[(11, 11, 9), int32], %var_554: Tensor[(11, 11, 9), int32]) -> (Tensor[(11, 11, 9), int32],) {
  %804 = cast(%var_554, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %805 = shape_of(%var_553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_553, dtype="int32") /* ty=Tensor[(11, 11, 9), int32] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %808 = subtract(%806, %807) /* ty=Tensor[(11, 11, 9), int32] */;
  (%808,)
}

def @func_164(%var_162: Tensor[(11, 12, 1), uint32], %var_163: Tensor[(11, 12, 5), uint32]) -> Tensor[(11, 12, 5), uint32] {
  %811 = fn (%var_151: Tensor[(11, 12, 1), uint32], %var_152: Tensor[(11, 12, 5), uint32]) -> Tensor[(11, 12, 5), uint32] {
    %809 = cast(%var_151, dtype="uint32") /* ty=Tensor[(11, 12, 1), uint32] */;
    %810 = cast(%var_152, dtype="uint32") /* ty=Tensor[(11, 12, 5), uint32] */;
    multiply(%809, %810) /* ty=Tensor[(11, 12, 5), uint32] */
  };
  %811(%var_162, %var_163) /* ty=Tensor[(11, 12, 5), uint32] */
}

def @func_4371() -> (Tensor[(720), float32], Tensor[(2, 20), float64], Tensor[(180, 4), float32], Tensor[(1089), float32]) {
  %812 = cast(meta[relay.Constant][66] /* ty=Tensor[(2, 20), float64] */, dtype="float64") /* ty=Tensor[(2, 20), float64] */;
  %813 = cast(meta[relay.Constant][67] /* ty=Tensor[(180, 4), float32] */, dtype="float32") /* ty=Tensor[(180, 4), float32] */;
  %814 = @func_4178() /* ty=Tensor[(1089), float32] */;
  %815 = cast(%814, dtype="int32") /* ty=Tensor[(1089), int32] */;
  %816 = reshape(%812, newshape=[10, 4]) /* ty=Tensor[(10, 4), float64] */;
  %817 = reshape(%813, newshape=[720]) /* ty=Tensor[(720), float32] */;
  %818 = reshape(%815, newshape=[1089]) /* ty=Tensor[(1089), int32] */;
  %819 = @func_1413(%816, %817, %818) /* ty=(Tensor[(10, 4), float64], Tensor[(16, 5, 9), float32], Tensor[(720), float32], Tensor[(13, 14, 9), int32], Tensor[(1089), int32]) */;
  %820 = cast(%814, dtype="float64") /* ty=Tensor[(1089), float64] */;
  %821 = sin(%820) /* ty=Tensor[(1089), float64] */;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(1089), float32] */;
  %823 = %819.2;
  %824 = asin(%822) /* ty=Tensor[(1089), float32] */;
  (%823, meta[relay.Constant][66] /* ty=Tensor[(2, 20), float64] */, meta[relay.Constant][67] /* ty=Tensor[(180, 4), float32] */, %824)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen179/build/output.py:1988: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen179/build/output.py", line 1993, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(660) tvmgen_default_fused_floor_mod_kernel0(double* __restrict__ T_floor_mod, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_floor_mod[(((int)threadIdx.x))] = (placeholder[((((((int)threadIdx.x) / 60) * 10) + (((int)threadIdx.x) % 10)))] - (floor((placeholder[((((((int)threadIdx.x) / 60) * 10) + (((int)threadIdx.x) % 10)))] / placeholder1[(((int)threadIdx.x))])) * placeholder1[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

