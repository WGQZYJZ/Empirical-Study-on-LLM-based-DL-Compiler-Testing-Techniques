==========mod==========
#[version = "0.0.5"]
def @func_2935(%var_2909: Tensor[(7, 12, 12), float32]) -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) {
  %0 = @func_2019() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */;
  %1 = @func_1803() /* ty=(Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) */;
  %2 = @func_2267() /* ty=Tensor[(7, 12, 1), float32] */;
  %3 = cast(%2, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
  %4 = cast(%var_2909, dtype="uint32") /* ty=Tensor[(7, 12, 12), uint32] */;
  %5 = subtract(%3, %4) /* ty=Tensor[(7, 12, 12), uint32] */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(7, 12, 12), float32] */;
  %7 = %0.0;
  %8 = %1.2;
  %9 = sinh(%6) /* ty=Tensor[(7, 12, 12), float32] */;
  (%7, %8, %9)
}

def @func_2825(%var_2723: Tensor[(14, 9, 8), float32]) -> (Tensor[(14, 9, 8), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(14, 9, 8), float64], Tensor[(7, 12, 1), float32], Tensor[(14, 7, 15), int8], Tensor[(1470), int8]) {
  %10 = cast(%var_2723, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %11 = rsqrt(%10) /* ty=Tensor[(14, 9, 8), float32] */;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %13 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %14 = @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */;
  %15 = cast(%var_2723, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
  %16 = asinh(%15) /* ty=Tensor[(14, 9, 8), float32] */;
  %17 = cast(%16, dtype="float64") /* ty=Tensor[(14, 9, 8), float64] */;
  %18 = @func_2580() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) */;
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(1470), int8] */, dtype="int8") /* ty=Tensor[(1470), int8] */;
  %20 = reshape(%19, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int8] */;
  %21 = erf(%12) /* ty=Tensor[(14, 9, 8), float32] */;
  %22 = %13.0;
  %23 = %14.1;
  %24 = cosh(%17) /* ty=Tensor[(14, 9, 8), float64] */;
  %25 = %18.0;
  %26 = @func_2557(%20) /* ty=Tensor[(14, 7, 15), int8] */;
  (%21, %22, %23, %24, %25, %26, meta[relay.Constant][0] /* ty=Tensor[(1470), int8] */)
}

def @func_4556(%var_4522: Tensor[(10, 4, 4), float64]) -> (Tensor[(10, 4, 4), bool], Tensor[(54, 14), float64], Tensor[(5292, 1), float32], Tensor[(756), float64]) {
  %27 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 4, 4), float64] */, dtype="bool") /* ty=Tensor[(10, 4, 4), bool] */;
  %28 = shape_of(%var_4522, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_4522, dtype="bool") /* ty=Tensor[(10, 4, 4), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(5292, 1), float32] */, dtype="float32") /* ty=Tensor[(5292, 1), float32] */;
  %33 = reshape(%31, newshape=[54, 14]) /* ty=Tensor[(54, 14), float32] */;
  %34 = reshape(%32, newshape=[5292]) /* ty=Tensor[(5292), float32] */;
  %35 = @func_2695(%33, %34) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5292), float32], Tensor[(54, 14), float64]) */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(756), float32] */, dtype="float64") /* ty=Tensor[(756), float64] */;
  %37 = greater_equal(%29, %30) /* ty=Tensor[(10, 4, 4), bool] */;
  %38 = %35.3;
  %39 = tan(%36) /* ty=Tensor[(756), float64] */;
  (%37, %38, meta[relay.Constant][3] /* ty=Tensor[(5292, 1), float32] */, %39)
}

def @func_2432() -> (Tensor[(1, 5, 13), float64],) {
  %40 = @func_2083() /* ty=Tensor[(1, 5, 13), float64] */;
  (%40,)
}

def @func_1976(%var_1973: Tensor[(8, 5, 16), float32]) -> Tensor[(8, 5, 16), float32] {
  %41 = cast(%var_1973, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
  acos(%41) /* ty=Tensor[(8, 5, 16), float32] */
}

def @func_1965() -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) {
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  %43 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %44 = sinh(%42) /* ty=Tensor[(1, 5, 13), float64] */;
  %45 = %43.1;
  (%44, %45)
}

def @func_3612() -> Tensor[(1, 5, 13), float64] {
  %46 = @func_2432() /* ty=(Tensor[(1, 5, 13), float64],) */;
  %46.0
}

def @func_1409(%var_1396: Tensor[(756), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) {
  %47 = @func_727() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %48 = cast(%var_1396, dtype="float32") /* ty=Tensor[(756), float32] */;
  %49 = reshape(%48, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %50 = @func_1048(%49) /* ty=(Tensor[(7, 12, 9), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %51 = %47.0;
  %52 = %50.1;
  (%51, %52, %var_1396)
}

def @func_2133() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) {
  %53 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %54 = %53.1;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 176), float32] */, dtype="float32") /* ty=Tensor[(1, 176), float32] */;
  %57 = reshape(%56, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %58 = @func_373(%57) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) */;
  %59 = sigmoid(%55) /* ty=Tensor[(7, 12, 1), float32] */;
  %60 = %58.1;
  (%59, %60, meta[relay.Constant][5] /* ty=Tensor[(1, 176), float32] */)
}

def @func_895(%var_885: Tensor[(5, 25), bool]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(5, 25), bool]) {
  %61 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %62 = @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %63 = cast(%var_885, dtype="bool") /* ty=Tensor[(5, 25), bool] */;
  %64 = cast(%var_885, dtype="bool") /* ty=Tensor[(5, 25), bool] */;
  %65 = reshape(%63, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %66 = reshape(%64, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %67 = @func_617(%65, %66) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %68 = %61.0;
  %69 = %62.0;
  %70 = %67.0;
  (%68, %69, %70, %var_885)
}

def @func_1544(%var_1516: Tensor[(7, 12, 8), float64], %var_1530: Tensor[(252, 1), float64]) -> (Tensor[(7, 12, 8), uint32], Tensor[(7, 12, 3), int8], Tensor[(252, 1), float64]) {
  %71 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %72 = %71.1;
  %73 = cast(%72, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
  %74 = cast(%var_1516, dtype="uint32") /* ty=Tensor[(7, 12, 8), uint32] */;
  %75 = cast(%var_1530, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
  %76 = reshape(%75, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
  %77 = @func_775(%76) /* ty=(Tensor[(7, 12, 3), int8],) */;
  %78 = minimum(%73, %74) /* ty=Tensor[(7, 12, 8), uint32] */;
  %79 = %77.0;
  (%78, %79, %var_1530)
}

def @func_4834(%var_4804: Tensor[(7, 12, 15), float32], %var_4824: Tensor[(2184), float64]) -> (Tensor[(7, 12, 15), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 15), float64], Tensor[(7, 12, 1), float32], Tensor[(2184), float64]) {
  %80 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %81 = %80.0;
  %82 = cast(%81, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %83 = cast(%var_4804, dtype="bool") /* ty=Tensor[(7, 12, 15), bool] */;
  %84 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %85 = cast(%var_4804, dtype="float64") /* ty=Tensor[(7, 12, 15), float64] */;
  %86 = cast(%var_4824, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %87 = reshape(%86, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %88 = @func_1470(%87) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) */;
  %89 = greater_equal(%82, %83) /* ty=Tensor[(7, 12, 15), bool] */;
  %90 = %84.0;
  %91 = erf(%85) /* ty=Tensor[(7, 12, 15), float64] */;
  %92 = %88.0;
  (%89, %90, %91, %92, %var_4824)
}

def @func_1048(%var_1010: Tensor[(7, 12, 9), float32]) -> (Tensor[(7, 12, 9), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %93 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %94 = %93.0;
  %95 = cast(%94, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %96 = cast(%var_1010, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
  %97 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %98 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %99 = less_equal(%95, %96) /* ty=Tensor[(7, 12, 9), bool] */;
  %100 = %97.0;
  %101 = %98.0;
  (%99, %100, %101)
}

def @func_817() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %102 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %103 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %104 = %102.0;
  %105 = %103.0;
  (%104, %105)
}

def @func_1913(%var_1896: Tensor[(7, 12, 1), float32]) -> (Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32]) {
  %106 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
  %107 = cast(%var_1896, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %108 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%106, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %111 = minimum(%109, %110) /* ty=Tensor[(7, 12, ?), int32] */;
  %112 = cast(%111, dtype="bool") /* ty=Tensor[(7, 12, ?), bool] */;
  %113 = shape_of(%106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%106, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %116 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %117 = logical_and(%114, %115) /* ty=Tensor[(7, 12, ?), bool] */;
  %118 = %116.0;
  (%117, %118)
}

def @func_5141(%var_5090: Tensor[(14, 7, 3), int16], %var_5122: Tensor[(1008), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64], Tensor[(1008), float32], Tensor[(14, 7, 3), bool]) {
  %119 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %120 = cast(%var_5122, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %121 = reshape(%120, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %122 = @func_2935(%121) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %123 = cast(%var_5090, dtype="float32") /* ty=Tensor[(14, 7, 3), float32] */;
  %124 = acosh(%123) /* ty=Tensor[(14, 7, 3), float32] */;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(14, 7, 3), float64] */;
  %126 = rsqrt(%125) /* ty=Tensor[(14, 7, 3), float64] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(14, 7, 3), float32] */;
  %128 = atan(%127) /* ty=Tensor[(14, 7, 3), float32] */;
  %129 = cast(%128, dtype="float64") /* ty=Tensor[(14, 7, 3), float64] */;
  %130 = cos(%129) /* ty=Tensor[(14, 7, 3), float64] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(14, 7, 3), int16] */, dtype="int16") /* ty=Tensor[(14, 7, 3), int16] */;
  %132 = shape_of(%var_5090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%var_5090, dtype="int16") /* ty=Tensor[(14, 7, 3), int16] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %135 = bitwise_or(%133, %134) /* ty=Tensor[(14, 7, 3), int16] */;
  %136 = cast(%135, dtype="bool") /* ty=Tensor[(14, 7, 3), bool] */;
  %137 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%130, dtype="bool") /* ty=Tensor[(14, 7, 3), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = %119.1;
  %141 = %122.1;
  %142 = greater(%138, %139) /* ty=Tensor[(14, 7, 3), bool] */;
  (%140, %141, %var_5122, %142)
}

def @func_3642(%var_3637: Tensor[(36, 15), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 12), float32], Tensor[(1008), float32], Tensor[(3, 2, 6), float32], Tensor[(36, 15), float32]) {
  %143 = cast(meta[relay.Constant][7] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %144 = reshape(%143, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %145 = @func_2935(%144) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(36, 1), float32] */, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %147 = reshape(%146, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float32] */;
  %148 = @func_951(%147) /* ty=(Tensor[(3, 2, 6), float32], Tensor[(7, 12, 1), float64]) */;
  %149 = cast(meta[relay.Constant][8] /* ty=Tensor[(36, 1), float32] */, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %150 = cast(%var_3637, dtype="float32") /* ty=Tensor[(36, 15), float32] */;
  %151 = @func_3576() /* ty=Tensor[(7, 12, 1), float32] */;
  %152 = %145.2;
  %153 = %148.0;
  %154 = power(%149, %150) /* ty=Tensor[(36, 15), float32] */;
  (%151, %152, meta[relay.Constant][7] /* ty=Tensor[(1008), float32] */, %153, %154)
}

def @func_2557(%var_2551: Tensor[(14, 7, 15), int8]) -> Tensor[(14, 7, 15), int8] {
  %155 = cast(meta[relay.Constant][9] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %156 = cast(%var_2551, dtype="int8") /* ty=Tensor[(14, 7, 15), int8] */;
  maximum(%155, %156) /* ty=Tensor[(14, 7, 15), int8] */
}

def @func_4198() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %157 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %158 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %159 = %157.0;
  %160 = %158.0;
  (%159, %160)
}

def @func_2497(%var_2460: Tensor[(11, 13, 9), float64]) -> (Tensor[(11, 13, 9), bool], Tensor[(672), float64], Tensor[(1, 5, 13), float64], Tensor[(11, 13, 9), bool]) {
  %161 = cast(%var_2460, dtype="float64") /* ty=Tensor[(11, 13, 9), float64] */;
  %162 = acosh(%161) /* ty=Tensor[(11, 13, 9), float64] */;
  %163 = cast(%var_2460, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = @func_2019() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */;
  %168 = cast(%var_2460, dtype="float64") /* ty=Tensor[(11, 13, 9), float64] */;
  %169 = tan(%168) /* ty=Tensor[(11, 13, 9), float64] */;
  %170 = cast(%169, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %171 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%162, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = less(%165, %166) /* ty=Tensor[(11, 13, 9), bool] */;
  %175 = %167.2;
  %176 = @func_2083() /* ty=Tensor[(1, 5, 13), float64] */;
  %177 = equal(%172, %173) /* ty=Tensor[(11, 13, 9), bool] */;
  (%174, %175, %176, %177)
}

def @func_1737() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %178 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %179 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %180 = %178.0;
  %181 = %179.1;
  (%180, %181)
}

def @func_3952() -> (Tensor[(1, 5, 13), float64], Tensor[(5, 5, 5), bool], Tensor[(125), bool]) {
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %183 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %184 = reshape(%182, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %185 = reshape(%183, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %186 = @func_617(%184, %185) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %187 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  %188 = %186.0;
  (%187, %188, meta[relay.Constant][10] /* ty=Tensor[(125), bool] */)
}

def @func_4775() -> Tensor[(7, 12, 1), float32] {
  %189 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %189.0
}

def @func_373(%var_363: Tensor[(8, 2, 11), float32]) -> (Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) {
  %190 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
  %191 = sigmoid(%190) /* ty=Tensor[(8, 2, 11), float32] */;
  %192 = cast(%var_363, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %193 = shape_of(%191, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%191, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %196 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %197 = greater_equal(%194, %195) /* ty=Tensor[(8, 2, 11), bool] */;
  %198 = %196.1;
  (%197, %198)
}

def @func_1711() -> (Tensor[(7, 12, 1), float32],) {
  %199 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
  (%199,)
}

def @func_3842(%var_3835: Tensor[(1008), float32]) -> (Tensor[(1, 5, 13), float64], Tensor[(1, 5, 13), float64], Tensor[(7, 12, 12), float32], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 1), float32], Tensor[(1008), uint16]) {
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %201 = reshape(%200, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %202 = @func_2935(%201) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %203 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %204 = reshape(%203, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %205 = @func_2935(%204) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %206 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %207 = cast(%var_3835, dtype="uint16") /* ty=Tensor[(1008), uint16] */;
  %208 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(1008), float32] */, dtype="uint16") /* ty=Tensor[(1008), uint16] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %211 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  %212 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  %213 = %202.2;
  %214 = %205.1;
  %215 = %206.0;
  %216 = minimum(%209, %210) /* ty=Tensor[(1008), uint16] */;
  (%211, %212, %213, %214, %215, %216)
}

def @func_801() -> (Tensor[(7, 12, 1), float32],) {
  %217 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %218 = %217.0;
  (%218,)
}

def @func_3576() -> Tensor[(7, 12, 1), float32] {
  %219 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %219.0
}

def @func_4153(%var_4110: Tensor[(3, 9, 16), uint16], %var_4111: Tensor[(3, 9, 16), uint16], %var_4137: Tensor[(1092, 1), float32]) -> (Tensor[(7, 12, 13), int32], Tensor[(1092, 1), float32], Tensor[(3, 9, 16), float32]) {
  %220 = cast(%var_4137, dtype="float32") /* ty=Tensor[(1092, 1), float32] */;
  %221 = reshape(%220, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %222 = cast(%var_4111, dtype="uint16") /* ty=Tensor[(3, 9, 16), uint16] */;
  %223 = shape_of(%var_4110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %224 = cast(%var_4110, dtype="uint16") /* ty=Tensor[(3, 9, 16), uint16] */;
  %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %226 = logical_xor(%224, %225) /* ty=Tensor[(3, 9, 16), uint16] */;
  %227 = cast(%var_4110, dtype="int64") /* ty=Tensor[(3, 9, 16), int64] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="int64") /* ty=Tensor[(3, 9, 16), int64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %231 = bitwise_and(%229, %230) /* ty=Tensor[(3, 9, 16), int64] */;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %233 = @func_1677(%221) /* ty=Tensor[(7, 12, 13), int32] */;
  %234 = log10(%232) /* ty=Tensor[(3, 9, 16), float32] */;
  (%233, %var_4137, %234)
}

def @func_1130() -> (Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) {
  %235 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %236 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %237 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %238 = reshape(%236, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %239 = reshape(%237, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %240 = @func_617(%238, %239) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %241 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %242 = %241.0;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %244 = cosh(%243) /* ty=Tensor[(7, 12, 1), float64] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %246 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %247 = %246.0;
  %248 = cast(%247, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %249 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%242, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %252 = not_equal(%250, %251) /* ty=Tensor[(7, 12, ?), bool] */;
  %253 = cast(%242, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="bool") /* ty=Tensor[(7, 12, ?), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %258 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), bool] */, dtype="float32") /* ty=Tensor[(125), float32] */;
  %259 = log2(%258) /* ty=Tensor[(125), float32] */;
  %260 = cast(%259, dtype="bool") /* ty=Tensor[(125), bool] */;
  %261 = cast(%252, dtype="bool") /* ty=Tensor[(7, 12, ?), bool] */;
  %262 = %235.0;
  %263 = %240.0;
  %264 = erf(%245) /* ty=Tensor[(7, 12, 1), float32] */;
  %265 = less(%255, %256) /* ty=Tensor[(7, 12, ?), bool] */;
  %266 = %257.0;
  %267 = less(%260, %261) /* ty=Tensor[(7, 12, 125), bool] */;
  (%262, %263, %264, %265, %266, %267)
}

def @func_3139(%var_3098: Tensor[(420), float32]) -> (Tensor[(640), float32], Tensor[(420), float32], Tensor[(7, 12, 252), uint64], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) {
  %268 = @func_2580() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) */;
  %269 = cast(%var_3098, dtype="float32") /* ty=Tensor[(420), float32] */;
  %270 = reshape(%269, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), float32] */;
  %271 = @func_2231(%270) /* ty=(Tensor[(7, 12, 5), uint16], Tensor[(7, 12, ?), float32], Tensor[(7, 12, 3), int8], Tensor[(252), float64]) */;
  %272 = %271.3;
  %273 = @func_2267() /* ty=Tensor[(7, 12, 1), float32] */;
  %274 = cast(%272, dtype="uint64") /* ty=Tensor[(252), uint64] */;
  %275 = cast(%273, dtype="uint64") /* ty=Tensor[(7, 12, 1), uint64] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %277 = cast(meta[relay.Constant][14] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %278 = reshape(%276, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %279 = reshape(%277, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %280 = %268.2;
  %281 = add(%274, %275) /* ty=Tensor[(7, 12, 252), uint64] */;
  %282 = @func_2364(%278, %279) /* ty=Tensor[(13, 16, 10), bool] */;
  (%280, %var_3098, %281, %282, meta[relay.Constant][14] /* ty=Tensor[(2080), float32] */)
}

def @func_3460(%var_3416: Tensor[(5, 1, 8), uint16], %var_3417: Tensor[(5, 11, 8), uint16]) -> (Tensor[(5, 11, 8), uint16], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %283 = cast(%var_3416, dtype="uint16") /* ty=Tensor[(5, 1, 8), uint16] */;
  %284 = cast(%var_3417, dtype="uint16") /* ty=Tensor[(5, 11, 8), uint16] */;
  %285 = cast(%var_3417, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %286 = erf(%285) /* ty=Tensor[(5, 11, 8), float64] */;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %288 = cast(%286, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %289 = bitwise_or(%283, %284) /* ty=Tensor[(5, 11, 8), uint16] */;
  %290 = acosh(%287) /* ty=Tensor[(5, 11, 8), float64] */;
  %291 = sin(%288) /* ty=Tensor[(5, 11, 8), float64] */;
  (%289, %290, %291)
}

def @func_913() -> (Tensor[(7, 12, 1), float32],) {
  %292 = @func_727() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %293 = %292.0;
  (%293,)
}

def @func_3317(%var_3307: Tensor[(9, 176), float32]) -> (Tensor[(9, 176), float64],) {
  %294 = @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */;
  %295 = %294.2;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %297 = cast(%var_3307, dtype="float64") /* ty=Tensor[(9, 176), float64] */;
  %298 = divide(%296, %297) /* ty=Tensor[(9, 176), float64] */;
  (%298,)
}

def @func_1859(%var_1841: Tensor[(756, 1), float32], %var_1843: Tensor[(756, 7), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) {
  %299 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %300 = cast(%var_1841, dtype="float32") /* ty=Tensor[(756, 1), float32] */;
  %301 = reshape(%300, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %302 = @func_1409(%301) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */;
  %303 = cast(%var_1841, dtype="float64") /* ty=Tensor[(756, 1), float64] */;
  %304 = cast(%var_1843, dtype="float64") /* ty=Tensor[(756, 7), float64] */;
  %305 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %306 = %299.0;
  %307 = %302.0;
  %308 = multiply(%303, %304) /* ty=Tensor[(756, 7), float64] */;
  %309 = %305.0;
  (%306, %307, %308, %309)
}

def @func_2515() -> (Tensor[(7, 12, ?), int64],) {
  %310 = @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */;
  %311 = %310.1;
  (%311,)
}

def @func_4933(%var_4886: Tensor[(8, 5, 16), float32], %var_4919: Tensor[(7, 12, 4), float32]) -> (Tensor[(8, 5, 16), float64], Tensor[(84), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 4), float32]) {
  %312 = @func_3372() /* ty=(Tensor[(?, 5, 13), bool], Tensor[(8, 5, 16), float32], Tensor[(160, 4), float32]) */;
  %313 = %312.1;
  %314 = cast(%var_4886, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %318 = cast(meta[relay.Constant][15] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %319 = reshape(%318, newshape=[7, 12, 1]) /* ty=Tensor[(7, 12, 1), float32] */;
  %320 = @func_1913(%319) /* ty=(Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32]) */;
  %321 = %320.1;
  %322 = cast(%321, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %323 = cast(%var_4919, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %324 = floor_mod(%316, %317) /* ty=Tensor[(8, 5, 16), float64] */;
  %325 = @func_4775() /* ty=Tensor[(7, 12, 1), float32] */;
  %326 = floor_mod(%322, %323) /* ty=Tensor[(7, 12, 4), float32] */;
  (%324, meta[relay.Constant][15] /* ty=Tensor[(84), float32] */, %325, %326)
}

def @func_5076(%var_5010: Tensor[(7, 12, 10), float32]) -> (Tensor[(756), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 25), bool], Tensor[(7, 12, 10), uint64], Tensor[(36, 15), float32], Tensor[(540), float32], Tensor[(756), float32]) {
  %327 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 25), bool] */, dtype="bool") /* ty=Tensor[(5, 25), bool] */;
  %328 = reshape(%327, newshape=[5, 25]) /* ty=Tensor[(5, 25), bool] */;
  %329 = @func_895(%328) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(5, 25), bool]) */;
  %330 = @func_2515() /* ty=(Tensor[(7, 12, ?), int64],) */;
  %331 = %330.0;
  %332 = cast(%331, dtype="float64") /* ty=Tensor[(7, 12, ?), float64] */;
  %333 = asin(%332) /* ty=Tensor[(7, 12, ?), float64] */;
  %334 = @func_1174() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %335 = %334.0;
  %336 = cast(%335, dtype="uint64") /* ty=Tensor[(7, 12, 1), uint64] */;
  %337 = cast(%var_5010, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
  %338 = minimum(%336, %337) /* ty=Tensor[(7, 12, 10), uint64] */;
  %339 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 12, 10), uint64] */, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
  %340 = shape_of(%338, dtype="int32") /* ty=Tensor[(3), int32] */;
  %341 = cast(%338, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
  %342 = dyn.reshape(%339, %340, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %343 = subtract(%341, %342) /* ty=Tensor[(7, 12, 10), uint64] */;
  %344 = cast(%333, dtype="uint64") /* ty=Tensor[(7, 12, ?), uint64] */;
  %345 = cast(%343, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
  %346 = cast(meta[relay.Constant][19] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
  %347 = reshape(%346, newshape=[36, 15]) /* ty=Tensor[(36, 15), float32] */;
  %348 = @func_3642(%347) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 12), float32], Tensor[(1008), float32], Tensor[(3, 2, 6), float32], Tensor[(36, 15), float32]) */;
  %349 = cast(meta[relay.Constant][16] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %350 = reshape(%349, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %351 = @func_1409(%350) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */;
  %352 = %351.2;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(756), float32] */;
  %354 = %329.1;
  %355 = add(%344, %345) /* ty=Tensor[(7, 12, 10), uint64] */;
  %356 = %348.4;
  %357 = log(%353) /* ty=Tensor[(756), float32] */;
  (meta[relay.Constant][16] /* ty=Tensor[(756), float32] */, %354, meta[relay.Constant][17] /* ty=Tensor[(5, 25), bool] */, %355, %356, meta[relay.Constant][19] /* ty=Tensor[(540), float32] */, %357)
}

def @func_2267() -> Tensor[(7, 12, 1), float32] {
  %358 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %358.0
}

def @func_4277() -> (Tensor[(7, 12, 2), bool], Tensor[(7, 12, 1), float32]) {
  %359 = @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %360 = %359.0;
  %361 = cast(%360, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %362 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 12, 2), float32] */, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
  %363 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %364 = logical_and(%361, %362) /* ty=Tensor[(7, 12, 2), bool] */;
  %365 = %363.0;
  (%364, %365)
}

def @main(%var_5285: Tensor[(7, 5, 13), float64]) -> (Tensor[(7, 5, 13), uint64],) {
  %366 = @func_2083() /* ty=Tensor[(1, 5, 13), float64] */;
  %367 = cast(%366, dtype="uint64") /* ty=Tensor[(1, 5, 13), uint64] */;
  %368 = cast(%var_5285, dtype="uint64") /* ty=Tensor[(7, 5, 13), uint64] */;
  %369 = bitwise_xor(%367, %368) /* ty=Tensor[(7, 5, 13), uint64] */;
  (%369,)
}

def @func_1331(%var_1267: Tensor[(13, 4, 5), int64], %var_1279: Tensor[(176, 1), float32], %var_1291: Tensor[(7, 12, 8), int64]) -> (Tensor[(176, 1), float32], Tensor[(7, 12, 8), float64], Tensor[(7, 12, 1), float64], Tensor[(13, 4, 5), int16], Tensor[(13, 4, 5), bool]) {
  %370 = cast(%var_1279, dtype="float32") /* ty=Tensor[(176, 1), float32] */;
  %371 = reshape(%370, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %372 = @func_373(%371) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) */;
  %373 = %372.1;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(7, 12, ?), float64] */;
  %375 = cast(%var_1291, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %376 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 5), int64] */, dtype="int16") /* ty=Tensor[(13, 4, 5), int16] */;
  %378 = shape_of(%var_1267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_1267, dtype="int16") /* ty=Tensor[(13, 4, 5), int16] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %381 = cast(%var_1267, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %382 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 5), int64] */, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %385 = greater_equal(%383, %384) /* ty=Tensor[(13, 4, 5), bool] */;
  %386 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 4, 5), int64] */, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %390 = floor_mod(%374, %375) /* ty=Tensor[(7, 12, 8), float64] */;
  %391 = %376.1;
  %392 = bitwise_or(%379, %380) /* ty=Tensor[(13, 4, 5), int16] */;
  %393 = logical_or(%388, %389) /* ty=Tensor[(13, 4, 5), bool] */;
  (%var_1279, %390, %391, %392, %393)
}

def @func_775(%var_768: Tensor[(7, 12, 3), float64]) -> (Tensor[(7, 12, 3), int8],) {
  %394 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %395 = %394.1;
  %396 = cast(%395, dtype="int8") /* ty=Tensor[(7, 12, 1), int8] */;
  %397 = cast(%var_768, dtype="int8") /* ty=Tensor[(7, 12, 3), int8] */;
  %398 = minimum(%396, %397) /* ty=Tensor[(7, 12, 3), int8] */;
  (%398,)
}

def @func_3726() -> (Tensor[(7, 12, ?), uint32], Tensor[(1, 5, 13), float64]) {
  %399 = @func_1803() /* ty=(Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) */;
  %400 = %399.1;
  %401 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  (%400, %401)
}

def @func_727() -> (Tensor[(7, 12, 1), float32],) {
  %402 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %403 = %402.0;
  (%403,)
}

def @func_305() -> (Tensor[(7, 12, 1), float32],) {
  %404 = cast(meta[relay.Constant][22] /* ty=Tensor[(7, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %405 = exp(%404) /* ty=Tensor[(7, 12, 1), float32] */;
  (%405,)
}

def @func_951(%var_940: Tensor[(3, 2, 6), float32]) -> (Tensor[(3, 2, 6), float32], Tensor[(7, 12, 1), float64]) {
  %406 = cast(%var_940, dtype="float32") /* ty=Tensor[(3, 2, 6), float32] */;
  %407 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %408 = atanh(%406) /* ty=Tensor[(3, 2, 6), float32] */;
  %409 = %407.1;
  (%408, %409)
}

def @func_1470(%var_1424: Tensor[(13, 14, 12), float64]) -> (Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) {
  %410 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %411 = cast(%var_1424, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
  %412 = log10(%411) /* ty=Tensor[(13, 14, 12), float64] */;
  %413 = cast(%412, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
  %414 = cos(%413) /* ty=Tensor[(13, 14, 12), float32] */;
  %415 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 14, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 14, 12), uint16] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="uint16") /* ty=Tensor[(13, 14, 12), uint16] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %419 = %410.0;
  %420 = left_shift(%417, %418) /* ty=Tensor[(13, 14, 12), uint16] */;
  (%419, %420)
}

def @func_4228(%var_4211: Tensor[(4, 13, 4), float32], %var_4212: Tensor[(4, 13, 4), float32]) -> (Tensor[(4, 13, 4), float32],) {
  %421 = cast(%var_4212, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
  %422 = shape_of(%var_4211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_4211, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %425 = subtract(%423, %424) /* ty=Tensor[(4, 13, 4), float32] */;
  (%425,)
}

def @func_2580() -> (Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) {
  %426 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %427 = cast(meta[relay.Constant][24] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
  %428 = reshape(%427, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %429 = %426.0;
  %430 = @func_1976(%428) /* ty=Tensor[(8, 5, 16), float32] */;
  (%429, %430, meta[relay.Constant][24] /* ty=Tensor[(640), float32] */)
}

def @func_3372() -> (Tensor[(?, 5, 13), bool], Tensor[(8, 5, 16), float32], Tensor[(160, 4), float32]) {
  %431 = @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */;
  %432 = %431.0;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  %434 = atanh(%433) /* ty=Tensor[(1, 5, 13), float64] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %439 = cast(meta[relay.Constant][25] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %440 = reshape(%439, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %441 = not_equal(%437, %438) /* ty=Tensor[(?, 5, 13), bool] */;
  %442 = @func_1976(%440) /* ty=Tensor[(8, 5, 16), float32] */;
  (%441, %442, meta[relay.Constant][25] /* ty=Tensor[(160, 4), float32] */)
}

def @func_5238() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %443 = @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %444 = @func_1130() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) */;
  %445 = %443.0;
  %446 = @func_4775() /* ty=Tensor[(7, 12, 1), float32] */;
  %447 = %444.2;
  (%445, %446, %447)
}

def @func_1174() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %448 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %449 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %450 = %448.0;
  %451 = %449.0;
  (%450, %451)
}

def @func_617(%var_607: Tensor[(5, 5, 5), bool], %var_608: Tensor[(5, 5, 5), bool]) -> (Tensor[(5, 5, 5), bool],) {
  %452 = cast(%var_608, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %453 = shape_of(%var_607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_607, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = logical_and(%454, %455) /* ty=Tensor[(5, 5, 5), bool] */;
  (%456,)
}

def @func_3302() -> Tensor[(7, 12, 1), float64] {
  %457 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %457.2
}

def @func_1803() -> (Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) {
  %458 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %459 = %458.0;
  %460 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
  %461 = cast(%460, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %462 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%459, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %465 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %466 = %465.1;
  %467 = cast(%459, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
  %468 = shape_of(%466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%466, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %471 = cast(%459, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %472 = logical_xor(%463, %464) /* ty=Tensor[(7, 12, ?), int32] */;
  %473 = bitwise_xor(%469, %470) /* ty=Tensor[(7, 12, ?), uint32] */;
  %474 = log2(%471) /* ty=Tensor[(7, 12, 1), float64] */;
  (%472, %473, %474)
}

def @func_3215(%var_3164: Tensor[(7, 10, 15), uint16]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), bool], Tensor[(7, 12, 1), float32]) {
  %475 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %476 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="float32") /* ty=Tensor[(7, 10, 15), float32] */;
  %477 = log10(%476) /* ty=Tensor[(7, 10, 15), float32] */;
  %478 = cast(%var_3164, dtype="uint16") /* ty=Tensor[(7, 10, 15), uint16] */;
  %479 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="uint16") /* ty=Tensor[(7, 10, 15), uint16] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %482 = logical_xor(%480, %481) /* ty=Tensor[(7, 10, 15), uint16] */;
  %483 = cast(%482, dtype="int32") /* ty=Tensor[(7, 10, 15), int32] */;
  %484 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%477, dtype="int32") /* ty=Tensor[(7, 10, 15), int32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %487 = minimum(%485, %486) /* ty=Tensor[(7, 10, 15), int32] */;
  %488 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = cast(%482, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %493 = shape_of(%var_3164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%var_3164, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %497 = %475.1;
  %498 = less(%490, %491) /* ty=Tensor[(7, 10, 15), bool] */;
  %499 = logical_and(%494, %495) /* ty=Tensor[(7, 10, 15), bool] */;
  %500 = %496.0;
  (%497, %498, %499, %500)
}

def @func_4052() -> Tensor[(7, 12, 1), float32] {
  %501 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %501.0
}

def @func_1206() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %502 = @func_727() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %503 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %504 = %502.0;
  %505 = %503.0;
  (%504, %505)
}

def @func_1343() -> Tensor[(7, 12, 1), float32] {
  %506 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %506.0
}

def @func_4737() -> Tensor[(7, 3, 2), bool] {
  %507 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), int16] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %508 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 2), int16] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %511 = greater_equal(%509, %510) /* ty=Tensor[(7, 3, 2), bool] */;
  %512 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), int16] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%514, %515) /* ty=Tensor[(7, 3, 2), bool] */
}

def @func_328() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) {
  %516 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %517 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %518 = %517.0;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %520 = sinh(%519) /* ty=Tensor[(7, 12, 1), float32] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %522 = sin(%521) /* ty=Tensor[(7, 12, 1), float64] */;
  %523 = cast(%522, dtype="int64") /* ty=Tensor[(7, 12, 1), int64] */;
  %524 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%520, dtype="int64") /* ty=Tensor[(7, 12, 1), int64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %527 = cast(%518, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %528 = %516.0;
  %529 = maximum(%525, %526) /* ty=Tensor[(7, 12, ?), int64] */;
  %530 = atan(%527) /* ty=Tensor[(7, 12, 1), float64] */;
  (%528, %529, %530)
}

def @func_1677(%var_1670: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), int32] {
  %531 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
  %532 = cast(%531, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %533 = cast(%var_1670, dtype="int32") /* ty=Tensor[(7, 12, 13), int32] */;
  add(%532, %533) /* ty=Tensor[(7, 12, 13), int32] */
}

def @func_2083() -> Tensor[(1, 5, 13), float64] {
  %534 = @func_2019() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */;
  %534.0
}

def @func_679() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %535 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %536 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %537 = %535.0;
  %538 = %536.0;
  (%537, %538)
}

def @func_2364(%var_2336: Tensor[(13, 16, 10), float32], %var_2337: Tensor[(13, 16, 10), float32]) -> Tensor[(13, 16, 10), bool] {
  %539 = cast(%var_2337, dtype="float32") /* ty=Tensor[(13, 16, 10), float32] */;
  %540 = shape_of(%var_2336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_2336, dtype="float32") /* ty=Tensor[(13, 16, 10), float32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %543 = floor_mod(%541, %542) /* ty=Tensor[(13, 16, 10), float32] */;
  %544 = cast(%var_2336, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%546, %547) /* ty=Tensor[(13, 16, 10), bool] */
}

def @func_2019() -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) {
  %548 = @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */;
  %549 = cast(meta[relay.Constant][29] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %550 = cast(meta[relay.Constant][30] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %551 = reshape(%549, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
  %552 = reshape(%550, newshape=[252, 1]) /* ty=Tensor[(252, 1), float64] */;
  %553 = @func_1544(%551, %552) /* ty=(Tensor[(7, 12, 8), uint32], Tensor[(7, 12, 3), int8], Tensor[(252, 1), float64]) */;
  %554 = %553.1;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
  %556 = reshape(%555, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
  %557 = @func_775(%556) /* ty=(Tensor[(7, 12, 3), int8],) */;
  %558 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %559 = %548.0;
  %560 = %557.0;
  %561 = %558.1;
  (%559, %554, meta[relay.Constant][29] /* ty=Tensor[(672), float64] */, meta[relay.Constant][30] /* ty=Tensor[(252), float64] */, %560, %561)
}

def @func_4478(%var_4368: Tensor[(9, 84), float32], %var_4443: Tensor[(1287), float64], %var_4457: Tensor[(7, 12, 5292), int32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(9, 84), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 13), int32], Tensor[(1092), float32], Tensor[(11, 13, 9), bool], Tensor[(1287), float64], Tensor[(7, 12, 5292), bool], Tensor[(5292), float64]) {
  %562 = @func_3068() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) */;
  %563 = cast(%var_4368, dtype="float32") /* ty=Tensor[(9, 84), float32] */;
  %564 = cast(meta[relay.Constant][31] /* ty=Tensor[(5292), float32] */, dtype="float32") /* ty=Tensor[(5292), float32] */;
  %565 = reshape(%563, newshape=[756, 1]) /* ty=Tensor[(756, 1), float32] */;
  %566 = reshape(%564, newshape=[756, 7]) /* ty=Tensor[(756, 7), float32] */;
  %567 = @func_1859(%565, %566) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) */;
  %568 = @func_2515() /* ty=(Tensor[(7, 12, ?), int64],) */;
  %569 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %570 = cast(meta[relay.Constant][32] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %571 = reshape(%570, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %572 = cast(%var_4443, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %573 = reshape(%572, newshape=[11, 13, 9]) /* ty=Tensor[(11, 13, 9), float64] */;
  %574 = @func_2497(%573) /* ty=(Tensor[(11, 13, 9), bool], Tensor[(672), float64], Tensor[(1, 5, 13), float64], Tensor[(11, 13, 9), bool]) */;
  %575 = cast(meta[relay.Constant][31] /* ty=Tensor[(5292), float32] */, dtype="float64") /* ty=Tensor[(5292), float64] */;
  %576 = atanh(%575) /* ty=Tensor[(5292), float64] */;
  %577 = @func_1711() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %578 = %577.0;
  %579 = cast(%576, dtype="int32") /* ty=Tensor[(5292), int32] */;
  %580 = cast(%578, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %581 = bitwise_and(%579, %580) /* ty=Tensor[(7, 12, 5292), int32] */;
  %582 = cast(%var_4457, dtype="float64") /* ty=Tensor[(7, 12, 5292), float64] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="float64") /* ty=Tensor[(7, 12, 5292), float64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %586 = floor_divide(%584, %585) /* ty=Tensor[(7, 12, 5292), float64] */;
  %587 = cast(%586, dtype="bool") /* ty=Tensor[(7, 12, 5292), bool] */;
  %588 = cast(%576, dtype="bool") /* ty=Tensor[(5292), bool] */;
  %589 = cast(%576, dtype="float64") /* ty=Tensor[(5292), float64] */;
  %590 = %562.2;
  %591 = %567.1;
  %592 = %568.0;
  %593 = %569.0;
  %594 = @func_1677(%571) /* ty=Tensor[(7, 12, 13), int32] */;
  %595 = %574.3;
  %596 = greater_equal(%587, %588) /* ty=Tensor[(7, 12, 5292), bool] */;
  %597 = sqrt(%589) /* ty=Tensor[(5292), float64] */;
  (%590, %591, %var_4368, %592, %593, %594, meta[relay.Constant][32] /* ty=Tensor[(1092), float32] */, %595, %var_4443, %596, %597)
}

def @func_3068() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) {
  %598 = @func_1130() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) */;
  %599 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %600 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %601 = cast(meta[relay.Constant][33] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %602 = cast(meta[relay.Constant][33] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %603 = reshape(%601, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %604 = reshape(%602, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %605 = %598.2;
  %606 = %599.0;
  %607 = %600.0;
  %608 = @func_2364(%603, %604) /* ty=Tensor[(13, 16, 10), bool] */;
  (%605, %606, %607, %608, meta[relay.Constant][33] /* ty=Tensor[(2080), float32] */)
}

def @func_4645(%var_4598: Tensor[(6, 12, 7), float64], %var_4613: Tensor[(1, 1584), float32]) -> (Tensor[(6, 12, 7), float64], Tensor[(7, 12, 1), float32], Tensor[(9, 176), bool], Tensor[(7, 12, 1), float32]) {
  %609 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %610 = shape_of(%var_4598, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_4598, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %613 = @func_3068() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) */;
  %614 = cast(%var_4613, dtype="float32") /* ty=Tensor[(1, 1584), float32] */;
  %615 = reshape(%614, newshape=[9, 176]) /* ty=Tensor[(9, 176), float32] */;
  %616 = @func_3317(%615) /* ty=(Tensor[(9, 176), float64],) */;
  %617 = %616.0;
  %618 = cast(%var_4613, dtype="bool") /* ty=Tensor[(1, 1584), bool] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(2), int32] */;
  %620 = cast(%617, dtype="bool") /* ty=Tensor[(9, 176), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %622 = floor_divide(%611, %612) /* ty=Tensor[(6, 12, 7), float64] */;
  %623 = %613.1;
  %624 = logical_or(%620, %621) /* ty=Tensor[(9, 176), bool] */;
  %625 = @func_4052() /* ty=Tensor[(7, 12, 1), float32] */;
  (%622, %623, %624, %625)
}

def @func_3927(%var_3919: Tensor[(1, 2184), float64]) -> (Tensor[(1, 5, 13), float64], Tensor[(13, 14, 12), uint16], Tensor[(1, 2184), float64]) {
  %626 = @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */;
  %627 = cast(%var_3919, dtype="float64") /* ty=Tensor[(1, 2184), float64] */;
  %628 = reshape(%627, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %629 = @func_1470(%628) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) */;
  %630 = %626.0;
  %631 = %629.1;
  (%630, %631, %var_3919)
}

def @func_533() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) {
  %632 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %633 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %634 = %633.0;
  %635 = cast(%634, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %636 = %632.0;
  %637 = cos(%635) /* ty=Tensor[(7, 12, 1), float64] */;
  (%636, %637)
}

def @func_2231(%var_2210: Tensor[(7, 12, 5), float32]) -> (Tensor[(7, 12, 5), uint16], Tensor[(7, 12, ?), float32], Tensor[(7, 12, 3), int8], Tensor[(252), float64]) {
  %638 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %641 = sqrt(%640) /* ty=Tensor[(7, 12, 1), float32] */;
  %642 = cast(%641, dtype="uint16") /* ty=Tensor[(7, 12, 1), uint16] */;
  %643 = cast(%var_2210, dtype="uint16") /* ty=Tensor[(7, 12, 5), uint16] */;
  %644 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %645 = %644.0;
  %646 = cast(%645, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %647 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%641, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %650 = cast(meta[relay.Constant][35] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
  %651 = reshape(%650, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
  %652 = @func_775(%651) /* ty=(Tensor[(7, 12, 3), int8],) */;
  %653 = left_shift(%642, %643) /* ty=Tensor[(7, 12, 5), uint16] */;
  %654 = floor_mod(%648, %649) /* ty=Tensor[(7, 12, ?), float32] */;
  %655 = %652.0;
  (%653, %654, %655, meta[relay.Constant][35] /* ty=Tensor[(252), float64] */)
}

def @func_1500() -> Tensor[(7, 12, 1), float32] {
  %656 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %656.0
}

def @func_3896() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) {
  %657 = cast(meta[relay.Constant][36] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %658 = reshape(%657, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %659 = @func_1409(%658) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */;
  %660 = @func_2267() /* ty=Tensor[(7, 12, 1), float32] */;
  %661 = %659.1;
  (%660, %661, meta[relay.Constant][36] /* ty=Tensor[(756), float32] */)
}

def @func_2695(%var_2664: Tensor[(54, 14), float32], %var_2665: Tensor[(5292), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5292), float32], Tensor[(54, 14), float64]) {
  %662 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %663 = cast(%var_2664, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
  %664 = cast(%var_2665, dtype="float32") /* ty=Tensor[(5292), float32] */;
  %665 = reshape(%663, newshape=[756, 1]) /* ty=Tensor[(756, 1), float32] */;
  %666 = reshape(%664, newshape=[756, 7]) /* ty=Tensor[(756, 7), float32] */;
  %667 = @func_1859(%665, %666) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) */;
  %668 = cast(%var_2664, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
  %669 = %662.1;
  %670 = %667.0;
  %671 = sqrt(%668) /* ty=Tensor[(54, 14), float64] */;
  (%669, %670, %var_2665, %671)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4834(%var_4804: Tensor[(7, 12, 15), float32], %var_4824: Tensor[(2184), float64]) -> (Tensor[(7, 12, 15), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 15), float64], Tensor[(7, 12, 1), float32], Tensor[(2184), float64]) {
  %0 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %3 = cast(%var_4804, dtype="bool") /* ty=Tensor[(7, 12, 15), bool] */;
  %4 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %5 = cast(%var_4804, dtype="float64") /* ty=Tensor[(7, 12, 15), float64] */;
  %6 = cast(%var_4824, dtype="float64") /* ty=Tensor[(2184), float64] */;
  %7 = reshape(%6, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %8 = @func_1470(%7) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) */;
  %9 = greater_equal(%2, %3) /* ty=Tensor[(7, 12, 15), bool] */;
  %10 = %4.0;
  %11 = erf(%5) /* ty=Tensor[(7, 12, 15), float64] */;
  %12 = %8.0;
  (%9, %10, %11, %12, %var_4824)
}

def @func_914() -> (Tensor[(7, 12, 1), float32],) {
  %15 = fn () -> (Tensor[(7, 12, 1), float32],) {
    %13 = @func_727() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %14 = %13.0;
    (%14,)
  };
  %15() /* ty=(Tensor[(7, 12, 1), float32],) */
}

def @func_2500(%var_2498: Tensor[(11, 13, 9), float64]) -> (Tensor[(11, 13, 9), bool], Tensor[(672), float64], Tensor[(1, 5, 13), float64], Tensor[(11, 13, 9), bool]) {
  @func_2497(%var_2498) /* ty=(Tensor[(11, 13, 9), bool], Tensor[(672), float64], Tensor[(1, 5, 13), float64], Tensor[(11, 13, 9), bool]) */
}

def @func_2935(%var_2909: Tensor[(7, 12, 12), float32]) -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) {
  %16 = @func_2019() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */;
  %17 = @func_1803() /* ty=(Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) */;
  %18 = @func_2267() /* ty=Tensor[(7, 12, 1), float32] */;
  %19 = cast(%18, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
  %20 = cast(%var_2909, dtype="uint32") /* ty=Tensor[(7, 12, 12), uint32] */;
  %21 = subtract(%19, %20) /* ty=Tensor[(7, 12, 12), uint32] */;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(7, 12, 12), float32] */;
  %23 = %16.0;
  %24 = %17.2;
  %25 = sinh(%22) /* ty=Tensor[(7, 12, 12), float32] */;
  (%23, %24, %25)
}

def @func_1677(%var_1670: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), int32] {
  %26 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
  %27 = cast(%26, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %28 = cast(%var_1670, dtype="int32") /* ty=Tensor[(7, 12, 13), int32] */;
  add(%27, %28) /* ty=Tensor[(7, 12, 13), int32] */
}

def @func_2135() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) {
  @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */
}

def @func_5145(%var_5143: Tensor[(14, 7, 3), int16], %var_5144: Tensor[(1008), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64], Tensor[(1008), float32], Tensor[(14, 7, 3), bool]) {
  @func_5141(%var_5143, %var_5144) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64], Tensor[(1008), float32], Tensor[(14, 7, 3), bool]) */
}

def @func_3464(%var_3462: Tensor[(5, 1, 8), uint16], %var_3463: Tensor[(5, 11, 8), uint16]) -> (Tensor[(5, 11, 8), uint16], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  @func_3460(%var_3462, %var_3463) /* ty=(Tensor[(5, 11, 8), uint16], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) */
}

def @func_4478(%var_4368: Tensor[(9, 84), float32], %var_4443: Tensor[(1287), float64], %var_4457: Tensor[(7, 12, 5292), int32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(9, 84), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 13), int32], Tensor[(1092), float32], Tensor[(11, 13, 9), bool], Tensor[(1287), float64], Tensor[(7, 12, 5292), bool], Tensor[(5292), float64]) {
  %29 = @func_3068() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) */;
  %30 = cast(%var_4368, dtype="float32") /* ty=Tensor[(9, 84), float32] */;
  %31 = cast(meta[relay.Constant][0] /* ty=Tensor[(5292), float32] */, dtype="float32") /* ty=Tensor[(5292), float32] */;
  %32 = reshape(%30, newshape=[756, 1]) /* ty=Tensor[(756, 1), float32] */;
  %33 = reshape(%31, newshape=[756, 7]) /* ty=Tensor[(756, 7), float32] */;
  %34 = @func_1859(%32, %33) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) */;
  %35 = @func_2515() /* ty=(Tensor[(7, 12, ?), int64],) */;
  %36 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %37 = cast(meta[relay.Constant][1] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %38 = reshape(%37, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
  %39 = cast(%var_4443, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %40 = reshape(%39, newshape=[11, 13, 9]) /* ty=Tensor[(11, 13, 9), float64] */;
  %41 = @func_2497(%40) /* ty=(Tensor[(11, 13, 9), bool], Tensor[(672), float64], Tensor[(1, 5, 13), float64], Tensor[(11, 13, 9), bool]) */;
  %42 = cast(meta[relay.Constant][0] /* ty=Tensor[(5292), float32] */, dtype="float64") /* ty=Tensor[(5292), float64] */;
  %43 = atanh(%42) /* ty=Tensor[(5292), float64] */;
  %44 = @func_1711() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %45 = %44.0;
  %46 = cast(%43, dtype="int32") /* ty=Tensor[(5292), int32] */;
  %47 = cast(%45, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
  %48 = bitwise_and(%46, %47) /* ty=Tensor[(7, 12, 5292), int32] */;
  %49 = cast(%var_4457, dtype="float64") /* ty=Tensor[(7, 12, 5292), float64] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%48, dtype="float64") /* ty=Tensor[(7, 12, 5292), float64] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %53 = floor_divide(%51, %52) /* ty=Tensor[(7, 12, 5292), float64] */;
  %54 = cast(%53, dtype="bool") /* ty=Tensor[(7, 12, 5292), bool] */;
  %55 = cast(%43, dtype="bool") /* ty=Tensor[(5292), bool] */;
  %56 = cast(%43, dtype="float64") /* ty=Tensor[(5292), float64] */;
  %57 = %29.2;
  %58 = %34.1;
  %59 = %35.0;
  %60 = %36.0;
  %61 = @func_1677(%38) /* ty=Tensor[(7, 12, 13), int32] */;
  %62 = %41.3;
  %63 = greater_equal(%54, %55) /* ty=Tensor[(7, 12, 5292), bool] */;
  %64 = sqrt(%56) /* ty=Tensor[(5292), float64] */;
  (%57, %58, %var_4368, %59, %60, %61, meta[relay.Constant][1] /* ty=Tensor[(1092), float32] */, %62, %var_4443, %63, %64)
}

def @func_4739() -> Tensor[(7, 3, 2), bool] {
  @func_4737() /* ty=Tensor[(7, 3, 2), bool] */
}

def @func_330() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) {
  @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */
}

def @func_895(%var_885: Tensor[(5, 25), bool]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(5, 25), bool]) {
  %65 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %66 = @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %67 = cast(%var_885, dtype="bool") /* ty=Tensor[(5, 25), bool] */;
  %68 = cast(%var_885, dtype="bool") /* ty=Tensor[(5, 25), bool] */;
  %69 = reshape(%67, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %70 = reshape(%68, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %71 = @func_617(%69, %70) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %72 = %65.0;
  %73 = %66.0;
  %74 = %71.0;
  (%72, %73, %74, %var_885)
}

def @func_2133() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) {
  %75 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %76 = %75.1;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 176), float32] */, dtype="float32") /* ty=Tensor[(1, 176), float32] */;
  %79 = reshape(%78, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %80 = @func_373(%79) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) */;
  %81 = sigmoid(%77) /* ty=Tensor[(7, 12, 1), float32] */;
  %82 = %80.1;
  (%81, %82, meta[relay.Constant][2] /* ty=Tensor[(1, 176), float32] */)
}

def @func_3070() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) {
  @func_3068() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) */
}

def @func_533() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) {
  %83 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %84 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %87 = %83.0;
  %88 = cos(%86) /* ty=Tensor[(7, 12, 1), float64] */;
  (%87, %88)
}

def @func_3642(%var_3637: Tensor[(36, 15), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 12), float32], Tensor[(1008), float32], Tensor[(3, 2, 6), float32], Tensor[(36, 15), float32]) {
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %90 = reshape(%89, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %91 = @func_2935(%90) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %92 = cast(meta[relay.Constant][4] /* ty=Tensor[(36, 1), float32] */, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %93 = reshape(%92, newshape=[3, 2, 6]) /* ty=Tensor[(3, 2, 6), float32] */;
  %94 = @func_951(%93) /* ty=(Tensor[(3, 2, 6), float32], Tensor[(7, 12, 1), float64]) */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(36, 1), float32] */, dtype="float32") /* ty=Tensor[(36, 1), float32] */;
  %96 = cast(%var_3637, dtype="float32") /* ty=Tensor[(36, 15), float32] */;
  %97 = @func_3576() /* ty=Tensor[(7, 12, 1), float32] */;
  %98 = %91.2;
  %99 = %94.0;
  %100 = power(%95, %96) /* ty=Tensor[(36, 15), float32] */;
  (%97, %98, meta[relay.Constant][3] /* ty=Tensor[(1008), float32] */, %99, %100)
}

def @func_1500() -> Tensor[(7, 12, 1), float32] {
  %101 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %101.0
}

def @func_1965() -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) {
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 5, 13), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  %103 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %104 = sinh(%102) /* ty=Tensor[(1, 5, 13), float64] */;
  %105 = %103.1;
  (%104, %105)
}

def @func_1336(%var_1333: Tensor[(13, 4, 5), int64], %var_1334: Tensor[(176, 1), float32], %var_1335: Tensor[(7, 12, 8), int64]) -> (Tensor[(176, 1), float32], Tensor[(7, 12, 8), float64], Tensor[(7, 12, 1), float64], Tensor[(13, 4, 5), int16], Tensor[(13, 4, 5), bool]) {
  @func_1331(%var_1333, %var_1334, %var_1335) /* ty=(Tensor[(176, 1), float32], Tensor[(7, 12, 8), float64], Tensor[(7, 12, 1), float64], Tensor[(13, 4, 5), int16], Tensor[(13, 4, 5), bool]) */
}

def @func_1331(%var_1267: Tensor[(13, 4, 5), int64], %var_1279: Tensor[(176, 1), float32], %var_1291: Tensor[(7, 12, 8), int64]) -> (Tensor[(176, 1), float32], Tensor[(7, 12, 8), float64], Tensor[(7, 12, 1), float64], Tensor[(13, 4, 5), int16], Tensor[(13, 4, 5), bool]) {
  %106 = cast(%var_1279, dtype="float32") /* ty=Tensor[(176, 1), float32] */;
  %107 = reshape(%106, newshape=[8, 2, 11]) /* ty=Tensor[(8, 2, 11), float32] */;
  %108 = @func_373(%107) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) */;
  %109 = %108.1;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(7, 12, ?), float64] */;
  %111 = cast(%var_1291, dtype="float64") /* ty=Tensor[(7, 12, 8), float64] */;
  %112 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 4, 5), int64] */, dtype="int16") /* ty=Tensor[(13, 4, 5), int16] */;
  %114 = shape_of(%var_1267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%var_1267, dtype="int16") /* ty=Tensor[(13, 4, 5), int16] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %117 = cast(%var_1267, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %118 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(13, 4, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 4, 5), int64] */, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %121 = greater_equal(%119, %120) /* ty=Tensor[(13, 4, 5), bool] */;
  %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 4, 5), int64] */, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(13, 4, 5), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = floor_mod(%110, %111) /* ty=Tensor[(7, 12, 8), float64] */;
  %127 = %112.1;
  %128 = bitwise_or(%115, %116) /* ty=Tensor[(13, 4, 5), int16] */;
  %129 = logical_or(%124, %125) /* ty=Tensor[(13, 4, 5), bool] */;
  (%var_1279, %126, %127, %128, %129)
}

def @func_2267() -> Tensor[(7, 12, 1), float32] {
  %130 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %130.0
}

def @func_4278() -> (Tensor[(7, 12, 2), bool], Tensor[(7, 12, 1), float32]) {
  %138 = fn () -> (Tensor[(7, 12, 2), bool], Tensor[(7, 12, 1), float32]) {
    %131 = @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %132 = %131.0;
    %133 = cast(%132, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
    %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 12, 2), float32] */, dtype="bool") /* ty=Tensor[(7, 12, 2), bool] */;
    %135 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %136 = logical_and(%133, %134) /* ty=Tensor[(7, 12, 2), bool] */;
    %137 = %135.0;
    (%136, %137)
  };
  %138() /* ty=(Tensor[(7, 12, 2), bool], Tensor[(7, 12, 1), float32]) */
}

def @func_1050(%var_1049: Tensor[(7, 12, 9), float32]) -> (Tensor[(7, 12, 9), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %148 = fn (%var_1010: Tensor[(7, 12, 9), float32]) -> (Tensor[(7, 12, 9), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
    %139 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %140 = %139.0;
    %141 = cast(%140, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
    %142 = cast(%var_1010, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
    %143 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %144 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %145 = less_equal(%141, %142) /* ty=Tensor[(7, 12, 9), bool] */;
    %146 = %143.0;
    %147 = %144.0;
    (%145, %146, %147)
  };
  %148(%var_1049) /* ty=(Tensor[(7, 12, 9), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_1343() -> Tensor[(7, 12, 1), float32] {
  %149 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %149.0
}

def @func_2432() -> (Tensor[(1, 5, 13), float64],) {
  %150 = @func_2083() /* ty=Tensor[(1, 5, 13), float64] */;
  (%150,)
}

def @func_1739() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_2698(%var_2696: Tensor[(54, 14), float32], %var_2697: Tensor[(5292), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5292), float32], Tensor[(54, 14), float64]) {
  %161 = fn (%var_2664: Tensor[(54, 14), float32], %var_2665: Tensor[(5292), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5292), float32], Tensor[(54, 14), float64]) {
    %151 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %152 = cast(%var_2664, dtype="float32") /* ty=Tensor[(54, 14), float32] */;
    %153 = cast(%var_2665, dtype="float32") /* ty=Tensor[(5292), float32] */;
    %154 = reshape(%152, newshape=[756, 1]) /* ty=Tensor[(756, 1), float32] */;
    %155 = reshape(%153, newshape=[756, 7]) /* ty=Tensor[(756, 7), float32] */;
    %156 = @func_1859(%154, %155) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) */;
    %157 = cast(%var_2664, dtype="float64") /* ty=Tensor[(54, 14), float64] */;
    %158 = %151.1;
    %159 = %156.0;
    %160 = sqrt(%157) /* ty=Tensor[(54, 14), float64] */;
    (%158, %159, %var_2665, %160)
  };
  %161(%var_2696, %var_2697) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5292), float32], Tensor[(54, 14), float64]) */
}

def @func_777(%var_776: Tensor[(7, 12, 3), float64]) -> (Tensor[(7, 12, 3), int8],) {
  %167 = fn (%var_768: Tensor[(7, 12, 3), float64]) -> (Tensor[(7, 12, 3), int8],) {
    %162 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %163 = %162.1;
    %164 = cast(%163, dtype="int8") /* ty=Tensor[(7, 12, 1), int8] */;
    %165 = cast(%var_768, dtype="int8") /* ty=Tensor[(7, 12, 3), int8] */;
    %166 = minimum(%164, %165) /* ty=Tensor[(7, 12, 3), int8] */;
    (%166,)
  };
  %167(%var_776) /* ty=(Tensor[(7, 12, 3), int8],) */
}

def @func_3927(%var_3919: Tensor[(1, 2184), float64]) -> (Tensor[(1, 5, 13), float64], Tensor[(13, 14, 12), uint16], Tensor[(1, 2184), float64]) {
  %168 = @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */;
  %169 = cast(%var_3919, dtype="float64") /* ty=Tensor[(1, 2184), float64] */;
  %170 = reshape(%169, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), float64] */;
  %171 = @func_1470(%170) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) */;
  %172 = %168.0;
  %173 = %171.1;
  (%172, %173, %var_3919)
}

def @func_1804() -> (Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) {
  %191 = fn () -> (Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) {
    %174 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %175 = %174.0;
    %176 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
    %177 = cast(%176, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
    %178 = shape_of(%175, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%175, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %181 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %182 = %181.1;
    %183 = cast(%175, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
    %184 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
    %185 = cast(%182, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
    %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %187 = cast(%175, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
    %188 = logical_xor(%179, %180) /* ty=Tensor[(7, 12, ?), int32] */;
    %189 = bitwise_xor(%185, %186) /* ty=Tensor[(7, 12, ?), uint32] */;
    %190 = log2(%187) /* ty=Tensor[(7, 12, 1), float64] */;
    (%188, %189, %190)
  };
  %191() /* ty=(Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) */
}

def @func_3612() -> Tensor[(1, 5, 13), float64] {
  %192 = @func_2432() /* ty=(Tensor[(1, 5, 13), float64],) */;
  %192.0
}

def @func_951(%var_940: Tensor[(3, 2, 6), float32]) -> (Tensor[(3, 2, 6), float32], Tensor[(7, 12, 1), float64]) {
  %193 = cast(%var_940, dtype="float32") /* ty=Tensor[(3, 2, 6), float32] */;
  %194 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %195 = atanh(%193) /* ty=Tensor[(3, 2, 6), float32] */;
  %196 = %194.1;
  (%195, %196)
}

def @func_2020() -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) {
  %211 = fn () -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) {
    %197 = @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */;
    %198 = cast(meta[relay.Constant][8] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %199 = cast(meta[relay.Constant][9] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %200 = reshape(%198, newshape=[7, 12, 8]) /* ty=Tensor[(7, 12, 8), float64] */;
    %201 = reshape(%199, newshape=[252, 1]) /* ty=Tensor[(252, 1), float64] */;
    %202 = @func_1544(%200, %201) /* ty=(Tensor[(7, 12, 8), uint32], Tensor[(7, 12, 3), int8], Tensor[(252, 1), float64]) */;
    %203 = %202.1;
    %204 = cast(%203, dtype="float64") /* ty=Tensor[(7, 12, 3), float64] */;
    %205 = reshape(%204, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
    %206 = @func_775(%205) /* ty=(Tensor[(7, 12, 3), int8],) */;
    %207 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
    %208 = %197.0;
    %209 = %206.0;
    %210 = %207.1;
    (%208, %203, meta[relay.Constant][8] /* ty=Tensor[(672), float64] */, meta[relay.Constant][9] /* ty=Tensor[(252), float64] */, %209, %210)
  };
  %211() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */
}

def @func_2497(%var_2460: Tensor[(11, 13, 9), float64]) -> (Tensor[(11, 13, 9), bool], Tensor[(672), float64], Tensor[(1, 5, 13), float64], Tensor[(11, 13, 9), bool]) {
  %212 = cast(%var_2460, dtype="float64") /* ty=Tensor[(11, 13, 9), float64] */;
  %213 = acosh(%212) /* ty=Tensor[(11, 13, 9), float64] */;
  %214 = cast(%var_2460, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %218 = @func_2019() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */;
  %219 = cast(%var_2460, dtype="float64") /* ty=Tensor[(11, 13, 9), float64] */;
  %220 = tan(%219) /* ty=Tensor[(11, 13, 9), float64] */;
  %221 = cast(%220, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %222 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%213, dtype="bool") /* ty=Tensor[(11, 13, 9), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = less(%216, %217) /* ty=Tensor[(11, 13, 9), bool] */;
  %226 = %218.2;
  %227 = @func_2083() /* ty=Tensor[(1, 5, 13), float64] */;
  %228 = equal(%223, %224) /* ty=Tensor[(11, 13, 9), bool] */;
  (%225, %226, %227, %228)
}

def @func_4231(%var_4229: Tensor[(4, 13, 4), float32], %var_4230: Tensor[(4, 13, 4), float32]) -> (Tensor[(4, 13, 4), float32],) {
  %234 = fn (%var_4211: Tensor[(4, 13, 4), float32], %var_4212: Tensor[(4, 13, 4), float32]) -> (Tensor[(4, 13, 4), float32],) {
    %229 = cast(%var_4212, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
    %230 = shape_of(%var_4211, dtype="int32") /* ty=Tensor[(3), int32] */;
    %231 = cast(%var_4211, dtype="float32") /* ty=Tensor[(4, 13, 4), float32] */;
    %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %233 = subtract(%231, %232) /* ty=Tensor[(4, 13, 4), float32] */;
    (%233,)
  };
  %234(%var_4229, %var_4230) /* ty=(Tensor[(4, 13, 4), float32],) */
}

def @func_3952() -> (Tensor[(1, 5, 13), float64], Tensor[(5, 5, 5), bool], Tensor[(125), bool]) {
  %235 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %236 = cast(meta[relay.Constant][10] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %237 = reshape(%235, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %238 = reshape(%236, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %239 = @func_617(%237, %238) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %240 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  %241 = %239.0;
  (%240, %241, meta[relay.Constant][10] /* ty=Tensor[(125), bool] */)
}

def @func_4838(%var_4836: Tensor[(7, 12, 15), float32], %var_4837: Tensor[(2184), float64]) -> (Tensor[(7, 12, 15), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 15), float64], Tensor[(7, 12, 1), float32], Tensor[(2184), float64]) {
  @func_4834(%var_4836, %var_4837) /* ty=(Tensor[(7, 12, 15), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 15), float64], Tensor[(7, 12, 1), float32], Tensor[(2184), float64]) */
}

def @func_680() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %246 = fn () -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
    %242 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %243 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %244 = %242.0;
    %245 = %243.0;
    (%244, %245)
  };
  %246() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_1345() -> Tensor[(7, 12, 1), float32] {
  @func_1343() /* ty=Tensor[(7, 12, 1), float32] */
}

def @func_1409(%var_1396: Tensor[(756), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) {
  %247 = @func_727() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %248 = cast(%var_1396, dtype="float32") /* ty=Tensor[(756), float32] */;
  %249 = reshape(%248, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %250 = @func_1048(%249) /* ty=(Tensor[(7, 12, 9), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %251 = %247.0;
  %252 = %250.1;
  (%251, %252, %var_1396)
}

def @func_4483(%var_4480: Tensor[(9, 84), float32], %var_4481: Tensor[(1287), float64], %var_4482: Tensor[(7, 12, 5292), int32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(9, 84), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 13), int32], Tensor[(1092), float32], Tensor[(11, 13, 9), bool], Tensor[(1287), float64], Tensor[(7, 12, 5292), bool], Tensor[(5292), float64]) {
  @func_4478(%var_4480, %var_4481, %var_4482) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(9, 84), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 13), int32], Tensor[(1092), float32], Tensor[(11, 13, 9), bool], Tensor[(1287), float64], Tensor[(7, 12, 5292), bool], Tensor[(5292), float64]) */
}

def @func_3727() -> (Tensor[(7, 12, ?), uint32], Tensor[(1, 5, 13), float64]) {
  %256 = fn () -> (Tensor[(7, 12, ?), uint32], Tensor[(1, 5, 13), float64]) {
    %253 = @func_1803() /* ty=(Tensor[(7, 12, ?), int32], Tensor[(7, 12, ?), uint32], Tensor[(7, 12, 1), float64]) */;
    %254 = %253.1;
    %255 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
    (%254, %255)
  };
  %256() /* ty=(Tensor[(7, 12, ?), uint32], Tensor[(1, 5, 13), float64]) */
}

def @func_4777() -> Tensor[(7, 12, 1), float32] {
  @func_4775() /* ty=Tensor[(7, 12, 1), float32] */
}

def @func_954(%var_952: Tensor[(3, 2, 6), float32]) -> (Tensor[(3, 2, 6), float32], Tensor[(7, 12, 1), float64]) {
  @func_951(%var_952) /* ty=(Tensor[(3, 2, 6), float32], Tensor[(7, 12, 1), float64]) */
}

def @main(%var_5285: Tensor[(7, 5, 13), float64]) -> (Tensor[(7, 5, 13), uint64],) {
  %257 = @func_2083() /* ty=Tensor[(1, 5, 13), float64] */;
  %258 = cast(%257, dtype="uint64") /* ty=Tensor[(1, 5, 13), uint64] */;
  %259 = cast(%var_5285, dtype="uint64") /* ty=Tensor[(7, 5, 13), uint64] */;
  %260 = bitwise_xor(%258, %259) /* ty=Tensor[(7, 5, 13), uint64] */;
  (%260,)
}

def @func_3215(%var_3164: Tensor[(7, 10, 15), uint16]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), bool], Tensor[(7, 12, 1), float32]) {
  %261 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %262 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="float32") /* ty=Tensor[(7, 10, 15), float32] */;
  %263 = log10(%262) /* ty=Tensor[(7, 10, 15), float32] */;
  %264 = cast(%var_3164, dtype="uint16") /* ty=Tensor[(7, 10, 15), uint16] */;
  %265 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="uint16") /* ty=Tensor[(7, 10, 15), uint16] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %268 = logical_xor(%266, %267) /* ty=Tensor[(7, 10, 15), uint16] */;
  %269 = cast(%268, dtype="int32") /* ty=Tensor[(7, 10, 15), int32] */;
  %270 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%263, dtype="int32") /* ty=Tensor[(7, 10, 15), int32] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %273 = minimum(%271, %272) /* ty=Tensor[(7, 10, 15), int32] */;
  %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 10, 15), uint16] */, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %275 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%273, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %278 = cast(%268, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %279 = shape_of(%var_3164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_3164, dtype="bool") /* ty=Tensor[(7, 10, 15), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %282 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %283 = %261.1;
  %284 = less(%276, %277) /* ty=Tensor[(7, 10, 15), bool] */;
  %285 = logical_and(%280, %281) /* ty=Tensor[(7, 10, 15), bool] */;
  %286 = %282.0;
  (%283, %284, %285, %286)
}

def @func_620(%var_618: Tensor[(5, 5, 5), bool], %var_619: Tensor[(5, 5, 5), bool]) -> (Tensor[(5, 5, 5), bool],) {
  %292 = fn (%var_607: Tensor[(5, 5, 5), bool], %var_608: Tensor[(5, 5, 5), bool]) -> (Tensor[(5, 5, 5), bool],) {
    %287 = cast(%var_608, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
    %288 = shape_of(%var_607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%var_607, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %291 = logical_and(%289, %290) /* ty=Tensor[(5, 5, 5), bool] */;
    (%291,)
  };
  %292(%var_618, %var_619) /* ty=(Tensor[(5, 5, 5), bool],) */
}

def @func_375(%var_374: Tensor[(8, 2, 11), float32]) -> (Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) {
  %302 = fn (%var_363: Tensor[(8, 2, 11), float32]) -> (Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) {
    %293 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 2, 11), float32] */, dtype="float32") /* ty=Tensor[(8, 2, 11), float32] */;
    %294 = sigmoid(%293) /* ty=Tensor[(8, 2, 11), float32] */;
    %295 = cast(%var_363, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
    %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%294, dtype="bool") /* ty=Tensor[(8, 2, 11), bool] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %299 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
    %300 = greater_equal(%297, %298) /* ty=Tensor[(8, 2, 11), bool] */;
    %301 = %299.1;
    (%300, %301)
  };
  %302(%var_374) /* ty=(Tensor[(8, 2, 11), bool], Tensor[(7, 12, ?), int64]) */
}

def @func_819() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_1130() -> (Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) {
  %303 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %304 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %305 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), bool] */, dtype="bool") /* ty=Tensor[(125), bool] */;
  %306 = reshape(%304, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %307 = reshape(%305, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), bool] */;
  %308 = @func_617(%306, %307) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %309 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %310 = %309.0;
  %311 = cast(%310, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %312 = cosh(%311) /* ty=Tensor[(7, 12, 1), float64] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %314 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %315 = %314.0;
  %316 = cast(%315, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %317 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%310, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = not_equal(%318, %319) /* ty=Tensor[(7, 12, ?), bool] */;
  %321 = cast(%310, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="bool") /* ty=Tensor[(7, 12, ?), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %326 = cast(meta[relay.Constant][13] /* ty=Tensor[(125), bool] */, dtype="float32") /* ty=Tensor[(125), float32] */;
  %327 = log2(%326) /* ty=Tensor[(125), float32] */;
  %328 = cast(%327, dtype="bool") /* ty=Tensor[(125), bool] */;
  %329 = cast(%320, dtype="bool") /* ty=Tensor[(7, 12, ?), bool] */;
  %330 = %303.0;
  %331 = %308.0;
  %332 = erf(%313) /* ty=Tensor[(7, 12, 1), float32] */;
  %333 = less(%323, %324) /* ty=Tensor[(7, 12, ?), bool] */;
  %334 = %325.0;
  %335 = less(%328, %329) /* ty=Tensor[(7, 12, 125), bool] */;
  (%330, %331, %332, %333, %334, %335)
}

def @func_2516() -> (Tensor[(7, 12, ?), int64],) {
  %338 = fn () -> (Tensor[(7, 12, ?), int64],) {
    %336 = @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */;
    %337 = %336.1;
    (%337,)
  };
  %338() /* ty=(Tensor[(7, 12, ?), int64],) */
}

def @func_3068() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) {
  %339 = @func_1130() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) */;
  %340 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %341 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %342 = cast(meta[relay.Constant][14] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %343 = cast(meta[relay.Constant][14] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
  %344 = reshape(%342, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %345 = reshape(%343, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
  %346 = %339.2;
  %347 = %340.0;
  %348 = %341.0;
  %349 = @func_2364(%344, %345) /* ty=Tensor[(13, 16, 10), bool] */;
  (%346, %347, %348, %349, meta[relay.Constant][14] /* ty=Tensor[(2080), float32] */)
}

def @func_817() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %350 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %351 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %352 = %350.0;
  %353 = %351.0;
  (%352, %353)
}

def @func_3320(%var_3318: Tensor[(9, 176), float32]) -> (Tensor[(9, 176), float64],) {
  @func_3317(%var_3318) /* ty=(Tensor[(9, 176), float64],) */
}

def @func_3578() -> Tensor[(7, 12, 1), float32] {
  @func_3576() /* ty=Tensor[(7, 12, 1), float32] */
}

def @func_1862(%var_1860: Tensor[(756, 1), float32], %var_1861: Tensor[(756, 7), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) {
  %365 = fn (%var_1841: Tensor[(756, 1), float32], %var_1843: Tensor[(756, 7), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) {
    %354 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %355 = cast(%var_1841, dtype="float32") /* ty=Tensor[(756, 1), float32] */;
    %356 = reshape(%355, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %357 = @func_1409(%356) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */;
    %358 = cast(%var_1841, dtype="float64") /* ty=Tensor[(756, 1), float64] */;
    %359 = cast(%var_1843, dtype="float64") /* ty=Tensor[(756, 7), float64] */;
    %360 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %361 = %354.0;
    %362 = %357.0;
    %363 = multiply(%358, %359) /* ty=Tensor[(756, 7), float64] */;
    %364 = %360.0;
    (%361, %362, %363, %364)
  };
  %365(%var_1860, %var_1861) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756, 7), float64], Tensor[(7, 12, 1), float32]) */
}

def @func_2827(%var_2826: Tensor[(14, 9, 8), float32]) -> (Tensor[(14, 9, 8), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(14, 9, 8), float64], Tensor[(7, 12, 1), float32], Tensor[(14, 7, 15), int8], Tensor[(1470), int8]) {
  %383 = fn (%var_2723: Tensor[(14, 9, 8), float32]) -> (Tensor[(14, 9, 8), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(14, 9, 8), float64], Tensor[(7, 12, 1), float32], Tensor[(14, 7, 15), int8], Tensor[(1470), int8]) {
    %366 = cast(%var_2723, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %367 = rsqrt(%366) /* ty=Tensor[(14, 9, 8), float32] */;
    %368 = cast(%367, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %369 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %370 = @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */;
    %371 = cast(%var_2723, dtype="float32") /* ty=Tensor[(14, 9, 8), float32] */;
    %372 = asinh(%371) /* ty=Tensor[(14, 9, 8), float32] */;
    %373 = cast(%372, dtype="float64") /* ty=Tensor[(14, 9, 8), float64] */;
    %374 = @func_2580() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) */;
    %375 = cast(meta[relay.Constant][15] /* ty=Tensor[(1470), int8] */, dtype="int8") /* ty=Tensor[(1470), int8] */;
    %376 = reshape(%375, newshape=[14, 7, 15]) /* ty=Tensor[(14, 7, 15), int8] */;
    %377 = erf(%368) /* ty=Tensor[(14, 9, 8), float32] */;
    %378 = %369.0;
    %379 = %370.1;
    %380 = cosh(%373) /* ty=Tensor[(14, 9, 8), float64] */;
    %381 = %374.0;
    %382 = @func_2557(%376) /* ty=Tensor[(14, 7, 15), int8] */;
    (%377, %378, %379, %380, %381, %382, meta[relay.Constant][15] /* ty=Tensor[(1470), int8] */)
  };
  %383(%var_2826) /* ty=(Tensor[(14, 9, 8), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(14, 9, 8), float64], Tensor[(7, 12, 1), float32], Tensor[(14, 7, 15), int8], Tensor[(1470), int8]) */
}

def @func_4933(%var_4886: Tensor[(8, 5, 16), float32], %var_4919: Tensor[(7, 12, 4), float32]) -> (Tensor[(8, 5, 16), float64], Tensor[(84), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 4), float32]) {
  %384 = @func_3372() /* ty=(Tensor[(?, 5, 13), bool], Tensor[(8, 5, 16), float32], Tensor[(160, 4), float32]) */;
  %385 = %384.1;
  %386 = cast(%var_4886, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
  %387 = shape_of(%385, dtype="int32") /* ty=Tensor[(3), int32] */;
  %388 = cast(%385, dtype="float64") /* ty=Tensor[(8, 5, 16), float64] */;
  %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %390 = cast(meta[relay.Constant][16] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %391 = reshape(%390, newshape=[7, 12, 1]) /* ty=Tensor[(7, 12, 1), float32] */;
  %392 = @func_1913(%391) /* ty=(Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32]) */;
  %393 = %392.1;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %395 = cast(%var_4919, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %396 = floor_mod(%388, %389) /* ty=Tensor[(8, 5, 16), float64] */;
  %397 = @func_4775() /* ty=Tensor[(7, 12, 1), float32] */;
  %398 = floor_mod(%394, %395) /* ty=Tensor[(7, 12, 4), float32] */;
  (%396, meta[relay.Constant][16] /* ty=Tensor[(84), float32] */, %397, %398)
}

def @func_5141(%var_5090: Tensor[(14, 7, 3), int16], %var_5122: Tensor[(1008), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64], Tensor[(1008), float32], Tensor[(14, 7, 3), bool]) {
  %399 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %400 = cast(%var_5122, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %401 = reshape(%400, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %402 = @func_2935(%401) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %403 = cast(%var_5090, dtype="float32") /* ty=Tensor[(14, 7, 3), float32] */;
  %404 = acosh(%403) /* ty=Tensor[(14, 7, 3), float32] */;
  %405 = cast(%404, dtype="float64") /* ty=Tensor[(14, 7, 3), float64] */;
  %406 = rsqrt(%405) /* ty=Tensor[(14, 7, 3), float64] */;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(14, 7, 3), float32] */;
  %408 = atan(%407) /* ty=Tensor[(14, 7, 3), float32] */;
  %409 = cast(%408, dtype="float64") /* ty=Tensor[(14, 7, 3), float64] */;
  %410 = cos(%409) /* ty=Tensor[(14, 7, 3), float64] */;
  %411 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 7, 3), int16] */, dtype="int16") /* ty=Tensor[(14, 7, 3), int16] */;
  %412 = shape_of(%var_5090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_5090, dtype="int16") /* ty=Tensor[(14, 7, 3), int16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %415 = bitwise_or(%413, %414) /* ty=Tensor[(14, 7, 3), int16] */;
  %416 = cast(%415, dtype="bool") /* ty=Tensor[(14, 7, 3), bool] */;
  %417 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%410, dtype="bool") /* ty=Tensor[(14, 7, 3), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = %399.1;
  %421 = %402.1;
  %422 = greater(%418, %419) /* ty=Tensor[(14, 7, 3), bool] */;
  (%420, %421, %var_5122, %422)
}

def @func_306() -> (Tensor[(7, 12, 1), float32],) {
  %425 = fn () -> (Tensor[(7, 12, 1), float32],) {
    %423 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 12, 1), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
    %424 = exp(%423) /* ty=Tensor[(7, 12, 1), float32] */;
    (%424,)
  };
  %425() /* ty=(Tensor[(7, 12, 1), float32],) */
}

def @func_3576() -> Tensor[(7, 12, 1), float32] {
  %426 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %426.0
}

def @func_2560(%var_2558: Tensor[(14, 7, 15), int8]) -> Tensor[(14, 7, 15), int8] {
  @func_2557(%var_2558) /* ty=Tensor[(14, 7, 15), int8] */
}

def @func_1412(%var_1410: Tensor[(756), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) {
  @func_1409(%var_1410) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */
}

def @func_1915(%var_1914: Tensor[(7, 12, 1), float32]) -> (Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32]) {
  %440 = fn (%var_1896: Tensor[(7, 12, 1), float32]) -> (Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32]) {
    %427 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
    %428 = cast(%var_1896, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
    %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %430 = cast(%427, dtype="int32") /* ty=Tensor[(7, 12, 1), int32] */;
    %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %432 = minimum(%430, %431) /* ty=Tensor[(7, 12, ?), int32] */;
    %433 = cast(%432, dtype="bool") /* ty=Tensor[(7, 12, ?), bool] */;
    %434 = shape_of(%427, dtype="int32") /* ty=Tensor[(3), int32] */;
    %435 = cast(%427, dtype="bool") /* ty=Tensor[(7, 12, 1), bool] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %437 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %438 = logical_and(%435, %436) /* ty=Tensor[(7, 12, ?), bool] */;
    %439 = %437.0;
    (%438, %439)
  };
  %440(%var_1914) /* ty=(Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32]) */
}

def @func_2938(%var_2936: Tensor[(7, 12, 12), float32]) -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) {
  @func_2935(%var_2936) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */
}

def @func_801() -> (Tensor[(7, 12, 1), float32],) {
  %441 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %442 = %441.0;
  (%442,)
}

def @func_3304() -> Tensor[(7, 12, 1), float64] {
  @func_3302() /* ty=Tensor[(7, 12, 1), float64] */
}

def @func_2434() -> (Tensor[(1, 5, 13), float64],) {
  @func_2432() /* ty=(Tensor[(1, 5, 13), float64],) */
}

def @func_1472(%var_1471: Tensor[(13, 14, 12), float64]) -> (Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) {
  %454 = fn (%var_1424: Tensor[(13, 14, 12), float64]) -> (Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) {
    %443 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %444 = cast(%var_1424, dtype="float64") /* ty=Tensor[(13, 14, 12), float64] */;
    %445 = log10(%444) /* ty=Tensor[(13, 14, 12), float64] */;
    %446 = cast(%445, dtype="float32") /* ty=Tensor[(13, 14, 12), float32] */;
    %447 = cos(%446) /* ty=Tensor[(13, 14, 12), float32] */;
    %448 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 14, 12), float32] */, dtype="uint16") /* ty=Tensor[(13, 14, 12), uint16] */;
    %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%447, dtype="uint16") /* ty=Tensor[(13, 14, 12), uint16] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %452 = %443.0;
    %453 = left_shift(%450, %451) /* ty=Tensor[(13, 14, 12), uint16] */;
    (%452, %453)
  };
  %454(%var_1471) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(13, 14, 12), uint16]) */
}

def @func_4558(%var_4557: Tensor[(10, 4, 4), float64]) -> (Tensor[(10, 4, 4), bool], Tensor[(54, 14), float64], Tensor[(5292, 1), float32], Tensor[(756), float64]) {
  %468 = fn (%var_4522: Tensor[(10, 4, 4), float64]) -> (Tensor[(10, 4, 4), bool], Tensor[(54, 14), float64], Tensor[(5292, 1), float32], Tensor[(756), float64]) {
    %455 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 4, 4), float64] */, dtype="bool") /* ty=Tensor[(10, 4, 4), bool] */;
    %456 = shape_of(%var_4522, dtype="int32") /* ty=Tensor[(3), int32] */;
    %457 = cast(%var_4522, dtype="bool") /* ty=Tensor[(10, 4, 4), bool] */;
    %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %459 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %460 = cast(meta[relay.Constant][22] /* ty=Tensor[(5292, 1), float32] */, dtype="float32") /* ty=Tensor[(5292, 1), float32] */;
    %461 = reshape(%459, newshape=[54, 14]) /* ty=Tensor[(54, 14), float32] */;
    %462 = reshape(%460, newshape=[5292]) /* ty=Tensor[(5292), float32] */;
    %463 = @func_2695(%461, %462) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5292), float32], Tensor[(54, 14), float64]) */;
    %464 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), float32] */, dtype="float64") /* ty=Tensor[(756), float64] */;
    %465 = greater_equal(%457, %458) /* ty=Tensor[(10, 4, 4), bool] */;
    %466 = %463.3;
    %467 = tan(%464) /* ty=Tensor[(756), float64] */;
    (%465, %466, meta[relay.Constant][22] /* ty=Tensor[(5292, 1), float32] */, %467)
  };
  %468(%var_4557) /* ty=(Tensor[(10, 4, 4), bool], Tensor[(54, 14), float64], Tensor[(5292, 1), float32], Tensor[(756), float64]) */
}

def @func_2233(%var_2232: Tensor[(7, 12, 5), float32]) -> (Tensor[(7, 12, 5), uint16], Tensor[(7, 12, ?), float32], Tensor[(7, 12, 3), int8], Tensor[(252), float64]) {
  %487 = fn (%var_2210: Tensor[(7, 12, 5), float32]) -> (Tensor[(7, 12, 5), uint16], Tensor[(7, 12, ?), float32], Tensor[(7, 12, 3), int8], Tensor[(252), float64]) {
    %469 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %470 = %469.0;
    %471 = cast(%470, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
    %472 = sqrt(%471) /* ty=Tensor[(7, 12, 1), float32] */;
    %473 = cast(%472, dtype="uint16") /* ty=Tensor[(7, 12, 1), uint16] */;
    %474 = cast(%var_2210, dtype="uint16") /* ty=Tensor[(7, 12, 5), uint16] */;
    %475 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %476 = %475.0;
    %477 = cast(%476, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
    %478 = shape_of(%472, dtype="int32") /* ty=Tensor[(3), int32] */;
    %479 = cast(%472, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
    %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %481 = cast(meta[relay.Constant][23] /* ty=Tensor[(252), float64] */, dtype="float64") /* ty=Tensor[(252), float64] */;
    %482 = reshape(%481, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
    %483 = @func_775(%482) /* ty=(Tensor[(7, 12, 3), int8],) */;
    %484 = left_shift(%473, %474) /* ty=Tensor[(7, 12, 5), uint16] */;
    %485 = floor_mod(%479, %480) /* ty=Tensor[(7, 12, ?), float32] */;
    %486 = %483.0;
    (%484, %485, %486, meta[relay.Constant][23] /* ty=Tensor[(252), float64] */)
  };
  %487(%var_2232) /* ty=(Tensor[(7, 12, 5), uint16], Tensor[(7, 12, ?), float32], Tensor[(7, 12, 3), int8], Tensor[(252), float64]) */
}

def @func_3930(%var_3928: Tensor[(1, 2184), float64]) -> (Tensor[(1, 5, 13), float64], Tensor[(13, 14, 12), uint16], Tensor[(1, 2184), float64]) {
  @func_3927(%var_3928) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(13, 14, 12), uint16], Tensor[(1, 2184), float64]) */
}

def @func_2581() -> (Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) {
  %493 = fn () -> (Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) {
    %488 = @func_679() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %489 = cast(meta[relay.Constant][24] /* ty=Tensor[(640), float32] */, dtype="float32") /* ty=Tensor[(640), float32] */;
    %490 = reshape(%489, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
    %491 = %488.0;
    %492 = @func_1976(%490) /* ty=Tensor[(8, 5, 16), float32] */;
    (%491, %492, meta[relay.Constant][24] /* ty=Tensor[(640), float32] */)
  };
  %493() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) */
}

def @func_1207() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %498 = fn () -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
    %494 = @func_727() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %495 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %496 = %494.0;
    %497 = %495.0;
    (%496, %497)
  };
  %498() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_3141(%var_3140: Tensor[(420), float32]) -> (Tensor[(640), float32], Tensor[(420), float32], Tensor[(7, 12, 252), uint64], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) {
  %514 = fn (%var_3098: Tensor[(420), float32]) -> (Tensor[(640), float32], Tensor[(420), float32], Tensor[(7, 12, 252), uint64], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) {
    %499 = @func_2580() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(8, 5, 16), float32], Tensor[(640), float32]) */;
    %500 = cast(%var_3098, dtype="float32") /* ty=Tensor[(420), float32] */;
    %501 = reshape(%500, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), float32] */;
    %502 = @func_2231(%501) /* ty=(Tensor[(7, 12, 5), uint16], Tensor[(7, 12, ?), float32], Tensor[(7, 12, 3), int8], Tensor[(252), float64]) */;
    %503 = %502.3;
    %504 = @func_2267() /* ty=Tensor[(7, 12, 1), float32] */;
    %505 = cast(%503, dtype="uint64") /* ty=Tensor[(252), uint64] */;
    %506 = cast(%504, dtype="uint64") /* ty=Tensor[(7, 12, 1), uint64] */;
    %507 = cast(meta[relay.Constant][25] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %508 = cast(meta[relay.Constant][25] /* ty=Tensor[(2080), float32] */, dtype="float32") /* ty=Tensor[(2080), float32] */;
    %509 = reshape(%507, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
    %510 = reshape(%508, newshape=[13, 16, 10]) /* ty=Tensor[(13, 16, 10), float32] */;
    %511 = %499.2;
    %512 = add(%505, %506) /* ty=Tensor[(7, 12, 252), uint64] */;
    %513 = @func_2364(%509, %510) /* ty=Tensor[(13, 16, 10), bool] */;
    (%511, %var_3098, %512, %513, meta[relay.Constant][25] /* ty=Tensor[(2080), float32] */)
  };
  %514(%var_3140) /* ty=(Tensor[(640), float32], Tensor[(420), float32], Tensor[(7, 12, 252), uint64], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) */
}

def @func_5239() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %520 = fn () -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
    %515 = @func_817() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %516 = @func_1130() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) */;
    %517 = %515.0;
    %518 = @func_4775() /* ty=Tensor[(7, 12, 1), float32] */;
    %519 = %516.2;
    (%517, %518, %519)
  };
  %520() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_4200() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  @func_4198() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_1502() -> Tensor[(7, 12, 1), float32] {
  @func_1500() /* ty=Tensor[(7, 12, 1), float32] */
}

def @func_3645(%var_3643: Tensor[(36, 15), float32]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 12), float32], Tensor[(1008), float32], Tensor[(3, 2, 6), float32], Tensor[(36, 15), float32]) {
  @func_3642(%var_3643) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 12), float32], Tensor[(1008), float32], Tensor[(3, 2, 6), float32], Tensor[(36, 15), float32]) */
}

def @func_4648(%var_4646: Tensor[(6, 12, 7), float64], %var_4647: Tensor[(1, 1584), float32]) -> (Tensor[(6, 12, 7), float64], Tensor[(7, 12, 1), float32], Tensor[(9, 176), bool], Tensor[(7, 12, 1), float32]) {
  %538 = fn (%var_4598: Tensor[(6, 12, 7), float64], %var_4613: Tensor[(1, 1584), float32]) -> (Tensor[(6, 12, 7), float64], Tensor[(7, 12, 1), float32], Tensor[(9, 176), bool], Tensor[(7, 12, 1), float32]) {
    %521 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 12, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    %522 = shape_of(%var_4598, dtype="int32") /* ty=Tensor[(3), int32] */;
    %523 = cast(%var_4598, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %525 = @func_3068() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(13, 16, 10), bool], Tensor[(2080), float32]) */;
    %526 = cast(%var_4613, dtype="float32") /* ty=Tensor[(1, 1584), float32] */;
    %527 = reshape(%526, newshape=[9, 176]) /* ty=Tensor[(9, 176), float32] */;
    %528 = @func_3317(%527) /* ty=(Tensor[(9, 176), float64],) */;
    %529 = %528.0;
    %530 = cast(%var_4613, dtype="bool") /* ty=Tensor[(1, 1584), bool] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(2), int32] */;
    %532 = cast(%529, dtype="bool") /* ty=Tensor[(9, 176), bool] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %534 = floor_divide(%523, %524) /* ty=Tensor[(6, 12, 7), float64] */;
    %535 = %525.1;
    %536 = logical_or(%532, %533) /* ty=Tensor[(9, 176), bool] */;
    %537 = @func_4052() /* ty=Tensor[(7, 12, 1), float32] */;
    (%534, %535, %536, %537)
  };
  %538(%var_4646, %var_4647) /* ty=(Tensor[(6, 12, 7), float64], Tensor[(7, 12, 1), float32], Tensor[(9, 176), bool], Tensor[(7, 12, 1), float32]) */
}

def @func_3954() -> (Tensor[(1, 5, 13), float64], Tensor[(5, 5, 5), bool], Tensor[(125), bool]) {
  @func_3952() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(5, 5, 5), bool], Tensor[(125), bool]) */
}

def @func_328() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) {
  %539 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %540 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %541 = %540.0;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(7, 12, 1), float32] */;
  %543 = sinh(%542) /* ty=Tensor[(7, 12, 1), float32] */;
  %544 = cast(%541, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %545 = sin(%544) /* ty=Tensor[(7, 12, 1), float64] */;
  %546 = cast(%545, dtype="int64") /* ty=Tensor[(7, 12, 1), int64] */;
  %547 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%543, dtype="int64") /* ty=Tensor[(7, 12, 1), int64] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %550 = cast(%541, dtype="float64") /* ty=Tensor[(7, 12, 1), float64] */;
  %551 = %539.0;
  %552 = maximum(%548, %549) /* ty=Tensor[(7, 12, ?), int64] */;
  %553 = atan(%550) /* ty=Tensor[(7, 12, 1), float64] */;
  (%551, %552, %553)
}

def @func_3218(%var_3216: Tensor[(7, 10, 15), uint16]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), bool], Tensor[(7, 12, 1), float32]) {
  @func_3215(%var_3216) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 10, 15), bool], Tensor[(7, 10, 15), bool], Tensor[(7, 12, 1), float32]) */
}

def @func_4737() -> Tensor[(7, 3, 2), bool] {
  %554 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), int16] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %555 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 3, 2), int16] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = greater_equal(%556, %557) /* ty=Tensor[(7, 3, 2), bool] */;
  %559 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 3, 2), int16] */, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="bool") /* ty=Tensor[(7, 3, 2), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%561, %562) /* ty=Tensor[(7, 3, 2), bool] */
}

def @func_2368(%var_2366: Tensor[(13, 16, 10), float32], %var_2367: Tensor[(13, 16, 10), float32]) -> Tensor[(13, 16, 10), bool] {
  @func_2364(%var_2366, %var_2367) /* ty=Tensor[(13, 16, 10), bool] */
}

def @func_2083() -> Tensor[(1, 5, 13), float64] {
  %563 = @func_2019() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 3), int8], Tensor[(672), float64], Tensor[(252), float64], Tensor[(7, 12, 3), int8], Tensor[(7, 12, ?), int64]) */;
  %563.0
}

def @func_3845(%var_3843: Tensor[(1008), float32]) -> (Tensor[(1, 5, 13), float64], Tensor[(1, 5, 13), float64], Tensor[(7, 12, 12), float32], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 1), float32], Tensor[(1008), uint16]) {
  @func_3842(%var_3843) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(1, 5, 13), float64], Tensor[(7, 12, 12), float32], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 1), float32], Tensor[(1008), uint16]) */
}

def @func_898(%var_896: Tensor[(5, 25), bool]) -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(5, 25), bool]) {
  @func_895(%var_896) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(5, 25), bool]) */
}

def @func_1978(%var_1977: Tensor[(8, 5, 16), float32]) -> Tensor[(8, 5, 16), float32] {
  %565 = fn (%var_1973: Tensor[(8, 5, 16), float32]) -> Tensor[(8, 5, 16), float32] {
    %564 = cast(%var_1973, dtype="float32") /* ty=Tensor[(8, 5, 16), float32] */;
    acos(%564) /* ty=Tensor[(8, 5, 16), float32] */
  };
  %565(%var_1977) /* ty=Tensor[(8, 5, 16), float32] */
}

def @func_1132() -> (Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) {
  @func_1130() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), bool], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 125), bool]) */
}

def @func_1176() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  @func_1174() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */
}

def @func_1737() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %566 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %567 = @func_1206() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %568 = %566.0;
  %569 = %567.1;
  (%568, %569)
}

def @func_3898() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) {
  @func_3896() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */
}

def @func_3842(%var_3835: Tensor[(1008), float32]) -> (Tensor[(1, 5, 13), float64], Tensor[(1, 5, 13), float64], Tensor[(7, 12, 12), float32], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 1), float32], Tensor[(1008), uint16]) {
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %571 = reshape(%570, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %572 = @func_2935(%571) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %573 = cast(meta[relay.Constant][29] /* ty=Tensor[(1008), float32] */, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %574 = reshape(%573, newshape=[7, 12, 12]) /* ty=Tensor[(7, 12, 12), float32] */;
  %575 = @func_2935(%574) /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float64], Tensor[(7, 12, 12), float32]) */;
  %576 = @func_1737() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
  %577 = cast(%var_3835, dtype="uint16") /* ty=Tensor[(1008), uint16] */;
  %578 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(1008), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %579 = cast(meta[relay.Constant][29] /* ty=Tensor[(1008), float32] */, dtype="uint16") /* ty=Tensor[(1008), uint16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %581 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  %582 = @func_3612() /* ty=Tensor[(1, 5, 13), float64] */;
  %583 = %572.2;
  %584 = %575.1;
  %585 = %576.0;
  %586 = minimum(%579, %580) /* ty=Tensor[(1008), uint16] */;
  (%581, %582, %583, %584, %585, %586)
}

def @func_2364(%var_2336: Tensor[(13, 16, 10), float32], %var_2337: Tensor[(13, 16, 10), float32]) -> Tensor[(13, 16, 10), bool] {
  %587 = cast(%var_2337, dtype="float32") /* ty=Tensor[(13, 16, 10), float32] */;
  %588 = shape_of(%var_2336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%var_2336, dtype="float32") /* ty=Tensor[(13, 16, 10), float32] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %591 = floor_mod(%589, %590) /* ty=Tensor[(13, 16, 10), float32] */;
  %592 = cast(%var_2336, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %594 = cast(%591, dtype="bool") /* ty=Tensor[(13, 16, 10), bool] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%594, %595) /* ty=Tensor[(13, 16, 10), bool] */
}

def @func_3372() -> (Tensor[(?, 5, 13), bool], Tensor[(8, 5, 16), float32], Tensor[(160, 4), float32]) {
  %596 = @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(1, 5, 13), float64] */;
  %599 = atanh(%598) /* ty=Tensor[(1, 5, 13), float64] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="bool") /* ty=Tensor[(1, 5, 13), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = cast(meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */, dtype="float32") /* ty=Tensor[(160, 4), float32] */;
  %605 = reshape(%604, newshape=[8, 5, 16]) /* ty=Tensor[(8, 5, 16), float32] */;
  %606 = not_equal(%602, %603) /* ty=Tensor[(?, 5, 13), bool] */;
  %607 = @func_1976(%605) /* ty=Tensor[(8, 5, 16), float32] */;
  (%606, %607, meta[relay.Constant][30] /* ty=Tensor[(160, 4), float32] */)
}

def @func_4937(%var_4935: Tensor[(8, 5, 16), float32], %var_4936: Tensor[(7, 12, 4), float32]) -> (Tensor[(8, 5, 16), float64], Tensor[(84), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 4), float32]) {
  @func_4933(%var_4935, %var_4936) /* ty=(Tensor[(8, 5, 16), float64], Tensor[(84), float32], Tensor[(7, 12, 1), float32], Tensor[(7, 12, 4), float32]) */
}

def @func_2085() -> Tensor[(1, 5, 13), float64] {
  @func_2083() /* ty=Tensor[(1, 5, 13), float64] */
}

def @func_535() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) {
  @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */
}

def @func_2557(%var_2551: Tensor[(14, 7, 15), int8]) -> Tensor[(14, 7, 15), int8] {
  %608 = cast(meta[relay.Constant][31] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %609 = cast(%var_2551, dtype="int8") /* ty=Tensor[(14, 7, 15), int8] */;
  maximum(%608, %609) /* ty=Tensor[(14, 7, 15), int8] */
}

def @func_3317(%var_3307: Tensor[(9, 176), float32]) -> (Tensor[(9, 176), float64],) {
  %610 = @func_2133() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(1, 176), float32]) */;
  %611 = %610.2;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %613 = cast(%var_3307, dtype="float64") /* ty=Tensor[(9, 176), float64] */;
  %614 = divide(%612, %613) /* ty=Tensor[(9, 176), float64] */;
  (%614,)
}

def @func_1174() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %615 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %616 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %617 = %615.0;
  %618 = %616.0;
  (%617, %618)
}

def @func_5078(%var_5077: Tensor[(7, 12, 10), float32]) -> (Tensor[(756), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 25), bool], Tensor[(7, 12, 10), uint64], Tensor[(36, 15), float32], Tensor[(540), float32], Tensor[(756), float32]) {
  %650 = fn (%var_5010: Tensor[(7, 12, 10), float32]) -> (Tensor[(756), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 25), bool], Tensor[(7, 12, 10), uint64], Tensor[(36, 15), float32], Tensor[(540), float32], Tensor[(756), float32]) {
    %619 = cast(meta[relay.Constant][33] /* ty=Tensor[(5, 25), bool] */, dtype="bool") /* ty=Tensor[(5, 25), bool] */;
    %620 = reshape(%619, newshape=[5, 25]) /* ty=Tensor[(5, 25), bool] */;
    %621 = @func_895(%620) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 5, 5), bool], Tensor[(5, 25), bool]) */;
    %622 = @func_2515() /* ty=(Tensor[(7, 12, ?), int64],) */;
    %623 = %622.0;
    %624 = cast(%623, dtype="float64") /* ty=Tensor[(7, 12, ?), float64] */;
    %625 = asin(%624) /* ty=Tensor[(7, 12, ?), float64] */;
    %626 = @func_1174() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) */;
    %627 = %626.0;
    %628 = cast(%627, dtype="uint64") /* ty=Tensor[(7, 12, 1), uint64] */;
    %629 = cast(%var_5010, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
    %630 = minimum(%628, %629) /* ty=Tensor[(7, 12, 10), uint64] */;
    %631 = cast(meta[relay.Constant][34] /* ty=Tensor[(7, 12, 10), uint64] */, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %635 = subtract(%633, %634) /* ty=Tensor[(7, 12, 10), uint64] */;
    %636 = cast(%625, dtype="uint64") /* ty=Tensor[(7, 12, ?), uint64] */;
    %637 = cast(%635, dtype="uint64") /* ty=Tensor[(7, 12, 10), uint64] */;
    %638 = cast(meta[relay.Constant][35] /* ty=Tensor[(540), float32] */, dtype="float32") /* ty=Tensor[(540), float32] */;
    %639 = reshape(%638, newshape=[36, 15]) /* ty=Tensor[(36, 15), float32] */;
    %640 = @func_3642(%639) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 12), float32], Tensor[(1008), float32], Tensor[(3, 2, 6), float32], Tensor[(36, 15), float32]) */;
    %641 = cast(meta[relay.Constant][32] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %642 = reshape(%641, newshape=[756]) /* ty=Tensor[(756), float32] */;
    %643 = @func_1409(%642) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */;
    %644 = %643.2;
    %645 = cast(%644, dtype="float32") /* ty=Tensor[(756), float32] */;
    %646 = %621.1;
    %647 = add(%636, %637) /* ty=Tensor[(7, 12, 10), uint64] */;
    %648 = %640.4;
    %649 = log(%645) /* ty=Tensor[(756), float32] */;
    (meta[relay.Constant][32] /* ty=Tensor[(756), float32] */, %646, meta[relay.Constant][33] /* ty=Tensor[(5, 25), bool] */, %647, %648, meta[relay.Constant][35] /* ty=Tensor[(540), float32] */, %649)
  };
  %650(%var_5077) /* ty=(Tensor[(756), float32], Tensor[(7, 12, 1), float32], Tensor[(5, 25), bool], Tensor[(7, 12, 10), uint64], Tensor[(36, 15), float32], Tensor[(540), float32], Tensor[(756), float32]) */
}

def @func_1713() -> (Tensor[(7, 12, 1), float32],) {
  @func_1711() /* ty=(Tensor[(7, 12, 1), float32],) */
}

def @func_3614() -> Tensor[(1, 5, 13), float64] {
  @func_3612() /* ty=Tensor[(1, 5, 13), float64] */
}

def @func_728() -> (Tensor[(7, 12, 1), float32],) {
  %653 = fn () -> (Tensor[(7, 12, 1), float32],) {
    %651 = @func_305() /* ty=(Tensor[(7, 12, 1), float32],) */;
    %652 = %651.0;
    (%652,)
  };
  %653() /* ty=(Tensor[(7, 12, 1), float32],) */
}

def @func_4775() -> Tensor[(7, 12, 1), float32] {
  %654 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
  %654.0
}

def @func_3302() -> Tensor[(7, 12, 1), float64] {
  %655 = @func_328() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, ?), int64], Tensor[(7, 12, 1), float64]) */;
  %655.2
}

def @func_3460(%var_3416: Tensor[(5, 1, 8), uint16], %var_3417: Tensor[(5, 11, 8), uint16]) -> (Tensor[(5, 11, 8), uint16], Tensor[(5, 11, 8), float64], Tensor[(5, 11, 8), float64]) {
  %656 = cast(%var_3416, dtype="uint16") /* ty=Tensor[(5, 1, 8), uint16] */;
  %657 = cast(%var_3417, dtype="uint16") /* ty=Tensor[(5, 11, 8), uint16] */;
  %658 = cast(%var_3417, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %659 = erf(%658) /* ty=Tensor[(5, 11, 8), float64] */;
  %660 = cast(%659, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %661 = cast(%659, dtype="float64") /* ty=Tensor[(5, 11, 8), float64] */;
  %662 = bitwise_or(%656, %657) /* ty=Tensor[(5, 11, 8), uint16] */;
  %663 = acosh(%660) /* ty=Tensor[(5, 11, 8), float64] */;
  %664 = sin(%661) /* ty=Tensor[(5, 11, 8), float64] */;
  (%662, %663, %664)
}

def @func_1547(%var_1545: Tensor[(7, 12, 8), float64], %var_1546: Tensor[(252, 1), float64]) -> (Tensor[(7, 12, 8), uint32], Tensor[(7, 12, 3), int8], Tensor[(252, 1), float64]) {
  %674 = fn (%var_1516: Tensor[(7, 12, 8), float64], %var_1530: Tensor[(252, 1), float64]) -> (Tensor[(7, 12, 8), uint32], Tensor[(7, 12, 3), int8], Tensor[(252, 1), float64]) {
    %665 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %666 = %665.1;
    %667 = cast(%666, dtype="uint32") /* ty=Tensor[(7, 12, 1), uint32] */;
    %668 = cast(%var_1516, dtype="uint32") /* ty=Tensor[(7, 12, 8), uint32] */;
    %669 = cast(%var_1530, dtype="float64") /* ty=Tensor[(252, 1), float64] */;
    %670 = reshape(%669, newshape=[7, 12, 3]) /* ty=Tensor[(7, 12, 3), float64] */;
    %671 = @func_775(%670) /* ty=(Tensor[(7, 12, 3), int8],) */;
    %672 = minimum(%667, %668) /* ty=Tensor[(7, 12, 8), uint32] */;
    %673 = %671.0;
    (%672, %673, %var_1530)
  };
  %674(%var_1545, %var_1546) /* ty=(Tensor[(7, 12, 8), uint32], Tensor[(7, 12, 3), int8], Tensor[(252, 1), float64]) */
}

def @func_3374() -> (Tensor[(?, 5, 13), bool], Tensor[(8, 5, 16), float32], Tensor[(160, 4), float32]) {
  @func_3372() /* ty=(Tensor[(?, 5, 13), bool], Tensor[(8, 5, 16), float32], Tensor[(160, 4), float32]) */
}

def @func_3896() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) {
  %675 = cast(meta[relay.Constant][36] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %676 = reshape(%675, newshape=[756]) /* ty=Tensor[(756), float32] */;
  %677 = @func_1409(%676) /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32], Tensor[(756), float32]) */;
  %678 = @func_2267() /* ty=Tensor[(7, 12, 1), float32] */;
  %679 = %677.1;
  (%678, %679, meta[relay.Constant][36] /* ty=Tensor[(756), float32] */)
}

def @func_4157(%var_4154: Tensor[(3, 9, 16), uint16], %var_4155: Tensor[(3, 9, 16), uint16], %var_4156: Tensor[(1092, 1), float32]) -> (Tensor[(7, 12, 13), int32], Tensor[(1092, 1), float32], Tensor[(3, 9, 16), float32]) {
  %695 = fn (%var_4110: Tensor[(3, 9, 16), uint16], %var_4111: Tensor[(3, 9, 16), uint16], %var_4137: Tensor[(1092, 1), float32]) -> (Tensor[(7, 12, 13), int32], Tensor[(1092, 1), float32], Tensor[(3, 9, 16), float32]) {
    %680 = cast(%var_4137, dtype="float32") /* ty=Tensor[(1092, 1), float32] */;
    %681 = reshape(%680, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float32] */;
    %682 = cast(%var_4111, dtype="uint16") /* ty=Tensor[(3, 9, 16), uint16] */;
    %683 = shape_of(%var_4110, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%var_4110, dtype="uint16") /* ty=Tensor[(3, 9, 16), uint16] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %686 = logical_xor(%684, %685) /* ty=Tensor[(3, 9, 16), uint16] */;
    %687 = cast(%var_4110, dtype="int64") /* ty=Tensor[(3, 9, 16), int64] */;
    %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%686, dtype="int64") /* ty=Tensor[(3, 9, 16), int64] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %691 = bitwise_and(%689, %690) /* ty=Tensor[(3, 9, 16), int64] */;
    %692 = cast(%691, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
    %693 = @func_1677(%681) /* ty=Tensor[(7, 12, 13), int32] */;
    %694 = log10(%692) /* ty=Tensor[(3, 9, 16), float32] */;
    (%693, %var_4137, %694)
  };
  %695(%var_4154, %var_4155, %var_4156) /* ty=(Tensor[(7, 12, 13), int32], Tensor[(1092, 1), float32], Tensor[(3, 9, 16), float32]) */
}

def @func_4198() -> (Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float32]) {
  %696 = @func_913() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %697 = @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */;
  %698 = %696.0;
  %699 = %697.0;
  (%698, %699)
}

def @func_1711() -> (Tensor[(7, 12, 1), float32],) {
  %700 = @func_1343() /* ty=Tensor[(7, 12, 1), float32] */;
  (%700,)
}

def @func_2269() -> Tensor[(7, 12, 1), float32] {
  @func_2267() /* ty=Tensor[(7, 12, 1), float32] */
}

def @func_1680(%var_1678: Tensor[(7, 12, 13), float32]) -> Tensor[(7, 12, 13), int32] {
  @func_1677(%var_1678) /* ty=Tensor[(7, 12, 13), int32] */
}

def @func_803() -> (Tensor[(7, 12, 1), float32],) {
  @func_801() /* ty=(Tensor[(7, 12, 1), float32],) */
}

def @func_1967() -> (Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) {
  @func_1965() /* ty=(Tensor[(1, 5, 13), float64], Tensor[(7, 12, 1), float32]) */
}

def @func_4053() -> Tensor[(7, 12, 1), float32] {
  %702 = fn () -> Tensor[(7, 12, 1), float32] {
    %701 = @func_533() /* ty=(Tensor[(7, 12, 1), float32], Tensor[(7, 12, 1), float64]) */;
    %701.0
  };
  %702() /* ty=Tensor[(7, 12, 1), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
