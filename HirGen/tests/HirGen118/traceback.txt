==========mod==========
#[version = "0.0.5"]
def @func_4519(%var_4505: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) {
  %0 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %2 = cast(%var_4505, dtype="float32") /* ty=Tensor[(900), float32] */;
  %3 = reshape(%1, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %4 = reshape(%2, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %5 = @func_3311(%3, %4) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %7 = cast(%var_4505, dtype="float32") /* ty=Tensor[(900), float32] */;
  %8 = reshape(%6, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %9 = reshape(%7, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %10 = @func_3311(%8, %9) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %11 = %10.2;
  %12 = cast(%11, dtype="float32") /* ty=Tensor[(396), float32] */;
  %13 = %0.0;
  %14 = %5.5;
  %15 = sin(%12) /* ty=Tensor[(396), float32] */;
  (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(198, 2), float32] */, %var_4505, %15)
}

def @func_8559(%var_8547: Tensor[(8, 2, 7), float32]) -> Tensor[(8, 2, 7), float32] {
  %16 = cast(%var_8547, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  tan(%16) /* ty=Tensor[(8, 2, 7), float32] */
}

def @func_4772(%var_4724: Tensor[(6, 14, 7), float64], %var_4725: Tensor[(6, 14, 7), float64], %var_4735: Tensor[(900), float32], %var_4756: Tensor[(9, 10, 10), float32]) -> (Tensor[(6, 14, 7), float64], Tensor[(9, 10, 10), uint8], Tensor[(9, 10, 10), uint8]) {
  %17 = cast(%var_4725, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %18 = shape_of(%var_4724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_4724, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %21 = cast(%var_4735, dtype="float32") /* ty=Tensor[(900), float32] */;
  %22 = reshape(%21, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %23 = @func_4519(%22) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) */;
  %24 = %23.1;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %26 = erf(%25) /* ty=Tensor[(9, 10, 10), float32] */;
  %27 = cast(%var_4756, dtype="uint8") /* ty=Tensor[(9, 10, 10), uint8] */;
  %28 = shape_of(%26, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%26, dtype="uint8") /* ty=Tensor[(9, 10, 10), uint8] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %31 = cast(%var_4735, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %32 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%24, dtype="uint8") /* ty=Tensor[(9, 10, 10), uint8] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %35 = mod(%19, %20) /* ty=Tensor[(6, 14, 7), float64] */;
  %36 = multiply(%29, %30) /* ty=Tensor[(9, 10, 10), uint8] */;
  %37 = minimum(%33, %34) /* ty=Tensor[(9, 10, 10), uint8] */;
  (%35, %36, %37)
}

def @func_7520() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %38 = @func_6202() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %39 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %40 = %38.0;
  (%39, %40)
}

def @func_7768() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(90, 10), float32]) {
  %41 = @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %42 = @func_6657() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(90, 10), float32]) */;
  %43 = %42.3;
  %44 = cast(%43, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %45 = %41.0;
  %46 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %47 = rsqrt(%44) /* ty=Tensor[(90, 10), float32] */;
  (%45, %46, %47)
}

def @func_4005(%var_3965: Tensor[(1, 900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) {
  %48 = cast(%var_3965, dtype="float32") /* ty=Tensor[(1, 900), float32] */;
  %49 = reshape(%48, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %50 = @func_3036(%49) /* ty=(Tensor[(9, 10, 10), float32],) */;
  %51 = cast(meta[relay.Constant][1] /* ty=Tensor[(2, 288), float32] */, dtype="float32") /* ty=Tensor[(2, 288), float32] */;
  %52 = reshape(%51, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), float32] */;
  %53 = @func_3566(%52) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(240), float32], Tensor[(396), float32], Tensor[(182), uint32], Tensor[(26, 7), uint32], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float64], Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %54 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %55 = %50.0;
  %56 = %53.5;
  (%54, %55, %var_3965, %56, meta[relay.Constant][1] /* ty=Tensor[(2, 288), float32] */)
}

def @func_8792(%var_8782: Tensor[(260), float64]) -> (Tensor[(16, 5, 14), float64], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) {
  %57 = @func_8485() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) */;
  %58 = cast(%var_8782, dtype="float64") /* ty=Tensor[(260), float64] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(108), uint16] */, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %60 = reshape(%58, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %61 = reshape(%59, newshape=[1, 108]) /* ty=Tensor[(1, 108), uint16] */;
  %62 = @func_4653(%60, %61) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */;
  %63 = %57.1;
  %64 = %62.3;
  (%63, %64, %var_8782, meta[relay.Constant][2] /* ty=Tensor[(108), uint16] */)
}

def @func_3566(%var_3499: Tensor[(12, 3, 16), float32]) -> (Tensor[(6, 11, 6), uint8], Tensor[(240), float32], Tensor[(396), float32], Tensor[(182), uint32], Tensor[(26, 7), uint32], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float64], Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) {
  %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %66 = cast(meta[relay.Constant][4] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %67 = reshape(%65, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %68 = reshape(%66, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %69 = @func_2044(%67, %68) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %70 = cast(meta[relay.Constant][5] /* ty=Tensor[(26, 7), uint32] */, dtype="uint32") /* ty=Tensor[(26, 7), uint32] */;
  %71 = reshape(%70, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %72 = @func_3152(%71) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) */;
  %73 = cast(%var_3499, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %74 = tan(%73) /* ty=Tensor[(12, 3, 16), float32] */;
  %75 = cast(%74, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %76 = rsqrt(%75) /* ty=Tensor[(12, 3, 16), float32] */;
  %77 = cast(%74, dtype="int64") /* ty=Tensor[(12, 3, 16), int64] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="int64") /* ty=Tensor[(12, 3, 16), int64] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %81 = subtract(%79, %80) /* ty=Tensor[(12, 3, 16), int64] */;
  %82 = cast(%74, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %83 = shape_of(%81, dtype="int32") /* ty=Tensor[(3), int32] */;
  %84 = cast(%81, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %85 = dyn.reshape(%82, %83, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %86 = cast(%81, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %87 = acosh(%86) /* ty=Tensor[(12, 3, 16), float64] */;
  %88 = cast(%87, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %89 = %72.3;
  %90 = cast(%89, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %91 = cast(meta[relay.Constant][5] /* ty=Tensor[(26, 7), uint32] */, dtype="uint32") /* ty=Tensor[(26, 7), uint32] */;
  %92 = reshape(%90, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
  %93 = reshape(%91, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
  %94 = @func_1603(%92, %93) /* ty=(Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) */;
  %95 = cast(meta[relay.Constant][4] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %96 = %69.1;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %98 = reshape(%95, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %99 = reshape(%97, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %100 = @func_457(%98, %99) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %101 = multiply(%84, %85) /* ty=Tensor[(12, 3, 16), int8] */;
  %102 = asinh(%88) /* ty=Tensor[(12, 3, 16), float64] */;
  %103 = %94.1;
  %104 = %100.1;
  (%96, meta[relay.Constant][3] /* ty=Tensor[(240), float32] */, meta[relay.Constant][4] /* ty=Tensor[(396), float32] */, %89, meta[relay.Constant][5] /* ty=Tensor[(26, 7), uint32] */, %101, %102, %103, %104)
}

def @func_6246(%var_6239: Tensor[(4, 182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(4, 182), bool]) {
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %106 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 182), uint32] */, dtype="uint32") /* ty=Tensor[(1, 182), uint32] */;
  %107 = reshape(%105, newshape=[4, 48]) /* ty=Tensor[(4, 48), float64] */;
  %108 = reshape(%106, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %109 = @func_5593(%107, %108) /* ty=(Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 182), uint32] */, dtype="bool") /* ty=Tensor[(1, 182), bool] */;
  %111 = cast(%var_6239, dtype="bool") /* ty=Tensor[(4, 182), bool] */;
  %112 = @func_3912() /* ty=Tensor[(16, 5, 14), bool] */;
  %113 = %109.4;
  %114 = not_equal(%110, %111) /* ty=Tensor[(4, 182), bool] */;
  (%112, %113, meta[relay.Constant][6] /* ty=Tensor[(192), float64] */, %114)
}

def @func_6958(%var_6911: Tensor[(13, 396), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(6, 4, 10), float32], Tensor[(1, 240), float32], Tensor[(13, 396), bool], Tensor[(16, 5, 14), float32], Tensor[(?, 396), float32]) {
  %115 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %117 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 396), float32] */, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %118 = reshape(%116, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %119 = reshape(%117, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %120 = @func_2044(%118, %119) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 396), float32] */, dtype="bool") /* ty=Tensor[(1, 396), bool] */;
  %122 = cast(%var_6911, dtype="bool") /* ty=Tensor[(13, 396), bool] */;
  %123 = @func_5574() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 396), float32] */, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %125 = asin(%124) /* ty=Tensor[(1, 396), float32] */;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %127 = atan(%126) /* ty=Tensor[(1, 396), float32] */;
  %128 = cast(%127, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %129 = log10(%128) /* ty=Tensor[(1, 396), float32] */;
  %130 = cast(%125, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(2), int32] */;
  %132 = cast(%129, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %134 = %115.0;
  %135 = %120.0;
  %136 = logical_or(%121, %122) /* ty=Tensor[(13, 396), bool] */;
  %137 = %123.0;
  %138 = maximum(%132, %133) /* ty=Tensor[(?, 396), float32] */;
  (%134, %135, meta[relay.Constant][8] /* ty=Tensor[(1, 240), float32] */, %136, %137, %138)
}

def @func_7347(%var_7194: Tensor[(6, 11, 4), uint8], %var_7195: Tensor[(6, 11, 4), uint8], %var_7255: Tensor[(240), float32], %var_7274: Tensor[(396), float32]) -> (Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(240), float32], Tensor[(240), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 11, 4), uint16]) {
  %139 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %140 = cast(%var_7255, dtype="float32") /* ty=Tensor[(240), float32] */;
  %141 = reshape(%140, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %142 = @func_5498(%141) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(3, 132), float32], Tensor[(240), float32], Tensor[(396, 1), float32], Tensor[(16, 5, 14), bool]) */;
  %143 = cast(%var_7274, dtype="float32") /* ty=Tensor[(396), float32] */;
  %144 = cast(%var_7274, dtype="float32") /* ty=Tensor[(396), float32] */;
  %145 = reshape(%143, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %146 = reshape(%144, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %147 = @func_457(%145, %146) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %148 = cast(%var_7195, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %149 = shape_of(%var_7194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_7194, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = less_equal(%150, %151) /* ty=Tensor[(6, 11, 4), bool] */;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
  %154 = acos(%153) /* ty=Tensor[(6, 11, 4), float32] */;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(6, 11, 4), float64] */;
  %156 = tan(%155) /* ty=Tensor[(6, 11, 4), float64] */;
  %157 = cast(%var_7195, dtype="uint16") /* ty=Tensor[(6, 11, 4), uint16] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%156, dtype="uint16") /* ty=Tensor[(6, 11, 4), uint16] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %161 = @func_7053() /* ty=Tensor[(16, 5, 14), int16] */;
  %162 = %139.1;
  %163 = %142.2;
  %164 = %147.1;
  %165 = bitwise_and(%159, %160) /* ty=Tensor[(6, 11, 4), uint16] */;
  (%161, %162, %163, %var_7255, %164, %var_7274, %165)
}

def @func_6471(%var_6417: Tensor[(12, 13, 13), int32], %var_6448: Tensor[(396), float32]) -> (Tensor[(12, 13, 13), int32], Tensor[(12, 13, 13), float32], Tensor[(16, 5, 14), float64], Tensor[(900), float32], Tensor[(396), float32], Tensor[(900), float32]) {
  %166 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 13, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 13, 13), int32] */;
  %167 = shape_of(%var_6417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_6417, dtype="int32") /* ty=Tensor[(12, 13, 13), int32] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %170 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 13, 13), int32] */, dtype="float32") /* ty=Tensor[(12, 13, 13), float32] */;
  %171 = @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %172 = cast(%var_6448, dtype="float32") /* ty=Tensor[(396), float32] */;
  %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %174 = reshape(%172, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %175 = reshape(%173, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %176 = @func_4267(%174, %175) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) */;
  %177 = left_shift(%168, %169) /* ty=Tensor[(12, 13, 13), int32] */;
  %178 = sin(%170) /* ty=Tensor[(12, 13, 13), float32] */;
  %179 = %171.0;
  %180 = %176.2;
  (%177, %178, %179, %180, %var_6448, meta[relay.Constant][11] /* ty=Tensor[(900), float32] */)
}

def @func_3311(%var_3284: Tensor[(396), float32], %var_3301: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) {
  %181 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %184 = cast(%var_3284, dtype="float32") /* ty=Tensor[(396), float32] */;
  %185 = cast(%var_3284, dtype="float32") /* ty=Tensor[(396), float32] */;
  %186 = reshape(%184, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %187 = reshape(%185, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %188 = @func_457(%186, %187) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %190 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %191 = cast(%var_3284, dtype="float32") /* ty=Tensor[(396), float32] */;
  %192 = %188.1;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  %194 = reshape(%189, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %195 = reshape(%190, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %196 = reshape(%191, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %197 = reshape(%193, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float64] */;
  %198 = @func_1206(%194, %195, %196, %197) /* ty=(Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) */;
  %199 = cast(%var_3301, dtype="float32") /* ty=Tensor[(900), float32] */;
  %200 = reshape(%199, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %201 = @func_3036(%200) /* ty=(Tensor[(9, 10, 10), float32],) */;
  %202 = log2(%183) /* ty=Tensor[(16, 5, 14), float32] */;
  %203 = %198.0;
  %204 = %201.0;
  (%202, %192, %var_3284, %203, meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, %204, %var_3301)
}

def @func_8420() -> (Tensor[(16, 5, 14), bool],) {
  %205 = @func_7930() /* ty=Tensor[(16, 5, 14), bool] */;
  (%205,)
}

def @func_8239() -> Tensor[(16, 5, 14), bool] {
  %206 = @func_6613() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %206.0
}

def @func_8485() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) {
  %207 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %208 = @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %209 = %207.0;
  %210 = %208.0;
  (%209, %210)
}

def @func_5882(%var_5873: Tensor[(16, 1, 1), float64], %var_5874: Tensor[(16, 4, 4), float64]) -> Tensor[(16, 4, 4), bool] {
  %211 = cast(%var_5873, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
  %212 = cast(%var_5874, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
  not_equal(%211, %212) /* ty=Tensor[(16, 4, 4), bool] */
}

def @func_5508() -> Tensor[(16, 5, 14), float64] {
  %213 = @func_3867() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %213.0
}

def @func_4407() -> Tensor[(16, 5, 14), bool] {
  @func_4093() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_8767(%var_8765: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(12, 3, 16), int8], Tensor[(900), float32]) {
  %214 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %215 = @func_7683() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %216 = cast(%var_8765, dtype="float32") /* ty=Tensor[(900), float32] */;
  %217 = reshape(%216, newshape=[1, 900]) /* ty=Tensor[(1, 900), float32] */;
  %218 = @func_4005(%217) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */;
  %219 = %214.0;
  %220 = %215.0;
  %221 = %218.3;
  (%219, %220, %221, %var_8765)
}

def @func_4214(%var_4173: bool, %var_4174: Tensor[(900), bool]) -> (Tensor[(16, 5, 14), bool], Tensor[(10, 6, 15), bool], bool, Tensor[(900), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %222 = cast(%var_4173, dtype="bool") /* ty=bool */;
  %223 = cast(%var_4174, dtype="bool") /* ty=Tensor[(900), bool] */;
  %224 = reshape(%222, newshape=[]) /* ty=bool */;
  %225 = reshape(%223, newshape=[10, 6, 15]) /* ty=Tensor[(10, 6, 15), bool] */;
  %226 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %227 = @func_2735(%224, %225) /* ty=Tensor[(10, 6, 15), bool] */;
  %228 = @func_4164() /* ty=Tensor[(16, 5, 14), float32] */;
  %229 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  (%226, %227, %var_4173, %var_4174, %228, %229)
}

def @func_3027() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %230 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %231 = cast(meta[relay.Constant][14] /* ty=Tensor[(16, 5, 14), float32] */, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %232 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(16, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][13] /* ty=Tensor[(16, 5, 14), float32] */, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %235 = sqrt(%230) /* ty=Tensor[(16, 5, 14), float32] */;
  %236 = logical_and(%233, %234) /* ty=Tensor[(16, 5, 14), bool] */;
  (%235, %236)
}

def @func_4950() -> Tensor[(16, 5, 14), bool] {
  %237 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %237.2
}

def @func_4934() -> (Tensor[(16, 5, 14), bool],) {
  %238 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  (%238,)
}

def @func_4553(%var_4540: Tensor[(11, 1, 8), float32]) -> Tensor[(11, 1, 8), float32] {
  %239 = cast(%var_4540, dtype="float32") /* ty=Tensor[(11, 1, 8), float32] */;
  acos(%239) /* ty=Tensor[(11, 1, 8), float32] */
}

def @func_777(%var_757: Tensor[(5, 5, 5), uint8], %var_758: Tensor[(5, 5, 5), uint8]) -> (Tensor[(5, 5, 5), bool],) {
  %240 = cast(%var_758, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %241 = shape_of(%var_757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_757, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = less_equal(%242, %243) /* ty=Tensor[(5, 5, 5), bool] */;
  (%244,)
}

def @func_5328(%var_5303: Tensor[(3, 132), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(396), bool], Tensor[(240), float32], Tensor[(3, 132), float32]) {
  %245 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %246 = cast(%var_5303, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %247 = reshape(%245, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %248 = reshape(%246, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %249 = @func_4854(%247, %248) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) */;
  %250 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  %251 = %249.2;
  (%250, %251, meta[relay.Constant][15] /* ty=Tensor[(240), float32] */, %var_5303)
}

def @func_3244(%var_3181: Tensor[(240), float32], %var_3191: Tensor[(260), float64], %var_3192: Tensor[(108), uint16], %var_3202: Tensor[(125), uint8]) -> (Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) {
  %252 = cast(%var_3181, dtype="float32") /* ty=Tensor[(240), float32] */;
  %253 = cast(meta[relay.Constant][16] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %254 = reshape(%252, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %255 = reshape(%253, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %256 = @func_2044(%254, %255) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %257 = cast(%var_3191, dtype="float64") /* ty=Tensor[(260), float64] */;
  %258 = cast(%var_3192, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %259 = cast(%var_3191, dtype="float64") /* ty=Tensor[(260), float64] */;
  %260 = reshape(%257, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %261 = reshape(%258, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %262 = reshape(%259, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %263 = @func_299(%260, %261, %262) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %264 = %256.3;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %266 = cast(meta[relay.Constant][16] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %267 = reshape(%265, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %268 = reshape(%266, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %269 = @func_457(%267, %268) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %270 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %273 = cast(%var_3202, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %274 = cast(%var_3202, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %275 = reshape(%273, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint8] */;
  %276 = reshape(%274, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint8] */;
  %277 = @func_777(%275, %276) /* ty=(Tensor[(5, 5, 5), bool],) */;
  %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %279 = reshape(%278, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %280 = @func_3036(%279) /* ty=(Tensor[(9, 10, 10), float32],) */;
  %281 = %263.0;
  %282 = %269.0;
  %283 = tan(%272) /* ty=Tensor[(16, 5, 14), float64] */;
  %284 = %277.0;
  %285 = %280.0;
  (%264, %var_3181, meta[relay.Constant][16] /* ty=Tensor[(396), float32] */, %281, %var_3191, %var_3192, %282, %283, %284, %var_3202, %285, meta[relay.Constant][17] /* ty=Tensor[(900), float32] */)
}

def @func_4267(%var_4228: Tensor[(396), float32], %var_4229: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) {
  %286 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %288 = cast(%var_4228, dtype="float32") /* ty=Tensor[(396), float32] */;
  %289 = cast(%var_4229, dtype="float32") /* ty=Tensor[(900), float32] */;
  %290 = log(%287) /* ty=Tensor[(16, 5, 14), float64] */;
  %291 = cast(%290, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %292 = cast(%var_4228, dtype="float32") /* ty=Tensor[(396), float32] */;
  %293 = reshape(%288, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %294 = reshape(%289, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %295 = reshape(%291, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %296 = reshape(%292, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %297 = @func_3817(%293, %294, %295, %296) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */;
  %298 = %297.2;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %300 = acos(%299) /* ty=Tensor[(198, 2), float32] */;
  (%290, %var_4228, %var_4229, %300)
}

def @func_7683() -> (Tensor[(16, 5, 14), bool],) {
  %301 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %302 = %301.0;
  %303 = cast(%302, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %304 = erf(%303) /* ty=Tensor[(16, 5, 14), float64] */;
  %305 = @func_4934() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %306 = %305.0;
  %307 = cast(%306, dtype="uint64") /* ty=Tensor[(16, 5, 14), uint64] */;
  %308 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%304, dtype="uint64") /* ty=Tensor[(16, 5, 14), uint64] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %311 = bitwise_or(%309, %310) /* ty=Tensor[(16, 5, 14), uint64] */;
  %312 = cast(%302, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %313 = shape_of(%304, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%304, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %316 = logical_xor(%314, %315) /* ty=Tensor[(16, 5, 14), uint32] */;
  %317 = cast(%316, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %318 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%311, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = not_equal(%319, %320) /* ty=Tensor[(16, 5, 14), bool] */;
  (%321,)
}

def @func_5593(%var_5582: Tensor[(4, 48), float64], %var_5583: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) {
  %322 = @func_3867() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %323 = cast(%var_5582, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
  %324 = cast(%var_5583, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %325 = cast(meta[relay.Constant][18] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %326 = reshape(%323, newshape=[4, 16, 3]) /* ty=Tensor[(4, 16, 3), float64] */;
  %327 = reshape(%324, newshape=[13, 14]) /* ty=Tensor[(13, 14), uint32] */;
  %328 = reshape(%325, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %329 = @func_2587(%326, %327, %328) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */;
  %330 = %322.0;
  %331 = %329.7;
  %332 = @func_4950() /* ty=Tensor[(16, 5, 14), bool] */;
  (%330, %331, %var_5582, %var_5583, meta[relay.Constant][18] /* ty=Tensor[(260), float64] */, %332)
}

def @func_5753() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %333 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %334 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %335 = %333.1;
  %336 = %334.0;
  (%335, %336)
}

def @func_6657() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(90, 10), float32]) {
  %337 = @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %338 = %337.0;
  %339 = cast(%338, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %340 = cast(meta[relay.Constant][19] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %341 = reshape(%340, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %342 = @func_3036(%341) /* ty=(Tensor[(9, 10, 10), float32],) */;
  %343 = atan(%339) /* ty=Tensor[(16, 5, 14), float32] */;
  %344 = @func_4150() /* ty=Tensor[(16, 5, 14), bool] */;
  %345 = %342.0;
  (%343, %344, %345, meta[relay.Constant][19] /* ty=Tensor[(90, 10), float32] */)
}

def @func_8717(%var_8625: Tensor[(336), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), bool], Tensor[(336), float32], Tensor[(3, 132), float32], Tensor[(16, 5, 14), bool], Tensor[(5, 52), float64], Tensor[(108), uint16], Tensor[(3, 300), float64]) {
  %346 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %347 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 300), float32] */, dtype="float32") /* ty=Tensor[(3, 300), float32] */;
  %348 = reshape(%347, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %349 = @func_6535(%348) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) */;
  %350 = cast(%var_8625, dtype="float32") /* ty=Tensor[(336), float32] */;
  %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 132), float32] */, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %352 = reshape(%350, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %353 = reshape(%351, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %354 = @func_5455(%352, %353) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) */;
  %355 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 52), float64] */, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %356 = cast(meta[relay.Constant][23] /* ty=Tensor[(108), uint16] */, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %357 = reshape(%355, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %358 = reshape(%356, newshape=[1, 108]) /* ty=Tensor[(1, 108), uint16] */;
  %359 = @func_4653(%357, %358) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */;
  %360 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 300), float32] */, dtype="float64") /* ty=Tensor[(3, 300), float64] */;
  %361 = rsqrt(%360) /* ty=Tensor[(3, 300), float64] */;
  %362 = cast(%361, dtype="float32") /* ty=Tensor[(3, 300), float32] */;
  %363 = asin(%362) /* ty=Tensor[(3, 300), float32] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(3, 300), float64] */;
  %365 = %346.0;
  %366 = @func_5346() /* ty=Tensor[(16, 5, 14), bool] */;
  %367 = %349.4;
  %368 = %354.0;
  %369 = %359.1;
  %370 = log10(%364) /* ty=Tensor[(3, 300), float64] */;
  (%365, %366, %367, %368, %var_8625, meta[relay.Constant][21] /* ty=Tensor[(3, 132), float32] */, %369, meta[relay.Constant][22] /* ty=Tensor[(5, 52), float64] */, meta[relay.Constant][23] /* ty=Tensor[(108), uint16] */, %370)
}

def @func_3647() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) {
  %371 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %372 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %373 = %372.0;
  %374 = cast(%373, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %375 = acosh(%374) /* ty=Tensor[(16, 5, 14), float64] */;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %377 = %371.0;
  %378 = rsqrt(%376) /* ty=Tensor[(16, 5, 14), float64] */;
  (%377, %378)
}

def @func_7871(%var_7867: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(182), uint32], Tensor[(192), float64], Tensor[(182), uint32]) {
  %379 = @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %380 = @func_5671() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %381 = %380.0;
  %382 = cast(%381, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %384 = cast(%var_7867, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %385 = reshape(%383, newshape=[4, 48]) /* ty=Tensor[(4, 48), float64] */;
  %386 = reshape(%384, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %387 = @func_5593(%385, %386) /* ty=(Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) */;
  %388 = %379.1;
  %389 = sin(%382) /* ty=Tensor[(16, 5, 14), float32] */;
  %390 = %387.3;
  (%388, %389, %390, meta[relay.Constant][24] /* ty=Tensor[(192), float64] */, %var_7867)
}

def @func_2044(%var_2012: Tensor[(6, 4, 10), float32], %var_2029: Tensor[(3, 132), float32]) -> (Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) {
  %391 = cast(%var_2012, dtype="float32") /* ty=Tensor[(6, 4, 10), float32] */;
  %392 = cast(%var_2029, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %393 = cast(%var_2029, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %394 = reshape(%392, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %395 = reshape(%393, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %396 = @func_457(%394, %395) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %397 = cast(%var_2029, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %398 = %396.0;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %400 = reshape(%397, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %401 = reshape(%399, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %402 = @func_457(%400, %401) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %403 = exp(%391) /* ty=Tensor[(6, 4, 10), float32] */;
  %404 = %402.1;
  (%403, %398, %var_2029, %404)
}

def @func_3867() -> (Tensor[(16, 5, 14), float64],) {
  %405 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %406 = %405.1;
  (%406,)
}

def @func_457(%var_425: Tensor[(6, 11, 6), float32], %var_450: Tensor[(6, 11, 6), float32]) -> (Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) {
  %407 = cast(%var_425, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %408 = sqrt(%407) /* ty=Tensor[(6, 11, 6), float32] */;
  %409 = cast(%408, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
  %410 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%var_425, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = not_equal(%411, %412) /* ty=Tensor[(6, 11, 6), bool] */;
  %414 = cast(%413, dtype="uint8") /* ty=Tensor[(6, 11, 6), uint8] */;
  %415 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%408, dtype="uint8") /* ty=Tensor[(6, 11, 6), uint8] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %418 = cast(%var_450, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  %419 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%var_425, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %422 = bitwise_and(%416, %417) /* ty=Tensor[(6, 11, 6), uint8] */;
  %423 = mod(%420, %421) /* ty=Tensor[(6, 11, 6), float64] */;
  (%422, %423)
}

def @func_4164() -> Tensor[(16, 5, 14), float32] {
  %424 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %424.0
}

def @func_3059() -> (Tensor[(16, 5, 14), bool],) {
  %425 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %426 = %425.1;
  (%426,)
}

def @func_6613() -> (Tensor[(16, 5, 14), bool],) {
  %427 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %428 = %427.0;
  (%428,)
}

def @func_4150() -> Tensor[(16, 5, 14), bool] {
  @func_3912() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_3940() -> Tensor[(16, 5, 14), bool] {
  %429 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %429.0
}

def @func_1603(%var_1566: Tensor[(7, 2, 13), uint32], %var_1567: Tensor[(7, 2, 13), uint32]) -> (Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) {
  %430 = cast(%var_1567, dtype="bool") /* ty=Tensor[(7, 2, 13), bool] */;
  %431 = shape_of(%var_1566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%var_1566, dtype="bool") /* ty=Tensor[(7, 2, 13), bool] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %434 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 132), float32] */, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %435 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 132), float32] */, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %436 = reshape(%434, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %437 = reshape(%435, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %438 = @func_457(%436, %437) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %439 = greater_equal(%432, %433) /* ty=Tensor[(7, 2, 13), bool] */;
  %440 = %438.0;
  (%439, %440, meta[relay.Constant][25] /* ty=Tensor[(3, 132), float32] */)
}

def @func_4712(%var_4700: Tensor[(12, 8, 16), float64], %var_4703: Tensor[(12, 8, 16), float64]) -> (Tensor[(12, 8, 16), float64], Tensor[(12, 8, 16), bool]) {
  %441 = cast(%var_4700, dtype="float64") /* ty=Tensor[(12, 8, 16), float64] */;
  %442 = cast(%var_4703, dtype="bool") /* ty=Tensor[(12, 8, 16), bool] */;
  %443 = shape_of(%var_4700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%var_4700, dtype="bool") /* ty=Tensor[(12, 8, 16), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = tan(%441) /* ty=Tensor[(12, 8, 16), float64] */;
  %447 = less(%444, %445) /* ty=Tensor[(12, 8, 16), bool] */;
  (%446, %447)
}

def @func_7053() -> Tensor[(16, 5, 14), int16] {
  %448 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %448.0
}

def @func_5948(%var_5918: Tensor[(1, 9, 12), float32]) -> (Tensor[(1, 9, 12), float32], Tensor[(11, 1, 8), float32], Tensor[(44, 2), float32]) {
  %449 = cast(%var_5918, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %450 = cosh(%449) /* ty=Tensor[(1, 9, 12), float32] */;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %452 = sinh(%451) /* ty=Tensor[(1, 9, 12), float32] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %454 = cast(meta[relay.Constant][26] /* ty=Tensor[(44, 2), float32] */, dtype="float32") /* ty=Tensor[(44, 2), float32] */;
  %455 = reshape(%454, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), float32] */;
  %456 = atan(%453) /* ty=Tensor[(1, 9, 12), float32] */;
  %457 = @func_4553(%455) /* ty=Tensor[(11, 1, 8), float32] */;
  (%456, %457, meta[relay.Constant][26] /* ty=Tensor[(44, 2), float32] */)
}

def @func_5574() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %458 = @func_4164() /* ty=Tensor[(16, 5, 14), float32] */;
  %459 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  (%458, %459)
}

def @func_3430(%var_3426: Tensor[(130, 2), float64], %var_3427: Tensor[(108), uint16]) -> (Tensor[(16, 5, 14), float32], Tensor[(108), uint16], Tensor[(240), float32], Tensor[(130, 2), float64], Tensor[(108), uint16], Tensor[(125), uint8]) {
  %460 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %461 = %460.0;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %463 = cast(meta[relay.Constant][27] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %464 = cast(%var_3426, dtype="float64") /* ty=Tensor[(130, 2), float64] */;
  %465 = cast(%var_3427, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %466 = cast(meta[relay.Constant][28] /* ty=Tensor[(125), uint8] */, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %467 = reshape(%463, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %468 = reshape(%464, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %469 = reshape(%465, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %470 = reshape(%466, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %471 = @func_3244(%467, %468, %469, %470) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %472 = acos(%462) /* ty=Tensor[(16, 5, 14), float32] */;
  %473 = %471.5;
  (%472, %473, meta[relay.Constant][27] /* ty=Tensor[(240), float32] */, %var_3426, %var_3427, meta[relay.Constant][28] /* ty=Tensor[(125), uint8] */)
}

def @func_5698(%var_5685: Tensor[(4, 9, 10), int16], %var_5694: Tensor[(198, 2), float32]) -> (Tensor[(4, 9, 10), int16], Tensor[(198, 2), float32], Tensor[(198, 2), float32], Tensor[(900), float32]) {
  %474 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 9, 10), int16] */, dtype="int16") /* ty=Tensor[(4, 9, 10), int16] */;
  %475 = shape_of(%var_5685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%var_5685, dtype="int16") /* ty=Tensor[(4, 9, 10), int16] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %478 = cast(%var_5694, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %479 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %480 = reshape(%478, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %481 = reshape(%479, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %482 = @func_4267(%480, %481) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) */;
  %483 = add(%476, %477) /* ty=Tensor[(4, 9, 10), int16] */;
  %484 = %482.3;
  (%483, %484, %var_5694, meta[relay.Constant][30] /* ty=Tensor[(900), float32] */)
}

def @func_5407(%var_5386: Tensor[(260), float64]) -> (Tensor[(16, 5, 14), float32], Tensor[(1536), float64], Tensor[(12, 8, 16), float32], Tensor[(2, 13, 10), bool], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(16, 5, 14), bool]) {
  %485 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %486 = cast(meta[relay.Constant][31] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %487 = cast(meta[relay.Constant][31] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %488 = reshape(%486, newshape=[12, 8, 16]) /* ty=Tensor[(12, 8, 16), float64] */;
  %489 = reshape(%487, newshape=[12, 8, 16]) /* ty=Tensor[(12, 8, 16), float64] */;
  %490 = @func_4712(%488, %489) /* ty=(Tensor[(12, 8, 16), float64], Tensor[(12, 8, 16), bool]) */;
  %491 = %490.1;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(12, 8, 16), float32] */;
  %493 = cast(%var_5386, dtype="float64") /* ty=Tensor[(260), float64] */;
  %494 = cast(meta[relay.Constant][32] /* ty=Tensor[(108), uint16] */, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %495 = cast(%var_5386, dtype="float64") /* ty=Tensor[(260), float64] */;
  %496 = reshape(%493, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %497 = reshape(%494, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %498 = reshape(%495, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %499 = @func_299(%496, %497, %498) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %500 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %501 = %485.0;
  %502 = erf(%492) /* ty=Tensor[(12, 8, 16), float32] */;
  %503 = %499.3;
  %504 = %500.0;
  (%501, meta[relay.Constant][31] /* ty=Tensor[(1536), float64] */, %502, %503, %var_5386, meta[relay.Constant][32] /* ty=Tensor[(108), uint16] */, %504)
}

def @func_4093() -> Tensor[(16, 5, 14), bool] {
  %505 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %505.1
}

def @func_3600() -> (Tensor[(16, 5, 14), bool],) {
  %506 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %507 = %506.0;
  (%507,)
}

def @func_6202() -> (Tensor[(16, 5, 14), bool],) {
  %508 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %509 = %508.0;
  (%509,)
}

def @func_8537() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) {
  %510 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %511 = @func_8239() /* ty=Tensor[(16, 5, 14), bool] */;
  %512 = %510.1;
  (%511, %512)
}

def @func_6057() -> (Tensor[(16, 5, 14), bool],) {
  %513 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %514 = %513.0;
  (%514,)
}

def @func_8410(%var_8406: Tensor[(4, 10, 2), float32]) -> Tensor[(4, 10, 2), float32] {
  %515 = cast(%var_8406, dtype="float32") /* ty=Tensor[(4, 10, 2), float32] */;
  cos(%515) /* ty=Tensor[(4, 10, 2), float32] */
}

def @func_3036(%var_3030: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32],) {
  %516 = cast(%var_3030, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %517 = sqrt(%516) /* ty=Tensor[(9, 10, 10), float32] */;
  (%517,)
}

def @func_6535(%var_6533: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) {
  %518 = @func_6057() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %519 = cast(meta[relay.Constant][33] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %520 = cast(%var_6533, dtype="float32") /* ty=Tensor[(900), float32] */;
  %521 = %518.0;
  %522 = cast(%521, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %523 = cast(meta[relay.Constant][33] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %524 = reshape(%519, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %525 = reshape(%520, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %526 = reshape(%522, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %527 = reshape(%523, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %528 = @func_3817(%524, %525, %526, %527) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */;
  %529 = @func_4950() /* ty=Tensor[(16, 5, 14), bool] */;
  %530 = %528.4;
  (%529, %521, %530, meta[relay.Constant][33] /* ty=Tensor[(396), float32] */, %var_6533)
}

def @func_1746(%var_1720: uint64, %var_1743: Tensor[(66, 6), float32]) -> (Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) {
  %531 = cast(%var_1720, dtype="bool") /* ty=bool */;
  %532 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="bool") /* ty=Tensor[(13, 3, 14), bool] */;
  %533 = cast(meta[relay.Constant][35] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="uint8") /* ty=Tensor[(13, 3, 14), uint8] */;
  %534 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="uint8") /* ty=Tensor[(13, 3, 14), uint8] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %537 = cast(meta[relay.Constant][36] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %538 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 108), uint16] */, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %539 = cast(meta[relay.Constant][36] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %540 = reshape(%537, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %541 = reshape(%538, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %542 = reshape(%539, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %543 = @func_299(%540, %541, %542) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %544 = cast(%var_1743, dtype="float32") /* ty=Tensor[(66, 6), float32] */;
  %545 = cast(%var_1743, dtype="float32") /* ty=Tensor[(66, 6), float32] */;
  %546 = reshape(%544, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %547 = reshape(%545, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %548 = @func_457(%546, %547) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %549 = greater(%531, %532) /* ty=Tensor[(13, 3, 14), bool] */;
  %550 = minimum(%535, %536) /* ty=Tensor[(13, 3, 14), uint8] */;
  %551 = %543.0;
  %552 = %548.0;
  (%549, %550, %551, meta[relay.Constant][36] /* ty=Tensor[(260), float64] */, meta[relay.Constant][37] /* ty=Tensor[(1, 108), uint16] */, %552, %var_1743)
}

def @func_8137(%var_8105: Tensor[(108), uint16], %var_8121: Tensor[(192), float64], %var_8122: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), float64], Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(?, 396), float32], Tensor[(5148), float32], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(9, 10, 10), float32]) {
  %553 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %554 = cast(meta[relay.Constant][38] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %555 = reshape(%554, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %556 = @func_6535(%555) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %559 = cast(%var_8105, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %560 = cast(%var_8105, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %561 = reshape(%559, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %562 = reshape(%560, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %563 = @func_23(%561, %562) /* ty=(Tensor[(6, 2, 9), uint16],) */;
  %564 = cast(meta[relay.Constant][39] /* ty=Tensor[(5148), float32] */, dtype="float32") /* ty=Tensor[(5148), float32] */;
  %565 = reshape(%564, newshape=[13, 396]) /* ty=Tensor[(13, 396), float32] */;
  %566 = @func_6958(%565) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 4, 10), float32], Tensor[(1, 240), float32], Tensor[(13, 396), bool], Tensor[(16, 5, 14), float32], Tensor[(?, 396), float32]) */;
  %567 = cast(%var_8121, dtype="float64") /* ty=Tensor[(192), float64] */;
  %568 = cast(%var_8122, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %569 = cast(meta[relay.Constant][40] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %570 = reshape(%567, newshape=[4, 16, 3]) /* ty=Tensor[(4, 16, 3), float64] */;
  %571 = reshape(%568, newshape=[13, 14]) /* ty=Tensor[(13, 14), uint32] */;
  %572 = reshape(%569, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %573 = @func_2587(%570, %571, %572) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */;
  %574 = cast(meta[relay.Constant][38] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %575 = reshape(%574, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %576 = @func_4519(%575) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) */;
  %577 = %553.1;
  %578 = sigmoid(%558) /* ty=Tensor[(16, 5, 14), float64] */;
  %579 = %563.0;
  %580 = %566.5;
  %581 = %573.3;
  %582 = %576.1;
  (%577, meta[relay.Constant][38] /* ty=Tensor[(900), float32] */, %578, %579, %var_8105, %580, meta[relay.Constant][39] /* ty=Tensor[(5148), float32] */, %581, %var_8121, %var_8122, meta[relay.Constant][40] /* ty=Tensor[(260), float64] */, %582)
}

def @func_8433() -> (Tensor[(16, 5, 14), bool],) {
  %583 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  (%583,)
}

def @func_3457() -> (Tensor[(16, 5, 14), float32],) {
  %584 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %585 = %584.0;
  (%585,)
}

def @func_6734(%var_6729: Tensor[(16, 5, 14), bool]) -> (Tensor[(16, 5, 14), int64],) {
  %586 = @func_4950() /* ty=Tensor[(16, 5, 14), bool] */;
  %587 = cast(%var_6729, dtype="int64") /* ty=Tensor[(16, 5, 14), int64] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="int64") /* ty=Tensor[(16, 5, 14), int64] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %591 = bitwise_and(%589, %590) /* ty=Tensor[(16, 5, 14), int64] */;
  (%591,)
}

def @func_4108() -> (Tensor[(16, 5, 14), bool],) {
  %592 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %593 = %592.0;
  (%593,)
}

def @func_4854(%var_4829: Tensor[(240), float32], %var_4830: Tensor[(396), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) {
  %594 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %595 = cast(%var_4829, dtype="float32") /* ty=Tensor[(240), float32] */;
  %596 = cast(%var_4830, dtype="float32") /* ty=Tensor[(396), float32] */;
  %597 = reshape(%595, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %598 = reshape(%596, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %599 = @func_2044(%597, %598) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %600 = %599.2;
  %601 = cast(%600, dtype="bool") /* ty=Tensor[(3, 132), bool] */;
  %602 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(1), int32] */;
  %603 = cast(%var_4830, dtype="bool") /* ty=Tensor[(396), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?), bool] */;
  %605 = %594.0;
  %606 = not_equal(%603, %604) /* ty=Tensor[(396), bool] */;
  (%605, %var_4829, %606)
}

def @func_6126() -> Tensor[(16, 5, 14), bool] {
  %607 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %607.0
}

def @func_5455(%var_5432: Tensor[(336), float32], %var_5433: Tensor[(198, 2), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) {
  %608 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %609 = cast(%var_5432, dtype="float32") /* ty=Tensor[(336), float32] */;
  %610 = cast(%var_5432, dtype="float32") /* ty=Tensor[(336), float32] */;
  %611 = cast(%var_5433, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %612 = cast(%var_5433, dtype="float64") /* ty=Tensor[(198, 2), float64] */;
  %613 = reshape(%609, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %614 = reshape(%610, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %615 = reshape(%611, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %616 = reshape(%612, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float64] */;
  %617 = @func_1206(%613, %614, %615, %616) /* ty=(Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) */;
  %618 = cast(meta[relay.Constant][41] /* ty=Tensor[(182), uint32] */, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %619 = reshape(%618, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %620 = @func_3152(%619) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) */;
  %621 = cast(%var_5433, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %622 = cast(meta[relay.Constant][42] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %623 = %608.1;
  %624 = cast(%623, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %625 = cast(%var_5433, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %626 = reshape(%621, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %627 = reshape(%622, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %628 = reshape(%624, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %629 = reshape(%625, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %630 = @func_3817(%626, %627, %628, %629) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */;
  %631 = %617.2;
  %632 = %620.1;
  %633 = %630.2;
  (%623, %631, %var_5432, %var_5433, %632, meta[relay.Constant][41] /* ty=Tensor[(182), uint32] */, %633, meta[relay.Constant][42] /* ty=Tensor[(90, 10), float32] */)
}

def @func_3152(%var_3146: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) {
  %634 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %635 = cast(meta[relay.Constant][43] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %636 = cast(%var_3146, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %637 = cast(meta[relay.Constant][44] /* ty=Tensor[(5, 52), float64] */, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %638 = reshape(%635, newshape=[4, 16, 3]) /* ty=Tensor[(4, 16, 3), float64] */;
  %639 = reshape(%636, newshape=[13, 14]) /* ty=Tensor[(13, 14), uint32] */;
  %640 = reshape(%637, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %641 = @func_2587(%638, %639, %640) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */;
  %642 = %634.0;
  %643 = %641.3;
  (%642, %643, meta[relay.Constant][43] /* ty=Tensor[(192), float64] */, %var_3146, meta[relay.Constant][44] /* ty=Tensor[(5, 52), float64] */)
}

def @func_3912() -> Tensor[(16, 5, 14), bool] {
  %644 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %644.0
}

def @func_5226(%var_5211: Tensor[(16, 5, 14), float32]) -> (Tensor[(16, 5, 14), int16],) {
  %645 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %646 = %645.0;
  %647 = cast(%var_5211, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %651 = maximum(%649, %650) /* ty=Tensor[(16, 5, 14), int16] */;
  (%651,)
}

def @func_7563() -> (Tensor[(16, 5, 14), bool],) {
  %652 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  (%652,)
}

def @func_7816() -> (Tensor[(16, 5, 14), bool],) {
  %653 = @func_7563() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %654 = %653.0;
  (%654,)
}

def @func_2587(%var_2527: Tensor[(4, 16, 3), float64], %var_2534: Tensor[(13, 14), uint32], %var_2551: Tensor[(260), float64]) -> (Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) {
  %655 = cast(%var_2527, dtype="float64") /* ty=Tensor[(4, 16, 3), float64] */;
  %656 = cast(%var_2534, dtype="uint32") /* ty=Tensor[(13, 14), uint32] */;
  %657 = cast(%var_2534, dtype="uint32") /* ty=Tensor[(13, 14), uint32] */;
  %658 = reshape(%656, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
  %659 = reshape(%657, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
  %660 = @func_1603(%658, %659) /* ty=(Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) */;
  %661 = %660.1;
  %662 = cast(%661, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %663 = cast(%var_2551, dtype="float64") /* ty=Tensor[(260), float64] */;
  %664 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 36), uint16] */, dtype="uint16") /* ty=Tensor[(3, 36), uint16] */;
  %665 = cast(%var_2551, dtype="float64") /* ty=Tensor[(260), float64] */;
  %666 = reshape(%663, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %667 = reshape(%664, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %668 = reshape(%665, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %669 = @func_299(%666, %667, %668) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %670 = %669.0;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
  %672 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %673 = log(%662) /* ty=Tensor[(6, 11, 6), float32] */;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %675 = reshape(%672, newshape=[]) /* ty=uint64 */;
  %676 = reshape(%674, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
  %677 = @func_1746(%675, %676) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */;
  %678 = cast(%661, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %679 = cast(%673, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %680 = reshape(%678, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %681 = reshape(%679, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %682 = @func_457(%680, %681) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %683 = cast(%670, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
  %684 = cast(%670, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
  %685 = reshape(%683, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %686 = reshape(%684, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %687 = @func_23(%685, %686) /* ty=(Tensor[(6, 2, 9), uint16],) */;
  %688 = acosh(%655) /* ty=Tensor[(4, 16, 3), float64] */;
  %689 = cosh(%671) /* ty=Tensor[(6, 2, 9), float32] */;
  %690 = %677.0;
  %691 = %682.0;
  %692 = %687.0;
  (%688, %var_2534, %673, %var_2551, meta[relay.Constant][45] /* ty=Tensor[(3, 36), uint16] */, %689, %690, meta[relay.Constant][46] /* ty=uint64 */, %691, %692)
}

def @main(%var_9010: Tensor[(130, 2), float64], %var_9011: Tensor[(125), uint8], %var_9070: Tensor[(396), float32], %var_9106: Tensor[(8, 42), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(182), uint32], Tensor[(182), uint32], Tensor[(16, 5, 14), bool], bool, Tensor[(240), float32], Tensor[(130, 2), float64], Tensor[(125), uint8], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(4, 9, 10), int16], Tensor[(360), int16], Tensor[(396), int8], Tensor[(900), float32], Tensor[(8, 42), float32], Tensor[(396), float32]) {
  %693 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %694 = @func_4934() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %695 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %696 = reshape(%695, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %697 = @func_5328(%696) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(396), bool], Tensor[(240), float32], Tensor[(3, 132), float32]) */;
  %698 = @func_8537() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) */;
  %699 = cast(meta[relay.Constant][48] /* ty=Tensor[(182), uint32] */, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %700 = reshape(%699, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %701 = @func_7871(%700) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(182), uint32], Tensor[(192), float64], Tensor[(182), uint32]) */;
  %702 = @func_8395() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %703 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %704 = cast(%var_9010, dtype="float64") /* ty=Tensor[(130, 2), float64] */;
  %705 = cast(%var_9011, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %706 = cast(%var_9011, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %707 = cast(%var_9010, dtype="float64") /* ty=Tensor[(130, 2), float64] */;
  %708 = reshape(%703, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %709 = reshape(%704, newshape=[5, 52]) /* ty=Tensor[(5, 52), float64] */;
  %710 = reshape(%705, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %711 = reshape(%706, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %712 = reshape(%707, newshape=[5, 52]) /* ty=Tensor[(5, 52), float64] */;
  %713 = @func_4459(%708, %709, %710, %711, %712) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(240), float32], Tensor[(125), float64], Tensor[(16, 5, 14), bool], Tensor[(5, 52), bool], Tensor[(3, 36), float64], Tensor[(900), bool], bool) */;
  %714 = @func_8862() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %715 = @func_6202() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %716 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %717 = cast(meta[relay.Constant][50] /* ty=Tensor[(360), int16] */, dtype="int16") /* ty=Tensor[(360), int16] */;
  %718 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %719 = reshape(%717, newshape=[4, 9, 10]) /* ty=Tensor[(4, 9, 10), int16] */;
  %720 = reshape(%718, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %721 = @func_5698(%719, %720) /* ty=(Tensor[(4, 9, 10), int16], Tensor[(198, 2), float32], Tensor[(198, 2), float32], Tensor[(900), float32]) */;
  %722 = cast(%var_9070, dtype="int8") /* ty=Tensor[(396), int8] */;
  %723 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %724 = cast(meta[relay.Constant][47] /* ty=Tensor[(396), float32] */, dtype="int8") /* ty=Tensor[(396), int8] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?), int8] */;
  %726 = cast(%var_9106, dtype="float32") /* ty=Tensor[(8, 42), float32] */;
  %727 = reshape(%726, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %728 = @func_8717(%727) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), bool], Tensor[(336), float32], Tensor[(3, 132), float32], Tensor[(16, 5, 14), bool], Tensor[(5, 52), float64], Tensor[(108), uint16], Tensor[(3, 300), float64]) */;
  %729 = cast(%var_9070, dtype="float32") /* ty=Tensor[(396), float32] */;
  %730 = @func_5346() /* ty=Tensor[(16, 5, 14), bool] */;
  %731 = %693.0;
  %732 = %694.0;
  %733 = %697.0;
  %734 = %698.0;
  %735 = %701.2;
  %736 = %702.1;
  %737 = %713.8;
  %738 = @func_5346() /* ty=Tensor[(16, 5, 14), bool] */;
  %739 = %714.0;
  %740 = %715.0;
  %741 = %716.0;
  %742 = %721.0;
  %743 = left_shift(%724, %725) /* ty=Tensor[(396), int8] */;
  %744 = %728.2;
  %745 = sigmoid(%729) /* ty=Tensor[(396), float32] */;
  (%730, %731, %732, %733, %734, %735, meta[relay.Constant][48] /* ty=Tensor[(182), uint32] */, %736, %737, meta[relay.Constant][49] /* ty=Tensor[(240), float32] */, %var_9010, %var_9011, %738, %739, %740, %741, %742, meta[relay.Constant][50] /* ty=Tensor[(360), int16] */, %743, %744, %var_9106, %745)
}

def @func_3709(%var_3689: Tensor[(3, 132), float32], %var_3703: Tensor[(108), uint16]) -> (Tensor[(16, 5, 14), float32], Tensor[(3, 132), float32], Tensor[(13, 3, 14), float64], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16]) {
  %746 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %747 = cast(meta[relay.Constant][51] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %748 = cast(%var_3689, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %749 = reshape(%747, newshape=[]) /* ty=uint64 */;
  %750 = reshape(%748, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
  %751 = @func_1746(%749, %750) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */;
  %752 = %751.1;
  %753 = cast(%752, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
  %754 = cast(%752, dtype="uint8") /* ty=Tensor[(13, 3, 14), uint8] */;
  %755 = cast(meta[relay.Constant][51] /* ty=uint64 */, dtype="uint8") /* ty=uint8 */;
  %756 = cast(meta[relay.Constant][52] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %757 = cast(%var_3703, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %758 = cast(meta[relay.Constant][52] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %759 = reshape(%756, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %760 = reshape(%757, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %761 = reshape(%758, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %762 = @func_299(%759, %760, %761) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %763 = %746.0;
  %764 = log2(%753) /* ty=Tensor[(13, 3, 14), float64] */;
  %765 = bitwise_xor(%754, %755) /* ty=Tensor[(13, 3, 14), uint8] */;
  %766 = %762.0;
  (%763, %var_3689, %764, %765, %766, meta[relay.Constant][52] /* ty=Tensor[(260), float64] */, %var_3703)
}

def @func_1206(%var_1157: Tensor[(6, 8, 7), float32], %var_1158: Tensor[(6, 8, 7), float32], %var_1176: Tensor[(396), float32], %var_1182: Tensor[(6, 11, 6), float64]) -> (Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) {
  %767 = cast(%var_1158, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %768 = shape_of(%var_1157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_1157, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %771 = maximum(%769, %770) /* ty=Tensor[(6, 8, 7), float32] */;
  %772 = cast(%var_1158, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %776 = floor_divide(%774, %775) /* ty=Tensor[(6, 8, 7), float32] */;
  %777 = cast(%776, dtype="bool") /* ty=Tensor[(6, 8, 7), bool] */;
  %778 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%771, dtype="bool") /* ty=Tensor[(6, 8, 7), bool] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %781 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %782 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %783 = reshape(%781, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %784 = reshape(%782, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %785 = @func_457(%783, %784) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %786 = %785.1;
  %787 = cast(%var_1182, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
  %788 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %789 = cast(%786, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
  %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %791 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %792 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %793 = reshape(%791, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %794 = reshape(%792, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %795 = @func_457(%793, %794) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  %798 = less_equal(%779, %780) /* ty=Tensor[(6, 8, 7), bool] */;
  %799 = greater_equal(%789, %790) /* ty=Tensor[(6, 11, 6), bool] */;
  %800 = log2(%797) /* ty=Tensor[(6, 11, 6), float64] */;
  (%798, %var_1176, %799, %800)
}

def @func_5095(%var_5081: Tensor[(260), float64], %var_5082: Tensor[(108), uint16]) -> (Tensor[(5, 16, 11), float64], Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) {
  %801 = cast(meta[relay.Constant][53] /* ty=Tensor[(5, 16, 11), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 11), float64] */;
  %802 = cast(%var_5081, dtype="float64") /* ty=Tensor[(260), float64] */;
  %803 = cast(%var_5082, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %804 = reshape(%802, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %805 = reshape(%803, newshape=[1, 108]) /* ty=Tensor[(1, 108), uint16] */;
  %806 = @func_4653(%804, %805) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */;
  %807 = sqrt(%801) /* ty=Tensor[(5, 16, 11), float64] */;
  %808 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  %809 = %806.3;
  (%807, %808, %809, %var_5081, %var_5082)
}

def @func_5116(%var_5111: float64, %var_5112: Tensor[(11, 3, 6), float64]) -> (Tensor[(11, 3, 6), float64],) {
  %810 = cast(%var_5111, dtype="float64") /* ty=float64 */;
  %811 = cast(%var_5112, dtype="float64") /* ty=Tensor[(11, 3, 6), float64] */;
  %812 = floor_mod(%810, %811) /* ty=Tensor[(11, 3, 6), float64] */;
  (%812,)
}

def @func_5498(%var_5469: Tensor[(240), float32]) -> (Tensor[(16, 5, 14), float64], Tensor[(3, 132), float32], Tensor[(240), float32], Tensor[(396, 1), float32], Tensor[(16, 5, 14), bool]) {
  %813 = @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %814 = cast(%var_5469, dtype="float32") /* ty=Tensor[(240), float32] */;
  %815 = cast(meta[relay.Constant][54] /* ty=Tensor[(396, 1), float32] */, dtype="float32") /* ty=Tensor[(396, 1), float32] */;
  %816 = reshape(%814, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %817 = reshape(%815, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %818 = @func_2044(%816, %817) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %819 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %820 = %813.0;
  %821 = %818.2;
  %822 = %819.0;
  (%820, %821, %var_5469, meta[relay.Constant][54] /* ty=Tensor[(396, 1), float32] */, %822)
}

def @func_4973() -> (Tensor[(16, 5, 14), bool],) {
  %823 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  (%823,)
}

def @func_4071(%var_4045: bool, %var_4051: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(11, 8, 5), int64]) {
  %824 = cast(%var_4051, dtype="float32") /* ty=Tensor[(900), float32] */;
  %825 = reshape(%824, newshape=[1, 900]) /* ty=Tensor[(1, 900), float32] */;
  %826 = @func_4005(%825) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */;
  %827 = cast(%var_4045, dtype="bool") /* ty=bool */;
  %828 = cast(meta[relay.Constant][55] /* ty=Tensor[(11, 8, 5), bool] */, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
  %829 = logical_or(%827, %828) /* ty=Tensor[(11, 8, 5), bool] */;
  %830 = cast(meta[relay.Constant][56] /* ty=Tensor[(11, 8, 5), bool] */, dtype="int64") /* ty=Tensor[(11, 8, 5), int64] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%829, dtype="int64") /* ty=Tensor[(11, 8, 5), int64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %834 = %826.0;
  %835 = subtract(%832, %833) /* ty=Tensor[(11, 8, 5), int64] */;
  (%834, %var_4051, %835)
}

def @func_5864(%var_5758: Tensor[(12, 12, 7), uint32], %var_5759: Tensor[(12, 12, 7), uint32], %var_5797: Tensor[(396), float32], %var_5805: Tensor[(240), float32], %var_5808: Tensor[(1, 260), float64], %var_5810: Tensor[(125), uint8]) -> (Tensor[(12, 12, 7), bool], Tensor[(16, 5, 14), bool], Tensor[(182), uint32], Tensor[(336), float32], Tensor[(396), float32], Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(900), float32], Tensor[(54, 2), uint16], Tensor[(125), uint8], Tensor[(900), float32], bool, Tensor[(16, 5, 14), int16], Tensor[(2, 288), float32], Tensor[(1, 260), float32]) {
  %836 = cast(%var_5759, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %837 = shape_of(%var_5758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%var_5758, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %840 = @func_5671() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %841 = cast(meta[relay.Constant][57] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %842 = cast(%var_5797, dtype="float32") /* ty=Tensor[(396), float32] */;
  %843 = reshape(%841, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %844 = reshape(%842, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %845 = @func_5455(%843, %844) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) */;
  %846 = cast(%var_5805, dtype="float32") /* ty=Tensor[(240), float32] */;
  %847 = cast(%var_5797, dtype="float32") /* ty=Tensor[(396), float32] */;
  %848 = reshape(%846, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %849 = reshape(%847, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %850 = @func_4854(%848, %849) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) */;
  %851 = cast(%var_5805, dtype="float32") /* ty=Tensor[(240), float32] */;
  %852 = cast(%var_5808, dtype="float64") /* ty=Tensor[(1, 260), float64] */;
  %853 = cast(meta[relay.Constant][58] /* ty=Tensor[(54, 2), uint16] */, dtype="uint16") /* ty=Tensor[(54, 2), uint16] */;
  %854 = cast(%var_5810, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %855 = reshape(%851, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %856 = reshape(%852, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %857 = reshape(%853, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %858 = reshape(%854, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %859 = @func_3244(%855, %856, %857, %858) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %860 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %861 = %859.11;
  %862 = cast(%861, dtype="float32") /* ty=Tensor[(900), float32] */;
  %863 = reshape(%860, newshape=[]) /* ty=bool */;
  %864 = reshape(%862, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %865 = @func_4071(%863, %864) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(11, 8, 5), int64]) */;
  %866 = %850.0;
  %867 = cast(%866, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %868 = reshape(%867, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), float32] */;
  %869 = @func_5226(%868) /* ty=(Tensor[(16, 5, 14), int16],) */;
  %870 = %865.1;
  %871 = cast(%870, dtype="float32") /* ty=Tensor[(900), float32] */;
  %872 = reshape(%871, newshape=[1, 900]) /* ty=Tensor[(1, 900), float32] */;
  %873 = @func_4005(%872) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */;
  %874 = cast(%var_5808, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
  %875 = less(%838, %839) /* ty=Tensor[(12, 12, 7), bool] */;
  %876 = %840.2;
  %877 = %845.5;
  %878 = %869.0;
  %879 = %873.4;
  %880 = cosh(%874) /* ty=Tensor[(1, 260), float32] */;
  (%875, %876, %877, meta[relay.Constant][57] /* ty=Tensor[(336), float32] */, %var_5797, %866, %var_5805, %861, meta[relay.Constant][58] /* ty=Tensor[(54, 2), uint16] */, %var_5810, %870, False /* ty=bool */, %878, %879, %880)
}

def @func_5165() -> (Tensor[(16, 5, 14), float64],) {
  %881 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %882 = %881.0;
  %883 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(16, 5, 14), int32] */;
  %884 = shape_of(%882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%882, dtype="int32") /* ty=Tensor[(16, 5, 14), int32] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %887 = subtract(%885, %886) /* ty=Tensor[(16, 5, 14), int32] */;
  %888 = cast(%887, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %889 = cos(%888) /* ty=Tensor[(16, 5, 14), float64] */;
  (%889,)
}

def @func_8395() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %890 = @func_7520() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %891 = %890.0;
  %892 = @func_6126() /* ty=Tensor[(16, 5, 14), bool] */;
  (%891, %892)
}

def @func_8862() -> (Tensor[(16, 5, 14), bool],) {
  %893 = @func_7520() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %894 = %893.0;
  (%894,)
}

def @func_2735(%var_2729: bool, %var_2730: Tensor[(10, 6, 15), bool]) -> Tensor[(10, 6, 15), bool] {
  %895 = cast(%var_2729, dtype="bool") /* ty=bool */;
  %896 = cast(%var_2730, dtype="bool") /* ty=Tensor[(10, 6, 15), bool] */;
  logical_or(%895, %896) /* ty=Tensor[(10, 6, 15), bool] */
}

def @func_5671() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %897 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %898 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  %899 = %897.0;
  %900 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  (%898, %899, %900)
}

def @func_4310() -> (Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %901 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %902 = %901.1;
  %903 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 5, 14), bool] */, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
  %904 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %905 = cast(%902, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
  %906 = dyn.reshape(%903, %904, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %907 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 5, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %908 = shape_of(%902, dtype="int32") /* ty=Tensor[(3), int32] */;
  %909 = cast(%902, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %910 = dyn.reshape(%907, %908, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %911 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %912 = add(%905, %906) /* ty=Tensor[(16, 5, 14), int16] */;
  %913 = greater(%909, %910) /* ty=Tensor[(16, 5, 14), bool] */;
  %914 = %911.0;
  (%912, %913, %914)
}

def @func_4653(%var_4643: Tensor[(260), float64], %var_4644: Tensor[(1, 108), uint16]) -> (Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) {
  %915 = @func_3867() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %916 = cast(%var_4643, dtype="float64") /* ty=Tensor[(260), float64] */;
  %917 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %918 = cast(%var_4643, dtype="float64") /* ty=Tensor[(260), float64] */;
  %919 = reshape(%916, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %920 = reshape(%917, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %921 = reshape(%918, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %922 = @func_299(%919, %920, %921) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %923 = %915.0;
  %924 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  %925 = %922.2;
  (%923, %924, %925, %var_4643, %var_4644)
}

def @func_23(%var_16: Tensor[(6, 2, 9), uint16], %var_17: Tensor[(6, 2, 9), uint16]) -> (Tensor[(6, 2, 9), uint16],) {
  %926 = cast(%var_17, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
  %927 = shape_of(%var_16, dtype="int32") /* ty=Tensor[(3), int32] */;
  %928 = cast(%var_16, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
  %929 = dyn.reshape(%926, %927, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %930 = right_shift(%928, %929) /* ty=Tensor[(6, 2, 9), uint16] */;
  (%930,)
}

def @func_5346() -> Tensor[(16, 5, 14), bool] {
  %931 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %931.0
}

def @func_4459(%var_4429: Tensor[(240), float32], %var_4430: Tensor[(5, 52), float64], %var_4432: Tensor[(125), uint8], %var_4434: Tensor[(125), uint8], %var_4443: Tensor[(5, 52), float64]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(240), float32], Tensor[(125), float64], Tensor[(16, 5, 14), bool], Tensor[(5, 52), bool], Tensor[(3, 36), float64], Tensor[(900), bool], bool) {
  %932 = cast(%var_4429, dtype="float32") /* ty=Tensor[(240), float32] */;
  %933 = cast(%var_4430, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %934 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 36), uint16] */, dtype="uint16") /* ty=Tensor[(3, 36), uint16] */;
  %935 = cast(%var_4432, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %936 = reshape(%932, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %937 = reshape(%933, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %938 = reshape(%934, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %939 = reshape(%935, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %940 = @func_3244(%936, %937, %938, %939) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %941 = cast(%var_4434, dtype="float64") /* ty=Tensor[(125), float64] */;
  %942 = shape_of(%var_4432, dtype="int32") /* ty=Tensor[(1), int32] */;
  %943 = cast(%var_4432, dtype="float64") /* ty=Tensor[(125), float64] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?), float64] */;
  %945 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %946 = cast(%var_4443, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
  %947 = shape_of(%var_4430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %948 = cast(%var_4430, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
  %949 = dyn.reshape(%946, %947, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %950 = cast(meta[relay.Constant][61] /* ty=Tensor[(3, 36), uint16] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %951 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %952 = %940.11;
  %953 = cast(%952, dtype="bool") /* ty=Tensor[(900), bool] */;
  %954 = reshape(%951, newshape=[]) /* ty=bool */;
  %955 = reshape(%953, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %956 = @func_4214(%954, %955) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(10, 6, 15), bool], bool, Tensor[(900), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %957 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %958 = power(%943, %944) /* ty=Tensor[(125), float64] */;
  %959 = %945.1;
  %960 = greater(%948, %949) /* ty=Tensor[(5, 52), bool] */;
  %961 = asin(%950) /* ty=Tensor[(3, 36), float64] */;
  %962 = %956.3;
  (%957, %952, %var_4429, %958, %959, %960, %961, %962, False /* ty=bool */)
}

def @func_6869() -> (Tensor[(16, 5, 14), float64],) {
  %963 = @func_5508() /* ty=Tensor[(16, 5, 14), float64] */;
  (%963,)
}

def @func_7007() -> Tensor[(16, 5, 14), float32] {
  %964 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %964.0
}

def @func_299(%var_253: Tensor[(2, 13, 10), float64], %var_264: Tensor[(108), uint16], %var_282: Tensor[(2, 13, 10), float64]) -> (Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) {
  %965 = cast(%var_264, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %966 = cast(%var_264, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %967 = reshape(%965, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %968 = reshape(%966, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %969 = @func_23(%967, %968) /* ty=(Tensor[(6, 2, 9), uint16],) */;
  %970 = %969.0;
  %971 = cast(%970, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
  %972 = cast(%var_264, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %973 = reshape(%971, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %974 = reshape(%972, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
  %975 = @func_23(%973, %974) /* ty=(Tensor[(6, 2, 9), uint16],) */;
  %976 = cast(%var_253, dtype="float64") /* ty=Tensor[(2, 13, 10), float64] */;
  %977 = log(%976) /* ty=Tensor[(2, 13, 10), float64] */;
  %978 = cast(%var_282, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %979 = shape_of(%977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %980 = cast(%977, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
  %981 = dyn.reshape(%978, %979, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %982 = %975.0;
  %983 = greater(%980, %981) /* ty=Tensor[(2, 13, 10), bool] */;
  (%970, %var_264, %982, %983)
}

def @func_7930() -> Tensor[(16, 5, 14), bool] {
  %984 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %984.0
}

def @func_3817(%var_3747: Tensor[(198, 2), float32], %var_3748: Tensor[(900), float32], %var_3752: Tensor[(16, 5, 14), bool], %var_3764: Tensor[(198, 2), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) {
  %985 = cast(%var_3747, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %986 = cast(%var_3748, dtype="float32") /* ty=Tensor[(900), float32] */;
  %987 = reshape(%985, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %988 = reshape(%986, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %989 = @func_3311(%987, %988) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %990 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %991 = %990.0;
  %992 = cast(%var_3752, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %993 = shape_of(%991, dtype="int32") /* ty=Tensor[(3), int32] */;
  %994 = cast(%991, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %995 = dyn.reshape(%992, %993, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %996 = cast(%var_3764, dtype="bool") /* ty=Tensor[(198, 2), bool] */;
  %997 = shape_of(%var_3747, dtype="int32") /* ty=Tensor[(2), int32] */;
  %998 = cast(%var_3747, dtype="bool") /* ty=Tensor[(198, 2), bool] */;
  %999 = dyn.reshape(%996, %997, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1000 = cast(%var_3748, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1001 = tan(%1000) /* ty=Tensor[(900), float32] */;
  %1002 = cast(%var_3748, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1004 = cast(%1001, dtype="float64") /* ty=Tensor[(900), float64] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1006 = cast(meta[relay.Constant][62] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %1007 = not_equal(%998, %999) /* ty=Tensor[(198, 2), bool] */;
  %1008 = cast(%1007, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %1009 = reshape(%1006, newshape=[]) /* ty=uint64 */;
  %1010 = reshape(%1008, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
  %1011 = @func_1746(%1009, %1010) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */;
  %1012 = %989.5;
  %1013 = greater_equal(%994, %995) /* ty=Tensor[(16, 5, 14), bool] */;
  %1014 = mod(%1004, %1005) /* ty=Tensor[(900), float64] */;
  %1015 = %1011.1;
  (%1012, %1013, %1007, %1014, %1015, meta[relay.Constant][62] /* ty=uint64 */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5167() -> (Tensor[(16, 5, 14), float64],) {
  @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */
}

def @func_5510() -> Tensor[(16, 5, 14), float64] {
  @func_5508() /* ty=Tensor[(16, 5, 14), float64] */
}

def @func_5673() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  @func_5671() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */
}

def @func_7007() -> Tensor[(16, 5, 14), float32] {
  %0 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %0.0
}

def @func_4409() -> Tensor[(16, 5, 14), bool] {
  @func_4407() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_8395() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %1 = @func_7520() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %2 = %1.0;
  %3 = @func_6126() /* ty=Tensor[(16, 5, 14), bool] */;
  (%2, %3)
}

def @func_303(%var_300: Tensor[(2, 13, 10), float64], %var_301: Tensor[(108), uint16], %var_302: Tensor[(2, 13, 10), float64]) -> (Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) {
  %23 = fn (%var_253: Tensor[(2, 13, 10), float64], %var_264: Tensor[(108), uint16], %var_282: Tensor[(2, 13, 10), float64]) -> (Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) {
    %4 = cast(%var_264, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %5 = cast(%var_264, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %6 = reshape(%4, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %7 = reshape(%5, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %8 = @func_23(%6, %7) /* ty=(Tensor[(6, 2, 9), uint16],) */;
    %9 = %8.0;
    %10 = cast(%9, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
    %11 = cast(%var_264, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %12 = reshape(%10, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %13 = reshape(%11, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %14 = @func_23(%12, %13) /* ty=(Tensor[(6, 2, 9), uint16],) */;
    %15 = cast(%var_253, dtype="float64") /* ty=Tensor[(2, 13, 10), float64] */;
    %16 = log(%15) /* ty=Tensor[(2, 13, 10), float64] */;
    %17 = cast(%var_282, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
    %18 = shape_of(%16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %19 = cast(%16, dtype="bool") /* ty=Tensor[(2, 13, 10), bool] */;
    %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %21 = %14.0;
    %22 = greater(%19, %20) /* ty=Tensor[(2, 13, 10), bool] */;
    (%9, %var_264, %21, %22)
  };
  %23(%var_300, %var_301, %var_302) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */
}

def @func_1746(%var_1720: uint64, %var_1743: Tensor[(66, 6), float32]) -> (Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) {
  %24 = cast(%var_1720, dtype="bool") /* ty=bool */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="bool") /* ty=Tensor[(13, 3, 14), bool] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="uint8") /* ty=Tensor[(13, 3, 14), uint8] */;
  %27 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(meta[relay.Constant][0] /* ty=Tensor[(13, 3, 14), uint64] */, dtype="uint8") /* ty=Tensor[(13, 3, 14), uint8] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 108), uint16] */, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %33 = reshape(%30, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %34 = reshape(%31, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %35 = reshape(%32, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %36 = @func_299(%33, %34, %35) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %37 = cast(%var_1743, dtype="float32") /* ty=Tensor[(66, 6), float32] */;
  %38 = cast(%var_1743, dtype="float32") /* ty=Tensor[(66, 6), float32] */;
  %39 = reshape(%37, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %40 = reshape(%38, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %41 = @func_457(%39, %40) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %42 = greater(%24, %25) /* ty=Tensor[(13, 3, 14), bool] */;
  %43 = minimum(%28, %29) /* ty=Tensor[(13, 3, 14), uint8] */;
  %44 = %36.0;
  %45 = %41.0;
  (%42, %43, %44, meta[relay.Constant][2] /* ty=Tensor[(260), float64] */, meta[relay.Constant][3] /* ty=Tensor[(1, 108), uint16] */, %45, %var_1743)
}

def @func_3155(%var_3153: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) {
  @func_3152(%var_3153) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) */
}

def @func_4407() -> Tensor[(16, 5, 14), bool] {
  @func_4093() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_3434(%var_3432: Tensor[(130, 2), float64], %var_3433: Tensor[(108), uint16]) -> (Tensor[(16, 5, 14), float32], Tensor[(108), uint16], Tensor[(240), float32], Tensor[(130, 2), float64], Tensor[(108), uint16], Tensor[(125), uint8]) {
  @func_3430(%var_3432, %var_3433) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(108), uint16], Tensor[(240), float32], Tensor[(130, 2), float64], Tensor[(108), uint16], Tensor[(125), uint8]) */
}

def @func_4459(%var_4429: Tensor[(240), float32], %var_4430: Tensor[(5, 52), float64], %var_4432: Tensor[(125), uint8], %var_4434: Tensor[(125), uint8], %var_4443: Tensor[(5, 52), float64]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(240), float32], Tensor[(125), float64], Tensor[(16, 5, 14), bool], Tensor[(5, 52), bool], Tensor[(3, 36), float64], Tensor[(900), bool], bool) {
  %46 = cast(%var_4429, dtype="float32") /* ty=Tensor[(240), float32] */;
  %47 = cast(%var_4430, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 36), uint16] */, dtype="uint16") /* ty=Tensor[(3, 36), uint16] */;
  %49 = cast(%var_4432, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %50 = reshape(%46, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %51 = reshape(%47, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %52 = reshape(%48, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %53 = reshape(%49, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %54 = @func_3244(%50, %51, %52, %53) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %55 = cast(%var_4434, dtype="float64") /* ty=Tensor[(125), float64] */;
  %56 = shape_of(%var_4432, dtype="int32") /* ty=Tensor[(1), int32] */;
  %57 = cast(%var_4432, dtype="float64") /* ty=Tensor[(125), float64] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?), float64] */;
  %59 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %60 = cast(%var_4443, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
  %61 = shape_of(%var_4430, dtype="int32") /* ty=Tensor[(2), int32] */;
  %62 = cast(%var_4430, dtype="bool") /* ty=Tensor[(5, 52), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 36), uint16] */, dtype="float64") /* ty=Tensor[(3, 36), float64] */;
  %65 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %66 = %54.11;
  %67 = cast(%66, dtype="bool") /* ty=Tensor[(900), bool] */;
  %68 = reshape(%65, newshape=[]) /* ty=bool */;
  %69 = reshape(%67, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %70 = @func_4214(%68, %69) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(10, 6, 15), bool], bool, Tensor[(900), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %71 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %72 = power(%57, %58) /* ty=Tensor[(125), float64] */;
  %73 = %59.1;
  %74 = greater(%62, %63) /* ty=Tensor[(5, 52), bool] */;
  %75 = asin(%64) /* ty=Tensor[(3, 36), float64] */;
  %76 = %70.3;
  (%71, %66, %var_4429, %72, %73, %74, %75, %76, False /* ty=bool */)
}

def @func_7770() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(90, 10), float32]) {
  @func_7768() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(90, 10), float32]) */
}

def @func_5410(%var_5408: Tensor[(260), float64]) -> (Tensor[(16, 5, 14), float32], Tensor[(1536), float64], Tensor[(12, 8, 16), float32], Tensor[(2, 13, 10), bool], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(16, 5, 14), bool]) {
  @func_5407(%var_5408) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(1536), float64], Tensor[(12, 8, 16), float32], Tensor[(2, 13, 10), bool], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(16, 5, 14), bool]) */
}

def @func_6734(%var_6729: Tensor[(16, 5, 14), bool]) -> (Tensor[(16, 5, 14), int64],) {
  %77 = @func_4950() /* ty=Tensor[(16, 5, 14), bool] */;
  %78 = cast(%var_6729, dtype="int64") /* ty=Tensor[(16, 5, 14), int64] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="int64") /* ty=Tensor[(16, 5, 14), int64] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %82 = bitwise_and(%80, %81) /* ty=Tensor[(16, 5, 14), int64] */;
  (%82,)
}

def @func_5500(%var_5499: Tensor[(240), float32]) -> (Tensor[(16, 5, 14), float64], Tensor[(3, 132), float32], Tensor[(240), float32], Tensor[(396, 1), float32], Tensor[(16, 5, 14), bool]) {
  %93 = fn (%var_5469: Tensor[(240), float32]) -> (Tensor[(16, 5, 14), float64], Tensor[(3, 132), float32], Tensor[(240), float32], Tensor[(396, 1), float32], Tensor[(16, 5, 14), bool]) {
    %83 = @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */;
    %84 = cast(%var_5469, dtype="float32") /* ty=Tensor[(240), float32] */;
    %85 = cast(meta[relay.Constant][5] /* ty=Tensor[(396, 1), float32] */, dtype="float32") /* ty=Tensor[(396, 1), float32] */;
    %86 = reshape(%84, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
    %87 = reshape(%85, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
    %88 = @func_2044(%86, %87) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
    %89 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %90 = %83.0;
    %91 = %88.2;
    %92 = %89.0;
    (%90, %91, %var_5469, meta[relay.Constant][5] /* ty=Tensor[(396, 1), float32] */, %92)
  };
  %93(%var_5499) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(3, 132), float32], Tensor[(240), float32], Tensor[(396, 1), float32], Tensor[(16, 5, 14), bool]) */
}

def @func_5755() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */
}

def @func_4657(%var_4655: Tensor[(260), float64], %var_4656: Tensor[(1, 108), uint16]) -> (Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) {
  @func_4653(%var_4655, %var_4656) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */
}

def @func_5885(%var_5883: Tensor[(16, 1, 1), float64], %var_5884: Tensor[(16, 4, 4), float64]) -> Tensor[(16, 4, 4), bool] {
  %96 = fn (%var_5873: Tensor[(16, 1, 1), float64], %var_5874: Tensor[(16, 4, 4), float64]) -> Tensor[(16, 4, 4), bool] {
    %94 = cast(%var_5873, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
    %95 = cast(%var_5874, dtype="bool") /* ty=Tensor[(16, 4, 4), bool] */;
    not_equal(%94, %95) /* ty=Tensor[(16, 4, 4), bool] */
  };
  %96(%var_5883, %var_5884) /* ty=Tensor[(16, 4, 4), bool] */
}

def @func_6615() -> (Tensor[(16, 5, 14), bool],) {
  @func_6613() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_3315(%var_3313: Tensor[(396), float32], %var_3314: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) {
  @func_3311(%var_3313, %var_3314) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */
}

def @func_3941() -> Tensor[(16, 5, 14), bool] {
  %98 = fn () -> Tensor[(16, 5, 14), bool] {
    %97 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %97.0
  };
  %98() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_8397() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  @func_8395() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */
}

def @func_8562(%var_8560: Tensor[(8, 2, 7), float32]) -> Tensor[(8, 2, 7), float32] {
  @func_8559(%var_8560) /* ty=Tensor[(8, 2, 7), float32] */
}

def @func_4270(%var_4268: Tensor[(396), float32], %var_4269: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) {
  %114 = fn (%var_4228: Tensor[(396), float32], %var_4229: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) {
    %99 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
    %100 = cast(%99, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
    %101 = cast(%var_4228, dtype="float32") /* ty=Tensor[(396), float32] */;
    %102 = cast(%var_4229, dtype="float32") /* ty=Tensor[(900), float32] */;
    %103 = log(%100) /* ty=Tensor[(16, 5, 14), float64] */;
    %104 = cast(%103, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
    %105 = cast(%var_4228, dtype="float32") /* ty=Tensor[(396), float32] */;
    %106 = reshape(%101, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
    %107 = reshape(%102, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %108 = reshape(%104, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
    %109 = reshape(%105, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
    %110 = @func_3817(%106, %107, %108, %109) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */;
    %111 = %110.2;
    %112 = cast(%111, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
    %113 = acos(%112) /* ty=Tensor[(198, 2), float32] */;
    (%103, %var_4228, %var_4229, %113)
  };
  %114(%var_4268, %var_4269) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) */
}

def @func_4074(%var_4072: bool, %var_4073: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(11, 8, 5), int64]) {
  %127 = fn (%var_4045: bool, %var_4051: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(11, 8, 5), int64]) {
    %115 = cast(%var_4051, dtype="float32") /* ty=Tensor[(900), float32] */;
    %116 = reshape(%115, newshape=[1, 900]) /* ty=Tensor[(1, 900), float32] */;
    %117 = @func_4005(%116) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */;
    %118 = cast(%var_4045, dtype="bool") /* ty=bool */;
    %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 8, 5), bool] */, dtype="bool") /* ty=Tensor[(11, 8, 5), bool] */;
    %120 = logical_or(%118, %119) /* ty=Tensor[(11, 8, 5), bool] */;
    %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 8, 5), bool] */, dtype="int64") /* ty=Tensor[(11, 8, 5), int64] */;
    %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
    %123 = cast(%120, dtype="int64") /* ty=Tensor[(11, 8, 5), int64] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %125 = %117.0;
    %126 = subtract(%123, %124) /* ty=Tensor[(11, 8, 5), int64] */;
    (%125, %var_4051, %126)
  };
  %127(%var_4072, %var_4073) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(11, 8, 5), int64]) */
}

def @func_6537(%var_6536: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) {
  %141 = fn (%var_6533: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) {
    %128 = @func_6057() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %129 = cast(meta[relay.Constant][8] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %130 = cast(%var_6533, dtype="float32") /* ty=Tensor[(900), float32] */;
    %131 = %128.0;
    %132 = cast(%131, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
    %133 = cast(meta[relay.Constant][8] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %134 = reshape(%129, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
    %135 = reshape(%130, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %136 = reshape(%132, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
    %137 = reshape(%133, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
    %138 = @func_3817(%134, %135, %136, %137) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */;
    %139 = @func_4950() /* ty=Tensor[(16, 5, 14), bool] */;
    %140 = %138.4;
    (%139, %131, %140, meta[relay.Constant][8] /* ty=Tensor[(396), float32] */, %var_6533)
  };
  %141(%var_6536) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) */
}

def @func_8720(%var_8718: Tensor[(336), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), bool], Tensor[(336), float32], Tensor[(3, 132), float32], Tensor[(16, 5, 14), bool], Tensor[(5, 52), float64], Tensor[(108), uint16], Tensor[(3, 300), float64]) {
  @func_8717(%var_8718) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), bool], Tensor[(336), float32], Tensor[(3, 132), float32], Tensor[(16, 5, 14), bool], Tensor[(5, 52), float64], Tensor[(108), uint16], Tensor[(3, 300), float64]) */
}

def @func_3822(%var_3818: Tensor[(198, 2), float32], %var_3819: Tensor[(900), float32], %var_3820: Tensor[(16, 5, 14), bool], %var_3821: Tensor[(198, 2), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) {
  %173 = fn (%var_3747: Tensor[(198, 2), float32], %var_3748: Tensor[(900), float32], %var_3752: Tensor[(16, 5, 14), bool], %var_3764: Tensor[(198, 2), float32]) -> (Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) {
    %142 = cast(%var_3747, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
    %143 = cast(%var_3748, dtype="float32") /* ty=Tensor[(900), float32] */;
    %144 = reshape(%142, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %145 = reshape(%143, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %146 = @func_3311(%144, %145) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
    %147 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %148 = %147.0;
    %149 = cast(%var_3752, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
    %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%148, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %153 = cast(%var_3764, dtype="bool") /* ty=Tensor[(198, 2), bool] */;
    %154 = shape_of(%var_3747, dtype="int32") /* ty=Tensor[(2), int32] */;
    %155 = cast(%var_3747, dtype="bool") /* ty=Tensor[(198, 2), bool] */;
    %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %157 = cast(%var_3748, dtype="float32") /* ty=Tensor[(900), float32] */;
    %158 = tan(%157) /* ty=Tensor[(900), float32] */;
    %159 = cast(%var_3748, dtype="float64") /* ty=Tensor[(900), float64] */;
    %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(1), int32] */;
    %161 = cast(%158, dtype="float64") /* ty=Tensor[(900), float64] */;
    %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?), float64] */;
    %163 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %164 = not_equal(%155, %156) /* ty=Tensor[(198, 2), bool] */;
    %165 = cast(%164, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
    %166 = reshape(%163, newshape=[]) /* ty=uint64 */;
    %167 = reshape(%165, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
    %168 = @func_1746(%166, %167) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */;
    %169 = %146.5;
    %170 = greater_equal(%151, %152) /* ty=Tensor[(16, 5, 14), bool] */;
    %171 = mod(%161, %162) /* ty=Tensor[(900), float64] */;
    %172 = %168.1;
    (%169, %170, %164, %171, %172, meta[relay.Constant][9] /* ty=uint64 */)
  };
  %173(%var_3818, %var_3819, %var_3820, %var_3821) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */
}

def @func_4522(%var_4520: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) {
  @func_4519(%var_4520) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) */
}

def @func_6870() -> (Tensor[(16, 5, 14), float64],) {
  %175 = fn () -> (Tensor[(16, 5, 14), float64],) {
    %174 = @func_5508() /* ty=Tensor[(16, 5, 14), float64] */;
    (%174,)
  };
  %175() /* ty=(Tensor[(16, 5, 14), float64],) */
}

def @func_5575() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %178 = fn () -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
    %176 = @func_4164() /* ty=Tensor[(16, 5, 14), float32] */;
    %177 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
    (%176, %177)
  };
  %178() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */
}

def @func_6203() -> (Tensor[(16, 5, 14), bool],) {
  %181 = fn () -> (Tensor[(16, 5, 14), bool],) {
    %179 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %180 = %179.0;
    (%180,)
  };
  %181() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_3039(%var_3037: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32],) {
  @func_3036(%var_3037) /* ty=(Tensor[(9, 10, 10), float32],) */
}

def @func_6059() -> (Tensor[(16, 5, 14), bool],) {
  @func_6057() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_4151() -> Tensor[(16, 5, 14), bool] {
  %182 = fn () -> Tensor[(16, 5, 14), bool] {
    @func_3912() /* ty=Tensor[(16, 5, 14), bool] */
  };
  %182() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_7521() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %186 = fn () -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
    %183 = @func_6202() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %184 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
    %185 = %183.0;
    (%184, %185)
  };
  %186() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */
}

def @func_7685() -> (Tensor[(16, 5, 14), bool],) {
  @func_7683() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_6057() -> (Tensor[(16, 5, 14), bool],) {
  %187 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %188 = %187.0;
  (%188,)
}

def @func_4973() -> (Tensor[(16, 5, 14), bool],) {
  %189 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  (%189,)
}

def @func_4217(%var_4215: bool, %var_4216: Tensor[(900), bool]) -> (Tensor[(16, 5, 14), bool], Tensor[(10, 6, 15), bool], bool, Tensor[(900), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %198 = fn (%var_4173: bool, %var_4174: Tensor[(900), bool]) -> (Tensor[(16, 5, 14), bool], Tensor[(10, 6, 15), bool], bool, Tensor[(900), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
    %190 = cast(%var_4173, dtype="bool") /* ty=bool */;
    %191 = cast(%var_4174, dtype="bool") /* ty=Tensor[(900), bool] */;
    %192 = reshape(%190, newshape=[]) /* ty=bool */;
    %193 = reshape(%191, newshape=[10, 6, 15]) /* ty=Tensor[(10, 6, 15), bool] */;
    %194 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
    %195 = @func_2735(%192, %193) /* ty=Tensor[(10, 6, 15), bool] */;
    %196 = @func_4164() /* ty=Tensor[(16, 5, 14), float32] */;
    %197 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
    (%194, %195, %var_4173, %var_4174, %196, %197)
  };
  %198(%var_4215, %var_4216) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(10, 6, 15), bool], bool, Tensor[(900), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */
}

def @func_6958(%var_6911: Tensor[(13, 396), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(6, 4, 10), float32], Tensor[(1, 240), float32], Tensor[(13, 396), bool], Tensor[(16, 5, 14), float32], Tensor[(?, 396), float32]) {
  %199 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %200 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 240), float32] */, dtype="float32") /* ty=Tensor[(1, 240), float32] */;
  %201 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 396), float32] */, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %202 = reshape(%200, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %203 = reshape(%201, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %204 = @func_2044(%202, %203) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 396), float32] */, dtype="bool") /* ty=Tensor[(1, 396), bool] */;
  %206 = cast(%var_6911, dtype="bool") /* ty=Tensor[(13, 396), bool] */;
  %207 = @func_5574() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %208 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 396), float32] */, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %209 = asin(%208) /* ty=Tensor[(1, 396), float32] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %211 = atan(%210) /* ty=Tensor[(1, 396), float32] */;
  %212 = cast(%211, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %213 = log10(%212) /* ty=Tensor[(1, 396), float32] */;
  %214 = cast(%209, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(2), int32] */;
  %216 = cast(%213, dtype="float32") /* ty=Tensor[(1, 396), float32] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %218 = %199.0;
  %219 = %204.0;
  %220 = logical_or(%205, %206) /* ty=Tensor[(13, 396), bool] */;
  %221 = %207.0;
  %222 = maximum(%216, %217) /* ty=Tensor[(?, 396), float32] */;
  (%218, %219, meta[relay.Constant][10] /* ty=Tensor[(1, 240), float32] */, %220, %221, %222)
}

def @func_3600() -> (Tensor[(16, 5, 14), bool],) {
  %223 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %224 = %223.0;
  (%224,)
}

def @func_5871(%var_5865: Tensor[(12, 12, 7), uint32], %var_5866: Tensor[(12, 12, 7), uint32], %var_5867: Tensor[(396), float32], %var_5868: Tensor[(240), float32], %var_5869: Tensor[(1, 260), float64], %var_5870: Tensor[(125), uint8]) -> (Tensor[(12, 12, 7), bool], Tensor[(16, 5, 14), bool], Tensor[(182), uint32], Tensor[(336), float32], Tensor[(396), float32], Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(900), float32], Tensor[(54, 2), uint16], Tensor[(125), uint8], Tensor[(900), float32], bool, Tensor[(16, 5, 14), int16], Tensor[(2, 288), float32], Tensor[(1, 260), float32]) {
  %270 = fn (%var_5758: Tensor[(12, 12, 7), uint32], %var_5759: Tensor[(12, 12, 7), uint32], %var_5797: Tensor[(396), float32], %var_5805: Tensor[(240), float32], %var_5808: Tensor[(1, 260), float64], %var_5810: Tensor[(125), uint8]) -> (Tensor[(12, 12, 7), bool], Tensor[(16, 5, 14), bool], Tensor[(182), uint32], Tensor[(336), float32], Tensor[(396), float32], Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(900), float32], Tensor[(54, 2), uint16], Tensor[(125), uint8], Tensor[(900), float32], bool, Tensor[(16, 5, 14), int16], Tensor[(2, 288), float32], Tensor[(1, 260), float32]) {
    %225 = cast(%var_5759, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
    %226 = shape_of(%var_5758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %227 = cast(%var_5758, dtype="bool") /* ty=Tensor[(12, 12, 7), bool] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %229 = @func_5671() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
    %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
    %231 = cast(%var_5797, dtype="float32") /* ty=Tensor[(396), float32] */;
    %232 = reshape(%230, newshape=[336]) /* ty=Tensor[(336), float32] */;
    %233 = reshape(%231, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
    %234 = @func_5455(%232, %233) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) */;
    %235 = cast(%var_5805, dtype="float32") /* ty=Tensor[(240), float32] */;
    %236 = cast(%var_5797, dtype="float32") /* ty=Tensor[(396), float32] */;
    %237 = reshape(%235, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %238 = reshape(%236, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %239 = @func_4854(%237, %238) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) */;
    %240 = cast(%var_5805, dtype="float32") /* ty=Tensor[(240), float32] */;
    %241 = cast(%var_5808, dtype="float64") /* ty=Tensor[(1, 260), float64] */;
    %242 = cast(meta[relay.Constant][13] /* ty=Tensor[(54, 2), uint16] */, dtype="uint16") /* ty=Tensor[(54, 2), uint16] */;
    %243 = cast(%var_5810, dtype="uint8") /* ty=Tensor[(125), uint8] */;
    %244 = reshape(%240, newshape=[240]) /* ty=Tensor[(240), float32] */;
    %245 = reshape(%241, newshape=[260]) /* ty=Tensor[(260), float64] */;
    %246 = reshape(%242, newshape=[108]) /* ty=Tensor[(108), uint16] */;
    %247 = reshape(%243, newshape=[125]) /* ty=Tensor[(125), uint8] */;
    %248 = @func_3244(%244, %245, %246, %247) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
    %249 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %250 = %248.11;
    %251 = cast(%250, dtype="float32") /* ty=Tensor[(900), float32] */;
    %252 = reshape(%249, newshape=[]) /* ty=bool */;
    %253 = reshape(%251, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %254 = @func_4071(%252, %253) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(11, 8, 5), int64]) */;
    %255 = %239.0;
    %256 = cast(%255, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
    %257 = reshape(%256, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), float32] */;
    %258 = @func_5226(%257) /* ty=(Tensor[(16, 5, 14), int16],) */;
    %259 = %254.1;
    %260 = cast(%259, dtype="float32") /* ty=Tensor[(900), float32] */;
    %261 = reshape(%260, newshape=[1, 900]) /* ty=Tensor[(1, 900), float32] */;
    %262 = @func_4005(%261) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */;
    %263 = cast(%var_5808, dtype="float32") /* ty=Tensor[(1, 260), float32] */;
    %264 = less(%227, %228) /* ty=Tensor[(12, 12, 7), bool] */;
    %265 = %229.2;
    %266 = %234.5;
    %267 = %258.0;
    %268 = %262.4;
    %269 = cosh(%263) /* ty=Tensor[(1, 260), float32] */;
    (%264, %265, %266, meta[relay.Constant][12] /* ty=Tensor[(336), float32] */, %var_5797, %255, %var_5805, %250, meta[relay.Constant][13] /* ty=Tensor[(54, 2), uint16] */, %var_5810, %259, False /* ty=bool */, %267, %268, %269)
  };
  %270(%var_5865, %var_5866, %var_5867, %var_5868, %var_5869, %var_5870) /* ty=(Tensor[(12, 12, 7), bool], Tensor[(16, 5, 14), bool], Tensor[(182), uint32], Tensor[(336), float32], Tensor[(396), float32], Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(900), float32], Tensor[(54, 2), uint16], Tensor[(125), uint8], Tensor[(900), float32], bool, Tensor[(16, 5, 14), int16], Tensor[(2, 288), float32], Tensor[(1, 260), float32]) */
}

def @func_4094() -> Tensor[(16, 5, 14), bool] {
  %272 = fn () -> Tensor[(16, 5, 14), bool] {
    %271 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
    %271.1
  };
  %272() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_5407(%var_5386: Tensor[(260), float64]) -> (Tensor[(16, 5, 14), float32], Tensor[(1536), float64], Tensor[(12, 8, 16), float32], Tensor[(2, 13, 10), bool], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(16, 5, 14), bool]) {
  %273 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %274 = cast(meta[relay.Constant][14] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %275 = cast(meta[relay.Constant][14] /* ty=Tensor[(1536), float64] */, dtype="float64") /* ty=Tensor[(1536), float64] */;
  %276 = reshape(%274, newshape=[12, 8, 16]) /* ty=Tensor[(12, 8, 16), float64] */;
  %277 = reshape(%275, newshape=[12, 8, 16]) /* ty=Tensor[(12, 8, 16), float64] */;
  %278 = @func_4712(%276, %277) /* ty=(Tensor[(12, 8, 16), float64], Tensor[(12, 8, 16), bool]) */;
  %279 = %278.1;
  %280 = cast(%279, dtype="float32") /* ty=Tensor[(12, 8, 16), float32] */;
  %281 = cast(%var_5386, dtype="float64") /* ty=Tensor[(260), float64] */;
  %282 = cast(meta[relay.Constant][15] /* ty=Tensor[(108), uint16] */, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %283 = cast(%var_5386, dtype="float64") /* ty=Tensor[(260), float64] */;
  %284 = reshape(%281, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %285 = reshape(%282, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %286 = reshape(%283, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %287 = @func_299(%284, %285, %286) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %288 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %289 = %273.0;
  %290 = erf(%280) /* ty=Tensor[(12, 8, 16), float32] */;
  %291 = %287.3;
  %292 = %288.0;
  (%289, meta[relay.Constant][14] /* ty=Tensor[(1536), float64] */, %290, %291, %var_5386, meta[relay.Constant][15] /* ty=Tensor[(108), uint16] */, %292)
}

def @func_6737(%var_6735: Tensor[(16, 5, 14), bool]) -> (Tensor[(16, 5, 14), int64],) {
  @func_6734(%var_6735) /* ty=(Tensor[(16, 5, 14), int64],) */
}

def @func_7347(%var_7194: Tensor[(6, 11, 4), uint8], %var_7195: Tensor[(6, 11, 4), uint8], %var_7255: Tensor[(240), float32], %var_7274: Tensor[(396), float32]) -> (Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(240), float32], Tensor[(240), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 11, 4), uint16]) {
  %293 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %294 = cast(%var_7255, dtype="float32") /* ty=Tensor[(240), float32] */;
  %295 = reshape(%294, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %296 = @func_5498(%295) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(3, 132), float32], Tensor[(240), float32], Tensor[(396, 1), float32], Tensor[(16, 5, 14), bool]) */;
  %297 = cast(%var_7274, dtype="float32") /* ty=Tensor[(396), float32] */;
  %298 = cast(%var_7274, dtype="float32") /* ty=Tensor[(396), float32] */;
  %299 = reshape(%297, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %300 = reshape(%298, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %301 = @func_457(%299, %300) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %302 = cast(%var_7195, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %303 = shape_of(%var_7194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_7194, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = less_equal(%304, %305) /* ty=Tensor[(6, 11, 4), bool] */;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(6, 11, 4), float32] */;
  %308 = acos(%307) /* ty=Tensor[(6, 11, 4), float32] */;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(6, 11, 4), float64] */;
  %310 = tan(%309) /* ty=Tensor[(6, 11, 4), float64] */;
  %311 = cast(%var_7195, dtype="uint16") /* ty=Tensor[(6, 11, 4), uint16] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="uint16") /* ty=Tensor[(6, 11, 4), uint16] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %315 = @func_7053() /* ty=Tensor[(16, 5, 14), int16] */;
  %316 = %293.1;
  %317 = %296.2;
  %318 = %301.1;
  %319 = bitwise_and(%313, %314) /* ty=Tensor[(6, 11, 4), uint16] */;
  (%315, %316, %317, %var_7255, %318, %var_7274, %319)
}

def @func_3602() -> (Tensor[(16, 5, 14), bool],) {
  @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_6961(%var_6959: Tensor[(13, 396), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(6, 4, 10), float32], Tensor[(1, 240), float32], Tensor[(13, 396), bool], Tensor[(16, 5, 14), float32], Tensor[(?, 396), float32]) {
  @func_6958(%var_6959) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 4, 10), float32], Tensor[(1, 240), float32], Tensor[(13, 396), bool], Tensor[(16, 5, 14), float32], Tensor[(?, 396), float32]) */
}

def @func_7874(%var_7872: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(182), uint32], Tensor[(192), float64], Tensor[(182), uint32]) {
  @func_7871(%var_7872) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(182), uint32], Tensor[(192), float64], Tensor[(182), uint32]) */
}

def @func_8412(%var_8411: Tensor[(4, 10, 2), float32]) -> Tensor[(4, 10, 2), float32] {
  %321 = fn (%var_8406: Tensor[(4, 10, 2), float32]) -> Tensor[(4, 10, 2), float32] {
    %320 = cast(%var_8406, dtype="float32") /* ty=Tensor[(4, 10, 2), float32] */;
    cos(%320) /* ty=Tensor[(4, 10, 2), float32] */
  };
  %321(%var_8411) /* ty=Tensor[(4, 10, 2), float32] */
}

def @func_5508() -> Tensor[(16, 5, 14), float64] {
  %322 = @func_3867() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %322.0
}

def @func_4007(%var_4006: Tensor[(1, 900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) {
  %332 = fn (%var_3965: Tensor[(1, 900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) {
    %323 = cast(%var_3965, dtype="float32") /* ty=Tensor[(1, 900), float32] */;
    %324 = reshape(%323, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
    %325 = @func_3036(%324) /* ty=(Tensor[(9, 10, 10), float32],) */;
    %326 = cast(meta[relay.Constant][16] /* ty=Tensor[(2, 288), float32] */, dtype="float32") /* ty=Tensor[(2, 288), float32] */;
    %327 = reshape(%326, newshape=[12, 3, 16]) /* ty=Tensor[(12, 3, 16), float32] */;
    %328 = @func_3566(%327) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(240), float32], Tensor[(396), float32], Tensor[(182), uint32], Tensor[(26, 7), uint32], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float64], Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
    %329 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
    %330 = %325.0;
    %331 = %328.5;
    (%329, %330, %var_3965, %331, meta[relay.Constant][16] /* ty=Tensor[(2, 288), float32] */)
  };
  %332(%var_4006) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */
}

def @func_5701(%var_5699: Tensor[(4, 9, 10), int16], %var_5700: Tensor[(198, 2), float32]) -> (Tensor[(4, 9, 10), int16], Tensor[(198, 2), float32], Tensor[(198, 2), float32], Tensor[(900), float32]) {
  %344 = fn (%var_5685: Tensor[(4, 9, 10), int16], %var_5694: Tensor[(198, 2), float32]) -> (Tensor[(4, 9, 10), int16], Tensor[(198, 2), float32], Tensor[(198, 2), float32], Tensor[(900), float32]) {
    %333 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 9, 10), int16] */, dtype="int16") /* ty=Tensor[(4, 9, 10), int16] */;
    %334 = shape_of(%var_5685, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%var_5685, dtype="int16") /* ty=Tensor[(4, 9, 10), int16] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %337 = cast(%var_5694, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
    %338 = cast(meta[relay.Constant][18] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %339 = reshape(%337, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %340 = reshape(%338, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %341 = @func_4267(%339, %340) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) */;
    %342 = add(%335, %336) /* ty=Tensor[(4, 9, 10), int16] */;
    %343 = %341.3;
    (%342, %343, %var_5694, meta[relay.Constant][18] /* ty=Tensor[(900), float32] */)
  };
  %344(%var_5699, %var_5700) /* ty=(Tensor[(4, 9, 10), int16], Tensor[(198, 2), float32], Tensor[(198, 2), float32], Tensor[(900), float32]) */
}

def @func_4712(%var_4700: Tensor[(12, 8, 16), float64], %var_4703: Tensor[(12, 8, 16), float64]) -> (Tensor[(12, 8, 16), float64], Tensor[(12, 8, 16), bool]) {
  %345 = cast(%var_4700, dtype="float64") /* ty=Tensor[(12, 8, 16), float64] */;
  %346 = cast(%var_4703, dtype="bool") /* ty=Tensor[(12, 8, 16), bool] */;
  %347 = shape_of(%var_4700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%var_4700, dtype="bool") /* ty=Tensor[(12, 8, 16), bool] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %350 = tan(%345) /* ty=Tensor[(12, 8, 16), float64] */;
  %351 = less(%348, %349) /* ty=Tensor[(12, 8, 16), bool] */;
  (%350, %351)
}

def @func_6471(%var_6417: Tensor[(12, 13, 13), int32], %var_6448: Tensor[(396), float32]) -> (Tensor[(12, 13, 13), int32], Tensor[(12, 13, 13), float32], Tensor[(16, 5, 14), float64], Tensor[(900), float32], Tensor[(396), float32], Tensor[(900), float32]) {
  %352 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 13, 13), int32] */, dtype="int32") /* ty=Tensor[(12, 13, 13), int32] */;
  %353 = shape_of(%var_6417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%var_6417, dtype="int32") /* ty=Tensor[(12, 13, 13), int32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %356 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 13, 13), int32] */, dtype="float32") /* ty=Tensor[(12, 13, 13), float32] */;
  %357 = @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %358 = cast(%var_6448, dtype="float32") /* ty=Tensor[(396), float32] */;
  %359 = cast(meta[relay.Constant][20] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %360 = reshape(%358, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %361 = reshape(%359, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %362 = @func_4267(%360, %361) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(396), float32], Tensor[(900), float32], Tensor[(198, 2), float32]) */;
  %363 = left_shift(%354, %355) /* ty=Tensor[(12, 13, 13), int32] */;
  %364 = sin(%356) /* ty=Tensor[(12, 13, 13), float32] */;
  %365 = %357.0;
  %366 = %362.2;
  (%363, %364, %365, %366, %var_6448, meta[relay.Constant][20] /* ty=Tensor[(900), float32] */)
}

def @func_8717(%var_8625: Tensor[(336), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), bool], Tensor[(336), float32], Tensor[(3, 132), float32], Tensor[(16, 5, 14), bool], Tensor[(5, 52), float64], Tensor[(108), uint16], Tensor[(3, 300), float64]) {
  %367 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %368 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 300), float32] */, dtype="float32") /* ty=Tensor[(3, 300), float32] */;
  %369 = reshape(%368, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %370 = @func_6535(%369) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) */;
  %371 = cast(%var_8625, dtype="float32") /* ty=Tensor[(336), float32] */;
  %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 132), float32] */, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %373 = reshape(%371, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %374 = reshape(%372, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %375 = @func_5455(%373, %374) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) */;
  %376 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 52), float64] */, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %377 = cast(meta[relay.Constant][24] /* ty=Tensor[(108), uint16] */, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %378 = reshape(%376, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %379 = reshape(%377, newshape=[1, 108]) /* ty=Tensor[(1, 108), uint16] */;
  %380 = @func_4653(%378, %379) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */;
  %381 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 300), float32] */, dtype="float64") /* ty=Tensor[(3, 300), float64] */;
  %382 = rsqrt(%381) /* ty=Tensor[(3, 300), float64] */;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(3, 300), float32] */;
  %384 = asin(%383) /* ty=Tensor[(3, 300), float32] */;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(3, 300), float64] */;
  %386 = %367.0;
  %387 = @func_5346() /* ty=Tensor[(16, 5, 14), bool] */;
  %388 = %370.4;
  %389 = %375.0;
  %390 = %380.1;
  %391 = log10(%385) /* ty=Tensor[(3, 300), float64] */;
  (%386, %387, %388, %389, %var_8625, meta[relay.Constant][22] /* ty=Tensor[(3, 132), float32] */, %390, meta[relay.Constant][23] /* ty=Tensor[(5, 52), float64] */, meta[relay.Constant][24] /* ty=Tensor[(108), uint16] */, %391)
}

def @func_4653(%var_4643: Tensor[(260), float64], %var_4644: Tensor[(1, 108), uint16]) -> (Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) {
  %392 = @func_3867() /* ty=(Tensor[(16, 5, 14), float64],) */;
  %393 = cast(%var_4643, dtype="float64") /* ty=Tensor[(260), float64] */;
  %394 = cast(%var_4644, dtype="uint16") /* ty=Tensor[(1, 108), uint16] */;
  %395 = cast(%var_4643, dtype="float64") /* ty=Tensor[(260), float64] */;
  %396 = reshape(%393, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %397 = reshape(%394, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %398 = reshape(%395, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
  %399 = @func_299(%396, %397, %398) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
  %400 = %392.0;
  %401 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  %402 = %399.2;
  (%400, %401, %402, %var_4643, %var_4644)
}

def @main(%var_9010: Tensor[(130, 2), float64], %var_9011: Tensor[(125), uint8], %var_9070: Tensor[(396), float32], %var_9106: Tensor[(8, 42), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(182), uint32], Tensor[(182), uint32], Tensor[(16, 5, 14), bool], bool, Tensor[(240), float32], Tensor[(130, 2), float64], Tensor[(125), uint8], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(4, 9, 10), int16], Tensor[(360), int16], Tensor[(396), int8], Tensor[(900), float32], Tensor[(8, 42), float32], Tensor[(396), float32]) {
  %403 = @func_3029() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %404 = @func_4936() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %405 = cast(meta[relay.Constant][25] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %406 = reshape(%405, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %407 = @func_5331(%406) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(396), bool], Tensor[(240), float32], Tensor[(3, 132), float32]) */;
  %408 = @func_8538() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) */;
  %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(182), uint32] */, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %410 = reshape(%409, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %411 = @func_7874(%410) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(182), uint32], Tensor[(192), float64], Tensor[(182), uint32]) */;
  %412 = @func_8397() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %413 = cast(meta[relay.Constant][27] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %414 = cast(%var_9010, dtype="float64") /* ty=Tensor[(130, 2), float64] */;
  %415 = cast(%var_9011, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %416 = cast(%var_9011, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %417 = cast(%var_9010, dtype="float64") /* ty=Tensor[(130, 2), float64] */;
  %418 = reshape(%413, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %419 = reshape(%414, newshape=[5, 52]) /* ty=Tensor[(5, 52), float64] */;
  %420 = reshape(%415, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %421 = reshape(%416, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %422 = reshape(%417, newshape=[5, 52]) /* ty=Tensor[(5, 52), float64] */;
  %423 = @func_4466(%418, %419, %420, %421, %422) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(240), float32], Tensor[(125), float64], Tensor[(16, 5, 14), bool], Tensor[(5, 52), bool], Tensor[(3, 36), float64], Tensor[(900), bool], bool) */;
  %424 = @func_8864() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %425 = @func_6203() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %426 = @func_3458() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %427 = cast(meta[relay.Constant][28] /* ty=Tensor[(360), int16] */, dtype="int16") /* ty=Tensor[(360), int16] */;
  %428 = cast(meta[relay.Constant][25] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %429 = reshape(%427, newshape=[4, 9, 10]) /* ty=Tensor[(4, 9, 10), int16] */;
  %430 = reshape(%428, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %431 = @func_5701(%429, %430) /* ty=(Tensor[(4, 9, 10), int16], Tensor[(198, 2), float32], Tensor[(198, 2), float32], Tensor[(900), float32]) */;
  %432 = cast(%var_9070, dtype="int8") /* ty=Tensor[(396), int8] */;
  %433 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(396), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %434 = cast(meta[relay.Constant][25] /* ty=Tensor[(396), float32] */, dtype="int8") /* ty=Tensor[(396), int8] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?), int8] */;
  %436 = cast(%var_9106, dtype="float32") /* ty=Tensor[(8, 42), float32] */;
  %437 = reshape(%436, newshape=[336]) /* ty=Tensor[(336), float32] */;
  %438 = @func_8720(%437) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), bool], Tensor[(336), float32], Tensor[(3, 132), float32], Tensor[(16, 5, 14), bool], Tensor[(5, 52), float64], Tensor[(108), uint16], Tensor[(3, 300), float64]) */;
  %439 = cast(%var_9070, dtype="float32") /* ty=Tensor[(396), float32] */;
  %440 = @func_5346() /* ty=Tensor[(16, 5, 14), bool] */;
  %441 = %403.0;
  %442 = %404.0;
  %443 = %407.0;
  %444 = %408.0;
  %445 = %411.2;
  %446 = %412.1;
  %447 = %423.8;
  %448 = @func_5346() /* ty=Tensor[(16, 5, 14), bool] */;
  %449 = %424.0;
  %450 = %425.0;
  %451 = %426.0;
  %452 = %431.0;
  %453 = left_shift(%434, %435) /* ty=Tensor[(396), int8] */;
  %454 = %438.2;
  %455 = sigmoid(%439) /* ty=Tensor[(396), float32] */;
  (%440, %441, %442, %443, %444, %445, meta[relay.Constant][26] /* ty=Tensor[(182), uint32] */, %446, %447, meta[relay.Constant][27] /* ty=Tensor[(240), float32] */, %var_9010, %var_9011, %448, %449, %450, %451, %452, meta[relay.Constant][28] /* ty=Tensor[(360), int16] */, %453, %454, %var_9106, %455)
}

def @func_5120(%var_5118: float64, %var_5119: Tensor[(11, 3, 6), float64]) -> (Tensor[(11, 3, 6), float64],) {
  @func_5116(%var_5118, %var_5119) /* ty=(Tensor[(11, 3, 6), float64],) */
}

def @func_3036(%var_3030: Tensor[(9, 10, 10), float32]) -> (Tensor[(9, 10, 10), float32],) {
  %456 = cast(%var_3030, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %457 = sqrt(%456) /* ty=Tensor[(9, 10, 10), float32] */;
  (%457,)
}

def @func_6475(%var_6473: Tensor[(12, 13, 13), int32], %var_6474: Tensor[(396), float32]) -> (Tensor[(12, 13, 13), int32], Tensor[(12, 13, 13), float32], Tensor[(16, 5, 14), float64], Tensor[(900), float32], Tensor[(396), float32], Tensor[(900), float32]) {
  @func_6471(%var_6473, %var_6474) /* ty=(Tensor[(12, 13, 13), int32], Tensor[(12, 13, 13), float32], Tensor[(16, 5, 14), float64], Tensor[(900), float32], Tensor[(396), float32], Tensor[(900), float32]) */
}

def @func_26(%var_24: Tensor[(6, 2, 9), uint16], %var_25: Tensor[(6, 2, 9), uint16]) -> (Tensor[(6, 2, 9), uint16],) {
  %463 = fn (%var_16: Tensor[(6, 2, 9), uint16], %var_17: Tensor[(6, 2, 9), uint16]) -> (Tensor[(6, 2, 9), uint16],) {
    %458 = cast(%var_17, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
    %459 = shape_of(%var_16, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(%var_16, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %462 = right_shift(%460, %461) /* ty=Tensor[(6, 2, 9), uint16] */;
    (%462,)
  };
  %463(%var_24, %var_25) /* ty=(Tensor[(6, 2, 9), uint16],) */
}

def @func_4934() -> (Tensor[(16, 5, 14), bool],) {
  %464 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  (%464,)
}

def @func_3648() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) {
  %473 = fn () -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) {
    %465 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
    %466 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %467 = %466.0;
    %468 = cast(%467, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
    %469 = acosh(%468) /* ty=Tensor[(16, 5, 14), float64] */;
    %470 = cast(%469, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
    %471 = %465.0;
    %472 = rsqrt(%470) /* ty=Tensor[(16, 5, 14), float64] */;
    (%471, %472)
  };
  %473() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */
}

def @func_5165() -> (Tensor[(16, 5, 14), float64],) {
  %474 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %475 = %474.0;
  %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(16, 5, 14), int32] */;
  %477 = shape_of(%475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %478 = cast(%475, dtype="int32") /* ty=Tensor[(16, 5, 14), int32] */;
  %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %480 = subtract(%478, %479) /* ty=Tensor[(16, 5, 14), int32] */;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %482 = cos(%481) /* ty=Tensor[(16, 5, 14), float64] */;
  (%482,)
}

def @func_5455(%var_5432: Tensor[(336), float32], %var_5433: Tensor[(198, 2), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) {
  %483 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %484 = cast(%var_5432, dtype="float32") /* ty=Tensor[(336), float32] */;
  %485 = cast(%var_5432, dtype="float32") /* ty=Tensor[(336), float32] */;
  %486 = cast(%var_5433, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %487 = cast(%var_5433, dtype="float64") /* ty=Tensor[(198, 2), float64] */;
  %488 = reshape(%484, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %489 = reshape(%485, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %490 = reshape(%486, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %491 = reshape(%487, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float64] */;
  %492 = @func_1206(%488, %489, %490, %491) /* ty=(Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) */;
  %493 = cast(meta[relay.Constant][30] /* ty=Tensor[(182), uint32] */, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %494 = reshape(%493, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %495 = @func_3152(%494) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) */;
  %496 = cast(%var_5433, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %497 = cast(meta[relay.Constant][31] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %498 = %483.1;
  %499 = cast(%498, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %500 = cast(%var_5433, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %501 = reshape(%496, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %502 = reshape(%497, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %503 = reshape(%499, newshape=[16, 5, 14]) /* ty=Tensor[(16, 5, 14), bool] */;
  %504 = reshape(%500, newshape=[198, 2]) /* ty=Tensor[(198, 2), float32] */;
  %505 = @func_3817(%501, %502, %503, %504) /* ty=(Tensor[(9, 10, 10), float32], Tensor[(16, 5, 14), bool], Tensor[(198, 2), bool], Tensor[(900), float64], Tensor[(13, 3, 14), uint8], uint64) */;
  %506 = %492.2;
  %507 = %495.1;
  %508 = %505.2;
  (%498, %506, %var_5432, %var_5433, %507, meta[relay.Constant][30] /* ty=Tensor[(182), uint32] */, %508, meta[relay.Constant][31] /* ty=Tensor[(90, 10), float32] */)
}

def @func_4936() -> (Tensor[(16, 5, 14), bool],) {
  @func_4934() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_7353(%var_7349: Tensor[(6, 11, 4), uint8], %var_7350: Tensor[(6, 11, 4), uint8], %var_7351: Tensor[(240), float32], %var_7352: Tensor[(396), float32]) -> (Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(240), float32], Tensor[(240), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 11, 4), uint16]) {
  @func_7347(%var_7349, %var_7350, %var_7351, %var_7352) /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(240), float32], Tensor[(240), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 11, 4), uint16]) */
}

def @func_8862() -> (Tensor[(16, 5, 14), bool],) {
  %509 = @func_7520() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %510 = %509.0;
  (%510,)
}

def @func_4519(%var_4505: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) {
  %511 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %512 = cast(meta[relay.Constant][32] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %513 = cast(%var_4505, dtype="float32") /* ty=Tensor[(900), float32] */;
  %514 = reshape(%512, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %515 = reshape(%513, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %516 = @func_3311(%514, %515) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %517 = cast(meta[relay.Constant][32] /* ty=Tensor[(198, 2), float32] */, dtype="float32") /* ty=Tensor[(198, 2), float32] */;
  %518 = cast(%var_4505, dtype="float32") /* ty=Tensor[(900), float32] */;
  %519 = reshape(%517, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %520 = reshape(%518, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %521 = @func_3311(%519, %520) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %522 = %521.2;
  %523 = cast(%522, dtype="float32") /* ty=Tensor[(396), float32] */;
  %524 = %511.0;
  %525 = %516.5;
  %526 = sin(%523) /* ty=Tensor[(396), float32] */;
  (%524, %525, meta[relay.Constant][32] /* ty=Tensor[(198, 2), float32] */, %var_4505, %526)
}

def @func_8538() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) {
  %530 = fn () -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) {
    %527 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
    %528 = @func_8239() /* ty=Tensor[(16, 5, 14), bool] */;
    %529 = %527.1;
    (%528, %529)
  };
  %530() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) */
}

def @func_3868() -> (Tensor[(16, 5, 14), float64],) {
  %533 = fn () -> (Tensor[(16, 5, 14), float64],) {
    %531 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
    %532 = %531.1;
    (%532,)
  };
  %533() /* ty=(Tensor[(16, 5, 14), float64],) */
}

def @func_4555(%var_4554: Tensor[(11, 1, 8), float32]) -> Tensor[(11, 1, 8), float32] {
  %535 = fn (%var_4540: Tensor[(11, 1, 8), float32]) -> Tensor[(11, 1, 8), float32] {
    %534 = cast(%var_4540, dtype="float32") /* ty=Tensor[(11, 1, 8), float32] */;
    acos(%534) /* ty=Tensor[(11, 1, 8), float32] */
  };
  %535(%var_4554) /* ty=Tensor[(11, 1, 8), float32] */
}

def @func_8792(%var_8782: Tensor[(260), float64]) -> (Tensor[(16, 5, 14), float64], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) {
  %536 = @func_8485() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) */;
  %537 = cast(%var_8782, dtype="float64") /* ty=Tensor[(260), float64] */;
  %538 = cast(meta[relay.Constant][33] /* ty=Tensor[(108), uint16] */, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %539 = reshape(%537, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %540 = reshape(%538, newshape=[1, 108]) /* ty=Tensor[(1, 108), uint16] */;
  %541 = @func_4653(%539, %540) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */;
  %542 = %536.1;
  %543 = %541.3;
  (%542, %543, %var_8782, meta[relay.Constant][33] /* ty=Tensor[(108), uint16] */)
}

def @func_7053() -> Tensor[(16, 5, 14), int16] {
  %544 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %544.0
}

def @func_7871(%var_7867: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(182), uint32], Tensor[(192), float64], Tensor[(182), uint32]) {
  %545 = @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %546 = @func_5671() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %547 = %546.0;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %549 = cast(meta[relay.Constant][34] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %550 = cast(%var_7867, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %551 = reshape(%549, newshape=[4, 48]) /* ty=Tensor[(4, 48), float64] */;
  %552 = reshape(%550, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %553 = @func_5593(%551, %552) /* ty=(Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) */;
  %554 = %545.1;
  %555 = sin(%548) /* ty=Tensor[(16, 5, 14), float32] */;
  %556 = %553.3;
  (%554, %555, %556, meta[relay.Constant][34] /* ty=Tensor[(192), float64] */, %var_7867)
}

def @func_6128() -> Tensor[(16, 5, 14), bool] {
  @func_6126() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_8421() -> (Tensor[(16, 5, 14), bool],) {
  %558 = fn () -> (Tensor[(16, 5, 14), bool],) {
    %557 = @func_7930() /* ty=Tensor[(16, 5, 14), bool] */;
    (%557,)
  };
  %558() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_3152(%var_3146: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) {
  %559 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %560 = cast(meta[relay.Constant][35] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
  %561 = cast(%var_3146, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %562 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 52), float64] */, dtype="float64") /* ty=Tensor[(5, 52), float64] */;
  %563 = reshape(%560, newshape=[4, 16, 3]) /* ty=Tensor[(4, 16, 3), float64] */;
  %564 = reshape(%561, newshape=[13, 14]) /* ty=Tensor[(13, 14), uint32] */;
  %565 = reshape(%562, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %566 = @func_2587(%563, %564, %565) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */;
  %567 = %559.0;
  %568 = %566.3;
  (%567, %568, meta[relay.Constant][35] /* ty=Tensor[(192), float64] */, %var_3146, meta[relay.Constant][36] /* ty=Tensor[(5, 52), float64] */)
}

def @func_5116(%var_5111: float64, %var_5112: Tensor[(11, 3, 6), float64]) -> (Tensor[(11, 3, 6), float64],) {
  %569 = cast(%var_5111, dtype="float64") /* ty=float64 */;
  %570 = cast(%var_5112, dtype="float64") /* ty=Tensor[(11, 3, 6), float64] */;
  %571 = floor_mod(%569, %570) /* ty=Tensor[(11, 3, 6), float64] */;
  (%571,)
}

def @func_7055() -> Tensor[(16, 5, 14), int16] {
  @func_7053() /* ty=Tensor[(16, 5, 14), int16] */
}

def @func_5753() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %572 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %573 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %574 = %572.1;
  %575 = %573.0;
  (%574, %575)
}

def @func_3059() -> (Tensor[(16, 5, 14), bool],) {
  %576 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %577 = %576.1;
  (%577,)
}

def @func_5348() -> Tensor[(16, 5, 14), bool] {
  @func_5346() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_6613() -> (Tensor[(16, 5, 14), bool],) {
  %578 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %579 = %578.0;
  (%579,)
}

def @func_5948(%var_5918: Tensor[(1, 9, 12), float32]) -> (Tensor[(1, 9, 12), float32], Tensor[(11, 1, 8), float32], Tensor[(44, 2), float32]) {
  %580 = cast(%var_5918, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %581 = cosh(%580) /* ty=Tensor[(1, 9, 12), float32] */;
  %582 = cast(%581, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %583 = sinh(%582) /* ty=Tensor[(1, 9, 12), float32] */;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(1, 9, 12), float32] */;
  %585 = cast(meta[relay.Constant][37] /* ty=Tensor[(44, 2), float32] */, dtype="float32") /* ty=Tensor[(44, 2), float32] */;
  %586 = reshape(%585, newshape=[11, 1, 8]) /* ty=Tensor[(11, 1, 8), float32] */;
  %587 = atan(%584) /* ty=Tensor[(1, 9, 12), float32] */;
  %588 = @func_4553(%586) /* ty=Tensor[(11, 1, 8), float32] */;
  (%587, %588, meta[relay.Constant][37] /* ty=Tensor[(44, 2), float32] */)
}

def @func_3458() -> (Tensor[(16, 5, 14), float32],) {
  %591 = fn () -> (Tensor[(16, 5, 14), float32],) {
    %589 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
    %590 = %589.0;
    (%590,)
  };
  %591() /* ty=(Tensor[(16, 5, 14), float32],) */
}

def @func_8239() -> Tensor[(16, 5, 14), bool] {
  %592 = @func_6613() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %592.0
}

def @func_5095(%var_5081: Tensor[(260), float64], %var_5082: Tensor[(108), uint16]) -> (Tensor[(5, 16, 11), float64], Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) {
  %593 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 16, 11), float64] */, dtype="float64") /* ty=Tensor[(5, 16, 11), float64] */;
  %594 = cast(%var_5081, dtype="float64") /* ty=Tensor[(260), float64] */;
  %595 = cast(%var_5082, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %596 = reshape(%594, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %597 = reshape(%595, newshape=[1, 108]) /* ty=Tensor[(1, 108), uint16] */;
  %598 = @func_4653(%596, %597) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(16, 5, 14), bool], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16]) */;
  %599 = sqrt(%593) /* ty=Tensor[(5, 16, 11), float64] */;
  %600 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  %601 = %598.3;
  (%599, %600, %601, %var_5081, %var_5082)
}

def @func_780(%var_778: Tensor[(5, 5, 5), uint8], %var_779: Tensor[(5, 5, 5), uint8]) -> (Tensor[(5, 5, 5), bool],) {
  %607 = fn (%var_757: Tensor[(5, 5, 5), uint8], %var_758: Tensor[(5, 5, 5), uint8]) -> (Tensor[(5, 5, 5), bool],) {
    %602 = cast(%var_758, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
    %603 = shape_of(%var_757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %604 = cast(%var_757, dtype="bool") /* ty=Tensor[(5, 5, 5), bool] */;
    %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %606 = less_equal(%604, %605) /* ty=Tensor[(5, 5, 5), bool] */;
    (%606,)
  };
  %607(%var_778, %var_779) /* ty=(Tensor[(5, 5, 5), bool],) */
}

def @func_7818() -> (Tensor[(16, 5, 14), bool],) {
  @func_7816() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_3311(%var_3284: Tensor[(396), float32], %var_3301: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(6, 11, 6), float64], Tensor[(396), float32], Tensor[(6, 8, 7), bool], Tensor[(336), float32], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) {
  %608 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %611 = cast(%var_3284, dtype="float32") /* ty=Tensor[(396), float32] */;
  %612 = cast(%var_3284, dtype="float32") /* ty=Tensor[(396), float32] */;
  %613 = reshape(%611, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %614 = reshape(%612, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %615 = @func_457(%613, %614) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %616 = cast(meta[relay.Constant][39] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %617 = cast(meta[relay.Constant][39] /* ty=Tensor[(336), float32] */, dtype="float32") /* ty=Tensor[(336), float32] */;
  %618 = cast(%var_3284, dtype="float32") /* ty=Tensor[(396), float32] */;
  %619 = %615.1;
  %620 = cast(%619, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  %621 = reshape(%616, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %622 = reshape(%617, newshape=[6, 8, 7]) /* ty=Tensor[(6, 8, 7), float32] */;
  %623 = reshape(%618, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %624 = reshape(%620, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float64] */;
  %625 = @func_1206(%621, %622, %623, %624) /* ty=(Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) */;
  %626 = cast(%var_3301, dtype="float32") /* ty=Tensor[(900), float32] */;
  %627 = reshape(%626, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
  %628 = @func_3036(%627) /* ty=(Tensor[(9, 10, 10), float32],) */;
  %629 = log2(%610) /* ty=Tensor[(16, 5, 14), float32] */;
  %630 = %625.0;
  %631 = %628.0;
  (%629, %619, %var_3284, %630, meta[relay.Constant][39] /* ty=Tensor[(336), float32] */, %631, %var_3301)
}

def @func_4975() -> (Tensor[(16, 5, 14), bool],) {
  @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_5596(%var_5594: Tensor[(4, 48), float64], %var_5595: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) {
  %643 = fn (%var_5582: Tensor[(4, 48), float64], %var_5583: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) {
    %632 = @func_3867() /* ty=(Tensor[(16, 5, 14), float64],) */;
    %633 = cast(%var_5582, dtype="float64") /* ty=Tensor[(4, 48), float64] */;
    %634 = cast(%var_5583, dtype="uint32") /* ty=Tensor[(182), uint32] */;
    %635 = cast(meta[relay.Constant][40] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %636 = reshape(%633, newshape=[4, 16, 3]) /* ty=Tensor[(4, 16, 3), float64] */;
    %637 = reshape(%634, newshape=[13, 14]) /* ty=Tensor[(13, 14), uint32] */;
    %638 = reshape(%635, newshape=[260]) /* ty=Tensor[(260), float64] */;
    %639 = @func_2587(%636, %637, %638) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */;
    %640 = %632.0;
    %641 = %639.7;
    %642 = @func_4950() /* ty=Tensor[(16, 5, 14), bool] */;
    (%640, %641, %var_5582, %var_5583, meta[relay.Constant][40] /* ty=Tensor[(260), float64] */, %642)
  };
  %643(%var_5594, %var_5595) /* ty=(Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) */
}

def @func_5328(%var_5303: Tensor[(3, 132), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(396), bool], Tensor[(240), float32], Tensor[(3, 132), float32]) {
  %644 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %645 = cast(%var_5303, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %646 = reshape(%644, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %647 = reshape(%645, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %648 = @func_4854(%646, %647) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) */;
  %649 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  %650 = %648.2;
  (%649, %650, meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, %var_5303)
}

def @func_5671() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %651 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
  %652 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
  %653 = %651.0;
  %654 = @func_4093() /* ty=Tensor[(16, 5, 14), bool] */;
  (%652, %653, %654)
}

def @func_7683() -> (Tensor[(16, 5, 14), bool],) {
  %655 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %656 = %655.0;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
  %658 = erf(%657) /* ty=Tensor[(16, 5, 14), float64] */;
  %659 = @func_4934() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %660 = %659.0;
  %661 = cast(%660, dtype="uint64") /* ty=Tensor[(16, 5, 14), uint64] */;
  %662 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%658, dtype="uint64") /* ty=Tensor[(16, 5, 14), uint64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %665 = bitwise_or(%663, %664) /* ty=Tensor[(16, 5, 14), uint64] */;
  %666 = cast(%656, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %667 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%658, dtype="uint32") /* ty=Tensor[(16, 5, 14), uint32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %670 = logical_xor(%668, %669) /* ty=Tensor[(16, 5, 14), uint32] */;
  %671 = cast(%670, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %672 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%665, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = not_equal(%673, %674) /* ty=Tensor[(16, 5, 14), bool] */;
  (%675,)
}

def @func_5459(%var_5457: Tensor[(336), float32], %var_5458: Tensor[(198, 2), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) {
  @func_5455(%var_5457, %var_5458) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 11, 6), bool], Tensor[(336), float32], Tensor[(198, 2), float32], Tensor[(260), float64], Tensor[(182), uint32], Tensor[(198, 2), bool], Tensor[(90, 10), float32]) */
}

def @func_1603(%var_1566: Tensor[(7, 2, 13), uint32], %var_1567: Tensor[(7, 2, 13), uint32]) -> (Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) {
  %676 = cast(%var_1567, dtype="bool") /* ty=Tensor[(7, 2, 13), bool] */;
  %677 = shape_of(%var_1566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_1566, dtype="bool") /* ty=Tensor[(7, 2, 13), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %680 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 132), float32] */, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %681 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 132), float32] */, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
  %682 = reshape(%680, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %683 = reshape(%681, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %684 = @func_457(%682, %683) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %685 = greater_equal(%678, %679) /* ty=Tensor[(7, 2, 13), bool] */;
  %686 = %684.0;
  (%685, %686, meta[relay.Constant][42] /* ty=Tensor[(3, 132), float32] */)
}

def @func_8864() -> (Tensor[(16, 5, 14), bool],) {
  @func_8862() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_4109() -> (Tensor[(16, 5, 14), bool],) {
  %689 = fn () -> (Tensor[(16, 5, 14), bool],) {
    %687 = @func_3600() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %688 = %687.0;
    (%688,)
  };
  %689() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_4772(%var_4724: Tensor[(6, 14, 7), float64], %var_4725: Tensor[(6, 14, 7), float64], %var_4735: Tensor[(900), float32], %var_4756: Tensor[(9, 10, 10), float32]) -> (Tensor[(6, 14, 7), float64], Tensor[(9, 10, 10), uint8], Tensor[(9, 10, 10), uint8]) {
  %690 = cast(%var_4725, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %691 = shape_of(%var_4724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%var_4724, dtype="float64") /* ty=Tensor[(6, 14, 7), float64] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %694 = cast(%var_4735, dtype="float32") /* ty=Tensor[(900), float32] */;
  %695 = reshape(%694, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %696 = @func_4519(%695) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) */;
  %697 = %696.1;
  %698 = cast(%697, dtype="float32") /* ty=Tensor[(9, 10, 10), float32] */;
  %699 = erf(%698) /* ty=Tensor[(9, 10, 10), float32] */;
  %700 = cast(%var_4756, dtype="uint8") /* ty=Tensor[(9, 10, 10), uint8] */;
  %701 = shape_of(%699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %702 = cast(%699, dtype="uint8") /* ty=Tensor[(9, 10, 10), uint8] */;
  %703 = dyn.reshape(%700, %701, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %704 = cast(%var_4735, dtype="uint8") /* ty=Tensor[(900), uint8] */;
  %705 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%697, dtype="uint8") /* ty=Tensor[(9, 10, 10), uint8] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %708 = mod(%692, %693) /* ty=Tensor[(6, 14, 7), float64] */;
  %709 = multiply(%702, %703) /* ty=Tensor[(9, 10, 10), uint8] */;
  %710 = minimum(%706, %707) /* ty=Tensor[(9, 10, 10), uint8] */;
  (%708, %709, %710)
}

def @func_460(%var_458: Tensor[(6, 11, 6), float32], %var_459: Tensor[(6, 11, 6), float32]) -> (Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) {
  %728 = fn (%var_425: Tensor[(6, 11, 6), float32], %var_450: Tensor[(6, 11, 6), float32]) -> (Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) {
    %711 = cast(%var_425, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %712 = sqrt(%711) /* ty=Tensor[(6, 11, 6), float32] */;
    %713 = cast(%712, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
    %714 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%var_425, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %717 = not_equal(%715, %716) /* ty=Tensor[(6, 11, 6), bool] */;
    %718 = cast(%717, dtype="uint8") /* ty=Tensor[(6, 11, 6), uint8] */;
    %719 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %720 = cast(%712, dtype="uint8") /* ty=Tensor[(6, 11, 6), uint8] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %722 = cast(%var_450, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
    %723 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %724 = cast(%var_425, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
    %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %726 = bitwise_and(%720, %721) /* ty=Tensor[(6, 11, 6), uint8] */;
    %727 = mod(%724, %725) /* ty=Tensor[(6, 11, 6), float64] */;
    (%726, %727)
  };
  %728(%var_458, %var_459) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */
}

def @func_5951(%var_5949: Tensor[(1, 9, 12), float32]) -> (Tensor[(1, 9, 12), float32], Tensor[(11, 1, 8), float32], Tensor[(44, 2), float32]) {
  @func_5948(%var_5949) /* ty=(Tensor[(1, 9, 12), float32], Tensor[(11, 1, 8), float32], Tensor[(44, 2), float32]) */
}

def @func_4778(%var_4774: Tensor[(6, 14, 7), float64], %var_4775: Tensor[(6, 14, 7), float64], %var_4776: Tensor[(900), float32], %var_4777: Tensor[(9, 10, 10), float32]) -> (Tensor[(6, 14, 7), float64], Tensor[(9, 10, 10), uint8], Tensor[(9, 10, 10), uint8]) {
  @func_4772(%var_4774, %var_4775, %var_4776, %var_4777) /* ty=(Tensor[(6, 14, 7), float64], Tensor[(9, 10, 10), uint8], Tensor[(9, 10, 10), uint8]) */
}

def @func_3913() -> Tensor[(16, 5, 14), bool] {
  %730 = fn () -> Tensor[(16, 5, 14), bool] {
    %729 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %729.0
  };
  %730() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_5331(%var_5329: Tensor[(3, 132), float32]) -> (Tensor[(16, 5, 14), bool], Tensor[(396), bool], Tensor[(240), float32], Tensor[(3, 132), float32]) {
  @func_5328(%var_5329) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(396), bool], Tensor[(240), float32], Tensor[(3, 132), float32]) */
}

def @func_3566(%var_3499: Tensor[(12, 3, 16), float32]) -> (Tensor[(6, 11, 6), uint8], Tensor[(240), float32], Tensor[(396), float32], Tensor[(182), uint32], Tensor[(26, 7), uint32], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float64], Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) {
  %731 = cast(meta[relay.Constant][43] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %732 = cast(meta[relay.Constant][44] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %733 = reshape(%731, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %734 = reshape(%732, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %735 = @func_2044(%733, %734) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %736 = cast(meta[relay.Constant][45] /* ty=Tensor[(26, 7), uint32] */, dtype="uint32") /* ty=Tensor[(26, 7), uint32] */;
  %737 = reshape(%736, newshape=[182]) /* ty=Tensor[(182), uint32] */;
  %738 = @func_3152(%737) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(5, 52), float64]) */;
  %739 = cast(%var_3499, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %740 = tan(%739) /* ty=Tensor[(12, 3, 16), float32] */;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(12, 3, 16), float32] */;
  %742 = rsqrt(%741) /* ty=Tensor[(12, 3, 16), float32] */;
  %743 = cast(%740, dtype="int64") /* ty=Tensor[(12, 3, 16), int64] */;
  %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%742, dtype="int64") /* ty=Tensor[(12, 3, 16), int64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %747 = subtract(%745, %746) /* ty=Tensor[(12, 3, 16), int64] */;
  %748 = cast(%740, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="int8") /* ty=Tensor[(12, 3, 16), int8] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %752 = cast(%747, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %753 = acosh(%752) /* ty=Tensor[(12, 3, 16), float64] */;
  %754 = cast(%753, dtype="float64") /* ty=Tensor[(12, 3, 16), float64] */;
  %755 = %738.3;
  %756 = cast(%755, dtype="uint32") /* ty=Tensor[(182), uint32] */;
  %757 = cast(meta[relay.Constant][45] /* ty=Tensor[(26, 7), uint32] */, dtype="uint32") /* ty=Tensor[(26, 7), uint32] */;
  %758 = reshape(%756, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
  %759 = reshape(%757, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
  %760 = @func_1603(%758, %759) /* ty=(Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) */;
  %761 = cast(meta[relay.Constant][44] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %762 = %735.1;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
  %764 = reshape(%761, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %765 = reshape(%763, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %766 = @func_457(%764, %765) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %767 = multiply(%750, %751) /* ty=Tensor[(12, 3, 16), int8] */;
  %768 = asinh(%754) /* ty=Tensor[(12, 3, 16), float64] */;
  %769 = %760.1;
  %770 = %766.1;
  (%762, meta[relay.Constant][43] /* ty=Tensor[(240), float32] */, meta[relay.Constant][44] /* ty=Tensor[(396), float32] */, %755, meta[relay.Constant][45] /* ty=Tensor[(26, 7), uint32] */, %767, %768, %769, %770)
}

def @func_1206(%var_1157: Tensor[(6, 8, 7), float32], %var_1158: Tensor[(6, 8, 7), float32], %var_1176: Tensor[(396), float32], %var_1182: Tensor[(6, 11, 6), float64]) -> (Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) {
  %771 = cast(%var_1158, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %772 = shape_of(%var_1157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%var_1157, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %775 = maximum(%773, %774) /* ty=Tensor[(6, 8, 7), float32] */;
  %776 = cast(%var_1158, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="float32") /* ty=Tensor[(6, 8, 7), float32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %780 = floor_divide(%778, %779) /* ty=Tensor[(6, 8, 7), float32] */;
  %781 = cast(%780, dtype="bool") /* ty=Tensor[(6, 8, 7), bool] */;
  %782 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %783 = cast(%775, dtype="bool") /* ty=Tensor[(6, 8, 7), bool] */;
  %784 = dyn.reshape(%781, %782, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %785 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %786 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %787 = reshape(%785, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %788 = reshape(%786, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %789 = @func_457(%787, %788) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %790 = %789.1;
  %791 = cast(%var_1182, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
  %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%790, dtype="bool") /* ty=Tensor[(6, 11, 6), bool] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %795 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %796 = cast(%var_1176, dtype="float32") /* ty=Tensor[(396), float32] */;
  %797 = reshape(%795, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %798 = reshape(%796, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
  %799 = @func_457(%797, %798) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="float64") /* ty=Tensor[(6, 11, 6), float64] */;
  %802 = less_equal(%783, %784) /* ty=Tensor[(6, 8, 7), bool] */;
  %803 = greater_equal(%793, %794) /* ty=Tensor[(6, 11, 6), bool] */;
  %804 = log2(%801) /* ty=Tensor[(6, 11, 6), float64] */;
  (%802, %var_1176, %803, %804)
}

def @func_1750(%var_1748: uint64, %var_1749: Tensor[(66, 6), float32]) -> (Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) {
  @func_1746(%var_1748, %var_1749) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */
}

def @func_2735(%var_2729: bool, %var_2730: Tensor[(10, 6, 15), bool]) -> Tensor[(10, 6, 15), bool] {
  %805 = cast(%var_2729, dtype="bool") /* ty=bool */;
  %806 = cast(%var_2730, dtype="bool") /* ty=Tensor[(10, 6, 15), bool] */;
  logical_or(%805, %806) /* ty=Tensor[(10, 6, 15), bool] */
}

def @func_3061() -> (Tensor[(16, 5, 14), bool],) {
  @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_8241() -> Tensor[(16, 5, 14), bool] {
  @func_8239() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_3712(%var_3710: Tensor[(3, 132), float32], %var_3711: Tensor[(108), uint16]) -> (Tensor[(16, 5, 14), float32], Tensor[(3, 132), float32], Tensor[(13, 3, 14), float64], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16]) {
  %828 = fn (%var_3689: Tensor[(3, 132), float32], %var_3703: Tensor[(108), uint16]) -> (Tensor[(16, 5, 14), float32], Tensor[(3, 132), float32], Tensor[(13, 3, 14), float64], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16]) {
    %807 = @func_3457() /* ty=(Tensor[(16, 5, 14), float32],) */;
    %808 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %809 = cast(%var_3689, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
    %810 = reshape(%808, newshape=[]) /* ty=uint64 */;
    %811 = reshape(%809, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
    %812 = @func_1746(%810, %811) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */;
    %813 = %812.1;
    %814 = cast(%813, dtype="float64") /* ty=Tensor[(13, 3, 14), float64] */;
    %815 = cast(%813, dtype="uint8") /* ty=Tensor[(13, 3, 14), uint8] */;
    %816 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint8") /* ty=uint8 */;
    %817 = cast(meta[relay.Constant][47] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %818 = cast(%var_3703, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %819 = cast(meta[relay.Constant][47] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %820 = reshape(%817, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
    %821 = reshape(%818, newshape=[108]) /* ty=Tensor[(108), uint16] */;
    %822 = reshape(%819, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
    %823 = @func_299(%820, %821, %822) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
    %824 = %807.0;
    %825 = log2(%814) /* ty=Tensor[(13, 3, 14), float64] */;
    %826 = bitwise_xor(%815, %816) /* ty=Tensor[(13, 3, 14), uint8] */;
    %827 = %823.0;
    (%824, %var_3689, %825, %826, %827, meta[relay.Constant][47] /* ty=Tensor[(260), float64] */, %var_3703)
  };
  %828(%var_3710, %var_3711) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(3, 132), float32], Tensor[(13, 3, 14), float64], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16]) */
}

def @func_3027() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  %829 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %830 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 5, 14), float32] */, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %831 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(16, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(meta[relay.Constant][48] /* ty=Tensor[(16, 5, 14), float32] */, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %834 = sqrt(%829) /* ty=Tensor[(16, 5, 14), float32] */;
  %835 = logical_and(%832, %833) /* ty=Tensor[(16, 5, 14), bool] */;
  (%834, %835)
}

def @func_4951() -> Tensor[(16, 5, 14), bool] {
  %837 = fn () -> Tensor[(16, 5, 14), bool] {
    %836 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
    %836.2
  };
  %837() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_3029() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) {
  @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */
}

def @func_8795(%var_8793: Tensor[(260), float64]) -> (Tensor[(16, 5, 14), float64], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) {
  @func_8792(%var_8793) /* ty=(Tensor[(16, 5, 14), float64], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) */
}

def @func_7009() -> Tensor[(16, 5, 14), float32] {
  @func_7007() /* ty=Tensor[(16, 5, 14), float32] */
}

def @func_5228(%var_5227: Tensor[(16, 5, 14), float32]) -> (Tensor[(16, 5, 14), int16],) {
  %845 = fn (%var_5211: Tensor[(16, 5, 14), float32]) -> (Tensor[(16, 5, 14), int16],) {
    %838 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
    %839 = %838.0;
    %840 = cast(%var_5211, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
    %841 = shape_of(%839, dtype="int32") /* ty=Tensor[(3), int32] */;
    %842 = cast(%839, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
    %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %844 = maximum(%842, %843) /* ty=Tensor[(16, 5, 14), int16] */;
    (%844,)
  };
  %845(%var_5227) /* ty=(Tensor[(16, 5, 14), int16],) */
}

def @func_3430(%var_3426: Tensor[(130, 2), float64], %var_3427: Tensor[(108), uint16]) -> (Tensor[(16, 5, 14), float32], Tensor[(108), uint16], Tensor[(240), float32], Tensor[(130, 2), float64], Tensor[(108), uint16], Tensor[(125), uint8]) {
  %846 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %847 = %846.0;
  %848 = cast(%847, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
  %849 = cast(meta[relay.Constant][50] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %850 = cast(%var_3426, dtype="float64") /* ty=Tensor[(130, 2), float64] */;
  %851 = cast(%var_3427, dtype="uint16") /* ty=Tensor[(108), uint16] */;
  %852 = cast(meta[relay.Constant][51] /* ty=Tensor[(125), uint8] */, dtype="uint8") /* ty=Tensor[(125), uint8] */;
  %853 = reshape(%849, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %854 = reshape(%850, newshape=[260]) /* ty=Tensor[(260), float64] */;
  %855 = reshape(%851, newshape=[108]) /* ty=Tensor[(108), uint16] */;
  %856 = reshape(%852, newshape=[125]) /* ty=Tensor[(125), uint8] */;
  %857 = @func_3244(%853, %854, %855, %856) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */;
  %858 = acos(%848) /* ty=Tensor[(16, 5, 14), float32] */;
  %859 = %857.5;
  (%858, %859, meta[relay.Constant][50] /* ty=Tensor[(240), float32] */, %var_3426, %var_3427, meta[relay.Constant][51] /* ty=Tensor[(125), uint8] */)
}

def @func_6248(%var_6247: Tensor[(4, 182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(4, 182), bool]) {
  %870 = fn (%var_6239: Tensor[(4, 182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(4, 182), bool]) {
    %860 = cast(meta[relay.Constant][52] /* ty=Tensor[(192), float64] */, dtype="float64") /* ty=Tensor[(192), float64] */;
    %861 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 182), uint32] */, dtype="uint32") /* ty=Tensor[(1, 182), uint32] */;
    %862 = reshape(%860, newshape=[4, 48]) /* ty=Tensor[(4, 48), float64] */;
    %863 = reshape(%861, newshape=[182]) /* ty=Tensor[(182), uint32] */;
    %864 = @func_5593(%862, %863) /* ty=(Tensor[(16, 5, 14), float64], uint64, Tensor[(4, 48), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(16, 5, 14), bool]) */;
    %865 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 182), uint32] */, dtype="bool") /* ty=Tensor[(1, 182), bool] */;
    %866 = cast(%var_6239, dtype="bool") /* ty=Tensor[(4, 182), bool] */;
    %867 = @func_3912() /* ty=Tensor[(16, 5, 14), bool] */;
    %868 = %864.4;
    %869 = not_equal(%865, %866) /* ty=Tensor[(4, 182), bool] */;
    (%867, %868, meta[relay.Constant][52] /* ty=Tensor[(192), float64] */, %869)
  };
  %870(%var_6247) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(192), float64], Tensor[(4, 182), bool]) */
}

def @func_4858(%var_4856: Tensor[(240), float32], %var_4857: Tensor[(396), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) {
  @func_4854(%var_4856, %var_4857) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) */
}

def @func_1212(%var_1208: Tensor[(6, 8, 7), float32], %var_1209: Tensor[(6, 8, 7), float32], %var_1210: Tensor[(396), float32], %var_1211: Tensor[(6, 11, 6), float64]) -> (Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) {
  @func_1206(%var_1208, %var_1209, %var_1210, %var_1211) /* ty=(Tensor[(6, 8, 7), bool], Tensor[(396), float32], Tensor[(6, 11, 6), bool], Tensor[(6, 11, 6), float64]) */
}

def @func_2739(%var_2737: bool, %var_2738: Tensor[(10, 6, 15), bool]) -> Tensor[(10, 6, 15), bool] {
  @func_2735(%var_2737, %var_2738) /* ty=Tensor[(10, 6, 15), bool] */
}

def @func_4312() -> (Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */
}

def @func_7564() -> (Tensor[(16, 5, 14), bool],) {
  %872 = fn () -> (Tensor[(16, 5, 14), bool],) {
    %871 = @func_4407() /* ty=Tensor[(16, 5, 14), bool] */;
    (%871,)
  };
  %872() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_4854(%var_4829: Tensor[(240), float32], %var_4830: Tensor[(396), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(240), float32], Tensor[(396), bool]) {
  %873 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
  %874 = cast(%var_4829, dtype="float32") /* ty=Tensor[(240), float32] */;
  %875 = cast(%var_4830, dtype="float32") /* ty=Tensor[(396), float32] */;
  %876 = reshape(%874, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
  %877 = reshape(%875, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
  %878 = @func_2044(%876, %877) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
  %879 = %878.2;
  %880 = cast(%879, dtype="bool") /* ty=Tensor[(3, 132), bool] */;
  %881 = shape_of(%var_4830, dtype="int32") /* ty=Tensor[(1), int32] */;
  %882 = cast(%var_4830, dtype="bool") /* ty=Tensor[(396), bool] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?), bool] */;
  %884 = %873.0;
  %885 = not_equal(%882, %883) /* ty=Tensor[(396), bool] */;
  (%884, %var_4829, %885)
}

def @func_8141(%var_8138: Tensor[(108), uint16], %var_8139: Tensor[(192), float64], %var_8140: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), float64], Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(?, 396), float32], Tensor[(5148), float32], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(9, 10, 10), float32]) {
  %916 = fn (%var_8105: Tensor[(108), uint16], %var_8121: Tensor[(192), float64], %var_8122: Tensor[(182), uint32]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), float64], Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(?, 396), float32], Tensor[(5148), float32], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(9, 10, 10), float32]) {
    %886 = @func_4310() /* ty=(Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
    %887 = cast(meta[relay.Constant][54] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %888 = reshape(%887, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %889 = @func_6535(%888) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(396), float32], Tensor[(900), float32]) */;
    %890 = %889.0;
    %891 = cast(%890, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
    %892 = cast(%var_8105, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %893 = cast(%var_8105, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %894 = reshape(%892, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %895 = reshape(%893, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %896 = @func_23(%894, %895) /* ty=(Tensor[(6, 2, 9), uint16],) */;
    %897 = cast(meta[relay.Constant][55] /* ty=Tensor[(5148), float32] */, dtype="float32") /* ty=Tensor[(5148), float32] */;
    %898 = reshape(%897, newshape=[13, 396]) /* ty=Tensor[(13, 396), float32] */;
    %899 = @func_6958(%898) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(6, 4, 10), float32], Tensor[(1, 240), float32], Tensor[(13, 396), bool], Tensor[(16, 5, 14), float32], Tensor[(?, 396), float32]) */;
    %900 = cast(%var_8121, dtype="float64") /* ty=Tensor[(192), float64] */;
    %901 = cast(%var_8122, dtype="uint32") /* ty=Tensor[(182), uint32] */;
    %902 = cast(meta[relay.Constant][56] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %903 = reshape(%900, newshape=[4, 16, 3]) /* ty=Tensor[(4, 16, 3), float64] */;
    %904 = reshape(%901, newshape=[13, 14]) /* ty=Tensor[(13, 14), uint32] */;
    %905 = reshape(%902, newshape=[260]) /* ty=Tensor[(260), float64] */;
    %906 = @func_2587(%903, %904, %905) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */;
    %907 = cast(meta[relay.Constant][54] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %908 = reshape(%907, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %909 = @func_4519(%908) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(198, 2), float32], Tensor[(900), float32], Tensor[(396), float32]) */;
    %910 = %886.1;
    %911 = sigmoid(%891) /* ty=Tensor[(16, 5, 14), float64] */;
    %912 = %896.0;
    %913 = %899.5;
    %914 = %906.3;
    %915 = %909.1;
    (%910, meta[relay.Constant][54] /* ty=Tensor[(900), float32] */, %911, %912, %var_8105, %913, meta[relay.Constant][55] /* ty=Tensor[(5148), float32] */, %914, %var_8121, %var_8122, meta[relay.Constant][56] /* ty=Tensor[(260), float64] */, %915)
  };
  %916(%var_8138, %var_8139, %var_8140) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(16, 5, 14), float64], Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(?, 396), float32], Tensor[(5148), float32], Tensor[(260), float64], Tensor[(192), float64], Tensor[(182), uint32], Tensor[(260), float64], Tensor[(9, 10, 10), float32]) */
}

def @func_8434() -> (Tensor[(16, 5, 14), bool],) {
  %918 = fn () -> (Tensor[(16, 5, 14), bool],) {
    %917 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
    (%917,)
  };
  %918() /* ty=(Tensor[(16, 5, 14), bool],) */
}

def @func_2591(%var_2588: Tensor[(4, 16, 3), float64], %var_2589: Tensor[(13, 14), uint32], %var_2590: Tensor[(260), float64]) -> (Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) {
  %957 = fn (%var_2527: Tensor[(4, 16, 3), float64], %var_2534: Tensor[(13, 14), uint32], %var_2551: Tensor[(260), float64]) -> (Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) {
    %919 = cast(%var_2527, dtype="float64") /* ty=Tensor[(4, 16, 3), float64] */;
    %920 = cast(%var_2534, dtype="uint32") /* ty=Tensor[(13, 14), uint32] */;
    %921 = cast(%var_2534, dtype="uint32") /* ty=Tensor[(13, 14), uint32] */;
    %922 = reshape(%920, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
    %923 = reshape(%921, newshape=[7, 2, 13]) /* ty=Tensor[(7, 2, 13), uint32] */;
    %924 = @func_1603(%922, %923) /* ty=(Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) */;
    %925 = %924.1;
    %926 = cast(%925, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %927 = cast(%var_2551, dtype="float64") /* ty=Tensor[(260), float64] */;
    %928 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 36), uint16] */, dtype="uint16") /* ty=Tensor[(3, 36), uint16] */;
    %929 = cast(%var_2551, dtype="float64") /* ty=Tensor[(260), float64] */;
    %930 = reshape(%927, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
    %931 = reshape(%928, newshape=[108]) /* ty=Tensor[(108), uint16] */;
    %932 = reshape(%929, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
    %933 = @func_299(%930, %931, %932) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
    %934 = %933.0;
    %935 = cast(%934, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
    %936 = cast(meta[relay.Constant][58] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %937 = log(%926) /* ty=Tensor[(6, 11, 6), float32] */;
    %938 = cast(%937, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %939 = reshape(%936, newshape=[]) /* ty=uint64 */;
    %940 = reshape(%938, newshape=[66, 6]) /* ty=Tensor[(66, 6), float32] */;
    %941 = @func_1746(%939, %940) /* ty=(Tensor[(13, 3, 14), bool], Tensor[(13, 3, 14), uint8], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(1, 108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(66, 6), float32]) */;
    %942 = cast(%925, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %943 = cast(%937, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %944 = reshape(%942, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %945 = reshape(%943, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %946 = @func_457(%944, %945) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
    %947 = cast(%934, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
    %948 = cast(%934, dtype="uint16") /* ty=Tensor[(6, 2, 9), uint16] */;
    %949 = reshape(%947, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %950 = reshape(%948, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), uint16] */;
    %951 = @func_23(%949, %950) /* ty=(Tensor[(6, 2, 9), uint16],) */;
    %952 = acosh(%919) /* ty=Tensor[(4, 16, 3), float64] */;
    %953 = cosh(%935) /* ty=Tensor[(6, 2, 9), float32] */;
    %954 = %941.0;
    %955 = %946.0;
    %956 = %951.0;
    (%952, %var_2534, %937, %var_2551, meta[relay.Constant][57] /* ty=Tensor[(3, 36), uint16] */, %953, %954, meta[relay.Constant][58] /* ty=uint64 */, %955, %956)
  };
  %957(%var_2588, %var_2589, %var_2590) /* ty=(Tensor[(4, 16, 3), float64], Tensor[(13, 14), uint32], Tensor[(6, 11, 6), float32], Tensor[(260), float64], Tensor[(3, 36), uint16], Tensor[(6, 2, 9), float32], Tensor[(13, 3, 14), bool], uint64, Tensor[(6, 11, 6), uint8], Tensor[(6, 2, 9), uint16]) */
}

def @func_4165() -> Tensor[(16, 5, 14), float32] {
  %959 = fn () -> Tensor[(16, 5, 14), float32] {
    %958 = @func_3647() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), float64]) */;
    %958.0
  };
  %959() /* ty=Tensor[(16, 5, 14), float32] */
}

def @func_8769(%var_8768: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(12, 3, 16), int8], Tensor[(900), float32]) {
  %968 = fn (%var_8765: Tensor[(900), float32]) -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(12, 3, 16), int8], Tensor[(900), float32]) {
    %960 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
    %961 = @func_7683() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %962 = cast(%var_8765, dtype="float32") /* ty=Tensor[(900), float32] */;
    %963 = reshape(%962, newshape=[1, 900]) /* ty=Tensor[(1, 900), float32] */;
    %964 = @func_4005(%963) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(1, 900), float32], Tensor[(12, 3, 16), int8], Tensor[(2, 288), float32]) */;
    %965 = %960.0;
    %966 = %961.0;
    %967 = %964.3;
    (%965, %966, %967, %var_8765)
  };
  %968(%var_8768) /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(12, 3, 16), int8], Tensor[(900), float32]) */
}

def @func_6126() -> Tensor[(16, 5, 14), bool] {
  %969 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %969.0
}

def @func_8486() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) {
  %974 = fn () -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) {
    %970 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %971 = @func_5165() /* ty=(Tensor[(16, 5, 14), float64],) */;
    %972 = %970.0;
    %973 = %971.0;
    (%972, %973)
  };
  %974() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), float64]) */
}

def @func_4466(%var_4461: Tensor[(240), float32], %var_4462: Tensor[(5, 52), float64], %var_4463: Tensor[(125), uint8], %var_4464: Tensor[(125), uint8], %var_4465: Tensor[(5, 52), float64]) -> (Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(240), float32], Tensor[(125), float64], Tensor[(16, 5, 14), bool], Tensor[(5, 52), bool], Tensor[(3, 36), float64], Tensor[(900), bool], bool) {
  @func_4459(%var_4461, %var_4462, %var_4463, %var_4464, %var_4465) /* ty=(Tensor[(16, 5, 14), bool], Tensor[(900), float32], Tensor[(240), float32], Tensor[(125), float64], Tensor[(16, 5, 14), bool], Tensor[(5, 52), bool], Tensor[(3, 36), float64], Tensor[(900), bool], bool) */
}

def @func_3569(%var_3567: Tensor[(12, 3, 16), float32]) -> (Tensor[(6, 11, 6), uint8], Tensor[(240), float32], Tensor[(396), float32], Tensor[(182), uint32], Tensor[(26, 7), uint32], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float64], Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) {
  @func_3566(%var_3567) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(240), float32], Tensor[(396), float32], Tensor[(182), uint32], Tensor[(26, 7), uint32], Tensor[(12, 3, 16), int8], Tensor[(12, 3, 16), float64], Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */
}

def @func_4310() -> (Tensor[(16, 5, 14), int16], Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) {
  %975 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
  %976 = %975.1;
  %977 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 5, 14), bool] */, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
  %978 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %979 = cast(%976, dtype="int16") /* ty=Tensor[(16, 5, 14), int16] */;
  %980 = dyn.reshape(%977, %978, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %981 = cast(meta[relay.Constant][59] /* ty=Tensor[(16, 5, 14), bool] */, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %982 = shape_of(%976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %983 = cast(%976, dtype="bool") /* ty=Tensor[(16, 5, 14), bool] */;
  %984 = dyn.reshape(%981, %982, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %985 = @func_4108() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %986 = add(%979, %980) /* ty=Tensor[(16, 5, 14), int16] */;
  %987 = greater(%983, %984) /* ty=Tensor[(16, 5, 14), bool] */;
  %988 = %985.0;
  (%986, %987, %988)
}

def @func_8559(%var_8547: Tensor[(8, 2, 7), float32]) -> Tensor[(8, 2, 7), float32] {
  %989 = cast(%var_8547, dtype="float32") /* ty=Tensor[(8, 2, 7), float32] */;
  tan(%989) /* ty=Tensor[(8, 2, 7), float32] */
}

def @func_6658() -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(90, 10), float32]) {
  %999 = fn () -> (Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(90, 10), float32]) {
    %990 = @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
    %991 = %990.0;
    %992 = cast(%991, dtype="float32") /* ty=Tensor[(16, 5, 14), float32] */;
    %993 = cast(meta[relay.Constant][60] /* ty=Tensor[(90, 10), float32] */, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
    %994 = reshape(%993, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
    %995 = @func_3036(%994) /* ty=(Tensor[(9, 10, 10), float32],) */;
    %996 = atan(%992) /* ty=Tensor[(16, 5, 14), float32] */;
    %997 = @func_4150() /* ty=Tensor[(16, 5, 14), bool] */;
    %998 = %995.0;
    (%996, %997, %998, meta[relay.Constant][60] /* ty=Tensor[(90, 10), float32] */)
  };
  %999() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(90, 10), float32]) */
}

def @func_1607(%var_1605: Tensor[(7, 2, 13), uint32], %var_1606: Tensor[(7, 2, 13), uint32]) -> (Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) {
  @func_1603(%var_1605, %var_1606) /* ty=(Tensor[(7, 2, 13), bool], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32]) */
}

def @func_3249(%var_3245: Tensor[(240), float32], %var_3246: Tensor[(260), float64], %var_3247: Tensor[(108), uint16], %var_3248: Tensor[(125), uint8]) -> (Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) {
  %1034 = fn (%var_3181: Tensor[(240), float32], %var_3191: Tensor[(260), float64], %var_3192: Tensor[(108), uint16], %var_3202: Tensor[(125), uint8]) -> (Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) {
    %1000 = cast(%var_3181, dtype="float32") /* ty=Tensor[(240), float32] */;
    %1001 = cast(meta[relay.Constant][61] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %1002 = reshape(%1000, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float32] */;
    %1003 = reshape(%1001, newshape=[3, 132]) /* ty=Tensor[(3, 132), float32] */;
    %1004 = @func_2044(%1002, %1003) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */;
    %1005 = cast(%var_3191, dtype="float64") /* ty=Tensor[(260), float64] */;
    %1006 = cast(%var_3192, dtype="uint16") /* ty=Tensor[(108), uint16] */;
    %1007 = cast(%var_3191, dtype="float64") /* ty=Tensor[(260), float64] */;
    %1008 = reshape(%1005, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
    %1009 = reshape(%1006, newshape=[108]) /* ty=Tensor[(108), uint16] */;
    %1010 = reshape(%1007, newshape=[2, 13, 10]) /* ty=Tensor[(2, 13, 10), float64] */;
    %1011 = @func_299(%1008, %1009, %1010) /* ty=(Tensor[(6, 2, 9), uint16], Tensor[(108), uint16], Tensor[(6, 2, 9), uint16], Tensor[(2, 13, 10), bool]) */;
    %1012 = %1004.3;
    %1013 = cast(%1012, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %1014 = cast(meta[relay.Constant][61] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %1015 = reshape(%1013, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %1016 = reshape(%1014, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %1017 = @func_457(%1015, %1016) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
    %1018 = @func_3027() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool]) */;
    %1019 = %1018.1;
    %1020 = cast(%1019, dtype="float64") /* ty=Tensor[(16, 5, 14), float64] */;
    %1021 = cast(%var_3202, dtype="uint8") /* ty=Tensor[(125), uint8] */;
    %1022 = cast(%var_3202, dtype="uint8") /* ty=Tensor[(125), uint8] */;
    %1023 = reshape(%1021, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint8] */;
    %1024 = reshape(%1022, newshape=[5, 5, 5]) /* ty=Tensor[(5, 5, 5), uint8] */;
    %1025 = @func_777(%1023, %1024) /* ty=(Tensor[(5, 5, 5), bool],) */;
    %1026 = cast(meta[relay.Constant][62] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %1027 = reshape(%1026, newshape=[9, 10, 10]) /* ty=Tensor[(9, 10, 10), float32] */;
    %1028 = @func_3036(%1027) /* ty=(Tensor[(9, 10, 10), float32],) */;
    %1029 = %1011.0;
    %1030 = %1017.0;
    %1031 = tan(%1020) /* ty=Tensor[(16, 5, 14), float64] */;
    %1032 = %1025.0;
    %1033 = %1028.0;
    (%1012, %var_3181, meta[relay.Constant][61] /* ty=Tensor[(396), float32] */, %1029, %var_3191, %var_3192, %1030, %1031, %1032, %var_3202, %1033, meta[relay.Constant][62] /* ty=Tensor[(900), float32] */)
  };
  %1034(%var_3245, %var_3246, %var_3247, %var_3248) /* ty=(Tensor[(6, 11, 6), float64], Tensor[(240), float32], Tensor[(396), float32], Tensor[(6, 2, 9), uint16], Tensor[(260), float64], Tensor[(108), uint16], Tensor[(6, 11, 6), uint8], Tensor[(16, 5, 14), float64], Tensor[(5, 5, 5), bool], Tensor[(125), uint8], Tensor[(9, 10, 10), float32], Tensor[(900), float32]) */
}

def @func_7768() -> (Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool], Tensor[(90, 10), float32]) {
  %1035 = @func_5753() /* ty=(Tensor[(16, 5, 14), bool], Tensor[(16, 5, 14), bool]) */;
  %1036 = @func_6657() /* ty=(Tensor[(16, 5, 14), float32], Tensor[(16, 5, 14), bool], Tensor[(9, 10, 10), float32], Tensor[(90, 10), float32]) */;
  %1037 = %1036.3;
  %1038 = cast(%1037, dtype="float32") /* ty=Tensor[(90, 10), float32] */;
  %1039 = %1035.0;
  %1040 = @func_3940() /* ty=Tensor[(16, 5, 14), bool] */;
  %1041 = rsqrt(%1038) /* ty=Tensor[(90, 10), float32] */;
  (%1039, %1040, %1041)
}

def @func_7816() -> (Tensor[(16, 5, 14), bool],) {
  %1042 = @func_7563() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %1043 = %1042.0;
  (%1043,)
}

def @func_5346() -> Tensor[(16, 5, 14), bool] {
  %1044 = @func_3059() /* ty=(Tensor[(16, 5, 14), bool],) */;
  %1044.0
}

def @func_7931() -> Tensor[(16, 5, 14), bool] {
  %1046 = fn () -> Tensor[(16, 5, 14), bool] {
    %1045 = @func_4973() /* ty=(Tensor[(16, 5, 14), bool],) */;
    %1045.0
  };
  %1046() /* ty=Tensor[(16, 5, 14), bool] */
}

def @func_2047(%var_2045: Tensor[(6, 4, 10), float32], %var_2046: Tensor[(3, 132), float32]) -> (Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) {
  %1061 = fn (%var_2012: Tensor[(6, 4, 10), float32], %var_2029: Tensor[(3, 132), float32]) -> (Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) {
    %1047 = cast(%var_2012, dtype="float32") /* ty=Tensor[(6, 4, 10), float32] */;
    %1048 = cast(%var_2029, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
    %1049 = cast(%var_2029, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
    %1050 = reshape(%1048, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %1051 = reshape(%1049, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %1052 = @func_457(%1050, %1051) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
    %1053 = cast(%var_2029, dtype="float32") /* ty=Tensor[(3, 132), float32] */;
    %1054 = %1052.0;
    %1055 = cast(%1054, dtype="float32") /* ty=Tensor[(6, 11, 6), float32] */;
    %1056 = reshape(%1053, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %1057 = reshape(%1055, newshape=[6, 11, 6]) /* ty=Tensor[(6, 11, 6), float32] */;
    %1058 = @func_457(%1056, %1057) /* ty=(Tensor[(6, 11, 6), uint8], Tensor[(6, 11, 6), float64]) */;
    %1059 = exp(%1047) /* ty=Tensor[(6, 4, 10), float32] */;
    %1060 = %1058.1;
    (%1059, %1054, %var_2029, %1060)
  };
  %1061(%var_2045, %var_2046) /* ty=(Tensor[(6, 4, 10), float32], Tensor[(6, 11, 6), uint8], Tensor[(3, 132), float32], Tensor[(6, 11, 6), float64]) */
}

def @func_5099(%var_5097: Tensor[(260), float64], %var_5098: Tensor[(108), uint16]) -> (Tensor[(5, 16, 11), float64], Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) {
  @func_5095(%var_5097, %var_5098) /* ty=(Tensor[(5, 16, 11), float64], Tensor[(16, 5, 14), bool], Tensor[(260), float64], Tensor[(260), float64], Tensor[(108), uint16]) */
}

def @func_4716(%var_4714: Tensor[(12, 8, 16), float64], %var_4715: Tensor[(12, 8, 16), float64]) -> (Tensor[(12, 8, 16), float64], Tensor[(12, 8, 16), bool]) {
  @func_4712(%var_4714, %var_4715) /* ty=(Tensor[(12, 8, 16), float64], Tensor[(12, 8, 16), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen118/build/output.py", line 2309, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:51:00] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

