==========mod==========
#[version = "0.0.5"]
def @func_534(%var_498: Tensor[(6, 16, 2), float64], %var_499: Tensor[(6, 16, 2), float64], %var_503: Tensor[(6, 16, 2), float64], %var_521: int8) -> (Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) {
  %0 = cast(%var_499, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %1 = shape_of(%var_498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_498, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %4 = cast(%var_503, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %5 = shape_of(%var_499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_499, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %8 = cast(%var_521, dtype="int8") /* ty=int8 */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %10 = reshape(%8, newshape=[]) /* ty=int8 */;
  %11 = reshape(%9, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %12 = @func_290(%10, %11) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %13 = floor_divide(%2, %3) /* ty=Tensor[(6, 16, 2), float64] */;
  %14 = divide(%6, %7) /* ty=Tensor[(6, 16, 2), float64] */;
  %15 = %12.0;
  (%13, %14, %15, %var_521, meta[relay.Constant][0] /* ty=Tensor[(168), int8] */)
}

def @func_4332(%var_4323: Tensor[(4, 10, 11), float32]) -> Tensor[(4, 10, 11), float64] {
  %16 = cast(%var_4323, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
  %17 = log10(%16) /* ty=Tensor[(4, 10, 11), float32] */;
  %18 = cast(%17, dtype="float64") /* ty=Tensor[(4, 10, 11), float64] */;
  tan(%18) /* ty=Tensor[(4, 10, 11), float64] */
}

def @func_5989() -> (Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) {
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 2, 11), float64] */, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %21 = rsqrt(%20) /* ty=Tensor[(1, 2, 11), float32] */;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %23 = log10(%22) /* ty=Tensor[(1, 2, 11), float64] */;
  %24 = cast(%21, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = cast(%23, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %29 = exp(%28) /* ty=Tensor[(1, 2, 11), float64] */;
  %30 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %31 = asin(%30) /* ty=Tensor[(1, 2, 11), float64] */;
  %32 = cast(%31, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %33 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%23, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %36 = not_equal(%34, %35) /* ty=Tensor[(?, 2, 11), bool] */;
  %37 = cast(%36, dtype="int8") /* ty=Tensor[(?, 2, 11), int8] */;
  %38 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%29, dtype="int8") /* ty=Tensor[(1, 2, 11), int8] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(585, 3), float64] */, dtype="float64") /* ty=Tensor[(585, 3), float64] */;
  %42 = reshape(%41, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), float64] */;
  %43 = @func_5643(%42) /* ty=(Tensor[(15, 9, 13), float64],) */;
  %44 = log(%19) /* ty=Tensor[(1, 2, 11), float64] */;
  %45 = logical_and(%26, %27) /* ty=Tensor[(?, 2, 11), bool] */;
  %46 = bitwise_xor(%39, %40) /* ty=Tensor[(?, 2, 11), int8] */;
  %47 = %43.0;
  (%44, %45, %46, %47, meta[relay.Constant][2] /* ty=Tensor[(585, 3), float64] */)
}

def @func_6353(%var_6348: Tensor[(1456), int16], %var_6349: Tensor[(13, 5), float32]) -> (Tensor[(?, 2, 11), bool], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(13, 5), float32]) {
  %48 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %49 = cast(%var_6348, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %50 = cast(%var_6348, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %51 = cast(%var_6349, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
  %52 = reshape(%49, newshape=[16, 7, 13]) /* ty=Tensor[(16, 7, 13), int16] */;
  %53 = reshape(%50, newshape=[16, 7, 13]) /* ty=Tensor[(16, 7, 13), int16] */;
  %54 = reshape(%51, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %55 = @func_2425(%52, %53, %54) /* ty=(Tensor[(16, 7, 13), int16], Tensor[(1, 13, 5), float32], Tensor[(13, 5), float32]) */;
  %56 = %48.1;
  %57 = %55.1;
  (%56, %57, %var_6348, %var_6349)
}

def @func_8059() -> (Tensor[(15, 9, 13), float64],) {
  %58 = @func_7099() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %59 = %58.0;
  (%59,)
}

def @func_8332(%var_8309: Tensor[(9, 12, 3), float64], %var_8310: Tensor[(9, 12, 3), float64], %var_8315: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64],) {
  %60 = cast(%var_8310, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %61 = shape_of(%var_8309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%var_8309, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %64 = mod(%62, %63) /* ty=Tensor[(9, 12, 3), float64] */;
  %65 = cast(%var_8315, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %66 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%64, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %69 = add(%67, %68) /* ty=Tensor[(9, 12, 3), float64] */;
  (%69,)
}

def @func_9090() -> Tensor[(5, 2, 11), float64] {
  %70 = @func_8259() /* ty=(Tensor[(5, 2, 11), bool],) */;
  %71 = %70.0;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(5, 2, 11), float64] */;
  acos(%72) /* ty=Tensor[(5, 2, 11), float64] */
}

def @func_3342(%var_3338: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, 1), float64],) {
  %73 = cast(%var_3338, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
  %74 = acosh(%73) /* ty=Tensor[(10, 8, 1), float64] */;
  (%74,)
}

def @func_5810(%var_5779: Tensor[(7, 15, 14), float64], %var_5783: Tensor[(65), float32], %var_5801: Tensor[(8, 70), int16], %var_5802: Tensor[(525), int64]) -> (Tensor[(7, 15, 14), float64], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(10, 8, 7), bool], Tensor[(8, 70), int16], Tensor[(525), int64], Tensor[(240), int16]) {
  %75 = cast(%var_5779, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %76 = cast(%var_5783, dtype="float32") /* ty=Tensor[(65), float32] */;
  %77 = reshape(%76, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %78 = @func_480(%77) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %79 = cast(%var_5801, dtype="int16") /* ty=Tensor[(8, 70), int16] */;
  %80 = cast(%var_5801, dtype="int16") /* ty=Tensor[(8, 70), int16] */;
  %81 = cast(%var_5802, dtype="int64") /* ty=Tensor[(525), int64] */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(240), int16] */, dtype="int16") /* ty=Tensor[(240), int16] */;
  %83 = cast(%var_5801, dtype="float64") /* ty=Tensor[(8, 70), float64] */;
  %84 = reshape(%79, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), int16] */;
  %85 = reshape(%80, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), int16] */;
  %86 = reshape(%81, newshape=[525]) /* ty=Tensor[(525), int64] */;
  %87 = reshape(%82, newshape=[240]) /* ty=Tensor[(240), int16] */;
  %88 = reshape(%83, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float64] */;
  %89 = @func_3056(%84, %85, %86, %87, %88) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(312, 2), float64], Tensor[(5, 7, 15), int64], Tensor[(525), int64], Tensor[(16, ?, 6), float32], Tensor[(240), int16], Tensor[(96), float64], int8, Tensor[(10, 8, 7), float32], Tensor[(10, 8, 7), bool], Tensor[(1, 13, 5), float32], Tensor[(65), float32]) */;
  %90 = cos(%75) /* ty=Tensor[(7, 15, 14), float64] */;
  %91 = %78.0;
  %92 = %89.9;
  (%90, %91, %var_5783, %92, %var_5801, %var_5802, meta[relay.Constant][3] /* ty=Tensor[(240), int16] */)
}

def @func_6316() -> (Tensor[(?, 2, 11), int8],) {
  %93 = @func_6245() /* ty=Tensor[(?, 2, 11), int8] */;
  (%93,)
}

def @func_6698(%var_6676: Tensor[(16, 8, 9), bool], %var_6677: Tensor[(16, 8, 9), bool]) -> (Tensor[(16, 8, 9), bool], Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(5, 12, 2), float32]) {
  %94 = cast(%var_6677, dtype="bool") /* ty=Tensor[(16, 8, 9), bool] */;
  %95 = shape_of(%var_6676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %96 = cast(%var_6676, dtype="bool") /* ty=Tensor[(16, 8, 9), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %98 = @func_6516() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %100 = reshape(%99, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), float32] */;
  %101 = @func_3984(%100) /* ty=(Tensor[(5, 12, 2), float32],) */;
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %103 = reshape(%102, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %104 = @func_3342(%103) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %105 = %101.0;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(5, 12, 2), float32] */;
  %107 = reshape(%106, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), float32] */;
  %108 = @func_3984(%107) /* ty=(Tensor[(5, 12, 2), float32],) */;
  %109 = logical_or(%96, %97) /* ty=Tensor[(16, 8, 9), bool] */;
  %110 = %98.0;
  %111 = %104.0;
  %112 = %108.0;
  (%109, %110, %105, meta[relay.Constant][4] /* ty=Tensor[(120), float32] */, %111, meta[relay.Constant][5] /* ty=Tensor[(80), float64] */, %112)
}

def @func_7427() -> (Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), int8]) {
  %113 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %114 = @func_6367() /* ty=Tensor[(?, 2, 11), float32] */;
  %115 = %113.0;
  (%114, %115)
}

def @func_8967() -> (Tensor[(?, 2, 11), int8], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(54, 26), float32], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(65), float32]) {
  %116 = @func_6061() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %117 = cast(meta[relay.Constant][6] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %119 = reshape(%117, newshape=[]) /* ty=int8 */;
  %120 = reshape(%118, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %121 = @func_290(%119, %120) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %122 = @func_8503() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */;
  %123 = cast(meta[relay.Constant][8] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %125 = reshape(%123, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
  %126 = reshape(%124, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
  %127 = @func_6353(%125, %126) /* ty=(Tensor[(?, 2, 11), bool], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(13, 5), float32]) */;
  %128 = %116.0;
  %129 = %121.0;
  %130 = %122.2;
  %131 = %127.1;
  (%128, %129, meta[relay.Constant][6] /* ty=int8 */, meta[relay.Constant][7] /* ty=Tensor[(168), int8] */, %130, %131, meta[relay.Constant][8] /* ty=Tensor[(1456), int16] */, meta[relay.Constant][9] /* ty=Tensor[(65), float32] */)
}

def @func_9199() -> (Tensor[(1, 2, 11), float32], Tensor[(1, 2, 11), float64], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) {
  %132 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %133 = %132.0;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %135 = cast(%133, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %136 = cast(meta[relay.Constant][10] /* ty=Tensor[(1188), float64] */, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %137 = reshape(%136, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), float64] */;
  %138 = @func_3553(%137) /* ty=(Tensor[(9, 11, 12), float64],) */;
  %139 = log2(%134) /* ty=Tensor[(1, 2, 11), float32] */;
  %140 = sigmoid(%135) /* ty=Tensor[(1, 2, 11), float64] */;
  %141 = %138.0;
  (%139, %140, %141, meta[relay.Constant][10] /* ty=Tensor[(1188), float64] */)
}

def @func_7790() -> Tensor[(5, 15, 4), int64] {
  @func_7185() /* ty=Tensor[(5, 15, 4), int64] */
}

def @func_6245() -> Tensor[(?, 2, 11), int8] {
  %142 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %142.0
}

def @func_6516() -> (Tensor[(?, 2, 11), int8],) {
  %143 = @func_6061() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %144 = %143.0;
  (%144,)
}

def @func_4169(%var_4126: Tensor[(13, 9, 12), float32], %var_4127: Tensor[(13, 9, 12), float32]) -> (Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) {
  %145 = cast(%var_4127, dtype="float32") /* ty=Tensor[(13, 9, 12), float32] */;
  %146 = shape_of(%var_4126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%var_4126, dtype="float32") /* ty=Tensor[(13, 9, 12), float32] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %149 = cast(%var_4127, dtype="float64") /* ty=Tensor[(13, 9, 12), float64] */;
  %150 = mod(%147, %148) /* ty=Tensor[(13, 9, 12), float32] */;
  %151 = atan(%149) /* ty=Tensor[(13, 9, 12), float64] */;
  (%150, %151)
}

def @func_6224() -> (Tensor[(?, 2, 11), int8],) {
  %152 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %153 = %152.0;
  (%153,)
}

def @func_3534(%var_3531: int8) -> (Tensor[(4, 12, 2), float64], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8]) {
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
  %155 = cast(%var_3531, dtype="int8") /* ty=int8 */;
  %156 = cast(meta[relay.Constant][12] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %157 = reshape(%155, newshape=[]) /* ty=int8 */;
  %158 = reshape(%156, newshape=[2, 3, 15]) /* ty=Tensor[(2, 3, 15), int8] */;
  %159 = @func_2523(%157, %158) /* ty=(Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) */;
  %160 = acosh(%154) /* ty=Tensor[(4, 12, 2), float64] */;
  %161 = %159.0;
  (%160, %161, %var_3531, meta[relay.Constant][12] /* ty=Tensor[(90), int8] */)
}

def @func_8891(%var_8873: Tensor[(168), int8]) -> (Tensor[(?, 2, 11), int8], Tensor[(168), int8], Tensor[(168), int8]) {
  %162 = cast(%var_8873, dtype="int8") /* ty=Tensor[(168), int8] */;
  %163 = reshape(%162, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %164 = @func_7871(%163) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(4, 24), bool], Tensor[(168), int8]) */;
  %165 = @func_8388() /* ty=Tensor[(?, 2, 11), int8] */;
  %166 = %164.2;
  (%165, %166, %var_8873)
}

def @func_5248(%var_5233: Tensor[(10, 3, 8), uint64], %var_5234: Tensor[(10, 3, 8), uint64]) -> Tensor[(10, 3, 8), bool] {
  %167 = cast(%var_5234, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %168 = shape_of(%var_5233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_5233, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%169, %170) /* ty=Tensor[(10, 3, 8), bool] */
}

def @main(%var_9358: Tensor[(14, 5, 16), float64]) -> (Tensor[(14, 5, 16), float64],) {
  %171 = cast(%var_9358, dtype="float64") /* ty=Tensor[(14, 5, 16), float64] */;
  %172 = erf(%171) /* ty=Tensor[(14, 5, 16), float64] */;
  (%172,)
}

def @func_7467(%var_7458: Tensor[(15, 7, 9), float32]) -> (Tensor[(15, 7, 9), float32],) {
  %173 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 9), float32] */;
  %174 = shape_of(%var_7458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_7458, dtype="float32") /* ty=Tensor[(15, 7, 9), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %177 = floor_divide(%175, %176) /* ty=Tensor[(15, 7, 9), float32] */;
  (%177,)
}

def @func_6367() -> Tensor[(?, 2, 11), float32] {
  %178 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %179 = %178.0;
  %180 = cast(%179, dtype="float32") /* ty=Tensor[(?, 2, 11), float32] */;
  sinh(%180) /* ty=Tensor[(?, 2, 11), float32] */
}

def @func_2899(%var_2892: Tensor[(5, 7, 15), int64]) -> (Tensor[(5, 7, 15), int64],) {
  %181 = cast(meta[relay.Constant][14] /* ty=Tensor[(5, 7, 15), int64] */, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
  %182 = shape_of(%var_2892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%var_2892, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %185 = left_shift(%183, %184) /* ty=Tensor[(5, 7, 15), int64] */;
  (%185,)
}

def @func_8259() -> (Tensor[(5, 2, 11), bool],) {
  %186 = @func_7940() /* ty=(Tensor[(5, 2, 11), bool], Tensor[(?, 2, 11), int8]) */;
  %187 = %186.0;
  (%187,)
}

def @func_8851(%var_8830: Tensor[(168), int8]) -> (Tensor[(15, 9, 13), float64], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) {
  %188 = @func_8059() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %189 = cast(%var_8830, dtype="int8") /* ty=Tensor[(168), int8] */;
  %190 = reshape(%189, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %191 = @func_7281(%190) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %192 = cast(meta[relay.Constant][15] /* ty=Tensor[(1188), float64] */, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %193 = reshape(%192, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), float64] */;
  %194 = @func_3553(%193) /* ty=(Tensor[(9, 11, 12), float64],) */;
  %195 = %188.0;
  %196 = %191.1;
  %197 = %194.0;
  (%195, %196, %var_8830, %197, meta[relay.Constant][15] /* ty=Tensor[(1188), float64] */)
}

def @func_9055(%var_9038: Tensor[(5, 2, 11), int8]) -> (Tensor[(5, 2, 11), bool],) {
  %198 = @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */;
  %199 = %198.0;
  %200 = cast(%199, dtype="bool") /* ty=Tensor[(?, 2, 11), bool] */;
  %201 = cast(%var_9038, dtype="bool") /* ty=Tensor[(5, 2, 11), bool] */;
  %202 = greater_equal(%200, %201) /* ty=Tensor[(5, 2, 11), bool] */;
  (%202,)
}

def @func_4842(%var_4833: Tensor[(16, 1, 1), uint64], %var_4834: Tensor[(16, 7, 4), uint64]) -> (Tensor[(16, 7, 4), uint64],) {
  %203 = cast(%var_4833, dtype="uint64") /* ty=Tensor[(16, 1, 1), uint64] */;
  %204 = cast(%var_4834, dtype="uint64") /* ty=Tensor[(16, 7, 4), uint64] */;
  %205 = maximum(%203, %204) /* ty=Tensor[(16, 7, 4), uint64] */;
  (%205,)
}

def @func_6271(%var_6264: Tensor[(120), float32]) -> (Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32]) {
  %206 = @func_6061() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %207 = cast(%var_6264, dtype="float32") /* ty=Tensor[(120), float32] */;
  %208 = reshape(%207, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), float32] */;
  %209 = @func_3984(%208) /* ty=(Tensor[(5, 12, 2), float32],) */;
  %210 = %206.0;
  %211 = %209.0;
  (%210, %211, %var_6264)
}

def @func_2425(%var_2405: Tensor[(16, 7, 13), int16], %var_2406: Tensor[(16, 7, 13), int16], %var_2411: Tensor[(13, 5), float32]) -> (Tensor[(16, 7, 13), int16], Tensor[(1, 13, 5), float32], Tensor[(13, 5), float32]) {
  %212 = cast(%var_2406, dtype="int16") /* ty=Tensor[(16, 7, 13), int16] */;
  %213 = shape_of(%var_2405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%var_2405, dtype="int16") /* ty=Tensor[(16, 7, 13), int16] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %216 = cast(%var_2411, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
  %217 = reshape(%216, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %218 = @func_480(%217) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %219 = left_shift(%214, %215) /* ty=Tensor[(16, 7, 13), int16] */;
  %220 = %218.0;
  (%219, %220, %var_2411)
}

def @func_6124() -> (Tensor[(?, 2, 11), int8],) {
  %221 = @func_6105() /* ty=Tensor[(?, 2, 11), int8] */;
  (%221,)
}

def @func_7576(%var_7534: Tensor[(15, 9, 13), float64]) -> (Tensor[(9, 11, 12), float64], Tensor[(594, 2), float64], Tensor[(15, 9, 13), float32]) {
  %222 = cast(meta[relay.Constant][16] /* ty=Tensor[(594, 2), float64] */, dtype="float64") /* ty=Tensor[(594, 2), float64] */;
  %223 = reshape(%222, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), float64] */;
  %224 = @func_3553(%223) /* ty=(Tensor[(9, 11, 12), float64],) */;
  %225 = @func_7099() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %226 = %225.0;
  %227 = cast(%var_7534, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %231 = logical_or(%229, %230) /* ty=Tensor[(15, 9, 13), bool] */;
  %232 = cast(%231, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %233 = %224.0;
  %234 = atan(%232) /* ty=Tensor[(15, 9, 13), float32] */;
  (%233, meta[relay.Constant][16] /* ty=Tensor[(594, 2), float64] */, %234)
}

def @func_8388() -> Tensor[(?, 2, 11), int8] {
  %235 = @func_7051() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) */;
  %235.0
}

def @func_8424(%var_8412: Tensor[(585, 3), float64]) -> Tensor[(585, 3), uint8] {
  %236 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %237 = %236.4;
  %238 = cast(%var_8412, dtype="float64") /* ty=Tensor[(585, 3), float64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(2), int32] */;
  %240 = cast(%237, dtype="float64") /* ty=Tensor[(585, 3), float64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %242 = divide(%240, %241) /* ty=Tensor[(585, 3), float64] */;
  %243 = cast(meta[relay.Constant][17] /* ty=Tensor[(585, 3), float64] */, dtype="uint8") /* ty=Tensor[(585, 3), uint8] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%242, dtype="uint8") /* ty=Tensor[(585, 3), uint8] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  subtract(%245, %246) /* ty=Tensor[(585, 3), uint8] */
}

def @func_9318(%var_9282: Tensor[(5, 6, 13), float64]) -> (Tensor[(5, 6, 13), float64], Tensor[(14, 7, 1), float64]) {
  %247 = cast(%var_9282, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
  %248 = @func_7634() /* ty=(Tensor[(14, 7, 1), float32],) */;
  %249 = %248.0;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
  %251 = sinh(%247) /* ty=Tensor[(5, 6, 13), float64] */;
  %252 = asin(%250) /* ty=Tensor[(14, 7, 1), float64] */;
  (%251, %252)
}

def @func_1808(%var_1767: Tensor[(6, 4, 10), int16], %var_1791: Tensor[(96), float64], %var_1792: int8) -> (Tensor[(6, 4, 10), bool], Tensor[(6, 4, 10), float32], Tensor[(16, ?, 6), float32], Tensor[(96), float64], int8) {
  %253 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 4, 10), int16] */, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %254 = shape_of(%var_1767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_1767, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = cast(%var_1767, dtype="float32") /* ty=Tensor[(6, 4, 10), float32] */;
  %258 = cast(%var_1791, dtype="float64") /* ty=Tensor[(96), float64] */;
  %259 = cast(%var_1792, dtype="int8") /* ty=int8 */;
  %260 = reshape(%258, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float64] */;
  %261 = reshape(%259, newshape=[]) /* ty=int8 */;
  %262 = @func_425(%260, %261) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */;
  %263 = greater(%255, %256) /* ty=Tensor[(6, 4, 10), bool] */;
  %264 = rsqrt(%257) /* ty=Tensor[(6, 4, 10), float32] */;
  %265 = %262.0;
  (%263, %264, %265, %var_1791, %var_1792)
}

def @func_3553(%var_3541: Tensor[(9, 11, 12), float64]) -> (Tensor[(9, 11, 12), float64],) {
  %266 = cast(%var_3541, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %267 = sqrt(%266) /* ty=Tensor[(9, 11, 12), float64] */;
  (%267,)
}

def @func_6838(%var_6806: Tensor[(10, 2, 11), bool], %var_6830: Tensor[(792), float64], %var_6831: Tensor[(65), float32]) -> (Tensor[(?, 2, 11), float64], Tensor[(168), int8], Tensor[(792), float64], Tensor[(65), float32], Tensor[(10, 2, 11), float64]) {
  %268 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %269 = %268.1;
  %270 = cast(%269, dtype="float64") /* ty=Tensor[(?, 2, 11), float64] */;
  %271 = cast(%var_6830, dtype="float64") /* ty=Tensor[(792), float64] */;
  %272 = cast(%var_6830, dtype="float64") /* ty=Tensor[(792), float64] */;
  %273 = cast(%var_6831, dtype="float32") /* ty=Tensor[(65), float32] */;
  %274 = reshape(%271, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), float64] */;
  %275 = reshape(%272, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), float64] */;
  %276 = reshape(%273, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %277 = @func_6401(%274, %275, %276) /* ty=(Tensor[(11, 8, 9), float64], Tensor[(168), int8], Tensor[(65), float32], Tensor[(54, 14), uint64], Tensor[(168), int8], Tensor[(4, 24), float64], int8, Tensor[(11, 8, 9), float32]) */;
  %278 = cast(%269, dtype="bool") /* ty=Tensor[(?, 2, 11), bool] */;
  %279 = cast(%var_6806, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  %280 = less(%278, %279) /* ty=Tensor[(10, 2, 11), bool] */;
  %281 = cast(%280, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %282 = shape_of(%var_6806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %283 = cast(%var_6806, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %285 = cosh(%270) /* ty=Tensor[(?, 2, 11), float64] */;
  %286 = %277.1;
  %287 = mod(%283, %284) /* ty=Tensor[(10, 2, 11), float64] */;
  (%285, %286, %var_6830, %var_6831, %287)
}

def @func_938(%var_933: Tensor[(1, 9, 5), int16], %var_934: Tensor[(12, 9, 5), int16]) -> Tensor[(12, 9, 5), bool] {
  %288 = cast(%var_933, dtype="bool") /* ty=Tensor[(1, 9, 5), bool] */;
  %289 = cast(%var_934, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
  less(%288, %289) /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_7940() -> (Tensor[(5, 2, 11), bool], Tensor[(?, 2, 11), int8]) {
  %290 = @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="bool") /* ty=Tensor[(?, 2, 11), bool] */;
  %293 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 2, 11), int8] */, dtype="bool") /* ty=Tensor[(5, 2, 11), bool] */;
  %294 = logical_and(%292, %293) /* ty=Tensor[(5, 2, 11), bool] */;
  %295 = @func_7819() /* ty=Tensor[(?, 2, 11), int8] */;
  (%294, %295)
}

def @func_8284() -> (Tensor[(?, 2, 11), float32], Tensor[(3, 180), int16]) {
  %296 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %297 = %296.0;
  %298 = cast(%297, dtype="float32") /* ty=Tensor[(?, 2, 11), float32] */;
  %299 = @func_7950() /* ty=(Tensor[(3, 180), int16],) */;
  %300 = sin(%298) /* ty=Tensor[(?, 2, 11), float32] */;
  %301 = %299.0;
  (%300, %301)
}

def @func_3090(%var_3077: Tensor[(756), uint64], %var_3078: Tensor[(168), int8]) -> (Tensor[(16, 11), float64], int8, Tensor[(65, 1), float32], Tensor[(756), uint64], Tensor[(168), int8]) {
  %302 = cast(meta[relay.Constant][20] /* ty=Tensor[(16, 11), float64] */, dtype="float64") /* ty=Tensor[(16, 11), float64] */;
  %303 = cast(meta[relay.Constant][21] /* ty=Tensor[(65, 1), float32] */, dtype="float32") /* ty=Tensor[(65, 1), float32] */;
  %304 = cast(%var_3077, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %305 = cast(%var_3078, dtype="int8") /* ty=Tensor[(168), int8] */;
  %306 = reshape(%303, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %307 = reshape(%304, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %308 = reshape(%305, newshape=[84, 2]) /* ty=Tensor[(84, 2), int8] */;
  %309 = @func_1168(%306, %307, %308) /* ty=(Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) */;
  %310 = asin(%302) /* ty=Tensor[(16, 11), float64] */;
  %311 = %309.5;
  (%310, %311, meta[relay.Constant][21] /* ty=Tensor[(65, 1), float32] */, %var_3077, %var_3078)
}

def @func_1651(%var_1646: Tensor[(8, 16, 14), float32]) -> Tensor[(8, 16, 14), float32] {
  %312 = cast(%var_1646, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  rsqrt(%312) /* ty=Tensor[(8, 16, 14), float32] */
}

def @func_3984(%var_3975: Tensor[(5, 12, 2), float32]) -> (Tensor[(5, 12, 2), float32],) {
  %313 = cast(%var_3975, dtype="float32") /* ty=Tensor[(5, 12, 2), float32] */;
  %314 = acos(%313) /* ty=Tensor[(5, 12, 2), float32] */;
  (%314,)
}

def @func_425(%var_379: Tensor[(16, 1, 6), float64], %var_408: int8) -> (Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) {
  %315 = cast(%var_379, dtype="float64") /* ty=Tensor[(16, 1, 6), float64] */;
  %316 = erf(%315) /* ty=Tensor[(16, 1, 6), float64] */;
  %317 = cast(%var_379, dtype="float32") /* ty=Tensor[(16, 1, 6), float32] */;
  %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%316, dtype="float32") /* ty=Tensor[(16, 1, 6), float32] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %321 = cast(%var_408, dtype="int8") /* ty=int8 */;
  %322 = cast(meta[relay.Constant][22] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %323 = reshape(%321, newshape=[]) /* ty=int8 */;
  %324 = reshape(%322, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %325 = @func_290(%323, %324) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %326 = power(%319, %320) /* ty=Tensor[(16, ?, 6), float32] */;
  %327 = %325.0;
  (%326, %327, %var_408, meta[relay.Constant][22] /* ty=Tensor[(168), int8] */)
}

def @func_7767() -> Tensor[(?, 2, 11), int8] {
  @func_6245() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_7991() -> (Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) {
  %328 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %329 = @func_7950() /* ty=(Tensor[(3, 180), int16],) */;
  %330 = %328.0;
  %331 = %329.0;
  (%330, %331)
}

def @func_7688(%var_7685: Tensor[(45, 1), int16]) -> (Tensor[(?, 2, 11), int8], Tensor[(12, 9, 5), bool], Tensor[(45, 1), int16], Tensor[(540), int16]) {
  %332 = @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %333 = cast(%var_7685, dtype="int16") /* ty=Tensor[(45, 1), int16] */;
  %334 = cast(meta[relay.Constant][23] /* ty=Tensor[(540), int16] */, dtype="int16") /* ty=Tensor[(540), int16] */;
  %335 = reshape(%333, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), int16] */;
  %336 = reshape(%334, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), int16] */;
  %337 = %332.0;
  %338 = @func_938(%335, %336) /* ty=Tensor[(12, 9, 5), bool] */;
  (%337, %338, %var_7685, meta[relay.Constant][23] /* ty=Tensor[(540), int16] */)
}

def @func_6657() -> (Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) {
  %339 = cast(meta[relay.Constant][24] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %340 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 180), int16] */, dtype="int16") /* ty=Tensor[(3, 180), int16] */;
  %341 = reshape(%339, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), int16] */;
  %342 = reshape(%340, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), int16] */;
  %343 = @func_6367() /* ty=Tensor[(?, 2, 11), float32] */;
  %344 = @func_938(%341, %342) /* ty=Tensor[(12, 9, 5), bool] */;
  (%343, %344, meta[relay.Constant][24] /* ty=Tensor[(45), int16] */, meta[relay.Constant][25] /* ty=Tensor[(3, 180), int16] */)
}

def @func_1168(%var_1152: Tensor[(65), float32], %var_1155: Tensor[(756), uint64], %var_1157: Tensor[(84, 2), int8]) -> (Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) {
  %345 = cast(meta[relay.Constant][26] /* ty=Tensor[(11, 11, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 5), float32] */;
  %346 = cast(%var_1152, dtype="float32") /* ty=Tensor[(65), float32] */;
  %347 = reshape(%346, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %348 = @func_480(%347) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %349 = cast(%var_1155, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %350 = cast(%var_1155, dtype="uint64") /* ty=Tensor[(756), uint64] */;
  %351 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %352 = cast(%var_1157, dtype="int8") /* ty=Tensor[(84, 2), int8] */;
  %353 = reshape(%349, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %354 = reshape(%350, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %355 = reshape(%351, newshape=[]) /* ty=int8 */;
  %356 = reshape(%352, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %357 = @func_925(%353, %354, %355, %356) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */;
  %358 = tan(%345) /* ty=Tensor[(11, 11, 5), float32] */;
  %359 = %348.0;
  %360 = %357.3;
  (%358, %359, %var_1152, %360, %var_1155, meta[relay.Constant][27] /* ty=int8 */, %var_1157)
}

def @func_9005() -> (Tensor[(11, 2), float64],) {
  %361 = cast(meta[relay.Constant][28] /* ty=Tensor[(11, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 2), float64] */;
  %362 = sigmoid(%361) /* ty=Tensor[(11, 2), float64] */;
  (%362,)
}

def @func_6061() -> (Tensor[(?, 2, 11), int8],) {
  %363 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %364 = %363.0;
  (%364,)
}

def @func_6895(%var_6887: Tensor[(8, 2, 11), int8]) -> Tensor[(8, 2, 11), uint8] {
  %365 = @func_6862() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="uint8") /* ty=Tensor[(?, 2, 11), uint8] */;
  %368 = cast(%var_6887, dtype="uint8") /* ty=Tensor[(8, 2, 11), uint8] */;
  logical_xor(%367, %368) /* ty=Tensor[(8, 2, 11), uint8] */
}

def @func_9240() -> Tensor[(9, 15, 15), float64] {
  %369 = @func_7361() /* ty=(Tensor[(9, 15, 15), float64],) */;
  %369.0
}

def @func_7051() -> (Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) {
  %370 = @func_6516() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %371 = @func_6516() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %372 = %370.0;
  %373 = %371.0;
  (%372, %373)
}

def @func_7634() -> (Tensor[(14, 7, 1), float32],) {
  %374 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %375 = log2(%374) /* ty=Tensor[(14, 7, 1), float32] */;
  (%375,)
}

def @func_5643(%var_5636: Tensor[(15, 9, 13), float64]) -> (Tensor[(15, 9, 13), float64],) {
  %376 = cast(%var_5636, dtype="float64") /* ty=Tensor[(15, 9, 13), float64] */;
  %377 = asinh(%376) /* ty=Tensor[(15, 9, 13), float64] */;
  (%377,)
}

def @func_290(%var_266: int8, %var_267: Tensor[(8, 3, 7), int8]) -> (Tensor[(8, 3, 7), int8],) {
  %378 = cast(%var_266, dtype="int8") /* ty=int8 */;
  %379 = cast(%var_267, dtype="int8") /* ty=Tensor[(8, 3, 7), int8] */;
  %380 = bitwise_and(%378, %379) /* ty=Tensor[(8, 3, 7), int8] */;
  (%380,)
}

def @func_2243(%var_2231: Tensor[(13, 3, 16), float64]) -> (Tensor[(13, 3, 16), uint64],) {
  %381 = cast(%var_2231, dtype="float64") /* ty=Tensor[(13, 3, 16), float64] */;
  %382 = erf(%381) /* ty=Tensor[(13, 3, 16), float64] */;
  %383 = cast(%382, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
  %384 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_2231, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %387 = add(%385, %386) /* ty=Tensor[(13, 3, 16), uint64] */;
  (%387,)
}

def @func_480(%var_475: Tensor[(1, 13, 5), float32]) -> (Tensor[(1, 13, 5), float32],) {
  %388 = cast(%var_475, dtype="float32") /* ty=Tensor[(1, 13, 5), float32] */;
  %389 = erf(%388) /* ty=Tensor[(1, 13, 5), float32] */;
  (%389,)
}

def @func_6862() -> (Tensor[(?, 2, 11), int8],) {
  %390 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %391 = %390.0;
  (%391,)
}

def @func_7950() -> (Tensor[(3, 180), int16],) {
  %392 = @func_6657() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) */;
  %393 = %392.3;
  (%393,)
}

def @func_7185() -> Tensor[(5, 15, 4), int64] {
  %394 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 15, 4), int64] */, dtype="int64") /* ty=Tensor[(5, 15, 4), int64] */;
  %395 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 15, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 15, 4), int64] */, dtype="int64") /* ty=Tensor[(5, 15, 4), int64] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  left_shift(%396, %397) /* ty=Tensor[(5, 15, 4), int64] */
}

def @func_3056(%var_2977: Tensor[(10, 8, 7), int16], %var_2978: Tensor[(10, 8, 7), int16], %var_3032: Tensor[(525), int64], %var_3037: Tensor[(240), int16], %var_3041: Tensor[(10, 8, 7), float64]) -> (Tensor[(13, 3, 16), uint64], Tensor[(312, 2), float64], Tensor[(5, 7, 15), int64], Tensor[(525), int64], Tensor[(16, ?, 6), float32], Tensor[(240), int16], Tensor[(96), float64], int8, Tensor[(10, 8, 7), float32], Tensor[(10, 8, 7), bool], Tensor[(1, 13, 5), float32], Tensor[(65), float32]) {
  %398 = cast(meta[relay.Constant][32] /* ty=Tensor[(312, 2), float64] */, dtype="float64") /* ty=Tensor[(312, 2), float64] */;
  %399 = reshape(%398, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), float64] */;
  %400 = @func_2243(%399) /* ty=(Tensor[(13, 3, 16), uint64],) */;
  %401 = cast(%var_3032, dtype="int64") /* ty=Tensor[(525), int64] */;
  %402 = reshape(%401, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), int64] */;
  %403 = @func_2899(%402) /* ty=(Tensor[(5, 7, 15), int64],) */;
  %404 = cast(%var_3037, dtype="int16") /* ty=Tensor[(240), int16] */;
  %405 = cast(meta[relay.Constant][33] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %406 = cast(meta[relay.Constant][34] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %407 = reshape(%404, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), int16] */;
  %408 = reshape(%405, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %409 = reshape(%406, newshape=[]) /* ty=int8 */;
  %410 = @func_1808(%407, %408, %409) /* ty=(Tensor[(6, 4, 10), bool], Tensor[(6, 4, 10), float32], Tensor[(16, ?, 6), float32], Tensor[(96), float64], int8) */;
  %411 = cast(%var_2978, dtype="int16") /* ty=Tensor[(10, 8, 7), int16] */;
  %412 = shape_of(%var_2977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%var_2977, dtype="int16") /* ty=Tensor[(10, 8, 7), int16] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %415 = right_shift(%413, %414) /* ty=Tensor[(10, 8, 7), int16] */;
  %416 = cast(%415, dtype="float64") /* ty=Tensor[(10, 8, 7), float64] */;
  %417 = acos(%416) /* ty=Tensor[(10, 8, 7), float64] */;
  %418 = cast(%417, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %419 = cast(%var_3041, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %420 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%417, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %423 = greater_equal(%421, %422) /* ty=Tensor[(10, 8, 7), bool] */;
  %424 = cast(%415, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = cast(meta[relay.Constant][35] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %429 = reshape(%428, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %430 = @func_480(%429) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %431 = %400.0;
  %432 = %403.0;
  %433 = %410.2;
  %434 = log10(%418) /* ty=Tensor[(10, 8, 7), float32] */;
  %435 = not_equal(%426, %427) /* ty=Tensor[(10, 8, 7), bool] */;
  %436 = %430.0;
  (%431, meta[relay.Constant][32] /* ty=Tensor[(312, 2), float64] */, %432, %var_3032, %433, %var_3037, meta[relay.Constant][33] /* ty=Tensor[(96), float64] */, meta[relay.Constant][34] /* ty=int8 */, %434, %435, %436, meta[relay.Constant][35] /* ty=Tensor[(65), float32] */)
}

def @func_925(%var_882: Tensor[(9, 12, 7), uint64], %var_883: Tensor[(9, 12, 7), uint64], %var_895: int8, %var_896: Tensor[(168), int8]) -> (Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) {
  %437 = cast(%var_883, dtype="uint64") /* ty=Tensor[(9, 12, 7), uint64] */;
  %438 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%var_882, dtype="uint64") /* ty=Tensor[(9, 12, 7), uint64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %441 = logical_xor(%439, %440) /* ty=Tensor[(9, 12, 7), uint64] */;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %443 = cast(%var_895, dtype="int8") /* ty=int8 */;
  %444 = cast(%var_896, dtype="int8") /* ty=Tensor[(168), int8] */;
  %445 = reshape(%443, newshape=[]) /* ty=int8 */;
  %446 = reshape(%444, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %447 = @func_290(%445, %446) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %448 = cast(meta[relay.Constant][36] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %449 = reshape(%448, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %450 = @func_480(%449) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %451 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %452 = cast(%var_895, dtype="int8") /* ty=int8 */;
  %453 = reshape(%451, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float64] */;
  %454 = reshape(%452, newshape=[]) /* ty=int8 */;
  %455 = @func_425(%453, %454) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */;
  %456 = sigmoid(%442) /* ty=Tensor[(9, 12, 7), float64] */;
  %457 = %447.0;
  %458 = %450.0;
  %459 = %455.1;
  (%456, %457, %var_895, %var_896, %458, meta[relay.Constant][36] /* ty=Tensor[(65), float32] */, %459, meta[relay.Constant][37] /* ty=Tensor[(4, 24), float64] */)
}

def @func_8193() -> Tensor[(?, 2, 11), int8] {
  %460 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %460.0
}

def @func_2523(%var_2506: int8, %var_2507: Tensor[(2, 3, 15), int8]) -> (Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) {
  %461 = cast(%var_2506, dtype="bool") /* ty=bool */;
  %462 = cast(%var_2507, dtype="bool") /* ty=Tensor[(2, 3, 15), bool] */;
  %463 = less_equal(%461, %462) /* ty=Tensor[(2, 3, 15), bool] */;
  %464 = cast(%463, dtype="float64") /* ty=Tensor[(2, 3, 15), float64] */;
  %465 = cast(meta[relay.Constant][38] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %466 = cast(%var_2506, dtype="int8") /* ty=int8 */;
  %467 = reshape(%465, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float64] */;
  %468 = reshape(%466, newshape=[]) /* ty=int8 */;
  %469 = @func_425(%467, %468) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */;
  %470 = rsqrt(%464) /* ty=Tensor[(2, 3, 15), float64] */;
  %471 = %469.1;
  (%470, %471, meta[relay.Constant][38] /* ty=Tensor[(96), float64] */)
}

def @func_7013(%var_6936: Tensor[(525), int64], %var_6959: Tensor[(1792), float32], %var_7002: Tensor[(8, 16, 14), uint32]) -> (Tensor[(?, 2, 11), int8], Tensor[(5, 7, 15), int64], Tensor[(1792), float32], Tensor[(?, 2, 11), int8], Tensor[(525), float32], Tensor[(8, 16, 14), bool]) {
  %472 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %473 = cast(%var_6936, dtype="int64") /* ty=Tensor[(525), int64] */;
  %474 = reshape(%473, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), int64] */;
  %475 = @func_2899(%474) /* ty=(Tensor[(5, 7, 15), int64],) */;
  %476 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %477 = cast(%var_6936, dtype="float32") /* ty=Tensor[(525), float32] */;
  %478 = cast(%var_6959, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %479 = reshape(%478, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %480 = @func_1651(%479) /* ty=Tensor[(8, 16, 14), float32] */;
  %481 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 16, 14), float32] */, dtype="uint32") /* ty=Tensor[(8, 16, 14), uint32] */;
  %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%480, dtype="uint32") /* ty=Tensor[(8, 16, 14), uint32] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %485 = minimum(%483, %484) /* ty=Tensor[(8, 16, 14), uint32] */;
  %486 = cast(%var_7002, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = %472.0;
  %491 = %475.0;
  %492 = %476.2;
  %493 = cosh(%477) /* ty=Tensor[(525), float32] */;
  %494 = less_equal(%488, %489) /* ty=Tensor[(8, 16, 14), bool] */;
  (%490, %491, %var_6959, %492, %493, %494)
}

def @func_8503() -> (Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) {
  %495 = @func_6657() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) */;
  %496 = cast(meta[relay.Constant][40] /* ty=Tensor[(54, 26), float32] */, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %497 = cast(meta[relay.Constant][40] /* ty=Tensor[(54, 26), float32] */, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %498 = reshape(%496, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
  %499 = reshape(%497, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
  %500 = @func_4169(%498, %499) /* ty=(Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) */;
  %501 = %495.0;
  %502 = %500.0;
  (%501, %502, meta[relay.Constant][40] /* ty=Tensor[(54, 26), float32] */)
}

def @func_9335(%var_9324: Tensor[(13, 1, 12), int16], %var_9325: Tensor[(13, 1, 12), int16]) -> (Tensor[(13, ?, 12), int16],) {
  %503 = cast(%var_9325, dtype="int16") /* ty=Tensor[(13, 1, 12), int16] */;
  %504 = shape_of(%var_9324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_9324, dtype="int16") /* ty=Tensor[(13, 1, 12), int16] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %507 = left_shift(%505, %506) /* ty=Tensor[(13, ?, 12), int16] */;
  (%507,)
}

def @func_7722() -> (Tensor[(?, 2, 11), int8],) {
  %508 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %509 = %508.0;
  (%509,)
}

def @func_6048() -> (Tensor[(?, 2, 11), int8],) {
  %510 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %511 = %510.2;
  (%511,)
}

def @func_7819() -> Tensor[(?, 2, 11), int8] {
  %512 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %512.0
}

def @func_6401(%var_6371: Tensor[(11, 8, 9), float64], %var_6372: Tensor[(11, 8, 9), float64], %var_6381: Tensor[(65), float32]) -> (Tensor[(11, 8, 9), float64], Tensor[(168), int8], Tensor[(65), float32], Tensor[(54, 14), uint64], Tensor[(168), int8], Tensor[(4, 24), float64], int8, Tensor[(11, 8, 9), float32]) {
  %513 = cast(%var_6372, dtype="float64") /* ty=Tensor[(11, 8, 9), float64] */;
  %514 = shape_of(%var_6371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_6371, dtype="float64") /* ty=Tensor[(11, 8, 9), float64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %517 = cast(%var_6381, dtype="float32") /* ty=Tensor[(65), float32] */;
  %518 = cast(meta[relay.Constant][41] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %519 = cast(meta[relay.Constant][42] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %520 = reshape(%517, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %521 = reshape(%518, newshape=[756]) /* ty=Tensor[(756), uint64] */;
  %522 = reshape(%519, newshape=[84, 2]) /* ty=Tensor[(84, 2), int8] */;
  %523 = @func_1168(%520, %521, %522) /* ty=(Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) */;
  %524 = cast(meta[relay.Constant][41] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %525 = cast(meta[relay.Constant][41] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
  %526 = cast(meta[relay.Constant][43] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %527 = cast(meta[relay.Constant][42] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %528 = reshape(%524, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %529 = reshape(%525, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %530 = reshape(%526, newshape=[]) /* ty=int8 */;
  %531 = reshape(%527, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %532 = @func_925(%528, %529, %530, %531) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */;
  %533 = cast(%var_6372, dtype="float32") /* ty=Tensor[(11, 8, 9), float32] */;
  %534 = floor_divide(%515, %516) /* ty=Tensor[(11, 8, 9), float64] */;
  %535 = %523.3;
  %536 = %532.7;
  %537 = rsqrt(%533) /* ty=Tensor[(11, 8, 9), float32] */;
  (%534, %535, %var_6381, meta[relay.Constant][41] /* ty=Tensor[(54, 14), uint64] */, meta[relay.Constant][42] /* ty=Tensor[(168), int8] */, %536, meta[relay.Constant][43] /* ty=int8 */, %537)
}

def @func_7099() -> (Tensor[(15, 9, 13), float64],) {
  %538 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %539 = %538.3;
  (%539,)
}

def @func_6078(%var_6065: Tensor[(1, 2, 11), int8]) -> (Tensor[(?, 2, 11), uint8],) {
  %540 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %541 = %540.0;
  %542 = cast(%var_6065, dtype="uint8") /* ty=Tensor[(1, 2, 11), uint8] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="uint8") /* ty=Tensor[(?, 2, 11), uint8] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %546 = add(%544, %545) /* ty=Tensor[(?, 2, 11), uint8] */;
  (%546,)
}

def @func_7871(%var_7859: Tensor[(168), int8]) -> (Tensor[(?, 2, 11), int8], Tensor[(4, 24), bool], Tensor[(168), int8]) {
  %547 = cast(%var_7859, dtype="int8") /* ty=Tensor[(168), int8] */;
  %548 = reshape(%547, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %549 = @func_7281(%548) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %550 = @func_6245() /* ty=Tensor[(?, 2, 11), int8] */;
  %551 = %549.2;
  (%550, %551, %var_7859)
}

def @func_7361() -> (Tensor[(9, 15, 15), float64],) {
  %552 = cast(meta[relay.Constant][44] /* ty=Tensor[(9, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %553 = log2(%552) /* ty=Tensor[(9, 15, 15), float64] */;
  (%553,)
}

def @func_8919() -> (Tensor[(?, 2, 11), int8],) {
  %554 = @func_8388() /* ty=Tensor[(?, 2, 11), int8] */;
  (%554,)
}

def @func_6105() -> Tensor[(?, 2, 11), int8] {
  %555 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %555.0
}

def @func_8039(%var_8024: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), float64], Tensor[(4, 10, 11), float64], Tensor[(440), float32]) {
  %556 = cast(%var_8024, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %557 = cast(meta[relay.Constant][45] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %558 = reshape(%557, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %559 = asin(%556) /* ty=Tensor[(10, 2, 15), float64] */;
  %560 = @func_4332(%558) /* ty=Tensor[(4, 10, 11), float64] */;
  (%559, %560, meta[relay.Constant][45] /* ty=Tensor[(440), float32] */)
}

def @func_8801(%var_8534: Tensor[(54, 26), float32], %var_8580: int8, %var_8763: Tensor[(945), float32]) -> (Tensor[(54, 26), bool], Tensor[(525), int64], Tensor[(8, 224), float32], Tensor[(8, 16, 14), float32], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8], Tensor[(54, 26), int16], Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16], Tensor[(?, 2, 11), int8], Tensor[(54, 26), bool], Tensor[(54, 26), bool], Tensor[(8, 16, 14), float32], Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float64], Tensor[(54, 26), float32], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(?, 2, 11), int8], Tensor[(15, 7, 9), float32], Tensor[(945), float32], Tensor[(3, 180), int16], Tensor[(5, 15, 4), int64], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(54, 26), float32], Tensor[(8, 3, 7), int8], Tensor[(54, 26), float32], Tensor[(54, 26), float32]) {
  %561 = @func_8503() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */;
  %562 = %561.2;
  %563 = cast(%var_8534, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(2), int32] */;
  %565 = cast(%562, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %567 = cast(meta[relay.Constant][46] /* ty=Tensor[(525), int64] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %568 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 224), float32] */, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %569 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 224), float32] */, dtype="uint32") /* ty=Tensor[(8, 224), uint32] */;
  %570 = reshape(%567, newshape=[525]) /* ty=Tensor[(525), int64] */;
  %571 = reshape(%568, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %572 = reshape(%569, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), uint32] */;
  %573 = @func_7013(%570, %571, %572) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(5, 7, 15), int64], Tensor[(1792), float32], Tensor[(?, 2, 11), int8], Tensor[(525), float32], Tensor[(8, 16, 14), bool]) */;
  %574 = %573.5;
  %575 = cast(%574, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %576 = cast(%var_8580, dtype="int8") /* ty=int8 */;
  %577 = cast(meta[relay.Constant][48] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %578 = reshape(%576, newshape=[]) /* ty=int8 */;
  %579 = reshape(%577, newshape=[2, 3, 15]) /* ty=Tensor[(2, 3, 15), int8] */;
  %580 = @func_2523(%578, %579) /* ty=(Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) */;
  %581 = cast(%562, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %582 = cos(%581) /* ty=Tensor[(54, 26), float32] */;
  %583 = cast(meta[relay.Constant][49] /* ty=Tensor[(54, 26), float32] */, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%582, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %587 = left_shift(%585, %586) /* ty=Tensor[(54, 26), int16] */;
  %588 = cast(%587, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %589 = log(%588) /* ty=Tensor[(54, 26), float32] */;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %591 = sinh(%590) /* ty=Tensor[(54, 26), float64] */;
  %592 = cast(%var_8534, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(2), int32] */;
  %594 = cast(%591, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %596 = @func_7722() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %597 = @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */;
  %598 = @func_7722() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %599 = cast(%591, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %600 = acosh(%599) /* ty=Tensor[(54, 26), float64] */;
  %601 = cast(%600, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %602 = shape_of(%589, dtype="int32") /* ty=Tensor[(2), int32] */;
  %603 = cast(%589, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %605 = cast(%589, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %606 = rsqrt(%605) /* ty=Tensor[(54, 26), float64] */;
  %607 = cast(%589, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(2), int32] */;
  %609 = cast(%606, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %611 = cos(%575) /* ty=Tensor[(8, 16, 14), float32] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %613 = reshape(%612, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %614 = @func_8503() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */;
  %615 = cast(meta[relay.Constant][49] /* ty=Tensor[(54, 26), float32] */, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %616 = greater(%609, %610) /* ty=Tensor[(54, 26), bool] */;
  %617 = cast(%616, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %618 = reshape(%615, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
  %619 = reshape(%617, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
  %620 = @func_4169(%618, %619) /* ty=(Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) */;
  %621 = cast(meta[relay.Constant][49] /* ty=Tensor[(54, 26), float32] */, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %622 = shape_of(%582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %623 = cast(%582, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %625 = logical_and(%623, %624) /* ty=Tensor[(54, 26), bool] */;
  %626 = cast(%625, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %627 = shape_of(%600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %628 = cast(%600, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %630 = cast(meta[relay.Constant][50] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %631 = reshape(%630, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %632 = @func_7281(%631) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %633 = @func_7051() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) */;
  %634 = cast(%var_8763, dtype="float32") /* ty=Tensor[(945), float32] */;
  %635 = reshape(%634, newshape=[15, 7, 9]) /* ty=Tensor[(15, 7, 9), float32] */;
  %636 = @func_7467(%635) /* ty=(Tensor[(15, 7, 9), float32],) */;
  %637 = @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */;
  %638 = cast(meta[relay.Constant][50] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %639 = reshape(%638, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %640 = @func_7281(%639) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %641 = @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %642 = @func_8059() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %643 = cast(%600, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %644 = cast(%var_8580, dtype="int8") /* ty=int8 */;
  %645 = cast(meta[relay.Constant][50] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %646 = reshape(%644, newshape=[]) /* ty=int8 */;
  %647 = reshape(%645, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %648 = @func_290(%646, %647) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %649 = cast(%582, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %650 = shape_of(%600, dtype="int32") /* ty=Tensor[(2), int32] */;
  %651 = cast(%600, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %653 = logical_or(%651, %652) /* ty=Tensor[(54, 26), bool] */;
  %654 = cast(%587, dtype="uint16") /* ty=Tensor[(54, 26), uint16] */;
  %655 = shape_of(%625, dtype="int32") /* ty=Tensor[(2), int32] */;
  %656 = cast(%625, dtype="uint16") /* ty=Tensor[(54, 26), uint16] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %658 = add(%656, %657) /* ty=Tensor[(54, 26), uint16] */;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %660 = shape_of(%653, dtype="int32") /* ty=Tensor[(2), int32] */;
  %661 = cast(%653, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %663 = cast(%653, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %664 = log2(%663) /* ty=Tensor[(54, 26), float64] */;
  %665 = cast(%664, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %666 = not_equal(%565, %566) /* ty=Tensor[(54, 26), bool] */;
  %667 = %580.0;
  %668 = right_shift(%594, %595) /* ty=Tensor[(54, 26), int16] */;
  %669 = %596.0;
  %670 = %597.1;
  %671 = %598.0;
  %672 = greater_equal(%603, %604) /* ty=Tensor[(54, 26), bool] */;
  %673 = @func_1651(%613) /* ty=Tensor[(8, 16, 14), float32] */;
  %674 = @func_6367() /* ty=Tensor[(?, 2, 11), float32] */;
  %675 = %614.0;
  %676 = %620.1;
  %677 = divide(%628, %629) /* ty=Tensor[(54, 26), float32] */;
  %678 = %632.1;
  %679 = %633.1;
  %680 = %636.0;
  %681 = %637.1;
  %682 = %640.0;
  %683 = %641.0;
  %684 = %642.0;
  %685 = tan(%643) /* ty=Tensor[(54, 26), float32] */;
  %686 = %648.0;
  %687 = power(%661, %662) /* ty=Tensor[(54, 26), float32] */;
  %688 = log10(%665) /* ty=Tensor[(54, 26), float32] */;
  (%666, meta[relay.Constant][46] /* ty=Tensor[(525), int64] */, meta[relay.Constant][47] /* ty=Tensor[(8, 224), float32] */, %611, %667, %var_8580, meta[relay.Constant][48] /* ty=Tensor[(90), int8] */, %668, %669, %670, %671, %672, %616, %673, %674, %675, %676, %677, %678, meta[relay.Constant][50] /* ty=Tensor[(168), int8] */, %679, %680, %var_8763, %681, %682, %683, %684, %685, %686, %687, %688)
}

def @func_7281(%var_7263: Tensor[(6, 28), int8]) -> (Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) {
  %689 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 84), uint64] */, dtype="uint64") /* ty=Tensor[(9, 84), uint64] */;
  %690 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 84), uint64] */, dtype="uint64") /* ty=Tensor[(9, 84), uint64] */;
  %691 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %692 = cast(%var_7263, dtype="int8") /* ty=Tensor[(6, 28), int8] */;
  %693 = reshape(%689, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %694 = reshape(%690, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %695 = reshape(%691, newshape=[]) /* ty=int8 */;
  %696 = reshape(%692, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %697 = @func_925(%693, %694, %695, %696) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */;
  %698 = %697.7;
  %699 = cast(%698, dtype="bool") /* ty=Tensor[(4, 24), bool] */;
  %700 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %701 = cast(%var_7263, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
  %702 = @func_7185() /* ty=Tensor[(5, 15, 4), int64] */;
  %703 = less(%699, %700) /* ty=Tensor[(4, 24), bool] */;
  %704 = atan(%701) /* ty=Tensor[(6, 28), float64] */;
  (%702, meta[relay.Constant][51] /* ty=Tensor[(9, 84), uint64] */, %703, %704)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7791() -> Tensor[(5, 15, 4), int64] {
  %0 = fn () -> Tensor[(5, 15, 4), int64] {
    @func_7185() /* ty=Tensor[(5, 15, 4), int64] */
  };
  %0() /* ty=Tensor[(5, 15, 4), int64] */
}

def @func_4172(%var_4170: Tensor[(13, 9, 12), float32], %var_4171: Tensor[(13, 9, 12), float32]) -> (Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) {
  %8 = fn (%var_4126: Tensor[(13, 9, 12), float32], %var_4127: Tensor[(13, 9, 12), float32]) -> (Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) {
    %1 = cast(%var_4127, dtype="float32") /* ty=Tensor[(13, 9, 12), float32] */;
    %2 = shape_of(%var_4126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_4126, dtype="float32") /* ty=Tensor[(13, 9, 12), float32] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %5 = cast(%var_4127, dtype="float64") /* ty=Tensor[(13, 9, 12), float64] */;
    %6 = mod(%3, %4) /* ty=Tensor[(13, 9, 12), float32] */;
    %7 = atan(%5) /* ty=Tensor[(13, 9, 12), float64] */;
    (%6, %7)
  };
  %8(%var_4170, %var_4171) /* ty=(Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) */
}

def @func_7018(%var_7015: Tensor[(525), int64], %var_7016: Tensor[(1792), float32], %var_7017: Tensor[(8, 16, 14), uint32]) -> (Tensor[(?, 2, 11), int8], Tensor[(5, 7, 15), int64], Tensor[(1792), float32], Tensor[(?, 2, 11), int8], Tensor[(525), float32], Tensor[(8, 16, 14), bool]) {
  @func_7013(%var_7015, %var_7016, %var_7017) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(5, 7, 15), int64], Tensor[(1792), float32], Tensor[(?, 2, 11), int8], Tensor[(525), float32], Tensor[(8, 16, 14), bool]) */
}

def @func_6048() -> (Tensor[(?, 2, 11), int8],) {
  %9 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %10 = %9.2;
  (%10,)
}

def @func_8195() -> Tensor[(?, 2, 11), int8] {
  @func_8193() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_6078(%var_6065: Tensor[(1, 2, 11), int8]) -> (Tensor[(?, 2, 11), uint8],) {
  %11 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %12 = %11.0;
  %13 = cast(%var_6065, dtype="uint8") /* ty=Tensor[(1, 2, 11), uint8] */;
  %14 = shape_of(%12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%12, dtype="uint8") /* ty=Tensor[(?, 2, 11), uint8] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %17 = add(%15, %16) /* ty=Tensor[(?, 2, 11), uint8] */;
  (%17,)
}

def @func_2430(%var_2427: Tensor[(16, 7, 13), int16], %var_2428: Tensor[(16, 7, 13), int16], %var_2429: Tensor[(13, 5), float32]) -> (Tensor[(16, 7, 13), int16], Tensor[(1, 13, 5), float32], Tensor[(13, 5), float32]) {
  @func_2425(%var_2427, %var_2428, %var_2429) /* ty=(Tensor[(16, 7, 13), int16], Tensor[(1, 13, 5), float32], Tensor[(13, 5), float32]) */
}

def @func_7470(%var_7468: Tensor[(15, 7, 9), float32]) -> (Tensor[(15, 7, 9), float32],) {
  @func_7467(%var_7468) /* ty=(Tensor[(15, 7, 9), float32],) */
}

def @func_8894(%var_8892: Tensor[(168), int8]) -> (Tensor[(?, 2, 11), int8], Tensor[(168), int8], Tensor[(168), int8]) {
  @func_8891(%var_8892) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(168), int8], Tensor[(168), int8]) */
}

def @func_290(%var_266: int8, %var_267: Tensor[(8, 3, 7), int8]) -> (Tensor[(8, 3, 7), int8],) {
  %18 = cast(%var_266, dtype="int8") /* ty=int8 */;
  %19 = cast(%var_267, dtype="int8") /* ty=Tensor[(8, 3, 7), int8] */;
  %20 = bitwise_and(%18, %19) /* ty=Tensor[(8, 3, 7), int8] */;
  (%20,)
}

def @func_8389() -> Tensor[(?, 2, 11), int8] {
  %22 = fn () -> Tensor[(?, 2, 11), int8] {
    %21 = @func_7051() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) */;
    %21.0
  };
  %22() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_7428() -> (Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), int8]) {
  %26 = fn () -> (Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), int8]) {
    %23 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %24 = @func_6367() /* ty=Tensor[(?, 2, 11), float32] */;
    %25 = %23.0;
    (%24, %25)
  };
  %26() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), int8]) */
}

def @func_6247() -> Tensor[(?, 2, 11), int8] {
  @func_6245() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_6698(%var_6676: Tensor[(16, 8, 9), bool], %var_6677: Tensor[(16, 8, 9), bool]) -> (Tensor[(16, 8, 9), bool], Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(5, 12, 2), float32]) {
  %27 = cast(%var_6677, dtype="bool") /* ty=Tensor[(16, 8, 9), bool] */;
  %28 = shape_of(%var_6676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_6676, dtype="bool") /* ty=Tensor[(16, 8, 9), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = @func_6516() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %32 = cast(meta[relay.Constant][0] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %33 = reshape(%32, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), float32] */;
  %34 = @func_3984(%33) /* ty=(Tensor[(5, 12, 2), float32],) */;
  %35 = cast(meta[relay.Constant][1] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %36 = reshape(%35, newshape=[10, 8, 1]) /* ty=Tensor[(10, 8, 1), float64] */;
  %37 = @func_3342(%36) /* ty=(Tensor[(10, 8, 1), float64],) */;
  %38 = %34.0;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(5, 12, 2), float32] */;
  %40 = reshape(%39, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), float32] */;
  %41 = @func_3984(%40) /* ty=(Tensor[(5, 12, 2), float32],) */;
  %42 = logical_or(%29, %30) /* ty=Tensor[(16, 8, 9), bool] */;
  %43 = %31.0;
  %44 = %37.0;
  %45 = %41.0;
  (%42, %43, %38, meta[relay.Constant][0] /* ty=Tensor[(120), float32] */, %44, meta[relay.Constant][1] /* ty=Tensor[(80), float64] */, %45)
}

def @func_4334(%var_4333: Tensor[(4, 10, 11), float32]) -> Tensor[(4, 10, 11), float64] {
  %49 = fn (%var_4323: Tensor[(4, 10, 11), float32]) -> Tensor[(4, 10, 11), float64] {
    %46 = cast(%var_4323, dtype="float32") /* ty=Tensor[(4, 10, 11), float32] */;
    %47 = log10(%46) /* ty=Tensor[(4, 10, 11), float32] */;
    %48 = cast(%47, dtype="float64") /* ty=Tensor[(4, 10, 11), float64] */;
    tan(%48) /* ty=Tensor[(4, 10, 11), float64] */
  };
  %49(%var_4333) /* ty=Tensor[(4, 10, 11), float64] */
}

def @func_8060() -> (Tensor[(15, 9, 13), float64],) {
  %52 = fn () -> (Tensor[(15, 9, 13), float64],) {
    %50 = @func_7099() /* ty=(Tensor[(15, 9, 13), float64],) */;
    %51 = %50.0;
    (%51,)
  };
  %52() /* ty=(Tensor[(15, 9, 13), float64],) */
}

def @func_6107() -> Tensor[(?, 2, 11), int8] {
  @func_6105() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_8801(%var_8534: Tensor[(54, 26), float32], %var_8580: int8, %var_8763: Tensor[(945), float32]) -> (Tensor[(54, 26), bool], Tensor[(525), int64], Tensor[(8, 224), float32], Tensor[(8, 16, 14), float32], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8], Tensor[(54, 26), int16], Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16], Tensor[(?, 2, 11), int8], Tensor[(54, 26), bool], Tensor[(54, 26), bool], Tensor[(8, 16, 14), float32], Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float64], Tensor[(54, 26), float32], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(?, 2, 11), int8], Tensor[(15, 7, 9), float32], Tensor[(945), float32], Tensor[(3, 180), int16], Tensor[(5, 15, 4), int64], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(54, 26), float32], Tensor[(8, 3, 7), int8], Tensor[(54, 26), float32], Tensor[(54, 26), float32]) {
  %53 = @func_8503() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */;
  %54 = %53.2;
  %55 = cast(%var_8534, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
  %57 = cast(%54, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(525), int64] */, dtype="int64") /* ty=Tensor[(525), int64] */;
  %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 224), float32] */, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %61 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 224), float32] */, dtype="uint32") /* ty=Tensor[(8, 224), uint32] */;
  %62 = reshape(%59, newshape=[525]) /* ty=Tensor[(525), int64] */;
  %63 = reshape(%60, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %64 = reshape(%61, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), uint32] */;
  %65 = @func_7013(%62, %63, %64) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(5, 7, 15), int64], Tensor[(1792), float32], Tensor[(?, 2, 11), int8], Tensor[(525), float32], Tensor[(8, 16, 14), bool]) */;
  %66 = %65.5;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %68 = cast(%var_8580, dtype="int8") /* ty=int8 */;
  %69 = cast(meta[relay.Constant][4] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
  %70 = reshape(%68, newshape=[]) /* ty=int8 */;
  %71 = reshape(%69, newshape=[2, 3, 15]) /* ty=Tensor[(2, 3, 15), int8] */;
  %72 = @func_2523(%70, %71) /* ty=(Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) */;
  %73 = cast(%54, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %74 = cos(%73) /* ty=Tensor[(54, 26), float32] */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(54, 26), float32] */, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(%74, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %79 = left_shift(%77, %78) /* ty=Tensor[(54, 26), int16] */;
  %80 = cast(%79, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %81 = log(%80) /* ty=Tensor[(54, 26), float32] */;
  %82 = cast(%81, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %83 = sinh(%82) /* ty=Tensor[(54, 26), float64] */;
  %84 = cast(%var_8534, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %88 = @func_7722() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %89 = @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */;
  %90 = @func_7722() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %91 = cast(%83, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %92 = acosh(%91) /* ty=Tensor[(54, 26), float64] */;
  %93 = cast(%92, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %94 = shape_of(%81, dtype="int32") /* ty=Tensor[(2), int32] */;
  %95 = cast(%81, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %97 = cast(%81, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %98 = rsqrt(%97) /* ty=Tensor[(54, 26), float64] */;
  %99 = cast(%81, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(2), int32] */;
  %101 = cast(%98, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %103 = cos(%67) /* ty=Tensor[(8, 16, 14), float32] */;
  %104 = cast(%103, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %105 = reshape(%104, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %106 = @func_8503() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */;
  %107 = cast(meta[relay.Constant][5] /* ty=Tensor[(54, 26), float32] */, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %108 = greater(%101, %102) /* ty=Tensor[(54, 26), bool] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %110 = reshape(%107, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
  %111 = reshape(%109, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
  %112 = @func_4169(%110, %111) /* ty=(Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) */;
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(54, 26), float32] */, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %114 = shape_of(%74, dtype="int32") /* ty=Tensor[(2), int32] */;
  %115 = cast(%74, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %117 = logical_and(%115, %116) /* ty=Tensor[(54, 26), bool] */;
  %118 = cast(%117, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %119 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
  %120 = cast(%92, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %123 = reshape(%122, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %124 = @func_7281(%123) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %125 = @func_7051() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) */;
  %126 = cast(%var_8763, dtype="float32") /* ty=Tensor[(945), float32] */;
  %127 = reshape(%126, newshape=[15, 7, 9]) /* ty=Tensor[(15, 7, 9), float32] */;
  %128 = @func_7467(%127) /* ty=(Tensor[(15, 7, 9), float32],) */;
  %129 = @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */;
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %131 = reshape(%130, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %132 = @func_7281(%131) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %133 = @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %134 = @func_8059() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %135 = cast(%92, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %136 = cast(%var_8580, dtype="int8") /* ty=int8 */;
  %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %138 = reshape(%136, newshape=[]) /* ty=int8 */;
  %139 = reshape(%137, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %140 = @func_290(%138, %139) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %141 = cast(%74, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %142 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
  %143 = cast(%92, dtype="bool") /* ty=Tensor[(54, 26), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %145 = logical_or(%143, %144) /* ty=Tensor[(54, 26), bool] */;
  %146 = cast(%79, dtype="uint16") /* ty=Tensor[(54, 26), uint16] */;
  %147 = shape_of(%117, dtype="int32") /* ty=Tensor[(2), int32] */;
  %148 = cast(%117, dtype="uint16") /* ty=Tensor[(54, 26), uint16] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %150 = add(%148, %149) /* ty=Tensor[(54, 26), uint16] */;
  %151 = cast(%150, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %152 = shape_of(%145, dtype="int32") /* ty=Tensor[(2), int32] */;
  %153 = cast(%145, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %155 = cast(%145, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %156 = log2(%155) /* ty=Tensor[(54, 26), float64] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %158 = not_equal(%57, %58) /* ty=Tensor[(54, 26), bool] */;
  %159 = %72.0;
  %160 = right_shift(%86, %87) /* ty=Tensor[(54, 26), int16] */;
  %161 = %88.0;
  %162 = %89.1;
  %163 = %90.0;
  %164 = greater_equal(%95, %96) /* ty=Tensor[(54, 26), bool] */;
  %165 = @func_1651(%105) /* ty=Tensor[(8, 16, 14), float32] */;
  %166 = @func_6367() /* ty=Tensor[(?, 2, 11), float32] */;
  %167 = %106.0;
  %168 = %112.1;
  %169 = divide(%120, %121) /* ty=Tensor[(54, 26), float32] */;
  %170 = %124.1;
  %171 = %125.1;
  %172 = %128.0;
  %173 = %129.1;
  %174 = %132.0;
  %175 = %133.0;
  %176 = %134.0;
  %177 = tan(%135) /* ty=Tensor[(54, 26), float32] */;
  %178 = %140.0;
  %179 = power(%153, %154) /* ty=Tensor[(54, 26), float32] */;
  %180 = log10(%157) /* ty=Tensor[(54, 26), float32] */;
  (%158, meta[relay.Constant][2] /* ty=Tensor[(525), int64] */, meta[relay.Constant][3] /* ty=Tensor[(8, 224), float32] */, %103, %159, %var_8580, meta[relay.Constant][4] /* ty=Tensor[(90), int8] */, %160, %161, %162, %163, %164, %108, %165, %166, %167, %168, %169, %170, meta[relay.Constant][6] /* ty=Tensor[(168), int8] */, %171, %172, %var_8763, %173, %174, %175, %176, %177, %178, %179, %180)
}

def @func_9055(%var_9038: Tensor[(5, 2, 11), int8]) -> (Tensor[(5, 2, 11), bool],) {
  %181 = @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */;
  %182 = %181.0;
  %183 = cast(%182, dtype="bool") /* ty=Tensor[(?, 2, 11), bool] */;
  %184 = cast(%var_9038, dtype="bool") /* ty=Tensor[(5, 2, 11), bool] */;
  %185 = greater_equal(%183, %184) /* ty=Tensor[(5, 2, 11), bool] */;
  (%185,)
}

def @func_6316() -> (Tensor[(?, 2, 11), int8],) {
  %186 = @func_6245() /* ty=Tensor[(?, 2, 11), int8] */;
  (%186,)
}

def @func_6898(%var_6896: Tensor[(8, 2, 11), int8]) -> Tensor[(8, 2, 11), uint8] {
  @func_6895(%var_6896) /* ty=Tensor[(8, 2, 11), uint8] */
}

def @func_9320(%var_9319: Tensor[(5, 6, 13), float64]) -> (Tensor[(5, 6, 13), float64], Tensor[(14, 7, 1), float64]) {
  %193 = fn (%var_9282: Tensor[(5, 6, 13), float64]) -> (Tensor[(5, 6, 13), float64], Tensor[(14, 7, 1), float64]) {
    %187 = cast(%var_9282, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
    %188 = @func_7634() /* ty=(Tensor[(14, 7, 1), float32],) */;
    %189 = %188.0;
    %190 = cast(%189, dtype="float64") /* ty=Tensor[(14, 7, 1), float64] */;
    %191 = sinh(%187) /* ty=Tensor[(5, 6, 13), float64] */;
    %192 = asin(%190) /* ty=Tensor[(14, 7, 1), float64] */;
    (%191, %192)
  };
  %193(%var_9319) /* ty=(Tensor[(5, 6, 13), float64], Tensor[(14, 7, 1), float64]) */
}

def @func_2243(%var_2231: Tensor[(13, 3, 16), float64]) -> (Tensor[(13, 3, 16), uint64],) {
  %194 = cast(%var_2231, dtype="float64") /* ty=Tensor[(13, 3, 16), float64] */;
  %195 = erf(%194) /* ty=Tensor[(13, 3, 16), float64] */;
  %196 = cast(%195, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
  %197 = shape_of(%var_2231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_2231, dtype="uint64") /* ty=Tensor[(13, 3, 16), uint64] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %200 = add(%198, %199) /* ty=Tensor[(13, 3, 16), uint64] */;
  (%200,)
}

def @func_8337(%var_8334: Tensor[(9, 12, 3), float64], %var_8335: Tensor[(9, 12, 3), float64], %var_8336: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64],) {
  @func_8332(%var_8334, %var_8335, %var_8336) /* ty=(Tensor[(9, 12, 3), float64],) */
}

def @func_7821() -> Tensor[(?, 2, 11), int8] {
  @func_7819() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_3556(%var_3554: Tensor[(9, 11, 12), float64]) -> (Tensor[(9, 11, 12), float64],) {
  @func_3553(%var_3554) /* ty=(Tensor[(9, 11, 12), float64],) */
}

def @func_8193() -> Tensor[(?, 2, 11), int8] {
  %201 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %201.0
}

def @func_6126() -> (Tensor[(?, 2, 11), int8],) {
  @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_9007() -> (Tensor[(11, 2), float64],) {
  @func_9005() /* ty=(Tensor[(11, 2), float64],) */
}

def @func_428(%var_426: Tensor[(16, 1, 6), float64], %var_427: int8) -> (Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) {
  %215 = fn (%var_379: Tensor[(16, 1, 6), float64], %var_408: int8) -> (Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) {
    %202 = cast(%var_379, dtype="float64") /* ty=Tensor[(16, 1, 6), float64] */;
    %203 = erf(%202) /* ty=Tensor[(16, 1, 6), float64] */;
    %204 = cast(%var_379, dtype="float32") /* ty=Tensor[(16, 1, 6), float32] */;
    %205 = shape_of(%203, dtype="int32") /* ty=Tensor[(3), int32] */;
    %206 = cast(%203, dtype="float32") /* ty=Tensor[(16, 1, 6), float32] */;
    %207 = dyn.reshape(%204, %205, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %208 = cast(%var_408, dtype="int8") /* ty=int8 */;
    %209 = cast(meta[relay.Constant][7] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
    %210 = reshape(%208, newshape=[]) /* ty=int8 */;
    %211 = reshape(%209, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
    %212 = @func_290(%210, %211) /* ty=(Tensor[(8, 3, 7), int8],) */;
    %213 = power(%206, %207) /* ty=Tensor[(16, ?, 6), float32] */;
    %214 = %212.0;
    (%213, %214, %var_408, meta[relay.Constant][7] /* ty=Tensor[(168), int8] */)
  };
  %215(%var_426, %var_427) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */
}

def @func_8259() -> (Tensor[(5, 2, 11), bool],) {
  %216 = @func_7940() /* ty=(Tensor[(5, 2, 11), bool], Tensor[(?, 2, 11), int8]) */;
  %217 = %216.0;
  (%217,)
}

def @func_7991() -> (Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) {
  %218 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %219 = @func_7950() /* ty=(Tensor[(3, 180), int16],) */;
  %220 = %218.0;
  %221 = %219.0;
  (%220, %221)
}

def @func_9058(%var_9056: Tensor[(5, 2, 11), int8]) -> (Tensor[(5, 2, 11), bool],) {
  @func_9055(%var_9056) /* ty=(Tensor[(5, 2, 11), bool],) */
}

def @func_7362() -> (Tensor[(9, 15, 15), float64],) {
  %224 = fn () -> (Tensor[(9, 15, 15), float64],) {
    %222 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 15, 15), float64] */, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
    %223 = log2(%222) /* ty=Tensor[(9, 15, 15), float64] */;
    (%223,)
  };
  %224() /* ty=(Tensor[(9, 15, 15), float64],) */
}

def @func_534(%var_498: Tensor[(6, 16, 2), float64], %var_499: Tensor[(6, 16, 2), float64], %var_503: Tensor[(6, 16, 2), float64], %var_521: int8) -> (Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) {
  %225 = cast(%var_499, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %226 = shape_of(%var_498, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_498, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %229 = cast(%var_503, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %230 = shape_of(%var_499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_499, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %233 = cast(%var_521, dtype="int8") /* ty=int8 */;
  %234 = cast(meta[relay.Constant][9] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
  %235 = reshape(%233, newshape=[]) /* ty=int8 */;
  %236 = reshape(%234, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %237 = @func_290(%235, %236) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %238 = floor_divide(%227, %228) /* ty=Tensor[(6, 16, 2), float64] */;
  %239 = divide(%231, %232) /* ty=Tensor[(6, 16, 2), float64] */;
  %240 = %237.0;
  (%238, %239, %240, %var_521, meta[relay.Constant][9] /* ty=Tensor[(168), int8] */)
}

def @func_6318() -> (Tensor[(?, 2, 11), int8],) {
  @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_6050() -> (Tensor[(?, 2, 11), int8],) {
  @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_540(%var_536: Tensor[(6, 16, 2), float64], %var_537: Tensor[(6, 16, 2), float64], %var_538: Tensor[(6, 16, 2), float64], %var_539: int8) -> (Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) {
  @func_534(%var_536, %var_537, %var_538, %var_539) /* ty=(Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */
}

def @func_7819() -> Tensor[(?, 2, 11), int8] {
  %241 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %241.0
}

def @func_8427(%var_8425: Tensor[(585, 3), float64]) -> Tensor[(585, 3), uint8] {
  @func_8424(%var_8425) /* ty=Tensor[(585, 3), uint8] */
}

def @func_7284(%var_7282: Tensor[(6, 28), int8]) -> (Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) {
  @func_7281(%var_7282) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */
}

def @func_6838(%var_6806: Tensor[(10, 2, 11), bool], %var_6830: Tensor[(792), float64], %var_6831: Tensor[(65), float32]) -> (Tensor[(?, 2, 11), float64], Tensor[(168), int8], Tensor[(792), float64], Tensor[(65), float32], Tensor[(10, 2, 11), float64]) {
  %242 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %243 = %242.1;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(?, 2, 11), float64] */;
  %245 = cast(%var_6830, dtype="float64") /* ty=Tensor[(792), float64] */;
  %246 = cast(%var_6830, dtype="float64") /* ty=Tensor[(792), float64] */;
  %247 = cast(%var_6831, dtype="float32") /* ty=Tensor[(65), float32] */;
  %248 = reshape(%245, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), float64] */;
  %249 = reshape(%246, newshape=[11, 8, 9]) /* ty=Tensor[(11, 8, 9), float64] */;
  %250 = reshape(%247, newshape=[65]) /* ty=Tensor[(65), float32] */;
  %251 = @func_6401(%248, %249, %250) /* ty=(Tensor[(11, 8, 9), float64], Tensor[(168), int8], Tensor[(65), float32], Tensor[(54, 14), uint64], Tensor[(168), int8], Tensor[(4, 24), float64], int8, Tensor[(11, 8, 9), float32]) */;
  %252 = cast(%243, dtype="bool") /* ty=Tensor[(?, 2, 11), bool] */;
  %253 = cast(%var_6806, dtype="bool") /* ty=Tensor[(10, 2, 11), bool] */;
  %254 = less(%252, %253) /* ty=Tensor[(10, 2, 11), bool] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %256 = shape_of(%var_6806, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_6806, dtype="float64") /* ty=Tensor[(10, 2, 11), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %259 = cosh(%244) /* ty=Tensor[(?, 2, 11), float64] */;
  %260 = %251.1;
  %261 = mod(%257, %258) /* ty=Tensor[(10, 2, 11), float64] */;
  (%259, %260, %var_6830, %var_6831, %261)
}

def @func_5816(%var_5812: Tensor[(7, 15, 14), float64], %var_5813: Tensor[(65), float32], %var_5814: Tensor[(8, 70), int16], %var_5815: Tensor[(525), int64]) -> (Tensor[(7, 15, 14), float64], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(10, 8, 7), bool], Tensor[(8, 70), int16], Tensor[(525), int64], Tensor[(240), int16]) {
  @func_5810(%var_5812, %var_5813, %var_5814, %var_5815) /* ty=(Tensor[(7, 15, 14), float64], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(10, 8, 7), bool], Tensor[(8, 70), int16], Tensor[(525), int64], Tensor[(240), int16]) */
}

def @func_6224() -> (Tensor[(?, 2, 11), int8],) {
  %262 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %263 = %262.0;
  (%263,)
}

def @func_3986(%var_3985: Tensor[(5, 12, 2), float32]) -> (Tensor[(5, 12, 2), float32],) {
  %266 = fn (%var_3975: Tensor[(5, 12, 2), float32]) -> (Tensor[(5, 12, 2), float32],) {
    %264 = cast(%var_3975, dtype="float32") /* ty=Tensor[(5, 12, 2), float32] */;
    %265 = acos(%264) /* ty=Tensor[(5, 12, 2), float32] */;
    (%265,)
  };
  %266(%var_3985) /* ty=(Tensor[(5, 12, 2), float32],) */
}

def @func_9091() -> Tensor[(5, 2, 11), float64] {
  %270 = fn () -> Tensor[(5, 2, 11), float64] {
    %267 = @func_8259() /* ty=(Tensor[(5, 2, 11), bool],) */;
    %268 = %267.0;
    %269 = cast(%268, dtype="float64") /* ty=Tensor[(5, 2, 11), float64] */;
    acos(%269) /* ty=Tensor[(5, 2, 11), float64] */
  };
  %270() /* ty=Tensor[(5, 2, 11), float64] */
}

def @func_6657() -> (Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) {
  %271 = cast(meta[relay.Constant][10] /* ty=Tensor[(45), int16] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %272 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 180), int16] */, dtype="int16") /* ty=Tensor[(3, 180), int16] */;
  %273 = reshape(%271, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), int16] */;
  %274 = reshape(%272, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), int16] */;
  %275 = @func_6367() /* ty=Tensor[(?, 2, 11), float32] */;
  %276 = @func_938(%273, %274) /* ty=Tensor[(12, 9, 5), bool] */;
  (%275, %276, meta[relay.Constant][10] /* ty=Tensor[(45), int16] */, meta[relay.Constant][11] /* ty=Tensor[(3, 180), int16] */)
}

def @main(%var_9358: Tensor[(14, 5, 16), float64]) -> (Tensor[(14, 5, 16), float64],) {
  %277 = cast(%var_9358, dtype="float64") /* ty=Tensor[(14, 5, 16), float64] */;
  %278 = erf(%277) /* ty=Tensor[(14, 5, 16), float64] */;
  (%278,)
}

def @func_941(%var_939: Tensor[(1, 9, 5), int16], %var_940: Tensor[(12, 9, 5), int16]) -> Tensor[(12, 9, 5), bool] {
  %281 = fn (%var_933: Tensor[(1, 9, 5), int16], %var_934: Tensor[(12, 9, 5), int16]) -> Tensor[(12, 9, 5), bool] {
    %279 = cast(%var_933, dtype="bool") /* ty=Tensor[(1, 9, 5), bool] */;
    %280 = cast(%var_934, dtype="bool") /* ty=Tensor[(12, 9, 5), bool] */;
    less(%279, %280) /* ty=Tensor[(12, 9, 5), bool] */
  };
  %281(%var_939, %var_940) /* ty=Tensor[(12, 9, 5), bool] */
}

def @func_6245() -> Tensor[(?, 2, 11), int8] {
  %282 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %282.0
}

def @func_5990() -> (Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) {
  %312 = fn () -> (Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) {
    %283 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
    %284 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 2, 11), float64] */, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
    %285 = rsqrt(%284) /* ty=Tensor[(1, 2, 11), float32] */;
    %286 = cast(%285, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
    %287 = log10(%286) /* ty=Tensor[(1, 2, 11), float64] */;
    %288 = cast(%285, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
    %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %290 = cast(%287, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
    %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %292 = cast(%287, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
    %293 = exp(%292) /* ty=Tensor[(1, 2, 11), float64] */;
    %294 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 2, 11), float64] */, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
    %295 = asin(%294) /* ty=Tensor[(1, 2, 11), float64] */;
    %296 = cast(%295, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
    %297 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
    %298 = cast(%287, dtype="bool") /* ty=Tensor[(1, 2, 11), bool] */;
    %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %300 = not_equal(%298, %299) /* ty=Tensor[(?, 2, 11), bool] */;
    %301 = cast(%300, dtype="int8") /* ty=Tensor[(?, 2, 11), int8] */;
    %302 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
    %303 = cast(%293, dtype="int8") /* ty=Tensor[(1, 2, 11), int8] */;
    %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %305 = cast(meta[relay.Constant][13] /* ty=Tensor[(585, 3), float64] */, dtype="float64") /* ty=Tensor[(585, 3), float64] */;
    %306 = reshape(%305, newshape=[15, 9, 13]) /* ty=Tensor[(15, 9, 13), float64] */;
    %307 = @func_5643(%306) /* ty=(Tensor[(15, 9, 13), float64],) */;
    %308 = log(%283) /* ty=Tensor[(1, 2, 11), float64] */;
    %309 = logical_and(%290, %291) /* ty=Tensor[(?, 2, 11), bool] */;
    %310 = bitwise_xor(%303, %304) /* ty=Tensor[(?, 2, 11), int8] */;
    %311 = %307.0;
    (%308, %309, %310, %311, meta[relay.Constant][13] /* ty=Tensor[(585, 3), float64] */)
  };
  %312() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */
}

def @func_9240() -> Tensor[(9, 15, 15), float64] {
  %313 = @func_7361() /* ty=(Tensor[(9, 15, 15), float64],) */;
  %313.0
}

def @func_6368() -> Tensor[(?, 2, 11), float32] {
  %317 = fn () -> Tensor[(?, 2, 11), float32] {
    %314 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(?, 2, 11), float32] */;
    sinh(%316) /* ty=Tensor[(?, 2, 11), float32] */
  };
  %317() /* ty=Tensor[(?, 2, 11), float32] */
}

def @func_7052() -> (Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) {
  %322 = fn () -> (Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) {
    %318 = @func_6516() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %319 = @func_6516() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %320 = %318.0;
    %321 = %319.0;
    (%320, %321)
  };
  %322() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(?, 2, 11), int8]) */
}

def @func_7767() -> Tensor[(?, 2, 11), int8] {
  @func_6245() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_8042(%var_8040: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), float64], Tensor[(4, 10, 11), float64], Tensor[(440), float32]) {
  @func_8039(%var_8040) /* ty=(Tensor[(10, 2, 15), float64], Tensor[(4, 10, 11), float64], Tensor[(440), float32]) */
}

def @func_1808(%var_1767: Tensor[(6, 4, 10), int16], %var_1791: Tensor[(96), float64], %var_1792: int8) -> (Tensor[(6, 4, 10), bool], Tensor[(6, 4, 10), float32], Tensor[(16, ?, 6), float32], Tensor[(96), float64], int8) {
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 4, 10), int16] */, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %324 = shape_of(%var_1767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(%var_1767, dtype="bool") /* ty=Tensor[(6, 4, 10), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = cast(%var_1767, dtype="float32") /* ty=Tensor[(6, 4, 10), float32] */;
  %328 = cast(%var_1791, dtype="float64") /* ty=Tensor[(96), float64] */;
  %329 = cast(%var_1792, dtype="int8") /* ty=int8 */;
  %330 = reshape(%328, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float64] */;
  %331 = reshape(%329, newshape=[]) /* ty=int8 */;
  %332 = @func_425(%330, %331) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */;
  %333 = greater(%325, %326) /* ty=Tensor[(6, 4, 10), bool] */;
  %334 = rsqrt(%327) /* ty=Tensor[(6, 4, 10), float32] */;
  %335 = %332.0;
  (%333, %334, %335, %var_1791, %var_1792)
}

def @func_7769() -> Tensor[(?, 2, 11), int8] {
  @func_7767() /* ty=Tensor[(?, 2, 11), int8] */
}

def @func_6843(%var_6840: Tensor[(10, 2, 11), bool], %var_6841: Tensor[(792), float64], %var_6842: Tensor[(65), float32]) -> (Tensor[(?, 2, 11), float64], Tensor[(168), int8], Tensor[(792), float64], Tensor[(65), float32], Tensor[(10, 2, 11), float64]) {
  @func_6838(%var_6840, %var_6841, %var_6842) /* ty=(Tensor[(?, 2, 11), float64], Tensor[(168), int8], Tensor[(792), float64], Tensor[(65), float32], Tensor[(10, 2, 11), float64]) */
}

def @func_3536(%var_3535: int8) -> (Tensor[(4, 12, 2), float64], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8]) {
  %344 = fn (%var_3531: int8) -> (Tensor[(4, 12, 2), float64], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8]) {
    %336 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 12, 2), float64] */;
    %337 = cast(%var_3531, dtype="int8") /* ty=int8 */;
    %338 = cast(meta[relay.Constant][16] /* ty=Tensor[(90), int8] */, dtype="int8") /* ty=Tensor[(90), int8] */;
    %339 = reshape(%337, newshape=[]) /* ty=int8 */;
    %340 = reshape(%338, newshape=[2, 3, 15]) /* ty=Tensor[(2, 3, 15), int8] */;
    %341 = @func_2523(%339, %340) /* ty=(Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) */;
    %342 = acosh(%336) /* ty=Tensor[(4, 12, 2), float64] */;
    %343 = %341.0;
    (%342, %343, %var_3531, meta[relay.Constant][16] /* ty=Tensor[(90), int8] */)
  };
  %344(%var_3535) /* ty=(Tensor[(4, 12, 2), float64], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8]) */
}

def @func_3063(%var_3058: Tensor[(10, 8, 7), int16], %var_3059: Tensor[(10, 8, 7), int16], %var_3060: Tensor[(525), int64], %var_3061: Tensor[(240), int16], %var_3062: Tensor[(10, 8, 7), float64]) -> (Tensor[(13, 3, 16), uint64], Tensor[(312, 2), float64], Tensor[(5, 7, 15), int64], Tensor[(525), int64], Tensor[(16, ?, 6), float32], Tensor[(240), int16], Tensor[(96), float64], int8, Tensor[(10, 8, 7), float32], Tensor[(10, 8, 7), bool], Tensor[(1, 13, 5), float32], Tensor[(65), float32]) {
  @func_3056(%var_3058, %var_3059, %var_3060, %var_3061, %var_3062) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(312, 2), float64], Tensor[(5, 7, 15), int64], Tensor[(525), int64], Tensor[(16, ?, 6), float32], Tensor[(240), int16], Tensor[(96), float64], int8, Tensor[(10, 8, 7), float32], Tensor[(10, 8, 7), bool], Tensor[(1, 13, 5), float32], Tensor[(65), float32]) */
}

def @func_8806(%var_8803: Tensor[(54, 26), float32], %var_8804: int8, %var_8805: Tensor[(945), float32]) -> (Tensor[(54, 26), bool], Tensor[(525), int64], Tensor[(8, 224), float32], Tensor[(8, 16, 14), float32], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8], Tensor[(54, 26), int16], Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16], Tensor[(?, 2, 11), int8], Tensor[(54, 26), bool], Tensor[(54, 26), bool], Tensor[(8, 16, 14), float32], Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float64], Tensor[(54, 26), float32], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(?, 2, 11), int8], Tensor[(15, 7, 9), float32], Tensor[(945), float32], Tensor[(3, 180), int16], Tensor[(5, 15, 4), int64], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(54, 26), float32], Tensor[(8, 3, 7), int8], Tensor[(54, 26), float32], Tensor[(54, 26), float32]) {
  @func_8801(%var_8803, %var_8804, %var_8805) /* ty=(Tensor[(54, 26), bool], Tensor[(525), int64], Tensor[(8, 224), float32], Tensor[(8, 16, 14), float32], Tensor[(2, 3, 15), float64], int8, Tensor[(90), int8], Tensor[(54, 26), int16], Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16], Tensor[(?, 2, 11), int8], Tensor[(54, 26), bool], Tensor[(54, 26), bool], Tensor[(8, 16, 14), float32], Tensor[(?, 2, 11), float32], Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float64], Tensor[(54, 26), float32], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(?, 2, 11), int8], Tensor[(15, 7, 9), float32], Tensor[(945), float32], Tensor[(3, 180), int16], Tensor[(5, 15, 4), int64], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(54, 26), float32], Tensor[(8, 3, 7), int8], Tensor[(54, 26), float32], Tensor[(54, 26), float32]) */
}

def @func_6081(%var_6079: Tensor[(1, 2, 11), int8]) -> (Tensor[(?, 2, 11), uint8],) {
  @func_6078(%var_6079) /* ty=(Tensor[(?, 2, 11), uint8],) */
}

def @func_9201() -> (Tensor[(1, 2, 11), float32], Tensor[(1, 2, 11), float64], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) {
  @func_9199() /* ty=(Tensor[(1, 2, 11), float32], Tensor[(1, 2, 11), float64], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) */
}

def @func_2246(%var_2244: Tensor[(13, 3, 16), float64]) -> (Tensor[(13, 3, 16), uint64],) {
  @func_2243(%var_2244) /* ty=(Tensor[(13, 3, 16), uint64],) */
}

def @func_3093(%var_3091: Tensor[(756), uint64], %var_3092: Tensor[(168), int8]) -> (Tensor[(16, 11), float64], int8, Tensor[(65, 1), float32], Tensor[(756), uint64], Tensor[(168), int8]) {
  %355 = fn (%var_3077: Tensor[(756), uint64], %var_3078: Tensor[(168), int8]) -> (Tensor[(16, 11), float64], int8, Tensor[(65, 1), float32], Tensor[(756), uint64], Tensor[(168), int8]) {
    %345 = cast(meta[relay.Constant][17] /* ty=Tensor[(16, 11), float64] */, dtype="float64") /* ty=Tensor[(16, 11), float64] */;
    %346 = cast(meta[relay.Constant][18] /* ty=Tensor[(65, 1), float32] */, dtype="float32") /* ty=Tensor[(65, 1), float32] */;
    %347 = cast(%var_3077, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %348 = cast(%var_3078, dtype="int8") /* ty=Tensor[(168), int8] */;
    %349 = reshape(%346, newshape=[65]) /* ty=Tensor[(65), float32] */;
    %350 = reshape(%347, newshape=[756]) /* ty=Tensor[(756), uint64] */;
    %351 = reshape(%348, newshape=[84, 2]) /* ty=Tensor[(84, 2), int8] */;
    %352 = @func_1168(%349, %350, %351) /* ty=(Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) */;
    %353 = asin(%345) /* ty=Tensor[(16, 11), float64] */;
    %354 = %352.5;
    (%353, %354, meta[relay.Constant][18] /* ty=Tensor[(65, 1), float32] */, %var_3077, %var_3078)
  };
  %355(%var_3091, %var_3092) /* ty=(Tensor[(16, 11), float64], int8, Tensor[(65, 1), float32], Tensor[(756), uint64], Tensor[(168), int8]) */
}

def @func_931(%var_927: Tensor[(9, 12, 7), uint64], %var_928: Tensor[(9, 12, 7), uint64], %var_929: int8, %var_930: Tensor[(168), int8]) -> (Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) {
  @func_925(%var_927, %var_928, %var_929, %var_930) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */
}

def @func_9199() -> (Tensor[(1, 2, 11), float32], Tensor[(1, 2, 11), float64], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) {
  %356 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="float32") /* ty=Tensor[(1, 2, 11), float32] */;
  %359 = cast(%357, dtype="float64") /* ty=Tensor[(1, 2, 11), float64] */;
  %360 = cast(meta[relay.Constant][19] /* ty=Tensor[(1188), float64] */, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %361 = reshape(%360, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), float64] */;
  %362 = @func_3553(%361) /* ty=(Tensor[(9, 11, 12), float64],) */;
  %363 = log2(%358) /* ty=Tensor[(1, 2, 11), float32] */;
  %364 = sigmoid(%359) /* ty=Tensor[(1, 2, 11), float64] */;
  %365 = %362.0;
  (%363, %364, %365, meta[relay.Constant][19] /* ty=Tensor[(1188), float64] */)
}

def @func_3553(%var_3541: Tensor[(9, 11, 12), float64]) -> (Tensor[(9, 11, 12), float64],) {
  %366 = cast(%var_3541, dtype="float64") /* ty=Tensor[(9, 11, 12), float64] */;
  %367 = sqrt(%366) /* ty=Tensor[(9, 11, 12), float64] */;
  (%367,)
}

def @func_7688(%var_7685: Tensor[(45, 1), int16]) -> (Tensor[(?, 2, 11), int8], Tensor[(12, 9, 5), bool], Tensor[(45, 1), int16], Tensor[(540), int16]) {
  %368 = @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %369 = cast(%var_7685, dtype="int16") /* ty=Tensor[(45, 1), int16] */;
  %370 = cast(meta[relay.Constant][20] /* ty=Tensor[(540), int16] */, dtype="int16") /* ty=Tensor[(540), int16] */;
  %371 = reshape(%369, newshape=[1, 9, 5]) /* ty=Tensor[(1, 9, 5), int16] */;
  %372 = reshape(%370, newshape=[12, 9, 5]) /* ty=Tensor[(12, 9, 5), int16] */;
  %373 = %368.0;
  %374 = @func_938(%371, %372) /* ty=Tensor[(12, 9, 5), bool] */;
  (%373, %374, %var_7685, meta[relay.Constant][20] /* ty=Tensor[(540), int16] */)
}

def @func_7186() -> Tensor[(5, 15, 4), int64] {
  %379 = fn () -> Tensor[(5, 15, 4), int64] {
    %375 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 15, 4), int64] */, dtype="int64") /* ty=Tensor[(5, 15, 4), int64] */;
    %376 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(5, 15, 4), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %377 = cast(meta[relay.Constant][21] /* ty=Tensor[(5, 15, 4), int64] */, dtype="int64") /* ty=Tensor[(5, 15, 4), int64] */;
    %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    left_shift(%377, %378) /* ty=Tensor[(5, 15, 4), int64] */
  };
  %379() /* ty=Tensor[(5, 15, 4), int64] */
}

def @func_8920() -> (Tensor[(?, 2, 11), int8],) {
  %381 = fn () -> (Tensor[(?, 2, 11), int8],) {
    %380 = @func_8388() /* ty=Tensor[(?, 2, 11), int8] */;
    (%380,)
  };
  %381() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_6862() -> (Tensor[(?, 2, 11), int8],) {
  %382 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %383 = %382.0;
  (%383,)
}

def @func_6124() -> (Tensor[(?, 2, 11), int8],) {
  %384 = @func_6105() /* ty=Tensor[(?, 2, 11), int8] */;
  (%384,)
}

def @func_1653(%var_1652: Tensor[(8, 16, 14), float32]) -> Tensor[(8, 16, 14), float32] {
  %386 = fn (%var_1646: Tensor[(8, 16, 14), float32]) -> Tensor[(8, 16, 14), float32] {
    %385 = cast(%var_1646, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
    rsqrt(%385) /* ty=Tensor[(8, 16, 14), float32] */
  };
  %386(%var_1652) /* ty=Tensor[(8, 16, 14), float32] */
}

def @func_8285() -> (Tensor[(?, 2, 11), float32], Tensor[(3, 180), int16]) {
  %393 = fn () -> (Tensor[(?, 2, 11), float32], Tensor[(3, 180), int16]) {
    %387 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %388 = %387.0;
    %389 = cast(%388, dtype="float32") /* ty=Tensor[(?, 2, 11), float32] */;
    %390 = @func_7950() /* ty=(Tensor[(3, 180), int16],) */;
    %391 = sin(%389) /* ty=Tensor[(?, 2, 11), float32] */;
    %392 = %390.0;
    (%391, %392)
  };
  %393() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(3, 180), int16]) */
}

def @func_7635() -> (Tensor[(14, 7, 1), float32],) {
  %396 = fn () -> (Tensor[(14, 7, 1), float32],) {
    %394 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 7, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
    %395 = log2(%394) /* ty=Tensor[(14, 7, 1), float32] */;
    (%395,)
  };
  %396() /* ty=(Tensor[(14, 7, 1), float32],) */
}

def @func_925(%var_882: Tensor[(9, 12, 7), uint64], %var_883: Tensor[(9, 12, 7), uint64], %var_895: int8, %var_896: Tensor[(168), int8]) -> (Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) {
  %397 = cast(%var_883, dtype="uint64") /* ty=Tensor[(9, 12, 7), uint64] */;
  %398 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_882, dtype="uint64") /* ty=Tensor[(9, 12, 7), uint64] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %401 = logical_xor(%399, %400) /* ty=Tensor[(9, 12, 7), uint64] */;
  %402 = cast(%401, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %403 = cast(%var_895, dtype="int8") /* ty=int8 */;
  %404 = cast(%var_896, dtype="int8") /* ty=Tensor[(168), int8] */;
  %405 = reshape(%403, newshape=[]) /* ty=int8 */;
  %406 = reshape(%404, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
  %407 = @func_290(%405, %406) /* ty=(Tensor[(8, 3, 7), int8],) */;
  %408 = cast(meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %409 = reshape(%408, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %410 = @func_480(%409) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %411 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 24), float64] */, dtype="float64") /* ty=Tensor[(4, 24), float64] */;
  %412 = cast(%var_895, dtype="int8") /* ty=int8 */;
  %413 = reshape(%411, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float64] */;
  %414 = reshape(%412, newshape=[]) /* ty=int8 */;
  %415 = @func_425(%413, %414) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */;
  %416 = sigmoid(%402) /* ty=Tensor[(9, 12, 7), float64] */;
  %417 = %407.0;
  %418 = %410.0;
  %419 = %415.1;
  (%416, %417, %var_895, %var_896, %418, meta[relay.Constant][24] /* ty=Tensor[(65), float32] */, %419, meta[relay.Constant][25] /* ty=Tensor[(4, 24), float64] */)
}

def @func_5643(%var_5636: Tensor[(15, 9, 13), float64]) -> (Tensor[(15, 9, 13), float64],) {
  %420 = cast(%var_5636, dtype="float64") /* ty=Tensor[(15, 9, 13), float64] */;
  %421 = asinh(%420) /* ty=Tensor[(15, 9, 13), float64] */;
  (%421,)
}

def @func_4845(%var_4843: Tensor[(16, 1, 1), uint64], %var_4844: Tensor[(16, 7, 4), uint64]) -> (Tensor[(16, 7, 4), uint64],) {
  %425 = fn (%var_4833: Tensor[(16, 1, 1), uint64], %var_4834: Tensor[(16, 7, 4), uint64]) -> (Tensor[(16, 7, 4), uint64],) {
    %422 = cast(%var_4833, dtype="uint64") /* ty=Tensor[(16, 1, 1), uint64] */;
    %423 = cast(%var_4834, dtype="uint64") /* ty=Tensor[(16, 7, 4), uint64] */;
    %424 = maximum(%422, %423) /* ty=Tensor[(16, 7, 4), uint64] */;
    (%424,)
  };
  %425(%var_4843, %var_4844) /* ty=(Tensor[(16, 7, 4), uint64],) */
}

def @func_8261() -> (Tensor[(5, 2, 11), bool],) {
  @func_8259() /* ty=(Tensor[(5, 2, 11), bool],) */
}

def @func_8424(%var_8412: Tensor[(585, 3), float64]) -> Tensor[(585, 3), uint8] {
  %426 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %427 = %426.4;
  %428 = cast(%var_8412, dtype="float64") /* ty=Tensor[(585, 3), float64] */;
  %429 = shape_of(%427, dtype="int32") /* ty=Tensor[(2), int32] */;
  %430 = cast(%427, dtype="float64") /* ty=Tensor[(585, 3), float64] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %432 = divide(%430, %431) /* ty=Tensor[(585, 3), float64] */;
  %433 = cast(meta[relay.Constant][26] /* ty=Tensor[(585, 3), float64] */, dtype="uint8") /* ty=Tensor[(585, 3), uint8] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(2), int32] */;
  %435 = cast(%432, dtype="uint8") /* ty=Tensor[(585, 3), uint8] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  subtract(%435, %436) /* ty=Tensor[(585, 3), uint8] */
}

def @func_7722() -> (Tensor[(?, 2, 11), int8],) {
  %437 = @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %438 = %437.0;
  (%438,)
}

def @func_7724() -> (Tensor[(?, 2, 11), int8],) {
  @func_7722() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_482(%var_481: Tensor[(1, 13, 5), float32]) -> (Tensor[(1, 13, 5), float32],) {
  %441 = fn (%var_475: Tensor[(1, 13, 5), float32]) -> (Tensor[(1, 13, 5), float32],) {
    %439 = cast(%var_475, dtype="float32") /* ty=Tensor[(1, 13, 5), float32] */;
    %440 = erf(%439) /* ty=Tensor[(1, 13, 5), float32] */;
    (%440,)
  };
  %441(%var_481) /* ty=(Tensor[(1, 13, 5), float32],) */
}

def @func_7100() -> (Tensor[(15, 9, 13), float64],) {
  %444 = fn () -> (Tensor[(15, 9, 13), float64],) {
    %442 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
    %443 = %442.3;
    (%443,)
  };
  %444() /* ty=(Tensor[(15, 9, 13), float64],) */
}

def @func_7467(%var_7458: Tensor[(15, 7, 9), float32]) -> (Tensor[(15, 7, 9), float32],) {
  %445 = cast(meta[relay.Constant][27] /* ty=Tensor[(15, 7, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 9), float32] */;
  %446 = shape_of(%var_7458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%var_7458, dtype="float32") /* ty=Tensor[(15, 7, 9), float32] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %449 = floor_divide(%447, %448) /* ty=Tensor[(15, 7, 9), float32] */;
  (%449,)
}

def @func_8968() -> (Tensor[(?, 2, 11), int8], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(54, 26), float32], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(65), float32]) {
  %466 = fn () -> (Tensor[(?, 2, 11), int8], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(54, 26), float32], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(65), float32]) {
    %450 = @func_6061() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %451 = cast(meta[relay.Constant][28] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %452 = cast(meta[relay.Constant][29] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
    %453 = reshape(%451, newshape=[]) /* ty=int8 */;
    %454 = reshape(%452, newshape=[8, 3, 7]) /* ty=Tensor[(8, 3, 7), int8] */;
    %455 = @func_290(%453, %454) /* ty=(Tensor[(8, 3, 7), int8],) */;
    %456 = @func_8503() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */;
    %457 = cast(meta[relay.Constant][30] /* ty=Tensor[(1456), int16] */, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %458 = cast(meta[relay.Constant][31] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
    %459 = reshape(%457, newshape=[1456]) /* ty=Tensor[(1456), int16] */;
    %460 = reshape(%458, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
    %461 = @func_6353(%459, %460) /* ty=(Tensor[(?, 2, 11), bool], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(13, 5), float32]) */;
    %462 = %450.0;
    %463 = %455.0;
    %464 = %456.2;
    %465 = %461.1;
    (%462, %463, meta[relay.Constant][28] /* ty=int8 */, meta[relay.Constant][29] /* ty=Tensor[(168), int8] */, %464, %465, meta[relay.Constant][30] /* ty=Tensor[(1456), int16] */, meta[relay.Constant][31] /* ty=Tensor[(65), float32] */)
  };
  %466() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(54, 26), float32], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(65), float32]) */
}

def @func_7579(%var_7577: Tensor[(15, 9, 13), float64]) -> (Tensor[(9, 11, 12), float64], Tensor[(594, 2), float64], Tensor[(15, 9, 13), float32]) {
  @func_7576(%var_7577) /* ty=(Tensor[(9, 11, 12), float64], Tensor[(594, 2), float64], Tensor[(15, 9, 13), float32]) */
}

def @func_7993() -> (Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) {
  @func_7991() /* ty=(Tensor[(?, 2, 11), int8], Tensor[(3, 180), int16]) */
}

def @func_1172(%var_1169: Tensor[(65), float32], %var_1170: Tensor[(756), uint64], %var_1171: Tensor[(84, 2), int8]) -> (Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) {
  %483 = fn (%var_1152: Tensor[(65), float32], %var_1155: Tensor[(756), uint64], %var_1157: Tensor[(84, 2), int8]) -> (Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) {
    %467 = cast(meta[relay.Constant][32] /* ty=Tensor[(11, 11, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 5), float32] */;
    %468 = cast(%var_1152, dtype="float32") /* ty=Tensor[(65), float32] */;
    %469 = reshape(%468, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
    %470 = @func_480(%469) /* ty=(Tensor[(1, 13, 5), float32],) */;
    %471 = cast(%var_1155, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %472 = cast(%var_1155, dtype="uint64") /* ty=Tensor[(756), uint64] */;
    %473 = cast(meta[relay.Constant][33] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %474 = cast(%var_1157, dtype="int8") /* ty=Tensor[(84, 2), int8] */;
    %475 = reshape(%471, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
    %476 = reshape(%472, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
    %477 = reshape(%473, newshape=[]) /* ty=int8 */;
    %478 = reshape(%474, newshape=[168]) /* ty=Tensor[(168), int8] */;
    %479 = @func_925(%475, %476, %477, %478) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */;
    %480 = tan(%467) /* ty=Tensor[(11, 11, 5), float32] */;
    %481 = %470.0;
    %482 = %479.3;
    (%480, %481, %var_1152, %482, %var_1155, meta[relay.Constant][33] /* ty=int8 */, %var_1157)
  };
  %483(%var_1169, %var_1170, %var_1171) /* ty=(Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) */
}

def @func_8851(%var_8830: Tensor[(168), int8]) -> (Tensor[(15, 9, 13), float64], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) {
  %484 = @func_8059() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %485 = cast(%var_8830, dtype="int8") /* ty=Tensor[(168), int8] */;
  %486 = reshape(%485, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
  %487 = @func_7281(%486) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
  %488 = cast(meta[relay.Constant][34] /* ty=Tensor[(1188), float64] */, dtype="float64") /* ty=Tensor[(1188), float64] */;
  %489 = reshape(%488, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), float64] */;
  %490 = @func_3553(%489) /* ty=(Tensor[(9, 11, 12), float64],) */;
  %491 = %484.0;
  %492 = %487.1;
  %493 = %490.0;
  (%491, %492, %var_8830, %493, meta[relay.Constant][34] /* ty=Tensor[(1188), float64] */)
}

def @func_6105() -> Tensor[(?, 2, 11), int8] {
  %494 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %494.0
}

def @func_6517() -> (Tensor[(?, 2, 11), int8],) {
  %497 = fn () -> (Tensor[(?, 2, 11), int8],) {
    %495 = @func_6061() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %496 = %495.0;
    (%496,)
  };
  %497() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_7873(%var_7872: Tensor[(168), int8]) -> (Tensor[(?, 2, 11), int8], Tensor[(4, 24), bool], Tensor[(168), int8]) {
  %503 = fn (%var_7859: Tensor[(168), int8]) -> (Tensor[(?, 2, 11), int8], Tensor[(4, 24), bool], Tensor[(168), int8]) {
    %498 = cast(%var_7859, dtype="int8") /* ty=Tensor[(168), int8] */;
    %499 = reshape(%498, newshape=[6, 28]) /* ty=Tensor[(6, 28), int8] */;
    %500 = @func_7281(%499) /* ty=(Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) */;
    %501 = @func_6245() /* ty=Tensor[(?, 2, 11), int8] */;
    %502 = %500.2;
    (%501, %502, %var_7859)
  };
  %503(%var_7872) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(4, 24), bool], Tensor[(168), int8]) */
}

def @func_8504() -> (Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) {
  %512 = fn () -> (Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) {
    %504 = @func_6657() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) */;
    %505 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 26), float32] */, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
    %506 = cast(meta[relay.Constant][35] /* ty=Tensor[(54, 26), float32] */, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
    %507 = reshape(%505, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
    %508 = reshape(%506, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), float32] */;
    %509 = @func_4169(%507, %508) /* ty=(Tensor[(13, 9, 12), float32], Tensor[(13, 9, 12), float64]) */;
    %510 = %504.0;
    %511 = %509.0;
    (%510, %511, meta[relay.Constant][35] /* ty=Tensor[(54, 26), float32] */)
  };
  %512() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(13, 9, 12), float32], Tensor[(54, 26), float32]) */
}

def @func_9338(%var_9336: Tensor[(13, 1, 12), int16], %var_9337: Tensor[(13, 1, 12), int16]) -> (Tensor[(13, ?, 12), int16],) {
  %518 = fn (%var_9324: Tensor[(13, 1, 12), int16], %var_9325: Tensor[(13, 1, 12), int16]) -> (Tensor[(13, ?, 12), int16],) {
    %513 = cast(%var_9325, dtype="int16") /* ty=Tensor[(13, 1, 12), int16] */;
    %514 = shape_of(%var_9324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %515 = cast(%var_9324, dtype="int16") /* ty=Tensor[(13, 1, 12), int16] */;
    %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %517 = left_shift(%515, %516) /* ty=Tensor[(13, ?, 12), int16] */;
    (%517,)
  };
  %518(%var_9336, %var_9337) /* ty=(Tensor[(13, ?, 12), int16],) */
}

def @func_5646(%var_5644: Tensor[(15, 9, 13), float64]) -> (Tensor[(15, 9, 13), float64],) {
  @func_5643(%var_5644) /* ty=(Tensor[(15, 9, 13), float64],) */
}

def @func_6062() -> (Tensor[(?, 2, 11), int8],) {
  %521 = fn () -> (Tensor[(?, 2, 11), int8],) {
    %519 = @func_6048() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %520 = %519.0;
    (%520,)
  };
  %521() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_1813(%var_1810: Tensor[(6, 4, 10), int16], %var_1811: Tensor[(96), float64], %var_1812: int8) -> (Tensor[(6, 4, 10), bool], Tensor[(6, 4, 10), float32], Tensor[(16, ?, 6), float32], Tensor[(96), float64], int8) {
  @func_1808(%var_1810, %var_1811, %var_1812) /* ty=(Tensor[(6, 4, 10), bool], Tensor[(6, 4, 10), float32], Tensor[(16, ?, 6), float32], Tensor[(96), float64], int8) */
}

def @func_8891(%var_8873: Tensor[(168), int8]) -> (Tensor[(?, 2, 11), int8], Tensor[(168), int8], Tensor[(168), int8]) {
  %522 = cast(%var_8873, dtype="int8") /* ty=Tensor[(168), int8] */;
  %523 = reshape(%522, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %524 = @func_7871(%523) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(4, 24), bool], Tensor[(168), int8]) */;
  %525 = @func_8388() /* ty=Tensor[(?, 2, 11), int8] */;
  %526 = %524.2;
  (%525, %526, %var_8873)
}

def @func_9242() -> Tensor[(9, 15, 15), float64] {
  @func_9240() /* ty=Tensor[(9, 15, 15), float64] */
}

def @func_6273(%var_6272: Tensor[(120), float32]) -> (Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32]) {
  %533 = fn (%var_6264: Tensor[(120), float32]) -> (Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32]) {
    %527 = @func_6061() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %528 = cast(%var_6264, dtype="float32") /* ty=Tensor[(120), float32] */;
    %529 = reshape(%528, newshape=[5, 12, 2]) /* ty=Tensor[(5, 12, 2), float32] */;
    %530 = @func_3984(%529) /* ty=(Tensor[(5, 12, 2), float32],) */;
    %531 = %527.0;
    %532 = %530.0;
    (%531, %532, %var_6264)
  };
  %533(%var_6272) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32]) */
}

def @func_6864() -> (Tensor[(?, 2, 11), int8],) {
  @func_6862() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_3344(%var_3343: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, 1), float64],) {
  %536 = fn (%var_3338: Tensor[(10, 8, 1), float64]) -> (Tensor[(10, 8, 1), float64],) {
    %534 = cast(%var_3338, dtype="float64") /* ty=Tensor[(10, 8, 1), float64] */;
    %535 = acosh(%534) /* ty=Tensor[(10, 8, 1), float64] */;
    (%535,)
  };
  %536(%var_3343) /* ty=(Tensor[(10, 8, 1), float64],) */
}

def @func_2901(%var_2900: Tensor[(5, 7, 15), int64]) -> (Tensor[(5, 7, 15), int64],) {
  %542 = fn (%var_2892: Tensor[(5, 7, 15), int64]) -> (Tensor[(5, 7, 15), int64],) {
    %537 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 7, 15), int64] */, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
    %538 = shape_of(%var_2892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(%var_2892, dtype="int64") /* ty=Tensor[(5, 7, 15), int64] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %541 = left_shift(%539, %540) /* ty=Tensor[(5, 7, 15), int64] */;
    (%541,)
  };
  %542(%var_2900) /* ty=(Tensor[(5, 7, 15), int64],) */
}

def @func_7941() -> (Tensor[(5, 2, 11), bool], Tensor[(?, 2, 11), int8]) {
  %549 = fn () -> (Tensor[(5, 2, 11), bool], Tensor[(?, 2, 11), int8]) {
    %543 = @func_6316() /* ty=(Tensor[(?, 2, 11), int8],) */;
    %544 = %543.0;
    %545 = cast(%544, dtype="bool") /* ty=Tensor[(?, 2, 11), bool] */;
    %546 = cast(meta[relay.Constant][37] /* ty=Tensor[(5, 2, 11), int8] */, dtype="bool") /* ty=Tensor[(5, 2, 11), bool] */;
    %547 = logical_and(%545, %546) /* ty=Tensor[(5, 2, 11), bool] */;
    %548 = @func_7819() /* ty=Tensor[(?, 2, 11), int8] */;
    (%547, %548)
  };
  %549() /* ty=(Tensor[(5, 2, 11), bool], Tensor[(?, 2, 11), int8]) */
}

def @func_8854(%var_8852: Tensor[(168), int8]) -> (Tensor[(15, 9, 13), float64], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) {
  @func_8851(%var_8852) /* ty=(Tensor[(15, 9, 13), float64], Tensor[(9, 84), uint64], Tensor[(168), int8], Tensor[(9, 11, 12), float64], Tensor[(1188), float64]) */
}

def @func_7691(%var_7689: Tensor[(45, 1), int16]) -> (Tensor[(?, 2, 11), int8], Tensor[(12, 9, 5), bool], Tensor[(45, 1), int16], Tensor[(540), int16]) {
  @func_7688(%var_7689) /* ty=(Tensor[(?, 2, 11), int8], Tensor[(12, 9, 5), bool], Tensor[(45, 1), int16], Tensor[(540), int16]) */
}

def @func_7013(%var_6936: Tensor[(525), int64], %var_6959: Tensor[(1792), float32], %var_7002: Tensor[(8, 16, 14), uint32]) -> (Tensor[(?, 2, 11), int8], Tensor[(5, 7, 15), int64], Tensor[(1792), float32], Tensor[(?, 2, 11), int8], Tensor[(525), float32], Tensor[(8, 16, 14), bool]) {
  %550 = @func_6124() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %551 = cast(%var_6936, dtype="int64") /* ty=Tensor[(525), int64] */;
  %552 = reshape(%551, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), int64] */;
  %553 = @func_2899(%552) /* ty=(Tensor[(5, 7, 15), int64],) */;
  %554 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
  %555 = cast(%var_6936, dtype="float32") /* ty=Tensor[(525), float32] */;
  %556 = cast(%var_6959, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %557 = reshape(%556, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %558 = @func_1651(%557) /* ty=Tensor[(8, 16, 14), float32] */;
  %559 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 16, 14), float32] */, dtype="uint32") /* ty=Tensor[(8, 16, 14), uint32] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="uint32") /* ty=Tensor[(8, 16, 14), uint32] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %563 = minimum(%561, %562) /* ty=Tensor[(8, 16, 14), uint32] */;
  %564 = cast(%var_7002, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%563, dtype="bool") /* ty=Tensor[(8, 16, 14), bool] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %568 = %550.0;
  %569 = %553.0;
  %570 = %554.2;
  %571 = cosh(%555) /* ty=Tensor[(525), float32] */;
  %572 = less_equal(%566, %567) /* ty=Tensor[(8, 16, 14), bool] */;
  (%568, %569, %var_6959, %570, %571, %572)
}

def @func_8039(%var_8024: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), float64], Tensor[(4, 10, 11), float64], Tensor[(440), float32]) {
  %573 = cast(%var_8024, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %574 = cast(meta[relay.Constant][39] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %575 = reshape(%574, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %576 = asin(%573) /* ty=Tensor[(10, 2, 15), float64] */;
  %577 = @func_4332(%575) /* ty=Tensor[(4, 10, 11), float64] */;
  (%576, %577, meta[relay.Constant][39] /* ty=Tensor[(440), float32] */)
}

def @func_9005() -> (Tensor[(11, 2), float64],) {
  %578 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 2), float64] */, dtype="float64") /* ty=Tensor[(11, 2), float64] */;
  %579 = sigmoid(%578) /* ty=Tensor[(11, 2), float64] */;
  (%579,)
}

def @func_7576(%var_7534: Tensor[(15, 9, 13), float64]) -> (Tensor[(9, 11, 12), float64], Tensor[(594, 2), float64], Tensor[(15, 9, 13), float32]) {
  %580 = cast(meta[relay.Constant][41] /* ty=Tensor[(594, 2), float64] */, dtype="float64") /* ty=Tensor[(594, 2), float64] */;
  %581 = reshape(%580, newshape=[9, 11, 12]) /* ty=Tensor[(9, 11, 12), float64] */;
  %582 = @func_3553(%581) /* ty=(Tensor[(9, 11, 12), float64],) */;
  %583 = @func_7099() /* ty=(Tensor[(15, 9, 13), float64],) */;
  %584 = %583.0;
  %585 = cast(%var_7534, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(15, 9, 13), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %589 = logical_or(%587, %588) /* ty=Tensor[(15, 9, 13), bool] */;
  %590 = cast(%589, dtype="float32") /* ty=Tensor[(15, 9, 13), float32] */;
  %591 = %582.0;
  %592 = atan(%590) /* ty=Tensor[(15, 9, 13), float32] */;
  (%591, meta[relay.Constant][41] /* ty=Tensor[(594, 2), float64] */, %592)
}

def @func_3056(%var_2977: Tensor[(10, 8, 7), int16], %var_2978: Tensor[(10, 8, 7), int16], %var_3032: Tensor[(525), int64], %var_3037: Tensor[(240), int16], %var_3041: Tensor[(10, 8, 7), float64]) -> (Tensor[(13, 3, 16), uint64], Tensor[(312, 2), float64], Tensor[(5, 7, 15), int64], Tensor[(525), int64], Tensor[(16, ?, 6), float32], Tensor[(240), int16], Tensor[(96), float64], int8, Tensor[(10, 8, 7), float32], Tensor[(10, 8, 7), bool], Tensor[(1, 13, 5), float32], Tensor[(65), float32]) {
  %593 = cast(meta[relay.Constant][42] /* ty=Tensor[(312, 2), float64] */, dtype="float64") /* ty=Tensor[(312, 2), float64] */;
  %594 = reshape(%593, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), float64] */;
  %595 = @func_2243(%594) /* ty=(Tensor[(13, 3, 16), uint64],) */;
  %596 = cast(%var_3032, dtype="int64") /* ty=Tensor[(525), int64] */;
  %597 = reshape(%596, newshape=[5, 7, 15]) /* ty=Tensor[(5, 7, 15), int64] */;
  %598 = @func_2899(%597) /* ty=(Tensor[(5, 7, 15), int64],) */;
  %599 = cast(%var_3037, dtype="int16") /* ty=Tensor[(240), int16] */;
  %600 = cast(meta[relay.Constant][43] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %601 = cast(meta[relay.Constant][44] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %602 = reshape(%599, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), int16] */;
  %603 = reshape(%600, newshape=[96]) /* ty=Tensor[(96), float64] */;
  %604 = reshape(%601, newshape=[]) /* ty=int8 */;
  %605 = @func_1808(%602, %603, %604) /* ty=(Tensor[(6, 4, 10), bool], Tensor[(6, 4, 10), float32], Tensor[(16, ?, 6), float32], Tensor[(96), float64], int8) */;
  %606 = cast(%var_2978, dtype="int16") /* ty=Tensor[(10, 8, 7), int16] */;
  %607 = shape_of(%var_2977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%var_2977, dtype="int16") /* ty=Tensor[(10, 8, 7), int16] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %610 = right_shift(%608, %609) /* ty=Tensor[(10, 8, 7), int16] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(10, 8, 7), float64] */;
  %612 = acos(%611) /* ty=Tensor[(10, 8, 7), float64] */;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %614 = cast(%var_3041, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %615 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%612, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %618 = greater_equal(%616, %617) /* ty=Tensor[(10, 8, 7), bool] */;
  %619 = cast(%610, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="bool") /* ty=Tensor[(10, 8, 7), bool] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %623 = cast(meta[relay.Constant][45] /* ty=Tensor[(65), float32] */, dtype="float32") /* ty=Tensor[(65), float32] */;
  %624 = reshape(%623, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %625 = @func_480(%624) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %626 = %595.0;
  %627 = %598.0;
  %628 = %605.2;
  %629 = log10(%613) /* ty=Tensor[(10, 8, 7), float32] */;
  %630 = not_equal(%621, %622) /* ty=Tensor[(10, 8, 7), bool] */;
  %631 = %625.0;
  (%626, meta[relay.Constant][42] /* ty=Tensor[(312, 2), float64] */, %627, %var_3032, %628, %var_3037, meta[relay.Constant][43] /* ty=Tensor[(96), float64] */, meta[relay.Constant][44] /* ty=int8 */, %629, %630, %631, meta[relay.Constant][45] /* ty=Tensor[(65), float32] */)
}

def @func_7281(%var_7263: Tensor[(6, 28), int8]) -> (Tensor[(5, 15, 4), int64], Tensor[(9, 84), uint64], Tensor[(4, 24), bool], Tensor[(6, 28), float64]) {
  %632 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 84), uint64] */, dtype="uint64") /* ty=Tensor[(9, 84), uint64] */;
  %633 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 84), uint64] */, dtype="uint64") /* ty=Tensor[(9, 84), uint64] */;
  %634 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %635 = cast(%var_7263, dtype="int8") /* ty=Tensor[(6, 28), int8] */;
  %636 = reshape(%632, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %637 = reshape(%633, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
  %638 = reshape(%634, newshape=[]) /* ty=int8 */;
  %639 = reshape(%635, newshape=[168]) /* ty=Tensor[(168), int8] */;
  %640 = @func_925(%636, %637, %638, %639) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */;
  %641 = %640.7;
  %642 = cast(%641, dtype="bool") /* ty=Tensor[(4, 24), bool] */;
  %643 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %644 = cast(%var_7263, dtype="float64") /* ty=Tensor[(6, 28), float64] */;
  %645 = @func_7185() /* ty=Tensor[(5, 15, 4), int64] */;
  %646 = less(%642, %643) /* ty=Tensor[(4, 24), bool] */;
  %647 = atan(%644) /* ty=Tensor[(6, 28), float64] */;
  (%645, meta[relay.Constant][46] /* ty=Tensor[(9, 84), uint64] */, %646, %647)
}

def @func_6659() -> (Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) {
  @func_6657() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) */
}

def @func_8332(%var_8309: Tensor[(9, 12, 3), float64], %var_8310: Tensor[(9, 12, 3), float64], %var_8315: Tensor[(9, 12, 3), float64]) -> (Tensor[(9, 12, 3), float64],) {
  %648 = cast(%var_8310, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %649 = shape_of(%var_8309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %650 = cast(%var_8309, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %652 = mod(%650, %651) /* ty=Tensor[(9, 12, 3), float64] */;
  %653 = cast(%var_8315, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%652, dtype="float64") /* ty=Tensor[(9, 12, 3), float64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %657 = add(%655, %656) /* ty=Tensor[(9, 12, 3), float64] */;
  (%657,)
}

def @func_5251(%var_5249: Tensor[(10, 3, 8), uint64], %var_5250: Tensor[(10, 3, 8), uint64]) -> Tensor[(10, 3, 8), bool] {
  %662 = fn (%var_5233: Tensor[(10, 3, 8), uint64], %var_5234: Tensor[(10, 3, 8), uint64]) -> Tensor[(10, 3, 8), bool] {
    %658 = cast(%var_5234, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
    %659 = shape_of(%var_5233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %660 = cast(%var_5233, dtype="bool") /* ty=Tensor[(10, 3, 8), bool] */;
    %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%660, %661) /* ty=Tensor[(10, 3, 8), bool] */
  };
  %662(%var_5249, %var_5250) /* ty=Tensor[(10, 3, 8), bool] */
}

def @func_6895(%var_6887: Tensor[(8, 2, 11), int8]) -> Tensor[(8, 2, 11), uint8] {
  %663 = @func_6862() /* ty=(Tensor[(?, 2, 11), int8],) */;
  %664 = %663.0;
  %665 = cast(%664, dtype="uint8") /* ty=Tensor[(?, 2, 11), uint8] */;
  %666 = cast(%var_6887, dtype="uint8") /* ty=Tensor[(8, 2, 11), uint8] */;
  logical_xor(%665, %666) /* ty=Tensor[(8, 2, 11), uint8] */
}

def @func_294(%var_292: int8, %var_293: Tensor[(8, 3, 7), int8]) -> (Tensor[(8, 3, 7), int8],) {
  @func_290(%var_292, %var_293) /* ty=(Tensor[(8, 3, 7), int8],) */
}

def @func_2526(%var_2524: int8, %var_2525: Tensor[(2, 3, 15), int8]) -> (Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) {
  %678 = fn (%var_2506: int8, %var_2507: Tensor[(2, 3, 15), int8]) -> (Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) {
    %667 = cast(%var_2506, dtype="bool") /* ty=bool */;
    %668 = cast(%var_2507, dtype="bool") /* ty=Tensor[(2, 3, 15), bool] */;
    %669 = less_equal(%667, %668) /* ty=Tensor[(2, 3, 15), bool] */;
    %670 = cast(%669, dtype="float64") /* ty=Tensor[(2, 3, 15), float64] */;
    %671 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %672 = cast(%var_2506, dtype="int8") /* ty=int8 */;
    %673 = reshape(%671, newshape=[16, 1, 6]) /* ty=Tensor[(16, 1, 6), float64] */;
    %674 = reshape(%672, newshape=[]) /* ty=int8 */;
    %675 = @func_425(%673, %674) /* ty=(Tensor[(16, ?, 6), float32], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8]) */;
    %676 = rsqrt(%670) /* ty=Tensor[(2, 3, 15), float64] */;
    %677 = %675.1;
    (%676, %677, meta[relay.Constant][48] /* ty=Tensor[(96), float64] */)
  };
  %678(%var_2524, %var_2525) /* ty=(Tensor[(2, 3, 15), float64], Tensor[(8, 3, 7), int8], Tensor[(96), float64]) */
}

def @func_6356(%var_6354: Tensor[(1456), int16], %var_6355: Tensor[(13, 5), float32]) -> (Tensor[(?, 2, 11), bool], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(13, 5), float32]) {
  %689 = fn (%var_6348: Tensor[(1456), int16], %var_6349: Tensor[(13, 5), float32]) -> (Tensor[(?, 2, 11), bool], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(13, 5), float32]) {
    %679 = @func_5989() /* ty=(Tensor[(1, 2, 11), float64], Tensor[(?, 2, 11), bool], Tensor[(?, 2, 11), int8], Tensor[(15, 9, 13), float64], Tensor[(585, 3), float64]) */;
    %680 = cast(%var_6348, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %681 = cast(%var_6348, dtype="int16") /* ty=Tensor[(1456), int16] */;
    %682 = cast(%var_6349, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
    %683 = reshape(%680, newshape=[16, 7, 13]) /* ty=Tensor[(16, 7, 13), int16] */;
    %684 = reshape(%681, newshape=[16, 7, 13]) /* ty=Tensor[(16, 7, 13), int16] */;
    %685 = reshape(%682, newshape=[13, 5]) /* ty=Tensor[(13, 5), float32] */;
    %686 = @func_2425(%683, %684, %685) /* ty=(Tensor[(16, 7, 13), int16], Tensor[(1, 13, 5), float32], Tensor[(13, 5), float32]) */;
    %687 = %679.1;
    %688 = %686.1;
    (%687, %688, %var_6348, %var_6349)
  };
  %689(%var_6354, %var_6355) /* ty=(Tensor[(?, 2, 11), bool], Tensor[(1, 13, 5), float32], Tensor[(1456), int16], Tensor[(13, 5), float32]) */
}

def @func_7951() -> (Tensor[(3, 180), int16],) {
  %692 = fn () -> (Tensor[(3, 180), int16],) {
    %690 = @func_6657() /* ty=(Tensor[(?, 2, 11), float32], Tensor[(12, 9, 5), bool], Tensor[(45), int16], Tensor[(3, 180), int16]) */;
    %691 = %690.3;
    (%691,)
  };
  %692() /* ty=(Tensor[(3, 180), int16],) */
}

def @func_6702(%var_6700: Tensor[(16, 8, 9), bool], %var_6701: Tensor[(16, 8, 9), bool]) -> (Tensor[(16, 8, 9), bool], Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(5, 12, 2), float32]) {
  @func_6698(%var_6700, %var_6701) /* ty=(Tensor[(16, 8, 9), bool], Tensor[(?, 2, 11), int8], Tensor[(5, 12, 2), float32], Tensor[(120), float32], Tensor[(10, 8, 1), float64], Tensor[(80), float64], Tensor[(5, 12, 2), float32]) */
}

def @func_5810(%var_5779: Tensor[(7, 15, 14), float64], %var_5783: Tensor[(65), float32], %var_5801: Tensor[(8, 70), int16], %var_5802: Tensor[(525), int64]) -> (Tensor[(7, 15, 14), float64], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(10, 8, 7), bool], Tensor[(8, 70), int16], Tensor[(525), int64], Tensor[(240), int16]) {
  %693 = cast(%var_5779, dtype="float64") /* ty=Tensor[(7, 15, 14), float64] */;
  %694 = cast(%var_5783, dtype="float32") /* ty=Tensor[(65), float32] */;
  %695 = reshape(%694, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %696 = @func_480(%695) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %697 = cast(%var_5801, dtype="int16") /* ty=Tensor[(8, 70), int16] */;
  %698 = cast(%var_5801, dtype="int16") /* ty=Tensor[(8, 70), int16] */;
  %699 = cast(%var_5802, dtype="int64") /* ty=Tensor[(525), int64] */;
  %700 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), int16] */, dtype="int16") /* ty=Tensor[(240), int16] */;
  %701 = cast(%var_5801, dtype="float64") /* ty=Tensor[(8, 70), float64] */;
  %702 = reshape(%697, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), int16] */;
  %703 = reshape(%698, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), int16] */;
  %704 = reshape(%699, newshape=[525]) /* ty=Tensor[(525), int64] */;
  %705 = reshape(%700, newshape=[240]) /* ty=Tensor[(240), int16] */;
  %706 = reshape(%701, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), float64] */;
  %707 = @func_3056(%702, %703, %704, %705, %706) /* ty=(Tensor[(13, 3, 16), uint64], Tensor[(312, 2), float64], Tensor[(5, 7, 15), int64], Tensor[(525), int64], Tensor[(16, ?, 6), float32], Tensor[(240), int16], Tensor[(96), float64], int8, Tensor[(10, 8, 7), float32], Tensor[(10, 8, 7), bool], Tensor[(1, 13, 5), float32], Tensor[(65), float32]) */;
  %708 = cos(%693) /* ty=Tensor[(7, 15, 14), float64] */;
  %709 = %696.0;
  %710 = %707.9;
  (%708, %709, %var_5783, %710, %var_5801, %var_5802, meta[relay.Constant][49] /* ty=Tensor[(240), int16] */)
}

def @func_2425(%var_2405: Tensor[(16, 7, 13), int16], %var_2406: Tensor[(16, 7, 13), int16], %var_2411: Tensor[(13, 5), float32]) -> (Tensor[(16, 7, 13), int16], Tensor[(1, 13, 5), float32], Tensor[(13, 5), float32]) {
  %711 = cast(%var_2406, dtype="int16") /* ty=Tensor[(16, 7, 13), int16] */;
  %712 = shape_of(%var_2405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %713 = cast(%var_2405, dtype="int16") /* ty=Tensor[(16, 7, 13), int16] */;
  %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %715 = cast(%var_2411, dtype="float32") /* ty=Tensor[(13, 5), float32] */;
  %716 = reshape(%715, newshape=[1, 13, 5]) /* ty=Tensor[(1, 13, 5), float32] */;
  %717 = @func_480(%716) /* ty=(Tensor[(1, 13, 5), float32],) */;
  %718 = left_shift(%713, %714) /* ty=Tensor[(16, 7, 13), int16] */;
  %719 = %717.0;
  (%718, %719, %var_2411)
}

def @func_6226() -> (Tensor[(?, 2, 11), int8],) {
  @func_6224() /* ty=(Tensor[(?, 2, 11), int8],) */
}

def @func_6405(%var_6402: Tensor[(11, 8, 9), float64], %var_6403: Tensor[(11, 8, 9), float64], %var_6404: Tensor[(65), float32]) -> (Tensor[(11, 8, 9), float64], Tensor[(168), int8], Tensor[(65), float32], Tensor[(54, 14), uint64], Tensor[(168), int8], Tensor[(4, 24), float64], int8, Tensor[(11, 8, 9), float32]) {
  %745 = fn (%var_6371: Tensor[(11, 8, 9), float64], %var_6372: Tensor[(11, 8, 9), float64], %var_6381: Tensor[(65), float32]) -> (Tensor[(11, 8, 9), float64], Tensor[(168), int8], Tensor[(65), float32], Tensor[(54, 14), uint64], Tensor[(168), int8], Tensor[(4, 24), float64], int8, Tensor[(11, 8, 9), float32]) {
    %720 = cast(%var_6372, dtype="float64") /* ty=Tensor[(11, 8, 9), float64] */;
    %721 = shape_of(%var_6371, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%var_6371, dtype="float64") /* ty=Tensor[(11, 8, 9), float64] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %724 = cast(%var_6381, dtype="float32") /* ty=Tensor[(65), float32] */;
    %725 = cast(meta[relay.Constant][50] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
    %726 = cast(meta[relay.Constant][51] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
    %727 = reshape(%724, newshape=[65]) /* ty=Tensor[(65), float32] */;
    %728 = reshape(%725, newshape=[756]) /* ty=Tensor[(756), uint64] */;
    %729 = reshape(%726, newshape=[84, 2]) /* ty=Tensor[(84, 2), int8] */;
    %730 = @func_1168(%727, %728, %729) /* ty=(Tensor[(11, 11, 5), float32], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(168), int8], Tensor[(756), uint64], int8, Tensor[(84, 2), int8]) */;
    %731 = cast(meta[relay.Constant][50] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
    %732 = cast(meta[relay.Constant][50] /* ty=Tensor[(54, 14), uint64] */, dtype="uint64") /* ty=Tensor[(54, 14), uint64] */;
    %733 = cast(meta[relay.Constant][52] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %734 = cast(meta[relay.Constant][51] /* ty=Tensor[(168), int8] */, dtype="int8") /* ty=Tensor[(168), int8] */;
    %735 = reshape(%731, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
    %736 = reshape(%732, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint64] */;
    %737 = reshape(%733, newshape=[]) /* ty=int8 */;
    %738 = reshape(%734, newshape=[168]) /* ty=Tensor[(168), int8] */;
    %739 = @func_925(%735, %736, %737, %738) /* ty=(Tensor[(9, 12, 7), float64], Tensor[(8, 3, 7), int8], int8, Tensor[(168), int8], Tensor[(1, 13, 5), float32], Tensor[(65), float32], Tensor[(8, 3, 7), int8], Tensor[(4, 24), float64]) */;
    %740 = cast(%var_6372, dtype="float32") /* ty=Tensor[(11, 8, 9), float32] */;
    %741 = floor_divide(%722, %723) /* ty=Tensor[(11, 8, 9), float64] */;
    %742 = %730.3;
    %743 = %739.7;
    %744 = rsqrt(%740) /* ty=Tensor[(11, 8, 9), float32] */;
    (%741, %742, %var_6381, meta[relay.Constant][50] /* ty=Tensor[(54, 14), uint64] */, meta[relay.Constant][51] /* ty=Tensor[(168), int8] */, %743, meta[relay.Constant][52] /* ty=int8 */, %744)
  };
  %745(%var_6402, %var_6403, %var_6404) /* ty=(Tensor[(11, 8, 9), float64], Tensor[(168), int8], Tensor[(65), float32], Tensor[(54, 14), uint64], Tensor[(168), int8], Tensor[(4, 24), float64], int8, Tensor[(11, 8, 9), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen238/build/output.py:1777: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen238/build/output.py", line 1782, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_erf_kernel0(double* __restrict__ T_erf, double* __restrict__ placeholder) {
  if (((((int)blockIdx.x) * 64) + (((int)threadIdx.x) >> 4)) < 70) {
    if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1120) {
      T_erf[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = erf(placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
    }
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

