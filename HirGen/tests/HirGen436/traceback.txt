==========mod==========
#[version = "0.0.5"]
def @func_5561() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8]) {
  %0 = @func_4703() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %1 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %2 = %0.1;
  %3 = %1.1;
  (%2, %3)
}

def @func_3433(%var_3418: Tensor[(6, 14, 8), float32]) -> (Tensor[(6, 14, 8), bool],) {
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 8), float32] */;
  %5 = shape_of(%var_3418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%var_3418, dtype="float32") /* ty=Tensor[(6, 14, 8), float32] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %8 = add(%6, %7) /* ty=Tensor[(6, 14, 8), float32] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %13 = logical_or(%11, %12) /* ty=Tensor[(6, 14, 8), bool] */;
  (%13,)
}

def @func_2400() -> (Tensor[(12, 11, 11), uint64],) {
  %14 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %15 = %14.0;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %17 = erf(%16) /* ty=Tensor[(12, 11, 11), float32] */;
  %18 = cast(%17, dtype="uint64") /* ty=Tensor[(12, 11, 11), uint64] */;
  %19 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%15, dtype="uint64") /* ty=Tensor[(12, 11, 11), uint64] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %22 = right_shift(%20, %21) /* ty=Tensor[(12, 11, 11), uint64] */;
  (%22,)
}

def @func_4286() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %23 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %24 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %25 = %23.0;
  %26 = %24.0;
  (%25, %26)
}

def @func_4087() -> (Tensor[(12, 11, 11), float32],) {
  %27 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %28 = %27.1;
  (%28,)
}

def @func_656() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %29 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %30 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %31 = %29.0;
  %32 = %30.3;
  (%31, %32)
}

def @func_2732() -> Tensor[(12, 11, 11), float64] {
  %33 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %33.0
}

def @func_2946() -> Tensor[(12, 11, 11), float64] {
  @func_2004() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_5396() -> (Tensor[(12, 11, 11), float64],) {
  %34 = @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %35 = %34.0;
  (%35,)
}

def @func_6703(%var_6695: Tensor[(15, 8, 7), float64]) -> (Tensor[(15, 8, 7), float64],) {
  %36 = cast(%var_6695, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %37 = sigmoid(%36) /* ty=Tensor[(15, 8, 7), float64] */;
  (%37,)
}

def @func_2197() -> (Tensor[(12, 11, 11), float64],) {
  %38 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
  (%38,)
}

def @func_7064() -> (Tensor[(3, 6, 13), float32],) {
  %39 = @func_4315() /* ty=Tensor[(3, 6, 13), float32] */;
  (%39,)
}

def @func_2815() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %40 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %41 = @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %42 = %41.0;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %44 = asin(%43) /* ty=Tensor[(12, 11, 11), float32] */;
  %45 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %46 = %45.0;
  %47 = cast(%46, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %48 = shape_of(%44, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%44, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %52 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %53 = %40.1;
  %54 = logical_or(%49, %50) /* ty=Tensor[(12, 11, 11), bool] */;
  %55 = @func_2732() /* ty=Tensor[(12, 11, 11), float64] */;
  %56 = %51.1;
  %57 = %52.0;
  (%53, %54, %55, %56, %57)
}

def @func_3627() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %58 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %59 = %58.2;
  %60 = @func_2946() /* ty=Tensor[(12, 11, 11), float64] */;
  (%59, %60)
}

def @func_3669() -> (Tensor[(12, 11, 11), float64],) {
  %61 = @func_3247() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %62 = %61.0;
  (%62,)
}

def @func_3316() -> Tensor[(12, 11, 11), float32] {
  %63 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %63.0
}

def @func_4399(%var_4369: Tensor[(14, 13, 5), float32]) -> (Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %64 = cast(%var_4369, dtype="float32") /* ty=Tensor[(14, 13, 5), float32] */;
  %65 = @func_3247() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %66 = sigmoid(%64) /* ty=Tensor[(14, 13, 5), float32] */;
  %67 = @func_2946() /* ty=Tensor[(12, 11, 11), float64] */;
  %68 = @func_3561() /* ty=Tensor[(12, 11, 11), float64] */;
  %69 = %65.0;
  (%66, %67, %68, %69)
}

def @func_5307() -> (Tensor[(12, 11, 11), float64],) {
  %70 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %71 = %70.0;
  (%71,)
}

def @func_5204() -> Tensor[(12, 11, 11), float64] {
  @func_4831() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_4189() -> (Tensor[(12, 11, 11), float64],) {
  %72 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %73 = %72.0;
  (%73,)
}

def @func_6071(%var_6054: Tensor[(1452), float64]) -> (Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) {
  %74 = cast(%var_6054, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %75 = reshape(%74, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %76 = @func_542(%75) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) */;
  %77 = @func_4286() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %78 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
  %79 = asinh(%78) /* ty=Tensor[(13, 6, 10), float32] */;
  %80 = cast(meta[relay.Constant][1] /* ty=Tensor[(13, 6, 10), float32] */, dtype="int16") /* ty=Tensor[(13, 6, 10), int16] */;
  %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%79, dtype="int16") /* ty=Tensor[(13, 6, 10), int16] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %84 = bitwise_or(%82, %83) /* ty=Tensor[(13, 6, 10), int16] */;
  %85 = cast(%84, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
  %86 = tan(%85) /* ty=Tensor[(13, 6, 10), float32] */;
  %87 = cast(%86, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
  %88 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%84, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %91 = %76.3;
  %92 = %77.1;
  %93 = logical_xor(%89, %90) /* ty=Tensor[(13, 6, 10), int8] */;
  (%91, %var_6054, %92, %93)
}

def @func_6837() -> Tensor[(12, 11, 11), float32] {
  %94 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %94.0
}

def @func_2304() -> (Tensor[(12, 11, 11), float64],) {
  %95 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %96 = %95.0;
  (%96,)
}

def @func_4010(%var_3942: Tensor[(7, 11, 14), float64], %var_3951: Tensor[(7, 11, 14), float64], %var_3997: Tensor[(7, 11, 14), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) {
  %97 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %98 = cast(%var_3942, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %99 = cosh(%98) /* ty=Tensor[(7, 11, 14), float64] */;
  %100 = cast(%var_3951, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
  %101 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%99, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %104 = bitwise_and(%102, %103) /* ty=Tensor[(7, 11, 14), uint16] */;
  %105 = cast(%104, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %106 = shape_of(%99, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%99, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %109 = mod(%107, %108) /* ty=Tensor[(7, 11, 14), float64] */;
  %110 = cast(%var_3942, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %114 = cast(%99, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
  %115 = sigmoid(%114) /* ty=Tensor[(7, 11, 14), float32] */;
  %116 = cast(%var_3997, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %120 = power(%118, %119) /* ty=Tensor[(7, 11, 14), float64] */;
  %121 = cast(%104, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %125 = @func_3227() /* ty=Tensor[(12, 11, 11), float64] */;
  %126 = %97.0;
  %127 = bitwise_xor(%112, %113) /* ty=Tensor[(7, 11, 14), int64] */;
  %128 = floor_divide(%123, %124) /* ty=Tensor[(7, 11, 14), float64] */;
  (%125, %126, %127, %128)
}

def @func_4141() -> (Tensor[(12, 11, 11), float64],) {
  %129 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
  (%129,)
}

def @func_4345() -> Tensor[(12, 11, 11), float64] {
  %130 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %130.0
}

def @func_5058(%var_5011: Tensor[(1404, 1), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(54, 26), float32], Tensor[(1404, 1), float32]) {
  %131 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %132 = cast(%var_5011, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %133 = cast(%var_5011, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %134 = reshape(%132, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %135 = reshape(%133, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %136 = @func_1665(%134, %135) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %137 = %136.2;
  %138 = cast(%var_5011, dtype="float32") /* ty=Tensor[(1404, 1), float32] */;
  %139 = shape_of(%137, dtype="int32") /* ty=Tensor[(2), int32] */;
  %140 = cast(%137, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %142 = cast(%var_5011, dtype="float32") /* ty=Tensor[(1404, 1), float32] */;
  %143 = %131.0;
  %144 = subtract(%140, %141) /* ty=Tensor[(54, 26), float32] */;
  %145 = cosh(%142) /* ty=Tensor[(1404, 1), float32] */;
  (%143, %144, %145)
}

def @func_4831() -> Tensor[(12, 11, 11), float64] {
  %146 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %146.0
}

def @func_4726() -> Tensor[(12, 11, 11), float64] {
  %147 = @func_4459() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %147.0
}

def @func_6642() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) {
  %148 = @func_4087() /* ty=(Tensor[(12, 11, 11), float32],) */;
  %149 = %148.0;
  %150 = cast(%149, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %151 = reshape(%150, newshape=[1452]) /* ty=Tensor[(1452), float64] */;
  %152 = @func_6071(%151) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) */;
  %153 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %154 = %152.2;
  %155 = %153.2;
  (%149, %154, %155)
}

def @func_3401(%var_3378: Tensor[(12, 10, 16), float32]) -> (Tensor[(12, 10, 16), float64], Tensor[(12, 11, 11), uint8]) {
  %156 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %157 = %156.0;
  %158 = cast(%var_3378, dtype="float64") /* ty=Tensor[(12, 10, 16), float64] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%157, dtype="float64") /* ty=Tensor[(12, 10, 16), float64] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %162 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %163 = subtract(%160, %161) /* ty=Tensor[(12, 10, 16), float64] */;
  %164 = %162.1;
  (%163, %164)
}

def @func_871() -> Tensor[(3, 6, 13), float32] {
  %165 = cast(meta[relay.Constant][2] /* ty=Tensor[(3, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  log10(%165) /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_7621() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) {
  %166 = @func_6907() /* ty=(Tensor[(12, 11, 11), float32],) */;
  %167 = @func_2197() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %168 = @func_4726() /* ty=Tensor[(12, 11, 11), float64] */;
  %169 = %166.0;
  %170 = %167.0;
  (%168, %169, %170)
}

def @func_1164(%var_1068: Tensor[(3, 6, 13), float32]) -> (Tensor[(3, 6, 13), bool], Tensor[(12, 11, 11), int16], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %171 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
  %172 = cast(%171, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %173 = log2(%172) /* ty=Tensor[(3, 6, 13), float32] */;
  %174 = cast(%var_1068, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %175 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%171, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %178 = greater(%176, %177) /* ty=Tensor[(3, 6, 13), bool] */;
  %179 = cast(%178, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %180 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %181 = cast(%173, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %183 = equal(%181, %182) /* ty=Tensor[(3, 6, 13), bool] */;
  %184 = cast(%178, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %185 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%183, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %189 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %190 = cast(%189, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %191 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%188, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %194 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %195 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %196 = greater_equal(%186, %187) /* ty=Tensor[(3, 6, 13), bool] */;
  %197 = bitwise_xor(%192, %193) /* ty=Tensor[(12, 11, 11), int16] */;
  %198 = %194.0;
  %199 = %195.1;
  (%196, %197, %198, %199)
}

def @func_2890(%var_2880: Tensor[(3, 468), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 468), float64]) {
  %200 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %201 = cast(%var_2880, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
  %202 = cast(%var_2880, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
  %203 = reshape(%201, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %204 = reshape(%202, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %205 = @func_2365(%203, %204) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) */;
  %206 = %200.0;
  %207 = %205.3;
  (%206, %207, %var_2880)
}

def @func_7261(%var_7225: float64, %var_7226: Tensor[(1, 12, 5), float64]) -> (Tensor[(15, 4, 9), bool], Tensor[(540), float64], Tensor[(1, 12, 5), float64], Tensor[(?, 12, 5), float64]) {
  %208 = cast(meta[relay.Constant][3] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
  %209 = reshape(%208, newshape=[15, 4, 9]) /* ty=Tensor[(15, 4, 9), float64] */;
  %210 = @func_1287(%209) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(15, 4, 9), float64], Tensor[(15, 4, 9), bool], Tensor[(15, 4, 9), float32], Tensor[(13, 13, 5), bool], Tensor[(845), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %211 = cast(%var_7225, dtype="bool") /* ty=bool */;
  %212 = cast(%var_7226, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
  %213 = equal(%211, %212) /* ty=Tensor[(1, 12, 5), bool] */;
  %214 = cast(%213, dtype="float64") /* ty=Tensor[(1, 12, 5), float64] */;
  %215 = cast(%var_7225, dtype="float64") /* ty=float64 */;
  %216 = cast(%var_7226, dtype="float64") /* ty=Tensor[(1, 12, 5), float64] */;
  %217 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%213, dtype="float64") /* ty=Tensor[(1, 12, 5), float64] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %220 = %210.2;
  %221 = floor_mod(%214, %215) /* ty=Tensor[(1, 12, 5), float64] */;
  %222 = floor_divide(%218, %219) /* ty=Tensor[(?, 12, 5), float64] */;
  (%220, meta[relay.Constant][3] /* ty=Tensor[(540), float64] */, %221, %222)
}

def @func_1373() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %223 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %224 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %225 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %226 = %225.0;
  %227 = cast(%226, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %228 = %223.0;
  %229 = %224.0;
  %230 = log10(%227) /* ty=Tensor[(12, 11, 11), float64] */;
  (%228, %229, %230)
}

def @func_3074() -> (Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  %231 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %232 = cast(meta[relay.Constant][5] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %233 = cast(meta[relay.Constant][5] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %234 = reshape(%232, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %235 = reshape(%233, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %236 = @func_2365(%234, %235) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) */;
  %237 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %238 = cast(meta[relay.Constant][4] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
  %239 = %231.0;
  %240 = cast(%239, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %241 = reshape(%238, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float32] */;
  %242 = reshape(%240, newshape=[1452]) /* ty=Tensor[(1452), float64] */;
  %243 = @func_912(%241, %242) /* ty=(Tensor[(4, 9, 2), int32], Tensor[(12, 11, 11), float64], Tensor[(1452), float64], Tensor[(12, 11, 11), float64]) */;
  %244 = %243.0;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
  %246 = sinh(%245) /* ty=Tensor[(4, 9, 2), float64] */;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
  %248 = atan(%247) /* ty=Tensor[(4, 9, 2), float64] */;
  %249 = cast(meta[relay.Constant][6] /* ty=Tensor[(4, 9, 2), float64] */, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
  %250 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %251 = cast(%248, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
  %252 = dyn.reshape(%249, %250, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %253 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %254 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %255 = %236.4;
  %256 = %237.0;
  %257 = floor_divide(%251, %252) /* ty=Tensor[(4, 9, 2), float32] */;
  %258 = %253.1;
  %259 = %254.0;
  (%239, meta[relay.Constant][4] /* ty=Tensor[(72), float32] */, %255, meta[relay.Constant][5] /* ty=Tensor[(1404), float64] */, %256, %257, %258, %259)
}

def @func_1665(%var_1605: Tensor[(54, 26), float64], %var_1607: Tensor[(54, 26), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %260 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %261 = cast(%var_1605, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %262 = reshape(%261, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %263 = @func_280(%262) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %264 = cast(%var_1607, dtype="int64") /* ty=Tensor[(54, 26), int64] */;
  %265 = shape_of(%var_1605, dtype="int32") /* ty=Tensor[(2), int32] */;
  %266 = cast(%var_1605, dtype="int64") /* ty=Tensor[(54, 26), int64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %268 = @func_1373() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %269 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %270 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %271 = %260.0;
  %272 = %263.1;
  %273 = bitwise_and(%266, %267) /* ty=Tensor[(54, 26), int64] */;
  %274 = %268.0;
  %275 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %276 = %269.0;
  %277 = %270.0;
  (%271, %272, %273, %274, %275, %276, %277)
}

def @func_3544() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) {
  %278 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %279 = %278.1;
  %280 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %281 = %280.2;
  %282 = cast(%281, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %283 = shape_of(%279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(%279, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %286 = @func_3316() /* ty=Tensor[(12, 11, 11), float32] */;
  %287 = @func_3227() /* ty=Tensor[(12, 11, 11), float64] */;
  %288 = equal(%284, %285) /* ty=Tensor[(12, 11, 11), bool] */;
  (%286, %287, %288)
}

def @func_7379() -> (Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), float32]) {
  %289 = @func_4315() /* ty=Tensor[(3, 6, 13), float32] */;
  %290 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
  (%289, %290)
}

def @func_3724(%var_3708: Tensor[(3, 13, 4), float32]) -> (Tensor[(3, 13, 4), float32], Tensor[(12, 11, 11), float64]) {
  %291 = cast(%var_3708, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %292 = log10(%291) /* ty=Tensor[(3, 13, 4), float32] */;
  %293 = @func_3227() /* ty=Tensor[(12, 11, 11), float64] */;
  (%292, %293)
}

def @func_7042() -> Tensor[(4, 16, 16), float32] {
  %294 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
  log10(%294) /* ty=Tensor[(4, 16, 16), float32] */
}

def @func_5187() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) {
  %295 = @func_4048() /* ty=(Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %296 = cast(meta[relay.Constant][8] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %297 = reshape(%296, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), float32] */;
  %298 = @func_4399(%297) /* ty=(Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %299 = %295.1;
  %300 = %298.3;
  (%299, %300, meta[relay.Constant][8] /* ty=Tensor[(910), float32] */)
}

def @func_7471(%var_7466: Tensor[(3, 6, 13), float32]) -> (Tensor[(3, 6, 13), float64],) {
  %301 = @func_1869() /* ty=(Tensor[(3, 6, 13), float32],) */;
  %302 = %301.0;
  %303 = cast(%var_7466, dtype="float64") /* ty=Tensor[(3, 6, 13), float64] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="float64") /* ty=Tensor[(3, 6, 13), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %307 = floor_mod(%305, %306) /* ty=Tensor[(3, 6, 13), float64] */;
  (%307,)
}

def @func_7392() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %308 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %309 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %310 = %308.1;
  %311 = %309.2;
  (%310, %311)
}

def @func_3561() -> Tensor[(12, 11, 11), float64] {
  @func_2946() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_4048() -> (Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  %312 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %313 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %314 = %312.1;
  %315 = %313.0;
  (%314, %315)
}

def @func_4875() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) {
  %316 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %317 = cast(meta[relay.Constant][9] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %318 = cast(meta[relay.Constant][9] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %319 = cast(meta[relay.Constant][9] /* ty=Tensor[(1078), float64] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %320 = reshape(%317, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %321 = reshape(%318, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %322 = reshape(%319, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %323 = @func_4010(%320, %321, %322) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */;
  %324 = %316.1;
  %325 = %323.3;
  (%324, %325, meta[relay.Constant][9] /* ty=Tensor[(1078), float64] */)
}

def @func_5611(%var_5585: Tensor[(910), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) {
  %326 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %327 = cast(%var_5585, dtype="float32") /* ty=Tensor[(910), float32] */;
  %328 = reshape(%327, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), float32] */;
  %329 = @func_4399(%328) /* ty=(Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %330 = %326.0;
  %331 = %329.3;
  (%330, %331, %var_5585)
}

def @func_2365(%var_2324: Tensor[(54, 26), float64], %var_2361: Tensor[(54, 26), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) {
  %332 = @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %333 = cast(meta[relay.Constant][10] /* ty=Tensor[(54, 26), float64] */, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %334 = cast(meta[relay.Constant][10] /* ty=Tensor[(54, 26), float64] */, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %335 = reshape(%333, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %336 = reshape(%334, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %337 = @func_1665(%335, %336) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %338 = cast(%var_2324, dtype="uint32") /* ty=Tensor[(54, 26), uint32] */;
  %339 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(54, 26), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %340 = cast(meta[relay.Constant][10] /* ty=Tensor[(54, 26), float64] */, dtype="uint32") /* ty=Tensor[(54, 26), uint32] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %342 = @func_1373() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %343 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %344 = cast(%var_2324, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %345 = sqrt(%344) /* ty=Tensor[(54, 26), float64] */;
  %346 = cast(%var_2361, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(2), int32] */;
  %348 = cast(%345, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %350 = %332.1;
  %351 = %337.0;
  %352 = maximum(%340, %341) /* ty=Tensor[(54, 26), uint32] */;
  %353 = %342.1;
  %354 = %343.2;
  %355 = logical_xor(%348, %349) /* ty=Tensor[(54, 26), int16] */;
  (%350, %351, %352, %353, %354, %355)
}

def @func_2154() -> (Tensor[(12, 11, 11), float64],) {
  %356 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %357 = %356.0;
  (%357,)
}

def @func_5531() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %358 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %359 = %358.0;
  %360 = @func_3561() /* ty=Tensor[(12, 11, 11), float64] */;
  (%359, %360)
}

def @func_4582() -> (Tensor[(12, 11, 11), float64],) {
  %361 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %362 = %361.1;
  (%362,)
}

def @func_982(%var_976: Tensor[(13, 13, 5), float32]) -> (Tensor[(13, 13, 5), bool],) {
  %363 = cast(%var_976, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %364 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(13, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(meta[relay.Constant][11] /* ty=Tensor[(13, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = less_equal(%365, %366) /* ty=Tensor[(13, 13, 5), bool] */;
  (%367,)
}

def @func_6457() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32], Tensor[(12, 11, 11), float64]) {
  %368 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %369 = @func_5989() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %370 = %368.3;
  %371 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  %372 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
  %373 = %369.0;
  (%370, %371, %372, %373)
}

def @func_1945() -> Tensor[(12, 11, 11), float64] {
  %374 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %374.0
}

def @func_3247() -> (Tensor[(12, 11, 11), float64],) {
  %375 = @func_1945() /* ty=Tensor[(12, 11, 11), float64] */;
  (%375,)
}

def @func_2961() -> (Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) {
  %376 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 16), float32] */;
  %377 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %378 = asinh(%376) /* ty=Tensor[(12, 10, 16), float32] */;
  %379 = %377.2;
  (%378, %379)
}

def @func_2382() -> Tensor[(12, 11, 11), float64] {
  %380 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %380.0
}

def @func_4315() -> Tensor[(3, 6, 13), float32] {
  %381 = @func_1869() /* ty=(Tensor[(3, 6, 13), float32],) */;
  %381.0
}

def @func_159() -> (Tensor[(12, 11, 11), float64],) {
  %382 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %383 = atan(%382) /* ty=Tensor[(12, 11, 11), float64] */;
  (%383,)
}

def @func_394() -> (Tensor[(12, 11, 11), float64],) {
  %384 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %385 = %384.0;
  (%385,)
}

def @func_6907() -> (Tensor[(12, 11, 11), float32],) {
  %386 = @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */;
  %387 = %386.0;
  (%387,)
}

def @func_6364() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 154), float64], Tensor[(12, 11, 11), float64]) {
  %388 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %389 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 154), float64] */, dtype="float64") /* ty=Tensor[(7, 154), float64] */;
  %390 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 154), float64] */, dtype="float64") /* ty=Tensor[(7, 154), float64] */;
  %391 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 154), float64] */, dtype="float32") /* ty=Tensor[(7, 154), float32] */;
  %392 = reshape(%389, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %393 = reshape(%390, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %394 = reshape(%391, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %395 = @func_4010(%392, %393, %394) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */;
  %396 = %388.0;
  %397 = %395.2;
  %398 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  (%396, %397, meta[relay.Constant][14] /* ty=Tensor[(7, 154), float64] */, %398)
}

def @func_3923() -> (Tensor[(12, 11, 11), float32], Tensor[(6, 14, 8), bool], Tensor[(672), float32], Tensor[(896), float32]) {
  %399 = @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */;
  %400 = cast(meta[relay.Constant][15] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
  %401 = reshape(%400, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), float32] */;
  %402 = @func_3433(%401) /* ty=(Tensor[(6, 14, 8), bool],) */;
  %403 = @func_3139() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) */;
  %404 = %399.0;
  %405 = %402.0;
  %406 = %403.2;
  (%404, %405, meta[relay.Constant][15] /* ty=Tensor[(672), float32] */, %406)
}

def @func_6581() -> (Tensor[(12, 11, 11), float32], Tensor[(1078), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %407 = @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */;
  %408 = @func_4875() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) */;
  %409 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %410 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %411 = %407.0;
  %412 = %408.2;
  %413 = %409.0;
  %414 = %410.0;
  %415 = @func_5079() /* ty=Tensor[(12, 11, 11), float64] */;
  (%411, %412, %413, %414, %415)
}

def @func_7343() -> (Tensor[(4, 16, 16), float64], Tensor[(160), int16], Tensor[(4, 5, 8), float32]) {
  %416 = @func_7042() /* ty=Tensor[(4, 16, 16), float32] */;
  %417 = cast(%416, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %418 = sin(%417) /* ty=Tensor[(4, 16, 16), float64] */;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %420 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%416, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %424 = cast(meta[relay.Constant][16] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
  %425 = reshape(%423, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), int16] */;
  %426 = reshape(%424, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), int16] */;
  %427 = @func_6248(%425, %426) /* ty=(Tensor[(4, 5, 8), float64], Tensor[(4, 5, 8), bool], Tensor[(12, 11, 11), uint8], Tensor[(4, 5, 8), bool]) */;
  %428 = %427.1;
  %429 = cast(%428, dtype="float32") /* ty=Tensor[(4, 5, 8), float32] */;
  %430 = floor_mod(%421, %422) /* ty=Tensor[(4, 16, 16), float64] */;
  %431 = sqrt(%429) /* ty=Tensor[(4, 5, 8), float32] */;
  (%430, meta[relay.Constant][16] /* ty=Tensor[(160), int16] */, %431)
}

def @func_466() -> (Tensor[(12, 11, 11), float64],) {
  %432 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %433 = %432.0;
  (%433,)
}

def @func_1478() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) {
  %434 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %435 = %434.0;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %437 = tan(%436) /* ty=Tensor[(12, 11, 11), float32] */;
  %438 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
  (%437, %438)
}

def @func_5741() -> Tensor[(910), float32] {
  %439 = @func_5187() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) */;
  %440 = %439.2;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(910), float32] */;
  acosh(%441) /* ty=Tensor[(910), float32] */
}

def @func_3139() -> (Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) {
  %442 = @func_2197() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %443 = cast(meta[relay.Constant][17] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %444 = reshape(%443, newshape=[8, 8, 14]) /* ty=Tensor[(8, 8, 14), float32] */;
  %445 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %446 = %442.0;
  %447 = @func_2864(%444) /* ty=Tensor[(8, 8, 14), float32] */;
  %448 = %445.2;
  (%446, %447, meta[relay.Constant][17] /* ty=Tensor[(896), float32] */, %448)
}

def @func_4648(%var_4607: float32, %var_4608: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint64], Tensor[(12, 11, 11), float64]) {
  %449 = cast(%var_4607, dtype="bool") /* ty=bool */;
  %450 = cast(%var_4608, dtype="bool") /* ty=Tensor[(16, 6, 3), bool] */;
  %451 = @func_2400() /* ty=(Tensor[(12, 11, 11), uint64],) */;
  %452 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %453 = less_equal(%449, %450) /* ty=Tensor[(16, 6, 3), bool] */;
  %454 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
  %455 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %456 = %451.0;
  %457 = %452.1;
  (%453, %454, %455, %456, %457)
}

def @func_5752() -> Tensor[(12, 11, 11), float64] {
  %458 = @func_4875() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) */;
  %458.0
}

def @func_2631() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  %459 = @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %460 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %461 = %460.0;
  %462 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 11, 11), float64] */, dtype="uint8") /* ty=Tensor[(12, 11, 11), uint8] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="uint8") /* ty=Tensor[(12, 11, 11), uint8] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %466 = %459.0;
  %467 = left_shift(%464, %465) /* ty=Tensor[(12, 11, 11), uint8] */;
  %468 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  (%466, %467, %468)
}

def @func_6752() -> Tensor[(12, 11, 11), float64] {
  %469 = @func_6642() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) */;
  %469.1
}

def @func_7696(%var_7668: Tensor[(840), float64]) -> (Tensor[(15, 8, 7), float64], Tensor[(840), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %470 = cast(%var_7668, dtype="float64") /* ty=Tensor[(840), float64] */;
  %471 = reshape(%470, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float64] */;
  %472 = @func_6703(%471) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %473 = @func_5531() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %474 = %473.0;
  %475 = cast(%474, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %476 = %472.0;
  %477 = cosh(%475) /* ty=Tensor[(12, 11, 11), float64] */;
  %478 = @func_5079() /* ty=Tensor[(12, 11, 11), float64] */;
  (%476, %var_7668, %477, %478)
}

def @func_4059() -> Tensor[(12, 11, 11), float64] {
  %479 = @func_3177() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %479.0
}

def @func_912(%var_873: Tensor[(4, 9, 2), float32], %var_890: Tensor[(1452), float64]) -> (Tensor[(4, 9, 2), int32], Tensor[(12, 11, 11), float64], Tensor[(1452), float64], Tensor[(12, 11, 11), float64]) {
  %480 = cast(%var_873, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
  %481 = asin(%480) /* ty=Tensor[(4, 9, 2), float32] */;
  %482 = cast(%var_873, dtype="int32") /* ty=Tensor[(4, 9, 2), int32] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="int32") /* ty=Tensor[(4, 9, 2), int32] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %486 = cast(%var_890, dtype="float64") /* ty=Tensor[(1452), float64] */;
  %487 = reshape(%486, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %488 = @func_422(%487) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %489 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %490 = right_shift(%484, %485) /* ty=Tensor[(4, 9, 2), int32] */;
  %491 = %488.1;
  %492 = %489.1;
  (%490, %491, %var_890, %492)
}

def @func_2124() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  %493 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %494 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %495 = %493.0;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %497 = reshape(%496, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %498 = @func_422(%497) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %499 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %500 = %494.1;
  %501 = %498.0;
  %502 = %499.0;
  (%495, %500, %501, %502)
}

def @func_3177() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %503 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %504 = @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %505 = %503.0;
  %506 = %504.0;
  (%505, %506)
}

def @main(%var_7721: Tensor[(8, 15, 5), float32]) -> (Tensor[(8, 15, 5), float32],) {
  %507 = cast(%var_7721, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %508 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %511 = power(%509, %510) /* ty=Tensor[(8, 15, 5), float32] */;
  (%511,)
}

def @func_1869() -> (Tensor[(3, 6, 13), float32],) {
  %512 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %514 = acos(%513) /* ty=Tensor[(3, 6, 13), float32] */;
  %515 = cast(%514, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %516 = atan(%515) /* ty=Tensor[(3, 6, 13), float32] */;
  (%516,)
}

def @func_1783(%var_1770: Tensor[(3, 7, 5), float32], %var_1771: Tensor[(3, 7, 5), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(3, 7, 5), int16]) {
  %517 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %518 = cast(%var_1771, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %519 = shape_of(%var_1770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_1770, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = equal(%520, %521) /* ty=Tensor[(3, 7, 5), bool] */;
  %523 = cast(%522, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %524 = shape_of(%var_1771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_1771, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %527 = %517.0;
  %528 = bitwise_xor(%525, %526) /* ty=Tensor[(3, 7, 5), int16] */;
  (%527, %528)
}

def @func_1027() -> (Tensor[(12, 11, 11), float64],) {
  %529 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %530 = %529.1;
  (%530,)
}

def @func_973() -> Tensor[(12, 11, 11), float64] {
  %531 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %531.2
}

def @func_829() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) {
  %532 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %533 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %534 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %535 = %532.1;
  %536 = %533.0;
  %537 = %534.2;
  (%535, %536, %537)
}

def @func_2405() -> Tensor[(3, 6, 13), float32] {
  @func_871() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_172() -> (Tensor[(12, 11, 11), float64],) {
  %538 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %539 = %538.0;
  (%539,)
}

def @func_2004() -> Tensor[(12, 11, 11), float64] {
  %540 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %540.0
}

def @func_5846() -> Tensor[(10, 4, 14), float64] {
  %541 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 4, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 14), float64] */;
  tan(%541) /* ty=Tensor[(10, 4, 14), float64] */
}

def @func_2864(%var_2856: Tensor[(8, 8, 14), float32]) -> Tensor[(8, 8, 14), float32] {
  %542 = cast(%var_2856, dtype="float32") /* ty=Tensor[(8, 8, 14), float32] */;
  %543 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 14), float32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%544, %545) /* ty=Tensor[(8, 8, 14), float32] */
}

def @func_422(%var_414: Tensor[(12, 11, 11), float64]) -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  %546 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %547 = %546.0;
  %548 = cast(%var_414, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %549 = shape_of(%547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%547, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %553 = not_equal(%550, %551) /* ty=Tensor[(12, 11, 11), bool] */;
  %554 = %552.0;
  (%553, %554)
}

def @func_5338() -> (Tensor[(12, 11, 11), float64],) {
  %555 = @func_2732() /* ty=Tensor[(12, 11, 11), float64] */;
  (%555,)
}

def @func_5138() -> (Tensor[(12, 11, 11), float64],) {
  %556 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %557 = %556.0;
  (%557,)
}

def @func_4671() -> (Tensor[(12, 11, 11), uint8],) {
  %558 = @func_4048() /* ty=(Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %559 = %558.0;
  (%559,)
}

def @func_2488() -> Tensor[(12, 11, 11), float64] {
  %560 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %560.0
}

def @func_5650() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) {
  %561 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %562 = cast(meta[relay.Constant][22] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %563 = cast(meta[relay.Constant][22] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %564 = cast(meta[relay.Constant][22] /* ty=Tensor[(1078), float64] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %565 = reshape(%562, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %566 = reshape(%563, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %567 = reshape(%564, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %568 = @func_4010(%565, %566, %567) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */;
  %569 = %561.1;
  %570 = %568.3;
  (%569, %570, meta[relay.Constant][22] /* ty=Tensor[(1078), float64] */)
}

def @func_7016(%var_6977: Tensor[(4, 15, 15), float32], %var_7000: Tensor[(4, 15, 15), float32]) -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), int8]) {
  %571 = cast(%var_6977, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
  %572 = cast(%var_7000, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
  %573 = shape_of(%var_6977, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_6977, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %576 = exp(%571) /* ty=Tensor[(4, 15, 15), float32] */;
  %577 = multiply(%574, %575) /* ty=Tensor[(4, 15, 15), int8] */;
  (%576, %577)
}

def @func_3806() -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32]) {
  %578 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  %579 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %580 = %579.1;
  %581 = cast(%580, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %582 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%578, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %585 = @func_1869() /* ty=(Tensor[(3, 6, 13), float32],) */;
  %586 = less(%583, %584) /* ty=Tensor[(12, 11, 11), bool] */;
  %587 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  %588 = %585.0;
  (%586, %587, %588)
}

def @func_3588(%var_3578: Tensor[(3, 6, 13), float32]) -> Tensor[(3, 6, 13), uint32] {
  %589 = @func_2566() /* ty=Tensor[(3, 6, 13), float32] */;
  %590 = cast(%var_3578, dtype="uint32") /* ty=Tensor[(3, 6, 13), uint32] */;
  %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%589, dtype="uint32") /* ty=Tensor[(3, 6, 13), uint32] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%592, %593) /* ty=Tensor[(3, 6, 13), uint32] */
}

def @func_1549() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %594 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %595 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %596 = %594.0;
  %597 = %595.1;
  (%596, %597)
}

def @func_6886() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(18, 78), float64], Tensor[(12, 11, 11), float64]) {
  %598 = cast(meta[relay.Constant][23] /* ty=Tensor[(18, 78), float64] */, dtype="float64") /* ty=Tensor[(18, 78), float64] */;
  %599 = reshape(%598, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %600 = @func_2533(%599) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), float64]) */;
  %601 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %602 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %603 = %600.0;
  %604 = %601.0;
  (%602, %603, meta[relay.Constant][23] /* ty=Tensor[(18, 78), float64] */, %604)
}

def @func_2533(%var_2516: Tensor[(1404), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), float64]) {
  %605 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %606 = @func_2078() /* ty=(Tensor[(16, 12, 2), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %607 = cast(%var_2516, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %608 = cast(%var_2516, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %609 = reshape(%607, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %610 = reshape(%608, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %611 = @func_1665(%609, %610) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %612 = %611.1;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(9, 12, 13), float64] */;
  %614 = %605.0;
  %615 = %606.1;
  %616 = log(%613) /* ty=Tensor[(9, 12, 13), float64] */;
  (%614, %615, %var_2516, %616)
}

def @func_5258() -> (Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 13, 4), float32], Tensor[(156), float32], Tensor[(12, 11, 11), float64]) {
  %617 = @func_3074() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %618 = @func_2197() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %619 = cast(meta[relay.Constant][24] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
  %620 = reshape(%619, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float32] */;
  %621 = @func_3724(%620) /* ty=(Tensor[(3, 13, 4), float32], Tensor[(12, 11, 11), float64]) */;
  %622 = %618.0;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %624 = reshape(%623, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %625 = @func_542(%624) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) */;
  %626 = %617.3;
  %627 = %621.0;
  %628 = %625.0;
  (%626, %622, %627, meta[relay.Constant][24] /* ty=Tensor[(156), float32] */, %628)
}

def @func_3867() -> (Tensor[(12, 11, 11), float64],) {
  %629 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %630 = %629.2;
  (%630,)
}

def @func_1304() -> (Tensor[(12, 11, 11), float64],) {
  %631 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %632 = %631.0;
  (%632,)
}

def @func_6189(%var_6138: float32, %var_6139: Tensor[(288), float32]) -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(288), float32], Tensor[(9, 12, 13), int32]) {
  %633 = @func_2732() /* ty=Tensor[(12, 11, 11), float64] */;
  %634 = @func_3177() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %635 = %634.0;
  %636 = cast(%635, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %637 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(%633, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %640 = cast(%var_6138, dtype="float32") /* ty=float32 */;
  %641 = cast(%var_6139, dtype="float32") /* ty=Tensor[(288), float32] */;
  %642 = reshape(%640, newshape=[]) /* ty=float32 */;
  %643 = reshape(%641, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %644 = @func_4648(%642, %643) /* ty=(Tensor[(16, 6, 3), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint64], Tensor[(12, 11, 11), float64]) */;
  %645 = cast(%635, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %646 = reshape(%645, newshape=[1452]) /* ty=Tensor[(1452), float64] */;
  %647 = @func_6071(%646) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) */;
  %648 = %647.0;
  %649 = cast(%648, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %650 = cast(%var_6138, dtype="int32") /* ty=int32 */;
  %651 = greater_equal(%638, %639) /* ty=Tensor[(12, 11, 11), bool] */;
  %652 = %644.1;
  %653 = minimum(%649, %650) /* ty=Tensor[(9, 12, 13), int32] */;
  (%651, %652, %var_6139, %653)
}

def @func_2078() -> (Tensor[(16, 12, 2), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) {
  %654 = cast(meta[relay.Constant][25] /* ty=Tensor[(16, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 2), float32] */;
  %655 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %656 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %657 = log(%654) /* ty=Tensor[(16, 12, 2), float32] */;
  %658 = %655.0;
  %659 = %656.0;
  (%657, %658, %659)
}

def @func_542(%var_507: Tensor[(12, 11, 11), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) {
  %660 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %661 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %662 = %661.1;
  %663 = cast(%var_507, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %664 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%662, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %667 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %668 = cast(meta[relay.Constant][26] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %669 = reshape(%668, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %670 = @func_280(%669) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %671 = %660.1;
  %672 = floor_mod(%665, %666) /* ty=Tensor[(12, 11, 11), float32] */;
  %673 = %667.3;
  %674 = %670.1;
  (%671, %672, %673, %674, meta[relay.Constant][26] /* ty=Tensor[(1404), float64] */)
}

def @func_4754(%var_4736: Tensor[(15, 6, 12), float32]) -> (Tensor[(15, 6, 12), bool], Tensor[(15, 6, 12), float64], Tensor[(12, 11, 11), float64]) {
  %675 = cast(%var_4736, dtype="float32") /* ty=Tensor[(15, 6, 12), float32] */;
  %676 = acos(%675) /* ty=Tensor[(15, 6, 12), float32] */;
  %677 = cast(%var_4736, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %678 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%676, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = cast(%var_4736, dtype="float64") /* ty=Tensor[(15, 6, 12), float64] */;
  %682 = @func_4431() /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %683 = less_equal(%679, %680) /* ty=Tensor[(15, 6, 12), bool] */;
  %684 = acosh(%681) /* ty=Tensor[(15, 6, 12), float64] */;
  %685 = %682.1;
  (%683, %684, %685)
}

def @func_4225() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(3, 6, 13), float32], Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float64], Tensor[(105), float32]) {
  %686 = @func_3139() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) */;
  %687 = @func_3544() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) */;
  %688 = @func_3074() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %689 = cast(meta[relay.Constant][27] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %690 = cast(meta[relay.Constant][27] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
  %691 = reshape(%689, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float32] */;
  %692 = reshape(%690, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float32] */;
  %693 = @func_1783(%691, %692) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(3, 7, 5), int16]) */;
  %694 = %686.0;
  %695 = %687.2;
  %696 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
  %697 = %688.4;
  %698 = %693.0;
  (%694, %695, %696, %697, %698, meta[relay.Constant][27] /* ty=Tensor[(105), float32] */)
}

def @func_4703() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %699 = @func_4459() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %700 = @func_2946() /* ty=Tensor[(12, 11, 11), float64] */;
  %701 = %699.0;
  (%700, %701)
}

def @func_5079() -> Tensor[(12, 11, 11), float64] {
  @func_4059() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_4459() -> (Tensor[(12, 11, 11), float64],) {
  %702 = @func_3867() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %703 = %702.0;
  (%703,)
}

def @func_752() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %704 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %707 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %708 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %709 = atanh(%706) /* ty=Tensor[(12, 11, 11), float64] */;
  %710 = %707.0;
  %711 = %708.0;
  (%709, %710, %711)
}

def @func_353() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %712 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %713 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %716 = sinh(%715) /* ty=Tensor[(12, 11, 11), float32] */;
  %717 = cast(%716, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %718 = acos(%717) /* ty=Tensor[(12, 11, 11), float32] */;
  %719 = cast(%718, dtype="int64") /* ty=Tensor[(12, 11, 11), int64] */;
  %720 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%716, dtype="int64") /* ty=Tensor[(12, 11, 11), int64] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %723 = bitwise_or(%721, %722) /* ty=Tensor[(12, 11, 11), int64] */;
  %724 = cast(%723, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %725 = cast(%718, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %726 = cast(%723, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %727 = cast(%723, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %728 = %712.0;
  %729 = rsqrt(%724) /* ty=Tensor[(12, 11, 11), float64] */;
  %730 = log(%725) /* ty=Tensor[(12, 11, 11), float32] */;
  %731 = cos(%726) /* ty=Tensor[(12, 11, 11), float64] */;
  %732 = sqrt(%727) /* ty=Tensor[(12, 11, 11), float64] */;
  (%728, %729, %730, %731, %732)
}

def @func_929() -> Tensor[(12, 11, 11), float64] {
  %733 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %733.1
}

def @func_4431() -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  %734 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %735 = @func_3627() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %736 = %734.2;
  %737 = %735.1;
  (%736, %737)
}

def @func_4894(%var_4879: Tensor[(6, 3, 11), float32]) -> (Tensor[(6, 3, 11), float32],) {
  %738 = cast(%var_4879, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
  %739 = rsqrt(%738) /* ty=Tensor[(6, 3, 11), float32] */;
  (%739,)
}

def @func_2566() -> Tensor[(3, 6, 13), float32] {
  @func_871() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_3846() -> (Tensor[(12, 11, 11), float32],) {
  %740 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %741 = %740.1;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %743 = log2(%742) /* ty=Tensor[(12, 11, 11), float32] */;
  (%743,)
}

def @func_2298() -> (Tensor[(12, 11, 11), float64],) {
  %744 = @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %745 = %744.0;
  (%745,)
}

def @func_3227() -> Tensor[(12, 11, 11), float64] {
  @func_1945() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_1287(%var_1199: Tensor[(15, 4, 9), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(15, 4, 9), float64], Tensor[(15, 4, 9), bool], Tensor[(15, 4, 9), float32], Tensor[(13, 13, 5), bool], Tensor[(845), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %746 = cast(%var_1199, dtype="float64") /* ty=Tensor[(15, 4, 9), float64] */;
  %747 = sqrt(%746) /* ty=Tensor[(15, 4, 9), float64] */;
  %748 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 9), float64] */;
  %749 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%747, dtype="float64") /* ty=Tensor[(15, 4, 9), float64] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %752 = cast(%var_1199, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %753 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%747, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = logical_and(%754, %755) /* ty=Tensor[(15, 4, 9), bool] */;
  %757 = cast(%756, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %758 = shape_of(%747, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%747, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %761 = cast(meta[relay.Constant][28] /* ty=Tensor[(15, 4, 9), float64] */, dtype="float32") /* ty=Tensor[(15, 4, 9), float32] */;
  %762 = cast(meta[relay.Constant][29] /* ty=Tensor[(845), float32] */, dtype="float32") /* ty=Tensor[(845), float32] */;
  %763 = reshape(%762, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float32] */;
  %764 = @func_982(%763) /* ty=(Tensor[(13, 13, 5), bool],) */;
  %765 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
  %766 = cast(%765, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %767 = reshape(%766, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %768 = @func_422(%767) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %769 = cast(meta[relay.Constant][30] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %770 = reshape(%769, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %771 = @func_280(%770) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %772 = cast(meta[relay.Constant][30] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %773 = reshape(%772, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %774 = @func_280(%773) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %775 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %776 = add(%750, %751) /* ty=Tensor[(15, 4, 9), float64] */;
  %777 = less(%759, %760) /* ty=Tensor[(15, 4, 9), bool] */;
  %778 = asin(%761) /* ty=Tensor[(15, 4, 9), float32] */;
  %779 = %764.0;
  %780 = %768.1;
  %781 = %771.0;
  %782 = %774.1;
  %783 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %784 = %775.0;
  (%765, %776, %777, %778, %779, meta[relay.Constant][29] /* ty=Tensor[(845), float32] */, %780, %781, meta[relay.Constant][30] /* ty=Tensor[(1404), float64] */, %782, %783, %784)
}

def @func_5989() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %785 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %786 = @func_4459() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %787 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %788 = %785.1;
  %789 = %786.0;
  (%787, %788, %789)
}

def @func_7431(%var_7417: Tensor[(1404), float64]) -> (Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 10, 16), float32]) {
  %790 = @func_3074() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %791 = cast(%var_7417, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %792 = cast(%var_7417, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %793 = reshape(%791, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %794 = reshape(%792, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %795 = @func_1665(%793, %794) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %796 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %797 = %790.6;
  %798 = %795.5;
  %799 = @func_5752() /* ty=Tensor[(12, 11, 11), float64] */;
  %800 = %796.0;
  (%797, %798, %var_7417, %799, %800)
}

def @func_6248(%var_6209: Tensor[(4, 5, 8), int16], %var_6210: Tensor[(4, 5, 8), int16]) -> (Tensor[(4, 5, 8), float64], Tensor[(4, 5, 8), bool], Tensor[(12, 11, 11), uint8], Tensor[(4, 5, 8), bool]) {
  %801 = cast(%var_6210, dtype="int16") /* ty=Tensor[(4, 5, 8), int16] */;
  %802 = shape_of(%var_6209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%var_6209, dtype="int16") /* ty=Tensor[(4, 5, 8), int16] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %805 = bitwise_or(%803, %804) /* ty=Tensor[(4, 5, 8), int16] */;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %807 = log2(%806) /* ty=Tensor[(4, 5, 8), float64] */;
  %808 = cast(%807, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
  %809 = cast(%var_6210, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %810 = shape_of(%807, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%807, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %813 = @func_4671() /* ty=(Tensor[(12, 11, 11), uint8],) */;
  %814 = cast(%807, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %815 = shape_of(%805, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%805, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = acos(%808) /* ty=Tensor[(4, 5, 8), float64] */;
  %819 = less_equal(%811, %812) /* ty=Tensor[(4, 5, 8), bool] */;
  %820 = %813.0;
  %821 = logical_or(%816, %817) /* ty=Tensor[(4, 5, 8), bool] */;
  (%818, %819, %820, %821)
}

def @func_280(%var_253: Tensor[(9, 12, 13), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) {
  %822 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %823 = cast(%var_253, dtype="float64") /* ty=Tensor[(9, 12, 13), float64] */;
  %824 = asinh(%823) /* ty=Tensor[(9, 12, 13), float64] */;
  %825 = cast(%var_253, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = less_equal(%827, %828) /* ty=Tensor[(9, 12, 13), bool] */;
  %830 = cast(%824, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%829, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %834 = bitwise_and(%832, %833) /* ty=Tensor[(9, 12, 13), int32] */;
  %835 = cast(%834, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %836 = shape_of(%829, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%829, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %839 = %822.0;
  %840 = greater(%837, %838) /* ty=Tensor[(9, 12, 13), bool] */;
  (%839, %840)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_280(%var_253: Tensor[(9, 12, 13), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) {
  %0 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %1 = cast(%var_253, dtype="float64") /* ty=Tensor[(9, 12, 13), float64] */;
  %2 = asinh(%1) /* ty=Tensor[(9, 12, 13), float64] */;
  %3 = cast(%var_253, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%2, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = less_equal(%5, %6) /* ty=Tensor[(9, 12, 13), bool] */;
  %8 = cast(%2, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %9 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %10 = cast(%7, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %12 = bitwise_and(%10, %11) /* ty=Tensor[(9, 12, 13), int32] */;
  %13 = cast(%12, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %14 = shape_of(%7, dtype="int32") /* ty=Tensor[(3), int32] */;
  %15 = cast(%7, dtype="bool") /* ty=Tensor[(9, 12, 13), bool] */;
  %16 = dyn.reshape(%13, %14, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %17 = %0.0;
  %18 = greater(%15, %16) /* ty=Tensor[(9, 12, 13), bool] */;
  (%17, %18)
}

def @func_2156() -> (Tensor[(12, 11, 11), float64],) {
  @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_5563() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8]) {
  @func_5561() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8]) */
}

def @func_5847() -> Tensor[(10, 4, 14), float64] {
  %20 = fn () -> Tensor[(10, 4, 14), float64] {
    %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 4, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 4, 14), float64] */;
    tan(%19) /* ty=Tensor[(10, 4, 14), float64] */
  };
  %20() /* ty=Tensor[(10, 4, 14), float64] */
}

def @func_5139() -> (Tensor[(12, 11, 11), float64],) {
  %23 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %21 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %22 = %21.0;
    (%22,)
  };
  %23() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_6193(%var_6191: float32, %var_6192: Tensor[(288), float32]) -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(288), float32], Tensor[(9, 12, 13), int32]) {
  @func_6189(%var_6191, %var_6192) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(288), float32], Tensor[(9, 12, 13), int32]) */
}

def @func_4315() -> Tensor[(3, 6, 13), float32] {
  %24 = @func_1869() /* ty=(Tensor[(3, 6, 13), float32],) */;
  %24.0
}

def @func_2734() -> Tensor[(12, 11, 11), float64] {
  @func_2732() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_4896(%var_4895: Tensor[(6, 3, 11), float32]) -> (Tensor[(6, 3, 11), float32],) {
  %27 = fn (%var_4879: Tensor[(6, 3, 11), float32]) -> (Tensor[(6, 3, 11), float32],) {
    %25 = cast(%var_4879, dtype="float32") /* ty=Tensor[(6, 3, 11), float32] */;
    %26 = rsqrt(%25) /* ty=Tensor[(6, 3, 11), float32] */;
    (%26,)
  };
  %27(%var_4895) /* ty=(Tensor[(6, 3, 11), float32],) */
}

def @func_985(%var_983: Tensor[(13, 13, 5), float32]) -> (Tensor[(13, 13, 5), bool],) {
  @func_982(%var_983) /* ty=(Tensor[(13, 13, 5), bool],) */
}

def @func_3563() -> Tensor[(12, 11, 11), float64] {
  @func_3561() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_1947() -> Tensor[(12, 11, 11), float64] {
  @func_1945() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_3588(%var_3578: Tensor[(3, 6, 13), float32]) -> Tensor[(3, 6, 13), uint32] {
  %28 = @func_2566() /* ty=Tensor[(3, 6, 13), float32] */;
  %29 = cast(%var_3578, dtype="uint32") /* ty=Tensor[(3, 6, 13), uint32] */;
  %30 = shape_of(%28, dtype="int32") /* ty=Tensor[(3), int32] */;
  %31 = cast(%28, dtype="uint32") /* ty=Tensor[(3, 6, 13), uint32] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%31, %32) /* ty=Tensor[(3, 6, 13), uint32] */
}

def @func_1374() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %41 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %33 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %34 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %35 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %36 = %35.0;
    %37 = cast(%36, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %38 = %33.0;
    %39 = %34.0;
    %40 = log10(%37) /* ty=Tensor[(12, 11, 11), float64] */;
    (%38, %39, %40)
  };
  %41() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_424(%var_423: Tensor[(12, 11, 11), float64]) -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  %51 = fn (%var_414: Tensor[(12, 11, 11), float64]) -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
    %42 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %43 = %42.0;
    %44 = cast(%var_414, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
    %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
    %46 = cast(%43, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
    %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %48 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %49 = not_equal(%46, %47) /* ty=Tensor[(12, 11, 11), bool] */;
    %50 = %48.0;
    (%49, %50)
  };
  %51(%var_423) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */
}

def @func_6837() -> Tensor[(12, 11, 11), float32] {
  %52 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %52.0
}

def @func_4673() -> (Tensor[(12, 11, 11), uint8],) {
  @func_4671() /* ty=(Tensor[(12, 11, 11), uint8],) */
}

def @func_2566() -> Tensor[(3, 6, 13), float32] {
  @func_871() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_4754(%var_4736: Tensor[(15, 6, 12), float32]) -> (Tensor[(15, 6, 12), bool], Tensor[(15, 6, 12), float64], Tensor[(12, 11, 11), float64]) {
  %53 = cast(%var_4736, dtype="float32") /* ty=Tensor[(15, 6, 12), float32] */;
  %54 = acos(%53) /* ty=Tensor[(15, 6, 12), float32] */;
  %55 = cast(%var_4736, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="bool") /* ty=Tensor[(15, 6, 12), bool] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %59 = cast(%var_4736, dtype="float64") /* ty=Tensor[(15, 6, 12), float64] */;
  %60 = @func_4431() /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %61 = less_equal(%57, %58) /* ty=Tensor[(15, 6, 12), bool] */;
  %62 = acosh(%59) /* ty=Tensor[(15, 6, 12), float64] */;
  %63 = %60.1;
  (%61, %62, %63)
}

def @func_6703(%var_6695: Tensor[(15, 8, 7), float64]) -> (Tensor[(15, 8, 7), float64],) {
  %64 = cast(%var_6695, dtype="float64") /* ty=Tensor[(15, 8, 7), float64] */;
  %65 = sigmoid(%64) /* ty=Tensor[(15, 8, 7), float64] */;
  (%65,)
}

def @func_3561() -> Tensor[(12, 11, 11), float64] {
  @func_2946() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_7344() -> (Tensor[(4, 16, 16), float64], Tensor[(160), int16], Tensor[(4, 5, 8), float32]) {
  %82 = fn () -> (Tensor[(4, 16, 16), float64], Tensor[(160), int16], Tensor[(4, 5, 8), float32]) {
    %66 = @func_7042() /* ty=Tensor[(4, 16, 16), float32] */;
    %67 = cast(%66, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %68 = sin(%67) /* ty=Tensor[(4, 16, 16), float64] */;
    %69 = cast(%68, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %70 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%66, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %73 = cast(meta[relay.Constant][1] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
    %74 = cast(meta[relay.Constant][1] /* ty=Tensor[(160), int16] */, dtype="int16") /* ty=Tensor[(160), int16] */;
    %75 = reshape(%73, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), int16] */;
    %76 = reshape(%74, newshape=[4, 5, 8]) /* ty=Tensor[(4, 5, 8), int16] */;
    %77 = @func_6248(%75, %76) /* ty=(Tensor[(4, 5, 8), float64], Tensor[(4, 5, 8), bool], Tensor[(12, 11, 11), uint8], Tensor[(4, 5, 8), bool]) */;
    %78 = %77.1;
    %79 = cast(%78, dtype="float32") /* ty=Tensor[(4, 5, 8), float32] */;
    %80 = floor_mod(%71, %72) /* ty=Tensor[(4, 16, 16), float64] */;
    %81 = sqrt(%79) /* ty=Tensor[(4, 5, 8), float32] */;
    (%80, meta[relay.Constant][1] /* ty=Tensor[(160), int16] */, %81)
  };
  %82() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(160), int16], Tensor[(4, 5, 8), float32]) */
}

def @func_7393() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %87 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %83 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %84 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %85 = %83.1;
    %86 = %84.2;
    (%85, %86)
  };
  %87() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_283(%var_281: Tensor[(9, 12, 13), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) {
  @func_280(%var_281) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */
}

def @func_5650() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) {
  %88 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %89 = cast(meta[relay.Constant][2] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
  %91 = cast(meta[relay.Constant][2] /* ty=Tensor[(1078), float64] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
  %92 = reshape(%89, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %93 = reshape(%90, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %94 = reshape(%91, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %95 = @func_4010(%92, %93, %94) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */;
  %96 = %88.1;
  %97 = %95.3;
  (%96, %97, meta[relay.Constant][2] /* ty=Tensor[(1078), float64] */)
}

def @func_5259() -> (Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 13, 4), float32], Tensor[(156), float32], Tensor[(12, 11, 11), float64]) {
  %110 = fn () -> (Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 13, 4), float32], Tensor[(156), float32], Tensor[(12, 11, 11), float64]) {
    %98 = @func_3074() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %99 = @func_2197() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %100 = cast(meta[relay.Constant][3] /* ty=Tensor[(156), float32] */, dtype="float32") /* ty=Tensor[(156), float32] */;
    %101 = reshape(%100, newshape=[3, 13, 4]) /* ty=Tensor[(3, 13, 4), float32] */;
    %102 = @func_3724(%101) /* ty=(Tensor[(3, 13, 4), float32], Tensor[(12, 11, 11), float64]) */;
    %103 = %99.0;
    %104 = cast(%103, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %105 = reshape(%104, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
    %106 = @func_542(%105) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) */;
    %107 = %98.3;
    %108 = %102.0;
    %109 = %106.0;
    (%107, %103, %108, meta[relay.Constant][3] /* ty=Tensor[(156), float32] */, %109)
  };
  %110() /* ty=(Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 13, 4), float32], Tensor[(156), float32], Tensor[(12, 11, 11), float64]) */
}

def @func_6189(%var_6138: float32, %var_6139: Tensor[(288), float32]) -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(288), float32], Tensor[(9, 12, 13), int32]) {
  %111 = @func_2732() /* ty=Tensor[(12, 11, 11), float64] */;
  %112 = @func_3177() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %115 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%111, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %118 = cast(%var_6138, dtype="float32") /* ty=float32 */;
  %119 = cast(%var_6139, dtype="float32") /* ty=Tensor[(288), float32] */;
  %120 = reshape(%118, newshape=[]) /* ty=float32 */;
  %121 = reshape(%119, newshape=[16, 6, 3]) /* ty=Tensor[(16, 6, 3), float32] */;
  %122 = @func_4648(%120, %121) /* ty=(Tensor[(16, 6, 3), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint64], Tensor[(12, 11, 11), float64]) */;
  %123 = cast(%113, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %124 = reshape(%123, newshape=[1452]) /* ty=Tensor[(1452), float64] */;
  %125 = @func_6071(%124) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="int32") /* ty=Tensor[(9, 12, 13), int32] */;
  %128 = cast(%var_6138, dtype="int32") /* ty=int32 */;
  %129 = greater_equal(%116, %117) /* ty=Tensor[(12, 11, 11), bool] */;
  %130 = %122.1;
  %131 = minimum(%127, %128) /* ty=Tensor[(9, 12, 13), int32] */;
  (%129, %130, %var_6139, %131)
}

def @func_3671() -> (Tensor[(12, 11, 11), float64],) {
  @func_3669() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_5741() -> Tensor[(910), float32] {
  %132 = @func_5187() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) */;
  %133 = %132.2;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(910), float32] */;
  acosh(%134) /* ty=Tensor[(910), float32] */
}

def @func_7471(%var_7466: Tensor[(3, 6, 13), float32]) -> (Tensor[(3, 6, 13), float64],) {
  %135 = @func_1869() /* ty=(Tensor[(3, 6, 13), float32],) */;
  %136 = %135.0;
  %137 = cast(%var_7466, dtype="float64") /* ty=Tensor[(3, 6, 13), float64] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="float64") /* ty=Tensor[(3, 6, 13), float64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %141 = floor_mod(%139, %140) /* ty=Tensor[(3, 6, 13), float64] */;
  (%141,)
}

def @func_4704() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %145 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %142 = @func_4459() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %143 = @func_2946() /* ty=Tensor[(12, 11, 11), float64] */;
    %144 = %142.0;
    (%143, %144)
  };
  %145() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_2815() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %146 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %147 = @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %148 = %147.0;
  %149 = cast(%148, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %150 = asin(%149) /* ty=Tensor[(12, 11, 11), float32] */;
  %151 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %154 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%150, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %158 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %159 = %146.1;
  %160 = logical_or(%155, %156) /* ty=Tensor[(12, 11, 11), bool] */;
  %161 = @func_2732() /* ty=Tensor[(12, 11, 11), float64] */;
  %162 = %157.1;
  %163 = %158.0;
  (%159, %160, %161, %162, %163)
}

def @func_4048() -> (Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  %164 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %165 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %166 = %164.1;
  %167 = %165.0;
  (%166, %167)
}

def @func_6908() -> (Tensor[(12, 11, 11), float32],) {
  %170 = fn () -> (Tensor[(12, 11, 11), float32],) {
    %168 = @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */;
    %169 = %168.0;
    (%169,)
  };
  %170() /* ty=(Tensor[(12, 11, 11), float32],) */
}

def @func_1287(%var_1199: Tensor[(15, 4, 9), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(15, 4, 9), float64], Tensor[(15, 4, 9), bool], Tensor[(15, 4, 9), float32], Tensor[(13, 13, 5), bool], Tensor[(845), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %171 = cast(%var_1199, dtype="float64") /* ty=Tensor[(15, 4, 9), float64] */;
  %172 = sqrt(%171) /* ty=Tensor[(15, 4, 9), float64] */;
  %173 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 4, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 9), float64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="float64") /* ty=Tensor[(15, 4, 9), float64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %177 = cast(%var_1199, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %178 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%172, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = logical_and(%179, %180) /* ty=Tensor[(15, 4, 9), bool] */;
  %182 = cast(%181, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %183 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%172, dtype="bool") /* ty=Tensor[(15, 4, 9), bool] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %186 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 4, 9), float64] */, dtype="float32") /* ty=Tensor[(15, 4, 9), float32] */;
  %187 = cast(meta[relay.Constant][5] /* ty=Tensor[(845), float32] */, dtype="float32") /* ty=Tensor[(845), float32] */;
  %188 = reshape(%187, newshape=[13, 13, 5]) /* ty=Tensor[(13, 13, 5), float32] */;
  %189 = @func_982(%188) /* ty=(Tensor[(13, 13, 5), bool],) */;
  %190 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %192 = reshape(%191, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %193 = @func_422(%192) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %194 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %195 = reshape(%194, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %196 = @func_280(%195) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %197 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %198 = reshape(%197, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %199 = @func_280(%198) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %200 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %201 = add(%175, %176) /* ty=Tensor[(15, 4, 9), float64] */;
  %202 = less(%184, %185) /* ty=Tensor[(15, 4, 9), bool] */;
  %203 = asin(%186) /* ty=Tensor[(15, 4, 9), float32] */;
  %204 = %189.0;
  %205 = %193.1;
  %206 = %196.0;
  %207 = %199.1;
  %208 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %209 = %200.0;
  (%190, %201, %202, %203, %204, meta[relay.Constant][5] /* ty=Tensor[(845), float32] */, %205, %206, meta[relay.Constant][6] /* ty=Tensor[(1404), float64] */, %207, %208, %209)
}

def @func_4651(%var_4649: float32, %var_4650: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint64], Tensor[(12, 11, 11), float64]) {
  %219 = fn (%var_4607: float32, %var_4608: Tensor[(16, 6, 3), float32]) -> (Tensor[(16, 6, 3), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint64], Tensor[(12, 11, 11), float64]) {
    %210 = cast(%var_4607, dtype="bool") /* ty=bool */;
    %211 = cast(%var_4608, dtype="bool") /* ty=Tensor[(16, 6, 3), bool] */;
    %212 = @func_2400() /* ty=(Tensor[(12, 11, 11), uint64],) */;
    %213 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %214 = less_equal(%210, %211) /* ty=Tensor[(16, 6, 3), bool] */;
    %215 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
    %216 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
    %217 = %212.0;
    %218 = %213.1;
    (%214, %215, %216, %217, %218)
  };
  %219(%var_4649, %var_4650) /* ty=(Tensor[(16, 6, 3), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint64], Tensor[(12, 11, 11), float64]) */
}

def @func_3139() -> (Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) {
  %220 = @func_2197() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %221 = cast(meta[relay.Constant][7] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %222 = reshape(%221, newshape=[8, 8, 14]) /* ty=Tensor[(8, 8, 14), float32] */;
  %223 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %224 = %220.0;
  %225 = @func_2864(%222) /* ty=Tensor[(8, 8, 14), float32] */;
  %226 = %223.2;
  (%224, %225, meta[relay.Constant][7] /* ty=Tensor[(896), float32] */, %226)
}

def @func_4728() -> Tensor[(12, 11, 11), float64] {
  @func_4726() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_3075() -> (Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  %256 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
    %227 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %228 = cast(meta[relay.Constant][9] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %229 = cast(meta[relay.Constant][9] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %230 = reshape(%228, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %231 = reshape(%229, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %232 = @func_2365(%230, %231) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) */;
    %233 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
    %234 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float32] */, dtype="float32") /* ty=Tensor[(72), float32] */;
    %235 = %227.0;
    %236 = cast(%235, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %237 = reshape(%234, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), float32] */;
    %238 = reshape(%236, newshape=[1452]) /* ty=Tensor[(1452), float64] */;
    %239 = @func_912(%237, %238) /* ty=(Tensor[(4, 9, 2), int32], Tensor[(12, 11, 11), float64], Tensor[(1452), float64], Tensor[(12, 11, 11), float64]) */;
    %240 = %239.0;
    %241 = cast(%240, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
    %242 = sinh(%241) /* ty=Tensor[(4, 9, 2), float64] */;
    %243 = cast(%242, dtype="float64") /* ty=Tensor[(4, 9, 2), float64] */;
    %244 = atan(%243) /* ty=Tensor[(4, 9, 2), float64] */;
    %245 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 9, 2), float64] */, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
    %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
    %247 = cast(%244, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
    %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %249 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %250 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %251 = %232.4;
    %252 = %233.0;
    %253 = floor_divide(%247, %248) /* ty=Tensor[(4, 9, 2), float32] */;
    %254 = %249.1;
    %255 = %250.0;
    (%235, meta[relay.Constant][8] /* ty=Tensor[(72), float32] */, %251, meta[relay.Constant][9] /* ty=Tensor[(1404), float64] */, %252, %253, %254, %255)
  };
  %256() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */
}

def @func_2490() -> Tensor[(12, 11, 11), float64] {
  @func_2488() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_2892(%var_2891: Tensor[(3, 468), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 468), float64]) {
  %265 = fn (%var_2880: Tensor[(3, 468), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 468), float64]) {
    %257 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %258 = cast(%var_2880, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
    %259 = cast(%var_2880, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
    %260 = reshape(%258, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %261 = reshape(%259, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %262 = @func_2365(%260, %261) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) */;
    %263 = %257.0;
    %264 = %262.3;
    (%263, %264, %var_2880)
  };
  %265(%var_2891) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 468), float64]) */
}

def @func_5990() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %271 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %266 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %267 = @func_4459() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %268 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
    %269 = %266.1;
    %270 = %267.0;
    (%268, %269, %270)
  };
  %271() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_3141() -> (Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) {
  @func_3139() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) */
}

def @func_974() -> Tensor[(12, 11, 11), float64] {
  %273 = fn () -> Tensor[(12, 11, 11), float64] {
    %272 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %272.2
  };
  %273() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_4089() -> (Tensor[(12, 11, 11), float32],) {
  @func_4087() /* ty=(Tensor[(12, 11, 11), float32],) */
}

def @func_160() -> (Tensor[(12, 11, 11), float64],) {
  %276 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %274 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %275 = atan(%274) /* ty=Tensor[(12, 11, 11), float64] */;
    (%275,)
  };
  %276() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_753() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %285 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %277 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %278 = %277.0;
    %279 = cast(%278, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %280 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %281 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %282 = atanh(%279) /* ty=Tensor[(12, 11, 11), float64] */;
    %283 = %280.0;
    %284 = %281.0;
    (%282, %283, %284)
  };
  %285() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_2080() -> (Tensor[(16, 12, 2), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) {
  @func_2078() /* ty=(Tensor[(16, 12, 2), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */
}

def @func_5204() -> Tensor[(12, 11, 11), float64] {
  @func_4831() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_1290(%var_1288: Tensor[(15, 4, 9), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(15, 4, 9), float64], Tensor[(15, 4, 9), bool], Tensor[(15, 4, 9), float32], Tensor[(13, 13, 5), bool], Tensor[(845), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_1287(%var_1288) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(15, 4, 9), float64], Tensor[(15, 4, 9), bool], Tensor[(15, 4, 9), float32], Tensor[(13, 13, 5), bool], Tensor[(845), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_4671() -> (Tensor[(12, 11, 11), uint8],) {
  %286 = @func_4048() /* ty=(Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %287 = %286.0;
  (%287,)
}

def @func_7621() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) {
  %288 = @func_6907() /* ty=(Tensor[(12, 11, 11), float32],) */;
  %289 = @func_2197() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %290 = @func_4726() /* ty=Tensor[(12, 11, 11), float64] */;
  %291 = %288.0;
  %292 = %289.0;
  (%290, %291, %292)
}

def @func_5652() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) {
  @func_5650() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) */
}

def @func_831() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) {
  @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */
}

def @func_1786(%var_1784: Tensor[(3, 7, 5), float32], %var_1785: Tensor[(3, 7, 5), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(3, 7, 5), int16]) {
  %305 = fn (%var_1770: Tensor[(3, 7, 5), float32], %var_1771: Tensor[(3, 7, 5), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(3, 7, 5), int16]) {
    %293 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %294 = cast(%var_1771, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
    %295 = shape_of(%var_1770, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%var_1770, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %298 = equal(%296, %297) /* ty=Tensor[(3, 7, 5), bool] */;
    %299 = cast(%298, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
    %300 = shape_of(%var_1771, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(%var_1771, dtype="int16") /* ty=Tensor[(3, 7, 5), int16] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %303 = %293.0;
    %304 = bitwise_xor(%301, %302) /* ty=Tensor[(3, 7, 5), int16] */;
    (%303, %304)
  };
  %305(%var_1784, %var_1785) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(3, 7, 5), int16]) */
}

def @func_1028() -> (Tensor[(12, 11, 11), float64],) {
  %308 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %306 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %307 = %306.1;
    (%307,)
  };
  %308() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_7064() -> (Tensor[(3, 6, 13), float32],) {
  %309 = @func_4315() /* ty=Tensor[(3, 6, 13), float32] */;
  (%309,)
}

def @func_7264(%var_7262: float64, %var_7263: Tensor[(1, 12, 5), float64]) -> (Tensor[(15, 4, 9), bool], Tensor[(540), float64], Tensor[(1, 12, 5), float64], Tensor[(?, 12, 5), float64]) {
  %325 = fn (%var_7225: float64, %var_7226: Tensor[(1, 12, 5), float64]) -> (Tensor[(15, 4, 9), bool], Tensor[(540), float64], Tensor[(1, 12, 5), float64], Tensor[(?, 12, 5), float64]) {
    %310 = cast(meta[relay.Constant][12] /* ty=Tensor[(540), float64] */, dtype="float64") /* ty=Tensor[(540), float64] */;
    %311 = reshape(%310, newshape=[15, 4, 9]) /* ty=Tensor[(15, 4, 9), float64] */;
    %312 = @func_1287(%311) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(15, 4, 9), float64], Tensor[(15, 4, 9), bool], Tensor[(15, 4, 9), float32], Tensor[(13, 13, 5), bool], Tensor[(845), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %313 = cast(%var_7225, dtype="bool") /* ty=bool */;
    %314 = cast(%var_7226, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
    %315 = equal(%313, %314) /* ty=Tensor[(1, 12, 5), bool] */;
    %316 = cast(%315, dtype="float64") /* ty=Tensor[(1, 12, 5), float64] */;
    %317 = cast(%var_7225, dtype="float64") /* ty=float64 */;
    %318 = cast(%var_7226, dtype="float64") /* ty=Tensor[(1, 12, 5), float64] */;
    %319 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %320 = cast(%315, dtype="float64") /* ty=Tensor[(1, 12, 5), float64] */;
    %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %322 = %312.2;
    %323 = floor_mod(%316, %317) /* ty=Tensor[(1, 12, 5), float64] */;
    %324 = floor_divide(%320, %321) /* ty=Tensor[(?, 12, 5), float64] */;
    (%322, meta[relay.Constant][12] /* ty=Tensor[(540), float64] */, %323, %324)
  };
  %325(%var_7262, %var_7263) /* ty=(Tensor[(15, 4, 9), bool], Tensor[(540), float64], Tensor[(1, 12, 5), float64], Tensor[(?, 12, 5), float64]) */
}

def @func_2405() -> Tensor[(3, 6, 13), float32] {
  @func_871() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_4583() -> (Tensor[(12, 11, 11), float64],) {
  %328 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %326 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %327 = %326.1;
    (%327,)
  };
  %328() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_3628() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %332 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %329 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %330 = %329.2;
    %331 = @func_2946() /* ty=Tensor[(12, 11, 11), float64] */;
    (%330, %331)
  };
  %332() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_1669(%var_1667: Tensor[(54, 26), float64], %var_1668: Tensor[(54, 26), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_1665(%var_1667, %var_1668) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_3436(%var_3434: Tensor[(6, 14, 8), float32]) -> (Tensor[(6, 14, 8), bool],) {
  @func_3433(%var_3434) /* ty=(Tensor[(6, 14, 8), bool],) */
}

def @func_6752() -> Tensor[(12, 11, 11), float64] {
  %333 = @func_6642() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) */;
  %333.1
}

def @func_2864(%var_2856: Tensor[(8, 8, 14), float32]) -> Tensor[(8, 8, 14), float32] {
  %334 = cast(%var_2856, dtype="float32") /* ty=Tensor[(8, 8, 14), float32] */;
  %335 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(8, 8, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(meta[relay.Constant][13] /* ty=Tensor[(8, 8, 14), float32] */, dtype="float32") /* ty=Tensor[(8, 8, 14), float32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%336, %337) /* ty=Tensor[(8, 8, 14), float32] */
}

def @func_1479() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) {
  %343 = fn () -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) {
    %338 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %339 = %338.0;
    %340 = cast(%339, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
    %341 = tan(%340) /* ty=Tensor[(12, 11, 11), float32] */;
    %342 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
    (%341, %342)
  };
  %343() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */
}

def @func_354() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %365 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %344 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %345 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %346 = %345.0;
    %347 = cast(%346, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
    %348 = sinh(%347) /* ty=Tensor[(12, 11, 11), float32] */;
    %349 = cast(%348, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
    %350 = acos(%349) /* ty=Tensor[(12, 11, 11), float32] */;
    %351 = cast(%350, dtype="int64") /* ty=Tensor[(12, 11, 11), int64] */;
    %352 = shape_of(%348, dtype="int32") /* ty=Tensor[(3), int32] */;
    %353 = cast(%348, dtype="int64") /* ty=Tensor[(12, 11, 11), int64] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %355 = bitwise_or(%353, %354) /* ty=Tensor[(12, 11, 11), int64] */;
    %356 = cast(%355, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %357 = cast(%350, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
    %358 = cast(%355, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %359 = cast(%355, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %360 = %344.0;
    %361 = rsqrt(%356) /* ty=Tensor[(12, 11, 11), float64] */;
    %362 = log(%357) /* ty=Tensor[(12, 11, 11), float32] */;
    %363 = cos(%358) /* ty=Tensor[(12, 11, 11), float64] */;
    %364 = sqrt(%359) /* ty=Tensor[(12, 11, 11), float64] */;
    (%360, %361, %362, %363, %364)
  };
  %365() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_7019(%var_7017: Tensor[(4, 15, 15), float32], %var_7018: Tensor[(4, 15, 15), float32]) -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), int8]) {
  %373 = fn (%var_6977: Tensor[(4, 15, 15), float32], %var_7000: Tensor[(4, 15, 15), float32]) -> (Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), int8]) {
    %366 = cast(%var_6977, dtype="float32") /* ty=Tensor[(4, 15, 15), float32] */;
    %367 = cast(%var_7000, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
    %368 = shape_of(%var_6977, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%var_6977, dtype="int8") /* ty=Tensor[(4, 15, 15), int8] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %371 = exp(%366) /* ty=Tensor[(4, 15, 15), float32] */;
    %372 = multiply(%369, %370) /* ty=Tensor[(4, 15, 15), int8] */;
    (%371, %372)
  };
  %373(%var_7017, %var_7018) /* ty=(Tensor[(4, 15, 15), float32], Tensor[(4, 15, 15), int8]) */
}

def @func_3178() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %378 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %374 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %375 = @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %376 = %374.0;
    %377 = %375.0;
    (%376, %377)
  };
  %378() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_4757(%var_4755: Tensor[(15, 6, 12), float32]) -> (Tensor[(15, 6, 12), bool], Tensor[(15, 6, 12), float64], Tensor[(12, 11, 11), float64]) {
  @func_4754(%var_4755) /* ty=(Tensor[(15, 6, 12), bool], Tensor[(15, 6, 12), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_6839() -> Tensor[(12, 11, 11), float32] {
  @func_6837() /* ty=Tensor[(12, 11, 11), float32] */
}

def @func_5308() -> (Tensor[(12, 11, 11), float64],) {
  %381 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %379 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %380 = %379.0;
    (%380,)
  };
  %381() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_4142() -> (Tensor[(12, 11, 11), float64],) {
  %383 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %382 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
    (%382,)
  };
  %383() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_872() -> Tensor[(3, 6, 13), float32] {
  %385 = fn () -> Tensor[(3, 6, 13), float32] {
    %384 = cast(meta[relay.Constant][14] /* ty=Tensor[(3, 6, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    log10(%384) /* ty=Tensor[(3, 6, 13), float32] */
  };
  %385() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_3868() -> (Tensor[(12, 11, 11), float64],) {
  %388 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %386 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %387 = %386.2;
    (%387,)
  };
  %388() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_1306() -> (Tensor[(12, 11, 11), float64],) {
  @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_2384() -> Tensor[(12, 11, 11), float64] {
  @func_2382() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_1549() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %389 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %390 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %391 = %389.0;
  %392 = %390.1;
  (%391, %392)
}

def @func_3316() -> Tensor[(12, 11, 11), float32] {
  %393 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %393.0
}

def @func_4014(%var_4011: Tensor[(7, 11, 14), float64], %var_4012: Tensor[(7, 11, 14), float64], %var_4013: Tensor[(7, 11, 14), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) {
  %426 = fn (%var_3942: Tensor[(7, 11, 14), float64], %var_3951: Tensor[(7, 11, 14), float64], %var_3997: Tensor[(7, 11, 14), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) {
    %394 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %395 = cast(%var_3942, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %396 = cosh(%395) /* ty=Tensor[(7, 11, 14), float64] */;
    %397 = cast(%var_3951, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
    %398 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %399 = cast(%396, dtype="uint16") /* ty=Tensor[(7, 11, 14), uint16] */;
    %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %401 = bitwise_and(%399, %400) /* ty=Tensor[(7, 11, 14), uint16] */;
    %402 = cast(%401, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %403 = shape_of(%396, dtype="int32") /* ty=Tensor[(3), int32] */;
    %404 = cast(%396, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %406 = mod(%404, %405) /* ty=Tensor[(7, 11, 14), float64] */;
    %407 = cast(%var_3942, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
    %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
    %409 = cast(%406, dtype="int64") /* ty=Tensor[(7, 11, 14), int64] */;
    %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %411 = cast(%396, dtype="float32") /* ty=Tensor[(7, 11, 14), float32] */;
    %412 = sigmoid(%411) /* ty=Tensor[(7, 11, 14), float32] */;
    %413 = cast(%var_3997, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %415 = cast(%412, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %417 = power(%415, %416) /* ty=Tensor[(7, 11, 14), float64] */;
    %418 = cast(%401, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %419 = shape_of(%417, dtype="int32") /* ty=Tensor[(3), int32] */;
    %420 = cast(%417, dtype="float64") /* ty=Tensor[(7, 11, 14), float64] */;
    %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %422 = @func_3227() /* ty=Tensor[(12, 11, 11), float64] */;
    %423 = %394.0;
    %424 = bitwise_xor(%409, %410) /* ty=Tensor[(7, 11, 14), int64] */;
    %425 = floor_divide(%420, %421) /* ty=Tensor[(7, 11, 14), float64] */;
    (%422, %423, %424, %425)
  };
  %426(%var_4011, %var_4012, %var_4013) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */
}

def @func_2368(%var_2366: Tensor[(54, 26), float64], %var_2367: Tensor[(54, 26), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) {
  %451 = fn (%var_2324: Tensor[(54, 26), float64], %var_2361: Tensor[(54, 26), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) {
    %427 = @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %428 = cast(meta[relay.Constant][15] /* ty=Tensor[(54, 26), float64] */, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
    %429 = cast(meta[relay.Constant][15] /* ty=Tensor[(54, 26), float64] */, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
    %430 = reshape(%428, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %431 = reshape(%429, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %432 = @func_1665(%430, %431) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %433 = cast(%var_2324, dtype="uint32") /* ty=Tensor[(54, 26), uint32] */;
    %434 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(54, 26), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %435 = cast(meta[relay.Constant][15] /* ty=Tensor[(54, 26), float64] */, dtype="uint32") /* ty=Tensor[(54, 26), uint32] */;
    %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %437 = @func_1373() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %438 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
    %439 = cast(%var_2324, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
    %440 = sqrt(%439) /* ty=Tensor[(54, 26), float64] */;
    %441 = cast(%var_2361, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
    %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(2), int32] */;
    %443 = cast(%440, dtype="int16") /* ty=Tensor[(54, 26), int16] */;
    %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %445 = %427.1;
    %446 = %432.0;
    %447 = maximum(%435, %436) /* ty=Tensor[(54, 26), uint32] */;
    %448 = %437.1;
    %449 = %438.2;
    %450 = logical_xor(%443, %444) /* ty=Tensor[(54, 26), int16] */;
    (%445, %446, %447, %448, %449, %450)
  };
  %451(%var_2366, %var_2367) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(54, 26), uint32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(54, 26), int16]) */
}

def @func_4876() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) {
  %462 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) {
    %452 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %453 = cast(meta[relay.Constant][16] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
    %454 = cast(meta[relay.Constant][16] /* ty=Tensor[(1078), float64] */, dtype="float64") /* ty=Tensor[(1078), float64] */;
    %455 = cast(meta[relay.Constant][16] /* ty=Tensor[(1078), float64] */, dtype="float32") /* ty=Tensor[(1078), float32] */;
    %456 = reshape(%453, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
    %457 = reshape(%454, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
    %458 = reshape(%455, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
    %459 = @func_4010(%456, %457, %458) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */;
    %460 = %452.1;
    %461 = %459.3;
    (%460, %461, meta[relay.Constant][16] /* ty=Tensor[(1078), float64] */)
  };
  %462() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) */
}

def @func_5206() -> Tensor[(12, 11, 11), float64] {
  @func_5204() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_4432() -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  %467 = fn () -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
    %463 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
    %464 = @func_3627() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %465 = %463.2;
    %466 = %464.1;
    (%465, %466)
  };
  %467() /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */
}

def @func_4317() -> Tensor[(3, 6, 13), float32] {
  @func_4315() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_2961() -> (Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) {
  %468 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 10, 16), float32] */, dtype="float32") /* ty=Tensor[(12, 10, 16), float32] */;
  %469 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %470 = asinh(%468) /* ty=Tensor[(12, 10, 16), float32] */;
  %471 = %469.2;
  (%470, %471)
}

def @func_5338() -> (Tensor[(12, 11, 11), float64],) {
  %472 = @func_2732() /* ty=Tensor[(12, 11, 11), float64] */;
  (%472,)
}

def @func_5561() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8]) {
  %473 = @func_4703() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %474 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %475 = %473.1;
  %476 = %474.1;
  (%475, %476)
}

def @func_3546() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) {
  @func_3544() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) */
}

def @func_7066() -> (Tensor[(3, 6, 13), float32],) {
  @func_7064() /* ty=(Tensor[(3, 6, 13), float32],) */
}

def @func_2948() -> Tensor[(12, 11, 11), float64] {
  @func_2946() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_2633() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */
}

def @func_3318() -> Tensor[(12, 11, 11), float32] {
  @func_3316() /* ty=Tensor[(12, 11, 11), float32] */
}

def @func_2867(%var_2865: Tensor[(8, 8, 14), float32]) -> Tensor[(8, 8, 14), float32] {
  @func_2864(%var_2865) /* ty=Tensor[(8, 8, 14), float32] */
}

def @func_2005() -> Tensor[(12, 11, 11), float64] {
  %478 = fn () -> Tensor[(12, 11, 11), float64] {
    %477 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %477.0
  };
  %478() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_7044() -> Tensor[(4, 16, 16), float32] {
  @func_7042() /* ty=Tensor[(4, 16, 16), float32] */
}

def @func_4347() -> Tensor[(12, 11, 11), float64] {
  @func_4345() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_829() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) {
  %479 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %480 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %481 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %482 = %479.1;
  %483 = %480.0;
  %484 = %481.2;
  (%482, %483, %484)
}

def @func_4402(%var_4400: Tensor[(14, 13, 5), float32]) -> (Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_4399(%var_4400) /* ty=(Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_5743() -> Tensor[(910), float32] {
  @func_5741() /* ty=Tensor[(910), float32] */
}

def @func_3808() -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32]) {
  @func_3806() /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32]) */
}

def @func_6364() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 154), float64], Tensor[(12, 11, 11), float64]) {
  %485 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %486 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 154), float64] */, dtype="float64") /* ty=Tensor[(7, 154), float64] */;
  %487 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 154), float64] */, dtype="float64") /* ty=Tensor[(7, 154), float64] */;
  %488 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 154), float64] */, dtype="float32") /* ty=Tensor[(7, 154), float32] */;
  %489 = reshape(%486, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %490 = reshape(%487, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float64] */;
  %491 = reshape(%488, newshape=[7, 11, 14]) /* ty=Tensor[(7, 11, 14), float32] */;
  %492 = @func_4010(%489, %490, %491) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 11, 14), float64]) */;
  %493 = %485.0;
  %494 = %492.2;
  %495 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  (%493, %494, meta[relay.Constant][18] /* ty=Tensor[(7, 154), float64] */, %495)
}

def @func_2304() -> (Tensor[(12, 11, 11), float64],) {
  %496 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %497 = %496.0;
  (%497,)
}

def @func_7433(%var_7432: Tensor[(1404), float64]) -> (Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 10, 16), float32]) {
  %509 = fn (%var_7417: Tensor[(1404), float64]) -> (Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 10, 16), float32]) {
    %498 = @func_3074() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %499 = cast(%var_7417, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %500 = cast(%var_7417, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %501 = reshape(%499, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %502 = reshape(%500, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
    %503 = @func_1665(%501, %502) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %504 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
    %505 = %498.6;
    %506 = %503.5;
    %507 = @func_5752() /* ty=Tensor[(12, 11, 11), float64] */;
    %508 = %504.0;
    (%505, %506, %var_7417, %507, %508)
  };
  %509(%var_7432) /* ty=(Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 10, 16), float32]) */
}

def @func_2963() -> (Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) {
  @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */
}

def @func_6458() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32], Tensor[(12, 11, 11), float64]) {
  %516 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32], Tensor[(12, 11, 11), float64]) {
    %510 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %511 = @func_5989() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %512 = %510.3;
    %513 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
    %514 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
    %515 = %511.0;
    (%512, %513, %514, %515)
  };
  %516() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32], Tensor[(12, 11, 11), float64]) */
}

def @func_3248() -> (Tensor[(12, 11, 11), float64],) {
  %518 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %517 = @func_1945() /* ty=Tensor[(12, 11, 11), float64] */;
    (%517,)
  };
  %518() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_4460() -> (Tensor[(12, 11, 11), float64],) {
  %521 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %519 = @func_3867() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %520 = %519.0;
    (%520,)
  };
  %521() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_2402() -> (Tensor[(12, 11, 11), uint64],) {
  @func_2400() /* ty=(Tensor[(12, 11, 11), uint64],) */
}

def @func_3669() -> (Tensor[(12, 11, 11), float64],) {
  %522 = @func_3247() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %523 = %522.0;
  (%523,)
}

def @func_5058(%var_5011: Tensor[(1404, 1), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(54, 26), float32], Tensor[(1404, 1), float32]) {
  %524 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %525 = cast(%var_5011, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %526 = cast(%var_5011, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %527 = reshape(%525, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %528 = reshape(%526, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %529 = @func_1665(%527, %528) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %530 = %529.2;
  %531 = cast(%var_5011, dtype="float32") /* ty=Tensor[(1404, 1), float32] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(2), int32] */;
  %533 = cast(%530, dtype="float32") /* ty=Tensor[(54, 26), float32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %535 = cast(%var_5011, dtype="float32") /* ty=Tensor[(1404, 1), float32] */;
  %536 = %524.0;
  %537 = subtract(%533, %534) /* ty=Tensor[(54, 26), float32] */;
  %538 = cosh(%535) /* ty=Tensor[(1404, 1), float32] */;
  (%536, %537, %538)
}

def @func_3591(%var_3589: Tensor[(3, 6, 13), float32]) -> Tensor[(3, 6, 13), uint32] {
  @func_3588(%var_3589) /* ty=Tensor[(3, 6, 13), uint32] */
}

def @func_2382() -> Tensor[(12, 11, 11), float64] {
  %539 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %539.0
}

def @func_4087() -> (Tensor[(12, 11, 11), float32],) {
  %540 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %541 = %540.1;
  (%541,)
}

def @func_4831() -> Tensor[(12, 11, 11), float64] {
  %542 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %542.0
}

def @func_7696(%var_7668: Tensor[(840), float64]) -> (Tensor[(15, 8, 7), float64], Tensor[(840), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %543 = cast(%var_7668, dtype="float64") /* ty=Tensor[(840), float64] */;
  %544 = reshape(%543, newshape=[15, 8, 7]) /* ty=Tensor[(15, 8, 7), float64] */;
  %545 = @func_6703(%544) /* ty=(Tensor[(15, 8, 7), float64],) */;
  %546 = @func_5531() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %547 = %546.0;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %549 = %545.0;
  %550 = cosh(%548) /* ty=Tensor[(12, 11, 11), float64] */;
  %551 = @func_5079() /* ty=Tensor[(12, 11, 11), float64] */;
  (%549, %var_7668, %550, %551)
}

def @func_2154() -> (Tensor[(12, 11, 11), float64],) {
  %552 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %553 = %552.0;
  (%553,)
}

def @func_396() -> (Tensor[(12, 11, 11), float64],) {
  @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_6582() -> (Tensor[(12, 11, 11), float32], Tensor[(1078), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %563 = fn () -> (Tensor[(12, 11, 11), float32], Tensor[(1078), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %554 = @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */;
    %555 = @func_4875() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) */;
    %556 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
    %557 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %558 = %554.0;
    %559 = %555.2;
    %560 = %556.0;
    %561 = %557.0;
    %562 = @func_5079() /* ty=Tensor[(12, 11, 11), float64] */;
    (%558, %559, %560, %561, %562)
  };
  %563() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(1078), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_5398() -> (Tensor[(12, 11, 11), float64],) {
  @func_5396() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_6706(%var_6704: Tensor[(15, 8, 7), float64]) -> (Tensor[(15, 8, 7), float64],) {
  @func_6703(%var_6704) /* ty=(Tensor[(15, 8, 7), float64],) */
}

def @func_7699(%var_7697: Tensor[(840), float64]) -> (Tensor[(15, 8, 7), float64], Tensor[(840), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_7696(%var_7697) /* ty=(Tensor[(15, 8, 7), float64], Tensor[(840), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_3433(%var_3418: Tensor[(6, 14, 8), float32]) -> (Tensor[(6, 14, 8), bool],) {
  %564 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 8), float32] */;
  %565 = shape_of(%var_3418, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_3418, dtype="float32") /* ty=Tensor[(6, 14, 8), float32] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %568 = add(%566, %567) /* ty=Tensor[(6, 14, 8), float32] */;
  %569 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(6, 14, 8), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = logical_or(%571, %572) /* ty=Tensor[(6, 14, 8), bool] */;
  (%573,)
}

def @func_7042() -> Tensor[(4, 16, 16), float32] {
  %574 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
  log10(%574) /* ty=Tensor[(4, 16, 16), float32] */
}

def @func_4726() -> Tensor[(12, 11, 11), float64] {
  %575 = @func_4459() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %575.0
}

def @func_4190() -> (Tensor[(12, 11, 11), float64],) {
  %578 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %576 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %577 = %576.0;
    (%577,)
  };
  %578() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_2126() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */
}

def @func_5061(%var_5059: Tensor[(1404, 1), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(54, 26), float32], Tensor[(1404, 1), float32]) {
  @func_5058(%var_5059) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(54, 26), float32], Tensor[(1404, 1), float32]) */
}

def @func_6073(%var_6072: Tensor[(1452), float64]) -> (Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) {
  %599 = fn (%var_6054: Tensor[(1452), float64]) -> (Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) {
    %579 = cast(%var_6054, dtype="float64") /* ty=Tensor[(1452), float64] */;
    %580 = reshape(%579, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
    %581 = @func_542(%580) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) */;
    %582 = @func_4286() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %583 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
    %584 = asinh(%583) /* ty=Tensor[(13, 6, 10), float32] */;
    %585 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 6, 10), float32] */, dtype="int16") /* ty=Tensor[(13, 6, 10), int16] */;
    %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
    %587 = cast(%584, dtype="int16") /* ty=Tensor[(13, 6, 10), int16] */;
    %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %589 = bitwise_or(%587, %588) /* ty=Tensor[(13, 6, 10), int16] */;
    %590 = cast(%589, dtype="float32") /* ty=Tensor[(13, 6, 10), float32] */;
    %591 = tan(%590) /* ty=Tensor[(13, 6, 10), float32] */;
    %592 = cast(%591, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
    %593 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %594 = cast(%589, dtype="int8") /* ty=Tensor[(13, 6, 10), int8] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %596 = %581.3;
    %597 = %582.1;
    %598 = logical_xor(%594, %595) /* ty=Tensor[(13, 6, 10), int8] */;
    (%596, %var_6054, %597, %598)
  };
  %599(%var_6072) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) */
}

def @func_1304() -> (Tensor[(12, 11, 11), float64],) {
  %600 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %601 = %600.0;
  (%601,)
}

def @func_5613(%var_5612: Tensor[(910), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) {
  %608 = fn (%var_5585: Tensor[(910), float32]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) {
    %602 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %603 = cast(%var_5585, dtype="float32") /* ty=Tensor[(910), float32] */;
    %604 = reshape(%603, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), float32] */;
    %605 = @func_4399(%604) /* ty=(Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %606 = %602.0;
    %607 = %605.3;
    (%606, %607, %var_5585)
  };
  %608(%var_5612) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) */
}

def @func_4060() -> Tensor[(12, 11, 11), float64] {
  %610 = fn () -> Tensor[(12, 11, 11), float64] {
    %609 = @func_3177() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %609.0
  };
  %610() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_6366() -> (Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 154), float64], Tensor[(12, 11, 11), float64]) {
  @func_6364() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), int64], Tensor[(7, 154), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_7474(%var_7472: Tensor[(3, 6, 13), float32]) -> (Tensor[(3, 6, 13), float64],) {
  @func_7471(%var_7472) /* ty=(Tensor[(3, 6, 13), float64],) */
}

def @func_7623() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) {
  @func_7621() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */
}

def @func_4399(%var_4369: Tensor[(14, 13, 5), float32]) -> (Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %611 = cast(%var_4369, dtype="float32") /* ty=Tensor[(14, 13, 5), float32] */;
  %612 = @func_3247() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %613 = sigmoid(%611) /* ty=Tensor[(14, 13, 5), float32] */;
  %614 = @func_2946() /* ty=Tensor[(12, 11, 11), float64] */;
  %615 = @func_3561() /* ty=Tensor[(12, 11, 11), float64] */;
  %616 = %612.0;
  (%613, %614, %615, %616)
}

def @func_3727(%var_3725: Tensor[(3, 13, 4), float32]) -> (Tensor[(3, 13, 4), float32], Tensor[(12, 11, 11), float64]) {
  @func_3724(%var_3725) /* ty=(Tensor[(3, 13, 4), float32], Tensor[(12, 11, 11), float64]) */
}

def @func_4226() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(3, 6, 13), float32], Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float64], Tensor[(105), float32]) {
  %630 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(3, 6, 13), float32], Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float64], Tensor[(105), float32]) {
    %617 = @func_3139() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) */;
    %618 = @func_3544() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) */;
    %619 = @func_3074() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(72), float32], Tensor[(12, 11, 11), float32], Tensor[(1404), float64], Tensor[(12, 10, 16), float32], Tensor[(4, 9, 2), float32], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %620 = cast(meta[relay.Constant][22] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
    %621 = cast(meta[relay.Constant][22] /* ty=Tensor[(105), float32] */, dtype="float32") /* ty=Tensor[(105), float32] */;
    %622 = reshape(%620, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float32] */;
    %623 = reshape(%621, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), float32] */;
    %624 = @func_1783(%622, %623) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(3, 7, 5), int16]) */;
    %625 = %617.0;
    %626 = %618.2;
    %627 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
    %628 = %619.4;
    %629 = %624.0;
    (%625, %626, %627, %628, %629, meta[relay.Constant][22] /* ty=Tensor[(105), float32] */)
  };
  %630() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(3, 6, 13), float32], Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float64], Tensor[(105), float32]) */
}

def @func_4345() -> Tensor[(12, 11, 11), float64] {
  %631 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %631.0
}

def @func_5532() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %635 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %632 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %633 = %632.0;
    %634 = @func_3561() /* ty=Tensor[(12, 11, 11), float64] */;
    (%633, %634)
  };
  %635() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_4833() -> Tensor[(12, 11, 11), float64] {
  @func_4831() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_2946() -> Tensor[(12, 11, 11), float64] {
  @func_2004() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_5187() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) {
  %636 = @func_4048() /* ty=(Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
  %637 = cast(meta[relay.Constant][23] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %638 = reshape(%637, newshape=[14, 13, 5]) /* ty=Tensor[(14, 13, 5), float32] */;
  %639 = @func_4399(%638) /* ty=(Tensor[(14, 13, 5), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %640 = %636.1;
  %641 = %639.3;
  (%640, %641, meta[relay.Constant][23] /* ty=Tensor[(910), float32] */)
}

def @func_657() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %646 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %642 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %643 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %644 = %642.0;
    %645 = %643.3;
    (%644, %645)
  };
  %646() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_2306() -> (Tensor[(12, 11, 11), float64],) {
  @func_2304() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_2533(%var_2516: Tensor[(1404), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), float64]) {
  %647 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %648 = @func_2078() /* ty=(Tensor[(16, 12, 2), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
  %649 = cast(%var_2516, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %650 = cast(%var_2516, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %651 = reshape(%649, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %652 = reshape(%650, newshape=[54, 26]) /* ty=Tensor[(54, 26), float64] */;
  %653 = @func_1665(%651, %652) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %654 = %653.1;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(9, 12, 13), float64] */;
  %656 = %647.0;
  %657 = %648.1;
  %658 = log(%655) /* ty=Tensor[(9, 12, 13), float64] */;
  (%656, %657, %var_2516, %658)
}

def @func_2568() -> Tensor[(3, 6, 13), float32] {
  @func_2566() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_2198() -> (Tensor[(12, 11, 11), float64],) {
  %660 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %659 = @func_973() /* ty=Tensor[(12, 11, 11), float64] */;
    (%659,)
  };
  %660() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_1665(%var_1605: Tensor[(54, 26), float64], %var_1607: Tensor[(54, 26), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(54, 26), int64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %661 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %662 = cast(%var_1605, dtype="float64") /* ty=Tensor[(54, 26), float64] */;
  %663 = reshape(%662, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
  %664 = @func_280(%663) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
  %665 = cast(%var_1607, dtype="int64") /* ty=Tensor[(54, 26), int64] */;
  %666 = shape_of(%var_1605, dtype="int32") /* ty=Tensor[(2), int32] */;
  %667 = cast(%var_1605, dtype="int64") /* ty=Tensor[(54, 26), int64] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %669 = @func_1373() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %670 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %671 = @func_1027() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %672 = %661.0;
  %673 = %664.1;
  %674 = bitwise_and(%667, %668) /* ty=Tensor[(54, 26), int64] */;
  %675 = %669.0;
  %676 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %677 = %670.0;
  %678 = %671.0;
  (%672, %673, %674, %675, %676, %677, %678)
}

def @func_3228() -> Tensor[(12, 11, 11), float64] {
  %679 = fn () -> Tensor[(12, 11, 11), float64] {
    @func_1945() /* ty=Tensor[(12, 11, 11), float64] */
  };
  %679() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_544(%var_543: Tensor[(12, 11, 11), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) {
  %695 = fn (%var_507: Tensor[(12, 11, 11), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) {
    %680 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %681 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %682 = %681.1;
    %683 = cast(%var_507, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
    %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%682, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %687 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %688 = cast(meta[relay.Constant][24] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %689 = reshape(%688, newshape=[9, 12, 13]) /* ty=Tensor[(9, 12, 13), float64] */;
    %690 = @func_280(%689) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool]) */;
    %691 = %680.1;
    %692 = floor_mod(%685, %686) /* ty=Tensor[(12, 11, 11), float32] */;
    %693 = %687.3;
    %694 = %690.1;
    (%691, %692, %693, %694, meta[relay.Constant][24] /* ty=Tensor[(1404), float64] */)
  };
  %695(%var_543) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(9, 12, 13), bool], Tensor[(1404), float64]) */
}

def @func_2124() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) {
  %696 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %697 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %698 = %696.0;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
  %700 = reshape(%699, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
  %701 = @func_422(%700) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %702 = @func_1304() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %703 = %697.1;
  %704 = %701.0;
  %705 = %702.0;
  (%698, %703, %704, %705)
}

def @func_3403(%var_3402: Tensor[(12, 10, 16), float32]) -> (Tensor[(12, 10, 16), float64], Tensor[(12, 11, 11), uint8]) {
  %715 = fn (%var_3378: Tensor[(12, 10, 16), float32]) -> (Tensor[(12, 10, 16), float64], Tensor[(12, 11, 11), uint8]) {
    %706 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
    %707 = %706.0;
    %708 = cast(%var_3378, dtype="float64") /* ty=Tensor[(12, 10, 16), float64] */;
    %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %710 = cast(%707, dtype="float64") /* ty=Tensor[(12, 10, 16), float64] */;
    %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %712 = @func_2631() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */;
    %713 = subtract(%710, %711) /* ty=Tensor[(12, 10, 16), float64] */;
    %714 = %712.1;
    (%713, %714)
  };
  %715(%var_3402) /* ty=(Tensor[(12, 10, 16), float64], Tensor[(12, 11, 11), uint8]) */
}

def @func_394() -> (Tensor[(12, 11, 11), float64],) {
  %716 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %717 = %716.0;
  (%717,)
}

def @func_915(%var_913: Tensor[(4, 9, 2), float32], %var_914: Tensor[(1452), float64]) -> (Tensor[(4, 9, 2), int32], Tensor[(12, 11, 11), float64], Tensor[(1452), float64], Tensor[(12, 11, 11), float64]) {
  %731 = fn (%var_873: Tensor[(4, 9, 2), float32], %var_890: Tensor[(1452), float64]) -> (Tensor[(4, 9, 2), int32], Tensor[(12, 11, 11), float64], Tensor[(1452), float64], Tensor[(12, 11, 11), float64]) {
    %718 = cast(%var_873, dtype="float32") /* ty=Tensor[(4, 9, 2), float32] */;
    %719 = asin(%718) /* ty=Tensor[(4, 9, 2), float32] */;
    %720 = cast(%var_873, dtype="int32") /* ty=Tensor[(4, 9, 2), int32] */;
    %721 = shape_of(%719, dtype="int32") /* ty=Tensor[(3), int32] */;
    %722 = cast(%719, dtype="int32") /* ty=Tensor[(4, 9, 2), int32] */;
    %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %724 = cast(%var_890, dtype="float64") /* ty=Tensor[(1452), float64] */;
    %725 = reshape(%724, newshape=[12, 11, 11]) /* ty=Tensor[(12, 11, 11), float64] */;
    %726 = @func_422(%725) /* ty=(Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
    %727 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
    %728 = right_shift(%722, %723) /* ty=Tensor[(4, 9, 2), int32] */;
    %729 = %726.1;
    %730 = %727.1;
    (%728, %729, %var_890, %730)
  };
  %731(%var_913, %var_914) /* ty=(Tensor[(4, 9, 2), int32], Tensor[(12, 11, 11), float64], Tensor[(1452), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_1551() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_6643() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) {
  %740 = fn () -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) {
    %732 = @func_4087() /* ty=(Tensor[(12, 11, 11), float32],) */;
    %733 = %732.0;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(12, 11, 11), float64] */;
    %735 = reshape(%734, newshape=[1452]) /* ty=Tensor[(1452), float64] */;
    %736 = @func_6071(%735) /* ty=(Tensor[(9, 12, 13), bool], Tensor[(1452), float64], Tensor[(12, 11, 11), float64], Tensor[(13, 6, 10), int8]) */;
    %737 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
    %738 = %736.2;
    %739 = %737.2;
    (%733, %738, %739)
  };
  %740() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) */
}

def @func_5080() -> Tensor[(12, 11, 11), float64] {
  %741 = fn () -> Tensor[(12, 11, 11), float64] {
    @func_4059() /* ty=Tensor[(12, 11, 11), float64] */
  };
  %741() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_3544() -> (Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool]) {
  %742 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %743 = %742.1;
  %744 = @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %745 = %744.2;
  %746 = cast(%745, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %747 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%743, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %750 = @func_3316() /* ty=Tensor[(12, 11, 11), float32] */;
  %751 = @func_3227() /* ty=Tensor[(12, 11, 11), float64] */;
  %752 = equal(%748, %749) /* ty=Tensor[(12, 11, 11), bool] */;
  (%750, %751, %752)
}

def @func_3848() -> (Tensor[(12, 11, 11), float32],) {
  @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */
}

def @func_3924() -> (Tensor[(12, 11, 11), float32], Tensor[(6, 14, 8), bool], Tensor[(672), float32], Tensor[(896), float32]) {
  %761 = fn () -> (Tensor[(12, 11, 11), float32], Tensor[(6, 14, 8), bool], Tensor[(672), float32], Tensor[(896), float32]) {
    %753 = @func_3846() /* ty=(Tensor[(12, 11, 11), float32],) */;
    %754 = cast(meta[relay.Constant][25] /* ty=Tensor[(672), float32] */, dtype="float32") /* ty=Tensor[(672), float32] */;
    %755 = reshape(%754, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), float32] */;
    %756 = @func_3433(%755) /* ty=(Tensor[(6, 14, 8), bool],) */;
    %757 = @func_3139() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(8, 8, 14), float32], Tensor[(896), float32], Tensor[(12, 11, 11), float64]) */;
    %758 = %753.0;
    %759 = %756.0;
    %760 = %757.2;
    (%758, %759, meta[relay.Constant][25] /* ty=Tensor[(672), float32] */, %760)
  };
  %761() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(6, 14, 8), bool], Tensor[(672), float32], Tensor[(896), float32]) */
}

def @func_7380() -> (Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), float32]) {
  %764 = fn () -> (Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), float32]) {
    %762 = @func_4315() /* ty=Tensor[(3, 6, 13), float32] */;
    %763 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
    (%762, %763)
  };
  %764() /* ty=(Tensor[(3, 6, 13), float32], Tensor[(3, 6, 13), float32]) */
}

def @func_5340() -> (Tensor[(12, 11, 11), float64],) {
  @func_5338() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_5189() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) {
  @func_5187() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(910), float32]) */
}

def @func_4050() -> (Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  @func_4048() /* ty=(Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) */
}

def @func_1164(%var_1068: Tensor[(3, 6, 13), float32]) -> (Tensor[(3, 6, 13), bool], Tensor[(12, 11, 11), int16], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %765 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
  %767 = log2(%766) /* ty=Tensor[(3, 6, 13), float32] */;
  %768 = cast(%var_1068, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %769 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%765, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %772 = greater(%770, %771) /* ty=Tensor[(3, 6, 13), bool] */;
  %773 = cast(%772, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %774 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%767, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %777 = equal(%775, %776) /* ty=Tensor[(3, 6, 13), bool] */;
  %778 = cast(%772, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="bool") /* ty=Tensor[(3, 6, 13), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %783 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
  %784 = cast(%783, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %785 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %786 = cast(%782, dtype="int16") /* ty=Tensor[(12, 11, 11), int16] */;
  %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %788 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %789 = @func_656() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %790 = greater_equal(%780, %781) /* ty=Tensor[(3, 6, 13), bool] */;
  %791 = bitwise_xor(%786, %787) /* ty=Tensor[(12, 11, 11), int16] */;
  %792 = %788.0;
  %793 = %789.1;
  (%790, %791, %792, %793)
}

def @func_1945() -> Tensor[(12, 11, 11), float64] {
  %794 = @func_394() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %794.0
}

def @func_982(%var_976: Tensor[(13, 13, 5), float32]) -> (Tensor[(13, 13, 5), bool],) {
  %795 = cast(%var_976, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %796 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(13, 13, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %797 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 13, 5), float32] */, dtype="bool") /* ty=Tensor[(13, 13, 5), bool] */;
  %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %799 = less_equal(%797, %798) /* ty=Tensor[(13, 13, 5), bool] */;
  (%799,)
}

def @func_2407() -> Tensor[(3, 6, 13), float32] {
  @func_2405() /* ty=Tensor[(3, 6, 13), float32] */
}

def @func_5396() -> (Tensor[(12, 11, 11), float64],) {
  %800 = @func_2154() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %801 = %800.0;
  (%801,)
}

def @func_2732() -> Tensor[(12, 11, 11), float64] {
  %802 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %802.0
}

def @func_6754() -> Tensor[(12, 11, 11), float64] {
  @func_6752() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_1870() -> (Tensor[(3, 6, 13), float32],) {
  %808 = fn () -> (Tensor[(3, 6, 13), float32],) {
    %803 = @func_871() /* ty=Tensor[(3, 6, 13), float32] */;
    %804 = cast(%803, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %805 = acos(%804) /* ty=Tensor[(3, 6, 13), float32] */;
    %806 = cast(%805, dtype="float32") /* ty=Tensor[(3, 6, 13), float32] */;
    %807 = atan(%806) /* ty=Tensor[(3, 6, 13), float32] */;
    (%807,)
  };
  %808() /* ty=(Tensor[(3, 6, 13), float32],) */
}

def @func_1167(%var_1165: Tensor[(3, 6, 13), float32]) -> (Tensor[(3, 6, 13), bool], Tensor[(12, 11, 11), int16], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_1164(%var_1165) /* ty=(Tensor[(3, 6, 13), bool], Tensor[(12, 11, 11), int16], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_2488() -> Tensor[(12, 11, 11), float64] {
  %809 = @func_2124() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64]) */;
  %809.0
}

def @func_2299() -> (Tensor[(12, 11, 11), float64],) {
  %812 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %810 = @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %811 = %810.0;
    (%811,)
  };
  %812() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_2536(%var_2534: Tensor[(1404), float64]) -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), float64]) {
  @func_2533(%var_2534) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), float64]) */
}

def @func_3846() -> (Tensor[(12, 11, 11), float32],) {
  %813 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %814 = %813.1;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %816 = log2(%815) /* ty=Tensor[(12, 11, 11), float32] */;
  (%816,)
}

def @func_4287() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  %821 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
    %817 = @func_752() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %818 = @func_353() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
    %819 = %817.0;
    %820 = %818.0;
    (%819, %820)
  };
  %821() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_173() -> (Tensor[(12, 11, 11), float64],) {
  %824 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %822 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %823 = %822.0;
    (%823,)
  };
  %824() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @func_6887() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(18, 78), float64], Tensor[(12, 11, 11), float64]) {
  %832 = fn () -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(18, 78), float64], Tensor[(12, 11, 11), float64]) {
    %825 = cast(meta[relay.Constant][27] /* ty=Tensor[(18, 78), float64] */, dtype="float64") /* ty=Tensor[(18, 78), float64] */;
    %826 = reshape(%825, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %827 = @func_2533(%826) /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(1404), float64], Tensor[(9, 12, 13), float64]) */;
    %828 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %829 = @func_929() /* ty=Tensor[(12, 11, 11), float64] */;
    %830 = %827.0;
    %831 = %828.0;
    (%829, %830, meta[relay.Constant][27] /* ty=Tensor[(18, 78), float64] */, %831)
  };
  %832() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(18, 78), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_2817() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) {
  @func_2815() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */
}

def @func_2078() -> (Tensor[(16, 12, 2), float32], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) {
  %833 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 12, 2), float32] */, dtype="float32") /* ty=Tensor[(16, 12, 2), float32] */;
  %834 = @func_466() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %835 = @func_1478() /* ty=(Tensor[(12, 11, 11), float32], Tensor[(12, 11, 11), float64]) */;
  %836 = log(%833) /* ty=Tensor[(16, 12, 2), float32] */;
  %837 = %834.0;
  %838 = %835.0;
  (%836, %837, %838)
}

def @func_467() -> (Tensor[(12, 11, 11), float64],) {
  %841 = fn () -> (Tensor[(12, 11, 11), float64],) {
    %839 = @func_159() /* ty=(Tensor[(12, 11, 11), float64],) */;
    %840 = %839.0;
    (%840,)
  };
  %841() /* ty=(Tensor[(12, 11, 11), float64],) */
}

def @main(%var_7721: Tensor[(8, 15, 5), float32]) -> (Tensor[(8, 15, 5), float32],) {
  %842 = cast(%var_7721, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %843 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(8, 15, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 15, 5), float32] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %846 = power(%844, %845) /* ty=Tensor[(8, 15, 5), float32] */;
  (%846,)
}

def @func_5753() -> Tensor[(12, 11, 11), float64] {
  %848 = fn () -> Tensor[(12, 11, 11), float64] {
    %847 = @func_4875() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(7, 11, 14), float64], Tensor[(1078), float64]) */;
    %847.0
  };
  %848() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_6251(%var_6249: Tensor[(4, 5, 8), int16], %var_6250: Tensor[(4, 5, 8), int16]) -> (Tensor[(4, 5, 8), float64], Tensor[(4, 5, 8), bool], Tensor[(12, 11, 11), uint8], Tensor[(4, 5, 8), bool]) {
  %870 = fn (%var_6209: Tensor[(4, 5, 8), int16], %var_6210: Tensor[(4, 5, 8), int16]) -> (Tensor[(4, 5, 8), float64], Tensor[(4, 5, 8), bool], Tensor[(12, 11, 11), uint8], Tensor[(4, 5, 8), bool]) {
    %849 = cast(%var_6210, dtype="int16") /* ty=Tensor[(4, 5, 8), int16] */;
    %850 = shape_of(%var_6209, dtype="int32") /* ty=Tensor[(3), int32] */;
    %851 = cast(%var_6209, dtype="int16") /* ty=Tensor[(4, 5, 8), int16] */;
    %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %853 = bitwise_or(%851, %852) /* ty=Tensor[(4, 5, 8), int16] */;
    %854 = cast(%853, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
    %855 = log2(%854) /* ty=Tensor[(4, 5, 8), float64] */;
    %856 = cast(%855, dtype="float64") /* ty=Tensor[(4, 5, 8), float64] */;
    %857 = cast(%var_6210, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
    %858 = shape_of(%855, dtype="int32") /* ty=Tensor[(3), int32] */;
    %859 = cast(%855, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
    %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %861 = @func_4671() /* ty=(Tensor[(12, 11, 11), uint8],) */;
    %862 = cast(%855, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
    %863 = shape_of(%853, dtype="int32") /* ty=Tensor[(3), int32] */;
    %864 = cast(%853, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
    %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %866 = acos(%856) /* ty=Tensor[(4, 5, 8), float64] */;
    %867 = less_equal(%859, %860) /* ty=Tensor[(4, 5, 8), bool] */;
    %868 = %861.0;
    %869 = logical_or(%864, %865) /* ty=Tensor[(4, 5, 8), bool] */;
    (%866, %867, %868, %869)
  };
  %870(%var_6249, %var_6250) /* ty=(Tensor[(4, 5, 8), float64], Tensor[(4, 5, 8), bool], Tensor[(12, 11, 11), uint8], Tensor[(4, 5, 8), bool]) */
}

def @func_3806() -> (Tensor[(12, 11, 11), bool], Tensor[(12, 11, 11), float64], Tensor[(3, 6, 13), float32]) {
  %871 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  %872 = @func_2961() /* ty=(Tensor[(12, 10, 16), float32], Tensor[(12, 11, 11), float32]) */;
  %873 = %872.1;
  %874 = cast(%873, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %875 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%871, dtype="bool") /* ty=Tensor[(12, 11, 11), bool] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %878 = @func_1869() /* ty=(Tensor[(3, 6, 13), float32],) */;
  %879 = less(%876, %877) /* ty=Tensor[(12, 11, 11), bool] */;
  %880 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  %881 = %878.0;
  (%879, %880, %881)
}

def @func_2400() -> (Tensor[(12, 11, 11), uint64],) {
  %882 = @func_2298() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %883 = %882.0;
  %884 = cast(%883, dtype="float32") /* ty=Tensor[(12, 11, 11), float32] */;
  %885 = erf(%884) /* ty=Tensor[(12, 11, 11), float32] */;
  %886 = cast(%885, dtype="uint64") /* ty=Tensor[(12, 11, 11), uint64] */;
  %887 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %888 = cast(%883, dtype="uint64") /* ty=Tensor[(12, 11, 11), uint64] */;
  %889 = dyn.reshape(%886, %887, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %890 = right_shift(%888, %889) /* ty=Tensor[(12, 11, 11), uint64] */;
  (%890,)
}

def @func_930() -> Tensor[(12, 11, 11), float64] {
  %892 = fn () -> Tensor[(12, 11, 11), float64] {
    %891 = @func_829() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float32]) */;
    %891.1
  };
  %892() /* ty=Tensor[(12, 11, 11), float64] */
}

def @func_2631() -> (Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), uint8], Tensor[(12, 11, 11), float64]) {
  %893 = @func_1549() /* ty=(Tensor[(12, 11, 11), float64], Tensor[(12, 11, 11), float64]) */;
  %894 = @func_172() /* ty=(Tensor[(12, 11, 11), float64],) */;
  %895 = %894.0;
  %896 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 11, 11), float64] */, dtype="uint8") /* ty=Tensor[(12, 11, 11), uint8] */;
  %897 = shape_of(%895, dtype="int32") /* ty=Tensor[(3), int32] */;
  %898 = cast(%895, dtype="uint8") /* ty=Tensor[(12, 11, 11), uint8] */;
  %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %900 = %893.0;
  %901 = left_shift(%898, %899) /* ty=Tensor[(12, 11, 11), uint8] */;
  %902 = @func_2004() /* ty=Tensor[(12, 11, 11), float64] */;
  (%900, %901, %902)
}

def @func_3724(%var_3708: Tensor[(3, 13, 4), float32]) -> (Tensor[(3, 13, 4), float32], Tensor[(12, 11, 11), float64]) {
  %903 = cast(%var_3708, dtype="float32") /* ty=Tensor[(3, 13, 4), float32] */;
  %904 = log10(%903) /* ty=Tensor[(3, 13, 4), float32] */;
  %905 = @func_3227() /* ty=Tensor[(12, 11, 11), float64] */;
  (%904, %905)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen436/build/output.py:2632: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen436/build/output.py", line 2637, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(600) tvmgen_default_fused_reshape_power_kernel0(float* __restrict__ T_power, float* __restrict__ placeholder, float* __restrict__ placeholder1) {
  T_power[(((int)threadIdx.x))] = powf(placeholder[(((int)threadIdx.x))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

