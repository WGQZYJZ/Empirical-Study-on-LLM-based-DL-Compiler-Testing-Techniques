==========mod==========
#[version = "0.0.5"]
def @func_5666(%var_5603: Tensor[(9, 11, 4), float32]) -> Tensor[(9, 11, 4), float32] {
  %0 = @func_4935() /* ty=(Tensor[(9, 11, ?), float32],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(9, 11, ?), float32] */;
  %3 = exp(%2) /* ty=Tensor[(9, 11, ?), float32] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(9, 11, ?), float64] */;
  %5 = sin(%4) /* ty=Tensor[(9, 11, ?), float64] */;
  %6 = cast(%1, dtype="int8") /* ty=Tensor[(9, 11, ?), int8] */;
  %7 = cast(%var_5603, dtype="int8") /* ty=Tensor[(9, 11, 4), int8] */;
  %8 = add(%6, %7) /* ty=Tensor[(9, 11, 4), int8] */;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  %10 = tan(%9) /* ty=Tensor[(9, 11, 4), float32] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 11, 4), float32] */, dtype="uint16") /* ty=Tensor[(9, 11, 4), uint16] */;
  %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%10, dtype="uint16") /* ty=Tensor[(9, 11, 4), uint16] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %15 = bitwise_xor(%13, %14) /* ty=Tensor[(9, 11, 4), uint16] */;
  %16 = cast(%5, dtype="float32") /* ty=Tensor[(9, 11, ?), float32] */;
  %17 = cast(%15, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  floor_divide(%16, %17) /* ty=Tensor[(9, 11, 4), float32] */
}

def @func_1292(%var_1270: int32, %var_1271: Tensor[(12, 2, 11), int32], %var_1282: Tensor[(1080), uint8]) -> (Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) {
  %18 = cast(%var_1270, dtype="bool") /* ty=bool */;
  %19 = cast(%var_1271, dtype="bool") /* ty=Tensor[(12, 2, 11), bool] */;
  %20 = cast(%var_1282, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %21 = reshape(%20, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
  %22 = @func_459(%21) /* ty=(Tensor[(6, 15, 12), uint8],) */;
  %23 = greater(%18, %19) /* ty=Tensor[(12, 2, 11), bool] */;
  %24 = %22.0;
  (%23, %24, %var_1282)
}

def @func_3608(%var_3603: Tensor[(10, 9, 8), bool]) -> Tensor[(10, 9, 8), float64] {
  %25 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  %26 = cast(%var_3603, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%28, %29) /* ty=Tensor[(10, 9, 8), float64] */
}

def @func_2385(%var_2341: Tensor[(9, 8, 13), uint64], %var_2342: Tensor[(9, 8, 13), uint64]) -> (Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) {
  %30 = cast(%var_2342, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %31 = shape_of(%var_2341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%var_2341, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %34 = cast(meta[relay.Constant][1] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %35 = reshape(%34, newshape=[5, 9, 3]) /* ty=Tensor[(5, 9, 3), float64] */;
  %36 = @func_1932(%35) /* ty=Tensor[(5, 9, 3), float64] */;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  %38 = cos(%37) /* ty=Tensor[(5, 9, 3), float64] */;
  %39 = cast(%36, dtype="bool") /* ty=Tensor[(5, 9, 3), bool] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="bool") /* ty=Tensor[(5, 9, 3), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %43 = cast(%36, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  %44 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(%38, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %47 = greater(%32, %33) /* ty=Tensor[(9, 8, 13), bool] */;
  %48 = logical_and(%41, %42) /* ty=Tensor[(5, 9, 3), bool] */;
  %49 = floor_mod(%45, %46) /* ty=Tensor[(5, 9, 3), float64] */;
  (%47, meta[relay.Constant][1] /* ty=Tensor[(135), float64] */, %48, %49)
}

def @func_3319(%var_3317: Tensor[(264), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) {
  %50 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %51 = %50.0;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %53 = cast(%var_3317, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %54 = cast(%var_3317, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %55 = reshape(%53, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %56 = reshape(%54, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %57 = erf(%52) /* ty=Tensor[(5, 8, 3), float32] */;
  %58 = @func_2938(%55, %56) /* ty=Tensor[(6, 11, 4), bool] */;
  (%57, %58, %var_3317)
}

def @func_1932(%var_1925: Tensor[(5, 9, 3), float64]) -> Tensor[(5, 9, 3), float64] {
  %59 = cast(%var_1925, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  atanh(%59) /* ty=Tensor[(5, 9, 3), float64] */
}

def @func_4411() -> (Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) {
  %60 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  %61 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  (%60, %61)
}

def @func_3208(%var_3184: Tensor[(4, 420), uint16]) -> (Tensor[(5, 2, 11), float64], Tensor[(4, 420), uint16], Tensor[(1176), float32], Tensor[(110), float64], Tensor[(1176), float32], Tensor[(5, 8, 3), bool]) {
  %62 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
  %63 = cast(meta[relay.Constant][2] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %64 = cast(%var_3184, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
  %65 = reshape(%62, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %66 = reshape(%63, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %67 = reshape(%64, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
  %68 = @func_1601(%65, %66, %67) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
  %69 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
  %70 = cast(meta[relay.Constant][2] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %71 = cast(%var_3184, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
  %72 = reshape(%69, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %73 = reshape(%70, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %74 = reshape(%71, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
  %75 = @func_1601(%72, %73, %74) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
  %76 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
  %77 = cast(meta[relay.Constant][2] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %78 = cast(%var_3184, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
  %79 = reshape(%76, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %80 = reshape(%77, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %81 = reshape(%78, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
  %82 = @func_1601(%79, %80, %81) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
  %83 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %84 = %83.1;
  %85 = cast(%84, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %86 = asin(%85) /* ty=Tensor[(5, 8, 3), float64] */;
  %87 = cast(%86, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %88 = atanh(%87) /* ty=Tensor[(5, 8, 3), float32] */;
  %89 = cast(%86, dtype="bool") /* ty=Tensor[(5, 8, 3), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(5, 8, 3), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %93 = %68.3;
  %94 = %75.4;
  %95 = %82.6;
  %96 = logical_or(%91, %92) /* ty=Tensor[(5, 8, 3), bool] */;
  (%93, %var_3184, meta[relay.Constant][2] /* ty=Tensor[(1176), float32] */, %94, %95, %96)
}

def @func_3944(%var_3935: bool, %var_3936: Tensor[(9, 3, 8), bool]) -> (Tensor[(9, 3, 8), bool],) {
  %97 = cast(%var_3935, dtype="bool") /* ty=bool */;
  %98 = cast(%var_3936, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  %99 = logical_and(%97, %98) /* ty=Tensor[(9, 3, 8), bool] */;
  (%99,)
}

def @func_5476(%var_5469: Tensor[(264), uint32]) -> (Tensor[(3, 7, 3), int64], Tensor[(10, 9, 8), uint32], Tensor[(264), uint32], Tensor[(936), uint64], Tensor[(264), uint32]) {
  %100 = @func_5328() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(3, 7, 3), int64], Tensor[(63), int64], Tensor[(10, 9, 8), bool]) */;
  %101 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  %102 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 9, 8), bool] */, dtype="uint32") /* ty=Tensor[(10, 9, 8), uint32] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint32") /* ty=Tensor[(10, 9, 8), uint32] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %106 = cast(meta[relay.Constant][4] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %107 = cast(%var_5469, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %108 = reshape(%106, newshape=[936]) /* ty=Tensor[(936), uint64] */;
  %109 = reshape(%107, newshape=[264]) /* ty=Tensor[(264), uint32] */;
  %110 = @func_4987(%108, %109) /* ty=(Tensor[(10, 9, 8), float32], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(264), uint32]) */;
  %111 = %100.1;
  %112 = left_shift(%104, %105) /* ty=Tensor[(10, 9, 8), uint32] */;
  %113 = %110.4;
  (%111, %112, %113, meta[relay.Constant][4] /* ty=Tensor[(936), uint64] */, %var_5469)
}

def @func_5823() -> Tensor[(10, 9, 8), bool] {
  @func_3417() /* ty=Tensor[(10, 9, 8), bool] */
}

def @func_2630(%var_2609: Tensor[(5, 8, 3), float64], %var_2628: Tensor[(756), uint8]) -> (Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) {
  %114 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %115 = %114.1;
  %116 = cast(%var_2609, dtype="uint32") /* ty=Tensor[(5, 8, 3), uint32] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="uint32") /* ty=Tensor[(5, 8, 3), uint32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %120 = cast(%115, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %121 = reshape(%120, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), float32] */;
  %122 = @func_1896(%121) /* ty=(Tensor[(3, 10, 4), float32],) */;
  %123 = cast(%var_2628, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %124 = cast(%var_2628, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %125 = reshape(%123, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint8] */;
  %126 = reshape(%124, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint8] */;
  %127 = @func_1761(%125, %126) /* ty=(Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(9, 12, 7), float64]) */;
  %128 = right_shift(%118, %119) /* ty=Tensor[(5, 8, 3), uint32] */;
  %129 = %122.0;
  %130 = %127.2;
  (%128, %129, %130, %var_2628)
}

def @func_5110(%var_5084: Tensor[(7, 12, 5), float32]) -> (Tensor[(6, 196), float32], Tensor[(7, 12, 9), bool], Tensor[(7, 12, 5), bool]) {
  %131 = @func_4089() /* ty=(Tensor[(6, 196), float32],) */;
  %132 = cast(meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %133 = reshape(%132, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %134 = @func_4041(%133) /* ty=Tensor[(7, 12, 9), float32] */;
  %135 = cast(meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, dtype="bool") /* ty=Tensor[(756), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = cast(%var_5084, dtype="float32") /* ty=Tensor[(7, 12, 5), float32] */;
  %140 = rsqrt(%139) /* ty=Tensor[(7, 12, 5), float32] */;
  %141 = cast(%var_5084, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %142 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %144 = dyn.reshape(%141, %142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %145 = %131.0;
  %146 = less(%137, %138) /* ty=Tensor[(7, 12, 9), bool] */;
  %147 = equal(%143, %144) /* ty=Tensor[(7, 12, 5), bool] */;
  (%145, %146, %147)
}

def @func_4728(%var_4689: Tensor[(9, 4, 4), float64], %var_4690: Tensor[(9, 4, 4), float64]) -> (Tensor[(9, 4, 4), float64], Tensor[(5, 8, 3), float32], Tensor[(9, 4, 4), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) {
  %148 = cast(%var_4690, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
  %149 = shape_of(%var_4689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_4689, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %152 = floor_mod(%150, %151) /* ty=Tensor[(9, 4, 4), float64] */;
  %153 = cast(%152, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
  %154 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
  %155 = cast(%152, dtype="float32") /* ty=Tensor[(9, 4, 4), float32] */;
  %156 = asinh(%155) /* ty=Tensor[(9, 4, 4), float32] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(9, 4, 4), float32] */;
  %158 = cast(meta[relay.Constant][6] /* ty=Tensor[(264), uint32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %159 = cast(meta[relay.Constant][6] /* ty=Tensor[(264), uint32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %160 = reshape(%158, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %161 = reshape(%159, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %162 = log2(%153) /* ty=Tensor[(9, 4, 4), float64] */;
  %163 = %154.2;
  %164 = sqrt(%157) /* ty=Tensor[(9, 4, 4), float32] */;
  %165 = @func_2938(%160, %161) /* ty=Tensor[(6, 11, 4), bool] */;
  (%162, %163, %164, %165, meta[relay.Constant][6] /* ty=Tensor[(264), uint32] */)
}

def @func_3155() -> (Tensor[(10, 9, 8), bool],) {
  %166 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %167 = %166.0;
  (%167,)
}

def @func_3756() -> (Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) {
  %168 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %169 = atanh(%168) /* ty=Tensor[(9, 11, 1), float32] */;
  %170 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %174 = cast(meta[relay.Constant][8] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %175 = reshape(%174, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %176 = @func_2813(%175) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %177 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %178 = divide(%172, %173) /* ty=Tensor[(9, 11, ?), float32] */;
  %179 = %176.1;
  (%177, %178, %179, meta[relay.Constant][8] /* ty=Tensor[(126), uint32] */)
}

def @func_5691(%var_5682: Tensor[(9, 5, 1), int32], %var_5683: Tensor[(9, 5, 3), int32]) -> (Tensor[(9, 5, 3), int32], Tensor[(9, 5, 3), float64]) {
  %180 = cast(%var_5682, dtype="int32") /* ty=Tensor[(9, 5, 1), int32] */;
  %181 = cast(%var_5683, dtype="int32") /* ty=Tensor[(9, 5, 3), int32] */;
  %182 = cast(%var_5683, dtype="float64") /* ty=Tensor[(9, 5, 3), float64] */;
  %183 = logical_xor(%180, %181) /* ty=Tensor[(9, 5, 3), int32] */;
  %184 = log2(%182) /* ty=Tensor[(9, 5, 3), float64] */;
  (%183, %184)
}

def @func_4137(%var_4121: Tensor[(12, 14, 7), float32]) -> (Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) {
  %185 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %186 = @func_4010() /* ty=(Tensor[(1, 1176), float32],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %189 = cast(%187, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %190 = reshape(%188, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %191 = reshape(%189, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %192 = @func_364(%190, %191) /* ty=(Tensor[(12, 14, 7), float32],) */;
  %193 = %192.0;
  %194 = cast(%var_4121, dtype="uint8") /* ty=Tensor[(12, 14, 7), uint8] */;
  %195 = shape_of(%193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %196 = cast(%193, dtype="uint8") /* ty=Tensor[(12, 14, 7), uint8] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %198 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %199 = %185.0;
  %200 = multiply(%196, %197) /* ty=Tensor[(12, 14, 7), uint8] */;
  %201 = %198.4;
  (%199, %187, %200, %201)
}

def @func_5179() -> (Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float32]) {
  %202 = @func_3476() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */;
  %203 = %202.2;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(6, 15, 12), float32] */;
  %205 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %206 = tan(%204) /* ty=Tensor[(6, 15, 12), float32] */;
  (%205, %206)
}

def @func_904(%var_878: Tensor[(9, 7, 2), uint32], %var_879: Tensor[(9, 7, 2), uint32], %var_899: Tensor[(9, 7, 2), float64]) -> (Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) {
  %207 = cast(%var_879, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %208 = shape_of(%var_878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_878, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %211 = cast(%var_878, dtype="float64") /* ty=Tensor[(9, 7, 2), float64] */;
  %212 = rsqrt(%211) /* ty=Tensor[(9, 7, 2), float64] */;
  %213 = cast(%var_899, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %214 = shape_of(%212, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%212, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %217 = not_equal(%209, %210) /* ty=Tensor[(9, 7, 2), bool] */;
  %218 = less_equal(%215, %216) /* ty=Tensor[(9, 7, 2), bool] */;
  (%217, %218)
}

def @func_3277() -> (Tensor[(5, 8, 3), float32],) {
  %219 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %220 = %219.0;
  %221 = cast(%220, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %222 = cosh(%221) /* ty=Tensor[(5, 8, 3), float32] */;
  (%222,)
}

def @func_3885() -> (Tensor[(1080), uint8],) {
  %223 = @func_3378() /* ty=(Tensor[(1080), uint8],) */;
  %224 = %223.0;
  (%224,)
}

def @func_1095(%var_1092: Tensor[(10, 5, 7), float32]) -> Tensor[(10, 5, 7), float32] {
  %225 = cast(%var_1092, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  acosh(%225) /* ty=Tensor[(10, 5, 7), float32] */
}

def @func_4025(%var_4018: Tensor[(3, 7, 3), int64], %var_4019: Tensor[(3, 7, 3), int64]) -> Tensor[(3, 7, 3), int64] {
  %226 = cast(%var_4019, dtype="int64") /* ty=Tensor[(3, 7, 3), int64] */;
  %227 = shape_of(%var_4018, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_4018, dtype="int64") /* ty=Tensor[(3, 7, 3), int64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  add(%228, %229) /* ty=Tensor[(3, 7, 3), int64] */
}

def @func_5361(%var_5356: Tensor[(5, 8, 3), float64]) -> (Tensor[(5, 8, 3), int16],) {
  %230 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %231 = %230.1;
  %232 = cast(%var_5356, dtype="int16") /* ty=Tensor[(5, 8, 3), int16] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="int16") /* ty=Tensor[(5, 8, 3), int16] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %236 = bitwise_and(%234, %235) /* ty=Tensor[(5, 8, 3), int16] */;
  (%236,)
}

def @func_2731(%var_2715: uint32, %var_2716: Tensor[(8, 1, 14), uint32]) -> Tensor[(8, 1, 14), bool] {
  %237 = cast(%var_2715, dtype="bool") /* ty=bool */;
  %238 = cast(%var_2716, dtype="bool") /* ty=Tensor[(8, 1, 14), bool] */;
  less(%237, %238) /* ty=Tensor[(8, 1, 14), bool] */
}

def @func_6054(%var_6028: Tensor[(9, 720), bool]) -> (Tensor[(9, 720), float64], Tensor[(6, 15, 12), uint8]) {
  %239 = @func_4231() /* ty=(Tensor[(1080), uint8], Tensor[(10, 9, 8), float64], Tensor[(1, 720), bool]) */;
  %240 = %239.2;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %242 = cast(%var_6028, dtype="float64") /* ty=Tensor[(9, 720), float64] */;
  %243 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %244 = mod(%241, %242) /* ty=Tensor[(9, 720), float64] */;
  %245 = %243.2;
  (%244, %245)
}

def @func_3809(%var_3793: Tensor[(126), uint32]) -> (Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) {
  %246 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %247 = cast(%var_3793, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %248 = reshape(%247, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %249 = @func_2813(%248) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %250 = %246.0;
  %251 = %249.2;
  (%250, %251, %var_3793)
}

def @func_2813(%var_2811: Tensor[(126), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
  %252 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %253 = cast(meta[relay.Constant][9] /* ty=Tensor[(936, 1), uint64] */, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
  %254 = cast(meta[relay.Constant][9] /* ty=Tensor[(936, 1), uint64] */, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
  %255 = reshape(%253, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
  %256 = reshape(%254, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
  %257 = @func_2385(%255, %256) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */;
  %258 = cast(%var_2811, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %259 = cast(%var_2811, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %260 = cast(%var_2811, dtype="float64") /* ty=Tensor[(126), float64] */;
  %261 = reshape(%258, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %262 = reshape(%259, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %263 = reshape(%260, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
  %264 = @func_904(%261, %262, %263) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
  %265 = %252.0;
  %266 = %257.0;
  %267 = %264.0;
  (%265, %266, meta[relay.Constant][9] /* ty=Tensor[(936, 1), uint64] */, %267, %var_2811)
}

def @func_3703() -> (Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) {
  %268 = @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %269 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 8), bool] */, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%269, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %274 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %275 = cast(%269, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %276 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 9, 8), bool] */, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = %268.0;
  %280 = mod(%272, %273) /* ty=Tensor[(10, 9, 8), float32] */;
  %281 = %274.0;
  %282 = greater_equal(%277, %278) /* ty=Tensor[(10, 9, 8), bool] */;
  (%279, %280, %281, %282)
}

def @func_3141() -> (Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) {
  %283 = cast(meta[relay.Constant][11] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
  %285 = reshape(%283, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
  %286 = reshape(%284, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
  %287 = @func_421(%285, %286) /* ty=(Tensor[(10, 9, 8), bool],) */;
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %289 = reshape(%288, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
  %290 = @func_459(%289) /* ty=(Tensor[(6, 15, 12), uint8],) */;
  %291 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %292 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 1, 16), uint64] */, dtype="uint64") /* ty=Tensor[(10, 1, 16), uint64] */;
  %293 = logical_xor(%291, %292) /* ty=Tensor[(10, 1, 16), uint64] */;
  %294 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 1, 16), uint64] */, dtype="float64") /* ty=Tensor[(10, 1, 16), float64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="float64") /* ty=Tensor[(10, 1, 16), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %298 = %287.0;
  %299 = %290.0;
  %300 = floor_divide(%296, %297) /* ty=Tensor[(10, ?, 16), float64] */;
  (%298, meta[relay.Constant][11] /* ty=Tensor[(720), uint32] */, %299, meta[relay.Constant][12] /* ty=Tensor[(1080), uint8] */, %300)
}

def @func_5438(%var_5414: Tensor[(490), bool], %var_5415: Tensor[(126), uint32]) -> (Tensor[(1, 1176), float32], Tensor[(14, 5, 7), bool], Tensor[(490), bool], Tensor[(126), uint32], Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) {
  %301 = @func_4010() /* ty=(Tensor[(1, 1176), float32],) */;
  %302 = cast(%var_5414, dtype="bool") /* ty=Tensor[(490), bool] */;
  %303 = cast(%var_5414, dtype="bool") /* ty=Tensor[(490), bool] */;
  %304 = cast(%var_5415, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %305 = reshape(%302, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), bool] */;
  %306 = reshape(%303, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), bool] */;
  %307 = reshape(%304, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %308 = @func_1647(%305, %306, %307) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %309 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
  %310 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
  %311 = %301.0;
  %312 = %308.0;
  %313 = %309.0;
  %314 = %310.3;
  (%311, %312, %var_5414, %var_5415, %313, %314)
}

def @func_4874(%var_4872: Tensor[(126, 1), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(126, 1), uint32]) {
  %315 = cast(%var_4872, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %316 = cast(%var_4872, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %317 = cast(%var_4872, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %318 = reshape(%315, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %319 = reshape(%316, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %320 = reshape(%317, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
  %321 = @func_904(%318, %319, %320) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
  %322 = @func_3969() /* ty=Tensor[(5, 8, 3), float32] */;
  %323 = %321.1;
  (%322, %323, %var_4872)
}

def @func_5800() -> Tensor[(1080), float32] {
  %324 = @func_3378() /* ty=(Tensor[(1080), uint8],) */;
  %325 = %324.0;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(1080), float32] */;
  asinh(%326) /* ty=Tensor[(1080), float32] */
}

def @main(%var_6155: Tensor[(10, 12, 6), float64], %var_6160: Tensor[(126), uint32], %var_6164: Tensor[(936, 1), uint64]) -> (Tensor[(126), uint32], Tensor[(936, ?), bool], Tensor[(9, 12, 8), int16], Tensor[(864), int16], Tensor[(10, 12, 6), int8]) {
  %327 = cast(%var_6160, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %328 = reshape(%327, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %329 = @func_3809(%328) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */;
  %330 = %329.1;
  %331 = cast(%var_6164, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(2), int32] */;
  %333 = cast(%330, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %335 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %336 = reshape(%335, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), int16] */;
  %337 = @func_5221(%336) /* ty=(Tensor[(9, 12, 8), int16],) */;
  %338 = cast(%var_6155, dtype="float64") /* ty=Tensor[(10, 12, 6), float64] */;
  %339 = asinh(%338) /* ty=Tensor[(10, 12, 6), float64] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(10, 12, 6), float64] */;
  %341 = sqrt(%340) /* ty=Tensor[(10, 12, 6), float64] */;
  %342 = cast(%341, dtype="int8") /* ty=Tensor[(10, 12, 6), int8] */;
  %343 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%339, dtype="int8") /* ty=Tensor[(10, 12, 6), int8] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %346 = greater(%333, %334) /* ty=Tensor[(936, ?), bool] */;
  %347 = %337.0;
  %348 = logical_xor(%344, %345) /* ty=Tensor[(10, 12, 6), int8] */;
  (%var_6160, %346, %347, meta[relay.Constant][15] /* ty=Tensor[(864), int16] */, %348)
}

def @func_4912(%var_4891: Tensor[(3, 2, 15), float32]) -> (Tensor[(3, 2, 15), float32], Tensor[(3, 5, 15), bool]) {
  %349 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 15), float32] */;
  %350 = cast(%var_4891, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
  %351 = cast(meta[relay.Constant][16] /* ty=Tensor[(3, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 15), float32] */;
  %352 = sin(%351) /* ty=Tensor[(3, 1, 15), float32] */;
  %353 = cast(%352, dtype="bool") /* ty=Tensor[(3, 1, 15), bool] */;
  %354 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 5, 15), float32] */, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
  %355 = add(%349, %350) /* ty=Tensor[(3, 2, 15), float32] */;
  %356 = greater_equal(%353, %354) /* ty=Tensor[(3, 5, 15), bool] */;
  (%355, %356)
}

def @func_4987(%var_4979: Tensor[(936), uint64], %var_4982: Tensor[(264), uint32]) -> (Tensor[(10, 9, 8), float32], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(264), uint32]) {
  %357 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
  %358 = cast(%var_4979, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %359 = cast(%var_4979, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %360 = reshape(%358, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
  %361 = reshape(%359, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
  %362 = @func_2385(%360, %361) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */;
  %363 = cast(%var_4982, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %364 = reshape(%363, newshape=[264]) /* ty=Tensor[(264), uint32] */;
  %365 = @func_3319(%364) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) */;
  %366 = %357.1;
  %367 = %362.0;
  %368 = %365.0;
  (%366, %367, %var_4979, %368, %var_4982)
}

def @func_1674(%var_1665: Tensor[(1, 1176), float32]) -> (Tensor[(2, 15, 5), float32], Tensor[(1176), float32], Tensor[(1680), uint16], Tensor[(1, 1176), float32]) {
  %369 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
  %370 = cosh(%369) /* ty=Tensor[(2, 15, 5), float32] */;
  %371 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
  %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %373 = cast(%370, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %375 = cast(meta[relay.Constant][19] /* ty=Tensor[(1680), uint16] */, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
  %376 = cast(%var_1665, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %377 = cast(meta[relay.Constant][19] /* ty=Tensor[(1680), uint16] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %378 = reshape(%375, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %379 = reshape(%376, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %380 = reshape(%377, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
  %381 = @func_1601(%378, %379, %380) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
  %382 = floor_divide(%373, %374) /* ty=Tensor[(2, 15, 5), float32] */;
  %383 = %381.6;
  (%382, %383, meta[relay.Constant][19] /* ty=Tensor[(1680), uint16] */, %var_1665)
}

def @func_3969() -> Tensor[(5, 8, 3), float32] {
  %384 = @func_3928() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %384.0
}

def @func_6011() -> (Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32]) {
  %385 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %386 = cast(%385, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %387 = log2(%386) /* ty=Tensor[(10, 9, 8), float32] */;
  %388 = @func_3969() /* ty=Tensor[(5, 8, 3), float32] */;
  (%387, %388)
}

def @func_5328() -> (Tensor[(10, 9, 8), bool], Tensor[(3, 7, 3), int64], Tensor[(63), int64], Tensor[(10, 9, 8), bool]) {
  %389 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %390 = cast(meta[relay.Constant][20] /* ty=Tensor[(63), int64] */, dtype="int64") /* ty=Tensor[(63), int64] */;
  %391 = cast(meta[relay.Constant][20] /* ty=Tensor[(63), int64] */, dtype="int64") /* ty=Tensor[(63), int64] */;
  %392 = reshape(%390, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), int64] */;
  %393 = reshape(%391, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), int64] */;
  %394 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
  %395 = %389.0;
  %396 = @func_4025(%392, %393) /* ty=Tensor[(3, 7, 3), int64] */;
  %397 = %394.1;
  (%395, %396, meta[relay.Constant][20] /* ty=Tensor[(63), int64] */, %397)
}

def @func_5742(%var_5720: Tensor[(3, 15, 2), float64]) -> (Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), bool]) {
  %398 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
  %399 = atan(%398) /* ty=Tensor[(3, 15, 2), float32] */;
  %400 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 15, 2), float32] */, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %404 = cast(%399, dtype="float64") /* ty=Tensor[(3, 15, 2), float64] */;
  %405 = cos(%404) /* ty=Tensor[(3, 15, 2), float64] */;
  %406 = cast(%var_5720, dtype="int32") /* ty=Tensor[(3, 15, 2), int32] */;
  %407 = shape_of(%405, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%405, dtype="int32") /* ty=Tensor[(3, 15, 2), int32] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %410 = right_shift(%408, %409) /* ty=Tensor[(3, 15, 2), int32] */;
  %411 = cast(%399, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %415 = less_equal(%402, %403) /* ty=Tensor[(3, 15, 2), bool] */;
  %416 = logical_and(%413, %414) /* ty=Tensor[(3, 15, 2), bool] */;
  (%415, %416)
}

def @func_3476() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) {
  %417 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %418 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %419 = %418.1;
  %420 = cast(%419, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %421 = cos(%420) /* ty=Tensor[(5, 8, 3), float64] */;
  %422 = cast(%419, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %423 = shape_of(%421, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%421, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %426 = floor_divide(%424, %425) /* ty=Tensor[(5, 8, 3), float32] */;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %428 = cast(meta[relay.Constant][22] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %429 = reshape(%427, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), float64] */;
  %430 = reshape(%428, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %431 = @func_2630(%429, %430) /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */;
  %432 = %417.0;
  %433 = %431.2;
  (%432, %426, %433, meta[relay.Constant][22] /* ty=Tensor[(756), uint8] */)
}

def @func_3928() -> (Tensor[(5, 8, 3), float32],) {
  %434 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %435 = %434.1;
  (%435,)
}

def @func_364(%var_351: Tensor[(12, 14, 7), float32], %var_352: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), float32],) {
  %436 = cast(%var_352, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %437 = shape_of(%var_351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_351, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %440 = divide(%438, %439) /* ty=Tensor[(12, 14, 7), float32] */;
  (%440,)
}

def @func_4231() -> (Tensor[(1080), uint8], Tensor[(10, 9, 8), float64], Tensor[(1, 720), bool]) {
  %441 = @func_3885() /* ty=(Tensor[(1080), uint8],) */;
  %442 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 720), bool] */, dtype="bool") /* ty=Tensor[(1, 720), bool] */;
  %443 = reshape(%442, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), bool] */;
  %444 = %441.0;
  %445 = @func_3546(%443) /* ty=Tensor[(10, 9, 8), float64] */;
  (%444, %445, meta[relay.Constant][23] /* ty=Tensor[(1, 720), bool] */)
}

def @func_6129() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float64]) {
  %446 = @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %447 = %446.0;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %449 = @func_5823() /* ty=Tensor[(10, 9, 8), bool] */;
  %450 = asinh(%448) /* ty=Tensor[(5, 8, 3), float64] */;
  (%449, %450)
}

def @func_3417() -> Tensor[(10, 9, 8), bool] {
  %451 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %451.0
}

def @func_5921(%var_5841: Tensor[(936, 3), float32], %var_5847: Tensor[(120), float64], %var_5848: Tensor[(3, 252), uint8], %var_5872: Tensor[(936, 4), float32]) -> (Tensor[(936, 3), int32], Tensor[(5, 8, 3), uint32], Tensor[(120), float64], Tensor[(3, 252), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), uint8], Tensor[(12, 14, 7), uint8], Tensor[(1176), float32], Tensor[(14, 12, 10), float32], Tensor[(4, 420), uint16], Tensor[(10, ?, 16), float64], Tensor[(936, 4), int32], Tensor[(936, 3), bool], Tensor[(6, 11, 4), bool], Tensor[(7, 12, 9), float32], Tensor[(5, 8, 3), int16]) {
  %452 = @func_4838() /* ty=(Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %453 = %452.0;
  %454 = cast(%453, dtype="int32") /* ty=Tensor[(936, ?), int32] */;
  %455 = cast(%var_5841, dtype="int32") /* ty=Tensor[(936, 3), int32] */;
  %456 = cast(%var_5847, dtype="float64") /* ty=Tensor[(120), float64] */;
  %457 = cast(%var_5848, dtype="uint8") /* ty=Tensor[(3, 252), uint8] */;
  %458 = reshape(%456, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), float64] */;
  %459 = reshape(%457, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %460 = @func_2630(%458, %459) /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */;
  %461 = @func_3378() /* ty=(Tensor[(1080), uint8],) */;
  %462 = %461.0;
  %463 = cast(%462, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %464 = reshape(%463, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
  %465 = @func_459(%464) /* ty=(Tensor[(6, 15, 12), uint8],) */;
  %466 = cast(meta[relay.Constant][24] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %467 = reshape(%466, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %468 = @func_4137(%467) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) */;
  %469 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 420), uint16] */, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
  %470 = %468.2;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %472 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 420), uint16] */, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
  %473 = reshape(%469, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %474 = reshape(%471, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %475 = reshape(%472, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
  %476 = @func_1601(%473, %474, %475) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
  %477 = cast(meta[relay.Constant][24] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %478 = reshape(%477, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %479 = @func_4137(%478) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) */;
  %480 = cast(%453, dtype="uint8") /* ty=Tensor[(936, ?), uint8] */;
  %481 = cast(%var_5872, dtype="uint8") /* ty=Tensor[(936, 4), uint8] */;
  %482 = subtract(%480, %481) /* ty=Tensor[(936, 4), uint8] */;
  %483 = cast(%482, dtype="int32") /* ty=Tensor[(936, 4), int32] */;
  %484 = cast(%453, dtype="int32") /* ty=Tensor[(936, ?), int32] */;
  %485 = cast(%453, dtype="bool") /* ty=Tensor[(936, ?), bool] */;
  %486 = cast(%var_5841, dtype="bool") /* ty=Tensor[(936, 3), bool] */;
  %487 = @func_4650() /* ty=(Tensor[(5, 8, 3), float32], int32, Tensor[(264), int32], Tensor[(1080), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), float32], Tensor[(6, 11, 4), bool], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float64]) */;
  %488 = cast(%var_5848, dtype="float32") /* ty=Tensor[(3, 252), float32] */;
  %489 = reshape(%488, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %490 = cast(%var_5847, dtype="float64") /* ty=Tensor[(120), float64] */;
  %491 = reshape(%490, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), float64] */;
  %492 = @func_5361(%491) /* ty=(Tensor[(5, 8, 3), int16],) */;
  %493 = multiply(%454, %455) /* ty=Tensor[(936, 3), int32] */;
  %494 = %460.0;
  %495 = %465.0;
  %496 = %476.8;
  %497 = %479.3;
  %498 = bitwise_xor(%483, %484) /* ty=Tensor[(936, 4), int32] */;
  %499 = less_equal(%485, %486) /* ty=Tensor[(936, 3), bool] */;
  %500 = %487.6;
  %501 = @func_4041(%489) /* ty=Tensor[(7, 12, 9), float32] */;
  %502 = %492.0;
  (%493, %494, %var_5847, %var_5848, %462, %495, %470, meta[relay.Constant][24] /* ty=Tensor[(1176), float32] */, %496, meta[relay.Constant][25] /* ty=Tensor[(4, 420), uint16] */, %497, %498, %499, %500, %501, %502)
}

def @func_1896(%var_1893: Tensor[(3, 10, 4), float32]) -> (Tensor[(3, 10, 4), float32],) {
  %503 = cast(%var_1893, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
  %504 = sinh(%503) /* ty=Tensor[(3, 10, 4), float32] */;
  (%504,)
}

def @func_5562() -> (Tensor[(126), uint32], Tensor[(10, 9, 8), float32]) {
  %505 = @func_4838() /* ty=(Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %506 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
  %507 = %505.2;
  %508 = %506.1;
  (%507, %508)
}

def @func_4650() -> (Tensor[(5, 8, 3), float32], int32, Tensor[(264), int32], Tensor[(1080), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), float32], Tensor[(6, 11, 4), bool], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float64]) {
  %509 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
  %510 = @func_3885() /* ty=(Tensor[(1080), uint8],) */;
  %511 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %512 = cast(meta[relay.Constant][26] /* ty=Tensor[(264), int32] */, dtype="int32") /* ty=Tensor[(264), int32] */;
  %513 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %514 = reshape(%511, newshape=[]) /* ty=int32 */;
  %515 = reshape(%512, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int32] */;
  %516 = reshape(%513, newshape=[1080]) /* ty=Tensor[(1080), uint8] */;
  %517 = @func_1292(%514, %515, %516) /* ty=(Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) */;
  %518 = %517.1;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(6, 15, 12), float32] */;
  %520 = cast(meta[relay.Constant][26] /* ty=Tensor[(264), int32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %521 = cast(meta[relay.Constant][26] /* ty=Tensor[(264), int32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %522 = reshape(%520, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %523 = reshape(%521, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %524 = cast(meta[relay.Constant][28] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %525 = cast(meta[relay.Constant][28] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
  %526 = reshape(%524, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
  %527 = reshape(%525, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
  %528 = @func_2385(%526, %527) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */;
  %529 = cast(%518, dtype="float64") /* ty=Tensor[(6, 15, 12), float64] */;
  %530 = log2(%529) /* ty=Tensor[(6, 15, 12), float64] */;
  %531 = cast(%530, dtype="float64") /* ty=Tensor[(6, 15, 12), float64] */;
  %532 = %509.0;
  %533 = %510.0;
  %534 = sqrt(%519) /* ty=Tensor[(6, 15, 12), float32] */;
  %535 = @func_2938(%522, %523) /* ty=Tensor[(6, 11, 4), bool] */;
  %536 = %528.0;
  %537 = @func_3969() /* ty=Tensor[(5, 8, 3), float32] */;
  %538 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  %539 = asin(%531) /* ty=Tensor[(6, 15, 12), float64] */;
  (%532, -6 /* ty=int32 */, meta[relay.Constant][26] /* ty=Tensor[(264), int32] */, meta[relay.Constant][27] /* ty=Tensor[(1080), uint8] */, %533, %534, %535, %536, meta[relay.Constant][28] /* ty=Tensor[(936), uint64] */, %537, %538, %539)
}

def @func_459(%var_452: Tensor[(6, 15, 12), uint8]) -> (Tensor[(6, 15, 12), uint8],) {
  %540 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 15, 12), uint8] */, dtype="uint8") /* ty=Tensor[(6, 15, 12), uint8] */;
  %541 = shape_of(%var_452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%var_452, dtype="uint8") /* ty=Tensor[(6, 15, 12), uint8] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %544 = logical_xor(%542, %543) /* ty=Tensor[(6, 15, 12), uint8] */;
  (%544,)
}

def @func_4935() -> (Tensor[(9, 11, ?), float32],) {
  %545 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
  %546 = %545.1;
  (%546,)
}

def @func_421(%var_410: Tensor[(10, 9, 8), uint32], %var_411: Tensor[(10, 9, 8), uint32]) -> (Tensor[(10, 9, 8), bool],) {
  %547 = cast(%var_411, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %548 = shape_of(%var_410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_410, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = less_equal(%549, %550) /* ty=Tensor[(10, 9, 8), bool] */;
  (%551,)
}

def @func_3510(%var_3483: Tensor[(10, 9, 8), bool], %var_3501: Tensor[(126), uint32], %var_3504: int32, %var_3505: Tensor[(264), int32]) -> (Tensor[(10, 9, 8), int32], Tensor[(5, 8, 3), float32], Tensor[(126), uint32], Tensor[(1080), uint8], int32, Tensor[(264), int32], Tensor[(1080), uint8]) {
  %552 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %553 = %552.0;
  %554 = cast(%var_3483, dtype="int32") /* ty=Tensor[(10, 9, 8), int32] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="int32") /* ty=Tensor[(10, 9, 8), int32] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %558 = cast(%var_3501, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %559 = reshape(%558, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %560 = @func_2813(%559) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %561 = cast(%var_3504, dtype="int32") /* ty=int32 */;
  %562 = cast(%var_3505, dtype="int32") /* ty=Tensor[(264), int32] */;
  %563 = cast(meta[relay.Constant][30] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %564 = reshape(%561, newshape=[]) /* ty=int32 */;
  %565 = reshape(%562, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int32] */;
  %566 = reshape(%563, newshape=[1080]) /* ty=Tensor[(1080), uint8] */;
  %567 = @func_1292(%564, %565, %566) /* ty=(Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) */;
  %568 = bitwise_or(%556, %557) /* ty=Tensor[(10, 9, 8), int32] */;
  %569 = %560.0;
  %570 = %567.2;
  (%568, %569, %var_3501, %570, %var_3504, %var_3505, meta[relay.Constant][30] /* ty=Tensor[(1080), uint8] */)
}

def @func_5028() -> (Tensor[(10, 9, 8), bool],) {
  %571 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  (%571,)
}

def @func_1647(%var_1628: Tensor[(14, 5, 7), bool], %var_1629: Tensor[(14, 5, 7), bool], %var_1640: Tensor[(126), uint32]) -> (Tensor[(14, 5, 7), bool], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
  %572 = cast(%var_1629, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %573 = shape_of(%var_1628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %574 = cast(%var_1628, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
  %575 = dyn.reshape(%572, %573, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %576 = cast(%var_1640, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %577 = cast(%var_1640, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %578 = cast(%var_1640, dtype="float64") /* ty=Tensor[(126), float64] */;
  %579 = reshape(%576, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %580 = reshape(%577, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %581 = reshape(%578, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
  %582 = @func_904(%579, %580, %581) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
  %583 = logical_and(%574, %575) /* ty=Tensor[(14, 5, 7), bool] */;
  %584 = %582.0;
  (%583, %584, %var_1640)
}

def @func_5541(%var_5509: bool, %var_5510: Tensor[(216), bool], %var_5524: Tensor[(5, 70), float32]) -> (Tensor[(10, 9, 8), bool], Tensor[(9, 3, 8), bool], bool, Tensor[(216), bool], Tensor[(10, 5, 7), float32], Tensor[(5, 70), float32], Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) {
  %585 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
  %586 = cast(%var_5509, dtype="bool") /* ty=bool */;
  %587 = cast(%var_5510, dtype="bool") /* ty=Tensor[(216), bool] */;
  %588 = reshape(%586, newshape=[]) /* ty=bool */;
  %589 = reshape(%587, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), bool] */;
  %590 = @func_3944(%588, %589) /* ty=(Tensor[(9, 3, 8), bool],) */;
  %591 = cast(%var_5524, dtype="float32") /* ty=Tensor[(5, 70), float32] */;
  %592 = reshape(%591, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), float32] */;
  %593 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %594 = %593.2;
  %595 = cast(%594, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %596 = cast(%594, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %597 = reshape(%596, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), bool] */;
  %598 = %585.0;
  %599 = %590.0;
  %600 = @func_1095(%592) /* ty=Tensor[(10, 5, 7), float32] */;
  %601 = sinh(%595) /* ty=Tensor[(10, 9, 8), float32] */;
  %602 = @func_3546(%597) /* ty=Tensor[(10, 9, 8), float64] */;
  (%598, %599, %var_5509, %var_5510, %600, %var_5524, %601, %602)
}

def @func_4089() -> (Tensor[(6, 196), float32],) {
  %603 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %604 = %603.4;
  (%604,)
}

def @func_5221(%var_5213: Tensor[(9, 12, 8), int16]) -> (Tensor[(9, 12, 8), int16],) {
  %605 = cast(%var_5213, dtype="int16") /* ty=Tensor[(9, 12, 8), int16] */;
  %606 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(9, 12, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 12, 8), int16] */, dtype="int16") /* ty=Tensor[(9, 12, 8), int16] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %609 = add(%607, %608) /* ty=Tensor[(9, 12, 8), int16] */;
  (%609,)
}

def @func_4262() -> (Tensor[(5, 8, 3), float32], Tensor[(936, 1), uint64], Tensor[(3, 42), uint32]) {
  %610 = @func_3928() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %611 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 42), uint32] */, dtype="uint32") /* ty=Tensor[(3, 42), uint32] */;
  %612 = reshape(%611, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %613 = @func_3809(%612) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */;
  %614 = %610.0;
  %615 = %613.1;
  (%614, %615, meta[relay.Constant][32] /* ty=Tensor[(3, 42), uint32] */)
}

def @func_4386(%var_4343: Tensor[(4, 180), uint32], %var_4359: Tensor[(1, 1680), uint16]) -> (Tensor[(126), bool], Tensor[(10, 9, 8), bool], Tensor[(4, 180), uint32], Tensor[(1, 1176), float32], Tensor[(1176), float32], Tensor[(1, 1680), uint16]) {
  %616 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
  %617 = %616.3;
  %618 = cast(meta[relay.Constant][33] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
  %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(1), int32] */;
  %620 = cast(%617, dtype="bool") /* ty=Tensor[(126), bool] */;
  %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?), bool] */;
  %622 = cast(%var_4343, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
  %623 = cast(%var_4343, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
  %624 = reshape(%622, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
  %625 = reshape(%623, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
  %626 = @func_421(%624, %625) /* ty=(Tensor[(10, 9, 8), bool],) */;
  %627 = @func_4010() /* ty=(Tensor[(1, 1176), float32],) */;
  %628 = cast(%var_4359, dtype="uint16") /* ty=Tensor[(1, 1680), uint16] */;
  %629 = %627.0;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %631 = cast(%var_4359, dtype="float64") /* ty=Tensor[(1, 1680), float64] */;
  %632 = reshape(%628, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
  %633 = reshape(%630, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
  %634 = reshape(%631, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
  %635 = @func_1601(%632, %633, %634) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
  %636 = greater(%620, %621) /* ty=Tensor[(126), bool] */;
  %637 = %626.0;
  %638 = %635.6;
  (%636, %637, %var_4343, %629, %638, %var_4359)
}

def @func_1761(%var_1696: Tensor[(9, 12, 7), uint8], %var_1697: Tensor[(9, 12, 7), uint8]) -> (Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(9, 12, 7), float64]) {
  %639 = cast(meta[relay.Constant][34] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %640 = reshape(%639, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), float32] */;
  %641 = cast(meta[relay.Constant][35] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %642 = reshape(%641, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
  %643 = @func_459(%642) /* ty=(Tensor[(6, 15, 12), uint8],) */;
  %644 = cast(%var_1697, dtype="uint8") /* ty=Tensor[(9, 12, 7), uint8] */;
  %645 = shape_of(%var_1696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_1696, dtype="uint8") /* ty=Tensor[(9, 12, 7), uint8] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %648 = maximum(%646, %647) /* ty=Tensor[(9, 12, 7), uint8] */;
  %649 = cast(%648, dtype="uint16") /* ty=Tensor[(9, 12, 7), uint16] */;
  %650 = shape_of(%var_1696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_1696, dtype="uint16") /* ty=Tensor[(9, 12, 7), uint16] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %653 = left_shift(%651, %652) /* ty=Tensor[(9, 12, 7), uint16] */;
  %654 = cast(%648, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %658 = floor_divide(%656, %657) /* ty=Tensor[(9, 12, 7), float64] */;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %660 = @func_1095(%640) /* ty=Tensor[(10, 5, 7), float32] */;
  %661 = %643.0;
  %662 = erf(%659) /* ty=Tensor[(9, 12, 7), float64] */;
  (%660, meta[relay.Constant][34] /* ty=Tensor[(350), float32] */, %661, meta[relay.Constant][35] /* ty=Tensor[(1080), uint8] */, %662)
}

def @func_4041(%var_4033: Tensor[(7, 12, 9), float32]) -> Tensor[(7, 12, 9), float32] {
  %663 = cast(%var_4033, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  rsqrt(%663) /* ty=Tensor[(7, 12, 9), float32] */
}

def @func_2938(%var_2931: Tensor[(6, 11, 4), uint32], %var_2932: Tensor[(6, 11, 4), uint32]) -> Tensor[(6, 11, 4), bool] {
  %664 = cast(%var_2932, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %665 = shape_of(%var_2931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_2931, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%666, %667) /* ty=Tensor[(6, 11, 4), bool] */
}

def @func_1601(%var_1536: Tensor[(14, 12, 10), uint16], %var_1573: Tensor[(1176), float32], %var_1592: Tensor[(14, 12, 10), float64]) -> (Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) {
  %668 = cast(%var_1536, dtype="uint16") /* ty=Tensor[(14, 12, 10), uint16] */;
  %669 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(14, 12, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 12, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 12, 10), uint16] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %672 = cast(meta[relay.Constant][37] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %673 = reshape(%672, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), float32] */;
  %674 = cast(meta[relay.Constant][38] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %675 = reshape(%674, newshape=[5, 2, 11]) /* ty=Tensor[(5, 2, 11), float64] */;
  %676 = @func_945(%675) /* ty=(Tensor[(5, 2, 11), float64],) */;
  %677 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %678 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %679 = reshape(%677, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %680 = reshape(%678, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %681 = @func_364(%679, %680) /* ty=(Tensor[(12, 14, 7), float32],) */;
  %682 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %683 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %684 = reshape(%682, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %685 = reshape(%683, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %686 = @func_364(%684, %685) /* ty=(Tensor[(12, 14, 7), float32],) */;
  %687 = cast(%var_1536, dtype="float64") /* ty=Tensor[(14, 12, 10), float64] */;
  %688 = acos(%687) /* ty=Tensor[(14, 12, 10), float64] */;
  %689 = cast(%var_1592, dtype="float32") /* ty=Tensor[(14, 12, 10), float32] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%688, dtype="float32") /* ty=Tensor[(14, 12, 10), float32] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %693 = left_shift(%670, %671) /* ty=Tensor[(14, 12, 10), uint16] */;
  %694 = @func_1095(%673) /* ty=Tensor[(10, 5, 7), float32] */;
  %695 = %676.0;
  %696 = %681.0;
  %697 = %686.0;
  %698 = floor_mod(%691, %692) /* ty=Tensor[(14, 12, 10), float32] */;
  (%693, %694, meta[relay.Constant][37] /* ty=Tensor[(350), float32] */, %695, meta[relay.Constant][38] /* ty=Tensor[(110), float64] */, %696, %var_1573, %697, %698)
}

def @func_945(%var_940: Tensor[(5, 2, 11), float64]) -> (Tensor[(5, 2, 11), float64],) {
  %699 = cast(%var_940, dtype="float64") /* ty=Tensor[(5, 2, 11), float64] */;
  %700 = log2(%699) /* ty=Tensor[(5, 2, 11), float64] */;
  (%700,)
}

def @func_3378() -> (Tensor[(1080), uint8],) {
  %701 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %702 = %701.3;
  (%702,)
}

def @func_3861() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) {
  %703 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %704 = @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %705 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 196), float32] */, dtype="float32") /* ty=Tensor[(6, 196), float32] */;
  %706 = reshape(%705, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float32] */;
  %707 = @func_1674(%706) /* ty=(Tensor[(2, 15, 5), float32], Tensor[(1176), float32], Tensor[(1680), uint16], Tensor[(1, 1176), float32]) */;
  %708 = %703.0;
  %709 = %704.0;
  %710 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %711 = %707.3;
  (%708, %709, %710, %711, meta[relay.Constant][39] /* ty=Tensor[(6, 196), float32] */)
}

def @func_4010() -> (Tensor[(1, 1176), float32],) {
  %712 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %713 = %712.3;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %715 = sin(%714) /* ty=Tensor[(1, 1176), float32] */;
  (%715,)
}

def @func_2525() -> (Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) {
  %716 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %717 = cast(meta[relay.Constant][40] /* ty=Tensor[(5, 8, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %718 = atan(%716) /* ty=Tensor[(5, 8, 3), float32] */;
  %719 = tan(%717) /* ty=Tensor[(5, 8, 3), float64] */;
  (%718, %719)
}

def @func_4493(%var_4462: Tensor[(126), uint32]) -> (Tensor[(1, 1176), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(9, 7, 2), bool]) {
  %720 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %721 = %720.3;
  %722 = cast(%721, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %723 = log(%722) /* ty=Tensor[(1, 1176), float32] */;
  %724 = cast(%723, dtype="float64") /* ty=Tensor[(1, 1176), float64] */;
  %725 = exp(%724) /* ty=Tensor[(1, 1176), float64] */;
  %726 = cast(%725, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %727 = cast(%var_4462, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %728 = reshape(%727, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %729 = @func_3809(%728) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */;
  %730 = %729.2;
  %731 = cast(%730, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %732 = cast(%730, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %733 = cast(%730, dtype="float64") /* ty=Tensor[(126), float64] */;
  %734 = reshape(%731, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %735 = reshape(%732, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %736 = reshape(%733, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
  %737 = @func_904(%734, %735, %736) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
  %738 = cosh(%726) /* ty=Tensor[(1, 1176), float32] */;
  %739 = %737.1;
  (%738, %730, %var_4462, %739)
}

def @func_4838() -> (Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
  %740 = @func_4262() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(936, 1), uint64], Tensor[(3, 42), uint32]) */;
  %741 = %740.1;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
  %743 = cos(%742) /* ty=Tensor[(936, 1), float32] */;
  %744 = cast(%741, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(2), int32] */;
  %746 = cast(%743, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %748 = cast(meta[relay.Constant][41] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %749 = reshape(%748, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %750 = @func_4493(%749) /* ty=(Tensor[(1, 1176), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(9, 7, 2), bool]) */;
  %751 = floor_mod(%746, %747) /* ty=Tensor[(936, ?), float32] */;
  %752 = %750.3;
  (%751, %752, meta[relay.Constant][41] /* ty=Tensor[(126), uint32] */)
}

def @func_3356() -> Tensor[(10, 9, 8), bool] {
  %753 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %753.0
}

def @func_5284() -> (Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) {
  %754 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
  %755 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
  %756 = %754.1;
  %757 = %755.3;
  (%756, %757)
}

def @func_3546(%var_3541: Tensor[(10, 9, 8), bool]) -> Tensor[(10, 9, 8), float64] {
  %758 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %759 = %758.0;
  %760 = cast(%var_3541, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %761 = shape_of(%759, dtype="int32") /* ty=Tensor[(3), int32] */;
  %762 = cast(%759, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %763 = dyn.reshape(%760, %761, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%762, %763) /* ty=Tensor[(10, 9, 8), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4263() -> (Tensor[(5, 8, 3), float32], Tensor[(936, 1), uint64], Tensor[(3, 42), uint32]) {
  %6 = fn () -> (Tensor[(5, 8, 3), float32], Tensor[(936, 1), uint64], Tensor[(3, 42), uint32]) {
    %0 = @func_3928() /* ty=(Tensor[(5, 8, 3), float32],) */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(3, 42), uint32] */, dtype="uint32") /* ty=Tensor[(3, 42), uint32] */;
    %2 = reshape(%1, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %3 = @func_3809(%2) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */;
    %4 = %0.0;
    %5 = %3.1;
    (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(3, 42), uint32] */)
  };
  %6() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(936, 1), uint64], Tensor[(3, 42), uint32]) */
}

def @func_462(%var_460: Tensor[(6, 15, 12), uint8]) -> (Tensor[(6, 15, 12), uint8],) {
  @func_459(%var_460) /* ty=(Tensor[(6, 15, 12), uint8],) */
}

def @func_1761(%var_1696: Tensor[(9, 12, 7), uint8], %var_1697: Tensor[(9, 12, 7), uint8]) -> (Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(9, 12, 7), float64]) {
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %8 = reshape(%7, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), float32] */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %10 = reshape(%9, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
  %11 = @func_459(%10) /* ty=(Tensor[(6, 15, 12), uint8],) */;
  %12 = cast(%var_1697, dtype="uint8") /* ty=Tensor[(9, 12, 7), uint8] */;
  %13 = shape_of(%var_1696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_1696, dtype="uint8") /* ty=Tensor[(9, 12, 7), uint8] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %16 = maximum(%14, %15) /* ty=Tensor[(9, 12, 7), uint8] */;
  %17 = cast(%16, dtype="uint16") /* ty=Tensor[(9, 12, 7), uint16] */;
  %18 = shape_of(%var_1696, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_1696, dtype="uint16") /* ty=Tensor[(9, 12, 7), uint16] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %21 = left_shift(%19, %20) /* ty=Tensor[(9, 12, 7), uint16] */;
  %22 = cast(%16, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %26 = floor_divide(%24, %25) /* ty=Tensor[(9, 12, 7), float64] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(9, 12, 7), float64] */;
  %28 = @func_1095(%8) /* ty=Tensor[(10, 5, 7), float32] */;
  %29 = %11.0;
  %30 = erf(%27) /* ty=Tensor[(9, 12, 7), float64] */;
  (%28, meta[relay.Constant][1] /* ty=Tensor[(350), float32] */, %29, meta[relay.Constant][2] /* ty=Tensor[(1080), uint8] */, %30)
}

def @func_3886() -> (Tensor[(1080), uint8],) {
  %33 = fn () -> (Tensor[(1080), uint8],) {
    %31 = @func_3378() /* ty=(Tensor[(1080), uint8],) */;
    %32 = %31.0;
    (%32,)
  };
  %33() /* ty=(Tensor[(1080), uint8],) */
}

def @func_5329() -> (Tensor[(10, 9, 8), bool], Tensor[(3, 7, 3), int64], Tensor[(63), int64], Tensor[(10, 9, 8), bool]) {
  %43 = fn () -> (Tensor[(10, 9, 8), bool], Tensor[(3, 7, 3), int64], Tensor[(63), int64], Tensor[(10, 9, 8), bool]) {
    %34 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
    %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(63), int64] */, dtype="int64") /* ty=Tensor[(63), int64] */;
    %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(63), int64] */, dtype="int64") /* ty=Tensor[(63), int64] */;
    %37 = reshape(%35, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), int64] */;
    %38 = reshape(%36, newshape=[3, 7, 3]) /* ty=Tensor[(3, 7, 3), int64] */;
    %39 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
    %40 = %34.0;
    %41 = @func_4025(%37, %38) /* ty=Tensor[(3, 7, 3), int64] */;
    %42 = %39.1;
    (%40, %41, meta[relay.Constant][3] /* ty=Tensor[(63), int64] */, %42)
  };
  %43() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(3, 7, 3), int64], Tensor[(63), int64], Tensor[(10, 9, 8), bool]) */
}

def @func_5800() -> Tensor[(1080), float32] {
  %44 = @func_3378() /* ty=(Tensor[(1080), uint8],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float32") /* ty=Tensor[(1080), float32] */;
  asinh(%46) /* ty=Tensor[(1080), float32] */
}

def @func_5363(%var_5362: Tensor[(5, 8, 3), float64]) -> (Tensor[(5, 8, 3), int16],) {
  %54 = fn (%var_5356: Tensor[(5, 8, 3), float64]) -> (Tensor[(5, 8, 3), int16],) {
    %47 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
    %48 = %47.1;
    %49 = cast(%var_5356, dtype="int16") /* ty=Tensor[(5, 8, 3), int16] */;
    %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%48, dtype="int16") /* ty=Tensor[(5, 8, 3), int16] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %53 = bitwise_and(%51, %52) /* ty=Tensor[(5, 8, 3), int16] */;
    (%53,)
  };
  %54(%var_5362) /* ty=(Tensor[(5, 8, 3), int16],) */
}

def @func_4990(%var_4988: Tensor[(936), uint64], %var_4989: Tensor[(264), uint32]) -> (Tensor[(10, 9, 8), float32], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(264), uint32]) {
  %67 = fn (%var_4979: Tensor[(936), uint64], %var_4982: Tensor[(264), uint32]) -> (Tensor[(10, 9, 8), float32], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(264), uint32]) {
    %55 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
    %56 = cast(%var_4979, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %57 = cast(%var_4979, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %58 = reshape(%56, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
    %59 = reshape(%57, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
    %60 = @func_2385(%58, %59) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */;
    %61 = cast(%var_4982, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %62 = reshape(%61, newshape=[264]) /* ty=Tensor[(264), uint32] */;
    %63 = @func_3319(%62) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) */;
    %64 = %55.1;
    %65 = %60.0;
    %66 = %63.0;
    (%64, %65, %var_4979, %66, %var_4982)
  };
  %67(%var_4988, %var_4989) /* ty=(Tensor[(10, 9, 8), float32], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(264), uint32]) */
}

def @func_945(%var_940: Tensor[(5, 2, 11), float64]) -> (Tensor[(5, 2, 11), float64],) {
  %68 = cast(%var_940, dtype="float64") /* ty=Tensor[(5, 2, 11), float64] */;
  %69 = log2(%68) /* ty=Tensor[(5, 2, 11), float64] */;
  (%69,)
}

def @func_3705() -> (Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) {
  @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */
}

def @func_3929() -> (Tensor[(5, 8, 3), float32],) {
  %72 = fn () -> (Tensor[(5, 8, 3), float32],) {
    %70 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
    %71 = %70.1;
    (%71,)
  };
  %72() /* ty=(Tensor[(5, 8, 3), float32],) */
}

def @func_5926(%var_5922: Tensor[(936, 3), float32], %var_5923: Tensor[(120), float64], %var_5924: Tensor[(3, 252), uint8], %var_5925: Tensor[(936, 4), float32]) -> (Tensor[(936, 3), int32], Tensor[(5, 8, 3), uint32], Tensor[(120), float64], Tensor[(3, 252), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), uint8], Tensor[(12, 14, 7), uint8], Tensor[(1176), float32], Tensor[(14, 12, 10), float32], Tensor[(4, 420), uint16], Tensor[(10, ?, 16), float64], Tensor[(936, 4), int32], Tensor[(936, 3), bool], Tensor[(6, 11, 4), bool], Tensor[(7, 12, 9), float32], Tensor[(5, 8, 3), int16]) {
  %124 = fn (%var_5841: Tensor[(936, 3), float32], %var_5847: Tensor[(120), float64], %var_5848: Tensor[(3, 252), uint8], %var_5872: Tensor[(936, 4), float32]) -> (Tensor[(936, 3), int32], Tensor[(5, 8, 3), uint32], Tensor[(120), float64], Tensor[(3, 252), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), uint8], Tensor[(12, 14, 7), uint8], Tensor[(1176), float32], Tensor[(14, 12, 10), float32], Tensor[(4, 420), uint16], Tensor[(10, ?, 16), float64], Tensor[(936, 4), int32], Tensor[(936, 3), bool], Tensor[(6, 11, 4), bool], Tensor[(7, 12, 9), float32], Tensor[(5, 8, 3), int16]) {
    %73 = @func_4838() /* ty=(Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
    %74 = %73.0;
    %75 = cast(%74, dtype="int32") /* ty=Tensor[(936, ?), int32] */;
    %76 = cast(%var_5841, dtype="int32") /* ty=Tensor[(936, 3), int32] */;
    %77 = cast(%var_5847, dtype="float64") /* ty=Tensor[(120), float64] */;
    %78 = cast(%var_5848, dtype="uint8") /* ty=Tensor[(3, 252), uint8] */;
    %79 = reshape(%77, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), float64] */;
    %80 = reshape(%78, newshape=[756]) /* ty=Tensor[(756), uint8] */;
    %81 = @func_2630(%79, %80) /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */;
    %82 = @func_3378() /* ty=(Tensor[(1080), uint8],) */;
    %83 = %82.0;
    %84 = cast(%83, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
    %85 = reshape(%84, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
    %86 = @func_459(%85) /* ty=(Tensor[(6, 15, 12), uint8],) */;
    %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %88 = reshape(%87, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
    %89 = @func_4137(%88) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) */;
    %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 420), uint16] */, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
    %91 = %89.2;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
    %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 420), uint16] */, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
    %94 = reshape(%90, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
    %95 = reshape(%92, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %96 = reshape(%93, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
    %97 = @func_1601(%94, %95, %96) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
    %98 = cast(meta[relay.Constant][4] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %99 = reshape(%98, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
    %100 = @func_4137(%99) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) */;
    %101 = cast(%74, dtype="uint8") /* ty=Tensor[(936, ?), uint8] */;
    %102 = cast(%var_5872, dtype="uint8") /* ty=Tensor[(936, 4), uint8] */;
    %103 = subtract(%101, %102) /* ty=Tensor[(936, 4), uint8] */;
    %104 = cast(%103, dtype="int32") /* ty=Tensor[(936, 4), int32] */;
    %105 = cast(%74, dtype="int32") /* ty=Tensor[(936, ?), int32] */;
    %106 = cast(%74, dtype="bool") /* ty=Tensor[(936, ?), bool] */;
    %107 = cast(%var_5841, dtype="bool") /* ty=Tensor[(936, 3), bool] */;
    %108 = @func_4650() /* ty=(Tensor[(5, 8, 3), float32], int32, Tensor[(264), int32], Tensor[(1080), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), float32], Tensor[(6, 11, 4), bool], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float64]) */;
    %109 = cast(%var_5848, dtype="float32") /* ty=Tensor[(3, 252), float32] */;
    %110 = reshape(%109, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
    %111 = cast(%var_5847, dtype="float64") /* ty=Tensor[(120), float64] */;
    %112 = reshape(%111, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), float64] */;
    %113 = @func_5361(%112) /* ty=(Tensor[(5, 8, 3), int16],) */;
    %114 = multiply(%75, %76) /* ty=Tensor[(936, 3), int32] */;
    %115 = %81.0;
    %116 = %86.0;
    %117 = %97.8;
    %118 = %100.3;
    %119 = bitwise_xor(%104, %105) /* ty=Tensor[(936, 4), int32] */;
    %120 = less_equal(%106, %107) /* ty=Tensor[(936, 3), bool] */;
    %121 = %108.6;
    %122 = @func_4041(%110) /* ty=Tensor[(7, 12, 9), float32] */;
    %123 = %113.0;
    (%114, %115, %var_5847, %var_5848, %83, %116, %91, meta[relay.Constant][4] /* ty=Tensor[(1176), float32] */, %117, meta[relay.Constant][5] /* ty=Tensor[(4, 420), uint16] */, %118, %119, %120, %121, %122, %123)
  };
  %124(%var_5922, %var_5923, %var_5924, %var_5925) /* ty=(Tensor[(936, 3), int32], Tensor[(5, 8, 3), uint32], Tensor[(120), float64], Tensor[(3, 252), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), uint8], Tensor[(12, 14, 7), uint8], Tensor[(1176), float32], Tensor[(14, 12, 10), float32], Tensor[(4, 420), uint16], Tensor[(10, ?, 16), float64], Tensor[(936, 4), int32], Tensor[(936, 3), bool], Tensor[(6, 11, 4), bool], Tensor[(7, 12, 9), float32], Tensor[(5, 8, 3), int16]) */
}

def @func_4090() -> (Tensor[(6, 196), float32],) {
  %127 = fn () -> (Tensor[(6, 196), float32],) {
    %125 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
    %126 = %125.4;
    (%126,)
  };
  %127() /* ty=(Tensor[(6, 196), float32],) */
}

def @func_3812(%var_3810: Tensor[(126), uint32]) -> (Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) {
  @func_3809(%var_3810) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */
}

def @func_3379() -> (Tensor[(1080), uint8],) {
  %130 = fn () -> (Tensor[(1080), uint8],) {
    %128 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
    %129 = %128.3;
    (%129,)
  };
  %130() /* ty=(Tensor[(1080), uint8],) */
}

def @func_2525() -> (Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) {
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 8, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(5, 8, 3), float32] */, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %133 = atan(%131) /* ty=Tensor[(5, 8, 3), float32] */;
  %134 = tan(%132) /* ty=Tensor[(5, 8, 3), float64] */;
  (%133, %134)
}

def @func_5691(%var_5682: Tensor[(9, 5, 1), int32], %var_5683: Tensor[(9, 5, 3), int32]) -> (Tensor[(9, 5, 3), int32], Tensor[(9, 5, 3), float64]) {
  %135 = cast(%var_5682, dtype="int32") /* ty=Tensor[(9, 5, 1), int32] */;
  %136 = cast(%var_5683, dtype="int32") /* ty=Tensor[(9, 5, 3), int32] */;
  %137 = cast(%var_5683, dtype="float64") /* ty=Tensor[(9, 5, 3), float64] */;
  %138 = logical_xor(%135, %136) /* ty=Tensor[(9, 5, 3), int32] */;
  %139 = log2(%137) /* ty=Tensor[(9, 5, 3), float64] */;
  (%138, %139)
}

def @func_5742(%var_5720: Tensor[(3, 15, 2), float64]) -> (Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), bool]) {
  %140 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 15, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
  %141 = atan(%140) /* ty=Tensor[(3, 15, 2), float32] */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 15, 2), float32] */, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %146 = cast(%141, dtype="float64") /* ty=Tensor[(3, 15, 2), float64] */;
  %147 = cos(%146) /* ty=Tensor[(3, 15, 2), float64] */;
  %148 = cast(%var_5720, dtype="int32") /* ty=Tensor[(3, 15, 2), int32] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="int32") /* ty=Tensor[(3, 15, 2), int32] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %152 = right_shift(%150, %151) /* ty=Tensor[(3, 15, 2), int32] */;
  %153 = cast(%141, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="bool") /* ty=Tensor[(3, 15, 2), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = less_equal(%144, %145) /* ty=Tensor[(3, 15, 2), bool] */;
  %158 = logical_and(%155, %156) /* ty=Tensor[(3, 15, 2), bool] */;
  (%157, %158)
}

def @func_5179() -> (Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float32]) {
  %159 = @func_3476() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */;
  %160 = %159.2;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(6, 15, 12), float32] */;
  %162 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %163 = tan(%161) /* ty=Tensor[(6, 15, 12), float32] */;
  (%162, %163)
}

def @func_424(%var_422: Tensor[(10, 9, 8), uint32], %var_423: Tensor[(10, 9, 8), uint32]) -> (Tensor[(10, 9, 8), bool],) {
  %169 = fn (%var_410: Tensor[(10, 9, 8), uint32], %var_411: Tensor[(10, 9, 8), uint32]) -> (Tensor[(10, 9, 8), bool],) {
    %164 = cast(%var_411, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
    %165 = shape_of(%var_410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %166 = cast(%var_410, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
    %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %168 = less_equal(%166, %167) /* ty=Tensor[(10, 9, 8), bool] */;
    (%168,)
  };
  %169(%var_422, %var_423) /* ty=(Tensor[(10, 9, 8), bool],) */
}

def @func_5286() -> (Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) {
  @func_5284() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) */
}

def @func_5478(%var_5477: Tensor[(264), uint32]) -> (Tensor[(3, 7, 3), int64], Tensor[(10, 9, 8), uint32], Tensor[(264), uint32], Tensor[(936), uint64], Tensor[(264), uint32]) {
  %184 = fn (%var_5469: Tensor[(264), uint32]) -> (Tensor[(3, 7, 3), int64], Tensor[(10, 9, 8), uint32], Tensor[(264), uint32], Tensor[(936), uint64], Tensor[(264), uint32]) {
    %170 = @func_5328() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(3, 7, 3), int64], Tensor[(63), int64], Tensor[(10, 9, 8), bool]) */;
    %171 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
    %172 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 9, 8), bool] */, dtype="uint32") /* ty=Tensor[(10, 9, 8), uint32] */;
    %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%171, dtype="uint32") /* ty=Tensor[(10, 9, 8), uint32] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %177 = cast(%var_5469, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %178 = reshape(%176, newshape=[936]) /* ty=Tensor[(936), uint64] */;
    %179 = reshape(%177, newshape=[264]) /* ty=Tensor[(264), uint32] */;
    %180 = @func_4987(%178, %179) /* ty=(Tensor[(10, 9, 8), float32], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(264), uint32]) */;
    %181 = %170.1;
    %182 = left_shift(%174, %175) /* ty=Tensor[(10, 9, 8), uint32] */;
    %183 = %180.4;
    (%181, %182, %183, meta[relay.Constant][9] /* ty=Tensor[(936), uint64] */, %var_5469)
  };
  %184(%var_5477) /* ty=(Tensor[(3, 7, 3), int64], Tensor[(10, 9, 8), uint32], Tensor[(264), uint32], Tensor[(936), uint64], Tensor[(264), uint32]) */
}

def @func_3809(%var_3793: Tensor[(126), uint32]) -> (Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) {
  %185 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %186 = cast(%var_3793, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %187 = reshape(%186, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %188 = @func_2813(%187) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %189 = %185.0;
  %190 = %188.2;
  (%189, %190, %var_3793)
}

def @func_1296(%var_1293: int32, %var_1294: Tensor[(12, 2, 11), int32], %var_1295: Tensor[(1080), uint8]) -> (Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) {
  %198 = fn (%var_1270: int32, %var_1271: Tensor[(12, 2, 11), int32], %var_1282: Tensor[(1080), uint8]) -> (Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) {
    %191 = cast(%var_1270, dtype="bool") /* ty=bool */;
    %192 = cast(%var_1271, dtype="bool") /* ty=Tensor[(12, 2, 11), bool] */;
    %193 = cast(%var_1282, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
    %194 = reshape(%193, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
    %195 = @func_459(%194) /* ty=(Tensor[(6, 15, 12), uint8],) */;
    %196 = greater(%191, %192) /* ty=Tensor[(12, 2, 11), bool] */;
    %197 = %195.0;
    (%196, %197, %var_1282)
  };
  %198(%var_1293, %var_1294, %var_1295) /* ty=(Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) */
}

def @func_3417() -> Tensor[(10, 9, 8), bool] {
  %199 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %199.0
}

def @func_4914(%var_4913: Tensor[(3, 2, 15), float32]) -> (Tensor[(3, 2, 15), float32], Tensor[(3, 5, 15), bool]) {
  %208 = fn (%var_4891: Tensor[(3, 2, 15), float32]) -> (Tensor[(3, 2, 15), float32], Tensor[(3, 5, 15), bool]) {
    %200 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 15), float32] */;
    %201 = cast(%var_4891, dtype="float32") /* ty=Tensor[(3, 2, 15), float32] */;
    %202 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 15), float32] */;
    %203 = sin(%202) /* ty=Tensor[(3, 1, 15), float32] */;
    %204 = cast(%203, dtype="bool") /* ty=Tensor[(3, 1, 15), bool] */;
    %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 5, 15), float32] */, dtype="bool") /* ty=Tensor[(3, 5, 15), bool] */;
    %206 = add(%200, %201) /* ty=Tensor[(3, 2, 15), float32] */;
    %207 = greater_equal(%204, %205) /* ty=Tensor[(3, 5, 15), bool] */;
    (%206, %207)
  };
  %208(%var_4913) /* ty=(Tensor[(3, 2, 15), float32], Tensor[(3, 5, 15), bool]) */
}

def @func_4232() -> (Tensor[(1080), uint8], Tensor[(10, 9, 8), float64], Tensor[(1, 720), bool]) {
  %214 = fn () -> (Tensor[(1080), uint8], Tensor[(10, 9, 8), float64], Tensor[(1, 720), bool]) {
    %209 = @func_3885() /* ty=(Tensor[(1080), uint8],) */;
    %210 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 720), bool] */, dtype="bool") /* ty=Tensor[(1, 720), bool] */;
    %211 = reshape(%210, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), bool] */;
    %212 = %209.0;
    %213 = @func_3546(%211) /* ty=Tensor[(10, 9, 8), float64] */;
    (%212, %213, meta[relay.Constant][12] /* ty=Tensor[(1, 720), bool] */)
  };
  %214() /* ty=(Tensor[(1080), uint8], Tensor[(10, 9, 8), float64], Tensor[(1, 720), bool]) */
}

def @func_4877(%var_4875: Tensor[(126, 1), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(126, 1), uint32]) {
  @func_4874(%var_4875) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(126, 1), uint32]) */
}

def @func_6012() -> (Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32]) {
  %219 = fn () -> (Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32]) {
    %215 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
    %216 = cast(%215, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
    %217 = log2(%216) /* ty=Tensor[(10, 9, 8), float32] */;
    %218 = @func_3969() /* ty=Tensor[(5, 8, 3), float32] */;
    (%217, %218)
  };
  %219() /* ty=(Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32]) */
}

def @func_368(%var_366: Tensor[(12, 14, 7), float32], %var_367: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), float32],) {
  @func_364(%var_366, %var_367) /* ty=(Tensor[(12, 14, 7), float32],) */
}

def @func_3971() -> Tensor[(5, 8, 3), float32] {
  @func_3969() /* ty=Tensor[(5, 8, 3), float32] */
}

def @func_2938(%var_2931: Tensor[(6, 11, 4), uint32], %var_2932: Tensor[(6, 11, 4), uint32]) -> Tensor[(6, 11, 4), bool] {
  %220 = cast(%var_2932, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %221 = shape_of(%var_2931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%var_2931, dtype="bool") /* ty=Tensor[(6, 11, 4), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%222, %223) /* ty=Tensor[(6, 11, 4), bool] */
}

def @func_1606(%var_1603: Tensor[(14, 12, 10), uint16], %var_1604: Tensor[(1176), float32], %var_1605: Tensor[(14, 12, 10), float64]) -> (Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) {
  @func_1601(%var_1603, %var_1604, %var_1605) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */
}

def @func_5562() -> (Tensor[(126), uint32], Tensor[(10, 9, 8), float32]) {
  %224 = @func_4838() /* ty=(Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %225 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
  %226 = %224.2;
  %227 = %225.1;
  (%226, %227)
}

def @func_4389(%var_4387: Tensor[(4, 180), uint32], %var_4388: Tensor[(1, 1680), uint16]) -> (Tensor[(126), bool], Tensor[(10, 9, 8), bool], Tensor[(4, 180), uint32], Tensor[(1, 1176), float32], Tensor[(1176), float32], Tensor[(1, 1680), uint16]) {
  %251 = fn (%var_4343: Tensor[(4, 180), uint32], %var_4359: Tensor[(1, 1680), uint16]) -> (Tensor[(126), bool], Tensor[(10, 9, 8), bool], Tensor[(4, 180), uint32], Tensor[(1, 1176), float32], Tensor[(1176), float32], Tensor[(1, 1680), uint16]) {
    %228 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
    %229 = %228.3;
    %230 = cast(meta[relay.Constant][13] /* ty=Tensor[(126), uint32] */, dtype="bool") /* ty=Tensor[(126), bool] */;
    %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(1), int32] */;
    %232 = cast(%229, dtype="bool") /* ty=Tensor[(126), bool] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?), bool] */;
    %234 = cast(%var_4343, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
    %235 = cast(%var_4343, dtype="uint32") /* ty=Tensor[(4, 180), uint32] */;
    %236 = reshape(%234, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
    %237 = reshape(%235, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
    %238 = @func_421(%236, %237) /* ty=(Tensor[(10, 9, 8), bool],) */;
    %239 = @func_4010() /* ty=(Tensor[(1, 1176), float32],) */;
    %240 = cast(%var_4359, dtype="uint16") /* ty=Tensor[(1, 1680), uint16] */;
    %241 = %239.0;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
    %243 = cast(%var_4359, dtype="float64") /* ty=Tensor[(1, 1680), float64] */;
    %244 = reshape(%240, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
    %245 = reshape(%242, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %246 = reshape(%243, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
    %247 = @func_1601(%244, %245, %246) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
    %248 = greater(%232, %233) /* ty=Tensor[(126), bool] */;
    %249 = %238.0;
    %250 = %247.6;
    (%248, %249, %var_4343, %241, %250, %var_4359)
  };
  %251(%var_4387, %var_4388) /* ty=(Tensor[(126), bool], Tensor[(10, 9, 8), bool], Tensor[(4, 180), uint32], Tensor[(1, 1176), float32], Tensor[(1176), float32], Tensor[(1, 1680), uint16]) */
}

def @func_2389(%var_2387: Tensor[(9, 8, 13), uint64], %var_2388: Tensor[(9, 8, 13), uint64]) -> (Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) {
  @func_2385(%var_2387, %var_2388) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */
}

def @func_3944(%var_3935: bool, %var_3936: Tensor[(9, 3, 8), bool]) -> (Tensor[(9, 3, 8), bool],) {
  %252 = cast(%var_3935, dtype="bool") /* ty=bool */;
  %253 = cast(%var_3936, dtype="bool") /* ty=Tensor[(9, 3, 8), bool] */;
  %254 = logical_and(%252, %253) /* ty=Tensor[(9, 3, 8), bool] */;
  (%254,)
}

def @func_364(%var_351: Tensor[(12, 14, 7), float32], %var_352: Tensor[(12, 14, 7), float32]) -> (Tensor[(12, 14, 7), float32],) {
  %255 = cast(%var_352, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %256 = shape_of(%var_351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_351, dtype="float32") /* ty=Tensor[(12, 14, 7), float32] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %259 = divide(%257, %258) /* ty=Tensor[(12, 14, 7), float32] */;
  (%259,)
}

def @func_3546(%var_3541: Tensor[(10, 9, 8), bool]) -> Tensor[(10, 9, 8), float64] {
  %260 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %261 = %260.0;
  %262 = cast(%var_3541, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%264, %265) /* ty=Tensor[(10, 9, 8), float64] */
}

def @func_4139(%var_4138: Tensor[(12, 14, 7), float32]) -> (Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) {
  %283 = fn (%var_4121: Tensor[(12, 14, 7), float32]) -> (Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) {
    %266 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
    %267 = @func_4010() /* ty=(Tensor[(1, 1176), float32],) */;
    %268 = %267.0;
    %269 = cast(%268, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
    %270 = cast(%268, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
    %271 = reshape(%269, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
    %272 = reshape(%270, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
    %273 = @func_364(%271, %272) /* ty=(Tensor[(12, 14, 7), float32],) */;
    %274 = %273.0;
    %275 = cast(%var_4121, dtype="uint8") /* ty=Tensor[(12, 14, 7), uint8] */;
    %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
    %277 = cast(%274, dtype="uint8") /* ty=Tensor[(12, 14, 7), uint8] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %279 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
    %280 = %266.0;
    %281 = multiply(%277, %278) /* ty=Tensor[(12, 14, 7), uint8] */;
    %282 = %279.4;
    (%280, %268, %281, %282)
  };
  %283(%var_4138) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(12, 14, 7), uint8], Tensor[(10, ?, 16), float64]) */
}

def @func_5823() -> Tensor[(10, 9, 8), bool] {
  @func_3417() /* ty=Tensor[(10, 9, 8), bool] */
}

def @func_2385(%var_2341: Tensor[(9, 8, 13), uint64], %var_2342: Tensor[(9, 8, 13), uint64]) -> (Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) {
  %284 = cast(%var_2342, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %285 = shape_of(%var_2341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %286 = cast(%var_2341, dtype="bool") /* ty=Tensor[(9, 8, 13), bool] */;
  %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %288 = cast(meta[relay.Constant][14] /* ty=Tensor[(135), float64] */, dtype="float64") /* ty=Tensor[(135), float64] */;
  %289 = reshape(%288, newshape=[5, 9, 3]) /* ty=Tensor[(5, 9, 3), float64] */;
  %290 = @func_1932(%289) /* ty=Tensor[(5, 9, 3), float64] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  %292 = cos(%291) /* ty=Tensor[(5, 9, 3), float64] */;
  %293 = cast(%290, dtype="bool") /* ty=Tensor[(5, 9, 3), bool] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%292, dtype="bool") /* ty=Tensor[(5, 9, 3), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = cast(%290, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  %298 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%292, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %301 = greater(%286, %287) /* ty=Tensor[(9, 8, 13), bool] */;
  %302 = logical_and(%295, %296) /* ty=Tensor[(5, 9, 3), bool] */;
  %303 = floor_mod(%299, %300) /* ty=Tensor[(5, 9, 3), float64] */;
  (%301, meta[relay.Constant][14] /* ty=Tensor[(135), float64] */, %302, %303)
}

def @func_908(%var_905: Tensor[(9, 7, 2), uint32], %var_906: Tensor[(9, 7, 2), uint32], %var_907: Tensor[(9, 7, 2), float64]) -> (Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) {
  %316 = fn (%var_878: Tensor[(9, 7, 2), uint32], %var_879: Tensor[(9, 7, 2), uint32], %var_899: Tensor[(9, 7, 2), float64]) -> (Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) {
    %304 = cast(%var_879, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
    %305 = shape_of(%var_878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%var_878, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %308 = cast(%var_878, dtype="float64") /* ty=Tensor[(9, 7, 2), float64] */;
    %309 = rsqrt(%308) /* ty=Tensor[(9, 7, 2), float64] */;
    %310 = cast(%var_899, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
    %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
    %312 = cast(%309, dtype="bool") /* ty=Tensor[(9, 7, 2), bool] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %314 = not_equal(%306, %307) /* ty=Tensor[(9, 7, 2), bool] */;
    %315 = less_equal(%312, %313) /* ty=Tensor[(9, 7, 2), bool] */;
    (%314, %315)
  };
  %316(%var_905, %var_906, %var_907) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */
}

def @func_3277() -> (Tensor[(5, 8, 3), float32],) {
  %317 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %320 = cosh(%319) /* ty=Tensor[(5, 8, 3), float32] */;
  (%320,)
}

def @func_4495(%var_4494: Tensor[(126), uint32]) -> (Tensor[(1, 1176), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(9, 7, 2), bool]) {
  %341 = fn (%var_4462: Tensor[(126), uint32]) -> (Tensor[(1, 1176), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(9, 7, 2), bool]) {
    %321 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
    %322 = %321.3;
    %323 = cast(%322, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
    %324 = log(%323) /* ty=Tensor[(1, 1176), float32] */;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(1, 1176), float64] */;
    %326 = exp(%325) /* ty=Tensor[(1, 1176), float64] */;
    %327 = cast(%326, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
    %328 = cast(%var_4462, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %329 = reshape(%328, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %330 = @func_3809(%329) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */;
    %331 = %330.2;
    %332 = cast(%331, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %333 = cast(%331, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %334 = cast(%331, dtype="float64") /* ty=Tensor[(126), float64] */;
    %335 = reshape(%332, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
    %336 = reshape(%333, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
    %337 = reshape(%334, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
    %338 = @func_904(%335, %336, %337) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
    %339 = cosh(%327) /* ty=Tensor[(1, 1176), float32] */;
    %340 = %338.1;
    (%339, %331, %var_4462, %340)
  };
  %341(%var_4494) /* ty=(Tensor[(1, 1176), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(9, 7, 2), bool]) */
}

def @func_3510(%var_3483: Tensor[(10, 9, 8), bool], %var_3501: Tensor[(126), uint32], %var_3504: int32, %var_3505: Tensor[(264), int32]) -> (Tensor[(10, 9, 8), int32], Tensor[(5, 8, 3), float32], Tensor[(126), uint32], Tensor[(1080), uint8], int32, Tensor[(264), int32], Tensor[(1080), uint8]) {
  %342 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %343 = %342.0;
  %344 = cast(%var_3483, dtype="int32") /* ty=Tensor[(10, 9, 8), int32] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="int32") /* ty=Tensor[(10, 9, 8), int32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %348 = cast(%var_3501, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %349 = reshape(%348, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %350 = @func_2813(%349) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %351 = cast(%var_3504, dtype="int32") /* ty=int32 */;
  %352 = cast(%var_3505, dtype="int32") /* ty=Tensor[(264), int32] */;
  %353 = cast(meta[relay.Constant][15] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %354 = reshape(%351, newshape=[]) /* ty=int32 */;
  %355 = reshape(%352, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int32] */;
  %356 = reshape(%353, newshape=[1080]) /* ty=Tensor[(1080), uint8] */;
  %357 = @func_1292(%354, %355, %356) /* ty=(Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) */;
  %358 = bitwise_or(%346, %347) /* ty=Tensor[(10, 9, 8), int32] */;
  %359 = %350.0;
  %360 = %357.2;
  (%358, %359, %var_3501, %360, %var_3504, %var_3505, meta[relay.Constant][15] /* ty=Tensor[(1080), uint8] */)
}

def @func_5030() -> (Tensor[(10, 9, 8), bool],) {
  @func_5028() /* ty=(Tensor[(10, 9, 8), bool],) */
}

def @func_3611(%var_3609: Tensor[(10, 9, 8), bool]) -> Tensor[(10, 9, 8), float64] {
  @func_3608(%var_3609) /* ty=Tensor[(10, 9, 8), float64] */
}

def @func_5666(%var_5603: Tensor[(9, 11, 4), float32]) -> Tensor[(9, 11, 4), float32] {
  %361 = @func_4935() /* ty=(Tensor[(9, 11, ?), float32],) */;
  %362 = %361.0;
  %363 = cast(%362, dtype="float32") /* ty=Tensor[(9, 11, ?), float32] */;
  %364 = exp(%363) /* ty=Tensor[(9, 11, ?), float32] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(9, 11, ?), float64] */;
  %366 = sin(%365) /* ty=Tensor[(9, 11, ?), float64] */;
  %367 = cast(%362, dtype="int8") /* ty=Tensor[(9, 11, ?), int8] */;
  %368 = cast(%var_5603, dtype="int8") /* ty=Tensor[(9, 11, 4), int8] */;
  %369 = add(%367, %368) /* ty=Tensor[(9, 11, 4), int8] */;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  %371 = tan(%370) /* ty=Tensor[(9, 11, 4), float32] */;
  %372 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 11, 4), float32] */, dtype="uint16") /* ty=Tensor[(9, 11, 4), uint16] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="uint16") /* ty=Tensor[(9, 11, 4), uint16] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %376 = bitwise_xor(%374, %375) /* ty=Tensor[(9, 11, 4), uint16] */;
  %377 = cast(%366, dtype="float32") /* ty=Tensor[(9, 11, ?), float32] */;
  %378 = cast(%376, dtype="float32") /* ty=Tensor[(9, 11, 4), float32] */;
  floor_divide(%377, %378) /* ty=Tensor[(9, 11, 4), float32] */
}

def @func_5695(%var_5693: Tensor[(9, 5, 1), int32], %var_5694: Tensor[(9, 5, 3), int32]) -> (Tensor[(9, 5, 3), int32], Tensor[(9, 5, 3), float64]) {
  @func_5691(%var_5693, %var_5694) /* ty=(Tensor[(9, 5, 3), int32], Tensor[(9, 5, 3), float64]) */
}

def @func_948(%var_946: Tensor[(5, 2, 11), float64]) -> (Tensor[(5, 2, 11), float64],) {
  @func_945(%var_946) /* ty=(Tensor[(5, 2, 11), float64],) */
}

def @func_5825() -> Tensor[(10, 9, 8), bool] {
  @func_5823() /* ty=Tensor[(10, 9, 8), bool] */
}

def @func_1765(%var_1763: Tensor[(9, 12, 7), uint8], %var_1764: Tensor[(9, 12, 7), uint8]) -> (Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(9, 12, 7), float64]) {
  @func_1761(%var_1763, %var_1764) /* ty=(Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(9, 12, 7), float64]) */
}

def @func_3279() -> (Tensor[(5, 8, 3), float32],) {
  @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */
}

def @func_4044(%var_4042: Tensor[(7, 12, 9), float32]) -> Tensor[(7, 12, 9), float32] {
  @func_4041(%var_4042) /* ty=Tensor[(7, 12, 9), float32] */
}

def @func_5113(%var_5111: Tensor[(7, 12, 5), float32]) -> (Tensor[(6, 196), float32], Tensor[(7, 12, 9), bool], Tensor[(7, 12, 5), bool]) {
  @func_5110(%var_5111) /* ty=(Tensor[(6, 196), float32], Tensor[(7, 12, 9), bool], Tensor[(7, 12, 5), bool]) */
}

def @func_6054(%var_6028: Tensor[(9, 720), bool]) -> (Tensor[(9, 720), float64], Tensor[(6, 15, 12), uint8]) {
  %379 = @func_4231() /* ty=(Tensor[(1080), uint8], Tensor[(10, 9, 8), float64], Tensor[(1, 720), bool]) */;
  %380 = %379.2;
  %381 = cast(%380, dtype="float64") /* ty=Tensor[(1, 720), float64] */;
  %382 = cast(%var_6028, dtype="float64") /* ty=Tensor[(9, 720), float64] */;
  %383 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %384 = mod(%381, %382) /* ty=Tensor[(9, 720), float64] */;
  %385 = %383.2;
  (%384, %385)
}

def @func_1932(%var_1925: Tensor[(5, 9, 3), float64]) -> Tensor[(5, 9, 3), float64] {
  %386 = cast(%var_1925, dtype="float64") /* ty=Tensor[(5, 9, 3), float64] */;
  atanh(%386) /* ty=Tensor[(5, 9, 3), float64] */
}

def @func_3862() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) {
  %396 = fn () -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) {
    %387 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
    %388 = @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */;
    %389 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 196), float32] */, dtype="float32") /* ty=Tensor[(6, 196), float32] */;
    %390 = reshape(%389, newshape=[1, 1176]) /* ty=Tensor[(1, 1176), float32] */;
    %391 = @func_1674(%390) /* ty=(Tensor[(2, 15, 5), float32], Tensor[(1176), float32], Tensor[(1680), uint16], Tensor[(1, 1176), float32]) */;
    %392 = %387.0;
    %393 = %388.0;
    %394 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
    %395 = %391.3;
    (%392, %393, %394, %395, meta[relay.Constant][17] /* ty=Tensor[(6, 196), float32] */)
  };
  %396() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */
}

def @func_3478() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) {
  @func_3476() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */
}

def @func_4839() -> (Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
  %410 = fn () -> (Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
    %397 = @func_4262() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(936, 1), uint64], Tensor[(3, 42), uint32]) */;
    %398 = %397.1;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
    %400 = cos(%399) /* ty=Tensor[(936, 1), float32] */;
    %401 = cast(%398, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
    %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(2), int32] */;
    %403 = cast(%400, dtype="float32") /* ty=Tensor[(936, 1), float32] */;
    %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %405 = cast(meta[relay.Constant][18] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %406 = reshape(%405, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %407 = @func_4493(%406) /* ty=(Tensor[(1, 1176), float32], Tensor[(126), uint32], Tensor[(126), uint32], Tensor[(9, 7, 2), bool]) */;
    %408 = floor_mod(%403, %404) /* ty=Tensor[(936, ?), float32] */;
    %409 = %407.3;
    (%408, %409, meta[relay.Constant][18] /* ty=Tensor[(126), uint32] */)
  };
  %410() /* ty=(Tensor[(936, ?), float32], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */
}

def @func_4028(%var_4026: Tensor[(3, 7, 3), int64], %var_4027: Tensor[(3, 7, 3), int64]) -> Tensor[(3, 7, 3), int64] {
  %415 = fn (%var_4018: Tensor[(3, 7, 3), int64], %var_4019: Tensor[(3, 7, 3), int64]) -> Tensor[(3, 7, 3), int64] {
    %411 = cast(%var_4019, dtype="int64") /* ty=Tensor[(3, 7, 3), int64] */;
    %412 = shape_of(%var_4018, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%var_4018, dtype="int64") /* ty=Tensor[(3, 7, 3), int64] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    add(%413, %414) /* ty=Tensor[(3, 7, 3), int64] */
  };
  %415(%var_4026, %var_4027) /* ty=Tensor[(3, 7, 3), int64] */
}

def @func_5110(%var_5084: Tensor[(7, 12, 5), float32]) -> (Tensor[(6, 196), float32], Tensor[(7, 12, 9), bool], Tensor[(7, 12, 5), bool]) {
  %416 = @func_4089() /* ty=(Tensor[(6, 196), float32],) */;
  %417 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %418 = reshape(%417, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %419 = @func_4041(%418) /* ty=Tensor[(7, 12, 9), float32] */;
  %420 = cast(meta[relay.Constant][19] /* ty=Tensor[(756), float32] */, dtype="bool") /* ty=Tensor[(756), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(7, 12, 9), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(%var_5084, dtype="float32") /* ty=Tensor[(7, 12, 5), float32] */;
  %425 = rsqrt(%424) /* ty=Tensor[(7, 12, 5), float32] */;
  %426 = cast(%var_5084, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = %416.0;
  %431 = less(%422, %423) /* ty=Tensor[(7, 12, 9), bool] */;
  %432 = equal(%428, %429) /* ty=Tensor[(7, 12, 5), bool] */;
  (%430, %431, %432)
}

def @func_1935(%var_1933: Tensor[(5, 9, 3), float64]) -> Tensor[(5, 9, 3), float64] {
  @func_1932(%var_1933) /* ty=Tensor[(5, 9, 3), float64] */
}

def @func_3756() -> (Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) {
  %433 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %434 = atanh(%433) /* ty=Tensor[(9, 11, 1), float32] */;
  %435 = cast(meta[relay.Constant][20] /* ty=Tensor[(9, 11, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="float32") /* ty=Tensor[(9, 11, 1), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %439 = cast(meta[relay.Constant][21] /* ty=Tensor[(126), uint32] */, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %440 = reshape(%439, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %441 = @func_2813(%440) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
  %442 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %443 = divide(%437, %438) /* ty=Tensor[(9, 11, ?), float32] */;
  %444 = %441.1;
  (%442, %443, %444, meta[relay.Constant][21] /* ty=Tensor[(126), uint32] */)
}

def @func_1676(%var_1675: Tensor[(1, 1176), float32]) -> (Tensor[(2, 15, 5), float32], Tensor[(1176), float32], Tensor[(1680), uint16], Tensor[(1, 1176), float32]) {
  %460 = fn (%var_1665: Tensor[(1, 1176), float32]) -> (Tensor[(2, 15, 5), float32], Tensor[(1176), float32], Tensor[(1680), uint16], Tensor[(1, 1176), float32]) {
    %445 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
    %446 = cosh(%445) /* ty=Tensor[(2, 15, 5), float32] */;
    %447 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 15, 5), float32] */, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
    %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%446, dtype="float32") /* ty=Tensor[(2, 15, 5), float32] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %451 = cast(meta[relay.Constant][23] /* ty=Tensor[(1680), uint16] */, dtype="uint16") /* ty=Tensor[(1680), uint16] */;
    %452 = cast(%var_1665, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
    %453 = cast(meta[relay.Constant][23] /* ty=Tensor[(1680), uint16] */, dtype="float64") /* ty=Tensor[(1680), float64] */;
    %454 = reshape(%451, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
    %455 = reshape(%452, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %456 = reshape(%453, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
    %457 = @func_1601(%454, %455, %456) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
    %458 = floor_divide(%449, %450) /* ty=Tensor[(2, 15, 5), float32] */;
    %459 = %457.6;
    (%458, %459, meta[relay.Constant][23] /* ty=Tensor[(1680), uint16] */, %var_1665)
  };
  %460(%var_1675) /* ty=(Tensor[(2, 15, 5), float32], Tensor[(1176), float32], Tensor[(1680), uint16], Tensor[(1, 1176), float32]) */
}

def @func_6130() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float64]) {
  %466 = fn () -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float64]) {
    %461 = @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */;
    %462 = %461.0;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
    %464 = @func_5823() /* ty=Tensor[(10, 9, 8), bool] */;
    %465 = asinh(%463) /* ty=Tensor[(5, 8, 3), float64] */;
    (%464, %465)
  };
  %466() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float64]) */
}

def @func_4651() -> (Tensor[(5, 8, 3), float32], int32, Tensor[(264), int32], Tensor[(1080), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), float32], Tensor[(6, 11, 4), bool], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float64]) {
  %498 = fn () -> (Tensor[(5, 8, 3), float32], int32, Tensor[(264), int32], Tensor[(1080), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), float32], Tensor[(6, 11, 4), bool], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float64]) {
    %467 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
    %468 = @func_3885() /* ty=(Tensor[(1080), uint8],) */;
    %469 = cast(-6 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %470 = cast(meta[relay.Constant][24] /* ty=Tensor[(264), int32] */, dtype="int32") /* ty=Tensor[(264), int32] */;
    %471 = cast(meta[relay.Constant][25] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
    %472 = reshape(%469, newshape=[]) /* ty=int32 */;
    %473 = reshape(%470, newshape=[12, 2, 11]) /* ty=Tensor[(12, 2, 11), int32] */;
    %474 = reshape(%471, newshape=[1080]) /* ty=Tensor[(1080), uint8] */;
    %475 = @func_1292(%472, %473, %474) /* ty=(Tensor[(12, 2, 11), bool], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8]) */;
    %476 = %475.1;
    %477 = cast(%476, dtype="float32") /* ty=Tensor[(6, 15, 12), float32] */;
    %478 = cast(meta[relay.Constant][24] /* ty=Tensor[(264), int32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %479 = cast(meta[relay.Constant][24] /* ty=Tensor[(264), int32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %480 = reshape(%478, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
    %481 = reshape(%479, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
    %482 = cast(meta[relay.Constant][26] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %483 = cast(meta[relay.Constant][26] /* ty=Tensor[(936), uint64] */, dtype="uint64") /* ty=Tensor[(936), uint64] */;
    %484 = reshape(%482, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
    %485 = reshape(%483, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
    %486 = @func_2385(%484, %485) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */;
    %487 = cast(%476, dtype="float64") /* ty=Tensor[(6, 15, 12), float64] */;
    %488 = log2(%487) /* ty=Tensor[(6, 15, 12), float64] */;
    %489 = cast(%488, dtype="float64") /* ty=Tensor[(6, 15, 12), float64] */;
    %490 = %467.0;
    %491 = %468.0;
    %492 = sqrt(%477) /* ty=Tensor[(6, 15, 12), float32] */;
    %493 = @func_2938(%480, %481) /* ty=Tensor[(6, 11, 4), bool] */;
    %494 = %486.0;
    %495 = @func_3969() /* ty=Tensor[(5, 8, 3), float32] */;
    %496 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
    %497 = asin(%489) /* ty=Tensor[(6, 15, 12), float64] */;
    (%490, -6 /* ty=int32 */, meta[relay.Constant][24] /* ty=Tensor[(264), int32] */, meta[relay.Constant][25] /* ty=Tensor[(1080), uint8] */, %491, %492, %493, %494, meta[relay.Constant][26] /* ty=Tensor[(936), uint64] */, %495, %496, %497)
  };
  %498() /* ty=(Tensor[(5, 8, 3), float32], int32, Tensor[(264), int32], Tensor[(1080), uint8], Tensor[(1080), uint8], Tensor[(6, 15, 12), float32], Tensor[(6, 11, 4), bool], Tensor[(9, 8, 13), bool], Tensor[(936), uint64], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float64]) */
}

def @func_2731(%var_2715: uint32, %var_2716: Tensor[(8, 1, 14), uint32]) -> Tensor[(8, 1, 14), bool] {
  %499 = cast(%var_2715, dtype="bool") /* ty=bool */;
  %500 = cast(%var_2716, dtype="bool") /* ty=Tensor[(8, 1, 14), bool] */;
  less(%499, %500) /* ty=Tensor[(8, 1, 14), bool] */
}

def @func_3319(%var_3317: Tensor[(264), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) {
  %501 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %502 = %501.0;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %504 = cast(%var_3317, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %505 = cast(%var_3317, dtype="uint32") /* ty=Tensor[(264), uint32] */;
  %506 = reshape(%504, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %507 = reshape(%505, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
  %508 = erf(%503) /* ty=Tensor[(5, 8, 3), float32] */;
  %509 = @func_2938(%506, %507) /* ty=Tensor[(6, 11, 4), bool] */;
  (%508, %509, %var_3317)
}

def @func_5284() -> (Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) {
  %510 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
  %511 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
  %512 = %510.1;
  %513 = %511.3;
  (%512, %513)
}

def @func_1095(%var_1092: Tensor[(10, 5, 7), float32]) -> Tensor[(10, 5, 7), float32] {
  %514 = cast(%var_1092, dtype="float32") /* ty=Tensor[(10, 5, 7), float32] */;
  acosh(%514) /* ty=Tensor[(10, 5, 7), float32] */
}

def @func_3142() -> (Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) {
  %533 = fn () -> (Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) {
    %515 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %516 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), uint32] */, dtype="uint32") /* ty=Tensor[(720), uint32] */;
    %517 = reshape(%515, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
    %518 = reshape(%516, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), uint32] */;
    %519 = @func_421(%517, %518) /* ty=(Tensor[(10, 9, 8), bool],) */;
    %520 = cast(meta[relay.Constant][28] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
    %521 = reshape(%520, newshape=[6, 15, 12]) /* ty=Tensor[(6, 15, 12), uint8] */;
    %522 = @func_459(%521) /* ty=(Tensor[(6, 15, 12), uint8],) */;
    %523 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %524 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 1, 16), uint64] */, dtype="uint64") /* ty=Tensor[(10, 1, 16), uint64] */;
    %525 = logical_xor(%523, %524) /* ty=Tensor[(10, 1, 16), uint64] */;
    %526 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 1, 16), uint64] */, dtype="float64") /* ty=Tensor[(10, 1, 16), float64] */;
    %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(%525, dtype="float64") /* ty=Tensor[(10, 1, 16), float64] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %530 = %519.0;
    %531 = %522.0;
    %532 = floor_divide(%528, %529) /* ty=Tensor[(10, ?, 16), float64] */;
    (%530, meta[relay.Constant][27] /* ty=Tensor[(720), uint32] */, %531, meta[relay.Constant][28] /* ty=Tensor[(1080), uint8] */, %532)
  };
  %533() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */
}

def @func_3155() -> (Tensor[(10, 9, 8), bool],) {
  %534 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
  %535 = %534.0;
  (%535,)
}

def @func_4413() -> (Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) {
  @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */
}

def @func_4041(%var_4033: Tensor[(7, 12, 9), float32]) -> Tensor[(7, 12, 9), float32] {
  %536 = cast(%var_4033, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  rsqrt(%536) /* ty=Tensor[(7, 12, 9), float32] */
}

def @func_5441(%var_5439: Tensor[(490), bool], %var_5440: Tensor[(126), uint32]) -> (Tensor[(1, 1176), float32], Tensor[(14, 5, 7), bool], Tensor[(490), bool], Tensor[(126), uint32], Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) {
  %551 = fn (%var_5414: Tensor[(490), bool], %var_5415: Tensor[(126), uint32]) -> (Tensor[(1, 1176), float32], Tensor[(14, 5, 7), bool], Tensor[(490), bool], Tensor[(126), uint32], Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) {
    %537 = @func_4010() /* ty=(Tensor[(1, 1176), float32],) */;
    %538 = cast(%var_5414, dtype="bool") /* ty=Tensor[(490), bool] */;
    %539 = cast(%var_5414, dtype="bool") /* ty=Tensor[(490), bool] */;
    %540 = cast(%var_5415, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %541 = reshape(%538, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), bool] */;
    %542 = reshape(%539, newshape=[14, 5, 7]) /* ty=Tensor[(14, 5, 7), bool] */;
    %543 = reshape(%540, newshape=[126]) /* ty=Tensor[(126), uint32] */;
    %544 = @func_1647(%541, %542, %543) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */;
    %545 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
    %546 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
    %547 = %537.0;
    %548 = %544.0;
    %549 = %545.0;
    %550 = %546.3;
    (%547, %548, %var_5414, %var_5415, %549, %550)
  };
  %551(%var_5439, %var_5440) /* ty=(Tensor[(1, 1176), float32], Tensor[(14, 5, 7), bool], Tensor[(490), bool], Tensor[(126), uint32], Tensor[(10, 9, 8), bool], Tensor[(126), uint32]) */
}

def @func_3322(%var_3320: Tensor[(264), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) {
  @func_3319(%var_3320) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) */
}

def @func_5745(%var_5743: Tensor[(3, 15, 2), float64]) -> (Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), bool]) {
  @func_5742(%var_5743) /* ty=(Tensor[(3, 15, 2), bool], Tensor[(3, 15, 2), bool]) */
}

def @func_3948(%var_3946: bool, %var_3947: Tensor[(9, 3, 8), bool]) -> (Tensor[(9, 3, 8), bool],) {
  @func_3944(%var_3946, %var_3947) /* ty=(Tensor[(9, 3, 8), bool],) */
}

def @func_3703() -> (Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) {
  %552 = @func_3277() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %553 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  %554 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 8), bool] */, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %558 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %559 = cast(%553, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %560 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 8), bool] */, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %563 = %552.0;
  %564 = mod(%556, %557) /* ty=Tensor[(10, 9, 8), float32] */;
  %565 = %558.0;
  %566 = greater_equal(%561, %562) /* ty=Tensor[(10, 9, 8), bool] */;
  (%563, %564, %565, %566)
}

def @func_1601(%var_1536: Tensor[(14, 12, 10), uint16], %var_1573: Tensor[(1176), float32], %var_1592: Tensor[(14, 12, 10), float64]) -> (Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) {
  %567 = cast(%var_1536, dtype="uint16") /* ty=Tensor[(14, 12, 10), uint16] */;
  %568 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(14, 12, 10), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 12, 10), uint16] */, dtype="uint16") /* ty=Tensor[(14, 12, 10), uint16] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %571 = cast(meta[relay.Constant][33] /* ty=Tensor[(350), float32] */, dtype="float32") /* ty=Tensor[(350), float32] */;
  %572 = reshape(%571, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), float32] */;
  %573 = cast(meta[relay.Constant][34] /* ty=Tensor[(110), float64] */, dtype="float64") /* ty=Tensor[(110), float64] */;
  %574 = reshape(%573, newshape=[5, 2, 11]) /* ty=Tensor[(5, 2, 11), float64] */;
  %575 = @func_945(%574) /* ty=(Tensor[(5, 2, 11), float64],) */;
  %576 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %577 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %578 = reshape(%576, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %579 = reshape(%577, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %580 = @func_364(%578, %579) /* ty=(Tensor[(12, 14, 7), float32],) */;
  %581 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %582 = cast(%var_1573, dtype="float32") /* ty=Tensor[(1176), float32] */;
  %583 = reshape(%581, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %584 = reshape(%582, newshape=[12, 14, 7]) /* ty=Tensor[(12, 14, 7), float32] */;
  %585 = @func_364(%583, %584) /* ty=(Tensor[(12, 14, 7), float32],) */;
  %586 = cast(%var_1536, dtype="float64") /* ty=Tensor[(14, 12, 10), float64] */;
  %587 = acos(%586) /* ty=Tensor[(14, 12, 10), float64] */;
  %588 = cast(%var_1592, dtype="float32") /* ty=Tensor[(14, 12, 10), float32] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="float32") /* ty=Tensor[(14, 12, 10), float32] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %592 = left_shift(%569, %570) /* ty=Tensor[(14, 12, 10), uint16] */;
  %593 = @func_1095(%572) /* ty=Tensor[(10, 5, 7), float32] */;
  %594 = %575.0;
  %595 = %580.0;
  %596 = %585.0;
  %597 = floor_mod(%590, %591) /* ty=Tensor[(14, 12, 10), float32] */;
  (%592, %593, meta[relay.Constant][33] /* ty=Tensor[(350), float32] */, %594, meta[relay.Constant][34] /* ty=Tensor[(110), float64] */, %595, %var_1573, %596, %597)
}

def @func_2527() -> (Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) {
  @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */
}

def @func_3549(%var_3547: Tensor[(10, 9, 8), bool]) -> Tensor[(10, 9, 8), float64] {
  @func_3546(%var_3547) /* ty=Tensor[(10, 9, 8), float64] */
}

def @func_3157() -> (Tensor[(10, 9, 8), bool],) {
  @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */
}

def @func_5223(%var_5222: Tensor[(9, 12, 8), int16]) -> (Tensor[(9, 12, 8), int16],) {
  %603 = fn (%var_5213: Tensor[(9, 12, 8), int16]) -> (Tensor[(9, 12, 8), int16],) {
    %598 = cast(%var_5213, dtype="int16") /* ty=Tensor[(9, 12, 8), int16] */;
    %599 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(9, 12, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(meta[relay.Constant][35] /* ty=Tensor[(9, 12, 8), int16] */, dtype="int16") /* ty=Tensor[(9, 12, 8), int16] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %602 = add(%600, %601) /* ty=Tensor[(9, 12, 8), int16] */;
    (%602,)
  };
  %603(%var_5222) /* ty=(Tensor[(9, 12, 8), int16],) */
}

def @func_4874(%var_4872: Tensor[(126, 1), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(9, 7, 2), bool], Tensor[(126, 1), uint32]) {
  %604 = cast(%var_4872, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %605 = cast(%var_4872, dtype="uint32") /* ty=Tensor[(126, 1), uint32] */;
  %606 = cast(%var_4872, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %607 = reshape(%604, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %608 = reshape(%605, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
  %609 = reshape(%606, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
  %610 = @func_904(%607, %608, %609) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
  %611 = @func_3969() /* ty=Tensor[(5, 8, 3), float32] */;
  %612 = %610.1;
  (%611, %612, %var_4872)
}

def @func_5028() -> (Tensor[(10, 9, 8), bool],) {
  %613 = @func_3417() /* ty=Tensor[(10, 9, 8), bool] */;
  (%613,)
}

def @func_1098(%var_1096: Tensor[(10, 5, 7), float32]) -> Tensor[(10, 5, 7), float32] {
  @func_1095(%var_1096) /* ty=Tensor[(10, 5, 7), float32] */
}

def @func_1898(%var_1897: Tensor[(3, 10, 4), float32]) -> (Tensor[(3, 10, 4), float32],) {
  %616 = fn (%var_1893: Tensor[(3, 10, 4), float32]) -> (Tensor[(3, 10, 4), float32],) {
    %614 = cast(%var_1893, dtype="float32") /* ty=Tensor[(3, 10, 4), float32] */;
    %615 = sinh(%614) /* ty=Tensor[(3, 10, 4), float32] */;
    (%615,)
  };
  %616(%var_1897) /* ty=(Tensor[(3, 10, 4), float32],) */
}

def @func_5545(%var_5542: bool, %var_5543: Tensor[(216), bool], %var_5544: Tensor[(5, 70), float32]) -> (Tensor[(10, 9, 8), bool], Tensor[(9, 3, 8), bool], bool, Tensor[(216), bool], Tensor[(10, 5, 7), float32], Tensor[(5, 70), float32], Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) {
  %635 = fn (%var_5509: bool, %var_5510: Tensor[(216), bool], %var_5524: Tensor[(5, 70), float32]) -> (Tensor[(10, 9, 8), bool], Tensor[(9, 3, 8), bool], bool, Tensor[(216), bool], Tensor[(10, 5, 7), float32], Tensor[(5, 70), float32], Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) {
    %617 = @func_4411() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) */;
    %618 = cast(%var_5509, dtype="bool") /* ty=bool */;
    %619 = cast(%var_5510, dtype="bool") /* ty=Tensor[(216), bool] */;
    %620 = reshape(%618, newshape=[]) /* ty=bool */;
    %621 = reshape(%619, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), bool] */;
    %622 = @func_3944(%620, %621) /* ty=(Tensor[(9, 3, 8), bool],) */;
    %623 = cast(%var_5524, dtype="float32") /* ty=Tensor[(5, 70), float32] */;
    %624 = reshape(%623, newshape=[10, 5, 7]) /* ty=Tensor[(10, 5, 7), float32] */;
    %625 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
    %626 = %625.2;
    %627 = cast(%626, dtype="float32") /* ty=Tensor[(10, 9, 8), float32] */;
    %628 = cast(%626, dtype="bool") /* ty=Tensor[(10, 9, 8), bool] */;
    %629 = reshape(%628, newshape=[10, 9, 8]) /* ty=Tensor[(10, 9, 8), bool] */;
    %630 = %617.0;
    %631 = %622.0;
    %632 = @func_1095(%624) /* ty=Tensor[(10, 5, 7), float32] */;
    %633 = sinh(%627) /* ty=Tensor[(10, 9, 8), float32] */;
    %634 = @func_3546(%629) /* ty=Tensor[(10, 9, 8), float64] */;
    (%630, %631, %var_5509, %var_5510, %632, %var_5524, %633, %634)
  };
  %635(%var_5542, %var_5543, %var_5544) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 3, 8), bool], bool, Tensor[(216), bool], Tensor[(10, 5, 7), float32], Tensor[(5, 70), float32], Tensor[(10, 9, 8), float32], Tensor[(10, 9, 8), float64]) */
}

def @func_5181() -> (Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float32]) {
  @func_5179() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(6, 15, 12), float32]) */
}

def @func_2942(%var_2940: Tensor[(6, 11, 4), uint32], %var_2941: Tensor[(6, 11, 4), uint32]) -> Tensor[(6, 11, 4), bool] {
  @func_2938(%var_2940, %var_2941) /* ty=Tensor[(6, 11, 4), bool] */
}

def @func_3357() -> Tensor[(10, 9, 8), bool] {
  %637 = fn () -> Tensor[(10, 9, 8), bool] {
    %636 = @func_3141() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(720), uint32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(10, ?, 16), float64]) */;
    %636.0
  };
  %637() /* ty=Tensor[(10, 9, 8), bool] */
}

def @func_5802() -> Tensor[(1080), float32] {
  @func_5800() /* ty=Tensor[(1080), float32] */
}

def @main(%var_6155: Tensor[(10, 12, 6), float64], %var_6160: Tensor[(126), uint32], %var_6164: Tensor[(936, 1), uint64]) -> (Tensor[(126), uint32], Tensor[(936, ?), bool], Tensor[(9, 12, 8), int16], Tensor[(864), int16], Tensor[(10, 12, 6), int8]) {
  %638 = cast(%var_6160, dtype="uint32") /* ty=Tensor[(126), uint32] */;
  %639 = reshape(%638, newshape=[126]) /* ty=Tensor[(126), uint32] */;
  %640 = @func_3812(%639) /* ty=(Tensor[(10, 9, 8), bool], Tensor[(936, 1), uint64], Tensor[(126), uint32]) */;
  %641 = %640.1;
  %642 = cast(%var_6164, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(2), int32] */;
  %644 = cast(%641, dtype="bool") /* ty=Tensor[(936, 1), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %646 = cast(meta[relay.Constant][36] /* ty=Tensor[(864), int16] */, dtype="int16") /* ty=Tensor[(864), int16] */;
  %647 = reshape(%646, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), int16] */;
  %648 = @func_5223(%647) /* ty=(Tensor[(9, 12, 8), int16],) */;
  %649 = cast(%var_6155, dtype="float64") /* ty=Tensor[(10, 12, 6), float64] */;
  %650 = asinh(%649) /* ty=Tensor[(10, 12, 6), float64] */;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(10, 12, 6), float64] */;
  %652 = sqrt(%651) /* ty=Tensor[(10, 12, 6), float64] */;
  %653 = cast(%652, dtype="int8") /* ty=Tensor[(10, 12, 6), int8] */;
  %654 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%650, dtype="int8") /* ty=Tensor[(10, 12, 6), int8] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %657 = greater(%644, %645) /* ty=Tensor[(936, ?), bool] */;
  %658 = %648.0;
  %659 = logical_xor(%655, %656) /* ty=Tensor[(10, 12, 6), int8] */;
  (%var_6160, %657, %658, meta[relay.Constant][36] /* ty=Tensor[(864), int16] */, %659)
}

def @func_5669(%var_5667: Tensor[(9, 11, 4), float32]) -> Tensor[(9, 11, 4), float32] {
  @func_5666(%var_5667) /* ty=Tensor[(9, 11, 4), float32] */
}

def @func_6057(%var_6055: Tensor[(9, 720), bool]) -> (Tensor[(9, 720), float64], Tensor[(6, 15, 12), uint8]) {
  @func_6054(%var_6055) /* ty=(Tensor[(9, 720), float64], Tensor[(6, 15, 12), uint8]) */
}

def @func_2735(%var_2733: uint32, %var_2734: Tensor[(8, 1, 14), uint32]) -> Tensor[(8, 1, 14), bool] {
  @func_2731(%var_2733, %var_2734) /* ty=Tensor[(8, 1, 14), bool] */
}

def @func_3758() -> (Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) {
  @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */
}

def @func_3210(%var_3209: Tensor[(4, 420), uint16]) -> (Tensor[(5, 2, 11), float64], Tensor[(4, 420), uint16], Tensor[(1176), float32], Tensor[(110), float64], Tensor[(1176), float32], Tensor[(5, 8, 3), bool]) {
  %695 = fn (%var_3184: Tensor[(4, 420), uint16]) -> (Tensor[(5, 2, 11), float64], Tensor[(4, 420), uint16], Tensor[(1176), float32], Tensor[(110), float64], Tensor[(1176), float32], Tensor[(5, 8, 3), bool]) {
    %660 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
    %661 = cast(meta[relay.Constant][37] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %662 = cast(%var_3184, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
    %663 = reshape(%660, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
    %664 = reshape(%661, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %665 = reshape(%662, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
    %666 = @func_1601(%663, %664, %665) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
    %667 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
    %668 = cast(meta[relay.Constant][37] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %669 = cast(%var_3184, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
    %670 = reshape(%667, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
    %671 = reshape(%668, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %672 = reshape(%669, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
    %673 = @func_1601(%670, %671, %672) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
    %674 = cast(%var_3184, dtype="uint16") /* ty=Tensor[(4, 420), uint16] */;
    %675 = cast(meta[relay.Constant][37] /* ty=Tensor[(1176), float32] */, dtype="float32") /* ty=Tensor[(1176), float32] */;
    %676 = cast(%var_3184, dtype="float64") /* ty=Tensor[(4, 420), float64] */;
    %677 = reshape(%674, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), uint16] */;
    %678 = reshape(%675, newshape=[1176]) /* ty=Tensor[(1176), float32] */;
    %679 = reshape(%676, newshape=[14, 12, 10]) /* ty=Tensor[(14, 12, 10), float64] */;
    %680 = @func_1601(%677, %678, %679) /* ty=(Tensor[(14, 12, 10), uint16], Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(5, 2, 11), float64], Tensor[(110), float64], Tensor[(12, 14, 7), float32], Tensor[(1176), float32], Tensor[(12, 14, 7), float32], Tensor[(14, 12, 10), float32]) */;
    %681 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
    %682 = %681.1;
    %683 = cast(%682, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
    %684 = asin(%683) /* ty=Tensor[(5, 8, 3), float64] */;
    %685 = cast(%684, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
    %686 = atanh(%685) /* ty=Tensor[(5, 8, 3), float32] */;
    %687 = cast(%684, dtype="bool") /* ty=Tensor[(5, 8, 3), bool] */;
    %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%686, dtype="bool") /* ty=Tensor[(5, 8, 3), bool] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %691 = %666.3;
    %692 = %673.4;
    %693 = %680.6;
    %694 = logical_or(%689, %690) /* ty=Tensor[(5, 8, 3), bool] */;
    (%691, %var_3184, meta[relay.Constant][37] /* ty=Tensor[(1176), float32] */, %692, %693, %694)
  };
  %695(%var_3209) /* ty=(Tensor[(5, 2, 11), float64], Tensor[(4, 420), uint16], Tensor[(1176), float32], Tensor[(110), float64], Tensor[(1176), float32], Tensor[(5, 8, 3), bool]) */
}

def @func_2633(%var_2631: Tensor[(5, 8, 3), float64], %var_2632: Tensor[(756), uint8]) -> (Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) {
  %713 = fn (%var_2609: Tensor[(5, 8, 3), float64], %var_2628: Tensor[(756), uint8]) -> (Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) {
    %696 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
    %697 = %696.1;
    %698 = cast(%var_2609, dtype="uint32") /* ty=Tensor[(5, 8, 3), uint32] */;
    %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
    %700 = cast(%697, dtype="uint32") /* ty=Tensor[(5, 8, 3), uint32] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %702 = cast(%697, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
    %703 = reshape(%702, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), float32] */;
    %704 = @func_1896(%703) /* ty=(Tensor[(3, 10, 4), float32],) */;
    %705 = cast(%var_2628, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %706 = cast(%var_2628, dtype="uint8") /* ty=Tensor[(756), uint8] */;
    %707 = reshape(%705, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint8] */;
    %708 = reshape(%706, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), uint8] */;
    %709 = @func_1761(%707, %708) /* ty=(Tensor[(10, 5, 7), float32], Tensor[(350), float32], Tensor[(6, 15, 12), uint8], Tensor[(1080), uint8], Tensor[(9, 12, 7), float64]) */;
    %710 = right_shift(%700, %701) /* ty=Tensor[(5, 8, 3), uint32] */;
    %711 = %704.0;
    %712 = %709.2;
    (%710, %711, %712, %var_2628)
  };
  %713(%var_2631, %var_2632) /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */
}

def @func_4731(%var_4729: Tensor[(9, 4, 4), float64], %var_4730: Tensor[(9, 4, 4), float64]) -> (Tensor[(9, 4, 4), float64], Tensor[(5, 8, 3), float32], Tensor[(9, 4, 4), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) {
  %732 = fn (%var_4689: Tensor[(9, 4, 4), float64], %var_4690: Tensor[(9, 4, 4), float64]) -> (Tensor[(9, 4, 4), float64], Tensor[(5, 8, 3), float32], Tensor[(9, 4, 4), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) {
    %714 = cast(%var_4690, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
    %715 = shape_of(%var_4689, dtype="int32") /* ty=Tensor[(3), int32] */;
    %716 = cast(%var_4689, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
    %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %718 = floor_mod(%716, %717) /* ty=Tensor[(9, 4, 4), float64] */;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
    %720 = @func_3703() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), float32], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool]) */;
    %721 = cast(%718, dtype="float32") /* ty=Tensor[(9, 4, 4), float32] */;
    %722 = asinh(%721) /* ty=Tensor[(9, 4, 4), float32] */;
    %723 = cast(%722, dtype="float32") /* ty=Tensor[(9, 4, 4), float32] */;
    %724 = cast(meta[relay.Constant][38] /* ty=Tensor[(264), uint32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %725 = cast(meta[relay.Constant][38] /* ty=Tensor[(264), uint32] */, dtype="uint32") /* ty=Tensor[(264), uint32] */;
    %726 = reshape(%724, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
    %727 = reshape(%725, newshape=[6, 11, 4]) /* ty=Tensor[(6, 11, 4), uint32] */;
    %728 = log2(%719) /* ty=Tensor[(9, 4, 4), float64] */;
    %729 = %720.2;
    %730 = sqrt(%723) /* ty=Tensor[(9, 4, 4), float32] */;
    %731 = @func_2938(%726, %727) /* ty=Tensor[(6, 11, 4), bool] */;
    (%728, %729, %730, %731, meta[relay.Constant][38] /* ty=Tensor[(264), uint32] */)
  };
  %732(%var_4729, %var_4730) /* ty=(Tensor[(9, 4, 4), float64], Tensor[(5, 8, 3), float32], Tensor[(9, 4, 4), float32], Tensor[(6, 11, 4), bool], Tensor[(264), uint32]) */
}

def @func_5564() -> (Tensor[(126), uint32], Tensor[(10, 9, 8), float32]) {
  @func_5562() /* ty=(Tensor[(126), uint32], Tensor[(10, 9, 8), float32]) */
}

def @func_4411() -> (Tensor[(10, 9, 8), bool], Tensor[(10, 9, 8), bool]) {
  %733 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  %734 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  (%733, %734)
}

def @func_3476() -> (Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) {
  %735 = @func_3155() /* ty=(Tensor[(10, 9, 8), bool],) */;
  %736 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
  %737 = %736.1;
  %738 = cast(%737, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %739 = cos(%738) /* ty=Tensor[(5, 8, 3), float64] */;
  %740 = cast(%737, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="float32") /* ty=Tensor[(5, 8, 3), float32] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %744 = floor_divide(%742, %743) /* ty=Tensor[(5, 8, 3), float32] */;
  %745 = cast(%744, dtype="float64") /* ty=Tensor[(5, 8, 3), float64] */;
  %746 = cast(meta[relay.Constant][39] /* ty=Tensor[(756), uint8] */, dtype="uint8") /* ty=Tensor[(756), uint8] */;
  %747 = reshape(%745, newshape=[5, 8, 3]) /* ty=Tensor[(5, 8, 3), float64] */;
  %748 = reshape(%746, newshape=[756]) /* ty=Tensor[(756), uint8] */;
  %749 = @func_2630(%747, %748) /* ty=(Tensor[(5, 8, 3), uint32], Tensor[(3, 10, 4), float32], Tensor[(6, 15, 12), uint8], Tensor[(756), uint8]) */;
  %750 = %735.0;
  %751 = %749.2;
  (%750, %744, %751, meta[relay.Constant][39] /* ty=Tensor[(756), uint8] */)
}

def @func_459(%var_452: Tensor[(6, 15, 12), uint8]) -> (Tensor[(6, 15, 12), uint8],) {
  %752 = cast(meta[relay.Constant][40] /* ty=Tensor[(6, 15, 12), uint8] */, dtype="uint8") /* ty=Tensor[(6, 15, 12), uint8] */;
  %753 = shape_of(%var_452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%var_452, dtype="uint8") /* ty=Tensor[(6, 15, 12), uint8] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %756 = logical_xor(%754, %755) /* ty=Tensor[(6, 15, 12), uint8] */;
  (%756,)
}

def @func_1651(%var_1648: Tensor[(14, 5, 7), bool], %var_1649: Tensor[(14, 5, 7), bool], %var_1650: Tensor[(126), uint32]) -> (Tensor[(14, 5, 7), bool], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
  %770 = fn (%var_1628: Tensor[(14, 5, 7), bool], %var_1629: Tensor[(14, 5, 7), bool], %var_1640: Tensor[(126), uint32]) -> (Tensor[(14, 5, 7), bool], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
    %757 = cast(%var_1629, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
    %758 = shape_of(%var_1628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %759 = cast(%var_1628, dtype="bool") /* ty=Tensor[(14, 5, 7), bool] */;
    %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %761 = cast(%var_1640, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %762 = cast(%var_1640, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %763 = cast(%var_1640, dtype="float64") /* ty=Tensor[(126), float64] */;
    %764 = reshape(%761, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
    %765 = reshape(%762, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
    %766 = reshape(%763, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
    %767 = @func_904(%764, %765, %766) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
    %768 = logical_and(%759, %760) /* ty=Tensor[(14, 5, 7), bool] */;
    %769 = %767.0;
    (%768, %769, %var_1640)
  };
  %770(%var_1648, %var_1649, %var_1650) /* ty=(Tensor[(14, 5, 7), bool], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */
}

def @func_4012() -> (Tensor[(1, 1176), float32],) {
  @func_4010() /* ty=(Tensor[(1, 1176), float32],) */
}

def @func_4010() -> (Tensor[(1, 1176), float32],) {
  %771 = @func_3861() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(5, 8, 3), float32], Tensor[(10, 9, 8), bool], Tensor[(1, 1176), float32], Tensor[(6, 196), float32]) */;
  %772 = %771.3;
  %773 = cast(%772, dtype="float32") /* ty=Tensor[(1, 1176), float32] */;
  %774 = sin(%773) /* ty=Tensor[(1, 1176), float32] */;
  (%774,)
}

def @func_3419() -> Tensor[(10, 9, 8), bool] {
  @func_3417() /* ty=Tensor[(10, 9, 8), bool] */
}

def @func_3969() -> Tensor[(5, 8, 3), float32] {
  %775 = @func_3928() /* ty=(Tensor[(5, 8, 3), float32],) */;
  %775.0
}

def @func_4936() -> (Tensor[(9, 11, ?), float32],) {
  %778 = fn () -> (Tensor[(9, 11, ?), float32],) {
    %776 = @func_3756() /* ty=(Tensor[(10, 9, 8), bool], Tensor[(9, 11, ?), float32], Tensor[(9, 8, 13), bool], Tensor[(126), uint32]) */;
    %777 = %776.1;
    (%777,)
  };
  %778() /* ty=(Tensor[(9, 11, ?), float32],) */
}

def @func_3516(%var_3512: Tensor[(10, 9, 8), bool], %var_3513: Tensor[(126), uint32], %var_3514: int32, %var_3515: Tensor[(264), int32]) -> (Tensor[(10, 9, 8), int32], Tensor[(5, 8, 3), float32], Tensor[(126), uint32], Tensor[(1080), uint8], int32, Tensor[(264), int32], Tensor[(1080), uint8]) {
  @func_3510(%var_3512, %var_3513, %var_3514, %var_3515) /* ty=(Tensor[(10, 9, 8), int32], Tensor[(5, 8, 3), float32], Tensor[(126), uint32], Tensor[(1080), uint8], int32, Tensor[(264), int32], Tensor[(1080), uint8]) */
}

def @func_3608(%var_3603: Tensor[(10, 9, 8), bool]) -> Tensor[(10, 9, 8), float64] {
  %779 = @func_3356() /* ty=Tensor[(10, 9, 8), bool] */;
  %780 = cast(%var_3603, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %782 = cast(%779, dtype="float64") /* ty=Tensor[(10, 9, 8), float64] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%782, %783) /* ty=Tensor[(10, 9, 8), float64] */
}

def @func_2815(%var_2814: Tensor[(126), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
  %800 = fn (%var_2811: Tensor[(126), uint32]) -> (Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) {
    %784 = @func_2525() /* ty=(Tensor[(5, 8, 3), float32], Tensor[(5, 8, 3), float64]) */;
    %785 = cast(meta[relay.Constant][41] /* ty=Tensor[(936, 1), uint64] */, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
    %786 = cast(meta[relay.Constant][41] /* ty=Tensor[(936, 1), uint64] */, dtype="uint64") /* ty=Tensor[(936, 1), uint64] */;
    %787 = reshape(%785, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
    %788 = reshape(%786, newshape=[9, 8, 13]) /* ty=Tensor[(9, 8, 13), uint64] */;
    %789 = @func_2385(%787, %788) /* ty=(Tensor[(9, 8, 13), bool], Tensor[(135), float64], Tensor[(5, 9, 3), bool], Tensor[(5, 9, 3), float64]) */;
    %790 = cast(%var_2811, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %791 = cast(%var_2811, dtype="uint32") /* ty=Tensor[(126), uint32] */;
    %792 = cast(%var_2811, dtype="float64") /* ty=Tensor[(126), float64] */;
    %793 = reshape(%790, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
    %794 = reshape(%791, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), uint32] */;
    %795 = reshape(%792, newshape=[9, 7, 2]) /* ty=Tensor[(9, 7, 2), float64] */;
    %796 = @func_904(%793, %794, %795) /* ty=(Tensor[(9, 7, 2), bool], Tensor[(9, 7, 2), bool]) */;
    %797 = %784.0;
    %798 = %789.0;
    %799 = %796.0;
    (%797, %798, meta[relay.Constant][41] /* ty=Tensor[(936, 1), uint64] */, %799, %var_2811)
  };
  %800(%var_2814) /* ty=(Tensor[(5, 8, 3), float32], Tensor[(9, 8, 13), bool], Tensor[(936, 1), uint64], Tensor[(9, 7, 2), bool], Tensor[(126), uint32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen104/build/output.py", line 1737, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:00] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

