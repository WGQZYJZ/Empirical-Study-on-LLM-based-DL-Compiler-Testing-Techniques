==========mod==========
#[version = "0.0.5"]
def @func_5436(%var_5418: Tensor[(10, 11, 8), float64]) -> (Tensor[(2, 6, 10), float64], Tensor[(10, 11, 8), int8]) {
  %0 = @func_5266() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */;
  %1 = %0.0;
  %2 = cast(%var_5418, dtype="int8") /* ty=Tensor[(10, 11, 8), int8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int8") /* ty=Tensor[(10, 11, 8), int8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %6 = @func_2426() /* ty=Tensor[(2, 6, 10), float64] */;
  %7 = right_shift(%4, %5) /* ty=Tensor[(10, 11, 8), int8] */;
  (%6, %7)
}

def @func_2426() -> Tensor[(2, 6, 10), float64] {
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 6, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  sqrt(%8) /* ty=Tensor[(2, 6, 10), float64] */
}

def @func_4034(%var_4025: float32, %var_4026: Tensor[(3, 11, 10), float32]) -> (Tensor[(3, 11, 10), float32],) {
  %9 = cast(%var_4025, dtype="float32") /* ty=float32 */;
  %10 = cast(%var_4026, dtype="float32") /* ty=Tensor[(3, 11, 10), float32] */;
  %11 = power(%9, %10) /* ty=Tensor[(3, 11, 10), float32] */;
  (%11,)
}

def @func_1545(%var_1495: Tensor[(1, 3, 3), float64], %var_1521: Tensor[(280), int64], %var_1540: Tensor[(5, 3, 3), float64]) -> (Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) {
  %12 = cast(%var_1495, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %13 = log(%12) /* ty=Tensor[(1, 3, 3), float64] */;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %15 = cast(meta[relay.Constant][1] /* ty=Tensor[(18), int8] */, dtype="int8") /* ty=Tensor[(18), int8] */;
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %17 = cast(%var_1521, dtype="int64") /* ty=Tensor[(280), int64] */;
  %18 = reshape(%15, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), int8] */;
  %19 = reshape(%16, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %20 = reshape(%17, newshape=[140, 2]) /* ty=Tensor[(140, 2), int64] */;
  %21 = @func_599(%18, %19, %20) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) */;
  %22 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %24 = reshape(%22, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %25 = reshape(%23, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %26 = @func_946(%24, %25) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
  %27 = cast(%13, dtype="int8") /* ty=Tensor[(1, 3, 3), int8] */;
  %28 = cast(%var_1540, dtype="int8") /* ty=Tensor[(5, 3, 3), int8] */;
  %29 = exp(%14) /* ty=Tensor[(1, 3, 3), float32] */;
  %30 = %21.1;
  %31 = %26.0;
  %32 = add(%27, %28) /* ty=Tensor[(5, 3, 3), int8] */;
  (%29, %30, meta[relay.Constant][1] /* ty=Tensor[(18), int8] */, meta[relay.Constant][2] /* ty=Tensor[(384), float32] */, %var_1521, %31, meta[relay.Constant][3] /* ty=Tensor[(336), float64] */, %32)
}

def @func_3032() -> Tensor[(2, 6, 10), bool] {
  %33 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %33.0
}

def @func_2667(%var_2663: Tensor[(13, 8, 10), float32]) -> Tensor[(13, 8, 10), float32] {
  %34 = cast(%var_2663, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
  tan(%34) /* ty=Tensor[(13, 8, 10), float32] */
}

def @func_6342() -> (Tensor[(234, 2), float64], Tensor[(2, 6, 10), bool]) {
  %35 = @func_5796() /* ty=(Tensor[(234, 2), float64],) */;
  %36 = @func_2981() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %37 = %35.0;
  %38 = %36.0;
  (%37, %38)
}

def @func_4527() -> Tensor[(10, 11, 8), float64] {
  %39 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %39.0
}

def @func_5918() -> (Tensor[(2, 6, 10), bool], Tensor[(9, 156), float64], Tensor[(9, 156), bool]) {
  %40 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 156), float64] */, dtype="float64") /* ty=Tensor[(9, 156), float64] */;
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 156), float64] */, dtype="float64") /* ty=Tensor[(9, 156), float64] */;
  %43 = reshape(%42, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float64] */;
  %44 = @func_1956(%43) /* ty=(Tensor[(12, 9, 13), float64],) */;
  %45 = %44.0;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %47 = rsqrt(%46) /* ty=Tensor[(12, 9, 13), float64] */;
  %48 = cast(%47, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %49 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(9, 156), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %50 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 156), float64] */, dtype="bool") /* ty=Tensor[(9, 156), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %52 = %40.0;
  %53 = log2(%41) /* ty=Tensor[(9, 156), float64] */;
  %54 = equal(%50, %51) /* ty=Tensor[(9, 156), bool] */;
  (%52, %53, %54)
}

def @func_1956(%var_1953: Tensor[(12, 9, 13), float64]) -> (Tensor[(12, 9, 13), float64],) {
  %55 = cast(%var_1953, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %56 = erf(%55) /* ty=Tensor[(12, 9, 13), float64] */;
  (%56,)
}

def @func_2959(%var_2920: Tensor[(2, 6, 10), bool], %var_2946: Tensor[(336), float64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), int8], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) {
  %57 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %58 = cast(%var_2920, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %59 = sinh(%58) /* ty=Tensor[(2, 6, 10), float32] */;
  %60 = @func_2445() /* ty=Tensor[(2, 6, 10), bool] */;
  %61 = cast(%var_2920, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %65 = right_shift(%63, %64) /* ty=Tensor[(2, 6, 10), int64] */;
  %66 = cast(%65, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
  %67 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%59, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %70 = cast(%var_2946, dtype="float64") /* ty=Tensor[(336), float64] */;
  %71 = cast(%var_2946, dtype="float64") /* ty=Tensor[(336), float64] */;
  %72 = reshape(%70, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %73 = reshape(%71, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %74 = @func_946(%72, %73) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
  %75 = %57.0;
  %76 = subtract(%68, %69) /* ty=Tensor[(2, 6, 10), int8] */;
  %77 = %74.2;
  (%75, %76, %77, %var_2946)
}

def @func_4418() -> (Tensor[(2, 6, 10), bool],) {
  %78 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  (%78,)
}

def @func_4267() -> Tensor[(9), float64] {
  %79 = @func_3966() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) */;
  %79.2
}

def @func_5675() -> (Tensor[(2, 6, 10), bool],) {
  %80 = @func_3094() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) */;
  %81 = %80.0;
  (%81,)
}

def @func_6006(%var_5994: Tensor[(256, 2), float64], %var_6003: Tensor[(700), uint8]) -> (Tensor[(256, 2), uint64], Tensor[(5, 10, 14), float64], Tensor[(700), uint8]) {
  %82 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %83 = %82.1;
  %84 = cast(%var_5994, dtype="uint64") /* ty=Tensor[(256, 2), uint64] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(%83, dtype="uint64") /* ty=Tensor[(256, 2), uint64] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %88 = cast(%var_6003, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %89 = cast(%var_6003, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %90 = reshape(%88, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %91 = reshape(%89, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %92 = @func_3069(%90, %91) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %93 = add(%86, %87) /* ty=Tensor[(256, 2), uint64] */;
  %94 = %92.0;
  (%93, %94, %var_6003)
}

def @func_4069() -> Tensor[(2, 6, 10), bool] {
  @func_3353() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_3246() -> Tensor[(2, 6, 10), float64] {
  %95 = @func_2856() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) */;
  %95.3
}

def @func_3328() -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) {
  %96 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %97 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %98 = %96.0;
  %99 = %97.0;
  (%98, %99)
}

def @func_4793() -> (Tensor[(2, 6, 10), float64], Tensor[(9), float64]) {
  %100 = @func_3246() /* ty=Tensor[(2, 6, 10), float64] */;
  %101 = @func_4267() /* ty=Tensor[(9), float64] */;
  (%100, %101)
}

def @func_2652() -> Tensor[(2, 6, 10), bool] {
  @func_2464() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_5085() -> (Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) {
  %102 = cast(meta[relay.Constant][5] /* ty=Tensor[(256, 2), float64] */, dtype="float64") /* ty=Tensor[(256, 2), float64] */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(256, 2), float64] */, dtype="float64") /* ty=Tensor[(256, 2), float64] */;
  %104 = reshape(%102, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %105 = reshape(%103, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %106 = @func_2856() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) */;
  %107 = %106.3;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %109 = sin(%108) /* ty=Tensor[(2, 6, 10), float64] */;
  %110 = cast(%107, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%109, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %114 = @func_3994(%104, %105) /* ty=Tensor[(4, 16, 8), bool] */;
  %115 = add(%112, %113) /* ty=Tensor[(2, 6, 10), float64] */;
  (%114, meta[relay.Constant][5] /* ty=Tensor[(256, 2), float64] */, %115)
}

def @func_2826(%var_2788: int32, %var_2789: Tensor[(9, 13, 10), int32], %var_2822: Tensor[(18), uint64]) -> (Tensor[(9, 13, 10), int32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(9, 13, 10), bool], Tensor[(3, 11, 6), bool], Tensor[(18), uint64]) {
  %116 = cast(%var_2788, dtype="int32") /* ty=int32 */;
  %117 = cast(%var_2789, dtype="int32") /* ty=Tensor[(9, 13, 10), int32] */;
  %118 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %120 = reshape(%118, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %121 = reshape(%119, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 13, 10), int32] */, dtype="int64") /* ty=Tensor[(9, 13, 10), int64] */;
  %123 = shape_of(%var_2789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_2789, dtype="int64") /* ty=Tensor[(9, 13, 10), int64] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %126 = maximum(%124, %125) /* ty=Tensor[(9, 13, 10), int64] */;
  %127 = cast(%var_2788, dtype="bool") /* ty=bool */;
  %128 = cast(%126, dtype="bool") /* ty=Tensor[(9, 13, 10), bool] */;
  %129 = cast(%var_2822, dtype="uint64") /* ty=Tensor[(18), uint64] */;
  %130 = reshape(%129, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), uint64] */;
  %131 = subtract(%116, %117) /* ty=Tensor[(9, 13, 10), int32] */;
  %132 = @func_51(%120, %121) /* ty=Tensor[(2, 10, 10), bool] */;
  %133 = not_equal(%127, %128) /* ty=Tensor[(9, 13, 10), bool] */;
  %134 = @func_2389(%130) /* ty=Tensor[(3, 11, 6), bool] */;
  (%131, %132, meta[relay.Constant][6] /* ty=Tensor[(200), int64] */, %133, %134, %var_2822)
}

def @func_946(%var_885: Tensor[(6, 4, 14), float64], %var_934: Tensor[(6, 4, 14), float64]) -> (Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) {
  %135 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 20), int64] */, dtype="int64") /* ty=Tensor[(10, 20), int64] */;
  %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 20), int64] */, dtype="int64") /* ty=Tensor[(10, 20), int64] */;
  %137 = reshape(%135, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %138 = reshape(%136, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %139 = cast(%var_885, dtype="float64") /* ty=Tensor[(6, 4, 14), float64] */;
  %140 = sinh(%139) /* ty=Tensor[(6, 4, 14), float64] */;
  %141 = cast(%140, dtype="float64") /* ty=Tensor[(6, 4, 14), float64] */;
  %142 = atan(%141) /* ty=Tensor[(6, 4, 14), float64] */;
  %143 = cast(%140, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%142, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %147 = cast(%var_934, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %148 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%142, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = @func_51(%137, %138) /* ty=Tensor[(2, 10, 10), bool] */;
  %152 = logical_and(%145, %146) /* ty=Tensor[(6, 4, 14), bool] */;
  %153 = less_equal(%149, %150) /* ty=Tensor[(6, 4, 14), bool] */;
  (%151, meta[relay.Constant][8] /* ty=Tensor[(10, 20), int64] */, %152, %153)
}

def @func_5859(%var_5839: float32, %var_5840: Tensor[(1, 6, 4), float32]) -> (Tensor[(1, 6, 4), float32], Tensor[(2, 6, 10), float64]) {
  %154 = cast(%var_5839, dtype="float32") /* ty=float32 */;
  %155 = cast(%var_5840, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %156 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %157 = floor_divide(%154, %155) /* ty=Tensor[(1, 6, 4), float32] */;
  %158 = %156.2;
  (%157, %158)
}

def @func_5749() -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), float64], Tensor[(12, 3, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(468), bool]) {
  %159 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %160 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
  %162 = reshape(%161, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %163 = @func_4549(%162) /* ty=(Tensor[(12, 3, 13), float64],) */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(468), float64] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %165 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(468), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(468), float64] */, dtype="bool") /* ty=Tensor[(468), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?), bool] */;
  %168 = %159.2;
  %169 = %160.2;
  %170 = %163.0;
  %171 = @func_2755() /* ty=Tensor[(10, 11, 8), float64] */;
  %172 = less_equal(%166, %167) /* ty=Tensor[(468), bool] */;
  (%168, %169, %170, %171, %172)
}

def @func_4656(%var_4642: Tensor[(13, 15, 14), float32], %var_4643: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  %173 = cast(%var_4643, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %174 = shape_of(%var_4642, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%var_4642, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %177 = floor_mod(%175, %176) /* ty=Tensor[(13, 15, 14), float32] */;
  (%177,)
}

def @func_3994(%var_3982: Tensor[(4, 16, 8), float64], %var_3983: Tensor[(4, 16, 8), float64]) -> Tensor[(4, 16, 8), bool] {
  %178 = cast(%var_3983, dtype="bool") /* ty=Tensor[(4, 16, 8), bool] */;
  %179 = shape_of(%var_3982, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_3982, dtype="bool") /* ty=Tensor[(4, 16, 8), bool] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%180, %181) /* ty=Tensor[(4, 16, 8), bool] */
}

def @func_2464() -> Tensor[(2, 6, 10), bool] {
  @func_2445() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_3780() -> (Tensor[(2, 6, 10), bool],) {
  %182 = @func_2445() /* ty=Tensor[(2, 6, 10), bool] */;
  (%182,)
}

def @func_5166(%var_5131: Tensor[(5, 6, 13), float32], %var_5132: Tensor[(5, 6, 13), float32]) -> (Tensor[(5, 6, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(5, 6, 13), float32]) {
  %183 = cast(%var_5132, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
  %184 = cast(%var_5132, dtype="bool") /* ty=Tensor[(5, 6, 13), bool] */;
  %185 = shape_of(%var_5131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_5131, dtype="bool") /* ty=Tensor[(5, 6, 13), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = less(%186, %187) /* ty=Tensor[(5, 6, 13), bool] */;
  %189 = cast(%188, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %190 = cosh(%189) /* ty=Tensor[(5, 6, 13), float32] */;
  %191 = cast(%190, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %192 = atanh(%183) /* ty=Tensor[(5, 6, 13), float64] */;
  %193 = @func_2755() /* ty=Tensor[(10, 11, 8), float64] */;
  %194 = log(%191) /* ty=Tensor[(5, 6, 13), float32] */;
  (%192, %193, %194)
}

def @func_4176(%var_4093: Tensor[(12, 9, 9), float64], %var_4099: Tensor[(12, 9, 9), float64], %var_4106: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), uint32], Tensor[(5, 10, 14), float64], Tensor[(700), uint8], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %196 = shape_of(%var_4093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_4093, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %199 = cast(%var_4099, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %200 = shape_of(%var_4093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_4093, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = cast(%var_4106, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %204 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 9, 9), float64] */, dtype="uint32") /* ty=Tensor[(12, 9, 9), uint32] */;
  %208 = shape_of(%var_4093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %209 = cast(%var_4093, dtype="uint32") /* ty=Tensor[(12, 9, 9), uint32] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %211 = cast(meta[relay.Constant][13] /* ty=Tensor[(700), uint8] */, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %212 = cast(meta[relay.Constant][13] /* ty=Tensor[(700), uint8] */, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %213 = reshape(%211, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %214 = reshape(%212, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %215 = @func_3069(%213, %214) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %216 = cast(%var_4093, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %217 = sinh(%216) /* ty=Tensor[(12, 9, 9), float32] */;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %219 = atanh(%218) /* ty=Tensor[(12, 9, 9), float32] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %221 = cast(%219, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %222 = cast(%217, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %223 = divide(%197, %198) /* ty=Tensor[(12, 9, 9), float64] */;
  %224 = greater(%201, %202) /* ty=Tensor[(12, 9, 9), bool] */;
  %225 = power(%205, %206) /* ty=Tensor[(12, 9, 9), float32] */;
  %226 = bitwise_and(%209, %210) /* ty=Tensor[(12, 9, 9), uint32] */;
  %227 = %215.0;
  %228 = asin(%220) /* ty=Tensor[(12, 9, 9), float32] */;
  %229 = exp(%221) /* ty=Tensor[(12, 9, 9), float64] */;
  %230 = sin(%222) /* ty=Tensor[(12, 9, 9), float64] */;
  (%223, %224, %225, %226, %227, meta[relay.Constant][13] /* ty=Tensor[(700), uint8] */, %228, %229, %230)
}

def @func_4951(%var_4933: Tensor[(13, 14, 13), float32]) -> Tensor[(13, 14, 13), bool] {
  %231 = cast(%var_4933, dtype="float32") /* ty=Tensor[(13, 14, 13), float32] */;
  %232 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 13), float32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %235 = power(%233, %234) /* ty=Tensor[(13, 14, 13), float32] */;
  %236 = cast(%235, dtype="bool") /* ty=Tensor[(13, 14, 13), bool] */;
  %237 = shape_of(%var_4933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_4933, dtype="bool") /* ty=Tensor[(13, 14, 13), bool] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%238, %239) /* ty=Tensor[(13, 14, 13), bool] */
}

def @func_1899(%var_1871: Tensor[(4, 4, 5), bool], %var_1872: Tensor[(4, 4, 5), bool], %var_1884: Tensor[(165), float64]) -> (Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) {
  %240 = cast(%var_1872, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %241 = shape_of(%var_1871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %242 = cast(%var_1871, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
  %243 = dyn.reshape(%240, %241, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %244 = cast(%var_1884, dtype="float64") /* ty=Tensor[(165), float64] */;
  %245 = reshape(%244, newshape=[11, 1, 15]) /* ty=Tensor[(11, 1, 15), float64] */;
  %246 = @func_1782(%245) /* ty=(Tensor[(11, ?, 15), bool], Tensor[(11, ?, 15), int64]) */;
  %247 = %246.0;
  %248 = cast(%var_1884, dtype="float64") /* ty=Tensor[(165), float64] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%247, dtype="float64") /* ty=Tensor[(11, ?, 15), float64] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %252 = logical_or(%242, %243) /* ty=Tensor[(4, 4, 5), bool] */;
  %253 = multiply(%250, %251) /* ty=Tensor[(11, ?, 15), float64] */;
  (%252, %253)
}

def @func_4624() -> (Tensor[(12, 9, 13), float64], Tensor[(2, 6, 10), bool]) {
  %254 = @func_3052() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) */;
  %255 = %254.1;
  %256 = @func_2652() /* ty=Tensor[(2, 6, 10), bool] */;
  (%255, %256)
}

def @func_5227() -> (Tensor[(2, 6, 10), float64],) {
  %257 = @func_4208() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64]) */;
  %258 = %257.1;
  (%258,)
}

def @func_5796() -> (Tensor[(234, 2), float64],) {
  %259 = @func_5666() /* ty=(Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) */;
  %260 = %259.5;
  (%260,)
}

def @func_3094() -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) {
  %261 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  %262 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  (%261, %262)
}

def @func_51(%var_6: Tensor[(2, 10, 10), int64], %var_7: Tensor[(2, 10, 10), int64]) -> Tensor[(2, 10, 10), bool] {
  %263 = cast(%var_6, dtype="float64") /* ty=Tensor[(2, 10, 10), float64] */;
  %264 = acosh(%263) /* ty=Tensor[(2, 10, 10), float64] */;
  %265 = cast(%var_7, dtype="int64") /* ty=Tensor[(2, 10, 10), int64] */;
  %266 = shape_of(%var_6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%var_6, dtype="int64") /* ty=Tensor[(2, 10, 10), int64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %269 = right_shift(%267, %268) /* ty=Tensor[(2, 10, 10), int64] */;
  %270 = cast(%269, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %271 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%264, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%272, %273) /* ty=Tensor[(2, 10, 10), bool] */
}

def @func_2389(%var_2374: Tensor[(3, 1, 6), uint64]) -> Tensor[(3, 11, 6), bool] {
  %274 = cast(%var_2374, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
  %275 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 11, 6), uint64] */, dtype="uint64") /* ty=Tensor[(3, 11, 6), uint64] */;
  %276 = left_shift(%274, %275) /* ty=Tensor[(3, 11, 6), uint64] */;
  %277 = cast(%276, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %278 = cast(%var_2374, dtype="bool") /* ty=Tensor[(3, 1, 6), bool] */;
  greater_equal(%277, %278) /* ty=Tensor[(3, 11, 6), bool] */
}

def @func_6452(%var_6443: Tensor[(7, 15, 1), float32], %var_6444: Tensor[(7, 15, 1), float32]) -> (Tensor[(7, 15, ?), float32], Tensor[(2, 6, 10), bool]) {
  %279 = cast(%var_6444, dtype="float32") /* ty=Tensor[(7, 15, 1), float32] */;
  %280 = shape_of(%var_6443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%var_6443, dtype="float32") /* ty=Tensor[(7, 15, 1), float32] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %283 = @func_5266() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */;
  %284 = divide(%281, %282) /* ty=Tensor[(7, 15, ?), float32] */;
  %285 = %283.1;
  (%284, %285)
}

def @func_4920() -> (Tensor[(2, 6, 10), bool], Tensor[(16, 2, 8), int16], int16) {
  %286 = @func_4189() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %287 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %288 = reshape(%287, newshape=[]) /* ty=int16 */;
  %289 = @func_3129(%288) /* ty=(Tensor[(16, 2, 8), int16], Tensor[(2, 6, 10), bool]) */;
  %290 = %286.0;
  %291 = %289.0;
  (%290, %291, meta[relay.Constant][16] /* ty=int16 */)
}

def @func_3353() -> Tensor[(2, 6, 10), bool] {
  @func_2499() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_3052() -> (Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) {
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %293 = reshape(%292, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float64] */;
  %294 = @func_1956(%293) /* ty=(Tensor[(12, 9, 13), float64],) */;
  %295 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  %296 = %294.0;
  (%295, %296, meta[relay.Constant][17] /* ty=Tensor[(1404), float64] */)
}

def @func_5317() -> (Tensor[(9), float64], Tensor[(120), bool], Tensor[(336), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float64]) {
  %297 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %298 = cast(meta[relay.Constant][19] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %299 = reshape(%297, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
  %300 = reshape(%298, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %301 = @func_2959(%299, %300) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), int8], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) */;
  %302 = %301.1;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %304 = @func_4267() /* ty=Tensor[(9), float64] */;
  %305 = tan(%303) /* ty=Tensor[(2, 6, 10), float32] */;
  %306 = @func_3246() /* ty=Tensor[(2, 6, 10), float64] */;
  (%304, meta[relay.Constant][18] /* ty=Tensor[(120), bool] */, meta[relay.Constant][19] /* ty=Tensor[(336), float64] */, %305, %306)
}

def @func_3553(%var_3469: Tensor[(2, 6, 10), bool], %var_3502: Tensor[(1, 200), int64], %var_3549: int64, %var_3550: Tensor[(280), int64]) -> (Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], Tensor[(1, 200), int64], Tensor[(15, 5, 9), int64], Tensor[(675), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], int64, Tensor[(280), int64]) {
  %307 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  %308 = cast(%var_3469, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %312 = bitwise_or(%310, %311) /* ty=Tensor[(2, 6, 10), int64] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %314 = atanh(%313) /* ty=Tensor[(2, 6, 10), float32] */;
  %315 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %316 = shape_of(%314, dtype="int32") /* ty=Tensor[(3), int32] */;
  %317 = cast(%314, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %318 = dyn.reshape(%315, %316, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %319 = cast(%307, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %320 = shape_of(%var_3469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%var_3469, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %323 = cast(%var_3502, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
  %324 = cast(%var_3502, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
  %325 = reshape(%323, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %326 = reshape(%324, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %327 = cast(meta[relay.Constant][21] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %328 = reshape(%327, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
  %329 = @func_2342(%328) /* ty=(Tensor[(15, 5, 9), int64],) */;
  %330 = cast(%314, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %331 = cast(%var_3549, dtype="int64") /* ty=int64 */;
  %332 = cast(%var_3550, dtype="int64") /* ty=Tensor[(280), int64] */;
  %333 = reshape(%331, newshape=[]) /* ty=int64 */;
  %334 = reshape(%332, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %335 = @func_437(%333, %334) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */;
  %336 = divide(%317, %318) /* ty=Tensor[(2, 6, 10), float32] */;
  %337 = floor_divide(%321, %322) /* ty=Tensor[(2, 6, 10), float32] */;
  %338 = @func_51(%325, %326) /* ty=Tensor[(2, 10, 10), bool] */;
  %339 = %329.0;
  %340 = asin(%330) /* ty=Tensor[(2, 6, 10), float32] */;
  %341 = %335.1;
  (%336, %337, %338, %var_3502, %339, meta[relay.Constant][21] /* ty=Tensor[(675), float64] */, %340, %341, %var_3549, %var_3550)
}

def @func_5555(%var_5471: Tensor[(700, 1), uint8], %var_5499: Tensor[(2, 6, 10), bool]) -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], Tensor[(700, ?), float64], Tensor[(256, 2), float64]) {
  %342 = @func_4624() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(2, 6, 10), bool]) */;
  %343 = @func_4418() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %344 = %343.0;
  %345 = cast(%var_5499, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %349 = minimum(%347, %348) /* ty=Tensor[(2, 6, 10), float32] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %351 = cast(%var_5471, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %352 = cast(%var_5471, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %353 = reshape(%351, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %354 = reshape(%352, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %355 = @func_3069(%353, %354) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %356 = %355.0;
  %357 = cast(%356, dtype="float32") /* ty=Tensor[(5, 10, 14), float32] */;
  %358 = shape_of(%var_5471, dtype="int32") /* ty=Tensor[(2), int32] */;
  %359 = cast(%var_5471, dtype="float32") /* ty=Tensor[(700, 1), float32] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %361 = minimum(%359, %360) /* ty=Tensor[(700, ?), float32] */;
  %362 = cast(%var_5471, dtype="float64") /* ty=Tensor[(700, 1), float64] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(2), int32] */;
  %364 = cast(%361, dtype="float64") /* ty=Tensor[(700, ?), float64] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %366 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %367 = %342.1;
  %368 = atan(%350) /* ty=Tensor[(2, 6, 10), float64] */;
  %369 = maximum(%364, %365) /* ty=Tensor[(700, ?), float64] */;
  %370 = %366.1;
  (%367, %368, %369, %370)
}

def @func_6129() -> Tensor[(12, 3, 13), float64] {
  %371 = @func_5666() /* ty=(Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) */;
  %371.4
}

def @func_2636() -> (Tensor[(10, 11, 8), float64],) {
  %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %373 = acosh(%372) /* ty=Tensor[(10, 11, 8), float32] */;
  %374 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 11, 8), float32] */, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%373, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %378 = power(%376, %377) /* ty=Tensor[(10, 11, 8), float64] */;
  (%378,)
}

def @func_3368() -> Tensor[(1, 5, 1), float64] {
  %379 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  log(%379) /* ty=Tensor[(1, 5, 1), float64] */
}

def @func_3450(%var_3399: Tensor[(4, 5, 11), float64], %var_3411: Tensor[(165), float64], %var_3413: Tensor[(10, 5, 7), float64], %var_3442: Tensor[(700, 1), uint8]) -> (Tensor[(4, 5, 11), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 5, 7), int8], Tensor[(2, 6, 10), bool], Tensor[(4, 5, 11), int16], Tensor[(2, 6, 10), bool], Tensor[(700, 1), uint8]) {
  %380 = @func_3368() /* ty=Tensor[(1, 5, 1), float64] */;
  %381 = cast(%380, dtype="bool") /* ty=Tensor[(1, 5, 1), bool] */;
  %382 = cast(%var_3399, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %384 = cast(meta[relay.Constant][24] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %385 = cast(%var_3411, dtype="float64") /* ty=Tensor[(165), float64] */;
  %386 = reshape(%383, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
  %387 = reshape(%384, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
  %388 = reshape(%385, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %389 = @func_1899(%386, %387, %388) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) */;
  %390 = cast(%380, dtype="int8") /* ty=Tensor[(1, 5, 1), int8] */;
  %391 = cast(%var_3413, dtype="int8") /* ty=Tensor[(10, 5, 7), int8] */;
  %392 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 5, 11), float64] */, dtype="int16") /* ty=Tensor[(4, 5, 11), int16] */;
  %393 = shape_of(%var_3399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_3399, dtype="int16") /* ty=Tensor[(4, 5, 11), int16] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %396 = cast(%var_3442, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %397 = cast(%var_3442, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %398 = reshape(%396, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %399 = reshape(%397, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %400 = @func_3069(%398, %399) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %401 = logical_and(%381, %382) /* ty=Tensor[(4, 5, 11), bool] */;
  %402 = %389.1;
  %403 = left_shift(%390, %391) /* ty=Tensor[(10, 5, 7), int8] */;
  %404 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  %405 = bitwise_and(%394, %395) /* ty=Tensor[(4, 5, 11), int16] */;
  %406 = %400.1;
  (%401, %402, meta[relay.Constant][24] /* ty=Tensor[(80), bool] */, %var_3411, %403, %404, %405, %406, %var_3442)
}

def @func_4208() -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64]) {
  %407 = @func_2652() /* ty=Tensor[(2, 6, 10), bool] */;
  %408 = @func_2426() /* ty=Tensor[(2, 6, 10), float64] */;
  (%407, %408)
}

def @func_2342(%var_2335: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), int64],) {
  %409 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %410 = acosh(%409) /* ty=Tensor[(15, 5, 9), float64] */;
  %411 = cast(%var_2335, dtype="int64") /* ty=Tensor[(15, 5, 9), int64] */;
  %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
  %413 = cast(%410, dtype="int64") /* ty=Tensor[(15, 5, 9), int64] */;
  %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %415 = left_shift(%413, %414) /* ty=Tensor[(15, 5, 9), int64] */;
  (%415,)
}

def @func_1640(%var_1594: Tensor[(9, 7, 14), float32], %var_1612: Tensor[(336), float64], %var_1618: Tensor[(6, 4, 14), bool]) -> (Tensor[(9, 7, 14), float32], Tensor[(336), float64], Tensor[(6, 4, 14), float32], Tensor[(14, 4, 5), int64], int64, Tensor[(5, 56), int64]) {
  %416 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 7, 14), float32] */;
  %417 = cast(%var_1594, dtype="float32") /* ty=Tensor[(9, 7, 14), float32] */;
  %418 = cast(%var_1612, dtype="float64") /* ty=Tensor[(336), float64] */;
  %419 = cast(%var_1612, dtype="float64") /* ty=Tensor[(336), float64] */;
  %420 = reshape(%418, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %421 = reshape(%419, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %422 = @func_946(%420, %421) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
  %423 = %422.3;
  %424 = cast(%var_1618, dtype="float32") /* ty=Tensor[(6, 4, 14), float32] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="float32") /* ty=Tensor[(6, 4, 14), float32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %428 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %429 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
  %430 = reshape(%428, newshape=[]) /* ty=int64 */;
  %431 = reshape(%429, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %432 = @func_437(%430, %431) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */;
  %433 = divide(%416, %417) /* ty=Tensor[(9, 7, 14), float32] */;
  %434 = power(%426, %427) /* ty=Tensor[(6, 4, 14), float32] */;
  %435 = %432.0;
  (%433, %var_1612, %434, %435, -6 /* ty=int64 */, meta[relay.Constant][28] /* ty=Tensor[(5, 56), int64] */)
}

def @func_1782(%var_1755: Tensor[(11, 1, 15), float64]) -> (Tensor[(11, ?, 15), bool], Tensor[(11, ?, 15), int64]) {
  %436 = cast(%var_1755, dtype="float64") /* ty=Tensor[(11, 1, 15), float64] */;
  %437 = sin(%436) /* ty=Tensor[(11, 1, 15), float64] */;
  %438 = cast(%var_1755, dtype="float64") /* ty=Tensor[(11, 1, 15), float64] */;
  %439 = exp(%438) /* ty=Tensor[(11, 1, 15), float64] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
  %441 = sinh(%440) /* ty=Tensor[(11, 1, 15), float32] */;
  %442 = cast(%441, dtype="bool") /* ty=Tensor[(11, 1, 15), bool] */;
  %443 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%437, dtype="bool") /* ty=Tensor[(11, 1, 15), bool] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %446 = cast(%var_1755, dtype="int64") /* ty=Tensor[(11, 1, 15), int64] */;
  %447 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%439, dtype="int64") /* ty=Tensor[(11, 1, 15), int64] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %450 = greater_equal(%444, %445) /* ty=Tensor[(11, ?, 15), bool] */;
  %451 = minimum(%448, %449) /* ty=Tensor[(11, ?, 15), int64] */;
  (%450, %451)
}

def @func_5266() -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) {
  %452 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %453 = @func_4189() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %454 = %452.0;
  %455 = %453.0;
  (%454, %455)
}

def @func_6419(%var_6369: Tensor[(10, 11, 8), float64], %var_6377: Tensor[(10, 11, 8), float64]) -> (Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 11, 8), float32]) {
  %456 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %457 = %456.0;
  %458 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 11, 8), float64] */, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%457, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %462 = cast(%var_6369, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
  %463 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 11, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 11, 8), float64] */, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %466 = cast(%var_6377, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %467 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(10, 11, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 11, 8), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %470 = cast(meta[relay.Constant][30] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %471 = cast(meta[relay.Constant][30] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %472 = cast(meta[relay.Constant][31] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %473 = reshape(%470, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
  %474 = reshape(%471, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
  %475 = reshape(%472, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %476 = @func_1899(%473, %474, %475) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) */;
  %477 = cast(%457, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %478 = rsqrt(%477) /* ty=Tensor[(10, 11, 8), float64] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %480 = subtract(%460, %461) /* ty=Tensor[(10, 11, 8), uint32] */;
  %481 = left_shift(%464, %465) /* ty=Tensor[(10, 11, 8), uint32] */;
  %482 = logical_or(%468, %469) /* ty=Tensor[(10, 11, 8), bool] */;
  %483 = %476.1;
  %484 = sigmoid(%479) /* ty=Tensor[(10, 11, 8), float32] */;
  (%480, %481, %482, %483, meta[relay.Constant][30] /* ty=Tensor[(80), bool] */, meta[relay.Constant][31] /* ty=Tensor[(165), float64] */, %484)
}

def @func_2445() -> Tensor[(2, 6, 10), bool] {
  %485 = @func_2426() /* ty=Tensor[(2, 6, 10), float64] */;
  %486 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 6, 10), float64] */, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %487 = shape_of(%485, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%485, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%488, %489) /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_4549(%var_4546: Tensor[(12, 3, 13), float64]) -> (Tensor[(12, 3, 13), float64],) {
  %490 = cast(%var_4546, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %491 = sinh(%490) /* ty=Tensor[(12, 3, 13), float64] */;
  (%491,)
}

def @main(%var_6463: Tensor[(9, 3, 14), float32]) -> Tensor[(9, 3, 14), float64] {
  %492 = cast(%var_6463, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  %493 = asin(%492) /* ty=Tensor[(9, 3, 14), float32] */;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  %495 = cos(%494) /* ty=Tensor[(9, 3, 14), float64] */;
  %496 = cast(%495, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  tan(%496) /* ty=Tensor[(9, 3, 14), float64] */
}

def @func_2981() -> (Tensor[(2, 6, 10), bool],) {
  %497 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
  (%497,)
}

def @func_3966() -> (Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) {
  %498 = @func_3825() /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) */;
  %499 = cast(meta[relay.Constant][33] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %500 = cast(meta[relay.Constant][34] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
  %501 = cast(meta[relay.Constant][35] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %502 = reshape(%499, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float64] */;
  %503 = reshape(%500, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %504 = reshape(%501, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %505 = @func_1545(%502, %503, %504) /* ty=(Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) */;
  %506 = %498.1;
  %507 = %505.0;
  (%506, %507, meta[relay.Constant][33] /* ty=Tensor[(9), float64] */, meta[relay.Constant][34] /* ty=Tensor[(280), int64] */, meta[relay.Constant][35] /* ty=Tensor[(45), float64] */)
}

def @func_4736(%var_4704: Tensor[(336), float64], %var_4727: Tensor[(6, 3), int8], %var_4728: Tensor[(384), float32], %var_4729: Tensor[(280), int64]) -> (Tensor[(9), float64], Tensor[(2, 6, 10), bool], Tensor[(336), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], int64, Tensor[(6, 3), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(10, 11, 8), float64]) {
  %508 = cast(%var_4704, dtype="float64") /* ty=Tensor[(336), float64] */;
  %509 = reshape(%508, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %510 = @func_4394(%509) /* ty=(Tensor[(2, 6, 10), bool], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %513 = cast(%511, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %514 = reshape(%512, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
  %515 = reshape(%513, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
  %516 = @func_3020(%514, %515) /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool]) */;
  %517 = %516.0;
  %518 = cast(%517, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %519 = cast(%var_4727, dtype="int8") /* ty=Tensor[(6, 3), int8] */;
  %520 = cast(%var_4728, dtype="float32") /* ty=Tensor[(384), float32] */;
  %521 = cast(%var_4729, dtype="int64") /* ty=Tensor[(280), int64] */;
  %522 = reshape(%519, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), int8] */;
  %523 = reshape(%520, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %524 = reshape(%521, newshape=[140, 2]) /* ty=Tensor[(140, 2), int64] */;
  %525 = @func_599(%522, %523, %524) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) */;
  %526 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %527 = @func_4267() /* ty=Tensor[(9), float64] */;
  %528 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
  %529 = acosh(%518) /* ty=Tensor[(2, 6, 10), float64] */;
  %530 = %525.6;
  %531 = %526.0;
  (%527, %511, %var_4704, %528, %529, %530, %var_4727, %var_4728, %var_4729, %531)
}

def @func_3676(%var_3671: Tensor[(280), int64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) {
  %532 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %533 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %534 = cast(meta[relay.Constant][36] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %535 = cast(%var_3671, dtype="int64") /* ty=Tensor[(280), int64] */;
  %536 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %537 = reshape(%534, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float64] */;
  %538 = reshape(%535, newshape=[280]) /* ty=Tensor[(280), int64] */;
  %539 = reshape(%536, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
  %540 = @func_1545(%537, %538, %539) /* ty=(Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) */;
  %541 = %532.0;
  %542 = @func_3353() /* ty=Tensor[(2, 6, 10), bool] */;
  %543 = %533.0;
  %544 = %540.0;
  (%541, %542, %543, %544, meta[relay.Constant][36] /* ty=Tensor[(9), float64] */, %var_3671, meta[relay.Constant][37] /* ty=Tensor[(45), float64] */)
}

def @func_3069(%var_3054: Tensor[(5, 10, 14), uint8], %var_3055: Tensor[(5, 10, 14), uint8]) -> (Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) {
  %545 = cast(%var_3055, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %546 = shape_of(%var_3054, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%var_3054, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %549 = not_equal(%547, %548) /* ty=Tensor[(5, 10, 14), bool] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(5, 10, 14), float64] */;
  %551 = rsqrt(%550) /* ty=Tensor[(5, 10, 14), float64] */;
  %552 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  (%551, %552)
}

def @func_3825() -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) {
  %553 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  %554 = cast(%553, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %555 = @func_2981() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %556 = @func_3328() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */;
  %557 = log(%554) /* ty=Tensor[(2, 6, 10), float64] */;
  %558 = %555.0;
  %559 = %556.1;
  (%557, %558, %559)
}

def @func_5666() -> (Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) {
  %560 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 1, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 1, 1), float64] */;
  %561 = cast(meta[relay.Constant][39] /* ty=Tensor[(700), uint8] */, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %562 = cast(meta[relay.Constant][40] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %563 = reshape(%561, newshape=[700, 1]) /* ty=Tensor[(700, 1), uint8] */;
  %564 = reshape(%562, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
  %565 = @func_5555(%563, %564) /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], Tensor[(700, ?), float64], Tensor[(256, 2), float64]) */;
  %566 = cast(meta[relay.Constant][41] /* ty=Tensor[(234, 2), float64] */, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
  %567 = reshape(%566, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
  %568 = @func_4549(%567) /* ty=(Tensor[(12, 3, 13), float64],) */;
  %569 = sqrt(%560) /* ty=Tensor[(7, 1, 1), float64] */;
  %570 = %565.3;
  %571 = %568.0;
  (%569, %570, meta[relay.Constant][39] /* ty=Tensor[(700), uint8] */, meta[relay.Constant][40] /* ty=Tensor[(120), bool] */, %571, meta[relay.Constant][41] /* ty=Tensor[(234, 2), float64] */)
}

def @func_2581() -> (Tensor[(2, 6, 10), bool],) {
  %572 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  (%572,)
}

def @func_599(%var_552: Tensor[(3, 1, 6), int8], %var_566: Tensor[(24, 16), float32], %var_583: Tensor[(140, 2), int64]) -> (Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) {
  %573 = cast(%var_552, dtype="bool") /* ty=Tensor[(3, 1, 6), bool] */;
  %574 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 11, 6), int8] */, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %575 = cast(%var_566, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %576 = cast(%var_566, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %577 = reshape(%575, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %578 = reshape(%576, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %579 = @func_173(%577, %578) /* ty=(Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) */;
  %580 = cast(meta[relay.Constant][43] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %581 = cast(meta[relay.Constant][43] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %582 = reshape(%580, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %583 = reshape(%581, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %584 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %585 = cast(%var_583, dtype="int64") /* ty=Tensor[(140, 2), int64] */;
  %586 = reshape(%584, newshape=[]) /* ty=int64 */;
  %587 = reshape(%585, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %588 = @func_437(%586, %587) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */;
  %589 = @func_51(%582, %583) /* ty=Tensor[(2, 10, 10), bool] */;
  %590 = cast(%589, dtype="int64") /* ty=Tensor[(2, 10, 10), int64] */;
  %591 = cast(meta[relay.Constant][43] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %592 = reshape(%590, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %593 = reshape(%591, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %594 = equal(%573, %574) /* ty=Tensor[(3, 11, 6), bool] */;
  %595 = %579.1;
  %596 = %588.0;
  %597 = @func_51(%592, %593) /* ty=Tensor[(2, 10, 10), bool] */;
  (%594, %595, %var_566, %589, meta[relay.Constant][43] /* ty=Tensor[(200), int64] */, %596, 10 /* ty=int64 */, %var_583, %597)
}

def @func_2755() -> Tensor[(10, 11, 8), float64] {
  %598 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %598.0
}

def @func_5249() -> (Tensor[(2, 6, 10), bool],) {
  %599 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
  (%599,)
}

def @func_4812() -> Tensor[(2, 6, 10), bool] {
  %600 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %600.0
}

def @func_2856() -> (Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) {
  %601 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %602 = cast(meta[relay.Constant][44] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %603 = cast(meta[relay.Constant][44] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %604 = reshape(%602, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %605 = reshape(%603, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %606 = @func_173(%604, %605) /* ty=(Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) */;
  %607 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %609 = %601.0;
  %610 = %606.1;
  %611 = acos(%608) /* ty=Tensor[(2, 6, 10), float64] */;
  (%609, %610, meta[relay.Constant][44] /* ty=Tensor[(384), float32] */, %611)
}

def @func_4394(%var_4392: Tensor[(336), float64]) -> (Tensor[(2, 6, 10), bool], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) {
  %612 = @func_3052() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) */;
  %613 = cast(%var_4392, dtype="float64") /* ty=Tensor[(336), float64] */;
  %614 = cast(%var_4392, dtype="float64") /* ty=Tensor[(336), float64] */;
  %615 = reshape(%613, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %616 = reshape(%614, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %617 = @func_946(%615, %616) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
  %618 = %612.0;
  %619 = %617.3;
  (%618, %619, %var_4392)
}

def @func_3129(%var_3110: int16) -> (Tensor[(16, 2, 8), int16], Tensor[(2, 6, 10), bool]) {
  %620 = cast(%var_3110, dtype="int16") /* ty=int16 */;
  %621 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 2, 8), int16] */, dtype="int16") /* ty=Tensor[(16, 2, 8), int16] */;
  %622 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %623 = bitwise_and(%620, %621) /* ty=Tensor[(16, 2, 8), int16] */;
  %624 = %622.0;
  (%623, %624)
}

def @func_2499() -> Tensor[(2, 6, 10), bool] {
  @func_2445() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_3020(%var_2996: Tensor[(2, 6, 10), bool], %var_3010: Tensor[(2, 6, 10), bool]) -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool]) {
  %625 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  %626 = cast(%var_2996, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %627 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %628 = cast(%625, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %630 = cast(%var_3010, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %631 = shape_of(%var_2996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_2996, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %634 = power(%628, %629) /* ty=Tensor[(2, 6, 10), float64] */;
  %635 = greater_equal(%632, %633) /* ty=Tensor[(2, 6, 10), bool] */;
  (%634, %635)
}

def @func_173(%var_141: Tensor[(2, 12, 16), float32], %var_166: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) {
  %636 = cast(%var_141, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %637 = cos(%636) /* ty=Tensor[(2, 12, 16), float32] */;
  %638 = cast(%var_141, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = cast(%var_166, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
  %643 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%637, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %646 = equal(%640, %641) /* ty=Tensor[(2, 12, 16), bool] */;
  %647 = right_shift(%644, %645) /* ty=Tensor[(2, 12, 16), uint16] */;
  (%646, %647)
}

def @func_4189() -> (Tensor[(2, 6, 10), bool],) {
  %648 = @func_2445() /* ty=Tensor[(2, 6, 10), bool] */;
  (%648,)
}

def @func_437(%var_416: int64, %var_417: Tensor[(14, 4, 5), int64]) -> (Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) {
  %649 = cast(%var_416, dtype="int64") /* ty=int64 */;
  %650 = cast(%var_417, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %651 = cast(meta[relay.Constant][46] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %652 = cast(meta[relay.Constant][46] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %653 = reshape(%651, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %654 = reshape(%652, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %655 = maximum(%649, %650) /* ty=Tensor[(14, 4, 5), int64] */;
  %656 = @func_51(%653, %654) /* ty=Tensor[(2, 10, 10), bool] */;
  (%655, %656, meta[relay.Constant][46] /* ty=Tensor[(200), int64] */)
}

def @func_4004() -> (Tensor[(2, 6, 10), bool],) {
  %657 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
  (%657,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4527() -> Tensor[(10, 11, 8), float64] {
  %0 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %0.0
}

def @func_4736(%var_4704: Tensor[(336), float64], %var_4727: Tensor[(6, 3), int8], %var_4728: Tensor[(384), float32], %var_4729: Tensor[(280), int64]) -> (Tensor[(9), float64], Tensor[(2, 6, 10), bool], Tensor[(336), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], int64, Tensor[(6, 3), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(10, 11, 8), float64]) {
  %1 = cast(%var_4704, dtype="float64") /* ty=Tensor[(336), float64] */;
  %2 = reshape(%1, newshape=[336]) /* ty=Tensor[(336), float64] */;
  %3 = @func_4394(%2) /* ty=(Tensor[(2, 6, 10), bool], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) */;
  %4 = %3.0;
  %5 = cast(%4, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %6 = cast(%4, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %7 = reshape(%5, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
  %8 = reshape(%6, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
  %9 = @func_3020(%7, %8) /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool]) */;
  %10 = %9.0;
  %11 = cast(%10, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %12 = cast(%var_4727, dtype="int8") /* ty=Tensor[(6, 3), int8] */;
  %13 = cast(%var_4728, dtype="float32") /* ty=Tensor[(384), float32] */;
  %14 = cast(%var_4729, dtype="int64") /* ty=Tensor[(280), int64] */;
  %15 = reshape(%12, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), int8] */;
  %16 = reshape(%13, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %17 = reshape(%14, newshape=[140, 2]) /* ty=Tensor[(140, 2), int64] */;
  %18 = @func_599(%15, %16, %17) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) */;
  %19 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
  %20 = @func_4267() /* ty=Tensor[(9), float64] */;
  %21 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
  %22 = acosh(%11) /* ty=Tensor[(2, 6, 10), float64] */;
  %23 = %18.6;
  %24 = %19.0;
  (%20, %4, %var_4704, %21, %22, %23, %var_4727, %var_4728, %var_4729, %24)
}

def @func_1903(%var_1900: Tensor[(4, 4, 5), bool], %var_1901: Tensor[(4, 4, 5), bool], %var_1902: Tensor[(165), float64]) -> (Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) {
  %39 = fn (%var_1871: Tensor[(4, 4, 5), bool], %var_1872: Tensor[(4, 4, 5), bool], %var_1884: Tensor[(165), float64]) -> (Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) {
    %25 = cast(%var_1872, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
    %26 = shape_of(%var_1871, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%var_1871, dtype="bool") /* ty=Tensor[(4, 4, 5), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %29 = cast(%var_1884, dtype="float64") /* ty=Tensor[(165), float64] */;
    %30 = reshape(%29, newshape=[11, 1, 15]) /* ty=Tensor[(11, 1, 15), float64] */;
    %31 = @func_1782(%30) /* ty=(Tensor[(11, ?, 15), bool], Tensor[(11, ?, 15), int64]) */;
    %32 = %31.0;
    %33 = cast(%var_1884, dtype="float64") /* ty=Tensor[(165), float64] */;
    %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
    %35 = cast(%32, dtype="float64") /* ty=Tensor[(11, ?, 15), float64] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %37 = logical_or(%27, %28) /* ty=Tensor[(4, 4, 5), bool] */;
    %38 = multiply(%35, %36) /* ty=Tensor[(11, ?, 15), float64] */;
    (%37, %38)
  };
  %39(%var_1900, %var_1901, %var_1902) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) */
}

def @func_946(%var_885: Tensor[(6, 4, 14), float64], %var_934: Tensor[(6, 4, 14), float64]) -> (Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) {
  %40 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 20), int64] */, dtype="int64") /* ty=Tensor[(10, 20), int64] */;
  %41 = cast(meta[relay.Constant][0] /* ty=Tensor[(10, 20), int64] */, dtype="int64") /* ty=Tensor[(10, 20), int64] */;
  %42 = reshape(%40, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %43 = reshape(%41, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %44 = cast(%var_885, dtype="float64") /* ty=Tensor[(6, 4, 14), float64] */;
  %45 = sinh(%44) /* ty=Tensor[(6, 4, 14), float64] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(6, 4, 14), float64] */;
  %47 = atan(%46) /* ty=Tensor[(6, 4, 14), float64] */;
  %48 = cast(%45, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %52 = cast(%var_934, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %53 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %54 = cast(%47, dtype="bool") /* ty=Tensor[(6, 4, 14), bool] */;
  %55 = dyn.reshape(%52, %53, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %56 = @func_51(%42, %43) /* ty=Tensor[(2, 10, 10), bool] */;
  %57 = logical_and(%50, %51) /* ty=Tensor[(6, 4, 14), bool] */;
  %58 = less_equal(%54, %55) /* ty=Tensor[(6, 4, 14), bool] */;
  (%56, meta[relay.Constant][0] /* ty=Tensor[(10, 20), int64] */, %57, %58)
}

def @func_2669(%var_2668: Tensor[(13, 8, 10), float32]) -> Tensor[(13, 8, 10), float32] {
  %60 = fn (%var_2663: Tensor[(13, 8, 10), float32]) -> Tensor[(13, 8, 10), float32] {
    %59 = cast(%var_2663, dtype="float32") /* ty=Tensor[(13, 8, 10), float32] */;
    tan(%59) /* ty=Tensor[(13, 8, 10), float32] */
  };
  %60(%var_2668) /* ty=Tensor[(13, 8, 10), float32] */
}

def @func_3353() -> Tensor[(2, 6, 10), bool] {
  @func_2499() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_4267() -> Tensor[(9), float64] {
  %61 = @func_3966() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) */;
  %61.2
}

def @func_3246() -> Tensor[(2, 6, 10), float64] {
  %62 = @func_2856() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) */;
  %62.3
}

def @func_4181(%var_4178: Tensor[(12, 9, 9), float64], %var_4179: Tensor[(12, 9, 9), float64], %var_4180: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), uint32], Tensor[(5, 10, 14), float64], Tensor[(700), uint8], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  @func_4176(%var_4178, %var_4179, %var_4180) /* ty=(Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), uint32], Tensor[(5, 10, 14), float64], Tensor[(700), uint8], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) */
}

def @func_2500() -> Tensor[(2, 6, 10), bool] {
  %63 = fn () -> Tensor[(2, 6, 10), bool] {
    @func_2445() /* ty=Tensor[(2, 6, 10), bool] */
  };
  %63() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_3072(%var_3070: Tensor[(5, 10, 14), uint8], %var_3071: Tensor[(5, 10, 14), uint8]) -> (Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) {
  %72 = fn (%var_3054: Tensor[(5, 10, 14), uint8], %var_3055: Tensor[(5, 10, 14), uint8]) -> (Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) {
    %64 = cast(%var_3055, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
    %65 = shape_of(%var_3054, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%var_3054, dtype="bool") /* ty=Tensor[(5, 10, 14), bool] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %68 = not_equal(%66, %67) /* ty=Tensor[(5, 10, 14), bool] */;
    %69 = cast(%68, dtype="float64") /* ty=Tensor[(5, 10, 14), float64] */;
    %70 = rsqrt(%69) /* ty=Tensor[(5, 10, 14), float64] */;
    %71 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
    (%70, %71)
  };
  %72(%var_3070, %var_3071) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */
}

def @func_5555(%var_5471: Tensor[(700, 1), uint8], %var_5499: Tensor[(2, 6, 10), bool]) -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], Tensor[(700, ?), float64], Tensor[(256, 2), float64]) {
  %73 = @func_4624() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(2, 6, 10), bool]) */;
  %74 = @func_4418() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %75 = %74.0;
  %76 = cast(%var_5499, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %80 = minimum(%78, %79) /* ty=Tensor[(2, 6, 10), float32] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %82 = cast(%var_5471, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %83 = cast(%var_5471, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %84 = reshape(%82, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %85 = reshape(%83, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %86 = @func_3069(%84, %85) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %87 = %86.0;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(5, 10, 14), float32] */;
  %89 = shape_of(%var_5471, dtype="int32") /* ty=Tensor[(2), int32] */;
  %90 = cast(%var_5471, dtype="float32") /* ty=Tensor[(700, 1), float32] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %92 = minimum(%90, %91) /* ty=Tensor[(700, ?), float32] */;
  %93 = cast(%var_5471, dtype="float64") /* ty=Tensor[(700, 1), float64] */;
  %94 = shape_of(%92, dtype="int32") /* ty=Tensor[(2), int32] */;
  %95 = cast(%92, dtype="float64") /* ty=Tensor[(700, ?), float64] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %97 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %98 = %73.1;
  %99 = atan(%81) /* ty=Tensor[(2, 6, 10), float64] */;
  %100 = maximum(%95, %96) /* ty=Tensor[(700, ?), float64] */;
  %101 = %97.1;
  (%98, %99, %100, %101)
}

def @func_3024(%var_3022: Tensor[(2, 6, 10), bool], %var_3023: Tensor[(2, 6, 10), bool]) -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool]) {
  @func_3020(%var_3022, %var_3023) /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool]) */
}

def @func_4549(%var_4546: Tensor[(12, 3, 13), float64]) -> (Tensor[(12, 3, 13), float64],) {
  %102 = cast(%var_4546, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %103 = sinh(%102) /* ty=Tensor[(12, 3, 13), float64] */;
  (%103,)
}

def @func_1784(%var_1783: Tensor[(11, 1, 15), float64]) -> (Tensor[(11, ?, 15), bool], Tensor[(11, ?, 15), int64]) {
  %120 = fn (%var_1755: Tensor[(11, 1, 15), float64]) -> (Tensor[(11, ?, 15), bool], Tensor[(11, ?, 15), int64]) {
    %104 = cast(%var_1755, dtype="float64") /* ty=Tensor[(11, 1, 15), float64] */;
    %105 = sin(%104) /* ty=Tensor[(11, 1, 15), float64] */;
    %106 = cast(%var_1755, dtype="float64") /* ty=Tensor[(11, 1, 15), float64] */;
    %107 = exp(%106) /* ty=Tensor[(11, 1, 15), float64] */;
    %108 = cast(%107, dtype="float32") /* ty=Tensor[(11, 1, 15), float32] */;
    %109 = sinh(%108) /* ty=Tensor[(11, 1, 15), float32] */;
    %110 = cast(%109, dtype="bool") /* ty=Tensor[(11, 1, 15), bool] */;
    %111 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%105, dtype="bool") /* ty=Tensor[(11, 1, 15), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = cast(%var_1755, dtype="int64") /* ty=Tensor[(11, 1, 15), int64] */;
    %115 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
    %116 = cast(%107, dtype="int64") /* ty=Tensor[(11, 1, 15), int64] */;
    %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %118 = greater_equal(%112, %113) /* ty=Tensor[(11, ?, 15), bool] */;
    %119 = minimum(%116, %117) /* ty=Tensor[(11, ?, 15), int64] */;
    (%118, %119)
  };
  %120(%var_1783) /* ty=(Tensor[(11, ?, 15), bool], Tensor[(11, ?, 15), int64]) */
}

def @func_3967() -> (Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) {
  %131 = fn () -> (Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) {
    %121 = @func_3825() /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) */;
    %122 = cast(meta[relay.Constant][1] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
    %123 = cast(meta[relay.Constant][2] /* ty=Tensor[(280), int64] */, dtype="int64") /* ty=Tensor[(280), int64] */;
    %124 = cast(meta[relay.Constant][3] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %125 = reshape(%122, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float64] */;
    %126 = reshape(%123, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %127 = reshape(%124, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
    %128 = @func_1545(%125, %126, %127) /* ty=(Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) */;
    %129 = %121.1;
    %130 = %128.0;
    (%129, %130, meta[relay.Constant][1] /* ty=Tensor[(9), float64] */, meta[relay.Constant][2] /* ty=Tensor[(280), int64] */, meta[relay.Constant][3] /* ty=Tensor[(45), float64] */)
  };
  %131() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) */
}

def @func_950(%var_948: Tensor[(6, 4, 14), float64], %var_949: Tensor[(6, 4, 14), float64]) -> (Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) {
  @func_946(%var_948, %var_949) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */
}

def @func_5859(%var_5839: float32, %var_5840: Tensor[(1, 6, 4), float32]) -> (Tensor[(1, 6, 4), float32], Tensor[(2, 6, 10), float64]) {
  %132 = cast(%var_5839, dtype="float32") /* ty=float32 */;
  %133 = cast(%var_5840, dtype="float32") /* ty=Tensor[(1, 6, 4), float32] */;
  %134 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
  %135 = floor_divide(%132, %133) /* ty=Tensor[(1, 6, 4), float32] */;
  %136 = %134.2;
  (%135, %136)
}

def @func_3827() -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) {
  @func_3825() /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) */
}

def @func_4396(%var_4395: Tensor[(336), float64]) -> (Tensor[(2, 6, 10), bool], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) {
  %145 = fn (%var_4392: Tensor[(336), float64]) -> (Tensor[(2, 6, 10), bool], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) {
    %137 = @func_3052() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) */;
    %138 = cast(%var_4392, dtype="float64") /* ty=Tensor[(336), float64] */;
    %139 = cast(%var_4392, dtype="float64") /* ty=Tensor[(336), float64] */;
    %140 = reshape(%138, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
    %141 = reshape(%139, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
    %142 = @func_946(%140, %141) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
    %143 = %137.0;
    %144 = %142.3;
    (%143, %144, %var_4392)
  };
  %145(%var_4395) /* ty=(Tensor[(2, 6, 10), bool], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) */
}

def @func_4659(%var_4657: Tensor[(13, 15, 14), float32], %var_4658: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  %151 = fn (%var_4642: Tensor[(13, 15, 14), float32], %var_4643: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
    %146 = cast(%var_4643, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
    %147 = shape_of(%var_4642, dtype="int32") /* ty=Tensor[(3), int32] */;
    %148 = cast(%var_4642, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
    %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %150 = floor_mod(%148, %149) /* ty=Tensor[(13, 15, 14), float32] */;
    (%150,)
  };
  %151(%var_4657, %var_4658) /* ty=(Tensor[(13, 15, 14), float32],) */
}

def @func_4794() -> (Tensor[(2, 6, 10), float64], Tensor[(9), float64]) {
  %154 = fn () -> (Tensor[(2, 6, 10), float64], Tensor[(9), float64]) {
    %152 = @func_3246() /* ty=Tensor[(2, 6, 10), float64] */;
    %153 = @func_4267() /* ty=Tensor[(9), float64] */;
    (%152, %153)
  };
  %154() /* ty=(Tensor[(2, 6, 10), float64], Tensor[(9), float64]) */
}

def @func_4418() -> (Tensor[(2, 6, 10), bool],) {
  %155 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  (%155,)
}

def @func_5667() -> (Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) {
  %168 = fn () -> (Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) {
    %156 = cast(meta[relay.Constant][4] /* ty=Tensor[(7, 1, 1), float64] */, dtype="float64") /* ty=Tensor[(7, 1, 1), float64] */;
    %157 = cast(meta[relay.Constant][5] /* ty=Tensor[(700), uint8] */, dtype="uint8") /* ty=Tensor[(700), uint8] */;
    %158 = cast(meta[relay.Constant][6] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %159 = reshape(%157, newshape=[700, 1]) /* ty=Tensor[(700, 1), uint8] */;
    %160 = reshape(%158, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
    %161 = @func_5555(%159, %160) /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], Tensor[(700, ?), float64], Tensor[(256, 2), float64]) */;
    %162 = cast(meta[relay.Constant][7] /* ty=Tensor[(234, 2), float64] */, dtype="float64") /* ty=Tensor[(234, 2), float64] */;
    %163 = reshape(%162, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
    %164 = @func_4549(%163) /* ty=(Tensor[(12, 3, 13), float64],) */;
    %165 = sqrt(%156) /* ty=Tensor[(7, 1, 1), float64] */;
    %166 = %161.3;
    %167 = %164.0;
    (%165, %166, meta[relay.Constant][5] /* ty=Tensor[(700), uint8] */, meta[relay.Constant][6] /* ty=Tensor[(120), bool] */, %167, meta[relay.Constant][7] /* ty=Tensor[(234, 2), float64] */)
  };
  %168() /* ty=(Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) */
}

def @func_5439(%var_5437: Tensor[(10, 11, 8), float64]) -> (Tensor[(2, 6, 10), float64], Tensor[(10, 11, 8), int8]) {
  @func_5436(%var_5437) /* ty=(Tensor[(2, 6, 10), float64], Tensor[(10, 11, 8), int8]) */
}

def @func_3053() -> (Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) {
  %174 = fn () -> (Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) {
    %169 = cast(meta[relay.Constant][8] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %170 = reshape(%169, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float64] */;
    %171 = @func_1956(%170) /* ty=(Tensor[(12, 9, 13), float64],) */;
    %172 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
    %173 = %171.0;
    (%172, %173, meta[relay.Constant][8] /* ty=Tensor[(1404), float64] */)
  };
  %174() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) */
}

def @func_2342(%var_2335: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), int64],) {
  %175 = cast(meta[relay.Constant][9] /* ty=Tensor[(15, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(15, 5, 9), float64] */;
  %176 = acosh(%175) /* ty=Tensor[(15, 5, 9), float64] */;
  %177 = cast(%var_2335, dtype="int64") /* ty=Tensor[(15, 5, 9), int64] */;
  %178 = shape_of(%176, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%176, dtype="int64") /* ty=Tensor[(15, 5, 9), int64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %181 = left_shift(%179, %180) /* ty=Tensor[(15, 5, 9), int64] */;
  (%181,)
}

def @func_4208() -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64]) {
  %182 = @func_2652() /* ty=Tensor[(2, 6, 10), bool] */;
  %183 = @func_2426() /* ty=Tensor[(2, 6, 10), float64] */;
  (%182, %183)
}

def @func_4210() -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64]) {
  @func_4208() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64]) */
}

def @func_4814() -> Tensor[(2, 6, 10), bool] {
  @func_4812() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_2465() -> Tensor[(2, 6, 10), bool] {
  %184 = fn () -> Tensor[(2, 6, 10), bool] {
    @func_2445() /* ty=Tensor[(2, 6, 10), bool] */
  };
  %184() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_2446() -> Tensor[(2, 6, 10), bool] {
  %190 = fn () -> Tensor[(2, 6, 10), bool] {
    %185 = @func_2426() /* ty=Tensor[(2, 6, 10), float64] */;
    %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 6, 10), float64] */, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
    %187 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
    %188 = cast(%185, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
    %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%188, %189) /* ty=Tensor[(2, 6, 10), bool] */
  };
  %190() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_5436(%var_5418: Tensor[(10, 11, 8), float64]) -> (Tensor[(2, 6, 10), float64], Tensor[(10, 11, 8), int8]) {
  %191 = @func_5266() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */;
  %192 = %191.0;
  %193 = cast(%var_5418, dtype="int8") /* ty=Tensor[(10, 11, 8), int8] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%192, dtype="int8") /* ty=Tensor[(10, 11, 8), int8] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %197 = @func_2426() /* ty=Tensor[(2, 6, 10), float64] */;
  %198 = right_shift(%195, %196) /* ty=Tensor[(10, 11, 8), int8] */;
  (%197, %198)
}

def @func_5267() -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) {
  %203 = fn () -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) {
    %199 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %200 = @func_4189() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %201 = %199.0;
    %202 = %200.0;
    (%201, %202)
  };
  %203() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */
}

def @func_3782() -> (Tensor[(2, 6, 10), bool],) {
  @func_3780() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_6009(%var_6007: Tensor[(256, 2), float64], %var_6008: Tensor[(700), uint8]) -> (Tensor[(256, 2), uint64], Tensor[(5, 10, 14), float64], Tensor[(700), uint8]) {
  %217 = fn (%var_5994: Tensor[(256, 2), float64], %var_6003: Tensor[(700), uint8]) -> (Tensor[(256, 2), uint64], Tensor[(5, 10, 14), float64], Tensor[(700), uint8]) {
    %204 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
    %205 = %204.1;
    %206 = cast(%var_5994, dtype="uint64") /* ty=Tensor[(256, 2), uint64] */;
    %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(2), int32] */;
    %208 = cast(%205, dtype="uint64") /* ty=Tensor[(256, 2), uint64] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %210 = cast(%var_6003, dtype="uint8") /* ty=Tensor[(700), uint8] */;
    %211 = cast(%var_6003, dtype="uint8") /* ty=Tensor[(700), uint8] */;
    %212 = reshape(%210, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
    %213 = reshape(%211, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
    %214 = @func_3069(%212, %213) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
    %215 = add(%208, %209) /* ty=Tensor[(256, 2), uint64] */;
    %216 = %214.0;
    (%215, %216, %var_6003)
  };
  %217(%var_6007, %var_6008) /* ty=(Tensor[(256, 2), uint64], Tensor[(5, 10, 14), float64], Tensor[(700), uint8]) */
}

def @func_4420() -> (Tensor[(2, 6, 10), bool],) {
  @func_4418() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_5677() -> (Tensor[(2, 6, 10), bool],) {
  @func_5675() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_2391(%var_2390: Tensor[(3, 1, 6), uint64]) -> Tensor[(3, 11, 6), bool] {
  %223 = fn (%var_2374: Tensor[(3, 1, 6), uint64]) -> Tensor[(3, 11, 6), bool] {
    %218 = cast(%var_2374, dtype="uint64") /* ty=Tensor[(3, 1, 6), uint64] */;
    %219 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 11, 6), uint64] */, dtype="uint64") /* ty=Tensor[(3, 11, 6), uint64] */;
    %220 = left_shift(%218, %219) /* ty=Tensor[(3, 11, 6), uint64] */;
    %221 = cast(%220, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
    %222 = cast(%var_2374, dtype="bool") /* ty=Tensor[(3, 1, 6), bool] */;
    greater_equal(%221, %222) /* ty=Tensor[(3, 11, 6), bool] */
  };
  %223(%var_2390) /* ty=Tensor[(3, 11, 6), bool] */
}

def @func_6452(%var_6443: Tensor[(7, 15, 1), float32], %var_6444: Tensor[(7, 15, 1), float32]) -> (Tensor[(7, 15, ?), float32], Tensor[(2, 6, 10), bool]) {
  %224 = cast(%var_6444, dtype="float32") /* ty=Tensor[(7, 15, 1), float32] */;
  %225 = shape_of(%var_6443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%var_6443, dtype="float32") /* ty=Tensor[(7, 15, 1), float32] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %228 = @func_5266() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */;
  %229 = divide(%226, %227) /* ty=Tensor[(7, 15, ?), float32] */;
  %230 = %228.1;
  (%229, %230)
}

def @func_5170(%var_5168: Tensor[(5, 6, 13), float32], %var_5169: Tensor[(5, 6, 13), float32]) -> (Tensor[(5, 6, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(5, 6, 13), float32]) {
  @func_5166(%var_5168, %var_5169) /* ty=(Tensor[(5, 6, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(5, 6, 13), float32]) */
}

def @func_3368() -> Tensor[(1, 5, 1), float64] {
  %231 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 5, 1), float64] */, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  log(%231) /* ty=Tensor[(1, 5, 1), float64] */
}

def @func_4742(%var_4738: Tensor[(336), float64], %var_4739: Tensor[(6, 3), int8], %var_4740: Tensor[(384), float32], %var_4741: Tensor[(280), int64]) -> (Tensor[(9), float64], Tensor[(2, 6, 10), bool], Tensor[(336), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], int64, Tensor[(6, 3), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(10, 11, 8), float64]) {
  @func_4736(%var_4738, %var_4739, %var_4740, %var_4741) /* ty=(Tensor[(9), float64], Tensor[(2, 6, 10), bool], Tensor[(336), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], int64, Tensor[(6, 3), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(10, 11, 8), float64]) */
}

def @func_3370() -> Tensor[(1, 5, 1), float64] {
  @func_3368() /* ty=Tensor[(1, 5, 1), float64] */
}

def @func_1545(%var_1495: Tensor[(1, 3, 3), float64], %var_1521: Tensor[(280), int64], %var_1540: Tensor[(5, 3, 3), float64]) -> (Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) {
  %232 = cast(%var_1495, dtype="float64") /* ty=Tensor[(1, 3, 3), float64] */;
  %233 = log(%232) /* ty=Tensor[(1, 3, 3), float64] */;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(1, 3, 3), float32] */;
  %235 = cast(meta[relay.Constant][13] /* ty=Tensor[(18), int8] */, dtype="int8") /* ty=Tensor[(18), int8] */;
  %236 = cast(meta[relay.Constant][14] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %237 = cast(%var_1521, dtype="int64") /* ty=Tensor[(280), int64] */;
  %238 = reshape(%235, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), int8] */;
  %239 = reshape(%236, newshape=[24, 16]) /* ty=Tensor[(24, 16), float32] */;
  %240 = reshape(%237, newshape=[140, 2]) /* ty=Tensor[(140, 2), int64] */;
  %241 = @func_599(%238, %239, %240) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) */;
  %242 = cast(meta[relay.Constant][15] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %243 = cast(meta[relay.Constant][15] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %244 = reshape(%242, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %245 = reshape(%243, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
  %246 = @func_946(%244, %245) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
  %247 = cast(%233, dtype="int8") /* ty=Tensor[(1, 3, 3), int8] */;
  %248 = cast(%var_1540, dtype="int8") /* ty=Tensor[(5, 3, 3), int8] */;
  %249 = exp(%234) /* ty=Tensor[(1, 3, 3), float32] */;
  %250 = %241.1;
  %251 = %246.0;
  %252 = add(%247, %248) /* ty=Tensor[(5, 3, 3), int8] */;
  (%249, %250, meta[relay.Constant][13] /* ty=Tensor[(18), int8] */, meta[relay.Constant][14] /* ty=Tensor[(384), float32] */, %var_1521, %251, meta[relay.Constant][15] /* ty=Tensor[(336), float64] */, %252)
}

def @func_6129() -> Tensor[(12, 3, 13), float64] {
  %253 = @func_5666() /* ty=(Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) */;
  %253.4
}

def @func_3095() -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) {
  %256 = fn () -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) {
    %254 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
    %255 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
    (%254, %255)
  };
  %256() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) */
}

def @func_3825() -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) {
  %257 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  %258 = cast(%257, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %259 = @func_2981() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %260 = @func_3328() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */;
  %261 = log(%258) /* ty=Tensor[(2, 6, 10), float64] */;
  %262 = %259.0;
  %263 = %260.1;
  (%261, %262, %263)
}

def @func_4190() -> (Tensor[(2, 6, 10), bool],) {
  %265 = fn () -> (Tensor[(2, 6, 10), bool],) {
    %264 = @func_2445() /* ty=Tensor[(2, 6, 10), bool] */;
    (%264,)
  };
  %265() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_3131(%var_3130: int16) -> (Tensor[(16, 2, 8), int16], Tensor[(2, 6, 10), bool]) {
  %271 = fn (%var_3110: int16) -> (Tensor[(16, 2, 8), int16], Tensor[(2, 6, 10), bool]) {
    %266 = cast(%var_3110, dtype="int16") /* ty=int16 */;
    %267 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 2, 8), int16] */, dtype="int16") /* ty=Tensor[(16, 2, 8), int16] */;
    %268 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %269 = bitwise_and(%266, %267) /* ty=Tensor[(16, 2, 8), int16] */;
    %270 = %268.0;
    (%269, %270)
  };
  %271(%var_3130) /* ty=(Tensor[(16, 2, 8), int16], Tensor[(2, 6, 10), bool]) */
}

def @func_3456(%var_3452: Tensor[(4, 5, 11), float64], %var_3453: Tensor[(165), float64], %var_3454: Tensor[(10, 5, 7), float64], %var_3455: Tensor[(700, 1), uint8]) -> (Tensor[(4, 5, 11), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 5, 7), int8], Tensor[(2, 6, 10), bool], Tensor[(4, 5, 11), int16], Tensor[(2, 6, 10), bool], Tensor[(700, 1), uint8]) {
  @func_3450(%var_3452, %var_3453, %var_3454, %var_3455) /* ty=(Tensor[(4, 5, 11), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 5, 7), int8], Tensor[(2, 6, 10), bool], Tensor[(4, 5, 11), int16], Tensor[(2, 6, 10), bool], Tensor[(700, 1), uint8]) */
}

def @func_4626() -> (Tensor[(12, 9, 13), float64], Tensor[(2, 6, 10), bool]) {
  @func_4624() /* ty=(Tensor[(12, 9, 13), float64], Tensor[(2, 6, 10), bool]) */
}

def @func_441(%var_439: int64, %var_440: Tensor[(14, 4, 5), int64]) -> (Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) {
  @func_437(%var_439, %var_440) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */
}

def @func_3355() -> Tensor[(2, 6, 10), bool] {
  @func_3353() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_2345(%var_2343: Tensor[(15, 5, 9), float64]) -> (Tensor[(15, 5, 9), int64],) {
  @func_2342(%var_2343) /* ty=(Tensor[(15, 5, 9), int64],) */
}

def @func_5797() -> (Tensor[(234, 2), float64],) {
  %274 = fn () -> (Tensor[(234, 2), float64],) {
    %272 = @func_5666() /* ty=(Tensor[(7, 1, 1), float64], Tensor[(256, 2), float64], Tensor[(700), uint8], Tensor[(120), bool], Tensor[(12, 3, 13), float64], Tensor[(234, 2), float64]) */;
    %273 = %272.5;
    (%273,)
  };
  %274() /* ty=(Tensor[(234, 2), float64],) */
}

def @func_2830(%var_2827: int32, %var_2828: Tensor[(9, 13, 10), int32], %var_2829: Tensor[(18), uint64]) -> (Tensor[(9, 13, 10), int32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(9, 13, 10), bool], Tensor[(3, 11, 6), bool], Tensor[(18), uint64]) {
  %294 = fn (%var_2788: int32, %var_2789: Tensor[(9, 13, 10), int32], %var_2822: Tensor[(18), uint64]) -> (Tensor[(9, 13, 10), int32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(9, 13, 10), bool], Tensor[(3, 11, 6), bool], Tensor[(18), uint64]) {
    %275 = cast(%var_2788, dtype="int32") /* ty=int32 */;
    %276 = cast(%var_2789, dtype="int32") /* ty=Tensor[(9, 13, 10), int32] */;
    %277 = cast(meta[relay.Constant][17] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %278 = cast(meta[relay.Constant][17] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
    %279 = reshape(%277, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
    %280 = reshape(%278, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
    %281 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 13, 10), int32] */, dtype="int64") /* ty=Tensor[(9, 13, 10), int64] */;
    %282 = shape_of(%var_2789, dtype="int32") /* ty=Tensor[(3), int32] */;
    %283 = cast(%var_2789, dtype="int64") /* ty=Tensor[(9, 13, 10), int64] */;
    %284 = dyn.reshape(%281, %282, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %285 = maximum(%283, %284) /* ty=Tensor[(9, 13, 10), int64] */;
    %286 = cast(%var_2788, dtype="bool") /* ty=bool */;
    %287 = cast(%285, dtype="bool") /* ty=Tensor[(9, 13, 10), bool] */;
    %288 = cast(%var_2822, dtype="uint64") /* ty=Tensor[(18), uint64] */;
    %289 = reshape(%288, newshape=[3, 1, 6]) /* ty=Tensor[(3, 1, 6), uint64] */;
    %290 = subtract(%275, %276) /* ty=Tensor[(9, 13, 10), int32] */;
    %291 = @func_51(%279, %280) /* ty=Tensor[(2, 10, 10), bool] */;
    %292 = not_equal(%286, %287) /* ty=Tensor[(9, 13, 10), bool] */;
    %293 = @func_2389(%289) /* ty=Tensor[(3, 11, 6), bool] */;
    (%290, %291, meta[relay.Constant][17] /* ty=Tensor[(200), int64] */, %292, %293, %var_2822)
  };
  %294(%var_2827, %var_2828, %var_2829) /* ty=(Tensor[(9, 13, 10), int32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(9, 13, 10), bool], Tensor[(3, 11, 6), bool], Tensor[(18), uint64]) */
}

def @func_2756() -> Tensor[(10, 11, 8), float64] {
  %296 = fn () -> Tensor[(10, 11, 8), float64] {
    %295 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %295.0
  };
  %296() /* ty=Tensor[(10, 11, 8), float64] */
}

def @func_4624() -> (Tensor[(12, 9, 13), float64], Tensor[(2, 6, 10), bool]) {
  %297 = @func_3052() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(12, 9, 13), float64], Tensor[(1404), float64]) */;
  %298 = %297.1;
  %299 = @func_2652() /* ty=Tensor[(2, 6, 10), bool] */;
  (%298, %299)
}

def @func_4951(%var_4933: Tensor[(13, 14, 13), float32]) -> Tensor[(13, 14, 13), bool] {
  %300 = cast(%var_4933, dtype="float32") /* ty=Tensor[(13, 14, 13), float32] */;
  %301 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(13, 14, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(meta[relay.Constant][19] /* ty=Tensor[(13, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 14, 13), float32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %304 = power(%302, %303) /* ty=Tensor[(13, 14, 13), float32] */;
  %305 = cast(%304, dtype="bool") /* ty=Tensor[(13, 14, 13), bool] */;
  %306 = shape_of(%var_4933, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%var_4933, dtype="bool") /* ty=Tensor[(13, 14, 13), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%307, %308) /* ty=Tensor[(13, 14, 13), bool] */
}

def @func_3248() -> Tensor[(2, 6, 10), float64] {
  @func_3246() /* ty=Tensor[(2, 6, 10), float64] */
}

def @func_4552(%var_4550: Tensor[(12, 3, 13), float64]) -> (Tensor[(12, 3, 13), float64],) {
  @func_4549(%var_4550) /* ty=(Tensor[(12, 3, 13), float64],) */
}

def @func_5166(%var_5131: Tensor[(5, 6, 13), float32], %var_5132: Tensor[(5, 6, 13), float32]) -> (Tensor[(5, 6, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(5, 6, 13), float32]) {
  %309 = cast(%var_5132, dtype="float64") /* ty=Tensor[(5, 6, 13), float64] */;
  %310 = cast(%var_5132, dtype="bool") /* ty=Tensor[(5, 6, 13), bool] */;
  %311 = shape_of(%var_5131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%var_5131, dtype="bool") /* ty=Tensor[(5, 6, 13), bool] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %314 = less(%312, %313) /* ty=Tensor[(5, 6, 13), bool] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %316 = cosh(%315) /* ty=Tensor[(5, 6, 13), float32] */;
  %317 = cast(%316, dtype="float32") /* ty=Tensor[(5, 6, 13), float32] */;
  %318 = atanh(%309) /* ty=Tensor[(5, 6, 13), float64] */;
  %319 = @func_2755() /* ty=Tensor[(10, 11, 8), float64] */;
  %320 = log(%317) /* ty=Tensor[(5, 6, 13), float32] */;
  (%318, %319, %320)
}

def @func_599(%var_552: Tensor[(3, 1, 6), int8], %var_566: Tensor[(24, 16), float32], %var_583: Tensor[(140, 2), int64]) -> (Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) {
  %321 = cast(%var_552, dtype="bool") /* ty=Tensor[(3, 1, 6), bool] */;
  %322 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 11, 6), int8] */, dtype="bool") /* ty=Tensor[(3, 11, 6), bool] */;
  %323 = cast(%var_566, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %324 = cast(%var_566, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %325 = reshape(%323, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %326 = reshape(%324, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
  %327 = @func_173(%325, %326) /* ty=(Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) */;
  %328 = cast(meta[relay.Constant][21] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %329 = cast(meta[relay.Constant][21] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %330 = reshape(%328, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %331 = reshape(%329, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %332 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %333 = cast(%var_583, dtype="int64") /* ty=Tensor[(140, 2), int64] */;
  %334 = reshape(%332, newshape=[]) /* ty=int64 */;
  %335 = reshape(%333, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
  %336 = @func_437(%334, %335) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */;
  %337 = @func_51(%330, %331) /* ty=Tensor[(2, 10, 10), bool] */;
  %338 = cast(%337, dtype="int64") /* ty=Tensor[(2, 10, 10), int64] */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %340 = reshape(%338, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %341 = reshape(%339, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %342 = equal(%321, %322) /* ty=Tensor[(3, 11, 6), bool] */;
  %343 = %327.1;
  %344 = %336.0;
  %345 = @func_51(%340, %341) /* ty=Tensor[(2, 10, 10), bool] */;
  (%342, %343, %var_566, %337, meta[relay.Constant][21] /* ty=Tensor[(200), int64] */, %344, 10 /* ty=int64 */, %var_583, %345)
}

def @func_2857() -> (Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) {
  %357 = fn () -> (Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) {
    %346 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %347 = cast(meta[relay.Constant][22] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %348 = cast(meta[relay.Constant][22] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %349 = reshape(%347, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
    %350 = reshape(%348, newshape=[2, 12, 16]) /* ty=Tensor[(2, 12, 16), float32] */;
    %351 = @func_173(%349, %350) /* ty=(Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) */;
    %352 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
    %353 = cast(%352, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
    %354 = %346.0;
    %355 = %351.1;
    %356 = acos(%353) /* ty=Tensor[(2, 6, 10), float64] */;
    (%354, %355, meta[relay.Constant][22] /* ty=Tensor[(384), float32] */, %356)
  };
  %357() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) */
}

def @func_5318() -> (Tensor[(9), float64], Tensor[(120), bool], Tensor[(336), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float64]) {
  %368 = fn () -> (Tensor[(9), float64], Tensor[(120), bool], Tensor[(336), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float64]) {
    %358 = cast(meta[relay.Constant][23] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %359 = cast(meta[relay.Constant][24] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %360 = reshape(%358, newshape=[2, 6, 10]) /* ty=Tensor[(2, 6, 10), bool] */;
    %361 = reshape(%359, newshape=[336]) /* ty=Tensor[(336), float64] */;
    %362 = @func_2959(%360, %361) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), int8], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) */;
    %363 = %362.1;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %365 = @func_4267() /* ty=Tensor[(9), float64] */;
    %366 = tan(%364) /* ty=Tensor[(2, 6, 10), float32] */;
    %367 = @func_3246() /* ty=Tensor[(2, 6, 10), float64] */;
    (%365, meta[relay.Constant][23] /* ty=Tensor[(120), bool] */, meta[relay.Constant][24] /* ty=Tensor[(336), float64] */, %366, %367)
  };
  %368() /* ty=(Tensor[(9), float64], Tensor[(120), bool], Tensor[(336), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float64]) */
}

def @func_1956(%var_1953: Tensor[(12, 9, 13), float64]) -> (Tensor[(12, 9, 13), float64],) {
  %369 = cast(%var_1953, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
  %370 = erf(%369) /* ty=Tensor[(12, 9, 13), float64] */;
  (%370,)
}

def @func_2638() -> (Tensor[(10, 11, 8), float64],) {
  @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */
}

def @func_3678(%var_3677: Tensor[(280), int64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) {
  %384 = fn (%var_3671: Tensor[(280), int64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) {
    %371 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %372 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %373 = cast(meta[relay.Constant][25] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
    %374 = cast(%var_3671, dtype="int64") /* ty=Tensor[(280), int64] */;
    %375 = cast(meta[relay.Constant][26] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %376 = reshape(%373, newshape=[1, 3, 3]) /* ty=Tensor[(1, 3, 3), float64] */;
    %377 = reshape(%374, newshape=[280]) /* ty=Tensor[(280), int64] */;
    %378 = reshape(%375, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), float64] */;
    %379 = @func_1545(%376, %377, %378) /* ty=(Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) */;
    %380 = %371.0;
    %381 = @func_3353() /* ty=Tensor[(2, 6, 10), bool] */;
    %382 = %372.0;
    %383 = %379.0;
    (%380, %381, %382, %383, meta[relay.Constant][25] /* ty=Tensor[(9), float64] */, %var_3671, meta[relay.Constant][26] /* ty=Tensor[(45), float64] */)
  };
  %384(%var_3677) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool], Tensor[(1, 3, 3), float32], Tensor[(9), float64], Tensor[(280), int64], Tensor[(45), float64]) */
}

def @func_2962(%var_2960: Tensor[(2, 6, 10), bool], %var_2961: Tensor[(336), float64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), int8], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) {
  %406 = fn (%var_2920: Tensor[(2, 6, 10), bool], %var_2946: Tensor[(336), float64]) -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), int8], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) {
    %385 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %386 = cast(%var_2920, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %387 = sinh(%386) /* ty=Tensor[(2, 6, 10), float32] */;
    %388 = @func_2445() /* ty=Tensor[(2, 6, 10), bool] */;
    %389 = cast(%var_2920, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
    %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
    %391 = cast(%388, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
    %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %393 = right_shift(%391, %392) /* ty=Tensor[(2, 6, 10), int64] */;
    %394 = cast(%393, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
    %395 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %396 = cast(%387, dtype="int8") /* ty=Tensor[(2, 6, 10), int8] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %398 = cast(%var_2946, dtype="float64") /* ty=Tensor[(336), float64] */;
    %399 = cast(%var_2946, dtype="float64") /* ty=Tensor[(336), float64] */;
    %400 = reshape(%398, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
    %401 = reshape(%399, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
    %402 = @func_946(%400, %401) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
    %403 = %385.0;
    %404 = subtract(%396, %397) /* ty=Tensor[(2, 6, 10), int8] */;
    %405 = %402.2;
    (%403, %404, %405, %var_2946)
  };
  %406(%var_2960, %var_2961) /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), int8], Tensor[(6, 4, 14), bool], Tensor[(336), float64]) */
}

def @func_2428() -> Tensor[(2, 6, 10), float64] {
  @func_2426() /* ty=Tensor[(2, 6, 10), float64] */
}

def @func_5228() -> (Tensor[(2, 6, 10), float64],) {
  %409 = fn () -> (Tensor[(2, 6, 10), float64],) {
    %407 = @func_4208() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64]) */;
    %408 = %407.1;
    (%408,)
  };
  %409() /* ty=(Tensor[(2, 6, 10), float64],) */
}

def @func_55(%var_53: Tensor[(2, 10, 10), int64], %var_54: Tensor[(2, 10, 10), int64]) -> Tensor[(2, 10, 10), bool] {
  @func_51(%var_53, %var_54) /* ty=Tensor[(2, 10, 10), bool] */
}

def @func_6342() -> (Tensor[(234, 2), float64], Tensor[(2, 6, 10), bool]) {
  %410 = @func_5796() /* ty=(Tensor[(234, 2), float64],) */;
  %411 = @func_2981() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %412 = %410.0;
  %413 = %411.0;
  (%412, %413)
}

def @func_2426() -> Tensor[(2, 6, 10), float64] {
  %414 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 6, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  sqrt(%414) /* ty=Tensor[(2, 6, 10), float64] */
}

def @func_176(%var_174: Tensor[(2, 12, 16), float32], %var_175: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) {
  %427 = fn (%var_141: Tensor[(2, 12, 16), float32], %var_166: Tensor[(2, 12, 16), float32]) -> (Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) {
    %415 = cast(%var_141, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
    %416 = cos(%415) /* ty=Tensor[(2, 12, 16), float32] */;
    %417 = cast(%var_141, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
    %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %419 = cast(%416, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
    %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %421 = cast(%var_166, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
    %422 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %423 = cast(%416, dtype="uint16") /* ty=Tensor[(2, 12, 16), uint16] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %425 = equal(%419, %420) /* ty=Tensor[(2, 12, 16), bool] */;
    %426 = right_shift(%423, %424) /* ty=Tensor[(2, 12, 16), uint16] */;
    (%425, %426)
  };
  %427(%var_174, %var_175) /* ty=(Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), uint16]) */
}

def @func_3450(%var_3399: Tensor[(4, 5, 11), float64], %var_3411: Tensor[(165), float64], %var_3413: Tensor[(10, 5, 7), float64], %var_3442: Tensor[(700, 1), uint8]) -> (Tensor[(4, 5, 11), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 5, 7), int8], Tensor[(2, 6, 10), bool], Tensor[(4, 5, 11), int16], Tensor[(2, 6, 10), bool], Tensor[(700, 1), uint8]) {
  %428 = @func_3368() /* ty=Tensor[(1, 5, 1), float64] */;
  %429 = cast(%428, dtype="bool") /* ty=Tensor[(1, 5, 1), bool] */;
  %430 = cast(%var_3399, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %431 = cast(meta[relay.Constant][28] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %432 = cast(meta[relay.Constant][28] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
  %433 = cast(%var_3411, dtype="float64") /* ty=Tensor[(165), float64] */;
  %434 = reshape(%431, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
  %435 = reshape(%432, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
  %436 = reshape(%433, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %437 = @func_1899(%434, %435, %436) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) */;
  %438 = cast(%428, dtype="int8") /* ty=Tensor[(1, 5, 1), int8] */;
  %439 = cast(%var_3413, dtype="int8") /* ty=Tensor[(10, 5, 7), int8] */;
  %440 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 5, 11), float64] */, dtype="int16") /* ty=Tensor[(4, 5, 11), int16] */;
  %441 = shape_of(%var_3399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_3399, dtype="int16") /* ty=Tensor[(4, 5, 11), int16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %444 = cast(%var_3442, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %445 = cast(%var_3442, dtype="uint8") /* ty=Tensor[(700, 1), uint8] */;
  %446 = reshape(%444, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %447 = reshape(%445, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %448 = @func_3069(%446, %447) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %449 = logical_and(%429, %430) /* ty=Tensor[(4, 5, 11), bool] */;
  %450 = %437.1;
  %451 = left_shift(%438, %439) /* ty=Tensor[(10, 5, 7), int8] */;
  %452 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
  %453 = bitwise_and(%442, %443) /* ty=Tensor[(4, 5, 11), int16] */;
  %454 = %448.1;
  (%449, %450, meta[relay.Constant][28] /* ty=Tensor[(80), bool] */, %var_3411, %451, %452, %453, %454, %var_3442)
}

def @func_4006() -> (Tensor[(2, 6, 10), bool],) {
  @func_4004() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_2636() -> (Tensor[(10, 11, 8), float64],) {
  %455 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 11, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
  %456 = acosh(%455) /* ty=Tensor[(10, 11, 8), float32] */;
  %457 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 11, 8), float32] */, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %459 = cast(%456, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %461 = power(%459, %460) /* ty=Tensor[(10, 11, 8), float64] */;
  (%461,)
}

def @func_4529() -> Tensor[(10, 11, 8), float64] {
  @func_4527() /* ty=Tensor[(10, 11, 8), float64] */
}

def @func_2982() -> (Tensor[(2, 6, 10), bool],) {
  %463 = fn () -> (Tensor[(2, 6, 10), bool],) {
    %462 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
    (%462,)
  };
  %463() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_3558(%var_3554: Tensor[(2, 6, 10), bool], %var_3555: Tensor[(1, 200), int64], %var_3556: int64, %var_3557: Tensor[(280), int64]) -> (Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], Tensor[(1, 200), int64], Tensor[(15, 5, 9), int64], Tensor[(675), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], int64, Tensor[(280), int64]) {
  %499 = fn (%var_3469: Tensor[(2, 6, 10), bool], %var_3502: Tensor[(1, 200), int64], %var_3549: int64, %var_3550: Tensor[(280), int64]) -> (Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], Tensor[(1, 200), int64], Tensor[(15, 5, 9), int64], Tensor[(675), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], int64, Tensor[(280), int64]) {
    %464 = @func_3032() /* ty=Tensor[(2, 6, 10), bool] */;
    %465 = cast(%var_3469, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
    %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%464, dtype="int64") /* ty=Tensor[(2, 6, 10), int64] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %469 = bitwise_or(%467, %468) /* ty=Tensor[(2, 6, 10), int64] */;
    %470 = cast(%469, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %471 = atanh(%470) /* ty=Tensor[(2, 6, 10), float32] */;
    %472 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %473 = shape_of(%471, dtype="int32") /* ty=Tensor[(3), int32] */;
    %474 = cast(%471, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %476 = cast(%464, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %477 = shape_of(%var_3469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %478 = cast(%var_3469, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %479 = dyn.reshape(%476, %477, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %480 = cast(%var_3502, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
    %481 = cast(%var_3502, dtype="int64") /* ty=Tensor[(1, 200), int64] */;
    %482 = reshape(%480, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
    %483 = reshape(%481, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
    %484 = cast(meta[relay.Constant][32] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
    %485 = reshape(%484, newshape=[15, 5, 9]) /* ty=Tensor[(15, 5, 9), float64] */;
    %486 = @func_2342(%485) /* ty=(Tensor[(15, 5, 9), int64],) */;
    %487 = cast(%471, dtype="float32") /* ty=Tensor[(2, 6, 10), float32] */;
    %488 = cast(%var_3549, dtype="int64") /* ty=int64 */;
    %489 = cast(%var_3550, dtype="int64") /* ty=Tensor[(280), int64] */;
    %490 = reshape(%488, newshape=[]) /* ty=int64 */;
    %491 = reshape(%489, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
    %492 = @func_437(%490, %491) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */;
    %493 = divide(%474, %475) /* ty=Tensor[(2, 6, 10), float32] */;
    %494 = floor_divide(%478, %479) /* ty=Tensor[(2, 6, 10), float32] */;
    %495 = @func_51(%482, %483) /* ty=Tensor[(2, 10, 10), bool] */;
    %496 = %486.0;
    %497 = asin(%487) /* ty=Tensor[(2, 6, 10), float32] */;
    %498 = %492.1;
    (%493, %494, %495, %var_3502, %496, meta[relay.Constant][32] /* ty=Tensor[(675), float64] */, %497, %498, %var_3549, %var_3550)
  };
  %499(%var_3554, %var_3555, %var_3556, %var_3557) /* ty=(Tensor[(2, 6, 10), float32], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], Tensor[(1, 200), int64], Tensor[(15, 5, 9), int64], Tensor[(675), float64], Tensor[(2, 6, 10), float32], Tensor[(2, 10, 10), bool], int64, Tensor[(280), int64]) */
}

def @func_4004() -> (Tensor[(2, 6, 10), bool],) {
  %500 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
  (%500,)
}

def @func_4954(%var_4952: Tensor[(13, 14, 13), float32]) -> Tensor[(13, 14, 13), bool] {
  @func_4951(%var_4952) /* ty=Tensor[(13, 14, 13), bool] */
}

def @func_2582() -> (Tensor[(2, 6, 10), bool],) {
  %502 = fn () -> (Tensor[(2, 6, 10), bool],) {
    %501 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
    (%501,)
  };
  %502() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_4812() -> Tensor[(2, 6, 10), bool] {
  %503 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
  %503.0
}

def @func_6456(%var_6454: Tensor[(7, 15, 1), float32], %var_6455: Tensor[(7, 15, 1), float32]) -> (Tensor[(7, 15, ?), float32], Tensor[(2, 6, 10), bool]) {
  @func_6452(%var_6454, %var_6455) /* ty=(Tensor[(7, 15, ?), float32], Tensor[(2, 6, 10), bool]) */
}

def @func_5250() -> (Tensor[(2, 6, 10), bool],) {
  %505 = fn () -> (Tensor[(2, 6, 10), bool],) {
    %504 = @func_2499() /* ty=Tensor[(2, 6, 10), bool] */;
    (%504,)
  };
  %505() /* ty=(Tensor[(2, 6, 10), bool],) */
}

def @func_6131() -> Tensor[(12, 3, 13), float64] {
  @func_6129() /* ty=Tensor[(12, 3, 13), float64] */
}

def @func_1959(%var_1957: Tensor[(12, 9, 13), float64]) -> (Tensor[(12, 9, 13), float64],) {
  @func_1956(%var_1957) /* ty=(Tensor[(12, 9, 13), float64],) */
}

def @func_5087() -> (Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) {
  @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */
}

def @func_4176(%var_4093: Tensor[(12, 9, 9), float64], %var_4099: Tensor[(12, 9, 9), float64], %var_4106: Tensor[(12, 9, 9), float64]) -> (Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), bool], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), uint32], Tensor[(5, 10, 14), float64], Tensor[(700), uint8], Tensor[(12, 9, 9), float32], Tensor[(12, 9, 9), float64], Tensor[(12, 9, 9), float64]) {
  %506 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %507 = shape_of(%var_4093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %508 = cast(%var_4093, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %510 = cast(%var_4099, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %511 = shape_of(%var_4093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%var_4093, dtype="bool") /* ty=Tensor[(12, 9, 9), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = cast(%var_4106, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %515 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(12, 9, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 9, 9), float64] */, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %518 = cast(meta[relay.Constant][34] /* ty=Tensor[(12, 9, 9), float64] */, dtype="uint32") /* ty=Tensor[(12, 9, 9), uint32] */;
  %519 = shape_of(%var_4093, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_4093, dtype="uint32") /* ty=Tensor[(12, 9, 9), uint32] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %522 = cast(meta[relay.Constant][35] /* ty=Tensor[(700), uint8] */, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %523 = cast(meta[relay.Constant][35] /* ty=Tensor[(700), uint8] */, dtype="uint8") /* ty=Tensor[(700), uint8] */;
  %524 = reshape(%522, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %525 = reshape(%523, newshape=[5, 10, 14]) /* ty=Tensor[(5, 10, 14), uint8] */;
  %526 = @func_3069(%524, %525) /* ty=(Tensor[(5, 10, 14), float64], Tensor[(2, 6, 10), bool]) */;
  %527 = cast(%var_4093, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %528 = sinh(%527) /* ty=Tensor[(12, 9, 9), float32] */;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %530 = atanh(%529) /* ty=Tensor[(12, 9, 9), float32] */;
  %531 = cast(%530, dtype="float32") /* ty=Tensor[(12, 9, 9), float32] */;
  %532 = cast(%530, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %533 = cast(%528, dtype="float64") /* ty=Tensor[(12, 9, 9), float64] */;
  %534 = divide(%508, %509) /* ty=Tensor[(12, 9, 9), float64] */;
  %535 = greater(%512, %513) /* ty=Tensor[(12, 9, 9), bool] */;
  %536 = power(%516, %517) /* ty=Tensor[(12, 9, 9), float32] */;
  %537 = bitwise_and(%520, %521) /* ty=Tensor[(12, 9, 9), uint32] */;
  %538 = %526.0;
  %539 = asin(%531) /* ty=Tensor[(12, 9, 9), float32] */;
  %540 = exp(%532) /* ty=Tensor[(12, 9, 9), float64] */;
  %541 = sin(%533) /* ty=Tensor[(12, 9, 9), float64] */;
  (%534, %535, %536, %537, %538, meta[relay.Constant][35] /* ty=Tensor[(700), uint8] */, %539, %540, %541)
}

def @func_2652() -> Tensor[(2, 6, 10), bool] {
  @func_2464() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_5863(%var_5861: float32, %var_5862: Tensor[(1, 6, 4), float32]) -> (Tensor[(1, 6, 4), float32], Tensor[(2, 6, 10), float64]) {
  @func_5859(%var_5861, %var_5862) /* ty=(Tensor[(1, 6, 4), float32], Tensor[(2, 6, 10), float64]) */
}

def @func_6344() -> (Tensor[(234, 2), float64], Tensor[(2, 6, 10), bool]) {
  @func_6342() /* ty=(Tensor[(234, 2), float64], Tensor[(2, 6, 10), bool]) */
}

def @func_5675() -> (Tensor[(2, 6, 10), bool],) {
  %542 = @func_3094() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), bool]) */;
  %543 = %542.0;
  (%543,)
}

def @func_4269() -> Tensor[(9), float64] {
  @func_4267() /* ty=Tensor[(9), float64] */
}

def @func_6422(%var_6420: Tensor[(10, 11, 8), float64], %var_6421: Tensor[(10, 11, 8), float64]) -> (Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 11, 8), float32]) {
  %573 = fn (%var_6369: Tensor[(10, 11, 8), float64], %var_6377: Tensor[(10, 11, 8), float64]) -> (Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 11, 8), float32]) {
    %544 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %545 = %544.0;
    %546 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 11, 8), float64] */, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
    %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
    %548 = cast(%545, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
    %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %550 = cast(%var_6369, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
    %551 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(10, 11, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 11, 8), float64] */, dtype="uint32") /* ty=Tensor[(10, 11, 8), uint32] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %554 = cast(%var_6377, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %555 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(10, 11, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 11, 8), float64] */, dtype="bool") /* ty=Tensor[(10, 11, 8), bool] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %558 = cast(meta[relay.Constant][37] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
    %559 = cast(meta[relay.Constant][37] /* ty=Tensor[(80), bool] */, dtype="bool") /* ty=Tensor[(80), bool] */;
    %560 = cast(meta[relay.Constant][38] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
    %561 = reshape(%558, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
    %562 = reshape(%559, newshape=[4, 4, 5]) /* ty=Tensor[(4, 4, 5), bool] */;
    %563 = reshape(%560, newshape=[165]) /* ty=Tensor[(165), float64] */;
    %564 = @func_1899(%561, %562, %563) /* ty=(Tensor[(4, 4, 5), bool], Tensor[(11, ?, 15), float64]) */;
    %565 = cast(%545, dtype="float64") /* ty=Tensor[(10, 11, 8), float64] */;
    %566 = rsqrt(%565) /* ty=Tensor[(10, 11, 8), float64] */;
    %567 = cast(%566, dtype="float32") /* ty=Tensor[(10, 11, 8), float32] */;
    %568 = subtract(%548, %549) /* ty=Tensor[(10, 11, 8), uint32] */;
    %569 = left_shift(%552, %553) /* ty=Tensor[(10, 11, 8), uint32] */;
    %570 = logical_or(%556, %557) /* ty=Tensor[(10, 11, 8), bool] */;
    %571 = %564.1;
    %572 = sigmoid(%567) /* ty=Tensor[(10, 11, 8), float32] */;
    (%568, %569, %570, %571, meta[relay.Constant][37] /* ty=Tensor[(80), bool] */, meta[relay.Constant][38] /* ty=Tensor[(165), float64] */, %572)
  };
  %573(%var_6420, %var_6421) /* ty=(Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), uint32], Tensor[(10, 11, 8), bool], Tensor[(11, ?, 15), float64], Tensor[(80), bool], Tensor[(165), float64], Tensor[(10, 11, 8), float32]) */
}

def @func_604(%var_601: Tensor[(3, 1, 6), int8], %var_602: Tensor[(24, 16), float32], %var_603: Tensor[(140, 2), int64]) -> (Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) {
  @func_599(%var_601, %var_602, %var_603) /* ty=(Tensor[(3, 11, 6), bool], Tensor[(2, 12, 16), uint16], Tensor[(24, 16), float32], Tensor[(2, 10, 10), bool], Tensor[(200), int64], Tensor[(14, 4, 5), int64], int64, Tensor[(140, 2), int64], Tensor[(2, 10, 10), bool]) */
}

def @func_437(%var_416: int64, %var_417: Tensor[(14, 4, 5), int64]) -> (Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) {
  %574 = cast(%var_416, dtype="int64") /* ty=int64 */;
  %575 = cast(%var_417, dtype="int64") /* ty=Tensor[(14, 4, 5), int64] */;
  %576 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %577 = cast(meta[relay.Constant][39] /* ty=Tensor[(200), int64] */, dtype="int64") /* ty=Tensor[(200), int64] */;
  %578 = reshape(%576, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %579 = reshape(%577, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), int64] */;
  %580 = maximum(%574, %575) /* ty=Tensor[(14, 4, 5), int64] */;
  %581 = @func_51(%578, %579) /* ty=Tensor[(2, 10, 10), bool] */;
  (%580, %581, meta[relay.Constant][39] /* ty=Tensor[(200), int64] */)
}

def @func_1644(%var_1641: Tensor[(9, 7, 14), float32], %var_1642: Tensor[(336), float64], %var_1643: Tensor[(6, 4, 14), bool]) -> (Tensor[(9, 7, 14), float32], Tensor[(336), float64], Tensor[(6, 4, 14), float32], Tensor[(14, 4, 5), int64], int64, Tensor[(5, 56), int64]) {
  %602 = fn (%var_1594: Tensor[(9, 7, 14), float32], %var_1612: Tensor[(336), float64], %var_1618: Tensor[(6, 4, 14), bool]) -> (Tensor[(9, 7, 14), float32], Tensor[(336), float64], Tensor[(6, 4, 14), float32], Tensor[(14, 4, 5), int64], int64, Tensor[(5, 56), int64]) {
    %582 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 7, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 7, 14), float32] */;
    %583 = cast(%var_1594, dtype="float32") /* ty=Tensor[(9, 7, 14), float32] */;
    %584 = cast(%var_1612, dtype="float64") /* ty=Tensor[(336), float64] */;
    %585 = cast(%var_1612, dtype="float64") /* ty=Tensor[(336), float64] */;
    %586 = reshape(%584, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
    %587 = reshape(%585, newshape=[6, 4, 14]) /* ty=Tensor[(6, 4, 14), float64] */;
    %588 = @func_946(%586, %587) /* ty=(Tensor[(2, 10, 10), bool], Tensor[(10, 20), int64], Tensor[(6, 4, 14), bool], Tensor[(6, 4, 14), bool]) */;
    %589 = %588.3;
    %590 = cast(%var_1618, dtype="float32") /* ty=Tensor[(6, 4, 14), float32] */;
    %591 = shape_of(%589, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(%589, dtype="float32") /* ty=Tensor[(6, 4, 14), float32] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %594 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %595 = cast(meta[relay.Constant][41] /* ty=Tensor[(5, 56), int64] */, dtype="int64") /* ty=Tensor[(5, 56), int64] */;
    %596 = reshape(%594, newshape=[]) /* ty=int64 */;
    %597 = reshape(%595, newshape=[14, 4, 5]) /* ty=Tensor[(14, 4, 5), int64] */;
    %598 = @func_437(%596, %597) /* ty=(Tensor[(14, 4, 5), int64], Tensor[(2, 10, 10), bool], Tensor[(200), int64]) */;
    %599 = divide(%582, %583) /* ty=Tensor[(9, 7, 14), float32] */;
    %600 = power(%592, %593) /* ty=Tensor[(6, 4, 14), float32] */;
    %601 = %598.0;
    (%599, %var_1612, %600, %601, -6 /* ty=int64 */, meta[relay.Constant][41] /* ty=Tensor[(5, 56), int64] */)
  };
  %602(%var_1641, %var_1642, %var_1643) /* ty=(Tensor[(9, 7, 14), float32], Tensor[(336), float64], Tensor[(6, 4, 14), float32], Tensor[(14, 4, 5), int64], int64, Tensor[(5, 56), int64]) */
}

def @func_3020(%var_2996: Tensor[(2, 6, 10), bool], %var_3010: Tensor[(2, 6, 10), bool]) -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), bool]) {
  %603 = @func_2464() /* ty=Tensor[(2, 6, 10), bool] */;
  %604 = cast(%var_2996, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %605 = shape_of(%603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %606 = cast(%603, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %608 = cast(%var_3010, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %609 = shape_of(%var_2996, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%var_2996, dtype="bool") /* ty=Tensor[(2, 6, 10), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = power(%606, %607) /* ty=Tensor[(2, 6, 10), float64] */;
  %613 = greater_equal(%610, %611) /* ty=Tensor[(2, 6, 10), bool] */;
  (%612, %613)
}

def @main(%var_6463: Tensor[(9, 3, 14), float32]) -> Tensor[(9, 3, 14), float64] {
  %614 = cast(%var_6463, dtype="float32") /* ty=Tensor[(9, 3, 14), float32] */;
  %615 = asin(%614) /* ty=Tensor[(9, 3, 14), float32] */;
  %616 = cast(%615, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  %617 = cos(%616) /* ty=Tensor[(9, 3, 14), float64] */;
  %618 = cast(%617, dtype="float64") /* ty=Tensor[(9, 3, 14), float64] */;
  tan(%618) /* ty=Tensor[(9, 3, 14), float64] */
}

def @func_5919() -> (Tensor[(2, 6, 10), bool], Tensor[(9, 156), float64], Tensor[(9, 156), bool]) {
  %634 = fn () -> (Tensor[(2, 6, 10), bool], Tensor[(9, 156), float64], Tensor[(9, 156), bool]) {
    %619 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %620 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 156), float64] */, dtype="float64") /* ty=Tensor[(9, 156), float64] */;
    %621 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 156), float64] */, dtype="float64") /* ty=Tensor[(9, 156), float64] */;
    %622 = reshape(%621, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), float64] */;
    %623 = @func_1956(%622) /* ty=(Tensor[(12, 9, 13), float64],) */;
    %624 = %623.0;
    %625 = cast(%624, dtype="float64") /* ty=Tensor[(12, 9, 13), float64] */;
    %626 = rsqrt(%625) /* ty=Tensor[(12, 9, 13), float64] */;
    %627 = cast(%626, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
    %628 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(9, 156), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %629 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 156), float64] */, dtype="bool") /* ty=Tensor[(9, 156), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %631 = %619.0;
    %632 = log2(%620) /* ty=Tensor[(9, 156), float64] */;
    %633 = equal(%629, %630) /* ty=Tensor[(9, 156), bool] */;
    (%631, %632, %633)
  };
  %634() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(9, 156), float64], Tensor[(9, 156), bool]) */
}

def @func_2654() -> Tensor[(2, 6, 10), bool] {
  @func_2652() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_5750() -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), float64], Tensor[(12, 3, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(468), bool]) {
  %649 = fn () -> (Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), float64], Tensor[(12, 3, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(468), bool]) {
    %635 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
    %636 = @func_5085() /* ty=(Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) */;
    %637 = cast(meta[relay.Constant][43] /* ty=Tensor[(468), float64] */, dtype="float64") /* ty=Tensor[(468), float64] */;
    %638 = reshape(%637, newshape=[12, 3, 13]) /* ty=Tensor[(12, 3, 13), float64] */;
    %639 = @func_4549(%638) /* ty=(Tensor[(12, 3, 13), float64],) */;
    %640 = cast(meta[relay.Constant][44] /* ty=Tensor[(468), float64] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %641 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(468), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %642 = cast(meta[relay.Constant][43] /* ty=Tensor[(468), float64] */, dtype="bool") /* ty=Tensor[(468), bool] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?), bool] */;
    %644 = %635.2;
    %645 = %636.2;
    %646 = %639.0;
    %647 = @func_2755() /* ty=Tensor[(10, 11, 8), float64] */;
    %648 = less_equal(%642, %643) /* ty=Tensor[(468), bool] */;
    (%644, %645, %646, %647, %648)
  };
  %649() /* ty=(Tensor[(2, 6, 10), float64], Tensor[(2, 6, 10), float64], Tensor[(12, 3, 13), float64], Tensor[(10, 11, 8), float64], Tensor[(468), bool]) */
}

def @func_4921() -> (Tensor[(2, 6, 10), bool], Tensor[(16, 2, 8), int16], int16) {
  %656 = fn () -> (Tensor[(2, 6, 10), bool], Tensor[(16, 2, 8), int16], int16) {
    %650 = @func_4189() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %651 = cast(meta[relay.Constant][45] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %652 = reshape(%651, newshape=[]) /* ty=int16 */;
    %653 = @func_3129(%652) /* ty=(Tensor[(16, 2, 8), int16], Tensor[(2, 6, 10), bool]) */;
    %654 = %650.0;
    %655 = %653.0;
    (%654, %655, meta[relay.Constant][45] /* ty=int16 */)
  };
  %656() /* ty=(Tensor[(2, 6, 10), bool], Tensor[(16, 2, 8), int16], int16) */
}

def @func_3997(%var_3995: Tensor[(4, 16, 8), float64], %var_3996: Tensor[(4, 16, 8), float64]) -> Tensor[(4, 16, 8), bool] {
  %661 = fn (%var_3982: Tensor[(4, 16, 8), float64], %var_3983: Tensor[(4, 16, 8), float64]) -> Tensor[(4, 16, 8), bool] {
    %657 = cast(%var_3983, dtype="bool") /* ty=Tensor[(4, 16, 8), bool] */;
    %658 = shape_of(%var_3982, dtype="int32") /* ty=Tensor[(3), int32] */;
    %659 = cast(%var_3982, dtype="bool") /* ty=Tensor[(4, 16, 8), bool] */;
    %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%659, %660) /* ty=Tensor[(4, 16, 8), bool] */
  };
  %661(%var_3995, %var_3996) /* ty=Tensor[(4, 16, 8), bool] */
}

def @func_5559(%var_5557: Tensor[(700, 1), uint8], %var_5558: Tensor[(2, 6, 10), bool]) -> (Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], Tensor[(700, ?), float64], Tensor[(256, 2), float64]) {
  @func_5555(%var_5557, %var_5558) /* ty=(Tensor[(2, 6, 10), bool], Tensor[(2, 6, 10), float64], Tensor[(700, ?), float64], Tensor[(256, 2), float64]) */
}

def @func_3329() -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) {
  %666 = fn () -> (Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) {
    %662 = @func_2636() /* ty=(Tensor[(10, 11, 8), float64],) */;
    %663 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %664 = %662.0;
    %665 = %663.0;
    (%664, %665)
  };
  %666() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 6, 10), bool]) */
}

def @func_3033() -> Tensor[(2, 6, 10), bool] {
  %668 = fn () -> Tensor[(2, 6, 10), bool] {
    %667 = @func_2581() /* ty=(Tensor[(2, 6, 10), bool],) */;
    %667.0
  };
  %668() /* ty=Tensor[(2, 6, 10), bool] */
}

def @func_51(%var_6: Tensor[(2, 10, 10), int64], %var_7: Tensor[(2, 10, 10), int64]) -> Tensor[(2, 10, 10), bool] {
  %669 = cast(%var_6, dtype="float64") /* ty=Tensor[(2, 10, 10), float64] */;
  %670 = acosh(%669) /* ty=Tensor[(2, 10, 10), float64] */;
  %671 = cast(%var_7, dtype="int64") /* ty=Tensor[(2, 10, 10), int64] */;
  %672 = shape_of(%var_6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%var_6, dtype="int64") /* ty=Tensor[(2, 10, 10), int64] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %675 = right_shift(%673, %674) /* ty=Tensor[(2, 10, 10), int64] */;
  %676 = cast(%675, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %677 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%670, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%678, %679) /* ty=Tensor[(2, 10, 10), bool] */
}

def @func_5085() -> (Tensor[(4, 16, 8), bool], Tensor[(256, 2), float64], Tensor[(2, 6, 10), float64]) {
  %680 = cast(meta[relay.Constant][46] /* ty=Tensor[(256, 2), float64] */, dtype="float64") /* ty=Tensor[(256, 2), float64] */;
  %681 = cast(meta[relay.Constant][46] /* ty=Tensor[(256, 2), float64] */, dtype="float64") /* ty=Tensor[(256, 2), float64] */;
  %682 = reshape(%680, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %683 = reshape(%681, newshape=[4, 16, 8]) /* ty=Tensor[(4, 16, 8), float64] */;
  %684 = @func_2856() /* ty=(Tensor[(10, 11, 8), float64], Tensor[(2, 12, 16), uint16], Tensor[(384), float32], Tensor[(2, 6, 10), float64]) */;
  %685 = %684.3;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %687 = sin(%686) /* ty=Tensor[(2, 6, 10), float64] */;
  %688 = cast(%685, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%687, dtype="float64") /* ty=Tensor[(2, 6, 10), float64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %692 = @func_3994(%682, %683) /* ty=Tensor[(4, 16, 8), bool] */;
  %693 = add(%690, %691) /* ty=Tensor[(2, 6, 10), float64] */;
  (%692, meta[relay.Constant][46] /* ty=Tensor[(256, 2), float64] */, %693)
}

def @func_3780() -> (Tensor[(2, 6, 10), bool],) {
  %694 = @func_2445() /* ty=Tensor[(2, 6, 10), bool] */;
  (%694,)
}

def @func_1550(%var_1547: Tensor[(1, 3, 3), float64], %var_1548: Tensor[(280), int64], %var_1549: Tensor[(5, 3, 3), float64]) -> (Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) {
  @func_1545(%var_1547, %var_1548, %var_1549) /* ty=(Tensor[(1, 3, 3), float32], Tensor[(2, 12, 16), uint16], Tensor[(18), int8], Tensor[(384), float32], Tensor[(280), int64], Tensor[(2, 10, 10), bool], Tensor[(336), float64], Tensor[(5, 3, 3), int8]) */
}

def @func_4037(%var_4035: float32, %var_4036: Tensor[(3, 11, 10), float32]) -> (Tensor[(3, 11, 10), float32],) {
  %698 = fn (%var_4025: float32, %var_4026: Tensor[(3, 11, 10), float32]) -> (Tensor[(3, 11, 10), float32],) {
    %695 = cast(%var_4025, dtype="float32") /* ty=float32 */;
    %696 = cast(%var_4026, dtype="float32") /* ty=Tensor[(3, 11, 10), float32] */;
    %697 = power(%695, %696) /* ty=Tensor[(3, 11, 10), float32] */;
    (%697,)
  };
  %698(%var_4035, %var_4036) /* ty=(Tensor[(3, 11, 10), float32],) */
}

def @func_4070() -> Tensor[(2, 6, 10), bool] {
  %699 = fn () -> Tensor[(2, 6, 10), bool] {
    @func_3353() /* ty=Tensor[(2, 6, 10), bool] */
  };
  %699() /* ty=Tensor[(2, 6, 10), bool] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen35/build/output.py:1667: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen35/build/output.py", line 1672, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(378) tvmgen_default_fused_asin_cast_cos_tan_kernel0(double* __restrict__ T_tan, float* __restrict__ placeholder) {
  T_tan[(((int)threadIdx.x))] = tan(cos(((double)asinf(placeholder[(((int)threadIdx.x))]))));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

