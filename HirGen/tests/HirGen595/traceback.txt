==========mod==========
#[version = "0.0.5"]
def @func_388() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %0 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %2 = %0.1;
  (%1, %2)
}

def @func_1403() -> Tensor[(4, 15, 7), bool] {
  %3 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %3.1
}

def @func_12921() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %4 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %5 = %4.0;
  %6 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %7 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  (%5, %6, %7)
}

def @func_7268() -> (Tensor[(14, 1, 1), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
  %9 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
  %10 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %11 = sinh(%8) /* ty=Tensor[(14, 1, 1), float32] */;
  %12 = %9.0;
  %13 = %10.1;
  (%11, %12, %13)
}

def @func_11500(%var_11495: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  %14 = cast(%var_11495, dtype="float32") /* ty=Tensor[(768), float32] */;
  %15 = cast(%var_11495, dtype="float32") /* ty=Tensor[(768), float32] */;
  %16 = reshape(%14, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %17 = reshape(%15, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %18 = @func_369(%16, %17) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %19 = @func_10984() /* ty=Tensor[(4, 15, 7), bool] */;
  %20 = %18.0;
  (%19, %20, %var_11495)
}

def @func_12052() -> Tensor[(4, 15, 7), bool] {
  %21 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %21.0
}

def @func_9093() -> (Tensor[(4, 15, 7), bool],) {
  %22 = @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %23 = %22.0;
  (%23,)
}

def @func_7397() -> Tensor[(768), float32] {
  %24 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
  %24.0
}

def @func_8145() -> (Tensor[(4, 15, 7), bool],) {
  %25 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  (%25,)
}

def @func_11269() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %26 = @func_8866() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %27 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %28 = %26.0;
  %29 = %27.1;
  (%28, %29)
}

def @func_9485() -> Tensor[(768), float32] {
  %30 = @func_5905() /* ty=(Tensor[(768), float32],) */;
  %30.0
}

def @func_1058(%var_1053: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) {
  %31 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %32 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %33 = %32.0;
  %34 = cast(%var_1053, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %35 = shape_of(%33, dtype="int32") /* ty=Tensor[(3), int32] */;
  %36 = cast(%33, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %37 = dyn.reshape(%34, %35, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %38 = %31.0;
  %39 = minimum(%36, %37) /* ty=Tensor[(4, 15, 7), uint64] */;
  (%38, %39)
}

def @func_12405(%var_12397: Tensor[(15, 14, 1), int8], %var_12398: Tensor[(15, 14, 9), int8]) -> Tensor[(15, 14, 9), int8] {
  %40 = cast(%var_12397, dtype="int8") /* ty=Tensor[(15, 14, 1), int8] */;
  %41 = cast(%var_12398, dtype="int8") /* ty=Tensor[(15, 14, 9), int8] */;
  bitwise_and(%40, %41) /* ty=Tensor[(15, 14, 9), int8] */
}

def @func_12619(%var_12612: Tensor[(4, 1, 8), bool]) -> (Tensor[(4, 6, 8), bool],) {
  %42 = cast(%var_12612, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(4, 6, 8), bool] */, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %44 = logical_or(%42, %43) /* ty=Tensor[(4, 6, 8), bool] */;
  (%44,)
}

def @func_6020(%var_6004: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), float64],) {
  %45 = cast(%var_6004, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %46 = exp(%45) /* ty=Tensor[(9, 12, 2), float64] */;
  (%46,)
}

def @func_278() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_12579() -> Tensor[(4, 15, 7), float64] {
  @func_7929() /* ty=Tensor[(4, 15, 7), float64] */
}

def @func_7138() -> (Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) {
  %47 = @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %48 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %50 = reshape(%49, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %51 = @func_2922(%50) /* ty=(Tensor[(2, 3, 4), float64],) */;
  %52 = @func_5287() /* ty=Tensor[(4, 15, 7), int8] */;
  %53 = %47.0;
  %54 = %48.4;
  %55 = %51.0;
  %56 = @func_5998() /* ty=Tensor[(4, 15, 7), bool] */;
  (%52, %53, %54, %55, meta[relay.Constant][2] /* ty=Tensor[(24), float64] */, %56)
}

def @func_12370() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) {
  %57 = @func_9242() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %58 = @func_6895() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */;
  %59 = %57.0;
  %60 = cast(%59, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %61 = reshape(%60, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %62 = @func_691(%61) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %63 = %58.0;
  %64 = @func_9997() /* ty=Tensor[(4, 15, 7), bool] */;
  %65 = %62.0;
  %66 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  (%59, %63, %64, %65, %66)
}

def @func_1156() -> Tensor[(4, 15, 7), bool] {
  %67 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %67.1
}

def @func_12290() -> (Tensor[(7, 3, 2), float64],) {
  %68 = @func_9979() /* ty=Tensor[(7, 3, 2), float64] */;
  (%68,)
}

def @func_3978() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool]) {
  %69 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 156), bool] */, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %71 = reshape(%70, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %72 = @func_1863(%71) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %73 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %74 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %75 = %69.2;
  %76 = %72.5;
  %77 = %73.0;
  (%74, %75, %76, meta[relay.Constant][3] /* ty=Tensor[(4, 156), bool] */, %77)
}

def @func_4715() -> (Tensor[(4, 15, 7), bool],) {
  %78 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  (%78,)
}

def @func_9205(%var_9141: Tensor[(10, 10, 7), bool], %var_9161: Tensor[(60), int32]) -> (Tensor[(10, 10, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(60), int32], Tensor[(4, 15, 7), bool], Tensor[(624, 1), float64]) {
  %79 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 1, 7), bool] */, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %80 = cast(%var_9141, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %81 = @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %82 = cast(%var_9161, dtype="int32") /* ty=Tensor[(60), int32] */;
  %83 = reshape(%82, newshape=[3, 20]) /* ty=Tensor[(3, 20), int32] */;
  %84 = @func_8235(%83) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) */;
  %85 = @func_6895() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */;
  %86 = %85.2;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(624, 1), float64] */;
  %88 = logical_or(%79, %80) /* ty=Tensor[(10, 10, 7), bool] */;
  %89 = %81.0;
  %90 = %84.0;
  %91 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  %92 = rsqrt(%87) /* ty=Tensor[(624, 1), float64] */;
  (%88, %89, %90, %var_9161, %91, %92)
}

def @func_2884() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) {
  %93 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %94 = %93.0;
  %95 = cast(%94, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %96 = reshape(%95, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %97 = @func_1058(%96) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %98 = cast(meta[relay.Constant][5] /* ty=Tensor[(52, 4), bool] */, dtype="bool") /* ty=Tensor[(52, 4), bool] */;
  %99 = cast(meta[relay.Constant][6] /* ty=Tensor[(24, 26), bool] */, dtype="bool") /* ty=Tensor[(24, 26), bool] */;
  %100 = reshape(%98, newshape=[1, 16, 13]) /* ty=Tensor[(1, 16, 13), bool] */;
  %101 = reshape(%99, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), bool] */;
  %102 = @func_1635(%100, %101) /* ty=(Tensor[(3, 16, 13), bool],) */;
  %103 = %97.0;
  %104 = %102.0;
  (%94, %103, %104, meta[relay.Constant][5] /* ty=Tensor[(52, 4), bool] */, meta[relay.Constant][6] /* ty=Tensor[(24, 26), bool] */)
}

def @func_870() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %105 = cast(meta[relay.Constant][7] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %106 = reshape(%105, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %107 = @func_473(%106) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */;
  %108 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %109 = %107.2;
  %110 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  (%108, %109, meta[relay.Constant][7] /* ty=Tensor[(768), float32] */, %110)
}

def @func_2319(%var_2305: Tensor[(13, 5, 6), float32], %var_2306: Tensor[(13, 5, 6), float32]) -> (Tensor[(13, 5, 6), float32],) {
  %111 = cast(%var_2306, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %112 = shape_of(%var_2305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_2305, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %115 = divide(%113, %114) /* ty=Tensor[(13, 5, 6), float32] */;
  (%115,)
}

def @func_2689(%var_2641: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), uint32], Tensor[(4, 15, 7), uint64], Tensor[(624), bool], Tensor[(4, 15, 7), int64], Tensor[(4, 15, 7), bool]) {
  %116 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %117 = cast(%var_2641, dtype="uint32") /* ty=Tensor[(4, 15, 7), uint32] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="uint32") /* ty=Tensor[(4, 15, 7), uint32] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %121 = cast(%var_2641, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %122 = reshape(%121, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %123 = @func_1058(%122) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %124 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
  %126 = reshape(%125, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %127 = @func_1863(%126) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %128 = %127.1;
  %129 = cast(%128, dtype="int64") /* ty=Tensor[(4, 15, 7), int64] */;
  %130 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%124, dtype="int64") /* ty=Tensor[(4, 15, 7), int64] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %133 = @func_2415() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %134 = bitwise_xor(%119, %120) /* ty=Tensor[(4, 15, 7), uint32] */;
  %135 = %123.1;
  %136 = left_shift(%131, %132) /* ty=Tensor[(4, 15, 7), int64] */;
  %137 = %133.0;
  (%134, %135, meta[relay.Constant][8] /* ty=Tensor[(624), bool] */, %136, %137)
}

def @func_1706(%var_1702: Tensor[(208, 1), bool], %var_1703: Tensor[(624), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) {
  %138 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %139 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %140 = cast(%var_1702, dtype="bool") /* ty=Tensor[(208, 1), bool] */;
  %141 = cast(%var_1703, dtype="bool") /* ty=Tensor[(624), bool] */;
  %142 = reshape(%140, newshape=[1, 16, 13]) /* ty=Tensor[(1, 16, 13), bool] */;
  %143 = reshape(%141, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), bool] */;
  %144 = @func_1635(%142, %143) /* ty=(Tensor[(3, 16, 13), bool],) */;
  %145 = %138.0;
  %146 = %139.1;
  %147 = %144.0;
  (%145, %146, %147, %var_1702, %var_1703)
}

def @func_2271(%var_2258: Tensor[(624), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) {
  %148 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %149 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %150 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %151 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %152 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %153 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %154 = cast(%153, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %155 = reshape(%154, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %156 = @func_691(%155) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %157 = cast(%var_2258, dtype="bool") /* ty=Tensor[(624), bool] */;
  %158 = reshape(%157, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %159 = @func_1863(%158) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %160 = %148.1;
  %161 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %162 = %149.0;
  %163 = %150.0;
  %164 = %151.0;
  %165 = %152.1;
  %166 = %156.0;
  %167 = %159.6;
  %168 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  (%160, %161, %162, %163, %164, %165, %153, %166, %167, %var_2258, %168)
}

def @func_6197() -> (Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) {
  %169 = @func_5732() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) */;
  %170 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %171 = %169.1;
  %172 = %170.1;
  (%171, %172)
}

def @func_5998() -> Tensor[(4, 15, 7), bool] {
  @func_1156() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_6254() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  %173 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %174 = cast(%173, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %175 = reshape(%174, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %176 = @func_1058(%175) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %177 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %178 = %176.1;
  %179 = %177.0;
  (%173, %178, %179)
}

def @func_9997() -> Tensor[(4, 15, 7), bool] {
  %180 = @func_5670() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) */;
  %180.0
}

def @func_7848() -> (Tensor[(4, 15, 7), float64], Tensor[(8, 30), float32]) {
  %181 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %182 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
  %183 = %182.1;
  %184 = cast(%183, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %185 = %181.1;
  %186 = sigmoid(%184) /* ty=Tensor[(8, 30), float32] */;
  (%185, %186)
}

def @func_10972() -> (Tensor[(4, 15, 7), bool],) {
  %187 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  (%187,)
}

def @func_12259() -> Tensor[(4, 15, 7), bool] {
  %188 = @func_9259() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %188.0
}

def @func_4038() -> (Tensor[(768), float32],) {
  %189 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %190 = %189.1;
  (%190,)
}

def @func_3531() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %191 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %192 = cast(%191, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %193 = reshape(%192, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %194 = @func_1093(%193) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
  %195 = %194.1;
  (%191, %195)
}

def @func_8551() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %196 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %197 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %198 = %196.1;
  %199 = %197.0;
  %200 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  (%198, %199, %200)
}

def @func_4583() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(448, 4), float32], Tensor[(4, 15, 7), bool]) {
  %201 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %202 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %203 = cast(meta[relay.Constant][9] /* ty=Tensor[(448, 4), float32] */, dtype="float32") /* ty=Tensor[(448, 4), float32] */;
  %204 = reshape(%203, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
  %205 = @func_1125(%204) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(8, 224), float32], Tensor[(4, 15, 7), bool]) */;
  %206 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %207 = %201.1;
  %208 = %202.0;
  %209 = %205.1;
  %210 = %206.1;
  (%207, %208, %209, meta[relay.Constant][9] /* ty=Tensor[(448, 4), float32] */, %210)
}

def @func_12208() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) {
  %211 = @func_8313() /* ty=(Tensor[(130), uint8],) */;
  %212 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %213 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %214 = %211.0;
  %215 = %212.0;
  %216 = %213.0;
  (%214, %215, %216)
}

def @func_2449(%var_2447: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  %217 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %219 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %220 = cast(%var_2447, dtype="float32") /* ty=Tensor[(768), float32] */;
  %221 = cast(%var_2447, dtype="float32") /* ty=Tensor[(768), float32] */;
  %222 = reshape(%220, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %223 = reshape(%221, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %224 = @func_369(%222, %223) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %225 = acosh(%218) /* ty=Tensor[(4, 15, 7), float64] */;
  %226 = %219.0;
  %227 = %224.0;
  (%225, %226, %227, %var_2447)
}

def @func_7640(%var_7628: Tensor[(6, 1, 16), float32]) -> (Tensor[(6, 1, 16), float32],) {
  %228 = cast(%var_7628, dtype="float32") /* ty=Tensor[(6, 1, 16), float32] */;
  %229 = exp(%228) /* ty=Tensor[(6, 1, 16), float32] */;
  (%229,)
}

def @func_10521(%var_10512: Tensor[(60), int32]) -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(60), int32], Tensor[(4, 15, 7), bool]) {
  %230 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %231 = %230.2;
  %232 = cast(%231, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %233 = reshape(%232, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), uint64] */;
  %234 = @func_1774(%233) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */;
  %235 = cast(%var_10512, dtype="int32") /* ty=Tensor[(60), int32] */;
  %236 = reshape(%235, newshape=[3, 20]) /* ty=Tensor[(3, 20), int32] */;
  %237 = @func_8235(%236) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) */;
  %238 = %234.1;
  %239 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %240 = %237.1;
  %241 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  (%231, %238, %239, %240, %var_10512, %241)
}

def @func_4303() -> (Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) {
  %242 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %243 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %244 = %242.1;
  %245 = %243.2;
  (%244, %245)
}

def @func_7500() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %246 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %247 = @func_6197() /* ty=(Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) */;
  %248 = %246.2;
  %249 = %247.1;
  %250 = @func_4179() /* ty=Tensor[(4, 15, 7), float64] */;
  (%248, %249, %250)
}

def @func_7929() -> Tensor[(4, 15, 7), float64] {
  %251 = @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %251.0
}

def @func_2503(%var_2484: Tensor[(7, 7, 14), int64], %var_2485: Tensor[(7, 7, 14), int64]) -> (Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) {
  %252 = cast(%var_2485, dtype="int64") /* ty=Tensor[(7, 7, 14), int64] */;
  %253 = shape_of(%var_2484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_2484, dtype="int64") /* ty=Tensor[(7, 7, 14), int64] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %256 = cast(meta[relay.Constant][10] /* ty=Tensor[(420), bool] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %257 = reshape(%256, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %258 = @func_691(%257) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %259 = cast(%var_2485, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
  %260 = bitwise_or(%254, %255) /* ty=Tensor[(7, 7, 14), int64] */;
  %261 = %258.1;
  %262 = cos(%259) /* ty=Tensor[(7, 7, 14), float32] */;
  (%260, %261, meta[relay.Constant][10] /* ty=Tensor[(420), bool] */, %262)
}

def @func_6798(%var_6748: Tensor[(15, 2, 3), uint16], %var_6749: Tensor[(15, 2, 3), uint16]) -> (Tensor[(4, 15, 7), bool], Tensor[(15, 2, 3), int16]) {
  %263 = cast(%var_6749, dtype="uint16") /* ty=Tensor[(15, 2, 3), uint16] */;
  %264 = shape_of(%var_6748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%var_6748, dtype="uint16") /* ty=Tensor[(15, 2, 3), uint16] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %267 = add(%265, %266) /* ty=Tensor[(15, 2, 3), uint16] */;
  %268 = cast(%var_6749, dtype="int16") /* ty=Tensor[(15, 2, 3), int16] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="int16") /* ty=Tensor[(15, 2, 3), int16] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %272 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  %273 = bitwise_xor(%270, %271) /* ty=Tensor[(15, 2, 3), int16] */;
  (%272, %273)
}

def @func_9242() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  %274 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %275 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %276 = %274.0;
  %277 = %275.0;
  (%276, %277)
}

def @func_3365(%var_3330: Tensor[(10, 3, 9), int8]) -> (Tensor[(10, 3, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(1792), float32], Tensor[(4, 15, 7), bool], Tensor[(10, 3, 9), float32]) {
  %278 = cast(meta[relay.Constant][11] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %279 = cast(%var_3330, dtype="bool") /* ty=Tensor[(10, 3, 9), bool] */;
  %280 = cast(meta[relay.Constant][12] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %281 = reshape(%280, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %282 = cast(%var_3330, dtype="float32") /* ty=Tensor[(10, 3, 9), float32] */;
  %283 = sigmoid(%282) /* ty=Tensor[(10, 3, 9), float32] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(10, 3, 9), float32] */;
  %285 = equal(%278, %279) /* ty=Tensor[(10, 3, 9), bool] */;
  %286 = @func_828(%281) /* ty=Tensor[(8, 16, 14), float64] */;
  %287 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %288 = atan(%284) /* ty=Tensor[(10, 3, 9), float32] */;
  (%285, %286, meta[relay.Constant][12] /* ty=Tensor[(1792), float32] */, %287, %288)
}

def @func_3776(%var_3759: Tensor[(104, 2), bool]) -> (Tensor[(3, 8, 4), float32], Tensor[(3, 16, 13), bool], Tensor[(104, 2), bool], Tensor[(624, 1), bool], Tensor[(4, 15, 7), bool]) {
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 4), float32] */;
  %290 = cast(%var_3759, dtype="bool") /* ty=Tensor[(104, 2), bool] */;
  %291 = cast(meta[relay.Constant][14] /* ty=Tensor[(624, 1), bool] */, dtype="bool") /* ty=Tensor[(624, 1), bool] */;
  %292 = reshape(%290, newshape=[208, 1]) /* ty=Tensor[(208, 1), bool] */;
  %293 = reshape(%291, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %294 = @func_1706(%292, %293) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) */;
  %295 = @func_2537() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %296 = log10(%289) /* ty=Tensor[(3, 8, 4), float32] */;
  %297 = %294.2;
  %298 = %295.4;
  (%296, %297, %var_3759, meta[relay.Constant][14] /* ty=Tensor[(624, 1), bool] */, %298)
}

def @func_10984() -> Tensor[(4, 15, 7), bool] {
  %299 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %299.0
}

def @func_215() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %300 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %301 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%300, %301)
}

def @func_10206(%var_10160: Tensor[(6, 8, 9), float32]) -> (Tensor[(6, 8, 9), float32], Tensor[(8, 6, 16), float32], Tensor[(768), float32], Tensor[(4, 15, 7), float64]) {
  %302 = cast(%var_10160, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  %303 = cast(meta[relay.Constant][15] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %304 = reshape(%303, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %305 = @func_473(%304) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */;
  %306 = @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %307 = sigmoid(%302) /* ty=Tensor[(6, 8, 9), float32] */;
  %308 = %305.3;
  %309 = %306.0;
  (%307, %308, meta[relay.Constant][15] /* ty=Tensor[(768), float32] */, %309)
}

def @func_2775(%var_2734: Tensor[(5, 2, 13), uint8], %var_2735: Tensor[(5, 2, 13), uint8]) -> (Tensor[(5, 2, 13), uint8], Tensor[(5, 2, 13), bool], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %310 = cast(%var_2735, dtype="uint8") /* ty=Tensor[(5, 2, 13), uint8] */;
  %311 = shape_of(%var_2734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%var_2734, dtype="uint8") /* ty=Tensor[(5, 2, 13), uint8] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %314 = cast(%var_2734, dtype="bool") /* ty=Tensor[(5, 2, 13), bool] */;
  %315 = shape_of(%var_2735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%var_2735, dtype="bool") /* ty=Tensor[(5, 2, 13), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = cast(meta[relay.Constant][16] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %319 = reshape(%318, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %320 = @func_2449(%319) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
  %321 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %322 = bitwise_or(%312, %313) /* ty=Tensor[(5, 2, 13), uint8] */;
  %323 = logical_or(%316, %317) /* ty=Tensor[(5, 2, 13), bool] */;
  %324 = %320.1;
  %325 = %321.0;
  (%322, %323, %324, meta[relay.Constant][16] /* ty=Tensor[(768), float32] */, %325)
}

def @func_188() -> Tensor[(4, 15, 7), bool] {
  %326 = cast(meta[relay.Constant][18] /* ty=Tensor[(4, 15, 7), int8] */, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %327 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(4, 15, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 15, 7), int8] */, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%328, %329) /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_8760(%var_8735: Tensor[(15, 4, 2), int8]) -> (Tensor[(4, 15, 7), bool], Tensor[(15, 4, 2), float64]) {
  %330 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %331 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 4, 2), int8] */, dtype="int8") /* ty=Tensor[(15, 4, 2), int8] */;
  %332 = shape_of(%var_8735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_8735, dtype="int8") /* ty=Tensor[(15, 4, 2), int8] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %335 = minimum(%333, %334) /* ty=Tensor[(15, 4, 2), int8] */;
  %336 = cast(%335, dtype="float64") /* ty=Tensor[(15, 4, 2), float64] */;
  %337 = %330.1;
  %338 = exp(%336) /* ty=Tensor[(15, 4, 2), float64] */;
  (%337, %338)
}

def @func_7608() -> (Tensor[(4, 15, 7), bool], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %339 = @func_7391() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %341 = cast(meta[relay.Constant][20] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %342 = reshape(%340, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %343 = reshape(%341, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %344 = @func_2086(%342, %343) /* ty=(Tensor[(16, 5, 3), uint32],) */;
  %345 = @func_3049() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %346 = %339.0;
  %347 = %344.0;
  %348 = %345.0;
  %349 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
  (%346, %347, meta[relay.Constant][20] /* ty=Tensor[(240), uint32] */, %348, %349)
}

def @func_7434() -> (Tensor[(4, 15, 7), uint64],) {
  %350 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %351 = %350.0;
  (%351,)
}

def @func_9411() -> (Tensor[(2, 3, 4), float32], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(15, 6, 1), float32], Tensor[(15, 6), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  %352 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %353 = %352.1;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
  %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %356 = cast(meta[relay.Constant][21] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %357 = reshape(%355, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %358 = reshape(%356, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %359 = @func_2503(%357, %358) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */;
  %360 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
  %361 = reshape(%360, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), float32] */;
  %362 = @func_5230(%361) /* ty=(Tensor[(15, 6, 1), float32],) */;
  %363 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %364 = @func_6055() /* ty=(Tensor[(4, 15, 7), uint64],) */;
  %365 = cosh(%354) /* ty=Tensor[(2, 3, 4), float32] */;
  %366 = %359.3;
  %367 = %362.0;
  %368 = %363.2;
  %369 = %364.0;
  %370 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  (%365, %366, meta[relay.Constant][21] /* ty=Tensor[(686), int64] */, %367, meta[relay.Constant][22] /* ty=Tensor[(15, 6), float32] */, %368, %369, %370)
}

def @func_5089() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) {
  %371 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %372 = %371.1;
  %373 = cast(%372, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %374 = @func_2537() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %375 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %376 = @func_4879() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) */;
  %377 = sqrt(%373) /* ty=Tensor[(4, 15, 7), float32] */;
  %378 = %374.3;
  %379 = %375.3;
  %380 = %376.2;
  (%377, %378, %379, %380)
}

def @func_4988() -> (Tensor[(4, 15, 7), bool],) {
  %381 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %382 = %381.0;
  (%382,)
}

def @func_4264() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %383 = @func_3217() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) */;
  %384 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %385 = %383.1;
  %386 = %384.0;
  (%385, %386)
}

def @func_9801() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) {
  %387 = @func_6627() /* ty=Tensor[(130), uint8] */;
  %388 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%387, %388)
}

def @func_4016() -> Tensor[(4, 15, 7), bool] {
  %389 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %389.0
}

def @func_5732() -> (Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) {
  %390 = @func_5287() /* ty=Tensor[(4, 15, 7), int8] */;
  %391 = cast(%390, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %392 = reshape(%391, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), uint64] */;
  %393 = @func_1774(%392) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */;
  %394 = %393.0;
  (%390, %394)
}

def @func_9743() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  %395 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %396 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %397 = %395.0;
  %398 = %396.1;
  (%397, %398)
}

def @func_11791(%var_11777: Tensor[(11, 2, 4), float64]) -> (Tensor[(11, 2, 4), int8], Tensor[(4, 15, 7), bool]) {
  %399 = cast(%var_11777, dtype="float64") /* ty=Tensor[(11, 2, 4), float64] */;
  %400 = tan(%399) /* ty=Tensor[(11, 2, 4), float64] */;
  %401 = cast(%var_11777, dtype="int8") /* ty=Tensor[(11, 2, 4), int8] */;
  %402 = shape_of(%400, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%400, dtype="int8") /* ty=Tensor[(11, 2, 4), int8] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %405 = bitwise_or(%403, %404) /* ty=Tensor[(11, 2, 4), int8] */;
  %406 = @func_11737() /* ty=Tensor[(4, 15, 7), bool] */;
  (%405, %406)
}

def @func_10853() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float32], Tensor[(624), bool]) {
  %407 = @func_2537() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %408 = cast(meta[relay.Constant][23] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
  %409 = reshape(%408, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %410 = @func_2271(%409) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) */;
  %411 = %407.0;
  %412 = %410.7;
  (%411, %412, meta[relay.Constant][23] /* ty=Tensor[(624), bool] */)
}

def @main() -> (Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(6, 7, 5), float32], Tensor[(210, 1), float32], Tensor[(210, 1), float64]) {
  %413 = @func_7268() /* ty=(Tensor[(14, 1, 1), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %414 = cast(meta[relay.Constant][24] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %415 = cast(meta[relay.Constant][24] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %416 = reshape(%414, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), float32] */;
  %417 = reshape(%415, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), float32] */;
  %418 = @func_11749(%416, %417) /* ty=(Tensor[(6, 7, 5), float32],) */;
  %419 = cast(meta[relay.Constant][24] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %420 = cast(meta[relay.Constant][24] /* ty=Tensor[(210, 1), float32] */, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %421 = %413.1;
  %422 = @func_11835() /* ty=Tensor[(4, 15, 7), bool] */;
  %423 = %418.0;
  %424 = asin(%419) /* ty=Tensor[(210, 1), float32] */;
  %425 = erf(%420) /* ty=Tensor[(210, 1), float64] */;
  (%421, %422, %423, %424, %425)
}

def @func_12532() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(686), int64]) {
  %426 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %427 = cast(meta[relay.Constant][25] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %428 = reshape(%427, newshape=[686]) /* ty=Tensor[(686), int64] */;
  %429 = @func_11027(%428) /* ty=(Tensor[(8, 30), float32], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(686), int64]) */;
  %430 = @func_12052() /* ty=Tensor[(4, 15, 7), bool] */;
  %431 = %426.1;
  %432 = %429.1;
  (%430, %431, %432, meta[relay.Constant][25] /* ty=Tensor[(686), int64] */)
}

def @func_10139() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float32]) {
  %433 = @func_8810() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %434 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %435 = @func_5089() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) */;
  %436 = %433.0;
  %437 = %434.0;
  %438 = %435.0;
  (%436, %437, %438)
}

def @func_10078() -> Tensor[(4, 15, 7), bool] {
  %439 = @func_9801() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %439.1
}

def @func_10591() -> (Tensor[(240), uint32],) {
  %440 = @func_7608() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %441 = %440.2;
  (%441,)
}

def @func_3049() -> (Tensor[(4, 15, 7), bool],) {
  %442 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %443 = %442.1;
  (%443,)
}

def @func_11737() -> Tensor[(4, 15, 7), bool] {
  %444 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %444.0
}

def @func_9591() -> (Tensor[(4, 15, 7), bool], Tensor[(15, 7, 7), int8]) {
  %445 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %446 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 7), float32] */;
  %447 = cosh(%446) /* ty=Tensor[(15, 7, 7), float32] */;
  %448 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 7, 7), float32] */, dtype="int8") /* ty=Tensor[(15, 7, 7), int8] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="int8") /* ty=Tensor[(15, 7, 7), int8] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %452 = %445.2;
  %453 = left_shift(%450, %451) /* ty=Tensor[(15, 7, 7), int8] */;
  (%452, %453)
}

def @func_5943() -> (Tensor[(768), float32], Tensor[(8, 30), uint32]) {
  %454 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %455 = @func_3862() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) */;
  %456 = %454.1;
  %457 = %455.3;
  (%456, %457)
}

def @func_2086(%var_2070: Tensor[(16, 5, 3), uint32], %var_2071: Tensor[(16, 5, 3), uint32]) -> (Tensor[(16, 5, 3), uint32],) {
  %458 = cast(%var_2071, dtype="uint32") /* ty=Tensor[(16, 5, 3), uint32] */;
  %459 = shape_of(%var_2070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_2070, dtype="uint32") /* ty=Tensor[(16, 5, 3), uint32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %462 = right_shift(%460, %461) /* ty=Tensor[(16, 5, 3), uint32] */;
  (%462,)
}

def @func_9545(%var_9543: Tensor[(390), float32]) -> (Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) {
  %463 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %464 = @func_2632() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %465 = cast(%var_9543, dtype="float32") /* ty=Tensor[(390), float32] */;
  %466 = cast(%var_9543, dtype="float32") /* ty=Tensor[(390), float32] */;
  %467 = reshape(%465, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %468 = reshape(%466, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %469 = @func_2319(%467, %468) /* ty=(Tensor[(13, 5, 6), float32],) */;
  %470 = %463.1;
  %471 = %464.5;
  %472 = %469.0;
  (%470, %471, %472, %var_9543)
}

def @func_2029() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %473 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %474 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %475 = %473.0;
  %476 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %477 = %474.0;
  (%475, %476, %477)
}

def @func_595() -> (Tensor[(4, 15, 7), float64],) {
  %478 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %479 = cast(%478, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %480 = sigmoid(%479) /* ty=Tensor[(4, 15, 7), float64] */;
  (%480,)
}

def @func_10951() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(8, 14, 11), int64]) {
  %481 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %484 = reshape(%483, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %485 = @func_691(%484) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %486 = %485.1;
  %487 = @func_9517() /* ty=Tensor[(8, 14, 11), int64] */;
  (%482, %486, %487)
}

def @func_4179() -> Tensor[(4, 15, 7), float64] {
  %488 = @func_3531() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %488.1
}

def @func_2399() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %489 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %490 = cast(%489, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %491 = reshape(%490, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %492 = @func_1058(%491) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %493 = %492.0;
  (%489, %493)
}

def @func_8171() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %494 = @func_6197() /* ty=(Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) */;
  %495 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %496 = %494.1;
  %497 = %495.0;
  (%496, %497)
}

def @func_6735() -> (Tensor[(4, 15, 7), bool],) {
  %498 = @func_4408() /* ty=Tensor[(4, 15, 7), bool] */;
  (%498,)
}

def @func_11027(%var_11024: Tensor[(686), int64]) -> (Tensor[(8, 30), float32], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(686), int64]) {
  %499 = @func_7848() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(8, 30), float32]) */;
  %500 = @func_7138() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */;
  %501 = cast(%var_11024, dtype="int64") /* ty=Tensor[(686), int64] */;
  %502 = cast(%var_11024, dtype="int64") /* ty=Tensor[(686), int64] */;
  %503 = reshape(%501, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %504 = reshape(%502, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %505 = @func_2503(%503, %504) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */;
  %506 = %499.1;
  %507 = %500.0;
  %508 = %505.2;
  (%506, %507, %508, %var_11024)
}

def @func_4170(%var_4159: Tensor[(70, 6), float64], %var_4163: Tensor[(624), bool]) -> (Tensor[(130), uint8], Tensor[(4, 15, 7), float64], Tensor[(70, 6), float64], Tensor[(208), bool], Tensor[(624), bool]) {
  %509 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %510 = cast(%var_4159, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %511 = reshape(%510, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %512 = @func_1093(%511) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
  %513 = cast(%var_4163, dtype="bool") /* ty=Tensor[(624), bool] */;
  %514 = reshape(%513, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %515 = @func_1863(%514) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %516 = %509.2;
  %517 = %512.1;
  %518 = %515.0;
  (%516, %517, %var_4159, %518, %var_4163)
}

def @func_9259() -> (Tensor[(4, 15, 7), bool],) {
  %519 = @func_6895() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */;
  %520 = %519.0;
  (%520,)
}

def @func_6055() -> (Tensor[(4, 15, 7), uint64],) {
  %521 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %522 = %521.4;
  (%522,)
}

def @func_8409() -> (Tensor[(4, 15, 7), float64],) {
  %523 = @func_7138() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */;
  %524 = %523.1;
  (%524,)
}

def @func_11835() -> Tensor[(4, 15, 7), bool] {
  %525 = @func_11320() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8]) */;
  %525.0
}

def @func_12441() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) {
  %526 = @func_9743() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */;
  %527 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %528 = %526.0;
  (%527, %528)
}

def @func_11072() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %529 = @func_6254() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %530 = @func_8810() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %531 = %529.0;
  %532 = %530.1;
  (%531, %532)
}

def @func_11470() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) {
  %533 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %534 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %535 = %533.0;
  %536 = %534.0;
  (%535, %536)
}

def @func_473(%var_465: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) {
  %537 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %538 = cast(%537, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %539 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %540 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %541 = reshape(%539, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %542 = reshape(%540, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %543 = @func_369(%541, %542) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %544 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %545 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %546 = reshape(%544, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %547 = reshape(%545, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %548 = @func_369(%546, %547) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %549 = acos(%538) /* ty=Tensor[(4, 15, 7), float64] */;
  %550 = %543.1;
  %551 = %548.0;
  (%549, %550, %var_465, %551)
}

def @func_10891(%var_10882: Tensor[(1, 4, 5), float64]) -> Tensor[(1, 4, 5), float64] {
  %552 = cast(%var_10882, dtype="float64") /* ty=Tensor[(1, 4, 5), float64] */;
  sinh(%552) /* ty=Tensor[(1, 4, 5), float64] */
}

def @func_3133() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), int8]) {
  %553 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %554 = %553.0;
  %555 = cast(%554, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %556 = reshape(%555, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %557 = @func_691(%556) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %558 = %557.1;
  (%554, %558)
}

def @func_3740() -> (Tensor[(4, 15, 7), bool],) {
  %559 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %560 = %559.0;
  (%560,)
}

def @func_5460(%var_5351: Tensor[(9, 13, 5), float32], %var_5352: Tensor[(9, 13, 5), float32]) -> (Tensor[(9, 13, 5), float32], Tensor[(4, 15, 7), bool], Tensor[(64, 12), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(9, 13, 5), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  %561 = cast(%var_5352, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %562 = shape_of(%var_5351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %563 = cast(%var_5351, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %564 = dyn.reshape(%561, %562, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %565 = cast(meta[relay.Constant][27] /* ty=Tensor[(64, 12), float32] */, dtype="float32") /* ty=Tensor[(64, 12), float32] */;
  %566 = reshape(%565, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %567 = @func_2449(%566) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
  %568 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %569 = @func_5089() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) */;
  %570 = @func_2415() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %571 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %572 = cast(%var_5352, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %573 = atan(%572) /* ty=Tensor[(9, 13, 5), float32] */;
  %574 = cast(%573, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
  %575 = sin(%574) /* ty=Tensor[(9, 13, 5), float32] */;
  %576 = cast(%var_5352, dtype="bool") /* ty=Tensor[(9, 13, 5), bool] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="bool") /* ty=Tensor[(9, 13, 5), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = %568.0;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %582 = reshape(%581, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %583 = @func_1058(%582) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %584 = @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */;
  %585 = minimum(%563, %564) /* ty=Tensor[(9, 13, 5), float32] */;
  %586 = %567.1;
  %587 = %569.3;
  %588 = %570.0;
  %589 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %590 = %571.0;
  %591 = greater_equal(%578, %579) /* ty=Tensor[(9, 13, 5), bool] */;
  %592 = %583.0;
  %593 = %584.0;
  (%585, %586, meta[relay.Constant][27] /* ty=Tensor[(64, 12), float32] */, %580, %587, %588, %589, %590, %591, %592, %593)
}

def @func_4610(%var_4604: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) {
  %594 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %595 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %596 = %595.1;
  %597 = cast(%var_4604, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %601 = %594.5;
  %602 = divide(%599, %600) /* ty=Tensor[(4, 15, 7), float32] */;
  (%601, %602)
}

def @func_7160(%var_7147: Tensor[(5, 9, 5), int16]) -> (Tensor[(5, 9, 5), int16], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %603 = cast(meta[relay.Constant][28] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %604 = cast(%var_7147, dtype="int16") /* ty=Tensor[(5, 9, 5), int16] */;
  %605 = add(%603, %604) /* ty=Tensor[(5, 9, 5), int16] */;
  %606 = @func_6072() /* ty=Tensor[(4, 15, 7), bool] */;
  %607 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  (%605, %606, %607)
}

def @func_5042() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) {
  %608 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %609 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 156), bool] */, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %610 = reshape(%609, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %611 = @func_1863(%610) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %612 = %608.2;
  %613 = %611.4;
  (%612, %613, meta[relay.Constant][29] /* ty=Tensor[(4, 156), bool] */)
}

def @func_6072() -> Tensor[(4, 15, 7), bool] {
  %614 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %614.0
}

def @func_5905() -> (Tensor[(768), float32],) {
  %615 = @func_5573() /* ty=Tensor[(768), float32] */;
  (%615,)
}

def @func_3807() -> (Tensor[(4, 15, 7), float64],) {
  %616 = @func_3531() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %617 = %616.1;
  (%617,)
}

def @func_6627() -> Tensor[(130), uint8] {
  %618 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %618.0
}

def @func_7294(%var_7289: Tensor[(15, 4, 15), float64]) -> Tensor[(15, 4, 15), float64] {
  %619 = cast(%var_7289, dtype="float64") /* ty=Tensor[(15, 4, 15), float64] */;
  %620 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(15, 4, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(meta[relay.Constant][30] /* ty=Tensor[(15, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 15), float64] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%621, %622) /* ty=Tensor[(15, 4, 15), float64] */
}

def @func_11320() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8]) {
  %623 = @func_5732() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) */;
  %624 = @func_10984() /* ty=Tensor[(4, 15, 7), bool] */;
  %625 = %623.0;
  (%624, %625)
}

def @func_731() -> (Tensor[(4, 15, 7), bool],) {
  %626 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%626,)
}

def @func_1219() -> Tensor[(4, 15, 7), bool] {
  %627 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %627.0
}

def @func_10750(%var_10733: Tensor[(390), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(390), float32], Tensor[(390), float32], Tensor[(4, 15, 7), bool]) {
  %628 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %629 = cast(%var_10733, dtype="float32") /* ty=Tensor[(390), float32] */;
  %630 = reshape(%629, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %631 = @func_9545(%630) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) */;
  %632 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %633 = %628.0;
  %634 = %631.3;
  %635 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  (%632, %633, %634, %var_10733, %635)
}

def @func_8235(%var_8230: Tensor[(3, 20), int32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) {
  %636 = @func_3049() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %637 = cast(%var_8230, dtype="int32") /* ty=Tensor[(3, 20), int32] */;
  %638 = reshape(%637, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), int32] */;
  %639 = @func_7814(%638) /* ty=(Tensor[(12, 5, 1), bool], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) */;
  %640 = %636.0;
  %641 = %639.1;
  (%640, %641, %var_8230)
}

def @func_4152() -> Tensor[(52, 4), bool] {
  %642 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %642.3
}

def @func_10370() -> Tensor[(4, 15, 7), bool] {
  %643 = @func_10286() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %643.0
}

def @func_6609() -> (Tensor[(4, 15, 7), bool],) {
  %644 = @func_5998() /* ty=Tensor[(4, 15, 7), bool] */;
  (%644,)
}

def @func_11397(%var_11393: Tensor[(4, 4, 8), float64]) -> (Tensor[(4, 4, 8), float64],) {
  %645 = cast(%var_11393, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %646 = asinh(%645) /* ty=Tensor[(4, 4, 8), float64] */;
  (%646,)
}

def @func_4639() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_2537() -> (Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %647 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %648 = cast(meta[relay.Constant][31] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %649 = reshape(%648, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %650 = @func_1058(%649) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %651 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %652 = %647.0;
  %653 = %650.1;
  %654 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %655 = %651.1;
  (%652, %653, meta[relay.Constant][31] /* ty=Tensor[(420), float64] */, %654, %655)
}

def @func_4408() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_9723(%var_9666: Tensor[(6, 8, 12), uint32], %var_9667: Tensor[(6, 8, 12), uint32], %var_9711: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), uint64], Tensor[(6, 8, 12), int16], Tensor[(6, 8, 12), bool]) {
  %656 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %657 = %656.2;
  %658 = cast(%var_9711, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%657, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %662 = cast(%var_9667, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %663 = shape_of(%var_9666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %664 = cast(%var_9666, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %666 = less_equal(%664, %665) /* ty=Tensor[(6, 8, 12), bool] */;
  %667 = cast(%666, dtype="int16") /* ty=Tensor[(6, 8, 12), int16] */;
  %668 = shape_of(%var_9667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_9667, dtype="int16") /* ty=Tensor[(6, 8, 12), int16] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %671 = cast(%var_9667, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %672 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%666, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = subtract(%660, %661) /* ty=Tensor[(4, 15, 7), uint64] */;
  %676 = maximum(%669, %670) /* ty=Tensor[(6, 8, 12), int16] */;
  %677 = greater(%673, %674) /* ty=Tensor[(6, 8, 12), bool] */;
  (%675, %676, %677)
}

def @func_1863(%var_1808: Tensor[(624), bool]) -> (Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) {
  %678 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %679 = %678.0;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %681 = cast(meta[relay.Constant][32] /* ty=Tensor[(208), bool] */, dtype="bool") /* ty=Tensor[(208), bool] */;
  %682 = cast(%var_1808, dtype="bool") /* ty=Tensor[(624), bool] */;
  %683 = reshape(%681, newshape=[208, 1]) /* ty=Tensor[(208, 1), bool] */;
  %684 = reshape(%682, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %685 = @func_1706(%683, %684) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) */;
  %686 = %685.3;
  %687 = cast(%686, dtype="float32") /* ty=Tensor[(208, 1), float32] */;
  %688 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %689 = cast(%var_1808, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %690 = cast(%686, dtype="uint64") /* ty=Tensor[(208, 1), uint64] */;
  %691 = multiply(%689, %690) /* ty=Tensor[(208, 624), uint64] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(208, 624), float64] */;
  %693 = asinh(%680) /* ty=Tensor[(4, 15, 7), float64] */;
  %694 = log(%687) /* ty=Tensor[(208, 1), float32] */;
  %695 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %696 = %688.1;
  %697 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %698 = atanh(%692) /* ty=Tensor[(208, 624), float64] */;
  (meta[relay.Constant][32] /* ty=Tensor[(208), bool] */, %693, %694, %695, %696, %697, %698)
}

def @func_5230(%var_5205: Tensor[(15, 6, 1), float32]) -> (Tensor[(15, 6, 1), float32],) {
  %699 = cast(%var_5205, dtype="float32") /* ty=Tensor[(15, 6, 1), float32] */;
  %700 = log(%699) /* ty=Tensor[(15, 6, 1), float32] */;
  (%700,)
}

def @func_12807() -> (Tensor[(4, 15, 7), bool], Tensor[(14, 3), uint32], Tensor[(4, 156), int32], Tensor[(7, 3, 2), float64]) {
  %701 = @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %702 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %703 = %702.2;
  %704 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 156), bool] */, dtype="int32") /* ty=Tensor[(4, 156), int32] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(2), int32] */;
  %706 = cast(%703, dtype="int32") /* ty=Tensor[(4, 156), int32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %708 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 3), uint32] */, dtype="uint32") /* ty=Tensor[(14, 3), uint32] */;
  %709 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 3), uint32] */, dtype="uint32") /* ty=Tensor[(14, 3), uint32] */;
  %710 = reshape(%708, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
  %711 = reshape(%709, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
  %712 = @func_6700(%710, %711) /* ty=Tensor[(7, 3, 2), uint32] */;
  %713 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 3, 2), uint32] */, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %717 = %701.0;
  %718 = maximum(%706, %707) /* ty=Tensor[(4, 156), int32] */;
  %719 = floor_mod(%715, %716) /* ty=Tensor[(7, 3, 2), float64] */;
  (%717, meta[relay.Constant][33] /* ty=Tensor[(14, 3), uint32] */, %718, %719)
}

def @func_11694() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  %720 = @func_6254() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %721 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %722 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %723 = @func_5255() /* ty=(Tensor[(4, 15, 7), uint64],) */;
  %724 = %720.1;
  %725 = %721.0;
  %726 = %722.0;
  %727 = %723.0;
  %728 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  (%724, %725, %726, %727, %728)
}

def @func_828(%var_820: Tensor[(8, 16, 14), float32]) -> Tensor[(8, 16, 14), float64] {
  %729 = cast(%var_820, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %730 = asinh(%729) /* ty=Tensor[(8, 16, 14), float32] */;
  %731 = cast(%730, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
  erf(%731) /* ty=Tensor[(8, 16, 14), float64] */
}

def @func_691(%var_666: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) {
  %732 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %733 = cast(%var_666, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %737 = less_equal(%735, %736) /* ty=Tensor[(4, 15, 7), bool] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %739 = shape_of(%var_666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %740 = cast(%var_666, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %742 = cast(%var_666, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %743 = shape_of(%737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%737, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %746 = floor_mod(%740, %741) /* ty=Tensor[(4, 15, 7), float32] */;
  %747 = add(%744, %745) /* ty=Tensor[(4, 15, 7), int8] */;
  (%746, %747)
}

def @func_2922(%var_2919: Tensor[(2, 3, 4), float64]) -> (Tensor[(2, 3, 4), float64],) {
  %748 = cast(%var_2919, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %749 = tan(%748) /* ty=Tensor[(2, 3, 4), float64] */;
  (%749,)
}

def @func_3217() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) {
  %750 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %751 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 15, 7), bool] */, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %755 = floor_divide(%753, %754) /* ty=Tensor[(4, 15, 7), float32] */;
  %756 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  (%755, %756)
}

def @func_3951() -> (Tensor[(4, 15, 7), float64],) {
  %757 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %758 = %757.1;
  (%758,)
}

def @func_12109() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %759 = @func_10972() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %760 = %759.0;
  %761 = @func_9997() /* ty=Tensor[(4, 15, 7), bool] */;
  (%760, %761)
}

def @func_990() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %762 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %763 = %762.0;
  %764 = cast(%763, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %765 = reshape(%764, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %766 = @func_448(%765) /* ty=(Tensor[(4, 15, 7), bool],) */;
  %767 = %766.0;
  (%763, %767)
}

def @func_11913() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(130), uint8], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(4, 15, 7), bool]) {
  %768 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %769 = cast(meta[relay.Constant][37] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %770 = cast(meta[relay.Constant][37] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %771 = reshape(%769, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %772 = reshape(%770, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %773 = @func_2503(%771, %772) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */;
  %774 = @func_9743() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */;
  %775 = @func_7929() /* ty=Tensor[(4, 15, 7), float64] */;
  %776 = %768.0;
  %777 = @func_6627() /* ty=Tensor[(130), uint8] */;
  %778 = %773.3;
  %779 = %774.1;
  (%775, %776, %777, %778, meta[relay.Constant][37] /* ty=Tensor[(686), int64] */, %779)
}

def @func_1635(%var_1611: Tensor[(1, 16, 13), bool], %var_1612: Tensor[(3, 16, 13), bool]) -> (Tensor[(3, 16, 13), bool],) {
  %780 = cast(%var_1611, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %781 = cast(%var_1612, dtype="bool") /* ty=Tensor[(3, 16, 13), bool] */;
  %782 = logical_or(%780, %781) /* ty=Tensor[(3, 16, 13), bool] */;
  (%782,)
}

def @func_5670() -> (Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) {
  %783 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %784 = cast(meta[relay.Constant][38] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %785 = reshape(%784, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), float64] */;
  %786 = @func_3469(%785) /* ty=(Tensor[(2, 2, 16), float64],) */;
  %787 = %783.0;
  %788 = %786.0;
  (%787, %788, meta[relay.Constant][38] /* ty=Tensor[(64), float64] */)
}

def @func_10691(%var_10689: Tensor[(1, 390), float32]) -> (Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32]) {
  %789 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %790 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %791 = cast(%var_10689, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
  %792 = cast(%var_10689, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
  %793 = reshape(%791, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %794 = reshape(%792, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %795 = @func_2319(%793, %794) /* ty=(Tensor[(13, 5, 6), float32],) */;
  %796 = %789.2;
  %797 = %790.1;
  %798 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  %799 = %795.0;
  (%796, %797, %798, %799, %var_10689)
}

def @func_6289() -> (Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) {
  %800 = @func_5255() /* ty=(Tensor[(4, 15, 7), uint64],) */;
  %801 = @func_3300() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) */;
  %802 = %800.0;
  %803 = %801.1;
  (%802, %803)
}

def @func_1321() -> Tensor[(4, 15, 7), float32] {
  %804 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %805 = %804.0;
  %806 = cast(%805, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  sin(%806) /* ty=Tensor[(4, 15, 7), float32] */
}

def @func_2415() -> (Tensor[(4, 15, 7), bool],) {
  %807 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %808 = %807.1;
  (%808,)
}

def @func_7215() -> Tensor[(4, 15, 7), bool] {
  %809 = @func_4879() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) */;
  %809.1
}

def @func_1190() -> Tensor[(4, 15, 7), bool] {
  @func_1156() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_10712(%var_10707: Tensor[(10, 6, 14), int64]) -> Tensor[(10, 6, 14), bool] {
  %810 = cast(meta[relay.Constant][39] /* ty=Tensor[(10, 6, 14), int64] */, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
  %811 = shape_of(%var_10707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_10707, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%812, %813) /* ty=Tensor[(10, 6, 14), bool] */
}

def @func_10443(%var_10418: Tensor[(420), bool]) -> (Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) {
  %814 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %815 = cast(%var_10418, dtype="bool") /* ty=Tensor[(420), bool] */;
  %816 = reshape(%815, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %817 = @func_691(%816) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %818 = %814.1;
  %819 = %817.0;
  (%818, %819, %var_10418)
}

def @func_11217() -> Tensor[(4, 15, 7), float64] {
  %820 = @func_8409() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %820.0
}

def @func_8081(%var_8069: Tensor[(21), uint32], %var_8070: Tensor[(294), uint32], %var_8071: Tensor[(240, 1), uint32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(24), float64], Tensor[(14, 3, 7), uint32], Tensor[(21), uint32], Tensor[(294), uint32], Tensor[(240, 1), uint32]) {
  %821 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %822 = @func_6393() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %823 = @func_4988() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %824 = @func_7138() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */;
  %825 = cast(%var_8069, dtype="uint32") /* ty=Tensor[(21), uint32] */;
  %826 = cast(%var_8070, dtype="uint32") /* ty=Tensor[(294), uint32] */;
  %827 = cast(%var_8071, dtype="uint32") /* ty=Tensor[(240, 1), uint32] */;
  %828 = reshape(%825, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), uint32] */;
  %829 = reshape(%826, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint32] */;
  %830 = reshape(%827, newshape=[240]) /* ty=Tensor[(240), uint32] */;
  %831 = @func_4130(%828, %829, %830) /* ty=(Tensor[(14, 3, 7), uint32], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32]) */;
  %832 = %821.2;
  %833 = %822.2;
  %834 = %823.0;
  %835 = %824.4;
  %836 = %831.0;
  (%832, %833, %834, %835, %836, %var_8069, %var_8070, %var_8071)
}

def @func_11749(%var_11741: Tensor[(6, 7, 5), float32], %var_11742: Tensor[(6, 7, 5), float32]) -> (Tensor[(6, 7, 5), float32],) {
  %837 = cast(%var_11742, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %838 = shape_of(%var_11741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%var_11741, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %841 = mod(%839, %840) /* ty=Tensor[(6, 7, 5), float32] */;
  (%841,)
}

def @func_12562(%var_12544: Tensor[(13, 2, 3), float64]) -> (Tensor[(13, 2, 3), bool], Tensor[(4, 15, 7), bool]) {
  %842 = cast(%var_12544, dtype="float64") /* ty=Tensor[(13, 2, 3), float64] */;
  %843 = sigmoid(%842) /* ty=Tensor[(13, 2, 3), float64] */;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(13, 2, 3), float32] */;
  %845 = acosh(%844) /* ty=Tensor[(13, 2, 3), float32] */;
  %846 = cast(meta[relay.Constant][40] /* ty=Tensor[(13, 2, 3), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 3), bool] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="bool") /* ty=Tensor[(13, 2, 3), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %850 = @func_11694() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */;
  %851 = equal(%848, %849) /* ty=Tensor[(13, 2, 3), bool] */;
  %852 = %850.4;
  (%851, %852)
}

def @func_12225() -> (Tensor[(4, 15, 7), float64],) {
  %853 = @func_11913() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(130), uint8], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(4, 15, 7), bool]) */;
  %854 = %853.0;
  (%854,)
}

def @func_3300() -> (Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) {
  %855 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %856 = cast(meta[relay.Constant][41] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
  %857 = reshape(%856, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
  %858 = @func_2922(%857) /* ty=(Tensor[(2, 3, 4), float64],) */;
  %859 = @func_3133() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), int8]) */;
  %860 = %855.0;
  %861 = %858.0;
  %862 = %859.1;
  (%860, %861, meta[relay.Constant][41] /* ty=Tensor[(24), float64] */, %862)
}

def @func_12765(%var_12740: int32, %var_12741: Tensor[(11, 5, 3), int32]) -> Tensor[(11, 5, 3), int32] {
  %863 = cast(%var_12740, dtype="int32") /* ty=int32 */;
  %864 = cast(%var_12741, dtype="int32") /* ty=Tensor[(11, 5, 3), int32] */;
  subtract(%863, %864) /* ty=Tensor[(11, 5, 3), int32] */
}

def @func_3469(%var_3465: Tensor[(2, 2, 16), float64]) -> (Tensor[(2, 2, 16), float64],) {
  %865 = cast(%var_3465, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
  %866 = asinh(%865) /* ty=Tensor[(2, 2, 16), float64] */;
  (%866,)
}

def @func_448(%var_432: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), bool],) {
  %867 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %868 = %867.0;
  %869 = cast(%var_432, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%868, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %873 = multiply(%871, %872) /* ty=Tensor[(4, 15, 7), int16] */;
  %874 = cast(%873, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %875 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %876 = cast(%868, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %878 = less(%876, %877) /* ty=Tensor[(4, 15, 7), bool] */;
  %879 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 15, 7), bool] */, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %881 = cast(%878, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %883 = greater_equal(%881, %882) /* ty=Tensor[(4, 15, 7), bool] */;
  (%883,)
}

def @func_4130(%var_4112: Tensor[(1, 3, 7), uint32], %var_4113: Tensor[(14, 3, 7), uint32], %var_4123: Tensor[(240), uint32]) -> (Tensor[(14, 3, 7), uint32], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32]) {
  %884 = cast(%var_4112, dtype="uint32") /* ty=Tensor[(1, 3, 7), uint32] */;
  %885 = cast(%var_4113, dtype="uint32") /* ty=Tensor[(14, 3, 7), uint32] */;
  %886 = cast(%var_4123, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %887 = cast(%var_4123, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %888 = reshape(%886, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %889 = reshape(%887, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %890 = @func_2086(%888, %889) /* ty=(Tensor[(16, 5, 3), uint32],) */;
  %891 = minimum(%884, %885) /* ty=Tensor[(14, 3, 7), uint32] */;
  %892 = %890.0;
  (%891, %892, %var_4123)
}

def @func_6700(%var_6690: Tensor[(7, 3, 2), uint32], %var_6691: Tensor[(7, 3, 2), uint32]) -> Tensor[(7, 3, 2), uint32] {
  %893 = cast(%var_6691, dtype="uint32") /* ty=Tensor[(7, 3, 2), uint32] */;
  %894 = shape_of(%var_6690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%var_6690, dtype="uint32") /* ty=Tensor[(7, 3, 2), uint32] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%895, %896) /* ty=Tensor[(7, 3, 2), uint32] */
}

def @func_3629() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  %897 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %898 = %897.0;
  %899 = cast(%898, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %900 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %901 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %902 = %900.0;
  %903 = cast(%902, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %904 = reshape(%903, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %905 = @func_2831(%904) /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(8, 6, 16), float64]) */;
  %906 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %907 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %908 = erf(%899) /* ty=Tensor[(4, 15, 7), float32] */;
  %909 = %901.2;
  %910 = %905.0;
  %911 = %906.0;
  (%907, %908, %902, %909, %910, %911)
}

def @func_8968() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float64], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %912 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %913 = @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %914 = %913.0;
  %915 = cast(%914, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %916 = reshape(%915, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), uint64] */;
  %917 = @func_1774(%916) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */;
  %918 = @func_8145() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %919 = %912.1;
  %920 = %917.1;
  %921 = %918.0;
  (%919, %914, %920, %921)
}

def @func_8673() -> (Tensor[(4, 15, 7), float32],) {
  %922 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %923 = %922.0;
  %924 = cast(%923, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %925 = cosh(%924) /* ty=Tensor[(4, 15, 7), float32] */;
  (%925,)
}

def @func_5821(%var_5775: Tensor[(585), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(9, 13, 5), float32], Tensor[(585), float32], Tensor[(4, 15, 7), bool]) {
  %926 = @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */;
  %927 = cast(%var_5775, dtype="float32") /* ty=Tensor[(585), float32] */;
  %928 = cast(%var_5775, dtype="float32") /* ty=Tensor[(585), float32] */;
  %929 = reshape(%927, newshape=[9, 13, 5]) /* ty=Tensor[(9, 13, 5), float32] */;
  %930 = reshape(%928, newshape=[9, 13, 5]) /* ty=Tensor[(9, 13, 5), float32] */;
  %931 = @func_5460(%929, %930) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(4, 15, 7), bool], Tensor[(64, 12), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(9, 13, 5), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %932 = %926.0;
  %933 = %931.0;
  %934 = @func_4408() /* ty=Tensor[(4, 15, 7), bool] */;
  (%932, %933, %var_5775, %934)
}

def @func_9979() -> Tensor[(7, 3, 2), float64] {
  %935 = @func_9451() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(7, 3, 2), uint32], Tensor[(42), uint32], Tensor[(4, 15, 7), float32]) */;
  %936 = %935.1;
  %937 = cast(%936, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  cosh(%937) /* ty=Tensor[(7, 3, 2), float64] */
}

def @func_9451() -> (Tensor[(4, 15, 7), bool], Tensor[(7, 3, 2), uint32], Tensor[(42), uint32], Tensor[(4, 15, 7), float32]) {
  %938 = @func_8171() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %939 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %940 = cast(meta[relay.Constant][43] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
  %941 = reshape(%939, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
  %942 = reshape(%940, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
  %943 = %938.0;
  %944 = cast(%943, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %945 = reshape(%944, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %946 = @func_4610(%945) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) */;
  %947 = @func_6700(%941, %942) /* ty=Tensor[(7, 3, 2), uint32] */;
  %948 = %946.1;
  (%943, %947, meta[relay.Constant][43] /* ty=Tensor[(42), uint32] */, %948)
}

def @func_8810() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  %949 = @func_3531() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %950 = %949.1;
  %951 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  (%950, %951)
}

def @func_11296() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) {
  %952 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %953 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %954 = %952.1;
  %955 = cast(%954, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %956 = reshape(%955, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %957 = @func_4610(%956) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) */;
  %958 = %953.1;
  %959 = %957.1;
  (%954, %958, %959)
}

def @func_1968() -> (Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %960 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %961 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %962 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %963 = %960.2;
  %964 = %961.1;
  %965 = %962.1;
  (%963, %964, %965)
}

def @func_10568() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float64]) {
  %966 = @func_3862() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) */;
  %967 = @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %968 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  %969 = %966.1;
  %970 = %967.0;
  (%968, %969, %970)
}

def @func_12081() -> (Tensor[(4, 15, 7), bool],) {
  %971 = @func_8171() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %972 = %971.1;
  (%972,)
}

def @func_12687() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %973 = @func_12441() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) */;
  %974 = @func_9093() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %975 = %973.0;
  %976 = %974.0;
  (%975, %976)
}

def @func_2999() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) {
  %977 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %978 = cast(meta[relay.Constant][44] /* ty=Tensor[(130), uint8] */, dtype="uint8") /* ty=Tensor[(130), uint8] */;
  %979 = cast(meta[relay.Constant][44] /* ty=Tensor[(130), uint8] */, dtype="uint8") /* ty=Tensor[(130), uint8] */;
  %980 = reshape(%978, newshape=[5, 2, 13]) /* ty=Tensor[(5, 2, 13), uint8] */;
  %981 = reshape(%979, newshape=[5, 2, 13]) /* ty=Tensor[(5, 2, 13), uint8] */;
  %982 = @func_2775(%980, %981) /* ty=(Tensor[(5, 2, 13), uint8], Tensor[(5, 2, 13), bool], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %983 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %984 = %977.0;
  %985 = %982.3;
  %986 = %983.0;
  (%984, %985, meta[relay.Constant][44] /* ty=Tensor[(130), uint8] */, %986)
}

def @func_8313() -> (Tensor[(130), uint8],) {
  %987 = @func_6627() /* ty=Tensor[(130), uint8] */;
  (%987,)
}

def @func_4492() -> Tensor[(4, 15, 7), float64] {
  %988 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %988.1
}

def @func_11370() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(7, 3, 2), float64], Tensor[(4, 15, 7), float64], Tensor[(64), float64]) {
  %989 = @func_9035() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), float32]) */;
  %990 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %991 = @func_5670() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) */;
  %992 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %993 = %989.0;
  %994 = @func_9979() /* ty=Tensor[(7, 3, 2), float64] */;
  %995 = %990.2;
  %996 = %991.2;
  (%992, %993, %994, %995, %996)
}

def @func_11702() -> Tensor[(4, 15, 7), bool] {
  @func_1403() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_799() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %997 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %998 = cast(%997, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %999 = reshape(%998, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %1000 = @func_448(%999) /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1001 = %1000.0;
  (%997, %1001)
}

def @func_1908() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) {
  %1002 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %1003 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
  %1004 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  (%1002, %1003, %1004)
}

def @func_5540() -> (Tensor[(4, 15, 7), bool],) {
  %1005 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1006 = %1005.1;
  (%1006,)
}

def @func_2831(%var_2818: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), uint64], Tensor[(8, 6, 16), float64]) {
  %1007 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1008 = %1007.0;
  %1009 = cast(%var_2818, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %1010 = shape_of(%1008, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1011 = cast(%1008, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %1012 = dyn.reshape(%1009, %1010, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1013 = maximum(%1011, %1012) /* ty=Tensor[(4, 15, 7), uint64] */;
  %1014 = cast(%1013, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %1015 = reshape(%1014, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %1016 = @func_1093(%1015) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
  %1017 = %1016.2;
  %1018 = cast(%1017, dtype="float64") /* ty=Tensor[(8, 6, 16), float64] */;
  %1019 = sigmoid(%1018) /* ty=Tensor[(8, 6, 16), float64] */;
  (%1013, %1019)
}

def @func_1125(%var_1104: Tensor[(8, 224), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(8, 224), float32], Tensor[(4, 15, 7), bool]) {
  %1020 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1021 = cast(%var_1104, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %1022 = reshape(%1021, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %1023 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1024 = %1020.0;
  %1025 = @func_828(%1022) /* ty=Tensor[(8, 16, 14), float64] */;
  %1026 = %1023.0;
  (%1024, %1025, %var_1104, %1026)
}

def @func_1774(%var_1754: Tensor[(7, 12, 5), uint64]) -> (Tensor[(7, 12, 5), bool], Tensor[(768), float32]) {
  %1027 = cast(%var_1754, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %1028 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(7, 12, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1029 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 12, 5), uint64] */, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
  %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1031 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 12, 5), uint64] */, dtype="float64") /* ty=Tensor[(7, 12, 5), float64] */;
  %1032 = reshape(%1031, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %1033 = @func_1093(%1032) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
  %1034 = less_equal(%1029, %1030) /* ty=Tensor[(7, 12, 5), bool] */;
  %1035 = %1033.3;
  (%1034, %1035)
}

def @func_4879() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) {
  %1036 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1037 = @func_2632() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %1038 = %1037.6;
  %1039 = cast(%1038, dtype="float64") /* ty=Tensor[(4, 448), float64] */;
  %1040 = %1036.1;
  %1041 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
  %1042 = log2(%1039) /* ty=Tensor[(4, 448), float64] */;
  %1043 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1040, %1041, %1042, %1043)
}

def @func_1299() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) {
  %1044 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %1045 = cast(%1044, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %1046 = reshape(%1045, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %1047 = @func_448(%1046) /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1048 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %1049 = reshape(%1048, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %1050 = @func_828(%1049) /* ty=Tensor[(8, 16, 14), float64] */;
  %1051 = cast(%1050, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %1052 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(4, 448), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1053 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %1054 = dyn.reshape(%1051, %1052, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1055 = %1047.0;
  %1056 = floor_mod(%1053, %1054) /* ty=Tensor[(4, 448), float32] */;
  (%1044, %1055, %1056)
}

def @func_7558(%var_7536: Tensor[(3, 8, 5), float64]) -> (Tensor[(4, 15, 7), float32], Tensor[(3, 8, 5), int8]) {
  %1057 = cast(%var_7536, dtype="float64") /* ty=Tensor[(3, 8, 5), float64] */;
  %1058 = atanh(%1057) /* ty=Tensor[(3, 8, 5), float64] */;
  %1059 = cast(%1058, dtype="float64") /* ty=Tensor[(3, 8, 5), float64] */;
  %1060 = asin(%1059) /* ty=Tensor[(3, 8, 5), float64] */;
  %1061 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 8, 5), float64] */, dtype="int8") /* ty=Tensor[(3, 8, 5), int8] */;
  %1062 = shape_of(%1060, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1063 = cast(%1060, dtype="int8") /* ty=Tensor[(3, 8, 5), int8] */;
  %1064 = dyn.reshape(%1061, %1062, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1065 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %1066 = bitwise_or(%1063, %1064) /* ty=Tensor[(3, 8, 5), int8] */;
  (%1065, %1066)
}

def @func_6895() -> (Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) {
  %1067 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %1068 = cast(meta[relay.Constant][48] /* ty=Tensor[(624, 1), bool] */, dtype="bool") /* ty=Tensor[(624, 1), bool] */;
  %1069 = reshape(%1068, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), bool] */;
  %1070 = @func_6451(%1069) /* ty=(Tensor[(3, 16, 13), uint8],) */;
  %1071 = %1067.0;
  %1072 = %1070.0;
  (%1071, %1072, meta[relay.Constant][48] /* ty=Tensor[(624, 1), bool] */)
}

def @func_5287() -> Tensor[(4, 15, 7), int8] {
  %1073 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1074 = %1073.0;
  %1075 = cast(meta[relay.Constant][49] /* ty=Tensor[(4, 15, 7), float64] */, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %1076 = shape_of(%1074, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1077 = cast(%1074, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %1078 = dyn.reshape(%1075, %1076, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%1077, %1078) /* ty=Tensor[(4, 15, 7), int8] */
}

def @func_7814(%var_7789: Tensor[(12, 5, 1), int32]) -> (Tensor[(12, 5, 1), bool], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) {
  %1079 = cast(-6 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %1080 = cast(%var_7789, dtype="bool") /* ty=Tensor[(12, 5, 1), bool] */;
  %1081 = cast(meta[relay.Constant][50] /* ty=Tensor[(420), bool] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %1082 = reshape(%1081, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %1083 = @func_691(%1082) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %1084 = less_equal(%1079, %1080) /* ty=Tensor[(12, 5, 1), bool] */;
  %1085 = %1083.0;
  (%1084, %1085, meta[relay.Constant][50] /* ty=Tensor[(420), bool] */)
}

def @func_5255() -> (Tensor[(4, 15, 7), uint64],) {
  %1086 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %1087 = %1086.4;
  (%1087,)
}

def @func_8866() -> (Tensor[(4, 15, 7), bool],) {
  %1088 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %1089 = %1088.0;
  (%1089,)
}

def @func_4533() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1090 = @func_4264() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1091 = %1090.1;
  %1092 = cast(%1091, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %1093 = reshape(%1092, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %1094 = @func_448(%1093) /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1095 = %1094.0;
  (%1091, %1095)
}

def @func_6451(%var_6434: Tensor[(3, 16, 13), bool]) -> (Tensor[(3, 16, 13), uint8],) {
  %1096 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %1097 = %1096.2;
  %1098 = cast(%var_6434, dtype="float64") /* ty=Tensor[(3, 16, 13), float64] */;
  %1099 = shape_of(%1097, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1100 = cast(%1097, dtype="float64") /* ty=Tensor[(3, 16, 13), float64] */;
  %1101 = dyn.reshape(%1098, %1099, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1102 = mod(%1100, %1101) /* ty=Tensor[(3, 16, 13), float64] */;
  %1103 = cast(%1102, dtype="float64") /* ty=Tensor[(3, 16, 13), float64] */;
  %1104 = cos(%1103) /* ty=Tensor[(3, 16, 13), float64] */;
  %1105 = cast(%1102, dtype="uint8") /* ty=Tensor[(3, 16, 13), uint8] */;
  %1106 = shape_of(%1104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1107 = cast(%1104, dtype="uint8") /* ty=Tensor[(3, 16, 13), uint8] */;
  %1108 = dyn.reshape(%1105, %1106, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1109 = left_shift(%1107, %1108) /* ty=Tensor[(3, 16, 13), uint8] */;
  (%1109,)
}

def @func_224() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_9035() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float32]) {
  %1110 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1111 = %1110.0;
  %1112 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  (%1111, %1112)
}

def @func_9517() -> Tensor[(8, 14, 11), int64] {
  %1113 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 14, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 14, 11), int64] */;
  %1114 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(8, 14, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1115 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 14, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 14, 11), int64] */;
  %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%1115, %1116) /* ty=Tensor[(8, 14, 11), int64] */
}

def @func_7391() -> (Tensor[(4, 15, 7), bool],) {
  %1117 = @func_2632() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %1118 = %1117.5;
  (%1118,)
}

def @func_6393() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1119 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %1120 = @func_3740() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1121 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %1122 = %1119.1;
  %1123 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %1124 = %1120.0;
  (%1121, %1122, %1123, %1124)
}

def @func_11716() -> (Tensor[(4, 15, 7), bool],) {
  %1125 = @func_10078() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1125,)
}

def @func_12868() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  %1126 = @func_12441() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) */;
  %1127 = @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1128 = %1126.1;
  %1129 = %1127.0;
  (%1128, %1129)
}

def @func_10286() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1130 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %1131 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %1132 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1133 = %1130.1;
  %1134 = %1131.0;
  %1135 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  %1136 = %1132.1;
  (%1133, %1134, %1135, %1136)
}

def @func_5693(%var_5679: Tensor[(2, 3, 4), float64]) -> Tensor[(2, 3, 4), uint16] {
  %1137 = @func_3300() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) */;
  %1138 = %1137.1;
  %1139 = cast(%var_5679, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %1140 = shape_of(%1138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1141 = cast(%1138, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %1142 = dyn.reshape(%1139, %1140, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1143 = floor_mod(%1141, %1142) /* ty=Tensor[(2, 3, 4), float64] */;
  %1144 = cast(%1138, dtype="uint16") /* ty=Tensor[(2, 3, 4), uint16] */;
  %1145 = shape_of(%1143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1146 = cast(%1143, dtype="uint16") /* ty=Tensor[(2, 3, 4), uint16] */;
  %1147 = dyn.reshape(%1144, %1145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%1146, %1147) /* ty=Tensor[(2, 3, 4), uint16] */
}

def @func_3862() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) {
  %1148 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1149 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1150 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 30), uint32] */, dtype="uint32") /* ty=Tensor[(8, 30), uint32] */;
  %1151 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 30), uint32] */, dtype="uint32") /* ty=Tensor[(8, 30), uint32] */;
  %1152 = reshape(%1150, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %1153 = reshape(%1151, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %1154 = @func_2086(%1152, %1153) /* ty=(Tensor[(16, 5, 3), uint32],) */;
  %1155 = %1148.1;
  %1156 = %1149.0;
  %1157 = %1154.0;
  (%1155, %1156, %1157, meta[relay.Constant][53] /* ty=Tensor[(8, 30), uint32] */)
}

def @func_11564() -> (Tensor[(4, 15, 7), float64],) {
  %1158 = @func_8810() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %1159 = %1158.0;
  (%1159,)
}

def @func_2632() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) {
  %1160 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %1161 = @func_2415() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1162 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1163 = cast(meta[relay.Constant][54] /* ty=Tensor[(1, 624), bool] */, dtype="bool") /* ty=Tensor[(1, 624), bool] */;
  %1164 = reshape(%1163, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %1165 = @func_2271(%1164) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) */;
  %1166 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1167 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %1168 = %1160.1;
  %1169 = %1161.0;
  %1170 = %1162.0;
  %1171 = %1165.10;
  %1172 = %1166.1;
  %1173 = %1167.2;
  (%1168, %1169, %1170, %1171, meta[relay.Constant][54] /* ty=Tensor[(1, 624), bool] */, %1172, %1173)
}

def @func_3547() -> Tensor[(4, 15, 7), bool] {
  %1174 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1174.0
}

def @func_369(%var_341: Tensor[(8, 6, 16), float32], %var_342: Tensor[(8, 6, 16), float32]) -> (Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) {
  %1175 = cast(%var_342, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %1176 = shape_of(%var_341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1177 = cast(%var_341, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %1178 = dyn.reshape(%1175, %1176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1179 = mod(%1177, %1178) /* ty=Tensor[(8, 6, 16), float32] */;
  %1180 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1179, %1180)
}

def @func_9810() -> Tensor[(768), float32] {
  %1181 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
  %1181.0
}

def @func_5573() -> Tensor[(768), float32] {
  %1182 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %1182.1
}

def @func_6558() -> Tensor[(130), uint8] {
  %1183 = @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */;
  %1183.1
}

def @func_1093(%var_1072: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  %1184 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1185 = %1184.0;
  %1186 = cast(%var_1072, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %1187 = shape_of(%1185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1188 = cast(%1185, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
  %1189 = dyn.reshape(%1186, %1187, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1190 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1191 = cast(meta[relay.Constant][55] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %1192 = reshape(%1191, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %1193 = @func_473(%1192) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */;
  %1194 = logical_xor(%1188, %1189) /* ty=Tensor[(4, 15, 7), int16] */;
  %1195 = %1190.0;
  %1196 = %1193.3;
  (%1194, %1195, %1196, meta[relay.Constant][55] /* ty=Tensor[(768), float32] */)
}

def @func_11802() -> (Tensor[(768), float32],) {
  %1197 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1198 = %1197.0;
  (%1198,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4134(%var_4131: Tensor[(1, 3, 7), uint32], %var_4132: Tensor[(14, 3, 7), uint32], %var_4133: Tensor[(240), uint32]) -> (Tensor[(14, 3, 7), uint32], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32]) {
  %9 = fn (%var_4112: Tensor[(1, 3, 7), uint32], %var_4113: Tensor[(14, 3, 7), uint32], %var_4123: Tensor[(240), uint32]) -> (Tensor[(14, 3, 7), uint32], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32]) {
    %0 = cast(%var_4112, dtype="uint32") /* ty=Tensor[(1, 3, 7), uint32] */;
    %1 = cast(%var_4113, dtype="uint32") /* ty=Tensor[(14, 3, 7), uint32] */;
    %2 = cast(%var_4123, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %3 = cast(%var_4123, dtype="uint32") /* ty=Tensor[(240), uint32] */;
    %4 = reshape(%2, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
    %5 = reshape(%3, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
    %6 = @func_2086(%4, %5) /* ty=(Tensor[(16, 5, 3), uint32],) */;
    %7 = minimum(%0, %1) /* ty=Tensor[(14, 3, 7), uint32] */;
    %8 = %6.0;
    (%7, %8, %var_4123)
  };
  %9(%var_4131, %var_4132, %var_4133) /* ty=(Tensor[(14, 3, 7), uint32], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32]) */
}

def @func_3779(%var_3777: Tensor[(104, 2), bool]) -> (Tensor[(3, 8, 4), float32], Tensor[(3, 16, 13), bool], Tensor[(104, 2), bool], Tensor[(624, 1), bool], Tensor[(4, 15, 7), bool]) {
  @func_3776(%var_3777) /* ty=(Tensor[(3, 8, 4), float32], Tensor[(3, 16, 13), bool], Tensor[(104, 2), bool], Tensor[(624, 1), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_5463(%var_5461: Tensor[(9, 13, 5), float32], %var_5462: Tensor[(9, 13, 5), float32]) -> (Tensor[(9, 13, 5), float32], Tensor[(4, 15, 7), bool], Tensor[(64, 12), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(9, 13, 5), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  %43 = fn (%var_5351: Tensor[(9, 13, 5), float32], %var_5352: Tensor[(9, 13, 5), float32]) -> (Tensor[(9, 13, 5), float32], Tensor[(4, 15, 7), bool], Tensor[(64, 12), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(9, 13, 5), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
    %10 = cast(%var_5352, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
    %11 = shape_of(%var_5351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %12 = cast(%var_5351, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
    %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(64, 12), float32] */, dtype="float32") /* ty=Tensor[(64, 12), float32] */;
    %15 = reshape(%14, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %16 = @func_2449(%15) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
    %17 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %18 = @func_5089() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) */;
    %19 = @func_2415() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %20 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %21 = cast(%var_5352, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
    %22 = atan(%21) /* ty=Tensor[(9, 13, 5), float32] */;
    %23 = cast(%22, dtype="float32") /* ty=Tensor[(9, 13, 5), float32] */;
    %24 = sin(%23) /* ty=Tensor[(9, 13, 5), float32] */;
    %25 = cast(%var_5352, dtype="bool") /* ty=Tensor[(9, 13, 5), bool] */;
    %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%24, dtype="bool") /* ty=Tensor[(9, 13, 5), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %29 = %17.0;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %31 = reshape(%30, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %32 = @func_1058(%31) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
    %33 = @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */;
    %34 = minimum(%12, %13) /* ty=Tensor[(9, 13, 5), float32] */;
    %35 = %16.1;
    %36 = %18.3;
    %37 = %19.0;
    %38 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
    %39 = %20.0;
    %40 = greater_equal(%27, %28) /* ty=Tensor[(9, 13, 5), bool] */;
    %41 = %32.0;
    %42 = %33.0;
    (%34, %35, meta[relay.Constant][0] /* ty=Tensor[(64, 12), float32] */, %29, %36, %37, %38, %39, %40, %41, %42)
  };
  %43(%var_5461, %var_5462) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(4, 15, 7), bool], Tensor[(64, 12), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(9, 13, 5), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */
}

def @func_8411() -> (Tensor[(4, 15, 7), float64],) {
  @func_8409() /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_7850() -> (Tensor[(4, 15, 7), float64], Tensor[(8, 30), float32]) {
  @func_7848() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(8, 30), float32]) */
}

def @func_3301() -> (Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) {
  %52 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) {
    %44 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
    %45 = cast(meta[relay.Constant][1] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %46 = reshape(%45, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
    %47 = @func_2922(%46) /* ty=(Tensor[(2, 3, 4), float64],) */;
    %48 = @func_3133() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), int8]) */;
    %49 = %44.0;
    %50 = %47.0;
    %51 = %48.1;
    (%49, %50, meta[relay.Constant][1] /* ty=Tensor[(24), float64] */, %51)
  };
  %52() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) */
}

def @func_11749(%var_11741: Tensor[(6, 7, 5), float32], %var_11742: Tensor[(6, 7, 5), float32]) -> (Tensor[(6, 7, 5), float32],) {
  %53 = cast(%var_11742, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %54 = shape_of(%var_11741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%var_11741, dtype="float32") /* ty=Tensor[(6, 7, 5), float32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %57 = mod(%55, %56) /* ty=Tensor[(6, 7, 5), float32] */;
  (%57,)
}

def @func_1058(%var_1053: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) {
  %58 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %59 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %60 = %59.0;
  %61 = cast(%var_1053, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %65 = %58.0;
  %66 = minimum(%63, %64) /* ty=Tensor[(4, 15, 7), uint64] */;
  (%65, %66)
}

def @func_280() -> Tensor[(4, 15, 7), bool] {
  @func_278() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_4584() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(448, 4), float32], Tensor[(4, 15, 7), bool]) {
  %77 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(448, 4), float32], Tensor[(4, 15, 7), bool]) {
    %67 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %68 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %69 = cast(meta[relay.Constant][2] /* ty=Tensor[(448, 4), float32] */, dtype="float32") /* ty=Tensor[(448, 4), float32] */;
    %70 = reshape(%69, newshape=[8, 224]) /* ty=Tensor[(8, 224), float32] */;
    %71 = @func_1125(%70) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(8, 224), float32], Tensor[(4, 15, 7), bool]) */;
    %72 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %73 = %67.1;
    %74 = %68.0;
    %75 = %71.1;
    %76 = %72.1;
    (%73, %74, %75, meta[relay.Constant][2] /* ty=Tensor[(448, 4), float32] */, %76)
  };
  %77() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(448, 4), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_10446(%var_10444: Tensor[(420), bool]) -> (Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) {
  @func_10443(%var_10444) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) */
}

def @func_4153() -> Tensor[(52, 4), bool] {
  %79 = fn () -> Tensor[(52, 4), bool] {
    %78 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
    %78.3
  };
  %79() /* ty=Tensor[(52, 4), bool] */
}

def @func_8314() -> (Tensor[(130), uint8],) {
  %81 = fn () -> (Tensor[(130), uint8],) {
    %80 = @func_6627() /* ty=Tensor[(130), uint8] */;
    (%80,)
  };
  %81() /* ty=(Tensor[(130), uint8],) */
}

def @func_6393() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %82 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %83 = @func_3740() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %84 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %85 = %82.1;
  %86 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %87 = %83.0;
  (%84, %85, %86, %87)
}

def @func_11913() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(130), uint8], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(4, 15, 7), bool]) {
  %88 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %89 = cast(meta[relay.Constant][3] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %90 = cast(meta[relay.Constant][3] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %91 = reshape(%89, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %92 = reshape(%90, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
  %93 = @func_2503(%91, %92) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */;
  %94 = @func_9743() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */;
  %95 = @func_7929() /* ty=Tensor[(4, 15, 7), float64] */;
  %96 = %88.0;
  %97 = @func_6627() /* ty=Tensor[(130), uint8] */;
  %98 = %93.3;
  %99 = %94.1;
  (%95, %96, %97, %98, meta[relay.Constant][3] /* ty=Tensor[(686), int64] */, %99)
}

def @func_12372() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) {
  @func_12370() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_4017() -> Tensor[(4, 15, 7), bool] {
  %101 = fn () -> Tensor[(4, 15, 7), bool] {
    %100 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %100.0
  };
  %101() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_12923() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_12921() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_7436() -> (Tensor[(4, 15, 7), uint64],) {
  @func_7434() /* ty=(Tensor[(4, 15, 7), uint64],) */
}

def @func_9242() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  %102 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %103 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %104 = %102.0;
  %105 = %103.0;
  (%104, %105)
}

def @func_3979() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool]) {
  %115 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool]) {
    %106 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
    %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 156), bool] */, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
    %108 = reshape(%107, newshape=[624]) /* ty=Tensor[(624), bool] */;
    %109 = @func_1863(%108) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
    %110 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %111 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
    %112 = %106.2;
    %113 = %109.5;
    %114 = %110.0;
    (%111, %112, %113, meta[relay.Constant][4] /* ty=Tensor[(4, 156), bool] */, %114)
  };
  %115() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_4641() -> Tensor[(4, 15, 7), bool] {
  @func_4639() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_5090() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) {
  %126 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) {
    %116 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
    %117 = %116.1;
    %118 = cast(%117, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %119 = @func_2537() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %120 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
    %121 = @func_4879() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) */;
    %122 = sqrt(%118) /* ty=Tensor[(4, 15, 7), float32] */;
    %123 = %119.3;
    %124 = %120.3;
    %125 = %121.2;
    (%122, %123, %124, %125)
  };
  %126() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) */
}

def @func_5944() -> (Tensor[(768), float32], Tensor[(8, 30), uint32]) {
  %131 = fn () -> (Tensor[(768), float32], Tensor[(8, 30), uint32]) {
    %127 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
    %128 = @func_3862() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) */;
    %129 = %127.1;
    %130 = %128.3;
    (%129, %130)
  };
  %131() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */
}

def @func_10568() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float64]) {
  %132 = @func_3862() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) */;
  %133 = @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %134 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  %135 = %132.1;
  %136 = %133.0;
  (%134, %135, %136)
}

def @func_369(%var_341: Tensor[(8, 6, 16), float32], %var_342: Tensor[(8, 6, 16), float32]) -> (Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) {
  %137 = cast(%var_342, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %138 = shape_of(%var_341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_341, dtype="float32") /* ty=Tensor[(8, 6, 16), float32] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %141 = mod(%139, %140) /* ty=Tensor[(8, 6, 16), float32] */;
  %142 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%141, %142)
}

def @func_5824(%var_5822: Tensor[(585), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(9, 13, 5), float32], Tensor[(585), float32], Tensor[(4, 15, 7), bool]) {
  @func_5821(%var_5822) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(9, 13, 5), float32], Tensor[(585), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_7391() -> (Tensor[(4, 15, 7), bool],) {
  %143 = @func_2632() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %144 = %143.5;
  (%144,)
}

def @func_3951() -> (Tensor[(4, 15, 7), float64],) {
  %145 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %146 = %145.1;
  (%146,)
}

def @func_7269() -> (Tensor[(14, 1, 1), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %153 = fn () -> (Tensor[(14, 1, 1), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
    %147 = cast(meta[relay.Constant][5] /* ty=Tensor[(14, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1, 1), float32] */;
    %148 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
    %149 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %150 = sinh(%147) /* ty=Tensor[(14, 1, 1), float32] */;
    %151 = %148.0;
    %152 = %149.1;
    (%150, %151, %152)
  };
  %153() /* ty=(Tensor[(14, 1, 1), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_9803() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) {
  @func_9801() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */
}

def @func_11717() -> (Tensor[(4, 15, 7), bool],) {
  %155 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %154 = @func_10078() /* ty=Tensor[(4, 15, 7), bool] */;
    (%154,)
  };
  %155() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_11837() -> Tensor[(4, 15, 7), bool] {
  @func_11835() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_6000() -> Tensor[(4, 15, 7), bool] {
  @func_5998() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_373(%var_371: Tensor[(8, 6, 16), float32], %var_372: Tensor[(8, 6, 16), float32]) -> (Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) {
  @func_369(%var_371, %var_372) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_12292() -> (Tensor[(7, 3, 2), float64],) {
  @func_12290() /* ty=(Tensor[(7, 3, 2), float64],) */
}

def @func_3807() -> (Tensor[(4, 15, 7), float64],) {
  %156 = @func_3531() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %157 = %156.1;
  (%157,)
}

def @func_800() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %163 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %158 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
    %159 = cast(%158, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %160 = reshape(%159, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
    %161 = @func_448(%160) /* ty=(Tensor[(4, 15, 7), bool],) */;
    %162 = %161.0;
    (%158, %162)
  };
  %163() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_7434() -> (Tensor[(4, 15, 7), uint64],) {
  %164 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %165 = %164.0;
  (%165,)
}

def @func_12562(%var_12544: Tensor[(13, 2, 3), float64]) -> (Tensor[(13, 2, 3), bool], Tensor[(4, 15, 7), bool]) {
  %166 = cast(%var_12544, dtype="float64") /* ty=Tensor[(13, 2, 3), float64] */;
  %167 = sigmoid(%166) /* ty=Tensor[(13, 2, 3), float64] */;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(13, 2, 3), float32] */;
  %169 = acosh(%168) /* ty=Tensor[(13, 2, 3), float32] */;
  %170 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 2, 3), float32] */, dtype="bool") /* ty=Tensor[(13, 2, 3), bool] */;
  %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%169, dtype="bool") /* ty=Tensor[(13, 2, 3), bool] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %174 = @func_11694() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */;
  %175 = equal(%172, %173) /* ty=Tensor[(13, 2, 3), bool] */;
  %176 = %174.4;
  (%175, %176)
}

def @func_9997() -> Tensor[(4, 15, 7), bool] {
  %177 = @func_5670() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) */;
  %177.0
}

def @func_7814(%var_7789: Tensor[(12, 5, 1), int32]) -> (Tensor[(12, 5, 1), bool], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) {
  %178 = cast(-6 /* ty=int32 */, dtype="bool") /* ty=bool */;
  %179 = cast(%var_7789, dtype="bool") /* ty=Tensor[(12, 5, 1), bool] */;
  %180 = cast(meta[relay.Constant][7] /* ty=Tensor[(420), bool] */, dtype="bool") /* ty=Tensor[(420), bool] */;
  %181 = reshape(%180, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %182 = @func_691(%181) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %183 = less_equal(%178, %179) /* ty=Tensor[(12, 5, 1), bool] */;
  %184 = %182.0;
  (%183, %184, meta[relay.Constant][7] /* ty=Tensor[(420), bool] */)
}

def @func_4265() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %189 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %185 = @func_3217() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) */;
    %186 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %187 = %185.1;
    %188 = %186.0;
    (%187, %188)
  };
  %189() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_11695() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  %199 = fn () -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
    %190 = @func_6254() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
    %191 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %192 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
    %193 = @func_5255() /* ty=(Tensor[(4, 15, 7), uint64],) */;
    %194 = %190.1;
    %195 = %191.0;
    %196 = %192.0;
    %197 = %193.0;
    %198 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
    (%194, %195, %196, %197, %198)
  };
  %199() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */
}

def @func_1639(%var_1637: Tensor[(1, 16, 13), bool], %var_1638: Tensor[(3, 16, 13), bool]) -> (Tensor[(3, 16, 13), bool],) {
  @func_1635(%var_1637, %var_1638) /* ty=(Tensor[(3, 16, 13), bool],) */
}

def @func_7501() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %205 = fn () -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
    %200 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %201 = @func_6197() /* ty=(Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) */;
    %202 = %200.2;
    %203 = %201.1;
    %204 = @func_4179() /* ty=Tensor[(4, 15, 7), float64] */;
    (%202, %203, %204)
  };
  %205() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */
}

def @func_9593() -> (Tensor[(4, 15, 7), bool], Tensor[(15, 7, 7), int8]) {
  @func_9591() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(15, 7, 7), int8]) */
}

def @func_10521(%var_10512: Tensor[(60), int32]) -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(60), int32], Tensor[(4, 15, 7), bool]) {
  %206 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %207 = %206.2;
  %208 = cast(%207, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %209 = reshape(%208, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), uint64] */;
  %210 = @func_1774(%209) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */;
  %211 = cast(%var_10512, dtype="int32") /* ty=Tensor[(60), int32] */;
  %212 = reshape(%211, newshape=[3, 20]) /* ty=Tensor[(3, 20), int32] */;
  %213 = @func_8235(%212) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) */;
  %214 = %210.1;
  %215 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %216 = %213.1;
  %217 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  (%207, %214, %215, %216, %var_10512, %217)
}

def @func_2778(%var_2776: Tensor[(5, 2, 13), uint8], %var_2777: Tensor[(5, 2, 13), uint8]) -> (Tensor[(5, 2, 13), uint8], Tensor[(5, 2, 13), bool], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %234 = fn (%var_2734: Tensor[(5, 2, 13), uint8], %var_2735: Tensor[(5, 2, 13), uint8]) -> (Tensor[(5, 2, 13), uint8], Tensor[(5, 2, 13), bool], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
    %218 = cast(%var_2735, dtype="uint8") /* ty=Tensor[(5, 2, 13), uint8] */;
    %219 = shape_of(%var_2734, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%var_2734, dtype="uint8") /* ty=Tensor[(5, 2, 13), uint8] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %222 = cast(%var_2734, dtype="bool") /* ty=Tensor[(5, 2, 13), bool] */;
    %223 = shape_of(%var_2735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%var_2735, dtype="bool") /* ty=Tensor[(5, 2, 13), bool] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %226 = cast(meta[relay.Constant][8] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %227 = reshape(%226, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %228 = @func_2449(%227) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
    %229 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %230 = bitwise_or(%220, %221) /* ty=Tensor[(5, 2, 13), uint8] */;
    %231 = logical_or(%224, %225) /* ty=Tensor[(5, 2, 13), bool] */;
    %232 = %228.1;
    %233 = %229.0;
    (%230, %231, %232, meta[relay.Constant][8] /* ty=Tensor[(768), float32] */, %233)
  };
  %234(%var_2776, %var_2777) /* ty=(Tensor[(5, 2, 13), uint8], Tensor[(5, 2, 13), bool], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_2274(%var_2272: Tensor[(624), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) {
  @func_2271(%var_2272) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_11803() -> (Tensor[(768), float32],) {
  %237 = fn () -> (Tensor[(768), float32],) {
    %235 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %236 = %235.0;
    (%236,)
  };
  %237() /* ty=(Tensor[(768), float32],) */
}

def @func_4179() -> Tensor[(4, 15, 7), float64] {
  %238 = @func_3531() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %238.1
}

def @func_9094() -> (Tensor[(4, 15, 7), bool],) {
  %241 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %239 = @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %240 = %239.0;
    (%240,)
  };
  %241() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_4039() -> (Tensor[(768), float32],) {
  %244 = fn () -> (Tensor[(768), float32],) {
    %242 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
    %243 = %242.1;
    (%243,)
  };
  %244() /* ty=(Tensor[(768), float32],) */
}

def @func_9547(%var_9546: Tensor[(390), float32]) -> (Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) {
  %255 = fn (%var_9543: Tensor[(390), float32]) -> (Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) {
    %245 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
    %246 = @func_2632() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
    %247 = cast(%var_9543, dtype="float32") /* ty=Tensor[(390), float32] */;
    %248 = cast(%var_9543, dtype="float32") /* ty=Tensor[(390), float32] */;
    %249 = reshape(%247, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
    %250 = reshape(%248, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
    %251 = @func_2319(%249, %250) /* ty=(Tensor[(13, 5, 6), float32],) */;
    %252 = %245.1;
    %253 = %246.5;
    %254 = %251.0;
    (%252, %253, %254, %var_9543)
  };
  %255(%var_9546) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) */
}

def @func_12622(%var_12620: Tensor[(4, 1, 8), bool]) -> (Tensor[(4, 6, 8), bool],) {
  @func_12619(%var_12620) /* ty=(Tensor[(4, 6, 8), bool],) */
}

def @func_5573() -> Tensor[(768), float32] {
  %256 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %256.1
}

def @func_12869() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  %261 = fn () -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
    %257 = @func_12441() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) */;
    %258 = @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %259 = %257.1;
    %260 = %258.0;
    (%259, %260)
  };
  %261() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */
}

def @func_2506(%var_2504: Tensor[(7, 7, 14), int64], %var_2505: Tensor[(7, 7, 14), int64]) -> (Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) {
  %273 = fn (%var_2484: Tensor[(7, 7, 14), int64], %var_2485: Tensor[(7, 7, 14), int64]) -> (Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) {
    %262 = cast(%var_2485, dtype="int64") /* ty=Tensor[(7, 7, 14), int64] */;
    %263 = shape_of(%var_2484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %264 = cast(%var_2484, dtype="int64") /* ty=Tensor[(7, 7, 14), int64] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %266 = cast(meta[relay.Constant][9] /* ty=Tensor[(420), bool] */, dtype="bool") /* ty=Tensor[(420), bool] */;
    %267 = reshape(%266, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
    %268 = @func_691(%267) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
    %269 = cast(%var_2485, dtype="float32") /* ty=Tensor[(7, 7, 14), float32] */;
    %270 = bitwise_or(%264, %265) /* ty=Tensor[(7, 7, 14), int64] */;
    %271 = %268.1;
    %272 = cos(%269) /* ty=Tensor[(7, 7, 14), float32] */;
    (%270, %271, meta[relay.Constant][9] /* ty=Tensor[(420), bool] */, %272)
  };
  %273(%var_2504, %var_2505) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */
}

def @func_7608() -> (Tensor[(4, 15, 7), bool], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %274 = @func_7391() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %275 = cast(meta[relay.Constant][10] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %276 = cast(meta[relay.Constant][10] /* ty=Tensor[(240), uint32] */, dtype="uint32") /* ty=Tensor[(240), uint32] */;
  %277 = reshape(%275, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %278 = reshape(%276, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
  %279 = @func_2086(%277, %278) /* ty=(Tensor[(16, 5, 3), uint32],) */;
  %280 = @func_3049() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %281 = %274.0;
  %282 = %279.0;
  %283 = %280.0;
  %284 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
  (%281, %282, meta[relay.Constant][10] /* ty=Tensor[(240), uint32] */, %283, %284)
}

def @func_9412() -> (Tensor[(2, 3, 4), float32], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(15, 6, 1), float32], Tensor[(15, 6), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  %304 = fn () -> (Tensor[(2, 3, 4), float32], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(15, 6, 1), float32], Tensor[(15, 6), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
    %285 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
    %286 = %285.1;
    %287 = cast(%286, dtype="float32") /* ty=Tensor[(2, 3, 4), float32] */;
    %288 = cast(meta[relay.Constant][11] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
    %289 = cast(meta[relay.Constant][11] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
    %290 = reshape(%288, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
    %291 = reshape(%289, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
    %292 = @func_2503(%290, %291) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */;
    %293 = cast(meta[relay.Constant][12] /* ty=Tensor[(15, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 6), float32] */;
    %294 = reshape(%293, newshape=[15, 6, 1]) /* ty=Tensor[(15, 6, 1), float32] */;
    %295 = @func_5230(%294) /* ty=(Tensor[(15, 6, 1), float32],) */;
    %296 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
    %297 = @func_6055() /* ty=(Tensor[(4, 15, 7), uint64],) */;
    %298 = cosh(%287) /* ty=Tensor[(2, 3, 4), float32] */;
    %299 = %292.3;
    %300 = %295.0;
    %301 = %296.2;
    %302 = %297.0;
    %303 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
    (%298, %299, meta[relay.Constant][11] /* ty=Tensor[(686), int64] */, %300, meta[relay.Constant][12] /* ty=Tensor[(15, 6), float32] */, %301, %302, %303)
  };
  %304() /* ty=(Tensor[(2, 3, 4), float32], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(15, 6, 1), float32], Tensor[(15, 6), float32], Tensor[(4, 156), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */
}

def @func_7393() -> (Tensor[(4, 15, 7), bool],) {
  @func_7391() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_11703() -> Tensor[(4, 15, 7), bool] {
  %305 = fn () -> Tensor[(4, 15, 7), bool] {
    @func_1403() /* ty=Tensor[(4, 15, 7), bool] */
  };
  %305() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_4612(%var_4611: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) {
  %315 = fn (%var_4604: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) {
    %306 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
    %307 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %308 = %307.1;
    %309 = cast(%var_4604, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
    %311 = cast(%308, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %313 = %306.5;
    %314 = divide(%311, %312) /* ty=Tensor[(4, 15, 7), float32] */;
    (%313, %314)
  };
  %315(%var_4611) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) */
}

def @func_3953() -> (Tensor[(4, 15, 7), float64],) {
  @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_9259() -> (Tensor[(4, 15, 7), bool],) {
  %316 = @func_6895() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */;
  %317 = %316.0;
  (%317,)
}

def @func_8085(%var_8082: Tensor[(21), uint32], %var_8083: Tensor[(294), uint32], %var_8084: Tensor[(240, 1), uint32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(24), float64], Tensor[(14, 3, 7), uint32], Tensor[(21), uint32], Tensor[(294), uint32], Tensor[(240, 1), uint32]) {
  %334 = fn (%var_8069: Tensor[(21), uint32], %var_8070: Tensor[(294), uint32], %var_8071: Tensor[(240, 1), uint32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(24), float64], Tensor[(14, 3, 7), uint32], Tensor[(21), uint32], Tensor[(294), uint32], Tensor[(240, 1), uint32]) {
    %318 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
    %319 = @func_6393() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %320 = @func_4988() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %321 = @func_7138() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */;
    %322 = cast(%var_8069, dtype="uint32") /* ty=Tensor[(21), uint32] */;
    %323 = cast(%var_8070, dtype="uint32") /* ty=Tensor[(294), uint32] */;
    %324 = cast(%var_8071, dtype="uint32") /* ty=Tensor[(240, 1), uint32] */;
    %325 = reshape(%322, newshape=[1, 3, 7]) /* ty=Tensor[(1, 3, 7), uint32] */;
    %326 = reshape(%323, newshape=[14, 3, 7]) /* ty=Tensor[(14, 3, 7), uint32] */;
    %327 = reshape(%324, newshape=[240]) /* ty=Tensor[(240), uint32] */;
    %328 = @func_4130(%325, %326, %327) /* ty=(Tensor[(14, 3, 7), uint32], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32]) */;
    %329 = %318.2;
    %330 = %319.2;
    %331 = %320.0;
    %332 = %321.4;
    %333 = %328.0;
    (%329, %330, %331, %332, %333, %var_8069, %var_8070, %var_8071)
  };
  %334(%var_8082, %var_8083, %var_8084) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(24), float64], Tensor[(14, 3, 7), uint32], Tensor[(21), uint32], Tensor[(294), uint32], Tensor[(240, 1), uint32]) */
}

def @func_9261() -> (Tensor[(4, 15, 7), bool],) {
  @func_9259() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_1866(%var_1864: Tensor[(624), bool]) -> (Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) {
  @func_1863(%var_1864) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */
}

def @func_5672() -> (Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) {
  @func_5670() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) */
}

def @func_12441() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) {
  %335 = @func_9743() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */;
  %336 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %337 = %335.0;
  (%336, %337)
}

def @func_3776(%var_3759: Tensor[(104, 2), bool]) -> (Tensor[(3, 8, 4), float32], Tensor[(3, 16, 13), bool], Tensor[(104, 2), bool], Tensor[(624, 1), bool], Tensor[(4, 15, 7), bool]) {
  %338 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 8, 4), float32] */, dtype="float32") /* ty=Tensor[(3, 8, 4), float32] */;
  %339 = cast(%var_3759, dtype="bool") /* ty=Tensor[(104, 2), bool] */;
  %340 = cast(meta[relay.Constant][14] /* ty=Tensor[(624, 1), bool] */, dtype="bool") /* ty=Tensor[(624, 1), bool] */;
  %341 = reshape(%339, newshape=[208, 1]) /* ty=Tensor[(208, 1), bool] */;
  %342 = reshape(%340, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %343 = @func_1706(%341, %342) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) */;
  %344 = @func_2537() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %345 = log10(%338) /* ty=Tensor[(3, 8, 4), float32] */;
  %346 = %343.2;
  %347 = %344.4;
  (%345, %346, %var_3759, meta[relay.Constant][14] /* ty=Tensor[(624, 1), bool] */, %347)
}

def @func_9209(%var_9207: Tensor[(10, 10, 7), bool], %var_9208: Tensor[(60), int32]) -> (Tensor[(10, 10, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(60), int32], Tensor[(4, 15, 7), bool], Tensor[(624, 1), float64]) {
  @func_9205(%var_9207, %var_9208) /* ty=(Tensor[(10, 10, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(60), int32], Tensor[(4, 15, 7), bool], Tensor[(624, 1), float64]) */
}

def @func_11738() -> Tensor[(4, 15, 7), bool] {
  %349 = fn () -> Tensor[(4, 15, 7), bool] {
    %348 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %348.0
  };
  %349() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_1908() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) {
  %350 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %351 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
  %352 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  (%350, %351, %352)
}

def @func_10952() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(8, 14, 11), int64]) {
  %360 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(8, 14, 11), int64]) {
    %353 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %354 = %353.0;
    %355 = cast(%354, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %356 = reshape(%355, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
    %357 = @func_691(%356) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
    %358 = %357.1;
    %359 = @func_9517() /* ty=Tensor[(8, 14, 11), int64] */;
    (%354, %358, %359)
  };
  %360() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(8, 14, 11), int64]) */
}

def @func_10443(%var_10418: Tensor[(420), bool]) -> (Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) {
  %361 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %362 = cast(%var_10418, dtype="bool") /* ty=Tensor[(420), bool] */;
  %363 = reshape(%362, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %364 = @func_691(%363) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %365 = %361.1;
  %366 = %364.0;
  (%365, %366, %var_10418)
}

def @func_10209(%var_10207: Tensor[(6, 8, 9), float32]) -> (Tensor[(6, 8, 9), float32], Tensor[(8, 6, 16), float32], Tensor[(768), float32], Tensor[(4, 15, 7), float64]) {
  @func_10206(%var_10207) /* ty=(Tensor[(6, 8, 9), float32], Tensor[(8, 6, 16), float32], Tensor[(768), float32], Tensor[(4, 15, 7), float64]) */
}

def @func_11835() -> Tensor[(4, 15, 7), bool] {
  %367 = @func_11320() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8]) */;
  %367.0
}

def @func_830(%var_829: Tensor[(8, 16, 14), float32]) -> Tensor[(8, 16, 14), float64] {
  %371 = fn (%var_820: Tensor[(8, 16, 14), float32]) -> Tensor[(8, 16, 14), float64] {
    %368 = cast(%var_820, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
    %369 = asinh(%368) /* ty=Tensor[(8, 16, 14), float32] */;
    %370 = cast(%369, dtype="float64") /* ty=Tensor[(8, 16, 14), float64] */;
    erf(%370) /* ty=Tensor[(8, 16, 14), float64] */
  };
  %371(%var_829) /* ty=Tensor[(8, 16, 14), float64] */
}

def @func_12053() -> Tensor[(4, 15, 7), bool] {
  %373 = fn () -> Tensor[(4, 15, 7), bool] {
    %372 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
    %372.0
  };
  %373() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_9801() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) {
  %374 = @func_6627() /* ty=Tensor[(130), uint8] */;
  %375 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%374, %375)
}

def @func_12807() -> (Tensor[(4, 15, 7), bool], Tensor[(14, 3), uint32], Tensor[(4, 156), int32], Tensor[(7, 3, 2), float64]) {
  %376 = @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %377 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %378 = %377.2;
  %379 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 156), bool] */, dtype="int32") /* ty=Tensor[(4, 156), int32] */;
  %380 = shape_of(%378, dtype="int32") /* ty=Tensor[(2), int32] */;
  %381 = cast(%378, dtype="int32") /* ty=Tensor[(4, 156), int32] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %383 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 3), uint32] */, dtype="uint32") /* ty=Tensor[(14, 3), uint32] */;
  %384 = cast(meta[relay.Constant][15] /* ty=Tensor[(14, 3), uint32] */, dtype="uint32") /* ty=Tensor[(14, 3), uint32] */;
  %385 = reshape(%383, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
  %386 = reshape(%384, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
  %387 = @func_6700(%385, %386) /* ty=Tensor[(7, 3, 2), uint32] */;
  %388 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 3, 2), uint32] */, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %392 = %376.0;
  %393 = maximum(%381, %382) /* ty=Tensor[(4, 156), int32] */;
  %394 = floor_mod(%390, %391) /* ty=Tensor[(7, 3, 2), float64] */;
  (%392, meta[relay.Constant][15] /* ty=Tensor[(14, 3), uint32] */, %393, %394)
}

def @func_8674() -> (Tensor[(4, 15, 7), float32],) {
  %399 = fn () -> (Tensor[(4, 15, 7), float32],) {
    %395 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
    %396 = %395.0;
    %397 = cast(%396, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %398 = cosh(%397) /* ty=Tensor[(4, 15, 7), float32] */;
    (%398,)
  };
  %399() /* ty=(Tensor[(4, 15, 7), float32],) */
}

def @func_10370() -> Tensor[(4, 15, 7), bool] {
  %400 = @func_10286() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %400.0
}

def @func_5905() -> (Tensor[(768), float32],) {
  %401 = @func_5573() /* ty=Tensor[(768), float32] */;
  (%401,)
}

def @func_6700(%var_6690: Tensor[(7, 3, 2), uint32], %var_6691: Tensor[(7, 3, 2), uint32]) -> Tensor[(7, 3, 2), uint32] {
  %402 = cast(%var_6691, dtype="uint32") /* ty=Tensor[(7, 3, 2), uint32] */;
  %403 = shape_of(%var_6690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%var_6690, dtype="uint32") /* ty=Tensor[(7, 3, 2), uint32] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%404, %405) /* ty=Tensor[(7, 3, 2), uint32] */
}

def @func_3548() -> Tensor[(4, 15, 7), bool] {
  %407 = fn () -> Tensor[(4, 15, 7), bool] {
    %406 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %406.0
  };
  %407() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_7640(%var_7628: Tensor[(6, 1, 16), float32]) -> (Tensor[(6, 1, 16), float32],) {
  %408 = cast(%var_7628, dtype="float32") /* ty=Tensor[(6, 1, 16), float32] */;
  %409 = exp(%408) /* ty=Tensor[(6, 1, 16), float32] */;
  (%409,)
}

def @func_872() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_6199() -> (Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) {
  @func_6197() /* ty=(Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_11399(%var_11398: Tensor[(4, 4, 8), float64]) -> (Tensor[(4, 4, 8), float64],) {
  %412 = fn (%var_11393: Tensor[(4, 4, 8), float64]) -> (Tensor[(4, 4, 8), float64],) {
    %410 = cast(%var_11393, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
    %411 = asinh(%410) /* ty=Tensor[(4, 4, 8), float64] */;
    (%411,)
  };
  %412(%var_11398) /* ty=(Tensor[(4, 4, 8), float64],) */
}

def @func_9485() -> Tensor[(768), float32] {
  %413 = @func_5905() /* ty=(Tensor[(768), float32],) */;
  %413.0
}

def @func_4303() -> (Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) {
  %414 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %415 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %416 = %414.1;
  %417 = %415.2;
  (%416, %417)
}

def @func_3000() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) {
  %428 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) {
    %418 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %419 = cast(meta[relay.Constant][18] /* ty=Tensor[(130), uint8] */, dtype="uint8") /* ty=Tensor[(130), uint8] */;
    %420 = cast(meta[relay.Constant][18] /* ty=Tensor[(130), uint8] */, dtype="uint8") /* ty=Tensor[(130), uint8] */;
    %421 = reshape(%419, newshape=[5, 2, 13]) /* ty=Tensor[(5, 2, 13), uint8] */;
    %422 = reshape(%420, newshape=[5, 2, 13]) /* ty=Tensor[(5, 2, 13), uint8] */;
    %423 = @func_2775(%421, %422) /* ty=(Tensor[(5, 2, 13), uint8], Tensor[(5, 2, 13), bool], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
    %424 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
    %425 = %418.0;
    %426 = %423.3;
    %427 = %424.0;
    (%425, %426, meta[relay.Constant][18] /* ty=Tensor[(130), uint8] */, %427)
  };
  %428() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */
}

def @func_7296(%var_7295: Tensor[(15, 4, 15), float64]) -> Tensor[(15, 4, 15), float64] {
  %433 = fn (%var_7289: Tensor[(15, 4, 15), float64]) -> Tensor[(15, 4, 15), float64] {
    %429 = cast(%var_7289, dtype="float64") /* ty=Tensor[(15, 4, 15), float64] */;
    %430 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(15, 4, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %431 = cast(meta[relay.Constant][19] /* ty=Tensor[(15, 4, 15), float64] */, dtype="float64") /* ty=Tensor[(15, 4, 15), float64] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%431, %432) /* ty=Tensor[(15, 4, 15), float64] */
  };
  %433(%var_7295) /* ty=Tensor[(15, 4, 15), float64] */
}

def @func_5540() -> (Tensor[(4, 15, 7), bool],) {
  %434 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %435 = %434.1;
  (%435,)
}

def @func_2416() -> (Tensor[(4, 15, 7), bool],) {
  %438 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %436 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
    %437 = %436.1;
    (%437,)
  };
  %438() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_10693(%var_10692: Tensor[(1, 390), float32]) -> (Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32]) {
  %450 = fn (%var_10689: Tensor[(1, 390), float32]) -> (Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32]) {
    %439 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
    %440 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %441 = cast(%var_10689, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
    %442 = cast(%var_10689, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
    %443 = reshape(%441, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
    %444 = reshape(%442, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
    %445 = @func_2319(%443, %444) /* ty=(Tensor[(13, 5, 6), float32],) */;
    %446 = %439.2;
    %447 = %440.1;
    %448 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
    %449 = %445.0;
    (%446, %447, %448, %449, %var_10689)
  };
  %450(%var_10692) /* ty=(Tensor[(4, 156), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32]) */
}

def @func_4173(%var_4171: Tensor[(70, 6), float64], %var_4172: Tensor[(624), bool]) -> (Tensor[(130), uint8], Tensor[(4, 15, 7), float64], Tensor[(70, 6), float64], Tensor[(208), bool], Tensor[(624), bool]) {
  %461 = fn (%var_4159: Tensor[(70, 6), float64], %var_4163: Tensor[(624), bool]) -> (Tensor[(130), uint8], Tensor[(4, 15, 7), float64], Tensor[(70, 6), float64], Tensor[(208), bool], Tensor[(624), bool]) {
    %451 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
    %452 = cast(%var_4159, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
    %453 = reshape(%452, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %454 = @func_1093(%453) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
    %455 = cast(%var_4163, dtype="bool") /* ty=Tensor[(624), bool] */;
    %456 = reshape(%455, newshape=[624]) /* ty=Tensor[(624), bool] */;
    %457 = @func_1863(%456) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
    %458 = %451.2;
    %459 = %454.1;
    %460 = %457.0;
    (%458, %459, %var_4159, %460, %var_4163)
  };
  %461(%var_4171, %var_4172) /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), float64], Tensor[(70, 6), float64], Tensor[(208), bool], Tensor[(624), bool]) */
}

def @func_11471() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) {
  %466 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) {
    %462 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
    %463 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
    %464 = %462.0;
    %465 = %463.0;
    (%464, %465)
  };
  %466() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) */
}

def @func_10972() -> (Tensor[(4, 15, 7), bool],) {
  %467 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  (%467,)
}

def @func_1125(%var_1104: Tensor[(8, 224), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(8, 224), float32], Tensor[(4, 15, 7), bool]) {
  %468 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %469 = cast(%var_1104, dtype="float32") /* ty=Tensor[(8, 224), float32] */;
  %470 = reshape(%469, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %471 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %472 = %468.0;
  %473 = @func_828(%470) /* ty=Tensor[(8, 16, 14), float64] */;
  %474 = %471.0;
  (%472, %473, %var_1104, %474)
}

def @func_6610() -> (Tensor[(4, 15, 7), bool],) {
  %476 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %475 = @func_5998() /* ty=Tensor[(4, 15, 7), bool] */;
    (%475,)
  };
  %476() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_2449(%var_2447: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  %477 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  %478 = cast(%477, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %479 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %480 = cast(%var_2447, dtype="float32") /* ty=Tensor[(768), float32] */;
  %481 = cast(%var_2447, dtype="float32") /* ty=Tensor[(768), float32] */;
  %482 = reshape(%480, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %483 = reshape(%481, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %484 = @func_369(%482, %483) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %485 = acosh(%478) /* ty=Tensor[(4, 15, 7), float64] */;
  %486 = %479.0;
  %487 = %484.0;
  (%485, %486, %487, %var_2447)
}

def @func_7817(%var_7815: Tensor[(12, 5, 1), int32]) -> (Tensor[(12, 5, 1), bool], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) {
  @func_7814(%var_7815) /* ty=(Tensor[(12, 5, 1), bool], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) */
}

def @func_7216() -> Tensor[(4, 15, 7), bool] {
  %489 = fn () -> Tensor[(4, 15, 7), bool] {
    %488 = @func_4879() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) */;
    %488.1
  };
  %489() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_2633() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) {
  %504 = fn () -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) {
    %490 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %491 = @func_2415() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %492 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %493 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 624), bool] */, dtype="bool") /* ty=Tensor[(1, 624), bool] */;
    %494 = reshape(%493, newshape=[624]) /* ty=Tensor[(624), bool] */;
    %495 = @func_2271(%494) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) */;
    %496 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %497 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
    %498 = %490.1;
    %499 = %491.0;
    %500 = %492.0;
    %501 = %495.10;
    %502 = %496.1;
    %503 = %497.2;
    (%498, %499, %500, %501, meta[relay.Constant][20] /* ty=Tensor[(1, 624), bool] */, %502, %503)
  };
  %504() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */
}

def @func_4717() -> (Tensor[(4, 15, 7), bool],) {
  @func_4715() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_3049() -> (Tensor[(4, 15, 7), bool],) {
  %505 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %506 = %505.1;
  (%506,)
}

def @func_11793(%var_11792: Tensor[(11, 2, 4), float64]) -> (Tensor[(11, 2, 4), int8], Tensor[(4, 15, 7), bool]) {
  %515 = fn (%var_11777: Tensor[(11, 2, 4), float64]) -> (Tensor[(11, 2, 4), int8], Tensor[(4, 15, 7), bool]) {
    %507 = cast(%var_11777, dtype="float64") /* ty=Tensor[(11, 2, 4), float64] */;
    %508 = tan(%507) /* ty=Tensor[(11, 2, 4), float64] */;
    %509 = cast(%var_11777, dtype="int8") /* ty=Tensor[(11, 2, 4), int8] */;
    %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %511 = cast(%508, dtype="int8") /* ty=Tensor[(11, 2, 4), int8] */;
    %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %513 = bitwise_or(%511, %512) /* ty=Tensor[(11, 2, 4), int8] */;
    %514 = @func_11737() /* ty=Tensor[(4, 15, 7), bool] */;
    (%513, %514)
  };
  %515(%var_11792) /* ty=(Tensor[(11, 2, 4), int8], Tensor[(4, 15, 7), bool]) */
}

def @func_3863() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) {
  %526 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) {
    %516 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %517 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %518 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 30), uint32] */, dtype="uint32") /* ty=Tensor[(8, 30), uint32] */;
    %519 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 30), uint32] */, dtype="uint32") /* ty=Tensor[(8, 30), uint32] */;
    %520 = reshape(%518, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
    %521 = reshape(%519, newshape=[16, 5, 3]) /* ty=Tensor[(16, 5, 3), uint32] */;
    %522 = @func_2086(%520, %521) /* ty=(Tensor[(16, 5, 3), uint32],) */;
    %523 = %516.1;
    %524 = %517.0;
    %525 = %522.0;
    (%523, %524, %525, meta[relay.Constant][21] /* ty=Tensor[(8, 30), uint32] */)
  };
  %526() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(16, 5, 3), uint32], Tensor[(8, 30), uint32]) */
}

def @func_1061(%var_1059: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) {
  @func_1058(%var_1059) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */
}

def @func_4305() -> (Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) {
  @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */
}

def @func_4492() -> Tensor[(4, 15, 7), float64] {
  %527 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %527.1
}

def @func_12260() -> Tensor[(4, 15, 7), bool] {
  %529 = fn () -> Tensor[(4, 15, 7), bool] {
    %528 = @func_9259() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %528.0
  };
  %529() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_3051() -> (Tensor[(4, 15, 7), bool],) {
  @func_3049() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_3367(%var_3366: Tensor[(10, 3, 9), int8]) -> (Tensor[(10, 3, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(1792), float32], Tensor[(4, 15, 7), bool], Tensor[(10, 3, 9), float32]) {
  %541 = fn (%var_3330: Tensor[(10, 3, 9), int8]) -> (Tensor[(10, 3, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(1792), float32], Tensor[(4, 15, 7), bool], Tensor[(10, 3, 9), float32]) {
    %530 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="bool") /* ty=bool */;
    %531 = cast(%var_3330, dtype="bool") /* ty=Tensor[(10, 3, 9), bool] */;
    %532 = cast(meta[relay.Constant][23] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %533 = reshape(%532, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
    %534 = cast(%var_3330, dtype="float32") /* ty=Tensor[(10, 3, 9), float32] */;
    %535 = sigmoid(%534) /* ty=Tensor[(10, 3, 9), float32] */;
    %536 = cast(%535, dtype="float32") /* ty=Tensor[(10, 3, 9), float32] */;
    %537 = equal(%530, %531) /* ty=Tensor[(10, 3, 9), bool] */;
    %538 = @func_828(%533) /* ty=Tensor[(8, 16, 14), float64] */;
    %539 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
    %540 = atan(%536) /* ty=Tensor[(10, 3, 9), float32] */;
    (%537, %538, meta[relay.Constant][23] /* ty=Tensor[(1792), float32] */, %539, %540)
  };
  %541(%var_3366) /* ty=(Tensor[(10, 3, 9), bool], Tensor[(8, 16, 14), float64], Tensor[(1792), float32], Tensor[(4, 15, 7), bool], Tensor[(10, 3, 9), float32]) */
}

def @func_9723(%var_9666: Tensor[(6, 8, 12), uint32], %var_9667: Tensor[(6, 8, 12), uint32], %var_9711: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), uint64], Tensor[(6, 8, 12), int16], Tensor[(6, 8, 12), bool]) {
  %542 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %543 = %542.2;
  %544 = cast(%var_9711, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %548 = cast(%var_9667, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %549 = shape_of(%var_9666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(%var_9666, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %552 = less_equal(%550, %551) /* ty=Tensor[(6, 8, 12), bool] */;
  %553 = cast(%552, dtype="int16") /* ty=Tensor[(6, 8, 12), int16] */;
  %554 = shape_of(%var_9667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_9667, dtype="int16") /* ty=Tensor[(6, 8, 12), int16] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %557 = cast(%var_9667, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %558 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%552, dtype="bool") /* ty=Tensor[(6, 8, 12), bool] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %561 = subtract(%546, %547) /* ty=Tensor[(4, 15, 7), uint64] */;
  %562 = maximum(%555, %556) /* ty=Tensor[(6, 8, 12), int16] */;
  %563 = greater(%559, %560) /* ty=Tensor[(6, 8, 12), bool] */;
  (%561, %562, %563)
}

def @func_10139() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float32]) {
  %564 = @func_8810() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %565 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %566 = @func_5089() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64]) */;
  %567 = %564.0;
  %568 = %565.0;
  %569 = %566.0;
  (%567, %568, %569)
}

def @func_6896() -> (Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) {
  %576 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) {
    %570 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
    %571 = cast(meta[relay.Constant][24] /* ty=Tensor[(624, 1), bool] */, dtype="bool") /* ty=Tensor[(624, 1), bool] */;
    %572 = reshape(%571, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), bool] */;
    %573 = @func_6451(%572) /* ty=(Tensor[(3, 16, 13), uint8],) */;
    %574 = %570.0;
    %575 = %573.0;
    (%574, %575, meta[relay.Constant][24] /* ty=Tensor[(624, 1), bool] */)
  };
  %576() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */
}

def @func_11500(%var_11495: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  %577 = cast(%var_11495, dtype="float32") /* ty=Tensor[(768), float32] */;
  %578 = cast(%var_11495, dtype="float32") /* ty=Tensor[(768), float32] */;
  %579 = reshape(%577, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %580 = reshape(%578, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %581 = @func_369(%579, %580) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %582 = @func_10984() /* ty=Tensor[(4, 15, 7), bool] */;
  %583 = %581.0;
  (%582, %583, %var_11495)
}

def @func_10206(%var_10160: Tensor[(6, 8, 9), float32]) -> (Tensor[(6, 8, 9), float32], Tensor[(8, 6, 16), float32], Tensor[(768), float32], Tensor[(4, 15, 7), float64]) {
  %584 = cast(%var_10160, dtype="float32") /* ty=Tensor[(6, 8, 9), float32] */;
  %585 = cast(meta[relay.Constant][25] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %586 = reshape(%585, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %587 = @func_473(%586) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */;
  %588 = @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %589 = sigmoid(%584) /* ty=Tensor[(6, 8, 9), float32] */;
  %590 = %587.3;
  %591 = %588.0;
  (%589, %590, meta[relay.Constant][25] /* ty=Tensor[(768), float32] */, %591)
}

def @func_12688() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %596 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %592 = @func_12441() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) */;
    %593 = @func_9093() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %594 = %592.0;
    %595 = %593.0;
    (%594, %595)
  };
  %596() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_12768(%var_12766: int32, %var_12767: Tensor[(11, 5, 3), int32]) -> Tensor[(11, 5, 3), int32] {
  %599 = fn (%var_12740: int32, %var_12741: Tensor[(11, 5, 3), int32]) -> Tensor[(11, 5, 3), int32] {
    %597 = cast(%var_12740, dtype="int32") /* ty=int32 */;
    %598 = cast(%var_12741, dtype="int32") /* ty=Tensor[(11, 5, 3), int32] */;
    subtract(%597, %598) /* ty=Tensor[(11, 5, 3), int32] */
  };
  %599(%var_12766, %var_12767) /* ty=Tensor[(11, 5, 3), int32] */
}

def @func_2922(%var_2919: Tensor[(2, 3, 4), float64]) -> (Tensor[(2, 3, 4), float64],) {
  %600 = cast(%var_2919, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
  %601 = tan(%600) /* ty=Tensor[(2, 3, 4), float64] */;
  (%601,)
}

def @func_7610() -> (Tensor[(4, 15, 7), bool], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_7608() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_6704(%var_6702: Tensor[(7, 3, 2), uint32], %var_6703: Tensor[(7, 3, 2), uint32]) -> Tensor[(7, 3, 2), uint32] {
  @func_6700(%var_6702, %var_6703) /* ty=Tensor[(7, 3, 2), uint32] */
}

def @func_12443() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) {
  @func_12441() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64]) */
}

def @func_8968() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float64], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %602 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %603 = @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %604 = %603.0;
  %605 = cast(%604, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
  %606 = reshape(%605, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), uint64] */;
  %607 = @func_1774(%606) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */;
  %608 = @func_8145() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %609 = %602.1;
  %610 = %607.1;
  %611 = %608.0;
  (%609, %604, %610, %611)
}

def @func_1322() -> Tensor[(4, 15, 7), float32] {
  %615 = fn () -> Tensor[(4, 15, 7), float32] {
    %612 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %613 = %612.0;
    %614 = cast(%613, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    sin(%614) /* ty=Tensor[(4, 15, 7), float32] */
  };
  %615() /* ty=Tensor[(4, 15, 7), float32] */
}

def @func_6074() -> Tensor[(4, 15, 7), bool] {
  @func_6072() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_11217() -> Tensor[(4, 15, 7), float64] {
  %616 = @func_8409() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %616.0
}

def @func_450(%var_449: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), bool],) {
  %634 = fn (%var_432: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), bool],) {
    %617 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %618 = %617.0;
    %619 = cast(%var_432, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %623 = multiply(%621, %622) /* ty=Tensor[(4, 15, 7), int16] */;
    %624 = cast(%623, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %625 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%618, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %628 = less(%626, %627) /* ty=Tensor[(4, 15, 7), bool] */;
    %629 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 15, 7), bool] */, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %631 = cast(%628, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %633 = greater_equal(%631, %632) /* ty=Tensor[(4, 15, 7), bool] */;
    (%633,)
  };
  %634(%var_449) /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_6453(%var_6452: Tensor[(3, 16, 13), bool]) -> (Tensor[(3, 16, 13), uint8],) {
  %649 = fn (%var_6434: Tensor[(3, 16, 13), bool]) -> (Tensor[(3, 16, 13), uint8],) {
    %635 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
    %636 = %635.2;
    %637 = cast(%var_6434, dtype="float64") /* ty=Tensor[(3, 16, 13), float64] */;
    %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
    %639 = cast(%636, dtype="float64") /* ty=Tensor[(3, 16, 13), float64] */;
    %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %641 = mod(%639, %640) /* ty=Tensor[(3, 16, 13), float64] */;
    %642 = cast(%641, dtype="float64") /* ty=Tensor[(3, 16, 13), float64] */;
    %643 = cos(%642) /* ty=Tensor[(3, 16, 13), float64] */;
    %644 = cast(%641, dtype="uint8") /* ty=Tensor[(3, 16, 13), uint8] */;
    %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
    %646 = cast(%643, dtype="uint8") /* ty=Tensor[(3, 16, 13), uint8] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %648 = left_shift(%646, %647) /* ty=Tensor[(3, 16, 13), uint8] */;
    (%648,)
  };
  %649(%var_6452) /* ty=(Tensor[(3, 16, 13), uint8],) */
}

def @func_8868() -> (Tensor[(4, 15, 7), bool],) {
  @func_8866() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_1157() -> Tensor[(4, 15, 7), bool] {
  %651 = fn () -> Tensor[(4, 15, 7), bool] {
    %650 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %650.1
  };
  %651() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_3630() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  %667 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
    %652 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %653 = %652.0;
    %654 = cast(%653, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %655 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %656 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
    %657 = %655.0;
    %658 = cast(%657, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %659 = reshape(%658, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
    %660 = @func_2831(%659) /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(8, 6, 16), float64]) */;
    %661 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %662 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
    %663 = erf(%654) /* ty=Tensor[(4, 15, 7), float32] */;
    %664 = %656.2;
    %665 = %660.0;
    %666 = %661.0;
    (%662, %663, %657, %664, %665, %666)
  };
  %667() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */
}

def @func_11753(%var_11751: Tensor[(6, 7, 5), float32], %var_11752: Tensor[(6, 7, 5), float32]) -> (Tensor[(6, 7, 5), float32],) {
  @func_11749(%var_11751, %var_11752) /* ty=(Tensor[(6, 7, 5), float32],) */
}

def @func_1776(%var_1775: Tensor[(7, 12, 5), uint64]) -> (Tensor[(7, 12, 5), bool], Tensor[(768), float32]) {
  %677 = fn (%var_1754: Tensor[(7, 12, 5), uint64]) -> (Tensor[(7, 12, 5), bool], Tensor[(768), float32]) {
    %668 = cast(%var_1754, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
    %669 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 12, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %670 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 12, 5), uint64] */, dtype="bool") /* ty=Tensor[(7, 12, 5), bool] */;
    %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %672 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 12, 5), uint64] */, dtype="float64") /* ty=Tensor[(7, 12, 5), float64] */;
    %673 = reshape(%672, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %674 = @func_1093(%673) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
    %675 = less_equal(%670, %671) /* ty=Tensor[(7, 12, 5), bool] */;
    %676 = %674.3;
    (%675, %676)
  };
  %677(%var_1775) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */
}

def @func_5733() -> (Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) {
  %683 = fn () -> (Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) {
    %678 = @func_5287() /* ty=Tensor[(4, 15, 7), int8] */;
    %679 = cast(%678, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
    %680 = reshape(%679, newshape=[7, 12, 5]) /* ty=Tensor[(7, 12, 5), uint64] */;
    %681 = @func_1774(%680) /* ty=(Tensor[(7, 12, 5), bool], Tensor[(768), float32]) */;
    %682 = %681.0;
    (%678, %682)
  };
  %683() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) */
}

def @func_7139() -> (Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) {
  %694 = fn () -> (Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) {
    %684 = @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %685 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
    %686 = cast(meta[relay.Constant][28] /* ty=Tensor[(24), float64] */, dtype="float64") /* ty=Tensor[(24), float64] */;
    %687 = reshape(%686, newshape=[2, 3, 4]) /* ty=Tensor[(2, 3, 4), float64] */;
    %688 = @func_2922(%687) /* ty=(Tensor[(2, 3, 4), float64],) */;
    %689 = @func_5287() /* ty=Tensor[(4, 15, 7), int8] */;
    %690 = %684.0;
    %691 = %685.4;
    %692 = %688.0;
    %693 = @func_5998() /* ty=Tensor[(4, 15, 7), bool] */;
    (%689, %690, %691, %692, meta[relay.Constant][28] /* ty=Tensor[(24), float64] */, %693)
  };
  %694() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */
}

def @main() -> (Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(6, 7, 5), float32], Tensor[(210, 1), float32], Tensor[(210, 1), float64]) {
  %695 = @func_7269() /* ty=(Tensor[(14, 1, 1), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %696 = cast(meta[relay.Constant][29] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %697 = cast(meta[relay.Constant][29] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %698 = reshape(%696, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), float32] */;
  %699 = reshape(%697, newshape=[6, 7, 5]) /* ty=Tensor[(6, 7, 5), float32] */;
  %700 = @func_11753(%698, %699) /* ty=(Tensor[(6, 7, 5), float32],) */;
  %701 = cast(meta[relay.Constant][29] /* ty=Tensor[(210, 1), float32] */, dtype="float32") /* ty=Tensor[(210, 1), float32] */;
  %702 = cast(meta[relay.Constant][29] /* ty=Tensor[(210, 1), float32] */, dtype="float64") /* ty=Tensor[(210, 1), float64] */;
  %703 = %695.1;
  %704 = @func_11835() /* ty=Tensor[(4, 15, 7), bool] */;
  %705 = %700.0;
  %706 = asin(%701) /* ty=Tensor[(210, 1), float32] */;
  %707 = erf(%702) /* ty=Tensor[(210, 1), float64] */;
  (%703, %704, %705, %706, %707)
}

def @func_5256() -> (Tensor[(4, 15, 7), uint64],) {
  %710 = fn () -> (Tensor[(4, 15, 7), uint64],) {
    %708 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
    %709 = %708.4;
    (%709,)
  };
  %710() /* ty=(Tensor[(4, 15, 7), uint64],) */
}

def @func_7848() -> (Tensor[(4, 15, 7), float64], Tensor[(8, 30), float32]) {
  %711 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %712 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
  %713 = %712.1;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(8, 30), float32] */;
  %715 = %711.1;
  %716 = sigmoid(%714) /* ty=Tensor[(8, 30), float32] */;
  (%715, %716)
}

def @func_8173() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_8171() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_217() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_8171() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %717 = @func_6197() /* ty=(Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) */;
  %718 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %719 = %717.1;
  %720 = %718.0;
  (%719, %720)
}

def @func_1635(%var_1611: Tensor[(1, 16, 13), bool], %var_1612: Tensor[(3, 16, 13), bool]) -> (Tensor[(3, 16, 13), bool],) {
  %721 = cast(%var_1611, dtype="bool") /* ty=Tensor[(1, 16, 13), bool] */;
  %722 = cast(%var_1612, dtype="bool") /* ty=Tensor[(3, 16, 13), bool] */;
  %723 = logical_or(%721, %722) /* ty=Tensor[(3, 16, 13), bool] */;
  (%723,)
}

def @func_4494() -> Tensor[(4, 15, 7), float64] {
  @func_4492() /* ty=Tensor[(4, 15, 7), float64] */
}

def @func_3741() -> (Tensor[(4, 15, 7), bool],) {
  %726 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %724 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %725 = %724.0;
    (%725,)
  };
  %726() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_1863(%var_1808: Tensor[(624), bool]) -> (Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) {
  %727 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %728 = %727.0;
  %729 = cast(%728, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %730 = cast(meta[relay.Constant][30] /* ty=Tensor[(208), bool] */, dtype="bool") /* ty=Tensor[(208), bool] */;
  %731 = cast(%var_1808, dtype="bool") /* ty=Tensor[(624), bool] */;
  %732 = reshape(%730, newshape=[208, 1]) /* ty=Tensor[(208, 1), bool] */;
  %733 = reshape(%731, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %734 = @func_1706(%732, %733) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) */;
  %735 = %734.3;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(208, 1), float32] */;
  %737 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %738 = cast(%var_1808, dtype="uint64") /* ty=Tensor[(624), uint64] */;
  %739 = cast(%735, dtype="uint64") /* ty=Tensor[(208, 1), uint64] */;
  %740 = multiply(%738, %739) /* ty=Tensor[(208, 624), uint64] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(208, 624), float64] */;
  %742 = asinh(%729) /* ty=Tensor[(4, 15, 7), float64] */;
  %743 = log(%736) /* ty=Tensor[(208, 1), float32] */;
  %744 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %745 = %737.1;
  %746 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %747 = atanh(%741) /* ty=Tensor[(208, 624), float64] */;
  (meta[relay.Constant][30] /* ty=Tensor[(208), bool] */, %742, %743, %744, %745, %746, %747)
}

def @func_2400() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %753 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
    %748 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %750 = reshape(%749, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %751 = @func_1058(%750) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
    %752 = %751.0;
    (%748, %752)
  };
  %753() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */
}

def @func_12290() -> (Tensor[(7, 3, 2), float64],) {
  %754 = @func_9979() /* ty=Tensor[(7, 3, 2), float64] */;
  (%754,)
}

def @func_12580() -> Tensor[(4, 15, 7), float64] {
  %755 = fn () -> Tensor[(4, 15, 7), float64] {
    @func_7929() /* ty=Tensor[(4, 15, 7), float64] */
  };
  %755() /* ty=Tensor[(4, 15, 7), float64] */
}

def @func_2452(%var_2450: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  @func_2449(%var_2450) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */
}

def @func_12083() -> (Tensor[(4, 15, 7), bool],) {
  @func_12081() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_3133() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), int8]) {
  %756 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %757 = %756.0;
  %758 = cast(%757, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %759 = reshape(%758, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %760 = @func_691(%759) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %761 = %760.1;
  (%757, %761)
}

def @func_2884() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) {
  %762 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %763 = %762.0;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %765 = reshape(%764, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %766 = @func_1058(%765) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %767 = cast(meta[relay.Constant][31] /* ty=Tensor[(52, 4), bool] */, dtype="bool") /* ty=Tensor[(52, 4), bool] */;
  %768 = cast(meta[relay.Constant][32] /* ty=Tensor[(24, 26), bool] */, dtype="bool") /* ty=Tensor[(24, 26), bool] */;
  %769 = reshape(%767, newshape=[1, 16, 13]) /* ty=Tensor[(1, 16, 13), bool] */;
  %770 = reshape(%768, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), bool] */;
  %771 = @func_1635(%769, %770) /* ty=(Tensor[(3, 16, 13), bool],) */;
  %772 = %766.0;
  %773 = %771.0;
  (%763, %772, %773, meta[relay.Constant][31] /* ty=Tensor[(52, 4), bool] */, meta[relay.Constant][32] /* ty=Tensor[(24, 26), bool] */)
}

def @func_2029() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %774 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %775 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %776 = %774.0;
  %777 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %778 = %775.0;
  (%776, %777, %778)
}

def @func_595() -> (Tensor[(4, 15, 7), float64],) {
  %779 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %781 = sigmoid(%780) /* ty=Tensor[(4, 15, 7), float64] */;
  (%781,)
}

def @func_2090(%var_2088: Tensor[(16, 5, 3), uint32], %var_2089: Tensor[(16, 5, 3), uint32]) -> (Tensor[(16, 5, 3), uint32],) {
  @func_2086(%var_2088, %var_2089) /* ty=(Tensor[(16, 5, 3), uint32],) */
}

def @func_11371() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(7, 3, 2), float64], Tensor[(4, 15, 7), float64], Tensor[(64), float64]) {
  %790 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(7, 3, 2), float64], Tensor[(4, 15, 7), float64], Tensor[(64), float64]) {
    %782 = @func_9035() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), float32]) */;
    %783 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %784 = @func_5670() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) */;
    %785 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
    %786 = %782.0;
    %787 = @func_9979() /* ty=Tensor[(7, 3, 2), float64] */;
    %788 = %783.2;
    %789 = %784.2;
    (%785, %786, %787, %788, %789)
  };
  %790() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(7, 3, 2), float64], Tensor[(4, 15, 7), float64], Tensor[(64), float64]) */
}

def @func_732() -> (Tensor[(4, 15, 7), bool],) {
  %792 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %791 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
    (%791,)
  };
  %792() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_3218() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) {
  %800 = fn () -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) {
    %793 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
    %794 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 15, 7), bool] */, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %795 = shape_of(%793, dtype="int32") /* ty=Tensor[(3), int32] */;
    %796 = cast(%793, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
    %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %798 = floor_divide(%796, %797) /* ty=Tensor[(4, 15, 7), float32] */;
    %799 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
    (%798, %799)
  };
  %800() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_10592() -> (Tensor[(240), uint32],) {
  %803 = fn () -> (Tensor[(240), uint32],) {
    %801 = @func_7608() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(16, 5, 3), uint32], Tensor[(240), uint32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %802 = %801.2;
    (%802,)
  };
  %803() /* ty=(Tensor[(240), uint32],) */
}

def @func_226() -> Tensor[(4, 15, 7), bool] {
  @func_224() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_9728(%var_9725: Tensor[(6, 8, 12), uint32], %var_9726: Tensor[(6, 8, 12), uint32], %var_9727: Tensor[(4, 15, 7), float32]) -> (Tensor[(4, 15, 7), uint64], Tensor[(6, 8, 12), int16], Tensor[(6, 8, 12), bool]) {
  @func_9723(%var_9725, %var_9726, %var_9727) /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(6, 8, 12), int16], Tensor[(6, 8, 12), bool]) */
}

def @func_9745() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  @func_9743() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) */
}

def @func_1299() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) {
  %804 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %805 = cast(%804, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %806 = reshape(%805, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %807 = @func_448(%806) /* ty=(Tensor[(4, 15, 7), bool],) */;
  %808 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %809 = reshape(%808, newshape=[8, 16, 14]) /* ty=Tensor[(8, 16, 14), float32] */;
  %810 = @func_828(%809) /* ty=Tensor[(8, 16, 14), float64] */;
  %811 = cast(%810, dtype="float32") /* ty=Tensor[(8, 16, 14), float32] */;
  %812 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(4, 448), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %813 = cast(meta[relay.Constant][34] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %815 = %807.0;
  %816 = floor_mod(%813, %814) /* ty=Tensor[(4, 448), float32] */;
  (%804, %815, %816)
}

def @func_3135() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), int8]) {
  @func_3133() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), int8]) */
}

def @func_10286() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %817 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
  %818 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %819 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %820 = %817.1;
  %821 = %818.0;
  %822 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  %823 = %819.1;
  (%820, %821, %822, %823)
}

def @func_190() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_4181() -> Tensor[(4, 15, 7), float64] {
  @func_4179() /* ty=Tensor[(4, 15, 7), float64] */
}

def @func_7398() -> Tensor[(768), float32] {
  %825 = fn () -> Tensor[(768), float32] {
    %824 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
    %824.0
  };
  %825() /* ty=Tensor[(768), float32] */
}

def @func_12532() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(686), int64]) {
  %826 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
  %827 = cast(meta[relay.Constant][35] /* ty=Tensor[(686), int64] */, dtype="int64") /* ty=Tensor[(686), int64] */;
  %828 = reshape(%827, newshape=[686]) /* ty=Tensor[(686), int64] */;
  %829 = @func_11027(%828) /* ty=(Tensor[(8, 30), float32], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(686), int64]) */;
  %830 = @func_12052() /* ty=Tensor[(4, 15, 7), bool] */;
  %831 = %826.1;
  %832 = %829.1;
  (%830, %831, %832, meta[relay.Constant][35] /* ty=Tensor[(686), int64] */)
}

def @func_1095(%var_1094: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  %846 = fn (%var_1072: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
    %833 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %834 = %833.0;
    %835 = cast(%var_1072, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
    %836 = shape_of(%834, dtype="int32") /* ty=Tensor[(3), int32] */;
    %837 = cast(%834, dtype="int16") /* ty=Tensor[(4, 15, 7), int16] */;
    %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %839 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %840 = cast(meta[relay.Constant][36] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
    %841 = reshape(%840, newshape=[768]) /* ty=Tensor[(768), float32] */;
    %842 = @func_473(%841) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */;
    %843 = logical_xor(%837, %838) /* ty=Tensor[(4, 15, 7), int16] */;
    %844 = %839.0;
    %845 = %842.3;
    (%843, %844, %845, meta[relay.Constant][36] /* ty=Tensor[(768), float32] */)
  };
  %846(%var_1094) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */
}

def @func_10079() -> Tensor[(4, 15, 7), bool] {
  %848 = fn () -> Tensor[(4, 15, 7), bool] {
    %847 = @func_9801() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
    %847.1
  };
  %848() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_5542() -> (Tensor[(4, 15, 7), bool],) {
  @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_1710(%var_1708: Tensor[(208, 1), bool], %var_1709: Tensor[(624), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) {
  @func_1706(%var_1708, %var_1709) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) */
}

def @func_11915() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(130), uint8], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(4, 15, 7), bool]) {
  @func_11913() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(130), uint8], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(4, 15, 7), bool]) */
}

def @func_215() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %849 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %850 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  (%849, %850)
}

def @func_12809() -> (Tensor[(4, 15, 7), bool], Tensor[(14, 3), uint32], Tensor[(4, 156), int32], Tensor[(7, 3, 2), float64]) {
  @func_12807() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(14, 3), uint32], Tensor[(4, 156), int32], Tensor[(7, 3, 2), float64]) */
}

def @func_5907() -> (Tensor[(768), float32],) {
  @func_5905() /* ty=(Tensor[(768), float32],) */
}

def @func_390() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_2271(%var_2258: Tensor[(624), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) {
  %851 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %852 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %853 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %854 = @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %855 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %856 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  %857 = cast(%856, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %858 = reshape(%857, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %859 = @func_691(%858) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %860 = cast(%var_2258, dtype="bool") /* ty=Tensor[(624), bool] */;
  %861 = reshape(%860, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %862 = @func_1863(%861) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %863 = %851.1;
  %864 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
  %865 = %852.0;
  %866 = %853.0;
  %867 = %854.0;
  %868 = %855.1;
  %869 = %859.0;
  %870 = %862.6;
  %871 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  (%863, %864, %865, %866, %867, %868, %856, %869, %870, %var_2258, %871)
}

def @func_1128(%var_1126: Tensor[(8, 224), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(8, 224), float32], Tensor[(4, 15, 7), bool]) {
  @func_1125(%var_1126) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(8, 16, 14), float64], Tensor[(8, 224), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_5575() -> Tensor[(768), float32] {
  @func_5573() /* ty=Tensor[(768), float32] */
}

def @func_11029(%var_11028: Tensor[(686), int64]) -> (Tensor[(8, 30), float32], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(686), int64]) {
  %882 = fn (%var_11024: Tensor[(686), int64]) -> (Tensor[(8, 30), float32], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(686), int64]) {
    %872 = @func_7848() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(8, 30), float32]) */;
    %873 = @func_7138() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */;
    %874 = cast(%var_11024, dtype="int64") /* ty=Tensor[(686), int64] */;
    %875 = cast(%var_11024, dtype="int64") /* ty=Tensor[(686), int64] */;
    %876 = reshape(%874, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
    %877 = reshape(%875, newshape=[7, 7, 14]) /* ty=Tensor[(7, 7, 14), int64] */;
    %878 = @func_2503(%876, %877) /* ty=(Tensor[(7, 7, 14), int64], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(7, 7, 14), float32]) */;
    %879 = %872.1;
    %880 = %873.0;
    %881 = %878.2;
    (%879, %880, %881, %var_11024)
  };
  %882(%var_11028) /* ty=(Tensor[(8, 30), float32], Tensor[(4, 15, 7), int8], Tensor[(420), bool], Tensor[(686), int64]) */
}

def @func_2322(%var_2320: Tensor[(13, 5, 6), float32], %var_2321: Tensor[(13, 5, 6), float32]) -> (Tensor[(13, 5, 6), float32],) {
  %888 = fn (%var_2305: Tensor[(13, 5, 6), float32], %var_2306: Tensor[(13, 5, 6), float32]) -> (Tensor[(13, 5, 6), float32],) {
    %883 = cast(%var_2306, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
    %884 = shape_of(%var_2305, dtype="int32") /* ty=Tensor[(3), int32] */;
    %885 = cast(%var_2305, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
    %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %887 = divide(%885, %886) /* ty=Tensor[(13, 5, 6), float32] */;
    (%887,)
  };
  %888(%var_2320, %var_2321) /* ty=(Tensor[(13, 5, 6), float32],) */
}

def @func_870() -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  %889 = cast(meta[relay.Constant][37] /* ty=Tensor[(768), float32] */, dtype="float32") /* ty=Tensor[(768), float32] */;
  %890 = reshape(%889, newshape=[768]) /* ty=Tensor[(768), float32] */;
  %891 = @func_473(%890) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */;
  %892 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %893 = %891.2;
  %894 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
  (%892, %893, meta[relay.Constant][37] /* ty=Tensor[(768), float32] */, %894)
}

def @func_1970() -> (Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_6735() -> (Tensor[(4, 15, 7), bool],) {
  %895 = @func_4408() /* ty=Tensor[(4, 15, 7), bool] */;
  (%895,)
}

def @func_7558(%var_7536: Tensor[(3, 8, 5), float64]) -> (Tensor[(4, 15, 7), float32], Tensor[(3, 8, 5), int8]) {
  %896 = cast(%var_7536, dtype="float64") /* ty=Tensor[(3, 8, 5), float64] */;
  %897 = atanh(%896) /* ty=Tensor[(3, 8, 5), float64] */;
  %898 = cast(%897, dtype="float64") /* ty=Tensor[(3, 8, 5), float64] */;
  %899 = asin(%898) /* ty=Tensor[(3, 8, 5), float64] */;
  %900 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 8, 5), float64] */, dtype="int8") /* ty=Tensor[(3, 8, 5), int8] */;
  %901 = shape_of(%899, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(%899, dtype="int8") /* ty=Tensor[(3, 8, 5), int8] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %904 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
  %905 = bitwise_or(%902, %903) /* ty=Tensor[(3, 8, 5), int8] */;
  (%904, %905)
}

def @func_11296() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) {
  %906 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
  %907 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %908 = %906.1;
  %909 = cast(%908, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %910 = reshape(%909, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %911 = @func_4610(%910) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) */;
  %912 = %907.1;
  %913 = %911.1;
  (%908, %912, %913)
}

def @func_10570() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float64]) {
  @func_10568() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float64]) */
}

def @func_5998() -> Tensor[(4, 15, 7), bool] {
  @func_1156() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_12408(%var_12406: Tensor[(15, 14, 1), int8], %var_12407: Tensor[(15, 14, 9), int8]) -> Tensor[(15, 14, 9), int8] {
  %916 = fn (%var_12397: Tensor[(15, 14, 1), int8], %var_12398: Tensor[(15, 14, 9), int8]) -> Tensor[(15, 14, 9), int8] {
    %914 = cast(%var_12397, dtype="int8") /* ty=Tensor[(15, 14, 1), int8] */;
    %915 = cast(%var_12398, dtype="int8") /* ty=Tensor[(15, 14, 9), int8] */;
    bitwise_and(%914, %915) /* ty=Tensor[(15, 14, 9), int8] */
  };
  %916(%var_12406, %var_12407) /* ty=Tensor[(15, 14, 9), int8] */
}

def @func_8147() -> (Tensor[(4, 15, 7), bool],) {
  @func_8145() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_9519() -> Tensor[(8, 14, 11), int64] {
  @func_9517() /* ty=Tensor[(8, 14, 11), int64] */
}

def @func_5288() -> Tensor[(4, 15, 7), int8] {
  %923 = fn () -> Tensor[(4, 15, 7), int8] {
    %917 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %918 = %917.0;
    %919 = cast(meta[relay.Constant][39] /* ty=Tensor[(4, 15, 7), float64] */, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
    %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(3), int32] */;
    %921 = cast(%918, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    right_shift(%921, %922) /* ty=Tensor[(4, 15, 7), int8] */
  };
  %923() /* ty=Tensor[(4, 15, 7), int8] */
}

def @func_2886() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) {
  @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */
}

def @func_9999() -> Tensor[(4, 15, 7), bool] {
  @func_9997() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_12565(%var_12563: Tensor[(13, 2, 3), float64]) -> (Tensor[(13, 2, 3), bool], Tensor[(4, 15, 7), bool]) {
  @func_12562(%var_12563) /* ty=(Tensor[(13, 2, 3), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_8866() -> (Tensor[(4, 15, 7), bool],) {
  %924 = @func_2399() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
  %925 = %924.0;
  (%925,)
}

def @func_12227() -> (Tensor[(4, 15, 7), float64],) {
  @func_12225() /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_11219() -> Tensor[(4, 15, 7), float64] {
  @func_11217() /* ty=Tensor[(4, 15, 7), float64] */
}

def @func_6023(%var_6021: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), float64],) {
  @func_6020(%var_6021) /* ty=(Tensor[(9, 12, 2), float64],) */
}

def @func_7930() -> Tensor[(4, 15, 7), float64] {
  %927 = fn () -> Tensor[(4, 15, 7), float64] {
    %926 = @func_3951() /* ty=(Tensor[(4, 15, 7), float64],) */;
    %926.0
  };
  %927() /* ty=Tensor[(4, 15, 7), float64] */
}

def @func_4639() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_991() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %934 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %928 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %929 = %928.0;
    %930 = cast(%929, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %931 = reshape(%930, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
    %932 = @func_448(%931) /* ty=(Tensor[(4, 15, 7), bool],) */;
    %933 = %932.0;
    (%929, %933)
  };
  %934() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_4989() -> (Tensor[(4, 15, 7), bool],) {
  %937 = fn () -> (Tensor[(4, 15, 7), bool],) {
    %935 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %936 = %935.0;
    (%936,)
  };
  %937() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_224() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_10985() -> Tensor[(4, 15, 7), bool] {
  %939 = fn () -> Tensor[(4, 15, 7), bool] {
    %938 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %938.0
  };
  %939() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_2691(%var_2690: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), uint32], Tensor[(4, 15, 7), uint64], Tensor[(624), bool], Tensor[(4, 15, 7), int64], Tensor[(4, 15, 7), bool]) {
  %962 = fn (%var_2641: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), uint32], Tensor[(4, 15, 7), uint64], Tensor[(624), bool], Tensor[(4, 15, 7), int64], Tensor[(4, 15, 7), bool]) {
    %940 = @func_1190() /* ty=Tensor[(4, 15, 7), bool] */;
    %941 = cast(%var_2641, dtype="uint32") /* ty=Tensor[(4, 15, 7), uint32] */;
    %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
    %943 = cast(%940, dtype="uint32") /* ty=Tensor[(4, 15, 7), uint32] */;
    %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %945 = cast(%var_2641, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %946 = reshape(%945, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %947 = @func_1058(%946) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
    %948 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
    %949 = cast(meta[relay.Constant][40] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
    %950 = reshape(%949, newshape=[624]) /* ty=Tensor[(624), bool] */;
    %951 = @func_1863(%950) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
    %952 = %951.1;
    %953 = cast(%952, dtype="int64") /* ty=Tensor[(4, 15, 7), int64] */;
    %954 = shape_of(%948, dtype="int32") /* ty=Tensor[(3), int32] */;
    %955 = cast(%948, dtype="int64") /* ty=Tensor[(4, 15, 7), int64] */;
    %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %957 = @func_2415() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %958 = bitwise_xor(%943, %944) /* ty=Tensor[(4, 15, 7), uint32] */;
    %959 = %947.1;
    %960 = left_shift(%955, %956) /* ty=Tensor[(4, 15, 7), int64] */;
    %961 = %957.0;
    (%958, %959, meta[relay.Constant][40] /* ty=Tensor[(624), bool] */, %960, %961)
  };
  %962(%var_2690) /* ty=(Tensor[(4, 15, 7), uint32], Tensor[(4, 15, 7), uint64], Tensor[(624), bool], Tensor[(4, 15, 7), int64], Tensor[(4, 15, 7), bool]) */
}

def @func_11270() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %967 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %963 = @func_8866() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %964 = @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
    %965 = %963.0;
    %966 = %964.1;
    (%965, %966)
  };
  %967() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_694(%var_692: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) {
  @func_691(%var_692) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */
}

def @func_3469(%var_3465: Tensor[(2, 2, 16), float64]) -> (Tensor[(2, 2, 16), float64],) {
  %968 = cast(%var_3465, dtype="float64") /* ty=Tensor[(2, 2, 16), float64] */;
  %969 = asinh(%968) /* ty=Tensor[(2, 2, 16), float64] */;
  (%969,)
}

def @func_1221() -> Tensor[(4, 15, 7), bool] {
  @func_1219() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_10753(%var_10751: Tensor[(390), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(390), float32], Tensor[(390), float32], Tensor[(4, 15, 7), bool]) {
  @func_10750(%var_10751) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(390), float32], Tensor[(390), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_9743() -> (Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), bool]) {
  %970 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
  %971 = @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */;
  %972 = %970.0;
  %973 = %971.1;
  (%972, %973)
}

def @func_6395() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_6393() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_278() -> Tensor[(4, 15, 7), bool] {
  @func_188() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_1968() -> (Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %974 = @func_870() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */;
  %975 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %976 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %977 = %974.2;
  %978 = %975.1;
  %979 = %976.1;
  (%977, %978, %979)
}

def @func_11503(%var_11501: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) {
  @func_11500(%var_11501) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */
}

def @func_4880() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) {
  %988 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) {
    %980 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %981 = @func_2632() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(1, 624), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */;
    %982 = %981.6;
    %983 = cast(%982, dtype="float64") /* ty=Tensor[(4, 448), float64] */;
    %984 = %980.1;
    %985 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
    %986 = log2(%983) /* ty=Tensor[(4, 448), float64] */;
    %987 = @func_1219() /* ty=Tensor[(4, 15, 7), bool] */;
    (%984, %985, %986, %987)
  };
  %988() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool]) */
}

def @func_188() -> Tensor[(4, 15, 7), bool] {
  %989 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 15, 7), int8] */, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %990 = shape_of(meta[relay.Constant][41] /* ty=Tensor[(4, 15, 7), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 15, 7), int8] */, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%991, %992) /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_6256() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  @func_6254() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */
}

def @func_11322() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8]) {
  @func_11320() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8]) */
}

def @func_12225() -> (Tensor[(4, 15, 7), float64],) {
  %993 = @func_11913() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(130), uint8], Tensor[(7, 7, 14), float32], Tensor[(686), int64], Tensor[(4, 15, 7), bool]) */;
  %994 = %993.0;
  (%994,)
}

def @func_5042() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) {
  %995 = @func_2999() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(130), uint8], Tensor[(4, 15, 7), bool]) */;
  %996 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 156), bool] */, dtype="bool") /* ty=Tensor[(4, 156), bool] */;
  %997 = reshape(%996, newshape=[624]) /* ty=Tensor[(624), bool] */;
  %998 = @func_1863(%997) /* ty=(Tensor[(208), bool], Tensor[(4, 15, 7), float64], Tensor[(208, 1), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64]) */;
  %999 = %995.2;
  %1000 = %998.4;
  (%999, %1000, meta[relay.Constant][43] /* ty=Tensor[(4, 156), bool] */)
}

def @func_10891(%var_10882: Tensor[(1, 4, 5), float64]) -> Tensor[(1, 4, 5), float64] {
  %1001 = cast(%var_10882, dtype="float64") /* ty=Tensor[(1, 4, 5), float64] */;
  sinh(%1001) /* ty=Tensor[(1, 4, 5), float64] */
}

def @func_9244() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  @func_9242() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */
}

def @func_473(%var_465: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) {
  %1002 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %1003 = cast(%1002, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %1004 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %1005 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %1006 = reshape(%1004, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %1007 = reshape(%1005, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %1008 = @func_369(%1006, %1007) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %1009 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %1010 = cast(%var_465, dtype="float32") /* ty=Tensor[(768), float32] */;
  %1011 = reshape(%1009, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %1012 = reshape(%1010, newshape=[8, 6, 16]) /* ty=Tensor[(8, 6, 16), float32] */;
  %1013 = @func_369(%1011, %1012) /* ty=(Tensor[(8, 6, 16), float32], Tensor[(4, 15, 7), bool]) */;
  %1014 = acos(%1003) /* ty=Tensor[(4, 15, 7), float64] */;
  %1015 = %1008.1;
  %1016 = %1013.0;
  (%1014, %1015, %var_465, %1016)
}

def @func_1706(%var_1702: Tensor[(208, 1), bool], %var_1703: Tensor[(624), bool]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), bool], Tensor[(208, 1), bool], Tensor[(624), bool]) {
  %1017 = @func_990() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1018 = @func_388() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1019 = cast(%var_1702, dtype="bool") /* ty=Tensor[(208, 1), bool] */;
  %1020 = cast(%var_1703, dtype="bool") /* ty=Tensor[(624), bool] */;
  %1021 = reshape(%1019, newshape=[1, 16, 13]) /* ty=Tensor[(1, 16, 13), bool] */;
  %1022 = reshape(%1020, newshape=[3, 16, 13]) /* ty=Tensor[(3, 16, 13), bool] */;
  %1023 = @func_1635(%1021, %1022) /* ty=(Tensor[(3, 16, 13), bool],) */;
  %1024 = %1017.0;
  %1025 = %1018.1;
  %1026 = %1023.0;
  (%1024, %1025, %1026, %var_1702, %var_1703)
}

def @func_9811() -> Tensor[(768), float32] {
  %1028 = fn () -> Tensor[(768), float32] {
    %1027 = @func_5943() /* ty=(Tensor[(768), float32], Tensor[(8, 30), uint32]) */;
    %1027.0
  };
  %1028() /* ty=Tensor[(768), float32] */
}

def @func_691(%var_666: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) {
  %1029 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %1030 = cast(%var_666, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %1031 = shape_of(%1029, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1032 = cast(%1029, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %1033 = dyn.reshape(%1030, %1031, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1034 = less_equal(%1032, %1033) /* ty=Tensor[(4, 15, 7), bool] */;
  %1035 = cast(%1034, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %1036 = shape_of(%var_666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1037 = cast(%var_666, dtype="float32") /* ty=Tensor[(4, 15, 7), float32] */;
  %1038 = dyn.reshape(%1035, %1036, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1039 = cast(%var_666, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %1040 = shape_of(%1034, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1041 = cast(%1034, dtype="int8") /* ty=Tensor[(4, 15, 7), int8] */;
  %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1043 = floor_mod(%1037, %1038) /* ty=Tensor[(4, 15, 7), float32] */;
  %1044 = add(%1041, %1042) /* ty=Tensor[(4, 15, 7), int8] */;
  (%1043, %1044)
}

def @func_7643(%var_7641: Tensor[(6, 1, 16), float32]) -> (Tensor[(6, 1, 16), float32],) {
  @func_7640(%var_7641) /* ty=(Tensor[(6, 1, 16), float32],) */
}

def @func_9487() -> Tensor[(768), float32] {
  @func_9485() /* ty=Tensor[(768), float32] */
}

def @func_2833(%var_2832: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), uint64], Tensor[(8, 6, 16), float64]) {
  %1058 = fn (%var_2818: Tensor[(4, 15, 7), bool]) -> (Tensor[(4, 15, 7), uint64], Tensor[(8, 6, 16), float64]) {
    %1045 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1046 = %1045.0;
    %1047 = cast(%var_2818, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
    %1048 = shape_of(%1046, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1049 = cast(%1046, dtype="uint64") /* ty=Tensor[(4, 15, 7), uint64] */;
    %1050 = dyn.reshape(%1047, %1048, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1051 = maximum(%1049, %1050) /* ty=Tensor[(4, 15, 7), uint64] */;
    %1052 = cast(%1051, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %1053 = reshape(%1052, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %1054 = @func_1093(%1053) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
    %1055 = %1054.2;
    %1056 = cast(%1055, dtype="float64") /* ty=Tensor[(8, 6, 16), float64] */;
    %1057 = sigmoid(%1056) /* ty=Tensor[(8, 6, 16), float64] */;
    (%1051, %1057)
  };
  %1058(%var_2832) /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(8, 6, 16), float64]) */
}

def @func_1910() -> (Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) {
  @func_1908() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */
}

def @func_6020(%var_6004: Tensor[(9, 12, 2), float64]) -> (Tensor[(9, 12, 2), float64],) {
  %1059 = cast(%var_6004, dtype="float64") /* ty=Tensor[(9, 12, 2), float64] */;
  %1060 = exp(%1059) /* ty=Tensor[(9, 12, 2), float64] */;
  (%1060,)
}

def @func_5695(%var_5694: Tensor[(2, 3, 4), float64]) -> Tensor[(2, 3, 4), uint16] {
  %1072 = fn (%var_5679: Tensor[(2, 3, 4), float64]) -> Tensor[(2, 3, 4), uint16] {
    %1061 = @func_3300() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) */;
    %1062 = %1061.1;
    %1063 = cast(%var_5679, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
    %1064 = shape_of(%1062, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1065 = cast(%1062, dtype="float64") /* ty=Tensor[(2, 3, 4), float64] */;
    %1066 = dyn.reshape(%1063, %1064, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1067 = floor_mod(%1065, %1066) /* ty=Tensor[(2, 3, 4), float64] */;
    %1068 = cast(%1062, dtype="uint16") /* ty=Tensor[(2, 3, 4), uint16] */;
    %1069 = shape_of(%1067, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1070 = cast(%1067, dtype="uint16") /* ty=Tensor[(2, 3, 4), uint16] */;
    %1071 = dyn.reshape(%1068, %1069, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_and(%1070, %1071) /* ty=Tensor[(2, 3, 4), uint16] */
  };
  %1072(%var_5694) /* ty=Tensor[(2, 3, 4), uint16] */
}

def @func_9591() -> (Tensor[(4, 15, 7), bool], Tensor[(15, 7, 7), int8]) {
  %1073 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1074 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 7, 7), float32] */, dtype="float32") /* ty=Tensor[(15, 7, 7), float32] */;
  %1075 = cosh(%1074) /* ty=Tensor[(15, 7, 7), float32] */;
  %1076 = cast(meta[relay.Constant][44] /* ty=Tensor[(15, 7, 7), float32] */, dtype="int8") /* ty=Tensor[(15, 7, 7), int8] */;
  %1077 = shape_of(%1075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1078 = cast(%1075, dtype="int8") /* ty=Tensor[(15, 7, 7), int8] */;
  %1079 = dyn.reshape(%1076, %1077, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1080 = %1073.2;
  %1081 = left_shift(%1078, %1079) /* ty=Tensor[(15, 7, 7), int8] */;
  (%1080, %1081)
}

def @func_4715() -> (Tensor[(4, 15, 7), bool],) {
  %1082 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1082,)
}

def @func_597() -> (Tensor[(4, 15, 7), float64],) {
  @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_5670() -> (Tensor[(4, 15, 7), bool], Tensor[(2, 2, 16), float64], Tensor[(64), float64]) {
  %1083 = @func_731() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1084 = cast(meta[relay.Constant][45] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %1085 = reshape(%1084, newshape=[2, 2, 16]) /* ty=Tensor[(2, 2, 16), float64] */;
  %1086 = @func_3469(%1085) /* ty=(Tensor[(2, 2, 16), float64],) */;
  %1087 = %1083.0;
  %1088 = %1086.0;
  (%1087, %1088, meta[relay.Constant][45] /* ty=Tensor[(64), float64] */)
}

def @func_6055() -> (Tensor[(4, 15, 7), uint64],) {
  %1089 = @func_3629() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %1090 = %1089.4;
  (%1090,)
}

def @func_11320() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8]) {
  %1091 = @func_5732() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) */;
  %1092 = @func_10984() /* ty=Tensor[(4, 15, 7), bool] */;
  %1093 = %1091.0;
  (%1092, %1093)
}

def @func_6802(%var_6800: Tensor[(15, 2, 3), uint16], %var_6801: Tensor[(15, 2, 3), uint16]) -> (Tensor[(4, 15, 7), bool], Tensor[(15, 2, 3), int16]) {
  @func_6798(%var_6800, %var_6801) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(15, 2, 3), int16]) */
}

def @func_5232(%var_5231: Tensor[(15, 6, 1), float32]) -> (Tensor[(15, 6, 1), float32],) {
  %1096 = fn (%var_5205: Tensor[(15, 6, 1), float32]) -> (Tensor[(15, 6, 1), float32],) {
    %1094 = cast(%var_5205, dtype="float32") /* ty=Tensor[(15, 6, 1), float32] */;
    %1095 = log(%1094) /* ty=Tensor[(15, 6, 1), float32] */;
    (%1095,)
  };
  %1096(%var_5231) /* ty=(Tensor[(15, 6, 1), float32],) */
}

def @func_11298() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) {
  @func_11296() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32]) */
}

def @func_2538() -> (Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1106 = fn () -> (Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %1097 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1098 = cast(meta[relay.Constant][46] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %1099 = reshape(%1098, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %1100 = @func_1058(%1099) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
    %1101 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1102 = %1097.0;
    %1103 = %1100.1;
    %1104 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
    %1105 = %1101.1;
    (%1102, %1103, meta[relay.Constant][46] /* ty=Tensor[(420), float64] */, %1104, %1105)
  };
  %1106() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_10894(%var_10892: Tensor[(1, 4, 5), float64]) -> Tensor[(1, 4, 5), float64] {
  @func_10891(%var_10892) /* ty=Tensor[(1, 4, 5), float64] */
}

def @func_6197() -> (Tensor[(7, 12, 5), bool], Tensor[(4, 15, 7), bool]) {
  %1107 = @func_5732() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(7, 12, 5), bool]) */;
  %1108 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1109 = %1107.1;
  %1110 = %1108.1;
  (%1109, %1110)
}

def @func_9036() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float32]) {
  %1114 = fn () -> (Tensor[(768), float32], Tensor[(4, 15, 7), float32]) {
    %1111 = @func_1968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1112 = %1111.0;
    %1113 = @func_1321() /* ty=Tensor[(4, 15, 7), float32] */;
    (%1112, %1113)
  };
  %1114() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), float32]) */
}

def @func_10141() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float32]) {
  @func_10139() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float32]) */
}

def @func_6628() -> Tensor[(130), uint8] {
  %1116 = fn () -> Tensor[(130), uint8] {
    %1115 = @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */;
    %1115.0
  };
  %1116() /* ty=Tensor[(130), uint8] */
}

def @func_10524(%var_10522: Tensor[(60), int32]) -> (Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(60), int32], Tensor[(4, 15, 7), bool]) {
  @func_10521(%var_10522) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(60), int32], Tensor[(4, 15, 7), bool]) */
}

def @func_10714(%var_10713: Tensor[(10, 6, 14), int64]) -> Tensor[(10, 6, 14), bool] {
  %1121 = fn (%var_10707: Tensor[(10, 6, 14), int64]) -> Tensor[(10, 6, 14), bool] {
    %1117 = cast(meta[relay.Constant][47] /* ty=Tensor[(10, 6, 14), int64] */, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
    %1118 = shape_of(%var_10707, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1119 = cast(%var_10707, dtype="bool") /* ty=Tensor[(10, 6, 14), bool] */;
    %1120 = dyn.reshape(%1117, %1118, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%1119, %1120) /* ty=Tensor[(10, 6, 14), bool] */
  };
  %1121(%var_10713) /* ty=Tensor[(10, 6, 14), bool] */
}

def @func_2925(%var_2923: Tensor[(2, 3, 4), float64]) -> (Tensor[(2, 3, 4), float64],) {
  @func_2922(%var_2923) /* ty=(Tensor[(2, 3, 4), float64],) */
}

def @func_1219() -> Tensor[(4, 15, 7), bool] {
  %1122 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1122.0
}

def @func_9205(%var_9141: Tensor[(10, 10, 7), bool], %var_9161: Tensor[(60), int32]) -> (Tensor[(10, 10, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(60), int32], Tensor[(4, 15, 7), bool], Tensor[(624, 1), float64]) {
  %1123 = cast(meta[relay.Constant][48] /* ty=Tensor[(10, 1, 7), bool] */, dtype="bool") /* ty=Tensor[(10, 1, 7), bool] */;
  %1124 = cast(%var_9141, dtype="bool") /* ty=Tensor[(10, 10, 7), bool] */;
  %1125 = @func_5540() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1126 = cast(%var_9161, dtype="int32") /* ty=Tensor[(60), int32] */;
  %1127 = reshape(%1126, newshape=[3, 20]) /* ty=Tensor[(3, 20), int32] */;
  %1128 = @func_8235(%1127) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) */;
  %1129 = @func_6895() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */;
  %1130 = %1129.2;
  %1131 = cast(%1130, dtype="float64") /* ty=Tensor[(624, 1), float64] */;
  %1132 = logical_or(%1123, %1124) /* ty=Tensor[(10, 10, 7), bool] */;
  %1133 = %1125.0;
  %1134 = %1128.0;
  %1135 = @func_4639() /* ty=Tensor[(4, 15, 7), bool] */;
  %1136 = rsqrt(%1131) /* ty=Tensor[(624, 1), float64] */;
  (%1132, %1133, %1134, %var_9161, %1135, %1136)
}

def @func_11074() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_11072() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_8552() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1142 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %1137 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1138 = @func_2884() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(3, 16, 13), bool], Tensor[(52, 4), bool], Tensor[(24, 26), bool]) */;
    %1139 = %1137.1;
    %1140 = %1138.0;
    %1141 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
    (%1139, %1140, %1141)
  };
  %1142() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_1301() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) {
  @func_1299() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float32]) */
}

def @func_10288() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  @func_10286() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_8145() -> (Tensor[(4, 15, 7), bool],) {
  %1143 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1143,)
}

def @func_2031() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  @func_2029() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */
}

def @func_3472(%var_3470: Tensor[(2, 2, 16), float64]) -> (Tensor[(2, 2, 16), float64],) {
  @func_3469(%var_3470) /* ty=(Tensor[(2, 2, 16), float64],) */
}

def @func_6559() -> Tensor[(130), uint8] {
  %1145 = fn () -> Tensor[(130), uint8] {
    %1144 = @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */;
    %1144.1
  };
  %1145() /* ty=Tensor[(130), uint8] */
}

def @func_6057() -> (Tensor[(4, 15, 7), uint64],) {
  @func_6055() /* ty=(Tensor[(4, 15, 7), uint64],) */
}

def @func_5821(%var_5775: Tensor[(585), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(9, 13, 5), float32], Tensor[(585), float32], Tensor[(4, 15, 7), bool]) {
  %1146 = @func_4303() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(130), uint8]) */;
  %1147 = cast(%var_5775, dtype="float32") /* ty=Tensor[(585), float32] */;
  %1148 = cast(%var_5775, dtype="float32") /* ty=Tensor[(585), float32] */;
  %1149 = reshape(%1147, newshape=[9, 13, 5]) /* ty=Tensor[(9, 13, 5), float32] */;
  %1150 = reshape(%1148, newshape=[9, 13, 5]) /* ty=Tensor[(9, 13, 5), float32] */;
  %1151 = @func_5460(%1149, %1150) /* ty=(Tensor[(9, 13, 5), float32], Tensor[(4, 15, 7), bool], Tensor[(64, 12), float32], Tensor[(4, 15, 7), bool], Tensor[(4, 448), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64], Tensor[(9, 13, 5), bool], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %1152 = %1146.0;
  %1153 = %1151.0;
  %1154 = @func_4408() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1152, %1153, %var_5775, %1154)
}

def @func_8970() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float64], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) {
  @func_8968() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), float64], Tensor[(768), float32], Tensor[(4, 15, 7), bool]) */
}

def @func_6254() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) {
  %1155 = @func_1403() /* ty=Tensor[(4, 15, 7), bool] */;
  %1156 = cast(%1155, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %1157 = reshape(%1156, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %1158 = @func_1058(%1157) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64]) */;
  %1159 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1160 = %1158.1;
  %1161 = %1159.0;
  (%1155, %1160, %1161)
}

def @func_10974() -> (Tensor[(4, 15, 7), bool],) {
  @func_10972() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_12921() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1162 = @func_595() /* ty=(Tensor[(4, 15, 7), float64],) */;
  %1163 = %1162.0;
  %1164 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %1165 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1163, %1164, %1165)
}

def @func_4409() -> Tensor[(4, 15, 7), bool] {
  %1166 = fn () -> Tensor[(4, 15, 7), bool] {
    @func_188() /* ty=Tensor[(4, 15, 7), bool] */
  };
  %1166() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_1404() -> Tensor[(4, 15, 7), bool] {
  %1168 = fn () -> Tensor[(4, 15, 7), bool] {
    %1167 = @func_799() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1167.1
  };
  %1168() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_10750(%var_10733: Tensor[(390), float32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(390), float32], Tensor[(390), float32], Tensor[(4, 15, 7), bool]) {
  %1169 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
  %1170 = cast(%var_10733, dtype="float32") /* ty=Tensor[(390), float32] */;
  %1171 = reshape(%1170, newshape=[390]) /* ty=Tensor[(390), float32] */;
  %1172 = @func_9545(%1171) /* ty=(Tensor[(2, 3, 4), float64], Tensor[(4, 15, 7), bool], Tensor[(13, 5, 6), float32], Tensor[(390), float32]) */;
  %1173 = @func_188() /* ty=Tensor[(4, 15, 7), bool] */;
  %1174 = %1169.0;
  %1175 = %1172.3;
  %1176 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1173, %1174, %1175, %var_10733, %1176)
}

def @func_6737() -> (Tensor[(4, 15, 7), bool],) {
  @func_6735() /* ty=(Tensor[(4, 15, 7), bool],) */
}

def @func_9981() -> Tensor[(7, 3, 2), float64] {
  @func_9979() /* ty=Tensor[(7, 3, 2), float64] */
}

def @func_7561(%var_7559: Tensor[(3, 8, 5), float64]) -> (Tensor[(4, 15, 7), float32], Tensor[(3, 8, 5), int8]) {
  @func_7558(%var_7559) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(3, 8, 5), int8]) */
}

def @func_6072() -> Tensor[(4, 15, 7), bool] {
  %1177 = @func_4533() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1177.0
}

def @func_11072() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1178 = @func_6254() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), uint64], Tensor[(4, 15, 7), float64]) */;
  %1179 = @func_8810() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %1180 = %1178.0;
  %1181 = %1179.1;
  (%1180, %1181)
}

def @func_8811() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
  %1185 = fn () -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) {
    %1182 = @func_3531() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %1183 = %1182.1;
    %1184 = @func_278() /* ty=Tensor[(4, 15, 7), bool] */;
    (%1183, %1184)
  };
  %1185() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */
}

def @func_8409() -> (Tensor[(4, 15, 7), float64],) {
  %1186 = @func_7138() /* ty=(Tensor[(4, 15, 7), int8], Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), bool]) */;
  %1187 = %1186.1;
  (%1187,)
}

def @func_9452() -> (Tensor[(4, 15, 7), bool], Tensor[(7, 3, 2), uint32], Tensor[(42), uint32], Tensor[(4, 15, 7), float32]) {
  %1199 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(7, 3, 2), uint32], Tensor[(42), uint32], Tensor[(4, 15, 7), float32]) {
    %1188 = @func_8171() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1189 = cast(meta[relay.Constant][49] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %1190 = cast(meta[relay.Constant][49] /* ty=Tensor[(42), uint32] */, dtype="uint32") /* ty=Tensor[(42), uint32] */;
    %1191 = reshape(%1189, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
    %1192 = reshape(%1190, newshape=[7, 3, 2]) /* ty=Tensor[(7, 3, 2), uint32] */;
    %1193 = %1188.0;
    %1194 = cast(%1193, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %1195 = reshape(%1194, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %1196 = @func_4610(%1195) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), float32]) */;
    %1197 = @func_6700(%1191, %1192) /* ty=Tensor[(7, 3, 2), uint32] */;
    %1198 = %1196.1;
    (%1193, %1197, meta[relay.Constant][49] /* ty=Tensor[(42), uint32] */, %1198)
  };
  %1199() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(7, 3, 2), uint32], Tensor[(42), uint32], Tensor[(4, 15, 7), float32]) */
}

def @func_5044() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) {
  @func_5042() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), bool], Tensor[(4, 156), bool]) */
}

def @func_12619(%var_12612: Tensor[(4, 1, 8), bool]) -> (Tensor[(4, 6, 8), bool],) {
  %1200 = cast(%var_12612, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %1201 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 6, 8), bool] */, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %1202 = logical_or(%1200, %1201) /* ty=Tensor[(4, 6, 8), bool] */;
  (%1202,)
}

def @func_1192() -> Tensor[(4, 15, 7), bool] {
  @func_1190() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_6798(%var_6748: Tensor[(15, 2, 3), uint16], %var_6749: Tensor[(15, 2, 3), uint16]) -> (Tensor[(4, 15, 7), bool], Tensor[(15, 2, 3), int16]) {
  %1203 = cast(%var_6749, dtype="uint16") /* ty=Tensor[(15, 2, 3), uint16] */;
  %1204 = shape_of(%var_6748, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1205 = cast(%var_6748, dtype="uint16") /* ty=Tensor[(15, 2, 3), uint16] */;
  %1206 = dyn.reshape(%1203, %1204, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1207 = add(%1205, %1206) /* ty=Tensor[(15, 2, 3), uint16] */;
  %1208 = cast(%var_6749, dtype="int16") /* ty=Tensor[(15, 2, 3), int16] */;
  %1209 = shape_of(%1207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1210 = cast(%1207, dtype="int16") /* ty=Tensor[(15, 2, 3), int16] */;
  %1211 = dyn.reshape(%1208, %1209, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1212 = @func_3547() /* ty=Tensor[(4, 15, 7), bool] */;
  %1213 = bitwise_xor(%1210, %1211) /* ty=Tensor[(15, 2, 3), int16] */;
  (%1212, %1213)
}

def @func_8235(%var_8230: Tensor[(3, 20), int32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) {
  %1214 = @func_3049() /* ty=(Tensor[(4, 15, 7), bool],) */;
  %1215 = cast(%var_8230, dtype="int32") /* ty=Tensor[(3, 20), int32] */;
  %1216 = reshape(%1215, newshape=[12, 5, 1]) /* ty=Tensor[(12, 5, 1), int32] */;
  %1217 = @func_7814(%1216) /* ty=(Tensor[(12, 5, 1), bool], Tensor[(4, 15, 7), float32], Tensor[(420), bool]) */;
  %1218 = %1214.0;
  %1219 = %1217.1;
  (%1218, %1219, %var_8230)
}

def @func_9517() -> Tensor[(8, 14, 11), int64] {
  %1220 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 14, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 14, 11), int64] */;
  %1221 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(8, 14, 11), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1222 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 14, 11), int64] */, dtype="int64") /* ty=Tensor[(8, 14, 11), int64] */;
  %1223 = dyn.reshape(%1220, %1221, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%1222, %1223) /* ty=Tensor[(8, 14, 11), int64] */
}

def @func_11565() -> (Tensor[(4, 15, 7), float64],) {
  %1226 = fn () -> (Tensor[(4, 15, 7), float64],) {
    %1224 = @func_8810() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
    %1225 = %1224.0;
    (%1225,)
  };
  %1226() /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_10854() -> (Tensor[(768), float32], Tensor[(4, 15, 7), float32], Tensor[(624), bool]) {
  %1233 = fn () -> (Tensor[(768), float32], Tensor[(4, 15, 7), float32], Tensor[(624), bool]) {
    %1227 = @func_2537() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), uint64], Tensor[(420), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1228 = cast(meta[relay.Constant][53] /* ty=Tensor[(624), bool] */, dtype="bool") /* ty=Tensor[(624), bool] */;
    %1229 = reshape(%1228, newshape=[624]) /* ty=Tensor[(624), bool] */;
    %1230 = @func_2271(%1229) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(208, 624), float64], Tensor[(624), bool], Tensor[(4, 15, 7), bool]) */;
    %1231 = %1227.0;
    %1232 = %1230.7;
    (%1231, %1232, meta[relay.Constant][53] /* ty=Tensor[(624), bool] */)
  };
  %1233() /* ty=(Tensor[(768), float32], Tensor[(4, 15, 7), float32], Tensor[(624), bool]) */
}

def @func_388() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1234 = @func_215() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1235 = @func_224() /* ty=Tensor[(4, 15, 7), bool] */;
  %1236 = %1234.1;
  (%1235, %1236)
}

def @func_4534() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1243 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %1237 = @func_4264() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
    %1238 = %1237.1;
    %1239 = cast(%1238, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
    %1240 = reshape(%1239, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
    %1241 = @func_448(%1240) /* ty=(Tensor[(4, 15, 7), bool],) */;
    %1242 = %1241.0;
    (%1238, %1242)
  };
  %1243() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_8238(%var_8236: Tensor[(3, 20), int32]) -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) {
  @func_8235(%var_8236) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(3, 20), int32]) */
}

def @func_476(%var_474: Tensor[(768), float32]) -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) {
  @func_473(%var_474) /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(768), float32], Tensor[(8, 6, 16), float32]) */
}

def @func_7162(%var_7161: Tensor[(5, 9, 5), int16]) -> (Tensor[(5, 9, 5), int16], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1249 = fn (%var_7147: Tensor[(5, 9, 5), int16]) -> (Tensor[(5, 9, 5), int16], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %1244 = cast(meta[relay.Constant][54] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %1245 = cast(%var_7147, dtype="int16") /* ty=Tensor[(5, 9, 5), int16] */;
    %1246 = add(%1244, %1245) /* ty=Tensor[(5, 9, 5), int16] */;
    %1247 = @func_6072() /* ty=Tensor[(4, 15, 7), bool] */;
    %1248 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
    (%1246, %1247, %1248)
  };
  %1249(%var_7161) /* ty=(Tensor[(5, 9, 5), int16], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_3809() -> (Tensor[(4, 15, 7), float64],) {
  @func_3807() /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_3532() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
  %1255 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) {
    %1250 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
    %1251 = cast(%1250, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %1252 = reshape(%1251, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %1253 = @func_1093(%1252) /* ty=(Tensor[(4, 15, 7), int16], Tensor[(4, 15, 7), float64], Tensor[(8, 6, 16), float32], Tensor[(768), float32]) */;
    %1254 = %1253.1;
    (%1250, %1254)
  };
  %1255() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */
}

def @func_8762(%var_8761: Tensor[(15, 4, 2), int8]) -> (Tensor[(4, 15, 7), bool], Tensor[(15, 4, 2), float64]) {
  %1265 = fn (%var_8735: Tensor[(15, 4, 2), int8]) -> (Tensor[(4, 15, 7), bool], Tensor[(15, 4, 2), float64]) {
    %1256 = @func_7500() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float64]) */;
    %1257 = cast(meta[relay.Constant][55] /* ty=Tensor[(15, 4, 2), int8] */, dtype="int8") /* ty=Tensor[(15, 4, 2), int8] */;
    %1258 = shape_of(%var_8735, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1259 = cast(%var_8735, dtype="int8") /* ty=Tensor[(15, 4, 2), int8] */;
    %1260 = dyn.reshape(%1257, %1258, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1261 = minimum(%1259, %1260) /* ty=Tensor[(15, 4, 2), int8] */;
    %1262 = cast(%1261, dtype="float64") /* ty=Tensor[(15, 4, 2), float64] */;
    %1263 = %1256.1;
    %1264 = exp(%1262) /* ty=Tensor[(15, 4, 2), float64] */;
    (%1263, %1264)
  };
  %1265(%var_8761) /* ty=(Tensor[(4, 15, 7), bool], Tensor[(15, 4, 2), float64]) */
}

def @func_9979() -> Tensor[(7, 3, 2), float64] {
  %1266 = @func_9451() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(7, 3, 2), uint32], Tensor[(42), uint32], Tensor[(4, 15, 7), float32]) */;
  %1267 = %1266.1;
  %1268 = cast(%1267, dtype="float64") /* ty=Tensor[(7, 3, 2), float64] */;
  cosh(%1268) /* ty=Tensor[(7, 3, 2), float64] */
}

def @func_2086(%var_2070: Tensor[(16, 5, 3), uint32], %var_2071: Tensor[(16, 5, 3), uint32]) -> (Tensor[(16, 5, 3), uint32],) {
  %1269 = cast(%var_2071, dtype="uint32") /* ty=Tensor[(16, 5, 3), uint32] */;
  %1270 = shape_of(%var_2070, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1271 = cast(%var_2070, dtype="uint32") /* ty=Tensor[(16, 5, 3), uint32] */;
  %1272 = dyn.reshape(%1269, %1270, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1273 = right_shift(%1271, %1272) /* ty=Tensor[(16, 5, 3), uint32] */;
  (%1273,)
}

def @func_1190() -> Tensor[(4, 15, 7), bool] {
  @func_1156() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_12110() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
  %1277 = fn () -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) {
    %1274 = @func_10972() /* ty=(Tensor[(4, 15, 7), bool],) */;
    %1275 = %1274.0;
    %1276 = @func_9997() /* ty=Tensor[(4, 15, 7), bool] */;
    (%1275, %1276)
  };
  %1277() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */
}

def @func_12209() -> (Tensor[(130), uint8], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) {
  %1284 = fn () -> (Tensor[(130), uint8], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) {
    %1278 = @func_8313() /* ty=(Tensor[(130), uint8],) */;
    %1279 = @func_8673() /* ty=(Tensor[(4, 15, 7), float32],) */;
    %1280 = @func_6289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */;
    %1281 = %1278.0;
    %1282 = %1279.0;
    %1283 = %1280.0;
    (%1281, %1282, %1283)
  };
  %1284() /* ty=(Tensor[(130), uint8], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), uint64]) */
}

def @func_6290() -> (Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) {
  %1289 = fn () -> (Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) {
    %1285 = @func_5255() /* ty=(Tensor[(4, 15, 7), uint64],) */;
    %1286 = @func_3300() /* ty=(Tensor[(4, 15, 7), float32], Tensor[(2, 3, 4), float64], Tensor[(24), float64], Tensor[(4, 15, 7), int8]) */;
    %1287 = %1285.0;
    %1288 = %1286.1;
    (%1287, %1288)
  };
  %1289() /* ty=(Tensor[(4, 15, 7), uint64], Tensor[(2, 3, 4), float64]) */
}

def @func_12081() -> (Tensor[(4, 15, 7), bool],) {
  %1290 = @func_8171() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool]) */;
  %1291 = %1290.1;
  (%1291,)
}

def @func_10372() -> Tensor[(4, 15, 7), bool] {
  @func_10370() /* ty=Tensor[(4, 15, 7), bool] */
}

def @func_12370() -> (Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), bool]) {
  %1292 = @func_9242() /* ty=(Tensor[(4, 15, 7), float64], Tensor[(4, 15, 7), bool]) */;
  %1293 = @func_6895() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(3, 16, 13), uint8], Tensor[(624, 1), bool]) */;
  %1294 = %1292.0;
  %1295 = cast(%1294, dtype="bool") /* ty=Tensor[(4, 15, 7), bool] */;
  %1296 = reshape(%1295, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), bool] */;
  %1297 = @func_691(%1296) /* ty=(Tensor[(4, 15, 7), float32], Tensor[(4, 15, 7), int8]) */;
  %1298 = %1293.0;
  %1299 = @func_9997() /* ty=Tensor[(4, 15, 7), bool] */;
  %1300 = %1297.0;
  %1301 = @func_1156() /* ty=Tensor[(4, 15, 7), bool] */;
  (%1294, %1298, %1299, %1300, %1301)
}

def @func_12534() -> (Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(686), int64]) {
  @func_12532() /* ty=(Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), bool], Tensor[(4, 15, 7), int8], Tensor[(686), int64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen595/build/output.py", line 4277, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:37:29] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

