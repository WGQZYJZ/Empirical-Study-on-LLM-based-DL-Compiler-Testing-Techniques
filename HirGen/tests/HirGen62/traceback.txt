==========mod==========
#[version = "0.0.5"]
def @func_7454() -> Tensor[(12, 13, 6), uint64] {
  %0 = @func_7249() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %0.0
}

def @func_1616() -> (Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %2 = reshape(%1, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %3 = @func_67(%2) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */;
  %4 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %5 = %4.0;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(12, 13, 6), float32] */, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%5, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %10 = %3.1;
  %11 = left_shift(%8, %9) /* ty=Tensor[(12, 13, 6), uint8] */;
  (%10, meta[relay.Constant][0] /* ty=Tensor[(50), float64] */, %11)
}

def @func_4939() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  %12 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %13 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
  %14 = %12.8;
  %15 = %13.1;
  %16 = @func_3410() /* ty=Tensor[(12, 13, 6), float32] */;
  (%14, %15, %16)
}

def @func_7330() -> (Tensor[(12, 13, 6), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), float64]) {
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
  %19 = reshape(%17, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), float64] */;
  %20 = reshape(%18, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), float64] */;
  %21 = @func_4468(%19, %20) /* ty=(Tensor[(9, 10, 14), float64], Tensor[(9, 10, 14), float64], Tensor[(12, 13, 6), float32]) */;
  %22 = @func_7204() /* ty=Tensor[(12, 13, 6), float32] */;
  %23 = %21.0;
  (%22, %23, meta[relay.Constant][2] /* ty=Tensor[(1260), float64] */)
}

def @func_2775(%var_2769: Tensor[(14, 11, 3), float32]) -> Tensor[(14, 11, 3), float32] {
  %24 = cast(%var_2769, dtype="float32") /* ty=Tensor[(14, 11, 3), float32] */;
  acosh(%24) /* ty=Tensor[(14, 11, 3), float32] */
}

def @func_6462(%var_6451: Tensor[(40), bool]) -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool]) {
  %25 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
  %26 = cast(4.07723f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %27 = cast(%var_6451, dtype="bool") /* ty=Tensor[(40), bool] */;
  %28 = reshape(%26, newshape=[]) /* ty=float64 */;
  %29 = reshape(%27, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %30 = @func_1427(%28, %29) /* ty=(Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %31 = %25.0;
  %32 = %30.1;
  (%31, %32, 4.07723f64 /* ty=float64 */, %var_6451)
}

def @func_7633(%var_7629: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64],) {
  %33 = cast(%var_7629, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %34 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(13, 4, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %37 = divide(%35, %36) /* ty=Tensor[(13, 4, 13), float64] */;
  (%37,)
}

def @func_3161() -> Tensor[(12, 13, 6), uint64] {
  %38 = @func_1983() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %38.1
}

def @func_4468(%var_4452: Tensor[(9, 10, 14), float64], %var_4453: Tensor[(9, 10, 14), float64]) -> (Tensor[(9, 10, 14), float64], Tensor[(9, 10, 14), float64], Tensor[(12, 13, 6), float32]) {
  %39 = cast(%var_4453, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
  %40 = shape_of(%var_4452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_4452, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %43 = cast(%var_4452, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
  %44 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %45 = divide(%41, %42) /* ty=Tensor[(9, 10, 14), float64] */;
  %46 = log10(%43) /* ty=Tensor[(9, 10, 14), float64] */;
  %47 = %44.1;
  (%45, %46, %47)
}

def @func_4840() -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), uint64]) {
  %48 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
  %49 = @func_4743() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %50 = %48.0;
  %51 = %49.0;
  (%50, %51)
}

def @func_952() -> Tensor[(12, 13, 6), float32] {
  %52 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %52.0
}

def @func_6412(%var_6389: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) {
  %53 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %54 = @func_4391() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) */;
  %55 = %54.0;
  %56 = cast(%var_6389, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %57 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%55, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %60 = %53.2;
  %61 = add(%58, %59) /* ty=Tensor[(12, 13, 6), float32] */;
  (%60, %61)
}

def @func_6595() -> (Tensor[(50), float64],) {
  %62 = @func_3965() /* ty=Tensor[(50), float64] */;
  (%62,)
}

def @func_7553() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], float64) {
  %63 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %64 = @func_2303() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %65 = @func_1696() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */;
  %66 = %63.0;
  %67 = %64.0;
  %68 = %65.2;
  (%66, %67, %68)
}

def @func_1557(%var_1541: Tensor[(10, 14, 14), uint64], %var_1542: Tensor[(10, 14, 14), uint64]) -> (Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) {
  %69 = cast(%var_1542, dtype="uint64") /* ty=Tensor[(10, 14, 14), uint64] */;
  %70 = shape_of(%var_1541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%var_1541, dtype="uint64") /* ty=Tensor[(10, 14, 14), uint64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %73 = cast(%var_1542, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
  %74 = maximum(%71, %72) /* ty=Tensor[(10, 14, 14), uint64] */;
  %75 = cos(%73) /* ty=Tensor[(10, 14, 14), float32] */;
  (%74, %75)
}

def @func_2393() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %76 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %77 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %78 = @func_859() /* ty=Tensor[(12, 13, 6), float32] */;
  %79 = %76.0;
  %80 = %77.1;
  (%78, %79, %80)
}

def @func_6555() -> (Tensor[(9, ?), bool], Tensor[(12, 13, 6), float32]) {
  %81 = @func_2303() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %82 = @func_6197() /* ty=Tensor[(9, ?), bool] */;
  %83 = %81.0;
  (%82, %83)
}

def @func_4339() -> Tensor[(12, 13, 6), float64] {
  %84 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %84.0
}

def @func_7204() -> Tensor[(12, 13, 6), float32] {
  %85 = @func_5254() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %85.0
}

def @func_6683() -> (Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(2, 5, 5), float32], Tensor[(12, 13, 6), float32]) {
  %86 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %87 = cast(meta[relay.Constant][4] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %88 = reshape(%87, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %89 = @func_67(%88) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */;
  %90 = %89.0;
  %91 = cast(%90, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %92 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %93 = %86.0;
  %94 = log(%91) /* ty=Tensor[(2, 5, 5), float32] */;
  %95 = %92.0;
  (%93, meta[relay.Constant][4] /* ty=Tensor[(50), float64] */, %94, %95)
}

def @func_3328(%var_3318: Tensor[(2, 5, 1), float32]) -> (Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) {
  %96 = cast(%var_3318, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %97 = @func_2393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %98 = sinh(%96) /* ty=Tensor[(2, 5, 1), float32] */;
  %99 = %97.1;
  (%98, %99)
}

def @func_7075(%var_7053: Tensor[(16, 9, 16), int8], %var_7054: Tensor[(16, 9, 16), int8], %var_7060: Tensor[(16, 9, 16), int8]) -> (Tensor[(16, 9, 16), uint32], Tensor[(16, 9, 16), float32]) {
  %100 = cast(%var_7060, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
  %101 = shape_of(%var_7053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %102 = cast(%var_7053, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
  %103 = dyn.reshape(%100, %101, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %104 = cast(%var_7054, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %105 = shape_of(%var_7053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_7053, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = less_equal(%106, %107) /* ty=Tensor[(16, 9, 16), bool] */;
  %109 = cast(%108, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %110 = multiply(%102, %103) /* ty=Tensor[(16, 9, 16), uint32] */;
  %111 = sigmoid(%109) /* ty=Tensor[(16, 9, 16), float32] */;
  (%110, %111)
}

def @func_345() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %112 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %113 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %114 = %112.0;
  %115 = %113.0;
  (%114, %115)
}

def @func_6230() -> (Tensor[(12, 13, 6), float32],) {
  %116 = @func_4391() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) */;
  %117 = %116.1;
  (%117,)
}

def @func_296() -> (Tensor[(12, 13, 6), float32],) {
  %118 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %119 = %118.0;
  (%119,)
}

def @func_664() -> Tensor[(12, 13, 6), uint64] {
  %120 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %120.1
}

def @func_2579() -> (Tensor[(12, 13, 6), float32],) {
  %121 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %122 = %121.0;
  (%122,)
}

def @func_1427(%var_1328: float64, %var_1377: Tensor[(40), bool]) -> (Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %123 = cast(%var_1328, dtype="float64") /* ty=float64 */;
  %124 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 11), float64] */;
  %125 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %126 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %127 = cast(%var_1377, dtype="bool") /* ty=Tensor[(40), bool] */;
  %128 = reshape(%127, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), bool] */;
  %129 = @func_1257(%128) /* ty=(Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) */;
  %130 = %126.0;
  %131 = cast(%130, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %132 = reshape(%131, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %133 = @func_764(%132) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %134 = cast(meta[relay.Constant][5] /* ty=Tensor[(13, 6, 11), float64] */, dtype="float32") /* ty=Tensor[(13, 6, 11), float32] */;
  %135 = rsqrt(%134) /* ty=Tensor[(13, 6, 11), float32] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(13, 6, 11), float32] */;
  %137 = log2(%136) /* ty=Tensor[(13, 6, 11), float32] */;
  %138 = cast(%137, dtype="float64") /* ty=Tensor[(13, 6, 11), float64] */;
  %139 = cast(%130, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %140 = reshape(%139, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %141 = @func_764(%140) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %142 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %143 = mod(%123, %124) /* ty=Tensor[(13, 6, 11), float64] */;
  %144 = %125.0;
  %145 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
  %146 = %129.0;
  %147 = %133.2;
  %148 = asin(%138) /* ty=Tensor[(13, 6, 11), float64] */;
  %149 = %141.4;
  %150 = %142.0;
  (%143, %144, %145, %130, %146, %var_1377, %147, %148, %149, %150)
}

def @func_1923() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) {
  %151 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %154 = reshape(%153, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %155 = @func_764(%154) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %156 = cast(%152, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %157 = reshape(%156, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), float32] */;
  %158 = @func_243(%157) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %159 = %155.0;
  %160 = %158.0;
  (%152, %159, %160)
}

def @func_2259(%var_2198: Tensor[(5, 15, 12), bool], %var_2199: Tensor[(5, 15, 12), bool], %var_2224: Tensor[(12, 13, 6), uint64]) -> (Tensor[(50), float64], Tensor[(12, 13, 6), bool], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), int16]) {
  %161 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
  %162 = @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */;
  %163 = cast(%var_2224, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%162, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %167 = cast(%var_2199, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %168 = shape_of(%var_2198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_2198, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = logical_or(%169, %170) /* ty=Tensor[(5, 15, 12), bool] */;
  %172 = cast(%171, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %173 = sqrt(%172) /* ty=Tensor[(5, 15, 12), float64] */;
  %174 = cast(%var_2198, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %175 = shape_of(%173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(%173, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %178 = cast(%173, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %179 = acosh(%178) /* ty=Tensor[(5, 15, 12), float64] */;
  %180 = cast(%var_2199, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %181 = sin(%180) /* ty=Tensor[(5, 15, 12), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %183 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %184 = cast(%179, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %185 = dyn.reshape(%182, %183, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %186 = floor_divide(%184, %185) /* ty=Tensor[(5, 15, 12), float32] */;
  %187 = cast(%173, dtype="int16") /* ty=Tensor[(5, 15, 12), int16] */;
  %188 = shape_of(%186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%186, dtype="int16") /* ty=Tensor[(5, 15, 12), int16] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %191 = %161.2;
  %192 = greater_equal(%165, %166) /* ty=Tensor[(12, 13, 6), bool] */;
  %193 = divide(%176, %177) /* ty=Tensor[(5, 15, 12), float32] */;
  %194 = multiply(%189, %190) /* ty=Tensor[(5, 15, 12), int16] */;
  (%191, %192, %193, %194)
}

def @func_2070(%var_2050: Tensor[(4, 7, 3), float32]) -> (Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) {
  %195 = cast(%var_2050, dtype="float32") /* ty=Tensor[(4, 7, 3), float32] */;
  %196 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %197 = acos(%195) /* ty=Tensor[(4, 7, 3), float32] */;
  %198 = %196.2;
  (%197, %198)
}

def @func_3826() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %199 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %200 = @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */;
  %201 = %200.2;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %203 = @func_859() /* ty=Tensor[(12, 13, 6), float32] */;
  %204 = %199.1;
  %205 = sigmoid(%202) /* ty=Tensor[(12, 13, 6), float32] */;
  (%203, %204, %205)
}

def @func_5661() -> Tensor[(12, 13, 6), float64] {
  %206 = @func_2730() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) */;
  %206.1
}

def @func_4168() -> Tensor[(12, 13, 6), float32] {
  @func_859() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_791(%var_779: Tensor[(13, 5, 6), float32]) -> (Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) {
  %207 = cast(%var_779, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %208 = cast(%var_779, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  %209 = sinh(%207) /* ty=Tensor[(13, 5, 6), float32] */;
  %210 = acosh(%208) /* ty=Tensor[(13, 5, 6), float64] */;
  (%209, %210)
}

def @func_2141(%var_2135: Tensor[(12, 2, 12), bool], %var_2136: Tensor[(12, 2, 12), bool]) -> (Tensor[(12, 2, 12), bool],) {
  %211 = cast(%var_2136, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %212 = shape_of(%var_2135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_2135, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %215 = logical_and(%213, %214) /* ty=Tensor[(12, 2, 12), bool] */;
  (%215,)
}

def @func_1053() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %216 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %217 = %216.0;
  %218 = cast(%217, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %219 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %220 = exp(%218) /* ty=Tensor[(12, 13, 6), float32] */;
  %221 = %219.0;
  (%220, %221)
}

def @func_1434() -> Tensor[(12, 13, 6), uint64] {
  %222 = @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %222.2
}

def @func_1983() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) {
  %223 = @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %224 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
  %225 = %223.2;
  (%224, %225)
}

def @func_5604() -> Tensor[(12, 13, 6), float32] {
  %226 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %226.0
}

def @func_6306() -> Tensor[(12, 13, 6), float32] {
  %227 = @func_2403() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %227.0
}

def @func_1869() -> Tensor[(12, 13, 6), float32] {
  %228 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %228.0
}

def @func_3700() -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) {
  %229 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %230 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %231 = %229.5;
  %232 = %230.0;
  (%231, %232)
}

def @func_5981() -> Tensor[(12, 13, 6), uint64] {
  @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_2358() -> (Tensor[(12, 13, 6), uint64],) {
  %233 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %234 = %233.1;
  (%234,)
}

def @func_7366() -> Tensor[(12, 13, 6), uint8] {
  %235 = @func_4034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) */;
  %235.1
}

def @func_7478(%var_7466: Tensor[(11, 3, 5), float32]) -> Tensor[(11, 3, 5), float32] {
  %236 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 5), float32] */;
  %237 = shape_of(%var_7466, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%var_7466, dtype="float32") /* ty=Tensor[(11, 3, 5), float32] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%238, %239) /* ty=Tensor[(11, 3, 5), float32] */
}

def @func_537() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) {
  %240 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %241 = %240.0;
  %242 = cast(%241, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %243 = sqrt(%242) /* ty=Tensor[(12, 13, 6), float64] */;
  %244 = cast(%241, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = cast(%241, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %249 = reshape(%248, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), float32] */;
  %250 = @func_243(%249) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %251 = less_equal(%246, %247) /* ty=Tensor[(12, 13, 6), bool] */;
  %252 = %250.1;
  (%251, %252)
}

def @func_4143() -> (Tensor[(12, 13, 6), int16],) {
  %253 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %254 = %253.0;
  %255 = @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %256 = %255.0;
  %257 = cast(%256, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %258 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%254, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %261 = bitwise_or(%259, %260) /* ty=Tensor[(12, 13, 6), int16] */;
  (%261,)
}

def @func_2403() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %262 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %263 = @func_1983() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %264 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %265 = %262.0;
  %266 = %263.1;
  %267 = %264.0;
  (%265, %266, %267)
}

def @func_601() -> (Tensor[(12, 13, 6), float32],) {
  %268 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %269 = %268.0;
  (%269,)
}

def @func_2303() -> (Tensor[(12, 13, 6), float32],) {
  %270 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
  (%270,)
}

def @func_2421() -> (Tensor[(12, 13, 6), float64],) {
  %271 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %272 = %271.0;
  (%272,)
}

def @func_3336() -> Tensor[(4, 3, 7), float64] {
  %273 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 7), float64] */;
  atan(%273) /* ty=Tensor[(4, 3, 7), float64] */
}

def @func_4189() -> (Tensor[(12, 13, 6), float32],) {
  %274 = @func_2191() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %275 = %274.2;
  (%275,)
}

def @func_2730() -> (Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) {
  %276 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %277 = %276.0;
  %278 = cast(%277, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %279 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %280 = log(%278) /* ty=Tensor[(12, 13, 6), float64] */;
  %281 = %279.0;
  (%280, %281)
}

def @func_7597() -> (Tensor[(12, 13, 6), float64], Tensor[(12, 2, 12), bool], Tensor[(288), bool]) {
  %282 = @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %283 = cast(meta[relay.Constant][8] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %284 = reshape(%283, newshape=[288, 1]) /* ty=Tensor[(288, 1), bool] */;
  %285 = @func_3616(%284) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) */;
  %286 = %282.1;
  %287 = %285.1;
  (%286, %287, meta[relay.Constant][8] /* ty=Tensor[(288), bool] */)
}

def @func_7665() -> Tensor[(12, 13, 6), float32] {
  %288 = @func_2579() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %288.0
}

def @func_7125() -> Tensor[(12, 13, 6), uint64] {
  @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_5867(%var_5822: Tensor[(1960), uint64]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool], Tensor[(1960), uint32], Tensor[(12, 13, 6), float32], Tensor[(1960), float64]) {
  %289 = cast(%var_5822, dtype="float32") /* ty=Tensor[(1960), float32] */;
  %290 = atan(%289) /* ty=Tensor[(1960), float32] */;
  %291 = cast(%var_5822, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %292 = cast(%var_5822, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %293 = reshape(%291, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %294 = reshape(%292, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %295 = @func_1557(%293, %294) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */;
  %296 = %295.0;
  %297 = cast(%296, dtype="uint32") /* ty=Tensor[(10, 14, 14), uint32] */;
  %298 = shape_of(%290, dtype="int32") /* ty=Tensor[(1), int32] */;
  %299 = cast(%290, dtype="uint32") /* ty=Tensor[(1960), uint32] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %301 = @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %302 = cast(%290, dtype="float64") /* ty=Tensor[(1960), float64] */;
  %303 = @func_2808() /* ty=Tensor[(12, 13, 6), float32] */;
  %304 = @func_5762() /* ty=Tensor[(12, 13, 6), bool] */;
  %305 = bitwise_xor(%299, %300) /* ty=Tensor[(1960), uint32] */;
  %306 = %301.0;
  %307 = log2(%302) /* ty=Tensor[(1960), float64] */;
  (%303, %304, %305, %306, %307)
}

def @func_393() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %308 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %309 = %308.1;
  %310 = cast(%309, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %311 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %312 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %313 = atan(%310) /* ty=Tensor[(12, 13, 6), float32] */;
  %314 = %311.0;
  %315 = %312.0;
  (%313, %314, %315)
}

def @func_1257(%var_1209: Tensor[(5, 2, 4), bool]) -> (Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) {
  %316 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 2, 4), uint16] */, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %317 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(5, 2, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 2, 4), uint16] */, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = less_equal(%318, %319) /* ty=Tensor[(5, 2, 4), bool] */;
  %321 = cast(%var_1209, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %325 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 390), float32] */, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
  %326 = reshape(%325, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %327 = @func_791(%326) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */;
  %328 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %329 = cast(%var_1209, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %330 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%320, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %333 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %334 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %335 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %336 = cast(%var_1209, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %337 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%320, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = logical_xor(%323, %324) /* ty=Tensor[(5, 2, 4), int32] */;
  %341 = %327.0;
  %342 = %328.0;
  %343 = power(%331, %332) /* ty=Tensor[(5, 2, 4), float32] */;
  %344 = %333.1;
  %345 = %334.0;
  %346 = %335.0;
  %347 = logical_or(%338, %339) /* ty=Tensor[(5, 2, 4), bool] */;
  (%340, %341, meta[relay.Constant][11] /* ty=Tensor[(1, 390), float32] */, %342, %343, %344, %345, %346, %347)
}

def @func_3758() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %348 = @func_2191() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %349 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %350 = %348.1;
  %351 = %349.0;
  (%350, %351)
}

def @func_6712(%var_6698: Tensor[(10), float32]) -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], Tensor[(10), float32], Tensor[(12, 13, 6), uint64]) {
  %352 = cast(%var_6698, dtype="float32") /* ty=Tensor[(10), float32] */;
  %353 = reshape(%352, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %354 = @func_3328(%353) /* ty=(Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) */;
  %355 = @func_5762() /* ty=Tensor[(12, 13, 6), bool] */;
  %356 = %354.1;
  %357 = @func_4511() /* ty=Tensor[(12, 13, 6), uint64] */;
  (%355, %356, %var_6698, %357)
}

def @func_5238() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %358 = @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %359 = @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */;
  %360 = %358.0;
  %361 = %359.1;
  (%360, %361)
}

def @func_7249() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %362 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %363 = @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */;
  %364 = %362.0;
  (%363, %364)
}

def @func_7137() -> (Tensor[(12, 13, 6), float32],) {
  %365 = @func_2819() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %366 = %365.0;
  (%366,)
}

def @func_7499(%var_7490: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64],) {
  %367 = cast(%var_7490, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %368 = acosh(%367) /* ty=Tensor[(2, 2, 13), float64] */;
  (%368,)
}

def @func_5438(%var_5364: Tensor[(2520), int16], %var_5365: uint8, %var_5411: Tensor[(900), bool]) -> (Tensor[(12, 13, 6), float32], uint8, Tensor[(2520), int16], uint8, Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(50), float32], Tensor[(900), bool], Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), float32]) {
  %369 = cast(%var_5364, dtype="int16") /* ty=Tensor[(2520), int16] */;
  %370 = cast(%var_5364, dtype="int16") /* ty=Tensor[(2520), int16] */;
  %371 = cast(%var_5365, dtype="uint8") /* ty=uint8 */;
  %372 = reshape(%369, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), int16] */;
  %373 = reshape(%370, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), int16] */;
  %374 = reshape(%371, newshape=[]) /* ty=uint8 */;
  %375 = @func_4693(%372, %373, %374) /* ty=(Tensor[(15, 12, 14), int16], Tensor[(15, 12, 14), float32], Tensor[(12, 13, 6), float32], uint8, Tensor[(308), uint8]) */;
  %376 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %377 = @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %378 = cast(%var_5411, dtype="bool") /* ty=Tensor[(900), bool] */;
  %379 = reshape(%378, newshape=[900]) /* ty=Tensor[(900), bool] */;
  %380 = @func_4533(%379) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(900), bool], Tensor[(50), float32]) */;
  %381 = @func_2421() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %382 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
  %383 = @func_2303() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %384 = @func_859() /* ty=Tensor[(12, 13, 6), float32] */;
  %385 = %375.3;
  %386 = %376.0;
  %387 = %377.0;
  %388 = %380.2;
  %389 = %381.0;
  %390 = %382.2;
  %391 = %383.0;
  (%384, %385, %var_5364, %var_5365, %386, %387, %388, %var_5411, %389, %390, %391)
}

def @func_2191() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %392 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %393 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %394 = %392.0;
  %395 = %393.0;
  %396 = @func_952() /* ty=Tensor[(12, 13, 6), float32] */;
  (%394, %395, %396)
}

def @func_2034() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %397 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %398 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %401 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %402 = %397.0;
  %403 = acos(%400) /* ty=Tensor[(12, 13, 6), float32] */;
  %404 = %401.0;
  (%402, %403, %404)
}

def @func_3208(%var_3171: Tensor[(12, 5, 1), int16], %var_3175: Tensor[(12, 5, 8), int16], %var_3203: Tensor[(12, 5, 11), int16]) -> (Tensor[(12, 5, 1), int16], Tensor[(12, 5, 8), bool], Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 5, 11), uint16]) {
  %405 = cast(meta[relay.Constant][12] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %406 = cast(%var_3171, dtype="int16") /* ty=Tensor[(12, 5, 1), int16] */;
  %407 = cast(%var_3171, dtype="bool") /* ty=Tensor[(12, 5, 1), bool] */;
  %408 = cast(%var_3175, dtype="bool") /* ty=Tensor[(12, 5, 8), bool] */;
  %409 = @func_1696() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */;
  %410 = @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %411 = cast(%var_3171, dtype="uint16") /* ty=Tensor[(12, 5, 1), uint16] */;
  %412 = cast(%var_3203, dtype="uint16") /* ty=Tensor[(12, 5, 11), uint16] */;
  %413 = subtract(%405, %406) /* ty=Tensor[(12, 5, 1), int16] */;
  %414 = less_equal(%407, %408) /* ty=Tensor[(12, 5, 8), bool] */;
  %415 = %409.0;
  %416 = %410.0;
  %417 = subtract(%411, %412) /* ty=Tensor[(12, 5, 11), uint16] */;
  (%413, %414, %415, %416, %417)
}

def @func_243(%var_222: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) {
  %418 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %419 = %418.0;
  %420 = cast(%var_222, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %424 = cast(meta[relay.Constant][13] /* ty=Tensor[(12, 13, 6), float32] */, dtype="uint64") /* ty=Tensor[(12, 13, 6), uint64] */;
  %425 = shape_of(%var_222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%var_222, dtype="uint64") /* ty=Tensor[(12, 13, 6), uint64] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %428 = logical_or(%422, %423) /* ty=Tensor[(12, 13, 6), bool] */;
  %429 = minimum(%426, %427) /* ty=Tensor[(12, 13, 6), uint64] */;
  (%428, %429)
}

def @func_6775() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64]) {
  %430 = @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %431 = @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %432 = %430.0;
  %433 = %431.1;
  (%432, %433)
}

def @func_1071(%var_1055: Tensor[(11, 2, 6), bool], %var_1056: Tensor[(11, 2, 6), bool]) -> Tensor[(11, 2, 6), bool] {
  %434 = cast(%var_1056, dtype="bool") /* ty=Tensor[(11, 2, 6), bool] */;
  %435 = shape_of(%var_1055, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%var_1055, dtype="bool") /* ty=Tensor[(11, 2, 6), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%436, %437) /* ty=Tensor[(11, 2, 6), bool] */
}

def @func_2542() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) {
  %438 = @func_2448() /* ty=Tensor[(12, 13, 6), float32] */;
  %439 = cast(%438, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %440 = reshape(%439, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %441 = @func_764(%440) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %442 = @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */;
  %443 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %444 = cast(meta[relay.Constant][14] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %445 = reshape(%444, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
  %446 = @func_2070(%445) /* ty=(Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) */;
  %447 = cast(%438, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %448 = asinh(%447) /* ty=Tensor[(12, 13, 6), float64] */;
  %449 = cast(meta[relay.Constant][15] /* ty=Tensor[(12, 13, 6), float64] */, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %453 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %454 = cast(meta[relay.Constant][16] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %455 = reshape(%453, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
  %456 = reshape(%454, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
  %457 = @func_2141(%455, %456) /* ty=(Tensor[(12, 2, 12), bool],) */;
  %458 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
  %459 = %441.4;
  %460 = %442.0;
  %461 = %443.0;
  %462 = %446.0;
  %463 = right_shift(%451, %452) /* ty=Tensor[(12, 13, 6), uint8] */;
  %464 = %457.0;
  %465 = %458.0;
  (%459, %460, %461, %462, meta[relay.Constant][14] /* ty=Tensor[(84), float32] */, %463, %464, meta[relay.Constant][16] /* ty=Tensor[(288), bool] */, %465)
}

def @func_6896(%var_6869: Tensor[(2520), float32]) -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 15, 14), float32], Tensor[(2520), float32], Tensor[(10, 14, 14), uint64], Tensor[(1960), uint64]) {
  %466 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %467 = %466.0;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %469 = cast(%var_6869, dtype="float32") /* ty=Tensor[(2520), float32] */;
  %470 = reshape(%469, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), float32] */;
  %471 = @func_5598(%470) /* ty=(Tensor[(12, 15, 14), float32],) */;
  %472 = cast(meta[relay.Constant][17] /* ty=Tensor[(1960), uint64] */, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %473 = cast(meta[relay.Constant][17] /* ty=Tensor[(1960), uint64] */, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %474 = reshape(%472, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %475 = reshape(%473, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %476 = @func_1557(%474, %475) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */;
  %477 = @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */;
  %478 = asin(%468) /* ty=Tensor[(12, 13, 6), float32] */;
  %479 = %471.0;
  %480 = %476.0;
  (%477, %478, %479, %var_6869, %480, meta[relay.Constant][17] /* ty=Tensor[(1960), uint64] */)
}

def @func_7850() -> Tensor[(12, 13, 6), float32] {
  %481 = @func_5516() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %481.0
}

def @func_859() -> Tensor[(12, 13, 6), float32] {
  %482 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %482.1
}

def @func_1696() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) {
  %483 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %484 = %483.0;
  %485 = @func_952() /* ty=Tensor[(12, 13, 6), float32] */;
  %486 = cast(%485, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %487 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%484, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = cast(-4.20381f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %491 = cast(meta[relay.Constant][18] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %492 = reshape(%490, newshape=[]) /* ty=float64 */;
  %493 = reshape(%491, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %494 = @func_1427(%492, %493) /* ty=(Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %495 = not_equal(%488, %489) /* ty=Tensor[(12, 13, 6), bool] */;
  %496 = %494.3;
  %497 = @func_952() /* ty=Tensor[(12, 13, 6), float32] */;
  (%495, %496, -4.20381f64 /* ty=float64 */, meta[relay.Constant][18] /* ty=Tensor[(40), bool] */, %497)
}

def @func_5104(%var_5101: Tensor[(84, 1), float32]) -> (Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84, 1), float32]) {
  %498 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %499 = cast(%var_5101, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %500 = reshape(%499, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
  %501 = @func_2070(%500) /* ty=(Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) */;
  %502 = %498.2;
  %503 = %501.0;
  (%502, %503, %var_5101)
}

def @func_5516() -> (Tensor[(12, 13, 6), float32],) {
  %504 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %505 = %504.0;
  (%505,)
}

def @func_2808() -> Tensor[(12, 13, 6), float32] {
  @func_1456() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_6197() -> Tensor[(9, ?), bool] {
  %506 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
  %507 = sigmoid(%506) /* ty=Tensor[(9, 1), float32] */;
  %508 = cast(meta[relay.Constant][19] /* ty=Tensor[(9, 1), float32] */, dtype="bool") /* ty=Tensor[(9, 1), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(2), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(9, 1), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  less_equal(%510, %511) /* ty=Tensor[(9, ?), bool] */
}

def @func_4511() -> Tensor[(12, 13, 6), uint64] {
  @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_3410() -> Tensor[(12, 13, 6), float32] {
  %512 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %512.0
}

def @func_5474(%var_5452: Tensor[(9, 16, 3), uint32], %var_5453: Tensor[(9, 16, 3), uint32], %var_5462: Tensor[(40), bool]) -> (Tensor[(9, 16, 3), bool], Tensor[(12, 13, 6), uint64], Tensor[(40), bool], Tensor[(9, 16, 3), bool]) {
  %513 = cast(%var_5453, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %514 = shape_of(%var_5452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_5452, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = cast(%var_5462, dtype="bool") /* ty=Tensor[(40), bool] */;
  %518 = reshape(%517, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), bool] */;
  %519 = @func_1257(%518) /* ty=(Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) */;
  %520 = cast(%var_5453, dtype="int32") /* ty=Tensor[(9, 16, 3), int32] */;
  %521 = shape_of(%var_5452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_5452, dtype="int32") /* ty=Tensor[(9, 16, 3), int32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %524 = subtract(%522, %523) /* ty=Tensor[(9, 16, 3), int32] */;
  %525 = cast(%524, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %526 = shape_of(%var_5453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%var_5453, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = less_equal(%515, %516) /* ty=Tensor[(9, 16, 3), bool] */;
  %530 = %519.5;
  %531 = logical_or(%527, %528) /* ty=Tensor[(9, 16, 3), bool] */;
  (%529, %530, %var_5462, %531)
}

def @func_1160() -> (Tensor[(12, 13, 6), float64],) {
  %532 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %534 = log2(%533) /* ty=Tensor[(12, 13, 6), float64] */;
  (%534,)
}

def @func_1801() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) {
  %535 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %536 = %535.1;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %538 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %539 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %540 = log10(%537) /* ty=Tensor[(12, 13, 6), float32] */;
  %541 = %538.1;
  %542 = %539.1;
  (%540, %541, %542)
}

def @func_3008(%var_2986: Tensor[(13, 16, 7), uint16], %var_2987: Tensor[(13, 16, 7), uint16]) -> (Tensor[(13, 16, 7), uint16], Tensor[(12, 13, 6), float64], Tensor[(13, 16, 7), float32], Tensor[(12, 13, 6), float32]) {
  %543 = cast(%var_2987, dtype="uint16") /* ty=Tensor[(13, 16, 7), uint16] */;
  %544 = shape_of(%var_2986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_2986, dtype="uint16") /* ty=Tensor[(13, 16, 7), uint16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %547 = @func_2730() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) */;
  %548 = cast(%var_2986, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %549 = sigmoid(%548) /* ty=Tensor[(13, 16, 7), float64] */;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %551 = shape_of(%var_2987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_2987, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %554 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %555 = multiply(%545, %546) /* ty=Tensor[(13, 16, 7), uint16] */;
  %556 = %547.1;
  %557 = mod(%552, %553) /* ty=Tensor[(13, 16, 7), float32] */;
  %558 = %554.1;
  (%555, %556, %557, %558)
}

def @func_6508(%var_6484: Tensor[(8, 8, 6), float64]) -> (Tensor[(8, 8, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %559 = cast(%var_6484, dtype="float64") /* ty=Tensor[(8, 8, 6), float64] */;
  %560 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %561 = exp(%559) /* ty=Tensor[(8, 8, 6), float64] */;
  %562 = @func_5981() /* ty=Tensor[(12, 13, 6), uint64] */;
  %563 = %560.0;
  (%561, %562, %563)
}

def @func_1041() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %564 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %565 = %564.1;
  %566 = cast(%565, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %567 = reshape(%566, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %568 = @func_764(%567) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %569 = @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %570 = %568.3;
  %571 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
  %572 = %569.1;
  (%565, %570, %571, %572)
}

def @func_5966(%var_5918: Tensor[(4, 3, 9), float32]) -> (Tensor[(4, 3, 9), float32], Tensor[(2, 5, 1), float32], Tensor[(10), float32], Tensor[(4, 3, 9), bool], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %573 = cast(%var_5918, dtype="float32") /* ty=Tensor[(4, 3, 9), float32] */;
  %574 = cast(meta[relay.Constant][20] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %575 = reshape(%574, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %576 = @func_3328(%575) /* ty=(Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) */;
  %577 = cast(%var_5918, dtype="float32") /* ty=Tensor[(4, 3, 9), float32] */;
  %578 = log(%577) /* ty=Tensor[(4, 3, 9), float32] */;
  %579 = cast(%var_5918, dtype="int8") /* ty=Tensor[(4, 3, 9), int8] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="int8") /* ty=Tensor[(4, 3, 9), int8] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %583 = bitwise_xor(%581, %582) /* ty=Tensor[(4, 3, 9), int8] */;
  %584 = cast(%583, dtype="bool") /* ty=Tensor[(4, 3, 9), bool] */;
  %585 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%578, dtype="bool") /* ty=Tensor[(4, 3, 9), bool] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %588 = @func_5639() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %589 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %590 = cosh(%573) /* ty=Tensor[(4, 3, 9), float32] */;
  %591 = %576.0;
  %592 = equal(%586, %587) /* ty=Tensor[(4, 3, 9), bool] */;
  %593 = %588.0;
  %594 = %589.0;
  (%590, %591, meta[relay.Constant][20] /* ty=Tensor[(10), float32] */, %592, %593, %594)
}

def @func_4274() -> Tensor[(12, 13, 6), uint64] {
  @func_664() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_1571() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %595 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %596 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %597 = %595.0;
  %598 = %596.1;
  (%597, %598)
}

def @func_839() -> (Tensor[(12, 13, 6), float32],) {
  %599 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %600 = %599.0;
  (%600,)
}

def @func_5742() -> (Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32], Tensor[(13, 5, 6), uint16], Tensor[(13, 5, 6), float64]) {
  %601 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %602 = cast(meta[relay.Constant][21] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %603 = reshape(%602, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %604 = @func_791(%603) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %607 = erf(%606) /* ty=Tensor[(13, 5, 6), float32] */;
  %608 = cast(meta[relay.Constant][21] /* ty=Tensor[(390), float32] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="uint16") /* ty=Tensor[(13, 5, 6), uint16] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %612 = cast(%607, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  %613 = %601.3;
  %614 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
  %615 = bitwise_or(%610, %611) /* ty=Tensor[(13, 5, 6), uint16] */;
  %616 = exp(%612) /* ty=Tensor[(13, 5, 6), float64] */;
  (%613, %614, %615, %616)
}

def @func_3637() -> (Tensor[(12, 13, 6), uint64],) {
  %617 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
  (%617,)
}

def @func_3965() -> Tensor[(50), float64] {
  %618 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %618.1
}

def @func_7616() -> Tensor[(12, 13, 6), float32] {
  %619 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %619.0
}

def @func_67(%var_41: Tensor[(2, 5, 5), float64]) -> (Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) {
  %620 = cast(%var_41, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
  %621 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %622 = %621.0;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %624 = sqrt(%620) /* ty=Tensor[(2, 5, 5), float64] */;
  %625 = erf(%623) /* ty=Tensor[(12, 13, 6), float64] */;
  (%624, %625)
}

def @func_5639() -> (Tensor[(12, 13, 6), float32],) {
  %626 = @func_2393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %627 = %626.2;
  (%627,)
}

def @func_5129() -> Tensor[(12, 13, 6), uint64] {
  %628 = @func_1983() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %628.1
}

def @func_5037() -> (Tensor[(12, 13, 6), float32], Tensor[(50), float64]) {
  %629 = @func_3965() /* ty=Tensor[(50), float64] */;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(50), float64] */;
  %631 = @func_3410() /* ty=Tensor[(12, 13, 6), float32] */;
  %632 = asinh(%630) /* ty=Tensor[(50), float64] */;
  (%631, %632)
}

def @func_2819() -> (Tensor[(12, 13, 6), float32],) {
  %633 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %634 = %633.0;
  (%634,)
}

def @func_5762() -> Tensor[(12, 13, 6), bool] {
  %635 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %635.0
}

def @func_4034() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) {
  %636 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %637 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
  %638 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %639 = %636.0;
  %640 = %637.0;
  %641 = %638.0;
  (%639, %640, %641)
}

def @func_2448() -> Tensor[(12, 13, 6), float32] {
  %642 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %642.0
}

def @func_1272() -> (Tensor[(12, 13, 6), float32],) {
  %643 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %644 = %643.0;
  (%644,)
}

def @func_4870() -> (Tensor[(12, 13, 6), uint64],) {
  %645 = @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %646 = %645.0;
  (%646,)
}

def @func_39() -> (Tensor[(12, 13, 6), float32],) {
  %647 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %648 = atanh(%647) /* ty=Tensor[(12, 13, 6), float64] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %650 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(12, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 13, 6), float64] */, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %653 = divide(%651, %652) /* ty=Tensor[(12, 13, 6), float32] */;
  (%653,)
}

def @func_5161() -> Tensor[(12, 13, 6), float64] {
  %654 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %654.0
}

def @func_3883(%var_3829: uint8, %var_3830: Tensor[(2, 11, 14), uint8]) -> (Tensor[(2, 11, 14), uint8], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(288), bool], Tensor[(12, 2, 12), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float32]) {
  %655 = cast(%var_3829, dtype="uint8") /* ty=uint8 */;
  %656 = cast(%var_3830, dtype="uint8") /* ty=Tensor[(2, 11, 14), uint8] */;
  %657 = @func_2358() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %658 = cast(meta[relay.Constant][23] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %659 = reshape(%658, newshape=[288, 1]) /* ty=Tensor[(288, 1), bool] */;
  %660 = @func_3616(%659) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) */;
  %661 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %662 = cast(meta[relay.Constant][24] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %663 = reshape(%662, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %664 = @func_791(%663) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */;
  %665 = left_shift(%655, %656) /* ty=Tensor[(2, 11, 14), uint8] */;
  %666 = %657.0;
  %667 = %660.0;
  %668 = %661.6;
  %669 = %664.1;
  (%665, %666, %667, meta[relay.Constant][23] /* ty=Tensor[(288), bool] */, %668, %669, meta[relay.Constant][24] /* ty=Tensor[(390), float32] */)
}

def @func_6043() -> (Tensor[(4, 3, 7), float64],) {
  %670 = @func_3336() /* ty=Tensor[(4, 3, 7), float64] */;
  (%670,)
}

def @main(%var_7879: Tensor[(1960), uint64]) -> (Tensor[(12, 13, 6), float32], Tensor[(10, 14, 14), float32], Tensor[(1960), uint64], Tensor[(12, 13, 6), uint32]) {
  %671 = @func_4189() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %672 = cast(%var_7879, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %673 = cast(%var_7879, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %674 = reshape(%672, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %675 = reshape(%673, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %676 = @func_1557(%674, %675) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */;
  %677 = @func_1696() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */;
  %678 = %677.1;
  %679 = @func_5604() /* ty=Tensor[(12, 13, 6), float32] */;
  %680 = cast(%679, dtype="uint32") /* ty=Tensor[(12, 13, 6), uint32] */;
  %681 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %682 = cast(%678, dtype="uint32") /* ty=Tensor[(12, 13, 6), uint32] */;
  %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %684 = %671.0;
  %685 = %676.1;
  %686 = bitwise_xor(%682, %683) /* ty=Tensor[(12, 13, 6), uint32] */;
  (%684, %685, %var_7879, %686)
}

def @func_4391() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) {
  %687 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %688 = @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %689 = @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %690 = %687.1;
  %691 = %688.0;
  %692 = %689.0;
  (%690, %691, %692)
}

def @func_4533(%var_4528: Tensor[(900), bool]) -> (Tensor[(12, 13, 6), float32], Tensor[(900), bool], Tensor[(50), float32]) {
  %693 = @func_3758() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %694 = cast(%var_4528, dtype="bool") /* ty=Tensor[(900), bool] */;
  %695 = cast(%var_4528, dtype="bool") /* ty=Tensor[(900), bool] */;
  %696 = %693.0;
  %697 = cast(%696, dtype="uint64") /* ty=Tensor[(12, 13, 6), uint64] */;
  %698 = reshape(%694, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), bool] */;
  %699 = reshape(%695, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), bool] */;
  %700 = reshape(%697, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), uint64] */;
  %701 = @func_2259(%698, %699, %700) /* ty=(Tensor[(50), float64], Tensor[(12, 13, 6), bool], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), int16]) */;
  %702 = %701.0;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(50), float32] */;
  %704 = asin(%703) /* ty=Tensor[(50), float32] */;
  (%696, %var_4528, %704)
}

def @func_6017() -> (Tensor[(12, 13, 6), float32],) {
  %705 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %706 = %705.0;
  (%706,)
}

def @func_823(%var_808: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %707 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %708 = %707.0;
  %709 = cast(%var_808, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %713 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %714 = mod(%711, %712) /* ty=Tensor[(12, 13, 6), float32] */;
  %715 = %713.1;
  (%714, %715)
}

def @func_1291() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) {
  %716 = @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %717 = %716.1;
  %718 = cast(%717, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %719 = reshape(%718, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), float32] */;
  %720 = @func_243(%719) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %721 = %720.1;
  (%717, %721)
}

def @func_7302() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32]) {
  %722 = @func_6144() /* ty=Tensor[(12, 13, 6), float32] */;
  %723 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 13, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %724 = shape_of(%722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%722, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %727 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %728 = less(%725, %726) /* ty=Tensor[(12, 13, 6), bool] */;
  %729 = %727.0;
  (%728, %729)
}

def @func_6108() -> (Tensor[(12, 13, 6), float64],) {
  %730 = @func_2421() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %731 = %730.0;
  (%731,)
}

def @func_1456() -> Tensor[(12, 13, 6), float32] {
  %732 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %732.0
}

def @func_5221(%var_5205: Tensor[(12, 13, 6), float64]) -> (Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  %733 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %734 = %733.0;
  %735 = cast(%var_5205, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %739 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %740 = floor_divide(%737, %738) /* ty=Tensor[(12, 13, 6), float64] */;
  %741 = %739.1;
  (%740, %741)
}

def @func_764(%var_736: Tensor[(12, 13, 6), int16]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  %742 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %743 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %744 = %743.0;
  %745 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %746 = %745.0;
  %747 = cast(%746, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %748 = shape_of(%744, dtype="int32") /* ty=Tensor[(3), int32] */;
  %749 = cast(%744, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %751 = multiply(%749, %750) /* ty=Tensor[(12, 13, 6), int16] */;
  %752 = cast(%var_736, dtype="uint16") /* ty=Tensor[(12, 13, 6), uint16] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="uint16") /* ty=Tensor[(12, 13, 6), uint16] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %756 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %757 = cast(%744, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %758 = sin(%757) /* ty=Tensor[(12, 13, 6), float32] */;
  %759 = cast(%744, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %761 = cast(%758, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %763 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %764 = %742.1;
  %765 = maximum(%754, %755) /* ty=Tensor[(12, 13, 6), uint16] */;
  %766 = %756.0;
  %767 = power(%761, %762) /* ty=Tensor[(12, 13, 6), float64] */;
  %768 = %763.0;
  (%764, %765, %766, %767, %768)
}

def @func_6481() -> Tensor[(12, 13, 6), uint64] {
  @func_4274() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_4743() -> (Tensor[(12, 13, 6), uint64],) {
  %769 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
  %770 = %769.1;
  (%770,)
}

def @func_6163() -> (Tensor[(12, 13, 6), float32],) {
  %771 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %772 = %771.0;
  (%772,)
}

def @func_3918(%var_3914: Tensor[(50), float64]) -> (Tensor[(288), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32], Tensor[(2, 5, 5), float64], Tensor[(50), float64]) {
  %773 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %774 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %775 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %776 = cast(%var_3914, dtype="float64") /* ty=Tensor[(50), float64] */;
  %777 = reshape(%776, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %778 = @func_67(%777) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */;
  %779 = %773.7;
  %780 = %774.0;
  %781 = %775.0;
  %782 = %778.0;
  (%779, %780, %781, %782, %var_3914)
}

def @func_4693(%var_4663: Tensor[(15, 12, 14), int16], %var_4664: Tensor[(15, 12, 14), int16], %var_4687: uint8) -> (Tensor[(15, 12, 14), int16], Tensor[(15, 12, 14), float32], Tensor[(12, 13, 6), float32], uint8, Tensor[(308), uint8]) {
  %783 = cast(%var_4664, dtype="int16") /* ty=Tensor[(15, 12, 14), int16] */;
  %784 = shape_of(%var_4663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%var_4663, dtype="int16") /* ty=Tensor[(15, 12, 14), int16] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %787 = cast(%var_4663, dtype="float32") /* ty=Tensor[(15, 12, 14), float32] */;
  %788 = cast(%var_4687, dtype="uint8") /* ty=uint8 */;
  %789 = cast(meta[relay.Constant][26] /* ty=Tensor[(308), uint8] */, dtype="uint8") /* ty=Tensor[(308), uint8] */;
  %790 = reshape(%788, newshape=[]) /* ty=uint8 */;
  %791 = reshape(%789, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint8] */;
  %792 = @func_3883(%790, %791) /* ty=(Tensor[(2, 11, 14), uint8], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(288), bool], Tensor[(12, 2, 12), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float32]) */;
  %793 = minimum(%785, %786) /* ty=Tensor[(15, 12, 14), int16] */;
  %794 = rsqrt(%787) /* ty=Tensor[(15, 12, 14), float32] */;
  %795 = %792.2;
  (%793, %794, %795, %var_4687, meta[relay.Constant][26] /* ty=Tensor[(308), uint8] */)
}

def @func_933() -> (Tensor[(12, 13, 6), float32],) {
  %796 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %797 = %796.0;
  (%797,)
}

def @func_6144() -> Tensor[(12, 13, 6), float32] {
  @func_2448() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_4565(%var_4547: uint64, %var_4548: Tensor[(15, 13, 13), uint64], %var_4560: Tensor[(15, 13, 13), float64]) -> (Tensor[(15, 13, 13), uint64], Tensor[(15, 13, 13), uint32], Tensor[(15, 13, 13), uint16]) {
  %798 = cast(%var_4547, dtype="uint64") /* ty=uint64 */;
  %799 = cast(%var_4548, dtype="uint64") /* ty=Tensor[(15, 13, 13), uint64] */;
  %800 = cast(%var_4548, dtype="float64") /* ty=Tensor[(15, 13, 13), float64] */;
  %801 = tan(%800) /* ty=Tensor[(15, 13, 13), float64] */;
  %802 = cast(%801, dtype="uint32") /* ty=Tensor[(15, 13, 13), uint32] */;
  %803 = cast(%var_4547, dtype="uint32") /* ty=uint32 */;
  %804 = cast(%var_4560, dtype="uint16") /* ty=Tensor[(15, 13, 13), uint16] */;
  %805 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%801, dtype="uint16") /* ty=Tensor[(15, 13, 13), uint16] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %808 = maximum(%798, %799) /* ty=Tensor[(15, 13, 13), uint64] */;
  %809 = right_shift(%802, %803) /* ty=Tensor[(15, 13, 13), uint32] */;
  %810 = minimum(%806, %807) /* ty=Tensor[(15, 13, 13), uint16] */;
  (%808, %809, %810)
}

def @func_5254() -> (Tensor[(12, 13, 6), float32],) {
  %811 = @func_2448() /* ty=Tensor[(12, 13, 6), float32] */;
  (%811,)
}

def @func_7720() -> (Tensor[(12, 13, 6), float32],) {
  %812 = @func_5254() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %813 = %812.0;
  (%813,)
}

def @func_2966() -> (Tensor[(12, 13, 6), float64],) {
  %814 = @func_2421() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %815 = %814.0;
  (%815,)
}

def @func_3041(%var_3033: Tensor[(6, 15, 2), float64], %var_3034: Tensor[(6, 15, 2), float64]) -> Tensor[(6, 15, 2), float64] {
  %816 = cast(%var_3034, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %817 = shape_of(%var_3033, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%var_3033, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%818, %819) /* ty=Tensor[(6, 15, 2), float64] */
}

def @func_3616(%var_3613: Tensor[(288, 1), bool]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) {
  %820 = cast(%var_3613, dtype="bool") /* ty=Tensor[(288, 1), bool] */;
  %821 = cast(%var_3613, dtype="bool") /* ty=Tensor[(288, 1), bool] */;
  %822 = reshape(%820, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
  %823 = reshape(%821, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
  %824 = @func_2141(%822, %823) /* ty=(Tensor[(12, 2, 12), bool],) */;
  %825 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
  %826 = %824.0;
  (%825, %826, %var_3613)
}

def @func_1844() -> (Tensor[(12, 13, 6), uint64],) {
  %827 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %828 = %827.1;
  (%828,)
}

def @func_4098(%var_4067: Tensor[(2, 728), uint16]) -> (Tensor[(12, 13, 6), float32], Tensor[(2, 728), uint16], Tensor[(12, 13, 6), float32], Tensor[(13, 16, 7), float64]) {
  %829 = @func_3758() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %830 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %831 = cast(%var_4067, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
  %832 = cast(%var_4067, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
  %833 = reshape(%831, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), uint16] */;
  %834 = reshape(%832, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), uint16] */;
  %835 = @func_3008(%833, %834) /* ty=(Tensor[(13, 16, 7), uint16], Tensor[(12, 13, 6), float64], Tensor[(13, 16, 7), float32], Tensor[(12, 13, 6), float32]) */;
  %836 = %835.0;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %838 = cos(%837) /* ty=Tensor[(13, 16, 7), float64] */;
  %839 = cast(%838, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %840 = %829.0;
  %841 = %830.0;
  %842 = asin(%839) /* ty=Tensor[(13, 16, 7), float64] */;
  (%840, %var_4067, %841, %842)
}

def @func_3536() -> Tensor[(12, 13, 6), float32] {
  %843 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %843.0
}

def @func_907() -> (Tensor[(12, 13, 6), float32],) {
  %844 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %845 = %844.0;
  (%845,)
}

def @func_5598(%var_5590: Tensor[(12, 15, 14), float32]) -> (Tensor[(12, 15, 14), float32],) {
  %846 = cast(%var_5590, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
  %847 = sin(%846) /* ty=Tensor[(12, 15, 14), float32] */;
  (%847,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6307() -> Tensor[(12, 13, 6), float32] {
  %1 = fn () -> Tensor[(12, 13, 6), float32] {
    %0 = @func_2403() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
    %0.0
  };
  %1() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_2810() -> Tensor[(12, 13, 6), float32] {
  @func_2808() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_2819() -> (Tensor[(12, 13, 6), float32],) {
  %2 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %3 = %2.0;
  (%3,)
}

def @func_3328(%var_3318: Tensor[(2, 5, 1), float32]) -> (Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) {
  %4 = cast(%var_3318, dtype="float32") /* ty=Tensor[(2, 5, 1), float32] */;
  %5 = @func_2393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %6 = sinh(%4) /* ty=Tensor[(2, 5, 1), float32] */;
  %7 = %5.1;
  (%6, %7)
}

def @func_2144(%var_2142: Tensor[(12, 2, 12), bool], %var_2143: Tensor[(12, 2, 12), bool]) -> (Tensor[(12, 2, 12), bool],) {
  %13 = fn (%var_2135: Tensor[(12, 2, 12), bool], %var_2136: Tensor[(12, 2, 12), bool]) -> (Tensor[(12, 2, 12), bool],) {
    %8 = cast(%var_2136, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %9 = shape_of(%var_2135, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(%var_2135, dtype="bool") /* ty=Tensor[(12, 2, 12), bool] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %12 = logical_and(%10, %11) /* ty=Tensor[(12, 2, 12), bool] */;
    (%12,)
  };
  %13(%var_2142, %var_2143) /* ty=(Tensor[(12, 2, 12), bool],) */
}

def @func_3886(%var_3884: uint8, %var_3885: Tensor[(2, 11, 14), uint8]) -> (Tensor[(2, 11, 14), uint8], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(288), bool], Tensor[(12, 2, 12), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float32]) {
  %29 = fn (%var_3829: uint8, %var_3830: Tensor[(2, 11, 14), uint8]) -> (Tensor[(2, 11, 14), uint8], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(288), bool], Tensor[(12, 2, 12), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float32]) {
    %14 = cast(%var_3829, dtype="uint8") /* ty=uint8 */;
    %15 = cast(%var_3830, dtype="uint8") /* ty=Tensor[(2, 11, 14), uint8] */;
    %16 = @func_2358() /* ty=(Tensor[(12, 13, 6), uint64],) */;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %18 = reshape(%17, newshape=[288, 1]) /* ty=Tensor[(288, 1), bool] */;
    %19 = @func_3616(%18) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) */;
    %20 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %22 = reshape(%21, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
    %23 = @func_791(%22) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */;
    %24 = left_shift(%14, %15) /* ty=Tensor[(2, 11, 14), uint8] */;
    %25 = %16.0;
    %26 = %19.0;
    %27 = %20.6;
    %28 = %23.1;
    (%24, %25, %26, meta[relay.Constant][0] /* ty=Tensor[(288), bool] */, %27, %28, meta[relay.Constant][1] /* ty=Tensor[(390), float32] */)
  };
  %29(%var_3884, %var_3885) /* ty=(Tensor[(2, 11, 14), uint8], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(288), bool], Tensor[(12, 2, 12), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float32]) */
}

def @func_4391() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) {
  %30 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %31 = @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %32 = @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %33 = %30.1;
  %34 = %31.0;
  %35 = %32.0;
  (%33, %34, %35)
}

def @func_5254() -> (Tensor[(12, 13, 6), float32],) {
  %36 = @func_2448() /* ty=Tensor[(12, 13, 6), float32] */;
  (%36,)
}

def @func_4339() -> Tensor[(12, 13, 6), float64] {
  %37 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %37.0
}

def @func_933() -> (Tensor[(12, 13, 6), float32],) {
  %38 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %39 = %38.0;
  (%39,)
}

def @func_5869(%var_5868: Tensor[(1960), uint64]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool], Tensor[(1960), uint32], Tensor[(12, 13, 6), float32], Tensor[(1960), float64]) {
  %59 = fn (%var_5822: Tensor[(1960), uint64]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool], Tensor[(1960), uint32], Tensor[(12, 13, 6), float32], Tensor[(1960), float64]) {
    %40 = cast(%var_5822, dtype="float32") /* ty=Tensor[(1960), float32] */;
    %41 = atan(%40) /* ty=Tensor[(1960), float32] */;
    %42 = cast(%var_5822, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
    %43 = cast(%var_5822, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
    %44 = reshape(%42, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
    %45 = reshape(%43, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
    %46 = @func_1557(%44, %45) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */;
    %47 = %46.0;
    %48 = cast(%47, dtype="uint32") /* ty=Tensor[(10, 14, 14), uint32] */;
    %49 = shape_of(%41, dtype="int32") /* ty=Tensor[(1), int32] */;
    %50 = cast(%41, dtype="uint32") /* ty=Tensor[(1960), uint32] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %52 = @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
    %53 = cast(%41, dtype="float64") /* ty=Tensor[(1960), float64] */;
    %54 = @func_2808() /* ty=Tensor[(12, 13, 6), float32] */;
    %55 = @func_5762() /* ty=Tensor[(12, 13, 6), bool] */;
    %56 = bitwise_xor(%50, %51) /* ty=Tensor[(1960), uint32] */;
    %57 = %52.0;
    %58 = log2(%53) /* ty=Tensor[(1960), float64] */;
    (%54, %55, %56, %57, %58)
  };
  %59(%var_5868) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool], Tensor[(1960), uint32], Tensor[(12, 13, 6), float32], Tensor[(1960), float64]) */
}

def @func_5605() -> Tensor[(12, 13, 6), float32] {
  %61 = fn () -> Tensor[(12, 13, 6), float32] {
    %60 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %60.0
  };
  %61() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_5238() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %62 = @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %63 = @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */;
  %64 = %62.0;
  %65 = %63.1;
  (%64, %65)
}

def @func_4275() -> Tensor[(12, 13, 6), uint64] {
  %66 = fn () -> Tensor[(12, 13, 6), uint64] {
    @func_664() /* ty=Tensor[(12, 13, 6), uint64] */
  };
  %66() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_5163() -> Tensor[(12, 13, 6), float64] {
  @func_5161() /* ty=Tensor[(12, 13, 6), float64] */
}

def @func_2422() -> (Tensor[(12, 13, 6), float64],) {
  %69 = fn () -> (Tensor[(12, 13, 6), float64],) {
    %67 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
    %68 = %67.0;
    (%68,)
  };
  %69() /* ty=(Tensor[(12, 13, 6), float64],) */
}

def @func_3965() -> Tensor[(50), float64] {
  %70 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %70.1
}

def @func_5663() -> Tensor[(12, 13, 6), float64] {
  @func_5661() /* ty=Tensor[(12, 13, 6), float64] */
}

def @func_6712(%var_6698: Tensor[(10), float32]) -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], Tensor[(10), float32], Tensor[(12, 13, 6), uint64]) {
  %71 = cast(%var_6698, dtype="float32") /* ty=Tensor[(10), float32] */;
  %72 = reshape(%71, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %73 = @func_3328(%72) /* ty=(Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) */;
  %74 = @func_5762() /* ty=Tensor[(12, 13, 6), bool] */;
  %75 = %73.1;
  %76 = @func_4511() /* ty=Tensor[(12, 13, 6), uint64] */;
  (%74, %75, %var_6698, %76)
}

def @func_7368() -> Tensor[(12, 13, 6), uint8] {
  @func_7366() /* ty=Tensor[(12, 13, 6), uint8] */
}

def @func_7502(%var_7500: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64],) {
  @func_7499(%var_7500) /* ty=(Tensor[(2, 2, 13), float64],) */
}

def @func_7851() -> Tensor[(12, 13, 6), float32] {
  %78 = fn () -> Tensor[(12, 13, 6), float32] {
    %77 = @func_5516() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %77.0
  };
  %78() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_6043() -> (Tensor[(4, 3, 7), float64],) {
  %79 = @func_3336() /* ty=Tensor[(4, 3, 7), float64] */;
  (%79,)
}

def @func_6715(%var_6713: Tensor[(10), float32]) -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], Tensor[(10), float32], Tensor[(12, 13, 6), uint64]) {
  @func_6712(%var_6713) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], Tensor[(10), float32], Tensor[(12, 13, 6), uint64]) */
}

def @func_953() -> Tensor[(12, 13, 6), float32] {
  %81 = fn () -> Tensor[(12, 13, 6), float32] {
    %80 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %80.0
  };
  %81() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_5661() -> Tensor[(12, 13, 6), float64] {
  %82 = @func_2730() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) */;
  %82.1
}

def @func_1870() -> Tensor[(12, 13, 6), float32] {
  %84 = fn () -> Tensor[(12, 13, 6), float32] {
    %83 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %83.0
  };
  %84() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_7080(%var_7077: Tensor[(16, 9, 16), int8], %var_7078: Tensor[(16, 9, 16), int8], %var_7079: Tensor[(16, 9, 16), int8]) -> (Tensor[(16, 9, 16), uint32], Tensor[(16, 9, 16), float32]) {
  @func_7075(%var_7077, %var_7078, %var_7079) /* ty=(Tensor[(16, 9, 16), uint32], Tensor[(16, 9, 16), float32]) */
}

def @func_4939() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  %85 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %86 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
  %87 = %85.8;
  %88 = %86.1;
  %89 = @func_3410() /* ty=Tensor[(12, 13, 6), float32] */;
  (%87, %88, %89)
}

def @func_1054() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %96 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %90 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %91 = %90.0;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %93 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %94 = exp(%92) /* ty=Tensor[(12, 13, 6), float32] */;
    %95 = %93.0;
    (%94, %95)
  };
  %96() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_1161() -> (Tensor[(12, 13, 6), float64],) {
  %100 = fn () -> (Tensor[(12, 13, 6), float64],) {
    %97 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
    %98 = cast(%97, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
    %99 = log2(%98) /* ty=Tensor[(12, 13, 6), float64] */;
    (%99,)
  };
  %100() /* ty=(Tensor[(12, 13, 6), float64],) */
}

def @func_5221(%var_5205: Tensor[(12, 13, 6), float64]) -> (Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  %101 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
  %102 = %101.0;
  %103 = cast(%var_5205, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %107 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %108 = floor_divide(%105, %106) /* ty=Tensor[(12, 13, 6), float64] */;
  %109 = %107.1;
  (%108, %109)
}

def @func_298() -> (Tensor[(12, 13, 6), float32],) {
  @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_346() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %114 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %110 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %111 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %112 = %110.0;
    %113 = %111.0;
    (%112, %113)
  };
  %114() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_1925() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) {
  @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */
}

def @func_6508(%var_6484: Tensor[(8, 8, 6), float64]) -> (Tensor[(8, 8, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %115 = cast(%var_6484, dtype="float64") /* ty=Tensor[(8, 8, 6), float64] */;
  %116 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %117 = exp(%115) /* ty=Tensor[(8, 8, 6), float64] */;
  %118 = @func_5981() /* ty=Tensor[(12, 13, 6), uint64] */;
  %119 = %116.0;
  (%117, %118, %119)
}

def @func_5474(%var_5452: Tensor[(9, 16, 3), uint32], %var_5453: Tensor[(9, 16, 3), uint32], %var_5462: Tensor[(40), bool]) -> (Tensor[(9, 16, 3), bool], Tensor[(12, 13, 6), uint64], Tensor[(40), bool], Tensor[(9, 16, 3), bool]) {
  %120 = cast(%var_5453, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %121 = shape_of(%var_5452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %122 = cast(%var_5452, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %123 = dyn.reshape(%120, %121, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %124 = cast(%var_5462, dtype="bool") /* ty=Tensor[(40), bool] */;
  %125 = reshape(%124, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), bool] */;
  %126 = @func_1257(%125) /* ty=(Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) */;
  %127 = cast(%var_5453, dtype="int32") /* ty=Tensor[(9, 16, 3), int32] */;
  %128 = shape_of(%var_5452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%var_5452, dtype="int32") /* ty=Tensor[(9, 16, 3), int32] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %131 = subtract(%129, %130) /* ty=Tensor[(9, 16, 3), int32] */;
  %132 = cast(%131, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %133 = shape_of(%var_5453, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%var_5453, dtype="bool") /* ty=Tensor[(9, 16, 3), bool] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %136 = less_equal(%122, %123) /* ty=Tensor[(9, 16, 3), bool] */;
  %137 = %126.5;
  %138 = logical_or(%134, %135) /* ty=Tensor[(9, 16, 3), bool] */;
  (%136, %137, %var_5462, %138)
}

def @func_2821() -> (Tensor[(12, 13, 6), float32],) {
  @func_2819() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_2808() -> Tensor[(12, 13, 6), float32] {
  @func_1456() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_1430(%var_1428: float64, %var_1429: Tensor[(40), bool]) -> (Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %167 = fn (%var_1328: float64, %var_1377: Tensor[(40), bool]) -> (Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %139 = cast(%var_1328, dtype="float64") /* ty=float64 */;
    %140 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(13, 6, 11), float64] */;
    %141 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %142 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %143 = cast(%var_1377, dtype="bool") /* ty=Tensor[(40), bool] */;
    %144 = reshape(%143, newshape=[5, 2, 4]) /* ty=Tensor[(5, 2, 4), bool] */;
    %145 = @func_1257(%144) /* ty=(Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) */;
    %146 = %142.0;
    %147 = cast(%146, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
    %148 = reshape(%147, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
    %149 = @func_764(%148) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
    %150 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 6, 11), float64] */, dtype="float32") /* ty=Tensor[(13, 6, 11), float32] */;
    %151 = rsqrt(%150) /* ty=Tensor[(13, 6, 11), float32] */;
    %152 = cast(%151, dtype="float32") /* ty=Tensor[(13, 6, 11), float32] */;
    %153 = log2(%152) /* ty=Tensor[(13, 6, 11), float32] */;
    %154 = cast(%153, dtype="float64") /* ty=Tensor[(13, 6, 11), float64] */;
    %155 = cast(%146, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
    %156 = reshape(%155, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
    %157 = @func_764(%156) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
    %158 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %159 = mod(%139, %140) /* ty=Tensor[(13, 6, 11), float64] */;
    %160 = %141.0;
    %161 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
    %162 = %145.0;
    %163 = %149.2;
    %164 = asin(%154) /* ty=Tensor[(13, 6, 11), float64] */;
    %165 = %157.4;
    %166 = %158.0;
    (%159, %160, %161, %146, %162, %var_1377, %163, %164, %165, %166)
  };
  %167(%var_1428, %var_1429) /* ty=(Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_1696() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) {
  %168 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %169 = %168.0;
  %170 = @func_952() /* ty=Tensor[(12, 13, 6), float32] */;
  %171 = cast(%170, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %172 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%169, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %175 = cast(-4.20381f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %176 = cast(meta[relay.Constant][3] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %177 = reshape(%175, newshape=[]) /* ty=float64 */;
  %178 = reshape(%176, newshape=[40]) /* ty=Tensor[(40), bool] */;
  %179 = @func_1427(%177, %178) /* ty=(Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %180 = not_equal(%173, %174) /* ty=Tensor[(12, 13, 6), bool] */;
  %181 = %179.3;
  %182 = @func_952() /* ty=Tensor[(12, 13, 6), float32] */;
  (%180, %181, -4.20381f64 /* ty=float64 */, meta[relay.Constant][3] /* ty=Tensor[(40), bool] */, %182)
}

def @func_3331(%var_3329: Tensor[(2, 5, 1), float32]) -> (Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) {
  @func_3328(%var_3329) /* ty=(Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_6555() -> (Tensor[(9, ?), bool], Tensor[(12, 13, 6), float32]) {
  %183 = @func_2303() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %184 = @func_6197() /* ty=Tensor[(9, ?), bool] */;
  %185 = %183.0;
  (%184, %185)
}

def @func_7454() -> Tensor[(12, 13, 6), uint64] {
  %186 = @func_7249() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %186.0
}

def @func_2304() -> (Tensor[(12, 13, 6), float32],) {
  %188 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %187 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
    (%187,)
  };
  %188() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_7204() -> Tensor[(12, 13, 6), float32] {
  %189 = @func_5254() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %189.0
}

def @func_2775(%var_2769: Tensor[(14, 11, 3), float32]) -> Tensor[(14, 11, 3), float32] {
  %190 = cast(%var_2769, dtype="float32") /* ty=Tensor[(14, 11, 3), float32] */;
  acosh(%190) /* ty=Tensor[(14, 11, 3), float32] */
}

def @func_1560(%var_1558: Tensor[(10, 14, 14), uint64], %var_1559: Tensor[(10, 14, 14), uint64]) -> (Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) {
  %198 = fn (%var_1541: Tensor[(10, 14, 14), uint64], %var_1542: Tensor[(10, 14, 14), uint64]) -> (Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) {
    %191 = cast(%var_1542, dtype="uint64") /* ty=Tensor[(10, 14, 14), uint64] */;
    %192 = shape_of(%var_1541, dtype="int32") /* ty=Tensor[(3), int32] */;
    %193 = cast(%var_1541, dtype="uint64") /* ty=Tensor[(10, 14, 14), uint64] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %195 = cast(%var_1542, dtype="float32") /* ty=Tensor[(10, 14, 14), float32] */;
    %196 = maximum(%193, %194) /* ty=Tensor[(10, 14, 14), uint64] */;
    %197 = cos(%195) /* ty=Tensor[(10, 14, 14), float32] */;
    (%196, %197)
  };
  %198(%var_1558, %var_1559) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */
}

def @func_5129() -> Tensor[(12, 13, 6), uint64] {
  %199 = @func_1983() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %199.1
}

def @func_2192() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %205 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %200 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %201 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %202 = %200.0;
    %203 = %201.0;
    %204 = @func_952() /* ty=Tensor[(12, 13, 6), float32] */;
    (%202, %203, %204)
  };
  %205() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_2580() -> (Tensor[(12, 13, 6), float32],) {
  %208 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %206 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %207 = %206.0;
    (%207,)
  };
  %208() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_6683() -> (Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(2, 5, 5), float32], Tensor[(12, 13, 6), float32]) {
  %209 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %210 = cast(meta[relay.Constant][4] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
  %211 = reshape(%210, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
  %212 = @func_67(%211) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */;
  %213 = %212.0;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(2, 5, 5), float32] */;
  %215 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %216 = %209.0;
  %217 = log(%214) /* ty=Tensor[(2, 5, 5), float32] */;
  %218 = %215.0;
  (%216, meta[relay.Constant][4] /* ty=Tensor[(50), float64] */, %217, %218)
}

def @func_3759() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %223 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %219 = @func_2191() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %220 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %221 = %219.1;
    %222 = %220.0;
    (%221, %222)
  };
  %223() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_860() -> Tensor[(12, 13, 6), float32] {
  %225 = fn () -> Tensor[(12, 13, 6), float32] {
    %224 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %224.1
  };
  %225() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_1698() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) {
  @func_1696() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */
}

def @func_4168() -> Tensor[(12, 13, 6), float32] {
  @func_859() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_5442(%var_5439: Tensor[(2520), int16], %var_5440: uint8, %var_5441: Tensor[(900), bool]) -> (Tensor[(12, 13, 6), float32], uint8, Tensor[(2520), int16], uint8, Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(50), float32], Tensor[(900), bool], Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), float32]) {
  %249 = fn (%var_5364: Tensor[(2520), int16], %var_5365: uint8, %var_5411: Tensor[(900), bool]) -> (Tensor[(12, 13, 6), float32], uint8, Tensor[(2520), int16], uint8, Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(50), float32], Tensor[(900), bool], Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), float32]) {
    %226 = cast(%var_5364, dtype="int16") /* ty=Tensor[(2520), int16] */;
    %227 = cast(%var_5364, dtype="int16") /* ty=Tensor[(2520), int16] */;
    %228 = cast(%var_5365, dtype="uint8") /* ty=uint8 */;
    %229 = reshape(%226, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), int16] */;
    %230 = reshape(%227, newshape=[15, 12, 14]) /* ty=Tensor[(15, 12, 14), int16] */;
    %231 = reshape(%228, newshape=[]) /* ty=uint8 */;
    %232 = @func_4693(%229, %230, %231) /* ty=(Tensor[(15, 12, 14), int16], Tensor[(15, 12, 14), float32], Tensor[(12, 13, 6), float32], uint8, Tensor[(308), uint8]) */;
    %233 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
    %234 = @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */;
    %235 = cast(%var_5411, dtype="bool") /* ty=Tensor[(900), bool] */;
    %236 = reshape(%235, newshape=[900]) /* ty=Tensor[(900), bool] */;
    %237 = @func_4533(%236) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(900), bool], Tensor[(50), float32]) */;
    %238 = @func_2421() /* ty=(Tensor[(12, 13, 6), float64],) */;
    %239 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
    %240 = @func_2303() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %241 = @func_859() /* ty=Tensor[(12, 13, 6), float32] */;
    %242 = %232.3;
    %243 = %233.0;
    %244 = %234.0;
    %245 = %237.2;
    %246 = %238.0;
    %247 = %239.2;
    %248 = %240.0;
    (%241, %242, %var_5364, %var_5365, %243, %244, %245, %var_5411, %246, %247, %248)
  };
  %249(%var_5439, %var_5440, %var_5441) /* ty=(Tensor[(12, 13, 6), float32], uint8, Tensor[(2520), int16], uint8, Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(50), float32], Tensor[(900), bool], Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), float32]) */
}

def @func_2543() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) {
  %278 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) {
    %250 = @func_2448() /* ty=Tensor[(12, 13, 6), float32] */;
    %251 = cast(%250, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
    %252 = reshape(%251, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
    %253 = @func_764(%252) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
    %254 = @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */;
    %255 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %256 = cast(meta[relay.Constant][5] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
    %257 = reshape(%256, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
    %258 = @func_2070(%257) /* ty=(Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) */;
    %259 = cast(%250, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
    %260 = asinh(%259) /* ty=Tensor[(12, 13, 6), float64] */;
    %261 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 13, 6), float64] */, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
    %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(3), int32] */;
    %263 = cast(%260, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
    %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %265 = cast(meta[relay.Constant][7] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %266 = cast(meta[relay.Constant][7] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %267 = reshape(%265, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
    %268 = reshape(%266, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
    %269 = @func_2141(%267, %268) /* ty=(Tensor[(12, 2, 12), bool],) */;
    %270 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
    %271 = %253.4;
    %272 = %254.0;
    %273 = %255.0;
    %274 = %258.0;
    %275 = right_shift(%263, %264) /* ty=Tensor[(12, 13, 6), uint8] */;
    %276 = %269.0;
    %277 = %270.0;
    (%271, %272, %273, %274, meta[relay.Constant][5] /* ty=Tensor[(84), float32] */, %275, %276, meta[relay.Constant][7] /* ty=Tensor[(288), bool] */, %277)
  };
  %278() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */
}

def @func_1041() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %279 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %280 = %279.1;
  %281 = cast(%280, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %282 = reshape(%281, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %283 = @func_764(%282) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %284 = @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %285 = %283.3;
  %286 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
  %287 = %284.1;
  (%280, %285, %286, %287)
}

def @func_2405() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  @func_2403() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */
}

def @func_245(%var_244: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) {
  %300 = fn (%var_222: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) {
    %288 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %289 = %288.0;
    %290 = cast(%var_222, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
    %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%289, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %294 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 13, 6), float32] */, dtype="uint64") /* ty=Tensor[(12, 13, 6), uint64] */;
    %295 = shape_of(%var_222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %296 = cast(%var_222, dtype="uint64") /* ty=Tensor[(12, 13, 6), uint64] */;
    %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %298 = logical_or(%292, %293) /* ty=Tensor[(12, 13, 6), bool] */;
    %299 = minimum(%296, %297) /* ty=Tensor[(12, 13, 6), uint64] */;
    (%298, %299)
  };
  %300(%var_244) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */
}

def @func_5131() -> Tensor[(12, 13, 6), uint64] {
  @func_5129() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_1434() -> Tensor[(12, 13, 6), uint64] {
  %301 = @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
  %301.2
}

def @func_7302() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32]) {
  %302 = @func_6144() /* ty=Tensor[(12, 13, 6), float32] */;
  %303 = cast(meta[relay.Constant][9] /* ty=Tensor[(12, 13, 6), float32] */, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %308 = less(%305, %306) /* ty=Tensor[(12, 13, 6), bool] */;
  %309 = %307.0;
  (%308, %309)
}

def @func_5479(%var_5476: Tensor[(9, 16, 3), uint32], %var_5477: Tensor[(9, 16, 3), uint32], %var_5478: Tensor[(40), bool]) -> (Tensor[(9, 16, 3), bool], Tensor[(12, 13, 6), uint64], Tensor[(40), bool], Tensor[(9, 16, 3), bool]) {
  @func_5474(%var_5476, %var_5477, %var_5478) /* ty=(Tensor[(9, 16, 3), bool], Tensor[(12, 13, 6), uint64], Tensor[(40), bool], Tensor[(9, 16, 3), bool]) */
}

def @func_5966(%var_5918: Tensor[(4, 3, 9), float32]) -> (Tensor[(4, 3, 9), float32], Tensor[(2, 5, 1), float32], Tensor[(10), float32], Tensor[(4, 3, 9), bool], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %310 = cast(%var_5918, dtype="float32") /* ty=Tensor[(4, 3, 9), float32] */;
  %311 = cast(meta[relay.Constant][10] /* ty=Tensor[(10), float32] */, dtype="float32") /* ty=Tensor[(10), float32] */;
  %312 = reshape(%311, newshape=[2, 5, 1]) /* ty=Tensor[(2, 5, 1), float32] */;
  %313 = @func_3328(%312) /* ty=(Tensor[(2, 5, 1), float32], Tensor[(12, 13, 6), float32]) */;
  %314 = cast(%var_5918, dtype="float32") /* ty=Tensor[(4, 3, 9), float32] */;
  %315 = log(%314) /* ty=Tensor[(4, 3, 9), float32] */;
  %316 = cast(%var_5918, dtype="int8") /* ty=Tensor[(4, 3, 9), int8] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="int8") /* ty=Tensor[(4, 3, 9), int8] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %320 = bitwise_xor(%318, %319) /* ty=Tensor[(4, 3, 9), int8] */;
  %321 = cast(%320, dtype="bool") /* ty=Tensor[(4, 3, 9), bool] */;
  %322 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%315, dtype="bool") /* ty=Tensor[(4, 3, 9), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = @func_5639() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %326 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %327 = cosh(%310) /* ty=Tensor[(4, 3, 9), float32] */;
  %328 = %313.0;
  %329 = equal(%323, %324) /* ty=Tensor[(4, 3, 9), bool] */;
  %330 = %325.0;
  %331 = %326.0;
  (%327, %328, meta[relay.Constant][10] /* ty=Tensor[(10), float32] */, %329, %330, %331)
}

def @func_6595() -> (Tensor[(50), float64],) {
  %332 = @func_3965() /* ty=Tensor[(50), float64] */;
  (%332,)
}

def @func_7139() -> (Tensor[(12, 13, 6), float32],) {
  @func_7137() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_6018() -> (Tensor[(12, 13, 6), float32],) {
  %335 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %333 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %334 = %333.0;
    (%334,)
  };
  %335() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_793(%var_792: Tensor[(13, 5, 6), float32]) -> (Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) {
  %340 = fn (%var_779: Tensor[(13, 5, 6), float32]) -> (Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) {
    %336 = cast(%var_779, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
    %337 = cast(%var_779, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
    %338 = sinh(%336) /* ty=Tensor[(13, 5, 6), float32] */;
    %339 = acosh(%337) /* ty=Tensor[(13, 5, 6), float64] */;
    (%338, %339)
  };
  %340(%var_792) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */
}

def @func_7456() -> Tensor[(12, 13, 6), uint64] {
  @func_7454() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_3412() -> Tensor[(12, 13, 6), float32] {
  @func_3410() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_7127() -> Tensor[(12, 13, 6), uint64] {
  @func_7125() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_7617() -> Tensor[(12, 13, 6), float32] {
  %342 = fn () -> Tensor[(12, 13, 6), float32] {
    %341 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
    %341.0
  };
  %342() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_6511(%var_6509: Tensor[(8, 8, 6), float64]) -> (Tensor[(8, 8, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  @func_6508(%var_6509) /* ty=(Tensor[(8, 8, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */
}

def @func_7721() -> (Tensor[(12, 13, 6), float32],) {
  %345 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %343 = @func_5254() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %344 = %343.0;
    (%344,)
  };
  %345() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_2968() -> (Tensor[(12, 13, 6), float64],) {
  @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */
}

def @func_5104(%var_5101: Tensor[(84, 1), float32]) -> (Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84, 1), float32]) {
  %346 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %347 = cast(%var_5101, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %348 = reshape(%347, newshape=[4, 7, 3]) /* ty=Tensor[(4, 7, 3), float32] */;
  %349 = @func_2070(%348) /* ty=(Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) */;
  %350 = %346.2;
  %351 = %349.0;
  (%350, %351, %var_5101)
}

def @func_4341() -> Tensor[(12, 13, 6), float64] {
  @func_4339() /* ty=Tensor[(12, 13, 6), float64] */
}

def @func_4035() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) {
  %358 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) {
    %352 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %353 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
    %354 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %355 = %352.0;
    %356 = %353.0;
    %357 = %354.0;
    (%355, %356, %357)
  };
  %358() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) */
}

def @func_6414(%var_6413: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) {
  %368 = fn (%var_6389: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) {
    %359 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
    %360 = @func_4391() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) */;
    %361 = %360.0;
    %362 = cast(%var_6389, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%361, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %366 = %359.2;
    %367 = add(%364, %365) /* ty=Tensor[(12, 13, 6), float32] */;
    (%366, %367)
  };
  %368(%var_6413) /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) */
}

def @func_539() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) {
  @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */
}

def @func_908() -> (Tensor[(12, 13, 6), float32],) {
  %371 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %369 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %370 = %369.0;
    (%370,)
  };
  %371() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_5744() -> (Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32], Tensor[(13, 5, 6), uint16], Tensor[(13, 5, 6), float64]) {
  @func_5742() /* ty=(Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32], Tensor[(13, 5, 6), uint16], Tensor[(13, 5, 6), float64]) */
}

def @func_6198() -> Tensor[(9, ?), bool] {
  %378 = fn () -> Tensor[(9, ?), bool] {
    %372 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1), float32] */;
    %373 = sigmoid(%372) /* ty=Tensor[(9, 1), float32] */;
    %374 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 1), float32] */, dtype="bool") /* ty=Tensor[(9, 1), bool] */;
    %375 = shape_of(%373, dtype="int32") /* ty=Tensor[(2), int32] */;
    %376 = cast(%373, dtype="bool") /* ty=Tensor[(9, 1), bool] */;
    %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    less_equal(%376, %377) /* ty=Tensor[(9, ?), bool] */
  };
  %378() /* ty=Tensor[(9, ?), bool] */
}

def @func_4536(%var_4534: Tensor[(900), bool]) -> (Tensor[(12, 13, 6), float32], Tensor[(900), bool], Tensor[(50), float32]) {
  @func_4533(%var_4534) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(900), bool], Tensor[(50), float32]) */
}

def @func_6898(%var_6897: Tensor[(2520), float32]) -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 15, 14), float32], Tensor[(2520), float32], Tensor[(10, 14, 14), uint64], Tensor[(1960), uint64]) {
  %394 = fn (%var_6869: Tensor[(2520), float32]) -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 15, 14), float32], Tensor[(2520), float32], Tensor[(10, 14, 14), uint64], Tensor[(1960), uint64]) {
    %379 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %380 = %379.0;
    %381 = cast(%380, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %382 = cast(%var_6869, dtype="float32") /* ty=Tensor[(2520), float32] */;
    %383 = reshape(%382, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), float32] */;
    %384 = @func_5598(%383) /* ty=(Tensor[(12, 15, 14), float32],) */;
    %385 = cast(meta[relay.Constant][12] /* ty=Tensor[(1960), uint64] */, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
    %386 = cast(meta[relay.Constant][12] /* ty=Tensor[(1960), uint64] */, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
    %387 = reshape(%385, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
    %388 = reshape(%386, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
    %389 = @func_1557(%387, %388) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */;
    %390 = @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */;
    %391 = asin(%381) /* ty=Tensor[(12, 13, 6), float32] */;
    %392 = %384.0;
    %393 = %389.0;
    (%390, %391, %392, %var_6869, %393, meta[relay.Constant][12] /* ty=Tensor[(1960), uint64] */)
  };
  %394(%var_6897) /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 15, 14), float32], Tensor[(2520), float32], Tensor[(10, 14, 14), uint64], Tensor[(1960), uint64]) */
}

def @func_3337() -> Tensor[(4, 3, 7), float64] {
  %396 = fn () -> Tensor[(4, 3, 7), float64] {
    %395 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 3, 7), float64] */, dtype="float64") /* ty=Tensor[(4, 3, 7), float64] */;
    atan(%395) /* ty=Tensor[(4, 3, 7), float64] */
  };
  %396() /* ty=Tensor[(4, 3, 7), float64] */
}

def @func_6230() -> (Tensor[(12, 13, 6), float32],) {
  %397 = @func_4391() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) */;
  %398 = %397.1;
  (%398,)
}

def @func_5038() -> (Tensor[(12, 13, 6), float32], Tensor[(50), float64]) {
  %403 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(50), float64]) {
    %399 = @func_3965() /* ty=Tensor[(50), float64] */;
    %400 = cast(%399, dtype="float64") /* ty=Tensor[(50), float64] */;
    %401 = @func_3410() /* ty=Tensor[(12, 13, 6), float32] */;
    %402 = asinh(%400) /* ty=Tensor[(50), float64] */;
    (%401, %402)
  };
  %403() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(50), float64]) */
}

def @func_4569(%var_4566: uint64, %var_4567: Tensor[(15, 13, 13), uint64], %var_4568: Tensor[(15, 13, 13), float64]) -> (Tensor[(15, 13, 13), uint64], Tensor[(15, 13, 13), uint32], Tensor[(15, 13, 13), uint16]) {
  %417 = fn (%var_4547: uint64, %var_4548: Tensor[(15, 13, 13), uint64], %var_4560: Tensor[(15, 13, 13), float64]) -> (Tensor[(15, 13, 13), uint64], Tensor[(15, 13, 13), uint32], Tensor[(15, 13, 13), uint16]) {
    %404 = cast(%var_4547, dtype="uint64") /* ty=uint64 */;
    %405 = cast(%var_4548, dtype="uint64") /* ty=Tensor[(15, 13, 13), uint64] */;
    %406 = cast(%var_4548, dtype="float64") /* ty=Tensor[(15, 13, 13), float64] */;
    %407 = tan(%406) /* ty=Tensor[(15, 13, 13), float64] */;
    %408 = cast(%407, dtype="uint32") /* ty=Tensor[(15, 13, 13), uint32] */;
    %409 = cast(%var_4547, dtype="uint32") /* ty=uint32 */;
    %410 = cast(%var_4560, dtype="uint16") /* ty=Tensor[(15, 13, 13), uint16] */;
    %411 = shape_of(%407, dtype="int32") /* ty=Tensor[(3), int32] */;
    %412 = cast(%407, dtype="uint16") /* ty=Tensor[(15, 13, 13), uint16] */;
    %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %414 = maximum(%404, %405) /* ty=Tensor[(15, 13, 13), uint64] */;
    %415 = right_shift(%408, %409) /* ty=Tensor[(15, 13, 13), uint32] */;
    %416 = minimum(%412, %413) /* ty=Tensor[(15, 13, 13), uint16] */;
    (%414, %415, %416)
  };
  %417(%var_4566, %var_4567, %var_4568) /* ty=(Tensor[(15, 13, 13), uint64], Tensor[(15, 13, 13), uint32], Tensor[(15, 13, 13), uint16]) */
}

def @func_3213(%var_3210: Tensor[(12, 5, 1), int16], %var_3211: Tensor[(12, 5, 8), int16], %var_3212: Tensor[(12, 5, 11), int16]) -> (Tensor[(12, 5, 1), int16], Tensor[(12, 5, 8), bool], Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 5, 11), uint16]) {
  @func_3208(%var_3210, %var_3211, %var_3212) /* ty=(Tensor[(12, 5, 1), int16], Tensor[(12, 5, 8), bool], Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 5, 11), uint16]) */
}

def @func_3701() -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) {
  %422 = fn () -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) {
    %418 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
    %419 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
    %420 = %418.5;
    %421 = %419.0;
    (%420, %421)
  };
  %422() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */
}

def @func_395() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_2259(%var_2198: Tensor[(5, 15, 12), bool], %var_2199: Tensor[(5, 15, 12), bool], %var_2224: Tensor[(12, 13, 6), uint64]) -> (Tensor[(50), float64], Tensor[(12, 13, 6), bool], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), int16]) {
  %423 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
  %424 = @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */;
  %425 = cast(%var_2224, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %426 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%424, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = cast(%var_2199, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %430 = shape_of(%var_2198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_2198, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = logical_or(%431, %432) /* ty=Tensor[(5, 15, 12), bool] */;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %435 = sqrt(%434) /* ty=Tensor[(5, 15, 12), float64] */;
  %436 = cast(%var_2198, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%435, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %440 = cast(%435, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %441 = acosh(%440) /* ty=Tensor[(5, 15, 12), float64] */;
  %442 = cast(%var_2199, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %443 = sin(%442) /* ty=Tensor[(5, 15, 12), float32] */;
  %444 = cast(%443, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %445 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%441, dtype="float32") /* ty=Tensor[(5, 15, 12), float32] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %448 = floor_divide(%446, %447) /* ty=Tensor[(5, 15, 12), float32] */;
  %449 = cast(%435, dtype="int16") /* ty=Tensor[(5, 15, 12), int16] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="int16") /* ty=Tensor[(5, 15, 12), int16] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %453 = %423.2;
  %454 = greater_equal(%427, %428) /* ty=Tensor[(12, 13, 6), bool] */;
  %455 = divide(%438, %439) /* ty=Tensor[(5, 15, 12), float32] */;
  %456 = multiply(%451, %452) /* ty=Tensor[(5, 15, 12), int16] */;
  (%453, %454, %455, %456)
}

def @func_6464(%var_6463: Tensor[(40), bool]) -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool]) {
  %465 = fn (%var_6451: Tensor[(40), bool]) -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool]) {
    %457 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
    %458 = cast(4.07723f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %459 = cast(%var_6451, dtype="bool") /* ty=Tensor[(40), bool] */;
    %460 = reshape(%458, newshape=[]) /* ty=float64 */;
    %461 = reshape(%459, newshape=[40]) /* ty=Tensor[(40), bool] */;
    %462 = @func_1427(%460, %461) /* ty=(Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), int32], Tensor[(40), bool], Tensor[(12, 13, 6), float32], Tensor[(13, 6, 11), float64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %463 = %457.0;
    %464 = %462.1;
    (%463, %464, 4.07723f64 /* ty=float64 */, %var_6451)
  };
  %465(%var_6463) /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool]) */
}

def @func_4842() -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), uint64]) {
  @func_4840() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), uint64]) */
}

def @func_5240() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  @func_5238() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */
}

def @func_7125() -> Tensor[(12, 13, 6), uint64] {
  @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_7331() -> (Tensor[(12, 13, 6), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), float64]) {
  %473 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), float64]) {
    %466 = cast(meta[relay.Constant][14] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
    %467 = cast(meta[relay.Constant][14] /* ty=Tensor[(1260), float64] */, dtype="float64") /* ty=Tensor[(1260), float64] */;
    %468 = reshape(%466, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), float64] */;
    %469 = reshape(%467, newshape=[9, 10, 14]) /* ty=Tensor[(9, 10, 14), float64] */;
    %470 = @func_4468(%468, %469) /* ty=(Tensor[(9, 10, 14), float64], Tensor[(9, 10, 14), float64], Tensor[(12, 13, 6), float32]) */;
    %471 = @func_7204() /* ty=Tensor[(12, 13, 6), float32] */;
    %472 = %470.0;
    (%471, %472, meta[relay.Constant][14] /* ty=Tensor[(1260), float64] */)
  };
  %473() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(9, 10, 14), float64], Tensor[(1260), float64]) */
}

def @func_7554() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], float64) {
  %480 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], float64) {
    %474 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %475 = @func_2303() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %476 = @func_1696() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */;
    %477 = %474.0;
    %478 = %475.0;
    %479 = %476.2;
    (%477, %478, %479)
  };
  %480() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], float64) */
}

def @func_5983() -> Tensor[(12, 13, 6), uint64] {
  @func_5981() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_2035() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %489 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %481 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %482 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %483 = %482.0;
    %484 = cast(%483, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %485 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %486 = %481.0;
    %487 = acos(%484) /* ty=Tensor[(12, 13, 6), float32] */;
    %488 = %485.0;
    (%486, %487, %488)
  };
  %489() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_69(%var_68: Tensor[(2, 5, 5), float64]) -> (Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) {
  %496 = fn (%var_41: Tensor[(2, 5, 5), float64]) -> (Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) {
    %490 = cast(%var_41, dtype="float64") /* ty=Tensor[(2, 5, 5), float64] */;
    %491 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %492 = %491.0;
    %493 = cast(%492, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
    %494 = sqrt(%490) /* ty=Tensor[(2, 5, 5), float64] */;
    %495 = erf(%493) /* ty=Tensor[(12, 13, 6), float64] */;
    (%494, %495)
  };
  %496(%var_68) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */
}

def @func_4471(%var_4469: Tensor[(9, 10, 14), float64], %var_4470: Tensor[(9, 10, 14), float64]) -> (Tensor[(9, 10, 14), float64], Tensor[(9, 10, 14), float64], Tensor[(12, 13, 6), float32]) {
  %506 = fn (%var_4452: Tensor[(9, 10, 14), float64], %var_4453: Tensor[(9, 10, 14), float64]) -> (Tensor[(9, 10, 14), float64], Tensor[(9, 10, 14), float64], Tensor[(12, 13, 6), float32]) {
    %497 = cast(%var_4453, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
    %498 = shape_of(%var_4452, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(%var_4452, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %501 = cast(%var_4452, dtype="float64") /* ty=Tensor[(9, 10, 14), float64] */;
    %502 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %503 = divide(%499, %500) /* ty=Tensor[(9, 10, 14), float64] */;
    %504 = log10(%501) /* ty=Tensor[(9, 10, 14), float64] */;
    %505 = %502.1;
    (%503, %504, %505)
  };
  %506(%var_4469, %var_4470) /* ty=(Tensor[(9, 10, 14), float64], Tensor[(9, 10, 14), float64], Tensor[(12, 13, 6), float32]) */
}

def @func_5161() -> Tensor[(12, 13, 6), float64] {
  %507 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %507.0
}

def @func_4143() -> (Tensor[(12, 13, 6), int16],) {
  %508 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %509 = %508.0;
  %510 = @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %511 = %510.0;
  %512 = cast(%511, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %513 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%509, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %516 = bitwise_or(%514, %515) /* ty=Tensor[(12, 13, 6), int16] */;
  (%516,)
}

def @func_5969(%var_5967: Tensor[(4, 3, 9), float32]) -> (Tensor[(4, 3, 9), float32], Tensor[(2, 5, 1), float32], Tensor[(10), float32], Tensor[(4, 3, 9), bool], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  @func_5966(%var_5967) /* ty=(Tensor[(4, 3, 9), float32], Tensor[(2, 5, 1), float32], Tensor[(10), float32], Tensor[(4, 3, 9), bool], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_5640() -> (Tensor[(12, 13, 6), float32],) {
  %519 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %517 = @func_2393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %518 = %517.2;
    (%518,)
  };
  %519() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_1074(%var_1072: Tensor[(11, 2, 6), bool], %var_1073: Tensor[(11, 2, 6), bool]) -> Tensor[(11, 2, 6), bool] {
  %524 = fn (%var_1055: Tensor[(11, 2, 6), bool], %var_1056: Tensor[(11, 2, 6), bool]) -> Tensor[(11, 2, 6), bool] {
    %520 = cast(%var_1056, dtype="bool") /* ty=Tensor[(11, 2, 6), bool] */;
    %521 = shape_of(%var_1055, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(%var_1055, dtype="bool") /* ty=Tensor[(11, 2, 6), bool] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%522, %523) /* ty=Tensor[(11, 2, 6), bool] */
  };
  %524(%var_1072, %var_1073) /* ty=Tensor[(11, 2, 6), bool] */
}

def @func_4870() -> (Tensor[(12, 13, 6), uint64],) {
  %525 = @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %526 = %525.0;
  (%526,)
}

def @func_393() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %527 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %528 = %527.1;
  %529 = cast(%528, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %530 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %531 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %532 = atan(%529) /* ty=Tensor[(12, 13, 6), float32] */;
  %533 = %530.0;
  %534 = %531.0;
  (%532, %533, %534)
}

def @func_767(%var_765: Tensor[(12, 13, 6), int16]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  @func_764(%var_765) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */
}

def @func_3967() -> Tensor[(50), float64] {
  @func_3965() /* ty=Tensor[(50), float64] */
}

def @func_603() -> (Tensor[(12, 13, 6), float32],) {
  @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_2448() -> Tensor[(12, 13, 6), float32] {
  %535 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %535.0
}

def @func_4100(%var_4099: Tensor[(2, 728), uint16]) -> (Tensor[(12, 13, 6), float32], Tensor[(2, 728), uint16], Tensor[(12, 13, 6), float32], Tensor[(13, 16, 7), float64]) {
  %550 = fn (%var_4067: Tensor[(2, 728), uint16]) -> (Tensor[(12, 13, 6), float32], Tensor[(2, 728), uint16], Tensor[(12, 13, 6), float32], Tensor[(13, 16, 7), float64]) {
    %536 = @func_3758() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %537 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %538 = cast(%var_4067, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
    %539 = cast(%var_4067, dtype="uint16") /* ty=Tensor[(2, 728), uint16] */;
    %540 = reshape(%538, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), uint16] */;
    %541 = reshape(%539, newshape=[13, 16, 7]) /* ty=Tensor[(13, 16, 7), uint16] */;
    %542 = @func_3008(%540, %541) /* ty=(Tensor[(13, 16, 7), uint16], Tensor[(12, 13, 6), float64], Tensor[(13, 16, 7), float32], Tensor[(12, 13, 6), float32]) */;
    %543 = %542.0;
    %544 = cast(%543, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
    %545 = cos(%544) /* ty=Tensor[(13, 16, 7), float64] */;
    %546 = cast(%545, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
    %547 = %536.0;
    %548 = %537.0;
    %549 = asin(%546) /* ty=Tensor[(13, 16, 7), float64] */;
    (%547, %var_4067, %548, %549)
  };
  %550(%var_4099) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(2, 728), uint16], Tensor[(12, 13, 6), float32], Tensor[(13, 16, 7), float64]) */
}

def @func_4145() -> (Tensor[(12, 13, 6), int16],) {
  @func_4143() /* ty=(Tensor[(12, 13, 6), int16],) */
}

def @func_840() -> (Tensor[(12, 13, 6), float32],) {
  %553 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %551 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %552 = %551.0;
    (%552,)
  };
  %553() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_1043() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */
}

def @func_1259(%var_1258: Tensor[(5, 2, 4), bool]) -> (Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) {
  %586 = fn (%var_1209: Tensor[(5, 2, 4), bool]) -> (Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) {
    %554 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 2, 4), uint16] */, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %555 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 2, 4), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 2, 4), uint16] */, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %558 = less_equal(%556, %557) /* ty=Tensor[(5, 2, 4), bool] */;
    %559 = cast(%var_1209, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
    %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %561 = cast(%558, dtype="int32") /* ty=Tensor[(5, 2, 4), int32] */;
    %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %563 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 390), float32] */, dtype="float32") /* ty=Tensor[(1, 390), float32] */;
    %564 = reshape(%563, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
    %565 = @func_791(%564) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */;
    %566 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %567 = cast(%var_1209, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
    %568 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %569 = cast(%558, dtype="float32") /* ty=Tensor[(5, 2, 4), float32] */;
    %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %571 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
    %572 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %573 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %574 = cast(%var_1209, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %575 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
    %576 = cast(%558, dtype="bool") /* ty=Tensor[(5, 2, 4), bool] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %578 = logical_xor(%561, %562) /* ty=Tensor[(5, 2, 4), int32] */;
    %579 = %565.0;
    %580 = %566.0;
    %581 = power(%569, %570) /* ty=Tensor[(5, 2, 4), float32] */;
    %582 = %571.1;
    %583 = %572.0;
    %584 = %573.0;
    %585 = logical_or(%576, %577) /* ty=Tensor[(5, 2, 4), bool] */;
    (%578, %579, meta[relay.Constant][17] /* ty=Tensor[(1, 390), float32] */, %580, %581, %582, %583, %584, %585)
  };
  %586(%var_1258) /* ty=(Tensor[(5, 2, 4), int32], Tensor[(13, 5, 6), float32], Tensor[(1, 390), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(5, 2, 4), bool]) */
}

def @func_2264(%var_2261: Tensor[(5, 15, 12), bool], %var_2262: Tensor[(5, 15, 12), bool], %var_2263: Tensor[(12, 13, 6), uint64]) -> (Tensor[(50), float64], Tensor[(12, 13, 6), bool], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), int16]) {
  @func_2259(%var_2261, %var_2262, %var_2263) /* ty=(Tensor[(50), float64], Tensor[(12, 13, 6), bool], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), int16]) */
}

def @func_601() -> (Tensor[(12, 13, 6), float32],) {
  %587 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %588 = %587.0;
  (%588,)
}

def @func_4744() -> (Tensor[(12, 13, 6), uint64],) {
  %591 = fn () -> (Tensor[(12, 13, 6), uint64],) {
    %589 = @func_1801() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */;
    %590 = %589.1;
    (%590,)
  };
  %591() /* ty=(Tensor[(12, 13, 6), uint64],) */
}

def @func_7304() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32]) {
  @func_7302() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32]) */
}

def @func_6109() -> (Tensor[(12, 13, 6), float64],) {
  %594 = fn () -> (Tensor[(12, 13, 6), float64],) {
    %592 = @func_2421() /* ty=(Tensor[(12, 13, 6), float64],) */;
    %593 = %592.0;
    (%593,)
  };
  %594() /* ty=(Tensor[(12, 13, 6), float64],) */
}

def @func_7635(%var_7634: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64],) {
  %600 = fn (%var_7629: Tensor[(13, 4, 13), float64]) -> (Tensor[(13, 4, 13), float64],) {
    %595 = cast(%var_7629, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    %596 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(13, 4, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(meta[relay.Constant][18] /* ty=Tensor[(13, 4, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 4, 13), float64] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %599 = divide(%597, %598) /* ty=Tensor[(13, 4, 13), float64] */;
    (%599,)
  };
  %600(%var_7634) /* ty=(Tensor[(13, 4, 13), float64],) */
}

def @func_2395() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  @func_2393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_1802() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) {
  %609 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) {
    %601 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %602 = %601.1;
    %603 = cast(%602, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %604 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
    %605 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
    %606 = log10(%603) /* ty=Tensor[(12, 13, 6), float32] */;
    %607 = %604.1;
    %608 = %605.1;
    (%606, %607, %608)
  };
  %609() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(50), float64]) */
}

def @func_3618(%var_3617: Tensor[(288, 1), bool]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) {
  %617 = fn (%var_3613: Tensor[(288, 1), bool]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) {
    %610 = cast(%var_3613, dtype="bool") /* ty=Tensor[(288, 1), bool] */;
    %611 = cast(%var_3613, dtype="bool") /* ty=Tensor[(288, 1), bool] */;
    %612 = reshape(%610, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
    %613 = reshape(%611, newshape=[12, 2, 12]) /* ty=Tensor[(12, 2, 12), bool] */;
    %614 = @func_2141(%612, %613) /* ty=(Tensor[(12, 2, 12), bool],) */;
    %615 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
    %616 = %614.0;
    (%615, %616, %var_3613)
  };
  %617(%var_3617) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) */
}

def @func_6232() -> (Tensor[(12, 13, 6), float32],) {
  @func_6230() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @main(%var_7879: Tensor[(1960), uint64]) -> (Tensor[(12, 13, 6), float32], Tensor[(10, 14, 14), float32], Tensor[(1960), uint64], Tensor[(12, 13, 6), uint32]) {
  %618 = @func_4191() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %619 = cast(%var_7879, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %620 = cast(%var_7879, dtype="uint64") /* ty=Tensor[(1960), uint64] */;
  %621 = reshape(%619, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %622 = reshape(%620, newshape=[10, 14, 14]) /* ty=Tensor[(10, 14, 14), uint64] */;
  %623 = @func_1560(%621, %622) /* ty=(Tensor[(10, 14, 14), uint64], Tensor[(10, 14, 14), float32]) */;
  %624 = @func_1698() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */;
  %625 = %624.1;
  %626 = @func_5604() /* ty=Tensor[(12, 13, 6), float32] */;
  %627 = cast(%626, dtype="uint32") /* ty=Tensor[(12, 13, 6), uint32] */;
  %628 = shape_of(%625, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%625, dtype="uint32") /* ty=Tensor[(12, 13, 6), uint32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %631 = %618.0;
  %632 = %623.1;
  %633 = bitwise_xor(%629, %630) /* ty=Tensor[(12, 13, 6), uint32] */;
  (%631, %632, %var_7879, %633)
}

def @func_825(%var_824: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %643 = fn (%var_808: Tensor[(12, 13, 6), float32]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
    %634 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %635 = %634.0;
    %636 = cast(%var_808, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%635, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %640 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %641 = mod(%638, %639) /* ty=Tensor[(12, 13, 6), float32] */;
    %642 = %640.1;
    (%641, %642)
  };
  %643(%var_824) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_1571() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %644 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %645 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %646 = %644.0;
  %647 = %645.1;
  (%646, %647)
}

def @func_3161() -> Tensor[(12, 13, 6), uint64] {
  %648 = @func_1983() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %648.1
}

def @func_1291() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) {
  %649 = @func_393() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %650 = %649.1;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %652 = reshape(%651, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), float32] */;
  %653 = @func_243(%652) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %654 = %653.1;
  (%650, %654)
}

def @func_1984() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) {
  %658 = fn () -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) {
    %655 = @func_1041() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */;
    %656 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
    %657 = %655.2;
    (%656, %657)
  };
  %658() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */
}

def @func_3208(%var_3171: Tensor[(12, 5, 1), int16], %var_3175: Tensor[(12, 5, 8), int16], %var_3203: Tensor[(12, 5, 11), int16]) -> (Tensor[(12, 5, 1), int16], Tensor[(12, 5, 8), bool], Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 5, 11), uint16]) {
  %659 = cast(meta[relay.Constant][19] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %660 = cast(%var_3171, dtype="int16") /* ty=Tensor[(12, 5, 1), int16] */;
  %661 = cast(%var_3171, dtype="bool") /* ty=Tensor[(12, 5, 1), bool] */;
  %662 = cast(%var_3175, dtype="bool") /* ty=Tensor[(12, 5, 8), bool] */;
  %663 = @func_1696() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), float32], float64, Tensor[(40), bool], Tensor[(12, 13, 6), float32]) */;
  %664 = @func_2966() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %665 = cast(%var_3171, dtype="uint16") /* ty=Tensor[(12, 5, 1), uint16] */;
  %666 = cast(%var_3203, dtype="uint16") /* ty=Tensor[(12, 5, 11), uint16] */;
  %667 = subtract(%659, %660) /* ty=Tensor[(12, 5, 1), int16] */;
  %668 = less_equal(%661, %662) /* ty=Tensor[(12, 5, 8), bool] */;
  %669 = %663.0;
  %670 = %664.0;
  %671 = subtract(%665, %666) /* ty=Tensor[(12, 5, 11), uint16] */;
  (%667, %668, %669, %670, %671)
}

def @func_3826() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %672 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %673 = @func_1923() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) */;
  %674 = %673.2;
  %675 = cast(%674, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %676 = @func_859() /* ty=Tensor[(12, 13, 6), float32] */;
  %677 = %672.1;
  %678 = sigmoid(%675) /* ty=Tensor[(12, 13, 6), float32] */;
  (%676, %677, %678)
}

def @func_3012(%var_3010: Tensor[(13, 16, 7), uint16], %var_3011: Tensor[(13, 16, 7), uint16]) -> (Tensor[(13, 16, 7), uint16], Tensor[(12, 13, 6), float64], Tensor[(13, 16, 7), float32], Tensor[(12, 13, 6), float32]) {
  @func_3008(%var_3010, %var_3011) /* ty=(Tensor[(13, 16, 7), uint16], Tensor[(12, 13, 6), float64], Tensor[(13, 16, 7), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_6144() -> Tensor[(12, 13, 6), float32] {
  @func_2448() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_7249() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %679 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %680 = @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */;
  %681 = %679.0;
  (%680, %681)
}

def @func_6557() -> (Tensor[(9, ?), bool], Tensor[(12, 13, 6), float32]) {
  @func_6555() /* ty=(Tensor[(9, ?), bool], Tensor[(12, 13, 6), float32]) */
}

def @func_5256() -> (Tensor[(12, 13, 6), float32],) {
  @func_5254() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_1573() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_4533(%var_4528: Tensor[(900), bool]) -> (Tensor[(12, 13, 6), float32], Tensor[(900), bool], Tensor[(50), float32]) {
  %682 = @func_3758() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %683 = cast(%var_4528, dtype="bool") /* ty=Tensor[(900), bool] */;
  %684 = cast(%var_4528, dtype="bool") /* ty=Tensor[(900), bool] */;
  %685 = %682.0;
  %686 = cast(%685, dtype="uint64") /* ty=Tensor[(12, 13, 6), uint64] */;
  %687 = reshape(%683, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), bool] */;
  %688 = reshape(%684, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), bool] */;
  %689 = reshape(%686, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), uint64] */;
  %690 = @func_2259(%687, %688, %689) /* ty=(Tensor[(50), float64], Tensor[(12, 13, 6), bool], Tensor[(5, 15, 12), float32], Tensor[(5, 15, 12), int16]) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(50), float32] */;
  %693 = asin(%692) /* ty=Tensor[(50), float32] */;
  (%685, %var_4528, %693)
}

def @func_296() -> (Tensor[(12, 13, 6), float32],) {
  %694 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %695 = %694.0;
  (%695,)
}

def @func_2966() -> (Tensor[(12, 13, 6), float64],) {
  %696 = @func_2421() /* ty=(Tensor[(12, 13, 6), float64],) */;
  %697 = %696.0;
  (%697,)
}

def @func_6481() -> Tensor[(12, 13, 6), uint64] {
  @func_4274() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_5742() -> (Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32], Tensor[(13, 5, 6), uint16], Tensor[(13, 5, 6), float64]) {
  %698 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
  %699 = cast(meta[relay.Constant][20] /* ty=Tensor[(390), float32] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %700 = reshape(%699, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float32] */;
  %701 = @func_791(%700) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), float64]) */;
  %702 = %701.1;
  %703 = cast(%702, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %704 = erf(%703) /* ty=Tensor[(13, 5, 6), float32] */;
  %705 = cast(meta[relay.Constant][20] /* ty=Tensor[(390), float32] */, dtype="uint16") /* ty=Tensor[(390), uint16] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%704, dtype="uint16") /* ty=Tensor[(13, 5, 6), uint16] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %709 = cast(%704, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  %710 = %698.3;
  %711 = @func_1869() /* ty=Tensor[(12, 13, 6), float32] */;
  %712 = bitwise_or(%707, %708) /* ty=Tensor[(13, 5, 6), uint16] */;
  %713 = exp(%709) /* ty=Tensor[(13, 5, 6), float64] */;
  (%710, %711, %712, %713)
}

def @func_3008(%var_2986: Tensor[(13, 16, 7), uint16], %var_2987: Tensor[(13, 16, 7), uint16]) -> (Tensor[(13, 16, 7), uint16], Tensor[(12, 13, 6), float64], Tensor[(13, 16, 7), float32], Tensor[(12, 13, 6), float32]) {
  %714 = cast(%var_2987, dtype="uint16") /* ty=Tensor[(13, 16, 7), uint16] */;
  %715 = shape_of(%var_2986, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_2986, dtype="uint16") /* ty=Tensor[(13, 16, 7), uint16] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %718 = @func_2730() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) */;
  %719 = cast(%var_2986, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %720 = sigmoid(%719) /* ty=Tensor[(13, 16, 7), float64] */;
  %721 = cast(%720, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %722 = shape_of(%var_2987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_2987, dtype="float32") /* ty=Tensor[(13, 16, 7), float32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %725 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %726 = multiply(%716, %717) /* ty=Tensor[(13, 16, 7), uint16] */;
  %727 = %718.1;
  %728 = mod(%723, %724) /* ty=Tensor[(13, 16, 7), float32] */;
  %729 = %725.1;
  (%726, %727, %728, %729)
}

def @func_5107(%var_5105: Tensor[(84, 1), float32]) -> (Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84, 1), float32]) {
  @func_5104(%var_5105) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84, 1), float32]) */
}

def @func_6776() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64]) {
  %734 = fn () -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64]) {
    %730 = @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */;
    %731 = @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
    %732 = %730.0;
    %733 = %731.1;
    (%732, %733)
  };
  %734() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float64]) */
}

def @func_7137() -> (Tensor[(12, 13, 6), float32],) {
  %735 = @func_2819() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %736 = %735.0;
  (%736,)
}

def @func_935() -> (Tensor[(12, 13, 6), float32],) {
  @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_4189() -> (Tensor[(12, 13, 6), float32],) {
  %737 = @func_2191() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %738 = %737.2;
  (%738,)
}

def @func_3828() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  @func_3826() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_1273() -> (Tensor[(12, 13, 6), float32],) {
  %741 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %739 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %740 = %739.0;
    (%740,)
  };
  %741() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_4941() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */
}

def @func_2450() -> Tensor[(12, 13, 6), float32] {
  @func_2448() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_1436() -> Tensor[(12, 13, 6), uint64] {
  @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_4697(%var_4694: Tensor[(15, 12, 14), int16], %var_4695: Tensor[(15, 12, 14), int16], %var_4696: uint8) -> (Tensor[(15, 12, 14), int16], Tensor[(15, 12, 14), float32], Tensor[(12, 13, 6), float32], uint8, Tensor[(308), uint8]) {
  %755 = fn (%var_4663: Tensor[(15, 12, 14), int16], %var_4664: Tensor[(15, 12, 14), int16], %var_4687: uint8) -> (Tensor[(15, 12, 14), int16], Tensor[(15, 12, 14), float32], Tensor[(12, 13, 6), float32], uint8, Tensor[(308), uint8]) {
    %742 = cast(%var_4664, dtype="int16") /* ty=Tensor[(15, 12, 14), int16] */;
    %743 = shape_of(%var_4663, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%var_4663, dtype="int16") /* ty=Tensor[(15, 12, 14), int16] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %746 = cast(%var_4663, dtype="float32") /* ty=Tensor[(15, 12, 14), float32] */;
    %747 = cast(%var_4687, dtype="uint8") /* ty=uint8 */;
    %748 = cast(meta[relay.Constant][21] /* ty=Tensor[(308), uint8] */, dtype="uint8") /* ty=Tensor[(308), uint8] */;
    %749 = reshape(%747, newshape=[]) /* ty=uint8 */;
    %750 = reshape(%748, newshape=[2, 11, 14]) /* ty=Tensor[(2, 11, 14), uint8] */;
    %751 = @func_3883(%749, %750) /* ty=(Tensor[(2, 11, 14), uint8], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32], Tensor[(288), bool], Tensor[(12, 2, 12), bool], Tensor[(13, 5, 6), float64], Tensor[(390), float32]) */;
    %752 = minimum(%744, %745) /* ty=Tensor[(15, 12, 14), int16] */;
    %753 = rsqrt(%746) /* ty=Tensor[(15, 12, 14), float32] */;
    %754 = %751.2;
    (%752, %753, %754, %var_4687, meta[relay.Constant][21] /* ty=Tensor[(308), uint8] */)
  };
  %755(%var_4694, %var_4695, %var_4696) /* ty=(Tensor[(15, 12, 14), int16], Tensor[(15, 12, 14), float32], Tensor[(12, 13, 6), float32], uint8, Tensor[(308), uint8]) */
}

def @func_2072(%var_2071: Tensor[(4, 7, 3), float32]) -> (Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) {
  %760 = fn (%var_2050: Tensor[(4, 7, 3), float32]) -> (Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) {
    %756 = cast(%var_2050, dtype="float32") /* ty=Tensor[(4, 7, 3), float32] */;
    %757 = @func_2034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %758 = acos(%756) /* ty=Tensor[(4, 7, 3), float32] */;
    %759 = %757.2;
    (%758, %759)
  };
  %760(%var_2071) /* ty=(Tensor[(4, 7, 3), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_3639() -> (Tensor[(12, 13, 6), uint64],) {
  @func_3637() /* ty=(Tensor[(12, 13, 6), uint64],) */
}

def @func_3536() -> Tensor[(12, 13, 6), float32] {
  %761 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %761.0
}

def @func_7251() -> (Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  @func_7249() /* ty=(Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) */
}

def @func_1617() -> (Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) {
  %773 = fn () -> (Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) {
    %762 = cast(meta[relay.Constant][22] /* ty=Tensor[(50), float64] */, dtype="float64") /* ty=Tensor[(50), float64] */;
    %763 = reshape(%762, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
    %764 = @func_67(%763) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */;
    %765 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %766 = %765.0;
    %767 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 13, 6), float32] */, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
    %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %769 = cast(%766, dtype="uint8") /* ty=Tensor[(12, 13, 6), uint8] */;
    %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %771 = %764.1;
    %772 = left_shift(%769, %770) /* ty=Tensor[(12, 13, 6), uint8] */;
    (%771, meta[relay.Constant][22] /* ty=Tensor[(50), float64] */, %772)
  };
  %773() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */
}

def @func_7366() -> Tensor[(12, 13, 6), uint8] {
  %774 = @func_4034() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float32]) */;
  %774.1
}

def @func_4191() -> (Tensor[(12, 13, 6), float32],) {
  @func_4189() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_1293() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) {
  @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */
}

def @func_3163() -> Tensor[(12, 13, 6), uint64] {
  @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_2731() -> (Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) {
  %781 = fn () -> (Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) {
    %775 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
    %776 = %775.0;
    %777 = cast(%776, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
    %778 = @func_1616() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(12, 13, 6), uint8]) */;
    %779 = log(%777) /* ty=Tensor[(12, 13, 6), float64] */;
    %780 = %778.0;
    (%779, %780)
  };
  %781() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float64]) */
}

def @func_6146() -> Tensor[(12, 13, 6), float32] {
  @func_6144() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_40() -> (Tensor[(12, 13, 6), float32],) {
  %789 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %782 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 13, 6), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
    %783 = atanh(%782) /* ty=Tensor[(12, 13, 6), float64] */;
    %784 = cast(%783, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %785 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(12, 13, 6), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %786 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 13, 6), float64] */, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
    %787 = dyn.reshape(%784, %785, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %788 = divide(%786, %787) /* ty=Tensor[(12, 13, 6), float32] */;
    (%788,)
  };
  %789() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_4393() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) {
  @func_4391() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64]) */
}

def @func_3637() -> (Tensor[(12, 13, 6), uint64],) {
  %790 = @func_664() /* ty=Tensor[(12, 13, 6), uint64] */;
  (%790,)
}

def @func_4170() -> Tensor[(12, 13, 6), float32] {
  @func_4168() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_1923() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), bool]) {
  %791 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %792 = %791.0;
  %793 = cast(%792, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %794 = reshape(%793, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), int16] */;
  %795 = @func_764(%794) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
  %796 = cast(%792, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %797 = reshape(%796, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), float32] */;
  %798 = @func_243(%797) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %799 = %795.0;
  %800 = %798.0;
  (%792, %799, %800)
}

def @func_2403() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64], Tensor[(12, 13, 6), float32]) {
  %801 = @func_1571() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %802 = @func_1983() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
  %803 = @func_839() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %804 = %801.0;
  %805 = %802.1;
  %806 = %803.0;
  (%804, %805, %806)
}

def @func_4840() -> (Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), uint64]) {
  %807 = @func_3700() /* ty=(Tensor[(12, 13, 6), uint8], Tensor[(12, 13, 6), float64]) */;
  %808 = @func_4743() /* ty=(Tensor[(12, 13, 6), uint64],) */;
  %809 = %807.0;
  %810 = %808.0;
  (%809, %810)
}

def @func_5600(%var_5599: Tensor[(12, 15, 14), float32]) -> (Tensor[(12, 15, 14), float32],) {
  %813 = fn (%var_5590: Tensor[(12, 15, 14), float32]) -> (Tensor[(12, 15, 14), float32],) {
    %811 = cast(%var_5590, dtype="float32") /* ty=Tensor[(12, 15, 14), float32] */;
    %812 = sin(%811) /* ty=Tensor[(12, 15, 14), float32] */;
    (%812,)
  };
  %813(%var_5599) /* ty=(Tensor[(12, 15, 14), float32],) */
}

def @func_5763() -> Tensor[(12, 13, 6), bool] {
  %815 = fn () -> Tensor[(12, 13, 6), bool] {
    %814 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
    %814.0
  };
  %815() /* ty=Tensor[(12, 13, 6), bool] */
}

def @func_6597() -> (Tensor[(50), float64],) {
  @func_6595() /* ty=(Tensor[(50), float64],) */
}

def @func_6685() -> (Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(2, 5, 5), float32], Tensor[(12, 13, 6), float32]) {
  @func_6683() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(50), float64], Tensor[(2, 5, 5), float32], Tensor[(12, 13, 6), float32]) */
}

def @func_7499(%var_7490: Tensor[(2, 2, 13), float64]) -> (Tensor[(2, 2, 13), float64],) {
  %816 = cast(%var_7490, dtype="float64") /* ty=Tensor[(2, 2, 13), float64] */;
  %817 = acosh(%816) /* ty=Tensor[(2, 2, 13), float64] */;
  (%817,)
}

def @func_537() -> (Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) {
  %818 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %819 = %818.0;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %821 = sqrt(%820) /* ty=Tensor[(12, 13, 6), float64] */;
  %822 = cast(%819, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %823 = shape_of(%821, dtype="int32") /* ty=Tensor[(3), int32] */;
  %824 = cast(%821, dtype="bool") /* ty=Tensor[(12, 13, 6), bool] */;
  %825 = dyn.reshape(%822, %823, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %826 = cast(%819, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %827 = reshape(%826, newshape=[12, 13, 6]) /* ty=Tensor[(12, 13, 6), float32] */;
  %828 = @func_243(%827) /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
  %829 = less_equal(%824, %825) /* ty=Tensor[(12, 13, 6), bool] */;
  %830 = %828.1;
  (%829, %830)
}

def @func_2778(%var_2776: Tensor[(14, 11, 3), float32]) -> Tensor[(14, 11, 3), float32] {
  @func_2775(%var_2776) /* ty=Tensor[(14, 11, 3), float32] */
}

def @func_7666() -> Tensor[(12, 13, 6), float32] {
  %832 = fn () -> Tensor[(12, 13, 6), float32] {
    %831 = @func_2579() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %831.0
  };
  %832() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_5517() -> (Tensor[(12, 13, 6), float32],) {
  %835 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %833 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
    %834 = %833.0;
    (%834,)
  };
  %835() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_4872() -> (Tensor[(12, 13, 6), uint64],) {
  @func_4870() /* ty=(Tensor[(12, 13, 6), uint64],) */
}

def @func_3920(%var_3919: Tensor[(50), float64]) -> (Tensor[(288), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32], Tensor[(2, 5, 5), float64], Tensor[(50), float64]) {
  %846 = fn (%var_3914: Tensor[(50), float64]) -> (Tensor[(288), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32], Tensor[(2, 5, 5), float64], Tensor[(50), float64]) {
    %836 = @func_2542() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(4, 7, 3), float32], Tensor[(84), float32], Tensor[(12, 13, 6), uint8], Tensor[(12, 2, 12), bool], Tensor[(288), bool], Tensor[(12, 13, 6), float32]) */;
    %837 = @func_1160() /* ty=(Tensor[(12, 13, 6), float64],) */;
    %838 = @func_933() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %839 = cast(%var_3914, dtype="float64") /* ty=Tensor[(50), float64] */;
    %840 = reshape(%839, newshape=[2, 5, 5]) /* ty=Tensor[(2, 5, 5), float64] */;
    %841 = @func_67(%840) /* ty=(Tensor[(2, 5, 5), float64], Tensor[(12, 13, 6), float64]) */;
    %842 = %836.7;
    %843 = %837.0;
    %844 = %838.0;
    %845 = %841.0;
    (%842, %843, %844, %845, %var_3914)
  };
  %846(%var_3919) /* ty=(Tensor[(288), bool], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32], Tensor[(2, 5, 5), float64], Tensor[(50), float64]) */
}

def @func_7075(%var_7053: Tensor[(16, 9, 16), int8], %var_7054: Tensor[(16, 9, 16), int8], %var_7060: Tensor[(16, 9, 16), int8]) -> (Tensor[(16, 9, 16), uint32], Tensor[(16, 9, 16), float32]) {
  %847 = cast(%var_7060, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
  %848 = shape_of(%var_7053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %849 = cast(%var_7053, dtype="uint32") /* ty=Tensor[(16, 9, 16), uint32] */;
  %850 = dyn.reshape(%847, %848, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %851 = cast(%var_7054, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %852 = shape_of(%var_7053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %853 = cast(%var_7053, dtype="bool") /* ty=Tensor[(16, 9, 16), bool] */;
  %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %855 = less_equal(%853, %854) /* ty=Tensor[(16, 9, 16), bool] */;
  %856 = cast(%855, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %857 = multiply(%849, %850) /* ty=Tensor[(16, 9, 16), uint32] */;
  %858 = sigmoid(%856) /* ty=Tensor[(16, 9, 16), float32] */;
  (%857, %858)
}

def @func_6045() -> (Tensor[(4, 3, 7), float64],) {
  @func_6043() /* ty=(Tensor[(4, 3, 7), float64],) */
}

def @func_665() -> Tensor[(12, 13, 6), uint64] {
  %860 = fn () -> Tensor[(12, 13, 6), uint64] {
    %859 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
    %859.1
  };
  %860() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_764(%var_736: Tensor[(12, 13, 6), int16]) -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint16], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  %861 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %862 = @func_39() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %863 = %862.0;
  %864 = @func_296() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %867 = shape_of(%863, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%863, dtype="int16") /* ty=Tensor[(12, 13, 6), int16] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %870 = multiply(%868, %869) /* ty=Tensor[(12, 13, 6), int16] */;
  %871 = cast(%var_736, dtype="uint16") /* ty=Tensor[(12, 13, 6), uint16] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="uint16") /* ty=Tensor[(12, 13, 6), uint16] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %875 = @func_601() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %876 = cast(%863, dtype="float32") /* ty=Tensor[(12, 13, 6), float32] */;
  %877 = sin(%876) /* ty=Tensor[(12, 13, 6), float32] */;
  %878 = cast(%863, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %879 = shape_of(%877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(%877, dtype="float64") /* ty=Tensor[(12, 13, 6), float64] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %882 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %883 = %861.1;
  %884 = maximum(%873, %874) /* ty=Tensor[(12, 13, 6), uint16] */;
  %885 = %875.0;
  %886 = power(%880, %881) /* ty=Tensor[(12, 13, 6), float64] */;
  %887 = %882.0;
  (%883, %884, %885, %886, %887)
}

def @func_7206() -> Tensor[(12, 13, 6), float32] {
  @func_7204() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_3410() -> Tensor[(12, 13, 6), float32] {
  %888 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %888.0
}

def @func_5224(%var_5222: Tensor[(12, 13, 6), float64]) -> (Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) {
  @func_5221(%var_5222) /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */
}

def @func_2359() -> (Tensor[(12, 13, 6), uint64],) {
  %891 = fn () -> (Tensor[(12, 13, 6), uint64],) {
    %889 = @func_537() /* ty=(Tensor[(12, 13, 6), bool], Tensor[(12, 13, 6), uint64]) */;
    %890 = %889.1;
    (%890,)
  };
  %891() /* ty=(Tensor[(12, 13, 6), uint64],) */
}

def @func_2393() -> (Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) {
  %892 = @func_907() /* ty=(Tensor[(12, 13, 6), float32],) */;
  %893 = @func_345() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
  %894 = @func_859() /* ty=Tensor[(12, 13, 6), float32] */;
  %895 = %892.0;
  %896 = %893.1;
  (%894, %895, %896)
}

def @func_7480(%var_7479: Tensor[(11, 3, 5), float32]) -> Tensor[(11, 3, 5), float32] {
  %901 = fn (%var_7466: Tensor[(11, 3, 5), float32]) -> Tensor[(11, 3, 5), float32] {
    %897 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 3, 5), float32] */, dtype="float32") /* ty=Tensor[(11, 3, 5), float32] */;
    %898 = shape_of(%var_7466, dtype="int32") /* ty=Tensor[(3), int32] */;
    %899 = cast(%var_7466, dtype="float32") /* ty=Tensor[(11, 3, 5), float32] */;
    %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    divide(%899, %900) /* ty=Tensor[(11, 3, 5), float32] */
  };
  %901(%var_7479) /* ty=Tensor[(11, 3, 5), float32] */
}

def @func_6164() -> (Tensor[(12, 13, 6), float32],) {
  %904 = fn () -> (Tensor[(12, 13, 6), float32],) {
    %902 = @func_1272() /* ty=(Tensor[(12, 13, 6), float32],) */;
    %903 = %902.0;
    (%903,)
  };
  %904() /* ty=(Tensor[(12, 13, 6), float32],) */
}

def @func_1457() -> Tensor[(12, 13, 6), float32] {
  %906 = fn () -> Tensor[(12, 13, 6), float32] {
    %905 = @func_1053() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float32]) */;
    %905.0
  };
  %906() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_1845() -> (Tensor[(12, 13, 6), uint64],) {
  %909 = fn () -> (Tensor[(12, 13, 6), uint64],) {
    %907 = @func_1291() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), uint64]) */;
    %908 = %907.1;
    (%908,)
  };
  %909() /* ty=(Tensor[(12, 13, 6), uint64],) */
}

def @func_5981() -> Tensor[(12, 13, 6), uint64] {
  @func_3161() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_7598() -> (Tensor[(12, 13, 6), float64], Tensor[(12, 2, 12), bool], Tensor[(288), bool]) {
  %916 = fn () -> (Tensor[(12, 13, 6), float64], Tensor[(12, 2, 12), bool], Tensor[(288), bool]) {
    %910 = @func_4939() /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 13, 6), float64], Tensor[(12, 13, 6), float32]) */;
    %911 = cast(meta[relay.Constant][26] /* ty=Tensor[(288), bool] */, dtype="bool") /* ty=Tensor[(288), bool] */;
    %912 = reshape(%911, newshape=[288, 1]) /* ty=Tensor[(288, 1), bool] */;
    %913 = @func_3616(%912) /* ty=(Tensor[(12, 13, 6), float32], Tensor[(12, 2, 12), bool], Tensor[(288, 1), bool]) */;
    %914 = %910.1;
    %915 = %913.1;
    (%914, %915, meta[relay.Constant][26] /* ty=Tensor[(288), bool] */)
  };
  %916() /* ty=(Tensor[(12, 13, 6), float64], Tensor[(12, 2, 12), bool], Tensor[(288), bool]) */
}

def @func_3538() -> Tensor[(12, 13, 6), float32] {
  @func_3536() /* ty=Tensor[(12, 13, 6), float32] */
}

def @func_6483() -> Tensor[(12, 13, 6), uint64] {
  @func_6481() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_4512() -> Tensor[(12, 13, 6), uint64] {
  %917 = fn () -> Tensor[(12, 13, 6), uint64] {
    @func_1434() /* ty=Tensor[(12, 13, 6), uint64] */
  };
  %917() /* ty=Tensor[(12, 13, 6), uint64] */
}

def @func_3044(%var_3042: Tensor[(6, 15, 2), float64], %var_3043: Tensor[(6, 15, 2), float64]) -> Tensor[(6, 15, 2), float64] {
  %922 = fn (%var_3033: Tensor[(6, 15, 2), float64], %var_3034: Tensor[(6, 15, 2), float64]) -> Tensor[(6, 15, 2), float64] {
    %918 = cast(%var_3034, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
    %919 = shape_of(%var_3033, dtype="int32") /* ty=Tensor[(3), int32] */;
    %920 = cast(%var_3033, dtype="float64") /* ty=Tensor[(6, 15, 2), float64] */;
    %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%920, %921) /* ty=Tensor[(6, 15, 2), float64] */
  };
  %922(%var_3042, %var_3043) /* ty=Tensor[(6, 15, 2), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen62/build/output.py", line 2824, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:47:13] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

