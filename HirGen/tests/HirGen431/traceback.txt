==========mod==========
#[version = "0.0.5"]
def @func_6926(%var_6910: Tensor[(12, 154), float64]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(11, 12, 14), bool], Tensor[(12, 154), float64]) {
  %0 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %1 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %2 = cast(%var_6910, dtype="float64") /* ty=Tensor[(12, 154), float64] */;
  %3 = reshape(%2, newshape=[11, 12, 14]) /* ty=Tensor[(11, 12, 14), float64] */;
  %4 = @func_532(%3) /* ty=(Tensor[(11, 12, 14), bool], Tensor[(11, 12, 14), bool]) */;
  %5 = %0.0;
  %6 = %1.0;
  %7 = %4.1;
  (%5, %6, %7, %var_6910)
}

def @func_6061(%var_6051: Tensor[(4, 5, 8), float32]) -> Tensor[(4, 5, 8), bool] {
  %8 = @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %9 = %8.1;
  %10 = cast(%9, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %11 = cast(%var_6051, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  less(%10, %11) /* ty=Tensor[(4, 5, 8), bool] */
}

def @func_7143() -> (Tensor[(14, 2, 2), float32],) {
  %12 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %13 = %12.2;
  (%13,)
}

def @func_8000() -> (Tensor[(256), int32],) {
  %14 = @func_7020() /* ty=Tensor[(256), int32] */;
  (%14,)
}

def @func_6561(%var_6557: Tensor[(4, 9, 12), int16]) -> Tensor[(4, 9, 12), int16] {
  %15 = cast(meta[relay.Constant][0] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %16 = cast(%var_6557, dtype="int16") /* ty=Tensor[(4, 9, 12), int16] */;
  add(%15, %16) /* ty=Tensor[(4, 9, 12), int16] */
}

def @func_5134() -> (Tensor[(672), int64], Tensor[(14, 2, 2), float32]) {
  %17 = @func_4602() /* ty=(Tensor[(14, 12, 4), float64], Tensor[(672), int64], Tensor[(4, 1, 8), bool]) */;
  %18 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %19 = %17.1;
  %20 = %18.0;
  (%19, %20)
}

def @func_3151() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32]) {
  %21 = @func_2474() /* ty=(Tensor[(256), int32],) */;
  %22 = %21.0;
  %23 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
  (%22, %23)
}

def @func_6516(%var_6497: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), uint16], Tensor[(15, 15, 3), bool]) {
  %24 = @func_2412() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 4, 8), int32]) */;
  %25 = %24.0;
  %26 = cast(%var_6497, dtype="uint16") /* ty=Tensor[(14, 2, 2), uint16] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="uint16") /* ty=Tensor[(14, 2, 2), uint16] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %30 = @func_4834() /* ty=(Tensor[(15, 15, 3), bool],) */;
  %31 = right_shift(%28, %29) /* ty=Tensor[(14, 2, 2), uint16] */;
  %32 = %30.0;
  (%31, %32)
}

def @func_5579() -> Tensor[(14, 2, 2), float32] {
  %33 = @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %33.1
}

def @func_6828() -> Tensor[(14, 2, 2), float32] {
  %34 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %34.0
}

def @func_1288(%var_1252: int32, %var_1253: Tensor[(8, 4, 8), int32]) -> (Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) {
  %35 = cast(%var_1252, dtype="bool") /* ty=bool */;
  %36 = cast(%var_1253, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %37 = less(%35, %36) /* ty=Tensor[(8, 4, 8), bool] */;
  %38 = cast(%var_1252, dtype="int16") /* ty=int16 */;
  %39 = cast(%37, dtype="int16") /* ty=Tensor[(8, 4, 8), int16] */;
  %40 = cast(%var_1253, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %41 = cast(%var_1252, dtype="float32") /* ty=float32 */;
  %42 = reshape(%41, newshape=[]) /* ty=float32 */;
  %43 = @func_992(%42) /* ty=(Tensor[(14, 2, 2), float32],) */;
  %44 = cast(%37, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %45 = sqrt(%44) /* ty=Tensor[(8, 4, 8), float64] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %47 = right_shift(%38, %39) /* ty=Tensor[(8, 4, 8), int16] */;
  %48 = atan(%40) /* ty=Tensor[(8, 4, 8), float64] */;
  %49 = %43.0;
  %50 = asinh(%46) /* ty=Tensor[(8, 4, 8), float64] */;
  (%47, %48, %49, %50)
}

def @func_5157() -> (Tensor[(14, 2, 2), float32],) {
  %51 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %52 = %51.1;
  (%52,)
}

def @func_7774(%var_7765: Tensor[(630, 1), uint32], %var_7768: Tensor[(384), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 12, 4), float64], int64, Tensor[(672), int64], Tensor[(14, 2, 2), float32], Tensor[(630, 1), uint32], Tensor[(75, 9), float64], Tensor[(2310), float32], Tensor[(384), float32]) {
  %53 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %54 = %53.2;
  %55 = cast(%54, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %56 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %57 = cast(meta[relay.Constant][1] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %58 = reshape(%56, newshape=[]) /* ty=int64 */;
  %59 = reshape(%57, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
  %60 = @func_2727(%58, %59) /* ty=(Tensor[(14, 12, 4), float64],) */;
  %61 = cast(%var_7765, dtype="uint32") /* ty=Tensor[(630, 1), uint32] */;
  %62 = cast(meta[relay.Constant][2] /* ty=Tensor[(75, 9), float64] */, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
  %63 = cast(meta[relay.Constant][3] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %64 = cast(%var_7768, dtype="float32") /* ty=Tensor[(384), float32] */;
  %65 = reshape(%61, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %66 = reshape(%62, newshape=[675]) /* ty=Tensor[(675), float64] */;
  %67 = reshape(%63, newshape=[14, 165]) /* ty=Tensor[(14, 165), float32] */;
  %68 = reshape(%64, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float32] */;
  %69 = @func_3832(%65, %66, %67, %68) /* ty=(Tensor[(15, 15, 3), bool], uint32, Tensor[(630), uint32], Tensor[(675), float64], Tensor[(14, 15, 11), float32], Tensor[(14, 165), float32], Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 12, 8), uint32]) */;
  %70 = sinh(%55) /* ty=Tensor[(14, 2, 2), float32] */;
  %71 = %60.0;
  %72 = %69.7;
  (%70, %71, -2 /* ty=int64 */, meta[relay.Constant][1] /* ty=Tensor[(672), int64] */, %72, %var_7765, meta[relay.Constant][2] /* ty=Tensor[(75, 9), float64] */, meta[relay.Constant][3] /* ty=Tensor[(2310), float32] */, %var_7768)
}

def @func_2857(%var_2814: uint32, %var_2815: Tensor[(6, 7, 15), uint32], %var_2841: Tensor[(15, 45), float64]) -> (Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) {
  %73 = cast(%var_2814, dtype="bool") /* ty=bool */;
  %74 = cast(%var_2815, dtype="bool") /* ty=Tensor[(6, 7, 15), bool] */;
  %75 = less(%73, %74) /* ty=Tensor[(6, 7, 15), bool] */;
  %76 = cast(%75, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %77 = shape_of(%var_2815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%var_2815, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %80 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %82 = cast(%var_2814, dtype="float32") /* ty=float32 */;
  %83 = cast(%var_2841, dtype="float64") /* ty=Tensor[(15, 45), float64] */;
  %84 = cast(%var_2841, dtype="float64") /* ty=Tensor[(15, 45), float64] */;
  %85 = reshape(%83, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %86 = reshape(%84, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %87 = floor_divide(%78, %79) /* ty=Tensor[(6, 7, 15), float32] */;
  %88 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %89 = mod(%81, %82) /* ty=Tensor[(4, 1, 8), float32] */;
  %90 = @func_1098(%85, %86) /* ty=Tensor[(15, 15, 3), bool] */;
  %91 = @func_1982() /* ty=Tensor[(14, 2, 2), float32] */;
  (%87, %88, %89, %90, %var_2841, %91)
}

def @func_3182() -> Tensor[(256), int32] {
  %92 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %92.0
}

def @func_5426() -> Tensor[(4, 1, 8), float32] {
  %93 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %93.0
}

def @func_8722() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) {
  %94 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %95 = @func_5411() /* ty=Tensor[(4, 1, 8), float32] */;
  %96 = %94.0;
  (%95, %96)
}

def @func_6128(%var_6106: int64) -> (Tensor[(256), int32], Tensor[(14, 12, 4), float64], Tensor[(672), int8]) {
  %97 = @func_2474() /* ty=(Tensor[(256), int32],) */;
  %98 = cast(%var_6106, dtype="int64") /* ty=int64 */;
  %99 = cast(meta[relay.Constant][4] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %100 = reshape(%98, newshape=[]) /* ty=int64 */;
  %101 = reshape(%99, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
  %102 = @func_2727(%100, %101) /* ty=(Tensor[(14, 12, 4), float64],) */;
  %103 = cast(meta[relay.Constant][4] /* ty=Tensor[(672), int64] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %104 = cast(%var_6106, dtype="int8") /* ty=int8 */;
  %105 = %97.0;
  %106 = %102.0;
  %107 = bitwise_xor(%103, %104) /* ty=Tensor[(672), int8] */;
  (%105, %106, %107)
}

def @func_8455(%var_8449: Tensor[(5, 14, 14), float32]) -> (Tensor[(5, 14, 14), float32],) {
  %108 = cast(%var_8449, dtype="float32") /* ty=Tensor[(5, 14, 14), float32] */;
  %109 = asin(%108) /* ty=Tensor[(5, 14, 14), float32] */;
  (%109,)
}

def @func_6137() -> (Tensor[(4, 1, 8), float32],) {
  %110 = @func_3328() /* ty=Tensor[(4, 1, 8), float32] */;
  (%110,)
}

def @func_3339(%var_3332: Tensor[(16, 10, 11), float64]) -> Tensor[(16, 10, 11), float64] {
  %111 = cast(%var_3332, dtype="float64") /* ty=Tensor[(16, 10, 11), float64] */;
  cos(%111) /* ty=Tensor[(16, 10, 11), float64] */
}

def @func_2210() -> Tensor[(4, 4, 8), bool] {
  %112 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %113 = %112.0;
  %114 = cast(%113, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 4, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 4, 8), bool] */;
  less_equal(%114, %115) /* ty=Tensor[(4, 4, 8), bool] */
}

def @func_2107() -> Tensor[(4, 1, 8), float32] {
  %116 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %116.0
}

def @func_5183() -> (Tensor[(256), int32],) {
  %117 = @func_4620() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %118 = %117.0;
  (%118,)
}

def @func_6416(%var_6374: Tensor[(600, 2), uint32], %var_6399: Tensor[(600, 2), float64], %var_6410: Tensor[(600, 2), bool]) -> (Tensor[(4, 13, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(600, 2), float64]) {
  %119 = @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %120 = cast(%var_6374, dtype="uint32") /* ty=Tensor[(600, 2), uint32] */;
  %121 = cast(%var_6374, dtype="uint32") /* ty=Tensor[(600, 2), uint32] */;
  %122 = reshape(%120, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
  %123 = reshape(%121, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
  %124 = @func_4326(%122, %123) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) */;
  %125 = cast(%var_6374, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %126 = log(%125) /* ty=Tensor[(600, 2), float64] */;
  %127 = cast(%var_6399, dtype="bool") /* ty=Tensor[(600, 2), bool] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(2), int32] */;
  %129 = cast(%126, dtype="bool") /* ty=Tensor[(600, 2), bool] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %131 = greater(%129, %130) /* ty=Tensor[(600, 2), bool] */;
  %132 = cast(%var_6410, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(2), int32] */;
  %134 = cast(%131, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %136 = %119.0;
  %137 = %124.1;
  %138 = subtract(%134, %135) /* ty=Tensor[(600, 2), float64] */;
  (%136, %137, %138)
}

def @func_6092(%var_6066: uint8, %var_6067: Tensor[(8, 3, 3), uint8]) -> (Tensor[(8, 3, 3), uint8], Tensor[(4, 1, 8), float32], Tensor[(256), int32]) {
  %139 = cast(%var_6066, dtype="uint8") /* ty=uint8 */;
  %140 = cast(%var_6067, dtype="uint8") /* ty=Tensor[(8, 3, 3), uint8] */;
  %141 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %142 = subtract(%139, %140) /* ty=Tensor[(8, 3, 3), uint8] */;
  %143 = %141.0;
  %144 = @func_4564() /* ty=Tensor[(256), int32] */;
  (%142, %143, %144)
}

def @func_5509() -> (Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32]) {
  %145 = @func_4834() /* ty=(Tensor[(15, 15, 3), bool],) */;
  %146 = %145.0;
  %147 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 15, 3), bool] */, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
  %148 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%146, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %151 = @func_5411() /* ty=Tensor[(4, 1, 8), float32] */;
  %152 = subtract(%149, %150) /* ty=Tensor[(15, 15, 3), float32] */;
  (%151, %152)
}

def @func_2185() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) {
  %153 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %154 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %155 = %154.1;
  %156 = cast(%155, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %157 = cast(%155, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %158 = reshape(%156, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %159 = reshape(%157, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %160 = %153.0;
  %161 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %162 = @func_1982() /* ty=Tensor[(14, 2, 2), float32] */;
  %163 = @func_1098(%158, %159) /* ty=Tensor[(15, 15, 3), bool] */;
  (%160, %161, %155, %162, %163)
}

def @func_7020() -> Tensor[(256), int32] {
  %164 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %164.0
}

def @func_1560() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) {
  %165 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %166 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(256), int32] */, dtype="int32") /* ty=Tensor[(256), int32] */;
  %168 = reshape(%166, newshape=[]) /* ty=int32 */;
  %169 = reshape(%167, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), int32] */;
  %170 = @func_1288(%168, %169) /* ty=(Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) */;
  %171 = log(%165) /* ty=Tensor[(4, 1, 8), float32] */;
  %172 = %170.2;
  (%171, %172, -2 /* ty=int32 */, meta[relay.Constant][8] /* ty=Tensor[(256), int32] */)
}

def @func_4834() -> (Tensor[(15, 15, 3), bool],) {
  %173 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %174 = %173.1;
  (%174,)
}

def @func_5628() -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) {
  %175 = @func_4002() /* ty=Tensor[(14, 2, 2), float32] */;
  %176 = @func_5579() /* ty=Tensor[(14, 2, 2), float32] */;
  (%175, %176)
}

def @func_2727(%var_2682: int64, %var_2683: Tensor[(14, 12, 4), int64]) -> (Tensor[(14, 12, 4), float64],) {
  %177 = cast(%var_2682, dtype="int64") /* ty=int64 */;
  %178 = cast(%var_2683, dtype="int64") /* ty=Tensor[(14, 12, 4), int64] */;
  %179 = bitwise_and(%177, %178) /* ty=Tensor[(14, 12, 4), int64] */;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %181 = erf(%180) /* ty=Tensor[(14, 12, 4), float64] */;
  (%181,)
}

def @func_3328() -> Tensor[(4, 1, 8), float32] {
  %182 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %182.0
}

def @func_2073(%var_2047: Tensor[(225, 3), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(225, 3), float64], Tensor[(4, 1, 8), float32]) {
  %183 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %184 = %183.1;
  %185 = cast(%var_2047, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
  %186 = shape_of(%184, dtype="int32") /* ty=Tensor[(2), int32] */;
  %187 = cast(%184, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
  %188 = dyn.reshape(%185, %186, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %189 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %190 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %191 = floor_divide(%187, %188) /* ty=Tensor[(225, 3), float64] */;
  %192 = %189.0;
  (%190, %191, %192)
}

def @func_7465(%var_7417: Tensor[(11, 9, 3), bool], %var_7418: Tensor[(11, 9, 3), bool]) -> (Tensor[(11, 9, 3), bool], Tensor[(432), int16], Tensor[(4, 1, 8), float32], Tensor[(4, 9, 12), float32]) {
  %193 = cast(%var_7418, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
  %194 = shape_of(%var_7417, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%var_7417, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %199 = reshape(%198, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), int16] */;
  %200 = @func_6561(%199) /* ty=Tensor[(4, 9, 12), int16] */;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(4, 9, 12), float32] */;
  %202 = logical_and(%195, %196) /* ty=Tensor[(11, 9, 3), bool] */;
  %203 = %197.0;
  %204 = acos(%201) /* ty=Tensor[(4, 9, 12), float32] */;
  (%202, meta[relay.Constant][9] /* ty=Tensor[(432), int16] */, %203, %204)
}

def @func_6198() -> (Tensor[(4, ?, 8), int16],) {
  %205 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %206 = %205.0;
  %207 = cast(%206, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %208 = log10(%207) /* ty=Tensor[(4, 1, 8), float32] */;
  %209 = cast(%208, dtype="int16") /* ty=Tensor[(4, 1, 8), int16] */;
  %210 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%206, dtype="int16") /* ty=Tensor[(4, 1, 8), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = logical_xor(%211, %212) /* ty=Tensor[(4, ?, 8), int16] */;
  (%213,)
}

def @func_5566() -> Tensor[(4, 4, 8), uint8] {
  %214 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %214.2
}

def @func_2358(%var_2269: Tensor[(225, 3), float32]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32], Tensor[(225, 3), bool], Tensor[(4, 1, 8), float32]) {
  %215 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %216 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %217 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %218 = %217.1;
  %219 = cast(%var_2269, dtype="uint32") /* ty=Tensor[(225, 3), uint32] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(2), int32] */;
  %221 = cast(%218, dtype="uint32") /* ty=Tensor[(225, 3), uint32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %223 = multiply(%221, %222) /* ty=Tensor[(225, 3), uint32] */;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %225 = atan(%224) /* ty=Tensor[(225, 3), float32] */;
  %226 = cast(%225, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %227 = sin(%226) /* ty=Tensor[(225, 3), float32] */;
  %228 = cast(%var_2269, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(2), int32] */;
  %230 = cast(%227, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %232 = cast(%225, dtype="bool") /* ty=Tensor[(225, 3), bool] */;
  %233 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
  %234 = cast(%223, dtype="bool") /* ty=Tensor[(225, 3), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %236 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %237 = %215.0;
  %238 = %216.0;
  %239 = mod(%230, %231) /* ty=Tensor[(225, 3), float32] */;
  %240 = equal(%234, %235) /* ty=Tensor[(225, 3), bool] */;
  %241 = %236.0;
  (%237, %238, %239, %240, %241)
}

def @func_7812(%var_7799: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(672), int64]) {
  %242 = @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %243 = %242.0;
  %244 = cast(%var_7799, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %248 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %249 = @func_5134() /* ty=(Tensor[(672), int64], Tensor[(14, 2, 2), float32]) */;
  %250 = power(%246, %247) /* ty=Tensor[(14, 2, 2), float32] */;
  %251 = %248.0;
  %252 = %249.0;
  (%250, %251, %252)
}

def @func_6008(%var_5998: Tensor[(4, 56), float32]) -> (Tensor[(4, 4, 8), float64], Tensor[(4, 7, 8), bool], Tensor[(4, 56), float32]) {
  %253 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %254 = %253.2;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %256 = cast(%var_5998, dtype="float32") /* ty=Tensor[(4, 56), float32] */;
  %257 = reshape(%256, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %258 = @func_2794(%257) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %259 = acos(%255) /* ty=Tensor[(4, 4, 8), float64] */;
  %260 = %258.0;
  (%259, %260, %var_5998)
}

def @func_3084(%var_3062: Tensor[(2, 6, 6), uint32], %var_3063: Tensor[(2, 6, 6), uint32]) -> (Tensor[(2, 6, 6), uint32],) {
  %261 = cast(%var_3063, dtype="uint32") /* ty=Tensor[(2, 6, 6), uint32] */;
  %262 = shape_of(%var_3062, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_3062, dtype="uint32") /* ty=Tensor[(2, 6, 6), uint32] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %265 = minimum(%263, %264) /* ty=Tensor[(2, 6, 6), uint32] */;
  (%265,)
}

def @func_8533() -> (Tensor[(4, 13, 8), float32], Tensor[(256), int32]) {
  %266 = @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %267 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %268 = %266.0;
  %269 = %267.0;
  (%268, %269)
}

def @func_3981() -> Tensor[(4, 1, 8), float32] {
  %270 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %270.0
}

def @func_1829() -> (Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) {
  %271 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %272 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %273 = %271.0;
  %274 = %272.3;
  (%273, %274)
}

def @func_1915() -> (Tensor[(4, 1, 8), float32],) {
  %275 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %276 = %275.0;
  (%276,)
}

def @func_7703() -> Tensor[(4, 1, 8), float32] {
  %277 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %277.0
}

def @func_1799() -> (Tensor[(4, 1, 8), float32],) {
  %278 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %279 = %278.0;
  (%279,)
}

def @func_6549() -> Tensor[(14, 2, 2), float32] {
  %280 = @func_2185() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) */;
  %280.1
}

def @func_8041() -> (Tensor[(4, 1, 8), float32],) {
  %281 = @func_4892() /* ty=Tensor[(4, 1, 8), float32] */;
  (%281,)
}

def @func_5065(%var_5024: Tensor[(1, 16, 4), float32], %var_5057: uint32) -> (Tensor[(16, 16, 4), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(15, 45), float64], uint32, Tensor[(630), uint32], Tensor[(675), float64]) {
  %282 = cast(%var_5024, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
  %283 = cast(meta[relay.Constant][10] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
  %284 = cast(meta[relay.Constant][11] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %285 = reshape(%284, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %286 = @func_2794(%285) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %287 = cast(%var_5057, dtype="uint32") /* ty=uint32 */;
  %288 = cast(meta[relay.Constant][12] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %289 = cast(meta[relay.Constant][13] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %290 = reshape(%287, newshape=[]) /* ty=uint32 */;
  %291 = reshape(%288, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %292 = reshape(%289, newshape=[15, 45]) /* ty=Tensor[(15, 45), float64] */;
  %293 = @func_2857(%290, %291, %292) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */;
  %294 = power(%282, %283) /* ty=Tensor[(16, 16, 4), float32] */;
  %295 = %286.0;
  %296 = %293.4;
  (%294, %295, meta[relay.Constant][11] /* ty=Tensor[(224), float32] */, %296, %var_5057, meta[relay.Constant][12] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][13] /* ty=Tensor[(675), float64] */)
}

def @func_7924(%var_7899: float32) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], float32, Tensor[(1, 15, 13), float64], Tensor[(1, 15, 13), float32]) {
  %297 = @func_5365() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */;
  %298 = cast(%var_7899, dtype="float32") /* ty=float32 */;
  %299 = reshape(%298, newshape=[]) /* ty=float32 */;
  %300 = @func_992(%299) /* ty=(Tensor[(14, 2, 2), float32],) */;
  %301 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 15, 13), float32] */, dtype="float64") /* ty=Tensor[(1, 15, 13), float64] */;
  %302 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 13), float32] */;
  %303 = atan(%302) /* ty=Tensor[(1, 15, 13), float32] */;
  %304 = cast(%303, dtype="float32") /* ty=Tensor[(1, 15, 13), float32] */;
  %305 = %297.1;
  %306 = %300.0;
  %307 = tan(%301) /* ty=Tensor[(1, 15, 13), float64] */;
  %308 = log10(%304) /* ty=Tensor[(1, 15, 13), float32] */;
  (%305, %306, %var_7899, %307, %308)
}

def @func_4053() -> (Tensor[(4, 1, 8), float32],) {
  %309 = @func_2456() /* ty=Tensor[(4, 1, 8), float32] */;
  (%309,)
}

def @func_6027() -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), float32]) {
  %310 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %311 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %312 = @func_3222() /* ty=(Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) */;
  %313 = %312.0;
  %314 = cast(%313, dtype="float32") /* ty=Tensor[(4, 4, 8), float32] */;
  %315 = %310.1;
  %316 = %311.0;
  %317 = atanh(%314) /* ty=Tensor[(4, 4, 8), float32] */;
  (%315, %316, %317)
}

def @func_4727(%var_4720: Tensor[(4, 4, 8), float32]) -> Tensor[(4, 4, 8), float32] {
  %318 = @func_2877() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %319 = %318.0;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %321 = cast(%var_4720, dtype="float32") /* ty=Tensor[(4, 4, 8), float32] */;
  power(%320, %321) /* ty=Tensor[(4, 4, 8), float32] */
}

def @func_1792() -> (Tensor[(4, 1, 8), float32],) {
  %322 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %323 = %322.0;
  (%323,)
}

def @func_6880() -> Tensor[(4, 1, 8), float32] {
  %324 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %324.0
}

def @func_532(%var_509: Tensor[(11, 12, 14), float64]) -> (Tensor[(11, 12, 14), bool], Tensor[(11, 12, 14), bool]) {
  %325 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 12, 14), float64] */, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
  %326 = shape_of(%var_509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%var_509, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %329 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 12, 14), float64] */, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
  %330 = shape_of(%var_509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%var_509, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = not_equal(%327, %328) /* ty=Tensor[(11, 12, 14), bool] */;
  %334 = greater(%331, %332) /* ty=Tensor[(11, 12, 14), bool] */;
  (%333, %334)
}

def @func_3222() -> (Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) {
  %335 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %336 = cast(meta[relay.Constant][16] /* ty=Tensor[(4, 4, 8), bool] */, dtype="int64") /* ty=Tensor[(4, 4, 8), int64] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="int64") /* ty=Tensor[(4, 4, 8), int64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %340 = cast(meta[relay.Constant][17] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %341 = cast(meta[relay.Constant][17] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %342 = reshape(%340, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %343 = reshape(%341, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %344 = bitwise_and(%338, %339) /* ty=Tensor[(4, 4, 8), int64] */;
  %345 = @func_1098(%342, %343) /* ty=Tensor[(15, 15, 3), bool] */;
  (%344, %345, meta[relay.Constant][17] /* ty=Tensor[(675), float64] */)
}

def @func_4036() -> (Tensor[(4, 1, 8), float32], Tensor[(256), int32]) {
  %346 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %347 = @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %348 = %346.1;
  %349 = %347.0;
  (%348, %349)
}

def @func_1743(%var_1722: Tensor[(15, 15, 3), bool]) -> (Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32], Tensor[(15, 15, 3), uint8]) {
  %350 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %351 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %352 = %351.1;
  %353 = cast(%var_1722, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
  %354 = shape_of(%352, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%352, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %357 = cast(%352, dtype="uint8") /* ty=Tensor[(15, 15, 3), uint8] */;
  %358 = shape_of(%var_1722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_1722, dtype="uint8") /* ty=Tensor[(15, 15, 3), uint8] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %361 = %350.0;
  %362 = floor_mod(%355, %356) /* ty=Tensor[(15, 15, 3), float32] */;
  %363 = multiply(%359, %360) /* ty=Tensor[(15, 15, 3), uint8] */;
  (%361, %362, %363)
}

def @func_6298(%var_6296: Tensor[(675), float64]) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), bool], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) {
  %364 = @func_5157() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %365 = %364.0;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(14, 2, 2), float64] */;
  %367 = atan(%366) /* ty=Tensor[(14, 2, 2), float64] */;
  %368 = cast(%365, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %369 = shape_of(%367, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%367, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %372 = cast(%var_6296, dtype="float64") /* ty=Tensor[(675), float64] */;
  %373 = cast(%var_6296, dtype="float64") /* ty=Tensor[(675), float64] */;
  %374 = reshape(%372, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %375 = reshape(%373, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %376 = @func_4002() /* ty=Tensor[(14, 2, 2), float32] */;
  %377 = equal(%370, %371) /* ty=Tensor[(14, 2, 2), bool] */;
  %378 = @func_1098(%374, %375) /* ty=Tensor[(15, 15, 3), bool] */;
  (%376, %377, %378, %var_6296)
}

def @func_3756(%var_3747: Tensor[(35), float64], %var_3748: Tensor[(210), float64]) -> (Tensor[(4, 4, 8), int64], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) {
  %379 = @func_3222() /* ty=(Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) */;
  %380 = cast(%var_3747, dtype="float64") /* ty=Tensor[(35), float64] */;
  %381 = cast(%var_3748, dtype="float64") /* ty=Tensor[(210), float64] */;
  %382 = reshape(%380, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), float64] */;
  %383 = reshape(%381, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float64] */;
  %384 = %379.0;
  %385 = @func_1374(%382, %383) /* ty=Tensor[(6, 5, 7), float64] */;
  (%384, %385, %var_3747, %var_3748)
}

def @func_7350() -> Tensor[(4, 1, 8), float32] {
  @func_4882() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_7550() -> (Tensor[(4, 4, 8), bool], Tensor[(8, 4, 8), float64], int32, Tensor[(256), int32]) {
  %386 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %387 = cast(meta[relay.Constant][18] /* ty=Tensor[(256), int32] */, dtype="int32") /* ty=Tensor[(256), int32] */;
  %388 = reshape(%386, newshape=[]) /* ty=int32 */;
  %389 = reshape(%387, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), int32] */;
  %390 = @func_1288(%388, %389) /* ty=(Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) */;
  %391 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %392 = %390.1;
  (%391, %392, 2 /* ty=int32 */, meta[relay.Constant][18] /* ty=Tensor[(256), int32] */)
}

def @func_2412() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 4, 8), int32]) {
  %393 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %394 = %393.0;
  %395 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %396 = cast(%394, dtype="int32") /* ty=Tensor[(4, 1, 8), int32] */;
  %397 = cast(%395, dtype="int32") /* ty=Tensor[(4, 4, 8), int32] */;
  %398 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %399 = maximum(%396, %397) /* ty=Tensor[(4, 4, 8), int32] */;
  (%398, %399)
}

def @func_5863(%var_5857: Tensor[(10, 4, 5), uint16]) -> (Tensor[(10, 4, 5), uint16],) {
  %400 = cast(%var_5857, dtype="uint16") /* ty=Tensor[(10, 4, 5), uint16] */;
  %401 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(meta[relay.Constant][19] /* ty=Tensor[(10, 4, 5), uint16] */, dtype="uint16") /* ty=Tensor[(10, 4, 5), uint16] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %404 = left_shift(%402, %403) /* ty=Tensor[(10, 4, 5), uint16] */;
  (%404,)
}

def @func_4892() -> Tensor[(4, 1, 8), float32] {
  @func_3328() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_3643(%var_3636: Tensor[(14, 15, 11), float32]) -> Tensor[(14, 15, 11), float32] {
  %405 = cast(%var_3636, dtype="float32") /* ty=Tensor[(14, 15, 11), float32] */;
  asin(%405) /* ty=Tensor[(14, 15, 11), float32] */
}

def @func_5411() -> Tensor[(4, 1, 8), float32] {
  @func_3981() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_7961(%var_7934: Tensor[(7, 13, 11), uint16], %var_7935: Tensor[(7, 13, 11), uint16]) -> Tensor[(7, 13, 11), uint16] {
  %406 = cast(%var_7935, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
  %407 = shape_of(%var_7934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_7934, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%408, %409) /* ty=Tensor[(7, 13, 11), uint16] */
}

def @func_8330() -> (Tensor[(14, 2, 2), float32],) {
  %410 = @func_7143() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %411 = %410.0;
  (%411,)
}

def @func_2635() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) {
  %412 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %413 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %415 = cosh(%414) /* ty=Tensor[(4, 4, 8), float64] */;
  %416 = cast(%415, dtype="float32") /* ty=Tensor[(4, 4, 8), float32] */;
  %417 = sinh(%416) /* ty=Tensor[(4, 4, 8), float32] */;
  %418 = cast(%417, dtype="uint8") /* ty=Tensor[(4, 4, 8), uint8] */;
  %419 = shape_of(%415, dtype="int32") /* ty=Tensor[(3), int32] */;
  %420 = cast(%415, dtype="uint8") /* ty=Tensor[(4, 4, 8), uint8] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %422 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %423 = %412.0;
  %424 = multiply(%420, %421) /* ty=Tensor[(4, 4, 8), uint8] */;
  (%422, %423, %424)
}

def @func_4065() -> Tensor[(14, 2, 2), float32] {
  %425 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %425.2
}

def @func_8170(%var_8163: Tensor[(4, 3, 8), float32]) -> (Tensor[(7, 13, 11), uint16], Tensor[(1001), uint16], Tensor[(4, 3, 8), bool]) {
  %426 = cast(meta[relay.Constant][20] /* ty=Tensor[(1001), uint16] */, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
  %427 = cast(meta[relay.Constant][20] /* ty=Tensor[(1001), uint16] */, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
  %428 = reshape(%426, newshape=[7, 13, 11]) /* ty=Tensor[(7, 13, 11), uint16] */;
  %429 = reshape(%427, newshape=[7, 13, 11]) /* ty=Tensor[(7, 13, 11), uint16] */;
  %430 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %431 = %430.0;
  %432 = cast(%431, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %433 = cast(%var_8163, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
  %434 = @func_7961(%428, %429) /* ty=Tensor[(7, 13, 11), uint16] */;
  %435 = logical_or(%432, %433) /* ty=Tensor[(4, 3, 8), bool] */;
  (%434, meta[relay.Constant][20] /* ty=Tensor[(1001), uint16] */, %435)
}

def @func_4130(%var_4117: Tensor[(14, 2, 2), float32]) -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(675), float64], Tensor[(14, 2, 2), bool]) {
  %436 = @func_2474() /* ty=(Tensor[(256), int32],) */;
  %437 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %438 = cast(meta[relay.Constant][21] /* ty=Tensor[(675), bool] */, dtype="bool") /* ty=Tensor[(675), bool] */;
  %439 = reshape(%438, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), bool] */;
  %440 = @func_1743(%439) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32], Tensor[(15, 15, 3), uint8]) */;
  %441 = %440.1;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %443 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(675), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %444 = cast(meta[relay.Constant][21] /* ty=Tensor[(675), bool] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?), float64] */;
  %446 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %447 = %446.2;
  %448 = cast(%var_4117, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = %436.0;
  %453 = %437.0;
  %454 = maximum(%444, %445) /* ty=Tensor[(675), float64] */;
  %455 = greater(%450, %451) /* ty=Tensor[(14, 2, 2), bool] */;
  (%452, %453, %454, %455)
}

def @func_3008() -> (Tensor[(14, 2, 2), float32],) {
  %456 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  (%456,)
}

def @func_7344() -> (Tensor[(256), int32],) {
  %457 = @func_5183() /* ty=(Tensor[(256), int32],) */;
  %458 = %457.0;
  (%458,)
}

def @func_2456() -> Tensor[(4, 1, 8), float32] {
  @func_2107() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_4602() -> (Tensor[(14, 12, 4), float64], Tensor[(672), int64], Tensor[(4, 1, 8), bool]) {
  %459 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %460 = cast(meta[relay.Constant][22] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %461 = reshape(%459, newshape=[]) /* ty=int64 */;
  %462 = reshape(%460, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
  %463 = @func_2727(%461, %462) /* ty=(Tensor[(14, 12, 4), float64],) */;
  %464 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %467 = acos(%466) /* ty=Tensor[(4, 1, 8), float32] */;
  %468 = cast(%467, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %469 = cast(4 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %470 = %463.0;
  %471 = logical_or(%468, %469) /* ty=Tensor[(4, 1, 8), bool] */;
  (%470, meta[relay.Constant][22] /* ty=Tensor[(672), int64] */, %471)
}

def @func_8711(%var_8701: Tensor[(128), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 4, 8), float32], Tensor[(128), float32], Tensor[(14, 2, 2), float32]) {
  %472 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %473 = cast(%var_8701, dtype="float32") /* ty=Tensor[(128), float32] */;
  %474 = reshape(%473, newshape=[4, 4, 8]) /* ty=Tensor[(4, 4, 8), float32] */;
  %475 = %472.0;
  %476 = @func_7020() /* ty=Tensor[(256), int32] */;
  %477 = @func_4727(%474) /* ty=Tensor[(4, 4, 8), float32] */;
  %478 = @func_5579() /* ty=Tensor[(14, 2, 2), float32] */;
  (%475, %476, %477, %var_8701, %478)
}

def @func_3832(%var_3803: Tensor[(630), uint32], %var_3804: Tensor[(675), float64], %var_3807: Tensor[(14, 165), float32], %var_3821: Tensor[(4, 12, 8), float32]) -> (Tensor[(15, 15, 3), bool], uint32, Tensor[(630), uint32], Tensor[(675), float64], Tensor[(14, 15, 11), float32], Tensor[(14, 165), float32], Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 12, 8), uint32]) {
  %479 = cast(meta[relay.Constant][23] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %480 = cast(%var_3803, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %481 = cast(%var_3804, dtype="float64") /* ty=Tensor[(675), float64] */;
  %482 = reshape(%479, newshape=[]) /* ty=uint32 */;
  %483 = reshape(%480, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %484 = reshape(%481, newshape=[15, 45]) /* ty=Tensor[(15, 45), float64] */;
  %485 = @func_2857(%482, %483, %484) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */;
  %486 = cast(%var_3807, dtype="float32") /* ty=Tensor[(14, 165), float32] */;
  %487 = reshape(%486, newshape=[14, 15, 11]) /* ty=Tensor[(14, 15, 11), float32] */;
  %488 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %489 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %490 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %491 = %490.1;
  %492 = cast(%491, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %493 = atanh(%492) /* ty=Tensor[(4, 1, 8), float32] */;
  %494 = cast(%493, dtype="uint32") /* ty=Tensor[(4, 1, 8), uint32] */;
  %495 = cast(%var_3821, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
  %496 = %485.3;
  %497 = @func_3643(%487) /* ty=Tensor[(14, 15, 11), float32] */;
  %498 = %488.0;
  %499 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
  %500 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
  %501 = %489.3;
  %502 = subtract(%494, %495) /* ty=Tensor[(4, 12, 8), uint32] */;
  (%496, meta[relay.Constant][23] /* ty=uint32 */, %var_3803, %var_3804, %497, %var_3807, %498, %499, %500, %501, %502)
}

def @func_1098(%var_1090: Tensor[(15, 15, 3), float64], %var_1091: Tensor[(15, 15, 3), float64]) -> Tensor[(15, 15, 3), bool] {
  %503 = cast(%var_1091, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %504 = shape_of(%var_1090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%var_1090, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%505, %506) /* ty=Tensor[(15, 15, 3), bool] */
}

def @func_7062() -> (Tensor[(4, 2, 8), float64], Tensor[(2, 6, 6), uint32], Tensor[(72), uint32]) {
  %507 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
  %508 = cast(%507, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %509 = cast(meta[relay.Constant][24] /* ty=Tensor[(4, 2, 8), float32] */, dtype="float64") /* ty=Tensor[(4, 2, 8), float64] */;
  %510 = cast(meta[relay.Constant][25] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %511 = cast(meta[relay.Constant][25] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %512 = reshape(%510, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
  %513 = reshape(%511, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
  %514 = @func_3084(%512, %513) /* ty=(Tensor[(2, 6, 6), uint32],) */;
  %515 = mod(%508, %509) /* ty=Tensor[(4, 2, 8), float64] */;
  %516 = %514.0;
  (%515, %516, meta[relay.Constant][25] /* ty=Tensor[(72), uint32] */)
}

def @func_2474() -> (Tensor[(256), int32],) {
  %517 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %518 = %517.0;
  (%518,)
}

def @func_1653() -> (Tensor[(4, 1, 8), float32],) {
  %519 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %520 = %519.0;
  (%520,)
}

def @func_3929(%var_3872: float64, %var_3873: Tensor[(12, 1), float64]) -> (Tensor[(336, 2), int64], Tensor[(14, 12, 4), uint32], Tensor[(4, 1, 8), float32]) {
  %521 = cast(%var_3872, dtype="float64") /* ty=float64 */;
  %522 = cast(%var_3873, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
  %523 = divide(%521, %522) /* ty=Tensor[(12, 1), float64] */;
  %524 = cast(%var_3872, dtype="int64") /* ty=int64 */;
  %525 = cast(meta[relay.Constant][26] /* ty=Tensor[(336, 2), int64] */, dtype="int64") /* ty=Tensor[(336, 2), int64] */;
  %526 = reshape(%524, newshape=[]) /* ty=int64 */;
  %527 = reshape(%525, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
  %528 = @func_2727(%526, %527) /* ty=(Tensor[(14, 12, 4), float64],) */;
  %529 = %528.0;
  %530 = cast(%523, dtype="uint32") /* ty=Tensor[(12, 1), uint32] */;
  %531 = cast(%529, dtype="uint32") /* ty=Tensor[(14, 12, 4), uint32] */;
  %532 = @func_2877() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %533 = maximum(%530, %531) /* ty=Tensor[(14, 12, 4), uint32] */;
  %534 = %532.0;
  (meta[relay.Constant][26] /* ty=Tensor[(336, 2), int64] */, %533, %534)
}

def @func_8582() -> (Tensor[(4, 1, 8), float32], Tensor[(16, 10, 11), float64], Tensor[(1760), float64]) {
  %535 = cast(meta[relay.Constant][27] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %536 = reshape(%535, newshape=[16, 10, 11]) /* ty=Tensor[(16, 10, 11), float64] */;
  %537 = @func_3328() /* ty=Tensor[(4, 1, 8), float32] */;
  %538 = @func_3339(%536) /* ty=Tensor[(16, 10, 11), float64] */;
  (%537, %538, meta[relay.Constant][27] /* ty=Tensor[(1760), float64] */)
}

def @main() -> (Tensor[(4, 4, 8), float64],) {
  %539 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %541 = erf(%540) /* ty=Tensor[(4, 4, 8), float64] */;
  (%541,)
}

def @func_1895() -> Tensor[(14, 2, 2), float32] {
  %542 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %542.2
}

def @func_1982() -> Tensor[(14, 2, 2), float32] {
  %543 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %543.2
}

def @func_8394(%var_8389: int32, %var_8390: Tensor[(8, 12, 1), int32]) -> Tensor[(8, 12, 1), bool] {
  %544 = cast(%var_8389, dtype="bool") /* ty=bool */;
  %545 = cast(%var_8390, dtype="bool") /* ty=Tensor[(8, 12, 1), bool] */;
  less_equal(%544, %545) /* ty=Tensor[(8, 12, 1), bool] */
}

def @func_2794(%var_2759: Tensor[(4, 7, 8), float32]) -> (Tensor[(4, 7, 8), bool],) {
  %546 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %547 = %546.0;
  %548 = cast(%547, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %549 = cast(%var_2759, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
  %550 = logical_and(%548, %549) /* ty=Tensor[(4, 7, 8), bool] */;
  (%550,)
}

def @func_5526() -> Tensor[(256), int32] {
  %551 = @func_5183() /* ty=(Tensor[(256), int32],) */;
  %551.0
}

def @func_4852() -> (Tensor[(4, 1, 8), float32],) {
  %552 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %555 = exp(%554) /* ty=Tensor[(4, 1, 8), float32] */;
  (%555,)
}

def @func_4401(%var_4366: Tensor[(224), float32], %var_4377: Tensor[(675), float64], %var_4378: uint32) -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(4, 1, 8), float32], Tensor[(2, 6, 6), uint32], Tensor[(528), float64], Tensor[(675), float64], uint32, Tensor[(6, 12), uint32], Tensor[(14, 2, 2), float32]) {
  %556 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %557 = cast(%var_4366, dtype="float32") /* ty=Tensor[(224), float32] */;
  %558 = reshape(%557, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %559 = @func_2794(%558) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %560 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %561 = cast(meta[relay.Constant][28] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %562 = cast(%var_4377, dtype="float64") /* ty=Tensor[(675), float64] */;
  %563 = cast(%var_4378, dtype="uint32") /* ty=uint32 */;
  %564 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 12), uint32] */, dtype="uint32") /* ty=Tensor[(6, 12), uint32] */;
  %565 = reshape(%561, newshape=[16, 3, 11]) /* ty=Tensor[(16, 3, 11), float64] */;
  %566 = reshape(%562, newshape=[75, 9]) /* ty=Tensor[(75, 9), float64] */;
  %567 = reshape(%563, newshape=[]) /* ty=uint32 */;
  %568 = reshape(%564, newshape=[1, 72]) /* ty=Tensor[(1, 72), uint32] */;
  %569 = @func_3526(%565, %566, %567, %568) /* ty=(Tensor[(15, 15, 3), bool], Tensor[(75, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(6, 7, 15), float32], uint32, Tensor[(5, 126), uint32], Tensor[(16, 3, 11), bool], Tensor[(16, 3, 11), uint16], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(16, 3, 11), bool], Tensor[(2, 6, 6), uint32], Tensor[(1, 72), uint32], Tensor[(16, 3, 11), float32]) */;
  %570 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %571 = @func_4060() /* ty=Tensor[(256), int32] */;
  %572 = %556.0;
  %573 = %559.0;
  %574 = %560.0;
  %575 = %569.15;
  %576 = %570.1;
  (%571, %572, %573, %var_4366, %574, %575, meta[relay.Constant][28] /* ty=Tensor[(528), float64] */, %var_4377, %var_4378, meta[relay.Constant][29] /* ty=Tensor[(6, 12), uint32] */, %576)
}

def @func_2969() -> Tensor[(14, 2, 2), float32] {
  %577 = @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %577.0
}

def @func_992(%var_987: float32) -> (Tensor[(14, 2, 2), float32],) {
  %578 = cast(%var_987, dtype="float32") /* ty=float32 */;
  %579 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 2, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %580 = floor_mod(%578, %579) /* ty=Tensor[(14, 2, 2), float32] */;
  (%580,)
}

def @func_4002() -> Tensor[(14, 2, 2), float32] {
  %581 = @func_2185() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) */;
  %582 = %581.1;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  asin(%583) /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_4564() -> Tensor[(256), int32] {
  %584 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %584.0
}

def @func_2115() -> (Tensor[(14, 2, 2), float32],) {
  %585 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  (%585,)
}

def @func_7509() -> (Tensor[(256), int32], Tensor[(4, 7, 8), bool], Tensor[(224), float32]) {
  %586 = @func_7344() /* ty=(Tensor[(256), int32],) */;
  %587 = cast(meta[relay.Constant][31] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %588 = reshape(%587, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %589 = @func_2794(%588) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %590 = %586.0;
  %591 = %589.0;
  (%590, %591, meta[relay.Constant][31] /* ty=Tensor[(224), float32] */)
}

def @func_2246() -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) {
  %592 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %593 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %594 = %593.0;
  %595 = cast(%594, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %596 = rsqrt(%595) /* ty=Tensor[(4, 1, 8), float64] */;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %598 = %592.0;
  %599 = sinh(%597) /* ty=Tensor[(4, 1, 8), float32] */;
  (%598, %599)
}

def @func_7316() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32]) {
  %600 = @func_5365() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */;
  %601 = @func_6137() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %602 = %600.1;
  %603 = %601.0;
  (%602, %603)
}

def @func_7189() -> (Tensor[(14, 2, 2), float32],) {
  %604 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
  (%604,)
}

def @func_4882() -> Tensor[(4, 1, 8), float32] {
  @func_3981() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_8313() -> (Tensor[(3, ?, 2), int16], Tensor[(3, 1, 2), float64]) {
  %605 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
  %606 = asinh(%605) /* ty=Tensor[(3, 1, 2), float64] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
  %608 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %611 = subtract(%609, %610) /* ty=Tensor[(3, ?, 2), float64] */;
  %612 = cast(%611, dtype="int64") /* ty=Tensor[(3, ?, 2), int64] */;
  %613 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int64") /* ty=Tensor[(3, 1, 2), int64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %616 = bitwise_xor(%614, %615) /* ty=Tensor[(3, ?, 2), int64] */;
  %617 = cast(%616, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %618 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%611, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %621 = less_equal(%619, %620) /* ty=Tensor[(3, ?, 2), bool] */;
  %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int16") /* ty=Tensor[(3, 1, 2), int16] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %626 = cast(%606, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
  %627 = minimum(%624, %625) /* ty=Tensor[(3, ?, 2), int16] */;
  %628 = sigmoid(%626) /* ty=Tensor[(3, 1, 2), float64] */;
  (%627, %628)
}

def @func_1624() -> (Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) {
  %629 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %630 = cast(meta[relay.Constant][33] /* ty=Tensor[(225, 3), float64] */, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
  %631 = cast(meta[relay.Constant][33] /* ty=Tensor[(225, 3), float64] */, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
  %632 = reshape(%630, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %633 = reshape(%631, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %634 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %635 = cast(meta[relay.Constant][33] /* ty=Tensor[(225, 3), float64] */, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %636 = %629.3;
  %637 = @func_1098(%632, %633) /* ty=Tensor[(15, 15, 3), bool] */;
  %638 = %634.1;
  %639 = asin(%635) /* ty=Tensor[(225, 3), float32] */;
  (%636, %637, %638, %639)
}

def @func_6951(%var_6942: Tensor[(12, 3, 14), float64]) -> (Tensor[(12, 3, 14), int8], Tensor[(4, 1, 8), float32]) {
  %640 = cast(%var_6942, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %641 = cos(%640) /* ty=Tensor[(12, 3, 14), float64] */;
  %642 = cast(%var_6942, dtype="int8") /* ty=Tensor[(12, 3, 14), int8] */;
  %643 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%641, dtype="int8") /* ty=Tensor[(12, 3, 14), int8] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %646 = @func_5365() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */;
  %647 = bitwise_and(%644, %645) /* ty=Tensor[(12, 3, 14), int8] */;
  %648 = %646.0;
  (%647, %648)
}

def @func_3526(%var_3408: Tensor[(16, 3, 11), float64], %var_3417: Tensor[(75, 9), float64], %var_3434: uint32, %var_3519: Tensor[(1, 72), uint32]) -> (Tensor[(15, 15, 3), bool], Tensor[(75, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(6, 7, 15), float32], uint32, Tensor[(5, 126), uint32], Tensor[(16, 3, 11), bool], Tensor[(16, 3, 11), uint16], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(16, 3, 11), bool], Tensor[(2, 6, 6), uint32], Tensor[(1, 72), uint32], Tensor[(16, 3, 11), float32]) {
  %649 = cast(%var_3417, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
  %650 = cast(%var_3417, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
  %651 = reshape(%649, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %652 = reshape(%650, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %653 = cast(%var_3434, dtype="uint32") /* ty=uint32 */;
  %654 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 126), uint32] */, dtype="uint32") /* ty=Tensor[(5, 126), uint32] */;
  %655 = @func_1098(%651, %652) /* ty=Tensor[(15, 15, 3), bool] */;
  %656 = cast(%655, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %657 = reshape(%653, newshape=[]) /* ty=uint32 */;
  %658 = reshape(%654, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
  %659 = reshape(%656, newshape=[15, 45]) /* ty=Tensor[(15, 45), float64] */;
  %660 = @func_2857(%657, %658, %659) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */;
  %661 = cast(%var_3408, dtype="float64") /* ty=Tensor[(16, 3, 11), float64] */;
  %662 = erf(%661) /* ty=Tensor[(16, 3, 11), float64] */;
  %663 = cast(%662, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %664 = acos(%663) /* ty=Tensor[(16, 3, 11), float32] */;
  %665 = cast(%662, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
  %666 = shape_of(%664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(%664, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %669 = cast(%var_3408, dtype="uint16") /* ty=Tensor[(16, 3, 11), uint16] */;
  %670 = shape_of(%662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%662, dtype="uint16") /* ty=Tensor[(16, 3, 11), uint16] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %673 = cast(%var_3417, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
  %674 = cast(%655, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %675 = reshape(%673, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %676 = reshape(%674, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %677 = @func_3008() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %678 = cast(meta[relay.Constant][35] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %679 = reshape(%678, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %680 = @func_2794(%679) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %681 = cast(%664, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %682 = cosh(%681) /* ty=Tensor[(16, 3, 11), float32] */;
  %683 = cast(%682, dtype="float64") /* ty=Tensor[(16, 3, 11), float64] */;
  %684 = tan(%683) /* ty=Tensor[(16, 3, 11), float64] */;
  %685 = cast(%684, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
  %686 = shape_of(%682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %687 = cast(%682, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
  %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %689 = cast(%var_3519, dtype="uint32") /* ty=Tensor[(1, 72), uint32] */;
  %690 = cast(%var_3519, dtype="uint32") /* ty=Tensor[(1, 72), uint32] */;
  %691 = reshape(%689, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
  %692 = reshape(%690, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
  %693 = @func_3084(%691, %692) /* ty=(Tensor[(2, 6, 6), uint32],) */;
  %694 = cast(%684, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
  %695 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
  %696 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
  %697 = %660.0;
  %698 = less(%667, %668) /* ty=Tensor[(16, 3, 11), bool] */;
  %699 = add(%671, %672) /* ty=Tensor[(16, 3, 11), uint16] */;
  %700 = @func_1098(%675, %676) /* ty=Tensor[(15, 15, 3), bool] */;
  %701 = %677.0;
  %702 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
  %703 = %680.0;
  %704 = logical_and(%687, %688) /* ty=Tensor[(16, 3, 11), bool] */;
  %705 = %693.0;
  %706 = sigmoid(%694) /* ty=Tensor[(16, 3, 11), float32] */;
  (%655, %var_3417, %695, %696, %697, %var_3434, meta[relay.Constant][34] /* ty=Tensor[(5, 126), uint32] */, %698, %699, %700, %701, %702, %703, meta[relay.Constant][35] /* ty=Tensor[(224), float32] */, %704, %705, %var_3519, %706)
}

def @func_4620() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32]) {
  %707 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %708 = @func_4060() /* ty=Tensor[(256), int32] */;
  %709 = %707.1;
  (%708, %709)
}

def @func_1374(%var_1366: Tensor[(1, 5, 7), float64], %var_1367: Tensor[(6, 5, 7), float64]) -> Tensor[(6, 5, 7), float64] {
  %710 = cast(%var_1366, dtype="float64") /* ty=Tensor[(1, 5, 7), float64] */;
  %711 = cast(%var_1367, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  floor_mod(%710, %711) /* ty=Tensor[(6, 5, 7), float64] */
}

def @func_4185(%var_4174: Tensor[(5, 9, 12), float64], %var_4175: Tensor[(5, 9, 12), float64]) -> (Tensor[(5, 9, 12), float64],) {
  %712 = cast(%var_4175, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %713 = shape_of(%var_4174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %714 = cast(%var_4174, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %716 = divide(%714, %715) /* ty=Tensor[(5, 9, 12), float64] */;
  (%716,)
}

def @func_5365() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) {
  %717 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %718 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %719 = %717.0;
  %720 = %718.0;
  (%719, %720)
}

def @func_5705() -> (Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) {
  %721 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %722 = %721.0;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %724 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %725 = floor_divide(%723, %724) /* ty=Tensor[(4, 13, 8), float32] */;
  %726 = @func_3981() /* ty=Tensor[(4, 1, 8), float32] */;
  (%725, %726)
}

def @func_8520(%var_8496: Tensor[(1200), uint32]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(1200), uint32], Tensor[(4, 1, 8), float32]) {
  %727 = @func_6137() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %728 = cast(%var_8496, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %729 = cast(%var_8496, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
  %730 = reshape(%728, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
  %731 = reshape(%729, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
  %732 = @func_4326(%730, %731) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) */;
  %733 = %727.0;
  %734 = %732.2;
  %735 = @func_4882() /* ty=Tensor[(4, 1, 8), float32] */;
  (%733, %734, %var_8496, %735)
}

def @func_4326(%var_4232: Tensor[(15, 5, 16), uint32], %var_4233: Tensor[(15, 5, 16), uint32]) -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) {
  %736 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %737 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %738 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %739 = cast(%var_4233, dtype="uint32") /* ty=Tensor[(15, 5, 16), uint32] */;
  %740 = shape_of(%var_4232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%var_4232, dtype="uint32") /* ty=Tensor[(15, 5, 16), uint32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %743 = minimum(%741, %742) /* ty=Tensor[(15, 5, 16), uint32] */;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %745 = %736.0;
  %746 = @func_4002() /* ty=Tensor[(14, 2, 2), float32] */;
  %747 = %737.1;
  %748 = %738.1;
  %749 = sin(%744) /* ty=Tensor[(15, 5, 16), float64] */;
  (%745, %746, %747, %748, %749)
}

def @func_6322() -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) {
  %750 = @func_4882() /* ty=Tensor[(4, 1, 8), float32] */;
  %751 = @func_5411() /* ty=Tensor[(4, 1, 8), float32] */;
  (%750, %751)
}

def @func_2877() -> (Tensor[(4, 1, 8), float32],) {
  %752 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %753 = %752.0;
  (%753,)
}

def @func_2961() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) {
  %754 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %755 = @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %756 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %757 = %754.0;
  %758 = %755.0;
  %759 = %756.1;
  (%757, %758, %759)
}

def @func_7000() -> (Tensor[(14, 2, 2), float32],) {
  %760 = @func_4620() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %761 = %760.1;
  (%761,)
}

def @func_8383() -> (Tensor[(256), int32], Tensor[(256), int32]) {
  %762 = @func_5526() /* ty=Tensor[(256), int32] */;
  %763 = @func_4564() /* ty=Tensor[(256), int32] */;
  (%762, %763)
}

def @func_8256() -> (Tensor[(14, 2, 2), float32],) {
  %764 = @func_5134() /* ty=(Tensor[(672), int64], Tensor[(14, 2, 2), float32]) */;
  %765 = %764.1;
  (%765,)
}

def @func_4764() -> (Tensor[(14, 2, 2), uint64],) {
  %766 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %767 = %766.0;
  %768 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 2, 2), float32] */, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(3), int32] */;
  %770 = cast(%767, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %772 = bitwise_and(%770, %771) /* ty=Tensor[(14, 2, 2), uint64] */;
  (%772,)
}

def @func_4201() -> Tensor[(14, 2, 2), float32] {
  @func_4002() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_4666(%var_4663: Tensor[(210), float64]) -> (Tensor[(256), int32], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) {
  %773 = @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %774 = cast(meta[relay.Constant][38] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %775 = cast(%var_4663, dtype="float64") /* ty=Tensor[(210), float64] */;
  %776 = reshape(%774, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), float64] */;
  %777 = reshape(%775, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float64] */;
  %778 = %773.0;
  %779 = @func_1374(%776, %777) /* ty=Tensor[(6, 5, 7), float64] */;
  (%778, %779, meta[relay.Constant][38] /* ty=Tensor[(35), float64] */, %var_4663)
}

def @func_4060() -> Tensor[(256), int32] {
  @func_3182() /* ty=Tensor[(256), int32] */
}

def @func_3565(%var_3558: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), bool],) {
  %780 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %781 = %780.1;
  %782 = cast(%var_3558, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %783 = shape_of(%781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %784 = cast(%781, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %785 = dyn.reshape(%782, %783, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %786 = logical_or(%784, %785) /* ty=Tensor[(14, 2, 2), bool] */;
  (%786,)
}

def @func_4629() -> (Tensor[(14, 2, 2), float32],) {
  %787 = @func_1982() /* ty=Tensor[(14, 2, 2), float32] */;
  (%787,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3339(%var_3332: Tensor[(16, 10, 11), float64]) -> Tensor[(16, 10, 11), float64] {
  %0 = cast(%var_3332, dtype="float64") /* ty=Tensor[(16, 10, 11), float64] */;
  cos(%0) /* ty=Tensor[(16, 10, 11), float64] */
}

def @func_2727(%var_2682: int64, %var_2683: Tensor[(14, 12, 4), int64]) -> (Tensor[(14, 12, 4), float64],) {
  %1 = cast(%var_2682, dtype="int64") /* ty=int64 */;
  %2 = cast(%var_2683, dtype="int64") /* ty=Tensor[(14, 12, 4), int64] */;
  %3 = bitwise_and(%1, %2) /* ty=Tensor[(14, 12, 4), int64] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(14, 12, 4), float64] */;
  %5 = erf(%4) /* ty=Tensor[(14, 12, 4), float64] */;
  (%5,)
}

def @func_6928(%var_6927: Tensor[(12, 154), float64]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(11, 12, 14), bool], Tensor[(12, 154), float64]) {
  %14 = fn (%var_6910: Tensor[(12, 154), float64]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(11, 12, 14), bool], Tensor[(12, 154), float64]) {
    %6 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %7 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %8 = cast(%var_6910, dtype="float64") /* ty=Tensor[(12, 154), float64] */;
    %9 = reshape(%8, newshape=[11, 12, 14]) /* ty=Tensor[(11, 12, 14), float64] */;
    %10 = @func_532(%9) /* ty=(Tensor[(11, 12, 14), bool], Tensor[(11, 12, 14), bool]) */;
    %11 = %6.0;
    %12 = %7.0;
    %13 = %10.1;
    (%11, %12, %13, %var_6910)
  };
  %14(%var_6927) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(11, 12, 14), bool], Tensor[(12, 154), float64]) */
}

def @func_3759(%var_3757: Tensor[(35), float64], %var_3758: Tensor[(210), float64]) -> (Tensor[(4, 4, 8), int64], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) {
  %22 = fn (%var_3747: Tensor[(35), float64], %var_3748: Tensor[(210), float64]) -> (Tensor[(4, 4, 8), int64], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) {
    %15 = @func_3222() /* ty=(Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) */;
    %16 = cast(%var_3747, dtype="float64") /* ty=Tensor[(35), float64] */;
    %17 = cast(%var_3748, dtype="float64") /* ty=Tensor[(210), float64] */;
    %18 = reshape(%16, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), float64] */;
    %19 = reshape(%17, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float64] */;
    %20 = %15.0;
    %21 = @func_1374(%18, %19) /* ty=Tensor[(6, 5, 7), float64] */;
    (%20, %21, %var_3747, %var_3748)
  };
  %22(%var_3757, %var_3758) /* ty=(Tensor[(4, 4, 8), int64], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) */
}

def @func_2186() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) {
  %34 = fn () -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) {
    %23 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
    %24 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
    %25 = %24.1;
    %26 = cast(%25, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
    %27 = cast(%25, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
    %28 = reshape(%26, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %29 = reshape(%27, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %30 = %23.0;
    %31 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
    %32 = @func_1982() /* ty=Tensor[(14, 2, 2), float32] */;
    %33 = @func_1098(%28, %29) /* ty=Tensor[(15, 15, 3), bool] */;
    (%30, %31, %25, %32, %33)
  };
  %34() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) */
}

def @func_2962() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) {
  %41 = fn () -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) {
    %35 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
    %36 = @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %37 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
    %38 = %35.0;
    %39 = %36.0;
    %40 = %37.1;
    (%38, %39, %40)
  };
  %41() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */
}

def @func_6420(%var_6417: Tensor[(600, 2), uint32], %var_6418: Tensor[(600, 2), float64], %var_6419: Tensor[(600, 2), bool]) -> (Tensor[(4, 13, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(600, 2), float64]) {
  %62 = fn (%var_6374: Tensor[(600, 2), uint32], %var_6399: Tensor[(600, 2), float64], %var_6410: Tensor[(600, 2), bool]) -> (Tensor[(4, 13, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(600, 2), float64]) {
    %42 = @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */;
    %43 = cast(%var_6374, dtype="uint32") /* ty=Tensor[(600, 2), uint32] */;
    %44 = cast(%var_6374, dtype="uint32") /* ty=Tensor[(600, 2), uint32] */;
    %45 = reshape(%43, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
    %46 = reshape(%44, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
    %47 = @func_4326(%45, %46) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) */;
    %48 = cast(%var_6374, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
    %49 = log(%48) /* ty=Tensor[(600, 2), float64] */;
    %50 = cast(%var_6399, dtype="bool") /* ty=Tensor[(600, 2), bool] */;
    %51 = shape_of(%49, dtype="int32") /* ty=Tensor[(2), int32] */;
    %52 = cast(%49, dtype="bool") /* ty=Tensor[(600, 2), bool] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %54 = greater(%52, %53) /* ty=Tensor[(600, 2), bool] */;
    %55 = cast(%var_6410, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
    %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
    %57 = cast(%54, dtype="float64") /* ty=Tensor[(600, 2), float64] */;
    %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %59 = %42.0;
    %60 = %47.1;
    %61 = subtract(%57, %58) /* ty=Tensor[(600, 2), float64] */;
    (%59, %60, %61)
  };
  %62(%var_6417, %var_6418, %var_6419) /* ty=(Tensor[(4, 13, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(600, 2), float64]) */
}

def @func_7927(%var_7925: float32) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], float32, Tensor[(1, 15, 13), float64], Tensor[(1, 15, 13), float32]) {
  @func_7924(%var_7925) /* ty=(Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], float32, Tensor[(1, 15, 13), float64], Tensor[(1, 15, 13), float32]) */
}

def @func_2117() -> (Tensor[(14, 2, 2), float32],) {
  @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_5136() -> (Tensor[(672), int64], Tensor[(14, 2, 2), float32]) {
  @func_5134() /* ty=(Tensor[(672), int64], Tensor[(14, 2, 2), float32]) */
}

def @func_3151() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32]) {
  %63 = @func_2474() /* ty=(Tensor[(256), int32],) */;
  %64 = %63.0;
  %65 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
  (%64, %65)
}

def @func_8457(%var_8456: Tensor[(5, 14, 14), float32]) -> (Tensor[(5, 14, 14), float32],) {
  %68 = fn (%var_8449: Tensor[(5, 14, 14), float32]) -> (Tensor[(5, 14, 14), float32],) {
    %66 = cast(%var_8449, dtype="float32") /* ty=Tensor[(5, 14, 14), float32] */;
    %67 = asin(%66) /* ty=Tensor[(5, 14, 14), float32] */;
    (%67,)
  };
  %68(%var_8456) /* ty=(Tensor[(5, 14, 14), float32],) */
}

def @func_1897() -> Tensor[(14, 2, 2), float32] {
  @func_1895() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_2635() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) {
  %69 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %70 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %72 = cosh(%71) /* ty=Tensor[(4, 4, 8), float64] */;
  %73 = cast(%72, dtype="float32") /* ty=Tensor[(4, 4, 8), float32] */;
  %74 = sinh(%73) /* ty=Tensor[(4, 4, 8), float32] */;
  %75 = cast(%74, dtype="uint8") /* ty=Tensor[(4, 4, 8), uint8] */;
  %76 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%72, dtype="uint8") /* ty=Tensor[(4, 4, 8), uint8] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %79 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %80 = %69.0;
  %81 = multiply(%77, %78) /* ty=Tensor[(4, 4, 8), uint8] */;
  (%79, %80, %81)
}

def @func_2107() -> Tensor[(4, 1, 8), float32] {
  %82 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %82.0
}

def @func_4836() -> (Tensor[(15, 15, 3), bool],) {
  @func_4834() /* ty=(Tensor[(15, 15, 3), bool],) */
}

def @func_8397(%var_8395: int32, %var_8396: Tensor[(8, 12, 1), int32]) -> Tensor[(8, 12, 1), bool] {
  %85 = fn (%var_8389: int32, %var_8390: Tensor[(8, 12, 1), int32]) -> Tensor[(8, 12, 1), bool] {
    %83 = cast(%var_8389, dtype="bool") /* ty=bool */;
    %84 = cast(%var_8390, dtype="bool") /* ty=Tensor[(8, 12, 1), bool] */;
    less_equal(%83, %84) /* ty=Tensor[(8, 12, 1), bool] */
  };
  %85(%var_8395, %var_8396) /* ty=Tensor[(8, 12, 1), bool] */
}

def @func_5366() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) {
  %90 = fn () -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) {
    %86 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %87 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %88 = %86.0;
    %89 = %87.0;
    (%88, %89)
  };
  %90() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */
}

def @func_7318() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32]) {
  @func_7316() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32]) */
}

def @func_5705() -> (Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) {
  %91 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %94 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 13, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %95 = floor_divide(%93, %94) /* ty=Tensor[(4, 13, 8), float32] */;
  %96 = @func_3981() /* ty=Tensor[(4, 1, 8), float32] */;
  (%95, %96)
}

def @func_7468(%var_7466: Tensor[(11, 9, 3), bool], %var_7467: Tensor[(11, 9, 3), bool]) -> (Tensor[(11, 9, 3), bool], Tensor[(432), int16], Tensor[(4, 1, 8), float32], Tensor[(4, 9, 12), float32]) {
  %109 = fn (%var_7417: Tensor[(11, 9, 3), bool], %var_7418: Tensor[(11, 9, 3), bool]) -> (Tensor[(11, 9, 3), bool], Tensor[(432), int16], Tensor[(4, 1, 8), float32], Tensor[(4, 9, 12), float32]) {
    %97 = cast(%var_7418, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
    %98 = shape_of(%var_7417, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%var_7417, dtype="bool") /* ty=Tensor[(11, 9, 3), bool] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %101 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %102 = cast(meta[relay.Constant][1] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %103 = reshape(%102, newshape=[4, 9, 12]) /* ty=Tensor[(4, 9, 12), int16] */;
    %104 = @func_6561(%103) /* ty=Tensor[(4, 9, 12), int16] */;
    %105 = cast(%104, dtype="float32") /* ty=Tensor[(4, 9, 12), float32] */;
    %106 = logical_and(%99, %100) /* ty=Tensor[(11, 9, 3), bool] */;
    %107 = %101.0;
    %108 = acos(%105) /* ty=Tensor[(4, 9, 12), float32] */;
    (%106, meta[relay.Constant][1] /* ty=Tensor[(432), int16] */, %107, %108)
  };
  %109(%var_7466, %var_7467) /* ty=(Tensor[(11, 9, 3), bool], Tensor[(432), int16], Tensor[(4, 1, 8), float32], Tensor[(4, 9, 12), float32]) */
}

def @func_6828() -> Tensor[(14, 2, 2), float32] {
  %110 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %110.0
}

def @func_2796(%var_2795: Tensor[(4, 7, 8), float32]) -> (Tensor[(4, 7, 8), bool],) {
  %116 = fn (%var_2759: Tensor[(4, 7, 8), float32]) -> (Tensor[(4, 7, 8), bool],) {
    %111 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %112 = %111.0;
    %113 = cast(%112, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
    %114 = cast(%var_2759, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
    %115 = logical_and(%113, %114) /* ty=Tensor[(4, 7, 8), bool] */;
    (%115,)
  };
  %116(%var_2795) /* ty=(Tensor[(4, 7, 8), bool],) */
}

def @func_8535() -> (Tensor[(4, 13, 8), float32], Tensor[(256), int32]) {
  @func_8533() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(256), int32]) */
}

def @func_4130(%var_4117: Tensor[(14, 2, 2), float32]) -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(675), float64], Tensor[(14, 2, 2), bool]) {
  %117 = @func_2474() /* ty=(Tensor[(256), int32],) */;
  %118 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %119 = cast(meta[relay.Constant][2] /* ty=Tensor[(675), bool] */, dtype="bool") /* ty=Tensor[(675), bool] */;
  %120 = reshape(%119, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), bool] */;
  %121 = @func_1743(%120) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32], Tensor[(15, 15, 3), uint8]) */;
  %122 = %121.1;
  %123 = cast(%122, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
  %124 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(675), bool] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %125 = cast(meta[relay.Constant][2] /* ty=Tensor[(675), bool] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?), float64] */;
  %127 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %128 = %127.2;
  %129 = cast(%var_4117, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %133 = %117.0;
  %134 = %118.0;
  %135 = maximum(%125, %126) /* ty=Tensor[(675), float64] */;
  %136 = greater(%131, %132) /* ty=Tensor[(14, 2, 2), bool] */;
  (%133, %134, %135, %136)
}

def @func_5184() -> (Tensor[(256), int32],) {
  %139 = fn () -> (Tensor[(256), int32],) {
    %137 = @func_4620() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
    %138 = %137.0;
    (%138,)
  };
  %139() /* ty=(Tensor[(256), int32],) */
}

def @func_5134() -> (Tensor[(672), int64], Tensor[(14, 2, 2), float32]) {
  %140 = @func_4602() /* ty=(Tensor[(14, 12, 4), float64], Tensor[(672), int64], Tensor[(4, 1, 8), bool]) */;
  %141 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %142 = %140.1;
  %143 = %141.0;
  (%142, %143)
}

def @func_1288(%var_1252: int32, %var_1253: Tensor[(8, 4, 8), int32]) -> (Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) {
  %144 = cast(%var_1252, dtype="bool") /* ty=bool */;
  %145 = cast(%var_1253, dtype="bool") /* ty=Tensor[(8, 4, 8), bool] */;
  %146 = less(%144, %145) /* ty=Tensor[(8, 4, 8), bool] */;
  %147 = cast(%var_1252, dtype="int16") /* ty=int16 */;
  %148 = cast(%146, dtype="int16") /* ty=Tensor[(8, 4, 8), int16] */;
  %149 = cast(%var_1253, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %150 = cast(%var_1252, dtype="float32") /* ty=float32 */;
  %151 = reshape(%150, newshape=[]) /* ty=float32 */;
  %152 = @func_992(%151) /* ty=(Tensor[(14, 2, 2), float32],) */;
  %153 = cast(%146, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %154 = sqrt(%153) /* ty=Tensor[(8, 4, 8), float64] */;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(8, 4, 8), float64] */;
  %156 = right_shift(%147, %148) /* ty=Tensor[(8, 4, 8), int16] */;
  %157 = atan(%149) /* ty=Tensor[(8, 4, 8), float64] */;
  %158 = %152.0;
  %159 = asinh(%155) /* ty=Tensor[(8, 4, 8), float64] */;
  (%156, %157, %158, %159)
}

def @func_7965(%var_7963: Tensor[(7, 13, 11), uint16], %var_7964: Tensor[(7, 13, 11), uint16]) -> Tensor[(7, 13, 11), uint16] {
  @func_7961(%var_7963, %var_7964) /* ty=Tensor[(7, 13, 11), uint16] */
}

def @func_5411() -> Tensor[(4, 1, 8), float32] {
  @func_3981() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_5528() -> Tensor[(256), int32] {
  @func_5526() /* ty=Tensor[(256), int32] */
}

def @func_4060() -> Tensor[(256), int32] {
  @func_3182() /* ty=Tensor[(256), int32] */
}

def @func_2879() -> (Tensor[(4, 1, 8), float32],) {
  @func_2877() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_6137() -> (Tensor[(4, 1, 8), float32],) {
  %160 = @func_3328() /* ty=Tensor[(4, 1, 8), float32] */;
  (%160,)
}

def @func_4669(%var_4667: Tensor[(210), float64]) -> (Tensor[(256), int32], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) {
  @func_4666(%var_4667) /* ty=(Tensor[(256), int32], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) */
}

def @func_2073(%var_2047: Tensor[(225, 3), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(225, 3), float64], Tensor[(4, 1, 8), float32]) {
  %161 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %162 = %161.1;
  %163 = cast(%var_2047, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
  %164 = shape_of(%162, dtype="int32") /* ty=Tensor[(2), int32] */;
  %165 = cast(%162, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %167 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %168 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %169 = floor_divide(%165, %166) /* ty=Tensor[(225, 3), float64] */;
  %170 = %167.0;
  (%168, %169, %170)
}

def @func_3010() -> (Tensor[(14, 2, 2), float32],) {
  @func_3008() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_7924(%var_7899: float32) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], float32, Tensor[(1, 15, 13), float64], Tensor[(1, 15, 13), float32]) {
  %171 = @func_5365() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */;
  %172 = cast(%var_7899, dtype="float32") /* ty=float32 */;
  %173 = reshape(%172, newshape=[]) /* ty=float32 */;
  %174 = @func_992(%173) /* ty=(Tensor[(14, 2, 2), float32],) */;
  %175 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 15, 13), float32] */, dtype="float64") /* ty=Tensor[(1, 15, 13), float64] */;
  %176 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 15, 13), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 13), float32] */;
  %177 = atan(%176) /* ty=Tensor[(1, 15, 13), float32] */;
  %178 = cast(%177, dtype="float32") /* ty=Tensor[(1, 15, 13), float32] */;
  %179 = %171.1;
  %180 = %174.0;
  %181 = tan(%175) /* ty=Tensor[(1, 15, 13), float64] */;
  %182 = log10(%178) /* ty=Tensor[(1, 15, 13), float32] */;
  (%179, %180, %var_7899, %181, %182)
}

def @func_6199() -> (Tensor[(4, ?, 8), int16],) {
  %192 = fn () -> (Tensor[(4, ?, 8), int16],) {
    %183 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
    %184 = %183.0;
    %185 = cast(%184, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
    %186 = log10(%185) /* ty=Tensor[(4, 1, 8), float32] */;
    %187 = cast(%186, dtype="int16") /* ty=Tensor[(4, 1, 8), int16] */;
    %188 = shape_of(%184, dtype="int32") /* ty=Tensor[(3), int32] */;
    %189 = cast(%184, dtype="int16") /* ty=Tensor[(4, 1, 8), int16] */;
    %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %191 = logical_xor(%189, %190) /* ty=Tensor[(4, ?, 8), int16] */;
    (%191,)
  };
  %192() /* ty=(Tensor[(4, ?, 8), int16],) */
}

def @func_2358(%var_2269: Tensor[(225, 3), float32]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32], Tensor[(225, 3), bool], Tensor[(4, 1, 8), float32]) {
  %193 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %194 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %195 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %196 = %195.1;
  %197 = cast(%var_2269, dtype="uint32") /* ty=Tensor[(225, 3), uint32] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(2), int32] */;
  %199 = cast(%196, dtype="uint32") /* ty=Tensor[(225, 3), uint32] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %201 = multiply(%199, %200) /* ty=Tensor[(225, 3), uint32] */;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %203 = atan(%202) /* ty=Tensor[(225, 3), float32] */;
  %204 = cast(%203, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %205 = sin(%204) /* ty=Tensor[(225, 3), float32] */;
  %206 = cast(%var_2269, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(2), int32] */;
  %208 = cast(%205, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %210 = cast(%203, dtype="bool") /* ty=Tensor[(225, 3), bool] */;
  %211 = shape_of(%201, dtype="int32") /* ty=Tensor[(2), int32] */;
  %212 = cast(%201, dtype="bool") /* ty=Tensor[(225, 3), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %214 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %215 = %193.0;
  %216 = %194.0;
  %217 = mod(%208, %209) /* ty=Tensor[(225, 3), float32] */;
  %218 = equal(%212, %213) /* ty=Tensor[(225, 3), bool] */;
  %219 = %214.0;
  (%215, %216, %217, %218, %219)
}

def @func_7345() -> (Tensor[(256), int32],) {
  %222 = fn () -> (Tensor[(256), int32],) {
    %220 = @func_5183() /* ty=(Tensor[(256), int32],) */;
    %221 = %220.0;
    (%221,)
  };
  %222() /* ty=(Tensor[(256), int32],) */
}

def @func_8331() -> (Tensor[(14, 2, 2), float32],) {
  %225 = fn () -> (Tensor[(14, 2, 2), float32],) {
    %223 = @func_7143() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %224 = %223.0;
    (%224,)
  };
  %225() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_6008(%var_5998: Tensor[(4, 56), float32]) -> (Tensor[(4, 4, 8), float64], Tensor[(4, 7, 8), bool], Tensor[(4, 56), float32]) {
  %226 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %227 = %226.2;
  %228 = cast(%227, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %229 = cast(%var_5998, dtype="float32") /* ty=Tensor[(4, 56), float32] */;
  %230 = reshape(%229, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %231 = @func_2794(%230) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %232 = acos(%228) /* ty=Tensor[(4, 4, 8), float64] */;
  %233 = %231.0;
  (%232, %233, %var_5998)
}

def @func_4604() -> (Tensor[(14, 12, 4), float64], Tensor[(672), int64], Tensor[(4, 1, 8), bool]) {
  @func_4602() /* ty=(Tensor[(14, 12, 4), float64], Tensor[(672), int64], Tensor[(4, 1, 8), bool]) */
}

def @func_3983() -> Tensor[(4, 1, 8), float32] {
  @func_3981() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_3183() -> Tensor[(256), int32] {
  %235 = fn () -> Tensor[(256), int32] {
    %234 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
    %234.0
  };
  %235() /* ty=Tensor[(256), int32] */
}

def @func_4401(%var_4366: Tensor[(224), float32], %var_4377: Tensor[(675), float64], %var_4378: uint32) -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(4, 1, 8), float32], Tensor[(2, 6, 6), uint32], Tensor[(528), float64], Tensor[(675), float64], uint32, Tensor[(6, 12), uint32], Tensor[(14, 2, 2), float32]) {
  %236 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %237 = cast(%var_4366, dtype="float32") /* ty=Tensor[(224), float32] */;
  %238 = reshape(%237, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %239 = @func_2794(%238) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %240 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %241 = cast(meta[relay.Constant][4] /* ty=Tensor[(528), float64] */, dtype="float64") /* ty=Tensor[(528), float64] */;
  %242 = cast(%var_4377, dtype="float64") /* ty=Tensor[(675), float64] */;
  %243 = cast(%var_4378, dtype="uint32") /* ty=uint32 */;
  %244 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 12), uint32] */, dtype="uint32") /* ty=Tensor[(6, 12), uint32] */;
  %245 = reshape(%241, newshape=[16, 3, 11]) /* ty=Tensor[(16, 3, 11), float64] */;
  %246 = reshape(%242, newshape=[75, 9]) /* ty=Tensor[(75, 9), float64] */;
  %247 = reshape(%243, newshape=[]) /* ty=uint32 */;
  %248 = reshape(%244, newshape=[1, 72]) /* ty=Tensor[(1, 72), uint32] */;
  %249 = @func_3526(%245, %246, %247, %248) /* ty=(Tensor[(15, 15, 3), bool], Tensor[(75, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(6, 7, 15), float32], uint32, Tensor[(5, 126), uint32], Tensor[(16, 3, 11), bool], Tensor[(16, 3, 11), uint16], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(16, 3, 11), bool], Tensor[(2, 6, 6), uint32], Tensor[(1, 72), uint32], Tensor[(16, 3, 11), float32]) */;
  %250 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %251 = @func_4060() /* ty=Tensor[(256), int32] */;
  %252 = %236.0;
  %253 = %239.0;
  %254 = %240.0;
  %255 = %249.15;
  %256 = %250.1;
  (%251, %252, %253, %var_4366, %254, %255, meta[relay.Constant][4] /* ty=Tensor[(528), float64] */, %var_4377, %var_4378, meta[relay.Constant][5] /* ty=Tensor[(6, 12), uint32] */, %256)
}

def @func_2414() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 4, 8), int32]) {
  @func_2412() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 4, 8), int32]) */
}

def @func_4037() -> (Tensor[(4, 1, 8), float32], Tensor[(256), int32]) {
  %261 = fn () -> (Tensor[(4, 1, 8), float32], Tensor[(256), int32]) {
    %257 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
    %258 = @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
    %259 = %257.1;
    %260 = %258.0;
    (%259, %260)
  };
  %261() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */
}

def @func_7551() -> (Tensor[(4, 4, 8), bool], Tensor[(8, 4, 8), float64], int32, Tensor[(256), int32]) {
  %269 = fn () -> (Tensor[(4, 4, 8), bool], Tensor[(8, 4, 8), float64], int32, Tensor[(256), int32]) {
    %262 = cast(2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %263 = cast(meta[relay.Constant][6] /* ty=Tensor[(256), int32] */, dtype="int32") /* ty=Tensor[(256), int32] */;
    %264 = reshape(%262, newshape=[]) /* ty=int32 */;
    %265 = reshape(%263, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), int32] */;
    %266 = @func_1288(%264, %265) /* ty=(Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) */;
    %267 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
    %268 = %266.1;
    (%267, %268, 2 /* ty=int32 */, meta[relay.Constant][6] /* ty=Tensor[(256), int32] */)
  };
  %269() /* ty=(Tensor[(4, 4, 8), bool], Tensor[(8, 4, 8), float64], int32, Tensor[(256), int32]) */
}

def @func_7774(%var_7765: Tensor[(630, 1), uint32], %var_7768: Tensor[(384), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 12, 4), float64], int64, Tensor[(672), int64], Tensor[(14, 2, 2), float32], Tensor[(630, 1), uint32], Tensor[(75, 9), float64], Tensor[(2310), float32], Tensor[(384), float32]) {
  %270 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %271 = %270.2;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %273 = cast(-2 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %274 = cast(meta[relay.Constant][7] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %275 = reshape(%273, newshape=[]) /* ty=int64 */;
  %276 = reshape(%274, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
  %277 = @func_2727(%275, %276) /* ty=(Tensor[(14, 12, 4), float64],) */;
  %278 = cast(%var_7765, dtype="uint32") /* ty=Tensor[(630, 1), uint32] */;
  %279 = cast(meta[relay.Constant][8] /* ty=Tensor[(75, 9), float64] */, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
  %280 = cast(meta[relay.Constant][9] /* ty=Tensor[(2310), float32] */, dtype="float32") /* ty=Tensor[(2310), float32] */;
  %281 = cast(%var_7768, dtype="float32") /* ty=Tensor[(384), float32] */;
  %282 = reshape(%278, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %283 = reshape(%279, newshape=[675]) /* ty=Tensor[(675), float64] */;
  %284 = reshape(%280, newshape=[14, 165]) /* ty=Tensor[(14, 165), float32] */;
  %285 = reshape(%281, newshape=[4, 12, 8]) /* ty=Tensor[(4, 12, 8), float32] */;
  %286 = @func_3832(%282, %283, %284, %285) /* ty=(Tensor[(15, 15, 3), bool], uint32, Tensor[(630), uint32], Tensor[(675), float64], Tensor[(14, 15, 11), float32], Tensor[(14, 165), float32], Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 12, 8), uint32]) */;
  %287 = sinh(%272) /* ty=Tensor[(14, 2, 2), float32] */;
  %288 = %277.0;
  %289 = %286.7;
  (%287, %288, -2 /* ty=int64 */, meta[relay.Constant][7] /* ty=Tensor[(672), int64] */, %289, %var_7765, meta[relay.Constant][8] /* ty=Tensor[(75, 9), float64] */, meta[relay.Constant][9] /* ty=Tensor[(2310), float32] */, %var_7768)
}

def @func_6882() -> Tensor[(4, 1, 8), float32] {
  @func_6880() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_8314() -> (Tensor[(3, ?, 2), int16], Tensor[(3, 1, 2), float64]) {
  %314 = fn () -> (Tensor[(3, ?, 2), int16], Tensor[(3, 1, 2), float64]) {
    %290 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
    %291 = asinh(%290) /* ty=Tensor[(3, 1, 2), float64] */;
    %292 = cast(%291, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
    %293 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %296 = subtract(%294, %295) /* ty=Tensor[(3, ?, 2), float64] */;
    %297 = cast(%296, dtype="int64") /* ty=Tensor[(3, ?, 2), int64] */;
    %298 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int64") /* ty=Tensor[(3, 1, 2), int64] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %301 = bitwise_xor(%299, %300) /* ty=Tensor[(3, ?, 2), int64] */;
    %302 = cast(%301, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
    %303 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%296, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %306 = less_equal(%304, %305) /* ty=Tensor[(3, ?, 2), bool] */;
    %307 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 1, 2), float64] */, dtype="int16") /* ty=Tensor[(3, 1, 2), int16] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%306, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %311 = cast(%291, dtype="float64") /* ty=Tensor[(3, 1, 2), float64] */;
    %312 = minimum(%309, %310) /* ty=Tensor[(3, ?, 2), int16] */;
    %313 = sigmoid(%311) /* ty=Tensor[(3, 1, 2), float64] */;
    (%312, %313)
  };
  %314() /* ty=(Tensor[(3, ?, 2), int16], Tensor[(3, 1, 2), float64]) */
}

def @func_7815(%var_7813: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(672), int64]) {
  @func_7812(%var_7813) /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(672), int64]) */
}

def @func_6096(%var_6094: uint8, %var_6095: Tensor[(8, 3, 3), uint8]) -> (Tensor[(8, 3, 3), uint8], Tensor[(4, 1, 8), float32], Tensor[(256), int32]) {
  @func_6092(%var_6094, %var_6095) /* ty=(Tensor[(8, 3, 3), uint8], Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */
}

def @func_4666(%var_4663: Tensor[(210), float64]) -> (Tensor[(256), int32], Tensor[(6, 5, 7), float64], Tensor[(35), float64], Tensor[(210), float64]) {
  %315 = @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %316 = cast(meta[relay.Constant][11] /* ty=Tensor[(35), float64] */, dtype="float64") /* ty=Tensor[(35), float64] */;
  %317 = cast(%var_4663, dtype="float64") /* ty=Tensor[(210), float64] */;
  %318 = reshape(%316, newshape=[1, 5, 7]) /* ty=Tensor[(1, 5, 7), float64] */;
  %319 = reshape(%317, newshape=[6, 5, 7]) /* ty=Tensor[(6, 5, 7), float64] */;
  %320 = %315.0;
  %321 = @func_1374(%318, %319) /* ty=Tensor[(6, 5, 7), float64] */;
  (%320, %321, meta[relay.Constant][11] /* ty=Tensor[(35), float64] */, %var_4663)
}

def @func_2475() -> (Tensor[(256), int32],) {
  %324 = fn () -> (Tensor[(256), int32],) {
    %322 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
    %323 = %322.0;
    (%323,)
  };
  %324() /* ty=(Tensor[(256), int32],) */
}

def @func_1743(%var_1722: Tensor[(15, 15, 3), bool]) -> (Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32], Tensor[(15, 15, 3), uint8]) {
  %325 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %326 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %327 = %326.1;
  %328 = cast(%var_1722, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %332 = cast(%327, dtype="uint8") /* ty=Tensor[(15, 15, 3), uint8] */;
  %333 = shape_of(%var_1722, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%var_1722, dtype="uint8") /* ty=Tensor[(15, 15, 3), uint8] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %336 = %325.0;
  %337 = floor_mod(%330, %331) /* ty=Tensor[(15, 15, 3), float32] */;
  %338 = multiply(%334, %335) /* ty=Tensor[(15, 15, 3), uint8] */;
  (%336, %337, %338)
}

def @func_1562() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) {
  @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */
}

def @func_4622() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32]) {
  @func_4620() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */
}

def @func_7000() -> (Tensor[(14, 2, 2), float32],) {
  %339 = @func_4620() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
  %340 = %339.1;
  (%340,)
}

def @func_7778(%var_7776: Tensor[(630, 1), uint32], %var_7777: Tensor[(384), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 12, 4), float64], int64, Tensor[(672), int64], Tensor[(14, 2, 2), float32], Tensor[(630, 1), uint32], Tensor[(75, 9), float64], Tensor[(2310), float32], Tensor[(384), float32]) {
  @func_7774(%var_7776, %var_7777) /* ty=(Tensor[(14, 2, 2), float32], Tensor[(14, 12, 4), float64], int64, Tensor[(672), int64], Tensor[(14, 2, 2), float32], Tensor[(630, 1), uint32], Tensor[(75, 9), float64], Tensor[(2310), float32], Tensor[(384), float32]) */
}

def @func_5629() -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) {
  %343 = fn () -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) {
    %341 = @func_4002() /* ty=Tensor[(14, 2, 2), float32] */;
    %342 = @func_5579() /* ty=Tensor[(14, 2, 2), float32] */;
    (%341, %342)
  };
  %343() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */
}

def @func_7316() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32]) {
  %344 = @func_5365() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */;
  %345 = @func_6137() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %346 = %344.1;
  %347 = %345.0;
  (%346, %347)
}

def @func_8172(%var_8171: Tensor[(4, 3, 8), float32]) -> (Tensor[(7, 13, 11), uint16], Tensor[(1001), uint16], Tensor[(4, 3, 8), bool]) {
  %358 = fn (%var_8163: Tensor[(4, 3, 8), float32]) -> (Tensor[(7, 13, 11), uint16], Tensor[(1001), uint16], Tensor[(4, 3, 8), bool]) {
    %348 = cast(meta[relay.Constant][12] /* ty=Tensor[(1001), uint16] */, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
    %349 = cast(meta[relay.Constant][12] /* ty=Tensor[(1001), uint16] */, dtype="uint16") /* ty=Tensor[(1001), uint16] */;
    %350 = reshape(%348, newshape=[7, 13, 11]) /* ty=Tensor[(7, 13, 11), uint16] */;
    %351 = reshape(%349, newshape=[7, 13, 11]) /* ty=Tensor[(7, 13, 11), uint16] */;
    %352 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %353 = %352.0;
    %354 = cast(%353, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
    %355 = cast(%var_8163, dtype="bool") /* ty=Tensor[(4, 3, 8), bool] */;
    %356 = @func_7961(%350, %351) /* ty=Tensor[(7, 13, 11), uint16] */;
    %357 = logical_or(%354, %355) /* ty=Tensor[(4, 3, 8), bool] */;
    (%356, meta[relay.Constant][12] /* ty=Tensor[(1001), uint16] */, %357)
  };
  %358(%var_8171) /* ty=(Tensor[(7, 13, 11), uint16], Tensor[(1001), uint16], Tensor[(4, 3, 8), bool]) */
}

def @func_8385() -> (Tensor[(256), int32], Tensor[(256), int32]) {
  @func_8383() /* ty=(Tensor[(256), int32], Tensor[(256), int32]) */
}

def @func_4883() -> Tensor[(4, 1, 8), float32] {
  %359 = fn () -> Tensor[(4, 1, 8), float32] {
    @func_3981() /* ty=Tensor[(4, 1, 8), float32] */
  };
  %359() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_6518(%var_6517: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), uint16], Tensor[(15, 15, 3), bool]) {
  %369 = fn (%var_6497: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), uint16], Tensor[(15, 15, 3), bool]) {
    %360 = @func_2412() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 4, 8), int32]) */;
    %361 = %360.0;
    %362 = cast(%var_6497, dtype="uint16") /* ty=Tensor[(14, 2, 2), uint16] */;
    %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %364 = cast(%361, dtype="uint16") /* ty=Tensor[(14, 2, 2), uint16] */;
    %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %366 = @func_4834() /* ty=(Tensor[(15, 15, 3), bool],) */;
    %367 = right_shift(%364, %365) /* ty=Tensor[(14, 2, 2), uint16] */;
    %368 = %366.0;
    (%367, %368)
  };
  %369(%var_6517) /* ty=(Tensor[(14, 2, 2), uint16], Tensor[(15, 15, 3), bool]) */
}

def @func_8713(%var_8712: Tensor[(128), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 4, 8), float32], Tensor[(128), float32], Tensor[(14, 2, 2), float32]) {
  %377 = fn (%var_8701: Tensor[(128), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 4, 8), float32], Tensor[(128), float32], Tensor[(14, 2, 2), float32]) {
    %370 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %371 = cast(%var_8701, dtype="float32") /* ty=Tensor[(128), float32] */;
    %372 = reshape(%371, newshape=[4, 4, 8]) /* ty=Tensor[(4, 4, 8), float32] */;
    %373 = %370.0;
    %374 = @func_7020() /* ty=Tensor[(256), int32] */;
    %375 = @func_4727(%372) /* ty=Tensor[(4, 4, 8), float32] */;
    %376 = @func_5579() /* ty=Tensor[(14, 2, 2), float32] */;
    (%373, %374, %375, %var_8701, %376)
  };
  %377(%var_8712) /* ty=(Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 4, 8), float32], Tensor[(128), float32], Tensor[(14, 2, 2), float32]) */
}

def @func_5580() -> Tensor[(14, 2, 2), float32] {
  %379 = fn () -> Tensor[(14, 2, 2), float32] {
    %378 = @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */;
    %378.1
  };
  %379() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_1102(%var_1100: Tensor[(15, 15, 3), float64], %var_1101: Tensor[(15, 15, 3), float64]) -> Tensor[(15, 15, 3), bool] {
  @func_1098(%var_1100, %var_1101) /* ty=Tensor[(15, 15, 3), bool] */
}

def @func_1984() -> Tensor[(14, 2, 2), float32] {
  @func_1982() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_4202() -> Tensor[(14, 2, 2), float32] {
  %380 = fn () -> Tensor[(14, 2, 2), float32] {
    @func_4002() /* ty=Tensor[(14, 2, 2), float32] */
  };
  %380() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_4631() -> (Tensor[(14, 2, 2), float32],) {
  @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_5707() -> (Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) {
  @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */
}

def @func_1793() -> (Tensor[(4, 1, 8), float32],) {
  %383 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %381 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %382 = %381.0;
    (%382,)
  };
  %383() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_2862(%var_2859: uint32, %var_2860: Tensor[(6, 7, 15), uint32], %var_2861: Tensor[(15, 45), float64]) -> (Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) {
  @func_2857(%var_2859, %var_2860, %var_2861) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */
}

def @func_4330(%var_4328: Tensor[(15, 5, 16), uint32], %var_4329: Tensor[(15, 5, 16), uint32]) -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) {
  @func_4326(%var_4328, %var_4329) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) */
}

def @func_5863(%var_5857: Tensor[(10, 4, 5), uint16]) -> (Tensor[(10, 4, 5), uint16],) {
  %384 = cast(%var_5857, dtype="uint16") /* ty=Tensor[(10, 4, 5), uint16] */;
  %385 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(10, 4, 5), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 4, 5), uint16] */, dtype="uint16") /* ty=Tensor[(10, 4, 5), uint16] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %388 = left_shift(%386, %387) /* ty=Tensor[(10, 4, 5), uint16] */;
  (%388,)
}

def @func_6092(%var_6066: uint8, %var_6067: Tensor[(8, 3, 3), uint8]) -> (Tensor[(8, 3, 3), uint8], Tensor[(4, 1, 8), float32], Tensor[(256), int32]) {
  %389 = cast(%var_6066, dtype="uint8") /* ty=uint8 */;
  %390 = cast(%var_6067, dtype="uint8") /* ty=Tensor[(8, 3, 3), uint8] */;
  %391 = @func_1792() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %392 = subtract(%389, %390) /* ty=Tensor[(8, 3, 3), uint8] */;
  %393 = %391.0;
  %394 = @func_4564() /* ty=Tensor[(256), int32] */;
  (%392, %393, %394)
}

def @func_1831() -> (Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) {
  @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */
}

def @func_2210() -> Tensor[(4, 4, 8), bool] {
  %395 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %396 = %395.0;
  %397 = cast(%396, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %398 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 4, 8), float32] */, dtype="bool") /* ty=Tensor[(4, 4, 8), bool] */;
  less_equal(%397, %398) /* ty=Tensor[(4, 4, 8), bool] */
}

def @func_6564(%var_6562: Tensor[(4, 9, 12), int16]) -> Tensor[(4, 9, 12), int16] {
  @func_6561(%var_6562) /* ty=Tensor[(4, 9, 12), int16] */
}

def @func_6880() -> Tensor[(4, 1, 8), float32] {
  %399 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %399.0
}

def @func_3643(%var_3636: Tensor[(14, 15, 11), float32]) -> Tensor[(14, 15, 11), float32] {
  %400 = cast(%var_3636, dtype="float32") /* ty=Tensor[(14, 15, 11), float32] */;
  asin(%400) /* ty=Tensor[(14, 15, 11), float32] */
}

def @func_8522(%var_8521: Tensor[(1200), uint32]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(1200), uint32], Tensor[(4, 1, 8), float32]) {
  %410 = fn (%var_8496: Tensor[(1200), uint32]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(1200), uint32], Tensor[(4, 1, 8), float32]) {
    %401 = @func_6137() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %402 = cast(%var_8496, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
    %403 = cast(%var_8496, dtype="uint32") /* ty=Tensor[(1200), uint32] */;
    %404 = reshape(%402, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
    %405 = reshape(%403, newshape=[15, 5, 16]) /* ty=Tensor[(15, 5, 16), uint32] */;
    %406 = @func_4326(%404, %405) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) */;
    %407 = %401.0;
    %408 = %406.2;
    %409 = @func_4882() /* ty=Tensor[(4, 1, 8), float32] */;
    (%407, %408, %var_8496, %409)
  };
  %410(%var_8521) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(1200), uint32], Tensor[(4, 1, 8), float32]) */
}

def @func_6324() -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) {
  @func_6322() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */
}

def @func_6027() -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), float32]) {
  %411 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %412 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %413 = @func_3222() /* ty=(Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) */;
  %414 = %413.0;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(4, 4, 8), float32] */;
  %416 = %411.1;
  %417 = %412.0;
  %418 = atanh(%415) /* ty=Tensor[(4, 4, 8), float32] */;
  (%416, %417, %418)
}

def @func_6561(%var_6557: Tensor[(4, 9, 12), int16]) -> Tensor[(4, 9, 12), int16] {
  %419 = cast(meta[relay.Constant][15] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %420 = cast(%var_6557, dtype="int16") /* ty=Tensor[(4, 9, 12), int16] */;
  add(%419, %420) /* ty=Tensor[(4, 9, 12), int16] */
}

def @func_5413() -> Tensor[(4, 1, 8), float32] {
  @func_5411() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_5510() -> (Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32]) {
  %429 = fn () -> (Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32]) {
    %421 = @func_4834() /* ty=(Tensor[(15, 15, 3), bool],) */;
    %422 = %421.0;
    %423 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 15, 3), bool] */, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
    %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
    %425 = cast(%422, dtype="float32") /* ty=Tensor[(15, 15, 3), float32] */;
    %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %427 = @func_5411() /* ty=Tensor[(4, 1, 8), float32] */;
    %428 = subtract(%425, %426) /* ty=Tensor[(15, 15, 3), float32] */;
    (%427, %428)
  };
  %429() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32]) */
}

def @func_8257() -> (Tensor[(14, 2, 2), float32],) {
  %432 = fn () -> (Tensor[(14, 2, 2), float32],) {
    %430 = @func_5134() /* ty=(Tensor[(672), int64], Tensor[(14, 2, 2), float32]) */;
    %431 = %430.1;
    (%431,)
  };
  %432() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_2247() -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) {
  %441 = fn () -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) {
    %433 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
    %434 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %435 = %434.0;
    %436 = cast(%435, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
    %437 = rsqrt(%436) /* ty=Tensor[(4, 1, 8), float64] */;
    %438 = cast(%437, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
    %439 = %433.0;
    %440 = sinh(%438) /* ty=Tensor[(4, 1, 8), float32] */;
    (%439, %440)
  };
  %441() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */
}

def @func_3223() -> (Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) {
  %453 = fn () -> (Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) {
    %442 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
    %443 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 4, 8), bool] */, dtype="int64") /* ty=Tensor[(4, 4, 8), int64] */;
    %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
    %445 = cast(%442, dtype="int64") /* ty=Tensor[(4, 4, 8), int64] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %447 = cast(meta[relay.Constant][18] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
    %448 = cast(meta[relay.Constant][18] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
    %449 = reshape(%447, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %450 = reshape(%448, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %451 = bitwise_and(%445, %446) /* ty=Tensor[(4, 4, 8), int64] */;
    %452 = @func_1098(%449, %450) /* ty=Tensor[(15, 15, 3), bool] */;
    (%451, %452, meta[relay.Constant][18] /* ty=Tensor[(675), float64] */)
  };
  %453() /* ty=(Tensor[(4, 4, 8), int64], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) */
}

def @func_4054() -> (Tensor[(4, 1, 8), float32],) {
  %455 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %454 = @func_2456() /* ty=Tensor[(4, 1, 8), float32] */;
    (%454,)
  };
  %455() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_8582() -> (Tensor[(4, 1, 8), float32], Tensor[(16, 10, 11), float64], Tensor[(1760), float64]) {
  %456 = cast(meta[relay.Constant][19] /* ty=Tensor[(1760), float64] */, dtype="float64") /* ty=Tensor[(1760), float64] */;
  %457 = reshape(%456, newshape=[16, 10, 11]) /* ty=Tensor[(16, 10, 11), float64] */;
  %458 = @func_3328() /* ty=Tensor[(4, 1, 8), float32] */;
  %459 = @func_3339(%457) /* ty=Tensor[(16, 10, 11), float64] */;
  (%458, %459, meta[relay.Constant][19] /* ty=Tensor[(1760), float64] */)
}

def @func_1982() -> Tensor[(14, 2, 2), float32] {
  %460 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %460.2
}

def @func_8383() -> (Tensor[(256), int32], Tensor[(256), int32]) {
  %461 = @func_5526() /* ty=Tensor[(256), int32] */;
  %462 = @func_4564() /* ty=Tensor[(256), int32] */;
  (%461, %462)
}

def @func_4133(%var_4131: Tensor[(14, 2, 2), float32]) -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(675), float64], Tensor[(14, 2, 2), bool]) {
  @func_4130(%var_4131) /* ty=(Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(675), float64], Tensor[(14, 2, 2), bool]) */
}

def @func_4066() -> Tensor[(14, 2, 2), float32] {
  %464 = fn () -> Tensor[(14, 2, 2), float32] {
    %463 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
    %463.2
  };
  %464() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_3646(%var_3644: Tensor[(14, 15, 11), float32]) -> Tensor[(14, 15, 11), float32] {
  @func_3643(%var_3644) /* ty=Tensor[(14, 15, 11), float32] */
}

def @func_7062() -> (Tensor[(4, 2, 8), float64], Tensor[(2, 6, 6), uint32], Tensor[(72), uint32]) {
  %465 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(4, 1, 8), float64] */;
  %467 = cast(meta[relay.Constant][20] /* ty=Tensor[(4, 2, 8), float32] */, dtype="float64") /* ty=Tensor[(4, 2, 8), float64] */;
  %468 = cast(meta[relay.Constant][21] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %469 = cast(meta[relay.Constant][21] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %470 = reshape(%468, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
  %471 = reshape(%469, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
  %472 = @func_3084(%470, %471) /* ty=(Tensor[(2, 6, 6), uint32],) */;
  %473 = mod(%466, %467) /* ty=Tensor[(4, 2, 8), float64] */;
  %474 = %472.0;
  (%473, %474, meta[relay.Constant][21] /* ty=Tensor[(72), uint32] */)
}

def @func_5526() -> Tensor[(256), int32] {
  %475 = @func_5183() /* ty=(Tensor[(256), int32],) */;
  %475.0
}

def @func_2109() -> Tensor[(4, 1, 8), float32] {
  @func_2107() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_8000() -> (Tensor[(256), int32],) {
  %476 = @func_7020() /* ty=Tensor[(256), int32] */;
  (%476,)
}

def @func_7190() -> (Tensor[(14, 2, 2), float32],) {
  %478 = fn () -> (Tensor[(14, 2, 2), float32],) {
    %477 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
    (%477,)
  };
  %478() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_6064(%var_6062: Tensor[(4, 5, 8), float32]) -> Tensor[(4, 5, 8), bool] {
  @func_6061(%var_6062) /* ty=Tensor[(4, 5, 8), bool] */
}

def @func_2877() -> (Tensor[(4, 1, 8), float32],) {
  %479 = @func_1915() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %480 = %479.0;
  (%480,)
}

def @func_7812(%var_7799: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(672), int64]) {
  %481 = @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */;
  %482 = %481.0;
  %483 = cast(%var_7799, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %487 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %488 = @func_5134() /* ty=(Tensor[(672), int64], Tensor[(14, 2, 2), float32]) */;
  %489 = power(%485, %486) /* ty=Tensor[(14, 2, 2), float32] */;
  %490 = %487.0;
  %491 = %488.0;
  (%489, %490, %491)
}

def @func_3087(%var_3085: Tensor[(2, 6, 6), uint32], %var_3086: Tensor[(2, 6, 6), uint32]) -> (Tensor[(2, 6, 6), uint32],) {
  %497 = fn (%var_3062: Tensor[(2, 6, 6), uint32], %var_3063: Tensor[(2, 6, 6), uint32]) -> (Tensor[(2, 6, 6), uint32],) {
    %492 = cast(%var_3063, dtype="uint32") /* ty=Tensor[(2, 6, 6), uint32] */;
    %493 = shape_of(%var_3062, dtype="int32") /* ty=Tensor[(3), int32] */;
    %494 = cast(%var_3062, dtype="uint32") /* ty=Tensor[(2, 6, 6), uint32] */;
    %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %496 = minimum(%494, %495) /* ty=Tensor[(2, 6, 6), uint32] */;
    (%496,)
  };
  %497(%var_3085, %var_3086) /* ty=(Tensor[(2, 6, 6), uint32],) */
}

def @func_4002() -> Tensor[(14, 2, 2), float32] {
  %498 = @func_2185() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) */;
  %499 = %498.1;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
  asin(%500) /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_1895() -> Tensor[(14, 2, 2), float32] {
  %501 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %501.2
}

def @func_1625() -> (Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) {
  %513 = fn () -> (Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) {
    %502 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
    %503 = cast(meta[relay.Constant][22] /* ty=Tensor[(225, 3), float64] */, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
    %504 = cast(meta[relay.Constant][22] /* ty=Tensor[(225, 3), float64] */, dtype="float64") /* ty=Tensor[(225, 3), float64] */;
    %505 = reshape(%503, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %506 = reshape(%504, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %507 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
    %508 = cast(meta[relay.Constant][22] /* ty=Tensor[(225, 3), float64] */, dtype="float32") /* ty=Tensor[(225, 3), float32] */;
    %509 = %502.3;
    %510 = @func_1098(%505, %506) /* ty=Tensor[(15, 15, 3), bool] */;
    %511 = %507.1;
    %512 = asin(%508) /* ty=Tensor[(225, 3), float32] */;
    (%509, %510, %511, %512)
  };
  %513() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */
}

def @func_6130(%var_6129: int64) -> (Tensor[(256), int32], Tensor[(14, 12, 4), float64], Tensor[(672), int8]) {
  %525 = fn (%var_6106: int64) -> (Tensor[(256), int32], Tensor[(14, 12, 4), float64], Tensor[(672), int8]) {
    %514 = @func_2474() /* ty=(Tensor[(256), int32],) */;
    %515 = cast(%var_6106, dtype="int64") /* ty=int64 */;
    %516 = cast(meta[relay.Constant][23] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
    %517 = reshape(%515, newshape=[]) /* ty=int64 */;
    %518 = reshape(%516, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
    %519 = @func_2727(%517, %518) /* ty=(Tensor[(14, 12, 4), float64],) */;
    %520 = cast(meta[relay.Constant][23] /* ty=Tensor[(672), int64] */, dtype="int8") /* ty=Tensor[(672), int8] */;
    %521 = cast(%var_6106, dtype="int8") /* ty=int8 */;
    %522 = %514.0;
    %523 = %519.0;
    %524 = bitwise_xor(%520, %521) /* ty=Tensor[(672), int8] */;
    (%522, %523, %524)
  };
  %525(%var_6129) /* ty=(Tensor[(256), int32], Tensor[(14, 12, 4), float64], Tensor[(672), int8]) */
}

def @func_8533() -> (Tensor[(4, 13, 8), float32], Tensor[(256), int32]) {
  %526 = @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %527 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %528 = %526.0;
  %529 = %527.0;
  (%528, %529)
}

def @func_5567() -> Tensor[(4, 4, 8), uint8] {
  %531 = fn () -> Tensor[(4, 4, 8), uint8] {
    %530 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
    %530.2
  };
  %531() /* ty=Tensor[(4, 4, 8), uint8] */
}

def @func_1377(%var_1375: Tensor[(1, 5, 7), float64], %var_1376: Tensor[(6, 5, 7), float64]) -> Tensor[(6, 5, 7), float64] {
  %534 = fn (%var_1366: Tensor[(1, 5, 7), float64], %var_1367: Tensor[(6, 5, 7), float64]) -> Tensor[(6, 5, 7), float64] {
    %532 = cast(%var_1366, dtype="float64") /* ty=Tensor[(1, 5, 7), float64] */;
    %533 = cast(%var_1367, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
    floor_mod(%532, %533) /* ty=Tensor[(6, 5, 7), float64] */
  };
  %534(%var_1375, %var_1376) /* ty=Tensor[(6, 5, 7), float64] */
}

def @func_4764() -> (Tensor[(14, 2, 2), uint64],) {
  %535 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %536 = %535.0;
  %537 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 2, 2), float32] */, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(3), int32] */;
  %539 = cast(%536, dtype="uint64") /* ty=Tensor[(14, 2, 2), uint64] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %541 = bitwise_and(%539, %540) /* ty=Tensor[(14, 2, 2), uint64] */;
  (%541,)
}

def @func_4620() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32]) {
  %542 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %543 = @func_4060() /* ty=Tensor[(256), int32] */;
  %544 = %542.1;
  (%543, %544)
}

def @func_7020() -> Tensor[(256), int32] {
  %545 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
  %545.0
}

def @func_3981() -> Tensor[(4, 1, 8), float32] {
  %546 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %546.0
}

def @func_2412() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 4, 8), int32]) {
  %547 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %548 = %547.0;
  %549 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %550 = cast(%548, dtype="int32") /* ty=Tensor[(4, 1, 8), int32] */;
  %551 = cast(%549, dtype="int32") /* ty=Tensor[(4, 4, 8), int32] */;
  %552 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  %553 = maximum(%550, %551) /* ty=Tensor[(4, 4, 8), int32] */;
  (%552, %553)
}

def @main() -> (Tensor[(4, 4, 8), float64],) {
  %554 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(4, 4, 8), float64] */;
  %556 = erf(%555) /* ty=Tensor[(4, 4, 8), float64] */;
  (%556,)
}

def @func_7961(%var_7934: Tensor[(7, 13, 11), uint16], %var_7935: Tensor[(7, 13, 11), uint16]) -> Tensor[(7, 13, 11), uint16] {
  %557 = cast(%var_7935, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
  %558 = shape_of(%var_7934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%var_7934, dtype="uint16") /* ty=Tensor[(7, 13, 11), uint16] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  maximum(%559, %560) /* ty=Tensor[(7, 13, 11), uint16] */
}

def @func_4730(%var_4728: Tensor[(4, 4, 8), float32]) -> Tensor[(4, 4, 8), float32] {
  @func_4727(%var_4728) /* ty=Tensor[(4, 4, 8), float32] */
}

def @func_4766() -> (Tensor[(14, 2, 2), uint64],) {
  @func_4764() /* ty=(Tensor[(14, 2, 2), uint64],) */
}

def @func_6061(%var_6051: Tensor[(4, 5, 8), float32]) -> Tensor[(4, 5, 8), bool] {
  %561 = @func_5705() /* ty=(Tensor[(4, 13, 8), float32], Tensor[(4, 1, 8), float32]) */;
  %562 = %561.1;
  %563 = cast(%562, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %564 = cast(%var_6051, dtype="bool") /* ty=Tensor[(4, 5, 8), bool] */;
  less(%563, %564) /* ty=Tensor[(4, 5, 8), bool] */
}

def @func_6951(%var_6942: Tensor[(12, 3, 14), float64]) -> (Tensor[(12, 3, 14), int8], Tensor[(4, 1, 8), float32]) {
  %565 = cast(%var_6942, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %566 = cos(%565) /* ty=Tensor[(12, 3, 14), float64] */;
  %567 = cast(%var_6942, dtype="int8") /* ty=Tensor[(12, 3, 14), int8] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%566, dtype="int8") /* ty=Tensor[(12, 3, 14), int8] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %571 = @func_5365() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */;
  %572 = bitwise_and(%569, %570) /* ty=Tensor[(12, 3, 14), int8] */;
  %573 = %571.0;
  (%572, %573)
}

def @func_4602() -> (Tensor[(14, 12, 4), float64], Tensor[(672), int64], Tensor[(4, 1, 8), bool]) {
  %574 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %575 = cast(meta[relay.Constant][25] /* ty=Tensor[(672), int64] */, dtype="int64") /* ty=Tensor[(672), int64] */;
  %576 = reshape(%574, newshape=[]) /* ty=int64 */;
  %577 = reshape(%575, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
  %578 = @func_2727(%576, %577) /* ty=(Tensor[(14, 12, 4), float64],) */;
  %579 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
  %580 = %579.0;
  %581 = cast(%580, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %582 = acos(%581) /* ty=Tensor[(4, 1, 8), float32] */;
  %583 = cast(%582, dtype="bool") /* ty=Tensor[(4, 1, 8), bool] */;
  %584 = cast(4 /* ty=int64 */, dtype="bool") /* ty=bool */;
  %585 = %578.0;
  %586 = logical_or(%583, %584) /* ty=Tensor[(4, 1, 8), bool] */;
  (%585, meta[relay.Constant][25] /* ty=Tensor[(672), int64] */, %586)
}

def @func_8584() -> (Tensor[(4, 1, 8), float32], Tensor[(16, 10, 11), float64], Tensor[(1760), float64]) {
  @func_8582() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(16, 10, 11), float64], Tensor[(1760), float64]) */
}

def @func_6011(%var_6009: Tensor[(4, 56), float32]) -> (Tensor[(4, 4, 8), float64], Tensor[(4, 7, 8), bool], Tensor[(4, 56), float32]) {
  @func_6008(%var_6009) /* ty=(Tensor[(4, 4, 8), float64], Tensor[(4, 7, 8), bool], Tensor[(4, 56), float32]) */
}

def @func_8723() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) {
  %590 = fn () -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) {
    %587 = @func_4629() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %588 = @func_5411() /* ty=Tensor[(4, 1, 8), float32] */;
    %589 = %587.0;
    (%588, %589)
  };
  %590() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32]) */
}

def @func_7511() -> (Tensor[(256), int32], Tensor[(4, 7, 8), bool], Tensor[(224), float32]) {
  @func_7509() /* ty=(Tensor[(256), int32], Tensor[(4, 7, 8), bool], Tensor[(224), float32]) */
}

def @func_3329() -> Tensor[(4, 1, 8), float32] {
  %592 = fn () -> Tensor[(4, 1, 8), float32] {
    %591 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %591.0
  };
  %592() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_3153() -> (Tensor[(256), int32], Tensor[(14, 2, 2), float32]) {
  @func_3151() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32]) */
}

def @func_1098(%var_1090: Tensor[(15, 15, 3), float64], %var_1091: Tensor[(15, 15, 3), float64]) -> Tensor[(15, 15, 3), bool] {
  %593 = cast(%var_1091, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %594 = shape_of(%var_1090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%var_1090, dtype="bool") /* ty=Tensor[(15, 15, 3), bool] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%595, %596) /* ty=Tensor[(15, 15, 3), bool] */
}

def @func_4892() -> Tensor[(4, 1, 8), float32] {
  @func_3328() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_4004() -> Tensor[(14, 2, 2), float32] {
  @func_4002() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_7144() -> (Tensor[(14, 2, 2), float32],) {
  %599 = fn () -> (Tensor[(14, 2, 2), float32],) {
    %597 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
    %598 = %597.2;
    (%598,)
  };
  %599() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_4727(%var_4720: Tensor[(4, 4, 8), float32]) -> Tensor[(4, 4, 8), float32] {
  %600 = @func_2877() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %601 = %600.0;
  %602 = cast(%601, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %603 = cast(%var_4720, dtype="float32") /* ty=Tensor[(4, 4, 8), float32] */;
  power(%602, %603) /* ty=Tensor[(4, 4, 8), float32] */
}

def @func_5068(%var_5066: Tensor[(1, 16, 4), float32], %var_5067: uint32) -> (Tensor[(16, 16, 4), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(15, 45), float64], uint32, Tensor[(630), uint32], Tensor[(675), float64]) {
  %619 = fn (%var_5024: Tensor[(1, 16, 4), float32], %var_5057: uint32) -> (Tensor[(16, 16, 4), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(15, 45), float64], uint32, Tensor[(630), uint32], Tensor[(675), float64]) {
    %604 = cast(%var_5024, dtype="float32") /* ty=Tensor[(1, 16, 4), float32] */;
    %605 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 16, 4), float32] */, dtype="float32") /* ty=Tensor[(16, 16, 4), float32] */;
    %606 = cast(meta[relay.Constant][27] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %607 = reshape(%606, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
    %608 = @func_2794(%607) /* ty=(Tensor[(4, 7, 8), bool],) */;
    %609 = cast(%var_5057, dtype="uint32") /* ty=uint32 */;
    %610 = cast(meta[relay.Constant][28] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %611 = cast(meta[relay.Constant][29] /* ty=Tensor[(675), float64] */, dtype="float64") /* ty=Tensor[(675), float64] */;
    %612 = reshape(%609, newshape=[]) /* ty=uint32 */;
    %613 = reshape(%610, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
    %614 = reshape(%611, newshape=[15, 45]) /* ty=Tensor[(15, 45), float64] */;
    %615 = @func_2857(%612, %613, %614) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */;
    %616 = power(%604, %605) /* ty=Tensor[(16, 16, 4), float32] */;
    %617 = %608.0;
    %618 = %615.4;
    (%616, %617, meta[relay.Constant][27] /* ty=Tensor[(224), float32] */, %618, %var_5057, meta[relay.Constant][28] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][29] /* ty=Tensor[(675), float64] */)
  };
  %619(%var_5066, %var_5067) /* ty=(Tensor[(16, 16, 4), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(15, 45), float64], uint32, Tensor[(630), uint32], Tensor[(675), float64]) */
}

def @func_3531(%var_3527: Tensor[(16, 3, 11), float64], %var_3528: Tensor[(75, 9), float64], %var_3529: uint32, %var_3530: Tensor[(1, 72), uint32]) -> (Tensor[(15, 15, 3), bool], Tensor[(75, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(6, 7, 15), float32], uint32, Tensor[(5, 126), uint32], Tensor[(16, 3, 11), bool], Tensor[(16, 3, 11), uint16], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(16, 3, 11), bool], Tensor[(2, 6, 6), uint32], Tensor[(1, 72), uint32], Tensor[(16, 3, 11), float32]) {
  %678 = fn (%var_3408: Tensor[(16, 3, 11), float64], %var_3417: Tensor[(75, 9), float64], %var_3434: uint32, %var_3519: Tensor[(1, 72), uint32]) -> (Tensor[(15, 15, 3), bool], Tensor[(75, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(6, 7, 15), float32], uint32, Tensor[(5, 126), uint32], Tensor[(16, 3, 11), bool], Tensor[(16, 3, 11), uint16], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(16, 3, 11), bool], Tensor[(2, 6, 6), uint32], Tensor[(1, 72), uint32], Tensor[(16, 3, 11), float32]) {
    %620 = cast(%var_3417, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
    %621 = cast(%var_3417, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
    %622 = reshape(%620, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %623 = reshape(%621, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %624 = cast(%var_3434, dtype="uint32") /* ty=uint32 */;
    %625 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 126), uint32] */, dtype="uint32") /* ty=Tensor[(5, 126), uint32] */;
    %626 = @func_1098(%622, %623) /* ty=Tensor[(15, 15, 3), bool] */;
    %627 = cast(%626, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
    %628 = reshape(%624, newshape=[]) /* ty=uint32 */;
    %629 = reshape(%625, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
    %630 = reshape(%627, newshape=[15, 45]) /* ty=Tensor[(15, 45), float64] */;
    %631 = @func_2857(%628, %629, %630) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */;
    %632 = cast(%var_3408, dtype="float64") /* ty=Tensor[(16, 3, 11), float64] */;
    %633 = erf(%632) /* ty=Tensor[(16, 3, 11), float64] */;
    %634 = cast(%633, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
    %635 = acos(%634) /* ty=Tensor[(16, 3, 11), float32] */;
    %636 = cast(%633, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
    %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(3), int32] */;
    %638 = cast(%635, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
    %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %640 = cast(%var_3408, dtype="uint16") /* ty=Tensor[(16, 3, 11), uint16] */;
    %641 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%633, dtype="uint16") /* ty=Tensor[(16, 3, 11), uint16] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %644 = cast(%var_3417, dtype="float64") /* ty=Tensor[(75, 9), float64] */;
    %645 = cast(%626, dtype="float64") /* ty=Tensor[(15, 15, 3), float64] */;
    %646 = reshape(%644, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %647 = reshape(%645, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %648 = @func_3008() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %649 = cast(meta[relay.Constant][31] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %650 = reshape(%649, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
    %651 = @func_2794(%650) /* ty=(Tensor[(4, 7, 8), bool],) */;
    %652 = cast(%635, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
    %653 = cosh(%652) /* ty=Tensor[(16, 3, 11), float32] */;
    %654 = cast(%653, dtype="float64") /* ty=Tensor[(16, 3, 11), float64] */;
    %655 = tan(%654) /* ty=Tensor[(16, 3, 11), float64] */;
    %656 = cast(%655, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
    %657 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%653, dtype="bool") /* ty=Tensor[(16, 3, 11), bool] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %660 = cast(%var_3519, dtype="uint32") /* ty=Tensor[(1, 72), uint32] */;
    %661 = cast(%var_3519, dtype="uint32") /* ty=Tensor[(1, 72), uint32] */;
    %662 = reshape(%660, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
    %663 = reshape(%661, newshape=[2, 6, 6]) /* ty=Tensor[(2, 6, 6), uint32] */;
    %664 = @func_3084(%662, %663) /* ty=(Tensor[(2, 6, 6), uint32],) */;
    %665 = cast(%655, dtype="float32") /* ty=Tensor[(16, 3, 11), float32] */;
    %666 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
    %667 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
    %668 = %631.0;
    %669 = less(%638, %639) /* ty=Tensor[(16, 3, 11), bool] */;
    %670 = add(%642, %643) /* ty=Tensor[(16, 3, 11), uint16] */;
    %671 = @func_1098(%646, %647) /* ty=Tensor[(15, 15, 3), bool] */;
    %672 = %648.0;
    %673 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
    %674 = %651.0;
    %675 = logical_and(%658, %659) /* ty=Tensor[(16, 3, 11), bool] */;
    %676 = %664.0;
    %677 = sigmoid(%665) /* ty=Tensor[(16, 3, 11), float32] */;
    (%626, %var_3417, %666, %667, %668, %var_3434, meta[relay.Constant][30] /* ty=Tensor[(5, 126), uint32] */, %669, %670, %671, %672, %673, %674, meta[relay.Constant][31] /* ty=Tensor[(224), float32] */, %675, %676, %var_3519, %677)
  };
  %678(%var_3527, %var_3528, %var_3529, %var_3530) /* ty=(Tensor[(15, 15, 3), bool], Tensor[(75, 9), float64], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(6, 7, 15), float32], uint32, Tensor[(5, 126), uint32], Tensor[(16, 3, 11), bool], Tensor[(16, 3, 11), uint16], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(16, 3, 11), bool], Tensor[(2, 6, 6), uint32], Tensor[(1, 72), uint32], Tensor[(16, 3, 11), float32]) */
}

def @func_3008() -> (Tensor[(14, 2, 2), float32],) {
  %679 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  (%679,)
}

def @func_4188(%var_4186: Tensor[(5, 9, 12), float64], %var_4187: Tensor[(5, 9, 12), float64]) -> (Tensor[(5, 9, 12), float64],) {
  %685 = fn (%var_4174: Tensor[(5, 9, 12), float64], %var_4175: Tensor[(5, 9, 12), float64]) -> (Tensor[(5, 9, 12), float64],) {
    %680 = cast(%var_4175, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
    %681 = shape_of(%var_4174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %682 = cast(%var_4174, dtype="float64") /* ty=Tensor[(5, 9, 12), float64] */;
    %683 = dyn.reshape(%680, %681, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %684 = divide(%682, %683) /* ty=Tensor[(5, 9, 12), float64] */;
    (%684,)
  };
  %685(%var_4186, %var_4187) /* ty=(Tensor[(5, 9, 12), float64],) */
}

def @func_4406(%var_4403: Tensor[(224), float32], %var_4404: Tensor[(675), float64], %var_4405: uint32) -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(4, 1, 8), float32], Tensor[(2, 6, 6), uint32], Tensor[(528), float64], Tensor[(675), float64], uint32, Tensor[(6, 12), uint32], Tensor[(14, 2, 2), float32]) {
  @func_4401(%var_4403, %var_4404, %var_4405) /* ty=(Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 7, 8), bool], Tensor[(224), float32], Tensor[(4, 1, 8), float32], Tensor[(2, 6, 6), uint32], Tensor[(528), float64], Tensor[(675), float64], uint32, Tensor[(6, 12), uint32], Tensor[(14, 2, 2), float32]) */
}

def @func_4853() -> (Tensor[(4, 1, 8), float32],) {
  %690 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %686 = @func_2246() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) */;
    %687 = %686.0;
    %688 = cast(%687, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
    %689 = exp(%688) /* ty=Tensor[(4, 1, 8), float32] */;
    (%689,)
  };
  %690() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_7705() -> Tensor[(4, 1, 8), float32] {
  @func_7703() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_8002() -> (Tensor[(256), int32],) {
  @func_8000() /* ty=(Tensor[(256), int32],) */
}

def @func_2857(%var_2814: uint32, %var_2815: Tensor[(6, 7, 15), uint32], %var_2841: Tensor[(15, 45), float64]) -> (Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) {
  %691 = cast(%var_2814, dtype="bool") /* ty=bool */;
  %692 = cast(%var_2815, dtype="bool") /* ty=Tensor[(6, 7, 15), bool] */;
  %693 = less(%691, %692) /* ty=Tensor[(6, 7, 15), bool] */;
  %694 = cast(%693, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %695 = shape_of(%var_2815, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%var_2815, dtype="float32") /* ty=Tensor[(6, 7, 15), float32] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %698 = @func_2107() /* ty=Tensor[(4, 1, 8), float32] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %700 = cast(%var_2814, dtype="float32") /* ty=float32 */;
  %701 = cast(%var_2841, dtype="float64") /* ty=Tensor[(15, 45), float64] */;
  %702 = cast(%var_2841, dtype="float64") /* ty=Tensor[(15, 45), float64] */;
  %703 = reshape(%701, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %704 = reshape(%702, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
  %705 = floor_divide(%696, %697) /* ty=Tensor[(6, 7, 15), float32] */;
  %706 = @func_2210() /* ty=Tensor[(4, 4, 8), bool] */;
  %707 = mod(%699, %700) /* ty=Tensor[(4, 1, 8), float32] */;
  %708 = @func_1098(%703, %704) /* ty=Tensor[(15, 15, 3), bool] */;
  %709 = @func_1982() /* ty=Tensor[(14, 2, 2), float32] */;
  (%705, %706, %707, %708, %var_2841, %709)
}

def @func_4894() -> Tensor[(4, 1, 8), float32] {
  @func_4892() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_1746(%var_1744: Tensor[(15, 15, 3), bool]) -> (Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32], Tensor[(15, 15, 3), uint8]) {
  @func_1743(%var_1744) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), float32], Tensor[(15, 15, 3), uint8]) */
}

def @func_6029() -> (Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), float32]) {
  @func_6027() /* ty=(Tensor[(256), int32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), float32]) */
}

def @func_2456() -> Tensor[(4, 1, 8), float32] {
  @func_2107() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_3932(%var_3930: float64, %var_3931: Tensor[(12, 1), float64]) -> (Tensor[(336, 2), int64], Tensor[(14, 12, 4), uint32], Tensor[(4, 1, 8), float32]) {
  %724 = fn (%var_3872: float64, %var_3873: Tensor[(12, 1), float64]) -> (Tensor[(336, 2), int64], Tensor[(14, 12, 4), uint32], Tensor[(4, 1, 8), float32]) {
    %710 = cast(%var_3872, dtype="float64") /* ty=float64 */;
    %711 = cast(%var_3873, dtype="float64") /* ty=Tensor[(12, 1), float64] */;
    %712 = divide(%710, %711) /* ty=Tensor[(12, 1), float64] */;
    %713 = cast(%var_3872, dtype="int64") /* ty=int64 */;
    %714 = cast(meta[relay.Constant][32] /* ty=Tensor[(336, 2), int64] */, dtype="int64") /* ty=Tensor[(336, 2), int64] */;
    %715 = reshape(%713, newshape=[]) /* ty=int64 */;
    %716 = reshape(%714, newshape=[14, 12, 4]) /* ty=Tensor[(14, 12, 4), int64] */;
    %717 = @func_2727(%715, %716) /* ty=(Tensor[(14, 12, 4), float64],) */;
    %718 = %717.0;
    %719 = cast(%712, dtype="uint32") /* ty=Tensor[(12, 1), uint32] */;
    %720 = cast(%718, dtype="uint32") /* ty=Tensor[(14, 12, 4), uint32] */;
    %721 = @func_2877() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %722 = maximum(%719, %720) /* ty=Tensor[(14, 12, 4), uint32] */;
    %723 = %721.0;
    (meta[relay.Constant][32] /* ty=Tensor[(336, 2), int64] */, %722, %723)
  };
  %724(%var_3930, %var_3931) /* ty=(Tensor[(336, 2), int64], Tensor[(14, 12, 4), uint32], Tensor[(4, 1, 8), float32]) */
}

def @func_7022() -> Tensor[(256), int32] {
  @func_7020() /* ty=Tensor[(256), int32] */
}

def @func_1800() -> (Tensor[(4, 1, 8), float32],) {
  %727 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %725 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %726 = %725.0;
    (%726,)
  };
  %727() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_534(%var_533: Tensor[(11, 12, 14), float64]) -> (Tensor[(11, 12, 14), bool], Tensor[(11, 12, 14), bool]) {
  %738 = fn (%var_509: Tensor[(11, 12, 14), float64]) -> (Tensor[(11, 12, 14), bool], Tensor[(11, 12, 14), bool]) {
    %728 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 12, 14), float64] */, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
    %729 = shape_of(%var_509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%var_509, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %732 = cast(meta[relay.Constant][33] /* ty=Tensor[(11, 12, 14), float64] */, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
    %733 = shape_of(%var_509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%var_509, dtype="bool") /* ty=Tensor[(11, 12, 14), bool] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %736 = not_equal(%730, %731) /* ty=Tensor[(11, 12, 14), bool] */;
    %737 = greater(%734, %735) /* ty=Tensor[(11, 12, 14), bool] */;
    (%736, %737)
  };
  %738(%var_533) /* ty=(Tensor[(11, 12, 14), bool], Tensor[(11, 12, 14), bool]) */
}

def @func_3565(%var_3558: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), bool],) {
  %739 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
  %740 = %739.1;
  %741 = cast(%var_3558, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %742 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%740, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %745 = logical_or(%743, %744) /* ty=Tensor[(14, 2, 2), bool] */;
  (%745,)
}

def @func_8042() -> (Tensor[(4, 1, 8), float32],) {
  %747 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %746 = @func_4892() /* ty=Tensor[(4, 1, 8), float32] */;
    (%746,)
  };
  %747() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_4326(%var_4232: Tensor[(15, 5, 16), uint32], %var_4233: Tensor[(15, 5, 16), uint32]) -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(15, 5, 16), float64]) {
  %748 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %749 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %750 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
  %751 = cast(%var_4233, dtype="uint32") /* ty=Tensor[(15, 5, 16), uint32] */;
  %752 = shape_of(%var_4232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%var_4232, dtype="uint32") /* ty=Tensor[(15, 5, 16), uint32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %755 = minimum(%753, %754) /* ty=Tensor[(15, 5, 16), uint32] */;
  %756 = cast(%755, dtype="float64") /* ty=Tensor[(15, 5, 16), float64] */;
  %757 = %748.0;
  %758 = @func_4002() /* ty=Tensor[(14, 2, 2), float32] */;
  %759 = %749.1;
  %760 = %750.1;
  %761 = sin(%756) /* ty=Tensor[(15, 5, 16), float64] */;
  (%757, %758, %759, %760, %761)
}

def @func_7064() -> (Tensor[(4, 2, 8), float64], Tensor[(2, 6, 6), uint32], Tensor[(72), uint32]) {
  @func_7062() /* ty=(Tensor[(4, 2, 8), float64], Tensor[(2, 6, 6), uint32], Tensor[(72), uint32]) */
}

def @func_6139() -> (Tensor[(4, 1, 8), float32],) {
  @func_6137() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_2212() -> Tensor[(4, 4, 8), bool] {
  @func_2210() /* ty=Tensor[(4, 4, 8), bool] */
}

def @func_7703() -> Tensor[(4, 1, 8), float32] {
  %762 = @func_4036() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(256), int32]) */;
  %762.0
}

def @func_1292(%var_1290: int32, %var_1291: Tensor[(8, 4, 8), int32]) -> (Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) {
  @func_1288(%var_1290, %var_1291) /* ty=(Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) */
}

def @func_2115() -> (Tensor[(14, 2, 2), float32],) {
  %763 = @func_1895() /* ty=Tensor[(14, 2, 2), float32] */;
  (%763,)
}

def @func_994(%var_993: float32) -> (Tensor[(14, 2, 2), float32],) {
  %767 = fn (%var_987: float32) -> (Tensor[(14, 2, 2), float32],) {
    %764 = cast(%var_987, dtype="float32") /* ty=float32 */;
    %765 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 2, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 2, 2), float32] */;
    %766 = floor_mod(%764, %765) /* ty=Tensor[(14, 2, 2), float32] */;
    (%766,)
  };
  %767(%var_993) /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_5427() -> Tensor[(4, 1, 8), float32] {
  %769 = fn () -> Tensor[(4, 1, 8), float32] {
    %768 = @func_1829() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) */;
    %768.0
  };
  %769() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_2458() -> Tensor[(4, 1, 8), float32] {
  @func_2456() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_7509() -> (Tensor[(256), int32], Tensor[(4, 7, 8), bool], Tensor[(224), float32]) {
  %770 = @func_7344() /* ty=(Tensor[(256), int32],) */;
  %771 = cast(meta[relay.Constant][35] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %772 = reshape(%771, newshape=[4, 7, 8]) /* ty=Tensor[(4, 7, 8), float32] */;
  %773 = @func_2794(%772) /* ty=(Tensor[(4, 7, 8), bool],) */;
  %774 = %770.0;
  %775 = %773.0;
  (%774, %775, meta[relay.Constant][35] /* ty=Tensor[(224), float32] */)
}

def @func_7352() -> Tensor[(4, 1, 8), float32] {
  @func_7350() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_4629() -> (Tensor[(14, 2, 2), float32],) {
  %776 = @func_1982() /* ty=Tensor[(14, 2, 2), float32] */;
  (%776,)
}

def @func_4834() -> (Tensor[(15, 15, 3), bool],) {
  %777 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %778 = %777.1;
  (%778,)
}

def @func_3837(%var_3833: Tensor[(630), uint32], %var_3834: Tensor[(675), float64], %var_3835: Tensor[(14, 165), float32], %var_3836: Tensor[(4, 12, 8), float32]) -> (Tensor[(15, 15, 3), bool], uint32, Tensor[(630), uint32], Tensor[(675), float64], Tensor[(14, 15, 11), float32], Tensor[(14, 165), float32], Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 12, 8), uint32]) {
  %803 = fn (%var_3803: Tensor[(630), uint32], %var_3804: Tensor[(675), float64], %var_3807: Tensor[(14, 165), float32], %var_3821: Tensor[(4, 12, 8), float32]) -> (Tensor[(15, 15, 3), bool], uint32, Tensor[(630), uint32], Tensor[(675), float64], Tensor[(14, 15, 11), float32], Tensor[(14, 165), float32], Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 12, 8), uint32]) {
    %779 = cast(meta[relay.Constant][36] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %780 = cast(%var_3803, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %781 = cast(%var_3804, dtype="float64") /* ty=Tensor[(675), float64] */;
    %782 = reshape(%779, newshape=[]) /* ty=uint32 */;
    %783 = reshape(%780, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), uint32] */;
    %784 = reshape(%781, newshape=[15, 45]) /* ty=Tensor[(15, 45), float64] */;
    %785 = @func_2857(%782, %783, %784) /* ty=(Tensor[(6, 7, 15), float32], Tensor[(4, 4, 8), bool], Tensor[(4, 1, 8), float32], Tensor[(15, 15, 3), bool], Tensor[(15, 45), float64], Tensor[(14, 2, 2), float32]) */;
    %786 = cast(%var_3807, dtype="float32") /* ty=Tensor[(14, 165), float32] */;
    %787 = reshape(%786, newshape=[14, 15, 11]) /* ty=Tensor[(14, 15, 11), float32] */;
    %788 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %789 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
    %790 = @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */;
    %791 = %790.1;
    %792 = cast(%791, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
    %793 = atanh(%792) /* ty=Tensor[(4, 1, 8), float32] */;
    %794 = cast(%793, dtype="uint32") /* ty=Tensor[(4, 1, 8), uint32] */;
    %795 = cast(%var_3821, dtype="uint32") /* ty=Tensor[(4, 12, 8), uint32] */;
    %796 = %785.3;
    %797 = @func_3643(%787) /* ty=Tensor[(14, 15, 11), float32] */;
    %798 = %788.0;
    %799 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
    %800 = @func_2969() /* ty=Tensor[(14, 2, 2), float32] */;
    %801 = %789.3;
    %802 = subtract(%794, %795) /* ty=Tensor[(4, 12, 8), uint32] */;
    (%796, meta[relay.Constant][36] /* ty=uint32 */, %var_3803, %var_3804, %797, %var_3807, %798, %799, %800, %801, %802)
  };
  %803(%var_3833, %var_3834, %var_3835, %var_3836) /* ty=(Tensor[(15, 15, 3), bool], uint32, Tensor[(630), uint32], Tensor[(675), float64], Tensor[(14, 15, 11), float32], Tensor[(14, 165), float32], Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32], Tensor[(256), int32], Tensor[(4, 12, 8), uint32]) */
}

def @func_7002() -> (Tensor[(14, 2, 2), float32],) {
  @func_7000() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_6954(%var_6952: Tensor[(12, 3, 14), float64]) -> (Tensor[(12, 3, 14), int8], Tensor[(4, 1, 8), float32]) {
  @func_6951(%var_6952) /* ty=(Tensor[(12, 3, 14), int8], Tensor[(4, 1, 8), float32]) */
}

def @func_1916() -> (Tensor[(4, 1, 8), float32],) {
  %806 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %804 = @func_1799() /* ty=(Tensor[(4, 1, 8), float32],) */;
    %805 = %804.0;
    (%805,)
  };
  %806() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_4565() -> Tensor[(256), int32] {
  %808 = fn () -> Tensor[(256), int32] {
    %807 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
    %807.0
  };
  %808() /* ty=Tensor[(256), int32] */
}

def @func_1654() -> (Tensor[(4, 1, 8), float32],) {
  %811 = fn () -> (Tensor[(4, 1, 8), float32],) {
    %809 = @func_1560() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) */;
    %810 = %809.0;
    (%810,)
  };
  %811() /* ty=(Tensor[(4, 1, 8), float32],) */
}

def @func_7350() -> Tensor[(4, 1, 8), float32] {
  @func_4882() /* ty=Tensor[(4, 1, 8), float32] */
}

def @func_2637() -> (Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) {
  @func_2635() /* ty=(Tensor[(14, 2, 2), float32], Tensor[(4, 1, 8), float32], Tensor[(4, 4, 8), uint8]) */
}

def @func_6322() -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32]) {
  %812 = @func_4882() /* ty=Tensor[(4, 1, 8), float32] */;
  %813 = @func_5411() /* ty=Tensor[(4, 1, 8), float32] */;
  (%812, %813)
}

def @func_1560() -> (Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], int32, Tensor[(256), int32]) {
  %814 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 1, 8), float32] */, dtype="float32") /* ty=Tensor[(4, 1, 8), float32] */;
  %815 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %816 = cast(meta[relay.Constant][38] /* ty=Tensor[(256), int32] */, dtype="int32") /* ty=Tensor[(256), int32] */;
  %817 = reshape(%815, newshape=[]) /* ty=int32 */;
  %818 = reshape(%816, newshape=[8, 4, 8]) /* ty=Tensor[(8, 4, 8), int32] */;
  %819 = @func_1288(%817, %818) /* ty=(Tensor[(8, 4, 8), int16], Tensor[(8, 4, 8), float64], Tensor[(14, 2, 2), float32], Tensor[(8, 4, 8), float64]) */;
  %820 = log(%814) /* ty=Tensor[(4, 1, 8), float32] */;
  %821 = %819.2;
  (%820, %821, -2 /* ty=int32 */, meta[relay.Constant][38] /* ty=Tensor[(256), int32] */)
}

def @func_4062() -> Tensor[(256), int32] {
  @func_4060() /* ty=Tensor[(256), int32] */
}

def @func_2076(%var_2074: Tensor[(225, 3), float32]) -> (Tensor[(14, 2, 2), float32], Tensor[(225, 3), float64], Tensor[(4, 1, 8), float32]) {
  @func_2073(%var_2074) /* ty=(Tensor[(14, 2, 2), float32], Tensor[(225, 3), float64], Tensor[(4, 1, 8), float32]) */
}

def @func_6550() -> Tensor[(14, 2, 2), float32] {
  %823 = fn () -> Tensor[(14, 2, 2), float32] {
    %822 = @func_2185() /* ty=(Tensor[(4, 1, 8), float32], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(15, 15, 3), bool]) */;
    %822.1
  };
  %823() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_1829() -> (Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32]) {
  %824 = @func_1653() /* ty=(Tensor[(4, 1, 8), float32],) */;
  %825 = @func_1624() /* ty=(Tensor[(256), int32], Tensor[(15, 15, 3), bool], Tensor[(14, 2, 2), float32], Tensor[(225, 3), float32]) */;
  %826 = %824.0;
  %827 = %825.3;
  (%826, %827)
}

def @func_6830() -> Tensor[(14, 2, 2), float32] {
  @func_6828() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_2970() -> Tensor[(14, 2, 2), float32] {
  %829 = fn () -> Tensor[(14, 2, 2), float32] {
    %828 = @func_2115() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %828.0
  };
  %829() /* ty=Tensor[(14, 2, 2), float32] */
}

def @func_3568(%var_3566: Tensor[(14, 2, 2), float32]) -> (Tensor[(14, 2, 2), bool],) {
  @func_3565(%var_3566) /* ty=(Tensor[(14, 2, 2), bool],) */
}

def @func_2731(%var_2729: int64, %var_2730: Tensor[(14, 12, 4), int64]) -> (Tensor[(14, 12, 4), float64],) {
  @func_2727(%var_2729, %var_2730) /* ty=(Tensor[(14, 12, 4), float64],) */
}

def @func_2361(%var_2359: Tensor[(225, 3), float32]) -> (Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32], Tensor[(225, 3), bool], Tensor[(4, 1, 8), float32]) {
  @func_2358(%var_2359) /* ty=(Tensor[(4, 1, 8), float32], Tensor[(4, 1, 8), float32], Tensor[(225, 3), float32], Tensor[(225, 3), bool], Tensor[(4, 1, 8), float32]) */
}

def @func_5158() -> (Tensor[(14, 2, 2), float32],) {
  %832 = fn () -> (Tensor[(14, 2, 2), float32],) {
    %830 = @func_2961() /* ty=(Tensor[(256), int32], Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), float32]) */;
    %831 = %830.1;
    (%831,)
  };
  %832() /* ty=(Tensor[(14, 2, 2), float32],) */
}

def @func_5866(%var_5864: Tensor[(10, 4, 5), uint16]) -> (Tensor[(10, 4, 5), uint16],) {
  @func_5863(%var_5864) /* ty=(Tensor[(10, 4, 5), uint16],) */
}

def @func_3342(%var_3340: Tensor[(16, 10, 11), float64]) -> Tensor[(16, 10, 11), float64] {
  @func_3339(%var_3340) /* ty=Tensor[(16, 10, 11), float64] */
}

def @func_6300(%var_6299: Tensor[(675), float64]) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), bool], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) {
  %848 = fn (%var_6296: Tensor[(675), float64]) -> (Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), bool], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) {
    %833 = @func_5157() /* ty=(Tensor[(14, 2, 2), float32],) */;
    %834 = %833.0;
    %835 = cast(%834, dtype="float64") /* ty=Tensor[(14, 2, 2), float64] */;
    %836 = atan(%835) /* ty=Tensor[(14, 2, 2), float64] */;
    %837 = cast(%834, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
    %839 = cast(%836, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %841 = cast(%var_6296, dtype="float64") /* ty=Tensor[(675), float64] */;
    %842 = cast(%var_6296, dtype="float64") /* ty=Tensor[(675), float64] */;
    %843 = reshape(%841, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %844 = reshape(%842, newshape=[15, 15, 3]) /* ty=Tensor[(15, 15, 3), float64] */;
    %845 = @func_4002() /* ty=Tensor[(14, 2, 2), float32] */;
    %846 = equal(%839, %840) /* ty=Tensor[(14, 2, 2), bool] */;
    %847 = @func_1098(%843, %844) /* ty=Tensor[(15, 15, 3), bool] */;
    (%845, %846, %847, %var_6296)
  };
  %848(%var_6299) /* ty=(Tensor[(14, 2, 2), float32], Tensor[(14, 2, 2), bool], Tensor[(15, 15, 3), bool], Tensor[(675), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
