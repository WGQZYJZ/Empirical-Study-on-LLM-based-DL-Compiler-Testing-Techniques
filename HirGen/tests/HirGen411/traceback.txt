==========mod==========
#[version = "0.0.5"]
def @func_8684() -> (Tensor[(14, 8, 13), int16], Tensor[(14, 8, 13), float32]) {
  %0 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="int16") /* ty=Tensor[(14, 8, ?), int16] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 8, 13), uint16] */, dtype="int16") /* ty=Tensor[(14, 8, 13), int16] */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(14, 8, 13), uint16] */, dtype="float32") /* ty=Tensor[(14, 8, 13), float32] */;
  %5 = bitwise_or(%2, %3) /* ty=Tensor[(14, 8, 13), int16] */;
  %6 = log10(%4) /* ty=Tensor[(14, 8, 13), float32] */;
  (%5, %6)
}

def @func_9567() -> (Tensor[(588), float64],) {
  %7 = @func_9361() /* ty=(Tensor[(588), float64],) */;
  %8 = %7.0;
  (%8,)
}

def @func_9693(%var_9661: Tensor[(2, 112), bool], %var_9662: Tensor[(770), float32]) -> (Tensor[(14, 8, ?), float64], Tensor[(9), uint32], Tensor[(2, 112), bool], Tensor[(770), float32]) {
  %9 = @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */;
  %10 = cast(%var_9661, dtype="bool") /* ty=Tensor[(2, 112), bool] */;
  %11 = cast(%var_9662, dtype="float32") /* ty=Tensor[(770), float32] */;
  %12 = reshape(%10, newshape=[224]) /* ty=Tensor[(224), bool] */;
  %13 = reshape(%11, newshape=[7, 110]) /* ty=Tensor[(7, 110), float32] */;
  %14 = @func_8630(%12, %13) /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(224), bool], Tensor[(9), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32], Tensor[(7, 2, 16), bool]) */;
  %15 = cast(%var_9662, dtype="float32") /* ty=Tensor[(770), float32] */;
  %16 = %9.0;
  %17 = %14.2;
  %18 = atan(%15) /* ty=Tensor[(770), float32] */;
  (%16, %17, %var_9661, %18)
}

def @main(%var_9849: int32, %var_9927: Tensor[(26), float32], %var_9929: Tensor[(84), float32]) -> (Tensor[(14, 9, 12), bool], Tensor[(3, 5, 6), float64], Tensor[(15, 6, 15), bool], Tensor[(1350), bool], Tensor[(26), float32], Tensor[(990), float32], Tensor[(84), float32], Tensor[(260), float32], Tensor[(14, 8, 1470), float64], Tensor[(14, 8, ?), float32]) {
  %19 = cast(%var_9849, dtype="int32") /* ty=int32 */;
  %20 = reshape(%19, newshape=[]) /* ty=int32 */;
  %21 = @func_9054() /* ty=(Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %23 = reshape(%22, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
  %24 = @func_8176(%23) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
  %25 = cast(%var_9927, dtype="float32") /* ty=Tensor[(26), float32] */;
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %27 = %24.0;
  %28 = cast(%27, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %29 = cast(%var_9929, dtype="float32") /* ty=Tensor[(84), float32] */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %31 = reshape(%25, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %32 = reshape(%26, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %33 = reshape(%28, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %34 = reshape(%29, newshape=[84, 1]) /* ty=Tensor[(84, 1), float32] */;
  %35 = reshape(%30, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %36 = @func_7462(%31, %32, %33, %34, %35) /* ty=(Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) */;
  %37 = @func_9755() /* ty=(Tensor[(15, 6, 15), bool], Tensor[(15, 6, 15), bool], Tensor[(?, 7, 7), bool], Tensor[(7, 7), float64], Tensor[(14, 8, ?), float32]) */;
  %38 = %37.4;
  %39 = cast(%38, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %40 = acos(%39) /* ty=Tensor[(14, 8, ?), float32] */;
  %41 = cast(%40, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  %42 = cast(meta[relay.Constant][1] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %43 = floor_mod(%41, %42) /* ty=Tensor[(14, 8, 1470), float64] */;
  %44 = cast(%40, dtype="int64") /* ty=Tensor[(14, 8, ?), int64] */;
  %45 = cast(%var_9849, dtype="int64") /* ty=int64 */;
  %46 = minimum(%44, %45) /* ty=Tensor[(14, 8, ?), int64] */;
  %47 = cast(%43, dtype="float64") /* ty=Tensor[(14, 8, 1470), float64] */;
  %48 = cast(%46, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  %49 = cast(%40, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %50 = @func_195(%20) /* ty=Tensor[(14, 9, 12), bool] */;
  %51 = %21.0;
  %52 = %36.3;
  %53 = power(%47, %48) /* ty=Tensor[(14, 8, 1470), float64] */;
  %54 = acosh(%49) /* ty=Tensor[(14, 8, ?), float32] */;
  (%50, %51, %27, %52, %var_9927, meta[relay.Constant][2] /* ty=Tensor[(990), float32] */, %var_9929, meta[relay.Constant][3] /* ty=Tensor[(260), float32] */, %53, %54)
}

def @func_2378(%var_2346: Tensor[(10, 2, 16), int8], %var_2347: Tensor[(10, 2, 16), int8]) -> Tensor[(10, 2, 16), uint64] {
  %55 = cast(%var_2347, dtype="int8") /* ty=Tensor[(10, 2, 16), int8] */;
  %56 = shape_of(%var_2346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%var_2346, dtype="int8") /* ty=Tensor[(10, 2, 16), int8] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %59 = multiply(%57, %58) /* ty=Tensor[(10, 2, 16), int8] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(10, 2, 16), int8] */, dtype="uint64") /* ty=Tensor[(10, 2, 16), uint64] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="uint64") /* ty=Tensor[(10, 2, 16), uint64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  add(%62, %63) /* ty=Tensor[(10, 2, 16), uint64] */
}

def @func_7599() -> (Tensor[(14, 8, ?), uint16],) {
  %64 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %65 = %64.0;
  (%65,)
}

def @func_7685(%var_7620: Tensor[(588), float64], %var_7659: Tensor[(9), uint32], %var_7660: Tensor[(77, 10), float32], %var_7680: Tensor[(135), float32]) -> (Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) {
  %66 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %67 = %66.2;
  %68 = cast(%var_7620, dtype="float64") /* ty=Tensor[(588), float64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="float64") /* ty=Tensor[(588), float64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), float64] */;
  %72 = cast(%var_7620, dtype="int16") /* ty=Tensor[(588), int16] */;
  %73 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %74 = cast(%67, dtype="int16") /* ty=Tensor[(588), int16] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?), int16] */;
  %76 = cast(meta[relay.Constant][5] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %77 = cast(%var_7659, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %78 = cast(%var_7660, dtype="float32") /* ty=Tensor[(77, 10), float32] */;
  %79 = reshape(%76, newshape=[]) /* ty=uint32 */;
  %80 = reshape(%77, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
  %81 = reshape(%78, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %82 = @func_1061(%79, %80, %81) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
  %83 = cast(%var_7660, dtype="float64") /* ty=Tensor[(77, 10), float64] */;
  %84 = cast(%var_7680, dtype="float32") /* ty=Tensor[(135), float32] */;
  %85 = cast(%var_7680, dtype="float32") /* ty=Tensor[(135), float32] */;
  %86 = reshape(%84, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %87 = reshape(%85, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %88 = mod(%70, %71) /* ty=Tensor[(588), float64] */;
  %89 = multiply(%74, %75) /* ty=Tensor[(588), int16] */;
  %90 = %82.0;
  %91 = rsqrt(%83) /* ty=Tensor[(77, 10), float64] */;
  %92 = @func_6082(%86, %87) /* ty=Tensor[(3, 5, 9), int8] */;
  (%88, %89, %90, meta[relay.Constant][5] /* ty=uint32 */, %var_7659, %91, %92, %var_7680)
}

def @func_6503(%var_6464: Tensor[(7, 12, 4), uint16], %var_6488: Tensor[(240), float64], %var_6489: Tensor[(84), float32]) -> (Tensor[(7, 12, 4), bool], Tensor[(2, 180), uint32], Tensor[(120), float64], Tensor[(3, 7, 4), float64], Tensor[(240), float64], Tensor[(84), float32], Tensor[(14, 9, 12), bool], int32) {
  %93 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 12, 4), uint16] */, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %94 = shape_of(%var_6464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %95 = cast(%var_6464, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %96 = dyn.reshape(%93, %94, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %99 = reshape(%97, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %100 = reshape(%98, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %101 = @func_2491(%99, %100) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %102 = cast(%var_6488, dtype="float64") /* ty=Tensor[(240), float64] */;
  %103 = cast(%var_6489, dtype="float32") /* ty=Tensor[(84), float32] */;
  %104 = reshape(%102, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float64] */;
  %105 = reshape(%103, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %106 = @func_5135(%104, %105) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) */;
  %107 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %108 = reshape(%107, newshape=[]) /* ty=int32 */;
  %109 = greater_equal(%95, %96) /* ty=Tensor[(7, 12, 4), bool] */;
  %110 = %101.4;
  %111 = %106.1;
  %112 = @func_195(%108) /* ty=Tensor[(14, 9, 12), bool] */;
  (%109, %110, meta[relay.Constant][7] /* ty=Tensor[(120), float64] */, %111, %var_6488, %var_6489, %112, 1 /* ty=int32 */)
}

def @func_2835(%var_2825: Tensor[(9, 10, 11), float32]) -> (Tensor[(9, 10, 11), float32],) {
  %113 = cast(%var_2825, dtype="float32") /* ty=Tensor[(9, 10, 11), float32] */;
  %114 = exp(%113) /* ty=Tensor[(9, 10, 11), float32] */;
  (%114,)
}

def @func_7511() -> (Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) {
  %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(14, 8, 1), uint16] */, dtype="uint16") /* ty=Tensor[(14, 8, 1), uint16] */;
  %116 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(14, 8, 1), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 8, 1), uint16] */, dtype="uint16") /* ty=Tensor[(14, 8, 1), uint16] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %119 = cast(meta[relay.Constant][10] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %120 = reshape(%119, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), float64] */;
  %121 = @func_6997(%120) /* ty=(Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) */;
  %122 = subtract(%117, %118) /* ty=Tensor[(14, 8, ?), uint16] */;
  %123 = %121.2;
  (%122, %123, meta[relay.Constant][10] /* ty=Tensor[(588), float64] */)
}

def @func_8630(%var_8601: Tensor[(224), bool], %var_8615: Tensor[(7, 110), float32]) -> (Tensor[(14, 8, ?), uint16], Tensor[(224), bool], Tensor[(9), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32], Tensor[(7, 2, 16), bool]) {
  %124 = @func_8226() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */;
  %125 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %126 = cast(meta[relay.Constant][12] /* ty=Tensor[(9), uint32] */, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %127 = cast(%var_8615, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
  %128 = reshape(%125, newshape=[]) /* ty=uint32 */;
  %129 = reshape(%126, newshape=[9]) /* ty=Tensor[(9), uint32] */;
  %130 = reshape(%127, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %131 = @func_7873(%128, %129, %130) /* ty=(Tensor[(10, 2, 16), uint64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */;
  %132 = cast(%var_8601, dtype="bool") /* ty=Tensor[(224), bool] */;
  %133 = reshape(%132, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), bool] */;
  %134 = @func_8581(%133) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64], Tensor[(14, 8, ?), float64]) */;
  %135 = %134.1;
  %136 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 2, 16), float64] */, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %140 = %124.0;
  %141 = %131.3;
  %142 = not_equal(%138, %139) /* ty=Tensor[(7, 2, 16), bool] */;
  (%140, %var_8601, %141, meta[relay.Constant][11] /* ty=uint32 */, meta[relay.Constant][12] /* ty=Tensor[(9), uint32] */, %var_8615, %142)
}

def @func_9544(%var_9529: Tensor[(5, 16, 16), float64]) -> Tensor[(5, 16, 16), float64] {
  %143 = cast(%var_9529, dtype="float64") /* ty=Tensor[(5, 16, 16), float64] */;
  acosh(%143) /* ty=Tensor[(5, 16, 16), float64] */
}

def @func_9755() -> (Tensor[(15, 6, 15), bool], Tensor[(15, 6, 15), bool], Tensor[(?, 7, 7), bool], Tensor[(7, 7), float64], Tensor[(14, 8, ?), float32]) {
  %144 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
  %145 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %146 = cast(meta[relay.Constant][14] /* ty=Tensor[(7, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
  %147 = %145.1;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %149 = reshape(%146, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), float64] */;
  %150 = reshape(%148, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %151 = @func_7320(%149, %150) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */;
  %152 = @func_8402() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %153 = %152.0;
  %154 = cast(%153, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %155 = tan(%154) /* ty=Tensor[(14, 8, ?), float32] */;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %157 = %144.0;
  %158 = %151.0;
  %159 = sin(%156) /* ty=Tensor[(14, 8, ?), float32] */;
  (%157, %147, %158, meta[relay.Constant][14] /* ty=Tensor[(7, 7), float64] */, %159)
}

def @func_8752(%var_8743: Tensor[(770), float32]) -> (Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) {
  %160 = @func_8653() /* ty=Tensor[(2, 5, 11), uint32] */;
  %161 = cast(%160, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
  %162 = cast(meta[relay.Constant][15] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %163 = cast(meta[relay.Constant][16] /* ty=Tensor[(9), uint32] */, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %164 = cast(%var_8743, dtype="float32") /* ty=Tensor[(770), float32] */;
  %165 = reshape(%162, newshape=[]) /* ty=uint32 */;
  %166 = reshape(%163, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
  %167 = reshape(%164, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %168 = @func_1061(%165, %166, %167) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
  %169 = asinh(%161) /* ty=Tensor[(2, 5, 11), float64] */;
  %170 = %168.2;
  (%169, %170, meta[relay.Constant][15] /* ty=uint32 */, meta[relay.Constant][16] /* ty=Tensor[(9), uint32] */, %var_8743)
}

def @func_8352(%var_8336: Tensor[(15, 6, 15), bool]) -> (Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 105), float64]) {
  %171 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
  %172 = %171.0;
  %173 = cast(%var_8336, dtype="uint64") /* ty=Tensor[(15, 6, 15), uint64] */;
  %174 = shape_of(%172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %175 = cast(%172, dtype="uint64") /* ty=Tensor[(15, 6, 15), uint64] */;
  %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %177 = bitwise_and(%175, %176) /* ty=Tensor[(15, 6, 15), uint64] */;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %179 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 105), float64] */, dtype="float64") /* ty=Tensor[(14, 105), float64] */;
  %180 = reshape(%179, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
  %181 = @func_8176(%180) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
  %182 = sin(%178) /* ty=Tensor[(15, 6, 15), float64] */;
  %183 = %181.0;
  (%182, %183, meta[relay.Constant][17] /* ty=Tensor[(14, 105), float64] */)
}

def @func_9177() -> (Tensor[(14, 8, ?), uint16],) {
  %184 = @func_8988() /* ty=Tensor[(14, 8, ?), uint16] */;
  (%184,)
}

def @func_8040() -> (Tensor[(588), float64], Tensor[(15, 6, 15), bool]) {
  %185 = @func_7970() /* ty=(Tensor[(588), float64],) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(588), float64] */;
  %188 = reshape(%187, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), float64] */;
  %189 = @func_6997(%188) /* ty=(Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) */;
  %190 = %189.1;
  (%186, %190)
}

def @func_195(%var_180: int32) -> Tensor[(14, 9, 12), bool] {
  %191 = cast(%var_180, dtype="bool") /* ty=bool */;
  %192 = cast(meta[relay.Constant][18] /* ty=Tensor[(14, 9, 12), int32] */, dtype="bool") /* ty=Tensor[(14, 9, 12), bool] */;
  less_equal(%191, %192) /* ty=Tensor[(14, 9, 12), bool] */
}

def @func_4916(%var_4857: Tensor[(1, 9, 13), float64], %var_4904: Tensor[(1470), float64], %var_4910: Tensor[(120), float64]) -> (Tensor[(?, 9, 13), uint64], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64], int32, Tensor[(120), float64]) {
  %193 = cast(%var_4857, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %194 = erf(%193) /* ty=Tensor[(1, 9, 13), float64] */;
  %195 = cast(%var_4857, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = equal(%197, %198) /* ty=Tensor[(?, 9, 13), bool] */;
  %200 = cast(%194, dtype="uint8") /* ty=Tensor[(1, 9, 13), uint8] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="uint8") /* ty=Tensor[(?, 9, 13), uint8] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %204 = bitwise_and(%202, %203) /* ty=Tensor[(?, 9, 13), uint8] */;
  %205 = cast(%199, dtype="uint64") /* ty=Tensor[(?, 9, 13), uint64] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="uint64") /* ty=Tensor[(?, 9, 13), uint64] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %209 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %210 = reshape(%209, newshape=[]) /* ty=int32 */;
  %211 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %212 = reshape(%211, newshape=[]) /* ty=int32 */;
  %213 = cast(%var_4904, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %214 = cast(%var_4904, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %215 = reshape(%213, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %216 = reshape(%214, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %217 = @func_4176(%215, %216) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) */;
  %218 = cast(%var_4910, dtype="float64") /* ty=Tensor[(120), float64] */;
  %219 = cast(%var_4910, dtype="float64") /* ty=Tensor[(120), float64] */;
  %220 = reshape(%218, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %221 = reshape(%219, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %222 = @func_2491(%220, %221) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %223 = minimum(%207, %208) /* ty=Tensor[(?, 9, 13), uint64] */;
  %224 = @func_195(%210) /* ty=Tensor[(14, 9, 12), bool] */;
  %225 = @func_195(%212) /* ty=Tensor[(14, 9, 12), bool] */;
  %226 = %217.0;
  %227 = %222.2;
  (%223, %224, -10 /* ty=int32 */, %225, %226, %var_4904, %227, %var_4910)
}

def @func_7549(%var_7541: Tensor[(4, 16, 5), float32]) -> Tensor[(4, 16, 5), float32] {
  %228 = cast(%var_7541, dtype="float32") /* ty=Tensor[(4, 16, 5), float32] */;
  tan(%228) /* ty=Tensor[(4, 16, 5), float32] */
}

def @func_3243(%var_3228: Tensor[(4, 3, 13), int8], %var_3241: Tensor[(330, 3), float32]) -> (Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) {
  %229 = cast(%var_3228, dtype="int8") /* ty=Tensor[(4, 3, 13), int8] */;
  %230 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(4, 3, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 3, 13), int8] */, dtype="int8") /* ty=Tensor[(4, 3, 13), int8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %233 = maximum(%231, %232) /* ty=Tensor[(4, 3, 13), int8] */;
  %234 = cast(%233, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %235 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(4, 3, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 3, 13), int8] */, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = cast(%var_3228, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %239 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(%233, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %242 = cast(%var_3241, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
  %243 = reshape(%242, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), float32] */;
  %244 = @func_2835(%243) /* ty=(Tensor[(9, 10, 11), float32],) */;
  %245 = logical_or(%236, %237) /* ty=Tensor[(4, 3, 13), bool] */;
  %246 = bitwise_and(%240, %241) /* ty=Tensor[(4, 3, 13), int16] */;
  %247 = %244.0;
  (%245, %246, %247, %var_3241)
}

def @func_4176(%var_4168: Tensor[(14, 15, 7), float64], %var_4169: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) {
  %248 = cast(%var_4169, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
  %249 = shape_of(%var_4168, dtype="int32") /* ty=Tensor[(3), int32] */;
  %250 = cast(%var_4168, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %252 = cast(%var_4169, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
  %253 = floor_mod(%250, %251) /* ty=Tensor[(14, 15, 7), float64] */;
  %254 = sin(%252) /* ty=Tensor[(14, 15, 7), float64] */;
  (%253, %254)
}

def @func_9510(%var_9475: Tensor[(2, 5, 11), uint32], %var_9496: Tensor[(960), uint8]) -> (Tensor[(2, 5, 11), bool], Tensor[(2, 5, 11), bool], Tensor[(770), float32], Tensor[(770), float32], Tensor[(12, 5, 16), uint8], Tensor[(960), uint8], Tensor[(3, 5, 9), int8], Tensor[(15, 9), float32]) {
  %255 = @func_8123() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) */;
  %256 = %255.1;
  %257 = cast(%var_9475, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %261 = cast(%256, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %262 = shape_of(%var_9475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_9475, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %265 = cast(meta[relay.Constant][20] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %266 = reshape(%265, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %267 = @func_8752(%266) /* ty=(Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */;
  %268 = cast(%var_9496, dtype="uint8") /* ty=Tensor[(960), uint8] */;
  %269 = cast(%var_9496, dtype="uint8") /* ty=Tensor[(960), uint8] */;
  %270 = reshape(%268, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %271 = reshape(%269, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %272 = @func_7220(%270, %271) /* ty=(Tensor[(12, 5, 16), uint8],) */;
  %273 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %274 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %275 = reshape(%273, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %276 = reshape(%274, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %277 = equal(%259, %260) /* ty=Tensor[(2, 5, 11), bool] */;
  %278 = greater_equal(%263, %264) /* ty=Tensor[(2, 5, 11), bool] */;
  %279 = %267.1;
  %280 = %272.0;
  %281 = @func_6082(%275, %276) /* ty=Tensor[(3, 5, 9), int8] */;
  (%277, %278, %279, meta[relay.Constant][20] /* ty=Tensor[(770), float32] */, %280, %var_9496, %281, meta[relay.Constant][21] /* ty=Tensor[(15, 9), float32] */)
}

def @func_8469(%var_8451: bool, %var_8456: Tensor[(240), float64], %var_8457: Tensor[(84), float32]) -> (Tensor[(588), float64], Tensor[(15, 6, 15), bool], bool, Tensor[(675, 2), bool], Tensor[(6, 10, 4), float32], Tensor[(240), float64], Tensor[(84), float32], Tensor[(9, 1), uint32], Tensor[(3, 3), uint32], Tensor[(770), float32], Tensor[(3, 45), float32]) {
  %282 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %283 = cast(%var_8451, dtype="bool") /* ty=bool */;
  %284 = cast(meta[relay.Constant][22] /* ty=Tensor[(675, 2), bool] */, dtype="bool") /* ty=Tensor[(675, 2), bool] */;
  %285 = reshape(%283, newshape=[]) /* ty=bool */;
  %286 = reshape(%284, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
  %287 = cast(%var_8456, dtype="float64") /* ty=Tensor[(240), float64] */;
  %288 = cast(%var_8457, dtype="float32") /* ty=Tensor[(84), float32] */;
  %289 = reshape(%287, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float64] */;
  %290 = reshape(%288, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %291 = @func_5135(%289, %290) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) */;
  %292 = %282.0;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(588), float64] */;
  %294 = cast(meta[relay.Constant][23] /* ty=Tensor[(3, 3), uint32] */, dtype="uint32") /* ty=Tensor[(3, 3), uint32] */;
  %295 = cast(meta[relay.Constant][24] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %296 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %297 = reshape(%293, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %298 = reshape(%294, newshape=[9]) /* ty=Tensor[(9), uint32] */;
  %299 = reshape(%295, newshape=[77, 10]) /* ty=Tensor[(77, 10), float32] */;
  %300 = reshape(%296, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %301 = @func_7685(%297, %298, %299, %300) /* ty=(Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) */;
  %302 = @func_6131(%285, %286) /* ty=Tensor[(15, 6, 15), bool] */;
  %303 = %291.0;
  %304 = %301.2;
  (%292, %302, %var_8451, meta[relay.Constant][22] /* ty=Tensor[(675, 2), bool] */, %303, %var_8456, %var_8457, %304, meta[relay.Constant][23] /* ty=Tensor[(3, 3), uint32] */, meta[relay.Constant][24] /* ty=Tensor[(770), float32] */, meta[relay.Constant][25] /* ty=Tensor[(3, 45), float32] */)
}

def @func_8123() -> (Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) {
  %305 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %306 = cast(meta[relay.Constant][26] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %307 = cast(meta[relay.Constant][26] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %308 = reshape(%306, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), int8] */;
  %309 = reshape(%307, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), int8] */;
  %310 = %305.0;
  %311 = @func_6404(%308, %309) /* ty=Tensor[(2, 5, 11), uint32] */;
  (%310, %311, meta[relay.Constant][26] /* ty=Tensor[(110), int8] */)
}

def @func_7462(%var_7343: Tensor[(13, 2, 1), float32], %var_7351: Tensor[(990), float32], %var_7355: Tensor[(1350), bool], %var_7367: Tensor[(84, 1), float32], %var_7404: Tensor[(13, 2, 10), float32]) -> (Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) {
  %312 = cast(%var_7351, dtype="float32") /* ty=Tensor[(990), float32] */;
  %313 = reshape(%312, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %314 = @func_5649(%313) /* ty=(Tensor[(15, 4, 10), bool], Tensor[(330, 3), float32], Tensor[(156), int8], Tensor[(9, 10, 11), uint64], Tensor[(15, 4, 10), float32]) */;
  %315 = cast(meta[relay.Constant][27] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %316 = cast(%var_7355, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %317 = reshape(%315, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), float64] */;
  %318 = reshape(%316, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %319 = @func_7320(%317, %318) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */;
  %320 = cast(%var_7367, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %321 = reshape(%320, newshape=[3, 7, 4]) /* ty=Tensor[(3, 7, 4), float32] */;
  %322 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 360), uint32] */, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %323 = reshape(%322, newshape=[5, 12, 6]) /* ty=Tensor[(5, 12, 6), uint32] */;
  %324 = @func_1890(%323) /* ty=(Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) */;
  %325 = cast(%var_7351, dtype="float32") /* ty=Tensor[(990), float32] */;
  %326 = reshape(%325, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), float32] */;
  %327 = @func_2835(%326) /* ty=(Tensor[(9, 10, 11), float32],) */;
  %328 = cast(meta[relay.Constant][27] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %329 = cast(%var_7355, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %330 = reshape(%328, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), float64] */;
  %331 = reshape(%329, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %332 = @func_7320(%330, %331) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */;
  %333 = cast(%var_7343, dtype="float32") /* ty=Tensor[(13, 2, 1), float32] */;
  %334 = exp(%333) /* ty=Tensor[(13, 2, 1), float32] */;
  %335 = cast(%334, dtype="bool") /* ty=Tensor[(13, 2, 1), bool] */;
  %336 = cast(%var_7404, dtype="bool") /* ty=Tensor[(13, 2, 10), bool] */;
  %337 = cast(meta[relay.Constant][29] /* ty=Tensor[(20, 48), uint8] */, dtype="uint8") /* ty=Tensor[(20, 48), uint8] */;
  %338 = cast(meta[relay.Constant][29] /* ty=Tensor[(20, 48), uint8] */, dtype="uint8") /* ty=Tensor[(20, 48), uint8] */;
  %339 = reshape(%337, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %340 = reshape(%338, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %341 = @func_7220(%339, %340) /* ty=(Tensor[(12, 5, 16), uint8],) */;
  %342 = cast(meta[relay.Constant][27] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %343 = sinh(%342) /* ty=Tensor[(49), float64] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(49), float32] */;
  %345 = log10(%344) /* ty=Tensor[(49), float32] */;
  %346 = cast(%345, dtype="int32") /* ty=Tensor[(49), int32] */;
  %347 = cast(%334, dtype="int32") /* ty=Tensor[(13, 2, 1), int32] */;
  %348 = bitwise_and(%346, %347) /* ty=Tensor[(13, 2, 49), int32] */;
  %349 = cast(%348, dtype="float32") /* ty=Tensor[(13, 2, 49), float32] */;
  %350 = acos(%349) /* ty=Tensor[(13, 2, 49), float32] */;
  %351 = cast(%350, dtype="bool") /* ty=Tensor[(13, 2, 49), bool] */;
  %352 = cast(meta[relay.Constant][27] /* ty=Tensor[(49), float64] */, dtype="bool") /* ty=Tensor[(49), bool] */;
  %353 = cast(%348, dtype="int8") /* ty=Tensor[(13, 2, 49), int8] */;
  %354 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%350, dtype="int8") /* ty=Tensor[(13, 2, 49), int8] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %357 = %314.2;
  %358 = %319.3;
  %359 = @func_2937(%321) /* ty=Tensor[(3, 7, 4), float64] */;
  %360 = %324.1;
  %361 = %327.0;
  %362 = %332.0;
  %363 = not_equal(%335, %336) /* ty=Tensor[(13, 2, 10), bool] */;
  %364 = %341.0;
  %365 = greater_equal(%351, %352) /* ty=Tensor[(13, 2, 49), bool] */;
  %366 = logical_xor(%355, %356) /* ty=Tensor[(13, 2, 49), int8] */;
  (%357, %var_7351, %358, %var_7355, %359, %var_7367, %360, meta[relay.Constant][28] /* ty=Tensor[(1, 360), uint32] */, %361, %362, %363, %364, meta[relay.Constant][29] /* ty=Tensor[(20, 48), uint8] */, %365, %366)
}

def @func_1061(%var_1032: uint32, %var_1033: Tensor[(9, 1), uint32], %var_1050: Tensor[(770), float32]) -> (Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) {
  %367 = cast(%var_1032, dtype="uint32") /* ty=uint32 */;
  %368 = cast(%var_1033, dtype="uint32") /* ty=Tensor[(9, 1), uint32] */;
  %369 = cast(%var_1050, dtype="float32") /* ty=Tensor[(770), float32] */;
  %370 = reshape(%369, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
  %371 = @func_430(%370) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */;
  %372 = cast(%var_1050, dtype="float32") /* ty=Tensor[(770), float32] */;
  %373 = reshape(%372, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
  %374 = @func_430(%373) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */;
  %375 = minimum(%367, %368) /* ty=Tensor[(9, 1), uint32] */;
  %376 = %371.3;
  %377 = %374.2;
  (%375, %376, %var_1050, %377)
}

def @func_3057(%var_3005: Tensor[(120), float64]) -> (Tensor[(2, 16, 13), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float64], Tensor[(3, 5, 8), float32]) {
  %378 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 13), float64] */;
  %379 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %380 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %381 = reshape(%379, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %382 = reshape(%380, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %383 = @func_2491(%381, %382) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %384 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %385 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %386 = reshape(%384, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %387 = reshape(%385, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %388 = @func_2491(%386, %387) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %389 = cos(%378) /* ty=Tensor[(2, 16, 13), float64] */;
  %390 = %383.0;
  %391 = %388.0;
  (%389, %390, %var_3005, %391)
}

def @func_8226() -> (Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) {
  %392 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %393 = @func_7970() /* ty=(Tensor[(588), float64],) */;
  %394 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
  %395 = reshape(%394, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
  %396 = @func_3591(%395) /* ty=(Tensor[(8, 11, ?), float64], Tensor[(8, 11, ?), bool]) */;
  %397 = %392.0;
  %398 = %393.0;
  %399 = %396.1;
  (%397, %398, %399, meta[relay.Constant][31] /* ty=Tensor[(88), float32] */)
}

def @func_7220(%var_7207: Tensor[(12, 5, 16), uint8], %var_7208: Tensor[(12, 5, 16), uint8]) -> (Tensor[(12, 5, 16), uint8],) {
  %400 = cast(%var_7208, dtype="uint8") /* ty=Tensor[(12, 5, 16), uint8] */;
  %401 = shape_of(%var_7207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_7207, dtype="uint8") /* ty=Tensor[(12, 5, 16), uint8] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %404 = bitwise_or(%402, %403) /* ty=Tensor[(12, 5, 16), uint8] */;
  (%404,)
}

def @func_5019(%var_5013: Tensor[(15, 12, 14), bool], %var_5014: Tensor[(15, 12, 14), bool]) -> Tensor[(15, 12, 14), bool] {
  %405 = cast(%var_5014, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
  %406 = shape_of(%var_5013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(%var_5013, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%407, %408) /* ty=Tensor[(15, 12, 14), bool] */
}

def @func_2937(%var_2926: Tensor[(3, 7, 4), float32]) -> Tensor[(3, 7, 4), float64] {
  %409 = cast(%var_2926, dtype="float32") /* ty=Tensor[(3, 7, 4), float32] */;
  %410 = rsqrt(%409) /* ty=Tensor[(3, 7, 4), float32] */;
  %411 = cast(%410, dtype="float64") /* ty=Tensor[(3, 7, 4), float64] */;
  sin(%411) /* ty=Tensor[(3, 7, 4), float64] */
}

def @func_8055() -> (Tensor[(15, 6, 15), bool],) {
  %412 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %413 = %412.1;
  (%413,)
}

def @func_2015(%var_2009: int64, %var_2010: Tensor[(2, 1), int64]) -> Tensor[(2, 1), bool] {
  %414 = cast(%var_2009, dtype="bool") /* ty=bool */;
  %415 = cast(%var_2010, dtype="bool") /* ty=Tensor[(2, 1), bool] */;
  less(%414, %415) /* ty=Tensor[(2, 1), bool] */
}

def @func_8176(%var_8172: Tensor[(1470), float64]) -> (Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) {
  %416 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %417 = cast(%var_8172, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %418 = cast(%var_8172, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %419 = reshape(%417, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %420 = reshape(%418, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %421 = @func_4176(%419, %420) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) */;
  %422 = %416.1;
  %423 = %421.0;
  (%422, %423, %var_8172)
}

def @func_8988() -> Tensor[(14, 8, ?), uint16] {
  @func_8961() /* ty=Tensor[(14, 8, ?), uint16] */
}

def @func_7970() -> (Tensor[(588), float64],) {
  %424 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %425 = %424.2;
  (%425,)
}

def @func_5649(%var_5629: Tensor[(990), float32]) -> (Tensor[(15, 4, 10), bool], Tensor[(330, 3), float32], Tensor[(156), int8], Tensor[(9, 10, 11), uint64], Tensor[(15, 4, 10), float32]) {
  %426 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
  %427 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(15, 4, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 4, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %430 = cast(meta[relay.Constant][34] /* ty=Tensor[(156), int8] */, dtype="int8") /* ty=Tensor[(156), int8] */;
  %431 = cast(%var_5629, dtype="float32") /* ty=Tensor[(990), float32] */;
  %432 = reshape(%430, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), int8] */;
  %433 = reshape(%431, newshape=[330, 3]) /* ty=Tensor[(330, 3), float32] */;
  %434 = @func_3243(%432, %433) /* ty=(Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) */;
  %435 = cast(meta[relay.Constant][34] /* ty=Tensor[(156), int8] */, dtype="int8") /* ty=Tensor[(156), int8] */;
  %436 = %434.3;
  %437 = cast(%436, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
  %438 = reshape(%435, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), int8] */;
  %439 = reshape(%437, newshape=[330, 3]) /* ty=Tensor[(330, 3), float32] */;
  %440 = @func_3243(%438, %439) /* ty=(Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) */;
  %441 = %440.2;
  %442 = cast(%var_5629, dtype="uint64") /* ty=Tensor[(990), uint64] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="uint64") /* ty=Tensor[(9, 10, 11), uint64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %446 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 4, 10), bool] */, dtype="float32") /* ty=Tensor[(15, 4, 10), float32] */;
  %447 = logical_and(%428, %429) /* ty=Tensor[(15, 4, 10), bool] */;
  %448 = multiply(%444, %445) /* ty=Tensor[(9, 10, 11), uint64] */;
  %449 = asin(%446) /* ty=Tensor[(15, 4, 10), float32] */;
  (%447, %436, meta[relay.Constant][34] /* ty=Tensor[(156), int8] */, %448, %449)
}

def @func_8936(%var_8928: Tensor[(84), float32]) -> (Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 8, ?), uint16], Tensor[(14, 105), float64], Tensor[(88), float32], Tensor[(14, 8, 13), int16], Tensor[(770), float32], Tensor[(77, 10), float32], Tensor[(14, 9, 12), bool], Tensor[(26), float32], Tensor[(330, 3), float32], Tensor[(84), float32], Tensor[(260), float32]) {
  %450 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %453 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
  %454 = @func_8402() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %455 = %453.0;
  %456 = cast(%455, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %457 = reshape(%456, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
  %458 = @func_8352(%457) /* ty=(Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 105), float64]) */;
  %459 = @func_8226() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */;
  %460 = @func_8684() /* ty=(Tensor[(14, 8, 13), int16], Tensor[(14, 8, 13), float32]) */;
  %461 = cast(meta[relay.Constant][35] /* ty=Tensor[(77, 10), float32] */, dtype="float32") /* ty=Tensor[(77, 10), float32] */;
  %462 = reshape(%461, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %463 = @func_8752(%462) /* ty=(Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */;
  %464 = cast(meta[relay.Constant][36] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
  %465 = cast(meta[relay.Constant][37] /* ty=Tensor[(330, 3), float32] */, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
  %466 = cast(%451, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %467 = cast(%var_8928, dtype="float32") /* ty=Tensor[(84), float32] */;
  %468 = cast(meta[relay.Constant][38] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %469 = reshape(%464, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %470 = reshape(%465, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %471 = reshape(%466, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %472 = reshape(%467, newshape=[84, 1]) /* ty=Tensor[(84, 1), float32] */;
  %473 = reshape(%468, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %474 = @func_7462(%469, %470, %471, %472, %473) /* ty=(Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) */;
  %475 = asinh(%452) /* ty=Tensor[(15, 6, 15), float64] */;
  %476 = %454.0;
  %477 = %458.2;
  %478 = %459.3;
  %479 = %460.0;
  %480 = %463.1;
  %481 = %474.6;
  (%475, %455, %476, %477, %478, %479, %480, meta[relay.Constant][35] /* ty=Tensor[(77, 10), float32] */, %481, meta[relay.Constant][36] /* ty=Tensor[(26), float32] */, meta[relay.Constant][37] /* ty=Tensor[(330, 3), float32] */, %var_8928, meta[relay.Constant][38] /* ty=Tensor[(260), float32] */)
}

def @func_2491(%var_2426: Tensor[(3, 5, 8), float64], %var_2427: Tensor[(3, 5, 8), float64]) -> (Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) {
  %482 = cast(%var_2427, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %483 = shape_of(%var_2426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_2426, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = greater_equal(%484, %485) /* ty=Tensor[(3, 5, 8), bool] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(3, 5, 8), float64] */;
  %488 = acos(%487) /* ty=Tensor[(3, 5, 8), float64] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %490 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %491 = reshape(%490, newshape=[]) /* ty=int32 */;
  %492 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 180), uint32] */, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %493 = reshape(%492, newshape=[5, 12, 6]) /* ty=Tensor[(5, 12, 6), uint32] */;
  %494 = @func_1890(%493) /* ty=(Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) */;
  %495 = log2(%489) /* ty=Tensor[(3, 5, 8), float32] */;
  %496 = @func_195(%491) /* ty=Tensor[(14, 9, 12), bool] */;
  %497 = %494.1;
  (%495, %496, 1 /* ty=int32 */, %497, meta[relay.Constant][39] /* ty=Tensor[(2, 180), uint32] */)
}

def @func_5135(%var_5114: Tensor[(6, 10, 4), float64], %var_5131: Tensor[(84), float32]) -> (Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) {
  %498 = cast(%var_5114, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
  %499 = asin(%498) /* ty=Tensor[(6, 10, 4), float64] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
  %501 = cast(%var_5131, dtype="float32") /* ty=Tensor[(84), float32] */;
  %502 = reshape(%501, newshape=[3, 7, 4]) /* ty=Tensor[(3, 7, 4), float32] */;
  %503 = log(%500) /* ty=Tensor[(6, 10, 4), float32] */;
  %504 = @func_2937(%502) /* ty=Tensor[(3, 7, 4), float64] */;
  (%503, %504, %var_5131)
}

def @func_7768(%var_7766: Tensor[(40, 8), int8]) -> (bool, Tensor[(10, 2, 16), uint64], Tensor[(40, 8), int8]) {
  %505 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %506 = cast(%var_7766, dtype="int8") /* ty=Tensor[(40, 8), int8] */;
  %507 = cast(%var_7766, dtype="int8") /* ty=Tensor[(40, 8), int8] */;
  %508 = reshape(%506, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %509 = reshape(%507, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %510 = %505.1;
  %511 = @func_2378(%508, %509) /* ty=Tensor[(10, 2, 16), uint64] */;
  (%510, %511, %var_7766)
}

def @func_7556() -> (Tensor[(14, 8, ?), uint16],) {
  %512 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %513 = %512.0;
  (%513,)
}

def @func_8581(%var_8544: Tensor[(7, 2, 16), bool]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64], Tensor[(14, 8, ?), float64]) {
  %514 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %515 = %514.1;
  %516 = cast(%515, dtype="float64") /* ty=float64 */;
  %517 = cast(%var_8544, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %518 = cast(%var_8544, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
  %519 = @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */;
  %520 = add(%516, %517) /* ty=Tensor[(7, 2, 16), float64] */;
  %521 = atanh(%518) /* ty=Tensor[(7, 2, 16), float64] */;
  %522 = %519.0;
  (%520, %521, %522)
}

def @func_3591(%var_3552: Tensor[(8, 11, 1), float32]) -> (Tensor[(8, 11, ?), float64], Tensor[(8, 11, ?), bool]) {
  %523 = cast(%var_3552, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
  %524 = log2(%523) /* ty=Tensor[(8, 11, 1), float32] */;
  %525 = cast(%var_3552, dtype="float64") /* ty=Tensor[(8, 11, 1), float64] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="float64") /* ty=Tensor[(8, 11, 1), float64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %529 = cast(%524, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %530 = shape_of(%var_3552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_3552, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %533 = power(%527, %528) /* ty=Tensor[(8, 11, ?), float64] */;
  %534 = greater(%531, %532) /* ty=Tensor[(8, 11, ?), bool] */;
  (%533, %534)
}

def @func_8653() -> Tensor[(2, 5, 11), uint32] {
  %535 = @func_8123() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) */;
  %535.1
}

def @func_7736() -> (Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) {
  %536 = cast(meta[relay.Constant][40] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
  %537 = cast(meta[relay.Constant][40] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
  %538 = reshape(%536, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %539 = reshape(%537, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %540 = @func_7715() /* ty=Tensor[(14, 8, ?), float64] */;
  %541 = @func_2378(%538, %539) /* ty=Tensor[(10, 2, 16), uint64] */;
  (%540, %541, meta[relay.Constant][40] /* ty=Tensor[(320), int8] */)
}

def @func_9361() -> (Tensor[(588), float64],) {
  %542 = @func_7970() /* ty=(Tensor[(588), float64],) */;
  %543 = %542.0;
  (%543,)
}

def @func_7715() -> Tensor[(14, 8, ?), float64] {
  %544 = @func_7599() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %545 = %544.0;
  %546 = cast(%545, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  sinh(%546) /* ty=Tensor[(14, 8, ?), float64] */
}

def @func_9631(%var_9626: Tensor[(3, 15, 12), uint8], %var_9627: Tensor[(3, 15, 12), uint8]) -> (Tensor[(3, 15, 12), bool],) {
  %547 = cast(%var_9627, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %548 = shape_of(%var_9626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_9626, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = less_equal(%549, %550) /* ty=Tensor[(3, 15, 12), bool] */;
  (%551,)
}

def @func_7821(%var_7808: Tensor[(320), int8], %var_7814: Tensor[(240, 4), uint8]) -> (Tensor[(14, 8, ?), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(12, 5, 16), uint8], Tensor[(240, 4), uint8], Tensor[(14, 8, ?), float64]) {
  %552 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %553 = %552.0;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %555 = cast(%var_7808, dtype="int8") /* ty=Tensor[(320), int8] */;
  %556 = cast(%var_7808, dtype="int8") /* ty=Tensor[(320), int8] */;
  %557 = reshape(%555, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %558 = reshape(%556, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %559 = cast(%var_7814, dtype="uint8") /* ty=Tensor[(240, 4), uint8] */;
  %560 = cast(%var_7814, dtype="uint8") /* ty=Tensor[(240, 4), uint8] */;
  %561 = reshape(%559, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %562 = reshape(%560, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %563 = @func_7220(%561, %562) /* ty=(Tensor[(12, 5, 16), uint8],) */;
  %564 = cast(%553, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  %565 = atan(%554) /* ty=Tensor[(14, 8, ?), float32] */;
  %566 = @func_2378(%557, %558) /* ty=Tensor[(10, 2, 16), uint64] */;
  %567 = %563.0;
  %568 = cos(%564) /* ty=Tensor[(14, 8, ?), float64] */;
  (%565, %566, %var_7808, %567, %var_7814, %568)
}

def @func_8402() -> (Tensor[(14, 8, ?), uint16],) {
  %569 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %570 = %569.0;
  (%570,)
}

def @func_8859(%var_8855: Tensor[(9), uint32]) -> (Tensor[(14, 8, ?), uint16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32]) {
  %571 = @func_7599() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %572 = cast(meta[relay.Constant][41] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %573 = cast(%var_8855, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %574 = cast(meta[relay.Constant][42] /* ty=Tensor[(7, 110), float32] */, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
  %575 = reshape(%572, newshape=[]) /* ty=uint32 */;
  %576 = reshape(%573, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
  %577 = reshape(%574, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %578 = @func_1061(%575, %576, %577) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
  %579 = %571.0;
  %580 = %578.0;
  (%579, %580, meta[relay.Constant][41] /* ty=uint32 */, %var_8855, meta[relay.Constant][42] /* ty=Tensor[(7, 110), float32] */)
}

def @func_8538(%var_8534: Tensor[(11, 7, 4), float32]) -> Tensor[(11, 7, 4), float32] {
  %581 = cast(%var_8534, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
  tan(%581) /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_8961() -> Tensor[(14, 8, ?), uint16] {
  %582 = @func_7599() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %582.0
}

def @func_6404(%var_6379: Tensor[(2, 5, 11), int8], %var_6380: Tensor[(2, 5, 11), int8]) -> Tensor[(2, 5, 11), uint32] {
  %583 = cast(%var_6380, dtype="int8") /* ty=Tensor[(2, 5, 11), int8] */;
  %584 = shape_of(%var_6379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%var_6379, dtype="int8") /* ty=Tensor[(2, 5, 11), int8] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %587 = left_shift(%585, %586) /* ty=Tensor[(2, 5, 11), int8] */;
  %588 = cast(%587, dtype="uint32") /* ty=Tensor[(2, 5, 11), uint32] */;
  %589 = shape_of(%var_6380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%var_6380, dtype="uint32") /* ty=Tensor[(2, 5, 11), uint32] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%590, %591) /* ty=Tensor[(2, 5, 11), uint32] */
}

def @func_4499(%var_4431: Tensor[(15, 1, 7), int64], %var_4432: Tensor[(15, 3, 7), int64]) -> (Tensor[(15, 3, 7), bool], Tensor[(9, 10, 11), float32], Tensor[(990), float32], Tensor[(11, 7, 10), uint8], Tensor[(770), float32]) {
  %592 = cast(%var_4431, dtype="bool") /* ty=Tensor[(15, 1, 7), bool] */;
  %593 = cast(%var_4432, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %594 = cast(meta[relay.Constant][43] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %595 = reshape(%594, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), float32] */;
  %596 = @func_2835(%595) /* ty=(Tensor[(9, 10, 11), float32],) */;
  %597 = cast(meta[relay.Constant][44] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %598 = reshape(%597, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
  %599 = @func_430(%598) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */;
  %600 = greater_equal(%592, %593) /* ty=Tensor[(15, 3, 7), bool] */;
  %601 = %596.0;
  %602 = %599.1;
  (%600, %601, meta[relay.Constant][43] /* ty=Tensor[(990), float32] */, %602, meta[relay.Constant][44] /* ty=Tensor[(770), float32] */)
}

def @func_8790(%var_8781: Tensor[(1, 8, 11), float32]) -> (Tensor[(2, 8, 11), float32],) {
  %603 = cast(%var_8781, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %604 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 11), float32] */;
  %605 = floor_divide(%603, %604) /* ty=Tensor[(2, 8, 11), float32] */;
  (%605,)
}

def @func_9054() -> (Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) {
  %606 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 6), float64] */;
  %607 = asin(%606) /* ty=Tensor[(3, 5, 6), float64] */;
  %608 = @func_7715() /* ty=Tensor[(14, 8, ?), float64] */;
  (%607, %608)
}

def @func_6082(%var_6069: Tensor[(3, 5, 9), float32], %var_6078: Tensor[(3, 5, 9), float32]) -> Tensor[(3, 5, 9), int8] {
  %609 = cast(%var_6069, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  %610 = asin(%609) /* ty=Tensor[(3, 5, 9), float32] */;
  %611 = cast(%var_6078, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%613, %614) /* ty=Tensor[(3, 5, 9), int8] */
}

def @func_6846(%var_6841: Tensor[(6, 9, 13), uint8], %var_6842: Tensor[(6, 9, 13), uint8]) -> (Tensor[(6, 9, 13), bool],) {
  %615 = cast(%var_6842, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %616 = shape_of(%var_6841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_6841, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = less(%617, %618) /* ty=Tensor[(6, 9, 13), bool] */;
  (%619,)
}

def @func_7873(%var_7857: uint32, %var_7858: Tensor[(9), uint32], %var_7859: Tensor[(770), float32]) -> (Tensor[(10, 2, 16), uint64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) {
  %620 = @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */;
  %621 = cast(%var_7857, dtype="uint32") /* ty=uint32 */;
  %622 = cast(%var_7858, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %623 = cast(%var_7859, dtype="float32") /* ty=Tensor[(770), float32] */;
  %624 = reshape(%621, newshape=[]) /* ty=uint32 */;
  %625 = reshape(%622, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
  %626 = reshape(%623, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %627 = @func_1061(%624, %625, %626) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
  %628 = %620.1;
  %629 = %627.2;
  (%628, %629, %var_7857, %var_7858, %var_7859)
}

def @func_6997(%var_6944: Tensor[(14, 3, 14), float64]) -> (Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) {
  %630 = cast(%var_6944, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
  %631 = tan(%630) /* ty=Tensor[(14, 3, 14), float64] */;
  %632 = cast(%var_6944, dtype="uint8") /* ty=Tensor[(14, 3, 14), uint8] */;
  %633 = shape_of(%631, dtype="int32") /* ty=Tensor[(3), int32] */;
  %634 = cast(%631, dtype="uint8") /* ty=Tensor[(14, 3, 14), uint8] */;
  %635 = dyn.reshape(%632, %633, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %636 = multiply(%634, %635) /* ty=Tensor[(14, 3, 14), uint8] */;
  %637 = cast(%631, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %642 = cast(meta[relay.Constant][47] /* ty=Tensor[(1, 1350), bool] */, dtype="bool") /* ty=Tensor[(1, 1350), bool] */;
  %643 = reshape(%641, newshape=[]) /* ty=bool */;
  %644 = reshape(%642, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
  %645 = less(%639, %640) /* ty=Tensor[(14, 3, 14), bool] */;
  %646 = @func_6131(%643, %644) /* ty=Tensor[(15, 6, 15), bool] */;
  (%645, %646, False /* ty=bool */, meta[relay.Constant][47] /* ty=Tensor[(1, 1350), bool] */)
}

def @func_7320(%var_7286: Tensor[(1, 7, 7), float64], %var_7316: Tensor[(1350), bool]) -> (Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) {
  %647 = cast(%var_7286, dtype="float64") /* ty=Tensor[(1, 7, 7), float64] */;
  %648 = acos(%647) /* ty=Tensor[(1, 7, 7), float64] */;
  %649 = cast(%648, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %650 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%var_7286, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = greater(%651, %652) /* ty=Tensor[(?, 7, 7), bool] */;
  %654 = cast(%653, dtype="bool") /* ty=Tensor[(?, 7, 7), bool] */;
  %655 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%648, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %658 = cast(%653, dtype="float32") /* ty=Tensor[(?, 7, 7), float32] */;
  %659 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %660 = cast(%var_7286, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %662 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %663 = cast(%var_7316, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %664 = reshape(%662, newshape=[]) /* ty=bool */;
  %665 = reshape(%663, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
  %666 = greater_equal(%656, %657) /* ty=Tensor[(?, 7, 7), bool] */;
  %667 = maximum(%660, %661) /* ty=Tensor[(?, 7, 7), float32] */;
  %668 = @func_6131(%664, %665) /* ty=Tensor[(15, 6, 15), bool] */;
  (%666, %667, %668, True /* ty=bool */, %var_7316)
}

def @func_1890(%var_1877: Tensor[(5, 12, 6), uint32]) -> (Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) {
  %669 = cast(meta[relay.Constant][48] /* ty=Tensor[(5, 12, 6), uint32] */, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %670 = shape_of(%var_1877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_1877, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %673 = less_equal(%671, %672) /* ty=Tensor[(5, 12, 6), bool] */;
  %674 = cast(%var_1877, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%673, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %679 = reshape(%678, newshape=[]) /* ty=int32 */;
  %680 = greater(%676, %677) /* ty=Tensor[(5, 12, 6), bool] */;
  %681 = @func_195(%679) /* ty=Tensor[(14, 9, 12), bool] */;
  (%680, %681, 7 /* ty=int32 */)
}

def @func_9427() -> Tensor[(15, 6, 15), uint32] {
  %682 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %683 = %682.1;
  %684 = cast(meta[relay.Constant][49] /* ty=Tensor[(15, 6, 15), bool] */, dtype="uint32") /* ty=Tensor[(15, 6, 15), uint32] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="uint32") /* ty=Tensor[(15, 6, 15), uint32] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%686, %687) /* ty=Tensor[(15, 6, 15), uint32] */
}

def @func_9285(%var_9234: Tensor[(588), float64], %var_9235: Tensor[(9), uint32], %var_9237: Tensor[(135), float32]) -> (Tensor[(588), float64], Tensor[(9), uint32], Tensor[(770), float32], Tensor[(135), float32], Tensor[(15, 6, 15), bool], Tensor[(1470), float64], Tensor[(88), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(14, 8, 135), bool]) {
  %688 = cast(meta[relay.Constant][51] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %689 = reshape(%688, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
  %690 = @func_8176(%689) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
  %691 = @func_8226() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */;
  %692 = cast(meta[relay.Constant][52] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
  %693 = cast(meta[relay.Constant][52] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
  %694 = reshape(%692, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %695 = reshape(%693, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %696 = @func_9054() /* ty=(Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) */;
  %697 = %696.1;
  %698 = cast(%var_9234, dtype="float64") /* ty=Tensor[(588), float64] */;
  %699 = cast(%var_9235, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %700 = cast(meta[relay.Constant][50] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %701 = cast(%var_9237, dtype="float32") /* ty=Tensor[(135), float32] */;
  %702 = reshape(%698, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %703 = reshape(%699, newshape=[9]) /* ty=Tensor[(9), uint32] */;
  %704 = reshape(%700, newshape=[77, 10]) /* ty=Tensor[(77, 10), float32] */;
  %705 = reshape(%701, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %706 = @func_7685(%702, %703, %704, %705) /* ty=(Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) */;
  %707 = %706.7;
  %708 = cast(%697, dtype="bool") /* ty=Tensor[(14, 8, ?), bool] */;
  %709 = cast(%707, dtype="bool") /* ty=Tensor[(135), bool] */;
  %710 = %690.0;
  %711 = %691.3;
  %712 = @func_2378(%694, %695) /* ty=Tensor[(10, 2, 16), uint64] */;
  %713 = greater(%708, %709) /* ty=Tensor[(14, 8, 135), bool] */;
  (%var_9234, %var_9235, meta[relay.Constant][50] /* ty=Tensor[(770), float32] */, %var_9237, %710, meta[relay.Constant][51] /* ty=Tensor[(1470), float64] */, %711, %712, meta[relay.Constant][52] /* ty=Tensor[(320), int8] */, %713)
}

def @func_6131(%var_6120: bool, %var_6121: Tensor[(15, 6, 15), bool]) -> Tensor[(15, 6, 15), bool] {
  %714 = cast(%var_6120, dtype="bool") /* ty=bool */;
  %715 = cast(%var_6121, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  logical_and(%714, %715) /* ty=Tensor[(15, 6, 15), bool] */
}

def @func_7060(%var_7051: Tensor[(10, 3, 6), float32]) -> Tensor[(10, 3, 6), float32] {
  %716 = cast(-2.36779f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %717 = cast(%var_7051, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  divide(%716, %717) /* ty=Tensor[(10, 3, 6), float32] */
}

def @func_430(%var_365: Tensor[(11, 7, 10), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) {
  %718 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %719 = shape_of(%var_365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%var_365, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %722 = cast(%var_365, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %723 = sigmoid(%722) /* ty=Tensor[(11, 7, 10), float32] */;
  %724 = cast(%var_365, dtype="uint8") /* ty=Tensor[(11, 7, 10), uint8] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="uint8") /* ty=Tensor[(11, 7, 10), uint8] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %728 = cast(%723, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %729 = tan(%728) /* ty=Tensor[(11, 7, 10), float32] */;
  %730 = cast(%723, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %734 = cast(%729, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %735 = asinh(%734) /* ty=Tensor[(11, 7, 10), float32] */;
  %736 = cast(%735, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %737 = cast(%var_365, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
  %738 = shape_of(%735, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%735, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = greater(%739, %740) /* ty=Tensor[(11, 7, 10), bool] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %743 = mod(%720, %721) /* ty=Tensor[(11, 7, 10), float32] */;
  %744 = bitwise_xor(%726, %727) /* ty=Tensor[(11, 7, 10), uint8] */;
  %745 = maximum(%732, %733) /* ty=Tensor[(11, 7, 10), uint32] */;
  %746 = exp(%736) /* ty=Tensor[(11, 7, 10), float64] */;
  %747 = erf(%742) /* ty=Tensor[(11, 7, 10), float32] */;
  (%743, %744, %745, %746, %747)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8179(%var_8177: Tensor[(1470), float64]) -> (Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) {
  @func_8176(%var_8177) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */
}

def @func_7323(%var_7321: Tensor[(1, 7, 7), float64], %var_7322: Tensor[(1350), bool]) -> (Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) {
  %22 = fn (%var_7286: Tensor[(1, 7, 7), float64], %var_7316: Tensor[(1350), bool]) -> (Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) {
    %0 = cast(%var_7286, dtype="float64") /* ty=Tensor[(1, 7, 7), float64] */;
    %1 = acos(%0) /* ty=Tensor[(1, 7, 7), float64] */;
    %2 = cast(%1, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
    %3 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %4 = cast(%var_7286, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %6 = greater(%4, %5) /* ty=Tensor[(?, 7, 7), bool] */;
    %7 = cast(%6, dtype="bool") /* ty=Tensor[(?, 7, 7), bool] */;
    %8 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%1, dtype="bool") /* ty=Tensor[(1, 7, 7), bool] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %11 = cast(%6, dtype="float32") /* ty=Tensor[(?, 7, 7), float32] */;
    %12 = shape_of(%var_7286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%var_7286, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %15 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %16 = cast(%var_7316, dtype="bool") /* ty=Tensor[(1350), bool] */;
    %17 = reshape(%15, newshape=[]) /* ty=bool */;
    %18 = reshape(%16, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
    %19 = greater_equal(%9, %10) /* ty=Tensor[(?, 7, 7), bool] */;
    %20 = maximum(%13, %14) /* ty=Tensor[(?, 7, 7), float32] */;
    %21 = @func_6131(%17, %18) /* ty=Tensor[(15, 6, 15), bool] */;
    (%19, %20, %21, True /* ty=bool */, %var_7316)
  };
  %22(%var_7321, %var_7322) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */
}

def @func_6850(%var_6848: Tensor[(6, 9, 13), uint8], %var_6849: Tensor[(6, 9, 13), uint8]) -> (Tensor[(6, 9, 13), bool],) {
  @func_6846(%var_6848, %var_6849) /* ty=(Tensor[(6, 9, 13), bool],) */
}

def @func_2939(%var_2938: Tensor[(3, 7, 4), float32]) -> Tensor[(3, 7, 4), float64] {
  %26 = fn (%var_2926: Tensor[(3, 7, 4), float32]) -> Tensor[(3, 7, 4), float64] {
    %23 = cast(%var_2926, dtype="float32") /* ty=Tensor[(3, 7, 4), float32] */;
    %24 = rsqrt(%23) /* ty=Tensor[(3, 7, 4), float32] */;
    %25 = cast(%24, dtype="float64") /* ty=Tensor[(3, 7, 4), float64] */;
    sin(%25) /* ty=Tensor[(3, 7, 4), float64] */
  };
  %26(%var_2938) /* ty=Tensor[(3, 7, 4), float64] */
}

def @func_7770(%var_7769: Tensor[(40, 8), int8]) -> (bool, Tensor[(10, 2, 16), uint64], Tensor[(40, 8), int8]) {
  %34 = fn (%var_7766: Tensor[(40, 8), int8]) -> (bool, Tensor[(10, 2, 16), uint64], Tensor[(40, 8), int8]) {
    %27 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
    %28 = cast(%var_7766, dtype="int8") /* ty=Tensor[(40, 8), int8] */;
    %29 = cast(%var_7766, dtype="int8") /* ty=Tensor[(40, 8), int8] */;
    %30 = reshape(%28, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
    %31 = reshape(%29, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
    %32 = %27.1;
    %33 = @func_2378(%30, %31) /* ty=Tensor[(10, 2, 16), uint64] */;
    (%32, %33, %var_7766)
  };
  %34(%var_7769) /* ty=(bool, Tensor[(10, 2, 16), uint64], Tensor[(40, 8), int8]) */
}

def @func_8653() -> Tensor[(2, 5, 11), uint32] {
  %35 = @func_8123() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) */;
  %35.1
}

def @func_8125() -> (Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) {
  @func_8123() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) */
}

def @func_7549(%var_7541: Tensor[(4, 16, 5), float32]) -> Tensor[(4, 16, 5), float32] {
  %36 = cast(%var_7541, dtype="float32") /* ty=Tensor[(4, 16, 5), float32] */;
  tan(%36) /* ty=Tensor[(4, 16, 5), float32] */
}

def @func_3247(%var_3245: Tensor[(4, 3, 13), int8], %var_3246: Tensor[(330, 3), float32]) -> (Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) {
  @func_3243(%var_3245, %var_3246) /* ty=(Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) */
}

def @func_2495(%var_2493: Tensor[(3, 5, 8), float64], %var_2494: Tensor[(3, 5, 8), float64]) -> (Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) {
  @func_2491(%var_2493, %var_2494) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */
}

def @func_7513() -> (Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) {
  @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */
}

def @func_9361() -> (Tensor[(588), float64],) {
  %37 = @func_7970() /* ty=(Tensor[(588), float64],) */;
  %38 = %37.0;
  (%38,)
}

def @func_9696(%var_9694: Tensor[(2, 112), bool], %var_9695: Tensor[(770), float32]) -> (Tensor[(14, 8, ?), float64], Tensor[(9), uint32], Tensor[(2, 112), bool], Tensor[(770), float32]) {
  %49 = fn (%var_9661: Tensor[(2, 112), bool], %var_9662: Tensor[(770), float32]) -> (Tensor[(14, 8, ?), float64], Tensor[(9), uint32], Tensor[(2, 112), bool], Tensor[(770), float32]) {
    %39 = @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */;
    %40 = cast(%var_9661, dtype="bool") /* ty=Tensor[(2, 112), bool] */;
    %41 = cast(%var_9662, dtype="float32") /* ty=Tensor[(770), float32] */;
    %42 = reshape(%40, newshape=[224]) /* ty=Tensor[(224), bool] */;
    %43 = reshape(%41, newshape=[7, 110]) /* ty=Tensor[(7, 110), float32] */;
    %44 = @func_8630(%42, %43) /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(224), bool], Tensor[(9), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32], Tensor[(7, 2, 16), bool]) */;
    %45 = cast(%var_9662, dtype="float32") /* ty=Tensor[(770), float32] */;
    %46 = %39.0;
    %47 = %44.2;
    %48 = atan(%45) /* ty=Tensor[(770), float32] */;
    (%46, %47, %var_9661, %48)
  };
  %49(%var_9694, %var_9695) /* ty=(Tensor[(14, 8, ?), float64], Tensor[(9), uint32], Tensor[(2, 112), bool], Tensor[(770), float32]) */
}

def @func_6846(%var_6841: Tensor[(6, 9, 13), uint8], %var_6842: Tensor[(6, 9, 13), uint8]) -> (Tensor[(6, 9, 13), bool],) {
  %50 = cast(%var_6842, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %51 = shape_of(%var_6841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %52 = cast(%var_6841, dtype="bool") /* ty=Tensor[(6, 9, 13), bool] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %54 = less(%52, %53) /* ty=Tensor[(6, 9, 13), bool] */;
  (%54,)
}

def @func_8989() -> Tensor[(14, 8, ?), uint16] {
  %55 = fn () -> Tensor[(14, 8, ?), uint16] {
    @func_8961() /* ty=Tensor[(14, 8, ?), uint16] */
  };
  %55() /* ty=Tensor[(14, 8, ?), uint16] */
}

def @func_8403() -> (Tensor[(14, 8, ?), uint16],) {
  %58 = fn () -> (Tensor[(14, 8, ?), uint16],) {
    %56 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %57 = %56.0;
    (%57,)
  };
  %58() /* ty=(Tensor[(14, 8, ?), uint16],) */
}

def @func_2015(%var_2009: int64, %var_2010: Tensor[(2, 1), int64]) -> Tensor[(2, 1), bool] {
  %59 = cast(%var_2009, dtype="bool") /* ty=bool */;
  %60 = cast(%var_2010, dtype="bool") /* ty=Tensor[(2, 1), bool] */;
  less(%59, %60) /* ty=Tensor[(2, 1), bool] */
}

def @func_8861(%var_8860: Tensor[(9), uint32]) -> (Tensor[(14, 8, ?), uint16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32]) {
  %71 = fn (%var_8855: Tensor[(9), uint32]) -> (Tensor[(14, 8, ?), uint16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32]) {
    %61 = @func_7599() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %62 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %63 = cast(%var_8855, dtype="uint32") /* ty=Tensor[(9), uint32] */;
    %64 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 110), float32] */, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
    %65 = reshape(%62, newshape=[]) /* ty=uint32 */;
    %66 = reshape(%63, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
    %67 = reshape(%64, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %68 = @func_1061(%65, %66, %67) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
    %69 = %61.0;
    %70 = %68.0;
    (%69, %70, meta[relay.Constant][0] /* ty=uint32 */, %var_8855, meta[relay.Constant][1] /* ty=Tensor[(7, 110), float32] */)
  };
  %71(%var_8860) /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32]) */
}

def @func_8754(%var_8753: Tensor[(770), float32]) -> (Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) {
  %83 = fn (%var_8743: Tensor[(770), float32]) -> (Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) {
    %72 = @func_8653() /* ty=Tensor[(2, 5, 11), uint32] */;
    %73 = cast(%72, dtype="float64") /* ty=Tensor[(2, 5, 11), float64] */;
    %74 = cast(meta[relay.Constant][2] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %75 = cast(meta[relay.Constant][3] /* ty=Tensor[(9), uint32] */, dtype="uint32") /* ty=Tensor[(9), uint32] */;
    %76 = cast(%var_8743, dtype="float32") /* ty=Tensor[(770), float32] */;
    %77 = reshape(%74, newshape=[]) /* ty=uint32 */;
    %78 = reshape(%75, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
    %79 = reshape(%76, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %80 = @func_1061(%77, %78, %79) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
    %81 = asinh(%73) /* ty=Tensor[(2, 5, 11), float64] */;
    %82 = %80.2;
    (%81, %82, meta[relay.Constant][2] /* ty=uint32 */, meta[relay.Constant][3] /* ty=Tensor[(9), uint32] */, %var_8743)
  };
  %83(%var_8753) /* ty=(Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */
}

def @func_8056() -> (Tensor[(15, 6, 15), bool],) {
  %86 = fn () -> (Tensor[(15, 6, 15), bool],) {
    %84 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
    %85 = %84.1;
    (%85,)
  };
  %86() /* ty=(Tensor[(15, 6, 15), bool],) */
}

def @func_7063(%var_7061: Tensor[(10, 3, 6), float32]) -> Tensor[(10, 3, 6), float32] {
  @func_7060(%var_7061) /* ty=Tensor[(10, 3, 6), float32] */
}

def @func_9056() -> (Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) {
  @func_9054() /* ty=(Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) */
}

def @func_5651(%var_5650: Tensor[(990), float32]) -> (Tensor[(15, 4, 10), bool], Tensor[(330, 3), float32], Tensor[(156), int8], Tensor[(9, 10, 11), uint64], Tensor[(15, 4, 10), float32]) {
  %111 = fn (%var_5629: Tensor[(990), float32]) -> (Tensor[(15, 4, 10), bool], Tensor[(330, 3), float32], Tensor[(156), int8], Tensor[(9, 10, 11), uint64], Tensor[(15, 4, 10), float32]) {
    %87 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 4, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
    %88 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(15, 4, 10), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 4, 10), bool] */, dtype="bool") /* ty=Tensor[(15, 4, 10), bool] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %91 = cast(meta[relay.Constant][6] /* ty=Tensor[(156), int8] */, dtype="int8") /* ty=Tensor[(156), int8] */;
    %92 = cast(%var_5629, dtype="float32") /* ty=Tensor[(990), float32] */;
    %93 = reshape(%91, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), int8] */;
    %94 = reshape(%92, newshape=[330, 3]) /* ty=Tensor[(330, 3), float32] */;
    %95 = @func_3243(%93, %94) /* ty=(Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) */;
    %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(156), int8] */, dtype="int8") /* ty=Tensor[(156), int8] */;
    %97 = %95.3;
    %98 = cast(%97, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
    %99 = reshape(%96, newshape=[4, 3, 13]) /* ty=Tensor[(4, 3, 13), int8] */;
    %100 = reshape(%98, newshape=[330, 3]) /* ty=Tensor[(330, 3), float32] */;
    %101 = @func_3243(%99, %100) /* ty=(Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) */;
    %102 = %101.2;
    %103 = cast(%var_5629, dtype="uint64") /* ty=Tensor[(990), uint64] */;
    %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
    %105 = cast(%102, dtype="uint64") /* ty=Tensor[(9, 10, 11), uint64] */;
    %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %107 = cast(meta[relay.Constant][5] /* ty=Tensor[(15, 4, 10), bool] */, dtype="float32") /* ty=Tensor[(15, 4, 10), float32] */;
    %108 = logical_and(%89, %90) /* ty=Tensor[(15, 4, 10), bool] */;
    %109 = multiply(%105, %106) /* ty=Tensor[(9, 10, 11), uint64] */;
    %110 = asin(%107) /* ty=Tensor[(15, 4, 10), float32] */;
    (%108, %97, meta[relay.Constant][6] /* ty=Tensor[(156), int8] */, %109, %110)
  };
  %111(%var_5650) /* ty=(Tensor[(15, 4, 10), bool], Tensor[(330, 3), float32], Tensor[(156), int8], Tensor[(9, 10, 11), uint64], Tensor[(15, 4, 10), float32]) */
}

def @func_8355(%var_8353: Tensor[(15, 6, 15), bool]) -> (Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 105), float64]) {
  @func_8352(%var_8353) /* ty=(Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 105), float64]) */
}

def @func_7556() -> (Tensor[(14, 8, ?), uint16],) {
  %112 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %113 = %112.0;
  (%113,)
}

def @func_7971() -> (Tensor[(588), float64],) {
  %116 = fn () -> (Tensor[(588), float64],) {
    %114 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
    %115 = %114.2;
    (%115,)
  };
  %116() /* ty=(Tensor[(588), float64],) */
}

def @func_9178() -> (Tensor[(14, 8, ?), uint16],) {
  %118 = fn () -> (Tensor[(14, 8, ?), uint16],) {
    %117 = @func_8988() /* ty=Tensor[(14, 8, ?), uint16] */;
    (%117,)
  };
  %118() /* ty=(Tensor[(14, 8, ?), uint16],) */
}

def @func_9544(%var_9529: Tensor[(5, 16, 16), float64]) -> Tensor[(5, 16, 16), float64] {
  %119 = cast(%var_9529, dtype="float64") /* ty=Tensor[(5, 16, 16), float64] */;
  acosh(%119) /* ty=Tensor[(5, 16, 16), float64] */
}

def @func_9756() -> (Tensor[(15, 6, 15), bool], Tensor[(15, 6, 15), bool], Tensor[(?, 7, 7), bool], Tensor[(7, 7), float64], Tensor[(14, 8, ?), float32]) {
  %136 = fn () -> (Tensor[(15, 6, 15), bool], Tensor[(15, 6, 15), bool], Tensor[(?, 7, 7), bool], Tensor[(7, 7), float64], Tensor[(14, 8, ?), float32]) {
    %120 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
    %121 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
    %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
    %123 = %121.1;
    %124 = cast(%123, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
    %125 = reshape(%122, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), float64] */;
    %126 = reshape(%124, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
    %127 = @func_7320(%125, %126) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */;
    %128 = @func_8402() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %129 = %128.0;
    %130 = cast(%129, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
    %131 = tan(%130) /* ty=Tensor[(14, 8, ?), float32] */;
    %132 = cast(%131, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
    %133 = %120.0;
    %134 = %127.0;
    %135 = sin(%132) /* ty=Tensor[(14, 8, ?), float32] */;
    (%133, %123, %134, meta[relay.Constant][7] /* ty=Tensor[(7, 7), float64] */, %135)
  };
  %136() /* ty=(Tensor[(15, 6, 15), bool], Tensor[(15, 6, 15), bool], Tensor[(?, 7, 7), bool], Tensor[(7, 7), float64], Tensor[(14, 8, ?), float32]) */
}

def @func_6508(%var_6505: Tensor[(7, 12, 4), uint16], %var_6506: Tensor[(240), float64], %var_6507: Tensor[(84), float32]) -> (Tensor[(7, 12, 4), bool], Tensor[(2, 180), uint32], Tensor[(120), float64], Tensor[(3, 7, 4), float64], Tensor[(240), float64], Tensor[(84), float32], Tensor[(14, 9, 12), bool], int32) {
  @func_6503(%var_6505, %var_6506, %var_6507) /* ty=(Tensor[(7, 12, 4), bool], Tensor[(2, 180), uint32], Tensor[(120), float64], Tensor[(3, 7, 4), float64], Tensor[(240), float64], Tensor[(84), float32], Tensor[(14, 9, 12), bool], int32) */
}

def @func_9289(%var_9286: Tensor[(588), float64], %var_9287: Tensor[(9), uint32], %var_9288: Tensor[(135), float32]) -> (Tensor[(588), float64], Tensor[(9), uint32], Tensor[(770), float32], Tensor[(135), float32], Tensor[(15, 6, 15), bool], Tensor[(1470), float64], Tensor[(88), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(14, 8, 135), bool]) {
  %163 = fn (%var_9234: Tensor[(588), float64], %var_9235: Tensor[(9), uint32], %var_9237: Tensor[(135), float32]) -> (Tensor[(588), float64], Tensor[(9), uint32], Tensor[(770), float32], Tensor[(135), float32], Tensor[(15, 6, 15), bool], Tensor[(1470), float64], Tensor[(88), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(14, 8, 135), bool]) {
    %137 = cast(meta[relay.Constant][9] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
    %138 = reshape(%137, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
    %139 = @func_8176(%138) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
    %140 = @func_8226() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */;
    %141 = cast(meta[relay.Constant][10] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
    %142 = cast(meta[relay.Constant][10] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
    %143 = reshape(%141, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
    %144 = reshape(%142, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
    %145 = @func_9054() /* ty=(Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) */;
    %146 = %145.1;
    %147 = cast(%var_9234, dtype="float64") /* ty=Tensor[(588), float64] */;
    %148 = cast(%var_9235, dtype="uint32") /* ty=Tensor[(9), uint32] */;
    %149 = cast(meta[relay.Constant][8] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
    %150 = cast(%var_9237, dtype="float32") /* ty=Tensor[(135), float32] */;
    %151 = reshape(%147, newshape=[588]) /* ty=Tensor[(588), float64] */;
    %152 = reshape(%148, newshape=[9]) /* ty=Tensor[(9), uint32] */;
    %153 = reshape(%149, newshape=[77, 10]) /* ty=Tensor[(77, 10), float32] */;
    %154 = reshape(%150, newshape=[135]) /* ty=Tensor[(135), float32] */;
    %155 = @func_7685(%151, %152, %153, %154) /* ty=(Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) */;
    %156 = %155.7;
    %157 = cast(%146, dtype="bool") /* ty=Tensor[(14, 8, ?), bool] */;
    %158 = cast(%156, dtype="bool") /* ty=Tensor[(135), bool] */;
    %159 = %139.0;
    %160 = %140.3;
    %161 = @func_2378(%143, %144) /* ty=Tensor[(10, 2, 16), uint64] */;
    %162 = greater(%157, %158) /* ty=Tensor[(14, 8, 135), bool] */;
    (%var_9234, %var_9235, meta[relay.Constant][8] /* ty=Tensor[(770), float32] */, %var_9237, %159, meta[relay.Constant][9] /* ty=Tensor[(1470), float64] */, %160, %161, meta[relay.Constant][10] /* ty=Tensor[(320), int8] */, %162)
  };
  %163(%var_9286, %var_9287, %var_9288) /* ty=(Tensor[(588), float64], Tensor[(9), uint32], Tensor[(770), float32], Tensor[(135), float32], Tensor[(15, 6, 15), bool], Tensor[(1470), float64], Tensor[(88), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(14, 8, 135), bool]) */
}

def @func_7685(%var_7620: Tensor[(588), float64], %var_7659: Tensor[(9), uint32], %var_7660: Tensor[(77, 10), float32], %var_7680: Tensor[(135), float32]) -> (Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) {
  %164 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
  %165 = %164.2;
  %166 = cast(%var_7620, dtype="float64") /* ty=Tensor[(588), float64] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %168 = cast(%165, dtype="float64") /* ty=Tensor[(588), float64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?), float64] */;
  %170 = cast(%var_7620, dtype="int16") /* ty=Tensor[(588), int16] */;
  %171 = shape_of(%165, dtype="int32") /* ty=Tensor[(1), int32] */;
  %172 = cast(%165, dtype="int16") /* ty=Tensor[(588), int16] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?), int16] */;
  %174 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %175 = cast(%var_7659, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %176 = cast(%var_7660, dtype="float32") /* ty=Tensor[(77, 10), float32] */;
  %177 = reshape(%174, newshape=[]) /* ty=uint32 */;
  %178 = reshape(%175, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
  %179 = reshape(%176, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %180 = @func_1061(%177, %178, %179) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
  %181 = cast(%var_7660, dtype="float64") /* ty=Tensor[(77, 10), float64] */;
  %182 = cast(%var_7680, dtype="float32") /* ty=Tensor[(135), float32] */;
  %183 = cast(%var_7680, dtype="float32") /* ty=Tensor[(135), float32] */;
  %184 = reshape(%182, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %185 = reshape(%183, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %186 = mod(%168, %169) /* ty=Tensor[(588), float64] */;
  %187 = multiply(%172, %173) /* ty=Tensor[(588), int16] */;
  %188 = %180.0;
  %189 = rsqrt(%181) /* ty=Tensor[(77, 10), float64] */;
  %190 = @func_6082(%184, %185) /* ty=Tensor[(3, 5, 9), int8] */;
  (%186, %187, %188, meta[relay.Constant][11] /* ty=uint32 */, %var_7659, %189, %190, %var_7680)
}

def @func_8469(%var_8451: bool, %var_8456: Tensor[(240), float64], %var_8457: Tensor[(84), float32]) -> (Tensor[(588), float64], Tensor[(15, 6, 15), bool], bool, Tensor[(675, 2), bool], Tensor[(6, 10, 4), float32], Tensor[(240), float64], Tensor[(84), float32], Tensor[(9, 1), uint32], Tensor[(3, 3), uint32], Tensor[(770), float32], Tensor[(3, 45), float32]) {
  %191 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %192 = cast(%var_8451, dtype="bool") /* ty=bool */;
  %193 = cast(meta[relay.Constant][12] /* ty=Tensor[(675, 2), bool] */, dtype="bool") /* ty=Tensor[(675, 2), bool] */;
  %194 = reshape(%192, newshape=[]) /* ty=bool */;
  %195 = reshape(%193, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
  %196 = cast(%var_8456, dtype="float64") /* ty=Tensor[(240), float64] */;
  %197 = cast(%var_8457, dtype="float32") /* ty=Tensor[(84), float32] */;
  %198 = reshape(%196, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float64] */;
  %199 = reshape(%197, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %200 = @func_5135(%198, %199) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) */;
  %201 = %191.0;
  %202 = cast(%201, dtype="float64") /* ty=Tensor[(588), float64] */;
  %203 = cast(meta[relay.Constant][13] /* ty=Tensor[(3, 3), uint32] */, dtype="uint32") /* ty=Tensor[(3, 3), uint32] */;
  %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 45), float32] */, dtype="float32") /* ty=Tensor[(3, 45), float32] */;
  %206 = reshape(%202, newshape=[588]) /* ty=Tensor[(588), float64] */;
  %207 = reshape(%203, newshape=[9]) /* ty=Tensor[(9), uint32] */;
  %208 = reshape(%204, newshape=[77, 10]) /* ty=Tensor[(77, 10), float32] */;
  %209 = reshape(%205, newshape=[135]) /* ty=Tensor[(135), float32] */;
  %210 = @func_7685(%206, %207, %208, %209) /* ty=(Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) */;
  %211 = @func_6131(%194, %195) /* ty=Tensor[(15, 6, 15), bool] */;
  %212 = %200.0;
  %213 = %210.2;
  (%201, %211, %var_8451, meta[relay.Constant][12] /* ty=Tensor[(675, 2), bool] */, %212, %var_8456, %var_8457, %213, meta[relay.Constant][13] /* ty=Tensor[(3, 3), uint32] */, meta[relay.Constant][14] /* ty=Tensor[(770), float32] */, meta[relay.Constant][15] /* ty=Tensor[(3, 45), float32] */)
}

def @func_3060(%var_3058: Tensor[(120), float64]) -> (Tensor[(2, 16, 13), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float64], Tensor[(3, 5, 8), float32]) {
  @func_3057(%var_3058) /* ty=(Tensor[(2, 16, 13), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float64], Tensor[(3, 5, 8), float32]) */
}

def @func_9514(%var_9512: Tensor[(2, 5, 11), uint32], %var_9513: Tensor[(960), uint8]) -> (Tensor[(2, 5, 11), bool], Tensor[(2, 5, 11), bool], Tensor[(770), float32], Tensor[(770), float32], Tensor[(12, 5, 16), uint8], Tensor[(960), uint8], Tensor[(3, 5, 9), int8], Tensor[(15, 9), float32]) {
  @func_9510(%var_9512, %var_9513) /* ty=(Tensor[(2, 5, 11), bool], Tensor[(2, 5, 11), bool], Tensor[(770), float32], Tensor[(770), float32], Tensor[(12, 5, 16), uint8], Tensor[(960), uint8], Tensor[(3, 5, 9), int8], Tensor[(15, 9), float32]) */
}

def @func_7821(%var_7808: Tensor[(320), int8], %var_7814: Tensor[(240, 4), uint8]) -> (Tensor[(14, 8, ?), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(12, 5, 16), uint8], Tensor[(240, 4), uint8], Tensor[(14, 8, ?), float64]) {
  %214 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %215 = %214.0;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %217 = cast(%var_7808, dtype="int8") /* ty=Tensor[(320), int8] */;
  %218 = cast(%var_7808, dtype="int8") /* ty=Tensor[(320), int8] */;
  %219 = reshape(%217, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %220 = reshape(%218, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %221 = cast(%var_7814, dtype="uint8") /* ty=Tensor[(240, 4), uint8] */;
  %222 = cast(%var_7814, dtype="uint8") /* ty=Tensor[(240, 4), uint8] */;
  %223 = reshape(%221, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %224 = reshape(%222, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %225 = @func_7220(%223, %224) /* ty=(Tensor[(12, 5, 16), uint8],) */;
  %226 = cast(%215, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  %227 = atan(%216) /* ty=Tensor[(14, 8, ?), float32] */;
  %228 = @func_2378(%219, %220) /* ty=Tensor[(10, 2, 16), uint64] */;
  %229 = %225.0;
  %230 = cos(%226) /* ty=Tensor[(14, 8, ?), float64] */;
  (%227, %228, %var_7808, %229, %var_7814, %230)
}

def @func_430(%var_365: Tensor[(11, 7, 10), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) {
  %231 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %232 = shape_of(%var_365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_365, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %235 = cast(%var_365, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %236 = sigmoid(%235) /* ty=Tensor[(11, 7, 10), float32] */;
  %237 = cast(%var_365, dtype="uint8") /* ty=Tensor[(11, 7, 10), uint8] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="uint8") /* ty=Tensor[(11, 7, 10), uint8] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %241 = cast(%236, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %242 = tan(%241) /* ty=Tensor[(11, 7, 10), float32] */;
  %243 = cast(%236, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
  %245 = cast(%242, dtype="uint32") /* ty=Tensor[(11, 7, 10), uint32] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %247 = cast(%242, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %248 = asinh(%247) /* ty=Tensor[(11, 7, 10), float32] */;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %250 = cast(%var_365, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
  %251 = shape_of(%248, dtype="int32") /* ty=Tensor[(3), int32] */;
  %252 = cast(%248, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %254 = greater(%252, %253) /* ty=Tensor[(11, 7, 10), bool] */;
  %255 = cast(%254, dtype="float32") /* ty=Tensor[(11, 7, 10), float32] */;
  %256 = mod(%233, %234) /* ty=Tensor[(11, 7, 10), float32] */;
  %257 = bitwise_xor(%239, %240) /* ty=Tensor[(11, 7, 10), uint8] */;
  %258 = maximum(%245, %246) /* ty=Tensor[(11, 7, 10), uint32] */;
  %259 = exp(%249) /* ty=Tensor[(11, 7, 10), float64] */;
  %260 = erf(%255) /* ty=Tensor[(11, 7, 10), float32] */;
  (%256, %257, %258, %259, %260)
}

def @func_2837(%var_2836: Tensor[(9, 10, 11), float32]) -> (Tensor[(9, 10, 11), float32],) {
  %263 = fn (%var_2825: Tensor[(9, 10, 11), float32]) -> (Tensor[(9, 10, 11), float32],) {
    %261 = cast(%var_2825, dtype="float32") /* ty=Tensor[(9, 10, 11), float32] */;
    %262 = exp(%261) /* ty=Tensor[(9, 10, 11), float32] */;
    (%262,)
  };
  %263(%var_2836) /* ty=(Tensor[(9, 10, 11), float32],) */
}

def @func_3057(%var_3005: Tensor[(120), float64]) -> (Tensor[(2, 16, 13), float64], Tensor[(3, 5, 8), float32], Tensor[(120), float64], Tensor[(3, 5, 8), float32]) {
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 13), float64] */;
  %265 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %266 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %267 = reshape(%265, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %268 = reshape(%266, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %269 = @func_2491(%267, %268) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %270 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %271 = cast(%var_3005, dtype="float64") /* ty=Tensor[(120), float64] */;
  %272 = reshape(%270, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %273 = reshape(%271, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %274 = @func_2491(%272, %273) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %275 = cos(%264) /* ty=Tensor[(2, 16, 13), float64] */;
  %276 = %269.0;
  %277 = %274.0;
  (%275, %276, %var_3005, %277)
}

def @func_8962() -> Tensor[(14, 8, ?), uint16] {
  %279 = fn () -> Tensor[(14, 8, ?), uint16] {
    %278 = @func_7599() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %278.0
  };
  %279() /* ty=Tensor[(14, 8, ?), uint16] */
}

def @func_9547(%var_9545: Tensor[(5, 16, 16), float64]) -> Tensor[(5, 16, 16), float64] {
  @func_9544(%var_9545) /* ty=Tensor[(5, 16, 16), float64] */
}

def @func_9568() -> (Tensor[(588), float64],) {
  %282 = fn () -> (Tensor[(588), float64],) {
    %280 = @func_9361() /* ty=(Tensor[(588), float64],) */;
    %281 = %280.0;
    (%281,)
  };
  %282() /* ty=(Tensor[(588), float64],) */
}

def @func_7462(%var_7343: Tensor[(13, 2, 1), float32], %var_7351: Tensor[(990), float32], %var_7355: Tensor[(1350), bool], %var_7367: Tensor[(84, 1), float32], %var_7404: Tensor[(13, 2, 10), float32]) -> (Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) {
  %283 = cast(%var_7351, dtype="float32") /* ty=Tensor[(990), float32] */;
  %284 = reshape(%283, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %285 = @func_5649(%284) /* ty=(Tensor[(15, 4, 10), bool], Tensor[(330, 3), float32], Tensor[(156), int8], Tensor[(9, 10, 11), uint64], Tensor[(15, 4, 10), float32]) */;
  %286 = cast(meta[relay.Constant][18] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %287 = cast(%var_7355, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %288 = reshape(%286, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), float64] */;
  %289 = reshape(%287, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %290 = @func_7320(%288, %289) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */;
  %291 = cast(%var_7367, dtype="float32") /* ty=Tensor[(84, 1), float32] */;
  %292 = reshape(%291, newshape=[3, 7, 4]) /* ty=Tensor[(3, 7, 4), float32] */;
  %293 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 360), uint32] */, dtype="uint32") /* ty=Tensor[(1, 360), uint32] */;
  %294 = reshape(%293, newshape=[5, 12, 6]) /* ty=Tensor[(5, 12, 6), uint32] */;
  %295 = @func_1890(%294) /* ty=(Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) */;
  %296 = cast(%var_7351, dtype="float32") /* ty=Tensor[(990), float32] */;
  %297 = reshape(%296, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), float32] */;
  %298 = @func_2835(%297) /* ty=(Tensor[(9, 10, 11), float32],) */;
  %299 = cast(meta[relay.Constant][18] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %300 = cast(%var_7355, dtype="bool") /* ty=Tensor[(1350), bool] */;
  %301 = reshape(%299, newshape=[1, 7, 7]) /* ty=Tensor[(1, 7, 7), float64] */;
  %302 = reshape(%300, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %303 = @func_7320(%301, %302) /* ty=(Tensor[(?, 7, 7), bool], Tensor[(?, 7, 7), float32], Tensor[(15, 6, 15), bool], bool, Tensor[(1350), bool]) */;
  %304 = cast(%var_7343, dtype="float32") /* ty=Tensor[(13, 2, 1), float32] */;
  %305 = exp(%304) /* ty=Tensor[(13, 2, 1), float32] */;
  %306 = cast(%305, dtype="bool") /* ty=Tensor[(13, 2, 1), bool] */;
  %307 = cast(%var_7404, dtype="bool") /* ty=Tensor[(13, 2, 10), bool] */;
  %308 = cast(meta[relay.Constant][20] /* ty=Tensor[(20, 48), uint8] */, dtype="uint8") /* ty=Tensor[(20, 48), uint8] */;
  %309 = cast(meta[relay.Constant][20] /* ty=Tensor[(20, 48), uint8] */, dtype="uint8") /* ty=Tensor[(20, 48), uint8] */;
  %310 = reshape(%308, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %311 = reshape(%309, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %312 = @func_7220(%310, %311) /* ty=(Tensor[(12, 5, 16), uint8],) */;
  %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(49), float64] */, dtype="float64") /* ty=Tensor[(49), float64] */;
  %314 = sinh(%313) /* ty=Tensor[(49), float64] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(49), float32] */;
  %316 = log10(%315) /* ty=Tensor[(49), float32] */;
  %317 = cast(%316, dtype="int32") /* ty=Tensor[(49), int32] */;
  %318 = cast(%305, dtype="int32") /* ty=Tensor[(13, 2, 1), int32] */;
  %319 = bitwise_and(%317, %318) /* ty=Tensor[(13, 2, 49), int32] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(13, 2, 49), float32] */;
  %321 = acos(%320) /* ty=Tensor[(13, 2, 49), float32] */;
  %322 = cast(%321, dtype="bool") /* ty=Tensor[(13, 2, 49), bool] */;
  %323 = cast(meta[relay.Constant][18] /* ty=Tensor[(49), float64] */, dtype="bool") /* ty=Tensor[(49), bool] */;
  %324 = cast(%319, dtype="int8") /* ty=Tensor[(13, 2, 49), int8] */;
  %325 = shape_of(%321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%321, dtype="int8") /* ty=Tensor[(13, 2, 49), int8] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %328 = %285.2;
  %329 = %290.3;
  %330 = @func_2937(%292) /* ty=Tensor[(3, 7, 4), float64] */;
  %331 = %295.1;
  %332 = %298.0;
  %333 = %303.0;
  %334 = not_equal(%306, %307) /* ty=Tensor[(13, 2, 10), bool] */;
  %335 = %312.0;
  %336 = greater_equal(%322, %323) /* ty=Tensor[(13, 2, 49), bool] */;
  %337 = logical_xor(%326, %327) /* ty=Tensor[(13, 2, 49), int8] */;
  (%328, %var_7351, %329, %var_7355, %330, %var_7367, %331, meta[relay.Constant][19] /* ty=Tensor[(1, 360), uint32] */, %332, %333, %334, %335, meta[relay.Constant][20] /* ty=Tensor[(20, 48), uint8] */, %336, %337)
}

def @func_8123() -> (Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) {
  %338 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %339 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %340 = cast(meta[relay.Constant][21] /* ty=Tensor[(110), int8] */, dtype="int8") /* ty=Tensor[(110), int8] */;
  %341 = reshape(%339, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), int8] */;
  %342 = reshape(%340, newshape=[2, 5, 11]) /* ty=Tensor[(2, 5, 11), int8] */;
  %343 = %338.0;
  %344 = @func_6404(%341, %342) /* ty=Tensor[(2, 5, 11), uint32] */;
  (%343, %344, meta[relay.Constant][21] /* ty=Tensor[(110), int8] */)
}

def @func_8938(%var_8937: Tensor[(84), float32]) -> (Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 8, ?), uint16], Tensor[(14, 105), float64], Tensor[(88), float32], Tensor[(14, 8, 13), int16], Tensor[(770), float32], Tensor[(77, 10), float32], Tensor[(14, 9, 12), bool], Tensor[(26), float32], Tensor[(330, 3), float32], Tensor[(84), float32], Tensor[(260), float32]) {
  %377 = fn (%var_8928: Tensor[(84), float32]) -> (Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 8, ?), uint16], Tensor[(14, 105), float64], Tensor[(88), float32], Tensor[(14, 8, 13), int16], Tensor[(770), float32], Tensor[(77, 10), float32], Tensor[(14, 9, 12), bool], Tensor[(26), float32], Tensor[(330, 3), float32], Tensor[(84), float32], Tensor[(260), float32]) {
    %345 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
    %346 = %345.0;
    %347 = cast(%346, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
    %348 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
    %349 = @func_8402() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %350 = %348.0;
    %351 = cast(%350, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
    %352 = reshape(%351, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
    %353 = @func_8352(%352) /* ty=(Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 105), float64]) */;
    %354 = @func_8226() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */;
    %355 = @func_8684() /* ty=(Tensor[(14, 8, 13), int16], Tensor[(14, 8, 13), float32]) */;
    %356 = cast(meta[relay.Constant][22] /* ty=Tensor[(77, 10), float32] */, dtype="float32") /* ty=Tensor[(77, 10), float32] */;
    %357 = reshape(%356, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %358 = @func_8752(%357) /* ty=(Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */;
    %359 = cast(meta[relay.Constant][23] /* ty=Tensor[(26), float32] */, dtype="float32") /* ty=Tensor[(26), float32] */;
    %360 = cast(meta[relay.Constant][24] /* ty=Tensor[(330, 3), float32] */, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
    %361 = cast(%346, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
    %362 = cast(%var_8928, dtype="float32") /* ty=Tensor[(84), float32] */;
    %363 = cast(meta[relay.Constant][25] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
    %364 = reshape(%359, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
    %365 = reshape(%360, newshape=[990]) /* ty=Tensor[(990), float32] */;
    %366 = reshape(%361, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
    %367 = reshape(%362, newshape=[84, 1]) /* ty=Tensor[(84, 1), float32] */;
    %368 = reshape(%363, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
    %369 = @func_7462(%364, %365, %366, %367, %368) /* ty=(Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) */;
    %370 = asinh(%347) /* ty=Tensor[(15, 6, 15), float64] */;
    %371 = %349.0;
    %372 = %353.2;
    %373 = %354.3;
    %374 = %355.0;
    %375 = %358.1;
    %376 = %369.6;
    (%370, %350, %371, %372, %373, %374, %375, meta[relay.Constant][22] /* ty=Tensor[(77, 10), float32] */, %376, meta[relay.Constant][23] /* ty=Tensor[(26), float32] */, meta[relay.Constant][24] /* ty=Tensor[(330, 3), float32] */, %var_8928, meta[relay.Constant][25] /* ty=Tensor[(260), float32] */)
  };
  %377(%var_8937) /* ty=(Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 8, ?), uint16], Tensor[(14, 105), float64], Tensor[(88), float32], Tensor[(14, 8, 13), int16], Tensor[(770), float32], Tensor[(77, 10), float32], Tensor[(14, 9, 12), bool], Tensor[(26), float32], Tensor[(330, 3), float32], Tensor[(84), float32], Tensor[(260), float32]) */
}

def @func_7511() -> (Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) {
  %378 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 8, 1), uint16] */, dtype="uint16") /* ty=Tensor[(14, 8, 1), uint16] */;
  %379 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(14, 8, 1), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 8, 1), uint16] */, dtype="uint16") /* ty=Tensor[(14, 8, 1), uint16] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %382 = cast(meta[relay.Constant][28] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %383 = reshape(%382, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), float64] */;
  %384 = @func_6997(%383) /* ty=(Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) */;
  %385 = subtract(%380, %381) /* ty=Tensor[(14, 8, ?), uint16] */;
  %386 = %384.2;
  (%385, %386, meta[relay.Constant][28] /* ty=Tensor[(588), float64] */)
}

def @func_4179(%var_4177: Tensor[(14, 15, 7), float64], %var_4178: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) {
  %394 = fn (%var_4168: Tensor[(14, 15, 7), float64], %var_4169: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) {
    %387 = cast(%var_4169, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
    %388 = shape_of(%var_4168, dtype="int32") /* ty=Tensor[(3), int32] */;
    %389 = cast(%var_4168, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
    %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %391 = cast(%var_4169, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
    %392 = floor_mod(%389, %390) /* ty=Tensor[(14, 15, 7), float64] */;
    %393 = sin(%391) /* ty=Tensor[(14, 15, 7), float64] */;
    (%392, %393)
  };
  %394(%var_4177, %var_4178) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) */
}

def @func_8790(%var_8781: Tensor[(1, 8, 11), float32]) -> (Tensor[(2, 8, 11), float32],) {
  %395 = cast(%var_8781, dtype="float32") /* ty=Tensor[(1, 8, 11), float32] */;
  %396 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 8, 11), float32] */, dtype="float32") /* ty=Tensor[(2, 8, 11), float32] */;
  %397 = floor_divide(%395, %396) /* ty=Tensor[(2, 8, 11), float32] */;
  (%397,)
}

def @func_6999(%var_6998: Tensor[(14, 3, 14), float64]) -> (Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) {
  %415 = fn (%var_6944: Tensor[(14, 3, 14), float64]) -> (Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) {
    %398 = cast(%var_6944, dtype="float64") /* ty=Tensor[(14, 3, 14), float64] */;
    %399 = tan(%398) /* ty=Tensor[(14, 3, 14), float64] */;
    %400 = cast(%var_6944, dtype="uint8") /* ty=Tensor[(14, 3, 14), uint8] */;
    %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%399, dtype="uint8") /* ty=Tensor[(14, 3, 14), uint8] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %404 = multiply(%402, %403) /* ty=Tensor[(14, 3, 14), uint8] */;
    %405 = cast(%399, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
    %406 = shape_of(%404, dtype="int32") /* ty=Tensor[(3), int32] */;
    %407 = cast(%404, dtype="bool") /* ty=Tensor[(14, 3, 14), bool] */;
    %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %409 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %410 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 1350), bool] */, dtype="bool") /* ty=Tensor[(1, 1350), bool] */;
    %411 = reshape(%409, newshape=[]) /* ty=bool */;
    %412 = reshape(%410, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), bool] */;
    %413 = less(%407, %408) /* ty=Tensor[(14, 3, 14), bool] */;
    %414 = @func_6131(%411, %412) /* ty=Tensor[(15, 6, 15), bool] */;
    (%413, %414, False /* ty=bool */, meta[relay.Constant][30] /* ty=Tensor[(1, 1350), bool] */)
  };
  %415(%var_6998) /* ty=(Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) */
}

def @func_7060(%var_7051: Tensor[(10, 3, 6), float32]) -> Tensor[(10, 3, 6), float32] {
  %416 = cast(-2.36779f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %417 = cast(%var_7051, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  divide(%416, %417) /* ty=Tensor[(10, 3, 6), float32] */
}

def @func_6135(%var_6133: bool, %var_6134: Tensor[(15, 6, 15), bool]) -> Tensor[(15, 6, 15), bool] {
  @func_6131(%var_6133, %var_6134) /* ty=Tensor[(15, 6, 15), bool] */
}

def @func_4503(%var_4501: Tensor[(15, 1, 7), int64], %var_4502: Tensor[(15, 3, 7), int64]) -> (Tensor[(15, 3, 7), bool], Tensor[(9, 10, 11), float32], Tensor[(990), float32], Tensor[(11, 7, 10), uint8], Tensor[(770), float32]) {
  @func_4499(%var_4501, %var_4502) /* ty=(Tensor[(15, 3, 7), bool], Tensor[(9, 10, 11), float32], Tensor[(990), float32], Tensor[(11, 7, 10), uint8], Tensor[(770), float32]) */
}

def @func_3593(%var_3592: Tensor[(8, 11, 1), float32]) -> (Tensor[(8, 11, ?), float64], Tensor[(8, 11, ?), bool]) {
  %430 = fn (%var_3552: Tensor[(8, 11, 1), float32]) -> (Tensor[(8, 11, ?), float64], Tensor[(8, 11, ?), bool]) {
    %418 = cast(%var_3552, dtype="float32") /* ty=Tensor[(8, 11, 1), float32] */;
    %419 = log2(%418) /* ty=Tensor[(8, 11, 1), float32] */;
    %420 = cast(%var_3552, dtype="float64") /* ty=Tensor[(8, 11, 1), float64] */;
    %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(%419, dtype="float64") /* ty=Tensor[(8, 11, 1), float64] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %424 = cast(%419, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
    %425 = shape_of(%var_3552, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%var_3552, dtype="bool") /* ty=Tensor[(8, 11, 1), bool] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %428 = power(%422, %423) /* ty=Tensor[(8, 11, ?), float64] */;
    %429 = greater(%426, %427) /* ty=Tensor[(8, 11, ?), bool] */;
    (%428, %429)
  };
  %430(%var_3592) /* ty=(Tensor[(8, 11, ?), float64], Tensor[(8, 11, ?), bool]) */
}

def @func_8176(%var_8172: Tensor[(1470), float64]) -> (Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) {
  %431 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
  %432 = cast(%var_8172, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %433 = cast(%var_8172, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %434 = reshape(%432, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %435 = reshape(%433, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %436 = @func_4176(%434, %435) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) */;
  %437 = %431.1;
  %438 = %436.0;
  (%437, %438, %var_8172)
}

def @func_8630(%var_8601: Tensor[(224), bool], %var_8615: Tensor[(7, 110), float32]) -> (Tensor[(14, 8, ?), uint16], Tensor[(224), bool], Tensor[(9), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32], Tensor[(7, 2, 16), bool]) {
  %439 = @func_8226() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */;
  %440 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %441 = cast(meta[relay.Constant][32] /* ty=Tensor[(9), uint32] */, dtype="uint32") /* ty=Tensor[(9), uint32] */;
  %442 = cast(%var_8615, dtype="float32") /* ty=Tensor[(7, 110), float32] */;
  %443 = reshape(%440, newshape=[]) /* ty=uint32 */;
  %444 = reshape(%441, newshape=[9]) /* ty=Tensor[(9), uint32] */;
  %445 = reshape(%442, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %446 = @func_7873(%443, %444, %445) /* ty=(Tensor[(10, 2, 16), uint64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */;
  %447 = cast(%var_8601, dtype="bool") /* ty=Tensor[(224), bool] */;
  %448 = reshape(%447, newshape=[7, 2, 16]) /* ty=Tensor[(7, 2, 16), bool] */;
  %449 = @func_8581(%448) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64], Tensor[(14, 8, ?), float64]) */;
  %450 = %449.1;
  %451 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 2, 16), float64] */, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %452 = shape_of(%450, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%450, dtype="bool") /* ty=Tensor[(7, 2, 16), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = %439.0;
  %456 = %446.3;
  %457 = not_equal(%453, %454) /* ty=Tensor[(7, 2, 16), bool] */;
  (%455, %var_8601, %456, meta[relay.Constant][31] /* ty=uint32 */, meta[relay.Constant][32] /* ty=Tensor[(9), uint32] */, %var_8615, %457)
}

def @func_197(%var_196: int32) -> Tensor[(14, 9, 12), bool] {
  %460 = fn (%var_180: int32) -> Tensor[(14, 9, 12), bool] {
    %458 = cast(%var_180, dtype="bool") /* ty=bool */;
    %459 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 9, 12), int32] */, dtype="bool") /* ty=Tensor[(14, 9, 12), bool] */;
    less_equal(%458, %459) /* ty=Tensor[(14, 9, 12), bool] */
  };
  %460(%var_196) /* ty=Tensor[(14, 9, 12), bool] */
}

def @func_6404(%var_6379: Tensor[(2, 5, 11), int8], %var_6380: Tensor[(2, 5, 11), int8]) -> Tensor[(2, 5, 11), uint32] {
  %461 = cast(%var_6380, dtype="int8") /* ty=Tensor[(2, 5, 11), int8] */;
  %462 = shape_of(%var_6379, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%var_6379, dtype="int8") /* ty=Tensor[(2, 5, 11), int8] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %465 = left_shift(%463, %464) /* ty=Tensor[(2, 5, 11), int8] */;
  %466 = cast(%465, dtype="uint32") /* ty=Tensor[(2, 5, 11), uint32] */;
  %467 = shape_of(%var_6380, dtype="int32") /* ty=Tensor[(3), int32] */;
  %468 = cast(%var_6380, dtype="uint32") /* ty=Tensor[(2, 5, 11), uint32] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  right_shift(%468, %469) /* ty=Tensor[(2, 5, 11), uint32] */
}

def @func_1893(%var_1891: Tensor[(5, 12, 6), uint32]) -> (Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) {
  @func_1890(%var_1891) /* ty=(Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) */
}

def @func_2019(%var_2017: int64, %var_2018: Tensor[(2, 1), int64]) -> Tensor[(2, 1), bool] {
  @func_2015(%var_2017, %var_2018) /* ty=Tensor[(2, 1), bool] */
}

def @func_8041() -> (Tensor[(588), float64], Tensor[(15, 6, 15), bool]) {
  %476 = fn () -> (Tensor[(588), float64], Tensor[(15, 6, 15), bool]) {
    %470 = @func_7970() /* ty=(Tensor[(588), float64],) */;
    %471 = %470.0;
    %472 = cast(%471, dtype="float64") /* ty=Tensor[(588), float64] */;
    %473 = reshape(%472, newshape=[14, 3, 14]) /* ty=Tensor[(14, 3, 14), float64] */;
    %474 = @func_6997(%473) /* ty=(Tensor[(14, 3, 14), bool], Tensor[(15, 6, 15), bool], bool, Tensor[(1, 1350), bool]) */;
    %475 = %474.1;
    (%471, %475)
  };
  %476() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */
}

def @func_6082(%var_6069: Tensor[(3, 5, 9), float32], %var_6078: Tensor[(3, 5, 9), float32]) -> Tensor[(3, 5, 9), int8] {
  %477 = cast(%var_6069, dtype="float32") /* ty=Tensor[(3, 5, 9), float32] */;
  %478 = asin(%477) /* ty=Tensor[(3, 5, 9), float32] */;
  %479 = cast(%var_6078, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="int8") /* ty=Tensor[(3, 5, 9), int8] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  logical_xor(%481, %482) /* ty=Tensor[(3, 5, 9), int8] */
}

def @func_6503(%var_6464: Tensor[(7, 12, 4), uint16], %var_6488: Tensor[(240), float64], %var_6489: Tensor[(84), float32]) -> (Tensor[(7, 12, 4), bool], Tensor[(2, 180), uint32], Tensor[(120), float64], Tensor[(3, 7, 4), float64], Tensor[(240), float64], Tensor[(84), float32], Tensor[(14, 9, 12), bool], int32) {
  %483 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 12, 4), uint16] */, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %484 = shape_of(%var_6464, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%var_6464, dtype="bool") /* ty=Tensor[(7, 12, 4), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = cast(meta[relay.Constant][36] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %488 = cast(meta[relay.Constant][36] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %489 = reshape(%487, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %490 = reshape(%488, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %491 = @func_2491(%489, %490) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %492 = cast(%var_6488, dtype="float64") /* ty=Tensor[(240), float64] */;
  %493 = cast(%var_6489, dtype="float32") /* ty=Tensor[(84), float32] */;
  %494 = reshape(%492, newshape=[6, 10, 4]) /* ty=Tensor[(6, 10, 4), float64] */;
  %495 = reshape(%493, newshape=[84]) /* ty=Tensor[(84), float32] */;
  %496 = @func_5135(%494, %495) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) */;
  %497 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %498 = reshape(%497, newshape=[]) /* ty=int32 */;
  %499 = greater_equal(%485, %486) /* ty=Tensor[(7, 12, 4), bool] */;
  %500 = %491.4;
  %501 = %496.1;
  %502 = @func_195(%498) /* ty=Tensor[(14, 9, 12), bool] */;
  (%499, %500, meta[relay.Constant][36] /* ty=Tensor[(120), float64] */, %501, %var_6488, %var_6489, %502, 1 /* ty=int32 */)
}

def @func_8540(%var_8539: Tensor[(11, 7, 4), float32]) -> Tensor[(11, 7, 4), float32] {
  %504 = fn (%var_8534: Tensor[(11, 7, 4), float32]) -> Tensor[(11, 7, 4), float32] {
    %503 = cast(%var_8534, dtype="float32") /* ty=Tensor[(11, 7, 4), float32] */;
    tan(%503) /* ty=Tensor[(11, 7, 4), float32] */
  };
  %504(%var_8539) /* ty=Tensor[(11, 7, 4), float32] */
}

def @func_8655() -> Tensor[(2, 5, 11), uint32] {
  @func_8653() /* ty=Tensor[(2, 5, 11), uint32] */
}

def @func_4499(%var_4431: Tensor[(15, 1, 7), int64], %var_4432: Tensor[(15, 3, 7), int64]) -> (Tensor[(15, 3, 7), bool], Tensor[(9, 10, 11), float32], Tensor[(990), float32], Tensor[(11, 7, 10), uint8], Tensor[(770), float32]) {
  %505 = cast(%var_4431, dtype="bool") /* ty=Tensor[(15, 1, 7), bool] */;
  %506 = cast(%var_4432, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  %507 = cast(meta[relay.Constant][37] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %508 = reshape(%507, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), float32] */;
  %509 = @func_2835(%508) /* ty=(Tensor[(9, 10, 11), float32],) */;
  %510 = cast(meta[relay.Constant][38] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %511 = reshape(%510, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
  %512 = @func_430(%511) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */;
  %513 = greater_equal(%505, %506) /* ty=Tensor[(15, 3, 7), bool] */;
  %514 = %509.0;
  %515 = %512.1;
  (%513, %514, meta[relay.Constant][37] /* ty=Tensor[(990), float32] */, %515, meta[relay.Constant][38] /* ty=Tensor[(770), float32] */)
}

def @func_1890(%var_1877: Tensor[(5, 12, 6), uint32]) -> (Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) {
  %516 = cast(meta[relay.Constant][39] /* ty=Tensor[(5, 12, 6), uint32] */, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %517 = shape_of(%var_1877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%var_1877, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %520 = less_equal(%518, %519) /* ty=Tensor[(5, 12, 6), bool] */;
  %521 = cast(%var_1877, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="bool") /* ty=Tensor[(5, 12, 6), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %525 = cast(7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %526 = reshape(%525, newshape=[]) /* ty=int32 */;
  %527 = greater(%523, %524) /* ty=Tensor[(5, 12, 6), bool] */;
  %528 = @func_195(%526) /* ty=Tensor[(14, 9, 12), bool] */;
  (%527, %528, 7 /* ty=int32 */)
}

def @func_9054() -> (Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) {
  %529 = cast(meta[relay.Constant][40] /* ty=Tensor[(3, 5, 6), float64] */, dtype="float64") /* ty=Tensor[(3, 5, 6), float64] */;
  %530 = asin(%529) /* ty=Tensor[(3, 5, 6), float64] */;
  %531 = @func_7715() /* ty=Tensor[(14, 8, ?), float64] */;
  (%530, %531)
}

def @func_7736() -> (Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) {
  %532 = cast(meta[relay.Constant][41] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
  %533 = cast(meta[relay.Constant][41] /* ty=Tensor[(320), int8] */, dtype="int8") /* ty=Tensor[(320), int8] */;
  %534 = reshape(%532, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %535 = reshape(%533, newshape=[10, 2, 16]) /* ty=Tensor[(10, 2, 16), int8] */;
  %536 = @func_7715() /* ty=Tensor[(14, 8, ?), float64] */;
  %537 = @func_2378(%534, %535) /* ty=Tensor[(10, 2, 16), uint64] */;
  (%536, %537, meta[relay.Constant][41] /* ty=Tensor[(320), int8] */)
}

def @func_6408(%var_6406: Tensor[(2, 5, 11), int8], %var_6407: Tensor[(2, 5, 11), int8]) -> Tensor[(2, 5, 11), uint32] {
  @func_6404(%var_6406, %var_6407) /* ty=Tensor[(2, 5, 11), uint32] */
}

def @func_7691(%var_7687: Tensor[(588), float64], %var_7688: Tensor[(9), uint32], %var_7689: Tensor[(77, 10), float32], %var_7690: Tensor[(135), float32]) -> (Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) {
  @func_7685(%var_7687, %var_7688, %var_7689, %var_7690) /* ty=(Tensor[(588), float64], Tensor[(588), int16], Tensor[(9, 1), uint32], uint32, Tensor[(9), uint32], Tensor[(77, 10), float64], Tensor[(3, 5, 9), int8], Tensor[(135), float32]) */
}

def @func_7224(%var_7222: Tensor[(12, 5, 16), uint8], %var_7223: Tensor[(12, 5, 16), uint8]) -> (Tensor[(12, 5, 16), uint8],) {
  @func_7220(%var_7222, %var_7223) /* ty=(Tensor[(12, 5, 16), uint8],) */
}

def @func_2381(%var_2379: Tensor[(10, 2, 16), int8], %var_2380: Tensor[(10, 2, 16), int8]) -> Tensor[(10, 2, 16), uint64] {
  %547 = fn (%var_2346: Tensor[(10, 2, 16), int8], %var_2347: Tensor[(10, 2, 16), int8]) -> Tensor[(10, 2, 16), uint64] {
    %538 = cast(%var_2347, dtype="int8") /* ty=Tensor[(10, 2, 16), int8] */;
    %539 = shape_of(%var_2346, dtype="int32") /* ty=Tensor[(3), int32] */;
    %540 = cast(%var_2346, dtype="int8") /* ty=Tensor[(10, 2, 16), int8] */;
    %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %542 = multiply(%540, %541) /* ty=Tensor[(10, 2, 16), int8] */;
    %543 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 2, 16), int8] */, dtype="uint64") /* ty=Tensor[(10, 2, 16), uint64] */;
    %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
    %545 = cast(%542, dtype="uint64") /* ty=Tensor[(10, 2, 16), uint64] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    add(%545, %546) /* ty=Tensor[(10, 2, 16), uint64] */
  };
  %547(%var_2379, %var_2380) /* ty=Tensor[(10, 2, 16), uint64] */
}

def @func_3243(%var_3228: Tensor[(4, 3, 13), int8], %var_3241: Tensor[(330, 3), float32]) -> (Tensor[(4, 3, 13), bool], Tensor[(4, 3, 13), int16], Tensor[(9, 10, 11), float32], Tensor[(330, 3), float32]) {
  %548 = cast(%var_3228, dtype="int8") /* ty=Tensor[(4, 3, 13), int8] */;
  %549 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 3, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 3, 13), int8] */, dtype="int8") /* ty=Tensor[(4, 3, 13), int8] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %552 = maximum(%550, %551) /* ty=Tensor[(4, 3, 13), int8] */;
  %553 = cast(%552, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %554 = shape_of(meta[relay.Constant][43] /* ty=Tensor[(4, 3, 13), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 3, 13), int8] */, dtype="bool") /* ty=Tensor[(4, 3, 13), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %557 = cast(%var_3228, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %558 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %559 = cast(%552, dtype="int16") /* ty=Tensor[(4, 3, 13), int16] */;
  %560 = dyn.reshape(%557, %558, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %561 = cast(%var_3241, dtype="float32") /* ty=Tensor[(330, 3), float32] */;
  %562 = reshape(%561, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), float32] */;
  %563 = @func_2835(%562) /* ty=(Tensor[(9, 10, 11), float32],) */;
  %564 = logical_or(%555, %556) /* ty=Tensor[(4, 3, 13), bool] */;
  %565 = bitwise_and(%559, %560) /* ty=Tensor[(4, 3, 13), int16] */;
  %566 = %563.0;
  (%564, %565, %566, %var_3241)
}

def @func_8583(%var_8582: Tensor[(7, 2, 16), bool]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64], Tensor[(14, 8, ?), float64]) {
  %576 = fn (%var_8544: Tensor[(7, 2, 16), bool]) -> (Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64], Tensor[(14, 8, ?), float64]) {
    %567 = @func_7511() /* ty=(Tensor[(14, 8, ?), uint16], bool, Tensor[(588), float64]) */;
    %568 = %567.1;
    %569 = cast(%568, dtype="float64") /* ty=float64 */;
    %570 = cast(%var_8544, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %571 = cast(%var_8544, dtype="float64") /* ty=Tensor[(7, 2, 16), float64] */;
    %572 = @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */;
    %573 = add(%569, %570) /* ty=Tensor[(7, 2, 16), float64] */;
    %574 = atanh(%571) /* ty=Tensor[(7, 2, 16), float64] */;
    %575 = %572.0;
    (%573, %574, %575)
  };
  %576(%var_8582) /* ty=(Tensor[(7, 2, 16), float64], Tensor[(7, 2, 16), float64], Tensor[(14, 8, ?), float64]) */
}

def @func_9631(%var_9626: Tensor[(3, 15, 12), uint8], %var_9627: Tensor[(3, 15, 12), uint8]) -> (Tensor[(3, 15, 12), bool],) {
  %577 = cast(%var_9627, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %578 = shape_of(%var_9626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_9626, dtype="bool") /* ty=Tensor[(3, 15, 12), bool] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %581 = less_equal(%579, %580) /* ty=Tensor[(3, 15, 12), bool] */;
  (%581,)
}

def @func_8352(%var_8336: Tensor[(15, 6, 15), bool]) -> (Tensor[(15, 6, 15), float64], Tensor[(15, 6, 15), bool], Tensor[(14, 105), float64]) {
  %582 = @func_8055() /* ty=(Tensor[(15, 6, 15), bool],) */;
  %583 = %582.0;
  %584 = cast(%var_8336, dtype="uint64") /* ty=Tensor[(15, 6, 15), uint64] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="uint64") /* ty=Tensor[(15, 6, 15), uint64] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %588 = bitwise_and(%586, %587) /* ty=Tensor[(15, 6, 15), uint64] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(15, 6, 15), float64] */;
  %590 = cast(meta[relay.Constant][44] /* ty=Tensor[(14, 105), float64] */, dtype="float64") /* ty=Tensor[(14, 105), float64] */;
  %591 = reshape(%590, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
  %592 = @func_8176(%591) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
  %593 = sin(%589) /* ty=Tensor[(15, 6, 15), float64] */;
  %594 = %592.0;
  (%593, %594, meta[relay.Constant][44] /* ty=Tensor[(14, 105), float64] */)
}

def @func_7825(%var_7823: Tensor[(320), int8], %var_7824: Tensor[(240, 4), uint8]) -> (Tensor[(14, 8, ?), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(12, 5, 16), uint8], Tensor[(240, 4), uint8], Tensor[(14, 8, ?), float64]) {
  @func_7821(%var_7823, %var_7824) /* ty=(Tensor[(14, 8, ?), float32], Tensor[(10, 2, 16), uint64], Tensor[(320), int8], Tensor[(12, 5, 16), uint8], Tensor[(240, 4), uint8], Tensor[(14, 8, ?), float64]) */
}

def @func_5022(%var_5020: Tensor[(15, 12, 14), bool], %var_5021: Tensor[(15, 12, 14), bool]) -> Tensor[(15, 12, 14), bool] {
  %599 = fn (%var_5013: Tensor[(15, 12, 14), bool], %var_5014: Tensor[(15, 12, 14), bool]) -> Tensor[(15, 12, 14), bool] {
    %595 = cast(%var_5014, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
    %596 = shape_of(%var_5013, dtype="int32") /* ty=Tensor[(3), int32] */;
    %597 = cast(%var_5013, dtype="bool") /* ty=Tensor[(15, 12, 14), bool] */;
    %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%597, %598) /* ty=Tensor[(15, 12, 14), bool] */
  };
  %599(%var_5020, %var_5021) /* ty=Tensor[(15, 12, 14), bool] */
}

def @func_433(%var_431: Tensor[(11, 7, 10), float32]) -> (Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) {
  @func_430(%var_431) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */
}

def @func_7220(%var_7207: Tensor[(12, 5, 16), uint8], %var_7208: Tensor[(12, 5, 16), uint8]) -> (Tensor[(12, 5, 16), uint8],) {
  %600 = cast(%var_7208, dtype="uint8") /* ty=Tensor[(12, 5, 16), uint8] */;
  %601 = shape_of(%var_7207, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%var_7207, dtype="uint8") /* ty=Tensor[(12, 5, 16), uint8] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %604 = bitwise_or(%602, %603) /* ty=Tensor[(12, 5, 16), uint8] */;
  (%604,)
}

def @func_7469(%var_7464: Tensor[(13, 2, 1), float32], %var_7465: Tensor[(990), float32], %var_7466: Tensor[(1350), bool], %var_7467: Tensor[(84, 1), float32], %var_7468: Tensor[(13, 2, 10), float32]) -> (Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) {
  @func_7462(%var_7464, %var_7465, %var_7466, %var_7467, %var_7468) /* ty=(Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) */
}

def @func_7558() -> (Tensor[(14, 8, ?), uint16],) {
  @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */
}

def @func_7738() -> (Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) {
  @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */
}

def @func_9510(%var_9475: Tensor[(2, 5, 11), uint32], %var_9496: Tensor[(960), uint8]) -> (Tensor[(2, 5, 11), bool], Tensor[(2, 5, 11), bool], Tensor[(770), float32], Tensor[(770), float32], Tensor[(12, 5, 16), uint8], Tensor[(960), uint8], Tensor[(3, 5, 9), int8], Tensor[(15, 9), float32]) {
  %605 = @func_8123() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(2, 5, 11), uint32], Tensor[(110), int8]) */;
  %606 = %605.1;
  %607 = cast(%var_9475, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = cast(%606, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %612 = shape_of(%var_9475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_9475, dtype="bool") /* ty=Tensor[(2, 5, 11), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(meta[relay.Constant][45] /* ty=Tensor[(770), float32] */, dtype="float32") /* ty=Tensor[(770), float32] */;
  %616 = reshape(%615, newshape=[770]) /* ty=Tensor[(770), float32] */;
  %617 = @func_8752(%616) /* ty=(Tensor[(2, 5, 11), float64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */;
  %618 = cast(%var_9496, dtype="uint8") /* ty=Tensor[(960), uint8] */;
  %619 = cast(%var_9496, dtype="uint8") /* ty=Tensor[(960), uint8] */;
  %620 = reshape(%618, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %621 = reshape(%619, newshape=[12, 5, 16]) /* ty=Tensor[(12, 5, 16), uint8] */;
  %622 = @func_7220(%620, %621) /* ty=(Tensor[(12, 5, 16), uint8],) */;
  %623 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %624 = cast(meta[relay.Constant][46] /* ty=Tensor[(15, 9), float32] */, dtype="float32") /* ty=Tensor[(15, 9), float32] */;
  %625 = reshape(%623, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %626 = reshape(%624, newshape=[3, 5, 9]) /* ty=Tensor[(3, 5, 9), float32] */;
  %627 = equal(%609, %610) /* ty=Tensor[(2, 5, 11), bool] */;
  %628 = greater_equal(%613, %614) /* ty=Tensor[(2, 5, 11), bool] */;
  %629 = %617.1;
  %630 = %622.0;
  %631 = @func_6082(%625, %626) /* ty=Tensor[(3, 5, 9), int8] */;
  (%627, %628, %629, meta[relay.Constant][45] /* ty=Tensor[(770), float32] */, %630, %var_9496, %631, meta[relay.Constant][46] /* ty=Tensor[(15, 9), float32] */)
}

def @func_9363() -> (Tensor[(588), float64],) {
  @func_9361() /* ty=(Tensor[(588), float64],) */
}

def @main(%var_9849: int32, %var_9927: Tensor[(26), float32], %var_9929: Tensor[(84), float32]) -> (Tensor[(14, 9, 12), bool], Tensor[(3, 5, 6), float64], Tensor[(15, 6, 15), bool], Tensor[(1350), bool], Tensor[(26), float32], Tensor[(990), float32], Tensor[(84), float32], Tensor[(260), float32], Tensor[(14, 8, 1470), float64], Tensor[(14, 8, ?), float32]) {
  %632 = cast(%var_9849, dtype="int32") /* ty=int32 */;
  %633 = reshape(%632, newshape=[]) /* ty=int32 */;
  %634 = @func_9056() /* ty=(Tensor[(3, 5, 6), float64], Tensor[(14, 8, ?), float64]) */;
  %635 = cast(meta[relay.Constant][47] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %636 = reshape(%635, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
  %637 = @func_8179(%636) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
  %638 = cast(%var_9927, dtype="float32") /* ty=Tensor[(26), float32] */;
  %639 = cast(meta[relay.Constant][48] /* ty=Tensor[(990), float32] */, dtype="float32") /* ty=Tensor[(990), float32] */;
  %640 = cast(meta[relay.Constant][47] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %641 = reshape(%640, newshape=[1470]) /* ty=Tensor[(1470), float64] */;
  %642 = @func_8176(%641) /* ty=(Tensor[(15, 6, 15), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64]) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  %645 = cast(%var_9929, dtype="float32") /* ty=Tensor[(84), float32] */;
  %646 = cast(meta[relay.Constant][49] /* ty=Tensor[(260), float32] */, dtype="float32") /* ty=Tensor[(260), float32] */;
  %647 = reshape(%638, newshape=[13, 2, 1]) /* ty=Tensor[(13, 2, 1), float32] */;
  %648 = reshape(%639, newshape=[990]) /* ty=Tensor[(990), float32] */;
  %649 = reshape(%644, newshape=[1350]) /* ty=Tensor[(1350), bool] */;
  %650 = reshape(%645, newshape=[84, 1]) /* ty=Tensor[(84, 1), float32] */;
  %651 = reshape(%646, newshape=[13, 2, 10]) /* ty=Tensor[(13, 2, 10), float32] */;
  %652 = @func_7469(%647, %648, %649, %650, %651) /* ty=(Tensor[(156), int8], Tensor[(990), float32], bool, Tensor[(1350), bool], Tensor[(3, 7, 4), float64], Tensor[(84, 1), float32], Tensor[(14, 9, 12), bool], Tensor[(1, 360), uint32], Tensor[(9, 10, 11), float32], Tensor[(?, 7, 7), bool], Tensor[(13, 2, 10), bool], Tensor[(12, 5, 16), uint8], Tensor[(20, 48), uint8], Tensor[(13, 2, 49), bool], Tensor[(13, 2, 49), int8]) */;
  %653 = @func_9756() /* ty=(Tensor[(15, 6, 15), bool], Tensor[(15, 6, 15), bool], Tensor[(?, 7, 7), bool], Tensor[(7, 7), float64], Tensor[(14, 8, ?), float32]) */;
  %654 = %653.4;
  %655 = cast(%654, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %656 = acos(%655) /* ty=Tensor[(14, 8, ?), float32] */;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  %658 = cast(meta[relay.Constant][47] /* ty=Tensor[(1470), float64] */, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %659 = floor_mod(%657, %658) /* ty=Tensor[(14, 8, 1470), float64] */;
  %660 = cast(%656, dtype="int64") /* ty=Tensor[(14, 8, ?), int64] */;
  %661 = cast(%var_9849, dtype="int64") /* ty=int64 */;
  %662 = minimum(%660, %661) /* ty=Tensor[(14, 8, ?), int64] */;
  %663 = cast(%659, dtype="float64") /* ty=Tensor[(14, 8, 1470), float64] */;
  %664 = cast(%662, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
  %665 = cast(%656, dtype="float32") /* ty=Tensor[(14, 8, ?), float32] */;
  %666 = @func_195(%633) /* ty=Tensor[(14, 9, 12), bool] */;
  %667 = %634.0;
  %668 = %637.0;
  %669 = %652.3;
  %670 = power(%663, %664) /* ty=Tensor[(14, 8, 1470), float64] */;
  %671 = acosh(%665) /* ty=Tensor[(14, 8, ?), float32] */;
  (%666, %667, %668, %669, %var_9927, meta[relay.Constant][48] /* ty=Tensor[(990), float32] */, %var_9929, meta[relay.Constant][49] /* ty=Tensor[(260), float32] */, %670, %671)
}

def @func_6131(%var_6120: bool, %var_6121: Tensor[(15, 6, 15), bool]) -> Tensor[(15, 6, 15), bool] {
  %672 = cast(%var_6120, dtype="bool") /* ty=bool */;
  %673 = cast(%var_6121, dtype="bool") /* ty=Tensor[(15, 6, 15), bool] */;
  logical_and(%672, %673) /* ty=Tensor[(15, 6, 15), bool] */
}

def @func_2491(%var_2426: Tensor[(3, 5, 8), float64], %var_2427: Tensor[(3, 5, 8), float64]) -> (Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) {
  %674 = cast(%var_2427, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %675 = shape_of(%var_2426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%var_2426, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = greater_equal(%676, %677) /* ty=Tensor[(3, 5, 8), bool] */;
  %679 = cast(%678, dtype="float64") /* ty=Tensor[(3, 5, 8), float64] */;
  %680 = acos(%679) /* ty=Tensor[(3, 5, 8), float64] */;
  %681 = cast(%680, dtype="float32") /* ty=Tensor[(3, 5, 8), float32] */;
  %682 = cast(1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %683 = reshape(%682, newshape=[]) /* ty=int32 */;
  %684 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 180), uint32] */, dtype="uint32") /* ty=Tensor[(2, 180), uint32] */;
  %685 = reshape(%684, newshape=[5, 12, 6]) /* ty=Tensor[(5, 12, 6), uint32] */;
  %686 = @func_1890(%685) /* ty=(Tensor[(5, 12, 6), bool], Tensor[(14, 9, 12), bool], int32) */;
  %687 = log2(%681) /* ty=Tensor[(3, 5, 8), float32] */;
  %688 = @func_195(%683) /* ty=Tensor[(14, 9, 12), bool] */;
  %689 = %686.1;
  (%687, %688, 1 /* ty=int32 */, %689, meta[relay.Constant][50] /* ty=Tensor[(2, 180), uint32] */)
}

def @func_8793(%var_8791: Tensor[(1, 8, 11), float32]) -> (Tensor[(2, 8, 11), float32],) {
  @func_8790(%var_8791) /* ty=(Tensor[(2, 8, 11), float32],) */
}

def @func_8686() -> (Tensor[(14, 8, 13), int16], Tensor[(14, 8, 13), float32]) {
  @func_8684() /* ty=(Tensor[(14, 8, 13), int16], Tensor[(14, 8, 13), float32]) */
}

def @func_6086(%var_6084: Tensor[(3, 5, 9), float32], %var_6085: Tensor[(3, 5, 9), float32]) -> Tensor[(3, 5, 9), int8] {
  @func_6082(%var_6084, %var_6085) /* ty=Tensor[(3, 5, 9), int8] */
}

def @func_8227() -> (Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) {
  %698 = fn () -> (Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) {
    %690 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %691 = @func_7970() /* ty=(Tensor[(588), float64],) */;
    %692 = cast(meta[relay.Constant][51] /* ty=Tensor[(88), float32] */, dtype="float32") /* ty=Tensor[(88), float32] */;
    %693 = reshape(%692, newshape=[8, 11, 1]) /* ty=Tensor[(8, 11, 1), float32] */;
    %694 = @func_3591(%693) /* ty=(Tensor[(8, 11, ?), float64], Tensor[(8, 11, ?), bool]) */;
    %695 = %690.0;
    %696 = %691.0;
    %697 = %694.1;
    (%695, %696, %697, meta[relay.Constant][51] /* ty=Tensor[(88), float32] */)
  };
  %698() /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(588), float64], Tensor[(8, 11, ?), bool], Tensor[(88), float32]) */
}

def @func_8684() -> (Tensor[(14, 8, 13), int16], Tensor[(14, 8, 13), float32]) {
  %699 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
  %700 = %699.0;
  %701 = cast(%700, dtype="int16") /* ty=Tensor[(14, 8, ?), int16] */;
  %702 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 8, 13), uint16] */, dtype="int16") /* ty=Tensor[(14, 8, 13), int16] */;
  %703 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 8, 13), uint16] */, dtype="float32") /* ty=Tensor[(14, 8, 13), float32] */;
  %704 = bitwise_or(%701, %702) /* ty=Tensor[(14, 8, 13), int16] */;
  %705 = log10(%703) /* ty=Tensor[(14, 8, 13), float32] */;
  (%704, %705)
}

def @func_7600() -> (Tensor[(14, 8, ?), uint16],) {
  %708 = fn () -> (Tensor[(14, 8, ?), uint16],) {
    %706 = @func_7556() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %707 = %706.0;
    (%707,)
  };
  %708() /* ty=(Tensor[(14, 8, ?), uint16],) */
}

def @func_8474(%var_8471: bool, %var_8472: Tensor[(240), float64], %var_8473: Tensor[(84), float32]) -> (Tensor[(588), float64], Tensor[(15, 6, 15), bool], bool, Tensor[(675, 2), bool], Tensor[(6, 10, 4), float32], Tensor[(240), float64], Tensor[(84), float32], Tensor[(9, 1), uint32], Tensor[(3, 3), uint32], Tensor[(770), float32], Tensor[(3, 45), float32]) {
  @func_8469(%var_8471, %var_8472, %var_8473) /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool], bool, Tensor[(675, 2), bool], Tensor[(6, 10, 4), float32], Tensor[(240), float64], Tensor[(84), float32], Tensor[(9, 1), uint32], Tensor[(3, 3), uint32], Tensor[(770), float32], Tensor[(3, 45), float32]) */
}

def @func_9428() -> Tensor[(15, 6, 15), uint32] {
  %715 = fn () -> Tensor[(15, 6, 15), uint32] {
    %709 = @func_8040() /* ty=(Tensor[(588), float64], Tensor[(15, 6, 15), bool]) */;
    %710 = %709.1;
    %711 = cast(meta[relay.Constant][53] /* ty=Tensor[(15, 6, 15), bool] */, dtype="uint32") /* ty=Tensor[(15, 6, 15), uint32] */;
    %712 = shape_of(%710, dtype="int32") /* ty=Tensor[(3), int32] */;
    %713 = cast(%710, dtype="uint32") /* ty=Tensor[(15, 6, 15), uint32] */;
    %714 = dyn.reshape(%711, %712, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%713, %714) /* ty=Tensor[(15, 6, 15), uint32] */
  };
  %715() /* ty=Tensor[(15, 6, 15), uint32] */
}

def @func_9635(%var_9633: Tensor[(3, 15, 12), uint8], %var_9634: Tensor[(3, 15, 12), uint8]) -> (Tensor[(3, 15, 12), bool],) {
  @func_9631(%var_9633, %var_9634) /* ty=(Tensor[(3, 15, 12), bool],) */
}

def @func_5138(%var_5136: Tensor[(6, 10, 4), float64], %var_5137: Tensor[(84), float32]) -> (Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) {
  %723 = fn (%var_5114: Tensor[(6, 10, 4), float64], %var_5131: Tensor[(84), float32]) -> (Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) {
    %716 = cast(%var_5114, dtype="float64") /* ty=Tensor[(6, 10, 4), float64] */;
    %717 = asin(%716) /* ty=Tensor[(6, 10, 4), float64] */;
    %718 = cast(%717, dtype="float32") /* ty=Tensor[(6, 10, 4), float32] */;
    %719 = cast(%var_5131, dtype="float32") /* ty=Tensor[(84), float32] */;
    %720 = reshape(%719, newshape=[3, 7, 4]) /* ty=Tensor[(3, 7, 4), float32] */;
    %721 = log(%718) /* ty=Tensor[(6, 10, 4), float32] */;
    %722 = @func_2937(%720) /* ty=Tensor[(3, 7, 4), float64] */;
    (%721, %722, %var_5131)
  };
  %723(%var_5136, %var_5137) /* ty=(Tensor[(6, 10, 4), float32], Tensor[(3, 7, 4), float64], Tensor[(84), float32]) */
}

def @func_7552(%var_7550: Tensor[(4, 16, 5), float32]) -> Tensor[(4, 16, 5), float32] {
  @func_7549(%var_7550) /* ty=Tensor[(4, 16, 5), float32] */
}

def @func_8634(%var_8632: Tensor[(224), bool], %var_8633: Tensor[(7, 110), float32]) -> (Tensor[(14, 8, ?), uint16], Tensor[(224), bool], Tensor[(9), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32], Tensor[(7, 2, 16), bool]) {
  @func_8630(%var_8632, %var_8633) /* ty=(Tensor[(14, 8, ?), uint16], Tensor[(224), bool], Tensor[(9), uint32], uint32, Tensor[(9), uint32], Tensor[(7, 110), float32], Tensor[(7, 2, 16), bool]) */
}

def @func_4921(%var_4918: Tensor[(1, 9, 13), float64], %var_4919: Tensor[(1470), float64], %var_4920: Tensor[(120), float64]) -> (Tensor[(?, 9, 13), uint64], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64], int32, Tensor[(120), float64]) {
  @func_4916(%var_4918, %var_4919, %var_4920) /* ty=(Tensor[(?, 9, 13), uint64], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64], int32, Tensor[(120), float64]) */
}

def @func_1065(%var_1062: uint32, %var_1063: Tensor[(9, 1), uint32], %var_1064: Tensor[(770), float32]) -> (Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) {
  %735 = fn (%var_1032: uint32, %var_1033: Tensor[(9, 1), uint32], %var_1050: Tensor[(770), float32]) -> (Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) {
    %724 = cast(%var_1032, dtype="uint32") /* ty=uint32 */;
    %725 = cast(%var_1033, dtype="uint32") /* ty=Tensor[(9, 1), uint32] */;
    %726 = cast(%var_1050, dtype="float32") /* ty=Tensor[(770), float32] */;
    %727 = reshape(%726, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
    %728 = @func_430(%727) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */;
    %729 = cast(%var_1050, dtype="float32") /* ty=Tensor[(770), float32] */;
    %730 = reshape(%729, newshape=[11, 7, 10]) /* ty=Tensor[(11, 7, 10), float32] */;
    %731 = @func_430(%730) /* ty=(Tensor[(11, 7, 10), float32], Tensor[(11, 7, 10), uint8], Tensor[(11, 7, 10), uint32], Tensor[(11, 7, 10), float64], Tensor[(11, 7, 10), float32]) */;
    %732 = minimum(%724, %725) /* ty=Tensor[(9, 1), uint32] */;
    %733 = %728.3;
    %734 = %731.2;
    (%732, %733, %var_1050, %734)
  };
  %735(%var_1062, %var_1063, %var_1064) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */
}

def @func_7716() -> Tensor[(14, 8, ?), float64] {
  %739 = fn () -> Tensor[(14, 8, ?), float64] {
    %736 = @func_7599() /* ty=(Tensor[(14, 8, ?), uint16],) */;
    %737 = %736.0;
    %738 = cast(%737, dtype="float64") /* ty=Tensor[(14, 8, ?), float64] */;
    sinh(%738) /* ty=Tensor[(14, 8, ?), float64] */
  };
  %739() /* ty=Tensor[(14, 8, ?), float64] */
}

def @func_7877(%var_7874: uint32, %var_7875: Tensor[(9), uint32], %var_7876: Tensor[(770), float32]) -> (Tensor[(10, 2, 16), uint64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) {
  %750 = fn (%var_7857: uint32, %var_7858: Tensor[(9), uint32], %var_7859: Tensor[(770), float32]) -> (Tensor[(10, 2, 16), uint64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) {
    %740 = @func_7736() /* ty=(Tensor[(14, 8, ?), float64], Tensor[(10, 2, 16), uint64], Tensor[(320), int8]) */;
    %741 = cast(%var_7857, dtype="uint32") /* ty=uint32 */;
    %742 = cast(%var_7858, dtype="uint32") /* ty=Tensor[(9), uint32] */;
    %743 = cast(%var_7859, dtype="float32") /* ty=Tensor[(770), float32] */;
    %744 = reshape(%741, newshape=[]) /* ty=uint32 */;
    %745 = reshape(%742, newshape=[9, 1]) /* ty=Tensor[(9, 1), uint32] */;
    %746 = reshape(%743, newshape=[770]) /* ty=Tensor[(770), float32] */;
    %747 = @func_1061(%744, %745, %746) /* ty=(Tensor[(9, 1), uint32], Tensor[(11, 7, 10), float64], Tensor[(770), float32], Tensor[(11, 7, 10), uint32]) */;
    %748 = %740.1;
    %749 = %747.2;
    (%748, %749, %var_7857, %var_7858, %var_7859)
  };
  %750(%var_7874, %var_7875, %var_7876) /* ty=(Tensor[(10, 2, 16), uint64], Tensor[(770), float32], uint32, Tensor[(9), uint32], Tensor[(770), float32]) */
}

def @func_4916(%var_4857: Tensor[(1, 9, 13), float64], %var_4904: Tensor[(1470), float64], %var_4910: Tensor[(120), float64]) -> (Tensor[(?, 9, 13), uint64], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(14, 15, 7), float64], Tensor[(1470), float64], int32, Tensor[(120), float64]) {
  %751 = cast(%var_4857, dtype="float64") /* ty=Tensor[(1, 9, 13), float64] */;
  %752 = erf(%751) /* ty=Tensor[(1, 9, 13), float64] */;
  %753 = cast(%var_4857, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
  %755 = cast(%752, dtype="bool") /* ty=Tensor[(1, 9, 13), bool] */;
  %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %757 = equal(%755, %756) /* ty=Tensor[(?, 9, 13), bool] */;
  %758 = cast(%752, dtype="uint8") /* ty=Tensor[(1, 9, 13), uint8] */;
  %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
  %760 = cast(%757, dtype="uint8") /* ty=Tensor[(?, 9, 13), uint8] */;
  %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %762 = bitwise_and(%760, %761) /* ty=Tensor[(?, 9, 13), uint8] */;
  %763 = cast(%757, dtype="uint64") /* ty=Tensor[(?, 9, 13), uint64] */;
  %764 = shape_of(%762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %765 = cast(%762, dtype="uint64") /* ty=Tensor[(?, 9, 13), uint64] */;
  %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %767 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %768 = reshape(%767, newshape=[]) /* ty=int32 */;
  %769 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %770 = reshape(%769, newshape=[]) /* ty=int32 */;
  %771 = cast(%var_4904, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %772 = cast(%var_4904, dtype="float64") /* ty=Tensor[(1470), float64] */;
  %773 = reshape(%771, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %774 = reshape(%772, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %775 = @func_4176(%773, %774) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(14, 15, 7), float64]) */;
  %776 = cast(%var_4910, dtype="float64") /* ty=Tensor[(120), float64] */;
  %777 = cast(%var_4910, dtype="float64") /* ty=Tensor[(120), float64] */;
  %778 = reshape(%776, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %779 = reshape(%777, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), float64] */;
  %780 = @func_2491(%778, %779) /* ty=(Tensor[(3, 5, 8), float32], Tensor[(14, 9, 12), bool], int32, Tensor[(14, 9, 12), bool], Tensor[(2, 180), uint32]) */;
  %781 = minimum(%765, %766) /* ty=Tensor[(?, 9, 13), uint64] */;
  %782 = @func_195(%768) /* ty=Tensor[(14, 9, 12), bool] */;
  %783 = @func_195(%770) /* ty=Tensor[(14, 9, 12), bool] */;
  %784 = %775.0;
  %785 = %780.2;
  (%781, %782, -10 /* ty=int32 */, %783, %784, %var_4904, %785, %var_4910)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen411/build/output.py", line 1579, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:15:07] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

