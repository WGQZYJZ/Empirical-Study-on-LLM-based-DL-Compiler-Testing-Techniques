import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_180 = relay.var("var_180", dtype = "int32", shape = ())#candidate|180|()|var|int32
const_181 = relay.const([[[-9,-7,6,-5,4,-5,5,7,-2,-8,4,-5],[-1,-9,-4,-10,3,-1,3,-1,-8,-5,-2,-6],[-1,-1,6,3,6,4,-10,2,-2,-2,1,-1],[10,3,-10,-8,5,8,-7,1,-7,-3,9,-10],[-10,-5,8,1,6,3,5,1,-3,1,1,3],[-9,7,-4,9,3,-7,4,10,4,-7,7,10],[4,3,-5,7,5,-10,-5,2,-6,1,-9,-9],[-6,-3,-2,-6,4,6,-6,-3,-1,9,-3,5],[10,-1,-9,-1,7,-10,6,-9,-7,-10,-10,-5]],[[6,-6,-3,-10,7,1,2,-10,5,-9,-10,-1],[-5,-2,-2,7,-9,8,-4,-6,-8,8,10,-8],[-10,7,-7,-8,9,-9,-5,10,-9,-5,-5,-5],[-9,-2,1,-5,10,2,10,2,-8,-10,-9,-6],[-9,1,-3,8,1,2,-1,-4,8,-10,8,6],[7,10,8,-2,6,-2,4,-10,9,9,-8,1],[-3,-2,7,6,6,7,1,-3,-7,-5,-3,5],[6,2,-9,7,7,2,9,-7,-3,9,6,-10],[-4,-3,1,-1,-4,-10,-7,6,8,8,-5,2]],[[-9,-3,-2,-7,1,7,10,8,10,-8,8,-3],[-3,6,5,-7,9,-9,-6,-9,-6,8,4,-9],[-7,-3,2,-3,-6,2,-7,8,-10,6,5,2],[4,7,-7,2,5,9,9,10,-9,9,-1,1],[-5,-9,4,2,-5,-6,7,-6,-1,-10,5,8],[-2,1,5,7,2,-10,1,-6,3,7,-8,-2],[8,-1,-10,10,-5,7,6,10,2,-4,-2,-7],[2,4,-9,-9,6,1,-9,10,-3,-6,1,-4],[-7,-5,-1,-3,10,-1,4,5,9,8,8,-2]],[[4,-1,3,7,-6,-9,7,-7,1,-6,-9,-7],[-9,-6,2,2,-5,1,8,8,-10,-10,10,6],[7,-6,-2,-7,-7,-2,1,5,6,-6,3,8],[-2,4,6,-3,1,9,4,8,9,2,-3,9],[-4,6,10,3,-2,4,-7,1,6,-1,8,-4],[9,-10,-5,-4,4,6,-3,6,6,-3,6,-2],[6,3,-5,2,10,-8,10,4,3,-8,9,-2],[-5,-1,-9,-1,6,-10,10,-5,-3,-7,-5,7],[-1,4,10,-6,-1,3,-7,6,10,-4,-7,1]],[[2,-2,-9,6,-5,-7,-8,-9,-9,10,9,-1],[1,9,4,9,8,-4,-2,6,-1,-2,7,8],[4,-5,-4,-3,-4,3,4,6,5,10,8,-3],[-8,-8,6,2,3,-4,4,2,-2,5,-8,10],[1,-9,6,10,6,-9,-3,2,-8,1,-6,7],[-7,-5,-3,8,-7,-5,-8,-6,-10,-7,-8,6],[-9,-6,-1,4,7,-5,-4,-6,-8,3,3,-2],[-6,5,10,-8,2,4,8,3,7,6,1,-4],[1,6,-9,-9,7,-9,-7,8,2,3,1,-5]],[[-4,-2,3,5,-7,9,9,-3,2,-5,-10,8],[-4,5,-9,-6,3,9,5,-1,-8,10,-6,6],[-6,7,-4,9,-10,-5,-7,3,10,6,-7,-10],[5,4,3,-1,1,-5,5,-6,10,-3,2,-9],[-7,8,1,-10,-7,10,-6,-9,9,3,1,10],[-1,-10,-8,-5,-1,-2,10,1,-8,-7,1,1],[-1,-5,-6,-4,9,-9,-3,3,-9,8,-9,-7],[9,-1,-2,-10,9,-7,-2,3,7,8,8,5],[8,-7,4,4,-9,-4,7,6,-9,2,-6,-1]],[[-7,-2,-2,-10,-4,-7,-10,2,6,-10,9,-9],[-1,-8,-6,-7,-9,7,9,6,-4,-4,4,6],[1,4,-6,-8,6,1,6,4,-8,-1,-8,-2],[9,-1,-1,4,-4,2,1,-4,-8,10,4,1],[3,-1,-8,5,9,10,-2,-4,3,6,-7,-3],[-7,9,7,3,4,2,9,7,3,9,-4,-2],[10,2,-2,2,-10,-1,3,-8,10,-6,7,-8],[-3,-6,2,5,-9,9,6,1,4,-4,5,-5],[1,-5,-7,9,-4,8,-6,-7,-1,-6,-2,2]],[[6,5,7,-8,3,7,8,1,-2,7,-3,-4],[-5,-3,7,2,-1,-7,-9,5,10,-2,-9,-2],[4,-10,8,-5,-2,9,-2,-5,10,-1,8,-2],[9,1,-9,-8,4,3,-2,4,-5,-5,4,1],[-1,6,2,8,-4,-1,1,7,7,-9,6,-3],[8,9,-8,-9,-7,-6,3,-10,4,9,3,3],[3,9,9,4,1,-1,-6,-8,5,1,10,2],[-5,9,6,7,6,-3,-1,-2,10,3,-4,-10],[7,-7,-5,10,2,9,1,-7,6,-2,7,-1]],[[-9,-3,-9,6,-4,-2,-3,-10,-10,-3,7,-10],[10,-1,-7,-5,9,3,-1,-4,1,-6,8,7],[7,1,-10,8,-4,-10,-1,9,-3,10,1,-10],[9,5,6,-9,4,8,2,5,-6,7,7,9],[-6,3,2,10,-1,-1,8,9,-10,5,4,-8],[-4,8,-8,-3,-6,4,2,-9,10,10,-10,10],[-8,1,-7,-2,1,6,9,-6,6,10,5,-10],[9,-2,9,-8,1,8,-8,10,-2,-1,-6,3],[10,-1,-5,9,-1,3,-5,6,2,-5,-4,-4]],[[-3,-5,-3,-2,-4,-7,4,-2,-8,-4,8,10],[-1,2,10,-2,-2,-2,7,-9,7,-7,3,5],[-6,4,-6,-6,9,-6,6,4,5,3,9,3],[8,-6,-1,2,-7,-1,-1,4,5,-1,-8,-8],[-10,-6,-5,-7,-9,3,2,-7,-4,-6,7,6],[-9,-4,-3,-1,5,4,-4,-2,1,-5,3,-6],[2,1,-3,3,6,-9,10,-2,7,3,-4,-6],[-2,-10,5,-1,9,6,9,-3,7,-1,-4,-9],[8,4,-9,-9,-3,6,-6,-5,-9,6,-2,-10]],[[-3,-5,-6,9,8,-6,-6,-10,3,-7,4,-5],[-6,-8,3,7,-3,-4,5,-2,9,-2,2,-5],[9,-7,5,4,6,10,-4,-5,7,5,-5,7],[-5,-10,-2,-6,-9,1,-7,-5,-1,-10,2,-1],[5,3,2,-3,-10,6,9,10,-6,-4,-8,-6],[6,3,1,6,-9,-3,10,8,10,1,-9,-9],[-4,8,2,10,-7,-7,-6,-4,4,3,-5,4],[-8,-9,6,10,1,-1,-1,2,-5,-8,-1,-5],[2,-7,-3,-6,-5,-6,3,10,-5,8,3,5]],[[8,-8,-8,2,-3,8,-1,6,9,7,-9,7],[-6,-1,-4,9,-2,9,-2,-1,-3,10,3,-9],[8,-6,1,-5,8,-7,4,4,-5,-7,5,1],[-5,1,-6,2,-6,-5,2,5,-5,4,-10,-5],[-1,-9,8,-4,2,-3,-6,4,-3,-9,8,7],[-6,-3,9,-9,-10,-7,-10,-1,6,1,-9,4],[-4,7,6,-3,4,7,4,4,-6,-2,3,9],[9,3,-2,10,-9,8,-2,6,-9,-1,-2,-6],[-7,-5,4,-2,-1,-1,-2,-1,-9,-6,9,8]],[[6,-2,-6,7,9,-6,5,5,2,10,-8,-3],[-9,-7,1,-8,-7,-7,9,6,7,10,-9,9],[3,-3,10,8,-7,8,4,-6,8,-2,9,-4],[2,-10,1,2,1,-4,3,10,9,-7,8,4],[9,3,-5,-8,-3,8,10,-7,-7,-1,5,10],[1,-8,3,5,9,-1,6,-1,-10,4,-1,2],[-4,-8,-6,4,6,-8,-6,-2,-2,-9,-4,9],[1,5,-6,2,10,2,10,5,10,6,6,-10],[1,-7,2,-1,1,7,-3,-1,10,-10,1,-10]],[[-9,-8,-6,-3,10,4,-8,-4,-10,-8,9,7],[5,4,3,7,-2,-6,3,-5,-3,-2,-3,2],[7,-8,1,10,5,10,-7,9,-9,-8,-6,5],[2,-10,4,-10,-2,-9,-6,-9,-2,6,-7,1],[-9,10,3,-5,-3,-10,9,-9,-10,5,7,4],[4,-1,6,7,-10,-3,2,-8,6,-3,-1,5],[-1,5,6,-7,9,3,9,-3,9,-4,5,-8],[-1,4,-5,3,-3,4,-8,-2,-1,4,-9,1],[-2,-10,6,-8,1,10,2,10,10,5,-8,-4]]], dtype = "int32")#candidate|181|(14, 9, 12)|const|int32
bop_182 = relay.less_equal(var_180.astype('bool'), const_181.astype('bool')) # shape=(14, 9, 12)
output = bop_182
output2 = bop_182
func_195 = relay.Function([var_180,], output)
mod['func_195'] = func_195
mod = relay.transform.InferType()(mod)
var_196 = relay.var("var_196", dtype = "int32", shape = ())#candidate|196|()|var|int32
output = func_195(var_196)
func_197 = relay.Function([var_196], output)
mutated_mod['func_197'] = func_197
mutated_mod = relay.transform.InferType()(mutated_mod)
var_365 = relay.var("var_365", dtype = "float32", shape = (11, 7, 10))#candidate|365|(11, 7, 10)|var|float32
const_366 = relay.const([[[7.892300,-2.710945,-8.025940,-3.974066,9.449554,5.052625,-3.723291,4.205894,-4.098277,6.098367],[9.796889,-1.614018,8.476056,2.956312,7.109057,9.609088,-1.348716,-6.300356,-0.162683,4.567856],[-5.616062,-6.139724,-3.983505,-9.025411,0.969169,4.441080,-2.734134,-1.975700,-2.528437,0.858613],[-5.233770,9.022646,2.096762,2.578909,-9.084115,5.885641,3.000362,9.615052,-4.225072,0.227801],[9.463773,-2.985840,-9.941386,5.814636,-9.455590,-7.613062,1.775465,-4.659962,-0.548045,1.114837],[-3.339846,1.815079,-5.724482,9.701690,-0.187622,-0.179100,4.622264,2.714398,2.943624,8.899806],[-9.304525,-6.699953,1.791286,-6.734764,-4.658716,-1.357137,-7.455695,4.818845,-3.189152,8.699264]],[[9.812062,-0.796947,-8.128649,-4.232175,-9.521921,-6.418800,-3.537747,-1.212191,9.193043,5.286226],[-6.309351,-9.458986,2.123363,4.321685,2.849288,-6.137000,0.467829,5.504736,-1.674460,0.858177],[2.256923,6.968721,5.798963,5.588277,-0.556863,-6.620759,-3.578588,-5.084543,-0.436302,0.177812],[-6.127651,-7.749368,-7.014858,-0.163957,-4.612302,7.313459,1.724226,3.051299,2.874894,8.520972],[1.283510,-6.144371,-4.420790,1.333857,6.709984,-6.127744,-4.880340,1.268568,9.680617,4.356278],[0.101261,9.033951,-0.581775,1.946838,-4.188782,4.705330,9.865111,5.221071,-6.224227,-8.205904],[-3.619151,-0.165977,-7.888218,2.226589,7.519794,7.616983,-5.032862,7.716149,3.591332,-0.220110]],[[3.479161,2.509861,0.748370,-6.623645,6.121379,5.064465,-4.524418,-2.502243,4.862147,-4.552361],[-9.813955,-1.347633,-4.834380,0.828490,-2.696650,9.129989,-8.601330,-6.493882,-4.435275,5.006368],[-9.403984,7.452882,-0.887141,9.007894,8.891819,-8.675821,6.048683,-5.291429,-1.729754,5.302776],[9.897175,-6.909126,0.664669,-3.564898,-0.850558,9.989062,-9.520253,3.284375,-3.686556,8.083624],[-7.594689,9.985893,-2.871102,4.970646,-8.809032,3.468454,-7.724081,9.366484,7.354169,1.059386],[5.847639,-8.547736,0.707612,0.643839,-7.925791,9.304438,-7.485871,-3.209391,5.233674,-6.681215],[-9.795892,7.646224,1.684909,-8.136513,-9.056202,-0.131741,-0.145668,-3.649082,-8.488727,3.199906]],[[-5.378262,3.928311,5.764367,7.662466,-7.451575,-8.778960,9.791346,0.380436,-7.574026,0.348595],[3.689475,5.109211,-0.949823,2.524523,5.326650,0.433644,5.567017,-2.450354,-1.188344,9.419972],[0.635152,5.448502,-6.885437,-9.893808,-8.496548,8.232461,5.201862,2.812411,-9.588837,8.239678],[1.441003,7.776814,6.285655,-3.524865,4.129989,-3.334709,2.790319,-1.997321,-7.230847,3.126748],[-1.772316,-4.040051,1.630789,-0.137140,-0.642883,6.470795,-5.059901,9.295061,-4.582900,-1.769084],[6.961390,6.424722,-8.304826,-3.568692,-6.704559,-9.185479,6.131703,-5.054874,-6.994429,-4.082801],[-4.277149,0.124986,8.218301,6.045131,-0.691575,3.229549,-3.567876,-2.012756,-6.921723,-1.012796]],[[-5.948957,-7.464341,4.617057,-8.622552,6.115579,8.658386,-0.933490,-4.653250,9.829985,-1.338048],[7.725849,5.197799,-2.985341,1.136031,9.035469,7.400769,-0.480310,9.564147,-5.435490,2.084738],[-7.924260,-8.410003,7.217800,-2.618651,-3.137910,-6.685673,6.665102,8.486373,-7.277260,-8.279122],[-8.841344,7.017699,3.703216,8.934362,7.884617,9.200972,7.693273,-1.202141,0.356181,7.041047],[8.800511,3.531824,9.373433,-8.543988,8.458457,2.409466,-2.291792,-5.219786,5.123784,-0.704701],[7.192889,6.383380,5.164940,4.060796,-5.491319,-3.573525,2.637013,-9.352780,-2.261775,-8.983902],[-8.099346,-2.271785,-5.333817,-7.313234,-8.712165,-3.851038,0.456284,-6.580369,-6.088258,3.481898]],[[-6.663692,-9.306345,9.230013,-0.940117,-1.229944,-0.263977,5.615027,7.110647,1.326534,6.383587],[-9.443957,0.296346,8.751377,-4.287122,-2.391487,2.309039,9.682279,-4.921830,-9.352928,8.241807],[5.807673,7.492368,-5.793155,-0.183242,9.848830,4.695176,-0.313067,5.009161,-1.536064,5.120371],[1.156522,6.772707,-5.334359,8.724582,-8.886007,4.584617,-3.378632,-7.500112,-3.623241,3.889237],[3.175038,1.884821,8.681024,0.487896,8.106357,-7.418564,1.417942,3.141809,8.927474,7.377287],[7.985628,3.280007,1.314839,-3.189307,7.162029,1.355094,-4.120615,-4.787036,9.790688,9.372825],[-1.787355,9.744519,9.034590,4.962808,-5.193568,1.136632,-2.346655,3.151369,-3.559410,1.038966]],[[1.349030,-0.965082,5.852952,-6.057104,7.936108,1.560017,0.584523,4.011617,-1.786137,-7.495372],[0.311562,-0.722226,-4.460598,-7.243543,-2.307075,-9.444057,-6.442779,4.111084,6.225862,2.580949],[-7.164292,-6.811953,8.303374,-7.091470,2.761426,-9.075040,-1.883813,-6.320631,2.395717,-3.959623],[-1.784516,2.249213,2.090499,-0.222023,-8.636236,8.175398,3.485122,4.620313,-1.688057,-0.259028],[-4.390789,-9.833271,3.620141,3.577451,5.824694,-8.099143,9.906666,3.628988,8.315465,8.797658],[1.349898,-6.032034,0.797251,1.294011,1.785188,3.710609,0.792546,9.258001,-8.445166,4.215482],[-9.239426,6.973699,1.836018,-4.910111,-3.427389,3.374334,2.585091,-5.445625,1.660858,-8.956596]],[[5.973300,-3.057229,0.924979,-8.683897,-7.345503,-0.621187,4.371689,-5.878444,-6.817710,8.642939],[4.094583,-6.942898,-1.234380,2.517094,-5.119235,1.594989,0.470806,-8.260189,0.824930,-3.094346],[-6.174284,-4.966342,-5.263109,1.290100,3.732018,2.310769,6.623351,8.564336,5.661910,8.759657],[-4.624924,4.159598,-8.135756,0.126082,-4.693565,9.251102,-0.204389,0.055397,3.326932,3.822307],[6.020850,6.340400,-0.291560,8.671776,5.824188,4.216441,5.587357,8.752080,3.322854,2.610371],[-1.588646,-5.619920,-2.482451,7.211838,-1.896240,-4.772117,6.001788,-5.536438,7.710505,8.323837],[-8.484038,-5.054034,-3.541878,4.913837,-8.952901,9.054454,-5.142882,0.467201,4.304404,-3.909358]],[[1.166341,-1.588323,-9.240618,-2.169133,-1.096087,-5.944390,9.070626,-4.316777,-6.739521,3.589613],[-7.707301,7.686463,-8.955501,4.154551,8.265662,-8.952954,-7.268941,4.605761,6.525876,-0.462662],[-8.692991,4.661527,-6.699100,7.555875,1.831603,4.721197,0.258151,-9.093953,-4.012229,-6.095726],[3.914070,-1.682279,8.721596,-0.442511,-9.012227,-8.378224,9.198881,-0.904705,8.546866,-7.513018],[-6.040045,-2.467382,-5.980619,2.530429,-9.325011,-6.667203,-9.510345,8.537064,3.974360,4.331974],[6.204834,-4.673520,3.382438,-8.604636,-5.737435,6.163861,-4.471517,-7.776574,3.833299,2.111851],[7.853921,6.062460,8.976099,5.633016,2.520044,-2.517670,-1.874987,5.472494,9.032004,-6.956570]],[[9.717622,-4.625204,4.856058,-6.503467,-4.702027,-5.718861,-2.418170,-6.849665,6.358428,-3.621251],[-7.791799,8.691962,9.539633,-6.085968,-1.862703,-7.628627,-8.625199,3.443754,3.091313,-0.376195],[-1.399528,-5.291580,0.799827,-8.075301,-3.678959,8.957675,3.727556,-6.885812,4.584705,4.671329],[6.817338,6.975113,-2.520200,-5.911266,3.334985,3.010058,3.292163,-2.090011,-8.919449,2.879854],[8.377501,6.906513,0.648652,7.198461,-4.818912,-4.099172,-3.074857,-9.034637,2.653062,-2.578074],[1.087183,-7.084034,2.752306,0.641636,0.747597,6.133647,1.461700,8.383445,-1.122529,-4.466762],[8.351514,-7.108452,-2.630987,-1.339728,5.706437,-0.392650,-7.570114,-0.483573,5.339295,-3.175463]],[[-9.638795,1.877532,-1.135108,2.620618,0.874219,-7.112783,-6.790921,-0.426281,9.745096,-5.704628],[-1.270394,1.988649,8.852064,-3.514947,-2.264445,0.979572,-0.777838,-1.515092,4.125302,9.948886],[1.497375,3.810321,1.648872,1.067190,-4.579389,9.693699,-4.463065,-4.893870,-2.717097,1.050237],[6.226711,-2.137603,5.612192,-9.286959,-2.126549,-5.766094,8.567712,5.056788,8.130324,0.026276],[0.521735,-7.954946,-0.295843,9.386467,-5.906142,7.935579,-4.161286,1.923516,-6.369307,-3.180788],[-7.368719,6.351867,2.763807,-6.406813,9.234190,-2.204460,-2.026175,-2.261171,7.523032,-9.673808],[-9.249332,5.562650,3.087385,2.527165,1.440799,-2.358230,-1.691336,8.898858,-1.611784,-8.852260]]], dtype = "float32")#candidate|366|(11, 7, 10)|const|float32
bop_367 = relay.mod(var_365.astype('float32'), relay.reshape(const_366.astype('float32'), relay.shape_of(var_365))) # shape=(11, 7, 10)
uop_370 = relay.sigmoid(var_365.astype('float32')) # shape=(11, 7, 10)
bop_378 = relay.bitwise_xor(uop_370.astype('uint8'), relay.reshape(var_365.astype('uint8'), relay.shape_of(uop_370))) # shape=(11, 7, 10)
uop_381 = relay.tan(uop_370.astype('float32')) # shape=(11, 7, 10)
uop_383 = relay.asinh(uop_381.astype('float32')) # shape=(11, 7, 10)
bop_387 = relay.maximum(uop_381.astype('uint32'), relay.reshape(uop_370.astype('uint32'), relay.shape_of(uop_381))) # shape=(11, 7, 10)
uop_392 = relay.exp(uop_383.astype('float64')) # shape=(11, 7, 10)
bop_418 = relay.greater(uop_383.astype('bool'), relay.reshape(var_365.astype('bool'), relay.shape_of(uop_383))) # shape=(11, 7, 10)
uop_424 = relay.erf(bop_418.astype('float32')) # shape=(11, 7, 10)
output = relay.Tuple([bop_367,bop_378,bop_387,uop_392,uop_424,])
output2 = relay.Tuple([bop_367,bop_378,bop_387,uop_392,uop_424,])
func_430 = relay.Function([var_365,], output)
mod['func_430'] = func_430
mod = relay.transform.InferType()(mod)
mutated_mod['func_430'] = func_430
mutated_mod = relay.transform.InferType()(mutated_mod)
var_431 = relay.var("var_431", dtype = "float32", shape = (11, 7, 10))#candidate|431|(11, 7, 10)|var|float32
func_430_call = mutated_mod.get_global_var('func_430')
call_432 = func_430_call(var_431)
output = call_432
func_433 = relay.Function([var_431], output)
mutated_mod['func_433'] = func_433
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1032 = relay.var("var_1032", dtype = "uint32", shape = ())#candidate|1032|()|var|uint32
var_1033 = relay.var("var_1033", dtype = "uint32", shape = (9, 1))#candidate|1033|(9, 1)|var|uint32
bop_1034 = relay.minimum(var_1032.astype('uint32'), var_1033.astype('uint32')) # shape=(9, 1)
func_430_call = mod.get_global_var('func_430')
func_433_call = mutated_mod.get_global_var('func_433')
var_1050 = relay.var("var_1050", dtype = "float32", shape = (770,))#candidate|1050|(770,)|var|float32
call_1049 = relay.TupleGetItem(func_430_call(relay.reshape(var_1050.astype('float32'), [11, 7, 10])), 3)
call_1051 = relay.TupleGetItem(func_433_call(relay.reshape(var_1050.astype('float32'), [11, 7, 10])), 3)
func_430_call = mod.get_global_var('func_430')
func_433_call = mutated_mod.get_global_var('func_433')
call_1056 = relay.TupleGetItem(func_430_call(relay.reshape(var_1050.astype('float32'), [11, 7, 10])), 2)
call_1057 = relay.TupleGetItem(func_433_call(relay.reshape(var_1050.astype('float32'), [11, 7, 10])), 2)
output = relay.Tuple([bop_1034,call_1049,var_1050,call_1056,])
output2 = relay.Tuple([bop_1034,call_1051,var_1050,call_1057,])
func_1061 = relay.Function([var_1032,var_1033,var_1050,], output)
mod['func_1061'] = func_1061
mod = relay.transform.InferType()(mod)
var_1062 = relay.var("var_1062", dtype = "uint32", shape = ())#candidate|1062|()|var|uint32
var_1063 = relay.var("var_1063", dtype = "uint32", shape = (9, 1))#candidate|1063|(9, 1)|var|uint32
var_1064 = relay.var("var_1064", dtype = "float32", shape = (770,))#candidate|1064|(770,)|var|float32
output = func_1061(var_1062,var_1063,var_1064,)
func_1065 = relay.Function([var_1062,var_1063,var_1064,], output)
mutated_mod['func_1065'] = func_1065
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1877 = relay.var("var_1877", dtype = "uint32", shape = (5, 12, 6))#candidate|1877|(5, 12, 6)|var|uint32
const_1878 = relay.const([[[8,-8,-4,-7,-2,-1],[-8,2,-6,9,8,3],[-6,3,3,-6,1,8],[-10,-6,-9,7,-3,-1],[6,6,-8,10,-1,-5],[-4,5,-6,-3,-10,-1],[5,6,1,-9,-7,-2],[6,-10,5,-3,-10,-6],[-3,-5,7,2,7,10],[-7,-4,-3,-9,8,-8],[-7,-4,1,-3,9,9],[-5,-8,1,8,-8,-10]],[[9,-2,9,10,2,4],[3,10,-7,-10,2,-3],[-7,-8,-7,5,-8,-3],[-6,-4,8,-4,7,-7],[-4,5,6,-6,-2,7],[5,-5,9,-3,-2,5],[-4,5,2,-6,-8,10],[-10,6,-5,3,-6,-4],[-6,-4,-3,-10,-6,10],[6,4,-6,7,-3,2],[-9,9,-1,4,1,6],[5,-2,-1,-10,-8,-3]],[[9,2,5,1,9,9],[4,-7,-9,8,1,6],[-2,-2,-9,7,-3,1],[5,1,-1,-3,-6,-9],[-7,1,-8,-3,3,3],[8,-1,10,-10,5,10],[4,2,-8,-6,-9,3],[6,-10,-1,3,4,10],[-8,-1,-2,9,-8,5],[-2,-1,10,10,1,-4],[-2,10,5,-2,-8,7],[7,7,7,-1,5,-3]],[[5,-10,3,7,-3,3],[-6,-10,-1,-8,3,4],[-7,2,-5,4,8,6],[-8,-7,1,8,7,6],[6,-6,7,-10,3,6],[-7,-7,4,4,-10,4],[3,1,-1,9,2,6],[-5,6,6,-7,-2,-8],[10,8,-5,1,4,9],[2,-3,-5,-4,3,2],[9,4,4,8,4,-5],[-10,-6,-10,-2,-6,5]],[[-3,-4,8,-8,5,-10],[4,4,6,6,6,10],[8,8,-4,5,-3,-6],[7,10,5,-1,-10,6],[6,9,3,-10,9,7],[1,3,-3,7,-2,-1],[8,4,1,-3,-2,-9],[-10,-8,-6,-6,-4,-5],[9,-6,8,6,1,6],[-1,-9,1,-10,8,2],[10,3,9,3,-9,-9],[-10,4,6,-3,1,4]]], dtype = "uint32")#candidate|1878|(5, 12, 6)|const|uint32
bop_1879 = relay.less_equal(var_1877.astype('bool'), relay.reshape(const_1878.astype('bool'), relay.shape_of(var_1877))) # shape=(5, 12, 6)
bop_1884 = relay.greater(bop_1879.astype('bool'), relay.reshape(var_1877.astype('bool'), relay.shape_of(bop_1879))) # shape=(5, 12, 6)
func_195_call = mod.get_global_var('func_195')
func_197_call = mutated_mod.get_global_var('func_197')
const_1888 = relay.const(7, dtype = "int32")#candidate|1888|()|const|int32
call_1887 = func_195_call(relay.reshape(const_1888.astype('int32'), []))
call_1889 = func_195_call(relay.reshape(const_1888.astype('int32'), []))
output = relay.Tuple([bop_1884,call_1887,const_1888,])
output2 = relay.Tuple([bop_1884,call_1889,const_1888,])
func_1890 = relay.Function([var_1877,], output)
mod['func_1890'] = func_1890
mod = relay.transform.InferType()(mod)
mutated_mod['func_1890'] = func_1890
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1891 = relay.var("var_1891", dtype = "uint32", shape = (5, 12, 6))#candidate|1891|(5, 12, 6)|var|uint32
func_1890_call = mutated_mod.get_global_var('func_1890')
call_1892 = func_1890_call(var_1891)
output = call_1892
func_1893 = relay.Function([var_1891], output)
mutated_mod['func_1893'] = func_1893
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2009 = relay.var("var_2009", dtype = "int64", shape = ())#candidate|2009|()|var|int64
var_2010 = relay.var("var_2010", dtype = "int64", shape = (2, 1))#candidate|2010|(2, 1)|var|int64
bop_2011 = relay.less(var_2009.astype('bool'), var_2010.astype('bool')) # shape=(2, 1)
output = bop_2011
output2 = bop_2011
func_2015 = relay.Function([var_2009,var_2010,], output)
mod['func_2015'] = func_2015
mod = relay.transform.InferType()(mod)
mutated_mod['func_2015'] = func_2015
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2015_call = mutated_mod.get_global_var('func_2015')
var_2017 = relay.var("var_2017", dtype = "int64", shape = ())#candidate|2017|()|var|int64
var_2018 = relay.var("var_2018", dtype = "int64", shape = (2, 1))#candidate|2018|(2, 1)|var|int64
call_2016 = func_2015_call(var_2017,var_2018,)
output = call_2016
func_2019 = relay.Function([var_2017,var_2018,], output)
mutated_mod['func_2019'] = func_2019
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2346 = relay.var("var_2346", dtype = "int8", shape = (10, 2, 16))#candidate|2346|(10, 2, 16)|var|int8
var_2347 = relay.var("var_2347", dtype = "int8", shape = (10, 2, 16))#candidate|2347|(10, 2, 16)|var|int8
bop_2348 = relay.multiply(var_2346.astype('int8'), relay.reshape(var_2347.astype('int8'), relay.shape_of(var_2346))) # shape=(10, 2, 16)
const_2352 = relay.const([[[10,7,7,-3,7,-3,-7,-1,-10,4,9,8,-6,4,6,9],[-6,-7,-8,-1,8,-1,1,-5,9,10,5,9,4,9,-3,-5]],[[-5,-5,-3,-7,-10,-5,2,-1,-3,-3,1,-8,-7,-5,7,9],[-4,-2,1,-9,10,2,-6,-5,6,-5,-9,-9,4,-5,4,1]],[[-10,-5,4,2,8,8,-8,4,10,-8,6,7,1,-9,8,3],[6,-9,-1,-6,8,4,-8,2,10,1,9,-4,-10,5,6,7]],[[5,-2,-10,5,4,-6,10,2,-9,-5,-9,-9,3,-8,-2,-3],[-1,-3,-5,9,-10,2,2,-9,7,9,3,6,4,7,8,-4]],[[4,2,-8,9,-5,-7,6,-9,-9,10,8,8,-1,9,6,10],[3,-9,2,-8,-10,-5,-2,-1,3,-1,-1,-3,5,-4,5,10]],[[6,8,9,7,2,10,-8,-5,4,2,-6,-8,4,1,-5,-9],[2,1,5,3,-1,1,5,2,1,-5,-6,-7,4,-2,-9,-10]],[[-8,2,-10,-3,9,-2,-2,-4,-6,-10,-3,-5,-5,5,-9,2],[-7,-3,1,-10,1,-7,-8,-6,1,9,2,-10,-4,-10,-4,-2]],[[-9,10,2,4,-5,6,3,8,-9,7,-4,10,-4,10,-5,10],[9,7,1,-5,-2,10,5,7,-6,5,3,-7,-6,-6,-1,-6]],[[-8,2,-2,-8,9,8,-7,-8,-3,-4,-6,3,1,-2,8,3],[-9,-7,-3,7,-2,-8,4,-3,-6,-1,-9,-6,-6,1,6,-1]],[[-10,-8,-5,6,2,8,7,10,6,8,8,6,-2,-9,2,3],[-10,4,8,5,-4,-5,-2,-6,8,6,8,9,10,8,2,3]]], dtype = "int8")#candidate|2352|(10, 2, 16)|const|int8
bop_2353 = relay.add(bop_2348.astype('uint64'), relay.reshape(const_2352.astype('uint64'), relay.shape_of(bop_2348))) # shape=(10, 2, 16)
output = bop_2353
output2 = bop_2353
func_2378 = relay.Function([var_2346,var_2347,], output)
mod['func_2378'] = func_2378
mod = relay.transform.InferType()(mod)
var_2379 = relay.var("var_2379", dtype = "int8", shape = (10, 2, 16))#candidate|2379|(10, 2, 16)|var|int8
var_2380 = relay.var("var_2380", dtype = "int8", shape = (10, 2, 16))#candidate|2380|(10, 2, 16)|var|int8
output = func_2378(var_2379,var_2380,)
func_2381 = relay.Function([var_2379,var_2380,], output)
mutated_mod['func_2381'] = func_2381
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2426 = relay.var("var_2426", dtype = "float64", shape = (3, 5, 8))#candidate|2426|(3, 5, 8)|var|float64
var_2427 = relay.var("var_2427", dtype = "float64", shape = (3, 5, 8))#candidate|2427|(3, 5, 8)|var|float64
bop_2428 = relay.greater_equal(var_2426.astype('bool'), relay.reshape(var_2427.astype('bool'), relay.shape_of(var_2426))) # shape=(3, 5, 8)
uop_2433 = relay.acos(bop_2428.astype('float64')) # shape=(3, 5, 8)
uop_2441 = relay.log2(uop_2433.astype('float32')) # shape=(3, 5, 8)
func_195_call = mod.get_global_var('func_195')
func_197_call = mutated_mod.get_global_var('func_197')
const_2467 = relay.const(1, dtype = "int32")#candidate|2467|()|const|int32
call_2466 = func_195_call(relay.reshape(const_2467.astype('int32'), []))
call_2468 = func_195_call(relay.reshape(const_2467.astype('int32'), []))
func_1890_call = mod.get_global_var('func_1890')
func_1893_call = mutated_mod.get_global_var('func_1893')
const_2470 = relay.const([[9,-10,4,-3,-5,1,-2,-9,-10,9,10,-7,-1,2,1,3,6,4,5,9,6,-4,-8,1,8,9,-1,2,1,5,-4,3,4,-7,5,-9,-7,-3,-3,-3,4,2,-10,7,-6,5,-5,-9,-6,-9,2,5,-8,6,-3,-6,-3,-4,1,-6,8,-9,10,1,2,-10,-10,8,3,1,5,5,-6,-2,-2,7,10,10,-4,9,-5,-2,5,-2,6,-6,-3,-8,2,7,8,4,10,9,9,9,6,6,3,-10,3,1,-1,-6,-9,-6,7,-5,6,-8,-2,8,2,9,-5,-6,7,4,-6,-10,3,2,-10,6,2,10,3,-2,-3,10,-10,-6,-4,6,3,5,-3,-6,5,-8,6,-1,-7,5,3,-10,4,1,-10,-7,2,9,-10,-10,-6,4,-6,2,9,7,-3,-5,5,-4,-5,-8,-5,-4,-3,-10,1,-1,-10,-4,10,-10,-8,-1,-3,10],[8,-4,-4,-5,-1,5,10,2,-1,-8,-8,8,-3,1,-4,3,10,4,-4,-10,-6,8,3,6,6,6,2,2,-3,-1,-5,-8,10,10,10,10,6,-2,9,2,-1,1,-2,-9,7,1,-6,8,10,-1,-7,6,10,2,-5,-7,3,-10,-9,10,-2,-8,10,4,4,-2,-8,-2,-6,10,-9,8,4,-8,8,9,-1,-8,-4,2,-10,7,-5,-10,5,2,8,-7,9,-3,7,9,-2,-10,-1,-2,-7,1,-2,-2,-1,-1,6,9,-7,-4,-8,-4,-2,-5,-7,4,-10,7,-3,6,-5,3,7,7,-6,-10,-6,3,7,10,8,9,6,7,4,5,2,-1,10,5,-10,10,-7,5,4,-9,9,8,1,7,3,-3,10,6,-1,-5,5,-1,10,-8,1,-7,-5,-8,-4,-2,-6,10,10,-5,-8,-3,8,7,10,-4,-5,3,-8,6,5,9,-2,7]], dtype = "uint32")#candidate|2470|(2, 180)|const|uint32
call_2469 = relay.TupleGetItem(func_1890_call(relay.reshape(const_2470.astype('uint32'), [5, 12, 6])), 1)
call_2471 = relay.TupleGetItem(func_1893_call(relay.reshape(const_2470.astype('uint32'), [5, 12, 6])), 1)
output = relay.Tuple([uop_2441,call_2466,const_2467,call_2469,const_2470,])
output2 = relay.Tuple([uop_2441,call_2468,const_2467,call_2471,const_2470,])
func_2491 = relay.Function([var_2426,var_2427,], output)
mod['func_2491'] = func_2491
mod = relay.transform.InferType()(mod)
mutated_mod['func_2491'] = func_2491
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2491_call = mutated_mod.get_global_var('func_2491')
var_2493 = relay.var("var_2493", dtype = "float64", shape = (3, 5, 8))#candidate|2493|(3, 5, 8)|var|float64
var_2494 = relay.var("var_2494", dtype = "float64", shape = (3, 5, 8))#candidate|2494|(3, 5, 8)|var|float64
call_2492 = func_2491_call(var_2493,var_2494,)
output = call_2492
func_2495 = relay.Function([var_2493,var_2494,], output)
mutated_mod['func_2495'] = func_2495
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2825 = relay.var("var_2825", dtype = "float32", shape = (9, 10, 11))#candidate|2825|(9, 10, 11)|var|float32
uop_2826 = relay.exp(var_2825.astype('float32')) # shape=(9, 10, 11)
output = relay.Tuple([uop_2826,])
output2 = relay.Tuple([uop_2826,])
func_2835 = relay.Function([var_2825,], output)
mod['func_2835'] = func_2835
mod = relay.transform.InferType()(mod)
var_2836 = relay.var("var_2836", dtype = "float32", shape = (9, 10, 11))#candidate|2836|(9, 10, 11)|var|float32
output = func_2835(var_2836)
func_2837 = relay.Function([var_2836], output)
mutated_mod['func_2837'] = func_2837
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2926 = relay.var("var_2926", dtype = "float32", shape = (3, 7, 4))#candidate|2926|(3, 7, 4)|var|float32
uop_2927 = relay.rsqrt(var_2926.astype('float32')) # shape=(3, 7, 4)
uop_2935 = relay.sin(uop_2927.astype('float64')) # shape=(3, 7, 4)
output = uop_2935
output2 = uop_2935
func_2937 = relay.Function([var_2926,], output)
mod['func_2937'] = func_2937
mod = relay.transform.InferType()(mod)
var_2938 = relay.var("var_2938", dtype = "float32", shape = (3, 7, 4))#candidate|2938|(3, 7, 4)|var|float32
output = func_2937(var_2938)
func_2939 = relay.Function([var_2938], output)
mutated_mod['func_2939'] = func_2939
mutated_mod = relay.transform.InferType()(mutated_mod)
const_2999 = relay.const([[[-3.110918,-9.301980,1.357464,-5.163011,-5.512349,-9.479400,0.614961,1.811718,-8.668827,7.003057,7.280288,4.003441,8.060957],[-9.986075,-5.233016,1.599332,-2.531737,5.182819,9.341924,-2.140028,-0.068765,-1.666670,5.967891,3.108678,1.008482,0.966764],[-3.855449,-5.201356,-5.564963,-3.726034,6.781250,5.662813,6.909259,3.788220,-5.563537,-4.725798,3.076487,-2.467403,-1.409932],[-5.768796,2.514653,1.223695,-3.762738,2.655867,-4.991605,7.660466,6.651585,-2.175309,-4.459113,7.028488,2.288819,5.951268],[0.613869,4.762633,1.413431,5.426980,-0.759800,-0.196064,-5.535538,2.915649,7.500599,-6.426216,-1.275551,8.690397,7.871452],[9.783243,-5.403710,2.477237,4.265607,-6.391873,-7.465594,4.850556,-9.201741,-6.970010,2.446543,0.038495,-4.622914,-5.537489],[-4.745281,8.674073,-4.882813,9.127074,2.292950,-4.962632,0.621966,5.684579,-9.875061,-0.419593,-5.465945,-4.648132,3.686704],[-1.406204,5.806018,-6.334624,-6.786655,7.609213,-2.636732,-1.080576,3.802331,-8.273221,9.567982,6.650354,-9.931329,-2.856773],[-8.380523,1.133005,-9.251667,3.206076,-4.938364,-9.000909,-4.995516,2.721931,-5.840689,-9.008045,8.732844,-3.843850,6.569498],[-6.013915,-4.261268,-3.712789,8.601280,-5.528428,-9.236536,-8.029397,8.114984,2.234650,-1.059523,-6.320243,-8.623664,1.962300],[-3.659379,-6.583026,6.714290,7.020466,8.166651,-0.010969,4.734319,0.216722,-3.812777,-5.500523,-1.522528,1.850243,7.811432],[0.331743,0.491005,3.066793,-7.733067,7.361772,-2.678601,7.068005,-9.212505,7.249353,-2.110554,0.728619,-2.733120,-7.539097],[-1.751012,6.398488,-6.029477,7.291595,3.928908,4.715047,5.507721,4.284064,4.932444,4.035555,-5.417217,-4.013405,4.794421],[-1.838471,6.550512,-5.320556,-2.829170,4.847475,-6.937855,-9.226488,6.580596,-1.511529,-1.223913,8.383340,-6.470610,-4.831440],[5.882458,-1.506454,-9.736721,-2.066945,0.723642,7.880996,-3.523957,-9.622220,-1.288159,2.530693,-3.360409,-7.726297,9.464635],[6.165110,-1.312180,2.341380,-9.317315,8.086474,-0.421832,-0.640520,-8.213332,5.963353,6.651198,-2.220872,0.359721,8.199349]],[[2.235713,-9.714747,1.222338,-4.821011,6.019877,9.710937,7.190562,5.428647,-8.199800,-9.086300,2.509830,-0.256199,9.355065],[-2.259759,-7.310989,0.593865,3.923467,-6.213085,5.533805,4.726591,-1.706862,-1.941429,4.382116,8.371430,7.566421,-9.887008],[-4.123570,5.769220,6.000504,-4.146432,-9.956195,2.644828,6.731570,-7.334751,6.632720,-9.099853,0.765842,4.845733,-4.990865],[-4.264257,-7.654492,-3.178877,4.581399,0.424792,-0.962347,-7.865787,2.952676,-1.839422,-3.043642,5.729152,-4.239286,4.584727],[-7.814035,-8.645540,-2.244441,-6.713841,-9.808788,8.015702,9.159162,-2.712356,-1.086300,-9.844445,9.039187,-3.663720,9.458663],[9.877478,5.576825,6.242853,9.482836,-4.949283,0.413545,5.515464,-6.830743,5.858360,8.504666,2.197471,0.167066,0.349953],[-6.671080,-2.560497,8.571280,-3.680212,-4.829979,-0.213042,7.447391,4.673745,7.916854,-8.444313,0.835830,1.430882,-2.771023],[-9.009214,-8.287958,-8.168720,-7.965744,2.464522,-0.583312,-3.561369,5.880820,-0.333936,-5.308010,6.911984,-6.870182,5.731249],[-5.478173,-2.178782,5.809582,-0.919061,-1.817051,-1.831921,1.351157,-7.616619,6.935327,-5.749510,7.649799,-8.140624,9.354739],[-3.756912,9.648548,2.835829,-4.842578,-2.394115,5.207213,-0.527485,9.819062,-9.381560,-1.209227,-7.122350,9.910789,-8.975440],[-0.488004,-7.909390,8.528899,2.923279,-0.627830,-5.796338,1.834609,-9.536852,0.845412,-8.246619,-6.546972,0.949756,-0.888261],[-4.291253,-4.828945,-3.135803,4.293105,-1.239225,8.550821,-1.269322,3.886071,1.216646,5.600835,4.544648,-1.661002,-4.554082],[-7.956016,6.269647,3.793126,-1.850950,-9.340278,-7.528365,-2.937062,-0.531392,2.881526,5.437030,3.544010,2.389444,3.073528],[4.310821,-8.719438,-4.086113,0.298724,1.011127,4.953393,7.268647,4.825132,-7.384890,-2.916277,4.786274,3.371019,-8.463486],[4.278759,5.415955,-9.860311,-6.319545,-3.819667,3.445860,-3.444640,5.961133,6.598843,-5.527258,-3.659694,-0.225267,1.784429],[-3.237710,-0.797027,-4.082995,-0.984754,-1.958227,-8.084367,-9.190228,7.226682,9.357382,-7.530772,-8.542276,0.973370,-8.746709]]], dtype = "float64")#candidate|2999|(2, 16, 13)|const|float64
uop_3000 = relay.cos(const_2999.astype('float64')) # shape=(2, 16, 13)
func_2491_call = mod.get_global_var('func_2491')
func_2495_call = mutated_mod.get_global_var('func_2495')
var_3005 = relay.var("var_3005", dtype = "float64", shape = (120,))#candidate|3005|(120,)|var|float64
call_3004 = relay.TupleGetItem(func_2491_call(relay.reshape(var_3005.astype('float64'), [3, 5, 8]), relay.reshape(var_3005.astype('float64'), [3, 5, 8]), ), 0)
call_3006 = relay.TupleGetItem(func_2495_call(relay.reshape(var_3005.astype('float64'), [3, 5, 8]), relay.reshape(var_3005.astype('float64'), [3, 5, 8]), ), 0)
func_2491_call = mod.get_global_var('func_2491')
func_2495_call = mutated_mod.get_global_var('func_2495')
call_3014 = relay.TupleGetItem(func_2491_call(relay.reshape(var_3005.astype('float64'), [3, 5, 8]), relay.reshape(var_3005.astype('float64'), [3, 5, 8]), ), 0)
call_3015 = relay.TupleGetItem(func_2495_call(relay.reshape(var_3005.astype('float64'), [3, 5, 8]), relay.reshape(var_3005.astype('float64'), [3, 5, 8]), ), 0)
output = relay.Tuple([uop_3000,call_3004,var_3005,call_3014,])
output2 = relay.Tuple([uop_3000,call_3006,var_3005,call_3015,])
func_3057 = relay.Function([var_3005,], output)
mod['func_3057'] = func_3057
mod = relay.transform.InferType()(mod)
mutated_mod['func_3057'] = func_3057
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3058 = relay.var("var_3058", dtype = "float64", shape = (120,))#candidate|3058|(120,)|var|float64
func_3057_call = mutated_mod.get_global_var('func_3057')
call_3059 = func_3057_call(var_3058)
output = call_3059
func_3060 = relay.Function([var_3058], output)
mutated_mod['func_3060'] = func_3060
mutated_mod = relay.transform.InferType()(mutated_mod)
const_3227 = relay.const([[[-3,-9,7,-9,-1,-5,-10,-8,9,4,3,-4,-1],[-9,4,10,-6,-8,-9,6,-9,-8,-2,-3,10,-6],[9,5,7,-4,2,8,5,3,-3,3,-1,-9,5]],[[-3,1,-9,3,10,-10,9,-10,-1,3,6,-6,7],[2,-10,2,-4,-5,3,7,-8,-10,8,-5,5,-5],[-3,-4,8,-8,2,2,-3,7,6,9,-10,2,1]],[[8,-3,-10,6,9,-7,2,7,3,2,-5,-5,-10],[-5,6,-10,-3,9,-1,5,-1,-7,2,-7,-5,7],[7,4,1,-2,7,-1,-4,4,-9,5,5,-5,7]],[[4,-2,2,4,-7,-7,-2,-10,5,-7,-9,-1,-8],[-8,3,-6,-7,-7,6,-5,8,3,-6,-7,6,1],[-2,-2,1,5,5,-1,8,1,1,10,-10,1,5]]], dtype = "int8")#candidate|3227|(4, 3, 13)|const|int8
var_3228 = relay.var("var_3228", dtype = "int8", shape = (4, 3, 13))#candidate|3228|(4, 3, 13)|var|int8
bop_3229 = relay.maximum(const_3227.astype('int8'), relay.reshape(var_3228.astype('int8'), relay.shape_of(const_3227))) # shape=(4, 3, 13)
bop_3232 = relay.logical_or(const_3227.astype('bool'), relay.reshape(bop_3229.astype('bool'), relay.shape_of(const_3227))) # shape=(4, 3, 13)
bop_3236 = relay.bitwise_and(bop_3229.astype('int16'), relay.reshape(var_3228.astype('int16'), relay.shape_of(bop_3229))) # shape=(4, 3, 13)
func_2835_call = mod.get_global_var('func_2835')
func_2837_call = mutated_mod.get_global_var('func_2837')
var_3241 = relay.var("var_3241", dtype = "float32", shape = (330, 3))#candidate|3241|(330, 3)|var|float32
call_3240 = relay.TupleGetItem(func_2835_call(relay.reshape(var_3241.astype('float32'), [9, 10, 11])), 0)
call_3242 = relay.TupleGetItem(func_2837_call(relay.reshape(var_3241.astype('float32'), [9, 10, 11])), 0)
output = relay.Tuple([bop_3232,bop_3236,call_3240,var_3241,])
output2 = relay.Tuple([bop_3232,bop_3236,call_3242,var_3241,])
func_3243 = relay.Function([var_3228,var_3241,], output)
mod['func_3243'] = func_3243
mod = relay.transform.InferType()(mod)
mutated_mod['func_3243'] = func_3243
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3243_call = mutated_mod.get_global_var('func_3243')
var_3245 = relay.var("var_3245", dtype = "int8", shape = (4, 3, 13))#candidate|3245|(4, 3, 13)|var|int8
var_3246 = relay.var("var_3246", dtype = "float32", shape = (330, 3))#candidate|3246|(330, 3)|var|float32
call_3244 = func_3243_call(var_3245,var_3246,)
output = call_3244
func_3247 = relay.Function([var_3245,var_3246,], output)
mutated_mod['func_3247'] = func_3247
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3552 = relay.var("var_3552", dtype = "float32", shape = (8, 11, 1))#candidate|3552|(8, 11, 1)|var|float32
uop_3553 = relay.log2(var_3552.astype('float32')) # shape=(8, 11, 1)
bop_3576 = relay.power(uop_3553.astype('float64'), relay.reshape(var_3552.astype('float64'), relay.shape_of(uop_3553))) # shape=(8, 11, 1)
bop_3580 = relay.greater(var_3552.astype('bool'), relay.reshape(uop_3553.astype('bool'), relay.shape_of(var_3552))) # shape=(8, 11, 1)
output = relay.Tuple([bop_3576,bop_3580,])
output2 = relay.Tuple([bop_3576,bop_3580,])
func_3591 = relay.Function([var_3552,], output)
mod['func_3591'] = func_3591
mod = relay.transform.InferType()(mod)
var_3592 = relay.var("var_3592", dtype = "float32", shape = (8, 11, 1))#candidate|3592|(8, 11, 1)|var|float32
output = func_3591(var_3592)
func_3593 = relay.Function([var_3592], output)
mutated_mod['func_3593'] = func_3593
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4168 = relay.var("var_4168", dtype = "float64", shape = (14, 15, 7))#candidate|4168|(14, 15, 7)|var|float64
var_4169 = relay.var("var_4169", dtype = "float64", shape = (14, 15, 7))#candidate|4169|(14, 15, 7)|var|float64
bop_4170 = relay.floor_mod(var_4168.astype('float64'), relay.reshape(var_4169.astype('float64'), relay.shape_of(var_4168))) # shape=(14, 15, 7)
uop_4174 = relay.sin(var_4169.astype('float64')) # shape=(14, 15, 7)
output = relay.Tuple([bop_4170,uop_4174,])
output2 = relay.Tuple([bop_4170,uop_4174,])
func_4176 = relay.Function([var_4168,var_4169,], output)
mod['func_4176'] = func_4176
mod = relay.transform.InferType()(mod)
var_4177 = relay.var("var_4177", dtype = "float64", shape = (14, 15, 7))#candidate|4177|(14, 15, 7)|var|float64
var_4178 = relay.var("var_4178", dtype = "float64", shape = (14, 15, 7))#candidate|4178|(14, 15, 7)|var|float64
output = func_4176(var_4177,var_4178,)
func_4179 = relay.Function([var_4177,var_4178,], output)
mutated_mod['func_4179'] = func_4179
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4431 = relay.var("var_4431", dtype = "int64", shape = (15, 1, 7))#candidate|4431|(15, 1, 7)|var|int64
var_4432 = relay.var("var_4432", dtype = "int64", shape = (15, 3, 7))#candidate|4432|(15, 3, 7)|var|int64
bop_4433 = relay.greater_equal(var_4431.astype('bool'), var_4432.astype('bool')) # shape=(15, 3, 7)
func_2835_call = mod.get_global_var('func_2835')
func_2837_call = mutated_mod.get_global_var('func_2837')
const_4451 = relay.const([-5.957292,4.988413,7.931899,-8.242985,3.725328,1.118665,8.346522,0.968011,1.219660,6.323449,-7.520378,-5.870662,-6.570698,7.684588,-9.726403,-7.160644,-6.113748,-9.763004,2.547959,1.469072,-8.575343,-9.651778,4.299981,3.354496,-1.526174,5.631035,-8.209218,3.096925,0.972048,-8.460966,-3.117550,-5.759080,2.910240,-0.719565,0.443615,7.666707,2.862387,3.113271,2.574724,9.979893,5.469667,-8.039466,-9.863143,2.190096,5.639035,-5.031928,-3.462240,-6.799704,5.327405,2.315542,-4.619167,-6.590932,-6.850125,-8.779698,-4.017250,2.503770,3.096023,-9.130804,-7.906479,8.284325,0.768370,5.104371,-6.969561,7.097163,-4.523376,-3.191977,-8.060643,-9.203316,-0.929512,-1.507800,-6.345883,0.137813,-8.928318,-8.668662,1.616818,-2.755311,6.775175,-3.693426,1.384942,5.096170,-0.155886,-3.478033,-7.210280,-3.276695,6.685641,3.697357,-9.600720,9.308767,-7.734545,1.518652,3.663949,4.022993,9.168232,-6.017847,3.418892,0.354391,9.004058,-3.852002,-0.055510,8.665658,-1.449886,-5.830480,5.283733,8.402439,8.417325,9.418681,-5.720243,3.071443,-4.409754,-0.493902,2.063965,-0.113786,8.049837,-2.200384,1.132306,3.355033,-2.668166,-2.554559,-6.582290,-8.430890,0.829667,-9.727638,-3.191053,2.100190,-3.831356,-2.218306,6.265491,-1.743834,-8.700899,0.963020,-6.412538,7.980147,-5.614193,-0.469884,4.877898,-3.044268,-1.535058,-6.591845,-0.138493,-4.504204,2.657829,-9.040938,0.301748,5.663527,8.524265,8.089302,3.884049,-9.206610,-6.112482,-5.538623,2.424423,-3.989742,-4.229474,-4.016337,1.027344,1.860616,-0.504068,7.449793,-4.051822,2.298299,1.364345,-2.251876,0.954173,-1.916168,6.845793,0.615193,8.668468,5.956358,-5.837779,-0.518948,-9.089122,-7.594456,6.087405,-3.430550,-2.365061,2.558312,-2.846946,-1.120988,3.109457,7.734160,-5.055372,7.011652,5.895849,1.969049,1.412913,9.479342,5.735102,-6.986400,1.598646,-2.841149,-3.811723,-4.020799,2.901894,-4.306199,5.423044,-8.389790,-3.423913,-4.691951,-1.918587,4.433059,4.887484,3.938738,-2.326689,-7.574020,-7.724518,3.378073,-4.134018,6.463660,-8.228731,-9.798533,2.206157,6.200896,9.300572,3.993643,2.841736,8.749385,9.545106,8.065692,-8.314134,-6.842629,0.216398,9.106177,0.536708,5.760021,-6.164692,4.091502,-6.729279,9.834012,-3.012504,6.053165,7.219526,9.398043,8.733089,-7.092189,-9.035142,-9.047813,-9.709670,2.934444,-2.186343,7.587556,5.708446,0.352079,-9.508039,3.899127,5.334637,-1.747902,1.490587,-7.442445,1.016545,-7.537702,5.314875,9.719105,-5.581179,7.415236,5.889389,1.198625,1.719766,5.356390,7.814202,0.088597,9.826025,9.324617,2.356597,-9.707141,-8.025093,-9.031895,5.700080,5.615638,-2.828038,5.507283,4.973571,-0.055531,1.254351,-9.427798,-8.760956,4.431576,-9.585629,-7.093210,-2.154898,-4.569892,8.437288,-1.748910,-4.275121,-8.247116,-6.611684,-5.692724,-4.670871,8.167902,-4.302847,-9.249598,1.453565,7.350669,-9.773050,3.251386,-3.995023,1.974529,-3.645849,-6.151216,2.639002,1.434498,-6.109041,-1.340498,2.306849,-0.812860,1.939211,-3.711209,0.106458,-6.989918,-0.513434,-2.888981,6.878066,-4.402622,-2.195839,-5.409050,-5.051960,0.410845,-9.355576,4.502232,1.871454,2.754423,2.926256,9.094454,9.579867,-1.963180,8.762429,-3.174552,7.990855,-2.001721,-0.286391,1.369901,6.875141,7.314513,-1.538514,9.957095,3.729170,7.151520,-0.639220,4.549404,-4.320149,2.755661,-6.021648,0.488705,9.434213,5.936453,-1.532819,-2.190644,-1.844888,3.576467,-7.567593,-9.059573,-1.009459,-7.823167,3.058850,-5.670251,-1.451813,1.891394,-8.815258,-9.953023,6.385754,6.324822,-8.354278,4.816228,5.387902,-9.423610,2.527572,8.422713,-3.798937,-4.738761,8.246907,0.720755,3.571315,7.704781,4.871483,6.082886,2.289738,2.784105,-6.435235,-3.161407,7.803208,6.113343,-8.462388,-3.075574,1.593367,-2.509444,-2.306262,-7.209080,-4.484428,6.474303,5.900902,-1.995727,4.085992,-8.513678,-8.318087,8.790986,7.507895,-7.254745,-4.418098,-9.066968,-3.093419,-0.882469,3.934068,-1.813048,-1.435117,7.438026,-6.747363,7.701905,8.042791,2.063305,-0.445139,-3.850856,5.869413,0.380393,2.888438,4.762443,-4.013402,-8.815111,-5.547056,-8.143417,-2.205978,-2.628724,3.756617,-9.856415,-5.772413,3.675303,9.490195,-7.436234,-1.312874,-7.787224,-3.976391,1.496735,7.624911,-1.679293,-2.690510,8.683930,-2.373990,7.688431,4.604155,4.679685,0.349348,-5.014461,-0.636404,-5.841501,9.074457,-2.361844,-2.135248,-0.155918,-0.829533,-3.923885,0.747067,5.606719,0.238049,-9.148470,6.332244,-6.717542,-7.307745,0.506357,-3.319219,5.605935,-7.521350,5.014197,-0.036581,-6.433860,-9.597558,8.144160,-7.157865,6.625825,-3.454371,-4.109521,7.399745,-2.039284,-4.694382,-2.865669,1.933434,-2.531231,-2.378510,8.654277,5.083528,7.245805,-7.906862,-7.823927,9.149688,-1.140319,0.532862,4.339938,-4.140226,-9.487077,9.436329,6.994869,-4.427021,-7.187923,0.493522,3.781580,-5.733749,-1.287795,-1.723936,8.029402,-3.617002,2.218323,7.058687,9.688269,-1.383140,-2.182740,-9.606493,4.339407,3.457461,8.225960,1.860743,5.743217,3.638138,-2.398635,-9.095675,-4.329690,9.827288,-7.276208,-3.188517,-3.002143,6.502993,3.916478,-6.689224,6.825486,-3.552734,-3.939870,7.752154,4.175497,2.823947,-8.168090,-8.722617,1.933671,-6.240991,-4.775339,2.336734,-3.865664,5.369530,-1.951720,-8.712930,1.773904,4.434925,-9.082566,6.981999,9.815635,6.898268,5.514369,-8.246856,9.794414,-4.010106,-0.514577,3.864107,4.293497,-9.502666,-5.073295,0.152921,3.638866,-5.581122,3.585669,-0.382012,-5.789225,1.717914,6.557234,-0.444010,-3.658305,-1.140207,-3.868550,9.412610,-4.705700,-6.991496,-7.406645,-4.489545,-1.159932,7.913413,-6.283993,-0.376262,8.613045,-8.293677,-8.393717,-4.392206,-8.122895,7.158099,-3.378565,-0.711242,-5.401769,6.890136,-1.546503,-3.965061,-6.283030,-2.628202,7.894331,-0.061036,-0.791998,5.457548,5.791355,-4.503043,-0.441422,9.436446,-4.844093,7.795829,-5.498976,-0.631296,-7.406543,7.023732,-9.843888,-5.927498,-3.898209,1.809227,3.939255,8.363834,-2.434653,-9.810765,7.722534,7.158615,4.867472,-2.948455,0.203548,-8.071215,-0.552370,9.348239,-6.960504,-2.489096,-1.707449,8.861162,1.014112,-4.603843,-8.270100,-0.948327,-9.839224,-4.449657,6.146310,8.770841,5.026079,-5.542817,3.854418,-2.257342,2.118943,8.247499,-3.872310,-1.304683,9.543419,6.175189,1.046743,-3.995567,6.835845,-3.147536,9.751340,-8.830982,7.125563,-5.795664,-0.643110,-5.660928,-8.965337,8.066023,8.643298,-8.615020,-2.801570,-7.362780,8.046961,-3.455024,0.379363,9.407034,-8.552653,9.176179,3.442510,7.853008,7.601369,1.644116,7.532216,-3.722822,-5.871624,2.821046,0.351990,5.047695,-2.159072,0.597795,-4.372224,9.292135,-6.528404,-4.856573,-9.313181,2.644416,-0.740341,0.667433,8.516294,-7.369005,-8.015077,0.224620,3.345178,4.858375,-9.621367,-9.904653,6.998605,9.455441,-9.328612,6.562492,2.794233,-9.119650,-8.103684,8.852988,-1.787542,1.067849,-0.004689,-1.756657,1.659448,1.951362,-1.110102,-6.699665,4.467905,-6.015051,-2.700934,5.073041,-5.985665,7.812556,2.598991,1.548573,-6.961013,1.721118,8.565457,-1.589225,9.500101,-8.660990,6.822194,1.690633,-2.937209,0.400099,-2.203632,9.401751,-3.998498,1.662845,5.997928,3.278304,4.869130,-9.269200,-7.319084,-6.071243,1.027616,-6.338384,9.853414,3.105533,3.171322,-2.297132,8.886680,-9.264711,-4.482162,-6.525142,-5.398864,1.744562,-4.452805,-4.992975,5.380363,-3.589369,1.019938,8.198138,-8.162471,5.900063,4.945000,4.086211,3.128903,0.714016,4.214549,1.895785,9.353843,-9.785500,6.314724,5.315827,2.973223,4.223335,-7.187027,4.113544,0.732266,-1.920411,6.982166,-3.946312,9.512472,-9.159589,8.924450,4.806175,3.349351,-9.087347,-0.456933,6.925357,3.802161,3.090779,2.530470,-9.076436,9.648292,-0.308017,8.805424,3.118861,-7.536758,4.800757,4.240780,-5.239677,-6.288139,9.664959,-0.956466,-5.203889,1.838636,4.217489,0.853598,-2.412618,-8.641792,9.915757,7.024850,7.543369,-5.932992,9.006040,5.420874,-6.866869,-2.621575,-6.366716,-2.046397,-6.439510,-3.818136,7.102319,9.297942,-0.211867,-6.453491,6.952017,-1.897258,9.612091,-4.221645,4.202297,-2.928830,6.966616,3.547690,-2.962576,5.090737,-1.653266,-5.905618,4.442272,7.258759,-4.757128,3.098340,0.656894,-1.712649,-3.354256,9.888229,-8.167176,-1.366135,-9.190678,8.471259,2.472569,2.017975,3.302506,9.739662,6.320808,-6.165470,-9.552363,-3.725624,-5.812192,-9.009051,5.003639,-0.469693,-5.617659,6.175340,-6.883126,5.849578,7.544644,9.024475,-2.096364,7.148474,9.283816,0.238233,9.252073,7.557372,-9.494321,7.044109,1.203714,8.634472,-9.295545,-8.598391,-7.320195,-1.876833,-8.156849,-5.671361,4.653124,9.222799,3.470014,-5.871978,-5.191337,-6.799743,-5.047666,-3.412976,4.938727,6.215854,-4.271393,9.377148,2.907795,6.037396,8.033122,-3.510655,9.439562,-5.939923,9.268468,-9.464530,-6.751835,-7.009345,-8.853908,2.013314,3.216521,7.885148,-9.971415,-0.981236,-8.548270,-1.972063,6.280409,-3.975061,-8.712340,9.349520,-3.785536,8.012117,3.839546,0.464355,-9.432814,0.531853,9.427757,9.920298,1.462216,9.194720,7.188488,-8.906476,-2.213259,-4.127674,4.041127,-4.604146,9.912987,-7.943259,-8.378972,-4.484349,-1.765651,-5.933344,-8.262867,-4.394391,9.122984,2.064461,4.712576,7.128453,0.707495,-8.355827,2.566004,-9.114323,-5.407274,4.550825,-9.361171,3.967611,-3.019950,-2.072412,8.290652,-2.798531,-1.060735,-6.002606,7.082357,8.394778,9.831428,8.275175,5.032824,3.180997,7.342870,-4.844505,-1.606500,-7.072001,4.712186,7.403144,6.515476,7.945381,1.576407,1.423507,7.752917,5.081242,-2.846570,4.994945,-2.930813,8.398217,-0.323656,3.975008,4.496017,9.567747,-4.932976,-0.302845,-9.309882,3.346498,1.066709,8.297360,-9.566700,4.002865,1.240320,-3.174120,2.174341,4.264102,2.307172,-0.824278,3.875390,1.734561], dtype = "float32")#candidate|4451|(990,)|const|float32
call_4450 = relay.TupleGetItem(func_2835_call(relay.reshape(const_4451.astype('float32'), [9, 10, 11])), 0)
call_4452 = relay.TupleGetItem(func_2837_call(relay.reshape(const_4451.astype('float32'), [9, 10, 11])), 0)
func_430_call = mod.get_global_var('func_430')
func_433_call = mutated_mod.get_global_var('func_433')
const_4492 = relay.const([-6.751943,-9.196741,-8.089855,-1.690360,9.306715,0.603988,7.929720,8.448644,1.312913,-9.181385,-7.004858,0.880232,-6.145400,-7.520805,-4.726750,2.943224,7.687058,-4.305154,4.270527,5.716486,6.126728,1.865491,5.844343,-4.979637,-8.640497,3.891642,1.755165,7.140421,6.529303,5.226638,7.985862,-0.407847,5.313962,-4.939181,-0.094187,8.538956,-0.820468,-0.082384,4.796925,8.520203,4.077467,-9.866491,6.955953,-4.839244,3.688530,-3.141092,-1.510971,-3.879195,7.377486,0.607599,-8.944414,5.506016,4.193699,-2.355642,-0.132797,-1.936135,4.144265,-7.256852,-7.451695,6.575587,-5.011952,-8.126976,6.847601,-4.186787,7.956723,-6.433411,-9.082441,-3.346278,7.942198,5.234349,-1.957737,1.296258,-5.596923,-2.022196,7.505448,4.456460,9.957038,-9.811637,-6.047765,4.278856,-5.024069,7.248453,1.865447,-1.724532,-5.313801,-4.196060,7.366673,-8.310033,9.735507,-0.657415,7.338436,4.987695,3.440253,5.458702,-6.472733,5.304495,-5.158923,-5.151627,0.552234,-2.617563,-5.937618,-3.159975,-7.293194,7.822932,-7.141798,-0.507843,8.708557,-5.449979,-2.223708,-3.528214,4.429324,3.381247,-5.821891,1.713114,2.090071,-4.328803,5.736804,2.415594,3.451635,6.598731,5.824440,1.902382,8.497755,2.200070,4.932388,5.486853,-7.700463,-4.268925,-3.414064,-8.150305,6.300481,7.227108,2.384325,7.119920,5.841404,-4.643212,-1.723426,-3.477284,-0.292200,8.187401,9.360691,-3.439174,-6.438349,7.335689,-1.763531,-4.475178,-8.264311,-0.402984,-5.199115,-9.805553,1.526644,-2.939091,7.413295,5.047697,4.876744,3.867348,7.599714,-6.001305,9.648222,-9.833235,0.683216,0.413303,-0.332812,6.408372,1.033863,1.932219,6.309290,2.465282,-1.953014,-5.605444,5.668760,-0.967911,8.444466,-9.577338,-3.635954,-6.116350,2.191147,4.891780,-8.310844,0.480338,6.667871,-0.085051,-2.310107,7.314868,-9.682481,-4.109331,5.128135,0.084263,5.005778,6.871126,-7.866281,3.231499,-7.707652,-9.676097,-5.724431,-4.077004,-7.845536,-0.002557,-8.011213,1.803183,8.390671,3.197005,-4.277473,3.766857,-6.556385,-6.916205,-8.451891,2.182055,-4.096152,9.761508,4.875348,-9.803388,-4.246363,-9.798154,-4.138739,-3.363286,-1.716003,3.654039,-1.113711,-1.240482,6.235133,3.141550,2.155660,-9.283801,-3.589196,-5.252353,-1.281532,1.522762,0.146947,8.209828,7.972368,0.277957,3.571891,4.729081,1.233420,8.582146,-6.731872,-9.233898,3.120361,2.245745,4.240560,3.052222,9.753748,-3.761725,-6.158802,-5.749550,9.582317,3.256349,-0.356467,-5.508898,1.560951,6.967777,0.496334,2.994640,-9.773258,-9.603018,-5.294892,0.310786,5.606775,-4.930135,-8.602531,2.322457,-0.226895,-5.334036,9.949565,-1.150601,-0.420129,-5.687096,3.520703,-2.792044,0.157239,2.886385,-6.335176,3.367039,2.645457,-6.805529,-8.728829,3.862007,-2.355019,-5.611008,2.598469,-8.471985,-5.105365,7.183683,-3.945405,5.082181,-8.017058,0.113310,-8.008750,-1.333684,-8.847418,9.257196,3.849001,6.398182,-0.316073,6.649642,-6.357917,-7.184838,9.358585,9.536216,5.034446,6.526351,2.108769,7.173256,6.485874,6.856137,-0.569397,-1.727185,-0.556539,9.834377,3.687886,-6.942234,1.877699,-0.435522,-7.754881,-1.613076,4.847406,5.654811,6.907887,-8.403270,6.145170,-9.130549,-2.279521,0.401382,8.454214,4.706882,6.078169,-5.322936,-6.103983,2.232780,-3.208276,0.390988,1.932372,4.148947,6.934279,1.334061,0.604471,-5.535975,7.634113,-3.296441,-3.743850,8.333299,2.646525,-2.056948,1.644275,-7.819771,-4.113134,6.733482,2.776963,-0.705524,-3.818010,2.163696,9.125581,4.229217,4.328896,5.821388,9.950185,6.360578,7.137796,3.598627,-7.013834,-4.562800,3.843979,-1.185779,-0.884715,3.524792,1.002592,4.678737,-1.385888,8.513699,-3.906455,8.777983,0.301930,0.757129,8.036836,8.575385,-6.802938,-2.407594,5.297448,-1.747986,2.965115,-2.965610,-1.859340,3.162279,-9.195016,-4.471454,-7.271145,6.606555,1.728999,-9.625259,8.839178,-1.687076,7.218109,7.667996,8.799503,5.854805,0.752572,8.936013,5.416885,-7.813857,3.682925,-9.552289,-6.363175,-3.124956,-8.580472,-1.656651,-7.190933,-6.866317,6.547303,2.278033,2.413046,4.354303,-8.080735,0.845876,-4.700265,-7.674334,-9.884296,5.461180,-1.297586,-5.598787,-0.764951,-4.283844,3.787413,-5.621860,-7.901282,-4.711922,-2.971489,-9.467561,-6.435821,-2.633633,3.324650,6.327807,-2.566113,-6.808734,-9.130488,5.580342,-2.058482,9.207781,-9.108752,-2.503294,1.429604,9.710970,7.697713,5.812136,9.035490,-8.813874,-5.317437,-2.357953,-0.839663,9.952611,-4.617739,3.568662,-0.228097,-3.013959,-7.748243,5.406596,3.534294,-9.497202,-0.784223,5.708403,2.742353,-1.120869,4.589917,-1.669754,4.107489,-6.047052,6.831776,-9.073470,-9.302088,-2.673481,-0.051852,4.874031,-9.595863,-5.374302,6.842481,-3.381814,8.224713,-2.093756,-9.989751,-8.397272,-3.789422,4.612522,-5.952225,2.301136,-3.538862,9.086281,9.629836,3.245385,-1.800120,-3.801200,1.183822,0.788125,2.395308,2.539692,-5.075020,3.279518,-3.488141,-6.445030,8.304412,5.841830,-9.691501,-1.246912,2.043201,5.717219,7.768519,1.599810,9.445831,4.728425,-4.802906,-9.580517,-7.525316,2.721431,-1.842371,1.663347,0.389359,8.176660,9.964117,6.639308,8.276393,8.779649,-0.137425,5.405248,5.552001,-1.388910,4.710453,-6.651592,7.042524,-6.768677,-2.891864,1.917394,2.294229,5.091065,-4.445248,1.481315,2.988663,-7.263100,-3.519174,5.536888,-5.786003,3.166714,-9.963182,7.998508,-5.987708,9.335573,5.186525,-9.288764,-7.022003,2.585532,9.418260,-7.755425,6.812391,-0.132087,4.956811,5.541319,-3.466060,9.392083,0.305908,-0.608507,1.588662,-1.830338,-6.877493,4.271905,-3.003782,9.818264,0.676117,-2.501171,-9.788549,-3.058409,2.512119,2.637822,7.687527,-4.396102,3.963909,-6.369601,4.470874,9.192418,4.752517,-8.758884,7.595041,5.565339,3.730947,-9.434171,4.362731,9.754423,-5.566952,-3.282645,-8.199615,-0.609404,8.467634,-6.905286,5.911748,-7.373506,-6.118276,-4.429838,-2.545087,-8.352487,-8.362213,6.041797,-5.287577,-4.642280,0.421485,-6.980924,3.658877,7.558828,7.397853,6.604107,2.628710,8.615880,-2.158585,7.482826,-0.563336,6.574078,-3.109299,-4.007097,5.934698,-5.901665,2.545867,-4.643040,3.987996,8.399628,2.515829,-9.548465,-9.120700,-2.187568,2.558932,6.198440,-5.036124,-4.713982,7.157878,2.500807,5.874747,0.578945,-9.538118,-1.822116,6.464966,-6.215971,-9.641029,9.003600,-3.805703,-1.456633,0.878580,1.143756,-2.949693,3.364883,-9.192782,-6.838341,-8.773523,-2.324049,-5.050974,-6.750174,-5.833464,-4.363817,9.738926,7.166123,-6.281082,-8.779689,9.849329,0.342415,3.203377,8.919136,1.471180,-2.950551,7.613477,-3.671782,1.489474,8.060000,6.601903,-4.681966,3.523023,-5.129076,4.567810,-2.881200,9.812567,-7.081138,-3.076461,-9.875508,-1.586086,3.353167,-2.232703,6.142110,-2.573412,6.087809,-1.847844,6.072884,-9.481558,6.084683,-7.593253,-5.043112,7.875782,-9.307577,2.638033,5.386836,4.341017,8.380791,-8.888575,9.553260,-9.061458,-4.380121,1.734865,-2.627776,-1.801218,3.017962,0.668731,-5.616155,4.412851,-0.610566,6.577671,-8.634042,-7.744348,-6.664236,-3.181567,-6.506957,0.428759,3.368424,-9.488652,-6.773464,-3.428031,1.608618,3.615173,-7.741199,-9.934988,7.497640,2.099368,7.693864,-8.611987,-4.922986,3.775365,6.849526,-8.868600,8.782978,-3.308856,0.574738,-9.460375,2.148389,-4.130046,-9.416445,-1.238926,-2.580583,4.585607,-3.903224,-2.100275,-3.018014,0.913162,-1.667740,-6.924814,-6.489393,2.170003,9.577581,-6.072683,3.462787,3.725107,7.053424,-4.999400,2.953062,7.133718,6.897786,-6.925788,-5.716292,4.702193,1.047229,-5.777474,-5.583745,7.502420,5.694304,-9.213091,-4.806451,-1.996093,-0.860635,-4.695215,-1.676227], dtype = "float32")#candidate|4492|(770,)|const|float32
call_4491 = relay.TupleGetItem(func_430_call(relay.reshape(const_4492.astype('float32'), [11, 7, 10])), 1)
call_4493 = relay.TupleGetItem(func_433_call(relay.reshape(const_4492.astype('float32'), [11, 7, 10])), 1)
output = relay.Tuple([bop_4433,call_4450,const_4451,call_4491,const_4492,])
output2 = relay.Tuple([bop_4433,call_4452,const_4451,call_4493,const_4492,])
func_4499 = relay.Function([var_4431,var_4432,], output)
mod['func_4499'] = func_4499
mod = relay.transform.InferType()(mod)
mutated_mod['func_4499'] = func_4499
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4499_call = mutated_mod.get_global_var('func_4499')
var_4501 = relay.var("var_4501", dtype = "int64", shape = (15, 1, 7))#candidate|4501|(15, 1, 7)|var|int64
var_4502 = relay.var("var_4502", dtype = "int64", shape = (15, 3, 7))#candidate|4502|(15, 3, 7)|var|int64
call_4500 = func_4499_call(var_4501,var_4502,)
output = call_4500
func_4503 = relay.Function([var_4501,var_4502,], output)
mutated_mod['func_4503'] = func_4503
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4857 = relay.var("var_4857", dtype = "float64", shape = (1, 9, 13))#candidate|4857|(1, 9, 13)|var|float64
uop_4858 = relay.erf(var_4857.astype('float64')) # shape=(1, 9, 13)
bop_4862 = relay.equal(uop_4858.astype('bool'), relay.reshape(var_4857.astype('bool'), relay.shape_of(uop_4858))) # shape=(1, 9, 13)
bop_4871 = relay.bitwise_and(bop_4862.astype('uint8'), relay.reshape(uop_4858.astype('uint8'), relay.shape_of(bop_4862))) # shape=(1, 9, 13)
bop_4878 = relay.minimum(bop_4871.astype('uint64'), relay.reshape(bop_4862.astype('uint64'), relay.shape_of(bop_4871))) # shape=(1, 9, 13)
func_195_call = mod.get_global_var('func_195')
func_197_call = mutated_mod.get_global_var('func_197')
const_4890 = relay.const(-10, dtype = "int32")#candidate|4890|()|const|int32
call_4889 = func_195_call(relay.reshape(const_4890.astype('int32'), []))
call_4891 = func_195_call(relay.reshape(const_4890.astype('int32'), []))
func_195_call = mod.get_global_var('func_195')
func_197_call = mutated_mod.get_global_var('func_197')
call_4901 = func_195_call(relay.reshape(const_4890.astype('int32'), []))
call_4902 = func_195_call(relay.reshape(const_4890.astype('int32'), []))
func_4176_call = mod.get_global_var('func_4176')
func_4179_call = mutated_mod.get_global_var('func_4179')
var_4904 = relay.var("var_4904", dtype = "float64", shape = (1470,))#candidate|4904|(1470,)|var|float64
call_4903 = relay.TupleGetItem(func_4176_call(relay.reshape(var_4904.astype('float64'), [14, 15, 7]), relay.reshape(var_4904.astype('float64'), [14, 15, 7]), ), 0)
call_4905 = relay.TupleGetItem(func_4179_call(relay.reshape(var_4904.astype('float64'), [14, 15, 7]), relay.reshape(var_4904.astype('float64'), [14, 15, 7]), ), 0)
func_2491_call = mod.get_global_var('func_2491')
func_2495_call = mutated_mod.get_global_var('func_2495')
var_4910 = relay.var("var_4910", dtype = "float64", shape = (120,))#candidate|4910|(120,)|var|float64
call_4909 = relay.TupleGetItem(func_2491_call(relay.reshape(var_4910.astype('float64'), [3, 5, 8]), relay.reshape(var_4910.astype('float64'), [3, 5, 8]), ), 2)
call_4911 = relay.TupleGetItem(func_2495_call(relay.reshape(var_4910.astype('float64'), [3, 5, 8]), relay.reshape(var_4910.astype('float64'), [3, 5, 8]), ), 2)
output = relay.Tuple([bop_4878,call_4889,const_4890,call_4901,call_4903,var_4904,call_4909,var_4910,])
output2 = relay.Tuple([bop_4878,call_4891,const_4890,call_4902,call_4905,var_4904,call_4911,var_4910,])
func_4916 = relay.Function([var_4857,var_4904,var_4910,], output)
mod['func_4916'] = func_4916
mod = relay.transform.InferType()(mod)
mutated_mod['func_4916'] = func_4916
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4916_call = mutated_mod.get_global_var('func_4916')
var_4918 = relay.var("var_4918", dtype = "float64", shape = (1, 9, 13))#candidate|4918|(1, 9, 13)|var|float64
var_4919 = relay.var("var_4919", dtype = "float64", shape = (1470,))#candidate|4919|(1470,)|var|float64
var_4920 = relay.var("var_4920", dtype = "float64", shape = (120,))#candidate|4920|(120,)|var|float64
call_4917 = func_4916_call(var_4918,var_4919,var_4920,)
output = call_4917
func_4921 = relay.Function([var_4918,var_4919,var_4920,], output)
mutated_mod['func_4921'] = func_4921
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5013 = relay.var("var_5013", dtype = "bool", shape = (15, 12, 14))#candidate|5013|(15, 12, 14)|var|bool
var_5014 = relay.var("var_5014", dtype = "bool", shape = (15, 12, 14))#candidate|5014|(15, 12, 14)|var|bool
bop_5015 = relay.logical_and(var_5013.astype('bool'), relay.reshape(var_5014.astype('bool'), relay.shape_of(var_5013))) # shape=(15, 12, 14)
output = bop_5015
output2 = bop_5015
func_5019 = relay.Function([var_5013,var_5014,], output)
mod['func_5019'] = func_5019
mod = relay.transform.InferType()(mod)
var_5020 = relay.var("var_5020", dtype = "bool", shape = (15, 12, 14))#candidate|5020|(15, 12, 14)|var|bool
var_5021 = relay.var("var_5021", dtype = "bool", shape = (15, 12, 14))#candidate|5021|(15, 12, 14)|var|bool
output = func_5019(var_5020,var_5021,)
func_5022 = relay.Function([var_5020,var_5021,], output)
mutated_mod['func_5022'] = func_5022
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5114 = relay.var("var_5114", dtype = "float64", shape = (6, 10, 4))#candidate|5114|(6, 10, 4)|var|float64
uop_5115 = relay.asin(var_5114.astype('float64')) # shape=(6, 10, 4)
uop_5118 = relay.log(uop_5115.astype('float32')) # shape=(6, 10, 4)
func_2937_call = mod.get_global_var('func_2937')
func_2939_call = mutated_mod.get_global_var('func_2939')
var_5131 = relay.var("var_5131", dtype = "float32", shape = (84,))#candidate|5131|(84,)|var|float32
call_5130 = func_2937_call(relay.reshape(var_5131.astype('float32'), [3, 7, 4]))
call_5132 = func_2937_call(relay.reshape(var_5131.astype('float32'), [3, 7, 4]))
output = relay.Tuple([uop_5118,call_5130,var_5131,])
output2 = relay.Tuple([uop_5118,call_5132,var_5131,])
func_5135 = relay.Function([var_5114,var_5131,], output)
mod['func_5135'] = func_5135
mod = relay.transform.InferType()(mod)
var_5136 = relay.var("var_5136", dtype = "float64", shape = (6, 10, 4))#candidate|5136|(6, 10, 4)|var|float64
var_5137 = relay.var("var_5137", dtype = "float32", shape = (84,))#candidate|5137|(84,)|var|float32
output = func_5135(var_5136,var_5137,)
func_5138 = relay.Function([var_5136,var_5137,], output)
mutated_mod['func_5138'] = func_5138
mutated_mod = relay.transform.InferType()(mutated_mod)
const_5621 = relay.const([[[True,False,False,False,True,False,False,True,True,True],[False,True,False,True,False,True,True,True,True,False],[True,False,True,True,False,True,True,True,False,False],[True,True,True,True,True,False,True,False,True,False]],[[True,False,True,True,True,True,False,False,False,True],[False,True,False,True,True,False,False,False,True,False],[False,False,True,True,True,False,False,True,False,True],[True,True,True,True,False,False,False,False,False,True]],[[False,False,False,False,True,True,False,True,True,False],[True,False,False,False,True,False,True,True,True,True],[True,False,True,False,True,True,True,False,False,True],[True,False,False,True,False,True,True,False,True,False]],[[False,False,False,True,True,False,True,False,True,False],[True,False,False,False,True,False,False,False,False,False],[True,True,False,True,False,False,True,True,False,False],[False,True,False,False,False,True,False,True,True,False]],[[True,True,False,True,True,True,True,True,True,True],[True,True,False,True,False,True,True,True,False,False],[True,False,True,False,True,True,True,True,False,True],[True,True,False,False,False,True,True,False,True,True]],[[True,False,False,False,False,False,True,True,False,True],[True,True,False,False,True,True,True,True,False,True],[False,False,False,False,False,True,True,True,True,False],[False,False,True,False,False,True,True,True,False,True]],[[True,False,False,True,False,False,False,False,True,False],[True,True,False,False,True,False,True,False,False,False],[True,False,False,False,True,True,True,False,False,True],[True,True,True,True,False,False,True,False,False,False]],[[True,True,True,True,True,False,False,False,True,False],[False,False,False,True,False,True,False,True,True,False],[False,False,False,False,False,False,False,True,True,False],[False,False,True,True,True,True,False,True,True,True]],[[True,False,True,False,True,True,True,True,False,True],[True,False,True,True,False,True,False,False,True,True],[False,True,True,False,False,False,True,False,False,False],[True,True,False,False,True,True,True,True,False,True]],[[False,False,False,True,True,False,True,True,True,False],[False,True,True,True,True,True,False,False,False,False],[True,True,True,True,False,True,True,True,False,True],[True,False,True,True,True,True,True,False,False,False]],[[False,True,False,True,False,True,True,False,False,True],[False,True,False,False,False,False,True,True,False,True],[True,True,True,False,False,False,True,True,True,False],[False,True,True,False,True,True,True,False,False,True]],[[True,False,False,True,False,True,False,True,False,False],[False,True,True,True,False,True,False,True,False,True],[True,False,False,False,False,True,False,False,True,False],[True,False,False,False,False,True,True,False,False,True]],[[False,True,True,True,False,True,False,False,False,False],[True,False,True,False,False,True,True,False,True,True],[False,True,True,True,True,True,False,False,True,False],[True,True,True,False,False,False,True,False,False,False]],[[True,False,False,False,False,False,True,True,True,True],[False,True,False,False,False,True,True,False,True,True],[True,False,False,False,True,True,False,False,True,True],[False,False,True,False,False,True,True,False,False,False]],[[True,True,True,True,True,False,False,False,False,True],[True,True,True,False,False,False,True,False,True,False],[True,True,True,False,False,True,True,True,True,False],[True,False,True,False,True,False,False,True,False,True]]], dtype = "bool")#candidate|5621|(15, 4, 10)|const|bool
const_5622 = relay.const([[[False,False,False,False,False,False,True,True,True,True],[False,True,False,True,True,False,False,False,True,False],[True,False,True,True,True,True,False,True,False,True],[True,False,True,True,False,False,False,True,True,True]],[[False,True,False,True,False,True,True,True,True,False],[True,False,False,True,False,False,False,False,True,False],[True,False,False,False,False,False,False,False,True,True],[True,False,True,False,True,True,True,False,False,True]],[[False,False,True,True,True,True,True,True,True,False],[False,False,False,False,True,False,True,True,False,False],[True,False,False,False,False,True,True,True,True,False],[False,False,False,False,True,True,True,False,False,True]],[[False,False,True,False,True,False,True,False,False,True],[False,True,True,True,True,True,False,False,True,False],[False,True,False,False,True,True,True,True,True,False],[False,True,False,True,True,True,False,False,True,False]],[[False,False,True,True,True,False,True,True,False,False],[True,True,True,True,True,True,False,True,False,True],[True,False,False,True,True,False,True,True,False,False],[True,False,False,False,False,True,False,True,True,True]],[[True,False,False,False,False,True,True,False,False,True],[False,True,True,False,True,True,False,False,False,True],[False,False,True,True,False,True,False,True,False,True],[False,True,False,False,False,False,True,True,False,False]],[[True,False,True,False,True,False,True,True,False,False],[False,True,False,False,False,False,True,False,True,False],[False,True,True,False,True,True,False,True,True,False],[True,False,True,False,False,False,True,False,True,True]],[[False,False,False,False,False,False,False,True,True,False],[True,True,True,True,True,True,False,True,False,True],[True,True,True,False,True,False,False,False,False,False],[False,False,False,False,False,False,True,False,True,False]],[[False,True,True,False,False,False,True,False,True,True],[False,False,False,True,True,True,True,True,False,True],[True,False,True,True,False,True,True,True,False,True],[True,False,False,False,False,False,False,True,False,True]],[[False,False,False,False,False,True,False,True,False,False],[True,False,False,False,True,False,False,True,False,False],[False,True,False,False,False,True,False,False,False,False],[False,True,True,False,True,True,True,True,False,True]],[[True,True,True,True,False,True,False,False,False,False],[False,False,True,False,False,True,True,False,False,False],[False,False,True,True,False,False,False,True,False,True],[False,True,False,False,True,False,True,True,False,True]],[[True,False,True,False,True,True,False,False,True,False],[False,True,False,True,True,False,False,True,True,False],[False,True,True,True,True,False,True,False,True,False],[True,False,False,False,True,True,True,True,False,False]],[[True,False,False,True,False,True,True,False,False,False],[False,True,True,True,False,True,False,True,True,True],[True,True,False,False,True,True,True,True,False,True],[True,True,False,True,False,False,False,True,False,True]],[[True,False,False,False,True,False,True,True,True,True],[True,True,False,True,True,True,False,False,False,False],[False,False,True,False,True,True,False,False,False,False],[True,True,False,True,True,True,True,True,True,False]],[[False,False,True,False,True,False,True,True,True,False],[True,True,False,False,True,True,True,True,True,True],[True,False,False,True,True,True,False,False,False,True],[True,False,True,False,False,False,True,False,True,False]]], dtype = "bool")#candidate|5622|(15, 4, 10)|const|bool
bop_5623 = relay.logical_and(const_5621.astype('bool'), relay.reshape(const_5622.astype('bool'), relay.shape_of(const_5621))) # shape=(15, 4, 10)
func_3243_call = mod.get_global_var('func_3243')
func_3247_call = mutated_mod.get_global_var('func_3247')
const_5628 = relay.const([10,-6,-7,10,6,8,-6,8,2,-5,-2,-6,-4,10,-9,-5,-7,1,3,-7,-9,-1,-10,6,-4,5,-9,-5,-1,10,-1,1,9,-1,-7,-3,5,-3,2,-9,4,4,-6,6,-5,-9,5,-4,4,-7,6,-7,-4,6,-2,4,-10,7,9,-5,-2,-3,-4,1,4,9,10,1,-8,1,1,-6,-6,-6,8,3,8,9,5,-2,-8,9,8,-3,6,-8,1,-7,-9,-4,-6,9,3,8,7,-6,-2,4,-4,8,-1,6,-10,-9,-10,6,-1,2,2,-1,9,-6,4,-2,-7,10,-5,-9,1,-4,2,7,-6,7,-10,-6,8,1,-2,-2,-3,6,-9,5,-5,-3,10,10,10,3,-8,8,-1,-9,1,-1,-4,-4,-3,4,-7,-5,-6,2,-4,5], dtype = "int8")#candidate|5628|(156,)|const|int8
var_5629 = relay.var("var_5629", dtype = "float32", shape = (990,))#candidate|5629|(990,)|var|float32
call_5627 = relay.TupleGetItem(func_3243_call(relay.reshape(const_5628.astype('int8'), [4, 3, 13]), relay.reshape(var_5629.astype('float32'), [330, 3]), ), 3)
call_5630 = relay.TupleGetItem(func_3247_call(relay.reshape(const_5628.astype('int8'), [4, 3, 13]), relay.reshape(var_5629.astype('float32'), [330, 3]), ), 3)
func_3243_call = mod.get_global_var('func_3243')
func_3247_call = mutated_mod.get_global_var('func_3247')
call_5632 = relay.TupleGetItem(func_3243_call(relay.reshape(const_5628.astype('int8'), [4, 3, 13]), relay.reshape(call_5627.astype('float32'), [330, 3]), ), 2)
call_5633 = relay.TupleGetItem(func_3247_call(relay.reshape(const_5628.astype('int8'), [4, 3, 13]), relay.reshape(call_5627.astype('float32'), [330, 3]), ), 2)
bop_5638 = relay.multiply(call_5632.astype('uint64'), relay.reshape(var_5629.astype('uint64'), relay.shape_of(call_5632))) # shape=(9, 10, 11)
bop_5641 = relay.multiply(call_5633.astype('uint64'), relay.reshape(var_5629.astype('uint64'), relay.shape_of(call_5633))) # shape=(9, 10, 11)
uop_5644 = relay.asin(const_5622.astype('float32')) # shape=(15, 4, 10)
output = relay.Tuple([bop_5623,call_5627,const_5628,bop_5638,uop_5644,])
output2 = relay.Tuple([bop_5623,call_5630,const_5628,bop_5641,uop_5644,])
func_5649 = relay.Function([var_5629,], output)
mod['func_5649'] = func_5649
mod = relay.transform.InferType()(mod)
var_5650 = relay.var("var_5650", dtype = "float32", shape = (990,))#candidate|5650|(990,)|var|float32
output = func_5649(var_5650)
func_5651 = relay.Function([var_5650], output)
mutated_mod['func_5651'] = func_5651
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6069 = relay.var("var_6069", dtype = "float32", shape = (3, 5, 9))#candidate|6069|(3, 5, 9)|var|float32
uop_6070 = relay.asin(var_6069.astype('float32')) # shape=(3, 5, 9)
var_6078 = relay.var("var_6078", dtype = "float32", shape = (3, 5, 9))#candidate|6078|(3, 5, 9)|var|float32
bop_6079 = relay.logical_xor(uop_6070.astype('int8'), relay.reshape(var_6078.astype('int8'), relay.shape_of(uop_6070))) # shape=(3, 5, 9)
output = bop_6079
output2 = bop_6079
func_6082 = relay.Function([var_6069,var_6078,], output)
mod['func_6082'] = func_6082
mod = relay.transform.InferType()(mod)
mutated_mod['func_6082'] = func_6082
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6082_call = mutated_mod.get_global_var('func_6082')
var_6084 = relay.var("var_6084", dtype = "float32", shape = (3, 5, 9))#candidate|6084|(3, 5, 9)|var|float32
var_6085 = relay.var("var_6085", dtype = "float32", shape = (3, 5, 9))#candidate|6085|(3, 5, 9)|var|float32
call_6083 = func_6082_call(var_6084,var_6085,)
output = call_6083
func_6086 = relay.Function([var_6084,var_6085,], output)
mutated_mod['func_6086'] = func_6086
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6120 = relay.var("var_6120", dtype = "bool", shape = ())#candidate|6120|()|var|bool
var_6121 = relay.var("var_6121", dtype = "bool", shape = (15, 6, 15))#candidate|6121|(15, 6, 15)|var|bool
bop_6122 = relay.logical_and(var_6120.astype('bool'), var_6121.astype('bool')) # shape=(15, 6, 15)
output = bop_6122
output2 = bop_6122
func_6131 = relay.Function([var_6120,var_6121,], output)
mod['func_6131'] = func_6131
mod = relay.transform.InferType()(mod)
mutated_mod['func_6131'] = func_6131
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6131_call = mutated_mod.get_global_var('func_6131')
var_6133 = relay.var("var_6133", dtype = "bool", shape = ())#candidate|6133|()|var|bool
var_6134 = relay.var("var_6134", dtype = "bool", shape = (15, 6, 15))#candidate|6134|(15, 6, 15)|var|bool
call_6132 = func_6131_call(var_6133,var_6134,)
output = call_6132
func_6135 = relay.Function([var_6133,var_6134,], output)
mutated_mod['func_6135'] = func_6135
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6379 = relay.var("var_6379", dtype = "int8", shape = (2, 5, 11))#candidate|6379|(2, 5, 11)|var|int8
var_6380 = relay.var("var_6380", dtype = "int8", shape = (2, 5, 11))#candidate|6380|(2, 5, 11)|var|int8
bop_6381 = relay.left_shift(var_6379.astype('int8'), relay.reshape(var_6380.astype('int8'), relay.shape_of(var_6379))) # shape=(2, 5, 11)
bop_6401 = relay.right_shift(var_6380.astype('uint32'), relay.reshape(bop_6381.astype('uint32'), relay.shape_of(var_6380))) # shape=(2, 5, 11)
output = bop_6401
output2 = bop_6401
func_6404 = relay.Function([var_6379,var_6380,], output)
mod['func_6404'] = func_6404
mod = relay.transform.InferType()(mod)
mutated_mod['func_6404'] = func_6404
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6404_call = mutated_mod.get_global_var('func_6404')
var_6406 = relay.var("var_6406", dtype = "int8", shape = (2, 5, 11))#candidate|6406|(2, 5, 11)|var|int8
var_6407 = relay.var("var_6407", dtype = "int8", shape = (2, 5, 11))#candidate|6407|(2, 5, 11)|var|int8
call_6405 = func_6404_call(var_6406,var_6407,)
output = call_6405
func_6408 = relay.Function([var_6406,var_6407,], output)
mutated_mod['func_6408'] = func_6408
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6464 = relay.var("var_6464", dtype = "uint16", shape = (7, 12, 4))#candidate|6464|(7, 12, 4)|var|uint16
const_6465 = relay.const([[[2,2,-5,-10],[2,-9,-7,8],[6,9,7,-8],[-2,4,7,9],[-3,7,-3,-9],[3,4,7,-5],[-8,-10,8,9],[-6,3,-7,3],[5,-6,-8,-5],[-2,-1,1,-1],[-10,7,-3,-1],[-9,2,-9,4]],[[6,-2,6,5],[6,-9,4,9],[-5,4,-1,6],[-1,6,5,2],[1,-6,-3,4],[-1,-6,5,8],[2,-5,-1,4],[1,-10,9,8],[9,-4,-6,-10],[1,1,3,-5],[3,7,3,6],[1,-8,1,10]],[[-1,2,7,6],[2,-6,-9,10],[-1,6,10,5],[9,4,1,-1],[2,-2,7,-7],[-7,4,3,8],[2,-7,-7,6],[10,-7,5,5],[-1,-6,-7,5],[-7,-10,2,-4],[1,7,-6,3],[4,-6,7,-8]],[[-10,-7,1,-1],[-1,-9,-6,-7],[6,4,-8,7],[4,-1,-7,-9],[5,-4,-8,-3],[5,-3,-6,-9],[-8,-6,9,-8],[-7,5,-8,-10],[10,9,8,-8],[5,5,6,6],[8,-10,-5,9],[-7,-7,9,-10]],[[-1,1,-3,4],[2,1,-5,2],[9,10,10,8],[-4,-4,2,5],[3,5,-5,-5],[-10,7,-5,1],[-4,-8,8,2],[10,-6,2,-8],[-7,2,-3,1],[5,-1,10,4],[2,-6,9,4],[-6,4,4,-4]],[[4,-3,2,10],[-1,-8,4,-4],[-8,-7,-10,8],[3,-5,-1,-6],[-4,-2,2,-4],[5,-3,-5,-3],[9,10,3,7],[-10,-1,-1,8],[5,-2,1,9],[9,5,10,7],[-10,-9,6,6],[-10,7,-5,9]],[[-4,-8,-8,-3],[10,-2,-7,-2],[-7,1,8,-7],[6,10,-10,1],[1,-1,6,-9],[-3,1,-10,-9],[3,-8,7,7],[-1,5,7,5],[7,10,-9,2],[-8,4,-5,4],[-2,6,8,-5],[2,10,9,-9]]], dtype = "uint16")#candidate|6465|(7, 12, 4)|const|uint16
bop_6466 = relay.greater_equal(var_6464.astype('bool'), relay.reshape(const_6465.astype('bool'), relay.shape_of(var_6464))) # shape=(7, 12, 4)
func_2491_call = mod.get_global_var('func_2491')
func_2495_call = mutated_mod.get_global_var('func_2495')
const_6472 = relay.const([4.153755,3.941395,-3.135409,-9.310810,8.598383,-8.328742,-7.385530,4.763756,-0.581247,-9.307407,4.853386,9.638624,-2.408207,4.249872,-8.020370,2.793432,7.098791,-8.572622,7.749963,4.322236,9.214143,7.110962,-1.083993,-6.380137,1.508036,-4.259909,5.447815,-7.651809,0.722861,-8.101458,2.089585,1.192968,-1.835223,-1.766630,-7.254843,-2.711859,3.479858,1.974616,-6.967133,-2.023542,-3.366882,2.583536,0.225408,-6.380310,2.318006,-2.300583,-2.976682,6.860907,-0.689261,-2.220588,-8.426833,-5.521504,7.747215,8.210696,-9.441382,4.171532,-9.855812,-7.219670,-0.661661,-5.858314,0.489984,-5.966523,-3.577907,0.608271,7.724024,1.575537,-6.926601,8.137820,-4.300563,-1.112231,-1.746806,8.063449,-6.966953,-4.876673,-7.129393,-5.832049,-6.841763,-0.916321,8.486034,9.181590,8.525807,-9.414768,-2.153805,4.251048,-5.753353,1.965745,4.306537,7.027959,1.625629,-9.851508,-3.699907,8.000099,5.410395,0.717683,4.975109,2.574935,2.030097,2.507602,5.430284,-0.991356,-0.877807,8.304353,6.399845,6.039721,-6.883211,-1.804916,-0.332081,0.428418,1.592793,-0.762404,7.725657,-8.308911,0.354849,4.855796,-6.679566,-3.109857,1.933519,3.933710,-5.183536,1.403769], dtype = "float64")#candidate|6472|(120,)|const|float64
call_6471 = relay.TupleGetItem(func_2491_call(relay.reshape(const_6472.astype('float64'), [3, 5, 8]), relay.reshape(const_6472.astype('float64'), [3, 5, 8]), ), 4)
call_6473 = relay.TupleGetItem(func_2495_call(relay.reshape(const_6472.astype('float64'), [3, 5, 8]), relay.reshape(const_6472.astype('float64'), [3, 5, 8]), ), 4)
func_5135_call = mod.get_global_var('func_5135')
func_5138_call = mutated_mod.get_global_var('func_5138')
var_6488 = relay.var("var_6488", dtype = "float64", shape = (240,))#candidate|6488|(240,)|var|float64
var_6489 = relay.var("var_6489", dtype = "float32", shape = (84,))#candidate|6489|(84,)|var|float32
call_6487 = relay.TupleGetItem(func_5135_call(relay.reshape(var_6488.astype('float64'), [6, 10, 4]), relay.reshape(var_6489.astype('float32'), [84,]), ), 1)
call_6490 = relay.TupleGetItem(func_5138_call(relay.reshape(var_6488.astype('float64'), [6, 10, 4]), relay.reshape(var_6489.astype('float32'), [84,]), ), 1)
func_195_call = mod.get_global_var('func_195')
func_197_call = mutated_mod.get_global_var('func_197')
const_6501 = relay.const(1, dtype = "int32")#candidate|6501|()|const|int32
call_6500 = func_195_call(relay.reshape(const_6501.astype('int32'), []))
call_6502 = func_195_call(relay.reshape(const_6501.astype('int32'), []))
output = relay.Tuple([bop_6466,call_6471,const_6472,call_6487,var_6488,var_6489,call_6500,const_6501,])
output2 = relay.Tuple([bop_6466,call_6473,const_6472,call_6490,var_6488,var_6489,call_6502,const_6501,])
func_6503 = relay.Function([var_6464,var_6488,var_6489,], output)
mod['func_6503'] = func_6503
mod = relay.transform.InferType()(mod)
mutated_mod['func_6503'] = func_6503
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6503_call = mutated_mod.get_global_var('func_6503')
var_6505 = relay.var("var_6505", dtype = "uint16", shape = (7, 12, 4))#candidate|6505|(7, 12, 4)|var|uint16
var_6506 = relay.var("var_6506", dtype = "float64", shape = (240,))#candidate|6506|(240,)|var|float64
var_6507 = relay.var("var_6507", dtype = "float32", shape = (84,))#candidate|6507|(84,)|var|float32
call_6504 = func_6503_call(var_6505,var_6506,var_6507,)
output = call_6504
func_6508 = relay.Function([var_6505,var_6506,var_6507,], output)
mutated_mod['func_6508'] = func_6508
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6841 = relay.var("var_6841", dtype = "uint8", shape = (6, 9, 13))#candidate|6841|(6, 9, 13)|var|uint8
var_6842 = relay.var("var_6842", dtype = "uint8", shape = (6, 9, 13))#candidate|6842|(6, 9, 13)|var|uint8
bop_6843 = relay.less(var_6841.astype('bool'), relay.reshape(var_6842.astype('bool'), relay.shape_of(var_6841))) # shape=(6, 9, 13)
output = relay.Tuple([bop_6843,])
output2 = relay.Tuple([bop_6843,])
func_6846 = relay.Function([var_6841,var_6842,], output)
mod['func_6846'] = func_6846
mod = relay.transform.InferType()(mod)
mutated_mod['func_6846'] = func_6846
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6846_call = mutated_mod.get_global_var('func_6846')
var_6848 = relay.var("var_6848", dtype = "uint8", shape = (6, 9, 13))#candidate|6848|(6, 9, 13)|var|uint8
var_6849 = relay.var("var_6849", dtype = "uint8", shape = (6, 9, 13))#candidate|6849|(6, 9, 13)|var|uint8
call_6847 = func_6846_call(var_6848,var_6849,)
output = call_6847
func_6850 = relay.Function([var_6848,var_6849,], output)
mutated_mod['func_6850'] = func_6850
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6944 = relay.var("var_6944", dtype = "float64", shape = (14, 3, 14))#candidate|6944|(14, 3, 14)|var|float64
uop_6945 = relay.tan(var_6944.astype('float64')) # shape=(14, 3, 14)
bop_6970 = relay.multiply(uop_6945.astype('uint8'), relay.reshape(var_6944.astype('uint8'), relay.shape_of(uop_6945))) # shape=(14, 3, 14)
bop_6975 = relay.less(bop_6970.astype('bool'), relay.reshape(uop_6945.astype('bool'), relay.shape_of(bop_6970))) # shape=(14, 3, 14)
func_6131_call = mod.get_global_var('func_6131')
func_6135_call = mutated_mod.get_global_var('func_6135')
const_6979 = relay.const(False, dtype = "bool")#candidate|6979|()|const|bool
const_6980 = relay.const([[False,True,True,True,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,False,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,True,False,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,False,False,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,False,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,False,False,True,True,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,True,True,False,True,True,False,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,False,False,True,False,True,True,False,True,False,True,False,True,True,False,True,True,False,True,False,True,True,True,True,True,True,False,False,False,False,False,False,True,False,True,True,False,True,False,True,True,True,False,False,False,False,False,False,False,True,False,True,False,True,True,False,False,True,False,False,True,False,False,False,True,False,False,True,True,False,False,False,True,False,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,False,True,False,True,True,False,False,True,False,True,True,False,False,False,False,False,True,True,True,False,True,False,True,False,True,True,False,True,False,False,True,False,False,False,True,True,False,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,True,False,True,True,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,True,False,True,True,True,False,True,False,True,True,True,False,True,False,True,True,False,False,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,True,True,False,False,True,True,False,False,False,True,True,True,False,True,False,True,False,True,False,False,False,True,False,False,True,True,False,True,True,True,False,False,False,True,False,False,False,False,False,False,False,True,True,False,False,False,True,True,True,True,True,True,True,True,True,False,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,False,False,False,False,False,True,True,False,True,True,True,True,False,True,False,True,False,False,True,False,False,False,True,False,True,False,True,True,True,True,False,True,True,False,True,False,True,True,False,False,False,True,True,True,True,True,False,True,False,True,True,False,True,False,False,False,True,True,True,False,False,True,False,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,True,True,False,True,True,True,True,True,False,False,False,True,True,True,True,True,True,False,False,True,True,True,True,True,False,False,True,False,True,True,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,True,True,False,True,False,False,False,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,False,False,False,False,True,False,False,False,False,False,False,False,False,False,True,False,False,False,True,False,False,False,True,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,True,True,True,False,True,True,True,False,False,True,True,False,True,False,True,False,True,True,False,True,True,False,False,True,False,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,True,True,True,False,False,True,True,True,False,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,True,True,False,True,True,True,False,True,True,False,True,True,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,True,True,True,True,False,False,False,True,False,False,False,True,True,True,True,True,False,True,False,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,True,False,True,False,False,True,False,True,False,True,True,True,True,True,True,False,False,True,True,True,False,True,True,True,True,False,False,True,True,False,True,False,True,False,False,True,True,False,True,False,True,False,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,True,False,False,True,True,False,False,False,False,True,True,True,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,False,True,True,True,True,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,True,True,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,True,False,False,True,False,False,True,False,True,True,False,True,True,False,True,True,True,True,True,True,False,False,False,False,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,False,True,True,True,True,False,False,False,False,False,False,False,False,False,False,True,True,True,True,False,True,False,True,True,True,True,True,False,False,False,False,False,True,True,True,False,True,True,True,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,True]], dtype = "bool")#candidate|6980|(1, 1350)|const|bool
call_6978 = func_6131_call(relay.reshape(const_6979.astype('bool'), []), relay.reshape(const_6980.astype('bool'), [15, 6, 15]), )
call_6981 = func_6131_call(relay.reshape(const_6979.astype('bool'), []), relay.reshape(const_6980.astype('bool'), [15, 6, 15]), )
output = relay.Tuple([bop_6975,call_6978,const_6979,const_6980,])
output2 = relay.Tuple([bop_6975,call_6981,const_6979,const_6980,])
func_6997 = relay.Function([var_6944,], output)
mod['func_6997'] = func_6997
mod = relay.transform.InferType()(mod)
var_6998 = relay.var("var_6998", dtype = "float64", shape = (14, 3, 14))#candidate|6998|(14, 3, 14)|var|float64
output = func_6997(var_6998)
func_6999 = relay.Function([var_6998], output)
mutated_mod['func_6999'] = func_6999
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7050 = relay.const(-2.367790, dtype = "float32")#candidate|7050|()|const|float32
var_7051 = relay.var("var_7051", dtype = "float32", shape = (10, 3, 6))#candidate|7051|(10, 3, 6)|var|float32
bop_7052 = relay.divide(const_7050.astype('float32'), var_7051.astype('float32')) # shape=(10, 3, 6)
output = bop_7052
output2 = bop_7052
func_7060 = relay.Function([var_7051,], output)
mod['func_7060'] = func_7060
mod = relay.transform.InferType()(mod)
mutated_mod['func_7060'] = func_7060
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7061 = relay.var("var_7061", dtype = "float32", shape = (10, 3, 6))#candidate|7061|(10, 3, 6)|var|float32
func_7060_call = mutated_mod.get_global_var('func_7060')
call_7062 = func_7060_call(var_7061)
output = call_7062
func_7063 = relay.Function([var_7061], output)
mutated_mod['func_7063'] = func_7063
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7207 = relay.var("var_7207", dtype = "uint8", shape = (12, 5, 16))#candidate|7207|(12, 5, 16)|var|uint8
var_7208 = relay.var("var_7208", dtype = "uint8", shape = (12, 5, 16))#candidate|7208|(12, 5, 16)|var|uint8
bop_7209 = relay.bitwise_or(var_7207.astype('uint8'), relay.reshape(var_7208.astype('uint8'), relay.shape_of(var_7207))) # shape=(12, 5, 16)
output = relay.Tuple([bop_7209,])
output2 = relay.Tuple([bop_7209,])
func_7220 = relay.Function([var_7207,var_7208,], output)
mod['func_7220'] = func_7220
mod = relay.transform.InferType()(mod)
mutated_mod['func_7220'] = func_7220
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7220_call = mutated_mod.get_global_var('func_7220')
var_7222 = relay.var("var_7222", dtype = "uint8", shape = (12, 5, 16))#candidate|7222|(12, 5, 16)|var|uint8
var_7223 = relay.var("var_7223", dtype = "uint8", shape = (12, 5, 16))#candidate|7223|(12, 5, 16)|var|uint8
call_7221 = func_7220_call(var_7222,var_7223,)
output = call_7221
func_7224 = relay.Function([var_7222,var_7223,], output)
mutated_mod['func_7224'] = func_7224
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7286 = relay.var("var_7286", dtype = "float64", shape = (1, 7, 7))#candidate|7286|(1, 7, 7)|var|float64
uop_7287 = relay.acos(var_7286.astype('float64')) # shape=(1, 7, 7)
bop_7289 = relay.greater(var_7286.astype('bool'), relay.reshape(uop_7287.astype('bool'), relay.shape_of(var_7286))) # shape=(1, 7, 7)
bop_7295 = relay.greater_equal(uop_7287.astype('bool'), relay.reshape(bop_7289.astype('bool'), relay.shape_of(uop_7287))) # shape=(1, 7, 7)
bop_7308 = relay.maximum(var_7286.astype('float32'), relay.reshape(bop_7289.astype('float32'), relay.shape_of(var_7286))) # shape=(1, 7, 7)
func_6131_call = mod.get_global_var('func_6131')
func_6135_call = mutated_mod.get_global_var('func_6135')
const_7315 = relay.const(True, dtype = "bool")#candidate|7315|()|const|bool
var_7316 = relay.var("var_7316", dtype = "bool", shape = (1350,))#candidate|7316|(1350,)|var|bool
call_7314 = func_6131_call(relay.reshape(const_7315.astype('bool'), []), relay.reshape(var_7316.astype('bool'), [15, 6, 15]), )
call_7317 = func_6131_call(relay.reshape(const_7315.astype('bool'), []), relay.reshape(var_7316.astype('bool'), [15, 6, 15]), )
output = relay.Tuple([bop_7295,bop_7308,call_7314,const_7315,var_7316,])
output2 = relay.Tuple([bop_7295,bop_7308,call_7317,const_7315,var_7316,])
func_7320 = relay.Function([var_7286,var_7316,], output)
mod['func_7320'] = func_7320
mod = relay.transform.InferType()(mod)
var_7321 = relay.var("var_7321", dtype = "float64", shape = (1, 7, 7))#candidate|7321|(1, 7, 7)|var|float64
var_7322 = relay.var("var_7322", dtype = "bool", shape = (1350,))#candidate|7322|(1350,)|var|bool
output = func_7320(var_7321,var_7322,)
func_7323 = relay.Function([var_7321,var_7322,], output)
mutated_mod['func_7323'] = func_7323
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7343 = relay.var("var_7343", dtype = "float32", shape = (13, 2, 1))#candidate|7343|(13, 2, 1)|var|float32
uop_7344 = relay.exp(var_7343.astype('float32')) # shape=(13, 2, 1)
func_5649_call = mod.get_global_var('func_5649')
func_5651_call = mutated_mod.get_global_var('func_5651')
var_7351 = relay.var("var_7351", dtype = "float32", shape = (990,))#candidate|7351|(990,)|var|float32
call_7350 = relay.TupleGetItem(func_5649_call(relay.reshape(var_7351.astype('float32'), [990,])), 2)
call_7352 = relay.TupleGetItem(func_5651_call(relay.reshape(var_7351.astype('float32'), [990,])), 2)
func_7320_call = mod.get_global_var('func_7320')
func_7323_call = mutated_mod.get_global_var('func_7323')
const_7354 = relay.const([-4.642866,-7.723938,-2.833544,-5.133050,-1.025843,8.466902,-7.649226,5.280421,9.937631,1.116993,-8.231683,-6.748926,-9.063133,6.877219,5.465671,-8.987597,0.921393,6.471861,-4.352874,6.647723,-0.637152,-2.548529,-2.173084,2.784518,1.789532,-1.795691,5.118439,-0.047533,-4.741886,-3.644483,-5.903612,8.917830,1.063106,5.427818,1.584079,5.335015,-7.488303,-8.839148,4.137497,-9.849850,-3.601608,-0.137377,6.659319,4.861814,-3.527869,4.565457,-2.288744,-6.334753,-4.892929], dtype = "float64")#candidate|7354|(49,)|const|float64
var_7355 = relay.var("var_7355", dtype = "bool", shape = (1350,))#candidate|7355|(1350,)|var|bool
call_7353 = relay.TupleGetItem(func_7320_call(relay.reshape(const_7354.astype('float64'), [1, 7, 7]), relay.reshape(var_7355.astype('bool'), [1350,]), ), 3)
call_7356 = relay.TupleGetItem(func_7323_call(relay.reshape(const_7354.astype('float64'), [1, 7, 7]), relay.reshape(var_7355.astype('bool'), [1350,]), ), 3)
func_2937_call = mod.get_global_var('func_2937')
func_2939_call = mutated_mod.get_global_var('func_2939')
var_7367 = relay.var("var_7367", dtype = "float32", shape = (84, 1))#candidate|7367|(84, 1)|var|float32
call_7366 = func_2937_call(relay.reshape(var_7367.astype('float32'), [3, 7, 4]))
call_7368 = func_2937_call(relay.reshape(var_7367.astype('float32'), [3, 7, 4]))
func_1890_call = mod.get_global_var('func_1890')
func_1893_call = mutated_mod.get_global_var('func_1893')
const_7375 = relay.const([[1,-3,-3,8,-7,10,-3,-4,-2,-1,10,-4,10,4,10,-8,-8,-9,10,-6,4,-10,-2,-4,-1,7,-6,10,3,-8,2,5,-6,2,6,5,-5,-7,-1,-3,-9,-6,1,3,-9,-8,6,2,10,10,-3,5,1,-5,6,-3,-8,10,-4,-7,3,-6,1,-10,2,-6,-6,1,5,-8,-3,6,1,-3,10,-9,-5,1,-1,-6,5,-7,5,6,3,-2,6,-8,-5,-3,-2,7,7,5,3,2,5,6,-7,-1,6,-5,-3,-9,-7,-3,-5,8,8,-2,5,8,-1,-10,-9,-9,6,7,-10,-8,-1,5,9,9,-7,10,-3,9,-5,4,-10,8,8,5,-6,-2,2,-2,-3,2,-10,-9,3,10,-9,-1,-7,4,6,3,2,6,7,9,-1,-7,3,5,-7,3,1,-4,-3,-6,-10,1,-8,-8,-9,2,-5,-10,-6,6,3,-9,5,3,-4,9,7,7,-8,-8,-1,-6,9,9,-4,1,6,10,-3,-3,9,4,3,3,6,8,-4,-8,-2,-10,-3,2,1,1,2,-5,-6,-10,10,-2,-5,-6,7,-1,2,-3,-2,-4,-8,1,1,-2,-2,-7,4,-1,-10,-7,2,3,-9,10,-5,6,-1,3,2,-10,8,9,7,-2,-6,3,6,5,-6,9,-9,-3,2,4,-1,-8,-2,-2,6,5,2,-1,5,6,-1,3,1,-4,-1,-7,-3,-1,2,5,9,10,-9,2,7,7,4,-1,5,-10,-4,-1,1,-3,7,-3,-9,8,3,5,-9,-1,-2,1,-8,4,-5,-10,-6,1,2,-10,6,10,-9,1,-7,4,-7,-5,-4,-6,5,-7,-8,4,2,-10,1,10,-4,9,-5,9,6,6,6,-10,9,-1,8,6,1,-10,5,4,3,1,4,2,5,-1,2,-1,1,-8,9,-10,-8,-5,-4,-4,-2,-7]], dtype = "uint32")#candidate|7375|(1, 360)|const|uint32
call_7374 = relay.TupleGetItem(func_1890_call(relay.reshape(const_7375.astype('uint32'), [5, 12, 6])), 1)
call_7376 = relay.TupleGetItem(func_1893_call(relay.reshape(const_7375.astype('uint32'), [5, 12, 6])), 1)
func_2835_call = mod.get_global_var('func_2835')
func_2837_call = mutated_mod.get_global_var('func_2837')
call_7383 = relay.TupleGetItem(func_2835_call(relay.reshape(var_7351.astype('float32'), [9, 10, 11])), 0)
call_7384 = relay.TupleGetItem(func_2837_call(relay.reshape(var_7351.astype('float32'), [9, 10, 11])), 0)
uop_7387 = relay.sinh(const_7354.astype('float64')) # shape=(49,)
func_7320_call = mod.get_global_var('func_7320')
func_7323_call = mutated_mod.get_global_var('func_7323')
call_7393 = relay.TupleGetItem(func_7320_call(relay.reshape(const_7354.astype('float64'), [1, 7, 7]), relay.reshape(var_7355.astype('bool'), [1350,]), ), 0)
call_7394 = relay.TupleGetItem(func_7323_call(relay.reshape(const_7354.astype('float64'), [1, 7, 7]), relay.reshape(var_7355.astype('bool'), [1350,]), ), 0)
var_7404 = relay.var("var_7404", dtype = "float32", shape = (13, 2, 10))#candidate|7404|(13, 2, 10)|var|float32
bop_7405 = relay.not_equal(uop_7344.astype('bool'), var_7404.astype('bool')) # shape=(13, 2, 10)
uop_7411 = relay.log10(uop_7387.astype('float32')) # shape=(49,)
bop_7425 = relay.bitwise_and(uop_7411.astype('int32'), uop_7344.astype('int32')) # shape=(13, 2, 49)
uop_7435 = relay.acos(bop_7425.astype('float32')) # shape=(13, 2, 49)
func_7220_call = mod.get_global_var('func_7220')
func_7224_call = mutated_mod.get_global_var('func_7224')
const_7440 = relay.const([[3,-9,6,8,7,-6,6,2,8,-7,-1,7,5,-10,-1,-2,6,3,-1,3,6,9,-1,7,9,4,-1,4,10,8,4,-6,-5,-4,9,-2,-9,7,2,-9,-8,-4,4,4,2,7,-5,-6],[-3,5,-10,-9,10,10,9,-4,4,7,-4,4,-4,1,6,-8,-2,3,1,-2,7,2,1,3,2,3,-1,-3,10,2,3,-6,-4,6,10,-6,-10,-1,2,4,3,9,4,7,-6,-9,1,-4],[4,-2,-10,9,5,-8,-5,-1,10,2,-2,8,-10,-6,4,-7,2,3,8,-1,-4,-9,3,-9,10,7,-10,7,-3,2,5,-6,-9,-10,-10,9,9,-5,8,5,5,9,8,3,10,-1,-5,5],[-5,-2,-5,-1,2,7,1,-7,6,10,-3,9,10,-2,8,-10,2,10,-4,-4,-8,-6,4,7,-3,-8,-2,2,9,-7,-1,10,1,-1,-10,1,5,-8,3,1,-4,2,5,8,-8,-1,-3,2],[-8,9,9,7,-7,3,10,-6,2,-10,2,3,6,10,-2,3,7,-7,2,-8,-8,-9,-6,5,-2,7,5,-5,1,-10,8,-2,-5,-9,4,6,-2,-10,-1,-8,-2,-9,2,-9,7,-7,-3,10],[-9,-7,-10,-3,-9,1,-10,4,-4,10,-7,1,6,-9,-7,1,9,9,2,-2,-6,2,1,-9,-9,1,6,1,9,5,10,2,-5,-9,-2,9,-5,6,-8,-1,6,4,5,5,5,2,7,3],[6,8,-4,-7,-9,6,-10,6,-10,-7,6,-1,-6,-4,-8,7,-2,1,4,-4,-3,-10,-7,8,-7,-4,-10,3,7,-1,6,-6,-2,2,-5,1,-9,10,9,3,4,8,2,2,-9,-2,-10,3],[5,10,-4,-5,-3,-8,4,8,-1,-4,8,-10,-10,3,-1,1,-2,6,-3,-10,8,7,-1,10,1,-5,-1,-9,-9,10,-7,-6,4,-6,2,1,5,-2,3,10,-5,5,4,-6,4,-3,-8,3],[-2,7,4,6,6,-6,7,4,-3,-9,-1,-9,2,10,-2,10,-2,10,6,5,-3,2,-1,3,3,10,-8,3,-3,-7,-3,-1,-5,1,8,-3,1,2,-2,-3,-8,1,1,5,6,-9,1,6],[-2,5,-4,-2,6,4,-10,4,-1,-5,8,8,-3,5,-8,10,-9,-3,-7,-8,10,2,-9,9,1,4,-7,-5,9,6,4,-9,-3,6,7,3,-5,7,-9,-4,4,2,-10,2,9,-7,4,-6],[8,6,-5,5,4,-2,10,-5,-5,6,6,-5,7,-9,-9,9,6,-5,6,9,-1,5,10,-8,7,-2,-3,9,10,3,1,-9,9,8,-3,5,1,-7,-10,-7,8,-9,6,-1,5,6,-7,-5],[-10,-10,-1,6,5,-4,-8,-9,8,-7,7,1,-1,-8,-3,-5,-7,5,-1,1,-4,-8,-3,9,8,-8,-4,-7,-7,5,1,4,-6,5,9,3,10,-8,-10,-6,4,3,4,-5,8,-2,2,6],[-6,5,-6,1,-10,1,-7,-6,1,-9,1,8,5,-8,-8,3,5,9,6,9,8,-6,7,6,-1,-4,10,-2,2,10,-2,3,-2,-1,4,-6,10,-9,-4,-6,1,-9,-2,6,9,-5,10,10],[-2,-2,-1,-1,2,7,-5,5,10,7,-3,7,8,6,-10,9,7,10,-2,8,-9,4,-5,9,10,-1,-8,8,-8,3,-1,2,4,8,3,9,-1,7,1,5,-4,6,-3,-10,-7,9,-5,-7],[-2,-2,1,6,-6,7,-1,-9,-7,8,7,10,-3,3,-1,5,-7,10,-10,-9,-1,4,-9,6,-7,-7,-4,-10,8,-5,6,-2,-6,-1,9,3,-8,-2,9,6,-4,-10,-2,7,4,8,-3,4],[-5,6,-7,-5,-7,4,7,-3,5,-3,-4,8,4,9,-8,-7,-8,-8,5,1,-2,-9,9,2,-7,-10,5,10,-3,9,2,4,-8,-6,-6,4,-6,-7,-6,6,3,-4,-5,2,-5,-9,4,8],[8,6,5,-1,4,3,-8,3,8,-4,6,-10,4,8,5,-3,-2,-6,-8,7,7,-3,-10,8,6,10,5,-2,1,10,-8,8,1,-8,-5,2,6,8,-2,5,-8,1,-8,6,-5,-5,7,-4],[1,9,8,9,5,-3,4,6,-4,9,9,3,-2,-6,4,-9,-3,-3,8,-8,-7,-1,-8,7,3,6,-1,-8,7,-4,-8,-10,-1,-4,2,3,3,-2,-10,-5,-7,9,-1,-3,-2,1,-9,-3],[-1,9,-10,-5,-6,-6,-8,-1,3,4,-8,-2,5,-10,-6,5,9,3,6,-4,6,9,10,-10,-2,7,-3,-10,-2,-3,5,-6,-9,6,8,8,-10,8,8,3,4,2,8,-8,-4,1,-8,-4],[7,-4,9,-8,8,-1,4,8,3,-9,-2,5,9,-5,-4,-4,10,7,10,10,-1,-6,-4,-7,6,2,-5,6,-3,-9,-2,2,-2,3,6,2,4,-4,-6,-9,-7,2,8,-5,9,-9,-8,-2]], dtype = "uint8")#candidate|7440|(20, 48)|const|uint8
call_7439 = relay.TupleGetItem(func_7220_call(relay.reshape(const_7440.astype('uint8'), [12, 5, 16]), relay.reshape(const_7440.astype('uint8'), [12, 5, 16]), ), 0)
call_7441 = relay.TupleGetItem(func_7224_call(relay.reshape(const_7440.astype('uint8'), [12, 5, 16]), relay.reshape(const_7440.astype('uint8'), [12, 5, 16]), ), 0)
bop_7447 = relay.greater_equal(uop_7435.astype('bool'), const_7354.astype('bool')) # shape=(13, 2, 49)
bop_7450 = relay.logical_xor(uop_7435.astype('int8'), relay.reshape(bop_7425.astype('int8'), relay.shape_of(uop_7435))) # shape=(13, 2, 49)
output = relay.Tuple([call_7350,var_7351,call_7353,var_7355,call_7366,var_7367,call_7374,const_7375,call_7383,call_7393,bop_7405,call_7439,const_7440,bop_7447,bop_7450,])
output2 = relay.Tuple([call_7352,var_7351,call_7356,var_7355,call_7368,var_7367,call_7376,const_7375,call_7384,call_7394,bop_7405,call_7441,const_7440,bop_7447,bop_7450,])
func_7462 = relay.Function([var_7343,var_7351,var_7355,var_7367,var_7404,], output)
mod['func_7462'] = func_7462
mod = relay.transform.InferType()(mod)
mutated_mod['func_7462'] = func_7462
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7462_call = mutated_mod.get_global_var('func_7462')
var_7464 = relay.var("var_7464", dtype = "float32", shape = (13, 2, 1))#candidate|7464|(13, 2, 1)|var|float32
var_7465 = relay.var("var_7465", dtype = "float32", shape = (990,))#candidate|7465|(990,)|var|float32
var_7466 = relay.var("var_7466", dtype = "bool", shape = (1350,))#candidate|7466|(1350,)|var|bool
var_7467 = relay.var("var_7467", dtype = "float32", shape = (84, 1))#candidate|7467|(84, 1)|var|float32
var_7468 = relay.var("var_7468", dtype = "float32", shape = (13, 2, 10))#candidate|7468|(13, 2, 10)|var|float32
call_7463 = func_7462_call(var_7464,var_7465,var_7466,var_7467,var_7468,)
output = call_7463
func_7469 = relay.Function([var_7464,var_7465,var_7466,var_7467,var_7468,], output)
mutated_mod['func_7469'] = func_7469
mutated_mod = relay.transform.InferType()(mutated_mod)
const_7500 = relay.const([[[3],[7],[-4],[-9],[2],[1],[4],[-10]],[[-1],[3],[9],[1],[6],[-2],[-2],[-2]],[[-6],[10],[-2],[4],[-6],[-7],[-2],[3]],[[5],[5],[-7],[1],[-8],[10],[3],[2]],[[3],[-1],[9],[-2],[-10],[-3],[5],[8]],[[-3],[-5],[-1],[-4],[9],[-6],[7],[4]],[[-10],[-6],[10],[-3],[-6],[-7],[-4],[2]],[[9],[-6],[6],[-9],[3],[7],[-5],[-2]],[[6],[3],[-8],[10],[-3],[-7],[-1],[-4]],[[6],[3],[9],[7],[9],[-6],[7],[-1]],[[-7],[-2],[-1],[1],[9],[-2],[-6],[-1]],[[6],[6],[-5],[-1],[-1],[1],[2],[2]],[[8],[-6],[-6],[6],[-4],[-4],[-5],[-5]],[[-8],[-10],[8],[-9],[6],[-6],[6],[10]]], dtype = "uint16")#candidate|7500|(14, 8, 1)|const|uint16
const_7501 = relay.const([[[5],[-1],[-1],[-9],[7],[1],[-7],[-5]],[[-3],[-6],[-1],[-6],[3],[-6],[-6],[-8]],[[-4],[-9],[-4],[-1],[4],[-3],[2],[8]],[[2],[-10],[10],[-1],[-8],[5],[3],[4]],[[-2],[2],[3],[9],[5],[10],[1],[-3]],[[-6],[9],[10],[9],[6],[-1],[-7],[6]],[[-10],[-7],[2],[-2],[-9],[2],[-2],[4]],[[-9],[2],[-2],[7],[-4],[9],[-5],[-3]],[[5],[-10],[6],[-4],[6],[-5],[-5],[4]],[[4],[1],[-8],[-6],[-7],[6],[-1],[-9]],[[-8],[5],[-2],[-9],[9],[5],[-6],[5]],[[-9],[-8],[7],[3],[-10],[-7],[7],[9]],[[-4],[-9],[5],[5],[3],[7],[-2],[-1]],[[-1],[10],[-10],[3],[2],[-1],[6],[4]]], dtype = "uint16")#candidate|7501|(14, 8, 1)|const|uint16
bop_7502 = relay.subtract(const_7500.astype('uint16'), relay.reshape(const_7501.astype('uint16'), relay.shape_of(const_7500))) # shape=(14, 8, 1)
func_6997_call = mod.get_global_var('func_6997')
func_6999_call = mutated_mod.get_global_var('func_6999')
const_7506 = relay.const([0.920312,-2.800000,-5.608142,-0.913044,-0.009711,-9.456729,5.729462,-6.512438,5.648128,6.368534,-2.268069,-1.002008,7.401552,2.512908,-7.156832,7.670708,-0.810599,5.392215,8.952256,-0.010681,-7.496829,-4.690463,-8.525843,-1.274310,7.118351,-1.733169,-1.663422,-5.085965,-5.206952,-2.448900,-8.702668,-3.007767,8.847277,5.262094,2.750716,-8.318096,-0.069325,0.590490,-9.440290,4.540515,8.507556,6.382300,-2.062231,7.198473,9.530167,2.834438,6.429119,-7.761092,4.530877,-9.622882,6.178165,1.534305,7.540489,7.721811,-9.204353,0.439386,-4.475928,7.290323,6.538041,2.690301,-7.863055,-2.792329,-8.137842,3.329558,-9.419245,7.164380,-8.432947,-9.669672,3.729238,1.947380,-1.503792,-6.601921,6.327588,8.531444,-1.772283,-8.958204,-7.131570,8.661642,0.701185,-2.140462,-3.464927,-5.059474,-9.816098,-0.396171,-2.600255,6.768702,9.744044,3.946934,5.364523,8.724935,3.705700,4.035900,-6.087613,-5.980643,5.022814,5.582408,-6.310891,-8.858667,-3.842706,4.960516,5.518726,9.616390,-2.951703,7.866928,-1.172386,6.869275,-5.446682,8.896905,4.914390,0.877561,-4.563715,-7.714206,-5.877181,-0.524359,-7.398166,8.258855,-8.845763,-7.177538,8.159044,7.097355,-5.988204,3.737504,7.529697,8.531068,-4.795779,5.273550,4.322895,-2.171979,-9.148985,2.371297,-3.661241,-0.474169,3.344578,3.370445,4.785757,-7.857708,9.607931,-7.590346,-2.368636,-9.156270,-4.285899,-5.587250,3.916464,5.423852,3.052643,-3.477287,0.960359,-5.355134,5.660896,5.959319,-7.254278,-3.648375,6.472161,-4.587315,-1.229998,9.245387,-6.054868,3.872440,-1.319227,-1.359545,2.261497,6.864266,1.312061,8.949332,0.578507,8.184778,6.279491,2.073021,4.873246,-6.041630,-4.201527,-8.331209,2.171439,0.456933,4.343741,7.910911,-4.459258,7.277324,7.452385,9.299831,-0.502010,-4.495474,-4.686384,-4.110525,-8.828890,-8.852430,-9.832850,2.492827,-2.870261,9.143174,-7.802512,-8.554208,3.927553,2.791892,-4.129396,2.654699,0.435297,-8.211536,-0.149505,5.865112,-4.758332,8.244012,7.130047,-7.959319,2.144952,9.243481,2.450391,9.290332,9.708074,8.290703,3.910605,-2.329039,-0.811877,-2.908618,-1.635878,9.760925,6.110373,0.295509,-7.573961,-1.216917,-9.530569,7.922017,6.928128,-4.049357,0.391041,8.863866,0.016295,-4.827723,-8.657912,-7.267445,-4.051079,8.615778,-6.346726,-3.686302,7.582191,5.054550,-8.667552,7.309722,8.750667,8.957313,4.324719,1.749306,-5.402485,-5.969409,-2.979361,9.332531,8.469148,9.587792,-6.898630,-5.769868,-9.410405,6.705902,-2.537098,3.935022,-2.794926,6.689908,1.450326,-6.099025,-7.132115,-2.554517,1.256917,6.794941,1.006251,4.316424,3.033657,4.077031,7.009294,-4.256506,5.085904,8.894960,-4.204343,6.613574,1.118656,-2.882801,-8.620163,-1.320212,-1.777085,-1.765930,-6.322894,1.546856,0.716112,-7.956832,0.754025,8.348131,-1.150739,1.039968,5.044520,-3.318484,-9.151212,-3.857479,2.864159,8.943097,-9.396134,3.590914,7.212873,-0.284553,0.546035,8.931878,-1.565528,4.725890,7.264738,1.323509,3.544634,3.571760,-1.147841,6.099684,-7.428241,-4.088134,-3.885162,-7.051475,-5.169285,4.991019,1.117157,6.375650,7.200466,-2.901827,2.950375,7.239256,8.958052,-8.331295,-6.082455,8.177196,-7.113444,2.986874,-9.333833,-7.470096,8.271125,-3.550818,-9.717403,-4.954745,8.925800,-6.683066,-8.377848,4.081774,-2.421977,-3.696118,8.648838,-1.641240,8.726918,1.316025,3.869774,-2.218567,9.808850,6.222845,-3.496074,9.397438,-6.213571,-2.082654,7.938454,-0.199502,-6.340786,-8.872942,-6.406109,1.118669,-2.437511,9.740960,7.086412,-3.892323,5.641821,-9.554543,0.161398,3.896668,-2.425460,2.100050,1.015600,4.755273,-1.172960,-4.928362,-7.968352,-2.545718,-3.080881,-5.771938,2.343948,-8.471147,-3.793619,2.165107,-0.923277,4.112248,-5.461876,-9.727345,-7.043604,9.969955,9.429723,-2.000020,-3.465399,-0.503614,-6.335256,-0.225308,-4.513120,-1.265540,3.838281,-5.540468,-1.763779,-8.801144,-9.015404,5.071901,2.917339,0.434932,-4.824116,-9.192038,-5.746435,4.790509,-4.918128,1.570683,-7.230649,9.316470,5.909963,2.093195,-0.338835,-9.042691,-4.146031,6.025693,0.242915,-2.379741,-5.370463,-1.038850,3.815415,-9.016463,1.948405,-6.595557,8.192788,8.481423,-2.892677,5.900039,4.893486,8.381576,5.547546,8.991636,-6.318455,-7.554908,-8.699402,0.421192,-1.629180,0.275766,1.085486,0.079963,-2.123369,6.099492,5.332568,4.083521,2.158415,-5.648939,7.677584,7.528729,9.029814,9.301876,-0.802186,7.109113,-8.867930,-5.357120,3.937408,-2.774674,-6.585436,-2.068626,-2.786097,-6.396155,-3.790756,-5.841049,-0.806436,8.128284,3.413380,-8.525741,-4.169398,-5.797215,-7.285072,-4.111246,-4.974720,3.083333,3.865924,-7.567341,9.508784,3.868823,5.752975,-0.434927,6.385526,3.263841,-7.643477,-5.343328,-9.036334,5.845660,7.130608,-9.205067,-6.438043,-7.230406,9.187815,-7.300699,-3.349564,-2.529889,7.145219,8.871655,1.511878,-6.594756,-1.258030,-1.447789,5.257719,-8.302212,7.766581,5.345850,-3.387785,7.192276,-8.804005,7.684587,6.517215,5.992989,-4.864668,5.842537,1.812614,2.781549,-3.407180,-9.162813,5.950594,-4.987277,0.682513,-4.508690,-7.372109,5.813149,2.458471,3.768489,4.730796,-8.783968,3.641966,4.477724,0.578096,4.848103,-0.644704,5.844616,-9.792708,-3.928066,7.178055,6.100692,0.991962,5.770953,9.261660,1.450297,8.080099,-0.283916,-6.511496,3.964697,-6.861557,5.356465,4.023343,-7.670574,7.588400,7.835631,-9.112200,-7.126219,-6.650962,-4.445522,-5.332926,-2.843238,1.223572,-5.528888,-1.180760,7.783139,-8.137084,4.715757,-9.907702,1.364411,-9.229125,-8.711717,-6.140168,-4.627048,-5.387308,-4.779620,9.218557,-9.952978,-7.782092,-1.534690,4.399223,3.441057,-7.648855,0.052845,6.954465,-9.755668,2.014428,-9.907242,2.187762,-8.874110,2.905271,-0.679806,8.450329,-5.877976,-3.658673,-9.817220,-9.814226,5.438069,-7.037592,8.719299], dtype = "float64")#candidate|7506|(588,)|const|float64
call_7505 = relay.TupleGetItem(func_6997_call(relay.reshape(const_7506.astype('float64'), [14, 3, 14])), 2)
call_7507 = relay.TupleGetItem(func_6999_call(relay.reshape(const_7506.astype('float64'), [14, 3, 14])), 2)
output = relay.Tuple([bop_7502,call_7505,const_7506,])
output2 = relay.Tuple([bop_7502,call_7507,const_7506,])
func_7511 = relay.Function([], output)
mod['func_7511'] = func_7511
mod = relay.transform.InferType()(mod)
mutated_mod['func_7511'] = func_7511
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7511_call = mutated_mod.get_global_var('func_7511')
call_7512 = func_7511_call()
output = call_7512
func_7513 = relay.Function([], output)
mutated_mod['func_7513'] = func_7513
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7541 = relay.var("var_7541", dtype = "float32", shape = (4, 16, 5))#candidate|7541|(4, 16, 5)|var|float32
uop_7542 = relay.tan(var_7541.astype('float32')) # shape=(4, 16, 5)
output = uop_7542
output2 = uop_7542
func_7549 = relay.Function([var_7541,], output)
mod['func_7549'] = func_7549
mod = relay.transform.InferType()(mod)
mutated_mod['func_7549'] = func_7549
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7550 = relay.var("var_7550", dtype = "float32", shape = (4, 16, 5))#candidate|7550|(4, 16, 5)|var|float32
func_7549_call = mutated_mod.get_global_var('func_7549')
call_7551 = func_7549_call(var_7550)
output = call_7551
func_7552 = relay.Function([var_7550], output)
mutated_mod['func_7552'] = func_7552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7511_call = mod.get_global_var('func_7511')
func_7513_call = mutated_mod.get_global_var('func_7513')
call_7554 = relay.TupleGetItem(func_7511_call(), 0)
call_7555 = relay.TupleGetItem(func_7513_call(), 0)
output = relay.Tuple([call_7554,])
output2 = relay.Tuple([call_7555,])
func_7556 = relay.Function([], output)
mod['func_7556'] = func_7556
mod = relay.transform.InferType()(mod)
mutated_mod['func_7556'] = func_7556
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mutated_mod.get_global_var('func_7556')
call_7557 = func_7556_call()
output = call_7557
func_7558 = relay.Function([], output)
mutated_mod['func_7558'] = func_7558
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mod.get_global_var('func_7556')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_7595 = relay.TupleGetItem(func_7556_call(), 0)
call_7596 = relay.TupleGetItem(func_7558_call(), 0)
output = relay.Tuple([call_7595,])
output2 = relay.Tuple([call_7596,])
func_7599 = relay.Function([], output)
mod['func_7599'] = func_7599
mod = relay.transform.InferType()(mod)
output = func_7599()
func_7600 = relay.Function([], output)
mutated_mod['func_7600'] = func_7600
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7511_call = mod.get_global_var('func_7511')
func_7513_call = mutated_mod.get_global_var('func_7513')
call_7610 = relay.TupleGetItem(func_7511_call(), 2)
call_7611 = relay.TupleGetItem(func_7513_call(), 2)
var_7620 = relay.var("var_7620", dtype = "float64", shape = (588,))#candidate|7620|(588,)|var|float64
bop_7621 = relay.mod(call_7610.astype('float64'), relay.reshape(var_7620.astype('float64'), relay.shape_of(call_7610))) # shape=(588,)
bop_7624 = relay.mod(call_7611.astype('float64'), relay.reshape(var_7620.astype('float64'), relay.shape_of(call_7611))) # shape=(588,)
bop_7646 = relay.multiply(call_7610.astype('int16'), relay.reshape(var_7620.astype('int16'), relay.shape_of(call_7610))) # shape=(588,)
bop_7649 = relay.multiply(call_7611.astype('int16'), relay.reshape(var_7620.astype('int16'), relay.shape_of(call_7611))) # shape=(588,)
func_1061_call = mod.get_global_var('func_1061')
func_1065_call = mutated_mod.get_global_var('func_1065')
const_7658 = relay.const(6, dtype = "uint32")#candidate|7658|()|const|uint32
var_7659 = relay.var("var_7659", dtype = "uint32", shape = (9,))#candidate|7659|(9,)|var|uint32
var_7660 = relay.var("var_7660", dtype = "float32", shape = (77, 10))#candidate|7660|(77, 10)|var|float32
call_7657 = relay.TupleGetItem(func_1061_call(relay.reshape(const_7658.astype('uint32'), []), relay.reshape(var_7659.astype('uint32'), [9, 1]), relay.reshape(var_7660.astype('float32'), [770,]), ), 0)
call_7661 = relay.TupleGetItem(func_1065_call(relay.reshape(const_7658.astype('uint32'), []), relay.reshape(var_7659.astype('uint32'), [9, 1]), relay.reshape(var_7660.astype('float32'), [770,]), ), 0)
uop_7669 = relay.rsqrt(var_7660.astype('float64')) # shape=(77, 10)
func_6082_call = mod.get_global_var('func_6082')
func_6086_call = mutated_mod.get_global_var('func_6086')
var_7680 = relay.var("var_7680", dtype = "float32", shape = (135,))#candidate|7680|(135,)|var|float32
call_7679 = func_6082_call(relay.reshape(var_7680.astype('float32'), [3, 5, 9]), relay.reshape(var_7680.astype('float32'), [3, 5, 9]), )
call_7681 = func_6082_call(relay.reshape(var_7680.astype('float32'), [3, 5, 9]), relay.reshape(var_7680.astype('float32'), [3, 5, 9]), )
output = relay.Tuple([bop_7621,bop_7646,call_7657,const_7658,var_7659,uop_7669,call_7679,var_7680,])
output2 = relay.Tuple([bop_7624,bop_7649,call_7661,const_7658,var_7659,uop_7669,call_7681,var_7680,])
func_7685 = relay.Function([var_7620,var_7659,var_7660,var_7680,], output)
mod['func_7685'] = func_7685
mod = relay.transform.InferType()(mod)
mutated_mod['func_7685'] = func_7685
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7685_call = mutated_mod.get_global_var('func_7685')
var_7687 = relay.var("var_7687", dtype = "float64", shape = (588,))#candidate|7687|(588,)|var|float64
var_7688 = relay.var("var_7688", dtype = "uint32", shape = (9,))#candidate|7688|(9,)|var|uint32
var_7689 = relay.var("var_7689", dtype = "float32", shape = (77, 10))#candidate|7689|(77, 10)|var|float32
var_7690 = relay.var("var_7690", dtype = "float32", shape = (135,))#candidate|7690|(135,)|var|float32
call_7686 = func_7685_call(var_7687,var_7688,var_7689,var_7690,)
output = call_7686
func_7691 = relay.Function([var_7687,var_7688,var_7689,var_7690,], output)
mutated_mod['func_7691'] = func_7691
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7599_call = mod.get_global_var('func_7599')
func_7600_call = mutated_mod.get_global_var('func_7600')
call_7704 = relay.TupleGetItem(func_7599_call(), 0)
call_7705 = relay.TupleGetItem(func_7600_call(), 0)
uop_7706 = relay.sinh(call_7704.astype('float64')) # shape=(14, 8, 1)
uop_7708 = relay.sinh(call_7705.astype('float64')) # shape=(14, 8, 1)
output = uop_7706
output2 = uop_7708
func_7715 = relay.Function([], output)
mod['func_7715'] = func_7715
mod = relay.transform.InferType()(mod)
output = func_7715()
func_7716 = relay.Function([], output)
mutated_mod['func_7716'] = func_7716
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7715_call = mod.get_global_var('func_7715')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_7719 = func_7715_call()
call_7720 = func_7715_call()
func_2378_call = mod.get_global_var('func_2378')
func_2381_call = mutated_mod.get_global_var('func_2381')
const_7726 = relay.const([4,-1,-5,10,8,5,-5,-6,-7,3,1,-6,5,-4,-6,10,-8,-3,-2,10,-6,-5,8,-8,-4,1,-8,-10,10,-3,2,6,-6,2,-2,7,-9,-3,-6,4,-3,5,-1,-6,10,7,5,-3,2,9,10,-6,-10,8,1,6,-6,-5,8,9,-3,10,-10,8,-8,10,3,-9,-4,-9,-8,8,7,-10,-7,3,-7,-9,-7,1,-4,-5,8,7,10,6,2,9,-9,4,-10,-7,1,-6,-3,-8,-9,-3,7,-8,8,5,9,-7,5,-6,8,5,-1,2,7,2,-2,-2,5,-8,-3,-10,6,-1,-9,-9,-2,8,5,-9,7,8,-4,-10,2,1,10,-8,-7,1,-7,4,-5,3,2,4,-3,1,-5,-6,9,-2,7,7,-10,3,-9,7,9,5,3,-3,4,-4,4,-5,7,4,-9,1,7,7,1,9,-5,1,6,2,7,10,-8,-6,4,3,1,1,8,-4,-1,8,1,-3,1,-6,3,-2,3,-8,-10,-8,-4,10,6,-10,-9,4,8,-5,-3,9,-9,9,-3,-8,-7,-5,-5,3,-7,10,-3,-3,2,-2,-3,2,-4,-5,-7,1,7,-5,8,-6,4,10,10,10,5,8,-5,-1,9,-9,9,10,-3,-10,4,-6,2,8,3,-6,2,-6,2,9,5,8,5,4,5,-8,2,7,-4,-7,-3,-5,5,-3,1,10,9,2,8,-3,-9,-1,-7,-4,3,7,-4,-2,-4,-8,8,-10,6,10,-7,-8,-4,-9,9,-3,7,-10,-2,10,9,10,-5,-4,-2,6,7,-8,-5,5,2,-6,-8,10,1,8,7,9,6,-5,-8,-8], dtype = "int8")#candidate|7726|(320,)|const|int8
call_7725 = func_2378_call(relay.reshape(const_7726.astype('int8'), [10, 2, 16]), relay.reshape(const_7726.astype('int8'), [10, 2, 16]), )
call_7727 = func_2378_call(relay.reshape(const_7726.astype('int8'), [10, 2, 16]), relay.reshape(const_7726.astype('int8'), [10, 2, 16]), )
output = relay.Tuple([call_7719,call_7725,const_7726,])
output2 = relay.Tuple([call_7720,call_7727,const_7726,])
func_7736 = relay.Function([], output)
mod['func_7736'] = func_7736
mod = relay.transform.InferType()(mod)
mutated_mod['func_7736'] = func_7736
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7736_call = mutated_mod.get_global_var('func_7736')
call_7737 = func_7736_call()
output = call_7737
func_7738 = relay.Function([], output)
mutated_mod['func_7738'] = func_7738
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7511_call = mod.get_global_var('func_7511')
func_7513_call = mutated_mod.get_global_var('func_7513')
call_7756 = relay.TupleGetItem(func_7511_call(), 1)
call_7757 = relay.TupleGetItem(func_7513_call(), 1)
func_2378_call = mod.get_global_var('func_2378')
func_2381_call = mutated_mod.get_global_var('func_2381')
var_7766 = relay.var("var_7766", dtype = "int8", shape = (40, 8))#candidate|7766|(40, 8)|var|int8
call_7765 = func_2378_call(relay.reshape(var_7766.astype('int8'), [10, 2, 16]), relay.reshape(var_7766.astype('int8'), [10, 2, 16]), )
call_7767 = func_2378_call(relay.reshape(var_7766.astype('int8'), [10, 2, 16]), relay.reshape(var_7766.astype('int8'), [10, 2, 16]), )
output = relay.Tuple([call_7756,call_7765,var_7766,])
output2 = relay.Tuple([call_7757,call_7767,var_7766,])
func_7768 = relay.Function([var_7766,], output)
mod['func_7768'] = func_7768
mod = relay.transform.InferType()(mod)
var_7769 = relay.var("var_7769", dtype = "int8", shape = (40, 8))#candidate|7769|(40, 8)|var|int8
output = func_7768(var_7769)
func_7770 = relay.Function([var_7769], output)
mutated_mod['func_7770'] = func_7770
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mod.get_global_var('func_7556')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_7778 = relay.TupleGetItem(func_7556_call(), 0)
call_7779 = relay.TupleGetItem(func_7558_call(), 0)
uop_7788 = relay.atan(call_7778.astype('float32')) # shape=(14, 8, 1)
uop_7790 = relay.atan(call_7779.astype('float32')) # shape=(14, 8, 1)
func_2378_call = mod.get_global_var('func_2378')
func_2381_call = mutated_mod.get_global_var('func_2381')
var_7808 = relay.var("var_7808", dtype = "int8", shape = (320,))#candidate|7808|(320,)|var|int8
call_7807 = func_2378_call(relay.reshape(var_7808.astype('int8'), [10, 2, 16]), relay.reshape(var_7808.astype('int8'), [10, 2, 16]), )
call_7809 = func_2378_call(relay.reshape(var_7808.astype('int8'), [10, 2, 16]), relay.reshape(var_7808.astype('int8'), [10, 2, 16]), )
func_7220_call = mod.get_global_var('func_7220')
func_7224_call = mutated_mod.get_global_var('func_7224')
var_7814 = relay.var("var_7814", dtype = "uint8", shape = (240, 4))#candidate|7814|(240, 4)|var|uint8
call_7813 = relay.TupleGetItem(func_7220_call(relay.reshape(var_7814.astype('uint8'), [12, 5, 16]), relay.reshape(var_7814.astype('uint8'), [12, 5, 16]), ), 0)
call_7815 = relay.TupleGetItem(func_7224_call(relay.reshape(var_7814.astype('uint8'), [12, 5, 16]), relay.reshape(var_7814.astype('uint8'), [12, 5, 16]), ), 0)
uop_7816 = relay.cos(call_7778.astype('float64')) # shape=(14, 8, 1)
uop_7818 = relay.cos(call_7779.astype('float64')) # shape=(14, 8, 1)
output = relay.Tuple([uop_7788,call_7807,var_7808,call_7813,var_7814,uop_7816,])
output2 = relay.Tuple([uop_7790,call_7809,var_7808,call_7815,var_7814,uop_7818,])
func_7821 = relay.Function([var_7808,var_7814,], output)
mod['func_7821'] = func_7821
mod = relay.transform.InferType()(mod)
mutated_mod['func_7821'] = func_7821
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7821_call = mutated_mod.get_global_var('func_7821')
var_7823 = relay.var("var_7823", dtype = "int8", shape = (320,))#candidate|7823|(320,)|var|int8
var_7824 = relay.var("var_7824", dtype = "uint8", shape = (240, 4))#candidate|7824|(240, 4)|var|uint8
call_7822 = func_7821_call(var_7823,var_7824,)
output = call_7822
func_7825 = relay.Function([var_7823,var_7824,], output)
mutated_mod['func_7825'] = func_7825
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7736_call = mod.get_global_var('func_7736')
func_7738_call = mutated_mod.get_global_var('func_7738')
call_7834 = relay.TupleGetItem(func_7736_call(), 1)
call_7835 = relay.TupleGetItem(func_7738_call(), 1)
func_1061_call = mod.get_global_var('func_1061')
func_1065_call = mutated_mod.get_global_var('func_1065')
var_7857 = relay.var("var_7857", dtype = "uint32", shape = ())#candidate|7857|()|var|uint32
var_7858 = relay.var("var_7858", dtype = "uint32", shape = (9,))#candidate|7858|(9,)|var|uint32
var_7859 = relay.var("var_7859", dtype = "float32", shape = (770,))#candidate|7859|(770,)|var|float32
call_7856 = relay.TupleGetItem(func_1061_call(relay.reshape(var_7857.astype('uint32'), []), relay.reshape(var_7858.astype('uint32'), [9, 1]), relay.reshape(var_7859.astype('float32'), [770,]), ), 2)
call_7860 = relay.TupleGetItem(func_1065_call(relay.reshape(var_7857.astype('uint32'), []), relay.reshape(var_7858.astype('uint32'), [9, 1]), relay.reshape(var_7859.astype('float32'), [770,]), ), 2)
output = relay.Tuple([call_7834,call_7856,var_7857,var_7858,var_7859,])
output2 = relay.Tuple([call_7835,call_7860,var_7857,var_7858,var_7859,])
func_7873 = relay.Function([var_7857,var_7858,var_7859,], output)
mod['func_7873'] = func_7873
mod = relay.transform.InferType()(mod)
var_7874 = relay.var("var_7874", dtype = "uint32", shape = ())#candidate|7874|()|var|uint32
var_7875 = relay.var("var_7875", dtype = "uint32", shape = (9,))#candidate|7875|(9,)|var|uint32
var_7876 = relay.var("var_7876", dtype = "float32", shape = (770,))#candidate|7876|(770,)|var|float32
output = func_7873(var_7874,var_7875,var_7876,)
func_7877 = relay.Function([var_7874,var_7875,var_7876,], output)
mutated_mod['func_7877'] = func_7877
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7511_call = mod.get_global_var('func_7511')
func_7513_call = mutated_mod.get_global_var('func_7513')
call_7954 = relay.TupleGetItem(func_7511_call(), 2)
call_7955 = relay.TupleGetItem(func_7513_call(), 2)
output = relay.Tuple([call_7954,])
output2 = relay.Tuple([call_7955,])
func_7970 = relay.Function([], output)
mod['func_7970'] = func_7970
mod = relay.transform.InferType()(mod)
output = func_7970()
func_7971 = relay.Function([], output)
mutated_mod['func_7971'] = func_7971
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7970_call = mod.get_global_var('func_7970')
func_7971_call = mutated_mod.get_global_var('func_7971')
call_8000 = relay.TupleGetItem(func_7970_call(), 0)
call_8001 = relay.TupleGetItem(func_7971_call(), 0)
func_6997_call = mod.get_global_var('func_6997')
func_6999_call = mutated_mod.get_global_var('func_6999')
call_8004 = relay.TupleGetItem(func_6997_call(relay.reshape(call_8000.astype('float64'), [14, 3, 14])), 1)
call_8005 = relay.TupleGetItem(func_6999_call(relay.reshape(call_8000.astype('float64'), [14, 3, 14])), 1)
output = relay.Tuple([call_8000,call_8004,])
output2 = relay.Tuple([call_8001,call_8005,])
func_8040 = relay.Function([], output)
mod['func_8040'] = func_8040
mod = relay.transform.InferType()(mod)
output = func_8040()
func_8041 = relay.Function([], output)
mutated_mod['func_8041'] = func_8041
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8040_call = mod.get_global_var('func_8040')
func_8041_call = mutated_mod.get_global_var('func_8041')
call_8053 = relay.TupleGetItem(func_8040_call(), 1)
call_8054 = relay.TupleGetItem(func_8041_call(), 1)
output = relay.Tuple([call_8053,])
output2 = relay.Tuple([call_8054,])
func_8055 = relay.Function([], output)
mod['func_8055'] = func_8055
mod = relay.transform.InferType()(mod)
output = func_8055()
func_8056 = relay.Function([], output)
mutated_mod['func_8056'] = func_8056
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mod.get_global_var('func_7556')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_8110 = relay.TupleGetItem(func_7556_call(), 0)
call_8111 = relay.TupleGetItem(func_7558_call(), 0)
func_6404_call = mod.get_global_var('func_6404')
func_6408_call = mutated_mod.get_global_var('func_6408')
const_8113 = relay.const([-10,6,10,-7,-6,-7,-10,-5,3,3,-3,-8,10,9,-2,6,-3,9,8,-4,-2,5,-9,1,10,-6,2,-7,-7,-8,9,3,6,-7,-10,9,3,-6,-6,6,10,-8,5,-7,-6,-3,8,-8,6,1,6,9,-5,6,1,7,4,-6,-5,-1,-7,-5,-8,1,6,-3,-1,-6,7,-10,-3,-2,6,-6,-10,-1,1,3,-7,-7,-8,9,-1,8,6,8,8,-6,7,-5,-1,5,-2,-3,-5,-4,-9,2,8,9,9,3,9,-4,-3,3,-7,6,-9,10], dtype = "int8")#candidate|8113|(110,)|const|int8
call_8112 = func_6404_call(relay.reshape(const_8113.astype('int8'), [2, 5, 11]), relay.reshape(const_8113.astype('int8'), [2, 5, 11]), )
call_8114 = func_6404_call(relay.reshape(const_8113.astype('int8'), [2, 5, 11]), relay.reshape(const_8113.astype('int8'), [2, 5, 11]), )
output = relay.Tuple([call_8110,call_8112,const_8113,])
output2 = relay.Tuple([call_8111,call_8114,const_8113,])
func_8123 = relay.Function([], output)
mod['func_8123'] = func_8123
mod = relay.transform.InferType()(mod)
mutated_mod['func_8123'] = func_8123
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8123_call = mutated_mod.get_global_var('func_8123')
call_8124 = func_8123_call()
output = call_8124
func_8125 = relay.Function([], output)
mutated_mod['func_8125'] = func_8125
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8040_call = mod.get_global_var('func_8040')
func_8041_call = mutated_mod.get_global_var('func_8041')
call_8156 = relay.TupleGetItem(func_8040_call(), 1)
call_8157 = relay.TupleGetItem(func_8041_call(), 1)
func_4176_call = mod.get_global_var('func_4176')
func_4179_call = mutated_mod.get_global_var('func_4179')
var_8172 = relay.var("var_8172", dtype = "float64", shape = (1470,))#candidate|8172|(1470,)|var|float64
call_8171 = relay.TupleGetItem(func_4176_call(relay.reshape(var_8172.astype('float64'), [14, 15, 7]), relay.reshape(var_8172.astype('float64'), [14, 15, 7]), ), 0)
call_8173 = relay.TupleGetItem(func_4179_call(relay.reshape(var_8172.astype('float64'), [14, 15, 7]), relay.reshape(var_8172.astype('float64'), [14, 15, 7]), ), 0)
output = relay.Tuple([call_8156,call_8171,var_8172,])
output2 = relay.Tuple([call_8157,call_8173,var_8172,])
func_8176 = relay.Function([var_8172,], output)
mod['func_8176'] = func_8176
mod = relay.transform.InferType()(mod)
mutated_mod['func_8176'] = func_8176
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8177 = relay.var("var_8177", dtype = "float64", shape = (1470,))#candidate|8177|(1470,)|var|float64
func_8176_call = mutated_mod.get_global_var('func_8176')
call_8178 = func_8176_call(var_8177)
output = call_8178
func_8179 = relay.Function([var_8177], output)
mutated_mod['func_8179'] = func_8179
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mod.get_global_var('func_7556')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_8186 = relay.TupleGetItem(func_7556_call(), 0)
call_8187 = relay.TupleGetItem(func_7558_call(), 0)
func_7970_call = mod.get_global_var('func_7970')
func_7971_call = mutated_mod.get_global_var('func_7971')
call_8215 = relay.TupleGetItem(func_7970_call(), 0)
call_8216 = relay.TupleGetItem(func_7971_call(), 0)
func_3591_call = mod.get_global_var('func_3591')
func_3593_call = mutated_mod.get_global_var('func_3593')
const_8223 = relay.const([5.966446,5.958764,-4.578488,-7.910751,-9.067692,-6.769579,-1.398348,-5.854259,2.261251,-9.909809,1.124244,-5.379861,8.357863,-3.383657,-2.830006,7.075296,-8.966592,0.841223,-9.480760,5.863498,6.051633,1.254421,7.761409,3.689080,-3.752393,-0.435805,3.648160,0.134529,7.831522,4.051728,2.315274,0.158747,6.335183,-1.447628,5.933511,-4.389935,6.012076,-7.174028,-7.170592,1.536196,3.854879,-0.005110,0.475754,2.756718,1.078218,-1.664892,2.919804,3.388017,-8.181820,-8.031729,0.748189,-2.653774,1.617939,9.160349,-1.461864,-1.522055,-4.961117,-9.455229,-2.834501,-4.548132,-5.377372,-0.563496,8.813920,-3.987191,0.653816,1.613415,-0.193685,3.503627,-7.758240,6.438902,-0.479855,7.478405,-0.532385,-3.597772,6.311530,7.597104,8.134103,-8.654744,7.924718,-4.821633,1.261475,0.879158,2.888452,2.154761,2.399464,-3.121264,-1.101425,3.198791], dtype = "float32")#candidate|8223|(88,)|const|float32
call_8222 = relay.TupleGetItem(func_3591_call(relay.reshape(const_8223.astype('float32'), [8, 11, 1])), 1)
call_8224 = relay.TupleGetItem(func_3593_call(relay.reshape(const_8223.astype('float32'), [8, 11, 1])), 1)
output = relay.Tuple([call_8186,call_8215,call_8222,const_8223,])
output2 = relay.Tuple([call_8187,call_8216,call_8224,const_8223,])
func_8226 = relay.Function([], output)
mod['func_8226'] = func_8226
mod = relay.transform.InferType()(mod)
output = func_8226()
func_8227 = relay.Function([], output)
mutated_mod['func_8227'] = func_8227
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8055_call = mod.get_global_var('func_8055')
func_8056_call = mutated_mod.get_global_var('func_8056')
call_8332 = relay.TupleGetItem(func_8055_call(), 0)
call_8333 = relay.TupleGetItem(func_8056_call(), 0)
var_8336 = relay.var("var_8336", dtype = "bool", shape = (15, 6, 15))#candidate|8336|(15, 6, 15)|var|bool
bop_8337 = relay.bitwise_and(call_8332.astype('uint64'), relay.reshape(var_8336.astype('uint64'), relay.shape_of(call_8332))) # shape=(15, 6, 15)
bop_8340 = relay.bitwise_and(call_8333.astype('uint64'), relay.reshape(var_8336.astype('uint64'), relay.shape_of(call_8333))) # shape=(15, 6, 15)
uop_8342 = relay.sin(bop_8337.astype('float64')) # shape=(15, 6, 15)
uop_8344 = relay.sin(bop_8340.astype('float64')) # shape=(15, 6, 15)
func_8176_call = mod.get_global_var('func_8176')
func_8179_call = mutated_mod.get_global_var('func_8179')
const_8348 = relay.const([[5.335145,6.223761,-0.326566,8.990366,-2.427572,8.344308,-7.006018,-0.661171,-5.553418,6.710806,-4.573323,-8.345397,2.761253,1.536547,0.930574,-0.416470,-1.723002,6.257383,-5.262648,8.604926,-7.662988,2.886113,3.386751,8.136185,0.748638,0.352473,6.644944,0.066885,-8.325880,6.155342,2.353277,-2.828073,8.941295,-5.400796,4.944995,9.801051,-8.423803,-2.355080,-0.545675,2.714228,1.804450,5.976532,0.631337,1.767777,6.457012,2.565999,-6.556851,7.143764,-4.029762,2.376978,9.577454,6.013415,-9.624389,9.702216,5.200317,-5.359444,4.290870,1.041743,2.453411,-6.036799,8.844419,7.695990,-7.444844,-1.138898,6.640774,-1.314120,-5.167123,-2.800485,5.013198,8.744641,1.127346,1.203840,0.253472,0.614618,7.731948,-0.980113,7.357923,-5.319788,-3.223222,-8.316314,1.029991,-9.902438,-3.568215,-6.589336,-3.399185,-2.218226,3.555104,-6.158084,4.555323,0.761098,-4.776834,5.558871,-1.071683,5.178048,-5.855968,-6.266363,-0.297754,3.411272,0.532760,-9.742403,6.422840,0.181552,0.424841,-3.510199,5.752196],[9.306010,6.331120,-8.326067,8.387355,-1.696233,0.317830,4.440930,0.766366,3.924290,-4.104760,-1.513492,-3.236237,-1.457304,5.408972,-9.174330,5.653773,-6.363142,4.530925,-3.458539,-5.193441,-1.525623,1.692600,2.694365,1.692518,5.483098,4.789792,5.858315,-6.720533,1.101992,-9.589485,-8.243542,1.126549,-1.647412,6.368042,8.124953,3.210423,-5.002820,2.299136,0.973202,-6.901638,-4.815879,-5.503559,7.815442,-9.931879,2.596621,9.109242,-7.430552,-2.040634,3.394216,3.368488,-1.130570,-3.639603,1.049565,-1.840511,-1.585024,1.880205,-0.921378,0.316223,-9.672649,-8.471702,-4.617044,-5.954404,2.914750,-6.648074,-7.602615,1.303763,-3.820803,2.891015,-9.671561,7.179882,-1.739699,0.822376,-2.548386,9.191619,-9.538643,-7.257167,4.240836,0.226854,-7.314729,9.091013,3.131019,9.876077,-5.846200,2.005967,-4.565699,-7.164401,-6.837989,-6.514038,-3.461728,9.608180,2.564318,3.638249,-0.022227,2.489919,-2.009582,-2.668115,-2.938477,-1.135320,-6.132098,9.157386,-2.549345,-8.103657,5.076230,0.063979,-8.008074],[8.785441,4.727577,-0.753542,5.322405,-2.755783,-1.305205,-7.386858,-4.013946,1.293275,-4.138367,0.735711,-6.377184,7.120944,-5.386486,5.147700,-8.986604,9.852456,-8.780505,6.161520,3.591868,4.655390,-0.693735,-3.675722,-6.462812,-9.215480,-9.729360,1.541911,1.877941,1.048775,-8.889814,-4.020184,0.524801,-3.793717,8.499958,8.661592,3.097349,-1.517786,-9.486476,-1.057313,-6.398634,-4.509897,-1.521001,-1.075802,-4.082004,-8.219344,-3.164887,6.445866,-3.150047,4.283358,-6.340200,-4.672551,-0.456794,2.892973,-0.906550,9.022609,-9.580800,4.279021,-8.624484,-7.751113,2.564271,0.520133,6.025188,3.280345,-1.738060,2.344496,-0.226986,-6.390638,-7.600948,2.965684,3.148531,-9.815239,-1.654022,-0.414513,1.685664,-7.549798,8.893519,-1.840739,-7.986440,-4.645938,7.915012,0.932407,-6.350739,-7.205618,-1.477723,9.149384,-4.141856,2.731905,2.079237,4.146908,2.559367,-7.232581,0.412757,7.626371,-7.143196,-3.000427,-7.946145,7.756326,9.664635,6.621645,-7.439385,6.921185,-3.772159,7.560218,5.982851,-4.038386],[-5.622432,4.360264,-5.202817,-5.425507,4.757003,-1.411375,-6.544478,-0.008218,2.022661,5.381322,-3.778073,-6.786033,-1.651244,-5.208270,7.704065,-3.232863,8.736886,2.672055,-9.953662,4.983003,2.038545,6.801797,2.463257,2.660367,-7.321611,-1.415558,-8.034192,2.625757,2.897685,-6.714123,7.505708,-8.346863,-6.465792,-7.089055,1.886235,-2.124507,8.826984,3.092676,4.600541,1.950156,7.551760,-4.310125,-8.722011,-9.702031,-4.086852,-5.007557,7.943050,-2.075346,3.728908,7.665244,-6.760949,2.409284,5.189190,4.612903,3.215319,-2.630490,-8.450832,-1.761082,4.573278,-1.525232,2.009617,4.499850,-4.458825,2.507253,-2.881803,-4.904636,-3.296724,-5.042656,-3.006293,7.443736,-1.849638,3.806362,-6.210154,4.499660,-8.831972,1.151101,4.714570,5.983042,3.889548,0.700045,9.892085,-8.849060,3.922599,9.136612,-5.571266,7.981375,8.373401,-6.049655,5.344938,2.344251,0.774671,9.910165,7.910193,-8.263457,0.351427,-5.833662,-9.905301,7.377260,4.040127,4.883133,0.511944,-0.227477,8.721636,-4.275388,-8.034978],[5.795078,4.991918,-3.350850,0.410233,6.622571,-4.857512,2.357849,-1.315313,-2.309722,4.443649,-3.751841,8.688296,1.126924,6.249856,4.813787,7.218445,6.813037,4.278733,5.972646,5.448440,-8.749845,-7.490721,-6.449120,-5.378685,-6.366754,-1.313667,-6.240484,1.729374,3.145709,6.825824,2.756290,0.069058,8.897772,-8.431242,1.172952,0.180368,-9.315329,4.442391,5.290623,0.982543,5.616160,-0.231396,2.097338,-4.009704,-7.789684,4.840281,-4.110836,-4.585590,-8.878946,4.908883,-4.556602,5.161597,-2.474794,2.614406,-7.992748,-6.751775,7.757856,4.774869,-2.028879,1.692245,0.164582,-0.346505,8.171862,-9.134845,-7.779248,8.615140,-3.333799,2.375414,7.536910,-9.132166,7.569516,0.716637,0.974757,-5.414673,-6.922478,-6.927807,-7.235804,-7.749766,-6.702782,7.643669,-4.198478,1.138060,7.143913,9.384256,-2.700409,-2.430861,-9.500328,-1.209575,-2.129005,-2.497817,-1.480487,4.105919,3.571973,-4.341033,-1.363174,-4.956217,-3.595249,1.103344,-2.950757,-1.557682,5.282459,6.320205,-9.794448,7.797891,-3.454326],[-4.108964,7.563088,7.727318,5.751742,-0.607496,-1.459112,-1.796369,-2.415411,-0.391085,-9.323380,1.643635,-3.197422,-8.882667,-6.357640,4.057336,8.475488,5.731206,1.867583,6.563643,-8.964515,-3.230090,6.790003,5.041740,3.641596,-6.999788,-3.601093,2.025639,-9.063516,-0.314208,1.357665,4.568167,2.028076,7.755595,-3.297807,7.298553,-8.058288,8.587459,-7.671748,-3.746637,-8.521807,4.409329,-4.844137,1.818538,-6.262316,-6.307324,-9.961721,-7.928815,-2.251484,-9.002090,7.445583,-6.011327,-5.255831,4.145521,-5.044257,-5.256110,-1.342415,-9.946053,-1.309018,-0.295061,6.198572,-1.338321,-1.971027,7.423090,4.614481,2.475897,7.381727,-2.465432,4.221692,-9.555614,3.183503,4.133804,-7.089360,8.724150,4.401992,-1.156547,-9.844788,-8.825874,1.025435,8.515798,-3.624138,6.158356,-7.912922,7.863514,3.641444,-2.356312,-4.651784,5.495789,4.326891,4.584650,-3.032574,0.271431,-0.196053,5.159772,5.559421,-2.947560,-8.847744,3.528400,-7.084397,-1.331070,-7.181378,-7.679966,-0.342299,4.556604,-8.271912,7.761018],[-4.417327,1.521950,-9.231934,5.012112,-0.190855,3.845383,5.076557,8.078929,4.115941,-7.163732,-0.180457,-9.227238,-0.911073,-4.160441,-8.286821,0.771739,-1.549841,-3.097893,3.613783,-8.304898,2.317219,-2.228296,-7.875259,-2.863079,-5.159416,2.148943,-7.070207,0.617799,-4.731201,4.539350,1.846392,8.976198,-1.657299,2.217106,9.698005,7.369441,4.717961,-5.594494,3.719268,-7.560420,8.545861,7.520713,9.128386,-1.541884,-4.744732,4.593765,-4.237942,-1.104516,-9.209386,-6.280415,1.140466,-6.593061,-8.901708,0.123586,-9.018770,4.584172,5.100331,6.370560,8.206619,-9.923999,7.737451,-3.114469,9.897548,-9.019747,-0.502686,3.978586,-6.779477,-4.860145,-4.696181,7.419905,8.296541,-8.964924,1.774848,-9.261823,0.970817,-5.209800,-8.703740,-7.400373,6.503208,5.485146,-5.060302,-8.597320,-2.769978,7.853163,-7.829243,9.135939,5.269800,-6.196158,2.745042,5.643374,-1.051420,-9.305658,-8.346490,-4.806025,0.607842,0.307439,-0.857263,5.399106,1.606249,-1.640001,0.481287,8.879659,1.806236,7.391486,-6.058770],[-0.313664,-7.482335,9.266964,2.503422,0.444079,6.328386,-8.421568,-1.117868,1.763398,-0.802280,8.409493,5.202998,-6.180689,-3.924144,-4.469463,7.399280,9.336259,3.376027,-2.937738,-7.741072,3.722521,3.493805,-7.253942,9.193275,1.371424,6.649590,7.322983,6.893301,7.686182,3.055809,2.758371,-1.103015,2.593376,5.968726,5.913815,8.883450,-4.161183,-6.285759,-3.329331,-6.451519,-4.874530,-5.504337,-2.880841,2.532302,1.898301,9.870386,5.047031,-9.297921,5.962466,1.419290,0.525934,-1.327639,1.190810,-4.099789,-1.528657,2.780369,-5.357348,3.147279,0.082486,7.487692,0.770143,8.852729,-1.016395,2.129872,-9.000937,-6.338833,2.258295,2.879008,-8.649673,-7.941871,-4.371993,4.977537,5.926790,8.322100,7.605196,-2.653271,-9.309120,-7.350347,3.077450,-5.850347,-1.542467,2.861279,2.908765,-7.295622,1.735581,1.376786,-2.982923,-1.769169,2.502600,-3.802647,-8.426804,7.045840,6.273477,-1.810482,-3.658588,-9.783472,0.750354,-5.270144,-3.588733,-0.235554,-1.985260,3.248870,-9.580287,-1.445645,3.573388],[5.983338,8.391622,-8.684488,-1.980281,5.622910,-6.724121,5.342430,-0.586937,-4.493575,-0.293331,-7.428741,-1.827407,6.154846,7.502069,-6.354207,-1.072794,2.639541,7.199475,-4.706353,-8.759143,-9.613411,4.228537,-7.672971,9.220221,-9.881292,-1.935530,-8.002732,-3.620148,5.459977,-9.068538,4.670467,7.356292,-5.208269,-5.958759,-7.710247,9.450771,5.385032,-0.207452,-2.261477,7.939870,6.806105,1.152647,-7.096050,8.395808,1.766101,-5.024190,5.459471,4.967229,-1.634613,-9.863479,-4.474715,4.103451,8.969380,-1.804586,9.126312,-4.770228,8.381169,5.012493,-2.732473,5.204083,-5.654310,-8.922134,-8.506414,9.536205,9.626098,8.343144,5.857930,-2.109131,2.139842,-1.502672,-3.257405,5.092313,-4.004592,0.257093,-2.486955,0.107546,-7.229525,-7.678432,0.869261,9.035074,1.398388,4.423699,0.814285,2.835741,-7.804858,-5.849130,9.542479,-5.898989,-1.052430,-8.264370,-7.718165,5.731910,2.658040,7.381140,0.693580,4.782280,-4.776739,-7.618940,-7.257391,-3.069452,1.581456,0.203901,-9.604542,9.357912,-8.798921],[8.972722,0.707505,1.657388,-7.111223,0.490136,-6.278080,6.169251,1.850345,-3.457283,4.565468,-4.433540,0.626490,8.040331,0.403199,-0.703614,-7.713998,0.059147,-4.772134,-4.607809,7.120591,3.588901,5.681287,-4.742610,-7.333702,-3.968784,0.740055,-6.024691,3.139495,6.693361,-5.857170,-1.493847,5.474769,-7.296747,-0.494022,1.000994,4.089015,4.083081,1.502625,7.777659,9.275131,9.333303,9.581722,0.727870,-6.909795,1.498166,0.667809,6.353299,6.485221,-8.958847,4.975205,-0.708071,-8.457361,3.860814,3.404137,1.122556,-1.654151,-3.005338,9.614291,-1.160287,-5.192469,-8.258869,0.604030,-2.393917,-2.695971,5.445094,-5.650825,-2.590405,1.211347,-0.772677,-4.992362,5.286932,6.280037,-3.000698,-0.073687,-8.438833,4.256659,-6.293893,-0.963453,2.767348,4.165511,-7.815192,-1.670197,4.994664,-2.942801,2.563529,7.504345,-9.117339,-9.981832,0.179543,5.319653,4.921424,2.511443,-7.259821,-4.877582,-9.581989,-2.944583,-1.188789,7.773459,-0.547961,3.127412,-3.182029,8.845495,3.046586,-4.103821,-4.402117],[-7.630700,-3.379438,7.653352,-6.833846,-3.873003,3.154404,5.815156,-9.021501,6.078609,6.266729,-6.956019,-0.020280,-0.275797,2.823732,-5.222252,-3.950833,6.362104,-0.987121,2.143995,-5.260069,8.569106,-8.127008,0.797056,9.982138,-8.852545,-3.521766,9.837668,-6.729087,-4.665995,-8.673745,4.543004,-4.032283,5.683779,9.110255,2.370193,-8.322087,6.561901,2.821138,8.315339,-4.301564,4.610241,-4.653529,0.580481,-9.045244,-5.668112,-0.047123,-7.962269,-8.741622,-1.093230,-9.563017,-1.985795,-3.627899,-1.216957,-5.154808,2.637390,1.430439,4.795383,3.876971,-9.817599,1.459429,-8.370497,-3.930049,-9.853088,-6.989077,-6.572072,-0.714021,8.436267,-9.457997,-7.161819,-2.760042,6.504419,1.327339,8.018137,2.086634,-0.492728,8.842157,6.177496,7.517317,-4.780268,-7.745162,2.173157,7.074290,2.256101,-8.181733,9.018375,3.543606,-5.994404,4.274871,4.944819,1.838423,1.415092,-5.442593,-4.460447,-7.470029,1.712524,9.282527,9.890232,-5.528823,-4.082226,8.086338,1.429002,8.196908,5.632798,0.667942,6.401949],[-4.747425,1.313699,8.109551,0.483856,0.459903,-8.251748,8.680853,0.575563,6.687721,-6.933664,5.813118,5.569823,8.916002,-8.610140,-1.498472,4.824816,-4.585196,5.227210,-8.895987,-7.701949,-1.882816,-7.153975,-0.054589,8.167818,8.135963,-9.079356,1.054174,4.146901,-4.632096,9.948851,-5.012456,-2.199342,-5.184742,-0.971033,-3.024395,-4.974363,-9.616504,-9.221179,-7.601588,-6.472264,8.884036,0.246589,-5.898959,0.309686,-5.523055,2.291753,6.274442,3.347810,-4.371780,-6.493846,-0.859927,7.764200,3.881324,-7.354130,3.090571,6.885924,8.287602,1.267854,-0.410311,9.564142,7.228374,1.249742,-9.028518,-8.063152,-6.629518,9.105195,1.467460,3.164579,-2.434478,3.243727,-6.505452,-8.343631,0.027686,-4.030630,-4.268703,-7.105586,-8.297831,-7.771699,-0.543204,6.121303,5.380485,-5.541918,1.230854,4.256383,0.065422,3.029975,5.244224,5.751508,8.788456,-5.839722,0.827055,-8.629726,-6.837698,-1.989682,5.473378,-2.324277,-3.020881,-6.096676,-9.221858,8.303157,-1.717939,-0.318523,-3.068960,-0.947768,1.144089],[9.099354,6.291220,-8.487526,-7.823134,-8.336738,2.309682,-2.701813,0.745162,5.947320,-2.925912,1.763839,-0.624838,4.372495,-2.093950,-5.892598,-2.649508,-6.259672,6.557669,-7.875938,-0.268009,-5.786210,4.728843,8.628048,1.179794,-3.624662,-5.563630,-9.360827,0.121577,5.034581,5.298922,5.809547,-2.396666,3.106493,6.679883,3.090223,-2.005014,4.988038,6.166299,1.695911,0.009869,-5.936818,7.652497,-1.534466,-0.438540,-5.691250,-5.352296,-4.741460,-8.438261,-2.798783,6.696170,1.372325,9.472785,3.624393,1.266905,8.056757,-5.116067,-0.072978,-2.130503,9.962560,4.302627,-8.569595,6.442518,-6.951749,-9.790514,4.516175,-3.518690,-9.941018,1.088519,-8.586911,-3.543895,-0.082535,-2.666128,-5.641189,7.110526,5.400298,-3.452145,-9.019693,-0.781391,0.176493,-8.074941,-7.259959,6.198039,-6.395919,-3.682870,9.569589,7.191082,-3.884847,8.232830,-9.276660,-9.032563,3.642743,-1.278055,-7.482739,-4.913535,4.659473,6.203927,6.218671,-6.527853,6.801475,7.561875,7.490264,-9.608873,-6.487927,5.312769,7.122186],[-0.396196,-0.005251,-3.437885,-1.655319,-3.740668,8.402531,4.217849,-0.501667,2.333671,5.686976,-9.446566,7.926388,-4.439342,-3.612925,-0.356162,7.907805,-8.293269,9.535028,-5.715751,5.723570,-7.175438,-3.511334,-2.156505,5.658931,6.006704,-7.635429,-3.709828,-5.681026,8.775655,-5.744862,-2.500442,-8.446315,1.013746,-9.259909,5.275616,-2.027006,-5.832760,-0.309876,7.071222,-2.831588,-2.521457,-6.088417,-8.964358,7.003311,-1.992190,-0.574431,3.790488,2.177203,-2.461390,-2.469069,-9.053988,2.750880,-6.625567,2.699441,-7.391944,-2.196641,-7.526815,3.331270,6.763470,-2.557516,-7.711849,2.923041,5.457391,-0.295867,-7.595095,-5.183499,7.025714,5.214063,6.615196,2.476833,0.952117,-3.527250,-0.923726,-3.855775,-1.070396,0.031619,3.278194,-9.312714,-0.579631,1.870042,9.913185,5.396392,5.835777,-6.379633,5.896585,-7.851013,3.200581,-8.218437,-5.102214,-6.103142,2.492175,7.761810,-8.787255,2.714803,-4.026704,1.590874,-5.426110,-2.641404,7.247068,-7.801693,-5.534739,2.499169,4.610074,-7.507042,6.152227]], dtype = "float64")#candidate|8348|(14, 105)|const|float64
call_8347 = relay.TupleGetItem(func_8176_call(relay.reshape(const_8348.astype('float64'), [1470,])), 0)
call_8349 = relay.TupleGetItem(func_8179_call(relay.reshape(const_8348.astype('float64'), [1470,])), 0)
output = relay.Tuple([uop_8342,call_8347,const_8348,])
output2 = relay.Tuple([uop_8344,call_8349,const_8348,])
func_8352 = relay.Function([var_8336,], output)
mod['func_8352'] = func_8352
mod = relay.transform.InferType()(mod)
mutated_mod['func_8352'] = func_8352
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8353 = relay.var("var_8353", dtype = "bool", shape = (15, 6, 15))#candidate|8353|(15, 6, 15)|var|bool
func_8352_call = mutated_mod.get_global_var('func_8352')
call_8354 = func_8352_call(var_8353)
output = call_8354
func_8355 = relay.Function([var_8353], output)
mutated_mod['func_8355'] = func_8355
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mod.get_global_var('func_7556')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_8396 = relay.TupleGetItem(func_7556_call(), 0)
call_8397 = relay.TupleGetItem(func_7558_call(), 0)
output = relay.Tuple([call_8396,])
output2 = relay.Tuple([call_8397,])
func_8402 = relay.Function([], output)
mod['func_8402'] = func_8402
mod = relay.transform.InferType()(mod)
output = func_8402()
func_8403 = relay.Function([], output)
mutated_mod['func_8403'] = func_8403
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8040_call = mod.get_global_var('func_8040')
func_8041_call = mutated_mod.get_global_var('func_8041')
call_8446 = relay.TupleGetItem(func_8040_call(), 0)
call_8447 = relay.TupleGetItem(func_8041_call(), 0)
func_6131_call = mod.get_global_var('func_6131')
func_6135_call = mutated_mod.get_global_var('func_6135')
var_8451 = relay.var("var_8451", dtype = "bool", shape = ())#candidate|8451|()|var|bool
const_8452 = relay.const([[True,True],[False,False],[False,True],[False,True],[False,True],[False,False],[False,False],[True,False],[False,False],[True,False],[True,False],[True,True],[True,True],[False,False],[False,True],[False,True],[False,True],[True,False],[False,False],[False,True],[True,False],[True,True],[False,False],[True,True],[False,True],[True,False],[True,False],[True,False],[True,True],[False,True],[False,True],[True,True],[False,False],[True,False],[False,True],[True,True],[True,False],[False,False],[False,False],[True,True],[True,False],[True,False],[False,False],[True,True],[True,True],[True,True],[False,False],[False,False],[False,False],[True,True],[True,False],[False,True],[True,True],[True,True],[True,False],[False,False],[False,True],[False,False],[True,True],[True,False],[True,False],[False,True],[False,False],[False,True],[False,True],[False,False],[True,False],[True,False],[True,False],[False,False],[False,False],[False,False],[False,True],[False,True],[False,True],[False,True],[False,False],[True,False],[False,True],[True,True],[False,True],[True,True],[False,False],[False,True],[False,False],[False,False],[False,False],[False,False],[True,False],[False,False],[True,False],[True,True],[False,False],[False,False],[True,True],[True,True],[True,False],[True,True],[False,True],[False,False],[True,False],[False,True],[True,False],[False,False],[False,False],[False,False],[False,False],[True,False],[False,True],[False,False],[True,False],[True,False],[False,False],[True,True],[True,True],[True,False],[False,False],[False,True],[False,False],[True,True],[False,False],[True,False],[False,False],[False,False],[False,False],[False,True],[False,False],[True,True],[False,False],[False,False],[True,True],[False,True],[True,False],[False,False],[False,False],[True,False],[False,False],[False,False],[False,False],[False,False],[True,True],[True,True],[True,False],[False,True],[False,False],[True,False],[False,False],[True,True],[False,False],[True,True],[False,False],[True,False],[False,False],[False,True],[False,False],[True,True],[True,True],[True,False],[True,True],[False,False],[False,True],[False,False],[True,True],[True,False],[True,True],[True,True],[True,False],[True,False],[False,True],[True,True],[False,False],[False,True],[True,True],[False,True],[True,False],[True,True],[True,True],[True,True],[False,False],[True,False],[True,False],[True,True],[False,True],[True,True],[False,False],[False,False],[False,False],[False,False],[False,False],[True,True],[False,False],[False,True],[True,True],[False,True],[True,True],[True,True],[True,True],[False,False],[False,True],[True,False],[True,True],[True,True],[True,True],[True,True],[True,False],[False,True],[False,False],[False,True],[True,True],[True,True],[False,False],[False,False],[True,False],[False,True],[True,True],[False,False],[False,True],[True,True],[False,True],[True,True],[True,True],[False,False],[False,False],[True,True],[True,False],[False,False],[True,False],[False,False],[False,False],[False,True],[True,False],[True,True],[True,True],[False,True],[False,True],[False,True],[True,False],[True,True],[False,True],[False,False],[True,True],[False,False],[True,False],[True,False],[False,True],[True,True],[True,True],[False,False],[False,False],[True,False],[False,True],[True,True],[True,True],[False,True],[False,False],[True,True],[True,True],[False,True],[True,True],[True,True],[False,False],[False,True],[True,False],[True,True],[True,False],[True,True],[True,True],[False,False],[False,False],[True,False],[False,True],[True,False],[False,True],[True,False],[False,False],[True,False],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[False,False],[True,False],[False,True],[False,True],[False,True],[True,False],[True,False],[False,True],[False,False],[False,False],[False,True],[False,False],[False,False],[False,False],[True,False],[False,True],[True,True],[True,True],[False,True],[False,False],[False,True],[True,True],[True,True],[True,True],[True,True],[False,True],[False,False],[False,False],[False,False],[True,True],[False,True],[False,True],[False,True],[True,True],[False,True],[True,True],[True,False],[False,False],[False,True],[False,True],[False,False],[True,True],[False,True],[True,True],[True,False],[False,True],[True,True],[True,False],[False,False],[True,True],[True,False],[False,False],[True,False],[True,True],[False,True],[False,False],[True,True],[True,True],[False,True],[False,True],[True,True],[True,True],[False,False],[True,False],[False,False],[True,True],[False,True],[False,True],[False,True],[False,False],[False,True],[False,True],[False,False],[False,True],[True,True],[False,False],[False,True],[True,False],[True,False],[False,True],[False,False],[True,True],[True,True],[False,True],[False,True],[True,False],[False,False],[True,False],[False,True],[True,True],[False,False],[True,False],[True,True],[False,True],[True,True],[False,False],[True,True],[True,False],[False,True],[False,False],[False,True],[False,False],[True,True],[True,True],[True,False],[False,True],[False,False],[False,False],[True,False],[True,False],[True,True],[False,False],[True,True],[True,True],[True,True],[False,True],[False,False],[False,False],[False,True],[True,True],[True,False],[False,False],[False,False],[False,True],[True,True],[True,False],[False,False],[True,True],[True,False],[True,False],[True,True],[False,True],[True,False],[True,True],[True,True],[False,False],[True,True],[False,True],[True,False],[False,False],[True,True],[True,False],[True,False],[True,True],[False,False],[True,True],[True,True],[False,True],[True,False],[False,False],[True,True],[True,False],[False,True],[True,True],[False,True],[False,True],[False,True],[True,False],[True,True],[True,True],[True,False],[False,True],[False,False],[False,True],[False,False],[False,True],[True,True],[True,True],[False,False],[True,False],[True,True],[False,False],[False,True],[False,True],[False,True],[False,False],[True,False],[True,True],[False,True],[True,True],[True,True],[False,True],[False,False],[False,False],[False,True],[True,False],[False,True],[False,False],[False,False],[True,True],[True,True],[True,False],[True,False],[False,False],[True,True],[True,False],[False,True],[True,False],[True,False],[False,False],[True,True],[False,False],[False,False],[False,True],[False,False],[False,True],[True,True],[True,True],[True,True],[True,False],[False,False],[False,False],[True,False],[False,True],[False,True],[True,True],[False,True],[True,True],[True,False],[False,True],[False,False],[False,True],[True,True],[False,False],[True,True],[False,True],[True,False],[False,True],[False,False],[False,False],[True,True],[False,False],[False,True],[True,True],[True,True],[False,True],[True,False],[True,False],[True,True],[False,False],[True,False],[False,False],[False,False],[True,True],[False,True],[True,False],[False,True],[False,False],[True,True],[True,False],[False,True],[False,True],[True,True],[True,True],[False,True],[True,True],[True,True],[False,True],[True,True],[False,False],[True,False],[False,True],[True,False],[False,False],[True,True],[True,True],[True,True],[False,False],[False,True],[True,False],[False,True],[False,True],[False,False],[False,False],[True,True],[False,False],[True,False],[False,False],[False,False],[True,True],[True,False],[False,False],[True,False],[True,True],[True,False],[True,True],[True,True],[False,False],[True,False],[False,True],[True,False],[True,False],[False,True],[True,False],[True,False],[True,True],[False,True],[True,True],[True,False],[False,False],[True,True],[True,False],[True,True],[False,False],[True,False],[True,True],[False,True],[True,False],[False,False],[False,False],[False,True],[True,False],[False,False],[True,True],[True,True],[True,False],[True,False],[False,False],[True,True],[False,True],[True,False],[False,False],[True,True],[False,True],[False,True],[True,False],[False,False],[True,True],[True,False],[False,False],[False,False],[False,True],[False,False],[True,False],[True,True],[True,True],[True,True],[True,False],[False,True],[False,False],[False,True],[True,True],[False,False],[False,True],[False,False],[True,False],[False,True],[True,True],[True,False],[True,True],[False,False],[False,True],[True,True],[False,True],[False,False],[False,True],[True,True],[False,True],[True,False],[False,True],[False,True],[False,True],[False,True],[False,False],[False,True],[True,False],[True,True],[True,False],[False,True],[True,False],[True,True],[True,True],[False,True],[False,True],[True,True],[True,False],[False,True],[True,True],[False,True],[True,False],[False,False],[False,True],[True,False],[True,True],[True,False],[True,True],[False,True],[False,False],[False,False],[False,False],[True,True],[False,False],[False,True]], dtype = "bool")#candidate|8452|(675, 2)|const|bool
call_8450 = func_6131_call(relay.reshape(var_8451.astype('bool'), []), relay.reshape(const_8452.astype('bool'), [15, 6, 15]), )
call_8453 = func_6131_call(relay.reshape(var_8451.astype('bool'), []), relay.reshape(const_8452.astype('bool'), [15, 6, 15]), )
func_5135_call = mod.get_global_var('func_5135')
func_5138_call = mutated_mod.get_global_var('func_5138')
var_8456 = relay.var("var_8456", dtype = "float64", shape = (240,))#candidate|8456|(240,)|var|float64
var_8457 = relay.var("var_8457", dtype = "float32", shape = (84,))#candidate|8457|(84,)|var|float32
call_8455 = relay.TupleGetItem(func_5135_call(relay.reshape(var_8456.astype('float64'), [6, 10, 4]), relay.reshape(var_8457.astype('float32'), [84,]), ), 0)
call_8458 = relay.TupleGetItem(func_5138_call(relay.reshape(var_8456.astype('float64'), [6, 10, 4]), relay.reshape(var_8457.astype('float32'), [84,]), ), 0)
func_7685_call = mod.get_global_var('func_7685')
func_7691_call = mutated_mod.get_global_var('func_7691')
const_8461 = relay.const([[-7,6,-7],[9,-9,7],[-2,-3,-2]], dtype = "uint32")#candidate|8461|(3, 3)|const|uint32
const_8462 = relay.const([-1.941569,1.619049,-1.725372,-9.074636,-0.199672,-8.373749,9.766040,3.023672,-3.288488,-7.336893,-3.404743,6.212165,5.800586,0.753618,1.095568,2.014750,-4.468591,4.010237,5.606456,-3.761179,-1.355937,5.427694,-8.774191,4.960136,1.295151,-9.309166,-0.889534,-1.400578,1.164759,-2.133489,-0.344970,-0.388497,-1.112820,-4.416568,9.640024,2.909567,6.276249,1.653427,5.799962,9.183109,-8.224294,-6.455218,0.289930,-7.974940,-5.783194,3.489889,-4.278659,6.357811,7.732414,-5.771767,-8.669504,-8.960744,8.113132,7.919292,-8.322985,8.818459,-7.825829,9.310311,-9.579379,-6.337083,-2.848235,7.694435,6.159167,3.058608,-9.799278,-8.118783,0.425862,0.570959,-4.291617,-2.955646,4.180968,-8.972326,0.591259,9.752950,8.169602,9.807362,3.909452,6.749486,2.348016,5.236754,-1.347590,0.677407,-9.031370,-6.616141,7.429676,8.448866,-1.540568,7.562579,5.770476,5.956208,-7.342272,-3.974960,-0.724655,4.473422,-8.788171,8.863082,-7.412785,-3.111426,8.965104,6.892890,8.793853,1.285259,-6.833488,-1.038225,6.373724,9.423138,-4.909648,3.312047,6.369676,-7.459334,2.369027,-7.052758,-9.465939,-7.558427,-2.875324,1.962317,-0.133297,0.893279,3.279694,-9.834451,-8.691966,-1.763488,1.580894,3.723096,-3.485717,-6.525193,5.840397,5.261418,-2.768134,-3.540434,-3.905434,-5.901098,-4.004577,7.586148,4.111853,4.493382,6.197324,-7.748684,9.431879,8.932672,-4.122911,-6.204377,3.702190,2.766190,8.596854,-0.083716,2.831013,2.539887,-3.445313,2.261631,-8.609686,9.053208,5.309241,7.992604,6.640739,-8.932946,-9.413728,-7.828997,0.268881,4.306466,8.590887,-5.167585,1.947110,-9.142833,-1.217849,4.876313,-3.858008,6.027857,6.653453,6.493006,1.173383,-0.854857,-8.964564,0.198217,-6.595159,-8.480514,-8.165577,0.384826,-2.289548,-4.751168,6.524820,-7.763939,-6.144372,4.383020,-9.086057,7.717058,8.204386,6.433978,-6.943906,6.938736,-6.384071,-5.684353,-6.917361,-8.993279,3.333800,1.009649,-4.199546,1.318114,2.092777,-8.667645,3.870453,-1.956174,8.683770,-7.006059,-1.991493,5.205984,1.857306,-5.882395,9.945405,6.074445,3.581429,7.727907,-4.186075,-1.298054,-0.316426,3.453075,-9.339835,-1.237529,8.171351,6.242722,-0.155308,-1.639718,-7.032145,9.066874,0.444088,7.884649,3.114176,2.365096,5.362018,-0.476481,-7.340138,5.605558,6.168018,3.300471,-7.264589,-1.117066,0.416165,-0.748152,3.779850,2.768146,-7.191098,3.296969,4.790473,2.425311,5.392722,-8.397564,0.517537,-1.997013,7.312688,-6.524235,4.837925,-9.227190,1.275921,-3.129237,-0.411094,-7.104921,-7.165183,1.051255,-1.922596,-2.461335,-2.297113,4.134379,-9.879400,-2.613555,6.777008,4.801127,4.675763,6.392055,7.956909,-8.186184,7.353194,-5.339645,-2.214676,-8.742760,0.861303,-0.887991,0.884032,2.850962,-5.669079,-9.853064,-0.362929,-9.078074,7.601458,8.284922,3.149430,8.084418,-9.040346,5.983410,5.576547,7.818510,-5.553815,-8.412097,2.369228,-0.903053,0.837421,-1.143375,-8.837402,3.087760,-6.355529,-0.092447,-0.238440,9.732333,-9.249578,-2.076732,-6.711581,-9.615916,0.765065,-3.058527,-1.413737,-8.385629,5.062718,-7.339254,8.007477,-5.265106,-5.833813,-9.430477,-0.495918,8.136797,-6.477151,-7.430083,6.023098,6.445885,0.116219,3.790020,-5.999064,3.215731,-5.925697,-9.544164,5.065093,-0.262373,7.937559,1.996999,-0.124136,-6.903006,-3.552568,0.905985,5.405903,-4.725608,-0.421221,0.960239,-1.917299,2.532682,-8.391533,-0.376755,-1.703382,7.323221,7.040332,4.775387,0.140461,-0.402279,-1.051503,1.248027,3.333182,-0.213637,5.763728,-0.839144,-7.771345,1.035695,4.802387,-8.750658,-3.879075,-5.408423,-5.548813,1.031869,5.114590,9.509717,7.014097,-8.863833,7.646683,-1.113609,-5.040376,-2.080318,-8.960986,9.824379,7.768021,3.353271,6.840656,-7.811313,8.567026,2.291774,2.803516,-2.831004,7.614759,9.930949,1.765933,9.491037,1.704576,-5.126521,2.885154,9.166913,-5.760971,-1.144649,-9.164335,3.508760,-2.358468,5.927232,-5.423566,-2.806722,-3.840416,-3.360006,-9.649174,6.743098,8.860612,8.058469,4.524739,8.115486,-8.837124,3.794475,-5.778259,-2.402202,7.644571,5.726712,-5.510114,5.131071,8.222454,-7.578818,9.082858,6.801883,-5.542969,-3.533463,-9.647589,6.267971,2.382058,1.296527,3.252929,4.213094,9.806704,-2.754894,-5.422739,-2.196279,7.546151,6.903273,-5.017217,2.064275,-6.891919,-2.332634,-9.467985,8.339640,-6.993005,2.058970,-3.277919,-6.423559,9.410111,1.944730,-8.295377,-1.065408,8.884582,2.131197,-5.617599,-7.409055,-2.445279,4.785903,-6.599869,-0.846900,-5.436117,-0.429785,-0.683965,-1.941676,-4.795583,-3.128873,-0.513054,-0.610684,-6.703913,8.529501,9.245559,7.633566,1.301513,-1.365595,2.596804,-2.439196,-6.205666,8.036482,-6.019455,5.922062,0.806765,4.623222,-6.422096,1.711454,1.448914,6.271899,-2.977582,-5.494833,-4.651626,9.024034,-1.118498,1.513904,1.497093,2.331880,-0.104231,-7.601109,-1.631878,1.717179,0.730334,-4.755050,-9.288613,3.863882,-1.281727,-4.428830,-1.244376,0.218715,9.896724,-4.543027,1.246413,-5.396447,-6.610244,1.552500,3.398774,1.272956,-9.919495,7.518944,2.989433,2.109964,8.189307,-6.861340,-7.448521,-2.880532,-0.716263,-0.253737,-6.692160,-1.368256,8.207215,-5.079361,-3.299831,1.208095,7.290827,7.191898,-9.267496,-6.198282,-7.796728,5.237790,-7.648965,0.887193,-6.144670,-1.523501,-0.962969,0.666417,9.180235,-2.051399,6.567286,-6.680891,3.638991,-4.567685,-2.673671,2.723916,3.868622,3.684291,-6.940603,7.115720,-2.920583,2.732385,-3.323325,-4.249595,-6.938936,7.644611,6.714760,-2.316410,-0.122793,-9.772141,-8.534338,4.308642,-7.765770,0.720096,1.206313,-3.364485,1.868440,7.311963,-5.405987,1.092387,-5.977383,6.022747,-9.129105,-3.825160,-6.419515,4.048893,-9.794473,-2.464965,-0.672707,1.619389,-2.301540,1.536218,-4.729535,2.509098,6.094576,6.586641,-9.512038,2.835230,1.881976,9.078490,-7.706605,-9.987541,8.523933,3.267365,-4.780882,-5.030278,-6.088428,-9.637631,-0.539070,-4.708016,-7.172078,6.260903,-2.251612,9.420055,4.670828,0.265137,-9.173645,-2.214579,-9.689559,9.097792,8.162192,-5.370370,1.916650,-1.173814,-5.756466,6.673701,-5.598945,2.375507,8.361723,-9.004641,2.263393,-4.054636,8.225554,-7.081848,5.948732,9.932471,5.457676,-1.460579,-0.090433,-2.047101,6.906239,-4.002999,-0.155124,-5.779142,-9.679152,-9.588063,-6.272622,9.359149,-7.413100,-8.710358,7.323436,-8.353695,4.001316,-2.431837,5.479380,-7.945948,-9.405268,-8.613625,3.935671,7.940186,-7.238871,0.538215,-2.070221,-3.824794,-1.447108,-6.331168,-4.106791,-3.504951,-7.454379,-2.954021,3.961979,-1.257703,4.014899,1.439587,-6.548824,-3.047136,-1.564368,9.028318,2.078590,4.758699,-9.525513,1.773610,-7.373522,-2.053199,-9.350010,-3.034622,-6.979670,-9.391541,-7.329641,-3.239026,-9.540272,0.377154,-8.425818,8.749592,-0.250983,-9.271003,7.790348,-5.223057,5.735948,-0.712174,8.124143,-3.233303,3.787643,8.275078,-5.422436,-5.519093,-4.845132,0.687374,5.533463,-0.754442,-4.207221,-4.427910,6.471707,9.783556,-3.035486,-5.731080,5.986743,4.748228,3.750306,-9.342913,-5.665184,-8.819843,-1.580688,0.257377,6.858453,0.647299,-0.335932,8.348331,-9.687397,5.060628,-6.283359,-9.031306,-8.619129,-5.238572,-3.845788,8.169878,-5.280327,-7.596053,8.871127,-9.225910,1.405097,-1.583424,2.986310,7.673452,5.763865,-3.989283,9.351937,7.051349,-7.109908,4.058102,-8.503371,9.597727,8.556799,1.964910,-0.483553,8.923970,5.647549,4.578968,0.780069,5.359358,6.005389,-8.329671,-9.111675,-1.921643,6.708920,-5.571506,-7.360220,-8.611445,1.642837,1.489797,5.947949,8.102866,-0.055461,-4.996745,-0.525670,-2.797541,8.858687,-8.731663,-3.865780,7.505009,-2.521277,4.248393], dtype = "float32")#candidate|8462|(770,)|const|float32
const_8463 = relay.const([[-4.133056,-6.925482,-3.867344,0.842980,-0.414563,-0.791633,5.909353,0.872242,6.797076,0.422235,-2.568698,-5.597663,-3.725898,0.042523,-5.153393,-5.748608,-9.671242,8.922025,-8.544509,3.548932,-2.051709,7.975434,3.356781,5.725008,4.363462,8.990251,-5.837329,6.891362,-7.945942,-6.295841,-4.774647,3.715125,7.309706,5.318483,3.472796,6.801165,-6.890721,-4.633857,2.280994,-6.974181,-8.182804,-1.188433,-9.827907,0.175908,7.143187],[2.799771,5.762589,-1.664287,7.176026,-5.784909,-9.105835,-9.785135,-0.930896,-6.575342,-7.888220,-0.588515,5.051527,-5.626979,0.632044,-9.718887,7.636007,-1.039823,-5.820145,7.919402,-9.655803,5.171974,8.828159,4.675578,-6.748642,-0.563865,-5.886050,8.017722,0.757959,2.244887,5.518715,9.335022,-0.060705,0.466773,-5.903246,-2.422911,-2.959247,8.320055,-9.047721,-3.265493,1.825560,2.086144,3.065386,6.905509,-9.586872,5.110431],[-9.848851,-7.095472,-5.886545,2.649413,7.605634,1.574082,9.399346,3.094605,8.944452,-2.632640,-7.999924,2.092550,-2.561417,7.345504,9.982348,9.800205,1.482911,-4.854567,5.890469,9.221648,-6.869064,4.018101,7.351488,2.506935,-0.471660,6.243542,1.607636,-6.394913,7.582309,8.305359,2.365133,-0.299592,-3.862181,-2.902573,3.259040,-4.504789,7.693443,1.165776,4.279209,4.511711,5.525654,-8.725315,0.698357,-1.997011,-8.324653]], dtype = "float32")#candidate|8463|(3, 45)|const|float32
call_8460 = relay.TupleGetItem(func_7685_call(relay.reshape(call_8446.astype('float64'), [588,]), relay.reshape(const_8461.astype('uint32'), [9,]), relay.reshape(const_8462.astype('float32'), [77, 10]), relay.reshape(const_8463.astype('float32'), [135,]), ), 2)
call_8464 = relay.TupleGetItem(func_7691_call(relay.reshape(call_8446.astype('float64'), [588,]), relay.reshape(const_8461.astype('uint32'), [9,]), relay.reshape(const_8462.astype('float32'), [77, 10]), relay.reshape(const_8463.astype('float32'), [135,]), ), 2)
output = relay.Tuple([call_8446,call_8450,var_8451,const_8452,call_8455,var_8456,var_8457,call_8460,const_8461,const_8462,const_8463,])
output2 = relay.Tuple([call_8447,call_8453,var_8451,const_8452,call_8458,var_8456,var_8457,call_8464,const_8461,const_8462,const_8463,])
func_8469 = relay.Function([var_8451,var_8456,var_8457,], output)
mod['func_8469'] = func_8469
mod = relay.transform.InferType()(mod)
mutated_mod['func_8469'] = func_8469
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8469_call = mutated_mod.get_global_var('func_8469')
var_8471 = relay.var("var_8471", dtype = "bool", shape = ())#candidate|8471|()|var|bool
var_8472 = relay.var("var_8472", dtype = "float64", shape = (240,))#candidate|8472|(240,)|var|float64
var_8473 = relay.var("var_8473", dtype = "float32", shape = (84,))#candidate|8473|(84,)|var|float32
call_8470 = func_8469_call(var_8471,var_8472,var_8473,)
output = call_8470
func_8474 = relay.Function([var_8471,var_8472,var_8473,], output)
mutated_mod['func_8474'] = func_8474
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8534 = relay.var("var_8534", dtype = "float32", shape = (11, 7, 4))#candidate|8534|(11, 7, 4)|var|float32
uop_8535 = relay.tan(var_8534.astype('float32')) # shape=(11, 7, 4)
output = uop_8535
output2 = uop_8535
func_8538 = relay.Function([var_8534,], output)
mod['func_8538'] = func_8538
mod = relay.transform.InferType()(mod)
var_8539 = relay.var("var_8539", dtype = "float32", shape = (11, 7, 4))#candidate|8539|(11, 7, 4)|var|float32
output = func_8538(var_8539)
func_8540 = relay.Function([var_8539], output)
mutated_mod['func_8540'] = func_8540
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7511_call = mod.get_global_var('func_7511')
func_7513_call = mutated_mod.get_global_var('func_7513')
call_8542 = relay.TupleGetItem(func_7511_call(), 1)
call_8543 = relay.TupleGetItem(func_7513_call(), 1)
var_8544 = relay.var("var_8544", dtype = "bool", shape = (7, 2, 16))#candidate|8544|(7, 2, 16)|var|bool
bop_8545 = relay.add(call_8542.astype('float64'), var_8544.astype('float64')) # shape=(7, 2, 16)
bop_8548 = relay.add(call_8543.astype('float64'), var_8544.astype('float64')) # shape=(7, 2, 16)
uop_8550 = relay.atanh(var_8544.astype('float64')) # shape=(7, 2, 16)
func_7736_call = mod.get_global_var('func_7736')
func_7738_call = mutated_mod.get_global_var('func_7738')
call_8554 = relay.TupleGetItem(func_7736_call(), 0)
call_8555 = relay.TupleGetItem(func_7738_call(), 0)
output = relay.Tuple([bop_8545,uop_8550,call_8554,])
output2 = relay.Tuple([bop_8548,uop_8550,call_8555,])
func_8581 = relay.Function([var_8544,], output)
mod['func_8581'] = func_8581
mod = relay.transform.InferType()(mod)
var_8582 = relay.var("var_8582", dtype = "bool", shape = (7, 2, 16))#candidate|8582|(7, 2, 16)|var|bool
output = func_8581(var_8582)
func_8583 = relay.Function([var_8582], output)
mutated_mod['func_8583'] = func_8583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8226_call = mod.get_global_var('func_8226')
func_8227_call = mutated_mod.get_global_var('func_8227')
call_8595 = relay.TupleGetItem(func_8226_call(), 0)
call_8596 = relay.TupleGetItem(func_8227_call(), 0)
func_8581_call = mod.get_global_var('func_8581')
func_8583_call = mutated_mod.get_global_var('func_8583')
var_8601 = relay.var("var_8601", dtype = "bool", shape = (224,))#candidate|8601|(224,)|var|bool
call_8600 = relay.TupleGetItem(func_8581_call(relay.reshape(var_8601.astype('bool'), [7, 2, 16])), 1)
call_8602 = relay.TupleGetItem(func_8583_call(relay.reshape(var_8601.astype('bool'), [7, 2, 16])), 1)
func_7873_call = mod.get_global_var('func_7873')
func_7877_call = mutated_mod.get_global_var('func_7877')
const_8613 = relay.const(3, dtype = "uint32")#candidate|8613|()|const|uint32
const_8614 = relay.const([-8,-5,-8,8,-9,4,-5,-9,-6], dtype = "uint32")#candidate|8614|(9,)|const|uint32
var_8615 = relay.var("var_8615", dtype = "float32", shape = (7, 110))#candidate|8615|(7, 110)|var|float32
call_8612 = relay.TupleGetItem(func_7873_call(relay.reshape(const_8613.astype('uint32'), []), relay.reshape(const_8614.astype('uint32'), [9,]), relay.reshape(var_8615.astype('float32'), [770,]), ), 3)
call_8616 = relay.TupleGetItem(func_7877_call(relay.reshape(const_8613.astype('uint32'), []), relay.reshape(const_8614.astype('uint32'), [9,]), relay.reshape(var_8615.astype('float32'), [770,]), ), 3)
const_8623 = relay.constdtype = "float64")#candidate|8623|(7, 2, 16)|const|float64
bop_8624 = relay.not_equal(call_8600.astype('bool'), relay.reshape(const_8623.astype('bool'), relay.shape_of(call_8600))) # shape=(7, 2, 16)
bop_8627 = relay.not_equal(call_8602.astype('bool'), relay.reshape(const_8623.astype('bool'), relay.shape_of(call_8602))) # shape=(7, 2, 16)
output = relay.Tuple([call_8595,var_8601,call_8612,const_8613,const_8614,var_8615,bop_8624,])
output2 = relay.Tuple([call_8596,var_8601,call_8616,const_8613,const_8614,var_8615,bop_8627,])
func_8630 = relay.Function([var_8601,var_8615,], output)
mod['func_8630'] = func_8630
mod = relay.transform.InferType()(mod)
mutated_mod['func_8630'] = func_8630
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8630_call = mutated_mod.get_global_var('func_8630')
var_8632 = relay.var("var_8632", dtype = "bool", shape = (224,))#candidate|8632|(224,)|var|bool
var_8633 = relay.var("var_8633", dtype = "float32", shape = (7, 110))#candidate|8633|(7, 110)|var|float32
call_8631 = func_8630_call(var_8632,var_8633,)
output = call_8631
func_8634 = relay.Function([var_8632,var_8633,], output)
mutated_mod['func_8634'] = func_8634
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8123_call = mod.get_global_var('func_8123')
func_8125_call = mutated_mod.get_global_var('func_8125')
call_8645 = relay.TupleGetItem(func_8123_call(), 1)
call_8646 = relay.TupleGetItem(func_8125_call(), 1)
output = call_8645
output2 = call_8646
func_8653 = relay.Function([], output)
mod['func_8653'] = func_8653
mod = relay.transform.InferType()(mod)
mutated_mod['func_8653'] = func_8653
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8653_call = mutated_mod.get_global_var('func_8653')
call_8654 = func_8653_call()
output = call_8654
func_8655 = relay.Function([], output)
mutated_mod['func_8655'] = func_8655
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7556_call = mod.get_global_var('func_7556')
func_7558_call = mutated_mod.get_global_var('func_7558')
call_8662 = relay.TupleGetItem(func_7556_call(), 0)
call_8663 = relay.TupleGetItem(func_7558_call(), 0)
const_8664 = relay.const([[[7,6,8,-1,-6,-5,-2,5,-8,-10,4,-2,-8],[-1,3,3,-3,-5,4,-7,-10,7,5,-2,9,-5],[-9,5,5,6,-4,-9,-8,10,-2,-2,-1,6,1],[10,1,-2,-2,8,2,7,-3,-5,-1,-2,-1,-9],[5,8,-5,-7,-6,9,-5,5,-2,-5,9,5,6],[6,4,-2,3,7,10,6,-3,4,-1,7,-3,8],[6,-3,1,-2,5,5,7,5,6,-5,-4,6,10],[-1,-10,5,4,-8,7,1,-5,-7,-8,10,-4,10]],[[-6,5,4,6,-7,-7,7,6,-5,-6,-3,3,-7],[-3,9,-1,2,10,-4,-7,7,9,-9,-8,2,-7],[8,4,4,-6,-3,-10,5,-10,-6,7,2,5,-1],[-8,-8,-7,6,2,1,4,7,10,6,10,-10,3],[-2,-5,-5,5,-9,-2,4,-4,-3,10,4,3,-9],[-2,-7,10,3,-2,10,2,2,4,-7,2,9,-4],[-1,5,-8,-10,9,-8,-7,3,-10,7,-8,-9,-9],[8,2,-3,7,-4,2,-3,5,-7,2,2,-4,5]],[[9,-8,-2,6,-6,-10,4,9,-9,1,4,8,6],[9,8,2,7,-6,6,-4,9,-5,-7,3,9,-1],[1,-10,-1,9,-2,-5,-2,-7,-2,-9,6,-8,-10],[-10,-4,-1,-2,6,-7,-3,5,-7,8,5,8,3],[-8,6,1,-7,9,-3,-7,4,-1,5,6,5,10],[6,-4,10,9,9,4,-6,-4,-3,6,-6,-6,-5],[5,-6,9,-10,10,-4,8,8,1,-4,-5,-7,4],[-9,6,-3,-5,-3,1,-7,3,-10,9,2,6,-7]],[[3,-9,9,9,2,-6,1,3,-3,2,4,-7,-2],[2,-7,6,-7,6,4,3,5,5,7,7,8,5],[1,-4,-5,10,9,9,-4,-2,-8,4,-2,-1,-9],[-10,8,-9,-1,2,1,-7,2,6,1,-2,-3,-6],[9,6,6,3,5,-10,6,2,8,10,7,3,4],[-1,-6,-1,-4,1,7,1,9,-8,-7,-4,2,-2],[10,9,3,-10,-6,-1,10,-10,9,8,-7,3,-9],[-7,-5,-3,6,-10,3,7,-2,2,4,10,-5,9]],[[7,6,-3,10,-5,2,5,10,1,-9,-8,5,-5],[5,-5,4,10,-9,-6,-8,4,-2,-1,8,2,5],[8,-3,-6,5,-5,-5,-10,8,5,-4,-8,-9,9],[-1,5,-2,-7,-8,-5,6,1,-7,-8,-6,10,2],[-6,-7,8,-7,-7,8,4,-8,-10,-9,6,1,-10],[6,6,-8,-1,-9,-6,-4,3,-6,7,-8,-8,9],[4,7,8,3,-1,8,7,-3,-2,-3,-8,-4,3],[-3,10,5,1,-5,3,-4,-1,8,-10,1,7,-8]],[[5,9,5,-8,-1,8,-5,10,-1,4,-7,-1,5],[-10,8,-5,-2,-2,4,4,5,7,5,7,6,-9],[6,-9,-2,3,-6,4,1,-7,-7,10,10,-1,-9],[-10,-2,7,9,-10,6,10,10,-2,-9,7,1,-6],[-7,8,7,-10,-9,10,-2,8,4,1,-1,6,-3],[3,-10,-5,-8,-4,10,-6,10,6,6,1,-3,7],[-5,-3,-6,4,-9,-5,-1,4,3,-2,-9,5,4],[7,-8,1,-7,-6,5,1,7,3,-4,-1,10,-10]],[[-4,4,10,-3,-6,-6,3,8,-9,1,6,6,-2],[9,-2,9,-3,-2,-6,3,-1,5,-8,1,-1,-5],[-6,-6,-10,10,-3,6,4,9,4,2,-1,-1,-1],[8,5,-8,4,3,1,6,4,10,-1,-10,2,-2],[2,-4,6,-4,7,5,-7,7,-2,4,6,-6,4],[10,9,-9,-5,-3,-8,5,-10,-1,7,-9,-3,-6],[6,4,7,5,7,-6,-10,-5,-7,-6,-1,6,-6],[-8,7,-8,4,-2,-7,9,-5,-8,6,-5,-6,-2]],[[9,6,2,-4,7,-1,-3,6,-1,6,9,-1,1],[-10,7,7,-9,-3,6,9,9,-8,2,-6,6,7],[10,-2,5,10,-5,10,-10,4,-10,1,2,6,3],[5,4,7,-1,4,3,10,1,-2,2,-6,1,-4],[9,5,1,-1,3,8,-9,1,-8,-1,-10,-9,3],[5,-5,6,-6,-7,-2,-4,8,-10,6,-2,4,-5],[-8,-5,2,-4,-6,2,-1,10,7,8,-6,4,-2],[8,10,8,-10,1,-2,10,5,-3,10,2,7,-5]],[[-10,9,-5,-8,10,5,1,-1,-10,3,2,-6,1],[-10,-7,5,5,-1,-1,-7,5,1,9,8,-5,-9],[-9,9,-2,-10,5,-8,7,3,8,-9,4,-6,-5],[4,-7,7,7,-8,7,10,1,-4,-9,8,-9,-8],[-8,7,1,1,8,4,6,-6,9,-4,-6,-3,-7],[2,-8,10,7,9,-3,-7,-10,6,-2,8,-8,6],[-3,1,-7,-8,5,3,9,1,-2,-3,-9,10,-1],[7,-9,7,9,3,-3,3,3,2,-7,6,-3,-4]],[[7,-6,-10,-10,-5,4,5,1,10,-5,-9,-7,-2],[-8,1,7,-5,8,5,8,-5,3,-10,7,8,5],[1,-6,4,-9,-5,4,-9,-7,10,-6,8,4,-6],[5,5,3,-1,-2,-4,-1,5,-1,6,3,-3,-1],[-10,6,8,-2,-3,-2,6,1,-2,1,8,4,-9],[-9,5,5,7,-3,-7,1,-2,6,6,9,2,7],[-1,-3,9,-5,4,-2,-1,9,10,8,4,1,3],[-7,-10,-2,-7,-1,9,-1,-4,-7,9,-5,-5,-2]],[[-6,8,-3,-4,-1,-3,-3,5,8,4,-10,-9,6],[-8,6,1,-3,5,6,-8,-6,-7,7,1,-7,-9],[6,6,3,-5,3,5,5,-1,-7,-9,-4,-4,-8],[6,9,-4,5,-9,3,-7,9,2,2,-4,4,4],[10,9,-4,-5,10,10,-9,-2,-4,-9,-3,-7,-4],[-5,-6,8,-8,8,-2,7,-4,5,-7,-8,-8,-5],[7,7,5,-2,1,-1,-9,-3,1,10,8,-9,-2],[7,3,2,-4,-3,-1,1,7,2,-10,6,4,7]],[[1,6,-4,-7,5,-6,8,-1,6,-2,-6,8,7],[7,8,-3,1,-4,4,-1,1,-9,9,-10,4,8],[4,5,-8,5,6,6,-7,4,4,-2,5,5,-3],[-10,7,-6,4,4,-4,9,-7,9,9,-7,9,9],[-1,1,-1,1,-9,-1,-6,4,-6,-2,-1,-8,6],[-5,-5,10,-9,9,2,-10,-7,-3,-7,-5,-1,5],[7,2,1,10,-2,-1,3,-10,2,-5,10,1,4],[-8,2,9,-9,5,-8,5,7,-10,-9,-3,-2,-9]],[[-6,-10,8,-7,5,2,-7,-3,3,-5,-5,-1,9],[3,-2,-6,5,-9,5,-3,-2,-4,3,-3,5,-9],[7,5,3,7,-2,-6,-10,10,-2,6,10,-10,7],[-3,3,7,1,-6,-1,2,8,2,2,3,-9,-8],[9,3,-3,-2,-8,6,10,4,7,-7,-1,-2,3],[6,4,-10,-4,-1,-1,3,2,9,-3,5,8,-2],[-1,5,-10,7,-7,-7,1,-5,-2,2,-10,-8,-5],[-1,-3,5,9,-9,10,-1,2,-5,-7,-7,-1,-3]],[[-3,1,1,2,-7,9,6,-3,3,-3,-3,2,-1],[6,-10,-2,-9,-1,-5,8,10,5,7,-10,3,9],[-2,-5,10,4,2,10,-8,-6,2,4,3,-7,9],[-3,3,-10,3,-7,-9,-2,6,4,1,-9,-6,-6],[-4,9,2,-8,8,-7,3,3,-6,5,-6,-8,-1],[-1,-9,5,-2,7,-10,9,2,8,-4,9,7,4],[5,10,8,-4,-2,10,-5,10,-1,5,6,1,6],[10,6,-5,-5,-8,10,-1,2,6,6,5,4,-1]]], dtype = "uint16")#candidate|8664|(14, 8, 13)|const|uint16
bop_8665 = relay.bitwise_or(call_8662.astype('int16'), const_8664.astype('int16')) # shape=(14, 8, 13)
bop_8668 = relay.bitwise_or(call_8663.astype('int16'), const_8664.astype('int16')) # shape=(14, 8, 13)
uop_8671 = relay.log10(const_8664.astype('float32')) # shape=(14, 8, 13)
output = relay.Tuple([bop_8665,uop_8671,])
output2 = relay.Tuple([bop_8668,uop_8671,])
func_8684 = relay.Function([], output)
mod['func_8684'] = func_8684
mod = relay.transform.InferType()(mod)
mutated_mod['func_8684'] = func_8684
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8684_call = mutated_mod.get_global_var('func_8684')
call_8685 = func_8684_call()
output = call_8685
func_8686 = relay.Function([], output)
mutated_mod['func_8686'] = func_8686
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8653_call = mod.get_global_var('func_8653')
func_8655_call = mutated_mod.get_global_var('func_8655')
call_8724 = func_8653_call()
call_8725 = func_8653_call()
uop_8727 = relay.asinh(call_8724.astype('float64')) # shape=(2, 5, 11)
uop_8729 = relay.asinh(call_8725.astype('float64')) # shape=(2, 5, 11)
func_1061_call = mod.get_global_var('func_1061')
func_1065_call = mutated_mod.get_global_var('func_1065')
const_8741 = relay.const(-3, dtype = "uint32")#candidate|8741|()|const|uint32
const_8742 = relay.const([7,6,-1,8,9,5,-7,3,2], dtype = "uint32")#candidate|8742|(9,)|const|uint32
var_8743 = relay.var("var_8743", dtype = "float32", shape = (770,))#candidate|8743|(770,)|var|float32
call_8740 = relay.TupleGetItem(func_1061_call(relay.reshape(const_8741.astype('uint32'), []), relay.reshape(const_8742.astype('uint32'), [9, 1]), relay.reshape(var_8743.astype('float32'), [770,]), ), 2)
call_8744 = relay.TupleGetItem(func_1065_call(relay.reshape(const_8741.astype('uint32'), []), relay.reshape(const_8742.astype('uint32'), [9, 1]), relay.reshape(var_8743.astype('float32'), [770,]), ), 2)
output = relay.Tuple([uop_8727,call_8740,const_8741,const_8742,var_8743,])
output2 = relay.Tuple([uop_8729,call_8744,const_8741,const_8742,var_8743,])
func_8752 = relay.Function([var_8743,], output)
mod['func_8752'] = func_8752
mod = relay.transform.InferType()(mod)
var_8753 = relay.var("var_8753", dtype = "float32", shape = (770,))#candidate|8753|(770,)|var|float32
output = func_8752(var_8753)
func_8754 = relay.Function([var_8753], output)
mutated_mod['func_8754'] = func_8754
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8781 = relay.var("var_8781", dtype = "float32", shape = (1, 8, 11))#candidate|8781|(1, 8, 11)|var|float32
const_8782 = relay.const([[[7.864557,-1.535896,4.949235,5.569131,-5.469443,9.296726,-7.441689,-1.289117,-4.690322,-3.705931,3.699467],[3.082422,0.474732,-2.135725,8.421013,-1.007426,-2.452828,4.711547,2.610242,-7.011448,5.828143,1.043658],[-4.900819,-1.997316,-0.015878,-2.064033,3.271294,-9.006662,0.160246,6.994760,-8.745974,3.309594,-5.783901],[-9.737940,-8.343525,3.650709,-1.041992,2.090028,7.430983,8.402451,-0.119606,5.902758,-7.996612,-1.354646],[-0.419676,-3.265570,0.349775,3.133157,-5.641885,5.569382,-6.812768,-9.801628,3.036452,4.715711,7.043726],[-9.520733,-5.759503,-7.606226,9.420313,3.158030,-8.954213,-6.527879,2.559976,3.314682,-5.272323,-6.742424],[-2.345468,1.335313,0.350990,-2.254844,-4.455046,-9.863014,-8.154879,1.549465,-6.101171,5.322259,-5.175199],[-6.292355,8.630725,-6.304241,6.188538,-3.015464,7.132062,1.295038,9.152773,-0.801734,8.279660,-8.338073]],[[6.067299,9.188353,-6.768393,-0.378600,6.002684,5.490619,-7.114488,-2.440372,-9.760994,3.422893,-7.702341],[-3.488546,-3.995795,5.606206,-0.572985,0.774151,4.222210,1.391067,3.521005,5.550890,-7.440043,0.296489],[-6.663342,-4.906545,8.512412,-7.430557,6.204174,3.663933,4.560361,6.693956,-5.506503,9.640557,9.901086],[-5.312192,-8.629723,4.953881,-0.854358,-9.561550,-3.808451,5.321377,-1.116312,-6.942584,0.980814,-5.474573],[-4.741366,-4.967789,-9.090338,8.091892,-5.463259,0.323343,3.731014,5.054705,6.112809,-8.927336,8.342207],[9.835229,2.912687,2.049692,8.541466,-3.427060,3.535949,0.953906,-4.652122,2.265276,-8.641950,-1.277300],[-7.914822,7.480294,6.455198,1.113036,0.980533,-3.136571,-4.529875,4.032885,6.699243,-4.715033,-0.363082],[3.347964,-3.288809,1.607127,7.830080,-8.344820,-6.250764,7.772175,3.213690,-4.384442,-3.376686,9.965958]]], dtype = "float32")#candidate|8782|(2, 8, 11)|const|float32
bop_8783 = relay.floor_divide(var_8781.astype('float32'), const_8782.astype('float32')) # shape=(2, 8, 11)
output = relay.Tuple([bop_8783,])
output2 = relay.Tuple([bop_8783,])
func_8790 = relay.Function([var_8781,], output)
mod['func_8790'] = func_8790
mod = relay.transform.InferType()(mod)
mutated_mod['func_8790'] = func_8790
mutated_mod = relay.transform.InferType()(mutated_mod)
var_8791 = relay.var("var_8791", dtype = "float32", shape = (1, 8, 11))#candidate|8791|(1, 8, 11)|var|float32
func_8790_call = mutated_mod.get_global_var('func_8790')
call_8792 = func_8790_call(var_8791)
output = call_8792
func_8793 = relay.Function([var_8791], output)
mutated_mod['func_8793'] = func_8793
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7599_call = mod.get_global_var('func_7599')
func_7600_call = mutated_mod.get_global_var('func_7600')
call_8837 = relay.TupleGetItem(func_7599_call(), 0)
call_8838 = relay.TupleGetItem(func_7600_call(), 0)
func_1061_call = mod.get_global_var('func_1061')
func_1065_call = mutated_mod.get_global_var('func_1065')
const_8854 = relay.const(4, dtype = "uint32")#candidate|8854|()|const|uint32
var_8855 = relay.var("var_8855", dtype = "uint32", shape = (9,))#candidate|8855|(9,)|var|uint32
const_8856 = relay.const([[6.912528,8.469968,3.730169,5.397705,1.997148,0.294896,2.763034,6.956369,-2.817350,-5.768250,1.260755,3.111887,-1.137915,4.499555,6.148647,9.363063,6.426017,-5.458521,-9.247535,-1.027714,8.687110,-3.831231,-9.984153,9.169662,-0.723536,4.056926,-8.346428,-9.756287,5.695393,7.027704,-0.287697,8.505494,-0.550196,-7.253994,9.603255,-7.104600,7.511555,-8.413905,-7.054665,-6.446885,9.512874,-9.112833,-9.260847,-6.617129,-8.595608,-1.324427,-3.085210,-4.140221,-4.014311,9.272897,3.456991,-9.699566,1.009531,2.150478,-9.863249,-9.965267,3.054818,8.425123,0.611726,3.654071,-0.353340,9.296554,1.089184,5.385034,-7.634083,8.223903,-0.685395,-8.611005,-1.522343,9.239669,-8.442227,-4.005221,-5.728343,1.508832,-5.337038,9.824056,1.526526,2.395361,-9.301342,-6.461478,-3.087352,0.030530,1.146922,-2.746400,5.267313,-7.000670,1.676816,4.563352,-2.820453,8.388597,4.091913,0.606396,9.466701,6.274145,7.361617,5.439266,1.082884,-4.406349,-0.835216,1.619897,-4.207726,5.399588,-5.577647,7.636189,-3.159120,5.554575,3.293643,-5.322232,-3.632530,6.975268],[7.851569,3.307772,3.265804,5.854997,-9.443364,1.317963,-6.141200,-2.413437,0.550591,3.700820,-4.573058,1.327967,-1.182672,6.266042,0.384689,-0.960391,2.535210,4.457487,-9.459234,-0.567154,6.804447,9.831023,2.317931,2.666742,-0.114976,-0.643432,8.014533,-0.996536,0.803697,-3.135442,-8.785452,2.022749,-4.433835,-3.332774,9.545657,4.292129,-8.429753,-5.340636,-5.642095,-2.153630,-1.095204,-6.078798,-7.662994,9.122445,-0.199750,-0.461362,0.735901,-8.975178,7.345447,-5.464511,1.654814,7.507547,-9.555487,0.574574,4.861621,0.384280,-0.640927,-1.385512,2.724430,-8.085183,9.225982,-2.893848,-0.573724,0.767291,-5.070522,-9.600144,7.705187,1.397935,6.729589,1.223128,3.612232,7.344980,-5.532229,-5.809252,4.924152,0.878529,-8.631586,7.674460,-3.333711,-0.541679,-8.135376,-0.402405,-9.392167,-5.844983,9.218267,1.522586,-4.127835,-7.023506,-3.374167,-6.711953,-6.783502,-7.820493,-8.716584,6.978902,-9.058757,3.979895,4.697654,7.306141,9.414875,6.434815,0.810833,5.048740,5.595214,-7.660089,4.416556,-5.178196,-2.738127,-3.866013,-5.805256,3.416196],[6.975033,-1.450094,-5.203666,-5.624295,5.446637,-2.373651,-3.551753,-3.484854,-6.719080,0.133582,-7.389774,3.389358,0.659726,5.329913,6.959214,-2.586016,3.709572,4.868289,-4.630568,5.214695,-5.554066,-9.191318,-3.418621,-7.301941,8.177141,-3.259493,3.009975,-5.941807,2.160278,8.084059,-6.467977,1.267267,-6.099065,-5.053295,-3.412237,-7.296607,9.799710,-2.529087,7.857702,-8.684964,-6.022450,-8.217270,-1.835500,-0.234814,-0.890065,5.710310,-4.654163,-2.778355,2.376660,3.891630,9.780303,-6.366518,8.832538,-6.051721,-5.688691,8.500741,4.363551,-4.329197,6.372257,7.610383,-8.056694,-2.222475,4.694240,7.719738,3.984404,-4.724704,-9.925324,-7.666886,6.432531,1.146557,3.903387,1.653626,-4.716944,6.223343,-9.899314,-4.019103,5.132334,1.305062,8.447240,8.502421,-5.000288,9.017985,3.436463,-8.986156,-3.167559,-7.570213,-9.439941,-9.536473,5.065879,-1.040088,-4.054779,7.589957,-3.111088,-7.969293,0.868231,-0.122485,-8.878464,0.322727,9.220222,-4.501017,3.863495,-5.837130,-6.423866,-3.265946,-8.192011,-9.952729,8.593276,-2.426065,-5.125784,-6.446076],[-9.689067,7.696411,-0.554900,-9.155586,-7.169786,-2.865430,7.103001,-3.847709,4.338424,-0.884408,4.036398,9.484752,-0.377217,-4.016926,-2.161933,-7.571133,-6.327450,4.263225,-1.433847,-1.149689,0.226135,-6.385493,3.722803,-1.264845,-5.325166,-8.940778,8.574526,-8.614903,9.068358,8.960330,7.197390,1.411277,7.654748,0.653385,-4.201272,4.269568,-9.000952,6.049853,-1.660810,-9.042759,-3.372661,-8.573449,-1.755860,5.266365,-1.896175,-8.323127,-6.689796,1.854497,-7.766400,-3.903891,-8.962346,-3.481530,1.098869,6.891835,-5.798281,-8.436679,-8.670417,-1.688268,-1.107514,3.598959,-7.606812,-4.511833,2.870710,1.978529,-3.876654,-1.958788,9.701541,1.005516,-0.559177,-5.853984,1.467359,8.167197,4.456893,-8.377705,0.174593,-0.713115,1.774539,6.958105,-4.210476,2.013449,-5.041554,-8.650824,-2.326590,-1.622481,-9.382535,8.765514,-9.554551,8.502173,1.478399,0.987276,7.942587,-7.699637,-2.176314,6.098598,-9.029838,-3.112033,2.216683,-5.185352,-4.737485,-2.165009,5.028133,-6.377268,4.301492,-6.856288,-0.366332,9.822713,2.160885,-9.621256,8.454464,2.924133],[-7.924288,-3.975791,-1.277666,-0.704508,-4.165918,4.846553,-1.250713,2.914407,2.241676,-5.264137,1.394937,-9.395856,-2.431702,-3.340984,-8.573454,4.071057,0.503271,-9.362476,4.585069,7.630957,-3.446909,9.961767,-0.241413,-5.473677,-1.538411,1.320290,-2.602472,1.237170,1.269980,7.865845,3.457007,-9.740935,-6.322768,-1.867049,3.755391,5.764387,-2.546086,2.612196,3.753150,-7.182653,-3.980022,8.752507,5.863245,7.373434,8.546481,5.216112,-9.217159,2.992046,-5.250129,-7.967108,6.756453,7.736122,-4.183845,3.429926,-3.033369,-1.434274,3.868283,-2.215001,-5.969373,7.717524,-1.574910,-9.778957,8.878170,6.939168,4.106065,0.589298,-8.961448,-1.656916,6.254600,-9.098117,1.235612,0.734075,0.339349,-4.014309,9.185770,4.672589,-6.051541,-6.285811,5.473621,7.418869,0.344733,-1.829162,-0.966882,5.956734,-1.740982,7.338561,-0.271499,-1.241385,-6.905015,4.692024,2.580884,0.787769,-8.218522,4.045243,-0.267440,-3.524120,9.838259,7.105996,3.995051,-0.676229,-1.295784,5.101644,-7.888167,-0.427140,-7.914097,-9.109372,-1.962311,1.330564,-2.771543,5.872818],[-9.131994,-2.077951,-4.461950,0.438896,-9.447827,3.776749,1.759436,2.783240,-0.813099,0.870078,8.387074,-5.132858,1.735165,-3.899867,-8.230715,-7.633339,7.730118,6.403396,-0.147570,0.204394,-8.654022,-0.479786,-7.608160,1.861037,6.500616,4.028484,-6.290086,3.419696,-7.405327,8.030973,4.937266,6.166672,0.214268,-0.874398,2.341712,-0.478676,-5.236340,7.047489,8.338160,3.327383,0.667639,7.570428,5.114440,-5.271067,2.576270,-4.363228,9.921774,0.573756,-8.527909,4.103717,-7.588479,4.080225,-4.788598,9.863740,8.475080,-7.031329,1.028335,1.037814,-9.924106,-6.487422,4.976754,-5.615975,-6.157865,3.633111,0.935120,-8.985337,3.872501,-0.925603,8.248925,8.203509,8.335736,9.527785,7.703112,3.281056,-0.626449,8.984475,-3.628817,2.176008,-9.568186,-5.125008,6.715243,4.467445,-9.072659,-1.138518,3.232450,6.499022,0.100755,1.042274,9.528472,4.585069,9.609192,3.091644,-5.629691,-5.525677,-4.922833,7.033196,-9.502338,-6.051618,-6.745366,-3.857324,-5.574618,-3.867280,-1.659643,-0.290006,-0.627680,-2.958258,7.339869,-5.618701,-3.279897,-8.863272],[9.168633,-8.319412,-0.224528,-3.715179,1.515495,-0.036096,-6.715404,6.589180,-2.508442,-3.295042,2.455078,-7.411776,5.729523,3.109782,-0.184845,-7.227479,0.972002,3.002803,5.316502,-4.370919,-5.164891,-0.954193,-7.952088,0.498951,9.463531,8.114362,-5.703381,8.850740,-0.432488,6.503194,-5.497990,-0.720728,-5.940041,9.406264,-9.020961,-1.639370,-6.528493,1.097543,6.735757,-3.430380,6.928309,6.822454,3.560741,5.266593,5.477804,-8.352697,-2.938958,0.615187,-9.699338,-1.634552,5.521215,0.846764,2.405531,-7.225164,-1.829410,7.194271,-0.048843,3.054510,-3.343539,-6.199236,-7.316959,7.897172,7.089065,1.602178,-8.581228,-6.744975,8.507306,8.402029,5.605419,0.866425,-2.277914,2.783228,8.935662,3.600775,4.630896,-9.342987,-1.625673,-2.364715,-5.722695,-9.772054,8.107488,-2.145653,-8.865290,5.016321,5.574086,2.339578,1.592705,5.130673,-5.545652,-6.271002,-1.702915,8.310831,8.562214,-8.807941,8.029222,-9.544380,-8.021010,4.615046,-5.995354,-2.499078,1.249191,-7.425862,-3.769437,-4.444893,-4.148340,-4.483858,5.066399,4.737603,3.766186,-9.673997]], dtype = "float32")#candidate|8856|(7, 110)|const|float32
call_8853 = relay.TupleGetItem(func_1061_call(relay.reshape(const_8854.astype('uint32'), []), relay.reshape(var_8855.astype('uint32'), [9, 1]), relay.reshape(const_8856.astype('float32'), [770,]), ), 0)
call_8857 = relay.TupleGetItem(func_1065_call(relay.reshape(const_8854.astype('uint32'), []), relay.reshape(var_8855.astype('uint32'), [9, 1]), relay.reshape(const_8856.astype('float32'), [770,]), ), 0)
output = relay.Tuple([call_8837,call_8853,const_8854,var_8855,const_8856,])
output2 = relay.Tuple([call_8838,call_8857,const_8854,var_8855,const_8856,])
func_8859 = relay.Function([var_8855,], output)
mod['func_8859'] = func_8859
mod = relay.transform.InferType()(mod)
var_8860 = relay.var("var_8860", dtype = "uint32", shape = (9,))#candidate|8860|(9,)|var|uint32
output = func_8859(var_8860)
func_8861 = relay.Function([var_8860], output)
mutated_mod['func_8861'] = func_8861
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8055_call = mod.get_global_var('func_8055')
func_8056_call = mutated_mod.get_global_var('func_8056')
call_8863 = relay.TupleGetItem(func_8055_call(), 0)
call_8864 = relay.TupleGetItem(func_8056_call(), 0)
uop_8865 = relay.asinh(call_8863.astype('float64')) # shape=(15, 6, 15)
uop_8867 = relay.asinh(call_8864.astype('float64')) # shape=(15, 6, 15)
func_8055_call = mod.get_global_var('func_8055')
func_8056_call = mutated_mod.get_global_var('func_8056')
call_8870 = relay.TupleGetItem(func_8055_call(), 0)
call_8871 = relay.TupleGetItem(func_8056_call(), 0)
func_8402_call = mod.get_global_var('func_8402')
func_8403_call = mutated_mod.get_global_var('func_8403')
call_8877 = relay.TupleGetItem(func_8402_call(), 0)
call_8878 = relay.TupleGetItem(func_8403_call(), 0)
func_8352_call = mod.get_global_var('func_8352')
func_8355_call = mutated_mod.get_global_var('func_8355')
call_8886 = relay.TupleGetItem(func_8352_call(relay.reshape(call_8870.astype('bool'), [15, 6, 15])), 2)
call_8887 = relay.TupleGetItem(func_8355_call(relay.reshape(call_8870.astype('bool'), [15, 6, 15])), 2)
func_8226_call = mod.get_global_var('func_8226')
func_8227_call = mutated_mod.get_global_var('func_8227')
call_8893 = relay.TupleGetItem(func_8226_call(), 3)
call_8894 = relay.TupleGetItem(func_8227_call(), 3)
func_8684_call = mod.get_global_var('func_8684')
func_8686_call = mutated_mod.get_global_var('func_8686')
call_8903 = relay.TupleGetItem(func_8684_call(), 0)
call_8904 = relay.TupleGetItem(func_8686_call(), 0)
func_8752_call = mod.get_global_var('func_8752')
func_8754_call = mutated_mod.get_global_var('func_8754')
const_8915 = relay.const([[5.288644,4.419424,6.293273,6.530139,-7.068582,7.377913,8.937140,0.737513,6.830798,-0.468352],[-5.669843,0.645831,3.866350,7.182243,6.946498,6.233620,-5.205955,8.429066,-9.790769,0.984520],[8.830733,9.936808,0.697846,-1.972016,2.025370,6.554819,-6.755853,-7.925305,5.366952,6.005626],[5.249092,4.029401,8.408117,6.451324,-1.202723,9.223523,-7.387356,-2.101217,5.141090,-9.737486],[9.841422,-3.972781,-3.115378,3.014656,-5.736424,-2.540116,2.925004,0.433984,-8.782638,-5.310517],[-6.101945,-9.221822,4.076373,-0.276248,-0.296996,6.735406,-8.895310,7.066119,-3.733055,5.586889],[-1.066854,-3.366472,8.587539,-0.070109,9.415417,-5.329633,-4.753483,-7.814153,2.162877,-7.059951],[4.198326,6.059914,1.230760,5.261329,1.984210,-6.112990,-8.580625,-8.171746,1.720221,-8.828063],[7.534038,-2.698170,9.317063,4.646313,9.985734,-4.860542,9.547599,6.684724,8.071391,-2.848016],[4.124422,-4.129484,-5.982741,3.377140,3.488263,-4.040626,2.736789,6.120333,7.444431,4.464764],[-9.309952,9.795139,-0.731718,5.167206,2.651782,-5.554991,-8.257862,9.828746,1.906167,-3.427377],[-8.264964,-0.788256,9.777998,-3.201682,-9.178515,-5.175284,-5.376591,2.967224,-9.909613,-3.795160],[-1.865948,-6.745701,4.619588,6.828043,-3.822227,6.722632,-8.855959,-5.440119,6.770922,-1.486966],[0.912742,1.462166,6.031683,-5.770847,8.078044,0.212390,1.743740,-1.515929,1.065023,-5.112962],[-9.130713,-1.140865,1.213052,-0.432813,-4.924032,-5.206151,6.593789,0.722420,-0.111181,-9.823582],[-5.918186,-6.175221,7.608341,-8.510273,-7.197240,4.264818,-9.599708,-7.394960,-1.861784,0.243962],[8.924315,-5.157673,6.083191,5.441976,3.252271,0.581976,-6.838091,-9.928972,-1.744989,-7.905799],[2.996374,7.609174,-6.423849,6.461173,0.352519,7.931533,-4.749037,6.739638,9.598692,-5.219051],[1.881868,-0.687804,5.581800,6.864239,8.080159,-3.625417,1.364733,-2.912569,1.320304,9.091059],[-9.195199,-1.898142,-6.117366,-6.825631,-6.589746,3.438877,-3.538844,5.565427,-5.755202,-0.740933],[3.231423,-4.187831,-6.605649,-2.680447,-7.182449,-3.568894,-5.506562,0.347470,6.688843,-3.446370],[-1.367943,1.489882,7.027598,-3.086561,3.433842,4.711489,-5.889454,-2.840630,-8.700592,-3.443756],[-0.168987,-2.592689,8.054566,4.077951,9.303030,5.037664,3.331421,7.215777,6.592905,-8.873737],[-0.731941,4.079637,9.300961,3.937028,-6.536004,-0.684292,8.490966,5.494977,0.212987,6.479647],[-0.854382,-5.042637,7.941412,-7.695696,-9.500832,0.579041,-2.039405,6.271252,-5.311217,-9.135581],[-4.747140,4.603553,9.825155,9.834066,-0.517922,8.556662,8.313135,-9.134880,2.450943,0.290998],[-8.397765,-2.848974,-0.332305,-4.381722,2.784619,5.088450,-1.294990,3.037315,-2.433129,-2.282927],[8.460192,9.253746,0.490915,8.040708,9.226683,-2.449998,9.800557,-5.109388,-5.090066,8.344847],[6.181948,-9.203793,9.216397,5.054065,-6.370349,-4.858845,-3.423829,-0.342545,-3.176939,-1.917415],[-5.149654,0.845243,-7.933684,1.556514,-9.442671,-9.556497,-1.739641,5.942265,-8.011894,2.929721],[-9.806473,-5.444174,8.595125,5.830719,-6.015496,6.560975,-4.958539,-1.321252,0.781836,-7.706050],[-4.967182,9.911559,6.083401,5.031197,-7.280957,-1.399526,-0.832007,9.683210,3.696025,7.644717],[-5.668736,-9.586770,3.883731,3.270469,0.807777,4.994943,-4.849948,-7.674926,9.210955,1.106425],[-4.246509,2.016190,-3.355985,-1.789086,5.057691,4.126519,0.194580,-9.359210,2.590397,3.491959],[1.107461,-6.740446,2.162711,0.300134,-3.049383,-9.353387,-2.777155,-3.871691,-0.112167,-7.519601],[-4.483040,-9.406281,-4.309226,0.861036,-2.721961,-2.302762,1.013193,-3.815302,4.850530,3.990390],[-1.259669,-1.183346,6.581626,-7.391401,6.930102,2.694659,-8.463981,6.448932,4.819536,-3.355956],[8.128489,9.810465,-9.089535,-0.632721,-1.206735,0.401158,2.892212,2.094753,-7.151553,3.277251],[5.445871,-8.202106,-3.311582,-7.783095,-1.007039,8.905560,7.017456,-3.305835,-2.871050,4.043039],[-5.172858,-2.583997,-2.721919,4.446258,2.199679,-3.182854,6.980511,-7.934222,9.872256,7.504882],[-9.874047,8.093829,-5.999096,3.645730,-5.616518,0.668815,5.224251,8.483536,7.425714,4.960251],[0.298986,3.948596,-1.004932,-3.188310,-1.118701,2.933501,-4.205097,-6.714646,-9.339349,-8.412172],[-4.853744,8.358075,3.709202,6.738320,6.560193,7.917211,3.745841,-1.179048,-6.836326,3.932447],[-7.414194,0.562506,0.294207,3.620521,0.775834,4.539712,4.057730,-1.548553,0.450197,-4.120100],[-5.924532,9.307689,-3.105442,4.005760,-4.281447,-7.549214,6.124282,0.531269,0.608730,-1.906885],[-7.843898,6.195315,-3.747922,-6.579280,7.174491,3.001773,-6.681629,0.242923,-2.912298,-8.528372],[5.622123,0.585144,-9.915469,-8.542903,-6.600716,8.445368,-5.267622,-1.798466,-9.194457,-6.367224],[5.905823,8.768058,-4.676666,9.639083,8.749077,9.428661,-2.293519,5.318909,9.378494,-6.219335],[-8.562779,5.965010,-5.458709,4.026401,-5.883196,5.148237,8.641771,-7.927608,6.920385,-7.288739],[2.689162,-9.495064,3.538970,-5.427487,6.410768,-9.356831,-0.966119,-2.110008,6.965443,1.592040],[0.401413,-1.713841,9.837250,-9.841453,-7.855503,5.916424,-2.504566,2.187837,1.211205,-6.445862],[-3.660943,-5.767194,-2.508659,-2.517706,7.937359,-8.727436,-1.869043,1.429891,7.611086,-1.446537],[5.212742,4.999130,0.964017,0.566386,-3.991804,4.736669,-3.849355,-2.071193,-4.449350,-9.505797],[-1.894002,-7.101854,4.937136,6.426766,5.895518,-9.281260,8.250070,-9.169029,-8.850249,-5.258087],[-8.310398,-9.383535,3.365680,0.840090,4.730056,8.371278,-3.284121,-3.455976,-4.739589,-2.450802],[5.001258,-8.311440,-9.745661,-9.849484,-0.738453,-4.619121,-6.198536,3.182357,7.942722,-7.366771],[-8.554462,-1.421087,2.211772,8.947700,-9.143287,-2.233241,-6.062621,6.201048,9.149264,-3.785289],[-5.016779,-0.312863,0.669899,-1.154602,1.394131,6.475691,5.355237,-0.030973,-4.273706,-2.285192],[-9.123499,-9.233282,5.180534,4.932730,5.880403,-2.583246,-7.909043,4.633768,-0.343779,-1.904516],[-1.801201,9.396517,-7.305350,-8.873281,9.096953,7.072077,3.288538,4.187209,3.301091,-7.629889],[-4.613936,-1.689395,9.456855,-4.863745,-1.766980,1.364411,-7.207201,-0.683170,1.080226,6.717678],[0.781798,-9.287949,-5.713044,2.776137,-0.553439,5.366528,-4.790390,-0.324928,4.168600,0.363589],[3.034019,-4.692634,1.395738,-8.286554,5.617191,-4.180976,4.053245,-0.877578,-7.338226,7.296933],[3.378812,2.994546,5.835870,3.432848,-7.712111,-6.954794,-7.915749,0.901084,9.105661,-7.435286],[0.022437,3.361700,4.160511,-2.523932,3.455209,-2.528345,-2.680839,-8.687680,2.430587,-0.026596],[-3.399734,-0.234594,7.140955,-5.495868,1.135393,-0.766826,1.426857,6.516330,0.474743,-8.214881],[-4.336193,1.193205,-6.496076,-3.748001,1.051099,4.495609,0.243465,-4.817190,0.821553,8.942733],[6.916753,1.555479,6.721737,0.977408,0.075267,7.009910,3.855335,-4.008955,-7.756953,0.927482],[-2.122019,6.661220,-9.033267,-2.206579,-2.219730,7.714966,1.046751,2.366462,7.465955,5.963617],[-1.477167,-5.926206,0.910067,-8.037655,2.017058,-6.688253,-7.378475,3.905339,7.457999,3.409322],[8.301564,-5.361515,4.380898,3.640822,-6.337155,1.759880,9.801107,-9.914536,6.506118,-6.987584],[4.829385,-8.197668,-8.750491,-2.987357,1.851721,-9.652533,-8.934313,-1.735468,-6.595322,5.309796],[-0.815499,8.961572,-1.215703,9.087704,-3.638908,6.296502,-2.245661,-4.510813,1.393091,-9.582057],[-9.293869,-6.953358,6.528200,-3.310089,-7.091396,2.193903,9.001699,1.094012,-1.755692,9.539445],[-1.495314,-4.650437,-7.184165,-9.075403,-5.101753,-2.787750,5.220179,2.426039,3.373446,-7.272502],[3.662750,8.659052,-4.205600,2.971884,9.838792,-8.802053,2.712967,-4.545797,5.843924,2.790278],[9.598571,-0.287760,-1.848285,-0.916222,5.000967,-5.628300,-8.368544,0.652666,-5.842725,9.997622]], dtype = "float32")#candidate|8915|(77, 10)|const|float32
call_8914 = relay.TupleGetItem(func_8752_call(relay.reshape(const_8915.astype('float32'), [770,])), 1)
call_8916 = relay.TupleGetItem(func_8754_call(relay.reshape(const_8915.astype('float32'), [770,])), 1)
func_7462_call = mod.get_global_var('func_7462')
func_7469_call = mutated_mod.get_global_var('func_7469')
const_8926 = relay.const([3.182478,-9.343630,4.649423,1.656235,8.680912,6.304209,3.028719,5.434686,2.420049,-0.805708,-8.845029,-7.436166,-0.705294,3.514239,-0.957881,7.673328,0.996044,2.313975,7.048792,4.450324,2.312915,-4.244131,6.092542,-7.788380,-4.292548,7.222388], dtype = "float32")#candidate|8926|(26,)|const|float32
const_8927 = relay.const([[-0.939891,7.672551,5.109370],[2.572564,7.435986,-1.955117],[5.672876,7.876073,-1.540636],[6.969040,-7.016038,-9.071214],[-1.530792,5.614723,4.591684],[-4.648950,-7.197666,8.288615],[-2.173729,-2.593719,8.351188],[5.915253,-9.613105,6.960444],[5.435758,-2.616168,-4.852228],[-7.293491,-2.933994,-7.779925],[-6.161187,0.935370,-9.000274],[1.194653,7.924204,0.689736],[-0.894435,6.623742,1.371453],[7.432815,0.391238,-0.914646],[-1.724025,-7.049897,9.146298],[2.341706,-6.717672,-3.390418],[3.250315,0.265953,-5.853853],[-9.689068,0.132379,3.035515],[-9.136575,-7.068790,-4.146587],[8.437950,6.598080,-8.276942],[-5.312570,-2.692877,-1.659418],[-9.978340,-5.176249,5.924960],[-8.327254,6.276011,8.369921],[-1.936881,-9.056452,-1.899975],[-4.815550,5.338594,9.669135],[-0.905955,5.439091,-6.864986],[5.115628,-6.558058,6.883296],[-8.374462,7.872039,5.620100],[9.562915,-0.382837,-7.585665],[-4.461524,-8.446775,-8.610661],[9.264330,-7.158180,-4.843192],[3.537201,0.321067,6.221372],[8.050380,-7.247931,-0.358047],[3.210788,4.129629,1.850258],[-6.422447,-9.011384,7.011643],[8.008348,0.578119,-5.071891],[-2.908980,-7.253725,3.899229],[-0.294885,5.210136,6.012591],[5.259002,0.380790,-7.719699],[-5.527087,1.909819,0.484795],[-3.616983,2.366400,-5.851997],[3.229478,4.340631,-8.140839],[7.815007,3.904665,9.077195],[-7.555950,-1.566411,-1.917275],[-8.261400,9.374180,1.380573],[5.949810,0.079801,-4.395555],[-1.320097,0.630568,5.073230],[-6.445847,-5.096466,2.432621],[-3.681154,-7.671456,-5.101810],[5.981670,-8.410653,-3.616976],[6.945038,7.490947,-8.791277],[1.730620,1.433637,5.766992],[-5.428688,7.009019,4.052197],[5.804436,3.121860,-3.483089],[-2.949377,-1.441191,3.902806],[-7.361407,-6.932469,0.235585],[0.737735,8.651333,1.326321],[9.011279,-9.811979,7.433418],[-8.793242,9.588839,-4.296363],[6.798485,1.579675,7.042049],[-9.960817,-3.434195,1.898310],[1.361589,-2.801647,7.251581],[1.032254,6.053596,-5.672453],[-7.612163,4.323003,-3.903326],[2.268473,-0.050033,8.165301],[1.877915,-8.301018,3.685829],[-0.352369,-1.011923,7.495053],[-9.717418,3.688089,9.999620],[-1.316123,-0.185944,3.516341],[-2.904827,-4.385200,-8.952623],[-4.140160,7.469016,8.200794],[2.919974,2.860206,-5.715408],[8.286602,-6.729791,-5.356323],[-4.411478,6.151475,9.756316],[3.610137,1.814802,-4.802873],[-9.212046,-9.022481,8.605929],[-5.367649,0.824357,3.136430],[-2.802564,-6.117310,4.832400],[-5.237273,-9.813150,-4.130421],[2.913077,3.035552,4.808075],[-8.587815,-5.250822,6.886150],[-3.278666,-1.747919,4.488363],[6.270683,2.235020,-9.382707],[-0.881222,-1.117237,-9.666952],[-4.784416,1.834178,6.562237],[-9.407109,-5.235496,-0.706272],[-2.609624,1.061619,-9.223319],[-5.708924,-2.048300,8.021795],[-5.544296,-7.240734,-8.088987],[5.237947,-3.931481,-8.675532],[9.597333,0.608963,-5.945616],[9.789233,-4.644672,3.480518],[-9.191858,-2.390752,0.485533],[0.445257,4.255352,8.495691],[9.091871,2.071749,2.488381],[5.970750,-5.904699,-0.176329],[-5.418553,9.706190,-5.195583],[4.213700,9.996499,8.589225],[5.053213,-4.952131,-1.289703],[3.236768,5.524451,1.177564],[-0.752523,2.656501,6.877057],[7.264431,-7.964634,-7.971430],[-9.598501,0.346299,0.631279],[-9.101159,1.801651,-5.266030],[-0.820425,5.270240,-2.526058],[-3.733711,8.356508,5.158813],[1.280115,-0.202058,4.983153],[-4.659332,-4.463894,7.614317],[9.444319,1.939534,2.112752],[-3.974513,7.179613,0.196248],[5.285225,-8.306715,9.177435],[0.103196,8.434889,-3.223008],[4.736711,-2.725464,-8.109109],[0.788776,9.737003,5.019058],[-8.603096,7.860535,9.974186],[2.510100,-7.991806,-6.136078],[7.269772,1.884055,4.301762],[-4.134928,-6.367742,5.278610],[-4.263336,-1.965329,9.996772],[-3.924010,-6.254970,1.490818],[-2.329192,-6.488169,-8.687773],[0.255337,-3.684105,-6.764293],[-1.082092,-8.698011,7.373228],[-9.036763,1.113430,-5.339002],[-9.459990,-3.246099,-5.283211],[-4.887483,5.432681,9.982154],[7.460276,2.028814,5.867118],[-8.592992,-7.695023,4.640989],[-0.744029,-9.457600,-9.271943],[-8.538442,8.634129,0.650705],[-8.434854,5.413209,-8.786296],[6.760163,3.728886,-7.328648],[6.773385,-8.168481,9.870499],[4.011519,3.583200,8.871555],[-5.942228,-9.722625,5.763183],[0.240885,-4.591657,2.453463],[-1.582498,-9.658764,6.911742],[-9.953057,1.686808,3.774555],[-8.131671,-8.177124,-7.767173],[-5.801460,7.855536,-0.773720],[-2.140625,-0.262908,-2.438447],[-8.711798,1.250739,-9.432759],[3.002347,7.505313,-1.886802],[6.095197,7.928781,-1.145987],[-1.697680,8.681749,-9.158642],[-8.374353,3.879374,4.155086],[-9.504608,-0.246741,-9.173924],[-0.364708,-2.445218,6.105617],[-4.704870,0.193670,-9.238824],[8.241661,-0.761957,7.978458],[3.931240,-8.079852,-4.790415],[-8.635190,5.473106,-8.430700],[-5.236669,5.101858,-3.815715],[3.724113,1.606649,2.093397],[-6.376881,-2.141413,7.537819],[0.821603,5.970244,9.438469],[4.867697,-0.372435,3.248385],[7.904190,-6.119881,-1.657982],[8.443245,0.055106,-4.883405],[-5.899711,-6.253472,-3.122120],[-3.083798,-5.360593,6.474462],[-6.766472,7.804769,4.425315],[7.567689,-2.511006,2.433664],[7.269834,-0.370612,6.688091],[2.446792,-5.200377,5.706948],[0.804208,-9.800495,1.719135],[5.152771,9.909492,3.995713],[8.906808,1.461634,-2.200827],[-4.427192,7.759569,-1.993922],[-9.540158,-2.397985,1.647855],[4.506382,-5.122358,-3.872943],[5.931650,9.609902,8.857525],[6.493347,6.455429,-8.666813],[6.996692,7.530087,-7.260871],[9.008753,5.934297,5.657078],[8.359336,2.104070,-6.913155],[-1.140503,-6.803106,-6.085241],[-8.404670,-7.640110,-4.944730],[7.790272,-2.015679,-7.211403],[-7.010352,1.484637,-8.858376],[4.614392,4.187808,7.979451],[-3.142785,6.088010,7.209685],[-6.934357,8.815956,9.273909],[-0.777593,8.770922,-7.601304],[2.697376,7.323959,-4.321265],[6.456806,-5.745846,9.402477],[-9.276936,8.614477,-4.031063],[-7.391761,-0.886001,0.281455],[4.472741,-1.391324,-6.969382],[3.011789,1.339822,-2.098648],[-5.782805,5.394242,-9.902569],[-8.774851,0.369243,-4.295005],[-1.941204,-3.683425,-1.482167],[-4.557262,3.196459,-0.660417],[8.707611,6.765282,2.595707],[9.601380,4.444563,-4.321711],[6.775097,0.992792,-6.529624],[-9.535641,-6.890754,1.361649],[-2.608283,-8.727751,-2.854829],[-8.277539,-0.635379,-8.217474],[3.320781,3.921778,2.240859],[2.547358,-9.147992,2.716726],[-6.599026,4.150222,-5.266068],[-3.180670,5.519320,7.946420],[2.923085,5.572349,9.707037],[0.215842,7.574233,-0.101012],[-5.804983,5.457458,-2.028889],[2.583017,-1.572353,7.892589],[4.653459,-4.733775,-7.638845],[-8.259912,3.923418,-6.854726],[-1.544242,8.728950,-9.373124],[-6.512479,8.590809,-4.843853],[-5.518950,3.199491,-1.438651],[7.995192,-8.290218,-7.924838],[3.250768,-4.644241,2.951208],[-0.924907,6.481396,6.335143],[9.093800,-6.970500,-1.118865],[-4.022203,5.575128,5.046987],[-4.830487,9.285713,-6.495357],[5.869228,1.853665,-5.215284],[-1.993279,-5.944272,5.732587],[-9.202019,5.547625,1.289284],[4.504030,-7.838293,1.301760],[-3.217089,-3.678998,-9.386340],[-9.695426,9.152549,-4.562029],[-8.025362,-5.806093,-2.005543],[-6.919513,-8.926235,3.895608],[3.131618,3.155513,1.396521],[-2.385082,-8.771560,-9.998472],[3.908290,-7.302433,-7.879107],[8.017659,-6.037925,8.005526],[0.778188,8.044733,6.134471],[8.907950,6.328057,-9.712060],[-9.568572,-7.036262,2.124126],[5.363145,2.036948,2.489422],[-6.507961,-4.410390,-1.762270],[1.819218,-1.783952,0.686936],[-3.456193,-9.423629,4.115948],[-9.260009,7.285198,-3.852742],[8.798934,-1.298743,-1.154105],[-7.426486,-6.526419,8.834618],[-9.414823,-6.152221,3.052727],[-6.804788,-6.789453,0.362296],[7.396745,9.004290,-2.910369],[-2.351292,-3.847804,8.260141],[-4.699154,6.165376,-8.792630],[-8.266699,-3.382604,4.285674],[-8.667043,3.464610,7.477927],[1.206486,-6.648338,6.518595],[-0.549621,9.934979,-1.122884],[2.773432,-6.110958,3.093332],[0.436175,-0.707456,-1.729655],[4.469949,8.160001,-3.900111],[0.548423,-3.575272,-9.285685],[0.803897,2.652811,9.480578],[5.056284,-5.792657,-7.947058],[-0.481008,5.564762,3.367664],[1.531598,1.867468,8.143847],[7.007403,3.790115,-6.061138],[5.428711,-7.944545,-2.341294],[0.230365,7.663762,-7.767917],[2.337848,1.449557,3.458538],[2.709414,-4.621530,3.338880],[-1.358540,-6.419368,-3.927648],[1.289480,-9.863539,-3.960217],[-9.471203,-5.814640,-8.354401],[3.232218,-1.864654,-8.883514],[2.109864,-6.560715,-3.690010],[6.702301,-6.882821,-8.902084],[-8.449262,-3.211995,-7.058219],[-3.902480,-9.691153,-7.716886],[7.569425,2.964356,-0.505810],[2.038971,5.686796,0.538637],[7.979753,-9.111865,6.361972],[6.290224,-7.601250,-2.459849],[-5.188659,9.855563,-3.592327],[3.312200,5.751360,7.653052],[6.392684,4.293624,-4.903325],[-2.311430,3.842704,9.709188],[-5.045824,8.190938,-5.988599],[1.031391,-1.804994,-5.987479],[-3.397387,-2.970423,-1.077548],[0.998961,-1.797143,-8.937059],[-2.947887,-4.494618,0.166756],[-3.842048,-3.823065,-7.245935],[2.724284,-6.007750,1.817700],[-0.480331,-4.948135,3.688176],[-1.012184,-8.844845,-2.050131],[3.950761,-6.027568,-6.464810],[8.911934,7.776195,-2.838139],[9.207431,6.683658,3.857223],[-2.454637,-7.482073,-4.888423],[0.911802,-8.578708,5.115053],[-1.109111,3.026000,4.008252],[-3.638898,-3.785631,-7.030640],[8.495846,1.912435,7.735529],[9.431424,-6.031528,1.484662],[-6.722237,-0.552505,-2.002187],[5.405616,-2.313918,4.278247],[-7.266797,1.901178,2.774843],[-5.935702,8.094286,3.376398],[-9.138856,-8.327751,-3.043675],[-5.275462,-6.702311,-3.993055],[-5.252216,2.389894,-4.090384],[-7.698892,-6.377640,-2.459856],[-9.064386,-2.954437,-6.503627],[-0.593135,9.145876,9.072816],[-4.540443,-0.312291,-9.330356],[-4.816397,-9.755920,-4.238870],[-4.068751,7.244035,-0.892068],[9.686028,-6.933175,-1.684452],[8.334248,-1.608160,2.266981],[6.931825,4.286675,-8.331329],[-8.953205,-5.502040,-8.259375],[6.345545,-7.375095,1.541615],[-1.264418,4.459613,-6.653360],[8.879165,-2.034131,-6.294724],[-8.358864,-6.045269,2.491932],[5.102099,8.011547,-5.921673],[-7.217637,-0.907546,3.687162],[0.345657,-4.710378,-7.017355],[-6.361846,6.088911,8.681569],[-0.991185,7.565740,3.841933],[7.589620,-6.080696,5.214918],[-0.770444,-1.357122,-1.487723],[-2.539743,-9.428642,-4.040339],[-2.316440,-7.318234,1.919388],[4.351568,2.387096,-1.150007],[-9.923737,-9.752638,-7.693139],[4.124144,4.578760,-4.100693]], dtype = "float32")#candidate|8927|(330, 3)|const|float32
var_8928 = relay.var("var_8928", dtype = "float32", shape = (84,))#candidate|8928|(84,)|var|float32
const_8929 = relay.const([9.344563,7.946882,4.390813,8.639704,-5.996768,3.299608,-8.350373,-8.503590,9.670722,-4.807749,9.227024,-0.093745,5.421723,-9.616644,7.710689,-8.019429,-7.414254,-5.069388,0.582149,-4.064745,8.747283,-0.114286,2.750223,6.916504,-1.001583,-7.797266,-4.037613,0.253111,4.930205,-7.943087,-9.717623,4.461706,-9.991988,-7.569661,-8.491104,1.384849,-0.995406,0.168573,-6.153898,-8.315308,-6.968045,-0.095036,-0.107470,-6.171003,0.742676,-3.423151,-2.155437,1.799166,5.932895,-1.766353,-7.927968,4.607665,8.557291,-9.957385,-5.008175,-1.642491,-9.818632,6.801199,7.339669,-6.063949,-7.339562,-7.130311,-6.300797,4.568970,9.082013,7.474059,-9.893580,-8.653611,-6.781290,3.077946,-4.935117,4.858720,4.113851,6.548341,9.075191,0.239699,-5.913333,-6.837234,7.912907,3.307690,5.718471,-9.848856,1.930017,0.053656,-9.798130,-8.342805,-2.600214,3.200219,-4.348256,-9.055451,-4.909043,6.377100,4.000246,1.231076,-2.506230,9.081668,-9.323942,9.804385,0.716462,2.296845,3.892253,-9.744656,2.267272,4.181790,-2.954452,0.412044,-6.798921,9.045231,-3.925311,-5.874410,2.308773,-9.642691,-2.487727,-6.434120,-2.018509,1.955483,9.061653,-8.878170,7.824580,3.400874,0.471288,-4.015391,7.403885,-0.897416,-4.716925,-5.285264,-8.264681,4.841897,-5.997097,-3.308852,4.300952,5.393306,2.184694,-0.758037,0.958469,-6.931813,-7.751056,-3.097089,6.463248,-7.641278,-2.217487,5.076256,0.695715,0.124149,-9.860444,7.230474,9.867198,2.478363,-4.670897,8.408158,8.061748,-3.086882,-5.992801,6.825741,2.837870,1.568406,6.750119,2.193580,-4.060683,-0.735442,-9.605073,-2.232903,-5.810389,9.526638,3.305741,1.519777,-2.741472,2.267975,-9.648809,-0.902872,-7.961578,4.141496,0.449036,-6.057292,5.828205,-8.029968,-3.263826,9.418207,-9.678335,0.426546,0.129664,-1.914350,8.370296,-1.136187,4.225837,1.079828,7.958488,4.378596,4.245205,-3.922479,-7.455916,8.277334,4.548801,-9.982261,3.544243,-7.014402,-3.730913,-9.787769,-3.659476,1.865246,-3.959651,1.927696,-0.765361,-7.042214,-3.907445,-8.019951,4.273527,-5.569976,1.747851,3.186652,-2.356803,3.518744,-8.064216,-3.152562,7.778695,-7.336271,7.403554,5.781923,-8.553630,8.258042,-6.095885,-3.738706,4.791767,-9.497120,9.615745,8.684324,1.456803,-4.542741,9.754902,-6.908855,-6.760627,-7.025182,-2.061508,9.314809,8.309256,-3.447965,5.688384,1.664210,1.945517,2.617237,4.492277,-0.608152,8.700139,6.933971,-9.402779,4.696516,-4.932533,-4.743346,8.627911,-2.990035,-0.763854,-0.265311,6.653132,5.193590,-9.720439,6.850698,2.857461,-3.656366,-7.362680,9.734639], dtype = "float32")#candidate|8929|(260,)|const|float32
call_8925 = relay.TupleGetItem(func_7462_call(relay.reshape(const_8926.astype('float32'), [13, 2, 1]), relay.reshape(const_8927.astype('float32'), [990,]), relay.reshape(call_8863.astype('bool'), [1350,]), relay.reshape(var_8928.astype('float32'), [84, 1]), relay.reshape(const_8929.astype('float32'), [13, 2, 10]), ), 6)
call_8930 = relay.TupleGetItem(func_7469_call(relay.reshape(const_8926.astype('float32'), [13, 2, 1]), relay.reshape(const_8927.astype('float32'), [990,]), relay.reshape(call_8863.astype('bool'), [1350,]), relay.reshape(var_8928.astype('float32'), [84, 1]), relay.reshape(const_8929.astype('float32'), [13, 2, 10]), ), 6)
output = relay.Tuple([uop_8865,call_8870,call_8877,call_8886,call_8893,call_8903,call_8914,const_8915,call_8925,const_8926,const_8927,var_8928,const_8929,])
output2 = relay.Tuple([uop_8867,call_8871,call_8878,call_8887,call_8894,call_8904,call_8916,const_8915,call_8930,const_8926,const_8927,var_8928,const_8929,])
func_8936 = relay.Function([var_8928,], output)
mod['func_8936'] = func_8936
mod = relay.transform.InferType()(mod)
var_8937 = relay.var("var_8937", dtype = "float32", shape = (84,))#candidate|8937|(84,)|var|float32
output = func_8936(var_8937)
func_8938 = relay.Function([var_8937], output)
mutated_mod['func_8938'] = func_8938
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7599_call = mod.get_global_var('func_7599')
func_7600_call = mutated_mod.get_global_var('func_7600')
call_8955 = relay.TupleGetItem(func_7599_call(), 0)
call_8956 = relay.TupleGetItem(func_7600_call(), 0)
output = call_8955
output2 = call_8956
func_8961 = relay.Function([], output)
mod['func_8961'] = func_8961
mod = relay.transform.InferType()(mod)
output = func_8961()
func_8962 = relay.Function([], output)
mutated_mod['func_8962'] = func_8962
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8961_call = mod.get_global_var('func_8961')
func_8962_call = mutated_mod.get_global_var('func_8962')
call_8974 = func_8961_call()
call_8975 = func_8961_call()
output = call_8974
output2 = call_8975
func_8988 = relay.Function([], output)
mod['func_8988'] = func_8988
mod = relay.transform.InferType()(mod)
output = func_8988()
func_8989 = relay.Function([], output)
mutated_mod['func_8989'] = func_8989
mutated_mod = relay.transform.InferType()(mutated_mod)
const_9037 = relay.const([[[-0.336080,3.892719,7.178401,-6.089199,8.061468,-1.344134],[-1.011314,-7.000486,7.736280,-3.026443,4.787026,8.253999],[-8.189713,-6.300518,0.063110,6.258590,-6.410789,9.993645],[-3.031225,3.912472,4.722419,-3.546282,-2.254000,2.219414],[-9.110258,-3.811588,-0.477032,-9.532723,-9.012381,-2.990618]],[[-6.211774,-4.369528,-1.736557,-6.241765,5.253937,-4.857696],[-5.481434,-3.416113,-0.407043,-7.160357,7.027548,-1.303389],[-5.428034,-6.564723,7.178262,-2.918143,4.900224,-9.593894],[-9.000057,-0.669944,0.594055,8.362458,-0.750267,-8.860395],[6.990316,4.271970,4.516151,-6.686160,-6.565198,6.728084]],[[4.593360,7.067639,-0.907769,-7.811983,5.901618,-7.629241],[-0.257437,-6.209782,5.518447,9.704887,9.711487,-5.846013],[-4.057598,-3.465205,7.906783,-9.093352,-3.234412,7.093130],[-0.493356,2.292903,5.499589,-7.114672,4.989593,-5.872975],[1.086414,8.594224,-1.672906,4.998819,3.097793,9.783493]]], dtype = "float64")#candidate|9037|(3, 5, 6)|const|float64
uop_9038 = relay.asin(const_9037.astype('float64')) # shape=(3, 5, 6)
func_7715_call = mod.get_global_var('func_7715')
func_7716_call = mutated_mod.get_global_var('func_7716')
call_9049 = func_7715_call()
call_9050 = func_7715_call()
output = relay.Tuple([uop_9038,call_9049,])
output2 = relay.Tuple([uop_9038,call_9050,])
func_9054 = relay.Function([], output)
mod['func_9054'] = func_9054
mod = relay.transform.InferType()(mod)
mutated_mod['func_9054'] = func_9054
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9054_call = mutated_mod.get_global_var('func_9054')
call_9055 = func_9054_call()
output = call_9055
func_9056 = relay.Function([], output)
mutated_mod['func_9056'] = func_9056
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8988_call = mod.get_global_var('func_8988')
func_8989_call = mutated_mod.get_global_var('func_8989')
call_9170 = func_8988_call()
call_9171 = func_8988_call()
output = relay.Tuple([call_9170,])
output2 = relay.Tuple([call_9171,])
func_9177 = relay.Function([], output)
mod['func_9177'] = func_9177
mod = relay.transform.InferType()(mod)
output = func_9177()
func_9178 = relay.Function([], output)
mutated_mod['func_9178'] = func_9178
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9054_call = mod.get_global_var('func_9054')
func_9056_call = mutated_mod.get_global_var('func_9056')
call_9227 = relay.TupleGetItem(func_9054_call(), 1)
call_9228 = relay.TupleGetItem(func_9056_call(), 1)
func_7685_call = mod.get_global_var('func_7685')
func_7691_call = mutated_mod.get_global_var('func_7691')
var_9234 = relay.var("var_9234", dtype = "float64", shape = (588,))#candidate|9234|(588,)|var|float64
var_9235 = relay.var("var_9235", dtype = "uint32", shape = (9,))#candidate|9235|(9,)|var|uint32
const_9236 = relay.const([9.371052,-6.383784,9.679563,-6.347987,4.567397,-2.003242,5.051869,5.339431,6.055915,-0.749978,3.791106,6.121418,2.536077,-4.334036,9.290196,-3.881241,9.523841,-1.720684,-8.551786,-2.280825,-0.540214,-7.206912,-6.680843,3.443257,9.508637,0.740401,6.471549,-6.357882,-4.494937,0.600282,-8.725644,-8.495592,7.759369,8.966481,2.228475,4.473325,-5.048207,1.825560,-5.207735,-5.085792,-4.649975,-7.645565,3.964502,-6.483470,9.208723,7.057154,2.659791,-8.059414,-1.688632,-5.086434,2.615342,-9.622244,4.892537,-0.970791,-2.944889,0.033063,-5.773279,-6.502748,2.833372,8.463458,0.438014,-5.356649,-2.340522,9.339436,-4.336421,-7.303793,7.315985,3.362720,0.641102,-9.983367,9.552930,-1.758625,-8.876519,7.434640,-3.808813,-2.632233,2.800358,-1.649316,3.318181,-0.161831,-2.469052,4.245950,0.619938,-7.445056,-2.096610,-0.154632,0.961772,-9.005538,-1.655776,6.905156,-2.394308,-4.561921,-7.787800,-5.386445,-5.337028,-2.381752,6.914416,-4.035845,-9.563112,0.292030,-3.696093,-0.852580,0.797062,6.915453,-3.559452,-8.980990,-0.410158,-1.534961,1.598726,7.645388,-5.394525,-1.550654,7.251848,-0.875756,-0.522070,7.272245,-9.076056,-8.489053,-0.962845,3.694170,-2.579567,8.406372,-4.263546,2.712265,-0.001282,5.783685,-3.373146,9.885468,-1.591089,-4.858485,9.963077,8.324612,3.561418,7.525954,3.698181,4.513528,-6.237104,5.291439,-0.215548,9.153270,1.820087,8.531247,-1.263193,0.993714,5.830437,4.456762,9.588963,-1.440570,-4.917900,-1.621029,-5.916484,3.264392,8.611135,8.735775,-9.250841,-9.811128,5.933852,8.203378,-5.394717,-7.265868,-1.317836,6.051764,8.438797,6.044477,4.942821,6.489922,0.988672,1.123188,9.909693,-9.805053,7.078295,9.897320,7.589106,-9.661528,-6.653077,6.857616,8.318219,-1.077912,-0.424215,-2.979407,-6.167612,9.754246,0.845789,-8.517074,0.583399,-5.643082,8.985930,9.872608,-7.576267,8.139887,-4.852556,-3.310375,4.091405,-7.006904,-9.318304,0.021823,5.332428,-2.407206,7.193195,4.745366,0.805259,6.789667,-4.023749,2.874550,7.418363,9.108384,8.733902,1.602517,-6.474445,-9.789793,-6.602934,0.025660,-4.660806,-4.853457,-5.605726,-0.149380,5.406596,8.632475,-0.163958,1.981729,8.719230,-6.192533,-0.450804,1.716864,2.299375,4.348283,0.170220,8.189543,-8.397185,-2.928140,-8.952035,-3.030532,-2.540502,0.882071,9.512968,-9.522995,4.458413,4.909021,-0.268565,-2.590373,6.433782,-9.532050,6.258878,-8.123566,9.282821,-1.111889,-7.633242,-8.213921,-1.119071,9.804309,-6.079844,-1.153800,-2.267385,9.787100,-7.038202,8.045201,6.606467,3.773805,2.865296,-8.096563,-4.919012,-0.977244,7.308854,1.880890,-6.304344,1.551580,8.021248,-7.604563,-2.781330,-5.171000,-7.056127,-1.603010,5.236232,-8.393443,1.897056,-4.338733,6.728041,-7.367707,3.736950,5.182956,7.070045,-8.680864,-3.192551,-1.824191,-1.843294,-4.991635,-3.899275,-5.525428,-9.144125,5.231975,4.937479,9.651840,-3.715741,3.932985,4.054724,-2.734898,-6.904074,5.109656,0.620114,8.811692,8.205447,-6.110154,-4.893615,0.399869,0.295344,-3.879981,-2.468153,-8.872313,-5.586794,-2.285364,-3.318002,-9.185340,6.221009,9.774067,4.873503,-1.496419,-5.930330,5.101122,2.402008,0.316002,6.602858,9.836571,3.305303,-6.380499,-0.497983,-8.682461,5.512551,4.845809,-1.064797,-5.506921,9.793025,-0.121170,9.346562,-3.104102,4.020127,-3.449364,1.762640,-4.043232,6.040651,-8.865882,-6.994565,-2.050735,7.680187,-5.469868,-9.246721,-1.362791,-3.838390,-7.723955,-5.472128,-3.838723,-1.803769,-8.372659,6.638953,9.999637,2.320482,-5.539129,-8.967886,-5.559558,-0.950899,0.683613,5.458081,-7.454343,4.849100,1.142738,1.340898,6.618580,-8.784367,9.109096,-4.069702,-9.379777,2.383740,3.781813,7.828117,6.823753,8.661776,2.497812,-6.131631,-0.123588,-4.187261,8.162368,4.262956,2.291611,-4.447018,3.322388,4.889146,6.340197,-1.609162,-8.335729,-0.365997,4.764344,8.380944,-0.135642,-8.544977,5.067819,-3.726151,-3.475829,9.736872,-9.667206,8.383011,-6.951050,6.186298,2.124047,9.267588,-6.717913,3.136153,3.784404,-5.289876,8.848068,-9.403324,5.755799,0.256956,-0.301143,7.951367,4.341446,8.194104,-4.479204,9.428699,-7.922777,9.049780,-9.119403,5.788445,7.171913,8.371780,-6.667432,1.769676,-5.233882,-3.440074,9.628816,7.117025,-1.994368,5.862804,-9.046337,-8.090977,2.724386,2.344139,-4.106967,7.142182,-6.707285,-0.303712,-1.484112,-1.553929,8.996376,5.088397,-4.299531,0.943839,5.411499,7.870267,2.385230,7.098260,-9.501615,-9.774332,9.349404,-5.487741,-2.712651,-3.801667,8.601016,8.378841,3.382237,7.817989,-0.410237,-1.614985,1.632252,5.654848,7.997755,2.326307,0.313332,2.007984,6.303943,-8.643686,-8.266022,-4.461076,4.032837,-9.053375,2.997991,-5.043048,-0.656664,1.146835,7.599846,-1.525187,9.584063,-8.855808,2.279063,3.319351,2.847441,-8.549133,9.461491,2.428782,2.494435,4.971499,-7.888808,-2.691964,0.893825,-2.979787,-8.472496,2.710085,4.997459,-9.673280,9.308933,6.633601,3.442169,0.263644,2.436676,8.832411,-6.597472,0.911739,-8.288061,-8.424555,8.232144,-5.449721,0.321234,-0.582317,2.832390,-7.150701,-4.856471,-7.081542,6.356355,-9.679310,-2.165526,4.995657,6.197876,0.594176,-0.813644,6.656588,2.958438,4.489794,4.743503,2.782073,-8.574396,-3.641038,9.011384,-5.541487,-9.656211,9.027478,-0.083255,9.122659,4.803642,-0.236421,-8.103602,-6.659147,7.311743,9.345412,8.762990,-5.462991,-8.110422,-3.756239,1.097759,-3.550181,-6.391305,-7.363833,8.914720,-7.828737,4.969490,-6.765881,-8.364669,1.750538,1.137888,-0.897466,7.089946,-9.825987,2.463289,2.717435,-2.457192,-3.888805,-5.688581,9.523030,5.586246,-8.773755,-2.825149,-7.222232,6.122710,1.620134,-4.066739,4.520150,-8.544825,9.938472,9.624259,-6.298684,1.012134,-0.518380,8.241891,6.111063,7.647126,6.596751,-3.899005,-0.645281,3.026988,-1.794929,9.677434,4.100822,-8.657989,-1.430540,-5.223658,6.365390,6.835959,5.470398,4.961893,9.212474,-1.008921,1.645530,2.462641,7.683167,7.086636,-2.630575,3.337130,-0.103320,6.620612,7.317637,1.858722,6.568634,-1.199244,6.887374,9.628683,-9.871490,-1.430035,-0.766792,0.230929,-6.748839,-4.356683,-4.230514,6.626328,1.510246,1.472332,-0.872413,5.391882,4.710007,-0.383346,4.591466,-3.046734,2.763546,7.427603,-0.034985,2.247470,7.102829,8.678149,-2.935702,-7.927991,6.271116,-2.300377,-1.855049,2.582598,-2.320152,8.418788,0.401188,8.291351,-9.620238,1.318759,-7.592541,1.789950,-8.917834,1.045780,5.014662,-6.976876,1.619858,-5.102506,-9.634583,4.973683,9.397570,-4.211582,-9.139591,-3.936246,9.948546,9.328412,-8.432393,0.718784,-7.318586,6.089261,9.445005,-6.578740,8.427147,-6.441505,8.577547,-4.794616,-0.153235,0.126849,-6.571688,3.529394,4.306866,8.313139,-9.261963,-2.283124,7.956396,-4.069196,9.270392,9.735274,-4.342703,-5.811910,-5.982674,-0.315415,-3.096848,8.689719,1.118408,-8.324411,-6.712524,7.884133,-7.631686,4.932523,1.867533,-3.027352,-2.546796,0.493664,-3.374522,-0.498020,-9.412107,8.675787,6.890971,-9.919770,-2.480802,1.463878,-1.501551,3.183035,4.696500,9.225386,-4.631010,3.859026,2.063934,4.093873,9.188986,-3.259148,1.437830,-0.380372,4.648888,7.651568,8.217770,-9.426680,0.708567,-3.870573,-6.702558,-8.568163,-1.635470,4.137398,-2.190386,3.023996,8.548946,-6.013461,6.064790,3.460967,4.870053,-4.482563,0.142693,-1.290204,-8.591031,3.119119,-8.346428,-2.109822,-1.367999,7.410059,-7.844280,-3.482763,-5.388531,-8.354566,7.574826,-4.847566,5.212472,6.237724,2.289793,0.817524,-1.106830,-1.095487,-3.118688,5.298108,2.254671,-3.450415,8.720177,6.437576,1.708543,-3.577435,7.543392,8.785041,5.768463,5.591803], dtype = "float32")#candidate|9236|(770,)|const|float32
var_9237 = relay.var("var_9237", dtype = "float32", shape = (135,))#candidate|9237|(135,)|var|float32
call_9233 = relay.TupleGetItem(func_7685_call(relay.reshape(var_9234.astype('float64'), [588,]), relay.reshape(var_9235.astype('uint32'), [9,]), relay.reshape(const_9236.astype('float32'), [77, 10]), relay.reshape(var_9237.astype('float32'), [135,]), ), 7)
call_9238 = relay.TupleGetItem(func_7691_call(relay.reshape(var_9234.astype('float64'), [588,]), relay.reshape(var_9235.astype('uint32'), [9,]), relay.reshape(const_9236.astype('float32'), [77, 10]), relay.reshape(var_9237.astype('float32'), [135,]), ), 7)
func_8176_call = mod.get_global_var('func_8176')
func_8179_call = mutated_mod.get_global_var('func_8179')
const_9242 = relay.const([4.214239,-5.552920,-4.077221,0.152788,-6.381223,7.570798,7.434249,-6.847570,-2.482333,2.144983,6.555569,-1.771844,-4.855878,-1.631566,2.072760,-0.321906,6.015641,0.429594,3.035473,-0.232487,4.730239,-4.514688,-6.626389,5.022332,5.511108,-0.763004,-4.403476,-0.010189,-2.744622,-1.882203,6.574288,-9.733252,5.666305,-2.394319,-4.162264,-0.486155,7.175440,-9.566812,8.769247,-1.326338,2.663081,2.433989,5.930940,-3.023534,4.821236,3.841170,-7.788239,3.179016,7.090192,-3.024714,-3.113633,-4.126255,-0.793598,8.297880,-5.463480,-4.305547,3.141190,9.357632,4.224959,-7.243567,-9.703747,3.612391,-6.054659,-4.005298,0.051492,4.401312,5.281800,3.997643,6.775358,0.022772,-7.791932,6.306152,-0.599001,-5.279211,-3.760300,-2.837659,-0.859751,6.754193,-1.114821,-4.903434,6.055676,-8.515681,1.242420,-4.025542,-2.037209,8.953401,7.628188,-1.274008,3.823456,-0.234631,-0.773888,3.917045,-8.295738,0.596205,-0.129568,-1.100828,4.963413,9.367183,-9.902239,5.066576,9.158461,4.026487,1.141796,-7.682601,-3.079195,4.352015,9.515748,3.572514,5.164624,5.338116,4.157137,1.639653,-7.794053,4.751285,-9.448866,6.354104,0.968127,0.415398,1.954191,-9.261991,-3.089307,-6.921825,-2.904628,7.366068,-1.204838,1.980695,0.051143,-7.319487,1.175414,-6.916103,4.442984,-1.228828,0.513985,3.790260,0.744978,-4.880980,8.104398,-4.755690,0.831394,-8.292240,-4.324426,5.373519,-4.043647,7.979929,1.967449,-3.834091,5.839719,-9.193238,-8.140937,0.468601,3.430211,1.795195,-0.784105,-2.139962,6.076763,3.607089,-7.284346,6.202851,6.579274,3.118173,0.281054,0.634818,-2.880721,7.123879,7.273419,-8.118613,-1.705494,-1.314485,5.370166,-5.858807,3.135819,-6.466796,-6.715359,-6.373410,-2.339917,0.796718,6.067746,9.146476,-3.475317,-1.072366,2.249463,-7.346228,-1.245489,8.572560,7.932923,9.647297,1.318604,-3.678389,3.644220,9.459641,-0.386328,3.275737,5.618333,8.324313,7.729893,-7.149359,2.350117,1.719629,1.047247,5.503647,-7.743961,8.388992,2.253567,-0.689658,-6.991267,-9.381059,-8.354353,6.780431,-8.912040,4.423493,-5.579100,7.511677,-5.138141,-4.878961,7.960578,-6.642677,-6.911992,8.799041,9.593934,-9.380812,-0.779619,9.674110,6.702937,-9.167317,8.302515,7.709643,9.135291,9.410364,0.961251,3.284511,-8.946102,4.279699,0.294375,-0.848515,-6.552030,2.572997,2.347041,5.442946,9.145095,2.329200,0.419796,-7.614121,7.746304,-9.106595,8.513756,8.626432,4.900665,-6.612010,6.915446,9.897902,-7.700799,-0.466603,6.007972,-9.815541,-3.204036,-6.511513,-8.637702,-5.172019,-3.392301,1.252358,8.510356,9.405912,4.410743,7.913200,-0.224078,-4.014204,4.198222,9.344292,-0.320575,2.158610,3.965889,-7.254204,4.217852,7.255753,9.267120,0.890259,7.824484,4.323458,9.220131,4.084816,9.014333,-2.991748,3.121989,-5.642370,8.134958,-4.180396,8.039932,-4.038241,5.394909,-8.924451,-8.898121,8.028249,3.814126,-6.730984,-9.120724,-5.798044,7.543098,-0.463440,-5.986111,-6.433651,6.222260,-0.694563,3.853020,5.472196,-0.987665,8.729226,8.104097,-4.647983,2.669622,1.957012,6.686099,-5.412842,-7.794674,2.975730,8.059978,-8.656764,-2.144487,7.584564,-5.589571,-1.159947,-7.726585,2.817614,6.951956,-2.729868,0.695358,-0.237224,-7.583131,4.264051,2.824906,1.332078,5.454970,1.691275,8.947266,6.175644,1.458790,-9.047850,-8.689137,-1.085907,-9.794463,-0.312485,-7.423184,-1.516999,2.541492,-2.156207,-3.639005,4.440034,2.233640,6.314900,9.974542,-8.426287,-6.587763,6.710417,5.171006,-6.724437,-3.592091,5.548616,7.559528,2.746623,3.951808,-6.256509,-3.958941,0.992830,-1.454550,-7.445447,-4.311755,5.663263,0.745155,8.800373,-5.191256,-3.936045,-7.167046,3.838444,2.577479,3.362328,-8.938157,-5.631578,5.006278,3.918341,-1.756940,-3.528384,-5.332655,-7.082109,-4.900275,-2.934031,3.323898,3.315448,-9.077397,-0.835915,-9.768955,3.321200,9.618169,2.084273,4.519325,-6.946281,-9.879531,-1.807253,-8.016219,-9.801824,-9.763059,0.691364,-0.206218,-0.950470,-7.388871,-6.078213,-9.679729,9.614932,-9.098627,-5.040788,3.376519,9.312149,2.749152,2.438502,-6.402368,-6.593739,-8.403115,1.501025,3.037235,-5.045793,-1.598709,-9.258931,-0.206762,-2.050247,-0.578361,-2.946737,9.750977,5.036578,-8.984312,3.472256,-3.685686,9.906267,3.485609,4.814081,-2.061856,-5.674823,3.296683,5.030917,8.346417,-4.671533,2.114125,2.229221,-6.921115,5.306316,8.087311,-1.630091,4.085392,4.203151,-9.941046,9.104063,-4.652478,9.935555,-7.093400,0.651059,-3.703385,9.484512,-6.123695,-0.441957,3.585847,8.424032,-5.507921,-3.003247,-6.331652,4.829974,7.390487,8.960772,-3.784048,9.066022,-5.655107,-7.694314,-2.958613,-3.729437,3.371931,1.177302,-4.447905,9.585218,-2.895113,-8.186558,0.584017,9.466155,-2.545059,-8.329001,1.306338,0.333450,-4.328989,-5.588459,1.857234,-3.623120,-7.237844,8.821994,-8.564980,7.209066,4.583385,7.073636,3.570703,2.689827,-3.933355,9.254876,1.009218,9.798119,-0.503867,-4.997309,-7.583959,-5.783716,-0.799325,0.649560,9.679226,-8.277175,7.037419,4.451797,-4.922464,-2.751369,6.942404,0.681367,6.366192,-6.918334,-0.266693,7.778911,1.703343,8.954611,-8.115058,0.085410,-8.203485,-8.037515,9.898528,-8.697464,-7.321135,-0.152569,-2.020131,-3.380270,-9.196344,-5.725417,9.147254,2.924651,8.774468,-9.866053,-9.748662,0.137744,4.313800,-8.025546,-0.021864,8.337373,3.393326,-6.667071,2.333228,6.221741,9.349945,-1.345576,-1.398443,-3.790161,7.076975,3.531563,-0.641785,-0.258825,-3.105463,-8.626579,2.856497,2.212351,-0.143154,7.510772,-3.526030,2.793476,-1.158479,-7.589725,-2.480984,-3.233673,9.369693,9.927851,0.760410,-5.875336,-5.544647,-5.092872,-7.203254,-3.312246,2.664328,-3.680374,4.257065,7.962964,9.495227,-7.346091,-7.859914,9.211948,-0.997673,2.668887,-6.734204,9.520637,0.898998,2.768112,7.960692,-5.585541,6.863716,-4.407843,-5.271106,-6.518883,9.131122,3.396126,1.759830,6.053129,0.550737,8.657472,-0.947203,-1.938401,-6.465721,7.514732,-0.088521,-3.233175,-2.492087,-4.378628,7.024421,2.498396,6.672846,-2.645530,5.216692,-2.455579,2.702684,7.847460,-9.126594,0.944127,1.135445,-8.332421,-2.664605,1.647534,0.893743,2.532473,-0.744735,3.361816,-4.744685,-6.077948,4.728666,-4.461139,4.935561,3.822581,-6.322474,-1.593587,7.852963,6.505737,-1.104350,1.703076,-9.027677,-7.228579,5.251034,-5.764271,8.976490,5.405457,4.727351,9.544873,6.339229,-7.678467,8.777003,5.732565,5.191287,-3.306506,0.199014,6.313234,4.151101,-7.625243,7.756632,-7.958078,-3.739110,2.335601,2.021985,-6.621404,8.119268,-0.191938,1.326468,-1.866084,-1.378230,-6.027294,-6.993117,4.206870,4.074956,-0.642684,-2.537174,-4.760238,-5.069388,-5.921733,-0.522631,8.933110,0.786171,5.513001,0.138777,5.265890,-2.623471,-3.747629,5.786907,-7.686015,7.041073,7.234875,0.496636,-4.986696,-5.677437,-0.633817,5.276654,-4.427759,0.480697,-6.621144,5.916080,8.835544,3.291496,-9.124949,8.793316,-4.029703,6.489160,2.381080,1.783139,9.869919,-8.468268,-7.280635,3.593669,0.535135,-8.342110,6.527559,9.367738,-2.144169,-0.960013,-4.915202,9.056165,3.475484,-1.850459,-6.553696,-9.724993,0.390636,9.160119,6.795495,0.209064,8.612978,-5.132754,0.547654,7.272503,-7.510170,0.868846,-4.671264,8.769289,4.874637,-3.217930,0.413327,9.647396,7.493996,6.544168,0.597435,5.242298,-5.810849,-6.427539,-6.942696,8.580966,1.902636,0.940000,-1.414607,2.298207,-7.025406,5.289916,4.245065,7.592347,8.268143,1.105463,3.505437,0.760595,-5.633520,0.871260,-3.629381,6.557490,4.944864,3.908044,-4.522255,-6.066078,-6.293476,-9.631212,-0.837594,-7.423657,-3.753336,4.445412,5.457027,-7.959735,-6.967744,-3.721677,-8.865797,-9.399914,-5.055120,5.861562,6.827829,2.469315,3.586539,1.784866,9.138296,3.505870,2.034765,1.087945,-2.840849,-3.070672,-4.450191,9.290105,-9.694778,-0.422265,6.138763,3.799342,9.398178,-4.183027,9.324002,4.893329,0.843494,-4.570967,9.017687,4.987959,7.958058,-2.998315,-5.569910,4.724107,0.612163,4.447674,5.226833,3.755228,-8.693439,-0.112927,3.467950,-6.135701,-6.428181,5.642446,6.790893,5.902276,-9.107454,-4.570000,3.051284,-9.194432,2.522762,6.919449,-2.001860,-7.709661,-5.942398,-2.343762,-2.911658,4.433749,-9.830759,-4.525213,0.715209,-9.039033,8.481751,8.569234,-3.417107,5.493275,7.982375,2.053189,-9.010856,-3.655804,-0.759311,-1.882336,-9.714258,5.556040,9.476979,-8.931810,-4.986985,-5.900961,2.988038,-9.382373,6.080429,1.006721,7.571523,4.127089,-7.357311,-7.271787,-7.384669,3.288877,-9.794551,5.667192,-9.527009,9.542912,3.694519,-7.926450,0.053774,-9.374492,4.342377,0.527438,-5.726721,-3.281260,6.598785,8.608920,4.281389,-3.946566,-8.357497,5.506301,6.917562,0.431120,3.459359,1.192579,-7.299785,3.150154,4.664785,-6.906533,6.096122,3.167089,-9.995351,6.939573,0.205118,2.632266,1.718885,1.482459,9.680285,8.482245,-6.212999,2.793326,9.578329,-4.757297,-0.469852,-3.343328,0.199508,-7.558818,5.979356,-6.444580,8.290141,-9.376304,-5.576367,5.666147,-2.933673,-9.829179,0.865286,7.629803,4.520637,9.883066,8.396546,0.816281,9.313872,-3.947019,6.513570,-9.144726,-7.634406,-8.847973,-7.912046,3.768045,-0.071929,0.666197,0.865917,-5.570711,1.916565,-3.815904,-2.246605,8.162322,4.646314,-7.569610,-7.527018,3.416233,3.617873,-7.916707,2.929010,-8.912447,8.918861,7.432440,-0.558249,4.505192,-7.586915,-3.546486,-2.459033,-3.649446,2.954086,-5.715164,9.038575,1.683063,6.046358,-1.859619,3.762077,4.286885,2.440004,8.641808,-9.165730,2.454822,6.209138,8.395826,0.424062,5.977425,-6.077741,7.278258,-1.868583,-0.188845,-6.196563,-1.879802,5.577455,-4.970919,0.381075,0.286830,6.249494,-8.527461,-5.097010,-7.714567,5.201691,8.964044,6.176204,-1.449352,4.689763,-5.232014,6.131171,3.023125,-9.401708,2.154035,6.692433,0.489136,1.710300,6.541601,-9.717213,-0.612938,-8.141333,7.019113,-5.507950,2.138113,6.660144,5.539738,-6.412604,8.120043,-6.682436,-0.552950,4.805158,-5.721303,7.595005,9.413002,0.507652,-2.528545,1.074932,-7.936903,5.447351,2.349150,2.573259,5.971035,1.790990,-4.357954,-4.997680,9.616074,-3.511279,-1.336873,-5.829348,5.719203,6.492853,8.219065,-4.666686,-1.443952,1.415439,-6.321231,-2.959746,-2.664197,-5.979326,-8.090639,-9.022407,7.403725,0.060051,-9.248186,3.972792,-7.824961,2.883488,0.448250,1.100004,9.963181,9.357962,3.623994,-3.926309,1.738952,-4.777928,9.166665,1.880278,1.005999,-0.623480,-3.882876,-1.721945,3.109088,-0.170866,7.208519,-5.205047,-0.338245,-9.193761,-3.097782,-8.105371,9.783777,0.972099,2.059255,3.760850,8.300462,-4.064646,1.090470,-9.348199,9.139020,1.416781,-1.122098,6.996877,5.487990,-0.415862,-4.401924,4.551871,4.475399,-2.822871,-6.364081,-3.880962,-2.609474,5.047554,9.082061,-5.793273,0.097187,6.062722,1.935264,-7.403520,-7.150111,-1.988853,7.182484,-6.591573,-7.794201,5.182122,0.233797,4.949047,8.376031,6.812697,-0.856483,9.186770,-1.729716,-8.697749,4.374533,-6.763063,8.373924,7.602286,4.227795,-0.682621,-5.137408,-4.068142,9.243255,3.930822,-6.346367,7.801965,-7.545771,-1.476023,3.951234,3.095220,-4.468242,-7.099146,-3.720785,-0.767351,7.199639,-8.346178,7.865841,9.919831,-5.144158,8.179037,-0.249797,2.829403,1.855778,1.406313,-6.457477,6.106346,-9.775802,8.226137,2.232574,-2.989967,-8.007793,4.829572,8.111654,-2.825224,7.323466,4.069606,-5.610987,5.535682,-8.723520,-3.294872,9.713248,6.045503,1.506215,-9.506470,9.990600,7.267999,1.202686,2.894979,-0.525450,-4.555100,0.937757,0.998923,7.926127,1.504259,4.218023,-7.850310,9.463803,-0.462182,-8.515521,-4.789531,-4.950702,4.187397,-1.567429,-5.947374,-7.976288,-0.335144,-2.463262,3.690023,-7.607053,-9.381972,-8.985872,-3.040606,-1.420203,-0.593707,-4.077648,-5.088782,7.195239,-0.240354,-0.865891,-1.882925,-7.251014,-1.436295,-6.117351,-0.798836,-7.005165,-2.816381,3.761576,4.492652,9.476614,3.688281,-2.216106,-9.254729,3.769012,8.329869,-9.362682,9.062792,-1.618727,9.845608,9.460225,-2.760234,-2.814541,8.378152,1.354191,-4.875218,-3.421322,-7.157667,5.260123,-7.286788,-0.940024,7.136030,5.596609,5.889187,-9.375915,-0.726170,-9.631696,-1.035458,3.234634,-8.404470,-0.620246,-7.132044,-8.152163,4.688703,2.995856,5.292888,9.418600,-9.957763,3.673615,-2.724442,0.524715,1.784140,0.514723,-2.149322,9.142214,-7.401397,0.872523,9.752997,1.490970,-4.391337,-4.079593,-3.786743,-7.267853,2.638709,-8.612371,7.926110,-5.508258,7.623094,-5.715373,7.037767,0.581460,5.186305,-3.086370,-8.087870,5.745775,-5.436088,-6.296243,0.697802,-2.502574,-5.468496,9.407327,-3.581628,8.966302,5.795962,4.888526,2.321597,-2.653347,-2.689326,9.013947,3.099050,1.070486,9.011345,-1.524962,-6.738042,9.434237,-5.424111,-3.315251,-4.625248,-2.671370,-2.462490,-9.976957,-0.640542,-0.690228,3.874379,-2.161157,9.051343,5.588392,8.871683,9.808808,-4.386661,4.054429,2.842700,6.881407,3.030875,-9.752902,2.458540,9.089649,4.567548,-1.948423,-4.716465,4.245996,-8.485497,-5.388153,8.815515,3.927737,-8.400330,-2.334548,7.539943,5.711031,7.770263,-6.234186,3.436774,7.778595,7.948957,3.538308,-3.725861,9.471372,4.373046,-3.418916,-3.906369,-8.255123,-4.880084,-9.575975,-9.065836,-3.648453,9.009555,4.081488,2.026436,-8.193991,-7.355873,-2.000175,-2.922351,-3.222326,9.586319,-3.430509,-1.810640,-3.879931,2.784545,-2.447879,-0.653222,-7.104742,7.652221,-1.734863,-2.007076,-4.854657,3.475607,2.459921,-6.093130,3.942082,-7.570296,1.602239,8.812318,-0.369270,9.880376,-7.271604,8.804696,3.422094,-1.421837,7.569619,-8.244680,-4.064202,-3.156485,-2.229730,3.921819,-7.382310,5.458673,-4.684211,4.708488,-9.406654,-5.473746,9.060133,8.627608,-9.465634,-6.870264,-3.792969,1.203615,-4.620068,-5.854624,5.412586,2.745203,5.333128,6.485848,2.068449,-0.724924,9.798580,-1.458895,5.435667,-7.206891,-9.454058,9.145008,9.993700,9.133910,6.379420,-2.004068,4.756593,-7.336217,4.195821,-0.165123,1.703424,-4.016788,9.417160,6.295514,-3.340006,3.753238,-0.222235,9.442083,7.229107,-6.054719,-6.131048,5.713985,-5.329300,-7.534755,-8.290435,-1.928632,-4.479938,-8.309147,7.310160,-6.227898,8.065441,-6.616951,-7.378695,-1.253439,-4.643245,-0.518915,9.230489,-4.265537,-8.356875,2.099483,-7.927010,-8.534898,-5.498422,-5.176969,-1.267039,4.549266,-5.773115,4.886380,4.173445,6.327308,-4.713500,-9.218222,6.757109,3.820648,-4.105073,-5.478347,-0.853384,2.863643,-4.332151,4.402386,-5.246961,-8.881434,-6.008038,2.869553,2.915157,-6.849214,2.694177,-5.029859,2.490824,-3.291640,-7.966255,-8.904996], dtype = "float64")#candidate|9242|(1470,)|const|float64
call_9241 = relay.TupleGetItem(func_8176_call(relay.reshape(const_9242.astype('float64'), [1470,])), 0)
call_9243 = relay.TupleGetItem(func_8179_call(relay.reshape(const_9242.astype('float64'), [1470,])), 0)
func_8226_call = mod.get_global_var('func_8226')
func_8227_call = mutated_mod.get_global_var('func_8227')
call_9244 = relay.TupleGetItem(func_8226_call(), 3)
call_9245 = relay.TupleGetItem(func_8227_call(), 3)
func_2378_call = mod.get_global_var('func_2378')
func_2381_call = mutated_mod.get_global_var('func_2381')
const_9259 = relay.const([8,-7,-1,-6,1,9,-4,-5,5,-2,7,-1,2,-2,3,-1,3,5,5,6,-7,-2,-3,-4,10,3,5,-2,-1,2,-2,-6,10,-10,5,1,-5,5,-3,-4,-6,2,-2,8,1,-5,4,-7,-3,9,4,-1,4,-7,-6,-10,10,4,6,-3,-6,9,2,-2,2,-6,-3,7,5,-4,7,-5,-8,8,5,-3,4,8,-8,4,6,-10,6,-6,-3,6,-8,8,-10,-2,-10,5,-8,1,-7,-8,6,2,5,-5,-10,-10,-1,-4,5,-7,2,-10,-9,6,7,-1,-2,-6,-10,-7,3,-1,-4,-5,-3,-5,-6,-3,7,3,3,-8,4,4,-7,8,-8,4,6,-2,-2,1,-3,5,6,-5,-1,-6,7,10,-2,-5,9,-4,-7,-1,-3,-10,-9,-6,4,-5,-4,-9,10,-6,10,-3,-1,4,-3,-8,9,5,-5,-4,2,-4,-10,-9,4,5,9,5,-4,7,-5,-6,-2,-4,-1,8,10,2,-6,-10,-6,-8,-2,-4,-3,-6,5,5,-2,-6,1,-8,7,9,-9,-6,6,2,9,8,7,2,-3,-9,8,-8,1,-10,-6,-2,9,-1,-5,7,-1,6,7,9,-7,-7,-4,-5,-2,3,-3,-2,4,9,8,-3,-1,6,9,9,4,10,-10,-2,8,-10,-2,-3,-8,8,-10,-5,-10,-8,6,4,3,7,8,8,7,-9,2,5,-6,-8,-4,9,3,4,7,9,-3,-5,-8,-9,5,-1,-1,9,-1,-6,-9,8,4,-1,-1,1,7,-7,1,7,3,2,-6,3,-7,2,-6,6,-6,1,5,3,5,6,-5,1,3,-4,-2,8,-8,3], dtype = "int8")#candidate|9259|(320,)|const|int8
call_9258 = func_2378_call(relay.reshape(const_9259.astype('int8'), [10, 2, 16]), relay.reshape(const_9259.astype('int8'), [10, 2, 16]), )
call_9260 = func_2378_call(relay.reshape(const_9259.astype('int8'), [10, 2, 16]), relay.reshape(const_9259.astype('int8'), [10, 2, 16]), )
bop_9268 = relay.greater(call_9227.astype('bool'), call_9233.astype('bool')) # shape=(14, 8, 135)
bop_9271 = relay.greater(call_9228.astype('bool'), call_9238.astype('bool')) # shape=(14, 8, 135)
output = relay.Tuple([var_9234,var_9235,const_9236,var_9237,call_9241,const_9242,call_9244,call_9258,const_9259,bop_9268,])
output2 = relay.Tuple([var_9234,var_9235,const_9236,var_9237,call_9243,const_9242,call_9245,call_9260,const_9259,bop_9271,])
func_9285 = relay.Function([var_9234,var_9235,var_9237,], output)
mod['func_9285'] = func_9285
mod = relay.transform.InferType()(mod)
var_9286 = relay.var("var_9286", dtype = "float64", shape = (588,))#candidate|9286|(588,)|var|float64
var_9287 = relay.var("var_9287", dtype = "uint32", shape = (9,))#candidate|9287|(9,)|var|uint32
var_9288 = relay.var("var_9288", dtype = "float32", shape = (135,))#candidate|9288|(135,)|var|float32
output = func_9285(var_9286,var_9287,var_9288,)
func_9289 = relay.Function([var_9286,var_9287,var_9288,], output)
mutated_mod['func_9289'] = func_9289
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7970_call = mod.get_global_var('func_7970')
func_7971_call = mutated_mod.get_global_var('func_7971')
call_9307 = relay.TupleGetItem(func_7970_call(), 0)
call_9308 = relay.TupleGetItem(func_7971_call(), 0)
output = relay.Tuple([call_9307,])
output2 = relay.Tuple([call_9308,])
func_9361 = relay.Function([], output)
mod['func_9361'] = func_9361
mod = relay.transform.InferType()(mod)
mutated_mod['func_9361'] = func_9361
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9361_call = mutated_mod.get_global_var('func_9361')
call_9362 = func_9361_call()
output = call_9362
func_9363 = relay.Function([], output)
mutated_mod['func_9363'] = func_9363
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8040_call = mod.get_global_var('func_8040')
func_8041_call = mutated_mod.get_global_var('func_8041')
call_9399 = relay.TupleGetItem(func_8040_call(), 1)
call_9400 = relay.TupleGetItem(func_8041_call(), 1)
const_9408 = relay.const([[[True,False,True,False,True,True,False,True,True,False,False,True,True,False,False],[False,True,True,True,False,False,True,False,False,True,True,True,False,False,False],[False,True,False,True,True,False,False,False,True,True,False,True,True,False,True],[True,False,False,False,True,False,False,False,False,False,True,False,False,True,False],[False,True,True,True,True,True,True,True,True,False,True,True,True,False,True],[False,True,True,False,True,False,True,True,True,True,True,False,True,True,False]],[[True,False,True,True,True,False,False,False,False,True,False,True,False,True,True],[False,True,False,True,True,True,False,False,False,True,False,True,True,True,True],[True,True,True,True,False,False,True,False,False,True,True,False,False,True,True],[True,True,False,True,True,True,False,True,False,False,False,False,False,True,True],[True,True,False,False,False,False,False,True,False,False,True,True,False,True,True],[True,True,False,True,False,True,False,True,False,False,True,False,False,True,False]],[[False,False,True,False,False,True,True,False,False,True,False,True,True,False,True],[False,True,False,False,False,False,False,True,True,False,True,True,True,False,False],[True,False,True,False,False,True,True,True,False,True,True,False,True,False,True],[False,False,False,False,False,True,False,False,False,False,True,True,True,False,True],[True,True,True,False,True,False,False,False,True,False,True,False,False,False,False],[True,False,False,False,False,True,True,True,True,True,True,False,False,False,False]],[[False,True,True,True,False,False,True,False,False,True,False,False,True,False,False],[False,False,True,False,False,True,True,True,False,True,False,True,True,False,True],[False,False,True,True,False,True,False,True,True,False,False,True,False,False,True],[True,False,True,False,False,True,True,False,False,False,True,False,True,False,True],[True,False,True,False,False,True,True,False,True,False,False,True,True,True,True],[False,False,True,False,False,False,True,True,False,False,True,True,False,True,True]],[[True,False,False,True,False,False,False,True,False,True,True,False,True,False,True],[False,False,True,False,False,True,False,False,True,False,False,False,True,False,True],[False,False,True,False,True,True,False,True,False,False,True,True,True,False,True],[False,False,False,False,False,False,True,False,False,False,False,False,True,True,True],[False,False,True,False,False,False,True,True,True,False,True,False,True,False,False],[True,True,True,True,True,True,True,False,False,False,True,False,False,False,False]],[[True,False,False,False,False,False,False,False,True,False,False,True,False,True,True],[True,False,False,False,True,True,True,True,False,True,True,True,False,True,True],[False,True,True,False,True,False,False,False,False,False,False,False,True,False,True],[False,True,False,True,True,True,False,True,False,False,False,True,True,False,True],[False,False,False,False,False,True,False,True,True,False,True,True,False,False,False],[True,False,True,True,True,True,True,False,False,True,False,False,True,False,True]],[[False,False,True,False,False,False,True,False,True,True,False,False,False,False,False],[False,False,False,False,True,False,True,False,False,True,False,False,True,True,False],[False,True,True,False,True,True,False,False,False,True,True,False,True,False,True],[True,False,True,True,False,False,True,True,True,True,False,True,False,False,False],[False,False,True,True,False,False,True,False,False,True,True,False,True,False,False],[False,True,False,True,True,True,False,False,False,True,False,True,False,False,True]],[[False,False,True,True,False,False,True,True,False,True,False,False,True,True,False],[True,False,False,False,True,True,True,True,True,True,False,True,False,False,True],[True,False,False,True,True,False,True,False,True,True,False,True,True,True,False],[False,True,False,False,True,False,True,False,True,False,True,False,False,False,False],[True,True,True,True,False,False,True,True,True,False,True,True,True,False,False],[False,False,True,False,False,False,False,True,False,False,False,False,False,False,False]],[[False,True,True,True,True,False,False,False,True,True,True,False,False,False,True],[False,False,True,False,True,False,False,True,True,True,True,True,True,True,True],[True,False,True,False,True,False,False,True,False,False,False,True,False,False,False],[True,True,False,True,True,True,True,True,True,False,False,False,False,True,False],[True,False,False,False,True,True,False,True,True,True,True,True,False,False,False],[False,True,True,True,False,False,False,True,True,True,False,False,False,False,True]],[[False,True,False,False,False,True,True,False,False,False,True,False,False,False,False],[False,False,True,True,True,False,True,False,True,False,True,True,False,True,True],[False,True,True,False,True,True,True,True,True,True,True,True,True,True,True],[True,True,True,True,False,True,True,True,True,False,False,False,False,False,False],[True,False,True,False,False,True,True,True,False,True,True,True,False,False,True],[True,False,False,False,True,True,True,False,False,False,False,False,True,False,True]],[[True,False,True,False,False,False,True,False,True,True,True,False,True,True,True],[False,False,True,False,False,False,True,False,False,False,False,False,False,True,True],[True,False,True,True,True,True,True,False,True,False,False,False,True,True,True],[False,True,True,True,True,False,True,True,False,True,True,False,True,True,False],[False,True,False,True,False,True,True,True,False,False,True,False,True,False,True],[False,False,False,False,True,True,False,False,False,False,True,True,False,True,True]],[[False,True,False,True,True,False,False,False,True,False,False,False,False,True,True],[True,False,True,True,False,True,True,False,True,True,False,True,True,False,False],[False,True,True,False,False,False,False,False,False,True,True,True,True,True,False],[False,True,False,False,False,False,True,True,False,False,True,False,True,False,True],[True,False,False,True,False,False,True,False,False,False,True,True,True,False,True],[True,True,False,False,True,False,False,False,False,True,False,True,True,False,True]],[[False,True,True,False,False,True,False,False,True,True,False,False,False,True,False],[True,False,True,True,False,False,False,True,False,False,False,True,True,True,True],[False,False,False,True,False,True,False,True,True,True,False,True,True,False,False],[True,False,False,True,True,True,True,True,False,False,True,False,True,False,True],[False,False,True,False,True,False,True,True,True,False,False,True,True,True,True],[True,True,True,False,False,True,True,True,False,True,True,False,True,False,False]],[[False,False,True,False,True,False,False,False,False,True,True,False,False,False,False],[True,False,True,True,False,True,False,True,False,False,False,False,False,True,False],[True,True,True,False,True,False,False,True,False,False,False,True,True,False,False],[True,False,False,False,True,False,True,True,True,True,True,True,True,False,False],[False,True,True,True,True,True,True,True,False,True,False,True,True,True,True],[True,False,True,True,False,False,True,True,True,False,False,True,True,False,True]],[[True,False,False,False,True,True,True,False,False,False,True,False,True,False,True],[False,True,True,False,False,True,False,True,False,False,True,True,True,False,True],[False,True,True,False,False,False,True,True,False,True,True,True,False,False,False],[True,True,True,True,True,False,False,True,True,True,True,True,False,False,True],[True,False,True,False,False,True,False,True,False,False,True,False,True,True,False],[True,False,True,True,True,False,True,False,False,False,True,True,True,True,False]]], dtype = "bool")#candidate|9408|(15, 6, 15)|const|bool
bop_9409 = relay.left_shift(call_9399.astype('uint32'), relay.reshape(const_9408.astype('uint32'), relay.shape_of(call_9399))) # shape=(15, 6, 15)
bop_9412 = relay.left_shift(call_9400.astype('uint32'), relay.reshape(const_9408.astype('uint32'), relay.shape_of(call_9400))) # shape=(15, 6, 15)
output = bop_9409
output2 = bop_9412
func_9427 = relay.Function([], output)
mod['func_9427'] = func_9427
mod = relay.transform.InferType()(mod)
output = func_9427()
func_9428 = relay.Function([], output)
mutated_mod['func_9428'] = func_9428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8123_call = mod.get_global_var('func_8123')
func_8125_call = mutated_mod.get_global_var('func_8125')
call_9429 = relay.TupleGetItem(func_8123_call(), 1)
call_9430 = relay.TupleGetItem(func_8125_call(), 1)
var_9475 = relay.var("var_9475", dtype = "uint32", shape = (2, 5, 11))#candidate|9475|(2, 5, 11)|var|uint32
bop_9476 = relay.equal(call_9429.astype('bool'), relay.reshape(var_9475.astype('bool'), relay.shape_of(call_9429))) # shape=(2, 5, 11)
bop_9479 = relay.equal(call_9430.astype('bool'), relay.reshape(var_9475.astype('bool'), relay.shape_of(call_9430))) # shape=(2, 5, 11)
bop_9483 = relay.greater_equal(var_9475.astype('bool'), relay.reshape(call_9429.astype('bool'), relay.shape_of(var_9475))) # shape=(2, 5, 11)
bop_9486 = relay.greater_equal(var_9475.astype('bool'), relay.reshape(call_9430.astype('bool'), relay.shape_of(var_9475))) # shape=(2, 5, 11)
func_8752_call = mod.get_global_var('func_8752')
func_8754_call = mutated_mod.get_global_var('func_8754')
const_9491 = relay.const([0.858272,-7.913168,-9.449087,3.544552,4.491732,3.654640,-1.693755,4.077755,4.597861,3.902747,-9.841231,-6.791122,4.112882,-3.492097,-9.779144,-3.113758,-9.346519,-9.136603,3.188970,9.960311,-0.401795,-5.099985,1.143211,0.503851,7.288233,1.851732,-2.940802,4.913066,0.247818,-0.415339,2.668192,5.155207,6.426598,-9.109176,-5.410412,8.607656,-0.424632,6.442907,-0.569344,-4.007088,-9.945885,7.937331,-8.056009,-5.720045,-7.695700,7.245383,9.701348,-3.408297,-9.733509,4.102619,-8.667195,5.661320,3.790337,-4.652827,-9.794482,6.130203,5.741034,2.174093,9.782747,0.304149,-9.715565,9.718727,-1.067775,-7.639245,6.379583,3.804691,-8.721175,-9.633765,2.725510,7.937625,-8.937566,-7.726849,-2.480343,4.918579,0.034767,7.718696,8.699068,-4.421163,-1.539975,-5.176729,-6.975379,5.656811,-2.350955,-0.733689,1.359800,5.526569,-3.439069,8.390782,6.215253,4.164025,9.540866,-8.746469,6.883371,-1.356109,4.024956,0.770802,-8.778163,3.770965,3.218602,3.620662,1.994433,-4.034510,-8.473541,-5.547887,-7.485655,0.699341,9.209628,-6.007377,-0.708711,-7.018519,3.991231,8.844807,3.930308,-0.960556,6.884596,6.568425,9.019445,-8.602557,0.452897,6.090450,-2.517647,2.466834,1.961744,7.649042,1.743378,5.301220,1.361473,-9.986585,5.728243,7.228919,-8.404549,-4.176954,-2.604443,-8.587241,3.815619,8.220836,-5.198677,1.589195,-6.777912,7.940427,8.045575,-7.021700,3.830926,1.152214,-7.577157,3.893949,2.902295,-6.576029,5.187166,9.634372,-9.989890,-5.607280,9.270247,-3.629611,-4.173138,6.273657,0.966456,0.863284,8.021783,9.693675,3.513912,-7.379798,-8.802616,7.307847,3.512628,8.595405,7.626862,-6.742787,9.881776,5.536127,-7.804673,4.925813,-2.015631,8.548899,5.179230,8.517725,0.878750,1.207590,-8.315715,0.671144,8.491731,-4.841198,4.774713,-4.373734,8.606311,-7.682396,-5.485135,8.454942,-5.590440,-3.364517,-3.244193,9.241141,-9.627683,1.390441,6.468131,-7.830002,8.627003,1.795349,-0.737021,-8.445491,1.939502,2.413405,-3.995906,1.773044,0.142265,4.711666,4.105196,-7.199604,2.482240,9.365968,-0.390023,-4.945259,-5.414766,-8.020086,6.400268,-4.141508,-0.916654,-3.143050,3.968028,1.317010,-7.666884,-5.313202,8.244566,2.621448,-2.895112,9.165959,-4.465327,9.328576,-3.853446,7.168148,-0.223256,-9.674503,-4.993343,6.679102,-0.976583,-4.409410,9.518384,8.465212,8.406853,-6.383048,9.725434,4.425440,8.381816,-3.453352,-1.540136,3.328369,7.517766,4.810767,-9.942016,4.429440,-8.481405,2.799601,-4.678380,-6.583554,0.114001,-9.568445,1.397390,7.250250,-4.108284,-4.941870,6.477701,8.784206,5.826475,-5.803606,9.275322,4.351940,-9.649255,-7.493359,9.122398,-5.910466,7.905935,5.880992,-6.865304,5.658940,-3.104449,-7.083259,3.563559,-6.077727,-3.269990,-5.919764,3.528196,7.238599,9.660475,-6.950206,7.810488,7.661771,0.260636,0.802766,3.382668,-6.379183,-6.150187,-5.207769,-7.358549,-3.773821,6.903130,3.247140,-7.659950,-3.033462,-0.147030,-6.790936,-0.567460,-2.202452,-1.784554,3.451105,-0.592503,0.177204,-5.110098,-1.131842,4.844593,-7.757334,8.528223,2.207850,-9.986833,0.166753,-0.861835,-1.932607,-2.545267,3.818220,-0.926004,-7.464064,-1.766867,9.861947,5.293261,-4.216053,3.005734,-8.089802,-9.765003,-4.004709,5.096463,5.783331,-9.403162,-7.048828,-3.827381,9.169863,4.209683,4.245665,-2.820887,-8.262380,-5.316915,-9.216779,3.872169,-4.299175,-0.533337,3.188604,9.790826,2.666492,-5.706339,-0.530254,7.136201,-0.766742,2.680219,0.606792,-4.976883,-2.736192,-6.402354,-6.160666,6.774677,1.983158,-0.856892,8.541489,7.978037,1.267464,0.630919,-6.034845,3.500245,0.153372,-8.252496,-4.538273,-9.192365,3.381285,2.895919,6.153133,-8.628560,-9.829033,8.654582,-5.854393,8.786593,-6.795107,8.516728,8.058187,3.474111,-0.569427,0.587288,2.623339,8.609596,-5.500866,-1.070588,3.571870,-9.948944,1.410325,1.853064,-2.260860,4.830297,1.574616,8.740630,-4.592319,0.478741,-2.761078,1.707790,0.591483,-8.956862,-2.677603,0.412813,-4.524701,1.932431,4.218092,9.815801,4.381538,-3.017084,-3.137994,-6.344700,7.288588,4.142689,-7.459719,3.097795,4.506333,-4.293893,-1.091808,1.767913,2.733534,7.481093,9.661231,3.468458,9.206917,-3.208432,6.027469,-7.924805,-9.062927,8.436390,4.134501,-4.983446,-8.082751,-2.757059,-4.636105,2.568501,-6.794176,-0.839738,-2.433679,9.286526,-3.079023,1.480558,-3.166108,-4.809233,7.373901,4.536589,-2.216465,5.823865,-3.471312,2.057155,1.496208,4.212945,7.398843,8.411272,0.037183,-5.860830,-2.688887,1.451326,9.318524,-0.654392,6.034258,9.476024,0.219848,8.028359,-8.474331,4.965302,7.866239,-6.705295,-2.241280,-7.320107,-5.547863,0.145064,-6.570328,3.458231,-5.599993,-3.809999,2.183380,2.497822,-9.993356,8.410004,-7.950911,-3.315284,9.264224,-1.161268,9.053743,3.203445,6.505523,-9.624879,6.280249,-6.525777,1.108230,-4.175522,-7.188705,-1.922402,-1.553098,-3.680896,-7.586842,-0.844683,2.855821,0.385115,-1.502495,-6.441723,-6.727521,7.417393,-7.589338,7.646633,0.606005,-7.428125,-1.141650,-8.705676,-7.678693,8.836545,-0.032690,-4.417700,-3.098814,-2.125106,-0.983067,4.264334,0.531682,1.072348,-8.471278,-2.284844,-8.227545,1.686313,3.845727,5.443873,-9.972982,-8.665155,-7.268243,-2.428759,-9.578541,8.270580,1.375159,8.265539,-9.024077,-5.188314,-4.236609,-1.627219,-1.153038,7.287581,0.325739,2.336187,8.048336,-8.889156,8.139962,-0.289814,0.386481,-1.580552,-7.219499,-5.065460,-2.380313,7.132997,8.592828,4.254980,-0.210317,7.098776,8.829387,5.679832,-8.125219,3.009696,9.942108,0.536360,9.426229,1.871087,-1.509696,-4.777166,0.202595,9.570806,6.328068,-8.574524,9.267525,-2.193795,-9.859566,7.051698,1.681120,-1.672736,-0.378109,-5.840270,-9.487545,-2.313643,4.249395,2.796835,-0.207248,6.978509,-1.899425,6.030296,0.944143,-3.711061,-7.384158,-4.953350,-8.490891,-5.399383,-0.110661,2.544645,-8.783891,8.856003,-7.012261,-1.075929,9.633818,9.836927,1.279325,1.816290,-5.786222,4.967524,0.497631,-2.717463,-4.342645,9.938653,7.253144,0.530827,-3.283727,3.027827,-9.861181,1.313357,4.298375,8.751748,-6.892126,5.758693,-7.368654,5.610531,-1.871603,-0.370083,-4.981416,-9.098338,-5.986053,0.630469,-4.509820,4.900744,1.709108,6.018432,5.241776,8.346066,4.374804,-0.007789,0.740502,-9.399482,-7.087737,9.779006,-3.767193,-3.396677,4.453320,3.155101,4.388888,-2.285116,1.818732,7.257415,-6.184458,-3.708726,-9.781842,-7.633666,-4.338023,8.894866,0.031635,4.091499,-3.363097,-6.161887,-8.688280,-3.952846,-5.671784,-3.547488,-2.078915,8.155356,-7.734934,-2.794808,-8.220685,6.107976,7.367767,4.872465,5.322712,-9.206123,8.428490,4.867201,-1.200605,5.560966,2.667618,3.186048,0.472990,-1.261238,-3.919553,-1.330579,5.265375,-2.895058,5.035606,5.941470,-3.508969,-5.332737,-4.757001,6.552899,2.583898,-8.415262,-2.626750,-2.581147,-5.104053,-8.455352,-3.021288,4.324339,-8.665358,-9.055924,-5.831866,-2.379152,-8.254206,-4.113644,-2.462176,9.844851,-6.559262,-1.048521,2.855787,-8.540836,-6.912235,3.822268,-3.269623,-5.943570,-1.110157,-7.925076,2.918738,9.936151,1.006590,-1.557742,-9.614317,-5.990284,0.021870,2.289685,0.676045,-6.728472,-4.507952,-2.117032,6.516107,6.481062,-0.182293,-5.057784,-1.762216,4.144565,8.977363,-2.789937,9.053562,-4.640019,8.784345,-4.012197,0.504841,-7.042212,-8.108748,-5.889616,-3.683227,1.547042,8.606654,-8.822635,8.895662,-0.168411,3.446810,-0.897819,6.084965,-5.938616,6.818660,9.928476,4.210394,-2.507266,6.167426,1.993379,9.289413,-6.054182,-3.956847,-3.836711,-3.065060,-1.280593,5.900182,-1.328728,2.039411,-3.834091,1.341575,-4.937898,6.194269], dtype = "float32")#candidate|9491|(770,)|const|float32
call_9490 = relay.TupleGetItem(func_8752_call(relay.reshape(const_9491.astype('float32'), [770,])), 1)
call_9492 = relay.TupleGetItem(func_8754_call(relay.reshape(const_9491.astype('float32'), [770,])), 1)
func_7220_call = mod.get_global_var('func_7220')
func_7224_call = mutated_mod.get_global_var('func_7224')
var_9496 = relay.var("var_9496", dtype = "uint8", shape = (960,))#candidate|9496|(960,)|var|uint8
call_9495 = relay.TupleGetItem(func_7220_call(relay.reshape(var_9496.astype('uint8'), [12, 5, 16]), relay.reshape(var_9496.astype('uint8'), [12, 5, 16]), ), 0)
call_9497 = relay.TupleGetItem(func_7224_call(relay.reshape(var_9496.astype('uint8'), [12, 5, 16]), relay.reshape(var_9496.astype('uint8'), [12, 5, 16]), ), 0)
func_6082_call = mod.get_global_var('func_6082')
func_6086_call = mutated_mod.get_global_var('func_6086')
const_9504 = relay.const([[0.046228,-2.704602,-1.534942,-7.018410,-1.944074,-5.881143,-4.577371,9.291751,-1.665582],[5.797693,-3.232596,3.518735,-7.871117,8.317245,-9.324553,-2.023696,-4.935918,7.389094],[-7.011879,2.800361,6.471849,7.491468,1.406764,1.707754,-5.521447,3.882072,1.613466],[-5.041050,8.006381,2.473969,0.608861,-5.870167,-3.616197,-5.523794,1.175326,4.176578],[7.744496,3.318721,-9.363406,5.954711,3.724290,0.382963,6.937961,-4.022826,-2.187694],[-8.198738,6.299144,5.019306,-5.449457,9.120444,7.975766,-0.492192,7.537881,2.693464],[7.953649,-0.038806,8.971148,6.298322,-5.100263,-0.959540,6.350702,-1.690831,4.802335],[3.445084,-1.903549,2.951499,1.380584,-3.998358,3.778034,-4.289344,-2.416856,3.192850],[2.912478,-7.435394,-9.131677,-2.813631,-6.766876,6.139693,-1.951423,1.241415,1.652105],[-4.841389,3.086166,1.298772,-2.962800,3.880619,-2.091310,-9.092314,5.726304,9.407192],[4.439743,-4.754825,7.777957,6.861240,-4.073153,-9.815362,-4.876269,-6.762434,3.323723],[-1.228657,-1.825742,7.217742,0.964735,-9.376779,-5.819374,-2.278923,2.258986,9.973129],[-6.364133,-4.599689,-3.796968,-8.206549,7.704371,-2.952204,-3.630458,-1.479204,-8.001305],[-8.010335,4.553594,-4.944858,-7.360204,-4.948698,8.003612,-9.756684,-0.516218,-3.385397],[4.196560,8.133571,-8.367791,-2.159347,2.484421,5.667452,-5.629565,7.009731,-5.578316]], dtype = "float32")#candidate|9504|(15, 9)|const|float32
call_9503 = func_6082_call(relay.reshape(const_9504.astype('float32'), [3, 5, 9]), relay.reshape(const_9504.astype('float32'), [3, 5, 9]), )
call_9505 = func_6082_call(relay.reshape(const_9504.astype('float32'), [3, 5, 9]), relay.reshape(const_9504.astype('float32'), [3, 5, 9]), )
output = relay.Tuple([bop_9476,bop_9483,call_9490,const_9491,call_9495,var_9496,call_9503,const_9504,])
output2 = relay.Tuple([bop_9479,bop_9486,call_9492,const_9491,call_9497,var_9496,call_9505,const_9504,])
func_9510 = relay.Function([var_9475,var_9496,], output)
mod['func_9510'] = func_9510
mod = relay.transform.InferType()(mod)
mutated_mod['func_9510'] = func_9510
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9510_call = mutated_mod.get_global_var('func_9510')
var_9512 = relay.var("var_9512", dtype = "uint32", shape = (2, 5, 11))#candidate|9512|(2, 5, 11)|var|uint32
var_9513 = relay.var("var_9513", dtype = "uint8", shape = (960,))#candidate|9513|(960,)|var|uint8
call_9511 = func_9510_call(var_9512,var_9513,)
output = call_9511
func_9514 = relay.Function([var_9512,var_9513,], output)
mutated_mod['func_9514'] = func_9514
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9529 = relay.var("var_9529", dtype = "float64", shape = (5, 16, 16))#candidate|9529|(5, 16, 16)|var|float64
uop_9530 = relay.acosh(var_9529.astype('float64')) # shape=(5, 16, 16)
output = uop_9530
output2 = uop_9530
func_9544 = relay.Function([var_9529,], output)
mod['func_9544'] = func_9544
mod = relay.transform.InferType()(mod)
mutated_mod['func_9544'] = func_9544
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9545 = relay.var("var_9545", dtype = "float64", shape = (5, 16, 16))#candidate|9545|(5, 16, 16)|var|float64
func_9544_call = mutated_mod.get_global_var('func_9544')
call_9546 = func_9544_call(var_9545)
output = call_9546
func_9547 = relay.Function([var_9545], output)
mutated_mod['func_9547'] = func_9547
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9361_call = mod.get_global_var('func_9361')
func_9363_call = mutated_mod.get_global_var('func_9363')
call_9563 = relay.TupleGetItem(func_9361_call(), 0)
call_9564 = relay.TupleGetItem(func_9363_call(), 0)
output = relay.Tuple([call_9563,])
output2 = relay.Tuple([call_9564,])
func_9567 = relay.Function([], output)
mod['func_9567'] = func_9567
mod = relay.transform.InferType()(mod)
output = func_9567()
func_9568 = relay.Function([], output)
mutated_mod['func_9568'] = func_9568
mutated_mod = relay.transform.InferType()(mutated_mod)
var_9626 = relay.var("var_9626", dtype = "uint8", shape = (3, 15, 12))#candidate|9626|(3, 15, 12)|var|uint8
var_9627 = relay.var("var_9627", dtype = "uint8", shape = (3, 15, 12))#candidate|9627|(3, 15, 12)|var|uint8
bop_9628 = relay.less_equal(var_9626.astype('bool'), relay.reshape(var_9627.astype('bool'), relay.shape_of(var_9626))) # shape=(3, 15, 12)
output = relay.Tuple([bop_9628,])
output2 = relay.Tuple([bop_9628,])
func_9631 = relay.Function([var_9626,var_9627,], output)
mod['func_9631'] = func_9631
mod = relay.transform.InferType()(mod)
mutated_mod['func_9631'] = func_9631
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9631_call = mutated_mod.get_global_var('func_9631')
var_9633 = relay.var("var_9633", dtype = "uint8", shape = (3, 15, 12))#candidate|9633|(3, 15, 12)|var|uint8
var_9634 = relay.var("var_9634", dtype = "uint8", shape = (3, 15, 12))#candidate|9634|(3, 15, 12)|var|uint8
call_9632 = func_9631_call(var_9633,var_9634,)
output = call_9632
func_9635 = relay.Function([var_9633,var_9634,], output)
mutated_mod['func_9635'] = func_9635
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7736_call = mod.get_global_var('func_7736')
func_7738_call = mutated_mod.get_global_var('func_7738')
call_9658 = relay.TupleGetItem(func_7736_call(), 0)
call_9659 = relay.TupleGetItem(func_7738_call(), 0)
func_8630_call = mod.get_global_var('func_8630')
func_8634_call = mutated_mod.get_global_var('func_8634')
var_9661 = relay.var("var_9661", dtype = "bool", shape = (2, 112))#candidate|9661|(2, 112)|var|bool
var_9662 = relay.var("var_9662", dtype = "float32", shape = (770,))#candidate|9662|(770,)|var|float32
call_9660 = relay.TupleGetItem(func_8630_call(relay.reshape(var_9661.astype('bool'), [224,]), relay.reshape(var_9662.astype('float32'), [7, 110]), ), 2)
call_9663 = relay.TupleGetItem(func_8634_call(relay.reshape(var_9661.astype('bool'), [224,]), relay.reshape(var_9662.astype('float32'), [7, 110]), ), 2)
uop_9680 = relay.atan(var_9662.astype('float32')) # shape=(770,)
output = relay.Tuple([call_9658,call_9660,var_9661,uop_9680,])
output2 = relay.Tuple([call_9659,call_9663,var_9661,uop_9680,])
func_9693 = relay.Function([var_9661,var_9662,], output)
mod['func_9693'] = func_9693
mod = relay.transform.InferType()(mod)
var_9694 = relay.var("var_9694", dtype = "bool", shape = (2, 112))#candidate|9694|(2, 112)|var|bool
var_9695 = relay.var("var_9695", dtype = "float32", shape = (770,))#candidate|9695|(770,)|var|float32
output = func_9693(var_9694,var_9695,)
func_9696 = relay.Function([var_9694,var_9695,], output)
mutated_mod['func_9696'] = func_9696
mutated_mod = relay.transform.InferType()(mutated_mod)
func_8402_call = mod.get_global_var('func_8402')
func_8403_call = mutated_mod.get_global_var('func_8403')
call_9723 = relay.TupleGetItem(func_8402_call(), 0)
call_9724 = relay.TupleGetItem(func_8403_call(), 0)
func_8055_call = mod.get_global_var('func_8055')
func_8056_call = mutated_mod.get_global_var('func_8056')
call_9737 = relay.TupleGetItem(func_8055_call(), 0)
call_9738 = relay.TupleGetItem(func_8056_call(), 0)
uop_9740 = relay.tan(call_9723.astype('float32')) # shape=(14, 8, 1)
uop_9742 = relay.tan(call_9724.astype('float32')) # shape=(14, 8, 1)
func_8040_call = mod.get_global_var('func_8040')
func_8041_call = mutated_mod.get_global_var('func_8041')
call_9746 = relay.TupleGetItem(func_8040_call(), 1)
call_9747 = relay.TupleGetItem(func_8041_call(), 1)
func_7320_call = mod.get_global_var('func_7320')
func_7323_call = mutated_mod.get_global_var('func_7323')
const_9749 = relay.const([[-1.751584,4.029288,-4.819332,3.507107,-3.588224,4.753244,4.972126],[-5.147858,-1.809309,-7.399211,-7.586655,-3.898780,-9.629630,2.530456],[-6.758263,-1.832866,-9.773424,-9.577227,6.718802,2.286012,0.594949],[-2.997324,-7.804604,-2.640478,9.344549,-8.532960,-6.880262,-1.669484],[-8.523811,-7.888949,9.616010,7.367987,-5.504972,6.670810,5.775446],[-4.443351,8.119356,-7.057664,3.996153,-0.604730,0.626118,-1.191363],[4.085154,-2.704275,-6.801281,8.544272,-8.481680,-1.663151,-8.565800]], dtype = "float64")#candidate|9749|(7, 7)|const|float64
call_9748 = relay.TupleGetItem(func_7320_call(relay.reshape(const_9749.astype('float64'), [1, 7, 7]), relay.reshape(call_9746.astype('bool'), [1350,]), ), 0)
call_9750 = relay.TupleGetItem(func_7323_call(relay.reshape(const_9749.astype('float64'), [1, 7, 7]), relay.reshape(call_9746.astype('bool'), [1350,]), ), 0)
uop_9752 = relay.sin(uop_9740.astype('float32')) # shape=(14, 8, 1)
uop_9754 = relay.sin(uop_9742.astype('float32')) # shape=(14, 8, 1)
output = relay.Tuple([call_9737,call_9746,call_9748,const_9749,uop_9752,])
output2 = relay.Tuple([call_9738,call_9747,call_9750,const_9749,uop_9754,])
func_9755 = relay.Function([], output)
mod['func_9755'] = func_9755
mod = relay.transform.InferType()(mod)
output = func_9755()
func_9756 = relay.Function([], output)
mutated_mod['func_9756'] = func_9756
mutated_mod = relay.transform.InferType()(mutated_mod)
func_9755_call = mod.get_global_var('func_9755')
func_9756_call = mutated_mod.get_global_var('func_9756')
call_9841 = relay.TupleGetItem(func_9755_call(), 4)
call_9842 = relay.TupleGetItem(func_9756_call(), 4)
func_195_call = mod.get_global_var('func_195')
func_197_call = mutated_mod.get_global_var('func_197')
var_9849 = relay.var("var_9849", dtype = "int32", shape = ())#candidate|9849|()|var|int32
call_9848 = func_195_call(relay.reshape(var_9849.astype('int32'), []))
call_9850 = func_195_call(relay.reshape(var_9849.astype('int32'), []))
func_9054_call = mod.get_global_var('func_9054')
func_9056_call = mutated_mod.get_global_var('func_9056')
call_9852 = relay.TupleGetItem(func_9054_call(), 0)
call_9853 = relay.TupleGetItem(func_9056_call(), 0)
uop_9872 = relay.acos(call_9841.astype('float32')) # shape=(14, 8, 1)
uop_9874 = relay.acos(call_9842.astype('float32')) # shape=(14, 8, 1)
func_8176_call = mod.get_global_var('func_8176')
func_8179_call = mutated_mod.get_global_var('func_8179')
const_9898 = relay.const([5.317106,6.383284,-5.703637,6.514057,3.722877,4.142116,0.646519,8.727570,-5.301949,9.271830,-8.770086,9.359866,5.592285,6.387700,-4.291424,-6.660134,8.075957,8.486516,-9.111778,-7.768554,0.523834,3.384207,-0.435214,5.324685,7.585486,8.622747,2.366310,-2.896103,7.292897,2.533725,-7.964084,1.999683,-6.943887,9.015881,-4.458271,-7.910642,1.570537,-1.916540,-5.875602,6.078145,-6.642583,-6.109840,6.111143,4.108193,-4.281274,-0.394498,-8.785981,-2.274202,1.562795,8.587299,-8.675666,6.041490,9.683868,6.537910,-6.451268,0.027407,6.264871,-1.700729,2.926885,-9.938777,5.625991,-8.671813,-2.049518,-1.800108,6.403473,1.919940,1.022329,7.123119,3.152557,4.245599,8.252753,-8.158924,-1.166942,5.124155,-5.664319,3.811187,6.344246,3.422774,-6.274787,2.351909,2.096882,6.526178,4.813081,-0.922022,-2.257074,-6.721542,-7.067111,-7.882145,-9.820653,-1.002117,3.954139,-7.749895,-8.647159,1.408328,5.361269,-0.123696,6.580006,4.119158,-4.174664,8.438699,0.325733,3.101992,8.671444,-3.242521,5.769095,-9.520580,-8.308544,3.988615,4.199954,-9.310954,4.362000,3.837129,-3.808135,-1.892589,-1.033392,0.711033,7.093221,-2.647395,2.836830,-8.500898,2.126004,8.085371,2.322632,-4.167573,3.041397,0.098178,5.965101,-6.435900,-7.397835,6.805284,-6.209761,-6.847822,0.640042,-2.663696,-8.624551,0.858348,-9.370338,2.592903,-7.034590,-7.199407,-1.573924,-2.777715,-0.345884,-0.162281,7.289597,-9.185839,-5.195170,-1.685548,4.993913,-2.279460,3.020897,8.580645,9.065760,-5.633749,5.980741,9.937334,-5.781917,3.520124,-5.792805,9.630451,3.499168,-6.367395,0.851187,0.367040,1.464778,-3.817980,-0.418237,-7.874430,-7.310302,6.579627,7.235544,-1.275998,-3.086240,0.076601,5.225515,6.723645,-7.373559,-0.846528,-1.626528,-8.383335,-9.111624,-8.547749,-4.482826,-6.680641,3.771776,-8.083638,-3.386627,4.064462,2.157296,-2.488015,2.131973,5.427479,3.090318,0.470206,-7.823386,1.400270,-3.971427,6.520695,6.337705,-3.278389,3.159624,8.856729,5.960798,-8.274946,2.830486,7.270187,-1.668243,-9.159282,-3.228270,1.649682,8.136497,4.946688,2.670870,6.905331,-7.969961,9.625875,-8.118466,-8.129600,0.464552,-8.241785,1.938350,-1.427107,7.513077,8.546460,-2.419693,-0.440433,2.764074,-6.617025,-6.839794,8.670781,3.306560,-8.873590,-3.112150,8.739127,6.254177,-5.821190,3.135348,3.874799,-8.183321,-6.034298,5.860993,-5.799675,2.811099,5.270985,-7.995270,-2.432538,-0.846569,-4.171036,5.376804,-0.437544,3.894343,5.106493,9.101496,0.594413,5.660369,8.898991,-0.506517,-9.255761,-7.312206,8.314837,-4.652446,-8.646528,-1.205537,9.594596,-1.631401,0.754791,8.059204,-6.428152,0.364668,-8.805951,2.374366,5.239646,1.766197,5.815133,-0.638974,7.104526,3.236058,7.952715,-5.836376,4.078675,-3.115425,-1.521940,-6.541083,9.703237,0.485421,-9.994439,2.928695,-3.360654,5.341377,-8.163779,8.617644,8.730905,6.175167,-7.600499,7.152308,-1.488246,-9.915870,7.690217,4.132518,-3.267554,-1.036928,8.143725,4.939828,1.195615,-7.172643,-5.683606,1.926458,-2.844222,-4.363665,-6.345164,-6.479376,0.620920,4.998760,1.551707,3.683897,3.513732,5.011795,0.866769,1.309607,7.884715,-0.704266,2.006461,7.976458,-4.856176,-5.271352,-8.296542,2.619336,-8.760821,-2.392789,8.245211,4.044480,-8.243691,-9.844024,8.294547,-0.385330,3.833761,-2.412413,-0.280094,-6.389387,8.562951,7.107141,2.154240,-9.894198,0.547305,-1.876675,-2.205432,-1.401042,-4.757900,1.397878,-4.733282,-2.881392,-2.218844,-4.625031,3.426641,-7.329295,0.181574,-7.478781,-0.907093,-9.681407,6.363906,4.987960,1.327443,-7.118094,-3.958548,3.753003,0.712330,-0.493226,2.703857,-2.965249,2.510518,1.953655,-5.569905,6.623935,-1.218685,0.821052,-8.900767,-8.146559,-2.093902,1.945573,-6.947532,4.163787,2.027253,6.802679,-4.406333,7.577073,-7.776142,-2.349791,-6.385771,-0.881425,-5.289971,-5.783367,-0.722558,-3.383202,-7.729857,2.199901,-3.782489,-4.362449,-5.788997,-6.430984,-4.124485,-4.333410,6.997986,5.878570,-3.539400,-5.356014,3.296223,-2.140026,1.326444,-0.037842,-2.397983,-1.898512,-8.485896,-9.133331,6.879847,3.012598,-2.339299,-3.898738,4.790487,9.855153,3.562671,-3.250420,9.813391,-5.133796,5.988385,-0.866028,-6.367991,-1.168897,3.365082,4.473477,-5.275582,-7.817999,-4.336530,-6.448584,9.416973,-4.804974,0.239231,1.461514,8.943238,-7.443413,4.998919,-3.768785,2.243787,-3.167622,-1.974358,6.522892,3.885690,5.591487,9.445096,0.304391,-1.898547,8.883793,-9.330150,-8.749578,3.639246,-4.077048,4.786637,-7.576025,0.400553,7.093728,9.710196,-6.272542,3.984359,-0.567430,9.802852,8.266744,5.692361,-0.502987,7.684950,4.985774,4.889810,2.491860,9.702209,2.548907,4.851127,-3.927931,-6.945737,1.572751,-1.213484,-0.130134,9.680303,3.399259,-1.945314,-8.479067,-7.191626,-7.628152,6.527343,-1.236495,-1.422874,3.426894,2.955748,-3.519455,7.881915,5.750198,1.438019,0.003455,9.461961,-5.350387,-2.560016,1.705804,-2.699878,-4.661572,-0.329559,-2.860226,6.595602,-0.796776,9.533526,-1.434932,-6.448514,1.927514,4.116811,-4.861518,0.282973,-4.170215,4.687323,7.608861,-2.492105,5.919361,-5.458281,4.093299,8.823251,-7.288101,-4.030087,4.574950,-3.780908,-6.903746,-2.991314,-4.137889,3.911497,3.800549,6.780315,5.103255,8.343452,-4.937042,-9.092017,7.892018,5.113841,7.164141,-5.322079,-9.051841,1.622844,-9.762958,3.139455,0.637442,3.276223,1.983649,8.874096,-8.660464,9.067283,4.394778,-3.227563,4.241303,-7.800726,3.388644,-5.062861,-9.699368,2.064221,2.394662,6.883996,7.860089,1.645230,7.127772,1.431414,6.310368,-1.365472,5.837240,5.684999,-2.318994,1.510706,-4.541022,2.461988,5.191570,1.172533,8.914165,3.075900,-1.922142,1.853420,-2.957833,0.191113,8.395809,-4.912304,2.807860,-1.946761,3.356892,1.887956,0.822392,-0.951905,2.562036,5.142239,3.063712,-2.430888,4.778364,4.135668,-8.931083,-5.718910,7.063066,-3.268521,-9.336266,-7.342983,-2.724583,-9.653723,3.891582,-8.947384,-4.600321,6.064372,9.114150,6.945018,-4.812694,-4.017932,-5.216716,-0.287507,1.658821,-2.714250,6.075006,5.833817,-9.415210,0.973940,1.786368,6.099809,1.050828,5.514784,-4.382557,-7.950569,5.884061,3.346917,8.381239,4.705888,7.673080,-9.572464,6.997085,-9.347263,3.906225,2.379784,-6.157355,4.123180,5.940029,-8.998809,8.288191,-9.146565,1.694667,-5.758306,-5.586013,3.262270,9.976357,-2.909970,9.753535,2.982997,6.733936,4.403213,9.750230,9.174933,0.841107,-6.991647,-1.731378,-0.824288,-0.728694,-1.544242,-7.501191,-3.804573,-0.951131,-9.591486,-2.766776,-7.972100,-5.443256,5.030804,-6.750548,9.690237,-4.792045,3.179422,-0.216621,-9.376457,-8.737909,0.366366,-7.102921,8.618683,7.157784,-1.974722,1.883822,6.534893,8.051593,2.578299,5.652767,5.577114,-3.283819,0.786325,-3.610342,0.514468,-8.200191,-8.053303,9.171988,4.154309,0.083823,-5.831892,4.011153,9.955264,-7.134684,-4.193186,3.485055,2.896251,-2.315590,-8.716699,-8.331151,-2.277151,3.370818,6.982057,-0.115602,3.774885,-2.189311,-6.103142,2.727618,-4.955833,-2.589104,3.145855,4.477036,4.873490,7.574370,-2.534629,5.489994,0.549972,2.167976,6.146070,2.744911,-7.697165,-8.283326,4.989335,-1.093052,7.574365,3.080781,-6.562211,2.502008,-0.826228,4.799062,-9.753290,1.198874,6.484999,-1.703722,-1.518396,9.159409,-0.026684,5.700171,1.680279,5.003309,-1.368320,-3.130588,8.524670,-1.266032,-1.285232,7.727320,7.238681,-1.891172,0.344424,1.403969,2.433368,-9.404658,9.560839,0.527115,9.658342,9.756685,3.855340,-2.602603,-6.642329,5.662653,5.791178,1.618427,9.900550,1.051078,2.678210,8.862339,-2.690939,-3.857992,6.823892,-2.650351,-3.100120,8.404595,4.159633,8.096977,-0.166831,3.949609,8.042166,-6.337631,-6.488195,2.023173,5.278974,-0.624915,9.785095,4.499182,6.425711,9.201117,8.483167,6.603127,5.354066,-9.135717,1.755804,0.061029,7.431788,-1.388271,6.697011,4.929815,-4.287511,-0.327076,-9.765199,-2.165834,-3.645831,2.086921,-3.705190,-7.256010,8.866120,-3.288574,-6.661230,1.158785,9.362702,-2.990761,-7.693660,9.017965,6.997465,-8.224769,1.269329,8.944386,-2.315679,-5.491389,-7.199597,-0.206600,6.233021,-2.412896,-2.756846,2.332182,7.835287,3.332808,6.342472,-9.700885,-5.745772,-4.328305,-5.516330,1.953050,1.196615,4.583820,2.445546,7.058440,-1.134991,-8.319475,-7.993799,2.061338,5.106806,8.864281,6.591612,-1.237427,-6.890022,-4.338039,-7.836619,9.519073,3.970642,9.523274,2.345254,1.243646,9.467154,-3.177098,-1.058932,0.795628,-9.044261,-8.392785,1.949378,-5.908107,-1.152805,-5.903198,-9.513701,-4.116780,-5.963215,-5.311540,-9.879261,-3.154827,-1.188586,0.247276,-6.365917,-5.835074,2.156447,-8.515446,7.612385,-5.997302,5.173763,4.458438,3.323083,9.309442,9.677544,7.267810,-3.759325,6.310701,-3.735277,7.153588,-0.595957,-0.474556,-5.461293,-7.530160,3.672627,4.951086,5.699989,-4.616191,-6.562064,-4.865866,-2.521225,-9.158677,6.902630,4.379737,-6.795289,-2.550931,-9.790065,7.938767,-9.100821,0.275305,-8.105463,-3.537029,6.096321,-5.237871,3.052966,0.050543,-0.798301,-2.747974,-4.608278,-0.866086,-2.931574,9.879659,9.855133,9.757485,-8.477391,4.630156,-5.389639,-7.789732,-2.747085,4.937458,7.138847,3.217247,-3.766736,-3.037050,8.737204,-2.901063,8.718997,0.176190,-0.649694,-6.031266,4.426581,5.516866,-3.653707,4.851805,2.221256,-9.515778,9.091217,-9.392468,0.482296,-8.614945,6.512554,-5.525662,-6.057445,7.889613,-0.887472,5.732311,1.881010,5.324603,-8.800057,2.312253,-7.638859,3.892911,2.838008,7.601692,-6.970045,-4.739535,-0.385951,-4.370690,-1.975459,7.902310,-6.085596,-8.700168,-9.132278,4.623431,-1.794863,-9.502649,-5.988510,-8.423706,7.951893,-6.175704,-1.566686,-7.522331,3.224122,3.213066,-5.430912,-2.850390,-0.170163,0.314891,1.927688,6.800927,6.641967,-4.544477,0.085851,8.509966,-8.859352,-6.940947,-2.757708,-5.689941,-1.025021,0.319960,-5.036541,5.153953,-3.474832,8.402999,1.036217,8.563016,-2.375451,-2.955497,7.578667,3.460728,3.969019,-3.774357,-4.748181,9.938233,-2.334588,6.973880,-2.847823,4.071604,2.722448,-4.072613,-2.768866,7.019481,1.713103,-5.291058,-9.809321,3.460657,-5.747627,8.258880,-5.963672,9.266495,-1.796366,0.564507,0.355154,8.749008,-2.417966,7.532819,-8.682297,2.011987,-1.463038,-2.365553,5.447115,-5.433633,4.995599,-2.594171,-6.851100,-4.188089,2.562441,5.747240,5.791669,2.325148,8.043788,-3.439103,-1.924028,7.061291,8.682528,7.027586,3.042750,-8.924353,2.490292,-2.398381,-6.077509,-6.587397,8.089300,-6.550606,1.743692,-5.330248,-1.842893,-0.803969,-3.328955,0.514958,3.813625,3.874629,-9.112234,7.047100,-6.697616,8.480620,-7.366329,-8.910508,-7.026842,-0.995288,1.337664,-5.111545,3.351331,-8.296468,-1.844512,-4.429252,-1.133580,5.009420,5.651502,-8.862462,-2.493912,8.855344,-4.700709,-2.518103,-9.562778,-1.683416,5.895231,-4.340947,7.367378,7.368911,-1.039992,8.067600,6.838714,-0.531645,7.494142,-7.595449,-4.780486,-6.906574,-1.418436,4.776807,-8.164661,-3.615111,-7.314341,-2.615365,5.980561,-0.192832,8.508334,-2.249043,-9.192916,-8.990192,2.915251,6.438905,-3.189219,-3.718816,4.628502,6.345806,5.087437,7.815397,-2.031933,3.569510,0.650294,-5.021016,5.417929,6.644124,1.958835,8.207864,4.978433,-6.447116,1.316750,-1.318109,8.490257,-8.770270,3.422873,-6.653996,0.575456,7.759140,2.847121,-6.324464,-6.581388,-9.528695,9.586446,-2.092869,9.739521,-0.382495,-0.251216,1.691940,-1.842815,-1.870535,8.826484,-0.342726,9.484916,-7.192103,4.384480,0.291086,-1.098612,9.227444,-8.510522,-7.546966,-2.231165,-3.104414,8.500357,-9.616822,6.252199,6.405712,-0.860482,1.772868,5.168154,-4.485246,-2.186449,-6.624109,-1.308951,-9.999130,-7.388113,-5.331713,7.506973,3.250019,-0.536497,9.132975,-0.280111,-0.302501,-9.670680,-9.050683,9.813160,-3.814098,5.106651,6.708041,-2.219602,-4.054593,-4.863088,6.740261,5.596440,4.636326,6.965303,5.443536,2.461740,-5.274168,3.278498,-9.757929,7.851048,1.949171,4.057838,-8.418354,-7.305208,-4.926699,5.757921,9.609449,-0.276312,-3.729597,3.044880,-7.616544,-3.783978,-8.154460,9.258328,-7.322709,0.924700,9.705521,-3.079174,-6.341369,-0.680209,-8.433138,-5.305071,-1.189388,-0.521026,-3.827278,-2.781822,-6.791466,9.916371,6.248838,9.389060,-0.939494,5.188274,-5.622972,6.657637,-7.803857,8.173327,-6.537583,-8.209336,5.333681,2.593332,-3.936557,-5.020131,-9.364821,2.731689,-0.187421,-7.909599,5.745022,7.405928,4.221911,-4.743294,-3.401890,-6.828756,-0.704227,-6.602765,9.202113,3.779958,5.477725,9.856938,-9.498761,3.990504,6.878667,5.593523,7.387701,-2.481938,4.985913,0.950446,9.199524,-6.823142,-2.747620,1.131126,5.808768,-6.056577,-0.727144,-1.082170,-2.065118,1.138683,7.383891,8.712960,4.924267,-0.432001,-9.998931,5.927014,9.030069,0.171700,-2.956583,-9.403619,-3.120344,-9.496626,-4.662037,8.037857,5.411572,-1.742924,4.319009,3.804191,-9.983346,5.777232,8.767067,-0.903390,1.472897,7.479370,-2.284657,4.391177,-3.933850,9.537040,-3.765492,8.433122,1.855119,4.271964,3.440240,-6.637381,-8.241399,7.701542,-9.341879,-1.569468,3.095162,2.755131,7.925862,-4.245238,-4.729309,-8.784281,-5.774535,-5.684946,-6.013011,-8.963974,7.664271,6.128644,1.001390,0.903230,-1.456194,8.689425,8.679569,3.680798,6.310405,-0.841858,0.949443,-0.863994,4.370103,4.266933,-9.994276,8.645960,-2.854576,4.644632,3.086849,7.023776,3.186828,-6.820678,7.137657,9.770964,4.414916,1.178020,1.186315,6.497162,-4.727783,-3.499593,-0.048076,-8.159387,-6.844532,-6.368022,0.987096,8.630494,-2.938423,5.586729,1.921742,-6.505129,0.470023,9.934096,-5.731658,9.609570,3.014034,1.422966,6.164560,0.346464,-5.966341,-3.566751,7.700304,-5.876624,5.825887,-3.008953,-2.402693,2.352882,-9.808093,-8.820457,8.758421,2.066340,5.620127,1.213634,7.914598,-9.722013,-0.537451,0.629876,-6.205348,-6.337668,0.412978,-2.060475,2.813279,3.237319,-2.493771,-3.566998,5.025678,5.343286,6.173294,-3.589951,4.321533,-3.311135,6.597361,2.205065,4.972665,3.090673,-9.874566,-6.529816,9.832185,2.841309,-6.465389,-8.193631,-3.732267,-8.024880,-9.560080,-7.410545,-7.549804,4.654627,-1.682425,6.853142,-4.788226,-3.699938,8.142115,1.930536,7.331087,-6.616091,-1.617015,0.160435,-9.034270,-1.954448,-3.609124,-0.929148,3.509381,-5.486715,1.410612,7.521313,-9.164143,-6.427969,4.471597,3.113993,5.499846,-8.532435,-3.842544,-4.155014,0.921343,8.205396,8.536697,-7.799297,6.602539,-2.039986,4.682896,0.088427,9.020168,1.769506,3.541710,2.472803,-4.146430,-6.599288,-7.362375,-0.290269,-5.285813,0.965030], dtype = "float64")#candidate|9898|(1470,)|const|float64
call_9897 = relay.TupleGetItem(func_8176_call(relay.reshape(const_9898.astype('float64'), [1470,])), 0)
call_9899 = relay.TupleGetItem(func_8179_call(relay.reshape(const_9898.astype('float64'), [1470,])), 0)
bop_9922 = relay.minimum(uop_9872.astype('int64'), var_9849.astype('int64')) # shape=(14, 8, 1)
bop_9925 = relay.minimum(uop_9874.astype('int64'), var_9849.astype('int64')) # shape=(14, 8, 1)
func_7462_call = mod.get_global_var('func_7462')
func_7469_call = mutated_mod.get_global_var('func_7469')
var_9927 = relay.var("var_9927", dtype = "float32", shape = (26,))#candidate|9927|(26,)|var|float32
const_9928 = relay.const([-5.275534,-3.178058,6.479673,4.228171,4.275627,8.742870,-3.722423,0.607758,-3.535242,-0.659292,-6.474879,5.201083,-1.758074,8.620582,-5.455274,6.991199,3.253214,-4.104826,-8.043491,1.471254,-5.996849,7.372134,7.515716,6.343424,6.883574,-4.564654,2.776797,8.576871,-6.560359,7.845893,2.392154,5.401299,7.447975,2.656358,-5.787107,3.822801,2.619390,2.267412,-9.775153,4.644089,-3.424145,2.167281,3.106541,7.425124,1.886785,2.253038,7.426165,9.319029,-3.717209,-3.350584,-0.619946,4.140292,3.403538,-6.667672,5.823253,5.455519,6.219298,3.296575,8.653185,7.996587,-4.956760,6.998121,0.960608,-4.744077,-1.029400,-2.023521,-0.378373,-2.668409,-2.711378,0.588535,-7.185749,5.866242,-3.479037,9.292945,8.287869,-9.062354,7.395984,-4.123334,1.390154,-4.564996,6.927754,-2.282842,6.934757,8.242142,6.001472,2.486758,-0.317411,9.934777,-4.960201,-2.227578,4.931103,6.810707,7.715039,-0.498026,-4.770978,-0.458666,0.848913,5.181030,2.677749,7.118660,-7.105906,9.136723,2.418673,0.109998,4.883494,-8.299953,-9.887504,8.481896,3.525442,-6.283245,-3.063501,6.884556,6.546856,-5.407064,-3.517929,3.882097,6.540776,2.197844,-6.964399,-4.405824,-7.143332,-7.659192,-0.858479,-0.452809,8.142697,4.601131,8.350886,-4.680525,8.333574,-1.582817,-9.488211,-5.916561,-2.652807,-8.944222,-6.242526,-4.165023,4.083060,-4.982091,-5.292022,2.548035,8.830664,8.694237,-2.859462,-2.794886,2.178393,9.812153,-4.457778,4.009449,0.740011,6.937048,-0.523429,-1.770720,7.719152,1.455030,-2.098443,4.961910,3.617183,-5.541406,-7.500246,2.422048,8.126178,1.145790,8.347691,-9.353599,0.845910,-4.125506,8.373218,9.198000,7.121512,-2.551821,-7.057905,-9.864986,6.304105,7.947240,8.986759,0.741964,5.006566,-6.825589,3.745549,2.451768,8.051761,-8.817775,-8.999497,9.782739,-2.659440,0.047136,6.514503,-6.522518,7.805892,4.970725,-4.681396,9.137851,2.171439,-1.710071,6.426195,7.359978,-4.867494,6.186725,-6.067580,-9.016439,9.956680,1.784281,0.616792,9.054026,6.663777,9.868588,5.142011,9.875624,3.537662,0.209383,8.022733,0.120274,-8.172873,-3.069431,4.107279,0.429739,1.057486,8.437584,-4.323816,9.610515,1.749729,4.530603,8.140208,-9.667368,7.761035,9.343395,-1.818915,-6.433799,-6.305712,2.217730,9.281716,-3.646632,7.372087,-3.653943,-3.798345,2.736629,-0.679822,-2.846786,5.277562,-5.293104,-9.817892,0.965700,-6.945786,8.094651,4.005197,-0.913187,3.307745,2.864461,4.104512,-0.218680,0.317665,9.442328,-1.667296,6.921177,-2.211088,-9.421176,-3.440519,-2.202538,5.340105,0.205995,-5.491283,-4.923163,-9.822622,8.839604,1.969292,1.301625,7.241323,-8.491859,-5.014179,-5.796189,-3.210723,1.537057,-2.333556,8.545724,5.726732,-1.354601,6.725963,0.724917,-7.402770,5.055711,-8.429438,-5.204157,8.127640,9.572015,7.585691,1.175625,7.811124,-5.043967,-0.135038,9.401893,-4.135785,2.574873,-9.132904,3.985689,9.791548,-3.325659,4.567773,-0.919733,-5.783237,-7.311800,8.271276,6.662408,-3.007145,-1.509601,3.618365,-5.825034,-0.054353,0.580852,-6.662210,6.158584,0.986163,5.810521,8.361930,-4.869048,2.664080,3.073562,-1.006999,3.514859,-9.735516,8.226099,-6.087688,6.465511,5.367765,4.911207,5.414928,-1.180855,3.860958,0.380458,6.396289,-3.264967,-1.307260,6.539348,-0.585274,1.859189,-2.671766,-6.686660,-0.321777,0.377105,8.472692,1.334878,-1.419936,4.511818,1.822362,-3.952594,-7.442310,3.261165,-8.535072,1.800250,-2.253415,9.030963,4.510420,4.303148,4.463456,-4.751406,1.582655,3.232220,8.507730,3.600285,4.087924,5.123058,-2.199608,-5.225281,7.147637,9.526271,-2.462292,-1.548941,6.090498,9.993929,5.353930,9.292311,8.083141,-3.672538,0.766708,9.039833,2.946784,3.893588,6.241829,-1.645752,2.295177,-4.285583,-9.075199,-8.697668,-8.371744,-8.428434,7.727497,5.535756,-5.548835,3.191684,0.043035,-4.166923,9.386602,2.207153,1.207171,1.063809,5.941090,-1.919045,-9.866943,2.514184,-4.631031,-6.324748,4.590167,-8.273666,1.423022,-5.930159,-6.832530,1.479340,-2.243626,-2.919534,-8.741587,-5.563317,-3.227161,2.498590,6.516455,6.813437,-3.541410,7.928981,4.822079,8.856231,1.780106,-5.701059,-4.026600,0.182185,-5.397067,-9.949493,8.995807,-9.518765,8.748491,0.367313,5.175758,-5.971678,-3.494636,0.799538,3.329080,5.563401,-3.664105,-1.596090,8.784117,6.939712,-4.664726,6.110968,3.207187,3.557169,7.354365,1.076551,8.936645,5.231583,-9.672584,-5.006645,0.662245,-7.717982,0.278550,4.839711,3.081078,-5.248272,-0.197382,9.962383,0.679026,5.094825,4.340587,8.508859,-4.388092,9.617997,-9.146497,3.331568,1.694287,9.632305,-8.023921,3.810132,-3.526272,5.233621,7.754149,-2.655354,2.851103,-8.255208,-7.572790,-4.023821,-4.857828,5.114818,5.746103,-6.316503,3.390289,8.570361,-8.873988,4.516708,-6.153409,-2.219009,1.173849,-8.256766,-8.873311,-8.008618,9.275086,3.921755,-1.287533,-8.566305,9.067083,-7.738724,-9.154005,1.770841,-9.128968,2.711598,0.150474,4.921135,-8.515465,-8.344960,-3.301774,-7.973921,9.267791,7.932629,-6.149340,3.638597,-1.823656,-2.294312,8.783546,-8.571868,-8.351883,-3.298222,9.496263,4.855054,0.163240,-2.057781,-4.077595,2.726363,-9.651873,8.582970,-3.381402,9.157869,-3.950660,-6.349688,5.256884,1.589138,-5.385250,5.807369,3.824407,-3.189930,-9.099505,-4.298974,4.119318,-0.141251,-8.516807,-8.552480,-4.072178,-1.634121,-4.477257,-3.798385,7.696999,6.379925,4.879768,8.069043,1.283649,-6.707921,-2.531910,-1.029891,-0.178804,0.731702,-9.332115,-4.647418,4.095650,2.432865,9.348904,0.293103,-9.755166,-7.200707,-7.600655,-7.768430,9.404174,0.253986,-6.729981,5.091666,4.729695,0.740324,7.631101,-4.065519,-2.841486,-9.850422,-5.291413,-4.116562,-7.449270,-0.850587,-2.806341,1.822033,9.775754,8.659500,-8.838240,6.386339,-0.463736,-7.960689,-2.699299,-5.757745,-0.713396,-9.767854,1.889933,3.212316,9.783424,-1.602920,3.203446,-7.799421,-2.571237,-6.586658,-8.077293,-3.420480,-7.530731,-3.304355,-9.192096,-0.857233,6.855819,5.580657,4.499780,6.285826,-7.538708,0.897844,5.631035,0.338859,4.021147,-6.700531,8.228364,-4.122152,0.972374,-4.200023,-1.855775,0.929857,1.331411,-4.808525,5.520812,4.646399,8.276509,2.538044,-5.627101,-3.487522,-0.591204,-9.936731,-2.843113,-6.008541,5.916416,9.190582,0.948943,-5.786592,4.404949,8.507900,-1.026692,-8.128343,1.909844,-5.210093,-0.697245,-9.833541,1.906753,-3.376323,0.433015,-1.196103,1.657850,-8.708109,-9.837025,9.218692,2.902216,-0.690325,-2.550352,1.180051,4.452039,8.601791,4.690018,-8.735317,-0.675822,-8.264953,1.223416,1.682206,-0.256616,3.106772,-3.653843,-3.291779,-9.727388,6.000669,4.814078,-2.950099,-0.772259,1.492907,4.851511,-1.572171,-9.004860,-5.486209,8.370804,0.612090,0.698687,-7.892573,9.443377,-7.621240,-6.112879,-5.844765,-7.000946,-2.607081,2.871717,-3.958443,3.829419,-5.826403,9.165380,-6.715720,-1.343172,-8.766824,-9.601271,4.264670,4.007981,5.018592,7.647596,-9.683405,1.008763,-5.390687,-6.381130,1.996724,-1.221111,9.582353,-3.045332,-9.729306,6.852172,4.416535,-6.343771,-6.803049,-6.628369,1.948562,9.529344,5.064536,-9.802261,9.642096,4.433214,-1.095050,5.280187,6.611632,7.739996,-5.775236,6.130286,1.638621,0.985035,8.994928,7.699333,3.267188,-5.868046,9.003763,9.883455,2.050223,-6.633857,-7.391271,-6.685395,1.493727,2.667489,-7.710581,0.276766,-5.377008,3.339256,-0.381875,-8.323267,-0.763164,2.489891,6.662897,-4.671597,5.177361,5.318619,-4.600926,8.949692,1.902808,-0.608515,4.373882,4.987216,-7.591489,-7.302196,-4.016200,-5.700789,8.108398,-5.975914,-5.057592,-9.176060,8.985040,5.146553,2.574092,-0.630967,-7.583462,-3.614151,-2.737721,0.885187,7.182727,-0.331723,8.865632,-2.265362,-2.700400,7.490526,9.138034,-2.168954,3.317620,1.891346,-7.625830,-0.848226,-5.508923,0.181754,-8.353127,7.118765,-7.724966,8.331388,-5.269792,-3.124568,2.197107,-6.043168,8.717248,3.059947,-7.657404,1.979925,-1.522327,1.942481,3.411253,-6.886396,-7.046972,2.508182,3.344395,-0.645618,-7.127811,-6.034802,-9.831182,-3.107259,8.512893,6.945716,-0.992362,-4.050323,-4.546832,2.099936,-0.524758,7.285880,7.196162,8.620022,-6.902545,2.911662,3.558729,-9.271082,-7.069161,2.474024,-2.229822,3.023974,-4.859207,-0.082320,-9.960981,-2.160043,8.438995,2.024177,-5.815641,3.239596,-0.426260,9.785631,-4.214597,4.163254,-0.946720,-6.309489,1.096736,-9.016186,9.039567,-2.965200,-1.984300,9.140782,7.265492,8.540358,7.410575,-5.317995,5.629966,7.546523,6.580737,-1.502513,-8.670674,-8.088930,-6.054671,9.564910,9.830645,0.412268,-1.989994,7.534994,0.971909,2.726843,2.138309,-5.369159,9.669120,-4.101114,0.754329,-4.737596,7.370945,8.277704,8.962620,-5.018950,6.988737,8.925650,-5.004095,6.863222,3.395534,-1.168168,-7.773955,2.259900,6.114146,-3.389587,-6.784333,-9.955081,9.176702,7.280108,-0.547446,-0.447443,-0.521964,7.645042,-7.744516,-9.827207,5.526546,7.705607,-1.481289,5.240103,-8.420417,-0.242934,-8.797467,0.916590,-1.695530,1.021967,-3.601383,-9.053697,4.881138,1.302136,-7.618585,3.456132,-0.659205,7.229097,5.878918,-2.615405,-4.952183,-5.347561,4.099398,8.900236,-4.764496,-9.913090,-4.101597,8.392971,-8.157700,0.766223,0.522866,-8.273181,6.509039,-7.116842,-5.019025,7.703516,4.946463,-8.068914,7.020746,-9.359446,-9.587048,-7.566089,-8.581653,-7.269386,-1.086346,8.856429,-1.300408,5.226308,-2.470468,-1.814102,0.274095,3.865455,3.176898,3.047978,3.816926,-1.525110,9.440187,-7.615573,4.565092,-2.102490,2.278421,2.462776,-1.222531,5.711353,-3.348868,7.335808,0.954823,-7.559505,-6.124468,4.509942,6.870756,6.603278,-2.486077,-2.917232,-3.010313,7.085718,5.901457,1.586245,-8.484924,-3.645005,-2.720163,-6.500756,-7.945528,-7.106468,-6.470288,6.244539,-9.121681,-9.927157,-5.479307,-3.104994,-6.959667], dtype = "float32")#candidate|9928|(990,)|const|float32
var_9929 = relay.var("var_9929", dtype = "float32", shape = (84,))#candidate|9929|(84,)|var|float32
const_9930 = relay.const([3.824979,9.481887,-4.657423,5.226481,-8.988775,-1.468903,9.811441,4.697955,-1.527544,7.704799,-4.218655,-8.704391,2.206799,2.121792,6.045942,1.379394,-3.421435,-9.237923,-0.001641,4.858899,-4.376568,9.384092,5.888524,-9.779901,-6.991218,-0.887091,1.505996,8.193138,-8.614957,0.869736,5.913182,-4.888209,-7.119722,-4.144421,-8.378340,1.280437,-1.776382,0.883700,8.840425,5.351222,0.326634,-6.858218,-7.515944,3.456231,-7.234824,-7.751287,4.316866,0.385182,5.565165,1.404854,-3.633980,8.961850,3.944972,-8.179835,-8.925413,3.875131,1.295039,-8.428024,3.087877,-3.954178,5.096244,-7.868834,0.256552,-3.157115,7.133899,2.396080,-9.787480,-4.488677,0.229528,-1.871500,-8.186778,2.606740,-5.232224,8.809501,3.505287,7.014410,-0.995682,-9.243529,-3.880709,1.808260,-0.063535,7.126756,6.188137,-0.706455,-5.714623,-4.418221,-0.464255,-7.573896,4.501843,6.406049,1.797379,9.084741,-8.472300,9.058329,-4.489031,-4.837647,0.334589,0.831388,-9.432565,7.452151,7.247565,4.382057,4.280389,-1.499273,-7.829003,-9.705598,-2.078395,5.439460,0.002903,1.517735,7.253314,-1.635857,8.181820,7.822996,5.593746,-2.962634,-5.258942,2.612711,3.618983,1.467273,3.526173,5.788182,9.083844,-9.949134,-0.345321,6.488588,0.171067,-9.384728,6.827806,-8.368240,3.025642,3.017759,4.496271,0.648967,-9.481135,-4.807962,-7.059906,-6.842551,-2.375289,-7.066384,-8.365450,2.811774,5.375507,8.766436,0.908833,-1.663040,-7.198730,6.682980,-5.155857,1.534837,6.084220,-9.350989,6.133131,7.231239,1.325680,-0.119352,3.841418,5.301744,-9.149131,-7.787074,9.563883,-4.314712,-9.785493,9.427909,-0.379137,-5.198448,-9.691511,-0.658679,6.396951,1.439637,8.044488,-7.617324,4.543260,-6.812150,-1.816044,-0.147281,5.794897,-9.495069,-1.661665,-0.793698,-0.288708,-7.340966,6.030215,-6.826572,-3.330103,2.541984,-4.611093,7.638416,1.900675,4.564925,-2.157165,3.307188,-1.450042,3.593867,1.336896,3.925528,-9.391731,-2.647577,-2.886433,-2.955913,6.922383,7.784484,-5.515126,1.170252,-8.723569,3.338358,-6.821679,-1.250021,-8.981305,6.921423,3.083106,5.106470,-2.941508,7.861243,5.349597,-0.868011,3.930313,-7.812136,-2.557918,0.148978,-7.354515,5.098771,-9.724892,8.762967,4.693147,-1.478329,8.313937,1.496292,-0.915966,9.390780,-3.388233,-8.830870,8.875662,1.941307,-9.760481,-7.777827,-5.726178,-9.149214,5.874421,3.415209,-1.399694,1.413955,-1.870006,-4.932580,5.575879,-0.373241,7.411313,5.396156,2.909129,-3.853930,3.419367,-7.279317,-9.222593,-2.676428,-5.433749,-1.361538,-6.059520,-7.157752,-9.557125,4.270176], dtype = "float32")#candidate|9930|(260,)|const|float32
call_9926 = relay.TupleGetItem(func_7462_call(relay.reshape(var_9927.astype('float32'), [13, 2, 1]), relay.reshape(const_9928.astype('float32'), [990,]), relay.reshape(call_9897.astype('bool'), [1350,]), relay.reshape(var_9929.astype('float32'), [84, 1]), relay.reshape(const_9930.astype('float32'), [13, 2, 10]), ), 3)
call_9931 = relay.TupleGetItem(func_7469_call(relay.reshape(var_9927.astype('float32'), [13, 2, 1]), relay.reshape(const_9928.astype('float32'), [990,]), relay.reshape(call_9897.astype('bool'), [1350,]), relay.reshape(var_9929.astype('float32'), [84, 1]), relay.reshape(const_9930.astype('float32'), [13, 2, 10]), ), 3)
bop_9934 = relay.floor_mod(uop_9872.astype('float64'), const_9898.astype('float64')) # shape=(14, 8, 1470)
bop_9937 = relay.floor_mod(uop_9874.astype('float64'), const_9898.astype('float64')) # shape=(14, 8, 1470)
bop_9946 = relay.power(bop_9934.astype('float64'), bop_9922.astype('float64')) # shape=(14, 8, 1470)
bop_9949 = relay.power(bop_9937.astype('float64'), bop_9925.astype('float64')) # shape=(14, 8, 1470)
uop_9958 = relay.acosh(uop_9872.astype('float32')) # shape=(14, 8, 1)
uop_9960 = relay.acosh(uop_9874.astype('float32')) # shape=(14, 8, 1)
output = relay.Tuple([call_9848,call_9852,call_9897,call_9926,var_9927,const_9928,var_9929,const_9930,bop_9946,uop_9958,])
output2 = relay.Tuple([call_9850,call_9853,call_9899,call_9931,var_9927,const_9928,var_9929,const_9930,bop_9949,uop_9960,])
F = relay.Function([var_9849,var_9927,var_9929,], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([var_9849,var_9927,var_9929,], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
	relay.transform.DynamicToStatic(),
	relay.transform.FastMath(),
	relay.transform.FirstOrderGradient(),
	relay.transform.EliminateCommonSubexpr(),
	relay.transform.MergeCompilerRegions(),
	relay.transform.Inline(),
	relay.transform.LambdaLift(),
	relay.transform.LazyGradientInit(),
	relay.transform.PartialEvaluate(),
	relay.transform.Legalize(),
	relay.transform.FoldConstant(),
	relay.transform.ToANormalForm(),
	relay.transform.ToGraphNormalForm(),
	relay.transform.SimplifyInference(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
