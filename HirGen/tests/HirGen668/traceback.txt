==========mod==========
#[version = "0.0.5"]
def @func_5561(%var_5558: Tensor[(7, 13, 10), float32]) -> Tensor[(7, 13, 10), float32] {
  %0 = cast(%var_5558, dtype="float32") /* ty=Tensor[(7, 13, 10), float32] */;
  log2(%0) /* ty=Tensor[(7, 13, 10), float32] */
}

def @func_11960() -> (Tensor[(2, 6, 3), float32],) {
  %1 = @func_10657() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */;
  %2 = %1.0;
  (%2,)
}

def @func_12197() -> (Tensor[(275), float32],) {
  %3 = @func_11928() /* ty=Tensor[(275), float32] */;
  (%3,)
}

def @func_12804(%var_12790: Tensor[(108), int64]) -> (Tensor[(2, 6, 3), float32], Tensor[(13, 9, 12), bool], Tensor[(108), int64], Tensor[(1404), int64]) {
  %4 = @func_11960() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %5 = cast(%var_12790, dtype="int64") /* ty=Tensor[(108), int64] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1404), int64] */, dtype="int64") /* ty=Tensor[(1404), int64] */;
  %7 = reshape(%5, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), int64] */;
  %8 = reshape(%6, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), int64] */;
  %9 = @func_11678(%7, %8) /* ty=(Tensor[(13, 9, 12), bool],) */;
  %10 = %4.0;
  %11 = %9.0;
  (%10, %11, %var_12790, meta[relay.Constant][0] /* ty=Tensor[(1404), int64] */)
}

def @func_7547(%var_7535: Tensor[(16, 9, 15), float64], %var_7536: Tensor[(16, 9, 15), float64]) -> (Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64]) {
  %12 = cast(%var_7536, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %13 = shape_of(%var_7535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_7535, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %16 = cast(%var_7536, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
  %17 = floor_mod(%14, %15) /* ty=Tensor[(16, 9, 15), float64] */;
  %18 = sin(%16) /* ty=Tensor[(16, 9, 15), float64] */;
  (%17, %18)
}

def @func_11106(%var_11064: Tensor[(2, 280), uint64]) -> (Tensor[(2, 6, 3), float32], Tensor[(10, 8, 7), uint64], Tensor[(2, 280), uint64], Tensor[(1568), int8], Tensor[(15, 3, 15), bool], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(7, 16, 5), float32], Tensor[(3, 16, 2), int32]) {
  %19 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %22 = cast(%var_11064, dtype="uint64") /* ty=Tensor[(2, 280), uint64] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(1568), int8] */, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %24 = reshape(%22, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
  %25 = reshape(%23, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %26 = @func_1428(%24, %25) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %28 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %29 = cast(meta[relay.Constant][4] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %30 = reshape(%27, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %31 = reshape(%28, newshape=[]) /* ty=uint16 */;
  %32 = reshape(%29, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %33 = @func_727(%30, %31, %32) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %34 = %26.0;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
  %36 = reshape(%35, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), float32] */;
  %37 = @func_10657() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */;
  %38 = sqrt(%21) /* ty=Tensor[(2, 6, 3), float32] */;
  %39 = %33.1;
  %40 = @func_2354(%36) /* ty=Tensor[(7, 16, 5), float32] */;
  %41 = %37.1;
  (%38, %34, %var_11064, meta[relay.Constant][1] /* ty=Tensor[(1568), int8] */, %39, meta[relay.Constant][2] /* ty=Tensor[(1872), uint32] */, meta[relay.Constant][3] /* ty=uint16 */, meta[relay.Constant][4] /* ty=Tensor[(675), uint16] */, %40, %41)
}

def @func_2146(%var_2131: Tensor[(9, 11, 13), float32], %var_2132: Tensor[(9, 11, 13), float32]) -> Tensor[(9, 11, 13), float64] {
  %42 = cast(%var_2132, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
  %43 = shape_of(%var_2131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%var_2131, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %46 = divide(%44, %45) /* ty=Tensor[(9, 11, 13), float32] */;
  %47 = cast(%46, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  acos(%47) /* ty=Tensor[(9, 11, 13), float64] */
}

def @func_11678(%var_11673: Tensor[(1, 9, 12), int64], %var_11674: Tensor[(13, 9, 12), int64]) -> (Tensor[(13, 9, 12), bool],) {
  %48 = cast(%var_11673, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %49 = cast(%var_11674, dtype="bool") /* ty=Tensor[(13, 9, 12), bool] */;
  %50 = not_equal(%48, %49) /* ty=Tensor[(13, 9, 12), bool] */;
  (%50,)
}

def @func_13099(%var_13089: Tensor[(1287), float32], %var_13095: Tensor[(560), uint64], %var_13096: Tensor[(1568), int8], %var_13097: Tensor[(275, 1), float32]) -> (Tensor[(2, 6, 3), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(14, 6, 8), float64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275, 1), float32]) {
  %51 = @func_12240() /* ty=(Tensor[(2, 6, 3), float64],) */;
  %52 = cast(%var_13089, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %53 = reshape(%52, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %54 = @func_9669(%53) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) */;
  %55 = cast(meta[relay.Constant][5] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %57 = cast(%var_13095, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %58 = cast(%var_13096, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %59 = cast(%var_13097, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %60 = reshape(%55, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
  %61 = reshape(%56, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
  %62 = reshape(%57, newshape=[1, 560]) /* ty=Tensor[(1, 560), uint64] */;
  %63 = reshape(%58, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %64 = reshape(%59, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %65 = @func_4072(%60, %61, %62, %63, %64) /* ty=(Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) */;
  %66 = %51.0;
  %67 = %54.2;
  %68 = %65.1;
  (%66, %67, %var_13089, %68, meta[relay.Constant][5] /* ty=Tensor[(288), float32] */, %var_13095, %var_13096, %var_13097)
}

def @func_10222(%var_10213: Tensor[(1568), int8], %var_10214: Tensor[(275), float32]) -> (Tensor[(672), float64], Tensor[(1, 560), uint64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275), float32]) {
  %69 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %72 = cast(meta[relay.Constant][7] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %73 = cast(%var_10213, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %74 = cast(%var_10214, dtype="float32") /* ty=Tensor[(275), float32] */;
  %75 = reshape(%70, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
  %76 = reshape(%71, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
  %77 = reshape(%72, newshape=[1, 560]) /* ty=Tensor[(1, 560), uint64] */;
  %78 = reshape(%73, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %79 = reshape(%74, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %80 = @func_4072(%75, %76, %77, %78, %79) /* ty=(Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) */;
  %81 = %69.2;
  %82 = %80.4;
  (%81, %82, meta[relay.Constant][6] /* ty=Tensor[(288), float32] */, meta[relay.Constant][7] /* ty=Tensor[(560), uint64] */, %var_10213, %var_10214)
}

def @func_727(%var_704: Tensor[(16, 9, 13), uint32], %var_715: uint16, %var_716: Tensor[(675), uint16]) -> (Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) {
  %83 = cast(meta[relay.Constant][8] /* ty=Tensor[(16, 9, 13), uint32] */, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %84 = shape_of(%var_704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%var_704, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = cast(%var_715, dtype="uint16") /* ty=uint16 */;
  %88 = cast(%var_716, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %89 = reshape(%87, newshape=[]) /* ty=uint16 */;
  %90 = reshape(%88, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %91 = @func_440(%89, %90) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %92 = not_equal(%85, %86) /* ty=Tensor[(16, 9, 13), bool] */;
  %93 = %91.0;
  (%92, %93, %var_715, %var_716)
}

def @func_11359(%var_11342: Tensor[(2, 6, 3), float32]) -> (Tensor[(2, 6, 3), bool], Tensor[(11, 10, 5), uint32]) {
  %94 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
  %95 = cast(%var_11342, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = @func_10262() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) */;
  %100 = less(%97, %98) /* ty=Tensor[(2, 6, 3), bool] */;
  %101 = %99.1;
  (%100, %101)
}

def @func_11928() -> Tensor[(275), float32] {
  %102 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
  %102.4
}

def @func_10772(%var_10751: Tensor[(6, 4, 8), int16], %var_10752: Tensor[(6, 4, 8), int16]) -> (Tensor[(6, 4, 8), int16], Tensor[(13, 6, 3), float32], Tensor[(234), float32], Tensor[(6, 4, 8), float64]) {
  %103 = cast(%var_10752, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
  %104 = shape_of(%var_10751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%var_10751, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %107 = cast(meta[relay.Constant][9] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %108 = reshape(%107, newshape=[13, 6, 3]) /* ty=Tensor[(13, 6, 3), float32] */;
  %109 = @func_7581(%108) /* ty=(Tensor[(13, 6, 3), float32],) */;
  %110 = cast(%var_10751, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
  %111 = bitwise_or(%105, %106) /* ty=Tensor[(6, 4, 8), int16] */;
  %112 = %109.0;
  %113 = asin(%110) /* ty=Tensor[(6, 4, 8), float64] */;
  (%111, %112, meta[relay.Constant][9] /* ty=Tensor[(234), float32] */, %113)
}

def @func_13036(%var_13008: Tensor[(360), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(6, 10, 6), uint32], Tensor[(60), float64], Tensor[(360), float64], Tensor[(5, 9, 2), float64], Tensor[(90), float64]) {
  %114 = @func_10240() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %115 = cast(meta[relay.Constant][10] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %116 = cast(%var_13008, dtype="float64") /* ty=Tensor[(360), float64] */;
  %117 = reshape(%115, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float64] */;
  %118 = reshape(%116, newshape=[6, 10, 6]) /* ty=Tensor[(6, 10, 6), float64] */;
  %119 = @func_7070(%117, %118) /* ty=(Tensor[(6, 10, ?), float32], Tensor[(6, 10, 6), uint32]) */;
  %120 = cast(meta[relay.Constant][11] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %121 = reshape(%120, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
  %122 = %114.0;
  %123 = %119.1;
  %124 = @func_2853(%121) /* ty=Tensor[(5, 9, 2), float64] */;
  (%122, %123, meta[relay.Constant][10] /* ty=Tensor[(60), float64] */, %var_13008, %124, meta[relay.Constant][11] /* ty=Tensor[(90), float64] */)
}

def @func_11027(%var_11012: Tensor[(504), float32], %var_11023: Tensor[(1, 1568), int8]) -> (Tensor[(2, 6, 3), float32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(275), float32], Tensor[(1, 1568), int8], Tensor[(275, 1), float32]) {
  %125 = cast(%var_11012, dtype="float32") /* ty=Tensor[(504), float32] */;
  %126 = reshape(%125, newshape=[3, 14, 12]) /* ty=Tensor[(3, 14, 12), float32] */;
  %127 = cast(%var_11023, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %128 = cast(meta[relay.Constant][12] /* ty=Tensor[(275, 1), float32] */, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %129 = reshape(%127, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %130 = reshape(%128, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %131 = @func_10222(%129, %130) /* ty=(Tensor[(672), float64], Tensor[(1, 560), uint64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275), float32]) */;
  %132 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
  %133 = @func_6244(%126) /* ty=Tensor[(3, 14, 12), float32] */;
  %134 = %131.5;
  (%132, %133, %var_11012, %134, %var_11023, meta[relay.Constant][12] /* ty=Tensor[(275, 1), float32] */)
}

def @func_2853(%var_2833: Tensor[(5, 9, 2), float64]) -> Tensor[(5, 9, 2), float64] {
  %135 = cast(%var_2833, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
  log2(%135) /* ty=Tensor[(5, 9, 2), float64] */
}

def @func_12240() -> (Tensor[(2, 6, 3), float64],) {
  %136 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
  %137 = cast(%136, dtype="float64") /* ty=Tensor[(2, 6, 3), float64] */;
  %138 = acosh(%137) /* ty=Tensor[(2, 6, 3), float64] */;
  (%138,)
}

def @func_7070(%var_7035: Tensor[(6, 10, 1), float64], %var_7065: Tensor[(6, 10, 6), float64]) -> (Tensor[(6, 10, ?), float32], Tensor[(6, 10, 6), uint32]) {
  %139 = cast(%var_7035, dtype="float64") /* ty=Tensor[(6, 10, 1), float64] */;
  %140 = log(%139) /* ty=Tensor[(6, 10, 1), float64] */;
  %141 = cast(%var_7035, dtype="float64") /* ty=Tensor[(6, 10, 1), float64] */;
  %142 = cosh(%141) /* ty=Tensor[(6, 10, 1), float64] */;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(6, 10, 1), float32] */;
  %144 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%140, dtype="float32") /* ty=Tensor[(6, 10, 1), float32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %147 = cast(%var_7035, dtype="float64") /* ty=Tensor[(6, 10, 1), float64] */;
  %148 = atan(%147) /* ty=Tensor[(6, 10, 1), float64] */;
  %149 = cast(%148, dtype="uint32") /* ty=Tensor[(6, 10, 1), uint32] */;
  %150 = cast(%var_7065, dtype="uint32") /* ty=Tensor[(6, 10, 6), uint32] */;
  %151 = divide(%145, %146) /* ty=Tensor[(6, 10, ?), float32] */;
  %152 = bitwise_or(%149, %150) /* ty=Tensor[(6, 10, 6), uint32] */;
  (%151, %152)
}

def @func_1990(%var_1972: Tensor[(12, 13, 10), float32], %var_1973: Tensor[(12, 13, 10), float32], %var_1983: Tensor[(4, 140), uint64]) -> (Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) {
  %153 = cast(%var_1973, dtype="bool") /* ty=Tensor[(12, 13, 10), bool] */;
  %154 = shape_of(%var_1972, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_1972, dtype="bool") /* ty=Tensor[(12, 13, 10), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = less_equal(%155, %156) /* ty=Tensor[(12, 13, 10), bool] */;
  %158 = cast(%157, dtype="float64") /* ty=Tensor[(12, 13, 10), float64] */;
  %159 = cast(%var_1983, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
  %160 = cast(meta[relay.Constant][13] /* ty=Tensor[(1568), int8] */, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %161 = reshape(%159, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
  %162 = reshape(%160, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %163 = @func_1428(%161, %162) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
  %164 = sinh(%158) /* ty=Tensor[(12, 13, 10), float64] */;
  %165 = %163.1;
  (%164, %165, %var_1983, meta[relay.Constant][13] /* ty=Tensor[(1568), int8] */)
}

def @func_11196(%var_11190: Tensor[(16, 12, 3), float64]) -> (Tensor[(16, 12, 3), float64],) {
  %166 = cast(%var_11190, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %167 = cosh(%166) /* ty=Tensor[(16, 12, 3), float64] */;
  (%167,)
}

def @func_10065() -> (Tensor[(2, 6, 3), float32],) {
  %168 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  (%168,)
}

def @func_11992(%var_11984: Tensor[(1, 12, 14), uint32], %var_11985: Tensor[(7, 12, 14), uint32]) -> (Tensor[(7, 12, 14), bool],) {
  %169 = cast(%var_11984, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
  %170 = cast(%var_11985, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
  %171 = greater(%169, %170) /* ty=Tensor[(7, 12, 14), bool] */;
  (%171,)
}

def @func_1180(%var_1140: Tensor[(13, 15, 10), int64], %var_1141: Tensor[(13, 15, 10), int64], %var_1156: Tensor[(1, 672), int8], %var_1157: uint16, %var_1167: Tensor[(6), float64]) -> (Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) {
  %172 = cast(%var_1141, dtype="bool") /* ty=Tensor[(13, 15, 10), bool] */;
  %173 = shape_of(%var_1140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_1140, dtype="bool") /* ty=Tensor[(13, 15, 10), bool] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %176 = cast(%var_1156, dtype="int8") /* ty=Tensor[(1, 672), int8] */;
  %177 = cast(%var_1156, dtype="int8") /* ty=Tensor[(1, 672), int8] */;
  %178 = cast(%var_1157, dtype="uint16") /* ty=uint16 */;
  %179 = cast(meta[relay.Constant][14] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %180 = reshape(%176, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
  %181 = reshape(%177, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
  %182 = reshape(%178, newshape=[]) /* ty=uint16 */;
  %183 = reshape(%179, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %184 = @func_813(%180, %181, %182, %183) /* ty=(Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) */;
  %185 = cast(%var_1167, dtype="float64") /* ty=Tensor[(6), float64] */;
  %186 = %184.4;
  %187 = cast(%186, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %188 = reshape(%185, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %189 = reshape(%187, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %190 = @func_603(%188, %189) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %191 = not_equal(%174, %175) /* ty=Tensor[(13, 15, 10), bool] */;
  %192 = %190.1;
  (%191, %186, %var_1156, %var_1157, meta[relay.Constant][14] /* ty=Tensor[(675), uint16] */, %192, %var_1167)
}

def @func_5509(%var_5487: int64, %var_5488: Tensor[(15, 6, 15), int64]) -> (Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) {
  %193 = cast(%var_5487, dtype="int64") /* ty=int64 */;
  %194 = cast(%var_5488, dtype="int64") /* ty=Tensor[(15, 6, 15), int64] */;
  %195 = cast(%var_5488, dtype="float32") /* ty=Tensor[(15, 6, 15), float32] */;
  %196 = cast(%var_5487, dtype="float32") /* ty=float32 */;
  %197 = logical_xor(%193, %194) /* ty=Tensor[(15, 6, 15), int64] */;
  %198 = floor_mod(%195, %196) /* ty=Tensor[(15, 6, 15), float32] */;
  (%197, %198)
}

def @func_5453(%var_5448: Tensor[(6, 7, 13), float32]) -> Tensor[(6, 7, 13), float32] {
  %199 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %200 = shape_of(%var_5448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_5448, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%201, %202) /* ty=Tensor[(6, 7, 13), float32] */
}

def @func_4072(%var_3995: Tensor[(9, 4, 8), float32], %var_3996: Tensor[(9, 4, 8), float32], %var_4041: Tensor[(1, 560), uint64], %var_4042: Tensor[(1568), int8], %var_4049: Tensor[(275), float32]) -> (Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) {
  %203 = cast(%var_3996, dtype="float32") /* ty=Tensor[(9, 4, 8), float32] */;
  %204 = shape_of(%var_3995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%var_3995, dtype="float32") /* ty=Tensor[(9, 4, 8), float32] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %207 = cast(meta[relay.Constant][16] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %208 = cast(meta[relay.Constant][16] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %209 = reshape(%207, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %210 = reshape(%208, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %211 = @func_3399(%209, %210) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */;
  %212 = cast(%var_4041, dtype="uint64") /* ty=Tensor[(1, 560), uint64] */;
  %213 = cast(%var_4042, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %214 = reshape(%212, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
  %215 = reshape(%213, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %216 = @func_1428(%214, %215) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
  %217 = cast(meta[relay.Constant][17] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %218 = cast(meta[relay.Constant][17] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %219 = cast(meta[relay.Constant][18] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %220 = cast(meta[relay.Constant][19] /* ty=Tensor[(54), bool] */, dtype="bool") /* ty=Tensor[(54), bool] */;
  %221 = cast(%var_4049, dtype="float32") /* ty=Tensor[(275), float32] */;
  %222 = reshape(%217, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %223 = reshape(%218, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %224 = reshape(%219, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %225 = reshape(%220, newshape=[54]) /* ty=Tensor[(54), bool] */;
  %226 = reshape(%221, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %227 = @func_2326(%222, %223, %224, %225, %226) /* ty=(Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %228 = cast(%var_3996, dtype="float32") /* ty=Tensor[(9, 4, 8), float32] */;
  %229 = tan(%228) /* ty=Tensor[(9, 4, 8), float32] */;
  %230 = cast(%var_3996, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %234 = floor_mod(%205, %206) /* ty=Tensor[(9, 4, 8), float32] */;
  %235 = %211.0;
  %236 = %216.2;
  %237 = %227.10;
  %238 = logical_or(%232, %233) /* ty=Tensor[(9, 4, 8), bool] */;
  (%234, %235, meta[relay.Constant][16] /* ty=Tensor[(672), float64] */, %236, %var_4041, %var_4042, %237, meta[relay.Constant][17] /* ty=Tensor[(720), float64] */, meta[relay.Constant][18] /* ty=Tensor[(6), float64] */, meta[relay.Constant][19] /* ty=Tensor[(54), bool] */, %var_4049, %238)
}

def @main(%var_13466: Tensor[(1872), uint32], %var_13467: uint16, %var_13498: Tensor[(560), uint64], %var_13517: Tensor[(2, 6, 3), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(675), uint16], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(2, 6, 3), float64], Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], Tensor[(1560), float32], Tensor[(560), uint64], Tensor[(?, 910), uint64], Tensor[(2, 6, 3), bool]) {
  %239 = cast(%var_13466, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %240 = cast(%var_13467, dtype="uint16") /* ty=uint16 */;
  %241 = cast(meta[relay.Constant][20] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %242 = reshape(%239, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %243 = reshape(%240, newshape=[]) /* ty=uint16 */;
  %244 = reshape(%241, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %245 = @func_727(%242, %243, %244) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %246 = cast(%var_13466, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %247 = cast(%var_13467, dtype="uint16") /* ty=uint16 */;
  %248 = %245.3;
  %249 = cast(%248, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %250 = reshape(%246, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %251 = reshape(%247, newshape=[]) /* ty=uint16 */;
  %252 = reshape(%249, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %253 = @func_727(%250, %251, %252) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %254 = cast(meta[relay.Constant][21] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %255 = cast(meta[relay.Constant][21] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %256 = cast(%var_13498, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %257 = reshape(%254, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %258 = reshape(%255, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %259 = reshape(%256, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint64] */;
  %260 = @func_1990(%257, %258, %259) /* ty=(Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) */;
  %261 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 910), float32] */, dtype="float32") /* ty=Tensor[(1, 910), float32] */;
  %262 = reshape(%261, newshape=[910]) /* ty=Tensor[(910), float32] */;
  %263 = @func_10323(%262) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) */;
  %264 = %263.1;
  %265 = cast(%264, dtype="uint64") /* ty=Tensor[(7, 13, 10), uint64] */;
  %266 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(1, 910), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %267 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 910), float32] */, dtype="uint64") /* ty=Tensor[(1, 910), uint64] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %269 = @func_11617() /* ty=Tensor[(2, 6, 3), float32] */;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %271 = log2(%270) /* ty=Tensor[(2, 6, 3), float32] */;
  %272 = cast(%var_13517, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %276 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  %277 = @func_12545() /* ty=Tensor[(2, 6, 3), float64] */;
  %278 = %253.0;
  %279 = %260.1;
  %280 = left_shift(%267, %268) /* ty=Tensor[(?, 910), uint64] */;
  %281 = logical_and(%274, %275) /* ty=Tensor[(2, 6, 3), bool] */;
  (%276, %248, %var_13466, %var_13467, meta[relay.Constant][20] /* ty=Tensor[(675), uint16] */, %277, %278, %279, meta[relay.Constant][21] /* ty=Tensor[(1560), float32] */, %var_13498, %280, %281)
}

def @func_1428(%var_1397: Tensor[(10, 8, 7), uint64], %var_1417: Tensor[(1568), int8]) -> (Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) {
  %282 = cast(%var_1397, dtype="uint64") /* ty=Tensor[(10, 8, 7), uint64] */;
  %283 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(10, 8, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %284 = cast(meta[relay.Constant][23] /* ty=Tensor[(10, 8, 7), uint64] */, dtype="uint64") /* ty=Tensor[(10, 8, 7), uint64] */;
  %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %286 = cast(%var_1417, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %287 = cast(%var_1417, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %288 = cast(%var_1417, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %289 = reshape(%286, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %290 = reshape(%287, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %291 = reshape(%288, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %292 = @func_500(%289, %290, %291) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %293 = maximum(%284, %285) /* ty=Tensor[(10, 8, 7), uint64] */;
  %294 = %292.2;
  (%293, %294, %var_1417)
}

def @func_3399(%var_3382: Tensor[(14, 6, 8), float64], %var_3389: Tensor[(14, 6, 8), float64]) -> (Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) {
  %295 = cast(%var_3382, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %296 = cast(%var_3389, dtype="uint16") /* ty=Tensor[(14, 6, 8), uint16] */;
  %297 = shape_of(%var_3382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_3382, dtype="uint16") /* ty=Tensor[(14, 6, 8), uint16] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %300 = sigmoid(%295) /* ty=Tensor[(14, 6, 8), float64] */;
  %301 = right_shift(%298, %299) /* ty=Tensor[(14, 6, 8), uint16] */;
  (%300, %301)
}

def @func_12828() -> Tensor[(2, 6, 3), float32] {
  %302 = @func_10240() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %302.0
}

def @func_13410(%var_13357: Tensor[(1287), float32], %var_13362: Tensor[(1287), float32], %var_13404: Tensor[(18), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(2, 6, 3), float32], Tensor[(1287), int8], Tensor[(1568), int8], Tensor[(560), uint64], Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(1, 9, 2), float32], Tensor[(18), float32]) {
  %303 = @func_11960() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %304 = %303.0;
  %305 = cast(%304, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %306 = cast(%var_13357, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %307 = reshape(%306, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %308 = @func_9669(%307) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) */;
  %309 = cast(%var_13362, dtype="int8") /* ty=Tensor[(1287), int8] */;
  %310 = shape_of(%var_13357, dtype="int32") /* ty=Tensor[(1), int32] */;
  %311 = cast(%var_13357, dtype="int8") /* ty=Tensor[(1287), int8] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?), int8] */;
  %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %314 = reshape(%313, newshape=[2, 280]) /* ty=Tensor[(2, 280), uint64] */;
  %315 = @func_11106(%314) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(10, 8, 7), uint64], Tensor[(2, 280), uint64], Tensor[(1568), int8], Tensor[(15, 3, 15), bool], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(7, 16, 5), float32], Tensor[(3, 16, 2), int32]) */;
  %316 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %317 = cast(meta[relay.Constant][26] /* ty=Tensor[(224), int8] */, dtype="int8") /* ty=Tensor[(224), int8] */;
  %318 = reshape(%316, newshape=[]) /* ty=int8 */;
  %319 = reshape(%317, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), int8] */;
  %320 = cast(%var_13404, dtype="float32") /* ty=Tensor[(18), float32] */;
  %321 = reshape(%320, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %322 = asinh(%305) /* ty=Tensor[(2, 6, 3), float32] */;
  %323 = %308.0;
  %324 = logical_xor(%311, %312) /* ty=Tensor[(1287), int8] */;
  %325 = %315.3;
  %326 = @func_6118(%318, %319) /* ty=Tensor[(2, 16, 7), int8] */;
  %327 = @func_1801(%321) /* ty=Tensor[(1, 9, 2), float32] */;
  (%322, %323, %324, %325, meta[relay.Constant][24] /* ty=Tensor[(560), uint64] */, %326, meta[relay.Constant][25] /* ty=int8 */, meta[relay.Constant][26] /* ty=Tensor[(224), int8] */, %327, %var_13404)
}

def @func_1260(%var_1257: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), float32] {
  %328 = cast(%var_1257, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  erf(%328) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_11435(%var_11395: Tensor[(550), float64]) -> (Tensor[(550), bool],) {
  %329 = cast(%var_11395, dtype="float32") /* ty=Tensor[(550), float32] */;
  %330 = sin(%329) /* ty=Tensor[(550), float32] */;
  %331 = @func_10262() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) */;
  %332 = %331.2;
  %333 = cast(%var_11395, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(1), int32] */;
  %335 = cast(%332, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %337 = add(%335, %336) /* ty=Tensor[(550), uint32] */;
  %338 = cast(%337, dtype="bool") /* ty=Tensor[(550), bool] */;
  %339 = shape_of(%330, dtype="int32") /* ty=Tensor[(1), int32] */;
  %340 = cast(%330, dtype="bool") /* ty=Tensor[(550), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?), bool] */;
  %342 = greater(%340, %341) /* ty=Tensor[(550), bool] */;
  (%342,)
}

def @func_9853() -> Tensor[(2, 6, 3), float32] {
  %343 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %343.0
}

def @func_9669(%var_9646: Tensor[(1287), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) {
  %344 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %345 = cast(%var_9646, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %346 = cast(%var_9646, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %347 = reshape(%345, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %348 = reshape(%346, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %349 = @func_2146(%347, %348) /* ty=Tensor[(9, 11, 13), float64] */;
  %350 = cast(%349, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  %351 = %344.0;
  %352 = sigmoid(%350) /* ty=Tensor[(9, 11, 13), float64] */;
  (%351, %var_9646, %352)
}

def @func_10262() -> (Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) {
  %353 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %354 = cast(meta[relay.Constant][27] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %355 = reshape(%354, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), uint32] */;
  %356 = @func_9469(%355) /* ty=(Tensor[(11, 10, 5), uint32],) */;
  %357 = cast(meta[relay.Constant][27] /* ty=Tensor[(550), uint32] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %358 = %353.0;
  %359 = %356.0;
  %360 = atanh(%357) /* ty=Tensor[(550), float64] */;
  (%358, %359, %360)
}

def @func_4295(%var_4267: Tensor[(672), float64], %var_4289: Tensor[(275), float32]) -> (Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
  %361 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 14), float32] */;
  %362 = exp(%361) /* ty=Tensor[(4, 4, 14), float32] */;
  %363 = cast(%362, dtype="float32") /* ty=Tensor[(4, 4, 14), float32] */;
  %364 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(4, 4, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 14), float32] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %367 = cast(%var_4267, dtype="float64") /* ty=Tensor[(672), float64] */;
  %368 = cast(%var_4267, dtype="float64") /* ty=Tensor[(672), float64] */;
  %369 = reshape(%367, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %370 = reshape(%368, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %371 = @func_3399(%369, %370) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */;
  %372 = cast(meta[relay.Constant][29] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %373 = cast(meta[relay.Constant][29] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %374 = reshape(%372, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %375 = reshape(%373, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %376 = cast(%var_4289, dtype="float32") /* ty=Tensor[(275), float32] */;
  %377 = reshape(%376, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
  %378 = divide(%365, %366) /* ty=Tensor[(4, 4, 14), float32] */;
  %379 = %371.0;
  %380 = @func_2146(%374, %375) /* ty=Tensor[(9, 11, 13), float64] */;
  %381 = @func_1260(%377) /* ty=Tensor[(11, 5, 5), float32] */;
  (%378, %379, %var_4267, %380, meta[relay.Constant][29] /* ty=Tensor[(1287), float32] */, %381, %var_4289)
}

def @func_10567(%var_10545: Tensor[(96), int32]) -> (Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(1287), float64]) {
  %382 = cast(%var_10545, dtype="int32") /* ty=Tensor[(96), int32] */;
  %383 = cast(%var_10545, dtype="int32") /* ty=Tensor[(96), int32] */;
  %384 = reshape(%382, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %385 = reshape(%383, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %386 = @func_1530(%384, %385) /* ty=(Tensor[(3, 16, 2), int32],) */;
  %387 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
  %388 = %387.3;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(1287), float64] */;
  %390 = %386.0;
  %391 = asin(%389) /* ty=Tensor[(1287), float64] */;
  (%390, %var_10545, %391)
}

def @func_12883() -> (Tensor[(2, 6, 3), float32],) {
  %392 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %393 = %392.0;
  (%393,)
}

def @func_10168(%var_10144: int8, %var_10145: Tensor[(224), int8], %var_10149: Tensor[(14, 6, 8), uint16], %var_10157: Tensor[(560), uint64], %var_10158: Tensor[(1568), int8]) -> (Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(14, 6, 8), float64], Tensor[(15, 3, 15), bool], Tensor[(560), uint64], Tensor[(1568), int8]) {
  %394 = cast(%var_10144, dtype="int8") /* ty=int8 */;
  %395 = cast(%var_10145, dtype="int8") /* ty=Tensor[(224), int8] */;
  %396 = reshape(%394, newshape=[]) /* ty=int8 */;
  %397 = reshape(%395, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), int8] */;
  %398 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
  %399 = %398.1;
  %400 = cast(%var_10149, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%399, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %404 = cast(%var_10157, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %405 = cast(%var_10158, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %406 = reshape(%404, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
  %407 = reshape(%405, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %408 = @func_1428(%406, %407) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
  %409 = @func_6118(%396, %397) /* ty=Tensor[(2, 16, 7), int8] */;
  %410 = floor_divide(%402, %403) /* ty=Tensor[(14, 6, 8), float64] */;
  %411 = %408.1;
  (%409, %var_10144, %var_10145, %410, %411, %var_10157, %var_10158)
}

def @func_7581(%var_7575: Tensor[(13, 6, 3), float32]) -> (Tensor[(13, 6, 3), float32],) {
  %412 = cast(%var_7575, dtype="float32") /* ty=Tensor[(13, 6, 3), float32] */;
  %413 = exp(%412) /* ty=Tensor[(13, 6, 3), float32] */;
  (%413,)
}

def @func_10729() -> (Tensor[(2, 6, 3), float32],) {
  %414 = @func_10065() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %415 = %414.0;
  (%415,)
}

def @func_9778(%var_9767: Tensor[(90), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(13, 6, 10), uint16], Tensor[(1, 780), uint16]) {
  %416 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %417 = cast(meta[relay.Constant][30] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %418 = reshape(%417, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
  %419 = cast(meta[relay.Constant][30] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %420 = cast(meta[relay.Constant][31] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %421 = reshape(%420, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
  %422 = cast(%var_9767, dtype="float64") /* ty=Tensor[(90), float64] */;
  %423 = reshape(%422, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
  %424 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 780), uint16] */, dtype="uint16") /* ty=Tensor[(1, 780), uint16] */;
  %425 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 780), uint16] */, dtype="uint16") /* ty=Tensor[(1, 780), uint16] */;
  %426 = reshape(%424, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), uint16] */;
  %427 = reshape(%425, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), uint16] */;
  %428 = @func_8329(%426, %427) /* ty=(Tensor[(13, 6, 10), uint16], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(18), float64], Tensor[(1, 9, 2), float32]) */;
  %429 = %416.0;
  %430 = @func_1260(%418) /* ty=Tensor[(11, 5, 5), float32] */;
  %431 = cosh(%419) /* ty=Tensor[(275), float32] */;
  %432 = @func_5561(%421) /* ty=Tensor[(7, 13, 10), float32] */;
  %433 = @func_2853(%423) /* ty=Tensor[(5, 9, 2), float64] */;
  %434 = %428.0;
  (%429, %430, %431, %432, meta[relay.Constant][31] /* ty=Tensor[(910), float32] */, %433, %var_9767, %434, meta[relay.Constant][32] /* ty=Tensor[(1, 780), uint16] */)
}

def @func_10124(%var_10104: Tensor[(1950), int64], %var_10106: uint16) -> (Tensor[(2, 6, 3), float32], Tensor[(15, 3, 15), bool], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(1950), int64], Tensor[(672), int8], uint16) {
  %435 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %436 = cast(meta[relay.Constant][33] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %437 = cast(meta[relay.Constant][34] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %438 = reshape(%436, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %439 = reshape(%437, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %440 = @func_603(%438, %439) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %441 = cast(%var_10104, dtype="int64") /* ty=Tensor[(1950), int64] */;
  %442 = cast(%var_10104, dtype="int64") /* ty=Tensor[(1950), int64] */;
  %443 = cast(meta[relay.Constant][35] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
  %444 = cast(%var_10106, dtype="uint16") /* ty=uint16 */;
  %445 = cast(meta[relay.Constant][33] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %446 = reshape(%441, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
  %447 = reshape(%442, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
  %448 = reshape(%443, newshape=[1, 672]) /* ty=Tensor[(1, 672), int8] */;
  %449 = reshape(%444, newshape=[]) /* ty=uint16 */;
  %450 = reshape(%445, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %451 = @func_1180(%446, %447, %448, %449, %450) /* ty=(Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) */;
  %452 = %435.0;
  %453 = %440.8;
  %454 = %451.5;
  (%452, %453, meta[relay.Constant][33] /* ty=Tensor[(6), float64] */, meta[relay.Constant][34] /* ty=Tensor[(675), uint16] */, %454, %var_10104, meta[relay.Constant][35] /* ty=Tensor[(672), int8] */, %var_10106)
}

def @func_11631() -> Tensor[(2, 6, 3), float32] {
  %455 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %455.0
}

def @func_7153(%var_7133: Tensor[(11, 7, 10), uint8]) -> Tensor[(11, 7, 10), bool] {
  %456 = cast(%var_7133, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
  %457 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(11, 7, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(meta[relay.Constant][36] /* ty=Tensor[(11, 7, 10), uint8] */, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%458, %459) /* ty=Tensor[(11, 7, 10), bool] */
}

def @func_9953() -> (Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) {
  %460 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %461 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %462 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %463 = reshape(%461, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %464 = reshape(%462, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %465 = @func_3399(%463, %464) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */;
  %466 = %465.1;
  %467 = cast(%466, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %468 = cast(meta[relay.Constant][38] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %469 = reshape(%467, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %470 = reshape(%468, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %471 = @func_4295(%469, %470) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %472 = %460.0;
  %473 = %471.4;
  (%472, %466, meta[relay.Constant][37] /* ty=Tensor[(672), float64] */, %473, meta[relay.Constant][38] /* ty=Tensor[(275), float32] */)
}

def @func_10843() -> (Tensor[(2, 6, 3), float32],) {
  %474 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  (%474,)
}

def @func_2354(%var_2347: Tensor[(7, 16, 5), float32]) -> Tensor[(7, 16, 5), float32] {
  %475 = cast(%var_2347, dtype="float32") /* ty=Tensor[(7, 16, 5), float32] */;
  atanh(%475) /* ty=Tensor[(7, 16, 5), float32] */
}

def @func_10298() -> Tensor[(2, 6, 3), float32] {
  %476 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %476.0
}

def @func_9469(%var_9459: Tensor[(11, 10, 5), uint32]) -> (Tensor[(11, 10, 5), uint32],) {
  %477 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 10, 5), uint32] */, dtype="uint32") /* ty=Tensor[(11, 10, 5), uint32] */;
  %478 = shape_of(%var_9459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %479 = cast(%var_9459, dtype="uint32") /* ty=Tensor[(11, 10, 5), uint32] */;
  %480 = dyn.reshape(%477, %478, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %481 = bitwise_xor(%479, %480) /* ty=Tensor[(11, 10, 5), uint32] */;
  (%481,)
}

def @func_12923(%var_12912: uint64, %var_12913: Tensor[(1, 16, 5), uint64]) -> (Tensor[(1, 16, 5), uint64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
  %482 = cast(%var_12912, dtype="uint64") /* ty=uint64 */;
  %483 = cast(%var_12913, dtype="uint64") /* ty=Tensor[(1, 16, 5), uint64] */;
  %484 = cast(meta[relay.Constant][40] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
  %485 = reshape(%484, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
  %486 = bitwise_xor(%482, %483) /* ty=Tensor[(1, 16, 5), uint64] */;
  %487 = @func_5561(%485) /* ty=Tensor[(7, 13, 10), float32] */;
  (%486, %487, meta[relay.Constant][40] /* ty=Tensor[(910), float32] */)
}

def @func_603(%var_519: Tensor[(1, 6, 1), float64], %var_569: Tensor[(225, 3), uint16]) -> (Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) {
  %488 = cast(%var_519, dtype="float64") /* ty=Tensor[(1, 6, 1), float64] */;
  %489 = log10(%488) /* ty=Tensor[(1, 6, 1), float64] */;
  %490 = cast(%489, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %491 = shape_of(%var_519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_519, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %494 = bitwise_xor(%492, %493) /* ty=Tensor[(?, 6, ?), int64] */;
  %495 = cast(%var_519, dtype="uint32") /* ty=Tensor[(1, 6, 1), uint32] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="uint32") /* ty=Tensor[(?, 6, ?), uint32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %499 = add(%497, %498) /* ty=Tensor[(?, 6, ?), uint32] */;
  %500 = cast(%499, dtype="int8") /* ty=Tensor[(?, 6, ?), int8] */;
  %501 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%494, dtype="int8") /* ty=Tensor[(?, 6, ?), int8] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %504 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %505 = cast(%var_569, dtype="uint16") /* ty=Tensor[(225, 3), uint16] */;
  %506 = reshape(%504, newshape=[]) /* ty=uint16 */;
  %507 = reshape(%505, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %508 = @func_440(%506, %507) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %509 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %510 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %511 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %512 = reshape(%509, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %513 = reshape(%510, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %514 = reshape(%511, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %515 = @func_500(%512, %513, %514) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %516 = cast(%489, dtype="float64") /* ty=Tensor[(1, 6, 1), float64] */;
  %517 = shape_of(%var_519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%var_519, dtype="float64") /* ty=Tensor[(1, 6, 1), float64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %520 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %521 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %522 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %523 = reshape(%520, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %524 = reshape(%521, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %525 = reshape(%522, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %526 = @func_500(%523, %524, %525) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %527 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %528 = %508.0;
  %529 = cast(%528, dtype="uint16") /* ty=Tensor[(15, 3, 15), uint16] */;
  %530 = reshape(%527, newshape=[]) /* ty=uint16 */;
  %531 = reshape(%529, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %532 = @func_440(%530, %531) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %533 = subtract(%502, %503) /* ty=Tensor[(?, 6, ?), int8] */;
  %534 = %515.3;
  %535 = mod(%518, %519) /* ty=Tensor[(?, 6, ?), float64] */;
  %536 = %526.0;
  %537 = %532.0;
  (%533, %528, meta[relay.Constant][41] /* ty=uint16 */, %var_569, %534, meta[relay.Constant][42] /* ty=Tensor[(1, 1568), int8] */, %535, %536, %537)
}

def @func_813(%var_792: Tensor[(6, 14, 8), int8], %var_793: Tensor[(6, 14, 8), int8], %var_800: uint16, %var_801: Tensor[(675), uint16]) -> (Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) {
  %538 = cast(%var_793, dtype="int8") /* ty=Tensor[(6, 14, 8), int8] */;
  %539 = shape_of(%var_792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %540 = cast(%var_792, dtype="int8") /* ty=Tensor[(6, 14, 8), int8] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %542 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 156), uint32] */, dtype="uint32") /* ty=Tensor[(12, 156), uint32] */;
  %543 = cast(%var_800, dtype="uint16") /* ty=uint16 */;
  %544 = cast(%var_801, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %545 = reshape(%542, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %546 = reshape(%543, newshape=[]) /* ty=uint16 */;
  %547 = reshape(%544, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %548 = @func_727(%545, %546, %547) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %549 = multiply(%540, %541) /* ty=Tensor[(6, 14, 8), int8] */;
  %550 = %548.3;
  (%549, %550, meta[relay.Constant][43] /* ty=Tensor[(12, 156), uint32] */, %var_800, %var_801)
}

def @func_1354(%var_1349: Tensor[(15, 15, 7), float64]) -> Tensor[(15, 15, 7), float64] {
  %551 = cast(%var_1349, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
  asinh(%551) /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_6244(%var_6234: Tensor[(3, 14, 12), float32]) -> Tensor[(3, 14, 12), float32] {
  %552 = cast(%var_6234, dtype="float32") /* ty=Tensor[(3, 14, 12), float32] */;
  acosh(%552) /* ty=Tensor[(3, 14, 12), float32] */
}

def @func_10938(%var_10899: Tensor[(1950), int64], %var_10902: Tensor[(1, 275), float32], %var_10903: Tensor[(18), float32], %var_10920: Tensor[(720, 1), float64], %var_10921: Tensor[(6), float64], %var_10922: Tensor[(1, 54), bool]) -> (Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), float32], Tensor[(1950), int64], Tensor[(672, 1), int8], Tensor[(1350), int64], Tensor[(18), float32], Tensor[(1, 275), float64], Tensor[(6), float64], Tensor[(720, 1), float64], Tensor[(6), float64], Tensor[(1, 54), bool]) {
  %553 = @func_10065() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %554 = cast(%var_10899, dtype="int64") /* ty=Tensor[(1950), int64] */;
  %555 = cast(meta[relay.Constant][44] /* ty=Tensor[(672, 1), int8] */, dtype="int8") /* ty=Tensor[(672, 1), int8] */;
  %556 = cast(meta[relay.Constant][45] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %557 = cast(%var_10902, dtype="float32") /* ty=Tensor[(1, 275), float32] */;
  %558 = cast(%var_10899, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %559 = cast(%var_10903, dtype="float32") /* ty=Tensor[(18), float32] */;
  %560 = cast(%var_10899, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %561 = reshape(%554, newshape=[1950]) /* ty=Tensor[(1950), int64] */;
  %562 = reshape(%555, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %563 = reshape(%556, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %564 = reshape(%557, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %565 = reshape(%558, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %566 = reshape(%559, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %567 = reshape(%560, newshape=[1950]) /* ty=Tensor[(1950), float64] */;
  %568 = @func_10038(%561, %562, %563, %564, %565, %566, %567) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(13, 15, 10), bool], Tensor[(672), int8], uint16, Tensor[(6), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(45, 2), float64], Tensor[(675), uint16], Tensor[(1, 975), float32], Tensor[(15, 6, 15), int64], Tensor[(1287), float32], Tensor[(275), float32], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(1950), uint16], Tensor[(1950), float32]) */;
  %569 = cast(%var_10902, dtype="float64") /* ty=Tensor[(1, 275), float64] */;
  %570 = cast(%var_10920, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %571 = cast(%var_10920, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %572 = cast(%var_10921, dtype="float64") /* ty=Tensor[(6), float64] */;
  %573 = cast(%var_10922, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %574 = cast(%var_10902, dtype="float32") /* ty=Tensor[(1, 275), float32] */;
  %575 = reshape(%570, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %576 = reshape(%571, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %577 = reshape(%572, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %578 = reshape(%573, newshape=[54]) /* ty=Tensor[(54), bool] */;
  %579 = reshape(%574, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %580 = @func_2326(%575, %576, %577, %578, %579) /* ty=(Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %581 = %553.0;
  %582 = %568.5;
  %583 = asin(%569) /* ty=Tensor[(1, 275), float64] */;
  %584 = %580.2;
  (%581, %582, %var_10899, meta[relay.Constant][44] /* ty=Tensor[(672, 1), int8] */, meta[relay.Constant][45] /* ty=Tensor[(1350), int64] */, %var_10903, %583, %584, %var_10920, %var_10921, %var_10922)
}

def @func_1801(%var_1798: Tensor[(1, 9, 2), float32]) -> Tensor[(1, 9, 2), float32] {
  %585 = cast(%var_1798, dtype="float32") /* ty=Tensor[(1, 9, 2), float32] */;
  cosh(%585) /* ty=Tensor[(1, 9, 2), float32] */
}

def @func_10657() -> (Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) {
  %586 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 96), int32] */, dtype="int32") /* ty=Tensor[(1, 96), int32] */;
  %587 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 96), int32] */, dtype="int32") /* ty=Tensor[(1, 96), int32] */;
  %588 = reshape(%586, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %589 = reshape(%587, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %590 = @func_1530(%588, %589) /* ty=(Tensor[(3, 16, 2), int32],) */;
  %591 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  %592 = %590.0;
  (%591, %592, meta[relay.Constant][46] /* ty=Tensor[(1, 96), int32] */)
}

def @func_9604(%var_9578: Tensor[(6), float64], %var_9585: Tensor[(675), uint16]) -> (uint16, Tensor[(975), float32], Tensor[(6), float64], Tensor[(2, 6, 3), float32], Tensor[(14, 16, 7), int8], Tensor[(675), uint16], Tensor[(12, 13, 10), float64], Tensor[(1560), float32], Tensor[(560), uint64]) {
  %593 = cast(meta[relay.Constant][47] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %594 = cast(%var_9578, dtype="float64") /* ty=Tensor[(6), float64] */;
  %595 = reshape(%593, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %596 = reshape(%594, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %597 = @func_4948(%595, %596) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %598 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %601 = cast(%var_9578, dtype="float64") /* ty=Tensor[(6), float64] */;
  %602 = cast(%var_9585, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %603 = reshape(%601, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %604 = reshape(%602, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %605 = @func_603(%603, %604) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %606 = cast(meta[relay.Constant][48] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %607 = cast(meta[relay.Constant][48] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %608 = cast(meta[relay.Constant][49] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %609 = reshape(%606, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %610 = reshape(%607, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %611 = reshape(%608, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint64] */;
  %612 = @func_1990(%609, %610, %611) /* ty=(Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) */;
  %613 = %597.1;
  %614 = log(%600) /* ty=Tensor[(2, 6, 3), float32] */;
  %615 = %605.7;
  %616 = %612.0;
  (%613, meta[relay.Constant][47] /* ty=Tensor[(975), float32] */, %var_9578, %614, %615, %var_9585, %616, meta[relay.Constant][48] /* ty=Tensor[(1560), float32] */, meta[relay.Constant][49] /* ty=Tensor[(560), uint64] */)
}

def @func_9553() -> (Tensor[(2, 6, 3), float32],) {
  %617 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %618 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(2, 6, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(meta[relay.Constant][50] /* ty=Tensor[(2, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %621 = floor_mod(%619, %620) /* ty=Tensor[(2, 6, 3), float32] */;
  %622 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %626 = power(%624, %625) /* ty=Tensor[(2, 6, 3), float32] */;
  (%626,)
}

def @func_11655() -> (Tensor[(2, 6, 3), float32],) {
  %627 = @func_11617() /* ty=Tensor[(2, 6, 3), float32] */;
  %628 = cast(%627, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %629 = log10(%628) /* ty=Tensor[(2, 6, 3), float32] */;
  (%629,)
}

def @func_8329(%var_8274: Tensor[(13, 6, 10), uint16], %var_8275: Tensor[(13, 6, 10), uint16]) -> (Tensor[(13, 6, 10), uint16], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(18), float64], Tensor[(1, 9, 2), float32]) {
  %630 = cast(%var_8275, dtype="uint16") /* ty=Tensor[(13, 6, 10), uint16] */;
  %631 = shape_of(%var_8274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %632 = cast(%var_8274, dtype="uint16") /* ty=Tensor[(13, 6, 10), uint16] */;
  %633 = dyn.reshape(%630, %631, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %634 = cast(meta[relay.Constant][52] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %635 = reshape(%634, newshape=[3, 14, 12]) /* ty=Tensor[(3, 14, 12), float32] */;
  %636 = cast(meta[relay.Constant][53] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %637 = cast(meta[relay.Constant][53] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %638 = reshape(%636, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %639 = reshape(%637, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %640 = @func_7547(%638, %639) /* ty=(Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64]) */;
  %641 = cast(meta[relay.Constant][54] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %642 = reshape(%641, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %643 = @func_1801(%642) /* ty=Tensor[(1, 9, 2), float32] */;
  %644 = cast(%643, dtype="float64") /* ty=Tensor[(1, 9, 2), float64] */;
  %645 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(18), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %646 = cast(meta[relay.Constant][54] /* ty=Tensor[(18), float32] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), float64] */;
  %648 = cast(meta[relay.Constant][54] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %649 = reshape(%648, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %650 = right_shift(%632, %633) /* ty=Tensor[(13, 6, 10), uint16] */;
  %651 = @func_6244(%635) /* ty=Tensor[(3, 14, 12), float32] */;
  %652 = %640.0;
  %653 = power(%646, %647) /* ty=Tensor[(18), float64] */;
  %654 = @func_1801(%649) /* ty=Tensor[(1, 9, 2), float32] */;
  (%650, %651, meta[relay.Constant][52] /* ty=Tensor[(504), float32] */, %652, meta[relay.Constant][53] /* ty=Tensor[(2160), float64] */, %653, %654)
}

def @func_11720(%var_11707: Tensor[(16, 6), int32]) -> (Tensor[(3, 16, 2), int32], Tensor[(16, 6), int32], Tensor[(2, 6, 3), float32]) {
  %655 = cast(%var_11707, dtype="int32") /* ty=Tensor[(16, 6), int32] */;
  %656 = reshape(%655, newshape=[96]) /* ty=Tensor[(96), int32] */;
  %657 = @func_10567(%656) /* ty=(Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(1287), float64]) */;
  %658 = @func_11655() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %661 = %657.0;
  %662 = erf(%660) /* ty=Tensor[(2, 6, 3), float32] */;
  (%661, %var_11707, %662)
}

def @func_12545() -> Tensor[(2, 6, 3), float64] {
  %663 = @func_12240() /* ty=(Tensor[(2, 6, 3), float64],) */;
  %663.0
}

def @func_4948(%var_4928: Tensor[(15, 13, 5), float32], %var_4933: Tensor[(6), float64]) -> (Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) {
  %664 = cast(%var_4928, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
  %665 = cast(%var_4933, dtype="float64") /* ty=Tensor[(6), float64] */;
  %666 = cast(meta[relay.Constant][55] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %667 = reshape(%665, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %668 = reshape(%666, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %669 = @func_603(%667, %668) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %670 = atanh(%664) /* ty=Tensor[(15, 13, 5), float32] */;
  %671 = %669.4;
  (%670, %671, %var_4933, meta[relay.Constant][55] /* ty=Tensor[(675), uint16] */)
}

def @func_11777() -> Tensor[(2, 6, 3), float32] {
  %672 = @func_10843() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %672.0
}

def @func_6027(%var_6004: float32, %var_6005: Tensor[(11, 16, 7), float32], %var_6014: Tensor[(6), float64], %var_6020: Tensor[(11, 117), float32]) -> (Tensor[(11, 16, 7), float32], Tensor[(6), float64], Tensor[(975), float32], Tensor[(6), float64], Tensor[(9, 11, 13), float64], Tensor[(11, 117), float32], Tensor[(11, 16, 7), float32]) {
  %673 = cast(%var_6004, dtype="float32") /* ty=float32 */;
  %674 = cast(%var_6005, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %675 = cast(meta[relay.Constant][56] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %676 = cast(%var_6014, dtype="float64") /* ty=Tensor[(6), float64] */;
  %677 = reshape(%675, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %678 = reshape(%676, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %679 = @func_4948(%677, %678) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %680 = cast(%var_6020, dtype="float32") /* ty=Tensor[(11, 117), float32] */;
  %681 = cast(%var_6020, dtype="float32") /* ty=Tensor[(11, 117), float32] */;
  %682 = reshape(%680, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %683 = reshape(%681, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %684 = cast(%var_6005, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %685 = floor_divide(%673, %674) /* ty=Tensor[(11, 16, 7), float32] */;
  %686 = %679.2;
  %687 = @func_2146(%682, %683) /* ty=Tensor[(9, 11, 13), float64] */;
  %688 = atan(%684) /* ty=Tensor[(11, 16, 7), float32] */;
  (%685, %686, meta[relay.Constant][56] /* ty=Tensor[(975), float32] */, %var_6014, %687, %var_6020, %688)
}

def @func_12141(%var_12066: Tensor[(16, 7, 16), uint32], %var_12067: Tensor[(16, 7, 16), uint32]) -> (Tensor[(16, 7, 16), uint32], Tensor[(2, 6, 3), float32], Tensor[(16, 7, 16), float32]) {
  %689 = cast(meta[relay.Constant][57] /* ty=Tensor[(16, 7, 16), uint32] */, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %690 = shape_of(%var_12066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_12066, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %693 = logical_or(%691, %692) /* ty=Tensor[(16, 7, 16), bool] */;
  %694 = cast(%var_12067, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %695 = shape_of(%var_12066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%var_12066, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %698 = not_equal(%696, %697) /* ty=Tensor[(16, 7, 16), bool] */;
  %699 = cast(%698, dtype="uint32") /* ty=Tensor[(16, 7, 16), uint32] */;
  %700 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%693, dtype="uint32") /* ty=Tensor[(16, 7, 16), uint32] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %703 = cast(meta[relay.Constant][57] /* ty=Tensor[(16, 7, 16), uint32] */, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %704 = asin(%703) /* ty=Tensor[(16, 7, 16), float64] */;
  %705 = cast(%704, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %706 = tan(%705) /* ty=Tensor[(16, 7, 16), float64] */;
  %707 = cast(%706, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
  %708 = shape_of(%704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %709 = cast(%704, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %711 = maximum(%701, %702) /* ty=Tensor[(16, 7, 16), uint32] */;
  %712 = @func_11617() /* ty=Tensor[(2, 6, 3), float32] */;
  %713 = mod(%709, %710) /* ty=Tensor[(16, 7, 16), float32] */;
  (%711, %712, %713)
}

def @func_11561(%var_11519: Tensor[(672), int8], %var_11520: uint16, %var_11557: Tensor[(910), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(6, 14, 8), int8], Tensor[(672), int8], uint16, Tensor[(675), uint16], Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), int64], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
  %714 = @func_10657() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */;
  %715 = cast(%var_11519, dtype="int8") /* ty=Tensor[(672), int8] */;
  %716 = cast(%var_11519, dtype="int8") /* ty=Tensor[(672), int8] */;
  %717 = cast(%var_11520, dtype="uint16") /* ty=uint16 */;
  %718 = cast(meta[relay.Constant][58] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %719 = reshape(%715, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
  %720 = reshape(%716, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
  %721 = reshape(%717, newshape=[]) /* ty=uint16 */;
  %722 = reshape(%718, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %723 = @func_813(%719, %720, %721, %722) /* ty=(Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) */;
  %724 = cast(%var_11520, dtype="int64") /* ty=int64 */;
  %725 = cast(meta[relay.Constant][59] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %726 = reshape(%724, newshape=[]) /* ty=int64 */;
  %727 = reshape(%725, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %728 = @func_5509(%726, %727) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */;
  %729 = cast(meta[relay.Constant][60] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %730 = reshape(%729, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
  %731 = cast(%var_11557, dtype="float32") /* ty=Tensor[(910), float32] */;
  %732 = reshape(%731, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
  %733 = %714.0;
  %734 = %723.0;
  %735 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  %736 = %728.0;
  %737 = @func_2853(%730) /* ty=Tensor[(5, 9, 2), float64] */;
  %738 = @func_5561(%732) /* ty=Tensor[(7, 13, 10), float32] */;
  (%733, %734, %var_11519, %var_11520, meta[relay.Constant][58] /* ty=Tensor[(675), uint16] */, %735, %736, meta[relay.Constant][59] /* ty=Tensor[(1350), int64] */, %737, meta[relay.Constant][60] /* ty=Tensor[(90), float64] */, %738, %var_11557)
}

def @func_11887() -> Tensor[(2, 6, 3), float32] {
  @func_11584() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_440(%var_433: uint16, %var_434: Tensor[(15, 3, 15), uint16]) -> (Tensor[(15, 3, 15), bool],) {
  %739 = cast(%var_433, dtype="bool") /* ty=bool */;
  %740 = cast(%var_434, dtype="bool") /* ty=Tensor[(15, 3, 15), bool] */;
  %741 = less_equal(%739, %740) /* ty=Tensor[(15, 3, 15), bool] */;
  (%741,)
}

def @func_2326(%var_2252: Tensor[(4, 12, 15), float64], %var_2275: Tensor[(4, 12, 15), float64], %var_2282: Tensor[(6), float64], %var_2314: Tensor[(54), bool], %var_2322: Tensor[(275), float32]) -> (Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
  %742 = cast(%var_2275, dtype="uint8") /* ty=Tensor[(4, 12, 15), uint8] */;
  %743 = shape_of(%var_2252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_2252, dtype="uint8") /* ty=Tensor[(4, 12, 15), uint8] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %746 = cast(%var_2282, dtype="float64") /* ty=Tensor[(6), float64] */;
  %747 = cast(meta[relay.Constant][61] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %748 = reshape(%746, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %749 = reshape(%747, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %750 = @func_603(%748, %749) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %751 = cast(meta[relay.Constant][62] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
  %752 = reshape(%751, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
  %753 = cast(%var_2252, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
  %754 = sinh(%753) /* ty=Tensor[(4, 12, 15), float64] */;
  %755 = cast(%754, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
  %756 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %757 = cast(%var_2314, dtype="bool") /* ty=Tensor[(54), bool] */;
  %758 = reshape(%756, newshape=[]) /* ty=bool */;
  %759 = reshape(%757, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), bool] */;
  %760 = cast(%var_2322, dtype="float32") /* ty=Tensor[(275), float32] */;
  %761 = reshape(%760, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
  %762 = bitwise_and(%744, %745) /* ty=Tensor[(4, 12, 15), uint8] */;
  %763 = %750.7;
  %764 = @func_1354(%752) /* ty=Tensor[(15, 15, 7), float64] */;
  %765 = sigmoid(%755) /* ty=Tensor[(4, 12, 15), float64] */;
  %766 = @func_2025(%758, %759) /* ty=Tensor[(3, 3, 6), bool] */;
  %767 = @func_1260(%761) /* ty=Tensor[(11, 5, 5), float32] */;
  (%762, %763, %var_2282, meta[relay.Constant][61] /* ty=Tensor[(675), uint16] */, %764, meta[relay.Constant][62] /* ty=Tensor[(1575), float64] */, %765, %766, True /* ty=bool */, %var_2314, %767, %var_2322)
}

def @func_12483(%var_12471: Tensor[(14, 5, 14), float32]) -> (Tensor[(14, 5, 14), float32],) {
  %768 = cast(%var_12471, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
  %769 = cosh(%768) /* ty=Tensor[(14, 5, 14), float32] */;
  (%769,)
}

def @func_500(%var_478: Tensor[(14, 16, 7), int8], %var_479: Tensor[(14, 16, 7), int8], %var_483: Tensor[(14, 16, 7), int8]) -> (Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) {
  %770 = cast(%var_479, dtype="int8") /* ty=Tensor[(14, 16, 7), int8] */;
  %771 = shape_of(%var_478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%var_478, dtype="int8") /* ty=Tensor[(14, 16, 7), int8] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %774 = cast(%var_483, dtype="int16") /* ty=Tensor[(14, 16, 7), int16] */;
  %775 = shape_of(%var_479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%var_479, dtype="int16") /* ty=Tensor[(14, 16, 7), int16] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %778 = cast(meta[relay.Constant][63] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %779 = cast(meta[relay.Constant][64] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %780 = reshape(%778, newshape=[]) /* ty=uint16 */;
  %781 = reshape(%779, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %782 = @func_440(%780, %781) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %783 = right_shift(%772, %773) /* ty=Tensor[(14, 16, 7), int8] */;
  %784 = bitwise_and(%776, %777) /* ty=Tensor[(14, 16, 7), int16] */;
  %785 = %782.0;
  (%783, %784, %785, meta[relay.Constant][63] /* ty=uint16 */, meta[relay.Constant][64] /* ty=Tensor[(675), uint16] */)
}

def @func_1530(%var_1513: Tensor[(3, 16, 2), int32], %var_1514: Tensor[(3, 16, 2), int32]) -> (Tensor[(3, 16, 2), int32],) {
  %786 = cast(%var_1514, dtype="int32") /* ty=Tensor[(3, 16, 2), int32] */;
  %787 = shape_of(%var_1513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_1513, dtype="int32") /* ty=Tensor[(3, 16, 2), int32] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %790 = bitwise_and(%788, %789) /* ty=Tensor[(3, 16, 2), int32] */;
  (%790,)
}

def @func_11584() -> Tensor[(2, 6, 3), float32] {
  %791 = @func_10240() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %791.0
}

def @func_12327() -> Tensor[(2, 6, 3), float64] {
  %792 = @func_11668() /* ty=Tensor[(2, 6, 3), float32] */;
  %793 = cast(%792, dtype="float64") /* ty=Tensor[(2, 6, 3), float64] */;
  asin(%793) /* ty=Tensor[(2, 6, 3), float64] */
}

def @func_12731(%var_12671: Tensor[(7, 2, 14), int16], %var_12703: Tensor[(504), float32]) -> (Tensor[(7, 2, 14), bool], Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(1568), int8], Tensor[(16, 12, 3), float64], Tensor[(576), float64]) {
  %794 = cast(%var_12671, dtype="bool") /* ty=Tensor[(7, 2, 14), bool] */;
  %795 = shape_of(meta[relay.Constant][65] /* ty=Tensor[(7, 2, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %796 = cast(meta[relay.Constant][65] /* ty=Tensor[(7, 2, 14), int16] */, dtype="bool") /* ty=Tensor[(7, 2, 14), bool] */;
  %797 = dyn.reshape(%794, %795, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %798 = cast(meta[relay.Constant][66] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %799 = cast(meta[relay.Constant][66] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %800 = reshape(%798, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %801 = reshape(%799, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %802 = @func_1530(%800, %801) /* ty=(Tensor[(3, 16, 2), int32],) */;
  %803 = cast(%var_12703, dtype="float32") /* ty=Tensor[(504), float32] */;
  %804 = cast(meta[relay.Constant][67] /* ty=Tensor[(1568), int8] */, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %805 = reshape(%803, newshape=[504]) /* ty=Tensor[(504), float32] */;
  %806 = reshape(%804, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), int8] */;
  %807 = @func_11027(%805, %806) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(275), float32], Tensor[(1, 1568), int8], Tensor[(275, 1), float32]) */;
  %808 = cast(meta[relay.Constant][68] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %809 = reshape(%808, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float64] */;
  %810 = @func_11196(%809) /* ty=(Tensor[(16, 12, 3), float64],) */;
  %811 = greater_equal(%796, %797) /* ty=Tensor[(7, 2, 14), bool] */;
  %812 = %802.0;
  %813 = %807.1;
  %814 = %810.0;
  (%811, %812, meta[relay.Constant][66] /* ty=Tensor[(96), int32] */, %813, %var_12703, meta[relay.Constant][67] /* ty=Tensor[(1568), int8] */, %814, meta[relay.Constant][68] /* ty=Tensor[(576), float64] */)
}

def @func_10038(%var_9965: Tensor[(1950), int64], %var_9966: Tensor[(672), int8], %var_9971: Tensor[(1350), int64], %var_10005: Tensor[(275), float32], %var_10011: Tensor[(1950), float32], %var_10022: Tensor[(18), float32], %var_10027: Tensor[(1950), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(13, 15, 10), bool], Tensor[(672), int8], uint16, Tensor[(6), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(45, 2), float64], Tensor[(675), uint16], Tensor[(1, 975), float32], Tensor[(15, 6, 15), int64], Tensor[(1287), float32], Tensor[(275), float32], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(1950), uint16], Tensor[(1950), float32]) {
  %815 = cast(%var_9965, dtype="int64") /* ty=Tensor[(1950), int64] */;
  %816 = cast(%var_9965, dtype="int64") /* ty=Tensor[(1950), int64] */;
  %817 = cast(%var_9966, dtype="int8") /* ty=Tensor[(672), int8] */;
  %818 = cast(meta[relay.Constant][69] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %819 = cast(meta[relay.Constant][70] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %820 = reshape(%815, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
  %821 = reshape(%816, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
  %822 = reshape(%817, newshape=[1, 672]) /* ty=Tensor[(1, 672), int8] */;
  %823 = reshape(%818, newshape=[]) /* ty=uint16 */;
  %824 = reshape(%819, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %825 = @func_1180(%820, %821, %822, %823, %824) /* ty=(Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) */;
  %826 = cast(meta[relay.Constant][69] /* ty=uint16 */, dtype="int64") /* ty=int64 */;
  %827 = cast(%var_9971, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %828 = reshape(%826, newshape=[]) /* ty=int64 */;
  %829 = reshape(%827, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %830 = @func_5509(%828, %829) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */;
  %831 = cast(meta[relay.Constant][71] /* ty=Tensor[(45, 2), float64] */, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
  %832 = reshape(%831, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
  %833 = cast(meta[relay.Constant][72] /* ty=Tensor[(1, 975), float32] */, dtype="float32") /* ty=Tensor[(1, 975), float32] */;
  %834 = cast(meta[relay.Constant][70] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %835 = reshape(%833, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %836 = reshape(%834, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %837 = @func_4948(%835, %836) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %838 = cast(meta[relay.Constant][69] /* ty=uint16 */, dtype="int64") /* ty=int64 */;
  %839 = cast(%var_9971, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %840 = reshape(%838, newshape=[]) /* ty=int64 */;
  %841 = reshape(%839, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
  %842 = @func_5509(%840, %841) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */;
  %843 = cast(%var_9966, dtype="float64") /* ty=Tensor[(672), float64] */;
  %844 = cast(%var_10005, dtype="float32") /* ty=Tensor[(275), float32] */;
  %845 = reshape(%843, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %846 = reshape(%844, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %847 = @func_4295(%845, %846) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %848 = cast(%var_10022, dtype="float32") /* ty=Tensor[(18), float32] */;
  %849 = reshape(%848, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %850 = cast(%var_9965, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %851 = atanh(%850) /* ty=Tensor[(1950), float32] */;
  %852 = cast(%var_10011, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %853 = shape_of(%851, dtype="int32") /* ty=Tensor[(1), int32] */;
  %854 = cast(%851, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?), float64] */;
  %856 = floor_divide(%854, %855) /* ty=Tensor[(1950), float64] */;
  %857 = cast(%var_10027, dtype="uint16") /* ty=Tensor[(1950), uint16] */;
  %858 = shape_of(%856, dtype="int32") /* ty=Tensor[(1), int32] */;
  %859 = cast(%856, dtype="uint16") /* ty=Tensor[(1950), uint16] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %861 = cast(%851, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %862 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  %863 = %825.0;
  %864 = %830.1;
  %865 = @func_2853(%832) /* ty=Tensor[(5, 9, 2), float64] */;
  %866 = %837.3;
  %867 = %842.0;
  %868 = %847.4;
  %869 = @func_1801(%849) /* ty=Tensor[(1, 9, 2), float32] */;
  %870 = bitwise_or(%859, %860) /* ty=Tensor[(1950), uint16] */;
  %871 = asin(%861) /* ty=Tensor[(1950), float32] */;
  (%862, %863, %var_9966, meta[relay.Constant][69] /* ty=uint16 */, meta[relay.Constant][70] /* ty=Tensor[(6), float64] */, %864, %var_9971, %865, meta[relay.Constant][71] /* ty=Tensor[(45, 2), float64] */, %866, meta[relay.Constant][72] /* ty=Tensor[(1, 975), float32] */, %867, %868, %var_10005, %869, %var_10022, %870, %871)
}

def @func_13167(%var_13159: Tensor[(275), float32]) -> Tensor[(275), float64] {
  %872 = @func_12197() /* ty=(Tensor[(275), float32],) */;
  %873 = %872.0;
  %874 = cast(%var_13159, dtype="float64") /* ty=Tensor[(275), float64] */;
  %875 = shape_of(%873, dtype="int32") /* ty=Tensor[(1), int32] */;
  %876 = cast(%873, dtype="float64") /* ty=Tensor[(275), float64] */;
  %877 = dyn.reshape(%874, %875, newshape=[]) /* ty=Tensor[(?), float64] */;
  power(%876, %877) /* ty=Tensor[(275), float64] */
}

def @func_12962() -> (Tensor[(2, 6, 3), float32],) {
  %878 = @func_11631() /* ty=Tensor[(2, 6, 3), float32] */;
  (%878,)
}

def @func_2025(%var_2018: bool, %var_2019: Tensor[(3, 3, 6), bool]) -> Tensor[(3, 3, 6), bool] {
  %879 = cast(%var_2018, dtype="bool") /* ty=bool */;
  %880 = cast(%var_2019, dtype="bool") /* ty=Tensor[(3, 3, 6), bool] */;
  logical_or(%879, %880) /* ty=Tensor[(3, 3, 6), bool] */
}

def @func_7768(%var_7750: Tensor[(5, 2, 15), float64], %var_7759: Tensor[(55, 5), float32]) -> (Tensor[(5, 2, 15), float64], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(55, 5), float32]) {
  %881 = cast(%var_7750, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
  %882 = cast(meta[relay.Constant][73] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %883 = cast(%var_7759, dtype="float32") /* ty=Tensor[(55, 5), float32] */;
  %884 = reshape(%882, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %885 = reshape(%883, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %886 = @func_4295(%884, %885) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %887 = asinh(%881) /* ty=Tensor[(5, 2, 15), float64] */;
  %888 = %886.1;
  (%887, %888, meta[relay.Constant][73] /* ty=Tensor[(672), float64] */, %var_7759)
}

def @func_6118(%var_6106: int8, %var_6107: Tensor[(2, 16, 7), int8]) -> Tensor[(2, 16, 7), int8] {
  %889 = cast(%var_6106, dtype="int8") /* ty=int8 */;
  %890 = cast(%var_6107, dtype="int8") /* ty=Tensor[(2, 16, 7), int8] */;
  bitwise_xor(%889, %890) /* ty=Tensor[(2, 16, 7), int8] */
}

def @func_11668() -> Tensor[(2, 6, 3), float32] {
  %891 = @func_10843() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %891.0
}

def @func_11298(%var_11265: Tensor[(56, 22), float32], %var_11267: Tensor[(1287), float32], %var_11290: Tensor[(675), uint16]) -> (Tensor[(2, 6, 3), float32], Tensor[(16, 12, 3), float64], Tensor[(576), float64], Tensor[(975), float32], float32, Tensor[(56, 22), float32], Tensor[(6), float64], Tensor[(1287), float32], Tensor[(2, 6, 3), float32], uint16, Tensor[(675), uint16]) {
  %892 = @func_10729() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %893 = cast(meta[relay.Constant][74] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %894 = reshape(%893, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float64] */;
  %895 = @func_11196(%894) /* ty=(Tensor[(16, 12, 3), float64],) */;
  %896 = cast(9.02863f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %897 = cast(%var_11265, dtype="float32") /* ty=Tensor[(56, 22), float32] */;
  %898 = cast(meta[relay.Constant][75] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %899 = cast(%var_11267, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %900 = reshape(%896, newshape=[]) /* ty=float32 */;
  %901 = reshape(%897, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), float32] */;
  %902 = reshape(%898, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %903 = reshape(%899, newshape=[11, 117]) /* ty=Tensor[(11, 117), float32] */;
  %904 = @func_6027(%900, %901, %902, %903) /* ty=(Tensor[(11, 16, 7), float32], Tensor[(6), float64], Tensor[(975), float32], Tensor[(6), float64], Tensor[(9, 11, 13), float64], Tensor[(11, 117), float32], Tensor[(11, 16, 7), float32]) */;
  %905 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %906 = cast(meta[relay.Constant][75] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %907 = cast(%var_11290, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %908 = reshape(%906, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %909 = reshape(%907, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %910 = @func_603(%908, %909) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %911 = %892.0;
  %912 = %895.0;
  %913 = %904.2;
  %914 = %905.0;
  %915 = %910.2;
  (%911, %912, meta[relay.Constant][74] /* ty=Tensor[(576), float64] */, %913, 9.02863f /* ty=float32 */, %var_11265, meta[relay.Constant][75] /* ty=Tensor[(6), float64] */, %var_11267, %914, %915, %var_11290)
}

def @func_7255(%var_7221: Tensor[(13, 4, 1), float32], %var_7225: Tensor[(15, 105), float64], %var_7229: Tensor[(1872, 1), uint32], %var_7230: uint16, %var_7242: Tensor[(18), float32]) -> (Tensor[(13, 4, 1), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 105), float64], Tensor[(675), uint16], Tensor[(1872, 1), uint32], uint16, Tensor[(675), uint16], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(675), uint16], Tensor[(5, 195), float32], Tensor[(1, 6), float64]) {
  %916 = cast(%var_7221, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
  %917 = cast(%var_7225, dtype="float64") /* ty=Tensor[(15, 105), float64] */;
  %918 = reshape(%917, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
  %919 = cast(%var_7229, dtype="uint32") /* ty=Tensor[(1872, 1), uint32] */;
  %920 = cast(%var_7230, dtype="uint16") /* ty=uint16 */;
  %921 = cast(meta[relay.Constant][76] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %922 = reshape(%919, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %923 = reshape(%920, newshape=[]) /* ty=uint16 */;
  %924 = reshape(%921, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %925 = @func_727(%922, %923, %924) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %926 = cast(%var_7242, dtype="float32") /* ty=Tensor[(18), float32] */;
  %927 = reshape(%926, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %928 = cast(meta[relay.Constant][77] /* ty=Tensor[(5, 195), float32] */, dtype="float32") /* ty=Tensor[(5, 195), float32] */;
  %929 = cast(meta[relay.Constant][78] /* ty=Tensor[(1, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 6), float64] */;
  %930 = reshape(%928, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %931 = reshape(%929, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %932 = @func_4948(%930, %931) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %933 = atan(%916) /* ty=Tensor[(13, 4, 1), float32] */;
  %934 = @func_1354(%918) /* ty=Tensor[(15, 15, 7), float64] */;
  %935 = %925.3;
  %936 = @func_1801(%927) /* ty=Tensor[(1, 9, 2), float32] */;
  %937 = %932.3;
  (%933, %934, %var_7225, %935, %var_7229, %var_7230, meta[relay.Constant][76] /* ty=Tensor[(675), uint16] */, %936, %var_7242, %937, meta[relay.Constant][77] /* ty=Tensor[(5, 195), float32] */, meta[relay.Constant][78] /* ty=Tensor[(1, 6), float64] */)
}

def @func_10323(%var_10306: Tensor[(910), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
  %938 = cast(%var_10306, dtype="float32") /* ty=Tensor[(910), float32] */;
  %939 = reshape(%938, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
  %940 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
  %941 = @func_5561(%939) /* ty=Tensor[(7, 13, 10), float32] */;
  (%940, %941, %var_10306)
}

def @func_4876(%var_4827: uint8) -> (Tensor[(14, 6, 7), uint8], Tensor[(15, 3, 15), bool], Tensor[(675), uint16], Tensor[(14, 6, 7), int16]) {
  %942 = cast(%var_4827, dtype="uint8") /* ty=uint8 */;
  %943 = cast(meta[relay.Constant][79] /* ty=Tensor[(14, 6, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 6, 7), uint8] */;
  %944 = cast(%var_4827, dtype="uint16") /* ty=uint16 */;
  %945 = cast(meta[relay.Constant][80] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %946 = reshape(%944, newshape=[]) /* ty=uint16 */;
  %947 = reshape(%945, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %948 = @func_440(%946, %947) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %949 = cast(meta[relay.Constant][79] /* ty=Tensor[(14, 6, 7), uint8] */, dtype="int16") /* ty=Tensor[(14, 6, 7), int16] */;
  %950 = cast(%var_4827, dtype="int16") /* ty=int16 */;
  %951 = maximum(%942, %943) /* ty=Tensor[(14, 6, 7), uint8] */;
  %952 = %948.0;
  %953 = right_shift(%949, %950) /* ty=Tensor[(14, 6, 7), int16] */;
  (%951, %952, meta[relay.Constant][80] /* ty=Tensor[(675), uint16] */, %953)
}

def @func_10240() -> (Tensor[(2, 6, 3), float32],) {
  %954 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %955 = %954.0;
  (%955,)
}

def @func_11617() -> Tensor[(2, 6, 3), float32] {
  @func_11584() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_13321() -> Tensor[(275), float32] {
  @func_11928() /* ty=Tensor[(275), float32] */
}

def @func_12951() -> (Tensor[(2, 6, 3), float32],) {
  %956 = @func_12828() /* ty=Tensor[(2, 6, 3), float32] */;
  (%956,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1530(%var_1513: Tensor[(3, 16, 2), int32], %var_1514: Tensor[(3, 16, 2), int32]) -> (Tensor[(3, 16, 2), int32],) {
  %0 = cast(%var_1514, dtype="int32") /* ty=Tensor[(3, 16, 2), int32] */;
  %1 = shape_of(%var_1513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1513, dtype="int32") /* ty=Tensor[(3, 16, 2), int32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %4 = bitwise_and(%2, %3) /* ty=Tensor[(3, 16, 2), int32] */;
  (%4,)
}

def @func_9472(%var_9470: Tensor[(11, 10, 5), uint32]) -> (Tensor[(11, 10, 5), uint32],) {
  @func_9469(%var_9470) /* ty=(Tensor[(11, 10, 5), uint32],) */
}

def @func_9955() -> (Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) {
  @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */
}

def @func_1356(%var_1355: Tensor[(15, 15, 7), float64]) -> Tensor[(15, 15, 7), float64] {
  %6 = fn (%var_1349: Tensor[(15, 15, 7), float64]) -> Tensor[(15, 15, 7), float64] {
    %5 = cast(%var_1349, dtype="float64") /* ty=Tensor[(15, 15, 7), float64] */;
    asinh(%5) /* ty=Tensor[(15, 15, 7), float64] */
  };
  %6(%var_1355) /* ty=Tensor[(15, 15, 7), float64] */
}

def @func_10775(%var_10773: Tensor[(6, 4, 8), int16], %var_10774: Tensor[(6, 4, 8), int16]) -> (Tensor[(6, 4, 8), int16], Tensor[(13, 6, 3), float32], Tensor[(234), float32], Tensor[(6, 4, 8), float64]) {
  %18 = fn (%var_10751: Tensor[(6, 4, 8), int16], %var_10752: Tensor[(6, 4, 8), int16]) -> (Tensor[(6, 4, 8), int16], Tensor[(13, 6, 3), float32], Tensor[(234), float32], Tensor[(6, 4, 8), float64]) {
    %7 = cast(%var_10752, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
    %8 = shape_of(%var_10751, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%var_10751, dtype="int16") /* ty=Tensor[(6, 4, 8), int16] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
    %12 = reshape(%11, newshape=[13, 6, 3]) /* ty=Tensor[(13, 6, 3), float32] */;
    %13 = @func_7581(%12) /* ty=(Tensor[(13, 6, 3), float32],) */;
    %14 = cast(%var_10751, dtype="float64") /* ty=Tensor[(6, 4, 8), float64] */;
    %15 = bitwise_or(%9, %10) /* ty=Tensor[(6, 4, 8), int16] */;
    %16 = %13.0;
    %17 = asin(%14) /* ty=Tensor[(6, 4, 8), float64] */;
    (%15, %16, meta[relay.Constant][0] /* ty=Tensor[(234), float32] */, %17)
  };
  %18(%var_10773, %var_10774) /* ty=(Tensor[(6, 4, 8), int16], Tensor[(13, 6, 3), float32], Tensor[(234), float32], Tensor[(6, 4, 8), float64]) */
}

def @func_1186(%var_1181: Tensor[(13, 15, 10), int64], %var_1182: Tensor[(13, 15, 10), int64], %var_1183: Tensor[(1, 672), int8], %var_1184: uint16, %var_1185: Tensor[(6), float64]) -> (Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) {
  %40 = fn (%var_1140: Tensor[(13, 15, 10), int64], %var_1141: Tensor[(13, 15, 10), int64], %var_1156: Tensor[(1, 672), int8], %var_1157: uint16, %var_1167: Tensor[(6), float64]) -> (Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) {
    %19 = cast(%var_1141, dtype="bool") /* ty=Tensor[(13, 15, 10), bool] */;
    %20 = shape_of(%var_1140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %21 = cast(%var_1140, dtype="bool") /* ty=Tensor[(13, 15, 10), bool] */;
    %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %23 = cast(%var_1156, dtype="int8") /* ty=Tensor[(1, 672), int8] */;
    %24 = cast(%var_1156, dtype="int8") /* ty=Tensor[(1, 672), int8] */;
    %25 = cast(%var_1157, dtype="uint16") /* ty=uint16 */;
    %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %27 = reshape(%23, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
    %28 = reshape(%24, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
    %29 = reshape(%25, newshape=[]) /* ty=uint16 */;
    %30 = reshape(%26, newshape=[675]) /* ty=Tensor[(675), uint16] */;
    %31 = @func_813(%27, %28, %29, %30) /* ty=(Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) */;
    %32 = cast(%var_1167, dtype="float64") /* ty=Tensor[(6), float64] */;
    %33 = %31.4;
    %34 = cast(%33, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %35 = reshape(%32, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
    %36 = reshape(%34, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
    %37 = @func_603(%35, %36) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
    %38 = not_equal(%21, %22) /* ty=Tensor[(13, 15, 10), bool] */;
    %39 = %37.1;
    (%38, %33, %var_1156, %var_1157, meta[relay.Constant][1] /* ty=Tensor[(675), uint16] */, %39, %var_1167)
  };
  %40(%var_1181, %var_1182, %var_1183, %var_1184, %var_1185) /* ty=(Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) */
}

def @func_11670() -> Tensor[(2, 6, 3), float32] {
  @func_11668() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_11678(%var_11673: Tensor[(1, 9, 12), int64], %var_11674: Tensor[(13, 9, 12), int64]) -> (Tensor[(13, 9, 12), bool],) {
  %41 = cast(%var_11673, dtype="bool") /* ty=Tensor[(1, 9, 12), bool] */;
  %42 = cast(%var_11674, dtype="bool") /* ty=Tensor[(13, 9, 12), bool] */;
  %43 = not_equal(%41, %42) /* ty=Tensor[(13, 9, 12), bool] */;
  (%43,)
}

def @func_12962() -> (Tensor[(2, 6, 3), float32],) {
  %44 = @func_11631() /* ty=Tensor[(2, 6, 3), float32] */;
  (%44,)
}

def @func_7255(%var_7221: Tensor[(13, 4, 1), float32], %var_7225: Tensor[(15, 105), float64], %var_7229: Tensor[(1872, 1), uint32], %var_7230: uint16, %var_7242: Tensor[(18), float32]) -> (Tensor[(13, 4, 1), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 105), float64], Tensor[(675), uint16], Tensor[(1872, 1), uint32], uint16, Tensor[(675), uint16], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(675), uint16], Tensor[(5, 195), float32], Tensor[(1, 6), float64]) {
  %45 = cast(%var_7221, dtype="float32") /* ty=Tensor[(13, 4, 1), float32] */;
  %46 = cast(%var_7225, dtype="float64") /* ty=Tensor[(15, 105), float64] */;
  %47 = reshape(%46, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
  %48 = cast(%var_7229, dtype="uint32") /* ty=Tensor[(1872, 1), uint32] */;
  %49 = cast(%var_7230, dtype="uint16") /* ty=uint16 */;
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %51 = reshape(%48, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %52 = reshape(%49, newshape=[]) /* ty=uint16 */;
  %53 = reshape(%50, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %54 = @func_727(%51, %52, %53) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %55 = cast(%var_7242, dtype="float32") /* ty=Tensor[(18), float32] */;
  %56 = reshape(%55, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 195), float32] */, dtype="float32") /* ty=Tensor[(5, 195), float32] */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 6), float64] */;
  %59 = reshape(%57, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %60 = reshape(%58, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %61 = @func_4948(%59, %60) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %62 = atan(%45) /* ty=Tensor[(13, 4, 1), float32] */;
  %63 = @func_1354(%47) /* ty=Tensor[(15, 15, 7), float64] */;
  %64 = %54.3;
  %65 = @func_1801(%56) /* ty=Tensor[(1, 9, 2), float32] */;
  %66 = %61.3;
  (%62, %63, %var_7225, %64, %var_7229, %var_7230, meta[relay.Constant][2] /* ty=Tensor[(675), uint16] */, %65, %var_7242, %66, meta[relay.Constant][3] /* ty=Tensor[(5, 195), float32] */, meta[relay.Constant][4] /* ty=Tensor[(1, 6), float64] */)
}

def @func_13169(%var_13168: Tensor[(275), float32]) -> Tensor[(275), float64] {
  %73 = fn (%var_13159: Tensor[(275), float32]) -> Tensor[(275), float64] {
    %67 = @func_12197() /* ty=(Tensor[(275), float32],) */;
    %68 = %67.0;
    %69 = cast(%var_13159, dtype="float64") /* ty=Tensor[(275), float64] */;
    %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(1), int32] */;
    %71 = cast(%68, dtype="float64") /* ty=Tensor[(275), float64] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?), float64] */;
    power(%71, %72) /* ty=Tensor[(275), float64] */
  };
  %73(%var_13168) /* ty=Tensor[(275), float64] */
}

def @func_10262() -> (Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) {
  %74 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(550), uint32] */, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %76 = reshape(%75, newshape=[11, 10, 5]) /* ty=Tensor[(11, 10, 5), uint32] */;
  %77 = @func_9469(%76) /* ty=(Tensor[(11, 10, 5), uint32],) */;
  %78 = cast(meta[relay.Constant][5] /* ty=Tensor[(550), uint32] */, dtype="float64") /* ty=Tensor[(550), float64] */;
  %79 = %74.0;
  %80 = %77.0;
  %81 = atanh(%78) /* ty=Tensor[(550), float64] */;
  (%79, %80, %81)
}

def @func_12804(%var_12790: Tensor[(108), int64]) -> (Tensor[(2, 6, 3), float32], Tensor[(13, 9, 12), bool], Tensor[(108), int64], Tensor[(1404), int64]) {
  %82 = @func_11960() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %83 = cast(%var_12790, dtype="int64") /* ty=Tensor[(108), int64] */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(1404), int64] */, dtype="int64") /* ty=Tensor[(1404), int64] */;
  %85 = reshape(%83, newshape=[1, 9, 12]) /* ty=Tensor[(1, 9, 12), int64] */;
  %86 = reshape(%84, newshape=[13, 9, 12]) /* ty=Tensor[(13, 9, 12), int64] */;
  %87 = @func_11678(%85, %86) /* ty=(Tensor[(13, 9, 12), bool],) */;
  %88 = %82.0;
  %89 = %87.0;
  (%88, %89, %var_12790, meta[relay.Constant][6] /* ty=Tensor[(1404), int64] */)
}

def @func_1994(%var_1991: Tensor[(12, 13, 10), float32], %var_1992: Tensor[(12, 13, 10), float32], %var_1993: Tensor[(4, 140), uint64]) -> (Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) {
  %103 = fn (%var_1972: Tensor[(12, 13, 10), float32], %var_1973: Tensor[(12, 13, 10), float32], %var_1983: Tensor[(4, 140), uint64]) -> (Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) {
    %90 = cast(%var_1973, dtype="bool") /* ty=Tensor[(12, 13, 10), bool] */;
    %91 = shape_of(%var_1972, dtype="int32") /* ty=Tensor[(3), int32] */;
    %92 = cast(%var_1972, dtype="bool") /* ty=Tensor[(12, 13, 10), bool] */;
    %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %94 = less_equal(%92, %93) /* ty=Tensor[(12, 13, 10), bool] */;
    %95 = cast(%94, dtype="float64") /* ty=Tensor[(12, 13, 10), float64] */;
    %96 = cast(%var_1983, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
    %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(1568), int8] */, dtype="int8") /* ty=Tensor[(1568), int8] */;
    %98 = reshape(%96, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
    %99 = reshape(%97, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
    %100 = @func_1428(%98, %99) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
    %101 = sinh(%95) /* ty=Tensor[(12, 13, 10), float64] */;
    %102 = %100.1;
    (%101, %102, %var_1983, meta[relay.Constant][7] /* ty=Tensor[(1568), int8] */)
  };
  %103(%var_1991, %var_1992, %var_1993) /* ty=(Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) */
}

def @func_4072(%var_3995: Tensor[(9, 4, 8), float32], %var_3996: Tensor[(9, 4, 8), float32], %var_4041: Tensor[(1, 560), uint64], %var_4042: Tensor[(1568), int8], %var_4049: Tensor[(275), float32]) -> (Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) {
  %104 = cast(%var_3996, dtype="float32") /* ty=Tensor[(9, 4, 8), float32] */;
  %105 = shape_of(%var_3995, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(%var_3995, dtype="float32") /* ty=Tensor[(9, 4, 8), float32] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %108 = cast(meta[relay.Constant][8] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %109 = cast(meta[relay.Constant][8] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %110 = reshape(%108, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %111 = reshape(%109, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %112 = @func_3399(%110, %111) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */;
  %113 = cast(%var_4041, dtype="uint64") /* ty=Tensor[(1, 560), uint64] */;
  %114 = cast(%var_4042, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %115 = reshape(%113, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
  %116 = reshape(%114, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %117 = @func_1428(%115, %116) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %120 = cast(meta[relay.Constant][10] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(54), bool] */, dtype="bool") /* ty=Tensor[(54), bool] */;
  %122 = cast(%var_4049, dtype="float32") /* ty=Tensor[(275), float32] */;
  %123 = reshape(%118, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %124 = reshape(%119, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %125 = reshape(%120, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %126 = reshape(%121, newshape=[54]) /* ty=Tensor[(54), bool] */;
  %127 = reshape(%122, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %128 = @func_2326(%123, %124, %125, %126, %127) /* ty=(Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %129 = cast(%var_3996, dtype="float32") /* ty=Tensor[(9, 4, 8), float32] */;
  %130 = tan(%129) /* ty=Tensor[(9, 4, 8), float32] */;
  %131 = cast(%var_3996, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="bool") /* ty=Tensor[(9, 4, 8), bool] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %135 = floor_mod(%106, %107) /* ty=Tensor[(9, 4, 8), float32] */;
  %136 = %112.0;
  %137 = %117.2;
  %138 = %128.10;
  %139 = logical_or(%133, %134) /* ty=Tensor[(9, 4, 8), bool] */;
  (%135, %136, meta[relay.Constant][8] /* ty=Tensor[(672), float64] */, %137, %var_4041, %var_4042, %138, meta[relay.Constant][9] /* ty=Tensor[(720), float64] */, meta[relay.Constant][10] /* ty=Tensor[(6), float64] */, meta[relay.Constant][11] /* ty=Tensor[(54), bool] */, %var_4049, %139)
}

def @func_6033(%var_6029: float32, %var_6030: Tensor[(11, 16, 7), float32], %var_6031: Tensor[(6), float64], %var_6032: Tensor[(11, 117), float32]) -> (Tensor[(11, 16, 7), float32], Tensor[(6), float64], Tensor[(975), float32], Tensor[(6), float64], Tensor[(9, 11, 13), float64], Tensor[(11, 117), float32], Tensor[(11, 16, 7), float32]) {
  @func_6027(%var_6029, %var_6030, %var_6031, %var_6032) /* ty=(Tensor[(11, 16, 7), float32], Tensor[(6), float64], Tensor[(975), float32], Tensor[(6), float64], Tensor[(9, 11, 13), float64], Tensor[(11, 117), float32], Tensor[(11, 16, 7), float32]) */
}

def @func_10569(%var_10568: Tensor[(96), int32]) -> (Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(1287), float64]) {
  %150 = fn (%var_10545: Tensor[(96), int32]) -> (Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(1287), float64]) {
    %140 = cast(%var_10545, dtype="int32") /* ty=Tensor[(96), int32] */;
    %141 = cast(%var_10545, dtype="int32") /* ty=Tensor[(96), int32] */;
    %142 = reshape(%140, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
    %143 = reshape(%141, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
    %144 = @func_1530(%142, %143) /* ty=(Tensor[(3, 16, 2), int32],) */;
    %145 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
    %146 = %145.3;
    %147 = cast(%146, dtype="float64") /* ty=Tensor[(1287), float64] */;
    %148 = %144.0;
    %149 = asin(%147) /* ty=Tensor[(1287), float64] */;
    (%148, %var_10545, %149)
  };
  %150(%var_10568) /* ty=(Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(1287), float64]) */
}

def @func_12952() -> (Tensor[(2, 6, 3), float32],) {
  %152 = fn () -> (Tensor[(2, 6, 3), float32],) {
    %151 = @func_12828() /* ty=Tensor[(2, 6, 3), float32] */;
    (%151,)
  };
  %152() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_13322() -> Tensor[(275), float32] {
  %153 = fn () -> Tensor[(275), float32] {
    @func_11928() /* ty=Tensor[(275), float32] */
  };
  %153() /* ty=Tensor[(275), float32] */
}

def @func_5512(%var_5510: int64, %var_5511: Tensor[(15, 6, 15), int64]) -> (Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) {
  %160 = fn (%var_5487: int64, %var_5488: Tensor[(15, 6, 15), int64]) -> (Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) {
    %154 = cast(%var_5487, dtype="int64") /* ty=int64 */;
    %155 = cast(%var_5488, dtype="int64") /* ty=Tensor[(15, 6, 15), int64] */;
    %156 = cast(%var_5488, dtype="float32") /* ty=Tensor[(15, 6, 15), float32] */;
    %157 = cast(%var_5487, dtype="float32") /* ty=float32 */;
    %158 = logical_xor(%154, %155) /* ty=Tensor[(15, 6, 15), int64] */;
    %159 = floor_mod(%156, %157) /* ty=Tensor[(15, 6, 15), float32] */;
    (%158, %159)
  };
  %160(%var_5510, %var_5511) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */
}

def @func_10731() -> (Tensor[(2, 6, 3), float32],) {
  @func_10729() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_9604(%var_9578: Tensor[(6), float64], %var_9585: Tensor[(675), uint16]) -> (uint16, Tensor[(975), float32], Tensor[(6), float64], Tensor[(2, 6, 3), float32], Tensor[(14, 16, 7), int8], Tensor[(675), uint16], Tensor[(12, 13, 10), float64], Tensor[(1560), float32], Tensor[(560), uint64]) {
  %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %162 = cast(%var_9578, dtype="float64") /* ty=Tensor[(6), float64] */;
  %163 = reshape(%161, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %164 = reshape(%162, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %165 = @func_4948(%163, %164) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %166 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %167 = %166.0;
  %168 = cast(%167, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %169 = cast(%var_9578, dtype="float64") /* ty=Tensor[(6), float64] */;
  %170 = cast(%var_9585, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %171 = reshape(%169, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %172 = reshape(%170, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %173 = @func_603(%171, %172) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %174 = cast(meta[relay.Constant][13] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %175 = cast(meta[relay.Constant][13] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %176 = cast(meta[relay.Constant][14] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %177 = reshape(%174, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %178 = reshape(%175, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %179 = reshape(%176, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint64] */;
  %180 = @func_1990(%177, %178, %179) /* ty=(Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) */;
  %181 = %165.1;
  %182 = log(%168) /* ty=Tensor[(2, 6, 3), float32] */;
  %183 = %173.7;
  %184 = %180.0;
  (%181, meta[relay.Constant][12] /* ty=Tensor[(975), float32] */, %var_9578, %182, %183, %var_9585, %184, meta[relay.Constant][13] /* ty=Tensor[(1560), float32] */, meta[relay.Constant][14] /* ty=Tensor[(560), uint64] */)
}

def @func_7262(%var_7257: Tensor[(13, 4, 1), float32], %var_7258: Tensor[(15, 105), float64], %var_7259: Tensor[(1872, 1), uint32], %var_7260: uint16, %var_7261: Tensor[(18), float32]) -> (Tensor[(13, 4, 1), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 105), float64], Tensor[(675), uint16], Tensor[(1872, 1), uint32], uint16, Tensor[(675), uint16], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(675), uint16], Tensor[(5, 195), float32], Tensor[(1, 6), float64]) {
  @func_7255(%var_7257, %var_7258, %var_7259, %var_7260, %var_7261) /* ty=(Tensor[(13, 4, 1), float32], Tensor[(15, 15, 7), float64], Tensor[(15, 105), float64], Tensor[(675), uint16], Tensor[(1872, 1), uint32], uint16, Tensor[(675), uint16], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(675), uint16], Tensor[(5, 195), float32], Tensor[(1, 6), float64]) */
}

def @func_2354(%var_2347: Tensor[(7, 16, 5), float32]) -> Tensor[(7, 16, 5), float32] {
  %185 = cast(%var_2347, dtype="float32") /* ty=Tensor[(7, 16, 5), float32] */;
  atanh(%185) /* ty=Tensor[(7, 16, 5), float32] */
}

def @func_7583(%var_7582: Tensor[(13, 6, 3), float32]) -> (Tensor[(13, 6, 3), float32],) {
  %188 = fn (%var_7575: Tensor[(13, 6, 3), float32]) -> (Tensor[(13, 6, 3), float32],) {
    %186 = cast(%var_7575, dtype="float32") /* ty=Tensor[(13, 6, 3), float32] */;
    %187 = exp(%186) /* ty=Tensor[(13, 6, 3), float32] */;
    (%187,)
  };
  %188(%var_7582) /* ty=(Tensor[(13, 6, 3), float32],) */
}

def @func_11995(%var_11993: Tensor[(1, 12, 14), uint32], %var_11994: Tensor[(7, 12, 14), uint32]) -> (Tensor[(7, 12, 14), bool],) {
  %192 = fn (%var_11984: Tensor[(1, 12, 14), uint32], %var_11985: Tensor[(7, 12, 14), uint32]) -> (Tensor[(7, 12, 14), bool],) {
    %189 = cast(%var_11984, dtype="bool") /* ty=Tensor[(1, 12, 14), bool] */;
    %190 = cast(%var_11985, dtype="bool") /* ty=Tensor[(7, 12, 14), bool] */;
    %191 = greater(%189, %190) /* ty=Tensor[(7, 12, 14), bool] */;
    (%191,)
  };
  %192(%var_11993, %var_11994) /* ty=(Tensor[(7, 12, 14), bool],) */
}

def @func_4079(%var_4074: Tensor[(9, 4, 8), float32], %var_4075: Tensor[(9, 4, 8), float32], %var_4076: Tensor[(1, 560), uint64], %var_4077: Tensor[(1568), int8], %var_4078: Tensor[(275), float32]) -> (Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) {
  @func_4072(%var_4074, %var_4075, %var_4076, %var_4077, %var_4078) /* ty=(Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) */
}

def @func_10046(%var_10039: Tensor[(1950), int64], %var_10040: Tensor[(672), int8], %var_10041: Tensor[(1350), int64], %var_10042: Tensor[(275), float32], %var_10043: Tensor[(1950), float32], %var_10044: Tensor[(18), float32], %var_10045: Tensor[(1950), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(13, 15, 10), bool], Tensor[(672), int8], uint16, Tensor[(6), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(45, 2), float64], Tensor[(675), uint16], Tensor[(1, 975), float32], Tensor[(15, 6, 15), int64], Tensor[(1287), float32], Tensor[(275), float32], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(1950), uint16], Tensor[(1950), float32]) {
  %250 = fn (%var_9965: Tensor[(1950), int64], %var_9966: Tensor[(672), int8], %var_9971: Tensor[(1350), int64], %var_10005: Tensor[(275), float32], %var_10011: Tensor[(1950), float32], %var_10022: Tensor[(18), float32], %var_10027: Tensor[(1950), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(13, 15, 10), bool], Tensor[(672), int8], uint16, Tensor[(6), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(45, 2), float64], Tensor[(675), uint16], Tensor[(1, 975), float32], Tensor[(15, 6, 15), int64], Tensor[(1287), float32], Tensor[(275), float32], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(1950), uint16], Tensor[(1950), float32]) {
    %193 = cast(%var_9965, dtype="int64") /* ty=Tensor[(1950), int64] */;
    %194 = cast(%var_9965, dtype="int64") /* ty=Tensor[(1950), int64] */;
    %195 = cast(%var_9966, dtype="int8") /* ty=Tensor[(672), int8] */;
    %196 = cast(meta[relay.Constant][15] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
    %198 = reshape(%193, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
    %199 = reshape(%194, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
    %200 = reshape(%195, newshape=[1, 672]) /* ty=Tensor[(1, 672), int8] */;
    %201 = reshape(%196, newshape=[]) /* ty=uint16 */;
    %202 = reshape(%197, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %203 = @func_1180(%198, %199, %200, %201, %202) /* ty=(Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) */;
    %204 = cast(meta[relay.Constant][15] /* ty=uint16 */, dtype="int64") /* ty=int64 */;
    %205 = cast(%var_9971, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %206 = reshape(%204, newshape=[]) /* ty=int64 */;
    %207 = reshape(%205, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %208 = @func_5509(%206, %207) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */;
    %209 = cast(meta[relay.Constant][17] /* ty=Tensor[(45, 2), float64] */, dtype="float64") /* ty=Tensor[(45, 2), float64] */;
    %210 = reshape(%209, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
    %211 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 975), float32] */, dtype="float32") /* ty=Tensor[(1, 975), float32] */;
    %212 = cast(meta[relay.Constant][16] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
    %213 = reshape(%211, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
    %214 = reshape(%212, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %215 = @func_4948(%213, %214) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
    %216 = cast(meta[relay.Constant][15] /* ty=uint16 */, dtype="int64") /* ty=int64 */;
    %217 = cast(%var_9971, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %218 = reshape(%216, newshape=[]) /* ty=int64 */;
    %219 = reshape(%217, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %220 = @func_5509(%218, %219) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */;
    %221 = cast(%var_9966, dtype="float64") /* ty=Tensor[(672), float64] */;
    %222 = cast(%var_10005, dtype="float32") /* ty=Tensor[(275), float32] */;
    %223 = reshape(%221, newshape=[672]) /* ty=Tensor[(672), float64] */;
    %224 = reshape(%222, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %225 = @func_4295(%223, %224) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
    %226 = cast(%var_10022, dtype="float32") /* ty=Tensor[(18), float32] */;
    %227 = reshape(%226, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
    %228 = cast(%var_9965, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %229 = atanh(%228) /* ty=Tensor[(1950), float32] */;
    %230 = cast(%var_10011, dtype="float64") /* ty=Tensor[(1950), float64] */;
    %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(1), int32] */;
    %232 = cast(%229, dtype="float64") /* ty=Tensor[(1950), float64] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?), float64] */;
    %234 = floor_divide(%232, %233) /* ty=Tensor[(1950), float64] */;
    %235 = cast(%var_10027, dtype="uint16") /* ty=Tensor[(1950), uint16] */;
    %236 = shape_of(%234, dtype="int32") /* ty=Tensor[(1), int32] */;
    %237 = cast(%234, dtype="uint16") /* ty=Tensor[(1950), uint16] */;
    %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %239 = cast(%229, dtype="float32") /* ty=Tensor[(1950), float32] */;
    %240 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
    %241 = %203.0;
    %242 = %208.1;
    %243 = @func_2853(%210) /* ty=Tensor[(5, 9, 2), float64] */;
    %244 = %215.3;
    %245 = %220.0;
    %246 = %225.4;
    %247 = @func_1801(%227) /* ty=Tensor[(1, 9, 2), float32] */;
    %248 = bitwise_or(%237, %238) /* ty=Tensor[(1950), uint16] */;
    %249 = asin(%239) /* ty=Tensor[(1950), float32] */;
    (%240, %241, %var_9966, meta[relay.Constant][15] /* ty=uint16 */, meta[relay.Constant][16] /* ty=Tensor[(6), float64] */, %242, %var_9971, %243, meta[relay.Constant][17] /* ty=Tensor[(45, 2), float64] */, %244, meta[relay.Constant][18] /* ty=Tensor[(1, 975), float32] */, %245, %246, %var_10005, %247, %var_10022, %248, %249)
  };
  %250(%var_10039, %var_10040, %var_10041, %var_10042, %var_10043, %var_10044, %var_10045) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(13, 15, 10), bool], Tensor[(672), int8], uint16, Tensor[(6), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(45, 2), float64], Tensor[(675), uint16], Tensor[(1, 975), float32], Tensor[(15, 6, 15), int64], Tensor[(1287), float32], Tensor[(275), float32], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(1950), uint16], Tensor[(1950), float32]) */
}

def @func_10658() -> (Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) {
  %258 = fn () -> (Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) {
    %251 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 96), int32] */, dtype="int32") /* ty=Tensor[(1, 96), int32] */;
    %252 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 96), int32] */, dtype="int32") /* ty=Tensor[(1, 96), int32] */;
    %253 = reshape(%251, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
    %254 = reshape(%252, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
    %255 = @func_1530(%253, %254) /* ty=(Tensor[(3, 16, 2), int32],) */;
    %256 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
    %257 = %255.0;
    (%256, %257, meta[relay.Constant][19] /* ty=Tensor[(1, 96), int32] */)
  };
  %258() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */
}

def @func_9671(%var_9670: Tensor[(1287), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) {
  %268 = fn (%var_9646: Tensor[(1287), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) {
    %259 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %260 = cast(%var_9646, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %261 = cast(%var_9646, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %262 = reshape(%260, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
    %263 = reshape(%261, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
    %264 = @func_2146(%262, %263) /* ty=Tensor[(9, 11, 13), float64] */;
    %265 = cast(%264, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
    %266 = %259.0;
    %267 = sigmoid(%265) /* ty=Tensor[(9, 11, 13), float64] */;
    (%266, %var_9646, %267)
  };
  %268(%var_9670) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) */
}

def @func_9555() -> (Tensor[(2, 6, 3), float32],) {
  @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_13036(%var_13008: Tensor[(360), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(6, 10, 6), uint32], Tensor[(60), float64], Tensor[(360), float64], Tensor[(5, 9, 2), float64], Tensor[(90), float64]) {
  %269 = @func_10240() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %270 = cast(meta[relay.Constant][20] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %271 = cast(%var_13008, dtype="float64") /* ty=Tensor[(360), float64] */;
  %272 = reshape(%270, newshape=[6, 10, 1]) /* ty=Tensor[(6, 10, 1), float64] */;
  %273 = reshape(%271, newshape=[6, 10, 6]) /* ty=Tensor[(6, 10, 6), float64] */;
  %274 = @func_7070(%272, %273) /* ty=(Tensor[(6, 10, ?), float32], Tensor[(6, 10, 6), uint32]) */;
  %275 = cast(meta[relay.Constant][21] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %276 = reshape(%275, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
  %277 = %269.0;
  %278 = %274.1;
  %279 = @func_2853(%276) /* ty=Tensor[(5, 9, 2), float64] */;
  (%277, %278, meta[relay.Constant][20] /* ty=Tensor[(60), float64] */, %var_13008, %279, meta[relay.Constant][21] /* ty=Tensor[(90), float64] */)
}

def @func_819(%var_815: Tensor[(6, 14, 8), int8], %var_816: Tensor[(6, 14, 8), int8], %var_817: uint16, %var_818: Tensor[(675), uint16]) -> (Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) {
  @func_813(%var_815, %var_816, %var_817, %var_818) /* ty=(Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) */
}

def @main(%var_13466: Tensor[(1872), uint32], %var_13467: uint16, %var_13498: Tensor[(560), uint64], %var_13517: Tensor[(2, 6, 3), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(675), uint16], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(2, 6, 3), float64], Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], Tensor[(1560), float32], Tensor[(560), uint64], Tensor[(?, 910), uint64], Tensor[(2, 6, 3), bool]) {
  %280 = cast(%var_13466, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %281 = cast(%var_13467, dtype="uint16") /* ty=uint16 */;
  %282 = cast(meta[relay.Constant][22] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %283 = reshape(%280, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %284 = reshape(%281, newshape=[]) /* ty=uint16 */;
  %285 = reshape(%282, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %286 = @func_731(%283, %284, %285) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %287 = cast(%var_13466, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %288 = cast(%var_13467, dtype="uint16") /* ty=uint16 */;
  %289 = cast(%var_13466, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
  %290 = cast(%var_13467, dtype="uint16") /* ty=uint16 */;
  %291 = cast(meta[relay.Constant][22] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %292 = reshape(%289, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %293 = reshape(%290, newshape=[]) /* ty=uint16 */;
  %294 = reshape(%291, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %295 = @func_727(%292, %293, %294) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %296 = %295.3;
  %297 = cast(%296, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %298 = reshape(%287, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %299 = reshape(%288, newshape=[]) /* ty=uint16 */;
  %300 = reshape(%297, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %301 = @func_731(%298, %299, %300) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %302 = cast(meta[relay.Constant][23] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %303 = cast(meta[relay.Constant][23] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %304 = cast(%var_13498, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %305 = reshape(%302, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %306 = reshape(%303, newshape=[12, 13, 10]) /* ty=Tensor[(12, 13, 10), float32] */;
  %307 = reshape(%304, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint64] */;
  %308 = @func_1994(%305, %306, %307) /* ty=(Tensor[(12, 13, 10), float64], Tensor[(15, 3, 15), bool], Tensor[(4, 140), uint64], Tensor[(1568), int8]) */;
  %309 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 910), float32] */, dtype="float32") /* ty=Tensor[(1, 910), float32] */;
  %310 = reshape(%309, newshape=[910]) /* ty=Tensor[(910), float32] */;
  %311 = @func_10325(%310) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) */;
  %312 = %311.1;
  %313 = cast(%312, dtype="uint64") /* ty=Tensor[(7, 13, 10), uint64] */;
  %314 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(1, 910), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %315 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 910), float32] */, dtype="uint64") /* ty=Tensor[(1, 910), uint64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %317 = @func_11617() /* ty=Tensor[(2, 6, 3), float32] */;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %319 = log2(%318) /* ty=Tensor[(2, 6, 3), float32] */;
  %320 = cast(%var_13517, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %322 = cast(%319, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %324 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
  %325 = %286.3;
  %326 = @func_12545() /* ty=Tensor[(2, 6, 3), float64] */;
  %327 = %301.0;
  %328 = %308.1;
  %329 = left_shift(%315, %316) /* ty=Tensor[(?, 910), uint64] */;
  %330 = logical_and(%322, %323) /* ty=Tensor[(2, 6, 3), bool] */;
  (%324, %325, %var_13466, %var_13467, meta[relay.Constant][22] /* ty=Tensor[(675), uint16] */, %326, %327, %328, meta[relay.Constant][23] /* ty=Tensor[(1560), float32] */, %var_13498, %329, %330)
}

def @func_13414(%var_13411: Tensor[(1287), float32], %var_13412: Tensor[(1287), float32], %var_13413: Tensor[(18), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(2, 6, 3), float32], Tensor[(1287), int8], Tensor[(1568), int8], Tensor[(560), uint64], Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(1, 9, 2), float32], Tensor[(18), float32]) {
  %356 = fn (%var_13357: Tensor[(1287), float32], %var_13362: Tensor[(1287), float32], %var_13404: Tensor[(18), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(2, 6, 3), float32], Tensor[(1287), int8], Tensor[(1568), int8], Tensor[(560), uint64], Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(1, 9, 2), float32], Tensor[(18), float32]) {
    %331 = @func_11960() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %332 = %331.0;
    %333 = cast(%332, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
    %334 = cast(%var_13357, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %335 = reshape(%334, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
    %336 = @func_9669(%335) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) */;
    %337 = cast(%var_13362, dtype="int8") /* ty=Tensor[(1287), int8] */;
    %338 = shape_of(%var_13357, dtype="int32") /* ty=Tensor[(1), int32] */;
    %339 = cast(%var_13357, dtype="int8") /* ty=Tensor[(1287), int8] */;
    %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?), int8] */;
    %341 = cast(meta[relay.Constant][25] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %342 = reshape(%341, newshape=[2, 280]) /* ty=Tensor[(2, 280), uint64] */;
    %343 = @func_11106(%342) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(10, 8, 7), uint64], Tensor[(2, 280), uint64], Tensor[(1568), int8], Tensor[(15, 3, 15), bool], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(7, 16, 5), float32], Tensor[(3, 16, 2), int32]) */;
    %344 = cast(meta[relay.Constant][26] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %345 = cast(meta[relay.Constant][27] /* ty=Tensor[(224), int8] */, dtype="int8") /* ty=Tensor[(224), int8] */;
    %346 = reshape(%344, newshape=[]) /* ty=int8 */;
    %347 = reshape(%345, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), int8] */;
    %348 = cast(%var_13404, dtype="float32") /* ty=Tensor[(18), float32] */;
    %349 = reshape(%348, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
    %350 = asinh(%333) /* ty=Tensor[(2, 6, 3), float32] */;
    %351 = %336.0;
    %352 = logical_xor(%339, %340) /* ty=Tensor[(1287), int8] */;
    %353 = %343.3;
    %354 = @func_6118(%346, %347) /* ty=Tensor[(2, 16, 7), int8] */;
    %355 = @func_1801(%349) /* ty=Tensor[(1, 9, 2), float32] */;
    (%350, %351, %352, %353, meta[relay.Constant][25] /* ty=Tensor[(560), uint64] */, %354, meta[relay.Constant][26] /* ty=int8 */, meta[relay.Constant][27] /* ty=Tensor[(224), int8] */, %355, %var_13404)
  };
  %356(%var_13411, %var_13412, %var_13413) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(2, 6, 3), float32], Tensor[(1287), int8], Tensor[(1568), int8], Tensor[(560), uint64], Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(1, 9, 2), float32], Tensor[(18), float32]) */
}

def @func_12829() -> Tensor[(2, 6, 3), float32] {
  %358 = fn () -> Tensor[(2, 6, 3), float32] {
    %357 = @func_10240() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %357.0
  };
  %358() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_11438(%var_11436: Tensor[(550), float64]) -> (Tensor[(550), bool],) {
  @func_11435(%var_11436) /* ty=(Tensor[(550), bool],) */
}

def @func_11656() -> (Tensor[(2, 6, 3), float32],) {
  %362 = fn () -> (Tensor[(2, 6, 3), float32],) {
    %359 = @func_11617() /* ty=Tensor[(2, 6, 3), float32] */;
    %360 = cast(%359, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
    %361 = log10(%360) /* ty=Tensor[(2, 6, 3), float32] */;
    (%361,)
  };
  %362() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_1803(%var_1802: Tensor[(1, 9, 2), float32]) -> Tensor[(1, 9, 2), float32] {
  %364 = fn (%var_1798: Tensor[(1, 9, 2), float32]) -> Tensor[(1, 9, 2), float32] {
    %363 = cast(%var_1798, dtype="float32") /* ty=Tensor[(1, 9, 2), float32] */;
    cosh(%363) /* ty=Tensor[(1, 9, 2), float32] */
  };
  %364(%var_1802) /* ty=Tensor[(1, 9, 2), float32] */
}

def @func_1432(%var_1430: Tensor[(10, 8, 7), uint64], %var_1431: Tensor[(1568), int8]) -> (Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) {
  @func_1428(%var_1430, %var_1431) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */
}

def @func_1428(%var_1397: Tensor[(10, 8, 7), uint64], %var_1417: Tensor[(1568), int8]) -> (Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) {
  %365 = cast(%var_1397, dtype="uint64") /* ty=Tensor[(10, 8, 7), uint64] */;
  %366 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(10, 8, 7), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 8, 7), uint64] */, dtype="uint64") /* ty=Tensor[(10, 8, 7), uint64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %369 = cast(%var_1417, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %370 = cast(%var_1417, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %371 = cast(%var_1417, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %372 = reshape(%369, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %373 = reshape(%370, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %374 = reshape(%371, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %375 = @func_500(%372, %373, %374) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %376 = maximum(%367, %368) /* ty=Tensor[(10, 8, 7), uint64] */;
  %377 = %375.2;
  (%376, %377, %var_1417)
}

def @func_11929() -> Tensor[(275), float32] {
  %379 = fn () -> Tensor[(275), float32] {
    %378 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
    %378.4
  };
  %379() /* ty=Tensor[(275), float32] */
}

def @func_731(%var_728: Tensor[(16, 9, 13), uint32], %var_729: uint16, %var_730: Tensor[(675), uint16]) -> (Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) {
  %391 = fn (%var_704: Tensor[(16, 9, 13), uint32], %var_715: uint16, %var_716: Tensor[(675), uint16]) -> (Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) {
    %380 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 9, 13), uint32] */, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
    %381 = shape_of(%var_704, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%var_704, dtype="bool") /* ty=Tensor[(16, 9, 13), bool] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %384 = cast(%var_715, dtype="uint16") /* ty=uint16 */;
    %385 = cast(%var_716, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %386 = reshape(%384, newshape=[]) /* ty=uint16 */;
    %387 = reshape(%385, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
    %388 = @func_440(%386, %387) /* ty=(Tensor[(15, 3, 15), bool],) */;
    %389 = not_equal(%382, %383) /* ty=Tensor[(16, 9, 13), bool] */;
    %390 = %388.0;
    (%389, %390, %var_715, %var_716)
  };
  %391(%var_728, %var_729, %var_730) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */
}

def @func_11108(%var_11107: Tensor[(2, 280), uint64]) -> (Tensor[(2, 6, 3), float32], Tensor[(10, 8, 7), uint64], Tensor[(2, 280), uint64], Tensor[(1568), int8], Tensor[(15, 3, 15), bool], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(7, 16, 5), float32], Tensor[(3, 16, 2), int32]) {
  %415 = fn (%var_11064: Tensor[(2, 280), uint64]) -> (Tensor[(2, 6, 3), float32], Tensor[(10, 8, 7), uint64], Tensor[(2, 280), uint64], Tensor[(1568), int8], Tensor[(15, 3, 15), bool], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(7, 16, 5), float32], Tensor[(3, 16, 2), int32]) {
    %392 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %393 = %392.0;
    %394 = cast(%393, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
    %395 = cast(%var_11064, dtype="uint64") /* ty=Tensor[(2, 280), uint64] */;
    %396 = cast(meta[relay.Constant][30] /* ty=Tensor[(1568), int8] */, dtype="int8") /* ty=Tensor[(1568), int8] */;
    %397 = reshape(%395, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
    %398 = reshape(%396, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
    %399 = @func_1428(%397, %398) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
    %400 = cast(meta[relay.Constant][31] /* ty=Tensor[(1872), uint32] */, dtype="uint32") /* ty=Tensor[(1872), uint32] */;
    %401 = cast(meta[relay.Constant][32] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %402 = cast(meta[relay.Constant][33] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %403 = reshape(%400, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
    %404 = reshape(%401, newshape=[]) /* ty=uint16 */;
    %405 = reshape(%402, newshape=[675]) /* ty=Tensor[(675), uint16] */;
    %406 = @func_727(%403, %404, %405) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
    %407 = %399.0;
    %408 = cast(%407, dtype="float32") /* ty=Tensor[(10, 8, 7), float32] */;
    %409 = reshape(%408, newshape=[7, 16, 5]) /* ty=Tensor[(7, 16, 5), float32] */;
    %410 = @func_10657() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */;
    %411 = sqrt(%394) /* ty=Tensor[(2, 6, 3), float32] */;
    %412 = %406.1;
    %413 = @func_2354(%409) /* ty=Tensor[(7, 16, 5), float32] */;
    %414 = %410.1;
    (%411, %407, %var_11064, meta[relay.Constant][30] /* ty=Tensor[(1568), int8] */, %412, meta[relay.Constant][31] /* ty=Tensor[(1872), uint32] */, meta[relay.Constant][32] /* ty=uint16 */, meta[relay.Constant][33] /* ty=Tensor[(675), uint16] */, %413, %414)
  };
  %415(%var_11107) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(10, 8, 7), uint64], Tensor[(2, 280), uint64], Tensor[(1568), int8], Tensor[(15, 3, 15), bool], Tensor[(1872), uint32], uint16, Tensor[(675), uint16], Tensor[(7, 16, 5), float32], Tensor[(3, 16, 2), int32]) */
}

def @func_2853(%var_2833: Tensor[(5, 9, 2), float64]) -> Tensor[(5, 9, 2), float64] {
  %416 = cast(%var_2833, dtype="float64") /* ty=Tensor[(5, 9, 2), float64] */;
  log2(%416) /* ty=Tensor[(5, 9, 2), float64] */
}

def @func_11960() -> (Tensor[(2, 6, 3), float32],) {
  %417 = @func_10657() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */;
  %418 = %417.0;
  (%418,)
}

def @func_11632() -> Tensor[(2, 6, 3), float32] {
  %420 = fn () -> Tensor[(2, 6, 3), float32] {
    %419 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %419.0
  };
  %420() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_7070(%var_7035: Tensor[(6, 10, 1), float64], %var_7065: Tensor[(6, 10, 6), float64]) -> (Tensor[(6, 10, ?), float32], Tensor[(6, 10, 6), uint32]) {
  %421 = cast(%var_7035, dtype="float64") /* ty=Tensor[(6, 10, 1), float64] */;
  %422 = log(%421) /* ty=Tensor[(6, 10, 1), float64] */;
  %423 = cast(%var_7035, dtype="float64") /* ty=Tensor[(6, 10, 1), float64] */;
  %424 = cosh(%423) /* ty=Tensor[(6, 10, 1), float64] */;
  %425 = cast(%424, dtype="float32") /* ty=Tensor[(6, 10, 1), float32] */;
  %426 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%422, dtype="float32") /* ty=Tensor[(6, 10, 1), float32] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %429 = cast(%var_7035, dtype="float64") /* ty=Tensor[(6, 10, 1), float64] */;
  %430 = atan(%429) /* ty=Tensor[(6, 10, 1), float64] */;
  %431 = cast(%430, dtype="uint32") /* ty=Tensor[(6, 10, 1), uint32] */;
  %432 = cast(%var_7065, dtype="uint32") /* ty=Tensor[(6, 10, 6), uint32] */;
  %433 = divide(%427, %428) /* ty=Tensor[(6, 10, ?), float32] */;
  %434 = bitwise_or(%431, %432) /* ty=Tensor[(6, 10, 6), uint32] */;
  (%433, %434)
}

def @func_12807(%var_12805: Tensor[(108), int64]) -> (Tensor[(2, 6, 3), float32], Tensor[(13, 9, 12), bool], Tensor[(108), int64], Tensor[(1404), int64]) {
  @func_12804(%var_12805) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(13, 9, 12), bool], Tensor[(108), int64], Tensor[(1404), int64]) */
}

def @func_12328() -> Tensor[(2, 6, 3), float64] {
  %437 = fn () -> Tensor[(2, 6, 3), float64] {
    %435 = @func_11668() /* ty=Tensor[(2, 6, 3), float32] */;
    %436 = cast(%435, dtype="float64") /* ty=Tensor[(2, 6, 3), float64] */;
    asin(%436) /* ty=Tensor[(2, 6, 3), float64] */
  };
  %437() /* ty=Tensor[(2, 6, 3), float64] */
}

def @func_1534(%var_1532: Tensor[(3, 16, 2), int32], %var_1533: Tensor[(3, 16, 2), int32]) -> (Tensor[(3, 16, 2), int32],) {
  @func_1530(%var_1532, %var_1533) /* ty=(Tensor[(3, 16, 2), int32],) */
}

def @func_11778() -> Tensor[(2, 6, 3), float32] {
  %439 = fn () -> Tensor[(2, 6, 3), float32] {
    %438 = @func_10843() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %438.0
  };
  %439() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_12964() -> (Tensor[(2, 6, 3), float32],) {
  @func_12962() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_2025(%var_2018: bool, %var_2019: Tensor[(3, 3, 6), bool]) -> Tensor[(3, 3, 6), bool] {
  %440 = cast(%var_2018, dtype="bool") /* ty=bool */;
  %441 = cast(%var_2019, dtype="bool") /* ty=Tensor[(3, 3, 6), bool] */;
  logical_or(%440, %441) /* ty=Tensor[(3, 3, 6), bool] */
}

def @func_1260(%var_1257: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), float32] {
  %442 = cast(%var_1257, dtype="float32") /* ty=Tensor[(11, 5, 5), float32] */;
  erf(%442) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_4878(%var_4877: uint8) -> (Tensor[(14, 6, 7), uint8], Tensor[(15, 3, 15), bool], Tensor[(675), uint16], Tensor[(14, 6, 7), int16]) {
  %455 = fn (%var_4827: uint8) -> (Tensor[(14, 6, 7), uint8], Tensor[(15, 3, 15), bool], Tensor[(675), uint16], Tensor[(14, 6, 7), int16]) {
    %443 = cast(%var_4827, dtype="uint8") /* ty=uint8 */;
    %444 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 6, 7), uint8] */, dtype="uint8") /* ty=Tensor[(14, 6, 7), uint8] */;
    %445 = cast(%var_4827, dtype="uint16") /* ty=uint16 */;
    %446 = cast(meta[relay.Constant][35] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %447 = reshape(%445, newshape=[]) /* ty=uint16 */;
    %448 = reshape(%446, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
    %449 = @func_440(%447, %448) /* ty=(Tensor[(15, 3, 15), bool],) */;
    %450 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 6, 7), uint8] */, dtype="int16") /* ty=Tensor[(14, 6, 7), int16] */;
    %451 = cast(%var_4827, dtype="int16") /* ty=int16 */;
    %452 = maximum(%443, %444) /* ty=Tensor[(14, 6, 7), uint8] */;
    %453 = %449.0;
    %454 = right_shift(%450, %451) /* ty=Tensor[(14, 6, 7), int16] */;
    (%452, %453, meta[relay.Constant][35] /* ty=Tensor[(675), uint16] */, %454)
  };
  %455(%var_4877) /* ty=(Tensor[(14, 6, 7), uint8], Tensor[(15, 3, 15), bool], Tensor[(675), uint16], Tensor[(14, 6, 7), int16]) */
}

def @func_4298(%var_4296: Tensor[(672), float64], %var_4297: Tensor[(275), float32]) -> (Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
  %477 = fn (%var_4267: Tensor[(672), float64], %var_4289: Tensor[(275), float32]) -> (Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
    %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 14), float32] */;
    %457 = exp(%456) /* ty=Tensor[(4, 4, 14), float32] */;
    %458 = cast(%457, dtype="float32") /* ty=Tensor[(4, 4, 14), float32] */;
    %459 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(4, 4, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %460 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 4, 14), float32] */, dtype="float32") /* ty=Tensor[(4, 4, 14), float32] */;
    %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %462 = cast(%var_4267, dtype="float64") /* ty=Tensor[(672), float64] */;
    %463 = cast(%var_4267, dtype="float64") /* ty=Tensor[(672), float64] */;
    %464 = reshape(%462, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
    %465 = reshape(%463, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
    %466 = @func_3399(%464, %465) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */;
    %467 = cast(meta[relay.Constant][37] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %468 = cast(meta[relay.Constant][37] /* ty=Tensor[(1287), float32] */, dtype="float32") /* ty=Tensor[(1287), float32] */;
    %469 = reshape(%467, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
    %470 = reshape(%468, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
    %471 = cast(%var_4289, dtype="float32") /* ty=Tensor[(275), float32] */;
    %472 = reshape(%471, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
    %473 = divide(%460, %461) /* ty=Tensor[(4, 4, 14), float32] */;
    %474 = %466.0;
    %475 = @func_2146(%469, %470) /* ty=Tensor[(9, 11, 13), float64] */;
    %476 = @func_1260(%472) /* ty=Tensor[(11, 5, 5), float32] */;
    (%473, %474, %var_4267, %475, meta[relay.Constant][37] /* ty=Tensor[(1287), float32] */, %476, %var_4289)
  };
  %477(%var_4296, %var_4297) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */
}

def @func_9855() -> Tensor[(2, 6, 3), float32] {
  @func_9853() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_2150(%var_2148: Tensor[(9, 11, 13), float32], %var_2149: Tensor[(9, 11, 13), float32]) -> Tensor[(9, 11, 13), float64] {
  @func_2146(%var_2148, %var_2149) /* ty=Tensor[(9, 11, 13), float64] */
}

def @func_2357(%var_2355: Tensor[(7, 16, 5), float32]) -> Tensor[(7, 16, 5), float32] {
  @func_2354(%var_2355) /* ty=Tensor[(7, 16, 5), float32] */
}

def @func_10066() -> (Tensor[(2, 6, 3), float32],) {
  %479 = fn () -> (Tensor[(2, 6, 3), float32],) {
    %478 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
    (%478,)
  };
  %479() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_3403(%var_3401: Tensor[(14, 6, 8), float64], %var_3402: Tensor[(14, 6, 8), float64]) -> (Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) {
  @func_3399(%var_3401, %var_3402) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */
}

def @func_11617() -> Tensor[(2, 6, 3), float32] {
  @func_11584() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_1263(%var_1261: Tensor[(11, 5, 5), float32]) -> Tensor[(11, 5, 5), float32] {
  @func_1260(%var_1261) /* ty=Tensor[(11, 5, 5), float32] */
}

def @func_7155(%var_7154: Tensor[(11, 7, 10), uint8]) -> Tensor[(11, 7, 10), bool] {
  %484 = fn (%var_7133: Tensor[(11, 7, 10), uint8]) -> Tensor[(11, 7, 10), bool] {
    %480 = cast(%var_7133, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
    %481 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(11, 7, 10), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %482 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 7, 10), uint8] */, dtype="bool") /* ty=Tensor[(11, 7, 10), bool] */;
    %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%482, %483) /* ty=Tensor[(11, 7, 10), bool] */
  };
  %484(%var_7154) /* ty=Tensor[(11, 7, 10), bool] */
}

def @func_11720(%var_11707: Tensor[(16, 6), int32]) -> (Tensor[(3, 16, 2), int32], Tensor[(16, 6), int32], Tensor[(2, 6, 3), float32]) {
  %485 = cast(%var_11707, dtype="int32") /* ty=Tensor[(16, 6), int32] */;
  %486 = reshape(%485, newshape=[96]) /* ty=Tensor[(96), int32] */;
  %487 = @func_10567(%486) /* ty=(Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(1287), float64]) */;
  %488 = @func_11655() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %489 = %488.0;
  %490 = cast(%489, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %491 = %487.0;
  %492 = erf(%490) /* ty=Tensor[(2, 6, 3), float32] */;
  (%491, %var_11707, %492)
}

def @func_5563(%var_5562: Tensor[(7, 13, 10), float32]) -> Tensor[(7, 13, 10), float32] {
  %494 = fn (%var_5558: Tensor[(7, 13, 10), float32]) -> Tensor[(7, 13, 10), float32] {
    %493 = cast(%var_5558, dtype="float32") /* ty=Tensor[(7, 13, 10), float32] */;
    log2(%493) /* ty=Tensor[(7, 13, 10), float32] */
  };
  %494(%var_5562) /* ty=Tensor[(7, 13, 10), float32] */
}

def @func_4951(%var_4949: Tensor[(15, 13, 5), float32], %var_4950: Tensor[(6), float64]) -> (Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) {
  %503 = fn (%var_4928: Tensor[(15, 13, 5), float32], %var_4933: Tensor[(6), float64]) -> (Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) {
    %495 = cast(%var_4928, dtype="float32") /* ty=Tensor[(15, 13, 5), float32] */;
    %496 = cast(%var_4933, dtype="float64") /* ty=Tensor[(6), float64] */;
    %497 = cast(meta[relay.Constant][39] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %498 = reshape(%496, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
    %499 = reshape(%497, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
    %500 = @func_603(%498, %499) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
    %501 = atanh(%495) /* ty=Tensor[(15, 13, 5), float32] */;
    %502 = %500.4;
    (%501, %502, %var_4933, meta[relay.Constant][39] /* ty=Tensor[(675), uint16] */)
  };
  %503(%var_4949, %var_4950) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */
}

def @func_12731(%var_12671: Tensor[(7, 2, 14), int16], %var_12703: Tensor[(504), float32]) -> (Tensor[(7, 2, 14), bool], Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(1568), int8], Tensor[(16, 12, 3), float64], Tensor[(576), float64]) {
  %504 = cast(%var_12671, dtype="bool") /* ty=Tensor[(7, 2, 14), bool] */;
  %505 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 2, 14), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 2, 14), int16] */, dtype="bool") /* ty=Tensor[(7, 2, 14), bool] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %508 = cast(meta[relay.Constant][41] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %509 = cast(meta[relay.Constant][41] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %510 = reshape(%508, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %511 = reshape(%509, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), int32] */;
  %512 = @func_1530(%510, %511) /* ty=(Tensor[(3, 16, 2), int32],) */;
  %513 = cast(%var_12703, dtype="float32") /* ty=Tensor[(504), float32] */;
  %514 = cast(meta[relay.Constant][42] /* ty=Tensor[(1568), int8] */, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %515 = reshape(%513, newshape=[504]) /* ty=Tensor[(504), float32] */;
  %516 = reshape(%514, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), int8] */;
  %517 = @func_11027(%515, %516) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(275), float32], Tensor[(1, 1568), int8], Tensor[(275, 1), float32]) */;
  %518 = cast(meta[relay.Constant][43] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %519 = reshape(%518, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float64] */;
  %520 = @func_11196(%519) /* ty=(Tensor[(16, 12, 3), float64],) */;
  %521 = greater_equal(%506, %507) /* ty=Tensor[(7, 2, 14), bool] */;
  %522 = %512.0;
  %523 = %517.1;
  %524 = %520.0;
  (%521, %522, meta[relay.Constant][41] /* ty=Tensor[(96), int32] */, %523, %var_12703, meta[relay.Constant][42] /* ty=Tensor[(1568), int8] */, %524, meta[relay.Constant][43] /* ty=Tensor[(576), float64] */)
}

def @func_10175(%var_10170: int8, %var_10171: Tensor[(224), int8], %var_10172: Tensor[(14, 6, 8), uint16], %var_10173: Tensor[(560), uint64], %var_10174: Tensor[(1568), int8]) -> (Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(14, 6, 8), float64], Tensor[(15, 3, 15), bool], Tensor[(560), uint64], Tensor[(1568), int8]) {
  @func_10168(%var_10170, %var_10171, %var_10172, %var_10173, %var_10174) /* ty=(Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(14, 6, 8), float64], Tensor[(15, 3, 15), bool], Tensor[(560), uint64], Tensor[(1568), int8]) */
}

def @func_3399(%var_3382: Tensor[(14, 6, 8), float64], %var_3389: Tensor[(14, 6, 8), float64]) -> (Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) {
  %525 = cast(%var_3382, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %526 = cast(%var_3389, dtype="uint16") /* ty=Tensor[(14, 6, 8), uint16] */;
  %527 = shape_of(%var_3382, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_3382, dtype="uint16") /* ty=Tensor[(14, 6, 8), uint16] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %530 = sigmoid(%525) /* ty=Tensor[(14, 6, 8), float64] */;
  %531 = right_shift(%528, %529) /* ty=Tensor[(14, 6, 8), uint16] */;
  (%530, %531)
}

def @func_7550(%var_7548: Tensor[(16, 9, 15), float64], %var_7549: Tensor[(16, 9, 15), float64]) -> (Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64]) {
  %539 = fn (%var_7535: Tensor[(16, 9, 15), float64], %var_7536: Tensor[(16, 9, 15), float64]) -> (Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64]) {
    %532 = cast(%var_7536, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %533 = shape_of(%var_7535, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(%var_7535, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %536 = cast(%var_7536, dtype="float64") /* ty=Tensor[(16, 9, 15), float64] */;
    %537 = floor_mod(%534, %535) /* ty=Tensor[(16, 9, 15), float64] */;
    %538 = sin(%536) /* ty=Tensor[(16, 9, 15), float64] */;
    (%537, %538)
  };
  %539(%var_7548, %var_7549) /* ty=(Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64]) */
}

def @func_9608(%var_9606: Tensor[(6), float64], %var_9607: Tensor[(675), uint16]) -> (uint16, Tensor[(975), float32], Tensor[(6), float64], Tensor[(2, 6, 3), float32], Tensor[(14, 16, 7), int8], Tensor[(675), uint16], Tensor[(12, 13, 10), float64], Tensor[(1560), float32], Tensor[(560), uint64]) {
  @func_9604(%var_9606, %var_9607) /* ty=(uint16, Tensor[(975), float32], Tensor[(6), float64], Tensor[(2, 6, 3), float32], Tensor[(14, 16, 7), int8], Tensor[(675), uint16], Tensor[(12, 13, 10), float64], Tensor[(1560), float32], Tensor[(560), uint64]) */
}

def @func_7074(%var_7072: Tensor[(6, 10, 1), float64], %var_7073: Tensor[(6, 10, 6), float64]) -> (Tensor[(6, 10, ?), float32], Tensor[(6, 10, 6), uint32]) {
  @func_7070(%var_7072, %var_7073) /* ty=(Tensor[(6, 10, ?), float32], Tensor[(6, 10, 6), uint32]) */
}

def @func_10127(%var_10125: Tensor[(1950), int64], %var_10126: uint16) -> (Tensor[(2, 6, 3), float32], Tensor[(15, 3, 15), bool], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(1950), int64], Tensor[(672), int8], uint16) {
  %560 = fn (%var_10104: Tensor[(1950), int64], %var_10106: uint16) -> (Tensor[(2, 6, 3), float32], Tensor[(15, 3, 15), bool], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(1950), int64], Tensor[(672), int8], uint16) {
    %540 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %541 = cast(meta[relay.Constant][44] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
    %542 = cast(meta[relay.Constant][45] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %543 = reshape(%541, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
    %544 = reshape(%542, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
    %545 = @func_603(%543, %544) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
    %546 = cast(%var_10104, dtype="int64") /* ty=Tensor[(1950), int64] */;
    %547 = cast(%var_10104, dtype="int64") /* ty=Tensor[(1950), int64] */;
    %548 = cast(meta[relay.Constant][46] /* ty=Tensor[(672), int8] */, dtype="int8") /* ty=Tensor[(672), int8] */;
    %549 = cast(%var_10106, dtype="uint16") /* ty=uint16 */;
    %550 = cast(meta[relay.Constant][44] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
    %551 = reshape(%546, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
    %552 = reshape(%547, newshape=[13, 15, 10]) /* ty=Tensor[(13, 15, 10), int64] */;
    %553 = reshape(%548, newshape=[1, 672]) /* ty=Tensor[(1, 672), int8] */;
    %554 = reshape(%549, newshape=[]) /* ty=uint16 */;
    %555 = reshape(%550, newshape=[6]) /* ty=Tensor[(6), float64] */;
    %556 = @func_1180(%551, %552, %553, %554, %555) /* ty=(Tensor[(13, 15, 10), bool], Tensor[(675), uint16], Tensor[(1, 672), int8], uint16, Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(6), float64]) */;
    %557 = %540.0;
    %558 = %545.8;
    %559 = %556.5;
    (%557, %558, meta[relay.Constant][44] /* ty=Tensor[(6), float64] */, meta[relay.Constant][45] /* ty=Tensor[(675), uint16] */, %559, %var_10104, meta[relay.Constant][46] /* ty=Tensor[(672), int8] */, %var_10106)
  };
  %560(%var_10125, %var_10126) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(15, 3, 15), bool], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 3, 15), bool], Tensor[(1950), int64], Tensor[(672), int8], uint16) */
}

def @func_10844() -> (Tensor[(2, 6, 3), float32],) {
  %562 = fn () -> (Tensor[(2, 6, 3), float32],) {
    %561 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
    (%561,)
  };
  %562() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_13105(%var_13101: Tensor[(1287), float32], %var_13102: Tensor[(560), uint64], %var_13103: Tensor[(1568), int8], %var_13104: Tensor[(275, 1), float32]) -> (Tensor[(2, 6, 3), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(14, 6, 8), float64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275, 1), float32]) {
  @func_13099(%var_13101, %var_13102, %var_13103, %var_13104) /* ty=(Tensor[(2, 6, 3), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(14, 6, 8), float64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275, 1), float32]) */
}

def @func_10241() -> (Tensor[(2, 6, 3), float32],) {
  %565 = fn () -> (Tensor[(2, 6, 3), float32],) {
    %563 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %564 = %563.0;
    (%564,)
  };
  %565() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_11303(%var_11300: Tensor[(56, 22), float32], %var_11301: Tensor[(1287), float32], %var_11302: Tensor[(675), uint16]) -> (Tensor[(2, 6, 3), float32], Tensor[(16, 12, 3), float64], Tensor[(576), float64], Tensor[(975), float32], float32, Tensor[(56, 22), float32], Tensor[(6), float64], Tensor[(1287), float32], Tensor[(2, 6, 3), float32], uint16, Tensor[(675), uint16]) {
  @func_11298(%var_11300, %var_11301, %var_11302) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(16, 12, 3), float64], Tensor[(576), float64], Tensor[(975), float32], float32, Tensor[(56, 22), float32], Tensor[(6), float64], Tensor[(1287), float32], Tensor[(2, 6, 3), float32], uint16, Tensor[(675), uint16]) */
}

def @func_11888() -> Tensor[(2, 6, 3), float32] {
  %566 = fn () -> Tensor[(2, 6, 3), float32] {
    @func_11584() /* ty=Tensor[(2, 6, 3), float32] */
  };
  %566() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_5453(%var_5448: Tensor[(6, 7, 13), float32]) -> Tensor[(6, 7, 13), float32] {
  %567 = cast(meta[relay.Constant][47] /* ty=Tensor[(6, 7, 13), float32] */, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %568 = shape_of(%var_5448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%var_5448, dtype="float32") /* ty=Tensor[(6, 7, 13), float32] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%569, %570) /* ty=Tensor[(6, 7, 13), float32] */
}

def @func_443(%var_441: uint16, %var_442: Tensor[(15, 3, 15), uint16]) -> (Tensor[(15, 3, 15), bool],) {
  %574 = fn (%var_433: uint16, %var_434: Tensor[(15, 3, 15), uint16]) -> (Tensor[(15, 3, 15), bool],) {
    %571 = cast(%var_433, dtype="bool") /* ty=bool */;
    %572 = cast(%var_434, dtype="bool") /* ty=Tensor[(15, 3, 15), bool] */;
    %573 = less_equal(%571, %572) /* ty=Tensor[(15, 3, 15), bool] */;
    (%573,)
  };
  %574(%var_441, %var_442) /* ty=(Tensor[(15, 3, 15), bool],) */
}

def @func_8333(%var_8331: Tensor[(13, 6, 10), uint16], %var_8332: Tensor[(13, 6, 10), uint16]) -> (Tensor[(13, 6, 10), uint16], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(18), float64], Tensor[(1, 9, 2), float32]) {
  @func_8329(%var_8331, %var_8332) /* ty=(Tensor[(13, 6, 10), uint16], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(18), float64], Tensor[(1, 9, 2), float32]) */
}

def @func_504(%var_501: Tensor[(14, 16, 7), int8], %var_502: Tensor[(14, 16, 7), int8], %var_503: Tensor[(14, 16, 7), int8]) -> (Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) {
  %591 = fn (%var_478: Tensor[(14, 16, 7), int8], %var_479: Tensor[(14, 16, 7), int8], %var_483: Tensor[(14, 16, 7), int8]) -> (Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) {
    %575 = cast(%var_479, dtype="int8") /* ty=Tensor[(14, 16, 7), int8] */;
    %576 = shape_of(%var_478, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%var_478, dtype="int8") /* ty=Tensor[(14, 16, 7), int8] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %579 = cast(%var_483, dtype="int16") /* ty=Tensor[(14, 16, 7), int16] */;
    %580 = shape_of(%var_479, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%var_479, dtype="int16") /* ty=Tensor[(14, 16, 7), int16] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %583 = cast(meta[relay.Constant][48] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %584 = cast(meta[relay.Constant][49] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %585 = reshape(%583, newshape=[]) /* ty=uint16 */;
    %586 = reshape(%584, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
    %587 = @func_440(%585, %586) /* ty=(Tensor[(15, 3, 15), bool],) */;
    %588 = right_shift(%577, %578) /* ty=Tensor[(14, 16, 7), int8] */;
    %589 = bitwise_and(%581, %582) /* ty=Tensor[(14, 16, 7), int16] */;
    %590 = %587.0;
    (%588, %589, %590, meta[relay.Constant][48] /* ty=uint16 */, meta[relay.Constant][49] /* ty=Tensor[(675), uint16] */)
  };
  %591(%var_501, %var_502, %var_503) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */
}

def @func_9780(%var_9779: Tensor[(90), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(13, 6, 10), uint16], Tensor[(1, 780), uint16]) {
  %611 = fn (%var_9767: Tensor[(90), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(13, 6, 10), uint16], Tensor[(1, 780), uint16]) {
    %592 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %593 = cast(meta[relay.Constant][50] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
    %594 = reshape(%593, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
    %595 = cast(meta[relay.Constant][50] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
    %596 = cast(meta[relay.Constant][51] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
    %597 = reshape(%596, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
    %598 = cast(%var_9767, dtype="float64") /* ty=Tensor[(90), float64] */;
    %599 = reshape(%598, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
    %600 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 780), uint16] */, dtype="uint16") /* ty=Tensor[(1, 780), uint16] */;
    %601 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 780), uint16] */, dtype="uint16") /* ty=Tensor[(1, 780), uint16] */;
    %602 = reshape(%600, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), uint16] */;
    %603 = reshape(%601, newshape=[13, 6, 10]) /* ty=Tensor[(13, 6, 10), uint16] */;
    %604 = @func_8329(%602, %603) /* ty=(Tensor[(13, 6, 10), uint16], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(18), float64], Tensor[(1, 9, 2), float32]) */;
    %605 = %592.0;
    %606 = @func_1260(%594) /* ty=Tensor[(11, 5, 5), float32] */;
    %607 = cosh(%595) /* ty=Tensor[(275), float32] */;
    %608 = @func_5561(%597) /* ty=Tensor[(7, 13, 10), float32] */;
    %609 = @func_2853(%599) /* ty=Tensor[(5, 9, 2), float64] */;
    %610 = %604.0;
    (%605, %606, %607, %608, meta[relay.Constant][51] /* ty=Tensor[(910), float32] */, %609, %var_9767, %610, meta[relay.Constant][52] /* ty=Tensor[(1, 780), uint16] */)
  };
  %611(%var_9779) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(13, 6, 10), uint16], Tensor[(1, 780), uint16]) */
}

def @func_11435(%var_11395: Tensor[(550), float64]) -> (Tensor[(550), bool],) {
  %612 = cast(%var_11395, dtype="float32") /* ty=Tensor[(550), float32] */;
  %613 = sin(%612) /* ty=Tensor[(550), float32] */;
  %614 = @func_10262() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) */;
  %615 = %614.2;
  %616 = cast(%var_11395, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(1), int32] */;
  %618 = cast(%615, dtype="uint32") /* ty=Tensor[(550), uint32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %620 = add(%618, %619) /* ty=Tensor[(550), uint32] */;
  %621 = cast(%620, dtype="bool") /* ty=Tensor[(550), bool] */;
  %622 = shape_of(%613, dtype="int32") /* ty=Tensor[(1), int32] */;
  %623 = cast(%613, dtype="bool") /* ty=Tensor[(550), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?), bool] */;
  %625 = greater(%623, %624) /* ty=Tensor[(550), bool] */;
  (%625,)
}

def @func_12240() -> (Tensor[(2, 6, 3), float64],) {
  %626 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(2, 6, 3), float64] */;
  %628 = acosh(%627) /* ty=Tensor[(2, 6, 3), float64] */;
  (%628,)
}

def @func_813(%var_792: Tensor[(6, 14, 8), int8], %var_793: Tensor[(6, 14, 8), int8], %var_800: uint16, %var_801: Tensor[(675), uint16]) -> (Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) {
  %629 = cast(%var_793, dtype="int8") /* ty=Tensor[(6, 14, 8), int8] */;
  %630 = shape_of(%var_792, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_792, dtype="int8") /* ty=Tensor[(6, 14, 8), int8] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %633 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 156), uint32] */, dtype="uint32") /* ty=Tensor[(12, 156), uint32] */;
  %634 = cast(%var_800, dtype="uint16") /* ty=uint16 */;
  %635 = cast(%var_801, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %636 = reshape(%633, newshape=[16, 9, 13]) /* ty=Tensor[(16, 9, 13), uint32] */;
  %637 = reshape(%634, newshape=[]) /* ty=uint16 */;
  %638 = reshape(%635, newshape=[675]) /* ty=Tensor[(675), uint16] */;
  %639 = @func_727(%636, %637, %638) /* ty=(Tensor[(16, 9, 13), bool], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %640 = multiply(%631, %632) /* ty=Tensor[(6, 14, 8), int8] */;
  %641 = %639.3;
  (%640, %641, meta[relay.Constant][53] /* ty=Tensor[(12, 156), uint32] */, %var_800, %var_801)
}

def @func_11586() -> Tensor[(2, 6, 3), float32] {
  @func_11584() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_11584() -> Tensor[(2, 6, 3), float32] {
  %642 = @func_10240() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %642.0
}

def @func_2332(%var_2327: Tensor[(4, 12, 15), float64], %var_2328: Tensor[(4, 12, 15), float64], %var_2329: Tensor[(6), float64], %var_2330: Tensor[(54), bool], %var_2331: Tensor[(275), float32]) -> (Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
  %669 = fn (%var_2252: Tensor[(4, 12, 15), float64], %var_2275: Tensor[(4, 12, 15), float64], %var_2282: Tensor[(6), float64], %var_2314: Tensor[(54), bool], %var_2322: Tensor[(275), float32]) -> (Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) {
    %643 = cast(%var_2275, dtype="uint8") /* ty=Tensor[(4, 12, 15), uint8] */;
    %644 = shape_of(%var_2252, dtype="int32") /* ty=Tensor[(3), int32] */;
    %645 = cast(%var_2252, dtype="uint8") /* ty=Tensor[(4, 12, 15), uint8] */;
    %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %647 = cast(%var_2282, dtype="float64") /* ty=Tensor[(6), float64] */;
    %648 = cast(meta[relay.Constant][54] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %649 = reshape(%647, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
    %650 = reshape(%648, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
    %651 = @func_603(%649, %650) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
    %652 = cast(meta[relay.Constant][55] /* ty=Tensor[(1575), float64] */, dtype="float64") /* ty=Tensor[(1575), float64] */;
    %653 = reshape(%652, newshape=[15, 15, 7]) /* ty=Tensor[(15, 15, 7), float64] */;
    %654 = cast(%var_2252, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
    %655 = sinh(%654) /* ty=Tensor[(4, 12, 15), float64] */;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(4, 12, 15), float64] */;
    %657 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %658 = cast(%var_2314, dtype="bool") /* ty=Tensor[(54), bool] */;
    %659 = reshape(%657, newshape=[]) /* ty=bool */;
    %660 = reshape(%658, newshape=[3, 3, 6]) /* ty=Tensor[(3, 3, 6), bool] */;
    %661 = cast(%var_2322, dtype="float32") /* ty=Tensor[(275), float32] */;
    %662 = reshape(%661, newshape=[11, 5, 5]) /* ty=Tensor[(11, 5, 5), float32] */;
    %663 = bitwise_and(%645, %646) /* ty=Tensor[(4, 12, 15), uint8] */;
    %664 = %651.7;
    %665 = @func_1354(%653) /* ty=Tensor[(15, 15, 7), float64] */;
    %666 = sigmoid(%656) /* ty=Tensor[(4, 12, 15), float64] */;
    %667 = @func_2025(%659, %660) /* ty=Tensor[(3, 3, 6), bool] */;
    %668 = @func_1260(%662) /* ty=Tensor[(11, 5, 5), float32] */;
    (%663, %664, %var_2282, meta[relay.Constant][54] /* ty=Tensor[(675), uint16] */, %665, meta[relay.Constant][55] /* ty=Tensor[(1575), float64] */, %666, %667, True /* ty=bool */, %var_2314, %668, %var_2322)
  };
  %669(%var_2327, %var_2328, %var_2329, %var_2330, %var_2331) /* ty=(Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */
}

def @func_11668() -> Tensor[(2, 6, 3), float32] {
  %670 = @func_10843() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %670.0
}

def @func_13039(%var_13037: Tensor[(360), float64]) -> (Tensor[(2, 6, 3), float32], Tensor[(6, 10, 6), uint32], Tensor[(60), float64], Tensor[(360), float64], Tensor[(5, 9, 2), float64], Tensor[(90), float64]) {
  @func_13036(%var_13037) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(6, 10, 6), uint32], Tensor[(60), float64], Tensor[(360), float64], Tensor[(5, 9, 2), float64], Tensor[(90), float64]) */
}

def @func_6247(%var_6245: Tensor[(3, 14, 12), float32]) -> Tensor[(3, 14, 12), float32] {
  @func_6244(%var_6245) /* ty=Tensor[(3, 14, 12), float32] */
}

def @func_2146(%var_2131: Tensor[(9, 11, 13), float32], %var_2132: Tensor[(9, 11, 13), float32]) -> Tensor[(9, 11, 13), float64] {
  %671 = cast(%var_2132, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
  %672 = shape_of(%var_2131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(%var_2131, dtype="float32") /* ty=Tensor[(9, 11, 13), float32] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %675 = divide(%673, %674) /* ty=Tensor[(9, 11, 13), float32] */;
  %676 = cast(%675, dtype="float64") /* ty=Tensor[(9, 11, 13), float64] */;
  acos(%676) /* ty=Tensor[(9, 11, 13), float64] */
}

def @func_11027(%var_11012: Tensor[(504), float32], %var_11023: Tensor[(1, 1568), int8]) -> (Tensor[(2, 6, 3), float32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(275), float32], Tensor[(1, 1568), int8], Tensor[(275, 1), float32]) {
  %677 = cast(%var_11012, dtype="float32") /* ty=Tensor[(504), float32] */;
  %678 = reshape(%677, newshape=[3, 14, 12]) /* ty=Tensor[(3, 14, 12), float32] */;
  %679 = cast(%var_11023, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %680 = cast(meta[relay.Constant][56] /* ty=Tensor[(275, 1), float32] */, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %681 = reshape(%679, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %682 = reshape(%680, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %683 = @func_10222(%681, %682) /* ty=(Tensor[(672), float64], Tensor[(1, 560), uint64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275), float32]) */;
  %684 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
  %685 = @func_6244(%678) /* ty=Tensor[(3, 14, 12), float32] */;
  %686 = %683.5;
  (%684, %685, %var_11012, %686, %var_11023, meta[relay.Constant][56] /* ty=Tensor[(275, 1), float32] */)
}

def @func_9469(%var_9459: Tensor[(11, 10, 5), uint32]) -> (Tensor[(11, 10, 5), uint32],) {
  %687 = cast(meta[relay.Constant][57] /* ty=Tensor[(11, 10, 5), uint32] */, dtype="uint32") /* ty=Tensor[(11, 10, 5), uint32] */;
  %688 = shape_of(%var_9459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%var_9459, dtype="uint32") /* ty=Tensor[(11, 10, 5), uint32] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %691 = bitwise_xor(%689, %690) /* ty=Tensor[(11, 10, 5), uint32] */;
  (%691,)
}

def @func_10264() -> (Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) {
  @func_10262() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) */
}

def @func_6121(%var_6119: int8, %var_6120: Tensor[(2, 16, 7), int8]) -> Tensor[(2, 16, 7), int8] {
  %694 = fn (%var_6106: int8, %var_6107: Tensor[(2, 16, 7), int8]) -> Tensor[(2, 16, 7), int8] {
    %692 = cast(%var_6106, dtype="int8") /* ty=int8 */;
    %693 = cast(%var_6107, dtype="int8") /* ty=Tensor[(2, 16, 7), int8] */;
    bitwise_xor(%692, %693) /* ty=Tensor[(2, 16, 7), int8] */
  };
  %694(%var_6119, %var_6120) /* ty=Tensor[(2, 16, 7), int8] */
}

def @func_12485(%var_12484: Tensor[(14, 5, 14), float32]) -> (Tensor[(14, 5, 14), float32],) {
  %697 = fn (%var_12471: Tensor[(14, 5, 14), float32]) -> (Tensor[(14, 5, 14), float32],) {
    %695 = cast(%var_12471, dtype="float32") /* ty=Tensor[(14, 5, 14), float32] */;
    %696 = cosh(%695) /* ty=Tensor[(14, 5, 14), float32] */;
    (%696,)
  };
  %697(%var_12484) /* ty=(Tensor[(14, 5, 14), float32],) */
}

def @func_7771(%var_7769: Tensor[(5, 2, 15), float64], %var_7770: Tensor[(55, 5), float32]) -> (Tensor[(5, 2, 15), float64], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(55, 5), float32]) {
  %706 = fn (%var_7750: Tensor[(5, 2, 15), float64], %var_7759: Tensor[(55, 5), float32]) -> (Tensor[(5, 2, 15), float64], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(55, 5), float32]) {
    %698 = cast(%var_7750, dtype="float64") /* ty=Tensor[(5, 2, 15), float64] */;
    %699 = cast(meta[relay.Constant][58] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
    %700 = cast(%var_7759, dtype="float32") /* ty=Tensor[(55, 5), float32] */;
    %701 = reshape(%699, newshape=[672]) /* ty=Tensor[(672), float64] */;
    %702 = reshape(%700, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %703 = @func_4295(%701, %702) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
    %704 = asinh(%698) /* ty=Tensor[(5, 2, 15), float64] */;
    %705 = %703.1;
    (%704, %705, meta[relay.Constant][58] /* ty=Tensor[(672), float64] */, %var_7759)
  };
  %706(%var_7769, %var_7770) /* ty=(Tensor[(5, 2, 15), float64], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(55, 5), float32]) */
}

def @func_10946(%var_10940: Tensor[(1950), int64], %var_10941: Tensor[(1, 275), float32], %var_10942: Tensor[(18), float32], %var_10943: Tensor[(720, 1), float64], %var_10944: Tensor[(6), float64], %var_10945: Tensor[(1, 54), bool]) -> (Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), float32], Tensor[(1950), int64], Tensor[(672, 1), int8], Tensor[(1350), int64], Tensor[(18), float32], Tensor[(1, 275), float64], Tensor[(6), float64], Tensor[(720, 1), float64], Tensor[(6), float64], Tensor[(1, 54), bool]) {
  @func_10938(%var_10940, %var_10941, %var_10942, %var_10943, %var_10944, %var_10945) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), float32], Tensor[(1950), int64], Tensor[(672, 1), int8], Tensor[(1350), int64], Tensor[(18), float32], Tensor[(1, 275), float64], Tensor[(6), float64], Tensor[(720, 1), float64], Tensor[(6), float64], Tensor[(1, 54), bool]) */
}

def @func_13099(%var_13089: Tensor[(1287), float32], %var_13095: Tensor[(560), uint64], %var_13096: Tensor[(1568), int8], %var_13097: Tensor[(275, 1), float32]) -> (Tensor[(2, 6, 3), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(14, 6, 8), float64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275, 1), float32]) {
  %707 = @func_12240() /* ty=(Tensor[(2, 6, 3), float64],) */;
  %708 = cast(%var_13089, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %709 = reshape(%708, newshape=[1287]) /* ty=Tensor[(1287), float32] */;
  %710 = @func_9669(%709) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(1287), float32], Tensor[(9, 11, 13), float64]) */;
  %711 = cast(meta[relay.Constant][59] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %712 = cast(meta[relay.Constant][59] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %713 = cast(%var_13095, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %714 = cast(%var_13096, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %715 = cast(%var_13097, dtype="float32") /* ty=Tensor[(275, 1), float32] */;
  %716 = reshape(%711, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
  %717 = reshape(%712, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
  %718 = reshape(%713, newshape=[1, 560]) /* ty=Tensor[(1, 560), uint64] */;
  %719 = reshape(%714, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %720 = reshape(%715, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %721 = @func_4072(%716, %717, %718, %719, %720) /* ty=(Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) */;
  %722 = %707.0;
  %723 = %710.2;
  %724 = %721.1;
  (%722, %723, %var_13089, %724, meta[relay.Constant][59] /* ty=Tensor[(288), float32] */, %var_13095, %var_13096, %var_13097)
}

def @func_12199() -> (Tensor[(275), float32],) {
  @func_12197() /* ty=(Tensor[(275), float32],) */
}

def @func_2856(%var_2854: Tensor[(5, 9, 2), float64]) -> Tensor[(5, 9, 2), float64] {
  @func_2853(%var_2854) /* ty=Tensor[(5, 9, 2), float64] */
}

def @func_12141(%var_12066: Tensor[(16, 7, 16), uint32], %var_12067: Tensor[(16, 7, 16), uint32]) -> (Tensor[(16, 7, 16), uint32], Tensor[(2, 6, 3), float32], Tensor[(16, 7, 16), float32]) {
  %725 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 7, 16), uint32] */, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %726 = shape_of(%var_12066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_12066, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %729 = logical_or(%727, %728) /* ty=Tensor[(16, 7, 16), bool] */;
  %730 = cast(%var_12067, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %731 = shape_of(%var_12066, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%var_12066, dtype="bool") /* ty=Tensor[(16, 7, 16), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = not_equal(%732, %733) /* ty=Tensor[(16, 7, 16), bool] */;
  %735 = cast(%734, dtype="uint32") /* ty=Tensor[(16, 7, 16), uint32] */;
  %736 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%729, dtype="uint32") /* ty=Tensor[(16, 7, 16), uint32] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %739 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 7, 16), uint32] */, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %740 = asin(%739) /* ty=Tensor[(16, 7, 16), float64] */;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(16, 7, 16), float64] */;
  %742 = tan(%741) /* ty=Tensor[(16, 7, 16), float64] */;
  %743 = cast(%742, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
  %744 = shape_of(%740, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%740, dtype="float32") /* ty=Tensor[(16, 7, 16), float32] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %747 = maximum(%737, %738) /* ty=Tensor[(16, 7, 16), uint32] */;
  %748 = @func_11617() /* ty=Tensor[(2, 6, 3), float32] */;
  %749 = mod(%745, %746) /* ty=Tensor[(16, 7, 16), float32] */;
  (%747, %748, %749)
}

def @func_11199(%var_11197: Tensor[(16, 12, 3), float64]) -> (Tensor[(16, 12, 3), float64],) {
  @func_11196(%var_11197) /* ty=(Tensor[(16, 12, 3), float64],) */
}

def @func_12546() -> Tensor[(2, 6, 3), float64] {
  %751 = fn () -> Tensor[(2, 6, 3), float64] {
    %750 = @func_12240() /* ty=(Tensor[(2, 6, 3), float64],) */;
    %750.0
  };
  %751() /* ty=Tensor[(2, 6, 3), float64] */
}

def @func_11361(%var_11360: Tensor[(2, 6, 3), float32]) -> (Tensor[(2, 6, 3), bool], Tensor[(11, 10, 5), uint32]) {
  %760 = fn (%var_11342: Tensor[(2, 6, 3), float32]) -> (Tensor[(2, 6, 3), bool], Tensor[(11, 10, 5), uint32]) {
    %752 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
    %753 = cast(%var_11342, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
    %754 = shape_of(%752, dtype="int32") /* ty=Tensor[(3), int32] */;
    %755 = cast(%752, dtype="bool") /* ty=Tensor[(2, 6, 3), bool] */;
    %756 = dyn.reshape(%753, %754, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %757 = @func_10262() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(11, 10, 5), uint32], Tensor[(550), float64]) */;
    %758 = less(%755, %756) /* ty=Tensor[(2, 6, 3), bool] */;
    %759 = %757.1;
    (%758, %759)
  };
  %760(%var_11360) /* ty=(Tensor[(2, 6, 3), bool], Tensor[(11, 10, 5), uint32]) */
}

def @func_8329(%var_8274: Tensor[(13, 6, 10), uint16], %var_8275: Tensor[(13, 6, 10), uint16]) -> (Tensor[(13, 6, 10), uint16], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(16, 9, 15), float64], Tensor[(2160), float64], Tensor[(18), float64], Tensor[(1, 9, 2), float32]) {
  %761 = cast(%var_8275, dtype="uint16") /* ty=Tensor[(13, 6, 10), uint16] */;
  %762 = shape_of(%var_8274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%var_8274, dtype="uint16") /* ty=Tensor[(13, 6, 10), uint16] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %765 = cast(meta[relay.Constant][61] /* ty=Tensor[(504), float32] */, dtype="float32") /* ty=Tensor[(504), float32] */;
  %766 = reshape(%765, newshape=[3, 14, 12]) /* ty=Tensor[(3, 14, 12), float32] */;
  %767 = cast(meta[relay.Constant][62] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %768 = cast(meta[relay.Constant][62] /* ty=Tensor[(2160), float64] */, dtype="float64") /* ty=Tensor[(2160), float64] */;
  %769 = reshape(%767, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %770 = reshape(%768, newshape=[16, 9, 15]) /* ty=Tensor[(16, 9, 15), float64] */;
  %771 = @func_7547(%769, %770) /* ty=(Tensor[(16, 9, 15), float64], Tensor[(16, 9, 15), float64]) */;
  %772 = cast(meta[relay.Constant][63] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %773 = reshape(%772, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %774 = @func_1801(%773) /* ty=Tensor[(1, 9, 2), float32] */;
  %775 = cast(%774, dtype="float64") /* ty=Tensor[(1, 9, 2), float64] */;
  %776 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(18), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %777 = cast(meta[relay.Constant][63] /* ty=Tensor[(18), float32] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %778 = dyn.reshape(%775, %776, newshape=[]) /* ty=Tensor[(?), float64] */;
  %779 = cast(meta[relay.Constant][63] /* ty=Tensor[(18), float32] */, dtype="float32") /* ty=Tensor[(18), float32] */;
  %780 = reshape(%779, newshape=[1, 9, 2]) /* ty=Tensor[(1, 9, 2), float32] */;
  %781 = right_shift(%763, %764) /* ty=Tensor[(13, 6, 10), uint16] */;
  %782 = @func_6244(%766) /* ty=Tensor[(3, 14, 12), float32] */;
  %783 = %771.0;
  %784 = power(%777, %778) /* ty=Tensor[(18), float64] */;
  %785 = @func_1801(%780) /* ty=Tensor[(1, 9, 2), float32] */;
  (%781, %782, meta[relay.Constant][61] /* ty=Tensor[(504), float32] */, %783, meta[relay.Constant][62] /* ty=Tensor[(2160), float64] */, %784, %785)
}

def @func_6027(%var_6004: float32, %var_6005: Tensor[(11, 16, 7), float32], %var_6014: Tensor[(6), float64], %var_6020: Tensor[(11, 117), float32]) -> (Tensor[(11, 16, 7), float32], Tensor[(6), float64], Tensor[(975), float32], Tensor[(6), float64], Tensor[(9, 11, 13), float64], Tensor[(11, 117), float32], Tensor[(11, 16, 7), float32]) {
  %786 = cast(%var_6004, dtype="float32") /* ty=float32 */;
  %787 = cast(%var_6005, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %788 = cast(meta[relay.Constant][64] /* ty=Tensor[(975), float32] */, dtype="float32") /* ty=Tensor[(975), float32] */;
  %789 = cast(%var_6014, dtype="float64") /* ty=Tensor[(6), float64] */;
  %790 = reshape(%788, newshape=[15, 13, 5]) /* ty=Tensor[(15, 13, 5), float32] */;
  %791 = reshape(%789, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %792 = @func_4948(%790, %791) /* ty=(Tensor[(15, 13, 5), float32], uint16, Tensor[(6), float64], Tensor[(675), uint16]) */;
  %793 = cast(%var_6020, dtype="float32") /* ty=Tensor[(11, 117), float32] */;
  %794 = cast(%var_6020, dtype="float32") /* ty=Tensor[(11, 117), float32] */;
  %795 = reshape(%793, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %796 = reshape(%794, newshape=[9, 11, 13]) /* ty=Tensor[(9, 11, 13), float32] */;
  %797 = cast(%var_6005, dtype="float32") /* ty=Tensor[(11, 16, 7), float32] */;
  %798 = floor_divide(%786, %787) /* ty=Tensor[(11, 16, 7), float32] */;
  %799 = %792.2;
  %800 = @func_2146(%795, %796) /* ty=Tensor[(9, 11, 13), float64] */;
  %801 = atan(%797) /* ty=Tensor[(11, 16, 7), float32] */;
  (%798, %799, meta[relay.Constant][64] /* ty=Tensor[(975), float32] */, %var_6014, %800, %var_6020, %801)
}

def @func_603(%var_519: Tensor[(1, 6, 1), float64], %var_569: Tensor[(225, 3), uint16]) -> (Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) {
  %802 = cast(%var_519, dtype="float64") /* ty=Tensor[(1, 6, 1), float64] */;
  %803 = log10(%802) /* ty=Tensor[(1, 6, 1), float64] */;
  %804 = cast(%803, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %805 = shape_of(%var_519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %806 = cast(%var_519, dtype="int64") /* ty=Tensor[(1, 6, 1), int64] */;
  %807 = dyn.reshape(%804, %805, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %808 = bitwise_xor(%806, %807) /* ty=Tensor[(?, 6, ?), int64] */;
  %809 = cast(%var_519, dtype="uint32") /* ty=Tensor[(1, 6, 1), uint32] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %811 = cast(%808, dtype="uint32") /* ty=Tensor[(?, 6, ?), uint32] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %813 = add(%811, %812) /* ty=Tensor[(?, 6, ?), uint32] */;
  %814 = cast(%813, dtype="int8") /* ty=Tensor[(?, 6, ?), int8] */;
  %815 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%808, dtype="int8") /* ty=Tensor[(?, 6, ?), int8] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %818 = cast(meta[relay.Constant][65] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %819 = cast(%var_569, dtype="uint16") /* ty=Tensor[(225, 3), uint16] */;
  %820 = reshape(%818, newshape=[]) /* ty=uint16 */;
  %821 = reshape(%819, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %822 = @func_440(%820, %821) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %823 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %824 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %825 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %826 = reshape(%823, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %827 = reshape(%824, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %828 = reshape(%825, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %829 = @func_500(%826, %827, %828) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %830 = cast(%803, dtype="float64") /* ty=Tensor[(1, 6, 1), float64] */;
  %831 = shape_of(%var_519, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_519, dtype="float64") /* ty=Tensor[(1, 6, 1), float64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %834 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %835 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %836 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, dtype="int8") /* ty=Tensor[(1, 1568), int8] */;
  %837 = reshape(%834, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %838 = reshape(%835, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %839 = reshape(%836, newshape=[14, 16, 7]) /* ty=Tensor[(14, 16, 7), int8] */;
  %840 = @func_500(%837, %838, %839) /* ty=(Tensor[(14, 16, 7), int8], Tensor[(14, 16, 7), int16], Tensor[(15, 3, 15), bool], uint16, Tensor[(675), uint16]) */;
  %841 = cast(meta[relay.Constant][65] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %842 = %822.0;
  %843 = cast(%842, dtype="uint16") /* ty=Tensor[(15, 3, 15), uint16] */;
  %844 = reshape(%841, newshape=[]) /* ty=uint16 */;
  %845 = reshape(%843, newshape=[15, 3, 15]) /* ty=Tensor[(15, 3, 15), uint16] */;
  %846 = @func_440(%844, %845) /* ty=(Tensor[(15, 3, 15), bool],) */;
  %847 = subtract(%816, %817) /* ty=Tensor[(?, 6, ?), int8] */;
  %848 = %829.3;
  %849 = mod(%832, %833) /* ty=Tensor[(?, 6, ?), float64] */;
  %850 = %840.0;
  %851 = %846.0;
  (%847, %842, meta[relay.Constant][65] /* ty=uint16 */, %var_569, %848, meta[relay.Constant][66] /* ty=Tensor[(1, 1568), int8] */, %849, %850, %851)
}

def @func_9953() -> (Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) {
  %852 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %853 = cast(meta[relay.Constant][67] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %854 = cast(meta[relay.Constant][67] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %855 = reshape(%853, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %856 = reshape(%854, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), float64] */;
  %857 = @func_3399(%855, %856) /* ty=(Tensor[(14, 6, 8), float64], Tensor[(14, 6, 8), uint16]) */;
  %858 = %857.1;
  %859 = cast(%858, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %860 = cast(meta[relay.Constant][68] /* ty=Tensor[(275), float32] */, dtype="float32") /* ty=Tensor[(275), float32] */;
  %861 = reshape(%859, newshape=[672]) /* ty=Tensor[(672), float64] */;
  %862 = reshape(%860, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %863 = @func_4295(%861, %862) /* ty=(Tensor[(4, 4, 14), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(9, 11, 13), float64], Tensor[(1287), float32], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %864 = %852.0;
  %865 = %863.4;
  (%864, %858, meta[relay.Constant][67] /* ty=Tensor[(672), float64] */, %865, meta[relay.Constant][68] /* ty=Tensor[(275), float32] */)
}

def @func_9553() -> (Tensor[(2, 6, 3), float32],) {
  %866 = cast(meta[relay.Constant][70] /* ty=Tensor[(2, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %867 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(2, 6, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(meta[relay.Constant][69] /* ty=Tensor[(2, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %870 = floor_mod(%868, %869) /* ty=Tensor[(2, 6, 3), float32] */;
  %871 = cast(meta[relay.Constant][70] /* ty=Tensor[(2, 6, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %872 = shape_of(%870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %873 = cast(%870, dtype="float32") /* ty=Tensor[(2, 6, 3), float32] */;
  %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %875 = power(%873, %874) /* ty=Tensor[(2, 6, 3), float32] */;
  (%875,)
}

def @func_5456(%var_5454: Tensor[(6, 7, 13), float32]) -> Tensor[(6, 7, 13), float32] {
  @func_5453(%var_5454) /* ty=Tensor[(6, 7, 13), float32] */
}

def @func_11196(%var_11190: Tensor[(16, 12, 3), float64]) -> (Tensor[(16, 12, 3), float64],) {
  %876 = cast(%var_11190, dtype="float64") /* ty=Tensor[(16, 12, 3), float64] */;
  %877 = cosh(%876) /* ty=Tensor[(16, 12, 3), float64] */;
  (%877,)
}

def @func_11031(%var_11029: Tensor[(504), float32], %var_11030: Tensor[(1, 1568), int8]) -> (Tensor[(2, 6, 3), float32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(275), float32], Tensor[(1, 1568), int8], Tensor[(275, 1), float32]) {
  @func_11027(%var_11029, %var_11030) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(275), float32], Tensor[(1, 1568), int8], Tensor[(275, 1), float32]) */
}

def @func_10168(%var_10144: int8, %var_10145: Tensor[(224), int8], %var_10149: Tensor[(14, 6, 8), uint16], %var_10157: Tensor[(560), uint64], %var_10158: Tensor[(1568), int8]) -> (Tensor[(2, 16, 7), int8], int8, Tensor[(224), int8], Tensor[(14, 6, 8), float64], Tensor[(15, 3, 15), bool], Tensor[(560), uint64], Tensor[(1568), int8]) {
  %878 = cast(%var_10144, dtype="int8") /* ty=int8 */;
  %879 = cast(%var_10145, dtype="int8") /* ty=Tensor[(224), int8] */;
  %880 = reshape(%878, newshape=[]) /* ty=int8 */;
  %881 = reshape(%879, newshape=[2, 16, 7]) /* ty=Tensor[(2, 16, 7), int8] */;
  %882 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
  %883 = %882.1;
  %884 = cast(%var_10149, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="float64") /* ty=Tensor[(14, 6, 8), float64] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %888 = cast(%var_10157, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %889 = cast(%var_10158, dtype="int8") /* ty=Tensor[(1568), int8] */;
  %890 = reshape(%888, newshape=[10, 8, 7]) /* ty=Tensor[(10, 8, 7), uint64] */;
  %891 = reshape(%889, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
  %892 = @func_1428(%890, %891) /* ty=(Tensor[(10, 8, 7), uint64], Tensor[(15, 3, 15), bool], Tensor[(1568), int8]) */;
  %893 = @func_6118(%880, %881) /* ty=Tensor[(2, 16, 7), int8] */;
  %894 = floor_divide(%886, %887) /* ty=Tensor[(14, 6, 8), float64] */;
  %895 = %892.1;
  (%893, %var_10144, %var_10145, %894, %895, %var_10157, %var_10158)
}

def @func_12926(%var_12924: uint64, %var_12925: Tensor[(1, 16, 5), uint64]) -> (Tensor[(1, 16, 5), uint64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
  %902 = fn (%var_12912: uint64, %var_12913: Tensor[(1, 16, 5), uint64]) -> (Tensor[(1, 16, 5), uint64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
    %896 = cast(%var_12912, dtype="uint64") /* ty=uint64 */;
    %897 = cast(%var_12913, dtype="uint64") /* ty=Tensor[(1, 16, 5), uint64] */;
    %898 = cast(meta[relay.Constant][71] /* ty=Tensor[(910), float32] */, dtype="float32") /* ty=Tensor[(910), float32] */;
    %899 = reshape(%898, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
    %900 = bitwise_xor(%896, %897) /* ty=Tensor[(1, 16, 5), uint64] */;
    %901 = @func_5561(%899) /* ty=Tensor[(7, 13, 10), float32] */;
    (%900, %901, meta[relay.Constant][71] /* ty=Tensor[(910), float32] */)
  };
  %902(%var_12924, %var_12925) /* ty=(Tensor[(1, 16, 5), uint64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) */
}

def @func_12197() -> (Tensor[(275), float32],) {
  %903 = @func_11928() /* ty=Tensor[(275), float32] */;
  (%903,)
}

def @func_2029(%var_2027: bool, %var_2028: Tensor[(3, 3, 6), bool]) -> Tensor[(3, 3, 6), bool] {
  @func_2025(%var_2027, %var_2028) /* ty=Tensor[(3, 3, 6), bool] */
}

def @func_607(%var_605: Tensor[(1, 6, 1), float64], %var_606: Tensor[(225, 3), uint16]) -> (Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) {
  @func_603(%var_605, %var_606) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */
}

def @func_11723(%var_11721: Tensor[(16, 6), int32]) -> (Tensor[(3, 16, 2), int32], Tensor[(16, 6), int32], Tensor[(2, 6, 3), float32]) {
  @func_11720(%var_11721) /* ty=(Tensor[(3, 16, 2), int32], Tensor[(16, 6), int32], Tensor[(2, 6, 3), float32]) */
}

def @func_12884() -> (Tensor[(2, 6, 3), float32],) {
  %906 = fn () -> (Tensor[(2, 6, 3), float32],) {
    %904 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %905 = %904.0;
    (%905,)
  };
  %906() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_12735(%var_12733: Tensor[(7, 2, 14), int16], %var_12734: Tensor[(504), float32]) -> (Tensor[(7, 2, 14), bool], Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(1568), int8], Tensor[(16, 12, 3), float64], Tensor[(576), float64]) {
  @func_12731(%var_12733, %var_12734) /* ty=(Tensor[(7, 2, 14), bool], Tensor[(3, 16, 2), int32], Tensor[(96), int32], Tensor[(3, 14, 12), float32], Tensor[(504), float32], Tensor[(1568), int8], Tensor[(16, 12, 3), float64], Tensor[(576), float64]) */
}

def @func_12145(%var_12143: Tensor[(16, 7, 16), uint32], %var_12144: Tensor[(16, 7, 16), uint32]) -> (Tensor[(16, 7, 16), uint32], Tensor[(2, 6, 3), float32], Tensor[(16, 7, 16), float32]) {
  @func_12141(%var_12143, %var_12144) /* ty=(Tensor[(16, 7, 16), uint32], Tensor[(2, 6, 3), float32], Tensor[(16, 7, 16), float32]) */
}

def @func_6244(%var_6234: Tensor[(3, 14, 12), float32]) -> Tensor[(3, 14, 12), float32] {
  %907 = cast(%var_6234, dtype="float32") /* ty=Tensor[(3, 14, 12), float32] */;
  acosh(%907) /* ty=Tensor[(3, 14, 12), float32] */
}

def @func_10729() -> (Tensor[(2, 6, 3), float32],) {
  %908 = @func_10065() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %909 = %908.0;
  (%909,)
}

def @func_10325(%var_10324: Tensor[(910), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
  %914 = fn (%var_10306: Tensor[(910), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
    %910 = cast(%var_10306, dtype="float32") /* ty=Tensor[(910), float32] */;
    %911 = reshape(%910, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
    %912 = @func_10298() /* ty=Tensor[(2, 6, 3), float32] */;
    %913 = @func_5561(%911) /* ty=Tensor[(7, 13, 10), float32] */;
    (%912, %913, %var_10306)
  };
  %914(%var_10324) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) */
}

def @func_11682(%var_11680: Tensor[(1, 9, 12), int64], %var_11681: Tensor[(13, 9, 12), int64]) -> (Tensor[(13, 9, 12), bool],) {
  @func_11678(%var_11680, %var_11681) /* ty=(Tensor[(13, 9, 12), bool],) */
}

def @func_10938(%var_10899: Tensor[(1950), int64], %var_10902: Tensor[(1, 275), float32], %var_10903: Tensor[(18), float32], %var_10920: Tensor[(720, 1), float64], %var_10921: Tensor[(6), float64], %var_10922: Tensor[(1, 54), bool]) -> (Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), float32], Tensor[(1950), int64], Tensor[(672, 1), int8], Tensor[(1350), int64], Tensor[(18), float32], Tensor[(1, 275), float64], Tensor[(6), float64], Tensor[(720, 1), float64], Tensor[(6), float64], Tensor[(1, 54), bool]) {
  %915 = @func_10065() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %916 = cast(%var_10899, dtype="int64") /* ty=Tensor[(1950), int64] */;
  %917 = cast(meta[relay.Constant][72] /* ty=Tensor[(672, 1), int8] */, dtype="int8") /* ty=Tensor[(672, 1), int8] */;
  %918 = cast(meta[relay.Constant][73] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
  %919 = cast(%var_10902, dtype="float32") /* ty=Tensor[(1, 275), float32] */;
  %920 = cast(%var_10899, dtype="float32") /* ty=Tensor[(1950), float32] */;
  %921 = cast(%var_10903, dtype="float32") /* ty=Tensor[(18), float32] */;
  %922 = cast(%var_10899, dtype="float64") /* ty=Tensor[(1950), float64] */;
  %923 = reshape(%916, newshape=[1950]) /* ty=Tensor[(1950), int64] */;
  %924 = reshape(%917, newshape=[672]) /* ty=Tensor[(672), int8] */;
  %925 = reshape(%918, newshape=[1350]) /* ty=Tensor[(1350), int64] */;
  %926 = reshape(%919, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %927 = reshape(%920, newshape=[1950]) /* ty=Tensor[(1950), float32] */;
  %928 = reshape(%921, newshape=[18]) /* ty=Tensor[(18), float32] */;
  %929 = reshape(%922, newshape=[1950]) /* ty=Tensor[(1950), float64] */;
  %930 = @func_10038(%923, %924, %925, %926, %927, %928, %929) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(13, 15, 10), bool], Tensor[(672), int8], uint16, Tensor[(6), float64], Tensor[(15, 6, 15), float32], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(45, 2), float64], Tensor[(675), uint16], Tensor[(1, 975), float32], Tensor[(15, 6, 15), int64], Tensor[(1287), float32], Tensor[(275), float32], Tensor[(1, 9, 2), float32], Tensor[(18), float32], Tensor[(1950), uint16], Tensor[(1950), float32]) */;
  %931 = cast(%var_10902, dtype="float64") /* ty=Tensor[(1, 275), float64] */;
  %932 = cast(%var_10920, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %933 = cast(%var_10920, dtype="float64") /* ty=Tensor[(720, 1), float64] */;
  %934 = cast(%var_10921, dtype="float64") /* ty=Tensor[(6), float64] */;
  %935 = cast(%var_10922, dtype="bool") /* ty=Tensor[(1, 54), bool] */;
  %936 = cast(%var_10902, dtype="float32") /* ty=Tensor[(1, 275), float32] */;
  %937 = reshape(%932, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %938 = reshape(%933, newshape=[4, 12, 15]) /* ty=Tensor[(4, 12, 15), float64] */;
  %939 = reshape(%934, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %940 = reshape(%935, newshape=[54]) /* ty=Tensor[(54), bool] */;
  %941 = reshape(%936, newshape=[275]) /* ty=Tensor[(275), float32] */;
  %942 = @func_2326(%937, %938, %939, %940, %941) /* ty=(Tensor[(4, 12, 15), uint8], Tensor[(14, 16, 7), int8], Tensor[(6), float64], Tensor[(675), uint16], Tensor[(15, 15, 7), float64], Tensor[(1575), float64], Tensor[(4, 12, 15), float64], Tensor[(3, 3, 6), bool], bool, Tensor[(54), bool], Tensor[(11, 5, 5), float32], Tensor[(275), float32]) */;
  %943 = %915.0;
  %944 = %930.5;
  %945 = asin(%931) /* ty=Tensor[(1, 275), float64] */;
  %946 = %942.2;
  (%943, %944, %var_10899, meta[relay.Constant][72] /* ty=Tensor[(672, 1), int8] */, meta[relay.Constant][73] /* ty=Tensor[(1350), int64] */, %var_10903, %945, %946, %var_10920, %var_10921, %var_10922)
}

def @func_12242() -> (Tensor[(2, 6, 3), float64],) {
  @func_12240() /* ty=(Tensor[(2, 6, 3), float64],) */
}

def @func_11298(%var_11265: Tensor[(56, 22), float32], %var_11267: Tensor[(1287), float32], %var_11290: Tensor[(675), uint16]) -> (Tensor[(2, 6, 3), float32], Tensor[(16, 12, 3), float64], Tensor[(576), float64], Tensor[(975), float32], float32, Tensor[(56, 22), float32], Tensor[(6), float64], Tensor[(1287), float32], Tensor[(2, 6, 3), float32], uint16, Tensor[(675), uint16]) {
  %947 = @func_10729() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %948 = cast(meta[relay.Constant][74] /* ty=Tensor[(576), float64] */, dtype="float64") /* ty=Tensor[(576), float64] */;
  %949 = reshape(%948, newshape=[16, 12, 3]) /* ty=Tensor[(16, 12, 3), float64] */;
  %950 = @func_11196(%949) /* ty=(Tensor[(16, 12, 3), float64],) */;
  %951 = cast(9.02863f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %952 = cast(%var_11265, dtype="float32") /* ty=Tensor[(56, 22), float32] */;
  %953 = cast(meta[relay.Constant][75] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %954 = cast(%var_11267, dtype="float32") /* ty=Tensor[(1287), float32] */;
  %955 = reshape(%951, newshape=[]) /* ty=float32 */;
  %956 = reshape(%952, newshape=[11, 16, 7]) /* ty=Tensor[(11, 16, 7), float32] */;
  %957 = reshape(%953, newshape=[6]) /* ty=Tensor[(6), float64] */;
  %958 = reshape(%954, newshape=[11, 117]) /* ty=Tensor[(11, 117), float32] */;
  %959 = @func_6027(%955, %956, %957, %958) /* ty=(Tensor[(11, 16, 7), float32], Tensor[(6), float64], Tensor[(975), float32], Tensor[(6), float64], Tensor[(9, 11, 13), float64], Tensor[(11, 117), float32], Tensor[(11, 16, 7), float32]) */;
  %960 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %961 = cast(meta[relay.Constant][75] /* ty=Tensor[(6), float64] */, dtype="float64") /* ty=Tensor[(6), float64] */;
  %962 = cast(%var_11290, dtype="uint16") /* ty=Tensor[(675), uint16] */;
  %963 = reshape(%961, newshape=[1, 6, 1]) /* ty=Tensor[(1, 6, 1), float64] */;
  %964 = reshape(%962, newshape=[225, 3]) /* ty=Tensor[(225, 3), uint16] */;
  %965 = @func_603(%963, %964) /* ty=(Tensor[(?, 6, ?), int8], Tensor[(15, 3, 15), bool], uint16, Tensor[(225, 3), uint16], uint16, Tensor[(1, 1568), int8], Tensor[(?, 6, ?), float64], Tensor[(14, 16, 7), int8], Tensor[(15, 3, 15), bool]) */;
  %966 = %947.0;
  %967 = %950.0;
  %968 = %959.2;
  %969 = %960.0;
  %970 = %965.2;
  (%966, %967, meta[relay.Constant][74] /* ty=Tensor[(576), float64] */, %968, 9.02863f /* ty=float32 */, %var_11265, meta[relay.Constant][75] /* ty=Tensor[(6), float64] */, %var_11267, %969, %970, %var_11290)
}

def @func_9853() -> Tensor[(2, 6, 3), float32] {
  %971 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
  %971.0
}

def @func_11962() -> (Tensor[(2, 6, 3), float32],) {
  @func_11960() /* ty=(Tensor[(2, 6, 3), float32],) */
}

def @func_10299() -> Tensor[(2, 6, 3), float32] {
  %973 = fn () -> Tensor[(2, 6, 3), float32] {
    %972 = @func_9553() /* ty=(Tensor[(2, 6, 3), float32],) */;
    %972.0
  };
  %973() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_11619() -> Tensor[(2, 6, 3), float32] {
  @func_11617() /* ty=Tensor[(2, 6, 3), float32] */
}

def @func_10225(%var_10223: Tensor[(1568), int8], %var_10224: Tensor[(275), float32]) -> (Tensor[(672), float64], Tensor[(1, 560), uint64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275), float32]) {
  %988 = fn (%var_10213: Tensor[(1568), int8], %var_10214: Tensor[(275), float32]) -> (Tensor[(672), float64], Tensor[(1, 560), uint64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275), float32]) {
    %974 = @func_9953() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(14, 6, 8), uint16], Tensor[(672), float64], Tensor[(1287), float32], Tensor[(275), float32]) */;
    %975 = cast(meta[relay.Constant][76] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %976 = cast(meta[relay.Constant][76] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
    %977 = cast(meta[relay.Constant][77] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %978 = cast(%var_10213, dtype="int8") /* ty=Tensor[(1568), int8] */;
    %979 = cast(%var_10214, dtype="float32") /* ty=Tensor[(275), float32] */;
    %980 = reshape(%975, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
    %981 = reshape(%976, newshape=[9, 4, 8]) /* ty=Tensor[(9, 4, 8), float32] */;
    %982 = reshape(%977, newshape=[1, 560]) /* ty=Tensor[(1, 560), uint64] */;
    %983 = reshape(%978, newshape=[1568]) /* ty=Tensor[(1568), int8] */;
    %984 = reshape(%979, newshape=[275]) /* ty=Tensor[(275), float32] */;
    %985 = @func_4072(%980, %981, %982, %983, %984) /* ty=(Tensor[(9, 4, 8), float32], Tensor[(14, 6, 8), float64], Tensor[(672), float64], Tensor[(1568), int8], Tensor[(1, 560), uint64], Tensor[(1568), int8], Tensor[(11, 5, 5), float32], Tensor[(720), float64], Tensor[(6), float64], Tensor[(54), bool], Tensor[(275), float32], Tensor[(9, 4, 8), bool]) */;
    %986 = %974.2;
    %987 = %985.4;
    (%986, %987, meta[relay.Constant][76] /* ty=Tensor[(288), float32] */, meta[relay.Constant][77] /* ty=Tensor[(560), uint64] */, %var_10213, %var_10214)
  };
  %988(%var_10223, %var_10224) /* ty=(Tensor[(672), float64], Tensor[(1, 560), uint64], Tensor[(288), float32], Tensor[(560), uint64], Tensor[(1568), int8], Tensor[(275), float32]) */
}

def @func_11565(%var_11562: Tensor[(672), int8], %var_11563: uint16, %var_11564: Tensor[(910), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(6, 14, 8), int8], Tensor[(672), int8], uint16, Tensor[(675), uint16], Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), int64], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
  %1014 = fn (%var_11519: Tensor[(672), int8], %var_11520: uint16, %var_11557: Tensor[(910), float32]) -> (Tensor[(2, 6, 3), float32], Tensor[(6, 14, 8), int8], Tensor[(672), int8], uint16, Tensor[(675), uint16], Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), int64], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) {
    %989 = @func_10657() /* ty=(Tensor[(2, 6, 3), float32], Tensor[(3, 16, 2), int32], Tensor[(1, 96), int32]) */;
    %990 = cast(%var_11519, dtype="int8") /* ty=Tensor[(672), int8] */;
    %991 = cast(%var_11519, dtype="int8") /* ty=Tensor[(672), int8] */;
    %992 = cast(%var_11520, dtype="uint16") /* ty=uint16 */;
    %993 = cast(meta[relay.Constant][78] /* ty=Tensor[(675), uint16] */, dtype="uint16") /* ty=Tensor[(675), uint16] */;
    %994 = reshape(%990, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
    %995 = reshape(%991, newshape=[6, 14, 8]) /* ty=Tensor[(6, 14, 8), int8] */;
    %996 = reshape(%992, newshape=[]) /* ty=uint16 */;
    %997 = reshape(%993, newshape=[675]) /* ty=Tensor[(675), uint16] */;
    %998 = @func_813(%994, %995, %996, %997) /* ty=(Tensor[(6, 14, 8), int8], Tensor[(675), uint16], Tensor[(12, 156), uint32], uint16, Tensor[(675), uint16]) */;
    %999 = cast(%var_11520, dtype="int64") /* ty=int64 */;
    %1000 = cast(meta[relay.Constant][79] /* ty=Tensor[(1350), int64] */, dtype="int64") /* ty=Tensor[(1350), int64] */;
    %1001 = reshape(%999, newshape=[]) /* ty=int64 */;
    %1002 = reshape(%1000, newshape=[15, 6, 15]) /* ty=Tensor[(15, 6, 15), int64] */;
    %1003 = @func_5509(%1001, %1002) /* ty=(Tensor[(15, 6, 15), int64], Tensor[(15, 6, 15), float32]) */;
    %1004 = cast(meta[relay.Constant][80] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
    %1005 = reshape(%1004, newshape=[5, 9, 2]) /* ty=Tensor[(5, 9, 2), float64] */;
    %1006 = cast(%var_11557, dtype="float32") /* ty=Tensor[(910), float32] */;
    %1007 = reshape(%1006, newshape=[7, 13, 10]) /* ty=Tensor[(7, 13, 10), float32] */;
    %1008 = %989.0;
    %1009 = %998.0;
    %1010 = @func_9853() /* ty=Tensor[(2, 6, 3), float32] */;
    %1011 = %1003.0;
    %1012 = @func_2853(%1005) /* ty=Tensor[(5, 9, 2), float64] */;
    %1013 = @func_5561(%1007) /* ty=Tensor[(7, 13, 10), float32] */;
    (%1008, %1009, %var_11519, %var_11520, meta[relay.Constant][78] /* ty=Tensor[(675), uint16] */, %1010, %1011, meta[relay.Constant][79] /* ty=Tensor[(1350), int64] */, %1012, meta[relay.Constant][80] /* ty=Tensor[(90), float64] */, %1013, %var_11557)
  };
  %1014(%var_11562, %var_11563, %var_11564) /* ty=(Tensor[(2, 6, 3), float32], Tensor[(6, 14, 8), int8], Tensor[(672), int8], uint16, Tensor[(675), uint16], Tensor[(2, 6, 3), float32], Tensor[(15, 6, 15), int64], Tensor[(1350), int64], Tensor[(5, 9, 2), float64], Tensor[(90), float64], Tensor[(7, 13, 10), float32], Tensor[(910), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen668/build/output.py", line 2135, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:48:02] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

