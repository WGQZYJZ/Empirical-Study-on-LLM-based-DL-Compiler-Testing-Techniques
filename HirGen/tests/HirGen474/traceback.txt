==========mod==========
#[version = "0.0.5"]
def @func_1105(%var_1100: Tensor[(16, 14, 5), float32], %var_1101: Tensor[(16, 14, 5), float32]) -> Tensor[(16, 14, 5), float32] {
  %0 = cast(%var_1101, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
  %1 = shape_of(%var_1100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_1100, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%2, %3) /* ty=Tensor[(16, 14, 5), float32] */
}

def @func_7874() -> (Tensor[(1120), float32],) {
  %4 = @func_6289() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32]) */;
  %5 = %4.1;
  (%5,)
}

def @func_5200() -> (Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) {
  %6 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %7 = cast(%6, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %8 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %9 = sqrt(%7) /* ty=Tensor[(1120), float64] */;
  %10 = @func_5076() /* ty=Tensor[(1120), float32] */;
  %11 = %8.0;
  (%9, %10, %11)
}

def @func_5716() -> (Tensor[(1120), float32],) {
  %12 = @func_5132() /* ty=Tensor[(1120), float32] */;
  (%12,)
}

def @func_9729() -> Tensor[(1120), float32] {
  %13 = @func_8726() /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), bool]) */;
  %13.0
}

def @func_7833(%var_7795: Tensor[(16, 3, 16), uint16]) -> (Tensor[(16, 3, 16), uint16], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 1, 16), uint16] */, dtype="uint16") /* ty=Tensor[(16, 1, 16), uint16] */;
  %15 = cast(%var_7795, dtype="uint16") /* ty=Tensor[(16, 3, 16), uint16] */;
  %16 = @func_7412() /* ty=Tensor[(9, 2, 12), float32] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %18 = add(%14, %15) /* ty=Tensor[(16, 3, 16), uint16] */;
  %19 = acos(%17) /* ty=Tensor[(9, 2, 12), float32] */;
  %20 = @func_7412() /* ty=Tensor[(9, 2, 12), float32] */;
  (%18, %19, %20)
}

def @func_10680() -> (Tensor[(9, 2, 12), float32],) {
  %21 = @func_6057() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %22 = %21.0;
  (%22,)
}

def @func_8514(%var_8484: Tensor[(8, 11, 5), float64], %var_8485: Tensor[(8, 11, 5), float64]) -> (Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  %23 = cast(%var_8485, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
  %24 = shape_of(%var_8484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(%var_8484, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %27 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %28 = mod(%25, %26) /* ty=Tensor[(8, 11, 5), float64] */;
  %29 = @func_7286() /* ty=Tensor[(9, 2, 12), float32] */;
  %30 = %27.0;
  (%28, %29, %30)
}

def @func_10948(%var_10932: Tensor[(10, 13, 16), float32]) -> (Tensor[(10, 13, 16), float32],) {
  %31 = cast(%var_10932, dtype="float32") /* ty=Tensor[(10, 13, 16), float32] */;
  %32 = rsqrt(%31) /* ty=Tensor[(10, 13, 16), float32] */;
  (%32,)
}

def @func_5863(%var_5815: Tensor[(6, 2, 8), float64], %var_5839: Tensor[(6, 2, 8), float64]) -> (Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(6, 2, 8), uint32], Tensor[(1, 1120), float32], Tensor[(8), float64], Tensor[(4, 280), float32]) {
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %34 = reshape(%33, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %35 = @func_5041(%34) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %36 = cast(%var_5815, dtype="float64") /* ty=Tensor[(6, 2, 8), float64] */;
  %37 = acosh(%36) /* ty=Tensor[(6, 2, 8), float64] */;
  %38 = cast(%var_5839, dtype="uint32") /* ty=Tensor[(6, 2, 8), uint32] */;
  %39 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%37, dtype="uint32") /* ty=Tensor[(6, 2, 8), uint32] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %43 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 280), float32] */, dtype="float32") /* ty=Tensor[(4, 280), float32] */;
  %44 = reshape(%42, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
  %45 = reshape(%43, newshape=[1, 1120]) /* ty=Tensor[(1, 1120), float32] */;
  %46 = @func_5236(%44, %45) /* ty=(Tensor[(1, 4, 2), float64], Tensor[(1, 4, 2), float32], Tensor[(16, 14, 5), float32], Tensor[(1, 1120), float32]) */;
  %47 = %35.0;
  %48 = add(%40, %41) /* ty=Tensor[(6, 2, 8), uint32] */;
  %49 = %46.3;
  (%47, meta[relay.Constant][1] /* ty=Tensor[(294), float32] */, %48, %49, meta[relay.Constant][2] /* ty=Tensor[(8), float64] */, meta[relay.Constant][3] /* ty=Tensor[(4, 280), float32] */)
}

def @func_10732() -> (Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) {
  %50 = @func_9538() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %51 = @func_10538() /* ty=(float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) */;
  %52 = %50.0;
  %53 = %51.3;
  (%52, %53)
}

def @func_8223(%var_8198: Tensor[(12, 3, 13), float32], %var_8206: Tensor[(216), float32], %var_8212: Tensor[(22), uint16], %var_8214: Tensor[(448), uint32]) -> (Tensor[(756), float32], Tensor[(216), float32], Tensor[(1, 448), uint32], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32], Tensor[(12, 3, 13), float64]) {
  %54 = cast(%var_8206, dtype="float32") /* ty=Tensor[(216), float32] */;
  %55 = cast(%var_8206, dtype="float32") /* ty=Tensor[(216), float32] */;
  %56 = reshape(%54, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %57 = reshape(%55, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %58 = @func_6166(%56, %57) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(9, 2, 12), int32], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) */;
  %59 = cast(%var_8212, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %61 = cast(%var_8214, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %62 = reshape(%59, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), uint16] */;
  %63 = reshape(%60, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %64 = reshape(%61, newshape=[1, 448]) /* ty=Tensor[(1, 448), uint32] */;
  %65 = @func_101(%62, %63, %64) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */;
  %66 = cast(%var_8198, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
  %67 = tan(%66) /* ty=Tensor[(12, 3, 13), float32] */;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
  %69 = %58.3;
  %70 = %65.2;
  %71 = sin(%68) /* ty=Tensor[(12, 3, 13), float64] */;
  (%69, %var_8206, %70, %var_8212, meta[relay.Constant][4] /* ty=Tensor[(330), uint16] */, %var_8214, %71)
}

def @func_5425() -> (Tensor[(9, 2, 12), float32],) {
  %72 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %73 = %72.0;
  (%73,)
}

def @func_11303(%var_11216: Tensor[(6), uint64], %var_11282: Tensor[(756), float32]) -> (Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(6), uint64], Tensor[(?, 12, 11), uint8], Tensor[(490), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(9, 2, 12), float32], Tensor[(?, 12, 11), float64], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) {
  %74 = cast(%var_11216, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %75 = reshape(%74, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %76 = @func_7151(%75) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64]) */;
  %77 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 12, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  %78 = cos(%77) /* ty=Tensor[(1, 12, 11), float32] */;
  %79 = cast(%78, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  %80 = atan(%79) /* ty=Tensor[(1, 12, 11), float32] */;
  %81 = cast(%78, dtype="int8") /* ty=Tensor[(1, 12, 11), int8] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="int8") /* ty=Tensor[(1, 12, 11), int8] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %85 = add(%83, %84) /* ty=Tensor[(?, 12, 11), int8] */;
  %86 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 12, 11), float32] */, dtype="bool") /* ty=Tensor[(1, 12, 11), bool] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="bool") /* ty=Tensor[(?, 12, 11), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = greater_equal(%88, %89) /* ty=Tensor[(?, 12, 11), bool] */;
  %91 = cast(%80, dtype="uint8") /* ty=Tensor[(1, 12, 11), uint8] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="uint8") /* ty=Tensor[(?, 12, 11), uint8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %95 = %76.0;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %97 = reshape(%96, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %98 = @func_7527(%97) /* ty=(Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) */;
  %99 = cast(meta[relay.Constant][6] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %100 = reshape(%99, newshape=[3, 9, 14]) /* ty=Tensor[(3, 9, 14), int8] */;
  %101 = cast(%90, dtype="float32") /* ty=Tensor[(?, 12, 11), float32] */;
  %102 = acos(%101) /* ty=Tensor[(?, 12, 11), float32] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(?, 12, 11), float64] */;
  %104 = cast(%var_11282, dtype="float32") /* ty=Tensor[(756), float32] */;
  %105 = reshape(%104, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %106 = @func_10636() /* ty=Tensor[(1120), float32] */;
  %107 = maximum(%93, %94) /* ty=Tensor[(?, 12, 11), uint8] */;
  %108 = %98.2;
  %109 = @func_5110(%100) /* ty=Tensor[(3, 9, 14), int8] */;
  %110 = @func_9217() /* ty=Tensor[(9, 2, 12), float32] */;
  %111 = sin(%103) /* ty=Tensor[(?, 12, 11), float64] */;
  %112 = @func_5517(%105) /* ty=Tensor[(7, 9, 12), int16] */;
  (%106, %95, %var_11216, %107, %108, %109, meta[relay.Constant][6] /* ty=Tensor[(378), int8] */, %110, %111, %112, %var_11282)
}

def @func_6896(%var_6891: Tensor[(9, 2, 12), float32]) -> (Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float64]) {
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %115 = reshape(%113, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %116 = reshape(%114, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %117 = @func_441(%115, %116) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %120 = reshape(%118, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %121 = reshape(%119, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %122 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %123 = %122.0;
  %124 = cast(%var_6891, dtype="float64") /* ty=Tensor[(9, 2, 12), float64] */;
  %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%123, dtype="float64") /* ty=Tensor[(9, 2, 12), float64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %128 = %117.1;
  %129 = @func_1105(%120, %121) /* ty=Tensor[(16, 14, 5), float32] */;
  %130 = floor_divide(%126, %127) /* ty=Tensor[(9, 2, 12), float64] */;
  (%128, meta[relay.Constant][7] /* ty=Tensor[(3136), float64] */, meta[relay.Constant][8] /* ty=Tensor[(448), uint32] */, %129, meta[relay.Constant][9] /* ty=Tensor[(1120), float32] */, %130)
}

def @func_10379() -> (Tensor[(77), uint64],) {
  %131 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
  %132 = %131.3;
  (%132,)
}

def @func_6101(%var_6087: float32, %var_6088: Tensor[(10, 7, 7), float32]) -> (Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) {
  %133 = cast(%var_6087, dtype="bool") /* ty=bool */;
  %134 = cast(%var_6088, dtype="bool") /* ty=Tensor[(10, 7, 7), bool] */;
  %135 = cast(meta[relay.Constant][10] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %136 = reshape(%135, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %137 = @func_5041(%136) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %138 = not_equal(%133, %134) /* ty=Tensor[(10, 7, 7), bool] */;
  %139 = %137.0;
  (%138, %139, meta[relay.Constant][10] /* ty=Tensor[(294), float32] */)
}

def @func_11514(%var_11432: float32, %var_11483: Tensor[(2560), float64]) -> (Tensor[(9, 2, 12), float64], Tensor[(7, 7, 6), float32], float32, Tensor[(1120), float32], Tensor[(1120), int32], Tensor[(1120), float32], Tensor[(2560), float64], Tensor[(490), float32]) {
  %140 = @func_10538() /* ty=(float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) */;
  %141 = cast(%var_11432, dtype="float32") /* ty=float32 */;
  %142 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %143 = reshape(%141, newshape=[]) /* ty=float32 */;
  %144 = reshape(%142, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), float32] */;
  %145 = @func_6101(%143, %144) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */;
  %146 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %149 = reshape(%148, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %150 = @func_6646(%149) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), int32]) */;
  %151 = cast(%var_11483, dtype="float64") /* ty=Tensor[(2560), float64] */;
  %152 = reshape(%151, newshape=[1280, 2]) /* ty=Tensor[(1280, 2), float64] */;
  %153 = @func_10325(%152) /* ty=(Tensor[(294), uint16], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(1280, 2), bool]) */;
  %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float32] */, dtype="float64") /* ty=Tensor[(490), float64] */;
  %155 = sigmoid(%154) /* ty=Tensor[(490), float64] */;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(1), int32] */;
  %158 = cast(%155, dtype="float32") /* ty=Tensor[(490), float32] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?), float32] */;
  %160 = %140.3;
  %161 = %145.1;
  %162 = %150.2;
  %163 = %153.2;
  %164 = add(%158, %159) /* ty=Tensor[(490), float32] */;
  (%160, %161, %var_11432, %147, %162, %163, %var_11483, %164)
}

def @func_8002(%var_7995: Tensor[(448), uint32], %var_7999: Tensor[(1, 3136), float64]) -> (Tensor[(9, 2, 12), float32], Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(22), uint16], Tensor[(1, 3136), float64]) {
  %165 = @func_6459() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */;
  %166 = cast(%var_7995, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %167 = reshape(%166, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %168 = @func_81(%167) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %169 = cast(%var_7999, dtype="float64") /* ty=Tensor[(1, 3136), float64] */;
  %170 = %168.1;
  %171 = cast(%170, dtype="uint32") /* ty=Tensor[(2, 14, 16), uint32] */;
  %172 = reshape(%169, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %173 = reshape(%171, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %174 = @func_441(%172, %173) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %175 = %165.0;
  %176 = %174.3;
  (%175, %170, %var_7995, %176, %var_7999)
}

def @func_7412() -> Tensor[(9, 2, 12), float32] {
  %177 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %177.0
}

def @func_4832() -> (Tensor[(9, 2, 12), float32],) {
  %178 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 2, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %179 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 2, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 2, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %182 = mod(%180, %181) /* ty=Tensor[(9, 2, 12), float32] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %184 = acosh(%183) /* ty=Tensor[(9, 2, 12), float32] */;
  (%184,)
}

def @func_6194() -> Tensor[(9, 2, 12), float32] {
  @func_5973() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_9217() -> Tensor[(9, 2, 12), float32] {
  %185 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %185.0
}

def @func_9408() -> (Tensor[(9, 2, 12), float32],) {
  %186 = @func_9059() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) */;
  %187 = %186.0;
  (%187,)
}

def @func_7018() -> (Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(13, 9, 11), float32]) {
  %188 = @func_5251() /* ty=(Tensor[(1120), float32],) */;
  %189 = @func_6794() /* ty=(Tensor[(13, 9, 11), float32],) */;
  %190 = %188.0;
  %191 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %192 = %189.0;
  (%190, %191, %192)
}

def @func_4777(%var_4668: Tensor[(4, 14, 4), float32], %var_4683: Tensor[(3136), float64], %var_4684: Tensor[(448), uint32], %var_4705: Tensor[(11, 7), uint64], %var_4732: Tensor[(1120), float32], %var_4762: Tensor[(22), uint16], %var_4766: Tensor[(768), uint16]) -> (Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) {
  %193 = cast(%var_4668, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %194 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %197 = cast(%var_4705, dtype="uint64") /* ty=Tensor[(11, 7), uint64] */;
  %198 = reshape(%197, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
  %199 = @func_4291(%198) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
  %200 = %199.1;
  %201 = cast(%200, dtype="int8") /* ty=Tensor[(5, 16, 12), int8] */;
  %202 = cast(%200, dtype="int8") /* ty=Tensor[(5, 16, 12), int8] */;
  %203 = reshape(%201, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
  %204 = reshape(%202, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
  %205 = cast(meta[relay.Constant][15] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %207 = cast(%var_4683, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %208 = cast(%var_4684, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %209 = reshape(%207, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %210 = reshape(%208, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %211 = @func_441(%209, %210) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %212 = %211.2;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %214 = shape_of(%var_4683, dtype="int32") /* ty=Tensor[(1), int32] */;
  %215 = cast(%var_4683, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?), float64] */;
  %217 = add(%215, %216) /* ty=Tensor[(3136), float64] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %219 = cast(%var_4684, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %220 = cast(%var_4732, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %221 = reshape(%205, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
  %222 = reshape(%206, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
  %223 = reshape(%218, newshape=[3136, 1]) /* ty=Tensor[(3136, 1), float64] */;
  %224 = reshape(%219, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %225 = reshape(%220, newshape=[8, 140]) /* ty=Tensor[(8, 140), float32] */;
  %226 = @func_2714(%221, %222, %223, %224, %225) /* ty=(Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) */;
  %227 = cast(%var_4684, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %228 = reshape(%227, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %229 = @func_81(%228) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %230 = cast(%var_4683, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %231 = log2(%230) /* ty=Tensor[(3136), float32] */;
  %232 = cast(%217, dtype="bool") /* ty=Tensor[(3136), bool] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(1), int32] */;
  %234 = cast(%231, dtype="bool") /* ty=Tensor[(3136), bool] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?), bool] */;
  %236 = greater(%234, %235) /* ty=Tensor[(3136), bool] */;
  %237 = cast(%212, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(%236, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %241 = cast(%var_4762, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %243 = %229.1;
  %244 = cast(%243, dtype="uint32") /* ty=Tensor[(2, 14, 16), uint32] */;
  %245 = reshape(%241, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), uint16] */;
  %246 = reshape(%242, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %247 = reshape(%244, newshape=[1, 448]) /* ty=Tensor[(1, 448), uint32] */;
  %248 = @func_101(%245, %246, %247) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */;
  %249 = cast(%var_4766, dtype="uint16") /* ty=Tensor[(768), uint16] */;
  %250 = reshape(%249, newshape=[4, 12, 16]) /* ty=Tensor[(4, 12, 16), uint16] */;
  %251 = cast(%231, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %252 = multiply(%195, %196) /* ty=Tensor[(4, 14, 4), float32] */;
  %253 = @func_2303(%203, %204) /* ty=Tensor[(5, 16, 12), bool] */;
  %254 = %226.4;
  %255 = left_shift(%239, %240) /* ty=Tensor[(3136), uint16] */;
  %256 = %248.1;
  %257 = @func_1492(%250) /* ty=Tensor[(4, 12, 16), uint16] */;
  %258 = sin(%251) /* ty=Tensor[(3136), float64] */;
  (%252, %var_4684, %200, %var_4705, %253, %254, meta[relay.Constant][15] /* ty=Tensor[(294), uint16] */, %var_4732, %243, %255, %256, %var_4762, meta[relay.Constant][16] /* ty=Tensor[(330), uint16] */, %257, %var_4766, %258)
}

def @func_10474() -> (Tensor[(3, 14, 7), uint16], Tensor[(9, 2, 12), float32]) {
  %259 = @func_8295() /* ty=(Tensor[(3, 14, 7), uint16],) */;
  %260 = %259.0;
  %261 = @func_7677() /* ty=Tensor[(9, 2, 12), float32] */;
  (%260, %261)
}

def @func_10101() -> Tensor[(9, 2, 12), float32] {
  %262 = @func_7451() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) */;
  %262.0
}

def @func_2047(%var_2026: float64, %var_2041: Tensor[(448), uint32]) -> (Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) {
  %263 = cast(%var_2026, dtype="float64") /* ty=float64 */;
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %265 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
  %266 = cast(meta[relay.Constant][18] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %267 = cast(%var_2041, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %268 = reshape(%266, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %269 = reshape(%267, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %270 = @func_441(%268, %269) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %271 = floor_divide(%263, %264) /* ty=Tensor[(4, 10, 10), float64] */;
  %272 = asinh(%265) /* ty=Tensor[(4, 10, 10), float64] */;
  %273 = %270.2;
  (%271, %272, %273, meta[relay.Constant][18] /* ty=Tensor[(3136), float64] */, %var_2041)
}

def @func_6714() -> (Tensor[(9, 2, 12), float32],) {
  %274 = @func_5973() /* ty=Tensor[(9, 2, 12), float32] */;
  (%274,)
}

def @func_7787(%var_7765: float32, %var_7766: Tensor[(490), float32], %var_7777: Tensor[(704), uint32]) -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], float32, Tensor[(490), float32], Tensor[(11, 4, 16), uint32], Tensor[(704), uint32]) {
  %275 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %276 = cast(%var_7765, dtype="float32") /* ty=float32 */;
  %277 = cast(%var_7766, dtype="float32") /* ty=Tensor[(490), float32] */;
  %278 = reshape(%276, newshape=[]) /* ty=float32 */;
  %279 = reshape(%277, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), float32] */;
  %280 = @func_6101(%278, %279) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */;
  %281 = cast(%var_7777, dtype="uint32") /* ty=Tensor[(704), uint32] */;
  %282 = reshape(%281, newshape=[11, 4, 16]) /* ty=Tensor[(11, 4, 16), uint32] */;
  %283 = @func_4600(%282) /* ty=(Tensor[(11, 4, 16), uint32],) */;
  %284 = %275.0;
  %285 = %280.1;
  %286 = %283.0;
  (%284, %285, %var_7765, %var_7766, %286, %var_7777)
}

def @func_10826() -> (Tensor[(1120), float32], Tensor[(490), float32], Tensor[(12, 18), float32]) {
  %287 = @func_9059() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) */;
  %288 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 18), float32] */, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %289 = reshape(%288, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %290 = @func_7527(%289) /* ty=(Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) */;
  %291 = %287.1;
  %292 = %290.2;
  (%291, %292, meta[relay.Constant][19] /* ty=Tensor[(12, 18), float32] */)
}

def @func_7205(%var_7202: float64) -> (Tensor[(1120), float32], Tensor[(3136), float64], float64, Tensor[(448), uint32]) {
  %293 = @func_7056() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */;
  %294 = cast(%var_7202, dtype="float64") /* ty=float64 */;
  %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %296 = reshape(%294, newshape=[]) /* ty=float64 */;
  %297 = reshape(%295, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %298 = @func_2047(%296, %297) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */;
  %299 = %293.0;
  %300 = %298.3;
  (%299, %300, %var_7202, meta[relay.Constant][20] /* ty=Tensor[(448), uint32] */)
}

def @func_7380() -> (Tensor[(1120), float64],) {
  %301 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %302 = %301.0;
  %303 = cast(meta[relay.Constant][21] /* ty=Tensor[(1120), float32] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(1), int32] */;
  %305 = cast(%302, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?), float64] */;
  %307 = divide(%305, %306) /* ty=Tensor[(1120), float64] */;
  (%307,)
}

def @func_9538() -> (Tensor[(9, 2, 12), float32],) {
  %308 = @func_7713() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %309 = %308.0;
  (%309,)
}

def @func_6747() -> (Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) {
  %310 = cast(meta[relay.Constant][22] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
  %311 = cast(meta[relay.Constant][23] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %312 = reshape(%310, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
  %313 = reshape(%311, newshape=[77, 1]) /* ty=Tensor[(77, 1), uint64] */;
  %314 = @func_5688(%312, %313) /* ty=(Tensor[(2, 2, 2), float32], Tensor[(5, 16, 12), bool], Tensor[(77, 1), uint64]) */;
  %315 = @func_5973() /* ty=Tensor[(9, 2, 12), float32] */;
  %316 = %314.2;
  (%315, %316, meta[relay.Constant][22] /* ty=Tensor[(8), float32] */, meta[relay.Constant][23] /* ty=Tensor[(77), uint64] */)
}

def @func_7151(%var_7149: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64]) {
  %317 = @func_7119() /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), uint8]) */;
  %318 = cast(%var_7149, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %319 = reshape(%318, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %320 = %317.1;
  %321 = @func_2422(%319) /* ty=Tensor[(3, 11, 2), uint64] */;
  (%320, %321, %var_7149)
}

def @func_6757() -> Tensor[(1120), float32] {
  %322 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
  %322.0
}

def @func_4068(%var_4027: Tensor[(13, 9, 2), float64], %var_4044: Tensor[(6), uint64]) -> (Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) {
  %323 = cast(%var_4044, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %324 = cast(meta[relay.Constant][24] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %325 = reshape(%323, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %326 = reshape(%324, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %327 = @func_2658(%325, %326) /* ty=(Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) */;
  %328 = cast(%var_4027, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %329 = log2(%328) /* ty=Tensor[(13, 9, 2), float64] */;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
  %331 = tan(%330) /* ty=Tensor[(13, 9, 2), float64] */;
  %332 = cast(%331, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
  %333 = %327.4;
  %334 = atanh(%332) /* ty=Tensor[(13, 9, 2), float32] */;
  (%333, %var_4044, meta[relay.Constant][24] /* ty=Tensor[(84), float64] */, %334)
}

def @func_5517(%var_5498: Tensor[(7, 9, 12), float32]) -> Tensor[(7, 9, 12), int16] {
  %335 = cast(%var_5498, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
  %336 = exp(%335) /* ty=Tensor[(7, 9, 12), float32] */;
  %337 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 9, 12), float32] */, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(3), int32] */;
  %339 = cast(%336, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  bitwise_or(%339, %340) /* ty=Tensor[(7, 9, 12), int16] */
}

def @func_8034() -> Tensor[(9, 2, 12), float32] {
  @func_5973() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_10075() -> (Tensor[(294), uint16], Tensor[(1120), float64]) {
  %341 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %342 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %343 = cast(%342, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %344 = %341.2;
  %345 = sigmoid(%343) /* ty=Tensor[(1120), float64] */;
  (%344, %345)
}

def @main(%var_11562: Tensor[(7, 7, 6), float32], %var_11588: Tensor[(7, 7, 6), int8], %var_11608: Tensor[(440), float64]) -> (Tensor[(2, 352), int16], Tensor[(7, 7, 6), int8], Tensor[(9, 2, 12), float32], Tensor[(440), float64], Tensor[(3136), int8], Tensor[(1120), int8], Tensor[(7, 7, 6), float32], Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(3136), float32]) {
  %346 = @func_10788() /* ty=Tensor[(7, 7, 6), float32] */;
  %347 = cast(%var_11562, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %351 = right_shift(%349, %350) /* ty=Tensor[(7, 7, 6), int8] */;
  %352 = cast(%var_11588, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %356 = cast(%var_11608, dtype="float64") /* ty=Tensor[(440), float64] */;
  %357 = cast(%var_11608, dtype="float64") /* ty=Tensor[(440), float64] */;
  %358 = reshape(%356, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %359 = reshape(%357, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %360 = @func_8514(%358, %359) /* ty=(Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */;
  %361 = cast(meta[relay.Constant][26] /* ty=Tensor[(2, 352), int16] */, dtype="int16") /* ty=Tensor[(2, 352), int16] */;
  %362 = reshape(%361, newshape=[4, 16, 11]) /* ty=Tensor[(4, 16, 11), int16] */;
  %363 = @func_7343(%362) /* ty=(Tensor[(4, 16, 11), int16], Tensor[(3136), float64], float64) */;
  %364 = %363.1;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %366 = exp(%365) /* ty=Tensor[(3136), float64] */;
  %367 = cast(meta[relay.Constant][27] /* ty=Tensor[(3136), float64] */, dtype="int8") /* ty=Tensor[(3136), int8] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(1), int32] */;
  %369 = cast(%366, dtype="int8") /* ty=Tensor[(3136), int8] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?), int8] */;
  %371 = @func_6581() /* ty=Tensor[(1120), int8] */;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %373 = reshape(%372, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %374 = @func_5359(%373) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) */;
  %375 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %376 = cast(%366, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %377 = asin(%376) /* ty=Tensor[(3136), float64] */;
  %378 = cast(meta[relay.Constant][27] /* ty=Tensor[(3136), float64] */, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(1), int32] */;
  %380 = cast(%377, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %382 = multiply(%380, %381) /* ty=Tensor[(3136), uint16] */;
  %383 = cast(meta[relay.Constant][27] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %384 = asinh(%383) /* ty=Tensor[(3136), float64] */;
  %385 = cast(%384, dtype="uint32") /* ty=Tensor[(3136), uint32] */;
  %386 = shape_of(%382, dtype="int32") /* ty=Tensor[(1), int32] */;
  %387 = cast(%382, dtype="uint32") /* ty=Tensor[(3136), uint32] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %389 = maximum(%387, %388) /* ty=Tensor[(3136), uint32] */;
  %390 = cast(%366, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(1), int32] */;
  %392 = cast(%389, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?), float32] */;
  %394 = bitwise_or(%354, %355) /* ty=Tensor[(7, 7, 6), int8] */;
  %395 = %360.1;
  %396 = bitwise_xor(%369, %370) /* ty=Tensor[(3136), int8] */;
  %397 = %374.0;
  %398 = %375.1;
  %399 = @func_6757() /* ty=Tensor[(1120), float32] */;
  %400 = divide(%392, %393) /* ty=Tensor[(3136), float32] */;
  (meta[relay.Constant][26] /* ty=Tensor[(2, 352), int16] */, %394, %395, %var_11608, %396, %371, %397, %398, %399, %400)
}

def @func_2303(%var_2291: Tensor[(5, 16, 12), int8], %var_2292: Tensor[(5, 16, 12), int8]) -> Tensor[(5, 16, 12), bool] {
  %401 = cast(%var_2292, dtype="bool") /* ty=Tensor[(5, 16, 12), bool] */;
  %402 = shape_of(%var_2291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_2291, dtype="bool") /* ty=Tensor[(5, 16, 12), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%403, %404) /* ty=Tensor[(5, 16, 12), bool] */
}

def @func_441(%var_433: Tensor[(3136), float64], %var_435: Tensor[(448), uint32]) -> (Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) {
  %405 = cast(meta[relay.Constant][29] /* ty=Tensor[(16, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %406 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(16, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %407 = cast(meta[relay.Constant][28] /* ty=Tensor[(16, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
  %408 = dyn.reshape(%405, %406, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %409 = cast(%var_433, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %410 = cast(meta[relay.Constant][30] /* ty=Tensor[(22), uint16] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %411 = cast(%var_435, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %412 = reshape(%409, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), float64] */;
  %413 = reshape(%410, newshape=[22]) /* ty=Tensor[(22), uint16] */;
  %414 = reshape(%411, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %415 = @func_327(%412, %413, %414) /* ty=(Tensor[(14, 16, 14), float64], Tensor[(14, 16, 14), float32], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32]) */;
  %416 = minimum(%407, %408) /* ty=Tensor[(16, 6, 8), float32] */;
  %417 = %415.1;
  (%416, %417, %var_433, meta[relay.Constant][30] /* ty=Tensor[(22), uint16] */, %var_435)
}

def @func_6083() -> (Tensor[(9, 2, 12), float32],) {
  %418 = @func_6057() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %419 = %418.0;
  (%419,)
}

def @func_5415(%var_5395: Tensor[(9, 15, 14), uint64]) -> Tensor[(9, 15, 14), uint64] {
  %420 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 15, 14), uint64] */, dtype="uint64") /* ty=Tensor[(9, 15, 14), uint64] */;
  %421 = shape_of(%var_5395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%var_5395, dtype="uint64") /* ty=Tensor[(9, 15, 14), uint64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%422, %423) /* ty=Tensor[(9, 15, 14), uint64] */
}

def @func_6794() -> (Tensor[(13, 9, 11), float32],) {
  %424 = cast(meta[relay.Constant][32] /* ty=Tensor[(13, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 11), float32] */;
  %425 = cosh(%424) /* ty=Tensor[(13, 9, 11), float32] */;
  (%425,)
}

def @func_10197() -> Tensor[(9, 2, 12), float32] {
  %426 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %426.0
}

def @func_81(%var_31: Tensor[(2, 14, 16), uint32]) -> (Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) {
  %427 = cast(%var_31, dtype="bool") /* ty=Tensor[(2, 14, 16), bool] */;
  %428 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(2, 14, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 14, 16), uint32] */, dtype="bool") /* ty=Tensor[(2, 14, 16), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = cast(%var_31, dtype="float32") /* ty=Tensor[(2, 14, 16), float32] */;
  %432 = greater_equal(%429, %430) /* ty=Tensor[(2, 14, 16), bool] */;
  %433 = tan(%431) /* ty=Tensor[(2, 14, 16), float32] */;
  (%432, %433)
}

def @func_9916(%var_9879: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float32], Tensor[(9, 2, 12), float32], Tensor[(16, 10, 8), bool], Tensor[(1120), float32]) {
  %434 = cast(%var_9879, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %435 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(16, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %438 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %439 = cast(%var_9879, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %440 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(16, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 10, 8), float32] */, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = minimum(%436, %437) /* ty=Tensor[(16, 10, 8), float32] */;
  %444 = %438.0;
  %445 = less(%441, %442) /* ty=Tensor[(16, 10, 8), bool] */;
  %446 = @func_5923() /* ty=Tensor[(1120), float32] */;
  (%443, %444, %445, %446)
}

def @func_11318() -> (Tensor[(1120), float32],) {
  %447 = @func_10006() /* ty=(Tensor[(1120), float32],) */;
  %448 = %447.0;
  (%448,)
}

def @func_11539(%var_11525: Tensor[(12, 14, 9), float32]) -> Tensor[(12, 14, 9), float32] {
  %449 = cast(%var_11525, dtype="float32") /* ty=Tensor[(12, 14, 9), float32] */;
  rsqrt(%449) /* ty=Tensor[(12, 14, 9), float32] */
}

def @func_8181(%var_8171: Tensor[(1120), float32]) -> (Tensor[(1120), bool],) {
  %450 = @func_5251() /* ty=(Tensor[(1120), float32],) */;
  %451 = %450.0;
  %452 = cast(%var_8171, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %453 = shape_of(%451, dtype="int32") /* ty=Tensor[(1), int32] */;
  %454 = cast(%451, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?), bool] */;
  %456 = greater(%454, %455) /* ty=Tensor[(1120), bool] */;
  (%456,)
}

def @func_6408() -> (Tensor[(1120), float32],) {
  %457 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
  %458 = %457.0;
  (%458,)
}

def @func_7119() -> (Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), uint8]) {
  %459 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %460 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %461 = %459.1;
  %462 = cast(%461, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %463 = reshape(%462, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %464 = @func_5479(%463) /* ty=(Tensor[(1120), uint8],) */;
  %465 = %460.0;
  %466 = %464.0;
  (%461, %465, %466)
}

def @func_5811(%var_5791: float64) -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float64], float64) {
  %467 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %468 = cast(%var_5791, dtype="float64") /* ty=float64 */;
  %469 = reshape(%468, newshape=[]) /* ty=float64 */;
  %470 = @func_5757(%469) /* ty=(Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */;
  %471 = %467.0;
  %472 = %470.0;
  (%471, %472, %var_5791)
}

def @func_8534() -> (Tensor[(1120), int8], Tensor[(1120), float32]) {
  %473 = @func_7978() /* ty=(Tensor[(1120), float32],) */;
  %474 = @func_6581() /* ty=Tensor[(1120), int8] */;
  %475 = %473.0;
  (%474, %475)
}

def @func_8903() -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) {
  %476 = @func_6459() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */;
  %477 = cast(meta[relay.Constant][35] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %478 = reshape(%477, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %479 = @func_5041(%478) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %480 = %476.0;
  %481 = %479.0;
  (%480, %481, meta[relay.Constant][35] /* ty=Tensor[(294), float32] */)
}

def @func_8295() -> (Tensor[(3, 14, 7), uint16],) {
  %482 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %483 = %482.1;
  (%483,)
}

def @func_5041(%var_5034: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), float32],) {
  %484 = cast(%var_5034, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %485 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(7, 7, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = subtract(%486, %487) /* ty=Tensor[(7, 7, 6), float32] */;
  (%488,)
}

def @func_5236(%var_5213: Tensor[(1, 4, 2), float64], %var_5233: Tensor[(1, 1120), float32]) -> (Tensor[(1, 4, 2), float64], Tensor[(1, 4, 2), float32], Tensor[(16, 14, 5), float32], Tensor[(1, 1120), float32]) {
  %489 = cast(%var_5213, dtype="float64") /* ty=Tensor[(1, 4, 2), float64] */;
  %490 = cast(%var_5213, dtype="float32") /* ty=Tensor[(1, 4, 2), float32] */;
  %491 = cast(%var_5233, dtype="float32") /* ty=Tensor[(1, 1120), float32] */;
  %492 = cast(%var_5233, dtype="float32") /* ty=Tensor[(1, 1120), float32] */;
  %493 = reshape(%491, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %494 = reshape(%492, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %495 = rsqrt(%489) /* ty=Tensor[(1, 4, 2), float64] */;
  %496 = acos(%490) /* ty=Tensor[(1, 4, 2), float32] */;
  %497 = @func_1105(%493, %494) /* ty=Tensor[(16, 14, 5), float32] */;
  (%495, %496, %497, %var_5233)
}

def @func_2714(%var_2664: Tensor[(3, 14, 7), uint16], %var_2665: Tensor[(3, 14, 7), uint16], %var_2687: Tensor[(3136, 1), float64], %var_2688: Tensor[(448), uint32], %var_2696: Tensor[(8, 140), float32]) -> (Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) {
  %498 = cast(%var_2665, dtype="uint16") /* ty=Tensor[(3, 14, 7), uint16] */;
  %499 = shape_of(%var_2664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_2664, dtype="uint16") /* ty=Tensor[(3, 14, 7), uint16] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %502 = cast(%var_2687, dtype="float64") /* ty=Tensor[(3136, 1), float64] */;
  %503 = cast(%var_2688, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %504 = reshape(%502, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %505 = reshape(%503, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %506 = @func_441(%504, %505) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %507 = %506.3;
  %508 = cast(%507, dtype="float64") /* ty=Tensor[(22), float64] */;
  %509 = cast(%var_2687, dtype="float64") /* ty=Tensor[(3136, 1), float64] */;
  %510 = cast(%var_2696, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %511 = cast(%var_2696, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %512 = reshape(%510, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %513 = reshape(%511, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %514 = cast(%var_2687, dtype="float64") /* ty=Tensor[(3136, 1), float64] */;
  %515 = cast(%var_2688, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %516 = reshape(%514, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %517 = reshape(%515, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %518 = @func_441(%516, %517) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %519 = add(%500, %501) /* ty=Tensor[(3, 14, 7), uint16] */;
  %520 = floor_mod(%508, %509) /* ty=Tensor[(3136, 22), float64] */;
  %521 = @func_1105(%512, %513) /* ty=Tensor[(16, 14, 5), float32] */;
  %522 = %518.3;
  (%519, %var_2688, %520, %521, %var_2696, %522)
}

def @func_10788() -> Tensor[(7, 7, 6), float32] {
  %523 = @func_7056() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */;
  %523.1
}

def @func_8038() -> (Tensor[(1120), bool],) {
  %524 = @func_7451() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) */;
  %525 = %524.1;
  (%525,)
}

def @func_4600(%var_4595: Tensor[(11, 4, 16), uint32]) -> (Tensor[(11, 4, 16), uint32],) {
  %526 = cast(meta[relay.Constant][37] /* ty=Tensor[(11, 4, 16), uint32] */, dtype="uint32") /* ty=Tensor[(11, 4, 16), uint32] */;
  %527 = shape_of(%var_4595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%var_4595, dtype="uint32") /* ty=Tensor[(11, 4, 16), uint32] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %530 = bitwise_and(%528, %529) /* ty=Tensor[(11, 4, 16), uint32] */;
  (%530,)
}

def @func_8476() -> (Tensor[(13, 9, 11), float32], Tensor[(3, 14, 7), uint16]) {
  %531 = @func_6794() /* ty=(Tensor[(13, 9, 11), float32],) */;
  %532 = @func_8295() /* ty=(Tensor[(3, 14, 7), uint16],) */;
  %533 = %531.0;
  %534 = %532.0;
  (%533, %534)
}

def @func_10636() -> Tensor[(1120), float32] {
  @func_5076() /* ty=Tensor[(1120), float32] */
}

def @func_7343(%var_7326: Tensor[(4, 16, 11), int16]) -> (Tensor[(4, 16, 11), int16], Tensor[(3136), float64], float64) {
  %535 = cast(%var_7326, dtype="int16") /* ty=Tensor[(4, 16, 11), int16] */;
  %536 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(4, 16, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 16, 11), int16] */, dtype="int16") /* ty=Tensor[(4, 16, 11), int16] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %539 = cast(7.89506f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %540 = reshape(%539, newshape=[]) /* ty=float64 */;
  %541 = @func_7205(%540) /* ty=(Tensor[(1120), float32], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */;
  %542 = add(%537, %538) /* ty=Tensor[(4, 16, 11), int16] */;
  %543 = %541.1;
  (%542, %543, 7.89506f64 /* ty=float64 */)
}

def @func_5973() -> Tensor[(9, 2, 12), float32] {
  %544 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %544.2
}

def @func_7527(%var_7522: Tensor[(9, 2, 12), float32]) -> (Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) {
  %545 = cast(-2.23819f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %546 = cast(meta[relay.Constant][39] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %547 = reshape(%545, newshape=[]) /* ty=float32 */;
  %548 = reshape(%546, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), float32] */;
  %549 = @func_6101(%547, %548) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */;
  %550 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %551 = %550.0;
  %552 = cast(%var_7522, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%551, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %556 = %549.2;
  %557 = logical_or(%554, %555) /* ty=Tensor[(9, 2, 12), bool] */;
  (%556, -2.23819f /* ty=float32 */, meta[relay.Constant][39] /* ty=Tensor[(490), float32] */, %557)
}

def @func_5251() -> (Tensor[(1120), float32],) {
  %558 = @func_5132() /* ty=Tensor[(1120), float32] */;
  (%558,)
}

def @func_4941() -> (Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) {
  %559 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %560 = cast(meta[relay.Constant][40] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %561 = cast(meta[relay.Constant][40] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %562 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 1568), float64] */, dtype="float64") /* ty=Tensor[(2, 1568), float64] */;
  %563 = cast(meta[relay.Constant][42] /* ty=Tensor[(56, 8), uint32] */, dtype="uint32") /* ty=Tensor[(56, 8), uint32] */;
  %564 = cast(meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %565 = reshape(%560, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
  %566 = reshape(%561, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
  %567 = reshape(%562, newshape=[3136, 1]) /* ty=Tensor[(3136, 1), float64] */;
  %568 = reshape(%563, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %569 = reshape(%564, newshape=[8, 140]) /* ty=Tensor[(8, 140), float32] */;
  %570 = @func_2714(%565, %566, %567, %568, %569) /* ty=(Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) */;
  %571 = cast(meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %572 = cast(meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %573 = reshape(%571, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %574 = reshape(%572, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %575 = %559.0;
  %576 = %570.0;
  %577 = @func_1105(%573, %574) /* ty=Tensor[(16, 14, 5), float32] */;
  (%575, %576, meta[relay.Constant][40] /* ty=Tensor[(294), uint16] */, meta[relay.Constant][41] /* ty=Tensor[(2, 1568), float64] */, meta[relay.Constant][42] /* ty=Tensor[(56, 8), uint32] */, meta[relay.Constant][43] /* ty=Tensor[(1120), float32] */, %577)
}

def @func_5659(%var_5627: Tensor[(294), float32]) -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), bool]) {
  %578 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %579 = cast(%var_5627, dtype="float32") /* ty=Tensor[(294), float32] */;
  %580 = reshape(%579, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %581 = @func_5041(%580) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %582 = %581.0;
  %583 = cast(%var_5627, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %587 = bitwise_and(%585, %586) /* ty=Tensor[(7, 7, 6), uint64] */;
  %588 = cast(%582, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %590 = cast(%587, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %592 = %578.0;
  %593 = logical_and(%590, %591) /* ty=Tensor[(7, 7, 6), bool] */;
  (%592, %593)
}

def @func_9761() -> (Tensor[(378), int8], Tensor[(1120), float32]) {
  %594 = @func_6459() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */;
  %595 = @func_9249() /* ty=(Tensor[(1120), float32],) */;
  %596 = %594.2;
  %597 = %595.0;
  (%596, %597)
}

def @func_2658(%var_2645: Tensor[(6), uint64], %var_2653: Tensor[(2, 3, 14), float64]) -> (Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) {
  %598 = cast(meta[relay.Constant][44] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %599 = reshape(%598, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %600 = @func_81(%599) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %601 = cast(%var_2645, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %602 = reshape(%601, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %603 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
  %604 = acos(%603) /* ty=Tensor[(2, 1, 14), float64] */;
  %605 = cast(%604, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
  %606 = asinh(%605) /* ty=Tensor[(2, 1, 14), float64] */;
  %607 = cast(%606, dtype="int16") /* ty=Tensor[(2, 1, 14), int16] */;
  %608 = cast(%var_2653, dtype="int16") /* ty=Tensor[(2, 3, 14), int16] */;
  %609 = %600.1;
  %610 = @func_2422(%602) /* ty=Tensor[(3, 11, 2), uint64] */;
  %611 = minimum(%607, %608) /* ty=Tensor[(2, 3, 14), int16] */;
  (%609, meta[relay.Constant][44] /* ty=Tensor[(448), uint32] */, %610, %var_2645, %611)
}

def @func_6057() -> (Tensor[(9, 2, 12), float32],) {
  %612 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %613 = %612.0;
  (%613,)
}

def @func_6289() -> (Tensor[(1120), float32], Tensor[(1120), float32]) {
  %614 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %615 = @func_5132() /* ty=Tensor[(1120), float32] */;
  (%614, %615)
}

def @func_5132() -> Tensor[(1120), float32] {
  @func_5076() /* ty=Tensor[(1120), float32] */
}

def @func_9249() -> (Tensor[(1120), float32],) {
  %616 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %617 = %616.0;
  (%617,)
}

def @func_9829() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) {
  %618 = @func_5973() /* ty=Tensor[(9, 2, 12), float32] */;
  %619 = @func_5076() /* ty=Tensor[(1120), float32] */;
  (%618, %619)
}

def @func_1492(%var_1479: Tensor[(4, 12, 16), uint16]) -> Tensor[(4, 12, 16), uint16] {
  %620 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 16), uint16] */;
  %621 = shape_of(%var_1479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_1479, dtype="uint16") /* ty=Tensor[(4, 12, 16), uint16] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%622, %623) /* ty=Tensor[(4, 12, 16), uint16] */
}

def @func_7587(%var_7555: uint64, %var_7556: Tensor[(16, 5, 5), uint64]) -> (Tensor[(16, 5, 5), uint64], Tensor[(8), float32], Tensor[(16, 5, 5), uint64]) {
  %624 = cast(%var_7555, dtype="uint64") /* ty=uint64 */;
  %625 = cast(%var_7556, dtype="uint64") /* ty=Tensor[(16, 5, 5), uint64] */;
  %626 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
  %627 = cast(%var_7555, dtype="uint64") /* ty=uint64 */;
  %628 = cast(%var_7556, dtype="uint64") /* ty=Tensor[(16, 5, 5), uint64] */;
  %629 = bitwise_or(%624, %625) /* ty=Tensor[(16, 5, 5), uint64] */;
  %630 = %626.2;
  %631 = right_shift(%627, %628) /* ty=Tensor[(16, 5, 5), uint64] */;
  (%629, %630, %631)
}

def @func_10006() -> (Tensor[(1120), float32],) {
  %632 = @func_9673() /* ty=Tensor[(1120), float32] */;
  (%632,)
}

def @func_9278() -> (Tensor[(9, 2, 12), float32],) {
  %633 = @func_7677() /* ty=Tensor[(9, 2, 12), float32] */;
  (%633,)
}

def @func_10538() -> (float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) {
  %634 = @func_8643() /* ty=(Tensor[(1120), float32], float64, float64) */;
  %635 = @func_7874() /* ty=(Tensor[(1120), float32],) */;
  %636 = @func_9278() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %639 = reshape(%638, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %640 = @func_6896(%639) /* ty=(Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float64]) */;
  %641 = %634.2;
  %642 = %635.0;
  %643 = %640.5;
  (%641, %642, %637, %643)
}

def @func_11416() -> Tensor[(9, 2, 12), float32] {
  %644 = @func_10443() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */;
  %644.2
}

def @func_7677() -> Tensor[(9, 2, 12), float32] {
  %645 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %645.0
}

def @func_327(%var_310: Tensor[(14, 16, 14), float64], %var_319: Tensor[(22), uint16], %var_321: Tensor[(448), uint32]) -> (Tensor[(14, 16, 14), float64], Tensor[(14, 16, 14), float32], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32]) {
  %646 = cast(%var_310, dtype="float64") /* ty=Tensor[(14, 16, 14), float64] */;
  %647 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(14, 16, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 14), float64] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %650 = cast(%var_310, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  %651 = cast(%var_319, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %652 = cast(meta[relay.Constant][48] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %653 = cast(%var_321, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %654 = reshape(%651, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), uint16] */;
  %655 = reshape(%652, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %656 = reshape(%653, newshape=[1, 448]) /* ty=Tensor[(1, 448), uint32] */;
  %657 = @func_101(%654, %655, %656) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */;
  %658 = floor_divide(%648, %649) /* ty=Tensor[(14, 16, 14), float64] */;
  %659 = rsqrt(%650) /* ty=Tensor[(14, 16, 14), float32] */;
  %660 = %657.1;
  (%658, %659, %660, %var_319, meta[relay.Constant][48] /* ty=Tensor[(330), uint16] */, %var_321)
}

def @func_10351() -> (Tensor[(1120), float32], Tensor[(1120), float32]) {
  %661 = @func_7874() /* ty=(Tensor[(1120), float32],) */;
  %662 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
  %663 = %661.0;
  %664 = %662.0;
  (%663, %664)
}

def @func_10917() -> (Tensor[(7, 7, 6), float32], Tensor[(5, 16, 12), bool], Tensor[(77), uint64], Tensor[(9, 2, 12), float32], Tensor[(8), float32], Tensor[(9, 2, 12), float32]) {
  %665 = @func_7056() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */;
  %666 = cast(meta[relay.Constant][49] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %667 = reshape(%666, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
  %668 = @func_4291(%667) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
  %669 = @func_6194() /* ty=Tensor[(9, 2, 12), float32] */;
  %670 = cast(%669, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %671 = @func_9408() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %672 = %665.1;
  %673 = %668.1;
  %674 = sigmoid(%670) /* ty=Tensor[(9, 2, 12), float32] */;
  %675 = @func_8959() /* ty=Tensor[(8), float32] */;
  %676 = %671.0;
  (%672, %673, meta[relay.Constant][49] /* ty=Tensor[(77), uint64] */, %674, %675, %676)
}

def @func_6459() -> (Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) {
  %677 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %678 = cast(meta[relay.Constant][50] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %679 = reshape(%678, newshape=[3, 9, 14]) /* ty=Tensor[(3, 9, 14), int8] */;
  %680 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
  %681 = %677.0;
  %682 = @func_5110(%679) /* ty=Tensor[(3, 9, 14), int8] */;
  %683 = %680.0;
  (%681, %682, meta[relay.Constant][50] /* ty=Tensor[(378), int8] */, %683)
}

def @func_7286() -> Tensor[(9, 2, 12), float32] {
  %684 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
  %684.0
}

def @func_11353() -> Tensor[(12, 18), float32] {
  %685 = @func_10826() /* ty=(Tensor[(1120), float32], Tensor[(490), float32], Tensor[(12, 18), float32]) */;
  %685.2
}

def @func_6843(%var_6840: Tensor[(11, 7, 7), float64]) -> (Tensor[(11, 7, 7), float64],) {
  %686 = cast(%var_6840, dtype="float64") /* ty=Tensor[(11, 7, 7), float64] */;
  %687 = log2(%686) /* ty=Tensor[(11, 7, 7), float64] */;
  (%687,)
}

def @func_8853(%var_8796: Tensor[(12, 4, 10), float64], %var_8797: Tensor[(12, 4, 10), float64], %var_8806: Tensor[(1890), uint64], %var_8818: Tensor[(429), float64], %var_8831: Tensor[(3136), float64], %var_8833: Tensor[(2, 560), float32]) -> (Tensor[(12, 4, 10), float64], Tensor[(1890), bool], Tensor[(77), uint64], Tensor[(39), float64], Tensor[(429), float64], Tensor[(9, 2, 12), float32], Tensor[(220, 2), float64], Tensor[(4, 12, 16), uint16], Tensor[(224), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(2, 560), float32], Tensor[(22), uint16], Tensor[(768), uint16], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) {
  %688 = cast(%var_8797, dtype="float64") /* ty=Tensor[(12, 4, 10), float64] */;
  %689 = shape_of(%var_8796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_8796, dtype="float64") /* ty=Tensor[(12, 4, 10), float64] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %692 = cast(%var_8806, dtype="uint64") /* ty=Tensor[(1890), uint64] */;
  %693 = reshape(%692, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint64] */;
  %694 = @func_5415(%693) /* ty=Tensor[(9, 15, 14), uint64] */;
  %695 = cast(%694, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %696 = shape_of(%var_8806, dtype="int32") /* ty=Tensor[(1), int32] */;
  %697 = cast(%var_8806, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %698 = dyn.reshape(%695, %696, newshape=[]) /* ty=Tensor[(?), bool] */;
  %699 = cast(meta[relay.Constant][51] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %700 = cast(%var_8818, dtype="float64") /* ty=Tensor[(429), float64] */;
  %701 = reshape(%699, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float64] */;
  %702 = reshape(%700, newshape=[11, 3, 13]) /* ty=Tensor[(11, 3, 13), float64] */;
  %703 = @func_5591(%701, %702) /* ty=(Tensor[(11, 3, 13), float64], Tensor[(1120), float32], Tensor[(1120), uint8], Tensor[(11, 3, 13), float64], Tensor[(5, 16, 12), bool], Tensor[(77), uint64]) */;
  %704 = cast(meta[relay.Constant][52] /* ty=Tensor[(220, 2), float64] */, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
  %705 = cast(meta[relay.Constant][52] /* ty=Tensor[(220, 2), float64] */, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
  %706 = reshape(%704, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %707 = reshape(%705, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %708 = @func_8514(%706, %707) /* ty=(Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */;
  %709 = cast(meta[relay.Constant][53] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %710 = cast(%var_8831, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %711 = cast(meta[relay.Constant][54] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %712 = %703.5;
  %713 = cast(%712, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %714 = cast(%var_8833, dtype="float32") /* ty=Tensor[(2, 560), float32] */;
  %715 = cast(meta[relay.Constant][55] /* ty=Tensor[(22), uint16] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %716 = cast(meta[relay.Constant][56] /* ty=Tensor[(768), uint16] */, dtype="uint16") /* ty=Tensor[(768), uint16] */;
  %717 = reshape(%709, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %718 = reshape(%710, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %719 = reshape(%711, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %720 = reshape(%713, newshape=[11, 7]) /* ty=Tensor[(11, 7), uint64] */;
  %721 = reshape(%714, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %722 = reshape(%715, newshape=[22]) /* ty=Tensor[(22), uint16] */;
  %723 = reshape(%716, newshape=[768]) /* ty=Tensor[(768), uint16] */;
  %724 = @func_4777(%717, %718, %719, %720, %721, %722, %723) /* ty=(Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) */;
  %725 = cast(meta[relay.Constant][57] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %726 = cast(meta[relay.Constant][58] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %727 = reshape(%725, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), float64] */;
  %728 = reshape(%726, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %729 = @func_4068(%727, %728) /* ty=(Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) */;
  %730 = floor_divide(%690, %691) /* ty=Tensor[(12, 4, 10), float64] */;
  %731 = greater(%697, %698) /* ty=Tensor[(1890), bool] */;
  %732 = %708.2;
  %733 = %724.13;
  %734 = %729.3;
  (%730, %731, %712, meta[relay.Constant][51] /* ty=Tensor[(39), float64] */, %var_8818, %732, meta[relay.Constant][52] /* ty=Tensor[(220, 2), float64] */, %733, meta[relay.Constant][53] /* ty=Tensor[(224), float32] */, %var_8831, meta[relay.Constant][54] /* ty=Tensor[(448), uint32] */, %var_8833, meta[relay.Constant][55] /* ty=Tensor[(22), uint16] */, meta[relay.Constant][56] /* ty=Tensor[(768), uint16] */, %734, meta[relay.Constant][57] /* ty=Tensor[(234), float64] */, meta[relay.Constant][58] /* ty=Tensor[(6), uint64] */)
}

def @func_6166(%var_6150: Tensor[(9, 2, 12), float32], %var_6156: Tensor[(9, 2, 12), float32]) -> (Tensor[(9, 2, 12), bool], Tensor[(9, 2, 12), int32], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) {
  %735 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %736 = %735.0;
  %737 = cast(%var_6150, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %738 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%736, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %741 = cast(%var_6156, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
  %742 = shape_of(%736, dtype="int32") /* ty=Tensor[(3), int32] */;
  %743 = cast(%736, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
  %744 = dyn.reshape(%741, %742, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %745 = cast(meta[relay.Constant][59] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %746 = reshape(%745, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %747 = greater(%739, %740) /* ty=Tensor[(9, 2, 12), bool] */;
  %748 = add(%743, %744) /* ty=Tensor[(9, 2, 12), int32] */;
  %749 = @func_5517(%746) /* ty=Tensor[(7, 9, 12), int16] */;
  (%747, %748, %749, meta[relay.Constant][59] /* ty=Tensor[(756), float32] */)
}

def @func_8726() -> (Tensor[(1120), float32], Tensor[(9, 2, 12), bool]) {
  %750 = @func_7978() /* ty=(Tensor[(1120), float32],) */;
  %751 = @func_8034() /* ty=Tensor[(9, 2, 12), float32] */;
  %752 = cast(meta[relay.Constant][60] /* ty=Tensor[(9, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %753 = shape_of(%751, dtype="int32") /* ty=Tensor[(3), int32] */;
  %754 = cast(%751, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %755 = dyn.reshape(%752, %753, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %756 = %750.0;
  %757 = less(%754, %755) /* ty=Tensor[(9, 2, 12), bool] */;
  (%756, %757)
}

def @func_5688(%var_5667: Tensor[(2, 2, 2), float32], %var_5676: Tensor[(77, 1), uint64]) -> (Tensor[(2, 2, 2), float32], Tensor[(5, 16, 12), bool], Tensor[(77, 1), uint64]) {
  %758 = cast(%var_5667, dtype="float32") /* ty=Tensor[(2, 2, 2), float32] */;
  %759 = cast(%var_5676, dtype="uint64") /* ty=Tensor[(77, 1), uint64] */;
  %760 = reshape(%759, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
  %761 = @func_4291(%760) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
  %762 = cos(%758) /* ty=Tensor[(2, 2, 2), float32] */;
  %763 = %761.1;
  (%762, %763, %var_5676)
}

def @func_5076() -> Tensor[(1120), float32] {
  %764 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %764.5
}

def @func_7451() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) {
  %765 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %766 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
  %767 = %766.0;
  %768 = cast(meta[relay.Constant][61] /* ty=Tensor[(1120), float32] */, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %769 = shape_of(%767, dtype="int32") /* ty=Tensor[(1), int32] */;
  %770 = cast(%767, dtype="bool") /* ty=Tensor[(1120), bool] */;
  %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?), bool] */;
  %772 = %765.0;
  %773 = less_equal(%770, %771) /* ty=Tensor[(1120), bool] */;
  (%772, %773)
}

def @func_10325(%var_10315: Tensor[(1280, 2), float64]) -> (Tensor[(294), uint16], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(1280, 2), bool]) {
  %774 = @func_10075() /* ty=(Tensor[(294), uint16], Tensor[(1120), float64]) */;
  %775 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %776 = cast(meta[relay.Constant][62] /* ty=Tensor[(1280, 1), float32] */, dtype="float32") /* ty=Tensor[(1280, 1), float32] */;
  %777 = reshape(%776, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %778 = @func_9916(%777) /* ty=(Tensor[(16, 10, 8), float32], Tensor[(9, 2, 12), float32], Tensor[(16, 10, 8), bool], Tensor[(1120), float32]) */;
  %779 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %780 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %781 = cast(meta[relay.Constant][62] /* ty=Tensor[(1280, 1), float32] */, dtype="float64") /* ty=Tensor[(1280, 1), float64] */;
  %782 = sqrt(%781) /* ty=Tensor[(1280, 1), float64] */;
  %783 = cast(%782, dtype="bool") /* ty=Tensor[(1280, 1), bool] */;
  %784 = cast(%var_10315, dtype="bool") /* ty=Tensor[(1280, 2), bool] */;
  %785 = %774.0;
  %786 = %775.0;
  %787 = %778.3;
  %788 = %779.0;
  %789 = %780.0;
  %790 = equal(%783, %784) /* ty=Tensor[(1280, 2), bool] */;
  (%785, %786, %787, %788, %789, %790)
}

def @func_8363(%var_8309: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(84), float64]) {
  %791 = cast(%var_8309, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %792 = cast(meta[relay.Constant][63] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
  %793 = reshape(%791, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %794 = reshape(%792, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
  %795 = @func_2658(%793, %794) /* ty=(Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) */;
  %796 = @func_7412() /* ty=Tensor[(9, 2, 12), float32] */;
  %797 = %795.1;
  (%796, %797, %var_8309, meta[relay.Constant][63] /* ty=Tensor[(84), float64] */)
}

def @func_9352(%var_9335: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(448), uint32], float64) {
  %798 = cast(%var_9335, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %799 = reshape(%798, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %800 = @func_8363(%799) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(84), float64]) */;
  %801 = cast(7.67688f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %802 = %800.1;
  %803 = cast(%802, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %804 = reshape(%801, newshape=[]) /* ty=float64 */;
  %805 = reshape(%803, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %806 = @func_2047(%804, %805) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */;
  %807 = @func_9217() /* ty=Tensor[(9, 2, 12), float32] */;
  %808 = @func_5923() /* ty=Tensor[(1120), float32] */;
  %809 = %806.4;
  (%807, %808, %802, %var_9335, %809, 7.67688f64 /* ty=float64 */)
}

def @func_6646(%var_6636: Tensor[(1120), float32]) -> (Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), int32]) {
  %810 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %811 = @func_6289() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32]) */;
  %812 = %811.0;
  %813 = cast(%var_6636, dtype="int32") /* ty=Tensor[(1120), int32] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(1), int32] */;
  %815 = cast(%812, dtype="int32") /* ty=Tensor[(1120), int32] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?), int32] */;
  %817 = %810.0;
  %818 = @func_6194() /* ty=Tensor[(9, 2, 12), float32] */;
  %819 = bitwise_or(%815, %816) /* ty=Tensor[(1120), int32] */;
  (%817, %818, %819)
}

def @func_8643() -> (Tensor[(1120), float32], float64, float64) {
  %820 = cast(-4.1133f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %821 = reshape(%820, newshape=[]) /* ty=float64 */;
  %822 = @func_5757(%821) /* ty=(Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */;
  %823 = @func_6757() /* ty=Tensor[(1120), float32] */;
  %824 = %822.2;
  (%823, %824, -4.1133f64 /* ty=float64 */)
}

def @func_7056() -> (Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) {
  %825 = @func_5923() /* ty=Tensor[(1120), float32] */;
  %826 = cast(%825, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %827 = reshape(%826, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %828 = @func_5359(%827) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) */;
  %829 = %828.0;
  (%825, %829)
}

def @func_7978() -> (Tensor[(1120), float32],) {
  %830 = @func_7018() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(13, 9, 11), float32]) */;
  %831 = %830.1;
  (%831,)
}

def @func_6220() -> (Tensor[(1120), float32],) {
  %832 = @func_5132() /* ty=Tensor[(1120), float32] */;
  (%832,)
}

def @func_5591(%var_5551: Tensor[(1, 3, 13), float64], %var_5552: Tensor[(11, 3, 13), float64]) -> (Tensor[(11, 3, 13), float64], Tensor[(1120), float32], Tensor[(1120), uint8], Tensor[(11, 3, 13), float64], Tensor[(5, 16, 12), bool], Tensor[(77), uint64]) {
  %833 = cast(%var_5551, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
  %834 = cast(%var_5552, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
  %835 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %836 = cast(%835, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %837 = reshape(%836, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %838 = @func_5479(%837) /* ty=(Tensor[(1120), uint8],) */;
  %839 = cast(%var_5552, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
  %840 = cast(meta[relay.Constant][64] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %841 = reshape(%840, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
  %842 = @func_4291(%841) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
  %843 = power(%833, %834) /* ty=Tensor[(11, 3, 13), float64] */;
  %844 = %838.0;
  %845 = atanh(%839) /* ty=Tensor[(11, 3, 13), float64] */;
  %846 = %842.1;
  (%843, %835, %844, %845, %846, meta[relay.Constant][64] /* ty=Tensor[(77), uint64] */)
}

def @func_5757(%var_5751: float64) -> (Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) {
  %847 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %848 = %847.0;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %850 = cast(%var_5751, dtype="float64") /* ty=float64 */;
  %851 = cast(meta[relay.Constant][65] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %852 = reshape(%850, newshape=[]) /* ty=float64 */;
  %853 = reshape(%851, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %854 = @func_2047(%852, %853) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */;
  %855 = cos(%849) /* ty=Tensor[(1120), float64] */;
  %856 = %854.2;
  (%855, %856, %var_5751, meta[relay.Constant][65] /* ty=Tensor[(448), uint32] */)
}

def @func_5359(%var_5315: Tensor[(1120), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) {
  %857 = cast(meta[relay.Constant][66] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %858 = reshape(%857, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %859 = @func_5041(%858) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %860 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %861 = cast(%var_5315, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(1), int32] */;
  %863 = cast(%860, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?), float32] */;
  %865 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %866 = cast(meta[relay.Constant][66] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %867 = reshape(%866, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %868 = @func_5041(%867) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %869 = cast(meta[relay.Constant][67] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %870 = cast(meta[relay.Constant][68] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %871 = reshape(%869, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), float64] */;
  %872 = reshape(%870, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %873 = @func_4068(%871, %872) /* ty=(Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) */;
  %874 = %859.0;
  %875 = floor_mod(%863, %864) /* ty=Tensor[(1120), float32] */;
  %876 = %865.0;
  %877 = %868.0;
  %878 = %873.3;
  (%874, meta[relay.Constant][66] /* ty=Tensor[(294), float32] */, %875, %876, %877, %878, meta[relay.Constant][67] /* ty=Tensor[(234), float64] */, meta[relay.Constant][68] /* ty=Tensor[(6), uint64] */)
}

def @func_10779() -> Tensor[(9, 2, 12), float32] {
  @func_10197() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_9059() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) {
  %879 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %880 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %881 = %879.2;
  %882 = %880.0;
  (%881, %882)
}

def @func_2422(%var_2412: Tensor[(3, 1, 2), uint64]) -> Tensor[(3, 11, 2), uint64] {
  %883 = cast(%var_2412, dtype="uint64") /* ty=Tensor[(3, 1, 2), uint64] */;
  %884 = cast(meta[relay.Constant][69] /* ty=Tensor[(3, 11, 2), uint64] */, dtype="uint64") /* ty=Tensor[(3, 11, 2), uint64] */;
  minimum(%883, %884) /* ty=Tensor[(3, 11, 2), uint64] */
}

def @func_8994(%var_8976: Tensor[(16, 16, 3), uint32]) -> Tensor[(16, 16, 3), bool] {
  %885 = cast(meta[relay.Constant][70] /* ty=Tensor[(16, 16, 3), uint32] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  %886 = shape_of(%var_8976, dtype="int32") /* ty=Tensor[(3), int32] */;
  %887 = cast(%var_8976, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
  %888 = dyn.reshape(%885, %886, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%887, %888) /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_6581() -> Tensor[(1120), int8] {
  %889 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
  %890 = %889.0;
  %891 = cast(meta[relay.Constant][71] /* ty=Tensor[(1120), float32] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %892 = shape_of(%890, dtype="int32") /* ty=Tensor[(1), int32] */;
  %893 = cast(%890, dtype="int8") /* ty=Tensor[(1120), int8] */;
  %894 = dyn.reshape(%891, %892, newshape=[]) /* ty=Tensor[(?), int8] */;
  add(%893, %894) /* ty=Tensor[(1120), int8] */
}

def @func_9673() -> Tensor[(1120), float32] {
  @func_5076() /* ty=Tensor[(1120), float32] */
}

def @func_5479(%var_5464: Tensor[(1120), float32]) -> (Tensor[(1120), uint8],) {
  %895 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %896 = %895.1;
  %897 = cast(%var_5464, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %898 = shape_of(%896, dtype="int32") /* ty=Tensor[(1), int32] */;
  %899 = cast(%896, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %900 = dyn.reshape(%897, %898, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %901 = left_shift(%899, %900) /* ty=Tensor[(1120), uint8] */;
  (%901,)
}

def @func_101(%var_91: Tensor[(2, 11, 1), uint16], %var_92: Tensor[(2, 11, 15), uint16], %var_97: Tensor[(1, 448), uint32]) -> (Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) {
  %902 = cast(%var_91, dtype="uint16") /* ty=Tensor[(2, 11, 1), uint16] */;
  %903 = cast(%var_92, dtype="uint16") /* ty=Tensor[(2, 11, 15), uint16] */;
  %904 = cast(%var_97, dtype="uint32") /* ty=Tensor[(1, 448), uint32] */;
  %905 = reshape(%904, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %906 = @func_81(%905) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %907 = logical_xor(%902, %903) /* ty=Tensor[(2, 11, 15), uint16] */;
  %908 = %906.0;
  (%907, %908, %var_97)
}

def @func_5110(%var_5106: Tensor[(3, 9, 14), int8]) -> Tensor[(3, 9, 14), int8] {
  %909 = cast(%var_5106, dtype="int8") /* ty=Tensor[(3, 9, 14), int8] */;
  %910 = shape_of(meta[relay.Constant][72] /* ty=Tensor[(3, 9, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %911 = cast(meta[relay.Constant][72] /* ty=Tensor[(3, 9, 14), int8] */, dtype="int8") /* ty=Tensor[(3, 9, 14), int8] */;
  %912 = dyn.reshape(%909, %910, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%911, %912) /* ty=Tensor[(3, 9, 14), int8] */
}

def @func_4291(%var_4274: Tensor[(1, 11, 7), uint64]) -> (Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) {
  %913 = cast(%var_4274, dtype="bool") /* ty=Tensor[(1, 11, 7), bool] */;
  %914 = cast(meta[relay.Constant][73] /* ty=Tensor[(11, 11, 7), uint64] */, dtype="bool") /* ty=Tensor[(11, 11, 7), bool] */;
  %915 = cast(meta[relay.Constant][74] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %916 = cast(meta[relay.Constant][74] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %917 = reshape(%915, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
  %918 = reshape(%916, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
  %919 = not_equal(%913, %914) /* ty=Tensor[(11, 11, 7), bool] */;
  %920 = @func_2303(%917, %918) /* ty=Tensor[(5, 16, 12), bool] */;
  (%919, %920, meta[relay.Constant][74] /* ty=Tensor[(960), int8] */)
}

def @func_10135(%var_10121: Tensor[(448), uint32], %var_10123: Tensor[(22), uint16], %var_10124: Tensor[(768), uint16]) -> (Tensor[(1120), int8], Tensor[(7, 7, 6), float32], Tensor[(96), float64], Tensor[(8, 140), float32], Tensor[(112, 2), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(77), uint64], Tensor[(22), uint16], Tensor[(768), uint16]) {
  %921 = @func_8534() /* ty=(Tensor[(1120), int8], Tensor[(1120), float32]) */;
  %922 = cast(meta[relay.Constant][75] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %923 = cast(meta[relay.Constant][75] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %924 = reshape(%922, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %925 = reshape(%923, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
  %926 = @func_5863(%924, %925) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(6, 2, 8), uint32], Tensor[(1, 1120), float32], Tensor[(8), float64], Tensor[(4, 280), float32]) */;
  %927 = cast(meta[relay.Constant][76] /* ty=Tensor[(112, 2), float32] */, dtype="float32") /* ty=Tensor[(112, 2), float32] */;
  %928 = cast(meta[relay.Constant][77] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %929 = cast(%var_10121, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %930 = cast(meta[relay.Constant][78] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %931 = %921.0;
  %932 = cast(%931, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %933 = cast(%var_10123, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %934 = cast(%var_10124, dtype="uint16") /* ty=Tensor[(768), uint16] */;
  %935 = reshape(%927, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %936 = reshape(%928, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %937 = reshape(%929, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %938 = reshape(%930, newshape=[11, 7]) /* ty=Tensor[(11, 7), uint64] */;
  %939 = reshape(%932, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %940 = reshape(%933, newshape=[22]) /* ty=Tensor[(22), uint16] */;
  %941 = reshape(%934, newshape=[768]) /* ty=Tensor[(768), uint16] */;
  %942 = @func_4777(%935, %936, %937, %938, %939, %940, %941) /* ty=(Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) */;
  %943 = %926.0;
  %944 = %942.5;
  (%931, %943, meta[relay.Constant][75] /* ty=Tensor[(96), float64] */, %944, meta[relay.Constant][76] /* ty=Tensor[(112, 2), float32] */, meta[relay.Constant][77] /* ty=Tensor[(3136), float64] */, %var_10121, meta[relay.Constant][78] /* ty=Tensor[(77), uint64] */, %var_10123, %var_10124)
}

def @func_8437(%var_8414: uint16, %var_8415: Tensor[(7, 15, 6), uint16]) -> (Tensor[(7, 15, 6), uint16], Tensor[(7, 15, 6), float64]) {
  %945 = cast(%var_8414, dtype="uint16") /* ty=uint16 */;
  %946 = cast(%var_8415, dtype="uint16") /* ty=Tensor[(7, 15, 6), uint16] */;
  %947 = cast(%var_8415, dtype="float64") /* ty=Tensor[(7, 15, 6), float64] */;
  %948 = bitwise_xor(%945, %946) /* ty=Tensor[(7, 15, 6), uint16] */;
  %949 = cos(%947) /* ty=Tensor[(7, 15, 6), float64] */;
  (%948, %949)
}

def @func_5923() -> Tensor[(1120), float32] {
  @func_5132() /* ty=Tensor[(1120), float32] */
}

def @func_8959() -> Tensor[(8), float32] {
  %950 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
  %950.2
}

def @func_10443() -> (Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  %951 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %952 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
  %953 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %954 = %951.0;
  %955 = %952.0;
  %956 = %953.0;
  %957 = @func_10101() /* ty=Tensor[(9, 2, 12), float32] */;
  (%954, %955, %956, %957)
}

def @func_7713() -> (Tensor[(9, 2, 12), float32],) {
  %958 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %959 = %958.0;
  (%959,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8183(%var_8182: Tensor[(1120), float32]) -> (Tensor[(1120), bool],) {
  %7 = fn (%var_8171: Tensor[(1120), float32]) -> (Tensor[(1120), bool],) {
    %0 = @func_5251() /* ty=(Tensor[(1120), float32],) */;
    %1 = %0.0;
    %2 = cast(%var_8171, dtype="bool") /* ty=Tensor[(1120), bool] */;
    %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
    %4 = cast(%1, dtype="bool") /* ty=Tensor[(1120), bool] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), bool] */;
    %6 = greater(%4, %5) /* ty=Tensor[(1120), bool] */;
    (%6,)
  };
  %7(%var_8182) /* ty=(Tensor[(1120), bool],) */
}

def @func_5202() -> (Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) {
  @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */
}

def @func_7018() -> (Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(13, 9, 11), float32]) {
  %8 = @func_5251() /* ty=(Tensor[(1120), float32],) */;
  %9 = @func_6794() /* ty=(Tensor[(13, 9, 11), float32],) */;
  %10 = %8.0;
  %11 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %12 = %9.0;
  (%10, %11, %12)
}

def @func_11303(%var_11216: Tensor[(6), uint64], %var_11282: Tensor[(756), float32]) -> (Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(6), uint64], Tensor[(?, 12, 11), uint8], Tensor[(490), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(9, 2, 12), float32], Tensor[(?, 12, 11), float64], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) {
  %13 = cast(%var_11216, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %14 = reshape(%13, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %15 = @func_7151(%14) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64]) */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 12, 11), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  %17 = cos(%16) /* ty=Tensor[(1, 12, 11), float32] */;
  %18 = cast(%17, dtype="float32") /* ty=Tensor[(1, 12, 11), float32] */;
  %19 = atan(%18) /* ty=Tensor[(1, 12, 11), float32] */;
  %20 = cast(%17, dtype="int8") /* ty=Tensor[(1, 12, 11), int8] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int8") /* ty=Tensor[(1, 12, 11), int8] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %24 = add(%22, %23) /* ty=Tensor[(?, 12, 11), int8] */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 12, 11), float32] */, dtype="bool") /* ty=Tensor[(1, 12, 11), bool] */;
  %26 = shape_of(%24, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%24, dtype="bool") /* ty=Tensor[(?, 12, 11), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = greater_equal(%27, %28) /* ty=Tensor[(?, 12, 11), bool] */;
  %30 = cast(%19, dtype="uint8") /* ty=Tensor[(1, 12, 11), uint8] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="uint8") /* ty=Tensor[(?, 12, 11), uint8] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %34 = %15.0;
  %35 = cast(%34, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %36 = reshape(%35, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %37 = @func_7527(%36) /* ty=(Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) */;
  %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
  %39 = reshape(%38, newshape=[3, 9, 14]) /* ty=Tensor[(3, 9, 14), int8] */;
  %40 = cast(%29, dtype="float32") /* ty=Tensor[(?, 12, 11), float32] */;
  %41 = acos(%40) /* ty=Tensor[(?, 12, 11), float32] */;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(?, 12, 11), float64] */;
  %43 = cast(%var_11282, dtype="float32") /* ty=Tensor[(756), float32] */;
  %44 = reshape(%43, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
  %45 = @func_10636() /* ty=Tensor[(1120), float32] */;
  %46 = maximum(%32, %33) /* ty=Tensor[(?, 12, 11), uint8] */;
  %47 = %37.2;
  %48 = @func_5110(%39) /* ty=Tensor[(3, 9, 14), int8] */;
  %49 = @func_9217() /* ty=Tensor[(9, 2, 12), float32] */;
  %50 = sin(%42) /* ty=Tensor[(?, 12, 11), float64] */;
  %51 = @func_5517(%44) /* ty=Tensor[(7, 9, 12), int16] */;
  (%45, %34, %var_11216, %46, %47, %48, meta[relay.Constant][1] /* ty=Tensor[(378), int8] */, %49, %50, %51, %var_11282)
}

def @func_10540() -> (float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) {
  @func_10538() /* ty=(float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) */
}

def @func_10917() -> (Tensor[(7, 7, 6), float32], Tensor[(5, 16, 12), bool], Tensor[(77), uint64], Tensor[(9, 2, 12), float32], Tensor[(8), float32], Tensor[(9, 2, 12), float32]) {
  %52 = @func_7056() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */;
  %53 = cast(meta[relay.Constant][2] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %54 = reshape(%53, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
  %55 = @func_4291(%54) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
  %56 = @func_6194() /* ty=Tensor[(9, 2, 12), float32] */;
  %57 = cast(%56, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %58 = @func_9408() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %59 = %52.1;
  %60 = %55.1;
  %61 = sigmoid(%57) /* ty=Tensor[(9, 2, 12), float32] */;
  %62 = @func_8959() /* ty=Tensor[(8), float32] */;
  %63 = %58.0;
  (%59, %60, meta[relay.Constant][2] /* ty=Tensor[(77), uint64] */, %61, %62, %63)
}

def @func_8904() -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) {
  %70 = fn () -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) {
    %64 = @func_6459() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */;
    %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %66 = reshape(%65, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
    %67 = @func_5041(%66) /* ty=(Tensor[(7, 7, 6), float32],) */;
    %68 = %64.0;
    %69 = %67.0;
    (%68, %69, meta[relay.Constant][3] /* ty=Tensor[(294), float32] */)
  };
  %70() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */
}

def @func_84(%var_82: Tensor[(2, 14, 16), uint32]) -> (Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) {
  @func_81(%var_82) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */
}

def @func_7527(%var_7522: Tensor[(9, 2, 12), float32]) -> (Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) {
  %71 = cast(-2.23819f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
  %73 = reshape(%71, newshape=[]) /* ty=float32 */;
  %74 = reshape(%72, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), float32] */;
  %75 = @func_6101(%73, %74) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */;
  %76 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %77 = %76.0;
  %78 = cast(%var_7522, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %79 = shape_of(%77, dtype="int32") /* ty=Tensor[(3), int32] */;
  %80 = cast(%77, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
  %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %82 = %75.2;
  %83 = logical_or(%80, %81) /* ty=Tensor[(9, 2, 12), bool] */;
  (%82, -2.23819f /* ty=float32 */, meta[relay.Constant][4] /* ty=Tensor[(490), float32] */, %83)
}

def @func_9539() -> (Tensor[(9, 2, 12), float32],) {
  %86 = fn () -> (Tensor[(9, 2, 12), float32],) {
    %84 = @func_7713() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %85 = %84.0;
    (%85,)
  };
  %86() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_7587(%var_7555: uint64, %var_7556: Tensor[(16, 5, 5), uint64]) -> (Tensor[(16, 5, 5), uint64], Tensor[(8), float32], Tensor[(16, 5, 5), uint64]) {
  %87 = cast(%var_7555, dtype="uint64") /* ty=uint64 */;
  %88 = cast(%var_7556, dtype="uint64") /* ty=Tensor[(16, 5, 5), uint64] */;
  %89 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
  %90 = cast(%var_7555, dtype="uint64") /* ty=uint64 */;
  %91 = cast(%var_7556, dtype="uint64") /* ty=Tensor[(16, 5, 5), uint64] */;
  %92 = bitwise_or(%87, %88) /* ty=Tensor[(16, 5, 5), uint64] */;
  %93 = %89.2;
  %94 = right_shift(%90, %91) /* ty=Tensor[(16, 5, 5), uint64] */;
  (%92, %93, %94)
}

def @func_5426() -> (Tensor[(9, 2, 12), float32],) {
  %97 = fn () -> (Tensor[(9, 2, 12), float32],) {
    %95 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %96 = %95.0;
    (%96,)
  };
  %97() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_5659(%var_5627: Tensor[(294), float32]) -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), bool]) {
  %98 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %99 = cast(%var_5627, dtype="float32") /* ty=Tensor[(294), float32] */;
  %100 = reshape(%99, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %101 = @func_5041(%100) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %102 = %101.0;
  %103 = cast(%var_5627, dtype="uint64") /* ty=Tensor[(294), uint64] */;
  %104 = shape_of(%102, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%102, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %107 = bitwise_and(%105, %106) /* ty=Tensor[(7, 7, 6), uint64] */;
  %108 = cast(%102, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %112 = %98.0;
  %113 = logical_and(%110, %111) /* ty=Tensor[(7, 7, 6), bool] */;
  (%112, %113)
}

def @func_7205(%var_7202: float64) -> (Tensor[(1120), float32], Tensor[(3136), float64], float64, Tensor[(448), uint32]) {
  %114 = @func_7056() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */;
  %115 = cast(%var_7202, dtype="float64") /* ty=float64 */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %117 = reshape(%115, newshape=[]) /* ty=float64 */;
  %118 = reshape(%116, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %119 = @func_2047(%117, %118) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */;
  %120 = %114.0;
  %121 = %119.3;
  (%120, %121, %var_7202, meta[relay.Constant][5] /* ty=Tensor[(448), uint32] */)
}

def @func_9831() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) {
  @func_9829() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) */
}

def @func_7414() -> Tensor[(9, 2, 12), float32] {
  @func_7412() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_5359(%var_5315: Tensor[(1120), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) {
  %122 = cast(meta[relay.Constant][6] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %123 = reshape(%122, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %124 = @func_5041(%123) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %125 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %126 = cast(%var_5315, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(1), int32] */;
  %128 = cast(%125, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?), float32] */;
  %130 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
  %132 = reshape(%131, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %133 = @func_5041(%132) /* ty=(Tensor[(7, 7, 6), float32],) */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %135 = cast(meta[relay.Constant][8] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %136 = reshape(%134, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), float64] */;
  %137 = reshape(%135, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %138 = @func_4068(%136, %137) /* ty=(Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) */;
  %139 = %124.0;
  %140 = floor_mod(%128, %129) /* ty=Tensor[(1120), float32] */;
  %141 = %130.0;
  %142 = %133.0;
  %143 = %138.3;
  (%139, meta[relay.Constant][6] /* ty=Tensor[(294), float32] */, %140, %141, %142, %143, meta[relay.Constant][7] /* ty=Tensor[(234), float64] */, meta[relay.Constant][8] /* ty=Tensor[(6), uint64] */)
}

def @func_7835(%var_7834: Tensor[(16, 3, 16), uint16]) -> (Tensor[(16, 3, 16), uint16], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  %151 = fn (%var_7795: Tensor[(16, 3, 16), uint16]) -> (Tensor[(16, 3, 16), uint16], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
    %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(16, 1, 16), uint16] */, dtype="uint16") /* ty=Tensor[(16, 1, 16), uint16] */;
    %145 = cast(%var_7795, dtype="uint16") /* ty=Tensor[(16, 3, 16), uint16] */;
    %146 = @func_7412() /* ty=Tensor[(9, 2, 12), float32] */;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
    %148 = add(%144, %145) /* ty=Tensor[(16, 3, 16), uint16] */;
    %149 = acos(%147) /* ty=Tensor[(9, 2, 12), float32] */;
    %150 = @func_7412() /* ty=Tensor[(9, 2, 12), float32] */;
    (%148, %149, %150)
  };
  %151(%var_7834) /* ty=(Tensor[(16, 3, 16), uint16], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */
}

def @func_6714() -> (Tensor[(9, 2, 12), float32],) {
  %152 = @func_5973() /* ty=Tensor[(9, 2, 12), float32] */;
  (%152,)
}

def @func_7120() -> (Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), uint8]) {
  %161 = fn () -> (Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), uint8]) {
    %153 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
    %154 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %155 = %153.1;
    %156 = cast(%155, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %157 = reshape(%156, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
    %158 = @func_5479(%157) /* ty=(Tensor[(1120), uint8],) */;
    %159 = %154.0;
    %160 = %158.0;
    (%155, %159, %160)
  };
  %161() /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), uint8]) */
}

def @func_6410() -> (Tensor[(1120), float32],) {
  @func_6408() /* ty=(Tensor[(1120), float32],) */
}

def @func_9352(%var_9335: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(448), uint32], float64) {
  %162 = cast(%var_9335, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %163 = reshape(%162, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %164 = @func_8363(%163) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(84), float64]) */;
  %165 = cast(7.67688f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %166 = %164.1;
  %167 = cast(%166, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %168 = reshape(%165, newshape=[]) /* ty=float64 */;
  %169 = reshape(%167, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %170 = @func_2047(%168, %169) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */;
  %171 = @func_9217() /* ty=Tensor[(9, 2, 12), float32] */;
  %172 = @func_5923() /* ty=Tensor[(1120), float32] */;
  %173 = %170.4;
  (%171, %172, %166, %var_9335, %173, 7.67688f64 /* ty=float64 */)
}

def @func_10102() -> Tensor[(9, 2, 12), float32] {
  %175 = fn () -> Tensor[(9, 2, 12), float32] {
    %174 = @func_7451() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) */;
    %174.0
  };
  %175() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_6195() -> Tensor[(9, 2, 12), float32] {
  %176 = fn () -> Tensor[(9, 2, 12), float32] {
    @func_5973() /* ty=Tensor[(9, 2, 12), float32] */
  };
  %176() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_8727() -> (Tensor[(1120), float32], Tensor[(9, 2, 12), bool]) {
  %185 = fn () -> (Tensor[(1120), float32], Tensor[(9, 2, 12), bool]) {
    %177 = @func_7978() /* ty=(Tensor[(1120), float32],) */;
    %178 = @func_8034() /* ty=Tensor[(9, 2, 12), float32] */;
    %179 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 2, 12), float32] */, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
    %180 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%178, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %183 = %177.0;
    %184 = less(%181, %182) /* ty=Tensor[(9, 2, 12), bool] */;
    (%183, %184)
  };
  %185() /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), bool]) */
}

def @func_11307(%var_11305: Tensor[(6), uint64], %var_11306: Tensor[(756), float32]) -> (Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(6), uint64], Tensor[(?, 12, 11), uint8], Tensor[(490), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(9, 2, 12), float32], Tensor[(?, 12, 11), float64], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) {
  @func_11303(%var_11305, %var_11306) /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(6), uint64], Tensor[(?, 12, 11), uint8], Tensor[(490), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(9, 2, 12), float32], Tensor[(?, 12, 11), float64], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) */
}

def @func_10781() -> Tensor[(9, 2, 12), float32] {
  @func_10779() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_11354() -> Tensor[(12, 18), float32] {
  %187 = fn () -> Tensor[(12, 18), float32] {
    %186 = @func_10826() /* ty=(Tensor[(1120), float32], Tensor[(490), float32], Tensor[(12, 18), float32]) */;
    %186.2
  };
  %187() /* ty=Tensor[(12, 18), float32] */
}

def @func_9059() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) {
  %188 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %189 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %190 = %188.2;
  %191 = %189.0;
  (%190, %191)
}

def @func_10636() -> Tensor[(1120), float32] {
  @func_5076() /* ty=Tensor[(1120), float32] */
}

def @func_9408() -> (Tensor[(9, 2, 12), float32],) {
  %192 = @func_9059() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) */;
  %193 = %192.0;
  (%193,)
}

def @func_9919(%var_9917: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float32], Tensor[(9, 2, 12), float32], Tensor[(16, 10, 8), bool], Tensor[(1120), float32]) {
  @func_9916(%var_9917) /* ty=(Tensor[(16, 10, 8), float32], Tensor[(9, 2, 12), float32], Tensor[(16, 10, 8), bool], Tensor[(1120), float32]) */
}

def @func_10826() -> (Tensor[(1120), float32], Tensor[(490), float32], Tensor[(12, 18), float32]) {
  %194 = @func_9059() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) */;
  %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 18), float32] */, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %196 = reshape(%195, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %197 = @func_7527(%196) /* ty=(Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) */;
  %198 = %194.1;
  %199 = %197.2;
  (%198, %199, meta[relay.Constant][11] /* ty=Tensor[(12, 18), float32] */)
}

def @func_7287() -> Tensor[(9, 2, 12), float32] {
  %201 = fn () -> Tensor[(9, 2, 12), float32] {
    %200 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
    %200.0
  };
  %201() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_8996(%var_8995: Tensor[(16, 16, 3), uint32]) -> Tensor[(16, 16, 3), bool] {
  %206 = fn (%var_8976: Tensor[(16, 16, 3), uint32]) -> Tensor[(16, 16, 3), bool] {
    %202 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 16, 3), uint32] */, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
    %203 = shape_of(%var_8976, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%var_8976, dtype="bool") /* ty=Tensor[(16, 16, 3), bool] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%204, %205) /* ty=Tensor[(16, 16, 3), bool] */
  };
  %206(%var_8995) /* ty=Tensor[(16, 16, 3), bool] */
}

def @func_5482(%var_5480: Tensor[(1120), float32]) -> (Tensor[(1120), uint8],) {
  @func_5479(%var_5480) /* ty=(Tensor[(1120), uint8],) */
}

def @func_10919() -> (Tensor[(7, 7, 6), float32], Tensor[(5, 16, 12), bool], Tensor[(77), uint64], Tensor[(9, 2, 12), float32], Tensor[(8), float32], Tensor[(9, 2, 12), float32]) {
  @func_10917() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(5, 16, 12), bool], Tensor[(77), uint64], Tensor[(9, 2, 12), float32], Tensor[(8), float32], Tensor[(9, 2, 12), float32]) */
}

def @func_7057() -> (Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) {
  %212 = fn () -> (Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) {
    %207 = @func_5923() /* ty=Tensor[(1120), float32] */;
    %208 = cast(%207, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %209 = reshape(%208, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
    %210 = @func_5359(%209) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) */;
    %211 = %210.0;
    (%207, %211)
  };
  %212() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */
}

def @func_8478() -> (Tensor[(13, 9, 11), float32], Tensor[(3, 14, 7), uint16]) {
  @func_8476() /* ty=(Tensor[(13, 9, 11), float32], Tensor[(3, 14, 7), uint16]) */
}

def @func_10951(%var_10949: Tensor[(10, 13, 16), float32]) -> (Tensor[(10, 13, 16), float32],) {
  @func_10948(%var_10949) /* ty=(Tensor[(10, 13, 16), float32],) */
}

def @func_5078() -> Tensor[(1120), float32] {
  @func_5076() /* ty=Tensor[(1120), float32] */
}

def @func_7153(%var_7152: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64]) {
  %218 = fn (%var_7149: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64]) {
    %213 = @func_7119() /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), uint8]) */;
    %214 = cast(%var_7149, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %215 = reshape(%214, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
    %216 = %213.1;
    %217 = @func_2422(%215) /* ty=Tensor[(3, 11, 2), uint64] */;
    (%216, %217, %var_7149)
  };
  %218(%var_7152) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64]) */
}

def @func_5974() -> Tensor[(9, 2, 12), float32] {
  %220 = fn () -> Tensor[(9, 2, 12), float32] {
    %219 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
    %219.2
  };
  %220() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_8297() -> (Tensor[(3, 14, 7), uint16],) {
  @func_8295() /* ty=(Tensor[(3, 14, 7), uint16],) */
}

def @func_6846(%var_6844: Tensor[(11, 7, 7), float64]) -> (Tensor[(11, 7, 7), float64],) {
  @func_6843(%var_6844) /* ty=(Tensor[(11, 7, 7), float64],) */
}

def @func_4785(%var_4778: Tensor[(4, 14, 4), float32], %var_4779: Tensor[(3136), float64], %var_4780: Tensor[(448), uint32], %var_4781: Tensor[(11, 7), uint64], %var_4782: Tensor[(1120), float32], %var_4783: Tensor[(22), uint16], %var_4784: Tensor[(768), uint16]) -> (Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) {
  %287 = fn (%var_4668: Tensor[(4, 14, 4), float32], %var_4683: Tensor[(3136), float64], %var_4684: Tensor[(448), uint32], %var_4705: Tensor[(11, 7), uint64], %var_4732: Tensor[(1120), float32], %var_4762: Tensor[(22), uint16], %var_4766: Tensor[(768), uint16]) -> (Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) {
    %221 = cast(%var_4668, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
    %222 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(4, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %223 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(4, 14, 4), float32] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %225 = cast(%var_4705, dtype="uint64") /* ty=Tensor[(11, 7), uint64] */;
    %226 = reshape(%225, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
    %227 = @func_4291(%226) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
    %228 = %227.1;
    %229 = cast(%228, dtype="int8") /* ty=Tensor[(5, 16, 12), int8] */;
    %230 = cast(%228, dtype="int8") /* ty=Tensor[(5, 16, 12), int8] */;
    %231 = reshape(%229, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
    %232 = reshape(%230, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
    %233 = cast(meta[relay.Constant][14] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
    %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
    %235 = cast(%var_4683, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %236 = cast(%var_4684, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %237 = reshape(%235, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
    %238 = reshape(%236, newshape=[448]) /* ty=Tensor[(448), uint32] */;
    %239 = @func_441(%237, %238) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
    %240 = %239.2;
    %241 = cast(%240, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %242 = shape_of(%var_4683, dtype="int32") /* ty=Tensor[(1), int32] */;
    %243 = cast(%var_4683, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?), float64] */;
    %245 = add(%243, %244) /* ty=Tensor[(3136), float64] */;
    %246 = cast(%245, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %247 = cast(%var_4684, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %248 = cast(%var_4732, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %249 = reshape(%233, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
    %250 = reshape(%234, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
    %251 = reshape(%246, newshape=[3136, 1]) /* ty=Tensor[(3136, 1), float64] */;
    %252 = reshape(%247, newshape=[448]) /* ty=Tensor[(448), uint32] */;
    %253 = reshape(%248, newshape=[8, 140]) /* ty=Tensor[(8, 140), float32] */;
    %254 = @func_2714(%249, %250, %251, %252, %253) /* ty=(Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) */;
    %255 = cast(%var_4684, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %256 = reshape(%255, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
    %257 = @func_81(%256) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
    %258 = cast(%var_4683, dtype="float32") /* ty=Tensor[(3136), float32] */;
    %259 = log2(%258) /* ty=Tensor[(3136), float32] */;
    %260 = cast(%245, dtype="bool") /* ty=Tensor[(3136), bool] */;
    %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(1), int32] */;
    %262 = cast(%259, dtype="bool") /* ty=Tensor[(3136), bool] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?), bool] */;
    %264 = greater(%262, %263) /* ty=Tensor[(3136), bool] */;
    %265 = cast(%240, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(1), int32] */;
    %267 = cast(%264, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %269 = cast(%var_4762, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %270 = cast(meta[relay.Constant][15] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %271 = %257.1;
    %272 = cast(%271, dtype="uint32") /* ty=Tensor[(2, 14, 16), uint32] */;
    %273 = reshape(%269, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), uint16] */;
    %274 = reshape(%270, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %275 = reshape(%272, newshape=[1, 448]) /* ty=Tensor[(1, 448), uint32] */;
    %276 = @func_101(%273, %274, %275) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */;
    %277 = cast(%var_4766, dtype="uint16") /* ty=Tensor[(768), uint16] */;
    %278 = reshape(%277, newshape=[4, 12, 16]) /* ty=Tensor[(4, 12, 16), uint16] */;
    %279 = cast(%259, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %280 = multiply(%223, %224) /* ty=Tensor[(4, 14, 4), float32] */;
    %281 = @func_2303(%231, %232) /* ty=Tensor[(5, 16, 12), bool] */;
    %282 = %254.4;
    %283 = left_shift(%267, %268) /* ty=Tensor[(3136), uint16] */;
    %284 = %276.1;
    %285 = @func_1492(%278) /* ty=Tensor[(4, 12, 16), uint16] */;
    %286 = sin(%279) /* ty=Tensor[(3136), float64] */;
    (%280, %var_4684, %228, %var_4705, %281, %282, meta[relay.Constant][14] /* ty=Tensor[(294), uint16] */, %var_4732, %271, %283, %284, %var_4762, meta[relay.Constant][15] /* ty=Tensor[(330), uint16] */, %285, %var_4766, %286)
  };
  %287(%var_4778, %var_4779, %var_4780, %var_4781, %var_4782, %var_4783, %var_4784) /* ty=(Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) */
}

def @func_5757(%var_5751: float64) -> (Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) {
  %288 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %289 = %288.0;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %291 = cast(%var_5751, dtype="float64") /* ty=float64 */;
  %292 = cast(meta[relay.Constant][16] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %293 = reshape(%291, newshape=[]) /* ty=float64 */;
  %294 = reshape(%292, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %295 = @func_2047(%293, %294) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */;
  %296 = cos(%290) /* ty=Tensor[(1120), float64] */;
  %297 = %295.2;
  (%296, %297, %var_5751, meta[relay.Constant][16] /* ty=Tensor[(448), uint32] */)
}

def @func_8959() -> Tensor[(8), float32] {
  %298 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
  %298.2
}

def @func_2714(%var_2664: Tensor[(3, 14, 7), uint16], %var_2665: Tensor[(3, 14, 7), uint16], %var_2687: Tensor[(3136, 1), float64], %var_2688: Tensor[(448), uint32], %var_2696: Tensor[(8, 140), float32]) -> (Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) {
  %299 = cast(%var_2665, dtype="uint16") /* ty=Tensor[(3, 14, 7), uint16] */;
  %300 = shape_of(%var_2664, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%var_2664, dtype="uint16") /* ty=Tensor[(3, 14, 7), uint16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %303 = cast(%var_2687, dtype="float64") /* ty=Tensor[(3136, 1), float64] */;
  %304 = cast(%var_2688, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %305 = reshape(%303, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %306 = reshape(%304, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %307 = @func_441(%305, %306) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %308 = %307.3;
  %309 = cast(%308, dtype="float64") /* ty=Tensor[(22), float64] */;
  %310 = cast(%var_2687, dtype="float64") /* ty=Tensor[(3136, 1), float64] */;
  %311 = cast(%var_2696, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %312 = cast(%var_2696, dtype="float32") /* ty=Tensor[(8, 140), float32] */;
  %313 = reshape(%311, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %314 = reshape(%312, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %315 = cast(%var_2687, dtype="float64") /* ty=Tensor[(3136, 1), float64] */;
  %316 = cast(%var_2688, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %317 = reshape(%315, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %318 = reshape(%316, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %319 = @func_441(%317, %318) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %320 = add(%301, %302) /* ty=Tensor[(3, 14, 7), uint16] */;
  %321 = floor_mod(%309, %310) /* ty=Tensor[(3136, 22), float64] */;
  %322 = @func_1105(%313, %314) /* ty=Tensor[(16, 14, 5), float32] */;
  %323 = %319.3;
  (%320, %var_2688, %321, %322, %var_2696, %323)
}

def @func_2424(%var_2423: Tensor[(3, 1, 2), uint64]) -> Tensor[(3, 11, 2), uint64] {
  %326 = fn (%var_2412: Tensor[(3, 1, 2), uint64]) -> Tensor[(3, 11, 2), uint64] {
    %324 = cast(%var_2412, dtype="uint64") /* ty=Tensor[(3, 1, 2), uint64] */;
    %325 = cast(meta[relay.Constant][17] /* ty=Tensor[(3, 11, 2), uint64] */, dtype="uint64") /* ty=Tensor[(3, 11, 2), uint64] */;
    minimum(%324, %325) /* ty=Tensor[(3, 11, 2), uint64] */
  };
  %326(%var_2423) /* ty=Tensor[(3, 11, 2), uint64] */
}

def @func_10733() -> (Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) {
  %331 = fn () -> (Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) {
    %327 = @func_9538() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %328 = @func_10538() /* ty=(float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) */;
    %329 = %327.0;
    %330 = %328.3;
    (%329, %330)
  };
  %331() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) */
}

def @func_5251() -> (Tensor[(1120), float32],) {
  %332 = @func_5132() /* ty=Tensor[(1120), float32] */;
  (%332,)
}

def @func_1108(%var_1106: Tensor[(16, 14, 5), float32], %var_1107: Tensor[(16, 14, 5), float32]) -> Tensor[(16, 14, 5), float32] {
  %337 = fn (%var_1100: Tensor[(16, 14, 5), float32], %var_1101: Tensor[(16, 14, 5), float32]) -> Tensor[(16, 14, 5), float32] {
    %333 = cast(%var_1101, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
    %334 = shape_of(%var_1100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %335 = cast(%var_1100, dtype="float32") /* ty=Tensor[(16, 14, 5), float32] */;
    %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%335, %336) /* ty=Tensor[(16, 14, 5), float32] */
  };
  %337(%var_1106, %var_1107) /* ty=Tensor[(16, 14, 5), float32] */
}

def @func_7381() -> (Tensor[(1120), float64],) {
  %345 = fn () -> (Tensor[(1120), float64],) {
    %338 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
    %339 = %338.0;
    %340 = cast(meta[relay.Constant][18] /* ty=Tensor[(1120), float32] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(1), int32] */;
    %342 = cast(%339, dtype="float64") /* ty=Tensor[(1120), float64] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?), float64] */;
    %344 = divide(%342, %343) /* ty=Tensor[(1120), float64] */;
    (%344,)
  };
  %345() /* ty=(Tensor[(1120), float64],) */
}

def @func_6757() -> Tensor[(1120), float32] {
  %346 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
  %346.0
}

def @func_8643() -> (Tensor[(1120), float32], float64, float64) {
  %347 = cast(-4.1133f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %348 = reshape(%347, newshape=[]) /* ty=float64 */;
  %349 = @func_5757(%348) /* ty=(Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */;
  %350 = @func_6757() /* ty=Tensor[(1120), float32] */;
  %351 = %349.2;
  (%350, %351, -4.1133f64 /* ty=float64 */)
}

def @func_8645() -> (Tensor[(1120), float32], float64, float64) {
  @func_8643() /* ty=(Tensor[(1120), float32], float64, float64) */
}

def @func_6899(%var_6897: Tensor[(9, 2, 12), float32]) -> (Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float64]) {
  @func_6896(%var_6897) /* ty=(Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float64]) */
}

def @func_331(%var_328: Tensor[(14, 16, 14), float64], %var_329: Tensor[(22), uint16], %var_330: Tensor[(448), uint32]) -> (Tensor[(14, 16, 14), float64], Tensor[(14, 16, 14), float32], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32]) {
  %367 = fn (%var_310: Tensor[(14, 16, 14), float64], %var_319: Tensor[(22), uint16], %var_321: Tensor[(448), uint32]) -> (Tensor[(14, 16, 14), float64], Tensor[(14, 16, 14), float32], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32]) {
    %352 = cast(%var_310, dtype="float64") /* ty=Tensor[(14, 16, 14), float64] */;
    %353 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(14, 16, 14), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 16, 14), float64] */, dtype="float64") /* ty=Tensor[(14, 16, 14), float64] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %356 = cast(%var_310, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
    %357 = cast(%var_319, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %359 = cast(%var_321, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %360 = reshape(%357, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), uint16] */;
    %361 = reshape(%358, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %362 = reshape(%359, newshape=[1, 448]) /* ty=Tensor[(1, 448), uint32] */;
    %363 = @func_101(%360, %361, %362) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */;
    %364 = floor_divide(%354, %355) /* ty=Tensor[(14, 16, 14), float64] */;
    %365 = rsqrt(%356) /* ty=Tensor[(14, 16, 14), float32] */;
    %366 = %363.1;
    (%364, %365, %366, %var_319, meta[relay.Constant][20] /* ty=Tensor[(330), uint16] */, %var_321)
  };
  %367(%var_328, %var_329, %var_330) /* ty=(Tensor[(14, 16, 14), float64], Tensor[(14, 16, 14), float32], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32]) */
}

def @func_5253() -> (Tensor[(1120), float32],) {
  @func_5251() /* ty=(Tensor[(1120), float32],) */
}

def @func_6648(%var_6647: Tensor[(1120), float32]) -> (Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), int32]) {
  %378 = fn (%var_6636: Tensor[(1120), float32]) -> (Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), int32]) {
    %368 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %369 = @func_6289() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32]) */;
    %370 = %369.0;
    %371 = cast(%var_6636, dtype="int32") /* ty=Tensor[(1120), int32] */;
    %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(1), int32] */;
    %373 = cast(%370, dtype="int32") /* ty=Tensor[(1120), int32] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?), int32] */;
    %375 = %368.0;
    %376 = @func_6194() /* ty=Tensor[(9, 2, 12), float32] */;
    %377 = bitwise_or(%373, %374) /* ty=Tensor[(1120), int32] */;
    (%375, %376, %377)
  };
  %378(%var_6647) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), int32]) */
}

def @func_6169(%var_6167: Tensor[(9, 2, 12), float32], %var_6168: Tensor[(9, 2, 12), float32]) -> (Tensor[(9, 2, 12), bool], Tensor[(9, 2, 12), int32], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) {
  %394 = fn (%var_6150: Tensor[(9, 2, 12), float32], %var_6156: Tensor[(9, 2, 12), float32]) -> (Tensor[(9, 2, 12), bool], Tensor[(9, 2, 12), int32], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) {
    %379 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %380 = %379.0;
    %381 = cast(%var_6150, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
    %382 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(%380, dtype="bool") /* ty=Tensor[(9, 2, 12), bool] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %385 = cast(%var_6156, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
    %386 = shape_of(%380, dtype="int32") /* ty=Tensor[(3), int32] */;
    %387 = cast(%380, dtype="int32") /* ty=Tensor[(9, 2, 12), int32] */;
    %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %389 = cast(meta[relay.Constant][21] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %390 = reshape(%389, newshape=[7, 9, 12]) /* ty=Tensor[(7, 9, 12), float32] */;
    %391 = greater(%383, %384) /* ty=Tensor[(9, 2, 12), bool] */;
    %392 = add(%387, %388) /* ty=Tensor[(9, 2, 12), int32] */;
    %393 = @func_5517(%390) /* ty=Tensor[(7, 9, 12), int16] */;
    (%391, %392, %393, meta[relay.Constant][21] /* ty=Tensor[(756), float32] */)
  };
  %394(%var_6167, %var_6168) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(9, 2, 12), int32], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) */
}

def @func_10199() -> Tensor[(9, 2, 12), float32] {
  @func_10197() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_11417() -> Tensor[(9, 2, 12), float32] {
  %396 = fn () -> Tensor[(9, 2, 12), float32] {
    %395 = @func_10443() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */;
    %395.2
  };
  %396() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_5923() -> Tensor[(1120), float32] {
  @func_5132() /* ty=Tensor[(1120), float32] */
}

def @func_6221() -> (Tensor[(1120), float32],) {
  %398 = fn () -> (Tensor[(1120), float32],) {
    %397 = @func_5132() /* ty=Tensor[(1120), float32] */;
    (%397,)
  };
  %398() /* ty=(Tensor[(1120), float32],) */
}

def @func_8853(%var_8796: Tensor[(12, 4, 10), float64], %var_8797: Tensor[(12, 4, 10), float64], %var_8806: Tensor[(1890), uint64], %var_8818: Tensor[(429), float64], %var_8831: Tensor[(3136), float64], %var_8833: Tensor[(2, 560), float32]) -> (Tensor[(12, 4, 10), float64], Tensor[(1890), bool], Tensor[(77), uint64], Tensor[(39), float64], Tensor[(429), float64], Tensor[(9, 2, 12), float32], Tensor[(220, 2), float64], Tensor[(4, 12, 16), uint16], Tensor[(224), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(2, 560), float32], Tensor[(22), uint16], Tensor[(768), uint16], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) {
  %399 = cast(%var_8797, dtype="float64") /* ty=Tensor[(12, 4, 10), float64] */;
  %400 = shape_of(%var_8796, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_8796, dtype="float64") /* ty=Tensor[(12, 4, 10), float64] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %403 = cast(%var_8806, dtype="uint64") /* ty=Tensor[(1890), uint64] */;
  %404 = reshape(%403, newshape=[9, 15, 14]) /* ty=Tensor[(9, 15, 14), uint64] */;
  %405 = @func_5415(%404) /* ty=Tensor[(9, 15, 14), uint64] */;
  %406 = cast(%405, dtype="bool") /* ty=Tensor[(9, 15, 14), bool] */;
  %407 = shape_of(%var_8806, dtype="int32") /* ty=Tensor[(1), int32] */;
  %408 = cast(%var_8806, dtype="bool") /* ty=Tensor[(1890), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?), bool] */;
  %410 = cast(meta[relay.Constant][22] /* ty=Tensor[(39), float64] */, dtype="float64") /* ty=Tensor[(39), float64] */;
  %411 = cast(%var_8818, dtype="float64") /* ty=Tensor[(429), float64] */;
  %412 = reshape(%410, newshape=[1, 3, 13]) /* ty=Tensor[(1, 3, 13), float64] */;
  %413 = reshape(%411, newshape=[11, 3, 13]) /* ty=Tensor[(11, 3, 13), float64] */;
  %414 = @func_5591(%412, %413) /* ty=(Tensor[(11, 3, 13), float64], Tensor[(1120), float32], Tensor[(1120), uint8], Tensor[(11, 3, 13), float64], Tensor[(5, 16, 12), bool], Tensor[(77), uint64]) */;
  %415 = cast(meta[relay.Constant][23] /* ty=Tensor[(220, 2), float64] */, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
  %416 = cast(meta[relay.Constant][23] /* ty=Tensor[(220, 2), float64] */, dtype="float64") /* ty=Tensor[(220, 2), float64] */;
  %417 = reshape(%415, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %418 = reshape(%416, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %419 = @func_8514(%417, %418) /* ty=(Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */;
  %420 = cast(meta[relay.Constant][24] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %421 = cast(%var_8831, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %422 = cast(meta[relay.Constant][25] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %423 = %414.5;
  %424 = cast(%423, dtype="uint64") /* ty=Tensor[(77), uint64] */;
  %425 = cast(%var_8833, dtype="float32") /* ty=Tensor[(2, 560), float32] */;
  %426 = cast(meta[relay.Constant][26] /* ty=Tensor[(22), uint16] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
  %427 = cast(meta[relay.Constant][27] /* ty=Tensor[(768), uint16] */, dtype="uint16") /* ty=Tensor[(768), uint16] */;
  %428 = reshape(%420, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
  %429 = reshape(%421, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %430 = reshape(%422, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %431 = reshape(%424, newshape=[11, 7]) /* ty=Tensor[(11, 7), uint64] */;
  %432 = reshape(%425, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %433 = reshape(%426, newshape=[22]) /* ty=Tensor[(22), uint16] */;
  %434 = reshape(%427, newshape=[768]) /* ty=Tensor[(768), uint16] */;
  %435 = @func_4777(%428, %429, %430, %431, %432, %433, %434) /* ty=(Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) */;
  %436 = cast(meta[relay.Constant][28] /* ty=Tensor[(234), float64] */, dtype="float64") /* ty=Tensor[(234), float64] */;
  %437 = cast(meta[relay.Constant][29] /* ty=Tensor[(6), uint64] */, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %438 = reshape(%436, newshape=[13, 9, 2]) /* ty=Tensor[(13, 9, 2), float64] */;
  %439 = reshape(%437, newshape=[6]) /* ty=Tensor[(6), uint64] */;
  %440 = @func_4068(%438, %439) /* ty=(Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) */;
  %441 = floor_divide(%401, %402) /* ty=Tensor[(12, 4, 10), float64] */;
  %442 = greater(%408, %409) /* ty=Tensor[(1890), bool] */;
  %443 = %419.2;
  %444 = %435.13;
  %445 = %440.3;
  (%441, %442, %423, meta[relay.Constant][22] /* ty=Tensor[(39), float64] */, %var_8818, %443, meta[relay.Constant][23] /* ty=Tensor[(220, 2), float64] */, %444, meta[relay.Constant][24] /* ty=Tensor[(224), float32] */, %var_8831, meta[relay.Constant][25] /* ty=Tensor[(448), uint32] */, %var_8833, meta[relay.Constant][26] /* ty=Tensor[(22), uint16] */, meta[relay.Constant][27] /* ty=Tensor[(768), uint16] */, %445, meta[relay.Constant][28] /* ty=Tensor[(234), float64] */, meta[relay.Constant][29] /* ty=Tensor[(6), uint64] */)
}

def @func_2306(%var_2304: Tensor[(5, 16, 12), int8], %var_2305: Tensor[(5, 16, 12), int8]) -> Tensor[(5, 16, 12), bool] {
  %450 = fn (%var_2291: Tensor[(5, 16, 12), int8], %var_2292: Tensor[(5, 16, 12), int8]) -> Tensor[(5, 16, 12), bool] {
    %446 = cast(%var_2292, dtype="bool") /* ty=Tensor[(5, 16, 12), bool] */;
    %447 = shape_of(%var_2291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %448 = cast(%var_2291, dtype="bool") /* ty=Tensor[(5, 16, 12), bool] */;
    %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%448, %449) /* ty=Tensor[(5, 16, 12), bool] */
  };
  %450(%var_2304, %var_2305) /* ty=Tensor[(5, 16, 12), bool] */
}

def @func_8961() -> Tensor[(8), float32] {
  @func_8959() /* ty=Tensor[(8), float32] */
}

def @func_5417(%var_5416: Tensor[(9, 15, 14), uint64]) -> Tensor[(9, 15, 14), uint64] {
  %455 = fn (%var_5395: Tensor[(9, 15, 14), uint64]) -> Tensor[(9, 15, 14), uint64] {
    %451 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 15, 14), uint64] */, dtype="uint64") /* ty=Tensor[(9, 15, 14), uint64] */;
    %452 = shape_of(%var_5395, dtype="int32") /* ty=Tensor[(3), int32] */;
    %453 = cast(%var_5395, dtype="uint64") /* ty=Tensor[(9, 15, 14), uint64] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    right_shift(%453, %454) /* ty=Tensor[(9, 15, 14), uint64] */
  };
  %455(%var_5416) /* ty=Tensor[(9, 15, 14), uint64] */
}

def @func_7591(%var_7589: uint64, %var_7590: Tensor[(16, 5, 5), uint64]) -> (Tensor[(16, 5, 5), uint64], Tensor[(8), float32], Tensor[(16, 5, 5), uint64]) {
  @func_7587(%var_7589, %var_7590) /* ty=(Tensor[(16, 5, 5), uint64], Tensor[(8), float32], Tensor[(16, 5, 5), uint64]) */
}

def @func_5594(%var_5592: Tensor[(1, 3, 13), float64], %var_5593: Tensor[(11, 3, 13), float64]) -> (Tensor[(11, 3, 13), float64], Tensor[(1120), float32], Tensor[(1120), uint8], Tensor[(11, 3, 13), float64], Tensor[(5, 16, 12), bool], Tensor[(77), uint64]) {
  %470 = fn (%var_5551: Tensor[(1, 3, 13), float64], %var_5552: Tensor[(11, 3, 13), float64]) -> (Tensor[(11, 3, 13), float64], Tensor[(1120), float32], Tensor[(1120), uint8], Tensor[(11, 3, 13), float64], Tensor[(5, 16, 12), bool], Tensor[(77), uint64]) {
    %456 = cast(%var_5551, dtype="float64") /* ty=Tensor[(1, 3, 13), float64] */;
    %457 = cast(%var_5552, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
    %458 = @func_5132() /* ty=Tensor[(1120), float32] */;
    %459 = cast(%458, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %460 = reshape(%459, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
    %461 = @func_5479(%460) /* ty=(Tensor[(1120), uint8],) */;
    %462 = cast(%var_5552, dtype="float64") /* ty=Tensor[(11, 3, 13), float64] */;
    %463 = cast(meta[relay.Constant][31] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
    %464 = reshape(%463, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
    %465 = @func_4291(%464) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
    %466 = power(%456, %457) /* ty=Tensor[(11, 3, 13), float64] */;
    %467 = %461.0;
    %468 = atanh(%462) /* ty=Tensor[(11, 3, 13), float64] */;
    %469 = %465.1;
    (%466, %458, %467, %468, %469, meta[relay.Constant][31] /* ty=Tensor[(77), uint64] */)
  };
  %470(%var_5592, %var_5593) /* ty=(Tensor[(11, 3, 13), float64], Tensor[(1120), float32], Tensor[(1120), uint8], Tensor[(11, 3, 13), float64], Tensor[(5, 16, 12), bool], Tensor[(77), uint64]) */
}

def @func_8228(%var_8224: Tensor[(12, 3, 13), float32], %var_8225: Tensor[(216), float32], %var_8226: Tensor[(22), uint16], %var_8227: Tensor[(448), uint32]) -> (Tensor[(756), float32], Tensor[(216), float32], Tensor[(1, 448), uint32], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32], Tensor[(12, 3, 13), float64]) {
  %489 = fn (%var_8198: Tensor[(12, 3, 13), float32], %var_8206: Tensor[(216), float32], %var_8212: Tensor[(22), uint16], %var_8214: Tensor[(448), uint32]) -> (Tensor[(756), float32], Tensor[(216), float32], Tensor[(1, 448), uint32], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32], Tensor[(12, 3, 13), float64]) {
    %471 = cast(%var_8206, dtype="float32") /* ty=Tensor[(216), float32] */;
    %472 = cast(%var_8206, dtype="float32") /* ty=Tensor[(216), float32] */;
    %473 = reshape(%471, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
    %474 = reshape(%472, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
    %475 = @func_6166(%473, %474) /* ty=(Tensor[(9, 2, 12), bool], Tensor[(9, 2, 12), int32], Tensor[(7, 9, 12), int16], Tensor[(756), float32]) */;
    %476 = cast(%var_8212, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %477 = cast(meta[relay.Constant][32] /* ty=Tensor[(330), uint16] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %478 = cast(%var_8214, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %479 = reshape(%476, newshape=[2, 11, 1]) /* ty=Tensor[(2, 11, 1), uint16] */;
    %480 = reshape(%477, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %481 = reshape(%478, newshape=[1, 448]) /* ty=Tensor[(1, 448), uint32] */;
    %482 = @func_101(%479, %480, %481) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */;
    %483 = cast(%var_8198, dtype="float32") /* ty=Tensor[(12, 3, 13), float32] */;
    %484 = tan(%483) /* ty=Tensor[(12, 3, 13), float32] */;
    %485 = cast(%484, dtype="float64") /* ty=Tensor[(12, 3, 13), float64] */;
    %486 = %475.3;
    %487 = %482.2;
    %488 = sin(%485) /* ty=Tensor[(12, 3, 13), float64] */;
    (%486, %var_8206, %487, %var_8212, meta[relay.Constant][32] /* ty=Tensor[(330), uint16] */, %var_8214, %488)
  };
  %489(%var_8224, %var_8225, %var_8226, %var_8227) /* ty=(Tensor[(756), float32], Tensor[(216), float32], Tensor[(1, 448), uint32], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32], Tensor[(12, 3, 13), float64]) */
}

def @func_8476() -> (Tensor[(13, 9, 11), float32], Tensor[(3, 14, 7), uint16]) {
  %490 = @func_6794() /* ty=(Tensor[(13, 9, 11), float32],) */;
  %491 = @func_8295() /* ty=(Tensor[(3, 14, 7), uint16],) */;
  %492 = %490.0;
  %493 = %491.0;
  (%492, %493)
}

def @func_5043(%var_5042: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), float32],) {
  %499 = fn (%var_5034: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), float32],) {
    %494 = cast(%var_5034, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %495 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(7, 7, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %498 = subtract(%496, %497) /* ty=Tensor[(7, 7, 6), float32] */;
    (%498,)
  };
  %499(%var_5042) /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_7874() -> (Tensor[(1120), float32],) {
  %500 = @func_6289() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32]) */;
  %501 = %500.1;
  (%501,)
}

def @func_10828() -> (Tensor[(1120), float32], Tensor[(490), float32], Tensor[(12, 18), float32]) {
  @func_10826() /* ty=(Tensor[(1120), float32], Tensor[(490), float32], Tensor[(12, 18), float32]) */
}

def @func_4834() -> (Tensor[(9, 2, 12), float32],) {
  @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_6896(%var_6891: Tensor[(9, 2, 12), float32]) -> (Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float64]) {
  %502 = cast(meta[relay.Constant][34] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %503 = cast(meta[relay.Constant][35] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %504 = reshape(%502, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %505 = reshape(%503, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %506 = @func_441(%504, %505) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %507 = cast(meta[relay.Constant][36] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %508 = cast(meta[relay.Constant][36] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %509 = reshape(%507, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %510 = reshape(%508, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %511 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %512 = %511.0;
  %513 = cast(%var_6891, dtype="float64") /* ty=Tensor[(9, 2, 12), float64] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="float64") /* ty=Tensor[(9, 2, 12), float64] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %517 = %506.1;
  %518 = @func_1105(%509, %510) /* ty=Tensor[(16, 14, 5), float32] */;
  %519 = floor_divide(%515, %516) /* ty=Tensor[(9, 2, 12), float64] */;
  (%517, meta[relay.Constant][34] /* ty=Tensor[(3136), float64] */, meta[relay.Constant][35] /* ty=Tensor[(448), uint32] */, %518, meta[relay.Constant][36] /* ty=Tensor[(1120), float32] */, %519)
}

def @func_444(%var_442: Tensor[(3136), float64], %var_443: Tensor[(448), uint32]) -> (Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) {
  %533 = fn (%var_433: Tensor[(3136), float64], %var_435: Tensor[(448), uint32]) -> (Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) {
    %520 = cast(meta[relay.Constant][38] /* ty=Tensor[(16, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
    %521 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(16, 6, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %522 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 6, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 6, 8), float32] */;
    %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %524 = cast(%var_433, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %525 = cast(meta[relay.Constant][39] /* ty=Tensor[(22), uint16] */, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %526 = cast(%var_435, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %527 = reshape(%524, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), float64] */;
    %528 = reshape(%525, newshape=[22]) /* ty=Tensor[(22), uint16] */;
    %529 = reshape(%526, newshape=[448]) /* ty=Tensor[(448), uint32] */;
    %530 = @func_327(%527, %528, %529) /* ty=(Tensor[(14, 16, 14), float64], Tensor[(14, 16, 14), float32], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(448), uint32]) */;
    %531 = minimum(%522, %523) /* ty=Tensor[(16, 6, 8), float32] */;
    %532 = %530.1;
    (%531, %532, %var_433, meta[relay.Constant][39] /* ty=Tensor[(22), uint16] */, %var_435)
  };
  %533(%var_442, %var_443) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */
}

def @func_9916(%var_9879: Tensor[(16, 10, 8), float32]) -> (Tensor[(16, 10, 8), float32], Tensor[(9, 2, 12), float32], Tensor[(16, 10, 8), bool], Tensor[(1120), float32]) {
  %534 = cast(%var_9879, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %535 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 10, 8), float32] */, dtype="float32") /* ty=Tensor[(16, 10, 8), float32] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %538 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %539 = cast(%var_9879, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %540 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(16, 10, 8), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 10, 8), float32] */, dtype="bool") /* ty=Tensor[(16, 10, 8), bool] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %543 = minimum(%536, %537) /* ty=Tensor[(16, 10, 8), float32] */;
  %544 = %538.0;
  %545 = less(%541, %542) /* ty=Tensor[(16, 10, 8), bool] */;
  %546 = @func_5923() /* ty=Tensor[(1120), float32] */;
  (%543, %544, %545, %546)
}

def @func_9761() -> (Tensor[(378), int8], Tensor[(1120), float32]) {
  %547 = @func_6459() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */;
  %548 = @func_9249() /* ty=(Tensor[(1120), float32],) */;
  %549 = %547.2;
  %550 = %548.0;
  (%549, %550)
}

def @func_8295() -> (Tensor[(3, 14, 7), uint16],) {
  %551 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %552 = %551.1;
  (%552,)
}

def @func_5519(%var_5518: Tensor[(7, 9, 12), float32]) -> Tensor[(7, 9, 12), int16] {
  %559 = fn (%var_5498: Tensor[(7, 9, 12), float32]) -> Tensor[(7, 9, 12), int16] {
    %553 = cast(%var_5498, dtype="float32") /* ty=Tensor[(7, 9, 12), float32] */;
    %554 = exp(%553) /* ty=Tensor[(7, 9, 12), float32] */;
    %555 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 9, 12), float32] */, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
    %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
    %557 = cast(%554, dtype="int16") /* ty=Tensor[(7, 9, 12), int16] */;
    %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    bitwise_or(%557, %558) /* ty=Tensor[(7, 9, 12), int16] */
  };
  %559(%var_5518) /* ty=Tensor[(7, 9, 12), int16] */
}

def @func_10328(%var_10326: Tensor[(1280, 2), float64]) -> (Tensor[(294), uint16], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(1280, 2), bool]) {
  @func_10325(%var_10326) /* ty=(Tensor[(294), uint16], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(1280, 2), bool]) */
}

def @func_10475() -> (Tensor[(3, 14, 7), uint16], Tensor[(9, 2, 12), float32]) {
  %563 = fn () -> (Tensor[(3, 14, 7), uint16], Tensor[(9, 2, 12), float32]) {
    %560 = @func_8295() /* ty=(Tensor[(3, 14, 7), uint16],) */;
    %561 = %560.0;
    %562 = @func_7677() /* ty=Tensor[(9, 2, 12), float32] */;
    (%561, %562)
  };
  %563() /* ty=(Tensor[(3, 14, 7), uint16], Tensor[(9, 2, 12), float32]) */
}

def @func_10352() -> (Tensor[(1120), float32], Tensor[(1120), float32]) {
  %568 = fn () -> (Tensor[(1120), float32], Tensor[(1120), float32]) {
    %564 = @func_7874() /* ty=(Tensor[(1120), float32],) */;
    %565 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
    %566 = %564.0;
    %567 = %565.0;
    (%566, %567)
  };
  %568() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32]) */
}

def @func_2662(%var_2660: Tensor[(6), uint64], %var_2661: Tensor[(2, 3, 14), float64]) -> (Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) {
  @func_2658(%var_2660, %var_2661) /* ty=(Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) */
}

def @func_5112(%var_5111: Tensor[(3, 9, 14), int8]) -> Tensor[(3, 9, 14), int8] {
  %573 = fn (%var_5106: Tensor[(3, 9, 14), int8]) -> Tensor[(3, 9, 14), int8] {
    %569 = cast(%var_5106, dtype="int8") /* ty=Tensor[(3, 9, 14), int8] */;
    %570 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(3, 9, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %571 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 9, 14), int8] */, dtype="int8") /* ty=Tensor[(3, 9, 14), int8] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    minimum(%571, %572) /* ty=Tensor[(3, 9, 14), int8] */
  };
  %573(%var_5111) /* ty=Tensor[(3, 9, 14), int8] */
}

def @func_1492(%var_1479: Tensor[(4, 12, 16), uint16]) -> Tensor[(4, 12, 16), uint16] {
  %574 = cast(meta[relay.Constant][43] /* ty=Tensor[(4, 12, 16), uint16] */, dtype="uint16") /* ty=Tensor[(4, 12, 16), uint16] */;
  %575 = shape_of(%var_1479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_1479, dtype="uint16") /* ty=Tensor[(4, 12, 16), uint16] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_and(%576, %577) /* ty=Tensor[(4, 12, 16), uint16] */
}

def @func_11517(%var_11515: float32, %var_11516: Tensor[(2560), float64]) -> (Tensor[(9, 2, 12), float64], Tensor[(7, 7, 6), float32], float32, Tensor[(1120), float32], Tensor[(1120), int32], Tensor[(1120), float32], Tensor[(2560), float64], Tensor[(490), float32]) {
  %603 = fn (%var_11432: float32, %var_11483: Tensor[(2560), float64]) -> (Tensor[(9, 2, 12), float64], Tensor[(7, 7, 6), float32], float32, Tensor[(1120), float32], Tensor[(1120), int32], Tensor[(1120), float32], Tensor[(2560), float64], Tensor[(490), float32]) {
    %578 = @func_10538() /* ty=(float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) */;
    %579 = cast(%var_11432, dtype="float32") /* ty=float32 */;
    %580 = cast(meta[relay.Constant][44] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %581 = reshape(%579, newshape=[]) /* ty=float32 */;
    %582 = reshape(%580, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), float32] */;
    %583 = @func_6101(%581, %582) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */;
    %584 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
    %585 = %584.0;
    %586 = cast(%585, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %587 = reshape(%586, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
    %588 = @func_6646(%587) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), int32]) */;
    %589 = cast(%var_11483, dtype="float64") /* ty=Tensor[(2560), float64] */;
    %590 = reshape(%589, newshape=[1280, 2]) /* ty=Tensor[(1280, 2), float64] */;
    %591 = @func_10325(%590) /* ty=(Tensor[(294), uint16], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(1280, 2), bool]) */;
    %592 = cast(meta[relay.Constant][44] /* ty=Tensor[(490), float32] */, dtype="float64") /* ty=Tensor[(490), float64] */;
    %593 = sigmoid(%592) /* ty=Tensor[(490), float64] */;
    %594 = cast(meta[relay.Constant][44] /* ty=Tensor[(490), float32] */, dtype="float32") /* ty=Tensor[(490), float32] */;
    %595 = shape_of(%593, dtype="int32") /* ty=Tensor[(1), int32] */;
    %596 = cast(%593, dtype="float32") /* ty=Tensor[(490), float32] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?), float32] */;
    %598 = %578.3;
    %599 = %583.1;
    %600 = %588.2;
    %601 = %591.2;
    %602 = add(%596, %597) /* ty=Tensor[(490), float32] */;
    (%598, %599, %var_11432, %585, %600, %601, %var_11483, %602)
  };
  %603(%var_11515, %var_11516) /* ty=(Tensor[(9, 2, 12), float64], Tensor[(7, 7, 6), float32], float32, Tensor[(1120), float32], Tensor[(1120), int32], Tensor[(1120), float32], Tensor[(2560), float64], Tensor[(490), float32]) */
}

def @func_7345(%var_7344: Tensor[(4, 16, 11), int16]) -> (Tensor[(4, 16, 11), int16], Tensor[(3136), float64], float64) {
  %613 = fn (%var_7326: Tensor[(4, 16, 11), int16]) -> (Tensor[(4, 16, 11), int16], Tensor[(3136), float64], float64) {
    %604 = cast(%var_7326, dtype="int16") /* ty=Tensor[(4, 16, 11), int16] */;
    %605 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(4, 16, 11), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(meta[relay.Constant][45] /* ty=Tensor[(4, 16, 11), int16] */, dtype="int16") /* ty=Tensor[(4, 16, 11), int16] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %608 = cast(7.89506f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %609 = reshape(%608, newshape=[]) /* ty=float64 */;
    %610 = @func_7205(%609) /* ty=(Tensor[(1120), float32], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */;
    %611 = add(%606, %607) /* ty=Tensor[(4, 16, 11), int16] */;
    %612 = %610.1;
    (%611, %612, 7.89506f64 /* ty=float64 */)
  };
  %613(%var_7344) /* ty=(Tensor[(4, 16, 11), int16], Tensor[(3136), float64], float64) */
}

def @func_10380() -> (Tensor[(77), uint64],) {
  %616 = fn () -> (Tensor[(77), uint64],) {
    %614 = @func_6747() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */;
    %615 = %614.3;
    (%615,)
  };
  %616() /* ty=(Tensor[(77), uint64],) */
}

def @func_4071(%var_4069: Tensor[(13, 9, 2), float64], %var_4070: Tensor[(6), uint64]) -> (Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) {
  %629 = fn (%var_4027: Tensor[(13, 9, 2), float64], %var_4044: Tensor[(6), uint64]) -> (Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) {
    %617 = cast(%var_4044, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %618 = cast(meta[relay.Constant][46] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %619 = reshape(%617, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %620 = reshape(%618, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
    %621 = @func_2658(%619, %620) /* ty=(Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) */;
    %622 = cast(%var_4027, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
    %623 = log2(%622) /* ty=Tensor[(13, 9, 2), float64] */;
    %624 = cast(%623, dtype="float64") /* ty=Tensor[(13, 9, 2), float64] */;
    %625 = tan(%624) /* ty=Tensor[(13, 9, 2), float64] */;
    %626 = cast(%625, dtype="float32") /* ty=Tensor[(13, 9, 2), float32] */;
    %627 = %621.4;
    %628 = atanh(%626) /* ty=Tensor[(13, 9, 2), float32] */;
    (%627, %var_4044, meta[relay.Constant][46] /* ty=Tensor[(84), float64] */, %628)
  };
  %629(%var_4069, %var_4070) /* ty=(Tensor[(2, 3, 14), int16], Tensor[(6), uint64], Tensor[(84), float64], Tensor[(13, 9, 2), float32]) */
}

def @func_6084() -> (Tensor[(9, 2, 12), float32],) {
  %632 = fn () -> (Tensor[(9, 2, 12), float32],) {
    %630 = @func_6057() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %631 = %630.0;
    (%631,)
  };
  %632() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_9674() -> Tensor[(1120), float32] {
  %633 = fn () -> Tensor[(1120), float32] {
    @func_5076() /* ty=Tensor[(1120), float32] */
  };
  %633() /* ty=Tensor[(1120), float32] */
}

def @func_8861(%var_8855: Tensor[(12, 4, 10), float64], %var_8856: Tensor[(12, 4, 10), float64], %var_8857: Tensor[(1890), uint64], %var_8858: Tensor[(429), float64], %var_8859: Tensor[(3136), float64], %var_8860: Tensor[(2, 560), float32]) -> (Tensor[(12, 4, 10), float64], Tensor[(1890), bool], Tensor[(77), uint64], Tensor[(39), float64], Tensor[(429), float64], Tensor[(9, 2, 12), float32], Tensor[(220, 2), float64], Tensor[(4, 12, 16), uint16], Tensor[(224), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(2, 560), float32], Tensor[(22), uint16], Tensor[(768), uint16], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) {
  @func_8853(%var_8855, %var_8856, %var_8857, %var_8858, %var_8859, %var_8860) /* ty=(Tensor[(12, 4, 10), float64], Tensor[(1890), bool], Tensor[(77), uint64], Tensor[(39), float64], Tensor[(429), float64], Tensor[(9, 2, 12), float32], Tensor[(220, 2), float64], Tensor[(4, 12, 16), uint16], Tensor[(224), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(2, 560), float32], Tensor[(22), uint16], Tensor[(768), uint16], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) */
}

def @func_8535() -> (Tensor[(1120), int8], Tensor[(1120), float32]) {
  %637 = fn () -> (Tensor[(1120), int8], Tensor[(1120), float32]) {
    %634 = @func_7978() /* ty=(Tensor[(1120), float32],) */;
    %635 = @func_6581() /* ty=Tensor[(1120), int8] */;
    %636 = %634.0;
    (%635, %636)
  };
  %637() /* ty=(Tensor[(1120), int8], Tensor[(1120), float32]) */
}

def @func_8440(%var_8438: uint16, %var_8439: Tensor[(7, 15, 6), uint16]) -> (Tensor[(7, 15, 6), uint16], Tensor[(7, 15, 6), float64]) {
  %643 = fn (%var_8414: uint16, %var_8415: Tensor[(7, 15, 6), uint16]) -> (Tensor[(7, 15, 6), uint16], Tensor[(7, 15, 6), float64]) {
    %638 = cast(%var_8414, dtype="uint16") /* ty=uint16 */;
    %639 = cast(%var_8415, dtype="uint16") /* ty=Tensor[(7, 15, 6), uint16] */;
    %640 = cast(%var_8415, dtype="float64") /* ty=Tensor[(7, 15, 6), float64] */;
    %641 = bitwise_xor(%638, %639) /* ty=Tensor[(7, 15, 6), uint16] */;
    %642 = cos(%640) /* ty=Tensor[(7, 15, 6), float64] */;
    (%641, %642)
  };
  %643(%var_8438, %var_8439) /* ty=(Tensor[(7, 15, 6), uint16], Tensor[(7, 15, 6), float64]) */
}

def @func_9410() -> (Tensor[(9, 2, 12), float32],) {
  @func_9408() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_10681() -> (Tensor[(9, 2, 12), float32],) {
  %646 = fn () -> (Tensor[(9, 2, 12), float32],) {
    %644 = @func_6057() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %645 = %644.0;
    (%645,)
  };
  %646() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_5076() -> Tensor[(1120), float32] {
  %647 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %647.5
}

def @func_5691(%var_5689: Tensor[(2, 2, 2), float32], %var_5690: Tensor[(77, 1), uint64]) -> (Tensor[(2, 2, 2), float32], Tensor[(5, 16, 12), bool], Tensor[(77, 1), uint64]) {
  %654 = fn (%var_5667: Tensor[(2, 2, 2), float32], %var_5676: Tensor[(77, 1), uint64]) -> (Tensor[(2, 2, 2), float32], Tensor[(5, 16, 12), bool], Tensor[(77, 1), uint64]) {
    %648 = cast(%var_5667, dtype="float32") /* ty=Tensor[(2, 2, 2), float32] */;
    %649 = cast(%var_5676, dtype="uint64") /* ty=Tensor[(77, 1), uint64] */;
    %650 = reshape(%649, newshape=[1, 11, 7]) /* ty=Tensor[(1, 11, 7), uint64] */;
    %651 = @func_4291(%650) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */;
    %652 = cos(%648) /* ty=Tensor[(2, 2, 2), float32] */;
    %653 = %651.1;
    (%652, %653, %var_5676)
  };
  %654(%var_5689, %var_5690) /* ty=(Tensor[(2, 2, 2), float32], Tensor[(5, 16, 12), bool], Tensor[(77, 1), uint64]) */
}

def @func_9731() -> Tensor[(1120), float32] {
  @func_9729() /* ty=Tensor[(1120), float32] */
}

def @func_6795() -> (Tensor[(13, 9, 11), float32],) {
  %657 = fn () -> (Tensor[(13, 9, 11), float32],) {
    %655 = cast(meta[relay.Constant][47] /* ty=Tensor[(13, 9, 11), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 11), float32] */;
    %656 = cosh(%655) /* ty=Tensor[(13, 9, 11), float32] */;
    (%656,)
  };
  %657() /* ty=(Tensor[(13, 9, 11), float32],) */
}

def @func_10779() -> Tensor[(9, 2, 12), float32] {
  @func_10197() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_4294(%var_4292: Tensor[(1, 11, 7), uint64]) -> (Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) {
  @func_4291(%var_4292) /* ty=(Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) */
}

def @func_4291(%var_4274: Tensor[(1, 11, 7), uint64]) -> (Tensor[(11, 11, 7), bool], Tensor[(5, 16, 12), bool], Tensor[(960), int8]) {
  %658 = cast(%var_4274, dtype="bool") /* ty=Tensor[(1, 11, 7), bool] */;
  %659 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 11, 7), uint64] */, dtype="bool") /* ty=Tensor[(11, 11, 7), bool] */;
  %660 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %661 = cast(meta[relay.Constant][49] /* ty=Tensor[(960), int8] */, dtype="int8") /* ty=Tensor[(960), int8] */;
  %662 = reshape(%660, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
  %663 = reshape(%661, newshape=[5, 16, 12]) /* ty=Tensor[(5, 16, 12), int8] */;
  %664 = not_equal(%658, %659) /* ty=Tensor[(11, 11, 7), bool] */;
  %665 = @func_2303(%662, %663) /* ty=Tensor[(5, 16, 12), bool] */;
  (%664, %665, meta[relay.Constant][49] /* ty=Tensor[(960), int8] */)
}

def @func_4602(%var_4601: Tensor[(11, 4, 16), uint32]) -> (Tensor[(11, 4, 16), uint32],) {
  %671 = fn (%var_4595: Tensor[(11, 4, 16), uint32]) -> (Tensor[(11, 4, 16), uint32],) {
    %666 = cast(meta[relay.Constant][50] /* ty=Tensor[(11, 4, 16), uint32] */, dtype="uint32") /* ty=Tensor[(11, 4, 16), uint32] */;
    %667 = shape_of(%var_4595, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%var_4595, dtype="uint32") /* ty=Tensor[(11, 4, 16), uint32] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %670 = bitwise_and(%668, %669) /* ty=Tensor[(11, 4, 16), uint32] */;
    (%670,)
  };
  %671(%var_4601) /* ty=(Tensor[(11, 4, 16), uint32],) */
}

def @func_7412() -> Tensor[(9, 2, 12), float32] {
  %672 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %672.0
}

def @func_10325(%var_10315: Tensor[(1280, 2), float64]) -> (Tensor[(294), uint16], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(1280, 2), bool]) {
  %673 = @func_10075() /* ty=(Tensor[(294), uint16], Tensor[(1120), float64]) */;
  %674 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %675 = cast(meta[relay.Constant][51] /* ty=Tensor[(1280, 1), float32] */, dtype="float32") /* ty=Tensor[(1280, 1), float32] */;
  %676 = reshape(%675, newshape=[16, 10, 8]) /* ty=Tensor[(16, 10, 8), float32] */;
  %677 = @func_9916(%676) /* ty=(Tensor[(16, 10, 8), float32], Tensor[(9, 2, 12), float32], Tensor[(16, 10, 8), bool], Tensor[(1120), float32]) */;
  %678 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %679 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
  %680 = cast(meta[relay.Constant][51] /* ty=Tensor[(1280, 1), float32] */, dtype="float64") /* ty=Tensor[(1280, 1), float64] */;
  %681 = sqrt(%680) /* ty=Tensor[(1280, 1), float64] */;
  %682 = cast(%681, dtype="bool") /* ty=Tensor[(1280, 1), bool] */;
  %683 = cast(%var_10315, dtype="bool") /* ty=Tensor[(1280, 2), bool] */;
  %684 = %673.0;
  %685 = %674.0;
  %686 = %677.3;
  %687 = %678.0;
  %688 = %679.0;
  %689 = equal(%682, %683) /* ty=Tensor[(1280, 2), bool] */;
  (%684, %685, %686, %687, %688, %689)
}

def @func_7452() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) {
  %699 = fn () -> (Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) {
    %690 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %691 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
    %692 = %691.0;
    %693 = cast(meta[relay.Constant][52] /* ty=Tensor[(1120), float32] */, dtype="bool") /* ty=Tensor[(1120), bool] */;
    %694 = shape_of(%692, dtype="int32") /* ty=Tensor[(1), int32] */;
    %695 = cast(%692, dtype="bool") /* ty=Tensor[(1120), bool] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?), bool] */;
    %697 = %690.0;
    %698 = less_equal(%695, %696) /* ty=Tensor[(1120), bool] */;
    (%697, %698)
  };
  %699() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) */
}

def @func_5760(%var_5758: float64) -> (Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) {
  @func_5757(%var_5758) /* ty=(Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */
}

def @func_8039() -> (Tensor[(1120), bool],) {
  %702 = fn () -> (Tensor[(1120), bool],) {
    %700 = @func_7451() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), bool]) */;
    %701 = %700.1;
    (%701,)
  };
  %702() /* ty=(Tensor[(1120), bool],) */
}

def @func_6843(%var_6840: Tensor[(11, 7, 7), float64]) -> (Tensor[(11, 7, 7), float64],) {
  %703 = cast(%var_6840, dtype="float64") /* ty=Tensor[(11, 7, 7), float64] */;
  %704 = log2(%703) /* ty=Tensor[(11, 7, 7), float64] */;
  (%704,)
}

def @func_6058() -> (Tensor[(9, 2, 12), float32],) {
  %707 = fn () -> (Tensor[(9, 2, 12), float32],) {
    %705 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %706 = %705.0;
    (%706,)
  };
  %707() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_9280() -> (Tensor[(9, 2, 12), float32],) {
  @func_9278() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_9729() -> Tensor[(1120), float32] {
  %708 = @func_8726() /* ty=(Tensor[(1120), float32], Tensor[(9, 2, 12), bool]) */;
  %708.0
}

def @func_10948(%var_10932: Tensor[(10, 13, 16), float32]) -> (Tensor[(10, 13, 16), float32],) {
  %709 = cast(%var_10932, dtype="float32") /* ty=Tensor[(10, 13, 16), float32] */;
  %710 = rsqrt(%709) /* ty=Tensor[(10, 13, 16), float32] */;
  (%710,)
}

def @func_5925() -> Tensor[(1120), float32] {
  @func_5923() /* ty=Tensor[(1120), float32] */
}

def @func_9250() -> (Tensor[(1120), float32],) {
  %713 = fn () -> (Tensor[(1120), float32],) {
    %711 = @func_5716() /* ty=(Tensor[(1120), float32],) */;
    %712 = %711.0;
    (%712,)
  };
  %713() /* ty=(Tensor[(1120), float32],) */
}

def @func_10443() -> (Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  %714 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %715 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
  %716 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %717 = %714.0;
  %718 = %715.0;
  %719 = %716.0;
  %720 = @func_10101() /* ty=Tensor[(9, 2, 12), float32] */;
  (%717, %718, %719, %720)
}

def @func_6408() -> (Tensor[(1120), float32],) {
  %721 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
  %722 = %721.0;
  (%722,)
}

def @func_5362(%var_5360: Tensor[(1120), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) {
  @func_5359(%var_5360) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) */
}

def @func_2658(%var_2645: Tensor[(6), uint64], %var_2653: Tensor[(2, 3, 14), float64]) -> (Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) {
  %723 = cast(meta[relay.Constant][53] /* ty=Tensor[(448), uint32] */, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %724 = reshape(%723, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %725 = @func_81(%724) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %726 = cast(%var_2645, dtype="uint64") /* ty=Tensor[(6), uint64] */;
  %727 = reshape(%726, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), uint64] */;
  %728 = cast(meta[relay.Constant][54] /* ty=Tensor[(2, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
  %729 = acos(%728) /* ty=Tensor[(2, 1, 14), float64] */;
  %730 = cast(%729, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
  %731 = asinh(%730) /* ty=Tensor[(2, 1, 14), float64] */;
  %732 = cast(%731, dtype="int16") /* ty=Tensor[(2, 1, 14), int16] */;
  %733 = cast(%var_2653, dtype="int16") /* ty=Tensor[(2, 3, 14), int16] */;
  %734 = %725.1;
  %735 = @func_2422(%727) /* ty=Tensor[(3, 11, 2), uint64] */;
  %736 = minimum(%732, %733) /* ty=Tensor[(2, 3, 14), int16] */;
  (%734, meta[relay.Constant][53] /* ty=Tensor[(448), uint32] */, %735, %var_2645, %736)
}

def @func_7792(%var_7789: float32, %var_7790: Tensor[(490), float32], %var_7791: Tensor[(704), uint32]) -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], float32, Tensor[(490), float32], Tensor[(11, 4, 16), uint32], Tensor[(704), uint32]) {
  @func_7787(%var_7789, %var_7790, %var_7791) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], float32, Tensor[(490), float32], Tensor[(11, 4, 16), uint32], Tensor[(704), uint32]) */
}

def @func_106(%var_103: Tensor[(2, 11, 1), uint16], %var_104: Tensor[(2, 11, 15), uint16], %var_105: Tensor[(1, 448), uint32]) -> (Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) {
  @func_101(%var_103, %var_104, %var_105) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) */
}

def @func_7876() -> (Tensor[(1120), float32],) {
  @func_7874() /* ty=(Tensor[(1120), float32],) */
}

def @func_8035() -> Tensor[(9, 2, 12), float32] {
  %737 = fn () -> Tensor[(9, 2, 12), float32] {
    @func_5973() /* ty=Tensor[(9, 2, 12), float32] */
  };
  %737() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_10538() -> (float64, Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float64]) {
  %738 = @func_8643() /* ty=(Tensor[(1120), float32], float64, float64) */;
  %739 = @func_7874() /* ty=(Tensor[(1120), float32],) */;
  %740 = @func_9278() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %741 = %740.0;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %743 = reshape(%742, newshape=[9, 2, 12]) /* ty=Tensor[(9, 2, 12), float32] */;
  %744 = @func_6896(%743) /* ty=(Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(16, 14, 5), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float64]) */;
  %745 = %738.2;
  %746 = %739.0;
  %747 = %744.5;
  (%745, %746, %741, %747)
}

def @func_6460() -> (Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) {
  %755 = fn () -> (Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) {
    %748 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %749 = cast(meta[relay.Constant][55] /* ty=Tensor[(378), int8] */, dtype="int8") /* ty=Tensor[(378), int8] */;
    %750 = reshape(%749, newshape=[3, 9, 14]) /* ty=Tensor[(3, 9, 14), int8] */;
    %751 = @func_6220() /* ty=(Tensor[(1120), float32],) */;
    %752 = %748.0;
    %753 = @func_5110(%750) /* ty=Tensor[(3, 9, 14), int8] */;
    %754 = %751.0;
    (%752, %753, meta[relay.Constant][55] /* ty=Tensor[(378), int8] */, %754)
  };
  %755() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */
}

def @func_6291() -> (Tensor[(1120), float32], Tensor[(1120), float32]) {
  @func_6289() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32]) */
}

def @func_8002(%var_7995: Tensor[(448), uint32], %var_7999: Tensor[(1, 3136), float64]) -> (Tensor[(9, 2, 12), float32], Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(22), uint16], Tensor[(1, 3136), float64]) {
  %756 = @func_6459() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 9, 14), int8], Tensor[(378), int8], Tensor[(1120), float32]) */;
  %757 = cast(%var_7995, dtype="uint32") /* ty=Tensor[(448), uint32] */;
  %758 = reshape(%757, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %759 = @func_81(%758) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %760 = cast(%var_7999, dtype="float64") /* ty=Tensor[(1, 3136), float64] */;
  %761 = %759.1;
  %762 = cast(%761, dtype="uint32") /* ty=Tensor[(2, 14, 16), uint32] */;
  %763 = reshape(%760, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
  %764 = reshape(%762, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %765 = @func_441(%763, %764) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
  %766 = %756.0;
  %767 = %765.3;
  (%766, %761, %var_7995, %767, %var_7999)
}

def @func_101(%var_91: Tensor[(2, 11, 1), uint16], %var_92: Tensor[(2, 11, 15), uint16], %var_97: Tensor[(1, 448), uint32]) -> (Tensor[(2, 11, 15), uint16], Tensor[(2, 14, 16), bool], Tensor[(1, 448), uint32]) {
  %768 = cast(%var_91, dtype="uint16") /* ty=Tensor[(2, 11, 1), uint16] */;
  %769 = cast(%var_92, dtype="uint16") /* ty=Tensor[(2, 11, 15), uint16] */;
  %770 = cast(%var_97, dtype="uint32") /* ty=Tensor[(1, 448), uint32] */;
  %771 = reshape(%770, newshape=[2, 14, 16]) /* ty=Tensor[(2, 14, 16), uint32] */;
  %772 = @func_81(%771) /* ty=(Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) */;
  %773 = logical_xor(%768, %769) /* ty=Tensor[(2, 11, 15), uint16] */;
  %774 = %772.0;
  (%773, %774, %var_97)
}

def @func_10139(%var_10136: Tensor[(448), uint32], %var_10137: Tensor[(22), uint16], %var_10138: Tensor[(768), uint16]) -> (Tensor[(1120), int8], Tensor[(7, 7, 6), float32], Tensor[(96), float64], Tensor[(8, 140), float32], Tensor[(112, 2), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(77), uint64], Tensor[(22), uint16], Tensor[(768), uint16]) {
  %799 = fn (%var_10121: Tensor[(448), uint32], %var_10123: Tensor[(22), uint16], %var_10124: Tensor[(768), uint16]) -> (Tensor[(1120), int8], Tensor[(7, 7, 6), float32], Tensor[(96), float64], Tensor[(8, 140), float32], Tensor[(112, 2), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(77), uint64], Tensor[(22), uint16], Tensor[(768), uint16]) {
    %775 = @func_8534() /* ty=(Tensor[(1120), int8], Tensor[(1120), float32]) */;
    %776 = cast(meta[relay.Constant][56] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %777 = cast(meta[relay.Constant][56] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
    %778 = reshape(%776, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
    %779 = reshape(%777, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), float64] */;
    %780 = @func_5863(%778, %779) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(6, 2, 8), uint32], Tensor[(1, 1120), float32], Tensor[(8), float64], Tensor[(4, 280), float32]) */;
    %781 = cast(meta[relay.Constant][57] /* ty=Tensor[(112, 2), float32] */, dtype="float32") /* ty=Tensor[(112, 2), float32] */;
    %782 = cast(meta[relay.Constant][58] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %783 = cast(%var_10121, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %784 = cast(meta[relay.Constant][59] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
    %785 = %775.0;
    %786 = cast(%785, dtype="float32") /* ty=Tensor[(1120), float32] */;
    %787 = cast(%var_10123, dtype="uint16") /* ty=Tensor[(22), uint16] */;
    %788 = cast(%var_10124, dtype="uint16") /* ty=Tensor[(768), uint16] */;
    %789 = reshape(%781, newshape=[4, 14, 4]) /* ty=Tensor[(4, 14, 4), float32] */;
    %790 = reshape(%782, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
    %791 = reshape(%783, newshape=[448]) /* ty=Tensor[(448), uint32] */;
    %792 = reshape(%784, newshape=[11, 7]) /* ty=Tensor[(11, 7), uint64] */;
    %793 = reshape(%786, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
    %794 = reshape(%787, newshape=[22]) /* ty=Tensor[(22), uint16] */;
    %795 = reshape(%788, newshape=[768]) /* ty=Tensor[(768), uint16] */;
    %796 = @func_4777(%789, %790, %791, %792, %793, %794, %795) /* ty=(Tensor[(4, 14, 4), float32], Tensor[(448), uint32], Tensor[(5, 16, 12), bool], Tensor[(11, 7), uint64], Tensor[(5, 16, 12), bool], Tensor[(8, 140), float32], Tensor[(294), uint16], Tensor[(1120), float32], Tensor[(2, 14, 16), float32], Tensor[(3136), uint16], Tensor[(2, 14, 16), bool], Tensor[(22), uint16], Tensor[(330), uint16], Tensor[(4, 12, 16), uint16], Tensor[(768), uint16], Tensor[(3136), float64]) */;
    %797 = %780.0;
    %798 = %796.5;
    (%785, %797, meta[relay.Constant][56] /* ty=Tensor[(96), float64] */, %798, meta[relay.Constant][57] /* ty=Tensor[(112, 2), float32] */, meta[relay.Constant][58] /* ty=Tensor[(3136), float64] */, %var_10121, meta[relay.Constant][59] /* ty=Tensor[(77), uint64] */, %var_10123, %var_10124)
  };
  %799(%var_10136, %var_10137, %var_10138) /* ty=(Tensor[(1120), int8], Tensor[(7, 7, 6), float32], Tensor[(96), float64], Tensor[(8, 140), float32], Tensor[(112, 2), float32], Tensor[(3136), float64], Tensor[(448), uint32], Tensor[(77), uint64], Tensor[(22), uint16], Tensor[(768), uint16]) */
}

def @func_6748() -> (Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) {
  %807 = fn () -> (Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) {
    %800 = cast(meta[relay.Constant][60] /* ty=Tensor[(8), float32] */, dtype="float32") /* ty=Tensor[(8), float32] */;
    %801 = cast(meta[relay.Constant][61] /* ty=Tensor[(77), uint64] */, dtype="uint64") /* ty=Tensor[(77), uint64] */;
    %802 = reshape(%800, newshape=[2, 2, 2]) /* ty=Tensor[(2, 2, 2), float32] */;
    %803 = reshape(%801, newshape=[77, 1]) /* ty=Tensor[(77, 1), uint64] */;
    %804 = @func_5688(%802, %803) /* ty=(Tensor[(2, 2, 2), float32], Tensor[(5, 16, 12), bool], Tensor[(77, 1), uint64]) */;
    %805 = @func_5973() /* ty=Tensor[(9, 2, 12), float32] */;
    %806 = %804.2;
    (%805, %806, meta[relay.Constant][60] /* ty=Tensor[(8), float32] */, meta[relay.Constant][61] /* ty=Tensor[(77), uint64] */)
  };
  %807() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(77, 1), uint64], Tensor[(8), float32], Tensor[(77), uint64]) */
}

def @func_5239(%var_5237: Tensor[(1, 4, 2), float64], %var_5238: Tensor[(1, 1120), float32]) -> (Tensor[(1, 4, 2), float64], Tensor[(1, 4, 2), float32], Tensor[(16, 14, 5), float32], Tensor[(1, 1120), float32]) {
  %817 = fn (%var_5213: Tensor[(1, 4, 2), float64], %var_5233: Tensor[(1, 1120), float32]) -> (Tensor[(1, 4, 2), float64], Tensor[(1, 4, 2), float32], Tensor[(16, 14, 5), float32], Tensor[(1, 1120), float32]) {
    %808 = cast(%var_5213, dtype="float64") /* ty=Tensor[(1, 4, 2), float64] */;
    %809 = cast(%var_5213, dtype="float32") /* ty=Tensor[(1, 4, 2), float32] */;
    %810 = cast(%var_5233, dtype="float32") /* ty=Tensor[(1, 1120), float32] */;
    %811 = cast(%var_5233, dtype="float32") /* ty=Tensor[(1, 1120), float32] */;
    %812 = reshape(%810, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
    %813 = reshape(%811, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
    %814 = rsqrt(%808) /* ty=Tensor[(1, 4, 2), float64] */;
    %815 = acos(%809) /* ty=Tensor[(1, 4, 2), float32] */;
    %816 = @func_1105(%812, %813) /* ty=Tensor[(16, 14, 5), float32] */;
    (%814, %815, %816, %var_5233)
  };
  %817(%var_5237, %var_5238) /* ty=(Tensor[(1, 4, 2), float64], Tensor[(1, 4, 2), float32], Tensor[(16, 14, 5), float32], Tensor[(1, 1120), float32]) */
}

def @func_8517(%var_8515: Tensor[(8, 11, 5), float64], %var_8516: Tensor[(8, 11, 5), float64]) -> (Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  %826 = fn (%var_8484: Tensor[(8, 11, 5), float64], %var_8485: Tensor[(8, 11, 5), float64]) -> (Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
    %818 = cast(%var_8485, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
    %819 = shape_of(%var_8484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %820 = cast(%var_8484, dtype="float64") /* ty=Tensor[(8, 11, 5), float64] */;
    %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %822 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %823 = mod(%820, %821) /* ty=Tensor[(8, 11, 5), float64] */;
    %824 = @func_7286() /* ty=Tensor[(9, 2, 12), float32] */;
    %825 = %822.0;
    (%823, %824, %825)
  };
  %826(%var_8515, %var_8516) /* ty=(Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */
}

def @func_5200() -> (Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) {
  %827 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %828 = cast(%827, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %829 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %830 = sqrt(%828) /* ty=Tensor[(1120), float64] */;
  %831 = @func_5076() /* ty=Tensor[(1120), float32] */;
  %832 = %829.0;
  (%830, %831, %832)
}

def @func_9763() -> (Tensor[(378), int8], Tensor[(1120), float32]) {
  @func_9761() /* ty=(Tensor[(378), int8], Tensor[(1120), float32]) */
}

def @func_11319() -> (Tensor[(1120), float32],) {
  %835 = fn () -> (Tensor[(1120), float32],) {
    %833 = @func_10006() /* ty=(Tensor[(1120), float32],) */;
    %834 = %833.0;
    (%834,)
  };
  %835() /* ty=(Tensor[(1120), float32],) */
}

def @func_5479(%var_5464: Tensor[(1120), float32]) -> (Tensor[(1120), uint8],) {
  %836 = @func_5200() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %837 = %836.1;
  %838 = cast(%var_5464, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %839 = shape_of(%837, dtype="int32") /* ty=Tensor[(1), int32] */;
  %840 = cast(%837, dtype="uint8") /* ty=Tensor[(1120), uint8] */;
  %841 = dyn.reshape(%838, %839, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %842 = left_shift(%840, %841) /* ty=Tensor[(1120), uint8] */;
  (%842,)
}

def @func_4941() -> (Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) {
  %843 = @func_4832() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %844 = cast(meta[relay.Constant][62] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %845 = cast(meta[relay.Constant][62] /* ty=Tensor[(294), uint16] */, dtype="uint16") /* ty=Tensor[(294), uint16] */;
  %846 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 1568), float64] */, dtype="float64") /* ty=Tensor[(2, 1568), float64] */;
  %847 = cast(meta[relay.Constant][64] /* ty=Tensor[(56, 8), uint32] */, dtype="uint32") /* ty=Tensor[(56, 8), uint32] */;
  %848 = cast(meta[relay.Constant][65] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %849 = reshape(%844, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
  %850 = reshape(%845, newshape=[3, 14, 7]) /* ty=Tensor[(3, 14, 7), uint16] */;
  %851 = reshape(%846, newshape=[3136, 1]) /* ty=Tensor[(3136, 1), float64] */;
  %852 = reshape(%847, newshape=[448]) /* ty=Tensor[(448), uint32] */;
  %853 = reshape(%848, newshape=[8, 140]) /* ty=Tensor[(8, 140), float32] */;
  %854 = @func_2714(%849, %850, %851, %852, %853) /* ty=(Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) */;
  %855 = cast(meta[relay.Constant][65] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %856 = cast(meta[relay.Constant][65] /* ty=Tensor[(1120), float32] */, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %857 = reshape(%855, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %858 = reshape(%856, newshape=[16, 14, 5]) /* ty=Tensor[(16, 14, 5), float32] */;
  %859 = %843.0;
  %860 = %854.0;
  %861 = @func_1105(%857, %858) /* ty=Tensor[(16, 14, 5), float32] */;
  (%859, %860, meta[relay.Constant][62] /* ty=Tensor[(294), uint16] */, meta[relay.Constant][63] /* ty=Tensor[(2, 1568), float64] */, meta[relay.Constant][64] /* ty=Tensor[(56, 8), uint32] */, meta[relay.Constant][65] /* ty=Tensor[(1120), float32] */, %861)
}

def @func_7714() -> (Tensor[(9, 2, 12), float32],) {
  %864 = fn () -> (Tensor[(9, 2, 12), float32],) {
    %862 = @func_6083() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %863 = %862.0;
    (%863,)
  };
  %864() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_5717() -> (Tensor[(1120), float32],) {
  %866 = fn () -> (Tensor[(1120), float32],) {
    %865 = @func_5132() /* ty=Tensor[(1120), float32] */;
    (%865,)
  };
  %866() /* ty=(Tensor[(1120), float32],) */
}

def @func_2050(%var_2048: float64, %var_2049: Tensor[(448), uint32]) -> (Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) {
  %878 = fn (%var_2026: float64, %var_2041: Tensor[(448), uint32]) -> (Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) {
    %867 = cast(%var_2026, dtype="float64") /* ty=float64 */;
    %868 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
    %869 = cast(meta[relay.Constant][66] /* ty=Tensor[(4, 10, 10), float64] */, dtype="float64") /* ty=Tensor[(4, 10, 10), float64] */;
    %870 = cast(meta[relay.Constant][67] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
    %871 = cast(%var_2041, dtype="uint32") /* ty=Tensor[(448), uint32] */;
    %872 = reshape(%870, newshape=[3136]) /* ty=Tensor[(3136), float64] */;
    %873 = reshape(%871, newshape=[448]) /* ty=Tensor[(448), uint32] */;
    %874 = @func_441(%872, %873) /* ty=(Tensor[(16, 6, 8), float32], Tensor[(14, 16, 14), float32], Tensor[(3136), float64], Tensor[(22), uint16], Tensor[(448), uint32]) */;
    %875 = floor_divide(%867, %868) /* ty=Tensor[(4, 10, 10), float64] */;
    %876 = asinh(%869) /* ty=Tensor[(4, 10, 10), float64] */;
    %877 = %874.2;
    (%875, %876, %877, meta[relay.Constant][67] /* ty=Tensor[(3136), float64] */, %var_2041)
  };
  %878(%var_2048, %var_2049) /* ty=(Tensor[(4, 10, 10), float64], Tensor[(4, 10, 10), float64], Tensor[(3136), float64], Tensor[(3136), float64], Tensor[(448), uint32]) */
}

def @func_9355(%var_9353: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(448), uint32], float64) {
  @func_9352(%var_9353) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(448), uint32], float64) */
}

def @func_6716() -> (Tensor[(9, 2, 12), float32],) {
  @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */
}

def @func_6582() -> Tensor[(1120), int8] {
  %885 = fn () -> Tensor[(1120), int8] {
    %879 = @func_6408() /* ty=(Tensor[(1120), float32],) */;
    %880 = %879.0;
    %881 = cast(meta[relay.Constant][68] /* ty=Tensor[(1120), float32] */, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(1), int32] */;
    %883 = cast(%880, dtype="int8") /* ty=Tensor[(1120), int8] */;
    %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?), int8] */;
    add(%883, %884) /* ty=Tensor[(1120), int8] */
  };
  %885() /* ty=Tensor[(1120), int8] */
}

def @func_8365(%var_8364: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(84), float64]) {
  %893 = fn (%var_8309: Tensor[(6), uint64]) -> (Tensor[(9, 2, 12), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(84), float64]) {
    %886 = cast(%var_8309, dtype="uint64") /* ty=Tensor[(6), uint64] */;
    %887 = cast(meta[relay.Constant][69] /* ty=Tensor[(84), float64] */, dtype="float64") /* ty=Tensor[(84), float64] */;
    %888 = reshape(%886, newshape=[6]) /* ty=Tensor[(6), uint64] */;
    %889 = reshape(%887, newshape=[2, 3, 14]) /* ty=Tensor[(2, 3, 14), float64] */;
    %890 = @func_2658(%888, %889) /* ty=(Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(3, 11, 2), uint64], Tensor[(6), uint64], Tensor[(2, 3, 14), int16]) */;
    %891 = @func_7412() /* ty=Tensor[(9, 2, 12), float32] */;
    %892 = %890.1;
    (%891, %892, %var_8309, meta[relay.Constant][69] /* ty=Tensor[(84), float64] */)
  };
  %893(%var_8364) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(448), uint32], Tensor[(6), uint64], Tensor[(84), float64]) */
}

def @func_10075() -> (Tensor[(294), uint16], Tensor[(1120), float64]) {
  %894 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
  %895 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %896 = cast(%895, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %897 = %894.2;
  %898 = sigmoid(%896) /* ty=Tensor[(1120), float64] */;
  (%897, %898)
}

def @func_10197() -> Tensor[(9, 2, 12), float32] {
  %899 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %899.0
}

def @func_4832() -> (Tensor[(9, 2, 12), float32],) {
  %900 = cast(meta[relay.Constant][71] /* ty=Tensor[(9, 2, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %901 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(9, 2, 12), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %902 = cast(meta[relay.Constant][70] /* ty=Tensor[(9, 2, 12), float32] */, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %903 = dyn.reshape(%900, %901, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %904 = mod(%902, %903) /* ty=Tensor[(9, 2, 12), float32] */;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(9, 2, 12), float32] */;
  %906 = acosh(%905) /* ty=Tensor[(9, 2, 12), float32] */;
  (%906,)
}

def @func_10445() -> (Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) {
  @func_10443() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */
}

def @func_9829() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) {
  %907 = @func_5973() /* ty=Tensor[(9, 2, 12), float32] */;
  %908 = @func_5076() /* ty=Tensor[(1120), float32] */;
  (%907, %908)
}

def @main(%var_11562: Tensor[(7, 7, 6), float32], %var_11588: Tensor[(7, 7, 6), int8], %var_11608: Tensor[(440), float64]) -> (Tensor[(2, 352), int16], Tensor[(7, 7, 6), int8], Tensor[(9, 2, 12), float32], Tensor[(440), float64], Tensor[(3136), int8], Tensor[(1120), int8], Tensor[(7, 7, 6), float32], Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(3136), float32]) {
  %909 = @func_10788() /* ty=Tensor[(7, 7, 6), float32] */;
  %910 = cast(%var_11562, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %911 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
  %912 = cast(%909, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %913 = dyn.reshape(%910, %911, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %914 = right_shift(%912, %913) /* ty=Tensor[(7, 7, 6), int8] */;
  %915 = cast(%var_11588, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %916 = shape_of(%914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %917 = cast(%914, dtype="int8") /* ty=Tensor[(7, 7, 6), int8] */;
  %918 = dyn.reshape(%915, %916, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %919 = cast(%var_11608, dtype="float64") /* ty=Tensor[(440), float64] */;
  %920 = cast(%var_11608, dtype="float64") /* ty=Tensor[(440), float64] */;
  %921 = reshape(%919, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %922 = reshape(%920, newshape=[8, 11, 5]) /* ty=Tensor[(8, 11, 5), float64] */;
  %923 = @func_8517(%921, %922) /* ty=(Tensor[(8, 11, 5), float64], Tensor[(9, 2, 12), float32], Tensor[(9, 2, 12), float32]) */;
  %924 = cast(meta[relay.Constant][72] /* ty=Tensor[(2, 352), int16] */, dtype="int16") /* ty=Tensor[(2, 352), int16] */;
  %925 = reshape(%924, newshape=[4, 16, 11]) /* ty=Tensor[(4, 16, 11), int16] */;
  %926 = @func_7345(%925) /* ty=(Tensor[(4, 16, 11), int16], Tensor[(3136), float64], float64) */;
  %927 = %926.1;
  %928 = cast(%927, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %929 = exp(%928) /* ty=Tensor[(3136), float64] */;
  %930 = cast(meta[relay.Constant][73] /* ty=Tensor[(3136), float64] */, dtype="int8") /* ty=Tensor[(3136), int8] */;
  %931 = shape_of(%929, dtype="int32") /* ty=Tensor[(1), int32] */;
  %932 = cast(%929, dtype="int8") /* ty=Tensor[(3136), int8] */;
  %933 = dyn.reshape(%930, %931, newshape=[]) /* ty=Tensor[(?), int8] */;
  %934 = @func_6581() /* ty=Tensor[(1120), int8] */;
  %935 = cast(%934, dtype="float32") /* ty=Tensor[(1120), float32] */;
  %936 = reshape(%935, newshape=[1120]) /* ty=Tensor[(1120), float32] */;
  %937 = @func_5362(%936) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(1120), float32], Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], Tensor[(13, 9, 2), float32], Tensor[(234), float64], Tensor[(6), uint64]) */;
  %938 = @func_5202() /* ty=(Tensor[(1120), float64], Tensor[(1120), float32], Tensor[(9, 2, 12), float32]) */;
  %939 = cast(%929, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %940 = asin(%939) /* ty=Tensor[(3136), float64] */;
  %941 = cast(meta[relay.Constant][73] /* ty=Tensor[(3136), float64] */, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
  %942 = shape_of(%940, dtype="int32") /* ty=Tensor[(1), int32] */;
  %943 = cast(%940, dtype="uint16") /* ty=Tensor[(3136), uint16] */;
  %944 = dyn.reshape(%941, %942, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %945 = multiply(%943, %944) /* ty=Tensor[(3136), uint16] */;
  %946 = cast(meta[relay.Constant][73] /* ty=Tensor[(3136), float64] */, dtype="float64") /* ty=Tensor[(3136), float64] */;
  %947 = asinh(%946) /* ty=Tensor[(3136), float64] */;
  %948 = cast(%947, dtype="uint32") /* ty=Tensor[(3136), uint32] */;
  %949 = shape_of(%945, dtype="int32") /* ty=Tensor[(1), int32] */;
  %950 = cast(%945, dtype="uint32") /* ty=Tensor[(3136), uint32] */;
  %951 = dyn.reshape(%948, %949, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %952 = maximum(%950, %951) /* ty=Tensor[(3136), uint32] */;
  %953 = cast(%929, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %954 = shape_of(%952, dtype="int32") /* ty=Tensor[(1), int32] */;
  %955 = cast(%952, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %956 = dyn.reshape(%953, %954, newshape=[]) /* ty=Tensor[(?), float32] */;
  %957 = bitwise_or(%917, %918) /* ty=Tensor[(7, 7, 6), int8] */;
  %958 = %923.1;
  %959 = bitwise_xor(%932, %933) /* ty=Tensor[(3136), int8] */;
  %960 = @func_6581() /* ty=Tensor[(1120), int8] */;
  %961 = %937.0;
  %962 = %938.1;
  %963 = @func_6757() /* ty=Tensor[(1120), float32] */;
  %964 = divide(%955, %956) /* ty=Tensor[(3136), float32] */;
  (meta[relay.Constant][72] /* ty=Tensor[(2, 352), int16] */, %957, %958, %var_11608, %959, %960, %961, %962, %963, %964)
}

def @func_11541(%var_11540: Tensor[(12, 14, 9), float32]) -> Tensor[(12, 14, 9), float32] {
  %966 = fn (%var_11525: Tensor[(12, 14, 9), float32]) -> Tensor[(12, 14, 9), float32] {
    %965 = cast(%var_11525, dtype="float32") /* ty=Tensor[(12, 14, 9), float32] */;
    rsqrt(%965) /* ty=Tensor[(12, 14, 9), float32] */
  };
  %966(%var_11540) /* ty=Tensor[(12, 14, 9), float32] */
}

def @func_10638() -> Tensor[(1120), float32] {
  @func_10636() /* ty=Tensor[(1120), float32] */
}

def @func_6289() -> (Tensor[(1120), float32], Tensor[(1120), float32]) {
  %967 = @func_5132() /* ty=Tensor[(1120), float32] */;
  %968 = @func_5132() /* ty=Tensor[(1120), float32] */;
  (%967, %968)
}

def @func_4943() -> (Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) {
  @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */
}

def @func_7787(%var_7765: float32, %var_7766: Tensor[(490), float32], %var_7777: Tensor[(704), uint32]) -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), float32], float32, Tensor[(490), float32], Tensor[(11, 4, 16), uint32], Tensor[(704), uint32]) {
  %969 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
  %970 = cast(%var_7765, dtype="float32") /* ty=float32 */;
  %971 = cast(%var_7766, dtype="float32") /* ty=Tensor[(490), float32] */;
  %972 = reshape(%970, newshape=[]) /* ty=float32 */;
  %973 = reshape(%971, newshape=[10, 7, 7]) /* ty=Tensor[(10, 7, 7), float32] */;
  %974 = @func_6101(%972, %973) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */;
  %975 = cast(%var_7777, dtype="uint32") /* ty=Tensor[(704), uint32] */;
  %976 = reshape(%975, newshape=[11, 4, 16]) /* ty=Tensor[(11, 4, 16), uint32] */;
  %977 = @func_4600(%976) /* ty=(Tensor[(11, 4, 16), uint32],) */;
  %978 = %969.0;
  %979 = %974.1;
  %980 = %977.0;
  (%978, %979, %var_7765, %var_7766, %980, %var_7777)
}

def @func_5866(%var_5864: Tensor[(6, 2, 8), float64], %var_5865: Tensor[(6, 2, 8), float64]) -> (Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(6, 2, 8), uint32], Tensor[(1, 1120), float32], Tensor[(8), float64], Tensor[(4, 280), float32]) {
  %998 = fn (%var_5815: Tensor[(6, 2, 8), float64], %var_5839: Tensor[(6, 2, 8), float64]) -> (Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(6, 2, 8), uint32], Tensor[(1, 1120), float32], Tensor[(8), float64], Tensor[(4, 280), float32]) {
    %981 = cast(meta[relay.Constant][74] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %982 = reshape(%981, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
    %983 = @func_5041(%982) /* ty=(Tensor[(7, 7, 6), float32],) */;
    %984 = cast(%var_5815, dtype="float64") /* ty=Tensor[(6, 2, 8), float64] */;
    %985 = acosh(%984) /* ty=Tensor[(6, 2, 8), float64] */;
    %986 = cast(%var_5839, dtype="uint32") /* ty=Tensor[(6, 2, 8), uint32] */;
    %987 = shape_of(%985, dtype="int32") /* ty=Tensor[(3), int32] */;
    %988 = cast(%985, dtype="uint32") /* ty=Tensor[(6, 2, 8), uint32] */;
    %989 = dyn.reshape(%986, %987, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %990 = cast(meta[relay.Constant][75] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %991 = cast(meta[relay.Constant][76] /* ty=Tensor[(4, 280), float32] */, dtype="float32") /* ty=Tensor[(4, 280), float32] */;
    %992 = reshape(%990, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
    %993 = reshape(%991, newshape=[1, 1120]) /* ty=Tensor[(1, 1120), float32] */;
    %994 = @func_5236(%992, %993) /* ty=(Tensor[(1, 4, 2), float64], Tensor[(1, 4, 2), float32], Tensor[(16, 14, 5), float32], Tensor[(1, 1120), float32]) */;
    %995 = %983.0;
    %996 = add(%988, %989) /* ty=Tensor[(6, 2, 8), uint32] */;
    %997 = %994.3;
    (%995, meta[relay.Constant][74] /* ty=Tensor[(294), float32] */, %996, %997, meta[relay.Constant][75] /* ty=Tensor[(8), float64] */, meta[relay.Constant][76] /* ty=Tensor[(4, 280), float32] */)
  };
  %998(%var_5864, %var_5865) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(294), float32], Tensor[(6, 2, 8), uint32], Tensor[(1, 1120), float32], Tensor[(8), float64], Tensor[(4, 280), float32]) */
}

def @func_8006(%var_8004: Tensor[(448), uint32], %var_8005: Tensor[(1, 3136), float64]) -> (Tensor[(9, 2, 12), float32], Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(22), uint16], Tensor[(1, 3136), float64]) {
  @func_8002(%var_8004, %var_8005) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(2, 14, 16), float32], Tensor[(448), uint32], Tensor[(22), uint16], Tensor[(1, 3136), float64]) */
}

def @func_7530(%var_7528: Tensor[(9, 2, 12), float32]) -> (Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) {
  @func_7527(%var_7528) /* ty=(Tensor[(294), float32], float32, Tensor[(490), float32], Tensor[(9, 2, 12), bool]) */
}

def @func_7678() -> Tensor[(9, 2, 12), float32] {
  %1000 = fn () -> Tensor[(9, 2, 12), float32] {
    %999 = @func_4941() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(3, 14, 7), uint16], Tensor[(294), uint16], Tensor[(2, 1568), float64], Tensor[(56, 8), uint32], Tensor[(1120), float32], Tensor[(16, 14, 5), float32]) */;
    %999.0
  };
  %1000() /* ty=Tensor[(9, 2, 12), float32] */
}

def @func_10789() -> Tensor[(7, 7, 6), float32] {
  %1002 = fn () -> Tensor[(7, 7, 6), float32] {
    %1001 = @func_7056() /* ty=(Tensor[(1120), float32], Tensor[(7, 7, 6), float32]) */;
    %1001.1
  };
  %1002() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_10077() -> (Tensor[(294), uint16], Tensor[(1120), float64]) {
  @func_10075() /* ty=(Tensor[(294), uint16], Tensor[(1120), float64]) */
}

def @func_7208(%var_7206: float64) -> (Tensor[(1120), float32], Tensor[(3136), float64], float64, Tensor[(448), uint32]) {
  @func_7205(%var_7206) /* ty=(Tensor[(1120), float32], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */
}

def @func_1495(%var_1493: Tensor[(4, 12, 16), uint16]) -> Tensor[(4, 12, 16), uint16] {
  @func_1492(%var_1493) /* ty=Tensor[(4, 12, 16), uint16] */
}

def @func_9061() -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) {
  @func_9059() /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float32]) */
}

def @func_5813(%var_5812: float64) -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float64], float64) {
  %1009 = fn (%var_5791: float64) -> (Tensor[(9, 2, 12), float32], Tensor[(1120), float64], float64) {
    %1003 = @func_5425() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %1004 = cast(%var_5791, dtype="float64") /* ty=float64 */;
    %1005 = reshape(%1004, newshape=[]) /* ty=float64 */;
    %1006 = @func_5757(%1005) /* ty=(Tensor[(1120), float64], Tensor[(3136), float64], float64, Tensor[(448), uint32]) */;
    %1007 = %1003.0;
    %1008 = %1006.0;
    (%1007, %1008, %var_5791)
  };
  %1009(%var_5812) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(1120), float64], float64) */
}

def @func_81(%var_31: Tensor[(2, 14, 16), uint32]) -> (Tensor[(2, 14, 16), bool], Tensor[(2, 14, 16), float32]) {
  %1010 = cast(%var_31, dtype="bool") /* ty=Tensor[(2, 14, 16), bool] */;
  %1011 = shape_of(meta[relay.Constant][77] /* ty=Tensor[(2, 14, 16), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1012 = cast(meta[relay.Constant][77] /* ty=Tensor[(2, 14, 16), uint32] */, dtype="bool") /* ty=Tensor[(2, 14, 16), bool] */;
  %1013 = dyn.reshape(%1010, %1011, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1014 = cast(%var_31, dtype="float32") /* ty=Tensor[(2, 14, 16), float32] */;
  %1015 = greater_equal(%1012, %1013) /* ty=Tensor[(2, 14, 16), bool] */;
  %1016 = tan(%1014) /* ty=Tensor[(2, 14, 16), float32] */;
  (%1015, %1016)
}

def @func_9278() -> (Tensor[(9, 2, 12), float32],) {
  %1017 = @func_7677() /* ty=Tensor[(9, 2, 12), float32] */;
  (%1017,)
}

def @func_6104(%var_6102: float32, %var_6103: Tensor[(10, 7, 7), float32]) -> (Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) {
  %1025 = fn (%var_6087: float32, %var_6088: Tensor[(10, 7, 7), float32]) -> (Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) {
    %1018 = cast(%var_6087, dtype="bool") /* ty=bool */;
    %1019 = cast(%var_6088, dtype="bool") /* ty=Tensor[(10, 7, 7), bool] */;
    %1020 = cast(meta[relay.Constant][78] /* ty=Tensor[(294), float32] */, dtype="float32") /* ty=Tensor[(294), float32] */;
    %1021 = reshape(%1020, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
    %1022 = @func_5041(%1021) /* ty=(Tensor[(7, 7, 6), float32],) */;
    %1023 = not_equal(%1018, %1019) /* ty=Tensor[(10, 7, 7), bool] */;
    %1024 = %1022.0;
    (%1023, %1024, meta[relay.Constant][78] /* ty=Tensor[(294), float32] */)
  };
  %1025(%var_6102, %var_6103) /* ty=(Tensor[(10, 7, 7), bool], Tensor[(7, 7, 6), float32], Tensor[(294), float32]) */
}

def @func_10007() -> (Tensor[(1120), float32],) {
  %1027 = fn () -> (Tensor[(1120), float32],) {
    %1026 = @func_9673() /* ty=Tensor[(1120), float32] */;
    (%1026,)
  };
  %1027() /* ty=(Tensor[(1120), float32],) */
}

def @func_7020() -> (Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(13, 9, 11), float32]) {
  @func_7018() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(13, 9, 11), float32]) */
}

def @func_5133() -> Tensor[(1120), float32] {
  %1028 = fn () -> Tensor[(1120), float32] {
    @func_5076() /* ty=Tensor[(1120), float32] */
  };
  %1028() /* ty=Tensor[(1120), float32] */
}

def @func_6759() -> Tensor[(1120), float32] {
  @func_6757() /* ty=Tensor[(1120), float32] */
}

def @func_7980() -> (Tensor[(1120), float32],) {
  @func_7978() /* ty=(Tensor[(1120), float32],) */
}

def @func_7978() -> (Tensor[(1120), float32],) {
  %1029 = @func_7018() /* ty=(Tensor[(1120), float32], Tensor[(1120), float32], Tensor[(13, 9, 11), float32]) */;
  %1030 = %1029.1;
  (%1030,)
}

def @func_5662(%var_5660: Tensor[(294), float32]) -> (Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), bool]) {
  @func_5659(%var_5660) /* ty=(Tensor[(9, 2, 12), float32], Tensor[(7, 7, 6), bool]) */
}

def @func_2721(%var_2716: Tensor[(3, 14, 7), uint16], %var_2717: Tensor[(3, 14, 7), uint16], %var_2718: Tensor[(3136, 1), float64], %var_2719: Tensor[(448), uint32], %var_2720: Tensor[(8, 140), float32]) -> (Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) {
  @func_2714(%var_2716, %var_2717, %var_2718, %var_2719, %var_2720) /* ty=(Tensor[(3, 14, 7), uint16], Tensor[(448), uint32], Tensor[(3136, 22), float64], Tensor[(16, 14, 5), float32], Tensor[(8, 140), float32], Tensor[(22), uint16]) */
}

def @func_9218() -> Tensor[(9, 2, 12), float32] {
  %1032 = fn () -> Tensor[(9, 2, 12), float32] {
    %1031 = @func_6714() /* ty=(Tensor[(9, 2, 12), float32],) */;
    %1031.0
  };
  %1032() /* ty=Tensor[(9, 2, 12), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen474/build/output.py", line 2651, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:21:30] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

