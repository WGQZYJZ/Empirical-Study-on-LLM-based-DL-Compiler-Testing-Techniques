==========mod==========
#[version = "0.0.5"]
def @func_4137() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %0 = @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %1 = %0.1;
  %2 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%1, %2)
}

def @func_3680() -> (Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), bool], Tensor[(200), int8], int8) {
  %3 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %5 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %6 = @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %8 = cast(meta[relay.Constant][1] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %9 = reshape(%7, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %10 = reshape(%8, newshape=[]) /* ty=int8 */;
  %11 = @func_1131(%9, %10) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(8, 2, 10), bool], Tensor[(16), int32], Tensor[(160, 1), int32], Tensor[(2, 8, 4), bool]) */;
  %12 = log10(%4) /* ty=Tensor[(2, 8, 4), float64] */;
  %13 = %5.1;
  %14 = %6.0;
  %15 = %11.2;
  (%12, %13, %14, %15, meta[relay.Constant][0] /* ty=Tensor[(200), int8] */, meta[relay.Constant][1] /* ty=int8 */)
}

def @func_6493(%var_6464: Tensor[(16), int32], %var_6465: Tensor[(160, 1), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float64], Tensor[(16), int32], Tensor[(160, 384), uint32], Tensor[(160, 1), float64], Tensor[(2, 8, 4), int32], Tensor[(100, 2), int8]) {
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %17 = reshape(%16, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float64] */;
  %18 = cast(meta[relay.Constant][2] /* ty=Tensor[(384), float64] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
  %19 = cast(%var_6465, dtype="uint32") /* ty=Tensor[(160, 1), uint32] */;
  %20 = cast(%var_6465, dtype="float64") /* ty=Tensor[(160, 1), float64] */;
  %21 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %22 = cast(%21, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %23 = reshape(%22, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
  %24 = @func_6390(%23) /* ty=(Tensor[(2, 8, 4), int32],) */;
  %25 = cast(%var_6464, dtype="int32") /* ty=Tensor[(16), int32] */;
  %26 = cast(%var_6465, dtype="int32") /* ty=Tensor[(160, 1), int32] */;
  %27 = cast(meta[relay.Constant][3] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %28 = reshape(%25, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %29 = reshape(%26, newshape=[16, 10]) /* ty=Tensor[(16, 10), int32] */;
  %30 = reshape(%27, newshape=[]) /* ty=int8 */;
  %31 = @func_845(%28, %29, %30) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */;
  %32 = %31.5;
  %33 = cast(%32, dtype="int8") /* ty=Tensor[(100, 2), int8] */;
  %34 = cast(meta[relay.Constant][3] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %35 = @func_2404(%17) /* ty=Tensor[(4, 8, 12), float64] */;
  %36 = bitwise_and(%18, %19) /* ty=Tensor[(160, 384), uint32] */;
  %37 = sin(%20) /* ty=Tensor[(160, 1), float64] */;
  %38 = %24.0;
  %39 = bitwise_and(%33, %34) /* ty=Tensor[(100, 2), int8] */;
  (%21, %35, %var_6464, %36, %37, %38, %39)
}

def @func_7171(%var_7155: int8) -> (Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], int8) {
  %40 = cast(%var_7155, dtype="int8") /* ty=int8 */;
  %41 = reshape(%40, newshape=[]) /* ty=int8 */;
  %42 = @func_6119(%41) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], int8) */;
  %43 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %44 = %42.0;
  (%43, %44, %var_7155)
}

def @func_4116() -> Tensor[(2, 8, 4), uint32] {
  @func_749() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_5737() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_6925() -> Tensor[(2, 8, 4), uint32] {
  %45 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %45.0
}

def @func_6526() -> Tensor[(16), int32] {
  %46 = @func_6165() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) */;
  %46.3
}

def @func_3108(%var_3105: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) {
  %47 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %48 = cast(meta[relay.Constant][4] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %49 = cast(%var_3105, dtype="int32") /* ty=Tensor[(160), int32] */;
  %50 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %51 = reshape(%48, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %52 = reshape(%49, newshape=[16, 10]) /* ty=Tensor[(16, 10), int32] */;
  %53 = reshape(%50, newshape=[]) /* ty=int8 */;
  %54 = @func_845(%51, %52, %53) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */;
  %55 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  %56 = %47.0;
  %57 = %54.2;
  (%55, %56, %57, meta[relay.Constant][4] /* ty=Tensor[(16), int32] */, %var_3105, meta[relay.Constant][5] /* ty=int8 */)
}

def @func_4948(%var_4934: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64]) {
  %58 = cast(%var_4934, dtype="float64") /* ty=Tensor[(384), float64] */;
  %59 = reshape(%58, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %60 = @func_4606(%59) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) */;
  %61 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  %62 = %60.1;
  (%61, %62, %var_4934)
}

def @func_7430() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %63 = @func_2429() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(2, 180), float64]) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %66 = reshape(%65, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
  %67 = @func_901(%66) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) */;
  %68 = %67.0;
  (%64, %68)
}

def @func_6910() -> (Tensor[(2, 8, 4), uint32],) {
  %69 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%69,)
}

def @func_4684() -> (Tensor[(2, 8, 4), float32],) {
  %70 = @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %72 = acosh(%71) /* ty=Tensor[(2, 8, 4), float32] */;
  (%72,)
}

def @func_5349() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %73 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %74 = @func_2479() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %75 = @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %76 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %77 = %73.0;
  %78 = %74.0;
  %79 = @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */;
  %80 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
  %81 = %75.0;
  (%76, %77, %78, %79, %80, %81)
}

def @func_2723() -> (Tensor[(2, 8, 4), uint32],) {
  %82 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%82,)
}

def @func_7662(%var_7570: Tensor[(378), float32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), uint32], Tensor[(24, 16), bool]) {
  %83 = @func_5238() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %84 = cast(meta[relay.Constant][6] /* ty=Tensor[(24, 16), float64] */, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %85 = reshape(%84, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %86 = @func_7327(%85) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %87 = cast(%var_7570, dtype="float32") /* ty=Tensor[(378), float32] */;
  %88 = reshape(%87, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
  %89 = @func_6010(%88) /* ty=(Tensor[(9, 7, 6), float32],) */;
  %90 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %91 = @func_4684() /* ty=(Tensor[(2, 8, 4), float32],) */;
  %92 = cast(meta[relay.Constant][6] /* ty=Tensor[(24, 16), float64] */, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
  %93 = cosh(%92) /* ty=Tensor[(24, 16), float64] */;
  %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(24, 16), float64] */, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
  %95 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(24, 16), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(24, 16), float64] */, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %98 = greater_equal(%96, %97) /* ty=Tensor[(24, 16), bool] */;
  %99 = cast(%98, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
  %100 = erf(%99) /* ty=Tensor[(24, 16), float32] */;
  %101 = cast(%100, dtype="uint32") /* ty=Tensor[(24, 16), uint32] */;
  %102 = shape_of(%93, dtype="int32") /* ty=Tensor[(2), int32] */;
  %103 = cast(%93, dtype="uint32") /* ty=Tensor[(24, 16), uint32] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %105 = right_shift(%103, %104) /* ty=Tensor[(24, 16), uint32] */;
  %106 = cast(%105, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
  %107 = shape_of(%93, dtype="int32") /* ty=Tensor[(2), int32] */;
  %108 = cast(%93, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %110 = %83.1;
  %111 = %86.3;
  %112 = %89.0;
  %113 = %90.0;
  %114 = %91.0;
  %115 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %116 = not_equal(%108, %109) /* ty=Tensor[(24, 16), bool] */;
  (%110, %111, %112, %var_7570, %113, %114, %115, %116)
}

def @func_289(%var_282: int8, %var_283: Tensor[(10, 10, 2), int8]) -> Tensor[(10, 10, 2), bool] {
  %117 = cast(%var_282, dtype="bool") /* ty=bool */;
  %118 = cast(%var_283, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  less(%117, %118) /* ty=Tensor[(10, 10, 2), bool] */
}

def @func_1224(%var_1171: int8, %var_1174: Tensor[(2, 8, 4), float32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) {
  %119 = cast(meta[relay.Constant][8] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %120 = cast(meta[relay.Constant][9] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %121 = cast(%var_1171, dtype="int8") /* ty=int8 */;
  %122 = reshape(%119, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %123 = reshape(%120, newshape=[16, 10]) /* ty=Tensor[(16, 10), int32] */;
  %124 = reshape(%121, newshape=[]) /* ty=int8 */;
  %125 = @func_845(%122, %123, %124) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */;
  %126 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %127 = cast(%126, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %128 = erf(%127) /* ty=Tensor[(2, 8, 4), float32] */;
  %129 = cast(%var_1174, dtype="int8") /* ty=Tensor[(2, 8, 4), int8] */;
  %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %131 = cast(%128, dtype="int8") /* ty=Tensor[(2, 8, 4), int8] */;
  %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %133 = cast(%128, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %134 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %135 = %125.0;
  %136 = bitwise_and(%131, %132) /* ty=Tensor[(2, 8, 4), int8] */;
  %137 = acos(%133) /* ty=Tensor[(2, 8, 4), float64] */;
  %138 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%134, %135, meta[relay.Constant][8] /* ty=Tensor[(16), int32] */, meta[relay.Constant][9] /* ty=Tensor[(160), int32] */, %var_1171, %136, %137, %138)
}

def @func_6119(%var_6108: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], int8) {
  %139 = cast(%var_6108, dtype="int8") /* ty=int8 */;
  %140 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %142 = reshape(%139, newshape=[]) /* ty=int8 */;
  %143 = reshape(%141, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float32] */;
  %144 = @func_1224(%142, %143) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %145 = %144.6;
  (%140, %145, %var_6108)
}

def @func_6361() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %146 = @func_4722() /* ty=Tensor[(2, 8, 4), uint32] */;
  %147 = @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%146, %147)
}

def @func_7066(%var_7045: Tensor[(9, 90), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(15, 6, 9), float64], Tensor[(9, 90), float64], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 9), float32], Tensor[(144), uint64], Tensor[(2, 8, 4), uint32]) {
  %148 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %149 = cast(%var_7045, dtype="float64") /* ty=Tensor[(9, 90), float64] */;
  %150 = reshape(%149, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %152 = cast(meta[relay.Constant][10] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %153 = reshape(%151, newshape=[8, 2, 9]) /* ty=Tensor[(8, 2, 9), uint64] */;
  %154 = reshape(%152, newshape=[8, 2, 9]) /* ty=Tensor[(8, 2, 9), uint64] */;
  %155 = @func_3724(%153, %154) /* ty=(Tensor[(8, 2, 9), uint64], Tensor[(8, 2, 9), float32]) */;
  %156 = %148.1;
  %157 = @func_4529(%150) /* ty=Tensor[(15, 6, 9), float64] */;
  %158 = @func_4722() /* ty=Tensor[(2, 8, 4), uint32] */;
  %159 = %155.1;
  %160 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%156, %157, %var_7045, %158, %159, meta[relay.Constant][10] /* ty=Tensor[(144), uint64] */, %160)
}

def @func_3043() -> (Tensor[(2, 8, 4), uint32],) {
  %161 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%161,)
}

def @func_6437() -> Tensor[(2, 8, 4), float64] {
  %162 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
  %162.0
}

def @func_957() -> (Tensor[(2, 8, 4), uint32],) {
  %163 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %164 = %163.0;
  (%164,)
}

def @func_1758() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %165 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %166 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %167 = %165.0;
  (%166, %167)
}

def @func_708() -> (Tensor[(2, 8, 4), uint32],) {
  %168 = cast(meta[relay.Constant][11] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %169 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 8, 4), uint32] */, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %170 = multiply(%168, %169) /* ty=Tensor[(2, 8, 4), uint32] */;
  (%170,)
}

def @func_4803(%var_4781: Tensor[(16), int32], %var_4782: int8, %var_4783: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(200), float64], Tensor[(16), int32], int8, Tensor[(448), uint16], Tensor[(200), int8]) {
  %171 = cast(%var_4781, dtype="int32") /* ty=Tensor[(16), int32] */;
  %172 = cast(%var_4782, dtype="int8") /* ty=int8 */;
  %173 = cast(%var_4783, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %174 = reshape(%171, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
  %175 = reshape(%172, newshape=[]) /* ty=int8 */;
  %176 = reshape(%173, newshape=[448]) /* ty=Tensor[(448), uint16] */;
  %177 = @func_2243(%174, %175, %176) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) */;
  %178 = %177.4;
  %179 = cast(%178, dtype="int8") /* ty=Tensor[(200), int8] */;
  %180 = reshape(%179, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %181 = @func_1303(%180) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */;
  %182 = @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */;
  %183 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %184 = %181.2;
  (%182, %183, %178, %var_4781, %var_4782, %var_4783, %184)
}

def @func_3887() -> (Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) {
  %185 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %186 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %187 = %185.1;
  %188 = %186.0;
  (%187, %188)
}

def @func_6413(%var_6406: int8, %var_6407: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint8], int8, Tensor[(160), int32]) {
  %189 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %190 = %189.0;
  %191 = cast(%190, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %192 = cast(%var_6406, dtype="int8") /* ty=int8 */;
  %193 = cast(%var_6407, dtype="int32") /* ty=Tensor[(160), int32] */;
  %194 = reshape(%191, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float64] */;
  %195 = reshape(%192, newshape=[]) /* ty=int8 */;
  %196 = reshape(%193, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %197 = @func_4497(%194, %195, %196) /* ty=(Tensor[(2, 8, 4), uint8], Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(2, 8, 4), uint16], Tensor[(16), int32], Tensor[(160), int32], Tensor[(1, 384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), uint64], Tensor[(160), int32]) */;
  %198 = %197.0;
  (%190, %198, %var_6406, %var_6407)
}

def @func_7477() -> (Tensor[(5, 8, 12), float64],) {
  %199 = cast(meta[relay.Constant][13] /* ty=Tensor[(5, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 12), float64] */;
  %200 = rsqrt(%199) /* ty=Tensor[(5, 8, 12), float64] */;
  (%200,)
}

def @func_5114(%var_5081: Tensor[(11, 10, 8), int64], %var_5082: Tensor[(11, 10, 8), int64]) -> (Tensor[(11, 10, 8), float32], Tensor[(11, 10, 8), bool]) {
  %201 = cast(%var_5082, dtype="int64") /* ty=Tensor[(11, 10, 8), int64] */;
  %202 = shape_of(%var_5081, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_5081, dtype="int64") /* ty=Tensor[(11, 10, 8), int64] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %205 = bitwise_or(%203, %204) /* ty=Tensor[(11, 10, 8), int64] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
  %207 = shape_of(%var_5082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%var_5082, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %210 = cast(%var_5082, dtype="bool") /* ty=Tensor[(11, 10, 8), bool] */;
  %211 = shape_of(%var_5081, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%var_5081, dtype="bool") /* ty=Tensor[(11, 10, 8), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %214 = add(%208, %209) /* ty=Tensor[(11, 10, 8), float32] */;
  %215 = not_equal(%212, %213) /* ty=Tensor[(11, 10, 8), bool] */;
  (%214, %215)
}

def @func_4379() -> (Tensor[(2, 8, 4), float64], Tensor[(200), bool]) {
  %216 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %217 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %218 = %216.1;
  (%217, %218)
}

def @func_4529(%var_4516: Tensor[(15, 6, 9), float64]) -> Tensor[(15, 6, 9), float64] {
  %219 = cast(%var_4516, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  cosh(%219) /* ty=Tensor[(15, 6, 9), float64] */
}

def @func_6851() -> Tensor[(2, 8, 4), uint32] {
  %220 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %220.0
}

def @func_7543(%var_7538: Tensor[(160), int32]) -> (Tensor[(200), float64], Tensor[(15, 6, 9), float64], Tensor[(2, 8, 4), uint32], Tensor[(810), float64], int8, Tensor[(160), int32]) {
  %221 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %222 = %221.1;
  %223 = cast(%222, dtype="float64") /* ty=Tensor[(200), float64] */;
  %224 = cast(meta[relay.Constant][14] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %225 = reshape(%224, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %226 = cast(meta[relay.Constant][14] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
  %227 = cast(%var_7538, dtype="int32") /* ty=Tensor[(160), int32] */;
  %228 = reshape(%227, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %229 = @func_3108(%228) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */;
  %230 = acos(%223) /* ty=Tensor[(200), float64] */;
  %231 = @func_4529(%225) /* ty=Tensor[(15, 6, 9), float64] */;
  %232 = @func_4007() /* ty=Tensor[(2, 8, 4), uint32] */;
  %233 = rsqrt(%226) /* ty=Tensor[(810), float64] */;
  %234 = %229.5;
  (%230, %231, %232, %233, %234, %var_7538)
}

def @func_2132() -> Tensor[(2, 8, 4), uint32] {
  %235 = @func_1848() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %235.0
}

def @func_7140() -> (Tensor[(36, 10), float64], Tensor[(2, 8, 4), uint32]) {
  %236 = @func_5385() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(36, 10), float64]) */;
  %237 = %236.2;
  %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(2), int32] */;
  %240 = cast(%237, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %242 = @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %243 = floor_mod(%240, %241) /* ty=Tensor[(36, 10), float64] */;
  %244 = %242.0;
  (%243, %244)
}

def @func_4828() -> (Tensor[(2, 8, 4), uint32],) {
  %245 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %246 = %245.1;
  (%246,)
}

def @func_6697() -> Tensor[(200), bool] {
  %247 = @func_5630() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %247.1
}

def @func_2359() -> Tensor[(2, 8, 4), uint32] {
  @func_2046() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_3234() -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) {
  %248 = cast(meta[relay.Constant][16] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %249 = reshape(%248, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %250 = @func_1303(%249) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */;
  %251 = %250.2;
  %252 = cast(%251, dtype="bool") /* ty=Tensor[(200), bool] */;
  %253 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(200), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %254 = cast(meta[relay.Constant][16] /* ty=Tensor[(200), int8] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?), bool] */;
  %256 = @func_3204() /* ty=Tensor[(2, 8, 4), uint32] */;
  %257 = logical_or(%254, %255) /* ty=Tensor[(200), bool] */;
  (%256, %257)
}

def @func_2704(%var_2695: Tensor[(10, 9, 11), uint32], %var_2696: Tensor[(10, 9, 11), uint32]) -> (Tensor[(10, 9, 11), float32],) {
  %258 = cast(%var_2696, dtype="uint32") /* ty=Tensor[(10, 9, 11), uint32] */;
  %259 = shape_of(%var_2695, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_2695, dtype="uint32") /* ty=Tensor[(10, 9, 11), uint32] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %262 = bitwise_or(%260, %261) /* ty=Tensor[(10, 9, 11), uint32] */;
  %263 = cast(%262, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
  %264 = rsqrt(%263) /* ty=Tensor[(10, 9, 11), float32] */;
  (%264,)
}

def @func_4272() -> Tensor[(2, 8, 4), uint32] {
  %265 = @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %265.0
}

def @func_1923(%var_1914: Tensor[(16), int32], %var_1916: int8, %var_1917: Tensor[(200), int8]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) {
  %266 = cast(%var_1914, dtype="int32") /* ty=Tensor[(16), int32] */;
  %267 = cast(meta[relay.Constant][17] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %268 = cast(%var_1916, dtype="int8") /* ty=int8 */;
  %269 = cast(%var_1917, dtype="int8") /* ty=Tensor[(200), int8] */;
  %270 = reshape(%266, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %271 = reshape(%267, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %272 = reshape(%268, newshape=[]) /* ty=int8 */;
  %273 = reshape(%269, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %274 = @func_778(%270, %271, %272, %273) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */;
  %275 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %276 = %274.1;
  (%275, %276, %var_1914, meta[relay.Constant][17] /* ty=Tensor[(160), int32] */, %var_1916, %var_1917)
}

def @func_1462(%var_1448: Tensor[(6, 6, 10), float64], %var_1456: Tensor[(8, 8), uint32]) -> (Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) {
  %277 = cast(%var_1448, dtype="float64") /* ty=Tensor[(6, 6, 10), float64] */;
  %278 = cast(%var_1456, dtype="uint32") /* ty=Tensor[(8, 8), uint32] */;
  %279 = reshape(%278, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
  %280 = @func_901(%279) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) */;
  %281 = sigmoid(%277) /* ty=Tensor[(6, 6, 10), float64] */;
  %282 = %280.1;
  (%281, %282, %var_1456)
}

def @func_3359(%var_3317: Tensor[(2, 6, 11), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), uint64], Tensor[(2, 6, 11), int16]) {
  %283 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %284 = log2(%283) /* ty=Tensor[(2, 6, 11), float64] */;
  %285 = cast(%var_3317, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%284, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %289 = cast(%284, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %290 = asinh(%289) /* ty=Tensor[(2, 6, 11), float64] */;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %292 = acosh(%291) /* ty=Tensor[(2, 6, 11), float64] */;
  %293 = cast(%292, dtype="uint64") /* ty=Tensor[(2, 6, 11), uint64] */;
  %294 = shape_of(%290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%290, dtype="uint64") /* ty=Tensor[(2, 6, 11), uint64] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %297 = cast(%290, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %298 = sinh(%297) /* ty=Tensor[(2, 6, 11), float64] */;
  %299 = cast(%284, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %300 = shape_of(%298, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%298, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %303 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %304 = power(%287, %288) /* ty=Tensor[(2, 6, 11), float32] */;
  %305 = subtract(%295, %296) /* ty=Tensor[(2, 6, 11), uint64] */;
  %306 = left_shift(%301, %302) /* ty=Tensor[(2, 6, 11), int16] */;
  (%303, %304, %305, %306)
}

def @func_2969(%var_2958: uint64, %var_2959: Tensor[(45), uint64]) -> (Tensor[(2, 8, 4), bool], Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64]) {
  %307 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %308 = %307.0;
  %309 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 8, 4), uint32] */, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %313 = cast(%var_2958, dtype="uint64") /* ty=uint64 */;
  %314 = cast(%var_2959, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %315 = reshape(%313, newshape=[]) /* ty=uint64 */;
  %316 = reshape(%314, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), uint64] */;
  %317 = less_equal(%311, %312) /* ty=Tensor[(2, 8, 4), bool] */;
  %318 = @func_2516(%315, %316) /* ty=Tensor[(5, 3, 3), uint64] */;
  (%317, %318, %var_2958, %var_2959)
}

def @func_5422(%var_5401: Tensor[(8, 3, 2), uint32], %var_5407: Tensor[(8, 3, 2), uint32]) -> Tensor[(8, 3, 2), bool] {
  %319 = cast(%var_5401, dtype="uint32") /* ty=Tensor[(8, 3, 2), uint32] */;
  %320 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(8, 3, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(meta[relay.Constant][20] /* ty=Tensor[(8, 3, 2), uint32] */, dtype="uint32") /* ty=Tensor[(8, 3, 2), uint32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %323 = bitwise_or(%321, %322) /* ty=Tensor[(8, 3, 2), uint32] */;
  %324 = cast(%var_5407, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%326, %327) /* ty=Tensor[(8, 3, 2), bool] */
}

def @func_1991(%var_1933: Tensor[(6, 8, 14), float32], %var_1963: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(16), int32], Tensor[(2, 8, 4), uint32], Tensor[(6, 8, 14), float64], Tensor[(6, 8, 14), float64]) {
  %328 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %329 = cast(meta[relay.Constant][21] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %330 = reshape(%329, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
  %331 = @func_1742(%330) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) */;
  %332 = cast(%var_1963, dtype="int8") /* ty=int8 */;
  %333 = %328.0;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %335 = reshape(%332, newshape=[]) /* ty=int8 */;
  %336 = reshape(%334, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float32] */;
  %337 = @func_1224(%335, %336) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %338 = cast(%var_1933, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %339 = rsqrt(%338) /* ty=Tensor[(6, 8, 14), float64] */;
  %340 = cast(%339, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %341 = sin(%340) /* ty=Tensor[(6, 8, 14), float32] */;
  %342 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 8, 14), float32] */, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %346 = cast(%var_1933, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %347 = acosh(%346) /* ty=Tensor[(6, 8, 14), float32] */;
  %348 = cast(%var_1963, dtype="float64") /* ty=float64 */;
  %349 = cast(%347, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %350 = %331.3;
  %351 = %337.1;
  %352 = power(%344, %345) /* ty=Tensor[(6, 8, 14), float64] */;
  %353 = floor_mod(%348, %349) /* ty=Tensor[(6, 8, 14), float64] */;
  (%333, %350, meta[relay.Constant][21] /* ty=Tensor[(16), int32] */, %351, %352, %353)
}

def @func_2767() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %354 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %355 = %354.0;
  %356 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%355, %356)
}

def @func_2404(%var_2389: Tensor[(4, 8, 12), float64]) -> Tensor[(4, 8, 12), float64] {
  %357 = cast(%var_2389, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
  sin(%357) /* ty=Tensor[(4, 8, 12), float64] */
}

def @func_7327(%var_7319: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) {
  %358 = @func_7217() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %359 = cast(%var_7319, dtype="float64") /* ty=Tensor[(384), float64] */;
  %360 = reshape(%359, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %361 = @func_4606(%360) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) */;
  %362 = @func_5376() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64]) */;
  %363 = %358.1;
  %364 = %361.1;
  %365 = %362.2;
  %366 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%363, %364, %var_7319, %365, %366)
}

def @func_3177() -> (Tensor[(2, 8, 4), uint32],) {
  %367 = @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%367,)
}

def @func_6010(%var_6005: Tensor[(9, 7, 6), float32]) -> (Tensor[(9, 7, 6), float32],) {
  %368 = cast(%var_6005, dtype="float32") /* ty=Tensor[(9, 7, 6), float32] */;
  %369 = log2(%368) /* ty=Tensor[(9, 7, 6), float32] */;
  (%369,)
}

def @func_3959(%var_3939: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32]) {
  %370 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %371 = %370.0;
  %372 = cast(%var_3939, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%371, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %376 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %377 = equal(%374, %375) /* ty=Tensor[(2, 8, 4), bool] */;
  %378 = %376.0;
  (%377, %378)
}

def @func_1742(%var_1731: Tensor[(1, 16), int32]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) {
  %379 = cast(meta[relay.Constant][23] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %380 = cast(meta[relay.Constant][24] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %381 = reshape(%379, newshape=[]) /* ty=int8 */;
  %382 = reshape(%380, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
  %383 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %384 = %383.0;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %386 = exp(%385) /* ty=Tensor[(2, 8, 4), float64] */;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %388 = cast(%386, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %389 = cast(%386, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %390 = sinh(%389) /* ty=Tensor[(2, 8, 4), float64] */;
  %391 = cast(%386, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%390, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %395 = cast(%var_1731, dtype="int32") /* ty=Tensor[(1, 16), int32] */;
  %396 = cast(meta[relay.Constant][25] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %397 = cast(meta[relay.Constant][23] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %398 = cast(meta[relay.Constant][24] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %399 = reshape(%395, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %400 = reshape(%396, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %401 = reshape(%397, newshape=[]) /* ty=int8 */;
  %402 = reshape(%398, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %403 = @func_778(%399, %400, %401, %402) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */;
  %404 = cast(%390, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %405 = @func_289(%381, %382) /* ty=Tensor[(10, 10, 2), bool] */;
  %406 = tan(%387) /* ty=Tensor[(2, 8, 4), float32] */;
  %407 = asinh(%388) /* ty=Tensor[(2, 8, 4), float32] */;
  %408 = less(%393, %394) /* ty=Tensor[(2, 8, 4), bool] */;
  %409 = %403.1;
  %410 = cos(%404) /* ty=Tensor[(2, 8, 4), float64] */;
  (%405, meta[relay.Constant][23] /* ty=int8 */, meta[relay.Constant][24] /* ty=Tensor[(200), int8] */, %406, %407, %408, %409, %var_1731, meta[relay.Constant][25] /* ty=Tensor[(160), int32] */, %410)
}

def @func_4007() -> Tensor[(2, 8, 4), uint32] {
  @func_718() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4606(%var_4564: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) {
  %411 = @func_2723() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %412 = cast(%var_4564, dtype="float64") /* ty=Tensor[(384), float64] */;
  %413 = reshape(%412, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float64] */;
  %414 = @func_2404(%413) /* ty=Tensor[(4, 8, 12), float64] */;
  %415 = cast(%414, dtype="float32") /* ty=Tensor[(4, 8, 12), float32] */;
  %416 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  %417 = %411.0;
  %418 = cos(%415) /* ty=Tensor[(4, 8, 12), float32] */;
  (%416, %var_4564, %417, %418)
}

def @func_2031() -> Tensor[(2, 8, 4), uint32] {
  @func_718() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4722() -> Tensor[(2, 8, 4), uint32] {
  %419 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %419.0
}

def @func_2610(%var_2600: Tensor[(4, 5, 13), float64]) -> (Tensor[(4, 5, 13), float64],) {
  %420 = cast(%var_2600, dtype="float64") /* ty=Tensor[(4, 5, 13), float64] */;
  %421 = asin(%420) /* ty=Tensor[(4, 5, 13), float64] */;
  (%421,)
}

def @func_5607() -> (Tensor[(2, 8, 4), uint32],) {
  %422 = @func_4272() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%422,)
}

def @func_2671() -> (Tensor[(2, 8, 4), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(2, 8, 4), uint32]) {
  %423 = cast(meta[relay.Constant][26] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %424 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
  %425 = cast(%424, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %426 = reshape(%423, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %427 = reshape(%425, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %428 = @func_1462(%426, %427) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %429 = %428.2;
  %430 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%424, %429, meta[relay.Constant][26] /* ty=Tensor[(360), float64] */, %430)
}

def @func_5054(%var_5018: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %431 = cast(%var_5018, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %432 = reshape(%431, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %433 = @func_1421(%432) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %434 = @func_3043() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %435 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  %436 = %433.0;
  %437 = @func_4272() /* ty=Tensor[(2, 8, 4), uint32] */;
  %438 = %434.0;
  (%435, %436, %var_5018, %437, %438)
}

def @func_4895() -> (Tensor[(2, 8, 4), float64],) {
  %439 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
  %440 = %439.0;
  (%440,)
}

def @func_6583(%var_6548: Tensor[(14, 7, 14), int64], %var_6580: Tensor[(64), uint32]) -> (Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), float32], Tensor[(6, 6, 10), float64], Tensor[(360), float64], Tensor[(64), uint32]) {
  %441 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), int64] */, dtype="int64") /* ty=Tensor[(14, 7, 14), int64] */;
  %442 = shape_of(%var_6548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(%var_6548, dtype="int64") /* ty=Tensor[(14, 7, 14), int64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %445 = minimum(%443, %444) /* ty=Tensor[(14, 7, 14), int64] */;
  %446 = cast(%445, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %447 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), int64] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %450 = cast(%445, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
  %451 = cast(meta[relay.Constant][28] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %452 = cast(%var_6580, dtype="uint32") /* ty=Tensor[(64), uint32] */;
  %453 = reshape(%451, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %454 = reshape(%452, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %455 = @func_1462(%453, %454) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %456 = less(%448, %449) /* ty=Tensor[(14, 7, 14), bool] */;
  %457 = sqrt(%450) /* ty=Tensor[(14, 7, 14), float32] */;
  %458 = %455.0;
  (%456, %457, %458, meta[relay.Constant][28] /* ty=Tensor[(360), float64] */, %var_6580)
}

def @func_6793() -> Tensor[(2, 8, 4), uint32] {
  %459 = @func_6068() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %459.1
}

def @func_2651() -> Tensor[(2, 8, 4), float64] {
  %460 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
  %460.0
}

def @func_6068() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %461 = @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %462 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %463 = %461.1;
  %464 = %462.0;
  (%463, %464)
}

def @func_7833(%var_7805: Tensor[(2), float64], %var_7806: Tensor[(448), uint16]) -> (Tensor[(200), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2), float64], Tensor[(448), uint16], Tensor[(5, 1, 6), bool], int8) {
  %465 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
  %466 = @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %467 = @func_6804() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %468 = cast(-8.23306f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %469 = cast(%var_7805, dtype="float64") /* ty=Tensor[(2), float64] */;
  %470 = cast(%var_7806, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %471 = reshape(%468, newshape=[]) /* ty=float64 */;
  %472 = reshape(%469, newshape=[2, 1]) /* ty=Tensor[(2, 1), float64] */;
  %473 = reshape(%470, newshape=[448]) /* ty=Tensor[(448), uint16] */;
  %474 = @func_4236(%471, %472, %473) /* ty=(Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %475 = cast(-8.23306f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 1, 6), float64] */, dtype="bool") /* ty=Tensor[(5, 1, 6), bool] */;
  %477 = @func_6165() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) */;
  %478 = %465.1;
  %479 = @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */;
  %480 = %466.1;
  %481 = %467.0;
  %482 = %474.4;
  %483 = not_equal(%475, %476) /* ty=Tensor[(5, 1, 6), bool] */;
  %484 = %477.2;
  (%478, %479, %480, %481, %482, %var_7805, %var_7806, %483, %484)
}

def @func_845(%var_840: Tensor[(16), int32], %var_841: Tensor[(16, 10), int32], %var_842: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) {
  %485 = cast(%var_840, dtype="int32") /* ty=Tensor[(16), int32] */;
  %486 = cast(%var_841, dtype="int32") /* ty=Tensor[(16, 10), int32] */;
  %487 = cast(%var_842, dtype="int8") /* ty=int8 */;
  %488 = cast(meta[relay.Constant][30] /* ty=Tensor[(100, 2), int8] */, dtype="int8") /* ty=Tensor[(100, 2), int8] */;
  %489 = cast(%var_841, dtype="bool") /* ty=Tensor[(16, 10), bool] */;
  %490 = reshape(%485, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
  %491 = reshape(%486, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
  %492 = reshape(%487, newshape=[]) /* ty=int8 */;
  %493 = reshape(%488, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %494 = reshape(%489, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %495 = @func_554(%490, %491, %492, %493, %494) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
  %496 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  %497 = %495.3;
  (%496, %497, %var_840, %var_841, %var_842, meta[relay.Constant][30] /* ty=Tensor[(100, 2), int8] */)
}

def @func_1055() -> Tensor[(2, 8, 4), uint32] {
  @func_749() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2384() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) {
  %498 = cast(meta[relay.Constant][31] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %499 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %501 = reshape(%498, newshape=[]) /* ty=int8 */;
  %502 = reshape(%500, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float32] */;
  %503 = @func_1224(%501, %502) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %504 = %503.1;
  (%499, %504, meta[relay.Constant][31] /* ty=int8 */)
}

def @func_901(%var_870: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) {
  %505 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %507 = atan(%506) /* ty=Tensor[(2, 8, 4), float64] */;
  %508 = cast(%var_870, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %509 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%505, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %512 = divide(%510, %511) /* ty=Tensor[(2, 8, 4), float32] */;
  %513 = cast(%512, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %514 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%507, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %518 = greater_equal(%515, %516) /* ty=Tensor[(2, 8, 4), bool] */;
  (%517, %518)
}

def @func_2684() -> (Tensor[(2, 8, 4), uint32],) {
  %519 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%519,)
}

def @func_2516(%var_2509: uint64, %var_2510: Tensor[(5, 3, 3), uint64]) -> Tensor[(5, 3, 3), uint64] {
  %520 = cast(%var_2509, dtype="uint64") /* ty=uint64 */;
  %521 = cast(%var_2510, dtype="uint64") /* ty=Tensor[(5, 3, 3), uint64] */;
  logical_xor(%520, %521) /* ty=Tensor[(5, 3, 3), uint64] */
}

def @func_5376() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64]) {
  %522 = @func_2684() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %523 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
  %524 = @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */;
  %525 = %522.0;
  %526 = %523.0;
  (%524, %525, %526)
}

def @func_2046() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2866() -> Tensor[(2, 8, 4), uint32] {
  %527 = @func_1848() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %527.0
}

def @func_5483(%var_5448: Tensor[(9, 3, 6), float32], %var_5475: Tensor[(16), int32], %var_5476: int8, %var_5477: Tensor[(2, 224), uint16]) -> (Tensor[(9, 3, 6), float32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], int8, Tensor[(2, 224), uint16]) {
  %528 = cast(%var_5448, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
  %529 = exp(%528) /* ty=Tensor[(9, 3, 6), float32] */;
  %530 = cast(%529, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
  %531 = cast(%var_5475, dtype="int32") /* ty=Tensor[(16), int32] */;
  %532 = cast(%var_5476, dtype="int8") /* ty=int8 */;
  %533 = cast(%var_5477, dtype="uint16") /* ty=Tensor[(2, 224), uint16] */;
  %534 = reshape(%531, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
  %535 = reshape(%532, newshape=[]) /* ty=int8 */;
  %536 = reshape(%533, newshape=[448]) /* ty=Tensor[(448), uint16] */;
  %537 = @func_2243(%534, %535, %536) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) */;
  %538 = sqrt(%530) /* ty=Tensor[(9, 3, 6), float32] */;
  %539 = %537.0;
  (%538, %539, %var_5475, %var_5476, %var_5477)
}

def @func_3058() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %540 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %541 = @func_2479() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %542 = %540.1;
  %543 = %541.1;
  (%542, %543)
}

def @func_5238() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %544 = @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %545 = %544.1;
  %546 = @func_2046() /* ty=Tensor[(2, 8, 4), uint32] */;
  %547 = @func_3204() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%545, %546, %547)
}

def @func_6201(%var_6179: float64, %var_6180: Tensor[(2, 1), float64], %var_6181: Tensor[(8, 56), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], float64, Tensor[(2, 1), float64], Tensor[(8, 56), uint16]) {
  %548 = @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %549 = cast(%var_6179, dtype="float64") /* ty=float64 */;
  %550 = cast(%var_6180, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
  %551 = cast(%var_6181, dtype="uint16") /* ty=Tensor[(8, 56), uint16] */;
  %552 = reshape(%549, newshape=[]) /* ty=float64 */;
  %553 = reshape(%550, newshape=[2, 1]) /* ty=Tensor[(2, 1), float64] */;
  %554 = reshape(%551, newshape=[448]) /* ty=Tensor[(448), uint16] */;
  %555 = @func_4236(%552, %553, %554) /* ty=(Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %556 = %548.1;
  %557 = %555.3;
  (%556, %557, %var_6179, %var_6180, %var_6181)
}

def @func_4497(%var_4393: Tensor[(2, 8, 4), float64], %var_4410: int8, %var_4436: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint8], Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(2, 8, 4), uint16], Tensor[(16), int32], Tensor[(160), int32], Tensor[(1, 384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), uint64], Tensor[(160), int32]) {
  %558 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
  %559 = %558.0;
  %560 = cast(%var_4393, dtype="uint8") /* ty=Tensor[(2, 8, 4), uint8] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="uint8") /* ty=Tensor[(2, 8, 4), uint8] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %564 = cast(%var_4410, dtype="int8") /* ty=int8 */;
  %565 = cast(meta[relay.Constant][32] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %566 = reshape(%564, newshape=[]) /* ty=int8 */;
  %567 = reshape(%565, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
  %568 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 8, 4), float64] */, dtype="uint16") /* ty=Tensor[(2, 8, 4), uint16] */;
  %569 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%559, dtype="uint16") /* ty=Tensor[(2, 8, 4), uint16] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %572 = cast(%var_4436, dtype="int32") /* ty=Tensor[(160), int32] */;
  %573 = reshape(%572, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %574 = @func_3108(%573) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */;
  %575 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %576 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 384), float64] */, dtype="float64") /* ty=Tensor[(1, 384), float64] */;
  %577 = reshape(%576, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float64] */;
  %578 = @func_2404(%577) /* ty=Tensor[(4, 8, 12), float64] */;
  %579 = cast(%578, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
  %580 = cast(%var_4410, dtype="uint64") /* ty=uint64 */;
  %581 = cast(meta[relay.Constant][32] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %582 = reshape(%581, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %583 = @func_647(%582) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */;
  %584 = bitwise_or(%562, %563) /* ty=Tensor[(2, 8, 4), uint8] */;
  %585 = @func_289(%566, %567) /* ty=Tensor[(10, 10, 2), bool] */;
  %586 = left_shift(%570, %571) /* ty=Tensor[(2, 8, 4), uint16] */;
  %587 = %574.2;
  %588 = %575.0;
  %589 = minimum(%579, %580) /* ty=Tensor[(4, 8, 12), uint64] */;
  %590 = %583.3;
  (%584, %585, meta[relay.Constant][32] /* ty=Tensor[(200), int8] */, %586, %587, %var_4436, meta[relay.Constant][34] /* ty=Tensor[(1, 384), float64] */, %588, %589, %590)
}

def @func_2243(%var_2189: Tensor[(1, 16), int32], %var_2190: int8, %var_2226: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) {
  %591 = @func_1848() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %592 = cast(%var_2189, dtype="int32") /* ty=Tensor[(1, 16), int32] */;
  %593 = cast(%var_2190, dtype="int8") /* ty=int8 */;
  %594 = cast(meta[relay.Constant][35] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %595 = reshape(%592, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %596 = reshape(%593, newshape=[]) /* ty=int8 */;
  %597 = reshape(%594, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %598 = @func_1923(%595, %596, %597) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) */;
  %599 = cast(meta[relay.Constant][35] /* ty=Tensor[(200), int8] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %600 = cast(%var_2226, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %601 = reshape(%600, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %602 = @func_1421(%601) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %603 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %604 = %591.0;
  %605 = %598.0;
  %606 = acosh(%599) /* ty=Tensor[(200), float64] */;
  %607 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  %608 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  %609 = %602.0;
  %610 = %603.0;
  (%604, %605, %var_2189, %var_2190, %606, %607, %608, %609, %var_2226, %610)
}

def @func_6804() -> (Tensor[(2, 8, 4), uint32],) {
  %611 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%611,)
}

def @func_3724(%var_3687: Tensor[(8, 2, 9), uint64], %var_3688: Tensor[(8, 2, 9), uint64]) -> (Tensor[(8, 2, 9), uint64], Tensor[(8, 2, 9), float32]) {
  %612 = cast(%var_3688, dtype="uint64") /* ty=Tensor[(8, 2, 9), uint64] */;
  %613 = shape_of(%var_3687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%var_3687, dtype="uint64") /* ty=Tensor[(8, 2, 9), uint64] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %616 = cast(%var_3688, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %617 = sigmoid(%616) /* ty=Tensor[(8, 2, 9), float64] */;
  %618 = cast(%var_3688, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %619 = cos(%618) /* ty=Tensor[(8, 2, 9), float32] */;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %621 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%617, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %624 = bitwise_or(%614, %615) /* ty=Tensor[(8, 2, 9), uint64] */;
  %625 = mod(%622, %623) /* ty=Tensor[(8, 2, 9), float32] */;
  (%624, %625)
}

def @func_6328(%var_6226: bool, %var_6227: Tensor[(11, 14, 7), bool], %var_6259: Tensor[(11, 14, 7), bool], %var_6298: Tensor[(112, 4), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(11, 14, 7), int64], Tensor[(11, 14, 7), bool], Tensor[(14, 2, 16), uint16], Tensor[(2, 8, 4), uint32], Tensor[(112, 4), bool]) {
  %626 = @func_5349() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %627 = @func_3887() /* ty=(Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) */;
  %628 = cast(%var_6227, dtype="int64") /* ty=Tensor[(11, 14, 7), int64] */;
  %629 = cast(%var_6226, dtype="int64") /* ty=int64 */;
  %630 = cast(%var_6226, dtype="bool") /* ty=bool */;
  %631 = cast(%var_6227, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %632 = logical_and(%630, %631) /* ty=Tensor[(11, 14, 7), bool] */;
  %633 = cast(%var_6259, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %634 = shape_of(%632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%632, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %637 = cast(%var_6298, dtype="uint16") /* ty=Tensor[(112, 4), uint16] */;
  %638 = reshape(%637, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %639 = @func_1421(%638) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %640 = cast(%var_6298, dtype="float32") /* ty=Tensor[(112, 4), float32] */;
  %641 = erf(%640) /* ty=Tensor[(112, 4), float32] */;
  %642 = cast(%641, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %643 = cast(%var_6226, dtype="bool") /* ty=bool */;
  %644 = %626.5;
  %645 = %627.1;
  %646 = left_shift(%628, %629) /* ty=Tensor[(11, 14, 7), int64] */;
  %647 = greater(%635, %636) /* ty=Tensor[(11, 14, 7), bool] */;
  %648 = %639.0;
  %649 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  %650 = logical_and(%642, %643) /* ty=Tensor[(112, 4), bool] */;
  (%644, %645, %646, %647, %648, %649, %650)
}

def @func_5563() -> (Tensor[(2, 8, 4), uint32], Tensor[(1, 12, 8), float64], Tensor[(2, 8, 4), uint32]) {
  %651 = @func_2384() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) */;
  %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 8), float32] */;
  %653 = acosh(%652) /* ty=Tensor[(1, 12, 8), float32] */;
  %654 = cast(%653, dtype="float64") /* ty=Tensor[(1, 12, 8), float64] */;
  %655 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %656 = %651.1;
  %657 = sinh(%654) /* ty=Tensor[(1, 12, 8), float64] */;
  %658 = %655.0;
  (%656, %657, %658)
}

def @func_3418(%var_3385: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), int64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), float64]) {
  %659 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %660 = %659.0;
  %661 = cast(%var_3385, dtype="int64") /* ty=Tensor[(2, 8, 4), int64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="int64") /* ty=Tensor[(2, 8, 4), int64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %665 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
  %666 = right_shift(%663, %664) /* ty=Tensor[(2, 8, 4), int64] */;
  %667 = %665.0;
  %668 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  (%666, %667, %668)
}

def @func_778(%var_762: Tensor[(16), int32], %var_763: Tensor[(160), int32], %var_764: int8, %var_765: Tensor[(200), int8]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) {
  %669 = cast(%var_762, dtype="int32") /* ty=Tensor[(16), int32] */;
  %670 = cast(%var_763, dtype="int32") /* ty=Tensor[(160), int32] */;
  %671 = cast(%var_764, dtype="int8") /* ty=int8 */;
  %672 = cast(%var_765, dtype="int8") /* ty=Tensor[(200), int8] */;
  %673 = cast(%var_763, dtype="bool") /* ty=Tensor[(160), bool] */;
  %674 = reshape(%669, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
  %675 = reshape(%670, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
  %676 = reshape(%671, newshape=[]) /* ty=int8 */;
  %677 = reshape(%672, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %678 = reshape(%673, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %679 = @func_554(%674, %675, %676, %677, %678) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
  %680 = %679.2;
  %681 = cast(%680, dtype="int8") /* ty=Tensor[(200), int8] */;
  %682 = reshape(%681, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %683 = @func_647(%682) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */;
  %684 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %685 = %683.3;
  (%684, %680, %var_762, %var_763, %var_764, %var_765, %685)
}

def @func_2099() -> (Tensor[(2, 8, 4), float64],) {
  %686 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %687 = %686.0;
  %688 = cast(%687, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %689 = log(%688) /* ty=Tensor[(2, 8, 4), float64] */;
  (%689,)
}

def @func_1599(%var_1595: Tensor[(360), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(360), float64]) {
  %690 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %691 = cast(%var_1595, dtype="float64") /* ty=Tensor[(360), float64] */;
  %692 = %690.0;
  %693 = cast(%692, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %694 = reshape(%691, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %695 = reshape(%693, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %696 = @func_1462(%694, %695) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %697 = %696.0;
  (%692, %697, %var_1595)
}

def @func_5821(%var_5806: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), float64], Tensor[(200), int8], Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %698 = cast(meta[relay.Constant][37] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %699 = reshape(%698, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %700 = @func_1303(%699) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */;
  %701 = @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */;
  %702 = cast(%var_5806, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %703 = shape_of(%701, dtype="int32") /* ty=Tensor[(3), int32] */;
  %704 = cast(%701, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %706 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %707 = @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %708 = %700.3;
  %709 = not_equal(%704, %705) /* ty=Tensor[(2, 8, 4), bool] */;
  %710 = %706.0;
  %711 = %707.0;
  (%708, meta[relay.Constant][37] /* ty=Tensor[(200), int8] */, %709, %710, %711)
}

def @func_3452() -> (Tensor[(2, 8, 4), uint32],) {
  %712 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %713 = %712.0;
  (%713,)
}

def @func_5165(%var_5128: Tensor[(4, 5, 11), bool], %var_5129: Tensor[(4, 5, 11), bool]) -> (Tensor[(4, 5, 11), bool], Tensor[(2, 8, 4), uint32]) {
  %714 = cast(%var_5129, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %715 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%var_5128, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %718 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %719 = logical_or(%716, %717) /* ty=Tensor[(4, 5, 11), bool] */;
  %720 = %718.0;
  (%719, %720)
}

def @func_3204() -> Tensor[(2, 8, 4), uint32] {
  %721 = @func_2384() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) */;
  %721.1
}

def @func_3504(%var_3487: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32]) {
  %722 = cast(%var_3487, dtype="int32") /* ty=Tensor[(160), int32] */;
  %723 = reshape(%722, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %724 = @func_3108(%723) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */;
  %725 = @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */;
  %726 = %724.2;
  (%725, %726, %var_3487)
}

def @func_7703() -> (Tensor[(2, 8, 4), uint32],) {
  %727 = @func_6910() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %728 = %727.0;
  (%728,)
}

def @func_3581() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %729 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %730 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %731 = %729.0;
  (%730, %731)
}

def @func_5385() -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(36, 10), float64]) {
  %732 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %733 = cast(meta[relay.Constant][38] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %734 = %732.1;
  %735 = cast(%734, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %736 = reshape(%733, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %737 = reshape(%735, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %738 = @func_1462(%736, %737) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %739 = %738.0;
  (%734, %739, meta[relay.Constant][38] /* ty=Tensor[(36, 10), float64] */)
}

def @func_1386() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_5630() -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) {
  %740 = @func_5349() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %741 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
  %742 = %740.5;
  %743 = %741.1;
  (%742, %743)
}

def @func_1857() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_7217() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %744 = @func_4007() /* ty=Tensor[(2, 8, 4), uint32] */;
  %745 = @func_6851() /* ty=Tensor[(2, 8, 4), uint32] */;
  %746 = @func_2046() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%744, %745, %746)
}

def @func_7884(%var_7877: Tensor[(200), float32]) -> (Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64], Tensor[(200), bool]) {
  %747 = cast(meta[relay.Constant][39] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %748 = cast(meta[relay.Constant][40] /* ty=Tensor[(45), uint64] */, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %749 = reshape(%747, newshape=[]) /* ty=uint64 */;
  %750 = reshape(%748, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), uint64] */;
  %751 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %752 = %751.1;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(200), float32] */;
  %754 = cosh(%753) /* ty=Tensor[(200), float32] */;
  %755 = cast(%var_7877, dtype="bool") /* ty=Tensor[(200), bool] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(1), int32] */;
  %757 = cast(%754, dtype="bool") /* ty=Tensor[(200), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?), bool] */;
  %759 = @func_2516(%749, %750) /* ty=Tensor[(5, 3, 3), uint64] */;
  %760 = not_equal(%757, %758) /* ty=Tensor[(200), bool] */;
  (%759, meta[relay.Constant][39] /* ty=uint64 */, meta[relay.Constant][40] /* ty=Tensor[(45), uint64] */, %760)
}

def @func_7371() -> Tensor[(2, 8, 4), uint32] {
  %761 = @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %761.0
}

def @func_1848() -> (Tensor[(2, 8, 4), uint32],) {
  %762 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %763 = %762.0;
  (%763,)
}

def @func_718() -> Tensor[(2, 8, 4), uint32] {
  %764 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %764.0
}

def @func_6390(%var_6375: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), int32],) {
  %765 = @func_6361() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %766 = %765.1;
  %767 = cast(%var_6375, dtype="int32") /* ty=Tensor[(2, 8, 4), int32] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="int32") /* ty=Tensor[(2, 8, 4), int32] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %771 = maximum(%769, %770) /* ty=Tensor[(2, 8, 4), int32] */;
  (%771,)
}

def @main(%var_7987: Tensor[(14, 8, 13), uint32]) -> Tensor[(14, 8, 13), uint32] {
  %772 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 8, 13), uint32] */, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %773 = shape_of(%var_7987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%var_7987, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%774, %775) /* ty=Tensor[(14, 8, 13), uint32] */
}

def @func_2597() -> Tensor[(2, 8, 4), uint32] {
  %776 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %776.0
}

def @func_2841(%var_2789: Tensor[(360), float64], %var_2799: int8) -> (Tensor[(8, 8), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(200), int8], Tensor[(16), int32], int8, Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(4, 5, 13), float64], Tensor[(260), float64], Tensor[(2, 8, 4), uint32], Tensor[(5, 40), float64]) {
  %777 = @func_2671() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(2, 8, 4), uint32]) */;
  %778 = cast(%var_2789, dtype="float64") /* ty=Tensor[(360), float64] */;
  %779 = %777.1;
  %780 = cast(%779, dtype="uint32") /* ty=Tensor[(8, 8), uint32] */;
  %781 = reshape(%778, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %782 = reshape(%780, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %783 = @func_1462(%781, %782) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %784 = cast(meta[relay.Constant][42] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %785 = cast(%var_2799, dtype="int8") /* ty=int8 */;
  %786 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 40), int8] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
  %787 = reshape(%784, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %788 = reshape(%785, newshape=[]) /* ty=int8 */;
  %789 = reshape(%786, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %790 = @func_1923(%787, %788, %789) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) */;
  %791 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %792 = cast(meta[relay.Constant][44] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
  %793 = reshape(%792, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float64] */;
  %794 = @func_2610(%793) /* ty=(Tensor[(4, 5, 13), float64],) */;
  %795 = cast(meta[relay.Constant][43] /* ty=Tensor[(5, 40), int8] */, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
  %796 = sinh(%795) /* ty=Tensor[(5, 40), float64] */;
  %797 = cast(meta[relay.Constant][45] /* ty=Tensor[(5, 40), float64] */, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
  %798 = shape_of(%796, dtype="int32") /* ty=Tensor[(2), int32] */;
  %799 = cast(%796, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
  %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %801 = %783.2;
  %802 = %790.5;
  %803 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  %804 = %791.1;
  %805 = %794.0;
  %806 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %807 = floor_mod(%799, %800) /* ty=Tensor[(5, 40), float64] */;
  (%779, %801, %var_2789, %802, meta[relay.Constant][42] /* ty=Tensor[(16), int32] */, %var_2799, %803, %804, %805, meta[relay.Constant][44] /* ty=Tensor[(260), float64] */, %806, %807)
}

def @func_5517(%var_5507: Tensor[(160), int32], %var_5515: Tensor[(260, 1), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool], Tensor[(2, 8, 4), float64], int8, Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(4, 5, 13), float64], Tensor[(260, 1), float64]) {
  %808 = @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %809 = @func_3887() /* ty=(Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) */;
  %810 = cast(meta[relay.Constant][46] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %811 = cast(%var_5507, dtype="int32") /* ty=Tensor[(160), int32] */;
  %812 = cast(meta[relay.Constant][47] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %813 = %809.0;
  %814 = cast(%813, dtype="int8") /* ty=Tensor[(200), int8] */;
  %815 = reshape(%810, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %816 = reshape(%811, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %817 = reshape(%812, newshape=[]) /* ty=int8 */;
  %818 = reshape(%814, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %819 = @func_778(%815, %816, %817, %818) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */;
  %820 = cast(%var_5515, dtype="float64") /* ty=Tensor[(260, 1), float64] */;
  %821 = reshape(%820, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float64] */;
  %822 = @func_2610(%821) /* ty=(Tensor[(4, 5, 13), float64],) */;
  %823 = %808.0;
  %824 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %825 = %819.4;
  %826 = %822.0;
  (%823, %813, %824, %825, meta[relay.Constant][46] /* ty=Tensor[(16), int32] */, %var_5507, meta[relay.Constant][47] /* ty=int8 */, %826, %var_5515)
}

def @func_749() -> Tensor[(2, 8, 4), uint32] {
  %827 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %827.0
}

def @func_2479() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %828 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  %829 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%828, %829)
}

def @func_6165() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) {
  %830 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
  %831 = cast(%830, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %832 = reshape(%831, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
  %833 = @func_5821(%832) /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), int8], Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %834 = cast(meta[relay.Constant][48] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %835 = reshape(%834, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
  %836 = @func_1742(%835) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) */;
  %837 = %833.2;
  %838 = %836.1;
  (%830, %837, %838, meta[relay.Constant][48] /* ty=Tensor[(16), int32] */)
}

def @func_4236(%var_4215: float64, %var_4216: Tensor[(2, 1), float64], %var_4224: Tensor[(448), uint16]) -> (Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %839 = cast(%var_4215, dtype="float64") /* ty=float64 */;
  %840 = cast(%var_4216, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
  %841 = cast(%var_4224, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %842 = reshape(%841, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %843 = @func_1421(%842) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %844 = @func_3680() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), bool], Tensor[(200), int8], int8) */;
  %845 = floor_mod(%839, %840) /* ty=Tensor[(2, 1), float64] */;
  %846 = %843.0;
  %847 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %848 = %844.2;
  (%845, %846, %var_4224, %847, %848)
}

def @func_1266() -> (Tensor[(2, 8, 4), uint32],) {
  %849 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %850 = %849.0;
  (%850,)
}

def @func_2429() -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(2, 180), float64]) {
  %851 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %852 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 180), float64] */, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
  %853 = %851.0;
  %854 = cast(%853, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %855 = reshape(%852, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %856 = reshape(%854, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %857 = @func_1462(%855, %856) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %858 = %857.0;
  (%853, %858, meta[relay.Constant][49] /* ty=Tensor[(2, 180), float64] */)
}

def @func_4875(%var_4831: Tensor[(6, 6, 2), float64], %var_4832: Tensor[(6, 6, 2), float64], %var_4863: Tensor[(16, 4), uint32]) -> (Tensor[(2, 8, 4), bool], Tensor[(16, 4), uint32], Tensor[(6, 6, 2), float64], Tensor[(2, 8, 4), uint32]) {
  %859 = cast(%var_4863, dtype="uint32") /* ty=Tensor[(16, 4), uint32] */;
  %860 = reshape(%859, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
  %861 = @func_3959(%860) /* ty=(Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32]) */;
  %862 = cast(%var_4832, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
  %863 = shape_of(%var_4831, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_4831, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %866 = divide(%864, %865) /* ty=Tensor[(6, 6, 2), float64] */;
  %867 = cast(%866, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
  %868 = %861.0;
  %869 = sigmoid(%867) /* ty=Tensor[(6, 6, 2), float64] */;
  %870 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%868, %var_4863, %869, %870)
}

def @func_1421(%var_1411: Tensor[(14, 2, 16), uint16]) -> (Tensor[(14, 2, 16), uint16],) {
  %871 = cast(meta[relay.Constant][50] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %872 = cast(%var_1411, dtype="uint16") /* ty=Tensor[(14, 2, 16), uint16] */;
  %873 = bitwise_or(%871, %872) /* ty=Tensor[(14, 2, 16), uint16] */;
  (%873,)
}

def @func_1131(%var_1114: Tensor[(200), int8], %var_1123: int8) -> (Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(8, 2, 10), bool], Tensor[(16), int32], Tensor[(160, 1), int32], Tensor[(2, 8, 4), bool]) {
  %874 = cast(%var_1114, dtype="int8") /* ty=Tensor[(200), int8] */;
  %875 = reshape(%874, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %876 = @func_647(%875) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */;
  %877 = cast(meta[relay.Constant][51] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %878 = cast(meta[relay.Constant][52] /* ty=Tensor[(160, 1), int32] */, dtype="int32") /* ty=Tensor[(160, 1), int32] */;
  %879 = cast(%var_1123, dtype="int8") /* ty=int8 */;
  %880 = cast(%var_1114, dtype="int8") /* ty=Tensor[(200), int8] */;
  %881 = cast(meta[relay.Constant][52] /* ty=Tensor[(160, 1), int32] */, dtype="bool") /* ty=Tensor[(160, 1), bool] */;
  %882 = reshape(%877, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
  %883 = reshape(%878, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
  %884 = reshape(%879, newshape=[]) /* ty=int8 */;
  %885 = reshape(%880, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %886 = reshape(%881, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %887 = @func_554(%882, %883, %884, %885, %886) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
  %888 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %889 = cast(%var_1123, dtype="bool") /* ty=bool */;
  %890 = cast(%888, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %891 = %876.6;
  %892 = %887.5;
  %893 = logical_or(%889, %890) /* ty=Tensor[(2, 8, 4), bool] */;
  (%891, %var_1114, %892, meta[relay.Constant][51] /* ty=Tensor[(16), int32] */, meta[relay.Constant][52] /* ty=Tensor[(160, 1), int32] */, %893)
}

def @func_554(%var_491: Tensor[(8, 2, 1), int32], %var_492: Tensor[(8, 2, 10), int32], %var_505: int8, %var_506: Tensor[(200), int8], %var_513: Tensor[(8, 2, 10), bool]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) {
  %894 = cast(%var_505, dtype="int8") /* ty=int8 */;
  %895 = cast(%var_506, dtype="int8") /* ty=Tensor[(200), int8] */;
  %896 = reshape(%894, newshape=[]) /* ty=int8 */;
  %897 = reshape(%895, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
  %898 = cast(%var_491, dtype="bool") /* ty=Tensor[(8, 2, 1), bool] */;
  %899 = cast(%var_492, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %900 = not_equal(%898, %899) /* ty=Tensor[(8, 2, 10), bool] */;
  %901 = cast(%900, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %902 = cast(%var_513, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %903 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %904 = cast(%900, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %905 = dyn.reshape(%902, %903, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %906 = cast(%var_491, dtype="bool") /* ty=Tensor[(8, 2, 1), bool] */;
  %907 = cast(%900, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %908 = @func_289(%896, %897) /* ty=Tensor[(10, 10, 2), bool] */;
  %909 = sin(%901) /* ty=Tensor[(8, 2, 10), float64] */;
  %910 = floor_divide(%904, %905) /* ty=Tensor[(8, 2, 10), float64] */;
  %911 = greater(%906, %907) /* ty=Tensor[(8, 2, 10), bool] */;
  (%908, %var_505, %var_506, %909, %910, %911)
}

def @func_7193(%var_7186: uint16, %var_7187: Tensor[(1, 14), uint16]) -> Tensor[(1, 14), uint16] {
  %912 = cast(%var_7186, dtype="uint16") /* ty=uint16 */;
  %913 = cast(%var_7187, dtype="uint16") /* ty=Tensor[(1, 14), uint16] */;
  left_shift(%912, %913) /* ty=Tensor[(1, 14), uint16] */
}

def @func_647(%var_635: Tensor[(200), int8]) -> (Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) {
  %914 = cast(meta[relay.Constant][53] /* ty=Tensor[(13, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
  %915 = cast(meta[relay.Constant][54] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %916 = cast(meta[relay.Constant][55] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %917 = cast(meta[relay.Constant][56] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %918 = cast(%var_635, dtype="int8") /* ty=Tensor[(200), int8] */;
  %919 = cast(meta[relay.Constant][55] /* ty=Tensor[(160), int32] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %920 = reshape(%915, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
  %921 = reshape(%916, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
  %922 = reshape(%917, newshape=[]) /* ty=int8 */;
  %923 = reshape(%918, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %924 = reshape(%919, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %925 = @func_554(%920, %921, %922, %923, %924) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
  %926 = cast(meta[relay.Constant][56] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %927 = %925.0;
  %928 = cast(%927, dtype="int8") /* ty=Tensor[(10, 10, 2), int8] */;
  %929 = reshape(%926, newshape=[]) /* ty=int8 */;
  %930 = reshape(%928, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
  %931 = cast(meta[relay.Constant][54] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %932 = cast(meta[relay.Constant][55] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %933 = cast(meta[relay.Constant][56] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %934 = cast(%var_635, dtype="int8") /* ty=Tensor[(200), int8] */;
  %935 = cast(meta[relay.Constant][55] /* ty=Tensor[(160), int32] */, dtype="bool") /* ty=Tensor[(160), bool] */;
  %936 = reshape(%931, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
  %937 = reshape(%932, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
  %938 = reshape(%933, newshape=[]) /* ty=int8 */;
  %939 = reshape(%934, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %940 = reshape(%935, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %941 = @func_554(%936, %937, %938, %939, %940) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
  %942 = sin(%914) /* ty=Tensor[(13, 16, 7), float64] */;
  %943 = @func_289(%929, %930) /* ty=Tensor[(10, 10, 2), bool] */;
  %944 = %941.4;
  (%942, %927, meta[relay.Constant][54] /* ty=Tensor[(16), int32] */, meta[relay.Constant][55] /* ty=Tensor[(160), int32] */, meta[relay.Constant][56] /* ty=int8 */, %var_635, %943, %944)
}

def @func_1303(%var_1298: Tensor[(200), int8]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) {
  %945 = cast(meta[relay.Constant][57] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %946 = cast(%var_1298, dtype="int8") /* ty=Tensor[(200), int8] */;
  %947 = reshape(%945, newshape=[]) /* ty=int8 */;
  %948 = reshape(%946, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
  %949 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %950 = %949.0;
  %951 = cast(%950, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %952 = @func_289(%947, %948) /* ty=Tensor[(10, 10, 2), bool] */;
  %953 = asin(%951) /* ty=Tensor[(2, 8, 4), float64] */;
  (%952, meta[relay.Constant][57] /* ty=int8 */, %var_1298, %953)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5521(%var_5519: Tensor[(160), int32], %var_5520: Tensor[(260, 1), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool], Tensor[(2, 8, 4), float64], int8, Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(4, 5, 13), float64], Tensor[(260, 1), float64]) {
  @func_5517(%var_5519, %var_5520) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool], Tensor[(2, 8, 4), float64], int8, Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(4, 5, 13), float64], Tensor[(260, 1), float64]) */
}

def @func_3962(%var_3960: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32]) {
  @func_3959(%var_3960) /* ty=(Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32]) */
}

def @func_3452() -> (Tensor[(2, 8, 4), uint32],) {
  %0 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %1 = %0.0;
  (%1,)
}

def @func_3204() -> Tensor[(2, 8, 4), uint32] {
  %2 = @func_2384() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) */;
  %2.1
}

def @func_5165(%var_5128: Tensor[(4, 5, 11), bool], %var_5129: Tensor[(4, 5, 11), bool]) -> (Tensor[(4, 5, 11), bool], Tensor[(2, 8, 4), uint32]) {
  %3 = cast(%var_5129, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %4 = shape_of(%var_5128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(%var_5128, dtype="bool") /* ty=Tensor[(4, 5, 11), bool] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %7 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %8 = logical_or(%5, %6) /* ty=Tensor[(4, 5, 11), bool] */;
  %9 = %7.0;
  (%8, %9)
}

def @func_7705() -> (Tensor[(2, 8, 4), uint32],) {
  @func_7703() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_6853() -> Tensor[(2, 8, 4), uint32] {
  @func_6851() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2479() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %10 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  %11 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%10, %11)
}

def @func_5739() -> Tensor[(2, 8, 4), uint32] {
  @func_5737() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_5565() -> (Tensor[(2, 8, 4), uint32], Tensor[(1, 12, 8), float64], Tensor[(2, 8, 4), uint32]) {
  @func_5563() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(1, 12, 8), float64], Tensor[(2, 8, 4), uint32]) */
}

def @func_4723() -> Tensor[(2, 8, 4), uint32] {
  %13 = fn () -> Tensor[(2, 8, 4), uint32] {
    %12 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %12.0
  };
  %13() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4116() -> Tensor[(2, 8, 4), uint32] {
  @func_749() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_3359(%var_3317: Tensor[(2, 6, 11), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), uint64], Tensor[(2, 6, 11), int16]) {
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %15 = log2(%14) /* ty=Tensor[(2, 6, 11), float64] */;
  %16 = cast(%var_3317, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%15, dtype="float32") /* ty=Tensor[(2, 6, 11), float32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %20 = cast(%15, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %21 = asinh(%20) /* ty=Tensor[(2, 6, 11), float64] */;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %23 = acosh(%22) /* ty=Tensor[(2, 6, 11), float64] */;
  %24 = cast(%23, dtype="uint64") /* ty=Tensor[(2, 6, 11), uint64] */;
  %25 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%21, dtype="uint64") /* ty=Tensor[(2, 6, 11), uint64] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %28 = cast(%21, dtype="float64") /* ty=Tensor[(2, 6, 11), float64] */;
  %29 = sinh(%28) /* ty=Tensor[(2, 6, 11), float64] */;
  %30 = cast(%15, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="int16") /* ty=Tensor[(2, 6, 11), int16] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %34 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %35 = power(%18, %19) /* ty=Tensor[(2, 6, 11), float32] */;
  %36 = subtract(%26, %27) /* ty=Tensor[(2, 6, 11), uint64] */;
  %37 = left_shift(%32, %33) /* ty=Tensor[(2, 6, 11), int16] */;
  (%34, %35, %36, %37)
}

def @func_5057(%var_5055: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_5054(%var_5055) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_4137() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %38 = @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %39 = %38.1;
  %40 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%39, %40)
}

def @func_3583() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_2599() -> Tensor[(2, 8, 4), uint32] {
  @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_6013(%var_6011: Tensor[(9, 7, 6), float32]) -> (Tensor[(9, 7, 6), float32],) {
  @func_6010(%var_6011) /* ty=(Tensor[(9, 7, 6), float32],) */
}

def @func_5631() -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) {
  %45 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) {
    %41 = @func_5349() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %42 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
    %43 = %41.5;
    %44 = %42.1;
    (%43, %44)
  };
  %45() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */
}

def @func_1991(%var_1933: Tensor[(6, 8, 14), float32], %var_1963: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(16), int32], Tensor[(2, 8, 4), uint32], Tensor[(6, 8, 14), float64], Tensor[(6, 8, 14), float64]) {
  %46 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %47 = cast(meta[relay.Constant][1] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %48 = reshape(%47, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
  %49 = @func_1742(%48) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) */;
  %50 = cast(%var_1963, dtype="int8") /* ty=int8 */;
  %51 = %46.0;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %53 = reshape(%50, newshape=[]) /* ty=int8 */;
  %54 = reshape(%52, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float32] */;
  %55 = @func_1224(%53, %54) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %56 = cast(%var_1933, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %57 = rsqrt(%56) /* ty=Tensor[(6, 8, 14), float64] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %59 = sin(%58) /* ty=Tensor[(6, 8, 14), float32] */;
  %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 8, 14), float32] */, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %64 = cast(%var_1933, dtype="float32") /* ty=Tensor[(6, 8, 14), float32] */;
  %65 = acosh(%64) /* ty=Tensor[(6, 8, 14), float32] */;
  %66 = cast(%var_1963, dtype="float64") /* ty=float64 */;
  %67 = cast(%65, dtype="float64") /* ty=Tensor[(6, 8, 14), float64] */;
  %68 = %49.3;
  %69 = %55.1;
  %70 = power(%62, %63) /* ty=Tensor[(6, 8, 14), float64] */;
  %71 = floor_mod(%66, %67) /* ty=Tensor[(6, 8, 14), float64] */;
  (%51, %68, meta[relay.Constant][1] /* ty=Tensor[(16), int32] */, %69, %70, %71)
}

def @func_2516(%var_2509: uint64, %var_2510: Tensor[(5, 3, 3), uint64]) -> Tensor[(5, 3, 3), uint64] {
  %72 = cast(%var_2509, dtype="uint64") /* ty=uint64 */;
  %73 = cast(%var_2510, dtype="uint64") /* ty=Tensor[(5, 3, 3), uint64] */;
  logical_xor(%72, %73) /* ty=Tensor[(5, 3, 3), uint64] */
}

def @func_7479() -> (Tensor[(5, 8, 12), float64],) {
  @func_7477() /* ty=(Tensor[(5, 8, 12), float64],) */
}

def @func_2243(%var_2189: Tensor[(1, 16), int32], %var_2190: int8, %var_2226: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) {
  %74 = @func_1848() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %75 = cast(%var_2189, dtype="int32") /* ty=Tensor[(1, 16), int32] */;
  %76 = cast(%var_2190, dtype="int8") /* ty=int8 */;
  %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %78 = reshape(%75, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %79 = reshape(%76, newshape=[]) /* ty=int8 */;
  %80 = reshape(%77, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %81 = @func_1923(%78, %79, %80) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(200), int8] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %83 = cast(%var_2226, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %84 = reshape(%83, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %85 = @func_1421(%84) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %86 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %87 = %74.0;
  %88 = %81.0;
  %89 = acosh(%82) /* ty=Tensor[(200), float64] */;
  %90 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  %91 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  %92 = %85.0;
  %93 = %86.0;
  (%87, %88, %var_2189, %var_2190, %89, %90, %91, %92, %var_2226, %93)
}

def @func_2612(%var_2611: Tensor[(4, 5, 13), float64]) -> (Tensor[(4, 5, 13), float64],) {
  %96 = fn (%var_2600: Tensor[(4, 5, 13), float64]) -> (Tensor[(4, 5, 13), float64],) {
    %94 = cast(%var_2600, dtype="float64") /* ty=Tensor[(4, 5, 13), float64] */;
    %95 = asin(%94) /* ty=Tensor[(4, 5, 13), float64] */;
    (%95,)
  };
  %96(%var_2611) /* ty=(Tensor[(4, 5, 13), float64],) */
}

def @func_2723() -> (Tensor[(2, 8, 4), uint32],) {
  %97 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%97,)
}

def @func_903(%var_902: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) {
  %112 = fn (%var_870: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) {
    %98 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
    %99 = cast(%98, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
    %100 = atan(%99) /* ty=Tensor[(2, 8, 4), float64] */;
    %101 = cast(%var_870, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
    %102 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
    %103 = cast(%98, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
    %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %105 = divide(%103, %104) /* ty=Tensor[(2, 8, 4), float32] */;
    %106 = cast(%105, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %107 = shape_of(%100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%100, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %110 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
    %111 = greater_equal(%108, %109) /* ty=Tensor[(2, 8, 4), bool] */;
    (%110, %111)
  };
  %112(%var_902) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) */
}

def @func_2844(%var_2842: Tensor[(360), float64], %var_2843: int8) -> (Tensor[(8, 8), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(200), int8], Tensor[(16), int32], int8, Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(4, 5, 13), float64], Tensor[(260), float64], Tensor[(2, 8, 4), uint32], Tensor[(5, 40), float64]) {
  %144 = fn (%var_2789: Tensor[(360), float64], %var_2799: int8) -> (Tensor[(8, 8), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(200), int8], Tensor[(16), int32], int8, Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(4, 5, 13), float64], Tensor[(260), float64], Tensor[(2, 8, 4), uint32], Tensor[(5, 40), float64]) {
    %113 = @func_2671() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(2, 8, 4), uint32]) */;
    %114 = cast(%var_2789, dtype="float64") /* ty=Tensor[(360), float64] */;
    %115 = %113.1;
    %116 = cast(%115, dtype="uint32") /* ty=Tensor[(8, 8), uint32] */;
    %117 = reshape(%114, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
    %118 = reshape(%116, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
    %119 = @func_1462(%117, %118) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
    %120 = cast(meta[relay.Constant][4] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %121 = cast(%var_2799, dtype="int8") /* ty=int8 */;
    %122 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 40), int8] */, dtype="int8") /* ty=Tensor[(5, 40), int8] */;
    %123 = reshape(%120, newshape=[16]) /* ty=Tensor[(16), int32] */;
    %124 = reshape(%121, newshape=[]) /* ty=int8 */;
    %125 = reshape(%122, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %126 = @func_1923(%123, %124, %125) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) */;
    %127 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %128 = cast(meta[relay.Constant][6] /* ty=Tensor[(260), float64] */, dtype="float64") /* ty=Tensor[(260), float64] */;
    %129 = reshape(%128, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float64] */;
    %130 = @func_2610(%129) /* ty=(Tensor[(4, 5, 13), float64],) */;
    %131 = cast(meta[relay.Constant][5] /* ty=Tensor[(5, 40), int8] */, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
    %132 = sinh(%131) /* ty=Tensor[(5, 40), float64] */;
    %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(5, 40), float64] */, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(2), int32] */;
    %135 = cast(%132, dtype="float64") /* ty=Tensor[(5, 40), float64] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %137 = %119.2;
    %138 = %126.5;
    %139 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
    %140 = %127.1;
    %141 = %130.0;
    %142 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
    %143 = floor_mod(%135, %136) /* ty=Tensor[(5, 40), float64] */;
    (%115, %137, %var_2789, %138, meta[relay.Constant][4] /* ty=Tensor[(16), int32] */, %var_2799, %139, %140, %141, meta[relay.Constant][6] /* ty=Tensor[(260), float64] */, %142, %143)
  };
  %144(%var_2842, %var_2843) /* ty=(Tensor[(8, 8), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(200), int8], Tensor[(16), int32], int8, Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(4, 5, 13), float64], Tensor[(260), float64], Tensor[(2, 8, 4), uint32], Tensor[(5, 40), float64]) */
}

def @func_6416(%var_6414: int8, %var_6415: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint8], int8, Tensor[(160), int32]) {
  %155 = fn (%var_6406: int8, %var_6407: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint8], int8, Tensor[(160), int32]) {
    %145 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %146 = %145.0;
    %147 = cast(%146, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
    %148 = cast(%var_6406, dtype="int8") /* ty=int8 */;
    %149 = cast(%var_6407, dtype="int32") /* ty=Tensor[(160), int32] */;
    %150 = reshape(%147, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float64] */;
    %151 = reshape(%148, newshape=[]) /* ty=int8 */;
    %152 = reshape(%149, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %153 = @func_4497(%150, %151, %152) /* ty=(Tensor[(2, 8, 4), uint8], Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(2, 8, 4), uint16], Tensor[(16), int32], Tensor[(160), int32], Tensor[(1, 384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), uint64], Tensor[(160), int32]) */;
    %154 = %153.0;
    (%146, %154, %var_6406, %var_6407)
  };
  %155(%var_6414, %var_6415) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint8], int8, Tensor[(160), int32]) */
}

def @func_4803(%var_4781: Tensor[(16), int32], %var_4782: int8, %var_4783: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(200), float64], Tensor[(16), int32], int8, Tensor[(448), uint16], Tensor[(200), int8]) {
  %156 = cast(%var_4781, dtype="int32") /* ty=Tensor[(16), int32] */;
  %157 = cast(%var_4782, dtype="int8") /* ty=int8 */;
  %158 = cast(%var_4783, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %159 = reshape(%156, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
  %160 = reshape(%157, newshape=[]) /* ty=int8 */;
  %161 = reshape(%158, newshape=[448]) /* ty=Tensor[(448), uint16] */;
  %162 = @func_2243(%159, %160, %161) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) */;
  %163 = %162.4;
  %164 = cast(%163, dtype="int8") /* ty=Tensor[(200), int8] */;
  %165 = reshape(%164, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %166 = @func_1303(%165) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */;
  %167 = @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */;
  %168 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %169 = %166.2;
  (%167, %168, %163, %var_4781, %var_4782, %var_4783, %169)
}

def @func_6122(%var_6120: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], int8) {
  @func_6119(%var_6120) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], int8) */
}

def @func_649(%var_648: Tensor[(200), int8]) -> (Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) {
  %201 = fn (%var_635: Tensor[(200), int8]) -> (Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) {
    %170 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 16, 7), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 7), float64] */;
    %171 = cast(meta[relay.Constant][9] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %172 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
    %173 = cast(meta[relay.Constant][11] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %174 = cast(%var_635, dtype="int8") /* ty=Tensor[(200), int8] */;
    %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), int32] */, dtype="bool") /* ty=Tensor[(160), bool] */;
    %176 = reshape(%171, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
    %177 = reshape(%172, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
    %178 = reshape(%173, newshape=[]) /* ty=int8 */;
    %179 = reshape(%174, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %180 = reshape(%175, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
    %181 = @func_554(%176, %177, %178, %179, %180) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
    %182 = cast(meta[relay.Constant][11] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %183 = %181.0;
    %184 = cast(%183, dtype="int8") /* ty=Tensor[(10, 10, 2), int8] */;
    %185 = reshape(%182, newshape=[]) /* ty=int8 */;
    %186 = reshape(%184, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
    %187 = cast(meta[relay.Constant][9] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
    %189 = cast(meta[relay.Constant][11] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %190 = cast(%var_635, dtype="int8") /* ty=Tensor[(200), int8] */;
    %191 = cast(meta[relay.Constant][10] /* ty=Tensor[(160), int32] */, dtype="bool") /* ty=Tensor[(160), bool] */;
    %192 = reshape(%187, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
    %193 = reshape(%188, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
    %194 = reshape(%189, newshape=[]) /* ty=int8 */;
    %195 = reshape(%190, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %196 = reshape(%191, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
    %197 = @func_554(%192, %193, %194, %195, %196) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
    %198 = sin(%170) /* ty=Tensor[(13, 16, 7), float64] */;
    %199 = @func_289(%185, %186) /* ty=Tensor[(10, 10, 2), bool] */;
    %200 = %197.4;
    (%198, %183, meta[relay.Constant][9] /* ty=Tensor[(16), int32] */, meta[relay.Constant][10] /* ty=Tensor[(160), int32] */, meta[relay.Constant][11] /* ty=int8 */, %var_635, %199, %200)
  };
  %201(%var_648) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */
}

def @func_720() -> Tensor[(2, 8, 4), uint32] {
  @func_718() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4895() -> (Tensor[(2, 8, 4), float64],) {
  %202 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
  %203 = %202.0;
  (%203,)
}

def @func_7431() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %210 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %204 = @func_2429() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(2, 180), float64]) */;
    %205 = %204.0;
    %206 = cast(%205, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
    %207 = reshape(%206, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
    %208 = @func_901(%207) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) */;
    %209 = %208.0;
    (%205, %209)
  };
  %210() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_708() -> (Tensor[(2, 8, 4), uint32],) {
  %211 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %212 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 8, 4), uint32] */, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %213 = multiply(%211, %212) /* ty=Tensor[(2, 8, 4), uint32] */;
  (%213,)
}

def @func_5488(%var_5484: Tensor[(9, 3, 6), float32], %var_5485: Tensor[(16), int32], %var_5486: int8, %var_5487: Tensor[(2, 224), uint16]) -> (Tensor[(9, 3, 6), float32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], int8, Tensor[(2, 224), uint16]) {
  %226 = fn (%var_5448: Tensor[(9, 3, 6), float32], %var_5475: Tensor[(16), int32], %var_5476: int8, %var_5477: Tensor[(2, 224), uint16]) -> (Tensor[(9, 3, 6), float32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], int8, Tensor[(2, 224), uint16]) {
    %214 = cast(%var_5448, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
    %215 = exp(%214) /* ty=Tensor[(9, 3, 6), float32] */;
    %216 = cast(%215, dtype="float32") /* ty=Tensor[(9, 3, 6), float32] */;
    %217 = cast(%var_5475, dtype="int32") /* ty=Tensor[(16), int32] */;
    %218 = cast(%var_5476, dtype="int8") /* ty=int8 */;
    %219 = cast(%var_5477, dtype="uint16") /* ty=Tensor[(2, 224), uint16] */;
    %220 = reshape(%217, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
    %221 = reshape(%218, newshape=[]) /* ty=int8 */;
    %222 = reshape(%219, newshape=[448]) /* ty=Tensor[(448), uint16] */;
    %223 = @func_2243(%220, %221, %222) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) */;
    %224 = sqrt(%216) /* ty=Tensor[(9, 3, 6), float32] */;
    %225 = %223.0;
    (%224, %225, %var_5475, %var_5476, %var_5477)
  };
  %226(%var_5484, %var_5485, %var_5486, %var_5487) /* ty=(Tensor[(9, 3, 6), float32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], int8, Tensor[(2, 224), uint16]) */
}

def @func_293(%var_291: int8, %var_292: Tensor[(10, 10, 2), int8]) -> Tensor[(10, 10, 2), bool] {
  @func_289(%var_291, %var_292) /* ty=Tensor[(10, 10, 2), bool] */
}

def @func_2684() -> (Tensor[(2, 8, 4), uint32],) {
  %227 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%227,)
}

def @func_5377() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64]) {
  %233 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64]) {
    %228 = @func_2684() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %229 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
    %230 = @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */;
    %231 = %228.0;
    %232 = %229.0;
    (%230, %231, %232)
  };
  %233() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64]) */
}

def @func_2651() -> Tensor[(2, 8, 4), float64] {
  %234 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
  %234.0
}

def @func_4529(%var_4516: Tensor[(15, 6, 9), float64]) -> Tensor[(15, 6, 9), float64] {
  %235 = cast(%var_4516, dtype="float64") /* ty=Tensor[(15, 6, 9), float64] */;
  cosh(%235) /* ty=Tensor[(15, 6, 9), float64] */
}

def @func_3206() -> Tensor[(2, 8, 4), uint32] {
  @func_3204() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_7066(%var_7045: Tensor[(9, 90), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(15, 6, 9), float64], Tensor[(9, 90), float64], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 9), float32], Tensor[(144), uint64], Tensor[(2, 8, 4), uint32]) {
  %236 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %237 = cast(%var_7045, dtype="float64") /* ty=Tensor[(9, 90), float64] */;
  %238 = reshape(%237, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
  %239 = cast(meta[relay.Constant][14] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %240 = cast(meta[relay.Constant][14] /* ty=Tensor[(144), uint64] */, dtype="uint64") /* ty=Tensor[(144), uint64] */;
  %241 = reshape(%239, newshape=[8, 2, 9]) /* ty=Tensor[(8, 2, 9), uint64] */;
  %242 = reshape(%240, newshape=[8, 2, 9]) /* ty=Tensor[(8, 2, 9), uint64] */;
  %243 = @func_3724(%241, %242) /* ty=(Tensor[(8, 2, 9), uint64], Tensor[(8, 2, 9), float32]) */;
  %244 = %236.1;
  %245 = @func_4529(%238) /* ty=Tensor[(15, 6, 9), float64] */;
  %246 = @func_4722() /* ty=Tensor[(2, 8, 4), uint32] */;
  %247 = %243.1;
  %248 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%244, %245, %var_7045, %246, %247, meta[relay.Constant][14] /* ty=Tensor[(144), uint64] */, %248)
}

def @func_1386() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_6205(%var_6202: float64, %var_6203: Tensor[(2, 1), float64], %var_6204: Tensor[(8, 56), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], float64, Tensor[(2, 1), float64], Tensor[(8, 56), uint16]) {
  %259 = fn (%var_6179: float64, %var_6180: Tensor[(2, 1), float64], %var_6181: Tensor[(8, 56), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], float64, Tensor[(2, 1), float64], Tensor[(8, 56), uint16]) {
    %249 = @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %250 = cast(%var_6179, dtype="float64") /* ty=float64 */;
    %251 = cast(%var_6180, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
    %252 = cast(%var_6181, dtype="uint16") /* ty=Tensor[(8, 56), uint16] */;
    %253 = reshape(%250, newshape=[]) /* ty=float64 */;
    %254 = reshape(%251, newshape=[2, 1]) /* ty=Tensor[(2, 1), float64] */;
    %255 = reshape(%252, newshape=[448]) /* ty=Tensor[(448), uint16] */;
    %256 = @func_4236(%253, %254, %255) /* ty=(Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %257 = %249.1;
    %258 = %256.3;
    (%257, %258, %var_6179, %var_6180, %var_6181)
  };
  %259(%var_6202, %var_6203, %var_6204) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], float64, Tensor[(2, 1), float64], Tensor[(8, 56), uint16]) */
}

def @func_2686() -> (Tensor[(2, 8, 4), uint32],) {
  @func_2684() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_4379() -> (Tensor[(2, 8, 4), float64], Tensor[(200), bool]) {
  %260 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %261 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %262 = %260.1;
  (%261, %262)
}

def @func_1857() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_1388() -> Tensor[(2, 8, 4), uint32] {
  @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_1601(%var_1600: Tensor[(360), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(360), float64]) {
  %271 = fn (%var_1595: Tensor[(360), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(360), float64]) {
    %263 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %264 = cast(%var_1595, dtype="float64") /* ty=Tensor[(360), float64] */;
    %265 = %263.0;
    %266 = cast(%265, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
    %267 = reshape(%264, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
    %268 = reshape(%266, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
    %269 = @func_1462(%267, %268) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
    %270 = %269.0;
    (%265, %270, %var_1595)
  };
  %271(%var_1600) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(360), float64]) */
}

def @func_5608() -> (Tensor[(2, 8, 4), uint32],) {
  %273 = fn () -> (Tensor[(2, 8, 4), uint32],) {
    %272 = @func_4272() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%272,)
  };
  %273() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_3236() -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) {
  @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */
}

def @func_7329(%var_7328: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) {
  %283 = fn (%var_7319: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) {
    %274 = @func_7217() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %275 = cast(%var_7319, dtype="float64") /* ty=Tensor[(384), float64] */;
    %276 = reshape(%275, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %277 = @func_4606(%276) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) */;
    %278 = @func_5376() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64]) */;
    %279 = %274.1;
    %280 = %277.1;
    %281 = %278.2;
    %282 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%279, %280, %var_7319, %281, %282)
  };
  %283(%var_7328) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */
}

def @func_2653() -> Tensor[(2, 8, 4), float64] {
  @func_2651() /* ty=Tensor[(2, 8, 4), float64] */
}

def @func_958() -> (Tensor[(2, 8, 4), uint32],) {
  %286 = fn () -> (Tensor[(2, 8, 4), uint32],) {
    %284 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %285 = %284.0;
    (%285,)
  };
  %286() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_3234() -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) {
  %287 = cast(meta[relay.Constant][15] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %288 = reshape(%287, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %289 = @func_1303(%288) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */;
  %290 = %289.2;
  %291 = cast(%290, dtype="bool") /* ty=Tensor[(200), bool] */;
  %292 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(200), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %293 = cast(meta[relay.Constant][15] /* ty=Tensor[(200), int8] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %294 = dyn.reshape(%291, %292, newshape=[]) /* ty=Tensor[(?), bool] */;
  %295 = @func_3204() /* ty=Tensor[(2, 8, 4), uint32] */;
  %296 = logical_or(%293, %294) /* ty=Tensor[(200), bool] */;
  (%295, %296)
}

def @func_710() -> (Tensor[(2, 8, 4), uint32],) {
  @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_1057() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_6333(%var_6329: bool, %var_6330: Tensor[(11, 14, 7), bool], %var_6331: Tensor[(11, 14, 7), bool], %var_6332: Tensor[(112, 4), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(11, 14, 7), int64], Tensor[(11, 14, 7), bool], Tensor[(14, 2, 16), uint16], Tensor[(2, 8, 4), uint32], Tensor[(112, 4), bool]) {
  %322 = fn (%var_6226: bool, %var_6227: Tensor[(11, 14, 7), bool], %var_6259: Tensor[(11, 14, 7), bool], %var_6298: Tensor[(112, 4), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(11, 14, 7), int64], Tensor[(11, 14, 7), bool], Tensor[(14, 2, 16), uint16], Tensor[(2, 8, 4), uint32], Tensor[(112, 4), bool]) {
    %297 = @func_5349() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %298 = @func_3887() /* ty=(Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) */;
    %299 = cast(%var_6227, dtype="int64") /* ty=Tensor[(11, 14, 7), int64] */;
    %300 = cast(%var_6226, dtype="int64") /* ty=int64 */;
    %301 = cast(%var_6226, dtype="bool") /* ty=bool */;
    %302 = cast(%var_6227, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
    %303 = logical_and(%301, %302) /* ty=Tensor[(11, 14, 7), bool] */;
    %304 = cast(%var_6259, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
    %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
    %306 = cast(%303, dtype="bool") /* ty=Tensor[(11, 14, 7), bool] */;
    %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %308 = cast(%var_6298, dtype="uint16") /* ty=Tensor[(112, 4), uint16] */;
    %309 = reshape(%308, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
    %310 = @func_1421(%309) /* ty=(Tensor[(14, 2, 16), uint16],) */;
    %311 = cast(%var_6298, dtype="float32") /* ty=Tensor[(112, 4), float32] */;
    %312 = erf(%311) /* ty=Tensor[(112, 4), float32] */;
    %313 = cast(%312, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
    %314 = cast(%var_6226, dtype="bool") /* ty=bool */;
    %315 = %297.5;
    %316 = %298.1;
    %317 = left_shift(%299, %300) /* ty=Tensor[(11, 14, 7), int64] */;
    %318 = greater(%306, %307) /* ty=Tensor[(11, 14, 7), bool] */;
    %319 = %310.0;
    %320 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
    %321 = logical_and(%313, %314) /* ty=Tensor[(112, 4), bool] */;
    (%315, %316, %317, %318, %319, %320, %321)
  };
  %322(%var_6329, %var_6330, %var_6331, %var_6332) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(11, 14, 7), int64], Tensor[(11, 14, 7), bool], Tensor[(14, 2, 16), uint16], Tensor[(2, 8, 4), uint32], Tensor[(112, 4), bool]) */
}

def @func_4879(%var_4876: Tensor[(6, 6, 2), float64], %var_4877: Tensor[(6, 6, 2), float64], %var_4878: Tensor[(16, 4), uint32]) -> (Tensor[(2, 8, 4), bool], Tensor[(16, 4), uint32], Tensor[(6, 6, 2), float64], Tensor[(2, 8, 4), uint32]) {
  %335 = fn (%var_4831: Tensor[(6, 6, 2), float64], %var_4832: Tensor[(6, 6, 2), float64], %var_4863: Tensor[(16, 4), uint32]) -> (Tensor[(2, 8, 4), bool], Tensor[(16, 4), uint32], Tensor[(6, 6, 2), float64], Tensor[(2, 8, 4), uint32]) {
    %323 = cast(%var_4863, dtype="uint32") /* ty=Tensor[(16, 4), uint32] */;
    %324 = reshape(%323, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
    %325 = @func_3959(%324) /* ty=(Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32]) */;
    %326 = cast(%var_4832, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
    %327 = shape_of(%var_4831, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%var_4831, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %330 = divide(%328, %329) /* ty=Tensor[(6, 6, 2), float64] */;
    %331 = cast(%330, dtype="float64") /* ty=Tensor[(6, 6, 2), float64] */;
    %332 = %325.0;
    %333 = sigmoid(%331) /* ty=Tensor[(6, 6, 2), float64] */;
    %334 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%332, %var_4863, %333, %334)
  };
  %335(%var_4876, %var_4877, %var_4878) /* ty=(Tensor[(2, 8, 4), bool], Tensor[(16, 4), uint32], Tensor[(6, 6, 2), float64], Tensor[(2, 8, 4), uint32]) */
}

def @func_1228(%var_1226: int8, %var_1227: Tensor[(2, 8, 4), float32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) {
  @func_1224(%var_1226, %var_1227) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */
}

def @func_2101() -> (Tensor[(2, 8, 4), float64],) {
  @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */
}

def @func_2033() -> Tensor[(2, 8, 4), uint32] {
  @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_3959(%var_3939: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32]) {
  %336 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %337 = %336.0;
  %338 = cast(%var_3939, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %339 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %340 = cast(%337, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %342 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %343 = equal(%340, %341) /* ty=Tensor[(2, 8, 4), bool] */;
  %344 = %342.0;
  (%343, %344)
}

def @func_1760() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_1465(%var_1463: Tensor[(6, 6, 10), float64], %var_1464: Tensor[(8, 8), uint32]) -> (Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) {
  %351 = fn (%var_1448: Tensor[(6, 6, 10), float64], %var_1456: Tensor[(8, 8), uint32]) -> (Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) {
    %345 = cast(%var_1448, dtype="float64") /* ty=Tensor[(6, 6, 10), float64] */;
    %346 = cast(%var_1456, dtype="uint32") /* ty=Tensor[(8, 8), uint32] */;
    %347 = reshape(%346, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
    %348 = @func_901(%347) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool]) */;
    %349 = sigmoid(%345) /* ty=Tensor[(6, 6, 10), float64] */;
    %350 = %348.1;
    (%349, %350, %var_1456)
  };
  %351(%var_1463, %var_1464) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */
}

def @func_4948(%var_4934: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64]) {
  %352 = cast(%var_4934, dtype="float64") /* ty=Tensor[(384), float64] */;
  %353 = reshape(%352, newshape=[384]) /* ty=Tensor[(384), float64] */;
  %354 = @func_4606(%353) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) */;
  %355 = @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */;
  %356 = %354.1;
  (%355, %356, %var_4934)
}

def @func_3724(%var_3687: Tensor[(8, 2, 9), uint64], %var_3688: Tensor[(8, 2, 9), uint64]) -> (Tensor[(8, 2, 9), uint64], Tensor[(8, 2, 9), float32]) {
  %357 = cast(%var_3688, dtype="uint64") /* ty=Tensor[(8, 2, 9), uint64] */;
  %358 = shape_of(%var_3687, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_3687, dtype="uint64") /* ty=Tensor[(8, 2, 9), uint64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %361 = cast(%var_3688, dtype="float64") /* ty=Tensor[(8, 2, 9), float64] */;
  %362 = sigmoid(%361) /* ty=Tensor[(8, 2, 9), float64] */;
  %363 = cast(%var_3688, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %364 = cos(%363) /* ty=Tensor[(8, 2, 9), float32] */;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %366 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%362, dtype="float32") /* ty=Tensor[(8, 2, 9), float32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %369 = bitwise_or(%359, %360) /* ty=Tensor[(8, 2, 9), uint64] */;
  %370 = mod(%367, %368) /* ty=Tensor[(8, 2, 9), float32] */;
  (%369, %370)
}

def @func_4381() -> (Tensor[(2, 8, 4), float64], Tensor[(200), bool]) {
  @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */
}

def @func_749() -> Tensor[(2, 8, 4), uint32] {
  %371 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %371.0
}

def @func_7193(%var_7186: uint16, %var_7187: Tensor[(1, 14), uint16]) -> Tensor[(1, 14), uint16] {
  %372 = cast(%var_7186, dtype="uint16") /* ty=uint16 */;
  %373 = cast(%var_7187, dtype="uint16") /* ty=Tensor[(1, 14), uint16] */;
  left_shift(%372, %373) /* ty=Tensor[(1, 14), uint16] */
}

def @func_1305(%var_1304: Tensor[(200), int8]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) {
  %383 = fn (%var_1298: Tensor[(200), int8]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) {
    %374 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %375 = cast(%var_1298, dtype="int8") /* ty=Tensor[(200), int8] */;
    %376 = reshape(%374, newshape=[]) /* ty=int8 */;
    %377 = reshape(%375, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
    %378 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %379 = %378.0;
    %380 = cast(%379, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
    %381 = @func_289(%376, %377) /* ty=Tensor[(10, 10, 2), bool] */;
    %382 = asin(%380) /* ty=Tensor[(2, 8, 4), float64] */;
    (%381, meta[relay.Constant][16] /* ty=int8 */, %var_1298, %382)
  };
  %383(%var_1304) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */
}

def @func_2134() -> Tensor[(2, 8, 4), uint32] {
  @func_2132() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4897() -> (Tensor[(2, 8, 4), float64],) {
  @func_4895() /* ty=(Tensor[(2, 8, 4), float64],) */
}

def @func_778(%var_762: Tensor[(16), int32], %var_763: Tensor[(160), int32], %var_764: int8, %var_765: Tensor[(200), int8]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) {
  %384 = cast(%var_762, dtype="int32") /* ty=Tensor[(16), int32] */;
  %385 = cast(%var_763, dtype="int32") /* ty=Tensor[(160), int32] */;
  %386 = cast(%var_764, dtype="int8") /* ty=int8 */;
  %387 = cast(%var_765, dtype="int8") /* ty=Tensor[(200), int8] */;
  %388 = cast(%var_763, dtype="bool") /* ty=Tensor[(160), bool] */;
  %389 = reshape(%384, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
  %390 = reshape(%385, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
  %391 = reshape(%386, newshape=[]) /* ty=int8 */;
  %392 = reshape(%387, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %393 = reshape(%388, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
  %394 = @func_554(%389, %390, %391, %392, %393) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
  %395 = %394.2;
  %396 = cast(%395, dtype="int8") /* ty=Tensor[(200), int8] */;
  %397 = reshape(%396, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %398 = @func_647(%397) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */;
  %399 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %400 = %398.3;
  (%399, %395, %var_762, %var_763, %var_764, %var_765, %400)
}

def @func_5563() -> (Tensor[(2, 8, 4), uint32], Tensor[(1, 12, 8), float64], Tensor[(2, 8, 4), uint32]) {
  %401 = @func_2384() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) */;
  %402 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 12, 8), float32] */, dtype="float32") /* ty=Tensor[(1, 12, 8), float32] */;
  %403 = acosh(%402) /* ty=Tensor[(1, 12, 8), float32] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(1, 12, 8), float64] */;
  %405 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %406 = %401.1;
  %407 = sinh(%404) /* ty=Tensor[(1, 12, 8), float64] */;
  %408 = %405.0;
  (%406, %407, %408)
}

def @func_1055() -> Tensor[(2, 8, 4), uint32] {
  @func_749() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2386() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) {
  @func_2384() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) */
}

def @func_5823(%var_5822: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), float64], Tensor[(200), int8], Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %423 = fn (%var_5806: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), float64], Tensor[(200), int8], Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %409 = cast(meta[relay.Constant][18] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %410 = reshape(%409, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %411 = @func_1303(%410) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float64]) */;
    %412 = @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */;
    %413 = cast(%var_5806, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %414 = shape_of(%412, dtype="int32") /* ty=Tensor[(3), int32] */;
    %415 = cast(%412, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %417 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %418 = @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %419 = %411.3;
    %420 = not_equal(%415, %416) /* ty=Tensor[(2, 8, 4), bool] */;
    %421 = %417.0;
    %422 = %418.0;
    (%419, meta[relay.Constant][18] /* ty=Tensor[(200), int8] */, %420, %421, %422)
  };
  %423(%var_5822) /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), int8], Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_3060() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_5054(%var_5018: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %424 = cast(%var_5018, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %425 = reshape(%424, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %426 = @func_1421(%425) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %427 = @func_3043() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %428 = @func_2031() /* ty=Tensor[(2, 8, 4), uint32] */;
  %429 = %426.0;
  %430 = @func_4272() /* ty=Tensor[(2, 8, 4), uint32] */;
  %431 = %427.0;
  (%428, %429, %var_5018, %430, %431)
}

def @func_3454() -> (Tensor[(2, 8, 4), uint32],) {
  @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_3045() -> (Tensor[(2, 8, 4), uint32],) {
  @func_3043() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_5517(%var_5507: Tensor[(160), int32], %var_5515: Tensor[(260, 1), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), bool], Tensor[(2, 8, 4), float64], int8, Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(4, 5, 13), float64], Tensor[(260, 1), float64]) {
  %432 = @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %433 = @func_3887() /* ty=(Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) */;
  %434 = cast(meta[relay.Constant][19] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %435 = cast(%var_5507, dtype="int32") /* ty=Tensor[(160), int32] */;
  %436 = cast(meta[relay.Constant][20] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %437 = %433.0;
  %438 = cast(%437, dtype="int8") /* ty=Tensor[(200), int8] */;
  %439 = reshape(%434, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %440 = reshape(%435, newshape=[160]) /* ty=Tensor[(160), int32] */;
  %441 = reshape(%436, newshape=[]) /* ty=int8 */;
  %442 = reshape(%438, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %443 = @func_778(%439, %440, %441, %442) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */;
  %444 = cast(%var_5515, dtype="float64") /* ty=Tensor[(260, 1), float64] */;
  %445 = reshape(%444, newshape=[4, 5, 13]) /* ty=Tensor[(4, 5, 13), float64] */;
  %446 = @func_2610(%445) /* ty=(Tensor[(4, 5, 13), float64],) */;
  %447 = %432.0;
  %448 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %449 = %443.4;
  %450 = %446.0;
  (%447, %437, %448, %449, meta[relay.Constant][19] /* ty=Tensor[(16), int32] */, %var_5507, meta[relay.Constant][20] /* ty=int8 */, %450, %var_5515)
}

def @func_1424(%var_1422: Tensor[(14, 2, 16), uint16]) -> (Tensor[(14, 2, 16), uint16],) {
  @func_1421(%var_1422) /* ty=(Tensor[(14, 2, 16), uint16],) */
}

def @func_3179() -> (Tensor[(2, 8, 4), uint32],) {
  @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @main(%var_7987: Tensor[(14, 8, 13), uint32]) -> Tensor[(14, 8, 13), uint32] {
  %451 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 8, 13), uint32] */, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %452 = shape_of(%var_7987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(%var_7987, dtype="uint32") /* ty=Tensor[(14, 8, 13), uint32] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%453, %454) /* ty=Tensor[(14, 8, 13), uint32] */
}

def @func_5385() -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(36, 10), float64]) {
  %455 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %456 = cast(meta[relay.Constant][22] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
  %457 = %455.1;
  %458 = cast(%457, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %459 = reshape(%456, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %460 = reshape(%458, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %461 = @func_1462(%459, %460) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %462 = %461.0;
  (%457, %462, meta[relay.Constant][22] /* ty=Tensor[(36, 10), float64] */)
}

def @func_2248(%var_2245: Tensor[(1, 16), int32], %var_2246: int8, %var_2247: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) {
  @func_2243(%var_2245, %var_2246, %var_2247) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(1, 16), int32], int8, Tensor[(200), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32]) */
}

def @func_2481() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_2479() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_2725() -> (Tensor[(2, 8, 4), uint32],) {
  @func_2723() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_3888() -> (Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) {
  %467 = fn () -> (Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) {
    %463 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
    %464 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %465 = %463.1;
    %466 = %464.0;
    (%465, %466)
  };
  %467() /* ty=(Tensor[(200), bool], Tensor[(2, 8, 4), uint32]) */
}

def @func_7703() -> (Tensor[(2, 8, 4), uint32],) {
  %468 = @func_6910() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %469 = %468.0;
  (%469,)
}

def @func_2430() -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(2, 180), float64]) {
  %478 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(2, 180), float64]) {
    %470 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %471 = cast(meta[relay.Constant][23] /* ty=Tensor[(2, 180), float64] */, dtype="float64") /* ty=Tensor[(2, 180), float64] */;
    %472 = %470.0;
    %473 = cast(%472, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
    %474 = reshape(%471, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
    %475 = reshape(%473, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
    %476 = @func_1462(%474, %475) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
    %477 = %476.0;
    (%472, %477, meta[relay.Constant][23] /* ty=Tensor[(2, 180), float64] */)
  };
  %478() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(2, 180), float64]) */
}

def @func_7141() -> (Tensor[(36, 10), float64], Tensor[(2, 8, 4), uint32]) {
  %488 = fn () -> (Tensor[(36, 10), float64], Tensor[(2, 8, 4), uint32]) {
    %479 = @func_5385() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(36, 10), float64]) */;
    %480 = %479.2;
    %481 = cast(meta[relay.Constant][24] /* ty=Tensor[(36, 10), float64] */, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
    %482 = shape_of(%480, dtype="int32") /* ty=Tensor[(2), int32] */;
    %483 = cast(%480, dtype="float64") /* ty=Tensor[(36, 10), float64] */;
    %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %485 = @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %486 = floor_mod(%483, %484) /* ty=Tensor[(36, 10), float64] */;
    %487 = %485.0;
    (%486, %487)
  };
  %488() /* ty=(Tensor[(36, 10), float64], Tensor[(2, 8, 4), uint32]) */
}

def @func_7477() -> (Tensor[(5, 8, 12), float64],) {
  %489 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 8, 12), float64] */, dtype="float64") /* ty=Tensor[(5, 8, 12), float64] */;
  %490 = rsqrt(%489) /* ty=Tensor[(5, 8, 12), float64] */;
  (%490,)
}

def @func_2031() -> Tensor[(2, 8, 4), uint32] {
  @func_718() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_5169(%var_5167: Tensor[(4, 5, 11), bool], %var_5168: Tensor[(4, 5, 11), bool]) -> (Tensor[(4, 5, 11), bool], Tensor[(2, 8, 4), uint32]) {
  @func_5165(%var_5167, %var_5168) /* ty=(Tensor[(4, 5, 11), bool], Tensor[(2, 8, 4), uint32]) */
}

def @func_6527() -> Tensor[(16), int32] {
  %492 = fn () -> Tensor[(16), int32] {
    %491 = @func_6165() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) */;
    %491.3
  };
  %492() /* ty=Tensor[(16), int32] */
}

def @func_2866() -> Tensor[(2, 8, 4), uint32] {
  %493 = @func_1848() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %493.0
}

def @func_1859() -> Tensor[(2, 8, 4), uint32] {
  @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_7833(%var_7805: Tensor[(2), float64], %var_7806: Tensor[(448), uint16]) -> (Tensor[(200), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2), float64], Tensor[(448), uint16], Tensor[(5, 1, 6), bool], int8) {
  %494 = @func_4379() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), bool]) */;
  %495 = @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %496 = @func_6804() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %497 = cast(-8.23306f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %498 = cast(%var_7805, dtype="float64") /* ty=Tensor[(2), float64] */;
  %499 = cast(%var_7806, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %500 = reshape(%497, newshape=[]) /* ty=float64 */;
  %501 = reshape(%498, newshape=[2, 1]) /* ty=Tensor[(2, 1), float64] */;
  %502 = reshape(%499, newshape=[448]) /* ty=Tensor[(448), uint16] */;
  %503 = @func_4236(%500, %501, %502) /* ty=(Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %504 = cast(-8.23306f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %505 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 1, 6), float64] */, dtype="bool") /* ty=Tensor[(5, 1, 6), bool] */;
  %506 = @func_6165() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) */;
  %507 = %494.1;
  %508 = @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */;
  %509 = %495.1;
  %510 = %496.0;
  %511 = %503.4;
  %512 = not_equal(%504, %505) /* ty=Tensor[(5, 1, 6), bool] */;
  %513 = %506.2;
  (%507, %508, %509, %510, %511, %var_7805, %var_7806, %512, %513)
}

def @func_6586(%var_6584: Tensor[(14, 7, 14), int64], %var_6585: Tensor[(64), uint32]) -> (Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), float32], Tensor[(6, 6, 10), float64], Tensor[(360), float64], Tensor[(64), uint32]) {
  %532 = fn (%var_6548: Tensor[(14, 7, 14), int64], %var_6580: Tensor[(64), uint32]) -> (Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), float32], Tensor[(6, 6, 10), float64], Tensor[(360), float64], Tensor[(64), uint32]) {
    %514 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), int64] */, dtype="int64") /* ty=Tensor[(14, 7, 14), int64] */;
    %515 = shape_of(%var_6548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %516 = cast(%var_6548, dtype="int64") /* ty=Tensor[(14, 7, 14), int64] */;
    %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %518 = minimum(%516, %517) /* ty=Tensor[(14, 7, 14), int64] */;
    %519 = cast(%518, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
    %520 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %521 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 7, 14), int64] */, dtype="bool") /* ty=Tensor[(14, 7, 14), bool] */;
    %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %523 = cast(%518, dtype="float32") /* ty=Tensor[(14, 7, 14), float32] */;
    %524 = cast(meta[relay.Constant][28] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
    %525 = cast(%var_6580, dtype="uint32") /* ty=Tensor[(64), uint32] */;
    %526 = reshape(%524, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
    %527 = reshape(%525, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
    %528 = @func_1462(%526, %527) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
    %529 = less(%521, %522) /* ty=Tensor[(14, 7, 14), bool] */;
    %530 = sqrt(%523) /* ty=Tensor[(14, 7, 14), float32] */;
    %531 = %528.0;
    (%529, %530, %531, meta[relay.Constant][28] /* ty=Tensor[(360), float64] */, %var_6580)
  };
  %532(%var_6584, %var_6585) /* ty=(Tensor[(14, 7, 14), bool], Tensor[(14, 7, 14), float32], Tensor[(6, 6, 10), float64], Tensor[(360), float64], Tensor[(64), uint32]) */
}

def @func_4532(%var_4530: Tensor[(15, 6, 9), float64]) -> Tensor[(15, 6, 9), float64] {
  @func_4529(%var_4530) /* ty=Tensor[(15, 6, 9), float64] */
}

def @func_6070() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_6068() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_3420(%var_3419: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), int64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), float64]) {
  %543 = fn (%var_3385: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), int64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), float64]) {
    %533 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %534 = %533.0;
    %535 = cast(%var_3385, dtype="int64") /* ty=Tensor[(2, 8, 4), int64] */;
    %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
    %537 = cast(%534, dtype="int64") /* ty=Tensor[(2, 8, 4), int64] */;
    %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %539 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
    %540 = right_shift(%537, %538) /* ty=Tensor[(2, 8, 4), int64] */;
    %541 = %539.0;
    %542 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
    (%540, %541, %542)
  };
  %543(%var_3419) /* ty=(Tensor[(2, 8, 4), int64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), float64]) */
}

def @func_2047() -> Tensor[(2, 8, 4), uint32] {
  %544 = fn () -> Tensor[(2, 8, 4), uint32] {
    @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
  };
  %544() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_5737() -> Tensor[(2, 8, 4), uint32] {
  @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_6068() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %545 = @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %546 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %547 = %545.1;
  %548 = %546.0;
  (%547, %548)
}

def @func_1758() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %549 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %550 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %551 = %549.0;
  (%550, %551)
}

def @func_4828() -> (Tensor[(2, 8, 4), uint32],) {
  %552 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %553 = %552.1;
  (%553,)
}

def @func_5117(%var_5115: Tensor[(11, 10, 8), int64], %var_5116: Tensor[(11, 10, 8), int64]) -> (Tensor[(11, 10, 8), float32], Tensor[(11, 10, 8), bool]) {
  %569 = fn (%var_5081: Tensor[(11, 10, 8), int64], %var_5082: Tensor[(11, 10, 8), int64]) -> (Tensor[(11, 10, 8), float32], Tensor[(11, 10, 8), bool]) {
    %554 = cast(%var_5082, dtype="int64") /* ty=Tensor[(11, 10, 8), int64] */;
    %555 = shape_of(%var_5081, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(%var_5081, dtype="int64") /* ty=Tensor[(11, 10, 8), int64] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %558 = bitwise_or(%556, %557) /* ty=Tensor[(11, 10, 8), int64] */;
    %559 = cast(%558, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
    %560 = shape_of(%var_5082, dtype="int32") /* ty=Tensor[(3), int32] */;
    %561 = cast(%var_5082, dtype="float32") /* ty=Tensor[(11, 10, 8), float32] */;
    %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %563 = cast(%var_5082, dtype="bool") /* ty=Tensor[(11, 10, 8), bool] */;
    %564 = shape_of(%var_5081, dtype="int32") /* ty=Tensor[(3), int32] */;
    %565 = cast(%var_5081, dtype="bool") /* ty=Tensor[(11, 10, 8), bool] */;
    %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %567 = add(%561, %562) /* ty=Tensor[(11, 10, 8), float32] */;
    %568 = not_equal(%565, %566) /* ty=Tensor[(11, 10, 8), bool] */;
    (%567, %568)
  };
  %569(%var_5115, %var_5116) /* ty=(Tensor[(11, 10, 8), float32], Tensor[(11, 10, 8), bool]) */
}

def @func_1267() -> (Tensor[(2, 8, 4), uint32],) {
  %572 = fn () -> (Tensor[(2, 8, 4), uint32],) {
    %570 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %571 = %570.0;
    (%571,)
  };
  %572() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_4274() -> Tensor[(2, 8, 4), uint32] {
  @func_4272() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_6926() -> Tensor[(2, 8, 4), uint32] {
  %574 = fn () -> Tensor[(2, 8, 4), uint32] {
    %573 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %573.0
  };
  %574() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_3177() -> (Tensor[(2, 8, 4), uint32],) {
  %575 = @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%575,)
}

def @func_4139() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_4137() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_2406(%var_2405: Tensor[(4, 8, 12), float64]) -> Tensor[(4, 8, 12), float64] {
  %577 = fn (%var_2389: Tensor[(4, 8, 12), float64]) -> Tensor[(4, 8, 12), float64] {
    %576 = cast(%var_2389, dtype="float64") /* ty=Tensor[(4, 8, 12), float64] */;
    sin(%576) /* ty=Tensor[(4, 8, 12), float64] */
  };
  %577(%var_2405) /* ty=Tensor[(4, 8, 12), float64] */
}

def @func_7371() -> Tensor[(2, 8, 4), uint32] {
  %578 = @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %578.0
}

def @func_7545(%var_7544: Tensor[(160), int32]) -> (Tensor[(200), float64], Tensor[(15, 6, 9), float64], Tensor[(2, 8, 4), uint32], Tensor[(810), float64], int8, Tensor[(160), int32]) {
  %593 = fn (%var_7538: Tensor[(160), int32]) -> (Tensor[(200), float64], Tensor[(15, 6, 9), float64], Tensor[(2, 8, 4), uint32], Tensor[(810), float64], int8, Tensor[(160), int32]) {
    %579 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
    %580 = %579.1;
    %581 = cast(%580, dtype="float64") /* ty=Tensor[(200), float64] */;
    %582 = cast(meta[relay.Constant][29] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
    %583 = reshape(%582, newshape=[15, 6, 9]) /* ty=Tensor[(15, 6, 9), float64] */;
    %584 = cast(meta[relay.Constant][29] /* ty=Tensor[(810), float64] */, dtype="float64") /* ty=Tensor[(810), float64] */;
    %585 = cast(%var_7538, dtype="int32") /* ty=Tensor[(160), int32] */;
    %586 = reshape(%585, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %587 = @func_3108(%586) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */;
    %588 = acos(%581) /* ty=Tensor[(200), float64] */;
    %589 = @func_4529(%583) /* ty=Tensor[(15, 6, 9), float64] */;
    %590 = @func_4007() /* ty=Tensor[(2, 8, 4), uint32] */;
    %591 = rsqrt(%584) /* ty=Tensor[(810), float64] */;
    %592 = %587.5;
    (%588, %589, %590, %591, %592, %var_7538)
  };
  %593(%var_7544) /* ty=(Tensor[(200), float64], Tensor[(15, 6, 9), float64], Tensor[(2, 8, 4), uint32], Tensor[(810), float64], int8, Tensor[(160), int32]) */
}

def @func_289(%var_282: int8, %var_283: Tensor[(10, 10, 2), int8]) -> Tensor[(10, 10, 2), bool] {
  %594 = cast(%var_282, dtype="bool") /* ty=bool */;
  %595 = cast(%var_283, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  less(%594, %595) /* ty=Tensor[(10, 10, 2), bool] */
}

def @func_3110(%var_3109: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) {
  %607 = fn (%var_3105: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) {
    %596 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %597 = cast(meta[relay.Constant][30] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %598 = cast(%var_3105, dtype="int32") /* ty=Tensor[(160), int32] */;
    %599 = cast(meta[relay.Constant][31] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %600 = reshape(%597, newshape=[16]) /* ty=Tensor[(16), int32] */;
    %601 = reshape(%598, newshape=[16, 10]) /* ty=Tensor[(16, 10), int32] */;
    %602 = reshape(%599, newshape=[]) /* ty=int8 */;
    %603 = @func_845(%600, %601, %602) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */;
    %604 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
    %605 = %596.0;
    %606 = %603.2;
    (%604, %605, %606, meta[relay.Constant][30] /* ty=Tensor[(16), int32] */, %var_3105, meta[relay.Constant][31] /* ty=int8 */)
  };
  %607(%var_3109) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */
}

def @func_3682() -> (Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), bool], Tensor[(200), int8], int8) {
  @func_3680() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), bool], Tensor[(200), int8], int8) */
}

def @func_6804() -> (Tensor[(2, 8, 4), uint32],) {
  %608 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%608,)
}

def @func_7197(%var_7195: uint16, %var_7196: Tensor[(1, 14), uint16]) -> Tensor[(1, 14), uint16] {
  @func_7193(%var_7195, %var_7196) /* ty=Tensor[(1, 14), uint16] */
}

def @func_3043() -> (Tensor[(2, 8, 4), uint32],) {
  %609 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%609,)
}

def @func_6851() -> Tensor[(2, 8, 4), uint32] {
  %610 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %610.0
}

def @func_4241(%var_4238: float64, %var_4239: Tensor[(2, 1), float64], %var_4240: Tensor[(448), uint16]) -> (Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  @func_4236(%var_4238, %var_4239, %var_4240) /* ty=(Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_5239() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %615 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %611 = @func_3058() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %612 = %611.1;
    %613 = @func_2046() /* ty=Tensor[(2, 8, 4), uint32] */;
    %614 = @func_3204() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%612, %613, %614)
  };
  %615() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_7171(%var_7155: int8) -> (Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], int8) {
  %616 = cast(%var_7155, dtype="int8") /* ty=int8 */;
  %617 = reshape(%616, newshape=[]) /* ty=int8 */;
  %618 = @func_6119(%617) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], int8) */;
  %619 = @func_2651() /* ty=Tensor[(2, 8, 4), float64] */;
  %620 = %618.0;
  (%619, %620, %var_7155)
}

def @func_718() -> Tensor[(2, 8, 4), uint32] {
  %621 = @func_708() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %621.0
}

def @func_1849() -> (Tensor[(2, 8, 4), uint32],) {
  %624 = fn () -> (Tensor[(2, 8, 4), uint32],) {
    %622 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %623 = %622.0;
    (%623,)
  };
  %624() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_2597() -> Tensor[(2, 8, 4), uint32] {
  %625 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %625.0
}

def @func_6392(%var_6391: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), int32],) {
  %633 = fn (%var_6375: Tensor[(2, 8, 4), uint32]) -> (Tensor[(2, 8, 4), int32],) {
    %626 = @func_6361() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %627 = %626.1;
    %628 = cast(%var_6375, dtype="int32") /* ty=Tensor[(2, 8, 4), int32] */;
    %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(%627, dtype="int32") /* ty=Tensor[(2, 8, 4), int32] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %632 = maximum(%630, %631) /* ty=Tensor[(2, 8, 4), int32] */;
    (%632,)
  };
  %633(%var_6391) /* ty=(Tensor[(2, 8, 4), int32],) */
}

def @func_6698() -> Tensor[(200), bool] {
  %635 = fn () -> Tensor[(200), bool] {
    %634 = @func_5630() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
    %634.1
  };
  %635() /* ty=Tensor[(200), bool] */
}

def @func_6806() -> (Tensor[(2, 8, 4), uint32],) {
  @func_6804() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_561(%var_556: Tensor[(8, 2, 1), int32], %var_557: Tensor[(8, 2, 10), int32], %var_558: int8, %var_559: Tensor[(200), int8], %var_560: Tensor[(8, 2, 10), bool]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) {
  @func_554(%var_556, %var_557, %var_558, %var_559, %var_560) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */
}

def @func_3728(%var_3726: Tensor[(8, 2, 9), uint64], %var_3727: Tensor[(8, 2, 9), uint64]) -> (Tensor[(8, 2, 9), uint64], Tensor[(8, 2, 9), float32]) {
  @func_3724(%var_3726, %var_3727) /* ty=(Tensor[(8, 2, 9), uint64], Tensor[(8, 2, 9), float32]) */
}

def @func_2768() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %639 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %636 = @func_1758() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %637 = %636.0;
    %638 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%637, %638)
  };
  %639() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_4236(%var_4215: float64, %var_4216: Tensor[(2, 1), float64], %var_4224: Tensor[(448), uint16]) -> (Tensor[(2, 1), float64], Tensor[(14, 2, 16), uint16], Tensor[(448), uint16], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %640 = cast(%var_4215, dtype="float64") /* ty=float64 */;
  %641 = cast(%var_4216, dtype="float64") /* ty=Tensor[(2, 1), float64] */;
  %642 = cast(%var_4224, dtype="uint16") /* ty=Tensor[(448), uint16] */;
  %643 = reshape(%642, newshape=[14, 2, 16]) /* ty=Tensor[(14, 2, 16), uint16] */;
  %644 = @func_1421(%643) /* ty=(Tensor[(14, 2, 16), uint16],) */;
  %645 = @func_3680() /* ty=(Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), bool], Tensor[(200), int8], int8) */;
  %646 = floor_mod(%640, %641) /* ty=Tensor[(2, 1), float64] */;
  %647 = %644.0;
  %648 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %649 = %645.2;
  (%646, %647, %var_4224, %648, %649)
}

def @func_4008() -> Tensor[(2, 8, 4), uint32] {
  %650 = fn () -> Tensor[(2, 8, 4), uint32] {
    @func_718() /* ty=Tensor[(2, 8, 4), uint32] */
  };
  %650() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2384() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], int8) {
  %651 = cast(meta[relay.Constant][32] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %652 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
  %653 = cast(%652, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %654 = reshape(%651, newshape=[]) /* ty=int8 */;
  %655 = reshape(%653, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float32] */;
  %656 = @func_1224(%654, %655) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %657 = %656.1;
  (%652, %657, meta[relay.Constant][32] /* ty=int8 */)
}

def @func_4685() -> (Tensor[(2, 8, 4), float32],) {
  %661 = fn () -> (Tensor[(2, 8, 4), float32],) {
    %658 = @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */;
    %659 = cast(%658, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
    %660 = acosh(%659) /* ty=Tensor[(2, 8, 4), float32] */;
    (%660,)
  };
  %661() /* ty=(Tensor[(2, 8, 4), float32],) */
}

def @func_4808(%var_4805: Tensor[(16), int32], %var_4806: int8, %var_4807: Tensor[(448), uint16]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(200), float64], Tensor[(16), int32], int8, Tensor[(448), uint16], Tensor[(200), int8]) {
  @func_4803(%var_4805, %var_4806, %var_4807) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(200), float64], Tensor[(16), int32], int8, Tensor[(448), uint16], Tensor[(200), int8]) */
}

def @func_5387() -> (Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(36, 10), float64]) {
  @func_5385() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(6, 6, 10), float64], Tensor[(36, 10), float64]) */
}

def @func_1744(%var_1743: Tensor[(1, 16), int32]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) {
  %694 = fn (%var_1731: Tensor[(1, 16), int32]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) {
    %662 = cast(meta[relay.Constant][33] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %663 = cast(meta[relay.Constant][34] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %664 = reshape(%662, newshape=[]) /* ty=int8 */;
    %665 = reshape(%663, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
    %666 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %667 = %666.0;
    %668 = cast(%667, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
    %669 = exp(%668) /* ty=Tensor[(2, 8, 4), float64] */;
    %670 = cast(%669, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
    %671 = cast(%669, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
    %672 = cast(%669, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
    %673 = sinh(%672) /* ty=Tensor[(2, 8, 4), float64] */;
    %674 = cast(%669, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %675 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
    %676 = cast(%673, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %678 = cast(%var_1731, dtype="int32") /* ty=Tensor[(1, 16), int32] */;
    %679 = cast(meta[relay.Constant][35] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
    %680 = cast(meta[relay.Constant][33] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %681 = cast(meta[relay.Constant][34] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %682 = reshape(%678, newshape=[16]) /* ty=Tensor[(16), int32] */;
    %683 = reshape(%679, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %684 = reshape(%680, newshape=[]) /* ty=int8 */;
    %685 = reshape(%681, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %686 = @func_778(%682, %683, %684, %685) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */;
    %687 = cast(%673, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
    %688 = @func_289(%664, %665) /* ty=Tensor[(10, 10, 2), bool] */;
    %689 = tan(%670) /* ty=Tensor[(2, 8, 4), float32] */;
    %690 = asinh(%671) /* ty=Tensor[(2, 8, 4), float32] */;
    %691 = less(%676, %677) /* ty=Tensor[(2, 8, 4), bool] */;
    %692 = %686.1;
    %693 = cos(%687) /* ty=Tensor[(2, 8, 4), float64] */;
    (%688, meta[relay.Constant][33] /* ty=int8 */, meta[relay.Constant][34] /* ty=Tensor[(200), int8] */, %689, %690, %691, %692, %var_1731, meta[relay.Constant][35] /* ty=Tensor[(160), int32] */, %693)
  };
  %694(%var_1743) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) */
}

def @func_6119(%var_6108: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], int8) {
  %695 = cast(%var_6108, dtype="int8") /* ty=int8 */;
  %696 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %697 = cast(%696, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %698 = reshape(%695, newshape=[]) /* ty=int8 */;
  %699 = reshape(%697, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), float32] */;
  %700 = @func_1224(%698, %699) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
  %701 = %700.6;
  (%696, %701, %var_6108)
}

def @func_3581() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %702 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
  %703 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %704 = %702.0;
  (%703, %704)
}

def @func_6911() -> (Tensor[(2, 8, 4), uint32],) {
  %706 = fn () -> (Tensor[(2, 8, 4), uint32],) {
    %705 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%705,)
  };
  %706() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_1927(%var_1924: Tensor[(16), int32], %var_1925: int8, %var_1926: Tensor[(200), int8]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) {
  %718 = fn (%var_1914: Tensor[(16), int32], %var_1916: int8, %var_1917: Tensor[(200), int8]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) {
    %707 = cast(%var_1914, dtype="int32") /* ty=Tensor[(16), int32] */;
    %708 = cast(meta[relay.Constant][36] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
    %709 = cast(%var_1916, dtype="int8") /* ty=int8 */;
    %710 = cast(%var_1917, dtype="int8") /* ty=Tensor[(200), int8] */;
    %711 = reshape(%707, newshape=[16]) /* ty=Tensor[(16), int32] */;
    %712 = reshape(%708, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %713 = reshape(%709, newshape=[]) /* ty=int8 */;
    %714 = reshape(%710, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %715 = @func_778(%711, %712, %713, %714) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */;
    %716 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
    %717 = %715.1;
    (%716, %717, %var_1914, meta[relay.Constant][36] /* ty=Tensor[(160), int32] */, %var_1916, %var_1917)
  };
  %718(%var_1924, %var_1925, %var_1926) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8]) */
}

def @func_1995(%var_1993: Tensor[(6, 8, 14), float32], %var_1994: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(16), int32], Tensor[(2, 8, 4), uint32], Tensor[(6, 8, 14), float64], Tensor[(6, 8, 14), float64]) {
  @func_1991(%var_1993, %var_1994) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(16), int32], Tensor[(2, 8, 4), uint32], Tensor[(6, 8, 14), float64], Tensor[(6, 8, 14), float64]) */
}

def @func_2673() -> (Tensor[(2, 8, 4), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(2, 8, 4), uint32]) {
  @func_2671() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(2, 8, 4), uint32]) */
}

def @func_7837(%var_7835: Tensor[(2), float64], %var_7836: Tensor[(448), uint16]) -> (Tensor[(200), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2), float64], Tensor[(448), uint16], Tensor[(5, 1, 6), bool], int8) {
  @func_7833(%var_7835, %var_7836) /* ty=(Tensor[(200), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2), float64], Tensor[(448), uint16], Tensor[(5, 1, 6), bool], int8) */
}

def @func_4830() -> (Tensor[(2, 8, 4), uint32],) {
  @func_4828() /* ty=(Tensor[(2, 8, 4), uint32],) */
}

def @func_7373() -> Tensor[(2, 8, 4), uint32] {
  @func_7371() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4272() -> Tensor[(2, 8, 4), uint32] {
  %719 = @func_3177() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %719.0
}

def @func_6010(%var_6005: Tensor[(9, 7, 6), float32]) -> (Tensor[(9, 7, 6), float32],) {
  %720 = cast(%var_6005, dtype="float32") /* ty=Tensor[(9, 7, 6), float32] */;
  %721 = log2(%720) /* ty=Tensor[(9, 7, 6), float32] */;
  (%721,)
}

def @func_3506(%var_3505: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32]) {
  %727 = fn (%var_3487: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32]) {
    %722 = cast(%var_3487, dtype="int32") /* ty=Tensor[(160), int32] */;
    %723 = reshape(%722, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %724 = @func_3108(%723) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */;
    %725 = @func_2597() /* ty=Tensor[(2, 8, 4), uint32] */;
    %726 = %724.2;
    (%725, %726, %var_3487)
  };
  %727(%var_3505) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32]) */
}

def @func_784(%var_780: Tensor[(16), int32], %var_781: Tensor[(160), int32], %var_782: int8, %var_783: Tensor[(200), int8]) -> (Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) {
  @func_778(%var_780, %var_781, %var_782, %var_783) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), int8], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(160), int32]) */
}

def @func_6166() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) {
  %737 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) {
    %728 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
    %729 = cast(%728, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
    %730 = reshape(%729, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
    %731 = @func_5821(%730) /* ty=(Tensor[(2, 8, 4), float64], Tensor[(200), int8], Tensor[(2, 8, 4), bool], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %732 = cast(meta[relay.Constant][37] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %733 = reshape(%732, newshape=[1, 16]) /* ty=Tensor[(1, 16), int32] */;
    %734 = @func_1742(%733) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), bool], Tensor[(200), int8], Tensor[(1, 16), int32], Tensor[(160), int32], Tensor[(2, 8, 4), float64]) */;
    %735 = %731.2;
    %736 = %734.1;
    (%728, %735, %736, meta[relay.Constant][37] /* ty=Tensor[(16), int32] */)
  };
  %737() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), bool], int8, Tensor[(16), int32]) */
}

def @func_5425(%var_5423: Tensor[(8, 3, 2), uint32], %var_5424: Tensor[(8, 3, 2), uint32]) -> Tensor[(8, 3, 2), bool] {
  %747 = fn (%var_5401: Tensor[(8, 3, 2), uint32], %var_5407: Tensor[(8, 3, 2), uint32]) -> Tensor[(8, 3, 2), bool] {
    %738 = cast(%var_5401, dtype="uint32") /* ty=Tensor[(8, 3, 2), uint32] */;
    %739 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(8, 3, 2), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %740 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 3, 2), uint32] */, dtype="uint32") /* ty=Tensor[(8, 3, 2), uint32] */;
    %741 = dyn.reshape(%738, %739, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %742 = bitwise_or(%740, %741) /* ty=Tensor[(8, 3, 2), uint32] */;
    %743 = cast(%var_5407, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
    %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%742, dtype="bool") /* ty=Tensor[(8, 3, 2), bool] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less_equal(%745, %746) /* ty=Tensor[(8, 3, 2), bool] */
  };
  %747(%var_5423, %var_5424) /* ty=Tensor[(8, 3, 2), bool] */
}

def @func_6439() -> Tensor[(2, 8, 4), float64] {
  @func_6437() /* ty=Tensor[(2, 8, 4), float64] */
}

def @func_7069(%var_7067: Tensor[(9, 90), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(15, 6, 9), float64], Tensor[(9, 90), float64], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 9), float32], Tensor[(144), uint64], Tensor[(2, 8, 4), uint32]) {
  @func_7066(%var_7067) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(15, 6, 9), float64], Tensor[(9, 90), float64], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 9), float32], Tensor[(144), uint64], Tensor[(2, 8, 4), uint32]) */
}

def @func_6496(%var_6494: Tensor[(16), int32], %var_6495: Tensor[(160, 1), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float64], Tensor[(16), int32], Tensor[(160, 384), uint32], Tensor[(160, 1), float64], Tensor[(2, 8, 4), int32], Tensor[(100, 2), int8]) {
  %772 = fn (%var_6464: Tensor[(16), int32], %var_6465: Tensor[(160, 1), int32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float64], Tensor[(16), int32], Tensor[(160, 384), uint32], Tensor[(160, 1), float64], Tensor[(2, 8, 4), int32], Tensor[(100, 2), int8]) {
    %748 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
    %749 = reshape(%748, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float64] */;
    %750 = cast(meta[relay.Constant][39] /* ty=Tensor[(384), float64] */, dtype="uint32") /* ty=Tensor[(384), uint32] */;
    %751 = cast(%var_6465, dtype="uint32") /* ty=Tensor[(160, 1), uint32] */;
    %752 = cast(%var_6465, dtype="float64") /* ty=Tensor[(160, 1), float64] */;
    %753 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
    %754 = cast(%753, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
    %755 = reshape(%754, newshape=[2, 8, 4]) /* ty=Tensor[(2, 8, 4), uint32] */;
    %756 = @func_6390(%755) /* ty=(Tensor[(2, 8, 4), int32],) */;
    %757 = cast(%var_6464, dtype="int32") /* ty=Tensor[(16), int32] */;
    %758 = cast(%var_6465, dtype="int32") /* ty=Tensor[(160, 1), int32] */;
    %759 = cast(meta[relay.Constant][40] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %760 = reshape(%757, newshape=[16]) /* ty=Tensor[(16), int32] */;
    %761 = reshape(%758, newshape=[16, 10]) /* ty=Tensor[(16, 10), int32] */;
    %762 = reshape(%759, newshape=[]) /* ty=int8 */;
    %763 = @func_845(%760, %761, %762) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */;
    %764 = %763.5;
    %765 = cast(%764, dtype="int8") /* ty=Tensor[(100, 2), int8] */;
    %766 = cast(meta[relay.Constant][40] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %767 = @func_2404(%749) /* ty=Tensor[(4, 8, 12), float64] */;
    %768 = bitwise_and(%750, %751) /* ty=Tensor[(160, 384), uint32] */;
    %769 = sin(%752) /* ty=Tensor[(160, 1), float64] */;
    %770 = %756.0;
    %771 = bitwise_and(%765, %766) /* ty=Tensor[(100, 2), int8] */;
    (%753, %767, %var_6464, %768, %769, %770, %771)
  };
  %772(%var_6494, %var_6495) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float64], Tensor[(16), int32], Tensor[(160, 384), uint32], Tensor[(160, 1), float64], Tensor[(2, 8, 4), int32], Tensor[(100, 2), int8]) */
}

def @func_2707(%var_2705: Tensor[(10, 9, 11), uint32], %var_2706: Tensor[(10, 9, 11), uint32]) -> (Tensor[(10, 9, 11), float32],) {
  %780 = fn (%var_2695: Tensor[(10, 9, 11), uint32], %var_2696: Tensor[(10, 9, 11), uint32]) -> (Tensor[(10, 9, 11), float32],) {
    %773 = cast(%var_2696, dtype="uint32") /* ty=Tensor[(10, 9, 11), uint32] */;
    %774 = shape_of(%var_2695, dtype="int32") /* ty=Tensor[(3), int32] */;
    %775 = cast(%var_2695, dtype="uint32") /* ty=Tensor[(10, 9, 11), uint32] */;
    %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %777 = bitwise_or(%775, %776) /* ty=Tensor[(10, 9, 11), uint32] */;
    %778 = cast(%777, dtype="float32") /* ty=Tensor[(10, 9, 11), float32] */;
    %779 = rsqrt(%778) /* ty=Tensor[(10, 9, 11), float32] */;
    (%779,)
  };
  %780(%var_2705, %var_2706) /* ty=(Tensor[(10, 9, 11), float32],) */
}

def @func_4501(%var_4498: Tensor[(2, 8, 4), float64], %var_4499: int8, %var_4500: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint8], Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(2, 8, 4), uint16], Tensor[(16), int32], Tensor[(160), int32], Tensor[(1, 384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), uint64], Tensor[(160), int32]) {
  %814 = fn (%var_4393: Tensor[(2, 8, 4), float64], %var_4410: int8, %var_4436: Tensor[(160), int32]) -> (Tensor[(2, 8, 4), uint8], Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(2, 8, 4), uint16], Tensor[(16), int32], Tensor[(160), int32], Tensor[(1, 384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), uint64], Tensor[(160), int32]) {
    %781 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
    %782 = %781.0;
    %783 = cast(%var_4393, dtype="uint8") /* ty=Tensor[(2, 8, 4), uint8] */;
    %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %785 = cast(%782, dtype="uint8") /* ty=Tensor[(2, 8, 4), uint8] */;
    %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %787 = cast(%var_4410, dtype="int8") /* ty=int8 */;
    %788 = cast(meta[relay.Constant][41] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %789 = reshape(%787, newshape=[]) /* ty=int8 */;
    %790 = reshape(%788, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
    %791 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 8, 4), float64] */, dtype="uint16") /* ty=Tensor[(2, 8, 4), uint16] */;
    %792 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
    %793 = cast(%782, dtype="uint16") /* ty=Tensor[(2, 8, 4), uint16] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %795 = cast(%var_4436, dtype="int32") /* ty=Tensor[(160), int32] */;
    %796 = reshape(%795, newshape=[160]) /* ty=Tensor[(160), int32] */;
    %797 = @func_3108(%796) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(16), int32], Tensor[(160), int32], int8) */;
    %798 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
    %799 = cast(meta[relay.Constant][43] /* ty=Tensor[(1, 384), float64] */, dtype="float64") /* ty=Tensor[(1, 384), float64] */;
    %800 = reshape(%799, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float64] */;
    %801 = @func_2404(%800) /* ty=Tensor[(4, 8, 12), float64] */;
    %802 = cast(%801, dtype="uint64") /* ty=Tensor[(4, 8, 12), uint64] */;
    %803 = cast(%var_4410, dtype="uint64") /* ty=uint64 */;
    %804 = cast(meta[relay.Constant][41] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
    %805 = reshape(%804, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %806 = @func_647(%805) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */;
    %807 = bitwise_or(%785, %786) /* ty=Tensor[(2, 8, 4), uint8] */;
    %808 = @func_289(%789, %790) /* ty=Tensor[(10, 10, 2), bool] */;
    %809 = left_shift(%793, %794) /* ty=Tensor[(2, 8, 4), uint16] */;
    %810 = %797.2;
    %811 = %798.0;
    %812 = minimum(%802, %803) /* ty=Tensor[(4, 8, 12), uint64] */;
    %813 = %806.3;
    (%807, %808, meta[relay.Constant][41] /* ty=Tensor[(200), int8] */, %809, %810, %var_4436, meta[relay.Constant][43] /* ty=Tensor[(1, 384), float64] */, %811, %812, %813)
  };
  %814(%var_4498, %var_4499, %var_4500) /* ty=(Tensor[(2, 8, 4), uint8], Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(2, 8, 4), uint16], Tensor[(16), int32], Tensor[(160), int32], Tensor[(1, 384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), uint64], Tensor[(160), int32]) */
}

def @func_1134(%var_1132: Tensor[(200), int8], %var_1133: int8) -> (Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(8, 2, 10), bool], Tensor[(16), int32], Tensor[(160, 1), int32], Tensor[(2, 8, 4), bool]) {
  %835 = fn (%var_1114: Tensor[(200), int8], %var_1123: int8) -> (Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(8, 2, 10), bool], Tensor[(16), int32], Tensor[(160, 1), int32], Tensor[(2, 8, 4), bool]) {
    %815 = cast(%var_1114, dtype="int8") /* ty=Tensor[(200), int8] */;
    %816 = reshape(%815, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %817 = @func_647(%816) /* ty=(Tensor[(13, 16, 7), float64], Tensor[(10, 10, 2), bool], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(200), int8], Tensor[(10, 10, 2), bool], Tensor[(8, 2, 10), float64]) */;
    %818 = cast(meta[relay.Constant][44] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
    %819 = cast(meta[relay.Constant][45] /* ty=Tensor[(160, 1), int32] */, dtype="int32") /* ty=Tensor[(160, 1), int32] */;
    %820 = cast(%var_1123, dtype="int8") /* ty=int8 */;
    %821 = cast(%var_1114, dtype="int8") /* ty=Tensor[(200), int8] */;
    %822 = cast(meta[relay.Constant][45] /* ty=Tensor[(160, 1), int32] */, dtype="bool") /* ty=Tensor[(160, 1), bool] */;
    %823 = reshape(%818, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
    %824 = reshape(%819, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
    %825 = reshape(%820, newshape=[]) /* ty=int8 */;
    %826 = reshape(%821, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %827 = reshape(%822, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
    %828 = @func_554(%823, %824, %825, %826, %827) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
    %829 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
    %830 = cast(%var_1123, dtype="bool") /* ty=bool */;
    %831 = cast(%829, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
    %832 = %817.6;
    %833 = %828.5;
    %834 = logical_or(%830, %831) /* ty=Tensor[(2, 8, 4), bool] */;
    (%832, %var_1114, %833, meta[relay.Constant][44] /* ty=Tensor[(16), int32] */, meta[relay.Constant][45] /* ty=Tensor[(160, 1), int32] */, %834)
  };
  %835(%var_1132, %var_1133) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(8, 2, 10), bool], Tensor[(16), int32], Tensor[(160, 1), int32], Tensor[(2, 8, 4), bool]) */
}

def @func_1224(%var_1171: int8, %var_1174: Tensor[(2, 8, 4), float32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(16), int32], Tensor[(160), int32], int8, Tensor[(2, 8, 4), int8], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) {
  %836 = cast(meta[relay.Constant][46] /* ty=Tensor[(16), int32] */, dtype="int32") /* ty=Tensor[(16), int32] */;
  %837 = cast(meta[relay.Constant][47] /* ty=Tensor[(160), int32] */, dtype="int32") /* ty=Tensor[(160), int32] */;
  %838 = cast(%var_1171, dtype="int8") /* ty=int8 */;
  %839 = reshape(%836, newshape=[16]) /* ty=Tensor[(16), int32] */;
  %840 = reshape(%837, newshape=[16, 10]) /* ty=Tensor[(16, 10), int32] */;
  %841 = reshape(%838, newshape=[]) /* ty=int8 */;
  %842 = @func_845(%839, %840, %841) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */;
  %843 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(2, 8, 4), float32] */;
  %845 = erf(%844) /* ty=Tensor[(2, 8, 4), float32] */;
  %846 = cast(%var_1174, dtype="int8") /* ty=Tensor[(2, 8, 4), int8] */;
  %847 = shape_of(%845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%845, dtype="int8") /* ty=Tensor[(2, 8, 4), int8] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %850 = cast(%845, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %851 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
  %852 = %842.0;
  %853 = bitwise_and(%848, %849) /* ty=Tensor[(2, 8, 4), int8] */;
  %854 = acos(%850) /* ty=Tensor[(2, 8, 4), float64] */;
  %855 = @func_749() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%851, %852, meta[relay.Constant][46] /* ty=Tensor[(16), int32] */, meta[relay.Constant][47] /* ty=Tensor[(160), int32] */, %var_1171, %853, %854, %855)
}

def @func_3058() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %856 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %857 = @func_2479() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %858 = %856.1;
  %859 = %857.1;
  (%858, %859)
}

def @func_5350() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %869 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %860 = @func_957() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %861 = @func_2479() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %862 = @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %863 = @func_1055() /* ty=Tensor[(2, 8, 4), uint32] */;
    %864 = %860.0;
    %865 = %861.0;
    %866 = @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */;
    %867 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
    %868 = %862.0;
    (%863, %864, %865, %866, %867, %868)
  };
  %869() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_6794() -> Tensor[(2, 8, 4), uint32] {
  %871 = fn () -> Tensor[(2, 8, 4), uint32] {
    %870 = @func_6068() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %870.1
  };
  %871() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2360() -> Tensor[(2, 8, 4), uint32] {
  %872 = fn () -> Tensor[(2, 8, 4), uint32] {
    @func_2046() /* ty=Tensor[(2, 8, 4), uint32] */
  };
  %872() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_849(%var_846: Tensor[(16), int32], %var_847: Tensor[(16, 10), int32], %var_848: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) {
  %886 = fn (%var_840: Tensor[(16), int32], %var_841: Tensor[(16, 10), int32], %var_842: int8) -> (Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) {
    %873 = cast(%var_840, dtype="int32") /* ty=Tensor[(16), int32] */;
    %874 = cast(%var_841, dtype="int32") /* ty=Tensor[(16, 10), int32] */;
    %875 = cast(%var_842, dtype="int8") /* ty=int8 */;
    %876 = cast(meta[relay.Constant][48] /* ty=Tensor[(100, 2), int8] */, dtype="int8") /* ty=Tensor[(100, 2), int8] */;
    %877 = cast(%var_841, dtype="bool") /* ty=Tensor[(16, 10), bool] */;
    %878 = reshape(%873, newshape=[8, 2, 1]) /* ty=Tensor[(8, 2, 1), int32] */;
    %879 = reshape(%874, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), int32] */;
    %880 = reshape(%875, newshape=[]) /* ty=int8 */;
    %881 = reshape(%876, newshape=[200]) /* ty=Tensor[(200), int8] */;
    %882 = reshape(%877, newshape=[8, 2, 10]) /* ty=Tensor[(8, 2, 10), bool] */;
    %883 = @func_554(%878, %879, %880, %881, %882) /* ty=(Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) */;
    %884 = @func_718() /* ty=Tensor[(2, 8, 4), uint32] */;
    %885 = %883.3;
    (%884, %885, %var_840, %var_841, %var_842, meta[relay.Constant][48] /* ty=Tensor[(100, 2), int8] */)
  };
  %886(%var_846, %var_847, %var_848) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), float64], Tensor[(16), int32], Tensor[(16, 10), int32], int8, Tensor[(100, 2), int8]) */
}

def @func_6437() -> Tensor[(2, 8, 4), float64] {
  %887 = @func_2099() /* ty=(Tensor[(2, 8, 4), float64],) */;
  %887.0
}

def @func_4606(%var_4564: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) {
  %888 = @func_2723() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %889 = cast(%var_4564, dtype="float64") /* ty=Tensor[(384), float64] */;
  %890 = reshape(%889, newshape=[4, 8, 12]) /* ty=Tensor[(4, 8, 12), float64] */;
  %891 = @func_2404(%890) /* ty=Tensor[(4, 8, 12), float64] */;
  %892 = cast(%891, dtype="float32") /* ty=Tensor[(4, 8, 12), float32] */;
  %893 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  %894 = %888.0;
  %895 = cos(%892) /* ty=Tensor[(4, 8, 12), float32] */;
  (%893, %var_4564, %894, %895)
}

def @func_7886(%var_7885: Tensor[(200), float32]) -> (Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64], Tensor[(200), bool]) {
  %910 = fn (%var_7877: Tensor[(200), float32]) -> (Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64], Tensor[(200), bool]) {
    %896 = cast(meta[relay.Constant][49] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %897 = cast(meta[relay.Constant][50] /* ty=Tensor[(45), uint64] */, dtype="uint64") /* ty=Tensor[(45), uint64] */;
    %898 = reshape(%896, newshape=[]) /* ty=uint64 */;
    %899 = reshape(%897, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), uint64] */;
    %900 = @func_3234() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(200), bool]) */;
    %901 = %900.1;
    %902 = cast(%901, dtype="float32") /* ty=Tensor[(200), float32] */;
    %903 = cosh(%902) /* ty=Tensor[(200), float32] */;
    %904 = cast(%var_7877, dtype="bool") /* ty=Tensor[(200), bool] */;
    %905 = shape_of(%903, dtype="int32") /* ty=Tensor[(1), int32] */;
    %906 = cast(%903, dtype="bool") /* ty=Tensor[(200), bool] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?), bool] */;
    %908 = @func_2516(%898, %899) /* ty=Tensor[(5, 3, 3), uint64] */;
    %909 = not_equal(%906, %907) /* ty=Tensor[(200), bool] */;
    (%908, meta[relay.Constant][49] /* ty=uint64 */, meta[relay.Constant][50] /* ty=Tensor[(45), uint64] */, %909)
  };
  %910(%var_7885) /* ty=(Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64], Tensor[(200), bool]) */
}

def @func_2671() -> (Tensor[(2, 8, 4), uint32], Tensor[(8, 8), uint32], Tensor[(360), float64], Tensor[(2, 8, 4), uint32]) {
  %911 = cast(meta[relay.Constant][51] /* ty=Tensor[(360), float64] */, dtype="float64") /* ty=Tensor[(360), float64] */;
  %912 = @func_1857() /* ty=Tensor[(2, 8, 4), uint32] */;
  %913 = cast(%912, dtype="uint32") /* ty=Tensor[(2, 8, 4), uint32] */;
  %914 = reshape(%911, newshape=[6, 6, 10]) /* ty=Tensor[(6, 6, 10), float64] */;
  %915 = reshape(%913, newshape=[8, 8]) /* ty=Tensor[(8, 8), uint32] */;
  %916 = @func_1462(%914, %915) /* ty=(Tensor[(6, 6, 10), float64], Tensor[(2, 8, 4), bool], Tensor[(8, 8), uint32]) */;
  %917 = %916.2;
  %918 = @func_2359() /* ty=Tensor[(2, 8, 4), uint32] */;
  (%912, %917, meta[relay.Constant][51] /* ty=Tensor[(360), float64] */, %918)
}

def @func_2868() -> Tensor[(2, 8, 4), uint32] {
  @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_1421(%var_1411: Tensor[(14, 2, 16), uint16]) -> (Tensor[(14, 2, 16), uint16],) {
  %919 = cast(meta[relay.Constant][52] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %920 = cast(%var_1411, dtype="uint16") /* ty=Tensor[(14, 2, 16), uint16] */;
  %921 = bitwise_or(%919, %920) /* ty=Tensor[(14, 2, 16), uint16] */;
  (%921,)
}

def @func_2973(%var_2971: uint64, %var_2972: Tensor[(45), uint64]) -> (Tensor[(2, 8, 4), bool], Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64]) {
  @func_2969(%var_2971, %var_2972) /* ty=(Tensor[(2, 8, 4), bool], Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64]) */
}

def @func_2969(%var_2958: uint64, %var_2959: Tensor[(45), uint64]) -> (Tensor[(2, 8, 4), bool], Tensor[(5, 3, 3), uint64], uint64, Tensor[(45), uint64]) {
  %922 = @func_2767() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %923 = %922.0;
  %924 = cast(meta[relay.Constant][53] /* ty=Tensor[(2, 8, 4), uint32] */, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %925 = shape_of(%923, dtype="int32") /* ty=Tensor[(3), int32] */;
  %926 = cast(%923, dtype="bool") /* ty=Tensor[(2, 8, 4), bool] */;
  %927 = dyn.reshape(%924, %925, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %928 = cast(%var_2958, dtype="uint64") /* ty=uint64 */;
  %929 = cast(%var_2959, dtype="uint64") /* ty=Tensor[(45), uint64] */;
  %930 = reshape(%928, newshape=[]) /* ty=uint64 */;
  %931 = reshape(%929, newshape=[5, 3, 3]) /* ty=Tensor[(5, 3, 3), uint64] */;
  %932 = less_equal(%926, %927) /* ty=Tensor[(2, 8, 4), bool] */;
  %933 = @func_2516(%930, %931) /* ty=Tensor[(5, 3, 3), uint64] */;
  (%932, %933, %var_2958, %var_2959)
}

def @func_554(%var_491: Tensor[(8, 2, 1), int32], %var_492: Tensor[(8, 2, 10), int32], %var_505: int8, %var_506: Tensor[(200), int8], %var_513: Tensor[(8, 2, 10), bool]) -> (Tensor[(10, 10, 2), bool], int8, Tensor[(200), int8], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), float64], Tensor[(8, 2, 10), bool]) {
  %934 = cast(%var_505, dtype="int8") /* ty=int8 */;
  %935 = cast(%var_506, dtype="int8") /* ty=Tensor[(200), int8] */;
  %936 = reshape(%934, newshape=[]) /* ty=int8 */;
  %937 = reshape(%935, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), int8] */;
  %938 = cast(%var_491, dtype="bool") /* ty=Tensor[(8, 2, 1), bool] */;
  %939 = cast(%var_492, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %940 = not_equal(%938, %939) /* ty=Tensor[(8, 2, 10), bool] */;
  %941 = cast(%940, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %942 = cast(%var_513, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %943 = shape_of(%940, dtype="int32") /* ty=Tensor[(3), int32] */;
  %944 = cast(%940, dtype="float64") /* ty=Tensor[(8, 2, 10), float64] */;
  %945 = dyn.reshape(%942, %943, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %946 = cast(%var_491, dtype="bool") /* ty=Tensor[(8, 2, 1), bool] */;
  %947 = cast(%940, dtype="bool") /* ty=Tensor[(8, 2, 10), bool] */;
  %948 = @func_289(%936, %937) /* ty=Tensor[(10, 10, 2), bool] */;
  %949 = sin(%941) /* ty=Tensor[(8, 2, 10), float64] */;
  %950 = floor_divide(%944, %945) /* ty=Tensor[(8, 2, 10), float64] */;
  %951 = greater(%946, %947) /* ty=Tensor[(8, 2, 10), bool] */;
  (%948, %var_505, %var_506, %949, %950, %951)
}

def @func_4118() -> Tensor[(2, 8, 4), uint32] {
  @func_4116() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_2099() -> (Tensor[(2, 8, 4), float64],) {
  %952 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %953 = %952.0;
  %954 = cast(%953, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %955 = log(%954) /* ty=Tensor[(2, 8, 4), float64] */;
  (%955,)
}

def @func_7174(%var_7172: int8) -> (Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], int8) {
  @func_7171(%var_7172) /* ty=(Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], int8) */
}

def @func_7664(%var_7663: Tensor[(378), float32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), uint32], Tensor[(24, 16), bool]) {
  %990 = fn (%var_7570: Tensor[(378), float32]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), uint32], Tensor[(24, 16), bool]) {
    %956 = @func_5238() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
    %957 = cast(meta[relay.Constant][54] /* ty=Tensor[(24, 16), float64] */, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
    %958 = reshape(%957, newshape=[384]) /* ty=Tensor[(384), float64] */;
    %959 = @func_7327(%958) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64], Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32]) */;
    %960 = cast(%var_7570, dtype="float32") /* ty=Tensor[(378), float32] */;
    %961 = reshape(%960, newshape=[9, 7, 6]) /* ty=Tensor[(9, 7, 6), float32] */;
    %962 = @func_6010(%961) /* ty=(Tensor[(9, 7, 6), float32],) */;
    %963 = @func_1266() /* ty=(Tensor[(2, 8, 4), uint32],) */;
    %964 = @func_4684() /* ty=(Tensor[(2, 8, 4), float32],) */;
    %965 = cast(meta[relay.Constant][54] /* ty=Tensor[(24, 16), float64] */, dtype="float64") /* ty=Tensor[(24, 16), float64] */;
    %966 = cosh(%965) /* ty=Tensor[(24, 16), float64] */;
    %967 = cast(meta[relay.Constant][55] /* ty=Tensor[(24, 16), float64] */, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
    %968 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(24, 16), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %969 = cast(meta[relay.Constant][54] /* ty=Tensor[(24, 16), float64] */, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
    %970 = dyn.reshape(%967, %968, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %971 = greater_equal(%969, %970) /* ty=Tensor[(24, 16), bool] */;
    %972 = cast(%971, dtype="float32") /* ty=Tensor[(24, 16), float32] */;
    %973 = erf(%972) /* ty=Tensor[(24, 16), float32] */;
    %974 = cast(%973, dtype="uint32") /* ty=Tensor[(24, 16), uint32] */;
    %975 = shape_of(%966, dtype="int32") /* ty=Tensor[(2), int32] */;
    %976 = cast(%966, dtype="uint32") /* ty=Tensor[(24, 16), uint32] */;
    %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %978 = right_shift(%976, %977) /* ty=Tensor[(24, 16), uint32] */;
    %979 = cast(%978, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
    %980 = shape_of(%966, dtype="int32") /* ty=Tensor[(2), int32] */;
    %981 = cast(%966, dtype="bool") /* ty=Tensor[(24, 16), bool] */;
    %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %983 = %956.1;
    %984 = %959.3;
    %985 = %962.0;
    %986 = %963.0;
    %987 = %964.0;
    %988 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
    %989 = not_equal(%981, %982) /* ty=Tensor[(24, 16), bool] */;
    (%983, %984, %985, %var_7570, %986, %987, %988, %989)
  };
  %990(%var_7663) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float64], Tensor[(9, 7, 6), float32], Tensor[(378), float32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), float32], Tensor[(2, 8, 4), uint32], Tensor[(24, 16), bool]) */
}

def @func_2520(%var_2518: uint64, %var_2519: Tensor[(5, 3, 3), uint64]) -> Tensor[(5, 3, 3), uint64] {
  @func_2516(%var_2518, %var_2519) /* ty=Tensor[(5, 3, 3), uint64] */
}

def @func_4951(%var_4949: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64]) {
  @func_4948(%var_4949) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(384), float64]) */
}

def @func_751() -> Tensor[(2, 8, 4), uint32] {
  @func_749() /* ty=Tensor[(2, 8, 4), uint32] */
}

def @func_4609(%var_4607: Tensor[(384), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) {
  @func_4606(%var_4607) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(384), float64], Tensor[(2, 8, 4), uint32], Tensor[(4, 8, 12), float32]) */
}

def @func_7218() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %994 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %991 = @func_4007() /* ty=Tensor[(2, 8, 4), uint32] */;
    %992 = @func_6851() /* ty=Tensor[(2, 8, 4), uint32] */;
    %993 = @func_2046() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%991, %992, %993)
  };
  %994() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

def @func_2132() -> Tensor[(2, 8, 4), uint32] {
  %995 = @func_1848() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %995.0
}

def @func_3362(%var_3360: Tensor[(2, 6, 11), float64]) -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), uint64], Tensor[(2, 6, 11), int16]) {
  @func_3359(%var_3360) /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 6, 11), float32], Tensor[(2, 6, 11), uint64], Tensor[(2, 6, 11), int16]) */
}

def @func_3680() -> (Tensor[(2, 8, 4), float64], Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32], Tensor[(8, 2, 10), bool], Tensor[(200), int8], int8) {
  %996 = @func_1386() /* ty=Tensor[(2, 8, 4), uint32] */;
  %997 = cast(%996, dtype="float64") /* ty=Tensor[(2, 8, 4), float64] */;
  %998 = @func_3581() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */;
  %999 = @func_3452() /* ty=(Tensor[(2, 8, 4), uint32],) */;
  %1000 = cast(meta[relay.Constant][56] /* ty=Tensor[(200), int8] */, dtype="int8") /* ty=Tensor[(200), int8] */;
  %1001 = cast(meta[relay.Constant][57] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %1002 = reshape(%1000, newshape=[200]) /* ty=Tensor[(200), int8] */;
  %1003 = reshape(%1001, newshape=[]) /* ty=int8 */;
  %1004 = @func_1131(%1002, %1003) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(200), int8], Tensor[(8, 2, 10), bool], Tensor[(16), int32], Tensor[(160, 1), int32], Tensor[(2, 8, 4), bool]) */;
  %1005 = log10(%997) /* ty=Tensor[(2, 8, 4), float64] */;
  %1006 = %998.1;
  %1007 = %999.0;
  %1008 = %1004.2;
  (%1005, %1006, %1007, %1008, meta[relay.Constant][56] /* ty=Tensor[(200), int8] */, meta[relay.Constant][57] /* ty=int8 */)
}

def @func_6362() -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
  %1011 = fn () -> (Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) {
    %1009 = @func_4722() /* ty=Tensor[(2, 8, 4), uint32] */;
    %1010 = @func_2866() /* ty=Tensor[(2, 8, 4), uint32] */;
    (%1009, %1010)
  };
  %1011() /* ty=(Tensor[(2, 8, 4), uint32], Tensor[(2, 8, 4), uint32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen28/build/output.py:2788: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen28/build/output.py", line 2793, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(1024) tvmgen_default_fused_left_shift_kernel0(uint* __restrict__ T_left_shift, uint* __restrict__ placeholder, uint* __restrict__ placeholder1) {
  if (((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)) < 1456) {
    T_left_shift[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] = (placeholder[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))] << placeholder1[(((((int)blockIdx.x) * 1024) + ((int)threadIdx.x)))]);
  }
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

