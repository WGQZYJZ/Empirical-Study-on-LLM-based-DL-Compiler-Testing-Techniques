==========mod==========
#[version = "0.0.5"]
def @func_1228(%var_1213: Tensor[(1, 15, 16), float32]) -> Tensor[(?, 15, 16), uint8] {
  %0 = cast(%var_1213, dtype="float32") /* ty=Tensor[(1, 15, 16), float32] */;
  %1 = atan(%0) /* ty=Tensor[(1, 15, 16), float32] */;
  %2 = cast(%var_1213, dtype="uint8") /* ty=Tensor[(1, 15, 16), uint8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="uint8") /* ty=Tensor[(1, 15, 16), uint8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%4, %5) /* ty=Tensor[(?, 15, 16), uint8] */
}

def @func_15862(%var_15857: Tensor[(6, 14, 6), int16]) -> Tensor[(6, 14, 6), bool] {
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(6, 14, 6), int16] */, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %7 = shape_of(%var_15857, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_15857, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%8, %9) /* ty=Tensor[(6, 14, 6), bool] */
}

def @func_4948(%var_4918: Tensor[(3, 7, 14), float64], %var_4927: Tensor[(3, 7, 14), float64], %var_4941: Tensor[(936), int8]) -> (Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %10 = cast(%var_4918, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %11 = atan(%10) /* ty=Tensor[(3, 7, 14), float64] */;
  %12 = cast(%var_4927, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %16 = cast(%var_4941, dtype="int8") /* ty=Tensor[(936), int8] */;
  %17 = cast(%var_4941, dtype="int8") /* ty=Tensor[(936), int8] */;
  %18 = reshape(%16, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %19 = reshape(%17, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %20 = divide(%14, %15) /* ty=Tensor[(3, 7, 14), float64] */;
  %21 = @func_394(%18, %19) /* ty=Tensor[(13, 9, 8), int8] */;
  (%20, %21, %var_4941)
}

def @func_13585(%var_13486: Tensor[(14, 15, 3), uint16], %var_13487: Tensor[(14, 15, 3), uint16], %var_13493: Tensor[(1680, 1), float32], %var_13544: Tensor[(1024), float64], %var_13580: Tensor[(96), uint64]) -> (Tensor[(14, 15, 3), uint16], Tensor[(13, 9, 8), int8], Tensor[(1680, 1024), bool], Tensor[(1680, 1024), float64], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64], Tensor[(420), uint64], Tensor[(96), uint64], Tensor[(294), float64]) {
  %22 = cast(%var_13487, dtype="uint16") /* ty=Tensor[(14, 15, 3), uint16] */;
  %23 = shape_of(%var_13486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%var_13486, dtype="uint16") /* ty=Tensor[(14, 15, 3), uint16] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %27 = cast(%var_13493, dtype="float32") /* ty=Tensor[(1680, 1), float32] */;
  %28 = reshape(%26, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
  %29 = reshape(%27, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %30 = @func_6222(%28, %29) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %31 = cast(meta[relay.Constant][1] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %32 = cosh(%31) /* ty=Tensor[(1024), float64] */;
  %33 = cast(%32, dtype="int32") /* ty=Tensor[(1024), int32] */;
  %34 = cast(%var_13493, dtype="int32") /* ty=Tensor[(1680, 1), int32] */;
  %35 = multiply(%33, %34) /* ty=Tensor[(1680, 1024), int32] */;
  %36 = cast(%32, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %37 = cast(%35, dtype="bool") /* ty=Tensor[(1680, 1024), bool] */;
  %38 = cast(%var_13544, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %39 = shape_of(%32, dtype="int32") /* ty=Tensor[(1), int32] */;
  %40 = cast(%32, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?), bool] */;
  %42 = equal(%40, %41) /* ty=Tensor[(1024), bool] */;
  %43 = cast(%35, dtype="uint64") /* ty=Tensor[(1680, 1024), uint64] */;
  %44 = cast(%42, dtype="uint64") /* ty=Tensor[(1024), uint64] */;
  %45 = minimum(%43, %44) /* ty=Tensor[(1680, 1024), uint64] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(1680, 1024), float64] */;
  %47 = shape_of(%35, dtype="int32") /* ty=Tensor[(2), int32] */;
  %48 = cast(%35, dtype="float64") /* ty=Tensor[(1680, 1024), float64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %50 = cast(meta[relay.Constant][2] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %51 = reshape(%50, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %52 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %54 = reshape(%52, newshape=[]) /* ty=uint64 */;
  %55 = reshape(%53, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), uint64] */;
  %56 = @func_7026(%54, %55) /* ty=(Tensor[(14, 15, 2), uint64],) */;
  %57 = cast(%var_13580, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %59 = cast(meta[relay.Constant][4] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %60 = reshape(%57, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint64] */;
  %61 = reshape(%58, newshape=[7, 42]) /* ty=Tensor[(7, 42), float64] */;
  %62 = reshape(%59, newshape=[420]) /* ty=Tensor[(420), uint64] */;
  %63 = @func_8037(%60, %61, %62) /* ty=(Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) */;
  %64 = right_shift(%24, %25) /* ty=Tensor[(14, 15, 3), uint16] */;
  %65 = %30.1;
  %66 = greater(%36, %37) /* ty=Tensor[(1680, 1024), bool] */;
  %67 = mod(%48, %49) /* ty=Tensor[(1680, 1024), float64] */;
  %68 = @func_6641(%51) /* ty=Tensor[(10, 6, 14), float64] */;
  %69 = %56.0;
  %70 = %63.6;
  (%64, %65, %66, %67, %68, meta[relay.Constant][2] /* ty=Tensor[(840), float64] */, %69, meta[relay.Constant][3] /* ty=uint64 */, meta[relay.Constant][4] /* ty=Tensor[(420), uint64] */, %70, %var_13580, meta[relay.Constant][5] /* ty=Tensor[(294), float64] */)
}

def @func_6946(%var_6834: Tensor[(15, 15, 16), float32], %var_6854: int16, %var_6856: Tensor[(5, 3), float32], %var_6914: Tensor[(2, 468), int8], %var_6938: Tensor[(1680), float32]) -> (Tensor[(15, 15, 16), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(5, 3), float32], Tensor[(15, 15, 16), int16], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(13, 9, 8), int8], Tensor[(2, 468), int8], Tensor[(15, 15, 16), float64], Tensor[(936), int8], Tensor[(1680), float32]) {
  %71 = cast(%var_6834, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %72 = sin(%71) /* ty=Tensor[(15, 15, 16), float32] */;
  %73 = cast(%var_6834, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %77 = cast(%var_6854, dtype="int16") /* ty=int16 */;
  %78 = cast(meta[relay.Constant][6] /* ty=Tensor[(72), int16] */, dtype="int16") /* ty=Tensor[(72), int16] */;
  %79 = cast(%var_6856, dtype="float32") /* ty=Tensor[(5, 3), float32] */;
  %80 = reshape(%77, newshape=[]) /* ty=int16 */;
  %81 = reshape(%78, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), int16] */;
  %82 = reshape(%79, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %83 = @func_2003(%80, %81, %82) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */;
  %84 = cast(%var_6834, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %85 = log10(%84) /* ty=Tensor[(15, 15, 16), float64] */;
  %86 = cast(%85, dtype="int16") /* ty=Tensor[(15, 15, 16), int16] */;
  %87 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%72, dtype="int16") /* ty=Tensor[(15, 15, 16), int16] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %90 = cast(meta[relay.Constant][7] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %91 = reshape(%90, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %92 = cast(%var_6914, dtype="int8") /* ty=Tensor[(2, 468), int8] */;
  %93 = cast(%var_6914, dtype="int8") /* ty=Tensor[(2, 468), int8] */;
  %94 = reshape(%92, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %95 = reshape(%93, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %96 = cast(%72, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %97 = cast(%var_6938, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %98 = cast(%var_6914, dtype="int8") /* ty=Tensor[(2, 468), int8] */;
  %99 = reshape(%97, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), float32] */;
  %100 = reshape(%98, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %101 = @func_4860(%99, %100) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %102 = divide(%75, %76) /* ty=Tensor[(15, 15, 16), float32] */;
  %103 = %83.4;
  %104 = bitwise_or(%88, %89) /* ty=Tensor[(15, 15, 16), int16] */;
  %105 = @func_6641(%91) /* ty=Tensor[(10, 6, 14), float64] */;
  %106 = @func_394(%94, %95) /* ty=Tensor[(13, 9, 8), int8] */;
  %107 = log(%96) /* ty=Tensor[(15, 15, 16), float64] */;
  %108 = %101.2;
  (%102, %103, %var_6854, meta[relay.Constant][6] /* ty=Tensor[(72), int16] */, %var_6856, %104, %105, meta[relay.Constant][7] /* ty=Tensor[(840), float64] */, %106, %var_6914, %107, %108, %var_6938)
}

def @func_11307(%var_11295: Tensor[(3, 3, 2), float64], %var_11296: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), float64] {
  %109 = cast(%var_11296, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %110 = shape_of(%var_11295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%var_11295, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%111, %112) /* ty=Tensor[(3, 3, 2), float64] */
}

def @func_15565() -> (Tensor[(18), float64],) {
  %113 = @func_15501() /* ty=Tensor[(18), float64] */;
  (%113,)
}

def @func_13169(%var_13124: Tensor[(6, 2, 9), float32], %var_13125: Tensor[(6, 2, 9), float32], %var_13151: Tensor[(1, 936), int8]) -> (Tensor[(6, 2, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(22, 96), int16], Tensor[(294), float64], Tensor[(1, 936), int8], Tensor[(390), float64]) {
  %114 = cast(%var_13125, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
  %115 = shape_of(%var_13124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%var_13124, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %118 = power(%116, %117) /* ty=Tensor[(6, 2, 9), float32] */;
  %119 = cast(%118, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
  %120 = cast(meta[relay.Constant][8] /* ty=Tensor[(22, 96), int16] */, dtype="int16") /* ty=Tensor[(22, 96), int16] */;
  %121 = cast(meta[relay.Constant][9] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %122 = cast(%var_13151, dtype="int8") /* ty=Tensor[(1, 936), int8] */;
  %123 = cast(meta[relay.Constant][10] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %124 = reshape(%120, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %125 = reshape(%121, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %126 = reshape(%122, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %127 = reshape(%123, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %128 = @func_8545(%124, %125, %126, %127) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */;
  %129 = cos(%119) /* ty=Tensor[(6, 2, 9), float64] */;
  %130 = %128.8;
  (%129, %130, meta[relay.Constant][8] /* ty=Tensor[(22, 96), int16] */, meta[relay.Constant][9] /* ty=Tensor[(294), float64] */, %var_13151, meta[relay.Constant][10] /* ty=Tensor[(390), float64] */)
}

def @func_10508(%var_10496: Tensor[(7, 1), float32]) -> Tensor[(7, ?), float32] {
  %131 = cast(%var_10496, dtype="float32") /* ty=Tensor[(7, 1), float32] */;
  %132 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(7, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %133 = cast(meta[relay.Constant][11] /* ty=Tensor[(7, 1), float32] */, dtype="float32") /* ty=Tensor[(7, 1), float32] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  mod(%133, %134) /* ty=Tensor[(7, ?), float32] */
}

def @func_8545(%var_8439: Tensor[(12, 16, 11), int16], %var_8473: Tensor[(294), float64], %var_8482: Tensor[(936), int8], %var_8518: Tensor[(390), float64]) -> (Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) {
  %135 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 16, 11), int16] */, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
  %136 = shape_of(%var_8439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%var_8439, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %139 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 48), uint64] */, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
  %140 = cast(%var_8473, dtype="float64") /* ty=Tensor[(294), float64] */;
  %141 = cast(meta[relay.Constant][14] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %142 = reshape(%139, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint64] */;
  %143 = reshape(%140, newshape=[7, 42]) /* ty=Tensor[(7, 42), float64] */;
  %144 = reshape(%141, newshape=[420]) /* ty=Tensor[(420), uint64] */;
  %145 = @func_8037(%142, %143, %144) /* ty=(Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) */;
  %146 = cast(meta[relay.Constant][15] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
  %147 = cast(%var_8482, dtype="int8") /* ty=Tensor[(936), int8] */;
  %148 = reshape(%146, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %149 = reshape(%147, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %150 = @func_5717(%148, %149) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %151 = cast(%var_8473, dtype="float64") /* ty=Tensor[(294), float64] */;
  %152 = cast(%var_8473, dtype="float64") /* ty=Tensor[(294), float64] */;
  %153 = cast(%var_8482, dtype="int8") /* ty=Tensor[(936), int8] */;
  %154 = reshape(%151, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %155 = reshape(%152, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %156 = reshape(%153, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %157 = @func_4948(%154, %155, %156) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %158 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %159 = cast(meta[relay.Constant][17] /* ty=Tensor[(72), int16] */, dtype="int16") /* ty=Tensor[(72), int16] */;
  %160 = cast(meta[relay.Constant][18] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %161 = reshape(%158, newshape=[]) /* ty=int16 */;
  %162 = reshape(%159, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), int16] */;
  %163 = reshape(%160, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %164 = @func_2003(%161, %162, %163) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */;
  %165 = cast(%var_8518, dtype="float64") /* ty=Tensor[(390), float64] */;
  %166 = reshape(%165, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %167 = @func_2377(%166) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) */;
  %168 = right_shift(%137, %138) /* ty=Tensor[(12, 16, 11), int16] */;
  %169 = %145.6;
  %170 = %150.1;
  %171 = %157.1;
  %172 = %164.2;
  %173 = %167.1;
  (%168, %169, meta[relay.Constant][13] /* ty=Tensor[(2, 48), uint64] */, %var_8473, meta[relay.Constant][14] /* ty=Tensor[(420), uint64] */, %170, meta[relay.Constant][15] /* ty=Tensor[(30), float32] */, %var_8482, %171, %172, meta[relay.Constant][16] /* ty=int16 */, meta[relay.Constant][17] /* ty=Tensor[(72), int16] */, meta[relay.Constant][18] /* ty=Tensor[(15), float32] */, %173, %var_8518)
}

def @func_7026(%var_7013: uint64, %var_7014: Tensor[(14, 15, 2), uint64]) -> (Tensor[(14, 15, 2), uint64],) {
  %174 = cast(%var_7013, dtype="uint64") /* ty=uint64 */;
  %175 = cast(%var_7014, dtype="uint64") /* ty=Tensor[(14, 15, 2), uint64] */;
  %176 = right_shift(%174, %175) /* ty=Tensor[(14, 15, 2), uint64] */;
  (%176,)
}

def @func_16033() -> Tensor[(18), float64] {
  %177 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %177.2
}

def @func_10287(%var_10282: Tensor[(11, 16, 8), float64], %var_10283: Tensor[(11, 16, 8), float64]) -> (Tensor[(11, 16, 8), float64],) {
  %178 = cast(%var_10283, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
  %179 = shape_of(%var_10282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%var_10282, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %182 = power(%180, %181) /* ty=Tensor[(11, 16, 8), float64] */;
  (%182,)
}

def @func_10464(%var_10433: Tensor[(3, 7, 10), float32], %var_10451: Tensor[(1024, 1), float64], %var_10452: Tensor[(1680), float32]) -> (Tensor[(3, 7, 10), float32], Tensor[(936), int8], Tensor[(1024, 1), float64], Tensor[(1680), float32]) {
  %183 = cast(%var_10433, dtype="float32") /* ty=Tensor[(3, 7, 10), float32] */;
  %184 = cast(%var_10451, dtype="float64") /* ty=Tensor[(1024, 1), float64] */;
  %185 = cast(%var_10452, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %186 = reshape(%184, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
  %187 = reshape(%185, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %188 = @func_6222(%186, %187) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %189 = asinh(%183) /* ty=Tensor[(3, 7, 10), float32] */;
  %190 = %188.3;
  (%189, %190, %var_10451, %var_10452)
}

def @func_6692(%var_6685: Tensor[(11, 14, 6), float32]) -> Tensor[(11, 14, 6), float32] {
  %191 = cast(%var_6685, dtype="float32") /* ty=Tensor[(11, 14, 6), float32] */;
  atan(%191) /* ty=Tensor[(11, 14, 6), float32] */
}

def @func_13220(%var_13185: Tensor[(13, 6, 2), float64]) -> (Tensor[(13, 6, 2), float32],) {
  %192 = cast(%var_13185, dtype="float64") /* ty=Tensor[(13, 6, 2), float64] */;
  %193 = sin(%192) /* ty=Tensor[(13, 6, 2), float64] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(13, 6, 2), float32] */;
  %195 = sinh(%194) /* ty=Tensor[(13, 6, 2), float32] */;
  (%195,)
}

def @func_3598(%var_3588: Tensor[(8, 10, 15), float32], %var_3589: Tensor[(8, 10, 15), float32]) -> (Tensor[(8, 10, 15), float32],) {
  %196 = cast(%var_3589, dtype="float32") /* ty=Tensor[(8, 10, 15), float32] */;
  %197 = shape_of(%var_3588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(%var_3588, dtype="float32") /* ty=Tensor[(8, 10, 15), float32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %200 = floor_mod(%198, %199) /* ty=Tensor[(8, 10, 15), float32] */;
  (%200,)
}

def @func_3139(%var_3126: Tensor[(10, 5, 12), float32], %var_3127: Tensor[(10, 5, 12), float32]) -> Tensor[(10, 5, 12), bool] {
  %201 = cast(%var_3127, dtype="bool") /* ty=Tensor[(10, 5, 12), bool] */;
  %202 = shape_of(%var_3126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%var_3126, dtype="bool") /* ty=Tensor[(10, 5, 12), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%203, %204) /* ty=Tensor[(10, 5, 12), bool] */
}

def @func_6641(%var_6637: Tensor[(10, 6, 14), float64]) -> Tensor[(10, 6, 14), float64] {
  %205 = cast(%var_6637, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
  erf(%205) /* ty=Tensor[(10, 6, 14), float64] */
}

def @func_10946(%var_10915: uint64, %var_10916: Tensor[(15, 4, 11), uint64], %var_10925: Tensor[(294), float64], %var_10927: Tensor[(5, 78), float64], %var_10941: Tensor[(36, 26), int8]) -> (Tensor[(15, 4, 11), uint64], Tensor[(13, 5, 6), bool], Tensor[(2112), int16], Tensor[(294), float64], Tensor[(5, 78), float64], Tensor[(36, 26), float64], Tensor[(36, 26), bool]) {
  %206 = cast(%var_10915, dtype="uint64") /* ty=uint64 */;
  %207 = cast(%var_10916, dtype="uint64") /* ty=Tensor[(15, 4, 11), uint64] */;
  %208 = cast(meta[relay.Constant][19] /* ty=Tensor[(2112), int16] */, dtype="int16") /* ty=Tensor[(2112), int16] */;
  %209 = cast(%var_10925, dtype="float64") /* ty=Tensor[(294), float64] */;
  %210 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 26), int8] */, dtype="int8") /* ty=Tensor[(36, 26), int8] */;
  %211 = cast(%var_10927, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %212 = reshape(%208, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %213 = reshape(%209, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %214 = reshape(%210, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %215 = reshape(%211, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %216 = @func_8545(%212, %213, %214, %215) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */;
  %217 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 26), int8] */, dtype="float64") /* ty=Tensor[(36, 26), float64] */;
  %218 = cast(%var_10941, dtype="bool") /* ty=Tensor[(36, 26), bool] */;
  %219 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(36, 26), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %220 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 26), int8] */, dtype="bool") /* ty=Tensor[(36, 26), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %222 = maximum(%206, %207) /* ty=Tensor[(15, 4, 11), uint64] */;
  %223 = %216.13;
  %224 = atan(%217) /* ty=Tensor[(36, 26), float64] */;
  %225 = equal(%220, %221) /* ty=Tensor[(36, 26), bool] */;
  (%222, %223, meta[relay.Constant][19] /* ty=Tensor[(2112), int16] */, %var_10925, %var_10927, %224, %225)
}

def @func_8746(%var_8698: Tensor[(13, 16, 14), uint32]) -> (Tensor[(13, 16, 14), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), int8]) {
  %226 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 16, 14), uint32] */, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %227 = shape_of(%var_8698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_8698, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %230 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 504), int8] */, dtype="int8") /* ty=Tensor[(2, 504), int8] */;
  %231 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 504), int8] */, dtype="bool") /* ty=Tensor[(2, 504), bool] */;
  %232 = reshape(%230, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int8] */;
  %233 = reshape(%231, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), bool] */;
  %234 = @func_7959(%232, %233) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %235 = less_equal(%228, %229) /* ty=Tensor[(13, 16, 14), bool] */;
  %236 = %234.0;
  (%235, %236, meta[relay.Constant][22] /* ty=Tensor[(2, 504), int8] */)
}

def @func_15746(%var_15691: Tensor[(72), float64], %var_15693: Tensor[(12, 70), float64], %var_15726: Tensor[(10, 12, 216), float64]) -> (Tensor[(18), float64], Tensor[(72), float64], Tensor[(12, 70), float64], Tensor[(10, 12, 216), bool], Tensor[(9, 8, 120), int32]) {
  %237 = @func_15565() /* ty=(Tensor[(18), float64],) */;
  %238 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %239 = reshape(%238, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float64] */;
  %240 = @func_12400(%239) /* ty=Tensor[(10, 12, 1), float64] */;
  %241 = cast(meta[relay.Constant][23] /* ty=Tensor[(216), float32] */, dtype="float64") /* ty=Tensor[(216), float64] */;
  %242 = cast(%240, dtype="float64") /* ty=Tensor[(10, 12, 1), float64] */;
  %243 = power(%241, %242) /* ty=Tensor[(10, 12, 216), float64] */;
  %244 = cast(%var_15726, dtype="bool") /* ty=Tensor[(10, 12, 216), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(10, 12, 216), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = cast(%var_15691, dtype="float64") /* ty=Tensor[(72), float64] */;
  %249 = cast(meta[relay.Constant][23] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
  %250 = cast(%var_15693, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
  %251 = reshape(%248, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float64] */;
  %252 = reshape(%249, newshape=[12, 18]) /* ty=Tensor[(12, 18), float32] */;
  %253 = reshape(%250, newshape=[840, 1]) /* ty=Tensor[(840, 1), float64] */;
  %254 = @func_14918(%251, %252, %253) /* ty=(Tensor[(9, 3, 8), float32], Tensor[(12, 18), float32], Tensor[(10, 6, 14), float64], Tensor[(840, 1), float64], Tensor[(9, 8, ?), float64]) */;
  %255 = %254.4;
  %256 = cast(%255, dtype="int32") /* ty=Tensor[(9, 8, ?), int32] */;
  %257 = cast(meta[relay.Constant][24] /* ty=Tensor[(120), float64] */, dtype="int32") /* ty=Tensor[(120), int32] */;
  %258 = %237.0;
  %259 = greater(%246, %247) /* ty=Tensor[(10, 12, 216), bool] */;
  %260 = bitwise_or(%256, %257) /* ty=Tensor[(9, 8, 120), int32] */;
  (%258, %var_15691, %var_15693, %259, %260)
}

def @func_15942(%var_15936: Tensor[(2, 12, 6), int16]) -> (Tensor[(2, 12, 6), int16],) {
  %261 = cast(%var_15936, dtype="int16") /* ty=Tensor[(2, 12, 6), int16] */;
  %262 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(2, 12, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 12, 6), int16] */, dtype="int16") /* ty=Tensor[(2, 12, 6), int16] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %265 = minimum(%263, %264) /* ty=Tensor[(2, 12, 6), int16] */;
  (%265,)
}

def @func_358(%var_352: Tensor[(1, 3, 5), float32]) -> Tensor[(1, 3, 5), float32] {
  %266 = cast(%var_352, dtype="float32") /* ty=Tensor[(1, 3, 5), float32] */;
  sinh(%266) /* ty=Tensor[(1, 3, 5), float32] */
}

def @func_14745(%var_14722: Tensor[(12, 3, 9), int16], %var_14735: Tensor[(2288), float64], %var_14736: Tensor[(2, 420), float32]) -> (Tensor[(12, 3, 9), float64], Tensor[(16, 13, 11), float64], Tensor[(2288), float64], Tensor[(2, 420), float32]) {
  %267 = cast(%var_14722, dtype="bool") /* ty=Tensor[(12, 3, 9), bool] */;
  %268 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(12, 3, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %269 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 3, 9), int16] */, dtype="bool") /* ty=Tensor[(12, 3, 9), bool] */;
  %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %271 = equal(%269, %270) /* ty=Tensor[(12, 3, 9), bool] */;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(12, 3, 9), float64] */;
  %273 = cast(%var_14735, dtype="float64") /* ty=Tensor[(2288), float64] */;
  %274 = cast(%var_14736, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %275 = reshape(%273, newshape=[16, 13, 11]) /* ty=Tensor[(16, 13, 11), float64] */;
  %276 = reshape(%274, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %277 = @func_14295(%275, %276) /* ty=(Tensor[(16, 13, 11), uint64], Tensor[(16, 13, 11), float64], Tensor[(16, 13, 11), float64], Tensor[(240), float32], Tensor[(840), float32], Tensor[(240), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %278 = cos(%272) /* ty=Tensor[(12, 3, 9), float64] */;
  %279 = %277.1;
  (%278, %279, %var_14735, %var_14736)
}

def @func_15510() -> Tensor[(18), float64] {
  @func_15501() /* ty=Tensor[(18), float64] */
}

def @func_16074() -> Tensor[(18), float64] {
  %280 = @func_15565() /* ty=(Tensor[(18), float64],) */;
  %280.0
}

def @func_7074(%var_7064: Tensor[(5, 6, 8), float32]) -> (Tensor[(?, 15, 16), uint8], Tensor[(5, 6, 8), float32]) {
  %281 = cast(%var_7064, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %282 = reshape(%281, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float32] */;
  %283 = cast(%var_7064, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %284 = log10(%283) /* ty=Tensor[(5, 6, 8), float32] */;
  %285 = cast(%284, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %286 = @func_1228(%282) /* ty=Tensor[(?, 15, 16), uint8] */;
  %287 = asin(%285) /* ty=Tensor[(5, 6, 8), float32] */;
  (%286, %287)
}

def @func_15993(%var_15986: Tensor[(1008), int8], %var_15991: Tensor[(48), int16]) -> (Tensor[(3, 13, 13), bool], Tensor[(16, 7, 9), float64], Tensor[(1008), int8], Tensor[(3, 3, 2), float64], Tensor[(48), int16]) {
  %288 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %289 = cast(%var_15986, dtype="int8") /* ty=Tensor[(1008), int8] */;
  %290 = cast(%var_15986, dtype="bool") /* ty=Tensor[(1008), bool] */;
  %291 = reshape(%289, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int8] */;
  %292 = reshape(%290, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), bool] */;
  %293 = @func_7959(%291, %292) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %294 = cast(%var_15991, dtype="int16") /* ty=Tensor[(48), int16] */;
  %295 = reshape(%294, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), int16] */;
  %296 = @func_12963(%295) /* ty=(Tensor[(2, 2, 12), int16], Tensor[(3, 3, 2), float64], Tensor[(18, 1), float64]) */;
  %297 = %288.0;
  %298 = %293.0;
  %299 = %296.1;
  (%297, %298, %var_15986, %299, %var_15991)
}

def @func_4860(%var_4797: Tensor[(10, 12, 14), float32], %var_4846: Tensor[(936), int8]) -> (Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %300 = cast(%var_4797, dtype="float32") /* ty=Tensor[(10, 12, 14), float32] */;
  %301 = acosh(%300) /* ty=Tensor[(10, 12, 14), float32] */;
  %302 = cast(%301, dtype="float32") /* ty=Tensor[(10, 12, 14), float32] */;
  %303 = cast(%var_4846, dtype="int8") /* ty=Tensor[(936), int8] */;
  %304 = cast(%var_4846, dtype="int8") /* ty=Tensor[(936), int8] */;
  %305 = reshape(%303, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %306 = reshape(%304, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %307 = cos(%302) /* ty=Tensor[(10, 12, 14), float32] */;
  %308 = @func_394(%305, %306) /* ty=Tensor[(13, 9, 8), int8] */;
  (%307, %308, %var_4846)
}

def @func_7405(%var_7310: Tensor[(16, 14, 11), float32], %var_7366: Tensor[(30), float32], %var_7377: Tensor[(1024), float64], %var_7378: Tensor[(1680), float32], %var_7389: Tensor[(3600), float32], %var_7391: Tensor[(15, 1), float32]) -> (Tensor[(16, 14, 11), uint32], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(1680, 1), float32], Tensor[(1024), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(3600), float32], int16, Tensor[(15, 1), float32], Tensor[(16, 14, 11), bool]) {
  %309 = cast(%var_7310, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
  %310 = log2(%309) /* ty=Tensor[(16, 14, 11), float32] */;
  %311 = cast(%var_7310, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
  %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%310, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %315 = mod(%313, %314) /* ty=Tensor[(16, 14, 11), float32] */;
  %316 = cast(%var_7310, dtype="uint32") /* ty=Tensor[(16, 14, 11), uint32] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%315, dtype="uint32") /* ty=Tensor[(16, 14, 11), uint32] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %320 = cast(%var_7366, dtype="float32") /* ty=Tensor[(30), float32] */;
  %321 = cast(meta[relay.Constant][27] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %322 = reshape(%320, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %323 = reshape(%321, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %324 = @func_5717(%322, %323) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %325 = cast(%var_7377, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %326 = cast(%var_7378, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %327 = reshape(%325, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
  %328 = reshape(%326, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %329 = @func_6222(%327, %328) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %330 = cast(%var_7389, dtype="float32") /* ty=Tensor[(3600), float32] */;
  %331 = cast(meta[relay.Constant][28] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %332 = cast(%var_7391, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
  %333 = %324.1;
  %334 = cast(%333, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %335 = cast(%var_7378, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %336 = reshape(%330, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), float32] */;
  %337 = reshape(%331, newshape=[]) /* ty=int16 */;
  %338 = reshape(%332, newshape=[5, 3]) /* ty=Tensor[(5, 3), float32] */;
  %339 = reshape(%334, newshape=[2, 468]) /* ty=Tensor[(2, 468), int8] */;
  %340 = reshape(%335, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
  %341 = @func_6946(%336, %337, %338, %339, %340) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(5, 3), float32], Tensor[(15, 15, 16), int16], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(13, 9, 8), int8], Tensor[(2, 468), int8], Tensor[(15, 15, 16), float64], Tensor[(936), int8], Tensor[(1680), float32]) */;
  %342 = cast(%var_7310, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
  %343 = sigmoid(%342) /* ty=Tensor[(16, 14, 11), float64] */;
  %344 = cast(%343, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
  %345 = shape_of(%315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%315, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %348 = maximum(%318, %319) /* ty=Tensor[(16, 14, 11), uint32] */;
  %349 = %329.2;
  %350 = %341.12;
  %351 = greater(%346, %347) /* ty=Tensor[(16, 14, 11), bool] */;
  (%348, %333, %var_7366, meta[relay.Constant][27] /* ty=Tensor[(936), int8] */, %349, %var_7377, %var_7378, %350, %var_7389, meta[relay.Constant][28] /* ty=int16 */, %var_7391, %351)
}

def @func_2377(%var_2356: Tensor[(13, 5, 6), float64]) -> (Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) {
  %352 = cast(%var_2356, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  %353 = asin(%352) /* ty=Tensor[(13, 5, 6), float64] */;
  %354 = cast(%353, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %355 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 5, 6), float64] */, dtype="bool") /* ty=Tensor[(13, 5, 6), bool] */;
  %356 = shape_of(%var_2356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_2356, dtype="bool") /* ty=Tensor[(13, 5, 6), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %359 = atan(%354) /* ty=Tensor[(13, 5, 6), float32] */;
  %360 = logical_or(%357, %358) /* ty=Tensor[(13, 5, 6), bool] */;
  (%359, %360)
}

def @func_9162(%var_9150: Tensor[(11, 10, 11), float64], %var_9151: Tensor[(11, 10, 11), float64]) -> Tensor[(11, 10, 11), float64] {
  %361 = cast(%var_9151, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
  %362 = shape_of(%var_9150, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%var_9150, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%363, %364) /* ty=Tensor[(11, 10, 11), float64] */
}

def @func_11859(%var_11845: Tensor[(16, 2, 2), float32], %var_11857: Tensor[(12, 70), float64]) -> (Tensor[(16, 2, 2), float32], Tensor[(10, 5, 12), bool], Tensor[(600), float32], Tensor[(10, 6, 14), float64], Tensor[(12, 70), float64]) {
  %365 = cast(%var_11845, dtype="float32") /* ty=Tensor[(16, 2, 2), float32] */;
  %366 = cast(meta[relay.Constant][30] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %367 = cast(meta[relay.Constant][30] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
  %368 = reshape(%366, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %369 = reshape(%367, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
  %370 = cast(%var_11857, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
  %371 = reshape(%370, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %372 = log2(%365) /* ty=Tensor[(16, 2, 2), float32] */;
  %373 = @func_3139(%368, %369) /* ty=Tensor[(10, 5, 12), bool] */;
  %374 = @func_6641(%371) /* ty=Tensor[(10, 6, 14), float64] */;
  (%372, %373, meta[relay.Constant][30] /* ty=Tensor[(600), float32] */, %374, %var_11857)
}

def @func_2743(%var_2676: Tensor[(2, 15, 8), float32], %var_2736: Tensor[(15), float32]) -> (Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(15), float32]) {
  %375 = cast(%var_2676, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %376 = cast(%var_2676, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %377 = atanh(%376) /* ty=Tensor[(2, 15, 8), float32] */;
  %378 = cast(%377, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %379 = cast(meta[relay.Constant][31] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %380 = cast(meta[relay.Constant][32] /* ty=Tensor[(72), int16] */, dtype="int16") /* ty=Tensor[(72), int16] */;
  %381 = cast(%var_2736, dtype="float32") /* ty=Tensor[(15), float32] */;
  %382 = reshape(%379, newshape=[]) /* ty=int16 */;
  %383 = reshape(%380, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), int16] */;
  %384 = reshape(%381, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %385 = @func_2003(%382, %383, %384) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */;
  %386 = sin(%375) /* ty=Tensor[(2, 15, 8), float32] */;
  %387 = cosh(%378) /* ty=Tensor[(2, 15, 8), float32] */;
  %388 = %385.4;
  (%386, %387, %388, meta[relay.Constant][31] /* ty=int16 */, meta[relay.Constant][32] /* ty=Tensor[(72), int16] */, %var_2736)
}

def @func_5717(%var_5681: Tensor[(5, 1, 6), float32], %var_5698: Tensor[(936), int8]) -> (Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %389 = cast(%var_5681, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
  %390 = cast(%var_5698, dtype="int8") /* ty=Tensor[(936), int8] */;
  %391 = cast(%var_5698, dtype="int8") /* ty=Tensor[(936), int8] */;
  %392 = reshape(%390, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %393 = reshape(%391, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %394 = cosh(%389) /* ty=Tensor[(5, 1, 6), float32] */;
  %395 = @func_394(%392, %393) /* ty=Tensor[(13, 9, 8), int8] */;
  (%394, %395, %var_5698)
}

def @func_6222(%var_6184: Tensor[(8, 8, 16), float64], %var_6214: Tensor[(1680, 1), float32]) -> (Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %396 = cast(%var_6184, dtype="float64") /* ty=Tensor[(8, 8, 16), float64] */;
  %397 = cast(%var_6214, dtype="float32") /* ty=Tensor[(1680, 1), float32] */;
  %398 = cast(meta[relay.Constant][33] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %399 = reshape(%397, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), float32] */;
  %400 = reshape(%398, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %401 = @func_4860(%399, %400) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %402 = cast(meta[relay.Constant][34] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %403 = cast(meta[relay.Constant][34] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %404 = %401.1;
  %405 = cast(%404, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %406 = reshape(%402, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %407 = reshape(%403, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %408 = reshape(%405, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %409 = @func_4948(%406, %407, %408) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %410 = acosh(%396) /* ty=Tensor[(8, 8, 16), float64] */;
  %411 = %409.0;
  (%410, %404, %var_6214, meta[relay.Constant][33] /* ty=Tensor[(936), int8] */, %411, meta[relay.Constant][34] /* ty=Tensor[(294), float64] */)
}

def @func_15167(%var_15122: Tensor[(360), uint8], %var_15133: Tensor[(30), float32], %var_15143: Tensor[(390), float64], %var_15160: Tensor[(1008, 1), int8], %var_15163: Tensor[(1210), float64]) -> (Tensor[(3, 3, 2), float64], Tensor[(10, 3, 12), uint8], Tensor[(360), uint8], Tensor[(5, 1, 6), float32], Tensor[(30), float32], Tensor[(936), int8], Tensor[(294), float64], Tensor[(390), float64], Tensor[(2112, 420), float64], Tensor[(16, 7, 9), float64], Tensor[(1008, 1), int8], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) {
  %412 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %413 = cast(%var_15122, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %414 = reshape(%413, newshape=[10, 3, 12]) /* ty=Tensor[(10, 3, 12), uint8] */;
  %415 = @func_12713(%414) /* ty=(Tensor[(10, 3, 12), uint8],) */;
  %416 = cast(%var_15133, dtype="float32") /* ty=Tensor[(30), float32] */;
  %417 = cast(meta[relay.Constant][35] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %418 = reshape(%416, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %419 = reshape(%417, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %420 = @func_5717(%418, %419) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %421 = cast(meta[relay.Constant][37] /* ty=Tensor[(2112, 1), int16] */, dtype="int16") /* ty=Tensor[(2112, 1), int16] */;
  %422 = cast(meta[relay.Constant][36] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %423 = cast(meta[relay.Constant][35] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %424 = cast(%var_15143, dtype="float64") /* ty=Tensor[(390), float64] */;
  %425 = reshape(%421, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %426 = reshape(%422, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %427 = reshape(%423, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %428 = reshape(%424, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %429 = @func_8545(%425, %426, %427, %428) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */;
  %430 = %429.1;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(420), float64] */;
  %432 = cast(meta[relay.Constant][37] /* ty=Tensor[(2112, 1), int16] */, dtype="float64") /* ty=Tensor[(2112, 1), float64] */;
  %433 = cast(%var_15160, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %434 = cast(%var_15160, dtype="bool") /* ty=Tensor[(1008, 1), bool] */;
  %435 = reshape(%433, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int8] */;
  %436 = reshape(%434, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), bool] */;
  %437 = @func_7959(%435, %436) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %438 = cast(%var_15163, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %439 = cast(%var_15163, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %440 = reshape(%438, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %441 = reshape(%439, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %442 = %412.1;
  %443 = %415.0;
  %444 = %420.0;
  %445 = power(%431, %432) /* ty=Tensor[(2112, 420), float64] */;
  %446 = %437.0;
  %447 = @func_9162(%440, %441) /* ty=Tensor[(11, 10, 11), float64] */;
  (%442, %443, %var_15122, %444, %var_15133, meta[relay.Constant][35] /* ty=Tensor[(936), int8] */, meta[relay.Constant][36] /* ty=Tensor[(294), float64] */, %var_15143, %445, %446, %var_15160, %447, %var_15163)
}

def @func_15799() -> (Tensor[(3, 3, 2), float64],) {
  %448 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %449 = %448.1;
  (%449,)
}

def @func_15589() -> (Tensor[(18), float64],) {
  %450 = @func_15510() /* ty=Tensor[(18), float64] */;
  (%450,)
}

def @func_15328(%var_15320: Tensor[(390), float64]) -> (Tensor[(18), float64], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) {
  %451 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %452 = cast(%var_15320, dtype="float64") /* ty=Tensor[(390), float64] */;
  %453 = reshape(%452, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
  %454 = @func_2377(%453) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) */;
  %455 = %451.2;
  %456 = %454.1;
  (%455, %456, %var_15320)
}

def @main(%var_16197: Tensor[(840), float64]) -> (Tensor[(18), float64], Tensor[(10, 5, 12), bool], Tensor[(840), float64], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(1, 64), float32]) {
  %457 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 64), float32] */, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %458 = cast(%var_16197, dtype="float64") /* ty=Tensor[(840), float64] */;
  %459 = reshape(%457, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float32] */;
  %460 = reshape(%458, newshape=[12, 70]) /* ty=Tensor[(12, 70), float64] */;
  %461 = @func_11859(%459, %460) /* ty=(Tensor[(16, 2, 2), float32], Tensor[(10, 5, 12), bool], Tensor[(600), float32], Tensor[(10, 6, 14), float64], Tensor[(12, 70), float64]) */;
  %462 = cast(meta[relay.Constant][39] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %463 = reshape(%462, newshape=[15, 1]) /* ty=Tensor[(15, 1), float32] */;
  %464 = @func_5116(%463) /* ty=(Tensor[(12, 13, 14), bool], Tensor[(13, 9, 8), int8], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15, 1), float32], Tensor[(12, 13, 14), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %465 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 64), float32] */, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %466 = @func_16074() /* ty=Tensor[(18), float64] */;
  %467 = %461.1;
  %468 = %464.3;
  %469 = rsqrt(%465) /* ty=Tensor[(1, 64), float32] */;
  (%466, %467, %var_16197, %468, meta[relay.Constant][39] /* ty=Tensor[(15), float32] */, %469)
}

def @func_15501() -> Tensor[(18), float64] {
  %470 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %470.2
}

def @func_14295(%var_14230: Tensor[(16, 13, 11), float64], %var_14284: Tensor[(840), float32]) -> (Tensor[(16, 13, 11), uint64], Tensor[(16, 13, 11), float64], Tensor[(16, 13, 11), float64], Tensor[(240), float32], Tensor[(840), float32], Tensor[(240), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %471 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 13, 11), float64] */, dtype="uint64") /* ty=Tensor[(16, 13, 11), uint64] */;
  %472 = shape_of(%var_14230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %473 = cast(%var_14230, dtype="uint64") /* ty=Tensor[(16, 13, 11), uint64] */;
  %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %475 = cast(%var_14230, dtype="float64") /* ty=Tensor[(16, 13, 11), float64] */;
  %476 = sqrt(%475) /* ty=Tensor[(16, 13, 11), float64] */;
  %477 = cast(%476, dtype="float64") /* ty=Tensor[(16, 13, 11), float64] */;
  %478 = cast(%var_14230, dtype="float64") /* ty=Tensor[(16, 13, 11), float64] */;
  %479 = cast(%var_14284, dtype="float32") /* ty=Tensor[(840), float32] */;
  %480 = cast(meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %481 = reshape(%479, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float32] */;
  %482 = reshape(%480, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %483 = @func_6752(%481, %482) /* ty=(Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) */;
  %484 = cast(meta[relay.Constant][42] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %485 = cast(meta[relay.Constant][42] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %486 = reshape(%484, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %487 = reshape(%485, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %488 = add(%473, %474) /* ty=Tensor[(16, 13, 11), uint64] */;
  %489 = sin(%477) /* ty=Tensor[(16, 13, 11), float64] */;
  %490 = rsqrt(%478) /* ty=Tensor[(16, 13, 11), float64] */;
  %491 = %483.1;
  %492 = @func_394(%486, %487) /* ty=Tensor[(13, 9, 8), int8] */;
  (%488, %489, %490, %491, %var_14284, meta[relay.Constant][41] /* ty=Tensor[(240), float32] */, %492, meta[relay.Constant][42] /* ty=Tensor[(936), int8] */)
}

def @func_2003(%var_1973: int16, %var_1974: Tensor[(3, 6, 4), int16], %var_1980: Tensor[(15), float32]) -> (Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) {
  %493 = cast(%var_1973, dtype="int16") /* ty=int16 */;
  %494 = cast(%var_1974, dtype="int16") /* ty=Tensor[(3, 6, 4), int16] */;
  %495 = cast(%var_1980, dtype="float32") /* ty=Tensor[(15), float32] */;
  %496 = reshape(%495, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %497 = cast(%var_1974, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
  %498 = @func_358(%496) /* ty=Tensor[(1, 3, 5), float32] */;
  %499 = cast(%498, dtype="float32") /* ty=Tensor[(1, 3, 5), float32] */;
  %500 = reshape(%499, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %501 = bitwise_or(%493, %494) /* ty=Tensor[(3, 6, 4), int16] */;
  %502 = acosh(%497) /* ty=Tensor[(3, 6, 4), float64] */;
  %503 = @func_358(%500) /* ty=Tensor[(1, 3, 5), float32] */;
  (%501, %498, %var_1980, %502, %503)
}

def @func_12400(%var_12394: Tensor[(10, 12, 1), float64]) -> Tensor[(10, 12, 1), float64] {
  %504 = cast(%var_12394, dtype="float64") /* ty=Tensor[(10, 12, 1), float64] */;
  log(%504) /* ty=Tensor[(10, 12, 1), float64] */
}

def @func_14918(%var_14879: Tensor[(9, 8, 1), float64], %var_14894: Tensor[(12, 18), float32], %var_14907: Tensor[(840, 1), float64]) -> (Tensor[(9, 3, 8), float32], Tensor[(12, 18), float32], Tensor[(10, 6, 14), float64], Tensor[(840, 1), float64], Tensor[(9, 8, ?), float64]) {
  %505 = cast(%var_14894, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
  %506 = reshape(%505, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float32] */;
  %507 = cast(%var_14907, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
  %508 = reshape(%507, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %509 = cast(%var_14879, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %510 = log10(%509) /* ty=Tensor[(9, 8, 1), float64] */;
  %511 = cast(%var_14879, dtype="bool") /* ty=Tensor[(9, 8, 1), bool] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(3), int32] */;
  %513 = cast(%510, dtype="bool") /* ty=Tensor[(9, 8, 1), bool] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %515 = equal(%513, %514) /* ty=Tensor[(9, 8, ?), bool] */;
  %516 = cast(%510, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
  %517 = shape_of(%515, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%515, dtype="float64") /* ty=Tensor[(9, 8, ?), float64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %520 = @func_12041(%506) /* ty=Tensor[(9, 3, 8), float32] */;
  %521 = @func_6641(%508) /* ty=Tensor[(10, 6, 14), float64] */;
  %522 = power(%518, %519) /* ty=Tensor[(9, 8, ?), float64] */;
  (%520, %var_14894, %521, %var_14907, %522)
}

def @func_13850(%var_13813: Tensor[(12, 2, 12), float64], %var_13814: Tensor[(12, 2, 12), float64], %var_13832: Tensor[(936), int8]) -> (Tensor[(12, 2, 12), float64], Tensor[(936), int8], Tensor[(10, 3), float32], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15), float32]) {
  %523 = cast(%var_13814, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %524 = shape_of(%var_13813, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_13813, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %527 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %528 = cast(%var_13832, dtype="int8") /* ty=Tensor[(936), int8] */;
  %529 = reshape(%527, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %530 = reshape(%528, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %531 = @func_5717(%529, %530) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %532 = cast(meta[relay.Constant][44] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %533 = reshape(%532, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %534 = mod(%525, %526) /* ty=Tensor[(12, 2, 12), float64] */;
  %535 = %531.2;
  %536 = @func_358(%533) /* ty=Tensor[(1, 3, 5), float32] */;
  (%534, %535, meta[relay.Constant][43] /* ty=Tensor[(10, 3), float32] */, %var_13832, %536, meta[relay.Constant][44] /* ty=Tensor[(15), float32] */)
}

def @func_14131(%var_14125: Tensor[(16, 15, 4), float32]) -> (Tensor[(16, 15, 4), float64], Tensor[(16, 15, 4), bool]) {
  %537 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
  %538 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 15, 4), float64] */, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
  %539 = cosh(%538) /* ty=Tensor[(16, 15, 4), float32] */;
  %540 = cast(%var_14125, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
  %541 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %542 = cast(%539, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
  %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %544 = tan(%537) /* ty=Tensor[(16, 15, 4), float64] */;
  %545 = logical_and(%542, %543) /* ty=Tensor[(16, 15, 4), bool] */;
  (%544, %545)
}

def @func_15581() -> Tensor[(18), float64] {
  %546 = @func_15565() /* ty=(Tensor[(18), float64],) */;
  %546.0
}

def @func_12041(%var_12015: Tensor[(9, 3, 8), float32]) -> Tensor[(9, 3, 8), float32] {
  %547 = cast(%var_12015, dtype="float32") /* ty=Tensor[(9, 3, 8), float32] */;
  sigmoid(%547) /* ty=Tensor[(9, 3, 8), float32] */
}

def @func_12713(%var_12704: Tensor[(10, 3, 12), uint8]) -> (Tensor[(10, 3, 12), uint8],) {
  %548 = cast(%var_12704, dtype="uint8") /* ty=Tensor[(10, 3, 12), uint8] */;
  %549 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %550 = cast(meta[relay.Constant][46] /* ty=Tensor[(10, 3, 12), uint8] */, dtype="uint8") /* ty=Tensor[(10, 3, 12), uint8] */;
  %551 = dyn.reshape(%548, %549, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %552 = bitwise_xor(%550, %551) /* ty=Tensor[(10, 3, 12), uint8] */;
  (%552,)
}

def @func_14605(%var_14591: Tensor[(2, 15, 11), bool], %var_14592: Tensor[(2, 15, 11), bool]) -> Tensor[(2, 15, 11), bool] {
  %553 = cast(%var_14592, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %554 = shape_of(%var_14591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_14591, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%555, %556) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_15042(%var_15029: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), float64] {
  %557 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %558 = %557.1;
  %559 = cast(%var_15029, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(3), int32] */;
  %561 = cast(%558, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%561, %562) /* ty=Tensor[(3, 3, 2), float64] */
}

def @func_8128(%var_8117: Tensor[(15, 3, 9), float64], %var_8121: Tensor[(936), int8]) -> (Tensor[(15, 3, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %563 = cast(%var_8117, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %564 = cast(%var_8121, dtype="int8") /* ty=Tensor[(936), int8] */;
  %565 = cast(%var_8121, dtype="int8") /* ty=Tensor[(936), int8] */;
  %566 = reshape(%564, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %567 = reshape(%565, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %568 = cos(%563) /* ty=Tensor[(15, 3, 9), float64] */;
  %569 = @func_394(%566, %567) /* ty=Tensor[(13, 9, 8), int8] */;
  (%568, %569, %var_8121)
}

def @func_8037(%var_8008: Tensor[(8, 4, 3), uint64], %var_8021: Tensor[(7, 42), float64], %var_8028: Tensor[(420), uint64]) -> (Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) {
  %570 = cast(%var_8008, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
  %571 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(8, 4, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 4, 3), uint64] */, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %574 = cast(%var_8021, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
  %575 = cast(%var_8021, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
  %576 = cast(meta[relay.Constant][48] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %577 = reshape(%574, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %578 = reshape(%575, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %579 = reshape(%576, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %580 = @func_4948(%577, %578, %579) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %581 = cast(meta[relay.Constant][49] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %582 = cast(%var_8028, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %583 = reshape(%581, newshape=[]) /* ty=uint64 */;
  %584 = reshape(%582, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), uint64] */;
  %585 = @func_7026(%583, %584) /* ty=(Tensor[(14, 15, 2), uint64],) */;
  %586 = right_shift(%572, %573) /* ty=Tensor[(8, 4, 3), uint64] */;
  %587 = %580.2;
  %588 = %585.0;
  (%586, %587, %var_8021, meta[relay.Constant][48] /* ty=Tensor[(936), int8] */, %588, meta[relay.Constant][49] /* ty=uint64 */, %var_8028)
}

def @func_16106(%var_16102: Tensor[(2, 420), float64]) -> (Tensor[(18), float64], Tensor[(10, 6, 14), float64], Tensor[(2, 420), float64]) {
  %589 = @func_15920() /* ty=(Tensor[(18), float64],) */;
  %590 = cast(%var_16102, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
  %591 = reshape(%590, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %592 = %589.0;
  %593 = @func_6641(%591) /* ty=Tensor[(10, 6, 14), float64] */;
  (%592, %593, %var_16102)
}

def @func_7959(%var_7935: Tensor[(16, 7, 9), int8], %var_7951: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), float64],) {
  %594 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 7, 9), int8] */, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
  %595 = cast(%var_7935, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %596 = less_equal(%594, %595) /* ty=Tensor[(16, 7, 9), bool] */;
  %597 = cast(%var_7951, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%596, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %601 = power(%599, %600) /* ty=Tensor[(16, 7, 9), float64] */;
  (%601,)
}

def @func_11601(%var_11575: Tensor[(2, 9, 12), int8], %var_11576: Tensor[(2, 9, 12), int8], %var_11591: Tensor[(1680), float32]) -> (Tensor[(2, 9, 12), float64], Tensor[(294), float64], Tensor[(1024), float64], Tensor[(1680), float32]) {
  %602 = cast(%var_11576, dtype="bool") /* ty=Tensor[(2, 9, 12), bool] */;
  %603 = shape_of(%var_11575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_11575, dtype="bool") /* ty=Tensor[(2, 9, 12), bool] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %606 = equal(%604, %605) /* ty=Tensor[(2, 9, 12), bool] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(2, 9, 12), float64] */;
  %608 = cast(meta[relay.Constant][51] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %609 = cast(%var_11591, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %610 = reshape(%608, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
  %611 = reshape(%609, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %612 = @func_6222(%610, %611) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %613 = cos(%607) /* ty=Tensor[(2, 9, 12), float64] */;
  %614 = %612.5;
  (%613, %614, meta[relay.Constant][51] /* ty=Tensor[(1024), float64] */, %var_11591)
}

def @func_5116(%var_5094: Tensor[(15, 1), float32]) -> (Tensor[(12, 13, 14), bool], Tensor[(13, 9, 8), int8], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15, 1), float32], Tensor[(12, 13, 14), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %615 = cast(meta[relay.Constant][53] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 14), bool] */;
  %616 = shape_of(meta[relay.Constant][52] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 14), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(meta[relay.Constant][54] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %620 = cast(meta[relay.Constant][54] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %621 = reshape(%619, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %622 = reshape(%620, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %623 = cast(%var_5094, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
  %624 = reshape(%623, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %625 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %626 = cast(meta[relay.Constant][55] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %627 = cast(meta[relay.Constant][55] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %628 = cast(meta[relay.Constant][54] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %629 = reshape(%626, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %630 = reshape(%627, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %631 = reshape(%628, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %632 = @func_4948(%629, %630, %631) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %633 = greater_equal(%617, %618) /* ty=Tensor[(12, 13, 14), bool] */;
  %634 = @func_394(%621, %622) /* ty=Tensor[(13, 9, 8), int8] */;
  %635 = @func_358(%624) /* ty=Tensor[(1, 3, 5), float32] */;
  %636 = log(%625) /* ty=Tensor[(12, 13, 14), float64] */;
  %637 = %632.0;
  (%633, %634, meta[relay.Constant][54] /* ty=Tensor[(936), int8] */, %635, %var_5094, %636, %637, meta[relay.Constant][55] /* ty=Tensor[(294), float64] */)
}

def @func_6752(%var_6710: Tensor[(5, 12, 14), float32], %var_6723: Tensor[(240), float32]) -> (Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) {
  %638 = cast(%var_6723, dtype="float32") /* ty=Tensor[(240), float32] */;
  %639 = reshape(%638, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float32] */;
  %640 = cast(%var_6710, dtype="float32") /* ty=Tensor[(5, 12, 14), float32] */;
  %641 = sinh(%640) /* ty=Tensor[(5, 12, 14), float32] */;
  %642 = cast(%641, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %643 = cast(%641, dtype="float32") /* ty=Tensor[(5, 12, 14), float32] */;
  %644 = @func_1228(%639) /* ty=Tensor[(?, 15, 16), uint8] */;
  %645 = tan(%642) /* ty=Tensor[(5, 12, 14), float64] */;
  %646 = rsqrt(%643) /* ty=Tensor[(5, 12, 14), float32] */;
  (%644, %var_6723, %645, %646)
}

def @func_12963(%var_12933: Tensor[(2, 2, 12), int16]) -> (Tensor[(2, 2, 12), int16], Tensor[(3, 3, 2), float64], Tensor[(18, 1), float64]) {
  %647 = cast(%var_12933, dtype="int16") /* ty=Tensor[(2, 2, 12), int16] */;
  %648 = shape_of(meta[relay.Constant][56] /* ty=Tensor[(2, 2, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 2, 12), int16] */, dtype="int16") /* ty=Tensor[(2, 2, 12), int16] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %651 = cast(meta[relay.Constant][57] /* ty=Tensor[(18, 1), float64] */, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %652 = cast(meta[relay.Constant][57] /* ty=Tensor[(18, 1), float64] */, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
  %653 = reshape(%651, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %654 = reshape(%652, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %655 = logical_xor(%649, %650) /* ty=Tensor[(2, 2, 12), int16] */;
  %656 = @func_11307(%653, %654) /* ty=Tensor[(3, 3, 2), float64] */;
  (%655, %656, meta[relay.Constant][57] /* ty=Tensor[(18, 1), float64] */)
}

def @func_12849(%var_12834: Tensor[(12, 12, 12), float32], %var_12844: Tensor[(1200), float32]) -> (Tensor[(12, 12, 12), float32], Tensor[(8, 10, 15), float32], Tensor[(1200), float32]) {
  %657 = cast(%var_12834, dtype="float32") /* ty=Tensor[(12, 12, 12), float32] */;
  %658 = cast(%var_12844, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %659 = cast(%var_12844, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %660 = reshape(%658, newshape=[8, 10, 15]) /* ty=Tensor[(8, 10, 15), float32] */;
  %661 = reshape(%659, newshape=[8, 10, 15]) /* ty=Tensor[(8, 10, 15), float32] */;
  %662 = @func_3598(%660, %661) /* ty=(Tensor[(8, 10, 15), float32],) */;
  %663 = asin(%657) /* ty=Tensor[(12, 12, 12), float32] */;
  %664 = %662.0;
  (%663, %664, %var_12844)
}

def @func_9938(%var_9934: Tensor[(9, 10, 2), float32]) -> Tensor[(9, 10, 2), float32] {
  %665 = cast(%var_9934, dtype="float32") /* ty=Tensor[(9, 10, 2), float32] */;
  %666 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(9, 10, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %667 = cast(meta[relay.Constant][58] /* ty=Tensor[(9, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 2), float32] */;
  %668 = dyn.reshape(%665, %666, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%667, %668) /* ty=Tensor[(9, 10, 2), float32] */
}

def @func_15920() -> (Tensor[(18), float64],) {
  %669 = @func_15553() /* ty=(Tensor[(18), float64],) */;
  %670 = %669.0;
  (%670,)
}

def @func_15011() -> (Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) {
  %671 = cast(meta[relay.Constant][60] /* ty=Tensor[(3, 13, 13), uint64] */, dtype="bool") /* ty=Tensor[(3, 13, 13), bool] */;
  %672 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(3, 13, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %673 = cast(meta[relay.Constant][59] /* ty=Tensor[(3, 13, 13), uint64] */, dtype="bool") /* ty=Tensor[(3, 13, 13), bool] */;
  %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %675 = cast(meta[relay.Constant][61] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %676 = cast(meta[relay.Constant][61] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %677 = reshape(%675, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %678 = reshape(%676, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %679 = equal(%673, %674) /* ty=Tensor[(3, 13, 13), bool] */;
  %680 = @func_11307(%677, %678) /* ty=Tensor[(3, 3, 2), float64] */;
  (%679, %680, meta[relay.Constant][61] /* ty=Tensor[(18), float64] */)
}

def @func_394(%var_378: Tensor[(13, 9, 8), int8], %var_379: Tensor[(13, 9, 8), int8]) -> Tensor[(13, 9, 8), int8] {
  %681 = cast(%var_379, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %682 = shape_of(%var_378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_378, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%683, %684) /* ty=Tensor[(13, 9, 8), int8] */
}

def @func_16135() -> (Tensor[(18), float64],) {
  %685 = @func_15501() /* ty=Tensor[(18), float64] */;
  (%685,)
}

def @func_15463(%var_15397: Tensor[(18), float64], %var_15404: Tensor[(420, 2), float32], %var_15405: Tensor[(240), float32], %var_15424: Tensor[(1680), float32], %var_15426: Tensor[(96), uint64], %var_15451: Tensor[(405), float64], %var_15452: Tensor[(936), int8]) -> (Tensor[(18), bool], Tensor[(240), float32], Tensor[(420, 2), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(1680, 1024), float64], Tensor[(630), uint16], Tensor[(1680), float32], Tensor[(1024), float64], Tensor[(96), uint64], Tensor[(13, 6, 2), float32], Tensor[(156), float64], Tensor[(13, 9, 8), int8], Tensor[(405), float64], Tensor[(936), int8]) {
  %686 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %687 = %686.2;
  %688 = cast(%var_15397, dtype="bool") /* ty=Tensor[(18), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(1), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(18), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?), bool] */;
  %692 = cast(%var_15404, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %693 = cast(%var_15405, dtype="float32") /* ty=Tensor[(240), float32] */;
  %694 = reshape(%692, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float32] */;
  %695 = reshape(%693, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %696 = @func_6752(%694, %695) /* ty=(Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) */;
  %697 = cast(meta[relay.Constant][62] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %698 = cast(meta[relay.Constant][62] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %699 = reshape(%697, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %700 = reshape(%698, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %701 = cast(meta[relay.Constant][63] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %702 = cast(meta[relay.Constant][63] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %703 = cast(%var_15424, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %704 = cast(meta[relay.Constant][64] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %705 = cast(%var_15426, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %706 = reshape(%701, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), uint16] */;
  %707 = reshape(%702, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), uint16] */;
  %708 = reshape(%703, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %709 = reshape(%704, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %710 = reshape(%705, newshape=[96]) /* ty=Tensor[(96), uint64] */;
  %711 = @func_13585(%706, %707, %708, %709, %710) /* ty=(Tensor[(14, 15, 3), uint16], Tensor[(13, 9, 8), int8], Tensor[(1680, 1024), bool], Tensor[(1680, 1024), float64], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64], Tensor[(420), uint64], Tensor[(96), uint64], Tensor[(294), float64]) */;
  %712 = cast(meta[relay.Constant][65] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %713 = reshape(%712, newshape=[13, 6, 2]) /* ty=Tensor[(13, 6, 2), float64] */;
  %714 = @func_13220(%713) /* ty=(Tensor[(13, 6, 2), float32],) */;
  %715 = cast(%var_15451, dtype="float64") /* ty=Tensor[(405), float64] */;
  %716 = cast(%var_15452, dtype="int8") /* ty=Tensor[(936), int8] */;
  %717 = reshape(%715, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float64] */;
  %718 = reshape(%716, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %719 = @func_8128(%717, %718) /* ty=(Tensor[(15, 3, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %720 = equal(%690, %691) /* ty=Tensor[(18), bool] */;
  %721 = %696.1;
  %722 = @func_9162(%699, %700) /* ty=Tensor[(11, 10, 11), float64] */;
  %723 = %711.3;
  %724 = %714.0;
  %725 = %719.1;
  (%720, %721, %var_15404, %var_15405, %722, meta[relay.Constant][62] /* ty=Tensor[(1210), float64] */, %723, meta[relay.Constant][63] /* ty=Tensor[(630), uint16] */, %var_15424, meta[relay.Constant][64] /* ty=Tensor[(1024), float64] */, %var_15426, %724, meta[relay.Constant][65] /* ty=Tensor[(156), float64] */, %725, %var_15451, %var_15452)
}

def @func_15553() -> (Tensor[(18), float64],) {
  %726 = @func_15501() /* ty=Tensor[(18), float64] */;
  (%726,)
}

def @func_11485(%var_11465: Tensor[(14, 2, 1), float64]) -> (Tensor[(14, 2, ?), int16],) {
  %727 = cast(%var_11465, dtype="float64") /* ty=Tensor[(14, 2, 1), float64] */;
  %728 = atanh(%727) /* ty=Tensor[(14, 2, 1), float64] */;
  %729 = cast(%728, dtype="int16") /* ty=Tensor[(14, 2, 1), int16] */;
  %730 = shape_of(%var_11465, dtype="int32") /* ty=Tensor[(3), int32] */;
  %731 = cast(%var_11465, dtype="int16") /* ty=Tensor[(14, 2, 1), int16] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %733 = logical_xor(%731, %732) /* ty=Tensor[(14, 2, ?), int16] */;
  (%733,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_394(%var_378: Tensor[(13, 9, 8), int8], %var_379: Tensor[(13, 9, 8), int8]) -> Tensor[(13, 9, 8), int8] {
  %0 = cast(%var_379, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %1 = shape_of(%var_378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_378, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%2, %3) /* ty=Tensor[(13, 9, 8), int8] */
}

def @func_15463(%var_15397: Tensor[(18), float64], %var_15404: Tensor[(420, 2), float32], %var_15405: Tensor[(240), float32], %var_15424: Tensor[(1680), float32], %var_15426: Tensor[(96), uint64], %var_15451: Tensor[(405), float64], %var_15452: Tensor[(936), int8]) -> (Tensor[(18), bool], Tensor[(240), float32], Tensor[(420, 2), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(1680, 1024), float64], Tensor[(630), uint16], Tensor[(1680), float32], Tensor[(1024), float64], Tensor[(96), uint64], Tensor[(13, 6, 2), float32], Tensor[(156), float64], Tensor[(13, 9, 8), int8], Tensor[(405), float64], Tensor[(936), int8]) {
  %4 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %5 = %4.2;
  %6 = cast(%var_15397, dtype="bool") /* ty=Tensor[(18), bool] */;
  %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(1), int32] */;
  %8 = cast(%5, dtype="bool") /* ty=Tensor[(18), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?), bool] */;
  %10 = cast(%var_15404, dtype="float32") /* ty=Tensor[(420, 2), float32] */;
  %11 = cast(%var_15405, dtype="float32") /* ty=Tensor[(240), float32] */;
  %12 = reshape(%10, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float32] */;
  %13 = reshape(%11, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %14 = @func_6752(%12, %13) /* ty=(Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(1210), float64] */, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %17 = reshape(%15, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %18 = reshape(%16, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(630), uint16] */, dtype="uint16") /* ty=Tensor[(630), uint16] */;
  %21 = cast(%var_15424, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %23 = cast(%var_15426, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %24 = reshape(%19, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), uint16] */;
  %25 = reshape(%20, newshape=[14, 15, 3]) /* ty=Tensor[(14, 15, 3), uint16] */;
  %26 = reshape(%21, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %27 = reshape(%22, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %28 = reshape(%23, newshape=[96]) /* ty=Tensor[(96), uint64] */;
  %29 = @func_13585(%24, %25, %26, %27, %28) /* ty=(Tensor[(14, 15, 3), uint16], Tensor[(13, 9, 8), int8], Tensor[(1680, 1024), bool], Tensor[(1680, 1024), float64], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64], Tensor[(420), uint64], Tensor[(96), uint64], Tensor[(294), float64]) */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %31 = reshape(%30, newshape=[13, 6, 2]) /* ty=Tensor[(13, 6, 2), float64] */;
  %32 = @func_13220(%31) /* ty=(Tensor[(13, 6, 2), float32],) */;
  %33 = cast(%var_15451, dtype="float64") /* ty=Tensor[(405), float64] */;
  %34 = cast(%var_15452, dtype="int8") /* ty=Tensor[(936), int8] */;
  %35 = reshape(%33, newshape=[15, 3, 9]) /* ty=Tensor[(15, 3, 9), float64] */;
  %36 = reshape(%34, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %37 = @func_8128(%35, %36) /* ty=(Tensor[(15, 3, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %38 = equal(%8, %9) /* ty=Tensor[(18), bool] */;
  %39 = %14.1;
  %40 = @func_9162(%17, %18) /* ty=Tensor[(11, 10, 11), float64] */;
  %41 = %29.3;
  %42 = %32.0;
  %43 = %37.1;
  (%38, %39, %var_15404, %var_15405, %40, meta[relay.Constant][0] /* ty=Tensor[(1210), float64] */, %41, meta[relay.Constant][1] /* ty=Tensor[(630), uint16] */, %var_15424, meta[relay.Constant][2] /* ty=Tensor[(1024), float64] */, %var_15426, %42, meta[relay.Constant][3] /* ty=Tensor[(156), float64] */, %43, %var_15451, %var_15452)
}

def @func_398(%var_396: Tensor[(13, 9, 8), int8], %var_397: Tensor[(13, 9, 8), int8]) -> Tensor[(13, 9, 8), int8] {
  @func_394(%var_396, %var_397) /* ty=Tensor[(13, 9, 8), int8] */
}

def @func_14609(%var_14607: Tensor[(2, 15, 11), bool], %var_14608: Tensor[(2, 15, 11), bool]) -> Tensor[(2, 15, 11), bool] {
  @func_14605(%var_14607, %var_14608) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_15472(%var_15465: Tensor[(18), float64], %var_15466: Tensor[(420, 2), float32], %var_15467: Tensor[(240), float32], %var_15468: Tensor[(1680), float32], %var_15469: Tensor[(96), uint64], %var_15470: Tensor[(405), float64], %var_15471: Tensor[(936), int8]) -> (Tensor[(18), bool], Tensor[(240), float32], Tensor[(420, 2), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(1680, 1024), float64], Tensor[(630), uint16], Tensor[(1680), float32], Tensor[(1024), float64], Tensor[(96), uint64], Tensor[(13, 6, 2), float32], Tensor[(156), float64], Tensor[(13, 9, 8), int8], Tensor[(405), float64], Tensor[(936), int8]) {
  @func_15463(%var_15465, %var_15466, %var_15467, %var_15468, %var_15469, %var_15470, %var_15471) /* ty=(Tensor[(18), bool], Tensor[(240), float32], Tensor[(420, 2), float32], Tensor[(240), float32], Tensor[(11, 10, 11), float64], Tensor[(1210), float64], Tensor[(1680, 1024), float64], Tensor[(630), uint16], Tensor[(1680), float32], Tensor[(1024), float64], Tensor[(96), uint64], Tensor[(13, 6, 2), float32], Tensor[(156), float64], Tensor[(13, 9, 8), int8], Tensor[(405), float64], Tensor[(936), int8]) */
}

def @func_10468(%var_10465: Tensor[(3, 7, 10), float32], %var_10466: Tensor[(1024, 1), float64], %var_10467: Tensor[(1680), float32]) -> (Tensor[(3, 7, 10), float32], Tensor[(936), int8], Tensor[(1024, 1), float64], Tensor[(1680), float32]) {
  %52 = fn (%var_10433: Tensor[(3, 7, 10), float32], %var_10451: Tensor[(1024, 1), float64], %var_10452: Tensor[(1680), float32]) -> (Tensor[(3, 7, 10), float32], Tensor[(936), int8], Tensor[(1024, 1), float64], Tensor[(1680), float32]) {
    %44 = cast(%var_10433, dtype="float32") /* ty=Tensor[(3, 7, 10), float32] */;
    %45 = cast(%var_10451, dtype="float64") /* ty=Tensor[(1024, 1), float64] */;
    %46 = cast(%var_10452, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %47 = reshape(%45, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
    %48 = reshape(%46, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
    %49 = @func_6222(%47, %48) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
    %50 = asinh(%44) /* ty=Tensor[(3, 7, 10), float32] */;
    %51 = %49.3;
    (%50, %51, %var_10451, %var_10452)
  };
  %52(%var_10465, %var_10466, %var_10467) /* ty=(Tensor[(3, 7, 10), float32], Tensor[(936), int8], Tensor[(1024, 1), float64], Tensor[(1680), float32]) */
}

def @func_8041(%var_8038: Tensor[(8, 4, 3), uint64], %var_8039: Tensor[(7, 42), float64], %var_8040: Tensor[(420), uint64]) -> (Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) {
  %72 = fn (%var_8008: Tensor[(8, 4, 3), uint64], %var_8021: Tensor[(7, 42), float64], %var_8028: Tensor[(420), uint64]) -> (Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) {
    %53 = cast(%var_8008, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
    %54 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(8, 4, 3), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 4, 3), uint64] */, dtype="uint64") /* ty=Tensor[(8, 4, 3), uint64] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %57 = cast(%var_8021, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
    %58 = cast(%var_8021, dtype="float64") /* ty=Tensor[(7, 42), float64] */;
    %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
    %60 = reshape(%57, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %61 = reshape(%58, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %62 = reshape(%59, newshape=[936]) /* ty=Tensor[(936), int8] */;
    %63 = @func_4948(%60, %61, %62) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
    %64 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %65 = cast(%var_8028, dtype="uint64") /* ty=Tensor[(420), uint64] */;
    %66 = reshape(%64, newshape=[]) /* ty=uint64 */;
    %67 = reshape(%65, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), uint64] */;
    %68 = @func_7026(%66, %67) /* ty=(Tensor[(14, 15, 2), uint64],) */;
    %69 = right_shift(%55, %56) /* ty=Tensor[(8, 4, 3), uint64] */;
    %70 = %63.2;
    %71 = %68.0;
    (%69, %70, %var_8021, meta[relay.Constant][5] /* ty=Tensor[(936), int8] */, %71, meta[relay.Constant][6] /* ty=uint64 */, %var_8028)
  };
  %72(%var_8038, %var_8039, %var_8040) /* ty=(Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) */
}

def @func_15581() -> Tensor[(18), float64] {
  %73 = @func_15565() /* ty=(Tensor[(18), float64],) */;
  %73.0
}

def @func_15864(%var_15863: Tensor[(6, 14, 6), int16]) -> Tensor[(6, 14, 6), bool] {
  %78 = fn (%var_15857: Tensor[(6, 14, 6), int16]) -> Tensor[(6, 14, 6), bool] {
    %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 14, 6), int16] */, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
    %75 = shape_of(%var_15857, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(%var_15857, dtype="bool") /* ty=Tensor[(6, 14, 6), bool] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%76, %77) /* ty=Tensor[(6, 14, 6), bool] */
  };
  %78(%var_15863) /* ty=Tensor[(6, 14, 6), bool] */
}

def @func_8128(%var_8117: Tensor[(15, 3, 9), float64], %var_8121: Tensor[(936), int8]) -> (Tensor[(15, 3, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %79 = cast(%var_8117, dtype="float64") /* ty=Tensor[(15, 3, 9), float64] */;
  %80 = cast(%var_8121, dtype="int8") /* ty=Tensor[(936), int8] */;
  %81 = cast(%var_8121, dtype="int8") /* ty=Tensor[(936), int8] */;
  %82 = reshape(%80, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %83 = reshape(%81, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %84 = cos(%79) /* ty=Tensor[(15, 3, 9), float64] */;
  %85 = @func_394(%82, %83) /* ty=Tensor[(13, 9, 8), int8] */;
  (%84, %85, %var_8121)
}

def @func_14745(%var_14722: Tensor[(12, 3, 9), int16], %var_14735: Tensor[(2288), float64], %var_14736: Tensor[(2, 420), float32]) -> (Tensor[(12, 3, 9), float64], Tensor[(16, 13, 11), float64], Tensor[(2288), float64], Tensor[(2, 420), float32]) {
  %86 = cast(%var_14722, dtype="bool") /* ty=Tensor[(12, 3, 9), bool] */;
  %87 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(12, 3, 9), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 3, 9), int16] */, dtype="bool") /* ty=Tensor[(12, 3, 9), bool] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %90 = equal(%88, %89) /* ty=Tensor[(12, 3, 9), bool] */;
  %91 = cast(%90, dtype="float64") /* ty=Tensor[(12, 3, 9), float64] */;
  %92 = cast(%var_14735, dtype="float64") /* ty=Tensor[(2288), float64] */;
  %93 = cast(%var_14736, dtype="float32") /* ty=Tensor[(2, 420), float32] */;
  %94 = reshape(%92, newshape=[16, 13, 11]) /* ty=Tensor[(16, 13, 11), float64] */;
  %95 = reshape(%93, newshape=[840]) /* ty=Tensor[(840), float32] */;
  %96 = @func_14295(%94, %95) /* ty=(Tensor[(16, 13, 11), uint64], Tensor[(16, 13, 11), float64], Tensor[(16, 13, 11), float64], Tensor[(240), float32], Tensor[(840), float32], Tensor[(240), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %97 = cos(%91) /* ty=Tensor[(12, 3, 9), float64] */;
  %98 = %96.1;
  (%97, %98, %var_14735, %var_14736)
}

def @func_14750(%var_14747: Tensor[(12, 3, 9), int16], %var_14748: Tensor[(2288), float64], %var_14749: Tensor[(2, 420), float32]) -> (Tensor[(12, 3, 9), float64], Tensor[(16, 13, 11), float64], Tensor[(2288), float64], Tensor[(2, 420), float32]) {
  @func_14745(%var_14747, %var_14748, %var_14749) /* ty=(Tensor[(12, 3, 9), float64], Tensor[(16, 13, 11), float64], Tensor[(2288), float64], Tensor[(2, 420), float32]) */
}

def @func_6953(%var_6948: Tensor[(15, 15, 16), float32], %var_6949: int16, %var_6950: Tensor[(5, 3), float32], %var_6951: Tensor[(2, 468), int8], %var_6952: Tensor[(1680), float32]) -> (Tensor[(15, 15, 16), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(5, 3), float32], Tensor[(15, 15, 16), int16], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(13, 9, 8), int8], Tensor[(2, 468), int8], Tensor[(15, 15, 16), float64], Tensor[(936), int8], Tensor[(1680), float32]) {
  @func_6946(%var_6948, %var_6949, %var_6950, %var_6951, %var_6952) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(5, 3), float32], Tensor[(15, 15, 16), int16], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(13, 9, 8), int8], Tensor[(2, 468), int8], Tensor[(15, 15, 16), float64], Tensor[(936), int8], Tensor[(1680), float32]) */
}

def @func_10290(%var_10288: Tensor[(11, 16, 8), float64], %var_10289: Tensor[(11, 16, 8), float64]) -> (Tensor[(11, 16, 8), float64],) {
  %104 = fn (%var_10282: Tensor[(11, 16, 8), float64], %var_10283: Tensor[(11, 16, 8), float64]) -> (Tensor[(11, 16, 8), float64],) {
    %99 = cast(%var_10283, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
    %100 = shape_of(%var_10282, dtype="int32") /* ty=Tensor[(3), int32] */;
    %101 = cast(%var_10282, dtype="float64") /* ty=Tensor[(11, 16, 8), float64] */;
    %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %103 = power(%101, %102) /* ty=Tensor[(11, 16, 8), float64] */;
    (%103,)
  };
  %104(%var_10288, %var_10289) /* ty=(Tensor[(11, 16, 8), float64],) */
}

def @func_15921() -> (Tensor[(18), float64],) {
  %107 = fn () -> (Tensor[(18), float64],) {
    %105 = @func_15553() /* ty=(Tensor[(18), float64],) */;
    %106 = %105.0;
    (%106,)
  };
  %107() /* ty=(Tensor[(18), float64],) */
}

def @func_15565() -> (Tensor[(18), float64],) {
  %108 = @func_15501() /* ty=Tensor[(18), float64] */;
  (%108,)
}

def @func_15330(%var_15329: Tensor[(390), float64]) -> (Tensor[(18), float64], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) {
  %115 = fn (%var_15320: Tensor[(390), float64]) -> (Tensor[(18), float64], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) {
    %109 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
    %110 = cast(%var_15320, dtype="float64") /* ty=Tensor[(390), float64] */;
    %111 = reshape(%110, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
    %112 = @func_2377(%111) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) */;
    %113 = %109.2;
    %114 = %112.1;
    (%113, %114, %var_15320)
  };
  %115(%var_15329) /* ty=(Tensor[(18), float64], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */
}

def @func_15011() -> (Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) {
  %116 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 13, 13), uint64] */, dtype="bool") /* ty=Tensor[(3, 13, 13), bool] */;
  %117 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(3, 13, 13), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 13, 13), uint64] */, dtype="bool") /* ty=Tensor[(3, 13, 13), bool] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %120 = cast(meta[relay.Constant][11] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %121 = cast(meta[relay.Constant][11] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %122 = reshape(%120, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %123 = reshape(%121, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %124 = equal(%118, %119) /* ty=Tensor[(3, 13, 13), bool] */;
  %125 = @func_11307(%122, %123) /* ty=Tensor[(3, 3, 2), float64] */;
  (%124, %125, meta[relay.Constant][11] /* ty=Tensor[(18), float64] */)
}

def @func_14133(%var_14132: Tensor[(16, 15, 4), float32]) -> (Tensor[(16, 15, 4), float64], Tensor[(16, 15, 4), bool]) {
  %135 = fn (%var_14125: Tensor[(16, 15, 4), float32]) -> (Tensor[(16, 15, 4), float64], Tensor[(16, 15, 4), bool]) {
    %126 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 15, 4), float64] */, dtype="float64") /* ty=Tensor[(16, 15, 4), float64] */;
    %127 = cast(meta[relay.Constant][12] /* ty=Tensor[(16, 15, 4), float64] */, dtype="float32") /* ty=Tensor[(16, 15, 4), float32] */;
    %128 = cosh(%127) /* ty=Tensor[(16, 15, 4), float32] */;
    %129 = cast(%var_14125, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
    %130 = shape_of(%128, dtype="int32") /* ty=Tensor[(3), int32] */;
    %131 = cast(%128, dtype="bool") /* ty=Tensor[(16, 15, 4), bool] */;
    %132 = dyn.reshape(%129, %130, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %133 = tan(%126) /* ty=Tensor[(16, 15, 4), float64] */;
    %134 = logical_and(%131, %132) /* ty=Tensor[(16, 15, 4), bool] */;
    (%133, %134)
  };
  %135(%var_14132) /* ty=(Tensor[(16, 15, 4), float64], Tensor[(16, 15, 4), bool]) */
}

def @func_16075() -> Tensor[(18), float64] {
  %137 = fn () -> Tensor[(18), float64] {
    %136 = @func_15565() /* ty=(Tensor[(18), float64],) */;
    %136.0
  };
  %137() /* ty=Tensor[(18), float64] */
}

def @func_16135() -> (Tensor[(18), float64],) {
  %138 = @func_15501() /* ty=Tensor[(18), float64] */;
  (%138,)
}

def @func_15942(%var_15936: Tensor[(2, 12, 6), int16]) -> (Tensor[(2, 12, 6), int16],) {
  %139 = cast(%var_15936, dtype="int16") /* ty=Tensor[(2, 12, 6), int16] */;
  %140 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(2, 12, 6), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 12, 6), int16] */, dtype="int16") /* ty=Tensor[(2, 12, 6), int16] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %143 = minimum(%141, %142) /* ty=Tensor[(2, 12, 6), int16] */;
  (%143,)
}

def @func_2377(%var_2356: Tensor[(13, 5, 6), float64]) -> (Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) {
  %144 = cast(%var_2356, dtype="float64") /* ty=Tensor[(13, 5, 6), float64] */;
  %145 = asin(%144) /* ty=Tensor[(13, 5, 6), float64] */;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(13, 5, 6), float32] */;
  %147 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 5, 6), float64] */, dtype="bool") /* ty=Tensor[(13, 5, 6), bool] */;
  %148 = shape_of(%var_2356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %149 = cast(%var_2356, dtype="bool") /* ty=Tensor[(13, 5, 6), bool] */;
  %150 = dyn.reshape(%147, %148, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %151 = atan(%146) /* ty=Tensor[(13, 5, 6), float32] */;
  %152 = logical_or(%149, %150) /* ty=Tensor[(13, 5, 6), bool] */;
  (%151, %152)
}

def @func_16034() -> Tensor[(18), float64] {
  %154 = fn () -> Tensor[(18), float64] {
    %153 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
    %153.2
  };
  %154() /* ty=Tensor[(18), float64] */
}

def @func_2008(%var_2005: int16, %var_2006: Tensor[(3, 6, 4), int16], %var_2007: Tensor[(15), float32]) -> (Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) {
  @func_2003(%var_2005, %var_2006, %var_2007) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */
}

def @func_11487(%var_11486: Tensor[(14, 2, 1), float64]) -> (Tensor[(14, 2, ?), int16],) {
  %162 = fn (%var_11465: Tensor[(14, 2, 1), float64]) -> (Tensor[(14, 2, ?), int16],) {
    %155 = cast(%var_11465, dtype="float64") /* ty=Tensor[(14, 2, 1), float64] */;
    %156 = atanh(%155) /* ty=Tensor[(14, 2, 1), float64] */;
    %157 = cast(%156, dtype="int16") /* ty=Tensor[(14, 2, 1), int16] */;
    %158 = shape_of(%var_11465, dtype="int32") /* ty=Tensor[(3), int32] */;
    %159 = cast(%var_11465, dtype="int16") /* ty=Tensor[(14, 2, 1), int16] */;
    %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %161 = logical_xor(%159, %160) /* ty=Tensor[(14, 2, ?), int16] */;
    (%161,)
  };
  %162(%var_11486) /* ty=(Tensor[(14, 2, ?), int16],) */
}

def @func_1228(%var_1213: Tensor[(1, 15, 16), float32]) -> Tensor[(?, 15, 16), uint8] {
  %163 = cast(%var_1213, dtype="float32") /* ty=Tensor[(1, 15, 16), float32] */;
  %164 = atan(%163) /* ty=Tensor[(1, 15, 16), float32] */;
  %165 = cast(%var_1213, dtype="uint8") /* ty=Tensor[(1, 15, 16), uint8] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="uint8") /* ty=Tensor[(1, 15, 16), uint8] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%167, %168) /* ty=Tensor[(?, 15, 16), uint8] */
}

def @func_6756(%var_6754: Tensor[(5, 12, 14), float32], %var_6755: Tensor[(240), float32]) -> (Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) {
  @func_6752(%var_6754, %var_6755) /* ty=(Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) */
}

def @func_16137() -> (Tensor[(18), float64],) {
  @func_16135() /* ty=(Tensor[(18), float64],) */
}

def @func_6643(%var_6642: Tensor[(10, 6, 14), float64]) -> Tensor[(10, 6, 14), float64] {
  %170 = fn (%var_6637: Tensor[(10, 6, 14), float64]) -> Tensor[(10, 6, 14), float64] {
    %169 = cast(%var_6637, dtype="float64") /* ty=Tensor[(10, 6, 14), float64] */;
    erf(%169) /* ty=Tensor[(10, 6, 14), float64] */
  };
  %170(%var_6642) /* ty=Tensor[(10, 6, 14), float64] */
}

def @func_11310(%var_11308: Tensor[(3, 3, 2), float64], %var_11309: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), float64] {
  %175 = fn (%var_11295: Tensor[(3, 3, 2), float64], %var_11296: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), float64] {
    %171 = cast(%var_11296, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %172 = shape_of(%var_11295, dtype="int32") /* ty=Tensor[(3), int32] */;
    %173 = cast(%var_11295, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%173, %174) /* ty=Tensor[(3, 3, 2), float64] */
  };
  %175(%var_11308, %var_11309) /* ty=Tensor[(3, 3, 2), float64] */
}

def @func_2003(%var_1973: int16, %var_1974: Tensor[(3, 6, 4), int16], %var_1980: Tensor[(15), float32]) -> (Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) {
  %176 = cast(%var_1973, dtype="int16") /* ty=int16 */;
  %177 = cast(%var_1974, dtype="int16") /* ty=Tensor[(3, 6, 4), int16] */;
  %178 = cast(%var_1980, dtype="float32") /* ty=Tensor[(15), float32] */;
  %179 = reshape(%178, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %180 = cast(%var_1974, dtype="float64") /* ty=Tensor[(3, 6, 4), float64] */;
  %181 = @func_358(%179) /* ty=Tensor[(1, 3, 5), float32] */;
  %182 = cast(%181, dtype="float32") /* ty=Tensor[(1, 3, 5), float32] */;
  %183 = reshape(%182, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %184 = bitwise_or(%176, %177) /* ty=Tensor[(3, 6, 4), int16] */;
  %185 = acosh(%180) /* ty=Tensor[(3, 6, 4), float64] */;
  %186 = @func_358(%183) /* ty=Tensor[(1, 3, 5), float32] */;
  (%184, %181, %var_1980, %185, %186)
}

def @func_6692(%var_6685: Tensor[(11, 14, 6), float32]) -> Tensor[(11, 14, 6), float32] {
  %187 = cast(%var_6685, dtype="float32") /* ty=Tensor[(11, 14, 6), float32] */;
  atan(%187) /* ty=Tensor[(11, 14, 6), float32] */
}

def @func_5720(%var_5718: Tensor[(5, 1, 6), float32], %var_5719: Tensor[(936), int8]) -> (Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %195 = fn (%var_5681: Tensor[(5, 1, 6), float32], %var_5698: Tensor[(936), int8]) -> (Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
    %188 = cast(%var_5681, dtype="float32") /* ty=Tensor[(5, 1, 6), float32] */;
    %189 = cast(%var_5698, dtype="int8") /* ty=Tensor[(936), int8] */;
    %190 = cast(%var_5698, dtype="int8") /* ty=Tensor[(936), int8] */;
    %191 = reshape(%189, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
    %192 = reshape(%190, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
    %193 = cosh(%188) /* ty=Tensor[(5, 1, 6), float32] */;
    %194 = @func_394(%191, %192) /* ty=Tensor[(13, 9, 8), int8] */;
    (%193, %194, %var_5698)
  };
  %195(%var_5718, %var_5719) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */
}

def @func_7029(%var_7027: uint64, %var_7028: Tensor[(14, 15, 2), uint64]) -> (Tensor[(14, 15, 2), uint64],) {
  %199 = fn (%var_7013: uint64, %var_7014: Tensor[(14, 15, 2), uint64]) -> (Tensor[(14, 15, 2), uint64],) {
    %196 = cast(%var_7013, dtype="uint64") /* ty=uint64 */;
    %197 = cast(%var_7014, dtype="uint64") /* ty=Tensor[(14, 15, 2), uint64] */;
    %198 = right_shift(%196, %197) /* ty=Tensor[(14, 15, 2), uint64] */;
    (%198,)
  };
  %199(%var_7027, %var_7028) /* ty=(Tensor[(14, 15, 2), uint64],) */
}

def @func_7412(%var_7406: Tensor[(16, 14, 11), float32], %var_7407: Tensor[(30), float32], %var_7408: Tensor[(1024), float64], %var_7409: Tensor[(1680), float32], %var_7410: Tensor[(3600), float32], %var_7411: Tensor[(15, 1), float32]) -> (Tensor[(16, 14, 11), uint32], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(1680, 1), float32], Tensor[(1024), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(3600), float32], int16, Tensor[(15, 1), float32], Tensor[(16, 14, 11), bool]) {
  %243 = fn (%var_7310: Tensor[(16, 14, 11), float32], %var_7366: Tensor[(30), float32], %var_7377: Tensor[(1024), float64], %var_7378: Tensor[(1680), float32], %var_7389: Tensor[(3600), float32], %var_7391: Tensor[(15, 1), float32]) -> (Tensor[(16, 14, 11), uint32], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(1680, 1), float32], Tensor[(1024), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(3600), float32], int16, Tensor[(15, 1), float32], Tensor[(16, 14, 11), bool]) {
    %200 = cast(%var_7310, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
    %201 = log2(%200) /* ty=Tensor[(16, 14, 11), float32] */;
    %202 = cast(%var_7310, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
    %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%201, dtype="float32") /* ty=Tensor[(16, 14, 11), float32] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %206 = mod(%204, %205) /* ty=Tensor[(16, 14, 11), float32] */;
    %207 = cast(%var_7310, dtype="uint32") /* ty=Tensor[(16, 14, 11), uint32] */;
    %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %209 = cast(%206, dtype="uint32") /* ty=Tensor[(16, 14, 11), uint32] */;
    %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %211 = cast(%var_7366, dtype="float32") /* ty=Tensor[(30), float32] */;
    %212 = cast(meta[relay.Constant][15] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
    %213 = reshape(%211, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
    %214 = reshape(%212, newshape=[936]) /* ty=Tensor[(936), int8] */;
    %215 = @func_5717(%213, %214) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
    %216 = cast(%var_7377, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %217 = cast(%var_7378, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %218 = reshape(%216, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
    %219 = reshape(%217, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
    %220 = @func_6222(%218, %219) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
    %221 = cast(%var_7389, dtype="float32") /* ty=Tensor[(3600), float32] */;
    %222 = cast(meta[relay.Constant][16] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %223 = cast(%var_7391, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
    %224 = %215.1;
    %225 = cast(%224, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
    %226 = cast(%var_7378, dtype="float32") /* ty=Tensor[(1680), float32] */;
    %227 = reshape(%221, newshape=[15, 15, 16]) /* ty=Tensor[(15, 15, 16), float32] */;
    %228 = reshape(%222, newshape=[]) /* ty=int16 */;
    %229 = reshape(%223, newshape=[5, 3]) /* ty=Tensor[(5, 3), float32] */;
    %230 = reshape(%225, newshape=[2, 468]) /* ty=Tensor[(2, 468), int8] */;
    %231 = reshape(%226, newshape=[1680]) /* ty=Tensor[(1680), float32] */;
    %232 = @func_6946(%227, %228, %229, %230, %231) /* ty=(Tensor[(15, 15, 16), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(5, 3), float32], Tensor[(15, 15, 16), int16], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(13, 9, 8), int8], Tensor[(2, 468), int8], Tensor[(15, 15, 16), float64], Tensor[(936), int8], Tensor[(1680), float32]) */;
    %233 = cast(%var_7310, dtype="float64") /* ty=Tensor[(16, 14, 11), float64] */;
    %234 = sigmoid(%233) /* ty=Tensor[(16, 14, 11), float64] */;
    %235 = cast(%234, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
    %236 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
    %237 = cast(%206, dtype="bool") /* ty=Tensor[(16, 14, 11), bool] */;
    %238 = dyn.reshape(%235, %236, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %239 = maximum(%209, %210) /* ty=Tensor[(16, 14, 11), uint32] */;
    %240 = %220.2;
    %241 = %232.12;
    %242 = greater(%237, %238) /* ty=Tensor[(16, 14, 11), bool] */;
    (%239, %224, %var_7366, meta[relay.Constant][15] /* ty=Tensor[(936), int8] */, %240, %var_7377, %var_7378, %241, %var_7389, meta[relay.Constant][16] /* ty=int16 */, %var_7391, %242)
  };
  %243(%var_7406, %var_7407, %var_7408, %var_7409, %var_7410, %var_7411) /* ty=(Tensor[(16, 14, 11), uint32], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(1680, 1), float32], Tensor[(1024), float64], Tensor[(1680), float32], Tensor[(1680), float32], Tensor[(3600), float32], int16, Tensor[(15, 1), float32], Tensor[(16, 14, 11), bool]) */
}

def @func_6752(%var_6710: Tensor[(5, 12, 14), float32], %var_6723: Tensor[(240), float32]) -> (Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) {
  %244 = cast(%var_6723, dtype="float32") /* ty=Tensor[(240), float32] */;
  %245 = reshape(%244, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float32] */;
  %246 = cast(%var_6710, dtype="float32") /* ty=Tensor[(5, 12, 14), float32] */;
  %247 = sinh(%246) /* ty=Tensor[(5, 12, 14), float32] */;
  %248 = cast(%247, dtype="float64") /* ty=Tensor[(5, 12, 14), float64] */;
  %249 = cast(%247, dtype="float32") /* ty=Tensor[(5, 12, 14), float32] */;
  %250 = @func_1228(%245) /* ty=Tensor[(?, 15, 16), uint8] */;
  %251 = tan(%248) /* ty=Tensor[(5, 12, 14), float64] */;
  %252 = rsqrt(%249) /* ty=Tensor[(5, 12, 14), float32] */;
  (%250, %var_6723, %251, %252)
}

def @func_3143(%var_3141: Tensor[(10, 5, 12), float32], %var_3142: Tensor[(10, 5, 12), float32]) -> Tensor[(10, 5, 12), bool] {
  @func_3139(%var_3141, %var_3142) /* ty=Tensor[(10, 5, 12), bool] */
}

def @func_2380(%var_2378: Tensor[(13, 5, 6), float64]) -> (Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) {
  @func_2377(%var_2378) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) */
}

def @func_15167(%var_15122: Tensor[(360), uint8], %var_15133: Tensor[(30), float32], %var_15143: Tensor[(390), float64], %var_15160: Tensor[(1008, 1), int8], %var_15163: Tensor[(1210), float64]) -> (Tensor[(3, 3, 2), float64], Tensor[(10, 3, 12), uint8], Tensor[(360), uint8], Tensor[(5, 1, 6), float32], Tensor[(30), float32], Tensor[(936), int8], Tensor[(294), float64], Tensor[(390), float64], Tensor[(2112, 420), float64], Tensor[(16, 7, 9), float64], Tensor[(1008, 1), int8], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) {
  %253 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %254 = cast(%var_15122, dtype="uint8") /* ty=Tensor[(360), uint8] */;
  %255 = reshape(%254, newshape=[10, 3, 12]) /* ty=Tensor[(10, 3, 12), uint8] */;
  %256 = @func_12713(%255) /* ty=(Tensor[(10, 3, 12), uint8],) */;
  %257 = cast(%var_15133, dtype="float32") /* ty=Tensor[(30), float32] */;
  %258 = cast(meta[relay.Constant][17] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %259 = reshape(%257, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
  %260 = reshape(%258, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %261 = @func_5717(%259, %260) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %262 = cast(meta[relay.Constant][19] /* ty=Tensor[(2112, 1), int16] */, dtype="int16") /* ty=Tensor[(2112, 1), int16] */;
  %263 = cast(meta[relay.Constant][18] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %265 = cast(%var_15143, dtype="float64") /* ty=Tensor[(390), float64] */;
  %266 = reshape(%262, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %267 = reshape(%263, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %268 = reshape(%264, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %269 = reshape(%265, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %270 = @func_8545(%266, %267, %268, %269) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */;
  %271 = %270.1;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(420), float64] */;
  %273 = cast(meta[relay.Constant][19] /* ty=Tensor[(2112, 1), int16] */, dtype="float64") /* ty=Tensor[(2112, 1), float64] */;
  %274 = cast(%var_15160, dtype="int8") /* ty=Tensor[(1008, 1), int8] */;
  %275 = cast(%var_15160, dtype="bool") /* ty=Tensor[(1008, 1), bool] */;
  %276 = reshape(%274, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int8] */;
  %277 = reshape(%275, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), bool] */;
  %278 = @func_7959(%276, %277) /* ty=(Tensor[(16, 7, 9), float64],) */;
  %279 = cast(%var_15163, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %280 = cast(%var_15163, dtype="float64") /* ty=Tensor[(1210), float64] */;
  %281 = reshape(%279, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %282 = reshape(%280, newshape=[11, 10, 11]) /* ty=Tensor[(11, 10, 11), float64] */;
  %283 = %253.1;
  %284 = %256.0;
  %285 = %261.0;
  %286 = power(%272, %273) /* ty=Tensor[(2112, 420), float64] */;
  %287 = %278.0;
  %288 = @func_9162(%281, %282) /* ty=Tensor[(11, 10, 11), float64] */;
  (%283, %284, %var_15122, %285, %var_15133, meta[relay.Constant][17] /* ty=Tensor[(936), int8] */, meta[relay.Constant][18] /* ty=Tensor[(294), float64] */, %var_15143, %286, %287, %var_15160, %288, %var_15163)
}

def @func_15567() -> (Tensor[(18), float64],) {
  @func_15565() /* ty=(Tensor[(18), float64],) */
}

def @func_1231(%var_1229: Tensor[(1, 15, 16), float32]) -> Tensor[(?, 15, 16), uint8] {
  @func_1228(%var_1229) /* ty=Tensor[(?, 15, 16), uint8] */
}

def @func_15511() -> Tensor[(18), float64] {
  %289 = fn () -> Tensor[(18), float64] {
    @func_15501() /* ty=Tensor[(18), float64] */
  };
  %289() /* ty=Tensor[(18), float64] */
}

def @func_10510(%var_10509: Tensor[(7, 1), float32]) -> Tensor[(7, ?), float32] {
  %294 = fn (%var_10496: Tensor[(7, 1), float32]) -> Tensor[(7, ?), float32] {
    %290 = cast(%var_10496, dtype="float32") /* ty=Tensor[(7, 1), float32] */;
    %291 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(7, 1), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %292 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 1), float32] */, dtype="float32") /* ty=Tensor[(7, 1), float32] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    mod(%292, %293) /* ty=Tensor[(7, ?), float32] */
  };
  %294(%var_10509) /* ty=Tensor[(7, ?), float32] */
}

def @func_11606(%var_11603: Tensor[(2, 9, 12), int8], %var_11604: Tensor[(2, 9, 12), int8], %var_11605: Tensor[(1680), float32]) -> (Tensor[(2, 9, 12), float64], Tensor[(294), float64], Tensor[(1024), float64], Tensor[(1680), float32]) {
  @func_11601(%var_11603, %var_11604, %var_11605) /* ty=(Tensor[(2, 9, 12), float64], Tensor[(294), float64], Tensor[(1024), float64], Tensor[(1680), float32]) */
}

def @func_15945(%var_15943: Tensor[(2, 12, 6), int16]) -> (Tensor[(2, 12, 6), int16],) {
  @func_15942(%var_15943) /* ty=(Tensor[(2, 12, 6), int16],) */
}

def @func_12043(%var_12042: Tensor[(9, 3, 8), float32]) -> Tensor[(9, 3, 8), float32] {
  %296 = fn (%var_12015: Tensor[(9, 3, 8), float32]) -> Tensor[(9, 3, 8), float32] {
    %295 = cast(%var_12015, dtype="float32") /* ty=Tensor[(9, 3, 8), float32] */;
    sigmoid(%295) /* ty=Tensor[(9, 3, 8), float32] */
  };
  %296(%var_12042) /* ty=Tensor[(9, 3, 8), float32] */
}

def @func_15591() -> (Tensor[(18), float64],) {
  @func_15589() /* ty=(Tensor[(18), float64],) */
}

def @func_15013() -> (Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) {
  @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */
}

def @func_4953(%var_4950: Tensor[(3, 7, 14), float64], %var_4951: Tensor[(3, 7, 14), float64], %var_4952: Tensor[(936), int8]) -> (Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  @func_4948(%var_4950, %var_4951, %var_4952) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */
}

def @func_16108(%var_16107: Tensor[(2, 420), float64]) -> (Tensor[(18), float64], Tensor[(10, 6, 14), float64], Tensor[(2, 420), float64]) {
  %302 = fn (%var_16102: Tensor[(2, 420), float64]) -> (Tensor[(18), float64], Tensor[(10, 6, 14), float64], Tensor[(2, 420), float64]) {
    %297 = @func_15920() /* ty=(Tensor[(18), float64],) */;
    %298 = cast(%var_16102, dtype="float64") /* ty=Tensor[(2, 420), float64] */;
    %299 = reshape(%298, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
    %300 = %297.0;
    %301 = @func_6641(%299) /* ty=Tensor[(10, 6, 14), float64] */;
    (%300, %301, %var_16102)
  };
  %302(%var_16107) /* ty=(Tensor[(18), float64], Tensor[(10, 6, 14), float64], Tensor[(2, 420), float64]) */
}

def @func_6695(%var_6693: Tensor[(11, 14, 6), float32]) -> Tensor[(11, 14, 6), float32] {
  @func_6692(%var_6693) /* ty=Tensor[(11, 14, 6), float32] */
}

def @func_4863(%var_4861: Tensor[(10, 12, 14), float32], %var_4862: Tensor[(936), int8]) -> (Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %312 = fn (%var_4797: Tensor[(10, 12, 14), float32], %var_4846: Tensor[(936), int8]) -> (Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
    %303 = cast(%var_4797, dtype="float32") /* ty=Tensor[(10, 12, 14), float32] */;
    %304 = acosh(%303) /* ty=Tensor[(10, 12, 14), float32] */;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(10, 12, 14), float32] */;
    %306 = cast(%var_4846, dtype="int8") /* ty=Tensor[(936), int8] */;
    %307 = cast(%var_4846, dtype="int8") /* ty=Tensor[(936), int8] */;
    %308 = reshape(%306, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
    %309 = reshape(%307, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
    %310 = cos(%305) /* ty=Tensor[(10, 12, 14), float32] */;
    %311 = @func_394(%308, %309) /* ty=Tensor[(13, 9, 8), int8] */;
    (%310, %311, %var_4846)
  };
  %312(%var_4861, %var_4862) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */
}

def @func_12849(%var_12834: Tensor[(12, 12, 12), float32], %var_12844: Tensor[(1200), float32]) -> (Tensor[(12, 12, 12), float32], Tensor[(8, 10, 15), float32], Tensor[(1200), float32]) {
  %313 = cast(%var_12834, dtype="float32") /* ty=Tensor[(12, 12, 12), float32] */;
  %314 = cast(%var_12844, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %315 = cast(%var_12844, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %316 = reshape(%314, newshape=[8, 10, 15]) /* ty=Tensor[(8, 10, 15), float32] */;
  %317 = reshape(%315, newshape=[8, 10, 15]) /* ty=Tensor[(8, 10, 15), float32] */;
  %318 = @func_3598(%316, %317) /* ty=(Tensor[(8, 10, 15), float32],) */;
  %319 = asin(%313) /* ty=Tensor[(12, 12, 12), float32] */;
  %320 = %318.0;
  (%319, %320, %var_12844)
}

def @func_5116(%var_5094: Tensor[(15, 1), float32]) -> (Tensor[(12, 13, 14), bool], Tensor[(13, 9, 8), int8], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15, 1), float32], Tensor[(12, 13, 14), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %321 = cast(meta[relay.Constant][22] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 14), bool] */;
  %322 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 14), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(meta[relay.Constant][23] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %326 = cast(meta[relay.Constant][23] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %327 = reshape(%325, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %328 = reshape(%326, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %329 = cast(%var_5094, dtype="float32") /* ty=Tensor[(15, 1), float32] */;
  %330 = reshape(%329, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
  %331 = cast(meta[relay.Constant][21] /* ty=Tensor[(12, 13, 14), uint64] */, dtype="float64") /* ty=Tensor[(12, 13, 14), float64] */;
  %332 = cast(meta[relay.Constant][24] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %334 = cast(meta[relay.Constant][23] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %335 = reshape(%332, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %336 = reshape(%333, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %337 = reshape(%334, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %338 = @func_4948(%335, %336, %337) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %339 = greater_equal(%323, %324) /* ty=Tensor[(12, 13, 14), bool] */;
  %340 = @func_394(%327, %328) /* ty=Tensor[(13, 9, 8), int8] */;
  %341 = @func_358(%330) /* ty=Tensor[(1, 3, 5), float32] */;
  %342 = log(%331) /* ty=Tensor[(12, 13, 14), float64] */;
  %343 = %338.0;
  (%339, %340, meta[relay.Constant][23] /* ty=Tensor[(936), int8] */, %341, %var_5094, %342, %343, meta[relay.Constant][24] /* ty=Tensor[(294), float64] */)
}

def @func_13592(%var_13587: Tensor[(14, 15, 3), uint16], %var_13588: Tensor[(14, 15, 3), uint16], %var_13589: Tensor[(1680, 1), float32], %var_13590: Tensor[(1024), float64], %var_13591: Tensor[(96), uint64]) -> (Tensor[(14, 15, 3), uint16], Tensor[(13, 9, 8), int8], Tensor[(1680, 1024), bool], Tensor[(1680, 1024), float64], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64], Tensor[(420), uint64], Tensor[(96), uint64], Tensor[(294), float64]) {
  @func_13585(%var_13587, %var_13588, %var_13589, %var_13590, %var_13591) /* ty=(Tensor[(14, 15, 3), uint16], Tensor[(13, 9, 8), int8], Tensor[(1680, 1024), bool], Tensor[(1680, 1024), float64], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64], Tensor[(420), uint64], Tensor[(96), uint64], Tensor[(294), float64]) */
}

def @func_15583() -> Tensor[(18), float64] {
  @func_15581() /* ty=Tensor[(18), float64] */
}

def @func_9165(%var_9163: Tensor[(11, 10, 11), float64], %var_9164: Tensor[(11, 10, 11), float64]) -> Tensor[(11, 10, 11), float64] {
  %348 = fn (%var_9150: Tensor[(11, 10, 11), float64], %var_9151: Tensor[(11, 10, 11), float64]) -> Tensor[(11, 10, 11), float64] {
    %344 = cast(%var_9151, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
    %345 = shape_of(%var_9150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%var_9150, dtype="float64") /* ty=Tensor[(11, 10, 11), float64] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_mod(%346, %347) /* ty=Tensor[(11, 10, 11), float64] */
  };
  %348(%var_9163, %var_9164) /* ty=Tensor[(11, 10, 11), float64] */
}

def @func_7962(%var_7960: Tensor[(16, 7, 9), int8], %var_7961: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), float64],) {
  %357 = fn (%var_7935: Tensor[(16, 7, 9), int8], %var_7951: Tensor[(16, 7, 9), bool]) -> (Tensor[(16, 7, 9), float64],) {
    %349 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 7, 9), int8] */, dtype="bool") /* ty=Tensor[(1, 7, 9), bool] */;
    %350 = cast(%var_7935, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
    %351 = less_equal(%349, %350) /* ty=Tensor[(16, 7, 9), bool] */;
    %352 = cast(%var_7951, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
    %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%351, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %356 = power(%354, %355) /* ty=Tensor[(16, 7, 9), float64] */;
    (%356,)
  };
  %357(%var_7960, %var_7961) /* ty=(Tensor[(16, 7, 9), float64],) */
}

def @func_15799() -> (Tensor[(3, 3, 2), float64],) {
  %358 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
  %359 = %358.1;
  (%359,)
}

def @func_13585(%var_13486: Tensor[(14, 15, 3), uint16], %var_13487: Tensor[(14, 15, 3), uint16], %var_13493: Tensor[(1680, 1), float32], %var_13544: Tensor[(1024), float64], %var_13580: Tensor[(96), uint64]) -> (Tensor[(14, 15, 3), uint16], Tensor[(13, 9, 8), int8], Tensor[(1680, 1024), bool], Tensor[(1680, 1024), float64], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64], Tensor[(420), uint64], Tensor[(96), uint64], Tensor[(294), float64]) {
  %360 = cast(%var_13487, dtype="uint16") /* ty=Tensor[(14, 15, 3), uint16] */;
  %361 = shape_of(%var_13486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%var_13486, dtype="uint16") /* ty=Tensor[(14, 15, 3), uint16] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %364 = cast(meta[relay.Constant][26] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %365 = cast(%var_13493, dtype="float32") /* ty=Tensor[(1680, 1), float32] */;
  %366 = reshape(%364, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
  %367 = reshape(%365, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %368 = @func_6222(%366, %367) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %369 = cast(meta[relay.Constant][26] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %370 = cosh(%369) /* ty=Tensor[(1024), float64] */;
  %371 = cast(%370, dtype="int32") /* ty=Tensor[(1024), int32] */;
  %372 = cast(%var_13493, dtype="int32") /* ty=Tensor[(1680, 1), int32] */;
  %373 = multiply(%371, %372) /* ty=Tensor[(1680, 1024), int32] */;
  %374 = cast(%370, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %375 = cast(%373, dtype="bool") /* ty=Tensor[(1680, 1024), bool] */;
  %376 = cast(%var_13544, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %377 = shape_of(%370, dtype="int32") /* ty=Tensor[(1), int32] */;
  %378 = cast(%370, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?), bool] */;
  %380 = equal(%378, %379) /* ty=Tensor[(1024), bool] */;
  %381 = cast(%373, dtype="uint64") /* ty=Tensor[(1680, 1024), uint64] */;
  %382 = cast(%380, dtype="uint64") /* ty=Tensor[(1024), uint64] */;
  %383 = minimum(%381, %382) /* ty=Tensor[(1680, 1024), uint64] */;
  %384 = cast(%383, dtype="float64") /* ty=Tensor[(1680, 1024), float64] */;
  %385 = shape_of(%373, dtype="int32") /* ty=Tensor[(2), int32] */;
  %386 = cast(%373, dtype="float64") /* ty=Tensor[(1680, 1024), float64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %388 = cast(meta[relay.Constant][27] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %389 = reshape(%388, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %390 = cast(meta[relay.Constant][28] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %391 = cast(meta[relay.Constant][29] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %392 = reshape(%390, newshape=[]) /* ty=uint64 */;
  %393 = reshape(%391, newshape=[14, 15, 2]) /* ty=Tensor[(14, 15, 2), uint64] */;
  %394 = @func_7026(%392, %393) /* ty=(Tensor[(14, 15, 2), uint64],) */;
  %395 = cast(%var_13580, dtype="uint64") /* ty=Tensor[(96), uint64] */;
  %396 = cast(meta[relay.Constant][30] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %397 = cast(meta[relay.Constant][29] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
  %398 = reshape(%395, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint64] */;
  %399 = reshape(%396, newshape=[7, 42]) /* ty=Tensor[(7, 42), float64] */;
  %400 = reshape(%397, newshape=[420]) /* ty=Tensor[(420), uint64] */;
  %401 = @func_8037(%398, %399, %400) /* ty=(Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) */;
  %402 = right_shift(%362, %363) /* ty=Tensor[(14, 15, 3), uint16] */;
  %403 = %368.1;
  %404 = greater(%374, %375) /* ty=Tensor[(1680, 1024), bool] */;
  %405 = mod(%386, %387) /* ty=Tensor[(1680, 1024), float64] */;
  %406 = @func_6641(%389) /* ty=Tensor[(10, 6, 14), float64] */;
  %407 = %394.0;
  %408 = %401.6;
  (%402, %403, %404, %405, %406, meta[relay.Constant][27] /* ty=Tensor[(840), float64] */, %407, meta[relay.Constant][28] /* ty=uint64 */, meta[relay.Constant][29] /* ty=Tensor[(420), uint64] */, %408, %var_13580, meta[relay.Constant][30] /* ty=Tensor[(294), float64] */)
}

def @func_15801() -> (Tensor[(3, 3, 2), float64],) {
  @func_15799() /* ty=(Tensor[(3, 3, 2), float64],) */
}

def @func_6226(%var_6224: Tensor[(8, 8, 16), float64], %var_6225: Tensor[(1680, 1), float32]) -> (Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  @func_6222(%var_6224, %var_6225) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */
}

def @func_11862(%var_11860: Tensor[(16, 2, 2), float32], %var_11861: Tensor[(12, 70), float64]) -> (Tensor[(16, 2, 2), float32], Tensor[(10, 5, 12), bool], Tensor[(600), float32], Tensor[(10, 6, 14), float64], Tensor[(12, 70), float64]) {
  %419 = fn (%var_11845: Tensor[(16, 2, 2), float32], %var_11857: Tensor[(12, 70), float64]) -> (Tensor[(16, 2, 2), float32], Tensor[(10, 5, 12), bool], Tensor[(600), float32], Tensor[(10, 6, 14), float64], Tensor[(12, 70), float64]) {
    %409 = cast(%var_11845, dtype="float32") /* ty=Tensor[(16, 2, 2), float32] */;
    %410 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %411 = cast(meta[relay.Constant][31] /* ty=Tensor[(600), float32] */, dtype="float32") /* ty=Tensor[(600), float32] */;
    %412 = reshape(%410, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
    %413 = reshape(%411, newshape=[10, 5, 12]) /* ty=Tensor[(10, 5, 12), float32] */;
    %414 = cast(%var_11857, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
    %415 = reshape(%414, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
    %416 = log2(%409) /* ty=Tensor[(16, 2, 2), float32] */;
    %417 = @func_3139(%412, %413) /* ty=Tensor[(10, 5, 12), bool] */;
    %418 = @func_6641(%415) /* ty=Tensor[(10, 6, 14), float64] */;
    (%416, %417, meta[relay.Constant][31] /* ty=Tensor[(600), float32] */, %418, %var_11857)
  };
  %419(%var_11860, %var_11861) /* ty=(Tensor[(16, 2, 2), float32], Tensor[(10, 5, 12), bool], Tensor[(600), float32], Tensor[(10, 6, 14), float64], Tensor[(12, 70), float64]) */
}

def @func_12965(%var_12964: Tensor[(2, 2, 12), int16]) -> (Tensor[(2, 2, 12), int16], Tensor[(3, 3, 2), float64], Tensor[(18, 1), float64]) {
  %430 = fn (%var_12933: Tensor[(2, 2, 12), int16]) -> (Tensor[(2, 2, 12), int16], Tensor[(3, 3, 2), float64], Tensor[(18, 1), float64]) {
    %420 = cast(%var_12933, dtype="int16") /* ty=Tensor[(2, 2, 12), int16] */;
    %421 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 2, 12), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %422 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 2, 12), int16] */, dtype="int16") /* ty=Tensor[(2, 2, 12), int16] */;
    %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %424 = cast(meta[relay.Constant][33] /* ty=Tensor[(18, 1), float64] */, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
    %425 = cast(meta[relay.Constant][33] /* ty=Tensor[(18, 1), float64] */, dtype="float64") /* ty=Tensor[(18, 1), float64] */;
    %426 = reshape(%424, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
    %427 = reshape(%425, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
    %428 = logical_xor(%422, %423) /* ty=Tensor[(2, 2, 12), int16] */;
    %429 = @func_11307(%426, %427) /* ty=Tensor[(3, 3, 2), float64] */;
    (%428, %429, meta[relay.Constant][33] /* ty=Tensor[(18, 1), float64] */)
  };
  %430(%var_12964) /* ty=(Tensor[(2, 2, 12), int16], Tensor[(3, 3, 2), float64], Tensor[(18, 1), float64]) */
}

def @func_13174(%var_13171: Tensor[(6, 2, 9), float32], %var_13172: Tensor[(6, 2, 9), float32], %var_13173: Tensor[(1, 936), int8]) -> (Tensor[(6, 2, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(22, 96), int16], Tensor[(294), float64], Tensor[(1, 936), int8], Tensor[(390), float64]) {
  @func_13169(%var_13171, %var_13172, %var_13173) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(22, 96), int16], Tensor[(294), float64], Tensor[(1, 936), int8], Tensor[(390), float64]) */
}

def @func_10952(%var_10947: uint64, %var_10948: Tensor[(15, 4, 11), uint64], %var_10949: Tensor[(294), float64], %var_10950: Tensor[(5, 78), float64], %var_10951: Tensor[(36, 26), int8]) -> (Tensor[(15, 4, 11), uint64], Tensor[(13, 5, 6), bool], Tensor[(2112), int16], Tensor[(294), float64], Tensor[(5, 78), float64], Tensor[(36, 26), float64], Tensor[(36, 26), bool]) {
  %451 = fn (%var_10915: uint64, %var_10916: Tensor[(15, 4, 11), uint64], %var_10925: Tensor[(294), float64], %var_10927: Tensor[(5, 78), float64], %var_10941: Tensor[(36, 26), int8]) -> (Tensor[(15, 4, 11), uint64], Tensor[(13, 5, 6), bool], Tensor[(2112), int16], Tensor[(294), float64], Tensor[(5, 78), float64], Tensor[(36, 26), float64], Tensor[(36, 26), bool]) {
    %431 = cast(%var_10915, dtype="uint64") /* ty=uint64 */;
    %432 = cast(%var_10916, dtype="uint64") /* ty=Tensor[(15, 4, 11), uint64] */;
    %433 = cast(meta[relay.Constant][34] /* ty=Tensor[(2112), int16] */, dtype="int16") /* ty=Tensor[(2112), int16] */;
    %434 = cast(%var_10925, dtype="float64") /* ty=Tensor[(294), float64] */;
    %435 = cast(meta[relay.Constant][35] /* ty=Tensor[(36, 26), int8] */, dtype="int8") /* ty=Tensor[(36, 26), int8] */;
    %436 = cast(%var_10927, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
    %437 = reshape(%433, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
    %438 = reshape(%434, newshape=[294]) /* ty=Tensor[(294), float64] */;
    %439 = reshape(%435, newshape=[936]) /* ty=Tensor[(936), int8] */;
    %440 = reshape(%436, newshape=[390]) /* ty=Tensor[(390), float64] */;
    %441 = @func_8545(%437, %438, %439, %440) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */;
    %442 = cast(meta[relay.Constant][35] /* ty=Tensor[(36, 26), int8] */, dtype="float64") /* ty=Tensor[(36, 26), float64] */;
    %443 = cast(%var_10941, dtype="bool") /* ty=Tensor[(36, 26), bool] */;
    %444 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(36, 26), int8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %445 = cast(meta[relay.Constant][35] /* ty=Tensor[(36, 26), int8] */, dtype="bool") /* ty=Tensor[(36, 26), bool] */;
    %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %447 = maximum(%431, %432) /* ty=Tensor[(15, 4, 11), uint64] */;
    %448 = %441.13;
    %449 = atan(%442) /* ty=Tensor[(36, 26), float64] */;
    %450 = equal(%445, %446) /* ty=Tensor[(36, 26), bool] */;
    (%447, %448, meta[relay.Constant][34] /* ty=Tensor[(2112), int16] */, %var_10925, %var_10927, %449, %450)
  };
  %451(%var_10947, %var_10948, %var_10949, %var_10950, %var_10951) /* ty=(Tensor[(15, 4, 11), uint64], Tensor[(13, 5, 6), bool], Tensor[(2112), int16], Tensor[(294), float64], Tensor[(5, 78), float64], Tensor[(36, 26), float64], Tensor[(36, 26), bool]) */
}

def @func_3139(%var_3126: Tensor[(10, 5, 12), float32], %var_3127: Tensor[(10, 5, 12), float32]) -> Tensor[(10, 5, 12), bool] {
  %452 = cast(%var_3127, dtype="bool") /* ty=Tensor[(10, 5, 12), bool] */;
  %453 = shape_of(%var_3126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_3126, dtype="bool") /* ty=Tensor[(10, 5, 12), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%454, %455) /* ty=Tensor[(10, 5, 12), bool] */
}

def @func_12402(%var_12401: Tensor[(10, 12, 1), float64]) -> Tensor[(10, 12, 1), float64] {
  %457 = fn (%var_12394: Tensor[(10, 12, 1), float64]) -> Tensor[(10, 12, 1), float64] {
    %456 = cast(%var_12394, dtype="float64") /* ty=Tensor[(10, 12, 1), float64] */;
    log(%456) /* ty=Tensor[(10, 12, 1), float64] */
  };
  %457(%var_12401) /* ty=Tensor[(10, 12, 1), float64] */
}

def @func_11601(%var_11575: Tensor[(2, 9, 12), int8], %var_11576: Tensor[(2, 9, 12), int8], %var_11591: Tensor[(1680), float32]) -> (Tensor[(2, 9, 12), float64], Tensor[(294), float64], Tensor[(1024), float64], Tensor[(1680), float32]) {
  %458 = cast(%var_11576, dtype="bool") /* ty=Tensor[(2, 9, 12), bool] */;
  %459 = shape_of(%var_11575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(%var_11575, dtype="bool") /* ty=Tensor[(2, 9, 12), bool] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %462 = equal(%460, %461) /* ty=Tensor[(2, 9, 12), bool] */;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(2, 9, 12), float64] */;
  %464 = cast(meta[relay.Constant][36] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %465 = cast(%var_11591, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %466 = reshape(%464, newshape=[8, 8, 16]) /* ty=Tensor[(8, 8, 16), float64] */;
  %467 = reshape(%465, newshape=[1680, 1]) /* ty=Tensor[(1680, 1), float32] */;
  %468 = @func_6222(%466, %467) /* ty=(Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %469 = cos(%463) /* ty=Tensor[(2, 9, 12), float64] */;
  %470 = %468.5;
  (%469, %470, meta[relay.Constant][36] /* ty=Tensor[(1024), float64] */, %var_11591)
}

def @func_14299(%var_14297: Tensor[(16, 13, 11), float64], %var_14298: Tensor[(840), float32]) -> (Tensor[(16, 13, 11), uint64], Tensor[(16, 13, 11), float64], Tensor[(16, 13, 11), float64], Tensor[(240), float32], Tensor[(840), float32], Tensor[(240), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  @func_14295(%var_14297, %var_14298) /* ty=(Tensor[(16, 13, 11), uint64], Tensor[(16, 13, 11), float64], Tensor[(16, 13, 11), float64], Tensor[(240), float32], Tensor[(840), float32], Tensor[(240), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */
}

def @func_13854(%var_13851: Tensor[(12, 2, 12), float64], %var_13852: Tensor[(12, 2, 12), float64], %var_13853: Tensor[(936), int8]) -> (Tensor[(12, 2, 12), float64], Tensor[(936), int8], Tensor[(10, 3), float32], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15), float32]) {
  %485 = fn (%var_13813: Tensor[(12, 2, 12), float64], %var_13814: Tensor[(12, 2, 12), float64], %var_13832: Tensor[(936), int8]) -> (Tensor[(12, 2, 12), float64], Tensor[(936), int8], Tensor[(10, 3), float32], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15), float32]) {
    %471 = cast(%var_13814, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %472 = shape_of(%var_13813, dtype="int32") /* ty=Tensor[(3), int32] */;
    %473 = cast(%var_13813, dtype="float64") /* ty=Tensor[(12, 2, 12), float64] */;
    %474 = dyn.reshape(%471, %472, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %475 = cast(meta[relay.Constant][37] /* ty=Tensor[(10, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
    %476 = cast(%var_13832, dtype="int8") /* ty=Tensor[(936), int8] */;
    %477 = reshape(%475, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
    %478 = reshape(%476, newshape=[936]) /* ty=Tensor[(936), int8] */;
    %479 = @func_5717(%477, %478) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
    %480 = cast(meta[relay.Constant][38] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %481 = reshape(%480, newshape=[1, 3, 5]) /* ty=Tensor[(1, 3, 5), float32] */;
    %482 = mod(%473, %474) /* ty=Tensor[(12, 2, 12), float64] */;
    %483 = %479.2;
    %484 = @func_358(%481) /* ty=Tensor[(1, 3, 5), float32] */;
    (%482, %483, meta[relay.Constant][37] /* ty=Tensor[(10, 3), float32] */, %var_13832, %484, meta[relay.Constant][38] /* ty=Tensor[(15), float32] */)
  };
  %485(%var_13851, %var_13852, %var_13853) /* ty=(Tensor[(12, 2, 12), float64], Tensor[(936), int8], Tensor[(10, 3), float32], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15), float32]) */
}

def @func_7077(%var_7075: Tensor[(5, 6, 8), float32]) -> (Tensor[(?, 15, 16), uint8], Tensor[(5, 6, 8), float32]) {
  @func_7074(%var_7075) /* ty=(Tensor[(?, 15, 16), uint8], Tensor[(5, 6, 8), float32]) */
}

def @func_9938(%var_9934: Tensor[(9, 10, 2), float32]) -> Tensor[(9, 10, 2), float32] {
  %486 = cast(%var_9934, dtype="float32") /* ty=Tensor[(9, 10, 2), float32] */;
  %487 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(9, 10, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(meta[relay.Constant][39] /* ty=Tensor[(9, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 2), float32] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%488, %489) /* ty=Tensor[(9, 10, 2), float32] */
}

def @func_7074(%var_7064: Tensor[(5, 6, 8), float32]) -> (Tensor[(?, 15, 16), uint8], Tensor[(5, 6, 8), float32]) {
  %490 = cast(%var_7064, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %491 = reshape(%490, newshape=[1, 15, 16]) /* ty=Tensor[(1, 15, 16), float32] */;
  %492 = cast(%var_7064, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %493 = log10(%492) /* ty=Tensor[(5, 6, 8), float32] */;
  %494 = cast(%493, dtype="float32") /* ty=Tensor[(5, 6, 8), float32] */;
  %495 = @func_1228(%491) /* ty=Tensor[(?, 15, 16), uint8] */;
  %496 = asin(%494) /* ty=Tensor[(5, 6, 8), float32] */;
  (%495, %496)
}

def @func_12715(%var_12714: Tensor[(10, 3, 12), uint8]) -> (Tensor[(10, 3, 12), uint8],) {
  %502 = fn (%var_12704: Tensor[(10, 3, 12), uint8]) -> (Tensor[(10, 3, 12), uint8],) {
    %497 = cast(%var_12704, dtype="uint8") /* ty=Tensor[(10, 3, 12), uint8] */;
    %498 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(10, 3, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %499 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 3, 12), uint8] */, dtype="uint8") /* ty=Tensor[(10, 3, 12), uint8] */;
    %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %501 = bitwise_xor(%499, %500) /* ty=Tensor[(10, 3, 12), uint8] */;
    (%501,)
  };
  %502(%var_12714) /* ty=(Tensor[(10, 3, 12), uint8],) */
}

def @func_2743(%var_2676: Tensor[(2, 15, 8), float32], %var_2736: Tensor[(15), float32]) -> (Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(15), float32]) {
  %503 = cast(%var_2676, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %504 = cast(%var_2676, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %505 = atanh(%504) /* ty=Tensor[(2, 15, 8), float32] */;
  %506 = cast(%505, dtype="float32") /* ty=Tensor[(2, 15, 8), float32] */;
  %507 = cast(meta[relay.Constant][41] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %508 = cast(meta[relay.Constant][42] /* ty=Tensor[(72), int16] */, dtype="int16") /* ty=Tensor[(72), int16] */;
  %509 = cast(%var_2736, dtype="float32") /* ty=Tensor[(15), float32] */;
  %510 = reshape(%507, newshape=[]) /* ty=int16 */;
  %511 = reshape(%508, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), int16] */;
  %512 = reshape(%509, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %513 = @func_2003(%510, %511, %512) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */;
  %514 = sin(%503) /* ty=Tensor[(2, 15, 8), float32] */;
  %515 = cosh(%506) /* ty=Tensor[(2, 15, 8), float32] */;
  %516 = %513.4;
  (%514, %515, %516, meta[relay.Constant][41] /* ty=int16 */, meta[relay.Constant][42] /* ty=Tensor[(72), int16] */, %var_2736)
}

def @func_12853(%var_12851: Tensor[(12, 12, 12), float32], %var_12852: Tensor[(1200), float32]) -> (Tensor[(12, 12, 12), float32], Tensor[(8, 10, 15), float32], Tensor[(1200), float32]) {
  @func_12849(%var_12851, %var_12852) /* ty=(Tensor[(12, 12, 12), float32], Tensor[(8, 10, 15), float32], Tensor[(1200), float32]) */
}

def @func_8132(%var_8130: Tensor[(15, 3, 9), float64], %var_8131: Tensor[(936), int8]) -> (Tensor[(15, 3, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  @func_8128(%var_8130, %var_8131) /* ty=(Tensor[(15, 3, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */
}

def @func_2747(%var_2745: Tensor[(2, 15, 8), float32], %var_2746: Tensor[(15), float32]) -> (Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(15), float32]) {
  @func_2743(%var_2745, %var_2746) /* ty=(Tensor[(2, 15, 8), float32], Tensor[(2, 15, 8), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(15), float32]) */
}

def @func_15589() -> (Tensor[(18), float64],) {
  %517 = @func_15510() /* ty=Tensor[(18), float64] */;
  (%517,)
}

def @func_14605(%var_14591: Tensor[(2, 15, 11), bool], %var_14592: Tensor[(2, 15, 11), bool]) -> Tensor[(2, 15, 11), bool] {
  %518 = cast(%var_14592, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %519 = shape_of(%var_14591, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%var_14591, dtype="bool") /* ty=Tensor[(2, 15, 11), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%520, %521) /* ty=Tensor[(2, 15, 11), bool] */
}

def @func_360(%var_359: Tensor[(1, 3, 5), float32]) -> Tensor[(1, 3, 5), float32] {
  %523 = fn (%var_352: Tensor[(1, 3, 5), float32]) -> Tensor[(1, 3, 5), float32] {
    %522 = cast(%var_352, dtype="float32") /* ty=Tensor[(1, 3, 5), float32] */;
    sinh(%522) /* ty=Tensor[(1, 3, 5), float32] */
  };
  %523(%var_359) /* ty=Tensor[(1, 3, 5), float32] */
}

def @func_8550(%var_8546: Tensor[(12, 16, 11), int16], %var_8547: Tensor[(294), float64], %var_8548: Tensor[(936), int8], %var_8549: Tensor[(390), float64]) -> (Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) {
  %563 = fn (%var_8439: Tensor[(12, 16, 11), int16], %var_8473: Tensor[(294), float64], %var_8482: Tensor[(936), int8], %var_8518: Tensor[(390), float64]) -> (Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) {
    %524 = cast(meta[relay.Constant][43] /* ty=Tensor[(12, 16, 11), int16] */, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
    %525 = shape_of(%var_8439, dtype="int32") /* ty=Tensor[(3), int32] */;
    %526 = cast(%var_8439, dtype="int16") /* ty=Tensor[(12, 16, 11), int16] */;
    %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %528 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 48), uint64] */, dtype="uint64") /* ty=Tensor[(2, 48), uint64] */;
    %529 = cast(%var_8473, dtype="float64") /* ty=Tensor[(294), float64] */;
    %530 = cast(meta[relay.Constant][45] /* ty=Tensor[(420), uint64] */, dtype="uint64") /* ty=Tensor[(420), uint64] */;
    %531 = reshape(%528, newshape=[8, 4, 3]) /* ty=Tensor[(8, 4, 3), uint64] */;
    %532 = reshape(%529, newshape=[7, 42]) /* ty=Tensor[(7, 42), float64] */;
    %533 = reshape(%530, newshape=[420]) /* ty=Tensor[(420), uint64] */;
    %534 = @func_8037(%531, %532, %533) /* ty=(Tensor[(8, 4, 3), uint64], Tensor[(936), int8], Tensor[(7, 42), float64], Tensor[(936), int8], Tensor[(14, 15, 2), uint64], uint64, Tensor[(420), uint64]) */;
    %535 = cast(meta[relay.Constant][46] /* ty=Tensor[(30), float32] */, dtype="float32") /* ty=Tensor[(30), float32] */;
    %536 = cast(%var_8482, dtype="int8") /* ty=Tensor[(936), int8] */;
    %537 = reshape(%535, newshape=[5, 1, 6]) /* ty=Tensor[(5, 1, 6), float32] */;
    %538 = reshape(%536, newshape=[936]) /* ty=Tensor[(936), int8] */;
    %539 = @func_5717(%537, %538) /* ty=(Tensor[(5, 1, 6), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
    %540 = cast(%var_8473, dtype="float64") /* ty=Tensor[(294), float64] */;
    %541 = cast(%var_8473, dtype="float64") /* ty=Tensor[(294), float64] */;
    %542 = cast(%var_8482, dtype="int8") /* ty=Tensor[(936), int8] */;
    %543 = reshape(%540, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %544 = reshape(%541, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
    %545 = reshape(%542, newshape=[936]) /* ty=Tensor[(936), int8] */;
    %546 = @func_4948(%543, %544, %545) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
    %547 = cast(meta[relay.Constant][47] /* ty=int16 */, dtype="int16") /* ty=int16 */;
    %548 = cast(meta[relay.Constant][48] /* ty=Tensor[(72), int16] */, dtype="int16") /* ty=Tensor[(72), int16] */;
    %549 = cast(meta[relay.Constant][49] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
    %550 = reshape(%547, newshape=[]) /* ty=int16 */;
    %551 = reshape(%548, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), int16] */;
    %552 = reshape(%549, newshape=[15]) /* ty=Tensor[(15), float32] */;
    %553 = @func_2003(%550, %551, %552) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */;
    %554 = cast(%var_8518, dtype="float64") /* ty=Tensor[(390), float64] */;
    %555 = reshape(%554, newshape=[13, 5, 6]) /* ty=Tensor[(13, 5, 6), float64] */;
    %556 = @func_2377(%555) /* ty=(Tensor[(13, 5, 6), float32], Tensor[(13, 5, 6), bool]) */;
    %557 = right_shift(%526, %527) /* ty=Tensor[(12, 16, 11), int16] */;
    %558 = %534.6;
    %559 = %539.1;
    %560 = %546.1;
    %561 = %553.2;
    %562 = %556.1;
    (%557, %558, meta[relay.Constant][44] /* ty=Tensor[(2, 48), uint64] */, %var_8473, meta[relay.Constant][45] /* ty=Tensor[(420), uint64] */, %559, meta[relay.Constant][46] /* ty=Tensor[(30), float32] */, %var_8482, %560, %561, meta[relay.Constant][47] /* ty=int16 */, meta[relay.Constant][48] /* ty=Tensor[(72), int16] */, meta[relay.Constant][49] /* ty=Tensor[(15), float32] */, %562, %var_8518)
  };
  %563(%var_8546, %var_8547, %var_8548, %var_8549) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */
}

def @func_5119(%var_5117: Tensor[(15, 1), float32]) -> (Tensor[(12, 13, 14), bool], Tensor[(13, 9, 8), int8], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15, 1), float32], Tensor[(12, 13, 14), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  @func_5116(%var_5117) /* ty=(Tensor[(12, 13, 14), bool], Tensor[(13, 9, 8), int8], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15, 1), float32], Tensor[(12, 13, 14), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */
}

def @func_13169(%var_13124: Tensor[(6, 2, 9), float32], %var_13125: Tensor[(6, 2, 9), float32], %var_13151: Tensor[(1, 936), int8]) -> (Tensor[(6, 2, 9), float64], Tensor[(13, 9, 8), int8], Tensor[(22, 96), int16], Tensor[(294), float64], Tensor[(1, 936), int8], Tensor[(390), float64]) {
  %564 = cast(%var_13125, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
  %565 = shape_of(%var_13124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %566 = cast(%var_13124, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
  %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %568 = power(%566, %567) /* ty=Tensor[(6, 2, 9), float32] */;
  %569 = cast(%568, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
  %570 = cast(meta[relay.Constant][50] /* ty=Tensor[(22, 96), int16] */, dtype="int16") /* ty=Tensor[(22, 96), int16] */;
  %571 = cast(meta[relay.Constant][51] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %572 = cast(%var_13151, dtype="int8") /* ty=Tensor[(1, 936), int8] */;
  %573 = cast(meta[relay.Constant][52] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %574 = reshape(%570, newshape=[12, 16, 11]) /* ty=Tensor[(12, 16, 11), int16] */;
  %575 = reshape(%571, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %576 = reshape(%572, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %577 = reshape(%573, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %578 = @func_8545(%574, %575, %576, %577) /* ty=(Tensor[(12, 16, 11), int16], Tensor[(420), uint64], Tensor[(2, 48), uint64], Tensor[(294), float64], Tensor[(420), uint64], Tensor[(13, 9, 8), int8], Tensor[(30), float32], Tensor[(936), int8], Tensor[(13, 9, 8), int8], Tensor[(15), float32], int16, Tensor[(72), int16], Tensor[(15), float32], Tensor[(13, 5, 6), bool], Tensor[(390), float64]) */;
  %579 = cos(%569) /* ty=Tensor[(6, 2, 9), float64] */;
  %580 = %578.8;
  (%579, %580, meta[relay.Constant][50] /* ty=Tensor[(22, 96), int16] */, meta[relay.Constant][51] /* ty=Tensor[(294), float64] */, %var_13151, meta[relay.Constant][52] /* ty=Tensor[(390), float64] */)
}

def @func_4948(%var_4918: Tensor[(3, 7, 14), float64], %var_4927: Tensor[(3, 7, 14), float64], %var_4941: Tensor[(936), int8]) -> (Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %581 = cast(%var_4918, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %582 = atan(%581) /* ty=Tensor[(3, 7, 14), float64] */;
  %583 = cast(%var_4927, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
  %585 = cast(%582, dtype="float64") /* ty=Tensor[(3, 7, 14), float64] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %587 = cast(%var_4941, dtype="int8") /* ty=Tensor[(936), int8] */;
  %588 = cast(%var_4941, dtype="int8") /* ty=Tensor[(936), int8] */;
  %589 = reshape(%587, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %590 = reshape(%588, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %591 = divide(%585, %586) /* ty=Tensor[(3, 7, 14), float64] */;
  %592 = @func_394(%589, %590) /* ty=Tensor[(13, 9, 8), int8] */;
  (%591, %592, %var_4941)
}

def @func_15554() -> (Tensor[(18), float64],) {
  %594 = fn () -> (Tensor[(18), float64],) {
    %593 = @func_15501() /* ty=Tensor[(18), float64] */;
    (%593,)
  };
  %594() /* ty=(Tensor[(18), float64],) */
}

def @func_14922(%var_14919: Tensor[(9, 8, 1), float64], %var_14920: Tensor[(12, 18), float32], %var_14921: Tensor[(840, 1), float64]) -> (Tensor[(9, 3, 8), float32], Tensor[(12, 18), float32], Tensor[(10, 6, 14), float64], Tensor[(840, 1), float64], Tensor[(9, 8, ?), float64]) {
  %613 = fn (%var_14879: Tensor[(9, 8, 1), float64], %var_14894: Tensor[(12, 18), float32], %var_14907: Tensor[(840, 1), float64]) -> (Tensor[(9, 3, 8), float32], Tensor[(12, 18), float32], Tensor[(10, 6, 14), float64], Tensor[(840, 1), float64], Tensor[(9, 8, ?), float64]) {
    %595 = cast(%var_14894, dtype="float32") /* ty=Tensor[(12, 18), float32] */;
    %596 = reshape(%595, newshape=[9, 3, 8]) /* ty=Tensor[(9, 3, 8), float32] */;
    %597 = cast(%var_14907, dtype="float64") /* ty=Tensor[(840, 1), float64] */;
    %598 = reshape(%597, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
    %599 = cast(%var_14879, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
    %600 = log10(%599) /* ty=Tensor[(9, 8, 1), float64] */;
    %601 = cast(%var_14879, dtype="bool") /* ty=Tensor[(9, 8, 1), bool] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%600, dtype="bool") /* ty=Tensor[(9, 8, 1), bool] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %605 = equal(%603, %604) /* ty=Tensor[(9, 8, ?), bool] */;
    %606 = cast(%600, dtype="float64") /* ty=Tensor[(9, 8, 1), float64] */;
    %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%605, dtype="float64") /* ty=Tensor[(9, 8, ?), float64] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %610 = @func_12041(%596) /* ty=Tensor[(9, 3, 8), float32] */;
    %611 = @func_6641(%598) /* ty=Tensor[(10, 6, 14), float64] */;
    %612 = power(%608, %609) /* ty=Tensor[(9, 8, ?), float64] */;
    (%610, %var_14894, %611, %var_14907, %612)
  };
  %613(%var_14919, %var_14920, %var_14921) /* ty=(Tensor[(9, 3, 8), float32], Tensor[(12, 18), float32], Tensor[(10, 6, 14), float64], Tensor[(840, 1), float64], Tensor[(9, 8, ?), float64]) */
}

def @func_15044(%var_15043: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), float64] {
  %620 = fn (%var_15029: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), float64] {
    %614 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
    %615 = %614.1;
    %616 = cast(%var_15029, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
    %618 = cast(%615, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    mod(%618, %619) /* ty=Tensor[(3, 3, 2), float64] */
  };
  %620(%var_15043) /* ty=Tensor[(3, 3, 2), float64] */
}

def @func_9941(%var_9939: Tensor[(9, 10, 2), float32]) -> Tensor[(9, 10, 2), float32] {
  @func_9938(%var_9939) /* ty=Tensor[(9, 10, 2), float32] */
}

def @func_15750(%var_15747: Tensor[(72), float64], %var_15748: Tensor[(12, 70), float64], %var_15749: Tensor[(10, 12, 216), float64]) -> (Tensor[(18), float64], Tensor[(72), float64], Tensor[(12, 70), float64], Tensor[(10, 12, 216), bool], Tensor[(9, 8, 120), int32]) {
  %645 = fn (%var_15691: Tensor[(72), float64], %var_15693: Tensor[(12, 70), float64], %var_15726: Tensor[(10, 12, 216), float64]) -> (Tensor[(18), float64], Tensor[(72), float64], Tensor[(12, 70), float64], Tensor[(10, 12, 216), bool], Tensor[(9, 8, 120), int32]) {
    %621 = @func_15565() /* ty=(Tensor[(18), float64],) */;
    %622 = cast(meta[relay.Constant][54] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
    %623 = reshape(%622, newshape=[10, 12, 1]) /* ty=Tensor[(10, 12, 1), float64] */;
    %624 = @func_12400(%623) /* ty=Tensor[(10, 12, 1), float64] */;
    %625 = cast(meta[relay.Constant][53] /* ty=Tensor[(216), float32] */, dtype="float64") /* ty=Tensor[(216), float64] */;
    %626 = cast(%624, dtype="float64") /* ty=Tensor[(10, 12, 1), float64] */;
    %627 = power(%625, %626) /* ty=Tensor[(10, 12, 216), float64] */;
    %628 = cast(%var_15726, dtype="bool") /* ty=Tensor[(10, 12, 216), bool] */;
    %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
    %630 = cast(%627, dtype="bool") /* ty=Tensor[(10, 12, 216), bool] */;
    %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %632 = cast(%var_15691, dtype="float64") /* ty=Tensor[(72), float64] */;
    %633 = cast(meta[relay.Constant][53] /* ty=Tensor[(216), float32] */, dtype="float32") /* ty=Tensor[(216), float32] */;
    %634 = cast(%var_15693, dtype="float64") /* ty=Tensor[(12, 70), float64] */;
    %635 = reshape(%632, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), float64] */;
    %636 = reshape(%633, newshape=[12, 18]) /* ty=Tensor[(12, 18), float32] */;
    %637 = reshape(%634, newshape=[840, 1]) /* ty=Tensor[(840, 1), float64] */;
    %638 = @func_14918(%635, %636, %637) /* ty=(Tensor[(9, 3, 8), float32], Tensor[(12, 18), float32], Tensor[(10, 6, 14), float64], Tensor[(840, 1), float64], Tensor[(9, 8, ?), float64]) */;
    %639 = %638.4;
    %640 = cast(%639, dtype="int32") /* ty=Tensor[(9, 8, ?), int32] */;
    %641 = cast(meta[relay.Constant][54] /* ty=Tensor[(120), float64] */, dtype="int32") /* ty=Tensor[(120), int32] */;
    %642 = %621.0;
    %643 = greater(%630, %631) /* ty=Tensor[(10, 12, 216), bool] */;
    %644 = bitwise_or(%640, %641) /* ty=Tensor[(9, 8, 120), int32] */;
    (%642, %var_15691, %var_15693, %643, %644)
  };
  %645(%var_15747, %var_15748, %var_15749) /* ty=(Tensor[(18), float64], Tensor[(72), float64], Tensor[(12, 70), float64], Tensor[(10, 12, 216), bool], Tensor[(9, 8, 120), int32]) */
}

def @func_15996(%var_15994: Tensor[(1008), int8], %var_15995: Tensor[(48), int16]) -> (Tensor[(3, 13, 13), bool], Tensor[(16, 7, 9), float64], Tensor[(1008), int8], Tensor[(3, 3, 2), float64], Tensor[(48), int16]) {
  %658 = fn (%var_15986: Tensor[(1008), int8], %var_15991: Tensor[(48), int16]) -> (Tensor[(3, 13, 13), bool], Tensor[(16, 7, 9), float64], Tensor[(1008), int8], Tensor[(3, 3, 2), float64], Tensor[(48), int16]) {
    %646 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
    %647 = cast(%var_15986, dtype="int8") /* ty=Tensor[(1008), int8] */;
    %648 = cast(%var_15986, dtype="bool") /* ty=Tensor[(1008), bool] */;
    %649 = reshape(%647, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int8] */;
    %650 = reshape(%648, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), bool] */;
    %651 = @func_7959(%649, %650) /* ty=(Tensor[(16, 7, 9), float64],) */;
    %652 = cast(%var_15991, dtype="int16") /* ty=Tensor[(48), int16] */;
    %653 = reshape(%652, newshape=[2, 2, 12]) /* ty=Tensor[(2, 2, 12), int16] */;
    %654 = @func_12963(%653) /* ty=(Tensor[(2, 2, 12), int16], Tensor[(3, 3, 2), float64], Tensor[(18, 1), float64]) */;
    %655 = %646.0;
    %656 = %651.0;
    %657 = %654.1;
    (%655, %656, %var_15986, %657, %var_15991)
  };
  %658(%var_15994, %var_15995) /* ty=(Tensor[(3, 13, 13), bool], Tensor[(16, 7, 9), float64], Tensor[(1008), int8], Tensor[(3, 3, 2), float64], Tensor[(48), int16]) */
}

def @func_6946(%var_6834: Tensor[(15, 15, 16), float32], %var_6854: int16, %var_6856: Tensor[(5, 3), float32], %var_6914: Tensor[(2, 468), int8], %var_6938: Tensor[(1680), float32]) -> (Tensor[(15, 15, 16), float32], Tensor[(1, 3, 5), float32], int16, Tensor[(72), int16], Tensor[(5, 3), float32], Tensor[(15, 15, 16), int16], Tensor[(10, 6, 14), float64], Tensor[(840), float64], Tensor[(13, 9, 8), int8], Tensor[(2, 468), int8], Tensor[(15, 15, 16), float64], Tensor[(936), int8], Tensor[(1680), float32]) {
  %659 = cast(%var_6834, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %660 = sin(%659) /* ty=Tensor[(15, 15, 16), float32] */;
  %661 = cast(%var_6834, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="float32") /* ty=Tensor[(15, 15, 16), float32] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %665 = cast(%var_6854, dtype="int16") /* ty=int16 */;
  %666 = cast(meta[relay.Constant][55] /* ty=Tensor[(72), int16] */, dtype="int16") /* ty=Tensor[(72), int16] */;
  %667 = cast(%var_6856, dtype="float32") /* ty=Tensor[(5, 3), float32] */;
  %668 = reshape(%665, newshape=[]) /* ty=int16 */;
  %669 = reshape(%666, newshape=[3, 6, 4]) /* ty=Tensor[(3, 6, 4), int16] */;
  %670 = reshape(%667, newshape=[15]) /* ty=Tensor[(15), float32] */;
  %671 = @func_2003(%668, %669, %670) /* ty=(Tensor[(3, 6, 4), int16], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(3, 6, 4), float64], Tensor[(1, 3, 5), float32]) */;
  %672 = cast(%var_6834, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %673 = log10(%672) /* ty=Tensor[(15, 15, 16), float64] */;
  %674 = cast(%673, dtype="int16") /* ty=Tensor[(15, 15, 16), int16] */;
  %675 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%660, dtype="int16") /* ty=Tensor[(15, 15, 16), int16] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %678 = cast(meta[relay.Constant][56] /* ty=Tensor[(840), float64] */, dtype="float64") /* ty=Tensor[(840), float64] */;
  %679 = reshape(%678, newshape=[10, 6, 14]) /* ty=Tensor[(10, 6, 14), float64] */;
  %680 = cast(%var_6914, dtype="int8") /* ty=Tensor[(2, 468), int8] */;
  %681 = cast(%var_6914, dtype="int8") /* ty=Tensor[(2, 468), int8] */;
  %682 = reshape(%680, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %683 = reshape(%681, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %684 = cast(%660, dtype="float64") /* ty=Tensor[(15, 15, 16), float64] */;
  %685 = cast(%var_6938, dtype="float32") /* ty=Tensor[(1680), float32] */;
  %686 = cast(%var_6914, dtype="int8") /* ty=Tensor[(2, 468), int8] */;
  %687 = reshape(%685, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), float32] */;
  %688 = reshape(%686, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %689 = @func_4860(%687, %688) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %690 = divide(%663, %664) /* ty=Tensor[(15, 15, 16), float32] */;
  %691 = %671.4;
  %692 = bitwise_or(%676, %677) /* ty=Tensor[(15, 15, 16), int16] */;
  %693 = @func_6641(%679) /* ty=Tensor[(10, 6, 14), float64] */;
  %694 = @func_394(%682, %683) /* ty=Tensor[(13, 9, 8), int8] */;
  %695 = log(%684) /* ty=Tensor[(15, 15, 16), float64] */;
  %696 = %689.2;
  (%690, %691, %var_6854, meta[relay.Constant][55] /* ty=Tensor[(72), int16] */, %var_6856, %692, %693, meta[relay.Constant][56] /* ty=Tensor[(840), float64] */, %694, %var_6914, %695, %696, %var_6938)
}

def @func_13222(%var_13221: Tensor[(13, 6, 2), float64]) -> (Tensor[(13, 6, 2), float32],) {
  %701 = fn (%var_13185: Tensor[(13, 6, 2), float64]) -> (Tensor[(13, 6, 2), float32],) {
    %697 = cast(%var_13185, dtype="float64") /* ty=Tensor[(13, 6, 2), float64] */;
    %698 = sin(%697) /* ty=Tensor[(13, 6, 2), float64] */;
    %699 = cast(%698, dtype="float32") /* ty=Tensor[(13, 6, 2), float32] */;
    %700 = sinh(%699) /* ty=Tensor[(13, 6, 2), float32] */;
    (%700,)
  };
  %701(%var_13221) /* ty=(Tensor[(13, 6, 2), float32],) */
}

def @func_3601(%var_3599: Tensor[(8, 10, 15), float32], %var_3600: Tensor[(8, 10, 15), float32]) -> (Tensor[(8, 10, 15), float32],) {
  %707 = fn (%var_3588: Tensor[(8, 10, 15), float32], %var_3589: Tensor[(8, 10, 15), float32]) -> (Tensor[(8, 10, 15), float32],) {
    %702 = cast(%var_3589, dtype="float32") /* ty=Tensor[(8, 10, 15), float32] */;
    %703 = shape_of(%var_3588, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%var_3588, dtype="float32") /* ty=Tensor[(8, 10, 15), float32] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %706 = floor_mod(%704, %705) /* ty=Tensor[(8, 10, 15), float32] */;
    (%706,)
  };
  %707(%var_3599, %var_3600) /* ty=(Tensor[(8, 10, 15), float32],) */
}

def @main(%var_16197: Tensor[(840), float64]) -> (Tensor[(18), float64], Tensor[(10, 5, 12), bool], Tensor[(840), float64], Tensor[(1, 3, 5), float32], Tensor[(15), float32], Tensor[(1, 64), float32]) {
  %708 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 64), float32] */, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %709 = cast(%var_16197, dtype="float64") /* ty=Tensor[(840), float64] */;
  %710 = reshape(%708, newshape=[16, 2, 2]) /* ty=Tensor[(16, 2, 2), float32] */;
  %711 = reshape(%709, newshape=[12, 70]) /* ty=Tensor[(12, 70), float64] */;
  %712 = @func_11862(%710, %711) /* ty=(Tensor[(16, 2, 2), float32], Tensor[(10, 5, 12), bool], Tensor[(600), float32], Tensor[(10, 6, 14), float64], Tensor[(12, 70), float64]) */;
  %713 = cast(meta[relay.Constant][58] /* ty=Tensor[(15), float32] */, dtype="float32") /* ty=Tensor[(15), float32] */;
  %714 = reshape(%713, newshape=[15, 1]) /* ty=Tensor[(15, 1), float32] */;
  %715 = @func_5119(%714) /* ty=(Tensor[(12, 13, 14), bool], Tensor[(13, 9, 8), int8], Tensor[(936), int8], Tensor[(1, 3, 5), float32], Tensor[(15, 1), float32], Tensor[(12, 13, 14), float64], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) */;
  %716 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 64), float32] */, dtype="float32") /* ty=Tensor[(1, 64), float32] */;
  %717 = @func_16074() /* ty=Tensor[(18), float64] */;
  %718 = %712.1;
  %719 = %715.3;
  %720 = rsqrt(%716) /* ty=Tensor[(1, 64), float32] */;
  (%717, %718, %var_16197, %719, meta[relay.Constant][58] /* ty=Tensor[(15), float32] */, %720)
}

def @func_6222(%var_6184: Tensor[(8, 8, 16), float64], %var_6214: Tensor[(1680, 1), float32]) -> (Tensor[(8, 8, 16), float64], Tensor[(13, 9, 8), int8], Tensor[(1680, 1), float32], Tensor[(936), int8], Tensor[(3, 7, 14), float64], Tensor[(294), float64]) {
  %721 = cast(%var_6184, dtype="float64") /* ty=Tensor[(8, 8, 16), float64] */;
  %722 = cast(%var_6214, dtype="float32") /* ty=Tensor[(1680, 1), float32] */;
  %723 = cast(meta[relay.Constant][59] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %724 = reshape(%722, newshape=[10, 12, 14]) /* ty=Tensor[(10, 12, 14), float32] */;
  %725 = reshape(%723, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %726 = @func_4860(%724, %725) /* ty=(Tensor[(10, 12, 14), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %727 = cast(meta[relay.Constant][60] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %728 = cast(meta[relay.Constant][60] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %729 = %726.1;
  %730 = cast(%729, dtype="int8") /* ty=Tensor[(13, 9, 8), int8] */;
  %731 = reshape(%727, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %732 = reshape(%728, newshape=[3, 7, 14]) /* ty=Tensor[(3, 7, 14), float64] */;
  %733 = reshape(%730, newshape=[936]) /* ty=Tensor[(936), int8] */;
  %734 = @func_4948(%731, %732, %733) /* ty=(Tensor[(3, 7, 14), float64], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) */;
  %735 = acosh(%721) /* ty=Tensor[(8, 8, 16), float64] */;
  %736 = %734.0;
  (%735, %729, %var_6214, meta[relay.Constant][59] /* ty=Tensor[(936), int8] */, %736, meta[relay.Constant][60] /* ty=Tensor[(294), float64] */)
}

def @func_14295(%var_14230: Tensor[(16, 13, 11), float64], %var_14284: Tensor[(840), float32]) -> (Tensor[(16, 13, 11), uint64], Tensor[(16, 13, 11), float64], Tensor[(16, 13, 11), float64], Tensor[(240), float32], Tensor[(840), float32], Tensor[(240), float32], Tensor[(13, 9, 8), int8], Tensor[(936), int8]) {
  %737 = cast(meta[relay.Constant][61] /* ty=Tensor[(16, 13, 11), float64] */, dtype="uint64") /* ty=Tensor[(16, 13, 11), uint64] */;
  %738 = shape_of(%var_14230, dtype="int32") /* ty=Tensor[(3), int32] */;
  %739 = cast(%var_14230, dtype="uint64") /* ty=Tensor[(16, 13, 11), uint64] */;
  %740 = dyn.reshape(%737, %738, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %741 = cast(%var_14230, dtype="float64") /* ty=Tensor[(16, 13, 11), float64] */;
  %742 = sqrt(%741) /* ty=Tensor[(16, 13, 11), float64] */;
  %743 = cast(%742, dtype="float64") /* ty=Tensor[(16, 13, 11), float64] */;
  %744 = cast(%var_14230, dtype="float64") /* ty=Tensor[(16, 13, 11), float64] */;
  %745 = cast(%var_14284, dtype="float32") /* ty=Tensor[(840), float32] */;
  %746 = cast(meta[relay.Constant][62] /* ty=Tensor[(240), float32] */, dtype="float32") /* ty=Tensor[(240), float32] */;
  %747 = reshape(%745, newshape=[5, 12, 14]) /* ty=Tensor[(5, 12, 14), float32] */;
  %748 = reshape(%746, newshape=[240]) /* ty=Tensor[(240), float32] */;
  %749 = @func_6752(%747, %748) /* ty=(Tensor[(?, 15, 16), uint8], Tensor[(240), float32], Tensor[(5, 12, 14), float64], Tensor[(5, 12, 14), float32]) */;
  %750 = cast(meta[relay.Constant][63] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %751 = cast(meta[relay.Constant][63] /* ty=Tensor[(936), int8] */, dtype="int8") /* ty=Tensor[(936), int8] */;
  %752 = reshape(%750, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %753 = reshape(%751, newshape=[13, 9, 8]) /* ty=Tensor[(13, 9, 8), int8] */;
  %754 = add(%739, %740) /* ty=Tensor[(16, 13, 11), uint64] */;
  %755 = sin(%743) /* ty=Tensor[(16, 13, 11), float64] */;
  %756 = rsqrt(%744) /* ty=Tensor[(16, 13, 11), float64] */;
  %757 = %749.1;
  %758 = @func_394(%752, %753) /* ty=Tensor[(13, 9, 8), int8] */;
  (%754, %755, %756, %757, %var_14284, meta[relay.Constant][62] /* ty=Tensor[(240), float32] */, %758, meta[relay.Constant][63] /* ty=Tensor[(936), int8] */)
}

def @func_15502() -> Tensor[(18), float64] {
  %760 = fn () -> Tensor[(18), float64] {
    %759 = @func_15011() /* ty=(Tensor[(3, 13, 13), bool], Tensor[(3, 3, 2), float64], Tensor[(18), float64]) */;
    %759.2
  };
  %760() /* ty=Tensor[(18), float64] */
}

def @func_8748(%var_8747: Tensor[(13, 16, 14), uint32]) -> (Tensor[(13, 16, 14), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), int8]) {
  %772 = fn (%var_8698: Tensor[(13, 16, 14), uint32]) -> (Tensor[(13, 16, 14), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), int8]) {
    %761 = cast(meta[relay.Constant][64] /* ty=Tensor[(13, 16, 14), uint32] */, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
    %762 = shape_of(%var_8698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %763 = cast(%var_8698, dtype="bool") /* ty=Tensor[(13, 16, 14), bool] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %765 = cast(meta[relay.Constant][65] /* ty=Tensor[(2, 504), int8] */, dtype="int8") /* ty=Tensor[(2, 504), int8] */;
    %766 = cast(meta[relay.Constant][65] /* ty=Tensor[(2, 504), int8] */, dtype="bool") /* ty=Tensor[(2, 504), bool] */;
    %767 = reshape(%765, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), int8] */;
    %768 = reshape(%766, newshape=[16, 7, 9]) /* ty=Tensor[(16, 7, 9), bool] */;
    %769 = @func_7959(%767, %768) /* ty=(Tensor[(16, 7, 9), float64],) */;
    %770 = less_equal(%763, %764) /* ty=Tensor[(13, 16, 14), bool] */;
    %771 = %769.0;
    (%770, %771, meta[relay.Constant][65] /* ty=Tensor[(2, 504), int8] */)
  };
  %772(%var_8747) /* ty=(Tensor[(13, 16, 14), bool], Tensor[(16, 7, 9), float64], Tensor[(2, 504), int8]) */
}

def @func_15174(%var_15169: Tensor[(360), uint8], %var_15170: Tensor[(30), float32], %var_15171: Tensor[(390), float64], %var_15172: Tensor[(1008, 1), int8], %var_15173: Tensor[(1210), float64]) -> (Tensor[(3, 3, 2), float64], Tensor[(10, 3, 12), uint8], Tensor[(360), uint8], Tensor[(5, 1, 6), float32], Tensor[(30), float32], Tensor[(936), int8], Tensor[(294), float64], Tensor[(390), float64], Tensor[(2112, 420), float64], Tensor[(16, 7, 9), float64], Tensor[(1008, 1), int8], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) {
  @func_15167(%var_15169, %var_15170, %var_15171, %var_15172, %var_15173) /* ty=(Tensor[(3, 3, 2), float64], Tensor[(10, 3, 12), uint8], Tensor[(360), uint8], Tensor[(5, 1, 6), float32], Tensor[(30), float32], Tensor[(936), int8], Tensor[(294), float64], Tensor[(390), float64], Tensor[(2112, 420), float64], Tensor[(16, 7, 9), float64], Tensor[(1008, 1), int8], Tensor[(11, 10, 11), float64], Tensor[(1210), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen653/build/output.py", line 1547, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:45:45] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

