==========mod==========
#[version = "0.0.5"]
def @func_5854() -> (Tensor[(225), float64], uint64, uint64) {
  %0 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %1 = %0.0;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(225), float64] */;
  %3 = cast(meta[relay.Constant][0] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %4 = reshape(%2, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %5 = reshape(%3, newshape=[]) /* ty=uint64 */;
  %6 = @func_5689(%4, %5) /* ty=(Tensor[(225), bool], Tensor[(10, 3, 5), float32], uint64, Tensor[(1456), uint64], Tensor[(150), float32]) */;
  %7 = %6.2;
  (%1, %7, meta[relay.Constant][0] /* ty=uint64 */)
}

def @func_5731() -> (Tensor[(225), float32],) {
  %8 = @func_3905() /* ty=Tensor[(225), float32] */;
  (%8,)
}

def @func_4096(%var_4072: Tensor[(5, 11, 12), float64]) -> (Tensor[(5, 11, 12), float64], Tensor[(11, 12, 6), float32]) {
  %9 = cast(%var_4072, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
  %10 = sqrt(%9) /* ty=Tensor[(5, 11, 12), float64] */;
  %11 = @func_3647() /* ty=Tensor[(11, 12, 6), float32] */;
  (%10, %11)
}

def @func_4331(%var_4291: Tensor[(5, 14, 7), uint8], %var_4305: Tensor[(270), int16], %var_4306: Tensor[(75, 3), float64]) -> (Tensor[(5, 14, 7), uint8], uint64, Tensor[(270), int16], Tensor[(75, 3), float64], Tensor[(11, 14, 10), bool], Tensor[(30, 9), int16], Tensor[(11, 14, 10), bool]) {
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 1, 7), uint8] */, dtype="uint8") /* ty=Tensor[(5, 1, 7), uint8] */;
  %13 = cast(%var_4291, dtype="uint8") /* ty=Tensor[(5, 14, 7), uint8] */;
  %14 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %15 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %16 = cast(%var_4305, dtype="int16") /* ty=Tensor[(270), int16] */;
  %17 = cast(%var_4306, dtype="float64") /* ty=Tensor[(75, 3), float64] */;
  %18 = reshape(%15, newshape=[]) /* ty=uint64 */;
  %19 = reshape(%16, newshape=[30, 9]) /* ty=Tensor[(30, 9), int16] */;
  %20 = reshape(%17, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %21 = @func_3846(%18, %19, %20) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) */;
  %22 = %21.3;
  %23 = cast(meta[relay.Constant][3] /* ty=Tensor[(30, 9), int16] */, dtype="int16") /* ty=Tensor[(30, 9), int16] */;
  %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(2), int32] */;
  %25 = cast(%22, dtype="int16") /* ty=Tensor[(30, 9), int16] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %27 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %28 = minimum(%12, %13) /* ty=Tensor[(5, 14, 7), uint8] */;
  %29 = %14.1;
  %30 = subtract(%25, %26) /* ty=Tensor[(30, 9), int16] */;
  %31 = %27.0;
  (%28, meta[relay.Constant][2] /* ty=uint64 */, %var_4305, %var_4306, %29, %30, %31)
}

def @func_3846(%var_3834: uint64, %var_3835: Tensor[(30, 9), int16], %var_3836: Tensor[(225), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) {
  %32 = cast(%var_3834, dtype="uint64") /* ty=uint64 */;
  %33 = cast(%var_3835, dtype="int16") /* ty=Tensor[(30, 9), int16] */;
  %34 = cast(%var_3836, dtype="float64") /* ty=Tensor[(225), float64] */;
  %35 = reshape(%32, newshape=[]) /* ty=uint64 */;
  %36 = reshape(%33, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %37 = reshape(%34, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %38 = @func_3203(%35, %36, %37) /* ty=(uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) */;
  %39 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %40 = %38.3;
  (%39, %40, %var_3834, %var_3835, %var_3836)
}

def @func_6754(%var_6734: Tensor[(11, 10, 15), int16], %var_6735: Tensor[(11, 10, 15), int16]) -> (Tensor[(11, 10, 15), int16], Tensor[(11, 14, 10), bool], Tensor[(13, 9, 7), bool], Tensor[(198), int16], Tensor[(105), float64]) {
  %41 = cast(%var_6735, dtype="int16") /* ty=Tensor[(11, 10, 15), int16] */;
  %42 = shape_of(%var_6734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_6734, dtype="int16") /* ty=Tensor[(11, 10, 15), int16] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(198), int16] */, dtype="int16") /* ty=Tensor[(198), int16] */;
  %46 = @func_4709() /* ty=Tensor[(11, 14, 10), bool] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %49 = reshape(%45, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int16] */;
  %50 = reshape(%47, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %51 = reshape(%48, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %52 = @func_3357(%49, %50, %51) /* ty=(Tensor[(11, 6, 3), float32], Tensor[(1540), float32], Tensor[(420, 1), float64], Tensor[(1540), float32], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */;
  %53 = bitwise_or(%43, %44) /* ty=Tensor[(11, 10, 15), int16] */;
  %54 = %52.5;
  (%53, %46, %54, meta[relay.Constant][4] /* ty=Tensor[(198), int16] */, meta[relay.Constant][5] /* ty=Tensor[(105), float64] */)
}

def @func_5918() -> Tensor[(11, 14, 10), float64] {
  @func_5544() /* ty=Tensor[(11, 14, 10), float64] */
}

def @func_5969(%var_5960: Tensor[(70), float64]) -> (Tensor[(6, 45), float64], Tensor[(13, 9, 7), bool], Tensor[(70), float64], Tensor[(1, 105), float64]) {
  %55 = @func_3694() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %56 = %55.1;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %58 = cast(%var_5960, dtype="float64") /* ty=Tensor[(70), float64] */;
  %59 = cast(%56, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %60 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 105), float64] */, dtype="float64") /* ty=Tensor[(1, 105), float64] */;
  %61 = reshape(%58, newshape=[14, 5]) /* ty=Tensor[(14, 5), float64] */;
  %62 = reshape(%59, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %63 = reshape(%60, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %64 = @func_3442(%61, %62, %63) /* ty=(Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */;
  %65 = sigmoid(%57) /* ty=Tensor[(6, 45), float64] */;
  %66 = %64.6;
  (%65, %66, %var_5960, meta[relay.Constant][6] /* ty=Tensor[(1, 105), float64] */)
}

def @func_2989(%var_2982: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64]) {
  %67 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %68 = %67.1;
  %69 = cast(%68, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %70 = cast(%var_2982, dtype="float64") /* ty=Tensor[(105), float64] */;
  %71 = reshape(%70, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %72 = exp(%69) /* ty=Tensor[(11, 14, 10), float32] */;
  %73 = @func_1017(%71) /* ty=Tensor[(3, 5, 7), float64] */;
  (%72, %73, %var_2982)
}

def @func_2810(%var_2804: uint64, %var_2805: Tensor[(4, 11, 3), uint64]) -> (Tensor[(4, 11, 3), uint64],) {
  %74 = cast(%var_2804, dtype="uint64") /* ty=uint64 */;
  %75 = cast(%var_2805, dtype="uint64") /* ty=Tensor[(4, 11, 3), uint64] */;
  %76 = add(%74, %75) /* ty=Tensor[(4, 11, 3), uint64] */;
  (%76,)
}

def @func_5544() -> Tensor[(11, 14, 10), float64] {
  %77 = @func_4681() /* ty=Tensor[(11, 14, 10), bool] */;
  %78 = cast(%77, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %79 = log2(%78) /* ty=Tensor[(11, 14, 10), float32] */;
  %80 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %81 = cast(%80, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %82 = shape_of(%79, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%79, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%83, %84) /* ty=Tensor[(11, 14, 10), float64] */
}

def @func_3100(%var_3076: uint8) -> (Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) {
  %85 = cast(%var_3076, dtype="float32") /* ty=float32 */;
  %86 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 15, 11), uint8] */, dtype="float32") /* ty=Tensor[(3, 15, 11), float32] */;
  %87 = cast(%var_3076, dtype="bool") /* ty=bool */;
  %88 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 15, 11), uint8] */, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
  %89 = less_equal(%87, %88) /* ty=Tensor[(3, 15, 11), bool] */;
  %90 = cast(meta[relay.Constant][8] /* ty=Tensor[(3, 15, 11), bool] */, dtype="int16") /* ty=Tensor[(3, 15, 11), int16] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int16") /* ty=Tensor[(3, 15, 11), int16] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %94 = divide(%85, %86) /* ty=Tensor[(3, 15, 11), float32] */;
  %95 = add(%92, %93) /* ty=Tensor[(3, 15, 11), int16] */;
  (%94, %95)
}

def @func_328(%var_297: Tensor[(16, 3, 3), uint16], %var_298: Tensor[(16, 3, 3), uint16], %var_307: Tensor[(1540), float32], %var_323: Tensor[(11, 14, 10), bool]) -> (Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) {
  %96 = cast(%var_298, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
  %97 = shape_of(%var_297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_297, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = cast(%var_307, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %101 = cast(%var_307, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %102 = reshape(%100, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %103 = reshape(%101, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %104 = @func_217(%102, %103) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %105 = %104.0;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %107 = cast(%105, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %108 = reshape(%106, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %109 = reshape(%107, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %110 = @func_217(%108, %109) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %111 = %110.0;
  %112 = cast(%var_307, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %116 = logical_and(%114, %115) /* ty=Tensor[(11, 14, 10), bool] */;
  %117 = cast(%var_323, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %119 = cast(%116, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %121 = greater(%98, %99) /* ty=Tensor[(16, 3, 3), bool] */;
  %122 = floor_mod(%119, %120) /* ty=Tensor[(11, 14, 10), float32] */;
  (%121, %105, %122)
}

def @func_2047(%var_2033: Tensor[(9, 9, 15), float32]) -> (Tensor[(9, 9, 15), float32], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) {
  %123 = cast(%var_2033, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %126 = reshape(%124, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %127 = reshape(%125, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %128 = @func_217(%126, %127) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %129 = tan(%123) /* ty=Tensor[(9, 9, 15), float32] */;
  %130 = %128.0;
  (%129, %130, meta[relay.Constant][9] /* ty=Tensor[(1540), float32] */)
}

def @func_5327(%var_5308: Tensor[(105), float64]) -> (Tensor[(6, 45), int16], Tensor[(270), int16], Tensor[(105), float64], Tensor[(11, 14, 10), bool]) {
  %131 = @func_4845() /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) */;
  %132 = %131.1;
  %133 = cast(%132, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %134 = cast(%var_5308, dtype="float64") /* ty=Tensor[(105), float64] */;
  %135 = reshape(%133, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %136 = reshape(%134, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %137 = @func_2904(%135, %136) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */;
  %138 = %137.2;
  %139 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  (%132, %138, %var_5308, %139)
}

def @func_5792() -> (Tensor[(6, 45), float32],) {
  %140 = @func_5657() /* ty=Tensor[(6, 45), float32] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %142 = sqrt(%141) /* ty=Tensor[(6, 45), float32] */;
  (%142,)
}

def @func_4878(%var_4872: uint64, %var_4874: Tensor[(225), float64]) -> (Tensor[(11, 12, 6), bool], Tensor[(225), float64], uint64, Tensor[(270), int16], Tensor[(225), float64]) {
  %143 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %144 = %143.0;
  %145 = cast(meta[relay.Constant][10] /* ty=Tensor[(11, 12, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
  %146 = shape_of(%144, dtype="int32") /* ty=Tensor[(3), int32] */;
  %147 = cast(%144, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
  %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %149 = cast(%var_4872, dtype="uint64") /* ty=uint64 */;
  %150 = cast(meta[relay.Constant][11] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %151 = cast(%var_4874, dtype="float64") /* ty=Tensor[(225), float64] */;
  %152 = reshape(%149, newshape=[]) /* ty=uint64 */;
  %153 = reshape(%150, newshape=[30, 9]) /* ty=Tensor[(30, 9), int16] */;
  %154 = reshape(%151, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %155 = @func_3846(%152, %153, %154) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) */;
  %156 = less_equal(%147, %148) /* ty=Tensor[(11, 12, 6), bool] */;
  %157 = %155.4;
  (%156, %157, %var_4872, meta[relay.Constant][11] /* ty=Tensor[(270), int16] */, %var_4874)
}

def @func_470(%var_455: Tensor[(6, 5, 9), int16], %var_456: Tensor[(6, 5, 9), int16]) -> (Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) {
  %158 = cast(%var_456, dtype="int16") /* ty=Tensor[(6, 5, 9), int16] */;
  %159 = shape_of(%var_455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %160 = cast(%var_455, dtype="int16") /* ty=Tensor[(6, 5, 9), int16] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %162 = cast(%var_455, dtype="float32") /* ty=Tensor[(6, 5, 9), float32] */;
  %163 = atanh(%162) /* ty=Tensor[(6, 5, 9), float32] */;
  %164 = cast(%var_456, dtype="uint16") /* ty=Tensor[(6, 5, 9), uint16] */;
  %165 = shape_of(%163, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%163, dtype="uint16") /* ty=Tensor[(6, 5, 9), uint16] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %168 = subtract(%160, %161) /* ty=Tensor[(6, 5, 9), int16] */;
  %169 = left_shift(%166, %167) /* ty=Tensor[(6, 5, 9), uint16] */;
  (%168, %169)
}

def @func_3813(%var_3724: uint64, %var_3725: Tensor[(8, 13, 14), uint64], %var_3740: Tensor[(150), float32]) -> (Tensor[(8, 13, 14), bool], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(10, 3, 5), float32], Tensor[(8, 13, 14), bool], Tensor[(4, 11, 3), float64], Tensor[(270, 1), int16], Tensor[(225), float64], Tensor[(3, 15, 11), int16], Tensor[(270), int16], Tensor[(8, 13, 14), float32]) {
  %170 = cast(%var_3724, dtype="bool") /* ty=bool */;
  %171 = cast(%var_3725, dtype="bool") /* ty=Tensor[(8, 13, 14), bool] */;
  %172 = cast(%var_3740, dtype="float32") /* ty=Tensor[(150), float32] */;
  %173 = cast(%var_3740, dtype="float32") /* ty=Tensor[(150), float32] */;
  %174 = reshape(%172, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %175 = reshape(%173, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %176 = @func_3586(%174, %175) /* ty=Tensor[(10, 3, 5), float32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %178 = cast(%176, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %179 = reshape(%177, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %180 = reshape(%178, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %181 = cast(%var_3725, dtype="float64") /* ty=Tensor[(8, 13, 14), float64] */;
  %182 = cosh(%181) /* ty=Tensor[(8, 13, 14), float64] */;
  %183 = cast(%var_3724, dtype="uint32") /* ty=uint32 */;
  %184 = cast(%var_3725, dtype="uint32") /* ty=Tensor[(8, 13, 14), uint32] */;
  %185 = maximum(%183, %184) /* ty=Tensor[(8, 13, 14), uint32] */;
  %186 = cast(%185, dtype="bool") /* ty=Tensor[(8, 13, 14), bool] */;
  %187 = shape_of(%182, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%182, dtype="bool") /* ty=Tensor[(8, 13, 14), bool] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %190 = cast(%var_3724, dtype="uint64") /* ty=uint64 */;
  %191 = cast(meta[relay.Constant][12] /* ty=Tensor[(270, 1), int16] */, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %193 = reshape(%190, newshape=[]) /* ty=uint64 */;
  %194 = reshape(%191, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %195 = reshape(%192, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %196 = @func_3203(%193, %194, %195) /* ty=(uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) */;
  %197 = cast(%var_3724, dtype="uint8") /* ty=uint8 */;
  %198 = reshape(%197, newshape=[]) /* ty=uint8 */;
  %199 = @func_3100(%198) /* ty=(Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) */;
  %200 = cast(meta[relay.Constant][13] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %201 = cast(meta[relay.Constant][12] /* ty=Tensor[(270, 1), int16] */, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %202 = reshape(%200, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %203 = reshape(%201, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %204 = @func_614(%202, %203) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %205 = cast(%182, dtype="float32") /* ty=Tensor[(8, 13, 14), float32] */;
  %206 = not_equal(%170, %171) /* ty=Tensor[(8, 13, 14), bool] */;
  %207 = @func_3586(%179, %180) /* ty=Tensor[(10, 3, 5), float32] */;
  %208 = greater_equal(%188, %189) /* ty=Tensor[(8, 13, 14), bool] */;
  %209 = %196.5;
  %210 = %199.1;
  %211 = %204.2;
  %212 = acosh(%205) /* ty=Tensor[(8, 13, 14), float32] */;
  (%206, %176, %var_3740, %207, %208, %209, meta[relay.Constant][12] /* ty=Tensor[(270, 1), int16] */, meta[relay.Constant][13] /* ty=Tensor[(225), float64] */, %210, %211, %212)
}

def @func_3868() -> (Tensor[(11, 12, 6), float32],) {
  %213 = @func_3647() /* ty=Tensor[(11, 12, 6), float32] */;
  (%213,)
}

def @func_4681() -> Tensor[(11, 14, 10), bool] {
  @func_3231() /* ty=Tensor[(11, 14, 10), bool] */
}

def @func_4839() -> (Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) {
  %214 = @func_3575() /* ty=(Tensor[(6, 45), int16],) */;
  %215 = cast(meta[relay.Constant][14] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %216 = cast(meta[relay.Constant][14] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %217 = reshape(%215, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %218 = reshape(%216, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %219 = %214.0;
  %220 = @func_3586(%217, %218) /* ty=Tensor[(10, 3, 5), float32] */;
  (%219, %220, meta[relay.Constant][14] /* ty=Tensor[(150), float32] */)
}

def @func_6247(%var_6234: Tensor[(11, 14, 10), bool]) -> (Tensor[(10, 3, 5), float32], Tensor[(13, 9, 7), uint64], Tensor[(11, 14, 10), bool]) {
  %221 = @func_4839() /* ty=(Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) */;
  %222 = cast(meta[relay.Constant][15] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %223 = cast(meta[relay.Constant][15] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %224 = reshape(%222, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %225 = reshape(%223, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %226 = @func_1697(%224, %225) /* ty=Tensor[(13, 9, 7), bool] */;
  %227 = cast(meta[relay.Constant][15] /* ty=Tensor[(819), int32] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint64") /* ty=Tensor[(13, 9, 7), uint64] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %231 = @func_4421() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %232 = %231.0;
  %233 = cast(%var_6234, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
  %235 = cast(%232, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %237 = %221.1;
  %238 = bitwise_and(%229, %230) /* ty=Tensor[(13, 9, 7), uint64] */;
  %239 = less(%235, %236) /* ty=Tensor[(11, 14, 10), bool] */;
  (%237, %238, %239)
}

def @func_4669(%var_4646: uint64) -> (Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(225), float32]) {
  %240 = cast(%var_4646, dtype="uint64") /* ty=uint64 */;
  %241 = cast(meta[relay.Constant][16] /* ty=Tensor[(132), uint64] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
  %242 = reshape(%240, newshape=[]) /* ty=uint64 */;
  %243 = reshape(%241, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint64] */;
  %244 = @func_2810(%242, %243) /* ty=(Tensor[(4, 11, 3), uint64],) */;
  %245 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %246 = %245.0;
  %247 = cast(%246, dtype="float64") /* ty=Tensor[(225), float64] */;
  %248 = atan(%247) /* ty=Tensor[(225), float64] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(225), float32] */;
  %250 = %244.0;
  %251 = asin(%249) /* ty=Tensor[(225), float32] */;
  (%250, %var_4646, meta[relay.Constant][16] /* ty=Tensor[(132), uint64] */, %251)
}

def @func_4067(%var_4053: Tensor[(1, 5, 6), float32], %var_4054: Tensor[(1, 5, 6), float32]) -> (Tensor[(?, 5, 6), float32],) {
  %252 = cast(%var_4054, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %253 = shape_of(%var_4053, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%var_4053, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %256 = divide(%254, %255) /* ty=Tensor[(?, 5, 6), float32] */;
  (%256,)
}

def @func_2488(%var_2466: Tensor[(270), int16], %var_2469: Tensor[(10, 16, 7), int64]) -> (Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(10, 16, 7), uint64]) {
  %257 = cast(%var_2466, dtype="int16") /* ty=Tensor[(270), int16] */;
  %258 = cast(%var_2466, dtype="int16") /* ty=Tensor[(270), int16] */;
  %259 = reshape(%257, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %260 = reshape(%258, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %261 = @func_470(%259, %260) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %262 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %263 = rsqrt(%262) /* ty=Tensor[(10, 16, 7), float32] */;
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 16, 7), float32] */, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %265 = shape_of(%263, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(%263, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %268 = left_shift(%266, %267) /* ty=Tensor[(10, 16, 7), int64] */;
  %269 = cast(%var_2469, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %270 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %271 = cast(%268, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %272 = dyn.reshape(%269, %270, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %273 = divide(%271, %272) /* ty=Tensor[(10, 16, 7), float64] */;
  %274 = cast(%263, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %275 = shape_of(%268, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(%268, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %278 = bitwise_and(%276, %277) /* ty=Tensor[(10, 16, 7), int64] */;
  %279 = cast(%278, dtype="uint64") /* ty=Tensor[(10, 16, 7), uint64] */;
  %280 = shape_of(%273, dtype="int32") /* ty=Tensor[(3), int32] */;
  %281 = cast(%273, dtype="uint64") /* ty=Tensor[(10, 16, 7), uint64] */;
  %282 = dyn.reshape(%279, %280, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %283 = %261.1;
  %284 = bitwise_or(%281, %282) /* ty=Tensor[(10, 16, 7), uint64] */;
  (%283, %var_2466, %284)
}

def @func_5277(%var_5272: Tensor[(286), int16]) -> (Tensor[(11, 14, 10), bool], Tensor[(2, 13, 11), bool], Tensor[(286), int16]) {
  %285 = cast(%var_5272, dtype="int16") /* ty=Tensor[(286), int16] */;
  %286 = cast(%var_5272, dtype="int16") /* ty=Tensor[(286), int16] */;
  %287 = reshape(%285, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), int16] */;
  %288 = reshape(%286, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), int16] */;
  %289 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %290 = @func_699(%287, %288) /* ty=Tensor[(2, 13, 11), bool] */;
  (%289, %290, %var_5272)
}

def @func_3905() -> Tensor[(225), float32] {
  %291 = @func_3694() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %292 = %291.0;
  %293 = cast(meta[relay.Constant][18] /* ty=Tensor[(225), float64] */, dtype="float32") /* ty=Tensor[(225), float32] */;
  %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(1), int32] */;
  %295 = cast(%292, dtype="float32") /* ty=Tensor[(225), float32] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?), float32] */;
  minimum(%295, %296) /* ty=Tensor[(225), float32] */
}

def @func_2789() -> (Tensor[(11, 14, 10), bool],) {
  %297 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %298 = %297.1;
  (%298,)
}

def @func_4585() -> (Tensor[(225), float64],) {
  %299 = @func_3905() /* ty=Tensor[(225), float32] */;
  %300 = cast(%299, dtype="float64") /* ty=Tensor[(225), float64] */;
  %301 = atanh(%300) /* ty=Tensor[(225), float64] */;
  (%301,)
}

def @func_5029(%var_4953: Tensor[(16, 1, 3), float32], %var_4985: Tensor[(1120), int64]) -> (Tensor[(14, 15, 7), float64], Tensor[(490, 3), float64], Tensor[(270), int16], Tensor[(90, 3), int16], Tensor[(1120), int64], Tensor[(16, 1, 3), float64], Tensor[(3, 15, 11), float32], uint8) {
  %302 = cast(meta[relay.Constant][19] /* ty=Tensor[(490, 3), float64] */, dtype="float64") /* ty=Tensor[(490, 3), float64] */;
  %303 = reshape(%302, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %304 = @func_3377(%303) /* ty=(Tensor[(14, 15, 7), float64],) */;
  %305 = cast(meta[relay.Constant][20] /* ty=Tensor[(90, 3), int16] */, dtype="int16") /* ty=Tensor[(90, 3), int16] */;
  %306 = cast(%var_4985, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %307 = reshape(%305, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %308 = reshape(%306, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), int64] */;
  %309 = @func_2488(%307, %308) /* ty=(Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(10, 16, 7), uint64]) */;
  %310 = cast(%var_4953, dtype="float32") /* ty=Tensor[(16, 1, 3), float32] */;
  %311 = log10(%310) /* ty=Tensor[(16, 1, 3), float32] */;
  %312 = cast(%311, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %313 = cast(meta[relay.Constant][21] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %314 = reshape(%313, newshape=[]) /* ty=uint8 */;
  %315 = @func_3100(%314) /* ty=(Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) */;
  %316 = %304.0;
  %317 = %309.1;
  %318 = asin(%312) /* ty=Tensor[(16, 1, 3), float64] */;
  %319 = %315.0;
  (%316, meta[relay.Constant][19] /* ty=Tensor[(490, 3), float64] */, %317, meta[relay.Constant][20] /* ty=Tensor[(90, 3), int16] */, %var_4985, %318, %319, meta[relay.Constant][21] /* ty=uint8 */)
}

def @func_6018(%var_6007: Tensor[(7, 105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(1, 70), float64], Tensor[(7, 105), bool]) {
  %320 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 70), float64] */, dtype="float64") /* ty=Tensor[(1, 70), float64] */;
  %321 = reshape(%320, newshape=[70]) /* ty=Tensor[(70), float64] */;
  %322 = @func_5969(%321) /* ty=(Tensor[(6, 45), float64], Tensor[(13, 9, 7), bool], Tensor[(70), float64], Tensor[(1, 105), float64]) */;
  %323 = %322.3;
  %324 = cast(%323, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
  %325 = cast(%var_6007, dtype="bool") /* ty=Tensor[(7, 105), bool] */;
  %326 = @func_3679() /* ty=Tensor[(11, 14, 10), bool] */;
  %327 = greater(%324, %325) /* ty=Tensor[(7, 105), bool] */;
  (%326, meta[relay.Constant][22] /* ty=Tensor[(1, 70), float64] */, %327)
}

def @func_6398() -> (Tensor[(11, 12, 6), float32],) {
  %328 = @func_4480() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %329 = %328.0;
  (%329,)
}

def @func_3203(%var_3168: uint64, %var_3176: Tensor[(270), int16], %var_3182: Tensor[(225), float64]) -> (uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) {
  %330 = cast(%var_3176, dtype="int16") /* ty=Tensor[(270), int16] */;
  %331 = cast(%var_3176, dtype="int16") /* ty=Tensor[(270), int16] */;
  %332 = reshape(%330, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %333 = reshape(%331, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %334 = @func_470(%332, %333) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %335 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %336 = %335.2;
  %337 = cast(%var_3182, dtype="int64") /* ty=Tensor[(225), int64] */;
  %338 = shape_of(%336, dtype="int32") /* ty=Tensor[(1), int32] */;
  %339 = cast(%336, dtype="int64") /* ty=Tensor[(225), int64] */;
  %340 = dyn.reshape(%337, %338, newshape=[]) /* ty=Tensor[(?), int64] */;
  %341 = cast(%var_3168, dtype="uint64") /* ty=uint64 */;
  %342 = cast(meta[relay.Constant][23] /* ty=Tensor[(132), uint64] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
  %343 = reshape(%341, newshape=[]) /* ty=uint64 */;
  %344 = reshape(%342, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint64] */;
  %345 = @func_2810(%343, %344) /* ty=(Tensor[(4, 11, 3), uint64],) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float64") /* ty=Tensor[(4, 11, 3), float64] */;
  %348 = %334.1;
  %349 = bitwise_xor(%339, %340) /* ty=Tensor[(225), int64] */;
  %350 = sqrt(%347) /* ty=Tensor[(4, 11, 3), float64] */;
  (%var_3168, meta[relay.Constant][23] /* ty=Tensor[(132), uint64] */, %348, %var_3176, %349, %350)
}

def @func_3045(%var_3001: Tensor[(13, 16, 3), float64], %var_3018: uint64, %var_3034: Tensor[(13, 16, 3), float64]) -> (Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(13, 16, 3), uint64]) {
  %351 = cast(%var_3018, dtype="uint64") /* ty=uint64 */;
  %352 = cast(meta[relay.Constant][24] /* ty=Tensor[(132), uint64] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
  %353 = reshape(%351, newshape=[]) /* ty=uint64 */;
  %354 = reshape(%352, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint64] */;
  %355 = @func_2810(%353, %354) /* ty=(Tensor[(4, 11, 3), uint64],) */;
  %356 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 1), float64] */;
  %357 = cast(%var_3001, dtype="float64") /* ty=Tensor[(13, 16, 3), float64] */;
  %358 = power(%356, %357) /* ty=Tensor[(13, 16, 3), float64] */;
  %359 = cast(%var_3034, dtype="uint64") /* ty=Tensor[(13, 16, 3), uint64] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="uint64") /* ty=Tensor[(13, 16, 3), uint64] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %363 = %355.0;
  %364 = right_shift(%361, %362) /* ty=Tensor[(13, 16, 3), uint64] */;
  (%363, %var_3018, meta[relay.Constant][24] /* ty=Tensor[(132), uint64] */, %364)
}

def @func_4772(%var_4742: Tensor[(225), float64]) -> (Tensor[(225), float32], Tensor[(11, 12, 6), float32]) {
  %365 = @func_4585() /* ty=(Tensor[(225), float64],) */;
  %366 = %365.0;
  %367 = cast(%var_4742, dtype="float32") /* ty=Tensor[(225), float32] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(1), int32] */;
  %369 = cast(%366, dtype="float32") /* ty=Tensor[(225), float32] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?), float32] */;
  %371 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %372 = multiply(%369, %370) /* ty=Tensor[(225), float32] */;
  %373 = %371.0;
  (%372, %373)
}

def @func_4421() -> (Tensor[(11, 14, 10), bool],) {
  %374 = @func_3679() /* ty=Tensor[(11, 14, 10), bool] */;
  (%374,)
}

def @func_3575() -> (Tensor[(6, 45), int16],) {
  %375 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %376 = %375.3;
  (%376,)
}

def @func_6080(%var_6051: Tensor[(150), float32], %var_6061: Tensor[(6, 5, 9), uint16], %var_6076: Tensor[(128), float64]) -> (Tensor[(10, 3, 5), float32], Tensor[(105), float64], Tensor[(150), float32], Tensor[(6, 5, 9), float64], Tensor[(8, ?, 16), uint16], Tensor[(128), float64]) {
  %377 = cast(meta[relay.Constant][26] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %378 = cast(%var_6051, dtype="float32") /* ty=Tensor[(150), float32] */;
  %379 = reshape(%377, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %380 = reshape(%378, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %381 = @func_3996(%379, %380) /* ty=(Tensor[(11, 12, 6), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(11, 12, 6), float32]) */;
  %382 = @func_4393() /* ty=(Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) */;
  %383 = %382.2;
  %384 = cast(%var_6061, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %386 = cast(%383, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %388 = cast(%var_6076, dtype="float64") /* ty=Tensor[(128), float64] */;
  %389 = reshape(%388, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float64] */;
  %390 = %381.5;
  %391 = add(%386, %387) /* ty=Tensor[(6, 5, 9), float64] */;
  %392 = @func_5158(%389) /* ty=Tensor[(8, ?, 16), uint16] */;
  (%390, meta[relay.Constant][26] /* ty=Tensor[(105), float64] */, %var_6051, %391, %392, %var_6076)
}

def @func_4257(%var_4245: Tensor[(11, 7, 10), float64]) -> (Tensor[(11, 7, 10), float64],) {
  %393 = cast(%var_4245, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
  %394 = sqrt(%393) /* ty=Tensor[(11, 7, 10), float64] */;
  (%394,)
}

def @func_6350(%var_6339: Tensor[(135), float64]) -> (Tensor[(225), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64]) {
  %395 = @func_5370() /* ty=(Tensor[(225), float64],) */;
  %396 = cast(%var_6339, dtype="float64") /* ty=Tensor[(135), float64] */;
  %397 = reshape(%396, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %398 = %395.0;
  %399 = @func_2216(%397) /* ty=Tensor[(15, 3, 3), float64] */;
  (%398, %399, %var_6339)
}

def @func_3679() -> Tensor[(11, 14, 10), bool] {
  %400 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %400.0
}

def @func_217(%var_172: Tensor[(11, 14, 10), float32], %var_173: Tensor[(11, 14, 10), float32]) -> (Tensor[(11, 14, 10), bool],) {
  %401 = cast(%var_173, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %402 = shape_of(%var_172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%var_172, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %405 = equal(%403, %404) /* ty=Tensor[(11, 14, 10), bool] */;
  %406 = cast(%405, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %407 = shape_of(%var_173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %408 = cast(%var_173, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %409 = dyn.reshape(%406, %407, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %410 = less_equal(%408, %409) /* ty=Tensor[(11, 14, 10), bool] */;
  (%410,)
}

def @func_5929() -> (Tensor[(225), float64],) {
  %411 = @func_5370() /* ty=(Tensor[(225), float64],) */;
  %412 = %411.0;
  (%412,)
}

def @func_4393() -> (Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) {
  %413 = @func_3575() /* ty=(Tensor[(6, 45), int16],) */;
  %414 = %413.0;
  %415 = cast(%414, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %416 = cast(%414, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %417 = reshape(%415, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %418 = reshape(%416, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %419 = @func_470(%417, %418) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %420 = @func_3905() /* ty=Tensor[(225), float32] */;
  %421 = %419.1;
  (%414, %420, %421)
}

def @func_5158(%var_5123: Tensor[(8, 1, 16), float64]) -> Tensor[(8, ?, 16), uint16] {
  %422 = cast(%var_5123, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
  %423 = erf(%422) /* ty=Tensor[(8, 1, 16), float64] */;
  %424 = cast(%var_5123, dtype="uint16") /* ty=Tensor[(8, 1, 16), uint16] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="uint16") /* ty=Tensor[(8, 1, 16), uint16] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  logical_xor(%426, %427) /* ty=Tensor[(8, ?, 16), uint16] */
}

def @func_4480() -> (Tensor[(11, 12, 6), float32],) {
  %428 = @func_3647() /* ty=Tensor[(11, 12, 6), float32] */;
  (%428,)
}

def @func_3377(%var_3363: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64],) {
  %429 = cast(%var_3363, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
  %430 = atanh(%429) /* ty=Tensor[(14, 15, 7), float64] */;
  (%430,)
}

def @func_4192() -> (Tensor[(225), float64],) {
  %431 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %432 = %431.2;
  (%432,)
}

def @func_994(%var_966: Tensor[(6, 1, 7), float32]) -> (Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) {
  %433 = cast(%var_966, dtype="float32") /* ty=Tensor[(6, 1, 7), float32] */;
  %434 = rsqrt(%433) /* ty=Tensor[(6, 1, 7), float32] */;
  %435 = cast(%434, dtype="float32") /* ty=Tensor[(6, 1, 7), float32] */;
  %436 = cast(meta[relay.Constant][27] /* ty=Tensor[(144, 1), uint16] */, dtype="uint16") /* ty=Tensor[(144, 1), uint16] */;
  %437 = cast(meta[relay.Constant][27] /* ty=Tensor[(144, 1), uint16] */, dtype="uint16") /* ty=Tensor[(144, 1), uint16] */;
  %438 = cast(meta[relay.Constant][28] /* ty=Tensor[(154, 10), float32] */, dtype="float32") /* ty=Tensor[(154, 10), float32] */;
  %439 = cast(meta[relay.Constant][28] /* ty=Tensor[(154, 10), float32] */, dtype="bool") /* ty=Tensor[(154, 10), bool] */;
  %440 = reshape(%436, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %441 = reshape(%437, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %442 = reshape(%438, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %443 = reshape(%439, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %444 = @func_328(%440, %441, %442, %443) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */;
  %445 = cast(%var_966, dtype="int16") /* ty=Tensor[(6, 1, 7), int16] */;
  %446 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%434, dtype="int16") /* ty=Tensor[(6, 1, 7), int16] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %449 = log(%435) /* ty=Tensor[(6, 1, 7), float32] */;
  %450 = %444.1;
  %451 = add(%447, %448) /* ty=Tensor[(6, ?, 7), int16] */;
  (%449, %450, meta[relay.Constant][27] /* ty=Tensor[(144, 1), uint16] */, meta[relay.Constant][28] /* ty=Tensor[(154, 10), float32] */, %451)
}

def @func_6105(%var_6100: Tensor[(5, 9, 4), float32], %var_6101: Tensor[(5, 9, 4), float32]) -> Tensor[(5, 9, 4), bool] {
  %452 = cast(%var_6101, dtype="bool") /* ty=Tensor[(5, 9, 4), bool] */;
  %453 = shape_of(%var_6100, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_6100, dtype="bool") /* ty=Tensor[(5, 9, 4), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%454, %455) /* ty=Tensor[(5, 9, 4), bool] */
}

def @func_5370() -> (Tensor[(225), float64],) {
  %456 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %457 = %456.0;
  (%457,)
}

def @func_4371() -> (Tensor[(225), float32], Tensor[(3, 5, 7), float64], Tensor[(270), int16], Tensor[(21, 5), float64], Tensor[(6, 5, 9), uint16]) {
  %458 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %459 = %458.0;
  %460 = cast(%459, dtype="float32") /* ty=Tensor[(225), float32] */;
  %461 = cast(meta[relay.Constant][29] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %462 = cast(meta[relay.Constant][30] /* ty=Tensor[(21, 5), float64] */, dtype="float64") /* ty=Tensor[(21, 5), float64] */;
  %463 = reshape(%461, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %464 = reshape(%462, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %465 = @func_2904(%463, %464) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */;
  %466 = cast(meta[relay.Constant][29] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %467 = cast(meta[relay.Constant][29] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %468 = reshape(%466, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %469 = reshape(%467, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %470 = @func_470(%468, %469) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %471 = erf(%460) /* ty=Tensor[(225), float32] */;
  %472 = %465.5;
  %473 = %470.1;
  (%471, %472, meta[relay.Constant][29] /* ty=Tensor[(270), int16] */, meta[relay.Constant][30] /* ty=Tensor[(21, 5), float64] */, %473)
}

def @func_2216(%var_2206: Tensor[(15, 3, 3), float64]) -> Tensor[(15, 3, 3), float64] {
  %474 = cast(%var_2206, dtype="float64") /* ty=Tensor[(15, 3, 3), float64] */;
  cosh(%474) /* ty=Tensor[(15, 3, 3), float64] */
}

def @func_1697(%var_1667: Tensor[(13, 9, 7), int32], %var_1668: Tensor[(13, 9, 7), int32]) -> Tensor[(13, 9, 7), bool] {
  %475 = cast(%var_1668, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %476 = shape_of(%var_1667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_1667, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%477, %478) /* ty=Tensor[(13, 9, 7), bool] */
}

def @func_6720(%var_6707: Tensor[(490), uint8]) -> (Tensor[(270), int16], Tensor[(24, 2), float32], uint64, Tensor[(1120), float64], Tensor[(11, 12, 6), float32], Tensor[(14, 10, 16), bool], Tensor[(30, 9), int16], Tensor[(490), uint8], Tensor[(1, 225), float64]) {
  %479 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 2), float32] */, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %480 = cast(meta[relay.Constant][32] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %481 = reshape(%479, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), float32] */;
  %482 = reshape(%480, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %483 = @func_5029(%481, %482) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(490, 3), float64], Tensor[(270), int16], Tensor[(90, 3), int16], Tensor[(1120), int64], Tensor[(16, 1, 3), float64], Tensor[(3, 15, 11), float32], uint8) */;
  %484 = @func_5709() /* ty=(Tensor[(225), float64], Tensor[(225), float64], uint64) */;
  %485 = cast(meta[relay.Constant][32] /* ty=Tensor[(1120), int64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %486 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %487 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %488 = sin(%487) /* ty=Tensor[(14, 10, 16), float64] */;
  %489 = %484.2;
  %490 = cast(%489, dtype="uint64") /* ty=uint64 */;
  %491 = reshape(%490, newshape=[]) /* ty=uint64 */;
  %492 = @func_4669(%491) /* ty=(Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(225), float32]) */;
  %493 = %492.1;
  %494 = cast(%488, dtype="bool") /* ty=Tensor[(14, 10, 16), bool] */;
  %495 = cast(%493, dtype="bool") /* ty=bool */;
  %496 = cast(%var_6707, dtype="uint8") /* ty=Tensor[(490), uint8] */;
  %497 = %483.2;
  %498 = cast(%497, dtype="int16") /* ty=Tensor[(270), int16] */;
  %499 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 225), float64] */, dtype="float64") /* ty=Tensor[(1, 225), float64] */;
  %500 = reshape(%496, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), uint8] */;
  %501 = reshape(%498, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %502 = reshape(%499, newshape=[75, 3]) /* ty=Tensor[(75, 3), float64] */;
  %503 = @func_4331(%500, %501, %502) /* ty=(Tensor[(5, 14, 7), uint8], uint64, Tensor[(270), int16], Tensor[(75, 3), float64], Tensor[(11, 14, 10), bool], Tensor[(30, 9), int16], Tensor[(11, 14, 10), bool]) */;
  %504 = acosh(%485) /* ty=Tensor[(1120), float64] */;
  %505 = %486.0;
  %506 = greater(%494, %495) /* ty=Tensor[(14, 10, 16), bool] */;
  %507 = %503.5;
  (%497, meta[relay.Constant][31] /* ty=Tensor[(24, 2), float32] */, %489, %504, %505, %506, %507, %var_6707, meta[relay.Constant][34] /* ty=Tensor[(1, 225), float64] */)
}

def @func_614(%var_583: Tensor[(1, 15, 15), float64], %var_604: Tensor[(270), int16]) -> (Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) {
  %508 = cast(%var_583, dtype="float64") /* ty=Tensor[(1, 15, 15), float64] */;
  %509 = log(%508) /* ty=Tensor[(1, 15, 15), float64] */;
  %510 = cast(%509, dtype="float32") /* ty=Tensor[(1, 15, 15), float32] */;
  %511 = cast(%var_604, dtype="int16") /* ty=Tensor[(270), int16] */;
  %512 = cast(%var_604, dtype="int16") /* ty=Tensor[(270), int16] */;
  %513 = reshape(%511, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %514 = reshape(%512, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %515 = @func_470(%513, %514) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %516 = cast(meta[relay.Constant][35] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %517 = cast(meta[relay.Constant][35] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %518 = reshape(%516, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %519 = reshape(%517, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %520 = @func_217(%518, %519) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %521 = sigmoid(%510) /* ty=Tensor[(1, 15, 15), float32] */;
  %522 = %515.1;
  %523 = %520.0;
  (%521, %522, %var_604, %523, meta[relay.Constant][35] /* ty=Tensor[(1540), float32] */)
}

def @func_2686(%var_2608: Tensor[(3, 10, 14), float64], %var_2619: Tensor[(1540), float32], %var_2636: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) {
  %524 = cast(%var_2619, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %525 = cast(%var_2619, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %526 = reshape(%524, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %527 = reshape(%525, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %528 = @func_217(%526, %527) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %529 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %530 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %531 = cast(%var_2619, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %532 = cast(%var_2619, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %533 = reshape(%529, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %534 = reshape(%530, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %535 = reshape(%531, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %536 = reshape(%532, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %537 = @func_328(%533, %534, %535, %536) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */;
  %538 = cast(%var_2636, dtype="float64") /* ty=Tensor[(105), float64] */;
  %539 = reshape(%538, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %540 = cast(%var_2608, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
  %541 = log2(%540) /* ty=Tensor[(3, 10, 14), float64] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %543 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %544 = cast(meta[relay.Constant][36] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %545 = %528.0;
  %546 = cast(%545, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %547 = %537.2;
  %548 = cast(%547, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %549 = reshape(%543, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %550 = reshape(%544, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %551 = reshape(%546, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %552 = reshape(%548, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %553 = @func_328(%549, %550, %551, %552) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */;
  %554 = @func_1017(%539) /* ty=Tensor[(3, 5, 7), float64] */;
  %555 = atan(%542) /* ty=Tensor[(3, 10, 14), float32] */;
  %556 = %553.1;
  (%545, %var_2619, %547, meta[relay.Constant][36] /* ty=Tensor[(144), uint16] */, %554, %var_2636, %555, %556)
}

def @func_2904(%var_2870: Tensor[(270), int16], %var_2884: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) {
  %557 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %558 = cast(%var_2870, dtype="int16") /* ty=Tensor[(270), int16] */;
  %559 = cast(%var_2870, dtype="int16") /* ty=Tensor[(270), int16] */;
  %560 = reshape(%558, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %561 = reshape(%559, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %562 = @func_470(%560, %561) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %563 = cast(%var_2884, dtype="float64") /* ty=Tensor[(105), float64] */;
  %564 = reshape(%563, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %565 = @func_1017(%564) /* ty=Tensor[(3, 5, 7), float64] */;
  %566 = cast(%565, dtype="float64") /* ty=Tensor[(3, 5, 7), float64] */;
  %567 = reshape(%566, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %568 = %557.0;
  %569 = %562.0;
  %570 = @func_1017(%567) /* ty=Tensor[(3, 5, 7), float64] */;
  (%568, %569, %var_2870, %565, %var_2884, %570)
}

def @func_3442(%var_3382: Tensor[(14, 5), float64], %var_3414: Tensor[(270), int16], %var_3417: Tensor[(105), float64]) -> (Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  %571 = cast(%var_3382, dtype="float64") /* ty=Tensor[(14, 5), float64] */;
  %572 = cast(meta[relay.Constant][37] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %573 = cast(%var_3414, dtype="int16") /* ty=Tensor[(270), int16] */;
  %574 = reshape(%572, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %575 = reshape(%573, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %576 = @func_614(%574, %575) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %577 = cast(%var_3417, dtype="float64") /* ty=Tensor[(105), float64] */;
  %578 = reshape(%577, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %579 = cast(meta[relay.Constant][38] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %580 = cast(meta[relay.Constant][38] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %581 = reshape(%579, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %582 = reshape(%580, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %583 = acos(%571) /* ty=Tensor[(14, 5), float64] */;
  %584 = %576.1;
  %585 = @func_1017(%578) /* ty=Tensor[(3, 5, 7), float64] */;
  %586 = @func_1697(%581, %582) /* ty=Tensor[(13, 9, 7), bool] */;
  (%583, %584, meta[relay.Constant][37] /* ty=Tensor[(225), float64] */, %var_3414, %585, %var_3417, %586, meta[relay.Constant][38] /* ty=Tensor[(819), int32] */)
}

def @func_3996(%var_3960: Tensor[(105), float64], %var_3983: Tensor[(150), float32]) -> (Tensor[(11, 12, 6), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(11, 12, 6), float32]) {
  %587 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %588 = cast(%var_3960, dtype="float64") /* ty=Tensor[(105), float64] */;
  %589 = reshape(%588, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %590 = cast(meta[relay.Constant][39] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %591 = cast(meta[relay.Constant][39] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %592 = reshape(%590, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %593 = reshape(%591, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %594 = cast(%var_3983, dtype="float32") /* ty=Tensor[(150), float32] */;
  %595 = cast(%var_3983, dtype="float32") /* ty=Tensor[(150), float32] */;
  %596 = reshape(%594, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %597 = reshape(%595, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %598 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %599 = %598.0;
  %600 = cast(%599, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  %601 = %587.0;
  %602 = @func_1017(%589) /* ty=Tensor[(3, 5, 7), float64] */;
  %603 = @func_1697(%592, %593) /* ty=Tensor[(13, 9, 7), bool] */;
  %604 = @func_3586(%596, %597) /* ty=Tensor[(10, 3, 5), float32] */;
  %605 = sigmoid(%600) /* ty=Tensor[(11, 12, 6), float32] */;
  (%601, %602, %var_3960, %603, meta[relay.Constant][39] /* ty=Tensor[(819), int32] */, %604, %var_3983, %605)
}

def @func_6979(%var_6831: Tensor[(7, 220), bool], %var_6858: Tensor[(70), float64], %var_6859: Tensor[(270), int16], %var_6949: Tensor[(42), float32]) -> (Tensor[(10, 3, 5), float32], Tensor[(70), float64], Tensor[(270), int16], Tensor[(105), float64], Tensor[(6, 45), float32], Tensor[(7, 220), float64], Tensor[(11, 12, 6), int8], Tensor[(13, 9, 7), uint32], Tensor[(144, 1), uint16], Tensor[(42), float32], Tensor[(11, 12, 6), float64]) {
  %606 = cast(%var_6831, dtype="bool") /* ty=Tensor[(7, 220), bool] */;
  %607 = reshape(%606, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %608 = @func_5083(%607) /* ty=(Tensor[(11, 14, 10), float32], Tensor[(10, 3, 5), float32], Tensor[(11, 14, 10), float64]) */;
  %609 = @func_3694() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %610 = %609.1;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %612 = rsqrt(%611) /* ty=Tensor[(6, 45), float64] */;
  %613 = cast(%612, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %614 = cast(%var_6831, dtype="float32") /* ty=Tensor[(7, 220), float32] */;
  %615 = log10(%614) /* ty=Tensor[(7, 220), float32] */;
  %616 = cast(%var_6831, dtype="bool") /* ty=Tensor[(7, 220), bool] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(2), int32] */;
  %618 = cast(%615, dtype="bool") /* ty=Tensor[(7, 220), bool] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %620 = equal(%618, %619) /* ty=Tensor[(7, 220), bool] */;
  %621 = cast(%620, dtype="float64") /* ty=Tensor[(7, 220), float64] */;
  %622 = shape_of(%615, dtype="int32") /* ty=Tensor[(2), int32] */;
  %623 = cast(%615, dtype="float64") /* ty=Tensor[(7, 220), float64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %625 = @func_4480() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %626 = %625.0;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(11, 12, 6), float64] */;
  %628 = log10(%627) /* ty=Tensor[(11, 12, 6), float64] */;
  %629 = cast(%626, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
  %630 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%628, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = less(%631, %632) /* ty=Tensor[(11, 12, 6), bool] */;
  %634 = cast(%626, dtype="int8") /* ty=Tensor[(11, 12, 6), int8] */;
  %635 = shape_of(%633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%633, dtype="int8") /* ty=Tensor[(11, 12, 6), int8] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %638 = cast(%var_6858, dtype="float64") /* ty=Tensor[(70), float64] */;
  %639 = cast(%var_6859, dtype="int16") /* ty=Tensor[(270), int16] */;
  %640 = cast(meta[relay.Constant][40] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %641 = reshape(%638, newshape=[14, 5]) /* ty=Tensor[(14, 5), float64] */;
  %642 = reshape(%639, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %643 = reshape(%640, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %644 = @func_3442(%641, %642, %643) /* ty=(Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */;
  %645 = %644.6;
  %646 = cast(meta[relay.Constant][41] /* ty=Tensor[(13, 9, 7), bool] */, dtype="uint32") /* ty=Tensor[(13, 9, 7), uint32] */;
  %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%645, dtype="uint32") /* ty=Tensor[(13, 9, 7), uint32] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %650 = cast(%var_6949, dtype="float32") /* ty=Tensor[(42), float32] */;
  %651 = reshape(%650, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), float32] */;
  %652 = @func_994(%651) /* ty=(Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) */;
  %653 = cast(%628, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  %654 = atanh(%653) /* ty=Tensor[(11, 12, 6), float32] */;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(11, 12, 6), float64] */;
  %656 = %608.1;
  %657 = atanh(%613) /* ty=Tensor[(6, 45), float32] */;
  %658 = multiply(%623, %624) /* ty=Tensor[(7, 220), float64] */;
  %659 = bitwise_or(%636, %637) /* ty=Tensor[(11, 12, 6), int8] */;
  %660 = multiply(%648, %649) /* ty=Tensor[(13, 9, 7), uint32] */;
  %661 = %652.2;
  %662 = log2(%655) /* ty=Tensor[(11, 12, 6), float64] */;
  (%656, %var_6858, %var_6859, meta[relay.Constant][40] /* ty=Tensor[(105), float64] */, %657, %658, %659, %660, %661, %var_6949, %662)
}

def @func_3694() -> (Tensor[(225), float64], Tensor[(6, 45), int16]) {
  %663 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %664 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %665 = %663.2;
  %666 = %664.3;
  (%665, %666)
}

def @func_699(%var_693: Tensor[(2, 13, 11), int16], %var_694: Tensor[(2, 13, 11), int16]) -> Tensor[(2, 13, 11), bool] {
  %667 = cast(%var_694, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %668 = shape_of(%var_693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_693, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%669, %670) /* ty=Tensor[(2, 13, 11), bool] */
}

def @func_5689(%var_5674: Tensor[(225), float64], %var_5683: uint64) -> (Tensor[(225), bool], Tensor[(10, 3, 5), float32], uint64, Tensor[(1456), uint64], Tensor[(150), float32]) {
  %671 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %672 = %671.0;
  %673 = cast(%var_5674, dtype="bool") /* ty=Tensor[(225), bool] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(1), int32] */;
  %675 = cast(%672, dtype="bool") /* ty=Tensor[(225), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?), bool] */;
  %677 = cast(%var_5683, dtype="uint64") /* ty=uint64 */;
  %678 = cast(meta[relay.Constant][42] /* ty=Tensor[(1456), uint64] */, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %679 = cast(meta[relay.Constant][43] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %680 = reshape(%677, newshape=[]) /* ty=uint64 */;
  %681 = reshape(%678, newshape=[8, 13, 14]) /* ty=Tensor[(8, 13, 14), uint64] */;
  %682 = reshape(%679, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %683 = @func_3813(%680, %681, %682) /* ty=(Tensor[(8, 13, 14), bool], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(10, 3, 5), float32], Tensor[(8, 13, 14), bool], Tensor[(4, 11, 3), float64], Tensor[(270, 1), int16], Tensor[(225), float64], Tensor[(3, 15, 11), int16], Tensor[(270), int16], Tensor[(8, 13, 14), float32]) */;
  %684 = less_equal(%675, %676) /* ty=Tensor[(225), bool] */;
  %685 = %683.3;
  (%684, %685, %var_5683, meta[relay.Constant][42] /* ty=Tensor[(1456), uint64] */, meta[relay.Constant][43] /* ty=Tensor[(150), float32] */)
}

def @func_4709() -> Tensor[(11, 14, 10), bool] {
  @func_3231() /* ty=Tensor[(11, 14, 10), bool] */
}

def @func_3647() -> Tensor[(11, 12, 6), float32] {
  %686 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %687 = %686.0;
  %688 = cast(%687, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  acosh(%688) /* ty=Tensor[(11, 12, 6), float32] */
}

def @func_5657() -> Tensor[(6, 45), float32] {
  %689 = @func_4393() /* ty=(Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) */;
  %690 = %689.0;
  %691 = cast(meta[relay.Constant][44] /* ty=Tensor[(6, 45), int16] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(2), int32] */;
  %693 = cast(%690, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  floor_mod(%693, %694) /* ty=Tensor[(6, 45), float32] */
}

def @func_1017(%var_1006: Tensor[(3, 5, 7), float64]) -> Tensor[(3, 5, 7), float64] {
  %695 = cast(%var_1006, dtype="float64") /* ty=Tensor[(3, 5, 7), float64] */;
  cos(%695) /* ty=Tensor[(3, 5, 7), float64] */
}

def @func_3231() -> Tensor[(11, 14, 10), bool] {
  %696 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %696.1
}

def @main(%var_7042: Tensor[(270), int16], %var_7043: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(270), int16], Tensor[(270), float64], Tensor[(225), float64], Tensor[(11, 14, 10), float64], Tensor[(3, 5, 7), int32]) {
  %697 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %698 = cast(%var_7042, dtype="int16") /* ty=Tensor[(270), int16] */;
  %699 = cast(%var_7043, dtype="float64") /* ty=Tensor[(105), float64] */;
  %700 = reshape(%698, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %701 = reshape(%699, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %702 = @func_2904(%700, %701) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */;
  %703 = cast(%var_7042, dtype="float64") /* ty=Tensor[(270), float64] */;
  %704 = @func_4585() /* ty=(Tensor[(225), float64],) */;
  %705 = cast(%var_7043, dtype="float64") /* ty=Tensor[(105), float64] */;
  %706 = reshape(%705, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %707 = @func_2989(%706) /* ty=(Tensor[(11, 14, 10), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64]) */;
  %708 = %707.1;
  %709 = cast(%var_7043, dtype="int32") /* ty=Tensor[(105), int32] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="int32") /* ty=Tensor[(3, 5, 7), int32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %713 = %697.0;
  %714 = %702.2;
  %715 = asin(%703) /* ty=Tensor[(270), float64] */;
  %716 = %704.0;
  %717 = @func_5544() /* ty=Tensor[(11, 14, 10), float64] */;
  %718 = left_shift(%711, %712) /* ty=Tensor[(3, 5, 7), int32] */;
  (%713, %714, %715, %716, %717, %718)
}

def @func_2262(%var_2228: Tensor[(1, 8, 16), int16], %var_2229: Tensor[(6, 8, 16), int16]) -> (Tensor[(6, 8, 16), int16], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(15, 3, 3), float64], Tensor[(3, 45), float64], Tensor[(154, 10), float32], Tensor[(42), float32]) {
  %719 = cast(%var_2228, dtype="int16") /* ty=Tensor[(1, 8, 16), int16] */;
  %720 = cast(%var_2229, dtype="int16") /* ty=Tensor[(6, 8, 16), int16] */;
  %721 = cast(meta[relay.Constant][45] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %722 = cast(meta[relay.Constant][45] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %723 = reshape(%721, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %724 = reshape(%722, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %725 = @func_470(%723, %724) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %726 = cast(meta[relay.Constant][46] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %727 = reshape(%726, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %728 = cast(meta[relay.Constant][47] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %729 = reshape(%728, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), float32] */;
  %730 = @func_994(%729) /* ty=(Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) */;
  %731 = subtract(%719, %720) /* ty=Tensor[(6, 8, 16), int16] */;
  %732 = %725.0;
  %733 = @func_2216(%727) /* ty=Tensor[(15, 3, 3), float64] */;
  %734 = %730.3;
  (%731, %732, meta[relay.Constant][45] /* ty=Tensor[(270), int16] */, %733, meta[relay.Constant][46] /* ty=Tensor[(3, 45), float64] */, %734, meta[relay.Constant][47] /* ty=Tensor[(42), float32] */)
}

def @func_4845() -> (Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) {
  %735 = @func_3575() /* ty=(Tensor[(6, 45), int16],) */;
  %736 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %737 = %735.0;
  (%736, %737)
}

def @func_5447(%var_5432: Tensor[(6, 45), int16]) -> (Tensor[(6, 45), float64],) {
  %738 = @func_4845() /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) */;
  %739 = %738.1;
  %740 = cast(%var_5432, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(2), int32] */;
  %742 = cast(%739, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %744 = floor_divide(%742, %743) /* ty=Tensor[(6, 45), float64] */;
  (%744,)
}

def @func_5895() -> Tensor[(225), float64] {
  %745 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %745.0
}

def @func_5476() -> Tensor[(270), int16] {
  %746 = @func_4371() /* ty=(Tensor[(225), float32], Tensor[(3, 5, 7), float64], Tensor[(270), int16], Tensor[(21, 5), float64], Tensor[(6, 5, 9), uint16]) */;
  %746.2
}

def @func_2738() -> (Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) {
  %747 = cast(meta[relay.Constant][48] /* ty=Tensor[(11, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  %748 = cast(meta[relay.Constant][49] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %749 = cast(meta[relay.Constant][50] /* ty=Tensor[(6, 45), int16] */, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %750 = reshape(%748, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %751 = reshape(%749, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %752 = @func_614(%750, %751) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %753 = sqrt(%747) /* ty=Tensor[(11, 12, 6), float32] */;
  %754 = %752.3;
  (%753, %754, meta[relay.Constant][49] /* ty=Tensor[(225), float64] */, meta[relay.Constant][50] /* ty=Tensor[(6, 45), int16] */)
}

def @func_4148() -> Tensor[(225), float32] {
  @func_3905() /* ty=Tensor[(225), float32] */
}

def @func_6575(%var_6571: Tensor[(10, 9, 11), int32]) -> (Tensor[(10, 9, 11), bool],) {
  %755 = cast(%var_6571, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %756 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(10, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(meta[relay.Constant][51] /* ty=Tensor[(10, 9, 11), int32] */, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %759 = greater_equal(%757, %758) /* ty=Tensor[(10, 9, 11), bool] */;
  (%759,)
}

def @func_5709() -> (Tensor[(225), float64], Tensor[(225), float64], uint64) {
  %760 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %761 = cast(meta[relay.Constant][52] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %762 = %760.0;
  %763 = cast(%762, dtype="float64") /* ty=Tensor[(225), float64] */;
  %764 = reshape(%761, newshape=[]) /* ty=uint64 */;
  %765 = reshape(%763, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %766 = @func_4878(%764, %765) /* ty=(Tensor[(11, 12, 6), bool], Tensor[(225), float64], uint64, Tensor[(270), int16], Tensor[(225), float64]) */;
  %767 = %766.1;
  (%762, %767, meta[relay.Constant][52] /* ty=uint64 */)
}

def @func_5083(%var_5057: Tensor[(11, 14, 10), bool]) -> (Tensor[(11, 14, 10), float32], Tensor[(10, 3, 5), float32], Tensor[(11, 14, 10), float64]) {
  %768 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %769 = cast(%var_5057, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %773 = @func_4839() /* ty=(Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) */;
  %774 = cast(%var_5057, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %775 = maximum(%771, %772) /* ty=Tensor[(11, 14, 10), float32] */;
  %776 = %773.1;
  %777 = atanh(%774) /* ty=Tensor[(11, 14, 10), float64] */;
  (%775, %776, %777)
}

def @func_6476() -> Tensor[(225), float64] {
  %778 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %778.0
}

def @func_3357(%var_3331: Tensor[(11, 6, 3), int16], %var_3345: Tensor[(1540), float32], %var_3346: Tensor[(105), float64]) -> (Tensor[(11, 6, 3), float32], Tensor[(1540), float32], Tensor[(420, 1), float64], Tensor[(1540), float32], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  %779 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 6, 3), int16] */, dtype="int16") /* ty=Tensor[(11, 6, 3), int16] */;
  %780 = shape_of(%var_3331, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%var_3331, dtype="int16") /* ty=Tensor[(11, 6, 3), int16] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %783 = bitwise_or(%781, %782) /* ty=Tensor[(11, 6, 3), int16] */;
  %784 = cast(%783, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
  %785 = cast(meta[relay.Constant][54] /* ty=Tensor[(420, 1), float64] */, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
  %786 = cast(%var_3345, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %787 = cast(%var_3346, dtype="float64") /* ty=Tensor[(105), float64] */;
  %788 = reshape(%785, newshape=[3, 10, 14]) /* ty=Tensor[(3, 10, 14), float64] */;
  %789 = reshape(%786, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %790 = reshape(%787, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %791 = @func_2686(%788, %789, %790) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) */;
  %792 = cast(meta[relay.Constant][55] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %793 = cast(meta[relay.Constant][55] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %794 = reshape(%792, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %795 = reshape(%793, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %796 = cosh(%784) /* ty=Tensor[(11, 6, 3), float32] */;
  %797 = %791.1;
  %798 = @func_1697(%794, %795) /* ty=Tensor[(13, 9, 7), bool] */;
  (%796, %797, meta[relay.Constant][54] /* ty=Tensor[(420, 1), float64] */, %var_3345, %var_3346, %798, meta[relay.Constant][55] /* ty=Tensor[(819), int32] */)
}

def @func_4927(%var_4918: Tensor[(420), float64], %var_4919: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), bool], Tensor[(1, 15, 15), float32], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(420), float64], Tensor[(105), float64]) {
  %799 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %800 = cast(meta[relay.Constant][56] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %801 = cast(meta[relay.Constant][57] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %802 = reshape(%800, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %803 = reshape(%801, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %804 = @func_614(%802, %803) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %805 = cast(%var_4918, dtype="float64") /* ty=Tensor[(420), float64] */;
  %806 = %799.1;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %808 = cast(%var_4919, dtype="float64") /* ty=Tensor[(105), float64] */;
  %809 = reshape(%805, newshape=[3, 10, 14]) /* ty=Tensor[(3, 10, 14), float64] */;
  %810 = reshape(%807, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %811 = reshape(%808, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %812 = @func_2686(%809, %810, %811) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) */;
  %813 = @func_4709() /* ty=Tensor[(11, 14, 10), bool] */;
  %814 = %804.0;
  %815 = %812.4;
  (%813, %806, %814, meta[relay.Constant][56] /* ty=Tensor[(225), float64] */, meta[relay.Constant][57] /* ty=Tensor[(270), int16] */, %815, %var_4918, %var_4919)
}

def @func_3586(%var_3579: Tensor[(10, 3, 5), float32], %var_3580: Tensor[(10, 3, 5), float32]) -> Tensor[(10, 3, 5), float32] {
  %816 = cast(%var_3580, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %817 = shape_of(%var_3579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %818 = cast(%var_3579, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %819 = dyn.reshape(%816, %817, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%818, %819) /* ty=Tensor[(10, 3, 5), float32] */
}

def @func_6783(%var_6771: Tensor[(12, 3, 12), uint8]) -> (Tensor[(12, 3, 12), bool],) {
  %820 = cast(%var_6771, dtype="uint8") /* ty=Tensor[(12, 3, 12), uint8] */;
  %821 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(12, 3, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %822 = cast(meta[relay.Constant][58] /* ty=Tensor[(12, 3, 12), uint8] */, dtype="uint8") /* ty=Tensor[(12, 3, 12), uint8] */;
  %823 = dyn.reshape(%820, %821, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %824 = bitwise_or(%822, %823) /* ty=Tensor[(12, 3, 12), uint8] */;
  %825 = cast(meta[relay.Constant][58] /* ty=Tensor[(12, 3, 12), uint8] */, dtype="bool") /* ty=Tensor[(12, 3, 12), bool] */;
  %826 = shape_of(%824, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(%824, dtype="bool") /* ty=Tensor[(12, 3, 12), bool] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %829 = logical_and(%827, %828) /* ty=Tensor[(12, 3, 12), bool] */;
  (%829,)
}

def @func_6285() -> (Tensor[(225), float32], Tensor[(225), float32]) {
  %830 = @func_5731() /* ty=(Tensor[(225), float32],) */;
  %831 = %830.0;
  %832 = @func_3905() /* ty=Tensor[(225), float32] */;
  (%831, %832)
}

def @func_4789(%var_4779: Tensor[(1, 3, 6), float64]) -> (Tensor[(?, 3, 6), float64],) {
  %833 = cast(%var_4779, dtype="float64") /* ty=Tensor[(1, 3, 6), float64] */;
  %834 = exp(%833) /* ty=Tensor[(1, 3, 6), float64] */;
  %835 = cast(%834, dtype="float64") /* ty=Tensor[(1, 3, 6), float64] */;
  %836 = shape_of(%var_4779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%var_4779, dtype="float64") /* ty=Tensor[(1, 3, 6), float64] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %839 = floor_divide(%837, %838) /* ty=Tensor[(?, 3, 6), float64] */;
  (%839,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6249(%var_6248: Tensor[(11, 14, 10), bool]) -> (Tensor[(10, 3, 5), float32], Tensor[(13, 9, 7), uint64], Tensor[(11, 14, 10), bool]) {
  %19 = fn (%var_6234: Tensor[(11, 14, 10), bool]) -> (Tensor[(10, 3, 5), float32], Tensor[(13, 9, 7), uint64], Tensor[(11, 14, 10), bool]) {
    %0 = @func_4839() /* ty=(Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
    %3 = reshape(%1, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
    %4 = reshape(%2, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
    %5 = @func_1697(%3, %4) /* ty=Tensor[(13, 9, 7), bool] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(819), int32] */, dtype="uint64") /* ty=Tensor[(819), uint64] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="uint64") /* ty=Tensor[(13, 9, 7), uint64] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %10 = @func_4421() /* ty=(Tensor[(11, 14, 10), bool],) */;
    %11 = %10.0;
    %12 = cast(%var_6234, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %16 = %0.1;
    %17 = bitwise_and(%8, %9) /* ty=Tensor[(13, 9, 7), uint64] */;
    %18 = less(%14, %15) /* ty=Tensor[(11, 14, 10), bool] */;
    (%16, %17, %18)
  };
  %19(%var_6248) /* ty=(Tensor[(10, 3, 5), float32], Tensor[(13, 9, 7), uint64], Tensor[(11, 14, 10), bool]) */
}

def @func_3868() -> (Tensor[(11, 12, 6), float32],) {
  %20 = @func_3647() /* ty=Tensor[(11, 12, 6), float32] */;
  (%20,)
}

def @func_6020(%var_6019: Tensor[(7, 105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(1, 70), float64], Tensor[(7, 105), bool]) {
  %29 = fn (%var_6007: Tensor[(7, 105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(1, 70), float64], Tensor[(7, 105), bool]) {
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(1, 70), float64] */, dtype="float64") /* ty=Tensor[(1, 70), float64] */;
    %22 = reshape(%21, newshape=[70]) /* ty=Tensor[(70), float64] */;
    %23 = @func_5969(%22) /* ty=(Tensor[(6, 45), float64], Tensor[(13, 9, 7), bool], Tensor[(70), float64], Tensor[(1, 105), float64]) */;
    %24 = %23.3;
    %25 = cast(%24, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
    %26 = cast(%var_6007, dtype="bool") /* ty=Tensor[(7, 105), bool] */;
    %27 = @func_3679() /* ty=Tensor[(11, 14, 10), bool] */;
    %28 = greater(%25, %26) /* ty=Tensor[(7, 105), bool] */;
    (%27, meta[relay.Constant][1] /* ty=Tensor[(1, 70), float64] */, %28)
  };
  %29(%var_6019) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(1, 70), float64], Tensor[(7, 105), bool]) */
}

def @func_5855() -> (Tensor[(225), float64], uint64, uint64) {
  %38 = fn () -> (Tensor[(225), float64], uint64, uint64) {
    %30 = @func_4192() /* ty=(Tensor[(225), float64],) */;
    %31 = %30.0;
    %32 = cast(%31, dtype="float64") /* ty=Tensor[(225), float64] */;
    %33 = cast(meta[relay.Constant][2] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %34 = reshape(%32, newshape=[225]) /* ty=Tensor[(225), float64] */;
    %35 = reshape(%33, newshape=[]) /* ty=uint64 */;
    %36 = @func_5689(%34, %35) /* ty=(Tensor[(225), bool], Tensor[(10, 3, 5), float32], uint64, Tensor[(1456), uint64], Tensor[(150), float32]) */;
    %37 = %36.2;
    (%31, %37, meta[relay.Constant][2] /* ty=uint64 */)
  };
  %38() /* ty=(Tensor[(225), float64], uint64, uint64) */
}

def @func_2262(%var_2228: Tensor[(1, 8, 16), int16], %var_2229: Tensor[(6, 8, 16), int16]) -> (Tensor[(6, 8, 16), int16], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(15, 3, 3), float64], Tensor[(3, 45), float64], Tensor[(154, 10), float32], Tensor[(42), float32]) {
  %39 = cast(%var_2228, dtype="int16") /* ty=Tensor[(1, 8, 16), int16] */;
  %40 = cast(%var_2229, dtype="int16") /* ty=Tensor[(6, 8, 16), int16] */;
  %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %42 = cast(meta[relay.Constant][3] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %43 = reshape(%41, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %44 = reshape(%42, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %45 = @func_470(%43, %44) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %46 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 45), float64] */, dtype="float64") /* ty=Tensor[(3, 45), float64] */;
  %47 = reshape(%46, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %49 = reshape(%48, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), float32] */;
  %50 = @func_994(%49) /* ty=(Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) */;
  %51 = subtract(%39, %40) /* ty=Tensor[(6, 8, 16), int16] */;
  %52 = %45.0;
  %53 = @func_2216(%47) /* ty=Tensor[(15, 3, 3), float64] */;
  %54 = %50.3;
  (%51, %52, meta[relay.Constant][3] /* ty=Tensor[(270), int16] */, %53, meta[relay.Constant][4] /* ty=Tensor[(3, 45), float64] */, %54, meta[relay.Constant][5] /* ty=Tensor[(42), float32] */)
}

def @func_221(%var_219: Tensor[(11, 14, 10), float32], %var_220: Tensor[(11, 14, 10), float32]) -> (Tensor[(11, 14, 10), bool],) {
  @func_217(%var_219, %var_220) /* ty=(Tensor[(11, 14, 10), bool],) */
}

def @func_5329(%var_5328: Tensor[(105), float64]) -> (Tensor[(6, 45), int16], Tensor[(270), int16], Tensor[(105), float64], Tensor[(11, 14, 10), bool]) {
  %64 = fn (%var_5308: Tensor[(105), float64]) -> (Tensor[(6, 45), int16], Tensor[(270), int16], Tensor[(105), float64], Tensor[(11, 14, 10), bool]) {
    %55 = @func_4845() /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) */;
    %56 = %55.1;
    %57 = cast(%56, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
    %58 = cast(%var_5308, dtype="float64") /* ty=Tensor[(105), float64] */;
    %59 = reshape(%57, newshape=[270]) /* ty=Tensor[(270), int16] */;
    %60 = reshape(%58, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %61 = @func_2904(%59, %60) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */;
    %62 = %61.2;
    %63 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
    (%56, %62, %var_5308, %63)
  };
  %64(%var_5328) /* ty=(Tensor[(6, 45), int16], Tensor[(270), int16], Tensor[(105), float64], Tensor[(11, 14, 10), bool]) */
}

def @func_5370() -> (Tensor[(225), float64],) {
  %65 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %66 = %65.0;
  (%66,)
}

def @func_4394() -> (Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) {
  %76 = fn () -> (Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) {
    %67 = @func_3575() /* ty=(Tensor[(6, 45), int16],) */;
    %68 = %67.0;
    %69 = cast(%68, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
    %70 = cast(%68, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
    %71 = reshape(%69, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %72 = reshape(%70, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %73 = @func_470(%71, %72) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
    %74 = @func_3905() /* ty=Tensor[(225), float32] */;
    %75 = %73.1;
    (%68, %74, %75)
  };
  %76() /* ty=(Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) */
}

def @func_2738() -> (Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) {
  %77 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 12, 6), float32] */, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  %78 = cast(meta[relay.Constant][7] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %79 = cast(meta[relay.Constant][8] /* ty=Tensor[(6, 45), int16] */, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %80 = reshape(%78, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %81 = reshape(%79, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %82 = @func_614(%80, %81) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %83 = sqrt(%77) /* ty=Tensor[(11, 12, 6), float32] */;
  %84 = %82.3;
  (%83, %84, meta[relay.Constant][7] /* ty=Tensor[(225), float64] */, meta[relay.Constant][8] /* ty=Tensor[(6, 45), int16] */)
}

def @func_6478() -> Tensor[(225), float64] {
  @func_6476() /* ty=Tensor[(225), float64] */
}

def @func_6720(%var_6707: Tensor[(490), uint8]) -> (Tensor[(270), int16], Tensor[(24, 2), float32], uint64, Tensor[(1120), float64], Tensor[(11, 12, 6), float32], Tensor[(14, 10, 16), bool], Tensor[(30, 9), int16], Tensor[(490), uint8], Tensor[(1, 225), float64]) {
  %85 = cast(meta[relay.Constant][9] /* ty=Tensor[(24, 2), float32] */, dtype="float32") /* ty=Tensor[(24, 2), float32] */;
  %86 = cast(meta[relay.Constant][10] /* ty=Tensor[(1120), int64] */, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %87 = reshape(%85, newshape=[16, 1, 3]) /* ty=Tensor[(16, 1, 3), float32] */;
  %88 = reshape(%86, newshape=[1120]) /* ty=Tensor[(1120), int64] */;
  %89 = @func_5029(%87, %88) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(490, 3), float64], Tensor[(270), int16], Tensor[(90, 3), int16], Tensor[(1120), int64], Tensor[(16, 1, 3), float64], Tensor[(3, 15, 11), float32], uint8) */;
  %90 = @func_5709() /* ty=(Tensor[(225), float64], Tensor[(225), float64], uint64) */;
  %91 = cast(meta[relay.Constant][10] /* ty=Tensor[(1120), int64] */, dtype="float64") /* ty=Tensor[(1120), float64] */;
  %92 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %93 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 10, 16), float64] */;
  %94 = sin(%93) /* ty=Tensor[(14, 10, 16), float64] */;
  %95 = %90.2;
  %96 = cast(%95, dtype="uint64") /* ty=uint64 */;
  %97 = reshape(%96, newshape=[]) /* ty=uint64 */;
  %98 = @func_4669(%97) /* ty=(Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(225), float32]) */;
  %99 = %98.1;
  %100 = cast(%94, dtype="bool") /* ty=Tensor[(14, 10, 16), bool] */;
  %101 = cast(%99, dtype="bool") /* ty=bool */;
  %102 = cast(%var_6707, dtype="uint8") /* ty=Tensor[(490), uint8] */;
  %103 = %89.2;
  %104 = cast(%103, dtype="int16") /* ty=Tensor[(270), int16] */;
  %105 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 225), float64] */, dtype="float64") /* ty=Tensor[(1, 225), float64] */;
  %106 = reshape(%102, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), uint8] */;
  %107 = reshape(%104, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %108 = reshape(%105, newshape=[75, 3]) /* ty=Tensor[(75, 3), float64] */;
  %109 = @func_4331(%106, %107, %108) /* ty=(Tensor[(5, 14, 7), uint8], uint64, Tensor[(270), int16], Tensor[(75, 3), float64], Tensor[(11, 14, 10), bool], Tensor[(30, 9), int16], Tensor[(11, 14, 10), bool]) */;
  %110 = acosh(%91) /* ty=Tensor[(1120), float64] */;
  %111 = %92.0;
  %112 = greater(%100, %101) /* ty=Tensor[(14, 10, 16), bool] */;
  %113 = %109.5;
  (%103, meta[relay.Constant][9] /* ty=Tensor[(24, 2), float32] */, %95, %110, %111, %112, %113, %var_6707, meta[relay.Constant][12] /* ty=Tensor[(1, 225), float64] */)
}

def @func_3232() -> Tensor[(11, 14, 10), bool] {
  %115 = fn () -> Tensor[(11, 14, 10), bool] {
    %114 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
    %114.1
  };
  %115() /* ty=Tensor[(11, 14, 10), bool] */
}

def @func_5085(%var_5084: Tensor[(11, 14, 10), bool]) -> (Tensor[(11, 14, 10), float32], Tensor[(10, 3, 5), float32], Tensor[(11, 14, 10), float64]) {
  %126 = fn (%var_5057: Tensor[(11, 14, 10), bool]) -> (Tensor[(11, 14, 10), float32], Tensor[(10, 3, 5), float32], Tensor[(11, 14, 10), float64]) {
    %116 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
    %117 = cast(%var_5057, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(3), int32] */;
    %119 = cast(%116, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %121 = @func_4839() /* ty=(Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) */;
    %122 = cast(%var_5057, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
    %123 = maximum(%119, %120) /* ty=Tensor[(11, 14, 10), float32] */;
    %124 = %121.1;
    %125 = atanh(%122) /* ty=Tensor[(11, 14, 10), float64] */;
    (%123, %124, %125)
  };
  %126(%var_5084) /* ty=(Tensor[(11, 14, 10), float32], Tensor[(10, 3, 5), float32], Tensor[(11, 14, 10), float64]) */
}

def @func_3907() -> Tensor[(225), float32] {
  @func_3905() /* ty=Tensor[(225), float32] */
}

def @func_333(%var_329: Tensor[(16, 3, 3), uint16], %var_330: Tensor[(16, 3, 3), uint16], %var_331: Tensor[(1540), float32], %var_332: Tensor[(11, 14, 10), bool]) -> (Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) {
  %154 = fn (%var_297: Tensor[(16, 3, 3), uint16], %var_298: Tensor[(16, 3, 3), uint16], %var_307: Tensor[(1540), float32], %var_323: Tensor[(11, 14, 10), bool]) -> (Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) {
    %127 = cast(%var_298, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
    %128 = shape_of(%var_297, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%var_297, dtype="bool") /* ty=Tensor[(16, 3, 3), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = cast(%var_307, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %132 = cast(%var_307, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %133 = reshape(%131, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
    %134 = reshape(%132, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
    %135 = @func_217(%133, %134) /* ty=(Tensor[(11, 14, 10), bool],) */;
    %136 = %135.0;
    %137 = cast(%136, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %138 = cast(%136, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %139 = reshape(%137, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
    %140 = reshape(%138, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
    %141 = @func_217(%139, %140) /* ty=(Tensor[(11, 14, 10), bool],) */;
    %142 = %141.0;
    %143 = cast(%var_307, dtype="bool") /* ty=Tensor[(1540), bool] */;
    %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
    %145 = cast(%142, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
    %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %147 = logical_and(%145, %146) /* ty=Tensor[(11, 14, 10), bool] */;
    %148 = cast(%var_323, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
    %150 = cast(%147, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %152 = greater(%129, %130) /* ty=Tensor[(16, 3, 3), bool] */;
    %153 = floor_mod(%150, %151) /* ty=Tensor[(11, 14, 10), float32] */;
    (%152, %136, %153)
  };
  %154(%var_329, %var_330, %var_331, %var_332) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */
}

def @func_5033(%var_5031: Tensor[(16, 1, 3), float32], %var_5032: Tensor[(1120), int64]) -> (Tensor[(14, 15, 7), float64], Tensor[(490, 3), float64], Tensor[(270), int16], Tensor[(90, 3), int16], Tensor[(1120), int64], Tensor[(16, 1, 3), float64], Tensor[(3, 15, 11), float32], uint8) {
  @func_5029(%var_5031, %var_5032) /* ty=(Tensor[(14, 15, 7), float64], Tensor[(490, 3), float64], Tensor[(270), int16], Tensor[(90, 3), int16], Tensor[(1120), int64], Tensor[(16, 1, 3), float64], Tensor[(3, 15, 11), float32], uint8) */
}

def @func_217(%var_172: Tensor[(11, 14, 10), float32], %var_173: Tensor[(11, 14, 10), float32]) -> (Tensor[(11, 14, 10), bool],) {
  %155 = cast(%var_173, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %156 = shape_of(%var_172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %157 = cast(%var_172, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %159 = equal(%157, %158) /* ty=Tensor[(11, 14, 10), bool] */;
  %160 = cast(%159, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %161 = shape_of(%var_173, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_173, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = less_equal(%162, %163) /* ty=Tensor[(11, 14, 10), bool] */;
  (%164,)
}

def @func_2991(%var_2990: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64]) {
  %172 = fn (%var_2982: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64]) {
    %165 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
    %166 = %165.1;
    %167 = cast(%166, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %168 = cast(%var_2982, dtype="float64") /* ty=Tensor[(105), float64] */;
    %169 = reshape(%168, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
    %170 = exp(%167) /* ty=Tensor[(11, 14, 10), float32] */;
    %171 = @func_1017(%169) /* ty=Tensor[(3, 5, 7), float64] */;
    (%170, %171, %var_2982)
  };
  %172(%var_2990) /* ty=(Tensor[(11, 14, 10), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64]) */
}

def @func_3590(%var_3588: Tensor[(10, 3, 5), float32], %var_3589: Tensor[(10, 3, 5), float32]) -> Tensor[(10, 3, 5), float32] {
  @func_3586(%var_3588, %var_3589) /* ty=Tensor[(10, 3, 5), float32] */
}

def @func_2813(%var_2811: uint64, %var_2812: Tensor[(4, 11, 3), uint64]) -> (Tensor[(4, 11, 3), uint64],) {
  %176 = fn (%var_2804: uint64, %var_2805: Tensor[(4, 11, 3), uint64]) -> (Tensor[(4, 11, 3), uint64],) {
    %173 = cast(%var_2804, dtype="uint64") /* ty=uint64 */;
    %174 = cast(%var_2805, dtype="uint64") /* ty=Tensor[(4, 11, 3), uint64] */;
    %175 = add(%173, %174) /* ty=Tensor[(4, 11, 3), uint64] */;
    (%175,)
  };
  %176(%var_2811, %var_2812) /* ty=(Tensor[(4, 11, 3), uint64],) */
}

def @func_4585() -> (Tensor[(225), float64],) {
  %177 = @func_3905() /* ty=Tensor[(225), float32] */;
  %178 = cast(%177, dtype="float64") /* ty=Tensor[(225), float64] */;
  %179 = atanh(%178) /* ty=Tensor[(225), float64] */;
  (%179,)
}

def @func_3870() -> (Tensor[(11, 12, 6), float32],) {
  @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */
}

def @func_5969(%var_5960: Tensor[(70), float64]) -> (Tensor[(6, 45), float64], Tensor[(13, 9, 7), bool], Tensor[(70), float64], Tensor[(1, 105), float64]) {
  %180 = @func_3694() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %181 = %180.1;
  %182 = cast(%181, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %183 = cast(%var_5960, dtype="float64") /* ty=Tensor[(70), float64] */;
  %184 = cast(%181, dtype="int16") /* ty=Tensor[(6, 45), int16] */;
  %185 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 105), float64] */, dtype="float64") /* ty=Tensor[(1, 105), float64] */;
  %186 = reshape(%183, newshape=[14, 5]) /* ty=Tensor[(14, 5), float64] */;
  %187 = reshape(%184, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %188 = reshape(%185, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %189 = @func_3442(%186, %187, %188) /* ty=(Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */;
  %190 = sigmoid(%182) /* ty=Tensor[(6, 45), float64] */;
  %191 = %189.6;
  (%190, %191, %var_5960, meta[relay.Constant][13] /* ty=Tensor[(1, 105), float64] */)
}

def @func_5731() -> (Tensor[(225), float32],) {
  %192 = @func_3905() /* ty=Tensor[(225), float32] */;
  (%192,)
}

def @func_5657() -> Tensor[(6, 45), float32] {
  %193 = @func_4393() /* ty=(Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) */;
  %194 = %193.0;
  %195 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 45), int16] */, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(2), int32] */;
  %197 = cast(%194, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  floor_mod(%197, %198) /* ty=Tensor[(6, 45), float32] */
}

def @func_3695() -> (Tensor[(225), float64], Tensor[(6, 45), int16]) {
  %203 = fn () -> (Tensor[(225), float64], Tensor[(6, 45), int16]) {
    %199 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
    %200 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
    %201 = %199.2;
    %202 = %200.3;
    (%201, %202)
  };
  %203() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */
}

def @func_2492(%var_2490: Tensor[(270), int16], %var_2491: Tensor[(10, 16, 7), int64]) -> (Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(10, 16, 7), uint64]) {
  @func_2488(%var_2490, %var_2491) /* ty=(Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(10, 16, 7), uint64]) */
}

def @func_4587() -> (Tensor[(225), float64],) {
  @func_4585() /* ty=(Tensor[(225), float64],) */
}

def @func_6723(%var_6721: Tensor[(490), uint8]) -> (Tensor[(270), int16], Tensor[(24, 2), float32], uint64, Tensor[(1120), float64], Tensor[(11, 12, 6), float32], Tensor[(14, 10, 16), bool], Tensor[(30, 9), int16], Tensor[(490), uint8], Tensor[(1, 225), float64]) {
  @func_6720(%var_6721) /* ty=(Tensor[(270), int16], Tensor[(24, 2), float32], uint64, Tensor[(1120), float64], Tensor[(11, 12, 6), float32], Tensor[(14, 10, 16), bool], Tensor[(30, 9), int16], Tensor[(490), uint8], Tensor[(1, 225), float64]) */
}

def @func_1701(%var_1699: Tensor[(13, 9, 7), int32], %var_1700: Tensor[(13, 9, 7), int32]) -> Tensor[(13, 9, 7), bool] {
  @func_1697(%var_1699, %var_1700) /* ty=Tensor[(13, 9, 7), bool] */
}

def @func_474(%var_472: Tensor[(6, 5, 9), int16], %var_473: Tensor[(6, 5, 9), int16]) -> (Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) {
  @func_470(%var_472, %var_473) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */
}

def @func_4881(%var_4879: uint64, %var_4880: Tensor[(225), float64]) -> (Tensor[(11, 12, 6), bool], Tensor[(225), float64], uint64, Tensor[(270), int16], Tensor[(225), float64]) {
  %219 = fn (%var_4872: uint64, %var_4874: Tensor[(225), float64]) -> (Tensor[(11, 12, 6), bool], Tensor[(225), float64], uint64, Tensor[(270), int16], Tensor[(225), float64]) {
    %204 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
    %205 = %204.0;
    %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 12, 6), float32] */, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
    %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
    %208 = cast(%205, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
    %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %210 = cast(%var_4872, dtype="uint64") /* ty=uint64 */;
    %211 = cast(meta[relay.Constant][16] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
    %212 = cast(%var_4874, dtype="float64") /* ty=Tensor[(225), float64] */;
    %213 = reshape(%210, newshape=[]) /* ty=uint64 */;
    %214 = reshape(%211, newshape=[30, 9]) /* ty=Tensor[(30, 9), int16] */;
    %215 = reshape(%212, newshape=[225]) /* ty=Tensor[(225), float64] */;
    %216 = @func_3846(%213, %214, %215) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) */;
    %217 = less_equal(%208, %209) /* ty=Tensor[(11, 12, 6), bool] */;
    %218 = %216.4;
    (%217, %218, %var_4872, meta[relay.Constant][16] /* ty=Tensor[(270), int16] */, %var_4874)
  };
  %219(%var_4879, %var_4880) /* ty=(Tensor[(11, 12, 6), bool], Tensor[(225), float64], uint64, Tensor[(270), int16], Tensor[(225), float64]) */
}

def @func_2216(%var_2206: Tensor[(15, 3, 3), float64]) -> Tensor[(15, 3, 3), float64] {
  %220 = cast(%var_2206, dtype="float64") /* ty=Tensor[(15, 3, 3), float64] */;
  cosh(%220) /* ty=Tensor[(15, 3, 3), float64] */
}

def @func_4847() -> (Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) {
  @func_4845() /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) */
}

def @func_617(%var_615: Tensor[(1, 15, 15), float64], %var_616: Tensor[(270), int16]) -> (Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) {
  %237 = fn (%var_583: Tensor[(1, 15, 15), float64], %var_604: Tensor[(270), int16]) -> (Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) {
    %221 = cast(%var_583, dtype="float64") /* ty=Tensor[(1, 15, 15), float64] */;
    %222 = log(%221) /* ty=Tensor[(1, 15, 15), float64] */;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(1, 15, 15), float32] */;
    %224 = cast(%var_604, dtype="int16") /* ty=Tensor[(270), int16] */;
    %225 = cast(%var_604, dtype="int16") /* ty=Tensor[(270), int16] */;
    %226 = reshape(%224, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %227 = reshape(%225, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %228 = @func_470(%226, %227) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
    %229 = cast(meta[relay.Constant][17] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %230 = cast(meta[relay.Constant][17] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %231 = reshape(%229, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
    %232 = reshape(%230, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
    %233 = @func_217(%231, %232) /* ty=(Tensor[(11, 14, 10), bool],) */;
    %234 = sigmoid(%223) /* ty=Tensor[(1, 15, 15), float32] */;
    %235 = %228.1;
    %236 = %233.0;
    (%234, %235, %var_604, %236, meta[relay.Constant][17] /* ty=Tensor[(1540), float32] */)
  };
  %237(%var_615, %var_616) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */
}

def @func_4259(%var_4258: Tensor[(11, 7, 10), float64]) -> (Tensor[(11, 7, 10), float64],) {
  %240 = fn (%var_4245: Tensor[(11, 7, 10), float64]) -> (Tensor[(11, 7, 10), float64],) {
    %238 = cast(%var_4245, dtype="float64") /* ty=Tensor[(11, 7, 10), float64] */;
    %239 = sqrt(%238) /* ty=Tensor[(11, 7, 10), float64] */;
    (%239,)
  };
  %240(%var_4258) /* ty=(Tensor[(11, 7, 10), float64],) */
}

def @func_4840() -> (Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) {
  %248 = fn () -> (Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) {
    %241 = @func_3575() /* ty=(Tensor[(6, 45), int16],) */;
    %242 = cast(meta[relay.Constant][18] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %244 = reshape(%242, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
    %245 = reshape(%243, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
    %246 = %241.0;
    %247 = @func_3586(%244, %245) /* ty=Tensor[(10, 3, 5), float32] */;
    (%246, %247, meta[relay.Constant][18] /* ty=Tensor[(150), float32] */)
  };
  %248() /* ty=(Tensor[(6, 45), int16], Tensor[(10, 3, 5), float32], Tensor[(150), float32]) */
}

def @func_2050(%var_2048: Tensor[(9, 9, 15), float32]) -> (Tensor[(9, 9, 15), float32], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) {
  @func_2047(%var_2048) /* ty=(Tensor[(9, 9, 15), float32], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */
}

def @func_3905() -> Tensor[(225), float32] {
  %249 = @func_3694() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %250 = %249.0;
  %251 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), float64] */, dtype="float32") /* ty=Tensor[(225), float32] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(1), int32] */;
  %253 = cast(%250, dtype="float32") /* ty=Tensor[(225), float32] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?), float32] */;
  minimum(%253, %254) /* ty=Tensor[(225), float32] */
}

def @func_3049(%var_3046: Tensor[(13, 16, 3), float64], %var_3047: uint64, %var_3048: Tensor[(13, 16, 3), float64]) -> (Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(13, 16, 3), uint64]) {
  %269 = fn (%var_3001: Tensor[(13, 16, 3), float64], %var_3018: uint64, %var_3034: Tensor[(13, 16, 3), float64]) -> (Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(13, 16, 3), uint64]) {
    %255 = cast(%var_3018, dtype="uint64") /* ty=uint64 */;
    %256 = cast(meta[relay.Constant][20] /* ty=Tensor[(132), uint64] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
    %257 = reshape(%255, newshape=[]) /* ty=uint64 */;
    %258 = reshape(%256, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint64] */;
    %259 = @func_2810(%257, %258) /* ty=(Tensor[(4, 11, 3), uint64],) */;
    %260 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 16, 1), float64] */, dtype="float64") /* ty=Tensor[(13, 16, 1), float64] */;
    %261 = cast(%var_3001, dtype="float64") /* ty=Tensor[(13, 16, 3), float64] */;
    %262 = power(%260, %261) /* ty=Tensor[(13, 16, 3), float64] */;
    %263 = cast(%var_3034, dtype="uint64") /* ty=Tensor[(13, 16, 3), uint64] */;
    %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
    %265 = cast(%262, dtype="uint64") /* ty=Tensor[(13, 16, 3), uint64] */;
    %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %267 = %259.0;
    %268 = right_shift(%265, %266) /* ty=Tensor[(13, 16, 3), uint64] */;
    (%267, %var_3018, meta[relay.Constant][20] /* ty=Tensor[(132), uint64] */, %268)
  };
  %269(%var_3046, %var_3047, %var_3048) /* ty=(Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(13, 16, 3), uint64]) */
}

def @func_4422() -> (Tensor[(11, 14, 10), bool],) {
  %271 = fn () -> (Tensor[(11, 14, 10), bool],) {
    %270 = @func_3679() /* ty=Tensor[(11, 14, 10), bool] */;
    (%270,)
  };
  %271() /* ty=(Tensor[(11, 14, 10), bool],) */
}

def @func_5931() -> (Tensor[(225), float64],) {
  @func_5929() /* ty=(Tensor[(225), float64],) */
}

def @func_6985(%var_6981: Tensor[(7, 220), bool], %var_6982: Tensor[(70), float64], %var_6983: Tensor[(270), int16], %var_6984: Tensor[(42), float32]) -> (Tensor[(10, 3, 5), float32], Tensor[(70), float64], Tensor[(270), int16], Tensor[(105), float64], Tensor[(6, 45), float32], Tensor[(7, 220), float64], Tensor[(11, 12, 6), int8], Tensor[(13, 9, 7), uint32], Tensor[(144, 1), uint16], Tensor[(42), float32], Tensor[(11, 12, 6), float64]) {
  @func_6979(%var_6981, %var_6982, %var_6983, %var_6984) /* ty=(Tensor[(10, 3, 5), float32], Tensor[(70), float64], Tensor[(270), int16], Tensor[(105), float64], Tensor[(6, 45), float32], Tensor[(7, 220), float64], Tensor[(11, 12, 6), int8], Tensor[(13, 9, 7), uint32], Tensor[(144, 1), uint16], Tensor[(42), float32], Tensor[(11, 12, 6), float64]) */
}

def @func_6476() -> Tensor[(225), float64] {
  %272 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %272.0
}

def @func_5692(%var_5690: Tensor[(225), float64], %var_5691: uint64) -> (Tensor[(225), bool], Tensor[(10, 3, 5), float32], uint64, Tensor[(1456), uint64], Tensor[(150), float32]) {
  %288 = fn (%var_5674: Tensor[(225), float64], %var_5683: uint64) -> (Tensor[(225), bool], Tensor[(10, 3, 5), float32], uint64, Tensor[(1456), uint64], Tensor[(150), float32]) {
    %273 = @func_4192() /* ty=(Tensor[(225), float64],) */;
    %274 = %273.0;
    %275 = cast(%var_5674, dtype="bool") /* ty=Tensor[(225), bool] */;
    %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(1), int32] */;
    %277 = cast(%274, dtype="bool") /* ty=Tensor[(225), bool] */;
    %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?), bool] */;
    %279 = cast(%var_5683, dtype="uint64") /* ty=uint64 */;
    %280 = cast(meta[relay.Constant][22] /* ty=Tensor[(1456), uint64] */, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
    %281 = cast(meta[relay.Constant][23] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %282 = reshape(%279, newshape=[]) /* ty=uint64 */;
    %283 = reshape(%280, newshape=[8, 13, 14]) /* ty=Tensor[(8, 13, 14), uint64] */;
    %284 = reshape(%281, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %285 = @func_3813(%282, %283, %284) /* ty=(Tensor[(8, 13, 14), bool], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(10, 3, 5), float32], Tensor[(8, 13, 14), bool], Tensor[(4, 11, 3), float64], Tensor[(270, 1), int16], Tensor[(225), float64], Tensor[(3, 15, 11), int16], Tensor[(270), int16], Tensor[(8, 13, 14), float32]) */;
    %286 = less_equal(%277, %278) /* ty=Tensor[(225), bool] */;
    %287 = %285.3;
    (%286, %287, %var_5683, meta[relay.Constant][22] /* ty=Tensor[(1456), uint64] */, meta[relay.Constant][23] /* ty=Tensor[(150), float32] */)
  };
  %288(%var_5690, %var_5691) /* ty=(Tensor[(225), bool], Tensor[(10, 3, 5), float32], uint64, Tensor[(1456), uint64], Tensor[(150), float32]) */
}

def @func_1019(%var_1018: Tensor[(3, 5, 7), float64]) -> Tensor[(3, 5, 7), float64] {
  %290 = fn (%var_1006: Tensor[(3, 5, 7), float64]) -> Tensor[(3, 5, 7), float64] {
    %289 = cast(%var_1006, dtype="float64") /* ty=Tensor[(3, 5, 7), float64] */;
    cos(%289) /* ty=Tensor[(3, 5, 7), float64] */
  };
  %290(%var_1018) /* ty=Tensor[(3, 5, 7), float64] */
}

def @func_5160(%var_5159: Tensor[(8, 1, 16), float64]) -> Tensor[(8, ?, 16), uint16] {
  %297 = fn (%var_5123: Tensor[(8, 1, 16), float64]) -> Tensor[(8, ?, 16), uint16] {
    %291 = cast(%var_5123, dtype="float64") /* ty=Tensor[(8, 1, 16), float64] */;
    %292 = erf(%291) /* ty=Tensor[(8, 1, 16), float64] */;
    %293 = cast(%var_5123, dtype="uint16") /* ty=Tensor[(8, 1, 16), uint16] */;
    %294 = shape_of(%292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %295 = cast(%292, dtype="uint16") /* ty=Tensor[(8, 1, 16), uint16] */;
    %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    logical_xor(%295, %296) /* ty=Tensor[(8, ?, 16), uint16] */
  };
  %297(%var_5159) /* ty=Tensor[(8, ?, 16), uint16] */
}

def @func_2691(%var_2688: Tensor[(3, 10, 14), float64], %var_2689: Tensor[(1540), float32], %var_2690: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) {
  @func_2686(%var_2688, %var_2689, %var_2690) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) */
}

def @func_699(%var_693: Tensor[(2, 13, 11), int16], %var_694: Tensor[(2, 13, 11), int16]) -> Tensor[(2, 13, 11), bool] {
  %298 = cast(%var_694, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %299 = shape_of(%var_693, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_693, dtype="bool") /* ty=Tensor[(2, 13, 11), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%300, %301) /* ty=Tensor[(2, 13, 11), bool] */
}

def @func_6786(%var_6784: Tensor[(12, 3, 12), uint8]) -> (Tensor[(12, 3, 12), bool],) {
  @func_6783(%var_6784) /* ty=(Tensor[(12, 3, 12), bool],) */
}

def @func_2686(%var_2608: Tensor[(3, 10, 14), float64], %var_2619: Tensor[(1540), float32], %var_2636: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) {
  %302 = cast(%var_2619, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %303 = cast(%var_2619, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %304 = reshape(%302, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %305 = reshape(%303, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %306 = @func_217(%304, %305) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %307 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %308 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %309 = cast(%var_2619, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %310 = cast(%var_2619, dtype="bool") /* ty=Tensor[(1540), bool] */;
  %311 = reshape(%307, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %312 = reshape(%308, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %313 = reshape(%309, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %314 = reshape(%310, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %315 = @func_328(%311, %312, %313, %314) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */;
  %316 = cast(%var_2636, dtype="float64") /* ty=Tensor[(105), float64] */;
  %317 = reshape(%316, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %318 = cast(%var_2608, dtype="float64") /* ty=Tensor[(3, 10, 14), float64] */;
  %319 = log2(%318) /* ty=Tensor[(3, 10, 14), float64] */;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(3, 10, 14), float32] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %322 = cast(meta[relay.Constant][24] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %323 = %306.0;
  %324 = cast(%323, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %325 = %315.2;
  %326 = cast(%325, dtype="bool") /* ty=Tensor[(11, 14, 10), bool] */;
  %327 = reshape(%321, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %328 = reshape(%322, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
  %329 = reshape(%324, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %330 = reshape(%326, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %331 = @func_328(%327, %328, %329, %330) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */;
  %332 = @func_1017(%317) /* ty=Tensor[(3, 5, 7), float64] */;
  %333 = atan(%320) /* ty=Tensor[(3, 10, 14), float32] */;
  %334 = %331.1;
  (%323, %var_2619, %325, meta[relay.Constant][24] /* ty=Tensor[(144), uint16] */, %332, %var_2636, %333, %334)
}

def @func_2904(%var_2870: Tensor[(270), int16], %var_2884: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) {
  %335 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %336 = cast(%var_2870, dtype="int16") /* ty=Tensor[(270), int16] */;
  %337 = cast(%var_2870, dtype="int16") /* ty=Tensor[(270), int16] */;
  %338 = reshape(%336, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %339 = reshape(%337, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %340 = @func_470(%338, %339) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %341 = cast(%var_2884, dtype="float64") /* ty=Tensor[(105), float64] */;
  %342 = reshape(%341, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %343 = @func_1017(%342) /* ty=Tensor[(3, 5, 7), float64] */;
  %344 = cast(%343, dtype="float64") /* ty=Tensor[(3, 5, 7), float64] */;
  %345 = reshape(%344, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %346 = %335.0;
  %347 = %340.0;
  %348 = @func_1017(%345) /* ty=Tensor[(3, 5, 7), float64] */;
  (%346, %347, %var_2870, %343, %var_2884, %348)
}

def @func_3442(%var_3382: Tensor[(14, 5), float64], %var_3414: Tensor[(270), int16], %var_3417: Tensor[(105), float64]) -> (Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  %349 = cast(%var_3382, dtype="float64") /* ty=Tensor[(14, 5), float64] */;
  %350 = cast(meta[relay.Constant][25] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %351 = cast(%var_3414, dtype="int16") /* ty=Tensor[(270), int16] */;
  %352 = reshape(%350, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %353 = reshape(%351, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %354 = @func_614(%352, %353) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %355 = cast(%var_3417, dtype="float64") /* ty=Tensor[(105), float64] */;
  %356 = reshape(%355, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
  %357 = cast(meta[relay.Constant][26] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %358 = cast(meta[relay.Constant][26] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
  %359 = reshape(%357, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %360 = reshape(%358, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
  %361 = acos(%349) /* ty=Tensor[(14, 5), float64] */;
  %362 = %354.1;
  %363 = @func_1017(%356) /* ty=Tensor[(3, 5, 7), float64] */;
  %364 = @func_1697(%359, %360) /* ty=Tensor[(13, 9, 7), bool] */;
  (%361, %362, meta[relay.Constant][25] /* ty=Tensor[(225), float64] */, %var_3414, %363, %var_3417, %364, meta[relay.Constant][26] /* ty=Tensor[(819), int32] */)
}

def @func_3586(%var_3579: Tensor[(10, 3, 5), float32], %var_3580: Tensor[(10, 3, 5), float32]) -> Tensor[(10, 3, 5), float32] {
  %365 = cast(%var_3580, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %366 = shape_of(%var_3579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_3579, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%367, %368) /* ty=Tensor[(10, 3, 5), float32] */
}

def @func_2047(%var_2033: Tensor[(9, 9, 15), float32]) -> (Tensor[(9, 9, 15), float32], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) {
  %369 = cast(%var_2033, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %370 = cast(meta[relay.Constant][27] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %371 = cast(meta[relay.Constant][27] /* ty=Tensor[(1540), float32] */, dtype="float32") /* ty=Tensor[(1540), float32] */;
  %372 = reshape(%370, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %373 = reshape(%371, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), float32] */;
  %374 = @func_217(%372, %373) /* ty=(Tensor[(11, 14, 10), bool],) */;
  %375 = tan(%369) /* ty=Tensor[(9, 9, 15), float32] */;
  %376 = %374.0;
  (%375, %376, meta[relay.Constant][27] /* ty=Tensor[(1540), float32] */)
}

def @func_4672(%var_4670: uint64) -> (Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(225), float32]) {
  @func_4669(%var_4670) /* ty=(Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(225), float32]) */
}

def @func_5897() -> Tensor[(225), float64] {
  @func_5895() /* ty=Tensor[(225), float64] */
}

def @func_3377(%var_3363: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64],) {
  %377 = cast(%var_3363, dtype="float64") /* ty=Tensor[(14, 15, 7), float64] */;
  %378 = atanh(%377) /* ty=Tensor[(14, 15, 7), float64] */;
  (%378,)
}

def @func_5450(%var_5448: Tensor[(6, 45), int16]) -> (Tensor[(6, 45), float64],) {
  @func_5447(%var_5448) /* ty=(Tensor[(6, 45), float64],) */
}

def @func_4710() -> Tensor[(11, 14, 10), bool] {
  %379 = fn () -> Tensor[(11, 14, 10), bool] {
    @func_3231() /* ty=Tensor[(11, 14, 10), bool] */
  };
  %379() /* ty=Tensor[(11, 14, 10), bool] */
}

def @func_4931(%var_4929: Tensor[(420), float64], %var_4930: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), bool], Tensor[(1, 15, 15), float32], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(420), float64], Tensor[(105), float64]) {
  @func_4927(%var_4929, %var_4930) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), bool], Tensor[(1, 15, 15), float32], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(420), float64], Tensor[(105), float64]) */
}

def @func_3679() -> Tensor[(11, 14, 10), bool] {
  %380 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %380.0
}

def @func_5793() -> (Tensor[(6, 45), float32],) {
  %384 = fn () -> (Tensor[(6, 45), float32],) {
    %381 = @func_5657() /* ty=Tensor[(6, 45), float32] */;
    %382 = cast(%381, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
    %383 = sqrt(%382) /* ty=Tensor[(6, 45), float32] */;
    (%383,)
  };
  %384() /* ty=(Tensor[(6, 45), float32],) */
}

def @func_5895() -> Tensor[(225), float64] {
  %385 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %385.0
}

def @func_5659() -> Tensor[(6, 45), float32] {
  @func_5657() /* ty=Tensor[(6, 45), float32] */
}

def @func_6979(%var_6831: Tensor[(7, 220), bool], %var_6858: Tensor[(70), float64], %var_6859: Tensor[(270), int16], %var_6949: Tensor[(42), float32]) -> (Tensor[(10, 3, 5), float32], Tensor[(70), float64], Tensor[(270), int16], Tensor[(105), float64], Tensor[(6, 45), float32], Tensor[(7, 220), float64], Tensor[(11, 12, 6), int8], Tensor[(13, 9, 7), uint32], Tensor[(144, 1), uint16], Tensor[(42), float32], Tensor[(11, 12, 6), float64]) {
  %386 = cast(%var_6831, dtype="bool") /* ty=Tensor[(7, 220), bool] */;
  %387 = reshape(%386, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
  %388 = @func_5083(%387) /* ty=(Tensor[(11, 14, 10), float32], Tensor[(10, 3, 5), float32], Tensor[(11, 14, 10), float64]) */;
  %389 = @func_3694() /* ty=(Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %390 = %389.1;
  %391 = cast(%390, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %392 = rsqrt(%391) /* ty=Tensor[(6, 45), float64] */;
  %393 = cast(%392, dtype="float32") /* ty=Tensor[(6, 45), float32] */;
  %394 = cast(%var_6831, dtype="float32") /* ty=Tensor[(7, 220), float32] */;
  %395 = log10(%394) /* ty=Tensor[(7, 220), float32] */;
  %396 = cast(%var_6831, dtype="bool") /* ty=Tensor[(7, 220), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(2), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(7, 220), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %400 = equal(%398, %399) /* ty=Tensor[(7, 220), bool] */;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(7, 220), float64] */;
  %402 = shape_of(%395, dtype="int32") /* ty=Tensor[(2), int32] */;
  %403 = cast(%395, dtype="float64") /* ty=Tensor[(7, 220), float64] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %405 = @func_4480() /* ty=(Tensor[(11, 12, 6), float32],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(11, 12, 6), float64] */;
  %408 = log10(%407) /* ty=Tensor[(11, 12, 6), float64] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
  %410 = shape_of(%408, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%408, dtype="bool") /* ty=Tensor[(11, 12, 6), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = less(%411, %412) /* ty=Tensor[(11, 12, 6), bool] */;
  %414 = cast(%406, dtype="int8") /* ty=Tensor[(11, 12, 6), int8] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="int8") /* ty=Tensor[(11, 12, 6), int8] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %418 = cast(%var_6858, dtype="float64") /* ty=Tensor[(70), float64] */;
  %419 = cast(%var_6859, dtype="int16") /* ty=Tensor[(270), int16] */;
  %420 = cast(meta[relay.Constant][28] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %421 = reshape(%418, newshape=[14, 5]) /* ty=Tensor[(14, 5), float64] */;
  %422 = reshape(%419, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %423 = reshape(%420, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %424 = @func_3442(%421, %422, %423) /* ty=(Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */;
  %425 = %424.6;
  %426 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 9, 7), bool] */, dtype="uint32") /* ty=Tensor[(13, 9, 7), uint32] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %428 = cast(%425, dtype="uint32") /* ty=Tensor[(13, 9, 7), uint32] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %430 = cast(%var_6949, dtype="float32") /* ty=Tensor[(42), float32] */;
  %431 = reshape(%430, newshape=[6, 1, 7]) /* ty=Tensor[(6, 1, 7), float32] */;
  %432 = @func_994(%431) /* ty=(Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) */;
  %433 = cast(%408, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  %434 = atanh(%433) /* ty=Tensor[(11, 12, 6), float32] */;
  %435 = cast(%434, dtype="float64") /* ty=Tensor[(11, 12, 6), float64] */;
  %436 = %388.1;
  %437 = atanh(%393) /* ty=Tensor[(6, 45), float32] */;
  %438 = multiply(%403, %404) /* ty=Tensor[(7, 220), float64] */;
  %439 = bitwise_or(%416, %417) /* ty=Tensor[(11, 12, 6), int8] */;
  %440 = multiply(%428, %429) /* ty=Tensor[(13, 9, 7), uint32] */;
  %441 = %432.2;
  %442 = log2(%435) /* ty=Tensor[(11, 12, 6), float64] */;
  (%436, %var_6858, %var_6859, meta[relay.Constant][28] /* ty=Tensor[(105), float64] */, %437, %438, %439, %440, %441, %var_6949, %442)
}

def @func_2908(%var_2906: Tensor[(270), int16], %var_2907: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) {
  @func_2904(%var_2906, %var_2907) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */
}

def @func_4792(%var_4790: Tensor[(1, 3, 6), float64]) -> (Tensor[(?, 3, 6), float64],) {
  @func_4789(%var_4790) /* ty=(Tensor[(?, 3, 6), float64],) */
}

def @func_1697(%var_1667: Tensor[(13, 9, 7), int32], %var_1668: Tensor[(13, 9, 7), int32]) -> Tensor[(13, 9, 7), bool] {
  %443 = cast(%var_1668, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %444 = shape_of(%var_1667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%var_1667, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%445, %446) /* ty=Tensor[(13, 9, 7), bool] */
}

def @func_3850(%var_3847: uint64, %var_3848: Tensor[(30, 9), int16], %var_3849: Tensor[(225), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) {
  %456 = fn (%var_3834: uint64, %var_3835: Tensor[(30, 9), int16], %var_3836: Tensor[(225), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) {
    %447 = cast(%var_3834, dtype="uint64") /* ty=uint64 */;
    %448 = cast(%var_3835, dtype="int16") /* ty=Tensor[(30, 9), int16] */;
    %449 = cast(%var_3836, dtype="float64") /* ty=Tensor[(225), float64] */;
    %450 = reshape(%447, newshape=[]) /* ty=uint64 */;
    %451 = reshape(%448, newshape=[270]) /* ty=Tensor[(270), int16] */;
    %452 = reshape(%449, newshape=[225]) /* ty=Tensor[(225), float64] */;
    %453 = @func_3203(%450, %451, %452) /* ty=(uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) */;
    %454 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
    %455 = %453.3;
    (%454, %455, %var_3834, %var_3835, %var_3836)
  };
  %456(%var_3847, %var_3848, %var_3849) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) */
}

def @func_5919() -> Tensor[(11, 14, 10), float64] {
  %457 = fn () -> Tensor[(11, 14, 10), float64] {
    @func_5544() /* ty=Tensor[(11, 14, 10), float64] */
  };
  %457() /* ty=Tensor[(11, 14, 10), float64] */
}

def @func_4789(%var_4779: Tensor[(1, 3, 6), float64]) -> (Tensor[(?, 3, 6), float64],) {
  %458 = cast(%var_4779, dtype="float64") /* ty=Tensor[(1, 3, 6), float64] */;
  %459 = exp(%458) /* ty=Tensor[(1, 3, 6), float64] */;
  %460 = cast(%459, dtype="float64") /* ty=Tensor[(1, 3, 6), float64] */;
  %461 = shape_of(%var_4779, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_4779, dtype="float64") /* ty=Tensor[(1, 3, 6), float64] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %464 = floor_divide(%462, %463) /* ty=Tensor[(?, 3, 6), float64] */;
  (%464,)
}

def @func_4482() -> (Tensor[(11, 12, 6), float32],) {
  @func_4480() /* ty=(Tensor[(11, 12, 6), float32],) */
}

def @func_4845() -> (Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) {
  %465 = @func_3575() /* ty=(Tensor[(6, 45), int16],) */;
  %466 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %467 = %465.0;
  (%466, %467)
}

def @func_470(%var_455: Tensor[(6, 5, 9), int16], %var_456: Tensor[(6, 5, 9), int16]) -> (Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) {
  %468 = cast(%var_456, dtype="int16") /* ty=Tensor[(6, 5, 9), int16] */;
  %469 = shape_of(%var_455, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_455, dtype="int16") /* ty=Tensor[(6, 5, 9), int16] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %472 = cast(%var_455, dtype="float32") /* ty=Tensor[(6, 5, 9), float32] */;
  %473 = atanh(%472) /* ty=Tensor[(6, 5, 9), float32] */;
  %474 = cast(%var_456, dtype="uint16") /* ty=Tensor[(6, 5, 9), uint16] */;
  %475 = shape_of(%473, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%473, dtype="uint16") /* ty=Tensor[(6, 5, 9), uint16] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %478 = subtract(%470, %471) /* ty=Tensor[(6, 5, 9), int16] */;
  %479 = left_shift(%476, %477) /* ty=Tensor[(6, 5, 9), uint16] */;
  (%478, %479)
}

def @func_2488(%var_2466: Tensor[(270), int16], %var_2469: Tensor[(10, 16, 7), int64]) -> (Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(10, 16, 7), uint64]) {
  %480 = cast(%var_2466, dtype="int16") /* ty=Tensor[(270), int16] */;
  %481 = cast(%var_2466, dtype="int16") /* ty=Tensor[(270), int16] */;
  %482 = reshape(%480, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %483 = reshape(%481, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
  %484 = @func_470(%482, %483) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
  %485 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 16, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 7), float32] */;
  %486 = rsqrt(%485) /* ty=Tensor[(10, 16, 7), float32] */;
  %487 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 16, 7), float32] */, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %491 = left_shift(%489, %490) /* ty=Tensor[(10, 16, 7), int64] */;
  %492 = cast(%var_2469, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="float64") /* ty=Tensor[(10, 16, 7), float64] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %496 = divide(%494, %495) /* ty=Tensor[(10, 16, 7), float64] */;
  %497 = cast(%486, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %498 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%491, dtype="int64") /* ty=Tensor[(10, 16, 7), int64] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %501 = bitwise_and(%499, %500) /* ty=Tensor[(10, 16, 7), int64] */;
  %502 = cast(%501, dtype="uint64") /* ty=Tensor[(10, 16, 7), uint64] */;
  %503 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%496, dtype="uint64") /* ty=Tensor[(10, 16, 7), uint64] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %506 = %484.1;
  %507 = bitwise_or(%504, %505) /* ty=Tensor[(10, 16, 7), uint64] */;
  (%506, %var_2466, %507)
}

def @func_4480() -> (Tensor[(11, 12, 6), float32],) {
  %508 = @func_3647() /* ty=Tensor[(11, 12, 6), float32] */;
  (%508,)
}

def @func_5447(%var_5432: Tensor[(6, 45), int16]) -> (Tensor[(6, 45), float64],) {
  %509 = @func_4845() /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 45), int16]) */;
  %510 = %509.1;
  %511 = cast(%var_5432, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %512 = shape_of(%510, dtype="int32") /* ty=Tensor[(2), int32] */;
  %513 = cast(%510, dtype="float64") /* ty=Tensor[(6, 45), float64] */;
  %514 = dyn.reshape(%511, %512, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %515 = floor_divide(%513, %514) /* ty=Tensor[(6, 45), float64] */;
  (%515,)
}

def @func_5733() -> (Tensor[(225), float32],) {
  @func_5731() /* ty=(Tensor[(225), float32],) */
}

def @func_6578(%var_6576: Tensor[(10, 9, 11), int32]) -> (Tensor[(10, 9, 11), bool],) {
  @func_6575(%var_6576) /* ty=(Tensor[(10, 9, 11), bool],) */
}

def @main(%var_7042: Tensor[(270), int16], %var_7043: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(270), int16], Tensor[(270), float64], Tensor[(225), float64], Tensor[(11, 14, 10), float64], Tensor[(3, 5, 7), int32]) {
  %516 = @func_2791() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %517 = cast(%var_7042, dtype="int16") /* ty=Tensor[(270), int16] */;
  %518 = cast(%var_7043, dtype="float64") /* ty=Tensor[(105), float64] */;
  %519 = reshape(%517, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %520 = reshape(%518, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %521 = @func_2908(%519, %520) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */;
  %522 = cast(%var_7042, dtype="float64") /* ty=Tensor[(270), float64] */;
  %523 = @func_4587() /* ty=(Tensor[(225), float64],) */;
  %524 = cast(%var_7043, dtype="float64") /* ty=Tensor[(105), float64] */;
  %525 = reshape(%524, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %526 = @func_2991(%525) /* ty=(Tensor[(11, 14, 10), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64]) */;
  %527 = %526.1;
  %528 = cast(%var_7043, dtype="int32") /* ty=Tensor[(105), int32] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="int32") /* ty=Tensor[(3, 5, 7), int32] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %532 = %516.0;
  %533 = %521.2;
  %534 = asin(%522) /* ty=Tensor[(270), float64] */;
  %535 = %523.0;
  %536 = @func_5544() /* ty=Tensor[(11, 14, 10), float64] */;
  %537 = left_shift(%530, %531) /* ty=Tensor[(3, 5, 7), int32] */;
  (%532, %533, %534, %535, %536, %537)
}

def @func_4194() -> (Tensor[(225), float64],) {
  @func_4192() /* ty=(Tensor[(225), float64],) */
}

def @func_3447(%var_3444: Tensor[(14, 5), float64], %var_3445: Tensor[(270), int16], %var_3446: Tensor[(105), float64]) -> (Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  @func_3442(%var_3444, %var_3445, %var_3446) /* ty=(Tensor[(14, 5), float64], Tensor[(6, 5, 9), uint16], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */
}

def @func_3813(%var_3724: uint64, %var_3725: Tensor[(8, 13, 14), uint64], %var_3740: Tensor[(150), float32]) -> (Tensor[(8, 13, 14), bool], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(10, 3, 5), float32], Tensor[(8, 13, 14), bool], Tensor[(4, 11, 3), float64], Tensor[(270, 1), int16], Tensor[(225), float64], Tensor[(3, 15, 11), int16], Tensor[(270), int16], Tensor[(8, 13, 14), float32]) {
  %538 = cast(%var_3724, dtype="bool") /* ty=bool */;
  %539 = cast(%var_3725, dtype="bool") /* ty=Tensor[(8, 13, 14), bool] */;
  %540 = cast(%var_3740, dtype="float32") /* ty=Tensor[(150), float32] */;
  %541 = cast(%var_3740, dtype="float32") /* ty=Tensor[(150), float32] */;
  %542 = reshape(%540, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %543 = reshape(%541, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %544 = @func_3586(%542, %543) /* ty=Tensor[(10, 3, 5), float32] */;
  %545 = cast(%544, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %546 = cast(%544, dtype="float32") /* ty=Tensor[(10, 3, 5), float32] */;
  %547 = reshape(%545, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %548 = reshape(%546, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
  %549 = cast(%var_3725, dtype="float64") /* ty=Tensor[(8, 13, 14), float64] */;
  %550 = cosh(%549) /* ty=Tensor[(8, 13, 14), float64] */;
  %551 = cast(%var_3724, dtype="uint32") /* ty=uint32 */;
  %552 = cast(%var_3725, dtype="uint32") /* ty=Tensor[(8, 13, 14), uint32] */;
  %553 = maximum(%551, %552) /* ty=Tensor[(8, 13, 14), uint32] */;
  %554 = cast(%553, dtype="bool") /* ty=Tensor[(8, 13, 14), bool] */;
  %555 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%550, dtype="bool") /* ty=Tensor[(8, 13, 14), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %558 = cast(%var_3724, dtype="uint64") /* ty=uint64 */;
  %559 = cast(meta[relay.Constant][31] /* ty=Tensor[(270, 1), int16] */, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %560 = cast(meta[relay.Constant][32] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %561 = reshape(%558, newshape=[]) /* ty=uint64 */;
  %562 = reshape(%559, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %563 = reshape(%560, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %564 = @func_3203(%561, %562, %563) /* ty=(uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) */;
  %565 = cast(%var_3724, dtype="uint8") /* ty=uint8 */;
  %566 = reshape(%565, newshape=[]) /* ty=uint8 */;
  %567 = @func_3100(%566) /* ty=(Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) */;
  %568 = cast(meta[relay.Constant][32] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %569 = cast(meta[relay.Constant][31] /* ty=Tensor[(270, 1), int16] */, dtype="int16") /* ty=Tensor[(270, 1), int16] */;
  %570 = reshape(%568, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %571 = reshape(%569, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %572 = @func_614(%570, %571) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %573 = cast(%550, dtype="float32") /* ty=Tensor[(8, 13, 14), float32] */;
  %574 = not_equal(%538, %539) /* ty=Tensor[(8, 13, 14), bool] */;
  %575 = @func_3586(%547, %548) /* ty=Tensor[(10, 3, 5), float32] */;
  %576 = greater_equal(%556, %557) /* ty=Tensor[(8, 13, 14), bool] */;
  %577 = %564.5;
  %578 = %567.1;
  %579 = %572.2;
  %580 = acosh(%573) /* ty=Tensor[(8, 13, 14), float32] */;
  (%574, %544, %var_3740, %575, %576, %577, meta[relay.Constant][31] /* ty=Tensor[(270, 1), int16] */, meta[relay.Constant][32] /* ty=Tensor[(225), float64] */, %578, %579, %580)
}

def @func_4927(%var_4918: Tensor[(420), float64], %var_4919: Tensor[(105), float64]) -> (Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), bool], Tensor[(1, 15, 15), float32], Tensor[(225), float64], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(420), float64], Tensor[(105), float64]) {
  %581 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %582 = cast(meta[relay.Constant][33] /* ty=Tensor[(225), float64] */, dtype="float64") /* ty=Tensor[(225), float64] */;
  %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
  %584 = reshape(%582, newshape=[1, 15, 15]) /* ty=Tensor[(1, 15, 15), float64] */;
  %585 = reshape(%583, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %586 = @func_614(%584, %585) /* ty=(Tensor[(1, 15, 15), float32], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(11, 14, 10), bool], Tensor[(1540), float32]) */;
  %587 = cast(%var_4918, dtype="float64") /* ty=Tensor[(420), float64] */;
  %588 = %581.1;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %590 = cast(%var_4919, dtype="float64") /* ty=Tensor[(105), float64] */;
  %591 = reshape(%587, newshape=[3, 10, 14]) /* ty=Tensor[(3, 10, 14), float64] */;
  %592 = reshape(%589, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
  %593 = reshape(%590, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %594 = @func_2686(%591, %592, %593) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) */;
  %595 = @func_4709() /* ty=Tensor[(11, 14, 10), bool] */;
  %596 = %586.0;
  %597 = %594.4;
  (%595, %588, %596, meta[relay.Constant][33] /* ty=Tensor[(225), float64] */, meta[relay.Constant][34] /* ty=Tensor[(270), int16] */, %597, %var_4918, %var_4919)
}

def @func_2740() -> (Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) {
  @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */
}

def @func_4070(%var_4068: Tensor[(1, 5, 6), float32], %var_4069: Tensor[(1, 5, 6), float32]) -> (Tensor[(?, 5, 6), float32],) {
  %603 = fn (%var_4053: Tensor[(1, 5, 6), float32], %var_4054: Tensor[(1, 5, 6), float32]) -> (Tensor[(?, 5, 6), float32],) {
    %598 = cast(%var_4054, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
    %599 = shape_of(%var_4053, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(%var_4053, dtype="float32") /* ty=Tensor[(1, 5, 6), float32] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %602 = divide(%600, %601) /* ty=Tensor[(?, 5, 6), float32] */;
    (%602,)
  };
  %603(%var_4068, %var_4069) /* ty=(Tensor[(?, 5, 6), float32],) */
}

def @func_2789() -> (Tensor[(11, 14, 10), bool],) {
  %604 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %605 = %604.1;
  (%605,)
}

def @func_5277(%var_5272: Tensor[(286), int16]) -> (Tensor[(11, 14, 10), bool], Tensor[(2, 13, 11), bool], Tensor[(286), int16]) {
  %606 = cast(%var_5272, dtype="int16") /* ty=Tensor[(286), int16] */;
  %607 = cast(%var_5272, dtype="int16") /* ty=Tensor[(286), int16] */;
  %608 = reshape(%606, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), int16] */;
  %609 = reshape(%607, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), int16] */;
  %610 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %611 = @func_699(%608, %609) /* ty=Tensor[(2, 13, 11), bool] */;
  (%610, %611, %var_5272)
}

def @func_6085(%var_6082: Tensor[(150), float32], %var_6083: Tensor[(6, 5, 9), uint16], %var_6084: Tensor[(128), float64]) -> (Tensor[(10, 3, 5), float32], Tensor[(105), float64], Tensor[(150), float32], Tensor[(6, 5, 9), float64], Tensor[(8, ?, 16), uint16], Tensor[(128), float64]) {
  @func_6080(%var_6082, %var_6083, %var_6084) /* ty=(Tensor[(10, 3, 5), float32], Tensor[(105), float64], Tensor[(150), float32], Tensor[(6, 5, 9), float64], Tensor[(8, ?, 16), uint16], Tensor[(128), float64]) */
}

def @func_5372() -> (Tensor[(225), float64],) {
  @func_5370() /* ty=(Tensor[(225), float64],) */
}

def @func_6286() -> (Tensor[(225), float32], Tensor[(225), float32]) {
  %615 = fn () -> (Tensor[(225), float32], Tensor[(225), float32]) {
    %612 = @func_5731() /* ty=(Tensor[(225), float32],) */;
    %613 = %612.0;
    %614 = @func_3905() /* ty=Tensor[(225), float32] */;
    (%613, %614)
  };
  %615() /* ty=(Tensor[(225), float32], Tensor[(225), float32]) */
}

def @func_6353(%var_6351: Tensor[(135), float64]) -> (Tensor[(225), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64]) {
  @func_6350(%var_6351) /* ty=(Tensor[(225), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64]) */
}

def @func_3647() -> Tensor[(11, 12, 6), float32] {
  %616 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %617 = %616.0;
  %618 = cast(%617, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
  acosh(%618) /* ty=Tensor[(11, 12, 6), float32] */
}

def @func_5544() -> Tensor[(11, 14, 10), float64] {
  %619 = @func_4681() /* ty=Tensor[(11, 14, 10), bool] */;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
  %621 = log2(%620) /* ty=Tensor[(11, 14, 10), float32] */;
  %622 = @func_3231() /* ty=Tensor[(11, 14, 10), bool] */;
  %623 = cast(%622, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %624 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%621, dtype="float64") /* ty=Tensor[(11, 14, 10), float64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%625, %626) /* ty=Tensor[(11, 14, 10), float64] */
}

def @func_4336(%var_4333: Tensor[(5, 14, 7), uint8], %var_4334: Tensor[(270), int16], %var_4335: Tensor[(75, 3), float64]) -> (Tensor[(5, 14, 7), uint8], uint64, Tensor[(270), int16], Tensor[(75, 3), float64], Tensor[(11, 14, 10), bool], Tensor[(30, 9), int16], Tensor[(11, 14, 10), bool]) {
  @func_4331(%var_4333, %var_4334, %var_4335) /* ty=(Tensor[(5, 14, 7), uint8], uint64, Tensor[(270), int16], Tensor[(75, 3), float64], Tensor[(11, 14, 10), bool], Tensor[(30, 9), int16], Tensor[(11, 14, 10), bool]) */
}

def @func_4192() -> (Tensor[(225), float64],) {
  %627 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %628 = %627.2;
  (%628,)
}

def @func_3576() -> (Tensor[(6, 45), int16],) {
  %631 = fn () -> (Tensor[(6, 45), int16],) {
    %629 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
    %630 = %629.3;
    (%630,)
  };
  %631() /* ty=(Tensor[(6, 45), int16],) */
}

def @func_5546() -> Tensor[(11, 14, 10), float64] {
  @func_5544() /* ty=Tensor[(11, 14, 10), float64] */
}

def @func_2219(%var_2217: Tensor[(15, 3, 3), float64]) -> Tensor[(15, 3, 3), float64] {
  @func_2216(%var_2217) /* ty=Tensor[(15, 3, 3), float64] */
}

def @func_3818(%var_3815: uint64, %var_3816: Tensor[(8, 13, 14), uint64], %var_3817: Tensor[(150), float32]) -> (Tensor[(8, 13, 14), bool], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(10, 3, 5), float32], Tensor[(8, 13, 14), bool], Tensor[(4, 11, 3), float64], Tensor[(270, 1), int16], Tensor[(225), float64], Tensor[(3, 15, 11), int16], Tensor[(270), int16], Tensor[(8, 13, 14), float32]) {
  @func_3813(%var_3815, %var_3816, %var_3817) /* ty=(Tensor[(8, 13, 14), bool], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(10, 3, 5), float32], Tensor[(8, 13, 14), bool], Tensor[(4, 11, 3), float64], Tensor[(270, 1), int16], Tensor[(225), float64], Tensor[(3, 15, 11), int16], Tensor[(270), int16], Tensor[(8, 13, 14), float32]) */
}

def @func_4331(%var_4291: Tensor[(5, 14, 7), uint8], %var_4305: Tensor[(270), int16], %var_4306: Tensor[(75, 3), float64]) -> (Tensor[(5, 14, 7), uint8], uint64, Tensor[(270), int16], Tensor[(75, 3), float64], Tensor[(11, 14, 10), bool], Tensor[(30, 9), int16], Tensor[(11, 14, 10), bool]) {
  %632 = cast(meta[relay.Constant][35] /* ty=Tensor[(5, 1, 7), uint8] */, dtype="uint8") /* ty=Tensor[(5, 1, 7), uint8] */;
  %633 = cast(%var_4291, dtype="uint8") /* ty=Tensor[(5, 14, 7), uint8] */;
  %634 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
  %635 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %636 = cast(%var_4305, dtype="int16") /* ty=Tensor[(270), int16] */;
  %637 = cast(%var_4306, dtype="float64") /* ty=Tensor[(75, 3), float64] */;
  %638 = reshape(%635, newshape=[]) /* ty=uint64 */;
  %639 = reshape(%636, newshape=[30, 9]) /* ty=Tensor[(30, 9), int16] */;
  %640 = reshape(%637, newshape=[225]) /* ty=Tensor[(225), float64] */;
  %641 = @func_3846(%638, %639, %640) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(270), int16], uint64, Tensor[(30, 9), int16], Tensor[(225), float64]) */;
  %642 = %641.3;
  %643 = cast(meta[relay.Constant][37] /* ty=Tensor[(30, 9), int16] */, dtype="int16") /* ty=Tensor[(30, 9), int16] */;
  %644 = shape_of(%642, dtype="int32") /* ty=Tensor[(2), int32] */;
  %645 = cast(%642, dtype="int16") /* ty=Tensor[(30, 9), int16] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %647 = @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */;
  %648 = minimum(%632, %633) /* ty=Tensor[(5, 14, 7), uint8] */;
  %649 = %634.1;
  %650 = subtract(%645, %646) /* ty=Tensor[(30, 9), int16] */;
  %651 = %647.0;
  (%648, meta[relay.Constant][36] /* ty=uint64 */, %var_4305, %var_4306, %649, %650, %651)
}

def @func_3999(%var_3997: Tensor[(105), float64], %var_3998: Tensor[(150), float32]) -> (Tensor[(11, 12, 6), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(11, 12, 6), float32]) {
  %671 = fn (%var_3960: Tensor[(105), float64], %var_3983: Tensor[(150), float32]) -> (Tensor[(11, 12, 6), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(11, 12, 6), float32]) {
    %652 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
    %653 = cast(%var_3960, dtype="float64") /* ty=Tensor[(105), float64] */;
    %654 = reshape(%653, newshape=[3, 5, 7]) /* ty=Tensor[(3, 5, 7), float64] */;
    %655 = cast(meta[relay.Constant][38] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
    %656 = cast(meta[relay.Constant][38] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
    %657 = reshape(%655, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
    %658 = reshape(%656, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
    %659 = cast(%var_3983, dtype="float32") /* ty=Tensor[(150), float32] */;
    %660 = cast(%var_3983, dtype="float32") /* ty=Tensor[(150), float32] */;
    %661 = reshape(%659, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
    %662 = reshape(%660, newshape=[10, 3, 5]) /* ty=Tensor[(10, 3, 5), float32] */;
    %663 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
    %664 = %663.0;
    %665 = cast(%664, dtype="float32") /* ty=Tensor[(11, 12, 6), float32] */;
    %666 = %652.0;
    %667 = @func_1017(%654) /* ty=Tensor[(3, 5, 7), float64] */;
    %668 = @func_1697(%657, %658) /* ty=Tensor[(13, 9, 7), bool] */;
    %669 = @func_3586(%661, %662) /* ty=Tensor[(10, 3, 5), float32] */;
    %670 = sigmoid(%665) /* ty=Tensor[(11, 12, 6), float32] */;
    (%666, %667, %var_3960, %668, meta[relay.Constant][38] /* ty=Tensor[(819), int32] */, %669, %var_3983, %670)
  };
  %671(%var_3997, %var_3998) /* ty=(Tensor[(11, 12, 6), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(11, 12, 6), float32]) */
}

def @func_996(%var_995: Tensor[(6, 1, 7), float32]) -> (Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) {
  %691 = fn (%var_966: Tensor[(6, 1, 7), float32]) -> (Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) {
    %672 = cast(%var_966, dtype="float32") /* ty=Tensor[(6, 1, 7), float32] */;
    %673 = rsqrt(%672) /* ty=Tensor[(6, 1, 7), float32] */;
    %674 = cast(%673, dtype="float32") /* ty=Tensor[(6, 1, 7), float32] */;
    %675 = cast(meta[relay.Constant][39] /* ty=Tensor[(144, 1), uint16] */, dtype="uint16") /* ty=Tensor[(144, 1), uint16] */;
    %676 = cast(meta[relay.Constant][39] /* ty=Tensor[(144, 1), uint16] */, dtype="uint16") /* ty=Tensor[(144, 1), uint16] */;
    %677 = cast(meta[relay.Constant][40] /* ty=Tensor[(154, 10), float32] */, dtype="float32") /* ty=Tensor[(154, 10), float32] */;
    %678 = cast(meta[relay.Constant][40] /* ty=Tensor[(154, 10), float32] */, dtype="bool") /* ty=Tensor[(154, 10), bool] */;
    %679 = reshape(%675, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
    %680 = reshape(%676, newshape=[16, 3, 3]) /* ty=Tensor[(16, 3, 3), uint16] */;
    %681 = reshape(%677, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
    %682 = reshape(%678, newshape=[11, 14, 10]) /* ty=Tensor[(11, 14, 10), bool] */;
    %683 = @func_328(%679, %680, %681, %682) /* ty=(Tensor[(16, 3, 3), bool], Tensor[(11, 14, 10), bool], Tensor[(11, 14, 10), float32]) */;
    %684 = cast(%var_966, dtype="int16") /* ty=Tensor[(6, 1, 7), int16] */;
    %685 = shape_of(%673, dtype="int32") /* ty=Tensor[(3), int32] */;
    %686 = cast(%673, dtype="int16") /* ty=Tensor[(6, 1, 7), int16] */;
    %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %688 = log(%674) /* ty=Tensor[(6, 1, 7), float32] */;
    %689 = %683.1;
    %690 = add(%686, %687) /* ty=Tensor[(6, ?, 7), int16] */;
    (%688, %689, meta[relay.Constant][39] /* ty=Tensor[(144, 1), uint16] */, meta[relay.Constant][40] /* ty=Tensor[(154, 10), float32] */, %690)
  };
  %691(%var_995) /* ty=(Tensor[(6, 1, 7), float32], Tensor[(11, 14, 10), bool], Tensor[(144, 1), uint16], Tensor[(154, 10), float32], Tensor[(6, ?, 7), int16]) */
}

def @func_3681() -> Tensor[(11, 14, 10), bool] {
  @func_3679() /* ty=Tensor[(11, 14, 10), bool] */
}

def @func_3380(%var_3378: Tensor[(14, 15, 7), float64]) -> (Tensor[(14, 15, 7), float64],) {
  @func_3377(%var_3378) /* ty=(Tensor[(14, 15, 7), float64],) */
}

def @func_6108(%var_6106: Tensor[(5, 9, 4), float32], %var_6107: Tensor[(5, 9, 4), float32]) -> Tensor[(5, 9, 4), bool] {
  %696 = fn (%var_6100: Tensor[(5, 9, 4), float32], %var_6101: Tensor[(5, 9, 4), float32]) -> Tensor[(5, 9, 4), bool] {
    %692 = cast(%var_6101, dtype="bool") /* ty=Tensor[(5, 9, 4), bool] */;
    %693 = shape_of(%var_6100, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(%var_6100, dtype="bool") /* ty=Tensor[(5, 9, 4), bool] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater_equal(%694, %695) /* ty=Tensor[(5, 9, 4), bool] */
  };
  %696(%var_6106, %var_6107) /* ty=Tensor[(5, 9, 4), bool] */
}

def @func_703(%var_701: Tensor[(2, 13, 11), int16], %var_702: Tensor[(2, 13, 11), int16]) -> Tensor[(2, 13, 11), bool] {
  @func_699(%var_701, %var_702) /* ty=Tensor[(2, 13, 11), bool] */
}

def @func_2791() -> (Tensor[(11, 14, 10), bool],) {
  @func_2789() /* ty=(Tensor[(11, 14, 10), bool],) */
}

def @func_6350(%var_6339: Tensor[(135), float64]) -> (Tensor[(225), float64], Tensor[(15, 3, 3), float64], Tensor[(135), float64]) {
  %697 = @func_5370() /* ty=(Tensor[(225), float64],) */;
  %698 = cast(%var_6339, dtype="float64") /* ty=Tensor[(135), float64] */;
  %699 = reshape(%698, newshape=[15, 3, 3]) /* ty=Tensor[(15, 3, 3), float64] */;
  %700 = %697.0;
  %701 = @func_2216(%699) /* ty=Tensor[(15, 3, 3), float64] */;
  (%700, %701, %var_6339)
}

def @func_3207(%var_3204: uint64, %var_3205: Tensor[(270), int16], %var_3206: Tensor[(225), float64]) -> (uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) {
  %723 = fn (%var_3168: uint64, %var_3176: Tensor[(270), int16], %var_3182: Tensor[(225), float64]) -> (uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) {
    %702 = cast(%var_3176, dtype="int16") /* ty=Tensor[(270), int16] */;
    %703 = cast(%var_3176, dtype="int16") /* ty=Tensor[(270), int16] */;
    %704 = reshape(%702, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %705 = reshape(%703, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %706 = @func_470(%704, %705) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
    %707 = @func_2738() /* ty=(Tensor[(11, 12, 6), float32], Tensor[(11, 14, 10), bool], Tensor[(225), float64], Tensor[(6, 45), int16]) */;
    %708 = %707.2;
    %709 = cast(%var_3182, dtype="int64") /* ty=Tensor[(225), int64] */;
    %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(1), int32] */;
    %711 = cast(%708, dtype="int64") /* ty=Tensor[(225), int64] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?), int64] */;
    %713 = cast(%var_3168, dtype="uint64") /* ty=uint64 */;
    %714 = cast(meta[relay.Constant][41] /* ty=Tensor[(132), uint64] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
    %715 = reshape(%713, newshape=[]) /* ty=uint64 */;
    %716 = reshape(%714, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint64] */;
    %717 = @func_2810(%715, %716) /* ty=(Tensor[(4, 11, 3), uint64],) */;
    %718 = %717.0;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(4, 11, 3), float64] */;
    %720 = %706.1;
    %721 = bitwise_xor(%711, %712) /* ty=Tensor[(225), int64] */;
    %722 = sqrt(%719) /* ty=Tensor[(4, 11, 3), float64] */;
    (%var_3168, meta[relay.Constant][41] /* ty=Tensor[(132), uint64] */, %720, %var_3176, %721, %722)
  };
  %723(%var_3204, %var_3205, %var_3206) /* ty=(uint64, Tensor[(132), uint64], Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(225), int64], Tensor[(4, 11, 3), float64]) */
}

def @func_5280(%var_5278: Tensor[(286), int16]) -> (Tensor[(11, 14, 10), bool], Tensor[(2, 13, 11), bool], Tensor[(286), int16]) {
  @func_5277(%var_5278) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(2, 13, 11), bool], Tensor[(286), int16]) */
}

def @func_3361(%var_3358: Tensor[(11, 6, 3), int16], %var_3359: Tensor[(1540), float32], %var_3360: Tensor[(105), float64]) -> (Tensor[(11, 6, 3), float32], Tensor[(1540), float32], Tensor[(420, 1), float64], Tensor[(1540), float32], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
  %744 = fn (%var_3331: Tensor[(11, 6, 3), int16], %var_3345: Tensor[(1540), float32], %var_3346: Tensor[(105), float64]) -> (Tensor[(11, 6, 3), float32], Tensor[(1540), float32], Tensor[(420, 1), float64], Tensor[(1540), float32], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) {
    %724 = cast(meta[relay.Constant][42] /* ty=Tensor[(11, 6, 3), int16] */, dtype="int16") /* ty=Tensor[(11, 6, 3), int16] */;
    %725 = shape_of(%var_3331, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%var_3331, dtype="int16") /* ty=Tensor[(11, 6, 3), int16] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %728 = bitwise_or(%726, %727) /* ty=Tensor[(11, 6, 3), int16] */;
    %729 = cast(%728, dtype="float32") /* ty=Tensor[(11, 6, 3), float32] */;
    %730 = cast(meta[relay.Constant][43] /* ty=Tensor[(420, 1), float64] */, dtype="float64") /* ty=Tensor[(420, 1), float64] */;
    %731 = cast(%var_3345, dtype="float32") /* ty=Tensor[(1540), float32] */;
    %732 = cast(%var_3346, dtype="float64") /* ty=Tensor[(105), float64] */;
    %733 = reshape(%730, newshape=[3, 10, 14]) /* ty=Tensor[(3, 10, 14), float64] */;
    %734 = reshape(%731, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
    %735 = reshape(%732, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %736 = @func_2686(%733, %734, %735) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(1540), float32], Tensor[(11, 14, 10), float32], Tensor[(144), uint16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 10, 14), float32], Tensor[(11, 14, 10), bool]) */;
    %737 = cast(meta[relay.Constant][44] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
    %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(819), int32] */, dtype="int32") /* ty=Tensor[(819), int32] */;
    %739 = reshape(%737, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
    %740 = reshape(%738, newshape=[13, 9, 7]) /* ty=Tensor[(13, 9, 7), int32] */;
    %741 = cosh(%729) /* ty=Tensor[(11, 6, 3), float32] */;
    %742 = %736.1;
    %743 = @func_1697(%739, %740) /* ty=Tensor[(13, 9, 7), bool] */;
    (%741, %742, meta[relay.Constant][43] /* ty=Tensor[(420, 1), float64] */, %var_3345, %var_3346, %743, meta[relay.Constant][44] /* ty=Tensor[(819), int32] */)
  };
  %744(%var_3358, %var_3359, %var_3360) /* ty=(Tensor[(11, 6, 3), float32], Tensor[(1540), float32], Tensor[(420, 1), float64], Tensor[(1540), float32], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */
}

def @func_6783(%var_6771: Tensor[(12, 3, 12), uint8]) -> (Tensor[(12, 3, 12), bool],) {
  %745 = cast(%var_6771, dtype="uint8") /* ty=Tensor[(12, 3, 12), uint8] */;
  %746 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(12, 3, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 3, 12), uint8] */, dtype="uint8") /* ty=Tensor[(12, 3, 12), uint8] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %749 = bitwise_or(%747, %748) /* ty=Tensor[(12, 3, 12), uint8] */;
  %750 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 3, 12), uint8] */, dtype="bool") /* ty=Tensor[(12, 3, 12), bool] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %752 = cast(%749, dtype="bool") /* ty=Tensor[(12, 3, 12), bool] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %754 = logical_and(%752, %753) /* ty=Tensor[(12, 3, 12), bool] */;
  (%754,)
}

def @func_4669(%var_4646: uint64) -> (Tensor[(4, 11, 3), uint64], uint64, Tensor[(132), uint64], Tensor[(225), float32]) {
  %755 = cast(%var_4646, dtype="uint64") /* ty=uint64 */;
  %756 = cast(meta[relay.Constant][46] /* ty=Tensor[(132), uint64] */, dtype="uint64") /* ty=Tensor[(132), uint64] */;
  %757 = reshape(%755, newshape=[]) /* ty=uint64 */;
  %758 = reshape(%756, newshape=[4, 11, 3]) /* ty=Tensor[(4, 11, 3), uint64] */;
  %759 = @func_2810(%757, %758) /* ty=(Tensor[(4, 11, 3), uint64],) */;
  %760 = @func_4192() /* ty=(Tensor[(225), float64],) */;
  %761 = %760.0;
  %762 = cast(%761, dtype="float64") /* ty=Tensor[(225), float64] */;
  %763 = atan(%762) /* ty=Tensor[(225), float64] */;
  %764 = cast(%763, dtype="float32") /* ty=Tensor[(225), float32] */;
  %765 = %759.0;
  %766 = asin(%764) /* ty=Tensor[(225), float32] */;
  (%765, %var_4646, meta[relay.Constant][46] /* ty=Tensor[(132), uint64] */, %766)
}

def @func_3649() -> Tensor[(11, 12, 6), float32] {
  @func_3647() /* ty=Tensor[(11, 12, 6), float32] */
}

def @func_4372() -> (Tensor[(225), float32], Tensor[(3, 5, 7), float64], Tensor[(270), int16], Tensor[(21, 5), float64], Tensor[(6, 5, 9), uint16]) {
  %783 = fn () -> (Tensor[(225), float32], Tensor[(3, 5, 7), float64], Tensor[(270), int16], Tensor[(21, 5), float64], Tensor[(6, 5, 9), uint16]) {
    %767 = @func_4192() /* ty=(Tensor[(225), float64],) */;
    %768 = %767.0;
    %769 = cast(%768, dtype="float32") /* ty=Tensor[(225), float32] */;
    %770 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
    %771 = cast(meta[relay.Constant][48] /* ty=Tensor[(21, 5), float64] */, dtype="float64") /* ty=Tensor[(21, 5), float64] */;
    %772 = reshape(%770, newshape=[270]) /* ty=Tensor[(270), int16] */;
    %773 = reshape(%771, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %774 = @func_2904(%772, %773) /* ty=(Tensor[(11, 14, 10), bool], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(3, 5, 7), float64]) */;
    %775 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
    %776 = cast(meta[relay.Constant][47] /* ty=Tensor[(270), int16] */, dtype="int16") /* ty=Tensor[(270), int16] */;
    %777 = reshape(%775, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %778 = reshape(%776, newshape=[6, 5, 9]) /* ty=Tensor[(6, 5, 9), int16] */;
    %779 = @func_470(%777, %778) /* ty=(Tensor[(6, 5, 9), int16], Tensor[(6, 5, 9), uint16]) */;
    %780 = erf(%769) /* ty=Tensor[(225), float32] */;
    %781 = %774.5;
    %782 = %779.1;
    (%780, %781, meta[relay.Constant][47] /* ty=Tensor[(270), int16] */, meta[relay.Constant][48] /* ty=Tensor[(21, 5), float64] */, %782)
  };
  %783() /* ty=(Tensor[(225), float32], Tensor[(3, 5, 7), float64], Tensor[(270), int16], Tensor[(21, 5), float64], Tensor[(6, 5, 9), uint16]) */
}

def @func_4098(%var_4097: Tensor[(5, 11, 12), float64]) -> (Tensor[(5, 11, 12), float64], Tensor[(11, 12, 6), float32]) {
  %787 = fn (%var_4072: Tensor[(5, 11, 12), float64]) -> (Tensor[(5, 11, 12), float64], Tensor[(11, 12, 6), float32]) {
    %784 = cast(%var_4072, dtype="float64") /* ty=Tensor[(5, 11, 12), float64] */;
    %785 = sqrt(%784) /* ty=Tensor[(5, 11, 12), float64] */;
    %786 = @func_3647() /* ty=Tensor[(11, 12, 6), float32] */;
    (%785, %786)
  };
  %787(%var_4097) /* ty=(Tensor[(5, 11, 12), float64], Tensor[(11, 12, 6), float32]) */
}

def @func_6575(%var_6571: Tensor[(10, 9, 11), int32]) -> (Tensor[(10, 9, 11), bool],) {
  %788 = cast(%var_6571, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %789 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(10, 9, 11), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(meta[relay.Constant][49] /* ty=Tensor[(10, 9, 11), int32] */, dtype="bool") /* ty=Tensor[(10, 9, 11), bool] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %792 = greater_equal(%790, %791) /* ty=Tensor[(10, 9, 11), bool] */;
  (%792,)
}

def @func_4149() -> Tensor[(225), float32] {
  %793 = fn () -> Tensor[(225), float32] {
    @func_3905() /* ty=Tensor[(225), float32] */
  };
  %793() /* ty=Tensor[(225), float32] */
}

def @func_4682() -> Tensor[(11, 14, 10), bool] {
  %794 = fn () -> Tensor[(11, 14, 10), bool] {
    @func_3231() /* ty=Tensor[(11, 14, 10), bool] */
  };
  %794() /* ty=Tensor[(11, 14, 10), bool] */
}

def @func_6080(%var_6051: Tensor[(150), float32], %var_6061: Tensor[(6, 5, 9), uint16], %var_6076: Tensor[(128), float64]) -> (Tensor[(10, 3, 5), float32], Tensor[(105), float64], Tensor[(150), float32], Tensor[(6, 5, 9), float64], Tensor[(8, ?, 16), uint16], Tensor[(128), float64]) {
  %795 = cast(meta[relay.Constant][50] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
  %796 = cast(%var_6051, dtype="float32") /* ty=Tensor[(150), float32] */;
  %797 = reshape(%795, newshape=[105]) /* ty=Tensor[(105), float64] */;
  %798 = reshape(%796, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %799 = @func_3996(%797, %798) /* ty=(Tensor[(11, 12, 6), float32], Tensor[(3, 5, 7), float64], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32], Tensor[(10, 3, 5), float32], Tensor[(150), float32], Tensor[(11, 12, 6), float32]) */;
  %800 = @func_4393() /* ty=(Tensor[(6, 45), int16], Tensor[(225), float32], Tensor[(6, 5, 9), uint16]) */;
  %801 = %800.2;
  %802 = cast(%var_6061, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%801, dtype="float64") /* ty=Tensor[(6, 5, 9), float64] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %806 = cast(%var_6076, dtype="float64") /* ty=Tensor[(128), float64] */;
  %807 = reshape(%806, newshape=[8, 1, 16]) /* ty=Tensor[(8, 1, 16), float64] */;
  %808 = %799.5;
  %809 = add(%804, %805) /* ty=Tensor[(6, 5, 9), float64] */;
  %810 = @func_5158(%807) /* ty=Tensor[(8, ?, 16), uint16] */;
  (%808, meta[relay.Constant][50] /* ty=Tensor[(105), float64] */, %var_6051, %809, %810, %var_6076)
}

def @func_5477() -> Tensor[(270), int16] {
  %812 = fn () -> Tensor[(270), int16] {
    %811 = @func_4371() /* ty=(Tensor[(225), float32], Tensor[(3, 5, 7), float64], Tensor[(270), int16], Tensor[(21, 5), float64], Tensor[(6, 5, 9), uint16]) */;
    %811.2
  };
  %812() /* ty=Tensor[(270), int16] */
}

def @func_2266(%var_2264: Tensor[(1, 8, 16), int16], %var_2265: Tensor[(6, 8, 16), int16]) -> (Tensor[(6, 8, 16), int16], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(15, 3, 3), float64], Tensor[(3, 45), float64], Tensor[(154, 10), float32], Tensor[(42), float32]) {
  @func_2262(%var_2264, %var_2265) /* ty=(Tensor[(6, 8, 16), int16], Tensor[(6, 5, 9), int16], Tensor[(270), int16], Tensor[(15, 3, 3), float64], Tensor[(3, 45), float64], Tensor[(154, 10), float32], Tensor[(42), float32]) */
}

def @func_5972(%var_5970: Tensor[(70), float64]) -> (Tensor[(6, 45), float64], Tensor[(13, 9, 7), bool], Tensor[(70), float64], Tensor[(1, 105), float64]) {
  @func_5969(%var_5970) /* ty=(Tensor[(6, 45), float64], Tensor[(13, 9, 7), bool], Tensor[(70), float64], Tensor[(1, 105), float64]) */
}

def @func_4774(%var_4773: Tensor[(225), float64]) -> (Tensor[(225), float32], Tensor[(11, 12, 6), float32]) {
  %822 = fn (%var_4742: Tensor[(225), float64]) -> (Tensor[(225), float32], Tensor[(11, 12, 6), float32]) {
    %813 = @func_4585() /* ty=(Tensor[(225), float64],) */;
    %814 = %813.0;
    %815 = cast(%var_4742, dtype="float32") /* ty=Tensor[(225), float32] */;
    %816 = shape_of(%814, dtype="int32") /* ty=Tensor[(1), int32] */;
    %817 = cast(%814, dtype="float32") /* ty=Tensor[(225), float32] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?), float32] */;
    %819 = @func_3868() /* ty=(Tensor[(11, 12, 6), float32],) */;
    %820 = multiply(%817, %818) /* ty=Tensor[(225), float32] */;
    %821 = %819.0;
    (%820, %821)
  };
  %822(%var_4773) /* ty=(Tensor[(225), float32], Tensor[(11, 12, 6), float32]) */
}

def @func_6757(%var_6755: Tensor[(11, 10, 15), int16], %var_6756: Tensor[(11, 10, 15), int16]) -> (Tensor[(11, 10, 15), int16], Tensor[(11, 14, 10), bool], Tensor[(13, 9, 7), bool], Tensor[(198), int16], Tensor[(105), float64]) {
  %837 = fn (%var_6734: Tensor[(11, 10, 15), int16], %var_6735: Tensor[(11, 10, 15), int16]) -> (Tensor[(11, 10, 15), int16], Tensor[(11, 14, 10), bool], Tensor[(13, 9, 7), bool], Tensor[(198), int16], Tensor[(105), float64]) {
    %823 = cast(%var_6735, dtype="int16") /* ty=Tensor[(11, 10, 15), int16] */;
    %824 = shape_of(%var_6734, dtype="int32") /* ty=Tensor[(3), int32] */;
    %825 = cast(%var_6734, dtype="int16") /* ty=Tensor[(11, 10, 15), int16] */;
    %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %827 = cast(meta[relay.Constant][51] /* ty=Tensor[(198), int16] */, dtype="int16") /* ty=Tensor[(198), int16] */;
    %828 = @func_4709() /* ty=Tensor[(11, 14, 10), bool] */;
    %829 = cast(%828, dtype="float32") /* ty=Tensor[(11, 14, 10), float32] */;
    %830 = cast(meta[relay.Constant][52] /* ty=Tensor[(105), float64] */, dtype="float64") /* ty=Tensor[(105), float64] */;
    %831 = reshape(%827, newshape=[11, 6, 3]) /* ty=Tensor[(11, 6, 3), int16] */;
    %832 = reshape(%829, newshape=[1540]) /* ty=Tensor[(1540), float32] */;
    %833 = reshape(%830, newshape=[105]) /* ty=Tensor[(105), float64] */;
    %834 = @func_3357(%831, %832, %833) /* ty=(Tensor[(11, 6, 3), float32], Tensor[(1540), float32], Tensor[(420, 1), float64], Tensor[(1540), float32], Tensor[(105), float64], Tensor[(13, 9, 7), bool], Tensor[(819), int32]) */;
    %835 = bitwise_or(%825, %826) /* ty=Tensor[(11, 10, 15), int16] */;
    %836 = %834.5;
    (%835, %828, %836, meta[relay.Constant][51] /* ty=Tensor[(198), int16] */, meta[relay.Constant][52] /* ty=Tensor[(105), float64] */)
  };
  %837(%var_6755, %var_6756) /* ty=(Tensor[(11, 10, 15), int16], Tensor[(11, 14, 10), bool], Tensor[(13, 9, 7), bool], Tensor[(198), int16], Tensor[(105), float64]) */
}

def @func_3102(%var_3101: uint8) -> (Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) {
  %849 = fn (%var_3076: uint8) -> (Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) {
    %838 = cast(%var_3076, dtype="float32") /* ty=float32 */;
    %839 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 15, 11), uint8] */, dtype="float32") /* ty=Tensor[(3, 15, 11), float32] */;
    %840 = cast(%var_3076, dtype="bool") /* ty=bool */;
    %841 = cast(meta[relay.Constant][53] /* ty=Tensor[(3, 15, 11), uint8] */, dtype="bool") /* ty=Tensor[(3, 15, 11), bool] */;
    %842 = less_equal(%840, %841) /* ty=Tensor[(3, 15, 11), bool] */;
    %843 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 15, 11), bool] */, dtype="int16") /* ty=Tensor[(3, 15, 11), int16] */;
    %844 = shape_of(%842, dtype="int32") /* ty=Tensor[(3), int32] */;
    %845 = cast(%842, dtype="int16") /* ty=Tensor[(3, 15, 11), int16] */;
    %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %847 = divide(%838, %839) /* ty=Tensor[(3, 15, 11), float32] */;
    %848 = add(%845, %846) /* ty=Tensor[(3, 15, 11), int16] */;
    (%847, %848)
  };
  %849(%var_3101) /* ty=(Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) */
}

def @func_6399() -> (Tensor[(11, 12, 6), float32],) {
  %852 = fn () -> (Tensor[(11, 12, 6), float32],) {
    %850 = @func_4480() /* ty=(Tensor[(11, 12, 6), float32],) */;
    %851 = %850.0;
    (%851,)
  };
  %852() /* ty=(Tensor[(11, 12, 6), float32],) */
}

def @func_5929() -> (Tensor[(225), float64],) {
  %853 = @func_5370() /* ty=(Tensor[(225), float64],) */;
  %854 = %853.0;
  (%854,)
}

def @func_5710() -> (Tensor[(225), float64], Tensor[(225), float64], uint64) {
  %863 = fn () -> (Tensor[(225), float64], Tensor[(225), float64], uint64) {
    %855 = @func_4192() /* ty=(Tensor[(225), float64],) */;
    %856 = cast(meta[relay.Constant][55] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %857 = %855.0;
    %858 = cast(%857, dtype="float64") /* ty=Tensor[(225), float64] */;
    %859 = reshape(%856, newshape=[]) /* ty=uint64 */;
    %860 = reshape(%858, newshape=[225]) /* ty=Tensor[(225), float64] */;
    %861 = @func_4878(%859, %860) /* ty=(Tensor[(11, 12, 6), bool], Tensor[(225), float64], uint64, Tensor[(270), int16], Tensor[(225), float64]) */;
    %862 = %861.1;
    (%857, %862, meta[relay.Constant][55] /* ty=uint64 */)
  };
  %863() /* ty=(Tensor[(225), float64], Tensor[(225), float64], uint64) */
}

def @func_5029(%var_4953: Tensor[(16, 1, 3), float32], %var_4985: Tensor[(1120), int64]) -> (Tensor[(14, 15, 7), float64], Tensor[(490, 3), float64], Tensor[(270), int16], Tensor[(90, 3), int16], Tensor[(1120), int64], Tensor[(16, 1, 3), float64], Tensor[(3, 15, 11), float32], uint8) {
  %864 = cast(meta[relay.Constant][56] /* ty=Tensor[(490, 3), float64] */, dtype="float64") /* ty=Tensor[(490, 3), float64] */;
  %865 = reshape(%864, newshape=[14, 15, 7]) /* ty=Tensor[(14, 15, 7), float64] */;
  %866 = @func_3377(%865) /* ty=(Tensor[(14, 15, 7), float64],) */;
  %867 = cast(meta[relay.Constant][57] /* ty=Tensor[(90, 3), int16] */, dtype="int16") /* ty=Tensor[(90, 3), int16] */;
  %868 = cast(%var_4985, dtype="int64") /* ty=Tensor[(1120), int64] */;
  %869 = reshape(%867, newshape=[270]) /* ty=Tensor[(270), int16] */;
  %870 = reshape(%868, newshape=[10, 16, 7]) /* ty=Tensor[(10, 16, 7), int64] */;
  %871 = @func_2488(%869, %870) /* ty=(Tensor[(6, 5, 9), uint16], Tensor[(270), int16], Tensor[(10, 16, 7), uint64]) */;
  %872 = cast(%var_4953, dtype="float32") /* ty=Tensor[(16, 1, 3), float32] */;
  %873 = log10(%872) /* ty=Tensor[(16, 1, 3), float32] */;
  %874 = cast(%873, dtype="float64") /* ty=Tensor[(16, 1, 3), float64] */;
  %875 = cast(meta[relay.Constant][58] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %876 = reshape(%875, newshape=[]) /* ty=uint8 */;
  %877 = @func_3100(%876) /* ty=(Tensor[(3, 15, 11), float32], Tensor[(3, 15, 11), int16]) */;
  %878 = %866.0;
  %879 = %871.1;
  %880 = asin(%874) /* ty=Tensor[(16, 1, 3), float64] */;
  %881 = %877.0;
  (%878, meta[relay.Constant][56] /* ty=Tensor[(490, 3), float64] */, %879, meta[relay.Constant][57] /* ty=Tensor[(90, 3), int16] */, %var_4985, %880, %881, meta[relay.Constant][58] /* ty=uint8 */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen295/build/output.py", line 1941, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:04:28] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

