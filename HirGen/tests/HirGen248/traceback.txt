==========mod==========
#[version = "0.0.5"]
def @func_5896() -> (Tensor[(12, 6, 8), float32], Tensor[(2145), float32]) {
  %0 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %1 = %0.0;
  %2 = @func_3575() /* ty=Tensor[(2145), float32] */;
  (%1, %2)
}

def @func_1545() -> Tensor[(12, 6, 8), int8] {
  %3 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %4 = %3.0;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int8") /* ty=Tensor[(12, 6, 8), int8] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%4, dtype="int8") /* ty=Tensor[(12, 6, 8), int8] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%7, %8) /* ty=Tensor[(12, 6, 8), int8] */
}

def @func_1032() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %9 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %10 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  (%9, %10)
}

def @func_7416(%var_7395: Tensor[(15, 7, 10), float64]) -> (Tensor[(15, 7, 10), float64], Tensor[(11, 15, 13), float32]) {
  %11 = cast(%var_7395, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
  %12 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %13 = asin(%11) /* ty=Tensor[(15, 7, 10), float64] */;
  %14 = %12.1;
  (%13, %14)
}

def @func_852(%var_836: Tensor[(312), uint64], %var_840: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) {
  %15 = cast(%var_836, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 70), float64] */, dtype="float64") /* ty=Tensor[(8, 70), float64] */;
  %17 = reshape(%15, newshape=[4, 6, 13]) /* ty=Tensor[(4, 6, 13), uint64] */;
  %18 = reshape(%16, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
  %19 = @func_247(%17, %18) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */;
  %20 = cast(%var_840, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %21 = reshape(%20, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %22 = @func_730(%21) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */;
  %23 = cast(%var_840, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %24 = cast(%var_840, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %25 = reshape(%23, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
  %26 = reshape(%24, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
  %27 = @func_330(%25, %26) /* ty=(Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) */;
  %28 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
  %29 = %19.4;
  %30 = %22.0;
  %31 = %27.3;
  (%28, %29, %var_836, meta[relay.Constant][1] /* ty=Tensor[(8, 70), float64] */, %30, %var_840, %31)
}

def @func_7772(%var_7742: Tensor[(11, 7, 7), uint64]) -> (Tensor[(12, 6, 8), float32], Tensor[(11, 7, 7), int32]) {
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 7, 7), uint64] */, dtype="uint64") /* ty=Tensor[(11, 7, 7), uint64] */;
  %33 = shape_of(%var_7742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_7742, dtype="uint64") /* ty=Tensor[(11, 7, 7), uint64] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %36 = bitwise_or(%34, %35) /* ty=Tensor[(11, 7, 7), uint64] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(11, 7, 7), uint64] */, dtype="int32") /* ty=Tensor[(11, 7, 7), int32] */;
  %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%36, dtype="int32") /* ty=Tensor[(11, 7, 7), int32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %41 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
  %42 = bitwise_xor(%39, %40) /* ty=Tensor[(11, 7, 7), int32] */;
  (%41, %42)
}

def @func_1902(%var_1834: Tensor[(7, 12, 9), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) {
  %43 = cast(%var_1834, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  %44 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(7, 12, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %47 = floor_mod(%45, %46) /* ty=Tensor[(7, 12, 9), float32] */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 12, 9), float32] */, dtype="int16") /* ty=Tensor[(7, 12, 9), int16] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(3), int32] */;
  %50 = cast(%47, dtype="int16") /* ty=Tensor[(7, 12, 9), int16] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %53 = reshape(%52, newshape=[560]) /* ty=Tensor[(560), float64] */;
  %54 = @func_765(%53) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) */;
  %55 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %56 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
  %57 = bitwise_or(%50, %51) /* ty=Tensor[(7, 12, 9), int16] */;
  %58 = %54.5;
  %59 = %55.1;
  (%56, %57, %58, meta[relay.Constant][4] /* ty=Tensor[(560), float64] */, %59)
}

def @func_2132() -> Tensor[(2145), int8] {
  %60 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %60.2
}

def @func_5311(%var_5268: Tensor[(2145), float32], %var_5296: Tensor[(756), float32], %var_5308: Tensor[(896), bool]) -> (Tensor[(2145), int64], Tensor[(12, 6, 8), int64], Tensor[(2145), float32], Tensor[(7, 12, 9), int16], Tensor[(756), float32], Tensor[(12, 6, 8), int64], Tensor[(896), bool]) {
  %61 = @func_3163() /* ty=(Tensor[(2145), float32],) */;
  %62 = %61.0;
  %63 = cast(%var_5268, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(1), int32] */;
  %65 = cast(%62, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?), float64] */;
  %67 = power(%65, %66) /* ty=Tensor[(2145), float64] */;
  %68 = cast(%var_5268, dtype="int64") /* ty=Tensor[(2145), int64] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="int64") /* ty=Tensor[(2145), int64] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), int64] */;
  %72 = cast(%62, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %73 = cast(%var_5296, dtype="float32") /* ty=Tensor[(756), float32] */;
  %74 = reshape(%73, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %75 = @func_1902(%74) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) */;
  %76 = cast(%var_5308, dtype="bool") /* ty=Tensor[(896), bool] */;
  %77 = cast(%var_5308, dtype="bool") /* ty=Tensor[(896), bool] */;
  %78 = reshape(%76, newshape=[8, 14, 8]) /* ty=Tensor[(8, 14, 8), bool] */;
  %79 = reshape(%77, newshape=[8, 14, 8]) /* ty=Tensor[(8, 14, 8), bool] */;
  %80 = @func_5048(%78, %79) /* ty=(Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %81 = bitwise_or(%70, %71) /* ty=Tensor[(2145), int64] */;
  %82 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %83 = cos(%72) /* ty=Tensor[(2145), float32] */;
  %84 = %75.1;
  %85 = %80.3;
  (%81, %82, %83, %84, %var_5296, %85, %var_5308)
}

def @func_4484() -> (Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) {
  %86 = @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */;
  %87 = %86.1;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
  %89 = acos(%88) /* ty=Tensor[(13, 9, 14), float32] */;
  %90 = @func_3575() /* ty=Tensor[(2145), float32] */;
  (%89, %90)
}

def @func_6990() -> (Tensor[(12, 6, 8), int8],) {
  %91 = @func_5063() /* ty=Tensor[(12, 6, 8), int8] */;
  (%91,)
}

def @func_3419() -> Tensor[(12, 6, 8), float32] {
  %92 = @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */;
  %93 = %92.1;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  acosh(%94) /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_1360() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) {
  %95 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %96 = cast(meta[relay.Constant][5] /* ty=Tensor[(2145, 1), int8] */, dtype="int8") /* ty=Tensor[(2145, 1), int8] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(2145, 1), int8] */, dtype="int8") /* ty=Tensor[(2145, 1), int8] */;
  %98 = reshape(%96, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %99 = reshape(%97, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %100 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %101 = %95.2;
  %102 = @func_98(%98, %99) /* ty=Tensor[(11, 15, 13), int8] */;
  (%100, %101, %102, meta[relay.Constant][5] /* ty=Tensor[(2145, 1), int8] */)
}

def @func_1337() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) {
  %103 = @func_1109() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %104 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %105 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %106 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %107 = %103.0;
  %108 = %104.1;
  %109 = %105.1;
  %110 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
  (%106, %107, %108, %109, %110)
}

def @func_2467() -> Tensor[(2145), float32] {
  %111 = @func_2132() /* ty=Tensor[(2145), int8] */;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(2145), float32] */;
  exp(%112) /* ty=Tensor[(2145), float32] */
}

def @func_647(%var_630: Tensor[(2145), int8]) -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) {
  %113 = cast(%var_630, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %114 = cast(%var_630, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %115 = reshape(%113, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %116 = reshape(%114, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %117 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %118 = @func_98(%115, %116) /* ty=Tensor[(11, 15, 13), int8] */;
  (%117, %118, %var_630)
}

def @func_5128() -> Tensor[(12, 6, 8), float32] {
  %119 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %119.0
}

def @func_7251(%var_7216: Tensor[(11, 15, 13), int8], %var_7246: Tensor[(12), uint64]) -> (Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), float64], Tensor[(2145), float64], Tensor[(3, 2, 2), float64], Tensor[(12), uint64]) {
  %120 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %121 = %120.1;
  %122 = cast(%var_7216, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %126 = @func_2132() /* ty=Tensor[(2145), int8] */;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %128 = cast(%var_7246, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %129 = reshape(%128, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), uint64] */;
  %130 = mod(%124, %125) /* ty=Tensor[(11, 15, 13), float32] */;
  %131 = @func_6943() /* ty=Tensor[(12, 6, 8), float64] */;
  %132 = sinh(%127) /* ty=Tensor[(2145), float64] */;
  %133 = @func_5589(%129) /* ty=Tensor[(3, 2, 2), float64] */;
  (%130, %131, %132, %133, %var_7246)
}

def @main() -> (Tensor[(10, 13), float64],) {
  %134 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 13), float64] */;
  %135 = atanh(%134) /* ty=Tensor[(10, 13), float64] */;
  (%135,)
}

def @func_1198() -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) {
  %136 = cast(meta[relay.Constant][7] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %137 = cast(meta[relay.Constant][7] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %138 = reshape(%136, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %139 = reshape(%137, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %140 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %141 = @func_98(%138, %139) /* ty=Tensor[(11, 15, 13), int8] */;
  (%140, %141, meta[relay.Constant][7] /* ty=Tensor[(2145), int8] */)
}

def @func_2516(%var_2495: int8, %var_2496: Tensor[(4, 6, 3), int8]) -> (Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) {
  %142 = cast(%var_2495, dtype="int8") /* ty=int8 */;
  %143 = cast(%var_2496, dtype="int8") /* ty=Tensor[(4, 6, 3), int8] */;
  %144 = minimum(%142, %143) /* ty=Tensor[(4, 6, 3), int8] */;
  %145 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  (%144, %145)
}

def @func_247(%var_189: Tensor[(4, 6, 13), uint64], %var_218: Tensor[(4, 10, 14), float64]) -> (Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) {
  %146 = cast(meta[relay.Constant][8] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %147 = cast(%var_189, dtype="uint64") /* ty=Tensor[(4, 6, 13), uint64] */;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %149 = cast(meta[relay.Constant][9] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %150 = reshape(%148, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %151 = reshape(%149, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %152 = @func_75(%150, %151) /* ty=Tensor[(4, 10, 14), bool] */;
  %153 = cast(%152, dtype="int8") /* ty=Tensor[(4, 10, 14), int8] */;
  %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %155 = reshape(%153, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %156 = reshape(%154, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %157 = cast(%152, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %158 = acos(%157) /* ty=Tensor[(4, 10, 14), float64] */;
  %159 = cast(%var_218, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %160 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%158, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %163 = subtract(%161, %162) /* ty=Tensor[(4, 10, 14), float64] */;
  %164 = cast(%163, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %165 = shape_of(%158, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%158, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %169 = @func_75(%155, %156) /* ty=Tensor[(4, 10, 14), bool] */;
  %170 = cast(%169, dtype="int8") /* ty=Tensor[(4, 10, 14), int8] */;
  %171 = reshape(%168, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %172 = reshape(%170, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %173 = maximum(%146, %147) /* ty=Tensor[(4, 6, 13), uint64] */;
  %174 = less_equal(%166, %167) /* ty=Tensor[(4, 10, 14), bool] */;
  %175 = @func_75(%171, %172) /* ty=Tensor[(4, 10, 14), bool] */;
  (%173, meta[relay.Constant][9] /* ty=Tensor[(280, 2), int8] */, %169, %174, %175)
}

def @func_3575() -> Tensor[(2145), float32] {
  %176 = @func_3163() /* ty=(Tensor[(2145), float32],) */;
  %176.0
}

def @func_2790() -> (Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) {
  %177 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %178 = %177.0;
  %179 = @func_1545() /* ty=Tensor[(12, 6, 8), int8] */;
  %180 = cast(%179, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %181 = shape_of(%178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%178, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %184 = logical_or(%182, %183) /* ty=Tensor[(12, 6, 8), bool] */;
  %185 = @func_2627() /* ty=Tensor[(10, 16, 5), float32] */;
  (%184, %185)
}

def @func_4621() -> (Tensor[(12, 6, 8), float64],) {
  %186 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %187 = %186.0;
  (%187,)
}

def @func_1109() -> (Tensor[(12, 6, 8), float64],) {
  %188 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %189 = cast(%188, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %190 = reshape(%189, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int64] */;
  %191 = @func_950(%190) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */;
  %192 = %191.0;
  %193 = cast(%192, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %194 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %195 = cast(%188, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %197 = equal(%195, %196) /* ty=Tensor[(12, 6, 8), bool] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %199 = shape_of(%192, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%192, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %202 = divide(%200, %201) /* ty=Tensor[(12, 6, 8), float64] */;
  (%202,)
}

def @func_7047(%var_7018: Tensor[(540), float32]) -> (Tensor[(12, 6, 8), bool], Tensor[(6, 6, 15), float32], Tensor[(540), float32]) {
  %203 = @func_2790() /* ty=(Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) */;
  %204 = cast(%var_7018, dtype="float32") /* ty=Tensor[(540), float32] */;
  %205 = cast(%var_7018, dtype="float32") /* ty=Tensor[(540), float32] */;
  %206 = reshape(%204, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %207 = reshape(%205, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %208 = @func_6777(%206, %207) /* ty=(Tensor[(6, 6, 15), float32],) */;
  %209 = %203.0;
  %210 = %208.0;
  (%209, %210, %var_7018)
}

def @func_2739() -> (Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) {
  %211 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %212 = cast(meta[relay.Constant][10] /* ty=Tensor[(2, 280), float64] */, dtype="float64") /* ty=Tensor[(2, 280), float64] */;
  %213 = reshape(%212, newshape=[560]) /* ty=Tensor[(560), float64] */;
  %214 = @func_765(%213) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) */;
  %215 = %211.0;
  %216 = %214.1;
  (%215, %216, meta[relay.Constant][10] /* ty=Tensor[(2, 280), float64] */)
}

def @func_3764() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %217 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %218 = @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %219 = %217.0;
  %220 = %218.0;
  (%219, %220)
}

def @func_6758() -> (Tensor[(12, 6, 8), int64],) {
  %221 = @func_5367() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %222 = %221.1;
  (%222,)
}

def @func_4544(%var_4536: Tensor[(12, 14, 13), float64]) -> (Tensor[(12, 14, 13), float64], Tensor[(12, 6, 8), int64], Tensor[(70, 1), float64]) {
  %223 = cast(%var_4536, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
  %224 = cast(meta[relay.Constant][11] /* ty=Tensor[(70, 1), float64] */, dtype="float64") /* ty=Tensor[(70, 1), float64] */;
  %225 = reshape(%224, newshape=[7, 10, 1]) /* ty=Tensor[(7, 10, 1), float64] */;
  %226 = @func_2084(%225) /* ty=(Tensor[(7, 10, ?), uint64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(7, 10, ?), bool]) */;
  %227 = asin(%223) /* ty=Tensor[(12, 14, 13), float64] */;
  %228 = %226.1;
  (%227, %228, meta[relay.Constant][11] /* ty=Tensor[(70, 1), float64] */)
}

def @func_3399() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) {
  %229 = @func_2599() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) */;
  %230 = @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %231 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %232 = %229.0;
  %233 = %230.0;
  %234 = %231.0;
  (%232, %233, %234)
}

def @func_4143() -> Tensor[(12, 6, 8), int64] {
  @func_901() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_4410() -> Tensor[(2145), float32] {
  @func_2467() /* ty=Tensor[(2145), float32] */
}

def @func_730(%var_723: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) {
  %235 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %236 = cast(meta[relay.Constant][12] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %238 = cast(%235, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %240 = cast(%var_723, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %241 = cast(%var_723, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %242 = reshape(%240, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
  %243 = reshape(%241, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
  %244 = @func_330(%242, %243) /* ty=(Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) */;
  %245 = %244.2;
  %246 = cast(%245, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %247 = shape_of(%var_723, dtype="int32") /* ty=Tensor[(1), int32] */;
  %248 = cast(%var_723, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?), bool] */;
  %250 = right_shift(%238, %239) /* ty=Tensor[(12, 6, 8), int64] */;
  %251 = logical_and(%248, %249) /* ty=Tensor[(1408), bool] */;
  (%250, %251)
}

def @func_4212(%var_4199: Tensor[(72), int8]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], int8, Tensor[(72), int8]) {
  %252 = @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */;
  %253 = cast(meta[relay.Constant][13] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %254 = cast(%var_4199, dtype="int8") /* ty=Tensor[(72), int8] */;
  %255 = reshape(%253, newshape=[]) /* ty=int8 */;
  %256 = reshape(%254, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), int8] */;
  %257 = @func_2516(%255, %256) /* ty=(Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) */;
  %258 = %252.0;
  %259 = %257.1;
  (%258, %259, meta[relay.Constant][13] /* ty=int8 */, %var_4199)
}

def @func_6333() -> (Tensor[(2145), float32], Tensor[(10, 16, 5), float32]) {
  %260 = @func_2467() /* ty=Tensor[(2145), float32] */;
  %261 = @func_2627() /* ty=Tensor[(10, 16, 5), float32] */;
  (%260, %261)
}

def @func_3516(%var_3452: Tensor[(13, 4, 4), bool], %var_3462: int8) -> (Tensor[(12, 6, 8), int64], Tensor[(4, 6, 3), int8], int8, Tensor[(1, 72), int8], Tensor[(12, 6, 8), int64], Tensor[(2, 280), float64], Tensor[(12, 6, 8), float32], Tensor[(13, 4, 4), float64]) {
  %262 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %263 = cast(%var_3462, dtype="int8") /* ty=int8 */;
  %264 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 72), int8] */, dtype="int8") /* ty=Tensor[(1, 72), int8] */;
  %265 = reshape(%263, newshape=[]) /* ty=int8 */;
  %266 = reshape(%264, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), int8] */;
  %267 = @func_2516(%265, %266) /* ty=(Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) */;
  %268 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %269 = @func_2739() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) */;
  %270 = cast(%var_3452, dtype="bool") /* ty=Tensor[(13, 4, 4), bool] */;
  %271 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(13, 4, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(meta[relay.Constant][15] /* ty=Tensor[(13, 4, 4), bool] */, dtype="bool") /* ty=Tensor[(13, 4, 4), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %274 = logical_or(%272, %273) /* ty=Tensor[(13, 4, 4), bool] */;
  %275 = cast(%274, dtype="float64") /* ty=Tensor[(13, 4, 4), float64] */;
  %276 = %262.0;
  %277 = %267.0;
  %278 = %268.0;
  %279 = %269.2;
  %280 = @func_3419() /* ty=Tensor[(12, 6, 8), float32] */;
  %281 = asin(%275) /* ty=Tensor[(13, 4, 4), float64] */;
  (%276, %277, %var_3462, meta[relay.Constant][14] /* ty=Tensor[(1, 72), int8] */, %278, %279, %280, %281)
}

def @func_6217() -> Tensor[(12, 6, 8), float64] {
  %282 = @func_3764() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %282.0
}

def @func_7843() -> (Tensor[(12, 6, 8), float32],) {
  %283 = @func_5128() /* ty=Tensor[(12, 6, 8), float32] */;
  (%283,)
}

def @func_7635() -> Tensor[(12, 6, 8), float32] {
  @func_5560() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_6023() -> (Tensor[(12, 6, 8), int64], Tensor[(10, 16, 5), float32]) {
  %284 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %285 = %284.1;
  %286 = @func_2627() /* ty=Tensor[(10, 16, 5), float32] */;
  (%285, %286)
}

def @func_2084(%var_2023: Tensor[(7, 10, 1), float64]) -> (Tensor[(7, 10, ?), uint64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(7, 10, ?), bool]) {
  %287 = cast(%var_2023, dtype="float64") /* ty=Tensor[(7, 10, 1), float64] */;
  %288 = atan(%287) /* ty=Tensor[(7, 10, 1), float64] */;
  %289 = cast(%288, dtype="uint64") /* ty=Tensor[(7, 10, 1), uint64] */;
  %290 = shape_of(%var_2023, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%var_2023, dtype="uint64") /* ty=Tensor[(7, 10, 1), uint64] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %293 = cast(%var_2023, dtype="int8") /* ty=Tensor[(7, 10, 1), int8] */;
  %294 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%288, dtype="int8") /* ty=Tensor[(7, 10, 1), int8] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %297 = add(%295, %296) /* ty=Tensor[(7, 10, ?), int8] */;
  %298 = cast(%288, dtype="bool") /* ty=Tensor[(7, 10, 1), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(7, 10, ?), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = less_equal(%300, %301) /* ty=Tensor[(7, 10, ?), bool] */;
  %303 = cast(%302, dtype="bool") /* ty=Tensor[(7, 10, ?), bool] */;
  %304 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%297, dtype="bool") /* ty=Tensor[(7, 10, ?), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = bitwise_and(%291, %292) /* ty=Tensor[(7, 10, ?), uint64] */;
  %308 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
  %309 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %310 = less(%305, %306) /* ty=Tensor[(7, 10, ?), bool] */;
  (%307, %308, %309, %310)
}

def @func_2989() -> (Tensor[(9, 1, 1), float32], Tensor[(1408), bool], Tensor[(12, 6, 8), float64]) {
  %311 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 1), float32] */;
  %312 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
  %313 = @func_2739() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) */;
  %314 = atan(%311) /* ty=Tensor[(9, 1, 1), float32] */;
  %315 = %312.1;
  %316 = %313.0;
  (%314, %315, %316)
}

def @func_330(%var_274: Tensor[(11, 8, 16), bool], %var_275: Tensor[(11, 8, 16), bool]) -> (Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) {
  %317 = cast(%var_275, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %318 = shape_of(%var_274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %319 = cast(%var_274, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %321 = cast(%var_274, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %322 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_275, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = greater_equal(%323, %324) /* ty=Tensor[(11, 8, 16), bool] */;
  %326 = cast(%325, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %327 = shape_of(%var_274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%var_274, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %330 = power(%328, %329) /* ty=Tensor[(11, 8, 16), float32] */;
  %331 = cast(%var_274, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %335 = cast(%325, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %336 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%330, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %339 = cast(meta[relay.Constant][17] /* ty=Tensor[(715, 3), int8] */, dtype="int8") /* ty=Tensor[(715, 3), int8] */;
  %340 = cast(meta[relay.Constant][17] /* ty=Tensor[(715, 3), int8] */, dtype="int8") /* ty=Tensor[(715, 3), int8] */;
  %341 = reshape(%339, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %342 = reshape(%340, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %343 = logical_or(%319, %320) /* ty=Tensor[(11, 8, 16), bool] */;
  %344 = multiply(%333, %334) /* ty=Tensor[(11, 8, 16), float32] */;
  %345 = equal(%337, %338) /* ty=Tensor[(11, 8, 16), bool] */;
  %346 = @func_98(%341, %342) /* ty=Tensor[(11, 15, 13), int8] */;
  (%343, %344, %345, %346, meta[relay.Constant][17] /* ty=Tensor[(715, 3), int8] */)
}

def @func_5589(%var_5576: Tensor[(3, 2, 2), uint64]) -> Tensor[(3, 2, 2), float64] {
  %347 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 2, 2), uint64] */, dtype="uint64") /* ty=Tensor[(3, 2, 2), uint64] */;
  %348 = shape_of(%var_5576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%var_5576, dtype="uint64") /* ty=Tensor[(3, 2, 2), uint64] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %351 = right_shift(%349, %350) /* ty=Tensor[(3, 2, 2), uint64] */;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(3, 2, 2), float32] */;
  %353 = erf(%352) /* ty=Tensor[(3, 2, 2), float32] */;
  %354 = cast(%351, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%356, %357) /* ty=Tensor[(3, 2, 2), float64] */
}

def @func_6520() -> (Tensor[(1408), float64], Tensor[(12, 6, 8), int8]) {
  %358 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
  %359 = %358.1;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %361 = exp(%360) /* ty=Tensor[(1408), float64] */;
  %362 = @func_5063() /* ty=Tensor[(12, 6, 8), int8] */;
  (%361, %362)
}

def @func_3083() -> (Tensor[(12, 6, 8), int64],) {
  %363 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %364 = %363.0;
  (%364,)
}

def @func_5560() -> Tensor[(12, 6, 8), float32] {
  @func_5128() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_2402(%var_2316: Tensor[(13, 9, 3), uint32], %var_2317: Tensor[(13, 9, 3), uint32], %var_2332: Tensor[(315), uint16]) -> (Tensor[(13, 9, 3), bool], Tensor[(11, 15, 13), int8], Tensor[(7, 9, 5), bool], Tensor[(315), uint16], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(3, 104), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), bool]) {
  %365 = cast(%var_2317, dtype="bool") /* ty=Tensor[(13, 9, 3), bool] */;
  %366 = shape_of(%var_2316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%var_2316, dtype="bool") /* ty=Tensor[(13, 9, 3), bool] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %369 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
  %370 = cast(%var_2332, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %371 = cast(%var_2332, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %372 = reshape(%370, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), uint16] */;
  %373 = reshape(%371, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), uint16] */;
  %374 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %375 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %376 = @func_1109() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %377 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %378 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 104), uint64] */, dtype="uint64") /* ty=Tensor[(3, 104), uint64] */;
  %379 = cast(meta[relay.Constant][20] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %380 = reshape(%378, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %381 = reshape(%379, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %382 = @func_852(%380, %381) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
  %383 = %375.0;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %385 = cast(meta[relay.Constant][20] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %386 = reshape(%384, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), float32] */;
  %387 = reshape(%385, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %388 = @func_1502(%386, %387) /* ty=(Tensor[(12, 6, 8), bool], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), int64]) */;
  %389 = less(%367, %368) /* ty=Tensor[(13, 9, 3), bool] */;
  %390 = %369.2;
  %391 = @func_382(%372, %373) /* ty=Tensor[(7, 9, 5), bool] */;
  %392 = %374.0;
  %393 = %376.0;
  %394 = %377.0;
  %395 = %382.4;
  %396 = %388.0;
  (%389, %390, %391, %var_2332, %392, %383, %393, %394, %395, meta[relay.Constant][19] /* ty=Tensor[(3, 104), uint64] */, meta[relay.Constant][20] /* ty=Tensor[(1408), bool] */, %396)
}

def @func_382(%var_372: Tensor[(7, 9, 5), uint16], %var_373: Tensor[(7, 9, 5), uint16]) -> Tensor[(7, 9, 5), bool] {
  %397 = cast(%var_373, dtype="bool") /* ty=Tensor[(7, 9, 5), bool] */;
  %398 = shape_of(%var_372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %399 = cast(%var_372, dtype="bool") /* ty=Tensor[(7, 9, 5), bool] */;
  %400 = dyn.reshape(%397, %398, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%399, %400) /* ty=Tensor[(7, 9, 5), bool] */
}

def @func_2487() -> Tensor[(12, 6, 8), float64] {
  %401 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %402 = %401.0;
  %403 = cast(%402, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  rsqrt(%403) /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_1009() -> Tensor[(12, 6, 8), float32] {
  %404 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %405 = cast(%404, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  log10(%405) /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_6637() -> (Tensor[(12, 6, 8), int64],) {
  %406 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %407 = %406.1;
  (%407,)
}

def @func_3163() -> (Tensor[(2145), float32],) {
  %408 = @func_2467() /* ty=Tensor[(2145), float32] */;
  (%408,)
}

def @func_1608(%var_1604: Tensor[(2, 16, 12), float64]) -> Tensor[(2, 16, 12), float64] {
  %409 = cast(%var_1604, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  log2(%409) /* ty=Tensor[(2, 16, 12), float64] */
}

def @func_3231(%var_3207: Tensor[(2, 4, 7), float64], %var_3227: Tensor[(2, 4, 7), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(2, 4, 7), uint16]) {
  %410 = cast(meta[relay.Constant][21] /* ty=Tensor[(576), int64] */, dtype="int64") /* ty=Tensor[(576), int64] */;
  %411 = reshape(%410, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int64] */;
  %412 = @func_950(%411) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */;
  %413 = cast(%var_3207, dtype="float64") /* ty=Tensor[(2, 4, 7), float64] */;
  %414 = sin(%413) /* ty=Tensor[(2, 4, 7), float64] */;
  %415 = cast(%var_3227, dtype="uint16") /* ty=Tensor[(2, 4, 7), uint16] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
  %417 = cast(%414, dtype="uint16") /* ty=Tensor[(2, 4, 7), uint16] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %419 = %412.0;
  %420 = subtract(%417, %418) /* ty=Tensor[(2, 4, 7), uint16] */;
  (%419, meta[relay.Constant][21] /* ty=Tensor[(576), int64] */, %420)
}

def @func_6567(%var_6544: Tensor[(384), float64], %var_6556: Tensor[(560), int8], %var_6557: Tensor[(2145), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(384), float64], Tensor[(2, 16, 12), float64], Tensor[(11, 15, 13), uint64], Tensor[(560), int8], Tensor[(2145), float32]) {
  %421 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %422 = cast(%var_6544, dtype="float64") /* ty=Tensor[(384), float64] */;
  %423 = reshape(%422, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), float64] */;
  %424 = @func_1608(%423) /* ty=Tensor[(2, 16, 12), float64] */;
  %425 = cast(%424, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  %426 = cast(%var_6556, dtype="int8") /* ty=Tensor[(560), int8] */;
  %427 = cast(%var_6557, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %428 = reshape(%426, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %429 = reshape(%427, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), float32] */;
  %430 = @func_4171(%428, %429) /* ty=(Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) */;
  %431 = %421.1;
  %432 = acosh(%425) /* ty=Tensor[(2, 16, 12), float64] */;
  %433 = %430.2;
  (%431, %var_6544, %432, %433, %var_6556, %var_6557)
}

def @func_6841(%var_6815: Tensor[(312), uint64]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(312), float32], Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) {
  %434 = @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %435 = @func_6282() /* ty=(Tensor[(312), uint64],) */;
  %436 = %435.0;
  %437 = cast(%var_6815, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %438 = shape_of(%436, dtype="int32") /* ty=Tensor[(1), int32] */;
  %439 = cast(%436, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %441 = maximum(%439, %440) /* ty=Tensor[(312), uint16] */;
  %442 = cast(%441, dtype="float32") /* ty=Tensor[(312), float32] */;
  %443 = @func_6073() /* ty=(Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) */;
  %444 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %445 = %434.0;
  %446 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
  %447 = atanh(%442) /* ty=Tensor[(312), float32] */;
  %448 = %443.0;
  %449 = %444.0;
  (%445, %446, %447, %448, %449)
}

def @func_5367() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %450 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %451 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %452 = %450.0;
  %453 = %451.1;
  (%452, %453)
}

def @func_5048(%var_5013: Tensor[(8, 14, 8), bool], %var_5017: Tensor[(8, 14, 8), bool]) -> (Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), float32], Tensor[(12, 6, 8), int64]) {
  %454 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(8, 1, 8), bool] */;
  %455 = cast(%var_5013, dtype="bool") /* ty=Tensor[(8, 14, 8), bool] */;
  %456 = cast(%var_5017, dtype="bool") /* ty=Tensor[(8, 14, 8), bool] */;
  %457 = shape_of(%var_5013, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_5013, dtype="bool") /* ty=Tensor[(8, 14, 8), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = cast(%var_5013, dtype="float32") /* ty=Tensor[(8, 14, 8), float32] */;
  %461 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %462 = logical_or(%454, %455) /* ty=Tensor[(8, 14, 8), bool] */;
  %463 = greater(%458, %459) /* ty=Tensor[(8, 14, 8), bool] */;
  %464 = tan(%460) /* ty=Tensor[(8, 14, 8), float32] */;
  %465 = %461.0;
  (%462, %463, %464, %465)
}

def @func_7506(%var_7501: Tensor[(1, 4, 11), float32]) -> (Tensor[(1, 4, 11), float32],) {
  %466 = cast(%var_7501, dtype="float32") /* ty=Tensor[(1, 4, 11), float32] */;
  %467 = log2(%466) /* ty=Tensor[(1, 4, 11), float32] */;
  %468 = cast(%467, dtype="float32") /* ty=Tensor[(1, 4, 11), float32] */;
  %469 = sin(%468) /* ty=Tensor[(1, 4, 11), float32] */;
  (%469,)
}

def @func_6282() -> (Tensor[(312), uint64],) {
  %470 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
  %471 = %470.2;
  (%471,)
}

def @func_5539() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %472 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %473 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %474 = @func_4829() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %475 = %472.0;
  %476 = %473.1;
  %477 = %474.0;
  (%475, %476, %477)
}

def @func_4953() -> Tensor[(12, 6, 8), int64] {
  %478 = @func_3555() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %478.0
}

def @func_950(%var_943: Tensor[(12, 6, 8), int64]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) {
  %479 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %480 = cast(%var_943, dtype="uint64") /* ty=Tensor[(12, 6, 8), uint64] */;
  %481 = shape_of(%479, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%479, dtype="uint64") /* ty=Tensor[(12, 6, 8), uint64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %484 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %485 = add(%482, %483) /* ty=Tensor[(12, 6, 8), uint64] */;
  (%484, %485)
}

def @func_6713(%var_6704: Tensor[(8, 16, 15), uint64], %var_6705: Tensor[(8, 16, 15), uint64]) -> (Tensor[(8, 16, 15), uint64],) {
  %486 = cast(%var_6705, dtype="uint64") /* ty=Tensor[(8, 16, 15), uint64] */;
  %487 = shape_of(%var_6704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%var_6704, dtype="uint64") /* ty=Tensor[(8, 16, 15), uint64] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %490 = add(%488, %489) /* ty=Tensor[(8, 16, 15), uint64] */;
  (%490,)
}

def @func_3671(%var_3661: Tensor[(312), uint64], %var_3662: Tensor[(560), float64]) -> (Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64], Tensor[(13, 9, 14), float64], Tensor[(12, 6, 8), float64]) {
  %491 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %492 = cast(meta[relay.Constant][23] /* ty=Tensor[(576), int64] */, dtype="int64") /* ty=Tensor[(576), int64] */;
  %493 = reshape(%492, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int64] */;
  %494 = @func_950(%493) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */;
  %495 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %496 = @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */;
  %497 = %496.0;
  %498 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %502 = cast(%var_3661, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %503 = cast(%var_3662, dtype="float64") /* ty=Tensor[(560), float64] */;
  %504 = reshape(%502, newshape=[4, 6, 13]) /* ty=Tensor[(4, 6, 13), uint64] */;
  %505 = reshape(%503, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
  %506 = @func_247(%504, %505) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */;
  %507 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 9, 14), float32] */, dtype="float64") /* ty=Tensor[(13, 9, 14), float64] */;
  %508 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %509 = %491.1;
  %510 = %494.0;
  %511 = %495.1;
  %512 = greater(%500, %501) /* ty=Tensor[(13, 9, 14), bool] */;
  %513 = %506.2;
  %514 = atanh(%507) /* ty=Tensor[(13, 9, 14), float64] */;
  %515 = %508.1;
  (%509, %510, meta[relay.Constant][23] /* ty=Tensor[(576), int64] */, %511, %512, %513, %var_3661, %var_3662, %514, %515)
}

def @func_2856() -> (Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) {
  %516 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %517 = @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */;
  %518 = %516.2;
  %519 = %517.2;
  (%518, %519)
}

def @func_6420(%var_6346: Tensor[(15, 8, 9), float64], %var_6347: Tensor[(15, 8, 9), float64]) -> (Tensor[(15, 8, 9), bool], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32]) {
  %520 = cast(%var_6347, dtype="uint8") /* ty=Tensor[(15, 8, 9), uint8] */;
  %521 = shape_of(%var_6346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %522 = cast(%var_6346, dtype="uint8") /* ty=Tensor[(15, 8, 9), uint8] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %524 = left_shift(%522, %523) /* ty=Tensor[(15, 8, 9), uint8] */;
  %525 = cast(%var_6347, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %529 = cast(%var_6347, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %530 = shape_of(%var_6346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %531 = cast(%var_6346, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %532 = dyn.reshape(%529, %530, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %533 = maximum(%531, %532) /* ty=Tensor[(15, 8, 9), float64] */;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %535 = cast(%533, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %536 = cast(%533, dtype="uint64") /* ty=Tensor[(15, 8, 9), uint64] */;
  %537 = shape_of(%var_6347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%var_6347, dtype="uint64") /* ty=Tensor[(15, 8, 9), uint64] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %540 = bitwise_and(%538, %539) /* ty=Tensor[(15, 8, 9), uint64] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %542 = greater_equal(%527, %528) /* ty=Tensor[(15, 8, 9), bool] */;
  %543 = acosh(%534) /* ty=Tensor[(15, 8, 9), float32] */;
  %544 = atanh(%535) /* ty=Tensor[(15, 8, 9), float32] */;
  %545 = sin(%541) /* ty=Tensor[(15, 8, 9), float32] */;
  (%542, %543, %544, %545)
}

def @func_793() -> Tensor[(12, 6, 8), int64] {
  @func_593() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_2599() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) {
  %546 = @func_1545() /* ty=Tensor[(12, 6, 8), int8] */;
  %547 = cast(%546, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %548 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %549 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 6, 8), int8] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %550 = shape_of(%546, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%546, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %553 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %554 = asin(%547) /* ty=Tensor[(12, 6, 8), float64] */;
  %555 = %548.0;
  %556 = subtract(%551, %552) /* ty=Tensor[(12, 6, 8), int64] */;
  %557 = %553.0;
  (%554, %555, %556, %557)
}

def @func_3839(%var_3832: Tensor[(2145), int8]) -> (Tensor[(2145), float32], Tensor[(2145), bool]) {
  %558 = @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */;
  %559 = %558.3;
  %560 = cast(%var_3832, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(1), int32] */;
  %562 = cast(%559, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?), bool] */;
  %564 = @func_3575() /* ty=Tensor[(2145), float32] */;
  %565 = greater(%562, %563) /* ty=Tensor[(2145), bool] */;
  (%564, %565)
}

def @func_4931() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float32]) {
  %566 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %567 = @func_4143() /* ty=Tensor[(12, 6, 8), int64] */;
  %568 = cast(%567, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %569 = %566.0;
  %570 = sigmoid(%568) /* ty=Tensor[(12, 6, 8), float32] */;
  (%569, %570)
}

def @func_4078(%var_4032: Tensor[(14, 7, 1), float32], %var_4069: Tensor[(11, 15, 13), int8]) -> (Tensor[(14, 7, 1), float32], Tensor[(12, 6, 8), bool], Tensor[(11, 15, 13), uint32]) {
  %571 = cast(%var_4032, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %572 = @func_2790() /* ty=(Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) */;
  %573 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %574 = %573.1;
  %575 = cast(%var_4069, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%574, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %579 = rsqrt(%571) /* ty=Tensor[(14, 7, 1), float32] */;
  %580 = %572.0;
  %581 = bitwise_and(%577, %578) /* ty=Tensor[(11, 15, 13), uint32] */;
  (%579, %580, %581)
}

def @func_7384(%var_7359: Tensor[(540), float32]) -> (Tensor[(12, 6, 8), float64], Tensor[(6, 6, 15), float32], Tensor[(540), float32], int8, Tensor[(208), bool], int8) {
  %582 = cast(%var_7359, dtype="float32") /* ty=Tensor[(540), float32] */;
  %583 = reshape(%582, newshape=[9, 60]) /* ty=Tensor[(9, 60), float32] */;
  %584 = @func_7157(%583) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), float32], Tensor[(9, 1, 1), float32], Tensor[(6, 6, 15), float32], Tensor[(9, 60), float32], Tensor[(12, 6, 8), float32]) */;
  %585 = cast(meta[relay.Constant][26] /* ty=Tensor[(208), bool] */, dtype="bool") /* ty=Tensor[(208), bool] */;
  %586 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %587 = reshape(%585, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), bool] */;
  %588 = reshape(%586, newshape=[]) /* ty=int8 */;
  %589 = @func_3516(%587, %588) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 6, 3), int8], int8, Tensor[(1, 72), int8], Tensor[(12, 6, 8), int64], Tensor[(2, 280), float64], Tensor[(12, 6, 8), float32], Tensor[(13, 4, 4), float64]) */;
  %590 = @func_6943() /* ty=Tensor[(12, 6, 8), float64] */;
  %591 = %584.4;
  %592 = %589.2;
  (%590, %591, %var_7359, %592, meta[relay.Constant][26] /* ty=Tensor[(208), bool] */, meta[relay.Constant][27] /* ty=int8 */)
}

def @func_7736() -> Tensor[(1408), float64] {
  %593 = @func_3906() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) */;
  %593.3
}

def @func_4829() -> (Tensor[(12, 6, 8), int64],) {
  %594 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %595 = %594.0;
  (%595,)
}

def @func_7492() -> (Tensor[(12, 6, 8), float32],) {
  %596 = @func_5128() /* ty=Tensor[(12, 6, 8), float32] */;
  (%596,)
}

def @func_2775() -> (Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) {
  %597 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 14), float32] */;
  %598 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
  %599 = cast(meta[relay.Constant][29] /* ty=Tensor[(13, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %600 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(1, 9, 14), bool] */;
  %601 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %602 = %601.3;
  %603 = cast(%602, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %604 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %605 = floor_mod(%597, %598) /* ty=Tensor[(13, 9, 14), float32] */;
  %606 = not_equal(%599, %600) /* ty=Tensor[(13, 9, 14), bool] */;
  %607 = atanh(%603) /* ty=Tensor[(11, 15, 13), float32] */;
  %608 = %604.0;
  (%605, %606, %607, %608)
}

def @func_6777(%var_6768: Tensor[(6, 6, 15), float32], %var_6769: Tensor[(6, 6, 15), float32]) -> (Tensor[(6, 6, 15), float32],) {
  %609 = cast(%var_6769, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %610 = shape_of(%var_6768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%var_6768, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %613 = power(%611, %612) /* ty=Tensor[(6, 6, 15), float32] */;
  (%613,)
}

def @func_6162() -> (Tensor[(12, 6, 8), float32], Tensor[(560), float64], Tensor[(756), float32]) {
  %614 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %615 = cast(meta[relay.Constant][30] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %616 = reshape(%615, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %617 = @func_1902(%616) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) */;
  %618 = %614.2;
  %619 = %617.3;
  (%618, %619, meta[relay.Constant][30] /* ty=Tensor[(756), float32] */)
}

def @func_2546() -> (Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) {
  %620 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %621 = cast(meta[relay.Constant][31] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %622 = cast(meta[relay.Constant][32] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %623 = reshape(%621, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %624 = reshape(%622, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %625 = @func_852(%623, %624) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
  %626 = %620.2;
  %627 = %625.5;
  (%626, %627, meta[relay.Constant][31] /* ty=Tensor[(312), uint64] */, meta[relay.Constant][32] /* ty=Tensor[(1408), bool] */)
}

def @func_7288() -> (Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %628 = @func_6990() /* ty=(Tensor[(12, 6, 8), int8],) */;
  %629 = @func_5367() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %630 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %631 = %628.0;
  %632 = %629.0;
  %633 = %630.0;
  (%631, %632, %633)
}

def @func_4699(%var_4691: Tensor[(12, 6, 8), int64]) -> (Tensor[(12, 6, 8), uint32],) {
  %634 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
  %635 = cast(%var_4691, dtype="uint32") /* ty=Tensor[(12, 6, 8), uint32] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="uint32") /* ty=Tensor[(12, 6, 8), uint32] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %639 = bitwise_xor(%637, %638) /* ty=Tensor[(12, 6, 8), uint32] */;
  (%639,)
}

def @func_5698() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %640 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %641 = %640.0;
  %642 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
  (%641, %642)
}

def @func_6858(%var_6855: Tensor[(11), float64]) -> (Tensor[(2145), int8], Tensor[(7, 3, 11), float32], Tensor[(11), float64], Tensor[(231), float64]) {
  %643 = @func_2568() /* ty=(Tensor[(2145), int8],) */;
  %644 = cast(%var_6855, dtype="float64") /* ty=Tensor[(11), float64] */;
  %645 = cast(meta[relay.Constant][33] /* ty=Tensor[(231), float64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
  %646 = reshape(%644, newshape=[1, 1, 11]) /* ty=Tensor[(1, 1, 11), float64] */;
  %647 = reshape(%645, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), float64] */;
  %648 = @func_6672(%646, %647) /* ty=(Tensor[(7, 3, 11), float32],) */;
  %649 = %643.0;
  %650 = %648.0;
  (%649, %650, %var_6855, meta[relay.Constant][33] /* ty=Tensor[(231), float64] */)
}

def @func_3925() -> (Tensor[(12, 6, 8), int64],) {
  %651 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %652 = %651.0;
  (%652,)
}

def @func_3320() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) {
  %653 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %654 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %655 = @func_2568() /* ty=(Tensor[(2145), int8],) */;
  %656 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %657 = %653.0;
  %658 = %654.4;
  %659 = %655.0;
  (%656, %657, %658, %659)
}

def @func_5876(%var_5799: Tensor[(715, 3), float32], %var_5812: Tensor[(352, 4), bool]) -> (Tensor[(12, 6, 8), float64], Tensor[(560), int8], Tensor[(560), int8], Tensor[(715, 3), float32], Tensor[(12, 6, 8), int64], Tensor[(312), uint64], Tensor[(352, 4), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) {
  %660 = @func_5730() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %661 = cast(meta[relay.Constant][34] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
  %662 = cast(meta[relay.Constant][35] /* ty=Tensor[(715, 3), float32] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %663 = reshape(%661, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %664 = reshape(%662, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), float32] */;
  %665 = @func_4171(%663, %664) /* ty=(Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) */;
  %666 = cast(%var_5799, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %667 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(715, 3), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %668 = cast(meta[relay.Constant][35] /* ty=Tensor[(715, 3), float32] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %670 = cast(meta[relay.Constant][36] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %671 = cast(%var_5812, dtype="bool") /* ty=Tensor[(352, 4), bool] */;
  %672 = reshape(%670, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %673 = reshape(%671, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %674 = @func_852(%672, %673) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
  %675 = @func_3925() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %676 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
  %677 = cast(%var_5812, dtype="bool") /* ty=Tensor[(352, 4), bool] */;
  %678 = reshape(%677, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %679 = @func_730(%678) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */;
  %680 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %681 = %660.0;
  %682 = %665.1;
  %683 = mod(%668, %669) /* ty=Tensor[(715, 3), float32] */;
  %684 = %674.4;
  %685 = %675.0;
  %686 = %676.0;
  %687 = %679.0;
  %688 = %680.2;
  (%681, %682, meta[relay.Constant][34] /* ty=Tensor[(560), int8] */, %683, %684, meta[relay.Constant][36] /* ty=Tensor[(312), uint64] */, %var_5812, %685, %686, %687, %688)
}

def @func_1502(%var_1467: Tensor[(12, 6, 8), float32], %var_1475: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), bool], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), int64]) {
  %689 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %690 = %689.4;
  %691 = cast(%var_1467, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %695 = cast(meta[relay.Constant][37] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %696 = cast(%var_1475, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %697 = reshape(%695, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %698 = reshape(%696, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %699 = @func_852(%697, %698) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
  %700 = less(%693, %694) /* ty=Tensor[(12, 6, 8), bool] */;
  %701 = %699.5;
  %702 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  (%700, %701, meta[relay.Constant][37] /* ty=Tensor[(312), uint64] */, %var_1475, %702)
}

def @func_6247(%var_6240: Tensor[(4, 1, 16), float32], %var_6241: Tensor[(4, 8, 16), float32]) -> Tensor[(4, 8, 16), bool] {
  %703 = cast(%var_6240, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %704 = cast(%var_6241, dtype="bool") /* ty=Tensor[(4, 8, 16), bool] */;
  not_equal(%703, %704) /* ty=Tensor[(4, 8, 16), bool] */
}

def @func_1227() -> (Tensor[(12, 6, 8), int64],) {
  %705 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
  (%705,)
}

def @func_6073() -> (Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) {
  %706 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
  %707 = @func_5392() /* ty=Tensor[(2145), float32] */;
  %708 = %706.0;
  (%707, %708)
}

def @func_6294() -> (Tensor[(12, 6, 8), float32],) {
  %709 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %710 = %709.0;
  (%710,)
}

def @func_6672(%var_6654: Tensor[(1, 1, 11), float64], %var_6655: Tensor[(7, 3, 11), float64]) -> (Tensor[(7, 3, 11), float32],) {
  %711 = cast(%var_6654, dtype="float64") /* ty=Tensor[(1, 1, 11), float64] */;
  %712 = cast(%var_6655, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
  %713 = floor_mod(%711, %712) /* ty=Tensor[(7, 3, 11), float64] */;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(7, 3, 11), float32] */;
  %715 = erf(%714) /* ty=Tensor[(7, 3, 11), float32] */;
  (%715,)
}

def @func_2946() -> (Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) {
  %716 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %717 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
  %718 = %716.1;
  (%717, %718)
}

def @func_98(%var_87: Tensor[(11, 15, 13), int8], %var_88: Tensor[(11, 15, 13), int8]) -> Tensor[(11, 15, 13), int8] {
  %719 = cast(%var_88, dtype="int8") /* ty=Tensor[(11, 15, 13), int8] */;
  %720 = shape_of(%var_87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_87, dtype="int8") /* ty=Tensor[(11, 15, 13), int8] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%721, %722) /* ty=Tensor[(11, 15, 13), int8] */
}

def @func_6943() -> Tensor[(12, 6, 8), float64] {
  %723 = @func_5698() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %724 = %723.0;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  log(%725) /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_2568() -> (Tensor[(2145), int8],) {
  %726 = @func_2132() /* ty=Tensor[(2145), int8] */;
  (%726,)
}

def @func_5063() -> Tensor[(12, 6, 8), int8] {
  @func_1545() /* ty=Tensor[(12, 6, 8), int8] */
}

def @func_75(%var_64: Tensor[(4, 10, 14), int8], %var_65: Tensor[(4, 10, 14), int8]) -> Tensor[(4, 10, 14), bool] {
  %727 = cast(%var_65, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %728 = shape_of(%var_64, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%var_64, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%729, %730) /* ty=Tensor[(4, 10, 14), bool] */
}

def @func_4445(%var_4426: Tensor[(12, 4, 12), float64], %var_4438: Tensor[(12, 4, 12), float64]) -> Tensor[(12, 4, 12), uint16] {
  %731 = cast(%var_4426, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
  %732 = cosh(%731) /* ty=Tensor[(12, 4, 12), float64] */;
  %733 = cast(%var_4438, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
  %734 = shape_of(%732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %735 = cast(%732, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
  %736 = dyn.reshape(%733, %734, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  bitwise_xor(%735, %736) /* ty=Tensor[(12, 4, 12), uint16] */
}

def @func_5485(%var_5461: Tensor[(12, 32), float64]) -> (Tensor[(2145), float32], Tensor[(2, 16, 12), float64], Tensor[(12, 32), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %737 = @func_3163() /* ty=(Tensor[(2145), float32],) */;
  %738 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 32), float64] */, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %739 = reshape(%738, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), float64] */;
  %740 = cast(%var_5461, dtype="bool") /* ty=Tensor[(12, 32), bool] */;
  %741 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(12, 32), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %742 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 32), float64] */, dtype="bool") /* ty=Tensor[(12, 32), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %744 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %745 = %737.0;
  %746 = cast(%745, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %747 = reshape(%746, newshape=[2145]) /* ty=Tensor[(2145), int8] */;
  %748 = @func_647(%747) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %749 = @func_1608(%739) /* ty=Tensor[(2, 16, 12), float64] */;
  %750 = equal(%742, %743) /* ty=Tensor[(12, 32), bool] */;
  %751 = %744.1;
  %752 = %748.0;
  (%745, %749, %750, %751, %752)
}

def @func_1638() -> (Tensor[(12, 6, 8), int64],) {
  %753 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
  %754 = %753.0;
  (%754,)
}

def @func_7157(%var_7130: Tensor[(9, 60), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), float32], Tensor[(9, 1, 1), float32], Tensor[(6, 6, 15), float32], Tensor[(9, 60), float32], Tensor[(12, 6, 8), float32]) {
  %755 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %756 = @func_3764() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %757 = @func_2989() /* ty=(Tensor[(9, 1, 1), float32], Tensor[(1408), bool], Tensor[(12, 6, 8), float64]) */;
  %758 = cast(%var_7130, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %759 = cast(%var_7130, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %760 = reshape(%758, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %761 = reshape(%759, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %762 = @func_6777(%760, %761) /* ty=(Tensor[(6, 6, 15), float32],) */;
  %763 = %755.0;
  %764 = %756.1;
  %765 = @func_4974() /* ty=Tensor[(13, 9, 14), float32] */;
  %766 = %757.0;
  %767 = %762.0;
  %768 = @func_5560() /* ty=Tensor[(12, 6, 8), float32] */;
  (%763, %764, %765, %766, %767, %var_7130, %768)
}

def @func_2227() -> (Tensor[(12, 6, 8), float64],) {
  %769 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %770 = %769.0;
  %771 = cast(%770, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %772 = cos(%771) /* ty=Tensor[(12, 6, 8), float64] */;
  (%772,)
}

def @func_4171(%var_4163: Tensor[(560), int8], %var_4166: Tensor[(11, 15, 13), float32]) -> (Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) {
  %773 = cast(%var_4163, dtype="int8") /* ty=Tensor[(560), int8] */;
  %774 = cast(%var_4163, dtype="int8") /* ty=Tensor[(560), int8] */;
  %775 = reshape(%773, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %776 = reshape(%774, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %777 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %778 = %777.1;
  %779 = cast(%var_4166, dtype="uint64") /* ty=Tensor[(11, 15, 13), uint64] */;
  %780 = shape_of(%778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %781 = cast(%778, dtype="uint64") /* ty=Tensor[(11, 15, 13), uint64] */;
  %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %783 = @func_75(%775, %776) /* ty=Tensor[(4, 10, 14), bool] */;
  %784 = bitwise_or(%781, %782) /* ty=Tensor[(11, 15, 13), uint64] */;
  (%783, %var_4163, %784)
}

def @func_5730() -> (Tensor[(12, 6, 8), float64],) {
  %785 = @func_4931() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float32]) */;
  %786 = %785.0;
  (%786,)
}

def @func_5392() -> Tensor[(2145), float32] {
  @func_3575() /* ty=Tensor[(2145), float32] */
}

def @func_3906() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) {
  %787 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %788 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %789 = cast(meta[relay.Constant][39] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %790 = reshape(%789, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %791 = @func_730(%790) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */;
  %792 = cast(meta[relay.Constant][39] /* ty=Tensor[(1408), bool] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %793 = %787.1;
  %794 = %788.0;
  %795 = %791.1;
  %796 = atanh(%792) /* ty=Tensor[(1408), float64] */;
  %797 = @func_1545() /* ty=Tensor[(12, 6, 8), int8] */;
  %798 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
  (%793, %794, %795, %796, %797, %798)
}

def @func_6445(%var_6434: Tensor[(1, 8, 7), int8], %var_6435: Tensor[(3, 8, 7), int8]) -> (Tensor[(3, 8, 7), int8],) {
  %799 = cast(%var_6434, dtype="int8") /* ty=Tensor[(1, 8, 7), int8] */;
  %800 = cast(%var_6435, dtype="int8") /* ty=Tensor[(3, 8, 7), int8] */;
  %801 = bitwise_or(%799, %800) /* ty=Tensor[(3, 8, 7), int8] */;
  (%801,)
}

def @func_901() -> Tensor[(12, 6, 8), int64] {
  @func_793() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_2818() -> (Tensor[(12, 6, 8), int64],) {
  %802 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %803 = %802.0;
  (%803,)
}

def @func_2282() -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) {
  %804 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %805 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
  %806 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
  %807 = cast(%806, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %808 = %804.0;
  %809 = %805.2;
  %810 = log2(%807) /* ty=Tensor[(12, 6, 8), float32] */;
  (%808, %809, %810)
}

def @func_5934() -> Tensor[(12, 6, 8), int64] {
  %811 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %811.0
}

def @func_7594(%var_7551: Tensor[(1408), float64]) -> (Tensor[(2145), float32], Tensor[(1408), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int8]) {
  %812 = @func_3906() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) */;
  %813 = %812.3;
  %814 = cast(%var_7551, dtype="int32") /* ty=Tensor[(1408), int32] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(1), int32] */;
  %816 = cast(%813, dtype="int32") /* ty=Tensor[(1408), int32] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?), int32] */;
  %818 = @func_2467() /* ty=Tensor[(2145), float32] */;
  %819 = left_shift(%816, %817) /* ty=Tensor[(1408), int32] */;
  %820 = @func_5560() /* ty=Tensor[(12, 6, 8), float32] */;
  %821 = @func_5063() /* ty=Tensor[(12, 6, 8), int8] */;
  (%818, %819, %820, %821)
}

def @func_1694() -> (Tensor[(12, 6, 8), int64],) {
  %822 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %823 = %822.1;
  (%823,)
}

def @func_593() -> Tensor[(12, 6, 8), int64] {
  %824 = cast(meta[relay.Constant][41] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %825 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%826, %827) /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_765(%var_760: Tensor[(560), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) {
  %828 = cast(meta[relay.Constant][42] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %829 = cast(meta[relay.Constant][42] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %830 = reshape(%828, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %831 = reshape(%829, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %832 = cast(meta[relay.Constant][43] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %833 = cast(%var_760, dtype="float64") /* ty=Tensor[(560), float64] */;
  %834 = reshape(%832, newshape=[4, 6, 13]) /* ty=Tensor[(4, 6, 13), uint64] */;
  %835 = reshape(%833, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
  %836 = @func_247(%834, %835) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */;
  %837 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %838 = @func_98(%830, %831) /* ty=Tensor[(11, 15, 13), int8] */;
  %839 = %836.2;
  (%837, %838, meta[relay.Constant][42] /* ty=Tensor[(2145), int8] */, %839, meta[relay.Constant][43] /* ty=Tensor[(312), uint64] */, %var_760)
}

def @func_6601() -> (Tensor[(2145), float32], Tensor[(2145), int8], Tensor[(12, 6, 8), float32]) {
  %840 = @func_4484() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) */;
  %841 = @func_5896() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(2145), float32]) */;
  %842 = %840.1;
  %843 = @func_2132() /* ty=Tensor[(2145), int8] */;
  %844 = %841.0;
  (%842, %843, %844)
}

def @func_4974() -> Tensor[(13, 9, 14), float32] {
  %845 = @func_4484() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) */;
  %845.0
}

def @func_5975() -> (Tensor[(12, 6, 8), int64],) {
  %846 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %847 = %846.0;
  (%847,)
}

def @func_7673(%var_7638: Tensor[(9, 11, 2), float32]) -> Tensor[(9, 11, 2), float32] {
  %848 = cast(%var_7638, dtype="float32") /* ty=Tensor[(9, 11, 2), float32] */;
  atanh(%848) /* ty=Tensor[(9, 11, 2), float32] */
}

def @func_6206() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) {
  %849 = @func_5730() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %850 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
  %851 = %849.0;
  (%850, %851)
}

def @func_7928(%var_7925: Tensor[(40, 14), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(560), float64], Tensor[(312), uint64], Tensor[(40, 14), float64]) {
  %852 = @func_5698() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %853 = cast(meta[relay.Constant][44] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %854 = cast(%var_7925, dtype="float64") /* ty=Tensor[(40, 14), float64] */;
  %855 = reshape(%853, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %856 = reshape(%854, newshape=[560]) /* ty=Tensor[(560), float64] */;
  %857 = @func_3671(%855, %856) /* ty=(Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64], Tensor[(13, 9, 14), float64], Tensor[(12, 6, 8), float64]) */;
  %858 = %852.1;
  %859 = %857.7;
  (%858, %859, meta[relay.Constant][44] /* ty=Tensor[(312), uint64] */, %var_7925)
}

def @func_3555() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %860 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %861 = %860.0;
  %862 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  (%861, %862)
}

def @func_2627() -> Tensor[(10, 16, 5), float32] {
  %863 = cast(meta[relay.Constant][45] /* ty=Tensor[(10, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 5), float32] */;
  atan(%863) /* ty=Tensor[(10, 16, 5), float32] */
}

def @func_1945() -> Tensor[(12, 6, 8), int64] {
  %864 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %864.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4411() -> Tensor[(2145), float32] {
  %0 = fn () -> Tensor[(2145), float32] {
    @func_2467() /* ty=Tensor[(2145), float32] */
  };
  %0() /* ty=Tensor[(2145), float32] */
}

def @func_1904(%var_1903: Tensor[(7, 12, 9), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) {
  %18 = fn (%var_1834: Tensor[(7, 12, 9), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) {
    %1 = cast(%var_1834, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
    %2 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 12, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 12, 9), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 9), float32] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %5 = floor_mod(%3, %4) /* ty=Tensor[(7, 12, 9), float32] */;
    %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 12, 9), float32] */, dtype="int16") /* ty=Tensor[(7, 12, 9), int16] */;
    %7 = shape_of(%5, dtype="int32") /* ty=Tensor[(3), int32] */;
    %8 = cast(%5, dtype="int16") /* ty=Tensor[(7, 12, 9), int16] */;
    %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %11 = reshape(%10, newshape=[560]) /* ty=Tensor[(560), float64] */;
    %12 = @func_765(%11) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) */;
    %13 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
    %14 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
    %15 = bitwise_or(%8, %9) /* ty=Tensor[(7, 12, 9), int16] */;
    %16 = %12.5;
    %17 = %13.1;
    (%14, %15, %16, meta[relay.Constant][1] /* ty=Tensor[(560), float64] */, %17)
  };
  %18(%var_1903) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) */
}

def @func_98(%var_87: Tensor[(11, 15, 13), int8], %var_88: Tensor[(11, 15, 13), int8]) -> Tensor[(11, 15, 13), int8] {
  %19 = cast(%var_88, dtype="int8") /* ty=Tensor[(11, 15, 13), int8] */;
  %20 = shape_of(%var_87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_87, dtype="int8") /* ty=Tensor[(11, 15, 13), int8] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_xor(%21, %22) /* ty=Tensor[(11, 15, 13), int8] */
}

def @func_6218() -> Tensor[(12, 6, 8), float64] {
  %24 = fn () -> Tensor[(12, 6, 8), float64] {
    %23 = @func_3764() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
    %23.0
  };
  %24() /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_78(%var_76: Tensor[(4, 10, 14), int8], %var_77: Tensor[(4, 10, 14), int8]) -> Tensor[(4, 10, 14), bool] {
  %29 = fn (%var_64: Tensor[(4, 10, 14), int8], %var_65: Tensor[(4, 10, 14), int8]) -> Tensor[(4, 10, 14), bool] {
    %25 = cast(%var_65, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
    %26 = shape_of(%var_64, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%var_64, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%27, %28) /* ty=Tensor[(4, 10, 14), bool] */
  };
  %29(%var_76, %var_77) /* ty=Tensor[(4, 10, 14), bool] */
}

def @func_7419(%var_7417: Tensor[(15, 7, 10), float64]) -> (Tensor[(15, 7, 10), float64], Tensor[(11, 15, 13), float32]) {
  @func_7416(%var_7417) /* ty=(Tensor[(15, 7, 10), float64], Tensor[(11, 15, 13), float32]) */
}

def @func_6282() -> (Tensor[(312), uint64],) {
  %30 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
  %31 = %30.2;
  (%31,)
}

def @func_7637() -> Tensor[(12, 6, 8), float32] {
  @func_7635() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_7289() -> (Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %38 = fn () -> (Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
    %32 = @func_6990() /* ty=(Tensor[(12, 6, 8), int8],) */;
    %33 = @func_5367() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
    %34 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %35 = %32.0;
    %36 = %33.0;
    %37 = %34.0;
    (%35, %36, %37)
  };
  %38() /* ty=(Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */
}

def @func_6247(%var_6240: Tensor[(4, 1, 16), float32], %var_6241: Tensor[(4, 8, 16), float32]) -> Tensor[(4, 8, 16), bool] {
  %39 = cast(%var_6240, dtype="bool") /* ty=Tensor[(4, 1, 16), bool] */;
  %40 = cast(%var_6241, dtype="bool") /* ty=Tensor[(4, 8, 16), bool] */;
  not_equal(%39, %40) /* ty=Tensor[(4, 8, 16), bool] */
}

def @func_2819() -> (Tensor[(12, 6, 8), int64],) {
  %43 = fn () -> (Tensor[(12, 6, 8), int64],) {
    %41 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %42 = %41.0;
    (%42,)
  };
  %43() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_5393() -> Tensor[(2145), float32] {
  %44 = fn () -> Tensor[(2145), float32] {
    @func_3575() /* ty=Tensor[(2145), float32] */
  };
  %44() /* ty=Tensor[(2145), float32] */
}

def @func_2775() -> (Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) {
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(1, 9, 14), float32] */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 9, 14), float32] */, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(13, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(1, 9, 14), bool] */;
  %49 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %50 = %49.3;
  %51 = cast(%50, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
  %52 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %53 = floor_mod(%45, %46) /* ty=Tensor[(13, 9, 14), float32] */;
  %54 = not_equal(%47, %48) /* ty=Tensor[(13, 9, 14), bool] */;
  %55 = atanh(%51) /* ty=Tensor[(11, 15, 13), float32] */;
  %56 = %52.0;
  (%53, %54, %55, %56)
}

def @func_7160(%var_7158: Tensor[(9, 60), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), float32], Tensor[(9, 1, 1), float32], Tensor[(6, 6, 15), float32], Tensor[(9, 60), float32], Tensor[(12, 6, 8), float32]) {
  @func_7157(%var_7158) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), float32], Tensor[(9, 1, 1), float32], Tensor[(6, 6, 15), float32], Tensor[(9, 60), float32], Tensor[(12, 6, 8), float32]) */
}

def @func_7254(%var_7252: Tensor[(11, 15, 13), int8], %var_7253: Tensor[(12), uint64]) -> (Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), float64], Tensor[(2145), float64], Tensor[(3, 2, 2), float64], Tensor[(12), uint64]) {
  %71 = fn (%var_7216: Tensor[(11, 15, 13), int8], %var_7246: Tensor[(12), uint64]) -> (Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), float64], Tensor[(2145), float64], Tensor[(3, 2, 2), float64], Tensor[(12), uint64]) {
    %57 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
    %58 = %57.1;
    %59 = cast(%var_7216, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
    %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%58, dtype="float32") /* ty=Tensor[(11, 15, 13), float32] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %63 = @func_2132() /* ty=Tensor[(2145), int8] */;
    %64 = cast(%63, dtype="float64") /* ty=Tensor[(2145), float64] */;
    %65 = cast(%var_7246, dtype="uint64") /* ty=Tensor[(12), uint64] */;
    %66 = reshape(%65, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), uint64] */;
    %67 = mod(%61, %62) /* ty=Tensor[(11, 15, 13), float32] */;
    %68 = @func_6943() /* ty=Tensor[(12, 6, 8), float64] */;
    %69 = sinh(%64) /* ty=Tensor[(2145), float64] */;
    %70 = @func_5589(%66) /* ty=Tensor[(3, 2, 2), float64] */;
    (%67, %68, %69, %70, %var_7246)
  };
  %71(%var_7252, %var_7253) /* ty=(Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), float64], Tensor[(2145), float64], Tensor[(3, 2, 2), float64], Tensor[(12), uint64]) */
}

def @func_7928(%var_7925: Tensor[(40, 14), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(560), float64], Tensor[(312), uint64], Tensor[(40, 14), float64]) {
  %72 = @func_5698() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %74 = cast(%var_7925, dtype="float64") /* ty=Tensor[(40, 14), float64] */;
  %75 = reshape(%73, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %76 = reshape(%74, newshape=[560]) /* ty=Tensor[(560), float64] */;
  %77 = @func_3671(%75, %76) /* ty=(Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64], Tensor[(13, 9, 14), float64], Tensor[(12, 6, 8), float64]) */;
  %78 = %72.1;
  %79 = %77.7;
  (%78, %79, meta[relay.Constant][4] /* ty=Tensor[(312), uint64] */, %var_7925)
}

def @func_6163() -> (Tensor[(12, 6, 8), float32], Tensor[(560), float64], Tensor[(756), float32]) {
  %86 = fn () -> (Tensor[(12, 6, 8), float32], Tensor[(560), float64], Tensor[(756), float32]) {
    %80 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %81 = cast(meta[relay.Constant][5] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %82 = reshape(%81, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
    %83 = @func_1902(%82) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) */;
    %84 = %80.2;
    %85 = %83.3;
    (%84, %85, meta[relay.Constant][5] /* ty=Tensor[(756), float32] */)
  };
  %86() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(560), float64], Tensor[(756), float32]) */
}

def @func_2948() -> (Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) {
  @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */
}

def @func_2283() -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) {
  %94 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) {
    %87 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %88 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
    %89 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
    %90 = cast(%89, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
    %91 = %87.0;
    %92 = %88.2;
    %93 = log2(%90) /* ty=Tensor[(12, 6, 8), float32] */;
    (%91, %92, %93)
  };
  %94() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */
}

def @func_3765() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %99 = fn () -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
    %95 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
    %96 = @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %97 = %95.0;
    %98 = %96.0;
    (%97, %98)
  };
  %99() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */
}

def @func_2777() -> (Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) {
  @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */
}

def @func_6945() -> Tensor[(12, 6, 8), float64] {
  @func_6943() /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_7635() -> Tensor[(12, 6, 8), float32] {
  @func_5560() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_5485(%var_5461: Tensor[(12, 32), float64]) -> (Tensor[(2145), float32], Tensor[(2, 16, 12), float64], Tensor[(12, 32), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %100 = @func_3163() /* ty=(Tensor[(2145), float32],) */;
  %101 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 32), float64] */, dtype="float64") /* ty=Tensor[(12, 32), float64] */;
  %102 = reshape(%101, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), float64] */;
  %103 = cast(%var_5461, dtype="bool") /* ty=Tensor[(12, 32), bool] */;
  %104 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(12, 32), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %105 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 32), float64] */, dtype="bool") /* ty=Tensor[(12, 32), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %107 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %108 = %100.0;
  %109 = cast(%108, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %110 = reshape(%109, newshape=[2145]) /* ty=Tensor[(2145), int8] */;
  %111 = @func_647(%110) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %112 = @func_1608(%102) /* ty=Tensor[(2, 16, 12), float64] */;
  %113 = equal(%105, %106) /* ty=Tensor[(12, 32), bool] */;
  %114 = %107.1;
  %115 = %111.0;
  (%108, %112, %113, %114, %115)
}

def @func_2601() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) {
  @func_2599() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) */
}

def @func_1694() -> (Tensor[(12, 6, 8), int64],) {
  %116 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %117 = %116.1;
  (%117,)
}

def @func_5935() -> Tensor[(12, 6, 8), int64] {
  %119 = fn () -> Tensor[(12, 6, 8), int64] {
    %118 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %118.0
  };
  %119() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_1009() -> Tensor[(12, 6, 8), float32] {
  %120 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %121 = cast(%120, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  log10(%121) /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_2629() -> Tensor[(10, 16, 5), float32] {
  @func_2627() /* ty=Tensor[(10, 16, 5), float32] */
}

def @func_2086(%var_2085: Tensor[(7, 10, 1), float64]) -> (Tensor[(7, 10, ?), uint64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(7, 10, ?), bool]) {
  %146 = fn (%var_2023: Tensor[(7, 10, 1), float64]) -> (Tensor[(7, 10, ?), uint64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(7, 10, ?), bool]) {
    %122 = cast(%var_2023, dtype="float64") /* ty=Tensor[(7, 10, 1), float64] */;
    %123 = atan(%122) /* ty=Tensor[(7, 10, 1), float64] */;
    %124 = cast(%123, dtype="uint64") /* ty=Tensor[(7, 10, 1), uint64] */;
    %125 = shape_of(%var_2023, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%var_2023, dtype="uint64") /* ty=Tensor[(7, 10, 1), uint64] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %128 = cast(%var_2023, dtype="int8") /* ty=Tensor[(7, 10, 1), int8] */;
    %129 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %130 = cast(%123, dtype="int8") /* ty=Tensor[(7, 10, 1), int8] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %132 = add(%130, %131) /* ty=Tensor[(7, 10, ?), int8] */;
    %133 = cast(%123, dtype="bool") /* ty=Tensor[(7, 10, 1), bool] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%132, dtype="bool") /* ty=Tensor[(7, 10, ?), bool] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %137 = less_equal(%135, %136) /* ty=Tensor[(7, 10, ?), bool] */;
    %138 = cast(%137, dtype="bool") /* ty=Tensor[(7, 10, ?), bool] */;
    %139 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
    %140 = cast(%132, dtype="bool") /* ty=Tensor[(7, 10, ?), bool] */;
    %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %142 = bitwise_and(%126, %127) /* ty=Tensor[(7, 10, ?), uint64] */;
    %143 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
    %144 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
    %145 = less(%140, %141) /* ty=Tensor[(7, 10, ?), bool] */;
    (%142, %143, %144, %145)
  };
  %146(%var_2085) /* ty=(Tensor[(7, 10, ?), uint64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(7, 10, ?), bool]) */
}

def @func_6206() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) {
  %147 = @func_5730() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %148 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
  %149 = %147.0;
  (%148, %149)
}

def @func_6603() -> (Tensor[(2145), float32], Tensor[(2145), int8], Tensor[(12, 6, 8), float32]) {
  @func_6601() /* ty=(Tensor[(2145), float32], Tensor[(2145), int8], Tensor[(12, 6, 8), float32]) */
}

def @func_2228() -> (Tensor[(12, 6, 8), float64],) {
  %154 = fn () -> (Tensor[(12, 6, 8), float64],) {
    %150 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %151 = %150.0;
    %152 = cast(%151, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
    %153 = cos(%152) /* ty=Tensor[(12, 6, 8), float64] */;
    (%153,)
  };
  %154() /* ty=(Tensor[(12, 6, 8), float64],) */
}

def @func_6296() -> (Tensor[(12, 6, 8), float32],) {
  @func_6294() /* ty=(Tensor[(12, 6, 8), float32],) */
}

def @func_2857() -> (Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) {
  %159 = fn () -> (Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) {
    %155 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %156 = @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */;
    %157 = %155.2;
    %158 = %156.2;
    (%157, %158)
  };
  %159() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */
}

def @func_6251(%var_6249: Tensor[(4, 1, 16), float32], %var_6250: Tensor[(4, 8, 16), float32]) -> Tensor[(4, 8, 16), bool] {
  @func_6247(%var_6249, %var_6250) /* ty=Tensor[(4, 8, 16), bool] */
}

def @func_6449(%var_6447: Tensor[(1, 8, 7), int8], %var_6448: Tensor[(3, 8, 7), int8]) -> (Tensor[(3, 8, 7), int8],) {
  @func_6445(%var_6447, %var_6448) /* ty=(Tensor[(3, 8, 7), int8],) */
}

def @func_1639() -> (Tensor[(12, 6, 8), int64],) {
  %162 = fn () -> (Tensor[(12, 6, 8), int64],) {
    %160 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
    %161 = %160.0;
    (%161,)
  };
  %162() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_3401() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) {
  @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */
}

def @func_6023() -> (Tensor[(12, 6, 8), int64], Tensor[(10, 16, 5), float32]) {
  %163 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %164 = %163.1;
  %165 = @func_2627() /* ty=Tensor[(10, 16, 5), float32] */;
  (%164, %165)
}

def @func_5560() -> Tensor[(12, 6, 8), float32] {
  @func_5128() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_6284() -> (Tensor[(312), uint64],) {
  @func_6282() /* ty=(Tensor[(312), uint64],) */
}

def @func_4215(%var_4213: Tensor[(72), int8]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], int8, Tensor[(72), int8]) {
  @func_4212(%var_4213) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], int8, Tensor[(72), int8]) */
}

def @func_334(%var_332: Tensor[(11, 8, 16), bool], %var_333: Tensor[(11, 8, 16), bool]) -> (Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) {
  @func_330(%var_332, %var_333) /* ty=(Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) */
}

def @func_3231(%var_3207: Tensor[(2, 4, 7), float64], %var_3227: Tensor[(2, 4, 7), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(2, 4, 7), uint16]) {
  %166 = cast(meta[relay.Constant][7] /* ty=Tensor[(576), int64] */, dtype="int64") /* ty=Tensor[(576), int64] */;
  %167 = reshape(%166, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int64] */;
  %168 = @func_950(%167) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */;
  %169 = cast(%var_3207, dtype="float64") /* ty=Tensor[(2, 4, 7), float64] */;
  %170 = sin(%169) /* ty=Tensor[(2, 4, 7), float64] */;
  %171 = cast(%var_3227, dtype="uint16") /* ty=Tensor[(2, 4, 7), uint16] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="uint16") /* ty=Tensor[(2, 4, 7), uint16] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %175 = %168.0;
  %176 = subtract(%173, %174) /* ty=Tensor[(2, 4, 7), uint16] */;
  (%175, meta[relay.Constant][7] /* ty=Tensor[(576), int64] */, %176)
}

def @func_1338() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) {
  %185 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) {
    %177 = @func_1109() /* ty=(Tensor[(12, 6, 8), float64],) */;
    %178 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
    %179 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
    %180 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
    %181 = %177.0;
    %182 = %178.1;
    %183 = %179.1;
    %184 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
    (%180, %181, %182, %183, %184)
  };
  %185() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */
}

def @func_794() -> Tensor[(12, 6, 8), int64] {
  %186 = fn () -> Tensor[(12, 6, 8), int64] {
    @func_593() /* ty=Tensor[(12, 6, 8), int64] */
  };
  %186() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_3165() -> (Tensor[(2145), float32],) {
  @func_3163() /* ty=(Tensor[(2145), float32],) */
}

def @func_953(%var_951: Tensor[(12, 6, 8), int64]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) {
  @func_950(%var_951) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */
}

def @func_6781(%var_6779: Tensor[(6, 6, 15), float32], %var_6780: Tensor[(6, 6, 15), float32]) -> (Tensor[(6, 6, 15), float32],) {
  @func_6777(%var_6779, %var_6780) /* ty=(Tensor[(6, 6, 15), float32],) */
}

def @func_903() -> Tensor[(12, 6, 8), int64] {
  @func_901() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_2570() -> (Tensor[(2145), int8],) {
  @func_2568() /* ty=(Tensor[(2145), int8],) */
}

def @func_6992() -> (Tensor[(12, 6, 8), int8],) {
  @func_6990() /* ty=(Tensor[(12, 6, 8), int8],) */
}

def @func_7047(%var_7018: Tensor[(540), float32]) -> (Tensor[(12, 6, 8), bool], Tensor[(6, 6, 15), float32], Tensor[(540), float32]) {
  %187 = @func_2790() /* ty=(Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) */;
  %188 = cast(%var_7018, dtype="float32") /* ty=Tensor[(540), float32] */;
  %189 = cast(%var_7018, dtype="float32") /* ty=Tensor[(540), float32] */;
  %190 = reshape(%188, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %191 = reshape(%189, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %192 = @func_6777(%190, %191) /* ty=(Tensor[(6, 6, 15), float32],) */;
  %193 = %187.0;
  %194 = %192.0;
  (%193, %194, %var_7018)
}

def @func_855(%var_853: Tensor[(312), uint64], %var_854: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) {
  %212 = fn (%var_836: Tensor[(312), uint64], %var_840: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) {
    %195 = cast(%var_836, dtype="uint64") /* ty=Tensor[(312), uint64] */;
    %196 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 70), float64] */, dtype="float64") /* ty=Tensor[(8, 70), float64] */;
    %197 = reshape(%195, newshape=[4, 6, 13]) /* ty=Tensor[(4, 6, 13), uint64] */;
    %198 = reshape(%196, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
    %199 = @func_247(%197, %198) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */;
    %200 = cast(%var_840, dtype="bool") /* ty=Tensor[(1408), bool] */;
    %201 = reshape(%200, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
    %202 = @func_730(%201) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */;
    %203 = cast(%var_840, dtype="bool") /* ty=Tensor[(1408), bool] */;
    %204 = cast(%var_840, dtype="bool") /* ty=Tensor[(1408), bool] */;
    %205 = reshape(%203, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
    %206 = reshape(%204, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
    %207 = @func_330(%205, %206) /* ty=(Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) */;
    %208 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
    %209 = %199.4;
    %210 = %202.0;
    %211 = %207.3;
    (%208, %209, %var_836, meta[relay.Constant][8] /* ty=Tensor[(8, 70), float64] */, %210, %var_840, %211)
  };
  %212(%var_853, %var_854) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */
}

def @func_5051(%var_5049: Tensor[(8, 14, 8), bool], %var_5050: Tensor[(8, 14, 8), bool]) -> (Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), float32], Tensor[(12, 6, 8), int64]) {
  %225 = fn (%var_5013: Tensor[(8, 14, 8), bool], %var_5017: Tensor[(8, 14, 8), bool]) -> (Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), float32], Tensor[(12, 6, 8), int64]) {
    %213 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 1, 8), bool] */, dtype="bool") /* ty=Tensor[(8, 1, 8), bool] */;
    %214 = cast(%var_5013, dtype="bool") /* ty=Tensor[(8, 14, 8), bool] */;
    %215 = cast(%var_5017, dtype="bool") /* ty=Tensor[(8, 14, 8), bool] */;
    %216 = shape_of(%var_5013, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%var_5013, dtype="bool") /* ty=Tensor[(8, 14, 8), bool] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %219 = cast(%var_5013, dtype="float32") /* ty=Tensor[(8, 14, 8), float32] */;
    %220 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %221 = logical_or(%213, %214) /* ty=Tensor[(8, 14, 8), bool] */;
    %222 = greater(%217, %218) /* ty=Tensor[(8, 14, 8), bool] */;
    %223 = tan(%219) /* ty=Tensor[(8, 14, 8), float32] */;
    %224 = %220.0;
    (%221, %222, %223, %224)
  };
  %225(%var_5049, %var_5050) /* ty=(Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), float32], Tensor[(12, 6, 8), int64]) */
}

def @func_2489() -> Tensor[(12, 6, 8), float64] {
  @func_2487() /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_5591(%var_5590: Tensor[(3, 2, 2), uint64]) -> Tensor[(3, 2, 2), float64] {
  %237 = fn (%var_5576: Tensor[(3, 2, 2), uint64]) -> Tensor[(3, 2, 2), float64] {
    %226 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 2, 2), uint64] */, dtype="uint64") /* ty=Tensor[(3, 2, 2), uint64] */;
    %227 = shape_of(%var_5576, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%var_5576, dtype="uint64") /* ty=Tensor[(3, 2, 2), uint64] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %230 = right_shift(%228, %229) /* ty=Tensor[(3, 2, 2), uint64] */;
    %231 = cast(%230, dtype="float32") /* ty=Tensor[(3, 2, 2), float32] */;
    %232 = erf(%231) /* ty=Tensor[(3, 2, 2), float32] */;
    %233 = cast(%230, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
    %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%232, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%235, %236) /* ty=Tensor[(3, 2, 2), float64] */
  };
  %237(%var_5590) /* ty=Tensor[(3, 2, 2), float64] */
}

def @func_5130() -> Tensor[(12, 6, 8), float32] {
  @func_5128() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_1034() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */
}

def @func_1199() -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) {
  %244 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) {
    %238 = cast(meta[relay.Constant][11] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
    %239 = cast(meta[relay.Constant][11] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
    %240 = reshape(%238, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
    %241 = reshape(%239, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
    %242 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
    %243 = @func_98(%240, %241) /* ty=Tensor[(11, 15, 13), int8] */;
    (%242, %243, meta[relay.Constant][11] /* ty=Tensor[(2145), int8] */)
  };
  %244() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */
}

def @func_7493() -> (Tensor[(12, 6, 8), float32],) {
  %246 = fn () -> (Tensor[(12, 6, 8), float32],) {
    %245 = @func_5128() /* ty=Tensor[(12, 6, 8), float32] */;
    (%245,)
  };
  %246() /* ty=(Tensor[(12, 6, 8), float32],) */
}

def @func_4701(%var_4700: Tensor[(12, 6, 8), int64]) -> (Tensor[(12, 6, 8), uint32],) {
  %253 = fn (%var_4691: Tensor[(12, 6, 8), int64]) -> (Tensor[(12, 6, 8), uint32],) {
    %247 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
    %248 = cast(%var_4691, dtype="uint32") /* ty=Tensor[(12, 6, 8), uint32] */;
    %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(3), int32] */;
    %250 = cast(%247, dtype="uint32") /* ty=Tensor[(12, 6, 8), uint32] */;
    %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %252 = bitwise_xor(%250, %251) /* ty=Tensor[(12, 6, 8), uint32] */;
    (%252,)
  };
  %253(%var_4700) /* ty=(Tensor[(12, 6, 8), uint32],) */
}

def @func_386(%var_384: Tensor[(7, 9, 5), uint16], %var_385: Tensor[(7, 9, 5), uint16]) -> Tensor[(7, 9, 5), bool] {
  @func_382(%var_384, %var_385) /* ty=Tensor[(7, 9, 5), bool] */
}

def @func_7416(%var_7395: Tensor[(15, 7, 10), float64]) -> (Tensor[(15, 7, 10), float64], Tensor[(11, 15, 13), float32]) {
  %254 = cast(%var_7395, dtype="float64") /* ty=Tensor[(15, 7, 10), float64] */;
  %255 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %256 = asin(%254) /* ty=Tensor[(15, 7, 10), float64] */;
  %257 = %255.1;
  (%256, %257)
}

def @func_1228() -> (Tensor[(12, 6, 8), int64],) {
  %259 = fn () -> (Tensor[(12, 6, 8), int64],) {
    %258 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
    (%258,)
  };
  %259() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_2402(%var_2316: Tensor[(13, 9, 3), uint32], %var_2317: Tensor[(13, 9, 3), uint32], %var_2332: Tensor[(315), uint16]) -> (Tensor[(13, 9, 3), bool], Tensor[(11, 15, 13), int8], Tensor[(7, 9, 5), bool], Tensor[(315), uint16], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(3, 104), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), bool]) {
  %260 = cast(%var_2317, dtype="bool") /* ty=Tensor[(13, 9, 3), bool] */;
  %261 = shape_of(%var_2316, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%var_2316, dtype="bool") /* ty=Tensor[(13, 9, 3), bool] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %264 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
  %265 = cast(%var_2332, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %266 = cast(%var_2332, dtype="uint16") /* ty=Tensor[(315), uint16] */;
  %267 = reshape(%265, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), uint16] */;
  %268 = reshape(%266, newshape=[7, 9, 5]) /* ty=Tensor[(7, 9, 5), uint16] */;
  %269 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %270 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %271 = @func_1109() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %272 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %273 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 104), uint64] */, dtype="uint64") /* ty=Tensor[(3, 104), uint64] */;
  %274 = cast(meta[relay.Constant][13] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %275 = reshape(%273, newshape=[312]) /* ty=Tensor[(312), uint64] */;
  %276 = reshape(%274, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %277 = @func_852(%275, %276) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
  %278 = %270.0;
  %279 = cast(%278, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %280 = cast(meta[relay.Constant][13] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %281 = reshape(%279, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), float32] */;
  %282 = reshape(%280, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
  %283 = @func_1502(%281, %282) /* ty=(Tensor[(12, 6, 8), bool], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), int64]) */;
  %284 = less(%262, %263) /* ty=Tensor[(13, 9, 3), bool] */;
  %285 = %264.2;
  %286 = @func_382(%267, %268) /* ty=Tensor[(7, 9, 5), bool] */;
  %287 = %269.0;
  %288 = %271.0;
  %289 = %272.0;
  %290 = %277.4;
  %291 = %283.0;
  (%284, %285, %286, %var_2332, %287, %278, %288, %289, %290, meta[relay.Constant][12] /* ty=Tensor[(3, 104), uint64] */, meta[relay.Constant][13] /* ty=Tensor[(1408), bool] */, %291)
}

def @func_6521() -> (Tensor[(1408), float64], Tensor[(12, 6, 8), int8]) {
  %297 = fn () -> (Tensor[(1408), float64], Tensor[(12, 6, 8), int8]) {
    %292 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
    %293 = %292.1;
    %294 = cast(%293, dtype="float64") /* ty=Tensor[(1408), float64] */;
    %295 = exp(%294) /* ty=Tensor[(1408), float64] */;
    %296 = @func_5063() /* ty=Tensor[(12, 6, 8), int8] */;
    (%295, %296)
  };
  %297() /* ty=(Tensor[(1408), float64], Tensor[(12, 6, 8), int8]) */
}

def @func_7772(%var_7742: Tensor[(11, 7, 7), uint64]) -> (Tensor[(12, 6, 8), float32], Tensor[(11, 7, 7), int32]) {
  %298 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 7, 7), uint64] */, dtype="uint64") /* ty=Tensor[(11, 7, 7), uint64] */;
  %299 = shape_of(%var_7742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_7742, dtype="uint64") /* ty=Tensor[(11, 7, 7), uint64] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %302 = bitwise_or(%300, %301) /* ty=Tensor[(11, 7, 7), uint64] */;
  %303 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 7, 7), uint64] */, dtype="int32") /* ty=Tensor[(11, 7, 7), int32] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="int32") /* ty=Tensor[(11, 7, 7), int32] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %307 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
  %308 = bitwise_xor(%305, %306) /* ty=Tensor[(11, 7, 7), int32] */;
  (%307, %308)
}

def @func_3556() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %312 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
    %309 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %310 = %309.0;
    %311 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
    (%310, %311)
  };
  %312() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */
}

def @func_1032() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %313 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %314 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  (%313, %314)
}

def @func_3083() -> (Tensor[(12, 6, 8), int64],) {
  %315 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %316 = %315.0;
  (%316,)
}

def @func_6445(%var_6434: Tensor[(1, 8, 7), int8], %var_6435: Tensor[(3, 8, 7), int8]) -> (Tensor[(3, 8, 7), int8],) {
  %317 = cast(%var_6434, dtype="int8") /* ty=Tensor[(1, 8, 7), int8] */;
  %318 = cast(%var_6435, dtype="int8") /* ty=Tensor[(3, 8, 7), int8] */;
  %319 = bitwise_or(%317, %318) /* ty=Tensor[(3, 8, 7), int8] */;
  (%319,)
}

def @func_2487() -> Tensor[(12, 6, 8), float64] {
  %320 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  rsqrt(%322) /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_5064() -> Tensor[(12, 6, 8), int8] {
  %323 = fn () -> Tensor[(12, 6, 8), int8] {
    @func_1545() /* ty=Tensor[(12, 6, 8), int8] */
  };
  %323() /* ty=Tensor[(12, 6, 8), int8] */
}

def @func_6420(%var_6346: Tensor[(15, 8, 9), float64], %var_6347: Tensor[(15, 8, 9), float64]) -> (Tensor[(15, 8, 9), bool], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32]) {
  %324 = cast(%var_6347, dtype="uint8") /* ty=Tensor[(15, 8, 9), uint8] */;
  %325 = shape_of(%var_6346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%var_6346, dtype="uint8") /* ty=Tensor[(15, 8, 9), uint8] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %328 = left_shift(%326, %327) /* ty=Tensor[(15, 8, 9), uint8] */;
  %329 = cast(%var_6347, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(15, 8, 9), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = cast(%var_6347, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %334 = shape_of(%var_6346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%var_6346, dtype="float64") /* ty=Tensor[(15, 8, 9), float64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %337 = maximum(%335, %336) /* ty=Tensor[(15, 8, 9), float64] */;
  %338 = cast(%337, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %339 = cast(%337, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %340 = cast(%337, dtype="uint64") /* ty=Tensor[(15, 8, 9), uint64] */;
  %341 = shape_of(%var_6347, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%var_6347, dtype="uint64") /* ty=Tensor[(15, 8, 9), uint64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %344 = bitwise_and(%342, %343) /* ty=Tensor[(15, 8, 9), uint64] */;
  %345 = cast(%344, dtype="float32") /* ty=Tensor[(15, 8, 9), float32] */;
  %346 = greater_equal(%331, %332) /* ty=Tensor[(15, 8, 9), bool] */;
  %347 = acosh(%338) /* ty=Tensor[(15, 8, 9), float32] */;
  %348 = atanh(%339) /* ty=Tensor[(15, 8, 9), float32] */;
  %349 = sin(%345) /* ty=Tensor[(15, 8, 9), float32] */;
  (%346, %347, %348, %349)
}

def @func_6601() -> (Tensor[(2145), float32], Tensor[(2145), int8], Tensor[(12, 6, 8), float32]) {
  %350 = @func_4484() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) */;
  %351 = @func_5896() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(2145), float32]) */;
  %352 = %350.1;
  %353 = @func_2132() /* ty=Tensor[(2145), int8] */;
  %354 = %351.0;
  (%352, %353, %354)
}

def @func_5540() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  %361 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
    %355 = @func_1638() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %356 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
    %357 = @func_4829() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %358 = %355.0;
    %359 = %356.1;
    %360 = %357.0;
    (%358, %359, %360)
  };
  %361() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */
}

def @func_1109() -> (Tensor[(12, 6, 8), float64],) {
  %362 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %363 = cast(%362, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %364 = reshape(%363, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int64] */;
  %365 = @func_950(%364) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %368 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%362, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = equal(%369, %370) /* ty=Tensor[(12, 6, 8), bool] */;
  %372 = cast(%371, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %373 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%366, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %376 = divide(%374, %375) /* ty=Tensor[(12, 6, 8), float64] */;
  (%376,)
}

def @func_733(%var_731: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) {
  @func_730(%var_731) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */
}

def @func_3926() -> (Tensor[(12, 6, 8), int64],) {
  %379 = fn () -> (Tensor[(12, 6, 8), int64],) {
    %377 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %378 = %377.0;
    (%378,)
  };
  %379() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_5128() -> Tensor[(12, 6, 8), float32] {
  %380 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %380.0
}

def @func_5730() -> (Tensor[(12, 6, 8), float64],) {
  %381 = @func_4931() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float32]) */;
  %382 = %381.0;
  (%382,)
}

def @func_3671(%var_3661: Tensor[(312), uint64], %var_3662: Tensor[(560), float64]) -> (Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64], Tensor[(13, 9, 14), float64], Tensor[(12, 6, 8), float64]) {
  %383 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
  %384 = cast(meta[relay.Constant][15] /* ty=Tensor[(576), int64] */, dtype="int64") /* ty=Tensor[(576), int64] */;
  %385 = reshape(%384, newshape=[12, 6, 8]) /* ty=Tensor[(12, 6, 8), int64] */;
  %386 = @func_950(%385) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) */;
  %387 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %388 = @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */;
  %389 = %388.0;
  %390 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 9, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="bool") /* ty=Tensor[(13, 9, 14), bool] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %394 = cast(%var_3661, dtype="uint64") /* ty=Tensor[(312), uint64] */;
  %395 = cast(%var_3662, dtype="float64") /* ty=Tensor[(560), float64] */;
  %396 = reshape(%394, newshape=[4, 6, 13]) /* ty=Tensor[(4, 6, 13), uint64] */;
  %397 = reshape(%395, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
  %398 = @func_247(%396, %397) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */;
  %399 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 9, 14), float32] */, dtype="float64") /* ty=Tensor[(13, 9, 14), float64] */;
  %400 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %401 = %383.1;
  %402 = %386.0;
  %403 = %387.1;
  %404 = greater(%392, %393) /* ty=Tensor[(13, 9, 14), bool] */;
  %405 = %398.2;
  %406 = atanh(%399) /* ty=Tensor[(13, 9, 14), float64] */;
  %407 = %400.1;
  (%401, %402, meta[relay.Constant][15] /* ty=Tensor[(576), int64] */, %403, %404, %405, %var_3661, %var_3662, %406, %407)
}

def @func_595() -> Tensor[(12, 6, 8), int64] {
  @func_593() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_6294() -> (Tensor[(12, 6, 8), float32],) {
  %408 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
  %409 = %408.0;
  (%409,)
}

def @func_7384(%var_7359: Tensor[(540), float32]) -> (Tensor[(12, 6, 8), float64], Tensor[(6, 6, 15), float32], Tensor[(540), float32], int8, Tensor[(208), bool], int8) {
  %410 = cast(%var_7359, dtype="float32") /* ty=Tensor[(540), float32] */;
  %411 = reshape(%410, newshape=[9, 60]) /* ty=Tensor[(9, 60), float32] */;
  %412 = @func_7157(%411) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), float32], Tensor[(9, 1, 1), float32], Tensor[(6, 6, 15), float32], Tensor[(9, 60), float32], Tensor[(12, 6, 8), float32]) */;
  %413 = cast(meta[relay.Constant][17] /* ty=Tensor[(208), bool] */, dtype="bool") /* ty=Tensor[(208), bool] */;
  %414 = cast(meta[relay.Constant][18] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %415 = reshape(%413, newshape=[13, 4, 4]) /* ty=Tensor[(13, 4, 4), bool] */;
  %416 = reshape(%414, newshape=[]) /* ty=int8 */;
  %417 = @func_3516(%415, %416) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 6, 3), int8], int8, Tensor[(1, 72), int8], Tensor[(12, 6, 8), int64], Tensor[(2, 280), float64], Tensor[(12, 6, 8), float32], Tensor[(13, 4, 4), float64]) */;
  %418 = @func_6943() /* ty=Tensor[(12, 6, 8), float64] */;
  %419 = %412.4;
  %420 = %417.2;
  (%418, %419, %var_7359, %420, meta[relay.Constant][17] /* ty=Tensor[(208), bool] */, meta[relay.Constant][18] /* ty=int8 */)
}

def @func_1608(%var_1604: Tensor[(2, 16, 12), float64]) -> Tensor[(2, 16, 12), float64] {
  %421 = cast(%var_1604, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  log2(%421) /* ty=Tensor[(2, 16, 12), float64] */
}

def @func_4485() -> (Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) {
  %427 = fn () -> (Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) {
    %422 = @func_2775() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(13, 9, 14), bool], Tensor[(11, 15, 13), float32], Tensor[(12, 6, 8), int64]) */;
    %423 = %422.1;
    %424 = cast(%423, dtype="float32") /* ty=Tensor[(13, 9, 14), float32] */;
    %425 = acos(%424) /* ty=Tensor[(13, 9, 14), float32] */;
    %426 = @func_3575() /* ty=Tensor[(2145), float32] */;
    (%425, %426)
  };
  %427() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) */
}

def @func_7843() -> (Tensor[(12, 6, 8), float32],) {
  %428 = @func_5128() /* ty=Tensor[(12, 6, 8), float32] */;
  (%428,)
}

def @func_593() -> Tensor[(12, 6, 8), int64] {
  %429 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %430 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  multiply(%431, %432) /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_2133() -> Tensor[(2145), int8] {
  %434 = fn () -> Tensor[(2145), int8] {
    %433 = @func_1198() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */;
    %433.2
  };
  %434() /* ty=Tensor[(2145), int8] */
}

def @func_247(%var_189: Tensor[(4, 6, 13), uint64], %var_218: Tensor[(4, 10, 14), float64]) -> (Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) {
  %435 = cast(meta[relay.Constant][21] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %436 = cast(%var_189, dtype="uint64") /* ty=Tensor[(4, 6, 13), uint64] */;
  %437 = cast(meta[relay.Constant][22] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %438 = cast(meta[relay.Constant][22] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %439 = reshape(%437, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %440 = reshape(%438, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %441 = @func_75(%439, %440) /* ty=Tensor[(4, 10, 14), bool] */;
  %442 = cast(%441, dtype="int8") /* ty=Tensor[(4, 10, 14), int8] */;
  %443 = cast(meta[relay.Constant][22] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %444 = reshape(%442, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %445 = reshape(%443, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %446 = cast(%441, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %447 = acos(%446) /* ty=Tensor[(4, 10, 14), float64] */;
  %448 = cast(%var_218, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %449 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%447, dtype="float64") /* ty=Tensor[(4, 10, 14), float64] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %452 = subtract(%450, %451) /* ty=Tensor[(4, 10, 14), float64] */;
  %453 = cast(%452, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %454 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%447, dtype="bool") /* ty=Tensor[(4, 10, 14), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = cast(meta[relay.Constant][22] /* ty=Tensor[(280, 2), int8] */, dtype="int8") /* ty=Tensor[(280, 2), int8] */;
  %458 = @func_75(%444, %445) /* ty=Tensor[(4, 10, 14), bool] */;
  %459 = cast(%458, dtype="int8") /* ty=Tensor[(4, 10, 14), int8] */;
  %460 = reshape(%457, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %461 = reshape(%459, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
  %462 = maximum(%435, %436) /* ty=Tensor[(4, 6, 13), uint64] */;
  %463 = less_equal(%455, %456) /* ty=Tensor[(4, 10, 14), bool] */;
  %464 = @func_75(%460, %461) /* ty=Tensor[(4, 10, 14), bool] */;
  (%462, meta[relay.Constant][22] /* ty=Tensor[(280, 2), int8] */, %458, %463, %464)
}

def @func_330(%var_274: Tensor[(11, 8, 16), bool], %var_275: Tensor[(11, 8, 16), bool]) -> (Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) {
  %465 = cast(%var_275, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %466 = shape_of(%var_274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%var_274, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = cast(%var_274, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %470 = shape_of(%var_275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %471 = cast(%var_275, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %472 = dyn.reshape(%469, %470, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %473 = greater_equal(%471, %472) /* ty=Tensor[(11, 8, 16), bool] */;
  %474 = cast(%473, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %475 = shape_of(%var_274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%var_274, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %478 = power(%476, %477) /* ty=Tensor[(11, 8, 16), float32] */;
  %479 = cast(%var_274, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="float32") /* ty=Tensor[(11, 8, 16), float32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %483 = cast(%473, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %484 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%478, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %487 = cast(meta[relay.Constant][23] /* ty=Tensor[(715, 3), int8] */, dtype="int8") /* ty=Tensor[(715, 3), int8] */;
  %488 = cast(meta[relay.Constant][23] /* ty=Tensor[(715, 3), int8] */, dtype="int8") /* ty=Tensor[(715, 3), int8] */;
  %489 = reshape(%487, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %490 = reshape(%488, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %491 = logical_or(%467, %468) /* ty=Tensor[(11, 8, 16), bool] */;
  %492 = multiply(%481, %482) /* ty=Tensor[(11, 8, 16), float32] */;
  %493 = equal(%485, %486) /* ty=Tensor[(11, 8, 16), bool] */;
  %494 = @func_98(%489, %490) /* ty=Tensor[(11, 15, 13), int8] */;
  (%491, %492, %493, %494, meta[relay.Constant][23] /* ty=Tensor[(715, 3), int8] */)
}

def @func_6777(%var_6768: Tensor[(6, 6, 15), float32], %var_6769: Tensor[(6, 6, 15), float32]) -> (Tensor[(6, 6, 15), float32],) {
  %495 = cast(%var_6769, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %496 = shape_of(%var_6768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%var_6768, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %499 = power(%497, %498) /* ty=Tensor[(6, 6, 15), float32] */;
  (%499,)
}

def @func_3163() -> (Tensor[(2145), float32],) {
  %500 = @func_2467() /* ty=Tensor[(2145), float32] */;
  (%500,)
}

def @func_7157(%var_7130: Tensor[(9, 60), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), float32], Tensor[(9, 1, 1), float32], Tensor[(6, 6, 15), float32], Tensor[(9, 60), float32], Tensor[(12, 6, 8), float32]) {
  %501 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %502 = @func_3764() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %503 = @func_2989() /* ty=(Tensor[(9, 1, 1), float32], Tensor[(1408), bool], Tensor[(12, 6, 8), float64]) */;
  %504 = cast(%var_7130, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %505 = cast(%var_7130, dtype="float32") /* ty=Tensor[(9, 60), float32] */;
  %506 = reshape(%504, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %507 = reshape(%505, newshape=[6, 6, 15]) /* ty=Tensor[(6, 6, 15), float32] */;
  %508 = @func_6777(%506, %507) /* ty=(Tensor[(6, 6, 15), float32],) */;
  %509 = %501.0;
  %510 = %502.1;
  %511 = @func_4974() /* ty=Tensor[(13, 9, 14), float32] */;
  %512 = %503.0;
  %513 = %508.0;
  %514 = @func_5560() /* ty=Tensor[(12, 6, 8), float32] */;
  (%509, %510, %511, %512, %513, %var_7130, %514)
}

def @func_3516(%var_3452: Tensor[(13, 4, 4), bool], %var_3462: int8) -> (Tensor[(12, 6, 8), int64], Tensor[(4, 6, 3), int8], int8, Tensor[(1, 72), int8], Tensor[(12, 6, 8), int64], Tensor[(2, 280), float64], Tensor[(12, 6, 8), float32], Tensor[(13, 4, 4), float64]) {
  %515 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %516 = cast(%var_3462, dtype="int8") /* ty=int8 */;
  %517 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 72), int8] */, dtype="int8") /* ty=Tensor[(1, 72), int8] */;
  %518 = reshape(%516, newshape=[]) /* ty=int8 */;
  %519 = reshape(%517, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), int8] */;
  %520 = @func_2516(%518, %519) /* ty=(Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) */;
  %521 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %522 = @func_2739() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) */;
  %523 = cast(%var_3452, dtype="bool") /* ty=Tensor[(13, 4, 4), bool] */;
  %524 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(13, 4, 4), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(meta[relay.Constant][25] /* ty=Tensor[(13, 4, 4), bool] */, dtype="bool") /* ty=Tensor[(13, 4, 4), bool] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %527 = logical_or(%525, %526) /* ty=Tensor[(13, 4, 4), bool] */;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(13, 4, 4), float64] */;
  %529 = %515.0;
  %530 = %520.0;
  %531 = %521.0;
  %532 = %522.2;
  %533 = @func_3419() /* ty=Tensor[(12, 6, 8), float32] */;
  %534 = asin(%528) /* ty=Tensor[(13, 4, 4), float64] */;
  (%529, %530, %var_3462, meta[relay.Constant][24] /* ty=Tensor[(1, 72), int8] */, %531, %532, %533, %534)
}

def @func_2946() -> (Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) {
  %535 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %536 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
  %537 = %535.1;
  (%536, %537)
}

def @func_6208() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) {
  @func_6206() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) */
}

def @func_7775(%var_7773: Tensor[(11, 7, 7), uint64]) -> (Tensor[(12, 6, 8), float32], Tensor[(11, 7, 7), int32]) {
  @func_7772(%var_7773) /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 7, 7), int32]) */
}

def @func_7597(%var_7595: Tensor[(1408), float64]) -> (Tensor[(2145), float32], Tensor[(1408), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int8]) {
  @func_7594(%var_7595) /* ty=(Tensor[(2145), float32], Tensor[(1408), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int8]) */
}

def @func_950(%var_943: Tensor[(12, 6, 8), int64]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), uint64]) {
  %538 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %539 = cast(%var_943, dtype="uint64") /* ty=Tensor[(12, 6, 8), uint64] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="uint64") /* ty=Tensor[(12, 6, 8), uint64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %543 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %544 = add(%541, %542) /* ty=Tensor[(12, 6, 8), uint64] */;
  (%543, %544)
}

def @func_2520(%var_2518: int8, %var_2519: Tensor[(4, 6, 3), int8]) -> (Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) {
  @func_2516(%var_2518, %var_2519) /* ty=(Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) */
}

def @func_2516(%var_2495: int8, %var_2496: Tensor[(4, 6, 3), int8]) -> (Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) {
  %545 = cast(%var_2495, dtype="int8") /* ty=int8 */;
  %546 = cast(%var_2496, dtype="int8") /* ty=Tensor[(4, 6, 3), int8] */;
  %547 = minimum(%545, %546) /* ty=Tensor[(4, 6, 3), int8] */;
  %548 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  (%547, %548)
}

def @func_5732() -> (Tensor[(12, 6, 8), float64],) {
  @func_5730() /* ty=(Tensor[(12, 6, 8), float64],) */
}

def @func_3842(%var_3840: Tensor[(2145), int8]) -> (Tensor[(2145), float32], Tensor[(2145), bool]) {
  @func_3839(%var_3840) /* ty=(Tensor[(2145), float32], Tensor[(2145), bool]) */
}

def @func_5562() -> Tensor[(12, 6, 8), float32] {
  @func_5560() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_2990() -> (Tensor[(9, 1, 1), float32], Tensor[(1408), bool], Tensor[(12, 6, 8), float64]) {
  %555 = fn () -> (Tensor[(9, 1, 1), float32], Tensor[(1408), bool], Tensor[(12, 6, 8), float64]) {
    %549 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 1), float32] */;
    %550 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
    %551 = @func_2739() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) */;
    %552 = atan(%549) /* ty=Tensor[(9, 1, 1), float32] */;
    %553 = %550.1;
    %554 = %551.0;
    (%552, %553, %554)
  };
  %555() /* ty=(Tensor[(9, 1, 1), float32], Tensor[(1408), bool], Tensor[(12, 6, 8), float64]) */
}

def @func_6638() -> (Tensor[(12, 6, 8), int64],) {
  %558 = fn () -> (Tensor[(12, 6, 8), int64],) {
    %556 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
    %557 = %556.1;
    (%557,)
  };
  %558() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_7738() -> Tensor[(1408), float64] {
  @func_7736() /* ty=Tensor[(1408), float64] */
}

def @func_102(%var_100: Tensor[(11, 15, 13), int8], %var_101: Tensor[(11, 15, 13), int8]) -> Tensor[(11, 15, 13), int8] {
  @func_98(%var_100, %var_101) /* ty=Tensor[(11, 15, 13), int8] */
}

def @func_5316(%var_5313: Tensor[(2145), float32], %var_5314: Tensor[(756), float32], %var_5315: Tensor[(896), bool]) -> (Tensor[(2145), int64], Tensor[(12, 6, 8), int64], Tensor[(2145), float32], Tensor[(7, 12, 9), int16], Tensor[(756), float32], Tensor[(12, 6, 8), int64], Tensor[(896), bool]) {
  @func_5311(%var_5313, %var_5314, %var_5315) /* ty=(Tensor[(2145), int64], Tensor[(12, 6, 8), int64], Tensor[(2145), float32], Tensor[(7, 12, 9), int16], Tensor[(756), float32], Tensor[(12, 6, 8), int64], Tensor[(896), bool]) */
}

def @func_647(%var_630: Tensor[(2145), int8]) -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) {
  %559 = cast(%var_630, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %560 = cast(%var_630, dtype="int8") /* ty=Tensor[(2145), int8] */;
  %561 = reshape(%559, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %562 = reshape(%560, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
  %563 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %564 = @func_98(%561, %562) /* ty=Tensor[(11, 15, 13), int8] */;
  (%563, %564, %var_630)
}

def @func_4933() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float32]) {
  @func_4931() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float32]) */
}

def @func_4212(%var_4199: Tensor[(72), int8]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], int8, Tensor[(72), int8]) {
  %565 = @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */;
  %566 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %567 = cast(%var_4199, dtype="int8") /* ty=Tensor[(72), int8] */;
  %568 = reshape(%566, newshape=[]) /* ty=int8 */;
  %569 = reshape(%567, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), int8] */;
  %570 = @func_2516(%568, %569) /* ty=(Tensor[(4, 6, 3), int8], Tensor[(12, 6, 8), int64]) */;
  %571 = %565.0;
  %572 = %570.1;
  (%571, %572, meta[relay.Constant][27] /* ty=int8 */, %var_4199)
}

def @func_4546(%var_4545: Tensor[(12, 14, 13), float64]) -> (Tensor[(12, 14, 13), float64], Tensor[(12, 6, 8), int64], Tensor[(70, 1), float64]) {
  %579 = fn (%var_4536: Tensor[(12, 14, 13), float64]) -> (Tensor[(12, 14, 13), float64], Tensor[(12, 6, 8), int64], Tensor[(70, 1), float64]) {
    %573 = cast(%var_4536, dtype="float64") /* ty=Tensor[(12, 14, 13), float64] */;
    %574 = cast(meta[relay.Constant][28] /* ty=Tensor[(70, 1), float64] */, dtype="float64") /* ty=Tensor[(70, 1), float64] */;
    %575 = reshape(%574, newshape=[7, 10, 1]) /* ty=Tensor[(7, 10, 1), float64] */;
    %576 = @func_2084(%575) /* ty=(Tensor[(7, 10, ?), uint64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(7, 10, ?), bool]) */;
    %577 = asin(%573) /* ty=Tensor[(12, 14, 13), float64] */;
    %578 = %576.1;
    (%577, %578, meta[relay.Constant][28] /* ty=Tensor[(70, 1), float64] */)
  };
  %579(%var_4545) /* ty=(Tensor[(12, 14, 13), float64], Tensor[(12, 6, 8), int64], Tensor[(70, 1), float64]) */
}

def @func_3421() -> Tensor[(12, 6, 8), float32] {
  @func_3419() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_5976() -> (Tensor[(12, 6, 8), int64],) {
  %582 = fn () -> (Tensor[(12, 6, 8), int64],) {
    %580 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %581 = %580.0;
    (%581,)
  };
  %582() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_6990() -> (Tensor[(12, 6, 8), int8],) {
  %583 = @func_5063() /* ty=Tensor[(12, 6, 8), int8] */;
  (%583,)
}

def @func_3839(%var_3832: Tensor[(2145), int8]) -> (Tensor[(2145), float32], Tensor[(2145), bool]) {
  %584 = @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */;
  %585 = %584.3;
  %586 = cast(%var_3832, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(1), int32] */;
  %588 = cast(%585, dtype="bool") /* ty=Tensor[(2145), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?), bool] */;
  %590 = @func_3575() /* ty=Tensor[(2145), float32] */;
  %591 = greater(%588, %589) /* ty=Tensor[(2145), bool] */;
  (%590, %591)
}

def @func_7931(%var_7929: Tensor[(40, 14), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(560), float64], Tensor[(312), uint64], Tensor[(40, 14), float64]) {
  @func_7928(%var_7929) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(560), float64], Tensor[(312), uint64], Tensor[(40, 14), float64]) */
}

def @func_6758() -> (Tensor[(12, 6, 8), int64],) {
  %592 = @func_5367() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %593 = %592.1;
  (%593,)
}

def @func_730(%var_723: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) {
  %594 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
  %595 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %596 = shape_of(%594, dtype="int32") /* ty=Tensor[(3), int32] */;
  %597 = cast(%594, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %598 = dyn.reshape(%595, %596, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %599 = cast(%var_723, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %600 = cast(%var_723, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %601 = reshape(%599, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
  %602 = reshape(%600, newshape=[11, 8, 16]) /* ty=Tensor[(11, 8, 16), bool] */;
  %603 = @func_330(%601, %602) /* ty=(Tensor[(11, 8, 16), bool], Tensor[(11, 8, 16), float32], Tensor[(11, 8, 16), bool], Tensor[(11, 15, 13), int8], Tensor[(715, 3), int8]) */;
  %604 = %603.2;
  %605 = cast(%604, dtype="bool") /* ty=Tensor[(11, 8, 16), bool] */;
  %606 = shape_of(%var_723, dtype="int32") /* ty=Tensor[(1), int32] */;
  %607 = cast(%var_723, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?), bool] */;
  %609 = right_shift(%597, %598) /* ty=Tensor[(12, 6, 8), int64] */;
  %610 = logical_and(%607, %608) /* ty=Tensor[(1408), bool] */;
  (%609, %610)
}

def @func_6841(%var_6815: Tensor[(312), uint64]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(312), float32], Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) {
  %611 = @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %612 = @func_6282() /* ty=(Tensor[(312), uint64],) */;
  %613 = %612.0;
  %614 = cast(%var_6815, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(1), int32] */;
  %616 = cast(%613, dtype="uint16") /* ty=Tensor[(312), uint16] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %618 = maximum(%616, %617) /* ty=Tensor[(312), uint16] */;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(312), float32] */;
  %620 = @func_6073() /* ty=(Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) */;
  %621 = @func_1032() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %622 = %611.0;
  %623 = @func_1945() /* ty=Tensor[(12, 6, 8), int64] */;
  %624 = atanh(%619) /* ty=Tensor[(312), float32] */;
  %625 = %620.0;
  %626 = %621.0;
  (%622, %623, %624, %625, %626)
}

def @func_2627() -> Tensor[(10, 16, 5), float32] {
  %627 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 16, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 5), float32] */;
  atan(%627) /* ty=Tensor[(10, 16, 5), float32] */
}

def @func_7736() -> Tensor[(1408), float64] {
  %628 = @func_3906() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) */;
  %628.3
}

def @func_6572(%var_6569: Tensor[(384), float64], %var_6570: Tensor[(560), int8], %var_6571: Tensor[(2145), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(384), float64], Tensor[(2, 16, 12), float64], Tensor[(11, 15, 13), uint64], Tensor[(560), int8], Tensor[(2145), float32]) {
  @func_6567(%var_6569, %var_6570, %var_6571) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(384), float64], Tensor[(2, 16, 12), float64], Tensor[(11, 15, 13), uint64], Tensor[(560), int8], Tensor[(2145), float32]) */
}

def @func_4145() -> Tensor[(12, 6, 8), int64] {
  @func_4143() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_5311(%var_5268: Tensor[(2145), float32], %var_5296: Tensor[(756), float32], %var_5308: Tensor[(896), bool]) -> (Tensor[(2145), int64], Tensor[(12, 6, 8), int64], Tensor[(2145), float32], Tensor[(7, 12, 9), int16], Tensor[(756), float32], Tensor[(12, 6, 8), int64], Tensor[(896), bool]) {
  %629 = @func_3163() /* ty=(Tensor[(2145), float32],) */;
  %630 = %629.0;
  %631 = cast(%var_5268, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(1), int32] */;
  %633 = cast(%630, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?), float64] */;
  %635 = power(%633, %634) /* ty=Tensor[(2145), float64] */;
  %636 = cast(%var_5268, dtype="int64") /* ty=Tensor[(2145), int64] */;
  %637 = shape_of(%635, dtype="int32") /* ty=Tensor[(1), int32] */;
  %638 = cast(%635, dtype="int64") /* ty=Tensor[(2145), int64] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?), int64] */;
  %640 = cast(%630, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %641 = cast(%var_5296, dtype="float32") /* ty=Tensor[(756), float32] */;
  %642 = reshape(%641, newshape=[7, 12, 9]) /* ty=Tensor[(7, 12, 9), float32] */;
  %643 = @func_1902(%642) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(7, 12, 9), int16], Tensor[(560), float64], Tensor[(560), float64], Tensor[(12, 6, 8), int64]) */;
  %644 = cast(%var_5308, dtype="bool") /* ty=Tensor[(896), bool] */;
  %645 = cast(%var_5308, dtype="bool") /* ty=Tensor[(896), bool] */;
  %646 = reshape(%644, newshape=[8, 14, 8]) /* ty=Tensor[(8, 14, 8), bool] */;
  %647 = reshape(%645, newshape=[8, 14, 8]) /* ty=Tensor[(8, 14, 8), bool] */;
  %648 = @func_5048(%646, %647) /* ty=(Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), bool], Tensor[(8, 14, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %649 = bitwise_or(%638, %639) /* ty=Tensor[(2145), int64] */;
  %650 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %651 = cos(%640) /* ty=Tensor[(2145), float32] */;
  %652 = %643.1;
  %653 = %648.3;
  (%649, %650, %651, %652, %var_5296, %653, %var_5308)
}

def @func_3907() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) {
  %666 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) {
    %654 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
    %655 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %656 = cast(meta[relay.Constant][31] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
    %657 = reshape(%656, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
    %658 = @func_730(%657) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */;
    %659 = cast(meta[relay.Constant][31] /* ty=Tensor[(1408), bool] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
    %660 = %654.1;
    %661 = %655.0;
    %662 = %658.1;
    %663 = atanh(%659) /* ty=Tensor[(1408), float64] */;
    %664 = @func_1545() /* ty=Tensor[(12, 6, 8), int8] */;
    %665 = @func_1009() /* ty=Tensor[(12, 6, 8), float32] */;
    (%660, %661, %662, %663, %664, %665)
  };
  %666() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) */
}

def @func_5488(%var_5486: Tensor[(12, 32), float64]) -> (Tensor[(2145), float32], Tensor[(2, 16, 12), float64], Tensor[(12, 32), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) {
  @func_5485(%var_5486) /* ty=(Tensor[(2145), float32], Tensor[(2, 16, 12), float64], Tensor[(12, 32), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */
}

def @func_6717(%var_6715: Tensor[(8, 16, 15), uint64], %var_6716: Tensor[(8, 16, 15), uint64]) -> (Tensor[(8, 16, 15), uint64],) {
  @func_6713(%var_6715, %var_6716) /* ty=(Tensor[(8, 16, 15), uint64],) */
}

def @func_1545() -> Tensor[(12, 6, 8), int8] {
  %667 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %668 = %667.0;
  %669 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 6, 8), int64] */, dtype="int8") /* ty=Tensor[(12, 6, 8), int8] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="int8") /* ty=Tensor[(12, 6, 8), int8] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  left_shift(%671, %672) /* ty=Tensor[(12, 6, 8), int8] */
}

def @func_6844(%var_6842: Tensor[(312), uint64]) -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(312), float32], Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) {
  @func_6841(%var_6842) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(312), float32], Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) */
}

def @func_1111() -> (Tensor[(12, 6, 8), float64],) {
  @func_1109() /* ty=(Tensor[(12, 6, 8), float64],) */
}

def @func_3322() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) {
  @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */
}

def @func_6025() -> (Tensor[(12, 6, 8), int64], Tensor[(10, 16, 5), float32]) {
  @func_6023() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(10, 16, 5), float32]) */
}

def @func_5699() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %676 = fn () -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
    %673 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
    %674 = %673.0;
    %675 = @func_793() /* ty=Tensor[(12, 6, 8), int64] */;
    (%674, %675)
  };
  %676() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */
}

def @func_1946() -> Tensor[(12, 6, 8), int64] {
  %678 = fn () -> Tensor[(12, 6, 8), int64] {
    %677 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %677.0
  };
  %678() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_7594(%var_7551: Tensor[(1408), float64]) -> (Tensor[(2145), float32], Tensor[(1408), int32], Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int8]) {
  %679 = @func_3906() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(1408), float64], Tensor[(12, 6, 8), int8], Tensor[(12, 6, 8), float32]) */;
  %680 = %679.3;
  %681 = cast(%var_7551, dtype="int32") /* ty=Tensor[(1408), int32] */;
  %682 = shape_of(%680, dtype="int32") /* ty=Tensor[(1), int32] */;
  %683 = cast(%680, dtype="int32") /* ty=Tensor[(1408), int32] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?), int32] */;
  %685 = @func_2467() /* ty=Tensor[(2145), float32] */;
  %686 = left_shift(%683, %684) /* ty=Tensor[(1408), int32] */;
  %687 = @func_5560() /* ty=Tensor[(12, 6, 8), float32] */;
  %688 = @func_5063() /* ty=Tensor[(12, 6, 8), int8] */;
  (%685, %686, %687, %688)
}

def @func_650(%var_648: Tensor[(2145), int8]) -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) {
  @func_647(%var_648) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8]) */
}

def @func_4831() -> (Tensor[(12, 6, 8), int64],) {
  @func_4829() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_1696() -> (Tensor[(12, 6, 8), int64],) {
  @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_6943() -> Tensor[(12, 6, 8), float64] {
  %689 = @func_5698() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */;
  %690 = %689.0;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  log(%691) /* ty=Tensor[(12, 6, 8), float64] */
}

def @func_7387(%var_7385: Tensor[(540), float32]) -> (Tensor[(12, 6, 8), float64], Tensor[(6, 6, 15), float32], Tensor[(540), float32], int8, Tensor[(208), bool], int8) {
  @func_7384(%var_7385) /* ty=(Tensor[(12, 6, 8), float64], Tensor[(6, 6, 15), float32], Tensor[(540), float32], int8, Tensor[(208), bool], int8) */
}

def @func_5879(%var_5877: Tensor[(715, 3), float32], %var_5878: Tensor[(352, 4), bool]) -> (Tensor[(12, 6, 8), float64], Tensor[(560), int8], Tensor[(560), int8], Tensor[(715, 3), float32], Tensor[(12, 6, 8), int64], Tensor[(312), uint64], Tensor[(352, 4), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) {
  %721 = fn (%var_5799: Tensor[(715, 3), float32], %var_5812: Tensor[(352, 4), bool]) -> (Tensor[(12, 6, 8), float64], Tensor[(560), int8], Tensor[(560), int8], Tensor[(715, 3), float32], Tensor[(12, 6, 8), int64], Tensor[(312), uint64], Tensor[(352, 4), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) {
    %692 = @func_5730() /* ty=(Tensor[(12, 6, 8), float64],) */;
    %693 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), int8] */, dtype="int8") /* ty=Tensor[(560), int8] */;
    %694 = cast(meta[relay.Constant][34] /* ty=Tensor[(715, 3), float32] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %695 = reshape(%693, newshape=[560]) /* ty=Tensor[(560), int8] */;
    %696 = reshape(%694, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), float32] */;
    %697 = @func_4171(%695, %696) /* ty=(Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) */;
    %698 = cast(%var_5799, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %699 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(715, 3), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %700 = cast(meta[relay.Constant][34] /* ty=Tensor[(715, 3), float32] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %702 = cast(meta[relay.Constant][35] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
    %703 = cast(%var_5812, dtype="bool") /* ty=Tensor[(352, 4), bool] */;
    %704 = reshape(%702, newshape=[312]) /* ty=Tensor[(312), uint64] */;
    %705 = reshape(%703, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
    %706 = @func_852(%704, %705) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
    %707 = @func_3925() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %708 = @func_1360() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */;
    %709 = cast(%var_5812, dtype="bool") /* ty=Tensor[(352, 4), bool] */;
    %710 = reshape(%709, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
    %711 = @func_730(%710) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool]) */;
    %712 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %713 = %692.0;
    %714 = %697.1;
    %715 = mod(%700, %701) /* ty=Tensor[(715, 3), float32] */;
    %716 = %706.4;
    %717 = %707.0;
    %718 = %708.0;
    %719 = %711.0;
    %720 = %712.2;
    (%713, %714, meta[relay.Constant][33] /* ty=Tensor[(560), int8] */, %715, %716, meta[relay.Constant][35] /* ty=Tensor[(312), uint64] */, %var_5812, %717, %718, %719, %720)
  };
  %721(%var_5877, %var_5878) /* ty=(Tensor[(12, 6, 8), float64], Tensor[(560), int8], Tensor[(560), int8], Tensor[(715, 3), float32], Tensor[(12, 6, 8), int64], Tensor[(312), uint64], Tensor[(352, 4), bool], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */
}

def @func_5368() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
  %726 = fn () -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) {
    %722 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
    %723 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
    %724 = %722.0;
    %725 = %723.1;
    (%724, %725)
  };
  %726() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64]) */
}

def @func_3085() -> (Tensor[(12, 6, 8), int64],) {
  @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_2469() -> Tensor[(2145), float32] {
  @func_2467() /* ty=Tensor[(2145), float32] */
}

def @func_4955() -> Tensor[(12, 6, 8), int64] {
  @func_4953() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_4143() -> Tensor[(12, 6, 8), int64] {
  @func_901() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_4623() -> (Tensor[(12, 6, 8), float64],) {
  @func_4621() /* ty=(Tensor[(12, 6, 8), float64],) */
}

def @func_4975() -> Tensor[(13, 9, 14), float32] {
  %728 = fn () -> Tensor[(13, 9, 14), float32] {
    %727 = @func_4484() /* ty=(Tensor[(13, 9, 14), float32], Tensor[(2145), float32]) */;
    %727.0
  };
  %728() /* ty=Tensor[(13, 9, 14), float32] */
}

def @func_4953() -> Tensor[(12, 6, 8), int64] {
  %729 = @func_3555() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64]) */;
  %729.0
}

def @func_901() -> Tensor[(12, 6, 8), int64] {
  @func_793() /* ty=Tensor[(12, 6, 8), int64] */
}

def @func_1361() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) {
  %738 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) {
    %730 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %731 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145, 1), int8] */, dtype="int8") /* ty=Tensor[(2145, 1), int8] */;
    %732 = cast(meta[relay.Constant][36] /* ty=Tensor[(2145, 1), int8] */, dtype="int8") /* ty=Tensor[(2145, 1), int8] */;
    %733 = reshape(%731, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
    %734 = reshape(%732, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
    %735 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
    %736 = %730.2;
    %737 = @func_98(%733, %734) /* ty=Tensor[(11, 15, 13), int8] */;
    (%735, %736, %737, meta[relay.Constant][36] /* ty=Tensor[(2145, 1), int8] */)
  };
  %738() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145, 1), int8]) */
}

def @func_2740() -> (Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) {
  %745 = fn () -> (Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) {
    %739 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
    %740 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 280), float64] */, dtype="float64") /* ty=Tensor[(2, 280), float64] */;
    %741 = reshape(%740, newshape=[560]) /* ty=Tensor[(560), float64] */;
    %742 = @func_765(%741) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) */;
    %743 = %739.0;
    %744 = %742.1;
    (%743, %744, meta[relay.Constant][37] /* ty=Tensor[(2, 280), float64] */)
  };
  %745() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(11, 15, 13), int8], Tensor[(2, 280), float64]) */
}

def @func_767(%var_766: Tensor[(560), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) {
  %758 = fn (%var_760: Tensor[(560), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) {
    %746 = cast(meta[relay.Constant][38] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
    %747 = cast(meta[relay.Constant][38] /* ty=Tensor[(2145), int8] */, dtype="int8") /* ty=Tensor[(2145), int8] */;
    %748 = reshape(%746, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
    %749 = reshape(%747, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), int8] */;
    %750 = cast(meta[relay.Constant][39] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
    %751 = cast(%var_760, dtype="float64") /* ty=Tensor[(560), float64] */;
    %752 = reshape(%750, newshape=[4, 6, 13]) /* ty=Tensor[(4, 6, 13), uint64] */;
    %753 = reshape(%751, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), float64] */;
    %754 = @func_247(%752, %753) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */;
    %755 = @func_593() /* ty=Tensor[(12, 6, 8), int64] */;
    %756 = @func_98(%748, %749) /* ty=Tensor[(11, 15, 13), int8] */;
    %757 = %754.2;
    (%755, %756, meta[relay.Constant][38] /* ty=Tensor[(2145), int8] */, %757, meta[relay.Constant][39] /* ty=Tensor[(312), uint64] */, %var_760)
  };
  %758(%var_766) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(2145), int8], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64]) */
}

def @func_3419() -> Tensor[(12, 6, 8), float32] {
  %759 = @func_3320() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  acosh(%761) /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_6074() -> (Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) {
  %765 = fn () -> (Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) {
    %762 = @func_2546() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */;
    %763 = @func_5392() /* ty=Tensor[(2145), float32] */;
    %764 = %762.0;
    (%763, %764)
  };
  %765() /* ty=(Tensor[(2145), float32], Tensor[(12, 6, 8), int64]) */
}

def @func_6424(%var_6422: Tensor[(15, 8, 9), float64], %var_6423: Tensor[(15, 8, 9), float64]) -> (Tensor[(15, 8, 9), bool], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32]) {
  @func_6420(%var_6422, %var_6423) /* ty=(Tensor[(15, 8, 9), bool], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32], Tensor[(15, 8, 9), float32]) */
}

def @func_3399() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) {
  %766 = @func_2599() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) */;
  %767 = @func_3083() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %768 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
  %769 = %766.0;
  %770 = %767.0;
  %771 = %768.0;
  (%769, %770, %771)
}

def @func_6760() -> (Tensor[(12, 6, 8), int64],) {
  @func_6758() /* ty=(Tensor[(12, 6, 8), int64],) */
}

def @func_4078(%var_4032: Tensor[(14, 7, 1), float32], %var_4069: Tensor[(11, 15, 13), int8]) -> (Tensor[(14, 7, 1), float32], Tensor[(12, 6, 8), bool], Tensor[(11, 15, 13), uint32]) {
  %772 = cast(%var_4032, dtype="float32") /* ty=Tensor[(14, 7, 1), float32] */;
  %773 = @func_2790() /* ty=(Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) */;
  %774 = @func_2282() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %775 = %774.1;
  %776 = cast(%var_4069, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="uint32") /* ty=Tensor[(11, 15, 13), uint32] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %780 = rsqrt(%772) /* ty=Tensor[(14, 7, 1), float32] */;
  %781 = %773.0;
  %782 = bitwise_and(%778, %779) /* ty=Tensor[(11, 15, 13), uint32] */;
  (%780, %781, %782)
}

def @func_6333() -> (Tensor[(2145), float32], Tensor[(10, 16, 5), float32]) {
  %783 = @func_2467() /* ty=Tensor[(2145), float32] */;
  %784 = @func_2627() /* ty=Tensor[(10, 16, 5), float32] */;
  (%783, %784)
}

def @func_4082(%var_4080: Tensor[(14, 7, 1), float32], %var_4081: Tensor[(11, 15, 13), int8]) -> (Tensor[(14, 7, 1), float32], Tensor[(12, 6, 8), bool], Tensor[(11, 15, 13), uint32]) {
  @func_4078(%var_4080, %var_4081) /* ty=(Tensor[(14, 7, 1), float32], Tensor[(12, 6, 8), bool], Tensor[(11, 15, 13), uint32]) */
}

def @func_6567(%var_6544: Tensor[(384), float64], %var_6556: Tensor[(560), int8], %var_6557: Tensor[(2145), float32]) -> (Tensor[(12, 6, 8), int64], Tensor[(384), float64], Tensor[(2, 16, 12), float64], Tensor[(11, 15, 13), uint64], Tensor[(560), int8], Tensor[(2145), float32]) {
  %785 = @func_3399() /* ty=(Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32]) */;
  %786 = cast(%var_6544, dtype="float64") /* ty=Tensor[(384), float64] */;
  %787 = reshape(%786, newshape=[2, 16, 12]) /* ty=Tensor[(2, 16, 12), float64] */;
  %788 = @func_1608(%787) /* ty=Tensor[(2, 16, 12), float64] */;
  %789 = cast(%788, dtype="float64") /* ty=Tensor[(2, 16, 12), float64] */;
  %790 = cast(%var_6556, dtype="int8") /* ty=Tensor[(560), int8] */;
  %791 = cast(%var_6557, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %792 = reshape(%790, newshape=[560]) /* ty=Tensor[(560), int8] */;
  %793 = reshape(%791, newshape=[11, 15, 13]) /* ty=Tensor[(11, 15, 13), float32] */;
  %794 = @func_4171(%792, %793) /* ty=(Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) */;
  %795 = %785.1;
  %796 = acosh(%789) /* ty=Tensor[(2, 16, 12), float64] */;
  %797 = %794.2;
  (%795, %var_6544, %796, %797, %var_6556, %var_6557)
}

def @func_4931() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float32]) {
  %798 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %799 = @func_4143() /* ty=Tensor[(12, 6, 8), int64] */;
  %800 = cast(%799, dtype="float32") /* ty=Tensor[(12, 6, 8), float32] */;
  %801 = %798.0;
  %802 = sigmoid(%800) /* ty=Tensor[(12, 6, 8), float32] */;
  (%801, %802)
}

def @func_5897() -> (Tensor[(12, 6, 8), float32], Tensor[(2145), float32]) {
  %806 = fn () -> (Tensor[(12, 6, 8), float32], Tensor[(2145), float32]) {
    %803 = @func_2946() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(12, 6, 8), int64]) */;
    %804 = %803.0;
    %805 = @func_3575() /* ty=Tensor[(2145), float32] */;
    (%804, %805)
  };
  %806() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(2145), float32]) */
}

def @func_3320() -> (Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float32], Tensor[(2145), int8]) {
  %807 = @func_1227() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %808 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
  %809 = @func_2568() /* ty=(Tensor[(2145), int8],) */;
  %810 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
  %811 = %807.0;
  %812 = %808.4;
  %813 = %809.0;
  (%810, %811, %812, %813)
}

def @func_1611(%var_1609: Tensor[(2, 16, 12), float64]) -> Tensor[(2, 16, 12), float64] {
  @func_1608(%var_1609) /* ty=Tensor[(2, 16, 12), float64] */
}

def @func_3520(%var_3518: Tensor[(13, 4, 4), bool], %var_3519: int8) -> (Tensor[(12, 6, 8), int64], Tensor[(4, 6, 3), int8], int8, Tensor[(1, 72), int8], Tensor[(12, 6, 8), int64], Tensor[(2, 280), float64], Tensor[(12, 6, 8), float32], Tensor[(13, 4, 4), float64]) {
  @func_3516(%var_3518, %var_3519) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 6, 3), int8], int8, Tensor[(1, 72), int8], Tensor[(12, 6, 8), int64], Tensor[(2, 280), float64], Tensor[(12, 6, 8), float32], Tensor[(13, 4, 4), float64]) */
}

def @func_4621() -> (Tensor[(12, 6, 8), float64],) {
  %814 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %815 = %814.0;
  (%815,)
}

def @func_7675(%var_7674: Tensor[(9, 11, 2), float32]) -> Tensor[(9, 11, 2), float32] {
  %817 = fn (%var_7638: Tensor[(9, 11, 2), float32]) -> Tensor[(9, 11, 2), float32] {
    %816 = cast(%var_7638, dtype="float32") /* ty=Tensor[(9, 11, 2), float32] */;
    atanh(%816) /* ty=Tensor[(9, 11, 2), float32] */
  };
  %817(%var_7674) /* ty=Tensor[(9, 11, 2), float32] */
}

def @func_2791() -> (Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) {
  %827 = fn () -> (Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) {
    %818 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
    %819 = %818.0;
    %820 = @func_1545() /* ty=Tensor[(12, 6, 8), int8] */;
    %821 = cast(%820, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
    %822 = shape_of(%819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %823 = cast(%819, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
    %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %825 = logical_or(%823, %824) /* ty=Tensor[(12, 6, 8), bool] */;
    %826 = @func_2627() /* ty=Tensor[(10, 16, 5), float32] */;
    (%825, %826)
  };
  %827() /* ty=(Tensor[(12, 6, 8), bool], Tensor[(10, 16, 5), float32]) */
}

def @func_2467() -> Tensor[(2145), float32] {
  %828 = @func_2132() /* ty=Tensor[(2145), int8] */;
  %829 = cast(%828, dtype="float32") /* ty=Tensor[(2145), float32] */;
  exp(%829) /* ty=Tensor[(2145), float32] */
}

def @func_7508(%var_7507: Tensor[(1, 4, 11), float32]) -> (Tensor[(1, 4, 11), float32],) {
  %834 = fn (%var_7501: Tensor[(1, 4, 11), float32]) -> (Tensor[(1, 4, 11), float32],) {
    %830 = cast(%var_7501, dtype="float32") /* ty=Tensor[(1, 4, 11), float32] */;
    %831 = log2(%830) /* ty=Tensor[(1, 4, 11), float32] */;
    %832 = cast(%831, dtype="float32") /* ty=Tensor[(1, 4, 11), float32] */;
    %833 = sin(%832) /* ty=Tensor[(1, 4, 11), float32] */;
    (%833,)
  };
  %834(%var_7507) /* ty=(Tensor[(1, 4, 11), float32],) */
}

def @func_4829() -> (Tensor[(12, 6, 8), int64],) {
  %835 = @func_2818() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %836 = %835.0;
  (%836,)
}

def @func_2599() -> (Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64]) {
  %837 = @func_1545() /* ty=Tensor[(12, 6, 8), int8] */;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(12, 6, 8), float64] */;
  %839 = @func_1694() /* ty=(Tensor[(12, 6, 8), int64],) */;
  %840 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 6, 8), int8] */, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %841 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%837, dtype="int64") /* ty=Tensor[(12, 6, 8), int64] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %844 = @func_2227() /* ty=(Tensor[(12, 6, 8), float64],) */;
  %845 = asin(%838) /* ty=Tensor[(12, 6, 8), float64] */;
  %846 = %839.0;
  %847 = subtract(%842, %843) /* ty=Tensor[(12, 6, 8), int64] */;
  %848 = %844.0;
  (%845, %846, %847, %848)
}

def @func_4174(%var_4172: Tensor[(560), int8], %var_4173: Tensor[(11, 15, 13), float32]) -> (Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) {
  %861 = fn (%var_4163: Tensor[(560), int8], %var_4166: Tensor[(11, 15, 13), float32]) -> (Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) {
    %849 = cast(%var_4163, dtype="int8") /* ty=Tensor[(560), int8] */;
    %850 = cast(%var_4163, dtype="int8") /* ty=Tensor[(560), int8] */;
    %851 = reshape(%849, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
    %852 = reshape(%850, newshape=[4, 10, 14]) /* ty=Tensor[(4, 10, 14), int8] */;
    %853 = @func_2856() /* ty=(Tensor[(12, 6, 8), float32], Tensor[(11, 15, 13), float32]) */;
    %854 = %853.1;
    %855 = cast(%var_4166, dtype="uint64") /* ty=Tensor[(11, 15, 13), uint64] */;
    %856 = shape_of(%854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %857 = cast(%854, dtype="uint64") /* ty=Tensor[(11, 15, 13), uint64] */;
    %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %859 = @func_75(%851, %852) /* ty=Tensor[(4, 10, 14), bool] */;
    %860 = bitwise_or(%857, %858) /* ty=Tensor[(11, 15, 13), uint64] */;
    (%859, %var_4163, %860)
  };
  %861(%var_4172, %var_4173) /* ty=(Tensor[(4, 10, 14), bool], Tensor[(560), int8], Tensor[(11, 15, 13), uint64]) */
}

def @func_7050(%var_7048: Tensor[(540), float32]) -> (Tensor[(12, 6, 8), bool], Tensor[(6, 6, 15), float32], Tensor[(540), float32]) {
  @func_7047(%var_7048) /* ty=(Tensor[(12, 6, 8), bool], Tensor[(6, 6, 15), float32], Tensor[(540), float32]) */
}

def @func_7845() -> (Tensor[(12, 6, 8), float32],) {
  @func_7843() /* ty=(Tensor[(12, 6, 8), float32],) */
}

def @func_6713(%var_6704: Tensor[(8, 16, 15), uint64], %var_6705: Tensor[(8, 16, 15), uint64]) -> (Tensor[(8, 16, 15), uint64],) {
  %862 = cast(%var_6705, dtype="uint64") /* ty=Tensor[(8, 16, 15), uint64] */;
  %863 = shape_of(%var_6704, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%var_6704, dtype="uint64") /* ty=Tensor[(8, 16, 15), uint64] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %866 = add(%864, %865) /* ty=Tensor[(8, 16, 15), uint64] */;
  (%866,)
}

def @func_1547() -> Tensor[(12, 6, 8), int8] {
  @func_1545() /* ty=Tensor[(12, 6, 8), int8] */
}

def @func_1505(%var_1503: Tensor[(12, 6, 8), float32], %var_1504: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), bool], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), int64]) {
  %881 = fn (%var_1467: Tensor[(12, 6, 8), float32], %var_1475: Tensor[(1408), bool]) -> (Tensor[(12, 6, 8), bool], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), int64]) {
    %867 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %868 = %867.4;
    %869 = cast(%var_1467, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
    %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %871 = cast(%868, dtype="bool") /* ty=Tensor[(12, 6, 8), bool] */;
    %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %873 = cast(meta[relay.Constant][41] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
    %874 = cast(%var_1475, dtype="bool") /* ty=Tensor[(1408), bool] */;
    %875 = reshape(%873, newshape=[312]) /* ty=Tensor[(312), uint64] */;
    %876 = reshape(%874, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
    %877 = @func_852(%875, %876) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
    %878 = less(%871, %872) /* ty=Tensor[(12, 6, 8), bool] */;
    %879 = %877.5;
    %880 = @func_901() /* ty=Tensor[(12, 6, 8), int64] */;
    (%878, %879, meta[relay.Constant][41] /* ty=Tensor[(312), uint64] */, %var_1475, %880)
  };
  %881(%var_1503, %var_1504) /* ty=(Tensor[(12, 6, 8), bool], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), int64]) */
}

def @func_6860(%var_6859: Tensor[(11), float64]) -> (Tensor[(2145), int8], Tensor[(7, 3, 11), float32], Tensor[(11), float64], Tensor[(231), float64]) {
  %890 = fn (%var_6855: Tensor[(11), float64]) -> (Tensor[(2145), int8], Tensor[(7, 3, 11), float32], Tensor[(11), float64], Tensor[(231), float64]) {
    %882 = @func_2568() /* ty=(Tensor[(2145), int8],) */;
    %883 = cast(%var_6855, dtype="float64") /* ty=Tensor[(11), float64] */;
    %884 = cast(meta[relay.Constant][42] /* ty=Tensor[(231), float64] */, dtype="float64") /* ty=Tensor[(231), float64] */;
    %885 = reshape(%883, newshape=[1, 1, 11]) /* ty=Tensor[(1, 1, 11), float64] */;
    %886 = reshape(%884, newshape=[7, 3, 11]) /* ty=Tensor[(7, 3, 11), float64] */;
    %887 = @func_6672(%885, %886) /* ty=(Tensor[(7, 3, 11), float32],) */;
    %888 = %882.0;
    %889 = %887.0;
    (%888, %889, %var_6855, meta[relay.Constant][42] /* ty=Tensor[(231), float64] */)
  };
  %890(%var_6859) /* ty=(Tensor[(2145), int8], Tensor[(7, 3, 11), float32], Tensor[(11), float64], Tensor[(231), float64]) */
}

def @main() -> (Tensor[(10, 13), float64],) {
  %891 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 13), float64] */, dtype="float64") /* ty=Tensor[(10, 13), float64] */;
  %892 = atanh(%891) /* ty=Tensor[(10, 13), float64] */;
  (%892,)
}

def @func_2547() -> (Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) {
  %901 = fn () -> (Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) {
    %893 = @func_1337() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), float32]) */;
    %894 = cast(meta[relay.Constant][44] /* ty=Tensor[(312), uint64] */, dtype="uint64") /* ty=Tensor[(312), uint64] */;
    %895 = cast(meta[relay.Constant][45] /* ty=Tensor[(1408), bool] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
    %896 = reshape(%894, newshape=[312]) /* ty=Tensor[(312), uint64] */;
    %897 = reshape(%895, newshape=[1408]) /* ty=Tensor[(1408), bool] */;
    %898 = @func_852(%896, %897) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(8, 70), float64], Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(11, 15, 13), int8]) */;
    %899 = %893.2;
    %900 = %898.5;
    (%899, %900, meta[relay.Constant][44] /* ty=Tensor[(312), uint64] */, meta[relay.Constant][45] /* ty=Tensor[(1408), bool] */)
  };
  %901() /* ty=(Tensor[(12, 6, 8), int64], Tensor[(1408), bool], Tensor[(312), uint64], Tensor[(1408), bool]) */
}

def @func_6675(%var_6673: Tensor[(1, 1, 11), float64], %var_6674: Tensor[(7, 3, 11), float64]) -> (Tensor[(7, 3, 11), float32],) {
  %907 = fn (%var_6654: Tensor[(1, 1, 11), float64], %var_6655: Tensor[(7, 3, 11), float64]) -> (Tensor[(7, 3, 11), float32],) {
    %902 = cast(%var_6654, dtype="float64") /* ty=Tensor[(1, 1, 11), float64] */;
    %903 = cast(%var_6655, dtype="float64") /* ty=Tensor[(7, 3, 11), float64] */;
    %904 = floor_mod(%902, %903) /* ty=Tensor[(7, 3, 11), float64] */;
    %905 = cast(%904, dtype="float32") /* ty=Tensor[(7, 3, 11), float32] */;
    %906 = erf(%905) /* ty=Tensor[(7, 3, 11), float32] */;
    (%906,)
  };
  %907(%var_6673, %var_6674) /* ty=(Tensor[(7, 3, 11), float32],) */
}

def @func_382(%var_372: Tensor[(7, 9, 5), uint16], %var_373: Tensor[(7, 9, 5), uint16]) -> Tensor[(7, 9, 5), bool] {
  %908 = cast(%var_373, dtype="bool") /* ty=Tensor[(7, 9, 5), bool] */;
  %909 = shape_of(%var_372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %910 = cast(%var_372, dtype="bool") /* ty=Tensor[(7, 9, 5), bool] */;
  %911 = dyn.reshape(%908, %909, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%910, %911) /* ty=Tensor[(7, 9, 5), bool] */
}

def @func_251(%var_249: Tensor[(4, 6, 13), uint64], %var_250: Tensor[(4, 10, 14), float64]) -> (Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) {
  @func_247(%var_249, %var_250) /* ty=(Tensor[(4, 6, 13), uint64], Tensor[(280, 2), int8], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(4, 10, 14), bool]) */
}

def @func_4448(%var_4446: Tensor[(12, 4, 12), float64], %var_4447: Tensor[(12, 4, 12), float64]) -> Tensor[(12, 4, 12), uint16] {
  %918 = fn (%var_4426: Tensor[(12, 4, 12), float64], %var_4438: Tensor[(12, 4, 12), float64]) -> Tensor[(12, 4, 12), uint16] {
    %912 = cast(%var_4426, dtype="float64") /* ty=Tensor[(12, 4, 12), float64] */;
    %913 = cosh(%912) /* ty=Tensor[(12, 4, 12), float64] */;
    %914 = cast(%var_4438, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
    %915 = shape_of(%913, dtype="int32") /* ty=Tensor[(3), int32] */;
    %916 = cast(%913, dtype="uint16") /* ty=Tensor[(12, 4, 12), uint16] */;
    %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    bitwise_xor(%916, %917) /* ty=Tensor[(12, 4, 12), uint16] */
  };
  %918(%var_4446, %var_4447) /* ty=Tensor[(12, 4, 12), uint16] */
}

def @func_6335() -> (Tensor[(2145), float32], Tensor[(10, 16, 5), float32]) {
  @func_6333() /* ty=(Tensor[(2145), float32], Tensor[(10, 16, 5), float32]) */
}

def @func_2407(%var_2404: Tensor[(13, 9, 3), uint32], %var_2405: Tensor[(13, 9, 3), uint32], %var_2406: Tensor[(315), uint16]) -> (Tensor[(13, 9, 3), bool], Tensor[(11, 15, 13), int8], Tensor[(7, 9, 5), bool], Tensor[(315), uint16], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(3, 104), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), bool]) {
  @func_2402(%var_2404, %var_2405, %var_2406) /* ty=(Tensor[(13, 9, 3), bool], Tensor[(11, 15, 13), int8], Tensor[(7, 9, 5), bool], Tensor[(315), uint16], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), int64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), float64], Tensor[(12, 6, 8), int64], Tensor[(3, 104), uint64], Tensor[(1408), bool], Tensor[(12, 6, 8), bool]) */
}

def @func_3235(%var_3233: Tensor[(2, 4, 7), float64], %var_3234: Tensor[(2, 4, 7), float64]) -> (Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(2, 4, 7), uint16]) {
  @func_3231(%var_3233, %var_3234) /* ty=(Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(2, 4, 7), uint16]) */
}

def @func_1011() -> Tensor[(12, 6, 8), float32] {
  @func_1009() /* ty=Tensor[(12, 6, 8), float32] */
}

def @func_3675(%var_3673: Tensor[(312), uint64], %var_3674: Tensor[(560), float64]) -> (Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64], Tensor[(13, 9, 14), float64], Tensor[(12, 6, 8), float64]) {
  @func_3671(%var_3673, %var_3674) /* ty=(Tensor[(11, 15, 13), int8], Tensor[(12, 6, 8), int64], Tensor[(576), int64], Tensor[(12, 6, 8), int64], Tensor[(13, 9, 14), bool], Tensor[(4, 10, 14), bool], Tensor[(312), uint64], Tensor[(560), float64], Tensor[(13, 9, 14), float64], Tensor[(12, 6, 8), float64]) */
}

def @func_2568() -> (Tensor[(2145), int8],) {
  %919 = @func_2132() /* ty=Tensor[(2145), int8] */;
  (%919,)
}

def @func_3576() -> Tensor[(2145), float32] {
  %921 = fn () -> Tensor[(2145), float32] {
    %920 = @func_3163() /* ty=(Tensor[(2145), float32],) */;
    %920.0
  };
  %921() /* ty=Tensor[(2145), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen248/build/output.py:2720: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen248/build/output.py:2725: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen248/build/output.py:2744: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')

===================================
#[version = "0.0.5"]
def @main() -> ((Tensor[(10, 13), float64],), ()) {
  let %x = meta[relay.Constant][0] /* ty=Tensor[(10, 13), float64] */;
  let %x1 = zeros_like(%x);
  let %x2 = (%x,);
  %0 = zeros(shape=[10, 13], dtype="float64");
  let %x3 = (%0,);
  %1 = ones(shape=[10, 13], dtype="float64");
  %2 = (%1,);
  %3 = %2.0;
  %4 = (
    let %x4 = add(%x1, %3);
    ()
  );
  (%x2, %4)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen248/build/output.py", line 2749, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(130) tvmgen_default_fused_zeros_kernel0(double* __restrict__ T_full) {
  T_full[(((int)threadIdx.x))] = 0.000000e+00;
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

