==========mod==========
#[version = "0.0.5"]
def @func_5682() -> Tensor[(8, 128), bool] {
  @func_3894() /* ty=Tensor[(8, 128), bool] */
}

def @func_5899() -> Tensor[(8, 128), float64] {
  %0 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %1 = %0.6;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  atan(%2) /* ty=Tensor[(8, 128), float64] */
}

def @func_2578(%var_2552: Tensor[(13, 11, 8), float64], %var_2567: Tensor[(5, 88), float32]) -> (Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) {
  %3 = cast(%var_2552, dtype="float64") /* ty=Tensor[(13, 11, 8), float64] */;
  %4 = cast(%var_2567, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
  %5 = cast(%var_2567, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %8 = reshape(%4, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %9 = reshape(%5, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %10 = reshape(%6, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %11 = reshape(%7, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %12 = @func_842(%8, %9, %10, %11) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %13 = cast(%var_2567, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
  %14 = reshape(%13, newshape=[440]) /* ty=Tensor[(440), float32] */;
  %15 = @func_1813(%14) /* ty=(Tensor[(4, 16, 16), float32], Tensor[(15, 10, 15), bool], Tensor[(440), float32], Tensor[(2250), uint32], Tensor[(8, 128), float64]) */;
  %16 = log10(%3) /* ty=Tensor[(13, 11, 8), float64] */;
  %17 = %12.0;
  %18 = %15.3;
  (%16, %17, %var_2567, meta[relay.Constant][0] /* ty=Tensor[(2250), uint32] */, meta[relay.Constant][1] /* ty=Tensor[(1024), float64] */, %18)
}

def @func_4377() -> Tensor[(8, 128), float64] {
  @func_971() /* ty=Tensor[(8, 128), float64] */
}

def @func_790(%var_778: Tensor[(15, 7, 11), int64], %var_779: Tensor[(15, 7, 11), int64]) -> (Tensor[(15, 7, 11), int64], Tensor[(15, 7, 11), float64]) {
  %19 = cast(%var_779, dtype="int64") /* ty=Tensor[(15, 7, 11), int64] */;
  %20 = shape_of(%var_778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_778, dtype="int64") /* ty=Tensor[(15, 7, 11), int64] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %23 = cast(%var_779, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
  %24 = bitwise_and(%21, %22) /* ty=Tensor[(15, 7, 11), int64] */;
  %25 = sigmoid(%23) /* ty=Tensor[(15, 7, 11), float64] */;
  (%24, %25)
}

def @func_5120(%var_5083: Tensor[(8, 128), uint32], %var_5091: Tensor[(2250), uint32], %var_5095: Tensor[(110, 4), float32], %var_5114: Tensor[(250), float32]) -> (Tensor[(8, 128), bool], Tensor[(2250), uint32], Tensor[(2250), uint32], Tensor[(110, 4), bool], Tensor[(5, 5, 10), bool], Tensor[(250), float32]) {
  %26 = @func_2905() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) */;
  %27 = %26.1;
  %28 = cast(%var_5083, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(2), int32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(110, 4), float32] */, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(110, 4), float32] */, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %34 = cast(%var_5091, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %35 = cast(%27, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %36 = reshape(%32, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %37 = reshape(%33, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %38 = reshape(%34, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %39 = reshape(%35, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %40 = @func_842(%36, %37, %38, %39) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %41 = cast(%var_5095, dtype="bool") /* ty=Tensor[(110, 4), bool] */;
  %42 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(110, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %43 = cast(meta[relay.Constant][2] /* ty=Tensor[(110, 4), float32] */, dtype="bool") /* ty=Tensor[(110, 4), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %45 = cast(%var_5114, dtype="float32") /* ty=Tensor[(250), float32] */;
  %46 = reshape(%45, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %47 = @func_2455(%46) /* ty=(Tensor[(5, 5, 10), float64], Tensor[(4, 6, 10), int32], Tensor[(5, 5, 10), bool]) */;
  %48 = less(%30, %31) /* ty=Tensor[(8, 128), bool] */;
  %49 = %40.2;
  %50 = equal(%43, %44) /* ty=Tensor[(110, 4), bool] */;
  %51 = %47.2;
  (%48, %49, %var_5091, %50, %51, %var_5114)
}

def @func_6753() -> (Tensor[(1144, 1), float32], Tensor[(4, 6, 10), bool]) {
  %52 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %53 = %52.4;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %55 = @func_4764() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %56 = cosh(%54) /* ty=Tensor[(1144, 1), float32] */;
  %57 = %55.0;
  (%56, %57)
}

def @func_2222(%var_2189: float64) -> (Tensor[(11, 8, 1), float64], Tensor[(2250), uint32], Tensor[(8, 128), uint64], Tensor[(1024), bool], Tensor[(2, 15, 11), float64]) {
  %58 = cast(%var_2189, dtype="float64") /* ty=float64 */;
  %59 = cast(meta[relay.Constant][3] /* ty=Tensor[(11, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
  %60 = cast(meta[relay.Constant][4] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %61 = reshape(%60, newshape=[8, 128]) /* ty=Tensor[(8, 128), bool] */;
  %62 = @func_1635(%61) /* ty=(Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) */;
  %63 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %64 = mod(%58, %59) /* ty=Tensor[(11, 8, 1), float64] */;
  %65 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %66 = %62.0;
  %67 = %63.0;
  (%64, %65, %66, meta[relay.Constant][4] /* ty=Tensor[(1024), bool] */, %67)
}

def @func_4630(%var_4597: Tensor[(60), float32]) -> (Tensor[(2, 6, 13), float64], Tensor[(15, 2, 2), float32], Tensor[(60), float32], Tensor[(2, 15, 11), float64]) {
  %68 = @func_4049() /* ty=(Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) */;
  %69 = cast(%var_4597, dtype="float32") /* ty=Tensor[(60), float32] */;
  %70 = cast(%var_4597, dtype="float32") /* ty=Tensor[(60), float32] */;
  %71 = reshape(%69, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %72 = reshape(%70, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %73 = @func_3081(%71, %72) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %74 = @func_3108() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */;
  %75 = %68.1;
  %76 = %73.0;
  %77 = %74.1;
  (%75, %76, %var_4597, %77)
}

def @func_5853() -> Tensor[(8, 128), float64] {
  @func_971() /* ty=Tensor[(8, 128), float64] */
}

def @func_2184() -> Tensor[(2, 15, 11), float64] {
  %78 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %78.0
}

def @func_1843(%var_1840: Tensor[(208), int32]) -> (Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(208), int32]) {
  %79 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %80 = cast(%var_1840, dtype="int32") /* ty=Tensor[(208), int32] */;
  %81 = cast(%var_1840, dtype="int32") /* ty=Tensor[(208), int32] */;
  %82 = %79.1;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(15, 10, 15), float64] */;
  %84 = reshape(%80, newshape=[13, 2, 8]) /* ty=Tensor[(13, 2, 8), int32] */;
  %85 = reshape(%81, newshape=[13, 2, 8]) /* ty=Tensor[(13, 2, 8), int32] */;
  %86 = reshape(%83, newshape=[2250]) /* ty=Tensor[(2250), float64] */;
  %87 = @func_1438(%84, %85, %86) /* ty=(Tensor[(13, 2, 8), int32], Tensor[(3, 750), uint32], Tensor[(2250), uint32], Tensor[(8, 128), bool], Tensor[(2250), bool]) */;
  %88 = %87.2;
  (%82, %88, %var_1840)
}

def @func_4476() -> (Tensor[(15, 10, 15), float64],) {
  %89 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(15, 10, 15), float64] */;
  %91 = log2(%90) /* ty=Tensor[(15, 10, 15), float64] */;
  (%91,)
}

def @func_723() -> Tensor[(2250), uint32] {
  %92 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %92.2
}

def @func_3894() -> Tensor[(8, 128), bool] {
  @func_993() /* ty=Tensor[(8, 128), bool] */
}

def @func_4292() -> (Tensor[(15, 10, 15), int16],) {
  %93 = @func_3657() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) */;
  %94 = %93.0;
  (%94,)
}

def @func_2677() -> (Tensor[(4, 6, 10), float32], Tensor[(4, 6, 10), bool]) {
  %95 = @func_1301() /* ty=Tensor[(4, 6, 10), int32] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
  %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(4, 6, 10), int32] */, dtype="bool") /* ty=Tensor[(4, 6, 10), bool] */;
  %98 = shape_of(%95, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%95, dtype="bool") /* ty=Tensor[(4, 6, 10), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = asin(%96) /* ty=Tensor[(4, 6, 10), float32] */;
  %102 = logical_and(%99, %100) /* ty=Tensor[(4, 6, 10), bool] */;
  (%101, %102)
}

def @func_583(%var_479: Tensor[(2250), uint32]) -> (Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) {
  %103 = cast(%var_479, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %104 = cast(%var_479, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %105 = reshape(%103, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %106 = reshape(%104, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %107 = @func_448(%105, %106) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %108 = %107.0;
  %109 = cast(%var_479, dtype="int16") /* ty=Tensor[(2250), int16] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="int16") /* ty=Tensor[(15, 10, 15), int16] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 512), float64] */, dtype="float64") /* ty=Tensor[(2, 512), float64] */;
  %114 = reshape(%113, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %115 = cast(%108, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %116 = cast(%108, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %117 = reshape(%115, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %118 = reshape(%116, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %119 = @func_448(%117, %118) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %120 = @func_275(%114) /* ty=Tensor[(4, 16, 16), float64] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %122 = reshape(%121, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %123 = cast(%108, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %124 = add(%111, %112) /* ty=Tensor[(15, 10, 15), int16] */;
  %125 = cast(%124, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %126 = reshape(%123, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %127 = reshape(%125, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %128 = @func_448(%126, %127) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %129 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %130 = log10(%129) /* ty=Tensor[(16, 16, 13), float64] */;
  %131 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 16, 13), float64] */, dtype="uint16") /* ty=Tensor[(16, 16, 13), uint16] */;
  %132 = shape_of(%130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %133 = cast(%130, dtype="uint16") /* ty=Tensor[(16, 16, 13), uint16] */;
  %134 = dyn.reshape(%131, %132, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %135 = right_shift(%133, %134) /* ty=Tensor[(16, 16, 13), uint16] */;
  %136 = cast(%130, dtype="int64") /* ty=Tensor[(16, 16, 13), int64] */;
  %137 = shape_of(%135, dtype="int32") /* ty=Tensor[(3), int32] */;
  %138 = cast(%135, dtype="int64") /* ty=Tensor[(16, 16, 13), int64] */;
  %139 = dyn.reshape(%136, %137, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %140 = multiply(%138, %139) /* ty=Tensor[(16, 16, 13), int64] */;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(16, 16, 13), float32] */;
  %142 = %119.0;
  %143 = @func_275(%122) /* ty=Tensor[(4, 16, 16), float64] */;
  %144 = %128.0;
  %145 = tan(%141) /* ty=Tensor[(16, 16, 13), float32] */;
  (%124, %120, meta[relay.Constant][6] /* ty=Tensor[(2, 512), float64] */, %142, %143, %144, %145)
}

def @func_1964() -> Tensor[(2, 15, 11), float64] {
  %146 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %146.0
}

def @func_1466(%var_1454: Tensor[(8, 128), float64]) -> (Tensor[(8, 128), uint32],) {
  %147 = @func_1368() /* ty=(Tensor[(8, 128), float64],) */;
  %148 = %147.0;
  %149 = cast(%var_1454, dtype="uint32") /* ty=Tensor[(8, 128), uint32] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %151 = cast(%148, dtype="uint32") /* ty=Tensor[(8, 128), uint32] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %153 = logical_xor(%151, %152) /* ty=Tensor[(8, 128), uint32] */;
  (%153,)
}

def @func_4828() -> Tensor[(2, 15, 11), float64] {
  @func_1964() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_3471() -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) {
  %154 = @func_3186() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %155 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
  %156 = %154.0;
  (%155, %156)
}

def @func_4142(%var_4131: Tensor[(8, 128), bool]) -> Tensor[(8, 128), float32] {
  %157 = @func_993() /* ty=Tensor[(8, 128), bool] */;
  %158 = cast(%var_4131, dtype="float32") /* ty=Tensor[(8, 128), float32] */;
  %159 = shape_of(%157, dtype="int32") /* ty=Tensor[(2), int32] */;
  %160 = cast(%157, dtype="float32") /* ty=Tensor[(8, 128), float32] */;
  %161 = dyn.reshape(%158, %159, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  floor_divide(%160, %161) /* ty=Tensor[(8, 128), float32] */
}

def @func_6169() -> (Tensor[(4, 6, 10), int32], Tensor[(8, 128), float64]) {
  %162 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %163 = %162.0;
  %164 = @func_5853() /* ty=Tensor[(8, 128), float64] */;
  (%163, %164)
}

def @func_6406(%var_6386: int64, %var_6387: Tensor[(2, 12, 16), int64]) -> (Tensor[(2, 12, 16), int64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) {
  %165 = cast(%var_6386, dtype="int64") /* ty=int64 */;
  %166 = cast(%var_6387, dtype="int64") /* ty=Tensor[(2, 12, 16), int64] */;
  %167 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 12, 16), int64] */, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %168 = shape_of(%var_6387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_6387, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %171 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 12, 16), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %172 = left_shift(%165, %166) /* ty=Tensor[(2, 12, 16), int64] */;
  %173 = logical_or(%169, %170) /* ty=Tensor[(2, 12, 16), bool] */;
  %174 = atanh(%171) /* ty=Tensor[(2, 12, 16), float32] */;
  (%172, %173, %174)
}

def @func_5484(%var_5478: Tensor[(2250), uint32]) -> (Tensor[(8, 128), float64], Tensor[(2250), bool], Tensor[(2250), uint32]) {
  %175 = cast(%var_5478, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %176 = reshape(%175, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %177 = @func_1343(%176) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */;
  %178 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %179 = %177.0;
  (%178, %179, %var_5478)
}

def @func_4764() -> (Tensor[(4, 6, 10), bool],) {
  %180 = @func_3108() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */;
  %181 = %180.0;
  (%181,)
}

def @func_2164(%var_2130: Tensor[(440), float32], %var_2138: Tensor[(2, 15, 11), float64], %var_2160: Tensor[(3, 750), uint32]) -> (Tensor[(4, 16, 16), float64], Tensor[(440), float32], Tensor[(3, 750), bool], Tensor[(2, 15, 11), float64], Tensor[(3, 750), float64]) {
  %182 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %183 = cast(%var_2130, dtype="float32") /* ty=Tensor[(440), float32] */;
  %184 = cast(%var_2130, dtype="float32") /* ty=Tensor[(440), float32] */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 750), uint32] */, dtype="uint32") /* ty=Tensor[(3, 750), uint32] */;
  %186 = %182.1;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %188 = reshape(%183, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %189 = reshape(%184, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %190 = reshape(%185, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %191 = reshape(%187, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %192 = @func_842(%188, %189, %190, %191) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %193 = %192.2;
  %194 = cast(%193, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %195 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(3, 750), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %196 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 750), uint32] */, dtype="bool") /* ty=Tensor[(3, 750), bool] */;
  %197 = dyn.reshape(%194, %195, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %198 = @func_1964() /* ty=Tensor[(2, 15, 11), float64] */;
  %199 = cast(%var_2138, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %200 = shape_of(%198, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%198, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %203 = cast(%var_2160, dtype="float64") /* ty=Tensor[(3, 750), float64] */;
  %204 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(3, 750), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %205 = cast(meta[relay.Constant][9] /* ty=Tensor[(3, 750), uint32] */, dtype="float64") /* ty=Tensor[(3, 750), float64] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %207 = greater(%196, %197) /* ty=Tensor[(3, 750), bool] */;
  %208 = maximum(%201, %202) /* ty=Tensor[(2, 15, 11), float64] */;
  %209 = power(%205, %206) /* ty=Tensor[(3, 750), float64] */;
  (%186, %var_2130, %207, %208, %209)
}

def @func_633(%var_619: Tensor[(7, 10, 13), float32], %var_620: Tensor[(7, 10, 13), float32], %var_629: Tensor[(1, 2250), uint32]) -> (Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) {
  %210 = cast(%var_620, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %211 = shape_of(%var_619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%var_619, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %214 = cast(%var_629, dtype="uint32") /* ty=Tensor[(1, 2250), uint32] */;
  %215 = reshape(%214, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %216 = @func_583(%215) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %217 = power(%212, %213) /* ty=Tensor[(7, 10, 13), float32] */;
  %218 = %216.3;
  (%217, %218, %var_629)
}

def @func_971() -> Tensor[(8, 128), float64] {
  %219 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %219.2
}

def @func_4270() -> (Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) {
  %220 = @func_3657() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) */;
  %221 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 256), float64] */, dtype="float64") /* ty=Tensor[(4, 256), float64] */;
  %222 = reshape(%221, newshape=[2, 512]) /* ty=Tensor[(2, 512), float64] */;
  %223 = @func_1268(%222) /* ty=(Tensor[(2, 512), float64], Tensor[(2250), float64]) */;
  %224 = cast(meta[relay.Constant][11] /* ty=Tensor[(1144, 1), float64] */, dtype="float64") /* ty=Tensor[(1144, 1), float64] */;
  %225 = cast(meta[relay.Constant][12] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %226 = reshape(%224, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %227 = reshape(%225, newshape=[5, 88]) /* ty=Tensor[(5, 88), float32] */;
  %228 = @func_2578(%226, %227) /* ty=(Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) */;
  %229 = @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */;
  %230 = %220.0;
  %231 = %223.1;
  %232 = %228.3;
  %233 = %229.2;
  (%230, %231, meta[relay.Constant][10] /* ty=Tensor[(4, 256), float64] */, %232, meta[relay.Constant][11] /* ty=Tensor[(1144, 1), float64] */, meta[relay.Constant][12] /* ty=Tensor[(440), float32] */, %233)
}

def @func_4644() -> (Tensor[(15, 10, 15), int16],) {
  %234 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
  (%234,)
}

def @func_2090() -> (Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) {
  %235 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %236 = %235.2;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(8, 128), float32] */;
  %238 = cast(%236, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %239 = reshape(%238, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %240 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  %241 = atanh(%237) /* ty=Tensor[(8, 128), float32] */;
  %242 = @func_275(%239) /* ty=Tensor[(4, 16, 16), float64] */;
  (%240, %241, %242)
}

def @func_5751() -> (Tensor[(15, 10, 15), float64],) {
  %243 = @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */;
  %244 = %243.0;
  (%244,)
}

def @func_3676(%var_3664: uint64, %var_3665: Tensor[(7, 10, 7), uint64]) -> Tensor[(7, 10, 7), bool] {
  %245 = cast(%var_3664, dtype="bool") /* ty=bool */;
  %246 = cast(%var_3665, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  greater(%245, %246) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_6365() -> Tensor[(2250), uint32] {
  @func_723() /* ty=Tensor[(2250), uint32] */
}

def @func_2905() -> (Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) {
  %247 = @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */;
  %248 = @func_2283() /* ty=Tensor[(8, 128), float64] */;
  %249 = %247.2;
  (%248, %249)
}

def @func_3979() -> (Tensor[(4, 6, 10), bool],) {
  %250 = @func_3471() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */;
  %251 = %250.1;
  (%251,)
}

def @func_889() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) {
  %252 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %255 = cast(%253, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %256 = reshape(%254, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %257 = reshape(%255, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %258 = @func_448(%256, %257) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %259 = %258.0;
  (%253, %259)
}

def @func_5174(%var_5136: Tensor[(13, 10, 1), float32]) -> (Tensor[(15, 10, 15), float64], Tensor[(13, 10, ?), float64], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(330), float64]) {
  %260 = @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */;
  %261 = cast(%var_5136, dtype="float32") /* ty=Tensor[(13, 10, 1), float32] */;
  %262 = asinh(%261) /* ty=Tensor[(13, 10, 1), float32] */;
  %263 = cast(%var_5136, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %265 = cast(%262, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %267 = divide(%265, %266) /* ty=Tensor[(13, 10, ?), float64] */;
  %268 = cast(%267, dtype="float64") /* ty=Tensor[(13, 10, ?), float64] */;
  %269 = shape_of(%262, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%262, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %273 = reshape(%272, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float64] */;
  %274 = @func_3842(%273) /* ty=(Tensor[(15, 10, 15), bool], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(2, 15, 11), float64]) */;
  %275 = %260.0;
  %276 = floor_mod(%270, %271) /* ty=Tensor[(13, 10, ?), float64] */;
  %277 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %278 = %274.2;
  (%275, %276, %277, %278, meta[relay.Constant][13] /* ty=Tensor[(330), float64] */)
}

def @func_6583(%var_6569: Tensor[(15, 8, 2), int32], %var_6574: Tensor[(15, 8, 12), int32]) -> (Tensor[(15, 8, 1), int32], Tensor[(2, 15, 11), float64], Tensor[(15, 8, 2), bool], Tensor[(15, 8, 12), float64]) {
  %279 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 8, 1), int32] */, dtype="int32") /* ty=Tensor[(15, 8, 1), int32] */;
  %281 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 8, 1), int32] */, dtype="bool") /* ty=Tensor[(15, 8, 1), bool] */;
  %282 = cast(%var_6569, dtype="bool") /* ty=Tensor[(15, 8, 2), bool] */;
  %283 = cast(meta[relay.Constant][14] /* ty=Tensor[(15, 8, 1), int32] */, dtype="float64") /* ty=Tensor[(15, 8, 1), float64] */;
  %284 = cast(%var_6574, dtype="float64") /* ty=Tensor[(15, 8, 12), float64] */;
  %285 = bitwise_and(%279, %280) /* ty=Tensor[(15, 8, 1), int32] */;
  %286 = @func_2184() /* ty=Tensor[(2, 15, 11), float64] */;
  %287 = greater(%281, %282) /* ty=Tensor[(15, 8, 2), bool] */;
  %288 = floor_divide(%283, %284) /* ty=Tensor[(15, 8, 12), float64] */;
  (%285, %286, %287, %288)
}

def @func_2722() -> (Tensor[(4, 16, 16), float64],) {
  %289 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %290 = %289.1;
  %291 = cast(%290, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %292 = cosh(%291) /* ty=Tensor[(4, 16, 16), float64] */;
  (%292,)
}

def @func_5404() -> (Tensor[(8, 128), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), float64]) {
  %293 = @func_5029() /* ty=(Tensor[(8, 128), float64],) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %296 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %297 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %298 = asin(%295) /* ty=Tensor[(8, 128), float64] */;
  %299 = %296.6;
  %300 = %297.2;
  (%298, %299, %300)
}

def @func_5256(%var_5242: Tensor[(4, 6, 10), bool]) -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) {
  %301 = @func_3471() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */;
  %302 = @func_4764() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %303 = %302.0;
  %304 = cast(%var_5242, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(3), int32] */;
  %306 = cast(%303, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %308 = %301.0;
  %309 = floor_mod(%306, %307) /* ty=Tensor[(4, 6, 10), float64] */;
  (%308, %309)
}

def @func_3997() -> (Tensor[(4, 6, 10), bool], Tensor[(4, 16, 16), float64], Tensor[(1024), float64]) {
  %310 = @func_3186() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %311 = cast(meta[relay.Constant][15] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %312 = reshape(%311, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %313 = %310.0;
  %314 = @func_275(%312) /* ty=Tensor[(4, 16, 16), float64] */;
  (%313, %314, meta[relay.Constant][15] /* ty=Tensor[(1024), float64] */)
}

def @func_3438(%var_3409: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64], Tensor[(2, 15, 11), float64]) {
  %315 = cast(%var_3409, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %316 = @func_3014() /* ty=(Tensor[(6, 4, 11), float64], Tensor[(2, 15, 11), float64]) */;
  %317 = atanh(%315) /* ty=Tensor[(11, 7, 14), float64] */;
  %318 = %316.1;
  (%317, %318)
}

def @func_1537() -> Tensor[(8, 128), float64] {
  %319 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %319.2
}

def @func_2283() -> Tensor[(8, 128), float64] {
  %320 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %320.2
}

def @func_1593() -> Tensor[(8, 128), float64] {
  @func_971() /* ty=Tensor[(8, 128), float64] */
}

def @func_3461() -> Tensor[(2250), uint32] {
  %321 = @func_2836() /* ty=(Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) */;
  %321.1
}

def @func_5325() -> Tensor[(2, 15, 11), float64] {
  %322 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %322.0
}

def @func_1739(%var_1735: Tensor[(2250), uint32]) -> (Tensor[(2, 15, 11), float64], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) {
  %323 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %324 = cast(%var_1735, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %325 = cast(%var_1735, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %326 = reshape(%324, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %327 = reshape(%325, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %328 = @func_448(%326, %327) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %329 = %323.0;
  %330 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  %331 = %328.0;
  (%329, %330, %331, %var_1735)
}

def @func_2028() -> Tensor[(15, 10, 15), int16] {
  %332 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %332.1
}

def @func_3014() -> (Tensor[(6, 4, 11), float64], Tensor[(2, 15, 11), float64]) {
  %333 = cast(5.52204f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %334 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 4, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 11), float64] */;
  %335 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %336 = divide(%333, %334) /* ty=Tensor[(6, 4, 11), float64] */;
  %337 = %335.0;
  (%336, %337)
}

def @func_3240() -> (Tensor[(4, 16, 16), float64], Tensor[(4, 6, 10), int32]) {
  %338 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %339 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  %340 = %338.0;
  (%339, %340)
}

def @func_448(%var_442: Tensor[(15, 10, 15), uint32], %var_443: Tensor[(15, 10, 15), uint32]) -> (Tensor[(15, 10, 15), bool],) {
  %341 = cast(%var_443, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %342 = shape_of(%var_442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %343 = cast(%var_442, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %345 = not_equal(%343, %344) /* ty=Tensor[(15, 10, 15), bool] */;
  (%345,)
}

def @func_653() -> (Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) {
  %346 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %347 = cast(meta[relay.Constant][18] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %348 = reshape(%347, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %349 = @func_583(%348) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %350 = cos(%346) /* ty=Tensor[(2, 15, 11), float64] */;
  %351 = %349.0;
  (%350, %351, meta[relay.Constant][18] /* ty=Tensor[(2250), uint32] */)
}

def @func_3081(%var_3076: Tensor[(15, 2, 2), float32], %var_3077: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float32],) {
  %352 = cast(%var_3077, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %353 = shape_of(%var_3076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%var_3076, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %356 = power(%354, %355) /* ty=Tensor[(15, 2, 2), float32] */;
  (%356,)
}

def @func_5938() -> (Tensor[(15, 10, 15), int16],) {
  %357 = @func_5927() /* ty=Tensor[(15, 10, 15), int16] */;
  (%357,)
}

def @func_1813(%var_1797: Tensor[(440), float32]) -> (Tensor[(4, 16, 16), float32], Tensor[(15, 10, 15), bool], Tensor[(440), float32], Tensor[(2250), uint32], Tensor[(8, 128), float64]) {
  %358 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %360 = tan(%359) /* ty=Tensor[(4, 16, 16), float64] */;
  %361 = cast(%358, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %362 = reshape(%361, newshape=[2, 512]) /* ty=Tensor[(2, 512), float64] */;
  %363 = @func_1268(%362) /* ty=(Tensor[(2, 512), float64], Tensor[(2250), float64]) */;
  %364 = %363.0;
  %365 = cast(%364, dtype="float32") /* ty=Tensor[(2, 512), float32] */;
  %366 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%360, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %369 = cast(%var_1797, dtype="float32") /* ty=Tensor[(440), float32] */;
  %370 = cast(%var_1797, dtype="float32") /* ty=Tensor[(440), float32] */;
  %371 = cast(meta[relay.Constant][19] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %372 = mod(%367, %368) /* ty=Tensor[(4, 16, 16), float32] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %374 = reshape(%369, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %375 = reshape(%370, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %376 = reshape(%371, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %377 = reshape(%373, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %378 = @func_842(%374, %375, %376, %377) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %379 = cast(%358, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %380 = reshape(%379, newshape=[8, 128]) /* ty=Tensor[(8, 128), bool] */;
  %381 = @func_1635(%380) /* ty=(Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) */;
  %382 = %378.1;
  %383 = %381.1;
  (%372, %382, %var_1797, meta[relay.Constant][19] /* ty=Tensor[(2250), uint32] */, %383)
}

def @func_5049(%var_5034: Tensor[(1, 14), uint16], %var_5035: Tensor[(1, 14), uint16]) -> (Tensor[(?, 14), uint16],) {
  %384 = cast(%var_5035, dtype="uint16") /* ty=Tensor[(1, 14), uint16] */;
  %385 = shape_of(%var_5034, dtype="int32") /* ty=Tensor[(2), int32] */;
  %386 = cast(%var_5034, dtype="uint16") /* ty=Tensor[(1, 14), uint16] */;
  %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %388 = right_shift(%386, %387) /* ty=Tensor[(?, 14), uint16] */;
  (%388,)
}

def @func_1268(%var_1239: Tensor[(2, 512), float64]) -> (Tensor[(2, 512), float64], Tensor[(2250), float64]) {
  %389 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %390 = %389.2;
  %391 = cast(%390, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %392 = reshape(%391, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %393 = @func_583(%392) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %394 = %393.2;
  %395 = cast(%var_1239, dtype="float64") /* ty=Tensor[(2, 512), float64] */;
  %396 = shape_of(%394, dtype="int32") /* ty=Tensor[(2), int32] */;
  %397 = cast(%394, dtype="float64") /* ty=Tensor[(2, 512), float64] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %399 = cast(%390, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %400 = log(%399) /* ty=Tensor[(2250), float32] */;
  %401 = cast(%400, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %402 = log2(%401) /* ty=Tensor[(2250), float64] */;
  %403 = cast(%390, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(1), int32] */;
  %405 = cast(%402, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?), float32] */;
  %407 = multiply(%405, %406) /* ty=Tensor[(2250), float32] */;
  %408 = cast(%407, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %409 = shape_of(%400, dtype="int32") /* ty=Tensor[(1), int32] */;
  %410 = cast(%400, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %411 = dyn.reshape(%408, %409, newshape=[]) /* ty=Tensor[(?), float64] */;
  %412 = floor_divide(%397, %398) /* ty=Tensor[(2, 512), float64] */;
  %413 = floor_divide(%410, %411) /* ty=Tensor[(2250), float64] */;
  (%412, %413)
}

def @func_2765(%var_2759: Tensor[(2250), uint32]) -> (Tensor[(8, 128), uint8], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) {
  %414 = @func_2283() /* ty=Tensor[(8, 128), float64] */;
  %415 = @func_2090() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */;
  %416 = %415.2;
  %417 = cast(%416, dtype="uint8") /* ty=Tensor[(4, 16, 16), uint8] */;
  %418 = shape_of(%414, dtype="int32") /* ty=Tensor[(2), int32] */;
  %419 = cast(%414, dtype="uint8") /* ty=Tensor[(8, 128), uint8] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %421 = cast(%var_2759, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %422 = cast(%var_2759, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %423 = reshape(%421, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %424 = reshape(%422, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %425 = @func_448(%423, %424) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %426 = left_shift(%419, %420) /* ty=Tensor[(8, 128), uint8] */;
  %427 = %425.0;
  (%426, %427, %var_2759)
}

def @func_2836() -> (Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) {
  %428 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %429 = @func_2328() /* ty=Tensor[(4, 6, 10), int32] */;
  %430 = %428.0;
  (%429, %430)
}

def @func_5861() -> Tensor[(2, 15, 11), float64] {
  @func_5325() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_6068(%var_6060: Tensor[(490), uint64]) -> (Tensor[(8, 128), float64], Tensor[(2, 15, 11), float64], uint64, Tensor[(490), uint64]) {
  %431 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %432 = cast(%var_6060, dtype="uint64") /* ty=Tensor[(490), uint64] */;
  %433 = reshape(%431, newshape=[]) /* ty=uint64 */;
  %434 = reshape(%432, newshape=[490]) /* ty=Tensor[(490), uint64] */;
  %435 = @func_4867(%433, %434) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(1024), float64], Tensor[(7, 10, 7), bool], uint64, Tensor[(490), uint64]) */;
  %436 = @func_5853() /* ty=Tensor[(8, 128), float64] */;
  %437 = %435.0;
  (%436, %437, meta[relay.Constant][20] /* ty=uint64 */, %var_6060)
}

def @func_1343(%var_1327: Tensor[(2250), uint32]) -> (Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) {
  %438 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %439 = %438.0;
  %440 = cast(%var_1327, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(1), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?), bool] */;
  %444 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %445 = not_equal(%442, %443) /* ty=Tensor[(2250), bool] */;
  %446 = %444.1;
  (%445, %446)
}

def @func_3403() -> (Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) {
  %447 = cast(meta[relay.Constant][21] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %448 = reshape(%447, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %449 = @func_583(%448) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %450 = cast(meta[relay.Constant][21] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %451 = reshape(%450, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %452 = @func_1739(%451) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) */;
  %453 = %452.3;
  %454 = cast(%453, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %455 = acosh(%454) /* ty=Tensor[(2250), float32] */;
  %456 = cast(%455, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %457 = reshape(%456, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %458 = @func_1343(%457) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */;
  %459 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %460 = %449.5;
  %461 = %458.1;
  (%459, meta[relay.Constant][21] /* ty=Tensor[(2250), uint32] */, %460, %455, %461)
}

def @func_842(%var_814: Tensor[(4, 10, 11), float32], %var_815: Tensor[(4, 10, 11), float32], %var_821: Tensor[(2250), uint32], %var_835: Tensor[(1024), float64]) -> (Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) {
  %462 = cast(%var_815, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %463 = shape_of(%var_814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%var_814, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %466 = cast(meta[relay.Constant][22] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %467 = cast(meta[relay.Constant][22] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %468 = cast(%var_821, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %469 = reshape(%466, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %470 = reshape(%467, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %471 = reshape(%468, newshape=[1, 2250]) /* ty=Tensor[(1, 2250), uint32] */;
  %472 = @func_633(%469, %470, %471) /* ty=(Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) */;
  %473 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %474 = cast(%var_835, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %475 = reshape(%474, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %476 = cast(meta[relay.Constant][22] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %477 = greater_equal(%464, %465) /* ty=Tensor[(4, 10, 11), bool] */;
  %478 = %472.1;
  %479 = %473.1;
  %480 = @func_275(%475) /* ty=Tensor[(4, 16, 16), float64] */;
  %481 = acos(%476) /* ty=Tensor[(455, 2), float32] */;
  (%477, %478, %var_821, %479, %480, %var_835, %481)
}

def @func_4745(%var_4721: Tensor[(15, 2, 2), float32]) -> (Tensor[(2, 15, 11), float64], Tensor[(60), float32], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32], Tensor[(15, 10, 15), float64]) {
  %482 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %483 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %484 = cast(meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %485 = reshape(%483, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %486 = reshape(%484, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %487 = @func_3081(%485, %486) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %488 = %487.0;
  %489 = cast(%var_4721, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %493 = cast(%var_4721, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %494 = @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */;
  %495 = %482.0;
  %496 = bitwise_and(%491, %492) /* ty=Tensor[(15, 2, 2), int8] */;
  %497 = log2(%493) /* ty=Tensor[(15, 2, 2), float32] */;
  %498 = %494.0;
  (%495, meta[relay.Constant][23] /* ty=Tensor[(60), float32] */, %496, %497, %498)
}

def @func_5734() -> (Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) {
  %499 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %500 = %499.0;
  %501 = @func_3747() /* ty=Tensor[(2250), uint32] */;
  (%500, %501)
}

def @func_3186() -> (Tensor[(4, 6, 10), bool],) {
  %502 = @func_3108() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */;
  %503 = %502.0;
  (%503,)
}

def @func_5029() -> (Tensor[(8, 128), float64],) {
  %504 = @func_1368() /* ty=(Tensor[(8, 128), float64],) */;
  %505 = %504.0;
  (%505,)
}

def @func_6700(%var_6650: Tensor[(2250), uint32]) -> (Tensor[(4, 6, 10), bool], Tensor[(2250), bool], Tensor[(2250), uint32], Tensor[(15, 2, 2), float32], Tensor[(3, 20), float32], Tensor[(2250), uint32], Tensor[(1024), uint32], Tensor[(440), float32], Tensor[(4, 16, 16), float64], Tensor[(250), int64]) {
  %506 = @func_3471() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */;
  %507 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %508 = reshape(%507, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %509 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %510 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
  %511 = reshape(%509, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %512 = reshape(%510, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %513 = @func_3081(%511, %512) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %514 = cast(meta[relay.Constant][25] /* ty=Tensor[(1024), uint32] */, dtype="uint32") /* ty=Tensor[(1024), uint32] */;
  %515 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %516 = cast(meta[relay.Constant][26] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %517 = cast(meta[relay.Constant][27] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
  %518 = reshape(%514, newshape=[8, 128]) /* ty=Tensor[(8, 128), uint32] */;
  %519 = reshape(%515, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %520 = reshape(%516, newshape=[110, 4]) /* ty=Tensor[(110, 4), float32] */;
  %521 = reshape(%517, newshape=[250]) /* ty=Tensor[(250), float32] */;
  %522 = @func_5120(%518, %519, %520, %521) /* ty=(Tensor[(8, 128), bool], Tensor[(2250), uint32], Tensor[(2250), uint32], Tensor[(110, 4), bool], Tensor[(5, 5, 10), bool], Tensor[(250), float32]) */;
  %523 = @func_2722() /* ty=(Tensor[(4, 16, 16), float64],) */;
  %524 = cast(meta[relay.Constant][28] /* ty=Tensor[(250), float32] */, dtype="int64") /* ty=Tensor[(250), int64] */;
  %525 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %526 = cast(meta[relay.Constant][27] /* ty=Tensor[(250), float32] */, dtype="int64") /* ty=Tensor[(250), int64] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?), int64] */;
  %528 = %506.1;
  %529 = @func_5885(%508) /* ty=Tensor[(2250), bool] */;
  %530 = %513.0;
  %531 = %522.2;
  %532 = %523.0;
  %533 = bitwise_and(%526, %527) /* ty=Tensor[(250), int64] */;
  (%528, %529, %var_6650, %530, meta[relay.Constant][24] /* ty=Tensor[(3, 20), float32] */, %531, meta[relay.Constant][25] /* ty=Tensor[(1024), uint32] */, meta[relay.Constant][26] /* ty=Tensor[(440), float32] */, %532, %533)
}

def @func_4049() -> (Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) {
  %534 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
  %535 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
  %536 = @func_2905() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) */;
  %537 = cos(%534) /* ty=Tensor[(2, 6, 13), float64] */;
  %538 = asinh(%535) /* ty=Tensor[(2, 6, 13), float64] */;
  %539 = %536.1;
  %540 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
  (%537, %538, %539, %540)
}

def @func_3747() -> Tensor[(2250), uint32] {
  @func_723() /* ty=Tensor[(2250), uint32] */
}

def @func_2328() -> Tensor[(4, 6, 10), int32] {
  %541 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %541.0
}

def @func_2455(%var_2442: Tensor[(5, 5, 10), float32]) -> (Tensor[(5, 5, 10), float64], Tensor[(4, 6, 10), int32], Tensor[(5, 5, 10), bool]) {
  %542 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %543 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %546 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %547 = cast(meta[relay.Constant][30] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %548 = cosh(%547) /* ty=Tensor[(5, 5, 10), float32] */;
  %549 = cast(%var_2442, dtype="bool") /* ty=Tensor[(5, 5, 10), bool] */;
  %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%548, dtype="bool") /* ty=Tensor[(5, 5, 10), bool] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %553 = minimum(%544, %545) /* ty=Tensor[(5, 5, 10), float64] */;
  %554 = %546.0;
  %555 = greater_equal(%551, %552) /* ty=Tensor[(5, 5, 10), bool] */;
  (%553, %554, %555)
}

def @func_1995() -> (Tensor[(4, 6, 10), int32],) {
  %556 = @func_1301() /* ty=Tensor[(4, 6, 10), int32] */;
  (%556,)
}

def @func_5885(%var_5879: Tensor[(2250), uint32]) -> Tensor[(2250), bool] {
  %557 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %558 = cast(%var_5879, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(1), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?), bool] */;
  equal(%560, %561) /* ty=Tensor[(2250), bool] */
}

def @func_6040() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), float64], Tensor[(8, 128), bool]) {
  %562 = @func_5938() /* ty=(Tensor[(15, 10, 15), int16],) */;
  %563 = %562.0;
  %564 = cast(%563, dtype="float64") /* ty=Tensor[(15, 10, 15), float64] */;
  %565 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %566 = asin(%564) /* ty=Tensor[(15, 10, 15), float64] */;
  %567 = @func_993() /* ty=Tensor[(8, 128), bool] */;
  (%565, %566, %567)
}

def @func_3842(%var_3816: Tensor[(2, 15, 11), float64]) -> (Tensor[(15, 10, 15), bool], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(2, 15, 11), float64]) {
  %568 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %569 = %568.1;
  %570 = cast(meta[relay.Constant][32] /* ty=Tensor[(15, 10, 15), int16] */, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %571 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
  %572 = cast(%569, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %573 = dyn.reshape(%570, %571, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %574 = @func_2090() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */;
  %575 = @func_1964() /* ty=Tensor[(2, 15, 11), float64] */;
  %576 = cast(%var_3816, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %580 = equal(%572, %573) /* ty=Tensor[(15, 10, 15), bool] */;
  %581 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %582 = %574.0;
  %583 = divide(%578, %579) /* ty=Tensor[(2, 15, 11), float64] */;
  (%580, %581, %582, %583)
}

def @func_6156() -> (Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64]) {
  %584 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %586 = reshape(%585, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %587 = @func_275(%586) /* ty=Tensor[(4, 16, 16), float64] */;
  (%584, %587)
}

def @func_2644(%var_2629: float64) -> (Tensor[(8, 128), float64], Tensor[(8, 128), bool], Tensor[(11, 8, 1), float64], float64, Tensor[(8, 128), uint32]) {
  %588 = @func_1537() /* ty=Tensor[(8, 128), float64] */;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %590 = cast(%var_2629, dtype="float64") /* ty=float64 */;
  %591 = reshape(%590, newshape=[]) /* ty=float64 */;
  %592 = @func_2222(%591) /* ty=(Tensor[(11, 8, 1), float64], Tensor[(2250), uint32], Tensor[(8, 128), uint64], Tensor[(1024), bool], Tensor[(2, 15, 11), float64]) */;
  %593 = @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */;
  %594 = exp(%589) /* ty=Tensor[(8, 128), float64] */;
  %595 = @func_993() /* ty=Tensor[(8, 128), bool] */;
  %596 = %592.0;
  %597 = %593.2;
  (%594, %595, %596, %var_2629, %597)
}

def @func_1503(%var_1477: Tensor[(2250), uint32]) -> (Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(13, 13, 13), int32], Tensor[(1, 2250), uint32], Tensor[(91, 10), float32]) {
  %598 = cast(%var_1477, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %599 = reshape(%598, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %600 = @func_583(%599) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %601 = cast(%var_1477, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %602 = cast(meta[relay.Constant][34] /* ty=Tensor[(13, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
  %603 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(13, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %606 = power(%604, %605) /* ty=Tensor[(13, 13, 13), float32] */;
  %607 = cast(meta[relay.Constant][33] /* ty=Tensor[(13, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %611 = cast(meta[relay.Constant][35] /* ty=Tensor[(91, 10), float32] */, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %612 = cast(meta[relay.Constant][35] /* ty=Tensor[(91, 10), float32] */, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
  %613 = %600.5;
  %614 = cast(%613, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %615 = reshape(%611, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %616 = reshape(%612, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %617 = reshape(%614, newshape=[1, 2250]) /* ty=Tensor[(1, 2250), uint32] */;
  %618 = @func_633(%615, %616, %617) /* ty=(Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) */;
  %619 = atan(%601) /* ty=Tensor[(2250), float32] */;
  %620 = bitwise_and(%609, %610) /* ty=Tensor[(13, 13, 13), int32] */;
  %621 = %618.2;
  (%613, %619, %620, %621, meta[relay.Constant][35] /* ty=Tensor[(91, 10), float32] */)
}

def @func_2420() -> (Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) {
  %622 = @func_2283() /* ty=Tensor[(8, 128), float64] */;
  %623 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %624 = %623.1;
  %625 = cast(%624, dtype="uint32") /* ty=Tensor[(4, 16, 16), uint32] */;
  %626 = shape_of(%622, dtype="int32") /* ty=Tensor[(2), int32] */;
  %627 = cast(%622, dtype="uint32") /* ty=Tensor[(8, 128), uint32] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %629 = cast(%624, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %630 = reshape(%629, newshape=[8, 128]) /* ty=Tensor[(8, 128), float64] */;
  %631 = @func_1466(%630) /* ty=(Tensor[(8, 128), uint32],) */;
  %632 = @func_1964() /* ty=Tensor[(2, 15, 11), float64] */;
  %633 = minimum(%627, %628) /* ty=Tensor[(8, 128), uint32] */;
  %634 = %631.0;
  (%632, %633, %634)
}

def @func_6202() -> (Tensor[(8, 128), float64],) {
  %635 = @func_6156() /* ty=(Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64]) */;
  %636 = %635.0;
  (%636,)
}

def @func_6341() -> Tensor[(8, 128), float64] {
  @func_2283() /* ty=Tensor[(8, 128), float64] */
}

def @func_1054() -> Tensor[(4, 16, 16), float64] {
  %637 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %638 = %637.1;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  rsqrt(%639) /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_2370(%var_2347: Tensor[(440), float32]) -> (Tensor[(2250), uint32], Tensor[(1024), bool], Tensor[(2250), uint32], Tensor[(440), float32], Tensor[(8, 128), float64]) {
  %640 = cast(meta[relay.Constant][36] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %641 = reshape(%640, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %642 = @func_275(%641) /* ty=Tensor[(4, 16, 16), float64] */;
  %643 = cast(%642, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %644 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(1024), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %645 = cast(meta[relay.Constant][36] /* ty=Tensor[(1024), float64] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?), bool] */;
  %647 = cast(%var_2347, dtype="float32") /* ty=Tensor[(440), float32] */;
  %648 = cast(%var_2347, dtype="float32") /* ty=Tensor[(440), float32] */;
  %649 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %650 = cast(%649, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %651 = cast(%642, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %652 = reshape(%647, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %653 = reshape(%648, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %654 = reshape(%650, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %655 = reshape(%651, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %656 = @func_842(%652, %653, %654, %655) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %657 = logical_and(%645, %646) /* ty=Tensor[(1024), bool] */;
  %658 = %656.2;
  %659 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  (%649, %657, %658, %var_2347, %659)
}

def @func_1368() -> (Tensor[(8, 128), float64],) {
  %660 = @func_993() /* ty=Tensor[(8, 128), bool] */;
  %661 = cast(%660, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %662 = rsqrt(%661) /* ty=Tensor[(8, 128), float64] */;
  (%662,)
}

def @func_993() -> Tensor[(8, 128), bool] {
  %663 = @func_971() /* ty=Tensor[(8, 128), float64] */;
  %664 = cast(meta[relay.Constant][37] /* ty=Tensor[(8, 128), float64] */, dtype="int8") /* ty=Tensor[(8, 128), int8] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(2), int32] */;
  %666 = cast(%663, dtype="int8") /* ty=Tensor[(8, 128), int8] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %668 = bitwise_xor(%666, %667) /* ty=Tensor[(8, 128), int8] */;
  %669 = cast(%668, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %670 = shape_of(%663, dtype="int32") /* ty=Tensor[(2), int32] */;
  %671 = cast(%663, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%671, %672) /* ty=Tensor[(8, 128), bool] */
}

def @func_1438(%var_1378: Tensor[(13, 2, 8), int32], %var_1379: Tensor[(13, 2, 8), int32], %var_1396: Tensor[(2250), float64]) -> (Tensor[(13, 2, 8), int32], Tensor[(3, 750), uint32], Tensor[(2250), uint32], Tensor[(8, 128), bool], Tensor[(2250), bool]) {
  %673 = cast(%var_1379, dtype="int32") /* ty=Tensor[(13, 2, 8), int32] */;
  %674 = shape_of(%var_1378, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%var_1378, dtype="int32") /* ty=Tensor[(13, 2, 8), int32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %677 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 750), uint32] */, dtype="uint32") /* ty=Tensor[(3, 750), uint32] */;
  %678 = reshape(%677, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %679 = @func_1343(%678) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */;
  %680 = %679.0;
  %681 = cast(%680, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %682 = rsqrt(%681) /* ty=Tensor[(2250), float64] */;
  %683 = cast(%var_1396, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %684 = shape_of(%682, dtype="int32") /* ty=Tensor[(1), int32] */;
  %685 = cast(%682, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?), float64] */;
  %687 = power(%685, %686) /* ty=Tensor[(2250), float64] */;
  %688 = cast(%680, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(1), int32] */;
  %690 = cast(%687, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?), bool] */;
  %692 = right_shift(%675, %676) /* ty=Tensor[(13, 2, 8), int32] */;
  %693 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %694 = @func_993() /* ty=Tensor[(8, 128), bool] */;
  %695 = logical_and(%690, %691) /* ty=Tensor[(2250), bool] */;
  (%692, meta[relay.Constant][38] /* ty=Tensor[(3, 750), uint32] */, %693, %694, %695)
}

def @func_4545() -> (Tensor[(4, 16, 16), float64], Tensor[(2250), uint32]) {
  %696 = @func_3997() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(4, 16, 16), float64], Tensor[(1024), float64]) */;
  %697 = @func_4090() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %698 = %696.1;
  %699 = %697.0;
  (%698, %699)
}

def @func_4867(%var_4864: uint64, %var_4865: Tensor[(490), uint64]) -> (Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(1024), float64], Tensor[(7, 10, 7), bool], uint64, Tensor[(490), uint64]) {
  %700 = @func_2184() /* ty=Tensor[(2, 15, 11), float64] */;
  %701 = cast(%700, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %702 = cast(meta[relay.Constant][39] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %703 = reshape(%702, newshape=[8, 128]) /* ty=Tensor[(8, 128), float64] */;
  %704 = @func_1466(%703) /* ty=(Tensor[(8, 128), uint32],) */;
  %705 = cast(%var_4864, dtype="uint64") /* ty=uint64 */;
  %706 = cast(%var_4865, dtype="uint64") /* ty=Tensor[(490), uint64] */;
  %707 = reshape(%705, newshape=[]) /* ty=uint64 */;
  %708 = reshape(%706, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), uint64] */;
  %709 = asinh(%701) /* ty=Tensor[(2, 15, 11), float64] */;
  %710 = %704.0;
  %711 = @func_3676(%707, %708) /* ty=Tensor[(7, 10, 7), bool] */;
  (%709, %710, meta[relay.Constant][39] /* ty=Tensor[(1024), float64] */, %711, %var_4864, %var_4865)
}

def @func_5927() -> Tensor[(15, 10, 15), int16] {
  %712 = @func_4292() /* ty=(Tensor[(15, 10, 15), int16],) */;
  %712.0
}

def @func_6421() -> (Tensor[(15, 10, 15), bool],) {
  %713 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %714 = %713.1;
  (%714,)
}

def @func_1911() -> (Tensor[(2, 15, 11), float64],) {
  %715 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %716 = %715.0;
  (%716,)
}

def @func_1301() -> Tensor[(4, 6, 10), int32] {
  %717 = cast(meta[relay.Constant][41] /* ty=Tensor[(4, 6, 10), int32] */, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
  %718 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(4, 6, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 6, 10), int32] */, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%719, %720) /* ty=Tensor[(4, 6, 10), int32] */
}

def @func_3108() -> (Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) {
  %721 = @func_2677() /* ty=(Tensor[(4, 6, 10), float32], Tensor[(4, 6, 10), bool]) */;
  %722 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %723 = %721.1;
  %724 = %722.0;
  (%723, %724)
}

def @func_5517(%var_5503: Tensor[(3, 12, 11), float64]) -> (Tensor[(3, 12, 11), bool], Tensor[(8, 128), float64]) {
  %725 = cast(%var_5503, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %726 = tan(%725) /* ty=Tensor[(3, 12, 11), float64] */;
  %727 = cast(%726, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
  %728 = shape_of(%var_5503, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%var_5503, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %731 = not_equal(%729, %730) /* ty=Tensor[(3, 12, 11), bool] */;
  %732 = @func_971() /* ty=Tensor[(8, 128), float64] */;
  (%731, %732)
}

def @func_3657() -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) {
  %733 = @func_3403() /* ty=(Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) */;
  %734 = @func_2328() /* ty=Tensor[(4, 6, 10), int32] */;
  %735 = cast(%734, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %736 = %733.4;
  %737 = sigmoid(%735) /* ty=Tensor[(4, 6, 10), float64] */;
  (%736, %737)
}

def @func_6321() -> Tensor[(8, 128), float64] {
  @func_5899() /* ty=Tensor[(8, 128), float64] */
}

def @func_763() -> (Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) {
  %738 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %739 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 128), float64] */, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %740 = reshape(%739, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %741 = %738.2;
  %742 = @func_275(%740) /* ty=Tensor[(4, 16, 16), float64] */;
  (%741, %742, meta[relay.Constant][42] /* ty=Tensor[(8, 128), float64] */)
}

def @func_6520(%var_6499: Tensor[(2250), float64]) -> (Tensor[(15, 10, 15), int16], Tensor[(15, 10, 15), int16], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(2250), float64]) {
  %743 = @func_4049() /* ty=(Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) */;
  %744 = @func_5938() /* ty=(Tensor[(15, 10, 15), int16],) */;
  %745 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %746 = @func_3403() /* ty=(Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) */;
  %747 = %746.3;
  %748 = cast(%747, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %749 = sin(%748) /* ty=Tensor[(2250), float64] */;
  %750 = cast(%var_6499, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %751 = shape_of(%749, dtype="int32") /* ty=Tensor[(1), int32] */;
  %752 = cast(%749, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %753 = dyn.reshape(%750, %751, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %754 = cast(%749, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %755 = %743.3;
  %756 = %744.0;
  %757 = %745.6;
  %758 = left_shift(%752, %753) /* ty=Tensor[(2250), uint32] */;
  %759 = cos(%754) /* ty=Tensor[(2250), float64] */;
  (%755, %756, %757, %758, %759)
}

def @func_4926(%var_4905: float32, %var_4906: Tensor[(6, 16, 15), float32], %var_4914: Tensor[(10, 44), float32], %var_4924: Tensor[(77, 15), int64]) -> (Tensor[(6, 16, 15), float32], Tensor[(1024), float64], Tensor[(1144), float64], Tensor[(10, 44), float32], Tensor[(15, 7, 11), float64], Tensor[(77, 15), int64]) {
  %760 = cast(%var_4905, dtype="float32") /* ty=float32 */;
  %761 = cast(%var_4906, dtype="float32") /* ty=Tensor[(6, 16, 15), float32] */;
  %762 = cast(meta[relay.Constant][43] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
  %763 = cast(%var_4914, dtype="float32") /* ty=Tensor[(10, 44), float32] */;
  %764 = reshape(%762, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %765 = reshape(%763, newshape=[5, 88]) /* ty=Tensor[(5, 88), float32] */;
  %766 = @func_2578(%764, %765) /* ty=(Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) */;
  %767 = cast(%var_4924, dtype="int64") /* ty=Tensor[(77, 15), int64] */;
  %768 = cast(%var_4924, dtype="int64") /* ty=Tensor[(77, 15), int64] */;
  %769 = reshape(%767, newshape=[15, 7, 11]) /* ty=Tensor[(15, 7, 11), int64] */;
  %770 = reshape(%768, newshape=[15, 7, 11]) /* ty=Tensor[(15, 7, 11), int64] */;
  %771 = @func_790(%769, %770) /* ty=(Tensor[(15, 7, 11), int64], Tensor[(15, 7, 11), float64]) */;
  %772 = power(%760, %761) /* ty=Tensor[(6, 16, 15), float32] */;
  %773 = %766.4;
  %774 = %771.1;
  (%772, %773, meta[relay.Constant][43] /* ty=Tensor[(1144), float64] */, %var_4914, %774, %var_4924)
}

def @func_1635(%var_1615: Tensor[(8, 128), bool]) -> (Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) {
  %775 = @func_971() /* ty=Tensor[(8, 128), float64] */;
  %776 = cast(%775, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %777 = reshape(%776, newshape=[8, 128]) /* ty=Tensor[(8, 128), float64] */;
  %778 = @func_1466(%777) /* ty=(Tensor[(8, 128), uint32],) */;
  %779 = %778.0;
  %780 = cast(%775, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(2), int32] */;
  %782 = cast(%779, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %784 = greater_equal(%782, %783) /* ty=Tensor[(8, 128), bool] */;
  %785 = cast(%var_1615, dtype="uint64") /* ty=Tensor[(8, 128), uint64] */;
  %786 = shape_of(%784, dtype="int32") /* ty=Tensor[(2), int32] */;
  %787 = cast(%784, dtype="uint64") /* ty=Tensor[(8, 128), uint64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %789 = cast(%var_1615, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %790 = bitwise_and(%787, %788) /* ty=Tensor[(8, 128), uint64] */;
  %791 = cosh(%789) /* ty=Tensor[(8, 128), float64] */;
  (%790, %791)
}

def @func_5667(%var_5581: Tensor[(5, 1, 8), uint8], %var_5592: Tensor[(5, 14, 8), uint8]) -> (Tensor[(2, 15, 11), float64], Tensor[(5, 14, 8), float64], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(5, 14, 8), int32]) {
  %792 = cast(meta[relay.Constant][44] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %793 = cast(%var_5581, dtype="uint8") /* ty=Tensor[(5, 1, 8), uint8] */;
  %794 = bitwise_xor(%792, %793) /* ty=Tensor[(5, 1, 8), uint8] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(5, 1, 8), float64] */;
  %796 = cast(%var_5592, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
  %797 = @func_5404() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), float64]) */;
  %798 = @func_4090() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %799 = @func_4219() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(4, 16, 16), float64]) */;
  %800 = cast(%var_5581, dtype="float64") /* ty=Tensor[(5, 1, 8), float64] */;
  %801 = log2(%800) /* ty=Tensor[(5, 1, 8), float64] */;
  %802 = cast(%var_5581, dtype="bool") /* ty=Tensor[(5, 1, 8), bool] */;
  %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %804 = cast(%801, dtype="bool") /* ty=Tensor[(5, 1, 8), bool] */;
  %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %806 = logical_and(%804, %805) /* ty=Tensor[(5, ?, 8), bool] */;
  %807 = cast(%806, dtype="int32") /* ty=Tensor[(5, ?, 8), int32] */;
  %808 = cast(%var_5592, dtype="int32") /* ty=Tensor[(5, 14, 8), int32] */;
  %809 = @func_4828() /* ty=Tensor[(2, 15, 11), float64] */;
  %810 = floor_mod(%795, %796) /* ty=Tensor[(5, 14, 8), float64] */;
  %811 = %797.1;
  %812 = %798.0;
  %813 = %799.1;
  %814 = multiply(%807, %808) /* ty=Tensor[(5, 14, 8), int32] */;
  (%809, %810, %811, %812, %813, %814)
}

def @main() -> (Tensor[(8, 6, 4), float32],) {
  %815 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 4), float64] */;
  %816 = erf(%815) /* ty=Tensor[(8, 6, 4), float64] */;
  %817 = cast(%816, dtype="float32") /* ty=Tensor[(8, 6, 4), float32] */;
  %818 = asinh(%817) /* ty=Tensor[(8, 6, 4), float32] */;
  (%818,)
}

def @func_275(%var_255: Tensor[(4, 16, 16), float64]) -> Tensor[(4, 16, 16), float64] {
  %819 = cast(%var_255, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  atanh(%819) /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_4219() -> (Tensor[(4, 16, 16), float64], Tensor[(4, 16, 16), float64]) {
  %820 = @func_2090() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */;
  %821 = %820.0;
  %822 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  (%821, %822)
}

def @func_4090() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) {
  %823 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %824 = cast(%823, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %825 = cast(%823, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %826 = reshape(%824, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %827 = reshape(%825, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %828 = @func_448(%826, %827) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %829 = %828.0;
  (%823, %829)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6406(%var_6386: int64, %var_6387: Tensor[(2, 12, 16), int64]) -> (Tensor[(2, 12, 16), int64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) {
  %0 = cast(%var_6386, dtype="int64") /* ty=int64 */;
  %1 = cast(%var_6387, dtype="int64") /* ty=Tensor[(2, 12, 16), int64] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 12, 16), int64] */, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %3 = shape_of(%var_6387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_6387, dtype="bool") /* ty=Tensor[(2, 12, 16), bool] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 12, 16), int64] */, dtype="float32") /* ty=Tensor[(2, 12, 16), float32] */;
  %7 = left_shift(%0, %1) /* ty=Tensor[(2, 12, 16), int64] */;
  %8 = logical_or(%4, %5) /* ty=Tensor[(2, 12, 16), bool] */;
  %9 = atanh(%6) /* ty=Tensor[(2, 12, 16), float32] */;
  (%7, %8, %9)
}

def @func_5487(%var_5485: Tensor[(2250), uint32]) -> (Tensor[(8, 128), float64], Tensor[(2250), bool], Tensor[(2250), uint32]) {
  @func_5484(%var_5485) /* ty=(Tensor[(8, 128), float64], Tensor[(2250), bool], Tensor[(2250), uint32]) */
}

def @func_6755() -> (Tensor[(1144, 1), float32], Tensor[(4, 6, 10), bool]) {
  @func_6753() /* ty=(Tensor[(1144, 1), float32], Tensor[(4, 6, 10), bool]) */
}

def @func_4272() -> (Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) {
  @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */
}

def @func_5855() -> Tensor[(8, 128), float64] {
  @func_5853() /* ty=Tensor[(8, 128), float64] */
}

def @func_1055() -> Tensor[(4, 16, 16), float64] {
  %13 = fn () -> Tensor[(4, 16, 16), float64] {
    %10 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
    %11 = %10.1;
    %12 = cast(%11, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    rsqrt(%12) /* ty=Tensor[(4, 16, 16), float64] */
  };
  %13() /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_2329() -> Tensor[(4, 6, 10), int32] {
  %15 = fn () -> Tensor[(4, 6, 10), int32] {
    %14 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
    %14.0
  };
  %15() /* ty=Tensor[(4, 6, 10), int32] */
}

def @func_5734() -> (Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) {
  %16 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %17 = %16.0;
  %18 = @func_3747() /* ty=Tensor[(2250), uint32] */;
  (%17, %18)
}

def @func_4931(%var_4927: float32, %var_4928: Tensor[(6, 16, 15), float32], %var_4929: Tensor[(10, 44), float32], %var_4930: Tensor[(77, 15), int64]) -> (Tensor[(6, 16, 15), float32], Tensor[(1024), float64], Tensor[(1144), float64], Tensor[(10, 44), float32], Tensor[(15, 7, 11), float64], Tensor[(77, 15), int64]) {
  %34 = fn (%var_4905: float32, %var_4906: Tensor[(6, 16, 15), float32], %var_4914: Tensor[(10, 44), float32], %var_4924: Tensor[(77, 15), int64]) -> (Tensor[(6, 16, 15), float32], Tensor[(1024), float64], Tensor[(1144), float64], Tensor[(10, 44), float32], Tensor[(15, 7, 11), float64], Tensor[(77, 15), int64]) {
    %19 = cast(%var_4905, dtype="float32") /* ty=float32 */;
    %20 = cast(%var_4906, dtype="float32") /* ty=Tensor[(6, 16, 15), float32] */;
    %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(1144), float64] */, dtype="float64") /* ty=Tensor[(1144), float64] */;
    %22 = cast(%var_4914, dtype="float32") /* ty=Tensor[(10, 44), float32] */;
    %23 = reshape(%21, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
    %24 = reshape(%22, newshape=[5, 88]) /* ty=Tensor[(5, 88), float32] */;
    %25 = @func_2578(%23, %24) /* ty=(Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) */;
    %26 = cast(%var_4924, dtype="int64") /* ty=Tensor[(77, 15), int64] */;
    %27 = cast(%var_4924, dtype="int64") /* ty=Tensor[(77, 15), int64] */;
    %28 = reshape(%26, newshape=[15, 7, 11]) /* ty=Tensor[(15, 7, 11), int64] */;
    %29 = reshape(%27, newshape=[15, 7, 11]) /* ty=Tensor[(15, 7, 11), int64] */;
    %30 = @func_790(%28, %29) /* ty=(Tensor[(15, 7, 11), int64], Tensor[(15, 7, 11), float64]) */;
    %31 = power(%19, %20) /* ty=Tensor[(6, 16, 15), float32] */;
    %32 = %25.4;
    %33 = %30.1;
    (%31, %32, meta[relay.Constant][1] /* ty=Tensor[(1144), float64] */, %var_4914, %33, %var_4924)
  };
  %34(%var_4927, %var_4928, %var_4929, %var_4930) /* ty=(Tensor[(6, 16, 15), float32], Tensor[(1024), float64], Tensor[(1144), float64], Tensor[(10, 44), float32], Tensor[(15, 7, 11), float64], Tensor[(77, 15), int64]) */
}

def @func_4091() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) {
  %42 = fn () -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) {
    %35 = @func_723() /* ty=Tensor[(2250), uint32] */;
    %36 = cast(%35, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %37 = cast(%35, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %38 = reshape(%36, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
    %39 = reshape(%37, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
    %40 = @func_448(%38, %39) /* ty=(Tensor[(15, 10, 15), bool],) */;
    %41 = %40.0;
    (%35, %41)
  };
  %42() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */
}

def @func_1345(%var_1344: Tensor[(2250), uint32]) -> (Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) {
  %52 = fn (%var_1327: Tensor[(2250), uint32]) -> (Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) {
    %43 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
    %44 = %43.0;
    %45 = cast(%var_1327, dtype="bool") /* ty=Tensor[(2250), bool] */;
    %46 = shape_of(%44, dtype="int32") /* ty=Tensor[(1), int32] */;
    %47 = cast(%44, dtype="bool") /* ty=Tensor[(2250), bool] */;
    %48 = dyn.reshape(%45, %46, newshape=[]) /* ty=Tensor[(?), bool] */;
    %49 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
    %50 = not_equal(%47, %48) /* ty=Tensor[(2250), bool] */;
    %51 = %49.1;
    (%50, %51)
  };
  %52(%var_1344) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */
}

def @func_2581(%var_2579: Tensor[(13, 11, 8), float64], %var_2580: Tensor[(5, 88), float32]) -> (Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) {
  %69 = fn (%var_2552: Tensor[(13, 11, 8), float64], %var_2567: Tensor[(5, 88), float32]) -> (Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) {
    %53 = cast(%var_2552, dtype="float64") /* ty=Tensor[(13, 11, 8), float64] */;
    %54 = cast(%var_2567, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
    %55 = cast(%var_2567, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
    %56 = cast(meta[relay.Constant][2] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %57 = cast(meta[relay.Constant][3] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
    %58 = reshape(%54, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
    %59 = reshape(%55, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
    %60 = reshape(%56, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %61 = reshape(%57, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
    %62 = @func_842(%58, %59, %60, %61) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
    %63 = cast(%var_2567, dtype="float32") /* ty=Tensor[(5, 88), float32] */;
    %64 = reshape(%63, newshape=[440]) /* ty=Tensor[(440), float32] */;
    %65 = @func_1813(%64) /* ty=(Tensor[(4, 16, 16), float32], Tensor[(15, 10, 15), bool], Tensor[(440), float32], Tensor[(2250), uint32], Tensor[(8, 128), float64]) */;
    %66 = log10(%53) /* ty=Tensor[(13, 11, 8), float64] */;
    %67 = %62.0;
    %68 = %65.3;
    (%66, %67, %var_2567, meta[relay.Constant][2] /* ty=Tensor[(2250), uint32] */, meta[relay.Constant][3] /* ty=Tensor[(1024), float64] */, %68)
  };
  %69(%var_2579, %var_2580) /* ty=(Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) */
}

def @func_4270() -> (Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) {
  %70 = @func_3657() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 256), float64] */, dtype="float64") /* ty=Tensor[(4, 256), float64] */;
  %72 = reshape(%71, newshape=[2, 512]) /* ty=Tensor[(2, 512), float64] */;
  %73 = @func_1268(%72) /* ty=(Tensor[(2, 512), float64], Tensor[(2250), float64]) */;
  %74 = cast(meta[relay.Constant][5] /* ty=Tensor[(1144, 1), float64] */, dtype="float64") /* ty=Tensor[(1144, 1), float64] */;
  %75 = cast(meta[relay.Constant][6] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
  %76 = reshape(%74, newshape=[13, 11, 8]) /* ty=Tensor[(13, 11, 8), float64] */;
  %77 = reshape(%75, newshape=[5, 88]) /* ty=Tensor[(5, 88), float32] */;
  %78 = @func_2578(%76, %77) /* ty=(Tensor[(13, 11, 8), float64], Tensor[(4, 10, 11), bool], Tensor[(5, 88), float32], Tensor[(2250), uint32], Tensor[(1024), float64], Tensor[(2250), uint32]) */;
  %79 = @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */;
  %80 = %70.0;
  %81 = %73.1;
  %82 = %78.3;
  %83 = %79.2;
  (%80, %81, meta[relay.Constant][4] /* ty=Tensor[(4, 256), float64] */, %82, meta[relay.Constant][5] /* ty=Tensor[(1144, 1), float64] */, meta[relay.Constant][6] /* ty=Tensor[(440), float32] */, %83)
}

def @func_4871(%var_4869: uint64, %var_4870: Tensor[(490), uint64]) -> (Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(1024), float64], Tensor[(7, 10, 7), bool], uint64, Tensor[(490), uint64]) {
  @func_4867(%var_4869, %var_4870) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(1024), float64], Tensor[(7, 10, 7), bool], uint64, Tensor[(490), uint64]) */
}

def @func_6342() -> Tensor[(8, 128), float64] {
  %84 = fn () -> Tensor[(8, 128), float64] {
    @func_2283() /* ty=Tensor[(8, 128), float64] */
  };
  %84() /* ty=Tensor[(8, 128), float64] */
}

def @func_1815(%var_1814: Tensor[(440), float32]) -> (Tensor[(4, 16, 16), float32], Tensor[(15, 10, 15), bool], Tensor[(440), float32], Tensor[(2250), uint32], Tensor[(8, 128), float64]) {
  %111 = fn (%var_1797: Tensor[(440), float32]) -> (Tensor[(4, 16, 16), float32], Tensor[(15, 10, 15), bool], Tensor[(440), float32], Tensor[(2250), uint32], Tensor[(8, 128), float64]) {
    %85 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
    %86 = cast(%85, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %87 = tan(%86) /* ty=Tensor[(4, 16, 16), float64] */;
    %88 = cast(%85, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %89 = reshape(%88, newshape=[2, 512]) /* ty=Tensor[(2, 512), float64] */;
    %90 = @func_1268(%89) /* ty=(Tensor[(2, 512), float64], Tensor[(2250), float64]) */;
    %91 = %90.0;
    %92 = cast(%91, dtype="float32") /* ty=Tensor[(2, 512), float32] */;
    %93 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%87, dtype="float32") /* ty=Tensor[(4, 16, 16), float32] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %96 = cast(%var_1797, dtype="float32") /* ty=Tensor[(440), float32] */;
    %97 = cast(%var_1797, dtype="float32") /* ty=Tensor[(440), float32] */;
    %98 = cast(meta[relay.Constant][7] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %99 = mod(%94, %95) /* ty=Tensor[(4, 16, 16), float32] */;
    %100 = cast(%99, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %101 = reshape(%96, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
    %102 = reshape(%97, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
    %103 = reshape(%98, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %104 = reshape(%100, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
    %105 = @func_842(%101, %102, %103, %104) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
    %106 = cast(%85, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
    %107 = reshape(%106, newshape=[8, 128]) /* ty=Tensor[(8, 128), bool] */;
    %108 = @func_1635(%107) /* ty=(Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) */;
    %109 = %105.1;
    %110 = %108.1;
    (%99, %109, %var_1797, meta[relay.Constant][7] /* ty=Tensor[(2250), uint32] */, %110)
  };
  %111(%var_1814) /* ty=(Tensor[(4, 16, 16), float32], Tensor[(15, 10, 15), bool], Tensor[(440), float32], Tensor[(2250), uint32], Tensor[(8, 128), float64]) */
}

def @func_4748(%var_4746: Tensor[(15, 2, 2), float32]) -> (Tensor[(2, 15, 11), float64], Tensor[(60), float32], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32], Tensor[(15, 10, 15), float64]) {
  @func_4745(%var_4746) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(60), float32], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32], Tensor[(15, 10, 15), float64]) */
}

def @func_5671(%var_5669: Tensor[(5, 1, 8), uint8], %var_5670: Tensor[(5, 14, 8), uint8]) -> (Tensor[(2, 15, 11), float64], Tensor[(5, 14, 8), float64], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(5, 14, 8), int32]) {
  @func_5667(%var_5669, %var_5670) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(5, 14, 8), float64], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(5, 14, 8), int32]) */
}

def @func_4632(%var_4631: Tensor[(60), float32]) -> (Tensor[(2, 6, 13), float64], Tensor[(15, 2, 2), float32], Tensor[(60), float32], Tensor[(2, 15, 11), float64]) {
  %122 = fn (%var_4597: Tensor[(60), float32]) -> (Tensor[(2, 6, 13), float64], Tensor[(15, 2, 2), float32], Tensor[(60), float32], Tensor[(2, 15, 11), float64]) {
    %112 = @func_4049() /* ty=(Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) */;
    %113 = cast(%var_4597, dtype="float32") /* ty=Tensor[(60), float32] */;
    %114 = cast(%var_4597, dtype="float32") /* ty=Tensor[(60), float32] */;
    %115 = reshape(%113, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
    %116 = reshape(%114, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
    %117 = @func_3081(%115, %116) /* ty=(Tensor[(15, 2, 2), float32],) */;
    %118 = @func_3108() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */;
    %119 = %112.1;
    %120 = %117.0;
    %121 = %118.1;
    (%119, %120, %var_4597, %121)
  };
  %122(%var_4631) /* ty=(Tensor[(2, 6, 13), float64], Tensor[(15, 2, 2), float32], Tensor[(60), float32], Tensor[(2, 15, 11), float64]) */
}

def @func_971() -> Tensor[(8, 128), float64] {
  %123 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %123.2
}

def @func_3081(%var_3076: Tensor[(15, 2, 2), float32], %var_3077: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float32],) {
  %124 = cast(%var_3077, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %125 = shape_of(%var_3076, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_3076, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %128 = power(%126, %127) /* ty=Tensor[(15, 2, 2), float32] */;
  (%128,)
}

def @func_5030() -> (Tensor[(8, 128), float64],) {
  %131 = fn () -> (Tensor[(8, 128), float64],) {
    %129 = @func_1368() /* ty=(Tensor[(8, 128), float64],) */;
    %130 = %129.0;
    (%130,)
  };
  %131() /* ty=(Tensor[(8, 128), float64],) */
}

def @func_2455(%var_2442: Tensor[(5, 5, 10), float32]) -> (Tensor[(5, 5, 10), float64], Tensor[(4, 6, 10), int32], Tensor[(5, 5, 10), bool]) {
  %132 = cast(meta[relay.Constant][9] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %133 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(5, 5, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(5, 5, 10), float64] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %136 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 5, 10), float64] */, dtype="float32") /* ty=Tensor[(5, 5, 10), float32] */;
  %138 = cosh(%137) /* ty=Tensor[(5, 5, 10), float32] */;
  %139 = cast(%var_2442, dtype="bool") /* ty=Tensor[(5, 5, 10), bool] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="bool") /* ty=Tensor[(5, 5, 10), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %143 = minimum(%134, %135) /* ty=Tensor[(5, 5, 10), float64] */;
  %144 = %136.0;
  %145 = greater_equal(%141, %142) /* ty=Tensor[(5, 5, 10), bool] */;
  (%143, %144, %145)
}

def @func_6523(%var_6521: Tensor[(2250), float64]) -> (Tensor[(15, 10, 15), int16], Tensor[(15, 10, 15), int16], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(2250), float64]) {
  @func_6520(%var_6521) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(15, 10, 15), int16], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(2250), float64]) */
}

def @func_6170() -> (Tensor[(4, 6, 10), int32], Tensor[(8, 128), float64]) {
  %149 = fn () -> (Tensor[(4, 6, 10), int32], Tensor[(8, 128), float64]) {
    %146 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
    %147 = %146.0;
    %148 = @func_5853() /* ty=Tensor[(8, 128), float64] */;
    (%147, %148)
  };
  %149() /* ty=(Tensor[(4, 6, 10), int32], Tensor[(8, 128), float64]) */
}

def @func_5326() -> Tensor[(2, 15, 11), float64] {
  %151 = fn () -> Tensor[(2, 15, 11), float64] {
    %150 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
    %150.0
  };
  %151() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_848(%var_844: Tensor[(4, 10, 11), float32], %var_845: Tensor[(4, 10, 11), float32], %var_846: Tensor[(2250), uint32], %var_847: Tensor[(1024), float64]) -> (Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) {
  @func_842(%var_844, %var_845, %var_846, %var_847) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */
}

def @func_1442(%var_1439: Tensor[(13, 2, 8), int32], %var_1440: Tensor[(13, 2, 8), int32], %var_1441: Tensor[(2250), float64]) -> (Tensor[(13, 2, 8), int32], Tensor[(3, 750), uint32], Tensor[(2250), uint32], Tensor[(8, 128), bool], Tensor[(2250), bool]) {
  %175 = fn (%var_1378: Tensor[(13, 2, 8), int32], %var_1379: Tensor[(13, 2, 8), int32], %var_1396: Tensor[(2250), float64]) -> (Tensor[(13, 2, 8), int32], Tensor[(3, 750), uint32], Tensor[(2250), uint32], Tensor[(8, 128), bool], Tensor[(2250), bool]) {
    %152 = cast(%var_1379, dtype="int32") /* ty=Tensor[(13, 2, 8), int32] */;
    %153 = shape_of(%var_1378, dtype="int32") /* ty=Tensor[(3), int32] */;
    %154 = cast(%var_1378, dtype="int32") /* ty=Tensor[(13, 2, 8), int32] */;
    %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %156 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 750), uint32] */, dtype="uint32") /* ty=Tensor[(3, 750), uint32] */;
    %157 = reshape(%156, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %158 = @func_1343(%157) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */;
    %159 = %158.0;
    %160 = cast(%159, dtype="float64") /* ty=Tensor[(2250), float64] */;
    %161 = rsqrt(%160) /* ty=Tensor[(2250), float64] */;
    %162 = cast(%var_1396, dtype="float64") /* ty=Tensor[(2250), float64] */;
    %163 = shape_of(%161, dtype="int32") /* ty=Tensor[(1), int32] */;
    %164 = cast(%161, dtype="float64") /* ty=Tensor[(2250), float64] */;
    %165 = dyn.reshape(%162, %163, newshape=[]) /* ty=Tensor[(?), float64] */;
    %166 = power(%164, %165) /* ty=Tensor[(2250), float64] */;
    %167 = cast(%159, dtype="bool") /* ty=Tensor[(2250), bool] */;
    %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(1), int32] */;
    %169 = cast(%166, dtype="bool") /* ty=Tensor[(2250), bool] */;
    %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?), bool] */;
    %171 = right_shift(%154, %155) /* ty=Tensor[(13, 2, 8), int32] */;
    %172 = @func_723() /* ty=Tensor[(2250), uint32] */;
    %173 = @func_993() /* ty=Tensor[(8, 128), bool] */;
    %174 = logical_and(%169, %170) /* ty=Tensor[(2250), bool] */;
    (%171, meta[relay.Constant][10] /* ty=Tensor[(3, 750), uint32] */, %172, %173, %174)
  };
  %175(%var_1439, %var_1440, %var_1441) /* ty=(Tensor[(13, 2, 8), int32], Tensor[(3, 750), uint32], Tensor[(2250), uint32], Tensor[(8, 128), bool], Tensor[(2250), bool]) */
}

def @func_6586(%var_6584: Tensor[(15, 8, 2), int32], %var_6585: Tensor[(15, 8, 12), int32]) -> (Tensor[(15, 8, 1), int32], Tensor[(2, 15, 11), float64], Tensor[(15, 8, 2), bool], Tensor[(15, 8, 12), float64]) {
  %186 = fn (%var_6569: Tensor[(15, 8, 2), int32], %var_6574: Tensor[(15, 8, 12), int32]) -> (Tensor[(15, 8, 1), int32], Tensor[(2, 15, 11), float64], Tensor[(15, 8, 2), bool], Tensor[(15, 8, 12), float64]) {
    %176 = cast(10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 8, 1), int32] */, dtype="int32") /* ty=Tensor[(15, 8, 1), int32] */;
    %178 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 8, 1), int32] */, dtype="bool") /* ty=Tensor[(15, 8, 1), bool] */;
    %179 = cast(%var_6569, dtype="bool") /* ty=Tensor[(15, 8, 2), bool] */;
    %180 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 8, 1), int32] */, dtype="float64") /* ty=Tensor[(15, 8, 1), float64] */;
    %181 = cast(%var_6574, dtype="float64") /* ty=Tensor[(15, 8, 12), float64] */;
    %182 = bitwise_and(%176, %177) /* ty=Tensor[(15, 8, 1), int32] */;
    %183 = @func_2184() /* ty=Tensor[(2, 15, 11), float64] */;
    %184 = greater(%178, %179) /* ty=Tensor[(15, 8, 2), bool] */;
    %185 = floor_divide(%180, %181) /* ty=Tensor[(15, 8, 12), float64] */;
    (%182, %183, %184, %185)
  };
  %186(%var_6584, %var_6585) /* ty=(Tensor[(15, 8, 1), int32], Tensor[(2, 15, 11), float64], Tensor[(15, 8, 2), bool], Tensor[(15, 8, 12), float64]) */
}

def @func_1964() -> Tensor[(2, 15, 11), float64] {
  %187 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %187.0
}

def @func_794(%var_792: Tensor[(15, 7, 11), int64], %var_793: Tensor[(15, 7, 11), int64]) -> (Tensor[(15, 7, 11), int64], Tensor[(15, 7, 11), float64]) {
  @func_790(%var_792, %var_793) /* ty=(Tensor[(15, 7, 11), int64], Tensor[(15, 7, 11), float64]) */
}

def @func_6203() -> (Tensor[(8, 128), float64],) {
  %190 = fn () -> (Tensor[(8, 128), float64],) {
    %188 = @func_6156() /* ty=(Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64]) */;
    %189 = %188.0;
    (%189,)
  };
  %190() /* ty=(Tensor[(8, 128), float64],) */
}

def @func_2646(%var_2645: float64) -> (Tensor[(8, 128), float64], Tensor[(8, 128), bool], Tensor[(11, 8, 1), float64], float64, Tensor[(8, 128), uint32]) {
  %201 = fn (%var_2629: float64) -> (Tensor[(8, 128), float64], Tensor[(8, 128), bool], Tensor[(11, 8, 1), float64], float64, Tensor[(8, 128), uint32]) {
    %191 = @func_1537() /* ty=Tensor[(8, 128), float64] */;
    %192 = cast(%191, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
    %193 = cast(%var_2629, dtype="float64") /* ty=float64 */;
    %194 = reshape(%193, newshape=[]) /* ty=float64 */;
    %195 = @func_2222(%194) /* ty=(Tensor[(11, 8, 1), float64], Tensor[(2250), uint32], Tensor[(8, 128), uint64], Tensor[(1024), bool], Tensor[(2, 15, 11), float64]) */;
    %196 = @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */;
    %197 = exp(%192) /* ty=Tensor[(8, 128), float64] */;
    %198 = @func_993() /* ty=Tensor[(8, 128), bool] */;
    %199 = %195.0;
    %200 = %196.2;
    (%197, %198, %199, %var_2629, %200)
  };
  %201(%var_2645) /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), bool], Tensor[(11, 8, 1), float64], float64, Tensor[(8, 128), uint32]) */
}

def @func_5861() -> Tensor[(2, 15, 11), float64] {
  @func_5325() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_842(%var_814: Tensor[(4, 10, 11), float32], %var_815: Tensor[(4, 10, 11), float32], %var_821: Tensor[(2250), uint32], %var_835: Tensor[(1024), float64]) -> (Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) {
  %202 = cast(%var_815, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %203 = shape_of(%var_814, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_814, dtype="bool") /* ty=Tensor[(4, 10, 11), bool] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %207 = cast(meta[relay.Constant][12] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %208 = cast(%var_821, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %209 = reshape(%206, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %210 = reshape(%207, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
  %211 = reshape(%208, newshape=[1, 2250]) /* ty=Tensor[(1, 2250), uint32] */;
  %212 = @func_633(%209, %210, %211) /* ty=(Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) */;
  %213 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %214 = cast(%var_835, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %215 = reshape(%214, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %216 = cast(meta[relay.Constant][12] /* ty=Tensor[(455, 2), float32] */, dtype="float32") /* ty=Tensor[(455, 2), float32] */;
  %217 = greater_equal(%204, %205) /* ty=Tensor[(4, 10, 11), bool] */;
  %218 = %212.1;
  %219 = %213.1;
  %220 = @func_275(%215) /* ty=Tensor[(4, 16, 16), float64] */;
  %221 = acos(%216) /* ty=Tensor[(455, 2), float32] */;
  (%217, %218, %var_821, %219, %220, %var_835, %221)
}

def @func_5120(%var_5083: Tensor[(8, 128), uint32], %var_5091: Tensor[(2250), uint32], %var_5095: Tensor[(110, 4), float32], %var_5114: Tensor[(250), float32]) -> (Tensor[(8, 128), bool], Tensor[(2250), uint32], Tensor[(2250), uint32], Tensor[(110, 4), bool], Tensor[(5, 5, 10), bool], Tensor[(250), float32]) {
  %222 = @func_2905() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) */;
  %223 = %222.1;
  %224 = cast(%var_5083, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(2), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %228 = cast(meta[relay.Constant][13] /* ty=Tensor[(110, 4), float32] */, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %229 = cast(meta[relay.Constant][13] /* ty=Tensor[(110, 4), float32] */, dtype="float32") /* ty=Tensor[(110, 4), float32] */;
  %230 = cast(%var_5091, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %231 = cast(%223, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %232 = reshape(%228, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %233 = reshape(%229, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %234 = reshape(%230, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %235 = reshape(%231, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %236 = @func_842(%232, %233, %234, %235) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %237 = cast(%var_5095, dtype="bool") /* ty=Tensor[(110, 4), bool] */;
  %238 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(110, 4), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %239 = cast(meta[relay.Constant][13] /* ty=Tensor[(110, 4), float32] */, dtype="bool") /* ty=Tensor[(110, 4), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %241 = cast(%var_5114, dtype="float32") /* ty=Tensor[(250), float32] */;
  %242 = reshape(%241, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), float32] */;
  %243 = @func_2455(%242) /* ty=(Tensor[(5, 5, 10), float64], Tensor[(4, 6, 10), int32], Tensor[(5, 5, 10), bool]) */;
  %244 = less(%226, %227) /* ty=Tensor[(8, 128), bool] */;
  %245 = %236.2;
  %246 = equal(%239, %240) /* ty=Tensor[(110, 4), bool] */;
  %247 = %243.2;
  (%244, %245, %var_5091, %246, %247, %var_5114)
}

def @func_1468(%var_1467: Tensor[(8, 128), float64]) -> (Tensor[(8, 128), uint32],) {
  %255 = fn (%var_1454: Tensor[(8, 128), float64]) -> (Tensor[(8, 128), uint32],) {
    %248 = @func_1368() /* ty=(Tensor[(8, 128), float64],) */;
    %249 = %248.0;
    %250 = cast(%var_1454, dtype="uint32") /* ty=Tensor[(8, 128), uint32] */;
    %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(2), int32] */;
    %252 = cast(%249, dtype="uint32") /* ty=Tensor[(8, 128), uint32] */;
    %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %254 = logical_xor(%252, %253) /* ty=Tensor[(8, 128), uint32] */;
    (%254,)
  };
  %255(%var_1467) /* ty=(Tensor[(8, 128), uint32],) */
}

def @func_586(%var_584: Tensor[(2250), uint32]) -> (Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) {
  @func_583(%var_584) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */
}

def @func_6421() -> (Tensor[(15, 10, 15), bool],) {
  %256 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %257 = %256.1;
  (%257,)
}

def @func_1635(%var_1615: Tensor[(8, 128), bool]) -> (Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) {
  %258 = @func_971() /* ty=Tensor[(8, 128), float64] */;
  %259 = cast(%258, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %260 = reshape(%259, newshape=[8, 128]) /* ty=Tensor[(8, 128), float64] */;
  %261 = @func_1466(%260) /* ty=(Tensor[(8, 128), uint32],) */;
  %262 = %261.0;
  %263 = cast(%258, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %264 = shape_of(%262, dtype="int32") /* ty=Tensor[(2), int32] */;
  %265 = cast(%262, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %267 = greater_equal(%265, %266) /* ty=Tensor[(8, 128), bool] */;
  %268 = cast(%var_1615, dtype="uint64") /* ty=Tensor[(8, 128), uint64] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(2), int32] */;
  %270 = cast(%267, dtype="uint64") /* ty=Tensor[(8, 128), uint64] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %272 = cast(%var_1615, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %273 = bitwise_and(%270, %271) /* ty=Tensor[(8, 128), uint64] */;
  %274 = cosh(%272) /* ty=Tensor[(8, 128), float64] */;
  (%273, %274)
}

def @func_4049() -> (Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) {
  %275 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(2, 6, 13), float64] */;
  %277 = @func_2905() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) */;
  %278 = cos(%275) /* ty=Tensor[(2, 6, 13), float64] */;
  %279 = asinh(%276) /* ty=Tensor[(2, 6, 13), float64] */;
  %280 = %277.1;
  %281 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
  (%278, %279, %280, %281)
}

def @func_5683() -> Tensor[(8, 128), bool] {
  %282 = fn () -> Tensor[(8, 128), bool] {
    @func_3894() /* ty=Tensor[(8, 128), bool] */
  };
  %282() /* ty=Tensor[(8, 128), bool] */
}

def @func_2285() -> Tensor[(8, 128), float64] {
  @func_2283() /* ty=Tensor[(8, 128), float64] */
}

def @func_973() -> Tensor[(8, 128), float64] {
  @func_971() /* ty=Tensor[(8, 128), float64] */
}

def @func_2838() -> (Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) {
  @func_2836() /* ty=(Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) */
}

def @func_2420() -> (Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) {
  %283 = @func_2283() /* ty=Tensor[(8, 128), float64] */;
  %284 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %285 = %284.1;
  %286 = cast(%285, dtype="uint32") /* ty=Tensor[(4, 16, 16), uint32] */;
  %287 = shape_of(%283, dtype="int32") /* ty=Tensor[(2), int32] */;
  %288 = cast(%283, dtype="uint32") /* ty=Tensor[(8, 128), uint32] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %290 = cast(%285, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %291 = reshape(%290, newshape=[8, 128]) /* ty=Tensor[(8, 128), float64] */;
  %292 = @func_1466(%291) /* ty=(Tensor[(8, 128), uint32],) */;
  %293 = @func_1964() /* ty=Tensor[(2, 15, 11), float64] */;
  %294 = minimum(%288, %289) /* ty=Tensor[(8, 128), uint32] */;
  %295 = %292.0;
  (%293, %294, %295)
}

def @func_5406() -> (Tensor[(8, 128), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), float64]) {
  @func_5404() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), float64]) */
}

def @func_2030() -> Tensor[(15, 10, 15), int16] {
  @func_2028() /* ty=Tensor[(15, 10, 15), int16] */
}

def @func_5484(%var_5478: Tensor[(2250), uint32]) -> (Tensor[(8, 128), float64], Tensor[(2250), bool], Tensor[(2250), uint32]) {
  %296 = cast(%var_5478, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %297 = reshape(%296, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %298 = @func_1343(%297) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */;
  %299 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %300 = %298.0;
  (%299, %300, %var_5478)
}

def @func_5126(%var_5122: Tensor[(8, 128), uint32], %var_5123: Tensor[(2250), uint32], %var_5124: Tensor[(110, 4), float32], %var_5125: Tensor[(250), float32]) -> (Tensor[(8, 128), bool], Tensor[(2250), uint32], Tensor[(2250), uint32], Tensor[(110, 4), bool], Tensor[(5, 5, 10), bool], Tensor[(250), float32]) {
  @func_5120(%var_5122, %var_5123, %var_5124, %var_5125) /* ty=(Tensor[(8, 128), bool], Tensor[(2250), uint32], Tensor[(2250), uint32], Tensor[(110, 4), bool], Tensor[(5, 5, 10), bool], Tensor[(250), float32]) */
}

def @func_4546() -> (Tensor[(4, 16, 16), float64], Tensor[(2250), uint32]) {
  %305 = fn () -> (Tensor[(4, 16, 16), float64], Tensor[(2250), uint32]) {
    %301 = @func_3997() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(4, 16, 16), float64], Tensor[(1024), float64]) */;
    %302 = @func_4090() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
    %303 = %301.1;
    %304 = %302.0;
    (%303, %304)
  };
  %305() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(2250), uint32]) */
}

def @func_1369() -> (Tensor[(8, 128), float64],) {
  %309 = fn () -> (Tensor[(8, 128), float64],) {
    %306 = @func_993() /* ty=Tensor[(8, 128), bool] */;
    %307 = cast(%306, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
    %308 = rsqrt(%307) /* ty=Tensor[(8, 128), float64] */;
    (%308,)
  };
  %309() /* ty=(Tensor[(8, 128), float64],) */
}

def @func_5174(%var_5136: Tensor[(13, 10, 1), float32]) -> (Tensor[(15, 10, 15), float64], Tensor[(13, 10, ?), float64], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(330), float64]) {
  %310 = @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */;
  %311 = cast(%var_5136, dtype="float32") /* ty=Tensor[(13, 10, 1), float32] */;
  %312 = asinh(%311) /* ty=Tensor[(13, 10, 1), float32] */;
  %313 = cast(%var_5136, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %317 = divide(%315, %316) /* ty=Tensor[(13, 10, ?), float64] */;
  %318 = cast(%317, dtype="float64") /* ty=Tensor[(13, 10, ?), float64] */;
  %319 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %320 = cast(%312, dtype="float64") /* ty=Tensor[(13, 10, 1), float64] */;
  %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %322 = cast(meta[relay.Constant][15] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %323 = reshape(%322, newshape=[2, 15, 11]) /* ty=Tensor[(2, 15, 11), float64] */;
  %324 = @func_3842(%323) /* ty=(Tensor[(15, 10, 15), bool], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(2, 15, 11), float64]) */;
  %325 = %310.0;
  %326 = floor_mod(%320, %321) /* ty=Tensor[(13, 10, ?), float64] */;
  %327 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  %328 = %324.2;
  (%325, %326, %327, %328, meta[relay.Constant][15] /* ty=Tensor[(330), float64] */)
}

def @func_6321() -> Tensor[(8, 128), float64] {
  @func_5899() /* ty=Tensor[(8, 128), float64] */
}

def @func_1268(%var_1239: Tensor[(2, 512), float64]) -> (Tensor[(2, 512), float64], Tensor[(2250), float64]) {
  %329 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %330 = %329.2;
  %331 = cast(%330, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %332 = reshape(%331, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %333 = @func_583(%332) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %334 = %333.2;
  %335 = cast(%var_1239, dtype="float64") /* ty=Tensor[(2, 512), float64] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(2), int32] */;
  %337 = cast(%334, dtype="float64") /* ty=Tensor[(2, 512), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %339 = cast(%330, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %340 = log(%339) /* ty=Tensor[(2250), float32] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %342 = log2(%341) /* ty=Tensor[(2250), float64] */;
  %343 = cast(%330, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(1), int32] */;
  %345 = cast(%342, dtype="float32") /* ty=Tensor[(2250), float32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?), float32] */;
  %347 = multiply(%345, %346) /* ty=Tensor[(2250), float32] */;
  %348 = cast(%347, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %349 = shape_of(%340, dtype="int32") /* ty=Tensor[(1), int32] */;
  %350 = cast(%340, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %351 = dyn.reshape(%348, %349, newshape=[]) /* ty=Tensor[(?), float64] */;
  %352 = floor_divide(%337, %338) /* ty=Tensor[(2, 512), float64] */;
  %353 = floor_divide(%350, %351) /* ty=Tensor[(2250), float64] */;
  (%352, %353)
}

def @func_3894() -> Tensor[(8, 128), bool] {
  @func_993() /* ty=Tensor[(8, 128), bool] */
}

def @func_3085(%var_3083: Tensor[(15, 2, 2), float32], %var_3084: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float32],) {
  @func_3081(%var_3083, %var_3084) /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_4765() -> (Tensor[(4, 6, 10), bool],) {
  %356 = fn () -> (Tensor[(4, 6, 10), bool],) {
    %354 = @func_3108() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */;
    %355 = %354.0;
    (%355,)
  };
  %356() /* ty=(Tensor[(4, 6, 10), bool],) */
}

def @func_4142(%var_4131: Tensor[(8, 128), bool]) -> Tensor[(8, 128), float32] {
  %357 = @func_993() /* ty=Tensor[(8, 128), bool] */;
  %358 = cast(%var_4131, dtype="float32") /* ty=Tensor[(8, 128), float32] */;
  %359 = shape_of(%357, dtype="int32") /* ty=Tensor[(2), int32] */;
  %360 = cast(%357, dtype="float32") /* ty=Tensor[(8, 128), float32] */;
  %361 = dyn.reshape(%358, %359, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  floor_divide(%360, %361) /* ty=Tensor[(8, 128), float32] */
}

def @func_2373(%var_2371: Tensor[(440), float32]) -> (Tensor[(2250), uint32], Tensor[(1024), bool], Tensor[(2250), uint32], Tensor[(440), float32], Tensor[(8, 128), float64]) {
  @func_2370(%var_2371) /* ty=(Tensor[(2250), uint32], Tensor[(1024), bool], Tensor[(2250), uint32], Tensor[(440), float32], Tensor[(8, 128), float64]) */
}

def @func_4221() -> (Tensor[(4, 16, 16), float64], Tensor[(4, 16, 16), float64]) {
  @func_4219() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(4, 16, 16), float64]) */
}

def @func_6365() -> Tensor[(2250), uint32] {
  @func_723() /* ty=Tensor[(2250), uint32] */
}

def @func_638(%var_635: Tensor[(7, 10, 13), float32], %var_636: Tensor[(7, 10, 13), float32], %var_637: Tensor[(1, 2250), uint32]) -> (Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) {
  @func_633(%var_635, %var_636, %var_637) /* ty=(Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) */
}

def @func_889() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) {
  %362 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %365 = cast(%363, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %366 = reshape(%364, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %367 = reshape(%365, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %368 = @func_448(%366, %367) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %369 = %368.0;
  (%363, %369)
}

def @func_2765(%var_2759: Tensor[(2250), uint32]) -> (Tensor[(8, 128), uint8], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) {
  %370 = @func_2283() /* ty=Tensor[(8, 128), float64] */;
  %371 = @func_2090() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */;
  %372 = %371.2;
  %373 = cast(%372, dtype="uint8") /* ty=Tensor[(4, 16, 16), uint8] */;
  %374 = shape_of(%370, dtype="int32") /* ty=Tensor[(2), int32] */;
  %375 = cast(%370, dtype="uint8") /* ty=Tensor[(8, 128), uint8] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %377 = cast(%var_2759, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %378 = cast(%var_2759, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %379 = reshape(%377, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %380 = reshape(%378, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %381 = @func_448(%379, %380) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %382 = left_shift(%375, %376) /* ty=Tensor[(8, 128), uint8] */;
  %383 = %381.0;
  (%382, %383, %var_2759)
}

def @func_3109() -> (Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) {
  %388 = fn () -> (Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) {
    %384 = @func_2677() /* ty=(Tensor[(4, 6, 10), float32], Tensor[(4, 6, 10), bool]) */;
    %385 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
    %386 = %384.1;
    %387 = %385.0;
    (%386, %387)
  };
  %388() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */
}

def @func_2836() -> (Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) {
  %389 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %390 = @func_2328() /* ty=Tensor[(4, 6, 10), int32] */;
  %391 = %389.0;
  (%390, %391)
}

def @func_633(%var_619: Tensor[(7, 10, 13), float32], %var_620: Tensor[(7, 10, 13), float32], %var_629: Tensor[(1, 2250), uint32]) -> (Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) {
  %392 = cast(%var_620, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %393 = shape_of(%var_619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%var_619, dtype="float32") /* ty=Tensor[(7, 10, 13), float32] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %396 = cast(%var_629, dtype="uint32") /* ty=Tensor[(1, 2250), uint32] */;
  %397 = reshape(%396, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %398 = @func_583(%397) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
  %399 = power(%394, %395) /* ty=Tensor[(7, 10, 13), float32] */;
  %400 = %398.3;
  (%399, %400, %var_629)
}

def @func_2222(%var_2189: float64) -> (Tensor[(11, 8, 1), float64], Tensor[(2250), uint32], Tensor[(8, 128), uint64], Tensor[(1024), bool], Tensor[(2, 15, 11), float64]) {
  %401 = cast(%var_2189, dtype="float64") /* ty=float64 */;
  %402 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 8, 1), float64] */, dtype="float64") /* ty=Tensor[(11, 8, 1), float64] */;
  %403 = cast(meta[relay.Constant][17] /* ty=Tensor[(1024), bool] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %404 = reshape(%403, newshape=[8, 128]) /* ty=Tensor[(8, 128), bool] */;
  %405 = @func_1635(%404) /* ty=(Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) */;
  %406 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %407 = mod(%401, %402) /* ty=Tensor[(11, 8, 1), float64] */;
  %408 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %409 = %405.0;
  %410 = %406.0;
  (%407, %408, %409, meta[relay.Constant][17] /* ty=Tensor[(1024), bool] */, %410)
}

def @func_583(%var_479: Tensor[(2250), uint32]) -> (Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) {
  %411 = cast(%var_479, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %412 = cast(%var_479, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %413 = reshape(%411, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %414 = reshape(%412, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %415 = @func_448(%413, %414) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %416 = %415.0;
  %417 = cast(%var_479, dtype="int16") /* ty=Tensor[(2250), int16] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="int16") /* ty=Tensor[(15, 10, 15), int16] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %421 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 512), float64] */, dtype="float64") /* ty=Tensor[(2, 512), float64] */;
  %422 = reshape(%421, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %423 = cast(%416, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %424 = cast(%416, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %425 = reshape(%423, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %426 = reshape(%424, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %427 = @func_448(%425, %426) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %428 = @func_275(%422) /* ty=Tensor[(4, 16, 16), float64] */;
  %429 = cast(%428, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %430 = reshape(%429, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %431 = cast(%416, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %432 = add(%419, %420) /* ty=Tensor[(15, 10, 15), int16] */;
  %433 = cast(%432, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
  %434 = reshape(%431, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %435 = reshape(%433, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %436 = @func_448(%434, %435) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %437 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 13), float64] */, dtype="float64") /* ty=Tensor[(16, 16, 13), float64] */;
  %438 = log10(%437) /* ty=Tensor[(16, 16, 13), float64] */;
  %439 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 16, 13), float64] */, dtype="uint16") /* ty=Tensor[(16, 16, 13), uint16] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="uint16") /* ty=Tensor[(16, 16, 13), uint16] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %443 = right_shift(%441, %442) /* ty=Tensor[(16, 16, 13), uint16] */;
  %444 = cast(%438, dtype="int64") /* ty=Tensor[(16, 16, 13), int64] */;
  %445 = shape_of(%443, dtype="int32") /* ty=Tensor[(3), int32] */;
  %446 = cast(%443, dtype="int64") /* ty=Tensor[(16, 16, 13), int64] */;
  %447 = dyn.reshape(%444, %445, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %448 = multiply(%446, %447) /* ty=Tensor[(16, 16, 13), int64] */;
  %449 = cast(%448, dtype="float32") /* ty=Tensor[(16, 16, 13), float32] */;
  %450 = %427.0;
  %451 = @func_275(%430) /* ty=Tensor[(4, 16, 16), float64] */;
  %452 = %436.0;
  %453 = tan(%449) /* ty=Tensor[(16, 16, 13), float32] */;
  (%432, %428, meta[relay.Constant][18] /* ty=Tensor[(2, 512), float64] */, %450, %451, %452, %453)
}

def @func_2458(%var_2456: Tensor[(5, 5, 10), float32]) -> (Tensor[(5, 5, 10), float64], Tensor[(4, 6, 10), int32], Tensor[(5, 5, 10), bool]) {
  @func_2455(%var_2456) /* ty=(Tensor[(5, 5, 10), float64], Tensor[(4, 6, 10), int32], Tensor[(5, 5, 10), bool]) */
}

def @func_5863() -> Tensor[(2, 15, 11), float64] {
  @func_5861() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_4645() -> (Tensor[(15, 10, 15), int16],) {
  %455 = fn () -> (Tensor[(15, 10, 15), int16],) {
    %454 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
    (%454,)
  };
  %455() /* ty=(Tensor[(15, 10, 15), int16],) */
}

def @func_448(%var_442: Tensor[(15, 10, 15), uint32], %var_443: Tensor[(15, 10, 15), uint32]) -> (Tensor[(15, 10, 15), bool],) {
  %456 = cast(%var_443, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %457 = shape_of(%var_442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%var_442, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %460 = not_equal(%458, %459) /* ty=Tensor[(15, 10, 15), bool] */;
  (%460,)
}

def @func_5899() -> Tensor[(8, 128), float64] {
  %461 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %462 = %461.6;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  atan(%463) /* ty=Tensor[(8, 128), float64] */
}

def @func_3438(%var_3409: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64], Tensor[(2, 15, 11), float64]) {
  %464 = cast(%var_3409, dtype="float64") /* ty=Tensor[(11, 7, 14), float64] */;
  %465 = @func_3014() /* ty=(Tensor[(6, 4, 11), float64], Tensor[(2, 15, 11), float64]) */;
  %466 = atanh(%464) /* ty=Tensor[(11, 7, 14), float64] */;
  %467 = %465.1;
  (%466, %467)
}

def @func_765() -> (Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) {
  @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */
}

def @func_6423() -> (Tensor[(15, 10, 15), bool],) {
  @func_6421() /* ty=(Tensor[(15, 10, 15), bool],) */
}

def @func_4830() -> Tensor[(2, 15, 11), float64] {
  @func_4828() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_5667(%var_5581: Tensor[(5, 1, 8), uint8], %var_5592: Tensor[(5, 14, 8), uint8]) -> (Tensor[(2, 15, 11), float64], Tensor[(5, 14, 8), float64], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(5, 14, 8), int32]) {
  %468 = cast(meta[relay.Constant][20] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %469 = cast(%var_5581, dtype="uint8") /* ty=Tensor[(5, 1, 8), uint8] */;
  %470 = bitwise_xor(%468, %469) /* ty=Tensor[(5, 1, 8), uint8] */;
  %471 = cast(%470, dtype="float64") /* ty=Tensor[(5, 1, 8), float64] */;
  %472 = cast(%var_5592, dtype="float64") /* ty=Tensor[(5, 14, 8), float64] */;
  %473 = @func_5404() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), float64]) */;
  %474 = @func_4090() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %475 = @func_4219() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(4, 16, 16), float64]) */;
  %476 = cast(%var_5581, dtype="float64") /* ty=Tensor[(5, 1, 8), float64] */;
  %477 = log2(%476) /* ty=Tensor[(5, 1, 8), float64] */;
  %478 = cast(%var_5581, dtype="bool") /* ty=Tensor[(5, 1, 8), bool] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="bool") /* ty=Tensor[(5, 1, 8), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = logical_and(%480, %481) /* ty=Tensor[(5, ?, 8), bool] */;
  %483 = cast(%482, dtype="int32") /* ty=Tensor[(5, ?, 8), int32] */;
  %484 = cast(%var_5592, dtype="int32") /* ty=Tensor[(5, 14, 8), int32] */;
  %485 = @func_4828() /* ty=Tensor[(2, 15, 11), float64] */;
  %486 = floor_mod(%471, %472) /* ty=Tensor[(5, 14, 8), float64] */;
  %487 = %473.1;
  %488 = %474.0;
  %489 = %475.1;
  %490 = multiply(%483, %484) /* ty=Tensor[(5, 14, 8), int32] */;
  (%485, %486, %487, %488, %489, %490)
}

def @func_452(%var_450: Tensor[(15, 10, 15), uint32], %var_451: Tensor[(15, 10, 15), uint32]) -> (Tensor[(15, 10, 15), bool],) {
  @func_448(%var_450, %var_451) /* ty=(Tensor[(15, 10, 15), bool],) */
}

def @func_278(%var_276: Tensor[(4, 16, 16), float64]) -> Tensor[(4, 16, 16), float64] {
  @func_275(%var_276) /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_5053(%var_5051: Tensor[(1, 14), uint16], %var_5052: Tensor[(1, 14), uint16]) -> (Tensor[(?, 14), uint16],) {
  @func_5049(%var_5051, %var_5052) /* ty=(Tensor[(?, 14), uint16],) */
}

def @func_3462() -> Tensor[(2250), uint32] {
  %492 = fn () -> Tensor[(2250), uint32] {
    %491 = @func_2836() /* ty=(Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) */;
    %491.1
  };
  %492() /* ty=Tensor[(2250), uint32] */
}

def @func_4476() -> (Tensor[(15, 10, 15), float64],) {
  %493 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(15, 10, 15), float64] */;
  %495 = log2(%494) /* ty=Tensor[(15, 10, 15), float64] */;
  (%495,)
}

def @func_3680(%var_3678: uint64, %var_3679: Tensor[(7, 10, 7), uint64]) -> Tensor[(7, 10, 7), bool] {
  @func_3676(%var_3678, %var_3679) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_4051() -> (Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) {
  @func_4049() /* ty=(Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) */
}

def @func_1505(%var_1504: Tensor[(2250), uint32]) -> (Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(13, 13, 13), int32], Tensor[(1, 2250), uint32], Tensor[(91, 10), float32]) {
  %520 = fn (%var_1477: Tensor[(2250), uint32]) -> (Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(13, 13, 13), int32], Tensor[(1, 2250), uint32], Tensor[(91, 10), float32]) {
    %496 = cast(%var_1477, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %497 = reshape(%496, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %498 = @func_583(%497) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
    %499 = cast(%var_1477, dtype="float32") /* ty=Tensor[(2250), float32] */;
    %500 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
    %501 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 13), float32] */, dtype="float32") /* ty=Tensor[(13, 13, 13), float32] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %504 = power(%502, %503) /* ty=Tensor[(13, 13, 13), float32] */;
    %505 = cast(meta[relay.Constant][21] /* ty=Tensor[(13, 13, 13), float32] */, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
    %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
    %507 = cast(%504, dtype="int32") /* ty=Tensor[(13, 13, 13), int32] */;
    %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %509 = cast(meta[relay.Constant][23] /* ty=Tensor[(91, 10), float32] */, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
    %510 = cast(meta[relay.Constant][23] /* ty=Tensor[(91, 10), float32] */, dtype="float32") /* ty=Tensor[(91, 10), float32] */;
    %511 = %498.5;
    %512 = cast(%511, dtype="uint32") /* ty=Tensor[(15, 10, 15), uint32] */;
    %513 = reshape(%509, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
    %514 = reshape(%510, newshape=[7, 10, 13]) /* ty=Tensor[(7, 10, 13), float32] */;
    %515 = reshape(%512, newshape=[1, 2250]) /* ty=Tensor[(1, 2250), uint32] */;
    %516 = @func_633(%513, %514, %515) /* ty=(Tensor[(7, 10, 13), float32], Tensor[(15, 10, 15), bool], Tensor[(1, 2250), uint32]) */;
    %517 = atan(%499) /* ty=Tensor[(2250), float32] */;
    %518 = bitwise_and(%507, %508) /* ty=Tensor[(13, 13, 13), int32] */;
    %519 = %516.2;
    (%511, %517, %518, %519, meta[relay.Constant][23] /* ty=Tensor[(91, 10), float32] */)
  };
  %520(%var_1504) /* ty=(Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(13, 13, 13), int32], Tensor[(1, 2250), uint32], Tensor[(91, 10), float32]) */
}

def @func_4145(%var_4143: Tensor[(8, 128), bool]) -> Tensor[(8, 128), float32] {
  @func_4142(%var_4143) /* ty=Tensor[(8, 128), float32] */
}

def @func_5901() -> Tensor[(8, 128), float64] {
  @func_5899() /* ty=Tensor[(8, 128), float64] */
}

def @func_6323() -> Tensor[(8, 128), float64] {
  @func_6321() /* ty=Tensor[(8, 128), float64] */
}

def @func_5049(%var_5034: Tensor[(1, 14), uint16], %var_5035: Tensor[(1, 14), uint16]) -> (Tensor[(?, 14), uint16],) {
  %521 = cast(%var_5035, dtype="uint16") /* ty=Tensor[(1, 14), uint16] */;
  %522 = shape_of(%var_5034, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%var_5034, dtype="uint16") /* ty=Tensor[(1, 14), uint16] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %525 = right_shift(%523, %524) /* ty=Tensor[(?, 14), uint16] */;
  (%525,)
}

def @func_4867(%var_4864: uint64, %var_4865: Tensor[(490), uint64]) -> (Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(1024), float64], Tensor[(7, 10, 7), bool], uint64, Tensor[(490), uint64]) {
  %526 = @func_2184() /* ty=Tensor[(2, 15, 11), float64] */;
  %527 = cast(%526, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %528 = cast(meta[relay.Constant][24] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %529 = reshape(%528, newshape=[8, 128]) /* ty=Tensor[(8, 128), float64] */;
  %530 = @func_1466(%529) /* ty=(Tensor[(8, 128), uint32],) */;
  %531 = cast(%var_4864, dtype="uint64") /* ty=uint64 */;
  %532 = cast(%var_4865, dtype="uint64") /* ty=Tensor[(490), uint64] */;
  %533 = reshape(%531, newshape=[]) /* ty=uint64 */;
  %534 = reshape(%532, newshape=[7, 10, 7]) /* ty=Tensor[(7, 10, 7), uint64] */;
  %535 = asinh(%527) /* ty=Tensor[(2, 15, 11), float64] */;
  %536 = %530.0;
  %537 = @func_3676(%533, %534) /* ty=Tensor[(7, 10, 7), bool] */;
  (%535, %536, meta[relay.Constant][24] /* ty=Tensor[(1024), float64] */, %537, %var_4864, %var_4865)
}

def @func_1739(%var_1735: Tensor[(2250), uint32]) -> (Tensor[(2, 15, 11), float64], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) {
  %538 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %539 = cast(%var_1735, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %540 = cast(%var_1735, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %541 = reshape(%539, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %542 = reshape(%540, newshape=[15, 10, 15]) /* ty=Tensor[(15, 10, 15), uint32] */;
  %543 = @func_448(%541, %542) /* ty=(Tensor[(15, 10, 15), bool],) */;
  %544 = %538.0;
  %545 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  %546 = %543.0;
  (%544, %545, %546, %var_1735)
}

def @func_724() -> Tensor[(2250), uint32] {
  %548 = fn () -> Tensor[(2250), uint32] {
    %547 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
    %547.2
  };
  %548() /* ty=Tensor[(2250), uint32] */
}

def @func_2422() -> (Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) {
  @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */
}

def @func_4378() -> Tensor[(8, 128), float64] {
  %549 = fn () -> Tensor[(8, 128), float64] {
    @func_971() /* ty=Tensor[(8, 128), float64] */
  };
  %549() /* ty=Tensor[(8, 128), float64] */
}

def @func_5404() -> (Tensor[(8, 128), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), float64]) {
  %550 = @func_5029() /* ty=(Tensor[(8, 128), float64],) */;
  %551 = %550.0;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %553 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %554 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %555 = asin(%552) /* ty=Tensor[(8, 128), float64] */;
  %556 = %553.6;
  %557 = %554.2;
  (%555, %556, %557)
}

def @func_6410(%var_6408: int64, %var_6409: Tensor[(2, 12, 16), int64]) -> (Tensor[(2, 12, 16), int64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) {
  @func_6406(%var_6408, %var_6409) /* ty=(Tensor[(2, 12, 16), int64], Tensor[(2, 12, 16), bool], Tensor[(2, 12, 16), float32]) */
}

def @func_3999() -> (Tensor[(4, 6, 10), bool], Tensor[(4, 16, 16), float64], Tensor[(1024), float64]) {
  @func_3997() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(4, 16, 16), float64], Tensor[(1024), float64]) */
}

def @func_3997() -> (Tensor[(4, 6, 10), bool], Tensor[(4, 16, 16), float64], Tensor[(1024), float64]) {
  %558 = @func_3186() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %559 = cast(meta[relay.Constant][25] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %560 = reshape(%559, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %561 = %558.0;
  %562 = @func_275(%560) /* ty=Tensor[(4, 16, 16), float64] */;
  (%561, %562, meta[relay.Constant][25] /* ty=Tensor[(1024), float64] */)
}

def @func_3241() -> (Tensor[(4, 16, 16), float64], Tensor[(4, 6, 10), int32]) {
  %566 = fn () -> (Tensor[(4, 16, 16), float64], Tensor[(4, 6, 10), int32]) {
    %563 = @func_1995() /* ty=(Tensor[(4, 6, 10), int32],) */;
    %564 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
    %565 = %563.0;
    (%564, %565)
  };
  %566() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(4, 6, 10), int32]) */
}

def @func_6753() -> (Tensor[(1144, 1), float32], Tensor[(4, 6, 10), bool]) {
  %567 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %568 = %567.4;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(1144, 1), float32] */;
  %570 = @func_4764() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %571 = cosh(%569) /* ty=Tensor[(1144, 1), float32] */;
  %572 = %570.0;
  (%571, %572)
}

def @func_5177(%var_5175: Tensor[(13, 10, 1), float32]) -> (Tensor[(15, 10, 15), float64], Tensor[(13, 10, ?), float64], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(330), float64]) {
  @func_5174(%var_5175) /* ty=(Tensor[(15, 10, 15), float64], Tensor[(13, 10, ?), float64], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(330), float64]) */
}

def @func_3844(%var_3843: Tensor[(2, 15, 11), float64]) -> (Tensor[(15, 10, 15), bool], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(2, 15, 11), float64]) {
  %589 = fn (%var_3816: Tensor[(2, 15, 11), float64]) -> (Tensor[(15, 10, 15), bool], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(2, 15, 11), float64]) {
    %573 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
    %574 = %573.1;
    %575 = cast(meta[relay.Constant][26] /* ty=Tensor[(15, 10, 15), int16] */, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
    %576 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %577 = cast(%574, dtype="bool") /* ty=Tensor[(15, 10, 15), bool] */;
    %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %579 = @func_2090() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */;
    %580 = @func_1964() /* ty=Tensor[(2, 15, 11), float64] */;
    %581 = cast(%var_3816, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %582 = shape_of(%580, dtype="int32") /* ty=Tensor[(3), int32] */;
    %583 = cast(%580, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %585 = equal(%577, %578) /* ty=Tensor[(15, 10, 15), bool] */;
    %586 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
    %587 = %579.0;
    %588 = divide(%583, %584) /* ty=Tensor[(2, 15, 11), float64] */;
    (%585, %586, %587, %588)
  };
  %589(%var_3843) /* ty=(Tensor[(15, 10, 15), bool], Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64], Tensor[(2, 15, 11), float64]) */
}

def @func_1302() -> Tensor[(4, 6, 10), int32] {
  %594 = fn () -> Tensor[(4, 6, 10), int32] {
    %590 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 6, 10), int32] */, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
    %591 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(4, 6, 10), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 6, 10), int32] */, dtype="int32") /* ty=Tensor[(4, 6, 10), int32] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    logical_xor(%592, %593) /* ty=Tensor[(4, 6, 10), int32] */
  };
  %594() /* ty=Tensor[(4, 6, 10), int32] */
}

def @func_3980() -> (Tensor[(4, 6, 10), bool],) {
  %597 = fn () -> (Tensor[(4, 6, 10), bool],) {
    %595 = @func_3471() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */;
    %596 = %595.1;
    (%596,)
  };
  %597() /* ty=(Tensor[(4, 6, 10), bool],) */
}

def @func_3015() -> (Tensor[(6, 4, 11), float64], Tensor[(2, 15, 11), float64]) {
  %603 = fn () -> (Tensor[(6, 4, 11), float64], Tensor[(2, 15, 11), float64]) {
    %598 = cast(5.52204f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %599 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 4, 11), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 11), float64] */;
    %600 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
    %601 = divide(%598, %599) /* ty=Tensor[(6, 4, 11), float64] */;
    %602 = %600.0;
    (%601, %602)
  };
  %603() /* ty=(Tensor[(6, 4, 11), float64], Tensor[(2, 15, 11), float64]) */
}

def @func_4219() -> (Tensor[(4, 16, 16), float64], Tensor[(4, 16, 16), float64]) {
  %604 = @func_2090() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */;
  %605 = %604.0;
  %606 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
  (%605, %606)
}

def @func_4828() -> Tensor[(2, 15, 11), float64] {
  @func_1964() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_6157() -> (Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64]) {
  %611 = fn () -> (Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64]) {
    %607 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
    %608 = cast(%607, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
    %609 = reshape(%608, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
    %610 = @func_275(%609) /* ty=Tensor[(4, 16, 16), float64] */;
    (%607, %610)
  };
  %611() /* ty=(Tensor[(8, 128), float64], Tensor[(4, 16, 16), float64]) */
}

def @func_1996() -> (Tensor[(4, 6, 10), int32],) {
  %613 = fn () -> (Tensor[(4, 6, 10), int32],) {
    %612 = @func_1301() /* ty=Tensor[(4, 6, 10), int32] */;
    (%612,)
  };
  %613() /* ty=(Tensor[(4, 6, 10), int32],) */
}

def @func_275(%var_255: Tensor[(4, 16, 16), float64]) -> Tensor[(4, 16, 16), float64] {
  %614 = cast(%var_255, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  atanh(%614) /* ty=Tensor[(4, 16, 16), float64] */
}

def @func_2169(%var_2166: Tensor[(440), float32], %var_2167: Tensor[(2, 15, 11), float64], %var_2168: Tensor[(3, 750), uint32]) -> (Tensor[(4, 16, 16), float64], Tensor[(440), float32], Tensor[(3, 750), bool], Tensor[(2, 15, 11), float64], Tensor[(3, 750), float64]) {
  @func_2164(%var_2166, %var_2167, %var_2168) /* ty=(Tensor[(4, 16, 16), float64], Tensor[(440), float32], Tensor[(3, 750), bool], Tensor[(2, 15, 11), float64], Tensor[(3, 750), float64]) */
}

def @func_6367() -> Tensor[(2250), uint32] {
  @func_6365() /* ty=Tensor[(2250), uint32] */
}

def @func_3472() -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) {
  %618 = fn () -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) {
    %615 = @func_3186() /* ty=(Tensor[(4, 6, 10), bool],) */;
    %616 = @func_2028() /* ty=Tensor[(15, 10, 15), int16] */;
    %617 = %615.0;
    (%616, %617)
  };
  %618() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */
}

def @func_3658() -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) {
  %624 = fn () -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) {
    %619 = @func_3403() /* ty=(Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) */;
    %620 = @func_2328() /* ty=Tensor[(4, 6, 10), int32] */;
    %621 = cast(%620, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
    %622 = %619.4;
    %623 = sigmoid(%621) /* ty=Tensor[(4, 6, 10), float64] */;
    (%622, %623)
  };
  %624() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) */
}

def @func_5519(%var_5518: Tensor[(3, 12, 11), float64]) -> (Tensor[(3, 12, 11), bool], Tensor[(8, 128), float64]) {
  %633 = fn (%var_5503: Tensor[(3, 12, 11), float64]) -> (Tensor[(3, 12, 11), bool], Tensor[(8, 128), float64]) {
    %625 = cast(%var_5503, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
    %626 = tan(%625) /* ty=Tensor[(3, 12, 11), float64] */;
    %627 = cast(%626, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
    %628 = shape_of(%var_5503, dtype="int32") /* ty=Tensor[(3), int32] */;
    %629 = cast(%var_5503, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
    %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %631 = not_equal(%629, %630) /* ty=Tensor[(3, 12, 11), bool] */;
    %632 = @func_971() /* ty=Tensor[(8, 128), float64] */;
    (%631, %632)
  };
  %633(%var_5518) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(8, 128), float64]) */
}

def @func_1538() -> Tensor[(8, 128), float64] {
  %635 = fn () -> Tensor[(8, 128), float64] {
    %634 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
    %634.2
  };
  %635() /* ty=Tensor[(8, 128), float64] */
}

def @func_891() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) {
  @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */
}

def @func_3748() -> Tensor[(2250), uint32] {
  %636 = fn () -> Tensor[(2250), uint32] {
    @func_723() /* ty=Tensor[(2250), uint32] */
  };
  %636() /* ty=Tensor[(2250), uint32] */
}

def @func_1271(%var_1269: Tensor[(2, 512), float64]) -> (Tensor[(2, 512), float64], Tensor[(2250), float64]) {
  @func_1268(%var_1269) /* ty=(Tensor[(2, 512), float64], Tensor[(2250), float64]) */
}

def @func_5256(%var_5242: Tensor[(4, 6, 10), bool]) -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) {
  %637 = @func_3471() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */;
  %638 = @func_4764() /* ty=(Tensor[(4, 6, 10), bool],) */;
  %639 = %638.0;
  %640 = cast(%var_5242, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %642 = cast(%639, dtype="float64") /* ty=Tensor[(4, 6, 10), float64] */;
  %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %644 = %637.0;
  %645 = floor_mod(%642, %643) /* ty=Tensor[(4, 6, 10), float64] */;
  (%644, %645)
}

def @func_6071(%var_6069: Tensor[(490), uint64]) -> (Tensor[(8, 128), float64], Tensor[(2, 15, 11), float64], uint64, Tensor[(490), uint64]) {
  @func_6068(%var_6069) /* ty=(Tensor[(8, 128), float64], Tensor[(2, 15, 11), float64], uint64, Tensor[(490), uint64]) */
}

def @func_1912() -> (Tensor[(2, 15, 11), float64],) {
  %648 = fn () -> (Tensor[(2, 15, 11), float64],) {
    %646 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
    %647 = %646.0;
    (%647,)
  };
  %648() /* ty=(Tensor[(2, 15, 11), float64],) */
}

def @func_3404() -> (Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) {
  %664 = fn () -> (Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) {
    %649 = cast(meta[relay.Constant][30] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %650 = reshape(%649, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %651 = @func_583(%650) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
    %652 = cast(meta[relay.Constant][30] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %653 = reshape(%652, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %654 = @func_1739(%653) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) */;
    %655 = %654.3;
    %656 = cast(%655, dtype="float32") /* ty=Tensor[(2250), float32] */;
    %657 = acosh(%656) /* ty=Tensor[(2250), float32] */;
    %658 = cast(%657, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %659 = reshape(%658, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %660 = @func_1343(%659) /* ty=(Tensor[(2250), bool], Tensor[(15, 10, 15), int16]) */;
    %661 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
    %662 = %651.5;
    %663 = %660.1;
    (%661, meta[relay.Constant][30] /* ty=Tensor[(2250), uint32] */, %662, %657, %663)
  };
  %664() /* ty=(Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) */
}

def @func_1843(%var_1840: Tensor[(208), int32]) -> (Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(208), int32]) {
  %665 = @func_889() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), bool]) */;
  %666 = cast(%var_1840, dtype="int32") /* ty=Tensor[(208), int32] */;
  %667 = cast(%var_1840, dtype="int32") /* ty=Tensor[(208), int32] */;
  %668 = %665.1;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(15, 10, 15), float64] */;
  %670 = reshape(%666, newshape=[13, 2, 8]) /* ty=Tensor[(13, 2, 8), int32] */;
  %671 = reshape(%667, newshape=[13, 2, 8]) /* ty=Tensor[(13, 2, 8), int32] */;
  %672 = reshape(%669, newshape=[2250]) /* ty=Tensor[(2250), float64] */;
  %673 = @func_1438(%670, %671, %672) /* ty=(Tensor[(13, 2, 8), int32], Tensor[(3, 750), uint32], Tensor[(2250), uint32], Tensor[(8, 128), bool], Tensor[(2250), bool]) */;
  %674 = %673.2;
  (%668, %674, %var_1840)
}

def @func_2225(%var_2223: float64) -> (Tensor[(11, 8, 1), float64], Tensor[(2250), uint32], Tensor[(8, 128), uint64], Tensor[(1024), bool], Tensor[(2, 15, 11), float64]) {
  @func_2222(%var_2223) /* ty=(Tensor[(11, 8, 1), float64], Tensor[(2250), uint32], Tensor[(8, 128), uint64], Tensor[(1024), bool], Tensor[(2, 15, 11), float64]) */
}

def @func_1594() -> Tensor[(8, 128), float64] {
  %675 = fn () -> Tensor[(8, 128), float64] {
    @func_971() /* ty=Tensor[(8, 128), float64] */
  };
  %675() /* ty=Tensor[(8, 128), float64] */
}

def @func_2283() -> Tensor[(8, 128), float64] {
  %676 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %676.2
}

def @func_2091() -> (Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) {
  %685 = fn () -> (Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) {
    %677 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
    %678 = %677.2;
    %679 = cast(%678, dtype="float32") /* ty=Tensor[(8, 128), float32] */;
    %680 = cast(%678, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
    %681 = reshape(%680, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
    %682 = @func_1054() /* ty=Tensor[(4, 16, 16), float64] */;
    %683 = atanh(%679) /* ty=Tensor[(8, 128), float32] */;
    %684 = @func_275(%681) /* ty=Tensor[(4, 16, 16), float64] */;
    (%682, %683, %684)
  };
  %685() /* ty=(Tensor[(4, 16, 16), float64], Tensor[(8, 128), float32], Tensor[(4, 16, 16), float64]) */
}

def @func_2164(%var_2130: Tensor[(440), float32], %var_2138: Tensor[(2, 15, 11), float64], %var_2160: Tensor[(3, 750), uint32]) -> (Tensor[(4, 16, 16), float64], Tensor[(440), float32], Tensor[(3, 750), bool], Tensor[(2, 15, 11), float64], Tensor[(3, 750), float64]) {
  %686 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
  %687 = cast(%var_2130, dtype="float32") /* ty=Tensor[(440), float32] */;
  %688 = cast(%var_2130, dtype="float32") /* ty=Tensor[(440), float32] */;
  %689 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 750), uint32] */, dtype="uint32") /* ty=Tensor[(3, 750), uint32] */;
  %690 = %686.1;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %692 = reshape(%687, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %693 = reshape(%688, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %694 = reshape(%689, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %695 = reshape(%691, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %696 = @func_842(%692, %693, %694, %695) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %697 = %696.2;
  %698 = cast(%697, dtype="bool") /* ty=Tensor[(2250), bool] */;
  %699 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 750), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %700 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 750), uint32] */, dtype="bool") /* ty=Tensor[(3, 750), bool] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %702 = @func_1964() /* ty=Tensor[(2, 15, 11), float64] */;
  %703 = cast(%var_2138, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %704 = shape_of(%702, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%702, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %707 = cast(%var_2160, dtype="float64") /* ty=Tensor[(3, 750), float64] */;
  %708 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(3, 750), uint32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %709 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 750), uint32] */, dtype="float64") /* ty=Tensor[(3, 750), float64] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %711 = greater(%700, %701) /* ty=Tensor[(3, 750), bool] */;
  %712 = maximum(%705, %706) /* ty=Tensor[(2, 15, 11), float64] */;
  %713 = power(%709, %710) /* ty=Tensor[(3, 750), float64] */;
  (%690, %var_2130, %711, %712, %713)
}

def @func_3896() -> Tensor[(8, 128), bool] {
  @func_3894() /* ty=Tensor[(8, 128), bool] */
}

def @func_1742(%var_1740: Tensor[(2250), uint32]) -> (Tensor[(2, 15, 11), float64], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) {
  @func_1739(%var_1740) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) */
}

def @func_4293() -> (Tensor[(15, 10, 15), int16],) {
  %716 = fn () -> (Tensor[(15, 10, 15), int16],) {
    %714 = @func_3657() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) */;
    %715 = %714.0;
    (%715,)
  };
  %716() /* ty=(Tensor[(15, 10, 15), int16],) */
}

def @func_1966() -> Tensor[(2, 15, 11), float64] {
  @func_1964() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_4478() -> (Tensor[(15, 10, 15), float64],) {
  @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */
}

def @func_6041() -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), float64], Tensor[(8, 128), bool]) {
  %723 = fn () -> (Tensor[(2250), uint32], Tensor[(15, 10, 15), float64], Tensor[(8, 128), bool]) {
    %717 = @func_5938() /* ty=(Tensor[(15, 10, 15), int16],) */;
    %718 = %717.0;
    %719 = cast(%718, dtype="float64") /* ty=Tensor[(15, 10, 15), float64] */;
    %720 = @func_723() /* ty=Tensor[(2250), uint32] */;
    %721 = asin(%719) /* ty=Tensor[(15, 10, 15), float64] */;
    %722 = @func_993() /* ty=Tensor[(8, 128), bool] */;
    (%720, %721, %722)
  };
  %723() /* ty=(Tensor[(2250), uint32], Tensor[(15, 10, 15), float64], Tensor[(8, 128), bool]) */
}

def @func_1638(%var_1636: Tensor[(8, 128), bool]) -> (Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) {
  @func_1635(%var_1636) /* ty=(Tensor[(8, 128), uint64], Tensor[(8, 128), float64]) */
}

def @func_994() -> Tensor[(8, 128), bool] {
  %734 = fn () -> Tensor[(8, 128), bool] {
    %724 = @func_971() /* ty=Tensor[(8, 128), float64] */;
    %725 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 128), float64] */, dtype="int8") /* ty=Tensor[(8, 128), int8] */;
    %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(2), int32] */;
    %727 = cast(%724, dtype="int8") /* ty=Tensor[(8, 128), int8] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %729 = bitwise_xor(%727, %728) /* ty=Tensor[(8, 128), int8] */;
    %730 = cast(%729, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
    %731 = shape_of(%724, dtype="int32") /* ty=Tensor[(2), int32] */;
    %732 = cast(%724, dtype="bool") /* ty=Tensor[(8, 128), bool] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    logical_or(%732, %733) /* ty=Tensor[(8, 128), bool] */
  };
  %734() /* ty=Tensor[(8, 128), bool] */
}

def @func_5259(%var_5257: Tensor[(4, 6, 10), bool]) -> (Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) {
  @func_5256(%var_5257) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), float64]) */
}

def @func_2028() -> Tensor[(15, 10, 15), int16] {
  %735 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %735.1
}

def @func_5938() -> (Tensor[(15, 10, 15), int16],) {
  %736 = @func_5927() /* ty=Tensor[(15, 10, 15), int16] */;
  (%736,)
}

def @func_6702(%var_6701: Tensor[(2250), uint32]) -> (Tensor[(4, 6, 10), bool], Tensor[(2250), bool], Tensor[(2250), uint32], Tensor[(15, 2, 2), float32], Tensor[(3, 20), float32], Tensor[(2250), uint32], Tensor[(1024), uint32], Tensor[(440), float32], Tensor[(4, 16, 16), float64], Tensor[(250), int64]) {
  %765 = fn (%var_6650: Tensor[(2250), uint32]) -> (Tensor[(4, 6, 10), bool], Tensor[(2250), bool], Tensor[(2250), uint32], Tensor[(15, 2, 2), float32], Tensor[(3, 20), float32], Tensor[(2250), uint32], Tensor[(1024), uint32], Tensor[(440), float32], Tensor[(4, 16, 16), float64], Tensor[(250), int64]) {
    %737 = @func_3471() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 6, 10), bool]) */;
    %738 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %739 = reshape(%738, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %740 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
    %741 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 20), float32] */, dtype="float32") /* ty=Tensor[(3, 20), float32] */;
    %742 = reshape(%740, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
    %743 = reshape(%741, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
    %744 = @func_3081(%742, %743) /* ty=(Tensor[(15, 2, 2), float32],) */;
    %745 = cast(meta[relay.Constant][34] /* ty=Tensor[(1024), uint32] */, dtype="uint32") /* ty=Tensor[(1024), uint32] */;
    %746 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %747 = cast(meta[relay.Constant][35] /* ty=Tensor[(440), float32] */, dtype="float32") /* ty=Tensor[(440), float32] */;
    %748 = cast(meta[relay.Constant][36] /* ty=Tensor[(250), float32] */, dtype="float32") /* ty=Tensor[(250), float32] */;
    %749 = reshape(%745, newshape=[8, 128]) /* ty=Tensor[(8, 128), uint32] */;
    %750 = reshape(%746, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %751 = reshape(%747, newshape=[110, 4]) /* ty=Tensor[(110, 4), float32] */;
    %752 = reshape(%748, newshape=[250]) /* ty=Tensor[(250), float32] */;
    %753 = @func_5120(%749, %750, %751, %752) /* ty=(Tensor[(8, 128), bool], Tensor[(2250), uint32], Tensor[(2250), uint32], Tensor[(110, 4), bool], Tensor[(5, 5, 10), bool], Tensor[(250), float32]) */;
    %754 = @func_2722() /* ty=(Tensor[(4, 16, 16), float64],) */;
    %755 = cast(meta[relay.Constant][37] /* ty=Tensor[(250), float32] */, dtype="int64") /* ty=Tensor[(250), int64] */;
    %756 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(250), float32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %757 = cast(meta[relay.Constant][36] /* ty=Tensor[(250), float32] */, dtype="int64") /* ty=Tensor[(250), int64] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?), int64] */;
    %759 = %737.1;
    %760 = @func_5885(%739) /* ty=Tensor[(2250), bool] */;
    %761 = %744.0;
    %762 = %753.2;
    %763 = %754.0;
    %764 = bitwise_and(%757, %758) /* ty=Tensor[(250), int64] */;
    (%759, %760, %var_6650, %761, meta[relay.Constant][33] /* ty=Tensor[(3, 20), float32] */, %762, meta[relay.Constant][34] /* ty=Tensor[(1024), uint32] */, meta[relay.Constant][35] /* ty=Tensor[(440), float32] */, %763, %764)
  };
  %765(%var_6701) /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2250), bool], Tensor[(2250), uint32], Tensor[(15, 2, 2), float32], Tensor[(3, 20), float32], Tensor[(2250), uint32], Tensor[(1024), uint32], Tensor[(440), float32], Tensor[(4, 16, 16), float64], Tensor[(250), int64]) */
}

def @func_2678() -> (Tensor[(4, 6, 10), float32], Tensor[(4, 6, 10), bool]) {
  %774 = fn () -> (Tensor[(4, 6, 10), float32], Tensor[(4, 6, 10), bool]) {
    %766 = @func_1301() /* ty=Tensor[(4, 6, 10), int32] */;
    %767 = cast(%766, dtype="float32") /* ty=Tensor[(4, 6, 10), float32] */;
    %768 = cast(meta[relay.Constant][38] /* ty=Tensor[(4, 6, 10), int32] */, dtype="bool") /* ty=Tensor[(4, 6, 10), bool] */;
    %769 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(%766, dtype="bool") /* ty=Tensor[(4, 6, 10), bool] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %772 = asin(%767) /* ty=Tensor[(4, 6, 10), float32] */;
    %773 = logical_and(%770, %771) /* ty=Tensor[(4, 6, 10), bool] */;
    (%772, %773)
  };
  %774() /* ty=(Tensor[(4, 6, 10), float32], Tensor[(4, 6, 10), bool]) */
}

def @func_2370(%var_2347: Tensor[(440), float32]) -> (Tensor[(2250), uint32], Tensor[(1024), bool], Tensor[(2250), uint32], Tensor[(440), float32], Tensor[(8, 128), float64]) {
  %775 = cast(meta[relay.Constant][39] /* ty=Tensor[(1024), float64] */, dtype="float64") /* ty=Tensor[(1024), float64] */;
  %776 = reshape(%775, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %777 = @func_275(%776) /* ty=Tensor[(4, 16, 16), float64] */;
  %778 = cast(%777, dtype="bool") /* ty=Tensor[(4, 16, 16), bool] */;
  %779 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(1024), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %780 = cast(meta[relay.Constant][39] /* ty=Tensor[(1024), float64] */, dtype="bool") /* ty=Tensor[(1024), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?), bool] */;
  %782 = cast(%var_2347, dtype="float32") /* ty=Tensor[(440), float32] */;
  %783 = cast(%var_2347, dtype="float32") /* ty=Tensor[(440), float32] */;
  %784 = @func_723() /* ty=Tensor[(2250), uint32] */;
  %785 = cast(%784, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %786 = cast(%777, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
  %787 = reshape(%782, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %788 = reshape(%783, newshape=[4, 10, 11]) /* ty=Tensor[(4, 10, 11), float32] */;
  %789 = reshape(%785, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
  %790 = reshape(%786, newshape=[1024]) /* ty=Tensor[(1024), float64] */;
  %791 = @func_842(%787, %788, %789, %790) /* ty=(Tensor[(4, 10, 11), bool], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(1024), float64], Tensor[(455, 2), float32]) */;
  %792 = logical_and(%780, %781) /* ty=Tensor[(1024), bool] */;
  %793 = %791.2;
  %794 = @func_1593() /* ty=Tensor[(8, 128), float64] */;
  (%784, %792, %793, %var_2347, %794)
}

def @func_5928() -> Tensor[(15, 10, 15), int16] {
  %796 = fn () -> Tensor[(15, 10, 15), int16] {
    %795 = @func_4292() /* ty=(Tensor[(15, 10, 15), int16],) */;
    %795.0
  };
  %796() /* ty=Tensor[(15, 10, 15), int16] */
}

def @func_2185() -> Tensor[(2, 15, 11), float64] {
  %798 = fn () -> Tensor[(2, 15, 11), float64] {
    %797 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
    %797.0
  };
  %798() /* ty=Tensor[(2, 15, 11), float64] */
}

def @func_763() -> (Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) {
  %799 = @func_653() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */;
  %800 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 128), float64] */, dtype="float64") /* ty=Tensor[(8, 128), float64] */;
  %801 = reshape(%800, newshape=[4, 16, 16]) /* ty=Tensor[(4, 16, 16), float64] */;
  %802 = %799.2;
  %803 = @func_275(%801) /* ty=Tensor[(4, 16, 16), float64] */;
  (%802, %803, meta[relay.Constant][40] /* ty=Tensor[(8, 128), float64] */)
}

def @func_6520(%var_6499: Tensor[(2250), float64]) -> (Tensor[(15, 10, 15), int16], Tensor[(15, 10, 15), int16], Tensor[(8, 128), uint32], Tensor[(2250), uint32], Tensor[(2250), float64]) {
  %804 = @func_4049() /* ty=(Tensor[(2, 6, 13), float64], Tensor[(2, 6, 13), float64], Tensor[(8, 128), uint32], Tensor[(15, 10, 15), int16]) */;
  %805 = @func_5938() /* ty=(Tensor[(15, 10, 15), int16],) */;
  %806 = @func_4270() /* ty=(Tensor[(15, 10, 15), int16], Tensor[(2250), float64], Tensor[(4, 256), float64], Tensor[(2250), uint32], Tensor[(1144, 1), float64], Tensor[(440), float32], Tensor[(8, 128), uint32]) */;
  %807 = @func_3403() /* ty=(Tensor[(8, 128), float64], Tensor[(2250), uint32], Tensor[(15, 10, 15), bool], Tensor[(2250), float32], Tensor[(15, 10, 15), int16]) */;
  %808 = %807.3;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %810 = sin(%809) /* ty=Tensor[(2250), float64] */;
  %811 = cast(%var_6499, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %812 = shape_of(%810, dtype="int32") /* ty=Tensor[(1), int32] */;
  %813 = cast(%810, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %815 = cast(%810, dtype="float64") /* ty=Tensor[(2250), float64] */;
  %816 = %804.3;
  %817 = %805.0;
  %818 = %806.6;
  %819 = left_shift(%813, %814) /* ty=Tensor[(2250), uint32] */;
  %820 = cos(%815) /* ty=Tensor[(2250), float64] */;
  (%816, %817, %818, %819, %820)
}

def @func_5853() -> Tensor[(8, 128), float64] {
  @func_971() /* ty=Tensor[(8, 128), float64] */
}

def @func_2723() -> (Tensor[(4, 16, 16), float64],) {
  %825 = fn () -> (Tensor[(4, 16, 16), float64],) {
    %821 = @func_763() /* ty=(Tensor[(2250), uint32], Tensor[(4, 16, 16), float64], Tensor[(8, 128), float64]) */;
    %822 = %821.1;
    %823 = cast(%822, dtype="float64") /* ty=Tensor[(4, 16, 16), float64] */;
    %824 = cosh(%823) /* ty=Tensor[(4, 16, 16), float64] */;
    (%824,)
  };
  %825() /* ty=(Tensor[(4, 16, 16), float64],) */
}

def @func_5752() -> (Tensor[(15, 10, 15), float64],) {
  %828 = fn () -> (Tensor[(15, 10, 15), float64],) {
    %826 = @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */;
    %827 = %826.0;
    (%827,)
  };
  %828() /* ty=(Tensor[(15, 10, 15), float64],) */
}

def @func_5736() -> (Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) {
  @func_5734() /* ty=(Tensor[(4, 6, 10), int32], Tensor[(2250), uint32]) */
}

def @func_1846(%var_1844: Tensor[(208), int32]) -> (Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(208), int32]) {
  @func_1843(%var_1844) /* ty=(Tensor[(15, 10, 15), bool], Tensor[(2250), uint32], Tensor[(208), int32]) */
}

def @func_4745(%var_4721: Tensor[(15, 2, 2), float32]) -> (Tensor[(2, 15, 11), float64], Tensor[(60), float32], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32], Tensor[(15, 10, 15), float64]) {
  %829 = @func_1911() /* ty=(Tensor[(2, 15, 11), float64],) */;
  %830 = cast(meta[relay.Constant][41] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %831 = cast(meta[relay.Constant][41] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %832 = reshape(%830, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %833 = reshape(%831, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %834 = @func_3081(%832, %833) /* ty=(Tensor[(15, 2, 2), float32],) */;
  %835 = %834.0;
  %836 = cast(%var_4721, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
  %837 = shape_of(%835, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%835, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %840 = cast(%var_4721, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %841 = @func_4476() /* ty=(Tensor[(15, 10, 15), float64],) */;
  %842 = %829.0;
  %843 = bitwise_and(%838, %839) /* ty=Tensor[(15, 2, 2), int8] */;
  %844 = log2(%840) /* ty=Tensor[(15, 2, 2), float32] */;
  %845 = %841.0;
  (%842, meta[relay.Constant][41] /* ty=Tensor[(60), float32] */, %843, %844, %845)
}

def @func_2768(%var_2766: Tensor[(2250), uint32]) -> (Tensor[(8, 128), uint8], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) {
  @func_2765(%var_2766) /* ty=(Tensor[(8, 128), uint8], Tensor[(15, 10, 15), bool], Tensor[(2250), uint32]) */
}

def @func_3676(%var_3664: uint64, %var_3665: Tensor[(7, 10, 7), uint64]) -> Tensor[(7, 10, 7), bool] {
  %846 = cast(%var_3664, dtype="bool") /* ty=bool */;
  %847 = cast(%var_3665, dtype="bool") /* ty=Tensor[(7, 10, 7), bool] */;
  greater(%846, %847) /* ty=Tensor[(7, 10, 7), bool] */
}

def @func_6068(%var_6060: Tensor[(490), uint64]) -> (Tensor[(8, 128), float64], Tensor[(2, 15, 11), float64], uint64, Tensor[(490), uint64]) {
  %848 = cast(meta[relay.Constant][42] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %849 = cast(%var_6060, dtype="uint64") /* ty=Tensor[(490), uint64] */;
  %850 = reshape(%848, newshape=[]) /* ty=uint64 */;
  %851 = reshape(%849, newshape=[490]) /* ty=Tensor[(490), uint64] */;
  %852 = @func_4867(%850, %851) /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(1024), float64], Tensor[(7, 10, 7), bool], uint64, Tensor[(490), uint64]) */;
  %853 = @func_5853() /* ty=Tensor[(8, 128), float64] */;
  %854 = %852.0;
  (%853, %854, meta[relay.Constant][42] /* ty=uint64 */, %var_6060)
}

def @main() -> (Tensor[(8, 6, 4), float32],) {
  %855 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 6, 4), float64] */, dtype="float64") /* ty=Tensor[(8, 6, 4), float64] */;
  %856 = erf(%855) /* ty=Tensor[(8, 6, 4), float64] */;
  %857 = cast(%856, dtype="float32") /* ty=Tensor[(8, 6, 4), float32] */;
  %858 = asinh(%857) /* ty=Tensor[(8, 6, 4), float32] */;
  (%858,)
}

def @func_5887(%var_5886: Tensor[(2250), uint32]) -> Tensor[(2250), bool] {
  %864 = fn (%var_5879: Tensor[(2250), uint32]) -> Tensor[(2250), bool] {
    %859 = @func_723() /* ty=Tensor[(2250), uint32] */;
    %860 = cast(%var_5879, dtype="bool") /* ty=Tensor[(2250), bool] */;
    %861 = shape_of(%859, dtype="int32") /* ty=Tensor[(1), int32] */;
    %862 = cast(%859, dtype="bool") /* ty=Tensor[(2250), bool] */;
    %863 = dyn.reshape(%860, %861, newshape=[]) /* ty=Tensor[(?), bool] */;
    equal(%862, %863) /* ty=Tensor[(2250), bool] */
  };
  %864(%var_5886) /* ty=Tensor[(2250), bool] */
}

def @func_2906() -> (Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) {
  %868 = fn () -> (Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) {
    %865 = @func_2420() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(8, 128), uint32], Tensor[(8, 128), uint32]) */;
    %866 = @func_2283() /* ty=Tensor[(8, 128), float64] */;
    %867 = %865.2;
    (%866, %867)
  };
  %868() /* ty=(Tensor[(8, 128), float64], Tensor[(8, 128), uint32]) */
}

def @func_790(%var_778: Tensor[(15, 7, 11), int64], %var_779: Tensor[(15, 7, 11), int64]) -> (Tensor[(15, 7, 11), int64], Tensor[(15, 7, 11), float64]) {
  %869 = cast(%var_779, dtype="int64") /* ty=Tensor[(15, 7, 11), int64] */;
  %870 = shape_of(%var_778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %871 = cast(%var_778, dtype="int64") /* ty=Tensor[(15, 7, 11), int64] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %873 = cast(%var_779, dtype="float64") /* ty=Tensor[(15, 7, 11), float64] */;
  %874 = bitwise_and(%871, %872) /* ty=Tensor[(15, 7, 11), int64] */;
  %875 = sigmoid(%873) /* ty=Tensor[(15, 7, 11), float64] */;
  (%874, %875)
}

def @func_3187() -> (Tensor[(4, 6, 10), bool],) {
  %878 = fn () -> (Tensor[(4, 6, 10), bool],) {
    %876 = @func_3108() /* ty=(Tensor[(4, 6, 10), bool], Tensor[(2, 15, 11), float64]) */;
    %877 = %876.0;
    (%877,)
  };
  %878() /* ty=(Tensor[(4, 6, 10), bool],) */
}

def @func_654() -> (Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) {
  %885 = fn () -> (Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) {
    %879 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 15, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 15, 11), float64] */;
    %880 = cast(meta[relay.Constant][45] /* ty=Tensor[(2250), uint32] */, dtype="uint32") /* ty=Tensor[(2250), uint32] */;
    %881 = reshape(%880, newshape=[2250]) /* ty=Tensor[(2250), uint32] */;
    %882 = @func_583(%881) /* ty=(Tensor[(15, 10, 15), int16], Tensor[(4, 16, 16), float64], Tensor[(2, 512), float64], Tensor[(15, 10, 15), bool], Tensor[(4, 16, 16), float64], Tensor[(15, 10, 15), bool], Tensor[(16, 16, 13), float32]) */;
    %883 = cos(%879) /* ty=Tensor[(2, 15, 11), float64] */;
    %884 = %882.0;
    (%883, %884, meta[relay.Constant][45] /* ty=Tensor[(2250), uint32] */)
  };
  %885() /* ty=(Tensor[(2, 15, 11), float64], Tensor[(15, 10, 15), int16], Tensor[(2250), uint32]) */
}

def @func_5940() -> (Tensor[(15, 10, 15), int16],) {
  @func_5938() /* ty=(Tensor[(15, 10, 15), int16],) */
}

def @func_3441(%var_3439: Tensor[(11, 7, 14), float64]) -> (Tensor[(11, 7, 14), float64], Tensor[(2, 15, 11), float64]) {
  @func_3438(%var_3439) /* ty=(Tensor[(11, 7, 14), float64], Tensor[(2, 15, 11), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen485/build/output.py:2346: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen485/build/output.py:2351: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen485/build/output.py:2379: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen485/build/output.py:2384: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen485/build/output.py:2389: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='llvm')
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen485/build/output.py:2394: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mutated_mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  match (%g) {
    Raw(%x: T) => {
      %x
    },
    One(%x1: fn () -> T) => {
      %x1() /* ty=T */
    },
    Zero(%x2: fn () -> T) => {
      %x2() /* ty=T */
    },
  }
}

def @main() -> ((Tensor[(8, 6, 4), float32],), ()) {
  %0 = (meta[relay.Constant][0] /* ty=Tensor[(8, 6, 4), float32] */,);
  %1 = ();
  (%0, %1)
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  %2 = (%l, %r);
  match (%2) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      %3 = match (%l) {
        Raw(%x3: T) => {
          %x3
        },
        One(%x4: fn () -> T) => {
          %x4() /* ty=T */
        },
        Zero(%x5: fn () -> T) => {
          %x5() /* ty=T */
        },
      };
      %4 = match (%r) {
        Raw(%x6: T) => {
          %x6
        },
        One(%x7: fn () -> T) => {
          %x7() /* ty=T */
        },
        Zero(%x8: fn () -> T) => {
          %x8() /* ty=T */
        },
      };
      %5 = %add(%3, %4) /* ty=T */;
      Raw(%5) /* ty=GradCell[T] */
    },
  }
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  %6 = (%l1, %r1);
  match (%6) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      %7 = match (%l1) {
        Raw(%x9: T) => {
          %x9
        },
        One(%x10: fn () -> T) => {
          %x10() /* ty=T */
        },
        Zero(%x11: fn () -> T) => {
          %x11() /* ty=T */
        },
      };
      %8 = match (%r1) {
        Raw(%x12: T) => {
          %x12
        },
        One(%x13: fn () -> T) => {
          %x13() /* ty=T */
        },
        Zero(%x14: fn () -> T) => {
          %x14() /* ty=T */
        },
      };
      %9 = %multiply(%7, %8) /* ty=T */;
      Raw(%9) /* ty=GradCell[T] */
    },
  }
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
