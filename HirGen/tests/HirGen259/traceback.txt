==========mod==========
#[version = "0.0.5"]
def @func_3258(%var_3251: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) {
  %0 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1 = %0.1;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(40, 26), float32] */, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %4 = cast(%var_3251, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %5 = reshape(%3, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
  %6 = reshape(%4, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %7 = @func_3226(%5, %6) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %9 = reshape(%8, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %10 = @func_2263(%9) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %11 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %12 = sqrt(%2) /* ty=Tensor[(12, 6, 10), float32] */;
  %13 = %7.5;
  %14 = %10.2;
  (%11, %12, %13, meta[relay.Constant][0] /* ty=Tensor[(40, 26), float32] */, %var_3251, %14, meta[relay.Constant][1] /* ty=Tensor[(180), uint16] */)
}

def @func_4883(%var_4870: Tensor[(8, 14, 15), float32], %var_4881: Tensor[(180), uint16]) -> (Tensor[(8, 14, 15), float32], Tensor[(1152), float32], Tensor[(1404), bool], Tensor[(288, 4), float32], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %15 = cast(%var_4870, dtype="float32") /* ty=Tensor[(8, 14, 15), float32] */;
  %16 = cast(meta[relay.Constant][2] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(288, 4), float32] */, dtype="float32") /* ty=Tensor[(288, 4), float32] */;
  %18 = reshape(%16, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
  %19 = reshape(%17, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %20 = @func_2696(%18, %19) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
  %21 = cast(%var_4881, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %22 = reshape(%21, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %23 = @func_2655(%22) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %24 = acosh(%15) /* ty=Tensor[(8, 14, 15), float32] */;
  %25 = %20.5;
  %26 = %23.2;
  (%24, %25, meta[relay.Constant][2] /* ty=Tensor[(1404), bool] */, meta[relay.Constant][3] /* ty=Tensor[(288, 4), float32] */, %26, %var_4881)
}

def @func_4572(%var_4492: Tensor[(5, 14, 7), bool], %var_4493: Tensor[(5, 14, 7), bool], %var_4521: int32, %var_4566: Tensor[(845), float64]) -> (Tensor[(5, 14, 7), bool], Tensor[(180), uint16], Tensor[(180), uint16], int32, Tensor[(2184), int32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(845), float64], Tensor[(5, 6, 6), uint16]) {
  %27 = cast(%var_4493, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
  %28 = shape_of(%var_4492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %29 = cast(%var_4492, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
  %30 = dyn.reshape(%27, %28, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %31 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %32 = cast(%var_4521, dtype="int32") /* ty=int32 */;
  %33 = cast(meta[relay.Constant][4] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %34 = %31.1;
  %35 = cast(%34, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %36 = reshape(%32, newshape=[]) /* ty=int32 */;
  %37 = reshape(%33, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), int32] */;
  %38 = reshape(%35, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %39 = @func_3757(%36, %37, %38) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */;
  %40 = cast(meta[relay.Constant][5] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %41 = cast(%34, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %42 = reshape(%40, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %43 = reshape(%41, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %44 = @func_4058(%42, %43) /* ty=(Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) */;
  %45 = cast(%34, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %46 = reshape(%45, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %47 = @func_3427(%46) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %48 = cast(%var_4566, dtype="float64") /* ty=Tensor[(845), float64] */;
  %49 = %39.3;
  %50 = cast(%49, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %51 = reshape(%48, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
  %52 = reshape(%50, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %53 = @func_3595(%51, %52) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %54 = cast(meta[relay.Constant][5] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %55 = reshape(%54, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %56 = @func_2247(%55) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %57 = logical_or(%29, %30) /* ty=Tensor[(5, 14, 7), bool] */;
  %58 = %44.2;
  %59 = %47.0;
  %60 = %53.2;
  %61 = %56.1;
  (%57, %34, %49, %var_4521, meta[relay.Constant][4] /* ty=Tensor[(2184), int32] */, %58, meta[relay.Constant][5] /* ty=Tensor[(1152), float32] */, %59, %60, %var_4566, %61)
}

def @func_3095(%var_3090: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %62 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %63 = cosh(%62) /* ty=Tensor[(1, 8, 7), float32] */;
  %64 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 8, 7), float32] */, dtype="bool") /* ty=Tensor[(1, 8, 7), bool] */;
  %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%63, dtype="bool") /* ty=Tensor[(1, 8, 7), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = cast(meta[relay.Constant][7] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %69 = cast(%var_3090, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %70 = cast(%var_3090, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %71 = reshape(%68, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %72 = reshape(%69, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %73 = reshape(%70, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %74 = @func_631(%71, %72, %73) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %75 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %76 = equal(%66, %67) /* ty=Tensor[(?, 8, 7), bool] */;
  %77 = %74.3;
  (%75, %76, %77, meta[relay.Constant][7] /* ty=Tensor[(1152), float32] */, %var_3090)
}

def @func_9335(%var_9241: Tensor[(1, 845), float64], %var_9250: bool) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(490), bool], Tensor[(1, 845), float64], Tensor[(12, 6, 10), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(490), bool] */, dtype="bool") /* ty=Tensor[(490), bool] */;
  %79 = cast(%var_9241, dtype="float64") /* ty=Tensor[(1, 845), float64] */;
  %80 = reshape(%78, newshape=[7, 70]) /* ty=Tensor[(7, 70), bool] */;
  %81 = reshape(%79, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %82 = @func_7624(%80, %81) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) */;
  %83 = cast(meta[relay.Constant][9] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %84 = cast(meta[relay.Constant][10] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
  %85 = cast(%var_9250, dtype="bool") /* ty=bool */;
  %86 = cast(meta[relay.Constant][11] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %87 = reshape(%83, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
  %88 = reshape(%84, newshape=[286]) /* ty=Tensor[(286), float32] */;
  %89 = reshape(%85, newshape=[]) /* ty=bool */;
  %90 = reshape(%86, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
  %91 = @func_8014(%87, %88, %89, %90) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], Tensor[(286), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), uint32], Tensor[(105, 3), uint32], Tensor[(180), uint16], Tensor[(1040), float64]) */;
  %92 = cast(meta[relay.Constant][9] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %93 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %94 = @func_8450() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %95 = @func_8536() /* ty=(Tensor[(1152), float32],) */;
  %96 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %97 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %98 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %99 = %82.0;
  %100 = %91.2;
  %101 = log2(%92) /* ty=Tensor[(1040), float32] */;
  %102 = %93.0;
  %103 = %94.0;
  %104 = %95.0;
  %105 = %96.0;
  %106 = %97.0;
  (%98, %99, meta[relay.Constant][8] /* ty=Tensor[(490), bool] */, %var_9241, %100, meta[relay.Constant][10] /* ty=Tensor[(286), float32] */, %var_9250, meta[relay.Constant][11] /* ty=Tensor[(1404), bool] */, %101, %102, %103, %104, %105, %106)
}

def @func_10429() -> (Tensor[(11, 2, 14), float32],) {
  %107 = @func_6068() /* ty=(Tensor[(11, 2, 14), float32],) */;
  %108 = %107.0;
  (%108,)
}

def @func_6594(%var_6580: bool) -> (Tensor[(12, 6, 10), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(2340), uint16], bool, Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16]) {
  %109 = @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %112 = cast(meta[relay.Constant][12] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %113 = cast(meta[relay.Constant][13] /* ty=Tensor[(2340), uint16] */, dtype="uint16") /* ty=Tensor[(2340), uint16] */;
  %114 = cast(%var_6580, dtype="bool") /* ty=bool */;
  %115 = reshape(%111, newshape=[12, 6, 10]) /* ty=Tensor[(12, 6, 10), float32] */;
  %116 = reshape(%112, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %117 = reshape(%113, newshape=[180, 13]) /* ty=Tensor[(180, 13), uint16] */;
  %118 = reshape(%114, newshape=[]) /* ty=bool */;
  %119 = @func_3049(%115, %116, %117, %118) /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float64], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(180, 13), bool], Tensor[(576, 2), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %120 = cast(meta[relay.Constant][14] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %121 = %119.3;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %123 = cast(meta[relay.Constant][15] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %124 = reshape(%120, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %125 = reshape(%122, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %126 = reshape(%123, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %127 = @func_1120(%124, %125, %126) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %128 = %127.2;
  (%110, %121, meta[relay.Constant][12] /* ty=Tensor[(1152), float32] */, meta[relay.Constant][13] /* ty=Tensor[(2340), uint16] */, %var_6580, %128, meta[relay.Constant][14] /* ty=Tensor[(135), float32] */, meta[relay.Constant][15] /* ty=Tensor[(180), uint16] */)
}

def @func_9208() -> Tensor[(12, 6, 10), float32] {
  %129 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %129.0
}

def @func_2477(%var_2464: Tensor[(5, 6, 6), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), bool]) {
  %130 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %131 = cast(meta[relay.Constant][16] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %132 = cast(meta[relay.Constant][17] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %133 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %134 = reshape(%131, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %135 = reshape(%132, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %136 = reshape(%133, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %137 = @func_1120(%134, %135, %136) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %138 = %137.1;
  %139 = cast(%var_2464, dtype="bool") /* ty=Tensor[(5, 6, 6), bool] */;
  %140 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%138, dtype="bool") /* ty=Tensor[(5, 6, 6), bool] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %143 = %130.1;
  %144 = equal(%141, %142) /* ty=Tensor[(5, 6, 6), bool] */;
  (%143, meta[relay.Constant][16] /* ty=Tensor[(135), float32] */, meta[relay.Constant][17] /* ty=Tensor[(1152), float32] */, meta[relay.Constant][18] /* ty=Tensor[(180), uint16] */, %144)
}

def @func_10106() -> (Tensor[(12, 6, 10), float32], Tensor[(11, 2, 14), float32], int32, Tensor[(2184), int32], Tensor[(180), uint16]) {
  %145 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %146 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %147 = cast(meta[relay.Constant][19] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %148 = cast(meta[relay.Constant][20] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %149 = reshape(%146, newshape=[]) /* ty=int32 */;
  %150 = reshape(%147, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), int32] */;
  %151 = reshape(%148, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %152 = @func_3757(%149, %150, %151) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */;
  %153 = %145.1;
  %154 = %152.4;
  (%153, %154, -8 /* ty=int32 */, meta[relay.Constant][19] /* ty=Tensor[(2184), int32] */, meta[relay.Constant][20] /* ty=Tensor[(180), uint16] */)
}

def @func_8441(%var_8410: uint32, %var_8411: Tensor[(3, 11, 1), uint32], %var_8421: Tensor[(3, 11, 7), bool]) -> (Tensor[(3, 11, 7), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %155 = cast(%var_8410, dtype="bool") /* ty=bool */;
  %156 = cast(%var_8411, dtype="bool") /* ty=Tensor[(3, 11, 1), bool] */;
  %157 = not_equal(%155, %156) /* ty=Tensor[(3, 11, 1), bool] */;
  %158 = cast(%157, dtype="bool") /* ty=Tensor[(3, 11, 1), bool] */;
  %159 = cast(%var_8421, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %160 = @func_6158() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %161 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %162 = greater(%158, %159) /* ty=Tensor[(3, 11, 7), bool] */;
  %163 = %160.6;
  %164 = %161.0;
  (%162, %163, %164)
}

def @func_7199() -> Tensor[(12, 6, 10), float32] {
  %165 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %165.0
}

def @func_6198(%var_6171: Tensor[(3, 14, 2), int8], %var_6172: Tensor[(3, 14, 2), int8]) -> (Tensor[(3, 14, 2), int8], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %166 = cast(%var_6172, dtype="int8") /* ty=Tensor[(3, 14, 2), int8] */;
  %167 = shape_of(%var_6171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_6171, dtype="int8") /* ty=Tensor[(3, 14, 2), int8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %170 = cast(meta[relay.Constant][21] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %171 = reshape(%170, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %172 = @func_3095(%171) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %173 = multiply(%168, %169) /* ty=Tensor[(3, 14, 2), int8] */;
  %174 = %172.2;
  (%173, %174, meta[relay.Constant][21] /* ty=Tensor[(180), uint16] */)
}

def @func_2247(%var_2230: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %175 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %176 = cast(%var_2230, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %177 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %178 = cast(meta[relay.Constant][22] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %179 = reshape(%176, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %180 = reshape(%177, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %181 = reshape(%178, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %182 = @func_631(%179, %180, %181) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %183 = %175.0;
  %184 = %182.0;
  (%183, %184, %var_2230, meta[relay.Constant][22] /* ty=Tensor[(180), uint16] */)
}

def @func_5541() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %185 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %186 = %185.0;
  %187 = cast(%186, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %188 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %189 = acosh(%187) /* ty=Tensor[(12, 6, 10), float32] */;
  %190 = %188.1;
  (%189, %190)
}

def @func_2263(%var_2254: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %191 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %192 = cast(%var_2254, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %193 = reshape(%192, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %194 = @func_261(%193) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %195 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %196 = %191.0;
  %197 = %194.0;
  %198 = %195.0;
  (%196, %197, %var_2254, %198)
}

def @func_9643() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %199 = @func_8339() /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %200 = @func_9230() /* ty=Tensor[(12, 6, 10), float32] */;
  %201 = %199.1;
  (%200, %201)
}

def @func_9011() -> (Tensor[(180), uint16],) {
  %202 = @func_6570() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %203 = %202.0;
  (%203,)
}

def @func_6741(%var_6713: Tensor[(3, 13, 7), int16], %var_6732: Tensor[(286), float32], %var_6733: Tensor[(180, 1), uint16]) -> (Tensor[(3, 13, 7), int16], Tensor[(12, 9, 13), bool], Tensor[(286), float32], bool, Tensor[(180, 1404), int64]) {
  %204 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 13, 7), int16] */, dtype="int16") /* ty=Tensor[(1, 13, 7), int16] */;
  %205 = cast(%var_6713, dtype="int16") /* ty=Tensor[(3, 13, 7), int16] */;
  %206 = cast(%var_6732, dtype="float32") /* ty=Tensor[(286), float32] */;
  %207 = cast(%var_6733, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %208 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %209 = cast(meta[relay.Constant][24] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %210 = reshape(%206, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
  %211 = reshape(%207, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %212 = reshape(%208, newshape=[]) /* ty=bool */;
  %213 = reshape(%209, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %214 = @func_1295(%210, %211, %212, %213) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
  %215 = cast(%var_6733, dtype="int64") /* ty=Tensor[(180, 1), int64] */;
  %216 = cast(meta[relay.Constant][24] /* ty=Tensor[(1404), bool] */, dtype="int64") /* ty=Tensor[(1404), int64] */;
  %217 = left_shift(%204, %205) /* ty=Tensor[(3, 13, 7), int16] */;
  %218 = %214.10;
  %219 = right_shift(%215, %216) /* ty=Tensor[(180, 1404), int64] */;
  (%217, %218, %var_6732, False /* ty=bool */, %219)
}

def @func_9732() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(845), float64], Tensor[(12, 6, 10), float64]) {
  %220 = @func_7416() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %221 = @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %222 = cast(meta[relay.Constant][25] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %223 = reshape(%222, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %224 = @func_4359(%223) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(13, 5, 13), float64], Tensor[(845), float64], Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %225 = @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */;
  %226 = %220.1;
  %227 = %221.1;
  %228 = %224.0;
  %229 = %225.0;
  (%226, %227, %228, meta[relay.Constant][25] /* ty=Tensor[(845), float64] */, %229)
}

def @func_9036() -> (Tensor[(12, 6, 10), float32],) {
  %230 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %231 = %230.0;
  (%231,)
}

def @func_10216() -> Tensor[(12, 6, 10), float32] {
  %232 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %232.0
}

def @func_8392() -> (Tensor[(12, 6, 10), float32],) {
  %233 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %234 = %233.1;
  (%234,)
}

def @func_4699() -> (Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %235 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %236 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %237 = %236.3;
  %238 = cast(%237, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %239 = reshape(%238, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %240 = @func_2263(%239) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %241 = %235.1;
  %242 = %240.3;
  (%241, %237, %242)
}

def @func_5830() -> (Tensor[(12, 6, 10), float32],) {
  %243 = @func_5668() /* ty=Tensor[(12, 6, 10), float32] */;
  (%243,)
}

def @func_8014(%var_7941: Tensor[(1040), float32], %var_7969: Tensor[(286), float32], %var_7971: bool, %var_7972: Tensor[(1404), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], Tensor[(286), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), uint32], Tensor[(105, 3), uint32], Tensor[(180), uint16], Tensor[(1040), float64]) {
  %244 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %245 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
  %246 = %245.8;
  %247 = cast(%var_7941, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(1), int32] */;
  %249 = cast(%246, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?), float32] */;
  %251 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %252 = cast(%var_7969, dtype="float32") /* ty=Tensor[(286), float32] */;
  %253 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %254 = cast(%var_7971, dtype="bool") /* ty=bool */;
  %255 = cast(%var_7972, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %256 = reshape(%252, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
  %257 = reshape(%253, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %258 = reshape(%254, newshape=[]) /* ty=bool */;
  %259 = reshape(%255, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %260 = @func_1295(%256, %257, %258, %259) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
  %261 = cast(meta[relay.Constant][27] /* ty=Tensor[(105, 3), uint32] */, dtype="uint32") /* ty=Tensor[(105, 3), uint32] */;
  %262 = reshape(%261, newshape=[5, 9, 7]) /* ty=Tensor[(5, 9, 7), uint32] */;
  %263 = @func_5603(%262) /* ty=(Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) */;
  %264 = cast(%246, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %265 = exp(%264) /* ty=Tensor[(1040), float32] */;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(1040), float64] */;
  %267 = %244.0;
  %268 = divide(%249, %250) /* ty=Tensor[(1040), float32] */;
  %269 = %251.0;
  %270 = @func_6710() /* ty=Tensor[(12, 6, 10), float32] */;
  %271 = %260.9;
  %272 = @func_7199() /* ty=Tensor[(12, 6, 10), float32] */;
  %273 = %263.0;
  %274 = @func_6996() /* ty=Tensor[(180), uint16] */;
  %275 = cos(%266) /* ty=Tensor[(1040), float64] */;
  (%267, %268, %269, %270, %271, %var_7969, meta[relay.Constant][26] /* ty=Tensor[(180), uint16] */, %var_7971, %var_7972, %272, %273, meta[relay.Constant][27] /* ty=Tensor[(105, 3), uint32] */, %274, %275)
}

def @func_3226(%var_3132: Tensor[(13, 10, 8), float32], %var_3175: Tensor[(1152), float32]) -> (Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %276 = cast(%var_3132, dtype="float32") /* ty=Tensor[(13, 10, 8), float32] */;
  %277 = cast(%var_3132, dtype="float32") /* ty=Tensor[(13, 10, 8), float32] */;
  %278 = cast(meta[relay.Constant][28] /* ty=Tensor[(13, 10, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 10, 8), bool] */;
  %279 = shape_of(%var_3132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_3132, dtype="bool") /* ty=Tensor[(13, 10, 8), bool] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %282 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %283 = cast(%var_3175, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %284 = reshape(%283, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %285 = @func_2247(%284) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %286 = cast(%var_3175, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %287 = cast(meta[relay.Constant][29] /* ty=Tensor[(30, 6), uint16] */, dtype="uint16") /* ty=Tensor[(30, 6), uint16] */;
  %288 = cast(meta[relay.Constant][29] /* ty=Tensor[(30, 6), uint16] */, dtype="uint16") /* ty=Tensor[(30, 6), uint16] */;
  %289 = reshape(%286, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %290 = reshape(%287, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %291 = reshape(%288, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %292 = @func_631(%289, %290, %291) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %293 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %294 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %295 = exp(%276) /* ty=Tensor[(13, 10, 8), float32] */;
  %296 = sigmoid(%277) /* ty=Tensor[(13, 10, 8), float32] */;
  %297 = greater(%280, %281) /* ty=Tensor[(13, 10, 8), bool] */;
  %298 = %282.0;
  %299 = %285.2;
  %300 = %292.6;
  %301 = %293.0;
  %302 = %294.0;
  (%295, %296, %297, %298, %299, %var_3175, %300, meta[relay.Constant][29] /* ty=Tensor[(30, 6), uint16] */, %301, %302)
}

def @func_6047(%var_5965: Tensor[(9, 13, 2), int16], %var_6009: Tensor[(24, 48), float32]) -> (Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) {
  %303 = cast(%var_5965, dtype="int16") /* ty=Tensor[(9, 13, 2), int16] */;
  %304 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(9, 13, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(9, 13, 2), int16] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %307 = bitwise_xor(%305, %306) /* ty=Tensor[(9, 13, 2), int16] */;
  %308 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 13, 2), int16] */, dtype="bool") /* ty=Tensor[(9, 13, 2), bool] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="bool") /* ty=Tensor[(9, 13, 2), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = cast(%var_6009, dtype="float32") /* ty=Tensor[(24, 48), float32] */;
  %313 = reshape(%312, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %314 = @func_3258(%313) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %315 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %316 = cast(meta[relay.Constant][31] /* ty=Tensor[(9, 13, 2), int16] */, dtype="float32") /* ty=Tensor[(9, 13, 2), float32] */;
  %317 = logical_or(%310, %311) /* ty=Tensor[(9, 13, 2), bool] */;
  %318 = %314.5;
  %319 = %315.0;
  %320 = acosh(%316) /* ty=Tensor[(9, 13, 2), float32] */;
  (%317, %318, %var_6009, %319, %320)
}

def @func_3981() -> (Tensor[(12, 6, 10), float32],) {
  %321 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %322 = %321.0;
  (%322,)
}

def @func_9171() -> Tensor[(12, 6, 10), float32] {
  %323 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %323.0
}

def @func_4071() -> (Tensor[(12, 6, 10), float32],) {
  %324 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %325 = %324.0;
  (%325,)
}

def @func_10373() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %326 = @func_7799() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %327 = @func_8756() /* ty=Tensor[(12, 6, 10), float32] */;
  %328 = %326.0;
  (%327, %328)
}

def @func_5298() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %329 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %330 = %329.0;
  %331 = cast(%330, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %332 = reshape(%331, newshape=[12, 6, 10]) /* ty=Tensor[(12, 6, 10), float32] */;
  %333 = @func_4858(%332) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), int64], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %334 = %333.4;
  (%330, %334)
}

def @func_5960(%var_5845: Tensor[(1040), float32]) -> (Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(1, 1152), float32], Tensor[(12, 6, 10), bool], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(65, 13), float64], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32]) {
  %335 = cast(%var_5845, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %336 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 1152), float32] */, dtype="float32") /* ty=Tensor[(1, 1152), float32] */;
  %337 = reshape(%335, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
  %338 = reshape(%336, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %339 = @func_3226(%337, %338) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %340 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %343 = log2(%342) /* ty=Tensor[(12, 6, 10), float64] */;
  %344 = cast(%343, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %345 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%341, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %348 = cast(meta[relay.Constant][33] /* ty=Tensor[(65, 13), float64] */, dtype="float64") /* ty=Tensor[(65, 13), float64] */;
  %349 = %339.6;
  %350 = cast(%349, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %351 = reshape(%348, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
  %352 = reshape(%350, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %353 = @func_3595(%351, %352) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %354 = %353.3;
  %355 = cast(%354, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %356 = reshape(%355, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %357 = @func_3427(%356) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %358 = cast(meta[relay.Constant][33] /* ty=Tensor[(65, 13), float64] */, dtype="float64") /* ty=Tensor[(65, 13), float64] */;
  %359 = %357.1;
  %360 = cast(%359, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %361 = reshape(%358, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
  %362 = reshape(%360, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %363 = @func_3595(%361, %362) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %364 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %365 = %363.3;
  %366 = cast(%365, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %367 = reshape(%366, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %368 = @func_2263(%367) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %369 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %370 = less(%346, %347) /* ty=Tensor[(12, 6, 10), bool] */;
  %371 = @func_5668() /* ty=Tensor[(12, 6, 10), float32] */;
  %372 = %364.0;
  %373 = %368.1;
  %374 = %369.0;
  (%349, %var_5845, meta[relay.Constant][32] /* ty=Tensor[(1, 1152), float32] */, %370, %371, %354, meta[relay.Constant][33] /* ty=Tensor[(65, 13), float64] */, %359, %365, %372, %373, %374)
}

def @func_6300(%var_6253: Tensor[(234), int16]) -> (Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %375 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %376 = cast(meta[relay.Constant][35] /* ty=Tensor[(84), int8] */, dtype="int8") /* ty=Tensor[(84), int8] */;
  %377 = cast(meta[relay.Constant][35] /* ty=Tensor[(84), int8] */, dtype="int8") /* ty=Tensor[(84), int8] */;
  %378 = reshape(%376, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), int8] */;
  %379 = reshape(%377, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), int8] */;
  %380 = @func_6198(%378, %379) /* ty=(Tensor[(3, 14, 2), int8], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %381 = cast(%var_6253, dtype="int16") /* ty=Tensor[(234), int16] */;
  %382 = cast(meta[relay.Constant][34] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %383 = reshape(%381, newshape=[9, 13, 2]) /* ty=Tensor[(9, 13, 2), int16] */;
  %384 = reshape(%382, newshape=[24, 48]) /* ty=Tensor[(24, 48), float32] */;
  %385 = @func_6047(%383, %384) /* ty=(Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) */;
  %386 = %385.4;
  %387 = cast(%var_6253, dtype="bool") /* ty=Tensor[(234), bool] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="bool") /* ty=Tensor[(9, 13, 2), bool] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %391 = less_equal(%389, %390) /* ty=Tensor[(9, 13, 2), bool] */;
  %392 = cast(%391, dtype="float32") /* ty=Tensor[(9, 13, 2), float32] */;
  %393 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %394 = cast(meta[relay.Constant][34] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %395 = cast(meta[relay.Constant][36] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %396 = cast(meta[relay.Constant][36] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %397 = reshape(%394, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %398 = reshape(%395, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %399 = reshape(%396, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %400 = @func_631(%397, %398, %399) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %401 = %375.1;
  %402 = %380.0;
  %403 = sin(%392) /* ty=Tensor[(9, 13, 2), float32] */;
  %404 = %393.0;
  %405 = %400.3;
  (%401, meta[relay.Constant][34] /* ty=Tensor[(576, 2), float32] */, %402, meta[relay.Constant][35] /* ty=Tensor[(84), int8] */, %403, %404, %405, meta[relay.Constant][36] /* ty=Tensor[(180), uint16] */)
}

def @func_4186() -> (Tensor[(12, 6, 10), float32],) {
  %406 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %407 = %406.0;
  (%407,)
}

def @func_4291() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %408 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
  %409 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %410 = %408.4;
  %411 = %409.0;
  (%410, %411)
}

def @func_7142() -> (Tensor[(12, 6, 10), float32],) {
  %412 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %413 = %412.0;
  (%413,)
}

def @func_5668() -> Tensor[(12, 6, 10), float32] {
  %414 = @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %414.0
}

def @func_631(%var_529: Tensor[(16, 12, 6), float32], %var_555: Tensor[(180), uint16], %var_623: Tensor[(5, 6, 6), uint16]) -> (Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) {
  %415 = cast(%var_555, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %416 = reshape(%415, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %417 = @func_261(%416) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %420 = reshape(%419, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %421 = @func_261(%420) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %422 = %421.0;
  %423 = cast(%422, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %424 = reshape(%423, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %425 = @func_261(%424) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %426 = cast(%418, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %427 = reshape(%426, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %428 = @func_261(%427) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %429 = cast(%var_529, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %430 = sin(%429) /* ty=Tensor[(16, 12, 6), float32] */;
  %431 = cast(%var_529, dtype="int32") /* ty=Tensor[(16, 12, 6), int32] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="int32") /* ty=Tensor[(16, 12, 6), int32] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %435 = minimum(%433, %434) /* ty=Tensor[(16, 12, 6), int32] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %437 = acos(%436) /* ty=Tensor[(16, 12, 6), float32] */;
  %438 = cast(%437, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
  %439 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%435, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %442 = cast(%422, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %443 = reshape(%442, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %444 = @func_261(%443) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %445 = %428.0;
  %446 = cast(%445, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %447 = reshape(%446, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %448 = @func_261(%447) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %449 = cast(%418, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %450 = reshape(%449, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %451 = @func_261(%450) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %452 = cast(%var_529, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %453 = shape_of(%435, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%435, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %456 = cast(%437, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %457 = cast(%418, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %458 = reshape(%457, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %459 = @func_261(%458) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %460 = %459.0;
  %461 = cast(%var_623, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %465 = %425.0;
  %466 = bitwise_and(%440, %441) /* ty=Tensor[(16, 12, 6), uint32] */;
  %467 = %444.0;
  %468 = %448.0;
  %469 = %451.0;
  %470 = logical_and(%454, %455) /* ty=Tensor[(16, 12, 6), bool] */;
  %471 = cosh(%456) /* ty=Tensor[(16, 12, 6), float64] */;
  %472 = power(%463, %464) /* ty=Tensor[(5, 6, 6), float32] */;
  (%418, %var_555, %422, %465, %445, %466, %467, %468, %469, %470, %471, %472)
}

def @func_7416() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %473 = @func_7199() /* ty=Tensor[(12, 6, 10), float32] */;
  %474 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  (%473, %474)
}

def @func_6158() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %475 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %476 = cast(meta[relay.Constant][37] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
  %477 = cast(meta[relay.Constant][38] /* ty=Tensor[(50, 4), bool] */, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %478 = reshape(%476, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %479 = reshape(%477, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %480 = @func_5705(%478, %479) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %481 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %482 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %483 = %482.0;
  %484 = cast(%483, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %485 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %486 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %487 = %475.0;
  %488 = %480.1;
  %489 = %481.0;
  %490 = atan(%484) /* ty=Tensor[(12, 6, 10), float64] */;
  %491 = %485.0;
  (%486, %487, %488, meta[relay.Constant][37] /* ty=Tensor[(20), bool] */, meta[relay.Constant][38] /* ty=Tensor[(50, 4), bool] */, %489, %490, %491)
}

def @func_2168() -> (Tensor[(12, 6, 10), float32],) {
  %492 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %493 = %492.1;
  (%493,)
}

def @func_2502() -> Tensor[(12, 6, 10), float32] {
  %494 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %494.0
}

def @func_3049(%var_2956: Tensor[(12, 6, 10), float32], %var_2986: Tensor[(1152), float32], %var_3000: Tensor[(180, 13), uint16], %var_3022: bool) -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float64], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(180, 13), bool], Tensor[(576, 2), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %495 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %496 = %495.1;
  %497 = cast(%var_2956, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%496, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %501 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %502 = %501.0;
  %503 = cast(%var_2956, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %504 = shape_of(%502, dtype="int32") /* ty=Tensor[(3), int32] */;
  %505 = cast(%502, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %506 = dyn.reshape(%503, %504, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %507 = cast(meta[relay.Constant][39] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %508 = cast(%var_2986, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %509 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %510 = reshape(%507, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %511 = reshape(%508, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %512 = reshape(%509, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %513 = @func_1120(%510, %511, %512) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %514 = %513.3;
  %515 = cast(%514, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %516 = reshape(%515, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %517 = @func_261(%516) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %518 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %519 = cast(%514, dtype="bool") /* ty=Tensor[(180, 1), bool] */;
  %520 = cast(%var_3000, dtype="bool") /* ty=Tensor[(180, 13), bool] */;
  %521 = cast(meta[relay.Constant][41] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
  %522 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %523 = cast(%var_3022, dtype="bool") /* ty=bool */;
  %524 = cast(meta[relay.Constant][42] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %525 = reshape(%521, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
  %526 = reshape(%522, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %527 = reshape(%523, newshape=[]) /* ty=bool */;
  %528 = reshape(%524, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %529 = @func_1295(%525, %526, %527, %528) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
  %530 = cast(%496, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %531 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %532 = floor_mod(%499, %500) /* ty=Tensor[(12, 6, 10), float64] */;
  %533 = floor_divide(%505, %506) /* ty=Tensor[(12, 6, 10), float64] */;
  %534 = %517.0;
  %535 = %518.0;
  %536 = greater_equal(%519, %520) /* ty=Tensor[(180, 13), bool] */;
  %537 = %529.2;
  %538 = exp(%530) /* ty=Tensor[(12, 6, 10), float64] */;
  %539 = %531.0;
  (%532, %533, meta[relay.Constant][39] /* ty=Tensor[(135), float32] */, %var_2986, meta[relay.Constant][40] /* ty=Tensor[(180), uint16] */, %534, %535, %536, %537, meta[relay.Constant][41] /* ty=Tensor[(286), float32] */, %var_3022, meta[relay.Constant][42] /* ty=Tensor[(1404), bool] */, %538, %539)
}

def @func_5807() -> Tensor[(12, 6, 10), float32] {
  %540 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %540.0
}

def @func_4858(%var_4746: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool], Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), int64], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %541 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %542 = %541.0;
  %543 = cast(%var_4746, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %548 = cast(meta[relay.Constant][43] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %549 = cast(meta[relay.Constant][44] /* ty=Tensor[(48, 24), float32] */, dtype="float32") /* ty=Tensor[(48, 24), float32] */;
  %550 = reshape(%548, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
  %551 = reshape(%549, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %552 = @func_2696(%550, %551) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
  %553 = cast(meta[relay.Constant][43] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %554 = cast(meta[relay.Constant][44] /* ty=Tensor[(48, 24), float32] */, dtype="float32") /* ty=Tensor[(48, 24), float32] */;
  %555 = reshape(%553, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
  %556 = reshape(%554, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %557 = @func_2696(%555, %556) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
  %558 = %557.5;
  %559 = cast(meta[relay.Constant][44] /* ty=Tensor[(48, 24), float32] */, dtype="int64") /* ty=Tensor[(48, 24), int64] */;
  %560 = shape_of(%558, dtype="int32") /* ty=Tensor[(1), int32] */;
  %561 = cast(%558, dtype="int64") /* ty=Tensor[(1152), int64] */;
  %562 = dyn.reshape(%559, %560, newshape=[]) /* ty=Tensor[(?), int64] */;
  %563 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %564 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %565 = logical_or(%545, %546) /* ty=Tensor[(12, 6, 10), bool] */;
  %566 = %547.1;
  %567 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
  %568 = %552.0;
  %569 = bitwise_and(%561, %562) /* ty=Tensor[(1152), int64] */;
  %570 = %563.0;
  %571 = %564.0;
  (%565, meta[relay.Constant][43] /* ty=Tensor[(1404), bool] */, %566, %567, %568, %569, %570, %571)
}

def @func_2655(%var_2650: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %572 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %573 = cast(meta[relay.Constant][45] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %574 = cast(%var_2650, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %575 = cast(%var_2650, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %576 = reshape(%573, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %577 = reshape(%574, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %578 = reshape(%575, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %579 = @func_631(%576, %577, %578) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %580 = %572.0;
  %581 = %579.3;
  (%580, %581, meta[relay.Constant][45] /* ty=Tensor[(1152), float32] */, %var_2650)
}

def @func_2883() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %582 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %583 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %584 = %582.1;
  %585 = %583.0;
  (%584, %585)
}

def @func_2860() -> (Tensor[(12, 6, 10), float32],) {
  %586 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %587 = %586.0;
  (%587,)
}

def @func_9506() -> (Tensor[(12, 6, 10), float32],) {
  %588 = @func_6945() /* ty=Tensor[(12, 6, 10), float32] */;
  (%588,)
}

def @func_4715() -> (Tensor[(12, 6, 10), float32],) {
  %589 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %590 = %589.1;
  (%590,)
}

def @func_7479() -> Tensor[(1152), float32] {
  %591 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %591.3
}

def @func_6511() -> (Tensor[(12, 6, 10), float64],) {
  %592 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %593 = %592.1;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %595 = erf(%594) /* ty=Tensor[(12, 6, 10), float64] */;
  (%595,)
}

def @func_6348(%var_6314: Tensor[(50, 4), bool]) -> (Tensor[(50, 4), bool],) {
  %596 = @func_6158() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %597 = %596.4;
  %598 = cast(%var_6314, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %599 = shape_of(%597, dtype="int32") /* ty=Tensor[(2), int32] */;
  %600 = cast(%597, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %602 = logical_and(%600, %601) /* ty=Tensor[(50, 4), bool] */;
  (%602,)
}

def @func_10300(%var_10236: Tensor[(14, 16, 16), bool], %var_10261: Tensor[(1, 490), bool]) -> (Tensor[(14, 16, 16), uint8], Tensor[(14, 16, 16), float32], Tensor[(1152), float32], Tensor[(1, 490), bool], Tensor[(14, 16, 16), float64], Tensor[(5, 6, 6), uint16], Tensor[(135), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32]) {
  %603 = cast(%var_10236, dtype="uint8") /* ty=Tensor[(14, 16, 16), uint8] */;
  %604 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(14, 16, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %605 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 16, 16), bool] */, dtype="uint8") /* ty=Tensor[(14, 16, 16), uint8] */;
  %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %607 = cast(meta[relay.Constant][46] /* ty=Tensor[(14, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
  %608 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(14, 16, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = logical_or(%609, %610) /* ty=Tensor[(14, 16, 16), bool] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(14, 16, 16), float32] */;
  %613 = cast(%var_10261, dtype="bool") /* ty=Tensor[(1, 490), bool] */;
  %614 = reshape(%613, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %615 = @func_10054(%614) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(7, 70), bool], Tensor[(490), bool], Tensor[(845), float64], Tensor[(1152), float32]) */;
  %616 = cast(meta[relay.Constant][47] /* ty=Tensor[(14, 16, 16), bool] */, dtype="float64") /* ty=Tensor[(14, 16, 16), float64] */;
  %617 = cast(meta[relay.Constant][48] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %618 = %615.5;
  %619 = cast(%618, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %620 = cast(meta[relay.Constant][49] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %621 = reshape(%617, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %622 = reshape(%619, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %623 = reshape(%620, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %624 = @func_1120(%621, %622, %623) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %625 = @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %626 = right_shift(%605, %606) /* ty=Tensor[(14, 16, 16), uint8] */;
  %627 = tan(%612) /* ty=Tensor[(14, 16, 16), float32] */;
  %628 = erf(%616) /* ty=Tensor[(14, 16, 16), float64] */;
  %629 = %624.1;
  %630 = %625.0;
  %631 = @func_7881() /* ty=Tensor[(1152), float32] */;
  (%626, %627, %618, %var_10261, %628, %629, meta[relay.Constant][48] /* ty=Tensor[(135), float32] */, meta[relay.Constant][49] /* ty=Tensor[(180), uint16] */, %630, %631)
}

def @func_7799() -> (Tensor[(12, 6, 10), float32],) {
  %632 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
  (%632,)
}

def @func_4359(%var_4345: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(13, 5, 13), float64], Tensor[(845), float64], Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %633 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %634 = cast(%var_4345, dtype="float64") /* ty=Tensor[(845), float64] */;
  %635 = cast(meta[relay.Constant][50] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %636 = reshape(%634, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
  %637 = reshape(%635, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %638 = @func_3595(%636, %637) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %639 = %638.0;
  %640 = cast(%639, dtype="float64") /* ty=Tensor[(13, 5, 13), float64] */;
  %641 = cast(meta[relay.Constant][50] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %642 = reshape(%640, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
  %643 = reshape(%641, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %644 = @func_3595(%642, %643) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %645 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %646 = %633.0;
  %647 = %644.3;
  %648 = %645.0;
  (%646, %639, %var_4345, meta[relay.Constant][50] /* ty=Tensor[(180), uint16] */, %647, %648)
}

def @func_6666() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %649 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
  %650 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %651 = %649.6;
  %652 = %650.0;
  (%651, %652)
}

def @func_7089() -> Tensor[(12, 6, 10), float32] {
  %653 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %653.2
}

def @func_6945() -> Tensor[(12, 6, 10), float32] {
  @func_5668() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_7313() -> (Tensor[(12, 6, 10), float32],) {
  %654 = @func_6911() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %655 = %654.0;
  (%655,)
}

def @func_7110() -> Tensor[(180), float64] {
  %656 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %657 = %656.1;
  %658 = cast(%657, dtype="float64") /* ty=Tensor[(180), float64] */;
  atan(%658) /* ty=Tensor[(180), float64] */
}

def @func_6490(%var_6408: Tensor[(315), uint32]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(234), int16], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), int8], Tensor[(12, 6, 10), float32]) {
  %659 = cast(meta[relay.Constant][51] /* ty=Tensor[(234), int16] */, dtype="int16") /* ty=Tensor[(234), int16] */;
  %660 = reshape(%659, newshape=[234]) /* ty=Tensor[(234), int16] */;
  %661 = @func_6300(%660) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %662 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %663 = cast(%var_6408, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %664 = reshape(%663, newshape=[5, 9, 7]) /* ty=Tensor[(5, 9, 7), uint32] */;
  %665 = @func_5603(%664) /* ty=(Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) */;
  %666 = %665.1;
  %667 = cast(%var_6408, dtype="int8") /* ty=Tensor[(315), int8] */;
  %668 = shape_of(%666, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%666, dtype="int8") /* ty=Tensor[(5, 9, 7), int8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %671 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %672 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
  %673 = %661.6;
  %674 = %662.1;
  %675 = add(%669, %670) /* ty=Tensor[(5, 9, 7), int8] */;
  %676 = %671.1;
  (%672, %673, meta[relay.Constant][51] /* ty=Tensor[(234), int16] */, %674, %675, %676)
}

def @func_8756() -> Tensor[(12, 6, 10), float32] {
  %677 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %677.0
}

def @func_6866(%var_6848: Tensor[(20, 1), bool], %var_6849: Tensor[(50, 4), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20, 1), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %678 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %679 = cast(%var_6848, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %680 = cast(%var_6849, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %681 = reshape(%679, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %682 = reshape(%680, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %683 = @func_5705(%681, %682) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %684 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %685 = cast(%var_6848, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %686 = cast(%var_6849, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %687 = reshape(%685, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %688 = reshape(%686, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %689 = @func_5705(%687, %688) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %690 = %678.0;
  %691 = %683.1;
  %692 = %684.0;
  %693 = %689.1;
  (%690, %691, %var_6848, %var_6849, %692, %693)
}

def @main() -> Tensor[(180), float32] {
  %694 = @func_4291() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %695 = %694.0;
  %696 = cast(%695, dtype="float32") /* ty=Tensor[(180), float32] */;
  cos(%696) /* ty=Tensor[(180), float32] */
}

def @func_7881() -> Tensor[(1152), float32] {
  %697 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %698 = %697.3;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(1152), float32] */;
  atan(%699) /* ty=Tensor[(1152), float32] */
}

def @func_3867() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %700 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %701 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %702 = %700.0;
  (%701, %702)
}

def @func_7693(%var_7674: Tensor[(1152), float32]) -> (Tensor[(1152), float32],) {
  %703 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %704 = %703.2;
  %705 = cast(%var_7674, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %706 = shape_of(%704, dtype="int32") /* ty=Tensor[(1), int32] */;
  %707 = cast(%704, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?), float32] */;
  %709 = mod(%707, %708) /* ty=Tensor[(1152), float32] */;
  (%709,)
}

def @func_8903(%var_8868: Tensor[(845), float64], %var_8869: Tensor[(3, 60), uint16], %var_8898: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(3, 60), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1040), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(845), bool]) {
  %710 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %711 = cast(%var_8868, dtype="float64") /* ty=Tensor[(845), float64] */;
  %712 = cast(%var_8869, dtype="uint16") /* ty=Tensor[(3, 60), uint16] */;
  %713 = reshape(%711, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
  %714 = reshape(%712, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %715 = @func_3595(%713, %714) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %716 = @func_8504() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %717 = cast(meta[relay.Constant][52] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %718 = cast(meta[relay.Constant][53] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %719 = reshape(%717, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
  %720 = reshape(%718, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %721 = @func_3226(%719, %720) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %722 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %723 = cast(%var_8868, dtype="float64") /* ty=Tensor[(845), float64] */;
  %724 = sinh(%723) /* ty=Tensor[(845), float64] */;
  %725 = cast(%var_8898, dtype="bool") /* ty=Tensor[(845), bool] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(1), int32] */;
  %727 = cast(%724, dtype="bool") /* ty=Tensor[(845), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?), bool] */;
  %729 = %710.0;
  %730 = %715.3;
  %731 = %716.0;
  %732 = %721.5;
  %733 = %722.2;
  %734 = less(%727, %728) /* ty=Tensor[(845), bool] */;
  (%729, %730, %var_8869, %731, %732, meta[relay.Constant][52] /* ty=Tensor[(1040), float32] */, meta[relay.Constant][53] /* ty=Tensor[(1152), float32] */, %733, %734)
}

def @func_6996() -> Tensor[(180), uint16] {
  %735 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %735.1
}

def @func_8536() -> (Tensor[(1152), float32],) {
  %736 = @func_8173() /* ty=(Tensor[(1152), float32],) */;
  %737 = %736.0;
  (%737,)
}

def @func_5170(%var_5112: uint32, %var_5113: Tensor[(4, 3, 13), uint32], %var_5125: Tensor[(180), uint16], %var_5144: Tensor[(5, 6, 6), float64]) -> (Tensor[(4, 3, 13), uint32], Tensor[(180), uint16], Tensor[(5, 6, 6), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %738 = cast(%var_5112, dtype="uint32") /* ty=uint32 */;
  %739 = cast(%var_5113, dtype="uint32") /* ty=Tensor[(4, 3, 13), uint32] */;
  %740 = cast(%var_5125, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %741 = reshape(%740, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %742 = @func_261(%741) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
  %745 = sinh(%744) /* ty=Tensor[(5, 6, 6), float64] */;
  %746 = cast(%var_5144, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %748 = cast(%745, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %750 = cast(%var_5144, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %751 = reshape(%750, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %752 = @func_3427(%751) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %753 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %754 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %755 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %756 = subtract(%738, %739) /* ty=Tensor[(4, 3, 13), uint32] */;
  %757 = divide(%748, %749) /* ty=Tensor[(5, 6, 6), float32] */;
  %758 = %752.1;
  %759 = %753.1;
  %760 = %754.1;
  %761 = %755.0;
  (%756, %var_5125, %757, %758, %759, %760, %761)
}

def @func_10054(%var_10032: Tensor[(490), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(7, 70), bool], Tensor[(490), bool], Tensor[(845), float64], Tensor[(1152), float32]) {
  %762 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %763 = cast(%var_10032, dtype="bool") /* ty=Tensor[(490), bool] */;
  %764 = cast(meta[relay.Constant][54] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %765 = reshape(%763, newshape=[7, 70]) /* ty=Tensor[(7, 70), bool] */;
  %766 = reshape(%764, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %767 = @func_7624(%765, %766) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) */;
  %768 = %762.0;
  %769 = @func_7077() /* ty=Tensor[(12, 6, 10), float64] */;
  %770 = %767.1;
  %771 = @func_7479() /* ty=Tensor[(1152), float32] */;
  (%768, %769, %770, %var_10032, meta[relay.Constant][54] /* ty=Tensor[(845), float64] */, %771)
}

def @func_7039() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %772 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %773 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %774 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %775 = %772.0;
  %776 = %773.0;
  %777 = %774.0;
  (%775, %776, %777)
}

def @func_7236() -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %778 = @func_7142() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %779 = @func_7077() /* ty=Tensor[(12, 6, 10), float64] */;
  %780 = %778.0;
  (%779, %780)
}

def @func_2562() -> (Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %781 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %782 = cast(meta[relay.Constant][55] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %783 = reshape(%782, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %784 = @func_2247(%783) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %785 = %784.2;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %787 = reshape(%786, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %788 = @func_2247(%787) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %789 = %781.0;
  %790 = %788.3;
  (%789, %785, meta[relay.Constant][55] /* ty=Tensor[(1152), float32] */, %790)
}

def @func_5062(%var_5027: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %791 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %792 = cast(meta[relay.Constant][56] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %793 = cast(%var_5027, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %794 = cast(%var_5027, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %795 = reshape(%792, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %796 = reshape(%793, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %797 = reshape(%794, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %798 = @func_631(%795, %796, %797) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %799 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %800 = %799.0;
  %801 = cast(%800, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %802 = @func_4291() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %803 = %791.0;
  %804 = %798.11;
  %805 = asinh(%801) /* ty=Tensor[(12, 6, 10), float32] */;
  %806 = %802.1;
  (%803, %804, meta[relay.Constant][56] /* ty=Tensor[(1152), float32] */, %var_5027, %805, %806)
}

def @func_9155() -> Tensor[(1152), float32] {
  %807 = @func_8173() /* ty=(Tensor[(1152), float32],) */;
  %807.0
}

def @func_7771() -> Tensor[(12, 6, 10), uint64] {
  %808 = @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %809 = %808.0;
  %810 = cast(meta[relay.Constant][57] /* ty=Tensor[(12, 6, 10), float32] */, dtype="uint64") /* ty=Tensor[(12, 6, 10), uint64] */;
  %811 = shape_of(%809, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%809, dtype="uint64") /* ty=Tensor[(12, 6, 10), uint64] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%812, %813) /* ty=Tensor[(12, 6, 10), uint64] */
}

def @func_7077() -> Tensor[(12, 6, 10), float64] {
  %814 = @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */;
  %814.0
}

def @func_8450() -> (Tensor[(12, 6, 10), float32],) {
  %815 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
  (%815,)
}

def @func_3561() -> Tensor[(11, 2, 14), float32] {
  %816 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 14), float32] */;
  tan(%816) /* ty=Tensor[(11, 2, 14), float32] */
}

def @func_8223() -> Tensor[(12, 6, 10), float32] {
  @func_5807() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8504() -> (Tensor[(12, 6, 10), float32],) {
  %817 = @func_6666() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %818 = %817.0;
  (%818,)
}

def @func_2625() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %819 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %820 = %819.0;
  %821 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  (%820, %821)
}

def @func_9975() -> Tensor[(12, 6, 10), float32] {
  @func_9230() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_4169() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %822 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %823 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %824 = %822.0;
  %825 = %823.0;
  (%824, %825)
}

def @func_6570() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %826 = @func_4291() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %827 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %828 = %826.0;
  %829 = %827.0;
  (%828, %829)
}

def @func_6068() -> (Tensor[(11, 2, 14), float32],) {
  %830 = @func_3561() /* ty=Tensor[(11, 2, 14), float32] */;
  (%830,)
}

def @func_9473() -> (Tensor[(12, 6, 10), float32],) {
  %831 = @func_8556() /* ty=Tensor[(12, 6, 10), float32] */;
  (%831,)
}

def @func_5603(%var_5587: Tensor[(5, 9, 7), uint32]) -> (Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) {
  %832 = cast(%var_5587, dtype="uint32") /* ty=Tensor[(5, 9, 7), uint32] */;
  %833 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %834 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="uint32") /* ty=Tensor[(5, 9, 7), uint32] */;
  %835 = dyn.reshape(%832, %833, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %836 = cast(meta[relay.Constant][60] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="uint8") /* ty=Tensor[(5, 9, 7), uint8] */;
  %837 = shape_of(%var_5587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %838 = cast(%var_5587, dtype="uint8") /* ty=Tensor[(5, 9, 7), uint8] */;
  %839 = dyn.reshape(%836, %837, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %840 = bitwise_xor(%838, %839) /* ty=Tensor[(5, 9, 7), uint8] */;
  %841 = cast(%840, dtype="uint16") /* ty=Tensor[(5, 9, 7), uint16] */;
  %842 = shape_of(meta[relay.Constant][59] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(meta[relay.Constant][59] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="uint16") /* ty=Tensor[(5, 9, 7), uint16] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %845 = logical_xor(%834, %835) /* ty=Tensor[(5, 9, 7), uint32] */;
  %846 = minimum(%843, %844) /* ty=Tensor[(5, 9, 7), uint16] */;
  (%845, %846)
}

def @func_8995() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float64], Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(1152), float32]) {
  %847 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %848 = %847.0;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %850 = cast(meta[relay.Constant][61] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %851 = cast(meta[relay.Constant][62] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %852 = @func_6996() /* ty=Tensor[(180), uint16] */;
  %853 = cast(%852, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %854 = reshape(%850, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %855 = reshape(%851, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %856 = reshape(%853, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %857 = @func_1120(%854, %855, %856) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %858 = cast(meta[relay.Constant][62] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %859 = sigmoid(%849) /* ty=Tensor[(12, 6, 10), float64] */;
  %860 = %857.3;
  %861 = asinh(%858) /* ty=Tensor[(1152), float32] */;
  (%852, %859, %860, meta[relay.Constant][61] /* ty=Tensor[(135), float32] */, %861)
}

def @func_10529() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), uint64]) {
  %862 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %863 = %862.0;
  %864 = @func_9208() /* ty=Tensor[(12, 6, 10), float32] */;
  %865 = @func_7771() /* ty=Tensor[(12, 6, 10), uint64] */;
  (%863, %864, %865)
}

def @func_9230() -> Tensor[(12, 6, 10), float32] {
  %866 = @func_7416() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %866.0
}

def @func_3595(%var_3572: Tensor[(13, 5, 13), float64], %var_3587: Tensor[(180), uint16]) -> (Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) {
  %867 = cast(%var_3572, dtype="float64") /* ty=Tensor[(13, 5, 13), float64] */;
  %868 = cast(%var_3572, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %869 = cast(%var_3587, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %870 = reshape(%869, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %871 = @func_3427(%870) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %872 = cosh(%867) /* ty=Tensor[(13, 5, 13), float64] */;
  %873 = exp(%868) /* ty=Tensor[(13, 5, 13), float32] */;
  %874 = %871.2;
  (%872, %873, %874, %var_3587)
}

def @func_10466(%var_10453: Tensor[(11, 6, 13), int32]) -> (Tensor[(11, 6, 13), int32],) {
  %875 = cast(%var_10453, dtype="int32") /* ty=Tensor[(11, 6, 13), int32] */;
  %876 = shape_of(meta[relay.Constant][63] /* ty=Tensor[(11, 6, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(meta[relay.Constant][63] /* ty=Tensor[(11, 6, 13), int32] */, dtype="int32") /* ty=Tensor[(11, 6, 13), int32] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %879 = right_shift(%877, %878) /* ty=Tensor[(11, 6, 13), int32] */;
  (%879,)
}

def @func_9116() -> (Tensor[(12, 6, 10), float32],) {
  %880 = @func_8556() /* ty=Tensor[(12, 6, 10), float32] */;
  (%880,)
}

def @func_9692() -> (Tensor[(12, 6, 10), float32],) {
  %881 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %882 = %881.1;
  (%882,)
}

def @func_9562() -> Tensor[(12, 6, 10), float32] {
  %883 = @func_9473() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %883.0
}

def @func_10613() -> Tensor[(180), uint16] {
  %884 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %884.1
}

def @func_6911() -> (Tensor[(12, 6, 10), float32],) {
  %885 = @func_6710() /* ty=Tensor[(12, 6, 10), float32] */;
  (%885,)
}

def @func_8173() -> (Tensor[(1152), float32],) {
  %886 = @func_7881() /* ty=Tensor[(1152), float32] */;
  (%886,)
}

def @func_8556() -> Tensor[(12, 6, 10), float32] {
  %887 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %887.0
}

def @func_2402() -> (Tensor[(12, 6, 10), float32],) {
  %888 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %889 = %888.1;
  (%889,)
}

def @func_6710() -> Tensor[(12, 6, 10), float32] {
  @func_5807() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_3669() -> (Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) {
  %890 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %891 = %890.3;
  %892 = cast(%891, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %893 = reshape(%892, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %894 = @func_2263(%893) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %895 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %896 = %895.1;
  %897 = cast(%896, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %898 = reshape(%897, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %899 = @func_3258(%898) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %900 = %894.2;
  %901 = %899.2;
  %902 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  (%891, %900, %896, %901, %902)
}

def @func_5222(%var_5208: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool],) {
  %903 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %904 = %903.1;
  %905 = cast(%var_5208, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
  %907 = cast(%904, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %909 = logical_and(%907, %908) /* ty=Tensor[(12, 6, 10), bool] */;
  (%909,)
}

def @func_7624(%var_7605: Tensor[(7, 70), bool], %var_7614: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) {
  %910 = @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %911 = cast(%var_7605, dtype="bool") /* ty=Tensor[(7, 70), bool] */;
  %912 = cast(%var_7605, dtype="bool") /* ty=Tensor[(7, 70), bool] */;
  %913 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %914 = cast(meta[relay.Constant][64] /* ty=Tensor[(65, 13), float64] */, dtype="float64") /* ty=Tensor[(65, 13), float64] */;
  %915 = reshape(%911, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), bool] */;
  %916 = reshape(%912, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), bool] */;
  %917 = reshape(%913, newshape=[]) /* ty=int32 */;
  %918 = reshape(%914, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %919 = @func_4572(%915, %916, %917, %918) /* ty=(Tensor[(5, 14, 7), bool], Tensor[(180), uint16], Tensor[(180), uint16], int32, Tensor[(2184), int32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(845), float64], Tensor[(5, 6, 6), uint16]) */;
  %920 = %919.9;
  %921 = cast(%var_7614, dtype="bool") /* ty=Tensor[(845), bool] */;
  %922 = shape_of(%920, dtype="int32") /* ty=Tensor[(1), int32] */;
  %923 = cast(%920, dtype="bool") /* ty=Tensor[(845), bool] */;
  %924 = dyn.reshape(%921, %922, newshape=[]) /* ty=Tensor[(?), bool] */;
  %925 = %910.0;
  %926 = equal(%923, %924) /* ty=Tensor[(845), bool] */;
  (%925, %var_7605, -2 /* ty=int32 */, meta[relay.Constant][64] /* ty=Tensor[(65, 13), float64] */, %926)
}

def @func_3689() -> Tensor[(12, 6, 10), float32] {
  %927 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %927.0
}

def @func_9985() -> Tensor[(12, 6, 10), float32] {
  %928 = @func_7360() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %928.0
}

def @func_7659(%var_7629: Tensor[(3, 3, 2), float64]) -> (Tensor[(3, 3, 2), bool], Tensor[(12, 6, 10), float32]) {
  %929 = cast(%var_7629, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %930 = rsqrt(%929) /* ty=Tensor[(3, 3, 2), float64] */;
  %931 = cast(%930, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %932 = shape_of(%var_7629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%var_7629, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %935 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %936 = not_equal(%933, %934) /* ty=Tensor[(3, 3, 2), bool] */;
  %937 = %935.0;
  (%936, %937)
}

def @func_8076(%var_8043: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(48, 24), float32], Tensor[(180), uint16], Tensor[(9, ?, 15), int8], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %938 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %939 = cast(meta[relay.Constant][66] /* ty=Tensor[(135, 1), float32] */, dtype="float32") /* ty=Tensor[(135, 1), float32] */;
  %940 = cast(meta[relay.Constant][65] /* ty=Tensor[(48, 24), float32] */, dtype="float32") /* ty=Tensor[(48, 24), float32] */;
  %941 = cast(%var_8043, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %942 = reshape(%939, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %943 = reshape(%940, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %944 = reshape(%941, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %945 = @func_1120(%942, %943, %944) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %946 = %945.0;
  %947 = cast(%946, dtype="float64") /* ty=Tensor[(9, ?, 15), float64] */;
  %948 = atan(%947) /* ty=Tensor[(9, ?, 15), float64] */;
  %949 = cast(meta[relay.Constant][66] /* ty=Tensor[(135, 1), float32] */, dtype="int8") /* ty=Tensor[(135, 1), int8] */;
  %950 = shape_of(%948, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%948, dtype="int8") /* ty=Tensor[(9, ?, 15), int8] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %953 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %954 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %955 = %938.0;
  %956 = bitwise_and(%951, %952) /* ty=Tensor[(9, ?, 15), int8] */;
  %957 = %953.1;
  %958 = %954.0;
  (%955, meta[relay.Constant][65] /* ty=Tensor[(48, 24), float32] */, %var_8043, %956, %957, %958)
}

def @func_9432(%var_9425: Tensor[(1404), bool], %var_9426: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], bool, Tensor[(1404), bool], Tensor[(1152), float32]) {
  %959 = cast(%var_9425, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %960 = cast(%var_9426, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %961 = reshape(%959, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
  %962 = reshape(%960, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %963 = @func_2696(%961, %962) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
  %964 = @func_7089() /* ty=Tensor[(12, 6, 10), float32] */;
  %965 = @func_5807() /* ty=Tensor[(12, 6, 10), float32] */;
  %966 = %963.2;
  (%964, %965, %966, %var_9425, %var_9426)
}

def @func_5093() -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %967 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %968 = cast(meta[relay.Constant][67] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %969 = reshape(%968, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %970 = @func_3427(%969) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %971 = %967.0;
  %972 = %970.1;
  (%971, %972, meta[relay.Constant][67] /* ty=Tensor[(180), uint16] */)
}

def @func_9898(%var_9783: Tensor[(20), bool], %var_9802: Tensor[(234), int16], %var_9832: Tensor[(2, 1092), int32], %var_9863: Tensor[(231), bool], %var_9893: Tensor[(234), int16]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(288, 4), float32], Tensor[(10, 2, 10), bool], Tensor[(20), bool], Tensor[(200), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(9, 13, 2), bool], Tensor[(40, 26), float64], Tensor[(180), uint16], int32, Tensor[(2, 1092), int32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(33), uint32], Tensor[(231), bool], Tensor[(40, 26), bool], Tensor[(12, 6, 10), float32], Tensor[(234), float64]) {
  %973 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %974 = @func_8450() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %975 = cast(%var_9783, dtype="bool") /* ty=Tensor[(20), bool] */;
  %976 = cast(meta[relay.Constant][69] /* ty=Tensor[(200), bool] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %977 = reshape(%975, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %978 = reshape(%976, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %979 = @func_5705(%977, %978) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %980 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %981 = cast(%var_9802, dtype="int16") /* ty=Tensor[(234), int16] */;
  %982 = reshape(%981, newshape=[234]) /* ty=Tensor[(234), int16] */;
  %983 = @func_6300(%982) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %984 = cast(%var_9802, dtype="int16") /* ty=Tensor[(234), int16] */;
  %985 = cast(meta[relay.Constant][68] /* ty=Tensor[(288, 4), float32] */, dtype="float32") /* ty=Tensor[(288, 4), float32] */;
  %986 = reshape(%984, newshape=[9, 13, 2]) /* ty=Tensor[(9, 13, 2), int16] */;
  %987 = reshape(%985, newshape=[24, 48]) /* ty=Tensor[(24, 48), float32] */;
  %988 = @func_6047(%986, %987) /* ty=(Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) */;
  %989 = cast(meta[relay.Constant][68] /* ty=Tensor[(288, 4), float32] */, dtype="float32") /* ty=Tensor[(288, 4), float32] */;
  %990 = reshape(%989, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %991 = @func_3258(%990) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %992 = %991.3;
  %993 = cast(meta[relay.Constant][70] /* ty=Tensor[(40, 26), float32] */, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %994 = shape_of(%992, dtype="int32") /* ty=Tensor[(2), int32] */;
  %995 = cast(%992, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %997 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %998 = cast(%var_9832, dtype="int32") /* ty=Tensor[(2, 1092), int32] */;
  %999 = %983.6;
  %1000 = cast(%999, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %1001 = reshape(%997, newshape=[]) /* ty=int32 */;
  %1002 = reshape(%998, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), int32] */;
  %1003 = reshape(%1000, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1004 = @func_3757(%1001, %1002, %1003) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */;
  %1005 = cast(-7 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %1006 = cast(meta[relay.Constant][71] /* ty=Tensor[(33), uint32] */, dtype="uint32") /* ty=Tensor[(33), uint32] */;
  %1007 = cast(%var_9863, dtype="bool") /* ty=Tensor[(231), bool] */;
  %1008 = reshape(%1005, newshape=[]) /* ty=uint32 */;
  %1009 = reshape(%1006, newshape=[3, 11, 1]) /* ty=Tensor[(3, 11, 1), uint32] */;
  %1010 = reshape(%1007, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), bool] */;
  %1011 = @func_8441(%1008, %1009, %1010) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %1012 = cast(meta[relay.Constant][70] /* ty=Tensor[(40, 26), float32] */, dtype="bool") /* ty=Tensor[(40, 26), bool] */;
  %1013 = shape_of(%992, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1014 = cast(%992, dtype="bool") /* ty=Tensor[(40, 26), bool] */;
  %1015 = dyn.reshape(%1012, %1013, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1016 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1017 = cast(%var_9893, dtype="float64") /* ty=Tensor[(234), float64] */;
  %1018 = shape_of(%var_9802, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1019 = cast(%var_9802, dtype="float64") /* ty=Tensor[(234), float64] */;
  %1020 = dyn.reshape(%1017, %1018, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1021 = %973.2;
  %1022 = %974.0;
  %1023 = %979.0;
  %1024 = %980.0;
  %1025 = %988.0;
  %1026 = mod(%995, %996) /* ty=Tensor[(40, 26), float64] */;
  %1027 = %1004.3;
  %1028 = @func_7089() /* ty=Tensor[(12, 6, 10), float32] */;
  %1029 = %1011.2;
  %1030 = greater_equal(%1014, %1015) /* ty=Tensor[(40, 26), bool] */;
  %1031 = %1016.0;
  %1032 = mod(%1019, %1020) /* ty=Tensor[(234), float64] */;
  (%1021, %1022, meta[relay.Constant][68] /* ty=Tensor[(288, 4), float32] */, %1023, %var_9783, meta[relay.Constant][69] /* ty=Tensor[(200), bool] */, %1024, %999, %1025, %1026, %1027, -7 /* ty=int32 */, %var_9832, %1028, %1029, meta[relay.Constant][71] /* ty=Tensor[(33), uint32] */, %var_9863, %1030, %1031, %1032)
}

def @func_4650() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1033 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1034 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1035 = %1033.0;
  %1036 = %1034.0;
  (%1035, %1036)
}

def @func_10072(%var_10067: Tensor[(18, 78), bool]) -> (Tensor[(11, 2, 14), float32], Tensor[(12, 6, 10), float32], Tensor[(18, 78), bool], Tensor[(4, 288), float32]) {
  %1037 = @func_6068() /* ty=(Tensor[(11, 2, 14), float32],) */;
  %1038 = cast(%var_10067, dtype="bool") /* ty=Tensor[(18, 78), bool] */;
  %1039 = cast(meta[relay.Constant][72] /* ty=Tensor[(4, 288), float32] */, dtype="float32") /* ty=Tensor[(4, 288), float32] */;
  %1040 = reshape(%1038, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
  %1041 = reshape(%1039, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1042 = @func_2696(%1040, %1041) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
  %1043 = %1037.0;
  %1044 = %1042.0;
  (%1043, %1044, %var_10067, meta[relay.Constant][72] /* ty=Tensor[(4, 288), float32] */)
}

def @func_5727() -> (Tensor[(12, 6, 10), float32],) {
  %1045 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1046 = %1045.0;
  (%1046,)
}

def @func_3427(%var_3412: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %1047 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1048 = cast(%var_3412, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1049 = reshape(%1048, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1050 = @func_261(%1049) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %1051 = %1047.0;
  %1052 = %1050.0;
  (%1051, %1052, %var_3412)
}

def @func_7811(%var_7805: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32]) {
  %1053 = @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1054 = cast(%var_7805, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1055 = reshape(%1054, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1056 = @func_2247(%1055) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1057 = %1053.0;
  %1058 = %1056.2;
  (%1057, %1058, %var_7805)
}

def @func_1295(%var_1200: Tensor[(2, 13, 11), float32], %var_1220: Tensor[(180), uint16], %var_1243: bool, %var_1255: Tensor[(12, 9, 13), bool]) -> (Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) {
  %1059 = cast(meta[relay.Constant][73] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1060 = cast(meta[relay.Constant][74] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %1061 = cast(%var_1220, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1062 = reshape(%1059, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %1063 = reshape(%1060, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1064 = reshape(%1061, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %1065 = @func_1120(%1062, %1063, %1064) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %1066 = cast(%var_1220, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1067 = reshape(%1066, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1068 = @func_261(%1067) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %1069 = cast(meta[relay.Constant][74] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %1070 = cast(%var_1220, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1071 = %1065.3;
  %1072 = cast(%1071, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %1073 = reshape(%1069, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %1074 = reshape(%1070, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1075 = reshape(%1072, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1076 = @func_631(%1073, %1074, %1075) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %1077 = cast(%var_1243, dtype="bool") /* ty=bool */;
  %1078 = cast(meta[relay.Constant][75] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %1079 = reshape(%1077, newshape=[]) /* ty=bool */;
  %1080 = reshape(%1078, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %1081 = @func_1079(%1079, %1080) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %1082 = %1081.0;
  %1083 = cast(%var_1255, dtype="uint32") /* ty=Tensor[(12, 9, 13), uint32] */;
  %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1085 = cast(%1082, dtype="uint32") /* ty=Tensor[(12, 9, 13), uint32] */;
  %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1087 = cast(%var_1243, dtype="bool") /* ty=bool */;
  %1088 = right_shift(%1085, %1086) /* ty=Tensor[(12, 9, 13), uint32] */;
  %1089 = cast(%1088, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %1090 = reshape(%1087, newshape=[]) /* ty=bool */;
  %1091 = reshape(%1089, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %1092 = @func_1079(%1090, %1091) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %1093 = cast(%var_1243, dtype="bool") /* ty=bool */;
  %1094 = cast(meta[relay.Constant][75] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %1095 = reshape(%1093, newshape=[]) /* ty=bool */;
  %1096 = reshape(%1094, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %1097 = @func_1079(%1095, %1096) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %1098 = cast(%var_1200, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
  %1099 = tan(%1098) /* ty=Tensor[(2, 13, 11), float32] */;
  %1100 = cast(%1099, dtype="float64") /* ty=Tensor[(2, 13, 11), float64] */;
  %1101 = cast(%1071, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %1102 = reshape(%1101, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1103 = @func_261(%1102) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %1104 = %1068.0;
  %1105 = %1076.5;
  %1106 = %1092.0;
  %1107 = %1097.0;
  %1108 = asin(%1100) /* ty=Tensor[(2, 13, 11), float64] */;
  %1109 = %1103.0;
  (%1071, meta[relay.Constant][73] /* ty=Tensor[(135), float32] */, meta[relay.Constant][74] /* ty=Tensor[(576, 2), float32] */, %var_1220, %1104, %1105, %var_1243, meta[relay.Constant][75] /* ty=Tensor[(1404), bool] */, %1088, %1106, %1107, %1108, %1109)
}

def @func_3526() -> (Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) {
  %1110 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1111 = %1110.1;
  %1112 = cast(%1111, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1113 = cast(%1111, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %1114 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1115 = cast(meta[relay.Constant][76] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1116 = reshape(%1115, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1117 = @func_3427(%1116) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %1118 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1119 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1120 = cast(meta[relay.Constant][77] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %1121 = log(%1112) /* ty=Tensor[(1152), float32] */;
  %1122 = cast(%1121, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1123 = reshape(%1120, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
  %1124 = reshape(%1122, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1125 = @func_3226(%1123, %1124) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1126 = cast(%1111, dtype="float64") /* ty=Tensor[(1152), float64] */;
  %1127 = acos(%1113) /* ty=Tensor[(1152), float64] */;
  %1128 = %1114.0;
  %1129 = %1117.1;
  %1130 = %1118.0;
  %1131 = %1119.0;
  %1132 = %1125.2;
  %1133 = cosh(%1126) /* ty=Tensor[(1152), float64] */;
  (%1121, %1127, %1128, %1129, meta[relay.Constant][76] /* ty=Tensor[(180), uint16] */, %1130, %1131, %1132, meta[relay.Constant][77] /* ty=Tensor[(1040), float32] */, %1133)
}

def @func_7565(%var_7509: float32, %var_7510: Tensor[(1, 10, 4), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(?, 10, 4), bool]) {
  %1134 = @func_6911() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1135 = @func_6570() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %1136 = cast(%var_7510, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %1137 = sqrt(%1136) /* ty=Tensor[(1, 10, 4), float32] */;
  %1138 = cast(%var_7509, dtype="float32") /* ty=float32 */;
  %1139 = cast(%var_7510, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
  %1140 = maximum(%1138, %1139) /* ty=Tensor[(1, 10, 4), float32] */;
  %1141 = cast(%1140, dtype="bool") /* ty=Tensor[(1, 10, 4), bool] */;
  %1142 = shape_of(%1137, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1143 = cast(%1137, dtype="bool") /* ty=Tensor[(1, 10, 4), bool] */;
  %1144 = dyn.reshape(%1141, %1142, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1145 = %1134.0;
  %1146 = %1135.1;
  %1147 = logical_and(%1143, %1144) /* ty=Tensor[(?, 10, 4), bool] */;
  (%1145, %1146, %1147)
}

def @func_6969(%var_6955: Tensor[(200), bool], %var_6959: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(50, 4), bool], Tensor[(200), bool], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %1148 = @func_6666() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1149 = cast(%var_6955, dtype="bool") /* ty=Tensor[(200), bool] */;
  %1150 = reshape(%1149, newshape=[50, 4]) /* ty=Tensor[(50, 4), bool] */;
  %1151 = @func_6348(%1150) /* ty=(Tensor[(50, 4), bool],) */;
  %1152 = cast(%var_6959, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1153 = reshape(%1152, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1154 = @func_2263(%1153) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %1155 = %1148.0;
  %1156 = %1151.0;
  %1157 = %1154.1;
  (%1155, %1156, %var_6955, %1157, %var_6959)
}

def @func_10423(%var_10416: Tensor[(5, 12, 8), int32]) -> Tensor[(5, 12, 8), int32] {
  %1158 = cast(meta[relay.Constant][78] /* ty=Tensor[(5, 12, 8), int32] */, dtype="int32") /* ty=Tensor[(5, 12, 8), int32] */;
  %1159 = shape_of(%var_10416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1160 = cast(%var_10416, dtype="int32") /* ty=Tensor[(5, 12, 8), int32] */;
  %1161 = dyn.reshape(%1158, %1159, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  subtract(%1160, %1161) /* ty=Tensor[(5, 12, 8), int32] */
}

def @func_7360() -> (Tensor[(12, 6, 10), float32],) {
  %1162 = @func_7129() /* ty=Tensor[(12, 6, 10), float32] */;
  (%1162,)
}

def @func_2131() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1163 = cast(meta[relay.Constant][79] /* ty=Tensor[(12, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %1164 = cast(meta[relay.Constant][79] /* ty=Tensor[(12, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %1165 = sinh(%1163) /* ty=Tensor[(12, 6, 10), float32] */;
  %1166 = log10(%1164) /* ty=Tensor[(12, 6, 10), float32] */;
  (%1165, %1166)
}

def @func_1079(%var_1066: bool, %var_1067: Tensor[(12, 9, 13), bool]) -> (Tensor[(12, 9, 13), bool],) {
  %1167 = cast(%var_1066, dtype="bool") /* ty=bool */;
  %1168 = cast(%var_1067, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %1169 = logical_and(%1167, %1168) /* ty=Tensor[(12, 9, 13), bool] */;
  (%1169,)
}

def @func_4058(%var_4041: Tensor[(1152), float32], %var_4042: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) {
  %1170 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %1171 = cast(%1170, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %1172 = tan(%1171) /* ty=Tensor[(12, 6, 10), float64] */;
  %1173 = cast(%1170, dtype="int16") /* ty=Tensor[(12, 6, 10), int16] */;
  %1174 = shape_of(%1172, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1175 = cast(%1172, dtype="int16") /* ty=Tensor[(12, 6, 10), int16] */;
  %1176 = dyn.reshape(%1173, %1174, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1177 = cast(%var_4041, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1178 = cast(%var_4042, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1179 = cast(%var_4042, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1180 = reshape(%1177, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %1181 = reshape(%1178, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1182 = reshape(%1179, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1183 = @func_631(%1180, %1181, %1182) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %1184 = %1183.3;
  %1185 = cast(%1184, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %1186 = reshape(%1185, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1187 = @func_261(%1186) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %1188 = logical_xor(%1175, %1176) /* ty=Tensor[(12, 6, 10), int16] */;
  %1189 = %1187.0;
  (%1188, %1184, %var_4041, %var_4042, %1189)
}

def @func_261(%var_256: Tensor[(5, 6, 6), uint16]) -> (Tensor[(5, 6, 6), uint16],) {
  %1190 = cast(meta[relay.Constant][80] /* ty=Tensor[(5, 6, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %1191 = shape_of(%var_256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1192 = cast(%var_256, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %1193 = dyn.reshape(%1190, %1191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1194 = right_shift(%1192, %1193) /* ty=Tensor[(5, 6, 6), uint16] */;
  (%1194,)
}

def @func_1120(%var_1103: Tensor[(9, 1, 15), float32], %var_1113: Tensor[(1152), float32], %var_1114: Tensor[(180, 1), uint16]) -> (Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) {
  %1195 = cast(%var_1103, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %1196 = shape_of(meta[relay.Constant][81] /* ty=Tensor[(9, 1, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1197 = cast(meta[relay.Constant][81] /* ty=Tensor[(9, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %1198 = dyn.reshape(%1195, %1196, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1199 = cast(%var_1113, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1200 = cast(%var_1114, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %1201 = cast(%var_1114, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %1202 = reshape(%1199, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %1203 = reshape(%1200, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1204 = reshape(%1201, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1205 = @func_631(%1202, %1203, %1204) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %1206 = minimum(%1197, %1198) /* ty=Tensor[(9, ?, 15), float32] */;
  %1207 = %1205.7;
  (%1206, %1207, %var_1113, %var_1114)
}

def @func_9943() -> (Tensor[(180), uint16],) {
  %1208 = @func_6996() /* ty=Tensor[(180), uint16] */;
  (%1208,)
}

def @func_4254(%var_4235: Tensor[(180), uint16]) -> (Tensor[(180), uint8], Tensor[(1152), float32], Tensor[(1152), float32]) {
  %1209 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1210 = %1209.3;
  %1211 = cast(%var_4235, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %1212 = shape_of(%1210, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1213 = cast(%1210, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %1214 = dyn.reshape(%1211, %1212, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %1215 = cast(meta[relay.Constant][82] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1216 = multiply(%1213, %1214) /* ty=Tensor[(180), uint8] */;
  %1217 = cast(%1216, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1218 = reshape(%1215, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1219 = reshape(%1217, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1220 = @func_4058(%1218, %1219) /* ty=(Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) */;
  %1221 = %1220.2;
  (%1216, %1221, meta[relay.Constant][82] /* ty=Tensor[(1152), float32] */)
}

def @func_10403() -> Tensor[(12, 6, 10), float32] {
  %1222 = @func_9506() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1222.0
}

def @func_7129() -> Tensor[(12, 6, 10), float32] {
  @func_5668() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_5705(%var_5686: Tensor[(1, 2, 10), bool], %var_5687: Tensor[(10, 2, 10), bool]) -> (Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) {
  %1223 = cast(%var_5686, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %1224 = cast(%var_5687, dtype="bool") /* ty=Tensor[(10, 2, 10), bool] */;
  %1225 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1226 = logical_and(%1223, %1224) /* ty=Tensor[(10, 2, 10), bool] */;
  %1227 = %1225.0;
  (%1226, %1227)
}

def @func_8133() -> (Tensor[(12, 6, 10), float32],) {
  %1228 = @func_6911() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1229 = %1228.0;
  (%1229,)
}

def @func_8248() -> Tensor[(12, 6, 10), float32] {
  %1230 = @func_7360() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1230.0
}

def @func_8367(%var_8357: Tensor[(4, 8), float32]) -> (Tensor[(4, 8), float32],) {
  %1231 = cast(%var_8357, dtype="float32") /* ty=Tensor[(4, 8), float32] */;
  %1232 = tan(%1231) /* ty=Tensor[(4, 8), float32] */;
  (%1232,)
}

def @func_8675() -> Tensor[(1152), float32] {
  @func_7479() /* ty=Tensor[(1152), float32] */
}

def @func_9527() -> Tensor[(12, 6, 10), float64] {
  @func_7077() /* ty=Tensor[(12, 6, 10), float64] */
}

def @func_2696(%var_2668: Tensor[(1404), bool], %var_2690: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) {
  %1233 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %1234 = cast(%var_2668, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %1235 = reshape(%1233, newshape=[]) /* ty=bool */;
  %1236 = reshape(%1234, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %1237 = @func_1079(%1235, %1236) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %1238 = cast(%var_2690, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1239 = reshape(%1238, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1240 = @func_2247(%1239) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1241 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %1242 = %1237.0;
  %1243 = %1240.1;
  (%1241, %1242, True /* ty=bool */, %var_2668, %1243, %var_2690)
}

def @func_8339() -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %1244 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1245 = %1244.1;
  %1246 = cast(%1245, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %1247 = @func_7142() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1248 = sin(%1246) /* ty=Tensor[(12, 6, 10), float64] */;
  %1249 = %1247.0;
  (%1248, %1249)
}

def @func_3934(%var_3912: bool, %var_3913: Tensor[(1404), bool]) -> (Tensor[(1152), float64], Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(286), float64], Tensor[(12, 6, 10), float32]) {
  %1250 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
  %1251 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %1252 = cast(meta[relay.Constant][83] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
  %1253 = cast(meta[relay.Constant][84] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1254 = cast(%var_3912, dtype="bool") /* ty=bool */;
  %1255 = cast(%var_3913, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %1256 = reshape(%1252, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
  %1257 = reshape(%1253, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1258 = reshape(%1254, newshape=[]) /* ty=bool */;
  %1259 = reshape(%1255, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %1260 = @func_1295(%1256, %1257, %1258, %1259) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
  %1261 = %1260.1;
  %1262 = cast(%1261, dtype="float32") /* ty=Tensor[(135), float32] */;
  %1263 = %1251.3;
  %1264 = cast(%1263, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1265 = cast(meta[relay.Constant][84] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1266 = reshape(%1262, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %1267 = reshape(%1264, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1268 = reshape(%1265, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %1269 = @func_1120(%1266, %1267, %1268) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %1270 = cast(meta[relay.Constant][85] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %1271 = cast(%1263, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1272 = reshape(%1270, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
  %1273 = reshape(%1271, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1274 = @func_3226(%1272, %1273) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1275 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1276 = cast(meta[relay.Constant][83] /* ty=Tensor[(286), float32] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %1277 = %1274.6;
  %1278 = cast(%1277, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %1279 = reshape(%1278, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1280 = @func_3095(%1279) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1281 = %1250.9;
  %1282 = %1269.0;
  %1283 = %1275.1;
  %1284 = exp(%1276) /* ty=Tensor[(286), float64] */;
  %1285 = %1280.0;
  (%1281, %1263, %1261, meta[relay.Constant][84] /* ty=Tensor[(180), uint16] */, %var_3912, %var_3913, %1282, %1277, meta[relay.Constant][85] /* ty=Tensor[(1040), float32] */, %1283, %1284, %1285)
}

def @func_4905() -> (Tensor[(12, 6, 10), float32],) {
  %1286 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1287 = %1286.0;
  (%1287,)
}

def @func_3757(%var_3733: int32, %var_3734: Tensor[(13, 14, 12), int32], %var_3747: Tensor[(180), uint16]) -> (Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) {
  %1288 = cast(%var_3733, dtype="bool") /* ty=bool */;
  %1289 = cast(%var_3734, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
  %1290 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1291 = cast(%var_3747, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1292 = reshape(%1291, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1293 = @func_3427(%1292) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %1294 = greater(%1288, %1289) /* ty=Tensor[(13, 14, 12), bool] */;
  %1295 = %1290.0;
  %1296 = %1293.1;
  %1297 = @func_3561() /* ty=Tensor[(11, 2, 14), float32] */;
  (%1294, %1295, %1296, %var_3747, %1297)
}

def @func_4982() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1298 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1299 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1300 = %1299.0;
  %1301 = cast(%1300, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %1302 = %1298.0;
  %1303 = log(%1301) /* ty=Tensor[(12, 6, 10), float32] */;
  (%1302, %1303)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8249() -> Tensor[(12, 6, 10), float32] {
  %1 = fn () -> Tensor[(12, 6, 10), float32] {
    %0 = @func_7360() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %0.0
  };
  %1() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8441(%var_8410: uint32, %var_8411: Tensor[(3, 11, 1), uint32], %var_8421: Tensor[(3, 11, 7), bool]) -> (Tensor[(3, 11, 7), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %2 = cast(%var_8410, dtype="bool") /* ty=bool */;
  %3 = cast(%var_8411, dtype="bool") /* ty=Tensor[(3, 11, 1), bool] */;
  %4 = not_equal(%2, %3) /* ty=Tensor[(3, 11, 1), bool] */;
  %5 = cast(%4, dtype="bool") /* ty=Tensor[(3, 11, 1), bool] */;
  %6 = cast(%var_8421, dtype="bool") /* ty=Tensor[(3, 11, 7), bool] */;
  %7 = @func_6158() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %8 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %9 = greater(%5, %6) /* ty=Tensor[(3, 11, 7), bool] */;
  %10 = %7.6;
  %11 = %8.0;
  (%9, %10, %11)
}

def @func_4701() -> (Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_3761(%var_3758: int32, %var_3759: Tensor[(13, 14, 12), int32], %var_3760: Tensor[(180), uint16]) -> (Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) {
  %22 = fn (%var_3733: int32, %var_3734: Tensor[(13, 14, 12), int32], %var_3747: Tensor[(180), uint16]) -> (Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) {
    %12 = cast(%var_3733, dtype="bool") /* ty=bool */;
    %13 = cast(%var_3734, dtype="bool") /* ty=Tensor[(13, 14, 12), bool] */;
    %14 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %15 = cast(%var_3747, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %16 = reshape(%15, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %17 = @func_3427(%16) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
    %18 = greater(%12, %13) /* ty=Tensor[(13, 14, 12), bool] */;
    %19 = %14.0;
    %20 = %17.1;
    %21 = @func_3561() /* ty=Tensor[(11, 2, 14), float32] */;
    (%18, %19, %20, %var_3747, %21)
  };
  %22(%var_3758, %var_3759, %var_3760) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */
}

def @func_1120(%var_1103: Tensor[(9, 1, 15), float32], %var_1113: Tensor[(1152), float32], %var_1114: Tensor[(180, 1), uint16]) -> (Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) {
  %23 = cast(%var_1103, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %24 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(9, 1, 15), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(9, 1, 15), float32] */, dtype="float32") /* ty=Tensor[(9, 1, 15), float32] */;
  %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %27 = cast(%var_1113, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %28 = cast(%var_1114, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %29 = cast(%var_1114, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %30 = reshape(%27, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %31 = reshape(%28, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %32 = reshape(%29, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %33 = @func_631(%30, %31, %32) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %34 = minimum(%25, %26) /* ty=Tensor[(9, ?, 15), float32] */;
  %35 = %33.7;
  (%34, %35, %var_1113, %var_1114)
}

def @func_7662(%var_7660: Tensor[(3, 3, 2), float64]) -> (Tensor[(3, 3, 2), bool], Tensor[(12, 6, 10), float32]) {
  @func_7659(%var_7660) /* ty=(Tensor[(3, 3, 2), bool], Tensor[(12, 6, 10), float32]) */
}

def @func_6969(%var_6955: Tensor[(200), bool], %var_6959: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(50, 4), bool], Tensor[(200), bool], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %36 = @func_6666() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %37 = cast(%var_6955, dtype="bool") /* ty=Tensor[(200), bool] */;
  %38 = reshape(%37, newshape=[50, 4]) /* ty=Tensor[(50, 4), bool] */;
  %39 = @func_6348(%38) /* ty=(Tensor[(50, 4), bool],) */;
  %40 = cast(%var_6959, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %41 = reshape(%40, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %42 = @func_2263(%41) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %43 = %36.0;
  %44 = %39.0;
  %45 = %42.1;
  (%43, %44, %var_6955, %45, %var_6959)
}

def @func_1301(%var_1297: Tensor[(2, 13, 11), float32], %var_1298: Tensor[(180), uint16], %var_1299: bool, %var_1300: Tensor[(12, 9, 13), bool]) -> (Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) {
  @func_1295(%var_1297, %var_1298, %var_1299, %var_1300) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */
}

def @func_6069() -> (Tensor[(11, 2, 14), float32],) {
  %47 = fn () -> (Tensor[(11, 2, 14), float32],) {
    %46 = @func_3561() /* ty=Tensor[(11, 2, 14), float32] */;
    (%46,)
  };
  %47() /* ty=(Tensor[(11, 2, 14), float32],) */
}

def @func_8078(%var_8077: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(48, 24), float32], Tensor[(180), uint16], Tensor[(9, ?, 15), int8], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %69 = fn (%var_8043: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(48, 24), float32], Tensor[(180), uint16], Tensor[(9, ?, 15), int8], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
    %48 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %49 = cast(meta[relay.Constant][2] /* ty=Tensor[(135, 1), float32] */, dtype="float32") /* ty=Tensor[(135, 1), float32] */;
    %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(48, 24), float32] */, dtype="float32") /* ty=Tensor[(48, 24), float32] */;
    %51 = cast(%var_8043, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %52 = reshape(%49, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
    %53 = reshape(%50, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %54 = reshape(%51, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
    %55 = @func_1120(%52, %53, %54) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
    %56 = %55.0;
    %57 = cast(%56, dtype="float64") /* ty=Tensor[(9, ?, 15), float64] */;
    %58 = atan(%57) /* ty=Tensor[(9, ?, 15), float64] */;
    %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(135, 1), float32] */, dtype="int8") /* ty=Tensor[(135, 1), int8] */;
    %60 = shape_of(%58, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(%58, dtype="int8") /* ty=Tensor[(9, ?, 15), int8] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %63 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
    %64 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %65 = %48.0;
    %66 = bitwise_and(%61, %62) /* ty=Tensor[(9, ?, 15), int8] */;
    %67 = %63.1;
    %68 = %64.0;
    (%65, meta[relay.Constant][1] /* ty=Tensor[(48, 24), float32] */, %var_8043, %66, %67, %68)
  };
  %69(%var_8077) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(48, 24), float32], Tensor[(180), uint16], Tensor[(9, ?, 15), int8], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_10531() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), uint64]) {
  @func_10529() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), uint64]) */
}

def @func_5808() -> Tensor[(12, 6, 10), float32] {
  %71 = fn () -> Tensor[(12, 6, 10), float32] {
    %70 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %70.0
  };
  %71() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_7361() -> (Tensor[(12, 6, 10), float32],) {
  %73 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %72 = @func_7129() /* ty=Tensor[(12, 6, 10), float32] */;
    (%72,)
  };
  %73() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_8369(%var_8368: Tensor[(4, 8), float32]) -> (Tensor[(4, 8), float32],) {
  %76 = fn (%var_8357: Tensor[(4, 8), float32]) -> (Tensor[(4, 8), float32],) {
    %74 = cast(%var_8357, dtype="float32") /* ty=Tensor[(4, 8), float32] */;
    %75 = tan(%74) /* ty=Tensor[(4, 8), float32] */;
    (%75,)
  };
  %76(%var_8368) /* ty=(Tensor[(4, 8), float32],) */
}

def @func_263(%var_262: Tensor[(5, 6, 6), uint16]) -> (Tensor[(5, 6, 6), uint16],) {
  %82 = fn (%var_256: Tensor[(5, 6, 6), uint16]) -> (Tensor[(5, 6, 6), uint16],) {
    %77 = cast(meta[relay.Constant][3] /* ty=Tensor[(5, 6, 6), uint16] */, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %78 = shape_of(%var_256, dtype="int32") /* ty=Tensor[(3), int32] */;
    %79 = cast(%var_256, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %81 = right_shift(%79, %80) /* ty=Tensor[(5, 6, 6), uint16] */;
    (%81,)
  };
  %82(%var_262) /* ty=(Tensor[(5, 6, 6), uint16],) */
}

def @func_6490(%var_6408: Tensor[(315), uint32]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(234), int16], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), int8], Tensor[(12, 6, 10), float32]) {
  %83 = cast(meta[relay.Constant][4] /* ty=Tensor[(234), int16] */, dtype="int16") /* ty=Tensor[(234), int16] */;
  %84 = reshape(%83, newshape=[234]) /* ty=Tensor[(234), int16] */;
  %85 = @func_6300(%84) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %86 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %87 = cast(%var_6408, dtype="uint32") /* ty=Tensor[(315), uint32] */;
  %88 = reshape(%87, newshape=[5, 9, 7]) /* ty=Tensor[(5, 9, 7), uint32] */;
  %89 = @func_5603(%88) /* ty=(Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) */;
  %90 = %89.1;
  %91 = cast(%var_6408, dtype="int8") /* ty=Tensor[(315), int8] */;
  %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
  %93 = cast(%90, dtype="int8") /* ty=Tensor[(5, 9, 7), int8] */;
  %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %95 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %96 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
  %97 = %85.6;
  %98 = %86.1;
  %99 = add(%93, %94) /* ty=Tensor[(5, 9, 7), int8] */;
  %100 = %95.1;
  (%96, %97, meta[relay.Constant][4] /* ty=Tensor[(234), int16] */, %98, %99, %100)
}

def @func_6711() -> Tensor[(12, 6, 10), float32] {
  %101 = fn () -> Tensor[(12, 6, 10), float32] {
    @func_5807() /* ty=Tensor[(12, 6, 10), float32] */
  };
  %101() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8133() -> (Tensor[(12, 6, 10), float32],) {
  %102 = @func_6911() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %103 = %102.0;
  (%103,)
}

def @func_9013() -> (Tensor[(180), uint16],) {
  @func_9011() /* ty=(Tensor[(180), uint16],) */
}

def @func_7417() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %106 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %104 = @func_7199() /* ty=Tensor[(12, 6, 10), float32] */;
    %105 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    (%104, %105)
  };
  %106() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_9036() -> (Tensor[(12, 6, 10), float32],) {
  %107 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %108 = %107.0;
  (%108,)
}

def @func_2658(%var_2656: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  @func_2655(%var_2656) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */
}

def @func_7659(%var_7629: Tensor[(3, 3, 2), float64]) -> (Tensor[(3, 3, 2), bool], Tensor[(12, 6, 10), float32]) {
  %109 = cast(%var_7629, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %110 = rsqrt(%109) /* ty=Tensor[(3, 3, 2), float64] */;
  %111 = cast(%110, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %112 = shape_of(%var_7629, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%var_7629, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %116 = not_equal(%113, %114) /* ty=Tensor[(3, 3, 2), bool] */;
  %117 = %115.0;
  (%116, %117)
}

def @func_2479(%var_2478: Tensor[(5, 6, 6), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), bool]) {
  %133 = fn (%var_2464: Tensor[(5, 6, 6), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), bool]) {
    %118 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %119 = cast(meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
    %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %122 = reshape(%119, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
    %123 = reshape(%120, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %124 = reshape(%121, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
    %125 = @func_1120(%122, %123, %124) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
    %126 = %125.1;
    %127 = cast(%var_2464, dtype="bool") /* ty=Tensor[(5, 6, 6), bool] */;
    %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
    %129 = cast(%126, dtype="bool") /* ty=Tensor[(5, 6, 6), bool] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %131 = %118.1;
    %132 = equal(%129, %130) /* ty=Tensor[(5, 6, 6), bool] */;
    (%131, meta[relay.Constant][5] /* ty=Tensor[(135), float32] */, meta[relay.Constant][6] /* ty=Tensor[(1152), float32] */, meta[relay.Constant][7] /* ty=Tensor[(180), uint16] */, %132)
  };
  %133(%var_2478) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), bool]) */
}

def @func_9231() -> Tensor[(12, 6, 10), float32] {
  %135 = fn () -> Tensor[(12, 6, 10), float32] {
    %134 = @func_7416() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %134.0
  };
  %135() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_9643() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %136 = @func_8339() /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %137 = @func_9230() /* ty=Tensor[(12, 6, 10), float32] */;
  %138 = %136.1;
  (%137, %138)
}

def @func_2626() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %142 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %139 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %140 = %139.0;
    %141 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    (%140, %141)
  };
  %142() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_9943() -> (Tensor[(180), uint16],) {
  %143 = @func_6996() /* ty=Tensor[(180), uint16] */;
  (%143,)
}

def @func_10074(%var_10073: Tensor[(18, 78), bool]) -> (Tensor[(11, 2, 14), float32], Tensor[(12, 6, 10), float32], Tensor[(18, 78), bool], Tensor[(4, 288), float32]) {
  %152 = fn (%var_10067: Tensor[(18, 78), bool]) -> (Tensor[(11, 2, 14), float32], Tensor[(12, 6, 10), float32], Tensor[(18, 78), bool], Tensor[(4, 288), float32]) {
    %144 = @func_6068() /* ty=(Tensor[(11, 2, 14), float32],) */;
    %145 = cast(%var_10067, dtype="bool") /* ty=Tensor[(18, 78), bool] */;
    %146 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 288), float32] */, dtype="float32") /* ty=Tensor[(4, 288), float32] */;
    %147 = reshape(%145, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
    %148 = reshape(%146, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %149 = @func_2696(%147, %148) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
    %150 = %144.0;
    %151 = %149.0;
    (%150, %151, %var_10067, meta[relay.Constant][8] /* ty=Tensor[(4, 288), float32] */)
  };
  %152(%var_10073) /* ty=(Tensor[(11, 2, 14), float32], Tensor[(12, 6, 10), float32], Tensor[(18, 78), bool], Tensor[(4, 288), float32]) */
}

def @func_3982() -> (Tensor[(12, 6, 10), float32],) {
  %155 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %153 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %154 = %153.0;
    (%154,)
  };
  %155() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_3868() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %159 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %156 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %157 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    %158 = %156.0;
    (%157, %158)
  };
  %159() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_4886(%var_4884: Tensor[(8, 14, 15), float32], %var_4885: Tensor[(180), uint16]) -> (Tensor[(8, 14, 15), float32], Tensor[(1152), float32], Tensor[(1404), bool], Tensor[(288, 4), float32], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %172 = fn (%var_4870: Tensor[(8, 14, 15), float32], %var_4881: Tensor[(180), uint16]) -> (Tensor[(8, 14, 15), float32], Tensor[(1152), float32], Tensor[(1404), bool], Tensor[(288, 4), float32], Tensor[(1152), float32], Tensor[(180), uint16]) {
    %160 = cast(%var_4870, dtype="float32") /* ty=Tensor[(8, 14, 15), float32] */;
    %161 = cast(meta[relay.Constant][9] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %162 = cast(meta[relay.Constant][10] /* ty=Tensor[(288, 4), float32] */, dtype="float32") /* ty=Tensor[(288, 4), float32] */;
    %163 = reshape(%161, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
    %164 = reshape(%162, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %165 = @func_2696(%163, %164) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
    %166 = cast(%var_4881, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %167 = reshape(%166, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %168 = @func_2655(%167) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %169 = acosh(%160) /* ty=Tensor[(8, 14, 15), float32] */;
    %170 = %165.5;
    %171 = %168.2;
    (%169, %170, meta[relay.Constant][9] /* ty=Tensor[(1404), bool] */, meta[relay.Constant][10] /* ty=Tensor[(288, 4), float32] */, %171, %var_4881)
  };
  %172(%var_4884, %var_4885) /* ty=(Tensor[(8, 14, 15), float32], Tensor[(1152), float32], Tensor[(1404), bool], Tensor[(288, 4), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */
}

def @func_10425(%var_10424: Tensor[(5, 12, 8), int32]) -> Tensor[(5, 12, 8), int32] {
  %177 = fn (%var_10416: Tensor[(5, 12, 8), int32]) -> Tensor[(5, 12, 8), int32] {
    %173 = cast(meta[relay.Constant][11] /* ty=Tensor[(5, 12, 8), int32] */, dtype="int32") /* ty=Tensor[(5, 12, 8), int32] */;
    %174 = shape_of(%var_10416, dtype="int32") /* ty=Tensor[(3), int32] */;
    %175 = cast(%var_10416, dtype="int32") /* ty=Tensor[(5, 12, 8), int32] */;
    %176 = dyn.reshape(%173, %174, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    subtract(%175, %176) /* ty=Tensor[(5, 12, 8), int32] */
  };
  %177(%var_10424) /* ty=Tensor[(5, 12, 8), int32] */
}

def @func_6997() -> Tensor[(180), uint16] {
  %179 = fn () -> Tensor[(180), uint16] {
    %178 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %178.1
  };
  %179() /* ty=Tensor[(180), uint16] */
}

def @func_6745(%var_6742: Tensor[(3, 13, 7), int16], %var_6743: Tensor[(286), float32], %var_6744: Tensor[(180, 1), uint16]) -> (Tensor[(3, 13, 7), int16], Tensor[(12, 9, 13), bool], Tensor[(286), float32], bool, Tensor[(180, 1404), int64]) {
  %196 = fn (%var_6713: Tensor[(3, 13, 7), int16], %var_6732: Tensor[(286), float32], %var_6733: Tensor[(180, 1), uint16]) -> (Tensor[(3, 13, 7), int16], Tensor[(12, 9, 13), bool], Tensor[(286), float32], bool, Tensor[(180, 1404), int64]) {
    %180 = cast(meta[relay.Constant][12] /* ty=Tensor[(1, 13, 7), int16] */, dtype="int16") /* ty=Tensor[(1, 13, 7), int16] */;
    %181 = cast(%var_6713, dtype="int16") /* ty=Tensor[(3, 13, 7), int16] */;
    %182 = cast(%var_6732, dtype="float32") /* ty=Tensor[(286), float32] */;
    %183 = cast(%var_6733, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
    %184 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %185 = cast(meta[relay.Constant][13] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %186 = reshape(%182, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
    %187 = reshape(%183, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %188 = reshape(%184, newshape=[]) /* ty=bool */;
    %189 = reshape(%185, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
    %190 = @func_1295(%186, %187, %188, %189) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
    %191 = cast(%var_6733, dtype="int64") /* ty=Tensor[(180, 1), int64] */;
    %192 = cast(meta[relay.Constant][13] /* ty=Tensor[(1404), bool] */, dtype="int64") /* ty=Tensor[(1404), int64] */;
    %193 = left_shift(%180, %181) /* ty=Tensor[(3, 13, 7), int16] */;
    %194 = %190.10;
    %195 = right_shift(%191, %192) /* ty=Tensor[(180, 1404), int64] */;
    (%193, %194, %var_6732, False /* ty=bool */, %195)
  };
  %196(%var_6742, %var_6743, %var_6744) /* ty=(Tensor[(3, 13, 7), int16], Tensor[(12, 9, 13), bool], Tensor[(286), float32], bool, Tensor[(180, 1404), int64]) */
}

def @func_4907() -> (Tensor[(12, 6, 10), float32],) {
  @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_4186() -> (Tensor[(12, 6, 10), float32],) {
  %197 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %198 = %197.0;
  (%198,)
}

def @func_3669() -> (Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) {
  %199 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %200 = %199.3;
  %201 = cast(%200, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %202 = reshape(%201, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %203 = @func_2263(%202) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %204 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %205 = %204.1;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %207 = reshape(%206, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %208 = @func_3258(%207) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %209 = %203.2;
  %210 = %208.2;
  %211 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  (%200, %209, %205, %210, %211)
}

def @func_8224() -> Tensor[(12, 6, 10), float32] {
  %212 = fn () -> Tensor[(12, 6, 10), float32] {
    @func_5807() /* ty=Tensor[(12, 6, 10), float32] */
  };
  %212() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_7142() -> (Tensor[(12, 6, 10), float32],) {
  %213 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %214 = %213.0;
  (%214,)
}

def @func_5094() -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %221 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
    %215 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %216 = cast(meta[relay.Constant][14] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %217 = reshape(%216, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %218 = @func_3427(%217) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
    %219 = %215.0;
    %220 = %218.1;
    (%219, %220, meta[relay.Constant][14] /* ty=Tensor[(180), uint16] */)
  };
  %221() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */
}

def @func_8538() -> (Tensor[(1152), float32],) {
  @func_8536() /* ty=(Tensor[(1152), float32],) */
}

def @func_5298() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %222 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %223 = %222.0;
  %224 = cast(%223, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %225 = reshape(%224, newshape=[12, 6, 10]) /* ty=Tensor[(12, 6, 10), float32] */;
  %226 = @func_4858(%225) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), int64], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %227 = %226.4;
  (%223, %227)
}

def @func_5603(%var_5587: Tensor[(5, 9, 7), uint32]) -> (Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) {
  %228 = cast(%var_5587, dtype="uint32") /* ty=Tensor[(5, 9, 7), uint32] */;
  %229 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="uint32") /* ty=Tensor[(5, 9, 7), uint32] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %232 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="uint8") /* ty=Tensor[(5, 9, 7), uint8] */;
  %233 = shape_of(%var_5587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%var_5587, dtype="uint8") /* ty=Tensor[(5, 9, 7), uint8] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %236 = bitwise_xor(%234, %235) /* ty=Tensor[(5, 9, 7), uint8] */;
  %237 = cast(%236, dtype="uint16") /* ty=Tensor[(5, 9, 7), uint16] */;
  %238 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 9, 7), uint32] */, dtype="uint16") /* ty=Tensor[(5, 9, 7), uint16] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %241 = logical_xor(%230, %231) /* ty=Tensor[(5, 9, 7), uint32] */;
  %242 = minimum(%239, %240) /* ty=Tensor[(5, 9, 7), uint16] */;
  (%241, %242)
}

def @func_9905(%var_9900: Tensor[(20), bool], %var_9901: Tensor[(234), int16], %var_9902: Tensor[(2, 1092), int32], %var_9903: Tensor[(231), bool], %var_9904: Tensor[(234), int16]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(288, 4), float32], Tensor[(10, 2, 10), bool], Tensor[(20), bool], Tensor[(200), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(9, 13, 2), bool], Tensor[(40, 26), float64], Tensor[(180), uint16], int32, Tensor[(2, 1092), int32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(33), uint32], Tensor[(231), bool], Tensor[(40, 26), bool], Tensor[(12, 6, 10), float32], Tensor[(234), float64]) {
  @func_9898(%var_9900, %var_9901, %var_9902, %var_9903, %var_9904) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(288, 4), float32], Tensor[(10, 2, 10), bool], Tensor[(20), bool], Tensor[(200), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(9, 13, 2), bool], Tensor[(40, 26), float64], Tensor[(180), uint16], int32, Tensor[(2, 1092), int32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(33), uint32], Tensor[(231), bool], Tensor[(40, 26), bool], Tensor[(12, 6, 10), float32], Tensor[(234), float64]) */
}

def @func_10614() -> Tensor[(180), uint16] {
  %244 = fn () -> Tensor[(180), uint16] {
    %243 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %243.1
  };
  %244() /* ty=Tensor[(180), uint16] */
}

def @func_4717() -> (Tensor[(12, 6, 10), float32],) {
  @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_8505() -> (Tensor[(12, 6, 10), float32],) {
  %247 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %245 = @func_6666() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %246 = %245.0;
    (%246,)
  };
  %247() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_2502() -> Tensor[(12, 6, 10), float32] {
  %248 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %248.0
}

def @func_5831() -> (Tensor[(12, 6, 10), float32],) {
  %250 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %249 = @func_5668() /* ty=Tensor[(12, 6, 10), float32] */;
    (%249,)
  };
  %250() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_2655(%var_2650: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %251 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %252 = cast(meta[relay.Constant][17] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %253 = cast(%var_2650, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %254 = cast(%var_2650, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %255 = reshape(%252, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %256 = reshape(%253, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %257 = reshape(%254, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %258 = @func_631(%255, %256, %257) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %259 = %251.0;
  %260 = %258.3;
  (%259, %260, meta[relay.Constant][17] /* ty=Tensor[(1152), float32] */, %var_2650)
}

def @func_2404() -> (Tensor[(12, 6, 10), float32],) {
  @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_8997() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float64], Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(1152), float32]) {
  @func_8995() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float64], Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(1152), float32]) */
}

def @func_7078() -> Tensor[(12, 6, 10), float64] {
  %262 = fn () -> Tensor[(12, 6, 10), float64] {
    %261 = @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */;
    %261.0
  };
  %262() /* ty=Tensor[(12, 6, 10), float64] */
}

def @func_3098(%var_3096: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  @func_3095(%var_3096) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */
}

def @func_9155() -> Tensor[(1152), float32] {
  %263 = @func_8173() /* ty=(Tensor[(1152), float32],) */;
  %263.0
}

def @func_6946() -> Tensor[(12, 6, 10), float32] {
  %264 = fn () -> Tensor[(12, 6, 10), float32] {
    @func_5668() /* ty=Tensor[(12, 6, 10), float32] */
  };
  %264() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_7090() -> Tensor[(12, 6, 10), float32] {
  %266 = fn () -> Tensor[(12, 6, 10), float32] {
    %265 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %265.2
  };
  %266() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_9473() -> (Tensor[(12, 6, 10), float32],) {
  %267 = @func_8556() /* ty=Tensor[(12, 6, 10), float32] */;
  (%267,)
}

def @main() -> Tensor[(180), float32] {
  %268 = @func_4293() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %269 = %268.0;
  %270 = cast(%269, dtype="float32") /* ty=Tensor[(180), float32] */;
  cos(%270) /* ty=Tensor[(180), float32] */
}

def @func_7772() -> Tensor[(12, 6, 10), uint64] {
  %277 = fn () -> Tensor[(12, 6, 10), uint64] {
    %271 = @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %272 = %271.0;
    %273 = cast(meta[relay.Constant][18] /* ty=Tensor[(12, 6, 10), float32] */, dtype="uint64") /* ty=Tensor[(12, 6, 10), uint64] */;
    %274 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
    %275 = cast(%272, dtype="uint64") /* ty=Tensor[(12, 6, 10), uint64] */;
    %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%275, %276) /* ty=Tensor[(12, 6, 10), uint64] */
  };
  %277() /* ty=Tensor[(12, 6, 10), uint64] */
}

def @func_7801() -> (Tensor[(12, 6, 10), float32],) {
  @func_7799() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_10403() -> Tensor[(12, 6, 10), float32] {
  %278 = @func_9506() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %278.0
}

def @func_7199() -> Tensor[(12, 6, 10), float32] {
  %279 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %279.0
}

def @func_8341() -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  @func_8339() /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */
}

def @func_7882() -> Tensor[(1152), float32] {
  %283 = fn () -> Tensor[(1152), float32] {
    %280 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
    %281 = %280.3;
    %282 = cast(%281, dtype="float32") /* ty=Tensor[(1152), float32] */;
    atan(%282) /* ty=Tensor[(1152), float32] */
  };
  %283() /* ty=Tensor[(1152), float32] */
}

def @func_8451() -> (Tensor[(12, 6, 10), float32],) {
  %285 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %284 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
    (%284,)
  };
  %285() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_9527() -> Tensor[(12, 6, 10), float64] {
  @func_7077() /* ty=Tensor[(12, 6, 10), float64] */
}

def @func_7314() -> (Tensor[(12, 6, 10), float32],) {
  %288 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %286 = @func_6911() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %287 = %286.0;
    (%287,)
  };
  %288() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_5606(%var_5604: Tensor[(5, 9, 7), uint32]) -> (Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) {
  @func_5603(%var_5604) /* ty=(Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) */
}

def @func_10429() -> (Tensor[(11, 2, 14), float32],) {
  %289 = @func_6068() /* ty=(Tensor[(11, 2, 14), float32],) */;
  %290 = %289.0;
  (%290,)
}

def @func_6493(%var_6491: Tensor[(315), uint32]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(234), int16], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), int8], Tensor[(12, 6, 10), float32]) {
  @func_6490(%var_6491) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(234), int16], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), int8], Tensor[(12, 6, 10), float32]) */
}

def @func_8995() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float64], Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(1152), float32]) {
  %291 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %292 = %291.0;
  %293 = cast(%292, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %294 = cast(meta[relay.Constant][19] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %295 = cast(meta[relay.Constant][20] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %296 = @func_6996() /* ty=Tensor[(180), uint16] */;
  %297 = cast(%296, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %298 = reshape(%294, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %299 = reshape(%295, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %300 = reshape(%297, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %301 = @func_1120(%298, %299, %300) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %302 = cast(meta[relay.Constant][20] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %303 = sigmoid(%293) /* ty=Tensor[(12, 6, 10), float64] */;
  %304 = %301.3;
  %305 = asinh(%302) /* ty=Tensor[(1152), float32] */;
  (%296, %303, %304, meta[relay.Constant][19] /* ty=Tensor[(135), float32] */, %305)
}

def @func_2504() -> Tensor[(12, 6, 10), float32] {
  @func_2502() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_636(%var_633: Tensor[(16, 12, 6), float32], %var_634: Tensor[(180), uint16], %var_635: Tensor[(5, 6, 6), uint16]) -> (Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) {
  @func_631(%var_633, %var_634, %var_635) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */
}

def @func_7112() -> Tensor[(180), float64] {
  @func_7110() /* ty=Tensor[(180), float64] */
}

def @func_7201() -> Tensor[(12, 6, 10), float32] {
  @func_7199() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_6050(%var_6048: Tensor[(9, 13, 2), int16], %var_6049: Tensor[(24, 48), float32]) -> (Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) {
  %324 = fn (%var_5965: Tensor[(9, 13, 2), int16], %var_6009: Tensor[(24, 48), float32]) -> (Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) {
    %306 = cast(%var_5965, dtype="int16") /* ty=Tensor[(9, 13, 2), int16] */;
    %307 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(9, 13, 2), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %308 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 13, 2), int16] */, dtype="int16") /* ty=Tensor[(9, 13, 2), int16] */;
    %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %310 = bitwise_xor(%308, %309) /* ty=Tensor[(9, 13, 2), int16] */;
    %311 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 13, 2), int16] */, dtype="bool") /* ty=Tensor[(9, 13, 2), bool] */;
    %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%310, dtype="bool") /* ty=Tensor[(9, 13, 2), bool] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %315 = cast(%var_6009, dtype="float32") /* ty=Tensor[(24, 48), float32] */;
    %316 = reshape(%315, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %317 = @func_3258(%316) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %318 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %319 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 13, 2), int16] */, dtype="float32") /* ty=Tensor[(9, 13, 2), float32] */;
    %320 = logical_or(%313, %314) /* ty=Tensor[(9, 13, 2), bool] */;
    %321 = %317.5;
    %322 = %318.0;
    %323 = acosh(%319) /* ty=Tensor[(9, 13, 2), float32] */;
    (%320, %321, %var_6009, %322, %323)
  };
  %324(%var_6048, %var_6049) /* ty=(Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) */
}

def @func_9118() -> (Tensor[(12, 6, 10), float32],) {
  @func_9116() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_6350(%var_6349: Tensor[(50, 4), bool]) -> (Tensor[(50, 4), bool],) {
  %332 = fn (%var_6314: Tensor[(50, 4), bool]) -> (Tensor[(50, 4), bool],) {
    %325 = @func_6158() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
    %326 = %325.4;
    %327 = cast(%var_6314, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
    %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(2), int32] */;
    %329 = cast(%326, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
    %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %331 = logical_and(%329, %330) /* ty=Tensor[(50, 4), bool] */;
    (%331,)
  };
  %332(%var_6349) /* ty=(Tensor[(50, 4), bool],) */
}

def @func_6511() -> (Tensor[(12, 6, 10), float64],) {
  %333 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %334 = %333.1;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %336 = erf(%335) /* ty=Tensor[(12, 6, 10), float64] */;
  (%336,)
}

def @func_9508() -> (Tensor[(12, 6, 10), float32],) {
  @func_9506() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_2132() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %341 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %337 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
    %338 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 6, 10), float32] */, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
    %339 = sinh(%337) /* ty=Tensor[(12, 6, 10), float32] */;
    %340 = log10(%338) /* ty=Tensor[(12, 6, 10), float32] */;
    (%339, %340)
  };
  %341() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_7144() -> (Tensor[(12, 6, 10), float32],) {
  @func_7142() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_2169() -> (Tensor[(12, 6, 10), float32],) {
  %344 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %342 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %343 = %342.1;
    (%343,)
  };
  %344() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_10431() -> (Tensor[(11, 2, 14), float32],) {
  @func_10429() /* ty=(Tensor[(11, 2, 14), float32],) */
}

def @func_8135() -> (Tensor[(12, 6, 10), float32],) {
  @func_8133() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_3562() -> Tensor[(11, 2, 14), float32] {
  %346 = fn () -> Tensor[(11, 2, 14), float32] {
    %345 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 2, 14), float32] */, dtype="float32") /* ty=Tensor[(11, 2, 14), float32] */;
    tan(%345) /* ty=Tensor[(11, 2, 14), float32] */
  };
  %346() /* ty=Tensor[(11, 2, 14), float32] */
}

def @func_9338(%var_9336: Tensor[(1, 845), float64], %var_9337: bool) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(490), bool], Tensor[(1, 845), float64], Tensor[(12, 6, 10), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %376 = fn (%var_9241: Tensor[(1, 845), float64], %var_9250: bool) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(490), bool], Tensor[(1, 845), float64], Tensor[(12, 6, 10), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %347 = cast(meta[relay.Constant][25] /* ty=Tensor[(490), bool] */, dtype="bool") /* ty=Tensor[(490), bool] */;
    %348 = cast(%var_9241, dtype="float64") /* ty=Tensor[(1, 845), float64] */;
    %349 = reshape(%347, newshape=[7, 70]) /* ty=Tensor[(7, 70), bool] */;
    %350 = reshape(%348, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %351 = @func_7624(%349, %350) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) */;
    %352 = cast(meta[relay.Constant][26] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %353 = cast(meta[relay.Constant][27] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
    %354 = cast(%var_9250, dtype="bool") /* ty=bool */;
    %355 = cast(meta[relay.Constant][28] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %356 = reshape(%352, newshape=[1040]) /* ty=Tensor[(1040), float32] */;
    %357 = reshape(%353, newshape=[286]) /* ty=Tensor[(286), float32] */;
    %358 = reshape(%354, newshape=[]) /* ty=bool */;
    %359 = reshape(%355, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
    %360 = @func_8014(%356, %357, %358, %359) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], Tensor[(286), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), uint32], Tensor[(105, 3), uint32], Tensor[(180), uint16], Tensor[(1040), float64]) */;
    %361 = cast(meta[relay.Constant][26] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %362 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %363 = @func_8450() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %364 = @func_8536() /* ty=(Tensor[(1152), float32],) */;
    %365 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %366 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %367 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    %368 = %351.0;
    %369 = %360.2;
    %370 = log2(%361) /* ty=Tensor[(1040), float32] */;
    %371 = %362.0;
    %372 = %363.0;
    %373 = %364.0;
    %374 = %365.0;
    %375 = %366.0;
    (%367, %368, meta[relay.Constant][25] /* ty=Tensor[(490), bool] */, %var_9241, %369, meta[relay.Constant][27] /* ty=Tensor[(286), float32] */, %var_9250, meta[relay.Constant][28] /* ty=Tensor[(1404), bool] */, %370, %371, %372, %373, %374, %375)
  };
  %376(%var_9336, %var_9337) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(490), bool], Tensor[(1, 845), float64], Tensor[(12, 6, 10), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_2563() -> (Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %387 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) {
    %377 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %378 = cast(meta[relay.Constant][29] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %379 = reshape(%378, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %380 = @func_2247(%379) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %381 = %380.2;
    %382 = cast(%381, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %383 = reshape(%382, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %384 = @func_2247(%383) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %385 = %377.0;
    %386 = %384.3;
    (%385, %381, meta[relay.Constant][29] /* ty=Tensor[(1152), float32] */, %386)
  };
  %387() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */
}

def @func_10300(%var_10236: Tensor[(14, 16, 16), bool], %var_10261: Tensor[(1, 490), bool]) -> (Tensor[(14, 16, 16), uint8], Tensor[(14, 16, 16), float32], Tensor[(1152), float32], Tensor[(1, 490), bool], Tensor[(14, 16, 16), float64], Tensor[(5, 6, 6), uint16], Tensor[(135), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32]) {
  %388 = cast(%var_10236, dtype="uint8") /* ty=Tensor[(14, 16, 16), uint8] */;
  %389 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(14, 16, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 16, 16), bool] */, dtype="uint8") /* ty=Tensor[(14, 16, 16), uint8] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %392 = cast(meta[relay.Constant][30] /* ty=Tensor[(14, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
  %393 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(14, 16, 16), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 16, 16), bool] */, dtype="bool") /* ty=Tensor[(14, 16, 16), bool] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %396 = logical_or(%394, %395) /* ty=Tensor[(14, 16, 16), bool] */;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(14, 16, 16), float32] */;
  %398 = cast(%var_10261, dtype="bool") /* ty=Tensor[(1, 490), bool] */;
  %399 = reshape(%398, newshape=[490]) /* ty=Tensor[(490), bool] */;
  %400 = @func_10054(%399) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(7, 70), bool], Tensor[(490), bool], Tensor[(845), float64], Tensor[(1152), float32]) */;
  %401 = cast(meta[relay.Constant][31] /* ty=Tensor[(14, 16, 16), bool] */, dtype="float64") /* ty=Tensor[(14, 16, 16), float64] */;
  %402 = cast(meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %403 = %400.5;
  %404 = cast(%403, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %405 = cast(meta[relay.Constant][33] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %406 = reshape(%402, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %407 = reshape(%404, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %408 = reshape(%405, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %409 = @func_1120(%406, %407, %408) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %410 = @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %411 = right_shift(%390, %391) /* ty=Tensor[(14, 16, 16), uint8] */;
  %412 = tan(%397) /* ty=Tensor[(14, 16, 16), float32] */;
  %413 = erf(%401) /* ty=Tensor[(14, 16, 16), float64] */;
  %414 = %409.1;
  %415 = %410.0;
  %416 = @func_7881() /* ty=Tensor[(1152), float32] */;
  (%411, %412, %403, %var_10261, %413, %414, meta[relay.Constant][32] /* ty=Tensor[(135), float32] */, meta[relay.Constant][33] /* ty=Tensor[(180), uint16] */, %415, %416)
}

def @func_9945() -> (Tensor[(180), uint16],) {
  @func_9943() /* ty=(Tensor[(180), uint16],) */
}

def @func_4715() -> (Tensor[(12, 6, 10), float32],) {
  %417 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %418 = %417.1;
  (%418,)
}

def @func_10466(%var_10453: Tensor[(11, 6, 13), int32]) -> (Tensor[(11, 6, 13), int32],) {
  %419 = cast(%var_10453, dtype="int32") /* ty=Tensor[(11, 6, 13), int32] */;
  %420 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(11, 6, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(meta[relay.Constant][34] /* ty=Tensor[(11, 6, 13), int32] */, dtype="int32") /* ty=Tensor[(11, 6, 13), int32] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %423 = right_shift(%421, %422) /* ty=Tensor[(11, 6, 13), int32] */;
  (%423,)
}

def @func_4361(%var_4360: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(13, 5, 13), float64], Tensor[(845), float64], Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %440 = fn (%var_4345: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(13, 5, 13), float64], Tensor[(845), float64], Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
    %424 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %425 = cast(%var_4345, dtype="float64") /* ty=Tensor[(845), float64] */;
    %426 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %427 = reshape(%425, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
    %428 = reshape(%426, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %429 = @func_3595(%427, %428) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %430 = %429.0;
    %431 = cast(%430, dtype="float64") /* ty=Tensor[(13, 5, 13), float64] */;
    %432 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %433 = reshape(%431, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
    %434 = reshape(%432, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %435 = @func_3595(%433, %434) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %436 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %437 = %424.0;
    %438 = %435.3;
    %439 = %436.0;
    (%437, %430, %var_4345, meta[relay.Constant][35] /* ty=Tensor[(180), uint16] */, %438, %439)
  };
  %440(%var_4360) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(13, 5, 13), float64], Tensor[(845), float64], Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_9506() -> (Tensor[(12, 6, 10), float32],) {
  %441 = @func_6945() /* ty=Tensor[(12, 6, 10), float32] */;
  (%441,)
}

def @func_4577(%var_4573: Tensor[(5, 14, 7), bool], %var_4574: Tensor[(5, 14, 7), bool], %var_4575: int32, %var_4576: Tensor[(845), float64]) -> (Tensor[(5, 14, 7), bool], Tensor[(180), uint16], Tensor[(180), uint16], int32, Tensor[(2184), int32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(845), float64], Tensor[(5, 6, 6), uint16]) {
  %477 = fn (%var_4492: Tensor[(5, 14, 7), bool], %var_4493: Tensor[(5, 14, 7), bool], %var_4521: int32, %var_4566: Tensor[(845), float64]) -> (Tensor[(5, 14, 7), bool], Tensor[(180), uint16], Tensor[(180), uint16], int32, Tensor[(2184), int32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(845), float64], Tensor[(5, 6, 6), uint16]) {
    %442 = cast(%var_4493, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
    %443 = shape_of(%var_4492, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%var_4492, dtype="bool") /* ty=Tensor[(5, 14, 7), bool] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %446 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
    %447 = cast(%var_4521, dtype="int32") /* ty=int32 */;
    %448 = cast(meta[relay.Constant][36] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
    %449 = %446.1;
    %450 = cast(%449, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %451 = reshape(%447, newshape=[]) /* ty=int32 */;
    %452 = reshape(%448, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), int32] */;
    %453 = reshape(%450, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %454 = @func_3757(%451, %452, %453) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */;
    %455 = cast(meta[relay.Constant][37] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %456 = cast(%449, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %457 = reshape(%455, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %458 = reshape(%456, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %459 = @func_4058(%457, %458) /* ty=(Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) */;
    %460 = cast(%449, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %461 = reshape(%460, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %462 = @func_3427(%461) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
    %463 = cast(%var_4566, dtype="float64") /* ty=Tensor[(845), float64] */;
    %464 = %454.3;
    %465 = cast(%464, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %466 = reshape(%463, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
    %467 = reshape(%465, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %468 = @func_3595(%466, %467) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %469 = cast(meta[relay.Constant][37] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %470 = reshape(%469, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %471 = @func_2247(%470) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %472 = logical_or(%444, %445) /* ty=Tensor[(5, 14, 7), bool] */;
    %473 = %459.2;
    %474 = %462.0;
    %475 = %468.2;
    %476 = %471.1;
    (%472, %449, %464, %var_4521, meta[relay.Constant][36] /* ty=Tensor[(2184), int32] */, %473, meta[relay.Constant][37] /* ty=Tensor[(1152), float32] */, %474, %475, %var_4566, %476)
  };
  %477(%var_4573, %var_4574, %var_4575, %var_4576) /* ty=(Tensor[(5, 14, 7), bool], Tensor[(180), uint16], Tensor[(180), uint16], int32, Tensor[(2184), int32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(845), float64], Tensor[(5, 6, 6), uint16]) */
}

def @func_7237() -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %481 = fn () -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
    %478 = @func_7142() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %479 = @func_7077() /* ty=Tensor[(12, 6, 10), float64] */;
    %480 = %478.0;
    (%479, %480)
  };
  %481() /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */
}

def @func_4257(%var_4255: Tensor[(180), uint16]) -> (Tensor[(180), uint8], Tensor[(1152), float32], Tensor[(1152), float32]) {
  @func_4254(%var_4255) /* ty=(Tensor[(180), uint8], Tensor[(1152), float32], Tensor[(1152), float32]) */
}

def @func_8019(%var_8015: Tensor[(1040), float32], %var_8016: Tensor[(286), float32], %var_8017: bool, %var_8018: Tensor[(1404), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], Tensor[(286), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), uint32], Tensor[(105, 3), uint32], Tensor[(180), uint16], Tensor[(1040), float64]) {
  %514 = fn (%var_7941: Tensor[(1040), float32], %var_7969: Tensor[(286), float32], %var_7971: bool, %var_7972: Tensor[(1404), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], Tensor[(286), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), uint32], Tensor[(105, 3), uint32], Tensor[(180), uint16], Tensor[(1040), float64]) {
    %482 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %483 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
    %484 = %483.8;
    %485 = cast(%var_7941, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(1), int32] */;
    %487 = cast(%484, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?), float32] */;
    %489 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %490 = cast(%var_7969, dtype="float32") /* ty=Tensor[(286), float32] */;
    %491 = cast(meta[relay.Constant][38] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %492 = cast(%var_7971, dtype="bool") /* ty=bool */;
    %493 = cast(%var_7972, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %494 = reshape(%490, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
    %495 = reshape(%491, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %496 = reshape(%492, newshape=[]) /* ty=bool */;
    %497 = reshape(%493, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
    %498 = @func_1295(%494, %495, %496, %497) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
    %499 = cast(meta[relay.Constant][39] /* ty=Tensor[(105, 3), uint32] */, dtype="uint32") /* ty=Tensor[(105, 3), uint32] */;
    %500 = reshape(%499, newshape=[5, 9, 7]) /* ty=Tensor[(5, 9, 7), uint32] */;
    %501 = @func_5603(%500) /* ty=(Tensor[(5, 9, 7), uint32], Tensor[(5, 9, 7), uint16]) */;
    %502 = cast(%484, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %503 = exp(%502) /* ty=Tensor[(1040), float32] */;
    %504 = cast(%503, dtype="float64") /* ty=Tensor[(1040), float64] */;
    %505 = %482.0;
    %506 = divide(%487, %488) /* ty=Tensor[(1040), float32] */;
    %507 = %489.0;
    %508 = @func_6710() /* ty=Tensor[(12, 6, 10), float32] */;
    %509 = %498.9;
    %510 = @func_7199() /* ty=Tensor[(12, 6, 10), float32] */;
    %511 = %501.0;
    %512 = @func_6996() /* ty=Tensor[(180), uint16] */;
    %513 = cos(%504) /* ty=Tensor[(1040), float64] */;
    (%505, %506, %507, %508, %509, %var_7969, meta[relay.Constant][38] /* ty=Tensor[(180), uint16] */, %var_7971, %var_7972, %510, %511, meta[relay.Constant][39] /* ty=Tensor[(105, 3), uint32] */, %512, %513)
  };
  %514(%var_8015, %var_8016, %var_8017, %var_8018) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], Tensor[(286), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 9, 7), uint32], Tensor[(105, 3), uint32], Tensor[(180), uint16], Tensor[(1040), float64]) */
}

def @func_9562() -> Tensor[(12, 6, 10), float32] {
  %515 = @func_9473() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %515.0
}

def @func_3527() -> (Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) {
  %540 = fn () -> (Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) {
    %516 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %517 = %516.1;
    %518 = cast(%517, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %519 = cast(%517, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %520 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %521 = cast(meta[relay.Constant][40] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %522 = reshape(%521, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %523 = @func_3427(%522) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
    %524 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %525 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %526 = cast(meta[relay.Constant][41] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %527 = log(%518) /* ty=Tensor[(1152), float32] */;
    %528 = cast(%527, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %529 = reshape(%526, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
    %530 = reshape(%528, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %531 = @func_3226(%529, %530) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %532 = cast(%517, dtype="float64") /* ty=Tensor[(1152), float64] */;
    %533 = acos(%519) /* ty=Tensor[(1152), float64] */;
    %534 = %520.0;
    %535 = %523.1;
    %536 = %524.0;
    %537 = %525.0;
    %538 = %531.2;
    %539 = cosh(%532) /* ty=Tensor[(1152), float64] */;
    (%527, %533, %534, %535, meta[relay.Constant][40] /* ty=Tensor[(180), uint16] */, %536, %537, %538, meta[relay.Constant][41] /* ty=Tensor[(1040), float32] */, %539)
  };
  %540() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */
}

def @func_10374() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %544 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %541 = @func_7799() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %542 = @func_8756() /* ty=Tensor[(12, 6, 10), float32] */;
    %543 = %541.0;
    (%542, %543)
  };
  %544() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_3430(%var_3428: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  @func_3427(%var_3428) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */
}

def @func_9038() -> (Tensor[(12, 6, 10), float32],) {
  @func_9036() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_5962(%var_5961: Tensor[(1040), float32]) -> (Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(1, 1152), float32], Tensor[(12, 6, 10), bool], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(65, 13), float64], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32]) {
  %585 = fn (%var_5845: Tensor[(1040), float32]) -> (Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(1, 1152), float32], Tensor[(12, 6, 10), bool], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(65, 13), float64], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32]) {
    %545 = cast(%var_5845, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %546 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1152), float32] */, dtype="float32") /* ty=Tensor[(1, 1152), float32] */;
    %547 = reshape(%545, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
    %548 = reshape(%546, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %549 = @func_3226(%547, %548) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %550 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %551 = %550.0;
    %552 = cast(%551, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
    %553 = log2(%552) /* ty=Tensor[(12, 6, 10), float64] */;
    %554 = cast(%553, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
    %555 = shape_of(%551, dtype="int32") /* ty=Tensor[(3), int32] */;
    %556 = cast(%551, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
    %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %558 = cast(meta[relay.Constant][43] /* ty=Tensor[(65, 13), float64] */, dtype="float64") /* ty=Tensor[(65, 13), float64] */;
    %559 = %549.6;
    %560 = cast(%559, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %561 = reshape(%558, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
    %562 = reshape(%560, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %563 = @func_3595(%561, %562) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %564 = %563.3;
    %565 = cast(%564, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %566 = reshape(%565, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %567 = @func_3427(%566) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
    %568 = cast(meta[relay.Constant][43] /* ty=Tensor[(65, 13), float64] */, dtype="float64") /* ty=Tensor[(65, 13), float64] */;
    %569 = %567.1;
    %570 = cast(%569, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %571 = reshape(%568, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
    %572 = reshape(%570, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %573 = @func_3595(%571, %572) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %574 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %575 = %573.3;
    %576 = cast(%575, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %577 = reshape(%576, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %578 = @func_2263(%577) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %579 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %580 = less(%556, %557) /* ty=Tensor[(12, 6, 10), bool] */;
    %581 = @func_5668() /* ty=Tensor[(12, 6, 10), float32] */;
    %582 = %574.0;
    %583 = %578.1;
    %584 = %579.0;
    (%559, %var_5845, meta[relay.Constant][42] /* ty=Tensor[(1, 1152), float32] */, %580, %581, %564, meta[relay.Constant][43] /* ty=Tensor[(65, 13), float64] */, %569, %575, %582, %583, %584)
  };
  %585(%var_5961) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(1, 1152), float32], Tensor[(12, 6, 10), bool], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(65, 13), float64], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_1125(%var_1122: Tensor[(9, 1, 15), float32], %var_1123: Tensor[(1152), float32], %var_1124: Tensor[(180, 1), uint16]) -> (Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) {
  @func_1120(%var_1122, %var_1123, %var_1124) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */
}

def @func_10057(%var_10055: Tensor[(490), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(7, 70), bool], Tensor[(490), bool], Tensor[(845), float64], Tensor[(1152), float32]) {
  @func_10054(%var_10055) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(7, 70), bool], Tensor[(490), bool], Tensor[(845), float64], Tensor[(1152), float32]) */
}

def @func_9733() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(845), float64], Tensor[(12, 6, 10), float64]) {
  %596 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(845), float64], Tensor[(12, 6, 10), float64]) {
    %586 = @func_7416() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %587 = @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %588 = cast(meta[relay.Constant][44] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
    %589 = reshape(%588, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %590 = @func_4359(%589) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(13, 5, 13), float64], Tensor[(845), float64], Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %591 = @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */;
    %592 = %586.1;
    %593 = %587.1;
    %594 = %590.0;
    %595 = %591.0;
    (%592, %593, %594, meta[relay.Constant][44] /* ty=Tensor[(845), float64] */, %595)
  };
  %596() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(845), float64], Tensor[(12, 6, 10), float64]) */
}

def @func_7110() -> Tensor[(180), float64] {
  %597 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
  %598 = %597.1;
  %599 = cast(%598, dtype="float64") /* ty=Tensor[(180), float64] */;
  atan(%599) /* ty=Tensor[(180), float64] */
}

def @func_6571() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %604 = fn () -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
    %600 = @func_4291() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %601 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %602 = %600.0;
    %603 = %601.0;
    (%602, %603)
  };
  %604() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_9529() -> Tensor[(12, 6, 10), float64] {
  @func_9527() /* ty=Tensor[(12, 6, 10), float64] */
}

def @func_2266(%var_2264: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  @func_2263(%var_2264) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_6513() -> (Tensor[(12, 6, 10), float64],) {
  @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */
}

def @func_5225(%var_5223: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool],) {
  @func_5222(%var_5223) /* ty=(Tensor[(12, 6, 10), bool],) */
}

def @func_10108() -> (Tensor[(12, 6, 10), float32], Tensor[(11, 2, 14), float32], int32, Tensor[(2184), int32], Tensor[(180), uint16]) {
  @func_10106() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(11, 2, 14), float32], int32, Tensor[(2184), int32], Tensor[(180), uint16]) */
}

def @func_3049(%var_2956: Tensor[(12, 6, 10), float32], %var_2986: Tensor[(1152), float32], %var_3000: Tensor[(180, 13), uint16], %var_3022: bool) -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float64], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(180, 13), bool], Tensor[(576, 2), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %605 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %606 = %605.1;
  %607 = cast(%var_2956, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %611 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %612 = %611.0;
  %613 = cast(%var_2956, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %614 = shape_of(%612, dtype="int32") /* ty=Tensor[(3), int32] */;
  %615 = cast(%612, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %617 = cast(meta[relay.Constant][45] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %618 = cast(%var_2986, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %619 = cast(meta[relay.Constant][46] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %620 = reshape(%617, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %621 = reshape(%618, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %622 = reshape(%619, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %623 = @func_1120(%620, %621, %622) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %624 = %623.3;
  %625 = cast(%624, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %626 = reshape(%625, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %627 = @func_261(%626) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %628 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %629 = cast(%624, dtype="bool") /* ty=Tensor[(180, 1), bool] */;
  %630 = cast(%var_3000, dtype="bool") /* ty=Tensor[(180, 13), bool] */;
  %631 = cast(meta[relay.Constant][47] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
  %632 = cast(meta[relay.Constant][46] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %633 = cast(%var_3022, dtype="bool") /* ty=bool */;
  %634 = cast(meta[relay.Constant][48] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %635 = reshape(%631, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
  %636 = reshape(%632, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %637 = reshape(%633, newshape=[]) /* ty=bool */;
  %638 = reshape(%634, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %639 = @func_1295(%635, %636, %637, %638) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
  %640 = cast(%606, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %641 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %642 = floor_mod(%609, %610) /* ty=Tensor[(12, 6, 10), float64] */;
  %643 = floor_divide(%615, %616) /* ty=Tensor[(12, 6, 10), float64] */;
  %644 = %627.0;
  %645 = %628.0;
  %646 = greater_equal(%629, %630) /* ty=Tensor[(180, 13), bool] */;
  %647 = %639.2;
  %648 = exp(%640) /* ty=Tensor[(12, 6, 10), float64] */;
  %649 = %641.0;
  (%642, %643, meta[relay.Constant][45] /* ty=Tensor[(135), float32] */, %var_2986, meta[relay.Constant][46] /* ty=Tensor[(180), uint16] */, %644, %645, %646, %647, meta[relay.Constant][47] /* ty=Tensor[(286), float32] */, %var_3022, meta[relay.Constant][48] /* ty=Tensor[(1404), bool] */, %648, %649)
}

def @func_6912() -> (Tensor[(12, 6, 10), float32],) {
  %651 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %650 = @func_6710() /* ty=Tensor[(12, 6, 10), float32] */;
    (%650,)
  };
  %651() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_1295(%var_1200: Tensor[(2, 13, 11), float32], %var_1220: Tensor[(180), uint16], %var_1243: bool, %var_1255: Tensor[(12, 9, 13), bool]) -> (Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) {
  %652 = cast(meta[relay.Constant][49] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %653 = cast(meta[relay.Constant][50] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %654 = cast(%var_1220, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %655 = reshape(%652, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %656 = reshape(%653, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %657 = reshape(%654, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %658 = @func_1120(%655, %656, %657) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %659 = cast(%var_1220, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %660 = reshape(%659, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %661 = @func_261(%660) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %662 = cast(meta[relay.Constant][50] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %663 = cast(%var_1220, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %664 = %658.3;
  %665 = cast(%664, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %666 = reshape(%662, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %667 = reshape(%663, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %668 = reshape(%665, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %669 = @func_631(%666, %667, %668) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %670 = cast(%var_1243, dtype="bool") /* ty=bool */;
  %671 = cast(meta[relay.Constant][51] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %672 = reshape(%670, newshape=[]) /* ty=bool */;
  %673 = reshape(%671, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %674 = @func_1079(%672, %673) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %675 = %674.0;
  %676 = cast(%var_1255, dtype="uint32") /* ty=Tensor[(12, 9, 13), uint32] */;
  %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%675, dtype="uint32") /* ty=Tensor[(12, 9, 13), uint32] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %680 = cast(%var_1243, dtype="bool") /* ty=bool */;
  %681 = right_shift(%678, %679) /* ty=Tensor[(12, 9, 13), uint32] */;
  %682 = cast(%681, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %683 = reshape(%680, newshape=[]) /* ty=bool */;
  %684 = reshape(%682, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %685 = @func_1079(%683, %684) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %686 = cast(%var_1243, dtype="bool") /* ty=bool */;
  %687 = cast(meta[relay.Constant][51] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %688 = reshape(%686, newshape=[]) /* ty=bool */;
  %689 = reshape(%687, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
  %690 = @func_1079(%688, %689) /* ty=(Tensor[(12, 9, 13), bool],) */;
  %691 = cast(%var_1200, dtype="float32") /* ty=Tensor[(2, 13, 11), float32] */;
  %692 = tan(%691) /* ty=Tensor[(2, 13, 11), float32] */;
  %693 = cast(%692, dtype="float64") /* ty=Tensor[(2, 13, 11), float64] */;
  %694 = cast(%664, dtype="uint16") /* ty=Tensor[(180, 1), uint16] */;
  %695 = reshape(%694, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %696 = @func_261(%695) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %697 = %661.0;
  %698 = %669.5;
  %699 = %685.0;
  %700 = %690.0;
  %701 = asin(%693) /* ty=Tensor[(2, 13, 11), float64] */;
  %702 = %696.0;
  (%664, meta[relay.Constant][49] /* ty=Tensor[(135), float32] */, meta[relay.Constant][50] /* ty=Tensor[(576, 2), float32] */, %var_1220, %697, %698, %var_1243, meta[relay.Constant][51] /* ty=Tensor[(1404), bool] */, %681, %699, %700, %701, %702)
}

def @func_3427(%var_3412: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %703 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %704 = cast(%var_3412, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %705 = reshape(%704, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %706 = @func_261(%705) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %707 = %703.0;
  %708 = %706.0;
  (%707, %708, %var_3412)
}

def @func_9011() -> (Tensor[(180), uint16],) {
  %709 = @func_6570() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %710 = %709.0;
  (%710,)
}

def @func_3599(%var_3597: Tensor[(13, 5, 13), float64], %var_3598: Tensor[(180), uint16]) -> (Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) {
  @func_3595(%var_3597, %var_3598) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */
}

def @func_10469(%var_10467: Tensor[(11, 6, 13), int32]) -> (Tensor[(11, 6, 13), int32],) {
  @func_10466(%var_10467) /* ty=(Tensor[(11, 6, 13), int32],) */
}

def @func_7480() -> Tensor[(1152), float32] {
  %712 = fn () -> Tensor[(1152), float32] {
    %711 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
    %711.3
  };
  %712() /* ty=Tensor[(1152), float32] */
}

def @func_6201(%var_6199: Tensor[(3, 14, 2), int8], %var_6200: Tensor[(3, 14, 2), int8]) -> (Tensor[(3, 14, 2), int8], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %722 = fn (%var_6171: Tensor[(3, 14, 2), int8], %var_6172: Tensor[(3, 14, 2), int8]) -> (Tensor[(3, 14, 2), int8], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
    %713 = cast(%var_6172, dtype="int8") /* ty=Tensor[(3, 14, 2), int8] */;
    %714 = shape_of(%var_6171, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%var_6171, dtype="int8") /* ty=Tensor[(3, 14, 2), int8] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %717 = cast(meta[relay.Constant][52] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %718 = reshape(%717, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %719 = @func_3095(%718) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %720 = multiply(%715, %716) /* ty=Tensor[(3, 14, 2), int8] */;
    %721 = %719.2;
    (%720, %721, meta[relay.Constant][52] /* ty=Tensor[(180), uint16] */)
  };
  %722(%var_6199, %var_6200) /* ty=(Tensor[(3, 14, 2), int8], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */
}

def @func_9209() -> Tensor[(12, 6, 10), float32] {
  %724 = fn () -> Tensor[(12, 6, 10), float32] {
    %723 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %723.0
  };
  %724() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8394() -> (Tensor[(12, 6, 10), float32],) {
  @func_8392() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_3595(%var_3572: Tensor[(13, 5, 13), float64], %var_3587: Tensor[(180), uint16]) -> (Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) {
  %725 = cast(%var_3572, dtype="float64") /* ty=Tensor[(13, 5, 13), float64] */;
  %726 = cast(%var_3572, dtype="float32") /* ty=Tensor[(13, 5, 13), float32] */;
  %727 = cast(%var_3587, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %728 = reshape(%727, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %729 = @func_3427(%728) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %730 = cosh(%725) /* ty=Tensor[(13, 5, 13), float64] */;
  %731 = exp(%726) /* ty=Tensor[(13, 5, 13), float32] */;
  %732 = %729.2;
  (%730, %731, %732, %var_3587)
}

def @func_2402() -> (Tensor[(12, 6, 10), float32],) {
  %733 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %734 = %733.1;
  (%734,)
}

def @func_4170() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %739 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %735 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %736 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %737 = %735.0;
    %738 = %736.0;
    (%737, %738)
  };
  %739() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_2884() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %744 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %740 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %741 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %742 = %740.1;
    %743 = %741.0;
    (%742, %743)
  };
  %744() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_2263(%var_2254: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %745 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %746 = cast(%var_2254, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %747 = reshape(%746, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %748 = @func_261(%747) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %749 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %750 = %745.0;
  %751 = %748.0;
  %752 = %749.0;
  (%750, %751, %var_2254, %752)
}

def @func_4905() -> (Tensor[(12, 6, 10), float32],) {
  %753 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %754 = %753.0;
  (%754,)
}

def @func_4061(%var_4059: Tensor[(1152), float32], %var_4060: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) {
  %775 = fn (%var_4041: Tensor[(1152), float32], %var_4042: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) {
    %755 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    %756 = cast(%755, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
    %757 = tan(%756) /* ty=Tensor[(12, 6, 10), float64] */;
    %758 = cast(%755, dtype="int16") /* ty=Tensor[(12, 6, 10), int16] */;
    %759 = shape_of(%757, dtype="int32") /* ty=Tensor[(3), int32] */;
    %760 = cast(%757, dtype="int16") /* ty=Tensor[(12, 6, 10), int16] */;
    %761 = dyn.reshape(%758, %759, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %762 = cast(%var_4041, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %763 = cast(%var_4042, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %764 = cast(%var_4042, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %765 = reshape(%762, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %766 = reshape(%763, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %767 = reshape(%764, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
    %768 = @func_631(%765, %766, %767) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
    %769 = %768.3;
    %770 = cast(%769, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %771 = reshape(%770, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
    %772 = @func_261(%771) /* ty=(Tensor[(5, 6, 6), uint16],) */;
    %773 = logical_xor(%760, %761) /* ty=Tensor[(12, 6, 10), int16] */;
    %774 = %772.0;
    (%773, %769, %var_4041, %var_4042, %774)
  };
  %775(%var_4059, %var_4060) /* ty=(Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) */
}

def @func_5064(%var_5063: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %792 = fn (%var_5027: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %776 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %777 = cast(meta[relay.Constant][53] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %778 = cast(%var_5027, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %779 = cast(%var_5027, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %780 = reshape(%777, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %781 = reshape(%778, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %782 = reshape(%779, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
    %783 = @func_631(%780, %781, %782) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
    %784 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %785 = %784.0;
    %786 = cast(%785, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
    %787 = @func_4291() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %788 = %776.0;
    %789 = %783.11;
    %790 = asinh(%786) /* ty=Tensor[(12, 6, 10), float32] */;
    %791 = %787.1;
    (%788, %789, meta[relay.Constant][53] /* ty=Tensor[(1152), float32] */, %var_5027, %790, %791)
  };
  %792(%var_5063) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_3055(%var_3051: Tensor[(12, 6, 10), float32], %var_3052: Tensor[(1152), float32], %var_3053: Tensor[(180, 13), uint16], %var_3054: bool) -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float64], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(180, 13), bool], Tensor[(576, 2), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  @func_3049(%var_3051, %var_3052, %var_3053, %var_3054) /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float64], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(180, 13), bool], Tensor[(576, 2), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */
}

def @func_9986() -> Tensor[(12, 6, 10), float32] {
  %794 = fn () -> Tensor[(12, 6, 10), float32] {
    %793 = @func_7360() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %793.0
  };
  %794() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_6594(%var_6580: bool) -> (Tensor[(12, 6, 10), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(2340), uint16], bool, Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16]) {
  %795 = @func_6511() /* ty=(Tensor[(12, 6, 10), float64],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %798 = cast(meta[relay.Constant][54] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %799 = cast(meta[relay.Constant][55] /* ty=Tensor[(2340), uint16] */, dtype="uint16") /* ty=Tensor[(2340), uint16] */;
  %800 = cast(%var_6580, dtype="bool") /* ty=bool */;
  %801 = reshape(%797, newshape=[12, 6, 10]) /* ty=Tensor[(12, 6, 10), float32] */;
  %802 = reshape(%798, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %803 = reshape(%799, newshape=[180, 13]) /* ty=Tensor[(180, 13), uint16] */;
  %804 = reshape(%800, newshape=[]) /* ty=bool */;
  %805 = @func_3049(%801, %802, %803, %804) /* ty=(Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float64], Tensor[(135), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(180, 13), bool], Tensor[(576, 2), float32], Tensor[(286), float32], bool, Tensor[(1404), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %806 = cast(meta[relay.Constant][56] /* ty=Tensor[(135), float32] */, dtype="float32") /* ty=Tensor[(135), float32] */;
  %807 = %805.3;
  %808 = cast(%807, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %809 = cast(meta[relay.Constant][57] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %810 = reshape(%806, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
  %811 = reshape(%808, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %812 = reshape(%809, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
  %813 = @func_1120(%810, %811, %812) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
  %814 = %813.2;
  (%796, %807, meta[relay.Constant][54] /* ty=Tensor[(1152), float32] */, meta[relay.Constant][55] /* ty=Tensor[(2340), uint16] */, %var_6580, %814, meta[relay.Constant][56] /* ty=Tensor[(135), float32] */, meta[relay.Constant][57] /* ty=Tensor[(180), uint16] */)
}

def @func_8757() -> Tensor[(12, 6, 10), float32] {
  %816 = fn () -> Tensor[(12, 6, 10), float32] {
    %815 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %815.0
  };
  %816() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_631(%var_529: Tensor[(16, 12, 6), float32], %var_555: Tensor[(180), uint16], %var_623: Tensor[(5, 6, 6), uint16]) -> (Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) {
  %817 = cast(%var_555, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %818 = reshape(%817, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %819 = @func_261(%818) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %820 = %819.0;
  %821 = cast(%820, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %822 = reshape(%821, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %823 = @func_261(%822) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %824 = %823.0;
  %825 = cast(%824, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %826 = reshape(%825, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %827 = @func_261(%826) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %828 = cast(%820, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %829 = reshape(%828, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %830 = @func_261(%829) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %831 = cast(%var_529, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %832 = sin(%831) /* ty=Tensor[(16, 12, 6), float32] */;
  %833 = cast(%var_529, dtype="int32") /* ty=Tensor[(16, 12, 6), int32] */;
  %834 = shape_of(%832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %835 = cast(%832, dtype="int32") /* ty=Tensor[(16, 12, 6), int32] */;
  %836 = dyn.reshape(%833, %834, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %837 = minimum(%835, %836) /* ty=Tensor[(16, 12, 6), int32] */;
  %838 = cast(%837, dtype="float32") /* ty=Tensor[(16, 12, 6), float32] */;
  %839 = acos(%838) /* ty=Tensor[(16, 12, 6), float32] */;
  %840 = cast(%839, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
  %841 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %842 = cast(%837, dtype="uint32") /* ty=Tensor[(16, 12, 6), uint32] */;
  %843 = dyn.reshape(%840, %841, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %844 = cast(%824, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %845 = reshape(%844, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %846 = @func_261(%845) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %847 = %830.0;
  %848 = cast(%847, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %849 = reshape(%848, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %850 = @func_261(%849) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %851 = cast(%820, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %852 = reshape(%851, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %853 = @func_261(%852) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %854 = cast(%var_529, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %855 = shape_of(%837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %856 = cast(%837, dtype="bool") /* ty=Tensor[(16, 12, 6), bool] */;
  %857 = dyn.reshape(%854, %855, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %858 = cast(%839, dtype="float64") /* ty=Tensor[(16, 12, 6), float64] */;
  %859 = cast(%820, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %860 = reshape(%859, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %861 = @func_261(%860) /* ty=(Tensor[(5, 6, 6), uint16],) */;
  %862 = %861.0;
  %863 = cast(%var_623, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %864 = shape_of(%862, dtype="int32") /* ty=Tensor[(3), int32] */;
  %865 = cast(%862, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
  %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %867 = %827.0;
  %868 = bitwise_and(%842, %843) /* ty=Tensor[(16, 12, 6), uint32] */;
  %869 = %846.0;
  %870 = %850.0;
  %871 = %853.0;
  %872 = logical_and(%856, %857) /* ty=Tensor[(16, 12, 6), bool] */;
  %873 = cosh(%858) /* ty=Tensor[(16, 12, 6), float64] */;
  %874 = power(%865, %866) /* ty=Tensor[(5, 6, 6), float32] */;
  (%820, %var_555, %824, %867, %847, %868, %869, %870, %871, %872, %873, %874)
}

def @func_3691() -> Tensor[(12, 6, 10), float32] {
  @func_3689() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8556() -> Tensor[(12, 6, 10), float32] {
  %875 = @func_2402() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %875.0
}

def @func_4984() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_9172() -> Tensor[(12, 6, 10), float32] {
  %877 = fn () -> Tensor[(12, 6, 10), float32] {
    %876 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %876.0
  };
  %877() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_2862() -> (Tensor[(12, 6, 10), float32],) {
  @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_5669() -> Tensor[(12, 6, 10), float32] {
  %879 = fn () -> Tensor[(12, 6, 10), float32] {
    %878 = @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %878.0
  };
  %879() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_2699(%var_2697: Tensor[(1404), bool], %var_2698: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) {
  %891 = fn (%var_2668: Tensor[(1404), bool], %var_2690: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) {
    %880 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %881 = cast(%var_2668, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %882 = reshape(%880, newshape=[]) /* ty=bool */;
    %883 = reshape(%881, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
    %884 = @func_1079(%882, %883) /* ty=(Tensor[(12, 9, 13), bool],) */;
    %885 = cast(%var_2690, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %886 = reshape(%885, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %887 = @func_2247(%886) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %888 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    %889 = %884.0;
    %890 = %887.1;
    (%888, %889, True /* ty=bool */, %var_2668, %890, %var_2690)
  };
  %891(%var_2697, %var_2698) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */
}

def @func_2860() -> (Tensor[(12, 6, 10), float32],) {
  %892 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %893 = %892.0;
  (%893,)
}

def @func_5709(%var_5707: Tensor[(1, 2, 10), bool], %var_5708: Tensor[(10, 2, 10), bool]) -> (Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) {
  @func_5705(%var_5707, %var_5708) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */
}

def @func_4699() -> (Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %894 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %895 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %896 = %895.3;
  %897 = cast(%896, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %898 = reshape(%897, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %899 = @func_2263(%898) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %900 = %894.1;
  %901 = %899.3;
  (%900, %896, %901)
}

def @func_7799() -> (Tensor[(12, 6, 10), float32],) {
  %902 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
  (%902,)
}

def @func_3258(%var_3251: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) {
  %903 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %904 = %903.1;
  %905 = cast(%904, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %906 = cast(meta[relay.Constant][58] /* ty=Tensor[(40, 26), float32] */, dtype="float32") /* ty=Tensor[(40, 26), float32] */;
  %907 = cast(%var_3251, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %908 = reshape(%906, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
  %909 = reshape(%907, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %910 = @func_3226(%908, %909) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %911 = cast(meta[relay.Constant][59] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %912 = reshape(%911, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %913 = @func_2263(%912) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %914 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %915 = sqrt(%905) /* ty=Tensor[(12, 6, 10), float32] */;
  %916 = %910.5;
  %917 = %913.2;
  (%914, %915, %916, meta[relay.Constant][58] /* ty=Tensor[(40, 26), float32] */, %var_3251, %917, meta[relay.Constant][59] /* ty=Tensor[(180), uint16] */)
}

def @func_8446(%var_8443: uint32, %var_8444: Tensor[(3, 11, 1), uint32], %var_8445: Tensor[(3, 11, 7), bool]) -> (Tensor[(3, 11, 7), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  @func_8441(%var_8443, %var_8444, %var_8445) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */
}

def @func_6667() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %922 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %918 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
    %919 = @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %920 = %918.6;
    %921 = %919.0;
    (%920, %921)
  };
  %922() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_1079(%var_1066: bool, %var_1067: Tensor[(12, 9, 13), bool]) -> (Tensor[(12, 9, 13), bool],) {
  %923 = cast(%var_1066, dtype="bool") /* ty=bool */;
  %924 = cast(%var_1067, dtype="bool") /* ty=Tensor[(12, 9, 13), bool] */;
  %925 = logical_and(%923, %924) /* ty=Tensor[(12, 9, 13), bool] */;
  (%925,)
}

def @func_6303(%var_6301: Tensor[(234), int16]) -> (Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  @func_6300(%var_6301) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */
}

def @func_6866(%var_6848: Tensor[(20, 1), bool], %var_6849: Tensor[(50, 4), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20, 1), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %926 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %927 = cast(%var_6848, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %928 = cast(%var_6849, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %929 = reshape(%927, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %930 = reshape(%928, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %931 = @func_5705(%929, %930) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %932 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %933 = cast(%var_6848, dtype="bool") /* ty=Tensor[(20, 1), bool] */;
  %934 = cast(%var_6849, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
  %935 = reshape(%933, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %936 = reshape(%934, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %937 = @func_5705(%935, %936) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %938 = %926.0;
  %939 = %931.1;
  %940 = %932.0;
  %941 = %937.1;
  (%938, %939, %var_6848, %var_6849, %940, %941)
}

def @func_5705(%var_5686: Tensor[(1, 2, 10), bool], %var_5687: Tensor[(10, 2, 10), bool]) -> (Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) {
  %942 = cast(%var_5686, dtype="bool") /* ty=Tensor[(1, 2, 10), bool] */;
  %943 = cast(%var_5687, dtype="bool") /* ty=Tensor[(10, 2, 10), bool] */;
  %944 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %945 = logical_and(%942, %943) /* ty=Tensor[(10, 2, 10), bool] */;
  %946 = %944.0;
  (%945, %946)
}

def @func_10529() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), uint64]) {
  %947 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %948 = %947.0;
  %949 = @func_9208() /* ty=Tensor[(12, 6, 10), float32] */;
  %950 = @func_7771() /* ty=Tensor[(12, 6, 10), uint64] */;
  (%948, %949, %950)
}

def @func_3261(%var_3259: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) {
  @func_3258(%var_3259) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */
}

def @func_6870(%var_6868: Tensor[(20, 1), bool], %var_6869: Tensor[(50, 4), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20, 1), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  @func_6866(%var_6868, %var_6869) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20, 1), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_6300(%var_6253: Tensor[(234), int16]) -> (Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  %951 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %952 = cast(meta[relay.Constant][61] /* ty=Tensor[(84), int8] */, dtype="int8") /* ty=Tensor[(84), int8] */;
  %953 = cast(meta[relay.Constant][61] /* ty=Tensor[(84), int8] */, dtype="int8") /* ty=Tensor[(84), int8] */;
  %954 = reshape(%952, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), int8] */;
  %955 = reshape(%953, newshape=[3, 14, 2]) /* ty=Tensor[(3, 14, 2), int8] */;
  %956 = @func_6198(%954, %955) /* ty=(Tensor[(3, 14, 2), int8], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %957 = cast(%var_6253, dtype="int16") /* ty=Tensor[(234), int16] */;
  %958 = cast(meta[relay.Constant][60] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %959 = reshape(%957, newshape=[9, 13, 2]) /* ty=Tensor[(9, 13, 2), int16] */;
  %960 = reshape(%958, newshape=[24, 48]) /* ty=Tensor[(24, 48), float32] */;
  %961 = @func_6047(%959, %960) /* ty=(Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) */;
  %962 = %961.4;
  %963 = cast(%var_6253, dtype="bool") /* ty=Tensor[(234), bool] */;
  %964 = shape_of(%962, dtype="int32") /* ty=Tensor[(3), int32] */;
  %965 = cast(%962, dtype="bool") /* ty=Tensor[(9, 13, 2), bool] */;
  %966 = dyn.reshape(%963, %964, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %967 = less_equal(%965, %966) /* ty=Tensor[(9, 13, 2), bool] */;
  %968 = cast(%967, dtype="float32") /* ty=Tensor[(9, 13, 2), float32] */;
  %969 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %970 = cast(meta[relay.Constant][60] /* ty=Tensor[(576, 2), float32] */, dtype="float32") /* ty=Tensor[(576, 2), float32] */;
  %971 = cast(meta[relay.Constant][62] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %972 = cast(meta[relay.Constant][62] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %973 = reshape(%970, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %974 = reshape(%971, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %975 = reshape(%972, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %976 = @func_631(%973, %974, %975) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %977 = %951.1;
  %978 = %956.0;
  %979 = sin(%968) /* ty=Tensor[(9, 13, 2), float32] */;
  %980 = %969.0;
  %981 = %976.3;
  (%977, meta[relay.Constant][60] /* ty=Tensor[(576, 2), float32] */, %978, meta[relay.Constant][61] /* ty=Tensor[(84), int8] */, %979, %980, %981, meta[relay.Constant][62] /* ty=Tensor[(180), uint16] */)
}

def @func_7039() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %982 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %983 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %984 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %985 = %982.0;
  %986 = %983.0;
  %987 = %984.0;
  (%985, %986, %987)
}

def @func_3689() -> Tensor[(12, 6, 10), float32] {
  %988 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %988.0
}

def @func_5300() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  @func_5298() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_7813(%var_7812: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32]) {
  %995 = fn (%var_7805: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32]) {
    %989 = @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %990 = cast(%var_7805, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %991 = reshape(%990, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %992 = @func_2247(%991) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %993 = %989.0;
    %994 = %992.2;
    (%993, %994, %var_7805)
  };
  %995(%var_7812) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32]) */
}

def @func_7568(%var_7566: float32, %var_7567: Tensor[(1, 10, 4), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(?, 10, 4), bool]) {
  %1010 = fn (%var_7509: float32, %var_7510: Tensor[(1, 10, 4), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(?, 10, 4), bool]) {
    %996 = @func_6911() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %997 = @func_6570() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
    %998 = cast(%var_7510, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
    %999 = sqrt(%998) /* ty=Tensor[(1, 10, 4), float32] */;
    %1000 = cast(%var_7509, dtype="float32") /* ty=float32 */;
    %1001 = cast(%var_7510, dtype="float32") /* ty=Tensor[(1, 10, 4), float32] */;
    %1002 = maximum(%1000, %1001) /* ty=Tensor[(1, 10, 4), float32] */;
    %1003 = cast(%1002, dtype="bool") /* ty=Tensor[(1, 10, 4), bool] */;
    %1004 = shape_of(%999, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1005 = cast(%999, dtype="bool") /* ty=Tensor[(1, 10, 4), bool] */;
    %1006 = dyn.reshape(%1003, %1004, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1007 = %996.0;
    %1008 = %997.1;
    %1009 = logical_and(%1005, %1006) /* ty=Tensor[(?, 10, 4), bool] */;
    (%1007, %1008, %1009)
  };
  %1010(%var_7566, %var_7567) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(?, 10, 4), bool]) */
}

def @func_4651() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1015 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %1011 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1012 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1013 = %1011.0;
    %1014 = %1012.0;
    (%1013, %1014)
  };
  %1015() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_9976() -> Tensor[(12, 6, 10), float32] {
  %1016 = fn () -> Tensor[(12, 6, 10), float32] {
    @func_9230() /* ty=Tensor[(12, 6, 10), float32] */
  };
  %1016() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_7627(%var_7625: Tensor[(7, 70), bool], %var_7626: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) {
  %1034 = fn (%var_7605: Tensor[(7, 70), bool], %var_7614: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) {
    %1017 = @func_4905() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1018 = cast(%var_7605, dtype="bool") /* ty=Tensor[(7, 70), bool] */;
    %1019 = cast(%var_7605, dtype="bool") /* ty=Tensor[(7, 70), bool] */;
    %1020 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %1021 = cast(meta[relay.Constant][63] /* ty=Tensor[(65, 13), float64] */, dtype="float64") /* ty=Tensor[(65, 13), float64] */;
    %1022 = reshape(%1018, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), bool] */;
    %1023 = reshape(%1019, newshape=[5, 14, 7]) /* ty=Tensor[(5, 14, 7), bool] */;
    %1024 = reshape(%1020, newshape=[]) /* ty=int32 */;
    %1025 = reshape(%1021, newshape=[845]) /* ty=Tensor[(845), float64] */;
    %1026 = @func_4572(%1022, %1023, %1024, %1025) /* ty=(Tensor[(5, 14, 7), bool], Tensor[(180), uint16], Tensor[(180), uint16], int32, Tensor[(2184), int32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(845), float64], Tensor[(5, 6, 6), uint16]) */;
    %1027 = %1026.9;
    %1028 = cast(%var_7614, dtype="bool") /* ty=Tensor[(845), bool] */;
    %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1030 = cast(%1027, dtype="bool") /* ty=Tensor[(845), bool] */;
    %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1032 = %1017.0;
    %1033 = equal(%1030, %1031) /* ty=Tensor[(845), bool] */;
    (%1032, %var_7605, -2 /* ty=int32 */, meta[relay.Constant][63] /* ty=Tensor[(65, 13), float64] */, %1033)
  };
  %1034(%var_7625, %var_7626) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) */
}

def @func_9898(%var_9783: Tensor[(20), bool], %var_9802: Tensor[(234), int16], %var_9832: Tensor[(2, 1092), int32], %var_9863: Tensor[(231), bool], %var_9893: Tensor[(234), int16]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(288, 4), float32], Tensor[(10, 2, 10), bool], Tensor[(20), bool], Tensor[(200), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(9, 13, 2), bool], Tensor[(40, 26), float64], Tensor[(180), uint16], int32, Tensor[(2, 1092), int32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(33), uint32], Tensor[(231), bool], Tensor[(40, 26), bool], Tensor[(12, 6, 10), float32], Tensor[(234), float64]) {
  %1035 = @func_4699() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */;
  %1036 = @func_8450() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1037 = cast(%var_9783, dtype="bool") /* ty=Tensor[(20), bool] */;
  %1038 = cast(meta[relay.Constant][65] /* ty=Tensor[(200), bool] */, dtype="bool") /* ty=Tensor[(200), bool] */;
  %1039 = reshape(%1037, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
  %1040 = reshape(%1038, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
  %1041 = @func_5705(%1039, %1040) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
  %1042 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1043 = cast(%var_9802, dtype="int16") /* ty=Tensor[(234), int16] */;
  %1044 = reshape(%1043, newshape=[234]) /* ty=Tensor[(234), int16] */;
  %1045 = @func_6300(%1044) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(576, 2), float32], Tensor[(3, 14, 2), int8], Tensor[(84), int8], Tensor[(9, 13, 2), float32], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
  %1046 = cast(%var_9802, dtype="int16") /* ty=Tensor[(234), int16] */;
  %1047 = cast(meta[relay.Constant][64] /* ty=Tensor[(288, 4), float32] */, dtype="float32") /* ty=Tensor[(288, 4), float32] */;
  %1048 = reshape(%1046, newshape=[9, 13, 2]) /* ty=Tensor[(9, 13, 2), int16] */;
  %1049 = reshape(%1047, newshape=[24, 48]) /* ty=Tensor[(24, 48), float32] */;
  %1050 = @func_6047(%1048, %1049) /* ty=(Tensor[(9, 13, 2), bool], Tensor[(180), uint16], Tensor[(24, 48), float32], Tensor[(12, 6, 10), float32], Tensor[(9, 13, 2), float32]) */;
  %1051 = cast(meta[relay.Constant][64] /* ty=Tensor[(288, 4), float32] */, dtype="float32") /* ty=Tensor[(288, 4), float32] */;
  %1052 = reshape(%1051, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1053 = @func_3258(%1052) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(40, 26), float32], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
  %1054 = %1053.3;
  %1055 = cast(meta[relay.Constant][66] /* ty=Tensor[(40, 26), float32] */, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %1056 = shape_of(%1054, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1057 = cast(%1054, dtype="float64") /* ty=Tensor[(40, 26), float64] */;
  %1058 = dyn.reshape(%1055, %1056, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1059 = cast(-7 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1060 = cast(%var_9832, dtype="int32") /* ty=Tensor[(2, 1092), int32] */;
  %1061 = %1045.6;
  %1062 = cast(%1061, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
  %1063 = reshape(%1059, newshape=[]) /* ty=int32 */;
  %1064 = reshape(%1060, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), int32] */;
  %1065 = reshape(%1062, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1066 = @func_3757(%1063, %1064, %1065) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */;
  %1067 = cast(-7 /* ty=int32 */, dtype="uint32") /* ty=uint32 */;
  %1068 = cast(meta[relay.Constant][67] /* ty=Tensor[(33), uint32] */, dtype="uint32") /* ty=Tensor[(33), uint32] */;
  %1069 = cast(%var_9863, dtype="bool") /* ty=Tensor[(231), bool] */;
  %1070 = reshape(%1067, newshape=[]) /* ty=uint32 */;
  %1071 = reshape(%1068, newshape=[3, 11, 1]) /* ty=Tensor[(3, 11, 1), uint32] */;
  %1072 = reshape(%1069, newshape=[3, 11, 7]) /* ty=Tensor[(3, 11, 7), bool] */;
  %1073 = @func_8441(%1070, %1071, %1072) /* ty=(Tensor[(3, 11, 7), bool], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */;
  %1074 = cast(meta[relay.Constant][66] /* ty=Tensor[(40, 26), float32] */, dtype="bool") /* ty=Tensor[(40, 26), bool] */;
  %1075 = shape_of(%1054, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1076 = cast(%1054, dtype="bool") /* ty=Tensor[(40, 26), bool] */;
  %1077 = dyn.reshape(%1074, %1075, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %1078 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1079 = cast(%var_9893, dtype="float64") /* ty=Tensor[(234), float64] */;
  %1080 = shape_of(%var_9802, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1081 = cast(%var_9802, dtype="float64") /* ty=Tensor[(234), float64] */;
  %1082 = dyn.reshape(%1079, %1080, newshape=[]) /* ty=Tensor[(?), float64] */;
  %1083 = %1035.2;
  %1084 = %1036.0;
  %1085 = %1041.0;
  %1086 = %1042.0;
  %1087 = %1050.0;
  %1088 = mod(%1057, %1058) /* ty=Tensor[(40, 26), float64] */;
  %1089 = %1066.3;
  %1090 = @func_7089() /* ty=Tensor[(12, 6, 10), float32] */;
  %1091 = %1073.2;
  %1092 = greater_equal(%1076, %1077) /* ty=Tensor[(40, 26), bool] */;
  %1093 = %1078.0;
  %1094 = mod(%1081, %1082) /* ty=Tensor[(234), float64] */;
  (%1083, %1084, meta[relay.Constant][64] /* ty=Tensor[(288, 4), float32] */, %1085, %var_9783, meta[relay.Constant][65] /* ty=Tensor[(200), bool] */, %1086, %1061, %1087, %1088, %1089, -7 /* ty=int32 */, %var_9832, %1090, %1091, meta[relay.Constant][67] /* ty=Tensor[(33), uint32] */, %var_9863, %1092, %1093, %1094)
}

def @func_4860(%var_4859: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool], Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), int64], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1126 = fn (%var_4746: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool], Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), int64], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %1095 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1096 = %1095.0;
    %1097 = cast(%var_4746, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
    %1098 = shape_of(%1096, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1099 = cast(%1096, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
    %1100 = dyn.reshape(%1097, %1098, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1101 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1102 = cast(meta[relay.Constant][68] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %1103 = cast(meta[relay.Constant][69] /* ty=Tensor[(48, 24), float32] */, dtype="float32") /* ty=Tensor[(48, 24), float32] */;
    %1104 = reshape(%1102, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
    %1105 = reshape(%1103, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1106 = @func_2696(%1104, %1105) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
    %1107 = cast(meta[relay.Constant][68] /* ty=Tensor[(1404), bool] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %1108 = cast(meta[relay.Constant][69] /* ty=Tensor[(48, 24), float32] */, dtype="float32") /* ty=Tensor[(48, 24), float32] */;
    %1109 = reshape(%1107, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
    %1110 = reshape(%1108, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1111 = @func_2696(%1109, %1110) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
    %1112 = %1111.5;
    %1113 = cast(meta[relay.Constant][69] /* ty=Tensor[(48, 24), float32] */, dtype="int64") /* ty=Tensor[(48, 24), int64] */;
    %1114 = shape_of(%1112, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1115 = cast(%1112, dtype="int64") /* ty=Tensor[(1152), int64] */;
    %1116 = dyn.reshape(%1113, %1114, newshape=[]) /* ty=Tensor[(?), int64] */;
    %1117 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1118 = @func_4715() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1119 = logical_or(%1099, %1100) /* ty=Tensor[(12, 6, 10), bool] */;
    %1120 = %1101.1;
    %1121 = @func_3689() /* ty=Tensor[(12, 6, 10), float32] */;
    %1122 = %1106.0;
    %1123 = bitwise_and(%1115, %1116) /* ty=Tensor[(1152), int64] */;
    %1124 = %1117.0;
    %1125 = %1118.0;
    (%1119, meta[relay.Constant][68] /* ty=Tensor[(1404), bool] */, %1120, %1121, %1122, %1123, %1124, %1125)
  };
  %1126(%var_4859) /* ty=(Tensor[(12, 6, 10), bool], Tensor[(1404), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(1152), int64], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_5175(%var_5171: uint32, %var_5172: Tensor[(4, 3, 13), uint32], %var_5173: Tensor[(180), uint16], %var_5174: Tensor[(5, 6, 6), float64]) -> (Tensor[(4, 3, 13), uint32], Tensor[(180), uint16], Tensor[(5, 6, 6), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1151 = fn (%var_5112: uint32, %var_5113: Tensor[(4, 3, 13), uint32], %var_5125: Tensor[(180), uint16], %var_5144: Tensor[(5, 6, 6), float64]) -> (Tensor[(4, 3, 13), uint32], Tensor[(180), uint16], Tensor[(5, 6, 6), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %1127 = cast(%var_5112, dtype="uint32") /* ty=uint32 */;
    %1128 = cast(%var_5113, dtype="uint32") /* ty=Tensor[(4, 3, 13), uint32] */;
    %1129 = cast(%var_5125, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %1130 = reshape(%1129, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
    %1131 = @func_261(%1130) /* ty=(Tensor[(5, 6, 6), uint16],) */;
    %1132 = %1131.0;
    %1133 = cast(%1132, dtype="float64") /* ty=Tensor[(5, 6, 6), float64] */;
    %1134 = sinh(%1133) /* ty=Tensor[(5, 6, 6), float64] */;
    %1135 = cast(%var_5144, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
    %1136 = shape_of(%1134, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1137 = cast(%1134, dtype="float32") /* ty=Tensor[(5, 6, 6), float32] */;
    %1138 = dyn.reshape(%1135, %1136, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1139 = cast(%var_5144, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %1140 = reshape(%1139, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %1141 = @func_3427(%1140) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */;
    %1142 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1143 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1144 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1145 = subtract(%1127, %1128) /* ty=Tensor[(4, 3, 13), uint32] */;
    %1146 = divide(%1137, %1138) /* ty=Tensor[(5, 6, 6), float32] */;
    %1147 = %1141.1;
    %1148 = %1142.1;
    %1149 = %1143.1;
    %1150 = %1144.0;
    (%1145, %var_5125, %1146, %1147, %1148, %1149, %1150)
  };
  %1151(%var_5171, %var_5172, %var_5173, %var_5174) /* ty=(Tensor[(4, 3, 13), uint32], Tensor[(180), uint16], Tensor[(5, 6, 6), float32], Tensor[(5, 6, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_10054(%var_10032: Tensor[(490), bool]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(7, 70), bool], Tensor[(490), bool], Tensor[(845), float64], Tensor[(1152), float32]) {
  %1152 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1153 = cast(%var_10032, dtype="bool") /* ty=Tensor[(490), bool] */;
  %1154 = cast(meta[relay.Constant][70] /* ty=Tensor[(845), float64] */, dtype="float64") /* ty=Tensor[(845), float64] */;
  %1155 = reshape(%1153, newshape=[7, 70]) /* ty=Tensor[(7, 70), bool] */;
  %1156 = reshape(%1154, newshape=[845]) /* ty=Tensor[(845), float64] */;
  %1157 = @func_7624(%1155, %1156) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(7, 70), bool], int32, Tensor[(65, 13), float64], Tensor[(845), bool]) */;
  %1158 = %1152.0;
  %1159 = @func_7077() /* ty=Tensor[(12, 6, 10), float64] */;
  %1160 = %1157.1;
  %1161 = @func_7479() /* ty=Tensor[(1152), float32] */;
  (%1158, %1159, %1160, %var_10032, meta[relay.Constant][70] /* ty=Tensor[(845), float64] */, %1161)
}

def @func_4254(%var_4235: Tensor[(180), uint16]) -> (Tensor[(180), uint8], Tensor[(1152), float32], Tensor[(1152), float32]) {
  %1162 = @func_2562() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1163 = %1162.3;
  %1164 = cast(%var_4235, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %1165 = shape_of(%1163, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1166 = cast(%1163, dtype="uint8") /* ty=Tensor[(180), uint8] */;
  %1167 = dyn.reshape(%1164, %1165, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %1168 = cast(meta[relay.Constant][71] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1169 = multiply(%1166, %1167) /* ty=Tensor[(180), uint8] */;
  %1170 = cast(%1169, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1171 = reshape(%1168, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1172 = reshape(%1170, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1173 = @func_4058(%1171, %1172) /* ty=(Tensor[(12, 6, 10), int16], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16]) */;
  %1174 = %1173.2;
  (%1169, %1174, meta[relay.Constant][71] /* ty=Tensor[(1152), float32] */)
}

def @func_10217() -> Tensor[(12, 6, 10), float32] {
  %1176 = fn () -> Tensor[(12, 6, 10), float32] {
    %1175 = @func_5727() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1175.0
  };
  %1176() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_7041() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_10304(%var_10302: Tensor[(14, 16, 16), bool], %var_10303: Tensor[(1, 490), bool]) -> (Tensor[(14, 16, 16), uint8], Tensor[(14, 16, 16), float32], Tensor[(1152), float32], Tensor[(1, 490), bool], Tensor[(14, 16, 16), float64], Tensor[(5, 6, 6), uint16], Tensor[(135), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32]) {
  @func_10300(%var_10302, %var_10303) /* ty=(Tensor[(14, 16, 16), uint8], Tensor[(14, 16, 16), float32], Tensor[(1152), float32], Tensor[(1, 490), bool], Tensor[(14, 16, 16), float64], Tensor[(5, 6, 6), uint16], Tensor[(135), float32], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32]) */
}

def @func_8392() -> (Tensor[(12, 6, 10), float32],) {
  %1177 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1178 = %1177.1;
  (%1178,)
}

def @func_3095(%var_3090: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %1179 = cast(meta[relay.Constant][72] /* ty=Tensor[(1, 8, 7), float32] */, dtype="float32") /* ty=Tensor[(1, 8, 7), float32] */;
  %1180 = cosh(%1179) /* ty=Tensor[(1, 8, 7), float32] */;
  %1181 = cast(meta[relay.Constant][72] /* ty=Tensor[(1, 8, 7), float32] */, dtype="bool") /* ty=Tensor[(1, 8, 7), bool] */;
  %1182 = shape_of(%1180, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1183 = cast(%1180, dtype="bool") /* ty=Tensor[(1, 8, 7), bool] */;
  %1184 = dyn.reshape(%1181, %1182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1185 = cast(meta[relay.Constant][73] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1186 = cast(%var_3090, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1187 = cast(%var_3090, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1188 = reshape(%1185, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %1189 = reshape(%1186, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1190 = reshape(%1187, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1191 = @func_631(%1188, %1189, %1190) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %1192 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
  %1193 = equal(%1183, %1184) /* ty=Tensor[(?, 8, 7), bool] */;
  %1194 = %1191.3;
  (%1192, %1193, %1194, meta[relay.Constant][73] /* ty=Tensor[(1152), float32] */, %var_3090)
}

def @func_4188() -> (Tensor[(12, 6, 10), float32],) {
  @func_4186() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_3937(%var_3935: bool, %var_3936: Tensor[(1404), bool]) -> (Tensor[(1152), float64], Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(286), float64], Tensor[(12, 6, 10), float32]) {
  %1231 = fn (%var_3912: bool, %var_3913: Tensor[(1404), bool]) -> (Tensor[(1152), float64], Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(286), float64], Tensor[(12, 6, 10), float32]) {
    %1195 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
    %1196 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
    %1197 = cast(meta[relay.Constant][74] /* ty=Tensor[(286), float32] */, dtype="float32") /* ty=Tensor[(286), float32] */;
    %1198 = cast(meta[relay.Constant][75] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %1199 = cast(%var_3912, dtype="bool") /* ty=bool */;
    %1200 = cast(%var_3913, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %1201 = reshape(%1197, newshape=[2, 13, 11]) /* ty=Tensor[(2, 13, 11), float32] */;
    %1202 = reshape(%1198, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %1203 = reshape(%1199, newshape=[]) /* ty=bool */;
    %1204 = reshape(%1200, newshape=[12, 9, 13]) /* ty=Tensor[(12, 9, 13), bool] */;
    %1205 = @func_1295(%1201, %1202, %1203, %1204) /* ty=(Tensor[(180, 1), uint16], Tensor[(135), float32], Tensor[(576, 2), float32], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], bool, Tensor[(1404), bool], Tensor[(12, 9, 13), uint32], Tensor[(12, 9, 13), bool], Tensor[(12, 9, 13), bool], Tensor[(2, 13, 11), float64], Tensor[(5, 6, 6), uint16]) */;
    %1206 = %1205.1;
    %1207 = cast(%1206, dtype="float32") /* ty=Tensor[(135), float32] */;
    %1208 = %1196.3;
    %1209 = cast(%1208, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1210 = cast(meta[relay.Constant][75] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %1211 = reshape(%1207, newshape=[9, 1, 15]) /* ty=Tensor[(9, 1, 15), float32] */;
    %1212 = reshape(%1209, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1213 = reshape(%1210, newshape=[180, 1]) /* ty=Tensor[(180, 1), uint16] */;
    %1214 = @func_1120(%1211, %1212, %1213) /* ty=(Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180, 1), uint16]) */;
    %1215 = cast(meta[relay.Constant][76] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1216 = cast(%1208, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1217 = reshape(%1215, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
    %1218 = reshape(%1216, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1219 = @func_3226(%1217, %1218) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1220 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1221 = cast(meta[relay.Constant][74] /* ty=Tensor[(286), float32] */, dtype="float64") /* ty=Tensor[(286), float64] */;
    %1222 = %1219.6;
    %1223 = cast(%1222, dtype="uint16") /* ty=Tensor[(5, 6, 6), uint16] */;
    %1224 = reshape(%1223, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %1225 = @func_3095(%1224) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(?, 8, 7), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
    %1226 = %1195.9;
    %1227 = %1214.0;
    %1228 = %1220.1;
    %1229 = exp(%1221) /* ty=Tensor[(286), float64] */;
    %1230 = %1225.0;
    (%1226, %1208, %1206, meta[relay.Constant][75] /* ty=Tensor[(180), uint16] */, %var_3912, %var_3913, %1227, %1222, meta[relay.Constant][76] /* ty=Tensor[(1040), float32] */, %1228, %1229, %1230)
  };
  %1231(%var_3935, %var_3936) /* ty=(Tensor[(1152), float64], Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16], bool, Tensor[(1404), bool], Tensor[(9, ?, 15), float32], Tensor[(5, 6, 6), uint16], Tensor[(1040), float32], Tensor[(12, 6, 10), float32], Tensor[(286), float64], Tensor[(12, 6, 10), float32]) */
}

def @func_8536() -> (Tensor[(1152), float32],) {
  %1232 = @func_8173() /* ty=(Tensor[(1152), float32],) */;
  %1233 = %1232.0;
  (%1233,)
}

def @func_5542() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1240 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
    %1234 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1235 = %1234.0;
    %1236 = cast(%1235, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
    %1237 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1238 = acosh(%1236) /* ty=Tensor[(12, 6, 10), float32] */;
    %1239 = %1237.1;
    (%1238, %1239)
  };
  %1240() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_4982() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1241 = @func_3981() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1242 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1243 = %1242.0;
  %1244 = cast(%1243, dtype="float32") /* ty=Tensor[(12, 6, 10), float32] */;
  %1245 = %1241.0;
  %1246 = log(%1244) /* ty=Tensor[(12, 6, 10), float32] */;
  (%1245, %1246)
}

def @func_9157() -> Tensor[(1152), float32] {
  @func_9155() /* ty=Tensor[(1152), float32] */
}

def @func_4072() -> (Tensor[(12, 6, 10), float32],) {
  %1249 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %1247 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1248 = %1247.0;
    (%1248,)
  };
  %1249() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_7131() -> Tensor[(12, 6, 10), float32] {
  @func_7129() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_4291() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  %1250 = @func_3526() /* ty=(Tensor[(1152), float32], Tensor[(1152), float64], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(13, 10, 8), bool], Tensor[(1040), float32], Tensor[(1152), float64]) */;
  %1251 = @func_2883() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1252 = %1250.4;
  %1253 = %1251.0;
  (%1252, %1253)
}

def @func_4293() -> (Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) {
  @func_4291() /* ty=(Tensor[(180), uint16], Tensor[(12, 6, 10), float32]) */
}

def @func_9564() -> Tensor[(12, 6, 10), float32] {
  @func_9562() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_10106() -> (Tensor[(12, 6, 10), float32], Tensor[(11, 2, 14), float32], int32, Tensor[(2184), int32], Tensor[(180), uint16]) {
  %1254 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1255 = cast(-8 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1256 = cast(meta[relay.Constant][77] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %1257 = cast(meta[relay.Constant][78] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
  %1258 = reshape(%1255, newshape=[]) /* ty=int32 */;
  %1259 = reshape(%1256, newshape=[13, 14, 12]) /* ty=Tensor[(13, 14, 12), int32] */;
  %1260 = reshape(%1257, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1261 = @func_3757(%1258, %1259, %1260) /* ty=(Tensor[(13, 14, 12), bool], Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(11, 2, 14), float32]) */;
  %1262 = %1254.1;
  %1263 = %1261.4;
  (%1262, %1263, -8 /* ty=int32 */, meta[relay.Constant][77] /* ty=Tensor[(2184), int32] */, meta[relay.Constant][78] /* ty=Tensor[(180), uint16] */)
}

def @func_3671() -> (Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) {
  @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_8174() -> (Tensor[(1152), float32],) {
  %1265 = fn () -> (Tensor[(1152), float32],) {
    %1264 = @func_7881() /* ty=Tensor[(1152), float32] */;
    (%1264,)
  };
  %1265() /* ty=(Tensor[(1152), float32],) */
}

def @func_6597(%var_6595: bool) -> (Tensor[(12, 6, 10), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(2340), uint16], bool, Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16]) {
  @func_6594(%var_6595) /* ty=(Tensor[(12, 6, 10), float64], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(2340), uint16], bool, Tensor[(1152), float32], Tensor[(135), float32], Tensor[(180), uint16]) */
}

def @func_5728() -> (Tensor[(12, 6, 10), float32],) {
  %1268 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %1266 = @func_2860() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1267 = %1266.0;
    (%1267,)
  };
  %1268() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_9693() -> (Tensor[(12, 6, 10), float32],) {
  %1271 = fn () -> (Tensor[(12, 6, 10), float32],) {
    %1269 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1270 = %1269.1;
    (%1270,)
  };
  %1271() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_9475() -> (Tensor[(12, 6, 10), float32],) {
  @func_9473() /* ty=(Tensor[(12, 6, 10), float32],) */
}

def @func_9116() -> (Tensor[(12, 6, 10), float32],) {
  %1272 = @func_8556() /* ty=Tensor[(12, 6, 10), float32] */;
  (%1272,)
}

def @func_8339() -> (Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %1273 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1274 = %1273.1;
  %1275 = cast(%1274, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
  %1276 = @func_7142() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1277 = sin(%1275) /* ty=Tensor[(12, 6, 10), float64] */;
  %1278 = %1276.0;
  (%1277, %1278)
}

def @func_7129() -> Tensor[(12, 6, 10), float32] {
  @func_5668() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8558() -> Tensor[(12, 6, 10), float32] {
  @func_8556() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_8676() -> Tensor[(1152), float32] {
  %1279 = fn () -> Tensor[(1152), float32] {
    @func_7479() /* ty=Tensor[(1152), float32] */
  };
  %1279() /* ty=Tensor[(1152), float32] */
}

def @func_3230(%var_3228: Tensor[(13, 10, 8), float32], %var_3229: Tensor[(1152), float32]) -> (Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  @func_3226(%var_3228, %var_3229) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

def @func_8907(%var_8904: Tensor[(845), float64], %var_8905: Tensor[(3, 60), uint16], %var_8906: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(3, 60), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1040), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(845), bool]) {
  %1305 = fn (%var_8868: Tensor[(845), float64], %var_8869: Tensor[(3, 60), uint16], %var_8898: Tensor[(845), float64]) -> (Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(3, 60), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1040), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(845), bool]) {
    %1280 = @func_4071() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1281 = cast(%var_8868, dtype="float64") /* ty=Tensor[(845), float64] */;
    %1282 = cast(%var_8869, dtype="uint16") /* ty=Tensor[(3, 60), uint16] */;
    %1283 = reshape(%1281, newshape=[13, 5, 13]) /* ty=Tensor[(13, 5, 13), float64] */;
    %1284 = reshape(%1282, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %1285 = @func_3595(%1283, %1284) /* ty=(Tensor[(13, 5, 13), float64], Tensor[(13, 5, 13), float32], Tensor[(180), uint16], Tensor[(180), uint16]) */;
    %1286 = @func_8504() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1287 = cast(meta[relay.Constant][79] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1288 = cast(meta[relay.Constant][80] /* ty=Tensor[(1152), float32] */, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1289 = reshape(%1287, newshape=[13, 10, 8]) /* ty=Tensor[(13, 10, 8), float32] */;
    %1290 = reshape(%1288, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1291 = @func_3226(%1289, %1290) /* ty=(Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1292 = @func_7039() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1293 = cast(%var_8868, dtype="float64") /* ty=Tensor[(845), float64] */;
    %1294 = sinh(%1293) /* ty=Tensor[(845), float64] */;
    %1295 = cast(%var_8898, dtype="bool") /* ty=Tensor[(845), bool] */;
    %1296 = shape_of(%1294, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1297 = cast(%1294, dtype="bool") /* ty=Tensor[(845), bool] */;
    %1298 = dyn.reshape(%1295, %1296, newshape=[]) /* ty=Tensor[(?), bool] */;
    %1299 = %1280.0;
    %1300 = %1285.3;
    %1301 = %1286.0;
    %1302 = %1291.5;
    %1303 = %1292.2;
    %1304 = less(%1297, %1298) /* ty=Tensor[(845), bool] */;
    (%1299, %1300, %var_8869, %1301, %1302, meta[relay.Constant][79] /* ty=Tensor[(1040), float32] */, meta[relay.Constant][80] /* ty=Tensor[(1152), float32] */, %1303, %1304)
  };
  %1305(%var_8904, %var_8905, %var_8906) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(180), uint16], Tensor[(3, 60), uint16], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1040), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32], Tensor[(845), bool]) */
}

def @func_5222(%var_5208: Tensor[(12, 6, 10), float32]) -> (Tensor[(12, 6, 10), bool],) {
  %1306 = @func_4650() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1307 = %1306.1;
  %1308 = cast(%var_5208, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %1309 = shape_of(%1307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1310 = cast(%1307, dtype="bool") /* ty=Tensor[(12, 6, 10), bool] */;
  %1311 = dyn.reshape(%1308, %1309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1312 = logical_and(%1310, %1311) /* ty=Tensor[(12, 6, 10), bool] */;
  (%1312,)
}

def @func_10405() -> Tensor[(12, 6, 10), float32] {
  @func_10403() /* ty=Tensor[(12, 6, 10), float32] */
}

def @func_6973(%var_6971: Tensor[(200), bool], %var_6972: Tensor[(180), uint16]) -> (Tensor[(12, 6, 10), float32], Tensor[(50, 4), bool], Tensor[(200), bool], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) {
  @func_6969(%var_6971, %var_6972) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(50, 4), bool], Tensor[(200), bool], Tensor[(5, 6, 6), uint16], Tensor[(180), uint16]) */
}

def @func_1083(%var_1081: bool, %var_1082: Tensor[(12, 9, 13), bool]) -> (Tensor[(12, 9, 13), bool],) {
  @func_1079(%var_1081, %var_1082) /* ty=(Tensor[(12, 9, 13), bool],) */
}

def @func_3226(%var_3132: Tensor[(13, 10, 8), float32], %var_3175: Tensor[(1152), float32]) -> (Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), float32], Tensor[(13, 10, 8), bool], Tensor[(12, 6, 10), float32], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(5, 6, 6), uint16], Tensor[(30, 6), uint16], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  %1313 = cast(%var_3132, dtype="float32") /* ty=Tensor[(13, 10, 8), float32] */;
  %1314 = cast(%var_3132, dtype="float32") /* ty=Tensor[(13, 10, 8), float32] */;
  %1315 = cast(meta[relay.Constant][81] /* ty=Tensor[(13, 10, 8), float32] */, dtype="bool") /* ty=Tensor[(13, 10, 8), bool] */;
  %1316 = shape_of(%var_3132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1317 = cast(%var_3132, dtype="bool") /* ty=Tensor[(13, 10, 8), bool] */;
  %1318 = dyn.reshape(%1315, %1316, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1319 = @func_2131() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1320 = cast(%var_3175, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1321 = reshape(%1320, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
  %1322 = @func_2247(%1321) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */;
  %1323 = cast(%var_3175, dtype="float32") /* ty=Tensor[(1152), float32] */;
  %1324 = cast(meta[relay.Constant][82] /* ty=Tensor[(30, 6), uint16] */, dtype="uint16") /* ty=Tensor[(30, 6), uint16] */;
  %1325 = cast(meta[relay.Constant][82] /* ty=Tensor[(30, 6), uint16] */, dtype="uint16") /* ty=Tensor[(30, 6), uint16] */;
  %1326 = reshape(%1323, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
  %1327 = reshape(%1324, newshape=[180]) /* ty=Tensor[(180), uint16] */;
  %1328 = reshape(%1325, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
  %1329 = @func_631(%1326, %1327, %1328) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
  %1330 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
  %1331 = @func_2625() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
  %1332 = exp(%1313) /* ty=Tensor[(13, 10, 8), float32] */;
  %1333 = sigmoid(%1314) /* ty=Tensor[(13, 10, 8), float32] */;
  %1334 = greater(%1317, %1318) /* ty=Tensor[(13, 10, 8), bool] */;
  %1335 = %1319.0;
  %1336 = %1322.2;
  %1337 = %1329.6;
  %1338 = %1330.0;
  %1339 = %1331.0;
  (%1332, %1333, %1334, %1335, %1336, %var_3175, %1337, meta[relay.Constant][82] /* ty=Tensor[(30, 6), uint16] */, %1338, %1339)
}

def @func_7695(%var_7694: Tensor[(1152), float32]) -> (Tensor[(1152), float32],) {
  %1347 = fn (%var_7674: Tensor[(1152), float32]) -> (Tensor[(1152), float32],) {
    %1340 = @func_3669() /* ty=(Tensor[(180), uint16], Tensor[(180), uint16], Tensor[(1152), float32], Tensor[(1152), float32], Tensor[(12, 6, 10), float32]) */;
    %1341 = %1340.2;
    %1342 = cast(%var_7674, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1343 = shape_of(%1341, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1344 = cast(%1341, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1345 = dyn.reshape(%1342, %1343, newshape=[]) /* ty=Tensor[(?), float32] */;
    %1346 = mod(%1344, %1345) /* ty=Tensor[(1152), float32] */;
    (%1346,)
  };
  %1347(%var_7694) /* ty=(Tensor[(1152), float32],) */
}

def @func_9435(%var_9433: Tensor[(1404), bool], %var_9434: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], bool, Tensor[(1404), bool], Tensor[(1152), float32]) {
  %1356 = fn (%var_9425: Tensor[(1404), bool], %var_9426: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], bool, Tensor[(1404), bool], Tensor[(1152), float32]) {
    %1348 = cast(%var_9425, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %1349 = cast(%var_9426, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1350 = reshape(%1348, newshape=[1404]) /* ty=Tensor[(1404), bool] */;
    %1351 = reshape(%1349, newshape=[1152]) /* ty=Tensor[(1152), float32] */;
    %1352 = @func_2696(%1350, %1351) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 9, 13), bool], bool, Tensor[(1404), bool], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32]) */;
    %1353 = @func_7089() /* ty=Tensor[(12, 6, 10), float32] */;
    %1354 = @func_5807() /* ty=Tensor[(12, 6, 10), float32] */;
    %1355 = %1352.2;
    (%1353, %1354, %1355, %var_9425, %var_9426)
  };
  %1356(%var_9433, %var_9434) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], bool, Tensor[(1404), bool], Tensor[(1152), float32]) */
}

def @func_2249(%var_2248: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
  %1367 = fn (%var_2230: Tensor[(1152), float32]) -> (Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) {
    %1357 = @func_2168() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1358 = cast(%var_2230, dtype="float32") /* ty=Tensor[(1152), float32] */;
    %1359 = cast(meta[relay.Constant][83] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %1360 = cast(meta[relay.Constant][83] /* ty=Tensor[(180), uint16] */, dtype="uint16") /* ty=Tensor[(180), uint16] */;
    %1361 = reshape(%1358, newshape=[16, 12, 6]) /* ty=Tensor[(16, 12, 6), float32] */;
    %1362 = reshape(%1359, newshape=[180]) /* ty=Tensor[(180), uint16] */;
    %1363 = reshape(%1360, newshape=[5, 6, 6]) /* ty=Tensor[(5, 6, 6), uint16] */;
    %1364 = @func_631(%1361, %1362, %1363) /* ty=(Tensor[(5, 6, 6), uint16], Tensor[(180), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), uint32], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(5, 6, 6), uint16], Tensor[(16, 12, 6), bool], Tensor[(16, 12, 6), float64], Tensor[(5, 6, 6), float32]) */;
    %1365 = %1357.0;
    %1366 = %1364.0;
    (%1365, %1366, %var_2230, meta[relay.Constant][83] /* ty=Tensor[(180), uint16] */)
  };
  %1367(%var_2248) /* ty=(Tensor[(12, 6, 10), float32], Tensor[(5, 6, 6), uint16], Tensor[(1152), float32], Tensor[(180), uint16]) */
}

def @func_6159() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
  %1385 = fn () -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) {
    %1368 = @func_3867() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1369 = cast(meta[relay.Constant][84] /* ty=Tensor[(20), bool] */, dtype="bool") /* ty=Tensor[(20), bool] */;
    %1370 = cast(meta[relay.Constant][85] /* ty=Tensor[(50, 4), bool] */, dtype="bool") /* ty=Tensor[(50, 4), bool] */;
    %1371 = reshape(%1369, newshape=[1, 2, 10]) /* ty=Tensor[(1, 2, 10), bool] */;
    %1372 = reshape(%1370, newshape=[10, 2, 10]) /* ty=Tensor[(10, 2, 10), bool] */;
    %1373 = @func_5705(%1371, %1372) /* ty=(Tensor[(10, 2, 10), bool], Tensor[(12, 6, 10), float32]) */;
    %1374 = @func_4169() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1375 = @func_5830() /* ty=(Tensor[(12, 6, 10), float32],) */;
    %1376 = %1375.0;
    %1377 = cast(%1376, dtype="float64") /* ty=Tensor[(12, 6, 10), float64] */;
    %1378 = @func_4982() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */;
    %1379 = @func_2502() /* ty=Tensor[(12, 6, 10), float32] */;
    %1380 = %1368.0;
    %1381 = %1373.1;
    %1382 = %1374.0;
    %1383 = atan(%1377) /* ty=Tensor[(12, 6, 10), float64] */;
    %1384 = %1378.0;
    (%1379, %1380, %1381, meta[relay.Constant][84] /* ty=Tensor[(20), bool] */, meta[relay.Constant][85] /* ty=Tensor[(50, 4), bool] */, %1382, %1383, %1384)
  };
  %1385() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32], Tensor[(20), bool], Tensor[(50, 4), bool], Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float64], Tensor[(12, 6, 10), float32]) */
}

def @func_9645() -> (Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) {
  @func_9643() /* ty=(Tensor[(12, 6, 10), float32], Tensor[(12, 6, 10), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen259/build/output.py", line 3352, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:01:44] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

