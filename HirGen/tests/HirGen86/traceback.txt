==========mod==========
#[version = "0.0.5"]
def @func_2230() -> (Tensor[(2, 7, 3), float32],) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(2, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %1 = acos(%0) /* ty=Tensor[(2, 7, 3), float32] */;
  (%1,)
}

def @func_2913() -> Tensor[(2, 7, 3), float32] {
  %2 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %2.0
}

def @func_4335() -> Tensor[(2, 7, 3), float32] {
  %3 = @func_4288() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %3.0
}

def @func_4367(%var_4351: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(7, 8, 12), float64], Tensor[(672), float64]) {
  %4 = cast(%var_4351, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %6 = reshape(%5, newshape=[7, 8, 12]) /* ty=Tensor[(7, 8, 12), float64] */;
  %7 = @func_4140(%6) /* ty=(Tensor[(7, 8, 12), float64], Tensor[(2, 7, 3), int16], Tensor[(264), bool]) */;
  %8 = erf(%4) /* ty=Tensor[(3, 7, 12), float32] */;
  %9 = %7.0;
  (%8, %9, meta[relay.Constant][1] /* ty=Tensor[(672), float64] */)
}

def @func_3426(%var_3372: Tensor[(2, 7, 3), float32], %var_3378: Tensor[(143), uint8]) -> (Tensor[(2, 7, 3), bool], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1, 1430), uint8], Tensor[(2, 7, 3), uint64]) {
  %10 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %11 = %10.0;
  %12 = cast(%var_3372, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = cast(%var_3378, dtype="uint8") /* ty=Tensor[(143), uint8] */;
  %17 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 1430), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1430), uint8] */;
  %18 = reshape(%16, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), uint8] */;
  %19 = reshape(%17, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint8] */;
  %20 = cast(%var_3372, dtype="uint64") /* ty=Tensor[(2, 7, 3), uint64] */;
  %21 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%11, dtype="uint64") /* ty=Tensor[(2, 7, 3), uint64] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %24 = greater_equal(%14, %15) /* ty=Tensor[(2, 7, 3), bool] */;
  %25 = @func_1020(%18, %19) /* ty=Tensor[(10, 13, 11), uint8] */;
  %26 = bitwise_and(%22, %23) /* ty=Tensor[(2, 7, 3), uint64] */;
  (%24, %25, %var_3378, meta[relay.Constant][2] /* ty=Tensor[(1, 1430), uint8] */, %26)
}

def @func_3842() -> (Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) {
  %27 = @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */;
  %28 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %29 = %27.1;
  %30 = %28.2;
  (%29, %30)
}

def @func_2485(%var_2479: uint16) -> (Tensor[(2, 7, 3), float32], Tensor[(3, 12, 11), float32], uint16) {
  %31 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %32 = cast(%var_2479, dtype="uint16") /* ty=uint16 */;
  %33 = reshape(%32, newshape=[]) /* ty=uint16 */;
  %34 = @func_47(%33) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %35 = %31.0;
  %36 = %34.1;
  (%35, %36, %var_2479)
}

def @func_2102(%var_2072: Tensor[(4, 10, 5), float32]) -> (Tensor[(4, 10, 5), float32],) {
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(4, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 5), float32] */;
  %38 = shape_of(%var_2072, dtype="int32") /* ty=Tensor[(3), int32] */;
  %39 = cast(%var_2072, dtype="float32") /* ty=Tensor[(4, 10, 5), float32] */;
  %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %41 = subtract(%39, %40) /* ty=Tensor[(4, 10, 5), float32] */;
  (%41,)
}

def @func_2813(%var_2811: Tensor[(264), bool]) -> (Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) {
  %42 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %43 = cast(%42, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %44 = cast(%var_2811, dtype="bool") /* ty=Tensor[(264), bool] */;
  %45 = reshape(%44, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), bool] */;
  %46 = atan(%43) /* ty=Tensor[(2, 7, 3), float32] */;
  %47 = @func_2406(%45) /* ty=Tensor[(2, 12, 11), float64] */;
  (%46, %47, %var_2811)
}

def @func_4661(%var_4653: Tensor[(5, 4, 14), float64]) -> (Tensor[(5, 4, 14), float64], Tensor[(5, 4, 14), bool]) {
  %48 = cast(%var_4653, dtype="float64") /* ty=Tensor[(5, 4, 14), float64] */;
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 4, 14), float64] */, dtype="bool") /* ty=Tensor[(5, 4, 14), bool] */;
  %50 = shape_of(%var_4653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%var_4653, dtype="bool") /* ty=Tensor[(5, 4, 14), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %53 = atanh(%48) /* ty=Tensor[(5, 4, 14), float64] */;
  %54 = not_equal(%51, %52) /* ty=Tensor[(5, 4, 14), bool] */;
  (%53, %54)
}

def @func_5658(%var_5629: Tensor[(16, 7, 9), float64], %var_5641: Tensor[(7, 156), float64], %var_5649: Tensor[(16, 7, 9), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), float64], Tensor[(7, 156), float64], Tensor[(16, 7, 9), bool], Tensor[(16, 7, 9), bool]) {
  %55 = cast(%var_5641, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %56 = reshape(%55, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %57 = @func_2182(%56) /* ty=(Tensor[(7, 12, 13), float64],) */;
  %58 = cast(%var_5629, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %59 = erf(%58) /* ty=Tensor[(16, 7, 9), float64] */;
  %60 = cast(%var_5629, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %61 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%59, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = cast(%var_5649, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %65 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%59, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %68 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %69 = %57.0;
  %70 = less(%62, %63) /* ty=Tensor[(16, 7, 9), bool] */;
  %71 = not_equal(%66, %67) /* ty=Tensor[(16, 7, 9), bool] */;
  (%68, %69, %var_5641, %70, %71)
}

def @func_4694() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool]) {
  %72 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %73 = %72.0;
  %74 = cast(%73, dtype="int16") /* ty=Tensor[(2, 7, 3), int16] */;
  %75 = reshape(%74, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), int16] */;
  %76 = @func_3275(%75) /* ty=(Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), uint8]) */;
  %77 = %76.0;
  (%73, %77)
}

def @func_3701(%var_3694: Tensor[(1800), uint64]) -> (Tensor[(2, 7, 3), float32], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) {
  %78 = cast(%var_3694, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %79 = reshape(%78, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
  %80 = @func_551(%79) /* ty=(Tensor[(10, 15, 12), uint64],) */;
  %81 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %82 = %80.0;
  (%81, %82, %var_3694)
}

def @func_4140(%var_4132: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64], Tensor[(2, 7, 3), int16], Tensor[(264), bool]) {
  %83 = cast(%var_4132, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %84 = cast(meta[relay.Constant][5] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %85 = reshape(%84, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %86 = @func_3455(%85) /* ty=(Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) */;
  %87 = exp(%83) /* ty=Tensor[(7, 8, 12), float64] */;
  %88 = %86.0;
  (%87, %88, meta[relay.Constant][5] /* ty=Tensor[(264), bool] */)
}

def @func_3976() -> Tensor[(2, 7, 3), float32] {
  @func_2972() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_5101(%var_5086: Tensor[(1800), uint64]) -> (Tensor[(2, 3, 5), float64], Tensor[(1800), bool]) {
  %89 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
  %90 = cast(%var_5086, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %91 = reshape(%90, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %92 = @func_3701(%91) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */;
  %93 = %92.2;
  %94 = cast(%93, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %95 = shape_of(%var_5086, dtype="int32") /* ty=Tensor[(1), int32] */;
  %96 = cast(%var_5086, dtype="bool") /* ty=Tensor[(1800), bool] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?), bool] */;
  %98 = acos(%89) /* ty=Tensor[(2, 3, 5), float64] */;
  %99 = equal(%96, %97) /* ty=Tensor[(1800), bool] */;
  (%98, %99)
}

def @func_4403(%var_4397: Tensor[(24), float64]) -> (Tensor[(2, 7, 3), uint8], Tensor[(12, 2), float64], Tensor[(24), float64]) {
  %100 = @func_3782() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) */;
  %101 = %100.2;
  %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 7, 3), int8] */, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %106 = cast(%var_4397, dtype="float64") /* ty=Tensor[(24), float64] */;
  %107 = reshape(%106, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %108 = @func_3862(%107) /* ty=(Tensor[(12, 2), float64],) */;
  %109 = maximum(%104, %105) /* ty=Tensor[(2, 7, 3), uint8] */;
  %110 = %108.0;
  (%109, %110, %var_4397)
}

def @func_4992() -> (Tensor[(2, 7, 3), float64],) {
  %111 = @func_3842() /* ty=(Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) */;
  %112 = %111.0;
  (%112,)
}

def @func_2972() -> Tensor[(2, 7, 3), float32] {
  %113 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  sqrt(%115) /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_3186() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) {
  %116 = @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */;
  %117 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %118 = @func_2521() /* ty=Tensor[(2, 7, 3), float32] */;
  %119 = cast(%118, dtype="int16") /* ty=Tensor[(2, 7, 3), int16] */;
  %120 = shape_of(%117, dtype="int32") /* ty=Tensor[(3), int32] */;
  %121 = cast(%117, dtype="int16") /* ty=Tensor[(2, 7, 3), int16] */;
  %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %123 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %124 = %116.0;
  %125 = minimum(%121, %122) /* ty=Tensor[(2, 7, 3), int16] */;
  %126 = %123.0;
  (%124, %125, %126)
}

def @func_2510(%var_2505: Tensor[(224), float32]) -> (Tensor[(2, 7, 3), float32], uint16, Tensor[(224), float32]) {
  %127 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %128 = cast(%var_2505, dtype="float32") /* ty=Tensor[(224), float32] */;
  %129 = reshape(%128, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float32] */;
  %130 = @func_440(%129) /* ty=(Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) */;
  %131 = %127.0;
  %132 = %130.2;
  (%131, %132, %var_2505)
}

def @func_3291() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) {
  %133 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %135 = sin(%134) /* ty=Tensor[(2, 7, 3), float32] */;
  %136 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  (%135, %136)
}

def @main(%var_5695: Tensor[(12, 6, 12), float64]) -> (Tensor[(12, 6, 12), float64], Tensor[(12, 6, 12), uint64]) {
  %137 = cast(%var_5695, dtype="float64") /* ty=Tensor[(12, 6, 12), float64] */;
  %138 = cast(%var_5695, dtype="float32") /* ty=Tensor[(12, 6, 12), float32] */;
  %139 = asinh(%138) /* ty=Tensor[(12, 6, 12), float32] */;
  %140 = cast(%var_5695, dtype="uint64") /* ty=Tensor[(12, 6, 12), uint64] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%139, dtype="uint64") /* ty=Tensor[(12, 6, 12), uint64] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %144 = erf(%137) /* ty=Tensor[(12, 6, 12), float64] */;
  %145 = logical_xor(%142, %143) /* ty=Tensor[(12, 6, 12), uint64] */;
  (%144, %145)
}

def @func_3152() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) {
  %146 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %148 = log2(%147) /* ty=Tensor[(2, 7, 3), float64] */;
  %149 = cast(%148, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %150 = shape_of(%146, dtype="int32") /* ty=Tensor[(3), int32] */;
  %151 = cast(%146, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %153 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %154 = mod(%151, %152) /* ty=Tensor[(2, 7, 3), float64] */;
  (%153, %154)
}

def @func_3862(%var_3845: Tensor[(12, 2), float64]) -> (Tensor[(12, 2), float64],) {
  %155 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %156 = shape_of(%var_3845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %157 = cast(%var_3845, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %158 = dyn.reshape(%155, %156, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %159 = power(%157, %158) /* ty=Tensor[(12, 2), float64] */;
  (%159,)
}

def @func_2182(%var_2166: Tensor[(7, 12, 13), float64]) -> (Tensor[(7, 12, 13), float64],) {
  %160 = cast(-3.89556f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %161 = cast(%var_2166, dtype="float64") /* ty=Tensor[(7, 12, 13), float64] */;
  %162 = floor_divide(%160, %161) /* ty=Tensor[(7, 12, 13), float64] */;
  (%162,)
}

def @func_657(%var_651: Tensor[(14, 12, 16), int32], %var_652: Tensor[(14, 12, 16), int32]) -> (Tensor[(14, 12, 16), int32],) {
  %163 = cast(%var_652, dtype="int32") /* ty=Tensor[(14, 12, 16), int32] */;
  %164 = shape_of(%var_651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %165 = cast(%var_651, dtype="int32") /* ty=Tensor[(14, 12, 16), int32] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %167 = maximum(%165, %166) /* ty=Tensor[(14, 12, 16), int32] */;
  (%167,)
}

def @func_2588() -> (Tensor[(2, 7, 3), float32],) {
  %168 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %169 = %168.0;
  (%169,)
}

def @func_4730() -> Tensor[(2, 7, 3), float32] {
  @func_2521() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_4957(%var_4915: Tensor[(10, 13, 5), float32], %var_4924: Tensor[(24), float64], %var_4941: Tensor[(3150, 1), float64]) -> (Tensor[(10, 13, 5), float32], Tensor[(12, 2), float64], Tensor[(24), float64], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(2, 7, 3), float64], Tensor[(15, 14, 15), float64], Tensor[(3150, 1), float64], uint16, Tensor[(2, 7, 3), float32]) {
  %170 = cast(%var_4915, dtype="float32") /* ty=Tensor[(10, 13, 5), float32] */;
  %171 = cast(%var_4924, dtype="float64") /* ty=Tensor[(24), float64] */;
  %172 = reshape(%171, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %173 = @func_3862(%172) /* ty=(Tensor[(12, 2), float64],) */;
  %174 = cast(meta[relay.Constant][9] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %175 = reshape(%174, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), bool] */;
  %176 = @func_3842() /* ty=(Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) */;
  %177 = cast(%var_4941, dtype="float64") /* ty=Tensor[(3150, 1), float64] */;
  %178 = cast(meta[relay.Constant][10] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %179 = reshape(%177, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
  %180 = reshape(%178, newshape=[]) /* ty=uint16 */;
  %181 = @func_318(%179, %180) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
  %182 = log10(%170) /* ty=Tensor[(10, 13, 5), float32] */;
  %183 = %173.0;
  %184 = @func_2406(%175) /* ty=Tensor[(2, 12, 11), float64] */;
  %185 = %176.0;
  %186 = %181.0;
  %187 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  (%182, %183, %var_4924, %184, meta[relay.Constant][9] /* ty=Tensor[(264), bool] */, %185, %186, %var_4941, meta[relay.Constant][10] /* ty=uint16 */, %187)
}

def @func_440(%var_430: Tensor[(14, 8, 2), float32]) -> (Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) {
  %188 = cast(%var_430, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  %189 = log2(%188) /* ty=Tensor[(14, 8, 2), float32] */;
  %190 = cast(%var_430, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %194 = cast(meta[relay.Constant][11] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %195 = reshape(%194, newshape=[]) /* ty=uint16 */;
  %196 = @func_47(%195) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %197 = divide(%192, %193) /* ty=Tensor[(14, 8, 2), float64] */;
  %198 = %196.1;
  (%197, %198, meta[relay.Constant][11] /* ty=uint16 */)
}

def @func_3090(%var_3024: Tensor[(4, 13, 8), int8], %var_3025: Tensor[(4, 13, 8), int8], %var_3077: Tensor[(264), bool], %var_3087: Tensor[(3, 60), float64]) -> (Tensor[(4, 13, 8), bool], Tensor[(4, 13, 8), float32], Tensor[(4, 13, 8), float32], Tensor[(2, 7, 3), float32], Tensor[(224), float32], Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(637, 2), float64], Tensor[(4, 120), float32], uint16, Tensor[(3, 60), float64]) {
  %199 = cast(%var_3025, dtype="bool") /* ty=Tensor[(4, 13, 8), bool] */;
  %200 = shape_of(%var_3024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_3024, dtype="bool") /* ty=Tensor[(4, 13, 8), bool] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %203 = cast(%var_3025, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %204 = cast(%var_3024, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
  %205 = cast(meta[relay.Constant][12] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %206 = reshape(%205, newshape=[224]) /* ty=Tensor[(224), float32] */;
  %207 = @func_2510(%206) /* ty=(Tensor[(2, 7, 3), float32], uint16, Tensor[(224), float32]) */;
  %208 = cast(%var_3077, dtype="bool") /* ty=Tensor[(264), bool] */;
  %209 = reshape(%208, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), bool] */;
  %210 = cast(meta[relay.Constant][13] /* ty=Tensor[(4, 120), float32] */, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
  %211 = cast(meta[relay.Constant][14] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %212 = cast(%var_3087, dtype="float64") /* ty=Tensor[(3, 60), float64] */;
  %213 = reshape(%210, newshape=[480]) /* ty=Tensor[(480), float32] */;
  %214 = reshape(%211, newshape=[]) /* ty=uint16 */;
  %215 = reshape(%212, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %216 = @func_2747(%213, %214, %215) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(637, 2), float64], Tensor[(480), float32], Tensor[(1274), float64], Tensor[(180), float64], Tensor[(7, 14, 13), float32]) */;
  %217 = less(%201, %202) /* ty=Tensor[(4, 13, 8), bool] */;
  %218 = atanh(%203) /* ty=Tensor[(4, 13, 8), float32] */;
  %219 = asinh(%204) /* ty=Tensor[(4, 13, 8), float32] */;
  %220 = %207.0;
  %221 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %222 = @func_2406(%209) /* ty=Tensor[(2, 12, 11), float64] */;
  %223 = %216.1;
  (%217, %218, %219, %220, meta[relay.Constant][12] /* ty=Tensor[(224), float32] */, %221, %222, %var_3077, %223, meta[relay.Constant][13] /* ty=Tensor[(4, 120), float32] */, meta[relay.Constant][14] /* ty=uint16 */, %var_3087)
}

def @func_2532() -> (Tensor[(2, 7, 3), float32],) {
  %224 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %225 = %224.0;
  (%225,)
}

def @func_5280() -> Tensor[(7, 8), float64] {
  %226 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 8), float64] */;
  sigmoid(%226) /* ty=Tensor[(7, 8), float64] */
}

def @func_5023() -> Tensor[(2, 7, 3), float32] {
  %227 = @func_4694() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool]) */;
  %227.0
}

def @func_4787(%var_4785: Tensor[(1274), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64]) {
  %228 = cast(%var_4785, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %229 = cast(%var_4785, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %230 = reshape(%228, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %231 = reshape(%229, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %232 = @func_1003(%230, %231) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */;
  %233 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %234 = %232.3;
  (%233, %234, %var_4785)
}

def @func_4627(%var_4553: Tensor[(1092), float64], %var_4575: Tensor[(143, 1), uint8], %var_4583: Tensor[(1092), float64], %var_4592: Tensor[(144), uint16]) -> (Tensor[(1092), uint16], Tensor[(2, 7, 3), float32], Tensor[(10, 13, 11), uint8], Tensor[(143, 1), uint8], Tensor[(1430), uint8], Tensor[(1092), bool], Tensor[(143), uint8], uint16, Tensor[(144), uint16], Tensor[(180), float64], Tensor[(3, 600), uint8]) {
  %235 = @func_4076() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */;
  %236 = %235.2;
  %237 = cast(%var_4553, dtype="uint16") /* ty=Tensor[(1092), uint16] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(%236, dtype="uint16") /* ty=Tensor[(1092), uint16] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %241 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %242 = cast(%var_4575, dtype="uint8") /* ty=Tensor[(143, 1), uint8] */;
  %243 = cast(meta[relay.Constant][16] /* ty=Tensor[(1430), uint8] */, dtype="uint8") /* ty=Tensor[(1430), uint8] */;
  %244 = reshape(%242, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), uint8] */;
  %245 = reshape(%243, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint8] */;
  %246 = cast(%236, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %247 = log10(%246) /* ty=Tensor[(1092), float64] */;
  %248 = cast(%var_4583, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %249 = shape_of(%247, dtype="int32") /* ty=Tensor[(1), int32] */;
  %250 = cast(%247, dtype="bool") /* ty=Tensor[(1092), bool] */;
  %251 = dyn.reshape(%248, %249, newshape=[]) /* ty=Tensor[(?), bool] */;
  %252 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %253 = cast(%var_4592, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %254 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 600), uint64] */, dtype="uint64") /* ty=Tensor[(3, 600), uint64] */;
  %257 = reshape(%252, newshape=[]) /* ty=uint16 */;
  %258 = reshape(%253, newshape=[2, 72]) /* ty=Tensor[(2, 72), uint16] */;
  %259 = reshape(%254, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %260 = reshape(%255, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %261 = reshape(%256, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %262 = @func_1990(%257, %258, %259, %260, %261) /* ty=(Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) */;
  %263 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 600), uint64] */, dtype="uint8") /* ty=Tensor[(3, 600), uint8] */;
  %264 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(3, 600), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %265 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 600), uint64] */, dtype="uint8") /* ty=Tensor[(3, 600), uint8] */;
  %266 = dyn.reshape(%263, %264, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %267 = left_shift(%239, %240) /* ty=Tensor[(1092), uint16] */;
  %268 = %241.0;
  %269 = @func_1020(%244, %245) /* ty=Tensor[(10, 13, 11), uint8] */;
  %270 = greater(%250, %251) /* ty=Tensor[(1092), bool] */;
  %271 = %262.6;
  %272 = bitwise_xor(%265, %266) /* ty=Tensor[(3, 600), uint8] */;
  (%267, %268, %269, %var_4575, meta[relay.Constant][16] /* ty=Tensor[(1430), uint8] */, %270, %271, meta[relay.Constant][17] /* ty=uint16 */, %var_4592, meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, %272)
}

def @func_318(%var_303: Tensor[(15, 14, 15), float64], %var_314: uint16) -> (Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) {
  %273 = cast(%var_303, dtype="float64") /* ty=Tensor[(15, 14, 15), float64] */;
  %274 = cast(%var_314, dtype="uint16") /* ty=uint16 */;
  %275 = reshape(%274, newshape=[]) /* ty=uint16 */;
  %276 = @func_47(%275) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %277 = log10(%273) /* ty=Tensor[(15, 14, 15), float64] */;
  %278 = %276.0;
  (%277, %278, %var_314)
}

def @func_3967(%var_3962: Tensor[(264), bool], %var_3963: Tensor[(180), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), int16], Tensor[(3, 12, 11), float32], Tensor[(455), float32], Tensor[(264), bool], Tensor[(416), int8], Tensor[(264), bool], Tensor[(180), float64]) {
  %279 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 2), float64] */, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %280 = reshape(%279, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %281 = @func_2182(%280) /* ty=(Tensor[(7, 12, 13), float64],) */;
  %282 = %281.0;
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(546, 2), float64] */, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%282, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %287 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %288 = cast(meta[relay.Constant][22] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %289 = reshape(%288, newshape=[5, 7, 13]) /* ty=Tensor[(5, 7, 13), float32] */;
  %290 = @func_3012(%289) /* ty=(Tensor[(5, 7, 13), float32], Tensor[(3, 12, 11), float32], Tensor[(224), float32]) */;
  %291 = cast(meta[relay.Constant][23] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
  %292 = cast(meta[relay.Constant][23] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
  %293 = cast(%var_3962, dtype="bool") /* ty=Tensor[(264), bool] */;
  %294 = cast(%var_3963, dtype="float64") /* ty=Tensor[(180), float64] */;
  %295 = reshape(%291, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), int8] */;
  %296 = reshape(%292, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), int8] */;
  %297 = reshape(%293, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %298 = reshape(%294, newshape=[3, 60]) /* ty=Tensor[(3, 60), float64] */;
  %299 = @func_3090(%295, %296, %297, %298) /* ty=(Tensor[(4, 13, 8), bool], Tensor[(4, 13, 8), float32], Tensor[(4, 13, 8), float32], Tensor[(2, 7, 3), float32], Tensor[(224), float32], Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(637, 2), float64], Tensor[(4, 120), float32], uint16, Tensor[(3, 60), float64]) */;
  %300 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %301 = less_equal(%285, %286) /* ty=Tensor[(7, 12, 13), bool] */;
  %302 = %287.1;
  %303 = %290.1;
  %304 = %299.7;
  (%300, %301, %302, %303, meta[relay.Constant][22] /* ty=Tensor[(455), float32] */, %304, meta[relay.Constant][23] /* ty=Tensor[(416), int8] */, %var_3962, %var_3963)
}

def @func_2871() -> (Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) {
  %305 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %306 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 416), float64] */, dtype="float64") /* ty=Tensor[(1, 416), float64] */;
  %307 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 416), float64] */, dtype="float64") /* ty=Tensor[(1, 416), float64] */;
  %308 = reshape(%306, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
  %309 = reshape(%307, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
  %310 = @func_208(%308, %309) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %311 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %312 = reshape(%311, newshape=[]) /* ty=uint16 */;
  %313 = @func_47(%312) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %314 = cast(meta[relay.Constant][26] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %315 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %316 = reshape(%314, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
  %317 = reshape(%315, newshape=[]) /* ty=uint16 */;
  %318 = @func_318(%316, %317) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
  %319 = cast(meta[relay.Constant][26] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %320 = cast(meta[relay.Constant][25] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %321 = reshape(%319, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
  %322 = reshape(%320, newshape=[]) /* ty=uint16 */;
  %323 = @func_318(%321, %322) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
  %324 = %305.0;
  %325 = %310.1;
  %326 = %313.0;
  %327 = %318.0;
  %328 = %323.2;
  (%324, %325, meta[relay.Constant][24] /* ty=Tensor[(1, 416), float64] */, %326, meta[relay.Constant][25] /* ty=uint16 */, %327, meta[relay.Constant][26] /* ty=Tensor[(3150), float64] */, %328)
}

def @func_4542(%var_4483: Tensor[(7, 12, 13), float64], %var_4507: Tensor[(1200), float32]) -> (Tensor[(7, 12, 13), int32], Tensor[(1200), float32], Tensor[(448), uint64], Tensor[(1800, 1), uint64], Tensor[(1200), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) {
  %329 = @func_4076() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */;
  %330 = %329.1;
  %331 = cast(%var_4483, dtype="int32") /* ty=Tensor[(7, 12, 13), int32] */;
  %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%330, dtype="int32") /* ty=Tensor[(7, 12, 13), int32] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %335 = cast(meta[relay.Constant][27] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
  %336 = cast(meta[relay.Constant][28] /* ty=Tensor[(1800, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1800, 1), uint64] */;
  %337 = cast(%var_4507, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %338 = reshape(%335, newshape=[16, 4, 7]) /* ty=Tensor[(16, 4, 7), uint64] */;
  %339 = reshape(%336, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %340 = reshape(%337, newshape=[1200]) /* ty=Tensor[(1200), float32] */;
  %341 = @func_1511(%338, %339, %340) /* ty=(Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) */;
  %342 = cast(%var_4483, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %343 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%330, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %346 = divide(%344, %345) /* ty=Tensor[(7, 12, 13), float32] */;
  %347 = cast(%330, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %352 = @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */;
  %353 = maximum(%333, %334) /* ty=Tensor[(7, 12, 13), int32] */;
  %354 = %341.2;
  %355 = not_equal(%349, %350) /* ty=Tensor[(7, 12, 13), bool] */;
  %356 = %351.0;
  %357 = %352.1;
  (%353, %354, meta[relay.Constant][27] /* ty=Tensor[(448), uint64] */, meta[relay.Constant][28] /* ty=Tensor[(1800, 1), uint64] */, %var_4507, %355, %356, %357)
}

def @func_2747(%var_2697: Tensor[(480), float32], %var_2699: uint16, %var_2700: Tensor[(180), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(637, 2), float64], Tensor[(480), float32], Tensor[(1274), float64], Tensor[(180), float64], Tensor[(7, 14, 13), float32]) {
  %358 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %359 = cast(%var_2697, dtype="float32") /* ty=Tensor[(480), float32] */;
  %360 = cast(meta[relay.Constant][29] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %361 = cast(%var_2699, dtype="uint16") /* ty=uint16 */;
  %362 = cast(%var_2700, dtype="float64") /* ty=Tensor[(180), float64] */;
  %363 = reshape(%359, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float32] */;
  %364 = reshape(%360, newshape=[637, 2]) /* ty=Tensor[(637, 2), float64] */;
  %365 = reshape(%361, newshape=[]) /* ty=uint16 */;
  %366 = reshape(%362, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %367 = @func_2642(%363, %364, %365, %366) /* ty=(Tensor[(15, 2, 16), uint64], Tensor[(7, 14, 13), float64], Tensor[(637, 2), float64], uint16, uint16, Tensor[(24, 6), uint16], Tensor[(6, 30), float64], Tensor[(18, 100), uint64]) */;
  %368 = cast(meta[relay.Constant][29] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %369 = %367.2;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %371 = reshape(%368, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %372 = reshape(%370, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %373 = @func_1003(%371, %372) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */;
  %374 = %373.3;
  %375 = cast(%374, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %376 = cast(%var_2699, dtype="float32") /* ty=float32 */;
  %377 = %358.0;
  %378 = subtract(%375, %376) /* ty=Tensor[(7, 14, 13), float32] */;
  (%377, %369, %var_2697, meta[relay.Constant][29] /* ty=Tensor[(1274), float64] */, %var_2700, %378)
}

def @func_3455(%var_3451: Tensor[(264), bool]) -> (Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) {
  %379 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %380 = cast(%var_3451, dtype="bool") /* ty=Tensor[(264), bool] */;
  %381 = reshape(%380, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %382 = @func_2813(%381) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) */;
  %383 = %379.1;
  %384 = %382.2;
  (%383, %384, %var_3451)
}

def @func_2406(%var_2394: Tensor[(2, 12, 11), bool]) -> Tensor[(2, 12, 11), float64] {
  %385 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 12, 11), bool] */, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %386 = shape_of(%var_2394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_2394, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %389 = logical_and(%387, %388) /* ty=Tensor[(2, 12, 11), bool] */;
  %390 = cast(%var_2394, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
  %392 = cast(%389, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
  %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%392, %393) /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_3275(%var_3256: Tensor[(2, 7, 3), int16]) -> (Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), uint8]) {
  %394 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %395 = %394.1;
  %396 = cast(%var_3256, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %397 = shape_of(%395, dtype="int32") /* ty=Tensor[(3), int32] */;
  %398 = cast(%395, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %400 = cast(%395, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %401 = shape_of(%var_3256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%var_3256, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %404 = logical_and(%398, %399) /* ty=Tensor[(2, 7, 3), bool] */;
  %405 = left_shift(%402, %403) /* ty=Tensor[(2, 7, 3), uint8] */;
  (%404, %405)
}

def @func_1020(%var_1015: Tensor[(1, 13, 11), uint8], %var_1016: Tensor[(10, 13, 11), uint8]) -> Tensor[(10, 13, 11), uint8] {
  %406 = cast(%var_1015, dtype="uint8") /* ty=Tensor[(1, 13, 11), uint8] */;
  %407 = cast(%var_1016, dtype="uint8") /* ty=Tensor[(10, 13, 11), uint8] */;
  bitwise_xor(%406, %407) /* ty=Tensor[(10, 13, 11), uint8] */
}

def @func_1990(%var_1912: uint16, %var_1939: Tensor[(2, 72), uint16], %var_1948: Tensor[(2, 9, 10), float64], %var_1952: Tensor[(2, 9, 10), float64], %var_1974: Tensor[(1800), uint64]) -> (Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) {
  %408 = cast(%var_1912, dtype="uint16") /* ty=uint16 */;
  %409 = reshape(%408, newshape=[]) /* ty=uint16 */;
  %410 = @func_47(%409) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %411 = cast(meta[relay.Constant][31] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %412 = cast(%var_1912, dtype="uint16") /* ty=uint16 */;
  %413 = reshape(%411, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
  %414 = reshape(%412, newshape=[]) /* ty=uint16 */;
  %415 = @func_318(%413, %414) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
  %416 = cast(%var_1939, dtype="uint16") /* ty=Tensor[(2, 72), uint16] */;
  %417 = cast(%var_1939, dtype="uint16") /* ty=Tensor[(2, 72), uint16] */;
  %418 = cast(%var_1939, dtype="bool") /* ty=Tensor[(2, 72), bool] */;
  %419 = cast(meta[relay.Constant][32] /* ty=Tensor[(143), uint8] */, dtype="uint8") /* ty=Tensor[(143), uint8] */;
  %420 = reshape(%416, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), uint16] */;
  %421 = reshape(%417, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), uint16] */;
  %422 = reshape(%418, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %423 = reshape(%419, newshape=[143]) /* ty=Tensor[(143), uint8] */;
  %424 = @func_1888(%420, %421, %422, %423) /* ty=(Tensor[(3, 16, 3), bool], Tensor[(3, 16, 3), float64], Tensor[(3, 16, 3), int64], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1430), uint8], Tensor[(14, 12, 16), int32], Tensor[(2688), int32]) */;
  %425 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %426 = cos(%425) /* ty=Tensor[(2, 9, 10), float64] */;
  %427 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %431 = minimum(%429, %430) /* ty=Tensor[(2, 9, 10), float64] */;
  %432 = cast(%var_1948, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %433 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(%431, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %436 = cast(%var_1952, dtype="uint32") /* ty=Tensor[(2, 9, 10), uint32] */;
  %437 = shape_of(%431, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%431, dtype="uint32") /* ty=Tensor[(2, 9, 10), uint32] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %440 = multiply(%438, %439) /* ty=Tensor[(2, 9, 10), uint32] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %442 = cast(meta[relay.Constant][34] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %443 = cast(%var_1974, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %444 = reshape(%442, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float32] */;
  %445 = reshape(%443, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %446 = @func_914(%444, %445) /* ty=(Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */;
  %447 = %410.1;
  %448 = %415.2;
  %449 = %424.7;
  %450 = mod(%434, %435) /* ty=Tensor[(2, 9, 10), float64] */;
  %451 = acosh(%441) /* ty=Tensor[(2, 9, 10), float64] */;
  %452 = %446.2;
  (%447, %var_1912, %448, meta[relay.Constant][31] /* ty=Tensor[(3150), float64] */, %449, %var_1939, meta[relay.Constant][32] /* ty=Tensor[(143), uint8] */, %450, %451, %452, meta[relay.Constant][34] /* ty=Tensor[(1200), float32] */, %var_1974)
}

def @func_4877(%var_4862: Tensor[(1, 2, 9), float64]) -> (Tensor[(?, 2, 9), int16], Tensor[(1, 2, 9), float64], Tensor[(2, 7, 3), float32]) {
  %453 = cast(%var_4862, dtype="float64") /* ty=Tensor[(1, 2, 9), float64] */;
  %454 = erf(%453) /* ty=Tensor[(1, 2, 9), float64] */;
  %455 = cast(%var_4862, dtype="int16") /* ty=Tensor[(1, 2, 9), int16] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int16") /* ty=Tensor[(1, 2, 9), int16] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %459 = cast(%454, dtype="float64") /* ty=Tensor[(1, 2, 9), float64] */;
  %460 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %461 = maximum(%457, %458) /* ty=Tensor[(?, 2, 9), int16] */;
  %462 = asin(%459) /* ty=Tensor[(1, 2, 9), float64] */;
  %463 = %460.2;
  (%461, %462, %463)
}

def @func_5537() -> Tensor[(2, 7, 3), float32] {
  %464 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %464.0
}

def @func_5342() -> Tensor[(2, 7, 3), bool] {
  %465 = @func_4076() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */;
  %465.0
}

def @func_3782() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) {
  %466 = @func_2588() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %467 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %468 = cast(%467, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %469 = asin(%468) /* ty=Tensor[(2, 7, 3), float64] */;
  %470 = cast(%469, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %471 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%467, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = cast(%469, dtype="int8") /* ty=Tensor[(2, 7, 3), int8] */;
  %475 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%467, dtype="int8") /* ty=Tensor[(2, 7, 3), int8] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %478 = %466.0;
  %479 = greater(%472, %473) /* ty=Tensor[(2, 7, 3), bool] */;
  %480 = subtract(%476, %477) /* ty=Tensor[(2, 7, 3), int8] */;
  (%478, %479, %480)
}

def @func_4905() -> Tensor[(2, 7, 3), float32] {
  %481 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %481.0
}

def @func_1511(%var_1470: Tensor[(16, 4, 7), uint64], %var_1488: Tensor[(1800), uint64], %var_1495: Tensor[(1200), float32]) -> (Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) {
  %482 = cast(%var_1488, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %483 = reshape(%482, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
  %484 = @func_551(%483) /* ty=(Tensor[(10, 15, 12), uint64],) */;
  %485 = cast(%var_1495, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %486 = %484.0;
  %487 = cast(%486, dtype="uint64") /* ty=Tensor[(10, 15, 12), uint64] */;
  %488 = reshape(%485, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float32] */;
  %489 = reshape(%487, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %490 = @func_914(%488, %489) /* ty=(Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */;
  %491 = cast(meta[relay.Constant][35] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %492 = cast(%var_1470, dtype="uint64") /* ty=Tensor[(16, 4, 7), uint64] */;
  %493 = logical_xor(%491, %492) /* ty=Tensor[(16, 4, 7), uint64] */;
  %494 = cast(%var_1470, dtype="float64") /* ty=Tensor[(16, 4, 7), float64] */;
  %495 = shape_of(%493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %496 = cast(%493, dtype="float64") /* ty=Tensor[(16, 4, 7), float64] */;
  %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %498 = cast(%var_1488, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %499 = %490.1;
  %500 = power(%496, %497) /* ty=Tensor[(16, 4, 7), float64] */;
  %501 = acosh(%498) /* ty=Tensor[(1800), float64] */;
  (%486, %499, %var_1495, %500, %501)
}

def @func_5246(%var_5242: Tensor[(14, 15, 14), float32]) -> Tensor[(14, 15, 14), float32] {
  %502 = cast(%var_5242, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %503 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(14, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(meta[relay.Constant][36] /* ty=Tensor[(14, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%504, %505) /* ty=Tensor[(14, 15, 14), float32] */
}

def @func_208(%var_162: Tensor[(8, 4, 13), float64], %var_194: Tensor[(8, 4, 13), float64]) -> (Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) {
  %506 = cast(%var_162, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
  %507 = tan(%506) /* ty=Tensor[(8, 4, 13), float64] */;
  %508 = cast(%var_162, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = equal(%510, %511) /* ty=Tensor[(8, 4, 13), bool] */;
  %513 = cast(%var_162, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = cast(%var_194, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
  %518 = shape_of(%var_162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%var_162, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %521 = floor_divide(%519, %520) /* ty=Tensor[(8, 4, 13), float32] */;
  %522 = cast(%521, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
  %523 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(%512, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %526 = not_equal(%515, %516) /* ty=Tensor[(8, 4, 13), bool] */;
  %527 = floor_mod(%524, %525) /* ty=Tensor[(8, 4, 13), float64] */;
  (%526, %527)
}

def @func_2547() -> Tensor[(2, 7, 3), float32] {
  %528 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %528.0
}

def @func_2521() -> Tensor[(2, 7, 3), float32] {
  %529 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %529.0
}

def @func_5381(%var_5366: Tensor[(11, 8, 1), float32]) -> (Tensor[(11, 8, 1), float32],) {
  %530 = cast(%var_5366, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
  %531 = exp(%530) /* ty=Tensor[(11, 8, 1), float32] */;
  (%531,)
}

def @func_551(%var_547: Tensor[(10, 15, 12), uint64]) -> (Tensor[(10, 15, 12), uint64],) {
  %532 = cast(meta[relay.Constant][37] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %533 = cast(%var_547, dtype="uint64") /* ty=Tensor[(10, 15, 12), uint64] */;
  %534 = right_shift(%532, %533) /* ty=Tensor[(10, 15, 12), uint64] */;
  (%534,)
}

def @func_4076() -> (Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) {
  %535 = @func_3782() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) */;
  %536 = cast(meta[relay.Constant][38] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
  %537 = reshape(%536, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %538 = @func_2182(%537) /* ty=(Tensor[(7, 12, 13), float64],) */;
  %539 = %535.1;
  %540 = %538.0;
  (%539, %540, meta[relay.Constant][38] /* ty=Tensor[(1092), float64] */)
}

def @func_4247(%var_4211: Tensor[(1, 264), bool], %var_4232: Tensor[(10, 264), bool]) -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32], Tensor[(10, 264), int8], Tensor[(2, 7, 3), int16]) {
  %541 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %542 = cast(%var_4211, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
  %543 = reshape(%542, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %544 = @func_2813(%543) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) */;
  %545 = cast(%var_4211, dtype="int8") /* ty=Tensor[(1, 264), int8] */;
  %546 = cast(%var_4232, dtype="int8") /* ty=Tensor[(10, 264), int8] */;
  %547 = cast(%var_4211, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
  %548 = reshape(%547, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %549 = @func_3455(%548) /* ty=(Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) */;
  %550 = %541.0;
  %551 = %544.0;
  %552 = subtract(%545, %546) /* ty=Tensor[(10, 264), int8] */;
  %553 = %549.0;
  (%550, %551, %552, %553)
}

def @func_4816() -> (Tensor[(2, 7, 3), float32],) {
  %554 = @func_3976() /* ty=Tensor[(2, 7, 3), float32] */;
  (%554,)
}

def @func_47(%var_18: uint16) -> (Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) {
  %555 = cast(%var_18, dtype="uint16") /* ty=uint16 */;
  %556 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %557 = multiply(%555, %556) /* ty=Tensor[(3, 12, 11), uint16] */;
  %558 = cast(%557, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
  %559 = shape_of(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(meta[relay.Constant][39] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %563 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%557, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %566 = power(%564, %565) /* ty=Tensor[(3, 12, 11), float64] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %568 = erf(%567) /* ty=Tensor[(3, 12, 11), float64] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(3, 12, 11), float32] */;
  %570 = greater_equal(%560, %561) /* ty=Tensor[(3, 12, 11), bool] */;
  %571 = sinh(%569) /* ty=Tensor[(3, 12, 11), float32] */;
  (%570, %571)
}

def @func_3328(%var_3321: Tensor[(2, 7, 3), float32]) -> Tensor[(2, 7, 3), float32] {
  %572 = @func_2521() /* ty=Tensor[(2, 7, 3), float32] */;
  %573 = cast(%var_3321, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %574 = shape_of(%572, dtype="int32") /* ty=Tensor[(3), int32] */;
  %575 = cast(%572, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %576 = dyn.reshape(%573, %574, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%575, %576) /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_5226(%var_5169: int32, %var_5170: Tensor[(15, 12, 13), int32], %var_5181: Tensor[(15, 12, 13), int32], %var_5186: Tensor[(15, 12, 13), float32]) -> (Tensor[(15, 12, 13), uint8], Tensor[(2, 7, 3), float32], Tensor[(15, 12, 13), float64]) {
  %577 = cast(%var_5169, dtype="int32") /* ty=int32 */;
  %578 = cast(%var_5170, dtype="int32") /* ty=Tensor[(15, 12, 13), int32] */;
  %579 = bitwise_or(%577, %578) /* ty=Tensor[(15, 12, 13), int32] */;
  %580 = cast(%var_5181, dtype="float32") /* ty=Tensor[(15, 12, 13), float32] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%579, dtype="float32") /* ty=Tensor[(15, 12, 13), float32] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %584 = power(%582, %583) /* ty=Tensor[(15, 12, 13), float32] */;
  %585 = cast(%var_5186, dtype="uint8") /* ty=Tensor[(15, 12, 13), uint8] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%584, dtype="uint8") /* ty=Tensor[(15, 12, 13), uint8] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %589 = @func_3291() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) */;
  %590 = cast(%579, dtype="float64") /* ty=Tensor[(15, 12, 13), float64] */;
  %591 = shape_of(%584, dtype="int32") /* ty=Tensor[(3), int32] */;
  %592 = cast(%584, dtype="float64") /* ty=Tensor[(15, 12, 13), float64] */;
  %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %594 = maximum(%587, %588) /* ty=Tensor[(15, 12, 13), uint8] */;
  %595 = %589.0;
  %596 = mod(%592, %593) /* ty=Tensor[(15, 12, 13), float64] */;
  (%594, %595, %596)
}

def @func_5238() -> Tensor[(3150), float64] {
  %597 = @func_5161() /* ty=(Tensor[(3150), float64],) */;
  %597.0
}

def @func_1433(%var_1411: Tensor[(9, 14, 1), float32], %var_1420: Tensor[(1800), uint64]) -> (Tensor[(1800), uint32], Tensor[(9, 14, 1800), int8]) {
  %598 = cast(%var_1420, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %599 = reshape(%598, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
  %600 = @func_551(%599) /* ty=(Tensor[(10, 15, 12), uint64],) */;
  %601 = %600.0;
  %602 = cast(%601, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
  %603 = shape_of(%var_1420, dtype="int32") /* ty=Tensor[(1), int32] */;
  %604 = cast(%var_1420, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %606 = cast(%var_1411, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %607 = log2(%606) /* ty=Tensor[(9, 14, 1), float32] */;
  %608 = cast(%607, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
  %609 = sinh(%608) /* ty=Tensor[(9, 14, 1), float32] */;
  %610 = cast(%609, dtype="int8") /* ty=Tensor[(9, 14, 1), int8] */;
  %611 = cast(%var_1420, dtype="int8") /* ty=Tensor[(1800), int8] */;
  %612 = right_shift(%604, %605) /* ty=Tensor[(1800), uint32] */;
  %613 = multiply(%610, %611) /* ty=Tensor[(9, 14, 1800), int8] */;
  (%612, %613)
}

def @func_4288() -> (Tensor[(2, 7, 3), float32],) {
  %614 = @func_2521() /* ty=Tensor[(2, 7, 3), float32] */;
  (%614,)
}

def @func_2642(%var_2605: Tensor[(15, 2, 16), float32], %var_2615: Tensor[(637, 2), float64], %var_2622: uint16, %var_2624: Tensor[(6, 30), float64]) -> (Tensor[(15, 2, 16), uint64], Tensor[(7, 14, 13), float64], Tensor[(637, 2), float64], uint16, uint16, Tensor[(24, 6), uint16], Tensor[(6, 30), float64], Tensor[(18, 100), uint64]) {
  %615 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %616 = shape_of(%var_2605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(%var_2605, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %619 = multiply(%617, %618) /* ty=Tensor[(15, 2, 16), float32] */;
  %620 = cast(meta[relay.Constant][40] /* ty=Tensor[(15, 2, 16), float32] */, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %621 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%619, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %624 = cast(%var_2615, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %625 = cast(%var_2615, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %626 = reshape(%624, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %627 = reshape(%625, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %628 = @func_1003(%626, %627) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */;
  %629 = cast(%var_2622, dtype="uint16") /* ty=uint16 */;
  %630 = cast(meta[relay.Constant][41] /* ty=Tensor[(24, 6), uint16] */, dtype="uint16") /* ty=Tensor[(24, 6), uint16] */;
  %631 = cast(%var_2624, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %632 = cast(%var_2624, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %633 = cast(meta[relay.Constant][42] /* ty=Tensor[(18, 100), uint64] */, dtype="uint64") /* ty=Tensor[(18, 100), uint64] */;
  %634 = reshape(%629, newshape=[]) /* ty=uint16 */;
  %635 = reshape(%630, newshape=[2, 72]) /* ty=Tensor[(2, 72), uint16] */;
  %636 = reshape(%631, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %637 = reshape(%632, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %638 = reshape(%633, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %639 = @func_1990(%634, %635, %636, %637, %638) /* ty=(Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) */;
  %640 = bitwise_xor(%622, %623) /* ty=Tensor[(15, 2, 16), uint64] */;
  %641 = %628.0;
  %642 = %639.2;
  (%640, %641, %var_2615, %642, %var_2622, meta[relay.Constant][41] /* ty=Tensor[(24, 6), uint16] */, %var_2624, meta[relay.Constant][42] /* ty=Tensor[(18, 100), uint64] */)
}

def @func_4714() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) {
  %643 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %644 = @func_4335() /* ty=Tensor[(2, 7, 3), float32] */;
  (%643, %644)
}

def @func_5161() -> (Tensor[(3150), float64],) {
  %645 = @func_2871() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) */;
  %646 = %645.6;
  (%646,)
}

def @func_2346() -> (Tensor[(2, 7, 3), float32],) {
  %647 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %648 = %647.0;
  (%648,)
}

def @func_1003(%var_967: Tensor[(7, 14, 13), float64], %var_983: Tensor[(7, 14, 13), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) {
  %649 = cast(%var_967, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %650 = cast(%var_967, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %651 = cast(%var_967, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %652 = cast(%var_983, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %653 = shape_of(%var_967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_967, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %656 = cast(%var_967, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %657 = log(%649) /* ty=Tensor[(7, 14, 13), float64] */;
  %658 = sqrt(%650) /* ty=Tensor[(7, 14, 13), float32] */;
  %659 = rsqrt(%651) /* ty=Tensor[(7, 14, 13), float32] */;
  %660 = mod(%654, %655) /* ty=Tensor[(7, 14, 13), float64] */;
  %661 = acos(%656) /* ty=Tensor[(7, 14, 13), float32] */;
  (%657, %658, %659, %660, %661)
}

def @func_914(%var_851: Tensor[(10, 15, 8), float32], %var_897: Tensor[(1800), uint64]) -> (Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) {
  %662 = cast(%var_851, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
  %663 = cast(meta[relay.Constant][43] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %664 = cast(meta[relay.Constant][43] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %665 = reshape(%663, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
  %666 = reshape(%664, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
  %667 = @func_208(%665, %666) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %668 = %667.1;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
  %670 = cast(meta[relay.Constant][43] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %671 = reshape(%669, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
  %672 = reshape(%670, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
  %673 = @func_208(%671, %672) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
  %674 = cast(%var_897, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %675 = reshape(%674, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
  %676 = @func_551(%675) /* ty=(Tensor[(10, 15, 12), uint64],) */;
  %677 = cosh(%662) /* ty=Tensor[(10, 15, 8), float32] */;
  %678 = %673.1;
  %679 = %676.0;
  (%677, %668, meta[relay.Constant][43] /* ty=Tensor[(416), float64] */, %678, %679, %var_897)
}

def @func_5520(%var_5499: Tensor[(1274), float64], %var_5518: Tensor[(1200), float32]) -> (Tensor[(2, 7, 3), float32], uint16, Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(2, 7, 3), float32], Tensor[(1200), float32], Tensor[(1, 448), uint64], Tensor[(1800), uint64], Tensor[(1200), float32]) {
  %680 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %681 = @func_2871() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) */;
  %682 = cast(%var_5499, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %683 = reshape(%682, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %684 = @func_4787(%683) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64]) */;
  %685 = @func_2588() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %686 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 448), uint64] */, dtype="uint64") /* ty=Tensor[(1, 448), uint64] */;
  %687 = cast(meta[relay.Constant][45] /* ty=Tensor[(1800), uint64] */, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %688 = cast(%var_5518, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %689 = reshape(%686, newshape=[16, 4, 7]) /* ty=Tensor[(16, 4, 7), uint64] */;
  %690 = reshape(%687, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %691 = reshape(%688, newshape=[1200]) /* ty=Tensor[(1200), float32] */;
  %692 = @func_1511(%689, %690, %691) /* ty=(Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) */;
  %693 = %680.0;
  %694 = %681.7;
  %695 = @func_2972() /* ty=Tensor[(2, 7, 3), float32] */;
  %696 = %684.1;
  %697 = %685.0;
  %698 = %692.2;
  (%693, %694, %695, %696, %var_5499, %697, %698, meta[relay.Constant][44] /* ty=Tensor[(1, 448), uint64] */, meta[relay.Constant][45] /* ty=Tensor[(1800), uint64] */, %var_5518)
}

def @func_3012(%var_2988: Tensor[(5, 7, 13), float32]) -> (Tensor[(5, 7, 13), float32], Tensor[(3, 12, 11), float32], Tensor[(224), float32]) {
  %699 = cast(%var_2988, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %700 = cast(meta[relay.Constant][46] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %701 = reshape(%700, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float32] */;
  %702 = @func_440(%701) /* ty=(Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) */;
  %703 = erf(%699) /* ty=Tensor[(5, 7, 13), float32] */;
  %704 = %702.1;
  (%703, %704, meta[relay.Constant][46] /* ty=Tensor[(224), float32] */)
}

def @func_1888(%var_1819: Tensor[(3, 16, 3), uint16], %var_1820: Tensor[(3, 16, 3), uint16], %var_1825: Tensor[(3, 16, 3), bool], %var_1872: Tensor[(143), uint8]) -> (Tensor[(3, 16, 3), bool], Tensor[(3, 16, 3), float64], Tensor[(3, 16, 3), int64], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1430), uint8], Tensor[(14, 12, 16), int32], Tensor[(2688), int32]) {
  %705 = cast(%var_1820, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %706 = shape_of(%var_1819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_1819, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %709 = less(%707, %708) /* ty=Tensor[(3, 16, 3), bool] */;
  %710 = cast(%var_1825, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
  %711 = shape_of(%709, dtype="int32") /* ty=Tensor[(3), int32] */;
  %712 = cast(%709, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
  %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %714 = left_shift(%712, %713) /* ty=Tensor[(3, 16, 3), int32] */;
  %715 = cast(%714, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
  %716 = sin(%715) /* ty=Tensor[(3, 16, 3), float64] */;
  %717 = cast(%709, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %718 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %719 = cast(%716, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %721 = cast(%var_1820, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
  %722 = shape_of(%716, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%716, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %725 = cast(%709, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
  %726 = shape_of(%var_1819, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_1819, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %729 = cast(%var_1872, dtype="uint8") /* ty=Tensor[(143), uint8] */;
  %730 = cast(meta[relay.Constant][47] /* ty=Tensor[(1430), uint8] */, dtype="uint8") /* ty=Tensor[(1430), uint8] */;
  %731 = reshape(%729, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), uint8] */;
  %732 = reshape(%730, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint8] */;
  %733 = cast(meta[relay.Constant][48] /* ty=Tensor[(2688), int32] */, dtype="int32") /* ty=Tensor[(2688), int32] */;
  %734 = cast(meta[relay.Constant][48] /* ty=Tensor[(2688), int32] */, dtype="int32") /* ty=Tensor[(2688), int32] */;
  %735 = reshape(%733, newshape=[14, 12, 16]) /* ty=Tensor[(14, 12, 16), int32] */;
  %736 = reshape(%734, newshape=[14, 12, 16]) /* ty=Tensor[(14, 12, 16), int32] */;
  %737 = @func_657(%735, %736) /* ty=(Tensor[(14, 12, 16), int32],) */;
  %738 = less_equal(%719, %720) /* ty=Tensor[(3, 16, 3), bool] */;
  %739 = divide(%723, %724) /* ty=Tensor[(3, 16, 3), float64] */;
  %740 = maximum(%727, %728) /* ty=Tensor[(3, 16, 3), int64] */;
  %741 = @func_1020(%731, %732) /* ty=Tensor[(10, 13, 11), uint8] */;
  %742 = %737.0;
  (%738, %739, %740, %741, %var_1872, meta[relay.Constant][47] /* ty=Tensor[(1430), uint8] */, %742, meta[relay.Constant][48] /* ty=Tensor[(2688), int32] */)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4663(%var_4662: Tensor[(5, 4, 14), float64]) -> (Tensor[(5, 4, 14), float64], Tensor[(5, 4, 14), bool]) {
  %7 = fn (%var_4653: Tensor[(5, 4, 14), float64]) -> (Tensor[(5, 4, 14), float64], Tensor[(5, 4, 14), bool]) {
    %0 = cast(%var_4653, dtype="float64") /* ty=Tensor[(5, 4, 14), float64] */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(5, 4, 14), float64] */, dtype="bool") /* ty=Tensor[(5, 4, 14), bool] */;
    %2 = shape_of(%var_4653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %3 = cast(%var_4653, dtype="bool") /* ty=Tensor[(5, 4, 14), bool] */;
    %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %5 = atanh(%0) /* ty=Tensor[(5, 4, 14), float64] */;
    %6 = not_equal(%3, %4) /* ty=Tensor[(5, 4, 14), bool] */;
    (%5, %6)
  };
  %7(%var_4662) /* ty=(Tensor[(5, 4, 14), float64], Tensor[(5, 4, 14), bool]) */
}

def @func_661(%var_659: Tensor[(14, 12, 16), int32], %var_660: Tensor[(14, 12, 16), int32]) -> (Tensor[(14, 12, 16), int32],) {
  @func_657(%var_659, %var_660) /* ty=(Tensor[(14, 12, 16), int32],) */
}

def @func_3095(%var_3091: Tensor[(4, 13, 8), int8], %var_3092: Tensor[(4, 13, 8), int8], %var_3093: Tensor[(264), bool], %var_3094: Tensor[(3, 60), float64]) -> (Tensor[(4, 13, 8), bool], Tensor[(4, 13, 8), float32], Tensor[(4, 13, 8), float32], Tensor[(2, 7, 3), float32], Tensor[(224), float32], Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(637, 2), float64], Tensor[(4, 120), float32], uint16, Tensor[(3, 60), float64]) {
  %33 = fn (%var_3024: Tensor[(4, 13, 8), int8], %var_3025: Tensor[(4, 13, 8), int8], %var_3077: Tensor[(264), bool], %var_3087: Tensor[(3, 60), float64]) -> (Tensor[(4, 13, 8), bool], Tensor[(4, 13, 8), float32], Tensor[(4, 13, 8), float32], Tensor[(2, 7, 3), float32], Tensor[(224), float32], Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(637, 2), float64], Tensor[(4, 120), float32], uint16, Tensor[(3, 60), float64]) {
    %8 = cast(%var_3025, dtype="bool") /* ty=Tensor[(4, 13, 8), bool] */;
    %9 = shape_of(%var_3024, dtype="int32") /* ty=Tensor[(3), int32] */;
    %10 = cast(%var_3024, dtype="bool") /* ty=Tensor[(4, 13, 8), bool] */;
    %11 = dyn.reshape(%8, %9, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %12 = cast(%var_3025, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
    %13 = cast(%var_3024, dtype="float32") /* ty=Tensor[(4, 13, 8), float32] */;
    %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
    %15 = reshape(%14, newshape=[224]) /* ty=Tensor[(224), float32] */;
    %16 = @func_2510(%15) /* ty=(Tensor[(2, 7, 3), float32], uint16, Tensor[(224), float32]) */;
    %17 = cast(%var_3077, dtype="bool") /* ty=Tensor[(264), bool] */;
    %18 = reshape(%17, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), bool] */;
    %19 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 120), float32] */, dtype="float32") /* ty=Tensor[(4, 120), float32] */;
    %20 = cast(meta[relay.Constant][3] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %21 = cast(%var_3087, dtype="float64") /* ty=Tensor[(3, 60), float64] */;
    %22 = reshape(%19, newshape=[480]) /* ty=Tensor[(480), float32] */;
    %23 = reshape(%20, newshape=[]) /* ty=uint16 */;
    %24 = reshape(%21, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %25 = @func_2747(%22, %23, %24) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(637, 2), float64], Tensor[(480), float32], Tensor[(1274), float64], Tensor[(180), float64], Tensor[(7, 14, 13), float32]) */;
    %26 = less(%10, %11) /* ty=Tensor[(4, 13, 8), bool] */;
    %27 = atanh(%12) /* ty=Tensor[(4, 13, 8), float32] */;
    %28 = asinh(%13) /* ty=Tensor[(4, 13, 8), float32] */;
    %29 = %16.0;
    %30 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
    %31 = @func_2406(%18) /* ty=Tensor[(2, 12, 11), float64] */;
    %32 = %25.1;
    (%26, %27, %28, %29, meta[relay.Constant][1] /* ty=Tensor[(224), float32] */, %30, %31, %var_3077, %32, meta[relay.Constant][2] /* ty=Tensor[(4, 120), float32] */, meta[relay.Constant][3] /* ty=uint16 */, %var_3087)
  };
  %33(%var_3091, %var_3092, %var_3093, %var_3094) /* ty=(Tensor[(4, 13, 8), bool], Tensor[(4, 13, 8), float32], Tensor[(4, 13, 8), float32], Tensor[(2, 7, 3), float32], Tensor[(224), float32], Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(637, 2), float64], Tensor[(4, 120), float32], uint16, Tensor[(3, 60), float64]) */
}

def @func_321(%var_319: Tensor[(15, 14, 15), float64], %var_320: uint16) -> (Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) {
  %40 = fn (%var_303: Tensor[(15, 14, 15), float64], %var_314: uint16) -> (Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) {
    %34 = cast(%var_303, dtype="float64") /* ty=Tensor[(15, 14, 15), float64] */;
    %35 = cast(%var_314, dtype="uint16") /* ty=uint16 */;
    %36 = reshape(%35, newshape=[]) /* ty=uint16 */;
    %37 = @func_47(%36) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
    %38 = log10(%34) /* ty=Tensor[(15, 14, 15), float64] */;
    %39 = %37.0;
    (%38, %39, %var_314)
  };
  %40(%var_319, %var_320) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */
}

def @func_3152() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) {
  %41 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %42 = cast(%41, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %43 = log2(%42) /* ty=Tensor[(2, 7, 3), float64] */;
  %44 = cast(%43, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %45 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%41, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %49 = mod(%46, %47) /* ty=Tensor[(2, 7, 3), float64] */;
  (%48, %49)
}

def @func_2815(%var_2814: Tensor[(264), bool]) -> (Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) {
  %56 = fn (%var_2811: Tensor[(264), bool]) -> (Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) {
    %50 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
    %52 = cast(%var_2811, dtype="bool") /* ty=Tensor[(264), bool] */;
    %53 = reshape(%52, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), bool] */;
    %54 = atan(%51) /* ty=Tensor[(2, 7, 3), float32] */;
    %55 = @func_2406(%53) /* ty=Tensor[(2, 12, 11), float64] */;
    (%54, %55, %var_2811)
  };
  %56(%var_2814) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) */
}

def @func_1997(%var_1992: uint16, %var_1993: Tensor[(2, 72), uint16], %var_1994: Tensor[(2, 9, 10), float64], %var_1995: Tensor[(2, 9, 10), float64], %var_1996: Tensor[(1800), uint64]) -> (Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) {
  @func_1990(%var_1992, %var_1993, %var_1994, %var_1995, %var_1996) /* ty=(Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) */
}

def @func_4335() -> Tensor[(2, 7, 3), float32] {
  %57 = @func_4288() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %57.0
}

def @func_2487(%var_2486: uint16) -> (Tensor[(2, 7, 3), float32], Tensor[(3, 12, 11), float32], uint16) {
  %64 = fn (%var_2479: uint16) -> (Tensor[(2, 7, 3), float32], Tensor[(3, 12, 11), float32], uint16) {
    %58 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %59 = cast(%var_2479, dtype="uint16") /* ty=uint16 */;
    %60 = reshape(%59, newshape=[]) /* ty=uint16 */;
    %61 = @func_47(%60) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
    %62 = %58.0;
    %63 = %61.1;
    (%62, %63, %var_2479)
  };
  %64(%var_2486) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(3, 12, 11), float32], uint16) */
}

def @func_4789(%var_4788: Tensor[(1274), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64]) {
  %72 = fn (%var_4785: Tensor[(1274), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64]) {
    %65 = cast(%var_4785, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %66 = cast(%var_4785, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %67 = reshape(%65, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %68 = reshape(%66, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %69 = @func_1003(%67, %68) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */;
    %70 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
    %71 = %69.3;
    (%70, %71, %var_4785)
  };
  %72(%var_4788) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64]) */
}

def @func_4818() -> (Tensor[(2, 7, 3), float32],) {
  @func_4816() /* ty=(Tensor[(2, 7, 3), float32],) */
}

def @func_3328(%var_3321: Tensor[(2, 7, 3), float32]) -> Tensor[(2, 7, 3), float32] {
  %73 = @func_2521() /* ty=Tensor[(2, 7, 3), float32] */;
  %74 = cast(%var_3321, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%76, %77) /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_2182(%var_2166: Tensor[(7, 12, 13), float64]) -> (Tensor[(7, 12, 13), float64],) {
  %78 = cast(-3.89556f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %79 = cast(%var_2166, dtype="float64") /* ty=Tensor[(7, 12, 13), float64] */;
  %80 = floor_divide(%78, %79) /* ty=Tensor[(7, 12, 13), float64] */;
  (%80,)
}

def @func_1436(%var_1434: Tensor[(9, 14, 1), float32], %var_1435: Tensor[(1800), uint64]) -> (Tensor[(1800), uint32], Tensor[(9, 14, 1800), int8]) {
  %97 = fn (%var_1411: Tensor[(9, 14, 1), float32], %var_1420: Tensor[(1800), uint64]) -> (Tensor[(1800), uint32], Tensor[(9, 14, 1800), int8]) {
    %81 = cast(%var_1420, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
    %82 = reshape(%81, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
    %83 = @func_551(%82) /* ty=(Tensor[(10, 15, 12), uint64],) */;
    %84 = %83.0;
    %85 = cast(%84, dtype="uint32") /* ty=Tensor[(10, 15, 12), uint32] */;
    %86 = shape_of(%var_1420, dtype="int32") /* ty=Tensor[(1), int32] */;
    %87 = cast(%var_1420, dtype="uint32") /* ty=Tensor[(1800), uint32] */;
    %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %89 = cast(%var_1411, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
    %90 = log2(%89) /* ty=Tensor[(9, 14, 1), float32] */;
    %91 = cast(%90, dtype="float32") /* ty=Tensor[(9, 14, 1), float32] */;
    %92 = sinh(%91) /* ty=Tensor[(9, 14, 1), float32] */;
    %93 = cast(%92, dtype="int8") /* ty=Tensor[(9, 14, 1), int8] */;
    %94 = cast(%var_1420, dtype="int8") /* ty=Tensor[(1800), int8] */;
    %95 = right_shift(%87, %88) /* ty=Tensor[(1800), uint32] */;
    %96 = multiply(%93, %94) /* ty=Tensor[(9, 14, 1800), int8] */;
    (%95, %96)
  };
  %97(%var_1434, %var_1435) /* ty=(Tensor[(1800), uint32], Tensor[(9, 14, 1800), int8]) */
}

def @func_1020(%var_1015: Tensor[(1, 13, 11), uint8], %var_1016: Tensor[(10, 13, 11), uint8]) -> Tensor[(10, 13, 11), uint8] {
  %98 = cast(%var_1015, dtype="uint8") /* ty=Tensor[(1, 13, 11), uint8] */;
  %99 = cast(%var_1016, dtype="uint8") /* ty=Tensor[(10, 13, 11), uint8] */;
  bitwise_xor(%98, %99) /* ty=Tensor[(10, 13, 11), uint8] */
}

def @func_2534() -> (Tensor[(2, 7, 3), float32],) {
  @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */
}

def @func_2914() -> Tensor[(2, 7, 3), float32] {
  %101 = fn () -> Tensor[(2, 7, 3), float32] {
    %100 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %100.0
  };
  %101() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_2589() -> (Tensor[(2, 7, 3), float32],) {
  %104 = fn () -> (Tensor[(2, 7, 3), float32],) {
    %102 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %103 = %102.0;
    (%103,)
  };
  %104() /* ty=(Tensor[(2, 7, 3), float32],) */
}

def @func_3862(%var_3845: Tensor[(12, 2), float64]) -> (Tensor[(12, 2), float64],) {
  %105 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 2), float64] */, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %106 = shape_of(%var_3845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %107 = cast(%var_3845, dtype="float64") /* ty=Tensor[(12, 2), float64] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %109 = power(%107, %108) /* ty=Tensor[(12, 2), float64] */;
  (%109,)
}

def @func_3784() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) {
  @func_3782() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) */
}

def @func_5238() -> Tensor[(3150), float64] {
  %110 = @func_5161() /* ty=(Tensor[(3150), float64],) */;
  %110.0
}

def @func_440(%var_430: Tensor[(14, 8, 2), float32]) -> (Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) {
  %111 = cast(%var_430, dtype="float32") /* ty=Tensor[(14, 8, 2), float32] */;
  %112 = log2(%111) /* ty=Tensor[(14, 8, 2), float32] */;
  %113 = cast(%var_430, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %114 = shape_of(%112, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%112, dtype="float64") /* ty=Tensor[(14, 8, 2), float64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %117 = cast(meta[relay.Constant][5] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %118 = reshape(%117, newshape=[]) /* ty=uint16 */;
  %119 = @func_47(%118) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %120 = divide(%115, %116) /* ty=Tensor[(14, 8, 2), float64] */;
  %121 = %119.1;
  (%120, %121, meta[relay.Constant][5] /* ty=uint16 */)
}

def @func_2872() -> (Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) {
  %146 = fn () -> (Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) {
    %122 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %123 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 416), float64] */, dtype="float64") /* ty=Tensor[(1, 416), float64] */;
    %124 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 416), float64] */, dtype="float64") /* ty=Tensor[(1, 416), float64] */;
    %125 = reshape(%123, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
    %126 = reshape(%124, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
    %127 = @func_208(%125, %126) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
    %128 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %129 = reshape(%128, newshape=[]) /* ty=uint16 */;
    %130 = @func_47(%129) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
    %131 = cast(meta[relay.Constant][8] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %132 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %133 = reshape(%131, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
    %134 = reshape(%132, newshape=[]) /* ty=uint16 */;
    %135 = @func_318(%133, %134) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
    %136 = cast(meta[relay.Constant][8] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
    %137 = cast(meta[relay.Constant][7] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %138 = reshape(%136, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
    %139 = reshape(%137, newshape=[]) /* ty=uint16 */;
    %140 = @func_318(%138, %139) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
    %141 = %122.0;
    %142 = %127.1;
    %143 = %130.0;
    %144 = %135.0;
    %145 = %140.2;
    (%141, %142, meta[relay.Constant][6] /* ty=Tensor[(1, 416), float64] */, %143, meta[relay.Constant][7] /* ty=uint16 */, %144, meta[relay.Constant][8] /* ty=Tensor[(3150), float64] */, %145)
  };
  %146() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) */
}

def @func_4337() -> Tensor[(2, 7, 3), float32] {
  @func_4335() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_5520(%var_5499: Tensor[(1274), float64], %var_5518: Tensor[(1200), float32]) -> (Tensor[(2, 7, 3), float32], uint16, Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(2, 7, 3), float32], Tensor[(1200), float32], Tensor[(1, 448), uint64], Tensor[(1800), uint64], Tensor[(1200), float32]) {
  %147 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %148 = @func_2871() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) */;
  %149 = cast(%var_5499, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %150 = reshape(%149, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %151 = @func_4787(%150) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64]) */;
  %152 = @func_2588() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %153 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 448), uint64] */, dtype="uint64") /* ty=Tensor[(1, 448), uint64] */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(1800), uint64] */, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %155 = cast(%var_5518, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %156 = reshape(%153, newshape=[16, 4, 7]) /* ty=Tensor[(16, 4, 7), uint64] */;
  %157 = reshape(%154, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %158 = reshape(%155, newshape=[1200]) /* ty=Tensor[(1200), float32] */;
  %159 = @func_1511(%156, %157, %158) /* ty=(Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) */;
  %160 = %147.0;
  %161 = %148.7;
  %162 = @func_2972() /* ty=Tensor[(2, 7, 3), float32] */;
  %163 = %151.1;
  %164 = %152.0;
  %165 = %159.2;
  (%160, %161, %162, %163, %var_5499, %164, %165, meta[relay.Constant][9] /* ty=Tensor[(1, 448), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(1800), uint64] */, %var_5518)
}

def @func_2522() -> Tensor[(2, 7, 3), float32] {
  %167 = fn () -> Tensor[(2, 7, 3), float32] {
    %166 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %166.0
  };
  %167() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_4077() -> (Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) {
  %174 = fn () -> (Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) {
    %168 = @func_3782() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) */;
    %169 = cast(meta[relay.Constant][11] /* ty=Tensor[(1092), float64] */, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %170 = reshape(%169, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
    %171 = @func_2182(%170) /* ty=(Tensor[(7, 12, 13), float64],) */;
    %172 = %168.1;
    %173 = %171.0;
    (%172, %173, meta[relay.Constant][11] /* ty=Tensor[(1092), float64] */)
  };
  %174() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */
}

def @func_5539() -> Tensor[(2, 7, 3), float32] {
  @func_5537() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_4714() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) {
  %175 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %176 = @func_4335() /* ty=Tensor[(2, 7, 3), float32] */;
  (%175, %176)
}

def @func_3458(%var_3456: Tensor[(264), bool]) -> (Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) {
  @func_3455(%var_3456) /* ty=(Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) */
}

def @func_3703(%var_3702: Tensor[(1800), uint64]) -> (Tensor[(2, 7, 3), float32], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) {
  %182 = fn (%var_3694: Tensor[(1800), uint64]) -> (Tensor[(2, 7, 3), float32], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) {
    %177 = cast(%var_3694, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
    %178 = reshape(%177, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
    %179 = @func_551(%178) /* ty=(Tensor[(10, 15, 12), uint64],) */;
    %180 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
    %181 = %179.0;
    (%180, %181, %var_3694)
  };
  %182(%var_3702) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */
}

def @func_5240() -> Tensor[(3150), float64] {
  @func_5238() /* ty=Tensor[(3150), float64] */
}

def @func_5162() -> (Tensor[(3150), float64],) {
  %185 = fn () -> (Tensor[(3150), float64],) {
    %183 = @func_2871() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(8, 4, 13), float64], Tensor[(1, 416), float64], Tensor[(3, 12, 11), bool], uint16, Tensor[(15, 14, 15), float64], Tensor[(3150), float64], uint16) */;
    %184 = %183.6;
    (%184,)
  };
  %185() /* ty=(Tensor[(3150), float64],) */
}

def @func_5663(%var_5660: Tensor[(16, 7, 9), float64], %var_5661: Tensor[(7, 156), float64], %var_5662: Tensor[(16, 7, 9), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), float64], Tensor[(7, 156), float64], Tensor[(16, 7, 9), bool], Tensor[(16, 7, 9), bool]) {
  @func_5658(%var_5660, %var_5661, %var_5662) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), float64], Tensor[(7, 156), float64], Tensor[(16, 7, 9), bool], Tensor[(16, 7, 9), bool]) */
}

def @func_4289() -> (Tensor[(2, 7, 3), float32],) {
  %187 = fn () -> (Tensor[(2, 7, 3), float32],) {
    %186 = @func_2521() /* ty=Tensor[(2, 7, 3), float32] */;
    (%186,)
  };
  %187() /* ty=(Tensor[(2, 7, 3), float32],) */
}

def @func_4994() -> (Tensor[(2, 7, 3), float64],) {
  @func_4992() /* ty=(Tensor[(2, 7, 3), float64],) */
}

def @func_4140(%var_4132: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64], Tensor[(2, 7, 3), int16], Tensor[(264), bool]) {
  %188 = cast(%var_4132, dtype="float64") /* ty=Tensor[(7, 8, 12), float64] */;
  %189 = cast(meta[relay.Constant][12] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
  %190 = reshape(%189, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %191 = @func_3455(%190) /* ty=(Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) */;
  %192 = exp(%188) /* ty=Tensor[(7, 8, 12), float64] */;
  %193 = %191.0;
  (%192, %193, meta[relay.Constant][12] /* ty=Tensor[(264), bool] */)
}

def @func_5281() -> Tensor[(7, 8), float64] {
  %195 = fn () -> Tensor[(7, 8), float64] {
    %194 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 8), float64] */;
    sigmoid(%194) /* ty=Tensor[(7, 8), float64] */
  };
  %195() /* ty=Tensor[(7, 8), float64] */
}

def @func_5246(%var_5242: Tensor[(14, 15, 14), float32]) -> Tensor[(14, 15, 14), float32] {
  %196 = cast(%var_5242, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %197 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(14, 15, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %198 = cast(meta[relay.Constant][14] /* ty=Tensor[(14, 15, 14), float32] */, dtype="float32") /* ty=Tensor[(14, 15, 14), float32] */;
  %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%198, %199) /* ty=Tensor[(14, 15, 14), float32] */
}

def @func_657(%var_651: Tensor[(14, 12, 16), int32], %var_652: Tensor[(14, 12, 16), int32]) -> (Tensor[(14, 12, 16), int32],) {
  %200 = cast(%var_652, dtype="int32") /* ty=Tensor[(14, 12, 16), int32] */;
  %201 = shape_of(%var_651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%var_651, dtype="int32") /* ty=Tensor[(14, 12, 16), int32] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %204 = maximum(%202, %203) /* ty=Tensor[(14, 12, 16), int32] */;
  (%204,)
}

def @func_4816() -> (Tensor[(2, 7, 3), float32],) {
  %205 = @func_3976() /* ty=Tensor[(2, 7, 3), float32] */;
  (%205,)
}

def @func_47(%var_18: uint16) -> (Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) {
  %206 = cast(%var_18, dtype="uint16") /* ty=uint16 */;
  %207 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="uint16") /* ty=Tensor[(3, 12, 11), uint16] */;
  %208 = multiply(%206, %207) /* ty=Tensor[(3, 12, 11), uint16] */;
  %209 = cast(%208, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
  %210 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="bool") /* ty=Tensor[(3, 12, 11), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(3, 12, 11), uint16] */, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %214 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %215 = cast(%208, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %216 = dyn.reshape(%213, %214, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %217 = power(%215, %216) /* ty=Tensor[(3, 12, 11), float64] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(3, 12, 11), float64] */;
  %219 = erf(%218) /* ty=Tensor[(3, 12, 11), float64] */;
  %220 = cast(%219, dtype="float32") /* ty=Tensor[(3, 12, 11), float32] */;
  %221 = greater_equal(%211, %212) /* ty=Tensor[(3, 12, 11), bool] */;
  %222 = sinh(%220) /* ty=Tensor[(3, 12, 11), float32] */;
  (%221, %222)
}

def @func_3865(%var_3863: Tensor[(12, 2), float64]) -> (Tensor[(12, 2), float64],) {
  @func_3862(%var_3863) /* ty=(Tensor[(12, 2), float64],) */
}

def @func_4632(%var_4628: Tensor[(1092), float64], %var_4629: Tensor[(143, 1), uint8], %var_4630: Tensor[(1092), float64], %var_4631: Tensor[(144), uint16]) -> (Tensor[(1092), uint16], Tensor[(2, 7, 3), float32], Tensor[(10, 13, 11), uint8], Tensor[(143, 1), uint8], Tensor[(1430), uint8], Tensor[(1092), bool], Tensor[(143), uint8], uint16, Tensor[(144), uint16], Tensor[(180), float64], Tensor[(3, 600), uint8]) {
  %261 = fn (%var_4553: Tensor[(1092), float64], %var_4575: Tensor[(143, 1), uint8], %var_4583: Tensor[(1092), float64], %var_4592: Tensor[(144), uint16]) -> (Tensor[(1092), uint16], Tensor[(2, 7, 3), float32], Tensor[(10, 13, 11), uint8], Tensor[(143, 1), uint8], Tensor[(1430), uint8], Tensor[(1092), bool], Tensor[(143), uint8], uint16, Tensor[(144), uint16], Tensor[(180), float64], Tensor[(3, 600), uint8]) {
    %223 = @func_4076() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */;
    %224 = %223.2;
    %225 = cast(%var_4553, dtype="uint16") /* ty=Tensor[(1092), uint16] */;
    %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(1), int32] */;
    %227 = cast(%224, dtype="uint16") /* ty=Tensor[(1092), uint16] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %229 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %230 = cast(%var_4575, dtype="uint8") /* ty=Tensor[(143, 1), uint8] */;
    %231 = cast(meta[relay.Constant][16] /* ty=Tensor[(1430), uint8] */, dtype="uint8") /* ty=Tensor[(1430), uint8] */;
    %232 = reshape(%230, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), uint8] */;
    %233 = reshape(%231, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint8] */;
    %234 = cast(%224, dtype="float64") /* ty=Tensor[(1092), float64] */;
    %235 = log10(%234) /* ty=Tensor[(1092), float64] */;
    %236 = cast(%var_4583, dtype="bool") /* ty=Tensor[(1092), bool] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(1), int32] */;
    %238 = cast(%235, dtype="bool") /* ty=Tensor[(1092), bool] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?), bool] */;
    %240 = cast(meta[relay.Constant][17] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %241 = cast(%var_4592, dtype="uint16") /* ty=Tensor[(144), uint16] */;
    %242 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %244 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 600), uint64] */, dtype="uint64") /* ty=Tensor[(3, 600), uint64] */;
    %245 = reshape(%240, newshape=[]) /* ty=uint16 */;
    %246 = reshape(%241, newshape=[2, 72]) /* ty=Tensor[(2, 72), uint16] */;
    %247 = reshape(%242, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
    %248 = reshape(%243, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
    %249 = reshape(%244, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
    %250 = @func_1990(%245, %246, %247, %248, %249) /* ty=(Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) */;
    %251 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 600), uint64] */, dtype="uint8") /* ty=Tensor[(3, 600), uint8] */;
    %252 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(3, 600), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %253 = cast(meta[relay.Constant][19] /* ty=Tensor[(3, 600), uint64] */, dtype="uint8") /* ty=Tensor[(3, 600), uint8] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %255 = left_shift(%227, %228) /* ty=Tensor[(1092), uint16] */;
    %256 = %229.0;
    %257 = @func_1020(%232, %233) /* ty=Tensor[(10, 13, 11), uint8] */;
    %258 = greater(%238, %239) /* ty=Tensor[(1092), bool] */;
    %259 = %250.6;
    %260 = bitwise_xor(%253, %254) /* ty=Tensor[(3, 600), uint8] */;
    (%255, %256, %257, %var_4575, meta[relay.Constant][16] /* ty=Tensor[(1430), uint8] */, %258, %259, meta[relay.Constant][17] /* ty=uint16 */, %var_4592, meta[relay.Constant][18] /* ty=Tensor[(180), float64] */, %260)
  };
  %261(%var_4628, %var_4629, %var_4630, %var_4631) /* ty=(Tensor[(1092), uint16], Tensor[(2, 7, 3), float32], Tensor[(10, 13, 11), uint8], Tensor[(143, 1), uint8], Tensor[(1430), uint8], Tensor[(1092), bool], Tensor[(143), uint8], uint16, Tensor[(144), uint16], Tensor[(180), float64], Tensor[(3, 600), uint8]) */
}

def @func_4961(%var_4958: Tensor[(10, 13, 5), float32], %var_4959: Tensor[(24), float64], %var_4960: Tensor[(3150, 1), float64]) -> (Tensor[(10, 13, 5), float32], Tensor[(12, 2), float64], Tensor[(24), float64], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(2, 7, 3), float64], Tensor[(15, 14, 15), float64], Tensor[(3150, 1), float64], uint16, Tensor[(2, 7, 3), float32]) {
  %280 = fn (%var_4915: Tensor[(10, 13, 5), float32], %var_4924: Tensor[(24), float64], %var_4941: Tensor[(3150, 1), float64]) -> (Tensor[(10, 13, 5), float32], Tensor[(12, 2), float64], Tensor[(24), float64], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(2, 7, 3), float64], Tensor[(15, 14, 15), float64], Tensor[(3150, 1), float64], uint16, Tensor[(2, 7, 3), float32]) {
    %262 = cast(%var_4915, dtype="float32") /* ty=Tensor[(10, 13, 5), float32] */;
    %263 = cast(%var_4924, dtype="float64") /* ty=Tensor[(24), float64] */;
    %264 = reshape(%263, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
    %265 = @func_3862(%264) /* ty=(Tensor[(12, 2), float64],) */;
    %266 = cast(meta[relay.Constant][21] /* ty=Tensor[(264), bool] */, dtype="bool") /* ty=Tensor[(264), bool] */;
    %267 = reshape(%266, newshape=[2, 12, 11]) /* ty=Tensor[(2, 12, 11), bool] */;
    %268 = @func_3842() /* ty=(Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) */;
    %269 = cast(%var_4941, dtype="float64") /* ty=Tensor[(3150, 1), float64] */;
    %270 = cast(meta[relay.Constant][22] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %271 = reshape(%269, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
    %272 = reshape(%270, newshape=[]) /* ty=uint16 */;
    %273 = @func_318(%271, %272) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
    %274 = log10(%262) /* ty=Tensor[(10, 13, 5), float32] */;
    %275 = %265.0;
    %276 = @func_2406(%267) /* ty=Tensor[(2, 12, 11), float64] */;
    %277 = %268.0;
    %278 = %273.0;
    %279 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
    (%274, %275, %var_4924, %276, meta[relay.Constant][21] /* ty=Tensor[(264), bool] */, %277, %278, %var_4941, meta[relay.Constant][22] /* ty=uint16 */, %279)
  };
  %280(%var_4958, %var_4959, %var_4960) /* ty=(Tensor[(10, 13, 5), float32], Tensor[(12, 2), float64], Tensor[(24), float64], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(2, 7, 3), float64], Tensor[(15, 14, 15), float64], Tensor[(3150, 1), float64], uint16, Tensor[(2, 7, 3), float32]) */
}

def @func_1516(%var_1513: Tensor[(16, 4, 7), uint64], %var_1514: Tensor[(1800), uint64], %var_1515: Tensor[(1200), float32]) -> (Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) {
  @func_1511(%var_1513, %var_1514, %var_1515) /* ty=(Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) */
}

def @func_3977() -> Tensor[(2, 7, 3), float32] {
  %281 = fn () -> Tensor[(2, 7, 3), float32] {
    @func_2972() /* ty=Tensor[(2, 7, 3), float32] */
  };
  %281() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_2751(%var_2748: Tensor[(480), float32], %var_2749: uint16, %var_2750: Tensor[(180), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(637, 2), float64], Tensor[(480), float32], Tensor[(1274), float64], Tensor[(180), float64], Tensor[(7, 14, 13), float32]) {
  %303 = fn (%var_2697: Tensor[(480), float32], %var_2699: uint16, %var_2700: Tensor[(180), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(637, 2), float64], Tensor[(480), float32], Tensor[(1274), float64], Tensor[(180), float64], Tensor[(7, 14, 13), float32]) {
    %282 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %283 = cast(%var_2697, dtype="float32") /* ty=Tensor[(480), float32] */;
    %284 = cast(meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %285 = cast(%var_2699, dtype="uint16") /* ty=uint16 */;
    %286 = cast(%var_2700, dtype="float64") /* ty=Tensor[(180), float64] */;
    %287 = reshape(%283, newshape=[15, 2, 16]) /* ty=Tensor[(15, 2, 16), float32] */;
    %288 = reshape(%284, newshape=[637, 2]) /* ty=Tensor[(637, 2), float64] */;
    %289 = reshape(%285, newshape=[]) /* ty=uint16 */;
    %290 = reshape(%286, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
    %291 = @func_2642(%287, %288, %289, %290) /* ty=(Tensor[(15, 2, 16), uint64], Tensor[(7, 14, 13), float64], Tensor[(637, 2), float64], uint16, uint16, Tensor[(24, 6), uint16], Tensor[(6, 30), float64], Tensor[(18, 100), uint64]) */;
    %292 = cast(meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %293 = %291.2;
    %294 = cast(%293, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
    %295 = reshape(%292, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %296 = reshape(%294, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
    %297 = @func_1003(%295, %296) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */;
    %298 = %297.3;
    %299 = cast(%298, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
    %300 = cast(%var_2699, dtype="float32") /* ty=float32 */;
    %301 = %282.0;
    %302 = subtract(%299, %300) /* ty=Tensor[(7, 14, 13), float32] */;
    (%301, %293, %var_2697, meta[relay.Constant][23] /* ty=Tensor[(1274), float64] */, %var_2700, %302)
  };
  %303(%var_2748, %var_2749, %var_2750) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(637, 2), float64], Tensor[(480), float32], Tensor[(1274), float64], Tensor[(180), float64], Tensor[(7, 14, 13), float32]) */
}

def @func_4406(%var_4404: Tensor[(24), float64]) -> (Tensor[(2, 7, 3), uint8], Tensor[(12, 2), float64], Tensor[(24), float64]) {
  @func_4403(%var_4404) /* ty=(Tensor[(2, 7, 3), uint8], Tensor[(12, 2), float64], Tensor[(24), float64]) */
}

def @func_4880(%var_4878: Tensor[(1, 2, 9), float64]) -> (Tensor[(?, 2, 9), int16], Tensor[(1, 2, 9), float64], Tensor[(2, 7, 3), float32]) {
  @func_4877(%var_4878) /* ty=(Tensor[(?, 2, 9), int16], Tensor[(1, 2, 9), float64], Tensor[(2, 7, 3), float32]) */
}

def @func_917(%var_915: Tensor[(10, 15, 8), float32], %var_916: Tensor[(1800), uint64]) -> (Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) {
  %322 = fn (%var_851: Tensor[(10, 15, 8), float32], %var_897: Tensor[(1800), uint64]) -> (Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) {
    %304 = cast(%var_851, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
    %305 = cast(meta[relay.Constant][24] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %306 = cast(meta[relay.Constant][24] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %307 = reshape(%305, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
    %308 = reshape(%306, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
    %309 = @func_208(%307, %308) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
    %310 = %309.1;
    %311 = cast(%310, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
    %312 = cast(meta[relay.Constant][24] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %313 = reshape(%311, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
    %314 = reshape(%312, newshape=[8, 4, 13]) /* ty=Tensor[(8, 4, 13), float64] */;
    %315 = @func_208(%313, %314) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */;
    %316 = cast(%var_897, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
    %317 = reshape(%316, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
    %318 = @func_551(%317) /* ty=(Tensor[(10, 15, 12), uint64],) */;
    %319 = cosh(%304) /* ty=Tensor[(10, 15, 8), float32] */;
    %320 = %315.1;
    %321 = %318.0;
    (%319, %310, meta[relay.Constant][24] /* ty=Tensor[(416), float64] */, %320, %321, %var_897)
  };
  %322(%var_915, %var_916) /* ty=(Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */
}

def @func_4545(%var_4543: Tensor[(7, 12, 13), float64], %var_4544: Tensor[(1200), float32]) -> (Tensor[(7, 12, 13), int32], Tensor[(1200), float32], Tensor[(448), uint64], Tensor[(1800, 1), uint64], Tensor[(1200), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) {
  %352 = fn (%var_4483: Tensor[(7, 12, 13), float64], %var_4507: Tensor[(1200), float32]) -> (Tensor[(7, 12, 13), int32], Tensor[(1200), float32], Tensor[(448), uint64], Tensor[(1800, 1), uint64], Tensor[(1200), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) {
    %323 = @func_4076() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */;
    %324 = %323.1;
    %325 = cast(%var_4483, dtype="int32") /* ty=Tensor[(7, 12, 13), int32] */;
    %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %327 = cast(%324, dtype="int32") /* ty=Tensor[(7, 12, 13), int32] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %329 = cast(meta[relay.Constant][25] /* ty=Tensor[(448), uint64] */, dtype="uint64") /* ty=Tensor[(448), uint64] */;
    %330 = cast(meta[relay.Constant][26] /* ty=Tensor[(1800, 1), uint64] */, dtype="uint64") /* ty=Tensor[(1800, 1), uint64] */;
    %331 = cast(%var_4507, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %332 = reshape(%329, newshape=[16, 4, 7]) /* ty=Tensor[(16, 4, 7), uint64] */;
    %333 = reshape(%330, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
    %334 = reshape(%331, newshape=[1200]) /* ty=Tensor[(1200), float32] */;
    %335 = @func_1511(%332, %333, %334) /* ty=(Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) */;
    %336 = cast(%var_4483, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %337 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %338 = cast(%324, dtype="float32") /* ty=Tensor[(7, 12, 13), float32] */;
    %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %340 = divide(%338, %339) /* ty=Tensor[(7, 12, 13), float32] */;
    %341 = cast(%324, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %342 = shape_of(%340, dtype="int32") /* ty=Tensor[(3), int32] */;
    %343 = cast(%340, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
    %344 = dyn.reshape(%341, %342, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %345 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %346 = @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */;
    %347 = maximum(%327, %328) /* ty=Tensor[(7, 12, 13), int32] */;
    %348 = %335.2;
    %349 = not_equal(%343, %344) /* ty=Tensor[(7, 12, 13), bool] */;
    %350 = %345.0;
    %351 = %346.1;
    (%347, %348, meta[relay.Constant][25] /* ty=Tensor[(448), uint64] */, meta[relay.Constant][26] /* ty=Tensor[(1800, 1), uint64] */, %var_4507, %349, %350, %351)
  };
  %352(%var_4543, %var_4544) /* ty=(Tensor[(7, 12, 13), int32], Tensor[(1200), float32], Tensor[(448), uint64], Tensor[(1800, 1), uint64], Tensor[(1200), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */
}

def @func_5383(%var_5382: Tensor[(11, 8, 1), float32]) -> (Tensor[(11, 8, 1), float32],) {
  %355 = fn (%var_5366: Tensor[(11, 8, 1), float32]) -> (Tensor[(11, 8, 1), float32],) {
    %353 = cast(%var_5366, dtype="float32") /* ty=Tensor[(11, 8, 1), float32] */;
    %354 = exp(%353) /* ty=Tensor[(11, 8, 1), float32] */;
    (%354,)
  };
  %355(%var_5382) /* ty=(Tensor[(11, 8, 1), float32],) */
}

def @func_4696() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool]) {
  @func_4694() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool]) */
}

def @func_2648(%var_2644: Tensor[(15, 2, 16), float32], %var_2645: Tensor[(637, 2), float64], %var_2646: uint16, %var_2647: Tensor[(6, 30), float64]) -> (Tensor[(15, 2, 16), uint64], Tensor[(7, 14, 13), float64], Tensor[(637, 2), float64], uint16, uint16, Tensor[(24, 6), uint16], Tensor[(6, 30), float64], Tensor[(18, 100), uint64]) {
  @func_2642(%var_2644, %var_2645, %var_2646, %var_2647) /* ty=(Tensor[(15, 2, 16), uint64], Tensor[(7, 14, 13), float64], Tensor[(637, 2), float64], uint16, uint16, Tensor[(24, 6), uint16], Tensor[(6, 30), float64], Tensor[(18, 100), uint64]) */
}

def @func_2532() -> (Tensor[(2, 7, 3), float32],) {
  %356 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %357 = %356.0;
  (%357,)
}

def @func_4694() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool]) {
  %358 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %359 = %358.0;
  %360 = cast(%359, dtype="int16") /* ty=Tensor[(2, 7, 3), int16] */;
  %361 = reshape(%360, newshape=[2, 7, 3]) /* ty=Tensor[(2, 7, 3), int16] */;
  %362 = @func_3275(%361) /* ty=(Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), uint8]) */;
  %363 = %362.0;
  (%359, %363)
}

def @func_4877(%var_4862: Tensor[(1, 2, 9), float64]) -> (Tensor[(?, 2, 9), int16], Tensor[(1, 2, 9), float64], Tensor[(2, 7, 3), float32]) {
  %364 = cast(%var_4862, dtype="float64") /* ty=Tensor[(1, 2, 9), float64] */;
  %365 = erf(%364) /* ty=Tensor[(1, 2, 9), float64] */;
  %366 = cast(%var_4862, dtype="int16") /* ty=Tensor[(1, 2, 9), int16] */;
  %367 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%365, dtype="int16") /* ty=Tensor[(1, 2, 9), int16] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %370 = cast(%365, dtype="float64") /* ty=Tensor[(1, 2, 9), float64] */;
  %371 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %372 = maximum(%368, %369) /* ty=Tensor[(?, 2, 9), int16] */;
  %373 = asin(%370) /* ty=Tensor[(1, 2, 9), float64] */;
  %374 = %371.2;
  (%372, %373, %374)
}

def @func_2231() -> (Tensor[(2, 7, 3), float32],) {
  %377 = fn () -> (Tensor[(2, 7, 3), float32],) {
    %375 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 7, 3), float32] */, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
    %376 = acos(%375) /* ty=Tensor[(2, 7, 3), float32] */;
    (%376,)
  };
  %377() /* ty=(Tensor[(2, 7, 3), float32],) */
}

def @func_5342() -> Tensor[(2, 7, 3), bool] {
  %378 = @func_4076() /* ty=(Tensor[(2, 7, 3), bool], Tensor[(7, 12, 13), float64], Tensor[(1092), float64]) */;
  %378.0
}

def @func_5103(%var_5102: Tensor[(1800), uint64]) -> (Tensor[(2, 3, 5), float64], Tensor[(1800), bool]) {
  %390 = fn (%var_5086: Tensor[(1800), uint64]) -> (Tensor[(2, 3, 5), float64], Tensor[(1800), bool]) {
    %379 = cast(meta[relay.Constant][28] /* ty=Tensor[(2, 3, 5), float64] */, dtype="float64") /* ty=Tensor[(2, 3, 5), float64] */;
    %380 = cast(%var_5086, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
    %381 = reshape(%380, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
    %382 = @func_3701(%381) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */;
    %383 = %382.2;
    %384 = cast(%383, dtype="bool") /* ty=Tensor[(1800), bool] */;
    %385 = shape_of(%var_5086, dtype="int32") /* ty=Tensor[(1), int32] */;
    %386 = cast(%var_5086, dtype="bool") /* ty=Tensor[(1800), bool] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?), bool] */;
    %388 = acos(%379) /* ty=Tensor[(2, 3, 5), float64] */;
    %389 = equal(%386, %387) /* ty=Tensor[(1800), bool] */;
    (%388, %389)
  };
  %390(%var_5102) /* ty=(Tensor[(2, 3, 5), float64], Tensor[(1800), bool]) */
}

def @func_3782() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) {
  %391 = @func_2588() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %392 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
  %393 = cast(%392, dtype="float64") /* ty=Tensor[(2, 7, 3), float64] */;
  %394 = asin(%393) /* ty=Tensor[(2, 7, 3), float64] */;
  %395 = cast(%394, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %396 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %397 = cast(%392, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %398 = dyn.reshape(%395, %396, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %399 = cast(%394, dtype="int8") /* ty=Tensor[(2, 7, 3), int8] */;
  %400 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%392, dtype="int8") /* ty=Tensor[(2, 7, 3), int8] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %403 = %391.0;
  %404 = greater(%397, %398) /* ty=Tensor[(2, 7, 3), bool] */;
  %405 = subtract(%401, %402) /* ty=Tensor[(2, 7, 3), int8] */;
  (%403, %404, %405)
}

def @func_4992() -> (Tensor[(2, 7, 3), float64],) {
  %406 = @func_3842() /* ty=(Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) */;
  %407 = %406.0;
  (%407,)
}

def @func_3844() -> (Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) {
  @func_3842() /* ty=(Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) */
}

def @func_4730() -> Tensor[(2, 7, 3), float32] {
  @func_2521() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_5249(%var_5247: Tensor[(14, 15, 14), float32]) -> Tensor[(14, 15, 14), float32] {
  @func_5246(%var_5247) /* ty=Tensor[(14, 15, 14), float32] */
}

def @func_1511(%var_1470: Tensor[(16, 4, 7), uint64], %var_1488: Tensor[(1800), uint64], %var_1495: Tensor[(1200), float32]) -> (Tensor[(10, 15, 12), uint64], Tensor[(8, 4, 13), float64], Tensor[(1200), float32], Tensor[(16, 4, 7), float64], Tensor[(1800), float64]) {
  %408 = cast(%var_1488, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %409 = reshape(%408, newshape=[10, 15, 12]) /* ty=Tensor[(10, 15, 12), uint64] */;
  %410 = @func_551(%409) /* ty=(Tensor[(10, 15, 12), uint64],) */;
  %411 = cast(%var_1495, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %412 = %410.0;
  %413 = cast(%412, dtype="uint64") /* ty=Tensor[(10, 15, 12), uint64] */;
  %414 = reshape(%411, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float32] */;
  %415 = reshape(%413, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %416 = @func_914(%414, %415) /* ty=(Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */;
  %417 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %418 = cast(%var_1470, dtype="uint64") /* ty=Tensor[(16, 4, 7), uint64] */;
  %419 = logical_xor(%417, %418) /* ty=Tensor[(16, 4, 7), uint64] */;
  %420 = cast(%var_1470, dtype="float64") /* ty=Tensor[(16, 4, 7), float64] */;
  %421 = shape_of(%419, dtype="int32") /* ty=Tensor[(3), int32] */;
  %422 = cast(%419, dtype="float64") /* ty=Tensor[(16, 4, 7), float64] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %424 = cast(%var_1488, dtype="float64") /* ty=Tensor[(1800), float64] */;
  %425 = %416.1;
  %426 = power(%422, %423) /* ty=Tensor[(16, 4, 7), float64] */;
  %427 = acosh(%424) /* ty=Tensor[(1800), float64] */;
  (%412, %425, %var_1495, %426, %427)
}

def @func_5658(%var_5629: Tensor[(16, 7, 9), float64], %var_5641: Tensor[(7, 156), float64], %var_5649: Tensor[(16, 7, 9), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), float64], Tensor[(7, 156), float64], Tensor[(16, 7, 9), bool], Tensor[(16, 7, 9), bool]) {
  %428 = cast(%var_5641, dtype="float64") /* ty=Tensor[(7, 156), float64] */;
  %429 = reshape(%428, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %430 = @func_2182(%429) /* ty=(Tensor[(7, 12, 13), float64],) */;
  %431 = cast(%var_5629, dtype="float64") /* ty=Tensor[(16, 7, 9), float64] */;
  %432 = erf(%431) /* ty=Tensor[(16, 7, 9), float64] */;
  %433 = cast(%var_5629, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %434 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%432, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %437 = cast(%var_5649, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %438 = shape_of(%432, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(%432, dtype="bool") /* ty=Tensor[(16, 7, 9), bool] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %441 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %442 = %430.0;
  %443 = less(%435, %436) /* ty=Tensor[(16, 7, 9), bool] */;
  %444 = not_equal(%439, %440) /* ty=Tensor[(16, 7, 9), bool] */;
  (%441, %442, %var_5641, %443, %444)
}

def @func_1006(%var_1004: Tensor[(7, 14, 13), float64], %var_1005: Tensor[(7, 14, 13), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) {
  %458 = fn (%var_967: Tensor[(7, 14, 13), float64], %var_983: Tensor[(7, 14, 13), float64]) -> (Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) {
    %445 = cast(%var_967, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
    %446 = cast(%var_967, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
    %447 = cast(%var_967, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
    %448 = cast(%var_983, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
    %449 = shape_of(%var_967, dtype="int32") /* ty=Tensor[(3), int32] */;
    %450 = cast(%var_967, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
    %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %452 = cast(%var_967, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
    %453 = log(%445) /* ty=Tensor[(7, 14, 13), float64] */;
    %454 = sqrt(%446) /* ty=Tensor[(7, 14, 13), float32] */;
    %455 = rsqrt(%447) /* ty=Tensor[(7, 14, 13), float32] */;
    %456 = mod(%450, %451) /* ty=Tensor[(7, 14, 13), float64] */;
    %457 = acos(%452) /* ty=Tensor[(7, 14, 13), float32] */;
    (%453, %454, %455, %456, %457)
  };
  %458(%var_1004, %var_1005) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */
}

def @func_3015(%var_3013: Tensor[(5, 7, 13), float32]) -> (Tensor[(5, 7, 13), float32], Tensor[(3, 12, 11), float32], Tensor[(224), float32]) {
  @func_3012(%var_3013) /* ty=(Tensor[(5, 7, 13), float32], Tensor[(3, 12, 11), float32], Tensor[(224), float32]) */
}

def @func_1990(%var_1912: uint16, %var_1939: Tensor[(2, 72), uint16], %var_1948: Tensor[(2, 9, 10), float64], %var_1952: Tensor[(2, 9, 10), float64], %var_1974: Tensor[(1800), uint64]) -> (Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) {
  %459 = cast(%var_1912, dtype="uint16") /* ty=uint16 */;
  %460 = reshape(%459, newshape=[]) /* ty=uint16 */;
  %461 = @func_47(%460) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */;
  %462 = cast(meta[relay.Constant][30] /* ty=Tensor[(3150), float64] */, dtype="float64") /* ty=Tensor[(3150), float64] */;
  %463 = cast(%var_1912, dtype="uint16") /* ty=uint16 */;
  %464 = reshape(%462, newshape=[15, 14, 15]) /* ty=Tensor[(15, 14, 15), float64] */;
  %465 = reshape(%463, newshape=[]) /* ty=uint16 */;
  %466 = @func_318(%464, %465) /* ty=(Tensor[(15, 14, 15), float64], Tensor[(3, 12, 11), bool], uint16) */;
  %467 = cast(%var_1939, dtype="uint16") /* ty=Tensor[(2, 72), uint16] */;
  %468 = cast(%var_1939, dtype="uint16") /* ty=Tensor[(2, 72), uint16] */;
  %469 = cast(%var_1939, dtype="bool") /* ty=Tensor[(2, 72), bool] */;
  %470 = cast(meta[relay.Constant][31] /* ty=Tensor[(143), uint8] */, dtype="uint8") /* ty=Tensor[(143), uint8] */;
  %471 = reshape(%467, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), uint16] */;
  %472 = reshape(%468, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), uint16] */;
  %473 = reshape(%469, newshape=[3, 16, 3]) /* ty=Tensor[(3, 16, 3), bool] */;
  %474 = reshape(%470, newshape=[143]) /* ty=Tensor[(143), uint8] */;
  %475 = @func_1888(%471, %472, %473, %474) /* ty=(Tensor[(3, 16, 3), bool], Tensor[(3, 16, 3), float64], Tensor[(3, 16, 3), int64], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1430), uint8], Tensor[(14, 12, 16), int32], Tensor[(2688), int32]) */;
  %476 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %477 = cos(%476) /* ty=Tensor[(2, 9, 10), float64] */;
  %478 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %482 = minimum(%480, %481) /* ty=Tensor[(2, 9, 10), float64] */;
  %483 = cast(%var_1948, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %487 = cast(%var_1952, dtype="uint32") /* ty=Tensor[(2, 9, 10), uint32] */;
  %488 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%482, dtype="uint32") /* ty=Tensor[(2, 9, 10), uint32] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %491 = multiply(%489, %490) /* ty=Tensor[(2, 9, 10), uint32] */;
  %492 = cast(%491, dtype="float64") /* ty=Tensor[(2, 9, 10), float64] */;
  %493 = cast(meta[relay.Constant][33] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %494 = cast(%var_1974, dtype="uint64") /* ty=Tensor[(1800), uint64] */;
  %495 = reshape(%493, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), float32] */;
  %496 = reshape(%494, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %497 = @func_914(%495, %496) /* ty=(Tensor[(10, 15, 8), float32], Tensor[(8, 4, 13), float64], Tensor[(416), float64], Tensor[(8, 4, 13), float64], Tensor[(10, 15, 12), uint64], Tensor[(1800), uint64]) */;
  %498 = %461.1;
  %499 = %466.2;
  %500 = %475.7;
  %501 = mod(%485, %486) /* ty=Tensor[(2, 9, 10), float64] */;
  %502 = acosh(%492) /* ty=Tensor[(2, 9, 10), float64] */;
  %503 = %497.2;
  (%498, %var_1912, %499, meta[relay.Constant][30] /* ty=Tensor[(3150), float64] */, %500, %var_1939, meta[relay.Constant][31] /* ty=Tensor[(143), uint8] */, %501, %502, %503, meta[relay.Constant][33] /* ty=Tensor[(1200), float32] */, %var_1974)
}

def @func_3012(%var_2988: Tensor[(5, 7, 13), float32]) -> (Tensor[(5, 7, 13), float32], Tensor[(3, 12, 11), float32], Tensor[(224), float32]) {
  %504 = cast(%var_2988, dtype="float32") /* ty=Tensor[(5, 7, 13), float32] */;
  %505 = cast(meta[relay.Constant][34] /* ty=Tensor[(224), float32] */, dtype="float32") /* ty=Tensor[(224), float32] */;
  %506 = reshape(%505, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float32] */;
  %507 = @func_440(%506) /* ty=(Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) */;
  %508 = erf(%504) /* ty=Tensor[(5, 7, 13), float32] */;
  %509 = %507.1;
  (%508, %509, meta[relay.Constant][34] /* ty=Tensor[(224), float32] */)
}

def @func_3971(%var_3969: Tensor[(264), bool], %var_3970: Tensor[(180), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), int16], Tensor[(3, 12, 11), float32], Tensor[(455), float32], Tensor[(264), bool], Tensor[(416), int8], Tensor[(264), bool], Tensor[(180), float64]) {
  @func_3967(%var_3969, %var_3970) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), int16], Tensor[(3, 12, 11), float32], Tensor[(455), float32], Tensor[(264), bool], Tensor[(416), int8], Tensor[(264), bool], Tensor[(180), float64]) */
}

def @func_4906() -> Tensor[(2, 7, 3), float32] {
  %511 = fn () -> Tensor[(2, 7, 3), float32] {
    %510 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
    %510.0
  };
  %511() /* ty=Tensor[(2, 7, 3), float32] */
}

def @main(%var_5695: Tensor[(12, 6, 12), float64]) -> (Tensor[(12, 6, 12), float64], Tensor[(12, 6, 12), uint64]) {
  %512 = cast(%var_5695, dtype="float64") /* ty=Tensor[(12, 6, 12), float64] */;
  %513 = cast(%var_5695, dtype="float32") /* ty=Tensor[(12, 6, 12), float32] */;
  %514 = asinh(%513) /* ty=Tensor[(12, 6, 12), float32] */;
  %515 = cast(%var_5695, dtype="uint64") /* ty=Tensor[(12, 6, 12), uint64] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="uint64") /* ty=Tensor[(12, 6, 12), uint64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %519 = erf(%512) /* ty=Tensor[(12, 6, 12), float64] */;
  %520 = logical_xor(%517, %518) /* ty=Tensor[(12, 6, 12), uint64] */;
  (%519, %520)
}

def @func_443(%var_441: Tensor[(14, 8, 2), float32]) -> (Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) {
  @func_440(%var_441) /* ty=(Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) */
}

def @func_2348() -> (Tensor[(2, 7, 3), float32],) {
  @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */
}

def @func_50(%var_48: uint16) -> (Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) {
  @func_47(%var_48) /* ty=(Tensor[(3, 12, 11), bool], Tensor[(3, 12, 11), float32]) */
}

def @func_4250(%var_4248: Tensor[(1, 264), bool], %var_4249: Tensor[(10, 264), bool]) -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32], Tensor[(10, 264), int8], Tensor[(2, 7, 3), int16]) {
  %534 = fn (%var_4211: Tensor[(1, 264), bool], %var_4232: Tensor[(10, 264), bool]) -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32], Tensor[(10, 264), int8], Tensor[(2, 7, 3), int16]) {
    %521 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %522 = cast(%var_4211, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
    %523 = reshape(%522, newshape=[264]) /* ty=Tensor[(264), bool] */;
    %524 = @func_2813(%523) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) */;
    %525 = cast(%var_4211, dtype="int8") /* ty=Tensor[(1, 264), int8] */;
    %526 = cast(%var_4232, dtype="int8") /* ty=Tensor[(10, 264), int8] */;
    %527 = cast(%var_4211, dtype="bool") /* ty=Tensor[(1, 264), bool] */;
    %528 = reshape(%527, newshape=[264]) /* ty=Tensor[(264), bool] */;
    %529 = @func_3455(%528) /* ty=(Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) */;
    %530 = %521.0;
    %531 = %524.0;
    %532 = subtract(%525, %526) /* ty=Tensor[(10, 264), int8] */;
    %533 = %529.0;
    (%530, %531, %532, %533)
  };
  %534(%var_4248, %var_4249) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32], Tensor[(10, 264), int8], Tensor[(2, 7, 3), int16]) */
}

def @func_2549() -> Tensor[(2, 7, 3), float32] {
  @func_2547() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_5024() -> Tensor[(2, 7, 3), float32] {
  %536 = fn () -> Tensor[(2, 7, 3), float32] {
    %535 = @func_4694() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool]) */;
    %535.0
  };
  %536() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_2547() -> Tensor[(2, 7, 3), float32] {
  %537 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %537.0
}

def @func_5344() -> Tensor[(2, 7, 3), bool] {
  @func_5342() /* ty=Tensor[(2, 7, 3), bool] */
}

def @func_4143(%var_4141: Tensor[(7, 8, 12), float64]) -> (Tensor[(7, 8, 12), float64], Tensor[(2, 7, 3), int16], Tensor[(264), bool]) {
  @func_4140(%var_4141) /* ty=(Tensor[(7, 8, 12), float64], Tensor[(2, 7, 3), int16], Tensor[(264), bool]) */
}

def @func_2346() -> (Tensor[(2, 7, 3), float32],) {
  %538 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %539 = %538.0;
  (%539,)
}

def @func_3292() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) {
  %544 = fn () -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) {
    %540 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
    %541 = cast(%540, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
    %542 = sin(%541) /* ty=Tensor[(2, 7, 3), float32] */;
    %543 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
    (%542, %543)
  };
  %544() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) */
}

def @func_2408(%var_2407: Tensor[(2, 12, 11), bool]) -> Tensor[(2, 12, 11), float64] {
  %554 = fn (%var_2394: Tensor[(2, 12, 11), bool]) -> Tensor[(2, 12, 11), float64] {
    %545 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 12, 11), bool] */, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
    %546 = shape_of(%var_2394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%var_2394, dtype="bool") /* ty=Tensor[(2, 12, 11), bool] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %549 = logical_and(%547, %548) /* ty=Tensor[(2, 12, 11), bool] */;
    %550 = cast(%var_2394, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
    %551 = shape_of(%549, dtype="int32") /* ty=Tensor[(3), int32] */;
    %552 = cast(%549, dtype="float64") /* ty=Tensor[(2, 12, 11), float64] */;
    %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%552, %553) /* ty=Tensor[(2, 12, 11), float64] */
  };
  %554(%var_2407) /* ty=Tensor[(2, 12, 11), float64] */
}

def @func_5524(%var_5522: Tensor[(1274), float64], %var_5523: Tensor[(1200), float32]) -> (Tensor[(2, 7, 3), float32], uint16, Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(2, 7, 3), float32], Tensor[(1200), float32], Tensor[(1, 448), uint64], Tensor[(1800), uint64], Tensor[(1200), float32]) {
  @func_5520(%var_5522, %var_5523) /* ty=(Tensor[(2, 7, 3), float32], uint16, Tensor[(2, 7, 3), float32], Tensor[(7, 14, 13), float64], Tensor[(1274), float64], Tensor[(2, 7, 3), float32], Tensor[(1200), float32], Tensor[(1, 448), uint64], Tensor[(1800), uint64], Tensor[(1200), float32]) */
}

def @func_1024(%var_1022: Tensor[(1, 13, 11), uint8], %var_1023: Tensor[(10, 13, 11), uint8]) -> Tensor[(10, 13, 11), uint8] {
  @func_1020(%var_1022, %var_1023) /* ty=Tensor[(10, 13, 11), uint8] */
}

def @func_4367(%var_4351: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(7, 8, 12), float64], Tensor[(672), float64]) {
  %555 = cast(%var_4351, dtype="float32") /* ty=Tensor[(3, 7, 12), float32] */;
  %556 = cast(meta[relay.Constant][36] /* ty=Tensor[(672), float64] */, dtype="float64") /* ty=Tensor[(672), float64] */;
  %557 = reshape(%556, newshape=[7, 8, 12]) /* ty=Tensor[(7, 8, 12), float64] */;
  %558 = @func_4140(%557) /* ty=(Tensor[(7, 8, 12), float64], Tensor[(2, 7, 3), int16], Tensor[(264), bool]) */;
  %559 = erf(%555) /* ty=Tensor[(3, 7, 12), float32] */;
  %560 = %558.0;
  (%559, %560, meta[relay.Constant][36] /* ty=Tensor[(672), float64] */)
}

def @func_2512(%var_2511: Tensor[(224), float32]) -> (Tensor[(2, 7, 3), float32], uint16, Tensor[(224), float32]) {
  %567 = fn (%var_2505: Tensor[(224), float32]) -> (Tensor[(2, 7, 3), float32], uint16, Tensor[(224), float32]) {
    %561 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %562 = cast(%var_2505, dtype="float32") /* ty=Tensor[(224), float32] */;
    %563 = reshape(%562, newshape=[14, 8, 2]) /* ty=Tensor[(14, 8, 2), float32] */;
    %564 = @func_440(%563) /* ty=(Tensor[(14, 8, 2), float64], Tensor[(3, 12, 11), float32], uint16) */;
    %565 = %561.0;
    %566 = %564.2;
    (%565, %566, %var_2505)
  };
  %567(%var_2511) /* ty=(Tensor[(2, 7, 3), float32], uint16, Tensor[(224), float32]) */
}

def @func_2973() -> Tensor[(2, 7, 3), float32] {
  %571 = fn () -> Tensor[(2, 7, 3), float32] {
    %568 = @func_2346() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %569 = %568.0;
    %570 = cast(%569, dtype="float32") /* ty=Tensor[(2, 7, 3), float32] */;
    sqrt(%570) /* ty=Tensor[(2, 7, 3), float32] */
  };
  %571() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_3967(%var_3962: Tensor[(264), bool], %var_3963: Tensor[(180), float64]) -> (Tensor[(2, 7, 3), float32], Tensor[(7, 12, 13), bool], Tensor[(2, 7, 3), int16], Tensor[(3, 12, 11), float32], Tensor[(455), float32], Tensor[(264), bool], Tensor[(416), int8], Tensor[(264), bool], Tensor[(180), float64]) {
  %572 = cast(meta[relay.Constant][37] /* ty=Tensor[(546, 2), float64] */, dtype="float64") /* ty=Tensor[(546, 2), float64] */;
  %573 = reshape(%572, newshape=[7, 12, 13]) /* ty=Tensor[(7, 12, 13), float64] */;
  %574 = @func_2182(%573) /* ty=(Tensor[(7, 12, 13), float64],) */;
  %575 = %574.0;
  %576 = cast(meta[relay.Constant][37] /* ty=Tensor[(546, 2), float64] */, dtype="bool") /* ty=Tensor[(546, 2), bool] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="bool") /* ty=Tensor[(7, 12, 13), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %581 = cast(meta[relay.Constant][38] /* ty=Tensor[(455), float32] */, dtype="float32") /* ty=Tensor[(455), float32] */;
  %582 = reshape(%581, newshape=[5, 7, 13]) /* ty=Tensor[(5, 7, 13), float32] */;
  %583 = @func_3012(%582) /* ty=(Tensor[(5, 7, 13), float32], Tensor[(3, 12, 11), float32], Tensor[(224), float32]) */;
  %584 = cast(meta[relay.Constant][39] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
  %585 = cast(meta[relay.Constant][39] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
  %586 = cast(%var_3962, dtype="bool") /* ty=Tensor[(264), bool] */;
  %587 = cast(%var_3963, dtype="float64") /* ty=Tensor[(180), float64] */;
  %588 = reshape(%584, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), int8] */;
  %589 = reshape(%585, newshape=[4, 13, 8]) /* ty=Tensor[(4, 13, 8), int8] */;
  %590 = reshape(%586, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %591 = reshape(%587, newshape=[3, 60]) /* ty=Tensor[(3, 60), float64] */;
  %592 = @func_3090(%588, %589, %590, %591) /* ty=(Tensor[(4, 13, 8), bool], Tensor[(4, 13, 8), float32], Tensor[(4, 13, 8), float32], Tensor[(2, 7, 3), float32], Tensor[(224), float32], Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool], Tensor[(637, 2), float64], Tensor[(4, 120), float32], uint16, Tensor[(3, 60), float64]) */;
  %593 = @func_2547() /* ty=Tensor[(2, 7, 3), float32] */;
  %594 = less_equal(%578, %579) /* ty=Tensor[(7, 12, 13), bool] */;
  %595 = %580.1;
  %596 = %583.1;
  %597 = %592.7;
  (%593, %594, %595, %596, meta[relay.Constant][38] /* ty=Tensor[(455), float32] */, %597, meta[relay.Constant][39] /* ty=Tensor[(416), int8] */, %var_3962, %var_3963)
}

def @func_5231(%var_5227: int32, %var_5228: Tensor[(15, 12, 13), int32], %var_5229: Tensor[(15, 12, 13), int32], %var_5230: Tensor[(15, 12, 13), float32]) -> (Tensor[(15, 12, 13), uint8], Tensor[(2, 7, 3), float32], Tensor[(15, 12, 13), float64]) {
  %618 = fn (%var_5169: int32, %var_5170: Tensor[(15, 12, 13), int32], %var_5181: Tensor[(15, 12, 13), int32], %var_5186: Tensor[(15, 12, 13), float32]) -> (Tensor[(15, 12, 13), uint8], Tensor[(2, 7, 3), float32], Tensor[(15, 12, 13), float64]) {
    %598 = cast(%var_5169, dtype="int32") /* ty=int32 */;
    %599 = cast(%var_5170, dtype="int32") /* ty=Tensor[(15, 12, 13), int32] */;
    %600 = bitwise_or(%598, %599) /* ty=Tensor[(15, 12, 13), int32] */;
    %601 = cast(%var_5181, dtype="float32") /* ty=Tensor[(15, 12, 13), float32] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
    %603 = cast(%600, dtype="float32") /* ty=Tensor[(15, 12, 13), float32] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %605 = power(%603, %604) /* ty=Tensor[(15, 12, 13), float32] */;
    %606 = cast(%var_5186, dtype="uint8") /* ty=Tensor[(15, 12, 13), uint8] */;
    %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%605, dtype="uint8") /* ty=Tensor[(15, 12, 13), uint8] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %610 = @func_3291() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) */;
    %611 = cast(%600, dtype="float64") /* ty=Tensor[(15, 12, 13), float64] */;
    %612 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
    %613 = cast(%605, dtype="float64") /* ty=Tensor[(15, 12, 13), float64] */;
    %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %615 = maximum(%608, %609) /* ty=Tensor[(15, 12, 13), uint8] */;
    %616 = %610.0;
    %617 = mod(%613, %614) /* ty=Tensor[(15, 12, 13), float64] */;
    (%615, %616, %617)
  };
  %618(%var_5227, %var_5228, %var_5229, %var_5230) /* ty=(Tensor[(15, 12, 13), uint8], Tensor[(2, 7, 3), float32], Tensor[(15, 12, 13), float64]) */
}

def @func_4732() -> Tensor[(2, 7, 3), float32] {
  @func_4730() /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_3154() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) {
  @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */
}

def @func_3275(%var_3256: Tensor[(2, 7, 3), int16]) -> (Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), uint8]) {
  %619 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %620 = %619.1;
  %621 = cast(%var_3256, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%620, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = cast(%620, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %626 = shape_of(%var_3256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %627 = cast(%var_3256, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %629 = logical_and(%623, %624) /* ty=Tensor[(2, 7, 3), bool] */;
  %630 = left_shift(%627, %628) /* ty=Tensor[(2, 7, 3), uint8] */;
  (%629, %630)
}

def @func_2104(%var_2103: Tensor[(4, 10, 5), float32]) -> (Tensor[(4, 10, 5), float32],) {
  %636 = fn (%var_2072: Tensor[(4, 10, 5), float32]) -> (Tensor[(4, 10, 5), float32],) {
    %631 = cast(meta[relay.Constant][40] /* ty=Tensor[(4, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(4, 10, 5), float32] */;
    %632 = shape_of(%var_2072, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%var_2072, dtype="float32") /* ty=Tensor[(4, 10, 5), float32] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %635 = subtract(%633, %634) /* ty=Tensor[(4, 10, 5), float32] */;
    (%635,)
  };
  %636(%var_2103) /* ty=(Tensor[(4, 10, 5), float32],) */
}

def @func_4403(%var_4397: Tensor[(24), float64]) -> (Tensor[(2, 7, 3), uint8], Tensor[(12, 2), float64], Tensor[(24), float64]) {
  %637 = @func_3782() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), int8]) */;
  %638 = %637.2;
  %639 = cast(meta[relay.Constant][41] /* ty=Tensor[(2, 7, 3), int8] */, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="uint8") /* ty=Tensor[(2, 7, 3), uint8] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %643 = cast(%var_4397, dtype="float64") /* ty=Tensor[(24), float64] */;
  %644 = reshape(%643, newshape=[12, 2]) /* ty=Tensor[(12, 2), float64] */;
  %645 = @func_3862(%644) /* ty=(Tensor[(12, 2), float64],) */;
  %646 = maximum(%641, %642) /* ty=Tensor[(2, 7, 3), uint8] */;
  %647 = %645.0;
  (%646, %647, %var_4397)
}

def @func_3278(%var_3276: Tensor[(2, 7, 3), int16]) -> (Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), uint8]) {
  @func_3275(%var_3276) /* ty=(Tensor[(2, 7, 3), bool], Tensor[(2, 7, 3), uint8]) */
}

def @func_2185(%var_2183: Tensor[(7, 12, 13), float64]) -> (Tensor[(7, 12, 13), float64],) {
  @func_2182(%var_2183) /* ty=(Tensor[(7, 12, 13), float64],) */
}

def @func_3842() -> (Tensor[(2, 7, 3), float64], Tensor[(2, 7, 3), float32]) {
  %648 = @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */;
  %649 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %650 = %648.1;
  %651 = %649.2;
  (%650, %651)
}

def @func_5537() -> Tensor[(2, 7, 3), float32] {
  %652 = @func_2532() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %652.0
}

def @func_4370(%var_4368: Tensor[(3, 7, 12), float32]) -> (Tensor[(3, 7, 12), float32], Tensor[(7, 8, 12), float64], Tensor[(672), float64]) {
  @func_4367(%var_4368) /* ty=(Tensor[(3, 7, 12), float32], Tensor[(7, 8, 12), float64], Tensor[(672), float64]) */
}

def @func_3430(%var_3428: Tensor[(2, 7, 3), float32], %var_3429: Tensor[(143), uint8]) -> (Tensor[(2, 7, 3), bool], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1, 1430), uint8], Tensor[(2, 7, 3), uint64]) {
  @func_3426(%var_3428, %var_3429) /* ty=(Tensor[(2, 7, 3), bool], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1, 1430), uint8], Tensor[(2, 7, 3), uint64]) */
}

def @func_3426(%var_3372: Tensor[(2, 7, 3), float32], %var_3378: Tensor[(143), uint8]) -> (Tensor[(2, 7, 3), bool], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1, 1430), uint8], Tensor[(2, 7, 3), uint64]) {
  %653 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
  %654 = %653.0;
  %655 = cast(%var_3372, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %656 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %657 = cast(%654, dtype="bool") /* ty=Tensor[(2, 7, 3), bool] */;
  %658 = dyn.reshape(%655, %656, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %659 = cast(%var_3378, dtype="uint8") /* ty=Tensor[(143), uint8] */;
  %660 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 1430), uint8] */, dtype="uint8") /* ty=Tensor[(1, 1430), uint8] */;
  %661 = reshape(%659, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), uint8] */;
  %662 = reshape(%660, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint8] */;
  %663 = cast(%var_3372, dtype="uint64") /* ty=Tensor[(2, 7, 3), uint64] */;
  %664 = shape_of(%654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %665 = cast(%654, dtype="uint64") /* ty=Tensor[(2, 7, 3), uint64] */;
  %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %667 = greater_equal(%657, %658) /* ty=Tensor[(2, 7, 3), bool] */;
  %668 = @func_1020(%661, %662) /* ty=Tensor[(10, 13, 11), uint8] */;
  %669 = bitwise_and(%665, %666) /* ty=Tensor[(2, 7, 3), uint64] */;
  (%667, %668, %var_3378, meta[relay.Constant][42] /* ty=Tensor[(1, 1430), uint8] */, %669)
}

def @func_3187() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) {
  %681 = fn () -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) {
    %670 = @func_3152() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float64]) */;
    %671 = @func_2913() /* ty=Tensor[(2, 7, 3), float32] */;
    %672 = @func_2521() /* ty=Tensor[(2, 7, 3), float32] */;
    %673 = cast(%672, dtype="int16") /* ty=Tensor[(2, 7, 3), int16] */;
    %674 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%671, dtype="int16") /* ty=Tensor[(2, 7, 3), int16] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %677 = @func_2230() /* ty=(Tensor[(2, 7, 3), float32],) */;
    %678 = %670.0;
    %679 = minimum(%675, %676) /* ty=Tensor[(2, 7, 3), int16] */;
    %680 = %677.0;
    (%678, %679, %680)
  };
  %681() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */
}

def @func_1893(%var_1889: Tensor[(3, 16, 3), uint16], %var_1890: Tensor[(3, 16, 3), uint16], %var_1891: Tensor[(3, 16, 3), bool], %var_1892: Tensor[(143), uint8]) -> (Tensor[(3, 16, 3), bool], Tensor[(3, 16, 3), float64], Tensor[(3, 16, 3), int64], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1430), uint8], Tensor[(14, 12, 16), int32], Tensor[(2688), int32]) {
  %720 = fn (%var_1819: Tensor[(3, 16, 3), uint16], %var_1820: Tensor[(3, 16, 3), uint16], %var_1825: Tensor[(3, 16, 3), bool], %var_1872: Tensor[(143), uint8]) -> (Tensor[(3, 16, 3), bool], Tensor[(3, 16, 3), float64], Tensor[(3, 16, 3), int64], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1430), uint8], Tensor[(14, 12, 16), int32], Tensor[(2688), int32]) {
    %682 = cast(%var_1820, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %683 = shape_of(%var_1819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %684 = cast(%var_1819, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %686 = less(%684, %685) /* ty=Tensor[(3, 16, 3), bool] */;
    %687 = cast(%var_1825, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
    %688 = shape_of(%686, dtype="int32") /* ty=Tensor[(3), int32] */;
    %689 = cast(%686, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
    %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %691 = left_shift(%689, %690) /* ty=Tensor[(3, 16, 3), int32] */;
    %692 = cast(%691, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
    %693 = sin(%692) /* ty=Tensor[(3, 16, 3), float64] */;
    %694 = cast(%686, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %695 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%693, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %698 = cast(%var_1820, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
    %699 = shape_of(%693, dtype="int32") /* ty=Tensor[(3), int32] */;
    %700 = cast(%693, dtype="float64") /* ty=Tensor[(3, 16, 3), float64] */;
    %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %702 = cast(%686, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
    %703 = shape_of(%var_1819, dtype="int32") /* ty=Tensor[(3), int32] */;
    %704 = cast(%var_1819, dtype="int64") /* ty=Tensor[(3, 16, 3), int64] */;
    %705 = dyn.reshape(%702, %703, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %706 = cast(%var_1872, dtype="uint8") /* ty=Tensor[(143), uint8] */;
    %707 = cast(meta[relay.Constant][43] /* ty=Tensor[(1430), uint8] */, dtype="uint8") /* ty=Tensor[(1430), uint8] */;
    %708 = reshape(%706, newshape=[1, 13, 11]) /* ty=Tensor[(1, 13, 11), uint8] */;
    %709 = reshape(%707, newshape=[10, 13, 11]) /* ty=Tensor[(10, 13, 11), uint8] */;
    %710 = cast(meta[relay.Constant][44] /* ty=Tensor[(2688), int32] */, dtype="int32") /* ty=Tensor[(2688), int32] */;
    %711 = cast(meta[relay.Constant][44] /* ty=Tensor[(2688), int32] */, dtype="int32") /* ty=Tensor[(2688), int32] */;
    %712 = reshape(%710, newshape=[14, 12, 16]) /* ty=Tensor[(14, 12, 16), int32] */;
    %713 = reshape(%711, newshape=[14, 12, 16]) /* ty=Tensor[(14, 12, 16), int32] */;
    %714 = @func_657(%712, %713) /* ty=(Tensor[(14, 12, 16), int32],) */;
    %715 = less_equal(%696, %697) /* ty=Tensor[(3, 16, 3), bool] */;
    %716 = divide(%700, %701) /* ty=Tensor[(3, 16, 3), float64] */;
    %717 = maximum(%704, %705) /* ty=Tensor[(3, 16, 3), int64] */;
    %718 = @func_1020(%708, %709) /* ty=Tensor[(10, 13, 11), uint8] */;
    %719 = %714.0;
    (%715, %716, %717, %718, %var_1872, meta[relay.Constant][43] /* ty=Tensor[(1430), uint8] */, %719, meta[relay.Constant][44] /* ty=Tensor[(2688), int32] */)
  };
  %720(%var_1889, %var_1890, %var_1891, %var_1892) /* ty=(Tensor[(3, 16, 3), bool], Tensor[(3, 16, 3), float64], Tensor[(3, 16, 3), int64], Tensor[(10, 13, 11), uint8], Tensor[(143), uint8], Tensor[(1430), uint8], Tensor[(14, 12, 16), int32], Tensor[(2688), int32]) */
}

def @func_4716() -> (Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) {
  @func_4714() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), float32]) */
}

def @func_2642(%var_2605: Tensor[(15, 2, 16), float32], %var_2615: Tensor[(637, 2), float64], %var_2622: uint16, %var_2624: Tensor[(6, 30), float64]) -> (Tensor[(15, 2, 16), uint64], Tensor[(7, 14, 13), float64], Tensor[(637, 2), float64], uint16, uint16, Tensor[(24, 6), uint16], Tensor[(6, 30), float64], Tensor[(18, 100), uint64]) {
  %721 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %722 = shape_of(%var_2605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_2605, dtype="float32") /* ty=Tensor[(15, 2, 16), float32] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %725 = multiply(%723, %724) /* ty=Tensor[(15, 2, 16), float32] */;
  %726 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 2, 16), float32] */, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
  %728 = cast(%725, dtype="uint64") /* ty=Tensor[(15, 2, 16), uint64] */;
  %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %730 = cast(%var_2615, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %731 = cast(%var_2615, dtype="float64") /* ty=Tensor[(637, 2), float64] */;
  %732 = reshape(%730, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %733 = reshape(%731, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), float64] */;
  %734 = @func_1003(%732, %733) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float32], Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32]) */;
  %735 = cast(%var_2622, dtype="uint16") /* ty=uint16 */;
  %736 = cast(meta[relay.Constant][46] /* ty=Tensor[(24, 6), uint16] */, dtype="uint16") /* ty=Tensor[(24, 6), uint16] */;
  %737 = cast(%var_2624, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %738 = cast(%var_2624, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %739 = cast(meta[relay.Constant][47] /* ty=Tensor[(18, 100), uint64] */, dtype="uint64") /* ty=Tensor[(18, 100), uint64] */;
  %740 = reshape(%735, newshape=[]) /* ty=uint16 */;
  %741 = reshape(%736, newshape=[2, 72]) /* ty=Tensor[(2, 72), uint16] */;
  %742 = reshape(%737, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %743 = reshape(%738, newshape=[2, 9, 10]) /* ty=Tensor[(2, 9, 10), float64] */;
  %744 = reshape(%739, newshape=[1800]) /* ty=Tensor[(1800), uint64] */;
  %745 = @func_1990(%740, %741, %742, %743, %744) /* ty=(Tensor[(3, 12, 11), float32], uint16, uint16, Tensor[(3150), float64], Tensor[(2688), int32], Tensor[(2, 72), uint16], Tensor[(143), uint8], Tensor[(2, 9, 10), float64], Tensor[(2, 9, 10), float64], Tensor[(416), float64], Tensor[(1200), float32], Tensor[(1800), uint64]) */;
  %746 = bitwise_xor(%728, %729) /* ty=Tensor[(15, 2, 16), uint64] */;
  %747 = %734.0;
  %748 = %745.2;
  (%746, %747, %var_2615, %748, %var_2622, meta[relay.Constant][46] /* ty=Tensor[(24, 6), uint16] */, %var_2624, meta[relay.Constant][47] /* ty=Tensor[(18, 100), uint64] */)
}

def @func_551(%var_547: Tensor[(10, 15, 12), uint64]) -> (Tensor[(10, 15, 12), uint64],) {
  %749 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %750 = cast(%var_547, dtype="uint64") /* ty=Tensor[(10, 15, 12), uint64] */;
  %751 = right_shift(%749, %750) /* ty=Tensor[(10, 15, 12), uint64] */;
  (%751,)
}

def @func_211(%var_209: Tensor[(8, 4, 13), float64], %var_210: Tensor[(8, 4, 13), float64]) -> (Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) {
  %774 = fn (%var_162: Tensor[(8, 4, 13), float64], %var_194: Tensor[(8, 4, 13), float64]) -> (Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) {
    %752 = cast(%var_162, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
    %753 = tan(%752) /* ty=Tensor[(8, 4, 13), float64] */;
    %754 = cast(%var_162, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
    %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
    %756 = cast(%753, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
    %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %758 = equal(%756, %757) /* ty=Tensor[(8, 4, 13), bool] */;
    %759 = cast(%var_162, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
    %760 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %761 = cast(%758, dtype="bool") /* ty=Tensor[(8, 4, 13), bool] */;
    %762 = dyn.reshape(%759, %760, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %763 = cast(%var_194, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
    %764 = shape_of(%var_162, dtype="int32") /* ty=Tensor[(3), int32] */;
    %765 = cast(%var_162, dtype="float32") /* ty=Tensor[(8, 4, 13), float32] */;
    %766 = dyn.reshape(%763, %764, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %767 = floor_divide(%765, %766) /* ty=Tensor[(8, 4, 13), float32] */;
    %768 = cast(%767, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
    %769 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
    %770 = cast(%758, dtype="float64") /* ty=Tensor[(8, 4, 13), float64] */;
    %771 = dyn.reshape(%768, %769, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %772 = not_equal(%761, %762) /* ty=Tensor[(8, 4, 13), bool] */;
    %773 = floor_mod(%770, %771) /* ty=Tensor[(8, 4, 13), float64] */;
    (%772, %773)
  };
  %774(%var_209, %var_210) /* ty=(Tensor[(8, 4, 13), bool], Tensor[(8, 4, 13), float64]) */
}

def @func_3331(%var_3329: Tensor[(2, 7, 3), float32]) -> Tensor[(2, 7, 3), float32] {
  @func_3328(%var_3329) /* ty=Tensor[(2, 7, 3), float32] */
}

def @func_3455(%var_3451: Tensor[(264), bool]) -> (Tensor[(2, 7, 3), int16], Tensor[(264), bool], Tensor[(264), bool]) {
  %775 = @func_3186() /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 7, 3), int16], Tensor[(2, 7, 3), float32]) */;
  %776 = cast(%var_3451, dtype="bool") /* ty=Tensor[(264), bool] */;
  %777 = reshape(%776, newshape=[264]) /* ty=Tensor[(264), bool] */;
  %778 = @func_2813(%777) /* ty=(Tensor[(2, 7, 3), float32], Tensor[(2, 12, 11), float64], Tensor[(264), bool]) */;
  %779 = %775.1;
  %780 = %778.2;
  (%779, %780, %var_3451)
}

def @func_554(%var_552: Tensor[(10, 15, 12), uint64]) -> (Tensor[(10, 15, 12), uint64],) {
  @func_551(%var_552) /* ty=(Tensor[(10, 15, 12), uint64],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen86/build/output.py:1676: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen86/build/output.py", line 1681, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(864) tvmgen_default_fused_erf_kernel0(double* __restrict__ T_erf, double* __restrict__ placeholder) {
  T_erf[(((int)threadIdx.x))] = erf(placeholder[(((int)threadIdx.x))]);
}

extern "C" __global__ void __launch_bounds__(864) tvmgen_default_fused_cast_asinh_cast_cast_reshape_logical_xor_kernel0(uint64_t* __restrict__ T_logical_xor, double* __restrict__ placeholder) {
  T_logical_xor[(((int)threadIdx.x))] = (((uint64_t)asinhf(((float)placeholder[(((int)threadIdx.x))]))) ^ ((uint64_t)placeholder[(((int)threadIdx.x))]));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

