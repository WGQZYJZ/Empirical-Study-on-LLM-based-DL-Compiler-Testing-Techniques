==========mod==========
#[version = "0.0.5"]
def @func_3583(%var_3572: Tensor[(121), float64]) -> Tensor[(121), float64] {
  %0 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %1 = %0.0;
  %2 = cast(%var_3572, dtype="float64") /* ty=Tensor[(121), float64] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(1), int32] */;
  %4 = cast(%1, dtype="float64") /* ty=Tensor[(121), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?), float64] */;
  divide(%4, %5) /* ty=Tensor[(121), float64] */
}

def @func_6025() -> (Tensor[(4, 5, 9), float64], Tensor[(121), int32], Tensor[(11, 11), float64]) {
  %6 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(11, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
  %8 = reshape(%7, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %9 = @func_4160(%8) /* ty=(Tensor[(121), int32],) */;
  %10 = %6.0;
  %11 = %9.0;
  (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(11, 11), float64] */)
}

def @func_3130(%var_3079: Tensor[(121), float64]) -> (Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) {
  %12 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %13 = cast(%var_3079, dtype="float64") /* ty=Tensor[(121), float64] */;
  %14 = reshape(%13, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %15 = @func_2638(%14) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %16 = cast(%var_3079, dtype="float64") /* ty=Tensor[(121), float64] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %18 = reshape(%16, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %19 = reshape(%17, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %20 = %12.1;
  %21 = %15.0;
  %22 = @func_689(%18, %19) /* ty=Tensor[(11, 11, 11), float64] */;
  (%20, %21, %var_3079, %22, meta[relay.Constant][1] /* ty=Tensor[(1331), float64] */)
}

def @func_4431(%var_4412: Tensor[(4, 2, 5), uint32]) -> (Tensor[(4, 2, 5), uint64], Tensor[(4, 2, 5), float32]) {
  %23 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 2, 1), uint32] */, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
  %24 = cast(%var_4412, dtype="bool") /* ty=Tensor[(4, 2, 5), bool] */;
  %25 = not_equal(%23, %24) /* ty=Tensor[(4, 2, 5), bool] */;
  %26 = cast(%var_4412, dtype="uint64") /* ty=Tensor[(4, 2, 5), uint64] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="uint64") /* ty=Tensor[(4, 2, 5), uint64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %30 = cast(%25, dtype="float64") /* ty=Tensor[(4, 2, 5), float64] */;
  %31 = erf(%30) /* ty=Tensor[(4, 2, 5), float64] */;
  %32 = cast(%31, dtype="float32") /* ty=Tensor[(4, 2, 5), float32] */;
  %33 = bitwise_or(%28, %29) /* ty=Tensor[(4, 2, 5), uint64] */;
  %34 = sqrt(%32) /* ty=Tensor[(4, 2, 5), float32] */;
  (%33, %34)
}

def @func_6133() -> (Tensor[(121), bool], Tensor[(121), float32]) {
  %35 = @func_5236() /* ty=(int16, Tensor[(121), float64]) */;
  %36 = %35.1;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(121), float64] */;
  %38 = acos(%37) /* ty=Tensor[(121), float64] */;
  %39 = cast(%38, dtype="bool") /* ty=Tensor[(121), bool] */;
  %40 = shape_of(%36, dtype="int32") /* ty=Tensor[(1), int32] */;
  %41 = cast(%36, dtype="bool") /* ty=Tensor[(121), bool] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?), bool] */;
  %43 = cast(%36, dtype="float32") /* ty=Tensor[(121), float32] */;
  %44 = shape_of(%38, dtype="int32") /* ty=Tensor[(1), int32] */;
  %45 = cast(%38, dtype="float32") /* ty=Tensor[(121), float32] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?), float32] */;
  %47 = less_equal(%41, %42) /* ty=Tensor[(121), bool] */;
  %48 = minimum(%45, %46) /* ty=Tensor[(121), float32] */;
  (%47, %48)
}

def @func_3036() -> (Tensor[(4, 5, 9), float32],) {
  %49 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %50 = %49.0;
  (%50,)
}

def @func_3241(%var_3216: Tensor[(10, 13, 13), int16]) -> (Tensor[(10, 13, 13), int16], Tensor[(4, 5, 9), float64], Tensor[(10, 13, 13), float64]) {
  %51 = cast(%var_3216, dtype="int16") /* ty=Tensor[(10, 13, 13), int16] */;
  %52 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(10, 13, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 13, 13), int16] */, dtype="int16") /* ty=Tensor[(10, 13, 13), int16] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %55 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(10, 13, 13), int16] */, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %57 = bitwise_or(%53, %54) /* ty=Tensor[(10, 13, 13), int16] */;
  %58 = %55.0;
  %59 = sigmoid(%56) /* ty=Tensor[(10, 13, 13), float64] */;
  (%57, %58, %59)
}

def @func_2333(%var_2307: Tensor[(4, 5, 9), float32], %var_2314: float64) -> (Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) {
  %60 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %61 = cast(%var_2307, dtype="int64") /* ty=Tensor[(4, 5, 9), int64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="int64") /* ty=Tensor[(4, 5, 9), int64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %65 = cast(%var_2314, dtype="float64") /* ty=float64 */;
  %66 = reshape(%65, newshape=[]) /* ty=float64 */;
  %67 = @func_1061(%66) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */;
  %68 = left_shift(%63, %64) /* ty=Tensor[(4, 5, 9), int64] */;
  %69 = %67.1;
  (%68, %69, %var_2314)
}

def @func_5401(%var_5392: Tensor[(40), uint32]) -> (Tensor[(16, 9, 16), float32], Tensor[(4, 2, 5), uint64], Tensor[(40), uint32]) {
  %70 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %71 = cast(%var_5392, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %72 = reshape(%71, newshape=[4, 2, 5]) /* ty=Tensor[(4, 2, 5), uint32] */;
  %73 = @func_4431(%72) /* ty=(Tensor[(4, 2, 5), uint64], Tensor[(4, 2, 5), float32]) */;
  %74 = log(%70) /* ty=Tensor[(16, 9, 16), float32] */;
  %75 = %73.0;
  (%74, %75, %var_5392)
}

def @func_5344() -> (Tensor[(4, 5, 9), float32],) {
  %76 = @func_5154() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %77 = %76.0;
  (%77,)
}

def @func_6487() -> (Tensor[(9, 9, 5), float32],) {
  %78 = @func_5790() /* ty=(Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) */;
  %79 = %78.0;
  (%79,)
}

def @func_5790() -> (Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) {
  %80 = @func_5254() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) */;
  %81 = @func_3931() /* ty=Tensor[(9, 9, 5), float32] */;
  %82 = %80.0;
  (%81, %82)
}

def @func_4253(%var_4196: Tensor[(4, 5, 9), float32], %var_4209: float64) -> (Tensor[(4, 5, 9), int16], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), int64], float64, Tensor[(4, 5, 9), float32]) {
  %83 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  %84 = cast(%var_4196, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
  %85 = shape_of(%83, dtype="int32") /* ty=Tensor[(3), int32] */;
  %86 = cast(%83, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %88 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %89 = cast(%var_4196, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %90 = cast(%var_4209, dtype="float64") /* ty=float64 */;
  %91 = reshape(%89, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %92 = reshape(%90, newshape=[]) /* ty=float64 */;
  %93 = @func_2333(%91, %92) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %94 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %95 = cast(%94, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %96 = bitwise_xor(%86, %87) /* ty=Tensor[(4, 5, 9), int16] */;
  %97 = %88.1;
  %98 = %93.0;
  %99 = atanh(%95) /* ty=Tensor[(4, 5, 9), float32] */;
  (%96, %97, %98, %var_4209, %99)
}

def @func_6757(%var_6746: Tensor[(4, 5, 9), float32]) -> Tensor[(4, 5, 9), bool] {
  %100 = @func_6499() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %101 = %100.0;
  %102 = cast(%var_6746, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%104, %105) /* ty=Tensor[(4, 5, 9), bool] */
}

def @func_3019(%var_3015: Tensor[(121), float64]) -> (Tensor[(11, 11, 11), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32], Tensor[(121), bool], Tensor[(121), float64]) {
  %106 = @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */;
  %107 = cast(meta[relay.Constant][5] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %108 = reshape(%107, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float32] */;
  %109 = @func_1432(%108) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */;
  %110 = cast(%var_3015, dtype="float64") /* ty=Tensor[(121), float64] */;
  %111 = reshape(%110, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %112 = %106.1;
  %113 = %109.1;
  %114 = @func_2719(%111) /* ty=Tensor[(121), bool] */;
  (%112, %113, meta[relay.Constant][5] /* ty=Tensor[(150), float32] */, %114, %var_3015)
}

def @func_4060(%var_4051: Tensor[(15, 9, 4), int8], %var_4052: Tensor[(15, 9, 4), int8]) -> Tensor[(15, 9, 4), bool] {
  %115 = cast(%var_4052, dtype="bool") /* ty=Tensor[(15, 9, 4), bool] */;
  %116 = shape_of(%var_4051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %117 = cast(%var_4051, dtype="bool") /* ty=Tensor[(15, 9, 4), bool] */;
  %118 = dyn.reshape(%115, %116, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%117, %118) /* ty=Tensor[(15, 9, 4), bool] */
}

def @func_2638(%var_2621: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) {
  %119 = cast(%var_2621, dtype="float64") /* ty=Tensor[(121), float64] */;
  %120 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 1331), float64] */, dtype="float64") /* ty=Tensor[(1, 1331), float64] */;
  %121 = reshape(%119, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %122 = reshape(%120, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %123 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %124 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %125 = @func_689(%121, %122) /* ty=Tensor[(11, 11, 11), float64] */;
  %126 = %123.2;
  %127 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  (%124, %125, %var_2621, meta[relay.Constant][6] /* ty=Tensor[(1, 1331), float64] */, %126, %127)
}

def @func_4323(%var_4308: Tensor[(11, 11), float64]) -> (Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) {
  %128 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
  %129 = %128.0;
  %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(1331), float64] */, dtype="int64") /* ty=Tensor[(1331), int64] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(1), int32] */;
  %132 = cast(%129, dtype="int64") /* ty=Tensor[(1331), int64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), int64] */;
  %134 = cast(%var_4308, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
  %135 = reshape(%134, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %136 = @func_3130(%135) /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) */;
  %137 = cast(meta[relay.Constant][7] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %138 = bitwise_or(%132, %133) /* ty=Tensor[(1331), int64] */;
  %139 = %136.3;
  %140 = atan(%137) /* ty=Tensor[(1331), float64] */;
  %141 = @func_3839() /* ty=Tensor[(1331), float64] */;
  (%138, %139, %var_4308, %140, %141)
}

def @func_7074() -> Tensor[(4, 5, 9), float32] {
  @func_3988() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_2719(%var_2701: Tensor[(121), float64]) -> Tensor[(121), bool] {
  %142 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %143 = %142.0;
  %144 = cast(%var_2701, dtype="bool") /* ty=Tensor[(121), bool] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(1), int32] */;
  %146 = cast(%143, dtype="bool") /* ty=Tensor[(121), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater(%146, %147) /* ty=Tensor[(121), bool] */
}

def @func_3988() -> Tensor[(4, 5, 9), float32] {
  @func_2246() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_4027() -> Tensor[(121), float64] {
  %148 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %148.0
}

def @func_3683() -> (Tensor[(1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) {
  %149 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
  %150 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %151 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %154 = %149.0;
  %155 = %150.1;
  %156 = asinh(%153) /* ty=Tensor[(4, 5, 9), float32] */;
  (%154, %155, %156)
}

def @func_3364(%var_3332: Tensor[(648), uint64], %var_3333: Tensor[(121), float64]) -> (Tensor[(150), float32], Tensor[(4, 5, 9), int16], Tensor[(150), float32], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(9, 6, 12), uint64], Tensor[(15, 5, 2), float32]) {
  %157 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %158 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %159 = cast(%158, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
  %160 = shape_of(%157, dtype="int32") /* ty=Tensor[(3), int32] */;
  %161 = cast(%157, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
  %162 = dyn.reshape(%159, %160, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %163 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %164 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %165 = cast(%var_3333, dtype="float64") /* ty=Tensor[(121), float64] */;
  %166 = reshape(%163, newshape=[]) /* ty=uint64 */;
  %167 = reshape(%164, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %168 = reshape(%165, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %169 = @func_2836(%166, %167, %168) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %170 = @func_3036() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %171 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %172 = cast(meta[relay.Constant][9] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %173 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %174 = cast(%var_3333, dtype="float64") /* ty=Tensor[(121), float64] */;
  %175 = reshape(%172, newshape=[]) /* ty=uint64 */;
  %176 = reshape(%173, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %177 = reshape(%174, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %178 = @func_2836(%175, %176, %177) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %179 = cast(meta[relay.Constant][8] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %180 = reshape(%179, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float32] */;
  %181 = @func_1432(%180) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(15, 5, 2), float32] */;
  %184 = minimum(%161, %162) /* ty=Tensor[(4, 5, 9), int16] */;
  %185 = %169.4;
  %186 = %170.0;
  %187 = %171.2;
  %188 = %178.0;
  %189 = sinh(%183) /* ty=Tensor[(15, 5, 2), float32] */;
  (meta[relay.Constant][8] /* ty=Tensor[(150), float32] */, %184, %185, meta[relay.Constant][9] /* ty=uint64 */, %var_3332, %var_3333, %186, %187, %188, %189)
}

def @func_6499() -> (Tensor[(4, 5, 9), float32],) {
  %190 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %191 = %190.0;
  (%191,)
}

def @func_2460() -> (Tensor[(4, 5, 9), float32],) {
  %192 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  (%192,)
}

def @func_2836(%var_2823: uint64, %var_2824: Tensor[(9, 6, 12), uint64], %var_2830: Tensor[(1, 121), float64]) -> (Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) {
  %193 = cast(%var_2823, dtype="uint64") /* ty=uint64 */;
  %194 = cast(%var_2824, dtype="uint64") /* ty=Tensor[(9, 6, 12), uint64] */;
  %195 = cast(%var_2830, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %196 = reshape(%195, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %197 = cast(meta[relay.Constant][10] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %198 = reshape(%197, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float32] */;
  %199 = @func_1432(%198) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */;
  %200 = right_shift(%193, %194) /* ty=Tensor[(9, 6, 12), uint64] */;
  %201 = @func_2719(%196) /* ty=Tensor[(121), bool] */;
  %202 = %199.1;
  (%200, %201, %var_2830, %202, meta[relay.Constant][10] /* ty=Tensor[(150), float32] */)
}

def @func_6308(%var_6269: Tensor[(240), float32], %var_6303: Tensor[(480), int32]) -> (Tensor[(4, 5, 9), bool], Tensor[(240), float32], Tensor[(1331), float64], Tensor[(4, 5, 9), float32], Tensor[(15, 2, 8), int16], Tensor[(15, 2, 8), float32], Tensor[(15, 4, 8), int32], Tensor[(480), int32]) {
  %203 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %204 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
  %205 = @func_4760() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121), float64]) */;
  %206 = cast(%var_6269, dtype="float32") /* ty=Tensor[(240), float32] */;
  %207 = reshape(%206, newshape=[15, 2, 8]) /* ty=Tensor[(15, 2, 8), float32] */;
  %208 = @func_1814(%207) /* ty=(Tensor[(15, 2, 8), float32], Tensor[(15, 2, 8), float64]) */;
  %209 = %208.1;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(15, 2, 8), float32] */;
  %211 = erf(%210) /* ty=Tensor[(15, 2, 8), float32] */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 2, 8), float32] */, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
  %213 = shape_of(%211, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%211, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %216 = cast(%211, dtype="float32") /* ty=Tensor[(15, 2, 8), float32] */;
  %217 = cast(%var_6303, dtype="int32") /* ty=Tensor[(480), int32] */;
  %218 = reshape(%217, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), int32] */;
  %219 = @func_4076(%218) /* ty=(Tensor[(15, 4, 8), int32],) */;
  %220 = %203.1;
  %221 = %204.0;
  %222 = %205.0;
  %223 = bitwise_or(%214, %215) /* ty=Tensor[(15, 2, 8), int16] */;
  %224 = log10(%216) /* ty=Tensor[(15, 2, 8), float32] */;
  %225 = %219.0;
  (%220, %var_6269, %221, %222, %223, %224, %225, %var_6303)
}

def @func_3461(%var_3411: Tensor[(121), float64]) -> (Tensor[(121), bool], Tensor[(121), float32]) {
  %226 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %227 = %226.3;
  %228 = cast(meta[relay.Constant][12] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(1), int32] */;
  %230 = cast(%227, dtype="float64") /* ty=Tensor[(121), float64] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?), float64] */;
  %232 = floor_divide(%230, %231) /* ty=Tensor[(121), float64] */;
  %233 = cast(%232, dtype="bool") /* ty=Tensor[(121), bool] */;
  %234 = shape_of(%227, dtype="int32") /* ty=Tensor[(1), int32] */;
  %235 = cast(%227, dtype="bool") /* ty=Tensor[(121), bool] */;
  %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?), bool] */;
  %237 = cast(%var_3411, dtype="float32") /* ty=Tensor[(121), float32] */;
  %238 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(121), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(121), float64] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?), float32] */;
  %241 = less(%235, %236) /* ty=Tensor[(121), bool] */;
  %242 = mod(%239, %240) /* ty=Tensor[(121), float32] */;
  (%241, %242)
}

def @func_4371() -> Tensor[(11, 11, 11), float64] {
  %243 = @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */;
  %243.1
}

def @func_2392() -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) {
  %244 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 121), float64] */, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %245 = cast(meta[relay.Constant][14] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %246 = reshape(%244, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %247 = reshape(%245, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %248 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %249 = @func_689(%246, %247) /* ty=Tensor[(11, 11, 11), float64] */;
  %250 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  (%248, %249, meta[relay.Constant][13] /* ty=Tensor[(1, 121), float64] */, meta[relay.Constant][14] /* ty=Tensor[(1331), float64] */, %250)
}

def @func_3866() -> (Tensor[(1, 9, 6), float64],) {
  %251 = @func_3824() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */;
  %252 = %251.1;
  (%252,)
}

def @func_2658() -> (Tensor[(121), float64],) {
  %253 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %254 = %253.3;
  (%254,)
}

def @func_4949() -> (Tensor[(4, 5, 9), float32],) {
  %255 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  (%255,)
}

def @func_5054() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) {
  %256 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 121), float64] */, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %257 = reshape(%256, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %258 = @func_2719(%257) /* ty=Tensor[(121), bool] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(121), float32] */;
  %260 = asin(%259) /* ty=Tensor[(121), float32] */;
  %261 = cast(%258, dtype="int8") /* ty=Tensor[(121), int8] */;
  %262 = shape_of(%260, dtype="int32") /* ty=Tensor[(1), int32] */;
  %263 = cast(%260, dtype="int8") /* ty=Tensor[(121), int8] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?), int8] */;
  %265 = subtract(%263, %264) /* ty=Tensor[(121), int8] */;
  %266 = cast(%265, dtype="float64") /* ty=Tensor[(121), float64] */;
  %267 = @func_4448() /* ty=(Tensor[(1331), float64],) */;
  %268 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  %269 = atanh(%266) /* ty=Tensor[(121), float64] */;
  %270 = %267.0;
  (%268, meta[relay.Constant][15] /* ty=Tensor[(1, 121), float64] */, %269, %270)
}

def @func_6356() -> (Tensor[(4, 5, 9), float32],) {
  %271 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %272 = %271.0;
  (%272,)
}

def @func_3191() -> (Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) {
  %273 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %274 = cast(%273, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %275 = cast(meta[relay.Constant][16] /* ty=Tensor[(121, 1), float64] */, dtype="float64") /* ty=Tensor[(121, 1), float64] */;
  %276 = reshape(%275, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %277 = @func_3130(%276) /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) */;
  %278 = log10(%274) /* ty=Tensor[(4, 5, 9), float64] */;
  %279 = %277.3;
  (%278, %279, meta[relay.Constant][16] /* ty=Tensor[(121, 1), float64] */)
}

def @func_4875() -> Tensor[(1331), float64] {
  @func_3839() /* ty=Tensor[(1331), float64] */
}

def @func_5373(%var_5354: Tensor[(7, 2, 10), float64]) -> (Tensor[(7, 2, 10), float64], Tensor[(4, 5, 9), float32]) {
  %280 = cast(%var_5354, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
  %281 = asin(%280) /* ty=Tensor[(7, 2, 10), float64] */;
  %282 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  (%281, %282)
}

def @func_3211(%var_3204: float64) -> (Tensor[(1, 9, 6), float64], float64, Tensor[(1, 180), float32], float64) {
  %283 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %284 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 180), float32] */, dtype="float32") /* ty=Tensor[(1, 180), float32] */;
  %285 = cast(%var_3204, dtype="float64") /* ty=float64 */;
  %286 = reshape(%284, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %287 = reshape(%285, newshape=[]) /* ty=float64 */;
  %288 = @func_2333(%286, %287) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %289 = %283.1;
  %290 = %288.2;
  (%289, %290, meta[relay.Constant][17] /* ty=Tensor[(1, 180), float32] */, %var_3204)
}

def @func_2905() -> (Tensor[(1331), float64],) {
  %291 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %292 = %291.4;
  (%292,)
}

def @func_5979(%var_5961: Tensor[(15, 10, 9), int16], %var_5962: Tensor[(15, 10, 9), int16], %var_5967: Tensor[(15, 10, 9), bool], %var_5974: uint64, %var_5976: Tensor[(121), float64]) -> (Tensor[(15, 10, 9), bool], Tensor[(15, 10, 9), float64], Tensor[(121), bool], uint64, Tensor[(648), uint64], Tensor[(121), float64]) {
  %293 = cast(%var_5962, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %294 = shape_of(%var_5961, dtype="int32") /* ty=Tensor[(3), int32] */;
  %295 = cast(%var_5961, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %297 = greater_equal(%295, %296) /* ty=Tensor[(15, 10, 9), bool] */;
  %298 = cast(%var_5967, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %299 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%297, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = cast(%var_5962, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
  %303 = cast(%var_5974, dtype="uint64") /* ty=uint64 */;
  %304 = cast(meta[relay.Constant][18] /* ty=Tensor[(648), uint64] */, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %305 = cast(%var_5976, dtype="float64") /* ty=Tensor[(121), float64] */;
  %306 = reshape(%303, newshape=[]) /* ty=uint64 */;
  %307 = reshape(%304, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %308 = reshape(%305, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %309 = @func_2836(%306, %307, %308) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %310 = logical_or(%300, %301) /* ty=Tensor[(15, 10, 9), bool] */;
  %311 = atanh(%302) /* ty=Tensor[(15, 10, 9), float64] */;
  %312 = %309.1;
  (%310, %311, %312, %var_5974, meta[relay.Constant][18] /* ty=Tensor[(648), uint64] */, %var_5976)
}

def @func_4760() -> (Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  %313 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %314 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %315 = %313.0;
  (%314, %315)
}

def @func_5212(%var_5205: Tensor[(12, 13, 1), float64], %var_5206: Tensor[(12, 13, 13), float64]) -> (Tensor[(12, 13, 13), float64],) {
  %316 = cast(%var_5205, dtype="float64") /* ty=Tensor[(12, 13, 1), float64] */;
  %317 = cast(%var_5206, dtype="float64") /* ty=Tensor[(12, 13, 13), float64] */;
  %318 = divide(%316, %317) /* ty=Tensor[(12, 13, 13), float64] */;
  (%318,)
}

def @func_5236() -> (int16, Tensor[(121), float64]) {
  %319 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %320 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %321 = %319.2;
  %322 = %320.3;
  (%321, %322)
}

def @func_5495() -> (Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(40), uint32], Tensor[(40), uint32]) {
  %323 = @func_3824() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */;
  %324 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %326 = reshape(%325, newshape=[40]) /* ty=Tensor[(40), uint32] */;
  %327 = @func_5401(%326) /* ty=(Tensor[(16, 9, 16), float32], Tensor[(4, 2, 5), uint64], Tensor[(40), uint32]) */;
  %328 = %323.2;
  %329 = %324.2;
  %330 = %327.2;
  (%328, %329, %330, meta[relay.Constant][19] /* ty=Tensor[(40), uint32] */)
}

def @func_6919(%var_6896: Tensor[(1, 10, 7), float64], %var_6897: Tensor[(8, 10, 7), float64], %var_6904: Tensor[(8, 10, 7), float64], %var_6910: uint64, %var_6911: Tensor[(648), uint64]) -> (Tensor[(8, 10, 7), uint8], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(1331), float64]) {
  %331 = cast(%var_6896, dtype="float64") /* ty=Tensor[(1, 10, 7), float64] */;
  %332 = cast(%var_6897, dtype="float64") /* ty=Tensor[(8, 10, 7), float64] */;
  %333 = floor_divide(%331, %332) /* ty=Tensor[(8, 10, 7), float64] */;
  %334 = cast(%var_6904, dtype="uint8") /* ty=Tensor[(8, 10, 7), uint8] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="uint8") /* ty=Tensor[(8, 10, 7), uint8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %338 = cast(%var_6910, dtype="uint64") /* ty=uint64 */;
  %339 = cast(%var_6911, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %340 = cast(meta[relay.Constant][20] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %341 = reshape(%338, newshape=[]) /* ty=uint64 */;
  %342 = reshape(%339, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %343 = reshape(%340, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %344 = @func_2836(%341, %342, %343) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %345 = right_shift(%336, %337) /* ty=Tensor[(8, 10, 7), uint8] */;
  %346 = %344.2;
  %347 = @func_3839() /* ty=Tensor[(1331), float64] */;
  (%345, %346, %var_6910, %var_6911, meta[relay.Constant][20] /* ty=Tensor[(121), float64] */, %347)
}

def @func_3931() -> Tensor[(9, 9, 5), float32] {
  %348 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 5), float32] */;
  atanh(%348) /* ty=Tensor[(9, 9, 5), float32] */
}

def @func_6516() -> (Tensor[(3, 9, 9), float64],) {
  %349 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 9), float64] */;
  %350 = cosh(%349) /* ty=Tensor[(3, 9, 9), float64] */;
  (%350,)
}

def @func_5254() -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) {
  %351 = @func_4949() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %352 = %351.0;
  %353 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  (%352, %353)
}

def @func_6720() -> (Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64]) {
  %354 = @func_6499() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %355 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %356 = %354.0;
  %357 = %355.2;
  (%356, %357)
}

def @func_6460(%var_6410: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1331), float64], Tensor[(12, 13, 13), float64], Tensor[(156), float64], Tensor[(2028), float64], Tensor[(121), int32], Tensor[(121), uint64], Tensor[(121), float64]) {
  %358 = @func_6356() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %359 = cast(%var_6410, dtype="float64") /* ty=Tensor[(121), float64] */;
  %360 = reshape(%359, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %361 = @func_4323(%360) /* ty=(Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) */;
  %362 = cast(meta[relay.Constant][23] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %363 = cast(meta[relay.Constant][24] /* ty=Tensor[(2028), float64] */, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %364 = reshape(%362, newshape=[12, 13, 1]) /* ty=Tensor[(12, 13, 1), float64] */;
  %365 = reshape(%363, newshape=[12, 13, 13]) /* ty=Tensor[(12, 13, 13), float64] */;
  %366 = @func_5212(%364, %365) /* ty=(Tensor[(12, 13, 13), float64],) */;
  %367 = @func_6025() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(121), int32], Tensor[(11, 11), float64]) */;
  %368 = cast(%var_6410, dtype="float64") /* ty=Tensor[(121), float64] */;
  %369 = log2(%368) /* ty=Tensor[(121), float64] */;
  %370 = cast(%369, dtype="float64") /* ty=Tensor[(121), float64] */;
  %371 = acosh(%370) /* ty=Tensor[(121), float64] */;
  %372 = cast(%369, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %373 = shape_of(%371, dtype="int32") /* ty=Tensor[(1), int32] */;
  %374 = cast(%371, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %376 = cast(%369, dtype="float64") /* ty=Tensor[(121), float64] */;
  %377 = %358.0;
  %378 = %361.4;
  %379 = %366.0;
  %380 = %367.1;
  %381 = add(%374, %375) /* ty=Tensor[(121), uint64] */;
  %382 = asinh(%376) /* ty=Tensor[(121), float64] */;
  (%377, %378, %379, meta[relay.Constant][23] /* ty=Tensor[(156), float64] */, meta[relay.Constant][24] /* ty=Tensor[(2028), float64] */, %380, %381, %382)
}

def @func_824(%var_815: Tensor[(1331), float64], %var_818: Tensor[(55, 6), uint16]) -> (Tensor[(4, 3, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(2, 11, 15), uint16], Tensor[(55, 6), uint16]) {
  %383 = cast(meta[relay.Constant][25] /* ty=Tensor[(4, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
  %384 = cast(meta[relay.Constant][26] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %385 = cast(%var_815, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %386 = reshape(%384, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %387 = reshape(%385, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %388 = cast(%var_818, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
  %389 = cast(%var_818, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
  %390 = cast(meta[relay.Constant][26] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %391 = reshape(%388, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %392 = reshape(%389, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %393 = reshape(%390, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %394 = @func_757(%391, %392, %393) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) */;
  %395 = sqrt(%383) /* ty=Tensor[(4, 3, 15), float32] */;
  %396 = @func_689(%386, %387) /* ty=Tensor[(11, 11, 11), float64] */;
  %397 = %394.0;
  (%395, %396, meta[relay.Constant][26] /* ty=Tensor[(121), float64] */, %var_815, %397, %var_818)
}

def @func_757(%var_731: Tensor[(2, 11, 15), uint16], %var_735: Tensor[(2, 11, 15), uint16], %var_742: Tensor[(121), float64]) -> (Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) {
  %398 = cast(%var_731, dtype="uint16") /* ty=Tensor[(2, 11, 15), uint16] */;
  %399 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(2, 11, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 11, 15), uint16] */, dtype="uint16") /* ty=Tensor[(2, 11, 15), uint16] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %402 = cast(%var_735, dtype="bool") /* ty=Tensor[(2, 11, 15), bool] */;
  %403 = shape_of(%var_731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%var_731, dtype="bool") /* ty=Tensor[(2, 11, 15), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = less(%404, %405) /* ty=Tensor[(2, 11, 15), bool] */;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(2, 11, 15), float32] */;
  %408 = cast(%var_742, dtype="float64") /* ty=Tensor[(121), float64] */;
  %409 = cast(meta[relay.Constant][28] /* ty=Tensor[(1331, 1), float64] */, dtype="float64") /* ty=Tensor[(1331, 1), float64] */;
  %410 = reshape(%408, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %411 = reshape(%409, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %412 = cast(%var_742, dtype="float64") /* ty=Tensor[(121), float64] */;
  %413 = cast(meta[relay.Constant][28] /* ty=Tensor[(1331, 1), float64] */, dtype="float64") /* ty=Tensor[(1331, 1), float64] */;
  %414 = reshape(%412, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %415 = reshape(%413, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %416 = bitwise_xor(%400, %401) /* ty=Tensor[(2, 11, 15), uint16] */;
  %417 = atan(%407) /* ty=Tensor[(2, 11, 15), float32] */;
  %418 = @func_689(%410, %411) /* ty=Tensor[(11, 11, 11), float64] */;
  %419 = @func_689(%414, %415) /* ty=Tensor[(11, 11, 11), float64] */;
  (%416, %417, %418, %var_742, meta[relay.Constant][28] /* ty=Tensor[(1331, 1), float64] */, %419)
}

def @func_6810() -> Tensor[(4, 5, 9), float32] {
  %420 = @func_3036() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %420.0
}

def @func_5138(%var_5135: Tensor[(648), uint64], %var_5136: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64]) {
  %421 = @func_4949() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %422 = cast(meta[relay.Constant][29] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %423 = cast(%var_5135, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %424 = cast(%var_5136, dtype="float64") /* ty=Tensor[(121), float64] */;
  %425 = reshape(%422, newshape=[]) /* ty=uint64 */;
  %426 = reshape(%423, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %427 = reshape(%424, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %428 = @func_2836(%425, %426, %427) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %429 = %421.0;
  %430 = %428.2;
  (%429, %430, meta[relay.Constant][29] /* ty=uint64 */, %var_5135, %var_5136)
}

def @func_3839() -> Tensor[(1331), float64] {
  %431 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
  %431.0
}

def @func_6577() -> Tensor[(1, 121), float32] {
  %432 = @func_5054() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) */;
  %433 = %432.1;
  %434 = cast(%433, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %435 = atanh(%434) /* ty=Tensor[(1, 121), float64] */;
  %436 = cast(%435, dtype="float32") /* ty=Tensor[(1, 121), float32] */;
  rsqrt(%436) /* ty=Tensor[(1, 121), float32] */
}

def @func_2986() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) {
  %437 = cast(meta[relay.Constant][30] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %438 = reshape(%437, newshape=[]) /* ty=int16 */;
  %439 = @func_1989(%438) /* ty=(Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) */;
  %440 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %441 = %439.6;
  (%440, %441, meta[relay.Constant][30] /* ty=int16 */)
}

def @func_6216(%var_6150: Tensor[(9, 5, 13), float32], %var_6158: float64, %var_6205: Tensor[(9, 5, 13), bool]) -> (Tensor[(180), float32], float64, Tensor[(9, 5, 13), uint64], Tensor[(9, 5, 13), int64]) {
  %442 = cast(%var_6150, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %443 = acosh(%442) /* ty=Tensor[(9, 5, 13), float32] */;
  %444 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %445 = cast(%var_6158, dtype="float64") /* ty=float64 */;
  %446 = reshape(%444, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %447 = reshape(%445, newshape=[]) /* ty=float64 */;
  %448 = @func_2333(%446, %447) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %449 = %448.2;
  %450 = cast(%443, dtype="uint64") /* ty=Tensor[(9, 5, 13), uint64] */;
  %451 = cast(%449, dtype="uint64") /* ty=uint64 */;
  %452 = cast(%443, dtype="bool") /* ty=Tensor[(9, 5, 13), bool] */;
  %453 = cast(%449, dtype="bool") /* ty=bool */;
  %454 = logical_and(%452, %453) /* ty=Tensor[(9, 5, 13), bool] */;
  %455 = cast(%var_6205, dtype="int64") /* ty=Tensor[(9, 5, 13), int64] */;
  %456 = shape_of(%454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(%454, dtype="int64") /* ty=Tensor[(9, 5, 13), int64] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %459 = right_shift(%450, %451) /* ty=Tensor[(9, 5, 13), uint64] */;
  %460 = add(%457, %458) /* ty=Tensor[(9, 5, 13), int64] */;
  (meta[relay.Constant][31] /* ty=Tensor[(180), float32] */, %var_6158, %459, %460)
}

def @func_2593() -> (Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) {
  %461 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %462 = cast(meta[relay.Constant][32] /* ty=Tensor[(4, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %466 = mod(%464, %465) /* ty=Tensor[(4, 5, 9), float32] */;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %468 = cast(-5.02805f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %469 = reshape(%467, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %470 = reshape(%468, newshape=[]) /* ty=float64 */;
  %471 = @func_2333(%469, %470) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %472 = cast(%466, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %473 = cast(-5.02805f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %474 = reshape(%472, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %475 = reshape(%473, newshape=[]) /* ty=float64 */;
  %476 = @func_2333(%474, %475) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %477 = %476.0;
  %478 = cast(%461, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = cast(meta[relay.Constant][33] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %483 = cast(meta[relay.Constant][34] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %484 = reshape(%482, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %485 = reshape(%483, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %486 = cast(%466, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %487 = log(%486) /* ty=Tensor[(4, 5, 9), float64] */;
  %488 = cast(%487, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %489 = cast(-5.02805f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %490 = cast(%487, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %491 = rsqrt(%490) /* ty=Tensor[(4, 5, 9), float32] */;
  %492 = cast(%487, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %496 = %471.1;
  %497 = equal(%480, %481) /* ty=Tensor[(4, 5, 9), bool] */;
  %498 = @func_689(%484, %485) /* ty=Tensor[(11, 11, 11), float64] */;
  %499 = less_equal(%488, %489) /* ty=Tensor[(4, 5, 9), bool] */;
  %500 = greater_equal(%494, %495) /* ty=Tensor[(4, 5, 9), bool] */;
  (%496, %497, %498, meta[relay.Constant][33] /* ty=Tensor[(121), float64] */, meta[relay.Constant][34] /* ty=Tensor[(1331), float64] */, %499, %500)
}

def @func_5154() -> (Tensor[(4, 5, 9), float32],) {
  %501 = @func_5054() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) */;
  %502 = %501.0;
  (%502,)
}

def @func_4279() -> Tensor[(4, 5, 9), float32] {
  %503 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %503.0
}

def @func_4919(%var_4914: Tensor[(4, 13, 14), float64], %var_4915: Tensor[(4, 13, 14), float64]) -> Tensor[(4, 13, 14), float64] {
  %504 = cast(%var_4915, dtype="float64") /* ty=Tensor[(4, 13, 14), float64] */;
  %505 = shape_of(%var_4914, dtype="int32") /* ty=Tensor[(3), int32] */;
  %506 = cast(%var_4914, dtype="float64") /* ty=Tensor[(4, 13, 14), float64] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%506, %507) /* ty=Tensor[(4, 13, 14), float64] */
}

def @func_5591(%var_5554: Tensor[(4, 5, 9), float32], %var_5565: float64) -> (Tensor[(4, 5, 9), uint16], float64, float64, Tensor[(1331), float32], Tensor[(1331), float64]) {
  %508 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %509 = cast(%var_5554, dtype="uint16") /* ty=Tensor[(4, 5, 9), uint16] */;
  %510 = shape_of(%508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %511 = cast(%508, dtype="uint16") /* ty=Tensor[(4, 5, 9), uint16] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %513 = cast(%508, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %514 = cast(%var_5565, dtype="float64") /* ty=float64 */;
  %515 = reshape(%513, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %516 = reshape(%514, newshape=[]) /* ty=float64 */;
  %517 = @func_2333(%515, %516) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %518 = cast(meta[relay.Constant][35] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %519 = reshape(%518, newshape=[1331]) /* ty=Tensor[(1331), float64] */;
  %520 = @func_4730(%519) /* ty=(Tensor[(1331), float32], Tensor[(1331), float32]) */;
  %521 = bitwise_and(%511, %512) /* ty=Tensor[(4, 5, 9), uint16] */;
  %522 = %517.2;
  %523 = %520.0;
  (%521, %522, %var_5565, %523, meta[relay.Constant][35] /* ty=Tensor[(1331), float64] */)
}

def @func_4632(%var_4579: Tensor[(1331), float64], %var_4609: uint64, %var_4610: Tensor[(162, 4), uint64]) -> (Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(1331), bool], uint64, Tensor[(162, 4), uint64], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  %524 = @func_3824() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */;
  %525 = cast(meta[relay.Constant][36] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %526 = cast(%var_4579, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %527 = reshape(%525, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %528 = reshape(%526, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %529 = @func_689(%527, %528) /* ty=Tensor[(11, 11, 11), float64] */;
  %530 = cast(%529, dtype="bool") /* ty=Tensor[(11, 11, 11), bool] */;
  %531 = shape_of(%var_4579, dtype="int32") /* ty=Tensor[(1), int32] */;
  %532 = cast(%var_4579, dtype="bool") /* ty=Tensor[(1331), bool] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?), bool] */;
  %534 = @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */;
  %535 = cast(%var_4609, dtype="uint64") /* ty=uint64 */;
  %536 = cast(%var_4610, dtype="uint64") /* ty=Tensor[(162, 4), uint64] */;
  %537 = cast(meta[relay.Constant][36] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %538 = reshape(%535, newshape=[]) /* ty=uint64 */;
  %539 = reshape(%536, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %540 = reshape(%537, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %541 = @func_2836(%538, %539, %540) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %542 = %541.1;
  %543 = cast(%542, dtype="float64") /* ty=Tensor[(121), float64] */;
  %544 = %524.0;
  %545 = not_equal(%532, %533) /* ty=Tensor[(1331), bool] */;
  %546 = %534.0;
  %547 = exp(%543) /* ty=Tensor[(121), float64] */;
  (%544, meta[relay.Constant][36] /* ty=Tensor[(121), float64] */, %545, %var_4609, %var_4610, %546, %547)
}

def @func_4448() -> (Tensor[(1331), float64],) {
  %548 = @func_3683() /* ty=(Tensor[(1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %549 = %548.0;
  (%549,)
}

def @func_4730(%var_4669: Tensor[(1331), float64]) -> (Tensor[(1331), float32], Tensor[(1331), float32]) {
  %550 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
  %551 = %550.0;
  %552 = cast(%var_4669, dtype="float32") /* ty=Tensor[(1331), float32] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(1), int32] */;
  %554 = cast(%551, dtype="float32") /* ty=Tensor[(1331), float32] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?), float32] */;
  %556 = cast(%551, dtype="uint8") /* ty=Tensor[(1331), uint8] */;
  %557 = shape_of(%var_4669, dtype="int32") /* ty=Tensor[(1), int32] */;
  %558 = cast(%var_4669, dtype="uint8") /* ty=Tensor[(1331), uint8] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %560 = left_shift(%558, %559) /* ty=Tensor[(1331), uint8] */;
  %561 = cast(%560, dtype="float32") /* ty=Tensor[(1331), float32] */;
  %562 = floor_mod(%554, %555) /* ty=Tensor[(1331), float32] */;
  %563 = atanh(%561) /* ty=Tensor[(1331), float32] */;
  (%562, %563)
}

def @func_2810() -> Tensor[(4, 5, 9), float32] {
  %564 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %564.0
}

def @func_5183(%var_5178: Tensor[(2, 16, 13), float32]) -> (Tensor[(2, 16, 13), float32],) {
  %565 = cast(%var_5178, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
  %566 = atanh(%565) /* ty=Tensor[(2, 16, 13), float32] */;
  (%566,)
}

def @func_2887() -> Tensor[(4, 5, 9), float32] {
  @func_2810() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_689(%var_679: Tensor[(11, 11, 1), float64], %var_680: Tensor[(11, 11, 11), float64]) -> Tensor[(11, 11, 11), float64] {
  %567 = cast(%var_679, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
  %568 = cast(%var_680, dtype="float64") /* ty=Tensor[(11, 11, 11), float64] */;
  divide(%567, %568) /* ty=Tensor[(11, 11, 11), float64] */
}

def @func_6729() -> Tensor[(4, 5, 9), float32] {
  %569 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %569.0
}

def @main(%var_7090: uint8, %var_7091: Tensor[(14, 4, 12), uint8], %var_7108: Tensor[(648), uint64]) -> (Tensor[(14, 4, 12), bool], Tensor[(1, 121), float64], Tensor[(648), uint64], Tensor[(121), float64], Tensor[(4, 5, 9), float64], Tensor[(6, 30), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(14, 4, 12), uint64]) {
  %570 = cast(%var_7090, dtype="bool") /* ty=bool */;
  %571 = cast(%var_7091, dtype="bool") /* ty=Tensor[(14, 4, 12), bool] */;
  %572 = cast(%var_7108, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %574 = reshape(%572, newshape=[648]) /* ty=Tensor[(648), uint64] */;
  %575 = reshape(%573, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %576 = @func_5138(%574, %575) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64]) */;
  %577 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %578 = cast(meta[relay.Constant][37] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %579 = reshape(%577, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %580 = reshape(%578, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %581 = @func_6650(%579, %580) /* ty=(Tensor[(4, 5, 9), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(4, 5, 9), float32]) */;
  %582 = @func_6720() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64]) */;
  %583 = @func_5344() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %584 = cast(%var_7091, dtype="float64") /* ty=Tensor[(14, 4, 12), float64] */;
  %585 = asinh(%584) /* ty=Tensor[(14, 4, 12), float64] */;
  %586 = cast(meta[relay.Constant][39] /* ty=Tensor[(14, 4, 12), float64] */, dtype="uint64") /* ty=Tensor[(14, 4, 12), uint64] */;
  %587 = shape_of(%585, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%585, dtype="uint64") /* ty=Tensor[(14, 4, 12), uint64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %590 = less_equal(%570, %571) /* ty=Tensor[(14, 4, 12), bool] */;
  %591 = %576.1;
  %592 = %581.0;
  %593 = %582.0;
  %594 = %583.0;
  %595 = minimum(%588, %589) /* ty=Tensor[(14, 4, 12), uint64] */;
  (%590, %591, %var_7108, meta[relay.Constant][37] /* ty=Tensor[(121), float64] */, %592, meta[relay.Constant][38] /* ty=Tensor[(6, 30), float32] */, %593, %594, %595)
}

def @func_7020() -> (Tensor[(4, 5, 9), float32],) {
  %596 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %597 = %596.0;
  (%597,)
}

def @func_1432(%var_1424: Tensor[(15, 5, 2), float32]) -> (Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) {
  %598 = cast(%var_1424, dtype="float32") /* ty=Tensor[(15, 5, 2), float32] */;
  %599 = cast(%var_1424, dtype="float64") /* ty=Tensor[(15, 5, 2), float64] */;
  %600 = cos(%598) /* ty=Tensor[(15, 5, 2), float32] */;
  %601 = cosh(%599) /* ty=Tensor[(15, 5, 2), float64] */;
  (%600, %601)
}

def @func_3824() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) {
  %602 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %603 = cast(%602, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %604 = tan(%603) /* ty=Tensor[(4, 5, 9), float64] */;
  %605 = cast(%602, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %609 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %610 = cast(%602, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %611 = asin(%610) /* ty=Tensor[(4, 5, 9), float64] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %613 = cast(meta[relay.Constant][40] /* ty=Tensor[(1690), int16] */, dtype="int16") /* ty=Tensor[(1690), int16] */;
  %614 = reshape(%613, newshape=[10, 13, 13]) /* ty=Tensor[(10, 13, 13), int16] */;
  %615 = @func_3241(%614) /* ty=(Tensor[(10, 13, 13), int16], Tensor[(4, 5, 9), float64], Tensor[(10, 13, 13), float64]) */;
  %616 = cast(meta[relay.Constant][40] /* ty=Tensor[(1690), int16] */, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %617 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
  %618 = cast(meta[relay.Constant][41] /* ty=Tensor[(121, 1), float64] */, dtype="float64") /* ty=Tensor[(121, 1), float64] */;
  %619 = reshape(%618, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %620 = multiply(%607, %608) /* ty=Tensor[(4, 5, 9), float32] */;
  %621 = %609.0;
  %622 = exp(%612) /* ty=Tensor[(4, 5, 9), float32] */;
  %623 = %615.2;
  %624 = sinh(%616) /* ty=Tensor[(1690), float64] */;
  %625 = %617.0;
  %626 = @func_3583(%619) /* ty=Tensor[(121), float64] */;
  (%620, %621, %622, %623, %624, %625, %626, meta[relay.Constant][41] /* ty=Tensor[(121, 1), float64] */)
}

def @func_4856(%var_4771: Tensor[(14, 3, 1), float32], %var_4829: float64) -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float64], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], float64, float64, Tensor[(4, 5, 9), float32], Tensor[(14, 3, ?), bool]) {
  %627 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %628 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %629 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %631 = cast(%var_4829, dtype="float64") /* ty=float64 */;
  %632 = reshape(%630, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %633 = reshape(%631, newshape=[]) /* ty=float64 */;
  %634 = @func_4253(%632, %633) /* ty=(Tensor[(4, 5, 9), int16], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), int64], float64, Tensor[(4, 5, 9), float32]) */;
  %635 = cast(%var_4771, dtype="float32") /* ty=Tensor[(14, 3, 1), float32] */;
  %636 = exp(%635) /* ty=Tensor[(14, 3, 1), float32] */;
  %637 = cast(%636, dtype="float64") /* ty=Tensor[(14, 3, 1), float64] */;
  %638 = acos(%637) /* ty=Tensor[(14, 3, 1), float64] */;
  %639 = cast(%var_4771, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %640 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%636, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %643 = greater(%641, %642) /* ty=Tensor[(14, 3, ?), bool] */;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(14, 3, ?), bool] */;
  %645 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%638, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = not_equal(%646, %647) /* ty=Tensor[(14, 3, ?), bool] */;
  %649 = cast(%636, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(14, 3, ?), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %653 = %627.0;
  %654 = %628.0;
  %655 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %656 = %634.3;
  %657 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %658 = greater_equal(%651, %652) /* ty=Tensor[(14, 3, ?), bool] */;
  (%629, %653, %654, %655, %656, %var_4829, %657, %658)
}

def @func_4909() -> (Tensor[(9, 12, 7), uint32], Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) {
  %659 = cast(meta[relay.Constant][43] /* ty=Tensor[(9, 12, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %660 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(9, 12, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(meta[relay.Constant][42] /* ty=Tensor[(9, 12, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %663 = cast(meta[relay.Constant][44] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %664 = reshape(%663, newshape=[]) /* ty=int16 */;
  %665 = @func_1989(%664) /* ty=(Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) */;
  %666 = bitwise_or(%661, %662) /* ty=Tensor[(9, 12, 7), uint32] */;
  %667 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  %668 = %665.2;
  (%666, %667, %668, meta[relay.Constant][44] /* ty=int16 */)
}

def @func_4160(%var_4152: Tensor[(121), float64]) -> (Tensor[(121), int32],) {
  %669 = @func_4027() /* ty=Tensor[(121), float64] */;
  %670 = cast(%var_4152, dtype="int32") /* ty=Tensor[(121), int32] */;
  %671 = shape_of(%669, dtype="int32") /* ty=Tensor[(1), int32] */;
  %672 = cast(%669, dtype="int32") /* ty=Tensor[(121), int32] */;
  %673 = dyn.reshape(%670, %671, newshape=[]) /* ty=Tensor[(?), int32] */;
  %674 = bitwise_xor(%672, %673) /* ty=Tensor[(121), int32] */;
  (%674,)
}

def @func_1061(%var_1044: float64) -> (Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) {
  %675 = cast(%var_1044, dtype="bool") /* ty=bool */;
  %676 = cast(meta[relay.Constant][45] /* ty=Tensor[(8, 4, 2), float64] */, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %677 = cast(%var_1044, dtype="float64") /* ty=float64 */;
  %678 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 6), float64] */;
  %679 = not_equal(%675, %676) /* ty=Tensor[(8, 4, 2), bool] */;
  %680 = multiply(%677, %678) /* ty=Tensor[(1, 9, 6), float64] */;
  (%679, %680)
}

def @func_4129(%var_4127: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  %681 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %682 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %683 = cast(%var_4127, dtype="float64") /* ty=Tensor[(121), float64] */;
  %684 = reshape(%683, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %685 = @func_2638(%684) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %686 = %681.0;
  %687 = %682.0;
  %688 = %685.0;
  (%686, %687, %688, %var_4127)
}

def @func_5816() -> (Tensor[(4, 5, 9), float32],) {
  %689 = @func_5344() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %690 = %689.0;
  (%690,)
}

def @func_6829() -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64]) {
  %691 = cast(meta[relay.Constant][47] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %692 = reshape(%691, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %693 = @func_2638(%692) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %694 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %695 = %693.1;
  (%694, %695, meta[relay.Constant][47] /* ty=Tensor[(121), float64] */)
}

def @func_4498(%var_4477: Tensor[(330), uint16], %var_4478: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(330), uint16], Tensor[(121), float64]) {
  %696 = cast(%var_4477, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %697 = cast(%var_4477, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %698 = cast(%var_4478, dtype="float64") /* ty=Tensor[(121), float64] */;
  %699 = reshape(%696, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %700 = reshape(%697, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
  %701 = reshape(%698, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %702 = @func_757(%699, %700, %701) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) */;
  %703 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  %704 = %702.2;
  (%703, %704, %var_4477, %var_4478)
}

def @func_4076(%var_4068: Tensor[(15, 4, 8), int32]) -> (Tensor[(15, 4, 8), int32],) {
  %705 = cast(meta[relay.Constant][48] /* ty=Tensor[(15, 4, 8), int32] */, dtype="int32") /* ty=Tensor[(15, 4, 8), int32] */;
  %706 = shape_of(%var_4068, dtype="int32") /* ty=Tensor[(3), int32] */;
  %707 = cast(%var_4068, dtype="int32") /* ty=Tensor[(15, 4, 8), int32] */;
  %708 = dyn.reshape(%705, %706, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %709 = subtract(%707, %708) /* ty=Tensor[(15, 4, 8), int32] */;
  (%709,)
}

def @func_5432(%var_5413: uint64, %var_5415: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(9, 12, 7), uint32]) {
  %710 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %711 = cast(%var_5413, dtype="uint64") /* ty=uint64 */;
  %712 = cast(meta[relay.Constant][49] /* ty=Tensor[(648), uint64] */, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %713 = cast(%var_5415, dtype="float64") /* ty=Tensor[(121), float64] */;
  %714 = reshape(%711, newshape=[]) /* ty=uint64 */;
  %715 = reshape(%712, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %716 = reshape(%713, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %717 = @func_2836(%714, %715, %716) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %718 = @func_4909() /* ty=(Tensor[(9, 12, 7), uint32], Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %719 = %710.0;
  %720 = %717.2;
  %721 = %718.0;
  (%719, %720, %var_5413, meta[relay.Constant][49] /* ty=Tensor[(648), uint64] */, %var_5415, %721)
}

def @func_6059(%var_6051: Tensor[(4, 4, 2), float64]) -> (Tensor[(4, 4, 2), float32],) {
  %722 = cast(%var_6051, dtype="float64") /* ty=Tensor[(4, 4, 2), float64] */;
  %723 = tan(%722) /* ty=Tensor[(4, 4, 2), float64] */;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(4, 4, 2), float32] */;
  %725 = atan(%724) /* ty=Tensor[(4, 4, 2), float32] */;
  (%725,)
}

def @func_2246() -> Tensor[(4, 5, 9), float32] {
  %726 = cast(meta[relay.Constant][50] /* ty=Tensor[(4, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %727 = acos(%726) /* ty=Tensor[(4, 5, 9), float64] */;
  %728 = cast(%727, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  sqrt(%728) /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_1989(%var_1947: int16) -> (Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) {
  %729 = cast(%var_1947, dtype="int16") /* ty=int16 */;
  %730 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 16, 13), int16] */, dtype="int16") /* ty=Tensor[(15, 16, 13), int16] */;
  %731 = cast(meta[relay.Constant][51] /* ty=Tensor[(15, 16, 13), int16] */, dtype="float32") /* ty=Tensor[(15, 16, 13), float32] */;
  %732 = cast(%var_1947, dtype="float64") /* ty=float64 */;
  %733 = reshape(%732, newshape=[]) /* ty=float64 */;
  %734 = @func_1061(%733) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */;
  %735 = cast(meta[relay.Constant][52] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %736 = cast(meta[relay.Constant][53] /* ty=Tensor[(1, 1331), float64] */, dtype="float64") /* ty=Tensor[(1, 1331), float64] */;
  %737 = reshape(%735, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %738 = reshape(%736, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %739 = cast(%var_1947, dtype="float64") /* ty=float64 */;
  %740 = reshape(%739, newshape=[]) /* ty=float64 */;
  %741 = @func_1061(%740) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */;
  %742 = subtract(%729, %730) /* ty=Tensor[(15, 16, 13), int16] */;
  %743 = tan(%731) /* ty=Tensor[(15, 16, 13), float32] */;
  %744 = %734.1;
  %745 = @func_689(%737, %738) /* ty=Tensor[(11, 11, 11), float64] */;
  %746 = %741.1;
  (%742, %743, %744, %745, meta[relay.Constant][52] /* ty=Tensor[(121), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1, 1331), float64] */, %746)
}

def @func_1814(%var_1809: Tensor[(15, 2, 8), float32]) -> (Tensor[(15, 2, 8), float32], Tensor[(15, 2, 8), float64]) {
  %747 = cast(%var_1809, dtype="float32") /* ty=Tensor[(15, 2, 8), float32] */;
  %748 = cast(%var_1809, dtype="float64") /* ty=Tensor[(15, 2, 8), float64] */;
  %749 = log(%747) /* ty=Tensor[(15, 2, 8), float32] */;
  %750 = sqrt(%748) /* ty=Tensor[(15, 2, 8), float64] */;
  (%749, %750)
}

def @func_5718() -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) {
  %751 = @func_4949() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %752 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %753 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %754 = %751.0;
  (%752, %753, %754)
}

def @func_6650(%var_6607: Tensor[(4, 5, 9), float32], %var_6622: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(4, 5, 9), float32]) {
  %755 = @func_5790() /* ty=(Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) */;
  %756 = %755.1;
  %757 = cast(%var_6607, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %758 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%756, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %761 = cast(%var_6622, dtype="float64") /* ty=Tensor[(121), float64] */;
  %762 = reshape(%761, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %763 = @func_4323(%762) /* ty=(Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) */;
  %764 = @func_5344() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %765 = divide(%759, %760) /* ty=Tensor[(4, 5, 9), float64] */;
  %766 = %763.3;
  %767 = %764.0;
  (%765, %766, %var_6622, %767)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2722(%var_2720: Tensor[(121), float64]) -> Tensor[(121), bool] {
  @func_2719(%var_2720) /* ty=Tensor[(121), bool] */
}

def @func_4637(%var_4634: Tensor[(1331), float64], %var_4635: uint64, %var_4636: Tensor[(162, 4), uint64]) -> (Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(1331), bool], uint64, Tensor[(162, 4), uint64], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  @func_4632(%var_4634, %var_4635, %var_4636) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(1331), bool], uint64, Tensor[(162, 4), uint64], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) */
}

def @func_6500() -> (Tensor[(4, 5, 9), float32],) {
  %2 = fn () -> (Tensor[(4, 5, 9), float32],) {
    %0 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %1 = %0.0;
    (%1,)
  };
  %2() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_2394() -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) {
  @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */
}

def @func_3213(%var_3212: float64) -> (Tensor[(1, 9, 6), float64], float64, Tensor[(1, 180), float32], float64) {
  %11 = fn (%var_3204: float64) -> (Tensor[(1, 9, 6), float64], float64, Tensor[(1, 180), float32], float64) {
    %3 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
    %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 180), float32] */, dtype="float32") /* ty=Tensor[(1, 180), float32] */;
    %5 = cast(%var_3204, dtype="float64") /* ty=float64 */;
    %6 = reshape(%4, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
    %7 = reshape(%5, newshape=[]) /* ty=float64 */;
    %8 = @func_2333(%6, %7) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
    %9 = %3.1;
    %10 = %8.2;
    (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(1, 180), float32] */, %var_3204)
  };
  %11(%var_3212) /* ty=(Tensor[(1, 9, 6), float64], float64, Tensor[(1, 180), float32], float64) */
}

def @func_6829() -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64]) {
  %12 = cast(meta[relay.Constant][1] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %13 = reshape(%12, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %14 = @func_2638(%13) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %15 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %16 = %14.1;
  (%15, %16, meta[relay.Constant][1] /* ty=Tensor[(121), float64] */)
}

def @func_5373(%var_5354: Tensor[(7, 2, 10), float64]) -> (Tensor[(7, 2, 10), float64], Tensor[(4, 5, 9), float32]) {
  %17 = cast(%var_5354, dtype="float64") /* ty=Tensor[(7, 2, 10), float64] */;
  %18 = asin(%17) /* ty=Tensor[(7, 2, 10), float64] */;
  %19 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  (%18, %19)
}

def @func_4433(%var_4432: Tensor[(4, 2, 5), uint32]) -> (Tensor[(4, 2, 5), uint64], Tensor[(4, 2, 5), float32]) {
  %32 = fn (%var_4412: Tensor[(4, 2, 5), uint32]) -> (Tensor[(4, 2, 5), uint64], Tensor[(4, 2, 5), float32]) {
    %20 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 2, 1), uint32] */, dtype="bool") /* ty=Tensor[(4, 2, 1), bool] */;
    %21 = cast(%var_4412, dtype="bool") /* ty=Tensor[(4, 2, 5), bool] */;
    %22 = not_equal(%20, %21) /* ty=Tensor[(4, 2, 5), bool] */;
    %23 = cast(%var_4412, dtype="uint64") /* ty=Tensor[(4, 2, 5), uint64] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(3), int32] */;
    %25 = cast(%22, dtype="uint64") /* ty=Tensor[(4, 2, 5), uint64] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %27 = cast(%22, dtype="float64") /* ty=Tensor[(4, 2, 5), float64] */;
    %28 = erf(%27) /* ty=Tensor[(4, 2, 5), float64] */;
    %29 = cast(%28, dtype="float32") /* ty=Tensor[(4, 2, 5), float32] */;
    %30 = bitwise_or(%25, %26) /* ty=Tensor[(4, 2, 5), uint64] */;
    %31 = sqrt(%29) /* ty=Tensor[(4, 2, 5), float32] */;
    (%30, %31)
  };
  %32(%var_4432) /* ty=(Tensor[(4, 2, 5), uint64], Tensor[(4, 2, 5), float32]) */
}

def @func_4372() -> Tensor[(11, 11, 11), float64] {
  %34 = fn () -> Tensor[(11, 11, 11), float64] {
    %33 = @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */;
    %33.1
  };
  %34() /* ty=Tensor[(11, 11, 11), float64] */
}

def @func_5138(%var_5135: Tensor[(648), uint64], %var_5136: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64]) {
  %35 = @func_4949() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %36 = cast(meta[relay.Constant][3] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %37 = cast(%var_5135, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %38 = cast(%var_5136, dtype="float64") /* ty=Tensor[(121), float64] */;
  %39 = reshape(%36, newshape=[]) /* ty=uint64 */;
  %40 = reshape(%37, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %41 = reshape(%38, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %42 = @func_2836(%39, %40, %41) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %43 = %35.0;
  %44 = %42.2;
  (%43, %44, meta[relay.Constant][3] /* ty=uint64 */, %var_5135, %var_5136)
}

def @func_5496() -> (Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(40), uint32], Tensor[(40), uint32]) {
  %53 = fn () -> (Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(40), uint32], Tensor[(40), uint32]) {
    %45 = @func_3824() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */;
    %46 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
    %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(40), uint32] */, dtype="uint32") /* ty=Tensor[(40), uint32] */;
    %48 = reshape(%47, newshape=[40]) /* ty=Tensor[(40), uint32] */;
    %49 = @func_5401(%48) /* ty=(Tensor[(16, 9, 16), float32], Tensor[(4, 2, 5), uint64], Tensor[(40), uint32]) */;
    %50 = %45.2;
    %51 = %46.2;
    %52 = %49.2;
    (%50, %51, %52, meta[relay.Constant][4] /* ty=Tensor[(40), uint32] */)
  };
  %53() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(40), uint32], Tensor[(40), uint32]) */
}

def @func_3241(%var_3216: Tensor[(10, 13, 13), int16]) -> (Tensor[(10, 13, 13), int16], Tensor[(4, 5, 9), float64], Tensor[(10, 13, 13), float64]) {
  %54 = cast(%var_3216, dtype="int16") /* ty=Tensor[(10, 13, 13), int16] */;
  %55 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 13), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 13), int16] */, dtype="int16") /* ty=Tensor[(10, 13, 13), int16] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %58 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 13, 13), int16] */, dtype="float64") /* ty=Tensor[(10, 13, 13), float64] */;
  %60 = bitwise_or(%56, %57) /* ty=Tensor[(10, 13, 13), int16] */;
  %61 = %58.0;
  %62 = sigmoid(%59) /* ty=Tensor[(10, 13, 13), float64] */;
  (%60, %61, %62)
}

def @func_3867() -> (Tensor[(1, 9, 6), float64],) {
  %65 = fn () -> (Tensor[(1, 9, 6), float64],) {
    %63 = @func_3824() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */;
    %64 = %63.1;
    (%64,)
  };
  %65() /* ty=(Tensor[(1, 9, 6), float64],) */
}

def @func_4076(%var_4068: Tensor[(15, 4, 8), int32]) -> (Tensor[(15, 4, 8), int32],) {
  %66 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 4, 8), int32] */, dtype="int32") /* ty=Tensor[(15, 4, 8), int32] */;
  %67 = shape_of(%var_4068, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%var_4068, dtype="int32") /* ty=Tensor[(15, 4, 8), int32] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %70 = subtract(%68, %69) /* ty=Tensor[(15, 4, 8), int32] */;
  (%70,)
}

def @func_4501(%var_4499: Tensor[(330), uint16], %var_4500: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(330), uint16], Tensor[(121), float64]) {
  %80 = fn (%var_4477: Tensor[(330), uint16], %var_4478: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(330), uint16], Tensor[(121), float64]) {
    %71 = cast(%var_4477, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %72 = cast(%var_4477, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %73 = cast(%var_4478, dtype="float64") /* ty=Tensor[(121), float64] */;
    %74 = reshape(%71, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %75 = reshape(%72, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %76 = reshape(%73, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %77 = @func_757(%74, %75, %76) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) */;
    %78 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
    %79 = %77.2;
    (%78, %79, %var_4477, %var_4478)
  };
  %80(%var_4499, %var_4500) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(330), uint16], Tensor[(121), float64]) */
}

def @func_2812() -> Tensor[(4, 5, 9), float32] {
  @func_2810() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_3037() -> (Tensor[(4, 5, 9), float32],) {
  %83 = fn () -> (Tensor[(4, 5, 9), float32],) {
    %81 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %82 = %81.0;
    (%82,)
  };
  %83() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_5790() -> (Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) {
  %84 = @func_5254() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) */;
  %85 = @func_3931() /* ty=Tensor[(9, 9, 5), float32] */;
  %86 = %84.0;
  (%85, %86)
}

def @func_6757(%var_6746: Tensor[(4, 5, 9), float32]) -> Tensor[(4, 5, 9), bool] {
  %87 = @func_6499() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %88 = %87.0;
  %89 = cast(%var_6746, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%91, %92) /* ty=Tensor[(4, 5, 9), bool] */
}

def @func_3988() -> Tensor[(4, 5, 9), float32] {
  @func_2246() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_2594() -> (Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) {
  %133 = fn () -> (Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) {
    %93 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
    %94 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 5, 9), float32] */, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(3), int32] */;
    %96 = cast(%93, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %98 = mod(%96, %97) /* ty=Tensor[(4, 5, 9), float32] */;
    %99 = cast(%98, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %100 = cast(-5.02805f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %101 = reshape(%99, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
    %102 = reshape(%100, newshape=[]) /* ty=float64 */;
    %103 = @func_2333(%101, %102) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
    %104 = cast(%98, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %105 = cast(-5.02805f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %106 = reshape(%104, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
    %107 = reshape(%105, newshape=[]) /* ty=float64 */;
    %108 = @func_2333(%106, %107) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
    %109 = %108.0;
    %110 = cast(%93, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
    %111 = shape_of(%109, dtype="int32") /* ty=Tensor[(3), int32] */;
    %112 = cast(%109, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
    %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %114 = cast(meta[relay.Constant][8] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
    %115 = cast(meta[relay.Constant][9] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
    %116 = reshape(%114, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %117 = reshape(%115, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
    %118 = cast(%98, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
    %119 = log(%118) /* ty=Tensor[(4, 5, 9), float64] */;
    %120 = cast(%119, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
    %121 = cast(-5.02805f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %122 = cast(%119, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %123 = rsqrt(%122) /* ty=Tensor[(4, 5, 9), float32] */;
    %124 = cast(%119, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
    %125 = shape_of(%123, dtype="int32") /* ty=Tensor[(3), int32] */;
    %126 = cast(%123, dtype="bool") /* ty=Tensor[(4, 5, 9), bool] */;
    %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %128 = %103.1;
    %129 = equal(%112, %113) /* ty=Tensor[(4, 5, 9), bool] */;
    %130 = @func_689(%116, %117) /* ty=Tensor[(11, 11, 11), float64] */;
    %131 = less_equal(%120, %121) /* ty=Tensor[(4, 5, 9), bool] */;
    %132 = greater_equal(%126, %127) /* ty=Tensor[(4, 5, 9), bool] */;
    (%128, %129, %130, meta[relay.Constant][8] /* ty=Tensor[(121), float64] */, meta[relay.Constant][9] /* ty=Tensor[(1331), float64] */, %131, %132)
  };
  %133() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */
}

def @func_692(%var_690: Tensor[(11, 11, 1), float64], %var_691: Tensor[(11, 11, 11), float64]) -> Tensor[(11, 11, 11), float64] {
  %136 = fn (%var_679: Tensor[(11, 11, 1), float64], %var_680: Tensor[(11, 11, 11), float64]) -> Tensor[(11, 11, 11), float64] {
    %134 = cast(%var_679, dtype="float64") /* ty=Tensor[(11, 11, 1), float64] */;
    %135 = cast(%var_680, dtype="float64") /* ty=Tensor[(11, 11, 11), float64] */;
    divide(%134, %135) /* ty=Tensor[(11, 11, 11), float64] */
  };
  %136(%var_690, %var_691) /* ty=Tensor[(11, 11, 11), float64] */
}

def @func_2986() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) {
  %137 = cast(meta[relay.Constant][10] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %138 = reshape(%137, newshape=[]) /* ty=int16 */;
  %139 = @func_1989(%138) /* ty=(Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) */;
  %140 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %141 = %139.6;
  (%140, %141, meta[relay.Constant][10] /* ty=int16 */)
}

def @func_5185(%var_5184: Tensor[(2, 16, 13), float32]) -> (Tensor[(2, 16, 13), float32],) {
  %144 = fn (%var_5178: Tensor[(2, 16, 13), float32]) -> (Tensor[(2, 16, 13), float32],) {
    %142 = cast(%var_5178, dtype="float32") /* ty=Tensor[(2, 16, 13), float32] */;
    %143 = atanh(%142) /* ty=Tensor[(2, 16, 13), float32] */;
    (%143,)
  };
  %144(%var_5184) /* ty=(Tensor[(2, 16, 13), float32],) */
}

def @func_2333(%var_2307: Tensor[(4, 5, 9), float32], %var_2314: float64) -> (Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) {
  %145 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %146 = cast(%var_2307, dtype="int64") /* ty=Tensor[(4, 5, 9), int64] */;
  %147 = shape_of(%145, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(%145, dtype="int64") /* ty=Tensor[(4, 5, 9), int64] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %150 = cast(%var_2314, dtype="float64") /* ty=float64 */;
  %151 = reshape(%150, newshape=[]) /* ty=float64 */;
  %152 = @func_1061(%151) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */;
  %153 = left_shift(%148, %149) /* ty=Tensor[(4, 5, 9), int64] */;
  %154 = %152.1;
  (%153, %154, %var_2314)
}

def @func_5404(%var_5402: Tensor[(40), uint32]) -> (Tensor[(16, 9, 16), float32], Tensor[(4, 2, 5), uint64], Tensor[(40), uint32]) {
  @func_5401(%var_5402) /* ty=(Tensor[(16, 9, 16), float32], Tensor[(4, 2, 5), uint64], Tensor[(40), uint32]) */
}

def @func_7074() -> Tensor[(4, 5, 9), float32] {
  @func_3988() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_2640(%var_2639: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) {
  %164 = fn (%var_2621: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) {
    %155 = cast(%var_2621, dtype="float64") /* ty=Tensor[(121), float64] */;
    %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 1331), float64] */, dtype="float64") /* ty=Tensor[(1, 1331), float64] */;
    %157 = reshape(%155, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %158 = reshape(%156, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
    %159 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %160 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
    %161 = @func_689(%157, %158) /* ty=Tensor[(11, 11, 11), float64] */;
    %162 = %159.2;
    %163 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
    (%160, %161, %var_2621, meta[relay.Constant][11] /* ty=Tensor[(1, 1331), float64] */, %162, %163)
  };
  %164(%var_2639) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */
}

def @func_4280() -> Tensor[(4, 5, 9), float32] {
  %166 = fn () -> Tensor[(4, 5, 9), float32] {
    %165 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
    %165.0
  };
  %166() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_7020() -> (Tensor[(4, 5, 9), float32],) {
  %167 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %168 = %167.0;
  (%168,)
}

def @func_6810() -> Tensor[(4, 5, 9), float32] {
  %169 = @func_3036() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %169.0
}

def @func_4922(%var_4920: Tensor[(4, 13, 14), float64], %var_4921: Tensor[(4, 13, 14), float64]) -> Tensor[(4, 13, 14), float64] {
  %174 = fn (%var_4914: Tensor[(4, 13, 14), float64], %var_4915: Tensor[(4, 13, 14), float64]) -> Tensor[(4, 13, 14), float64] {
    %170 = cast(%var_4915, dtype="float64") /* ty=Tensor[(4, 13, 14), float64] */;
    %171 = shape_of(%var_4914, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%var_4914, dtype="float64") /* ty=Tensor[(4, 13, 14), float64] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%172, %173) /* ty=Tensor[(4, 13, 14), float64] */
  };
  %174(%var_4920, %var_4921) /* ty=Tensor[(4, 13, 14), float64] */
}

def @func_6730() -> Tensor[(4, 5, 9), float32] {
  %176 = fn () -> Tensor[(4, 5, 9), float32] {
    %175 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %175.0
  };
  %176() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_4450() -> (Tensor[(1331), float64],) {
  @func_4448() /* ty=(Tensor[(1331), float64],) */
}

def @func_3022(%var_3020: Tensor[(121), float64]) -> (Tensor[(11, 11, 11), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32], Tensor[(121), bool], Tensor[(121), float64]) {
  @func_3019(%var_3020) /* ty=(Tensor[(11, 11, 11), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32], Tensor[(121), bool], Tensor[(121), float64]) */
}

def @func_3244(%var_3242: Tensor[(10, 13, 13), int16]) -> (Tensor[(10, 13, 13), int16], Tensor[(4, 5, 9), float64], Tensor[(10, 13, 13), float64]) {
  @func_3241(%var_3242) /* ty=(Tensor[(10, 13, 13), int16], Tensor[(4, 5, 9), float64], Tensor[(10, 13, 13), float64]) */
}

def @func_4063(%var_4061: Tensor[(15, 9, 4), int8], %var_4062: Tensor[(15, 9, 4), int8]) -> Tensor[(15, 9, 4), bool] {
  %181 = fn (%var_4051: Tensor[(15, 9, 4), int8], %var_4052: Tensor[(15, 9, 4), int8]) -> Tensor[(15, 9, 4), bool] {
    %177 = cast(%var_4052, dtype="bool") /* ty=Tensor[(15, 9, 4), bool] */;
    %178 = shape_of(%var_4051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %179 = cast(%var_4051, dtype="bool") /* ty=Tensor[(15, 9, 4), bool] */;
    %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%179, %180) /* ty=Tensor[(15, 9, 4), bool] */
  };
  %181(%var_4061, %var_4062) /* ty=Tensor[(15, 9, 4), bool] */
}

def @func_6221(%var_6218: Tensor[(9, 5, 13), float32], %var_6219: float64, %var_6220: Tensor[(9, 5, 13), bool]) -> (Tensor[(180), float32], float64, Tensor[(9, 5, 13), uint64], Tensor[(9, 5, 13), int64]) {
  @func_6216(%var_6218, %var_6219, %var_6220) /* ty=(Tensor[(180), float32], float64, Tensor[(9, 5, 13), uint64], Tensor[(9, 5, 13), int64]) */
}

def @func_4448() -> (Tensor[(1331), float64],) {
  %182 = @func_3683() /* ty=(Tensor[(1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %183 = %182.0;
  (%183,)
}

def @func_6135() -> (Tensor[(121), bool], Tensor[(121), float32]) {
  @func_6133() /* ty=(Tensor[(121), bool], Tensor[(121), float32]) */
}

def @func_4909() -> (Tensor[(9, 12, 7), uint32], Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) {
  %184 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 12, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %185 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 12, 7), uint32] */, dtype="uint32") /* ty=Tensor[(9, 12, 7), uint32] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %188 = cast(meta[relay.Constant][14] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %189 = reshape(%188, newshape=[]) /* ty=int16 */;
  %190 = @func_1989(%189) /* ty=(Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) */;
  %191 = bitwise_or(%186, %187) /* ty=Tensor[(9, 12, 7), uint32] */;
  %192 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
  %193 = %190.2;
  (%191, %192, %193, meta[relay.Constant][14] /* ty=int16 */)
}

def @func_5591(%var_5554: Tensor[(4, 5, 9), float32], %var_5565: float64) -> (Tensor[(4, 5, 9), uint16], float64, float64, Tensor[(1331), float32], Tensor[(1331), float64]) {
  %194 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %195 = cast(%var_5554, dtype="uint16") /* ty=Tensor[(4, 5, 9), uint16] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint16") /* ty=Tensor[(4, 5, 9), uint16] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %199 = cast(%194, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %200 = cast(%var_5565, dtype="float64") /* ty=float64 */;
  %201 = reshape(%199, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %202 = reshape(%200, newshape=[]) /* ty=float64 */;
  %203 = @func_2333(%201, %202) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %204 = cast(meta[relay.Constant][15] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %205 = reshape(%204, newshape=[1331]) /* ty=Tensor[(1331), float64] */;
  %206 = @func_4730(%205) /* ty=(Tensor[(1331), float32], Tensor[(1331), float32]) */;
  %207 = bitwise_and(%197, %198) /* ty=Tensor[(4, 5, 9), uint16] */;
  %208 = %203.2;
  %209 = %206.0;
  (%207, %208, %var_5565, %209, meta[relay.Constant][15] /* ty=Tensor[(1331), float64] */)
}

def @func_5719() -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) {
  %214 = fn () -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) {
    %210 = @func_4949() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %211 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
    %212 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
    %213 = %210.0;
    (%211, %212, %213)
  };
  %214() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) */
}

def @func_2337(%var_2335: Tensor[(4, 5, 9), float32], %var_2336: float64) -> (Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) {
  @func_2333(%var_2335, %var_2336) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */
}

def @func_3193() -> (Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) {
  @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */
}

def @func_5985(%var_5980: Tensor[(15, 10, 9), int16], %var_5981: Tensor[(15, 10, 9), int16], %var_5982: Tensor[(15, 10, 9), bool], %var_5983: uint64, %var_5984: Tensor[(121), float64]) -> (Tensor[(15, 10, 9), bool], Tensor[(15, 10, 9), float64], Tensor[(121), bool], uint64, Tensor[(648), uint64], Tensor[(121), float64]) {
  %235 = fn (%var_5961: Tensor[(15, 10, 9), int16], %var_5962: Tensor[(15, 10, 9), int16], %var_5967: Tensor[(15, 10, 9), bool], %var_5974: uint64, %var_5976: Tensor[(121), float64]) -> (Tensor[(15, 10, 9), bool], Tensor[(15, 10, 9), float64], Tensor[(121), bool], uint64, Tensor[(648), uint64], Tensor[(121), float64]) {
    %215 = cast(%var_5962, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
    %216 = shape_of(%var_5961, dtype="int32") /* ty=Tensor[(3), int32] */;
    %217 = cast(%var_5961, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
    %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %219 = greater_equal(%217, %218) /* ty=Tensor[(15, 10, 9), bool] */;
    %220 = cast(%var_5967, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
    %221 = shape_of(%219, dtype="int32") /* ty=Tensor[(3), int32] */;
    %222 = cast(%219, dtype="bool") /* ty=Tensor[(15, 10, 9), bool] */;
    %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %224 = cast(%var_5962, dtype="float64") /* ty=Tensor[(15, 10, 9), float64] */;
    %225 = cast(%var_5974, dtype="uint64") /* ty=uint64 */;
    %226 = cast(meta[relay.Constant][16] /* ty=Tensor[(648), uint64] */, dtype="uint64") /* ty=Tensor[(648), uint64] */;
    %227 = cast(%var_5976, dtype="float64") /* ty=Tensor[(121), float64] */;
    %228 = reshape(%225, newshape=[]) /* ty=uint64 */;
    %229 = reshape(%226, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
    %230 = reshape(%227, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
    %231 = @func_2836(%228, %229, %230) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
    %232 = logical_or(%222, %223) /* ty=Tensor[(15, 10, 9), bool] */;
    %233 = atanh(%224) /* ty=Tensor[(15, 10, 9), float64] */;
    %234 = %231.1;
    (%232, %233, %234, %var_5974, meta[relay.Constant][16] /* ty=Tensor[(648), uint64] */, %var_5976)
  };
  %235(%var_5980, %var_5981, %var_5982, %var_5983, %var_5984) /* ty=(Tensor[(15, 10, 9), bool], Tensor[(15, 10, 9), float64], Tensor[(121), bool], uint64, Tensor[(648), uint64], Tensor[(121), float64]) */
}

def @func_3990() -> Tensor[(4, 5, 9), float32] {
  @func_3988() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_827(%var_825: Tensor[(1331), float64], %var_826: Tensor[(55, 6), uint16]) -> (Tensor[(4, 3, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(2, 11, 15), uint16], Tensor[(55, 6), uint16]) {
  %251 = fn (%var_815: Tensor[(1331), float64], %var_818: Tensor[(55, 6), uint16]) -> (Tensor[(4, 3, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(2, 11, 15), uint16], Tensor[(55, 6), uint16]) {
    %236 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 3, 15), float32] */, dtype="float32") /* ty=Tensor[(4, 3, 15), float32] */;
    %237 = cast(meta[relay.Constant][18] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
    %238 = cast(%var_815, dtype="float64") /* ty=Tensor[(1331), float64] */;
    %239 = reshape(%237, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %240 = reshape(%238, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
    %241 = cast(%var_818, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
    %242 = cast(%var_818, dtype="uint16") /* ty=Tensor[(55, 6), uint16] */;
    %243 = cast(meta[relay.Constant][18] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
    %244 = reshape(%241, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %245 = reshape(%242, newshape=[2, 11, 15]) /* ty=Tensor[(2, 11, 15), uint16] */;
    %246 = reshape(%243, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %247 = @func_757(%244, %245, %246) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) */;
    %248 = sqrt(%236) /* ty=Tensor[(4, 3, 15), float32] */;
    %249 = @func_689(%239, %240) /* ty=Tensor[(11, 11, 11), float64] */;
    %250 = %247.0;
    (%248, %249, meta[relay.Constant][18] /* ty=Tensor[(121), float64] */, %var_815, %250, %var_818)
  };
  %251(%var_825, %var_826) /* ty=(Tensor[(4, 3, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(2, 11, 15), uint16], Tensor[(55, 6), uint16]) */
}

def @func_6027() -> (Tensor[(4, 5, 9), float64], Tensor[(121), int32], Tensor[(11, 11), float64]) {
  @func_6025() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(121), int32], Tensor[(11, 11), float64]) */
}

def @func_5595(%var_5593: Tensor[(4, 5, 9), float32], %var_5594: float64) -> (Tensor[(4, 5, 9), uint16], float64, float64, Tensor[(1331), float32], Tensor[(1331), float64]) {
  @func_5591(%var_5593, %var_5594) /* ty=(Tensor[(4, 5, 9), uint16], float64, float64, Tensor[(1331), float32], Tensor[(1331), float64]) */
}

def @func_2461() -> (Tensor[(4, 5, 9), float32],) {
  %253 = fn () -> (Tensor[(4, 5, 9), float32],) {
    %252 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
    (%252,)
  };
  %253() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_3368(%var_3366: Tensor[(648), uint64], %var_3367: Tensor[(121), float64]) -> (Tensor[(150), float32], Tensor[(4, 5, 9), int16], Tensor[(150), float32], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(9, 6, 12), uint64], Tensor[(15, 5, 2), float32]) {
  @func_3364(%var_3366, %var_3367) /* ty=(Tensor[(150), float32], Tensor[(4, 5, 9), int16], Tensor[(150), float32], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(9, 6, 12), uint64], Tensor[(15, 5, 2), float32]) */
}

def @func_5142(%var_5140: Tensor[(648), uint64], %var_5141: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64]) {
  @func_5138(%var_5140, %var_5141) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64]) */
}

def @func_6133() -> (Tensor[(121), bool], Tensor[(121), float32]) {
  %254 = @func_5236() /* ty=(int16, Tensor[(121), float64]) */;
  %255 = %254.1;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(121), float64] */;
  %257 = acos(%256) /* ty=Tensor[(121), float64] */;
  %258 = cast(%257, dtype="bool") /* ty=Tensor[(121), bool] */;
  %259 = shape_of(%255, dtype="int32") /* ty=Tensor[(1), int32] */;
  %260 = cast(%255, dtype="bool") /* ty=Tensor[(121), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?), bool] */;
  %262 = cast(%255, dtype="float32") /* ty=Tensor[(121), float32] */;
  %263 = shape_of(%257, dtype="int32") /* ty=Tensor[(1), int32] */;
  %264 = cast(%257, dtype="float32") /* ty=Tensor[(121), float32] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?), float32] */;
  %266 = less_equal(%260, %261) /* ty=Tensor[(121), bool] */;
  %267 = minimum(%264, %265) /* ty=Tensor[(121), float32] */;
  (%266, %267)
}

def @func_2659() -> (Tensor[(121), float64],) {
  %270 = fn () -> (Tensor[(121), float64],) {
    %268 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %269 = %268.3;
    (%269,)
  };
  %270() /* ty=(Tensor[(121), float64],) */
}

def @func_5156() -> (Tensor[(4, 5, 9), float32],) {
  @func_5154() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @main(%var_7090: uint8, %var_7091: Tensor[(14, 4, 12), uint8], %var_7108: Tensor[(648), uint64]) -> (Tensor[(14, 4, 12), bool], Tensor[(1, 121), float64], Tensor[(648), uint64], Tensor[(121), float64], Tensor[(4, 5, 9), float64], Tensor[(6, 30), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(14, 4, 12), uint64]) {
  %271 = cast(%var_7090, dtype="bool") /* ty=bool */;
  %272 = cast(%var_7091, dtype="bool") /* ty=Tensor[(14, 4, 12), bool] */;
  %273 = cast(%var_7108, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %274 = cast(meta[relay.Constant][19] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %275 = reshape(%273, newshape=[648]) /* ty=Tensor[(648), uint64] */;
  %276 = reshape(%274, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %277 = @func_5142(%275, %276) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64]) */;
  %278 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 30), float32] */, dtype="float32") /* ty=Tensor[(6, 30), float32] */;
  %279 = cast(meta[relay.Constant][19] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %280 = reshape(%278, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %281 = reshape(%279, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %282 = @func_6654(%280, %281) /* ty=(Tensor[(4, 5, 9), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(4, 5, 9), float32]) */;
  %283 = @func_6721() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64]) */;
  %284 = @func_5345() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %285 = cast(%var_7091, dtype="float64") /* ty=Tensor[(14, 4, 12), float64] */;
  %286 = asinh(%285) /* ty=Tensor[(14, 4, 12), float64] */;
  %287 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 4, 12), float64] */, dtype="uint64") /* ty=Tensor[(14, 4, 12), uint64] */;
  %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%286, dtype="uint64") /* ty=Tensor[(14, 4, 12), uint64] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %291 = less_equal(%271, %272) /* ty=Tensor[(14, 4, 12), bool] */;
  %292 = %277.1;
  %293 = %282.0;
  %294 = %283.0;
  %295 = %284.0;
  %296 = minimum(%289, %290) /* ty=Tensor[(14, 4, 12), uint64] */;
  (%291, %292, %var_7108, meta[relay.Constant][19] /* ty=Tensor[(121), float64] */, %293, meta[relay.Constant][20] /* ty=Tensor[(6, 30), float32] */, %294, %295, %296)
}

def @func_1814(%var_1809: Tensor[(15, 2, 8), float32]) -> (Tensor[(15, 2, 8), float32], Tensor[(15, 2, 8), float64]) {
  %297 = cast(%var_1809, dtype="float32") /* ty=Tensor[(15, 2, 8), float32] */;
  %298 = cast(%var_1809, dtype="float64") /* ty=Tensor[(15, 2, 8), float64] */;
  %299 = log(%297) /* ty=Tensor[(15, 2, 8), float32] */;
  %300 = sqrt(%298) /* ty=Tensor[(15, 2, 8), float64] */;
  (%299, %300)
}

def @func_1061(%var_1044: float64) -> (Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) {
  %301 = cast(%var_1044, dtype="bool") /* ty=bool */;
  %302 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 4, 2), float64] */, dtype="bool") /* ty=Tensor[(8, 4, 2), bool] */;
  %303 = cast(%var_1044, dtype="float64") /* ty=float64 */;
  %304 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 9, 6), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 6), float64] */;
  %305 = not_equal(%301, %302) /* ty=Tensor[(8, 4, 2), bool] */;
  %306 = multiply(%303, %304) /* ty=Tensor[(1, 9, 6), float64] */;
  (%305, %306)
}

def @func_1432(%var_1424: Tensor[(15, 5, 2), float32]) -> (Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) {
  %307 = cast(%var_1424, dtype="float32") /* ty=Tensor[(15, 5, 2), float32] */;
  %308 = cast(%var_1424, dtype="float64") /* ty=Tensor[(15, 5, 2), float64] */;
  %309 = cos(%307) /* ty=Tensor[(15, 5, 2), float32] */;
  %310 = cosh(%308) /* ty=Tensor[(15, 5, 2), float64] */;
  (%309, %310)
}

def @func_6216(%var_6150: Tensor[(9, 5, 13), float32], %var_6158: float64, %var_6205: Tensor[(9, 5, 13), bool]) -> (Tensor[(180), float32], float64, Tensor[(9, 5, 13), uint64], Tensor[(9, 5, 13), int64]) {
  %311 = cast(%var_6150, dtype="float32") /* ty=Tensor[(9, 5, 13), float32] */;
  %312 = acosh(%311) /* ty=Tensor[(9, 5, 13), float32] */;
  %313 = cast(meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %314 = cast(%var_6158, dtype="float64") /* ty=float64 */;
  %315 = reshape(%313, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %316 = reshape(%314, newshape=[]) /* ty=float64 */;
  %317 = @func_2333(%315, %316) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
  %318 = %317.2;
  %319 = cast(%312, dtype="uint64") /* ty=Tensor[(9, 5, 13), uint64] */;
  %320 = cast(%318, dtype="uint64") /* ty=uint64 */;
  %321 = cast(%312, dtype="bool") /* ty=Tensor[(9, 5, 13), bool] */;
  %322 = cast(%318, dtype="bool") /* ty=bool */;
  %323 = logical_and(%321, %322) /* ty=Tensor[(9, 5, 13), bool] */;
  %324 = cast(%var_6205, dtype="int64") /* ty=Tensor[(9, 5, 13), int64] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="int64") /* ty=Tensor[(9, 5, 13), int64] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %328 = right_shift(%319, %320) /* ty=Tensor[(9, 5, 13), uint64] */;
  %329 = add(%326, %327) /* ty=Tensor[(9, 5, 13), int64] */;
  (meta[relay.Constant][24] /* ty=Tensor[(180), float32] */, %var_6158, %328, %329)
}

def @func_4856(%var_4771: Tensor[(14, 3, 1), float32], %var_4829: float64) -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float64], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], float64, float64, Tensor[(4, 5, 9), float32], Tensor[(14, 3, ?), bool]) {
  %330 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %331 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %332 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  %334 = cast(%var_4829, dtype="float64") /* ty=float64 */;
  %335 = reshape(%333, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
  %336 = reshape(%334, newshape=[]) /* ty=float64 */;
  %337 = @func_4253(%335, %336) /* ty=(Tensor[(4, 5, 9), int16], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), int64], float64, Tensor[(4, 5, 9), float32]) */;
  %338 = cast(%var_4771, dtype="float32") /* ty=Tensor[(14, 3, 1), float32] */;
  %339 = exp(%338) /* ty=Tensor[(14, 3, 1), float32] */;
  %340 = cast(%339, dtype="float64") /* ty=Tensor[(14, 3, 1), float64] */;
  %341 = acos(%340) /* ty=Tensor[(14, 3, 1), float64] */;
  %342 = cast(%var_4771, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %343 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%339, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %346 = greater(%344, %345) /* ty=Tensor[(14, 3, ?), bool] */;
  %347 = cast(%346, dtype="bool") /* ty=Tensor[(14, 3, ?), bool] */;
  %348 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%341, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %351 = not_equal(%349, %350) /* ty=Tensor[(14, 3, ?), bool] */;
  %352 = cast(%339, dtype="bool") /* ty=Tensor[(14, 3, 1), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(14, 3, ?), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %356 = %330.0;
  %357 = %331.0;
  %358 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %359 = %337.3;
  %360 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %361 = greater_equal(%354, %355) /* ty=Tensor[(14, 3, ?), bool] */;
  (%332, %356, %357, %358, %359, %var_4829, %360, %361)
}

def @func_2836(%var_2823: uint64, %var_2824: Tensor[(9, 6, 12), uint64], %var_2830: Tensor[(1, 121), float64]) -> (Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) {
  %362 = cast(%var_2823, dtype="uint64") /* ty=uint64 */;
  %363 = cast(%var_2824, dtype="uint64") /* ty=Tensor[(9, 6, 12), uint64] */;
  %364 = cast(%var_2830, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %365 = reshape(%364, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %366 = cast(meta[relay.Constant][25] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %367 = reshape(%366, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float32] */;
  %368 = @func_1432(%367) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */;
  %369 = right_shift(%362, %363) /* ty=Tensor[(9, 6, 12), uint64] */;
  %370 = @func_2719(%365) /* ty=Tensor[(121), bool] */;
  %371 = %368.1;
  (%369, %370, %var_2830, %371, meta[relay.Constant][25] /* ty=Tensor[(150), float32] */)
}

def @func_6487() -> (Tensor[(9, 9, 5), float32],) {
  %372 = @func_5790() /* ty=(Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) */;
  %373 = %372.0;
  (%373,)
}

def @func_5792() -> (Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) {
  @func_5790() /* ty=(Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) */
}

def @func_4129(%var_4127: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  %374 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %375 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %376 = cast(%var_4127, dtype="float64") /* ty=Tensor[(121), float64] */;
  %377 = reshape(%376, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %378 = @func_2638(%377) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
  %379 = %374.0;
  %380 = %375.0;
  %381 = %378.0;
  (%379, %380, %381, %var_4127)
}

def @func_2246() -> Tensor[(4, 5, 9), float32] {
  %382 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 5, 9), float64] */, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %383 = acos(%382) /* ty=Tensor[(4, 5, 9), float64] */;
  %384 = cast(%383, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
  sqrt(%384) /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_3019(%var_3015: Tensor[(121), float64]) -> (Tensor[(11, 11, 11), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32], Tensor[(121), bool], Tensor[(121), float64]) {
  %385 = @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */;
  %386 = cast(meta[relay.Constant][27] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %387 = reshape(%386, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float32] */;
  %388 = @func_1432(%387) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */;
  %389 = cast(%var_3015, dtype="float64") /* ty=Tensor[(121), float64] */;
  %390 = reshape(%389, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %391 = %385.1;
  %392 = %388.1;
  %393 = @func_2719(%390) /* ty=Tensor[(121), bool] */;
  (%391, %392, meta[relay.Constant][27] /* ty=Tensor[(150), float32] */, %393, %var_3015)
}

def @func_5254() -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) {
  %394 = @func_4949() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %395 = %394.0;
  %396 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  (%395, %396)
}

def @func_2841(%var_2838: uint64, %var_2839: Tensor[(9, 6, 12), uint64], %var_2840: Tensor[(1, 121), float64]) -> (Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) {
  @func_2836(%var_2838, %var_2839, %var_2840) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */
}

def @func_5817() -> (Tensor[(4, 5, 9), float32],) {
  %399 = fn () -> (Tensor[(4, 5, 9), float32],) {
    %397 = @func_5344() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %398 = %397.0;
    (%398,)
  };
  %399() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_2810() -> Tensor[(4, 5, 9), float32] {
  %400 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %400.0
}

def @func_6460(%var_6410: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1331), float64], Tensor[(12, 13, 13), float64], Tensor[(156), float64], Tensor[(2028), float64], Tensor[(121), int32], Tensor[(121), uint64], Tensor[(121), float64]) {
  %401 = @func_6356() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %402 = cast(%var_6410, dtype="float64") /* ty=Tensor[(121), float64] */;
  %403 = reshape(%402, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %404 = @func_4323(%403) /* ty=(Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) */;
  %405 = cast(meta[relay.Constant][28] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %406 = cast(meta[relay.Constant][29] /* ty=Tensor[(2028), float64] */, dtype="float64") /* ty=Tensor[(2028), float64] */;
  %407 = reshape(%405, newshape=[12, 13, 1]) /* ty=Tensor[(12, 13, 1), float64] */;
  %408 = reshape(%406, newshape=[12, 13, 13]) /* ty=Tensor[(12, 13, 13), float64] */;
  %409 = @func_5212(%407, %408) /* ty=(Tensor[(12, 13, 13), float64],) */;
  %410 = @func_6025() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(121), int32], Tensor[(11, 11), float64]) */;
  %411 = cast(%var_6410, dtype="float64") /* ty=Tensor[(121), float64] */;
  %412 = log2(%411) /* ty=Tensor[(121), float64] */;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(121), float64] */;
  %414 = acosh(%413) /* ty=Tensor[(121), float64] */;
  %415 = cast(%412, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(1), int32] */;
  %417 = cast(%414, dtype="uint64") /* ty=Tensor[(121), uint64] */;
  %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %419 = cast(%412, dtype="float64") /* ty=Tensor[(121), float64] */;
  %420 = %401.0;
  %421 = %404.4;
  %422 = %409.0;
  %423 = %410.1;
  %424 = add(%417, %418) /* ty=Tensor[(121), uint64] */;
  %425 = asinh(%419) /* ty=Tensor[(121), float64] */;
  (%420, %421, %422, meta[relay.Constant][28] /* ty=Tensor[(156), float64] */, meta[relay.Constant][29] /* ty=Tensor[(2028), float64] */, %423, %424, %425)
}

def @func_5376(%var_5374: Tensor[(7, 2, 10), float64]) -> (Tensor[(7, 2, 10), float64], Tensor[(4, 5, 9), float32]) {
  @func_5373(%var_5374) /* ty=(Tensor[(7, 2, 10), float64], Tensor[(4, 5, 9), float32]) */
}

def @func_6025() -> (Tensor[(4, 5, 9), float64], Tensor[(121), int32], Tensor[(11, 11), float64]) {
  %426 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %427 = cast(meta[relay.Constant][30] /* ty=Tensor[(11, 11), float64] */, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
  %428 = reshape(%427, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %429 = @func_4160(%428) /* ty=(Tensor[(121), int32],) */;
  %430 = %426.0;
  %431 = %429.0;
  (%430, %431, meta[relay.Constant][30] /* ty=Tensor[(11, 11), float64] */)
}

def @func_757(%var_731: Tensor[(2, 11, 15), uint16], %var_735: Tensor[(2, 11, 15), uint16], %var_742: Tensor[(121), float64]) -> (Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) {
  %432 = cast(%var_731, dtype="uint16") /* ty=Tensor[(2, 11, 15), uint16] */;
  %433 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2, 11, 15), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %434 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 11, 15), uint16] */, dtype="uint16") /* ty=Tensor[(2, 11, 15), uint16] */;
  %435 = dyn.reshape(%432, %433, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %436 = cast(%var_735, dtype="bool") /* ty=Tensor[(2, 11, 15), bool] */;
  %437 = shape_of(%var_731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %438 = cast(%var_731, dtype="bool") /* ty=Tensor[(2, 11, 15), bool] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %440 = less(%438, %439) /* ty=Tensor[(2, 11, 15), bool] */;
  %441 = cast(%440, dtype="float32") /* ty=Tensor[(2, 11, 15), float32] */;
  %442 = cast(%var_742, dtype="float64") /* ty=Tensor[(121), float64] */;
  %443 = cast(meta[relay.Constant][32] /* ty=Tensor[(1331, 1), float64] */, dtype="float64") /* ty=Tensor[(1331, 1), float64] */;
  %444 = reshape(%442, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %445 = reshape(%443, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %446 = cast(%var_742, dtype="float64") /* ty=Tensor[(121), float64] */;
  %447 = cast(meta[relay.Constant][32] /* ty=Tensor[(1331, 1), float64] */, dtype="float64") /* ty=Tensor[(1331, 1), float64] */;
  %448 = reshape(%446, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %449 = reshape(%447, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %450 = bitwise_xor(%434, %435) /* ty=Tensor[(2, 11, 15), uint16] */;
  %451 = atan(%441) /* ty=Tensor[(2, 11, 15), float32] */;
  %452 = @func_689(%444, %445) /* ty=Tensor[(11, 11, 11), float64] */;
  %453 = @func_689(%448, %449) /* ty=Tensor[(11, 11, 11), float64] */;
  (%450, %451, %452, %var_742, meta[relay.Constant][32] /* ty=Tensor[(1331, 1), float64] */, %453)
}

def @func_5215(%var_5213: Tensor[(12, 13, 1), float64], %var_5214: Tensor[(12, 13, 13), float64]) -> (Tensor[(12, 13, 13), float64],) {
  %457 = fn (%var_5205: Tensor[(12, 13, 1), float64], %var_5206: Tensor[(12, 13, 13), float64]) -> (Tensor[(12, 13, 13), float64],) {
    %454 = cast(%var_5205, dtype="float64") /* ty=Tensor[(12, 13, 1), float64] */;
    %455 = cast(%var_5206, dtype="float64") /* ty=Tensor[(12, 13, 13), float64] */;
    %456 = divide(%454, %455) /* ty=Tensor[(12, 13, 13), float64] */;
    (%456,)
  };
  %457(%var_5213, %var_5214) /* ty=(Tensor[(12, 13, 13), float64],) */
}

def @func_5345() -> (Tensor[(4, 5, 9), float32],) {
  %460 = fn () -> (Tensor[(4, 5, 9), float32],) {
    %458 = @func_5154() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %459 = %458.0;
    (%459,)
  };
  %460() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_7076() -> Tensor[(4, 5, 9), float32] {
  @func_7074() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_4079(%var_4077: Tensor[(15, 4, 8), int32]) -> (Tensor[(15, 4, 8), int32],) {
  @func_4076(%var_4077) /* ty=(Tensor[(15, 4, 8), int32],) */
}

def @func_5256() -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) {
  @func_5254() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32]) */
}

def @func_4632(%var_4579: Tensor[(1331), float64], %var_4609: uint64, %var_4610: Tensor[(162, 4), uint64]) -> (Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(1331), bool], uint64, Tensor[(162, 4), uint64], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  %461 = @func_3824() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */;
  %462 = cast(meta[relay.Constant][33] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %463 = cast(%var_4579, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %464 = reshape(%462, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %465 = reshape(%463, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %466 = @func_689(%464, %465) /* ty=Tensor[(11, 11, 11), float64] */;
  %467 = cast(%466, dtype="bool") /* ty=Tensor[(11, 11, 11), bool] */;
  %468 = shape_of(%var_4579, dtype="int32") /* ty=Tensor[(1), int32] */;
  %469 = cast(%var_4579, dtype="bool") /* ty=Tensor[(1331), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?), bool] */;
  %471 = @func_2392() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) */;
  %472 = cast(%var_4609, dtype="uint64") /* ty=uint64 */;
  %473 = cast(%var_4610, dtype="uint64") /* ty=Tensor[(162, 4), uint64] */;
  %474 = cast(meta[relay.Constant][33] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
  %475 = reshape(%472, newshape=[]) /* ty=uint64 */;
  %476 = reshape(%473, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %477 = reshape(%474, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %478 = @func_2836(%475, %476, %477) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %479 = %478.1;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(121), float64] */;
  %481 = %461.0;
  %482 = not_equal(%469, %470) /* ty=Tensor[(1331), bool] */;
  %483 = %471.0;
  %484 = exp(%480) /* ty=Tensor[(121), float64] */;
  (%481, meta[relay.Constant][33] /* ty=Tensor[(121), float64] */, %482, %var_4609, %var_4610, %483, %484)
}

def @func_3840() -> Tensor[(1331), float64] {
  %486 = fn () -> Tensor[(1331), float64] {
    %485 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
    %485.0
  };
  %486() /* ty=Tensor[(1331), float64] */
}

def @func_5432(%var_5413: uint64, %var_5415: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(9, 12, 7), uint32]) {
  %487 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %488 = cast(%var_5413, dtype="uint64") /* ty=uint64 */;
  %489 = cast(meta[relay.Constant][34] /* ty=Tensor[(648), uint64] */, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %490 = cast(%var_5415, dtype="float64") /* ty=Tensor[(121), float64] */;
  %491 = reshape(%488, newshape=[]) /* ty=uint64 */;
  %492 = reshape(%489, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %493 = reshape(%490, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %494 = @func_2836(%491, %492, %493) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %495 = @func_4909() /* ty=(Tensor[(9, 12, 7), uint32], Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
  %496 = %487.0;
  %497 = %494.2;
  %498 = %495.0;
  (%496, %497, %var_5413, meta[relay.Constant][34] /* ty=Tensor[(648), uint64] */, %var_5415, %498)
}

def @func_6518() -> (Tensor[(3, 9, 9), float64],) {
  @func_6516() /* ty=(Tensor[(3, 9, 9), float64],) */
}

def @func_6760(%var_6758: Tensor[(4, 5, 9), float32]) -> Tensor[(4, 5, 9), bool] {
  @func_6757(%var_6758) /* ty=Tensor[(4, 5, 9), bool] */
}

def @func_4028() -> Tensor[(121), float64] {
  %500 = fn () -> Tensor[(121), float64] {
    %499 = @func_2658() /* ty=(Tensor[(121), float64],) */;
    %499.0
  };
  %500() /* ty=Tensor[(121), float64] */
}

def @func_6812() -> Tensor[(4, 5, 9), float32] {
  @func_6810() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_4860(%var_4858: Tensor[(14, 3, 1), float32], %var_4859: float64) -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float64], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], float64, float64, Tensor[(4, 5, 9), float32], Tensor[(14, 3, ?), bool]) {
  @func_4856(%var_4858, %var_4859) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float64], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], float64, float64, Tensor[(4, 5, 9), float32], Tensor[(14, 3, ?), bool]) */
}

def @func_4950() -> (Tensor[(4, 5, 9), float32],) {
  %502 = fn () -> (Tensor[(4, 5, 9), float32],) {
    %501 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
    (%501,)
  };
  %502() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_6578() -> Tensor[(1, 121), float32] {
  %508 = fn () -> Tensor[(1, 121), float32] {
    %503 = @func_5054() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) */;
    %504 = %503.1;
    %505 = cast(%504, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
    %506 = atanh(%505) /* ty=Tensor[(1, 121), float64] */;
    %507 = cast(%506, dtype="float32") /* ty=Tensor[(1, 121), float32] */;
    rsqrt(%507) /* ty=Tensor[(1, 121), float32] */
  };
  %508() /* ty=Tensor[(1, 121), float32] */
}

def @func_3191() -> (Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) {
  %509 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %510 = cast(%509, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %511 = cast(meta[relay.Constant][35] /* ty=Tensor[(121, 1), float64] */, dtype="float64") /* ty=Tensor[(121, 1), float64] */;
  %512 = reshape(%511, newshape=[121]) /* ty=Tensor[(121), float64] */;
  %513 = @func_3130(%512) /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) */;
  %514 = log10(%510) /* ty=Tensor[(4, 5, 9), float64] */;
  %515 = %513.3;
  (%514, %515, meta[relay.Constant][35] /* ty=Tensor[(121, 1), float64] */)
}

def @func_3132(%var_3131: Tensor[(121), float64]) -> (Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) {
  %527 = fn (%var_3079: Tensor[(121), float64]) -> (Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) {
    %516 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
    %517 = cast(%var_3079, dtype="float64") /* ty=Tensor[(121), float64] */;
    %518 = reshape(%517, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %519 = @func_2638(%518) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */;
    %520 = cast(%var_3079, dtype="float64") /* ty=Tensor[(121), float64] */;
    %521 = cast(meta[relay.Constant][36] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
    %522 = reshape(%520, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %523 = reshape(%521, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
    %524 = %516.1;
    %525 = %519.0;
    %526 = @func_689(%522, %523) /* ty=Tensor[(11, 11, 11), float64] */;
    (%524, %525, %var_3079, %526, meta[relay.Constant][36] /* ty=Tensor[(1331), float64] */)
  };
  %527(%var_3131) /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) */
}

def @func_6925(%var_6920: Tensor[(1, 10, 7), float64], %var_6921: Tensor[(8, 10, 7), float64], %var_6922: Tensor[(8, 10, 7), float64], %var_6923: uint64, %var_6924: Tensor[(648), uint64]) -> (Tensor[(8, 10, 7), uint8], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(1331), float64]) {
  %545 = fn (%var_6896: Tensor[(1, 10, 7), float64], %var_6897: Tensor[(8, 10, 7), float64], %var_6904: Tensor[(8, 10, 7), float64], %var_6910: uint64, %var_6911: Tensor[(648), uint64]) -> (Tensor[(8, 10, 7), uint8], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(1331), float64]) {
    %528 = cast(%var_6896, dtype="float64") /* ty=Tensor[(1, 10, 7), float64] */;
    %529 = cast(%var_6897, dtype="float64") /* ty=Tensor[(8, 10, 7), float64] */;
    %530 = floor_divide(%528, %529) /* ty=Tensor[(8, 10, 7), float64] */;
    %531 = cast(%var_6904, dtype="uint8") /* ty=Tensor[(8, 10, 7), uint8] */;
    %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
    %533 = cast(%530, dtype="uint8") /* ty=Tensor[(8, 10, 7), uint8] */;
    %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %535 = cast(%var_6910, dtype="uint64") /* ty=uint64 */;
    %536 = cast(%var_6911, dtype="uint64") /* ty=Tensor[(648), uint64] */;
    %537 = cast(meta[relay.Constant][37] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
    %538 = reshape(%535, newshape=[]) /* ty=uint64 */;
    %539 = reshape(%536, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
    %540 = reshape(%537, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
    %541 = @func_2836(%538, %539, %540) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
    %542 = right_shift(%533, %534) /* ty=Tensor[(8, 10, 7), uint8] */;
    %543 = %541.2;
    %544 = @func_3839() /* ty=Tensor[(1331), float64] */;
    (%542, %543, %var_6910, %var_6911, meta[relay.Constant][37] /* ty=Tensor[(121), float64] */, %544)
  };
  %545(%var_6920, %var_6921, %var_6922, %var_6923, %var_6924) /* ty=(Tensor[(8, 10, 7), uint8], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(1331), float64]) */
}

def @func_3825() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) {
  %571 = fn () -> (Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) {
    %546 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
    %547 = cast(%546, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
    %548 = tan(%547) /* ty=Tensor[(4, 5, 9), float64] */;
    %549 = cast(%546, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %550 = shape_of(%548, dtype="int32") /* ty=Tensor[(3), int32] */;
    %551 = cast(%548, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %553 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %554 = cast(%546, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
    %555 = asin(%554) /* ty=Tensor[(4, 5, 9), float64] */;
    %556 = cast(%555, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %557 = cast(meta[relay.Constant][38] /* ty=Tensor[(1690), int16] */, dtype="int16") /* ty=Tensor[(1690), int16] */;
    %558 = reshape(%557, newshape=[10, 13, 13]) /* ty=Tensor[(10, 13, 13), int16] */;
    %559 = @func_3241(%558) /* ty=(Tensor[(10, 13, 13), int16], Tensor[(4, 5, 9), float64], Tensor[(10, 13, 13), float64]) */;
    %560 = cast(meta[relay.Constant][38] /* ty=Tensor[(1690), int16] */, dtype="float64") /* ty=Tensor[(1690), float64] */;
    %561 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
    %562 = cast(meta[relay.Constant][39] /* ty=Tensor[(121, 1), float64] */, dtype="float64") /* ty=Tensor[(121, 1), float64] */;
    %563 = reshape(%562, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %564 = multiply(%551, %552) /* ty=Tensor[(4, 5, 9), float32] */;
    %565 = %553.0;
    %566 = exp(%556) /* ty=Tensor[(4, 5, 9), float32] */;
    %567 = %559.2;
    %568 = sinh(%560) /* ty=Tensor[(1690), float64] */;
    %569 = %561.0;
    %570 = @func_3583(%563) /* ty=Tensor[(121), float64] */;
    (%564, %565, %566, %567, %568, %569, %570, meta[relay.Constant][39] /* ty=Tensor[(121, 1), float64] */)
  };
  %571() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(10, 13, 13), float64], Tensor[(1690), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(121, 1), float64]) */
}

def @func_5401(%var_5392: Tensor[(40), uint32]) -> (Tensor[(16, 9, 16), float32], Tensor[(4, 2, 5), uint64], Tensor[(40), uint32]) {
  %572 = cast(meta[relay.Constant][40] /* ty=Tensor[(16, 9, 16), float32] */, dtype="float32") /* ty=Tensor[(16, 9, 16), float32] */;
  %573 = cast(%var_5392, dtype="uint32") /* ty=Tensor[(40), uint32] */;
  %574 = reshape(%573, newshape=[4, 2, 5]) /* ty=Tensor[(4, 2, 5), uint32] */;
  %575 = @func_4431(%574) /* ty=(Tensor[(4, 2, 5), uint64], Tensor[(4, 2, 5), float32]) */;
  %576 = log(%572) /* ty=Tensor[(16, 9, 16), float32] */;
  %577 = %575.0;
  (%576, %577, %var_5392)
}

def @func_1064(%var_1062: float64) -> (Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) {
  @func_1061(%var_1062) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */
}

def @func_2719(%var_2701: Tensor[(121), float64]) -> Tensor[(121), bool] {
  %578 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %579 = %578.0;
  %580 = cast(%var_2701, dtype="bool") /* ty=Tensor[(121), bool] */;
  %581 = shape_of(%579, dtype="int32") /* ty=Tensor[(1), int32] */;
  %582 = cast(%579, dtype="bool") /* ty=Tensor[(121), bool] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?), bool] */;
  greater(%582, %583) /* ty=Tensor[(121), bool] */
}

def @func_1435(%var_1433: Tensor[(15, 5, 2), float32]) -> (Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) {
  @func_1432(%var_1433) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */
}

def @func_3932() -> Tensor[(9, 9, 5), float32] {
  %585 = fn () -> Tensor[(9, 9, 5), float32] {
    %584 = cast(meta[relay.Constant][41] /* ty=Tensor[(9, 9, 5), float32] */, dtype="float32") /* ty=Tensor[(9, 9, 5), float32] */;
    atanh(%584) /* ty=Tensor[(9, 9, 5), float32] */
  };
  %585() /* ty=Tensor[(9, 9, 5), float32] */
}

def @func_6358() -> (Tensor[(4, 5, 9), float32],) {
  @func_6356() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_5154() -> (Tensor[(4, 5, 9), float32],) {
  %586 = @func_5054() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) */;
  %587 = %586.0;
  (%587,)
}

def @func_762(%var_759: Tensor[(2, 11, 15), uint16], %var_760: Tensor[(2, 11, 15), uint16], %var_761: Tensor[(121), float64]) -> (Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) {
  @func_757(%var_759, %var_760, %var_761) /* ty=(Tensor[(2, 11, 15), uint16], Tensor[(2, 11, 15), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331, 1), float64], Tensor[(11, 11, 11), float64]) */
}

def @func_6463(%var_6461: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1331), float64], Tensor[(12, 13, 13), float64], Tensor[(156), float64], Tensor[(2028), float64], Tensor[(121), int32], Tensor[(121), uint64], Tensor[(121), float64]) {
  @func_6460(%var_6461) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1331), float64], Tensor[(12, 13, 13), float64], Tensor[(156), float64], Tensor[(2028), float64], Tensor[(121), int32], Tensor[(121), uint64], Tensor[(121), float64]) */
}

def @func_6654(%var_6652: Tensor[(4, 5, 9), float32], %var_6653: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(4, 5, 9), float32]) {
  @func_6650(%var_6652, %var_6653) /* ty=(Tensor[(4, 5, 9), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(4, 5, 9), float32]) */
}

def @func_1991(%var_1990: int16) -> (Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) {
  %606 = fn (%var_1947: int16) -> (Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) {
    %588 = cast(%var_1947, dtype="int16") /* ty=int16 */;
    %589 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 16, 13), int16] */, dtype="int16") /* ty=Tensor[(15, 16, 13), int16] */;
    %590 = cast(meta[relay.Constant][42] /* ty=Tensor[(15, 16, 13), int16] */, dtype="float32") /* ty=Tensor[(15, 16, 13), float32] */;
    %591 = cast(%var_1947, dtype="float64") /* ty=float64 */;
    %592 = reshape(%591, newshape=[]) /* ty=float64 */;
    %593 = @func_1061(%592) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */;
    %594 = cast(meta[relay.Constant][43] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
    %595 = cast(meta[relay.Constant][44] /* ty=Tensor[(1, 1331), float64] */, dtype="float64") /* ty=Tensor[(1, 1331), float64] */;
    %596 = reshape(%594, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
    %597 = reshape(%595, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
    %598 = cast(%var_1947, dtype="float64") /* ty=float64 */;
    %599 = reshape(%598, newshape=[]) /* ty=float64 */;
    %600 = @func_1061(%599) /* ty=(Tensor[(8, 4, 2), bool], Tensor[(1, 9, 6), float64]) */;
    %601 = subtract(%588, %589) /* ty=Tensor[(15, 16, 13), int16] */;
    %602 = tan(%590) /* ty=Tensor[(15, 16, 13), float32] */;
    %603 = %593.1;
    %604 = @func_689(%596, %597) /* ty=Tensor[(11, 11, 11), float64] */;
    %605 = %600.1;
    (%601, %602, %603, %604, meta[relay.Constant][43] /* ty=Tensor[(121), float64] */, meta[relay.Constant][44] /* ty=Tensor[(1, 1331), float64] */, %605)
  };
  %606(%var_1990) /* ty=(Tensor[(15, 16, 13), int16], Tensor[(15, 16, 13), float32], Tensor[(1, 9, 6), float64], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1, 1331), float64], Tensor[(1, 9, 6), float64]) */
}

def @func_4875() -> Tensor[(1331), float64] {
  @func_3839() /* ty=Tensor[(1331), float64] */
}

def @func_2905() -> (Tensor[(1331), float64],) {
  %607 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
  %608 = %607.4;
  (%608,)
}

def @func_6311(%var_6309: Tensor[(240), float32], %var_6310: Tensor[(480), int32]) -> (Tensor[(4, 5, 9), bool], Tensor[(240), float32], Tensor[(1331), float64], Tensor[(4, 5, 9), float32], Tensor[(15, 2, 8), int16], Tensor[(15, 2, 8), float32], Tensor[(15, 4, 8), int32], Tensor[(480), int32]) {
  %632 = fn (%var_6269: Tensor[(240), float32], %var_6303: Tensor[(480), int32]) -> (Tensor[(4, 5, 9), bool], Tensor[(240), float32], Tensor[(1331), float64], Tensor[(4, 5, 9), float32], Tensor[(15, 2, 8), int16], Tensor[(15, 2, 8), float32], Tensor[(15, 4, 8), int32], Tensor[(480), int32]) {
    %609 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %610 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
    %611 = @func_4760() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121), float64]) */;
    %612 = cast(%var_6269, dtype="float32") /* ty=Tensor[(240), float32] */;
    %613 = reshape(%612, newshape=[15, 2, 8]) /* ty=Tensor[(15, 2, 8), float32] */;
    %614 = @func_1814(%613) /* ty=(Tensor[(15, 2, 8), float32], Tensor[(15, 2, 8), float64]) */;
    %615 = %614.1;
    %616 = cast(%615, dtype="float32") /* ty=Tensor[(15, 2, 8), float32] */;
    %617 = erf(%616) /* ty=Tensor[(15, 2, 8), float32] */;
    %618 = cast(meta[relay.Constant][45] /* ty=Tensor[(15, 2, 8), float32] */, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
    %619 = shape_of(%617, dtype="int32") /* ty=Tensor[(3), int32] */;
    %620 = cast(%617, dtype="int16") /* ty=Tensor[(15, 2, 8), int16] */;
    %621 = dyn.reshape(%618, %619, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %622 = cast(%617, dtype="float32") /* ty=Tensor[(15, 2, 8), float32] */;
    %623 = cast(%var_6303, dtype="int32") /* ty=Tensor[(480), int32] */;
    %624 = reshape(%623, newshape=[15, 4, 8]) /* ty=Tensor[(15, 4, 8), int32] */;
    %625 = @func_4076(%624) /* ty=(Tensor[(15, 4, 8), int32],) */;
    %626 = %609.1;
    %627 = %610.0;
    %628 = %611.0;
    %629 = bitwise_or(%620, %621) /* ty=Tensor[(15, 2, 8), int16] */;
    %630 = log10(%622) /* ty=Tensor[(15, 2, 8), float32] */;
    %631 = %625.0;
    (%626, %var_6269, %627, %628, %629, %630, %631, %var_6303)
  };
  %632(%var_6309, %var_6310) /* ty=(Tensor[(4, 5, 9), bool], Tensor[(240), float32], Tensor[(1331), float64], Tensor[(4, 5, 9), float32], Tensor[(15, 2, 8), int16], Tensor[(15, 2, 8), float32], Tensor[(15, 4, 8), int32], Tensor[(480), int32]) */
}

def @func_6650(%var_6607: Tensor[(4, 5, 9), float32], %var_6622: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float64], Tensor[(1331), float64], Tensor[(121), float64], Tensor[(4, 5, 9), float32]) {
  %633 = @func_5790() /* ty=(Tensor[(9, 9, 5), float32], Tensor[(4, 5, 9), float32]) */;
  %634 = %633.1;
  %635 = cast(%var_6607, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %636 = shape_of(%634, dtype="int32") /* ty=Tensor[(3), int32] */;
  %637 = cast(%634, dtype="float64") /* ty=Tensor[(4, 5, 9), float64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %639 = cast(%var_6622, dtype="float64") /* ty=Tensor[(121), float64] */;
  %640 = reshape(%639, newshape=[11, 11]) /* ty=Tensor[(11, 11), float64] */;
  %641 = @func_4323(%640) /* ty=(Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) */;
  %642 = @func_5344() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %643 = divide(%637, %638) /* ty=Tensor[(4, 5, 9), float64] */;
  %644 = %641.3;
  %645 = %642.0;
  (%643, %644, %var_6622, %645)
}

def @func_5436(%var_5434: uint64, %var_5435: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(9, 12, 7), uint32]) {
  @func_5432(%var_5434, %var_5435) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(9, 12, 7), uint32]) */
}

def @func_6831() -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64]) {
  @func_6829() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(121), float64]) */
}

def @func_5237() -> (int16, Tensor[(121), float64]) {
  %650 = fn () -> (int16, Tensor[(121), float64]) {
    %646 = @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */;
    %647 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %648 = %646.2;
    %649 = %647.3;
    (%648, %649)
  };
  %650() /* ty=(int16, Tensor[(121), float64]) */
}

def @func_2888() -> Tensor[(4, 5, 9), float32] {
  %651 = fn () -> Tensor[(4, 5, 9), float32] {
    @func_2810() /* ty=Tensor[(4, 5, 9), float32] */
  };
  %651() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_3583(%var_3572: Tensor[(121), float64]) -> Tensor[(121), float64] {
  %652 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %653 = %652.0;
  %654 = cast(%var_3572, dtype="float64") /* ty=Tensor[(121), float64] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(1), int32] */;
  %656 = cast(%653, dtype="float64") /* ty=Tensor[(121), float64] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?), float64] */;
  divide(%656, %657) /* ty=Tensor[(121), float64] */
}

def @func_2988() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) {
  @func_2986() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */
}

def @func_4325(%var_4324: Tensor[(11, 11), float64]) -> (Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) {
  %672 = fn (%var_4308: Tensor[(11, 11), float64]) -> (Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) {
    %658 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
    %659 = %658.0;
    %660 = cast(meta[relay.Constant][46] /* ty=Tensor[(1331), float64] */, dtype="int64") /* ty=Tensor[(1331), int64] */;
    %661 = shape_of(%659, dtype="int32") /* ty=Tensor[(1), int32] */;
    %662 = cast(%659, dtype="int64") /* ty=Tensor[(1331), int64] */;
    %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?), int64] */;
    %664 = cast(%var_4308, dtype="float64") /* ty=Tensor[(11, 11), float64] */;
    %665 = reshape(%664, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %666 = @func_3130(%665) /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), float32], Tensor[(121), float64], Tensor[(11, 11, 11), float64], Tensor[(1331), float64]) */;
    %667 = cast(meta[relay.Constant][46] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
    %668 = bitwise_or(%662, %663) /* ty=Tensor[(1331), int64] */;
    %669 = %666.3;
    %670 = atan(%667) /* ty=Tensor[(1331), float64] */;
    %671 = @func_3839() /* ty=Tensor[(1331), float64] */;
    (%668, %669, %var_4308, %670, %671)
  };
  %672(%var_4324) /* ty=(Tensor[(1331), int64], Tensor[(11, 11, 11), float64], Tensor[(11, 11), float64], Tensor[(1331), float64], Tensor[(1331), float64]) */
}

def @func_3586(%var_3584: Tensor[(121), float64]) -> Tensor[(121), float64] {
  @func_3583(%var_3584) /* ty=Tensor[(121), float64] */
}

def @func_7022() -> (Tensor[(4, 5, 9), float32],) {
  @func_7020() /* ty=(Tensor[(4, 5, 9), float32],) */
}

def @func_4132(%var_4130: Tensor[(121), float64]) -> (Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  @func_4129(%var_4130) /* ty=(Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(4, 5, 9), float32], Tensor[(121), float64]) */
}

def @func_4732(%var_4731: Tensor[(1331), float64]) -> (Tensor[(1331), float32], Tensor[(1331), float32]) {
  %687 = fn (%var_4669: Tensor[(1331), float64]) -> (Tensor[(1331), float32], Tensor[(1331), float32]) {
    %673 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
    %674 = %673.0;
    %675 = cast(%var_4669, dtype="float32") /* ty=Tensor[(1331), float32] */;
    %676 = shape_of(%674, dtype="int32") /* ty=Tensor[(1), int32] */;
    %677 = cast(%674, dtype="float32") /* ty=Tensor[(1331), float32] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?), float32] */;
    %679 = cast(%674, dtype="uint8") /* ty=Tensor[(1331), uint8] */;
    %680 = shape_of(%var_4669, dtype="int32") /* ty=Tensor[(1), int32] */;
    %681 = cast(%var_4669, dtype="uint8") /* ty=Tensor[(1331), uint8] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %683 = left_shift(%681, %682) /* ty=Tensor[(1331), uint8] */;
    %684 = cast(%683, dtype="float32") /* ty=Tensor[(1331), float32] */;
    %685 = floor_mod(%677, %678) /* ty=Tensor[(1331), float32] */;
    %686 = atanh(%684) /* ty=Tensor[(1331), float32] */;
    (%685, %686)
  };
  %687(%var_4731) /* ty=(Tensor[(1331), float32], Tensor[(1331), float32]) */
}

def @func_3364(%var_3332: Tensor[(648), uint64], %var_3333: Tensor[(121), float64]) -> (Tensor[(150), float32], Tensor[(4, 5, 9), int16], Tensor[(150), float32], uint64, Tensor[(648), uint64], Tensor[(121), float64], Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64], Tensor[(9, 6, 12), uint64], Tensor[(15, 5, 2), float32]) {
  %688 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %689 = @func_2887() /* ty=Tensor[(4, 5, 9), float32] */;
  %690 = cast(%689, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
  %691 = shape_of(%688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%688, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %694 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %695 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %696 = cast(%var_3333, dtype="float64") /* ty=Tensor[(121), float64] */;
  %697 = reshape(%694, newshape=[]) /* ty=uint64 */;
  %698 = reshape(%695, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %699 = reshape(%696, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %700 = @func_2836(%697, %698, %699) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %701 = @func_3036() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %702 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
  %703 = cast(meta[relay.Constant][48] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %704 = cast(%var_3332, dtype="uint64") /* ty=Tensor[(648), uint64] */;
  %705 = cast(%var_3333, dtype="float64") /* ty=Tensor[(121), float64] */;
  %706 = reshape(%703, newshape=[]) /* ty=uint64 */;
  %707 = reshape(%704, newshape=[9, 6, 12]) /* ty=Tensor[(9, 6, 12), uint64] */;
  %708 = reshape(%705, newshape=[1, 121]) /* ty=Tensor[(1, 121), float64] */;
  %709 = @func_2836(%706, %707, %708) /* ty=(Tensor[(9, 6, 12), uint64], Tensor[(121), bool], Tensor[(1, 121), float64], Tensor[(15, 5, 2), float64], Tensor[(150), float32]) */;
  %710 = cast(meta[relay.Constant][47] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %711 = reshape(%710, newshape=[15, 5, 2]) /* ty=Tensor[(15, 5, 2), float32] */;
  %712 = @func_1432(%711) /* ty=(Tensor[(15, 5, 2), float32], Tensor[(15, 5, 2), float64]) */;
  %713 = %712.1;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(15, 5, 2), float32] */;
  %715 = minimum(%692, %693) /* ty=Tensor[(4, 5, 9), int16] */;
  %716 = %700.4;
  %717 = %701.0;
  %718 = %702.2;
  %719 = %709.0;
  %720 = sinh(%714) /* ty=Tensor[(15, 5, 2), float32] */;
  (meta[relay.Constant][47] /* ty=Tensor[(150), float32] */, %715, %716, meta[relay.Constant][48] /* ty=uint64 */, %var_3332, %var_3333, %717, %718, %719, %720)
}

def @func_6356() -> (Tensor[(4, 5, 9), float32],) {
  %721 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
  %722 = %721.0;
  (%722,)
}

def @func_4256(%var_4254: Tensor[(4, 5, 9), float32], %var_4255: float64) -> (Tensor[(4, 5, 9), int16], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), int64], float64, Tensor[(4, 5, 9), float32]) {
  %740 = fn (%var_4196: Tensor[(4, 5, 9), float32], %var_4209: float64) -> (Tensor[(4, 5, 9), int16], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), int64], float64, Tensor[(4, 5, 9), float32]) {
    %723 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
    %724 = cast(%var_4196, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
    %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
    %726 = cast(%723, dtype="int16") /* ty=Tensor[(4, 5, 9), int16] */;
    %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %728 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %729 = cast(%var_4196, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %730 = cast(%var_4209, dtype="float64") /* ty=float64 */;
    %731 = reshape(%729, newshape=[4, 5, 9]) /* ty=Tensor[(4, 5, 9), float32] */;
    %732 = reshape(%730, newshape=[]) /* ty=float64 */;
    %733 = @func_2333(%731, %732) /* ty=(Tensor[(4, 5, 9), int64], Tensor[(1, 9, 6), float64], float64) */;
    %734 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
    %735 = cast(%734, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %736 = bitwise_xor(%726, %727) /* ty=Tensor[(4, 5, 9), int16] */;
    %737 = %728.1;
    %738 = %733.0;
    %739 = atanh(%735) /* ty=Tensor[(4, 5, 9), float32] */;
    (%736, %737, %738, %var_4209, %739)
  };
  %740(%var_4254, %var_4255) /* ty=(Tensor[(4, 5, 9), int16], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), int64], float64, Tensor[(4, 5, 9), float32]) */
}

def @func_4760() -> (Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  %741 = @func_2658() /* ty=(Tensor[(121), float64],) */;
  %742 = @func_4279() /* ty=Tensor[(4, 5, 9), float32] */;
  %743 = %741.0;
  (%742, %743)
}

def @func_2248() -> Tensor[(4, 5, 9), float32] {
  @func_2246() /* ty=Tensor[(4, 5, 9), float32] */
}

def @func_3463(%var_3462: Tensor[(121), float64]) -> (Tensor[(121), bool], Tensor[(121), float32]) {
  %761 = fn (%var_3411: Tensor[(121), float64]) -> (Tensor[(121), bool], Tensor[(121), float32]) {
    %744 = @func_2593() /* ty=(Tensor[(1, 9, 6), float64], Tensor[(4, 5, 9), bool], Tensor[(11, 11, 11), float64], Tensor[(121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), bool], Tensor[(4, 5, 9), bool]) */;
    %745 = %744.3;
    %746 = cast(meta[relay.Constant][49] /* ty=Tensor[(121), float64] */, dtype="float64") /* ty=Tensor[(121), float64] */;
    %747 = shape_of(%745, dtype="int32") /* ty=Tensor[(1), int32] */;
    %748 = cast(%745, dtype="float64") /* ty=Tensor[(121), float64] */;
    %749 = dyn.reshape(%746, %747, newshape=[]) /* ty=Tensor[(?), float64] */;
    %750 = floor_divide(%748, %749) /* ty=Tensor[(121), float64] */;
    %751 = cast(%750, dtype="bool") /* ty=Tensor[(121), bool] */;
    %752 = shape_of(%745, dtype="int32") /* ty=Tensor[(1), int32] */;
    %753 = cast(%745, dtype="bool") /* ty=Tensor[(121), bool] */;
    %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?), bool] */;
    %755 = cast(%var_3411, dtype="float32") /* ty=Tensor[(121), float32] */;
    %756 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(121), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %757 = cast(meta[relay.Constant][49] /* ty=Tensor[(121), float64] */, dtype="float32") /* ty=Tensor[(121), float32] */;
    %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?), float32] */;
    %759 = less(%753, %754) /* ty=Tensor[(121), bool] */;
    %760 = mod(%757, %758) /* ty=Tensor[(121), float32] */;
    (%759, %760)
  };
  %761(%var_3462) /* ty=(Tensor[(121), bool], Tensor[(121), float32]) */
}

def @func_3684() -> (Tensor[(1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) {
  %770 = fn () -> (Tensor[(1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) {
    %762 = @func_2905() /* ty=(Tensor[(1331), float64],) */;
    %763 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
    %764 = @func_2460() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %765 = %764.0;
    %766 = cast(%765, dtype="float32") /* ty=Tensor[(4, 5, 9), float32] */;
    %767 = %762.0;
    %768 = %763.1;
    %769 = asinh(%766) /* ty=Tensor[(4, 5, 9), float32] */;
    (%767, %768, %769)
  };
  %770() /* ty=(Tensor[(1331), float64], Tensor[(11, 11, 11), float64], Tensor[(4, 5, 9), float32]) */
}

def @func_5055() -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) {
  %786 = fn () -> (Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) {
    %771 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 121), float64] */, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
    %772 = reshape(%771, newshape=[121]) /* ty=Tensor[(121), float64] */;
    %773 = @func_2719(%772) /* ty=Tensor[(121), bool] */;
    %774 = cast(%773, dtype="float32") /* ty=Tensor[(121), float32] */;
    %775 = asin(%774) /* ty=Tensor[(121), float32] */;
    %776 = cast(%773, dtype="int8") /* ty=Tensor[(121), int8] */;
    %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(1), int32] */;
    %778 = cast(%775, dtype="int8") /* ty=Tensor[(121), int8] */;
    %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?), int8] */;
    %780 = subtract(%778, %779) /* ty=Tensor[(121), int8] */;
    %781 = cast(%780, dtype="float64") /* ty=Tensor[(121), float64] */;
    %782 = @func_4448() /* ty=(Tensor[(1331), float64],) */;
    %783 = @func_3988() /* ty=Tensor[(4, 5, 9), float32] */;
    %784 = atanh(%781) /* ty=Tensor[(121), float64] */;
    %785 = %782.0;
    (%783, meta[relay.Constant][50] /* ty=Tensor[(1, 121), float64] */, %784, %785)
  };
  %786() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(1, 121), float64], Tensor[(121), float64], Tensor[(1331), float64]) */
}

def @func_6489() -> (Tensor[(9, 9, 5), float32],) {
  @func_6487() /* ty=(Tensor[(9, 9, 5), float32],) */
}

def @func_1817(%var_1815: Tensor[(15, 2, 8), float32]) -> (Tensor[(15, 2, 8), float32], Tensor[(15, 2, 8), float64]) {
  @func_1814(%var_1815) /* ty=(Tensor[(15, 2, 8), float32], Tensor[(15, 2, 8), float64]) */
}

def @func_6721() -> (Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64]) {
  %791 = fn () -> (Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64]) {
    %787 = @func_6499() /* ty=(Tensor[(4, 5, 9), float32],) */;
    %788 = @func_3191() /* ty=(Tensor[(4, 5, 9), float64], Tensor[(11, 11, 11), float64], Tensor[(121, 1), float64]) */;
    %789 = %787.0;
    %790 = %788.2;
    (%789, %790)
  };
  %791() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121, 1), float64]) */
}

def @func_6516() -> (Tensor[(3, 9, 9), float64],) {
  %792 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 9, 9), float64] */, dtype="float64") /* ty=Tensor[(3, 9, 9), float64] */;
  %793 = cosh(%792) /* ty=Tensor[(3, 9, 9), float64] */;
  (%793,)
}

def @func_4877() -> Tensor[(1331), float64] {
  @func_4875() /* ty=Tensor[(1331), float64] */
}

def @func_4162(%var_4161: Tensor[(121), float64]) -> (Tensor[(121), int32],) {
  %800 = fn (%var_4152: Tensor[(121), float64]) -> (Tensor[(121), int32],) {
    %794 = @func_4027() /* ty=Tensor[(121), float64] */;
    %795 = cast(%var_4152, dtype="int32") /* ty=Tensor[(121), int32] */;
    %796 = shape_of(%794, dtype="int32") /* ty=Tensor[(1), int32] */;
    %797 = cast(%794, dtype="int32") /* ty=Tensor[(121), int32] */;
    %798 = dyn.reshape(%795, %796, newshape=[]) /* ty=Tensor[(?), int32] */;
    %799 = bitwise_xor(%797, %798) /* ty=Tensor[(121), int32] */;
    (%799,)
  };
  %800(%var_4161) /* ty=(Tensor[(121), int32],) */
}

def @func_2907() -> (Tensor[(1331), float64],) {
  @func_2905() /* ty=(Tensor[(1331), float64],) */
}

def @func_4911() -> (Tensor[(9, 12, 7), uint32], Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) {
  @func_4909() /* ty=(Tensor[(9, 12, 7), uint32], Tensor[(4, 5, 9), float32], Tensor[(1, 9, 6), float64], int16) */
}

def @func_4762() -> (Tensor[(4, 5, 9), float32], Tensor[(121), float64]) {
  @func_4760() /* ty=(Tensor[(4, 5, 9), float32], Tensor[(121), float64]) */
}

def @func_2392() -> (Tensor[(4, 5, 9), float32], Tensor[(11, 11, 11), float64], Tensor[(1, 121), float64], Tensor[(1331), float64], Tensor[(4, 5, 9), float32]) {
  %801 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 121), float64] */, dtype="float64") /* ty=Tensor[(1, 121), float64] */;
  %802 = cast(meta[relay.Constant][53] /* ty=Tensor[(1331), float64] */, dtype="float64") /* ty=Tensor[(1331), float64] */;
  %803 = reshape(%801, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float64] */;
  %804 = reshape(%802, newshape=[11, 11, 11]) /* ty=Tensor[(11, 11, 11), float64] */;
  %805 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  %806 = @func_689(%803, %804) /* ty=Tensor[(11, 11, 11), float64] */;
  %807 = @func_2246() /* ty=Tensor[(4, 5, 9), float32] */;
  (%805, %806, meta[relay.Constant][52] /* ty=Tensor[(1, 121), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1331), float64] */, %807)
}

def @func_6061(%var_6060: Tensor[(4, 4, 2), float64]) -> (Tensor[(4, 4, 2), float32],) {
  %812 = fn (%var_6051: Tensor[(4, 4, 2), float64]) -> (Tensor[(4, 4, 2), float32],) {
    %808 = cast(%var_6051, dtype="float64") /* ty=Tensor[(4, 4, 2), float64] */;
    %809 = tan(%808) /* ty=Tensor[(4, 4, 2), float64] */;
    %810 = cast(%809, dtype="float32") /* ty=Tensor[(4, 4, 2), float32] */;
    %811 = atan(%810) /* ty=Tensor[(4, 4, 2), float32] */;
    (%811,)
  };
  %812(%var_6060) /* ty=(Tensor[(4, 4, 2), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen371/build/output.py", line 2033, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:11:20] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

