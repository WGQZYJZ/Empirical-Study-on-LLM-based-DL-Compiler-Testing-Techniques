==========mod==========
#[version = "0.0.5"]
def @func_7640() -> Tensor[(5, 7, 5), float32] {
  %0 = @func_5878() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %0.0
}

def @func_7932(%var_7893: Tensor[(176), uint16], %var_7901: Tensor[(420), int64]) -> (Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(14, 14, 8), bool], Tensor[(176), uint16], Tensor[(5, 7, 16), float64], Tensor[(96), float32], Tensor[(420), int64], Tensor[(12, 12, 14), float64], Tensor[(1568), float32]) {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %2 = acos(%1) /* ty=Tensor[(12, 12, 14), float32] */;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %4 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %8 = cast(%var_7893, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %9 = reshape(%8, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), uint16] */;
  %10 = @func_7014(%9) /* ty=(Tensor[(2, 11, 8), bool], Tensor[(14, 14, 8), bool], Tensor[(1, 1568), float32], Tensor[(14, 14, 8), float32]) */;
  %11 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %12 = cast(%var_7901, dtype="int64") /* ty=Tensor[(420), int64] */;
  %13 = %10.1;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %15 = reshape(%12, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), int64] */;
  %16 = reshape(%14, newshape=[8, 196]) /* ty=Tensor[(8, 196), float32] */;
  %17 = @func_2492(%15, %16) /* ty=(Tensor[(6, 7, 10), int64], Tensor[(6, 7, 10), bool], Tensor[(1568), float32], Tensor[(96), float32], Tensor[(8, 196), float32]) */;
  %18 = cast(%2, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %19 = %17.3;
  %20 = cast(%19, dtype="float32") /* ty=Tensor[(96), float32] */;
  %21 = cast(%19, dtype="float32") /* ty=Tensor[(96), float32] */;
  %22 = cast(%13, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %23 = reshape(%20, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %24 = reshape(%21, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %25 = reshape(%22, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %26 = @func_2186(%23, %24, %25) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) */;
  %27 = minimum(%5, %6) /* ty=Tensor[(12, 12, 14), float64] */;
  %28 = cosh(%7) /* ty=Tensor[(12, 12, 14), float32] */;
  %29 = %11.1;
  %30 = rsqrt(%18) /* ty=Tensor[(12, 12, 14), float64] */;
  %31 = %26.4;
  (%27, %28, %13, %var_7893, %29, %19, %var_7901, %30, %31)
}

def @func_4090() -> (Tensor[(5, 7, 5), int64],) {
  %32 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %33 = %32.1;
  (%33,)
}

def @func_5385() -> (Tensor[(5, 7, 5), bool],) {
  %34 = @func_3941() /* ty=(Tensor[(5, 7, 5), bool],) */;
  %35 = %34.0;
  (%35,)
}

def @func_3445() -> Tensor[(5, 7, 5), float32] {
  @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_2492(%var_2454: Tensor[(6, 7, 10), int64], %var_2489: Tensor[(8, 196), float32]) -> (Tensor[(6, 7, 10), int64], Tensor[(6, 7, 10), bool], Tensor[(1568), float32], Tensor[(96), float32], Tensor[(8, 196), float32]) {
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(6, 7, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 7, 10), int64] */;
  %37 = shape_of(%var_2454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_2454, dtype="int64") /* ty=Tensor[(6, 7, 10), int64] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %40 = cast(%var_2454, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %41 = acos(%40) /* ty=Tensor[(6, 7, 10), float32] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %43 = log10(%42) /* ty=Tensor[(6, 7, 10), float32] */;
  %44 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 7, 10), float32] */, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %50 = cast(%var_2489, dtype="float32") /* ty=Tensor[(8, 196), float32] */;
  %51 = reshape(%48, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %52 = reshape(%49, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %53 = reshape(%50, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %54 = @func_2186(%51, %52, %53) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) */;
  %55 = right_shift(%38, %39) /* ty=Tensor[(6, 7, 10), int64] */;
  %56 = less(%46, %47) /* ty=Tensor[(6, 7, 10), bool] */;
  %57 = %54.4;
  (%55, %56, %57, meta[relay.Constant][3] /* ty=Tensor[(96), float32] */, %var_2489)
}

def @func_3782(%var_3780: Tensor[(1568), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) {
  %58 = cast(%var_3780, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %59 = reshape(%58, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %60 = @func_885(%59) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %61 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  %62 = %60.0;
  (%61, %62, %var_3780)
}

def @func_5887() -> Tensor[(5, 7, 5), float32] {
  %63 = @func_5427() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %63.0
}

def @func_3941() -> (Tensor[(5, 7, 5), bool],) {
  %64 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %65 = %64.0;
  %66 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %67 = %66.1;
  %68 = cast(%67, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %69 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%65, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %72 = logical_and(%70, %71) /* ty=Tensor[(5, 7, 5), bool] */;
  (%72,)
}

def @func_1599(%var_1591: Tensor[(12, 13, 3), float32]) -> (Tensor[(12, 13, 3), float32],) {
  %73 = cast(%var_1591, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  %74 = asin(%73) /* ty=Tensor[(12, 13, 3), float32] */;
  (%74,)
}

def @func_6668() -> Tensor[(5, 7, 5), float32] {
  %75 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %75.0
}

def @func_7367(%var_7358: Tensor[(14, 6, 15), bool]) -> Tensor[(14, 6, 15), bool] {
  %76 = cast(%var_7358, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %77 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(14, 6, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 6, 15), bool] */, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%78, %79) /* ty=Tensor[(14, 6, 15), bool] */
}

def @func_7197(%var_7188: Tensor[(384), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64]) {
  %80 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %81 = cast(%var_7188, dtype="float64") /* ty=Tensor[(384), float64] */;
  %82 = reshape(%81, newshape=[96, 4]) /* ty=Tensor[(96, 4), float64] */;
  %83 = @func_4780(%82) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) */;
  %84 = %80.0;
  %85 = %83.0;
  (%84, %85, %var_7188)
}

def @func_2949() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) {
  %86 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %87 = %86.1;
  %88 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %89 = cast(%88, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
  %90 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%87, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %93 = cast(%88, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %94 = subtract(%91, %92) /* ty=Tensor[(5, 7, 5), int64] */;
  %95 = asinh(%93) /* ty=Tensor[(5, 7, 5), float64] */;
  (%94, %95)
}

def @func_7159() -> (Tensor[(792), float64],) {
  %96 = @func_4514() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) */;
  %97 = %96.2;
  (%97,)
}

def @func_3407(%var_3394: Tensor[(5, 7, 16), float64]) -> Tensor[(5, 7, 16), uint8] {
  %98 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %99 = cast(%var_3394, dtype="uint8") /* ty=Tensor[(5, 7, 16), uint8] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="uint8") /* ty=Tensor[(5, 7, 16), uint8] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%101, %102) /* ty=Tensor[(5, 7, 16), uint8] */
}

def @func_7431() -> (Tensor[(5, 7, 5), int64],) {
  %103 = @func_5427() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %104 = %103.1;
  (%104,)
}

def @main(%var_8060: Tensor[(12, 3, 14), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), bool]) {
  %105 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %106 = cast(%var_8060, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %107 = acos(%106) /* ty=Tensor[(12, 3, 14), float32] */;
  %108 = cast(%107, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %109 = cast(%107, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %110 = cosh(%109) /* ty=Tensor[(12, 3, 14), float64] */;
  %111 = cast(%107, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(%110, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %115 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %116 = %105.2;
  %117 = atanh(%108) /* ty=Tensor[(12, 3, 14), float64] */;
  %118 = logical_and(%113, %114) /* ty=Tensor[(12, 3, 14), bool] */;
  (%115, %116, %117, %118)
}

def @func_7822() -> Tensor[(5, 7, 5), float32] {
  @func_4449() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_3695() -> Tensor[(5, 7, 16), float64] {
  @func_3055() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_6828(%var_6815: Tensor[(864), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(6, 16, 9), float32], Tensor[(864), float32]) {
  %119 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %120 = cast(%var_6815, dtype="float32") /* ty=Tensor[(864), float32] */;
  %121 = reshape(%120, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), float32] */;
  %122 = @func_734(%121) /* ty=(Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) */;
  %123 = %119.1;
  %124 = %122.0;
  (%123, %124, %var_6815)
}

def @func_6063() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) {
  %125 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %126 = @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */;
  %127 = %125.1;
  %128 = @func_3586() /* ty=Tensor[(5, 7, 5), float32] */;
  %129 = %126.0;
  (%127, %128, %129)
}

def @func_4920(%var_4883: Tensor[(280), float64], %var_4900: Tensor[(2, 14, 10), float32]) -> (Tensor[(280), float64], Tensor[(5, 7, 16), uint16], Tensor[(2, 14, 10), bool], Tensor[(5, 4, 2), bool], Tensor[(3), float64], Tensor[(40), float64]) {
  %130 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %131 = %130.1;
  %132 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %133 = cast(%132, dtype="uint16") /* ty=Tensor[(5, 7, 16), uint16] */;
  %134 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%131, dtype="uint16") /* ty=Tensor[(5, 7, 16), uint16] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %137 = cast(%var_4883, dtype="float64") /* ty=Tensor[(280), float64] */;
  %138 = reshape(%137, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %139 = @func_2985(%138) /* ty=Tensor[(2, 14, 10), float64] */;
  %140 = cast(%139, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %141 = sigmoid(%140) /* ty=Tensor[(2, 14, 10), float32] */;
  %142 = cast(%var_4900, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %146 = cast(meta[relay.Constant][5] /* ty=Tensor[(3), float64] */, dtype="float64") /* ty=Tensor[(3), float64] */;
  %147 = cast(meta[relay.Constant][6] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
  %148 = reshape(%146, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float64] */;
  %149 = reshape(%147, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %150 = @func_1514(%148, %149) /* ty=(Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) */;
  %151 = left_shift(%135, %136) /* ty=Tensor[(5, 7, 16), uint16] */;
  %152 = greater(%144, %145) /* ty=Tensor[(2, 14, 10), bool] */;
  %153 = %150.1;
  (%var_4883, %151, %152, %153, meta[relay.Constant][5] /* ty=Tensor[(3), float64] */, meta[relay.Constant][6] /* ty=Tensor[(40), float64] */)
}

def @func_5938(%var_5909: uint16, %var_5910: Tensor[(13, 15, 11), uint16]) -> Tensor[(13, 15, 11), uint16] {
  %154 = cast(%var_5909, dtype="uint16") /* ty=uint16 */;
  %155 = cast(%var_5910, dtype="uint16") /* ty=Tensor[(13, 15, 11), uint16] */;
  bitwise_or(%154, %155) /* ty=Tensor[(13, 15, 11), uint16] */
}

def @func_885(%var_854: Tensor[(14, 14, 8), float32]) -> (Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) {
  %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %157 = shape_of(%var_854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %158 = cast(%var_854, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %160 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %161 = shape_of(%var_854, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_854, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = greater_equal(%162, %163) /* ty=Tensor[(14, 14, 8), bool] */;
  %165 = cast(meta[relay.Constant][7] /* ty=Tensor[(14, 14, 8), float32] */, dtype="int32") /* ty=Tensor[(14, 14, 8), int32] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="int32") /* ty=Tensor[(14, 14, 8), int32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %169 = left_shift(%167, %168) /* ty=Tensor[(14, 14, 8), int32] */;
  %170 = cast(%169, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %171 = not_equal(%158, %159) /* ty=Tensor[(14, 14, 8), bool] */;
  %172 = asin(%170) /* ty=Tensor[(14, 14, 8), float32] */;
  (%171, %172)
}

def @func_4282(%var_4255: Tensor[(468), float32]) -> (Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 7, 16), float64]) {
  %173 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
  %174 = cast(%var_4255, dtype="float32") /* ty=Tensor[(468), float32] */;
  %175 = reshape(%174, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %176 = @func_1599(%175) /* ty=(Tensor[(12, 13, 3), float32],) */;
  %177 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %178 = %173.2;
  %179 = %176.0;
  %180 = %177.1;
  (%178, %179, %var_4255, %180)
}

def @func_7724() -> Tensor[(5, 7, 5), float32] {
  %181 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  acosh(%183) /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_3105(%var_3085: Tensor[(5, 15, 13), int8], %var_3094: Tensor[(3, 1), float64], %var_3095: Tensor[(40), float64]) -> (Tensor[(5, 15, 13), int8], Tensor[(40), float32], Tensor[(3, 1), float64], Tensor[(40), float64]) {
  %184 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int8") /* ty=Tensor[(5, 15, 13), int8] */;
  %185 = shape_of(%var_3085, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_3085, dtype="int8") /* ty=Tensor[(5, 15, 13), int8] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %188 = cast(%var_3094, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
  %189 = cast(%var_3095, dtype="float64") /* ty=Tensor[(40), float64] */;
  %190 = reshape(%188, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float64] */;
  %191 = reshape(%189, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %192 = @func_1514(%190, %191) /* ty=(Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) */;
  %193 = minimum(%186, %187) /* ty=Tensor[(5, 15, 13), int8] */;
  %194 = %192.2;
  (%193, %194, %var_3094, %var_3095)
}

def @func_7736() -> Tensor[(468), float32] {
  %195 = @func_5694() /* ty=(Tensor[(468), float32],) */;
  %195.0
}

def @func_2985(%var_2955: Tensor[(2, 14, 10), float64]) -> Tensor[(2, 14, 10), float64] {
  %196 = cast(%var_2955, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
  cosh(%196) /* ty=Tensor[(2, 14, 10), float64] */
}

def @func_7837() -> Tensor[(5, 7, 5), float32] {
  @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_272(%var_254: Tensor[(9, 14, 3), float32]) -> (Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) {
  %197 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 140), float64] */, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %198 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 140), float64] */, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %199 = reshape(%197, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %200 = reshape(%198, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %201 = cast(%var_254, dtype="float32") /* ty=Tensor[(9, 14, 3), float32] */;
  %202 = tan(%201) /* ty=Tensor[(9, 14, 3), float32] */;
  %203 = cast(%var_254, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %204 = shape_of(%202, dtype="int32") /* ty=Tensor[(3), int32] */;
  %205 = cast(%202, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %206 = dyn.reshape(%203, %204, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %207 = @func_141(%199, %200) /* ty=Tensor[(5, 7, 16), float64] */;
  %208 = bitwise_xor(%205, %206) /* ty=Tensor[(9, 14, 3), int8] */;
  (%207, meta[relay.Constant][9] /* ty=Tensor[(4, 140), float64] */, %208)
}

def @func_4579(%var_4560: Tensor[(15, 11, 9), int16], %var_4561: Tensor[(15, 11, 9), int16]) -> (Tensor[(15, 11, 9), int16], Tensor[(5, 7, 5), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) {
  %209 = cast(%var_4561, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %210 = shape_of(%var_4560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_4560, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = cast(meta[relay.Constant][10] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %214 = reshape(%213, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %215 = @func_3782(%214) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) */;
  %216 = minimum(%211, %212) /* ty=Tensor[(15, 11, 9), int16] */;
  %217 = %215.0;
  %218 = @func_4449() /* ty=Tensor[(5, 7, 5), float32] */;
  (%216, %217, meta[relay.Constant][10] /* ty=Tensor[(1568), float32] */, %218)
}

def @func_4230() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) {
  %219 = @func_3753() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */;
  %220 = %219.0;
  %221 = @func_3326() /* ty=Tensor[(5, 7, 16), float64] */;
  (%220, %221)
}

def @func_1514(%var_1498: Tensor[(3, 1, 1), float64], %var_1510: Tensor[(40), float64]) -> (Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) {
  %222 = cast(%var_1498, dtype="float64") /* ty=Tensor[(3, 1, 1), float64] */;
  %223 = cast(%var_1510, dtype="float64") /* ty=Tensor[(40), float64] */;
  %224 = cast(%var_1510, dtype="float64") /* ty=Tensor[(40), float64] */;
  %225 = reshape(%223, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %226 = reshape(%224, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %227 = cast(%var_1510, dtype="float32") /* ty=Tensor[(40), float32] */;
  %228 = asin(%222) /* ty=Tensor[(3, 1, 1), float64] */;
  %229 = @func_904(%225, %226) /* ty=Tensor[(5, 4, 2), bool] */;
  %230 = sin(%227) /* ty=Tensor[(40), float32] */;
  (%228, %229, %230)
}

def @func_3843() -> (Tensor[(5, 7, 5), float32],) {
  %231 = @func_3445() /* ty=Tensor[(5, 7, 5), float32] */;
  (%231,)
}

def @func_4012() -> (Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) {
  %232 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
  %233 = %232.2;
  %234 = cast(%233, dtype="float32") /* ty=Tensor[(560), float32] */;
  %235 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %236 = cast(meta[relay.Constant][11] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %237 = reshape(%236, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %238 = atanh(%234) /* ty=Tensor[(560), float32] */;
  %239 = %235.2;
  %240 = @func_3341() /* ty=Tensor[(5, 7, 5), float32] */;
  %241 = @func_2985(%237) /* ty=Tensor[(2, 14, 10), float64] */;
  (%238, %239, %240, %241, meta[relay.Constant][11] /* ty=Tensor[(280), float64] */)
}

def @func_4107() -> Tensor[(5, 7, 5), int64] {
  %242 = @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */;
  %242.0
}

def @func_5034() -> Tensor[(5, 7, 5), float32] {
  @func_3611() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_5819() -> Tensor[(5, 7, 5), float32] {
  %243 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %243.0
}

def @func_5284() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(468), float32], Tensor[(2, 14, 10), float64]) {
  %244 = @func_3326() /* ty=Tensor[(5, 7, 16), float64] */;
  %245 = cast(%244, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %246 = @func_4484() /* ty=(Tensor[(468), float32],) */;
  %247 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %248 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
  %249 = erf(%245) /* ty=Tensor[(5, 7, 16), float64] */;
  %250 = @func_4449() /* ty=Tensor[(5, 7, 5), float32] */;
  %251 = %246.0;
  %252 = %247.3;
  (%248, %249, %250, %251, %252)
}

def @func_4040(%var_4031: Tensor[(40), float64]) -> (Tensor[(560), float64], Tensor[(5, 4, 2), uint16]) {
  %253 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %254 = cast(%var_4031, dtype="float64") /* ty=Tensor[(40), float64] */;
  %255 = cast(%var_4031, dtype="float64") /* ty=Tensor[(40), float64] */;
  %256 = reshape(%254, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %257 = reshape(%255, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %258 = @func_904(%256, %257) /* ty=Tensor[(5, 4, 2), bool] */;
  %259 = cast(%var_4031, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %260 = shape_of(%258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %261 = cast(%258, dtype="uint16") /* ty=Tensor[(5, 4, 2), uint16] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %263 = %253.3;
  %264 = left_shift(%261, %262) /* ty=Tensor[(5, 4, 2), uint16] */;
  (%263, %264)
}

def @func_4854() -> Tensor[(5, 7, 16), float64] {
  @func_3695() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_5802() -> Tensor[(5, 7, 5), int64] {
  %265 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %265.0
}

def @func_5014(%var_5004: Tensor[(14, 12, 2), float64]) -> (Tensor[(14, 12, 2), uint8],) {
  %266 = cast(%var_5004, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %267 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(14, 12, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %270 = floor_mod(%268, %269) /* ty=Tensor[(14, 12, 2), float64] */;
  %271 = cast(%270, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
  %272 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(14, 12, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %273 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 12, 2), float64] */, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %275 = right_shift(%273, %274) /* ty=Tensor[(14, 12, 2), uint8] */;
  (%275,)
}

def @func_2786() -> (Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) {
  %276 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %277 = cast(%276, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %278 = sigmoid(%277) /* ty=Tensor[(5, 7, 5), float32] */;
  %279 = cast(%278, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %280 = cast(meta[relay.Constant][13] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %281 = cast(meta[relay.Constant][13] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %282 = reshape(%280, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %283 = reshape(%281, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %284 = acos(%279) /* ty=Tensor[(5, 7, 5), float64] */;
  %285 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %286 = @func_141(%282, %283) /* ty=Tensor[(5, 7, 16), float64] */;
  (%284, %285, %286, meta[relay.Constant][13] /* ty=Tensor[(560), float64] */)
}

def @func_6190(%var_6182: Tensor[(2145), uint16]) -> (Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float64], Tensor[(1568), float32], Tensor[(13, 15, 11), uint16], uint16, Tensor[(2145), uint16]) {
  %287 = cast(meta[relay.Constant][14] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %288 = cast(meta[relay.Constant][14] /* ty=Tensor[(1568), float32] */, dtype="bool") /* ty=Tensor[(1568), bool] */;
  %289 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %290 = cast(%289, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %291 = reshape(%287, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %292 = reshape(%288, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), bool] */;
  %293 = reshape(%290, newshape=[5, 7, 5]) /* ty=Tensor[(5, 7, 5), float32] */;
  %294 = @func_4355(%291, %292, %293) /* ty=(Tensor[(1568), float32], Tensor[(14, 14, 8), float64], Tensor[(5, 7, 5), float64], Tensor[(14, 14, 8), int64], Tensor[(5, 7, 5), float32]) */;
  %295 = cast(meta[relay.Constant][15] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %296 = cast(%var_6182, dtype="uint16") /* ty=Tensor[(2145), uint16] */;
  %297 = reshape(%295, newshape=[]) /* ty=uint16 */;
  %298 = reshape(%296, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint16] */;
  %299 = %294.1;
  %300 = @func_5938(%297, %298) /* ty=Tensor[(13, 15, 11), uint16] */;
  (%289, %299, meta[relay.Constant][14] /* ty=Tensor[(1568), float32] */, %300, meta[relay.Constant][15] /* ty=uint16 */, %var_6182)
}

def @func_3184() -> (Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) {
  %301 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %302 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %306 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %307 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %308 = cast(%307, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %309 = cast(%307, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %310 = reshape(%308, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %311 = reshape(%309, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %312 = greater_equal(%304, %305) /* ty=Tensor[(5, 7, 5), bool] */;
  %313 = %306.0;
  %314 = @func_141(%310, %311) /* ty=Tensor[(5, 7, 16), float64] */;
  (%312, %313, %307, %314)
}

def @func_5427() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) {
  %315 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %316 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %317 = %315.0;
  (%316, %317)
}

def @func_3341() -> Tensor[(5, 7, 5), float32] {
  %318 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %318.1
}

def @func_5630() -> (Tensor[(5, 7, 16), float64],) {
  %319 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %320 = %319.2;
  (%320,)
}

def @func_3611() -> Tensor[(5, 7, 5), float32] {
  @func_3445() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_6873() -> (Tensor[(5, 7, 16), float64],) {
  %321 = @func_5180() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64]) */;
  %322 = %321.1;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
  %324 = rsqrt(%323) /* ty=Tensor[(5, 7, 16), float32] */;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %326 = asin(%325) /* ty=Tensor[(5, 7, 16), float64] */;
  (%326,)
}

def @func_6460(%var_6383: Tensor[(2, 11, 11), float64], %var_6422: Tensor[(864), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(378), float32], Tensor[(864), float32], Tensor[(2, 11, 11), bool], Tensor[(2, 11, 11), int64]) {
  %327 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %328 = cast(%var_6422, dtype="float32") /* ty=Tensor[(864), float32] */;
  %329 = reshape(%328, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), float32] */;
  %330 = @func_734(%329) /* ty=(Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) */;
  %331 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 11), float64] */;
  %332 = shape_of(%var_6383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_6383, dtype="float64") /* ty=Tensor[(2, 11, 11), float64] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %335 = mod(%333, %334) /* ty=Tensor[(2, 11, 11), float64] */;
  %336 = cast(%335, dtype="bool") /* ty=Tensor[(2, 11, 11), bool] */;
  %337 = shape_of(%var_6383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_6383, dtype="bool") /* ty=Tensor[(2, 11, 11), bool] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %340 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 11, 11), float64] */, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %341 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%335, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %344 = maximum(%342, %343) /* ty=Tensor[(2, 11, 11), uint64] */;
  %345 = cast(%var_6383, dtype="int32") /* ty=Tensor[(2, 11, 11), int32] */;
  %346 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%344, dtype="int32") /* ty=Tensor[(2, 11, 11), int32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %349 = right_shift(%347, %348) /* ty=Tensor[(2, 11, 11), int32] */;
  %350 = cast(%349, dtype="int64") /* ty=Tensor[(2, 11, 11), int64] */;
  %351 = shape_of(%344, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%344, dtype="int64") /* ty=Tensor[(2, 11, 11), int64] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %354 = %327.0;
  %355 = %330.2;
  %356 = equal(%338, %339) /* ty=Tensor[(2, 11, 11), bool] */;
  %357 = logical_xor(%352, %353) /* ty=Tensor[(2, 11, 11), int64] */;
  (%354, %355, %var_6422, %356, %357)
}

def @func_7529() -> (Tensor[(560), float64],) {
  %358 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %359 = %358.3;
  %360 = cast(%359, dtype="float64") /* ty=Tensor[(560), float64] */;
  %361 = log10(%360) /* ty=Tensor[(560), float64] */;
  (%361,)
}

def @func_2186(%var_2162: Tensor[(2, 16, 3), float32], %var_2163: Tensor[(2, 16, 3), float32], %var_2181: Tensor[(1568), float32]) -> (Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) {
  %362 = cast(%var_2163, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %363 = shape_of(%var_2162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%var_2162, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %366 = cast(meta[relay.Constant][18] /* ty=Tensor[(112, 4), bool] */, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %367 = reshape(%366, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), bool] */;
  %368 = @func_761(%367) /* ty=(Tensor[(14, 4, 8), bool], Tensor[(14, 4, 8), float64]) */;
  %369 = cast(%var_2181, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %370 = reshape(%369, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %371 = @func_885(%370) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %372 = mod(%364, %365) /* ty=Tensor[(2, 16, 3), float32] */;
  %373 = %368.0;
  %374 = %371.1;
  (%372, %373, meta[relay.Constant][18] /* ty=Tensor[(112, 4), bool] */, %374, %var_2181)
}

def @func_4682(%var_4626: Tensor[(16, 16, 8), float64], %var_4627: Tensor[(16, 16, 8), float64]) -> (Tensor[(16, 16, 8), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), int64], Tensor[(16, 16, 8), float32]) {
  %375 = cast(%var_4627, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %376 = shape_of(%var_4626, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%var_4626, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %379 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  %380 = cast(%379, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %381 = cast(%379, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %382 = reshape(%380, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %383 = reshape(%381, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %384 = cast(%var_4627, dtype="float32") /* ty=Tensor[(16, 16, 8), float32] */;
  %385 = mod(%377, %378) /* ty=Tensor[(16, 16, 8), float64] */;
  %386 = @func_141(%382, %383) /* ty=Tensor[(5, 7, 16), float64] */;
  %387 = @func_4107() /* ty=Tensor[(5, 7, 5), int64] */;
  %388 = sin(%384) /* ty=Tensor[(16, 16, 8), float32] */;
  (%385, %379, %386, %387, %388)
}

def @func_4780(%var_4775: Tensor[(96, 4), float64]) -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) {
  %389 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %390 = cast(%var_4775, dtype="float64") /* ty=Tensor[(96, 4), float64] */;
  %391 = cast(%var_4775, dtype="float64") /* ty=Tensor[(96, 4), float64] */;
  %392 = reshape(%390, newshape=[6, 8, 8]) /* ty=Tensor[(6, 8, 8), float64] */;
  %393 = reshape(%391, newshape=[6, 8, 8]) /* ty=Tensor[(6, 8, 8), float64] */;
  %394 = @func_502(%392, %393) /* ty=(Tensor[(6, 8, 8), float64],) */;
  %395 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %396 = %389.0;
  %397 = %394.0;
  (%395, %396, %397, %var_4775)
}

def @func_2676() -> Tensor[(5, 7, 5), float32] {
  %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 7, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  cosh(%398) /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_734(%var_711: Tensor[(6, 16, 9), float32]) -> (Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) {
  %399 = cast(%var_711, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
  %400 = cast(meta[relay.Constant][20] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %401 = reshape(%400, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %402 = @func_272(%401) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */;
  %403 = log10(%399) /* ty=Tensor[(6, 16, 9), float32] */;
  %404 = %402.0;
  (%403, %404, meta[relay.Constant][20] /* ty=Tensor[(378), float32] */)
}

def @func_4484() -> (Tensor[(468), float32],) {
  %405 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
  %406 = %405.4;
  (%406,)
}

def @func_5180() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64]) {
  %407 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %408 = %407.0;
  %409 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  (%408, %409)
}

def @func_6622(%var_6574: Tensor[(9, 12, 10), float32], %var_6598: Tensor[(792), float64], %var_6615: Tensor[(9, 12, 10), float64]) -> (Tensor[(5, 7, 16), float64], Tensor[(792), float64], Tensor[(9, 12, 10), float32]) {
  %410 = cast(%var_6598, dtype="float64") /* ty=Tensor[(792), float64] */;
  %411 = reshape(%410, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float64] */;
  %412 = @func_4190(%411) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) */;
  %413 = cast(%var_6574, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %414 = exp(%413) /* ty=Tensor[(9, 12, 10), float32] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(9, 12, 10), float64] */;
  %416 = erf(%415) /* ty=Tensor[(9, 12, 10), float64] */;
  %417 = cast(%var_6615, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %421 = %412.5;
  %422 = power(%419, %420) /* ty=Tensor[(9, 12, 10), float32] */;
  (%421, %var_6598, %422)
}

def @func_5878() -> (Tensor[(5, 7, 5), float32],) {
  %423 = @func_5469() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %424 = %423.0;
  (%424,)
}

def @func_5359(%var_5351: Tensor[(2, 14, 10), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), int32], Tensor[(5, 7, 16), float64]) {
  %425 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %426 = %425.3;
  %427 = cast(%var_5351, dtype="int32") /* ty=Tensor[(2, 14, 10), int32] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="int32") /* ty=Tensor[(2, 14, 10), int32] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %431 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %432 = maximum(%429, %430) /* ty=Tensor[(2, 14, 10), int32] */;
  %433 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  (%431, %432, %433)
}

def @func_1351(%var_1326: Tensor[(6, 4, 6), uint16], %var_1327: Tensor[(6, 4, 6), uint16], %var_1347: Tensor[(40), float64]) -> (Tensor[(6, 4, 6), uint16], Tensor[(5, 7, 16), float64], Tensor[(378), float32], Tensor[(5, 4, 2), bool], Tensor[(40), float64]) {
  %434 = cast(%var_1327, dtype="uint16") /* ty=Tensor[(6, 4, 6), uint16] */;
  %435 = shape_of(%var_1326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%var_1326, dtype="uint16") /* ty=Tensor[(6, 4, 6), uint16] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %438 = cast(meta[relay.Constant][21] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %439 = reshape(%438, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %440 = @func_272(%439) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */;
  %441 = cast(%var_1347, dtype="float64") /* ty=Tensor[(40), float64] */;
  %442 = cast(%var_1347, dtype="float64") /* ty=Tensor[(40), float64] */;
  %443 = reshape(%441, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %444 = reshape(%442, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %445 = bitwise_and(%436, %437) /* ty=Tensor[(6, 4, 6), uint16] */;
  %446 = %440.0;
  %447 = @func_904(%443, %444) /* ty=Tensor[(5, 4, 2), bool] */;
  (%445, %446, meta[relay.Constant][21] /* ty=Tensor[(378), float32] */, %447, %var_1347)
}

def @func_4836(%var_4791: Tensor[(6, 4, 6), uint8], %var_4792: Tensor[(6, 4, 6), uint8], %var_4823: Tensor[(15, 280), bool]) -> (Tensor[(6, 4, 6), bool], Tensor[(2, 14, 10), float64], Tensor[(792), float64], Tensor[(15, 280), bool]) {
  %448 = cast(%var_4792, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %449 = shape_of(%var_4791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%var_4791, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %452 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 280), float64] */, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
  %453 = reshape(%452, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %454 = @func_4514() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) */;
  %455 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 280), float64] */, dtype="bool") /* ty=Tensor[(1, 280), bool] */;
  %456 = shape_of(meta[relay.Constant][22] /* ty=Tensor[(1, 280), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %457 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 280), float64] */, dtype="bool") /* ty=Tensor[(1, 280), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %459 = not_equal(%457, %458) /* ty=Tensor[(?, 280), bool] */;
  %460 = cast(%459, dtype="bool") /* ty=Tensor[(?, 280), bool] */;
  %461 = cast(%var_4823, dtype="bool") /* ty=Tensor[(15, 280), bool] */;
  %462 = equal(%450, %451) /* ty=Tensor[(6, 4, 6), bool] */;
  %463 = @func_2985(%453) /* ty=Tensor[(2, 14, 10), float64] */;
  %464 = %454.2;
  %465 = less(%460, %461) /* ty=Tensor[(15, 280), bool] */;
  (%462, %463, %464, %465)
}

def @func_5440() -> (Tensor[(5, 7, 5), float32],) {
  %466 = @func_3445() /* ty=Tensor[(5, 7, 5), float32] */;
  (%466,)
}

def @func_6878() -> (Tensor[(5, 7, 5), int64],) {
  %467 = @func_5427() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %468 = %467.1;
  (%468,)
}

def @func_4449() -> Tensor[(5, 7, 5), float32] {
  %469 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %469.1
}

def @func_3586() -> Tensor[(5, 7, 5), float32] {
  @func_3445() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_7797() -> Tensor[(5, 7, 16), float64] {
  %470 = @func_5630() /* ty=(Tensor[(5, 7, 16), float64],) */;
  %470.0
}

def @func_4514() -> (Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) {
  %471 = @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */;
  %472 = cast(meta[relay.Constant][24] /* ty=Tensor[(792), float64] */, dtype="float64") /* ty=Tensor[(792), float64] */;
  %473 = reshape(%472, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float64] */;
  %474 = @func_4190(%473) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) */;
  %475 = %471.0;
  %476 = %474.6;
  (%475, %476, meta[relay.Constant][24] /* ty=Tensor[(792), float64] */)
}

def @func_7272() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(792), float64]) {
  %477 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %478 = @func_7159() /* ty=(Tensor[(792), float64],) */;
  %479 = @func_5034() /* ty=Tensor[(5, 7, 5), float32] */;
  %480 = @func_3586() /* ty=Tensor[(5, 7, 5), float32] */;
  %481 = %477.0;
  %482 = %478.0;
  (%479, %480, %481, %482)
}

def @func_6516() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64]) {
  %483 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %484 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  %485 = %483.1;
  (%484, %485)
}

def @func_761(%var_743: Tensor[(14, 4, 8), bool]) -> (Tensor[(14, 4, 8), bool], Tensor[(14, 4, 8), float64]) {
  %486 = cast(%var_743, dtype="bool") /* ty=Tensor[(14, 4, 8), bool] */;
  %487 = shape_of(meta[relay.Constant][25] /* ty=Tensor[(14, 4, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(14, 4, 8), bool] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %490 = cast(meta[relay.Constant][25] /* ty=Tensor[(14, 4, 8), bool] */, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
  %491 = logical_and(%488, %489) /* ty=Tensor[(14, 4, 8), bool] */;
  %492 = log10(%490) /* ty=Tensor[(14, 4, 8), float64] */;
  (%491, %492)
}

def @func_3066() -> Tensor[(5, 7, 5), float32] {
  @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_904(%var_892: Tensor[(5, 4, 2), float64], %var_893: Tensor[(5, 4, 2), float64]) -> Tensor[(5, 4, 2), bool] {
  %493 = cast(%var_893, dtype="float64") /* ty=Tensor[(5, 4, 2), float64] */;
  %494 = shape_of(%var_892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_892, dtype="float64") /* ty=Tensor[(5, 4, 2), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %497 = power(%495, %496) /* ty=Tensor[(5, 4, 2), float64] */;
  %498 = cast(%var_893, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
  %499 = shape_of(%497, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%497, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%500, %501) /* ty=Tensor[(5, 4, 2), bool] */
}

def @func_6370(%var_6357: Tensor[(2, 14, 10), float64]) -> (Tensor[(468), float32], Tensor[(10, 28), float64], Tensor[(2, 14, 10), bool]) {
  %502 = @func_5694() /* ty=(Tensor[(468), float32],) */;
  %503 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 28), float64] */, dtype="float64") /* ty=Tensor[(10, 28), float64] */;
  %504 = reshape(%503, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %505 = @func_2985(%504) /* ty=Tensor[(2, 14, 10), float64] */;
  %506 = cast(%505, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
  %507 = sinh(%506) /* ty=Tensor[(2, 14, 10), float64] */;
  %508 = cast(%var_6357, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %509 = shape_of(%507, dtype="int32") /* ty=Tensor[(3), int32] */;
  %510 = cast(%507, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %512 = less_equal(%510, %511) /* ty=Tensor[(2, 14, 10), bool] */;
  %513 = cast(%507, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %514 = shape_of(%512, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%512, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %517 = %502.0;
  %518 = less(%515, %516) /* ty=Tensor[(2, 14, 10), bool] */;
  (%517, meta[relay.Constant][26] /* ty=Tensor[(10, 28), float64] */, %518)
}

def @func_5694() -> (Tensor[(468), float32],) {
  %519 = @func_4484() /* ty=(Tensor[(468), float32],) */;
  %520 = %519.0;
  (%520,)
}

def @func_3055() -> Tensor[(5, 7, 16), float64] {
  %521 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %521.2
}

def @func_7492(%var_7480: Tensor[(13, 1, 16), float32]) -> (Tensor[(13, ?, 16), float32],) {
  %522 = cast(%var_7480, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %523 = acosh(%522) /* ty=Tensor[(13, 1, 16), float32] */;
  %524 = cast(%var_7480, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %528 = divide(%526, %527) /* ty=Tensor[(13, ?, 16), float32] */;
  (%528,)
}

def @func_6985() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) {
  %529 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %530 = %529.1;
  %531 = cast(meta[relay.Constant][27] /* ty=Tensor[(5, 7, 5), float32] */, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %535 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %536 = cast(meta[relay.Constant][28] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %537 = reshape(%536, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %538 = @func_885(%537) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %539 = @func_5284() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(468), float32], Tensor[(2, 14, 10), float64]) */;
  %540 = right_shift(%533, %534) /* ty=Tensor[(5, 7, 5), int64] */;
  %541 = %535.0;
  %542 = %538.1;
  %543 = %539.0;
  (%540, %541, %542, meta[relay.Constant][28] /* ty=Tensor[(1568), float32] */, %543)
}

def @func_7506() -> (Tensor[(5, 7, 16), float64],) {
  %544 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %545 = %544.1;
  (%545,)
}

def @func_3326() -> Tensor[(5, 7, 16), float64] {
  @func_3055() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_4986(%var_4932: Tensor[(10, 16, 4), bool], %var_4933: Tensor[(10, 16, 4), bool], %var_4940: Tensor[(144), float32], %var_4979: Tensor[(10, 16, 4), bool]) -> (Tensor[(10, 16, 4), bool], Tensor[(4, 3, 12), float32], Tensor[(144), float32], Tensor[(5, 7, 5), int64], Tensor[(10, 16, 4), float64]) {
  %546 = cast(%var_4933, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
  %547 = shape_of(%var_4932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%var_4932, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %550 = cast(%var_4940, dtype="float32") /* ty=Tensor[(144), float32] */;
  %551 = reshape(%550, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), float32] */;
  %552 = @func_2624(%551) /* ty=(Tensor[(4, 3, 12), float32],) */;
  %553 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %554 = cast(%var_4979, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %555 = shape_of(%var_4932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%var_4932, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %558 = logical_and(%548, %549) /* ty=Tensor[(10, 16, 4), bool] */;
  %559 = %552.0;
  %560 = %553.1;
  %561 = floor_divide(%556, %557) /* ty=Tensor[(10, 16, 4), float64] */;
  (%558, %559, %var_4940, %560, %561)
}

def @func_7779() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) {
  %562 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  %563 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  (%562, %563)
}

def @func_5469() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) {
  %564 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %565 = %564.0;
  %566 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  (%565, %566)
}

def @func_4190(%var_4182: Tensor[(9, 11, 8), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) {
  %567 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %568 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
  %570 = cast(meta[relay.Constant][29] /* ty=Tensor[(24, 6), float32] */, dtype="float32") /* ty=Tensor[(24, 6), float32] */;
  %571 = reshape(%570, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), float32] */;
  %572 = @func_2624(%571) /* ty=(Tensor[(4, 3, 12), float32],) */;
  %573 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %574 = sinh(%573) /* ty=Tensor[(9, 1, 8), float64] */;
  %575 = cast(%574, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %576 = cast(%var_4182, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
  %577 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
  %578 = cast(%577, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %579 = %567.0;
  %580 = acos(%569) /* ty=Tensor[(5, 7, 16), float32] */;
  %581 = %572.0;
  %582 = @func_3341() /* ty=Tensor[(5, 7, 5), float32] */;
  %583 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  %584 = not_equal(%575, %576) /* ty=Tensor[(9, 11, 8), bool] */;
  %585 = log2(%578) /* ty=Tensor[(5, 7, 5), float32] */;
  (%579, %580, %581, meta[relay.Constant][29] /* ty=Tensor[(24, 6), float32] */, %582, %583, %584, %585)
}

def @func_502(%var_493: Tensor[(6, 8, 8), float64], %var_494: Tensor[(6, 8, 8), float64]) -> (Tensor[(6, 8, 8), float64],) {
  %586 = cast(%var_494, dtype="float64") /* ty=Tensor[(6, 8, 8), float64] */;
  %587 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%var_493, dtype="float64") /* ty=Tensor[(6, 8, 8), float64] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %590 = mod(%588, %589) /* ty=Tensor[(6, 8, 8), float64] */;
  (%590,)
}

def @func_7147(%var_7139: Tensor[(1485), int16]) -> (Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(1485), int16], Tensor[(5, 7, 5), float32]) {
  %591 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %592 = cast(%var_7139, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %593 = cast(%var_7139, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %594 = reshape(%592, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), int16] */;
  %595 = reshape(%593, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), int16] */;
  %596 = @func_4579(%594, %595) /* ty=(Tensor[(15, 11, 9), int16], Tensor[(5, 7, 5), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) */;
  %597 = @func_5469() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %598 = @func_5034() /* ty=Tensor[(5, 7, 5), float32] */;
  %599 = %591.3;
  %600 = @func_5887() /* ty=Tensor[(5, 7, 5), float32] */;
  %601 = %596.1;
  %602 = %597.1;
  (%598, %599, %600, %601, %var_7139, %602)
}

def @func_3532(%var_3482: Tensor[(5, 7, 16), float64]) -> (Tensor[(5, 7, 16), uint64], Tensor[(378), float32], Tensor[(144), uint16], Tensor[(1, 40), float64]) {
  %603 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %604 = cast(%603, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %605 = atan(%604) /* ty=Tensor[(5, 7, 16), float64] */;
  %606 = cast(%var_3482, dtype="bool") /* ty=Tensor[(5, 7, 16), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(5, 7, 16), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = less_equal(%608, %609) /* ty=Tensor[(5, 7, 16), bool] */;
  %611 = cast(%610, dtype="uint64") /* ty=Tensor[(5, 7, 16), uint64] */;
  %612 = shape_of(%var_3482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%var_3482, dtype="uint64") /* ty=Tensor[(5, 7, 16), uint64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %615 = cast(meta[relay.Constant][31] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %616 = cast(meta[relay.Constant][31] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %617 = cast(meta[relay.Constant][32] /* ty=Tensor[(1, 40), float64] */, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %618 = reshape(%615, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint16] */;
  %619 = reshape(%616, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint16] */;
  %620 = reshape(%617, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %621 = @func_1351(%618, %619, %620) /* ty=(Tensor[(6, 4, 6), uint16], Tensor[(5, 7, 16), float64], Tensor[(378), float32], Tensor[(5, 4, 2), bool], Tensor[(40), float64]) */;
  %622 = bitwise_and(%613, %614) /* ty=Tensor[(5, 7, 16), uint64] */;
  %623 = %621.2;
  (%622, %623, meta[relay.Constant][31] /* ty=Tensor[(144), uint16] */, meta[relay.Constant][32] /* ty=Tensor[(1, 40), float64] */)
}

def @func_4386() -> (Tensor[(5, 7, 16), float64],) {
  %624 = @func_3753() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */;
  %625 = %624.0;
  (%625,)
}

def @func_7329() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32]) {
  %626 = @func_6878() /* ty=(Tensor[(5, 7, 5), int64],) */;
  %627 = %626.0;
  %628 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
  (%627, %628)
}

def @func_2624(%var_2605: Tensor[(4, 3, 12), float32]) -> (Tensor[(4, 3, 12), float32],) {
  %629 = cast(%var_2605, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %630 = log(%629) /* ty=Tensor[(4, 3, 12), float32] */;
  (%630,)
}

def @func_7871() -> (Tensor[(5, 7, 5), float32],) {
  %631 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %632 = %631.1;
  (%632,)
}

def @func_141(%var_130: Tensor[(5, 7, 16), float64], %var_131: Tensor[(5, 7, 16), float64]) -> Tensor[(5, 7, 16), float64] {
  %633 = cast(%var_131, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %634 = shape_of(%var_130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%var_130, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%635, %636) /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_7411() -> Tensor[(468), float32] {
  %637 = @func_5694() /* ty=(Tensor[(468), float32],) */;
  %637.0
}

def @func_3753() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) {
  %638 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
  %639 = %638.1;
  %640 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  (%639, %640)
}

def @func_6115(%var_6086: Tensor[(378), float32], %var_6092: Tensor[(210, 20), bool], %var_6094: Tensor[(210, 20), bool]) -> (Tensor[(5, 7, 5), float32], Tensor[(4, 140), float64], Tensor[(378), float32], Tensor[(792), float64], Tensor[(144), uint8], Tensor[(210, 20), bool], Tensor[(210, 20), float64], Tensor[(5, 7, 16), float64]) {
  %641 = cast(%var_6086, dtype="float32") /* ty=Tensor[(378), float32] */;
  %642 = reshape(%641, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %643 = @func_272(%642) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */;
  %644 = cast(meta[relay.Constant][33] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %645 = cast(meta[relay.Constant][33] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %646 = cast(%var_6092, dtype="bool") /* ty=Tensor[(210, 20), bool] */;
  %647 = reshape(%644, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint8] */;
  %648 = reshape(%645, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint8] */;
  %649 = reshape(%646, newshape=[15, 280]) /* ty=Tensor[(15, 280), bool] */;
  %650 = @func_4836(%647, %648, %649) /* ty=(Tensor[(6, 4, 6), bool], Tensor[(2, 14, 10), float64], Tensor[(792), float64], Tensor[(15, 280), bool]) */;
  %651 = cast(%var_6094, dtype="bool") /* ty=Tensor[(210, 20), bool] */;
  %652 = shape_of(%var_6092, dtype="int32") /* ty=Tensor[(2), int32] */;
  %653 = cast(%var_6092, dtype="bool") /* ty=Tensor[(210, 20), bool] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %655 = cast(%var_6094, dtype="float64") /* ty=Tensor[(210, 20), float64] */;
  %656 = %643.1;
  %657 = cast(%656, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %658 = cast(%656, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %659 = reshape(%657, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %660 = reshape(%658, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %661 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %662 = %650.2;
  %663 = greater(%653, %654) /* ty=Tensor[(210, 20), bool] */;
  %664 = sigmoid(%655) /* ty=Tensor[(210, 20), float64] */;
  %665 = @func_141(%659, %660) /* ty=Tensor[(5, 7, 16), float64] */;
  (%661, %656, %var_6086, %662, meta[relay.Constant][33] /* ty=Tensor[(144), uint8] */, %663, %664, %665)
}

def @func_7014(%var_6989: Tensor[(2, 11, 8), uint16]) -> (Tensor[(2, 11, 8), bool], Tensor[(14, 14, 8), bool], Tensor[(1, 1568), float32], Tensor[(14, 14, 8), float32]) {
  %666 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 11, 8), uint16] */, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %667 = shape_of(%var_6989, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_6989, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = cast(meta[relay.Constant][35] /* ty=Tensor[(1, 1568), float32] */, dtype="float32") /* ty=Tensor[(1, 1568), float32] */;
  %671 = reshape(%670, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %672 = @func_885(%671) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %673 = %672.0;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %675 = reshape(%674, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %676 = @func_885(%675) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %677 = equal(%668, %669) /* ty=Tensor[(2, 11, 8), bool] */;
  %678 = %676.1;
  (%677, %673, meta[relay.Constant][35] /* ty=Tensor[(1, 1568), float32] */, %678)
}

def @func_5865() -> Tensor[(5, 7, 5), float64] {
  %679 = @func_5034() /* ty=Tensor[(5, 7, 5), float32] */;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  atan(%680) /* ty=Tensor[(5, 7, 5), float64] */
}

def @func_6738(%var_6688: Tensor[(7, 10, 15), uint32], %var_6725: Tensor[(384), float64]) -> (Tensor[(7, 10, 15), uint32], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64], Tensor[(5, 7, 5), float32]) {
  %681 = cast(meta[relay.Constant][36] /* ty=Tensor[(7, 10, 15), uint32] */, dtype="uint32") /* ty=Tensor[(7, 10, 15), uint32] */;
  %682 = shape_of(%var_6688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %683 = cast(%var_6688, dtype="uint32") /* ty=Tensor[(7, 10, 15), uint32] */;
  %684 = dyn.reshape(%681, %682, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %685 = cast(meta[relay.Constant][37] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %686 = reshape(%685, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %687 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %688 = cast(%var_6725, dtype="float64") /* ty=Tensor[(384), float64] */;
  %689 = reshape(%688, newshape=[96, 4]) /* ty=Tensor[(96, 4), float64] */;
  %690 = @func_4780(%689) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) */;
  %691 = right_shift(%683, %684) /* ty=Tensor[(7, 10, 15), uint32] */;
  %692 = @func_6668() /* ty=Tensor[(5, 7, 5), float32] */;
  %693 = @func_2985(%686) /* ty=Tensor[(2, 14, 10), float64] */;
  %694 = %687.1;
  %695 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %696 = %690.0;
  %697 = @func_3586() /* ty=Tensor[(5, 7, 5), float32] */;
  (%691, %692, %693, meta[relay.Constant][37] /* ty=Tensor[(280), float64] */, %694, %695, %696, %var_6725, %697)
}

def @func_2856() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) {
  %698 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %699 = cast(%698, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %700 = tan(%699) /* ty=Tensor[(5, 7, 5), float32] */;
  %701 = cast(%700, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %702 = cast(%700, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %703 = log(%701) /* ty=Tensor[(5, 7, 5), float32] */;
  %704 = sin(%702) /* ty=Tensor[(5, 7, 5), float32] */;
  (%703, %704)
}

def @func_3291() -> (Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) {
  %705 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
  %706 = cast(meta[relay.Constant][38] /* ty=Tensor[(5, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %707 = shape_of(%705, dtype="int32") /* ty=Tensor[(3), int32] */;
  %708 = cast(%705, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %710 = cast(meta[relay.Constant][39] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %711 = cast(meta[relay.Constant][39] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
  %712 = reshape(%710, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %713 = reshape(%711, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %714 = cast(meta[relay.Constant][40] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %715 = reshape(%714, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %716 = @func_1599(%715) /* ty=(Tensor[(12, 13, 3), float32],) */;
  %717 = less(%708, %709) /* ty=Tensor[(5, 7, 5), bool] */;
  %718 = @func_141(%712, %713) /* ty=Tensor[(5, 7, 16), float64] */;
  %719 = %716.0;
  (%717, %718, meta[relay.Constant][39] /* ty=Tensor[(560), float64] */, %719, meta[relay.Constant][40] /* ty=Tensor[(468), float32] */)
}

def @func_7214() -> Tensor[(5, 7, 5), float32] {
  %720 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %720.0
}

def @func_4355(%var_4305: Tensor[(1568), float32], %var_4307: Tensor[(14, 14, 8), bool], %var_4324: Tensor[(5, 7, 5), float32]) -> (Tensor[(1568), float32], Tensor[(14, 14, 8), float64], Tensor[(5, 7, 5), float64], Tensor[(14, 14, 8), int64], Tensor[(5, 7, 5), float32]) {
  %721 = cast(%var_4305, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %722 = reshape(%721, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %723 = @func_3782(%722) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) */;
  %724 = %723.1;
  %725 = cast(%var_4307, dtype="float64") /* ty=Tensor[(14, 14, 8), float64] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="float64") /* ty=Tensor[(14, 14, 8), float64] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %729 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %730 = cast(%var_4324, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %734 = cast(%724, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %735 = shape_of(%var_4307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%var_4307, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %738 = floor_divide(%727, %728) /* ty=Tensor[(14, 14, 8), float64] */;
  %739 = power(%732, %733) /* ty=Tensor[(5, 7, 5), float64] */;
  %740 = bitwise_xor(%736, %737) /* ty=Tensor[(14, 14, 8), int64] */;
  %741 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  (%var_4305, %738, %739, %740, %741)
}

def @func_1797(%var_1769: Tensor[(2, 6, 5), float32], %var_1774: Tensor[(4, 392), float32], %var_1782: Tensor[(560), float64]) -> (Tensor[(14, 14, 8), bool], Tensor[(4, 392), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(2, 6, 5), float64]) {
  %742 = cast(%var_1774, dtype="float32") /* ty=Tensor[(4, 392), float32] */;
  %743 = reshape(%742, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %744 = @func_885(%743) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %745 = cast(%var_1782, dtype="float64") /* ty=Tensor[(560), float64] */;
  %746 = cast(%var_1782, dtype="float64") /* ty=Tensor[(560), float64] */;
  %747 = reshape(%745, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %748 = reshape(%746, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %749 = cast(%var_1769, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %750 = log(%749) /* ty=Tensor[(2, 6, 5), float32] */;
  %751 = cast(%var_1769, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %755 = %744.0;
  %756 = @func_141(%747, %748) /* ty=Tensor[(5, 7, 16), float64] */;
  %757 = maximum(%753, %754) /* ty=Tensor[(2, 6, 5), float64] */;
  (%755, %var_1774, %756, %var_1782, %757)
}

def @func_8046() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float64]) {
  %758 = @func_7779() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */;
  %759 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %760 = %759.1;
  %761 = cast(%760, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %762 = @func_4107() /* ty=Tensor[(5, 7, 5), int64] */;
  %763 = @func_3341() /* ty=Tensor[(5, 7, 5), float32] */;
  %764 = %758.1;
  %765 = log10(%761) /* ty=Tensor[(5, 7, 5), float64] */;
  (%762, %763, %764, %765)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7017(%var_7015: Tensor[(2, 11, 8), uint16]) -> (Tensor[(2, 11, 8), bool], Tensor[(14, 14, 8), bool], Tensor[(1, 1568), float32], Tensor[(14, 14, 8), float32]) {
  @func_7014(%var_7015) /* ty=(Tensor[(2, 11, 8), bool], Tensor[(14, 14, 8), bool], Tensor[(1, 1568), float32], Tensor[(14, 14, 8), float32]) */
}

def @func_7432() -> (Tensor[(5, 7, 5), int64],) {
  %2 = fn () -> (Tensor[(5, 7, 5), int64],) {
    %0 = @func_5427() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
    %1 = %0.1;
    (%1,)
  };
  %2() /* ty=(Tensor[(5, 7, 5), int64],) */
}

def @func_7932(%var_7893: Tensor[(176), uint16], %var_7901: Tensor[(420), int64]) -> (Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(14, 14, 8), bool], Tensor[(176), uint16], Tensor[(5, 7, 16), float64], Tensor[(96), float32], Tensor[(420), int64], Tensor[(12, 12, 14), float64], Tensor[(1568), float32]) {
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %4 = acos(%3) /* ty=Tensor[(12, 12, 14), float32] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %6 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(12, 12, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 12, 14), float32] */;
  %10 = cast(%var_7893, dtype="uint16") /* ty=Tensor[(176), uint16] */;
  %11 = reshape(%10, newshape=[2, 11, 8]) /* ty=Tensor[(2, 11, 8), uint16] */;
  %12 = @func_7014(%11) /* ty=(Tensor[(2, 11, 8), bool], Tensor[(14, 14, 8), bool], Tensor[(1, 1568), float32], Tensor[(14, 14, 8), float32]) */;
  %13 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %14 = cast(%var_7901, dtype="int64") /* ty=Tensor[(420), int64] */;
  %15 = %12.1;
  %16 = cast(%15, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %17 = reshape(%14, newshape=[6, 7, 10]) /* ty=Tensor[(6, 7, 10), int64] */;
  %18 = reshape(%16, newshape=[8, 196]) /* ty=Tensor[(8, 196), float32] */;
  %19 = @func_2492(%17, %18) /* ty=(Tensor[(6, 7, 10), int64], Tensor[(6, 7, 10), bool], Tensor[(1568), float32], Tensor[(96), float32], Tensor[(8, 196), float32]) */;
  %20 = cast(%4, dtype="float64") /* ty=Tensor[(12, 12, 14), float64] */;
  %21 = %19.3;
  %22 = cast(%21, dtype="float32") /* ty=Tensor[(96), float32] */;
  %23 = cast(%21, dtype="float32") /* ty=Tensor[(96), float32] */;
  %24 = cast(%15, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %25 = reshape(%22, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %26 = reshape(%23, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %27 = reshape(%24, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %28 = @func_2186(%25, %26, %27) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) */;
  %29 = minimum(%7, %8) /* ty=Tensor[(12, 12, 14), float64] */;
  %30 = cosh(%9) /* ty=Tensor[(12, 12, 14), float32] */;
  %31 = %13.1;
  %32 = rsqrt(%20) /* ty=Tensor[(12, 12, 14), float64] */;
  %33 = %28.4;
  (%29, %30, %15, %var_7893, %31, %21, %var_7901, %32, %33)
}

def @func_4013() -> (Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) {
  %44 = fn () -> (Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) {
    %34 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
    %35 = %34.2;
    %36 = cast(%35, dtype="float32") /* ty=Tensor[(560), float32] */;
    %37 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
    %38 = cast(meta[relay.Constant][1] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
    %39 = reshape(%38, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
    %40 = atanh(%36) /* ty=Tensor[(560), float32] */;
    %41 = %37.2;
    %42 = @func_3341() /* ty=Tensor[(5, 7, 5), float32] */;
    %43 = @func_2985(%39) /* ty=Tensor[(2, 14, 10), float64] */;
    (%40, %41, %42, %43, meta[relay.Constant][1] /* ty=Tensor[(280), float64] */)
  };
  %44() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */
}

def @func_4583(%var_4581: Tensor[(15, 11, 9), int16], %var_4582: Tensor[(15, 11, 9), int16]) -> (Tensor[(15, 11, 9), int16], Tensor[(5, 7, 5), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) {
  @func_4579(%var_4581, %var_4582) /* ty=(Tensor[(15, 11, 9), int16], Tensor[(5, 7, 5), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) */
}

def @func_272(%var_254: Tensor[(9, 14, 3), float32]) -> (Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) {
  %45 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 140), float64] */, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %46 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 140), float64] */, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %47 = reshape(%45, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %48 = reshape(%46, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %49 = cast(%var_254, dtype="float32") /* ty=Tensor[(9, 14, 3), float32] */;
  %50 = tan(%49) /* ty=Tensor[(9, 14, 3), float32] */;
  %51 = cast(%var_254, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="int8") /* ty=Tensor[(9, 14, 3), int8] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %55 = @func_141(%47, %48) /* ty=Tensor[(5, 7, 16), float64] */;
  %56 = bitwise_xor(%53, %54) /* ty=Tensor[(9, 14, 3), int8] */;
  (%55, meta[relay.Constant][2] /* ty=Tensor[(4, 140), float64] */, %56)
}

def @func_7150(%var_7148: Tensor[(1485), int16]) -> (Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(1485), int16], Tensor[(5, 7, 5), float32]) {
  @func_7147(%var_7148) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(1485), int16], Tensor[(5, 7, 5), float32]) */
}

def @func_2191(%var_2188: Tensor[(2, 16, 3), float32], %var_2189: Tensor[(2, 16, 3), float32], %var_2190: Tensor[(1568), float32]) -> (Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) {
  @func_2186(%var_2188, %var_2189, %var_2190) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) */
}

def @main(%var_8060: Tensor[(12, 3, 14), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(12, 3, 14), float64], Tensor[(12, 3, 14), bool]) {
  %57 = @func_3185() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %58 = cast(%var_8060, dtype="float32") /* ty=Tensor[(12, 3, 14), float32] */;
  %59 = acos(%58) /* ty=Tensor[(12, 3, 14), float32] */;
  %60 = cast(%59, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %61 = cast(%59, dtype="float64") /* ty=Tensor[(12, 3, 14), float64] */;
  %62 = cosh(%61) /* ty=Tensor[(12, 3, 14), float64] */;
  %63 = cast(%59, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
  %65 = cast(%62, dtype="bool") /* ty=Tensor[(12, 3, 14), bool] */;
  %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %67 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %68 = %57.2;
  %69 = atanh(%60) /* ty=Tensor[(12, 3, 14), float64] */;
  %70 = logical_and(%65, %66) /* ty=Tensor[(12, 3, 14), bool] */;
  (%67, %68, %69, %70)
}

def @func_3327() -> Tensor[(5, 7, 16), float64] {
  %71 = fn () -> Tensor[(5, 7, 16), float64] {
    @func_3055() /* ty=Tensor[(5, 7, 16), float64] */
  };
  %71() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_4090() -> (Tensor[(5, 7, 5), int64],) {
  %72 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %73 = %72.1;
  (%73,)
}

def @func_4285(%var_4283: Tensor[(468), float32]) -> (Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 7, 16), float64]) {
  @func_4282(%var_4283) /* ty=(Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 7, 16), float64]) */
}

def @func_5180() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64]) {
  %74 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %75 = %74.0;
  %76 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  (%75, %76)
}

def @func_3057() -> Tensor[(5, 7, 16), float64] {
  @func_3055() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_4836(%var_4791: Tensor[(6, 4, 6), uint8], %var_4792: Tensor[(6, 4, 6), uint8], %var_4823: Tensor[(15, 280), bool]) -> (Tensor[(6, 4, 6), bool], Tensor[(2, 14, 10), float64], Tensor[(792), float64], Tensor[(15, 280), bool]) {
  %77 = cast(%var_4792, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %78 = shape_of(%var_4791, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%var_4791, dtype="bool") /* ty=Tensor[(6, 4, 6), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 280), float64] */, dtype="float64") /* ty=Tensor[(1, 280), float64] */;
  %82 = reshape(%81, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %83 = @func_4514() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 280), float64] */, dtype="bool") /* ty=Tensor[(1, 280), bool] */;
  %85 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(1, 280), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(1, 280), float64] */, dtype="bool") /* ty=Tensor[(1, 280), bool] */;
  %87 = dyn.reshape(%84, %85, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %88 = not_equal(%86, %87) /* ty=Tensor[(?, 280), bool] */;
  %89 = cast(%88, dtype="bool") /* ty=Tensor[(?, 280), bool] */;
  %90 = cast(%var_4823, dtype="bool") /* ty=Tensor[(15, 280), bool] */;
  %91 = equal(%79, %80) /* ty=Tensor[(6, 4, 6), bool] */;
  %92 = @func_2985(%82) /* ty=Tensor[(2, 14, 10), float64] */;
  %93 = %83.2;
  %94 = less(%89, %90) /* ty=Tensor[(15, 280), bool] */;
  (%91, %92, %93, %94)
}

def @func_5820() -> Tensor[(5, 7, 5), float32] {
  %96 = fn () -> Tensor[(5, 7, 5), float32] {
    %95 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
    %95.0
  };
  %96() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_1518(%var_1516: Tensor[(3, 1, 1), float64], %var_1517: Tensor[(40), float64]) -> (Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) {
  @func_1514(%var_1516, %var_1517) /* ty=(Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) */
}

def @func_5630() -> (Tensor[(5, 7, 16), float64],) {
  %97 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %98 = %97.2;
  (%98,)
}

def @func_6464(%var_6462: Tensor[(2, 11, 11), float64], %var_6463: Tensor[(864), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(378), float32], Tensor[(864), float32], Tensor[(2, 11, 11), bool], Tensor[(2, 11, 11), int64]) {
  @func_6460(%var_6462, %var_6463) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(378), float32], Tensor[(864), float32], Tensor[(2, 11, 11), bool], Tensor[(2, 11, 11), int64]) */
}

def @func_6742(%var_6740: Tensor[(7, 10, 15), uint32], %var_6741: Tensor[(384), float64]) -> (Tensor[(7, 10, 15), uint32], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64], Tensor[(5, 7, 5), float32]) {
  @func_6738(%var_6740, %var_6741) /* ty=(Tensor[(7, 10, 15), uint32], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64], Tensor[(5, 7, 5), float32]) */
}

def @func_5286() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(468), float32], Tensor[(2, 14, 10), float64]) {
  @func_5284() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(468), float32], Tensor[(2, 14, 10), float64]) */
}

def @func_7780() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) {
  %101 = fn () -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) {
    %99 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
    %100 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
    (%99, %100)
  };
  %101() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */
}

def @func_3532(%var_3482: Tensor[(5, 7, 16), float64]) -> (Tensor[(5, 7, 16), uint64], Tensor[(378), float32], Tensor[(144), uint16], Tensor[(1, 40), float64]) {
  %102 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %103 = cast(%102, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %104 = atan(%103) /* ty=Tensor[(5, 7, 16), float64] */;
  %105 = cast(%var_3482, dtype="bool") /* ty=Tensor[(5, 7, 16), bool] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%104, dtype="bool") /* ty=Tensor[(5, 7, 16), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %109 = less_equal(%107, %108) /* ty=Tensor[(5, 7, 16), bool] */;
  %110 = cast(%109, dtype="uint64") /* ty=Tensor[(5, 7, 16), uint64] */;
  %111 = shape_of(%var_3482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %112 = cast(%var_3482, dtype="uint64") /* ty=Tensor[(5, 7, 16), uint64] */;
  %113 = dyn.reshape(%110, %111, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %115 = cast(meta[relay.Constant][5] /* ty=Tensor[(144), uint16] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 40), float64] */, dtype="float64") /* ty=Tensor[(1, 40), float64] */;
  %117 = reshape(%114, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint16] */;
  %118 = reshape(%115, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint16] */;
  %119 = reshape(%116, newshape=[40]) /* ty=Tensor[(40), float64] */;
  %120 = @func_1351(%117, %118, %119) /* ty=(Tensor[(6, 4, 6), uint16], Tensor[(5, 7, 16), float64], Tensor[(378), float32], Tensor[(5, 4, 2), bool], Tensor[(40), float64]) */;
  %121 = bitwise_and(%112, %113) /* ty=Tensor[(5, 7, 16), uint64] */;
  %122 = %120.2;
  (%121, %122, meta[relay.Constant][5] /* ty=Tensor[(144), uint16] */, meta[relay.Constant][6] /* ty=Tensor[(1, 40), float64] */)
}

def @func_3535(%var_3533: Tensor[(5, 7, 16), float64]) -> (Tensor[(5, 7, 16), uint64], Tensor[(378), float32], Tensor[(144), uint16], Tensor[(1, 40), float64]) {
  @func_3532(%var_3533) /* ty=(Tensor[(5, 7, 16), uint64], Tensor[(378), float32], Tensor[(144), uint16], Tensor[(1, 40), float64]) */
}

def @func_7936(%var_7934: Tensor[(176), uint16], %var_7935: Tensor[(420), int64]) -> (Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(14, 14, 8), bool], Tensor[(176), uint16], Tensor[(5, 7, 16), float64], Tensor[(96), float32], Tensor[(420), int64], Tensor[(12, 12, 14), float64], Tensor[(1568), float32]) {
  @func_7932(%var_7934, %var_7935) /* ty=(Tensor[(12, 12, 14), float64], Tensor[(12, 12, 14), float32], Tensor[(14, 14, 8), bool], Tensor[(176), uint16], Tensor[(5, 7, 16), float64], Tensor[(96), float32], Tensor[(420), int64], Tensor[(12, 12, 14), float64], Tensor[(1568), float32]) */
}

def @func_5878() -> (Tensor[(5, 7, 5), float32],) {
  %123 = @func_5469() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %124 = %123.0;
  (%124,)
}

def @func_5035() -> Tensor[(5, 7, 5), float32] {
  %125 = fn () -> Tensor[(5, 7, 5), float32] {
    @func_3611() /* ty=Tensor[(5, 7, 5), float32] */
  };
  %125() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_3941() -> (Tensor[(5, 7, 5), bool],) {
  %126 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
  %127 = %126.0;
  %128 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %129 = %128.1;
  %130 = cast(%129, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %131 = shape_of(%127, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%127, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = logical_and(%132, %133) /* ty=Tensor[(5, 7, 5), bool] */;
  (%134,)
}

def @func_2624(%var_2605: Tensor[(4, 3, 12), float32]) -> (Tensor[(4, 3, 12), float32],) {
  %135 = cast(%var_2605, dtype="float32") /* ty=Tensor[(4, 3, 12), float32] */;
  %136 = log(%135) /* ty=Tensor[(4, 3, 12), float32] */;
  (%136,)
}

def @func_4923(%var_4921: Tensor[(280), float64], %var_4922: Tensor[(2, 14, 10), float32]) -> (Tensor[(280), float64], Tensor[(5, 7, 16), uint16], Tensor[(2, 14, 10), bool], Tensor[(5, 4, 2), bool], Tensor[(3), float64], Tensor[(40), float64]) {
  %161 = fn (%var_4883: Tensor[(280), float64], %var_4900: Tensor[(2, 14, 10), float32]) -> (Tensor[(280), float64], Tensor[(5, 7, 16), uint16], Tensor[(2, 14, 10), bool], Tensor[(5, 4, 2), bool], Tensor[(3), float64], Tensor[(40), float64]) {
    %137 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
    %138 = %137.1;
    %139 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
    %140 = cast(%139, dtype="uint16") /* ty=Tensor[(5, 7, 16), uint16] */;
    %141 = shape_of(%138, dtype="int32") /* ty=Tensor[(3), int32] */;
    %142 = cast(%138, dtype="uint16") /* ty=Tensor[(5, 7, 16), uint16] */;
    %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %144 = cast(%var_4883, dtype="float64") /* ty=Tensor[(280), float64] */;
    %145 = reshape(%144, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
    %146 = @func_2985(%145) /* ty=Tensor[(2, 14, 10), float64] */;
    %147 = cast(%146, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
    %148 = sigmoid(%147) /* ty=Tensor[(2, 14, 10), float32] */;
    %149 = cast(%var_4900, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %151 = cast(%148, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %153 = cast(meta[relay.Constant][7] /* ty=Tensor[(3), float64] */, dtype="float64") /* ty=Tensor[(3), float64] */;
    %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(40), float64] */, dtype="float64") /* ty=Tensor[(40), float64] */;
    %155 = reshape(%153, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float64] */;
    %156 = reshape(%154, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %157 = @func_1514(%155, %156) /* ty=(Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) */;
    %158 = left_shift(%142, %143) /* ty=Tensor[(5, 7, 16), uint16] */;
    %159 = greater(%151, %152) /* ty=Tensor[(2, 14, 10), bool] */;
    %160 = %157.1;
    (%var_4883, %158, %159, %160, meta[relay.Constant][7] /* ty=Tensor[(3), float64] */, meta[relay.Constant][8] /* ty=Tensor[(40), float64] */)
  };
  %161(%var_4921, %var_4922) /* ty=(Tensor[(280), float64], Tensor[(5, 7, 16), uint16], Tensor[(2, 14, 10), bool], Tensor[(5, 4, 2), bool], Tensor[(3), float64], Tensor[(40), float64]) */
}

def @func_7799() -> Tensor[(5, 7, 16), float64] {
  @func_7797() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_3055() -> Tensor[(5, 7, 16), float64] {
  %162 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %162.2
}

def @func_3755() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) {
  @func_3753() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */
}

def @func_2678() -> Tensor[(5, 7, 5), float32] {
  @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_4450() -> Tensor[(5, 7, 5), float32] {
  %164 = fn () -> Tensor[(5, 7, 5), float32] {
    %163 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
    %163.1
  };
  %164() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_7214() -> Tensor[(5, 7, 5), float32] {
  %165 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %165.0
}

def @func_5182() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64]) {
  @func_5180() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64]) */
}

def @func_5386() -> (Tensor[(5, 7, 5), bool],) {
  %168 = fn () -> (Tensor[(5, 7, 5), bool],) {
    %166 = @func_3941() /* ty=(Tensor[(5, 7, 5), bool],) */;
    %167 = %166.0;
    (%167,)
  };
  %168() /* ty=(Tensor[(5, 7, 5), bool],) */
}

def @func_4230() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) {
  %169 = @func_3753() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */;
  %170 = %169.0;
  %171 = @func_3326() /* ty=Tensor[(5, 7, 16), float64] */;
  (%170, %171)
}

def @func_4516() -> (Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) {
  @func_4514() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) */
}

def @func_1355(%var_1352: Tensor[(6, 4, 6), uint16], %var_1353: Tensor[(6, 4, 6), uint16], %var_1354: Tensor[(40), float64]) -> (Tensor[(6, 4, 6), uint16], Tensor[(5, 7, 16), float64], Tensor[(378), float32], Tensor[(5, 4, 2), bool], Tensor[(40), float64]) {
  %186 = fn (%var_1326: Tensor[(6, 4, 6), uint16], %var_1327: Tensor[(6, 4, 6), uint16], %var_1347: Tensor[(40), float64]) -> (Tensor[(6, 4, 6), uint16], Tensor[(5, 7, 16), float64], Tensor[(378), float32], Tensor[(5, 4, 2), bool], Tensor[(40), float64]) {
    %172 = cast(%var_1327, dtype="uint16") /* ty=Tensor[(6, 4, 6), uint16] */;
    %173 = shape_of(%var_1326, dtype="int32") /* ty=Tensor[(3), int32] */;
    %174 = cast(%var_1326, dtype="uint16") /* ty=Tensor[(6, 4, 6), uint16] */;
    %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
    %177 = reshape(%176, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
    %178 = @func_272(%177) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */;
    %179 = cast(%var_1347, dtype="float64") /* ty=Tensor[(40), float64] */;
    %180 = cast(%var_1347, dtype="float64") /* ty=Tensor[(40), float64] */;
    %181 = reshape(%179, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
    %182 = reshape(%180, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
    %183 = bitwise_and(%174, %175) /* ty=Tensor[(6, 4, 6), uint16] */;
    %184 = %178.0;
    %185 = @func_904(%181, %182) /* ty=Tensor[(5, 4, 2), bool] */;
    (%183, %184, meta[relay.Constant][9] /* ty=Tensor[(378), float32] */, %185, %var_1347)
  };
  %186(%var_1352, %var_1353, %var_1354) /* ty=(Tensor[(6, 4, 6), uint16], Tensor[(5, 7, 16), float64], Tensor[(378), float32], Tensor[(5, 4, 2), bool], Tensor[(40), float64]) */
}

def @func_6830(%var_6829: Tensor[(864), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(6, 16, 9), float32], Tensor[(864), float32]) {
  %193 = fn (%var_6815: Tensor[(864), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(6, 16, 9), float32], Tensor[(864), float32]) {
    %187 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
    %188 = cast(%var_6815, dtype="float32") /* ty=Tensor[(864), float32] */;
    %189 = reshape(%188, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), float32] */;
    %190 = @func_734(%189) /* ty=(Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) */;
    %191 = %187.1;
    %192 = %190.0;
    (%191, %192, %var_6815)
  };
  %193(%var_6829) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(6, 16, 9), float32], Tensor[(864), float32]) */
}

def @func_1599(%var_1591: Tensor[(12, 13, 3), float32]) -> (Tensor[(12, 13, 3), float32],) {
  %194 = cast(%var_1591, dtype="float32") /* ty=Tensor[(12, 13, 3), float32] */;
  %195 = asin(%194) /* ty=Tensor[(12, 13, 3), float32] */;
  (%195,)
}

def @func_7640() -> Tensor[(5, 7, 5), float32] {
  %196 = @func_5878() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %196.0
}

def @func_7873() -> (Tensor[(5, 7, 5), float32],) {
  @func_7871() /* ty=(Tensor[(5, 7, 5), float32],) */
}

def @func_2987(%var_2986: Tensor[(2, 14, 10), float64]) -> Tensor[(2, 14, 10), float64] {
  %198 = fn (%var_2955: Tensor[(2, 14, 10), float64]) -> Tensor[(2, 14, 10), float64] {
    %197 = cast(%var_2955, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
    cosh(%197) /* ty=Tensor[(2, 14, 10), float64] */
  };
  %198(%var_2986) /* ty=Tensor[(2, 14, 10), float64] */
}

def @func_6879() -> (Tensor[(5, 7, 5), int64],) {
  %201 = fn () -> (Tensor[(5, 7, 5), int64],) {
    %199 = @func_5427() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
    %200 = %199.1;
    (%200,)
  };
  %201() /* ty=(Tensor[(5, 7, 5), int64],) */
}

def @func_7199(%var_7198: Tensor[(384), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64]) {
  %208 = fn (%var_7188: Tensor[(384), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64]) {
    %202 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
    %203 = cast(%var_7188, dtype="float64") /* ty=Tensor[(384), float64] */;
    %204 = reshape(%203, newshape=[96, 4]) /* ty=Tensor[(96, 4), float64] */;
    %205 = @func_4780(%204) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) */;
    %206 = %202.0;
    %207 = %205.0;
    (%206, %207, %var_7188)
  };
  %208(%var_7198) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64]) */
}

def @func_3407(%var_3394: Tensor[(5, 7, 16), float64]) -> Tensor[(5, 7, 16), uint8] {
  %209 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %210 = cast(%var_3394, dtype="uint8") /* ty=Tensor[(5, 7, 16), uint8] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(%209, dtype="uint8") /* ty=Tensor[(5, 7, 16), uint8] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  logical_xor(%212, %213) /* ty=Tensor[(5, 7, 16), uint8] */
}

def @func_3447() -> Tensor[(5, 7, 5), float32] {
  @func_3445() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_4092() -> (Tensor[(5, 7, 5), int64],) {
  @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */
}

def @func_3843() -> (Tensor[(5, 7, 5), float32],) {
  %214 = @func_3445() /* ty=Tensor[(5, 7, 5), float32] */;
  (%214,)
}

def @func_7495(%var_7493: Tensor[(13, 1, 16), float32]) -> (Tensor[(13, ?, 16), float32],) {
  @func_7492(%var_7493) /* ty=(Tensor[(13, ?, 16), float32],) */
}

def @func_6626(%var_6623: Tensor[(9, 12, 10), float32], %var_6624: Tensor[(792), float64], %var_6625: Tensor[(9, 12, 10), float64]) -> (Tensor[(5, 7, 16), float64], Tensor[(792), float64], Tensor[(9, 12, 10), float32]) {
  %228 = fn (%var_6574: Tensor[(9, 12, 10), float32], %var_6598: Tensor[(792), float64], %var_6615: Tensor[(9, 12, 10), float64]) -> (Tensor[(5, 7, 16), float64], Tensor[(792), float64], Tensor[(9, 12, 10), float32]) {
    %215 = cast(%var_6598, dtype="float64") /* ty=Tensor[(792), float64] */;
    %216 = reshape(%215, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float64] */;
    %217 = @func_4190(%216) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) */;
    %218 = cast(%var_6574, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
    %219 = exp(%218) /* ty=Tensor[(9, 12, 10), float32] */;
    %220 = cast(%219, dtype="float64") /* ty=Tensor[(9, 12, 10), float64] */;
    %221 = erf(%220) /* ty=Tensor[(9, 12, 10), float64] */;
    %222 = cast(%var_6615, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
    %223 = shape_of(%221, dtype="int32") /* ty=Tensor[(3), int32] */;
    %224 = cast(%221, dtype="float32") /* ty=Tensor[(9, 12, 10), float32] */;
    %225 = dyn.reshape(%222, %223, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %226 = %217.5;
    %227 = power(%224, %225) /* ty=Tensor[(9, 12, 10), float32] */;
    (%226, %var_6598, %227)
  };
  %228(%var_6623, %var_6624, %var_6625) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(792), float64], Tensor[(9, 12, 10), float32]) */
}

def @func_7724() -> Tensor[(5, 7, 5), float32] {
  %229 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %230 = %229.1;
  %231 = cast(%230, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  acosh(%231) /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_6372(%var_6371: Tensor[(2, 14, 10), float64]) -> (Tensor[(468), float32], Tensor[(10, 28), float64], Tensor[(2, 14, 10), bool]) {
  %249 = fn (%var_6357: Tensor[(2, 14, 10), float64]) -> (Tensor[(468), float32], Tensor[(10, 28), float64], Tensor[(2, 14, 10), bool]) {
    %232 = @func_5694() /* ty=(Tensor[(468), float32],) */;
    %233 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 28), float64] */, dtype="float64") /* ty=Tensor[(10, 28), float64] */;
    %234 = reshape(%233, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
    %235 = @func_2985(%234) /* ty=Tensor[(2, 14, 10), float64] */;
    %236 = cast(%235, dtype="float64") /* ty=Tensor[(2, 14, 10), float64] */;
    %237 = sinh(%236) /* ty=Tensor[(2, 14, 10), float64] */;
    %238 = cast(%var_6357, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %239 = shape_of(%237, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%237, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %242 = less_equal(%240, %241) /* ty=Tensor[(2, 14, 10), bool] */;
    %243 = cast(%237, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%242, dtype="bool") /* ty=Tensor[(2, 14, 10), bool] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %247 = %232.0;
    %248 = less(%245, %246) /* ty=Tensor[(2, 14, 10), bool] */;
    (%247, meta[relay.Constant][10] /* ty=Tensor[(10, 28), float64] */, %248)
  };
  %249(%var_6371) /* ty=(Tensor[(468), float32], Tensor[(10, 28), float64], Tensor[(2, 14, 10), bool]) */
}

def @func_4388() -> (Tensor[(5, 7, 16), float64],) {
  @func_4386() /* ty=(Tensor[(5, 7, 16), float64],) */
}

def @func_734(%var_711: Tensor[(6, 16, 9), float32]) -> (Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) {
  %250 = cast(%var_711, dtype="float32") /* ty=Tensor[(6, 16, 9), float32] */;
  %251 = cast(meta[relay.Constant][11] /* ty=Tensor[(378), float32] */, dtype="float32") /* ty=Tensor[(378), float32] */;
  %252 = reshape(%251, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %253 = @func_272(%252) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */;
  %254 = log10(%250) /* ty=Tensor[(6, 16, 9), float32] */;
  %255 = %253.0;
  (%254, %255, meta[relay.Constant][11] /* ty=Tensor[(378), float32] */)
}

def @func_7824() -> Tensor[(5, 7, 5), float32] {
  @func_7822() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_7642() -> Tensor[(5, 7, 5), float32] {
  @func_7640() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_887(%var_886: Tensor[(14, 14, 8), float32]) -> (Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) {
  %273 = fn (%var_854: Tensor[(14, 14, 8), float32]) -> (Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) {
    %256 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
    %257 = shape_of(%var_854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%var_854, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %260 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 14, 8), float32] */, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
    %261 = shape_of(%var_854, dtype="int32") /* ty=Tensor[(3), int32] */;
    %262 = cast(%var_854, dtype="bool") /* ty=Tensor[(14, 14, 8), bool] */;
    %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %264 = greater_equal(%262, %263) /* ty=Tensor[(14, 14, 8), bool] */;
    %265 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 14, 8), float32] */, dtype="int32") /* ty=Tensor[(14, 14, 8), int32] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%264, dtype="int32") /* ty=Tensor[(14, 14, 8), int32] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %269 = left_shift(%267, %268) /* ty=Tensor[(14, 14, 8), int32] */;
    %270 = cast(%269, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
    %271 = not_equal(%258, %259) /* ty=Tensor[(14, 14, 8), bool] */;
    %272 = asin(%270) /* ty=Tensor[(14, 14, 8), float32] */;
    (%271, %272)
  };
  %273(%var_886) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */
}

def @func_4485() -> (Tensor[(468), float32],) {
  %276 = fn () -> (Tensor[(468), float32],) {
    %274 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
    %275 = %274.4;
    (%275,)
  };
  %276() /* ty=(Tensor[(468), float32],) */
}

def @func_3342() -> Tensor[(5, 7, 5), float32] {
  %278 = fn () -> Tensor[(5, 7, 5), float32] {
    %277 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
    %277.1
  };
  %278() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_7330() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32]) {
  %282 = fn () -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32]) {
    %279 = @func_6878() /* ty=(Tensor[(5, 7, 5), int64],) */;
    %280 = %279.0;
    %281 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
    (%280, %281)
  };
  %282() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32]) */
}

def @func_1514(%var_1498: Tensor[(3, 1, 1), float64], %var_1510: Tensor[(40), float64]) -> (Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) {
  %283 = cast(%var_1498, dtype="float64") /* ty=Tensor[(3, 1, 1), float64] */;
  %284 = cast(%var_1510, dtype="float64") /* ty=Tensor[(40), float64] */;
  %285 = cast(%var_1510, dtype="float64") /* ty=Tensor[(40), float64] */;
  %286 = reshape(%284, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %287 = reshape(%285, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %288 = cast(%var_1510, dtype="float32") /* ty=Tensor[(40), float32] */;
  %289 = asin(%283) /* ty=Tensor[(3, 1, 1), float64] */;
  %290 = @func_904(%286, %287) /* ty=Tensor[(5, 4, 2), bool] */;
  %291 = sin(%288) /* ty=Tensor[(40), float32] */;
  (%289, %290, %291)
}

def @func_4108() -> Tensor[(5, 7, 5), int64] {
  %293 = fn () -> Tensor[(5, 7, 5), int64] {
    %292 = @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */;
    %292.0
  };
  %293() /* ty=Tensor[(5, 7, 5), int64] */
}

def @func_6190(%var_6182: Tensor[(2145), uint16]) -> (Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float64], Tensor[(1568), float32], Tensor[(13, 15, 11), uint16], uint16, Tensor[(2145), uint16]) {
  %294 = cast(meta[relay.Constant][13] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %295 = cast(meta[relay.Constant][13] /* ty=Tensor[(1568), float32] */, dtype="bool") /* ty=Tensor[(1568), bool] */;
  %296 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  %298 = reshape(%294, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %299 = reshape(%295, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), bool] */;
  %300 = reshape(%297, newshape=[5, 7, 5]) /* ty=Tensor[(5, 7, 5), float32] */;
  %301 = @func_4355(%298, %299, %300) /* ty=(Tensor[(1568), float32], Tensor[(14, 14, 8), float64], Tensor[(5, 7, 5), float64], Tensor[(14, 14, 8), int64], Tensor[(5, 7, 5), float32]) */;
  %302 = cast(meta[relay.Constant][14] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %303 = cast(%var_6182, dtype="uint16") /* ty=Tensor[(2145), uint16] */;
  %304 = reshape(%302, newshape=[]) /* ty=uint16 */;
  %305 = reshape(%303, newshape=[13, 15, 11]) /* ty=Tensor[(13, 15, 11), uint16] */;
  %306 = %301.1;
  %307 = @func_5938(%304, %305) /* ty=Tensor[(13, 15, 11), uint16] */;
  (%296, %306, meta[relay.Constant][13] /* ty=Tensor[(1568), float32] */, %307, meta[relay.Constant][14] /* ty=uint16 */, %var_6182)
}

def @func_141(%var_130: Tensor[(5, 7, 16), float64], %var_131: Tensor[(5, 7, 16), float64]) -> Tensor[(5, 7, 16), float64] {
  %308 = cast(%var_131, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %309 = shape_of(%var_130, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_130, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%310, %311) /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_3109(%var_3106: Tensor[(5, 15, 13), int8], %var_3107: Tensor[(3, 1), float64], %var_3108: Tensor[(40), float64]) -> (Tensor[(5, 15, 13), int8], Tensor[(40), float32], Tensor[(3, 1), float64], Tensor[(40), float64]) {
  %323 = fn (%var_3085: Tensor[(5, 15, 13), int8], %var_3094: Tensor[(3, 1), float64], %var_3095: Tensor[(40), float64]) -> (Tensor[(5, 15, 13), int8], Tensor[(40), float32], Tensor[(3, 1), float64], Tensor[(40), float64]) {
    %312 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 15, 13), int8] */, dtype="int8") /* ty=Tensor[(5, 15, 13), int8] */;
    %313 = shape_of(%var_3085, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%var_3085, dtype="int8") /* ty=Tensor[(5, 15, 13), int8] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %316 = cast(%var_3094, dtype="float64") /* ty=Tensor[(3, 1), float64] */;
    %317 = cast(%var_3095, dtype="float64") /* ty=Tensor[(40), float64] */;
    %318 = reshape(%316, newshape=[3, 1, 1]) /* ty=Tensor[(3, 1, 1), float64] */;
    %319 = reshape(%317, newshape=[40]) /* ty=Tensor[(40), float64] */;
    %320 = @func_1514(%318, %319) /* ty=(Tensor[(3, 1, 1), float64], Tensor[(5, 4, 2), bool], Tensor[(40), float32]) */;
    %321 = minimum(%314, %315) /* ty=Tensor[(5, 15, 13), int8] */;
    %322 = %320.2;
    (%321, %322, %var_3094, %var_3095)
  };
  %323(%var_3106, %var_3107, %var_3108) /* ty=(Tensor[(5, 15, 13), int8], Tensor[(40), float32], Tensor[(3, 1), float64], Tensor[(40), float64]) */
}

def @func_1797(%var_1769: Tensor[(2, 6, 5), float32], %var_1774: Tensor[(4, 392), float32], %var_1782: Tensor[(560), float64]) -> (Tensor[(14, 14, 8), bool], Tensor[(4, 392), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(2, 6, 5), float64]) {
  %324 = cast(%var_1774, dtype="float32") /* ty=Tensor[(4, 392), float32] */;
  %325 = reshape(%324, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %326 = @func_885(%325) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %327 = cast(%var_1782, dtype="float64") /* ty=Tensor[(560), float64] */;
  %328 = cast(%var_1782, dtype="float64") /* ty=Tensor[(560), float64] */;
  %329 = reshape(%327, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %330 = reshape(%328, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %331 = cast(%var_1769, dtype="float32") /* ty=Tensor[(2, 6, 5), float32] */;
  %332 = log(%331) /* ty=Tensor[(2, 6, 5), float32] */;
  %333 = cast(%var_1769, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="float64") /* ty=Tensor[(2, 6, 5), float64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %337 = %326.0;
  %338 = @func_141(%329, %330) /* ty=Tensor[(5, 7, 16), float64] */;
  %339 = maximum(%335, %336) /* ty=Tensor[(2, 6, 5), float64] */;
  (%337, %var_1774, %338, %var_1782, %339)
}

def @func_4232() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) {
  @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */
}

def @func_4514() -> (Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) {
  %340 = @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */;
  %341 = cast(meta[relay.Constant][16] /* ty=Tensor[(792), float64] */, dtype="float64") /* ty=Tensor[(792), float64] */;
  %342 = reshape(%341, newshape=[9, 11, 8]) /* ty=Tensor[(9, 11, 8), float64] */;
  %343 = @func_4190(%342) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) */;
  %344 = %340.0;
  %345 = %343.6;
  (%344, %345, meta[relay.Constant][16] /* ty=Tensor[(792), float64] */)
}

def @func_4783(%var_4781: Tensor[(96, 4), float64]) -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) {
  @func_4780(%var_4781) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) */
}

def @func_3445() -> Tensor[(5, 7, 5), float32] {
  @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_4040(%var_4031: Tensor[(40), float64]) -> (Tensor[(560), float64], Tensor[(5, 4, 2), uint16]) {
  %346 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %347 = cast(%var_4031, dtype="float64") /* ty=Tensor[(40), float64] */;
  %348 = cast(%var_4031, dtype="float64") /* ty=Tensor[(40), float64] */;
  %349 = reshape(%347, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %350 = reshape(%348, newshape=[5, 4, 2]) /* ty=Tensor[(5, 4, 2), float64] */;
  %351 = @func_904(%349, %350) /* ty=Tensor[(5, 4, 2), bool] */;
  %352 = cast(%var_4031, dtype="uint16") /* ty=Tensor[(40), uint16] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="uint16") /* ty=Tensor[(5, 4, 2), uint16] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %356 = %346.3;
  %357 = left_shift(%354, %355) /* ty=Tensor[(5, 4, 2), uint16] */;
  (%356, %357)
}

def @func_5441() -> (Tensor[(5, 7, 5), float32],) {
  %359 = fn () -> (Tensor[(5, 7, 5), float32],) {
    %358 = @func_3445() /* ty=Tensor[(5, 7, 5), float32] */;
    (%358,)
  };
  %359() /* ty=(Tensor[(5, 7, 5), float32],) */
}

def @func_5867() -> Tensor[(5, 7, 5), float64] {
  @func_5865() /* ty=Tensor[(5, 7, 5), float64] */
}

def @func_5284() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(468), float32], Tensor[(2, 14, 10), float64]) {
  %360 = @func_3326() /* ty=Tensor[(5, 7, 16), float64] */;
  %361 = cast(%360, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %362 = @func_4484() /* ty=(Tensor[(468), float32],) */;
  %363 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %364 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
  %365 = erf(%361) /* ty=Tensor[(5, 7, 16), float64] */;
  %366 = @func_4449() /* ty=Tensor[(5, 7, 5), float32] */;
  %367 = %362.0;
  %368 = %363.3;
  (%364, %365, %366, %367, %368)
}

def @func_7216() -> Tensor[(5, 7, 5), float32] {
  @func_7214() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_6670() -> Tensor[(5, 7, 5), float32] {
  @func_6668() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_2186(%var_2162: Tensor[(2, 16, 3), float32], %var_2163: Tensor[(2, 16, 3), float32], %var_2181: Tensor[(1568), float32]) -> (Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) {
  %369 = cast(%var_2163, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %370 = shape_of(%var_2162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_2162, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %373 = cast(meta[relay.Constant][17] /* ty=Tensor[(112, 4), bool] */, dtype="bool") /* ty=Tensor[(112, 4), bool] */;
  %374 = reshape(%373, newshape=[14, 4, 8]) /* ty=Tensor[(14, 4, 8), bool] */;
  %375 = @func_761(%374) /* ty=(Tensor[(14, 4, 8), bool], Tensor[(14, 4, 8), float64]) */;
  %376 = cast(%var_2181, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %377 = reshape(%376, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %378 = @func_885(%377) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %379 = mod(%371, %372) /* ty=Tensor[(2, 16, 3), float32] */;
  %380 = %375.0;
  %381 = %378.1;
  (%379, %380, meta[relay.Constant][17] /* ty=Tensor[(112, 4), bool] */, %381, %var_2181)
}

def @func_3185() -> (Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) {
  %396 = fn () -> (Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) {
    %382 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    %383 = cast(meta[relay.Constant][18] /* ty=Tensor[(5, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
    %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%382, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %387 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
    %388 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
    %389 = cast(%388, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
    %390 = cast(%388, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
    %391 = reshape(%389, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %392 = reshape(%390, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %393 = greater_equal(%385, %386) /* ty=Tensor[(5, 7, 5), bool] */;
    %394 = %387.0;
    %395 = @func_141(%391, %392) /* ty=Tensor[(5, 7, 16), float64] */;
    (%393, %394, %388, %395)
  };
  %396() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */
}

def @func_275(%var_273: Tensor[(9, 14, 3), float32]) -> (Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) {
  @func_272(%var_273) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */
}

def @func_3587() -> Tensor[(5, 7, 5), float32] {
  %397 = fn () -> Tensor[(5, 7, 5), float32] {
    @func_3445() /* ty=Tensor[(5, 7, 5), float32] */
  };
  %397() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_7147(%var_7139: Tensor[(1485), int16]) -> (Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(1485), int16], Tensor[(5, 7, 5), float32]) {
  %398 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %399 = cast(%var_7139, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %400 = cast(%var_7139, dtype="int16") /* ty=Tensor[(1485), int16] */;
  %401 = reshape(%399, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), int16] */;
  %402 = reshape(%400, newshape=[15, 11, 9]) /* ty=Tensor[(15, 11, 9), int16] */;
  %403 = @func_4579(%401, %402) /* ty=(Tensor[(15, 11, 9), int16], Tensor[(5, 7, 5), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) */;
  %404 = @func_5469() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
  %405 = @func_5034() /* ty=Tensor[(5, 7, 5), float32] */;
  %406 = %398.3;
  %407 = @func_5887() /* ty=Tensor[(5, 7, 5), float32] */;
  %408 = %403.1;
  %409 = %404.1;
  (%405, %406, %407, %408, %var_7139, %409)
}

def @func_6115(%var_6086: Tensor[(378), float32], %var_6092: Tensor[(210, 20), bool], %var_6094: Tensor[(210, 20), bool]) -> (Tensor[(5, 7, 5), float32], Tensor[(4, 140), float64], Tensor[(378), float32], Tensor[(792), float64], Tensor[(144), uint8], Tensor[(210, 20), bool], Tensor[(210, 20), float64], Tensor[(5, 7, 16), float64]) {
  %410 = cast(%var_6086, dtype="float32") /* ty=Tensor[(378), float32] */;
  %411 = reshape(%410, newshape=[9, 14, 3]) /* ty=Tensor[(9, 14, 3), float32] */;
  %412 = @func_272(%411) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(4, 140), float64], Tensor[(9, 14, 3), int8]) */;
  %413 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %414 = cast(meta[relay.Constant][19] /* ty=Tensor[(144), uint8] */, dtype="uint8") /* ty=Tensor[(144), uint8] */;
  %415 = cast(%var_6092, dtype="bool") /* ty=Tensor[(210, 20), bool] */;
  %416 = reshape(%413, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint8] */;
  %417 = reshape(%414, newshape=[6, 4, 6]) /* ty=Tensor[(6, 4, 6), uint8] */;
  %418 = reshape(%415, newshape=[15, 280]) /* ty=Tensor[(15, 280), bool] */;
  %419 = @func_4836(%416, %417, %418) /* ty=(Tensor[(6, 4, 6), bool], Tensor[(2, 14, 10), float64], Tensor[(792), float64], Tensor[(15, 280), bool]) */;
  %420 = cast(%var_6094, dtype="bool") /* ty=Tensor[(210, 20), bool] */;
  %421 = shape_of(%var_6092, dtype="int32") /* ty=Tensor[(2), int32] */;
  %422 = cast(%var_6092, dtype="bool") /* ty=Tensor[(210, 20), bool] */;
  %423 = dyn.reshape(%420, %421, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %424 = cast(%var_6094, dtype="float64") /* ty=Tensor[(210, 20), float64] */;
  %425 = %412.1;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %427 = cast(%425, dtype="float64") /* ty=Tensor[(4, 140), float64] */;
  %428 = reshape(%426, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %429 = reshape(%427, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
  %430 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %431 = %419.2;
  %432 = greater(%422, %423) /* ty=Tensor[(210, 20), bool] */;
  %433 = sigmoid(%424) /* ty=Tensor[(210, 20), float64] */;
  %434 = @func_141(%428, %429) /* ty=Tensor[(5, 7, 16), float64] */;
  (%430, %425, %var_6086, %431, meta[relay.Constant][19] /* ty=Tensor[(144), uint8] */, %432, %433, %434)
}

def @func_5941(%var_5939: uint16, %var_5940: Tensor[(13, 15, 11), uint16]) -> Tensor[(13, 15, 11), uint16] {
  %437 = fn (%var_5909: uint16, %var_5910: Tensor[(13, 15, 11), uint16]) -> Tensor[(13, 15, 11), uint16] {
    %435 = cast(%var_5909, dtype="uint16") /* ty=uint16 */;
    %436 = cast(%var_5910, dtype="uint16") /* ty=Tensor[(13, 15, 11), uint16] */;
    bitwise_or(%435, %436) /* ty=Tensor[(13, 15, 11), uint16] */
  };
  %437(%var_5939, %var_5940) /* ty=Tensor[(13, 15, 11), uint16] */
}

def @func_4841(%var_4838: Tensor[(6, 4, 6), uint8], %var_4839: Tensor[(6, 4, 6), uint8], %var_4840: Tensor[(15, 280), bool]) -> (Tensor[(6, 4, 6), bool], Tensor[(2, 14, 10), float64], Tensor[(792), float64], Tensor[(15, 280), bool]) {
  @func_4836(%var_4838, %var_4839, %var_4840) /* ty=(Tensor[(6, 4, 6), bool], Tensor[(2, 14, 10), float64], Tensor[(792), float64], Tensor[(15, 280), bool]) */
}

def @func_4360(%var_4357: Tensor[(1568), float32], %var_4358: Tensor[(14, 14, 8), bool], %var_4359: Tensor[(5, 7, 5), float32]) -> (Tensor[(1568), float32], Tensor[(14, 14, 8), float64], Tensor[(5, 7, 5), float64], Tensor[(14, 14, 8), int64], Tensor[(5, 7, 5), float32]) {
  @func_4355(%var_4357, %var_4358, %var_4359) /* ty=(Tensor[(1568), float32], Tensor[(14, 14, 8), float64], Tensor[(5, 7, 5), float64], Tensor[(14, 14, 8), int64], Tensor[(5, 7, 5), float32]) */
}

def @func_5803() -> Tensor[(5, 7, 5), int64] {
  %439 = fn () -> Tensor[(5, 7, 5), int64] {
    %438 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
    %438.0
  };
  %439() /* ty=Tensor[(5, 7, 5), int64] */
}

def @func_3612() -> Tensor[(5, 7, 5), float32] {
  %440 = fn () -> Tensor[(5, 7, 5), float32] {
    @func_3445() /* ty=Tensor[(5, 7, 5), float32] */
  };
  %440() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_6064() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) {
  %446 = fn () -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) {
    %441 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
    %442 = @func_4090() /* ty=(Tensor[(5, 7, 5), int64],) */;
    %443 = %441.1;
    %444 = @func_3586() /* ty=Tensor[(5, 7, 5), float32] */;
    %445 = %442.0;
    (%443, %444, %445)
  };
  %446() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */
}

def @func_7369(%var_7368: Tensor[(14, 6, 15), bool]) -> Tensor[(14, 6, 15), bool] {
  %451 = fn (%var_7358: Tensor[(14, 6, 15), bool]) -> Tensor[(14, 6, 15), bool] {
    %447 = cast(%var_7358, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
    %448 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(14, 6, 15), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 6, 15), bool] */, dtype="bool") /* ty=Tensor[(14, 6, 15), bool] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_and(%449, %450) /* ty=Tensor[(14, 6, 15), bool] */
  };
  %451(%var_7368) /* ty=Tensor[(14, 6, 15), bool] */
}

def @func_2492(%var_2454: Tensor[(6, 7, 10), int64], %var_2489: Tensor[(8, 196), float32]) -> (Tensor[(6, 7, 10), int64], Tensor[(6, 7, 10), bool], Tensor[(1568), float32], Tensor[(96), float32], Tensor[(8, 196), float32]) {
  %452 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 7, 10), int64] */, dtype="int64") /* ty=Tensor[(6, 7, 10), int64] */;
  %453 = shape_of(%var_2454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %454 = cast(%var_2454, dtype="int64") /* ty=Tensor[(6, 7, 10), int64] */;
  %455 = dyn.reshape(%452, %453, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %456 = cast(%var_2454, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %457 = acos(%456) /* ty=Tensor[(6, 7, 10), float32] */;
  %458 = cast(%457, dtype="float32") /* ty=Tensor[(6, 7, 10), float32] */;
  %459 = log10(%458) /* ty=Tensor[(6, 7, 10), float32] */;
  %460 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 7, 10), float32] */, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %461 = shape_of(%459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%459, dtype="bool") /* ty=Tensor[(6, 7, 10), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %464 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %465 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %466 = cast(%var_2489, dtype="float32") /* ty=Tensor[(8, 196), float32] */;
  %467 = reshape(%464, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %468 = reshape(%465, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %469 = reshape(%466, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %470 = @func_2186(%467, %468, %469) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(14, 4, 8), bool], Tensor[(112, 4), bool], Tensor[(14, 14, 8), float32], Tensor[(1568), float32]) */;
  %471 = right_shift(%454, %455) /* ty=Tensor[(6, 7, 10), int64] */;
  %472 = less(%462, %463) /* ty=Tensor[(6, 7, 10), bool] */;
  %473 = %470.4;
  (%471, %472, %473, meta[relay.Constant][23] /* ty=Tensor[(96), float32] */, %var_2489)
}

def @func_2496(%var_2494: Tensor[(6, 7, 10), int64], %var_2495: Tensor[(8, 196), float32]) -> (Tensor[(6, 7, 10), int64], Tensor[(6, 7, 10), bool], Tensor[(1568), float32], Tensor[(96), float32], Tensor[(8, 196), float32]) {
  @func_2492(%var_2494, %var_2495) /* ty=(Tensor[(6, 7, 10), int64], Tensor[(6, 7, 10), bool], Tensor[(1568), float32], Tensor[(96), float32], Tensor[(8, 196), float32]) */
}

def @func_4855() -> Tensor[(5, 7, 16), float64] {
  %474 = fn () -> Tensor[(5, 7, 16), float64] {
    @func_3695() /* ty=Tensor[(5, 7, 16), float64] */
  };
  %474() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_2676() -> Tensor[(5, 7, 5), float32] {
  %475 = cast(meta[relay.Constant][24] /* ty=Tensor[(5, 7, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
  cosh(%475) /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_2627(%var_2625: Tensor[(4, 3, 12), float32]) -> (Tensor[(4, 3, 12), float32],) {
  @func_2624(%var_2625) /* ty=(Tensor[(4, 3, 12), float32],) */
}

def @func_7738() -> Tensor[(468), float32] {
  @func_7736() /* ty=Tensor[(468), float32] */
}

def @func_4992(%var_4988: Tensor[(10, 16, 4), bool], %var_4989: Tensor[(10, 16, 4), bool], %var_4990: Tensor[(144), float32], %var_4991: Tensor[(10, 16, 4), bool]) -> (Tensor[(10, 16, 4), bool], Tensor[(4, 3, 12), float32], Tensor[(144), float32], Tensor[(5, 7, 5), int64], Tensor[(10, 16, 4), float64]) {
  @func_4986(%var_4988, %var_4989, %var_4990, %var_4991) /* ty=(Tensor[(10, 16, 4), bool], Tensor[(4, 3, 12), float32], Tensor[(144), float32], Tensor[(5, 7, 5), int64], Tensor[(10, 16, 4), float64]) */
}

def @func_7726() -> Tensor[(5, 7, 5), float32] {
  @func_7724() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_6873() -> (Tensor[(5, 7, 16), float64],) {
  %476 = @func_5180() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64]) */;
  %477 = %476.1;
  %478 = cast(%477, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
  %479 = rsqrt(%478) /* ty=Tensor[(5, 7, 16), float32] */;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
  %481 = asin(%480) /* ty=Tensor[(5, 7, 16), float64] */;
  (%481,)
}

def @func_7492(%var_7480: Tensor[(13, 1, 16), float32]) -> (Tensor[(13, ?, 16), float32],) {
  %482 = cast(%var_7480, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %483 = acosh(%482) /* ty=Tensor[(13, 1, 16), float32] */;
  %484 = cast(%var_7480, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %488 = divide(%486, %487) /* ty=Tensor[(13, ?, 16), float32] */;
  (%488,)
}

def @func_6668() -> Tensor[(5, 7, 5), float32] {
  %489 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %489.0
}

def @func_7014(%var_6989: Tensor[(2, 11, 8), uint16]) -> (Tensor[(2, 11, 8), bool], Tensor[(14, 14, 8), bool], Tensor[(1, 1568), float32], Tensor[(14, 14, 8), float32]) {
  %490 = cast(meta[relay.Constant][25] /* ty=Tensor[(2, 11, 8), uint16] */, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %491 = shape_of(%var_6989, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%var_6989, dtype="bool") /* ty=Tensor[(2, 11, 8), bool] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %494 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 1568), float32] */, dtype="float32") /* ty=Tensor[(1, 1568), float32] */;
  %495 = reshape(%494, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %496 = @func_885(%495) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %497 = %496.0;
  %498 = cast(%497, dtype="float32") /* ty=Tensor[(14, 14, 8), float32] */;
  %499 = reshape(%498, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
  %500 = @func_885(%499) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
  %501 = equal(%492, %493) /* ty=Tensor[(2, 11, 8), bool] */;
  %502 = %500.1;
  (%501, %497, meta[relay.Constant][26] /* ty=Tensor[(1, 1568), float32] */, %502)
}

def @func_145(%var_143: Tensor[(5, 7, 16), float64], %var_144: Tensor[(5, 7, 16), float64]) -> Tensor[(5, 7, 16), float64] {
  @func_141(%var_143, %var_144) /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_7159() -> (Tensor[(792), float64],) {
  %503 = @func_4514() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(9, 11, 8), bool], Tensor[(792), float64]) */;
  %504 = %503.2;
  (%504,)
}

def @func_7871() -> (Tensor[(5, 7, 5), float32],) {
  %505 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %506 = %505.1;
  (%506,)
}

def @func_3753() -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) {
  %507 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
  %508 = %507.1;
  %509 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  (%508, %509)
}

def @func_3845() -> (Tensor[(5, 7, 5), float32],) {
  @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */
}

def @func_4355(%var_4305: Tensor[(1568), float32], %var_4307: Tensor[(14, 14, 8), bool], %var_4324: Tensor[(5, 7, 5), float32]) -> (Tensor[(1568), float32], Tensor[(14, 14, 8), float64], Tensor[(5, 7, 5), float64], Tensor[(14, 14, 8), int64], Tensor[(5, 7, 5), float32]) {
  %510 = cast(%var_4305, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %511 = reshape(%510, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %512 = @func_3782(%511) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) */;
  %513 = %512.1;
  %514 = cast(%var_4307, dtype="float64") /* ty=Tensor[(14, 14, 8), float64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(3), int32] */;
  %516 = cast(%513, dtype="float64") /* ty=Tensor[(14, 14, 8), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %518 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %519 = cast(%var_4324, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %523 = cast(%513, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %524 = shape_of(%var_4307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %525 = cast(%var_4307, dtype="int64") /* ty=Tensor[(14, 14, 8), int64] */;
  %526 = dyn.reshape(%523, %524, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %527 = floor_divide(%516, %517) /* ty=Tensor[(14, 14, 8), float64] */;
  %528 = power(%521, %522) /* ty=Tensor[(5, 7, 5), float64] */;
  %529 = bitwise_xor(%525, %526) /* ty=Tensor[(14, 14, 8), int64] */;
  %530 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  (%var_4305, %527, %528, %529, %530)
}

def @func_7797() -> Tensor[(5, 7, 16), float64] {
  %531 = @func_5630() /* ty=(Tensor[(5, 7, 16), float64],) */;
  %531.0
}

def @func_5016(%var_5015: Tensor[(14, 12, 2), float64]) -> (Tensor[(14, 12, 2), uint8],) {
  %542 = fn (%var_5004: Tensor[(14, 12, 2), float64]) -> (Tensor[(14, 12, 2), uint8],) {
    %532 = cast(%var_5004, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
    %533 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 12, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %534 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 12, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 12, 2), float64] */;
    %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %536 = floor_mod(%534, %535) /* ty=Tensor[(14, 12, 2), float64] */;
    %537 = cast(%536, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
    %538 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(14, 12, 2), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %539 = cast(meta[relay.Constant][27] /* ty=Tensor[(14, 12, 2), float64] */, dtype="uint8") /* ty=Tensor[(14, 12, 2), uint8] */;
    %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %541 = right_shift(%539, %540) /* ty=Tensor[(14, 12, 2), uint8] */;
    (%541,)
  };
  %542(%var_5015) /* ty=(Tensor[(14, 12, 2), uint8],) */
}

def @func_4579(%var_4560: Tensor[(15, 11, 9), int16], %var_4561: Tensor[(15, 11, 9), int16]) -> (Tensor[(15, 11, 9), int16], Tensor[(5, 7, 5), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) {
  %543 = cast(%var_4561, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %544 = shape_of(%var_4560, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_4560, dtype="int16") /* ty=Tensor[(15, 11, 9), int16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %547 = cast(meta[relay.Constant][28] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
  %548 = reshape(%547, newshape=[1568]) /* ty=Tensor[(1568), float32] */;
  %549 = @func_3782(%548) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) */;
  %550 = minimum(%545, %546) /* ty=Tensor[(15, 11, 9), int16] */;
  %551 = %549.0;
  %552 = @func_4449() /* ty=Tensor[(5, 7, 5), float32] */;
  (%550, %551, meta[relay.Constant][28] /* ty=Tensor[(1568), float32] */, %552)
}

def @func_7837() -> Tensor[(5, 7, 5), float32] {
  @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_8048() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float64]) {
  @func_8046() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float64]) */
}

def @func_6875() -> (Tensor[(5, 7, 16), float64],) {
  @func_6873() /* ty=(Tensor[(5, 7, 16), float64],) */
}

def @func_502(%var_493: Tensor[(6, 8, 8), float64], %var_494: Tensor[(6, 8, 8), float64]) -> (Tensor[(6, 8, 8), float64],) {
  %553 = cast(%var_494, dtype="float64") /* ty=Tensor[(6, 8, 8), float64] */;
  %554 = shape_of(%var_493, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_493, dtype="float64") /* ty=Tensor[(6, 8, 8), float64] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %557 = mod(%555, %556) /* ty=Tensor[(6, 8, 8), float64] */;
  (%557,)
}

def @func_4386() -> (Tensor[(5, 7, 16), float64],) {
  %558 = @func_3753() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */;
  %559 = %558.0;
  (%559,)
}

def @func_3067() -> Tensor[(5, 7, 5), float32] {
  %560 = fn () -> Tensor[(5, 7, 5), float32] {
    @func_2676() /* ty=Tensor[(5, 7, 5), float32] */
  };
  %560() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_6193(%var_6191: Tensor[(2145), uint16]) -> (Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float64], Tensor[(1568), float32], Tensor[(13, 15, 11), uint16], uint16, Tensor[(2145), uint16]) {
  @func_6190(%var_6191) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float64], Tensor[(1568), float32], Tensor[(13, 15, 11), uint16], uint16, Tensor[(2145), uint16]) */
}

def @func_7273() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(792), float64]) {
  %567 = fn () -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(792), float64]) {
    %561 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
    %562 = @func_7159() /* ty=(Tensor[(792), float64],) */;
    %563 = @func_5034() /* ty=Tensor[(5, 7, 5), float32] */;
    %564 = @func_3586() /* ty=Tensor[(5, 7, 5), float32] */;
    %565 = %561.0;
    %566 = %562.0;
    (%563, %564, %565, %566)
  };
  %567() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(792), float64]) */
}

def @func_2950() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) {
  %578 = fn () -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) {
    %568 = @func_2856() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */;
    %569 = %568.1;
    %570 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    %571 = cast(%570, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
    %572 = shape_of(%569, dtype="int32") /* ty=Tensor[(3), int32] */;
    %573 = cast(%569, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
    %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %575 = cast(%570, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
    %576 = subtract(%573, %574) /* ty=Tensor[(5, 7, 5), int64] */;
    %577 = asinh(%575) /* ty=Tensor[(5, 7, 5), float64] */;
    (%576, %577)
  };
  %578() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */
}

def @func_907(%var_905: Tensor[(5, 4, 2), float64], %var_906: Tensor[(5, 4, 2), float64]) -> Tensor[(5, 4, 2), bool] {
  %588 = fn (%var_892: Tensor[(5, 4, 2), float64], %var_893: Tensor[(5, 4, 2), float64]) -> Tensor[(5, 4, 2), bool] {
    %579 = cast(%var_893, dtype="float64") /* ty=Tensor[(5, 4, 2), float64] */;
    %580 = shape_of(%var_892, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%var_892, dtype="float64") /* ty=Tensor[(5, 4, 2), float64] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %583 = power(%581, %582) /* ty=Tensor[(5, 4, 2), float64] */;
    %584 = cast(%var_893, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
    %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
    %586 = cast(%583, dtype="bool") /* ty=Tensor[(5, 4, 2), bool] */;
    %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%586, %587) /* ty=Tensor[(5, 4, 2), bool] */
  };
  %588(%var_905, %var_906) /* ty=Tensor[(5, 4, 2), bool] */
}

def @func_7839() -> Tensor[(5, 7, 5), float32] {
  @func_7837() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_4986(%var_4932: Tensor[(10, 16, 4), bool], %var_4933: Tensor[(10, 16, 4), bool], %var_4940: Tensor[(144), float32], %var_4979: Tensor[(10, 16, 4), bool]) -> (Tensor[(10, 16, 4), bool], Tensor[(4, 3, 12), float32], Tensor[(144), float32], Tensor[(5, 7, 5), int64], Tensor[(10, 16, 4), float64]) {
  %589 = cast(%var_4933, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
  %590 = shape_of(%var_4932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%var_4932, dtype="bool") /* ty=Tensor[(10, 16, 4), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = cast(%var_4940, dtype="float32") /* ty=Tensor[(144), float32] */;
  %594 = reshape(%593, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), float32] */;
  %595 = @func_2624(%594) /* ty=(Tensor[(4, 3, 12), float32],) */;
  %596 = @func_3184() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 5), int64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %597 = cast(%var_4979, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %598 = shape_of(%var_4932, dtype="int32") /* ty=Tensor[(3), int32] */;
  %599 = cast(%var_4932, dtype="float64") /* ty=Tensor[(10, 16, 4), float64] */;
  %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %601 = logical_and(%591, %592) /* ty=Tensor[(10, 16, 4), bool] */;
  %602 = %595.0;
  %603 = %596.1;
  %604 = floor_divide(%599, %600) /* ty=Tensor[(10, 16, 4), float64] */;
  (%601, %602, %var_4940, %603, %604)
}

def @func_3410(%var_3408: Tensor[(5, 7, 16), float64]) -> Tensor[(5, 7, 16), uint8] {
  @func_3407(%var_3408) /* ty=Tensor[(5, 7, 16), uint8] */
}

def @func_4282(%var_4255: Tensor[(468), float32]) -> (Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32], Tensor[(5, 7, 16), float64]) {
  %605 = @func_3291() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */;
  %606 = cast(%var_4255, dtype="float32") /* ty=Tensor[(468), float32] */;
  %607 = reshape(%606, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
  %608 = @func_1599(%607) /* ty=(Tensor[(12, 13, 3), float32],) */;
  %609 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %610 = %605.2;
  %611 = %608.0;
  %612 = %609.1;
  (%610, %611, %var_4255, %612)
}

def @func_3696() -> Tensor[(5, 7, 16), float64] {
  %613 = fn () -> Tensor[(5, 7, 16), float64] {
    @func_3055() /* ty=Tensor[(5, 7, 16), float64] */
  };
  %613() /* ty=Tensor[(5, 7, 16), float64] */
}

def @func_5428() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) {
  %617 = fn () -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) {
    %614 = @func_2949() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float64]) */;
    %615 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    %616 = %614.0;
    (%615, %616)
  };
  %617() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */
}

def @func_5694() -> (Tensor[(468), float32],) {
  %618 = @func_4484() /* ty=(Tensor[(468), float32],) */;
  %619 = %618.0;
  (%619,)
}

def @func_6460(%var_6383: Tensor[(2, 11, 11), float64], %var_6422: Tensor[(864), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(378), float32], Tensor[(864), float32], Tensor[(2, 11, 11), bool], Tensor[(2, 11, 11), int64]) {
  %620 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %621 = cast(%var_6422, dtype="float32") /* ty=Tensor[(864), float32] */;
  %622 = reshape(%621, newshape=[6, 16, 9]) /* ty=Tensor[(6, 16, 9), float32] */;
  %623 = @func_734(%622) /* ty=(Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) */;
  %624 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 11, 11), float64] */, dtype="float64") /* ty=Tensor[(2, 11, 11), float64] */;
  %625 = shape_of(%var_6383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %626 = cast(%var_6383, dtype="float64") /* ty=Tensor[(2, 11, 11), float64] */;
  %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %628 = mod(%626, %627) /* ty=Tensor[(2, 11, 11), float64] */;
  %629 = cast(%628, dtype="bool") /* ty=Tensor[(2, 11, 11), bool] */;
  %630 = shape_of(%var_6383, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_6383, dtype="bool") /* ty=Tensor[(2, 11, 11), bool] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %633 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 11, 11), float64] */, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %634 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%628, dtype="uint64") /* ty=Tensor[(2, 11, 11), uint64] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %637 = maximum(%635, %636) /* ty=Tensor[(2, 11, 11), uint64] */;
  %638 = cast(%var_6383, dtype="int32") /* ty=Tensor[(2, 11, 11), int32] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="int32") /* ty=Tensor[(2, 11, 11), int32] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %642 = right_shift(%640, %641) /* ty=Tensor[(2, 11, 11), int32] */;
  %643 = cast(%642, dtype="int64") /* ty=Tensor[(2, 11, 11), int64] */;
  %644 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %645 = cast(%637, dtype="int64") /* ty=Tensor[(2, 11, 11), int64] */;
  %646 = dyn.reshape(%643, %644, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %647 = %620.0;
  %648 = %623.2;
  %649 = equal(%631, %632) /* ty=Tensor[(2, 11, 11), bool] */;
  %650 = logical_xor(%645, %646) /* ty=Tensor[(2, 11, 11), int64] */;
  (%647, %648, %var_6422, %649, %650)
}

def @func_4043(%var_4041: Tensor[(40), float64]) -> (Tensor[(560), float64], Tensor[(5, 4, 2), uint16]) {
  @func_4040(%var_4041) /* ty=(Tensor[(560), float64], Tensor[(5, 4, 2), uint16]) */
}

def @func_6516() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64]) {
  %651 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %652 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
  %653 = %651.1;
  (%652, %653)
}

def @func_2787() -> (Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) {
  %665 = fn () -> (Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) {
    %654 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    %655 = cast(%654, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
    %656 = sigmoid(%655) /* ty=Tensor[(5, 7, 5), float32] */;
    %657 = cast(%656, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
    %658 = cast(meta[relay.Constant][30] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %659 = cast(meta[relay.Constant][30] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %660 = reshape(%658, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %661 = reshape(%659, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %662 = acos(%657) /* ty=Tensor[(5, 7, 5), float64] */;
    %663 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    %664 = @func_141(%660, %661) /* ty=Tensor[(5, 7, 16), float64] */;
    (%662, %663, %664, meta[relay.Constant][30] /* ty=Tensor[(560), float64] */)
  };
  %665() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */
}

def @func_1602(%var_1600: Tensor[(12, 13, 3), float32]) -> (Tensor[(12, 13, 3), float32],) {
  @func_1599(%var_1600) /* ty=(Tensor[(12, 13, 3), float32],) */
}

def @func_5359(%var_5351: Tensor[(2, 14, 10), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), int32], Tensor[(5, 7, 16), float64]) {
  %666 = @func_4012() /* ty=(Tensor[(560), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64]) */;
  %667 = %666.3;
  %668 = cast(%var_5351, dtype="int32") /* ty=Tensor[(2, 14, 10), int32] */;
  %669 = shape_of(%667, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%667, dtype="int32") /* ty=Tensor[(2, 14, 10), int32] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %672 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
  %673 = maximum(%670, %671) /* ty=Tensor[(2, 14, 10), int32] */;
  %674 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
  (%672, %673, %674)
}

def @func_4685(%var_4683: Tensor[(16, 16, 8), float64], %var_4684: Tensor[(16, 16, 8), float64]) -> (Tensor[(16, 16, 8), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), int64], Tensor[(16, 16, 8), float32]) {
  %689 = fn (%var_4626: Tensor[(16, 16, 8), float64], %var_4627: Tensor[(16, 16, 8), float64]) -> (Tensor[(16, 16, 8), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), int64], Tensor[(16, 16, 8), float32]) {
    %675 = cast(%var_4627, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    %676 = shape_of(%var_4626, dtype="int32") /* ty=Tensor[(3), int32] */;
    %677 = cast(%var_4626, dtype="float64") /* ty=Tensor[(16, 16, 8), float64] */;
    %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %679 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
    %680 = cast(%679, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
    %681 = cast(%679, dtype="float64") /* ty=Tensor[(5, 7, 16), float64] */;
    %682 = reshape(%680, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %683 = reshape(%681, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %684 = cast(%var_4627, dtype="float32") /* ty=Tensor[(16, 16, 8), float32] */;
    %685 = mod(%677, %678) /* ty=Tensor[(16, 16, 8), float64] */;
    %686 = @func_141(%682, %683) /* ty=Tensor[(5, 7, 16), float64] */;
    %687 = @func_4107() /* ty=Tensor[(5, 7, 5), int64] */;
    %688 = sin(%684) /* ty=Tensor[(16, 16, 8), float32] */;
    (%685, %679, %686, %687, %688)
  };
  %689(%var_4683, %var_4684) /* ty=(Tensor[(16, 16, 8), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), int64], Tensor[(16, 16, 8), float32]) */
}

def @func_5696() -> (Tensor[(468), float32],) {
  @func_5694() /* ty=(Tensor[(468), float32],) */
}

def @func_4192(%var_4191: Tensor[(9, 11, 8), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) {
  %709 = fn (%var_4182: Tensor[(9, 11, 8), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) {
    %690 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
    %691 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
    %692 = cast(%691, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
    %693 = cast(meta[relay.Constant][31] /* ty=Tensor[(24, 6), float32] */, dtype="float32") /* ty=Tensor[(24, 6), float32] */;
    %694 = reshape(%693, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), float32] */;
    %695 = @func_2624(%694) /* ty=(Tensor[(4, 3, 12), float32],) */;
    %696 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 1, 8), float64] */, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
    %697 = sinh(%696) /* ty=Tensor[(9, 1, 8), float64] */;
    %698 = cast(%697, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %699 = cast(%var_4182, dtype="bool") /* ty=Tensor[(9, 11, 8), bool] */;
    %700 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
    %702 = %690.0;
    %703 = acos(%692) /* ty=Tensor[(5, 7, 16), float32] */;
    %704 = %695.0;
    %705 = @func_3341() /* ty=Tensor[(5, 7, 5), float32] */;
    %706 = @func_3695() /* ty=Tensor[(5, 7, 16), float64] */;
    %707 = not_equal(%698, %699) /* ty=Tensor[(9, 11, 8), bool] */;
    %708 = log2(%701) /* ty=Tensor[(5, 7, 5), float32] */;
    (%702, %703, %704, meta[relay.Constant][31] /* ty=Tensor[(24, 6), float32] */, %705, %706, %707, %708)
  };
  %709(%var_4191) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float32], Tensor[(4, 3, 12), float32], Tensor[(24, 6), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(9, 11, 8), bool], Tensor[(5, 7, 5), float32]) */
}

def @func_5632() -> (Tensor[(5, 7, 16), float64],) {
  @func_5630() /* ty=(Tensor[(5, 7, 16), float64],) */
}

def @func_763(%var_762: Tensor[(14, 4, 8), bool]) -> (Tensor[(14, 4, 8), bool], Tensor[(14, 4, 8), float64]) {
  %717 = fn (%var_743: Tensor[(14, 4, 8), bool]) -> (Tensor[(14, 4, 8), bool], Tensor[(14, 4, 8), float64]) {
    %710 = cast(%var_743, dtype="bool") /* ty=Tensor[(14, 4, 8), bool] */;
    %711 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 8), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %712 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 8), bool] */, dtype="bool") /* ty=Tensor[(14, 4, 8), bool] */;
    %713 = dyn.reshape(%710, %711, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %714 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 8), bool] */, dtype="float64") /* ty=Tensor[(14, 4, 8), float64] */;
    %715 = logical_and(%712, %713) /* ty=Tensor[(14, 4, 8), bool] */;
    %716 = log10(%714) /* ty=Tensor[(14, 4, 8), float64] */;
    (%715, %716)
  };
  %717(%var_762) /* ty=(Tensor[(14, 4, 8), bool], Tensor[(14, 4, 8), float64]) */
}

def @func_5865() -> Tensor[(5, 7, 5), float64] {
  %718 = @func_5034() /* ty=Tensor[(5, 7, 5), float32] */;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  atan(%719) /* ty=Tensor[(5, 7, 5), float64] */
}

def @func_5888() -> Tensor[(5, 7, 5), float32] {
  %721 = fn () -> Tensor[(5, 7, 5), float32] {
    %720 = @func_5427() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
    %720.0
  };
  %721() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_7412() -> Tensor[(468), float32] {
  %723 = fn () -> Tensor[(468), float32] {
    %722 = @func_5694() /* ty=(Tensor[(468), float32],) */;
    %722.0
  };
  %723() /* ty=Tensor[(468), float32] */
}

def @func_7508() -> (Tensor[(5, 7, 16), float64],) {
  @func_7506() /* ty=(Tensor[(5, 7, 16), float64],) */
}

def @func_6518() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64]) {
  @func_6516() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64]) */
}

def @func_6986() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) {
  %739 = fn () -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) {
    %724 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
    %725 = %724.1;
    %726 = cast(meta[relay.Constant][34] /* ty=Tensor[(5, 7, 5), float32] */, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
    %727 = shape_of(%725, dtype="int32") /* ty=Tensor[(3), int32] */;
    %728 = cast(%725, dtype="int64") /* ty=Tensor[(5, 7, 5), int64] */;
    %729 = dyn.reshape(%726, %727, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %730 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
    %731 = cast(meta[relay.Constant][35] /* ty=Tensor[(1568), float32] */, dtype="float32") /* ty=Tensor[(1568), float32] */;
    %732 = reshape(%731, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
    %733 = @func_885(%732) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
    %734 = @func_5284() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(468), float32], Tensor[(2, 14, 10), float64]) */;
    %735 = right_shift(%728, %729) /* ty=Tensor[(5, 7, 5), int64] */;
    %736 = %730.0;
    %737 = %733.1;
    %738 = %734.0;
    (%735, %736, %737, meta[relay.Constant][35] /* ty=Tensor[(1568), float32] */, %738)
  };
  %739() /* ty=(Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), float32], Tensor[(1568), float32], Tensor[(5, 7, 5), float32]) */
}

def @func_2857() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) {
  %747 = fn () -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) {
    %740 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    %741 = cast(%740, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
    %742 = tan(%741) /* ty=Tensor[(5, 7, 5), float32] */;
    %743 = cast(%742, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
    %744 = cast(%742, dtype="float32") /* ty=Tensor[(5, 7, 5), float32] */;
    %745 = log(%743) /* ty=Tensor[(5, 7, 5), float32] */;
    %746 = sin(%744) /* ty=Tensor[(5, 7, 5), float32] */;
    (%745, %746)
  };
  %747() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */
}

def @func_3292() -> (Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) {
  %763 = fn () -> (Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) {
    %748 = @func_3066() /* ty=Tensor[(5, 7, 5), float32] */;
    %749 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 7, 5), float32] */, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
    %750 = shape_of(%748, dtype="int32") /* ty=Tensor[(3), int32] */;
    %751 = cast(%748, dtype="bool") /* ty=Tensor[(5, 7, 5), bool] */;
    %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %753 = cast(meta[relay.Constant][37] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %754 = cast(meta[relay.Constant][37] /* ty=Tensor[(560), float64] */, dtype="float64") /* ty=Tensor[(560), float64] */;
    %755 = reshape(%753, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %756 = reshape(%754, newshape=[5, 7, 16]) /* ty=Tensor[(5, 7, 16), float64] */;
    %757 = cast(meta[relay.Constant][38] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %758 = reshape(%757, newshape=[12, 13, 3]) /* ty=Tensor[(12, 13, 3), float32] */;
    %759 = @func_1599(%758) /* ty=(Tensor[(12, 13, 3), float32],) */;
    %760 = less(%751, %752) /* ty=Tensor[(5, 7, 5), bool] */;
    %761 = @func_141(%755, %756) /* ty=Tensor[(5, 7, 16), float64] */;
    %762 = %759.0;
    (%760, %761, meta[relay.Constant][37] /* ty=Tensor[(560), float64] */, %762, meta[relay.Constant][38] /* ty=Tensor[(468), float32] */)
  };
  %763() /* ty=(Tensor[(5, 7, 5), bool], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(12, 13, 3), float32], Tensor[(468), float32]) */
}

def @func_4780(%var_4775: Tensor[(96, 4), float64]) -> (Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) {
  %764 = @func_3843() /* ty=(Tensor[(5, 7, 5), float32],) */;
  %765 = cast(%var_4775, dtype="float64") /* ty=Tensor[(96, 4), float64] */;
  %766 = cast(%var_4775, dtype="float64") /* ty=Tensor[(96, 4), float64] */;
  %767 = reshape(%765, newshape=[6, 8, 8]) /* ty=Tensor[(6, 8, 8), float64] */;
  %768 = reshape(%766, newshape=[6, 8, 8]) /* ty=Tensor[(6, 8, 8), float64] */;
  %769 = @func_502(%767, %768) /* ty=(Tensor[(6, 8, 8), float64],) */;
  %770 = @func_3055() /* ty=Tensor[(5, 7, 16), float64] */;
  %771 = %764.0;
  %772 = %769.0;
  (%770, %771, %772, %var_4775)
}

def @func_5470() -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) {
  %776 = fn () -> (Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) {
    %773 = @func_5440() /* ty=(Tensor[(5, 7, 5), float32],) */;
    %774 = %773.0;
    %775 = @func_2676() /* ty=Tensor[(5, 7, 5), float32] */;
    (%774, %775)
  };
  %776() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32]) */
}

def @func_5880() -> (Tensor[(5, 7, 5), float32],) {
  @func_5878() /* ty=(Tensor[(5, 7, 5), float32],) */
}

def @func_6120(%var_6117: Tensor[(378), float32], %var_6118: Tensor[(210, 20), bool], %var_6119: Tensor[(210, 20), bool]) -> (Tensor[(5, 7, 5), float32], Tensor[(4, 140), float64], Tensor[(378), float32], Tensor[(792), float64], Tensor[(144), uint8], Tensor[(210, 20), bool], Tensor[(210, 20), float64], Tensor[(5, 7, 16), float64]) {
  @func_6115(%var_6117, %var_6118, %var_6119) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(4, 140), float64], Tensor[(378), float32], Tensor[(792), float64], Tensor[(144), uint8], Tensor[(210, 20), bool], Tensor[(210, 20), float64], Tensor[(5, 7, 16), float64]) */
}

def @func_7161() -> (Tensor[(792), float64],) {
  @func_7159() /* ty=(Tensor[(792), float64],) */
}

def @func_506(%var_504: Tensor[(6, 8, 8), float64], %var_505: Tensor[(6, 8, 8), float64]) -> (Tensor[(6, 8, 8), float64],) {
  @func_502(%var_504, %var_505) /* ty=(Tensor[(6, 8, 8), float64],) */
}

def @func_6738(%var_6688: Tensor[(7, 10, 15), uint32], %var_6725: Tensor[(384), float64]) -> (Tensor[(7, 10, 15), uint32], Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), float64], Tensor[(280), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(384), float64], Tensor[(5, 7, 5), float32]) {
  %777 = cast(meta[relay.Constant][39] /* ty=Tensor[(7, 10, 15), uint32] */, dtype="uint32") /* ty=Tensor[(7, 10, 15), uint32] */;
  %778 = shape_of(%var_6688, dtype="int32") /* ty=Tensor[(3), int32] */;
  %779 = cast(%var_6688, dtype="uint32") /* ty=Tensor[(7, 10, 15), uint32] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %781 = cast(meta[relay.Constant][40] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %782 = reshape(%781, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float64] */;
  %783 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
  %784 = cast(%var_6725, dtype="float64") /* ty=Tensor[(384), float64] */;
  %785 = reshape(%784, newshape=[96, 4]) /* ty=Tensor[(96, 4), float64] */;
  %786 = @func_4780(%785) /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32], Tensor[(6, 8, 8), float64], Tensor[(96, 4), float64]) */;
  %787 = right_shift(%779, %780) /* ty=Tensor[(7, 10, 15), uint32] */;
  %788 = @func_6668() /* ty=Tensor[(5, 7, 5), float32] */;
  %789 = @func_2985(%782) /* ty=Tensor[(2, 14, 10), float64] */;
  %790 = %783.1;
  %791 = @func_5819() /* ty=Tensor[(5, 7, 5), float32] */;
  %792 = %786.0;
  %793 = @func_3586() /* ty=Tensor[(5, 7, 5), float32] */;
  (%787, %788, %789, meta[relay.Constant][40] /* ty=Tensor[(280), float64] */, %790, %791, %792, %var_6725, %793)
}

def @func_1802(%var_1799: Tensor[(2, 6, 5), float32], %var_1800: Tensor[(4, 392), float32], %var_1801: Tensor[(560), float64]) -> (Tensor[(14, 14, 8), bool], Tensor[(4, 392), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(2, 6, 5), float64]) {
  @func_1797(%var_1799, %var_1800, %var_1801) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(4, 392), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64], Tensor[(2, 6, 5), float64]) */
}

def @func_7822() -> Tensor[(5, 7, 5), float32] {
  @func_4449() /* ty=Tensor[(5, 7, 5), float32] */
}

def @func_3943() -> (Tensor[(5, 7, 5), bool],) {
  @func_3941() /* ty=(Tensor[(5, 7, 5), bool],) */
}

def @func_7530() -> (Tensor[(560), float64],) {
  %798 = fn () -> (Tensor[(560), float64],) {
    %794 = @func_2786() /* ty=(Tensor[(5, 7, 5), float64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 16), float64], Tensor[(560), float64]) */;
    %795 = %794.3;
    %796 = cast(%795, dtype="float64") /* ty=Tensor[(560), float64] */;
    %797 = log10(%796) /* ty=Tensor[(560), float64] */;
    (%797,)
  };
  %798() /* ty=(Tensor[(560), float64],) */
}

def @func_7736() -> Tensor[(468), float32] {
  %799 = @func_5694() /* ty=(Tensor[(468), float32],) */;
  %799.0
}

def @func_7506() -> (Tensor[(5, 7, 16), float64],) {
  %800 = @func_4230() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 16), float64]) */;
  %801 = %800.1;
  (%801,)
}

def @func_8046() -> (Tensor[(5, 7, 5), int64], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float64]) {
  %802 = @func_7779() /* ty=(Tensor[(5, 7, 16), float64], Tensor[(5, 7, 5), float32]) */;
  %803 = @func_6063() /* ty=(Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), float32], Tensor[(5, 7, 5), int64]) */;
  %804 = %803.1;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(5, 7, 5), float64] */;
  %806 = @func_4107() /* ty=Tensor[(5, 7, 5), int64] */;
  %807 = @func_3341() /* ty=Tensor[(5, 7, 5), float32] */;
  %808 = %802.1;
  %809 = log10(%805) /* ty=Tensor[(5, 7, 5), float64] */;
  (%806, %807, %808, %809)
}

def @func_737(%var_735: Tensor[(6, 16, 9), float32]) -> (Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) {
  @func_734(%var_735) /* ty=(Tensor[(6, 16, 9), float32], Tensor[(5, 7, 16), float64], Tensor[(378), float32]) */
}

def @func_3784(%var_3783: Tensor[(1568), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) {
  %815 = fn (%var_3780: Tensor[(1568), float32]) -> (Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) {
    %810 = cast(%var_3780, dtype="float32") /* ty=Tensor[(1568), float32] */;
    %811 = reshape(%810, newshape=[14, 14, 8]) /* ty=Tensor[(14, 14, 8), float32] */;
    %812 = @func_885(%811) /* ty=(Tensor[(14, 14, 8), bool], Tensor[(14, 14, 8), float32]) */;
    %813 = @func_3611() /* ty=Tensor[(5, 7, 5), float32] */;
    %814 = %812.0;
    (%813, %814, %var_3780)
  };
  %815(%var_3783) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(14, 14, 8), bool], Tensor[(1568), float32]) */
}

def @func_5362(%var_5360: Tensor[(2, 14, 10), float64]) -> (Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), int32], Tensor[(5, 7, 16), float64]) {
  @func_5359(%var_5360) /* ty=(Tensor[(5, 7, 5), float32], Tensor[(2, 14, 10), int32], Tensor[(5, 7, 16), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen241/build/output.py", line 2284, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:00:05] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

