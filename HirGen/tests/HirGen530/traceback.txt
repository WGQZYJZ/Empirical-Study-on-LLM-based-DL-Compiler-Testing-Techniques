==========mod==========
#[version = "0.0.5"]
def @func_9603(%var_9575: Tensor[(13, 117), float32]) -> (Tensor[(4, 12, 5), uint8], Tensor[(7, 14, 13), float32], Tensor[(13, 117), float32]) {
  %0 = @func_3227() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) */;
  %1 = @func_9104() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) */;
  %2 = @func_6470() /* ty=Tensor[(13, 117), float32] */;
  %3 = cast(%var_9575, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
  %4 = shape_of(%2, dtype="int32") /* ty=Tensor[(2), int32] */;
  %5 = cast(%2, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
  %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %7 = %0.1;
  %8 = %1.0;
  %9 = floor_divide(%5, %6) /* ty=Tensor[(13, 117), float32] */;
  (%7, %8, %9)
}

def @func_1906() -> (Tensor[(1274), int8],) {
  %10 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %11 = %10.1;
  (%11,)
}

def @func_8349(%var_8347: Tensor[(1456), float64]) -> (Tensor[(7, 14, 13), float32], Tensor[(1456), float64], Tensor[(1456), float64]) {
  %12 = cast(%var_8347, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %13 = reshape(%12, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %14 = @func_1796(%13) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %15 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %16 = %14.1;
  (%15, %16, %var_8347)
}

def @func_785() -> (Tensor[(1274), float64],) {
  %17 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %18 = %17.0;
  (%18,)
}

def @func_6775(%var_6765: Tensor[(16, 16, 1), uint16], %var_6766: Tensor[(16, 16, 14), uint16]) -> Tensor[(16, 16, 14), uint16] {
  %19 = cast(%var_6765, dtype="uint16") /* ty=Tensor[(16, 16, 1), uint16] */;
  %20 = cast(%var_6766, dtype="uint16") /* ty=Tensor[(16, 16, 14), uint16] */;
  minimum(%19, %20) /* ty=Tensor[(16, 16, 14), uint16] */
}

def @func_1440() -> (Tensor[(1274), int8],) {
  %21 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %22 = %21.0;
  (%22,)
}

def @func_7858() -> (Tensor[(1274), float64],) {
  %23 = @func_4262() /* ty=Tensor[(1274), float64] */;
  (%23,)
}

def @func_3170(%var_3155: Tensor[(3, 2, 5), uint8], %var_3156: Tensor[(3, 2, 5), uint8]) -> (Tensor[(3, 2, 5), bool], Tensor[(3, 2, 5), bool]) {
  %24 = cast(%var_3156, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %25 = shape_of(%var_3155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%var_3155, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = cast(%var_3156, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %29 = shape_of(%var_3155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_3155, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = greater(%26, %27) /* ty=Tensor[(3, 2, 5), bool] */;
  %33 = less(%30, %31) /* ty=Tensor[(3, 2, 5), bool] */;
  (%32, %33)
}

def @func_2604(%var_2600: Tensor[(1456), float64]) -> (Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  %34 = @func_1146() /* ty=Tensor[(1274), float64] */;
  %35 = cast(meta[relay.Constant][0] /* ty=Tensor[(1274), float64] */, dtype="int64") /* ty=Tensor[(1274), int64] */;
  %36 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
  %37 = cast(%34, dtype="int64") /* ty=Tensor[(1274), int64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?), int64] */;
  %39 = cast(%var_2600, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %40 = cast(%var_2600, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %41 = reshape(%39, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %42 = reshape(%40, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %43 = bitwise_xor(%37, %38) /* ty=Tensor[(1274), int64] */;
  %44 = @func_435(%41, %42) /* ty=Tensor[(7, 13, 16), float64] */;
  (%43, %44, %var_2600)
}

def @func_3227() -> (Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) {
  %45 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %47 = sigmoid(%46) /* ty=Tensor[(4, 12, 5), float64] */;
  %48 = cast(%47, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %49 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %50 = %49.1;
  %51 = cast(%47, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
  %52 = shape_of(%50, dtype="int32") /* ty=Tensor[(3), int32] */;
  %53 = cast(%50, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
  %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %55 = erf(%48) /* ty=Tensor[(4, 12, 5), float64] */;
  %56 = right_shift(%53, %54) /* ty=Tensor[(4, 12, 5), uint8] */;
  (%55, %56)
}

def @func_7256() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) {
  %57 = @func_4332() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %58 = @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %59 = %57.0;
  %60 = %58.0;
  (%59, %60)
}

def @func_5066() -> (Tensor[(1274), bool], Tensor[(1456), float64], Tensor[(1274), bool]) {
  %61 = @func_1841() /* ty=Tensor[(1274), float64] */;
  %62 = @func_3690() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %63 = %62.1;
  %64 = cast(%63, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %65 = shape_of(%61, dtype="int32") /* ty=Tensor[(1), int32] */;
  %66 = cast(%61, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?), bool] */;
  %68 = @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */;
  %69 = @func_4332() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %70 = equal(%66, %67) /* ty=Tensor[(1274), bool] */;
  %71 = %68.4;
  %72 = %69.2;
  (%70, %71, %72)
}

def @func_7388() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) {
  %73 = @func_5921() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %74 = @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */;
  %75 = %73.0;
  %76 = %74.0;
  (%75, %76)
}

def @func_1146() -> Tensor[(1274), float64] {
  %77 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %77.1
}

def @func_2747() -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
  %78 = @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %79 = @func_1146() /* ty=Tensor[(1274), float64] */;
  %80 = %78.3;
  (%79, %80)
}

def @func_7167() -> Tensor[(13, 117), float32] {
  %81 = @func_6470() /* ty=Tensor[(13, 117), float32] */;
  %82 = cast(%81, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
  asinh(%82) /* ty=Tensor[(13, 117), float32] */
}

def @func_8377() -> (Tensor[(1274), float64],) {
  %83 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
  %84 = %83.0;
  (%84,)
}

def @func_9274() -> (Tensor[(1521), uint16],) {
  %85 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
  %86 = %85.2;
  (%86,)
}

def @func_5561() -> (Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %87 = @func_2747() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %88 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %89 = @func_3734() /* ty=Tensor[(1274), int8] */;
  %90 = %87.1;
  %91 = %88.0;
  %92 = @func_2510() /* ty=Tensor[(1274), int8] */;
  (%89, %90, %91, %92)
}

def @func_6063() -> Tensor[(1274), float64] {
  @func_4646() /* ty=Tensor[(1274), float64] */
}

def @func_7964() -> Tensor[(1274), float32] {
  @func_6552() /* ty=Tensor[(1274), float32] */
}

def @func_5799() -> (Tensor[(1274), float64],) {
  %93 = @func_1613() /* ty=Tensor[(1274), float64] */;
  %94 = cast(%93, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %95 = sigmoid(%94) /* ty=Tensor[(1274), float64] */;
  (%95,)
}

def @func_6236() -> Tensor[(1274), float64] {
  %96 = @func_3450() /* ty=(Tensor[(1274), float64],) */;
  %96.0
}

def @func_4149() -> (Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  %97 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %98 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
  %99 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %100 = @func_3703() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %101 = cast(meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %102 = cast(meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %103 = reshape(%101, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %104 = reshape(%102, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %105 = %97.2;
  %106 = %98.0;
  %107 = %99.3;
  %108 = %100.0;
  %109 = @func_435(%103, %104) /* ty=Tensor[(7, 13, 16), float64] */;
  (%105, %106, %107, %108, %109, meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */)
}

def @func_3406(%var_3403: Tensor[(154, 9), int8]) -> (Tensor[(4, 12, 5), bool], Tensor[(9, 11, 14), bool], Tensor[(154, 9), int8]) {
  %110 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %111 = cast(%var_3403, dtype="int8") /* ty=Tensor[(154, 9), int8] */;
  %112 = reshape(%111, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), int8] */;
  %113 = @func_736(%112) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */;
  %114 = %110.1;
  %115 = %113.0;
  (%114, %115, %var_3403)
}

def @func_7018() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32]) {
  %116 = @func_5682() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
  %117 = @func_4039() /* ty=(Tensor[(4, 12, 5), float64],) */;
  %118 = %117.0;
  %119 = cast(%118, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  %120 = %116.1;
  %121 = log2(%119) /* ty=Tensor[(4, 12, 5), float32] */;
  (%120, %121)
}

def @func_3989() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) {
  %122 = cast(meta[relay.Constant][2] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %123 = reshape(%122, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %124 = @func_1423(%123) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %125 = @func_1692() /* ty=Tensor[(4, 12, 5), bool] */;
  %126 = %124.0;
  (%125, %126, meta[relay.Constant][2] /* ty=Tensor[(1274), float64] */)
}

def @func_2679() -> (Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) {
  %127 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %128 = @func_1699() /* ty=(Tensor[(1274), float64],) */;
  %129 = @func_2125() /* ty=(Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) */;
  %130 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %131 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %132 = %127.1;
  %133 = %128.0;
  %134 = %129.1;
  %135 = %130.2;
  (%131, %132, %133, %134, %135)
}

def @func_6829() -> (Tensor[(7, 13, 16), float64],) {
  %136 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %137 = %136.1;
  (%137,)
}

def @func_6507() -> Tensor[(1274), float64] {
  %138 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %138.3
}

def @func_8727() -> Tensor[(4, 12, 5), bool] {
  %139 = @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %139.0
}

def @func_1199() -> (Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) {
  %140 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %141 = cast(meta[relay.Constant][3] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %142 = cast(meta[relay.Constant][3] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %143 = reshape(%141, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %144 = reshape(%142, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %145 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %146 = %140.0;
  %147 = @func_435(%143, %144) /* ty=Tensor[(7, 13, 16), float64] */;
  %148 = %145.0;
  (%146, %147, meta[relay.Constant][3] /* ty=Tensor[(1456), float64] */, %148)
}

def @func_5385() -> (Tensor[(1274), int8],) {
  %149 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %150 = %149.0;
  (%150,)
}

def @func_9392() -> (Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %151 = @func_8266() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(1274), float64]) */;
  %152 = %151.0;
  %153 = cast(%152, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %154 = reshape(%153, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %155 = @func_2643(%154) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
  %156 = %155.1;
  %157 = @func_4785() /* ty=Tensor[(1274), int8] */;
  (%152, %156, %157)
}

def @func_3049() -> (Tensor[(14, 16, 6), float32],) {
  %158 = @func_2125() /* ty=(Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) */;
  %159 = %158.0;
  (%159,)
}

def @func_2458() -> (Tensor[(1456), float64], Tensor[(7, 13, 16), float64]) {
  %160 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %161 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
  %162 = %160.2;
  %163 = %161.1;
  (%162, %163)
}

def @func_415() -> (Tensor[(1274), int8],) {
  %164 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %165 = %164.2;
  (%165,)
}

def @func_9229(%var_9222: Tensor[(6, 10, 10), int8], %var_9223: Tensor[(6, 10, 10), int8]) -> (Tensor[(6, 10, 10), int8],) {
  %166 = cast(%var_9223, dtype="int8") /* ty=Tensor[(6, 10, 10), int8] */;
  %167 = shape_of(%var_9222, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%var_9222, dtype="int8") /* ty=Tensor[(6, 10, 10), int8] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %170 = maximum(%168, %169) /* ty=Tensor[(6, 10, 10), int8] */;
  (%170,)
}

def @func_3112() -> (Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) {
  %171 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 117), uint16] */, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %172 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 117), uint16] */, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %173 = @func_2510() /* ty=Tensor[(1274), int8] */;
  %174 = cast(%173, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %175 = reshape(%171, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %176 = reshape(%172, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %177 = reshape(%174, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %178 = @func_2308(%175, %176, %177) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %179 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %180 = %178.0;
  %181 = %179.0;
  (%173, %180, meta[relay.Constant][4] /* ty=Tensor[(13, 117), uint16] */, %181)
}

def @func_3574() -> Tensor[(1274), float32] {
  %182 = @func_397() /* ty=Tensor[(1274), float64] */;
  %183 = cast(%182, dtype="float32") /* ty=Tensor[(1274), float32] */;
  sinh(%183) /* ty=Tensor[(1274), float32] */
}

def @func_7305(%var_7287: uint16, %var_7288: Tensor[(15, 14, 10), uint16]) -> (Tensor[(15, 14, 10), uint16],) {
  %184 = cast(%var_7287, dtype="uint16") /* ty=uint16 */;
  %185 = cast(%var_7288, dtype="uint16") /* ty=Tensor[(15, 14, 10), uint16] */;
  %186 = left_shift(%184, %185) /* ty=Tensor[(15, 14, 10), uint16] */;
  (%186,)
}

def @func_8657(%var_8547: Tensor[(1274), int8], %var_8600: Tensor[(1386), int8], %var_8650: Tensor[(9, 11, 14), float64]) -> (Tensor[(1274), uint64], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(1274), int8], Tensor[(7, 14, 13), float32], Tensor[(1386), int8], Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), bool], Tensor[(1521), uint16], Tensor[(1274), int8], Tensor[(9, 11, 14), float64]) {
  %187 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %188 = %187.0;
  %189 = cast(%var_8547, dtype="uint64") /* ty=Tensor[(1274), uint64] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(1), int32] */;
  %191 = cast(%188, dtype="uint64") /* ty=Tensor[(1274), uint64] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %193 = right_shift(%191, %192) /* ty=Tensor[(1274), uint64] */;
  %194 = cast(%193, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %195 = reshape(%194, newshape=[1274]) /* ty=Tensor[(1274), bool] */;
  %196 = @func_3498(%195) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) */;
  %197 = @func_7820() /* ty=(Tensor[(1274), float64],) */;
  %198 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %199 = @func_6142() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %200 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %201 = @func_1906() /* ty=(Tensor[(1274), int8],) */;
  %202 = %198.0;
  %203 = cast(%202, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %204 = reshape(%203, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %205 = @func_1423(%204) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %206 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
  %207 = @func_6359() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %208 = cast(%var_8600, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %209 = reshape(%208, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), int8] */;
  %210 = @func_736(%209) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */;
  %211 = %210.0;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %213 = atan(%212) /* ty=Tensor[(9, 11, 14), float64] */;
  %214 = cast(%var_8650, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %215 = shape_of(%213, dtype="int32") /* ty=Tensor[(3), int32] */;
  %216 = cast(%213, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %217 = dyn.reshape(%214, %215, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %218 = %196.2;
  %219 = %197.0;
  %220 = @func_8407() /* ty=Tensor[(1456), float64] */;
  %221 = %199.0;
  %222 = %200.1;
  %223 = %201.0;
  %224 = %205.0;
  %225 = %206.2;
  %226 = %207.0;
  %227 = floor_divide(%216, %217) /* ty=Tensor[(9, 11, 14), float64] */;
  (%193, %218, %219, %220, %202, %221, %var_8600, %222, %223, %224, %225, %226, %227)
}

def @func_2697() -> Tensor[(1274), bool] {
  %228 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %228.0
}

def @func_3498(%var_3460: Tensor[(1274), bool]) -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) {
  %229 = @func_2796() /* ty=(Tensor[(1274), int8], Tensor[(1274), bool]) */;
  %230 = %229.1;
  %231 = cast(%var_3460, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %232 = shape_of(%230, dtype="int32") /* ty=Tensor[(1), int32] */;
  %233 = cast(%230, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?), float64] */;
  %235 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %236 = @func_3227() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) */;
  %237 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
  %238 = divide(%233, %234) /* ty=Tensor[(1274), float64] */;
  %239 = %235.1;
  %240 = %236.1;
  %241 = %237.0;
  (%238, %239, %240, %241)
}

def @func_8951(%var_8921: Tensor[(4, 14, 1), float32]) -> (Tensor[(4, 14, ?), bool],) {
  %242 = cast(%var_8921, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
  %243 = cos(%242) /* ty=Tensor[(4, 14, 1), float32] */;
  %244 = cast(%var_8921, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = less(%246, %247) /* ty=Tensor[(4, 14, ?), bool] */;
  (%248,)
}

def @func_9336() -> Tensor[(4, 12, 5), bool] {
  @func_9207() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_1067(%var_1056: Tensor[(1456), float64]) -> (Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  %249 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %250 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %251 = cast(%250, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %252 = cast(%var_1056, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %253 = cast(%var_1056, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %254 = reshape(%252, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %255 = reshape(%253, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %256 = %249.0;
  %257 = tan(%251) /* ty=Tensor[(4, 12, 5), float64] */;
  %258 = @func_435(%254, %255) /* ty=Tensor[(7, 13, 16), float64] */;
  (%256, %257, %258, %var_1056)
}

def @func_2510() -> Tensor[(1274), int8] {
  %259 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %259.1
}

def @func_5729() -> (Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %260 = @func_5385() /* ty=(Tensor[(1274), int8],) */;
  %261 = %260.0;
  %262 = cast(%261, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %263 = reshape(%262, newshape=[1274]) /* ty=Tensor[(1274), int8] */;
  %264 = @func_2938(%263) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */;
  %265 = @func_2510() /* ty=Tensor[(1274), int8] */;
  %266 = %264.2;
  (%261, %265, %266)
}

def @func_2410() -> (Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) {
  %267 = cast(meta[relay.Constant][5] /* ty=Tensor[(169, 9), uint16] */, dtype="uint16") /* ty=Tensor[(169, 9), uint16] */;
  %268 = cast(meta[relay.Constant][5] /* ty=Tensor[(169, 9), uint16] */, dtype="uint16") /* ty=Tensor[(169, 9), uint16] */;
  %269 = @func_1841() /* ty=Tensor[(1274), float64] */;
  %270 = cast(%269, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %271 = reshape(%267, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %272 = reshape(%268, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %273 = reshape(%270, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %274 = @func_2308(%271, %272, %273) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %275 = @func_2003() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %276 = @func_1906() /* ty=(Tensor[(1274), int8],) */;
  %277 = %274.1;
  %278 = %275.1;
  %279 = %276.0;
  (%269, %277, meta[relay.Constant][5] /* ty=Tensor[(169, 9), uint16] */, %278, %279)
}

def @func_4262() -> Tensor[(1274), float64] {
  @func_1146() /* ty=Tensor[(1274), float64] */
}

def @func_8251() -> (Tensor[(1274), float64],) {
  %280 = @func_6706() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(1274), float64]) */;
  %281 = %280.1;
  (%281,)
}

def @func_7794() -> (Tensor[(1274), float64],) {
  %282 = @func_397() /* ty=Tensor[(1274), float64] */;
  (%282,)
}

def @func_2003() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) {
  %283 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %284 = @func_1906() /* ty=(Tensor[(1274), int8],) */;
  %285 = %283.0;
  %286 = @func_384() /* ty=Tensor[(1274), float64] */;
  %287 = %284.0;
  (%285, %286, %287)
}

def @func_4623(%var_4586: Tensor[(7, 14, 13), uint32]) -> (Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), float32], Tensor[(7, 14, 13), uint32]) {
  %288 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %289 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 14, 13), float32] */, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %293 = bitwise_and(%291, %292) /* ty=Tensor[(7, 14, 13), uint32] */;
  %294 = cast(%var_4586, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %295 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%293, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %298 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %299 = cast(%var_4586, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %300 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %301 = cast(%293, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %303 = floor_mod(%296, %297) /* ty=Tensor[(7, 14, 13), float64] */;
  %304 = sigmoid(%298) /* ty=Tensor[(7, 14, 13), float32] */;
  %305 = @func_3574() /* ty=Tensor[(1274), float32] */;
  %306 = maximum(%301, %302) /* ty=Tensor[(7, 14, 13), uint32] */;
  (%303, %304, %305, %306)
}

def @func_5462() -> (Tensor[(4, 12, 5), bool],) {
  %307 = @func_4039() /* ty=(Tensor[(4, 12, 5), float64],) */;
  %308 = %307.0;
  %309 = cast(meta[relay.Constant][7] /* ty=Tensor[(4, 12, 5), float64] */, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %310 = shape_of(%308, dtype="int32") /* ty=Tensor[(3), int32] */;
  %311 = cast(%308, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %312 = dyn.reshape(%309, %310, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %313 = equal(%311, %312) /* ty=Tensor[(4, 12, 5), bool] */;
  (%313,)
}

def @func_736(%var_661: Tensor[(9, 11, 14), int8]) -> (Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) {
  %314 = cast(%var_661, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %315 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(9, 11, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(meta[relay.Constant][8] /* ty=Tensor[(9, 11, 14), int8] */, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %318 = less(%316, %317) /* ty=Tensor[(9, 11, 14), bool] */;
  %319 = @func_384() /* ty=Tensor[(1274), float64] */;
  (%318, %319)
}

def @func_6115() -> (Tensor[(1274), float64],) {
  %320 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %323 = asin(%322) /* ty=Tensor[(1274), float64] */;
  %324 = cast(%323, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %325 = atanh(%324) /* ty=Tensor[(1274), float64] */;
  (%325,)
}

def @func_6552() -> Tensor[(1274), float32] {
  %326 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %327 = %326.0;
  %328 = cast(%327, dtype="float32") /* ty=Tensor[(1274), float32] */;
  sqrt(%328) /* ty=Tensor[(1274), float32] */
}

def @func_3690() -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
  %329 = @func_384() /* ty=Tensor[(1274), float64] */;
  %330 = @func_397() /* ty=Tensor[(1274), float64] */;
  (%329, %330)
}

def @func_1823() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) {
  %331 = @func_827() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %332 = cast(meta[relay.Constant][9] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %333 = reshape(%332, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %334 = @func_1067(%333) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %335 = %331.1;
  %336 = %334.1;
  (%335, %336, meta[relay.Constant][9] /* ty=Tensor[(1456), float64] */)
}

def @func_5752() -> Tensor[(4, 12, 5), bool] {
  @func_555() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_4504() -> Tensor[(1274), int8] {
  @func_3734() /* ty=Tensor[(1274), int8] */
}

def @func_6667(%var_6620: Tensor[(91, 14), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(91, 14), float64], Tensor[(1274), bool], Tensor[(91, 14), float32]) {
  %337 = @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %338 = cast(%var_6620, dtype="float64") /* ty=Tensor[(91, 14), float64] */;
  %339 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(91, 14), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %340 = cast(meta[relay.Constant][10] /* ty=Tensor[(91, 14), float64] */, dtype="float64") /* ty=Tensor[(91, 14), float64] */;
  %341 = dyn.reshape(%338, %339, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %342 = cast(meta[relay.Constant][10] /* ty=Tensor[(91, 14), float64] */, dtype="float64") /* ty=Tensor[(91, 14), float64] */;
  %343 = reshape(%342, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %344 = @func_5232(%343) /* ty=(Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) */;
  %345 = %344.0;
  %346 = cast(%var_6620, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %347 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(91, 14), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %348 = cast(meta[relay.Constant][10] /* ty=Tensor[(91, 14), float64] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %350 = mod(%348, %349) /* ty=Tensor[(91, 14), float32] */;
  %351 = cast(%350, dtype="bool") /* ty=Tensor[(91, 14), bool] */;
  %352 = shape_of(%345, dtype="int32") /* ty=Tensor[(1), int32] */;
  %353 = cast(%345, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?), bool] */;
  %355 = cast(%350, dtype="bool") /* ty=Tensor[(91, 14), bool] */;
  %356 = shape_of(%var_6620, dtype="int32") /* ty=Tensor[(2), int32] */;
  %357 = cast(%var_6620, dtype="bool") /* ty=Tensor[(91, 14), bool] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %359 = logical_or(%357, %358) /* ty=Tensor[(91, 14), bool] */;
  %360 = cast(%var_6620, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(2), int32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %364 = %337.0;
  %365 = power(%340, %341) /* ty=Tensor[(91, 14), float64] */;
  %366 = logical_and(%353, %354) /* ty=Tensor[(1274), bool] */;
  %367 = floor_divide(%362, %363) /* ty=Tensor[(91, 14), float32] */;
  (%364, %365, %366, %367)
}

def @func_3307(%var_3292: Tensor[(8, 13, 13), int32]) -> (Tensor[(8, 13, 13), uint16],) {
  %368 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 13, 13), int32] */, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
  %369 = shape_of(%var_3292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_3292, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %372 = equal(%370, %371) /* ty=Tensor[(8, 13, 13), bool] */;
  %373 = cast(%372, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
  %374 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(8, 13, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 13, 13), int32] */, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %377 = subtract(%375, %376) /* ty=Tensor[(8, 13, 13), uint16] */;
  (%377,)
}

def @func_8197() -> (Tensor[(1274), int8],) {
  %378 = @func_4785() /* ty=Tensor[(1274), int8] */;
  (%378,)
}

def @func_6172() -> (Tensor[(14, 16, 6), float32], Tensor[(1274), float64]) {
  %379 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
  %380 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %381 = %379.0;
  %382 = %380.0;
  (%381, %382)
}

def @func_555() -> Tensor[(4, 12, 5), bool] {
  %383 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %383.0
}

def @func_1613() -> Tensor[(1274), float64] {
  %384 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %384.0
}

def @func_384() -> Tensor[(1274), float64] {
  %385 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %386 = %385.2;
  %387 = cast(%386, dtype="float64") /* ty=Tensor[(1274), float64] */;
  erf(%387) /* ty=Tensor[(1274), float64] */
}

def @func_1661(%var_1630: Tensor[(8, 14, 14), bool], %var_1631: Tensor[(8, 14, 14), bool]) -> (Tensor[(8, 14, 14), bool], Tensor[(1274), float64], Tensor[(1274), float64]) {
  %388 = cast(%var_1631, dtype="bool") /* ty=Tensor[(8, 14, 14), bool] */;
  %389 = shape_of(%var_1630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%var_1630, dtype="bool") /* ty=Tensor[(8, 14, 14), bool] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %392 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %393 = logical_and(%390, %391) /* ty=Tensor[(8, 14, 14), bool] */;
  %394 = %392.0;
  %395 = @func_397() /* ty=Tensor[(1274), float64] */;
  (%393, %394, %395)
}

def @func_8677() -> Tensor[(1274), int8] {
  %396 = @func_1440() /* ty=(Tensor[(1274), int8],) */;
  %396.0
}

def @func_1884() -> (Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) {
  %397 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %398 = @func_1841() /* ty=Tensor[(1274), float64] */;
  %399 = %397.1;
  (%398, %399)
}

def @func_8407() -> Tensor[(1456), float64] {
  %400 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %400.2
}

def @func_4962() -> (Tensor[(9, 13, 13), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) {
  %401 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %402 = cast(meta[relay.Constant][12] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %403 = reshape(%402, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %404 = @func_1423(%403) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %405 = @func_4204() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %406 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %407 = %401.1;
  %408 = %404.1;
  %409 = %405.1;
  %410 = %406.0;
  (%407, %408, meta[relay.Constant][12] /* ty=Tensor[(1274), float64] */, %409, %410)
}

def @func_1740() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) {
  %411 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %412 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %413 = %412.1;
  %414 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %415 = %414.0;
  %416 = cast(%415, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %417 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %418 = cast(%413, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %420 = %411.0;
  %421 = greater(%418, %419) /* ty=Tensor[(4, 12, 5), bool] */;
  (%420, %421)
}

def @func_5232(%var_5197: Tensor[(1274), float64]) -> (Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) {
  %422 = @func_3450() /* ty=(Tensor[(1274), float64],) */;
  %423 = %422.0;
  %424 = cast(%var_5197, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(1), int32] */;
  %426 = cast(%423, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?), float32] */;
  %428 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %429 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %430 = mod(%426, %427) /* ty=Tensor[(1274), float32] */;
  %431 = %428.1;
  %432 = %429.0;
  (%430, %431, %432)
}

def @func_2643(%var_2628: Tensor[(4, 12, 5), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  %433 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %434 = cast(%var_2628, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = not_equal(%436, %437) /* ty=Tensor[(4, 12, 5), bool] */;
  %439 = @func_2510() /* ty=Tensor[(1274), int8] */;
  (%438, %439)
}

def @func_5682() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  %440 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %441 = %440.1;
  %442 = cast(%441, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %443 = reshape(%442, newshape=[1274]) /* ty=Tensor[(1274), bool] */;
  %444 = @func_3498(%443) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) */;
  %445 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %446 = %444.1;
  %447 = %445.0;
  (%441, %446, %447)
}

def @func_8972() -> (Tensor[(4, 12, 5), float64], Tensor[(13, 117), float32]) {
  %448 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  %449 = @func_6470() /* ty=Tensor[(13, 117), float32] */;
  (%448, %449)
}

def @func_6470() -> Tensor[(13, 117), float32] {
  %450 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %451 = %450.2;
  %452 = cast(%451, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
  atan(%452) /* ty=Tensor[(13, 117), float32] */
}

def @func_1229() -> (Tensor[(4, 12, 5), bool],) {
  %453 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  (%453,)
}

def @func_6359() -> (Tensor[(1274), int8], Tensor[(1274), float64]) {
  %454 = @func_4204() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %455 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
  %456 = %454.1;
  %457 = %455.0;
  (%456, %457)
}

def @func_3703() -> (Tensor[(7, 14, 13), float32],) {
  %458 = @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %459 = %458.1;
  (%459,)
}

def @func_9371() -> Tensor[(9, 13, 13), float64] {
  %460 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %461 = %460.1;
  %462 = cast(%461, dtype="float64") /* ty=Tensor[(9, 13, 13), float64] */;
  cosh(%462) /* ty=Tensor[(9, 13, 13), float64] */
}

def @func_3521() -> (Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) {
  %463 = cast(meta[relay.Constant][13] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %464 = cast(meta[relay.Constant][13] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %465 = @func_1613() /* ty=Tensor[(1274), float64] */;
  %466 = cast(%465, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %467 = reshape(%463, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %468 = reshape(%464, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %469 = reshape(%466, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %470 = @func_2308(%467, %468, %469) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %471 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %472 = %470.0;
  %473 = %471.0;
  (%465, %472, meta[relay.Constant][13] /* ty=Tensor[(1521), uint16] */, %473)
}

def @func_1966(%var_1947: Tensor[(4, 9, 5), int32]) -> (Tensor[(4, 9, 5), bool],) {
  %474 = cast(%var_1947, dtype="bool") /* ty=Tensor[(4, 9, 5), bool] */;
  %475 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(4, 9, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 9, 5), int32] */, dtype="bool") /* ty=Tensor[(4, 9, 5), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %478 = equal(%476, %477) /* ty=Tensor[(4, 9, 5), bool] */;
  (%478,)
}

def @func_3124() -> Tensor[(4, 12, 5), float64] {
  %479 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %480 = %479.1;
  %481 = cast(%480, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  rsqrt(%481) /* ty=Tensor[(4, 12, 5), float64] */
}

def @func_4760(%var_4736: Tensor[(1, 16, 5), float32], %var_4752: Tensor[(1274), int8]) -> (Tensor[(?, 16, 5), uint8], Tensor[(9, 5), float64], Tensor[(1274), int8]) {
  %482 = cast(%var_4736, dtype="float32") /* ty=Tensor[(1, 16, 5), float32] */;
  %483 = cos(%482) /* ty=Tensor[(1, 16, 5), float32] */;
  %484 = cast(%var_4736, dtype="uint8") /* ty=Tensor[(1, 16, 5), uint8] */;
  %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%483, dtype="uint8") /* ty=Tensor[(1, 16, 5), uint8] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %488 = cast(%var_4752, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %489 = reshape(%488, newshape=[1274]) /* ty=Tensor[(1274), int8] */;
  %490 = @func_2938(%489) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */;
  %491 = subtract(%486, %487) /* ty=Tensor[(?, 16, 5), uint8] */;
  %492 = %490.0;
  (%491, %492, %var_4752)
}

def @func_435(%var_425: Tensor[(7, 13, 16), float64], %var_426: Tensor[(7, 13, 16), float64]) -> Tensor[(7, 13, 16), float64] {
  %493 = cast(%var_426, dtype="float64") /* ty=Tensor[(7, 13, 16), float64] */;
  %494 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%var_425, dtype="float64") /* ty=Tensor[(7, 13, 16), float64] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%495, %496) /* ty=Tensor[(7, 13, 16), float64] */
}

def @func_9527() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1456), float64]) {
  %497 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %498 = @func_7018() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32]) */;
  %499 = %497.0;
  %500 = %498.0;
  %501 = @func_8407() /* ty=Tensor[(1456), float64] */;
  (%499, %500, %501)
}

def @func_1692() -> Tensor[(4, 12, 5), bool] {
  %502 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %502.1
}

def @func_643() -> (Tensor[(1274), float64],) {
  %503 = @func_397() /* ty=Tensor[(1274), float64] */;
  %504 = @func_384() /* ty=Tensor[(1274), float64] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %506 = shape_of(%503, dtype="int32") /* ty=Tensor[(1), int32] */;
  %507 = cast(%503, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?), float64] */;
  %509 = floor_mod(%507, %508) /* ty=Tensor[(1274), float64] */;
  (%509,)
}

def @func_8164() -> (Tensor[(1274), int8], Tensor[(240), bool], Tensor[(13, 117), float64], Tensor[(4, 12, 5), bool], Tensor[(13, 117), uint16], Tensor[(13, 117), float64], Tensor[(1274), float64], Tensor[(4, 364), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  %510 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), bool] */, dtype="bool") /* ty=Tensor[(240), bool] */;
  %511 = reshape(%510, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %512 = @func_2643(%511) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
  %513 = @func_7167() /* ty=Tensor[(13, 117), float32] */;
  %514 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 117), float32] */, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
  %515 = shape_of(%513, dtype="int32") /* ty=Tensor[(2), int32] */;
  %516 = cast(%513, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
  %517 = dyn.reshape(%514, %515, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %518 = divide(%516, %517) /* ty=Tensor[(13, 117), float64] */;
  %519 = cast(%518, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
  %520 = @func_5921() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %521 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 117), float32] */, dtype="bool") /* ty=Tensor[(13, 117), bool] */;
  %522 = shape_of(%513, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%513, dtype="bool") /* ty=Tensor[(13, 117), bool] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %525 = equal(%523, %524) /* ty=Tensor[(13, 117), bool] */;
  %526 = cast(%518, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(2), int32] */;
  %528 = cast(%525, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %530 = cast(%518, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
  %531 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 364), float64] */, dtype="float64") /* ty=Tensor[(4, 364), float64] */;
  %532 = cast(%513, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %533 = reshape(%531, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %534 = reshape(%532, newshape=[169, 9]) /* ty=Tensor[(169, 9), uint16] */;
  %535 = @func_3928(%533, %534) /* ty=(Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) */;
  %536 = @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %537 = @func_5385() /* ty=(Tensor[(1274), int8],) */;
  %538 = %512.1;
  %539 = sin(%519) /* ty=Tensor[(13, 117), float64] */;
  %540 = %520.0;
  %541 = bitwise_or(%528, %529) /* ty=Tensor[(13, 117), uint16] */;
  %542 = asin(%530) /* ty=Tensor[(13, 117), float64] */;
  %543 = %535.2;
  %544 = %536.0;
  %545 = %537.0;
  (%538, meta[relay.Constant][15] /* ty=Tensor[(240), bool] */, %539, %540, %541, %542, %543, meta[relay.Constant][17] /* ty=Tensor[(4, 364), float64] */, %544, %545)
}

def @func_2804() -> Tensor[(7, 14, 13), float32] {
  %546 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %546.1
}

def @func_2539(%var_2527: Tensor[(10, 7, 5), bool], %var_2528: Tensor[(10, 7, 5), bool]) -> (Tensor[(10, 7, 5), bool],) {
  %547 = cast(%var_2528, dtype="bool") /* ty=Tensor[(10, 7, 5), bool] */;
  %548 = shape_of(%var_2527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_2527, dtype="bool") /* ty=Tensor[(10, 7, 5), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = logical_and(%549, %550) /* ty=Tensor[(10, 7, 5), bool] */;
  (%551,)
}

def @func_5355() -> Tensor[(7, 14, 13), float32] {
  %552 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %552.1
}

def @func_2978(%var_2959: Tensor[(1386), int8]) -> (Tensor[(7, 14, 13), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), int8]) {
  %553 = @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */;
  %554 = cast(%var_2959, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %555 = reshape(%554, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), int8] */;
  %556 = @func_736(%555) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */;
  %557 = %553.1;
  %558 = %556.0;
  (%557, %558, %var_2959)
}

def @func_4825(%var_4811: Tensor[(6, 7, 2), float32]) -> Tensor[(6, 7, 2), float32] {
  %559 = cast(%var_4811, dtype="float32") /* ty=Tensor[(6, 7, 2), float32] */;
  acos(%559) /* ty=Tensor[(6, 7, 2), float32] */
}

def @func_2308(%var_2284: Tensor[(9, 13, 13), uint16], %var_2285: Tensor[(9, 13, 13), uint16], %var_2293: Tensor[(637, 2), int8]) -> (Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) {
  %560 = cast(%var_2285, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %561 = shape_of(%var_2284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_2284, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %564 = cast(meta[relay.Constant][18] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %565 = cast(%var_2293, dtype="int8") /* ty=Tensor[(637, 2), int8] */;
  %566 = reshape(%564, newshape=[]) /* ty=int8 */;
  %567 = reshape(%565, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %568 = @func_316(%566, %567) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %569 = less_equal(%562, %563) /* ty=Tensor[(9, 13, 13), bool] */;
  %570 = %568.1;
  (%569, %570, meta[relay.Constant][18] /* ty=int8 */, %var_2293)
}

def @func_6706() -> (Tensor[(7, 14, 13), float32], Tensor[(1274), float64]) {
  %571 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %572 = @func_4262() /* ty=Tensor[(1274), float64] */;
  (%571, %572)
}

def @func_7663() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) {
  %573 = @func_7388() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) */;
  %574 = @func_5682() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
  %575 = %573.1;
  %576 = %574.0;
  (%575, %576)
}

def @func_8766() -> (Tensor[(1274), int8],) {
  %577 = @func_6359() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %578 = %577.0;
  (%578,)
}

def @func_3801() -> (Tensor[(1274), float64], Tensor[(1521), bool]) {
  %579 = @func_2747() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %580 = cast(meta[relay.Constant][19] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %581 = cast(meta[relay.Constant][19] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %582 = %579.1;
  %583 = cast(%582, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %584 = reshape(%580, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %585 = reshape(%581, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %586 = reshape(%583, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %587 = @func_2308(%584, %585, %586) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %588 = %587.2;
  %589 = cast(meta[relay.Constant][19] /* ty=Tensor[(1521), uint16] */, dtype="bool") /* ty=Tensor[(1521), bool] */;
  %590 = cast(%588, dtype="bool") /* ty=bool */;
  %591 = less_equal(%589, %590) /* ty=Tensor[(1521), bool] */;
  (%582, %591)
}

def @func_3928(%var_3892: Tensor[(1456), float64], %var_3904: Tensor[(169, 9), uint16]) -> (Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) {
  %592 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %593 = @func_3690() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %594 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %597 = cast(%var_3892, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %598 = reshape(%597, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %599 = @func_1796(%598) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %600 = @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %601 = %600.2;
  %602 = cast(%var_3904, dtype="uint8") /* ty=Tensor[(169, 9), uint8] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(2), int32] */;
  %604 = cast(%601, dtype="uint8") /* ty=Tensor[(169, 9), uint8] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %606 = cast(meta[relay.Constant][20] /* ty=Tensor[(1352), int32] */, dtype="int32") /* ty=Tensor[(1352), int32] */;
  %607 = reshape(%606, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), int32] */;
  %608 = @func_3307(%607) /* ty=(Tensor[(8, 13, 13), uint16],) */;
  %609 = @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %610 = %592.0;
  %611 = %593.1;
  %612 = cos(%596) /* ty=Tensor[(1274), float64] */;
  %613 = %599.3;
  %614 = add(%604, %605) /* ty=Tensor[(169, 9), uint8] */;
  %615 = %608.0;
  %616 = %609.0;
  (%610, %611, %612, %613, %var_3892, %614, %615, meta[relay.Constant][20] /* ty=Tensor[(1352), int32] */, %616)
}

def @func_8266() -> (Tensor[(4, 12, 5), float64], Tensor[(1274), float64]) {
  %617 = @func_4039() /* ty=(Tensor[(4, 12, 5), float64],) */;
  %618 = @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */;
  %619 = %617.0;
  %620 = %618.2;
  (%619, %620)
}

def @func_1796(%var_1786: Tensor[(1456), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) {
  %621 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %622 = cast(%var_1786, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %623 = reshape(%622, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %624 = @func_1067(%623) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %625 = @func_397() /* ty=Tensor[(1274), float64] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %627 = cast(%625, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %628 = reshape(%627, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %629 = @func_1423(%628) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %630 = %629.0;
  %631 = cast(%630, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %632 = %621.0;
  %633 = %624.3;
  %634 = asinh(%626) /* ty=Tensor[(1274), float64] */;
  %635 = exp(%631) /* ty=Tensor[(1274), float64] */;
  (%632, %633, %var_1786, %634, %635)
}

def @func_7456(%var_7436: Tensor[(6, 8, 12), float64]) -> Tensor[(6, 8, 12), float64] {
  %636 = cast(%var_7436, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  asinh(%636) /* ty=Tensor[(6, 8, 12), float64] */
}

def @func_316(%var_263: int8, %var_264: Tensor[(7, 14, 13), int8]) -> (Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) {
  %637 = cast(meta[relay.Constant][21] /* ty=Tensor[(7, 14, 13), int8] */, dtype="uint16") /* ty=Tensor[(7, 14, 13), uint16] */;
  %638 = shape_of(%var_264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%var_264, dtype="uint16") /* ty=Tensor[(7, 14, 13), uint16] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %641 = cast(%var_263, dtype="int8") /* ty=int8 */;
  %642 = cast(%var_264, dtype="int8") /* ty=Tensor[(7, 14, 13), int8] */;
  %643 = bitwise_or(%641, %642) /* ty=Tensor[(7, 14, 13), int8] */;
  %644 = cast(%var_264, dtype="bool") /* ty=Tensor[(7, 14, 13), bool] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%643, dtype="bool") /* ty=Tensor[(7, 14, 13), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = logical_or(%646, %647) /* ty=Tensor[(7, 14, 13), bool] */;
  %649 = cast(%648, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %650 = right_shift(%639, %640) /* ty=Tensor[(7, 14, 13), uint16] */;
  %651 = exp(%649) /* ty=Tensor[(7, 14, 13), float32] */;
  (%650, %651)
}

def @func_356() -> (Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) {
  %652 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="bool") /* ty=bool */;
  %653 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 12, 5), int8] */, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %654 = cast(meta[relay.Constant][22] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %655 = cast(meta[relay.Constant][24] /* ty=Tensor[(1274), int8] */, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %656 = reshape(%654, newshape=[]) /* ty=int8 */;
  %657 = reshape(%655, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %658 = @func_316(%656, %657) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %659 = greater_equal(%652, %653) /* ty=Tensor[(4, 12, 5), bool] */;
  %660 = %658.1;
  (%659, %660, meta[relay.Constant][24] /* ty=Tensor[(1274), int8] */)
}

def @func_3734() -> Tensor[(1274), int8] {
  %661 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %661.0
}

def @func_4455(%var_4354: Tensor[(4, 16, 7), float32], %var_4374: Tensor[(600), int64], %var_4441: Tensor[(1274), int8]) -> (Tensor[(7, 13, 16), float64], Tensor[(600), int64], Tensor[(7, 14, 13), float32], int8, Tensor[(1274), int8], Tensor[(4, 16, 7), int32]) {
  %662 = cast(%var_4374, dtype="int64") /* ty=Tensor[(600), int64] */;
  %663 = reshape(%662, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int64] */;
  %664 = @func_2857(%663) /* ty=(Tensor[(10, 15, 4), int64], Tensor[(7, 13, 16), float64]) */;
  %665 = cast(meta[relay.Constant][25] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %666 = cast(%var_4441, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %667 = reshape(%665, newshape=[]) /* ty=int8 */;
  %668 = reshape(%666, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %669 = @func_316(%667, %668) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %670 = cast(%var_4354, dtype="float32") /* ty=Tensor[(4, 16, 7), float32] */;
  %671 = cosh(%670) /* ty=Tensor[(4, 16, 7), float32] */;
  %672 = cast(%var_4354, dtype="uint32") /* ty=Tensor[(4, 16, 7), uint32] */;
  %673 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %674 = cast(%671, dtype="uint32") /* ty=Tensor[(4, 16, 7), uint32] */;
  %675 = dyn.reshape(%672, %673, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %676 = subtract(%674, %675) /* ty=Tensor[(4, 16, 7), uint32] */;
  %677 = cast(%676, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %678 = shape_of(%671, dtype="int32") /* ty=Tensor[(3), int32] */;
  %679 = cast(%671, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %680 = dyn.reshape(%677, %678, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %681 = greater_equal(%679, %680) /* ty=Tensor[(4, 16, 7), bool] */;
  %682 = cast(%676, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %683 = shape_of(%681, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%681, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %686 = %664.1;
  %687 = %669.1;
  %688 = multiply(%684, %685) /* ty=Tensor[(4, 16, 7), int32] */;
  (%686, %var_4374, %687, meta[relay.Constant][25] /* ty=int8 */, %var_4441, %688)
}

def @func_7354() -> (Tensor[(9, 13, 13), bool],) {
  %689 = @func_4962() /* ty=(Tensor[(9, 13, 13), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %690 = %689.0;
  (%690,)
}

def @func_4332() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) {
  %691 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %692 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %693 = %692.0;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %695 = reshape(%694, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %696 = @func_1423(%695) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %697 = %691.1;
  %698 = %696.3;
  (%697, %693, %698)
}

def @func_3372(%var_3331: Tensor[(4, 1, 4), float32], %var_3332: Tensor[(4, 12, 4), float32], %var_3337: Tensor[(1274), float64]) -> (Tensor[(4, 12, 4), float32], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(4, 12, 5), float64]) {
  %699 = cast(%var_3331, dtype="float32") /* ty=Tensor[(4, 1, 4), float32] */;
  %700 = cast(%var_3332, dtype="float32") /* ty=Tensor[(4, 12, 4), float32] */;
  %701 = cast(%var_3337, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %702 = reshape(%701, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %703 = @func_1423(%702) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %704 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %705 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
  %706 = floor_divide(%699, %700) /* ty=Tensor[(4, 12, 4), float32] */;
  %707 = %703.2;
  %708 = %704.0;
  %709 = %705.0;
  %710 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  (%706, %707, %var_3337, %708, %709, %710)
}

def @func_4646() -> Tensor[(1274), float64] {
  %711 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
  %711.0
}

def @func_2938(%var_2889: Tensor[(1274), int8]) -> (Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) {
  %712 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 5), float64] */;
  %713 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %714 = cast(%var_2889, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %715 = reshape(%713, newshape=[]) /* ty=int8 */;
  %716 = reshape(%714, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %717 = @func_316(%715, %716) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %718 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %719 = %718.1;
  %720 = cast(%719, dtype="float64") /* ty=Tensor[(7, 13, 16), float64] */;
  %721 = reshape(%720, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %722 = @func_2604(%721) /* ty=(Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %723 = %722.2;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %725 = cosh(%724) /* ty=Tensor[(1456), float32] */;
  %726 = cast(%725, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %727 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int32") /* ty=int32 */;
  %728 = sinh(%712) /* ty=Tensor[(9, 5), float64] */;
  %729 = %717.1;
  %730 = left_shift(%726, %727) /* ty=Tensor[(1456), int32] */;
  (%728, %729, %var_2889, %719, %730)
}

def @func_9059() -> (Tensor[(4, 12, 5), float64],) {
  %731 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  (%731,)
}

def @func_9047() -> (Tensor[(1274), bool],) {
  %732 = @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */;
  %733 = %732.1;
  (%733,)
}

def @func_7062() -> (Tensor[(1274), float64],) {
  %734 = @func_827() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %735 = %734.0;
  (%735,)
}

def @func_3274(%var_3266: Tensor[(9, 7, 13), float32]) -> (Tensor[(9, 7, 13), float32],) {
  %736 = cast(%var_3266, dtype="float32") /* ty=Tensor[(9, 7, 13), float32] */;
  %737 = sigmoid(%736) /* ty=Tensor[(9, 7, 13), float32] */;
  (%737,)
}

def @func_4204() -> (Tensor[(1274), float64], Tensor[(1274), int8]) {
  %738 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
  %739 = @func_1440() /* ty=(Tensor[(1274), int8],) */;
  %740 = %738.3;
  %741 = %739.0;
  (%740, %741)
}

def @func_2857(%var_2846: Tensor[(10, 15, 4), int64]) -> (Tensor[(10, 15, 4), int64], Tensor[(7, 13, 16), float64]) {
  %742 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 15, 4), int64] */, dtype="int64") /* ty=Tensor[(10, 15, 4), int64] */;
  %743 = shape_of(%var_2846, dtype="int32") /* ty=Tensor[(3), int32] */;
  %744 = cast(%var_2846, dtype="int64") /* ty=Tensor[(10, 15, 4), int64] */;
  %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %746 = @func_2458() /* ty=(Tensor[(1456), float64], Tensor[(7, 13, 16), float64]) */;
  %747 = maximum(%744, %745) /* ty=Tensor[(10, 15, 4), int64] */;
  %748 = %746.1;
  (%747, %748)
}

def @func_7820() -> (Tensor[(1274), float64],) {
  %749 = @func_1146() /* ty=Tensor[(1274), float64] */;
  (%749,)
}

def @func_5921() -> (Tensor[(4, 12, 5), bool],) {
  %750 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %751 = %750.0;
  (%751,)
}

def @func_2125() -> (Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) {
  %752 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 6), float32] */;
  %753 = cast(meta[relay.Constant][29] /* ty=Tensor[(14, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 6), float32] */;
  %754 = sigmoid(%752) /* ty=Tensor[(14, 16, 6), float32] */;
  %755 = sin(%753) /* ty=Tensor[(14, 16, 6), float32] */;
  (%754, %755)
}

def @func_4905(%var_4900: float32, %var_4901: Tensor[(1, 4, 13), float32]) -> (Tensor[(1, 4, 13), float32],) {
  %756 = cast(%var_4900, dtype="float32") /* ty=float32 */;
  %757 = cast(%var_4901, dtype="float32") /* ty=Tensor[(1, 4, 13), float32] */;
  %758 = mod(%756, %757) /* ty=Tensor[(1, 4, 13), float32] */;
  (%758,)
}

def @func_1699() -> (Tensor[(1274), float64],) {
  %759 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %760 = %759.3;
  (%760,)
}

def @func_9458() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32]) {
  %761 = @func_4149() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %762 = @func_9104() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) */;
  %763 = %762.1;
  %764 = cast(%763, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %765 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %766 = @func_3703() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %767 = %761.2;
  %768 = sqrt(%764) /* ty=Tensor[(4, 12, 5), float64] */;
  %769 = @func_6507() /* ty=Tensor[(1274), float64] */;
  %770 = %765.0;
  %771 = %766.0;
  (%767, %768, %769, %770, %771)
}

def @func_5932() -> Tensor[(4, 12, 5), bool] {
  %772 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %772.0
}

def @func_4785() -> Tensor[(1274), int8] {
  @func_2510() /* ty=Tensor[(1274), int8] */
}

def @func_5424(%var_5394: Tensor[(1274), float64]) -> (Tensor[(1274), bool], Tensor[(1274), bool], Tensor[(7, 13, 16), float64]) {
  %773 = @func_4646() /* ty=Tensor[(1274), float64] */;
  %774 = cast(%var_5394, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %775 = shape_of(%773, dtype="int32") /* ty=Tensor[(1), int32] */;
  %776 = cast(%773, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?), bool] */;
  %778 = logical_or(%776, %777) /* ty=Tensor[(1274), bool] */;
  %779 = cast(%778, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %780 = reshape(%779, newshape=[1274]) /* ty=Tensor[(1274), int8] */;
  %781 = @func_2938(%780) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */;
  %782 = @func_2697() /* ty=Tensor[(1274), bool] */;
  %783 = %781.3;
  (%778, %782, %783)
}

def @func_1841() -> Tensor[(1274), float64] {
  %784 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %784.0
}

def @func_9548() -> Tensor[(1274), float64] {
  @func_397() /* ty=Tensor[(1274), float64] */
}

def @main(%var_9667: Tensor[(8, 1, 5), float64], %var_9668: Tensor[(8, 14, 5), float64]) -> Tensor[(8, 14, 5), float64] {
  %785 = cast(%var_9667, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %786 = cast(%var_9668, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  maximum(%785, %786) /* ty=Tensor[(8, 14, 5), float64] */
}

def @func_2319() -> (Tensor[(1274), float64],) {
  %787 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
  %788 = %787.0;
  (%788,)
}

def @func_8905() -> (Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) {
  %789 = @func_8377() /* ty=(Tensor[(1274), float64],) */;
  %790 = @func_3801() /* ty=(Tensor[(1274), float64], Tensor[(1521), bool]) */;
  %791 = @func_6829() /* ty=(Tensor[(7, 13, 16), float64],) */;
  %792 = %789.0;
  %793 = %790.0;
  %794 = %791.0;
  (%792, %793, %794)
}

def @func_5105() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) {
  %795 = @func_1692() /* ty=Tensor[(4, 12, 5), bool] */;
  %796 = @func_4262() /* ty=Tensor[(1274), float64] */;
  (%795, %796)
}

def @func_6964(%var_6935: Tensor[(10, 2, 7), uint16], %var_6941: Tensor[(1456), float64]) -> (Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(10, 2, 7), float64], Tensor[(1274), float64]) {
  %797 = cast(%var_6941, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %798 = reshape(%797, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %799 = @func_2604(%798) /* ty=(Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %800 = cast(%var_6935, dtype="uint16") /* ty=Tensor[(10, 2, 7), uint16] */;
  %801 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 7), uint16] */, dtype="uint16") /* ty=Tensor[(10, 2, 7), uint16] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %804 = minimum(%802, %803) /* ty=Tensor[(10, 2, 7), uint16] */;
  %805 = cast(%804, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %806 = @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */;
  %807 = %799.2;
  %808 = sinh(%805) /* ty=Tensor[(10, 2, 7), float64] */;
  %809 = %806.2;
  (%807, %var_6941, %808, %809)
}

def @func_6491() -> (Tensor[(7, 14, 13), float64],) {
  %810 = @func_3703() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %813 = atan(%812) /* ty=Tensor[(7, 14, 13), float64] */;
  (%813,)
}

def @func_5587(%var_5573: Tensor[(12, 12, 16), uint8], %var_5574: Tensor[(12, 12, 16), uint8]) -> (Tensor[(12, 12, 16), bool], Tensor[(12, 12, 16), float32], Tensor[(1456), float64], Tensor[(1456), float64]) {
  %814 = cast(%var_5574, dtype="bool") /* ty=Tensor[(12, 12, 16), bool] */;
  %815 = shape_of(%var_5573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %816 = cast(%var_5573, dtype="bool") /* ty=Tensor[(12, 12, 16), bool] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %818 = cast(%var_5573, dtype="float32") /* ty=Tensor[(12, 12, 16), float32] */;
  %819 = cast(meta[relay.Constant][31] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %820 = reshape(%819, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %821 = @func_1796(%820) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %822 = less(%816, %817) /* ty=Tensor[(12, 12, 16), bool] */;
  %823 = erf(%818) /* ty=Tensor[(12, 12, 16), float32] */;
  %824 = %821.1;
  (%822, %823, %824, meta[relay.Constant][31] /* ty=Tensor[(1456), float64] */)
}

def @func_1004() -> (Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %825 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %826 = %825.0;
  %827 = cast(%826, dtype="float32") /* ty=Tensor[(1274), float32] */;
  %828 = cosh(%827) /* ty=Tensor[(1274), float32] */;
  %829 = @func_827() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %830 = %829.2;
  %831 = cast(%830, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %832 = shape_of(%828, dtype="int32") /* ty=Tensor[(1), int32] */;
  %833 = cast(%828, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %834 = dyn.reshape(%831, %832, newshape=[]) /* ty=Tensor[(?), bool] */;
  %835 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %836 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %837 = not_equal(%833, %834) /* ty=Tensor[(1274), bool] */;
  %838 = %835.0;
  %839 = %836.0;
  (%837, %838, %839)
}

def @func_2796() -> (Tensor[(1274), int8], Tensor[(1274), bool]) {
  %840 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %841 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %842 = %840.0;
  %843 = %841.0;
  (%842, %843)
}

def @func_3450() -> (Tensor[(1274), float64],) {
  %844 = @func_2003() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %845 = %844.1;
  (%845,)
}

def @func_8456() -> Tensor[(1274), float64] {
  %846 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
  %846.0
}

def @func_7568() -> (Tensor[(4, 12, 5), bool],) {
  %847 = @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %848 = %847.0;
  (%848,)
}

def @func_397() -> Tensor[(1274), float64] {
  @func_384() /* ty=Tensor[(1274), float64] */
}

def @func_9207() -> Tensor[(4, 12, 5), bool] {
  %849 = @func_7568() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %849.0
}

def @func_568() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) {
  %850 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %851 = %850.0;
  %852 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  (%851, %852)
}

def @func_874() -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
  %853 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %854 = %853.0;
  %855 = @func_384() /* ty=Tensor[(1274), float64] */;
  (%854, %855)
}

def @func_9170() -> (Tensor[(1274), float64], Tensor[(1274), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 2, 5), bool], Tensor[(30), uint8]) {
  %856 = @func_8251() /* ty=(Tensor[(1274), float64],) */;
  %857 = @func_7354() /* ty=(Tensor[(9, 13, 13), bool],) */;
  %858 = cast(meta[relay.Constant][32] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %859 = cast(meta[relay.Constant][32] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %860 = reshape(%858, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), uint8] */;
  %861 = reshape(%859, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), uint8] */;
  %862 = @func_3170(%860, %861) /* ty=(Tensor[(3, 2, 5), bool], Tensor[(3, 2, 5), bool]) */;
  %863 = %856.0;
  %864 = @func_7964() /* ty=Tensor[(1274), float32] */;
  %865 = %857.0;
  %866 = %862.1;
  (%863, %864, %865, %866, meta[relay.Constant][32] /* ty=Tensor[(30), uint8] */)
}

def @func_1423(%var_1376: Tensor[(1274), float64]) -> (Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) {
  %867 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %868 = %867.0;
  %869 = cast(%var_1376, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %870 = shape_of(%868, dtype="int32") /* ty=Tensor[(1), int32] */;
  %871 = cast(%868, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %872 = dyn.reshape(%869, %870, newshape=[]) /* ty=Tensor[(?), bool] */;
  %873 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %874 = %873.0;
  %875 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 12, 5), bool] */, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
  %876 = shape_of(%874, dtype="int32") /* ty=Tensor[(3), int32] */;
  %877 = cast(%874, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
  %878 = dyn.reshape(%875, %876, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %879 = cast(%868, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %880 = atan(%879) /* ty=Tensor[(1274), float64] */;
  %881 = cast(%var_1376, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %882 = shape_of(%880, dtype="int32") /* ty=Tensor[(1), int32] */;
  %883 = cast(%880, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %884 = dyn.reshape(%881, %882, newshape=[]) /* ty=Tensor[(?), float64] */;
  %885 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %886 = greater(%871, %872) /* ty=Tensor[(1274), bool] */;
  %887 = bitwise_and(%877, %878) /* ty=Tensor[(4, 12, 5), uint8] */;
  %888 = floor_divide(%883, %884) /* ty=Tensor[(1274), float64] */;
  %889 = %885.0;
  (%886, %887, %888, %889)
}

def @func_7896(%var_7888: Tensor[(784, 2), bool]) -> (Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1, 1568), bool], Tensor[(784, 2), bool], Tensor[(4, 12, 5), bool]) {
  %890 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %891 = cast(%890, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %892 = reshape(%891, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %893 = @func_5232(%892) /* ty=(Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) */;
  %894 = cast(%var_7888, dtype="bool") /* ty=Tensor[(784, 2), bool] */;
  %895 = reshape(%894, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), bool] */;
  %896 = @func_7721(%895) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1, 1568), bool]) */;
  %897 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  %898 = %893.2;
  %899 = %896.2;
  %900 = @func_5932() /* ty=Tensor[(4, 12, 5), bool] */;
  (%890, %897, %898, %899, %var_7888, %900)
}

def @func_3611() -> (Tensor[(14, 16, 6), float32],) {
  %901 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
  %902 = %901.0;
  (%902,)
}

def @func_4039() -> (Tensor[(4, 12, 5), float64],) {
  %903 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %904 = %903.0;
  %905 = cast(%904, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %906 = cos(%905) /* ty=Tensor[(4, 12, 5), float64] */;
  (%906,)
}

def @func_6142() -> (Tensor[(7, 14, 13), float32],) {
  %907 = @func_5355() /* ty=Tensor[(7, 14, 13), float32] */;
  (%907,)
}

def @func_8177() -> (Tensor[(1274), float64],) {
  %908 = @func_6115() /* ty=(Tensor[(1274), float64],) */;
  %909 = %908.0;
  (%909,)
}

def @func_3598() -> (Tensor[(4, 12, 5), bool],) {
  %910 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %911 = %910.1;
  (%911,)
}

def @func_827() -> (Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) {
  %912 = @func_415() /* ty=(Tensor[(1274), int8],) */;
  %913 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %914 = @func_384() /* ty=Tensor[(1274), float64] */;
  %915 = %912.0;
  %916 = %913.0;
  (%914, %915, %916)
}

def @func_9104() -> (Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) {
  %917 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
  %918 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %919 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %920 = %917.0;
  (%918, %919, %920)
}

def @func_9134() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(4, 12, 5), bool]) {
  %921 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %922 = @func_7256() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) */;
  %923 = %921.1;
  %924 = @func_1613() /* ty=Tensor[(1274), float64] */;
  %925 = %922.1;
  (%923, %924, %925)
}

def @func_7426(%var_7402: Tensor[(1456), float64], %var_7403: Tensor[(1, 1521), uint16]) -> (Tensor[(1274), int8], Tensor[(1456), float64], Tensor[(1, 1521), uint16], Tensor[(1456), float64]) {
  %926 = cast(%var_7402, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %927 = cast(%var_7403, dtype="uint16") /* ty=Tensor[(1, 1521), uint16] */;
  %928 = reshape(%926, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %929 = reshape(%927, newshape=[169, 9]) /* ty=Tensor[(169, 9), uint16] */;
  %930 = @func_3928(%928, %929) /* ty=(Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) */;
  %931 = %930.4;
  %932 = cast(%931, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %933 = log10(%932) /* ty=Tensor[(1456), float64] */;
  %934 = cast(%933, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %935 = @func_4504() /* ty=Tensor[(1274), int8] */;
  %936 = acosh(%934) /* ty=Tensor[(1456), float64] */;
  (%935, %var_7402, %var_7403, %936)
}

def @func_7721(%var_7719: Tensor[(1, 1568), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1, 1568), bool]) {
  %937 = @func_7568() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %938 = cast(%var_7719, dtype="bool") /* ty=Tensor[(1, 1568), bool] */;
  %939 = cast(%var_7719, dtype="bool") /* ty=Tensor[(1, 1568), bool] */;
  %940 = reshape(%938, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), bool] */;
  %941 = reshape(%939, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), bool] */;
  %942 = @func_1661(%940, %941) /* ty=(Tensor[(8, 14, 14), bool], Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %943 = %937.0;
  %944 = %942.1;
  (%943, %944, %var_7719)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7390() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) {
  @func_7388() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) */
}

def @func_384() -> Tensor[(1274), float64] {
  %0 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %1 = %0.2;
  %2 = cast(%1, dtype="float64") /* ty=Tensor[(1274), float64] */;
  erf(%2) /* ty=Tensor[(1274), float64] */
}

def @func_7308(%var_7306: uint16, %var_7307: Tensor[(15, 14, 10), uint16]) -> (Tensor[(15, 14, 10), uint16],) {
  %6 = fn (%var_7287: uint16, %var_7288: Tensor[(15, 14, 10), uint16]) -> (Tensor[(15, 14, 10), uint16],) {
    %3 = cast(%var_7287, dtype="uint16") /* ty=uint16 */;
    %4 = cast(%var_7288, dtype="uint16") /* ty=Tensor[(15, 14, 10), uint16] */;
    %5 = left_shift(%3, %4) /* ty=Tensor[(15, 14, 10), uint16] */;
    (%5,)
  };
  %6(%var_7306, %var_7307) /* ty=(Tensor[(15, 14, 10), uint16],) */
}

def @func_6173() -> (Tensor[(14, 16, 6), float32], Tensor[(1274), float64]) {
  %11 = fn () -> (Tensor[(14, 16, 6), float32], Tensor[(1274), float64]) {
    %7 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
    %8 = @func_643() /* ty=(Tensor[(1274), float64],) */;
    %9 = %7.0;
    %10 = %8.0;
    (%9, %10)
  };
  %11() /* ty=(Tensor[(14, 16, 6), float32], Tensor[(1274), float64]) */
}

def @func_8657(%var_8547: Tensor[(1274), int8], %var_8600: Tensor[(1386), int8], %var_8650: Tensor[(9, 11, 14), float64]) -> (Tensor[(1274), uint64], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(1274), int8], Tensor[(7, 14, 13), float32], Tensor[(1386), int8], Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), bool], Tensor[(1521), uint16], Tensor[(1274), int8], Tensor[(9, 11, 14), float64]) {
  %12 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %13 = %12.0;
  %14 = cast(%var_8547, dtype="uint64") /* ty=Tensor[(1274), uint64] */;
  %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(1), int32] */;
  %16 = cast(%13, dtype="uint64") /* ty=Tensor[(1274), uint64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %18 = right_shift(%16, %17) /* ty=Tensor[(1274), uint64] */;
  %19 = cast(%18, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %20 = reshape(%19, newshape=[1274]) /* ty=Tensor[(1274), bool] */;
  %21 = @func_3498(%20) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) */;
  %22 = @func_7820() /* ty=(Tensor[(1274), float64],) */;
  %23 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %24 = @func_6142() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %25 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %26 = @func_1906() /* ty=(Tensor[(1274), int8],) */;
  %27 = %23.0;
  %28 = cast(%27, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %29 = reshape(%28, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %30 = @func_1423(%29) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %31 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
  %32 = @func_6359() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %33 = cast(%var_8600, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %34 = reshape(%33, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), int8] */;
  %35 = @func_736(%34) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %38 = atan(%37) /* ty=Tensor[(9, 11, 14), float64] */;
  %39 = cast(%var_8650, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %40 = shape_of(%38, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%38, dtype="float64") /* ty=Tensor[(9, 11, 14), float64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %43 = %21.2;
  %44 = %22.0;
  %45 = @func_8407() /* ty=Tensor[(1456), float64] */;
  %46 = %24.0;
  %47 = %25.1;
  %48 = %26.0;
  %49 = %30.0;
  %50 = %31.2;
  %51 = %32.0;
  %52 = floor_divide(%41, %42) /* ty=Tensor[(9, 11, 14), float64] */;
  (%18, %43, %44, %45, %27, %46, %var_8600, %47, %48, %49, %50, %51, %52)
}

def @func_9048() -> (Tensor[(1274), bool],) {
  %55 = fn () -> (Tensor[(1274), bool],) {
    %53 = @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */;
    %54 = %53.1;
    (%54,)
  };
  %55() /* ty=(Tensor[(1274), bool],) */
}

def @func_2604(%var_2600: Tensor[(1456), float64]) -> (Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  %56 = @func_1146() /* ty=Tensor[(1274), float64] */;
  %57 = cast(meta[relay.Constant][0] /* ty=Tensor[(1274), float64] */, dtype="int64") /* ty=Tensor[(1274), int64] */;
  %58 = shape_of(%56, dtype="int32") /* ty=Tensor[(1), int32] */;
  %59 = cast(%56, dtype="int64") /* ty=Tensor[(1274), int64] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?), int64] */;
  %61 = cast(%var_2600, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %62 = cast(%var_2600, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %63 = reshape(%61, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %64 = reshape(%62, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %65 = bitwise_xor(%59, %60) /* ty=Tensor[(1274), int64] */;
  %66 = @func_435(%63, %64) /* ty=Tensor[(7, 13, 16), float64] */;
  (%65, %66, %var_2600)
}

def @func_3991() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) {
  @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */
}

def @func_1442() -> (Tensor[(1274), int8],) {
  @func_1440() /* ty=(Tensor[(1274), int8],) */
}

def @func_5683() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  %75 = fn () -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
    %67 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %68 = %67.1;
    %69 = cast(%68, dtype="bool") /* ty=Tensor[(1274), bool] */;
    %70 = reshape(%69, newshape=[1274]) /* ty=Tensor[(1274), bool] */;
    %71 = @func_3498(%70) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) */;
    %72 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %73 = %71.1;
    %74 = %72.0;
    (%68, %73, %74)
  };
  %75() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */
}

def @func_3377(%var_3374: Tensor[(4, 1, 4), float32], %var_3375: Tensor[(4, 12, 4), float32], %var_3376: Tensor[(1274), float64]) -> (Tensor[(4, 12, 4), float32], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(4, 12, 5), float64]) {
  @func_3372(%var_3374, %var_3375, %var_3376) /* ty=(Tensor[(4, 12, 4), float32], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(4, 12, 5), float64]) */
}

def @func_1440() -> (Tensor[(1274), int8],) {
  %76 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %77 = %76.0;
  (%77,)
}

def @func_5932() -> Tensor[(4, 12, 5), bool] {
  %78 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %78.0
}

def @func_6670(%var_6668: Tensor[(91, 14), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(91, 14), float64], Tensor[(1274), bool], Tensor[(91, 14), float32]) {
  @func_6667(%var_6668) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(91, 14), float64], Tensor[(1274), bool], Tensor[(91, 14), float32]) */
}

def @func_5234(%var_5233: Tensor[(1274), float64]) -> (Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) {
  %90 = fn (%var_5197: Tensor[(1274), float64]) -> (Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) {
    %79 = @func_3450() /* ty=(Tensor[(1274), float64],) */;
    %80 = %79.0;
    %81 = cast(%var_5197, dtype="float32") /* ty=Tensor[(1274), float32] */;
    %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(1), int32] */;
    %83 = cast(%80, dtype="float32") /* ty=Tensor[(1274), float32] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?), float32] */;
    %85 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
    %86 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %87 = mod(%83, %84) /* ty=Tensor[(1274), float32] */;
    %88 = %85.1;
    %89 = %86.0;
    (%87, %88, %89)
  };
  %90(%var_5233) /* ty=(Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) */
}

def @func_1005() -> (Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %106 = fn () -> (Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) {
    %91 = @func_785() /* ty=(Tensor[(1274), float64],) */;
    %92 = %91.0;
    %93 = cast(%92, dtype="float32") /* ty=Tensor[(1274), float32] */;
    %94 = cosh(%93) /* ty=Tensor[(1274), float32] */;
    %95 = @func_827() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
    %96 = %95.2;
    %97 = cast(%96, dtype="bool") /* ty=Tensor[(1274), bool] */;
    %98 = shape_of(%94, dtype="int32") /* ty=Tensor[(1), int32] */;
    %99 = cast(%94, dtype="bool") /* ty=Tensor[(1274), bool] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?), bool] */;
    %101 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %102 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %103 = not_equal(%99, %100) /* ty=Tensor[(1274), bool] */;
    %104 = %101.0;
    %105 = %102.0;
    (%103, %104, %105)
  };
  %106() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */
}

def @func_3931(%var_3929: Tensor[(1456), float64], %var_3930: Tensor[(169, 9), uint16]) -> (Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) {
  %132 = fn (%var_3892: Tensor[(1456), float64], %var_3904: Tensor[(169, 9), uint16]) -> (Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) {
    %107 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %108 = @func_3690() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %109 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
    %110 = %109.0;
    %111 = cast(%110, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %112 = cast(%var_3892, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %113 = reshape(%112, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %114 = @func_1796(%113) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %115 = @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */;
    %116 = %115.2;
    %117 = cast(%var_3904, dtype="uint8") /* ty=Tensor[(169, 9), uint8] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(2), int32] */;
    %119 = cast(%116, dtype="uint8") /* ty=Tensor[(169, 9), uint8] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %121 = cast(meta[relay.Constant][1] /* ty=Tensor[(1352), int32] */, dtype="int32") /* ty=Tensor[(1352), int32] */;
    %122 = reshape(%121, newshape=[8, 13, 13]) /* ty=Tensor[(8, 13, 13), int32] */;
    %123 = @func_3307(%122) /* ty=(Tensor[(8, 13, 13), uint16],) */;
    %124 = @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %125 = %107.0;
    %126 = %108.1;
    %127 = cos(%111) /* ty=Tensor[(1274), float64] */;
    %128 = %114.3;
    %129 = add(%119, %120) /* ty=Tensor[(169, 9), uint8] */;
    %130 = %123.0;
    %131 = %124.0;
    (%125, %126, %127, %128, %var_3892, %129, %130, meta[relay.Constant][1] /* ty=Tensor[(1352), int32] */, %131)
  };
  %132(%var_3929, %var_3930) /* ty=(Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) */
}

def @func_6360() -> (Tensor[(1274), int8], Tensor[(1274), float64]) {
  %137 = fn () -> (Tensor[(1274), int8], Tensor[(1274), float64]) {
    %133 = @func_4204() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8]) */;
    %134 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
    %135 = %133.1;
    %136 = %134.0;
    (%135, %136)
  };
  %137() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64]) */
}

def @func_3228() -> (Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) {
  %150 = fn () -> (Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) {
    %138 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
    %139 = cast(%138, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
    %140 = sigmoid(%139) /* ty=Tensor[(4, 12, 5), float64] */;
    %141 = cast(%140, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
    %142 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
    %143 = %142.1;
    %144 = cast(%140, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
    %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%143, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %148 = erf(%141) /* ty=Tensor[(4, 12, 5), float64] */;
    %149 = right_shift(%146, %147) /* ty=Tensor[(4, 12, 5), uint8] */;
    (%148, %149)
  };
  %150() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) */
}

def @func_7063() -> (Tensor[(1274), float64],) {
  %153 = fn () -> (Tensor[(1274), float64],) {
    %151 = @func_827() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
    %152 = %151.0;
    (%152,)
  };
  %153() /* ty=(Tensor[(1274), float64],) */
}

def @func_1825() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) {
  @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */
}

def @func_2978(%var_2959: Tensor[(1386), int8]) -> (Tensor[(7, 14, 13), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), int8]) {
  %154 = @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */;
  %155 = cast(%var_2959, dtype="int8") /* ty=Tensor[(1386), int8] */;
  %156 = reshape(%155, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), int8] */;
  %157 = @func_736(%156) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */;
  %158 = %154.1;
  %159 = %157.0;
  (%158, %159, %var_2959)
}

def @func_8379() -> (Tensor[(1274), float64],) {
  @func_8377() /* ty=(Tensor[(1274), float64],) */
}

def @func_9061() -> (Tensor[(4, 12, 5), float64],) {
  @func_9059() /* ty=(Tensor[(4, 12, 5), float64],) */
}

def @func_4205() -> (Tensor[(1274), float64], Tensor[(1274), int8]) {
  %164 = fn () -> (Tensor[(1274), float64], Tensor[(1274), int8]) {
    %160 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
    %161 = @func_1440() /* ty=(Tensor[(1274), int8],) */;
    %162 = %160.3;
    %163 = %161.0;
    (%162, %163)
  };
  %164() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8]) */
}

def @func_9172() -> (Tensor[(1274), float64], Tensor[(1274), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 2, 5), bool], Tensor[(30), uint8]) {
  @func_9170() /* ty=(Tensor[(1274), float64], Tensor[(1274), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 2, 5), bool], Tensor[(30), uint8]) */
}

def @func_3112() -> (Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) {
  %165 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 117), uint16] */, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %166 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 117), uint16] */, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
  %167 = @func_2510() /* ty=Tensor[(1274), int8] */;
  %168 = cast(%167, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %169 = reshape(%165, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %170 = reshape(%166, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %171 = reshape(%168, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %172 = @func_2308(%169, %170, %171) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %173 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %174 = %172.0;
  %175 = %173.0;
  (%167, %174, meta[relay.Constant][2] /* ty=Tensor[(13, 117), uint16] */, %175)
}

def @func_2003() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) {
  %176 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %177 = @func_1906() /* ty=(Tensor[(1274), int8],) */;
  %178 = %176.0;
  %179 = @func_384() /* ty=Tensor[(1274), float64] */;
  %180 = %177.0;
  (%178, %179, %180)
}

def @func_2313(%var_2310: Tensor[(9, 13, 13), uint16], %var_2311: Tensor[(9, 13, 13), uint16], %var_2312: Tensor[(637, 2), int8]) -> (Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) {
  @func_2308(%var_2310, %var_2311, %var_2312) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */
}

def @func_2127() -> (Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) {
  @func_2125() /* ty=(Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) */
}

def @func_555() -> Tensor[(4, 12, 5), bool] {
  %181 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %181.0
}

def @func_5386() -> (Tensor[(1274), int8],) {
  %184 = fn () -> (Tensor[(1274), int8],) {
    %182 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %183 = %182.0;
    (%183,)
  };
  %184() /* ty=(Tensor[(1274), int8],) */
}

def @func_5107() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) {
  @func_5105() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) */
}

def @func_3600() -> (Tensor[(4, 12, 5), bool],) {
  @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */
}

def @func_2543(%var_2541: Tensor[(10, 7, 5), bool], %var_2542: Tensor[(10, 7, 5), bool]) -> (Tensor[(10, 7, 5), bool],) {
  @func_2539(%var_2541, %var_2542) /* ty=(Tensor[(10, 7, 5), bool],) */
}

def @func_4332() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) {
  %185 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %186 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %189 = reshape(%188, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %190 = @func_1423(%189) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %191 = %185.1;
  %192 = %190.3;
  (%191, %187, %192)
}

def @func_3408(%var_3407: Tensor[(154, 9), int8]) -> (Tensor[(4, 12, 5), bool], Tensor[(9, 11, 14), bool], Tensor[(154, 9), int8]) {
  %199 = fn (%var_3403: Tensor[(154, 9), int8]) -> (Tensor[(4, 12, 5), bool], Tensor[(9, 11, 14), bool], Tensor[(154, 9), int8]) {
    %193 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %194 = cast(%var_3403, dtype="int8") /* ty=Tensor[(154, 9), int8] */;
    %195 = reshape(%194, newshape=[9, 11, 14]) /* ty=Tensor[(9, 11, 14), int8] */;
    %196 = @func_736(%195) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */;
    %197 = %193.1;
    %198 = %196.0;
    (%197, %198, %var_3403)
  };
  %199(%var_3407) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(9, 11, 14), bool], Tensor[(154, 9), int8]) */
}

def @func_9392() -> (Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %200 = @func_8266() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(1274), float64]) */;
  %201 = %200.0;
  %202 = cast(%201, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %203 = reshape(%202, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
  %204 = @func_2643(%203) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
  %205 = %204.1;
  %206 = @func_4785() /* ty=Tensor[(1274), int8] */;
  (%201, %205, %206)
}

def @func_4905(%var_4900: float32, %var_4901: Tensor[(1, 4, 13), float32]) -> (Tensor[(1, 4, 13), float32],) {
  %207 = cast(%var_4900, dtype="float32") /* ty=float32 */;
  %208 = cast(%var_4901, dtype="float32") /* ty=Tensor[(1, 4, 13), float32] */;
  %209 = mod(%207, %208) /* ty=Tensor[(1, 4, 13), float32] */;
  (%209,)
}

def @func_5731() -> (Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), int8]) {
  @func_5729() /* ty=(Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), int8]) */
}

def @func_3801() -> (Tensor[(1274), float64], Tensor[(1521), bool]) {
  %210 = @func_2747() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %211 = cast(meta[relay.Constant][3] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %212 = cast(meta[relay.Constant][3] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %213 = %210.1;
  %214 = cast(%213, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %215 = reshape(%211, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %216 = reshape(%212, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %217 = reshape(%214, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %218 = @func_2308(%215, %216, %217) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %219 = %218.2;
  %220 = cast(meta[relay.Constant][3] /* ty=Tensor[(1521), uint16] */, dtype="bool") /* ty=Tensor[(1521), bool] */;
  %221 = cast(%219, dtype="bool") /* ty=bool */;
  %222 = less_equal(%220, %221) /* ty=Tensor[(1521), bool] */;
  (%213, %222)
}

def @func_9059() -> (Tensor[(4, 12, 5), float64],) {
  %223 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  (%223,)
}

def @func_5729() -> (Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %224 = @func_5385() /* ty=(Tensor[(1274), int8],) */;
  %225 = %224.0;
  %226 = cast(%225, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %227 = reshape(%226, newshape=[1274]) /* ty=Tensor[(1274), int8] */;
  %228 = @func_2938(%227) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */;
  %229 = @func_2510() /* ty=Tensor[(1274), int8] */;
  %230 = %228.2;
  (%225, %229, %230)
}

def @func_7429(%var_7427: Tensor[(1456), float64], %var_7428: Tensor[(1, 1521), uint16]) -> (Tensor[(1274), int8], Tensor[(1456), float64], Tensor[(1, 1521), uint16], Tensor[(1456), float64]) {
  %242 = fn (%var_7402: Tensor[(1456), float64], %var_7403: Tensor[(1, 1521), uint16]) -> (Tensor[(1274), int8], Tensor[(1456), float64], Tensor[(1, 1521), uint16], Tensor[(1456), float64]) {
    %231 = cast(%var_7402, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %232 = cast(%var_7403, dtype="uint16") /* ty=Tensor[(1, 1521), uint16] */;
    %233 = reshape(%231, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %234 = reshape(%232, newshape=[169, 9]) /* ty=Tensor[(169, 9), uint16] */;
    %235 = @func_3928(%233, %234) /* ty=(Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) */;
    %236 = %235.4;
    %237 = cast(%236, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %238 = log10(%237) /* ty=Tensor[(1456), float64] */;
    %239 = cast(%238, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %240 = @func_4504() /* ty=Tensor[(1274), int8] */;
    %241 = acosh(%239) /* ty=Tensor[(1456), float64] */;
    (%240, %var_7402, %var_7403, %241)
  };
  %242(%var_7427, %var_7428) /* ty=(Tensor[(1274), int8], Tensor[(1456), float64], Tensor[(1, 1521), uint16], Tensor[(1456), float64]) */
}

def @func_5923() -> (Tensor[(4, 12, 5), bool],) {
  @func_5921() /* ty=(Tensor[(4, 12, 5), bool],) */
}

def @func_7456(%var_7436: Tensor[(6, 8, 12), float64]) -> Tensor[(6, 8, 12), float64] {
  %243 = cast(%var_7436, dtype="float64") /* ty=Tensor[(6, 8, 12), float64] */;
  asinh(%243) /* ty=Tensor[(6, 8, 12), float64] */
}

def @func_8198() -> (Tensor[(1274), int8],) {
  %245 = fn () -> (Tensor[(1274), int8],) {
    %244 = @func_4785() /* ty=Tensor[(1274), int8] */;
    (%244,)
  };
  %245() /* ty=(Tensor[(1274), int8],) */
}

def @func_3691() -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
  %248 = fn () -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
    %246 = @func_384() /* ty=Tensor[(1274), float64] */;
    %247 = @func_397() /* ty=Tensor[(1274), float64] */;
    (%246, %247)
  };
  %248() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */
}

def @func_416() -> (Tensor[(1274), int8],) {
  %251 = fn () -> (Tensor[(1274), int8],) {
    %249 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
    %250 = %249.2;
    (%250,)
  };
  %251() /* ty=(Tensor[(1274), int8],) */
}

def @func_2005() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) {
  @func_2003() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) */
}

def @func_3277(%var_3275: Tensor[(9, 7, 13), float32]) -> (Tensor[(9, 7, 13), float32],) {
  @func_3274(%var_3275) /* ty=(Tensor[(9, 7, 13), float32],) */
}

def @func_8728() -> Tensor[(4, 12, 5), bool] {
  %253 = fn () -> Tensor[(4, 12, 5), bool] {
    %252 = @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %252.0
  };
  %253() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_9548() -> Tensor[(1274), float64] {
  @func_397() /* ty=Tensor[(1274), float64] */
}

def @func_787() -> (Tensor[(1274), float64],) {
  @func_785() /* ty=(Tensor[(1274), float64],) */
}

def @func_2938(%var_2889: Tensor[(1274), int8]) -> (Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) {
  %254 = cast(meta[relay.Constant][4] /* ty=Tensor[(9, 5), float64] */, dtype="float64") /* ty=Tensor[(9, 5), float64] */;
  %255 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %256 = cast(%var_2889, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %257 = reshape(%255, newshape=[]) /* ty=int8 */;
  %258 = reshape(%256, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %259 = @func_316(%257, %258) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %260 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %261 = %260.1;
  %262 = cast(%261, dtype="float64") /* ty=Tensor[(7, 13, 16), float64] */;
  %263 = reshape(%262, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %264 = @func_2604(%263) /* ty=(Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %265 = %264.2;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(1456), float32] */;
  %267 = cosh(%266) /* ty=Tensor[(1456), float32] */;
  %268 = cast(%267, dtype="int32") /* ty=Tensor[(1456), int32] */;
  %269 = cast(meta[relay.Constant][5] /* ty=int8 */, dtype="int32") /* ty=int32 */;
  %270 = sinh(%254) /* ty=Tensor[(9, 5), float64] */;
  %271 = %259.1;
  %272 = left_shift(%268, %269) /* ty=Tensor[(1456), int32] */;
  (%270, %271, %var_2889, %261, %272)
}

def @func_3170(%var_3155: Tensor[(3, 2, 5), uint8], %var_3156: Tensor[(3, 2, 5), uint8]) -> (Tensor[(3, 2, 5), bool], Tensor[(3, 2, 5), bool]) {
  %273 = cast(%var_3156, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %274 = shape_of(%var_3155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_3155, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %277 = cast(%var_3156, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %278 = shape_of(%var_3155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%var_3155, dtype="bool") /* ty=Tensor[(3, 2, 5), bool] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %281 = greater(%275, %276) /* ty=Tensor[(3, 2, 5), bool] */;
  %282 = less(%279, %280) /* ty=Tensor[(3, 2, 5), bool] */;
  (%281, %282)
}

def @func_2412() -> (Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) {
  @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */
}

def @func_2681() -> (Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) {
  @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */
}

def @func_3274(%var_3266: Tensor[(9, 7, 13), float32]) -> (Tensor[(9, 7, 13), float32],) {
  %283 = cast(%var_3266, dtype="float32") /* ty=Tensor[(9, 7, 13), float32] */;
  %284 = sigmoid(%283) /* ty=Tensor[(9, 7, 13), float32] */;
  (%284,)
}

def @func_3051() -> (Tensor[(14, 16, 6), float32],) {
  @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */
}

def @func_3803() -> (Tensor[(1274), float64], Tensor[(1521), bool]) {
  @func_3801() /* ty=(Tensor[(1274), float64], Tensor[(1521), bool]) */
}

def @func_3576() -> Tensor[(1274), float32] {
  @func_3574() /* ty=Tensor[(1274), float32] */
}

def @func_6778(%var_6776: Tensor[(16, 16, 1), uint16], %var_6777: Tensor[(16, 16, 14), uint16]) -> Tensor[(16, 16, 14), uint16] {
  %287 = fn (%var_6765: Tensor[(16, 16, 1), uint16], %var_6766: Tensor[(16, 16, 14), uint16]) -> Tensor[(16, 16, 14), uint16] {
    %285 = cast(%var_6765, dtype="uint16") /* ty=Tensor[(16, 16, 1), uint16] */;
    %286 = cast(%var_6766, dtype="uint16") /* ty=Tensor[(16, 16, 14), uint16] */;
    minimum(%285, %286) /* ty=Tensor[(16, 16, 14), uint16] */
  };
  %287(%var_6776, %var_6777) /* ty=Tensor[(16, 16, 14), uint16] */
}

def @func_6706() -> (Tensor[(7, 14, 13), float32], Tensor[(1274), float64]) {
  %288 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %289 = @func_4262() /* ty=Tensor[(1274), float64] */;
  (%288, %289)
}

def @func_4455(%var_4354: Tensor[(4, 16, 7), float32], %var_4374: Tensor[(600), int64], %var_4441: Tensor[(1274), int8]) -> (Tensor[(7, 13, 16), float64], Tensor[(600), int64], Tensor[(7, 14, 13), float32], int8, Tensor[(1274), int8], Tensor[(4, 16, 7), int32]) {
  %290 = cast(%var_4374, dtype="int64") /* ty=Tensor[(600), int64] */;
  %291 = reshape(%290, newshape=[10, 15, 4]) /* ty=Tensor[(10, 15, 4), int64] */;
  %292 = @func_2857(%291) /* ty=(Tensor[(10, 15, 4), int64], Tensor[(7, 13, 16), float64]) */;
  %293 = cast(meta[relay.Constant][6] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %294 = cast(%var_4441, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %295 = reshape(%293, newshape=[]) /* ty=int8 */;
  %296 = reshape(%294, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %297 = @func_316(%295, %296) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %298 = cast(%var_4354, dtype="float32") /* ty=Tensor[(4, 16, 7), float32] */;
  %299 = cosh(%298) /* ty=Tensor[(4, 16, 7), float32] */;
  %300 = cast(%var_4354, dtype="uint32") /* ty=Tensor[(4, 16, 7), uint32] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="uint32") /* ty=Tensor[(4, 16, 7), uint32] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %304 = subtract(%302, %303) /* ty=Tensor[(4, 16, 7), uint32] */;
  %305 = cast(%304, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %306 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %307 = cast(%299, dtype="bool") /* ty=Tensor[(4, 16, 7), bool] */;
  %308 = dyn.reshape(%305, %306, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %309 = greater_equal(%307, %308) /* ty=Tensor[(4, 16, 7), bool] */;
  %310 = cast(%304, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(3), int32] */;
  %312 = cast(%309, dtype="int32") /* ty=Tensor[(4, 16, 7), int32] */;
  %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %314 = %292.1;
  %315 = %297.1;
  %316 = multiply(%312, %313) /* ty=Tensor[(4, 16, 7), int32] */;
  (%314, %var_4374, %315, meta[relay.Constant][6] /* ty=int8 */, %var_4441, %316)
}

def @func_6491() -> (Tensor[(7, 14, 13), float64],) {
  %317 = @func_3703() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %320 = atan(%319) /* ty=Tensor[(7, 14, 13), float64] */;
  (%320,)
}

def @func_2308(%var_2284: Tensor[(9, 13, 13), uint16], %var_2285: Tensor[(9, 13, 13), uint16], %var_2293: Tensor[(637, 2), int8]) -> (Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) {
  %321 = cast(%var_2285, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %322 = shape_of(%var_2284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_2284, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %325 = cast(meta[relay.Constant][7] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %326 = cast(%var_2293, dtype="int8") /* ty=Tensor[(637, 2), int8] */;
  %327 = reshape(%325, newshape=[]) /* ty=int8 */;
  %328 = reshape(%326, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
  %329 = @func_316(%327, %328) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
  %330 = less_equal(%323, %324) /* ty=Tensor[(9, 13, 13), bool] */;
  %331 = %329.1;
  (%330, %331, meta[relay.Constant][7] /* ty=int8 */, %var_2293)
}

def @func_3735() -> Tensor[(1274), int8] {
  %333 = fn () -> Tensor[(1274), int8] {
    %332 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
    %332.0
  };
  %333() /* ty=Tensor[(1274), int8] */
}

def @func_8768() -> (Tensor[(1274), int8],) {
  @func_8766() /* ty=(Tensor[(1274), int8],) */
}

def @func_4623(%var_4586: Tensor[(7, 14, 13), uint32]) -> (Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), float32], Tensor[(7, 14, 13), uint32]) {
  %334 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %335 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 14, 13), float32] */, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %339 = bitwise_and(%337, %338) /* ty=Tensor[(7, 14, 13), uint32] */;
  %340 = cast(%var_4586, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %342 = cast(%339, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %344 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 14, 13), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
  %345 = cast(%var_4586, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %346 = shape_of(%339, dtype="int32") /* ty=Tensor[(3), int32] */;
  %347 = cast(%339, dtype="uint32") /* ty=Tensor[(7, 14, 13), uint32] */;
  %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %349 = floor_mod(%342, %343) /* ty=Tensor[(7, 14, 13), float64] */;
  %350 = sigmoid(%344) /* ty=Tensor[(7, 14, 13), float32] */;
  %351 = @func_3574() /* ty=Tensor[(1274), float32] */;
  %352 = maximum(%347, %348) /* ty=Tensor[(7, 14, 13), uint32] */;
  (%349, %350, %351, %352)
}

def @func_8662(%var_8659: Tensor[(1274), int8], %var_8660: Tensor[(1386), int8], %var_8661: Tensor[(9, 11, 14), float64]) -> (Tensor[(1274), uint64], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(1274), int8], Tensor[(7, 14, 13), float32], Tensor[(1386), int8], Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), bool], Tensor[(1521), uint16], Tensor[(1274), int8], Tensor[(9, 11, 14), float64]) {
  @func_8657(%var_8659, %var_8660, %var_8661) /* ty=(Tensor[(1274), uint64], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(1274), int8], Tensor[(7, 14, 13), float32], Tensor[(1386), int8], Tensor[(1274), int8], Tensor[(1274), int8], Tensor[(1274), bool], Tensor[(1521), uint16], Tensor[(1274), int8], Tensor[(9, 11, 14), float64]) */
}

def @func_4040() -> (Tensor[(4, 12, 5), float64],) {
  %357 = fn () -> (Tensor[(4, 12, 5), float64],) {
    %353 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %354 = %353.0;
    %355 = cast(%354, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
    %356 = cos(%355) /* ty=Tensor[(4, 12, 5), float64] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(4, 12, 5), float64],) */
}

def @func_8679() -> Tensor[(1274), int8] {
  @func_8677() /* ty=Tensor[(1274), int8] */
}

def @func_7796() -> (Tensor[(1274), float64],) {
  @func_7794() /* ty=(Tensor[(1274), float64],) */
}

def @func_1908() -> (Tensor[(1274), int8],) {
  @func_1906() /* ty=(Tensor[(1274), int8],) */
}

def @func_6237() -> Tensor[(1274), float64] {
  %359 = fn () -> Tensor[(1274), float64] {
    %358 = @func_3450() /* ty=(Tensor[(1274), float64],) */;
    %358.0
  };
  %359() /* ty=Tensor[(1274), float64] */
}

def @func_7459(%var_7457: Tensor[(6, 8, 12), float64]) -> Tensor[(6, 8, 12), float64] {
  @func_7456(%var_7457) /* ty=Tensor[(6, 8, 12), float64] */
}

def @func_6116() -> (Tensor[(1274), float64],) {
  %366 = fn () -> (Tensor[(1274), float64],) {
    %360 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
    %361 = %360.0;
    %362 = cast(%361, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %363 = asin(%362) /* ty=Tensor[(1274), float64] */;
    %364 = cast(%363, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %365 = atanh(%364) /* ty=Tensor[(1274), float64] */;
    (%365,)
  };
  %366() /* ty=(Tensor[(1274), float64],) */
}

def @func_1665(%var_1663: Tensor[(8, 14, 14), bool], %var_1664: Tensor[(8, 14, 14), bool]) -> (Tensor[(8, 14, 14), bool], Tensor[(1274), float64], Tensor[(1274), float64]) {
  @func_1661(%var_1663, %var_1664) /* ty=(Tensor[(8, 14, 14), bool], Tensor[(1274), float64], Tensor[(1274), float64]) */
}

def @func_7256() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) {
  %367 = @func_4332() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %368 = @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %369 = %367.0;
  %370 = %368.0;
  (%369, %370)
}

def @func_7388() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) {
  %371 = @func_5921() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %372 = @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */;
  %373 = %371.0;
  %374 = %372.0;
  (%373, %374)
}

def @func_3989() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) {
  %375 = cast(meta[relay.Constant][9] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %376 = reshape(%375, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %377 = @func_1423(%376) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %378 = @func_1692() /* ty=Tensor[(4, 12, 5), bool] */;
  %379 = %377.0;
  (%378, %379, meta[relay.Constant][9] /* ty=Tensor[(1274), float64] */)
}

def @func_7664() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) {
  %384 = fn () -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) {
    %380 = @func_7388() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) */;
    %381 = @func_5682() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
    %382 = %380.1;
    %383 = %381.0;
    (%382, %383)
  };
  %384() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) */
}

def @func_5587(%var_5573: Tensor[(12, 12, 16), uint8], %var_5574: Tensor[(12, 12, 16), uint8]) -> (Tensor[(12, 12, 16), bool], Tensor[(12, 12, 16), float32], Tensor[(1456), float64], Tensor[(1456), float64]) {
  %385 = cast(%var_5574, dtype="bool") /* ty=Tensor[(12, 12, 16), bool] */;
  %386 = shape_of(%var_5573, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_5573, dtype="bool") /* ty=Tensor[(12, 12, 16), bool] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %389 = cast(%var_5573, dtype="float32") /* ty=Tensor[(12, 12, 16), float32] */;
  %390 = cast(meta[relay.Constant][10] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %391 = reshape(%390, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %392 = @func_1796(%391) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */;
  %393 = less(%387, %388) /* ty=Tensor[(12, 12, 16), bool] */;
  %394 = erf(%389) /* ty=Tensor[(12, 12, 16), float32] */;
  %395 = %392.1;
  (%393, %394, %395, meta[relay.Constant][10] /* ty=Tensor[(1456), float64] */)
}

def @func_3598() -> (Tensor[(4, 12, 5), bool],) {
  %396 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %397 = %396.1;
  (%397,)
}

def @func_6064() -> Tensor[(1274), float64] {
  %398 = fn () -> Tensor[(1274), float64] {
    @func_4646() /* ty=Tensor[(1274), float64] */
  };
  %398() /* ty=Tensor[(1274), float64] */
}

def @func_736(%var_661: Tensor[(9, 11, 14), int8]) -> (Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) {
  %399 = cast(%var_661, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %400 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(9, 11, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(meta[relay.Constant][11] /* ty=Tensor[(9, 11, 14), int8] */, dtype="bool") /* ty=Tensor[(9, 11, 14), bool] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %403 = less(%401, %402) /* ty=Tensor[(9, 11, 14), bool] */;
  %404 = @func_384() /* ty=Tensor[(1274), float64] */;
  (%403, %404)
}

def @func_5464() -> (Tensor[(4, 12, 5), bool],) {
  @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */
}

def @func_9136() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(4, 12, 5), bool]) {
  @func_9134() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(4, 12, 5), bool]) */
}

def @func_1823() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) {
  %405 = @func_827() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %406 = cast(meta[relay.Constant][12] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %407 = reshape(%406, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %408 = @func_1067(%407) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %409 = %405.1;
  %410 = %408.1;
  (%409, %410, meta[relay.Constant][12] /* ty=Tensor[(1456), float64] */)
}

def @func_4460(%var_4457: Tensor[(4, 16, 7), float32], %var_4458: Tensor[(600), int64], %var_4459: Tensor[(1274), int8]) -> (Tensor[(7, 13, 16), float64], Tensor[(600), int64], Tensor[(7, 14, 13), float32], int8, Tensor[(1274), int8], Tensor[(4, 16, 7), int32]) {
  @func_4455(%var_4457, %var_4458, %var_4459) /* ty=(Tensor[(7, 13, 16), float64], Tensor[(600), int64], Tensor[(7, 14, 13), float32], int8, Tensor[(1274), int8], Tensor[(4, 16, 7), int32]) */
}

def @func_3611() -> (Tensor[(14, 16, 6), float32],) {
  %411 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
  %412 = %411.0;
  (%412,)
}

def @func_9460() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32]) {
  @func_9458() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32]) */
}

def @func_8953(%var_8952: Tensor[(4, 14, 1), float32]) -> (Tensor[(4, 14, ?), bool],) {
  %420 = fn (%var_8921: Tensor[(4, 14, 1), float32]) -> (Tensor[(4, 14, ?), bool],) {
    %413 = cast(%var_8921, dtype="float32") /* ty=Tensor[(4, 14, 1), float32] */;
    %414 = cos(%413) /* ty=Tensor[(4, 14, 1), float32] */;
    %415 = cast(%var_8921, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %416 = shape_of(%414, dtype="int32") /* ty=Tensor[(3), int32] */;
    %417 = cast(%414, dtype="bool") /* ty=Tensor[(4, 14, 1), bool] */;
    %418 = dyn.reshape(%415, %416, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %419 = less(%417, %418) /* ty=Tensor[(4, 14, ?), bool] */;
    (%419,)
  };
  %420(%var_8952) /* ty=(Tensor[(4, 14, ?), bool],) */
}

def @func_2125() -> (Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) {
  %421 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 6), float32] */;
  %422 = cast(meta[relay.Constant][13] /* ty=Tensor[(14, 16, 6), float32] */, dtype="float32") /* ty=Tensor[(14, 16, 6), float32] */;
  %423 = sigmoid(%421) /* ty=Tensor[(14, 16, 6), float32] */;
  %424 = sin(%422) /* ty=Tensor[(14, 16, 6), float32] */;
  (%423, %424)
}

def @func_7355() -> (Tensor[(9, 13, 13), bool],) {
  %427 = fn () -> (Tensor[(9, 13, 13), bool],) {
    %425 = @func_4962() /* ty=(Tensor[(9, 13, 13), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */;
    %426 = %425.0;
    (%426,)
  };
  %427() /* ty=(Tensor[(9, 13, 13), bool],) */
}

def @func_1147() -> Tensor[(1274), float64] {
  %429 = fn () -> Tensor[(1274), float64] {
    %428 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %428.1
  };
  %429() /* ty=Tensor[(1274), float64] */
}

def @func_6493() -> (Tensor[(7, 14, 13), float64],) {
  @func_6491() /* ty=(Tensor[(7, 14, 13), float64],) */
}

def @func_9208() -> Tensor[(4, 12, 5), bool] {
  %431 = fn () -> Tensor[(4, 12, 5), bool] {
    %430 = @func_7568() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %430.0
  };
  %431() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_6829() -> (Tensor[(7, 13, 16), float64],) {
  %432 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %433 = %432.1;
  (%433,)
}

def @func_8974() -> (Tensor[(4, 12, 5), float64], Tensor[(13, 117), float32]) {
  @func_8972() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(13, 117), float32]) */
}

def @func_1906() -> (Tensor[(1274), int8],) {
  %434 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %435 = %434.1;
  (%435,)
}

def @func_4149() -> (Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  %436 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %437 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
  %438 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %439 = @func_3703() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %440 = cast(meta[relay.Constant][14] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %441 = cast(meta[relay.Constant][14] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %442 = reshape(%440, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %443 = reshape(%441, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
  %444 = %436.2;
  %445 = %437.0;
  %446 = %438.3;
  %447 = %439.0;
  %448 = @func_435(%442, %443) /* ty=Tensor[(7, 13, 16), float64] */;
  (%444, %445, %446, %447, %448, meta[relay.Constant][14] /* ty=Tensor[(1456), float64] */)
}

def @func_6553() -> Tensor[(1274), float32] {
  %452 = fn () -> Tensor[(1274), float32] {
    %449 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %450 = %449.0;
    %451 = cast(%450, dtype="float32") /* ty=Tensor[(1274), float32] */;
    sqrt(%451) /* ty=Tensor[(1274), float32] */
  };
  %452() /* ty=Tensor[(1274), float32] */
}

def @func_2699() -> Tensor[(1274), bool] {
  @func_2697() /* ty=Tensor[(1274), bool] */
}

def @func_3613() -> (Tensor[(14, 16, 6), float32],) {
  @func_3611() /* ty=(Tensor[(14, 16, 6), float32],) */
}

def @func_5562() -> (Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), int8]) {
  %459 = fn () -> (Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), int8]) {
    %453 = @func_2747() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %454 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %455 = @func_3734() /* ty=Tensor[(1274), int8] */;
    %456 = %453.1;
    %457 = %454.0;
    %458 = @func_2510() /* ty=Tensor[(1274), int8] */;
    (%455, %456, %457, %458)
  };
  %459() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), int8]) */
}

def @func_557() -> Tensor[(4, 12, 5), bool] {
  @func_555() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_8177() -> (Tensor[(1274), float64],) {
  %460 = @func_6115() /* ty=(Tensor[(1274), float64],) */;
  %461 = %460.0;
  (%461,)
}

def @func_5752() -> Tensor[(4, 12, 5), bool] {
  @func_555() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_7169() -> Tensor[(13, 117), float32] {
  @func_7167() /* ty=Tensor[(13, 117), float32] */
}

def @func_2646(%var_2644: Tensor[(4, 12, 5), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  @func_2643(%var_2644) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */
}

def @func_5801() -> (Tensor[(1274), float64],) {
  @func_5799() /* ty=(Tensor[(1274), float64],) */
}

def @func_3523() -> (Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) {
  @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */
}

def @func_5067() -> (Tensor[(1274), bool], Tensor[(1456), float64], Tensor[(1274), bool]) {
  %474 = fn () -> (Tensor[(1274), bool], Tensor[(1456), float64], Tensor[(1274), bool]) {
    %462 = @func_1841() /* ty=Tensor[(1274), float64] */;
    %463 = @func_3690() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %464 = %463.1;
    %465 = cast(%464, dtype="bool") /* ty=Tensor[(1274), bool] */;
    %466 = shape_of(%462, dtype="int32") /* ty=Tensor[(1), int32] */;
    %467 = cast(%462, dtype="bool") /* ty=Tensor[(1274), bool] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?), bool] */;
    %469 = @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */;
    %470 = @func_4332() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) */;
    %471 = equal(%467, %468) /* ty=Tensor[(1274), bool] */;
    %472 = %469.4;
    %473 = %470.2;
    (%471, %472, %473)
  };
  %474() /* ty=(Tensor[(1274), bool], Tensor[(1456), float64], Tensor[(1274), bool]) */
}

def @func_1614() -> Tensor[(1274), float64] {
  %476 = fn () -> Tensor[(1274), float64] {
    %475 = @func_643() /* ty=(Tensor[(1274), float64],) */;
    %475.0
  };
  %476() /* ty=Tensor[(1274), float64] */
}

def @func_3372(%var_3331: Tensor[(4, 1, 4), float32], %var_3332: Tensor[(4, 12, 4), float32], %var_3337: Tensor[(1274), float64]) -> (Tensor[(4, 12, 4), float32], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(4, 12, 5), float64]) {
  %477 = cast(%var_3331, dtype="float32") /* ty=Tensor[(4, 1, 4), float32] */;
  %478 = cast(%var_3332, dtype="float32") /* ty=Tensor[(4, 12, 4), float32] */;
  %479 = cast(%var_3337, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %480 = reshape(%479, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %481 = @func_1423(%480) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %482 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %483 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
  %484 = floor_divide(%477, %478) /* ty=Tensor[(4, 12, 4), float32] */;
  %485 = %481.2;
  %486 = %482.0;
  %487 = %483.0;
  %488 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  (%484, %485, %var_3337, %486, %487, %488)
}

def @func_2748() -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
  %492 = fn () -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
    %489 = @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */;
    %490 = @func_1146() /* ty=Tensor[(1274), float64] */;
    %491 = %489.3;
    (%490, %491)
  };
  %492() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */
}

def @func_2607(%var_2605: Tensor[(1456), float64]) -> (Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  @func_2604(%var_2605) /* ty=(Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */
}

def @func_5462() -> (Tensor[(4, 12, 5), bool],) {
  %493 = @func_4039() /* ty=(Tensor[(4, 12, 5), float64],) */;
  %494 = %493.0;
  %495 = cast(meta[relay.Constant][15] /* ty=Tensor[(4, 12, 5), float64] */, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %499 = equal(%497, %498) /* ty=Tensor[(4, 12, 5), bool] */;
  (%499,)
}

def @func_357() -> (Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) {
  %509 = fn () -> (Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) {
    %500 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="bool") /* ty=bool */;
    %501 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 12, 5), int8] */, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
    %502 = cast(meta[relay.Constant][16] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %503 = cast(meta[relay.Constant][18] /* ty=Tensor[(1274), int8] */, dtype="int8") /* ty=Tensor[(1274), int8] */;
    %504 = reshape(%502, newshape=[]) /* ty=int8 */;
    %505 = reshape(%503, newshape=[7, 14, 13]) /* ty=Tensor[(7, 14, 13), int8] */;
    %506 = @func_316(%504, %505) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */;
    %507 = greater_equal(%500, %501) /* ty=Tensor[(4, 12, 5), bool] */;
    %508 = %506.1;
    (%507, %508, meta[relay.Constant][18] /* ty=Tensor[(1274), int8] */)
  };
  %509() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */
}

def @func_4909(%var_4907: float32, %var_4908: Tensor[(1, 4, 13), float32]) -> (Tensor[(1, 4, 13), float32],) {
  @func_4905(%var_4907, %var_4908) /* ty=(Tensor[(1, 4, 13), float32],) */
}

def @func_1069(%var_1068: Tensor[(1456), float64]) -> (Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  %520 = fn (%var_1056: Tensor[(1456), float64]) -> (Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
    %510 = @func_643() /* ty=(Tensor[(1274), float64],) */;
    %511 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
    %512 = cast(%511, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
    %513 = cast(%var_1056, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %514 = cast(%var_1056, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %515 = reshape(%513, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
    %516 = reshape(%514, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
    %517 = %510.0;
    %518 = tan(%512) /* ty=Tensor[(4, 12, 5), float64] */;
    %519 = @func_435(%515, %516) /* ty=Tensor[(7, 13, 16), float64] */;
    (%517, %518, %519, %var_1056)
  };
  %520(%var_1068) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */
}

def @func_1699() -> (Tensor[(1274), float64],) {
  %521 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
  %522 = %521.3;
  (%522,)
}

def @func_7569() -> (Tensor[(4, 12, 5), bool],) {
  %525 = fn () -> (Tensor[(4, 12, 5), bool],) {
    %523 = @func_5462() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %524 = %523.0;
    (%524,)
  };
  %525() /* ty=(Tensor[(4, 12, 5), bool],) */
}

def @func_4764(%var_4762: Tensor[(1, 16, 5), float32], %var_4763: Tensor[(1274), int8]) -> (Tensor[(?, 16, 5), uint8], Tensor[(9, 5), float64], Tensor[(1274), int8]) {
  @func_4760(%var_4762, %var_4763) /* ty=(Tensor[(?, 16, 5), uint8], Tensor[(9, 5), float64], Tensor[(1274), int8]) */
}

def @func_2410() -> (Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) {
  %526 = cast(meta[relay.Constant][19] /* ty=Tensor[(169, 9), uint16] */, dtype="uint16") /* ty=Tensor[(169, 9), uint16] */;
  %527 = cast(meta[relay.Constant][19] /* ty=Tensor[(169, 9), uint16] */, dtype="uint16") /* ty=Tensor[(169, 9), uint16] */;
  %528 = @func_1841() /* ty=Tensor[(1274), float64] */;
  %529 = cast(%528, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %530 = reshape(%526, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %531 = reshape(%527, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %532 = reshape(%529, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %533 = @func_2308(%530, %531, %532) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %534 = @func_2003() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %535 = @func_1906() /* ty=(Tensor[(1274), int8],) */;
  %536 = %533.1;
  %537 = %534.1;
  %538 = %535.0;
  (%528, %536, meta[relay.Constant][19] /* ty=Tensor[(169, 9), uint16] */, %537, %538)
}

def @func_5427(%var_5425: Tensor[(1274), float64]) -> (Tensor[(1274), bool], Tensor[(1274), bool], Tensor[(7, 13, 16), float64]) {
  @func_5424(%var_5425) /* ty=(Tensor[(1274), bool], Tensor[(1274), bool], Tensor[(7, 13, 16), float64]) */
}

def @func_4504() -> Tensor[(1274), int8] {
  @func_3734() /* ty=Tensor[(1274), int8] */
}

def @func_4647() -> Tensor[(1274), float64] {
  %540 = fn () -> Tensor[(1274), float64] {
    %539 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
    %539.0
  };
  %540() /* ty=Tensor[(1274), float64] */
}

def @func_4962() -> (Tensor[(9, 13, 13), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) {
  %541 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
  %542 = cast(meta[relay.Constant][20] /* ty=Tensor[(1274), float64] */, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %543 = reshape(%542, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %544 = @func_1423(%543) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
  %545 = @func_4204() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8]) */;
  %546 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %547 = %541.1;
  %548 = %544.1;
  %549 = %545.1;
  %550 = %546.0;
  (%547, %548, meta[relay.Constant][20] /* ty=Tensor[(1274), float64] */, %549, %550)
}

def @func_5754() -> Tensor[(4, 12, 5), bool] {
  @func_5752() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_5921() -> (Tensor[(4, 12, 5), bool],) {
  %551 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %552 = %551.0;
  (%552,)
}

def @func_6708() -> (Tensor[(7, 14, 13), float32], Tensor[(1274), float64]) {
  @func_6706() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(1274), float64]) */
}

def @func_2679() -> (Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) {
  %553 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %554 = @func_1699() /* ty=(Tensor[(1274), float64],) */;
  %555 = @func_2125() /* ty=(Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) */;
  %556 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
  %557 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %558 = %553.1;
  %559 = %554.0;
  %560 = %555.1;
  %561 = %556.2;
  (%557, %558, %559, %560, %561)
}

def @func_4334() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) {
  @func_4332() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), bool]) */
}

def @func_739(%var_737: Tensor[(9, 11, 14), int8]) -> (Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) {
  @func_736(%var_737) /* ty=(Tensor[(9, 11, 14), bool], Tensor[(1274), float64]) */
}

def @func_5355() -> Tensor[(7, 14, 13), float32] {
  %562 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %562.1
}

def @func_4151() -> (Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) {
  @func_4149() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */
}

def @func_9275() -> (Tensor[(1521), uint16],) {
  %565 = fn () -> (Tensor[(1521), uint16],) {
    %563 = @func_3521() /* ty=(Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) */;
    %564 = %563.2;
    (%564,)
  };
  %565() /* ty=(Tensor[(1521), uint16],) */
}

def @func_8907() -> (Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) {
  @func_8905() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */
}

def @func_6831() -> (Tensor[(7, 13, 16), float64],) {
  @func_6829() /* ty=(Tensor[(7, 13, 16), float64],) */
}

def @func_3049() -> (Tensor[(14, 16, 6), float32],) {
  %566 = @func_2125() /* ty=(Tensor[(14, 16, 6), float32], Tensor[(14, 16, 6), float32]) */;
  %567 = %566.0;
  (%567,)
}

def @func_7167() -> Tensor[(13, 117), float32] {
  %568 = @func_6470() /* ty=Tensor[(13, 117), float32] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
  asinh(%569) /* ty=Tensor[(13, 117), float32] */
}

def @func_4506() -> Tensor[(1274), int8] {
  @func_4504() /* ty=Tensor[(1274), int8] */
}

def @func_9134() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(4, 12, 5), bool]) {
  %570 = @func_1740() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
  %571 = @func_7256() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) */;
  %572 = %570.1;
  %573 = @func_1613() /* ty=Tensor[(1274), float64] */;
  %574 = %571.1;
  (%572, %573, %574)
}

def @func_8165() -> (Tensor[(1274), int8], Tensor[(240), bool], Tensor[(13, 117), float64], Tensor[(4, 12, 5), bool], Tensor[(13, 117), uint16], Tensor[(13, 117), float64], Tensor[(1274), float64], Tensor[(4, 364), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  %611 = fn () -> (Tensor[(1274), int8], Tensor[(240), bool], Tensor[(13, 117), float64], Tensor[(4, 12, 5), bool], Tensor[(13, 117), uint16], Tensor[(13, 117), float64], Tensor[(1274), float64], Tensor[(4, 364), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
    %575 = cast(meta[relay.Constant][21] /* ty=Tensor[(240), bool] */, dtype="bool") /* ty=Tensor[(240), bool] */;
    %576 = reshape(%575, newshape=[4, 12, 5]) /* ty=Tensor[(4, 12, 5), bool] */;
    %577 = @func_2643(%576) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
    %578 = @func_7167() /* ty=Tensor[(13, 117), float32] */;
    %579 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 117), float32] */, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
    %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(2), int32] */;
    %581 = cast(%578, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %583 = divide(%581, %582) /* ty=Tensor[(13, 117), float64] */;
    %584 = cast(%583, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
    %585 = @func_5921() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %586 = cast(meta[relay.Constant][22] /* ty=Tensor[(13, 117), float32] */, dtype="bool") /* ty=Tensor[(13, 117), bool] */;
    %587 = shape_of(%578, dtype="int32") /* ty=Tensor[(2), int32] */;
    %588 = cast(%578, dtype="bool") /* ty=Tensor[(13, 117), bool] */;
    %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %590 = equal(%588, %589) /* ty=Tensor[(13, 117), bool] */;
    %591 = cast(%583, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
    %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(2), int32] */;
    %593 = cast(%590, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %595 = cast(%583, dtype="float64") /* ty=Tensor[(13, 117), float64] */;
    %596 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 364), float64] */, dtype="float64") /* ty=Tensor[(4, 364), float64] */;
    %597 = cast(%578, dtype="uint16") /* ty=Tensor[(13, 117), uint16] */;
    %598 = reshape(%596, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %599 = reshape(%597, newshape=[169, 9]) /* ty=Tensor[(169, 9), uint16] */;
    %600 = @func_3928(%598, %599) /* ty=(Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(1456), float64], Tensor[(169, 9), uint8], Tensor[(8, 13, 13), uint16], Tensor[(1352), int32], Tensor[(4, 12, 5), bool]) */;
    %601 = @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %602 = @func_5385() /* ty=(Tensor[(1274), int8],) */;
    %603 = %577.1;
    %604 = sin(%584) /* ty=Tensor[(13, 117), float64] */;
    %605 = %585.0;
    %606 = bitwise_or(%593, %594) /* ty=Tensor[(13, 117), uint16] */;
    %607 = asin(%595) /* ty=Tensor[(13, 117), float64] */;
    %608 = %600.2;
    %609 = %601.0;
    %610 = %602.0;
    (%603, meta[relay.Constant][21] /* ty=Tensor[(240), bool] */, %604, %605, %606, %607, %608, meta[relay.Constant][23] /* ty=Tensor[(4, 364), float64] */, %609, %610)
  };
  %611() /* ty=(Tensor[(1274), int8], Tensor[(240), bool], Tensor[(13, 117), float64], Tensor[(4, 12, 5), bool], Tensor[(13, 117), uint16], Tensor[(13, 117), float64], Tensor[(1274), float64], Tensor[(4, 364), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */
}

def @func_1701() -> (Tensor[(1274), float64],) {
  @func_1699() /* ty=(Tensor[(1274), float64],) */
}

def @func_1841() -> Tensor[(1274), float64] {
  %612 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %612.0
}

def @func_3451() -> (Tensor[(1274), float64],) {
  %615 = fn () -> (Tensor[(1274), float64],) {
    %613 = @func_2003() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1274), int8]) */;
    %614 = %613.1;
    (%614,)
  };
  %615() /* ty=(Tensor[(1274), float64],) */
}

def @func_9372() -> Tensor[(9, 13, 13), float64] {
  %619 = fn () -> Tensor[(9, 13, 13), float64] {
    %616 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
    %617 = %616.1;
    %618 = cast(%617, dtype="float64") /* ty=Tensor[(9, 13, 13), float64] */;
    cosh(%618) /* ty=Tensor[(9, 13, 13), float64] */
  };
  %619() /* ty=Tensor[(9, 13, 13), float64] */
}

def @func_5357() -> Tensor[(7, 14, 13), float32] {
  @func_5355() /* ty=Tensor[(7, 14, 13), float32] */
}

def @func_1741() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) {
  %631 = fn () -> (Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) {
    %620 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %621 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %622 = %621.1;
    %623 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %624 = %623.0;
    %625 = cast(%624, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
    %626 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
    %627 = cast(%622, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
    %628 = dyn.reshape(%625, %626, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %629 = %620.0;
    %630 = greater(%627, %628) /* ty=Tensor[(4, 12, 5), bool] */;
    (%629, %630)
  };
  %631() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */
}

def @func_7860() -> (Tensor[(1274), float64],) {
  @func_7858() /* ty=(Tensor[(1274), float64],) */
}

def @func_8677() -> Tensor[(1274), int8] {
  %632 = @func_1440() /* ty=(Tensor[(1274), int8],) */;
  %632.0
}

def @func_319(%var_317: int8, %var_318: Tensor[(7, 14, 13), int8]) -> (Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) {
  %648 = fn (%var_263: int8, %var_264: Tensor[(7, 14, 13), int8]) -> (Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) {
    %633 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 14, 13), int8] */, dtype="uint16") /* ty=Tensor[(7, 14, 13), uint16] */;
    %634 = shape_of(%var_264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %635 = cast(%var_264, dtype="uint16") /* ty=Tensor[(7, 14, 13), uint16] */;
    %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %637 = cast(%var_263, dtype="int8") /* ty=int8 */;
    %638 = cast(%var_264, dtype="int8") /* ty=Tensor[(7, 14, 13), int8] */;
    %639 = bitwise_or(%637, %638) /* ty=Tensor[(7, 14, 13), int8] */;
    %640 = cast(%var_264, dtype="bool") /* ty=Tensor[(7, 14, 13), bool] */;
    %641 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
    %642 = cast(%639, dtype="bool") /* ty=Tensor[(7, 14, 13), bool] */;
    %643 = dyn.reshape(%640, %641, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %644 = logical_or(%642, %643) /* ty=Tensor[(7, 14, 13), bool] */;
    %645 = cast(%644, dtype="float32") /* ty=Tensor[(7, 14, 13), float32] */;
    %646 = right_shift(%635, %636) /* ty=Tensor[(7, 14, 13), uint16] */;
    %647 = exp(%645) /* ty=Tensor[(7, 14, 13), float32] */;
    (%646, %647)
  };
  %648(%var_317, %var_318) /* ty=(Tensor[(7, 14, 13), uint16], Tensor[(7, 14, 13), float32]) */
}

def @func_3500(%var_3499: Tensor[(1274), bool]) -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) {
  %662 = fn (%var_3460: Tensor[(1274), bool]) -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) {
    %649 = @func_2796() /* ty=(Tensor[(1274), int8], Tensor[(1274), bool]) */;
    %650 = %649.1;
    %651 = cast(%var_3460, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(1), int32] */;
    %653 = cast(%650, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?), float64] */;
    %655 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %656 = @func_3227() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) */;
    %657 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
    %658 = divide(%653, %654) /* ty=Tensor[(1274), float64] */;
    %659 = %655.1;
    %660 = %656.1;
    %661 = %657.0;
    (%658, %659, %660, %661)
  };
  %662(%var_3499) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64]) */
}

def @func_3521() -> (Tensor[(1274), float64], Tensor[(9, 13, 13), bool], Tensor[(1521), uint16], Tensor[(1274), float64]) {
  %663 = cast(meta[relay.Constant][25] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %664 = cast(meta[relay.Constant][25] /* ty=Tensor[(1521), uint16] */, dtype="uint16") /* ty=Tensor[(1521), uint16] */;
  %665 = @func_1613() /* ty=Tensor[(1274), float64] */;
  %666 = cast(%665, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %667 = reshape(%663, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %668 = reshape(%664, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), uint16] */;
  %669 = reshape(%666, newshape=[637, 2]) /* ty=Tensor[(637, 2), int8] */;
  %670 = @func_2308(%667, %668, %669) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(7, 14, 13), float32], int8, Tensor[(637, 2), int8]) */;
  %671 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %672 = %670.0;
  %673 = %671.0;
  (%665, %672, meta[relay.Constant][25] /* ty=Tensor[(1521), uint16] */, %673)
}

def @func_828() -> (Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) {
  %679 = fn () -> (Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) {
    %674 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %675 = @func_785() /* ty=(Tensor[(1274), float64],) */;
    %676 = @func_384() /* ty=Tensor[(1274), float64] */;
    %677 = %674.0;
    %678 = %675.0;
    (%676, %677, %678)
  };
  %679() /* ty=(Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */
}

def @func_8179() -> (Tensor[(1274), float64],) {
  @func_8177() /* ty=(Tensor[(1274), float64],) */
}

def @func_1798(%var_1797: Tensor[(1456), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) {
  %695 = fn (%var_1786: Tensor[(1456), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) {
    %680 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %681 = cast(%var_1786, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %682 = reshape(%681, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %683 = @func_1067(%682) /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
    %684 = @func_397() /* ty=Tensor[(1274), float64] */;
    %685 = cast(%684, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %686 = cast(%684, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %687 = reshape(%686, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
    %688 = @func_1423(%687) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */;
    %689 = %688.0;
    %690 = cast(%689, dtype="float64") /* ty=Tensor[(1274), float64] */;
    %691 = %680.0;
    %692 = %683.3;
    %693 = asinh(%685) /* ty=Tensor[(1274), float64] */;
    %694 = exp(%690) /* ty=Tensor[(1274), float64] */;
    (%691, %692, %var_1786, %693, %694)
  };
  %695(%var_1797) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */
}

def @func_569() -> (Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) {
  %699 = fn () -> (Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) {
    %696 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %697 = %696.0;
    %698 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
    (%697, %698)
  };
  %699() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */
}

def @func_8266() -> (Tensor[(4, 12, 5), float64], Tensor[(1274), float64]) {
  %700 = @func_4039() /* ty=(Tensor[(4, 12, 5), float64],) */;
  %701 = @func_3989() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), bool], Tensor[(1274), float64]) */;
  %702 = %700.0;
  %703 = %701.2;
  (%702, %703)
}

def @func_2804() -> Tensor[(7, 14, 13), float32] {
  %704 = @func_356() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), int8]) */;
  %704.1
}

def @func_4786() -> Tensor[(1274), int8] {
  %705 = fn () -> Tensor[(1274), int8] {
    @func_2510() /* ty=Tensor[(1274), int8] */
  };
  %705() /* ty=Tensor[(1274), int8] */
}

def @func_4827(%var_4826: Tensor[(6, 7, 2), float32]) -> Tensor[(6, 7, 2), float32] {
  %707 = fn (%var_4811: Tensor[(6, 7, 2), float32]) -> Tensor[(6, 7, 2), float32] {
    %706 = cast(%var_4811, dtype="float32") /* ty=Tensor[(6, 7, 2), float32] */;
    acos(%706) /* ty=Tensor[(6, 7, 2), float32] */
  };
  %707(%var_4826) /* ty=Tensor[(6, 7, 2), float32] */
}

def @func_1843() -> Tensor[(1274), float64] {
  @func_1841() /* ty=Tensor[(1274), float64] */
}

def @func_7018() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32]) {
  %708 = @func_5682() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) */;
  %709 = @func_4039() /* ty=(Tensor[(4, 12, 5), float64],) */;
  %710 = %709.0;
  %711 = cast(%710, dtype="float32") /* ty=Tensor[(4, 12, 5), float32] */;
  %712 = %708.1;
  %713 = log2(%711) /* ty=Tensor[(4, 12, 5), float32] */;
  (%712, %713)
}

def @func_3125() -> Tensor[(4, 12, 5), float64] {
  %717 = fn () -> Tensor[(4, 12, 5), float64] {
    %714 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
    %715 = %714.1;
    %716 = cast(%715, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
    rsqrt(%716) /* ty=Tensor[(4, 12, 5), float64] */
  };
  %717() /* ty=Tensor[(4, 12, 5), float64] */
}

def @func_1968(%var_1967: Tensor[(4, 9, 5), int32]) -> (Tensor[(4, 9, 5), bool],) {
  %723 = fn (%var_1947: Tensor[(4, 9, 5), int32]) -> (Tensor[(4, 9, 5), bool],) {
    %718 = cast(%var_1947, dtype="bool") /* ty=Tensor[(4, 9, 5), bool] */;
    %719 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 9, 5), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %720 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 9, 5), int32] */, dtype="bool") /* ty=Tensor[(4, 9, 5), bool] */;
    %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %722 = equal(%720, %721) /* ty=Tensor[(4, 9, 5), bool] */;
    (%722,)
  };
  %723(%var_1967) /* ty=(Tensor[(4, 9, 5), bool],) */
}

def @func_6508() -> Tensor[(1274), float64] {
  %725 = fn () -> Tensor[(1274), float64] {
    %724 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
    %724.3
  };
  %725() /* ty=Tensor[(1274), float64] */
}

def @func_8268() -> (Tensor[(4, 12, 5), float64], Tensor[(1274), float64]) {
  @func_8266() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(1274), float64]) */
}

def @func_6471() -> Tensor[(13, 117), float32] {
  %729 = fn () -> Tensor[(13, 117), float32] {
    %726 = @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */;
    %727 = %726.2;
    %728 = cast(%727, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
    atan(%728) /* ty=Tensor[(13, 117), float32] */
  };
  %729() /* ty=Tensor[(13, 117), float32] */
}

def @func_8905() -> (Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) {
  %730 = @func_8377() /* ty=(Tensor[(1274), float64],) */;
  %731 = @func_3801() /* ty=(Tensor[(1274), float64], Tensor[(1521), bool]) */;
  %732 = @func_6829() /* ty=(Tensor[(7, 13, 16), float64],) */;
  %733 = %730.0;
  %734 = %731.0;
  %735 = %732.0;
  (%733, %734, %735)
}

def @func_9458() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), float64], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32]) {
  %736 = @func_4149() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64], Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %737 = @func_9104() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) */;
  %738 = %737.1;
  %739 = cast(%738, dtype="float64") /* ty=Tensor[(4, 12, 5), float64] */;
  %740 = @func_785() /* ty=(Tensor[(1274), float64],) */;
  %741 = @func_3703() /* ty=(Tensor[(7, 14, 13), float32],) */;
  %742 = %736.2;
  %743 = sqrt(%739) /* ty=Tensor[(4, 12, 5), float64] */;
  %744 = @func_6507() /* ty=Tensor[(1274), float64] */;
  %745 = %740.0;
  %746 = %741.0;
  (%742, %743, %744, %745, %746)
}

def @func_2859(%var_2858: Tensor[(10, 15, 4), int64]) -> (Tensor[(10, 15, 4), int64], Tensor[(7, 13, 16), float64]) {
  %754 = fn (%var_2846: Tensor[(10, 15, 4), int64]) -> (Tensor[(10, 15, 4), int64], Tensor[(7, 13, 16), float64]) {
    %747 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 15, 4), int64] */, dtype="int64") /* ty=Tensor[(10, 15, 4), int64] */;
    %748 = shape_of(%var_2846, dtype="int32") /* ty=Tensor[(3), int32] */;
    %749 = cast(%var_2846, dtype="int64") /* ty=Tensor[(10, 15, 4), int64] */;
    %750 = dyn.reshape(%747, %748, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %751 = @func_2458() /* ty=(Tensor[(1456), float64], Tensor[(7, 13, 16), float64]) */;
    %752 = maximum(%749, %750) /* ty=Tensor[(10, 15, 4), int64] */;
    %753 = %751.1;
    (%752, %753)
  };
  %754(%var_2858) /* ty=(Tensor[(10, 15, 4), int64], Tensor[(7, 13, 16), float64]) */
}

def @func_5424(%var_5394: Tensor[(1274), float64]) -> (Tensor[(1274), bool], Tensor[(1274), bool], Tensor[(7, 13, 16), float64]) {
  %755 = @func_4646() /* ty=Tensor[(1274), float64] */;
  %756 = cast(%var_5394, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %757 = shape_of(%755, dtype="int32") /* ty=Tensor[(1), int32] */;
  %758 = cast(%755, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %759 = dyn.reshape(%756, %757, newshape=[]) /* ty=Tensor[(?), bool] */;
  %760 = logical_or(%758, %759) /* ty=Tensor[(1274), bool] */;
  %761 = cast(%760, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %762 = reshape(%761, newshape=[1274]) /* ty=Tensor[(1274), int8] */;
  %763 = @func_2938(%762) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */;
  %764 = @func_2697() /* ty=Tensor[(1274), bool] */;
  %765 = %763.3;
  (%760, %764, %765)
}

def @func_3174(%var_3172: Tensor[(3, 2, 5), uint8], %var_3173: Tensor[(3, 2, 5), uint8]) -> (Tensor[(3, 2, 5), bool], Tensor[(3, 2, 5), bool]) {
  @func_3170(%var_3172, %var_3173) /* ty=(Tensor[(3, 2, 5), bool], Tensor[(3, 2, 5), bool]) */
}

def @func_2643(%var_2628: Tensor[(4, 12, 5), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(1274), int8]) {
  %766 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  %767 = cast(%var_2628, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %768 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%766, dtype="bool") /* ty=Tensor[(4, 12, 5), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = not_equal(%769, %770) /* ty=Tensor[(4, 12, 5), bool] */;
  %772 = @func_2510() /* ty=Tensor[(1274), int8] */;
  (%771, %772)
}

def @func_8252() -> (Tensor[(1274), float64],) {
  %775 = fn () -> (Tensor[(1274), float64],) {
    %773 = @func_6706() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(1274), float64]) */;
    %774 = %773.1;
    (%774,)
  };
  %775() /* ty=(Tensor[(1274), float64],) */
}

def @func_7820() -> (Tensor[(1274), float64],) {
  %776 = @func_1146() /* ty=Tensor[(1274), float64] */;
  (%776,)
}

def @func_9232(%var_9230: Tensor[(6, 10, 10), int8], %var_9231: Tensor[(6, 10, 10), int8]) -> (Tensor[(6, 10, 10), int8],) {
  %782 = fn (%var_9222: Tensor[(6, 10, 10), int8], %var_9223: Tensor[(6, 10, 10), int8]) -> (Tensor[(6, 10, 10), int8],) {
    %777 = cast(%var_9223, dtype="int8") /* ty=Tensor[(6, 10, 10), int8] */;
    %778 = shape_of(%var_9222, dtype="int32") /* ty=Tensor[(3), int32] */;
    %779 = cast(%var_9222, dtype="int8") /* ty=Tensor[(6, 10, 10), int8] */;
    %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %781 = maximum(%779, %780) /* ty=Tensor[(6, 10, 10), int8] */;
    (%781,)
  };
  %782(%var_9230, %var_9231) /* ty=(Tensor[(6, 10, 10), int8],) */
}

def @func_1885() -> (Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) {
  %786 = fn () -> (Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) {
    %783 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
    %784 = @func_1841() /* ty=Tensor[(1274), float64] */;
    %785 = %783.1;
    (%784, %785)
  };
  %786() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */
}

def @func_2981(%var_2979: Tensor[(1386), int8]) -> (Tensor[(7, 14, 13), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), int8]) {
  @func_2978(%var_2979) /* ty=(Tensor[(7, 14, 13), float32], Tensor[(9, 11, 14), bool], Tensor[(1386), int8]) */
}

def @func_6968(%var_6966: Tensor[(10, 2, 7), uint16], %var_6967: Tensor[(1456), float64]) -> (Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(10, 2, 7), float64], Tensor[(1274), float64]) {
  @func_6964(%var_6966, %var_6967) /* ty=(Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(10, 2, 7), float64], Tensor[(1274), float64]) */
}

def @func_8456() -> Tensor[(1274), float64] {
  %787 = @func_2319() /* ty=(Tensor[(1274), float64],) */;
  %787.0
}

def @func_7723(%var_7722: Tensor[(1, 1568), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1, 1568), bool]) {
  %796 = fn (%var_7719: Tensor[(1, 1568), bool]) -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1, 1568), bool]) {
    %788 = @func_7568() /* ty=(Tensor[(4, 12, 5), bool],) */;
    %789 = cast(%var_7719, dtype="bool") /* ty=Tensor[(1, 1568), bool] */;
    %790 = cast(%var_7719, dtype="bool") /* ty=Tensor[(1, 1568), bool] */;
    %791 = reshape(%789, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), bool] */;
    %792 = reshape(%790, newshape=[8, 14, 14]) /* ty=Tensor[(8, 14, 14), bool] */;
    %793 = @func_1661(%791, %792) /* ty=(Tensor[(8, 14, 14), bool], Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %794 = %788.0;
    %795 = %793.1;
    (%794, %795, %var_7719)
  };
  %796(%var_7722) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1, 1568), bool]) */
}

def @func_8458() -> Tensor[(1274), float64] {
  @func_8456() /* ty=Tensor[(1274), float64] */
}

def @func_3309(%var_3308: Tensor[(8, 13, 13), int32]) -> (Tensor[(8, 13, 13), uint16],) {
  %807 = fn (%var_3292: Tensor[(8, 13, 13), int32]) -> (Tensor[(8, 13, 13), uint16],) {
    %797 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 13), int32] */, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
    %798 = shape_of(%var_3292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %799 = cast(%var_3292, dtype="bool") /* ty=Tensor[(8, 13, 13), bool] */;
    %800 = dyn.reshape(%797, %798, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %801 = equal(%799, %800) /* ty=Tensor[(8, 13, 13), bool] */;
    %802 = cast(%801, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
    %803 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 13), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 13, 13), int32] */, dtype="uint16") /* ty=Tensor[(8, 13, 13), uint16] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %806 = subtract(%804, %805) /* ty=Tensor[(8, 13, 13), uint16] */;
    (%806,)
  };
  %807(%var_3308) /* ty=(Tensor[(8, 13, 13), uint16],) */
}

def @func_4964() -> (Tensor[(9, 13, 13), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) {
  @func_4962() /* ty=(Tensor[(9, 13, 13), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), int8], Tensor[(1274), float64]) */
}

def @func_5799() -> (Tensor[(1274), float64],) {
  %808 = @func_1613() /* ty=Tensor[(1274), float64] */;
  %809 = cast(%808, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %810 = sigmoid(%809) /* ty=Tensor[(1274), float64] */;
  (%810,)
}

def @func_2539(%var_2527: Tensor[(10, 7, 5), bool], %var_2528: Tensor[(10, 7, 5), bool]) -> (Tensor[(10, 7, 5), bool],) {
  %811 = cast(%var_2528, dtype="bool") /* ty=Tensor[(10, 7, 5), bool] */;
  %812 = shape_of(%var_2527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %813 = cast(%var_2527, dtype="bool") /* ty=Tensor[(10, 7, 5), bool] */;
  %814 = dyn.reshape(%811, %812, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %815 = logical_and(%813, %814) /* ty=Tensor[(10, 7, 5), bool] */;
  (%815,)
}

def @func_1423(%var_1376: Tensor[(1274), float64]) -> (Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) {
  %816 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %817 = %816.0;
  %818 = cast(%var_1376, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %819 = shape_of(%817, dtype="int32") /* ty=Tensor[(1), int32] */;
  %820 = cast(%817, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %821 = dyn.reshape(%818, %819, newshape=[]) /* ty=Tensor[(?), bool] */;
  %822 = @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %823 = %822.0;
  %824 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 12, 5), bool] */, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="uint8") /* ty=Tensor[(4, 12, 5), uint8] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %828 = cast(%817, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %829 = atan(%828) /* ty=Tensor[(1274), float64] */;
  %830 = cast(%var_1376, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %831 = shape_of(%829, dtype="int32") /* ty=Tensor[(1), int32] */;
  %832 = cast(%829, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?), float64] */;
  %834 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %835 = greater(%820, %821) /* ty=Tensor[(1274), bool] */;
  %836 = bitwise_and(%826, %827) /* ty=Tensor[(4, 12, 5), uint8] */;
  %837 = floor_divide(%832, %833) /* ty=Tensor[(1274), float64] */;
  %838 = %834.0;
  (%835, %836, %837, %838)
}

def @func_875() -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
  %842 = fn () -> (Tensor[(1274), float64], Tensor[(1274), float64]) {
    %839 = @func_785() /* ty=(Tensor[(1274), float64],) */;
    %840 = %839.0;
    %841 = @func_384() /* ty=Tensor[(1274), float64] */;
    (%840, %841)
  };
  %842() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */
}

def @func_2320() -> (Tensor[(1274), float64],) {
  %845 = fn () -> (Tensor[(1274), float64],) {
    %843 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
    %844 = %843.0;
    (%844,)
  };
  %845() /* ty=(Tensor[(1274), float64],) */
}

def @func_1231() -> (Tensor[(4, 12, 5), bool],) {
  @func_1229() /* ty=(Tensor[(4, 12, 5), bool],) */
}

def @func_2941(%var_2939: Tensor[(1274), int8]) -> (Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) {
  @func_2938(%var_2939) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */
}

def @func_8351(%var_8350: Tensor[(1456), float64]) -> (Tensor[(7, 14, 13), float32], Tensor[(1456), float64], Tensor[(1456), float64]) {
  %851 = fn (%var_8347: Tensor[(1456), float64]) -> (Tensor[(7, 14, 13), float32], Tensor[(1456), float64], Tensor[(1456), float64]) {
    %846 = cast(%var_8347, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %847 = reshape(%846, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %848 = @func_1796(%847) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %849 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
    %850 = %848.1;
    (%849, %850, %var_8347)
  };
  %851(%var_8350) /* ty=(Tensor[(7, 14, 13), float32], Tensor[(1456), float64], Tensor[(1456), float64]) */
}

def @func_6964(%var_6935: Tensor[(10, 2, 7), uint16], %var_6941: Tensor[(1456), float64]) -> (Tensor[(1456), float64], Tensor[(1456), float64], Tensor[(10, 2, 7), float64], Tensor[(1274), float64]) {
  %852 = cast(%var_6941, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %853 = reshape(%852, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %854 = @func_2604(%853) /* ty=(Tensor[(1274), int64], Tensor[(7, 13, 16), float64], Tensor[(1456), float64]) */;
  %855 = cast(%var_6935, dtype="uint16") /* ty=Tensor[(10, 2, 7), uint16] */;
  %856 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 7), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %857 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 2, 7), uint16] */, dtype="uint16") /* ty=Tensor[(10, 2, 7), uint16] */;
  %858 = dyn.reshape(%855, %856, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %859 = minimum(%857, %858) /* ty=Tensor[(10, 2, 7), uint16] */;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(10, 2, 7), float64] */;
  %861 = @func_2679() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(7, 14, 13), float32], Tensor[(1274), float64], Tensor[(14, 16, 6), float32], Tensor[(1456), float64]) */;
  %862 = %854.2;
  %863 = sinh(%860) /* ty=Tensor[(10, 2, 7), float64] */;
  %864 = %861.2;
  (%862, %var_6941, %863, %864)
}

def @func_3574() -> Tensor[(1274), float32] {
  %865 = @func_397() /* ty=Tensor[(1274), float64] */;
  %866 = cast(%865, dtype="float32") /* ty=Tensor[(1274), float32] */;
  sinh(%866) /* ty=Tensor[(1274), float32] */
}

def @func_398() -> Tensor[(1274), float64] {
  %867 = fn () -> Tensor[(1274), float64] {
    @func_384() /* ty=Tensor[(1274), float64] */
  };
  %867() /* ty=Tensor[(1274), float64] */
}

def @func_645() -> (Tensor[(1274), float64],) {
  @func_643() /* ty=(Tensor[(1274), float64],) */
}

def @func_4626(%var_4624: Tensor[(7, 14, 13), uint32]) -> (Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), float32], Tensor[(7, 14, 13), uint32]) {
  @func_4623(%var_4624) /* ty=(Tensor[(7, 14, 13), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), float32], Tensor[(7, 14, 13), uint32]) */
}

def @func_7896(%var_7888: Tensor[(784, 2), bool]) -> (Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1, 1568), bool], Tensor[(784, 2), bool], Tensor[(4, 12, 5), bool]) {
  %868 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
  %869 = cast(%868, dtype="float64") /* ty=Tensor[(7, 14, 13), float64] */;
  %870 = reshape(%869, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %871 = @func_5232(%870) /* ty=(Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) */;
  %872 = cast(%var_7888, dtype="bool") /* ty=Tensor[(784, 2), bool] */;
  %873 = reshape(%872, newshape=[1, 1568]) /* ty=Tensor[(1, 1568), bool] */;
  %874 = @func_7721(%873) /* ty=(Tensor[(4, 12, 5), bool], Tensor[(1274), float64], Tensor[(1, 1568), bool]) */;
  %875 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  %876 = %871.2;
  %877 = %874.2;
  %878 = @func_5932() /* ty=Tensor[(4, 12, 5), bool] */;
  (%868, %875, %876, %877, %var_7888, %878)
}

def @func_7794() -> (Tensor[(1274), float64],) {
  %879 = @func_397() /* ty=Tensor[(1274), float64] */;
  (%879,)
}

def @func_5105() -> (Tensor[(4, 12, 5), bool], Tensor[(1274), float64]) {
  %880 = @func_1692() /* ty=Tensor[(4, 12, 5), bool] */;
  %881 = @func_4262() /* ty=Tensor[(1274), float64] */;
  (%880, %881)
}

def @func_9338() -> Tensor[(4, 12, 5), bool] {
  @func_9336() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_7899(%var_7897: Tensor[(784, 2), bool]) -> (Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1, 1568), bool], Tensor[(784, 2), bool], Tensor[(4, 12, 5), bool]) {
  @func_7896(%var_7897) /* ty=(Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1, 1568), bool], Tensor[(784, 2), bool], Tensor[(4, 12, 5), bool]) */
}

def @func_2797() -> (Tensor[(1274), int8], Tensor[(1274), bool]) {
  %886 = fn () -> (Tensor[(1274), int8], Tensor[(1274), bool]) {
    %882 = @func_415() /* ty=(Tensor[(1274), int8],) */;
    %883 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
    %884 = %882.0;
    %885 = %883.0;
    (%884, %885)
  };
  %886() /* ty=(Tensor[(1274), int8], Tensor[(1274), bool]) */
}

def @func_2512() -> Tensor[(1274), int8] {
  @func_2510() /* ty=Tensor[(1274), int8] */
}

def @func_5591(%var_5589: Tensor[(12, 12, 16), uint8], %var_5590: Tensor[(12, 12, 16), uint8]) -> (Tensor[(12, 12, 16), bool], Tensor[(12, 12, 16), float32], Tensor[(1456), float64], Tensor[(1456), float64]) {
  @func_5587(%var_5589, %var_5590) /* ty=(Tensor[(12, 12, 16), bool], Tensor[(12, 12, 16), float32], Tensor[(1456), float64], Tensor[(1456), float64]) */
}

def @func_1229() -> (Tensor[(4, 12, 5), bool],) {
  %887 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
  (%887,)
}

def @func_7822() -> (Tensor[(1274), float64],) {
  @func_7820() /* ty=(Tensor[(1274), float64],) */
}

def @func_8377() -> (Tensor[(1274), float64],) {
  %888 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
  %889 = %888.0;
  (%889,)
}

def @func_9550() -> Tensor[(1274), float64] {
  @func_9548() /* ty=Tensor[(1274), float64] */
}

def @func_1693() -> Tensor[(4, 12, 5), bool] {
  %891 = fn () -> Tensor[(4, 12, 5), bool] {
    %890 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %890.1
  };
  %891() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_2697() -> Tensor[(1274), bool] {
  %892 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %892.0
}

def @func_4760(%var_4736: Tensor[(1, 16, 5), float32], %var_4752: Tensor[(1274), int8]) -> (Tensor[(?, 16, 5), uint8], Tensor[(9, 5), float64], Tensor[(1274), int8]) {
  %893 = cast(%var_4736, dtype="float32") /* ty=Tensor[(1, 16, 5), float32] */;
  %894 = cos(%893) /* ty=Tensor[(1, 16, 5), float32] */;
  %895 = cast(%var_4736, dtype="uint8") /* ty=Tensor[(1, 16, 5), uint8] */;
  %896 = shape_of(%894, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%894, dtype="uint8") /* ty=Tensor[(1, 16, 5), uint8] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %899 = cast(%var_4752, dtype="int8") /* ty=Tensor[(1274), int8] */;
  %900 = reshape(%899, newshape=[1274]) /* ty=Tensor[(1274), int8] */;
  %901 = @func_2938(%900) /* ty=(Tensor[(9, 5), float64], Tensor[(7, 14, 13), float32], Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), int32]) */;
  %902 = subtract(%897, %898) /* ty=Tensor[(?, 16, 5), uint8] */;
  %903 = %901.0;
  (%902, %903, %var_4752)
}

def @func_438(%var_436: Tensor[(7, 13, 16), float64], %var_437: Tensor[(7, 13, 16), float64]) -> Tensor[(7, 13, 16), float64] {
  %908 = fn (%var_425: Tensor[(7, 13, 16), float64], %var_426: Tensor[(7, 13, 16), float64]) -> Tensor[(7, 13, 16), float64] {
    %904 = cast(%var_426, dtype="float64") /* ty=Tensor[(7, 13, 16), float64] */;
    %905 = shape_of(%var_425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %906 = cast(%var_425, dtype="float64") /* ty=Tensor[(7, 13, 16), float64] */;
    %907 = dyn.reshape(%904, %905, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    floor_divide(%906, %907) /* ty=Tensor[(7, 13, 16), float64] */
  };
  %908(%var_436, %var_437) /* ty=Tensor[(7, 13, 16), float64] */
}

def @func_8972() -> (Tensor[(4, 12, 5), float64], Tensor[(13, 117), float32]) {
  %909 = @func_3124() /* ty=Tensor[(4, 12, 5), float64] */;
  %910 = @func_6470() /* ty=Tensor[(13, 117), float32] */;
  (%909, %910)
}

def @func_386() -> Tensor[(1274), float64] {
  @func_384() /* ty=Tensor[(1274), float64] */
}

def @func_9105() -> (Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) {
  %915 = fn () -> (Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) {
    %911 = @func_3049() /* ty=(Tensor[(14, 16, 6), float32],) */;
    %912 = @func_2804() /* ty=Tensor[(7, 14, 13), float32] */;
    %913 = @func_555() /* ty=Tensor[(4, 12, 5), bool] */;
    %914 = %911.0;
    (%912, %913, %914)
  };
  %915() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) */
}

def @func_9605(%var_9604: Tensor[(13, 117), float32]) -> (Tensor[(4, 12, 5), uint8], Tensor[(7, 14, 13), float32], Tensor[(13, 117), float32]) {
  %926 = fn (%var_9575: Tensor[(13, 117), float32]) -> (Tensor[(4, 12, 5), uint8], Tensor[(7, 14, 13), float32], Tensor[(13, 117), float32]) {
    %916 = @func_3227() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(4, 12, 5), uint8]) */;
    %917 = @func_9104() /* ty=(Tensor[(7, 14, 13), float32], Tensor[(4, 12, 5), bool], Tensor[(14, 16, 6), float32]) */;
    %918 = @func_6470() /* ty=Tensor[(13, 117), float32] */;
    %919 = cast(%var_9575, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
    %920 = shape_of(%918, dtype="int32") /* ty=Tensor[(2), int32] */;
    %921 = cast(%918, dtype="float32") /* ty=Tensor[(13, 117), float32] */;
    %922 = dyn.reshape(%919, %920, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %923 = %916.1;
    %924 = %917.0;
    %925 = floor_divide(%921, %922) /* ty=Tensor[(13, 117), float32] */;
    (%923, %924, %925)
  };
  %926(%var_9604) /* ty=(Tensor[(4, 12, 5), uint8], Tensor[(7, 14, 13), float32], Tensor[(13, 117), float32]) */
}

def @func_9394() -> (Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1274), int8]) {
  @func_9392() /* ty=(Tensor[(4, 12, 5), float64], Tensor[(1274), int8], Tensor[(1274), int8]) */
}

def @func_643() -> (Tensor[(1274), float64],) {
  %927 = @func_397() /* ty=Tensor[(1274), float64] */;
  %928 = @func_384() /* ty=Tensor[(1274), float64] */;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %930 = shape_of(%927, dtype="int32") /* ty=Tensor[(1), int32] */;
  %931 = cast(%927, dtype="float64") /* ty=Tensor[(1274), float64] */;
  %932 = dyn.reshape(%929, %930, newshape=[]) /* ty=Tensor[(?), float64] */;
  %933 = floor_mod(%931, %932) /* ty=Tensor[(1274), float64] */;
  (%933,)
}

def @func_7020() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32]) {
  @func_7018() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32]) */
}

def @func_9336() -> Tensor[(4, 12, 5), bool] {
  @func_9207() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_1661(%var_1630: Tensor[(8, 14, 14), bool], %var_1631: Tensor[(8, 14, 14), bool]) -> (Tensor[(8, 14, 14), bool], Tensor[(1274), float64], Tensor[(1274), float64]) {
  %934 = cast(%var_1631, dtype="bool") /* ty=Tensor[(8, 14, 14), bool] */;
  %935 = shape_of(%var_1630, dtype="int32") /* ty=Tensor[(3), int32] */;
  %936 = cast(%var_1630, dtype="bool") /* ty=Tensor[(8, 14, 14), bool] */;
  %937 = dyn.reshape(%934, %935, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %938 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %939 = logical_and(%936, %937) /* ty=Tensor[(8, 14, 14), bool] */;
  %940 = %938.0;
  %941 = @func_397() /* ty=Tensor[(1274), float64] */;
  (%939, %940, %941)
}

def @main(%var_9667: Tensor[(8, 1, 5), float64], %var_9668: Tensor[(8, 14, 5), float64]) -> Tensor[(8, 14, 5), float64] {
  %942 = cast(%var_9667, dtype="float64") /* ty=Tensor[(8, 1, 5), float64] */;
  %943 = cast(%var_9668, dtype="float64") /* ty=Tensor[(8, 14, 5), float64] */;
  maximum(%942, %943) /* ty=Tensor[(8, 14, 5), float64] */
}

def @func_7858() -> (Tensor[(1274), float64],) {
  %944 = @func_4262() /* ty=Tensor[(1274), float64] */;
  (%944,)
}

def @func_9170() -> (Tensor[(1274), float64], Tensor[(1274), float32], Tensor[(9, 13, 13), bool], Tensor[(3, 2, 5), bool], Tensor[(30), uint8]) {
  %945 = @func_8251() /* ty=(Tensor[(1274), float64],) */;
  %946 = @func_7354() /* ty=(Tensor[(9, 13, 13), bool],) */;
  %947 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %948 = cast(meta[relay.Constant][31] /* ty=Tensor[(30), uint8] */, dtype="uint8") /* ty=Tensor[(30), uint8] */;
  %949 = reshape(%947, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), uint8] */;
  %950 = reshape(%948, newshape=[3, 2, 5]) /* ty=Tensor[(3, 2, 5), uint8] */;
  %951 = @func_3170(%949, %950) /* ty=(Tensor[(3, 2, 5), bool], Tensor[(3, 2, 5), bool]) */;
  %952 = %945.0;
  %953 = @func_7964() /* ty=Tensor[(1274), float32] */;
  %954 = %946.0;
  %955 = %951.1;
  (%952, %953, %954, %955, meta[relay.Constant][31] /* ty=Tensor[(30), uint8] */)
}

def @func_6667(%var_6620: Tensor[(91, 14), float64]) -> (Tensor[(4, 12, 5), bool], Tensor[(91, 14), float64], Tensor[(1274), bool], Tensor[(91, 14), float32]) {
  %956 = @func_3598() /* ty=(Tensor[(4, 12, 5), bool],) */;
  %957 = cast(%var_6620, dtype="float64") /* ty=Tensor[(91, 14), float64] */;
  %958 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(91, 14), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %959 = cast(meta[relay.Constant][32] /* ty=Tensor[(91, 14), float64] */, dtype="float64") /* ty=Tensor[(91, 14), float64] */;
  %960 = dyn.reshape(%957, %958, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %961 = cast(meta[relay.Constant][32] /* ty=Tensor[(91, 14), float64] */, dtype="float64") /* ty=Tensor[(91, 14), float64] */;
  %962 = reshape(%961, newshape=[1274]) /* ty=Tensor[(1274), float64] */;
  %963 = @func_5232(%962) /* ty=(Tensor[(1274), float32], Tensor[(4, 12, 5), float64], Tensor[(1274), int8]) */;
  %964 = %963.0;
  %965 = cast(%var_6620, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %966 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(91, 14), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %967 = cast(meta[relay.Constant][32] /* ty=Tensor[(91, 14), float64] */, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %968 = dyn.reshape(%965, %966, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %969 = mod(%967, %968) /* ty=Tensor[(91, 14), float32] */;
  %970 = cast(%969, dtype="bool") /* ty=Tensor[(91, 14), bool] */;
  %971 = shape_of(%964, dtype="int32") /* ty=Tensor[(1), int32] */;
  %972 = cast(%964, dtype="bool") /* ty=Tensor[(1274), bool] */;
  %973 = dyn.reshape(%970, %971, newshape=[]) /* ty=Tensor[(?), bool] */;
  %974 = cast(%969, dtype="bool") /* ty=Tensor[(91, 14), bool] */;
  %975 = shape_of(%var_6620, dtype="int32") /* ty=Tensor[(2), int32] */;
  %976 = cast(%var_6620, dtype="bool") /* ty=Tensor[(91, 14), bool] */;
  %977 = dyn.reshape(%974, %975, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %978 = logical_or(%976, %977) /* ty=Tensor[(91, 14), bool] */;
  %979 = cast(%var_6620, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %980 = shape_of(%978, dtype="int32") /* ty=Tensor[(2), int32] */;
  %981 = cast(%978, dtype="float32") /* ty=Tensor[(91, 14), float32] */;
  %982 = dyn.reshape(%979, %980, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %983 = %956.0;
  %984 = power(%959, %960) /* ty=Tensor[(91, 14), float64] */;
  %985 = logical_and(%972, %973) /* ty=Tensor[(1274), bool] */;
  %986 = floor_divide(%981, %982) /* ty=Tensor[(91, 14), float32] */;
  (%983, %984, %985, %986)
}

def @func_8408() -> Tensor[(1456), float64] {
  %988 = fn () -> Tensor[(1456), float64] {
    %987 = @func_1199() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */;
    %987.2
  };
  %988() /* ty=Tensor[(1456), float64] */
}

def @func_7965() -> Tensor[(1274), float32] {
  %989 = fn () -> Tensor[(1274), float32] {
    @func_6552() /* ty=Tensor[(1274), float32] */
  };
  %989() /* ty=Tensor[(1274), float32] */
}

def @func_1200() -> (Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) {
  %999 = fn () -> (Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) {
    %990 = @func_568() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), bool]) */;
    %991 = cast(meta[relay.Constant][33] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %992 = cast(meta[relay.Constant][33] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %993 = reshape(%991, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
    %994 = reshape(%992, newshape=[7, 13, 16]) /* ty=Tensor[(7, 13, 16), float64] */;
    %995 = @func_874() /* ty=(Tensor[(1274), float64], Tensor[(1274), float64]) */;
    %996 = %990.0;
    %997 = @func_435(%993, %994) /* ty=Tensor[(7, 13, 16), float64] */;
    %998 = %995.0;
    (%996, %997, meta[relay.Constant][33] /* ty=Tensor[(1456), float64] */, %998)
  };
  %999() /* ty=(Tensor[(1274), int8], Tensor[(7, 13, 16), float64], Tensor[(1456), float64], Tensor[(1274), float64]) */
}

def @func_5934() -> Tensor[(4, 12, 5), bool] {
  @func_5932() /* ty=Tensor[(4, 12, 5), bool] */
}

def @func_9528() -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1456), float64]) {
  %1005 = fn () -> (Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1456), float64]) {
    %1000 = @func_785() /* ty=(Tensor[(1274), float64],) */;
    %1001 = @func_7018() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), float32]) */;
    %1002 = %1000.0;
    %1003 = %1001.0;
    %1004 = @func_8407() /* ty=Tensor[(1456), float64] */;
    (%1002, %1003, %1004)
  };
  %1005() /* ty=(Tensor[(1274), float64], Tensor[(4, 12, 5), bool], Tensor[(1456), float64]) */
}

def @func_8766() -> (Tensor[(1274), int8],) {
  %1006 = @func_6359() /* ty=(Tensor[(1274), int8], Tensor[(1274), float64]) */;
  %1007 = %1006.0;
  (%1007,)
}

def @func_2459() -> (Tensor[(1456), float64], Tensor[(7, 13, 16), float64]) {
  %1012 = fn () -> (Tensor[(1456), float64], Tensor[(7, 13, 16), float64]) {
    %1008 = @func_1823() /* ty=(Tensor[(1274), int8], Tensor[(4, 12, 5), float64], Tensor[(1456), float64]) */;
    %1009 = @func_1884() /* ty=(Tensor[(1274), float64], Tensor[(7, 13, 16), float64]) */;
    %1010 = %1008.2;
    %1011 = %1009.1;
    (%1010, %1011)
  };
  %1012() /* ty=(Tensor[(1456), float64], Tensor[(7, 13, 16), float64]) */
}

def @func_1426(%var_1424: Tensor[(1274), float64]) -> (Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) {
  @func_1423(%var_1424) /* ty=(Tensor[(1274), bool], Tensor[(4, 12, 5), uint8], Tensor[(1274), float64], Tensor[(1274), bool]) */
}

def @func_3704() -> (Tensor[(7, 14, 13), float32],) {
  %1015 = fn () -> (Tensor[(7, 14, 13), float32],) {
    %1013 = @func_2410() /* ty=(Tensor[(1274), float64], Tensor[(7, 14, 13), float32], Tensor[(169, 9), uint16], Tensor[(1274), float64], Tensor[(1274), int8]) */;
    %1014 = %1013.1;
    (%1014,)
  };
  %1015() /* ty=(Tensor[(7, 14, 13), float32],) */
}

def @func_2510() -> Tensor[(1274), int8] {
  %1016 = @func_1004() /* ty=(Tensor[(1274), bool], Tensor[(1274), int8], Tensor[(1274), int8]) */;
  %1016.1
}

def @func_785() -> (Tensor[(1274), float64],) {
  %1017 = @func_643() /* ty=(Tensor[(1274), float64],) */;
  %1018 = %1017.0;
  (%1018,)
}

def @func_6143() -> (Tensor[(7, 14, 13), float32],) {
  %1020 = fn () -> (Tensor[(7, 14, 13), float32],) {
    %1019 = @func_5355() /* ty=Tensor[(7, 14, 13), float32] */;
    (%1019,)
  };
  %1020() /* ty=(Tensor[(7, 14, 13), float32],) */
}

def @func_2806() -> Tensor[(7, 14, 13), float32] {
  @func_2804() /* ty=Tensor[(7, 14, 13), float32] */
}

def @func_4263() -> Tensor[(1274), float64] {
  %1021 = fn () -> Tensor[(1274), float64] {
    @func_1146() /* ty=Tensor[(1274), float64] */
  };
  %1021() /* ty=Tensor[(1274), float64] */
}

def @func_7258() -> (Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) {
  @func_7256() /* ty=(Tensor[(4, 12, 5), bool], Tensor[(4, 12, 5), bool]) */
}

def @func_3114() -> (Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) {
  @func_3112() /* ty=(Tensor[(1274), int8], Tensor[(9, 13, 13), bool], Tensor[(13, 117), uint16], Tensor[(1274), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen530/build/output.py:3289: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen530/build/output.py", line 3294, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(560) tvmgen_default_fused_maximum_kernel0(double* __restrict__ T_maximum, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_maximum[(((int)threadIdx.x))] = max(placeholder[((((((int)threadIdx.x) / 70) * 5) + (((int)threadIdx.x) % 5)))], placeholder1[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

