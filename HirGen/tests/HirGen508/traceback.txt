==========mod==========
#[version = "0.0.5"]
def @func_4722() -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) {
  %0 = @func_4558() /* ty=Tensor[(16, 5, 7), float64] */;
  %1 = cast(%0, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  %2 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %3 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %4 = sinh(%1) /* ty=Tensor[(16, 5, 7), float64] */;
  %5 = %2.0;
  %6 = %3.0;
  (%4, %5, %6)
}

def @func_6279(%var_6251: Tensor[(16, 5, 7), bool]) -> (Tensor[(16, 5, 7), uint8], Tensor[(2, 336), int16], Tensor[(1456), float64], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(4, 5, 10), float64], Tensor[(200), float64]) {
  %7 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %8 = %7.0;
  %9 = cast(%var_6251, dtype="uint8") /* ty=Tensor[(16, 5, 7), uint8] */;
  %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%8, dtype="uint8") /* ty=Tensor[(16, 5, 7), uint8] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %13 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %18 = reshape(%15, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %19 = reshape(%16, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
  %20 = reshape(%17, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %21 = @func_4044(%18, %19, %20) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %23 = reshape(%22, newshape=[4, 5, 10]) /* ty=Tensor[(4, 5, 10), float64] */;
  %24 = add(%11, %12) /* ty=Tensor[(16, 5, 7), uint8] */;
  %25 = %21.9;
  %26 = @func_2728(%23) /* ty=Tensor[(4, 5, 10), float64] */;
  (%24, %14, %25, meta[relay.Constant][0] /* ty=Tensor[(81), float64] */, meta[relay.Constant][1] /* ty=Tensor[(1456), float64] */, %26, meta[relay.Constant][2] /* ty=Tensor[(200), float64] */)
}

def @func_6726() -> (Tensor[(16, 6, 7), int16], Tensor[(16, 5, 7), float32]) {
  %27 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %28 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %29 = cast(%28, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %30 = %27.2;
  %31 = asinh(%29) /* ty=Tensor[(16, 5, 7), float32] */;
  (%30, %31)
}

def @func_5317() -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %32 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %33 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %34 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %35 = %32.0;
  %36 = %33.0;
  %37 = %34.0;
  (%35, %36, %37)
}

def @func_3905() -> Tensor[(16, 5, 7), bool] {
  @func_3479() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_5725() -> Tensor[(16, 5, 7), bool] {
  %38 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %38.0
}

def @func_8894() -> (Tensor[(16, 5, 7), bool],) {
  %39 = @func_8724() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], bool) */;
  %40 = %39.1;
  (%40,)
}

def @func_1876(%var_1852: Tensor[(3, 16, 8), float64], %var_1853: Tensor[(3, 16, 8), float64], %var_1868: Tensor[(96), float32], %var_1869: bool) -> (Tensor[(3, 16, 8), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64], bool, Tensor[(96), float32], bool, Tensor[(225), bool], Tensor[(50), uint32], Tensor[(7, 84), bool]) {
  %41 = cast(%var_1853, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
  %42 = shape_of(%var_1852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %43 = cast(%var_1852, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %45 = cast(meta[relay.Constant][3] /* ty=Tensor[(13), uint64] */, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %46 = cast(meta[relay.Constant][3] /* ty=Tensor[(13), uint64] */, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %47 = reshape(%45, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %48 = reshape(%46, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %49 = cast(%var_1868, dtype="float32") /* ty=Tensor[(96), float32] */;
  %50 = cast(%var_1868, dtype="float32") /* ty=Tensor[(96), float32] */;
  %51 = cast(%var_1869, dtype="bool") /* ty=bool */;
  %52 = cast(meta[relay.Constant][4] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %53 = cast(meta[relay.Constant][5] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
  %54 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 84), bool] */, dtype="bool") /* ty=Tensor[(7, 84), bool] */;
  %55 = reshape(%49, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
  %56 = reshape(%50, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
  %57 = reshape(%51, newshape=[]) /* ty=bool */;
  %58 = reshape(%52, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %59 = reshape(%53, newshape=[50]) /* ty=Tensor[(50), uint32] */;
  %60 = reshape(%54, newshape=[14, 7, 6]) /* ty=Tensor[(14, 7, 6), bool] */;
  %61 = @func_849(%55, %56, %57, %58, %59, %60) /* ty=(Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) */;
  %62 = mod(%43, %44) /* ty=Tensor[(3, 16, 8), float64] */;
  %63 = @func_1627(%47, %48) /* ty=Tensor[(?, 13), uint64] */;
  %64 = %61.1;
  (%62, %63, meta[relay.Constant][3] /* ty=Tensor[(13), uint64] */, %64, %var_1868, %var_1869, meta[relay.Constant][4] /* ty=Tensor[(225), bool] */, meta[relay.Constant][5] /* ty=Tensor[(50), uint32] */, meta[relay.Constant][6] /* ty=Tensor[(7, 84), bool] */)
}

def @func_1073(%var_1037: Tensor[(16, 2, 15), float32], %var_1064: Tensor[(16, 2, 15), float32]) -> (Tensor[(16, 2, 15), bool], Tensor[(16, 2, 15), int8]) {
  %65 = cast(%var_1037, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
  %66 = atanh(%65) /* ty=Tensor[(16, 2, 15), float32] */;
  %67 = cast(%var_1037, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
  %68 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %69 = cast(%66, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
  %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %71 = cast(%var_1064, dtype="int8") /* ty=Tensor[(16, 2, 15), int8] */;
  %72 = shape_of(%var_1037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%var_1037, dtype="int8") /* ty=Tensor[(16, 2, 15), int8] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %75 = equal(%69, %70) /* ty=Tensor[(16, 2, 15), bool] */;
  %76 = left_shift(%73, %74) /* ty=Tensor[(16, 2, 15), int8] */;
  (%75, %76)
}

def @func_5057() -> (Tensor[(16, 5, 7), float64],) {
  %77 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %78 = %77.0;
  (%78,)
}

def @func_8391(%var_8351: Tensor[(13, 4, 16), int64], %var_8372: Tensor[(13, 4, 16), float64], %var_8377: Tensor[(112), int16]) -> (Tensor[(13, 4, 16), int64], Tensor[(16, 5, 7), bool], Tensor[(13, 4, 16), int8], Tensor[(672), int16], Tensor[(112), int16], Tensor[(13, 4, 16), float64]) {
  %79 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 4, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 4, 16), int64] */;
  %80 = shape_of(%var_8351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %81 = cast(%var_8351, dtype="int64") /* ty=Tensor[(13, 4, 16), int64] */;
  %82 = dyn.reshape(%79, %80, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %83 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %84 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 4, 16), int64] */, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %85 = cos(%84) /* ty=Tensor[(13, 4, 16), float64] */;
  %86 = cast(%var_8372, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %87 = shape_of(%85, dtype="int32") /* ty=Tensor[(3), int32] */;
  %88 = cast(%85, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
  %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %90 = cast(%var_8377, dtype="int16") /* ty=Tensor[(112), int16] */;
  %91 = cast(%var_8377, dtype="int16") /* ty=Tensor[(112), int16] */;
  %92 = reshape(%90, newshape=[56, 2]) /* ty=Tensor[(56, 2), int16] */;
  %93 = reshape(%91, newshape=[56, 2]) /* ty=Tensor[(56, 2), int16] */;
  %94 = @func_7859(%92, %93) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 6, 7), int16], Tensor[(672), int16], Tensor[(56, 2), uint64]) */;
  %95 = cast(%85, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
  %96 = log10(%95) /* ty=Tensor[(13, 4, 16), float32] */;
  %97 = cast(%96, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
  %98 = subtract(%81, %82) /* ty=Tensor[(13, 4, 16), int64] */;
  %99 = %83.0;
  %100 = left_shift(%88, %89) /* ty=Tensor[(13, 4, 16), int8] */;
  %101 = %94.2;
  %102 = atan(%97) /* ty=Tensor[(13, 4, 16), float64] */;
  (%98, %99, %100, %101, %var_8377, %102)
}

def @func_5545() -> Tensor[(2, 336), int16] {
  %103 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %103.1
}

def @func_5794(%var_5772: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), int16],) {
  %104 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %105 = cast(%var_5772, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
  %106 = shape_of(%104, dtype="int32") /* ty=Tensor[(2), int32] */;
  %107 = cast(%104, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %109 = minimum(%107, %108) /* ty=Tensor[(2, 336), int16] */;
  (%109,)
}

def @func_8574() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64]) {
  %110 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %111 = %110.0;
  %112 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %113 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
  (%111, %112, %113)
}

def @func_9237(%var_9209: Tensor[(16, 5, 7), bool]) -> (Tensor[(16, 5, 7), int32], Tensor[(16, 5, 7), bool]) {
  %114 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %115 = %114.0;
  %116 = cast(%var_9209, dtype="int32") /* ty=Tensor[(16, 5, 7), int32] */;
  %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
  %118 = cast(%115, dtype="int32") /* ty=Tensor[(16, 5, 7), int32] */;
  %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %120 = @func_6216() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %121 = subtract(%118, %119) /* ty=Tensor[(16, 5, 7), int32] */;
  %122 = %120.0;
  (%121, %122)
}

def @func_8484(%var_8455: uint16, %var_8456: Tensor[(13, 9, 7), uint16], %var_8466: Tensor[(225), bool], %var_8473: Tensor[(13, 9, 7), uint16]) -> (Tensor[(13, 9, 7), uint16], Tensor[(16, 5, 7), float64], Tensor[(250), uint32], Tensor[(96), float32], Tensor[(225), bool], Tensor[(50), uint32], Tensor[(588), bool], Tensor[(13, 9, 7), bool]) {
  %123 = cast(%var_8455, dtype="uint16") /* ty=uint16 */;
  %124 = cast(%var_8456, dtype="uint16") /* ty=Tensor[(13, 9, 7), uint16] */;
  %125 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %127 = cast(%var_8455, dtype="bool") /* ty=bool */;
  %128 = cast(%var_8466, dtype="bool") /* ty=Tensor[(225), bool] */;
  %129 = cast(meta[relay.Constant][9] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
  %130 = cast(meta[relay.Constant][10] /* ty=Tensor[(588), bool] */, dtype="bool") /* ty=Tensor[(588), bool] */;
  %131 = reshape(%125, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
  %132 = reshape(%126, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
  %133 = reshape(%127, newshape=[]) /* ty=bool */;
  %134 = reshape(%128, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %135 = reshape(%129, newshape=[50]) /* ty=Tensor[(50), uint32] */;
  %136 = reshape(%130, newshape=[14, 7, 6]) /* ty=Tensor[(14, 7, 6), bool] */;
  %137 = @func_849(%131, %132, %133, %134, %135, %136) /* ty=(Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) */;
  %138 = cast(%var_8473, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %139 = shape_of(%var_8456, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(%var_8456, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = bitwise_or(%123, %124) /* ty=Tensor[(13, 9, 7), uint16] */;
  %143 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
  %144 = %137.8;
  %145 = logical_and(%140, %141) /* ty=Tensor[(13, 9, 7), bool] */;
  (%142, %143, %144, meta[relay.Constant][8] /* ty=Tensor[(96), float32] */, %var_8466, meta[relay.Constant][9] /* ty=Tensor[(50), uint32] */, meta[relay.Constant][10] /* ty=Tensor[(588), bool] */, %145)
}

def @func_6436(%var_6386: Tensor[(8, 11, 7), float32], %var_6413: Tensor[(5, 45), bool]) -> (Tensor[(8, 11, 7), uint64], Tensor[(16, 5, 7), float64], Tensor[(225), bool], Tensor[(5, 45), bool], Tensor[(16, 5, 7), bool]) {
  %146 = cast(%var_6386, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %147 = atan(%146) /* ty=Tensor[(8, 11, 7), float32] */;
  %148 = cast(%var_6386, dtype="uint64") /* ty=Tensor[(8, 11, 7), uint64] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%147, dtype="uint64") /* ty=Tensor[(8, 11, 7), uint64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %152 = cast(%var_6413, dtype="bool") /* ty=Tensor[(5, 45), bool] */;
  %153 = reshape(%152, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %154 = @func_5534(%153) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */;
  %155 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %156 = minimum(%150, %151) /* ty=Tensor[(8, 11, 7), uint64] */;
  %157 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %158 = %154.3;
  %159 = %155.0;
  (%156, %157, %158, %var_6413, %159)
}

def @func_8762(%var_8743: Tensor[(2, 1, 1), float64]) -> Tensor[(2, 1, 1), float64] {
  %160 = cast(%var_8743, dtype="float64") /* ty=Tensor[(2, 1, 1), float64] */;
  log2(%160) /* ty=Tensor[(2, 1, 1), float64] */
}

def @func_3681(%var_3664: Tensor[(8, 12), float32]) -> (Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) {
  %161 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %162 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %163 = cast(meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %164 = cast(%var_3664, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %165 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %166 = reshape(%162, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float64] */;
  %167 = reshape(%163, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float64] */;
  %168 = reshape(%164, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %169 = reshape(%165, newshape=[]) /* ty=bool */;
  %170 = @func_1876(%166, %167, %168, %169) /* ty=(Tensor[(3, 16, 8), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64], bool, Tensor[(96), float32], bool, Tensor[(225), bool], Tensor[(50), uint32], Tensor[(7, 84), bool]) */;
  %171 = %161.0;
  %172 = %170.1;
  (%171, %172, meta[relay.Constant][11] /* ty=Tensor[(384), float64] */, %var_3664, False /* ty=bool */)
}

def @func_3935(%var_3932: Tensor[(432), int16]) -> (Tensor[(16, 6, 7), int16], Tensor[(2, 336), int16], Tensor[(432), int16]) {
  %173 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %174 = cast(%var_3932, dtype="int16") /* ty=Tensor[(432), int16] */;
  %175 = cast(%var_3932, dtype="int16") /* ty=Tensor[(432), int16] */;
  %176 = reshape(%174, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %177 = reshape(%175, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %178 = @func_3450(%176, %177) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */;
  %179 = %173.2;
  %180 = %178.1;
  (%179, %180, %var_3932)
}

def @func_3946() -> (Tensor[(16, 5, 7), bool],) {
  %181 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%181,)
}

def @func_3607(%var_3504: Tensor[(3, 1, 3), float64], %var_3550: Tensor[(672), int16], %var_3560: Tensor[(56), int32], %var_3605: Tensor[(13), uint64]) -> (Tensor[(3, ?, 3), float64], Tensor[(3, 1, 3), int32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 2, 2), bool], Tensor[(56), int32], Tensor[(3, ?, 3), float32], Tensor[(14, 7, 6), float32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(81), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64]) {
  %182 = cast(%var_3504, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %183 = exp(%182) /* ty=Tensor[(3, 1, 3), float32] */;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %185 = shape_of(%var_3504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_3504, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %188 = cast(%var_3504, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %189 = erf(%188) /* ty=Tensor[(3, 1, 3), float64] */;
  %190 = cast(%189, dtype="int32") /* ty=Tensor[(3, 1, 3), int32] */;
  %191 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %192 = cast(meta[relay.Constant][12] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %193 = cast(%var_3550, dtype="int16") /* ty=Tensor[(672), int16] */;
  %194 = reshape(%192, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %195 = reshape(%193, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %196 = @func_592(%194, %195) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %197 = cast(%var_3560, dtype="int32") /* ty=Tensor[(56), int32] */;
  %198 = reshape(%197, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), int32] */;
  %199 = @func_2207(%198) /* ty=(Tensor[(14, 2, 2), bool],) */;
  %200 = cast(%189, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %201 = shape_of(%183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%183, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %204 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %205 = reshape(%204, newshape=[]) /* ty=bool */;
  %206 = @func_300(%205) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %207 = %206.0;
  %208 = cast(%207, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %210 = %196.0;
  %211 = cast(%210, dtype="int16") /* ty=Tensor[(16, 6, 7), int16] */;
  %212 = reshape(%209, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %213 = reshape(%211, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %214 = @func_592(%212, %213) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %216 = cast(meta[relay.Constant][12] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %217 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %218 = reshape(%215, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), float64] */;
  %219 = reshape(%216, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %220 = reshape(%217, newshape=[]) /* ty=bool */;
  %221 = @func_1747(%218, %219, %220) /* ty=(Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) */;
  %222 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %223 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %224 = reshape(%222, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %225 = reshape(%223, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %226 = floor_divide(%186, %187) /* ty=Tensor[(3, ?, 3), float64] */;
  %227 = left_shift(%190, %191) /* ty=Tensor[(3, 1, 3), int32] */;
  %228 = %199.0;
  %229 = mod(%202, %203) /* ty=Tensor[(3, ?, 3), float32] */;
  %230 = atanh(%208) /* ty=Tensor[(14, 7, 6), float32] */;
  %231 = %214.0;
  %232 = %221.2;
  %233 = @func_1627(%224, %225) /* ty=Tensor[(?, 13), uint64] */;
  (%226, %227, %210, meta[relay.Constant][12] /* ty=Tensor[(112), int16] */, %var_3550, %228, %var_3560, %229, %230, %231, %232, meta[relay.Constant][13] /* ty=Tensor[(81), float64] */, %233, %var_3605)
}

def @func_4962(%var_4949: Tensor[(25, 9), bool]) -> (Tensor[(?, 13), uint64], Tensor[(1, 96), float32], Tensor[(2, 336), bool], bool, Tensor[(25, 9), bool]) {
  %234 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
  %235 = reshape(%234, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %236 = @func_3681(%235) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) */;
  %237 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %238 = %237.2;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %240 = log10(%239) /* ty=Tensor[(2, 336), float32] */;
  %241 = cast(%238, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %242 = shape_of(%240, dtype="int32") /* ty=Tensor[(2), int32] */;
  %243 = cast(%240, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %245 = logical_and(%243, %244) /* ty=Tensor[(2, 336), bool] */;
  %246 = cast(%245, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %247 = shape_of(%240, dtype="int32") /* ty=Tensor[(2), int32] */;
  %248 = cast(%240, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %250 = subtract(%248, %249) /* ty=Tensor[(2, 336), uint64] */;
  %251 = cast(%240, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %252 = shape_of(%250, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%250, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %255 = cast(%var_4949, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
  %256 = reshape(%255, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %257 = @func_633(%256) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %258 = %236.1;
  %259 = equal(%253, %254) /* ty=Tensor[(2, 336), bool] */;
  %260 = %257.2;
  (%258, meta[relay.Constant][14] /* ty=Tensor[(1, 96), float32] */, %259, %260, %var_4949)
}

def @func_4410(%var_4361: Tensor[(6, 4, 10), float64], %var_4366: Tensor[(225, 1), bool]) -> (Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) {
  %261 = cast(%var_4366, dtype="bool") /* ty=Tensor[(225, 1), bool] */;
  %262 = reshape(%261, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %263 = @func_633(%262) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %264 = cast(%var_4361, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %265 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %266 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %267 = dyn.reshape(%264, %265, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %268 = divide(%266, %267) /* ty=Tensor[(6, 4, 10), float64] */;
  %269 = cast(%268, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %271 = reshape(%270, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %272 = @func_3090(%271) /* ty=(Tensor[(13, 7, 16), float64],) */;
  %273 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %274 = %263.1;
  %275 = log10(%269) /* ty=Tensor[(6, 4, 10), float64] */;
  %276 = %272.0;
  %277 = %273.4;
  (%274, %var_4366, %275, %276, meta[relay.Constant][16] /* ty=Tensor[(1456), float64] */, %277)
}

def @func_9094() -> (Tensor[(16, 5, 7), float64], Tensor[(2, 336), float32], Tensor[(672, 1), int16], Tensor[(16, 5, 7), bool]) {
  %278 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %279 = cast(meta[relay.Constant][17] /* ty=Tensor[(672, 1), int16] */, dtype="int16") /* ty=Tensor[(672, 1), int16] */;
  %280 = reshape(%279, newshape=[2, 336]) /* ty=Tensor[(2, 336), int16] */;
  %281 = @func_6472(%280) /* ty=(Tensor[(2, 336), float32], Tensor[(16, 5, 7), bool]) */;
  %282 = %278.0;
  %283 = %281.0;
  %284 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%282, %283, meta[relay.Constant][17] /* ty=Tensor[(672, 1), int16] */, %284)
}

def @func_849(%var_741: Tensor[(4, 3, 8), float32], %var_742: Tensor[(4, 3, 8), float32], %var_752: bool, %var_770: Tensor[(225), bool], %var_832: Tensor[(50), uint32], %var_838: Tensor[(14, 7, 6), bool]) -> (Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) {
  %285 = cast(%var_742, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %286 = shape_of(%var_741, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_741, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %289 = cast(%var_770, dtype="bool") /* ty=Tensor[(225), bool] */;
  %290 = reshape(%289, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %291 = @func_633(%290) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %292 = cast(%var_752, dtype="bool") /* ty=bool */;
  %293 = reshape(%292, newshape=[]) /* ty=bool */;
  %294 = @func_300(%293) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %295 = %294.0;
  %296 = cast(%295, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
  %297 = rsqrt(%296) /* ty=Tensor[(14, 7, 6), float64] */;
  %298 = cast(%var_752, dtype="bool") /* ty=bool */;
  %299 = reshape(%298, newshape=[]) /* ty=bool */;
  %300 = @func_300(%299) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %301 = %300.0;
  %302 = cast(%301, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
  %303 = shape_of(%297, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%297, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %306 = cast(%var_752, dtype="bool") /* ty=bool */;
  %307 = reshape(%306, newshape=[]) /* ty=bool */;
  %308 = @func_300(%307) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %309 = cast(%var_832, dtype="uint32") /* ty=Tensor[(50), uint32] */;
  %310 = cast(meta[relay.Constant][18] /* ty=Tensor[(250), uint32] */, dtype="uint32") /* ty=Tensor[(250), uint32] */;
  %311 = reshape(%309, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), uint32] */;
  %312 = reshape(%310, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), uint32] */;
  %313 = cast(%var_838, dtype="int16") /* ty=Tensor[(14, 7, 6), int16] */;
  %314 = shape_of(%295, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%295, dtype="int16") /* ty=Tensor[(14, 7, 6), int16] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %317 = floor_divide(%287, %288) /* ty=Tensor[(4, 3, 8), float32] */;
  %318 = %291.0;
  %319 = power(%304, %305) /* ty=Tensor[(14, 7, 6), float64] */;
  %320 = %308.0;
  %321 = @func_340(%311, %312) /* ty=Tensor[(5, 5, 10), bool] */;
  %322 = multiply(%315, %316) /* ty=Tensor[(14, 7, 6), int16] */;
  (%317, %var_752, %318, %var_770, %319, %320, %321, %var_832, meta[relay.Constant][18] /* ty=Tensor[(250), uint32] */, %322)
}

def @func_2207(%var_2195: Tensor[(14, 2, 2), int32]) -> (Tensor[(14, 2, 2), bool],) {
  %323 = cast(%var_2195, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %324 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(14, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %325 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 2, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
  %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %327 = less_equal(%325, %326) /* ty=Tensor[(14, 2, 2), bool] */;
  (%327,)
}

def @func_7859(%var_7845: Tensor[(56, 2), int16], %var_7850: Tensor[(56, 2), int16]) -> (Tensor[(16, 5, 7), bool], Tensor[(16, 6, 7), int16], Tensor[(672), int16], Tensor[(56, 2), uint64]) {
  %328 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %329 = cast(%var_7845, dtype="int16") /* ty=Tensor[(56, 2), int16] */;
  %330 = cast(meta[relay.Constant][20] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %331 = reshape(%329, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %332 = reshape(%330, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %333 = @func_592(%331, %332) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %334 = cast(%var_7850, dtype="uint64") /* ty=Tensor[(56, 2), uint64] */;
  %335 = shape_of(%var_7845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%var_7845, dtype="uint64") /* ty=Tensor[(56, 2), uint64] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %338 = %328.0;
  %339 = %333.0;
  %340 = subtract(%336, %337) /* ty=Tensor[(56, 2), uint64] */;
  (%338, %339, meta[relay.Constant][20] /* ty=Tensor[(672), int16] */, %340)
}

def @func_6472(%var_6451: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), float32], Tensor[(16, 5, 7), bool]) {
  %341 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %342 = %341.1;
  %343 = cast(%var_6451, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(2), int32] */;
  %345 = cast(%342, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %347 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %348 = mod(%345, %346) /* ty=Tensor[(2, 336), float32] */;
  %349 = %347.0;
  (%348, %349)
}

def @func_5534(%var_5516: Tensor[(225), bool]) -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) {
  %350 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %352 = cast(%var_5516, dtype="bool") /* ty=Tensor[(225), bool] */;
  %353 = reshape(%351, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float64] */;
  %354 = reshape(%352, newshape=[225, 1]) /* ty=Tensor[(225, 1), bool] */;
  %355 = @func_4410(%353, %354) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */;
  %356 = %350.0;
  %357 = %355.5;
  (%356, %357, meta[relay.Constant][21] /* ty=Tensor[(240), float64] */, %var_5516)
}

def @func_4780() -> (Tensor[(16, 5, 7), bool],) {
  %358 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  (%358,)
}

def @func_7275(%var_7253: Tensor[(1008), float32]) -> (Tensor[(16, 5, 7), float64], Tensor[(6, 14, 12), float32], Tensor[(1008), float32], Tensor[(16, 5, 7), bool]) {
  %359 = cast(%var_7253, dtype="float32") /* ty=Tensor[(1008), float32] */;
  %360 = reshape(%359, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float32] */;
  %361 = @func_5338() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %362 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %363 = @func_2920(%360) /* ty=Tensor[(6, 14, 12), float32] */;
  %364 = %361.0;
  (%362, %363, %var_7253, %364)
}

def @func_5660(%var_5656: Tensor[(2048), int16]) -> (Tensor[(16, 5, 7), bool], Tensor[(672), int16], Tensor[(2048), int16], Tensor[(1456), float64]) {
  %365 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %366 = cast(%var_5656, dtype="int16") /* ty=Tensor[(2048), int16] */;
  %367 = cast(meta[relay.Constant][22] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %368 = reshape(%366, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), int16] */;
  %369 = reshape(%367, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %370 = @func_5619(%368, %369) /* ty=(Tensor[(8, 16, 16), int16], bool, Tensor[(14, 7, 6), float32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(27, 3), float64], Tensor[(672), int16], Tensor[(81, 1), float64], Tensor[(1456), float64]) */;
  %371 = %365.0;
  %372 = %370.8;
  (%371, %372, %var_5656, meta[relay.Constant][22] /* ty=Tensor[(1456), float64] */)
}

def @func_300(%var_282: bool) -> (Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) {
  %373 = cast(%var_282, dtype="bool") /* ty=bool */;
  %374 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(14, 7, 6), bool] */;
  %375 = cast(meta[relay.Constant][23] /* ty=Tensor[(14, 7, 6), bool] */, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %376 = logical_or(%373, %374) /* ty=Tensor[(14, 7, 6), bool] */;
  %377 = log(%375) /* ty=Tensor[(14, 7, 6), float32] */;
  (%376, %377)
}

def @func_3479() -> Tensor[(16, 5, 7), bool] {
  %378 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %378.0
}

def @func_4225() -> (Tensor[(16, 5, 7), bool],) {
  %379 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%379,)
}

def @func_7662() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %380 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %381 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %382 = %380.0;
  %383 = %381.0;
  (%382, %383)
}

def @func_6637() -> (Tensor[(16, 5, 7), bool],) {
  %384 = @func_5928() /* ty=Tensor[(16, 5, 7), bool] */;
  (%384,)
}

def @func_5366() -> Tensor[(16, 5, 7), float64] {
  %385 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  asin(%386) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_7128() -> (Tensor[(2, 336), int16],) {
  %387 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %388 = %387.2;
  (%388,)
}

def @func_8918() -> Tensor[(16, 5, 7), bool] {
  %389 = @func_8894() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %389.0
}

def @func_2920(%var_2891: Tensor[(6, 14, 12), float32]) -> Tensor[(6, 14, 12), float32] {
  %390 = cast(%var_2891, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
  cos(%390) /* ty=Tensor[(6, 14, 12), float32] */
}

def @func_5619(%var_5560: Tensor[(8, 16, 16), int16], %var_5616: Tensor[(1456), float64]) -> (Tensor[(8, 16, 16), int16], bool, Tensor[(14, 7, 6), float32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(27, 3), float64], Tensor[(672), int16], Tensor[(81, 1), float64], Tensor[(1456), float64]) {
  %391 = cast(%var_5560, dtype="int16") /* ty=Tensor[(8, 16, 16), int16] */;
  %392 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(8, 16, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 16, 16), int16] */, dtype="int16") /* ty=Tensor[(8, 16, 16), int16] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %395 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %396 = reshape(%395, newshape=[]) /* ty=bool */;
  %397 = @func_300(%396) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %398 = %397.0;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %400 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %401 = @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %402 = cast(meta[relay.Constant][25] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %403 = reshape(%402, newshape=[25, 9]) /* ty=Tensor[(25, 9), bool] */;
  %404 = @func_4962(%403) /* ty=(Tensor[(?, 13), uint64], Tensor[(1, 96), float32], Tensor[(2, 336), bool], bool, Tensor[(25, 9), bool]) */;
  %405 = cast(meta[relay.Constant][26] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %406 = cast(meta[relay.Constant][27] /* ty=Tensor[(81, 1), float64] */, dtype="float64") /* ty=Tensor[(81, 1), float64] */;
  %407 = cast(%var_5616, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %408 = reshape(%405, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %409 = reshape(%406, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
  %410 = reshape(%407, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %411 = @func_4044(%408, %409, %410) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %412 = bitwise_xor(%393, %394) /* ty=Tensor[(8, 16, 16), int16] */;
  %413 = erf(%399) /* ty=Tensor[(14, 7, 6), float32] */;
  %414 = %400.0;
  %415 = %401.0;
  %416 = %404.3;
  %417 = %411.6;
  (%412, False /* ty=bool */, %413, %414, %415, %416, meta[relay.Constant][25] /* ty=Tensor[(225), bool] */, %417, meta[relay.Constant][26] /* ty=Tensor[(672), int16] */, meta[relay.Constant][27] /* ty=Tensor[(81, 1), float64] */, %var_5616)
}

def @func_5928() -> Tensor[(16, 5, 7), bool] {
  @func_5725() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_5506() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %418 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %419 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %420 = %418.0;
  %421 = %419.0;
  (%420, %421)
}

def @func_7315(%var_7291: Tensor[(8, 15, 6), uint8]) -> (Tensor[(8, 15, 6), uint8], Tensor[(8, 15, 6), float32]) {
  %422 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 15, 6), uint8] */, dtype="uint8") /* ty=Tensor[(8, 15, 6), uint8] */;
  %423 = shape_of(%var_7291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %424 = cast(%var_7291, dtype="uint8") /* ty=Tensor[(8, 15, 6), uint8] */;
  %425 = dyn.reshape(%422, %423, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %426 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 15, 6), uint8] */, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %427 = maximum(%424, %425) /* ty=Tensor[(8, 15, 6), uint8] */;
  %428 = log(%426) /* ty=Tensor[(8, 15, 6), float32] */;
  (%427, %428)
}

def @func_4521() -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) {
  %429 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %430 = %429.0;
  %431 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  (%430, %431)
}

def @func_8191() -> (Tensor[(16, 5, 7), float64],) {
  %432 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
  (%432,)
}

def @func_3712() -> Tensor[(2, 336), int16] {
  %433 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %433.4
}

def @func_5449() -> (Tensor[(16, 5, 7), bool],) {
  %434 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %435 = %434.0;
  (%435,)
}

def @func_7326() -> (Tensor[(10, 14, 8), float32],) {
  %436 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
  %437 = sigmoid(%436) /* ty=Tensor[(10, 14, 8), float32] */;
  (%437,)
}

def @main(%var_9501: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), float32],) {
  %438 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %439 = cast(%var_9501, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(2), int32] */;
  %441 = cast(%438, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %443 = floor_divide(%441, %442) /* ty=Tensor[(2, 336), float32] */;
  (%443,)
}

def @func_4683() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) {
  %444 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %445 = cast(meta[relay.Constant][30] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %446 = reshape(%445, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %447 = @func_633(%446) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %448 = cast(meta[relay.Constant][31] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %449 = reshape(%448, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %450 = @func_3090(%449) /* ty=(Tensor[(13, 7, 16), float64],) */;
  %451 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %452 = %444.0;
  %453 = %447.2;
  %454 = %450.0;
  (%451, %452, %453, meta[relay.Constant][30] /* ty=Tensor[(225), bool] */, %454, meta[relay.Constant][31] /* ty=Tensor[(1456), float64] */)
}

def @func_9005(%var_8950: Tensor[(8, 9, 1), bool], %var_8951: Tensor[(8, 9, 16), bool]) -> (Tensor[(8, 9, 16), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(8, 9, 16), bool]) {
  %455 = cast(%var_8950, dtype="bool") /* ty=Tensor[(8, 9, 1), bool] */;
  %456 = cast(%var_8951, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
  %457 = @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %458 = cast(%var_8950, dtype="bool") /* ty=Tensor[(8, 9, 1), bool] */;
  %459 = cast(%var_8951, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
  %460 = logical_or(%455, %456) /* ty=Tensor[(8, 9, 16), bool] */;
  %461 = %457.1;
  %462 = @func_4558() /* ty=Tensor[(16, 5, 7), float64] */;
  %463 = less(%458, %459) /* ty=Tensor[(8, 9, 16), bool] */;
  (%460, %461, %462, %463)
}

def @func_4181(%var_4127: Tensor[(112), int16], %var_4165: Tensor[(13), uint64]) -> (Tensor[(112), bool], Tensor[(112), int16], Tensor[(9), float64], Tensor[(672), int16], Tensor[(56), int32], Tensor[(13), uint64], Tensor[(3, 9, 16), int16], Tensor[(432), int16]) {
  %464 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %465 = %464.3;
  %466 = cast(%var_4127, dtype="bool") /* ty=Tensor[(112), bool] */;
  %467 = shape_of(%465, dtype="int32") /* ty=Tensor[(1), int32] */;
  %468 = cast(%465, dtype="bool") /* ty=Tensor[(112), bool] */;
  %469 = dyn.reshape(%466, %467, newshape=[]) /* ty=Tensor[(?), bool] */;
  %470 = cast(meta[relay.Constant][32] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
  %471 = cast(meta[relay.Constant][33] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %472 = cast(meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
  %473 = cast(%var_4165, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %474 = reshape(%470, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
  %475 = reshape(%471, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %476 = reshape(%472, newshape=[56]) /* ty=Tensor[(56), int32] */;
  %477 = reshape(%473, newshape=[13]) /* ty=Tensor[(13), uint64] */;
  %478 = @func_3607(%474, %475, %476, %477) /* ty=(Tensor[(3, ?, 3), float64], Tensor[(3, 1, 3), int32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 2, 2), bool], Tensor[(56), int32], Tensor[(3, ?, 3), float32], Tensor[(14, 7, 6), float32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(81), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64]) */;
  %479 = cast(meta[relay.Constant][35] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %480 = cast(meta[relay.Constant][35] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %481 = reshape(%479, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %482 = reshape(%480, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %483 = @func_3450(%481, %482) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */;
  %484 = greater_equal(%468, %469) /* ty=Tensor[(112), bool] */;
  %485 = %478.3;
  %486 = %483.0;
  (%484, %485, meta[relay.Constant][32] /* ty=Tensor[(9), float64] */, meta[relay.Constant][33] /* ty=Tensor[(672), int16] */, meta[relay.Constant][34] /* ty=Tensor[(56), int32] */, %var_4165, %486, meta[relay.Constant][35] /* ty=Tensor[(432), int16] */)
}

def @func_8306(%var_8288: Tensor[(6, 3, 5), float64]) -> (Tensor[(6, 3, 5), float64],) {
  %487 = cast(%var_8288, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
  %488 = sigmoid(%487) /* ty=Tensor[(6, 3, 5), float64] */;
  (%488,)
}

def @func_6799(%var_6794: float32, %var_6795: Tensor[(5, 7, 10), float32]) -> (Tensor[(5, 7, 10), float32],) {
  %489 = cast(%var_6794, dtype="float32") /* ty=float32 */;
  %490 = cast(%var_6795, dtype="float32") /* ty=Tensor[(5, 7, 10), float32] */;
  %491 = floor_mod(%489, %490) /* ty=Tensor[(5, 7, 10), float32] */;
  (%491,)
}

def @func_4639() -> (Tensor[(16, 5, 7), bool],) {
  %492 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%492,)
}

def @func_3426() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) {
  %493 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 5, 7), bool] */;
  %494 = shape_of(meta[relay.Constant][36] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 5, 7), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %497 = cast(meta[relay.Constant][37] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %498 = tan(%497) /* ty=Tensor[(16, 5, 7), float32] */;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %501 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 336), int16] */, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
  %502 = reshape(%500, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %503 = reshape(%501, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %504 = @func_592(%502, %503) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %505 = greater_equal(%495, %496) /* ty=Tensor[(16, 5, 7), bool] */;
  %506 = sigmoid(%499) /* ty=Tensor[(16, 5, 7), float64] */;
  %507 = %504.0;
  (%505, %506, %507, meta[relay.Constant][38] /* ty=Tensor[(112), int16] */, meta[relay.Constant][39] /* ty=Tensor[(2, 336), int16] */)
}

def @func_592(%var_586: Tensor[(16, 1, 7), int16], %var_587: Tensor[(16, 6, 7), int16]) -> (Tensor[(16, 6, 7), int16],) {
  %508 = cast(%var_586, dtype="int16") /* ty=Tensor[(16, 1, 7), int16] */;
  %509 = cast(%var_587, dtype="int16") /* ty=Tensor[(16, 6, 7), int16] */;
  %510 = bitwise_or(%508, %509) /* ty=Tensor[(16, 6, 7), int16] */;
  (%510,)
}

def @func_9109() -> Tensor[(2, 336), float64] {
  %511 = @func_5545() /* ty=Tensor[(2, 336), int16] */;
  %512 = cast(%511, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  atanh(%512) /* ty=Tensor[(2, 336), float64] */
}

def @func_6790(%var_6758: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), bool], Tensor[(2, 336), int64], Tensor[(2, 336), int16], Tensor[(432), int16]) {
  %513 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %514 = %513.2;
  %515 = cast(%var_6758, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(2), int32] */;
  %517 = cast(%514, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %519 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 336), int16] */, dtype="int64") /* ty=Tensor[(2, 336), int64] */;
  %520 = shape_of(%514, dtype="int32") /* ty=Tensor[(2), int32] */;
  %521 = cast(%514, dtype="int64") /* ty=Tensor[(2, 336), int64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %523 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %524 = cast(meta[relay.Constant][41] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
  %525 = reshape(%523, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %526 = reshape(%524, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %527 = @func_3450(%525, %526) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */;
  %528 = greater_equal(%517, %518) /* ty=Tensor[(2, 336), bool] */;
  %529 = multiply(%521, %522) /* ty=Tensor[(2, 336), int64] */;
  %530 = %527.1;
  (%528, %529, %530, meta[relay.Constant][41] /* ty=Tensor[(432), int16] */)
}

def @func_7881() -> Tensor[(2, 336), int16] {
  @func_7712() /* ty=Tensor[(2, 336), int16] */
}

def @func_8331() -> Tensor[(16, 5, 7), bool] {
  %531 = @func_5317() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %531.2
}

def @func_8148(%var_8090: Tensor[(5, 3, 1), uint32], %var_8091: Tensor[(5, 3, 16), uint32], %var_8142: Tensor[(225), bool]) -> (Tensor[(5, 3, 16), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(5, 3, 16), float32], Tensor[(16, 5, 7), float64], Tensor[(2, 336), int16], Tensor[(225), bool]) {
  %532 = cast(%var_8090, dtype="uint32") /* ty=Tensor[(5, 3, 1), uint32] */;
  %533 = cast(%var_8091, dtype="uint32") /* ty=Tensor[(5, 3, 16), uint32] */;
  %534 = @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %535 = cast(%var_8091, dtype="float32") /* ty=Tensor[(5, 3, 16), float32] */;
  %536 = bitwise_xor(%532, %533) /* ty=Tensor[(5, 3, 16), uint32] */;
  %537 = cast(%536, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
  %538 = cast(%var_8142, dtype="bool") /* ty=Tensor[(225), bool] */;
  %539 = reshape(%537, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float64] */;
  %540 = reshape(%538, newshape=[225, 1]) /* ty=Tensor[(225, 1), bool] */;
  %541 = @func_4410(%539, %540) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */;
  %542 = @func_5928() /* ty=Tensor[(16, 5, 7), bool] */;
  %543 = %534.1;
  %544 = log2(%535) /* ty=Tensor[(5, 3, 16), float32] */;
  %545 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
  %546 = %541.5;
  (%536, %542, %543, %544, %545, %546, %var_8142)
}

def @func_4077() -> (Tensor[(16, 5, 7), bool],) {
  %547 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %548 = %547.0;
  (%548,)
}

def @func_7498() -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) {
  %549 = @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %550 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %551 = %549.0;
  (%550, %551)
}

def @func_633(%var_613: Tensor[(5, 9, 5), bool]) -> (Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) {
  %552 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %553 = shape_of(%var_613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %554 = cast(%var_613, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %556 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %557 = reshape(%556, newshape=[]) /* ty=bool */;
  %558 = @func_300(%557) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %559 = cast(meta[relay.Constant][42] /* ty=Tensor[(5, 9, 5), bool] */, dtype="float32") /* ty=Tensor[(5, 9, 5), float32] */;
  %560 = logical_or(%554, %555) /* ty=Tensor[(5, 9, 5), bool] */;
  %561 = %558.0;
  %562 = log2(%559) /* ty=Tensor[(5, 9, 5), float32] */;
  (%560, %561, False /* ty=bool */, %562)
}

def @func_7233(%var_7194: Tensor[(3, 7, 10), float32]) -> (Tensor[(3, 7, 10), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) {
  %563 = cast(%var_7194, dtype="float32") /* ty=Tensor[(3, 7, 10), float32] */;
  %564 = erf(%563) /* ty=Tensor[(3, 7, 10), float32] */;
  %565 = cast(%var_7194, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %569 = @func_5057() /* ty=(Tensor[(16, 5, 7), float64],) */;
  %570 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %571 = less(%567, %568) /* ty=Tensor[(3, 7, 10), bool] */;
  %572 = %569.0;
  %573 = %570.0;
  (%571, %572, %573)
}

def @func_7599() -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), bool]) {
  %574 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %575 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %576 = cast(%575, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %577 = shape_of(%574, dtype="int32") /* ty=Tensor[(2), int32] */;
  %578 = cast(%574, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %580 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  %581 = less(%578, %579) /* ty=Tensor[(2, 336), bool] */;
  (%580, %581)
}

def @func_1627(%var_1619: Tensor[(1, 13), uint64], %var_1620: Tensor[(1, 13), uint64]) -> Tensor[(?, 13), uint64] {
  %582 = cast(%var_1620, dtype="uint64") /* ty=Tensor[(1, 13), uint64] */;
  %583 = shape_of(%var_1619, dtype="int32") /* ty=Tensor[(2), int32] */;
  %584 = cast(%var_1619, dtype="uint64") /* ty=Tensor[(1, 13), uint64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  left_shift(%584, %585) /* ty=Tensor[(?, 13), uint64] */
}

def @func_7824() -> (Tensor[(16, 5, 7), bool],) {
  %586 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %587 = %586.0;
  (%587,)
}

def @func_4558() -> Tensor[(16, 5, 7), float64] {
  %588 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %589 = %588.0;
  %590 = cast(%589, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  sin(%590) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_4975(%var_4973: Tensor[(225), bool]) -> (Tensor[(2, 336), int16], Tensor[(14, 7, 6), bool], Tensor[(225), bool]) {
  %591 = cast(%var_4973, dtype="bool") /* ty=Tensor[(225), bool] */;
  %592 = reshape(%591, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %593 = @func_633(%592) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %594 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %595 = %593.1;
  (%594, %595, %var_4973)
}

def @func_5424() -> (Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) {
  %596 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %599 = cast(meta[relay.Constant][43] /* ty=Tensor[(2, 336), int16] */, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %600 = shape_of(%597, dtype="int32") /* ty=Tensor[(2), int32] */;
  %601 = cast(%597, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %602 = dyn.reshape(%599, %600, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %603 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %604 = exp(%598) /* ty=Tensor[(2, 336), float32] */;
  %605 = add(%601, %602) /* ty=Tensor[(2, 336), uint64] */;
  %606 = %603.0;
  (%604, %605, %606)
}

def @func_7793(%var_7788: Tensor[(2, 336), float64]) -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), float32], Tensor[(2, 336), uint8]) {
  %607 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %608 = @func_6610() /* ty=(Tensor[(2, 336), float32],) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %611 = rsqrt(%610) /* ty=Tensor[(2, 336), float64] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %613 = cos(%612) /* ty=Tensor[(2, 336), float64] */;
  %614 = cast(%613, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %615 = cast(%var_7788, dtype="uint8") /* ty=Tensor[(2, 336), uint8] */;
  %616 = shape_of(%613, dtype="int32") /* ty=Tensor[(2), int32] */;
  %617 = cast(%613, dtype="uint8") /* ty=Tensor[(2, 336), uint8] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %619 = %607.0;
  %620 = asin(%614) /* ty=Tensor[(2, 336), float32] */;
  %621 = left_shift(%617, %618) /* ty=Tensor[(2, 336), uint8] */;
  (%619, %620, %621)
}

def @func_6610() -> (Tensor[(2, 336), float32],) {
  %622 = @func_5901() /* ty=Tensor[(2, 336), float32] */;
  (%622,)
}

def @func_5338() -> (Tensor[(16, 5, 7), bool],) {
  %623 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %624 = %623.0;
  (%624,)
}

def @func_8077() -> (Tensor[(16, 5, 7), float64], Tensor[(112), int16]) {
  %625 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %626 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %627 = %625.3;
  (%626, %627)
}

def @func_5901() -> Tensor[(2, 336), float32] {
  %628 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  atan(%630) /* ty=Tensor[(2, 336), float32] */
}

def @func_7412(%var_7385: Tensor[(25, 9), bool]) -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(25, 9), bool]) {
  %631 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %632 = cast(%var_7385, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
  %633 = reshape(%632, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %634 = @func_5534(%633) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */;
  %635 = cast(%var_7385, dtype="float64") /* ty=Tensor[(25, 9), float64] */;
  %636 = log10(%635) /* ty=Tensor[(25, 9), float64] */;
  %637 = cast(%var_7385, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(2), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %641 = %631.0;
  %642 = %634.0;
  %643 = logical_and(%639, %640) /* ty=Tensor[(25, 9), bool] */;
  (%641, %642, %643)
}

def @func_7712() -> Tensor[(2, 336), int16] {
  %644 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %644.1
}

def @func_5268() -> Tensor[(16, 5, 7), float64] {
  %645 = @func_5057() /* ty=(Tensor[(16, 5, 7), float64],) */;
  %645.0
}

def @func_9452(%var_9438: Tensor[(13, 1, 2), int32], %var_9439: Tensor[(13, 15, 2), int32]) -> (Tensor[(13, 15, 2), int32], Tensor[(16, 5, 7), bool]) {
  %646 = cast(%var_9438, dtype="int32") /* ty=Tensor[(13, 1, 2), int32] */;
  %647 = cast(%var_9439, dtype="int32") /* ty=Tensor[(13, 15, 2), int32] */;
  %648 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %649 = bitwise_and(%646, %647) /* ty=Tensor[(13, 15, 2), int32] */;
  %650 = %648.0;
  (%649, %650)
}

def @func_7997(%var_7915: Tensor[(4, 5, 13), float32], %var_7935: Tensor[(672), int16], %var_7936: Tensor[(81), float64], %var_7992: Tensor[(225), bool]) -> (Tensor[(16, 5, 7), bool], bool, Tensor[(672), int16], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(4, 5, 13), float32], Tensor[(2, 336), int16], Tensor[(225), bool], Tensor[(10, 14, 8), float32]) {
  %651 = @func_7824() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %652 = cast(%var_7935, dtype="int16") /* ty=Tensor[(672), int16] */;
  %653 = cast(%var_7936, dtype="float64") /* ty=Tensor[(81), float64] */;
  %654 = cast(meta[relay.Constant][44] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %655 = reshape(%652, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %656 = reshape(%653, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
  %657 = reshape(%654, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %658 = @func_4044(%655, %656, %657) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %659 = cast(%var_7915, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
  %660 = rsqrt(%659) /* ty=Tensor[(4, 5, 13), float32] */;
  %661 = cast(%var_7915, dtype="uint64") /* ty=Tensor[(4, 5, 13), uint64] */;
  %662 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %663 = cast(%660, dtype="uint64") /* ty=Tensor[(4, 5, 13), uint64] */;
  %664 = dyn.reshape(%661, %662, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %665 = right_shift(%663, %664) /* ty=Tensor[(4, 5, 13), uint64] */;
  %666 = cast(%665, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
  %667 = shape_of(%660, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%660, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %670 = cast(%var_7992, dtype="bool") /* ty=Tensor[(225), bool] */;
  %671 = reshape(%670, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %672 = @func_5534(%671) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */;
  %673 = @func_7326() /* ty=(Tensor[(10, 14, 8), float32],) */;
  %674 = %651.0;
  %675 = %658.1;
  %676 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %677 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  %678 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %679 = divide(%668, %669) /* ty=Tensor[(4, 5, 13), float32] */;
  %680 = %672.1;
  %681 = %673.0;
  (%674, %675, %var_7935, %var_7936, meta[relay.Constant][44] /* ty=Tensor[(1456), float64] */, %676, %677, %678, %679, %680, %var_7992, %681)
}

def @func_1440(%var_1429: Tensor[(7, 3, 8), int16], %var_1430: Tensor[(7, 3, 8), int16]) -> Tensor[(7, 3, 8), int16] {
  %682 = cast(%var_1430, dtype="int16") /* ty=Tensor[(7, 3, 8), int16] */;
  %683 = shape_of(%var_1429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_1429, dtype="int16") /* ty=Tensor[(7, 3, 8), int16] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  multiply(%684, %685) /* ty=Tensor[(7, 3, 8), int16] */
}

def @func_3090(%var_3081: Tensor[(13, 7, 16), float64]) -> (Tensor[(13, 7, 16), float64],) {
  %686 = cast(%var_3081, dtype="float64") /* ty=Tensor[(13, 7, 16), float64] */;
  %687 = tan(%686) /* ty=Tensor[(13, 7, 16), float64] */;
  (%687,)
}

def @func_6001(%var_5934: Tensor[(9, 2, 8), uint32], %var_5935: Tensor[(9, 2, 8), uint32]) -> (Tensor[(9, 2, 8), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %688 = cast(%var_5935, dtype="uint32") /* ty=Tensor[(9, 2, 8), uint32] */;
  %689 = shape_of(%var_5934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %690 = cast(%var_5934, dtype="uint32") /* ty=Tensor[(9, 2, 8), uint32] */;
  %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %692 = bitwise_xor(%690, %691) /* ty=Tensor[(9, 2, 8), uint32] */;
  %693 = @func_5928() /* ty=Tensor[(16, 5, 7), bool] */;
  %694 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%692, %693, %694)
}

def @func_4457() -> (Tensor[(2, 336), int16],) {
  %695 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  (%695,)
}

def @func_7686() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %696 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %697 = %696.0;
  %698 = @func_5725() /* ty=Tensor[(16, 5, 7), bool] */;
  (%697, %698)
}

def @func_4044(%var_4006: Tensor[(672), int16], %var_4013: Tensor[(27, 3), float64], %var_4040: Tensor[(1456), float64]) -> (Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) {
  %699 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %700 = reshape(%699, newshape=[]) /* ty=bool */;
  %701 = @func_300(%700) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %702 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %703 = cast(%var_4006, dtype="int16") /* ty=Tensor[(672), int16] */;
  %704 = reshape(%702, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %705 = reshape(%703, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %706 = @func_592(%704, %705) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %707 = cast(%var_4013, dtype="float64") /* ty=Tensor[(27, 3), float64] */;
  %708 = cast(meta[relay.Constant][45] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %709 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %710 = reshape(%707, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), float64] */;
  %711 = reshape(%708, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %712 = reshape(%709, newshape=[]) /* ty=bool */;
  %713 = @func_1747(%710, %711, %712) /* ty=(Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) */;
  %714 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %715 = %714.0;
  %716 = cast(%715, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  %717 = cos(%716) /* ty=Tensor[(16, 5, 7), float64] */;
  %718 = cast(%715, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %719 = shape_of(%717, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(%717, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %722 = cast(%var_4040, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %723 = reshape(%722, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %724 = @func_3090(%723) /* ty=(Tensor[(13, 7, 16), float64],) */;
  %725 = %701.0;
  %726 = %706.0;
  %727 = %713.1;
  %728 = mod(%720, %721) /* ty=Tensor[(16, 5, 7), float32] */;
  %729 = %724.0;
  (%725, True /* ty=bool */, %726, meta[relay.Constant][45] /* ty=Tensor[(112), int16] */, %var_4006, %727, %var_4013, %728, %729, %var_4040)
}

def @func_340(%var_327: Tensor[(5, 1, 10), uint32], %var_328: Tensor[(5, 5, 10), uint32]) -> Tensor[(5, 5, 10), bool] {
  %730 = cast(%var_327, dtype="bool") /* ty=Tensor[(5, 1, 10), bool] */;
  %731 = cast(%var_328, dtype="bool") /* ty=Tensor[(5, 5, 10), bool] */;
  not_equal(%730, %731) /* ty=Tensor[(5, 5, 10), bool] */
}

def @func_7090() -> (Tensor[(2, 336), int16], Tensor[(16, 5, 7), bool]) {
  %732 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %733 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %734 = %732.0;
  (%733, %734)
}

def @func_9169(%var_9161: Tensor[(7, 4, 8), int64]) -> (Tensor[(7, 4, 8), int64],) {
  %735 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %736 = cast(%var_9161, dtype="int64") /* ty=Tensor[(7, 4, 8), int64] */;
  %737 = subtract(%735, %736) /* ty=Tensor[(7, 4, 8), int64] */;
  (%737,)
}

def @func_6354(%var_6327: Tensor[(672), int16], %var_6339: Tensor[(13, 1), uint64]) -> (bool, Tensor[(2, 336), int16], Tensor[(672), int16], Tensor[(?, 13), uint64], Tensor[(13, 1), uint64], Tensor[(16, 5, 7), bool]) {
  %738 = @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %739 = cast(%var_6327, dtype="int16") /* ty=Tensor[(672), int16] */;
  %740 = reshape(%739, newshape=[2, 336]) /* ty=Tensor[(2, 336), int16] */;
  %741 = @func_5794(%740) /* ty=(Tensor[(2, 336), int16],) */;
  %742 = cast(%var_6339, dtype="uint64") /* ty=Tensor[(13, 1), uint64] */;
  %743 = cast(%var_6339, dtype="uint64") /* ty=Tensor[(13, 1), uint64] */;
  %744 = reshape(%742, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %745 = reshape(%743, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %746 = @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %747 = %738.2;
  %748 = %741.0;
  %749 = @func_1627(%744, %745) /* ty=Tensor[(?, 13), uint64] */;
  %750 = %746.1;
  (%747, %748, %var_6327, %749, %var_6339, %750)
}

def @func_2728(%var_2707: Tensor[(4, 5, 10), float64]) -> Tensor[(4, 5, 10), float64] {
  %751 = cast(%var_2707, dtype="float64") /* ty=Tensor[(4, 5, 10), float64] */;
  sin(%751) /* ty=Tensor[(4, 5, 10), float64] */
}

def @func_8439() -> (Tensor[(16, 5, 7), bool],) {
  %752 = @func_5424() /* ty=(Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) */;
  %753 = %752.2;
  (%753,)
}

def @func_1747(%var_1715: Tensor[(9, 3, 3), float64], %var_1724: Tensor[(112), int16], %var_1740: bool) -> (Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) {
  %754 = cast(%var_1715, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
  %755 = cast(%var_1724, dtype="int16") /* ty=Tensor[(112), int16] */;
  %756 = cast(meta[relay.Constant][46] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %757 = reshape(%755, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %758 = reshape(%756, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %759 = @func_592(%757, %758) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %760 = cast(%var_1740, dtype="bool") /* ty=bool */;
  %761 = reshape(%760, newshape=[]) /* ty=bool */;
  %762 = @func_300(%761) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %763 = tan(%754) /* ty=Tensor[(9, 3, 3), float64] */;
  %764 = %759.0;
  %765 = %762.0;
  (%763, %764, %var_1724, meta[relay.Constant][46] /* ty=Tensor[(672), int16] */, %765, %var_1740)
}

def @func_6216() -> (Tensor[(16, 5, 7), bool],) {
  %766 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%766,)
}

def @func_3450(%var_3429: Tensor[(3, 9, 16), int16], %var_3430: Tensor[(3, 9, 16), int16]) -> (Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) {
  %767 = cast(%var_3430, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
  %768 = shape_of(%var_3429, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%var_3429, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %771 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %772 = left_shift(%769, %770) /* ty=Tensor[(3, 9, 16), int16] */;
  %773 = %771.4;
  (%772, %773)
}

def @func_6499() -> (Tensor[(16, 5, 7), float64],) {
  %774 = @func_5057() /* ty=(Tensor[(16, 5, 7), float64],) */;
  %775 = %774.0;
  (%775,)
}

def @func_8230(%var_8223: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), int32],) {
  %776 = @func_7881() /* ty=Tensor[(2, 336), int16] */;
  %777 = cast(%var_8223, dtype="int32") /* ty=Tensor[(2, 336), int32] */;
  %778 = shape_of(%776, dtype="int32") /* ty=Tensor[(2), int32] */;
  %779 = cast(%776, dtype="int32") /* ty=Tensor[(2, 336), int32] */;
  %780 = dyn.reshape(%777, %778, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %781 = bitwise_or(%779, %780) /* ty=Tensor[(2, 336), int32] */;
  (%781,)
}

def @func_6185(%var_6176: Tensor[(5, 15, 14), float32]) -> Tensor[(5, 15, 14), float32] {
  %782 = cast(%var_6176, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  cos(%782) /* ty=Tensor[(5, 15, 14), float32] */
}

def @func_8724() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], bool) {
  %783 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %784 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %785 = reshape(%784, newshape=[]) /* ty=bool */;
  %786 = @func_300(%785) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %787 = @func_8331() /* ty=Tensor[(16, 5, 7), bool] */;
  %788 = @func_8331() /* ty=Tensor[(16, 5, 7), bool] */;
  %789 = %783.0;
  %790 = %786.0;
  (%787, %788, %789, %790, True /* ty=bool */)
}

def @func_8816() -> Tensor[(2, 336), int16] {
  %791 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %791.1
}

def @func_9299() -> (Tensor[(2, 336), int16], Tensor[(2, 336), int16]) {
  %792 = @func_8816() /* ty=Tensor[(2, 336), int16] */;
  %793 = @func_5545() /* ty=Tensor[(2, 336), int16] */;
  (%792, %793)
}

def @func_6158(%var_6074: Tensor[(168), int16]) -> (Tensor[(2, 336), bool], Tensor[(384), float64], Tensor[(96), float32], Tensor[(7, 3, 8), int16], Tensor[(168), int16], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], Tensor[(240), float64], Tensor[(225), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(2, 336), uint32], Tensor[(2, 336), float32]) {
  %794 = @func_5424() /* ty=(Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) */;
  %795 = %794.0;
  %796 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 336), float32] */, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %797 = shape_of(%795, dtype="int32") /* ty=Tensor[(2), int32] */;
  %798 = cast(%795, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %799 = dyn.reshape(%796, %797, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %800 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %801 = reshape(%800, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %802 = @func_3681(%801) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) */;
  %803 = cast(%var_6074, dtype="int16") /* ty=Tensor[(168), int16] */;
  %804 = cast(%var_6074, dtype="int16") /* ty=Tensor[(168), int16] */;
  %805 = reshape(%803, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), int16] */;
  %806 = reshape(%804, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), int16] */;
  %807 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %808 = cast(meta[relay.Constant][49] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %809 = cast(meta[relay.Constant][50] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %810 = reshape(%808, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float64] */;
  %811 = reshape(%809, newshape=[225, 1]) /* ty=Tensor[(225, 1), bool] */;
  %812 = @func_4410(%810, %811) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */;
  %813 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %814 = @func_5317() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %815 = cast(meta[relay.Constant][50] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %816 = reshape(%815, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %817 = @func_4975(%816) /* ty=(Tensor[(2, 336), int16], Tensor[(14, 7, 6), bool], Tensor[(225), bool]) */;
  %818 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 336), float32] */, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %819 = erf(%818) /* ty=Tensor[(2, 336), float32] */;
  %820 = cast(%819, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %821 = sinh(%820) /* ty=Tensor[(2, 336), float64] */;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %823 = log(%822) /* ty=Tensor[(2, 336), float32] */;
  %824 = cast(%821, dtype="uint32") /* ty=Tensor[(2, 336), uint32] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(2), int32] */;
  %826 = cast(%823, dtype="uint32") /* ty=Tensor[(2, 336), uint32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %828 = cast(%821, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %829 = not_equal(%798, %799) /* ty=Tensor[(2, 336), bool] */;
  %830 = %802.2;
  %831 = @func_1440(%805, %806) /* ty=Tensor[(7, 3, 8), int16] */;
  %832 = %807.0;
  %833 = %812.0;
  %834 = %813.0;
  %835 = %814.0;
  %836 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %837 = %817.0;
  %838 = maximum(%826, %827) /* ty=Tensor[(2, 336), uint32] */;
  %839 = sin(%828) /* ty=Tensor[(2, 336), float32] */;
  (%829, %830, meta[relay.Constant][48] /* ty=Tensor[(96), float32] */, %831, %var_6074, %832, %833, meta[relay.Constant][49] /* ty=Tensor[(240), float64] */, meta[relay.Constant][50] /* ty=Tensor[(225), bool] */, %834, %835, %836, %837, %838, %839)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6474(%var_6473: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), float32], Tensor[(16, 5, 7), bool]) {
  %9 = fn (%var_6451: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), float32], Tensor[(16, 5, 7), bool]) {
    %0 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %1 = %0.1;
    %2 = cast(%var_6451, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
    %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(2), int32] */;
    %4 = cast(%1, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
    %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %6 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %7 = mod(%4, %5) /* ty=Tensor[(2, 336), float32] */;
    %8 = %6.0;
    (%7, %8)
  };
  %9(%var_6473) /* ty=(Tensor[(2, 336), float32], Tensor[(16, 5, 7), bool]) */
}

def @func_7315(%var_7291: Tensor[(8, 15, 6), uint8]) -> (Tensor[(8, 15, 6), uint8], Tensor[(8, 15, 6), float32]) {
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 15, 6), uint8] */, dtype="uint8") /* ty=Tensor[(8, 15, 6), uint8] */;
  %11 = shape_of(%var_7291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_7291, dtype="uint8") /* ty=Tensor[(8, 15, 6), uint8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %14 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 15, 6), uint8] */, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %15 = maximum(%12, %13) /* ty=Tensor[(8, 15, 6), uint8] */;
  %16 = log(%14) /* ty=Tensor[(8, 15, 6), float32] */;
  (%15, %16)
}

def @func_7414(%var_7413: Tensor[(25, 9), bool]) -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(25, 9), bool]) {
  %30 = fn (%var_7385: Tensor[(25, 9), bool]) -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(25, 9), bool]) {
    %17 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %18 = cast(%var_7385, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
    %19 = reshape(%18, newshape=[225]) /* ty=Tensor[(225), bool] */;
    %20 = @func_5534(%19) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */;
    %21 = cast(%var_7385, dtype="float64") /* ty=Tensor[(25, 9), float64] */;
    %22 = log10(%21) /* ty=Tensor[(25, 9), float64] */;
    %23 = cast(%var_7385, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
    %24 = shape_of(%22, dtype="int32") /* ty=Tensor[(2), int32] */;
    %25 = cast(%22, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
    %26 = dyn.reshape(%23, %24, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %27 = %17.0;
    %28 = %20.0;
    %29 = logical_and(%25, %26) /* ty=Tensor[(25, 9), bool] */;
    (%27, %28, %29)
  };
  %30(%var_7413) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(25, 9), bool]) */
}

def @func_8152(%var_8149: Tensor[(5, 3, 1), uint32], %var_8150: Tensor[(5, 3, 16), uint32], %var_8151: Tensor[(225), bool]) -> (Tensor[(5, 3, 16), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(5, 3, 16), float32], Tensor[(16, 5, 7), float64], Tensor[(2, 336), int16], Tensor[(225), bool]) {
  %46 = fn (%var_8090: Tensor[(5, 3, 1), uint32], %var_8091: Tensor[(5, 3, 16), uint32], %var_8142: Tensor[(225), bool]) -> (Tensor[(5, 3, 16), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(5, 3, 16), float32], Tensor[(16, 5, 7), float64], Tensor[(2, 336), int16], Tensor[(225), bool]) {
    %31 = cast(%var_8090, dtype="uint32") /* ty=Tensor[(5, 3, 1), uint32] */;
    %32 = cast(%var_8091, dtype="uint32") /* ty=Tensor[(5, 3, 16), uint32] */;
    %33 = @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
    %34 = cast(%var_8091, dtype="float32") /* ty=Tensor[(5, 3, 16), float32] */;
    %35 = bitwise_xor(%31, %32) /* ty=Tensor[(5, 3, 16), uint32] */;
    %36 = cast(%35, dtype="float64") /* ty=Tensor[(5, 3, 16), float64] */;
    %37 = cast(%var_8142, dtype="bool") /* ty=Tensor[(225), bool] */;
    %38 = reshape(%36, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float64] */;
    %39 = reshape(%37, newshape=[225, 1]) /* ty=Tensor[(225, 1), bool] */;
    %40 = @func_4410(%38, %39) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */;
    %41 = @func_5928() /* ty=Tensor[(16, 5, 7), bool] */;
    %42 = %33.1;
    %43 = log2(%34) /* ty=Tensor[(5, 3, 16), float32] */;
    %44 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
    %45 = %40.5;
    (%35, %41, %42, %43, %44, %45, %var_8142)
  };
  %46(%var_8149, %var_8150, %var_8151) /* ty=(Tensor[(5, 3, 16), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(5, 3, 16), float32], Tensor[(16, 5, 7), float64], Tensor[(2, 336), int16], Tensor[(225), bool]) */
}

def @func_7713() -> Tensor[(2, 336), int16] {
  %48 = fn () -> Tensor[(2, 336), int16] {
    %47 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %47.1
  };
  %48() /* ty=Tensor[(2, 336), int16] */
}

def @func_3453(%var_3451: Tensor[(3, 9, 16), int16], %var_3452: Tensor[(3, 9, 16), int16]) -> (Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) {
  %56 = fn (%var_3429: Tensor[(3, 9, 16), int16], %var_3430: Tensor[(3, 9, 16), int16]) -> (Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) {
    %49 = cast(%var_3430, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
    %50 = shape_of(%var_3429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %51 = cast(%var_3429, dtype="int16") /* ty=Tensor[(3, 9, 16), int16] */;
    %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %53 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
    %54 = left_shift(%51, %52) /* ty=Tensor[(3, 9, 16), int16] */;
    %55 = %53.4;
    (%54, %55)
  };
  %56(%var_3451, %var_3452) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */
}

def @func_5619(%var_5560: Tensor[(8, 16, 16), int16], %var_5616: Tensor[(1456), float64]) -> (Tensor[(8, 16, 16), int16], bool, Tensor[(14, 7, 6), float32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(27, 3), float64], Tensor[(672), int16], Tensor[(81, 1), float64], Tensor[(1456), float64]) {
  %57 = cast(%var_5560, dtype="int16") /* ty=Tensor[(8, 16, 16), int16] */;
  %58 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(8, 16, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %59 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 16, 16), int16] */, dtype="int16") /* ty=Tensor[(8, 16, 16), int16] */;
  %60 = dyn.reshape(%57, %58, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %61 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %62 = reshape(%61, newshape=[]) /* ty=bool */;
  %63 = @func_300(%62) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %66 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %67 = @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %68 = cast(meta[relay.Constant][2] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %69 = reshape(%68, newshape=[25, 9]) /* ty=Tensor[(25, 9), bool] */;
  %70 = @func_4962(%69) /* ty=(Tensor[(?, 13), uint64], Tensor[(1, 96), float32], Tensor[(2, 336), bool], bool, Tensor[(25, 9), bool]) */;
  %71 = cast(meta[relay.Constant][3] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %72 = cast(meta[relay.Constant][4] /* ty=Tensor[(81, 1), float64] */, dtype="float64") /* ty=Tensor[(81, 1), float64] */;
  %73 = cast(%var_5616, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %74 = reshape(%71, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %75 = reshape(%72, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
  %76 = reshape(%73, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %77 = @func_4044(%74, %75, %76) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %78 = bitwise_xor(%59, %60) /* ty=Tensor[(8, 16, 16), int16] */;
  %79 = erf(%65) /* ty=Tensor[(14, 7, 6), float32] */;
  %80 = %66.0;
  %81 = %67.0;
  %82 = %70.3;
  %83 = %77.6;
  (%78, False /* ty=bool */, %79, %80, %81, %82, meta[relay.Constant][2] /* ty=Tensor[(225), bool] */, %83, meta[relay.Constant][3] /* ty=Tensor[(672), int16] */, meta[relay.Constant][4] /* ty=Tensor[(81, 1), float64] */, %var_5616)
}

def @func_6610() -> (Tensor[(2, 336), float32],) {
  %84 = @func_5901() /* ty=Tensor[(2, 336), float32] */;
  (%84,)
}

def @func_5508() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */
}

def @func_4977(%var_4976: Tensor[(225), bool]) -> (Tensor[(2, 336), int16], Tensor[(14, 7, 6), bool], Tensor[(225), bool]) {
  %90 = fn (%var_4973: Tensor[(225), bool]) -> (Tensor[(2, 336), int16], Tensor[(14, 7, 6), bool], Tensor[(225), bool]) {
    %85 = cast(%var_4973, dtype="bool") /* ty=Tensor[(225), bool] */;
    %86 = reshape(%85, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
    %87 = @func_633(%86) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
    %88 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    %89 = %87.1;
    (%88, %89, %var_4973)
  };
  %90(%var_4976) /* ty=(Tensor[(2, 336), int16], Tensor[(14, 7, 6), bool], Tensor[(225), bool]) */
}

def @func_1752(%var_1749: Tensor[(9, 3, 3), float64], %var_1750: Tensor[(112), int16], %var_1751: bool) -> (Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) {
  @func_1747(%var_1749, %var_1750, %var_1751) /* ty=(Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) */
}

def @func_8576() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64]) {
  @func_8574() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64]) */
}

def @func_8725() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], bool) {
  %99 = fn () -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], bool) {
    %91 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %92 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
    %93 = reshape(%92, newshape=[]) /* ty=bool */;
    %94 = @func_300(%93) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
    %95 = @func_8331() /* ty=Tensor[(16, 5, 7), bool] */;
    %96 = @func_8331() /* ty=Tensor[(16, 5, 7), bool] */;
    %97 = %91.0;
    %98 = %94.0;
    (%95, %96, %97, %98, True /* ty=bool */)
  };
  %99() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], bool) */
}

def @func_6279(%var_6251: Tensor[(16, 5, 7), bool]) -> (Tensor[(16, 5, 7), uint8], Tensor[(2, 336), int16], Tensor[(1456), float64], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(4, 5, 10), float64], Tensor[(200), float64]) {
  %100 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %101 = %100.0;
  %102 = cast(%var_6251, dtype="uint8") /* ty=Tensor[(16, 5, 7), uint8] */;
  %103 = shape_of(%101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %104 = cast(%101, dtype="uint8") /* ty=Tensor[(16, 5, 7), uint8] */;
  %105 = dyn.reshape(%102, %103, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %106 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %107 = %106.0;
  %108 = cast(%107, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
  %109 = cast(meta[relay.Constant][5] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %110 = cast(meta[relay.Constant][6] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %111 = reshape(%108, newshape=[672]) /* ty=Tensor[(672), int16] */;
  %112 = reshape(%109, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
  %113 = reshape(%110, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
  %114 = @func_4044(%111, %112, %113) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %115 = cast(meta[relay.Constant][7] /* ty=Tensor[(200), float64] */, dtype="float64") /* ty=Tensor[(200), float64] */;
  %116 = reshape(%115, newshape=[4, 5, 10]) /* ty=Tensor[(4, 5, 10), float64] */;
  %117 = add(%104, %105) /* ty=Tensor[(16, 5, 7), uint8] */;
  %118 = %114.9;
  %119 = @func_2728(%116) /* ty=Tensor[(4, 5, 10), float64] */;
  (%117, %107, %118, meta[relay.Constant][5] /* ty=Tensor[(81), float64] */, meta[relay.Constant][6] /* ty=Tensor[(1456), float64] */, %119, meta[relay.Constant][7] /* ty=Tensor[(200), float64] */)
}

def @func_6612() -> (Tensor[(2, 336), float32],) {
  @func_6610() /* ty=(Tensor[(2, 336), float32],) */
}

def @func_5426() -> (Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) {
  @func_5424() /* ty=(Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) */
}

def @func_5318() -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %126 = fn () -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
    %120 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %121 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %122 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %123 = %120.0;
    %124 = %121.0;
    %125 = %122.0;
    (%123, %124, %125)
  };
  %126() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */
}

def @func_1630(%var_1628: Tensor[(1, 13), uint64], %var_1629: Tensor[(1, 13), uint64]) -> Tensor[(?, 13), uint64] {
  %131 = fn (%var_1619: Tensor[(1, 13), uint64], %var_1620: Tensor[(1, 13), uint64]) -> Tensor[(?, 13), uint64] {
    %127 = cast(%var_1620, dtype="uint64") /* ty=Tensor[(1, 13), uint64] */;
    %128 = shape_of(%var_1619, dtype="int32") /* ty=Tensor[(2), int32] */;
    %129 = cast(%var_1619, dtype="uint64") /* ty=Tensor[(1, 13), uint64] */;
    %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    left_shift(%129, %130) /* ty=Tensor[(?, 13), uint64] */
  };
  %131(%var_1628, %var_1629) /* ty=Tensor[(?, 13), uint64] */
}

def @func_3480() -> Tensor[(16, 5, 7), bool] {
  %133 = fn () -> Tensor[(16, 5, 7), bool] {
    %132 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
    %132.0
  };
  %133() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_5901() -> Tensor[(2, 336), float32] {
  %134 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %135 = %134.0;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  atan(%136) /* ty=Tensor[(2, 336), float32] */
}

def @func_7128() -> (Tensor[(2, 336), int16],) {
  %137 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %138 = %137.2;
  (%138,)
}

def @func_5623(%var_5621: Tensor[(8, 16, 16), int16], %var_5622: Tensor[(1456), float64]) -> (Tensor[(8, 16, 16), int16], bool, Tensor[(14, 7, 6), float32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(27, 3), float64], Tensor[(672), int16], Tensor[(81, 1), float64], Tensor[(1456), float64]) {
  @func_5619(%var_5621, %var_5622) /* ty=(Tensor[(8, 16, 16), int16], bool, Tensor[(14, 7, 6), float32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(27, 3), float64], Tensor[(672), int16], Tensor[(81, 1), float64], Tensor[(1456), float64]) */
}

def @main(%var_9501: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), float32],) {
  %139 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
  %140 = cast(%var_9501, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %141 = shape_of(%139, dtype="int32") /* ty=Tensor[(2), int32] */;
  %142 = cast(%139, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %144 = floor_divide(%142, %143) /* ty=Tensor[(2, 336), float32] */;
  (%144,)
}

def @func_2209(%var_2208: Tensor[(14, 2, 2), int32]) -> (Tensor[(14, 2, 2), bool],) {
  %150 = fn (%var_2195: Tensor[(14, 2, 2), int32]) -> (Tensor[(14, 2, 2), bool],) {
    %145 = cast(%var_2195, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %146 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(14, 2, 2), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(14, 2, 2), int32] */, dtype="bool") /* ty=Tensor[(14, 2, 2), bool] */;
    %148 = dyn.reshape(%145, %146, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %149 = less_equal(%147, %148) /* ty=Tensor[(14, 2, 2), bool] */;
    (%149,)
  };
  %150(%var_2208) /* ty=(Tensor[(14, 2, 2), bool],) */
}

def @func_5546() -> Tensor[(2, 336), int16] {
  %152 = fn () -> Tensor[(2, 336), int16] {
    %151 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %151.1
  };
  %152() /* ty=Tensor[(2, 336), int16] */
}

def @func_5725() -> Tensor[(16, 5, 7), bool] {
  %153 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %153.0
}

def @func_5366() -> Tensor[(16, 5, 7), float64] {
  %154 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %155 = cast(%154, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  asin(%155) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_6282(%var_6280: Tensor[(16, 5, 7), bool]) -> (Tensor[(16, 5, 7), uint8], Tensor[(2, 336), int16], Tensor[(1456), float64], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(4, 5, 10), float64], Tensor[(200), float64]) {
  @func_6279(%var_6280) /* ty=(Tensor[(16, 5, 7), uint8], Tensor[(2, 336), int16], Tensor[(1456), float64], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(4, 5, 10), float64], Tensor[(200), float64]) */
}

def @func_5662(%var_5661: Tensor[(2048), int16]) -> (Tensor[(16, 5, 7), bool], Tensor[(672), int16], Tensor[(2048), int16], Tensor[(1456), float64]) {
  %164 = fn (%var_5656: Tensor[(2048), int16]) -> (Tensor[(16, 5, 7), bool], Tensor[(672), int16], Tensor[(2048), int16], Tensor[(1456), float64]) {
    %156 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %157 = cast(%var_5656, dtype="int16") /* ty=Tensor[(2048), int16] */;
    %158 = cast(meta[relay.Constant][9] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %159 = reshape(%157, newshape=[8, 16, 16]) /* ty=Tensor[(8, 16, 16), int16] */;
    %160 = reshape(%158, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %161 = @func_5619(%159, %160) /* ty=(Tensor[(8, 16, 16), int16], bool, Tensor[(14, 7, 6), float32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(27, 3), float64], Tensor[(672), int16], Tensor[(81, 1), float64], Tensor[(1456), float64]) */;
    %162 = %156.0;
    %163 = %161.8;
    (%162, %163, %var_5656, meta[relay.Constant][9] /* ty=Tensor[(1456), float64] */)
  };
  %164(%var_5661) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(672), int16], Tensor[(2048), int16], Tensor[(1456), float64]) */
}

def @func_9094() -> (Tensor[(16, 5, 7), float64], Tensor[(2, 336), float32], Tensor[(672, 1), int16], Tensor[(16, 5, 7), bool]) {
  %165 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %166 = cast(meta[relay.Constant][10] /* ty=Tensor[(672, 1), int16] */, dtype="int16") /* ty=Tensor[(672, 1), int16] */;
  %167 = reshape(%166, newshape=[2, 336]) /* ty=Tensor[(2, 336), int16] */;
  %168 = @func_6472(%167) /* ty=(Tensor[(2, 336), float32], Tensor[(16, 5, 7), bool]) */;
  %169 = %165.0;
  %170 = %168.0;
  %171 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%169, %170, meta[relay.Constant][10] /* ty=Tensor[(672, 1), int16] */, %171)
}

def @func_6802(%var_6800: float32, %var_6801: Tensor[(5, 7, 10), float32]) -> (Tensor[(5, 7, 10), float32],) {
  %175 = fn (%var_6794: float32, %var_6795: Tensor[(5, 7, 10), float32]) -> (Tensor[(5, 7, 10), float32],) {
    %172 = cast(%var_6794, dtype="float32") /* ty=float32 */;
    %173 = cast(%var_6795, dtype="float32") /* ty=Tensor[(5, 7, 10), float32] */;
    %174 = floor_mod(%172, %173) /* ty=Tensor[(5, 7, 10), float32] */;
    (%174,)
  };
  %175(%var_6800, %var_6801) /* ty=(Tensor[(5, 7, 10), float32],) */
}

def @func_9301() -> (Tensor[(2, 336), int16], Tensor[(2, 336), int16]) {
  @func_9299() /* ty=(Tensor[(2, 336), int16], Tensor[(2, 336), int16]) */
}

def @func_5339() -> (Tensor[(16, 5, 7), bool],) {
  %178 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %176 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %177 = %176.0;
    (%177,)
  };
  %178() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_3938(%var_3936: Tensor[(432), int16]) -> (Tensor[(16, 6, 7), int16], Tensor[(2, 336), int16], Tensor[(432), int16]) {
  @func_3935(%var_3936) /* ty=(Tensor[(16, 6, 7), int16], Tensor[(2, 336), int16], Tensor[(432), int16]) */
}

def @func_6161(%var_6159: Tensor[(168), int16]) -> (Tensor[(2, 336), bool], Tensor[(384), float64], Tensor[(96), float32], Tensor[(7, 3, 8), int16], Tensor[(168), int16], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], Tensor[(240), float64], Tensor[(225), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(2, 336), uint32], Tensor[(2, 336), float32]) {
  @func_6158(%var_6159) /* ty=(Tensor[(2, 336), bool], Tensor[(384), float64], Tensor[(96), float32], Tensor[(7, 3, 8), int16], Tensor[(168), int16], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], Tensor[(240), float64], Tensor[(225), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(2, 336), uint32], Tensor[(2, 336), float32]) */
}

def @func_4049(%var_4046: Tensor[(672), int16], %var_4047: Tensor[(27, 3), float64], %var_4048: Tensor[(1456), float64]) -> (Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) {
  @func_4044(%var_4046, %var_4047, %var_4048) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */
}

def @func_7130() -> (Tensor[(2, 336), int16],) {
  @func_7128() /* ty=(Tensor[(2, 336), int16],) */
}

def @func_9452(%var_9438: Tensor[(13, 1, 2), int32], %var_9439: Tensor[(13, 15, 2), int32]) -> (Tensor[(13, 15, 2), int32], Tensor[(16, 5, 7), bool]) {
  %179 = cast(%var_9438, dtype="int32") /* ty=Tensor[(13, 1, 2), int32] */;
  %180 = cast(%var_9439, dtype="int32") /* ty=Tensor[(13, 15, 2), int32] */;
  %181 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %182 = bitwise_and(%179, %180) /* ty=Tensor[(13, 15, 2), int32] */;
  %183 = %181.0;
  (%182, %183)
}

def @func_8764(%var_8763: Tensor[(2, 1, 1), float64]) -> Tensor[(2, 1, 1), float64] {
  %185 = fn (%var_8743: Tensor[(2, 1, 1), float64]) -> Tensor[(2, 1, 1), float64] {
    %184 = cast(%var_8743, dtype="float64") /* ty=Tensor[(2, 1, 1), float64] */;
    log2(%184) /* ty=Tensor[(2, 1, 1), float64] */
  };
  %185(%var_8763) /* ty=Tensor[(2, 1, 1), float64] */
}

def @func_7686() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %186 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %187 = %186.0;
  %188 = @func_5725() /* ty=Tensor[(16, 5, 7), bool] */;
  (%187, %188)
}

def @func_4184(%var_4182: Tensor[(112), int16], %var_4183: Tensor[(13), uint64]) -> (Tensor[(112), bool], Tensor[(112), int16], Tensor[(9), float64], Tensor[(672), int16], Tensor[(56), int32], Tensor[(13), uint64], Tensor[(3, 9, 16), int16], Tensor[(432), int16]) {
  %212 = fn (%var_4127: Tensor[(112), int16], %var_4165: Tensor[(13), uint64]) -> (Tensor[(112), bool], Tensor[(112), int16], Tensor[(9), float64], Tensor[(672), int16], Tensor[(56), int32], Tensor[(13), uint64], Tensor[(3, 9, 16), int16], Tensor[(432), int16]) {
    %189 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
    %190 = %189.3;
    %191 = cast(%var_4127, dtype="bool") /* ty=Tensor[(112), bool] */;
    %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(1), int32] */;
    %193 = cast(%190, dtype="bool") /* ty=Tensor[(112), bool] */;
    %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?), bool] */;
    %195 = cast(meta[relay.Constant][11] /* ty=Tensor[(9), float64] */, dtype="float64") /* ty=Tensor[(9), float64] */;
    %196 = cast(meta[relay.Constant][12] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
    %197 = cast(meta[relay.Constant][13] /* ty=Tensor[(56), int32] */, dtype="int32") /* ty=Tensor[(56), int32] */;
    %198 = cast(%var_4165, dtype="uint64") /* ty=Tensor[(13), uint64] */;
    %199 = reshape(%195, newshape=[3, 1, 3]) /* ty=Tensor[(3, 1, 3), float64] */;
    %200 = reshape(%196, newshape=[672]) /* ty=Tensor[(672), int16] */;
    %201 = reshape(%197, newshape=[56]) /* ty=Tensor[(56), int32] */;
    %202 = reshape(%198, newshape=[13]) /* ty=Tensor[(13), uint64] */;
    %203 = @func_3607(%199, %200, %201, %202) /* ty=(Tensor[(3, ?, 3), float64], Tensor[(3, 1, 3), int32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 2, 2), bool], Tensor[(56), int32], Tensor[(3, ?, 3), float32], Tensor[(14, 7, 6), float32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(81), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64]) */;
    %204 = cast(meta[relay.Constant][14] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %205 = cast(meta[relay.Constant][14] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %206 = reshape(%204, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
    %207 = reshape(%205, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
    %208 = @func_3450(%206, %207) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */;
    %209 = greater_equal(%193, %194) /* ty=Tensor[(112), bool] */;
    %210 = %203.3;
    %211 = %208.0;
    (%209, %210, meta[relay.Constant][11] /* ty=Tensor[(9), float64] */, meta[relay.Constant][12] /* ty=Tensor[(672), int16] */, meta[relay.Constant][13] /* ty=Tensor[(56), int32] */, %var_4165, %211, meta[relay.Constant][14] /* ty=Tensor[(432), int16] */)
  };
  %212(%var_4182, %var_4183) /* ty=(Tensor[(112), bool], Tensor[(112), int16], Tensor[(9), float64], Tensor[(672), int16], Tensor[(56), int32], Tensor[(13), uint64], Tensor[(3, 9, 16), int16], Tensor[(432), int16]) */
}

def @func_7327() -> (Tensor[(10, 14, 8), float32],) {
  %215 = fn () -> (Tensor[(10, 14, 8), float32],) {
    %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 14, 8), float32] */, dtype="float32") /* ty=Tensor[(10, 14, 8), float32] */;
    %214 = sigmoid(%213) /* ty=Tensor[(10, 14, 8), float32] */;
    (%214,)
  };
  %215() /* ty=(Tensor[(10, 14, 8), float32],) */
}

def @func_4685() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) {
  @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */
}

def @func_7662() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %216 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %217 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %218 = %216.0;
  %219 = %217.0;
  (%218, %219)
}

def @func_5796(%var_5795: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), int16],) {
  %226 = fn (%var_5772: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), int16],) {
    %220 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    %221 = cast(%var_5772, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
    %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(2), int32] */;
    %223 = cast(%220, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
    %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %225 = minimum(%223, %224) /* ty=Tensor[(2, 336), int16] */;
    (%225,)
  };
  %226(%var_5795) /* ty=(Tensor[(2, 336), int16],) */
}

def @func_3935(%var_3932: Tensor[(432), int16]) -> (Tensor[(16, 6, 7), int16], Tensor[(2, 336), int16], Tensor[(432), int16]) {
  %227 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %228 = cast(%var_3932, dtype="int16") /* ty=Tensor[(432), int16] */;
  %229 = cast(%var_3932, dtype="int16") /* ty=Tensor[(432), int16] */;
  %230 = reshape(%228, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %231 = reshape(%229, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
  %232 = @func_3450(%230, %231) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */;
  %233 = %227.2;
  %234 = %232.1;
  (%233, %234, %var_3932)
}

def @func_1073(%var_1037: Tensor[(16, 2, 15), float32], %var_1064: Tensor[(16, 2, 15), float32]) -> (Tensor[(16, 2, 15), bool], Tensor[(16, 2, 15), int8]) {
  %235 = cast(%var_1037, dtype="float32") /* ty=Tensor[(16, 2, 15), float32] */;
  %236 = atanh(%235) /* ty=Tensor[(16, 2, 15), float32] */;
  %237 = cast(%var_1037, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(16, 2, 15), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = cast(%var_1064, dtype="int8") /* ty=Tensor[(16, 2, 15), int8] */;
  %242 = shape_of(%var_1037, dtype="int32") /* ty=Tensor[(3), int32] */;
  %243 = cast(%var_1037, dtype="int8") /* ty=Tensor[(16, 2, 15), int8] */;
  %244 = dyn.reshape(%241, %242, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %245 = equal(%239, %240) /* ty=Tensor[(16, 2, 15), bool] */;
  %246 = left_shift(%243, %244) /* ty=Tensor[(16, 2, 15), int8] */;
  (%245, %246)
}

def @func_7499() -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) {
  %250 = fn () -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) {
    %247 = @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
    %248 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
    %249 = %247.0;
    (%248, %249)
  };
  %250() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) */
}

def @func_6358(%var_6356: Tensor[(672), int16], %var_6357: Tensor[(13, 1), uint64]) -> (bool, Tensor[(2, 336), int16], Tensor[(672), int16], Tensor[(?, 13), uint64], Tensor[(13, 1), uint64], Tensor[(16, 5, 7), bool]) {
  @func_6354(%var_6356, %var_6357) /* ty=(bool, Tensor[(2, 336), int16], Tensor[(672), int16], Tensor[(?, 13), uint64], Tensor[(13, 1), uint64], Tensor[(16, 5, 7), bool]) */
}

def @func_8395(%var_8392: Tensor[(13, 4, 16), int64], %var_8393: Tensor[(13, 4, 16), float64], %var_8394: Tensor[(112), int16]) -> (Tensor[(13, 4, 16), int64], Tensor[(16, 5, 7), bool], Tensor[(13, 4, 16), int8], Tensor[(672), int16], Tensor[(112), int16], Tensor[(13, 4, 16), float64]) {
  %275 = fn (%var_8351: Tensor[(13, 4, 16), int64], %var_8372: Tensor[(13, 4, 16), float64], %var_8377: Tensor[(112), int16]) -> (Tensor[(13, 4, 16), int64], Tensor[(16, 5, 7), bool], Tensor[(13, 4, 16), int8], Tensor[(672), int16], Tensor[(112), int16], Tensor[(13, 4, 16), float64]) {
    %251 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 16), int64] */, dtype="int64") /* ty=Tensor[(13, 4, 16), int64] */;
    %252 = shape_of(%var_8351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %253 = cast(%var_8351, dtype="int64") /* ty=Tensor[(13, 4, 16), int64] */;
    %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %255 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %256 = cast(meta[relay.Constant][16] /* ty=Tensor[(13, 4, 16), int64] */, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
    %257 = cos(%256) /* ty=Tensor[(13, 4, 16), float64] */;
    %258 = cast(%var_8372, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
    %259 = shape_of(%257, dtype="int32") /* ty=Tensor[(3), int32] */;
    %260 = cast(%257, dtype="int8") /* ty=Tensor[(13, 4, 16), int8] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %262 = cast(%var_8377, dtype="int16") /* ty=Tensor[(112), int16] */;
    %263 = cast(%var_8377, dtype="int16") /* ty=Tensor[(112), int16] */;
    %264 = reshape(%262, newshape=[56, 2]) /* ty=Tensor[(56, 2), int16] */;
    %265 = reshape(%263, newshape=[56, 2]) /* ty=Tensor[(56, 2), int16] */;
    %266 = @func_7859(%264, %265) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 6, 7), int16], Tensor[(672), int16], Tensor[(56, 2), uint64]) */;
    %267 = cast(%257, dtype="float32") /* ty=Tensor[(13, 4, 16), float32] */;
    %268 = log10(%267) /* ty=Tensor[(13, 4, 16), float32] */;
    %269 = cast(%268, dtype="float64") /* ty=Tensor[(13, 4, 16), float64] */;
    %270 = subtract(%253, %254) /* ty=Tensor[(13, 4, 16), int64] */;
    %271 = %255.0;
    %272 = left_shift(%260, %261) /* ty=Tensor[(13, 4, 16), int8] */;
    %273 = %266.2;
    %274 = atan(%269) /* ty=Tensor[(13, 4, 16), float64] */;
    (%270, %271, %272, %273, %var_8377, %274)
  };
  %275(%var_8392, %var_8393, %var_8394) /* ty=(Tensor[(13, 4, 16), int64], Tensor[(16, 5, 7), bool], Tensor[(13, 4, 16), int8], Tensor[(672), int16], Tensor[(112), int16], Tensor[(13, 4, 16), float64]) */
}

def @func_8574() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64]) {
  %276 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %277 = %276.0;
  %278 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %279 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
  (%277, %278, %279)
}

def @func_1881(%var_1877: Tensor[(3, 16, 8), float64], %var_1878: Tensor[(3, 16, 8), float64], %var_1879: Tensor[(96), float32], %var_1880: bool) -> (Tensor[(3, 16, 8), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64], bool, Tensor[(96), float32], bool, Tensor[(225), bool], Tensor[(50), uint32], Tensor[(7, 84), bool]) {
  %304 = fn (%var_1852: Tensor[(3, 16, 8), float64], %var_1853: Tensor[(3, 16, 8), float64], %var_1868: Tensor[(96), float32], %var_1869: bool) -> (Tensor[(3, 16, 8), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64], bool, Tensor[(96), float32], bool, Tensor[(225), bool], Tensor[(50), uint32], Tensor[(7, 84), bool]) {
    %280 = cast(%var_1853, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
    %281 = shape_of(%var_1852, dtype="int32") /* ty=Tensor[(3), int32] */;
    %282 = cast(%var_1852, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
    %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %284 = cast(meta[relay.Constant][17] /* ty=Tensor[(13), uint64] */, dtype="uint64") /* ty=Tensor[(13), uint64] */;
    %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(13), uint64] */, dtype="uint64") /* ty=Tensor[(13), uint64] */;
    %286 = reshape(%284, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
    %287 = reshape(%285, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
    %288 = cast(%var_1868, dtype="float32") /* ty=Tensor[(96), float32] */;
    %289 = cast(%var_1868, dtype="float32") /* ty=Tensor[(96), float32] */;
    %290 = cast(%var_1869, dtype="bool") /* ty=bool */;
    %291 = cast(meta[relay.Constant][18] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
    %292 = cast(meta[relay.Constant][19] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
    %293 = cast(meta[relay.Constant][20] /* ty=Tensor[(7, 84), bool] */, dtype="bool") /* ty=Tensor[(7, 84), bool] */;
    %294 = reshape(%288, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
    %295 = reshape(%289, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
    %296 = reshape(%290, newshape=[]) /* ty=bool */;
    %297 = reshape(%291, newshape=[225]) /* ty=Tensor[(225), bool] */;
    %298 = reshape(%292, newshape=[50]) /* ty=Tensor[(50), uint32] */;
    %299 = reshape(%293, newshape=[14, 7, 6]) /* ty=Tensor[(14, 7, 6), bool] */;
    %300 = @func_849(%294, %295, %296, %297, %298, %299) /* ty=(Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) */;
    %301 = mod(%282, %283) /* ty=Tensor[(3, 16, 8), float64] */;
    %302 = @func_1627(%286, %287) /* ty=Tensor[(?, 13), uint64] */;
    %303 = %300.1;
    (%301, %302, meta[relay.Constant][17] /* ty=Tensor[(13), uint64] */, %303, %var_1868, %var_1869, meta[relay.Constant][18] /* ty=Tensor[(225), bool] */, meta[relay.Constant][19] /* ty=Tensor[(50), uint32] */, meta[relay.Constant][20] /* ty=Tensor[(7, 84), bool] */)
  };
  %304(%var_1877, %var_1878, %var_1879, %var_1880) /* ty=(Tensor[(3, 16, 8), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64], bool, Tensor[(96), float32], bool, Tensor[(225), bool], Tensor[(50), uint32], Tensor[(7, 84), bool]) */
}

def @func_7664() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  @func_7662() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */
}

def @func_4044(%var_4006: Tensor[(672), int16], %var_4013: Tensor[(27, 3), float64], %var_4040: Tensor[(1456), float64]) -> (Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) {
  %305 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %306 = reshape(%305, newshape=[]) /* ty=bool */;
  %307 = @func_300(%306) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %308 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %309 = cast(%var_4006, dtype="int16") /* ty=Tensor[(672), int16] */;
  %310 = reshape(%308, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %311 = reshape(%309, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %312 = @func_592(%310, %311) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %313 = cast(%var_4013, dtype="float64") /* ty=Tensor[(27, 3), float64] */;
  %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %315 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %316 = reshape(%313, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), float64] */;
  %317 = reshape(%314, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %318 = reshape(%315, newshape=[]) /* ty=bool */;
  %319 = @func_1747(%316, %317, %318) /* ty=(Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) */;
  %320 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %321 = %320.0;
  %322 = cast(%321, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  %323 = cos(%322) /* ty=Tensor[(16, 5, 7), float64] */;
  %324 = cast(%321, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %325 = shape_of(%323, dtype="int32") /* ty=Tensor[(3), int32] */;
  %326 = cast(%323, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %327 = dyn.reshape(%324, %325, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %328 = cast(%var_4040, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %329 = reshape(%328, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %330 = @func_3090(%329) /* ty=(Tensor[(13, 7, 16), float64],) */;
  %331 = %307.0;
  %332 = %312.0;
  %333 = %319.1;
  %334 = mod(%326, %327) /* ty=Tensor[(16, 5, 7), float32] */;
  %335 = %330.0;
  (%331, True /* ty=bool */, %332, meta[relay.Constant][21] /* ty=Tensor[(112), int16] */, %var_4006, %333, %var_4013, %334, %335, %var_4040)
}

def @func_4683() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) {
  %336 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %337 = cast(meta[relay.Constant][22] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %338 = reshape(%337, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %339 = @func_633(%338) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %340 = cast(meta[relay.Constant][23] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %341 = reshape(%340, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %342 = @func_3090(%341) /* ty=(Tensor[(13, 7, 16), float64],) */;
  %343 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %344 = %336.0;
  %345 = %339.2;
  %346 = %342.0;
  (%343, %344, %345, meta[relay.Constant][22] /* ty=Tensor[(225), bool] */, %346, meta[relay.Constant][23] /* ty=Tensor[(1456), float64] */)
}

def @func_8308(%var_8307: Tensor[(6, 3, 5), float64]) -> (Tensor[(6, 3, 5), float64],) {
  %349 = fn (%var_8288: Tensor[(6, 3, 5), float64]) -> (Tensor[(6, 3, 5), float64],) {
    %347 = cast(%var_8288, dtype="float64") /* ty=Tensor[(6, 3, 5), float64] */;
    %348 = sigmoid(%347) /* ty=Tensor[(6, 3, 5), float64] */;
    (%348,)
  };
  %349(%var_8307) /* ty=(Tensor[(6, 3, 5), float64],) */
}

def @func_6216() -> (Tensor[(16, 5, 7), bool],) {
  %350 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%350,)
}

def @func_5449() -> (Tensor[(16, 5, 7), bool],) {
  %351 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %352 = %351.0;
  (%352,)
}

def @func_8193() -> (Tensor[(16, 5, 7), float64],) {
  @func_8191() /* ty=(Tensor[(16, 5, 7), float64],) */
}

def @func_6726() -> (Tensor[(16, 6, 7), int16], Tensor[(16, 5, 7), float32]) {
  %353 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %354 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %356 = %353.2;
  %357 = asinh(%355) /* ty=Tensor[(16, 5, 7), float32] */;
  (%356, %357)
}

def @func_4227() -> (Tensor[(16, 5, 7), bool],) {
  @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_4780() -> (Tensor[(16, 5, 7), bool],) {
  %358 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  (%358,)
}

def @func_8332() -> Tensor[(16, 5, 7), bool] {
  %360 = fn () -> Tensor[(16, 5, 7), bool] {
    %359 = @func_5317() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
    %359.2
  };
  %360() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_8078() -> (Tensor[(16, 5, 7), float64], Tensor[(112), int16]) {
  %364 = fn () -> (Tensor[(16, 5, 7), float64], Tensor[(112), int16]) {
    %361 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
    %362 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
    %363 = %361.3;
    (%362, %363)
  };
  %364() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(112), int16]) */
}

def @func_6440(%var_6438: Tensor[(8, 11, 7), float32], %var_6439: Tensor[(5, 45), bool]) -> (Tensor[(8, 11, 7), uint64], Tensor[(16, 5, 7), float64], Tensor[(225), bool], Tensor[(5, 45), bool], Tensor[(16, 5, 7), bool]) {
  @func_6436(%var_6438, %var_6439) /* ty=(Tensor[(8, 11, 7), uint64], Tensor[(16, 5, 7), float64], Tensor[(225), bool], Tensor[(5, 45), bool], Tensor[(16, 5, 7), bool]) */
}

def @func_7859(%var_7845: Tensor[(56, 2), int16], %var_7850: Tensor[(56, 2), int16]) -> (Tensor[(16, 5, 7), bool], Tensor[(16, 6, 7), int16], Tensor[(672), int16], Tensor[(56, 2), uint64]) {
  %365 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %366 = cast(%var_7845, dtype="int16") /* ty=Tensor[(56, 2), int16] */;
  %367 = cast(meta[relay.Constant][24] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %368 = reshape(%366, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %369 = reshape(%367, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %370 = @func_592(%368, %369) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %371 = cast(%var_7850, dtype="uint64") /* ty=Tensor[(56, 2), uint64] */;
  %372 = shape_of(%var_7845, dtype="int32") /* ty=Tensor[(2), int32] */;
  %373 = cast(%var_7845, dtype="uint64") /* ty=Tensor[(56, 2), uint64] */;
  %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %375 = %365.0;
  %376 = %370.0;
  %377 = subtract(%373, %374) /* ty=Tensor[(56, 2), uint64] */;
  (%375, %376, meta[relay.Constant][24] /* ty=Tensor[(672), int16] */, %377)
}

def @func_5928() -> Tensor[(16, 5, 7), bool] {
  @func_5725() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_3613(%var_3609: Tensor[(3, 1, 3), float64], %var_3610: Tensor[(672), int16], %var_3611: Tensor[(56), int32], %var_3612: Tensor[(13), uint64]) -> (Tensor[(3, ?, 3), float64], Tensor[(3, 1, 3), int32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 2, 2), bool], Tensor[(56), int32], Tensor[(3, ?, 3), float32], Tensor[(14, 7, 6), float32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(81), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64]) {
  @func_3607(%var_3609, %var_3610, %var_3611, %var_3612) /* ty=(Tensor[(3, ?, 3), float64], Tensor[(3, 1, 3), int32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 2, 2), bool], Tensor[(56), int32], Tensor[(3, ?, 3), float32], Tensor[(14, 7, 6), float32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(81), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64]) */
}

def @func_7600() -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), bool]) {
  %386 = fn () -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), bool]) {
    %378 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    %379 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    %380 = cast(%379, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %381 = shape_of(%378, dtype="int32") /* ty=Tensor[(2), int32] */;
    %382 = cast(%378, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %384 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
    %385 = less(%382, %383) /* ty=Tensor[(2, 336), bool] */;
    (%384, %385)
  };
  %386() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), bool]) */
}

def @func_5727() -> Tensor[(16, 5, 7), bool] {
  @func_5725() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_7233(%var_7194: Tensor[(3, 7, 10), float32]) -> (Tensor[(3, 7, 10), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) {
  %387 = cast(%var_7194, dtype="float32") /* ty=Tensor[(3, 7, 10), float32] */;
  %388 = erf(%387) /* ty=Tensor[(3, 7, 10), float32] */;
  %389 = cast(%var_7194, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="bool") /* ty=Tensor[(3, 7, 10), bool] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %393 = @func_5057() /* ty=(Tensor[(16, 5, 7), float64],) */;
  %394 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %395 = less(%391, %392) /* ty=Tensor[(3, 7, 10), bool] */;
  %396 = %393.0;
  %397 = %394.0;
  (%395, %396, %397)
}

def @func_7881() -> Tensor[(2, 336), int16] {
  @func_7712() /* ty=Tensor[(2, 336), int16] */
}

def @func_6218() -> (Tensor[(16, 5, 7), bool],) {
  @func_6216() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_7277(%var_7276: Tensor[(1008), float32]) -> (Tensor[(16, 5, 7), float64], Tensor[(6, 14, 12), float32], Tensor[(1008), float32], Tensor[(16, 5, 7), bool]) {
  %404 = fn (%var_7253: Tensor[(1008), float32]) -> (Tensor[(16, 5, 7), float64], Tensor[(6, 14, 12), float32], Tensor[(1008), float32], Tensor[(16, 5, 7), bool]) {
    %398 = cast(%var_7253, dtype="float32") /* ty=Tensor[(1008), float32] */;
    %399 = reshape(%398, newshape=[6, 14, 12]) /* ty=Tensor[(6, 14, 12), float32] */;
    %400 = @func_5338() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %401 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
    %402 = @func_2920(%399) /* ty=Tensor[(6, 14, 12), float32] */;
    %403 = %400.0;
    (%401, %402, %var_7253, %403)
  };
  %404(%var_7276) /* ty=(Tensor[(16, 5, 7), float64], Tensor[(6, 14, 12), float32], Tensor[(1008), float32], Tensor[(16, 5, 7), bool]) */
}

def @func_6436(%var_6386: Tensor[(8, 11, 7), float32], %var_6413: Tensor[(5, 45), bool]) -> (Tensor[(8, 11, 7), uint64], Tensor[(16, 5, 7), float64], Tensor[(225), bool], Tensor[(5, 45), bool], Tensor[(16, 5, 7), bool]) {
  %405 = cast(%var_6386, dtype="float32") /* ty=Tensor[(8, 11, 7), float32] */;
  %406 = atan(%405) /* ty=Tensor[(8, 11, 7), float32] */;
  %407 = cast(%var_6386, dtype="uint64") /* ty=Tensor[(8, 11, 7), uint64] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="uint64") /* ty=Tensor[(8, 11, 7), uint64] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %411 = cast(%var_6413, dtype="bool") /* ty=Tensor[(5, 45), bool] */;
  %412 = reshape(%411, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %413 = @func_5534(%412) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */;
  %414 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %415 = minimum(%409, %410) /* ty=Tensor[(8, 11, 7), uint64] */;
  %416 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
  %417 = %413.3;
  %418 = %414.0;
  (%415, %416, %417, %var_6413, %418)
}

def @func_6500() -> (Tensor[(16, 5, 7), float64],) {
  %421 = fn () -> (Tensor[(16, 5, 7), float64],) {
    %419 = @func_5057() /* ty=(Tensor[(16, 5, 7), float64],) */;
    %420 = %419.0;
    (%420,)
  };
  %421() /* ty=(Tensor[(16, 5, 7), float64],) */
}

def @func_7236(%var_7234: Tensor[(3, 7, 10), float32]) -> (Tensor[(3, 7, 10), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) {
  @func_7233(%var_7234) /* ty=(Tensor[(3, 7, 10), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool]) */
}

def @func_4964(%var_4963: Tensor[(25, 9), bool]) -> (Tensor[(?, 13), uint64], Tensor[(1, 96), float32], Tensor[(2, 336), bool], bool, Tensor[(25, 9), bool]) {
  %449 = fn (%var_4949: Tensor[(25, 9), bool]) -> (Tensor[(?, 13), uint64], Tensor[(1, 96), float32], Tensor[(2, 336), bool], bool, Tensor[(25, 9), bool]) {
    %422 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 96), float32] */, dtype="float32") /* ty=Tensor[(1, 96), float32] */;
    %423 = reshape(%422, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
    %424 = @func_3681(%423) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) */;
    %425 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %426 = %425.2;
    %427 = cast(%426, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
    %428 = log10(%427) /* ty=Tensor[(2, 336), float32] */;
    %429 = cast(%426, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(2), int32] */;
    %431 = cast(%428, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %433 = logical_and(%431, %432) /* ty=Tensor[(2, 336), bool] */;
    %434 = cast(%433, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
    %435 = shape_of(%428, dtype="int32") /* ty=Tensor[(2), int32] */;
    %436 = cast(%428, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
    %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %438 = subtract(%436, %437) /* ty=Tensor[(2, 336), uint64] */;
    %439 = cast(%428, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(2), int32] */;
    %441 = cast(%438, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %443 = cast(%var_4949, dtype="bool") /* ty=Tensor[(25, 9), bool] */;
    %444 = reshape(%443, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
    %445 = @func_633(%444) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
    %446 = %424.1;
    %447 = equal(%441, %442) /* ty=Tensor[(2, 336), bool] */;
    %448 = %445.2;
    (%446, meta[relay.Constant][25] /* ty=Tensor[(1, 96), float32] */, %447, %448, %var_4949)
  };
  %449(%var_4963) /* ty=(Tensor[(?, 13), uint64], Tensor[(1, 96), float32], Tensor[(2, 336), bool], bool, Tensor[(25, 9), bool]) */
}

def @func_8818() -> Tensor[(2, 336), int16] {
  @func_8816() /* ty=Tensor[(2, 336), int16] */
}

def @func_4558() -> Tensor[(16, 5, 7), float64] {
  %450 = @func_4225() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  sin(%452) /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_4414(%var_4412: Tensor[(6, 4, 10), float64], %var_4413: Tensor[(225, 1), bool]) -> (Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) {
  @func_4410(%var_4412, %var_4413) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */
}

def @func_4225() -> (Tensor[(16, 5, 7), bool],) {
  %453 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%453,)
}

def @func_5451() -> (Tensor[(16, 5, 7), bool],) {
  @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_9008(%var_9006: Tensor[(8, 9, 1), bool], %var_9007: Tensor[(8, 9, 16), bool]) -> (Tensor[(8, 9, 16), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(8, 9, 16), bool]) {
  %463 = fn (%var_8950: Tensor[(8, 9, 1), bool], %var_8951: Tensor[(8, 9, 16), bool]) -> (Tensor[(8, 9, 16), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(8, 9, 16), bool]) {
    %454 = cast(%var_8950, dtype="bool") /* ty=Tensor[(8, 9, 1), bool] */;
    %455 = cast(%var_8951, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
    %456 = @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
    %457 = cast(%var_8950, dtype="bool") /* ty=Tensor[(8, 9, 1), bool] */;
    %458 = cast(%var_8951, dtype="bool") /* ty=Tensor[(8, 9, 16), bool] */;
    %459 = logical_or(%454, %455) /* ty=Tensor[(8, 9, 16), bool] */;
    %460 = %456.1;
    %461 = @func_4558() /* ty=Tensor[(16, 5, 7), float64] */;
    %462 = less(%457, %458) /* ty=Tensor[(8, 9, 16), bool] */;
    (%459, %460, %461, %462)
  };
  %463(%var_9006, %var_9007) /* ty=(Tensor[(8, 9, 16), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(8, 9, 16), bool]) */
}

def @func_7318(%var_7316: Tensor[(8, 15, 6), uint8]) -> (Tensor[(8, 15, 6), uint8], Tensor[(8, 15, 6), float32]) {
  @func_7315(%var_7316) /* ty=(Tensor[(8, 15, 6), uint8], Tensor[(8, 15, 6), float32]) */
}

def @func_4641() -> (Tensor[(16, 5, 7), bool],) {
  @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_8919() -> Tensor[(16, 5, 7), bool] {
  %465 = fn () -> Tensor[(16, 5, 7), bool] {
    %464 = @func_8894() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %464.0
  };
  %465() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_4458() -> (Tensor[(2, 336), int16],) {
  %467 = fn () -> (Tensor[(2, 336), int16],) {
    %466 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    (%466,)
  };
  %467() /* ty=(Tensor[(2, 336), int16],) */
}

def @func_635(%var_634: Tensor[(5, 9, 5), bool]) -> (Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) {
  %479 = fn (%var_613: Tensor[(5, 9, 5), bool]) -> (Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) {
    %468 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 9, 5), bool] */, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
    %469 = shape_of(%var_613, dtype="int32") /* ty=Tensor[(3), int32] */;
    %470 = cast(%var_613, dtype="bool") /* ty=Tensor[(5, 9, 5), bool] */;
    %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %472 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
    %473 = reshape(%472, newshape=[]) /* ty=bool */;
    %474 = @func_300(%473) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
    %475 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 9, 5), bool] */, dtype="float32") /* ty=Tensor[(5, 9, 5), float32] */;
    %476 = logical_or(%470, %471) /* ty=Tensor[(5, 9, 5), bool] */;
    %477 = %474.0;
    %478 = log2(%475) /* ty=Tensor[(5, 9, 5), float32] */;
    (%476, %477, False /* ty=bool */, %478)
  };
  %479(%var_634) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */
}

def @func_3681(%var_3664: Tensor[(8, 12), float32]) -> (Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) {
  %480 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %481 = cast(meta[relay.Constant][27] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %482 = cast(meta[relay.Constant][27] /* ty=Tensor[(384), float64] */, dtype="float64") /* ty=Tensor[(384), float64] */;
  %483 = cast(%var_3664, dtype="float32") /* ty=Tensor[(8, 12), float32] */;
  %484 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %485 = reshape(%481, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float64] */;
  %486 = reshape(%482, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float64] */;
  %487 = reshape(%483, newshape=[96]) /* ty=Tensor[(96), float32] */;
  %488 = reshape(%484, newshape=[]) /* ty=bool */;
  %489 = @func_1876(%485, %486, %487, %488) /* ty=(Tensor[(3, 16, 8), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64], bool, Tensor[(96), float32], bool, Tensor[(225), bool], Tensor[(50), uint32], Tensor[(7, 84), bool]) */;
  %490 = %480.0;
  %491 = %489.1;
  (%490, %491, meta[relay.Constant][27] /* ty=Tensor[(384), float64] */, %var_3664, False /* ty=bool */)
}

def @func_4410(%var_4361: Tensor[(6, 4, 10), float64], %var_4366: Tensor[(225, 1), bool]) -> (Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) {
  %492 = cast(%var_4366, dtype="bool") /* ty=Tensor[(225, 1), bool] */;
  %493 = reshape(%492, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
  %494 = @func_633(%493) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
  %495 = cast(%var_4361, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %496 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(6, 4, 10), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %497 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 4, 10), float64] */, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %499 = divide(%497, %498) /* ty=Tensor[(6, 4, 10), float64] */;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(6, 4, 10), float64] */;
  %501 = cast(meta[relay.Constant][29] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %502 = reshape(%501, newshape=[13, 7, 16]) /* ty=Tensor[(13, 7, 16), float64] */;
  %503 = @func_3090(%502) /* ty=(Tensor[(13, 7, 16), float64],) */;
  %504 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
  %505 = %494.1;
  %506 = log10(%500) /* ty=Tensor[(6, 4, 10), float64] */;
  %507 = %503.0;
  %508 = %504.4;
  (%505, %var_4366, %506, %507, meta[relay.Constant][29] /* ty=Tensor[(1456), float64] */, %508)
}

def @func_4639() -> (Tensor[(16, 5, 7), bool],) {
  %509 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%509,)
}

def @func_5536(%var_5535: Tensor[(225), bool]) -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) {
  %518 = fn (%var_5516: Tensor[(225), bool]) -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) {
    %510 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %511 = cast(meta[relay.Constant][30] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
    %512 = cast(%var_5516, dtype="bool") /* ty=Tensor[(225), bool] */;
    %513 = reshape(%511, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float64] */;
    %514 = reshape(%512, newshape=[225, 1]) /* ty=Tensor[(225, 1), bool] */;
    %515 = @func_4410(%513, %514) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */;
    %516 = %510.0;
    %517 = %515.5;
    (%516, %517, meta[relay.Constant][30] /* ty=Tensor[(240), float64] */, %var_5516)
  };
  %518(%var_5535) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */
}

def @func_8230(%var_8223: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), int32],) {
  %519 = @func_7881() /* ty=Tensor[(2, 336), int16] */;
  %520 = cast(%var_8223, dtype="int32") /* ty=Tensor[(2, 336), int32] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%519, dtype="int32") /* ty=Tensor[(2, 336), int32] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %524 = bitwise_or(%522, %523) /* ty=Tensor[(2, 336), int32] */;
  (%524,)
}

def @func_1747(%var_1715: Tensor[(9, 3, 3), float64], %var_1724: Tensor[(112), int16], %var_1740: bool) -> (Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) {
  %525 = cast(%var_1715, dtype="float64") /* ty=Tensor[(9, 3, 3), float64] */;
  %526 = cast(%var_1724, dtype="int16") /* ty=Tensor[(112), int16] */;
  %527 = cast(meta[relay.Constant][31] /* ty=Tensor[(672), int16] */, dtype="int16") /* ty=Tensor[(672), int16] */;
  %528 = reshape(%526, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %529 = reshape(%527, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %530 = @func_592(%528, %529) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %531 = cast(%var_1740, dtype="bool") /* ty=bool */;
  %532 = reshape(%531, newshape=[]) /* ty=bool */;
  %533 = @func_300(%532) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %534 = tan(%525) /* ty=Tensor[(9, 3, 3), float64] */;
  %535 = %530.0;
  %536 = %533.0;
  (%534, %535, %var_1724, meta[relay.Constant][31] /* ty=Tensor[(672), int16] */, %536, %var_1740)
}

def @func_6792(%var_6791: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), bool], Tensor[(2, 336), int64], Tensor[(2, 336), int16], Tensor[(432), int16]) {
  %555 = fn (%var_6758: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), bool], Tensor[(2, 336), int64], Tensor[(2, 336), int16], Tensor[(432), int16]) {
    %537 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %538 = %537.2;
    %539 = cast(%var_6758, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(2), int32] */;
    %541 = cast(%538, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %543 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 336), int16] */, dtype="int64") /* ty=Tensor[(2, 336), int64] */;
    %544 = shape_of(%538, dtype="int32") /* ty=Tensor[(2), int32] */;
    %545 = cast(%538, dtype="int64") /* ty=Tensor[(2, 336), int64] */;
    %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %547 = cast(meta[relay.Constant][33] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %548 = cast(meta[relay.Constant][33] /* ty=Tensor[(432), int16] */, dtype="int16") /* ty=Tensor[(432), int16] */;
    %549 = reshape(%547, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
    %550 = reshape(%548, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), int16] */;
    %551 = @func_3450(%549, %550) /* ty=(Tensor[(3, 9, 16), int16], Tensor[(2, 336), int16]) */;
    %552 = greater_equal(%541, %542) /* ty=Tensor[(2, 336), bool] */;
    %553 = multiply(%545, %546) /* ty=Tensor[(2, 336), int64] */;
    %554 = %551.1;
    (%552, %553, %554, meta[relay.Constant][33] /* ty=Tensor[(432), int16] */)
  };
  %555(%var_6791) /* ty=(Tensor[(2, 336), bool], Tensor[(2, 336), int64], Tensor[(2, 336), int16], Tensor[(432), int16]) */
}

def @func_3093(%var_3091: Tensor[(13, 7, 16), float64]) -> (Tensor[(13, 7, 16), float64],) {
  @func_3090(%var_3091) /* ty=(Tensor[(13, 7, 16), float64],) */
}

def @func_8233(%var_8231: Tensor[(2, 336), int16]) -> (Tensor[(2, 336), int32],) {
  @func_8230(%var_8231) /* ty=(Tensor[(2, 336), int32],) */
}

def @func_5368() -> Tensor[(16, 5, 7), float64] {
  @func_5366() /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_344(%var_342: Tensor[(5, 1, 10), uint32], %var_343: Tensor[(5, 5, 10), uint32]) -> Tensor[(5, 5, 10), bool] {
  @func_340(%var_342, %var_343) /* ty=Tensor[(5, 5, 10), bool] */
}

def @func_8895() -> (Tensor[(16, 5, 7), bool],) {
  %558 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %556 = @func_8724() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], bool) */;
    %557 = %556.1;
    (%557,)
  };
  %558() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_8440() -> (Tensor[(16, 5, 7), bool],) {
  %561 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %559 = @func_5424() /* ty=(Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) */;
    %560 = %559.2;
    (%560,)
  };
  %561() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_3684(%var_3682: Tensor[(8, 12), float32]) -> (Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) {
  @func_3681(%var_3682) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) */
}

def @func_5269() -> Tensor[(16, 5, 7), float64] {
  %563 = fn () -> Tensor[(16, 5, 7), float64] {
    %562 = @func_5057() /* ty=(Tensor[(16, 5, 7), float64],) */;
    %562.0
  };
  %563() /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_8002(%var_7998: Tensor[(4, 5, 13), float32], %var_7999: Tensor[(672), int16], %var_8000: Tensor[(81), float64], %var_8001: Tensor[(225), bool]) -> (Tensor[(16, 5, 7), bool], bool, Tensor[(672), int16], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(4, 5, 13), float32], Tensor[(2, 336), int16], Tensor[(225), bool], Tensor[(10, 14, 8), float32]) {
  %595 = fn (%var_7915: Tensor[(4, 5, 13), float32], %var_7935: Tensor[(672), int16], %var_7936: Tensor[(81), float64], %var_7992: Tensor[(225), bool]) -> (Tensor[(16, 5, 7), bool], bool, Tensor[(672), int16], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(4, 5, 13), float32], Tensor[(2, 336), int16], Tensor[(225), bool], Tensor[(10, 14, 8), float32]) {
    %564 = @func_7824() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %565 = cast(%var_7935, dtype="int16") /* ty=Tensor[(672), int16] */;
    %566 = cast(%var_7936, dtype="float64") /* ty=Tensor[(81), float64] */;
    %567 = cast(meta[relay.Constant][34] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %568 = reshape(%565, newshape=[672]) /* ty=Tensor[(672), int16] */;
    %569 = reshape(%566, newshape=[27, 3]) /* ty=Tensor[(27, 3), float64] */;
    %570 = reshape(%567, newshape=[1456]) /* ty=Tensor[(1456), float64] */;
    %571 = @func_4044(%568, %569, %570) /* ty=(Tensor[(14, 7, 6), bool], bool, Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(16, 6, 7), int16], Tensor[(27, 3), float64], Tensor[(16, 5, 7), float32], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
    %572 = cast(%var_7915, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
    %573 = rsqrt(%572) /* ty=Tensor[(4, 5, 13), float32] */;
    %574 = cast(%var_7915, dtype="uint64") /* ty=Tensor[(4, 5, 13), uint64] */;
    %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %576 = cast(%573, dtype="uint64") /* ty=Tensor[(4, 5, 13), uint64] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %578 = right_shift(%576, %577) /* ty=Tensor[(4, 5, 13), uint64] */;
    %579 = cast(%578, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
    %580 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(%573, dtype="float32") /* ty=Tensor[(4, 5, 13), float32] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %583 = cast(%var_7992, dtype="bool") /* ty=Tensor[(225), bool] */;
    %584 = reshape(%583, newshape=[225]) /* ty=Tensor[(225), bool] */;
    %585 = @func_5534(%584) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(240), float64], Tensor[(225), bool]) */;
    %586 = @func_7326() /* ty=(Tensor[(10, 14, 8), float32],) */;
    %587 = %564.0;
    %588 = %571.1;
    %589 = @func_5268() /* ty=Tensor[(16, 5, 7), float64] */;
    %590 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
    %591 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
    %592 = divide(%581, %582) /* ty=Tensor[(4, 5, 13), float32] */;
    %593 = %585.1;
    %594 = %586.0;
    (%587, %588, %var_7935, %var_7936, meta[relay.Constant][34] /* ty=Tensor[(1456), float64] */, %589, %590, %591, %592, %593, %var_7992, %594)
  };
  %595(%var_7998, %var_7999, %var_8000, %var_8001) /* ty=(Tensor[(16, 5, 7), bool], bool, Tensor[(672), int16], Tensor[(81), float64], Tensor[(1456), float64], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], Tensor[(4, 5, 13), float32], Tensor[(2, 336), int16], Tensor[(225), bool], Tensor[(10, 14, 8), float32]) */
}

def @func_7091() -> (Tensor[(2, 336), int16], Tensor[(16, 5, 7), bool]) {
  %599 = fn () -> (Tensor[(2, 336), int16], Tensor[(16, 5, 7), bool]) {
    %596 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %597 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    %598 = %596.0;
    (%597, %598)
  };
  %599() /* ty=(Tensor[(2, 336), int16], Tensor[(16, 5, 7), bool]) */
}

def @func_3426() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) {
  %600 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 5, 7), bool] */;
  %601 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(meta[relay.Constant][35] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="bool") /* ty=Tensor[(16, 5, 7), bool] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %604 = cast(meta[relay.Constant][36] /* ty=Tensor[(16, 5, 7), uint32] */, dtype="float32") /* ty=Tensor[(16, 5, 7), float32] */;
  %605 = tan(%604) /* ty=Tensor[(16, 5, 7), float32] */;
  %606 = cast(%605, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
  %607 = cast(meta[relay.Constant][37] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %608 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 336), int16] */, dtype="int16") /* ty=Tensor[(2, 336), int16] */;
  %609 = reshape(%607, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %610 = reshape(%608, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %611 = @func_592(%609, %610) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %612 = greater_equal(%602, %603) /* ty=Tensor[(16, 5, 7), bool] */;
  %613 = sigmoid(%606) /* ty=Tensor[(16, 5, 7), float64] */;
  %614 = %611.0;
  (%612, %613, %614, meta[relay.Constant][37] /* ty=Tensor[(112), int16] */, meta[relay.Constant][38] /* ty=Tensor[(2, 336), int16] */)
}

def @func_7825() -> (Tensor[(16, 5, 7), bool],) {
  %617 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %615 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %616 = %615.0;
    (%616,)
  };
  %617() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_2922(%var_2921: Tensor[(6, 14, 12), float32]) -> Tensor[(6, 14, 12), float32] {
  %619 = fn (%var_2891: Tensor[(6, 14, 12), float32]) -> Tensor[(6, 14, 12), float32] {
    %618 = cast(%var_2891, dtype="float32") /* ty=Tensor[(6, 14, 12), float32] */;
    cos(%618) /* ty=Tensor[(6, 14, 12), float32] */
  };
  %619(%var_2921) /* ty=Tensor[(6, 14, 12), float32] */
}

def @func_1077(%var_1075: Tensor[(16, 2, 15), float32], %var_1076: Tensor[(16, 2, 15), float32]) -> (Tensor[(16, 2, 15), bool], Tensor[(16, 2, 15), int8]) {
  @func_1073(%var_1075, %var_1076) /* ty=(Tensor[(16, 2, 15), bool], Tensor[(16, 2, 15), int8]) */
}

def @func_3428() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) {
  @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */
}

def @func_7863(%var_7861: Tensor[(56, 2), int16], %var_7862: Tensor[(56, 2), int16]) -> (Tensor[(16, 5, 7), bool], Tensor[(16, 6, 7), int16], Tensor[(672), int16], Tensor[(56, 2), uint64]) {
  @func_7859(%var_7861, %var_7862) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 6, 7), int16], Tensor[(672), int16], Tensor[(56, 2), uint64]) */
}

def @func_8816() -> Tensor[(2, 336), int16] {
  %620 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %620.1
}

def @func_1443(%var_1441: Tensor[(7, 3, 8), int16], %var_1442: Tensor[(7, 3, 8), int16]) -> Tensor[(7, 3, 8), int16] {
  %625 = fn (%var_1429: Tensor[(7, 3, 8), int16], %var_1430: Tensor[(7, 3, 8), int16]) -> Tensor[(7, 3, 8), int16] {
    %621 = cast(%var_1430, dtype="int16") /* ty=Tensor[(7, 3, 8), int16] */;
    %622 = shape_of(%var_1429, dtype="int32") /* ty=Tensor[(3), int32] */;
    %623 = cast(%var_1429, dtype="int16") /* ty=Tensor[(7, 3, 8), int16] */;
    %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    multiply(%623, %624) /* ty=Tensor[(7, 3, 8), int16] */
  };
  %625(%var_1441, %var_1442) /* ty=Tensor[(7, 3, 8), int16] */
}

def @func_9456(%var_9454: Tensor[(13, 1, 2), int32], %var_9455: Tensor[(13, 15, 2), int32]) -> (Tensor[(13, 15, 2), int32], Tensor[(16, 5, 7), bool]) {
  @func_9452(%var_9454, %var_9455) /* ty=(Tensor[(13, 15, 2), int32], Tensor[(16, 5, 7), bool]) */
}

def @func_303(%var_301: bool) -> (Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) {
  @func_300(%var_301) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */
}

def @func_5903() -> Tensor[(2, 336), float32] {
  @func_5901() /* ty=Tensor[(2, 336), float32] */
}

def @func_6728() -> (Tensor[(16, 6, 7), int16], Tensor[(16, 5, 7), float32]) {
  @func_6726() /* ty=(Tensor[(16, 6, 7), int16], Tensor[(16, 5, 7), float32]) */
}

def @func_9171(%var_9170: Tensor[(7, 4, 8), int64]) -> (Tensor[(7, 4, 8), int64],) {
  %629 = fn (%var_9161: Tensor[(7, 4, 8), int64]) -> (Tensor[(7, 4, 8), int64],) {
    %626 = cast(10 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %627 = cast(%var_9161, dtype="int64") /* ty=Tensor[(7, 4, 8), int64] */;
    %628 = subtract(%626, %627) /* ty=Tensor[(7, 4, 8), int64] */;
    (%628,)
  };
  %629(%var_9170) /* ty=(Tensor[(7, 4, 8), int64],) */
}

def @func_2730(%var_2729: Tensor[(4, 5, 10), float64]) -> Tensor[(4, 5, 10), float64] {
  %631 = fn (%var_2707: Tensor[(4, 5, 10), float64]) -> Tensor[(4, 5, 10), float64] {
    %630 = cast(%var_2707, dtype="float64") /* ty=Tensor[(4, 5, 10), float64] */;
    sin(%630) /* ty=Tensor[(4, 5, 10), float64] */
  };
  %631(%var_2729) /* ty=Tensor[(4, 5, 10), float64] */
}

def @func_5424() -> (Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) {
  %632 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
  %633 = %632.0;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %635 = cast(meta[relay.Constant][39] /* ty=Tensor[(2, 336), int16] */, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %636 = shape_of(%633, dtype="int32") /* ty=Tensor[(2), int32] */;
  %637 = cast(%633, dtype="uint64") /* ty=Tensor[(2, 336), uint64] */;
  %638 = dyn.reshape(%635, %636, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %639 = @func_4521() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
  %640 = exp(%634) /* ty=Tensor[(2, 336), float32] */;
  %641 = add(%637, %638) /* ty=Tensor[(2, 336), uint64] */;
  %642 = %639.0;
  (%640, %641, %642)
}

def @func_9299() -> (Tensor[(2, 336), int16], Tensor[(2, 336), int16]) {
  %643 = @func_8816() /* ty=Tensor[(2, 336), int16] */;
  %644 = @func_5545() /* ty=Tensor[(2, 336), int16] */;
  (%643, %644)
}

def @func_6354(%var_6327: Tensor[(672), int16], %var_6339: Tensor[(13, 1), uint64]) -> (bool, Tensor[(2, 336), int16], Tensor[(672), int16], Tensor[(?, 13), uint64], Tensor[(13, 1), uint64], Tensor[(16, 5, 7), bool]) {
  %645 = @func_4683() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool], bool, Tensor[(225), bool], Tensor[(13, 7, 16), float64], Tensor[(1456), float64]) */;
  %646 = cast(%var_6327, dtype="int16") /* ty=Tensor[(672), int16] */;
  %647 = reshape(%646, newshape=[2, 336]) /* ty=Tensor[(2, 336), int16] */;
  %648 = @func_5794(%647) /* ty=(Tensor[(2, 336), int16],) */;
  %649 = cast(%var_6339, dtype="uint64") /* ty=Tensor[(13, 1), uint64] */;
  %650 = cast(%var_6339, dtype="uint64") /* ty=Tensor[(13, 1), uint64] */;
  %651 = reshape(%649, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %652 = reshape(%650, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %653 = @func_5506() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %654 = %645.2;
  %655 = %648.0;
  %656 = @func_1627(%651, %652) /* ty=Tensor[(?, 13), uint64] */;
  %657 = %653.1;
  (%654, %655, %var_6327, %656, %var_6339, %657)
}

def @func_6638() -> (Tensor[(16, 5, 7), bool],) {
  %659 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %658 = @func_5928() /* ty=Tensor[(16, 5, 7), bool] */;
    (%658,)
  };
  %659() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_9240(%var_9238: Tensor[(16, 5, 7), bool]) -> (Tensor[(16, 5, 7), int32], Tensor[(16, 5, 7), bool]) {
  @func_9237(%var_9238) /* ty=(Tensor[(16, 5, 7), int32], Tensor[(16, 5, 7), bool]) */
}

def @func_300(%var_282: bool) -> (Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) {
  %660 = cast(%var_282, dtype="bool") /* ty=bool */;
  %661 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 7, 6), bool] */, dtype="bool") /* ty=Tensor[(14, 7, 6), bool] */;
  %662 = cast(meta[relay.Constant][40] /* ty=Tensor[(14, 7, 6), bool] */, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %663 = logical_or(%660, %661) /* ty=Tensor[(14, 7, 6), bool] */;
  %664 = log(%662) /* ty=Tensor[(14, 7, 6), float32] */;
  (%663, %664)
}

def @func_340(%var_327: Tensor[(5, 1, 10), uint32], %var_328: Tensor[(5, 5, 10), uint32]) -> Tensor[(5, 5, 10), bool] {
  %665 = cast(%var_327, dtype="bool") /* ty=Tensor[(5, 1, 10), bool] */;
  %666 = cast(%var_328, dtype="bool") /* ty=Tensor[(5, 5, 10), bool] */;
  not_equal(%665, %666) /* ty=Tensor[(5, 5, 10), bool] */
}

def @func_6185(%var_6176: Tensor[(5, 15, 14), float32]) -> Tensor[(5, 15, 14), float32] {
  %667 = cast(%var_6176, dtype="float32") /* ty=Tensor[(5, 15, 14), float32] */;
  cos(%667) /* ty=Tensor[(5, 15, 14), float32] */
}

def @func_4078() -> (Tensor[(16, 5, 7), bool],) {
  %670 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %668 = @func_3946() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %669 = %668.0;
    (%669,)
  };
  %670() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_8489(%var_8485: uint16, %var_8486: Tensor[(13, 9, 7), uint16], %var_8487: Tensor[(225), bool], %var_8488: Tensor[(13, 9, 7), uint16]) -> (Tensor[(13, 9, 7), uint16], Tensor[(16, 5, 7), float64], Tensor[(250), uint32], Tensor[(96), float32], Tensor[(225), bool], Tensor[(50), uint32], Tensor[(588), bool], Tensor[(13, 9, 7), bool]) {
  %694 = fn (%var_8455: uint16, %var_8456: Tensor[(13, 9, 7), uint16], %var_8466: Tensor[(225), bool], %var_8473: Tensor[(13, 9, 7), uint16]) -> (Tensor[(13, 9, 7), uint16], Tensor[(16, 5, 7), float64], Tensor[(250), uint32], Tensor[(96), float32], Tensor[(225), bool], Tensor[(50), uint32], Tensor[(588), bool], Tensor[(13, 9, 7), bool]) {
    %671 = cast(%var_8455, dtype="uint16") /* ty=uint16 */;
    %672 = cast(%var_8456, dtype="uint16") /* ty=Tensor[(13, 9, 7), uint16] */;
    %673 = cast(meta[relay.Constant][41] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %674 = cast(meta[relay.Constant][41] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
    %675 = cast(%var_8455, dtype="bool") /* ty=bool */;
    %676 = cast(%var_8466, dtype="bool") /* ty=Tensor[(225), bool] */;
    %677 = cast(meta[relay.Constant][42] /* ty=Tensor[(50), uint32] */, dtype="uint32") /* ty=Tensor[(50), uint32] */;
    %678 = cast(meta[relay.Constant][43] /* ty=Tensor[(588), bool] */, dtype="bool") /* ty=Tensor[(588), bool] */;
    %679 = reshape(%673, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
    %680 = reshape(%674, newshape=[4, 3, 8]) /* ty=Tensor[(4, 3, 8), float32] */;
    %681 = reshape(%675, newshape=[]) /* ty=bool */;
    %682 = reshape(%676, newshape=[225]) /* ty=Tensor[(225), bool] */;
    %683 = reshape(%677, newshape=[50]) /* ty=Tensor[(50), uint32] */;
    %684 = reshape(%678, newshape=[14, 7, 6]) /* ty=Tensor[(14, 7, 6), bool] */;
    %685 = @func_849(%679, %680, %681, %682, %683, %684) /* ty=(Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) */;
    %686 = cast(%var_8473, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
    %687 = shape_of(%var_8456, dtype="int32") /* ty=Tensor[(3), int32] */;
    %688 = cast(%var_8456, dtype="bool") /* ty=Tensor[(13, 9, 7), bool] */;
    %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %690 = bitwise_or(%671, %672) /* ty=Tensor[(13, 9, 7), uint16] */;
    %691 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
    %692 = %685.8;
    %693 = logical_and(%688, %689) /* ty=Tensor[(13, 9, 7), bool] */;
    (%690, %691, %692, meta[relay.Constant][41] /* ty=Tensor[(96), float32] */, %var_8466, meta[relay.Constant][42] /* ty=Tensor[(50), uint32] */, meta[relay.Constant][43] /* ty=Tensor[(588), bool] */, %693)
  };
  %694(%var_8485, %var_8486, %var_8487, %var_8488) /* ty=(Tensor[(13, 9, 7), uint16], Tensor[(16, 5, 7), float64], Tensor[(250), uint32], Tensor[(96), float32], Tensor[(225), bool], Tensor[(50), uint32], Tensor[(588), bool], Tensor[(13, 9, 7), bool]) */
}

def @func_7795(%var_7794: Tensor[(2, 336), float64]) -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), float32], Tensor[(2, 336), uint8]) {
  %710 = fn (%var_7788: Tensor[(2, 336), float64]) -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), float32], Tensor[(2, 336), uint8]) {
    %695 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %696 = @func_6610() /* ty=(Tensor[(2, 336), float32],) */;
    %697 = %696.0;
    %698 = cast(%697, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
    %699 = rsqrt(%698) /* ty=Tensor[(2, 336), float64] */;
    %700 = cast(%699, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
    %701 = cos(%700) /* ty=Tensor[(2, 336), float64] */;
    %702 = cast(%701, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
    %703 = cast(%var_7788, dtype="uint8") /* ty=Tensor[(2, 336), uint8] */;
    %704 = shape_of(%701, dtype="int32") /* ty=Tensor[(2), int32] */;
    %705 = cast(%701, dtype="uint8") /* ty=Tensor[(2, 336), uint8] */;
    %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %707 = %695.0;
    %708 = asin(%702) /* ty=Tensor[(2, 336), float32] */;
    %709 = left_shift(%705, %706) /* ty=Tensor[(2, 336), uint8] */;
    (%707, %708, %709)
  };
  %710(%var_7794) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), float32], Tensor[(2, 336), uint8]) */
}

def @func_7883() -> Tensor[(2, 336), int16] {
  @func_7881() /* ty=Tensor[(2, 336), int16] */
}

def @func_4782() -> (Tensor[(16, 5, 7), bool],) {
  @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_6188(%var_6186: Tensor[(5, 15, 14), float32]) -> Tensor[(5, 15, 14), float32] {
  @func_6185(%var_6186) /* ty=Tensor[(5, 15, 14), float32] */
}

def @func_5058() -> (Tensor[(16, 5, 7), float64],) {
  %713 = fn () -> (Tensor[(16, 5, 7), float64],) {
    %711 = @func_4722() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */;
    %712 = %711.0;
    (%712,)
  };
  %713() /* ty=(Tensor[(16, 5, 7), float64],) */
}

def @func_6158(%var_6074: Tensor[(168), int16]) -> (Tensor[(2, 336), bool], Tensor[(384), float64], Tensor[(96), float32], Tensor[(7, 3, 8), int16], Tensor[(168), int16], Tensor[(16, 5, 7), bool], Tensor[(14, 7, 6), bool], Tensor[(240), float64], Tensor[(225), bool], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16], Tensor[(2, 336), uint32], Tensor[(2, 336), float32]) {
  %714 = @func_5424() /* ty=(Tensor[(2, 336), float32], Tensor[(2, 336), uint64], Tensor[(16, 5, 7), bool]) */;
  %715 = %714.0;
  %716 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 336), float32] */, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(2), int32] */;
  %718 = cast(%715, dtype="bool") /* ty=Tensor[(2, 336), bool] */;
  %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %720 = cast(meta[relay.Constant][45] /* ty=Tensor[(96), float32] */, dtype="float32") /* ty=Tensor[(96), float32] */;
  %721 = reshape(%720, newshape=[8, 12]) /* ty=Tensor[(8, 12), float32] */;
  %722 = @func_3681(%721) /* ty=(Tensor[(16, 5, 7), bool], Tensor[(?, 13), uint64], Tensor[(384), float64], Tensor[(8, 12), float32], bool) */;
  %723 = cast(%var_6074, dtype="int16") /* ty=Tensor[(168), int16] */;
  %724 = cast(%var_6074, dtype="int16") /* ty=Tensor[(168), int16] */;
  %725 = reshape(%723, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), int16] */;
  %726 = reshape(%724, newshape=[7, 3, 8]) /* ty=Tensor[(7, 3, 8), int16] */;
  %727 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %728 = cast(meta[relay.Constant][46] /* ty=Tensor[(240), float64] */, dtype="float64") /* ty=Tensor[(240), float64] */;
  %729 = cast(meta[relay.Constant][47] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %730 = reshape(%728, newshape=[6, 4, 10]) /* ty=Tensor[(6, 4, 10), float64] */;
  %731 = reshape(%729, newshape=[225, 1]) /* ty=Tensor[(225, 1), bool] */;
  %732 = @func_4410(%730, %731) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(225, 1), bool], Tensor[(6, 4, 10), float64], Tensor[(13, 7, 16), float64], Tensor[(1456), float64], Tensor[(2, 336), int16]) */;
  %733 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %734 = @func_5317() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */;
  %735 = cast(meta[relay.Constant][47] /* ty=Tensor[(225), bool] */, dtype="bool") /* ty=Tensor[(225), bool] */;
  %736 = reshape(%735, newshape=[225]) /* ty=Tensor[(225), bool] */;
  %737 = @func_4975(%736) /* ty=(Tensor[(2, 336), int16], Tensor[(14, 7, 6), bool], Tensor[(225), bool]) */;
  %738 = cast(meta[relay.Constant][44] /* ty=Tensor[(2, 336), float32] */, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %739 = erf(%738) /* ty=Tensor[(2, 336), float32] */;
  %740 = cast(%739, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
  %741 = sinh(%740) /* ty=Tensor[(2, 336), float64] */;
  %742 = cast(%741, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %743 = log(%742) /* ty=Tensor[(2, 336), float32] */;
  %744 = cast(%741, dtype="uint32") /* ty=Tensor[(2, 336), uint32] */;
  %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(2), int32] */;
  %746 = cast(%743, dtype="uint32") /* ty=Tensor[(2, 336), uint32] */;
  %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %748 = cast(%741, dtype="float32") /* ty=Tensor[(2, 336), float32] */;
  %749 = not_equal(%718, %719) /* ty=Tensor[(2, 336), bool] */;
  %750 = %722.2;
  %751 = @func_1440(%725, %726) /* ty=Tensor[(7, 3, 8), int16] */;
  %752 = %727.0;
  %753 = %732.0;
  %754 = %733.0;
  %755 = %734.0;
  %756 = @func_3905() /* ty=Tensor[(16, 5, 7), bool] */;
  %757 = %737.0;
  %758 = maximum(%746, %747) /* ty=Tensor[(2, 336), uint32] */;
  %759 = sin(%748) /* ty=Tensor[(2, 336), float32] */;
  (%749, %750, meta[relay.Constant][45] /* ty=Tensor[(96), float32] */, %751, %var_6074, %752, %753, meta[relay.Constant][46] /* ty=Tensor[(240), float64] */, meta[relay.Constant][47] /* ty=Tensor[(225), bool] */, %754, %755, %756, %757, %758, %759)
}

def @func_4723() -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) {
  %767 = fn () -> (Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) {
    %760 = @func_4558() /* ty=Tensor[(16, 5, 7), float64] */;
    %761 = cast(%760, dtype="float64") /* ty=Tensor[(16, 5, 7), float64] */;
    %762 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %763 = @func_4457() /* ty=(Tensor[(2, 336), int16],) */;
    %764 = sinh(%761) /* ty=Tensor[(16, 5, 7), float64] */;
    %765 = %762.0;
    %766 = %763.0;
    (%764, %765, %766)
  };
  %767() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */
}

def @func_9110() -> Tensor[(2, 336), float64] {
  %770 = fn () -> Tensor[(2, 336), float64] {
    %768 = @func_5545() /* ty=Tensor[(2, 336), int16] */;
    %769 = cast(%768, dtype="float64") /* ty=Tensor[(2, 336), float64] */;
    atanh(%769) /* ty=Tensor[(2, 336), float64] */
  };
  %770() /* ty=Tensor[(2, 336), float64] */
}

def @func_3906() -> Tensor[(16, 5, 7), bool] {
  %771 = fn () -> Tensor[(16, 5, 7), bool] {
    @func_3479() /* ty=Tensor[(16, 5, 7), bool] */
  };
  %771() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_9096() -> (Tensor[(16, 5, 7), float64], Tensor[(2, 336), float32], Tensor[(672, 1), int16], Tensor[(16, 5, 7), bool]) {
  @func_9094() /* ty=(Tensor[(16, 5, 7), float64], Tensor[(2, 336), float32], Tensor[(672, 1), int16], Tensor[(16, 5, 7), bool]) */
}

def @func_6001(%var_5934: Tensor[(9, 2, 8), uint32], %var_5935: Tensor[(9, 2, 8), uint32]) -> (Tensor[(9, 2, 8), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %772 = cast(%var_5935, dtype="uint32") /* ty=Tensor[(9, 2, 8), uint32] */;
  %773 = shape_of(%var_5934, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%var_5934, dtype="uint32") /* ty=Tensor[(9, 2, 8), uint32] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %776 = bitwise_xor(%774, %775) /* ty=Tensor[(9, 2, 8), uint32] */;
  %777 = @func_5928() /* ty=Tensor[(16, 5, 7), bool] */;
  %778 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
  (%776, %777, %778)
}

def @func_3090(%var_3081: Tensor[(13, 7, 16), float64]) -> (Tensor[(13, 7, 16), float64],) {
  %779 = cast(%var_3081, dtype="float64") /* ty=Tensor[(13, 7, 16), float64] */;
  %780 = tan(%779) /* ty=Tensor[(13, 7, 16), float64] */;
  (%780,)
}

def @func_9237(%var_9209: Tensor[(16, 5, 7), bool]) -> (Tensor[(16, 5, 7), int32], Tensor[(16, 5, 7), bool]) {
  %781 = @func_4639() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %782 = %781.0;
  %783 = cast(%var_9209, dtype="int32") /* ty=Tensor[(16, 5, 7), int32] */;
  %784 = shape_of(%782, dtype="int32") /* ty=Tensor[(3), int32] */;
  %785 = cast(%782, dtype="int32") /* ty=Tensor[(16, 5, 7), int32] */;
  %786 = dyn.reshape(%783, %784, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %787 = @func_6216() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %788 = subtract(%785, %786) /* ty=Tensor[(16, 5, 7), int32] */;
  %789 = %787.0;
  (%788, %789)
}

def @func_4522() -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) {
  %793 = fn () -> (Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) {
    %790 = @func_4077() /* ty=(Tensor[(16, 5, 7), bool],) */;
    %791 = %790.0;
    %792 = @func_3712() /* ty=Tensor[(2, 336), int16] */;
    (%791, %792)
  };
  %793() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(2, 336), int16]) */
}

def @func_6005(%var_6003: Tensor[(9, 2, 8), uint32], %var_6004: Tensor[(9, 2, 8), uint32]) -> (Tensor[(9, 2, 8), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  @func_6001(%var_6003, %var_6004) /* ty=(Tensor[(9, 2, 8), uint32], Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */
}

def @func_7688() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  @func_7686() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) */
}

def @func_595(%var_593: Tensor[(16, 1, 7), int16], %var_594: Tensor[(16, 6, 7), int16]) -> (Tensor[(16, 6, 7), int16],) {
  %797 = fn (%var_586: Tensor[(16, 1, 7), int16], %var_587: Tensor[(16, 6, 7), int16]) -> (Tensor[(16, 6, 7), int16],) {
    %794 = cast(%var_586, dtype="int16") /* ty=Tensor[(16, 1, 7), int16] */;
    %795 = cast(%var_587, dtype="int16") /* ty=Tensor[(16, 6, 7), int16] */;
    %796 = bitwise_or(%794, %795) /* ty=Tensor[(16, 6, 7), int16] */;
    (%796,)
  };
  %797(%var_593, %var_594) /* ty=(Tensor[(16, 6, 7), int16],) */
}

def @func_856(%var_850: Tensor[(4, 3, 8), float32], %var_851: Tensor[(4, 3, 8), float32], %var_852: bool, %var_853: Tensor[(225), bool], %var_854: Tensor[(50), uint32], %var_855: Tensor[(14, 7, 6), bool]) -> (Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) {
  %836 = fn (%var_741: Tensor[(4, 3, 8), float32], %var_742: Tensor[(4, 3, 8), float32], %var_752: bool, %var_770: Tensor[(225), bool], %var_832: Tensor[(50), uint32], %var_838: Tensor[(14, 7, 6), bool]) -> (Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) {
    %798 = cast(%var_742, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %799 = shape_of(%var_741, dtype="int32") /* ty=Tensor[(3), int32] */;
    %800 = cast(%var_741, dtype="float32") /* ty=Tensor[(4, 3, 8), float32] */;
    %801 = dyn.reshape(%798, %799, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %802 = cast(%var_770, dtype="bool") /* ty=Tensor[(225), bool] */;
    %803 = reshape(%802, newshape=[5, 9, 5]) /* ty=Tensor[(5, 9, 5), bool] */;
    %804 = @func_633(%803) /* ty=(Tensor[(5, 9, 5), bool], Tensor[(14, 7, 6), bool], bool, Tensor[(5, 9, 5), float32]) */;
    %805 = cast(%var_752, dtype="bool") /* ty=bool */;
    %806 = reshape(%805, newshape=[]) /* ty=bool */;
    %807 = @func_300(%806) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
    %808 = %807.0;
    %809 = cast(%808, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
    %810 = rsqrt(%809) /* ty=Tensor[(14, 7, 6), float64] */;
    %811 = cast(%var_752, dtype="bool") /* ty=bool */;
    %812 = reshape(%811, newshape=[]) /* ty=bool */;
    %813 = @func_300(%812) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
    %814 = %813.0;
    %815 = cast(%814, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
    %816 = shape_of(%810, dtype="int32") /* ty=Tensor[(3), int32] */;
    %817 = cast(%810, dtype="float64") /* ty=Tensor[(14, 7, 6), float64] */;
    %818 = dyn.reshape(%815, %816, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %819 = cast(%var_752, dtype="bool") /* ty=bool */;
    %820 = reshape(%819, newshape=[]) /* ty=bool */;
    %821 = @func_300(%820) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
    %822 = cast(%var_832, dtype="uint32") /* ty=Tensor[(50), uint32] */;
    %823 = cast(meta[relay.Constant][48] /* ty=Tensor[(250), uint32] */, dtype="uint32") /* ty=Tensor[(250), uint32] */;
    %824 = reshape(%822, newshape=[5, 1, 10]) /* ty=Tensor[(5, 1, 10), uint32] */;
    %825 = reshape(%823, newshape=[5, 5, 10]) /* ty=Tensor[(5, 5, 10), uint32] */;
    %826 = cast(%var_838, dtype="int16") /* ty=Tensor[(14, 7, 6), int16] */;
    %827 = shape_of(%808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %828 = cast(%808, dtype="int16") /* ty=Tensor[(14, 7, 6), int16] */;
    %829 = dyn.reshape(%826, %827, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %830 = floor_divide(%800, %801) /* ty=Tensor[(4, 3, 8), float32] */;
    %831 = %804.0;
    %832 = power(%817, %818) /* ty=Tensor[(14, 7, 6), float64] */;
    %833 = %821.0;
    %834 = @func_340(%824, %825) /* ty=Tensor[(5, 5, 10), bool] */;
    %835 = multiply(%828, %829) /* ty=Tensor[(14, 7, 6), int16] */;
    (%830, %var_752, %831, %var_770, %832, %833, %834, %var_832, meta[relay.Constant][48] /* ty=Tensor[(250), uint32] */, %835)
  };
  %836(%var_850, %var_851, %var_852, %var_853, %var_854, %var_855) /* ty=(Tensor[(4, 3, 8), float32], bool, Tensor[(5, 9, 5), bool], Tensor[(225), bool], Tensor[(14, 7, 6), float64], Tensor[(14, 7, 6), bool], Tensor[(5, 5, 10), bool], Tensor[(50), uint32], Tensor[(250), uint32], Tensor[(14, 7, 6), int16]) */
}

def @func_5506() -> (Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), bool]) {
  %837 = @func_4780() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %838 = @func_5449() /* ty=(Tensor[(16, 5, 7), bool],) */;
  %839 = %837.0;
  %840 = %838.0;
  (%839, %840)
}

def @func_4560() -> Tensor[(16, 5, 7), float64] {
  @func_4558() /* ty=Tensor[(16, 5, 7), float64] */
}

def @func_3713() -> Tensor[(2, 336), int16] {
  %842 = fn () -> Tensor[(2, 336), int16] {
    %841 = @func_3426() /* ty=(Tensor[(16, 5, 7), bool], Tensor[(16, 5, 7), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(2, 336), int16]) */;
    %841.4
  };
  %842() /* ty=Tensor[(2, 336), int16] */
}

def @func_5930() -> Tensor[(16, 5, 7), bool] {
  @func_5928() /* ty=Tensor[(16, 5, 7), bool] */
}

def @func_3947() -> (Tensor[(16, 5, 7), bool],) {
  %844 = fn () -> (Tensor[(16, 5, 7), bool],) {
    %843 = @func_3479() /* ty=Tensor[(16, 5, 7), bool] */;
    (%843,)
  };
  %844() /* ty=(Tensor[(16, 5, 7), bool],) */
}

def @func_8191() -> (Tensor[(16, 5, 7), float64],) {
  %845 = @func_5366() /* ty=Tensor[(16, 5, 7), float64] */;
  (%845,)
}

def @func_3607(%var_3504: Tensor[(3, 1, 3), float64], %var_3550: Tensor[(672), int16], %var_3560: Tensor[(56), int32], %var_3605: Tensor[(13), uint64]) -> (Tensor[(3, ?, 3), float64], Tensor[(3, 1, 3), int32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 2, 2), bool], Tensor[(56), int32], Tensor[(3, ?, 3), float32], Tensor[(14, 7, 6), float32], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(81), float64], Tensor[(?, 13), uint64], Tensor[(13), uint64]) {
  %846 = cast(%var_3504, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %847 = exp(%846) /* ty=Tensor[(3, 1, 3), float32] */;
  %848 = cast(%847, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %849 = shape_of(%var_3504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %850 = cast(%var_3504, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %851 = dyn.reshape(%848, %849, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %852 = cast(%var_3504, dtype="float64") /* ty=Tensor[(3, 1, 3), float64] */;
  %853 = erf(%852) /* ty=Tensor[(3, 1, 3), float64] */;
  %854 = cast(%853, dtype="int32") /* ty=Tensor[(3, 1, 3), int32] */;
  %855 = cast(True /* ty=bool */, dtype="int32") /* ty=int32 */;
  %856 = cast(meta[relay.Constant][49] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %857 = cast(%var_3550, dtype="int16") /* ty=Tensor[(672), int16] */;
  %858 = reshape(%856, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %859 = reshape(%857, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %860 = @func_592(%858, %859) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %861 = cast(%var_3560, dtype="int32") /* ty=Tensor[(56), int32] */;
  %862 = reshape(%861, newshape=[14, 2, 2]) /* ty=Tensor[(14, 2, 2), int32] */;
  %863 = @func_2207(%862) /* ty=(Tensor[(14, 2, 2), bool],) */;
  %864 = cast(%853, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %865 = shape_of(%847, dtype="int32") /* ty=Tensor[(3), int32] */;
  %866 = cast(%847, dtype="float32") /* ty=Tensor[(3, 1, 3), float32] */;
  %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %868 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %869 = reshape(%868, newshape=[]) /* ty=bool */;
  %870 = @func_300(%869) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(14, 7, 6), float32]) */;
  %871 = %870.0;
  %872 = cast(%871, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %873 = cast(meta[relay.Constant][49] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %874 = %860.0;
  %875 = cast(%874, dtype="int16") /* ty=Tensor[(16, 6, 7), int16] */;
  %876 = reshape(%873, newshape=[16, 1, 7]) /* ty=Tensor[(16, 1, 7), int16] */;
  %877 = reshape(%875, newshape=[16, 6, 7]) /* ty=Tensor[(16, 6, 7), int16] */;
  %878 = @func_592(%876, %877) /* ty=(Tensor[(16, 6, 7), int16],) */;
  %879 = cast(meta[relay.Constant][50] /* ty=Tensor[(81), float64] */, dtype="float64") /* ty=Tensor[(81), float64] */;
  %880 = cast(meta[relay.Constant][49] /* ty=Tensor[(112), int16] */, dtype="int16") /* ty=Tensor[(112), int16] */;
  %881 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %882 = reshape(%879, newshape=[9, 3, 3]) /* ty=Tensor[(9, 3, 3), float64] */;
  %883 = reshape(%880, newshape=[112]) /* ty=Tensor[(112), int16] */;
  %884 = reshape(%881, newshape=[]) /* ty=bool */;
  %885 = @func_1747(%882, %883, %884) /* ty=(Tensor[(9, 3, 3), float64], Tensor[(16, 6, 7), int16], Tensor[(112), int16], Tensor[(672), int16], Tensor[(14, 7, 6), bool], bool) */;
  %886 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %887 = cast(%var_3605, dtype="uint64") /* ty=Tensor[(13), uint64] */;
  %888 = reshape(%886, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %889 = reshape(%887, newshape=[1, 13]) /* ty=Tensor[(1, 13), uint64] */;
  %890 = floor_divide(%850, %851) /* ty=Tensor[(3, ?, 3), float64] */;
  %891 = left_shift(%854, %855) /* ty=Tensor[(3, 1, 3), int32] */;
  %892 = %863.0;
  %893 = mod(%866, %867) /* ty=Tensor[(3, ?, 3), float32] */;
  %894 = atanh(%872) /* ty=Tensor[(14, 7, 6), float32] */;
  %895 = %878.0;
  %896 = %885.2;
  %897 = @func_1627(%888, %889) /* ty=Tensor[(?, 13), uint64] */;
  (%890, %891, %874, meta[relay.Constant][49] /* ty=Tensor[(112), int16] */, %var_3550, %892, %var_3560, %893, %894, %895, %896, meta[relay.Constant][50] /* ty=Tensor[(81), float64] */, %897, %var_3605)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen508/build/output.py", line 2285, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:25:55] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

