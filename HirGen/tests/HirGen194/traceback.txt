==========mod==========
#[version = "0.0.5"]
def @func_1231(%var_1220: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64],) {
  %0 = cast(%var_1220, dtype="float64") /* ty=Tensor[(5, 2, 2), float64] */;
  %1 = atanh(%0) /* ty=Tensor[(5, 2, 2), float64] */;
  (%1,)
}

def @func_1058(%var_1051: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64],) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %3 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_1051, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %6 = floor_divide(%4, %5) /* ty=Tensor[(8, 3, 11), float64] */;
  (%6,)
}

def @func_286(%var_239: Tensor[(1, 10, 6), float32]) -> (Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) {
  %7 = cast(%var_239, dtype="float32") /* ty=Tensor[(1, 10, 6), float32] */;
  %8 = acosh(%7) /* ty=Tensor[(1, 10, 6), float32] */;
  %9 = cast(%8, dtype="float32") /* ty=Tensor[(1, 10, 6), float32] */;
  %10 = sinh(%9) /* ty=Tensor[(1, 10, 6), float32] */;
  %11 = cast(%var_239, dtype="int32") /* ty=Tensor[(1, 10, 6), int32] */;
  %12 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %13 = cast(%8, dtype="int32") /* ty=Tensor[(1, 10, 6), int32] */;
  %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %15 = add(%13, %14) /* ty=Tensor[(?, 10, 6), int32] */;
  %16 = cast(%15, dtype="int32") /* ty=Tensor[(?, 10, 6), int32] */;
  %17 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
  %18 = cast(%10, dtype="int32") /* ty=Tensor[(1, 10, 6), int32] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %20 = right_shift(%18, %19) /* ty=Tensor[(?, 10, 6), int32] */;
  %21 = cast(%15, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%20, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = cast(%20, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
  %26 = shape_of(%15, dtype="int32") /* ty=Tensor[(3), int32] */;
  %27 = cast(%15, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %29 = cast(%10, dtype="float64") /* ty=Tensor[(1, 10, 6), float64] */;
  %30 = cast(%8, dtype="float32") /* ty=Tensor[(1, 10, 6), float32] */;
  %31 = less(%23, %24) /* ty=Tensor[(?, 10, 6), bool] */;
  %32 = logical_and(%27, %28) /* ty=Tensor[(?, 10, 6), bool] */;
  %33 = sigmoid(%29) /* ty=Tensor[(1, 10, 6), float64] */;
  %34 = acos(%30) /* ty=Tensor[(1, 10, 6), float32] */;
  (%31, %32, %33, %34)
}

def @func_4542(%var_4493: Tensor[(693), float64], %var_4494: Tensor[(88), bool], %var_4501: Tensor[(1568), float64], %var_4515: Tensor[(360, 4), int8]) -> (Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) {
  %35 = cast(%var_4493, dtype="float64") /* ty=Tensor[(693), float64] */;
  %36 = cast(%var_4494, dtype="bool") /* ty=Tensor[(88), bool] */;
  %37 = reshape(%35, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %38 = reshape(%36, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %39 = @func_721(%37, %38) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */;
  %40 = %39.1;
  %41 = cast(%var_4501, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
  %43 = cast(%40, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), float64] */;
  %45 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %46 = %45.0;
  %47 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %48 = %47.0;
  %49 = cast(%48, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %50 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%46, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %53 = cast(%var_4515, dtype="int8") /* ty=Tensor[(360, 4), int8] */;
  %54 = cast(%var_4515, dtype="int8") /* ty=Tensor[(360, 4), int8] */;
  %55 = reshape(%53, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
  %56 = reshape(%54, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
  %57 = greater_equal(%51, %52) /* ty=Tensor[(6, 13, 3), bool] */;
  %58 = cast(%57, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %59 = reshape(%58, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %60 = @func_2967(%59) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) */;
  %61 = maximum(%43, %44) /* ty=Tensor[(1568), float64] */;
  %62 = @func_4334(%55, %56) /* ty=Tensor[(9, 10, 16), int8] */;
  %63 = %60.2;
  (%var_4493, %var_4494, %61, %57, %62, %var_4515, %63)
}

def @func_6105(%var_6065: Tensor[(16, 12, 16), float64], %var_6072: Tensor[(1568), float64]) -> (Tensor[(60), float32], Tensor[(1568), float64], Tensor[(16, 12, 16), int8]) {
  %64 = cast(%var_6072, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %65 = cast(%var_6072, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %66 = reshape(%64, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %67 = reshape(%65, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %68 = @func_529(%66, %67) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %69 = cast(%var_6065, dtype="float64") /* ty=Tensor[(16, 12, 16), float64] */;
  %70 = sqrt(%69) /* ty=Tensor[(16, 12, 16), float64] */;
  %71 = cast(meta[relay.Constant][1] /* ty=Tensor[(16, 12, 16), float64] */, dtype="int8") /* ty=Tensor[(16, 12, 16), int8] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="int8") /* ty=Tensor[(16, 12, 16), int8] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %75 = %68.2;
  %76 = logical_xor(%73, %74) /* ty=Tensor[(16, 12, 16), int8] */;
  (%75, %var_6072, %76)
}

def @func_5247() -> (Tensor[(6, 13, 3), float32],) {
  %77 = @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %78 = %77.0;
  (%78,)
}

def @func_7156() -> (Tensor[(?, 10, 6), bool], Tensor[(6, 13, 3), float32]) {
  %79 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %80 = @func_5970() /* ty=Tensor[(?, 10, 6), bool] */;
  %81 = %79.0;
  (%80, %81)
}

def @func_5350() -> Tensor[(6, 13, 3), float32] {
  %82 = @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  acosh(%84) /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_721(%var_713: Tensor[(11, 9, 7), float64], %var_718: Tensor[(88), bool]) -> (Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) {
  %85 = cast(%var_713, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %86 = cast(%var_718, dtype="bool") /* ty=Tensor[(88), bool] */;
  %87 = cast(%var_718, dtype="bool") /* ty=Tensor[(88), bool] */;
  %88 = cast(%var_718, dtype="bool") /* ty=Tensor[(88), bool] */;
  %89 = cast(meta[relay.Constant][2] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %90 = reshape(%86, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %91 = reshape(%87, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %92 = reshape(%88, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %93 = reshape(%89, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %94 = @func_624(%90, %91, %92, %93) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %95 = rsqrt(%85) /* ty=Tensor[(11, 9, 7), float64] */;
  %96 = %94.3;
  (%95, %96, %var_718, meta[relay.Constant][2] /* ty=Tensor[(1568), float64] */)
}

def @func_2809(%var_2804: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), int32] {
  %97 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %98 = %97.0;
  %99 = cast(%var_2804, dtype="int32") /* ty=Tensor[(6, 13, 3), int32] */;
  %100 = shape_of(%98, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%98, dtype="int32") /* ty=Tensor[(6, 13, 3), int32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%101, %102) /* ty=Tensor[(6, 13, 3), int32] */
}

def @func_624(%var_549: Tensor[(4, 11, 2), bool], %var_550: Tensor[(4, 11, 2), bool], %var_580: Tensor[(4, 11, 2), bool], %var_593: Tensor[(1568), float64]) -> (Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) {
  %103 = cast(%var_550, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
  %104 = shape_of(%var_549, dtype="int32") /* ty=Tensor[(3), int32] */;
  %105 = cast(%var_549, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %107 = cast(%var_580, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %108 = shape_of(%var_550, dtype="int32") /* ty=Tensor[(3), int32] */;
  %109 = cast(%var_550, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %110 = dyn.reshape(%107, %108, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %111 = cast(%var_593, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %112 = cast(%var_593, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %113 = reshape(%111, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %114 = reshape(%112, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %115 = @func_529(%113, %114) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %116 = %115.0;
  %117 = cast(%116, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %118 = cast(%116, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %119 = reshape(%117, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %120 = reshape(%118, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %121 = @func_529(%119, %120) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %122 = cast(%var_580, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %123 = exp(%122) /* ty=Tensor[(4, 11, 2), float64] */;
  %124 = cast(%123, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %125 = cast(%116, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %126 = cast(%116, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %127 = reshape(%125, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %128 = reshape(%126, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %129 = @func_529(%127, %128) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %130 = logical_or(%105, %106) /* ty=Tensor[(4, 11, 2), bool] */;
  %131 = power(%109, %110) /* ty=Tensor[(4, 11, 2), float64] */;
  %132 = %121.1;
  %133 = tan(%124) /* ty=Tensor[(4, 11, 2), float64] */;
  %134 = %129.2;
  (%130, %131, %116, %var_593, %132, %133, %134)
}

def @func_4698(%var_4687: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), bool], Tensor[(6, 13, 3), float64]) {
  %135 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %136 = %135.0;
  %137 = cast(%var_4687, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %138 = shape_of(%136, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%136, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %141 = cast(%136, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %142 = sigmoid(%141) /* ty=Tensor[(6, 13, 3), float64] */;
  %143 = cast(%142, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %144 = less(%139, %140) /* ty=Tensor[(6, 13, 3), bool] */;
  %145 = atan(%143) /* ty=Tensor[(6, 13, 3), float64] */;
  (%144, %145)
}

def @func_3288(%var_3241: bool, %var_3244: Tensor[(1, 720), bool], %var_3245: Tensor[(15, 4), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) {
  %146 = @func_2841() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %147 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %148 = reshape(%147, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), int16] */;
  %149 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %150 = %149.3;
  %151 = cast(%150, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %152 = cast(%150, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %153 = reshape(%151, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %154 = reshape(%152, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %155 = @func_529(%153, %154) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %156 = cast(%var_3241, dtype="bool") /* ty=bool */;
  %157 = cast(meta[relay.Constant][4] /* ty=Tensor[(1170), bool] */, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %158 = cast(meta[relay.Constant][5] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %159 = cast(%var_3244, dtype="bool") /* ty=Tensor[(1, 720), bool] */;
  %160 = cast(%var_3245, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %161 = reshape(%156, newshape=[]) /* ty=bool */;
  %162 = reshape(%157, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), bool] */;
  %163 = reshape(%158, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %164 = reshape(%159, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %165 = reshape(%160, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %166 = @func_1317(%161, %162, %163, %164, %165) /* ty=(Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) */;
  %167 = %155.0;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %169 = cast(%150, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %170 = reshape(%168, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %171 = reshape(%169, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %172 = @func_529(%170, %171) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %173 = cast(%150, dtype="float32") /* ty=Tensor[(1568, 1), float32] */;
  %174 = %146.0;
  %175 = @func_2221(%148) /* ty=Tensor[(12, 8, 3), int16] */;
  %176 = %166.2;
  %177 = %172.1;
  %178 = atan(%173) /* ty=Tensor[(1568, 1), float32] */;
  (%174, %175, meta[relay.Constant][3] /* ty=Tensor[(288), int16] */, %167, %176, %var_3241, meta[relay.Constant][4] /* ty=Tensor[(1170), bool] */, meta[relay.Constant][5] /* ty=Tensor[(20), float64] */, %var_3244, %var_3245, %177, %178)
}

def @func_3910(%var_3857: Tensor[(180), int8], %var_3880: Tensor[(1, 640), float64], %var_3881: Tensor[(1568), float64], %var_3907: bool, %var_3908: Tensor[(12, 60), bool]) -> (Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(180), int8], Tensor[(6, 13, 3), bool], Tensor[(1, 640), float64], Tensor[(1568), float64], Tensor[(60), float32], Tensor[(?, 10, 6), bool], bool, Tensor[(12, 60), bool]) {
  %179 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %180 = cast(%var_3857, dtype="int8") /* ty=Tensor[(180), int8] */;
  %181 = cast(%var_3857, dtype="int8") /* ty=Tensor[(180), int8] */;
  %182 = reshape(%180, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int8] */;
  %183 = reshape(%181, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int8] */;
  %184 = @func_1876(%182, %183) /* ty=(Tensor[(9, 2, 10), bool], Tensor[(60), float32], Tensor[(88), bool], Tensor[(1568), float64]) */;
  %185 = %179.0;
  %186 = cast(%185, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %187 = cast(%var_3880, dtype="float64") /* ty=Tensor[(1, 640), float64] */;
  %188 = cast(%var_3881, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %189 = reshape(%186, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %190 = reshape(%187, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %191 = reshape(%188, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %192 = @func_3713(%189, %190, %191) /* ty=(Tensor[(4, 11, 2), float64], Tensor[(88), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(6, 13, 3), bool]) */;
  %193 = cast(%var_3881, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %194 = cast(%var_3881, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %195 = reshape(%193, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %196 = reshape(%194, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %197 = @func_529(%195, %196) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %198 = cast(%var_3907, dtype="bool") /* ty=bool */;
  %199 = cast(%var_3908, dtype="bool") /* ty=Tensor[(12, 60), bool] */;
  %200 = %184.1;
  %201 = cast(%200, dtype="float32") /* ty=Tensor[(60), float32] */;
  %202 = reshape(%198, newshape=[]) /* ty=bool */;
  %203 = reshape(%199, newshape=[1, 720]) /* ty=Tensor[(1, 720), bool] */;
  %204 = reshape(%201, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
  %205 = @func_3288(%202, %203, %204) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */;
  %206 = %192.8;
  %207 = %197.2;
  %208 = %205.10;
  (%185, %200, %var_3857, %206, %var_3880, %var_3881, %207, %208, %var_3907, %var_3908)
}

def @func_2981() -> Tensor[(6, 13, 3), float32] {
  %209 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %210 = %209.0;
  %211 = cast(%210, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  acos(%211) /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5744(%var_5723: Tensor[(8, 36), int16]) -> (Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), float64]) {
  %212 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %213 = cast(%var_5723, dtype="int16") /* ty=Tensor[(8, 36), int16] */;
  %214 = reshape(%213, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %215 = @func_4179(%214) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */;
  %216 = %215.2;
  %217 = cast(%var_5723, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
  %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%216, dtype="float64") /* ty=Tensor[(12, 8, 3), float64] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %221 = %212.0;
  %222 = power(%219, %220) /* ty=Tensor[(12, 8, 3), float64] */;
  (%221, %222)
}

def @func_3968() -> (Tensor[(6, 13, 3), float32],) {
  %223 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %224 = %223.0;
  (%224,)
}

def @func_6610() -> Tensor[(6, 13, 3), float32] {
  %225 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %225.1
}

def @func_5164(%var_5157: Tensor[(693), float64], %var_5158: Tensor[(88, 1), bool], %var_5160: Tensor[(180, 8), int8]) -> (Tensor[(6, 13, 3), uint8], Tensor[(1568), float64], Tensor[(693), float64], Tensor[(88, 1), bool], Tensor[(784, 2), float64], Tensor[(180, 8), int8], Tensor[(6, 13, 3), float32]) {
  %226 = @func_3469() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %227 = %226.0;
  %228 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 13, 3), float32] */, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %232 = cast(%var_5157, dtype="float64") /* ty=Tensor[(693), float64] */;
  %233 = cast(%var_5158, dtype="bool") /* ty=Tensor[(88, 1), bool] */;
  %234 = cast(meta[relay.Constant][7] /* ty=Tensor[(784, 2), float64] */, dtype="float64") /* ty=Tensor[(784, 2), float64] */;
  %235 = cast(%var_5160, dtype="int8") /* ty=Tensor[(180, 8), int8] */;
  %236 = reshape(%232, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %237 = reshape(%233, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %238 = reshape(%234, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %239 = reshape(%235, newshape=[360, 4]) /* ty=Tensor[(360, 4), int8] */;
  %240 = @func_4542(%236, %237, %238, %239) /* ty=(Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) */;
  %241 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %242 = subtract(%230, %231) /* ty=Tensor[(6, 13, 3), uint8] */;
  %243 = %240.2;
  %244 = %241.4;
  (%242, %243, %var_5157, %var_5158, meta[relay.Constant][7] /* ty=Tensor[(784, 2), float64] */, %var_5160, %244)
}

def @func_1317(%var_1251: bool, %var_1252: Tensor[(6, 13, 15), bool], %var_1264: Tensor[(20), float64], %var_1268: Tensor[(720), bool], %var_1270: Tensor[(60), float32]) -> (Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) {
  %245 = cast(%var_1251, dtype="bool") /* ty=bool */;
  %246 = cast(%var_1252, dtype="bool") /* ty=Tensor[(6, 13, 15), bool] */;
  %247 = cast(%var_1264, dtype="float64") /* ty=Tensor[(20), float64] */;
  %248 = reshape(%247, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %249 = @func_1231(%248) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %250 = cast(%var_1251, dtype="bool") /* ty=bool */;
  %251 = cast(%var_1268, dtype="bool") /* ty=Tensor[(720), bool] */;
  %252 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 6), bool] */, dtype="bool") /* ty=Tensor[(13, 6), bool] */;
  %253 = cast(%var_1270, dtype="float32") /* ty=Tensor[(60), float32] */;
  %254 = reshape(%250, newshape=[]) /* ty=bool */;
  %255 = reshape(%251, newshape=[9, 5, 16]) /* ty=Tensor[(9, 5, 16), bool] */;
  %256 = reshape(%252, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), bool] */;
  %257 = reshape(%253, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %258 = @func_943(%254, %255, %256, %257) /* ty=(Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) */;
  %259 = cast(%var_1252, dtype="float32") /* ty=Tensor[(6, 13, 15), float32] */;
  %260 = log2(%259) /* ty=Tensor[(6, 13, 15), float32] */;
  %261 = cast(%260, dtype="uint16") /* ty=Tensor[(6, 13, 15), uint16] */;
  %262 = cast(%var_1251, dtype="uint16") /* ty=uint16 */;
  %263 = cast(%var_1264, dtype="float64") /* ty=Tensor[(20), float64] */;
  %264 = reshape(%263, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %265 = @func_1231(%264) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %266 = logical_and(%245, %246) /* ty=Tensor[(6, 13, 15), bool] */;
  %267 = %249.0;
  %268 = %258.3;
  %269 = minimum(%261, %262) /* ty=Tensor[(6, 13, 15), uint16] */;
  %270 = %265.0;
  (%266, %267, %var_1264, %268, %var_1268, meta[relay.Constant][8] /* ty=Tensor[(13, 6), bool] */, %var_1270, %269, %270)
}

def @func_6563() -> Tensor[(6, 13, 3), float32] {
  %271 = @func_5129() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %271.0
}

def @func_4891() -> (Tensor[(6, 13, 3), float64],) {
  %272 = @func_3012() /* ty=Tensor[(6, 13, 3), float32] */;
  %273 = cast(%272, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %274 = asin(%273) /* ty=Tensor[(6, 13, 3), float64] */;
  (%274,)
}

def @func_3322() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %275 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %276 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %277 = %275.0;
  %278 = %276.1;
  (%277, %278)
}

def @func_6544() -> (Tensor[(6, 13, 3), float32],) {
  %279 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%279,)
}

def @func_5508() -> Tensor[(6, 13, 3), float32] {
  %280 = @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %280.0
}

def @main() -> (Tensor[(60), float32], Tensor[(60), float32]) {
  %281 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %282 = %281.2;
  %283 = cast(meta[relay.Constant][9] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %284 = shape_of(%282, dtype="int32") /* ty=Tensor[(1), int32] */;
  %285 = cast(%282, dtype="float32") /* ty=Tensor[(60), float32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?), float32] */;
  %287 = cast(%282, dtype="float32") /* ty=Tensor[(60), float32] */;
  %288 = mod(%285, %286) /* ty=Tensor[(60), float32] */;
  %289 = atanh(%287) /* ty=Tensor[(60), float32] */;
  (%288, %289)
}

def @func_4961() -> (Tensor[(6, 13, 3), float32],) {
  %290 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %291 = %290.4;
  (%291,)
}

def @func_3137() -> (Tensor[(6, 13, 3), float32],) {
  %292 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%292,)
}

def @func_3575(%var_3571: Tensor[(1, 60), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) {
  %293 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %294 = cast(%var_3571, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
  %295 = reshape(%294, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %296 = @func_286(%295) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %297 = %293.1;
  %298 = %296.0;
  (%297, %298, %var_3571)
}

def @func_5451(%var_5399: Tensor[(6, 13, 3), float32], %var_5409: Tensor[(1568), float64], %var_5414: bool, %var_5415: Tensor[(320, 2), float64]) -> (Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(910), float64], Tensor[(792), float64], bool, Tensor[(320, 2), float64], bool, Tensor[(20), float64], Tensor[(720), bool], Tensor[(30, 2), float32], Tensor[(1, 60), float32], Tensor[(6, 13, 3), float32]) {
  %299 = @func_3012() /* ty=Tensor[(6, 13, 3), float32] */;
  %300 = cast(%var_5399, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %301 = shape_of(%299, dtype="int32") /* ty=Tensor[(3), int32] */;
  %302 = cast(%299, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %303 = dyn.reshape(%300, %301, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %304 = cast(%var_5409, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %305 = power(%302, %303) /* ty=Tensor[(6, 13, 3), float64] */;
  %306 = cast(%305, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %307 = reshape(%304, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %308 = reshape(%306, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float64] */;
  %309 = @func_3536(%307, %308) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(16, 7, 14), bool], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64]) */;
  %310 = cast(meta[relay.Constant][10] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %311 = cast(meta[relay.Constant][11] /* ty=Tensor[(792), float64] */, dtype="float64") /* ty=Tensor[(792), float64] */;
  %312 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %313 = cast(%var_5415, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %314 = reshape(%310, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %315 = reshape(%311, newshape=[792]) /* ty=Tensor[(792), float64] */;
  %316 = reshape(%312, newshape=[]) /* ty=bool */;
  %317 = reshape(%313, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %318 = @func_2561(%314, %315, %316, %317) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) */;
  %319 = cast(meta[relay.Constant][10] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %320 = cast(meta[relay.Constant][11] /* ty=Tensor[(792), float64] */, dtype="float64") /* ty=Tensor[(792), float64] */;
  %321 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %322 = cast(%var_5415, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %323 = reshape(%319, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %324 = reshape(%320, newshape=[792]) /* ty=Tensor[(792), float64] */;
  %325 = reshape(%321, newshape=[]) /* ty=bool */;
  %326 = reshape(%322, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %327 = @func_2561(%323, %324, %325, %326) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) */;
  %328 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %329 = cast(meta[relay.Constant][12] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %330 = cast(meta[relay.Constant][13] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %331 = reshape(%328, newshape=[]) /* ty=bool */;
  %332 = reshape(%329, newshape=[1, 720]) /* ty=Tensor[(1, 720), bool] */;
  %333 = reshape(%330, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
  %334 = @func_3288(%331, %332, %333) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */;
  %335 = cast(meta[relay.Constant][13] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %336 = reshape(%335, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %337 = @func_3575(%336) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */;
  %338 = %309.4;
  %339 = %318.2;
  %340 = %327.3;
  %341 = %334.7;
  %342 = %337.2;
  %343 = @func_4712() /* ty=Tensor[(6, 13, 3), float32] */;
  (%305, %338, %var_5409, %339, meta[relay.Constant][10] /* ty=Tensor[(910), float64] */, meta[relay.Constant][11] /* ty=Tensor[(792), float64] */, %var_5414, %var_5415, %340, %341, meta[relay.Constant][12] /* ty=Tensor[(720), bool] */, meta[relay.Constant][13] /* ty=Tensor[(30, 2), float32] */, %342, %343)
}

def @func_1702(%var_1685: Tensor[(14, 16, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(5, 2, 2), float64], Tensor[(20), float64]) {
  %344 = cast(%var_1685, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %345 = cast(meta[relay.Constant][14] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %346 = reshape(%345, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %347 = @func_1231(%346) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %348 = cos(%344) /* ty=Tensor[(14, 16, 2), float32] */;
  %349 = %347.0;
  (%348, %349, meta[relay.Constant][14] /* ty=Tensor[(20), float64] */)
}

def @func_4373(%var_4356: Tensor[(13, 6, 12), int32], %var_4357: Tensor[(13, 6, 12), int32], %var_4369: Tensor[(288), int16]) -> (Tensor[(13, 6, 12), bool], Tensor[(6, 13, 3), uint8], Tensor[(288), int16]) {
  %350 = cast(%var_4357, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %351 = shape_of(%var_4356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%var_4356, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %354 = cast(%var_4369, dtype="int16") /* ty=Tensor[(288), int16] */;
  %355 = reshape(%354, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %356 = @func_4179(%355) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */;
  %357 = equal(%352, %353) /* ty=Tensor[(13, 6, 12), bool] */;
  %358 = %356.1;
  (%357, %358, %var_4369)
}

def @func_6223(%var_6198: Tensor[(8, 140), float64], %var_6199: Tensor[(44, 2), bool], %var_6218: Tensor[(44, 2), bool]) -> (Tensor[(6, 13, 3), float32], Tensor[(96), float64], Tensor[(8, 140), float64], Tensor[(2, 8, 6), int32], Tensor[(44, 2), uint16]) {
  %359 = cast(%var_6198, dtype="float64") /* ty=Tensor[(8, 140), float64] */;
  %360 = cast(%var_6199, dtype="bool") /* ty=Tensor[(44, 2), bool] */;
  %361 = reshape(%359, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
  %362 = reshape(%360, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %363 = @func_4313(%361, %362) /* ty=(Tensor[(2, 8, 6), int32], Tensor[(96), float64], Tensor[(88), bool], Tensor[(693), float64], Tensor[(88), bool], Tensor[(6, 13, 3), float32], Tensor[(10, 7, 16), uint64]) */;
  %364 = %363.1;
  %365 = cast(%364, dtype="int32") /* ty=Tensor[(96), int32] */;
  %366 = reshape(%365, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %367 = @func_749(%366) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %368 = cast(%var_6218, dtype="uint16") /* ty=Tensor[(44, 2), uint16] */;
  %369 = shape_of(%var_6199, dtype="int32") /* ty=Tensor[(2), int32] */;
  %370 = cast(%var_6199, dtype="uint16") /* ty=Tensor[(44, 2), uint16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %372 = @func_4712() /* ty=Tensor[(6, 13, 3), float32] */;
  %373 = %367.0;
  %374 = right_shift(%370, %371) /* ty=Tensor[(44, 2), uint16] */;
  (%372, %364, %var_6198, %373, %374)
}

def @func_5855() -> (Tensor[(6, 13, 3), float64],) {
  %375 = @func_5039() /* ty=(Tensor[(6, 13, 3), int8], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float64]) */;
  %376 = %375.2;
  (%376,)
}

def @func_6675() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %377 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %378 = %377.0;
  %379 = @func_5350() /* ty=Tensor[(6, 13, 3), float32] */;
  (%378, %379)
}

def @func_3764(%var_3743: Tensor[(4, 24), int32]) -> (Tensor[(6, 13, 3), float32], Tensor[(2, 8, 6), int32], Tensor[(4, 24), int32], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) {
  %380 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %381 = cast(%var_3743, dtype="int32") /* ty=Tensor[(4, 24), int32] */;
  %382 = reshape(%381, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %383 = @func_749(%382) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %384 = cast(meta[relay.Constant][15] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %385 = cast(meta[relay.Constant][16] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %386 = reshape(%384, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %387 = reshape(%385, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %388 = @func_721(%386, %387) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */;
  %389 = cast(meta[relay.Constant][17] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %390 = reshape(%389, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), int16] */;
  %391 = %380.1;
  %392 = %383.0;
  %393 = %388.0;
  %394 = @func_2221(%390) /* ty=Tensor[(12, 8, 3), int16] */;
  (%391, %392, %var_3743, %393, meta[relay.Constant][15] /* ty=Tensor[(693), float64] */, meta[relay.Constant][16] /* ty=Tensor[(88), bool] */, %394, meta[relay.Constant][17] /* ty=Tensor[(288), int16] */)
}

def @func_3713(%var_3607: Tensor[(6, 13, 3), float32], %var_3634: Tensor[(640), float64], %var_3677: Tensor[(1568), float64]) -> (Tensor[(4, 11, 2), float64], Tensor[(88), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(6, 13, 3), bool]) {
  %395 = cast(meta[relay.Constant][18] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %396 = cast(meta[relay.Constant][18] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %397 = cast(meta[relay.Constant][18] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %398 = cast(meta[relay.Constant][19] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %399 = reshape(%395, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %400 = reshape(%396, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %401 = reshape(%397, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %402 = reshape(%398, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %403 = @func_624(%399, %400, %401, %402) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %404 = cast(%var_3634, dtype="float64") /* ty=Tensor[(640), float64] */;
  %405 = reshape(%404, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %406 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  %407 = cast(%var_3607, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %411 = logical_and(%409, %410) /* ty=Tensor[(6, 13, 3), bool] */;
  %412 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 13, 3), bool] */, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %413 = shape_of(%411, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%411, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %416 = cast(%var_3677, dtype="bool") /* ty=Tensor[(1568), bool] */;
  %417 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(1568), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %418 = cast(meta[relay.Constant][19] /* ty=Tensor[(1568), float64] */, dtype="bool") /* ty=Tensor[(1568), bool] */;
  %419 = dyn.reshape(%416, %417, newshape=[]) /* ty=Tensor[(?), bool] */;
  %420 = cast(meta[relay.Constant][21] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %421 = reshape(%420, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %422 = @func_1231(%421) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %423 = @func_2873() /* ty=Tensor[(6, 13, 3), float32] */;
  %424 = cast(%411, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %428 = %403.1;
  %429 = @func_1638(%405) /* ty=Tensor[(8, 16, 5), float64] */;
  %430 = floor_divide(%414, %415) /* ty=Tensor[(6, 13, 3), float32] */;
  %431 = logical_and(%418, %419) /* ty=Tensor[(1568), bool] */;
  %432 = %422.0;
  %433 = equal(%426, %427) /* ty=Tensor[(6, 13, 3), bool] */;
  (%428, meta[relay.Constant][18] /* ty=Tensor[(88), bool] */, %429, %var_3634, %430, %431, %432, meta[relay.Constant][21] /* ty=Tensor[(20), float64] */, %433)
}

def @func_5565() -> Tensor[(6, 13, 3), float32] {
  @func_2981() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_4602(%var_4580: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64], Tensor[(2, 8, 6), int32], Tensor[(96), int32]) {
  %434 = cast(%var_4580, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
  %435 = cast(meta[relay.Constant][22] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %436 = reshape(%435, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %437 = @func_749(%436) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %438 = atanh(%434) /* ty=Tensor[(4, 8, 5), float64] */;
  %439 = %437.0;
  (%438, %439, meta[relay.Constant][22] /* ty=Tensor[(96), int32] */)
}

def @func_5970() -> Tensor[(?, 10, 6), bool] {
  %440 = @func_4862() /* ty=(Tensor[(?, 10, 6), bool], Tensor[(15, 4), float32], Tensor[(6, 13, 3), float32]) */;
  %440.0
}

def @func_3469() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %441 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %442 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %443 = %441.0;
  %444 = %442.1;
  (%443, %444)
}

def @func_6242() -> Tensor[(6, 13, 3), float32] {
  %445 = @func_3469() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %445.1
}

def @func_4639(%var_4620: Tensor[(7, 10, 10), float32], %var_4626: Tensor[(60), float32]) -> (Tensor[(7, 10, 10), float32], Tensor[(?, 10, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) {
  %446 = cast(%var_4620, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %447 = cast(%var_4626, dtype="float32") /* ty=Tensor[(60), float32] */;
  %448 = reshape(%447, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %449 = @func_3575(%448) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */;
  %450 = sqrt(%446) /* ty=Tensor[(7, 10, 10), float32] */;
  %451 = %449.1;
  %452 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%450, %451, %var_4626, %452)
}

def @func_6871(%var_6851: Tensor[(88), bool]) -> (Tensor[(6, 13, 3), float64], Tensor[(693), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(1440), int8]) {
  %453 = @func_4891() /* ty=(Tensor[(6, 13, 3), float64],) */;
  %454 = cast(meta[relay.Constant][23] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %455 = cast(%var_6851, dtype="bool") /* ty=Tensor[(88), bool] */;
  %456 = cast(meta[relay.Constant][24] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %457 = cast(meta[relay.Constant][25] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %458 = reshape(%454, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %459 = reshape(%455, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %460 = reshape(%456, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %461 = reshape(%457, newshape=[360, 4]) /* ty=Tensor[(360, 4), int8] */;
  %462 = @func_4542(%458, %459, %460, %461) /* ty=(Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) */;
  %463 = %453.0;
  %464 = %462.0;
  (%463, %464, meta[relay.Constant][23] /* ty=Tensor[(693), float64] */, %var_6851, meta[relay.Constant][24] /* ty=Tensor[(1568), float64] */, meta[relay.Constant][25] /* ty=Tensor[(1440), int8] */)
}

def @func_1876(%var_1828: Tensor[(9, 2, 10), int8], %var_1829: Tensor[(9, 2, 10), int8]) -> (Tensor[(9, 2, 10), bool], Tensor[(60), float32], Tensor[(88), bool], Tensor[(1568), float64]) {
  %465 = cast(%var_1829, dtype="bool") /* ty=Tensor[(9, 2, 10), bool] */;
  %466 = shape_of(%var_1828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %467 = cast(%var_1828, dtype="bool") /* ty=Tensor[(9, 2, 10), bool] */;
  %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %469 = cast(meta[relay.Constant][26] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %470 = cast(meta[relay.Constant][26] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %471 = cast(meta[relay.Constant][26] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %472 = cast(meta[relay.Constant][27] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %473 = reshape(%469, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %474 = reshape(%470, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %475 = reshape(%471, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %476 = reshape(%472, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %477 = @func_624(%473, %474, %475, %476) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %478 = equal(%467, %468) /* ty=Tensor[(9, 2, 10), bool] */;
  %479 = %477.6;
  (%478, %479, meta[relay.Constant][26] /* ty=Tensor[(88), bool] */, meta[relay.Constant][27] /* ty=Tensor[(1568), float64] */)
}

def @func_2561(%var_2504: Tensor[(10, 7, 13), float64], %var_2516: Tensor[(792), float64], %var_2525: bool, %var_2536: Tensor[(640), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) {
  %480 = cast(%var_2516, dtype="float64") /* ty=Tensor[(792), float64] */;
  %481 = cast(%var_2516, dtype="float64") /* ty=Tensor[(792), float64] */;
  %482 = reshape(%480, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %483 = reshape(%481, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %484 = @func_2096(%482, %483) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) */;
  %485 = cast(%var_2525, dtype="bool") /* ty=bool */;
  %486 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 60), bool] */, dtype="bool") /* ty=Tensor[(12, 60), bool] */;
  %487 = cast(meta[relay.Constant][29] /* ty=Tensor[(78), bool] */, dtype="bool") /* ty=Tensor[(78), bool] */;
  %488 = cast(meta[relay.Constant][30] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %489 = reshape(%485, newshape=[]) /* ty=bool */;
  %490 = reshape(%486, newshape=[9, 5, 16]) /* ty=Tensor[(9, 5, 16), bool] */;
  %491 = reshape(%487, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), bool] */;
  %492 = reshape(%488, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %493 = @func_943(%489, %490, %491, %492) /* ty=(Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) */;
  %494 = cast(%var_2536, dtype="float64") /* ty=Tensor[(640), float64] */;
  %495 = reshape(%494, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %496 = cast(%var_2504, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %497 = log2(%496) /* ty=Tensor[(10, 7, 13), float64] */;
  %498 = cast(%497, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %499 = rsqrt(%498) /* ty=Tensor[(10, 7, 13), float64] */;
  %500 = cast(%499, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %501 = @func_1638(%495) /* ty=Tensor[(8, 16, 5), float64] */;
  %502 = cast(%501, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %503 = reshape(%502, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %504 = cast(meta[relay.Constant][30] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %505 = reshape(%504, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %506 = @func_286(%505) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %507 = %484.0;
  %508 = %493.0;
  %509 = sinh(%500) /* ty=Tensor[(10, 7, 13), float64] */;
  %510 = @func_1638(%503) /* ty=Tensor[(8, 16, 5), float64] */;
  %511 = %506.3;
  (%507, %var_2516, %508, %var_2525, meta[relay.Constant][28] /* ty=Tensor[(12, 60), bool] */, meta[relay.Constant][29] /* ty=Tensor[(78), bool] */, meta[relay.Constant][30] /* ty=Tensor[(60, 1), float32] */, %501, %var_2536, %509, %510, %511)
}

def @func_3536(%var_3497: Tensor[(1568), float64], %var_3523: Tensor[(6, 13, 3), float64]) -> (Tensor[(?, 10, 6), bool], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(16, 7, 14), bool], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64]) {
  %512 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %513 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %514 = cast(meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %515 = cast(%var_3497, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %516 = reshape(%512, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %517 = reshape(%513, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %518 = reshape(%514, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %519 = reshape(%515, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %520 = @func_624(%516, %517, %518, %519) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %521 = cast(%var_3497, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %522 = cast(%var_3497, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %523 = reshape(%521, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %524 = reshape(%522, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %525 = @func_529(%523, %524) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %526 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %527 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %528 = %527.0;
  %529 = cast(%528, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %530 = erf(%529) /* ty=Tensor[(6, 13, 3), float64] */;
  %531 = cast(%var_3523, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %535 = %520.4;
  %536 = %525.0;
  %537 = %526.4;
  %538 = mod(%533, %534) /* ty=Tensor[(6, 13, 3), float64] */;
  (%535, meta[relay.Constant][31] /* ty=Tensor[(88), bool] */, %var_3497, %536, %537, %538)
}

def @func_6385(%var_6367: Tensor[(8, 3, 11), float64]) -> (Tensor[(6, 13, 3), float32], Tensor[(8, 3, 11), int32], Tensor[(2, 396), float64]) {
  %539 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 396), float64] */, dtype="float64") /* ty=Tensor[(2, 396), float64] */;
  %540 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 396), float64] */, dtype="float64") /* ty=Tensor[(2, 396), float64] */;
  %541 = reshape(%539, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %542 = reshape(%540, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %543 = @func_2096(%541, %542) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) */;
  %544 = %543.0;
  %545 = cast(%var_6367, dtype="int32") /* ty=Tensor[(8, 3, 11), int32] */;
  %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
  %547 = cast(%544, dtype="int32") /* ty=Tensor[(8, 3, 11), int32] */;
  %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %549 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 396), float64] */, dtype="float64") /* ty=Tensor[(2, 396), float64] */;
  %550 = @func_2873() /* ty=Tensor[(6, 13, 3), float32] */;
  %551 = bitwise_xor(%547, %548) /* ty=Tensor[(8, 3, 11), int32] */;
  %552 = cosh(%549) /* ty=Tensor[(2, 396), float64] */;
  (%550, %551, %552)
}

def @func_6649() -> Tensor[(3, 9, 13), float32] {
  %553 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 13), float32] */;
  log(%553) /* ty=Tensor[(3, 9, 13), float32] */
}

def @func_7004(%var_6999: Tensor[(2, 1, 4), bool], %var_7000: Tensor[(2, 7, 4), bool]) -> Tensor[(2, 7, 4), bool] {
  %554 = cast(%var_6999, dtype="bool") /* ty=Tensor[(2, 1, 4), bool] */;
  %555 = cast(%var_7000, dtype="bool") /* ty=Tensor[(2, 7, 4), bool] */;
  logical_and(%554, %555) /* ty=Tensor[(2, 7, 4), bool] */
}

def @func_4862() -> (Tensor[(?, 10, 6), bool], Tensor[(15, 4), float32], Tensor[(6, 13, 3), float32]) {
  %556 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %557 = reshape(%556, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %558 = @func_286(%557) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %559 = @func_3012() /* ty=Tensor[(6, 13, 3), float32] */;
  %560 = cast(%559, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %561 = cos(%560) /* ty=Tensor[(6, 13, 3), float64] */;
  %562 = cast(%561, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %563 = %558.1;
  %564 = sin(%562) /* ty=Tensor[(6, 13, 3), float32] */;
  (%563, meta[relay.Constant][34] /* ty=Tensor[(15, 4), float32] */, %564)
}

def @func_6131() -> Tensor[(6, 13, 3), float32] {
  %565 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %565.0
}

def @func_5076(%var_5064: Tensor[(16, 3, 5), float32]) -> Tensor[(16, 3, 5), float32] {
  %566 = cast(%var_5064, dtype="float32") /* ty=Tensor[(16, 3, 5), float32] */;
  log2(%566) /* ty=Tensor[(16, 3, 5), float32] */
}

def @func_7220(%var_7194: Tensor[(9, 10, 6), bool], %var_7204: Tensor[(234), float32]) -> (Tensor[(9, 10, 6), bool], Tensor[(6, 13, 3), bool], Tensor[(234), float32], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %567 = @func_5970() /* ty=Tensor[(?, 10, 6), bool] */;
  %568 = cast(%567, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
  %569 = cast(%var_7194, dtype="bool") /* ty=Tensor[(9, 10, 6), bool] */;
  %570 = cast(%var_7204, dtype="float32") /* ty=Tensor[(234), float32] */;
  %571 = reshape(%570, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %572 = @func_6675() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %573 = logical_or(%568, %569) /* ty=Tensor[(9, 10, 6), bool] */;
  %574 = @func_4741(%571) /* ty=Tensor[(6, 13, 3), bool] */;
  %575 = @func_6131() /* ty=Tensor[(6, 13, 3), float32] */;
  %576 = %572.1;
  (%573, %574, %var_7204, %575, %576)
}

def @func_5597(%var_5584: Tensor[(5, 7, 16), float32], %var_5588: Tensor[(5, 7, 16), float32], %var_5594: Tensor[(234), float32]) -> (Tensor[(5, 7, 16), int64], Tensor[(6, 13, 3), int8], Tensor[(234), float32]) {
  %577 = cast(%var_5584, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
  %578 = atanh(%577) /* ty=Tensor[(5, 7, 16), float32] */;
  %579 = cast(%var_5588, dtype="int64") /* ty=Tensor[(5, 7, 16), int64] */;
  %580 = shape_of(%578, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%578, dtype="int64") /* ty=Tensor[(5, 7, 16), int64] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %583 = cast(%var_5594, dtype="float32") /* ty=Tensor[(234), float32] */;
  %584 = reshape(%583, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %585 = @func_2967(%584) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) */;
  %586 = maximum(%581, %582) /* ty=Tensor[(5, 7, 16), int64] */;
  %587 = %585.3;
  (%586, %587, %var_5594)
}

def @func_5939(%var_5898: float64, %var_5899: Tensor[(11, 8, 2), float64]) -> (Tensor[(11, 8, 2), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32]) {
  %588 = cast(%var_5898, dtype="float64") /* ty=float64 */;
  %589 = cast(%var_5899, dtype="float64") /* ty=Tensor[(11, 8, 2), float64] */;
  %590 = @func_5855() /* ty=(Tensor[(6, 13, 3), float64],) */;
  %591 = @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %592 = power(%588, %589) /* ty=Tensor[(11, 8, 2), float64] */;
  %593 = %590.0;
  %594 = %591.0;
  (%592, %593, %594)
}

def @func_2634() -> (Tensor[(6, 13, 3), float32],) {
  %595 = cast(meta[relay.Constant][35] /* ty=Tensor[(6, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %596 = log10(%595) /* ty=Tensor[(6, 13, 3), float32] */;
  (%596,)
}

def @func_3377(%var_3363: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), uint8], Tensor[(6, 13, 3), float32]) {
  %597 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %599 = rsqrt(%598) /* ty=Tensor[(6, 13, 3), float32] */;
  %600 = cast(%var_3363, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %601 = shape_of(%599, dtype="int32") /* ty=Tensor[(3), int32] */;
  %602 = cast(%599, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %603 = dyn.reshape(%600, %601, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %604 = right_shift(%602, %603) /* ty=Tensor[(6, 13, 3), uint8] */;
  %605 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%604, %605)
}

def @func_4461(%var_4408: Tensor[(6, 13, 3), float32], %var_4424: Tensor[(1440), int8], %var_4427: Tensor[(2, 48), int32]) -> (Tensor[(6, 13, 3), int16], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(9, 10, 16), int8], Tensor[(1440), int8], Tensor[(2, 8, 6), int32], Tensor[(2, 48), int32], Tensor[(6, 13, 3), float32]) {
  %606 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %607 = %606.0;
  %608 = cast(%var_4408, dtype="int16") /* ty=Tensor[(6, 13, 3), int16] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="int16") /* ty=Tensor[(6, 13, 3), int16] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %612 = cast(meta[relay.Constant][36] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %613 = reshape(%612, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %614 = @func_1058(%613) /* ty=(Tensor[(8, 3, 11), float64],) */;
  %615 = cast(%var_4424, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %616 = cast(%var_4424, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %617 = reshape(%615, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
  %618 = reshape(%616, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
  %619 = cast(%var_4427, dtype="int32") /* ty=Tensor[(2, 48), int32] */;
  %620 = reshape(%619, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %621 = @func_749(%620) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %622 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %623 = logical_xor(%610, %611) /* ty=Tensor[(6, 13, 3), int16] */;
  %624 = %614.0;
  %625 = @func_4334(%617, %618) /* ty=Tensor[(9, 10, 16), int8] */;
  %626 = %621.0;
  %627 = %622.4;
  (%623, %624, meta[relay.Constant][36] /* ty=Tensor[(264), float64] */, %625, %var_4424, %626, %var_4427, %627)
}

def @func_2841() -> (Tensor[(6, 13, 3), float32],) {
  %628 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %629 = %628.0;
  (%629,)
}

def @func_7070() -> (Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64], Tensor[(22, 4), bool]) {
  %630 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %631 = %630.0;
  %632 = cast(%631, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %633 = cast(meta[relay.Constant][37] /* ty=Tensor[(22, 4), bool] */, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
  %634 = reshape(%633, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %635 = @func_6871(%634) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(693), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(1440), int8]) */;
  %636 = exp(%632) /* ty=Tensor[(6, 13, 3), float64] */;
  %637 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  %638 = %635.0;
  (%636, %637, %638, meta[relay.Constant][37] /* ty=Tensor[(22, 4), bool] */)
}

def @func_4334(%var_4326: Tensor[(9, 10, 16), int8], %var_4327: Tensor[(9, 10, 16), int8]) -> Tensor[(9, 10, 16), int8] {
  %639 = cast(%var_4327, dtype="int8") /* ty=Tensor[(9, 10, 16), int8] */;
  %640 = shape_of(%var_4326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%var_4326, dtype="int8") /* ty=Tensor[(9, 10, 16), int8] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%641, %642) /* ty=Tensor[(9, 10, 16), int8] */
}

def @func_6029() -> Tensor[(6, 13, 3), float32] {
  @func_5508() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5794(%var_5789: Tensor[(5, 10, 13), float32]) -> Tensor[(5, 10, 13), float32] {
  %643 = cast(%var_5789, dtype="float32") /* ty=Tensor[(5, 10, 13), float32] */;
  sqrt(%643) /* ty=Tensor[(5, 10, 13), float32] */
}

def @func_3939() -> (Tensor[(6, 13, 3), float32],) {
  %644 = @func_2841() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %645 = %644.0;
  (%645,)
}

def @func_2695() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) {
  %646 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %647 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %648 = cast(meta[relay.Constant][38] /* ty=Tensor[(1568, 1), float64] */, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %649 = cast(meta[relay.Constant][38] /* ty=Tensor[(1568, 1), float64] */, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %650 = reshape(%648, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %651 = reshape(%649, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %652 = @func_529(%650, %651) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %653 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %654 = %653.0;
  %655 = cast(%654, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %656 = %646.0;
  %657 = %647.0;
  %658 = %652.2;
  %659 = tan(%655) /* ty=Tensor[(6, 13, 3), float32] */;
  (%656, %657, %658, meta[relay.Constant][38] /* ty=Tensor[(1568, 1), float64] */, %659)
}

def @func_1638(%var_1633: Tensor[(8, 16, 5), float64]) -> Tensor[(8, 16, 5), float64] {
  %660 = cast(meta[relay.Constant][39] /* ty=Tensor[(8, 16, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %661 = shape_of(%var_1633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %662 = cast(%var_1633, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %663 = dyn.reshape(%660, %661, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%662, %663) /* ty=Tensor[(8, 16, 5), float64] */
}

def @func_2221(%var_2216: Tensor[(12, 8, 3), int16]) -> Tensor[(12, 8, 3), int16] {
  %664 = cast(%var_2216, dtype="int16") /* ty=Tensor[(12, 8, 3), int16] */;
  %665 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(12, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(12, 8, 3), int16] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  add(%666, %667) /* ty=Tensor[(12, 8, 3), int16] */
}

def @func_5129() -> (Tensor[(6, 13, 3), float32],) {
  %668 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %669 = %668.4;
  (%669,)
}

def @func_6456(%var_6445: float64) -> (Tensor[(6, 13, 3), float32], Tensor[(11, 8, 2), float64], float64, Tensor[(44, 4), float64], Tensor[(5, 2, 2), float64], Tensor[(10, 2), float64]) {
  %670 = cast(%var_6445, dtype="float64") /* ty=float64 */;
  %671 = cast(meta[relay.Constant][41] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %672 = reshape(%670, newshape=[]) /* ty=float64 */;
  %673 = reshape(%671, newshape=[11, 8, 2]) /* ty=Tensor[(11, 8, 2), float64] */;
  %674 = @func_5939(%672, %673) /* ty=(Tensor[(11, 8, 2), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32]) */;
  %675 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
  %676 = reshape(%675, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %677 = @func_1231(%676) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %678 = @func_6131() /* ty=Tensor[(6, 13, 3), float32] */;
  %679 = %674.0;
  %680 = %677.0;
  (%678, %679, %var_6445, meta[relay.Constant][41] /* ty=Tensor[(44, 4), float64] */, %680, meta[relay.Constant][42] /* ty=Tensor[(10, 2), float64] */)
}

def @func_2873() -> Tensor[(6, 13, 3), float32] {
  %681 = @func_2841() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %681.0
}

def @func_2967(%var_2916: Tensor[(6, 13, 3), float32]) -> (Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) {
  %682 = cast(meta[relay.Constant][43] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
  %683 = reshape(%682, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %684 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %685 = %684.0;
  %686 = cast(%var_2916, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %690 = cast(%685, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %691 = log(%690) /* ty=Tensor[(6, 13, 3), float64] */;
  %692 = cast(%var_2916, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %696 = @func_1638(%683) /* ty=Tensor[(8, 16, 5), float64] */;
  %697 = floor_mod(%688, %689) /* ty=Tensor[(6, 13, 3), float64] */;
  %698 = bitwise_and(%694, %695) /* ty=Tensor[(6, 13, 3), int8] */;
  (%696, meta[relay.Constant][43] /* ty=Tensor[(640), float64] */, %697, %698)
}

def @func_4313(%var_4204: Tensor[(10, 7, 16), float64], %var_4241: Tensor[(88), bool]) -> (Tensor[(2, 8, 6), int32], Tensor[(96), float64], Tensor[(88), bool], Tensor[(693), float64], Tensor[(88), bool], Tensor[(6, 13, 3), float32], Tensor[(10, 7, 16), uint64]) {
  %699 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %700 = reshape(%699, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %701 = @func_749(%700) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %702 = cast(meta[relay.Constant][44] /* ty=Tensor[(96), int32] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %703 = cast(meta[relay.Constant][45] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %704 = cast(%var_4241, dtype="bool") /* ty=Tensor[(88), bool] */;
  %705 = reshape(%703, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %706 = reshape(%704, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %707 = @func_721(%705, %706) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */;
  %708 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %709 = cast(%var_4204, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %710 = acos(%709) /* ty=Tensor[(10, 7, 16), float64] */;
  %711 = cast(%710, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %712 = sinh(%711) /* ty=Tensor[(10, 7, 16), float64] */;
  %713 = cast(%var_4204, dtype="uint64") /* ty=Tensor[(10, 7, 16), uint64] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="uint64") /* ty=Tensor[(10, 7, 16), uint64] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %717 = %701.0;
  %718 = sigmoid(%702) /* ty=Tensor[(96), float64] */;
  %719 = %707.2;
  %720 = %708.0;
  %721 = bitwise_or(%715, %716) /* ty=Tensor[(10, 7, 16), uint64] */;
  (%717, %718, %719, meta[relay.Constant][45] /* ty=Tensor[(693), float64] */, %var_4241, %720, %721)
}

def @func_2096(%var_2081: Tensor[(12, 11, 6), float64], %var_2089: Tensor[(12, 11, 6), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) {
  %722 = cast(meta[relay.Constant][46] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %723 = reshape(%722, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %724 = @func_1058(%723) /* ty=(Tensor[(8, 3, 11), float64],) */;
  %725 = cast(%var_2081, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %726 = atanh(%725) /* ty=Tensor[(12, 11, 6), float64] */;
  %727 = cast(%var_2089, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %731 = %724.0;
  %732 = minimum(%729, %730) /* ty=Tensor[(12, 11, 6), float64] */;
  (%731, meta[relay.Constant][46] /* ty=Tensor[(264), float64] */, %732)
}

def @func_6275(%var_6270: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), float64] {
  %733 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %734 = %733.0;
  %735 = cast(%var_6270, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %736 = shape_of(%734, dtype="int32") /* ty=Tensor[(3), int32] */;
  %737 = cast(%734, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %738 = dyn.reshape(%735, %736, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%737, %738) /* ty=Tensor[(6, 13, 3), float64] */
}

def @func_4179(%var_4171: Tensor[(288), int16]) -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) {
  %739 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %742 = reshape(%741, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %743 = @func_3377(%742) /* ty=(Tensor[(6, 13, 3), uint8], Tensor[(6, 13, 3), float32]) */;
  %744 = cast(%var_4171, dtype="int16") /* ty=Tensor[(288), int16] */;
  %745 = reshape(%744, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), int16] */;
  %746 = %743.0;
  %747 = @func_2221(%745) /* ty=Tensor[(12, 8, 3), int16] */;
  (%740, %746, %747, %var_4171)
}

def @func_5039() -> (Tensor[(6, 13, 3), int8], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float64]) {
  %748 = @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %749 = %748.0;
  %750 = @func_2873() /* ty=Tensor[(6, 13, 3), float32] */;
  %751 = cast(%750, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
  %752 = shape_of(%749, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%749, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %755 = cast(%750, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %756 = cast(%749, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %757 = left_shift(%753, %754) /* ty=Tensor[(6, 13, 3), int8] */;
  %758 = sqrt(%755) /* ty=Tensor[(6, 13, 3), float64] */;
  %759 = atanh(%756) /* ty=Tensor[(6, 13, 3), float64] */;
  (%757, %758, %759)
}

def @func_4929(%var_4923: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), float32] {
  %760 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %761 = %760.0;
  %762 = cast(%var_4923, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %764 = cast(%761, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%764, %765) /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_4712() -> Tensor[(6, 13, 3), float32] {
  %766 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %766.1
}

def @func_3012() -> Tensor[(6, 13, 3), float32] {
  @func_2873() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_4741(%var_4735: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), bool] {
  %767 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %768 = %767.0;
  %769 = cast(%var_4735, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %770 = shape_of(%768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %771 = cast(%768, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %772 = dyn.reshape(%769, %770, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%771, %772) /* ty=Tensor[(6, 13, 3), bool] */
}

def @func_529(%var_508: Tensor[(16, 7, 14), float64], %var_509: Tensor[(16, 7, 14), float64]) -> (Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) {
  %773 = cast(%var_509, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %774 = shape_of(%var_508, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%var_508, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %777 = maximum(%775, %776) /* ty=Tensor[(16, 7, 14), float64] */;
  %778 = cast(%777, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
  %779 = shape_of(%var_509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%var_509, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %782 = cast(meta[relay.Constant][47] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %783 = reshape(%782, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %784 = @func_286(%783) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %785 = greater_equal(%780, %781) /* ty=Tensor[(16, 7, 14), bool] */;
  %786 = %784.1;
  (%785, %786, meta[relay.Constant][47] /* ty=Tensor[(60), float32] */)
}

def @func_4134(%var_4029: Tensor[(2, 12, 8), float32], %var_4033: bool, %var_4035: Tensor[(60), float32], %var_4058: Tensor[(96, 1), int32]) -> (Tensor[(?, 10, 6), bool], bool, Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32], Tensor[(288), int16], Tensor[(96, 1), int32], Tensor[(2, 12, 8), int16], Tensor[(2, 12, 8), float32], Tensor[(6, 13, 3), float32], Tensor[(20, 1), float64], Tensor[(168), float64], Tensor[(20), float64], Tensor[(6, 13, 3), float32], Tensor[(1, 10, 6), float32]) {
  %787 = cast(%var_4033, dtype="bool") /* ty=bool */;
  %788 = cast(meta[relay.Constant][48] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %789 = cast(%var_4035, dtype="float32") /* ty=Tensor[(60), float32] */;
  %790 = reshape(%787, newshape=[]) /* ty=bool */;
  %791 = reshape(%788, newshape=[1, 720]) /* ty=Tensor[(1, 720), bool] */;
  %792 = reshape(%789, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
  %793 = @func_3288(%790, %791, %792) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */;
  %794 = @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %795 = cast(%var_4058, dtype="int32") /* ty=Tensor[(96, 1), int32] */;
  %796 = reshape(%795, newshape=[4, 24]) /* ty=Tensor[(4, 24), int32] */;
  %797 = @func_3764(%796) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(2, 8, 6), int32], Tensor[(4, 24), int32], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */;
  %798 = cast(%var_4029, dtype="float32") /* ty=Tensor[(2, 12, 8), float32] */;
  %799 = atan(%798) /* ty=Tensor[(2, 12, 8), float32] */;
  %800 = cast(meta[relay.Constant][49] /* ty=Tensor[(2, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(2, 12, 8), bool] */;
  %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %802 = cast(%799, dtype="bool") /* ty=Tensor[(2, 12, 8), bool] */;
  %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %804 = equal(%802, %803) /* ty=Tensor[(2, 12, 8), bool] */;
  %805 = cast(%var_4029, dtype="int16") /* ty=Tensor[(2, 12, 8), int16] */;
  %806 = shape_of(%804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %807 = cast(%804, dtype="int16") /* ty=Tensor[(2, 12, 8), int16] */;
  %808 = dyn.reshape(%805, %806, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %809 = cast(%804, dtype="float32") /* ty=Tensor[(2, 12, 8), float32] */;
  %810 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %811 = cast(meta[relay.Constant][50] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
  %812 = cast(%var_4033, dtype="bool") /* ty=bool */;
  %813 = cast(meta[relay.Constant][51] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %814 = cast(meta[relay.Constant][48] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %815 = %793.10;
  %816 = cast(%815, dtype="float32") /* ty=Tensor[(?, 10, 6), float32] */;
  %817 = reshape(%811, newshape=[14, 12]) /* ty=Tensor[(14, 12), float64] */;
  %818 = reshape(%812, newshape=[]) /* ty=bool */;
  %819 = reshape(%813, newshape=[20, 1]) /* ty=Tensor[(20, 1), float64] */;
  %820 = reshape(%814, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %821 = reshape(%816, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %822 = @func_3112(%817, %818, %819, %820, %821) /* ty=(Tensor[(14, 12), float64], Tensor[(6, 13, 15), bool], bool, Tensor[(390, 3), bool], Tensor[(20, 1), float64], Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) */;
  %823 = cast(%815, dtype="float32") /* ty=Tensor[(?, 10, 6), float32] */;
  %824 = reshape(%823, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %825 = @func_3575(%824) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */;
  %826 = cast(%var_4035, dtype="float32") /* ty=Tensor[(60), float32] */;
  %827 = reshape(%826, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %828 = @func_286(%827) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %829 = %794.0;
  %830 = %797.7;
  %831 = bitwise_xor(%807, %808) /* ty=Tensor[(2, 12, 8), int16] */;
  %832 = rsqrt(%809) /* ty=Tensor[(2, 12, 8), float32] */;
  %833 = %810.0;
  %834 = %822.4;
  %835 = %825.0;
  %836 = %828.3;
  (%815, %var_4033, meta[relay.Constant][48] /* ty=Tensor[(720), bool] */, %var_4035, %829, %830, %var_4058, %831, %832, %833, %834, meta[relay.Constant][50] /* ty=Tensor[(168), float64] */, meta[relay.Constant][51] /* ty=Tensor[(20), float64] */, %835, %836)
}

def @func_749(%var_742: Tensor[(2, 8, 6), int32]) -> (Tensor[(2, 8, 6), int32],) {
  %837 = cast(meta[relay.Constant][52] /* ty=Tensor[(2, 8, 6), int32] */, dtype="int32") /* ty=Tensor[(2, 8, 6), int32] */;
  %838 = shape_of(%var_742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%var_742, dtype="int32") /* ty=Tensor[(2, 8, 6), int32] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %841 = bitwise_or(%839, %840) /* ty=Tensor[(2, 8, 6), int32] */;
  (%841,)
}

def @func_6776() -> (Tensor[(6, 13, 3), float32], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(4, 11, 2), float64]) {
  %842 = cast(meta[relay.Constant][53] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %843 = cast(meta[relay.Constant][53] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %844 = cast(meta[relay.Constant][53] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %845 = cast(meta[relay.Constant][54] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %846 = reshape(%842, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %847 = reshape(%843, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %848 = reshape(%844, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %849 = reshape(%845, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %850 = @func_624(%846, %847, %848, %849) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %851 = %850.5;
  %852 = cast(%851, dtype="float32") /* ty=Tensor[(4, 11, 2), float32] */;
  %853 = log2(%852) /* ty=Tensor[(4, 11, 2), float32] */;
  %854 = cast(%853, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
  %855 = @func_6563() /* ty=Tensor[(6, 13, 3), float32] */;
  %856 = atanh(%854) /* ty=Tensor[(4, 11, 2), float64] */;
  (%855, meta[relay.Constant][53] /* ty=Tensor[(88), bool] */, meta[relay.Constant][54] /* ty=Tensor[(1568), float64] */, %856)
}

def @func_3112(%var_3053: Tensor[(14, 12), float64], %var_3083: bool, %var_3085: Tensor[(20, 1), float64], %var_3086: Tensor[(720), bool], %var_3087: Tensor[(60), float32]) -> (Tensor[(14, 12), float64], Tensor[(6, 13, 15), bool], bool, Tensor[(390, 3), bool], Tensor[(20, 1), float64], Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) {
  %857 = cast(%var_3053, dtype="float64") /* ty=Tensor[(14, 12), float64] */;
  %858 = cast(%var_3083, dtype="bool") /* ty=bool */;
  %859 = cast(meta[relay.Constant][55] /* ty=Tensor[(390, 3), bool] */, dtype="bool") /* ty=Tensor[(390, 3), bool] */;
  %860 = cast(%var_3085, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
  %861 = cast(%var_3086, dtype="bool") /* ty=Tensor[(720), bool] */;
  %862 = cast(%var_3087, dtype="float32") /* ty=Tensor[(60), float32] */;
  %863 = reshape(%858, newshape=[]) /* ty=bool */;
  %864 = reshape(%859, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), bool] */;
  %865 = reshape(%860, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %866 = reshape(%861, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %867 = reshape(%862, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %868 = @func_1317(%863, %864, %865, %866, %867) /* ty=(Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) */;
  %869 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %870 = acosh(%857) /* ty=Tensor[(14, 12), float64] */;
  %871 = %868.0;
  %872 = %869.0;
  (%870, %871, %var_3083, meta[relay.Constant][55] /* ty=Tensor[(390, 3), bool] */, %var_3085, %var_3086, %var_3087, %872)
}

def @func_943(%var_877: bool, %var_897: Tensor[(9, 5, 16), bool], %var_916: Tensor[(3, 2, 13), bool], %var_921: Tensor[(60), float32]) -> (Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) {
  %873 = cast(meta[relay.Constant][56] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %874 = cast(meta[relay.Constant][56] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %875 = cast(meta[relay.Constant][56] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %876 = cast(meta[relay.Constant][57] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %877 = reshape(%873, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %878 = reshape(%874, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %879 = reshape(%875, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %880 = reshape(%876, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %881 = @func_624(%877, %878, %879, %880) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %882 = cast(%var_877, dtype="bool") /* ty=bool */;
  %883 = cast(%var_897, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
  %884 = cast(%var_877, dtype="bool") /* ty=bool */;
  %885 = cast(meta[relay.Constant][58] /* ty=Tensor[(3, 2, 13), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
  %886 = logical_and(%884, %885) /* ty=Tensor[(3, 2, 13), bool] */;
  %887 = cast(%var_916, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %891 = cast(%var_921, dtype="float32") /* ty=Tensor[(60), float32] */;
  %892 = reshape(%891, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %893 = @func_286(%892) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %894 = %893.0;
  %895 = cast(%894, dtype="float32") /* ty=Tensor[(?, 10, 6), float32] */;
  %896 = %881.3;
  %897 = greater(%882, %883) /* ty=Tensor[(9, 5, 16), bool] */;
  %898 = less_equal(%889, %890) /* ty=Tensor[(3, 2, 13), bool] */;
  %899 = tan(%895) /* ty=Tensor[(?, 10, 6), float32] */;
  (%896, meta[relay.Constant][56] /* ty=Tensor[(88), bool] */, meta[relay.Constant][57] /* ty=Tensor[(1568), float64] */, %897, %898, %var_921, %899)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_4862() -> (Tensor[(?, 10, 6), bool], Tensor[(15, 4), float32], Tensor[(6, 13, 3), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 4), float32] */, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %1 = reshape(%0, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %2 = @func_286(%1) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %3 = @func_3012() /* ty=Tensor[(6, 13, 3), float32] */;
  %4 = cast(%3, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %5 = cos(%4) /* ty=Tensor[(6, 13, 3), float64] */;
  %6 = cast(%5, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %7 = %2.1;
  %8 = sin(%6) /* ty=Tensor[(6, 13, 3), float32] */;
  (%7, meta[relay.Constant][0] /* ty=Tensor[(15, 4), float32] */, %8)
}

def @func_2099(%var_2097: Tensor[(12, 11, 6), float64], %var_2098: Tensor[(12, 11, 6), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) {
  %20 = fn (%var_2081: Tensor[(12, 11, 6), float64], %var_2089: Tensor[(12, 11, 6), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) {
    %9 = cast(meta[relay.Constant][1] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
    %10 = reshape(%9, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
    %11 = @func_1058(%10) /* ty=(Tensor[(8, 3, 11), float64],) */;
    %12 = cast(%var_2081, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
    %13 = atanh(%12) /* ty=Tensor[(12, 11, 6), float64] */;
    %14 = cast(%var_2089, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
    %15 = shape_of(%13, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%13, dtype="float64") /* ty=Tensor[(12, 11, 6), float64] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %18 = %11.0;
    %19 = minimum(%16, %17) /* ty=Tensor[(12, 11, 6), float64] */;
    (%18, meta[relay.Constant][1] /* ty=Tensor[(264), float64] */, %19)
  };
  %20(%var_2097, %var_2098) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) */
}

def @func_6133() -> Tensor[(6, 13, 3), float32] {
  @func_6131() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_749(%var_742: Tensor[(2, 8, 6), int32]) -> (Tensor[(2, 8, 6), int32],) {
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 8, 6), int32] */, dtype="int32") /* ty=Tensor[(2, 8, 6), int32] */;
  %22 = shape_of(%var_742, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_742, dtype="int32") /* ty=Tensor[(2, 8, 6), int32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %25 = bitwise_or(%23, %24) /* ty=Tensor[(2, 8, 6), int32] */;
  (%25,)
}

def @func_6385(%var_6367: Tensor[(8, 3, 11), float64]) -> (Tensor[(6, 13, 3), float32], Tensor[(8, 3, 11), int32], Tensor[(2, 396), float64]) {
  %26 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 396), float64] */, dtype="float64") /* ty=Tensor[(2, 396), float64] */;
  %27 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 396), float64] */, dtype="float64") /* ty=Tensor[(2, 396), float64] */;
  %28 = reshape(%26, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %29 = reshape(%27, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %30 = @func_2096(%28, %29) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) */;
  %31 = %30.0;
  %32 = cast(%var_6367, dtype="int32") /* ty=Tensor[(8, 3, 11), int32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="int32") /* ty=Tensor[(8, 3, 11), int32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 396), float64] */, dtype="float64") /* ty=Tensor[(2, 396), float64] */;
  %37 = @func_2873() /* ty=Tensor[(6, 13, 3), float32] */;
  %38 = bitwise_xor(%34, %35) /* ty=Tensor[(8, 3, 11), int32] */;
  %39 = cosh(%36) /* ty=Tensor[(2, 396), float64] */;
  (%37, %38, %39)
}

def @func_5510() -> Tensor[(6, 13, 3), float32] {
  @func_5508() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_6105(%var_6065: Tensor[(16, 12, 16), float64], %var_6072: Tensor[(1568), float64]) -> (Tensor[(60), float32], Tensor[(1568), float64], Tensor[(16, 12, 16), int8]) {
  %40 = cast(%var_6072, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %41 = cast(%var_6072, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %42 = reshape(%40, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %43 = reshape(%41, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %44 = @func_529(%42, %43) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %45 = cast(%var_6065, dtype="float64") /* ty=Tensor[(16, 12, 16), float64] */;
  %46 = sqrt(%45) /* ty=Tensor[(16, 12, 16), float64] */;
  %47 = cast(meta[relay.Constant][4] /* ty=Tensor[(16, 12, 16), float64] */, dtype="int8") /* ty=Tensor[(16, 12, 16), int8] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int8") /* ty=Tensor[(16, 12, 16), int8] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %51 = %44.2;
  %52 = logical_xor(%49, %50) /* ty=Tensor[(16, 12, 16), int8] */;
  (%51, %var_6072, %52)
}

def @func_4466(%var_4463: Tensor[(6, 13, 3), float32], %var_4464: Tensor[(1440), int8], %var_4465: Tensor[(2, 48), int32]) -> (Tensor[(6, 13, 3), int16], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(9, 10, 16), int8], Tensor[(1440), int8], Tensor[(2, 8, 6), int32], Tensor[(2, 48), int32], Tensor[(6, 13, 3), float32]) {
  @func_4461(%var_4463, %var_4464, %var_4465) /* ty=(Tensor[(6, 13, 3), int16], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(9, 10, 16), int8], Tensor[(1440), int8], Tensor[(2, 8, 6), int32], Tensor[(2, 48), int32], Tensor[(6, 13, 3), float32]) */
}

def @func_5130() -> (Tensor[(6, 13, 3), float32],) {
  %55 = fn () -> (Tensor[(6, 13, 3), float32],) {
    %53 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
    %54 = %53.4;
    (%54,)
  };
  %55() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_1641(%var_1639: Tensor[(8, 16, 5), float64]) -> Tensor[(8, 16, 5), float64] {
  @func_1638(%var_1639) /* ty=Tensor[(8, 16, 5), float64] */
}

def @func_6544() -> (Tensor[(6, 13, 3), float32],) {
  %56 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%56,)
}

def @func_948(%var_944: bool, %var_945: Tensor[(9, 5, 16), bool], %var_946: Tensor[(3, 2, 13), bool], %var_947: Tensor[(60), float32]) -> (Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) {
  %84 = fn (%var_877: bool, %var_897: Tensor[(9, 5, 16), bool], %var_916: Tensor[(3, 2, 13), bool], %var_921: Tensor[(60), float32]) -> (Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) {
    %57 = cast(meta[relay.Constant][5] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %60 = cast(meta[relay.Constant][6] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %61 = reshape(%57, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
    %62 = reshape(%58, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
    %63 = reshape(%59, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
    %64 = reshape(%60, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %65 = @func_624(%61, %62, %63, %64) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
    %66 = cast(%var_877, dtype="bool") /* ty=bool */;
    %67 = cast(%var_897, dtype="bool") /* ty=Tensor[(9, 5, 16), bool] */;
    %68 = cast(%var_877, dtype="bool") /* ty=bool */;
    %69 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 2, 13), bool] */, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
    %70 = logical_and(%68, %69) /* ty=Tensor[(3, 2, 13), bool] */;
    %71 = cast(%var_916, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
    %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%70, dtype="bool") /* ty=Tensor[(3, 2, 13), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = cast(%var_921, dtype="float32") /* ty=Tensor[(60), float32] */;
    %76 = reshape(%75, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
    %77 = @func_286(%76) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
    %78 = %77.0;
    %79 = cast(%78, dtype="float32") /* ty=Tensor[(?, 10, 6), float32] */;
    %80 = %65.3;
    %81 = greater(%66, %67) /* ty=Tensor[(9, 5, 16), bool] */;
    %82 = less_equal(%73, %74) /* ty=Tensor[(3, 2, 13), bool] */;
    %83 = tan(%79) /* ty=Tensor[(?, 10, 6), float32] */;
    (%80, meta[relay.Constant][5] /* ty=Tensor[(88), bool] */, meta[relay.Constant][6] /* ty=Tensor[(1568), float64] */, %81, %82, %var_921, %83)
  };
  %84(%var_944, %var_945, %var_946, %var_947) /* ty=(Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) */
}

def @func_2697() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) {
  @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */
}

def @func_4741(%var_4735: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), bool] {
  %85 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %86 = %85.0;
  %87 = cast(%var_4735, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(3), int32] */;
  %89 = cast(%86, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%89, %90) /* ty=Tensor[(6, 13, 3), bool] */
}

def @func_4864() -> (Tensor[(?, 10, 6), bool], Tensor[(15, 4), float32], Tensor[(6, 13, 3), float32]) {
  @func_4862() /* ty=(Tensor[(?, 10, 6), bool], Tensor[(15, 4), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_6873(%var_6872: Tensor[(88), bool]) -> (Tensor[(6, 13, 3), float64], Tensor[(693), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(1440), int8]) {
  %103 = fn (%var_6851: Tensor[(88), bool]) -> (Tensor[(6, 13, 3), float64], Tensor[(693), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(1440), int8]) {
    %91 = @func_4891() /* ty=(Tensor[(6, 13, 3), float64],) */;
    %92 = cast(meta[relay.Constant][8] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
    %93 = cast(%var_6851, dtype="bool") /* ty=Tensor[(88), bool] */;
    %94 = cast(meta[relay.Constant][9] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %95 = cast(meta[relay.Constant][10] /* ty=Tensor[(1440), int8] */, dtype="int8") /* ty=Tensor[(1440), int8] */;
    %96 = reshape(%92, newshape=[693]) /* ty=Tensor[(693), float64] */;
    %97 = reshape(%93, newshape=[88]) /* ty=Tensor[(88), bool] */;
    %98 = reshape(%94, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %99 = reshape(%95, newshape=[360, 4]) /* ty=Tensor[(360, 4), int8] */;
    %100 = @func_4542(%96, %97, %98, %99) /* ty=(Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) */;
    %101 = %91.0;
    %102 = %100.0;
    (%101, %102, meta[relay.Constant][8] /* ty=Tensor[(693), float64] */, %var_6851, meta[relay.Constant][9] /* ty=Tensor[(1568), float64] */, meta[relay.Constant][10] /* ty=Tensor[(1440), int8] */)
  };
  %103(%var_6872) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(693), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(1440), int8]) */
}

def @func_3137() -> (Tensor[(6, 13, 3), float32],) {
  %104 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%104,)
}

def @func_629(%var_625: Tensor[(4, 11, 2), bool], %var_626: Tensor[(4, 11, 2), bool], %var_627: Tensor[(4, 11, 2), bool], %var_628: Tensor[(1568), float64]) -> (Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) {
  %137 = fn (%var_549: Tensor[(4, 11, 2), bool], %var_550: Tensor[(4, 11, 2), bool], %var_580: Tensor[(4, 11, 2), bool], %var_593: Tensor[(1568), float64]) -> (Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) {
    %105 = cast(%var_550, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
    %106 = shape_of(%var_549, dtype="int32") /* ty=Tensor[(3), int32] */;
    %107 = cast(%var_549, dtype="bool") /* ty=Tensor[(4, 11, 2), bool] */;
    %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %109 = cast(%var_580, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
    %110 = shape_of(%var_550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %111 = cast(%var_550, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
    %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %113 = cast(%var_593, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %114 = cast(%var_593, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %115 = reshape(%113, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %116 = reshape(%114, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %117 = @func_529(%115, %116) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
    %118 = %117.0;
    %119 = cast(%118, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
    %120 = cast(%118, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
    %121 = reshape(%119, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %122 = reshape(%120, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %123 = @func_529(%121, %122) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
    %124 = cast(%var_580, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
    %125 = exp(%124) /* ty=Tensor[(4, 11, 2), float64] */;
    %126 = cast(%125, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
    %127 = cast(%118, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
    %128 = cast(%118, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
    %129 = reshape(%127, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %130 = reshape(%128, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %131 = @func_529(%129, %130) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
    %132 = logical_or(%107, %108) /* ty=Tensor[(4, 11, 2), bool] */;
    %133 = power(%111, %112) /* ty=Tensor[(4, 11, 2), float64] */;
    %134 = %123.1;
    %135 = tan(%126) /* ty=Tensor[(4, 11, 2), float64] */;
    %136 = %131.2;
    (%132, %133, %118, %var_593, %134, %135, %136)
  };
  %137(%var_625, %var_626, %var_627, %var_628) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */
}

def @func_3293(%var_3290: bool, %var_3291: Tensor[(1, 720), bool], %var_3292: Tensor[(15, 4), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) {
  @func_3288(%var_3290, %var_3291, %var_3292) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */
}

def @func_4139(%var_4135: Tensor[(2, 12, 8), float32], %var_4136: bool, %var_4137: Tensor[(60), float32], %var_4138: Tensor[(96, 1), int32]) -> (Tensor[(?, 10, 6), bool], bool, Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32], Tensor[(288), int16], Tensor[(96, 1), int32], Tensor[(2, 12, 8), int16], Tensor[(2, 12, 8), float32], Tensor[(6, 13, 3), float32], Tensor[(20, 1), float64], Tensor[(168), float64], Tensor[(20), float64], Tensor[(6, 13, 3), float32], Tensor[(1, 10, 6), float32]) {
  %188 = fn (%var_4029: Tensor[(2, 12, 8), float32], %var_4033: bool, %var_4035: Tensor[(60), float32], %var_4058: Tensor[(96, 1), int32]) -> (Tensor[(?, 10, 6), bool], bool, Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32], Tensor[(288), int16], Tensor[(96, 1), int32], Tensor[(2, 12, 8), int16], Tensor[(2, 12, 8), float32], Tensor[(6, 13, 3), float32], Tensor[(20, 1), float64], Tensor[(168), float64], Tensor[(20), float64], Tensor[(6, 13, 3), float32], Tensor[(1, 10, 6), float32]) {
    %138 = cast(%var_4033, dtype="bool") /* ty=bool */;
    %139 = cast(meta[relay.Constant][11] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
    %140 = cast(%var_4035, dtype="float32") /* ty=Tensor[(60), float32] */;
    %141 = reshape(%138, newshape=[]) /* ty=bool */;
    %142 = reshape(%139, newshape=[1, 720]) /* ty=Tensor[(1, 720), bool] */;
    %143 = reshape(%140, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
    %144 = @func_3288(%141, %142, %143) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */;
    %145 = @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %146 = cast(%var_4058, dtype="int32") /* ty=Tensor[(96, 1), int32] */;
    %147 = reshape(%146, newshape=[4, 24]) /* ty=Tensor[(4, 24), int32] */;
    %148 = @func_3764(%147) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(2, 8, 6), int32], Tensor[(4, 24), int32], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */;
    %149 = cast(%var_4029, dtype="float32") /* ty=Tensor[(2, 12, 8), float32] */;
    %150 = atan(%149) /* ty=Tensor[(2, 12, 8), float32] */;
    %151 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 12, 8), float32] */, dtype="bool") /* ty=Tensor[(2, 12, 8), bool] */;
    %152 = shape_of(%150, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%150, dtype="bool") /* ty=Tensor[(2, 12, 8), bool] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %155 = equal(%153, %154) /* ty=Tensor[(2, 12, 8), bool] */;
    %156 = cast(%var_4029, dtype="int16") /* ty=Tensor[(2, 12, 8), int16] */;
    %157 = shape_of(%155, dtype="int32") /* ty=Tensor[(3), int32] */;
    %158 = cast(%155, dtype="int16") /* ty=Tensor[(2, 12, 8), int16] */;
    %159 = dyn.reshape(%156, %157, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %160 = cast(%155, dtype="float32") /* ty=Tensor[(2, 12, 8), float32] */;
    %161 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %162 = cast(meta[relay.Constant][13] /* ty=Tensor[(168), float64] */, dtype="float64") /* ty=Tensor[(168), float64] */;
    %163 = cast(%var_4033, dtype="bool") /* ty=bool */;
    %164 = cast(meta[relay.Constant][14] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %165 = cast(meta[relay.Constant][11] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
    %166 = %144.10;
    %167 = cast(%166, dtype="float32") /* ty=Tensor[(?, 10, 6), float32] */;
    %168 = reshape(%162, newshape=[14, 12]) /* ty=Tensor[(14, 12), float64] */;
    %169 = reshape(%163, newshape=[]) /* ty=bool */;
    %170 = reshape(%164, newshape=[20, 1]) /* ty=Tensor[(20, 1), float64] */;
    %171 = reshape(%165, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %172 = reshape(%167, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %173 = @func_3112(%168, %169, %170, %171, %172) /* ty=(Tensor[(14, 12), float64], Tensor[(6, 13, 15), bool], bool, Tensor[(390, 3), bool], Tensor[(20, 1), float64], Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) */;
    %174 = cast(%166, dtype="float32") /* ty=Tensor[(?, 10, 6), float32] */;
    %175 = reshape(%174, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
    %176 = @func_3575(%175) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */;
    %177 = cast(%var_4035, dtype="float32") /* ty=Tensor[(60), float32] */;
    %178 = reshape(%177, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
    %179 = @func_286(%178) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
    %180 = %145.0;
    %181 = %148.7;
    %182 = bitwise_xor(%158, %159) /* ty=Tensor[(2, 12, 8), int16] */;
    %183 = rsqrt(%160) /* ty=Tensor[(2, 12, 8), float32] */;
    %184 = %161.0;
    %185 = %173.4;
    %186 = %176.0;
    %187 = %179.3;
    (%166, %var_4033, meta[relay.Constant][11] /* ty=Tensor[(720), bool] */, %var_4035, %180, %181, %var_4058, %182, %183, %184, %185, meta[relay.Constant][13] /* ty=Tensor[(168), float64] */, meta[relay.Constant][14] /* ty=Tensor[(20), float64] */, %186, %187)
  };
  %188(%var_4135, %var_4136, %var_4137, %var_4138) /* ty=(Tensor[(?, 10, 6), bool], bool, Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32], Tensor[(288), int16], Tensor[(96, 1), int32], Tensor[(2, 12, 8), int16], Tensor[(2, 12, 8), float32], Tensor[(6, 13, 3), float32], Tensor[(20, 1), float64], Tensor[(168), float64], Tensor[(20), float64], Tensor[(6, 13, 3), float32], Tensor[(1, 10, 6), float32]) */
}

def @func_3713(%var_3607: Tensor[(6, 13, 3), float32], %var_3634: Tensor[(640), float64], %var_3677: Tensor[(1568), float64]) -> (Tensor[(4, 11, 2), float64], Tensor[(88), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(6, 13, 3), bool]) {
  %189 = cast(meta[relay.Constant][15] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %190 = cast(meta[relay.Constant][15] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %191 = cast(meta[relay.Constant][15] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %192 = cast(meta[relay.Constant][16] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %193 = reshape(%189, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %194 = reshape(%190, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %195 = reshape(%191, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %196 = reshape(%192, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %197 = @func_624(%193, %194, %195, %196) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %198 = cast(%var_3634, dtype="float64") /* ty=Tensor[(640), float64] */;
  %199 = reshape(%198, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %200 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  %201 = cast(%var_3607, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
  %203 = cast(%200, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %205 = logical_and(%203, %204) /* ty=Tensor[(6, 13, 3), bool] */;
  %206 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 13, 3), bool] */, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %207 = shape_of(%205, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(%205, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %210 = cast(%var_3677, dtype="bool") /* ty=Tensor[(1568), bool] */;
  %211 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(1568), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %212 = cast(meta[relay.Constant][16] /* ty=Tensor[(1568), float64] */, dtype="bool") /* ty=Tensor[(1568), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?), bool] */;
  %214 = cast(meta[relay.Constant][18] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %215 = reshape(%214, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %216 = @func_1231(%215) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %217 = @func_2873() /* ty=Tensor[(6, 13, 3), float32] */;
  %218 = cast(%205, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %222 = %197.1;
  %223 = @func_1638(%199) /* ty=Tensor[(8, 16, 5), float64] */;
  %224 = floor_divide(%208, %209) /* ty=Tensor[(6, 13, 3), float32] */;
  %225 = logical_and(%212, %213) /* ty=Tensor[(1568), bool] */;
  %226 = %216.0;
  %227 = equal(%220, %221) /* ty=Tensor[(6, 13, 3), bool] */;
  (%222, meta[relay.Constant][15] /* ty=Tensor[(88), bool] */, %223, %var_3634, %224, %225, %226, meta[relay.Constant][18] /* ty=Tensor[(20), float64] */, %227)
}

def @func_7071() -> (Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64], Tensor[(22, 4), bool]) {
  %237 = fn () -> (Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64], Tensor[(22, 4), bool]) {
    %228 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %229 = %228.0;
    %230 = cast(%229, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
    %231 = cast(meta[relay.Constant][19] /* ty=Tensor[(22, 4), bool] */, dtype="bool") /* ty=Tensor[(22, 4), bool] */;
    %232 = reshape(%231, newshape=[88]) /* ty=Tensor[(88), bool] */;
    %233 = @func_6871(%232) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(693), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(1440), int8]) */;
    %234 = exp(%230) /* ty=Tensor[(6, 13, 3), float64] */;
    %235 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
    %236 = %233.0;
    (%234, %235, %236, meta[relay.Constant][19] /* ty=Tensor[(22, 4), bool] */)
  };
  %237() /* ty=(Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64], Tensor[(22, 4), bool]) */
}

def @func_288(%var_287: Tensor[(1, 10, 6), float32]) -> (Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) {
  %266 = fn (%var_239: Tensor[(1, 10, 6), float32]) -> (Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) {
    %238 = cast(%var_239, dtype="float32") /* ty=Tensor[(1, 10, 6), float32] */;
    %239 = acosh(%238) /* ty=Tensor[(1, 10, 6), float32] */;
    %240 = cast(%239, dtype="float32") /* ty=Tensor[(1, 10, 6), float32] */;
    %241 = sinh(%240) /* ty=Tensor[(1, 10, 6), float32] */;
    %242 = cast(%var_239, dtype="int32") /* ty=Tensor[(1, 10, 6), int32] */;
    %243 = shape_of(%239, dtype="int32") /* ty=Tensor[(3), int32] */;
    %244 = cast(%239, dtype="int32") /* ty=Tensor[(1, 10, 6), int32] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %246 = add(%244, %245) /* ty=Tensor[(?, 10, 6), int32] */;
    %247 = cast(%246, dtype="int32") /* ty=Tensor[(?, 10, 6), int32] */;
    %248 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %249 = cast(%241, dtype="int32") /* ty=Tensor[(1, 10, 6), int32] */;
    %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %251 = right_shift(%249, %250) /* ty=Tensor[(?, 10, 6), int32] */;
    %252 = cast(%246, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
    %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%251, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %256 = cast(%251, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
    %257 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
    %258 = cast(%246, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
    %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %260 = cast(%241, dtype="float64") /* ty=Tensor[(1, 10, 6), float64] */;
    %261 = cast(%239, dtype="float32") /* ty=Tensor[(1, 10, 6), float32] */;
    %262 = less(%254, %255) /* ty=Tensor[(?, 10, 6), bool] */;
    %263 = logical_and(%258, %259) /* ty=Tensor[(?, 10, 6), bool] */;
    %264 = sigmoid(%260) /* ty=Tensor[(1, 10, 6), float64] */;
    %265 = acos(%261) /* ty=Tensor[(1, 10, 6), float32] */;
    (%262, %263, %264, %265)
  };
  %266(%var_287) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */
}

def @func_2223(%var_2222: Tensor[(12, 8, 3), int16]) -> Tensor[(12, 8, 3), int16] {
  %271 = fn (%var_2216: Tensor[(12, 8, 3), int16]) -> Tensor[(12, 8, 3), int16] {
    %267 = cast(%var_2216, dtype="int16") /* ty=Tensor[(12, 8, 3), int16] */;
    %268 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(12, 8, 3), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %269 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 8, 3), int16] */, dtype="int16") /* ty=Tensor[(12, 8, 3), int16] */;
    %270 = dyn.reshape(%267, %268, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    add(%269, %270) /* ty=Tensor[(12, 8, 3), int16] */
  };
  %271(%var_2222) /* ty=Tensor[(12, 8, 3), int16] */
}

def @func_5744(%var_5723: Tensor[(8, 36), int16]) -> (Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), float64]) {
  %272 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %273 = cast(%var_5723, dtype="int16") /* ty=Tensor[(8, 36), int16] */;
  %274 = reshape(%273, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %275 = @func_4179(%274) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */;
  %276 = %275.2;
  %277 = cast(%var_5723, dtype="float64") /* ty=Tensor[(8, 36), float64] */;
  %278 = shape_of(%276, dtype="int32") /* ty=Tensor[(3), int32] */;
  %279 = cast(%276, dtype="float64") /* ty=Tensor[(12, 8, 3), float64] */;
  %280 = dyn.reshape(%277, %278, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %281 = %272.0;
  %282 = power(%279, %280) /* ty=Tensor[(12, 8, 3), float64] */;
  (%281, %282)
}

def @func_1233(%var_1232: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64],) {
  %285 = fn (%var_1220: Tensor[(5, 2, 2), float64]) -> (Tensor[(5, 2, 2), float64],) {
    %283 = cast(%var_1220, dtype="float64") /* ty=Tensor[(5, 2, 2), float64] */;
    %284 = atanh(%283) /* ty=Tensor[(5, 2, 2), float64] */;
    (%284,)
  };
  %285(%var_1232) /* ty=(Tensor[(5, 2, 2), float64],) */
}

def @func_4334(%var_4326: Tensor[(9, 10, 16), int8], %var_4327: Tensor[(9, 10, 16), int8]) -> Tensor[(9, 10, 16), int8] {
  %286 = cast(%var_4327, dtype="int8") /* ty=Tensor[(9, 10, 16), int8] */;
  %287 = shape_of(%var_4326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %288 = cast(%var_4326, dtype="int8") /* ty=Tensor[(9, 10, 16), int8] */;
  %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  minimum(%288, %289) /* ty=Tensor[(9, 10, 16), int8] */
}

def @func_5747(%var_5745: Tensor[(8, 36), int16]) -> (Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), float64]) {
  @func_5744(%var_5745) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), float64]) */
}

def @func_6109(%var_6107: Tensor[(16, 12, 16), float64], %var_6108: Tensor[(1568), float64]) -> (Tensor[(60), float32], Tensor[(1568), float64], Tensor[(16, 12, 16), int8]) {
  @func_6105(%var_6107, %var_6108) /* ty=(Tensor[(60), float32], Tensor[(1568), float64], Tensor[(16, 12, 16), int8]) */
}

def @func_3118(%var_3113: Tensor[(14, 12), float64], %var_3114: bool, %var_3115: Tensor[(20, 1), float64], %var_3116: Tensor[(720), bool], %var_3117: Tensor[(60), float32]) -> (Tensor[(14, 12), float64], Tensor[(6, 13, 15), bool], bool, Tensor[(390, 3), bool], Tensor[(20, 1), float64], Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) {
  %306 = fn (%var_3053: Tensor[(14, 12), float64], %var_3083: bool, %var_3085: Tensor[(20, 1), float64], %var_3086: Tensor[(720), bool], %var_3087: Tensor[(60), float32]) -> (Tensor[(14, 12), float64], Tensor[(6, 13, 15), bool], bool, Tensor[(390, 3), bool], Tensor[(20, 1), float64], Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) {
    %290 = cast(%var_3053, dtype="float64") /* ty=Tensor[(14, 12), float64] */;
    %291 = cast(%var_3083, dtype="bool") /* ty=bool */;
    %292 = cast(meta[relay.Constant][21] /* ty=Tensor[(390, 3), bool] */, dtype="bool") /* ty=Tensor[(390, 3), bool] */;
    %293 = cast(%var_3085, dtype="float64") /* ty=Tensor[(20, 1), float64] */;
    %294 = cast(%var_3086, dtype="bool") /* ty=Tensor[(720), bool] */;
    %295 = cast(%var_3087, dtype="float32") /* ty=Tensor[(60), float32] */;
    %296 = reshape(%291, newshape=[]) /* ty=bool */;
    %297 = reshape(%292, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), bool] */;
    %298 = reshape(%293, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %299 = reshape(%294, newshape=[720]) /* ty=Tensor[(720), bool] */;
    %300 = reshape(%295, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %301 = @func_1317(%296, %297, %298, %299, %300) /* ty=(Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) */;
    %302 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %303 = acosh(%290) /* ty=Tensor[(14, 12), float64] */;
    %304 = %301.0;
    %305 = %302.0;
    (%303, %304, %var_3083, meta[relay.Constant][21] /* ty=Tensor[(390, 3), bool] */, %var_3085, %var_3086, %var_3087, %305)
  };
  %306(%var_3113, %var_3114, %var_3115, %var_3116, %var_3117) /* ty=(Tensor[(14, 12), float64], Tensor[(6, 13, 15), bool], bool, Tensor[(390, 3), bool], Tensor[(20, 1), float64], Tensor[(720), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_5972() -> Tensor[(?, 10, 6), bool] {
  @func_5970() /* ty=Tensor[(?, 10, 6), bool] */
}

def @func_6459(%var_6457: float64) -> (Tensor[(6, 13, 3), float32], Tensor[(11, 8, 2), float64], float64, Tensor[(44, 4), float64], Tensor[(5, 2, 2), float64], Tensor[(10, 2), float64]) {
  @func_6456(%var_6457) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(11, 8, 2), float64], float64, Tensor[(44, 4), float64], Tensor[(5, 2, 2), float64], Tensor[(10, 2), float64]) */
}

def @func_2969(%var_2968: Tensor[(6, 13, 3), float32]) -> (Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) {
  %324 = fn (%var_2916: Tensor[(6, 13, 3), float32]) -> (Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) {
    %307 = cast(meta[relay.Constant][22] /* ty=Tensor[(640), float64] */, dtype="float64") /* ty=Tensor[(640), float64] */;
    %308 = reshape(%307, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
    %309 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %310 = %309.0;
    %311 = cast(%var_2916, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
    %312 = shape_of(%310, dtype="int32") /* ty=Tensor[(3), int32] */;
    %313 = cast(%310, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
    %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %315 = cast(%310, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
    %316 = log(%315) /* ty=Tensor[(6, 13, 3), float64] */;
    %317 = cast(%var_2916, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
    %318 = shape_of(%316, dtype="int32") /* ty=Tensor[(3), int32] */;
    %319 = cast(%316, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
    %320 = dyn.reshape(%317, %318, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %321 = @func_1638(%308) /* ty=Tensor[(8, 16, 5), float64] */;
    %322 = floor_mod(%313, %314) /* ty=Tensor[(6, 13, 3), float64] */;
    %323 = bitwise_and(%319, %320) /* ty=Tensor[(6, 13, 3), int8] */;
    (%321, meta[relay.Constant][22] /* ty=Tensor[(640), float64] */, %322, %323)
  };
  %324(%var_2968) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) */
}

def @func_4929(%var_4923: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), float32] {
  %325 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %326 = %325.0;
  %327 = cast(%var_4923, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %328 = shape_of(%326, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%326, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  multiply(%329, %330) /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5508() -> Tensor[(6, 13, 3), float32] {
  %331 = @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %331.0
}

def @func_7157() -> (Tensor[(?, 10, 6), bool], Tensor[(6, 13, 3), float32]) {
  %335 = fn () -> (Tensor[(?, 10, 6), bool], Tensor[(6, 13, 3), float32]) {
    %332 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %333 = @func_5970() /* ty=Tensor[(?, 10, 6), bool] */;
    %334 = %332.0;
    (%333, %334)
  };
  %335() /* ty=(Tensor[(?, 10, 6), bool], Tensor[(6, 13, 3), float32]) */
}

def @func_5943(%var_5941: float64, %var_5942: Tensor[(11, 8, 2), float64]) -> (Tensor[(11, 8, 2), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32]) {
  @func_5939(%var_5941, %var_5942) /* ty=(Tensor[(11, 8, 2), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32]) */
}

def @func_3139() -> (Tensor[(6, 13, 3), float32],) {
  @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_1880(%var_1878: Tensor[(9, 2, 10), int8], %var_1879: Tensor[(9, 2, 10), int8]) -> (Tensor[(9, 2, 10), bool], Tensor[(60), float32], Tensor[(88), bool], Tensor[(1568), float64]) {
  @func_1876(%var_1878, %var_1879) /* ty=(Tensor[(9, 2, 10), bool], Tensor[(60), float32], Tensor[(88), bool], Tensor[(1568), float64]) */
}

def @func_6676() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %339 = fn () -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
    %336 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
    %337 = %336.0;
    %338 = @func_5350() /* ty=Tensor[(6, 13, 3), float32] */;
    (%337, %338)
  };
  %339() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_3968() -> (Tensor[(6, 13, 3), float32],) {
  %340 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %341 = %340.0;
  (%341,)
}

def @func_4932(%var_4930: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), float32] {
  @func_4929(%var_4930) /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_2809(%var_2804: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), int32] {
  %342 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %343 = %342.0;
  %344 = cast(%var_2804, dtype="int32") /* ty=Tensor[(6, 13, 3), int32] */;
  %345 = shape_of(%343, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%343, dtype="int32") /* ty=Tensor[(6, 13, 3), int32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  bitwise_xor(%346, %347) /* ty=Tensor[(6, 13, 3), int32] */
}

def @func_5248() -> (Tensor[(6, 13, 3), float32],) {
  %350 = fn () -> (Tensor[(6, 13, 3), float32],) {
    %348 = @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %349 = %348.0;
    (%349,)
  };
  %350() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_5970() -> Tensor[(?, 10, 6), bool] {
  %351 = @func_4862() /* ty=(Tensor[(?, 10, 6), bool], Tensor[(15, 4), float32], Tensor[(6, 13, 3), float32]) */;
  %351.0
}

def @func_3380(%var_3378: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), uint8], Tensor[(6, 13, 3), float32]) {
  @func_3377(%var_3378) /* ty=(Tensor[(6, 13, 3), uint8], Tensor[(6, 13, 3), float32]) */
}

def @func_6227(%var_6224: Tensor[(8, 140), float64], %var_6225: Tensor[(44, 2), bool], %var_6226: Tensor[(44, 2), bool]) -> (Tensor[(6, 13, 3), float32], Tensor[(96), float64], Tensor[(8, 140), float64], Tensor[(2, 8, 6), int32], Tensor[(44, 2), uint16]) {
  %368 = fn (%var_6198: Tensor[(8, 140), float64], %var_6199: Tensor[(44, 2), bool], %var_6218: Tensor[(44, 2), bool]) -> (Tensor[(6, 13, 3), float32], Tensor[(96), float64], Tensor[(8, 140), float64], Tensor[(2, 8, 6), int32], Tensor[(44, 2), uint16]) {
    %352 = cast(%var_6198, dtype="float64") /* ty=Tensor[(8, 140), float64] */;
    %353 = cast(%var_6199, dtype="bool") /* ty=Tensor[(44, 2), bool] */;
    %354 = reshape(%352, newshape=[10, 7, 16]) /* ty=Tensor[(10, 7, 16), float64] */;
    %355 = reshape(%353, newshape=[88]) /* ty=Tensor[(88), bool] */;
    %356 = @func_4313(%354, %355) /* ty=(Tensor[(2, 8, 6), int32], Tensor[(96), float64], Tensor[(88), bool], Tensor[(693), float64], Tensor[(88), bool], Tensor[(6, 13, 3), float32], Tensor[(10, 7, 16), uint64]) */;
    %357 = %356.1;
    %358 = cast(%357, dtype="int32") /* ty=Tensor[(96), int32] */;
    %359 = reshape(%358, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
    %360 = @func_749(%359) /* ty=(Tensor[(2, 8, 6), int32],) */;
    %361 = cast(%var_6218, dtype="uint16") /* ty=Tensor[(44, 2), uint16] */;
    %362 = shape_of(%var_6199, dtype="int32") /* ty=Tensor[(2), int32] */;
    %363 = cast(%var_6199, dtype="uint16") /* ty=Tensor[(44, 2), uint16] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %365 = @func_4712() /* ty=Tensor[(6, 13, 3), float32] */;
    %366 = %360.0;
    %367 = right_shift(%363, %364) /* ty=Tensor[(44, 2), uint16] */;
    (%365, %357, %var_6198, %366, %367)
  };
  %368(%var_6224, %var_6225, %var_6226) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(96), float64], Tensor[(8, 140), float64], Tensor[(2, 8, 6), int32], Tensor[(44, 2), uint16]) */
}

def @func_2982() -> Tensor[(6, 13, 3), float32] {
  %372 = fn () -> Tensor[(6, 13, 3), float32] {
    %369 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %370 = %369.0;
    %371 = cast(%370, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
    acos(%371) /* ty=Tensor[(6, 13, 3), float32] */
  };
  %372() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_4181(%var_4180: Tensor[(288), int16]) -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) {
  %382 = fn (%var_4171: Tensor[(288), int16]) -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) {
    %373 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %374 = %373.0;
    %375 = cast(%374, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
    %376 = reshape(%375, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
    %377 = @func_3377(%376) /* ty=(Tensor[(6, 13, 3), uint8], Tensor[(6, 13, 3), float32]) */;
    %378 = cast(%var_4171, dtype="int16") /* ty=Tensor[(288), int16] */;
    %379 = reshape(%378, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), int16] */;
    %380 = %377.0;
    %381 = @func_2221(%379) /* ty=Tensor[(12, 8, 3), int16] */;
    (%374, %380, %381, %var_4171)
  };
  %382(%var_4180) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */
}

def @func_4604(%var_4603: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64], Tensor[(2, 8, 6), int32], Tensor[(96), int32]) {
  %389 = fn (%var_4580: Tensor[(4, 8, 5), float64]) -> (Tensor[(4, 8, 5), float64], Tensor[(2, 8, 6), int32], Tensor[(96), int32]) {
    %383 = cast(%var_4580, dtype="float64") /* ty=Tensor[(4, 8, 5), float64] */;
    %384 = cast(meta[relay.Constant][23] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
    %385 = reshape(%384, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
    %386 = @func_749(%385) /* ty=(Tensor[(2, 8, 6), int32],) */;
    %387 = atanh(%383) /* ty=Tensor[(4, 8, 5), float64] */;
    %388 = %386.0;
    (%387, %388, meta[relay.Constant][23] /* ty=Tensor[(96), int32] */)
  };
  %389(%var_4603) /* ty=(Tensor[(4, 8, 5), float64], Tensor[(2, 8, 6), int32], Tensor[(96), int32]) */
}

def @func_2874() -> Tensor[(6, 13, 3), float32] {
  %391 = fn () -> Tensor[(6, 13, 3), float32] {
    %390 = @func_2841() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %390.0
  };
  %391() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5169(%var_5166: Tensor[(693), float64], %var_5167: Tensor[(88, 1), bool], %var_5168: Tensor[(180, 8), int8]) -> (Tensor[(6, 13, 3), uint8], Tensor[(1568), float64], Tensor[(693), float64], Tensor[(88, 1), bool], Tensor[(784, 2), float64], Tensor[(180, 8), int8], Tensor[(6, 13, 3), float32]) {
  @func_5164(%var_5166, %var_5167, %var_5168) /* ty=(Tensor[(6, 13, 3), uint8], Tensor[(1568), float64], Tensor[(693), float64], Tensor[(88, 1), bool], Tensor[(784, 2), float64], Tensor[(180, 8), int8], Tensor[(6, 13, 3), float32]) */
}

def @func_3540(%var_3538: Tensor[(1568), float64], %var_3539: Tensor[(6, 13, 3), float64]) -> (Tensor[(?, 10, 6), bool], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(16, 7, 14), bool], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64]) {
  @func_3536(%var_3538, %var_3539) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(16, 7, 14), bool], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64]) */
}

def @func_4701(%var_4699: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), bool], Tensor[(6, 13, 3), float64]) {
  @func_4698(%var_4699) /* ty=(Tensor[(6, 13, 3), bool], Tensor[(6, 13, 3), float64]) */
}

def @func_3916(%var_3911: Tensor[(180), int8], %var_3912: Tensor[(1, 640), float64], %var_3913: Tensor[(1568), float64], %var_3914: bool, %var_3915: Tensor[(12, 60), bool]) -> (Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(180), int8], Tensor[(6, 13, 3), bool], Tensor[(1, 640), float64], Tensor[(1568), float64], Tensor[(60), float32], Tensor[(?, 10, 6), bool], bool, Tensor[(12, 60), bool]) {
  %422 = fn (%var_3857: Tensor[(180), int8], %var_3880: Tensor[(1, 640), float64], %var_3881: Tensor[(1568), float64], %var_3907: bool, %var_3908: Tensor[(12, 60), bool]) -> (Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(180), int8], Tensor[(6, 13, 3), bool], Tensor[(1, 640), float64], Tensor[(1568), float64], Tensor[(60), float32], Tensor[(?, 10, 6), bool], bool, Tensor[(12, 60), bool]) {
    %392 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
    %393 = cast(%var_3857, dtype="int8") /* ty=Tensor[(180), int8] */;
    %394 = cast(%var_3857, dtype="int8") /* ty=Tensor[(180), int8] */;
    %395 = reshape(%393, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int8] */;
    %396 = reshape(%394, newshape=[9, 2, 10]) /* ty=Tensor[(9, 2, 10), int8] */;
    %397 = @func_1876(%395, %396) /* ty=(Tensor[(9, 2, 10), bool], Tensor[(60), float32], Tensor[(88), bool], Tensor[(1568), float64]) */;
    %398 = %392.0;
    %399 = cast(%398, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
    %400 = cast(%var_3880, dtype="float64") /* ty=Tensor[(1, 640), float64] */;
    %401 = cast(%var_3881, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %402 = reshape(%399, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
    %403 = reshape(%400, newshape=[640]) /* ty=Tensor[(640), float64] */;
    %404 = reshape(%401, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %405 = @func_3713(%402, %403, %404) /* ty=(Tensor[(4, 11, 2), float64], Tensor[(88), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(6, 13, 3), bool]) */;
    %406 = cast(%var_3881, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %407 = cast(%var_3881, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %408 = reshape(%406, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %409 = reshape(%407, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
    %410 = @func_529(%408, %409) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
    %411 = cast(%var_3907, dtype="bool") /* ty=bool */;
    %412 = cast(%var_3908, dtype="bool") /* ty=Tensor[(12, 60), bool] */;
    %413 = %397.1;
    %414 = cast(%413, dtype="float32") /* ty=Tensor[(60), float32] */;
    %415 = reshape(%411, newshape=[]) /* ty=bool */;
    %416 = reshape(%412, newshape=[1, 720]) /* ty=Tensor[(1, 720), bool] */;
    %417 = reshape(%414, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
    %418 = @func_3288(%415, %416, %417) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */;
    %419 = %405.8;
    %420 = %410.2;
    %421 = %418.10;
    (%398, %413, %var_3857, %419, %var_3880, %var_3881, %420, %421, %var_3907, %var_3908)
  };
  %422(%var_3911, %var_3912, %var_3913, %var_3914, %var_3915) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(180), int8], Tensor[(6, 13, 3), bool], Tensor[(1, 640), float64], Tensor[(1568), float64], Tensor[(60), float32], Tensor[(?, 10, 6), bool], bool, Tensor[(12, 60), bool]) */
}

def @func_7007(%var_7005: Tensor[(2, 1, 4), bool], %var_7006: Tensor[(2, 7, 4), bool]) -> Tensor[(2, 7, 4), bool] {
  %425 = fn (%var_6999: Tensor[(2, 1, 4), bool], %var_7000: Tensor[(2, 7, 4), bool]) -> Tensor[(2, 7, 4), bool] {
    %423 = cast(%var_6999, dtype="bool") /* ty=Tensor[(2, 1, 4), bool] */;
    %424 = cast(%var_7000, dtype="bool") /* ty=Tensor[(2, 7, 4), bool] */;
    logical_and(%423, %424) /* ty=Tensor[(2, 7, 4), bool] */
  };
  %425(%var_7005, %var_7006) /* ty=Tensor[(2, 7, 4), bool] */
}

def @func_1323(%var_1318: bool, %var_1319: Tensor[(6, 13, 15), bool], %var_1320: Tensor[(20), float64], %var_1321: Tensor[(720), bool], %var_1322: Tensor[(60), float32]) -> (Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) {
  %452 = fn (%var_1251: bool, %var_1252: Tensor[(6, 13, 15), bool], %var_1264: Tensor[(20), float64], %var_1268: Tensor[(720), bool], %var_1270: Tensor[(60), float32]) -> (Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) {
    %426 = cast(%var_1251, dtype="bool") /* ty=bool */;
    %427 = cast(%var_1252, dtype="bool") /* ty=Tensor[(6, 13, 15), bool] */;
    %428 = cast(%var_1264, dtype="float64") /* ty=Tensor[(20), float64] */;
    %429 = reshape(%428, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
    %430 = @func_1231(%429) /* ty=(Tensor[(5, 2, 2), float64],) */;
    %431 = cast(%var_1251, dtype="bool") /* ty=bool */;
    %432 = cast(%var_1268, dtype="bool") /* ty=Tensor[(720), bool] */;
    %433 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 6), bool] */, dtype="bool") /* ty=Tensor[(13, 6), bool] */;
    %434 = cast(%var_1270, dtype="float32") /* ty=Tensor[(60), float32] */;
    %435 = reshape(%431, newshape=[]) /* ty=bool */;
    %436 = reshape(%432, newshape=[9, 5, 16]) /* ty=Tensor[(9, 5, 16), bool] */;
    %437 = reshape(%433, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), bool] */;
    %438 = reshape(%434, newshape=[60]) /* ty=Tensor[(60), float32] */;
    %439 = @func_943(%435, %436, %437, %438) /* ty=(Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) */;
    %440 = cast(%var_1252, dtype="float32") /* ty=Tensor[(6, 13, 15), float32] */;
    %441 = log2(%440) /* ty=Tensor[(6, 13, 15), float32] */;
    %442 = cast(%441, dtype="uint16") /* ty=Tensor[(6, 13, 15), uint16] */;
    %443 = cast(%var_1251, dtype="uint16") /* ty=uint16 */;
    %444 = cast(%var_1264, dtype="float64") /* ty=Tensor[(20), float64] */;
    %445 = reshape(%444, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
    %446 = @func_1231(%445) /* ty=(Tensor[(5, 2, 2), float64],) */;
    %447 = logical_and(%426, %427) /* ty=Tensor[(6, 13, 15), bool] */;
    %448 = %430.0;
    %449 = %439.3;
    %450 = minimum(%442, %443) /* ty=Tensor[(6, 13, 15), uint16] */;
    %451 = %446.0;
    (%447, %448, %var_1264, %449, %var_1268, meta[relay.Constant][24] /* ty=Tensor[(13, 6), bool] */, %var_1270, %450, %451)
  };
  %452(%var_1318, %var_1319, %var_1320, %var_1321, %var_1322) /* ty=(Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) */
}

def @func_4373(%var_4356: Tensor[(13, 6, 12), int32], %var_4357: Tensor[(13, 6, 12), int32], %var_4369: Tensor[(288), int16]) -> (Tensor[(13, 6, 12), bool], Tensor[(6, 13, 3), uint8], Tensor[(288), int16]) {
  %453 = cast(%var_4357, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %454 = shape_of(%var_4356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_4356, dtype="bool") /* ty=Tensor[(13, 6, 12), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = cast(%var_4369, dtype="int16") /* ty=Tensor[(288), int16] */;
  %458 = reshape(%457, newshape=[288]) /* ty=Tensor[(288), int16] */;
  %459 = @func_4179(%458) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), uint8], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */;
  %460 = equal(%455, %456) /* ty=Tensor[(13, 6, 12), bool] */;
  %461 = %459.1;
  (%460, %461, %var_4369)
}

def @func_3766(%var_3765: Tensor[(4, 24), int32]) -> (Tensor[(6, 13, 3), float32], Tensor[(2, 8, 6), int32], Tensor[(4, 24), int32], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) {
  %477 = fn (%var_3743: Tensor[(4, 24), int32]) -> (Tensor[(6, 13, 3), float32], Tensor[(2, 8, 6), int32], Tensor[(4, 24), int32], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) {
    %462 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
    %463 = cast(%var_3743, dtype="int32") /* ty=Tensor[(4, 24), int32] */;
    %464 = reshape(%463, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
    %465 = @func_749(%464) /* ty=(Tensor[(2, 8, 6), int32],) */;
    %466 = cast(meta[relay.Constant][25] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
    %467 = cast(meta[relay.Constant][26] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %468 = reshape(%466, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
    %469 = reshape(%467, newshape=[88]) /* ty=Tensor[(88), bool] */;
    %470 = @func_721(%468, %469) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */;
    %471 = cast(meta[relay.Constant][27] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
    %472 = reshape(%471, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), int16] */;
    %473 = %462.1;
    %474 = %465.0;
    %475 = %470.0;
    %476 = @func_2221(%472) /* ty=Tensor[(12, 8, 3), int16] */;
    (%473, %474, %var_3743, %475, meta[relay.Constant][25] /* ty=Tensor[(693), float64] */, meta[relay.Constant][26] /* ty=Tensor[(88), bool] */, %476, meta[relay.Constant][27] /* ty=Tensor[(288), int16] */)
  };
  %477(%var_3765) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(2, 8, 6), int32], Tensor[(4, 24), int32], Tensor[(11, 9, 7), float64], Tensor[(693), float64], Tensor[(88), bool], Tensor[(12, 8, 3), int16], Tensor[(288), int16]) */
}

def @func_5352() -> Tensor[(6, 13, 3), float32] {
  @func_5350() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_532(%var_530: Tensor[(16, 7, 14), float64], %var_531: Tensor[(16, 7, 14), float64]) -> (Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) {
  %492 = fn (%var_508: Tensor[(16, 7, 14), float64], %var_509: Tensor[(16, 7, 14), float64]) -> (Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) {
    %478 = cast(%var_509, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
    %479 = shape_of(%var_508, dtype="int32") /* ty=Tensor[(3), int32] */;
    %480 = cast(%var_508, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
    %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %482 = maximum(%480, %481) /* ty=Tensor[(16, 7, 14), float64] */;
    %483 = cast(%482, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
    %484 = shape_of(%var_509, dtype="int32") /* ty=Tensor[(3), int32] */;
    %485 = cast(%var_509, dtype="bool") /* ty=Tensor[(16, 7, 14), bool] */;
    %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %487 = cast(meta[relay.Constant][28] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %488 = reshape(%487, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
    %489 = @func_286(%488) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
    %490 = greater_equal(%485, %486) /* ty=Tensor[(16, 7, 14), bool] */;
    %491 = %489.1;
    (%490, %491, meta[relay.Constant][28] /* ty=Tensor[(60), float32] */)
  };
  %492(%var_530, %var_531) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */
}

def @func_4893() -> (Tensor[(6, 13, 3), float64],) {
  @func_4891() /* ty=(Tensor[(6, 13, 3), float64],) */
}

def @func_4317(%var_4315: Tensor[(10, 7, 16), float64], %var_4316: Tensor[(88), bool]) -> (Tensor[(2, 8, 6), int32], Tensor[(96), float64], Tensor[(88), bool], Tensor[(693), float64], Tensor[(88), bool], Tensor[(6, 13, 3), float32], Tensor[(10, 7, 16), uint64]) {
  @func_4313(%var_4315, %var_4316) /* ty=(Tensor[(2, 8, 6), int32], Tensor[(96), float64], Tensor[(88), bool], Tensor[(693), float64], Tensor[(88), bool], Tensor[(6, 13, 3), float32], Tensor[(10, 7, 16), uint64]) */
}

def @func_5041() -> (Tensor[(6, 13, 3), int8], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float64]) {
  @func_5039() /* ty=(Tensor[(6, 13, 3), int8], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float64]) */
}

def @func_2695() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) {
  %493 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %494 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %495 = cast(meta[relay.Constant][29] /* ty=Tensor[(1568, 1), float64] */, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %496 = cast(meta[relay.Constant][29] /* ty=Tensor[(1568, 1), float64] */, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %497 = reshape(%495, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %498 = reshape(%496, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %499 = @func_529(%497, %498) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %500 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %501 = %500.0;
  %502 = cast(%501, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %503 = %493.0;
  %504 = %494.0;
  %505 = %499.2;
  %506 = tan(%502) /* ty=Tensor[(6, 13, 3), float32] */;
  (%503, %504, %505, meta[relay.Constant][29] /* ty=Tensor[(1568, 1), float64] */, %506)
}

def @func_1705(%var_1703: Tensor[(14, 16, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(5, 2, 2), float64], Tensor[(20), float64]) {
  @func_1702(%var_1703) /* ty=(Tensor[(14, 16, 2), float32], Tensor[(5, 2, 2), float64], Tensor[(20), float64]) */
}

def @func_5939(%var_5898: float64, %var_5899: Tensor[(11, 8, 2), float64]) -> (Tensor[(11, 8, 2), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32]) {
  %507 = cast(%var_5898, dtype="float64") /* ty=float64 */;
  %508 = cast(%var_5899, dtype="float64") /* ty=Tensor[(11, 8, 2), float64] */;
  %509 = @func_5855() /* ty=(Tensor[(6, 13, 3), float64],) */;
  %510 = @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %511 = power(%507, %508) /* ty=Tensor[(11, 8, 2), float64] */;
  %512 = %509.0;
  %513 = %510.0;
  (%511, %512, %513)
}

def @func_4639(%var_4620: Tensor[(7, 10, 10), float32], %var_4626: Tensor[(60), float32]) -> (Tensor[(7, 10, 10), float32], Tensor[(?, 10, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) {
  %514 = cast(%var_4620, dtype="float32") /* ty=Tensor[(7, 10, 10), float32] */;
  %515 = cast(%var_4626, dtype="float32") /* ty=Tensor[(60), float32] */;
  %516 = reshape(%515, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %517 = @func_3575(%516) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */;
  %518 = sqrt(%514) /* ty=Tensor[(7, 10, 10), float32] */;
  %519 = %517.1;
  %520 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%518, %519, %var_4626, %520)
}

def @func_7224(%var_7222: Tensor[(9, 10, 6), bool], %var_7223: Tensor[(234), float32]) -> (Tensor[(9, 10, 6), bool], Tensor[(6, 13, 3), bool], Tensor[(234), float32], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  @func_7220(%var_7222, %var_7223) /* ty=(Tensor[(9, 10, 6), bool], Tensor[(6, 13, 3), bool], Tensor[(234), float32], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_6610() -> Tensor[(6, 13, 3), float32] {
  %521 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %521.1
}

def @func_4961() -> (Tensor[(6, 13, 3), float32],) {
  %522 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %523 = %522.4;
  (%523,)
}

def @func_1702(%var_1685: Tensor[(14, 16, 2), float32]) -> (Tensor[(14, 16, 2), float32], Tensor[(5, 2, 2), float64], Tensor[(20), float64]) {
  %524 = cast(%var_1685, dtype="float32") /* ty=Tensor[(14, 16, 2), float32] */;
  %525 = cast(meta[relay.Constant][30] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %526 = reshape(%525, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %527 = @func_1231(%526) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %528 = cos(%524) /* ty=Tensor[(14, 16, 2), float32] */;
  %529 = %527.0;
  (%528, %529, meta[relay.Constant][30] /* ty=Tensor[(20), float64] */)
}

def @func_2561(%var_2504: Tensor[(10, 7, 13), float64], %var_2516: Tensor[(792), float64], %var_2525: bool, %var_2536: Tensor[(640), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) {
  %530 = cast(%var_2516, dtype="float64") /* ty=Tensor[(792), float64] */;
  %531 = cast(%var_2516, dtype="float64") /* ty=Tensor[(792), float64] */;
  %532 = reshape(%530, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %533 = reshape(%531, newshape=[12, 11, 6]) /* ty=Tensor[(12, 11, 6), float64] */;
  %534 = @func_2096(%532, %533) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(12, 11, 6), float64]) */;
  %535 = cast(%var_2525, dtype="bool") /* ty=bool */;
  %536 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 60), bool] */, dtype="bool") /* ty=Tensor[(12, 60), bool] */;
  %537 = cast(meta[relay.Constant][32] /* ty=Tensor[(78), bool] */, dtype="bool") /* ty=Tensor[(78), bool] */;
  %538 = cast(meta[relay.Constant][33] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %539 = reshape(%535, newshape=[]) /* ty=bool */;
  %540 = reshape(%536, newshape=[9, 5, 16]) /* ty=Tensor[(9, 5, 16), bool] */;
  %541 = reshape(%537, newshape=[3, 2, 13]) /* ty=Tensor[(3, 2, 13), bool] */;
  %542 = reshape(%538, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %543 = @func_943(%539, %540, %541, %542) /* ty=(Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(9, 5, 16), bool], Tensor[(3, 2, 13), bool], Tensor[(60), float32], Tensor[(?, 10, 6), float32]) */;
  %544 = cast(%var_2536, dtype="float64") /* ty=Tensor[(640), float64] */;
  %545 = reshape(%544, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %546 = cast(%var_2504, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %547 = log2(%546) /* ty=Tensor[(10, 7, 13), float64] */;
  %548 = cast(%547, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %549 = rsqrt(%548) /* ty=Tensor[(10, 7, 13), float64] */;
  %550 = cast(%549, dtype="float64") /* ty=Tensor[(10, 7, 13), float64] */;
  %551 = @func_1638(%545) /* ty=Tensor[(8, 16, 5), float64] */;
  %552 = cast(%551, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %553 = reshape(%552, newshape=[8, 16, 5]) /* ty=Tensor[(8, 16, 5), float64] */;
  %554 = cast(meta[relay.Constant][33] /* ty=Tensor[(60, 1), float32] */, dtype="float32") /* ty=Tensor[(60, 1), float32] */;
  %555 = reshape(%554, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
  %556 = @func_286(%555) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
  %557 = %534.0;
  %558 = %543.0;
  %559 = sinh(%550) /* ty=Tensor[(10, 7, 13), float64] */;
  %560 = @func_1638(%553) /* ty=Tensor[(8, 16, 5), float64] */;
  %561 = %556.3;
  (%557, %var_2516, %558, %var_2525, meta[relay.Constant][31] /* ty=Tensor[(12, 60), bool] */, meta[relay.Constant][32] /* ty=Tensor[(78), bool] */, meta[relay.Constant][33] /* ty=Tensor[(60, 1), float32] */, %551, %var_2536, %559, %560, %561)
}

def @func_725(%var_723: Tensor[(11, 9, 7), float64], %var_724: Tensor[(88), bool]) -> (Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) {
  @func_721(%var_723, %var_724) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */
}

def @func_5855() -> (Tensor[(6, 13, 3), float64],) {
  %562 = @func_5039() /* ty=(Tensor[(6, 13, 3), int8], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float64]) */;
  %563 = %562.2;
  (%563,)
}

def @func_6388(%var_6386: Tensor[(8, 3, 11), float64]) -> (Tensor[(6, 13, 3), float32], Tensor[(8, 3, 11), int32], Tensor[(2, 396), float64]) {
  @func_6385(%var_6386) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(8, 3, 11), int32], Tensor[(2, 396), float64]) */
}

def @func_6612() -> Tensor[(6, 13, 3), float32] {
  @func_6610() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5451(%var_5399: Tensor[(6, 13, 3), float32], %var_5409: Tensor[(1568), float64], %var_5414: bool, %var_5415: Tensor[(320, 2), float64]) -> (Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(910), float64], Tensor[(792), float64], bool, Tensor[(320, 2), float64], bool, Tensor[(20), float64], Tensor[(720), bool], Tensor[(30, 2), float32], Tensor[(1, 60), float32], Tensor[(6, 13, 3), float32]) {
  %564 = @func_3012() /* ty=Tensor[(6, 13, 3), float32] */;
  %565 = cast(%var_5399, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %569 = cast(%var_5409, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %570 = power(%567, %568) /* ty=Tensor[(6, 13, 3), float64] */;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %572 = reshape(%569, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %573 = reshape(%571, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float64] */;
  %574 = @func_3536(%572, %573) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(16, 7, 14), bool], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64]) */;
  %575 = cast(meta[relay.Constant][34] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %576 = cast(meta[relay.Constant][35] /* ty=Tensor[(792), float64] */, dtype="float64") /* ty=Tensor[(792), float64] */;
  %577 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %578 = cast(%var_5415, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %579 = reshape(%575, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %580 = reshape(%576, newshape=[792]) /* ty=Tensor[(792), float64] */;
  %581 = reshape(%577, newshape=[]) /* ty=bool */;
  %582 = reshape(%578, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %583 = @func_2561(%579, %580, %581, %582) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) */;
  %584 = cast(meta[relay.Constant][34] /* ty=Tensor[(910), float64] */, dtype="float64") /* ty=Tensor[(910), float64] */;
  %585 = cast(meta[relay.Constant][35] /* ty=Tensor[(792), float64] */, dtype="float64") /* ty=Tensor[(792), float64] */;
  %586 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %587 = cast(%var_5415, dtype="float64") /* ty=Tensor[(320, 2), float64] */;
  %588 = reshape(%584, newshape=[10, 7, 13]) /* ty=Tensor[(10, 7, 13), float64] */;
  %589 = reshape(%585, newshape=[792]) /* ty=Tensor[(792), float64] */;
  %590 = reshape(%586, newshape=[]) /* ty=bool */;
  %591 = reshape(%587, newshape=[640]) /* ty=Tensor[(640), float64] */;
  %592 = @func_2561(%588, %589, %590, %591) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) */;
  %593 = cast(%var_5414, dtype="bool") /* ty=bool */;
  %594 = cast(meta[relay.Constant][36] /* ty=Tensor[(720), bool] */, dtype="bool") /* ty=Tensor[(720), bool] */;
  %595 = cast(meta[relay.Constant][37] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %596 = reshape(%593, newshape=[]) /* ty=bool */;
  %597 = reshape(%594, newshape=[1, 720]) /* ty=Tensor[(1, 720), bool] */;
  %598 = reshape(%595, newshape=[15, 4]) /* ty=Tensor[(15, 4), float32] */;
  %599 = @func_3288(%596, %597, %598) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) */;
  %600 = cast(meta[relay.Constant][37] /* ty=Tensor[(30, 2), float32] */, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %601 = reshape(%600, newshape=[1, 60]) /* ty=Tensor[(1, 60), float32] */;
  %602 = @func_3575(%601) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */;
  %603 = %574.4;
  %604 = %583.2;
  %605 = %592.3;
  %606 = %599.7;
  %607 = %602.2;
  %608 = @func_4712() /* ty=Tensor[(6, 13, 3), float32] */;
  (%570, %603, %var_5409, %604, meta[relay.Constant][34] /* ty=Tensor[(910), float64] */, meta[relay.Constant][35] /* ty=Tensor[(792), float64] */, %var_5414, %var_5415, %605, %606, meta[relay.Constant][36] /* ty=Tensor[(720), bool] */, meta[relay.Constant][37] /* ty=Tensor[(30, 2), float32] */, %607, %608)
}

def @func_721(%var_713: Tensor[(11, 9, 7), float64], %var_718: Tensor[(88), bool]) -> (Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) {
  %609 = cast(%var_713, dtype="float64") /* ty=Tensor[(11, 9, 7), float64] */;
  %610 = cast(%var_718, dtype="bool") /* ty=Tensor[(88), bool] */;
  %611 = cast(%var_718, dtype="bool") /* ty=Tensor[(88), bool] */;
  %612 = cast(%var_718, dtype="bool") /* ty=Tensor[(88), bool] */;
  %613 = cast(meta[relay.Constant][38] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %614 = reshape(%610, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %615 = reshape(%611, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %616 = reshape(%612, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %617 = reshape(%613, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %618 = @func_624(%614, %615, %616, %617) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %619 = rsqrt(%609) /* ty=Tensor[(11, 9, 7), float64] */;
  %620 = %618.3;
  (%619, %620, %var_718, meta[relay.Constant][38] /* ty=Tensor[(1568), float64] */)
}

def @func_1876(%var_1828: Tensor[(9, 2, 10), int8], %var_1829: Tensor[(9, 2, 10), int8]) -> (Tensor[(9, 2, 10), bool], Tensor[(60), float32], Tensor[(88), bool], Tensor[(1568), float64]) {
  %621 = cast(%var_1829, dtype="bool") /* ty=Tensor[(9, 2, 10), bool] */;
  %622 = shape_of(%var_1828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%var_1828, dtype="bool") /* ty=Tensor[(9, 2, 10), bool] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %625 = cast(meta[relay.Constant][39] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %626 = cast(meta[relay.Constant][39] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %627 = cast(meta[relay.Constant][39] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %628 = cast(meta[relay.Constant][40] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %629 = reshape(%625, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %630 = reshape(%626, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %631 = reshape(%627, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %632 = reshape(%628, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %633 = @func_624(%629, %630, %631, %632) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %634 = equal(%623, %624) /* ty=Tensor[(9, 2, 10), bool] */;
  %635 = %633.6;
  (%634, %635, meta[relay.Constant][39] /* ty=Tensor[(88), bool] */, meta[relay.Constant][40] /* ty=Tensor[(1568), float64] */)
}

def @func_2812(%var_2810: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), int32] {
  @func_2809(%var_2810) /* ty=Tensor[(6, 13, 3), int32] */
}

def @func_6650() -> Tensor[(3, 9, 13), float32] {
  %637 = fn () -> Tensor[(3, 9, 13), float32] {
    %636 = cast(meta[relay.Constant][41] /* ty=Tensor[(3, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(3, 9, 13), float32] */;
    log(%636) /* ty=Tensor[(3, 9, 13), float32] */
  };
  %637() /* ty=Tensor[(3, 9, 13), float32] */
}

def @func_4547(%var_4543: Tensor[(693), float64], %var_4544: Tensor[(88), bool], %var_4545: Tensor[(1568), float64], %var_4546: Tensor[(360, 4), int8]) -> (Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) {
  %667 = fn (%var_4493: Tensor[(693), float64], %var_4494: Tensor[(88), bool], %var_4501: Tensor[(1568), float64], %var_4515: Tensor[(360, 4), int8]) -> (Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) {
    %638 = cast(%var_4493, dtype="float64") /* ty=Tensor[(693), float64] */;
    %639 = cast(%var_4494, dtype="bool") /* ty=Tensor[(88), bool] */;
    %640 = reshape(%638, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
    %641 = reshape(%639, newshape=[88]) /* ty=Tensor[(88), bool] */;
    %642 = @func_721(%640, %641) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */;
    %643 = %642.1;
    %644 = cast(%var_4501, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(1), int32] */;
    %646 = cast(%643, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?), float64] */;
    %648 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %649 = %648.0;
    %650 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
    %651 = %650.0;
    %652 = cast(%651, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
    %653 = shape_of(%649, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(%649, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %656 = cast(%var_4515, dtype="int8") /* ty=Tensor[(360, 4), int8] */;
    %657 = cast(%var_4515, dtype="int8") /* ty=Tensor[(360, 4), int8] */;
    %658 = reshape(%656, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
    %659 = reshape(%657, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
    %660 = greater_equal(%654, %655) /* ty=Tensor[(6, 13, 3), bool] */;
    %661 = cast(%660, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
    %662 = reshape(%661, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
    %663 = @func_2967(%662) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) */;
    %664 = maximum(%646, %647) /* ty=Tensor[(1568), float64] */;
    %665 = @func_4334(%658, %659) /* ty=Tensor[(9, 10, 16), int8] */;
    %666 = %663.2;
    (%var_4493, %var_4494, %664, %660, %665, %var_4515, %666)
  };
  %667(%var_4543, %var_4544, %var_4545, %var_4546) /* ty=(Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) */
}

def @func_4713() -> Tensor[(6, 13, 3), float32] {
  %669 = fn () -> Tensor[(6, 13, 3), float32] {
    %668 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
    %668.1
  };
  %669() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5796(%var_5795: Tensor[(5, 10, 13), float32]) -> Tensor[(5, 10, 13), float32] {
  %671 = fn (%var_5789: Tensor[(5, 10, 13), float32]) -> Tensor[(5, 10, 13), float32] {
    %670 = cast(%var_5789, dtype="float32") /* ty=Tensor[(5, 10, 13), float32] */;
    sqrt(%670) /* ty=Tensor[(5, 10, 13), float32] */
  };
  %671(%var_5795) /* ty=Tensor[(5, 10, 13), float32] */
}

def @func_3536(%var_3497: Tensor[(1568), float64], %var_3523: Tensor[(6, 13, 3), float64]) -> (Tensor[(?, 10, 6), bool], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(16, 7, 14), bool], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float64]) {
  %672 = cast(meta[relay.Constant][42] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %673 = cast(meta[relay.Constant][42] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %674 = cast(meta[relay.Constant][42] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
  %675 = cast(%var_3497, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %676 = reshape(%672, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %677 = reshape(%673, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %678 = reshape(%674, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
  %679 = reshape(%675, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %680 = @func_624(%676, %677, %678, %679) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
  %681 = cast(%var_3497, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %682 = cast(%var_3497, dtype="float64") /* ty=Tensor[(1568), float64] */;
  %683 = reshape(%681, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %684 = reshape(%682, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %685 = @func_529(%683, %684) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %686 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %687 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %688 = %687.0;
  %689 = cast(%688, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %690 = erf(%689) /* ty=Tensor[(6, 13, 3), float64] */;
  %691 = cast(%var_3523, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %695 = %680.4;
  %696 = %685.0;
  %697 = %686.4;
  %698 = mod(%693, %694) /* ty=Tensor[(6, 13, 3), float64] */;
  (%695, meta[relay.Constant][42] /* ty=Tensor[(88), bool] */, %var_3497, %696, %697, %698)
}

def @func_3939() -> (Tensor[(6, 13, 3), float32],) {
  %699 = @func_2841() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %700 = %699.0;
  (%700,)
}

def @func_3970() -> (Tensor[(6, 13, 3), float32],) {
  @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_6031() -> Tensor[(6, 13, 3), float32] {
  @func_6029() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_5857() -> (Tensor[(6, 13, 3), float64],) {
  @func_5855() /* ty=(Tensor[(6, 13, 3), float64],) */
}

def @func_1060(%var_1059: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64],) {
  %706 = fn (%var_1051: Tensor[(8, 3, 11), float64]) -> (Tensor[(8, 3, 11), float64],) {
    %701 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
    %702 = shape_of(%var_1051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %703 = cast(%var_1051, dtype="float64") /* ty=Tensor[(8, 3, 11), float64] */;
    %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %705 = floor_divide(%703, %704) /* ty=Tensor[(8, 3, 11), float64] */;
    (%705,)
  };
  %706(%var_1059) /* ty=(Tensor[(8, 3, 11), float64],) */
}

def @func_3941() -> (Tensor[(6, 13, 3), float32],) {
  @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_4744(%var_4742: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), bool] {
  @func_4741(%var_4742) /* ty=Tensor[(6, 13, 3), bool] */
}

def @func_3469() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %707 = @func_2634() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %708 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %709 = %707.0;
  %710 = %708.1;
  (%709, %710)
}

def @func_3718(%var_3715: Tensor[(6, 13, 3), float32], %var_3716: Tensor[(640), float64], %var_3717: Tensor[(1568), float64]) -> (Tensor[(4, 11, 2), float64], Tensor[(88), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(6, 13, 3), bool]) {
  @func_3713(%var_3715, %var_3716, %var_3717) /* ty=(Tensor[(4, 11, 2), float64], Tensor[(88), bool], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(6, 13, 3), bool]) */
}

def @func_5039() -> (Tensor[(6, 13, 3), int8], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float64]) {
  %711 = @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %712 = %711.0;
  %713 = @func_2873() /* ty=Tensor[(6, 13, 3), float32] */;
  %714 = cast(%713, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
  %715 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %716 = cast(%712, dtype="int8") /* ty=Tensor[(6, 13, 3), int8] */;
  %717 = dyn.reshape(%714, %715, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %718 = cast(%713, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %719 = cast(%712, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %720 = left_shift(%716, %717) /* ty=Tensor[(6, 13, 3), int8] */;
  %721 = sqrt(%718) /* ty=Tensor[(6, 13, 3), float64] */;
  %722 = atanh(%719) /* ty=Tensor[(6, 13, 3), float64] */;
  (%720, %721, %722)
}

def @func_5457(%var_5453: Tensor[(6, 13, 3), float32], %var_5454: Tensor[(1568), float64], %var_5455: bool, %var_5456: Tensor[(320, 2), float64]) -> (Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(910), float64], Tensor[(792), float64], bool, Tensor[(320, 2), float64], bool, Tensor[(20), float64], Tensor[(720), bool], Tensor[(30, 2), float32], Tensor[(1, 60), float32], Tensor[(6, 13, 3), float32]) {
  @func_5451(%var_5453, %var_5454, %var_5455, %var_5456) /* ty=(Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32], Tensor[(1568), float64], Tensor[(1568), float64], Tensor[(910), float64], Tensor[(792), float64], bool, Tensor[(320, 2), float64], bool, Tensor[(20), float64], Tensor[(720), bool], Tensor[(30, 2), float32], Tensor[(1, 60), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_1638(%var_1633: Tensor[(8, 16, 5), float64]) -> Tensor[(8, 16, 5), float64] {
  %723 = cast(meta[relay.Constant][44] /* ty=Tensor[(8, 16, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %724 = shape_of(%var_1633, dtype="int32") /* ty=Tensor[(3), int32] */;
  %725 = cast(%var_1633, dtype="float64") /* ty=Tensor[(8, 16, 5), float64] */;
  %726 = dyn.reshape(%723, %724, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_divide(%725, %726) /* ty=Tensor[(8, 16, 5), float64] */
}

def @func_6244() -> Tensor[(6, 13, 3), float32] {
  @func_6242() /* ty=Tensor[(6, 13, 3), float32] */
}

def @main() -> (Tensor[(60), float32], Tensor[(60), float32]) {
  %727 = @func_2697() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %728 = %727.2;
  %729 = cast(meta[relay.Constant][45] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %730 = shape_of(%728, dtype="int32") /* ty=Tensor[(1), int32] */;
  %731 = cast(%728, dtype="float32") /* ty=Tensor[(60), float32] */;
  %732 = dyn.reshape(%729, %730, newshape=[]) /* ty=Tensor[(?), float32] */;
  %733 = cast(%728, dtype="float32") /* ty=Tensor[(60), float32] */;
  %734 = mod(%731, %732) /* ty=Tensor[(60), float32] */;
  %735 = atanh(%733) /* ty=Tensor[(60), float32] */;
  (%734, %735)
}

def @func_3288(%var_3241: bool, %var_3244: Tensor[(1, 720), bool], %var_3245: Tensor[(15, 4), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(12, 8, 3), int16], Tensor[(288), int16], Tensor[(16, 7, 14), bool], Tensor[(20), float64], bool, Tensor[(1170), bool], Tensor[(20), float64], Tensor[(1, 720), bool], Tensor[(15, 4), float32], Tensor[(?, 10, 6), bool], Tensor[(1568, 1), float32]) {
  %736 = @func_2841() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %737 = cast(meta[relay.Constant][46] /* ty=Tensor[(288), int16] */, dtype="int16") /* ty=Tensor[(288), int16] */;
  %738 = reshape(%737, newshape=[12, 8, 3]) /* ty=Tensor[(12, 8, 3), int16] */;
  %739 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %740 = %739.3;
  %741 = cast(%740, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %742 = cast(%740, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %743 = reshape(%741, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %744 = reshape(%742, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %745 = @func_529(%743, %744) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %746 = cast(%var_3241, dtype="bool") /* ty=bool */;
  %747 = cast(meta[relay.Constant][47] /* ty=Tensor[(1170), bool] */, dtype="bool") /* ty=Tensor[(1170), bool] */;
  %748 = cast(meta[relay.Constant][48] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %749 = cast(%var_3244, dtype="bool") /* ty=Tensor[(1, 720), bool] */;
  %750 = cast(%var_3245, dtype="float32") /* ty=Tensor[(15, 4), float32] */;
  %751 = reshape(%746, newshape=[]) /* ty=bool */;
  %752 = reshape(%747, newshape=[6, 13, 15]) /* ty=Tensor[(6, 13, 15), bool] */;
  %753 = reshape(%748, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %754 = reshape(%749, newshape=[720]) /* ty=Tensor[(720), bool] */;
  %755 = reshape(%750, newshape=[60]) /* ty=Tensor[(60), float32] */;
  %756 = @func_1317(%751, %752, %753, %754, %755) /* ty=(Tensor[(6, 13, 15), bool], Tensor[(5, 2, 2), float64], Tensor[(20), float64], Tensor[(9, 5, 16), bool], Tensor[(720), bool], Tensor[(13, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 15), uint16], Tensor[(5, 2, 2), float64]) */;
  %757 = %745.0;
  %758 = cast(%757, dtype="float64") /* ty=Tensor[(16, 7, 14), float64] */;
  %759 = cast(%740, dtype="float64") /* ty=Tensor[(1568, 1), float64] */;
  %760 = reshape(%758, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %761 = reshape(%759, newshape=[16, 7, 14]) /* ty=Tensor[(16, 7, 14), float64] */;
  %762 = @func_529(%760, %761) /* ty=(Tensor[(16, 7, 14), bool], Tensor[(?, 10, 6), bool], Tensor[(60), float32]) */;
  %763 = cast(%740, dtype="float32") /* ty=Tensor[(1568, 1), float32] */;
  %764 = %736.0;
  %765 = @func_2221(%738) /* ty=Tensor[(12, 8, 3), int16] */;
  %766 = %756.2;
  %767 = %762.1;
  %768 = atan(%763) /* ty=Tensor[(1568, 1), float32] */;
  (%764, %765, meta[relay.Constant][46] /* ty=Tensor[(288), int16] */, %757, %766, %var_3241, meta[relay.Constant][47] /* ty=Tensor[(1170), bool] */, meta[relay.Constant][48] /* ty=Tensor[(20), float64] */, %var_3244, %var_3245, %767, %768)
}

def @func_4891() -> (Tensor[(6, 13, 3), float64],) {
  %769 = @func_3012() /* ty=Tensor[(6, 13, 3), float32] */;
  %770 = cast(%769, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %771 = asin(%770) /* ty=Tensor[(6, 13, 3), float64] */;
  (%771,)
}

def @func_4338(%var_4336: Tensor[(9, 10, 16), int8], %var_4337: Tensor[(9, 10, 16), int8]) -> Tensor[(9, 10, 16), int8] {
  @func_4334(%var_4336, %var_4337) /* ty=Tensor[(9, 10, 16), int8] */
}

def @func_6242() -> Tensor[(6, 13, 3), float32] {
  %772 = @func_3469() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %772.1
}

def @func_6456(%var_6445: float64) -> (Tensor[(6, 13, 3), float32], Tensor[(11, 8, 2), float64], float64, Tensor[(44, 4), float64], Tensor[(5, 2, 2), float64], Tensor[(10, 2), float64]) {
  %773 = cast(%var_6445, dtype="float64") /* ty=float64 */;
  %774 = cast(meta[relay.Constant][49] /* ty=Tensor[(44, 4), float64] */, dtype="float64") /* ty=Tensor[(44, 4), float64] */;
  %775 = reshape(%773, newshape=[]) /* ty=float64 */;
  %776 = reshape(%774, newshape=[11, 8, 2]) /* ty=Tensor[(11, 8, 2), float64] */;
  %777 = @func_5939(%775, %776) /* ty=(Tensor[(11, 8, 2), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), float32]) */;
  %778 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
  %779 = reshape(%778, newshape=[5, 2, 2]) /* ty=Tensor[(5, 2, 2), float64] */;
  %780 = @func_1231(%779) /* ty=(Tensor[(5, 2, 2), float64],) */;
  %781 = @func_6131() /* ty=Tensor[(6, 13, 3), float32] */;
  %782 = %777.0;
  %783 = %780.0;
  (%781, %782, %var_6445, meta[relay.Constant][49] /* ty=Tensor[(44, 4), float64] */, %783, meta[relay.Constant][50] /* ty=Tensor[(10, 2), float64] */)
}

def @func_5567() -> Tensor[(6, 13, 3), float32] {
  @func_5565() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_4698(%var_4687: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), bool], Tensor[(6, 13, 3), float64]) {
  %784 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %785 = %784.0;
  %786 = cast(%var_4687, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %787 = shape_of(%785, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%785, dtype="bool") /* ty=Tensor[(6, 13, 3), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %790 = cast(%785, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %791 = sigmoid(%790) /* ty=Tensor[(6, 13, 3), float64] */;
  %792 = cast(%791, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %793 = less(%788, %789) /* ty=Tensor[(6, 13, 3), bool] */;
  %794 = atan(%792) /* ty=Tensor[(6, 13, 3), float64] */;
  (%793, %794)
}

def @func_2842() -> (Tensor[(6, 13, 3), float32],) {
  %797 = fn () -> (Tensor[(6, 13, 3), float32],) {
    %795 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
    %796 = %795.0;
    (%796,)
  };
  %797() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_2567(%var_2563: Tensor[(10, 7, 13), float64], %var_2564: Tensor[(792), float64], %var_2565: bool, %var_2566: Tensor[(640), float64]) -> (Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) {
  @func_2561(%var_2563, %var_2564, %var_2565, %var_2566) /* ty=(Tensor[(8, 3, 11), float64], Tensor[(792), float64], Tensor[(1568), float64], bool, Tensor[(12, 60), bool], Tensor[(78), bool], Tensor[(60, 1), float32], Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(10, 7, 13), float64], Tensor[(8, 16, 5), float64], Tensor[(1, 10, 6), float32]) */
}

def @func_5601(%var_5598: Tensor[(5, 7, 16), float32], %var_5599: Tensor[(5, 7, 16), float32], %var_5600: Tensor[(234), float32]) -> (Tensor[(5, 7, 16), int64], Tensor[(6, 13, 3), int8], Tensor[(234), float32]) {
  %809 = fn (%var_5584: Tensor[(5, 7, 16), float32], %var_5588: Tensor[(5, 7, 16), float32], %var_5594: Tensor[(234), float32]) -> (Tensor[(5, 7, 16), int64], Tensor[(6, 13, 3), int8], Tensor[(234), float32]) {
    %798 = cast(%var_5584, dtype="float32") /* ty=Tensor[(5, 7, 16), float32] */;
    %799 = atanh(%798) /* ty=Tensor[(5, 7, 16), float32] */;
    %800 = cast(%var_5588, dtype="int64") /* ty=Tensor[(5, 7, 16), int64] */;
    %801 = shape_of(%799, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%799, dtype="int64") /* ty=Tensor[(5, 7, 16), int64] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %804 = cast(%var_5594, dtype="float32") /* ty=Tensor[(234), float32] */;
    %805 = reshape(%804, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
    %806 = @func_2967(%805) /* ty=(Tensor[(8, 16, 5), float64], Tensor[(640), float64], Tensor[(6, 13, 3), float64], Tensor[(6, 13, 3), int8]) */;
    %807 = maximum(%802, %803) /* ty=Tensor[(5, 7, 16), int64] */;
    %808 = %806.3;
    (%807, %808, %var_5594)
  };
  %809(%var_5598, %var_5599, %var_5600) /* ty=(Tensor[(5, 7, 16), int64], Tensor[(6, 13, 3), int8], Tensor[(234), float32]) */
}

def @func_5565() -> Tensor[(6, 13, 3), float32] {
  @func_2981() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_6564() -> Tensor[(6, 13, 3), float32] {
  %811 = fn () -> Tensor[(6, 13, 3), float32] {
    %810 = @func_5129() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %810.0
  };
  %811() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_3013() -> Tensor[(6, 13, 3), float32] {
  %812 = fn () -> Tensor[(6, 13, 3), float32] {
    @func_2873() /* ty=Tensor[(6, 13, 3), float32] */
  };
  %812() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_6029() -> Tensor[(6, 13, 3), float32] {
  @func_5508() /* ty=Tensor[(6, 13, 3), float32] */
}

def @func_3323() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %817 = fn () -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
    %813 = @func_3137() /* ty=(Tensor[(6, 13, 3), float32],) */;
    %814 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
    %815 = %813.0;
    %816 = %814.1;
    (%815, %816)
  };
  %817() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_3377(%var_3363: Tensor[(6, 13, 3), float32]) -> (Tensor[(6, 13, 3), uint8], Tensor[(6, 13, 3), float32]) {
  %818 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  %819 = cast(%818, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  %820 = rsqrt(%819) /* ty=Tensor[(6, 13, 3), float32] */;
  %821 = cast(%var_3363, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %822 = shape_of(%820, dtype="int32") /* ty=Tensor[(3), int32] */;
  %823 = cast(%820, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %824 = dyn.reshape(%821, %822, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %825 = right_shift(%823, %824) /* ty=Tensor[(6, 13, 3), uint8] */;
  %826 = @func_2981() /* ty=Tensor[(6, 13, 3), float32] */;
  (%825, %826)
}

def @func_3577(%var_3576: Tensor[(1, 60), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) {
  %833 = fn (%var_3571: Tensor[(1, 60), float32]) -> (Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) {
    %827 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
    %828 = cast(%var_3571, dtype="float32") /* ty=Tensor[(1, 60), float32] */;
    %829 = reshape(%828, newshape=[1, 10, 6]) /* ty=Tensor[(1, 10, 6), float32] */;
    %830 = @func_286(%829) /* ty=(Tensor[(?, 10, 6), bool], Tensor[(?, 10, 6), bool], Tensor[(1, 10, 6), float64], Tensor[(1, 10, 6), float32]) */;
    %831 = %827.1;
    %832 = %830.0;
    (%831, %832, %var_3571)
  };
  %833(%var_3576) /* ty=(Tensor[(6, 13, 3), float32], Tensor[(?, 10, 6), bool], Tensor[(1, 60), float32]) */
}

def @func_6131() -> Tensor[(6, 13, 3), float32] {
  %834 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %834.0
}

def @func_6278(%var_6276: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), float64] {
  @func_6275(%var_6276) /* ty=Tensor[(6, 13, 3), float64] */
}

def @func_6777() -> (Tensor[(6, 13, 3), float32], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(4, 11, 2), float64]) {
  %850 = fn () -> (Tensor[(6, 13, 3), float32], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(4, 11, 2), float64]) {
    %835 = cast(meta[relay.Constant][51] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %836 = cast(meta[relay.Constant][51] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %837 = cast(meta[relay.Constant][51] /* ty=Tensor[(88), bool] */, dtype="bool") /* ty=Tensor[(88), bool] */;
    %838 = cast(meta[relay.Constant][52] /* ty=Tensor[(1568), float64] */, dtype="float64") /* ty=Tensor[(1568), float64] */;
    %839 = reshape(%835, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
    %840 = reshape(%836, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
    %841 = reshape(%837, newshape=[4, 11, 2]) /* ty=Tensor[(4, 11, 2), bool] */;
    %842 = reshape(%838, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
    %843 = @func_624(%839, %840, %841, %842) /* ty=(Tensor[(4, 11, 2), bool], Tensor[(4, 11, 2), float64], Tensor[(16, 7, 14), bool], Tensor[(1568), float64], Tensor[(?, 10, 6), bool], Tensor[(4, 11, 2), float64], Tensor[(60), float32]) */;
    %844 = %843.5;
    %845 = cast(%844, dtype="float32") /* ty=Tensor[(4, 11, 2), float32] */;
    %846 = log2(%845) /* ty=Tensor[(4, 11, 2), float32] */;
    %847 = cast(%846, dtype="float64") /* ty=Tensor[(4, 11, 2), float64] */;
    %848 = @func_6563() /* ty=Tensor[(6, 13, 3), float32] */;
    %849 = atanh(%847) /* ty=Tensor[(4, 11, 2), float64] */;
    (%848, meta[relay.Constant][51] /* ty=Tensor[(88), bool] */, meta[relay.Constant][52] /* ty=Tensor[(1568), float64] */, %849)
  };
  %850() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(4, 11, 2), float64]) */
}

def @func_3471() -> (Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  @func_3469() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_752(%var_750: Tensor[(2, 8, 6), int32]) -> (Tensor[(2, 8, 6), int32],) {
  @func_749(%var_750) /* ty=(Tensor[(2, 8, 6), int32],) */
}

def @func_5078(%var_5077: Tensor[(16, 3, 5), float32]) -> Tensor[(16, 3, 5), float32] {
  %852 = fn (%var_5064: Tensor[(16, 3, 5), float32]) -> Tensor[(16, 3, 5), float32] {
    %851 = cast(%var_5064, dtype="float32") /* ty=Tensor[(16, 3, 5), float32] */;
    log2(%851) /* ty=Tensor[(16, 3, 5), float32] */
  };
  %852(%var_5077) /* ty=Tensor[(16, 3, 5), float32] */
}

def @func_7220(%var_7194: Tensor[(9, 10, 6), bool], %var_7204: Tensor[(234), float32]) -> (Tensor[(9, 10, 6), bool], Tensor[(6, 13, 3), bool], Tensor[(234), float32], Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) {
  %853 = @func_5970() /* ty=Tensor[(?, 10, 6), bool] */;
  %854 = cast(%853, dtype="bool") /* ty=Tensor[(?, 10, 6), bool] */;
  %855 = cast(%var_7194, dtype="bool") /* ty=Tensor[(9, 10, 6), bool] */;
  %856 = cast(%var_7204, dtype="float32") /* ty=Tensor[(234), float32] */;
  %857 = reshape(%856, newshape=[6, 13, 3]) /* ty=Tensor[(6, 13, 3), float32] */;
  %858 = @func_6675() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %859 = logical_or(%854, %855) /* ty=Tensor[(9, 10, 6), bool] */;
  %860 = @func_4741(%857) /* ty=Tensor[(6, 13, 3), bool] */;
  %861 = @func_6131() /* ty=Tensor[(6, 13, 3), float32] */;
  %862 = %858.1;
  (%859, %860, %var_7204, %861, %862)
}

def @func_2635() -> (Tensor[(6, 13, 3), float32],) {
  %865 = fn () -> (Tensor[(6, 13, 3), float32],) {
    %863 = cast(meta[relay.Constant][53] /* ty=Tensor[(6, 13, 3), float32] */, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
    %864 = log10(%863) /* ty=Tensor[(6, 13, 3), float32] */;
    (%864,)
  };
  %865() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_6546() -> (Tensor[(6, 13, 3), float32],) {
  @func_6544() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_4963() -> (Tensor[(6, 13, 3), float32],) {
  @func_4961() /* ty=(Tensor[(6, 13, 3), float32],) */
}

def @func_5164(%var_5157: Tensor[(693), float64], %var_5158: Tensor[(88, 1), bool], %var_5160: Tensor[(180, 8), int8]) -> (Tensor[(6, 13, 3), uint8], Tensor[(1568), float64], Tensor[(693), float64], Tensor[(88, 1), bool], Tensor[(784, 2), float64], Tensor[(180, 8), int8], Tensor[(6, 13, 3), float32]) {
  %866 = @func_3469() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %867 = %866.0;
  %868 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 13, 3), float32] */, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %869 = shape_of(%867, dtype="int32") /* ty=Tensor[(3), int32] */;
  %870 = cast(%867, dtype="uint8") /* ty=Tensor[(6, 13, 3), uint8] */;
  %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %872 = cast(%var_5157, dtype="float64") /* ty=Tensor[(693), float64] */;
  %873 = cast(%var_5158, dtype="bool") /* ty=Tensor[(88, 1), bool] */;
  %874 = cast(meta[relay.Constant][55] /* ty=Tensor[(784, 2), float64] */, dtype="float64") /* ty=Tensor[(784, 2), float64] */;
  %875 = cast(%var_5160, dtype="int8") /* ty=Tensor[(180, 8), int8] */;
  %876 = reshape(%872, newshape=[693]) /* ty=Tensor[(693), float64] */;
  %877 = reshape(%873, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %878 = reshape(%874, newshape=[1568]) /* ty=Tensor[(1568), float64] */;
  %879 = reshape(%875, newshape=[360, 4]) /* ty=Tensor[(360, 4), int8] */;
  %880 = @func_4542(%876, %877, %878, %879) /* ty=(Tensor[(693), float64], Tensor[(88), bool], Tensor[(1568), float64], Tensor[(6, 13, 3), bool], Tensor[(9, 10, 16), int8], Tensor[(360, 4), int8], Tensor[(6, 13, 3), float64]) */;
  %881 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %882 = subtract(%870, %871) /* ty=Tensor[(6, 13, 3), uint8] */;
  %883 = %880.2;
  %884 = %881.4;
  (%882, %883, %var_5157, %var_5158, meta[relay.Constant][55] /* ty=Tensor[(784, 2), float64] */, %var_5160, %884)
}

def @func_6275(%var_6270: Tensor[(6, 13, 3), float32]) -> Tensor[(6, 13, 3), float64] {
  %885 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %886 = %885.0;
  %887 = cast(%var_6270, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
  %889 = cast(%886, dtype="float64") /* ty=Tensor[(6, 13, 3), float64] */;
  %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%889, %890) /* ty=Tensor[(6, 13, 3), float64] */
}

def @func_4378(%var_4375: Tensor[(13, 6, 12), int32], %var_4376: Tensor[(13, 6, 12), int32], %var_4377: Tensor[(288), int16]) -> (Tensor[(13, 6, 12), bool], Tensor[(6, 13, 3), uint8], Tensor[(288), int16]) {
  @func_4373(%var_4375, %var_4376, %var_4377) /* ty=(Tensor[(13, 6, 12), bool], Tensor[(6, 13, 3), uint8], Tensor[(288), int16]) */
}

def @func_4461(%var_4408: Tensor[(6, 13, 3), float32], %var_4424: Tensor[(1440), int8], %var_4427: Tensor[(2, 48), int32]) -> (Tensor[(6, 13, 3), int16], Tensor[(8, 3, 11), float64], Tensor[(264), float64], Tensor[(9, 10, 16), int8], Tensor[(1440), int8], Tensor[(2, 8, 6), int32], Tensor[(2, 48), int32], Tensor[(6, 13, 3), float32]) {
  %891 = @func_3939() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %892 = %891.0;
  %893 = cast(%var_4408, dtype="int16") /* ty=Tensor[(6, 13, 3), int16] */;
  %894 = shape_of(%892, dtype="int32") /* ty=Tensor[(3), int32] */;
  %895 = cast(%892, dtype="int16") /* ty=Tensor[(6, 13, 3), int16] */;
  %896 = dyn.reshape(%893, %894, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %897 = cast(meta[relay.Constant][56] /* ty=Tensor[(264), float64] */, dtype="float64") /* ty=Tensor[(264), float64] */;
  %898 = reshape(%897, newshape=[8, 3, 11]) /* ty=Tensor[(8, 3, 11), float64] */;
  %899 = @func_1058(%898) /* ty=(Tensor[(8, 3, 11), float64],) */;
  %900 = cast(%var_4424, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %901 = cast(%var_4424, dtype="int8") /* ty=Tensor[(1440), int8] */;
  %902 = reshape(%900, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
  %903 = reshape(%901, newshape=[9, 10, 16]) /* ty=Tensor[(9, 10, 16), int8] */;
  %904 = cast(%var_4427, dtype="int32") /* ty=Tensor[(2, 48), int32] */;
  %905 = reshape(%904, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %906 = @func_749(%905) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %907 = @func_2695() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32], Tensor[(60), float32], Tensor[(1568, 1), float64], Tensor[(6, 13, 3), float32]) */;
  %908 = logical_xor(%895, %896) /* ty=Tensor[(6, 13, 3), int16] */;
  %909 = %899.0;
  %910 = @func_4334(%902, %903) /* ty=Tensor[(9, 10, 16), int8] */;
  %911 = %906.0;
  %912 = %907.4;
  (%908, %909, meta[relay.Constant][56] /* ty=Tensor[(264), float64] */, %910, %var_4424, %911, %var_4427, %912)
}

def @func_4313(%var_4204: Tensor[(10, 7, 16), float64], %var_4241: Tensor[(88), bool]) -> (Tensor[(2, 8, 6), int32], Tensor[(96), float64], Tensor[(88), bool], Tensor[(693), float64], Tensor[(88), bool], Tensor[(6, 13, 3), float32], Tensor[(10, 7, 16), uint64]) {
  %913 = cast(meta[relay.Constant][57] /* ty=Tensor[(96), int32] */, dtype="int32") /* ty=Tensor[(96), int32] */;
  %914 = reshape(%913, newshape=[2, 8, 6]) /* ty=Tensor[(2, 8, 6), int32] */;
  %915 = @func_749(%914) /* ty=(Tensor[(2, 8, 6), int32],) */;
  %916 = cast(meta[relay.Constant][57] /* ty=Tensor[(96), int32] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %917 = cast(meta[relay.Constant][58] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %918 = cast(%var_4241, dtype="bool") /* ty=Tensor[(88), bool] */;
  %919 = reshape(%917, newshape=[11, 9, 7]) /* ty=Tensor[(11, 9, 7), float64] */;
  %920 = reshape(%918, newshape=[88]) /* ty=Tensor[(88), bool] */;
  %921 = @func_721(%919, %920) /* ty=(Tensor[(11, 9, 7), float64], Tensor[(1568), float64], Tensor[(88), bool], Tensor[(1568), float64]) */;
  %922 = @func_3322() /* ty=(Tensor[(6, 13, 3), float32], Tensor[(6, 13, 3), float32]) */;
  %923 = cast(%var_4204, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %924 = acos(%923) /* ty=Tensor[(10, 7, 16), float64] */;
  %925 = cast(%924, dtype="float64") /* ty=Tensor[(10, 7, 16), float64] */;
  %926 = sinh(%925) /* ty=Tensor[(10, 7, 16), float64] */;
  %927 = cast(%var_4204, dtype="uint64") /* ty=Tensor[(10, 7, 16), uint64] */;
  %928 = shape_of(%926, dtype="int32") /* ty=Tensor[(3), int32] */;
  %929 = cast(%926, dtype="uint64") /* ty=Tensor[(10, 7, 16), uint64] */;
  %930 = dyn.reshape(%927, %928, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %931 = %915.0;
  %932 = sigmoid(%916) /* ty=Tensor[(96), float64] */;
  %933 = %921.2;
  %934 = %922.0;
  %935 = bitwise_or(%929, %930) /* ty=Tensor[(10, 7, 16), uint64] */;
  (%931, %932, %933, meta[relay.Constant][58] /* ty=Tensor[(693), float64] */, %var_4241, %934, %935)
}

def @func_4643(%var_4641: Tensor[(7, 10, 10), float32], %var_4642: Tensor[(60), float32]) -> (Tensor[(7, 10, 10), float32], Tensor[(?, 10, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) {
  @func_4639(%var_4641, %var_4642) /* ty=(Tensor[(7, 10, 10), float32], Tensor[(?, 10, 6), bool], Tensor[(60), float32], Tensor[(6, 13, 3), float32]) */
}

def @func_5350() -> Tensor[(6, 13, 3), float32] {
  %936 = @func_3968() /* ty=(Tensor[(6, 13, 3), float32],) */;
  %937 = %936.0;
  %938 = cast(%937, dtype="float32") /* ty=Tensor[(6, 13, 3), float32] */;
  acosh(%938) /* ty=Tensor[(6, 13, 3), float32] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen194/build/output.py", line 2028, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:56:24] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

