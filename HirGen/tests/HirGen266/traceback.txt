==========mod==========
#[version = "0.0.5"]
def @func_4327() -> Tensor[(14, 4, 16), float64] {
  @func_1599() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4035() -> Tensor[(14, 4, 16), float32] {
  %0 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %0.0
}

def @func_1696(%var_1691: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  %1 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %2 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %3 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %4 = reshape(%2, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %5 = reshape(%3, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %6 = @func_113(%4, %5) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %7 = %1.0;
  %8 = %6.0;
  (%7, %8, %var_1691)
}

def @func_3251(%var_3247: Tensor[(45), float64]) -> (Tensor[(11, 16, 15), float64], Tensor[(2640), uint32], Tensor[(45), float64]) {
  %9 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
  %10 = cast(%var_3247, dtype="float64") /* ty=Tensor[(45), float64] */;
  %11 = %9.0;
  %12 = cast(%11, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %13 = reshape(%10, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %14 = reshape(%12, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %15 = @func_978(%13, %14) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %16 = %15.3;
  (%11, %16, %var_3247)
}

def @func_1684() -> (Tensor[(14, 4, 16), float64],) {
  %17 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %18 = %17.0;
  (%18,)
}

def @func_2682() -> (Tensor[(14, 4, 16), int16],) {
  %19 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
  %20 = %19.1;
  (%20,)
}

def @func_3168(%var_3163: Tensor[(8, 14, 3), int64]) -> (Tensor[(8, 14, 3), bool],) {
  %21 = cast(%var_3163, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
  %22 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(8, 14, 3), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(meta[relay.Constant][0] /* ty=Tensor[(8, 14, 3), int64] */, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = not_equal(%23, %24) /* ty=Tensor[(8, 14, 3), bool] */;
  (%25,)
}

def @func_1212() -> (Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %26 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %27 = %26.0;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 4, 16), float64] */, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %29 = shape_of(%27, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%27, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %33 = logical_or(%30, %31) /* ty=Tensor[(14, 4, 16), bool] */;
  %34 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
  %35 = asinh(%32) /* ty=Tensor[(14, 4, 16), float64] */;
  (%33, %34, %35)
}

def @func_3912() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) {
  %36 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
  %37 = %36.0;
  %38 = @func_1819() /* ty=Tensor[(14, 4, 16), float64] */;
  (%37, %38)
}

def @func_4932(%var_4893: Tensor[(6, 2, 9), float64]) -> (Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) {
  %39 = cast(%var_4893, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
  %40 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(6, 2, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(meta[relay.Constant][2] /* ty=Tensor[(6, 2, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %43 = cast(%var_4893, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
  %44 = floor_mod(%41, %42) /* ty=Tensor[(6, 2, 9), float64] */;
  %45 = asin(%43) /* ty=Tensor[(6, 2, 9), float32] */;
  %46 = @func_4327() /* ty=Tensor[(14, 4, 16), float64] */;
  (%44, %45, %46)
}

def @func_1630() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) {
  %47 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
  %48 = %47.0;
  %49 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  (%48, %49)
}

def @func_4097() -> Tensor[(14, 4, 16), float64] {
  %50 = @func_3998() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %51 = %50.0;
  %52 = cast(%51, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  cosh(%52) /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_5750(%var_5655: Tensor[(11, 16, 15), int32]) -> (Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), int64], Tensor[(14, 3, 5), bool], Tensor[(210), int16]) {
  %53 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
  %54 = @func_4260() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool]) */;
  %55 = %54.0;
  %56 = cast(%55, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %57 = log2(%56) /* ty=Tensor[(11, 16, 15), float64] */;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %59 = sinh(%58) /* ty=Tensor[(11, 16, 15), float64] */;
  %60 = cast(%var_5655, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %61 = shape_of(%55, dtype="int32") /* ty=Tensor[(3), int32] */;
  %62 = cast(%55, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
  %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %64 = equal(%62, %63) /* ty=Tensor[(11, 16, 15), bool] */;
  %65 = cast(%64, dtype="int64") /* ty=Tensor[(11, 16, 15), int64] */;
  %66 = shape_of(%59, dtype="int32") /* ty=Tensor[(3), int32] */;
  %67 = cast(%59, dtype="int64") /* ty=Tensor[(11, 16, 15), int64] */;
  %68 = dyn.reshape(%65, %66, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %69 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), int16] */, dtype="int16") /* ty=Tensor[(210), int16] */;
  %70 = cast(meta[relay.Constant][3] /* ty=Tensor[(210), int16] */, dtype="int16") /* ty=Tensor[(210), int16] */;
  %71 = cast(%64, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %72 = reshape(%69, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int16] */;
  %73 = reshape(%70, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int16] */;
  %74 = reshape(%71, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %75 = @func_1165(%72, %73, %74) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(45), int16], Tensor[(14, 4, 16), float32], Tensor[(14, 3, 5), bool], Tensor[(660, 4), float32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %76 = %53.1;
  %77 = bitwise_xor(%67, %68) /* ty=Tensor[(11, 16, 15), int64] */;
  %78 = %75.5;
  (%76, %77, %78, meta[relay.Constant][3] /* ty=Tensor[(210), int16] */)
}

def @func_5883() -> Tensor[(14, 4, 16), float64] {
  %79 = @func_5167() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %79.0
}

def @func_2334(%var_2312: Tensor[(6, 14, 4), float64], %var_2313: Tensor[(6, 14, 4), float64]) -> Tensor[(6, 14, 4), float64] {
  %80 = cast(%var_2313, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
  %81 = shape_of(%var_2312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%var_2312, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%82, %83) /* ty=Tensor[(6, 14, 4), float64] */
}

def @func_2609() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), int32]) {
  %84 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %85 = @func_1905() /* ty=Tensor[(14, 4, 16), float64] */;
  %86 = %84.1;
  (%85, %86)
}

def @func_4194() -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(2640), int32]) {
  %87 = @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %88 = cast(meta[relay.Constant][4] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %89 = cast(meta[relay.Constant][4] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %90 = reshape(%88, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %91 = reshape(%89, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %92 = @func_113(%90, %91) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %93 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  %94 = %87.0;
  %95 = %92.0;
  %96 = @func_605() /* ty=Tensor[(2640), int32] */;
  (%93, %94, %95, meta[relay.Constant][4] /* ty=Tensor[(2640), uint32] */, %96)
}

def @func_4884(%var_4833: Tensor[(7, 3, 6), float64], %var_4842: Tensor[(7, 3, 6), float64], %var_4861: Tensor[(507), float32]) -> (Tensor[(7, 3, 6), bool], Tensor[(13, 13, 3), uint32], Tensor[(507), float32], Tensor[(7, 3, 6), float32], Tensor[(7, 3, 6), uint64]) {
  %97 = cast(%var_4842, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %98 = shape_of(%var_4833, dtype="int32") /* ty=Tensor[(3), int32] */;
  %99 = cast(%var_4833, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
  %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %101 = cast(%var_4861, dtype="float32") /* ty=Tensor[(507), float32] */;
  %102 = reshape(%101, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float32] */;
  %103 = @func_1270(%102) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %104 = cast(%var_4833, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %105 = acos(%104) /* ty=Tensor[(7, 3, 6), float64] */;
  %106 = cast(%var_4833, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%105, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %110 = subtract(%108, %109) /* ty=Tensor[(7, 3, 6), float64] */;
  %111 = cast(%110, dtype="float32") /* ty=Tensor[(7, 3, 6), float32] */;
  %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 3, 6), float64] */, dtype="uint64") /* ty=Tensor[(7, 3, 6), uint64] */;
  %113 = shape_of(%110, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%110, dtype="uint64") /* ty=Tensor[(7, 3, 6), uint64] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %116 = less(%99, %100) /* ty=Tensor[(7, 3, 6), bool] */;
  %117 = %103.0;
  %118 = log(%111) /* ty=Tensor[(7, 3, 6), float32] */;
  %119 = minimum(%114, %115) /* ty=Tensor[(7, 3, 6), uint64] */;
  (%116, %117, %var_4861, %118, %119)
}

def @func_4396(%var_4367: Tensor[(2640), int32]) -> (Tensor[(2640), int8], Tensor[(11, 16, 15), uint32], Tensor[(2640), float32]) {
  %120 = @func_2641() /* ty=(Tensor[(2640), int32],) */;
  %121 = %120.0;
  %122 = cast(%var_4367, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(1), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?), bool] */;
  %126 = less_equal(%124, %125) /* ty=Tensor[(2640), bool] */;
  %127 = cast(%121, dtype="int8") /* ty=Tensor[(2640), int8] */;
  %128 = shape_of(%126, dtype="int32") /* ty=Tensor[(1), int32] */;
  %129 = cast(%126, dtype="int8") /* ty=Tensor[(2640), int8] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?), int8] */;
  %131 = @func_4194() /* ty=(Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(2640), int32]) */;
  %132 = cast(%126, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %133 = acosh(%132) /* ty=Tensor[(2640), float32] */;
  %134 = cast(%133, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %135 = bitwise_and(%129, %130) /* ty=Tensor[(2640), int8] */;
  %136 = %131.2;
  %137 = log(%134) /* ty=Tensor[(2640), float32] */;
  (%135, %136, %137)
}

def @func_6522(%var_6499: Tensor[(10, 6, 6), bool]) -> (Tensor[(10, 6, 6), bool], Tensor[(45), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float32]) {
  %138 = cast(%var_6499, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %139 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(10, 6, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %140 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 6, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %142 = cast(meta[relay.Constant][7] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %144 = reshape(%142, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %145 = reshape(%143, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %146 = @func_1774(%144, %145) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(660, 4), float32]) */;
  %147 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %148 = logical_and(%140, %141) /* ty=Tensor[(10, 6, 6), bool] */;
  %149 = %146.1;
  %150 = %147.0;
  (%148, %149, meta[relay.Constant][7] /* ty=Tensor[(45), float64] */, meta[relay.Constant][8] /* ty=Tensor[(2640), uint32] */, %150)
}

def @func_6537() -> (Tensor[(14, 4, 16), float32],) {
  %151 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %152 = %151.0;
  (%152,)
}

def @func_71() -> (Tensor[(14, 4, 16), float64],) {
  %153 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%153,)
}

def @func_1819() -> Tensor[(14, 4, 16), float64] {
  %154 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %154.0
}

def @func_1454() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) {
  %155 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %156 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
  %157 = %155.0;
  %158 = %156.1;
  (%157, %158)
}

def @func_4602() -> Tensor[(14, 4, 16), float64] {
  %159 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %159.0
}

def @func_2992(%var_2982: Tensor[(6, 10, 3), float64], %var_2988: Tensor[(6, 10, 3), bool]) -> (Tensor[(11, 16, 15), float64], Tensor[(6, 10, 3), float32]) {
  %160 = cast(%var_2982, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
  %161 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(6, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(meta[relay.Constant][9] /* ty=Tensor[(6, 10, 3), float64] */, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %164 = less_equal(%162, %163) /* ty=Tensor[(6, 10, 3), bool] */;
  %165 = cast(%var_2988, dtype="float32") /* ty=Tensor[(6, 10, 3), float32] */;
  %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
  %167 = cast(%164, dtype="float32") /* ty=Tensor[(6, 10, 3), float32] */;
  %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %169 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
  %170 = multiply(%167, %168) /* ty=Tensor[(6, 10, 3), float32] */;
  (%169, %170)
}

def @func_3019(%var_3001: Tensor[(8, 10, 5), float32]) -> Tensor[(8, 10, 5), float32] {
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(8, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 5), float32] */;
  %172 = shape_of(%var_3001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%var_3001, dtype="float32") /* ty=Tensor[(8, 10, 5), float32] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%173, %174) /* ty=Tensor[(8, 10, 5), float32] */
}

def @func_1599() -> Tensor[(14, 4, 16), float64] {
  %175 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %175.0
}

def @func_5988() -> (Tensor[(11, 16, 15), float64],) {
  %176 = @func_3643() /* ty=Tensor[(11, 16, 15), float64] */;
  (%176,)
}

def @func_1230() -> (Tensor[(14, 4, 16), float64],) {
  %177 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %178 = %177.1;
  (%178,)
}

def @func_1473() -> (Tensor[(14, 4, 16), float64],) {
  %179 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  (%179,)
}

def @func_978(%var_947: Tensor[(45), float64], %var_948: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) {
  %180 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %181 = cast(%var_947, dtype="float64") /* ty=Tensor[(45), float64] */;
  %182 = cast(%var_948, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %183 = reshape(%181, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %184 = reshape(%182, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %185 = @func_791(%183, %184) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %186 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %187 = %186.0;
  %188 = cast(%187, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %189 = %180.0;
  %190 = %185.1;
  %191 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  %192 = atanh(%188) /* ty=Tensor[(11, 16, 15), float64] */;
  (%189, %190, %var_947, %var_948, %191, %192)
}

def @func_6927() -> Tensor[(14, 4, 16), float64] {
  %193 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %193.0
}

def @func_1583(%var_1564: Tensor[(4, 1, 4), uint8], %var_1581: Tensor[(507), float32]) -> (Tensor[(4, 1, 4), uint8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), uint32], Tensor[(507), float32]) {
  %194 = cast(meta[relay.Constant][11] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %195 = cast(%var_1564, dtype="uint8") /* ty=Tensor[(4, 1, 4), uint8] */;
  %196 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %197 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %198 = cast(%var_1581, dtype="float32") /* ty=Tensor[(507), float32] */;
  %199 = reshape(%198, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float32] */;
  %200 = @func_1270(%199) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %201 = multiply(%194, %195) /* ty=Tensor[(4, 1, 4), uint8] */;
  %202 = %196.0;
  %203 = %197.1;
  %204 = %200.1;
  (%201, %202, %203, %204, %var_1581)
}

def @func_3105(%var_3041: Tensor[(6, 14, 3), uint32], %var_3095: Tensor[(2640), uint32]) -> (Tensor[(6, 14, 3), uint32], Tensor[(14, 4, 16), float32], Tensor[(896), float32], Tensor[(16), uint8], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64]) {
  %205 = cast(meta[relay.Constant][12] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %206 = cast(%var_3041, dtype="uint32") /* ty=Tensor[(6, 14, 3), uint32] */;
  %207 = cast(meta[relay.Constant][13] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
  %208 = reshape(%207, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float32] */;
  %209 = cast(%var_3095, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %210 = reshape(%209, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %211 = @func_2776(%210) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(16), uint8] */, dtype="uint8") /* ty=Tensor[(16), uint8] */;
  %213 = cast(meta[relay.Constant][15] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %214 = reshape(%212, newshape=[4, 1, 4]) /* ty=Tensor[(4, 1, 4), uint8] */;
  %215 = reshape(%213, newshape=[507]) /* ty=Tensor[(507), float32] */;
  %216 = @func_1583(%214, %215) /* ty=(Tensor[(4, 1, 4), uint8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), uint32], Tensor[(507), float32]) */;
  %217 = %216.2;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %219 = bitwise_or(%205, %206) /* ty=Tensor[(6, 14, 3), uint32] */;
  %220 = @func_873(%208) /* ty=Tensor[(14, 4, 16), float32] */;
  %221 = %211.2;
  %222 = log(%218) /* ty=Tensor[(14, 4, 16), float64] */;
  (%219, %220, meta[relay.Constant][13] /* ty=Tensor[(896), float32] */, meta[relay.Constant][14] /* ty=Tensor[(16), uint8] */, meta[relay.Constant][15] /* ty=Tensor[(507), float32] */, %221, %var_3095, %222)
}

def @func_740() -> (Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) {
  %223 = @func_460() /* ty=(Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) */;
  %224 = %223.4;
  %225 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 16, 15), uint32] */, dtype="int32") /* ty=Tensor[(11, 16, 15), int32] */;
  %226 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%224, dtype="int32") /* ty=Tensor[(11, 16, 15), int32] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %229 = cast(%224, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %230 = bitwise_and(%227, %228) /* ty=Tensor[(11, 16, 15), int32] */;
  %231 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  %232 = acosh(%229) /* ty=Tensor[(11, 16, 15), float64] */;
  (%230, %231, %232)
}

def @func_3428(%var_3421: Tensor[(45), float64]) -> (Tensor[(11, 16, 15), float64], Tensor[(660, 4), uint32], Tensor[(45), float64]) {
  %233 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
  %234 = cast(%233, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %235 = cast(%var_3421, dtype="float64") /* ty=Tensor[(45), float64] */;
  %236 = tan(%234) /* ty=Tensor[(11, 16, 15), float64] */;
  %237 = cast(%236, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %238 = reshape(%235, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %239 = reshape(%237, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %240 = @func_791(%238, %239) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %241 = %240.2;
  (%236, %241, %var_3421)
}

def @func_5019() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float32]) {
  %242 = @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %243 = %242.1;
  %244 = cast(%243, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %245 = reshape(%244, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %246 = @func_2051(%245) /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) */;
  %247 = @func_2817() /* ty=(Tensor[(11, 16, 15), float64],) */;
  %248 = %247.0;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %250 = %246.2;
  %251 = erf(%249) /* ty=Tensor[(11, 16, 15), float32] */;
  (%243, %250, %251)
}

def @func_3722(%var_3688: Tensor[(11, 16, 15), float32]) -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) {
  %252 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %254 = sin(%253) /* ty=Tensor[(11, 16, 15), float32] */;
  %255 = cast(%var_3688, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %259 = cast(%var_3688, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %260 = cast(%var_3688, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %261 = reshape(%259, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %262 = reshape(%260, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %263 = @func_113(%261, %262) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %264 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %265 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %266 = reshape(%264, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %267 = reshape(%265, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %268 = floor_mod(%257, %258) /* ty=Tensor[(11, 16, 15), float64] */;
  %269 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
  %270 = %263.0;
  %271 = @func_2334(%266, %267) /* ty=Tensor[(6, 14, 4), float64] */;
  (%268, %269, %270, %271, meta[relay.Constant][17] /* ty=Tensor[(336), float64] */)
}

def @func_2216() -> Tensor[(11, 16, 15), float64] {
  %272 = @func_1630() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
  %272.0
}

def @func_4178() -> Tensor[(14, 4, 16), float64] {
  %273 = @func_1684() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %273.0
}

def @func_5603() -> Tensor[(14, 4, 16), float64] {
  @func_1905() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_1270(%var_1236: Tensor[(13, 13, 3), float32]) -> (Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  %274 = cast(%var_1236, dtype="float32") /* ty=Tensor[(13, 13, 3), float32] */;
  %275 = erf(%274) /* ty=Tensor[(13, 13, 3), float32] */;
  %276 = cast(%var_1236, dtype="uint32") /* ty=Tensor[(13, 13, 3), uint32] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="uint32") /* ty=Tensor[(13, 13, 3), uint32] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %280 = cast(meta[relay.Constant][18] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %281 = cast(meta[relay.Constant][18] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %282 = reshape(%280, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %283 = reshape(%281, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %284 = @func_113(%282, %283) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %285 = logical_xor(%278, %279) /* ty=Tensor[(13, 13, 3), uint32] */;
  %286 = %284.0;
  (%285, %286, meta[relay.Constant][18] /* ty=Tensor[(2640), uint32] */)
}

def @func_4442(%var_4424: Tensor[(45), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(45), float64], Tensor[(2640), uint32]) {
  %287 = cast(%var_4424, dtype="float64") /* ty=Tensor[(45), float64] */;
  %288 = cast(meta[relay.Constant][19] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %289 = reshape(%287, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %290 = reshape(%288, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %291 = @func_978(%289, %290) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %292 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %293 = %291.5;
  (%292, %293, %var_4424, meta[relay.Constant][19] /* ty=Tensor[(2640), uint32] */)
}

def @func_873(%var_863: Tensor[(14, 4, 16), float32]) -> Tensor[(14, 4, 16), float32] {
  %294 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  %295 = cast(%var_863, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %296 = shape_of(%294, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%294, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%297, %298) /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_2939() -> (Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %299 = cast(-9.57623f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %300 = reshape(%299, newshape=[]) /* ty=float64 */;
  %301 = @func_208(%300) /* ty=(Tensor[(13, 7, 15), bool],) */;
  %302 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %303 = %302.0;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %305 = @func_817() /* ty=Tensor[(11, 16, 15), int32] */;
  %306 = %301.0;
  %307 = tan(%304) /* ty=Tensor[(14, 4, 16), float64] */;
  %308 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%305, %306, -9.57623f64 /* ty=float64 */, %307, %308)
}

def @func_460() -> (Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) {
  %309 = cast(meta[relay.Constant][20] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %310 = cast(meta[relay.Constant][20] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %311 = reshape(%309, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %312 = reshape(%310, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %313 = @func_113(%311, %312) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %314 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %315 = %314.1;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %317 = sqrt(%316) /* ty=Tensor[(14, 4, 16), float32] */;
  %318 = @func_174() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %319 = %318.1;
  %320 = cast(%319, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %321 = sigmoid(%320) /* ty=Tensor[(14, 4, 16), float32] */;
  %322 = cast(%321, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %323 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
  %324 = cast(%317, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %325 = dyn.reshape(%322, %323, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %327 = %313.0;
  %328 = cast(%327, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %329 = reshape(%326, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %330 = reshape(%328, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %331 = @func_113(%329, %330) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %332 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %333 = %332.0;
  %334 = cast(%333, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %335 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  %336 = subtract(%324, %325) /* ty=Tensor[(14, 4, 16), uint32] */;
  %337 = %331.0;
  %338 = log2(%334) /* ty=Tensor[(14, 4, 16), float32] */;
  (%327, meta[relay.Constant][20] /* ty=Tensor[(2640), uint32] */, %335, %336, %337, %338)
}

def @func_925() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) {
  %339 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %340 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  %341 = cast(%340, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %342 = log10(%341) /* ty=Tensor[(14, 4, 16), float32] */;
  %343 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 4, 16), float32] */, dtype="int16") /* ty=Tensor[(14, 4, 16), int16] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="int16") /* ty=Tensor[(14, 4, 16), int16] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %347 = %339.2;
  %348 = add(%345, %346) /* ty=Tensor[(14, 4, 16), int16] */;
  (%347, %348)
}

def @func_6226() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %349 = @func_4586() /* ty=Tensor[(14, 4, 16), float64] */;
  %350 = @func_4292() /* ty=Tensor[(14, 4, 16), float64] */;
  (%349, %350)
}

def @func_2641() -> (Tensor[(2640), int32],) {
  %351 = @func_605() /* ty=Tensor[(2640), int32] */;
  (%351,)
}

def @func_5121() -> Tensor[(2640), float64] {
  %352 = @func_1442() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), float32], Tensor[(45), float64], Tensor[(2640), uint32]) */;
  %353 = %352.4;
  %354 = cast(%353, dtype="float64") /* ty=Tensor[(2640), float64] */;
  log2(%354) /* ty=Tensor[(2640), float64] */
}

def @func_5321() -> (Tensor[(14, 4, 16), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64]) {
  %355 = @func_3912() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
  %356 = cast(meta[relay.Constant][22] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %357 = reshape(%356, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), float64] */;
  %358 = @func_4932(%357) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) */;
  %359 = %355.1;
  %360 = %358.1;
  (%359, %360, meta[relay.Constant][22] /* ty=Tensor[(108), float64] */)
}

def @func_2087() -> Tensor[(11, 16, 15), float64] {
  %361 = @func_1630() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
  %361.0
}

def @func_1165(%var_1084: Tensor[(14, 3, 5), int16], %var_1085: Tensor[(14, 3, 5), int16], %var_1108: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(45), int16], Tensor[(14, 4, 16), float32], Tensor[(14, 3, 5), bool], Tensor[(660, 4), float32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %362 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %363 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %364 = cast(meta[relay.Constant][24] /* ty=Tensor[(45), float64] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %365 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(45), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %366 = cast(meta[relay.Constant][23] /* ty=Tensor[(45), float64] */, dtype="int16") /* ty=Tensor[(45), int16] */;
  %367 = dyn.reshape(%364, %365, newshape=[]) /* ty=Tensor[(?), int16] */;
  %368 = cast(%var_1085, dtype="int16") /* ty=Tensor[(14, 3, 5), int16] */;
  %369 = shape_of(%var_1084, dtype="int32") /* ty=Tensor[(3), int32] */;
  %370 = cast(%var_1084, dtype="int16") /* ty=Tensor[(14, 3, 5), int16] */;
  %371 = dyn.reshape(%368, %369, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %372 = bitwise_or(%370, %371) /* ty=Tensor[(14, 3, 5), int16] */;
  %373 = cast(%var_1085, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %378 = cast(%var_1108, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %379 = reshape(%377, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %380 = reshape(%378, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %381 = @func_791(%379, %380) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %382 = %381.2;
  %383 = cast(meta[relay.Constant][25] /* ty=Tensor[(660, 4), uint32] */, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
  %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(2), int32] */;
  %385 = cast(%382, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %387 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %388 = %362.1;
  %389 = %363.0;
  %390 = add(%366, %367) /* ty=Tensor[(45), int16] */;
  %391 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  %392 = not_equal(%375, %376) /* ty=Tensor[(14, 3, 5), bool] */;
  %393 = floor_mod(%385, %386) /* ty=Tensor[(660, 4), float32] */;
  %394 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  %395 = %387.1;
  %396 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  (%388, %var_1108, %389, %390, %391, %392, %393, %394, %395, %396)
}

def @func_5294() -> (Tensor[(14, 4, 16), int16], Tensor[(14, 4, 16), uint16]) {
  %397 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %398 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %399 = cast(%398, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %400 = atanh(%399) /* ty=Tensor[(14, 4, 16), float64] */;
  %401 = cast(%400, dtype="uint16") /* ty=Tensor[(14, 4, 16), uint16] */;
  %402 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
  %403 = cast(%398, dtype="uint16") /* ty=Tensor[(14, 4, 16), uint16] */;
  %404 = dyn.reshape(%401, %402, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %405 = %397.1;
  %406 = bitwise_and(%403, %404) /* ty=Tensor[(14, 4, 16), uint16] */;
  (%405, %406)
}

def @func_6411() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), uint64], Tensor[(2640), bool], Tensor[(9, 9, 6), uint8], uint8, Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(15, 3), float64], Tensor[(486), float32], Tensor[(14, 4, 16), float32]) {
  %407 = @func_5121() /* ty=Tensor[(2640), float64] */;
  %408 = @func_5121() /* ty=Tensor[(2640), float64] */;
  %409 = cast(%408, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %410 = shape_of(%407, dtype="int32") /* ty=Tensor[(1), int32] */;
  %411 = cast(%407, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %413 = cast(meta[relay.Constant][26] /* ty=Tensor[(2640), float64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %414 = shape_of(%408, dtype="int32") /* ty=Tensor[(1), int32] */;
  %415 = cast(%408, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?), float32] */;
  %417 = power(%415, %416) /* ty=Tensor[(2640), float32] */;
  %418 = cast(%417, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %419 = shape_of(%407, dtype="int32") /* ty=Tensor[(1), int32] */;
  %420 = cast(%407, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %421 = dyn.reshape(%418, %419, newshape=[]) /* ty=Tensor[(?), bool] */;
  %422 = cast(meta[relay.Constant][27] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %423 = cast(meta[relay.Constant][28] /* ty=Tensor[(486), uint8] */, dtype="uint8") /* ty=Tensor[(486), uint8] */;
  %424 = reshape(%422, newshape=[]) /* ty=uint8 */;
  %425 = reshape(%423, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), uint8] */;
  %426 = @func_3322(%424, %425) /* ty=(Tensor[(9, 9, 6), uint8], Tensor[(14, 4, 16), float64]) */;
  %427 = @func_5156() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %428 = cast(meta[relay.Constant][29] /* ty=Tensor[(15, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 3), float64] */;
  %429 = reshape(%428, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %430 = @func_4442(%429) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(45), float64], Tensor[(2640), uint32]) */;
  %431 = cast(meta[relay.Constant][28] /* ty=Tensor[(486), uint8] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %432 = acos(%431) /* ty=Tensor[(486), float32] */;
  %433 = cast(%432, dtype="float32") /* ty=Tensor[(486), float32] */;
  %434 = @func_1728() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %435 = @func_4292() /* ty=Tensor[(14, 4, 16), float64] */;
  %436 = subtract(%411, %412) /* ty=Tensor[(2640), uint64] */;
  %437 = greater_equal(%420, %421) /* ty=Tensor[(2640), bool] */;
  %438 = %426.0;
  %439 = %427.0;
  %440 = %430.1;
  %441 = erf(%433) /* ty=Tensor[(486), float32] */;
  %442 = %434.0;
  (%435, %436, %437, %438, meta[relay.Constant][27] /* ty=uint8 */, %439, %440, meta[relay.Constant][29] /* ty=Tensor[(15, 3), float64] */, %441, %442)
}

def @func_3971(%var_3960: Tensor[(2, 15, 13), int64]) -> Tensor[(2, 15, 13), int64] {
  %443 = cast(%var_3960, dtype="int64") /* ty=Tensor[(2, 15, 13), int64] */;
  %444 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(2, 15, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 15, 13), int64] */, dtype="int64") /* ty=Tensor[(2, 15, 13), int64] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%445, %446) /* ty=Tensor[(2, 15, 13), int64] */
}

def @func_2841(%var_2823: Tensor[(15, 14, 3), uint32], %var_2824: Tensor[(15, 14, 3), uint32], %var_2837: Tensor[(308), int8]) -> (Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) {
  %447 = cast(%var_2824, dtype="bool") /* ty=Tensor[(15, 14, 3), bool] */;
  %448 = shape_of(%var_2823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %449 = cast(%var_2823, dtype="bool") /* ty=Tensor[(15, 14, 3), bool] */;
  %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %451 = @func_2682() /* ty=(Tensor[(14, 4, 16), int16],) */;
  %452 = cast(%var_2837, dtype="int8") /* ty=Tensor[(308), int8] */;
  %453 = cast(%var_2837, dtype="int8") /* ty=Tensor[(308), int8] */;
  %454 = reshape(%452, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
  %455 = reshape(%453, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
  %456 = @func_2707(%454, %455) /* ty=(Tensor[(2, 14, 11), bool],) */;
  %457 = greater(%449, %450) /* ty=Tensor[(15, 14, 3), bool] */;
  %458 = %451.0;
  %459 = %456.0;
  (%457, %458, %459, %var_2837)
}

def @func_113(%var_106: Tensor[(11, 16, 15), uint32], %var_107: Tensor[(11, 16, 15), uint32]) -> (Tensor[(11, 16, 15), uint32],) {
  %460 = cast(%var_107, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %461 = shape_of(%var_106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_106, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %464 = multiply(%462, %463) /* ty=Tensor[(11, 16, 15), uint32] */;
  (%464,)
}

def @func_630() -> Tensor[(14, 4, 16), float64] {
  %465 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %465.0
}

def @func_4586() -> Tensor[(14, 4, 16), float64] {
  %466 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %466.1
}

def @func_5503(%var_5486: Tensor[(3, 9, 16), int16], %var_5487: Tensor[(3, 9, 16), int16]) -> (Tensor[(3, 9, 16), bool],) {
  %467 = cast(%var_5487, dtype="bool") /* ty=Tensor[(3, 9, 16), bool] */;
  %468 = shape_of(%var_5486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %469 = cast(%var_5486, dtype="bool") /* ty=Tensor[(3, 9, 16), bool] */;
  %470 = dyn.reshape(%467, %468, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %471 = equal(%469, %470) /* ty=Tensor[(3, 9, 16), bool] */;
  (%471,)
}

def @func_3803(%var_3798: Tensor[(12, 6, 3), float32]) -> Tensor[(12, 6, 3), float64] {
  %472 = cast(%var_3798, dtype="float32") /* ty=Tensor[(12, 6, 3), float32] */;
  %473 = log2(%472) /* ty=Tensor[(12, 6, 3), float32] */;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(12, 6, 3), float64] */;
  exp(%474) /* ty=Tensor[(12, 6, 3), float64] */
}

def @func_844() -> Tensor[(14, 4, 16), float64] {
  %475 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %475.0
}

def @func_6673() -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float32]) {
  %476 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %477 = @func_2817() /* ty=(Tensor[(11, 16, 15), float64],) */;
  %478 = %477.0;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %480 = %476.0;
  %481 = sigmoid(%479) /* ty=Tensor[(11, 16, 15), float32] */;
  (%480, %481)
}

def @func_6879() -> (Tensor[(14, 4, 16), float64],) {
  %482 = @func_5167() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %483 = %482.0;
  (%483,)
}

def @func_208(%var_198: float64) -> (Tensor[(13, 7, 15), bool],) {
  %484 = cast(%var_198, dtype="bool") /* ty=bool */;
  %485 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 7, 15), float64] */, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
  %486 = less(%484, %485) /* ty=Tensor[(13, 7, 15), bool] */;
  (%486,)
}

def @func_5167() -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) {
  %487 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %488 = %487.1;
  %489 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
  (%488, %489)
}

def @func_4260() -> (Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool]) {
  %490 = @func_2939() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %491 = @func_817() /* ty=Tensor[(11, 16, 15), int32] */;
  %492 = %490.1;
  (%491, %492)
}

def @func_2157(%var_2139: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool]) {
  %493 = @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %494 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %495 = %494.0;
  %496 = cast(%var_2139, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %497 = shape_of(%495, dtype="int32") /* ty=Tensor[(3), int32] */;
  %498 = cast(%495, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %499 = dyn.reshape(%496, %497, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %500 = %493.1;
  %501 = less_equal(%498, %499) /* ty=Tensor[(14, 4, 16), bool] */;
  (%500, %501)
}

def @func_6144(%var_6137: Tensor[(16, 11, 7), float64]) -> (Tensor[(16, 11, 7), float64], Tensor[(2640), int32]) {
  %502 = cast(%var_6137, dtype="float64") /* ty=Tensor[(16, 11, 7), float64] */;
  %503 = sigmoid(%502) /* ty=Tensor[(16, 11, 7), float64] */;
  %504 = @func_605() /* ty=Tensor[(2640), int32] */;
  (%503, %504)
}

def @func_6485(%var_6463: Tensor[(1, 1232), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(16, 11, 7), float64], Tensor[(1, 1232), float64], Tensor[(14, 4, 16), float64]) {
  %505 = @func_1684() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %506 = cast(%var_6463, dtype="float64") /* ty=Tensor[(1, 1232), float64] */;
  %507 = reshape(%506, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), float64] */;
  %508 = @func_6144(%507) /* ty=(Tensor[(16, 11, 7), float64], Tensor[(2640), int32]) */;
  %509 = %505.0;
  %510 = @func_2087() /* ty=Tensor[(11, 16, 15), float64] */;
  %511 = %508.0;
  %512 = @func_4586() /* ty=Tensor[(14, 4, 16), float64] */;
  (%509, %510, %511, %var_6463, %512)
}

def @func_5408() -> (Tensor[(11, 16, 15), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64], Tensor[(14, 4, 16), float64]) {
  %513 = @func_3396() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float32]) */;
  %514 = cast(meta[relay.Constant][32] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %515 = reshape(%514, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), float64] */;
  %516 = @func_4932(%515) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) */;
  %517 = %513.0;
  %518 = %516.1;
  %519 = @func_4822() /* ty=Tensor[(14, 4, 16), float64] */;
  (%517, %518, meta[relay.Constant][32] /* ty=Tensor[(108), float64] */, %519)
}

def @func_6566() -> (Tensor[(14, 4, 16), float64],) {
  %520 = @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %521 = %520.1;
  (%521,)
}

def @func_17() -> Tensor[(14, 4, 16), float64] {
  %522 = cast(meta[relay.Constant][34] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %523 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %524 = cast(meta[relay.Constant][33] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%524, %525) /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_817() -> Tensor[(11, 16, 15), int32] {
  %526 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %526.0
}

def @func_6715(%var_6707: float32) -> (Tensor[(10, 6, 11), bool], Tensor[(14, 4, 16), float64]) {
  %527 = cast(%var_6707, dtype="bool") /* ty=bool */;
  %528 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 6, 11), float32] */, dtype="bool") /* ty=Tensor[(10, 6, 11), bool] */;
  %529 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %530 = greater_equal(%527, %528) /* ty=Tensor[(10, 6, 11), bool] */;
  %531 = %529.0;
  (%530, %531)
}

def @func_2051(%var_2019: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) {
  %532 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
  %533 = cast(%var_2019, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = @func_1728() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %538 = greater(%535, %536) /* ty=Tensor[(14, 4, 16), bool] */;
  %539 = %537.0;
  %540 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  (%538, %539, %540)
}

def @func_6063(%var_6027: Tensor[(132, 20), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(2, 15, 13), int64], Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(132, 20), uint32], Tensor[(14, 4, 16), float64], Tensor[(390), float32], Tensor[(14, 4, 16), float64]) {
  %541 = cast(meta[relay.Constant][36] /* ty=Tensor[(390), int64] */, dtype="int64") /* ty=Tensor[(390), int64] */;
  %542 = reshape(%541, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), int64] */;
  %543 = cast(meta[relay.Constant][37] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %544 = cast(%var_6027, dtype="uint32") /* ty=Tensor[(132, 20), uint32] */;
  %545 = reshape(%543, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %546 = reshape(%544, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %547 = @func_978(%545, %546) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %548 = cast(meta[relay.Constant][36] /* ty=Tensor[(390), int64] */, dtype="float32") /* ty=Tensor[(390), float32] */;
  %549 = @func_4327() /* ty=Tensor[(14, 4, 16), float64] */;
  %550 = @func_3971(%542) /* ty=Tensor[(2, 15, 13), int64] */;
  %551 = %547.0;
  %552 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
  %553 = cosh(%548) /* ty=Tensor[(390), float32] */;
  %554 = @func_1819() /* ty=Tensor[(14, 4, 16), float64] */;
  (%549, %550, %551, meta[relay.Constant][37] /* ty=Tensor[(45), float64] */, %var_6027, %552, %553, %554)
}

def @func_6297(%var_6246: Tensor[(126, 1), float64], %var_6279: Tensor[(630), uint32], %var_6280: Tensor[(7, 44), int8]) -> (Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) {
  %555 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %556 = cast(%var_6246, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %557 = cast(%var_6246, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %558 = cast(meta[relay.Constant][38] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %559 = reshape(%556, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %560 = reshape(%557, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %561 = reshape(%558, newshape=[507]) /* ty=Tensor[(507), float32] */;
  %562 = @func_4884(%559, %560, %561) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(13, 13, 3), uint32], Tensor[(507), float32], Tensor[(7, 3, 6), float32], Tensor[(7, 3, 6), uint64]) */;
  %563 = cast(%var_6279, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %564 = cast(%var_6279, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %565 = cast(%var_6280, dtype="int8") /* ty=Tensor[(7, 44), int8] */;
  %566 = reshape(%563, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %567 = reshape(%564, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %568 = reshape(%565, newshape=[308]) /* ty=Tensor[(308), int8] */;
  %569 = @func_2841(%566, %567, %568) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */;
  %570 = cast(%var_6246, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %571 = %555.0;
  %572 = %562.0;
  %573 = %569.0;
  %574 = acosh(%570) /* ty=Tensor[(126, 1), float64] */;
  (%571, %572, meta[relay.Constant][38] /* ty=Tensor[(507), float32] */, %573, %var_6279, %var_6280, %574)
}

def @func_2707(%var_2689: Tensor[(2, 14, 11), int8], %var_2690: Tensor[(2, 14, 11), int8]) -> (Tensor[(2, 14, 11), bool],) {
  %575 = cast(%var_2690, dtype="bool") /* ty=Tensor[(2, 14, 11), bool] */;
  %576 = shape_of(%var_2689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %577 = cast(%var_2689, dtype="bool") /* ty=Tensor[(2, 14, 11), bool] */;
  %578 = dyn.reshape(%575, %576, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %579 = equal(%577, %578) /* ty=Tensor[(2, 14, 11), bool] */;
  (%579,)
}

def @func_174() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %580 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %581 = %580.0;
  %582 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%581, %582)
}

def @func_2776(%var_2769: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  %583 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %584 = %583.1;
  %585 = cast(%584, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %586 = reshape(%585, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %587 = @func_2051(%586) /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) */;
  %588 = cast(%var_2769, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %589 = reshape(%588, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %590 = @func_1935(%589) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(2640), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32]) */;
  %591 = %587.0;
  %592 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %593 = %590.4;
  (%584, %591, %592, %593, %var_2769)
}

def @func_7002(%var_6981: Tensor[(896), float64]) -> (Tensor[(2640), float32], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32], Tensor[(896), float64], Tensor[(2640), float32], Tensor[(14, 4, 16), float64]) {
  %594 = @func_2641() /* ty=(Tensor[(2640), int32],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %597 = sigmoid(%596) /* ty=Tensor[(2640), float64] */;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %599 = cast(meta[relay.Constant][39] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %600 = cast(meta[relay.Constant][40] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %601 = cast(meta[relay.Constant][41] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %602 = reshape(%599, newshape=[126, 1]) /* ty=Tensor[(126, 1), float64] */;
  %603 = reshape(%600, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %604 = reshape(%601, newshape=[7, 44]) /* ty=Tensor[(7, 44), int8] */;
  %605 = @func_6297(%602, %603, %604) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) */;
  %606 = cast(%var_6981, dtype="float64") /* ty=Tensor[(896), float64] */;
  %607 = cast(%595, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %608 = reshape(%606, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %609 = reshape(%607, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %610 = @func_2559(%608, %609) /* ty=(Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) */;
  %611 = cast(%597, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %612 = @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %613 = asin(%598) /* ty=Tensor[(2640), float32] */;
  %614 = %605.1;
  %615 = %610.1;
  %616 = sqrt(%611) /* ty=Tensor[(2640), float32] */;
  %617 = %612.0;
  (%613, %614, meta[relay.Constant][39] /* ty=Tensor[(126), float64] */, meta[relay.Constant][40] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][41] /* ty=Tensor[(308), int8] */, %615, %var_6981, %616, %617)
}

def @func_605() -> Tensor[(2640), int32] {
  %618 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %618.1
}

def @func_1874() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %619 = @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %620 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %621 = %619.0;
  %622 = %620.0;
  (%621, %622)
}

def @func_1715() -> (Tensor[(14, 4, 16), float32],) {
  %623 = @func_1212() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %624 = %623.2;
  %625 = cast(%624, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %626 = acos(%625) /* ty=Tensor[(14, 4, 16), float32] */;
  (%626,)
}

def @func_3777(%var_3758: Tensor[(630), uint32], %var_3759: Tensor[(308), int8]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), int16], Tensor[(630), uint32], Tensor[(308), int8]) {
  %627 = @func_1212() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %628 = @func_2939() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %629 = cast(%var_3758, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %630 = cast(%var_3758, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %631 = cast(%var_3759, dtype="int8") /* ty=Tensor[(308), int8] */;
  %632 = reshape(%629, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %633 = reshape(%630, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %634 = reshape(%631, newshape=[308]) /* ty=Tensor[(308), int8] */;
  %635 = @func_2841(%632, %633, %634) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */;
  %636 = %627.2;
  %637 = %628.0;
  %638 = %635.1;
  (%636, %637, %638, %var_3758, %var_3759)
}

def @func_1935(%var_1924: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(2640), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32]) {
  %639 = cast(meta[relay.Constant][42] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %640 = reshape(%639, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %641 = @func_1696(%640) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %642 = cast(%var_1924, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %643 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(2640), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %644 = cast(meta[relay.Constant][42] /* ty=Tensor[(2640), uint32] */, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?), bool] */;
  %646 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %647 = cast(%var_1924, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %648 = reshape(%647, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %649 = @func_1696(%648) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %650 = @func_1819() /* ty=Tensor[(14, 4, 16), float64] */;
  %651 = %641.2;
  %652 = logical_or(%644, %645) /* ty=Tensor[(2640), bool] */;
  %653 = %646.0;
  %654 = %649.1;
  (%650, %651, %652, %653, %654)
}

def @func_1728() -> (Tensor[(14, 4, 16), float32],) {
  %655 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %656 = %655.0;
  (%656,)
}

def @func_701() -> (Tensor[(14, 4, 16), float64],) {
  %657 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%657,)
}

def @func_7046(%var_7026: Tensor[(5, 9), float64], %var_7037: Tensor[(126), float64], %var_7038: Tensor[(630, 1), uint32]) -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(5, 9), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630, 1), uint32], Tensor[(308), int8]) {
  %658 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %659 = cast(%var_7026, dtype="float64") /* ty=Tensor[(5, 9), float64] */;
  %660 = cast(meta[relay.Constant][43] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %661 = reshape(%659, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %662 = reshape(%660, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %663 = @func_978(%661, %662) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %664 = @func_3912() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
  %665 = cast(%var_7037, dtype="float64") /* ty=Tensor[(126), float64] */;
  %666 = cast(%var_7038, dtype="uint32") /* ty=Tensor[(630, 1), uint32] */;
  %667 = cast(meta[relay.Constant][44] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %668 = reshape(%665, newshape=[126, 1]) /* ty=Tensor[(126, 1), float64] */;
  %669 = reshape(%666, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %670 = reshape(%667, newshape=[7, 44]) /* ty=Tensor[(7, 44), int8] */;
  %671 = @func_6297(%668, %669, %670) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) */;
  %672 = %658.0;
  %673 = @func_4292() /* ty=Tensor[(14, 4, 16), float64] */;
  %674 = %663.3;
  %675 = %664.1;
  %676 = %671.1;
  (%672, %673, %674, %var_7026, meta[relay.Constant][43] /* ty=Tensor[(2640), uint32] */, %675, %676, %var_7037, %var_7038, meta[relay.Constant][44] /* ty=Tensor[(308), int8] */)
}

def @func_6804() -> Tensor[(14, 4, 16), float32] {
  %677 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %677.1
}

def @func_1442() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), float32], Tensor[(45), float64], Tensor[(2640), uint32]) {
  %678 = @func_174() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %679 = @func_460() /* ty=(Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) */;
  %680 = cast(meta[relay.Constant][45] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %681 = cast(meta[relay.Constant][46] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %682 = reshape(%680, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %683 = reshape(%681, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %684 = @func_791(%682, %683) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %685 = %678.1;
  %686 = %679.3;
  %687 = %684.3;
  (%685, %686, %687, meta[relay.Constant][45] /* ty=Tensor[(45), float64] */, meta[relay.Constant][46] /* ty=Tensor[(2640), uint32] */)
}

def @func_5156() -> (Tensor[(14, 4, 16), float64],) {
  %688 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %689 = %688.0;
  (%689,)
}

def @func_594() -> Tensor[(14, 4, 16), float32] {
  %690 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %691 = %690.0;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  atan(%692) /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_5950() -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32]) {
  %693 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %694 = cast(meta[relay.Constant][47] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %695 = cast(meta[relay.Constant][47] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %696 = cast(meta[relay.Constant][48] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %697 = reshape(%694, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %698 = reshape(%695, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %699 = reshape(%696, newshape=[308]) /* ty=Tensor[(308), int8] */;
  %700 = @func_2841(%697, %698, %699) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */;
  %701 = %693.0;
  %702 = cast(%701, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %703 = reshape(%702, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %704 = @func_4791(%703) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(2, 14, 11), bool], Tensor[(308), int8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(14, 4, 16), float64]) */;
  %705 = @func_4327() /* ty=Tensor[(14, 4, 16), float64] */;
  %706 = %700.0;
  %707 = %704.0;
  (%701, %705, %706, meta[relay.Constant][47] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][48] /* ty=Tensor[(308), int8] */, %707)
}

def @func_540() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) {
  %708 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %709 = cast(meta[relay.Constant][49] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %710 = cast(meta[relay.Constant][49] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %711 = reshape(%709, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %712 = reshape(%710, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %713 = @func_113(%711, %712) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %714 = %713.0;
  %715 = cast(%714, dtype="int32") /* ty=Tensor[(11, 16, 15), int32] */;
  %716 = shape_of(meta[relay.Constant][49] /* ty=Tensor[(2640), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %717 = cast(meta[relay.Constant][49] /* ty=Tensor[(2640), uint32] */, dtype="int32") /* ty=Tensor[(2640), int32] */;
  %718 = dyn.reshape(%715, %716, newshape=[]) /* ty=Tensor[(?), int32] */;
  %719 = cast(meta[relay.Constant][49] /* ty=Tensor[(2640), uint32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %720 = %708.0;
  %721 = multiply(%717, %718) /* ty=Tensor[(2640), int32] */;
  %722 = acos(%719) /* ty=Tensor[(2640), float32] */;
  (%720, %721, %722)
}

def @func_791(%var_743: Tensor[(9, 1, 5), float64], %var_756: Tensor[(660, 4), uint32]) -> (Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) {
  %723 = cast(%var_743, dtype="float64") /* ty=Tensor[(9, 1, 5), float64] */;
  %724 = erf(%723) /* ty=Tensor[(9, 1, 5), float64] */;
  %725 = cast(%var_743, dtype="uint32") /* ty=Tensor[(9, 1, 5), uint32] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="uint32") /* ty=Tensor[(9, 1, 5), uint32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %729 = cast(%var_756, dtype="uint32") /* ty=Tensor[(660, 4), uint32] */;
  %730 = cast(%var_756, dtype="uint32") /* ty=Tensor[(660, 4), uint32] */;
  %731 = reshape(%729, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %732 = reshape(%730, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %733 = @func_113(%731, %732) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %734 = %733.0;
  %735 = cast(%734, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %736 = cast(%734, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %737 = reshape(%735, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %738 = reshape(%736, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %739 = @func_113(%737, %738) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %740 = %739.0;
  %741 = cast(%740, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %742 = left_shift(%727, %728) /* ty=Tensor[(9, ?, 5), uint32] */;
  %743 = exp(%741) /* ty=Tensor[(11, 16, 15), float32] */;
  (%742, %734, %var_756, %743)
}

def @func_6105() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32]) {
  %744 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %745 = %744.0;
  %746 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  (%745, %746)
}

def @func_1774(%var_1743: Tensor[(45), float64], %var_1744: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(660, 4), float32]) {
  %747 = cast(%var_1743, dtype="float64") /* ty=Tensor[(45), float64] */;
  %748 = cast(%var_1744, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %749 = reshape(%747, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %750 = reshape(%748, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %751 = @func_791(%749, %750) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %752 = %751.2;
  %753 = cast(%752, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
  %754 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %755 = asinh(%753) /* ty=Tensor[(660, 4), float32] */;
  (%754, %var_1743, %var_1744, %755)
}

def @func_2559(%var_2469: Tensor[(14, 4, 16), float64], %var_2553: Tensor[(11, 16, 15), float64]) -> (Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) {
  %756 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %757 = cast(%756, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
  %758 = shape_of(%var_2469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %759 = cast(%var_2469, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
  %760 = dyn.reshape(%757, %758, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %761 = cast(%var_2469, dtype="uint8") /* ty=Tensor[(14, 4, 16), uint8] */;
  %762 = shape_of(%756, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%756, dtype="uint8") /* ty=Tensor[(14, 4, 16), uint8] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %765 = bitwise_xor(%763, %764) /* ty=Tensor[(14, 4, 16), uint8] */;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %767 = cast(meta[relay.Constant][50] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %768 = reshape(%767, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float32] */;
  %769 = @func_1270(%768) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %770 = cast(%765, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %771 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %772 = @func_2087() /* ty=Tensor[(11, 16, 15), float64] */;
  %773 = cast(%var_2553, dtype="int16") /* ty=Tensor[(11, 16, 15), int16] */;
  %774 = shape_of(%772, dtype="int32") /* ty=Tensor[(3), int32] */;
  %775 = cast(%772, dtype="int16") /* ty=Tensor[(11, 16, 15), int16] */;
  %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %777 = left_shift(%759, %760) /* ty=Tensor[(14, 4, 16), int64] */;
  %778 = exp(%766) /* ty=Tensor[(14, 4, 16), float32] */;
  %779 = %769.2;
  %780 = sin(%770) /* ty=Tensor[(14, 4, 16), float64] */;
  %781 = %771.1;
  %782 = left_shift(%775, %776) /* ty=Tensor[(11, 16, 15), int16] */;
  (%777, %778, %779, meta[relay.Constant][50] /* ty=Tensor[(507), float32] */, %780, %781, %782)
}

def @func_1291() -> (Tensor[(14, 4, 16), float64],) {
  %783 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%783,)
}

def @func_2817() -> (Tensor[(11, 16, 15), float64],) {
  %784 = @func_2087() /* ty=Tensor[(11, 16, 15), float64] */;
  (%784,)
}

def @func_250() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %785 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %786 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %787 = %785.0;
  %788 = %786.0;
  %789 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%787, %788, %789)
}

def @func_4791(%var_4752: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float32], Tensor[(2, 14, 11), bool], Tensor[(308), int8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(14, 4, 16), float64]) {
  %790 = cast(meta[relay.Constant][51] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %791 = cast(meta[relay.Constant][51] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %792 = reshape(%790, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
  %793 = reshape(%791, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
  %794 = @func_2707(%792, %793) /* ty=(Tensor[(2, 14, 11), bool],) */;
  %795 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %798 = rsqrt(%797) /* ty=Tensor[(14, 4, 16), float64] */;
  %799 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %800 = shape_of(%798, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%798, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %803 = @func_1212() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %804 = @func_4035() /* ty=Tensor[(14, 4, 16), float32] */;
  %805 = %794.0;
  %806 = @func_4602() /* ty=Tensor[(14, 4, 16), float64] */;
  %807 = maximum(%801, %802) /* ty=Tensor[(14, 4, 16), uint32] */;
  %808 = %803.2;
  (%804, %805, meta[relay.Constant][51] /* ty=Tensor[(308), int8] */, %806, %807, %808)
}

def @func_3396() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float32]) {
  %809 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %810 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %811 = %810.0;
  %812 = cast(meta[relay.Constant][52] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %813 = shape_of(%811, dtype="int32") /* ty=Tensor[(3), int32] */;
  %814 = cast(%811, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %815 = dyn.reshape(%812, %813, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %816 = %809.2;
  %817 = minimum(%814, %815) /* ty=Tensor[(14, 4, 16), float32] */;
  (%816, %817)
}

def @func_5802(%var_5769: Tensor[(8, 5, 3), float32]) -> (Tensor[(14, 4, 16), float64], Tensor[(8, 5, 3), float64], Tensor[(8, 5, 3), float64]) {
  %818 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %819 = cast(%var_5769, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %820 = log2(%819) /* ty=Tensor[(8, 5, 3), float32] */;
  %821 = cast(%820, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %822 = sqrt(%821) /* ty=Tensor[(8, 5, 3), float32] */;
  %823 = cast(%822, dtype="float64") /* ty=Tensor[(8, 5, 3), float64] */;
  %824 = cast(%822, dtype="float64") /* ty=Tensor[(8, 5, 3), float64] */;
  %825 = %818.0;
  %826 = atanh(%823) /* ty=Tensor[(8, 5, 3), float64] */;
  %827 = cosh(%824) /* ty=Tensor[(8, 5, 3), float64] */;
  (%825, %826, %827)
}

def @func_3998() -> (Tensor[(14, 4, 16), float64],) {
  %828 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %829 = %828.0;
  (%829,)
}

def @func_4822() -> Tensor[(14, 4, 16), float64] {
  @func_630() /* ty=Tensor[(14, 4, 16), float64] */
}

def @main(%var_7088: Tensor[(4, 7, 8), float64], %var_7089: Tensor[(4, 7, 8), float64]) -> Tensor[(4, 7, 8), bool] {
  %830 = cast(%var_7089, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
  %831 = shape_of(%var_7088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %832 = cast(%var_7088, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
  %833 = dyn.reshape(%830, %831, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%832, %833) /* ty=Tensor[(4, 7, 8), bool] */
}

def @func_5461(%var_5449: Tensor[(2640), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int64], Tensor[(2640), float32]) {
  %834 = @func_3998() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %835 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %836 = @func_5156() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %837 = %836.0;
  %838 = cast(%837, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %839 = cast(meta[relay.Constant][53] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %840 = reshape(%838, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %841 = reshape(%839, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %842 = @func_2559(%840, %841) /* ty=(Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) */;
  %843 = cast(%var_5449, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %844 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(2640), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %845 = cast(meta[relay.Constant][53] /* ty=Tensor[(2640), float64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %846 = dyn.reshape(%843, %844, newshape=[]) /* ty=Tensor[(?), float32] */;
  %847 = %834.0;
  %848 = %835.0;
  %849 = @func_4602() /* ty=Tensor[(14, 4, 16), float64] */;
  %850 = %842.0;
  %851 = floor_divide(%845, %846) /* ty=Tensor[(2640), float32] */;
  (%847, %848, %837, %849, %850, %851)
}

def @func_3643() -> Tensor[(11, 16, 15), float64] {
  @func_2216() /* ty=Tensor[(11, 16, 15), float64] */
}

def @func_3322(%var_3307: uint8, %var_3308: Tensor[(9, 9, 6), uint8]) -> (Tensor[(9, 9, 6), uint8], Tensor[(14, 4, 16), float64]) {
  %852 = cast(%var_3307, dtype="uint8") /* ty=uint8 */;
  %853 = cast(%var_3308, dtype="uint8") /* ty=Tensor[(9, 9, 6), uint8] */;
  %854 = @func_2939() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %855 = logical_xor(%852, %853) /* ty=Tensor[(9, 9, 6), uint8] */;
  %856 = %854.4;
  (%855, %856)
}

def @func_348() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %857 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %858 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %859 = %858.2;
  %860 = cast(%859, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %861 = %857.1;
  %862 = asin(%860) /* ty=Tensor[(14, 4, 16), float64] */;
  (%861, %862)
}

def @func_1905() -> Tensor[(14, 4, 16), float64] {
  @func_844() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4292() -> Tensor[(14, 4, 16), float64] {
  @func_17() /* ty=Tensor[(14, 4, 16), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1599() -> Tensor[(14, 4, 16), float64] {
  %0 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %0.0
}

def @func_7005(%var_7003: Tensor[(896), float64]) -> (Tensor[(2640), float32], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32], Tensor[(896), float64], Tensor[(2640), float32], Tensor[(14, 4, 16), float64]) {
  @func_7002(%var_7003) /* ty=(Tensor[(2640), float32], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32], Tensor[(896), float64], Tensor[(2640), float32], Tensor[(14, 4, 16), float64]) */
}

def @func_1169(%var_1166: Tensor[(14, 3, 5), int16], %var_1167: Tensor[(14, 3, 5), int16], %var_1168: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(45), int16], Tensor[(14, 4, 16), float32], Tensor[(14, 3, 5), bool], Tensor[(660, 4), float32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %36 = fn (%var_1084: Tensor[(14, 3, 5), int16], %var_1085: Tensor[(14, 3, 5), int16], %var_1108: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(45), int16], Tensor[(14, 4, 16), float32], Tensor[(14, 3, 5), bool], Tensor[(660, 4), float32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
    %1 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
    %2 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(45), float64] */, dtype="int16") /* ty=Tensor[(45), int16] */;
    %4 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(45), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(45), float64] */, dtype="int16") /* ty=Tensor[(45), int16] */;
    %6 = dyn.reshape(%3, %4, newshape=[]) /* ty=Tensor[(?), int16] */;
    %7 = cast(%var_1085, dtype="int16") /* ty=Tensor[(14, 3, 5), int16] */;
    %8 = shape_of(%var_1084, dtype="int32") /* ty=Tensor[(3), int32] */;
    %9 = cast(%var_1084, dtype="int16") /* ty=Tensor[(14, 3, 5), int16] */;
    %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %11 = bitwise_or(%9, %10) /* ty=Tensor[(14, 3, 5), int16] */;
    %12 = cast(%var_1085, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
    %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%11, dtype="bool") /* ty=Tensor[(14, 3, 5), bool] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %17 = cast(%var_1108, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %18 = reshape(%16, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
    %19 = reshape(%17, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
    %20 = @func_791(%18, %19) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
    %21 = %20.2;
    %22 = cast(meta[relay.Constant][2] /* ty=Tensor[(660, 4), uint32] */, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
    %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(2), int32] */;
    %24 = cast(%21, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %26 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %27 = %1.1;
    %28 = %2.0;
    %29 = add(%5, %6) /* ty=Tensor[(45), int16] */;
    %30 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
    %31 = not_equal(%14, %15) /* ty=Tensor[(14, 3, 5), bool] */;
    %32 = floor_mod(%24, %25) /* ty=Tensor[(660, 4), float32] */;
    %33 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
    %34 = %26.1;
    %35 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
    (%27, %var_1108, %28, %29, %30, %31, %32, %33, %34, %35)
  };
  %36(%var_1166, %var_1167, %var_1168) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(45), int16], Tensor[(14, 4, 16), float32], Tensor[(14, 3, 5), bool], Tensor[(660, 4), float32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_4794(%var_4792: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float32], Tensor[(2, 14, 11), bool], Tensor[(308), int8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(14, 4, 16), float64]) {
  @func_4791(%var_4792) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(2, 14, 11), bool], Tensor[(308), int8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(14, 4, 16), float64]) */
}

def @func_2559(%var_2469: Tensor[(14, 4, 16), float64], %var_2553: Tensor[(11, 16, 15), float64]) -> (Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) {
  %37 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %38 = cast(%37, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
  %39 = shape_of(%var_2469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %40 = cast(%var_2469, dtype="int64") /* ty=Tensor[(14, 4, 16), int64] */;
  %41 = dyn.reshape(%38, %39, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %42 = cast(%var_2469, dtype="uint8") /* ty=Tensor[(14, 4, 16), uint8] */;
  %43 = shape_of(%37, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%37, dtype="uint8") /* ty=Tensor[(14, 4, 16), uint8] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %46 = bitwise_xor(%44, %45) /* ty=Tensor[(14, 4, 16), uint8] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %49 = reshape(%48, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float32] */;
  %50 = @func_1270(%49) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %51 = cast(%46, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %52 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %53 = @func_2087() /* ty=Tensor[(11, 16, 15), float64] */;
  %54 = cast(%var_2553, dtype="int16") /* ty=Tensor[(11, 16, 15), int16] */;
  %55 = shape_of(%53, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%53, dtype="int16") /* ty=Tensor[(11, 16, 15), int16] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %58 = left_shift(%40, %41) /* ty=Tensor[(14, 4, 16), int64] */;
  %59 = exp(%47) /* ty=Tensor[(14, 4, 16), float32] */;
  %60 = %50.2;
  %61 = sin(%51) /* ty=Tensor[(14, 4, 16), float64] */;
  %62 = %52.1;
  %63 = left_shift(%56, %57) /* ty=Tensor[(11, 16, 15), int16] */;
  (%58, %59, %60, meta[relay.Constant][3] /* ty=Tensor[(507), float32] */, %61, %62, %63)
}

def @func_2642() -> (Tensor[(2640), int32],) {
  %65 = fn () -> (Tensor[(2640), int32],) {
    %64 = @func_605() /* ty=Tensor[(2640), int32] */;
    (%64,)
  };
  %65() /* ty=(Tensor[(2640), int32],) */
}

def @func_6804() -> Tensor[(14, 4, 16), float32] {
  %66 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %66.1
}

def @func_1601() -> Tensor[(14, 4, 16), float64] {
  @func_1599() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4396(%var_4367: Tensor[(2640), int32]) -> (Tensor[(2640), int8], Tensor[(11, 16, 15), uint32], Tensor[(2640), float32]) {
  %67 = @func_2641() /* ty=(Tensor[(2640), int32],) */;
  %68 = %67.0;
  %69 = cast(%var_4367, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(1), int32] */;
  %71 = cast(%68, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?), bool] */;
  %73 = less_equal(%71, %72) /* ty=Tensor[(2640), bool] */;
  %74 = cast(%68, dtype="int8") /* ty=Tensor[(2640), int8] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(1), int32] */;
  %76 = cast(%73, dtype="int8") /* ty=Tensor[(2640), int8] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?), int8] */;
  %78 = @func_4194() /* ty=(Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(2640), int32]) */;
  %79 = cast(%73, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %80 = acosh(%79) /* ty=Tensor[(2640), float32] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %82 = bitwise_and(%76, %77) /* ty=Tensor[(2640), int8] */;
  %83 = %78.2;
  %84 = log(%81) /* ty=Tensor[(2640), float32] */;
  (%82, %83, %84)
}

def @func_5752(%var_5751: Tensor[(11, 16, 15), int32]) -> (Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), int64], Tensor[(14, 3, 5), bool], Tensor[(210), int16]) {
  %111 = fn (%var_5655: Tensor[(11, 16, 15), int32]) -> (Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), int64], Tensor[(14, 3, 5), bool], Tensor[(210), int16]) {
    %85 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
    %86 = @func_4260() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool]) */;
    %87 = %86.0;
    %88 = cast(%87, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
    %89 = log2(%88) /* ty=Tensor[(11, 16, 15), float64] */;
    %90 = cast(%89, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
    %91 = sinh(%90) /* ty=Tensor[(11, 16, 15), float64] */;
    %92 = cast(%var_5655, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %93 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%87, dtype="bool") /* ty=Tensor[(11, 16, 15), bool] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %96 = equal(%94, %95) /* ty=Tensor[(11, 16, 15), bool] */;
    %97 = cast(%96, dtype="int64") /* ty=Tensor[(11, 16, 15), int64] */;
    %98 = shape_of(%91, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%91, dtype="int64") /* ty=Tensor[(11, 16, 15), int64] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %101 = cast(meta[relay.Constant][4] /* ty=Tensor[(210), int16] */, dtype="int16") /* ty=Tensor[(210), int16] */;
    %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(210), int16] */, dtype="int16") /* ty=Tensor[(210), int16] */;
    %103 = cast(%96, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
    %104 = reshape(%101, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int16] */;
    %105 = reshape(%102, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), int16] */;
    %106 = reshape(%103, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
    %107 = @func_1165(%104, %105, %106) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(45), int16], Tensor[(14, 4, 16), float32], Tensor[(14, 3, 5), bool], Tensor[(660, 4), float32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %108 = %85.1;
    %109 = bitwise_xor(%99, %100) /* ty=Tensor[(11, 16, 15), int64] */;
    %110 = %107.5;
    (%108, %109, %110, meta[relay.Constant][4] /* ty=Tensor[(210), int16] */)
  };
  %111(%var_5751) /* ty=(Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), int64], Tensor[(14, 3, 5), bool], Tensor[(210), int16]) */
}

def @func_541() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) {
  %127 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) {
    %112 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %114 = cast(meta[relay.Constant][5] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %115 = reshape(%113, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
    %116 = reshape(%114, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
    %117 = @func_113(%115, %116) /* ty=(Tensor[(11, 16, 15), uint32],) */;
    %118 = %117.0;
    %119 = cast(%118, dtype="int32") /* ty=Tensor[(11, 16, 15), int32] */;
    %120 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(2640), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %121 = cast(meta[relay.Constant][5] /* ty=Tensor[(2640), uint32] */, dtype="int32") /* ty=Tensor[(2640), int32] */;
    %122 = dyn.reshape(%119, %120, newshape=[]) /* ty=Tensor[(?), int32] */;
    %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(2640), uint32] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %124 = %112.0;
    %125 = multiply(%121, %122) /* ty=Tensor[(2640), int32] */;
    %126 = acos(%123) /* ty=Tensor[(2640), float32] */;
    (%124, %125, %126)
  };
  %127() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */
}

def @main(%var_7088: Tensor[(4, 7, 8), float64], %var_7089: Tensor[(4, 7, 8), float64]) -> Tensor[(4, 7, 8), bool] {
  %128 = cast(%var_7089, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
  %129 = shape_of(%var_7088, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_7088, dtype="bool") /* ty=Tensor[(4, 7, 8), bool] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%130, %131) /* ty=Tensor[(4, 7, 8), bool] */
}

def @func_1778(%var_1776: Tensor[(45), float64], %var_1777: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(660, 4), float32]) {
  @func_1774(%var_1776, %var_1777) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(660, 4), float32]) */
}

def @func_2338(%var_2336: Tensor[(6, 14, 4), float64], %var_2337: Tensor[(6, 14, 4), float64]) -> Tensor[(6, 14, 4), float64] {
  @func_2334(%var_2336, %var_2337) /* ty=Tensor[(6, 14, 4), float64] */
}

def @func_4262() -> (Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool]) {
  @func_4260() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool]) */
}

def @func_462() -> (Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) {
  @func_460() /* ty=(Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) */
}

def @func_1935(%var_1924: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(2640), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32]) {
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %133 = reshape(%132, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %134 = @func_1696(%133) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %135 = cast(%var_1924, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %136 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(2640), uint32] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(2640), uint32] */, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?), bool] */;
  %139 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %140 = cast(%var_1924, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %141 = reshape(%140, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %142 = @func_1696(%141) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %143 = @func_1819() /* ty=Tensor[(14, 4, 16), float64] */;
  %144 = %134.2;
  %145 = logical_or(%137, %138) /* ty=Tensor[(2640), bool] */;
  %146 = %139.0;
  %147 = %142.1;
  (%143, %144, %145, %146, %147)
}

def @func_3322(%var_3307: uint8, %var_3308: Tensor[(9, 9, 6), uint8]) -> (Tensor[(9, 9, 6), uint8], Tensor[(14, 4, 16), float64]) {
  %148 = cast(%var_3307, dtype="uint8") /* ty=uint8 */;
  %149 = cast(%var_3308, dtype="uint8") /* ty=Tensor[(9, 9, 6), uint8] */;
  %150 = @func_2939() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %151 = logical_xor(%148, %149) /* ty=Tensor[(9, 9, 6), uint8] */;
  %152 = %150.4;
  (%151, %152)
}

def @func_113(%var_106: Tensor[(11, 16, 15), uint32], %var_107: Tensor[(11, 16, 15), uint32]) -> (Tensor[(11, 16, 15), uint32],) {
  %153 = cast(%var_107, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %154 = shape_of(%var_106, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%var_106, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %157 = multiply(%155, %156) /* ty=Tensor[(11, 16, 15), uint32] */;
  (%157,)
}

def @func_845() -> Tensor[(14, 4, 16), float64] {
  %159 = fn () -> Tensor[(14, 4, 16), float64] {
    %158 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %158.0
  };
  %159() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4822() -> Tensor[(14, 4, 16), float64] {
  @func_630() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4329() -> Tensor[(14, 4, 16), float64] {
  @func_4327() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_2995(%var_2993: Tensor[(6, 10, 3), float64], %var_2994: Tensor[(6, 10, 3), bool]) -> (Tensor[(11, 16, 15), float64], Tensor[(6, 10, 3), float32]) {
  %171 = fn (%var_2982: Tensor[(6, 10, 3), float64], %var_2988: Tensor[(6, 10, 3), bool]) -> (Tensor[(11, 16, 15), float64], Tensor[(6, 10, 3), float32]) {
    %160 = cast(%var_2982, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
    %161 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 3), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %162 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 10, 3), float64] */, dtype="bool") /* ty=Tensor[(6, 10, 3), bool] */;
    %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %164 = less_equal(%162, %163) /* ty=Tensor[(6, 10, 3), bool] */;
    %165 = cast(%var_2988, dtype="float32") /* ty=Tensor[(6, 10, 3), float32] */;
    %166 = shape_of(%164, dtype="int32") /* ty=Tensor[(3), int32] */;
    %167 = cast(%164, dtype="float32") /* ty=Tensor[(6, 10, 3), float32] */;
    %168 = dyn.reshape(%165, %166, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %169 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
    %170 = multiply(%167, %168) /* ty=Tensor[(6, 10, 3), float32] */;
    (%169, %170)
  };
  %171(%var_2993, %var_2994) /* ty=(Tensor[(11, 16, 15), float64], Tensor[(6, 10, 3), float32]) */
}

def @func_5604() -> Tensor[(14, 4, 16), float64] {
  %172 = fn () -> Tensor[(14, 4, 16), float64] {
    @func_1905() /* ty=Tensor[(14, 4, 16), float64] */
  };
  %172() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_1443() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), float32], Tensor[(45), float64], Tensor[(2640), uint32]) {
  %183 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), float32], Tensor[(45), float64], Tensor[(2640), uint32]) {
    %173 = @func_174() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %174 = @func_460() /* ty=(Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) */;
    %175 = cast(meta[relay.Constant][8] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %177 = reshape(%175, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
    %178 = reshape(%176, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
    %179 = @func_791(%177, %178) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
    %180 = %173.1;
    %181 = %174.3;
    %182 = %179.3;
    (%180, %181, %182, meta[relay.Constant][8] /* ty=Tensor[(45), float64] */, meta[relay.Constant][9] /* ty=Tensor[(2640), uint32] */)
  };
  %183() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), float32], Tensor[(45), float64], Tensor[(2640), uint32]) */
}

def @func_3428(%var_3421: Tensor[(45), float64]) -> (Tensor[(11, 16, 15), float64], Tensor[(660, 4), uint32], Tensor[(45), float64]) {
  %184 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
  %185 = cast(%184, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %186 = cast(%var_3421, dtype="float64") /* ty=Tensor[(45), float64] */;
  %187 = tan(%185) /* ty=Tensor[(11, 16, 15), float64] */;
  %188 = cast(%187, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %189 = reshape(%186, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %190 = reshape(%188, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %191 = @func_791(%189, %190) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %192 = %191.2;
  (%187, %192, %var_3421)
}

def @func_6487(%var_6486: Tensor[(1, 1232), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(16, 11, 7), float64], Tensor[(1, 1232), float64], Tensor[(14, 4, 16), float64]) {
  %201 = fn (%var_6463: Tensor[(1, 1232), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(16, 11, 7), float64], Tensor[(1, 1232), float64], Tensor[(14, 4, 16), float64]) {
    %193 = @func_1684() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %194 = cast(%var_6463, dtype="float64") /* ty=Tensor[(1, 1232), float64] */;
    %195 = reshape(%194, newshape=[16, 11, 7]) /* ty=Tensor[(16, 11, 7), float64] */;
    %196 = @func_6144(%195) /* ty=(Tensor[(16, 11, 7), float64], Tensor[(2640), int32]) */;
    %197 = %193.0;
    %198 = @func_2087() /* ty=Tensor[(11, 16, 15), float64] */;
    %199 = %196.0;
    %200 = @func_4586() /* ty=Tensor[(14, 4, 16), float64] */;
    (%197, %198, %199, %var_6463, %200)
  };
  %201(%var_6486) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(16, 11, 7), float64], Tensor[(1, 1232), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_1583(%var_1564: Tensor[(4, 1, 4), uint8], %var_1581: Tensor[(507), float32]) -> (Tensor[(4, 1, 4), uint8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), uint32], Tensor[(507), float32]) {
  %202 = cast(meta[relay.Constant][10] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %203 = cast(%var_1564, dtype="uint8") /* ty=Tensor[(4, 1, 4), uint8] */;
  %204 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %205 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %206 = cast(%var_1581, dtype="float32") /* ty=Tensor[(507), float32] */;
  %207 = reshape(%206, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float32] */;
  %208 = @func_1270(%207) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
  %209 = multiply(%202, %203) /* ty=Tensor[(4, 1, 4), uint8] */;
  %210 = %204.0;
  %211 = %205.1;
  %212 = %208.1;
  (%209, %210, %211, %212, %var_1581)
}

def @func_4036() -> Tensor[(14, 4, 16), float32] {
  %214 = fn () -> Tensor[(14, 4, 16), float32] {
    %213 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
    %213.0
  };
  %214() /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_6567() -> (Tensor[(14, 4, 16), float64],) {
  %217 = fn () -> (Tensor[(14, 4, 16), float64],) {
    %215 = @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %216 = %215.1;
    (%216,)
  };
  %217() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_1819() -> Tensor[(14, 4, 16), float64] {
  %218 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %218.0
}

def @func_1473() -> (Tensor[(14, 4, 16), float64],) {
  %219 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  (%219,)
}

def @func_71() -> (Tensor[(14, 4, 16), float64],) {
  %220 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%220,)
}

def @func_1587(%var_1585: Tensor[(4, 1, 4), uint8], %var_1586: Tensor[(507), float32]) -> (Tensor[(4, 1, 4), uint8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), uint32], Tensor[(507), float32]) {
  @func_1583(%var_1585, %var_1586) /* ty=(Tensor[(4, 1, 4), uint8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), uint32], Tensor[(507), float32]) */
}

def @func_1686() -> (Tensor[(14, 4, 16), float64],) {
  @func_1684() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_4587() -> Tensor[(14, 4, 16), float64] {
  %222 = fn () -> Tensor[(14, 4, 16), float64] {
    %221 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %221.1
  };
  %222() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_875(%var_874: Tensor[(14, 4, 16), float32]) -> Tensor[(14, 4, 16), float32] {
  %228 = fn (%var_863: Tensor[(14, 4, 16), float32]) -> Tensor[(14, 4, 16), float32] {
    %223 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
    %224 = cast(%var_863, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
    %226 = cast(%223, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%226, %227) /* ty=Tensor[(14, 4, 16), float32] */
  };
  %228(%var_874) /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_1232() -> (Tensor[(14, 4, 16), float64],) {
  @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_5296() -> (Tensor[(14, 4, 16), int16], Tensor[(14, 4, 16), uint16]) {
  @func_5294() /* ty=(Tensor[(14, 4, 16), int16], Tensor[(14, 4, 16), uint16]) */
}

def @func_1631() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) {
  %232 = fn () -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) {
    %229 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
    %230 = %229.0;
    %231 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
    (%230, %231)
  };
  %232() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_2710(%var_2708: Tensor[(2, 14, 11), int8], %var_2709: Tensor[(2, 14, 11), int8]) -> (Tensor[(2, 14, 11), bool],) {
  %238 = fn (%var_2689: Tensor[(2, 14, 11), int8], %var_2690: Tensor[(2, 14, 11), int8]) -> (Tensor[(2, 14, 11), bool],) {
    %233 = cast(%var_2690, dtype="bool") /* ty=Tensor[(2, 14, 11), bool] */;
    %234 = shape_of(%var_2689, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%var_2689, dtype="bool") /* ty=Tensor[(2, 14, 11), bool] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %237 = equal(%235, %236) /* ty=Tensor[(2, 14, 11), bool] */;
    (%237,)
  };
  %238(%var_2708, %var_2709) /* ty=(Tensor[(2, 14, 11), bool],) */
}

def @func_5805(%var_5803: Tensor[(8, 5, 3), float32]) -> (Tensor[(14, 4, 16), float64], Tensor[(8, 5, 3), float64], Tensor[(8, 5, 3), float64]) {
  @func_5802(%var_5803) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(8, 5, 3), float64], Tensor[(8, 5, 3), float64]) */
}

def @func_6413() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), uint64], Tensor[(2640), bool], Tensor[(9, 9, 6), uint8], uint8, Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(15, 3), float64], Tensor[(486), float32], Tensor[(14, 4, 16), float32]) {
  @func_6411() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), uint64], Tensor[(2640), bool], Tensor[(9, 9, 6), uint8], uint8, Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(15, 3), float64], Tensor[(486), float32], Tensor[(14, 4, 16), float32]) */
}

def @func_5885() -> Tensor[(14, 4, 16), float64] {
  @func_5883() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_1475() -> (Tensor[(14, 4, 16), float64],) {
  @func_1473() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_795(%var_793: Tensor[(9, 1, 5), float64], %var_794: Tensor[(660, 4), uint32]) -> (Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) {
  @func_791(%var_793, %var_794) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */
}

def @func_703() -> (Tensor[(14, 4, 16), float64],) {
  @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_1821() -> Tensor[(14, 4, 16), float64] {
  @func_1819() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_5409() -> (Tensor[(11, 16, 15), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64], Tensor[(14, 4, 16), float64]) {
  %246 = fn () -> (Tensor[(11, 16, 15), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64], Tensor[(14, 4, 16), float64]) {
    %239 = @func_3396() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float32]) */;
    %240 = cast(meta[relay.Constant][11] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %241 = reshape(%240, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), float64] */;
    %242 = @func_4932(%241) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) */;
    %243 = %239.0;
    %244 = %242.1;
    %245 = @func_4822() /* ty=Tensor[(14, 4, 16), float64] */;
    (%243, %244, meta[relay.Constant][11] /* ty=Tensor[(108), float64] */, %245)
  };
  %246() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_1455() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) {
  %251 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) {
    %247 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %248 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
    %249 = %247.0;
    %250 = %248.1;
    (%249, %250)
  };
  %251() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */
}

def @func_4260() -> (Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool]) {
  %252 = @func_2939() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %253 = @func_817() /* ty=Tensor[(11, 16, 15), int32] */;
  %254 = %252.1;
  (%253, %254)
}

def @func_5158() -> (Tensor[(14, 4, 16), float64],) {
  @func_5156() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_595() -> Tensor[(14, 4, 16), float32] {
  %258 = fn () -> Tensor[(14, 4, 16), float32] {
    %255 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %256 = %255.0;
    %257 = cast(%256, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    atan(%257) /* ty=Tensor[(14, 4, 16), float32] */
  };
  %258() /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_5168() -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) {
  %262 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) {
    %259 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %260 = %259.1;
    %261 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
    (%260, %261)
  };
  %262() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */
}

def @func_5950() -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32]) {
  %263 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %264 = cast(meta[relay.Constant][12] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %265 = cast(meta[relay.Constant][12] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %266 = cast(meta[relay.Constant][13] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %267 = reshape(%264, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %268 = reshape(%265, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %269 = reshape(%266, newshape=[308]) /* ty=Tensor[(308), int8] */;
  %270 = @func_2841(%267, %268, %269) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */;
  %271 = %263.0;
  %272 = cast(%271, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %273 = reshape(%272, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %274 = @func_4791(%273) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(2, 14, 11), bool], Tensor[(308), int8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(14, 4, 16), float64]) */;
  %275 = @func_4327() /* ty=Tensor[(14, 4, 16), float64] */;
  %276 = %270.0;
  %277 = %274.0;
  (%271, %275, %276, meta[relay.Constant][12] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][13] /* ty=Tensor[(308), int8] */, %277)
}

def @func_2217() -> Tensor[(11, 16, 15), float64] {
  %279 = fn () -> Tensor[(11, 16, 15), float64] {
    %278 = @func_1630() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
    %278.0
  };
  %279() /* ty=Tensor[(11, 16, 15), float64] */
}

def @func_4791(%var_4752: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float32], Tensor[(2, 14, 11), bool], Tensor[(308), int8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(14, 4, 16), float64]) {
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %281 = cast(meta[relay.Constant][14] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %282 = reshape(%280, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
  %283 = reshape(%281, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
  %284 = @func_2707(%282, %283) /* ty=(Tensor[(2, 14, 11), bool],) */;
  %285 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %286 = %285.0;
  %287 = cast(%286, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %288 = rsqrt(%287) /* ty=Tensor[(14, 4, 16), float64] */;
  %289 = cast(%var_4752, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %290 = shape_of(%288, dtype="int32") /* ty=Tensor[(3), int32] */;
  %291 = cast(%288, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %292 = dyn.reshape(%289, %290, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %293 = @func_1212() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %294 = @func_4035() /* ty=Tensor[(14, 4, 16), float32] */;
  %295 = %284.0;
  %296 = @func_4602() /* ty=Tensor[(14, 4, 16), float64] */;
  %297 = maximum(%291, %292) /* ty=Tensor[(14, 4, 16), uint32] */;
  %298 = %293.2;
  (%294, %295, meta[relay.Constant][14] /* ty=Tensor[(308), int8] */, %296, %297, %298)
}

def @func_4293() -> Tensor[(14, 4, 16), float64] {
  %299 = fn () -> Tensor[(14, 4, 16), float64] {
    @func_17() /* ty=Tensor[(14, 4, 16), float64] */
  };
  %299() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_5883() -> Tensor[(14, 4, 16), float64] {
  %300 = @func_5167() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %300.0
}

def @func_1874() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %301 = @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %302 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %303 = %301.0;
  %304 = %302.0;
  (%303, %304)
}

def @func_3108(%var_3106: Tensor[(6, 14, 3), uint32], %var_3107: Tensor[(2640), uint32]) -> (Tensor[(6, 14, 3), uint32], Tensor[(14, 4, 16), float32], Tensor[(896), float32], Tensor[(16), uint8], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64]) {
  %323 = fn (%var_3041: Tensor[(6, 14, 3), uint32], %var_3095: Tensor[(2640), uint32]) -> (Tensor[(6, 14, 3), uint32], Tensor[(14, 4, 16), float32], Tensor[(896), float32], Tensor[(16), uint8], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64]) {
    %305 = cast(meta[relay.Constant][15] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %306 = cast(%var_3041, dtype="uint32") /* ty=Tensor[(6, 14, 3), uint32] */;
    %307 = cast(meta[relay.Constant][16] /* ty=Tensor[(896), float32] */, dtype="float32") /* ty=Tensor[(896), float32] */;
    %308 = reshape(%307, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float32] */;
    %309 = cast(%var_3095, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %310 = reshape(%309, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
    %311 = @func_2776(%310) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
    %312 = cast(meta[relay.Constant][17] /* ty=Tensor[(16), uint8] */, dtype="uint8") /* ty=Tensor[(16), uint8] */;
    %313 = cast(meta[relay.Constant][18] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
    %314 = reshape(%312, newshape=[4, 1, 4]) /* ty=Tensor[(4, 1, 4), uint8] */;
    %315 = reshape(%313, newshape=[507]) /* ty=Tensor[(507), float32] */;
    %316 = @func_1583(%314, %315) /* ty=(Tensor[(4, 1, 4), uint8], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16], Tensor[(11, 16, 15), uint32], Tensor[(507), float32]) */;
    %317 = %316.2;
    %318 = cast(%317, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %319 = bitwise_or(%305, %306) /* ty=Tensor[(6, 14, 3), uint32] */;
    %320 = @func_873(%308) /* ty=Tensor[(14, 4, 16), float32] */;
    %321 = %311.2;
    %322 = log(%318) /* ty=Tensor[(14, 4, 16), float64] */;
    (%319, %320, meta[relay.Constant][16] /* ty=Tensor[(896), float32] */, meta[relay.Constant][17] /* ty=Tensor[(16), uint8] */, meta[relay.Constant][18] /* ty=Tensor[(507), float32] */, %321, %var_3095, %322)
  };
  %323(%var_3106, %var_3107) /* ty=(Tensor[(6, 14, 3), uint32], Tensor[(14, 4, 16), float32], Tensor[(896), float32], Tensor[(16), uint8], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64]) */
}

def @func_1213() -> (Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %334 = fn () -> (Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
    %324 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %325 = %324.0;
    %326 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 4, 16), float64] */, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
    %328 = cast(%325, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %330 = cast(meta[relay.Constant][19] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %331 = logical_or(%328, %329) /* ty=Tensor[(14, 4, 16), bool] */;
    %332 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
    %333 = asinh(%330) /* ty=Tensor[(14, 4, 16), float64] */;
    (%331, %332, %333)
  };
  %334() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_4934(%var_4933: Tensor[(6, 2, 9), float64]) -> (Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) {
  %343 = fn (%var_4893: Tensor[(6, 2, 9), float64]) -> (Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) {
    %335 = cast(%var_4893, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
    %336 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(6, 2, 9), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %337 = cast(meta[relay.Constant][20] /* ty=Tensor[(6, 2, 9), float64] */, dtype="float64") /* ty=Tensor[(6, 2, 9), float64] */;
    %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %339 = cast(%var_4893, dtype="float32") /* ty=Tensor[(6, 2, 9), float32] */;
    %340 = floor_mod(%337, %338) /* ty=Tensor[(6, 2, 9), float64] */;
    %341 = asin(%339) /* ty=Tensor[(6, 2, 9), float32] */;
    %342 = @func_4327() /* ty=Tensor[(14, 4, 16), float64] */;
    (%340, %341, %342)
  };
  %343(%var_4933) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) */
}

def @func_250() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %344 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %345 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %346 = %344.0;
  %347 = %345.0;
  %348 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%346, %347, %348)
}

def @func_5122() -> Tensor[(2640), float64] {
  %352 = fn () -> Tensor[(2640), float64] {
    %349 = @func_1442() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), float32], Tensor[(45), float64], Tensor[(2640), uint32]) */;
    %350 = %349.4;
    %351 = cast(%350, dtype="float64") /* ty=Tensor[(2640), float64] */;
    log2(%351) /* ty=Tensor[(2640), float64] */
  };
  %352() /* ty=Tensor[(2640), float64] */
}

def @func_2776(%var_2769: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  %353 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %354 = %353.1;
  %355 = cast(%354, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %356 = reshape(%355, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %357 = @func_2051(%356) /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) */;
  %358 = cast(%var_2769, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %359 = reshape(%358, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %360 = @func_1935(%359) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(2640), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32]) */;
  %361 = %357.0;
  %362 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %363 = %360.4;
  (%354, %361, %362, %363, %var_2769)
}

def @func_6674() -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float32]) {
  %370 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float32]) {
    %364 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %365 = @func_2817() /* ty=(Tensor[(11, 16, 15), float64],) */;
    %366 = %365.0;
    %367 = cast(%366, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
    %368 = %364.0;
    %369 = sigmoid(%367) /* ty=Tensor[(11, 16, 15), float32] */;
    (%368, %369)
  };
  %370() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float32]) */
}

def @func_2089() -> Tensor[(11, 16, 15), float64] {
  @func_2087() /* ty=Tensor[(11, 16, 15), float64] */
}

def @func_1291() -> (Tensor[(14, 4, 16), float64],) {
  %371 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%371,)
}

def @func_2563(%var_2561: Tensor[(14, 4, 16), float64], %var_2562: Tensor[(11, 16, 15), float64]) -> (Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) {
  @func_2559(%var_2561, %var_2562) /* ty=(Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) */
}

def @func_175() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %375 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
    %372 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %373 = %372.0;
    %374 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
    (%373, %374)
  };
  %375() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_791(%var_743: Tensor[(9, 1, 5), float64], %var_756: Tensor[(660, 4), uint32]) -> (Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) {
  %376 = cast(%var_743, dtype="float64") /* ty=Tensor[(9, 1, 5), float64] */;
  %377 = erf(%376) /* ty=Tensor[(9, 1, 5), float64] */;
  %378 = cast(%var_743, dtype="uint32") /* ty=Tensor[(9, 1, 5), uint32] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="uint32") /* ty=Tensor[(9, 1, 5), uint32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %382 = cast(%var_756, dtype="uint32") /* ty=Tensor[(660, 4), uint32] */;
  %383 = cast(%var_756, dtype="uint32") /* ty=Tensor[(660, 4), uint32] */;
  %384 = reshape(%382, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %385 = reshape(%383, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %386 = @func_113(%384, %385) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %387 = %386.0;
  %388 = cast(%387, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %389 = cast(%387, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %390 = reshape(%388, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %391 = reshape(%389, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %392 = @func_113(%390, %391) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %393 = %392.0;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %395 = left_shift(%380, %381) /* ty=Tensor[(9, ?, 5), uint32] */;
  %396 = exp(%394) /* ty=Tensor[(11, 16, 15), float32] */;
  (%395, %387, %var_756, %396)
}

def @func_2159(%var_2158: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool]) {
  %406 = fn (%var_2139: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool]) {
    %397 = @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %398 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %399 = %398.0;
    %400 = cast(%var_2139, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %401 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
    %402 = cast(%399, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %404 = %397.1;
    %405 = less_equal(%402, %403) /* ty=Tensor[(14, 4, 16), bool] */;
    (%404, %405)
  };
  %406(%var_2158) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool]) */
}

def @func_3913() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) {
  %410 = fn () -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) {
    %407 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
    %408 = %407.0;
    %409 = @func_1819() /* ty=Tensor[(14, 4, 16), float64] */;
    (%408, %409)
  };
  %410() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_4824() -> Tensor[(14, 4, 16), float64] {
  @func_4822() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_3998() -> (Tensor[(14, 4, 16), float64],) {
  %411 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %412 = %411.0;
  (%412,)
}

def @func_4099() -> Tensor[(14, 4, 16), float64] {
  @func_4097() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4399(%var_4397: Tensor[(2640), int32]) -> (Tensor[(2640), int8], Tensor[(11, 16, 15), uint32], Tensor[(2640), float32]) {
  @func_4396(%var_4397) /* ty=(Tensor[(2640), int8], Tensor[(11, 16, 15), uint32], Tensor[(2640), float32]) */
}

def @func_117(%var_115: Tensor[(11, 16, 15), uint32], %var_116: Tensor[(11, 16, 15), uint32]) -> (Tensor[(11, 16, 15), uint32],) {
  @func_113(%var_115, %var_116) /* ty=(Tensor[(11, 16, 15), uint32],) */
}

def @func_17() -> Tensor[(14, 4, 16), float64] {
  %413 = cast(meta[relay.Constant][22] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %414 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(14, 4, 16), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %415 = cast(meta[relay.Constant][21] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %416 = dyn.reshape(%413, %414, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%415, %416) /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_1230() -> (Tensor[(14, 4, 16), float64],) {
  %417 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %418 = %417.1;
  (%418,)
}

def @func_1699(%var_1697: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  @func_1696(%var_1697) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */
}

def @func_1696(%var_1691: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  %419 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %420 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %421 = cast(%var_1691, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %422 = reshape(%420, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %423 = reshape(%421, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %424 = @func_113(%422, %423) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %425 = %419.0;
  %426 = %424.0;
  (%425, %426, %var_1691)
}

def @func_3431(%var_3429: Tensor[(45), float64]) -> (Tensor[(11, 16, 15), float64], Tensor[(660, 4), uint32], Tensor[(45), float64]) {
  @func_3428(%var_3429) /* ty=(Tensor[(11, 16, 15), float64], Tensor[(660, 4), uint32], Tensor[(45), float64]) */
}

def @func_4179() -> Tensor[(14, 4, 16), float64] {
  %428 = fn () -> Tensor[(14, 4, 16), float64] {
    %427 = @func_1684() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %427.0
  };
  %428() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_5322() -> (Tensor[(14, 4, 16), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64]) {
  %435 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64]) {
    %429 = @func_3912() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
    %430 = cast(meta[relay.Constant][23] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %431 = reshape(%430, newshape=[6, 2, 9]) /* ty=Tensor[(6, 2, 9), float64] */;
    %432 = @func_4932(%431) /* ty=(Tensor[(6, 2, 9), float64], Tensor[(6, 2, 9), float32], Tensor[(14, 4, 16), float64]) */;
    %433 = %429.1;
    %434 = %432.1;
    (%433, %434, meta[relay.Constant][23] /* ty=Tensor[(108), float64] */)
  };
  %435() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(6, 2, 9), float32], Tensor[(108), float64]) */
}

def @func_3397() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float32]) {
  %445 = fn () -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float32]) {
    %436 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
    %437 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %438 = %437.0;
    %439 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 4, 16), float64] */, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
    %441 = cast(%438, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %443 = %436.2;
    %444 = minimum(%441, %442) /* ty=Tensor[(14, 4, 16), float32] */;
    (%443, %444)
  };
  %445() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float32]) */
}

def @func_6806() -> Tensor[(14, 4, 16), float32] {
  @func_6804() /* ty=Tensor[(14, 4, 16), float32] */
}

def @func_5294() -> (Tensor[(14, 4, 16), int16], Tensor[(14, 4, 16), uint16]) {
  %446 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
  %447 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %449 = atanh(%448) /* ty=Tensor[(14, 4, 16), float64] */;
  %450 = cast(%449, dtype="uint16") /* ty=Tensor[(14, 4, 16), uint16] */;
  %451 = shape_of(%447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%447, dtype="uint16") /* ty=Tensor[(14, 4, 16), uint16] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %454 = %446.1;
  %455 = bitwise_and(%452, %453) /* ty=Tensor[(14, 4, 16), uint16] */;
  (%454, %455)
}

def @func_4195() -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(2640), int32]) {
  %466 = fn () -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(2640), int32]) {
    %456 = @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %457 = cast(meta[relay.Constant][25] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %458 = cast(meta[relay.Constant][25] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %459 = reshape(%457, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
    %460 = reshape(%458, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
    %461 = @func_113(%459, %460) /* ty=(Tensor[(11, 16, 15), uint32],) */;
    %462 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
    %463 = %456.0;
    %464 = %461.0;
    %465 = @func_605() /* ty=Tensor[(2640), int32] */;
    (%462, %463, %464, meta[relay.Constant][25] /* ty=Tensor[(2640), uint32] */, %465)
  };
  %466() /* ty=(Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(2640), int32]) */
}

def @func_2817() -> (Tensor[(11, 16, 15), float64],) {
  %467 = @func_2087() /* ty=Tensor[(11, 16, 15), float64] */;
  (%467,)
}

def @func_3974(%var_3972: Tensor[(2, 15, 13), int64]) -> Tensor[(2, 15, 13), int64] {
  @func_3971(%var_3972) /* ty=Tensor[(2, 15, 13), int64] */
}

def @func_6538() -> (Tensor[(14, 4, 16), float32],) {
  %470 = fn () -> (Tensor[(14, 4, 16), float32],) {
    %468 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
    %469 = %468.0;
    (%469,)
  };
  %470() /* ty=(Tensor[(14, 4, 16), float32],) */
}

def @func_1716() -> (Tensor[(14, 4, 16), float32],) {
  %475 = fn () -> (Tensor[(14, 4, 16), float32],) {
    %471 = @func_1212() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %472 = %471.2;
    %473 = cast(%472, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    %474 = acos(%473) /* ty=Tensor[(14, 4, 16), float32] */;
    (%474,)
  };
  %475() /* ty=(Tensor[(14, 4, 16), float32],) */
}

def @func_210(%var_209: float64) -> (Tensor[(13, 7, 15), bool],) {
  %479 = fn (%var_198: float64) -> (Tensor[(13, 7, 15), bool],) {
    %476 = cast(%var_198, dtype="bool") /* ty=bool */;
    %477 = cast(meta[relay.Constant][26] /* ty=Tensor[(13, 7, 15), float64] */, dtype="bool") /* ty=Tensor[(13, 7, 15), bool] */;
    %478 = less(%476, %477) /* ty=Tensor[(13, 7, 15), bool] */;
    (%478,)
  };
  %479(%var_209) /* ty=(Tensor[(13, 7, 15), bool],) */
}

def @func_1729() -> (Tensor[(14, 4, 16), float32],) {
  %482 = fn () -> (Tensor[(14, 4, 16), float32],) {
    %480 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
    %481 = %480.0;
    (%481,)
  };
  %482() /* ty=(Tensor[(14, 4, 16), float32],) */
}

def @func_818() -> Tensor[(11, 16, 15), int32] {
  %484 = fn () -> Tensor[(11, 16, 15), int32] {
    %483 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
    %483.0
  };
  %484() /* ty=Tensor[(11, 16, 15), int32] */
}

def @func_19() -> Tensor[(14, 4, 16), float64] {
  @func_17() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_3722(%var_3688: Tensor[(11, 16, 15), float32]) -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) {
  %485 = @func_2216() /* ty=Tensor[(11, 16, 15), float64] */;
  %486 = cast(%485, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %487 = sin(%486) /* ty=Tensor[(11, 16, 15), float32] */;
  %488 = cast(%var_3688, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %492 = cast(%var_3688, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %493 = cast(%var_3688, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %494 = reshape(%492, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %495 = reshape(%493, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %496 = @func_113(%494, %495) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %497 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %498 = cast(meta[relay.Constant][27] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %499 = reshape(%497, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %500 = reshape(%498, newshape=[6, 14, 4]) /* ty=Tensor[(6, 14, 4), float64] */;
  %501 = floor_mod(%490, %491) /* ty=Tensor[(11, 16, 15), float64] */;
  %502 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
  %503 = %496.0;
  %504 = @func_2334(%499, %500) /* ty=Tensor[(6, 14, 4), float64] */;
  (%501, %502, %503, %504, meta[relay.Constant][27] /* ty=Tensor[(336), float64] */)
}

def @func_1906() -> Tensor[(14, 4, 16), float64] {
  %505 = fn () -> Tensor[(14, 4, 16), float64] {
    @func_844() /* ty=Tensor[(14, 4, 16), float64] */
  };
  %505() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_252() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_742() -> (Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) {
  @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */
}

def @func_3170(%var_3169: Tensor[(8, 14, 3), int64]) -> (Tensor[(8, 14, 3), bool],) {
  %511 = fn (%var_3163: Tensor[(8, 14, 3), int64]) -> (Tensor[(8, 14, 3), bool],) {
    %506 = cast(%var_3163, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
    %507 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(8, 14, 3), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 14, 3), int64] */, dtype="bool") /* ty=Tensor[(8, 14, 3), bool] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %510 = not_equal(%508, %509) /* ty=Tensor[(8, 14, 3), bool] */;
    (%510,)
  };
  %511(%var_3169) /* ty=(Tensor[(8, 14, 3), bool],) */
}

def @func_2334(%var_2312: Tensor[(6, 14, 4), float64], %var_2313: Tensor[(6, 14, 4), float64]) -> Tensor[(6, 14, 4), float64] {
  %512 = cast(%var_2313, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
  %513 = shape_of(%var_2312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%var_2312, dtype="float64") /* ty=Tensor[(6, 14, 4), float64] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%514, %515) /* ty=Tensor[(6, 14, 4), float64] */
}

def @func_2819() -> (Tensor[(11, 16, 15), float64],) {
  @func_2817() /* ty=(Tensor[(11, 16, 15), float64],) */
}

def @func_2845(%var_2842: Tensor[(15, 14, 3), uint32], %var_2843: Tensor[(15, 14, 3), uint32], %var_2844: Tensor[(308), int8]) -> (Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) {
  %529 = fn (%var_2823: Tensor[(15, 14, 3), uint32], %var_2824: Tensor[(15, 14, 3), uint32], %var_2837: Tensor[(308), int8]) -> (Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) {
    %516 = cast(%var_2824, dtype="bool") /* ty=Tensor[(15, 14, 3), bool] */;
    %517 = shape_of(%var_2823, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%var_2823, dtype="bool") /* ty=Tensor[(15, 14, 3), bool] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %520 = @func_2682() /* ty=(Tensor[(14, 4, 16), int16],) */;
    %521 = cast(%var_2837, dtype="int8") /* ty=Tensor[(308), int8] */;
    %522 = cast(%var_2837, dtype="int8") /* ty=Tensor[(308), int8] */;
    %523 = reshape(%521, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
    %524 = reshape(%522, newshape=[2, 14, 11]) /* ty=Tensor[(2, 14, 11), int8] */;
    %525 = @func_2707(%523, %524) /* ty=(Tensor[(2, 14, 11), bool],) */;
    %526 = greater(%518, %519) /* ty=Tensor[(15, 14, 3), bool] */;
    %527 = %520.0;
    %528 = %525.0;
    (%526, %527, %528, %var_2837)
  };
  %529(%var_2842, %var_2843, %var_2844) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */
}

def @func_3326(%var_3324: uint8, %var_3325: Tensor[(9, 9, 6), uint8]) -> (Tensor[(9, 9, 6), uint8], Tensor[(14, 4, 16), float64]) {
  @func_3322(%var_3324, %var_3325) /* ty=(Tensor[(9, 9, 6), uint8], Tensor[(14, 4, 16), float64]) */
}

def @func_3253(%var_3252: Tensor[(45), float64]) -> (Tensor[(11, 16, 15), float64], Tensor[(2640), uint32], Tensor[(45), float64]) {
  %538 = fn (%var_3247: Tensor[(45), float64]) -> (Tensor[(11, 16, 15), float64], Tensor[(2640), uint32], Tensor[(45), float64]) {
    %530 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
    %531 = cast(%var_3247, dtype="float64") /* ty=Tensor[(45), float64] */;
    %532 = %530.0;
    %533 = cast(%532, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
    %534 = reshape(%531, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %535 = reshape(%533, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
    %536 = @func_978(%534, %535) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
    %537 = %536.3;
    (%532, %537, %var_3247)
  };
  %538(%var_3252) /* ty=(Tensor[(11, 16, 15), float64], Tensor[(2640), uint32], Tensor[(45), float64]) */
}

def @func_3971(%var_3960: Tensor[(2, 15, 13), int64]) -> Tensor[(2, 15, 13), int64] {
  %539 = cast(%var_3960, dtype="int64") /* ty=Tensor[(2, 15, 13), int64] */;
  %540 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(2, 15, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 15, 13), int64] */, dtype="int64") /* ty=Tensor[(2, 15, 13), int64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%541, %542) /* ty=Tensor[(2, 15, 13), int64] */
}

def @func_1272(%var_1271: Tensor[(13, 13, 3), float32]) -> (Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  %556 = fn (%var_1236: Tensor[(13, 13, 3), float32]) -> (Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
    %543 = cast(%var_1236, dtype="float32") /* ty=Tensor[(13, 13, 3), float32] */;
    %544 = erf(%543) /* ty=Tensor[(13, 13, 3), float32] */;
    %545 = cast(%var_1236, dtype="uint32") /* ty=Tensor[(13, 13, 3), uint32] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="uint32") /* ty=Tensor[(13, 13, 3), uint32] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %549 = cast(meta[relay.Constant][30] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %550 = cast(meta[relay.Constant][30] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %551 = reshape(%549, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
    %552 = reshape(%550, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
    %553 = @func_113(%551, %552) /* ty=(Tensor[(11, 16, 15), uint32],) */;
    %554 = logical_xor(%547, %548) /* ty=Tensor[(13, 13, 3), uint32] */;
    %555 = %553.0;
    (%554, %555, meta[relay.Constant][30] /* ty=Tensor[(2640), uint32] */)
  };
  %556(%var_1271) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */
}

def @func_5156() -> (Tensor[(14, 4, 16), float64],) {
  %557 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %558 = %557.0;
  (%558,)
}

def @func_6146(%var_6145: Tensor[(16, 11, 7), float64]) -> (Tensor[(16, 11, 7), float64], Tensor[(2640), int32]) {
  %562 = fn (%var_6137: Tensor[(16, 11, 7), float64]) -> (Tensor[(16, 11, 7), float64], Tensor[(2640), int32]) {
    %559 = cast(%var_6137, dtype="float64") /* ty=Tensor[(16, 11, 7), float64] */;
    %560 = sigmoid(%559) /* ty=Tensor[(16, 11, 7), float64] */;
    %561 = @func_605() /* ty=Tensor[(2640), int32] */;
    (%560, %561)
  };
  %562(%var_6145) /* ty=(Tensor[(16, 11, 7), float64], Tensor[(2640), int32]) */
}

def @func_6928() -> Tensor[(14, 4, 16), float64] {
  %564 = fn () -> Tensor[(14, 4, 16), float64] {
    %563 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
    %563.0
  };
  %564() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_6880() -> (Tensor[(14, 4, 16), float64],) {
  %567 = fn () -> (Tensor[(14, 4, 16), float64],) {
    %565 = @func_5167() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
    %566 = %565.0;
    (%566,)
  };
  %567() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_5988() -> (Tensor[(11, 16, 15), float64],) {
  %568 = @func_3643() /* ty=Tensor[(11, 16, 15), float64] */;
  (%568,)
}

def @func_6302(%var_6299: Tensor[(126, 1), float64], %var_6300: Tensor[(630), uint32], %var_6301: Tensor[(7, 44), int8]) -> (Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) {
  @func_6297(%var_6299, %var_6300, %var_6301) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) */
}

def @func_4000() -> (Tensor[(14, 4, 16), float64],) {
  @func_3998() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_5802(%var_5769: Tensor[(8, 5, 3), float32]) -> (Tensor[(14, 4, 16), float64], Tensor[(8, 5, 3), float64], Tensor[(8, 5, 3), float64]) {
  %569 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %570 = cast(%var_5769, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %571 = log2(%570) /* ty=Tensor[(8, 5, 3), float32] */;
  %572 = cast(%571, dtype="float32") /* ty=Tensor[(8, 5, 3), float32] */;
  %573 = sqrt(%572) /* ty=Tensor[(8, 5, 3), float32] */;
  %574 = cast(%573, dtype="float64") /* ty=Tensor[(8, 5, 3), float64] */;
  %575 = cast(%573, dtype="float64") /* ty=Tensor[(8, 5, 3), float64] */;
  %576 = %569.0;
  %577 = atanh(%574) /* ty=Tensor[(8, 5, 3), float64] */;
  %578 = cosh(%575) /* ty=Tensor[(8, 5, 3), float64] */;
  (%576, %577, %578)
}

def @func_605() -> Tensor[(2640), int32] {
  %579 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
  %579.1
}

def @func_5463(%var_5462: Tensor[(2640), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int64], Tensor[(2640), float32]) {
  %598 = fn (%var_5449: Tensor[(2640), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int64], Tensor[(2640), float32]) {
    %580 = @func_3998() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %581 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %582 = @func_5156() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %583 = %582.0;
    %584 = cast(%583, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %585 = cast(meta[relay.Constant][31] /* ty=Tensor[(2640), float64] */, dtype="float64") /* ty=Tensor[(2640), float64] */;
    %586 = reshape(%584, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
    %587 = reshape(%585, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
    %588 = @func_2559(%586, %587) /* ty=(Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) */;
    %589 = cast(%var_5449, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %590 = shape_of(meta[relay.Constant][31] /* ty=Tensor[(2640), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %591 = cast(meta[relay.Constant][31] /* ty=Tensor[(2640), float64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?), float32] */;
    %593 = %580.0;
    %594 = %581.0;
    %595 = @func_4602() /* ty=Tensor[(14, 4, 16), float64] */;
    %596 = %588.0;
    %597 = floor_divide(%591, %592) /* ty=Tensor[(2640), float32] */;
    (%593, %594, %583, %595, %596, %597)
  };
  %598(%var_5462) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int64], Tensor[(2640), float32]) */
}

def @func_460() -> (Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) {
  %599 = cast(meta[relay.Constant][32] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %600 = cast(meta[relay.Constant][32] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %601 = reshape(%599, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %602 = reshape(%600, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %603 = @func_113(%601, %602) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %604 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %605 = %604.1;
  %606 = cast(%605, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %607 = sqrt(%606) /* ty=Tensor[(14, 4, 16), float32] */;
  %608 = @func_174() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %609 = %608.1;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %611 = sigmoid(%610) /* ty=Tensor[(14, 4, 16), float32] */;
  %612 = cast(%611, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %613 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %614 = cast(%607, dtype="uint32") /* ty=Tensor[(14, 4, 16), uint32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %616 = cast(meta[relay.Constant][32] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %617 = %603.0;
  %618 = cast(%617, dtype="uint32") /* ty=Tensor[(11, 16, 15), uint32] */;
  %619 = reshape(%616, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %620 = reshape(%618, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), uint32] */;
  %621 = @func_113(%619, %620) /* ty=(Tensor[(11, 16, 15), uint32],) */;
  %622 = @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %623 = %622.0;
  %624 = cast(%623, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
  %625 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  %626 = subtract(%614, %615) /* ty=Tensor[(14, 4, 16), uint32] */;
  %627 = %621.0;
  %628 = log2(%624) /* ty=Tensor[(14, 4, 16), float32] */;
  (%617, meta[relay.Constant][32] /* ty=Tensor[(2640), uint32] */, %625, %626, %627, %628)
}

def @func_1938(%var_1936: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(2640), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32]) {
  @func_1935(%var_1936) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(2640), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32]) */
}

def @func_7050(%var_7047: Tensor[(5, 9), float64], %var_7048: Tensor[(126), float64], %var_7049: Tensor[(630, 1), uint32]) -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(5, 9), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630, 1), uint32], Tensor[(308), int8]) {
  %648 = fn (%var_7026: Tensor[(5, 9), float64], %var_7037: Tensor[(126), float64], %var_7038: Tensor[(630, 1), uint32]) -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(5, 9), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630, 1), uint32], Tensor[(308), int8]) {
    %629 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
    %630 = cast(%var_7026, dtype="float64") /* ty=Tensor[(5, 9), float64] */;
    %631 = cast(meta[relay.Constant][33] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %632 = reshape(%630, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %633 = reshape(%631, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
    %634 = @func_978(%632, %633) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
    %635 = @func_3912() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
    %636 = cast(%var_7037, dtype="float64") /* ty=Tensor[(126), float64] */;
    %637 = cast(%var_7038, dtype="uint32") /* ty=Tensor[(630, 1), uint32] */;
    %638 = cast(meta[relay.Constant][34] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
    %639 = reshape(%636, newshape=[126, 1]) /* ty=Tensor[(126, 1), float64] */;
    %640 = reshape(%637, newshape=[630]) /* ty=Tensor[(630), uint32] */;
    %641 = reshape(%638, newshape=[7, 44]) /* ty=Tensor[(7, 44), int8] */;
    %642 = @func_6297(%639, %640, %641) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) */;
    %643 = %629.0;
    %644 = @func_4292() /* ty=Tensor[(14, 4, 16), float64] */;
    %645 = %634.3;
    %646 = %635.1;
    %647 = %642.1;
    (%643, %644, %645, %var_7026, meta[relay.Constant][33] /* ty=Tensor[(2640), uint32] */, %646, %647, %var_7037, %var_7038, meta[relay.Constant][34] /* ty=Tensor[(308), int8] */)
  };
  %648(%var_7047, %var_7048, %var_7049) /* ty=(Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), uint32], Tensor[(5, 9), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630, 1), uint32], Tensor[(308), int8]) */
}

def @func_2610() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), int32]) {
  %652 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(2640), int32]) {
    %649 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
    %650 = @func_1905() /* ty=Tensor[(14, 4, 16), float64] */;
    %651 = %649.1;
    (%650, %651)
  };
  %652() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32]) */
}

def @func_5019() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float32]) {
  %653 = @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %654 = %653.1;
  %655 = cast(%654, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  %656 = reshape(%655, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %657 = @func_2051(%656) /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) */;
  %658 = @func_2817() /* ty=(Tensor[(11, 16, 15), float64],) */;
  %659 = %658.0;
  %660 = cast(%659, dtype="float32") /* ty=Tensor[(11, 16, 15), float32] */;
  %661 = %657.2;
  %662 = erf(%660) /* ty=Tensor[(11, 16, 15), float32] */;
  (%654, %661, %662)
}

def @func_607() -> Tensor[(2640), int32] {
  @func_605() /* ty=Tensor[(2640), int32] */
}

def @func_3022(%var_3020: Tensor[(8, 10, 5), float32]) -> Tensor[(8, 10, 5), float32] {
  @func_3019(%var_3020) /* ty=Tensor[(8, 10, 5), float32] */
}

def @func_701() -> (Tensor[(14, 4, 16), float64],) {
  %663 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
  (%663,)
}

def @func_978(%var_947: Tensor[(45), float64], %var_948: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) {
  %664 = @func_701() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %665 = cast(%var_947, dtype="float64") /* ty=Tensor[(45), float64] */;
  %666 = cast(%var_948, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %667 = reshape(%665, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %668 = reshape(%666, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %669 = @func_791(%667, %668) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %670 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
  %671 = %670.0;
  %672 = cast(%671, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %673 = %664.0;
  %674 = %669.1;
  %675 = @func_844() /* ty=Tensor[(14, 4, 16), float64] */;
  %676 = atanh(%672) /* ty=Tensor[(11, 16, 15), float64] */;
  (%673, %674, %var_947, %var_948, %675, %676)
}

def @func_1293() -> (Tensor[(14, 4, 16), float64],) {
  @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_2087() -> Tensor[(11, 16, 15), float64] {
  %677 = @func_1630() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64]) */;
  %677.0
}

def @func_1876() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  @func_1874() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_6228() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  @func_6226() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_5990() -> (Tensor[(11, 16, 15), float64],) {
  @func_5988() /* ty=(Tensor[(11, 16, 15), float64],) */
}

def @func_4097() -> Tensor[(14, 4, 16), float64] {
  %678 = @func_3998() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %679 = %678.0;
  %680 = cast(%679, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
  cosh(%680) /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_4603() -> Tensor[(14, 4, 16), float64] {
  %682 = fn () -> Tensor[(14, 4, 16), float64] {
    %681 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %681.0
  };
  %682() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_5506(%var_5504: Tensor[(3, 9, 16), int16], %var_5505: Tensor[(3, 9, 16), int16]) -> (Tensor[(3, 9, 16), bool],) {
  %688 = fn (%var_5486: Tensor[(3, 9, 16), int16], %var_5487: Tensor[(3, 9, 16), int16]) -> (Tensor[(3, 9, 16), bool],) {
    %683 = cast(%var_5487, dtype="bool") /* ty=Tensor[(3, 9, 16), bool] */;
    %684 = shape_of(%var_5486, dtype="int32") /* ty=Tensor[(3), int32] */;
    %685 = cast(%var_5486, dtype="bool") /* ty=Tensor[(3, 9, 16), bool] */;
    %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %687 = equal(%685, %686) /* ty=Tensor[(3, 9, 16), bool] */;
    (%687,)
  };
  %688(%var_5504, %var_5505) /* ty=(Tensor[(3, 9, 16), bool],) */
}

def @func_6065(%var_6064: Tensor[(132, 20), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(2, 15, 13), int64], Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(132, 20), uint32], Tensor[(14, 4, 16), float64], Tensor[(390), float32], Tensor[(14, 4, 16), float64]) {
  %703 = fn (%var_6027: Tensor[(132, 20), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(2, 15, 13), int64], Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(132, 20), uint32], Tensor[(14, 4, 16), float64], Tensor[(390), float32], Tensor[(14, 4, 16), float64]) {
    %689 = cast(meta[relay.Constant][35] /* ty=Tensor[(390), int64] */, dtype="int64") /* ty=Tensor[(390), int64] */;
    %690 = reshape(%689, newshape=[2, 15, 13]) /* ty=Tensor[(2, 15, 13), int64] */;
    %691 = cast(meta[relay.Constant][36] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %692 = cast(%var_6027, dtype="uint32") /* ty=Tensor[(132, 20), uint32] */;
    %693 = reshape(%691, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %694 = reshape(%692, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
    %695 = @func_978(%693, %694) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
    %696 = cast(meta[relay.Constant][35] /* ty=Tensor[(390), int64] */, dtype="float32") /* ty=Tensor[(390), float32] */;
    %697 = @func_4327() /* ty=Tensor[(14, 4, 16), float64] */;
    %698 = @func_3971(%690) /* ty=Tensor[(2, 15, 13), int64] */;
    %699 = %695.0;
    %700 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
    %701 = cosh(%696) /* ty=Tensor[(390), float32] */;
    %702 = @func_1819() /* ty=Tensor[(14, 4, 16), float64] */;
    (%697, %698, %699, meta[relay.Constant][36] /* ty=Tensor[(45), float64] */, %var_6027, %700, %701, %702)
  };
  %703(%var_6064) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2, 15, 13), int64], Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(132, 20), uint32], Tensor[(14, 4, 16), float64], Tensor[(390), float32], Tensor[(14, 4, 16), float64]) */
}

def @func_6106() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32]) {
  %707 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32]) {
    %704 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
    %705 = %704.0;
    %706 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
    (%705, %706)
  };
  %707() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32]) */
}

def @func_1684() -> (Tensor[(14, 4, 16), float64],) {
  %708 = @func_1230() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %709 = %708.0;
  (%709,)
}

def @func_2940() -> (Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %720 = fn () -> (Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
    %710 = cast(-9.57623f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %711 = reshape(%710, newshape=[]) /* ty=float64 */;
    %712 = @func_208(%711) /* ty=(Tensor[(13, 7, 15), bool],) */;
    %713 = @func_1454() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), int16]) */;
    %714 = %713.0;
    %715 = cast(%714, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %716 = @func_817() /* ty=Tensor[(11, 16, 15), int32] */;
    %717 = %712.0;
    %718 = tan(%715) /* ty=Tensor[(14, 4, 16), float64] */;
    %719 = @func_17() /* ty=Tensor[(14, 4, 16), float64] */;
    (%716, %717, -9.57623f64 /* ty=float64 */, %718, %719)
  };
  %720() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_4445(%var_4443: Tensor[(45), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(45), float64], Tensor[(2640), uint32]) {
  @func_4442(%var_4443) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(45), float64], Tensor[(2640), uint32]) */
}

def @func_4327() -> Tensor[(14, 4, 16), float64] {
  @func_1599() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_926() -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) {
  %731 = fn () -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) {
    %721 = @func_740() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) */;
    %722 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
    %723 = cast(%722, dtype="float32") /* ty=Tensor[(14, 4, 16), float32] */;
    %724 = log10(%723) /* ty=Tensor[(14, 4, 16), float32] */;
    %725 = cast(meta[relay.Constant][37] /* ty=Tensor[(14, 4, 16), float32] */, dtype="int16") /* ty=Tensor[(14, 4, 16), int16] */;
    %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
    %727 = cast(%724, dtype="int16") /* ty=Tensor[(14, 4, 16), int16] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %729 = %721.2;
    %730 = add(%727, %728) /* ty=Tensor[(14, 4, 16), int16] */;
    (%729, %730)
  };
  %731() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */
}

def @func_73() -> (Tensor[(14, 4, 16), float64],) {
  @func_71() /* ty=(Tensor[(14, 4, 16), float64],) */
}

def @func_3805(%var_3804: Tensor[(12, 6, 3), float32]) -> Tensor[(12, 6, 3), float64] {
  %735 = fn (%var_3798: Tensor[(12, 6, 3), float32]) -> Tensor[(12, 6, 3), float64] {
    %732 = cast(%var_3798, dtype="float32") /* ty=Tensor[(12, 6, 3), float32] */;
    %733 = log2(%732) /* ty=Tensor[(12, 6, 3), float32] */;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(12, 6, 3), float64] */;
    exp(%734) /* ty=Tensor[(12, 6, 3), float64] */
  };
  %735(%var_3804) /* ty=Tensor[(12, 6, 3), float64] */
}

def @func_3780(%var_3778: Tensor[(630), uint32], %var_3779: Tensor[(308), int8]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), int16], Tensor[(630), uint32], Tensor[(308), int8]) {
  %748 = fn (%var_3758: Tensor[(630), uint32], %var_3759: Tensor[(308), int8]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), int16], Tensor[(630), uint32], Tensor[(308), int8]) {
    %736 = @func_1212() /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %737 = @func_2939() /* ty=(Tensor[(11, 16, 15), int32], Tensor[(13, 7, 15), bool], float64, Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %738 = cast(%var_3758, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %739 = cast(%var_3758, dtype="uint32") /* ty=Tensor[(630), uint32] */;
    %740 = cast(%var_3759, dtype="int8") /* ty=Tensor[(308), int8] */;
    %741 = reshape(%738, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
    %742 = reshape(%739, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
    %743 = reshape(%740, newshape=[308]) /* ty=Tensor[(308), int8] */;
    %744 = @func_2841(%741, %742, %743) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */;
    %745 = %736.2;
    %746 = %737.0;
    %747 = %744.1;
    (%745, %746, %747, %var_3758, %var_3759)
  };
  %748(%var_3778, %var_3779) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), int16], Tensor[(630), uint32], Tensor[(308), int8]) */
}

def @func_740() -> (Tensor[(11, 16, 15), int32], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float64]) {
  %749 = @func_460() /* ty=(Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), uint32], Tensor[(11, 16, 15), uint32], Tensor[(14, 4, 16), float32]) */;
  %750 = %749.4;
  %751 = cast(meta[relay.Constant][38] /* ty=Tensor[(11, 16, 15), uint32] */, dtype="int32") /* ty=Tensor[(11, 16, 15), int32] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="int32") /* ty=Tensor[(11, 16, 15), int32] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %755 = cast(%750, dtype="float64") /* ty=Tensor[(11, 16, 15), float64] */;
  %756 = bitwise_and(%753, %754) /* ty=Tensor[(11, 16, 15), int32] */;
  %757 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
  %758 = acosh(%755) /* ty=Tensor[(11, 16, 15), float64] */;
  (%756, %757, %758)
}

def @func_6297(%var_6246: Tensor[(126, 1), float64], %var_6279: Tensor[(630), uint32], %var_6280: Tensor[(7, 44), int8]) -> (Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) {
  %759 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %760 = cast(%var_6246, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %761 = cast(%var_6246, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %762 = cast(meta[relay.Constant][39] /* ty=Tensor[(507), float32] */, dtype="float32") /* ty=Tensor[(507), float32] */;
  %763 = reshape(%760, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %764 = reshape(%761, newshape=[7, 3, 6]) /* ty=Tensor[(7, 3, 6), float64] */;
  %765 = reshape(%762, newshape=[507]) /* ty=Tensor[(507), float32] */;
  %766 = @func_4884(%763, %764, %765) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(13, 13, 3), uint32], Tensor[(507), float32], Tensor[(7, 3, 6), float32], Tensor[(7, 3, 6), uint64]) */;
  %767 = cast(%var_6279, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %768 = cast(%var_6279, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %769 = cast(%var_6280, dtype="int8") /* ty=Tensor[(7, 44), int8] */;
  %770 = reshape(%767, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %771 = reshape(%768, newshape=[15, 14, 3]) /* ty=Tensor[(15, 14, 3), uint32] */;
  %772 = reshape(%769, newshape=[308]) /* ty=Tensor[(308), int8] */;
  %773 = @func_2841(%770, %771, %772) /* ty=(Tensor[(15, 14, 3), bool], Tensor[(14, 4, 16), int16], Tensor[(2, 14, 11), bool], Tensor[(308), int8]) */;
  %774 = cast(%var_6246, dtype="float64") /* ty=Tensor[(126, 1), float64] */;
  %775 = %759.0;
  %776 = %766.0;
  %777 = %773.0;
  %778 = acosh(%774) /* ty=Tensor[(126, 1), float64] */;
  (%775, %776, meta[relay.Constant][39] /* ty=Tensor[(507), float32] */, %777, %var_6279, %var_6280, %778)
}

def @func_6524(%var_6523: Tensor[(10, 6, 6), bool]) -> (Tensor[(10, 6, 6), bool], Tensor[(45), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float32]) {
  %792 = fn (%var_6499: Tensor[(10, 6, 6), bool]) -> (Tensor[(10, 6, 6), bool], Tensor[(45), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float32]) {
    %779 = cast(%var_6499, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
    %780 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(10, 6, 6), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %781 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 6, 6), bool] */, dtype="bool") /* ty=Tensor[(10, 6, 6), bool] */;
    %782 = dyn.reshape(%779, %780, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %783 = cast(meta[relay.Constant][41] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
    %784 = cast(meta[relay.Constant][42] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
    %785 = reshape(%783, newshape=[45]) /* ty=Tensor[(45), float64] */;
    %786 = reshape(%784, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
    %787 = @func_1774(%785, %786) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(660, 4), float32]) */;
    %788 = @func_1715() /* ty=(Tensor[(14, 4, 16), float32],) */;
    %789 = logical_and(%781, %782) /* ty=Tensor[(10, 6, 6), bool] */;
    %790 = %787.1;
    %791 = %788.0;
    (%789, %790, meta[relay.Constant][41] /* ty=Tensor[(45), float64] */, meta[relay.Constant][42] /* ty=Tensor[(2640), uint32] */, %791)
  };
  %792(%var_6523) /* ty=(Tensor[(10, 6, 6), bool], Tensor[(45), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float32]) */
}

def @func_7002(%var_6981: Tensor[(896), float64]) -> (Tensor[(2640), float32], Tensor[(7, 3, 6), bool], Tensor[(126), float64], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32], Tensor[(896), float64], Tensor[(2640), float32], Tensor[(14, 4, 16), float64]) {
  %793 = @func_2641() /* ty=(Tensor[(2640), int32],) */;
  %794 = %793.0;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %796 = sigmoid(%795) /* ty=Tensor[(2640), float64] */;
  %797 = cast(%796, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %798 = cast(meta[relay.Constant][43] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %799 = cast(meta[relay.Constant][44] /* ty=Tensor[(630), uint32] */, dtype="uint32") /* ty=Tensor[(630), uint32] */;
  %800 = cast(meta[relay.Constant][45] /* ty=Tensor[(308), int8] */, dtype="int8") /* ty=Tensor[(308), int8] */;
  %801 = reshape(%798, newshape=[126, 1]) /* ty=Tensor[(126, 1), float64] */;
  %802 = reshape(%799, newshape=[630]) /* ty=Tensor[(630), uint32] */;
  %803 = reshape(%800, newshape=[7, 44]) /* ty=Tensor[(7, 44), int8] */;
  %804 = @func_6297(%801, %802, %803) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(7, 3, 6), bool], Tensor[(507), float32], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(7, 44), int8], Tensor[(126, 1), float64]) */;
  %805 = cast(%var_6981, dtype="float64") /* ty=Tensor[(896), float64] */;
  %806 = cast(%794, dtype="float64") /* ty=Tensor[(2640), float64] */;
  %807 = reshape(%805, newshape=[14, 4, 16]) /* ty=Tensor[(14, 4, 16), float64] */;
  %808 = reshape(%806, newshape=[11, 16, 15]) /* ty=Tensor[(11, 16, 15), float64] */;
  %809 = @func_2559(%807, %808) /* ty=(Tensor[(14, 4, 16), int64], Tensor[(14, 4, 16), float32], Tensor[(2640), uint32], Tensor[(507), float32], Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(11, 16, 15), int16]) */;
  %810 = cast(%796, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %811 = @func_1291() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %812 = asin(%797) /* ty=Tensor[(2640), float32] */;
  %813 = %804.1;
  %814 = %809.1;
  %815 = sqrt(%810) /* ty=Tensor[(2640), float32] */;
  %816 = %811.0;
  (%812, %813, meta[relay.Constant][43] /* ty=Tensor[(126), float64] */, meta[relay.Constant][44] /* ty=Tensor[(630), uint32] */, meta[relay.Constant][45] /* ty=Tensor[(308), int8] */, %814, %var_6981, %815, %816)
}

def @func_3725(%var_3723: Tensor[(11, 16, 15), float32]) -> (Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) {
  @func_3722(%var_3723) /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(6, 14, 4), float64], Tensor[(336), float64]) */
}

def @func_6411() -> (Tensor[(14, 4, 16), float64], Tensor[(2640), uint64], Tensor[(2640), bool], Tensor[(9, 9, 6), uint8], uint8, Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(15, 3), float64], Tensor[(486), float32], Tensor[(14, 4, 16), float32]) {
  %817 = @func_5121() /* ty=Tensor[(2640), float64] */;
  %818 = @func_5121() /* ty=Tensor[(2640), float64] */;
  %819 = cast(%818, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %820 = shape_of(%817, dtype="int32") /* ty=Tensor[(1), int32] */;
  %821 = cast(%817, dtype="uint64") /* ty=Tensor[(2640), uint64] */;
  %822 = dyn.reshape(%819, %820, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %823 = cast(meta[relay.Constant][46] /* ty=Tensor[(2640), float64] */, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %824 = shape_of(%818, dtype="int32") /* ty=Tensor[(1), int32] */;
  %825 = cast(%818, dtype="float32") /* ty=Tensor[(2640), float32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?), float32] */;
  %827 = power(%825, %826) /* ty=Tensor[(2640), float32] */;
  %828 = cast(%827, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %829 = shape_of(%817, dtype="int32") /* ty=Tensor[(1), int32] */;
  %830 = cast(%817, dtype="bool") /* ty=Tensor[(2640), bool] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?), bool] */;
  %832 = cast(meta[relay.Constant][47] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %833 = cast(meta[relay.Constant][48] /* ty=Tensor[(486), uint8] */, dtype="uint8") /* ty=Tensor[(486), uint8] */;
  %834 = reshape(%832, newshape=[]) /* ty=uint8 */;
  %835 = reshape(%833, newshape=[9, 9, 6]) /* ty=Tensor[(9, 9, 6), uint8] */;
  %836 = @func_3322(%834, %835) /* ty=(Tensor[(9, 9, 6), uint8], Tensor[(14, 4, 16), float64]) */;
  %837 = @func_5156() /* ty=(Tensor[(14, 4, 16), float64],) */;
  %838 = cast(meta[relay.Constant][49] /* ty=Tensor[(15, 3), float64] */, dtype="float64") /* ty=Tensor[(15, 3), float64] */;
  %839 = reshape(%838, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %840 = @func_4442(%839) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(45), float64], Tensor[(2640), uint32]) */;
  %841 = cast(meta[relay.Constant][48] /* ty=Tensor[(486), uint8] */, dtype="float32") /* ty=Tensor[(486), float32] */;
  %842 = acos(%841) /* ty=Tensor[(486), float32] */;
  %843 = cast(%842, dtype="float32") /* ty=Tensor[(486), float32] */;
  %844 = @func_1728() /* ty=(Tensor[(14, 4, 16), float32],) */;
  %845 = @func_4292() /* ty=Tensor[(14, 4, 16), float64] */;
  %846 = subtract(%821, %822) /* ty=Tensor[(2640), uint64] */;
  %847 = greater_equal(%830, %831) /* ty=Tensor[(2640), bool] */;
  %848 = %836.0;
  %849 = %837.0;
  %850 = %840.1;
  %851 = erf(%843) /* ty=Tensor[(486), float32] */;
  %852 = %844.0;
  (%845, %846, %847, %848, meta[relay.Constant][47] /* ty=uint8 */, %849, %850, meta[relay.Constant][49] /* ty=Tensor[(15, 3), float64] */, %851, %852)
}

def @func_982(%var_980: Tensor[(45), float64], %var_981: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) {
  @func_978(%var_980, %var_981) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */
}

def @func_6717(%var_6716: float32) -> (Tensor[(10, 6, 11), bool], Tensor[(14, 4, 16), float64]) {
  %858 = fn (%var_6707: float32) -> (Tensor[(10, 6, 11), bool], Tensor[(14, 4, 16), float64]) {
    %853 = cast(%var_6707, dtype="bool") /* ty=bool */;
    %854 = cast(meta[relay.Constant][50] /* ty=Tensor[(10, 6, 11), float32] */, dtype="bool") /* ty=Tensor[(10, 6, 11), bool] */;
    %855 = @func_540() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(2640), int32], Tensor[(2640), float32]) */;
    %856 = greater_equal(%853, %854) /* ty=Tensor[(10, 6, 11), bool] */;
    %857 = %855.0;
    (%856, %857)
  };
  %858(%var_6716) /* ty=(Tensor[(10, 6, 11), bool], Tensor[(14, 4, 16), float64]) */
}

def @func_5952() -> (Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32]) {
  @func_5950() /* ty=(Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float64], Tensor[(15, 14, 3), bool], Tensor[(630), uint32], Tensor[(308), int8], Tensor[(14, 4, 16), float32]) */
}

def @func_1774(%var_1743: Tensor[(45), float64], %var_1744: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(660, 4), float32]) {
  %859 = cast(%var_1743, dtype="float64") /* ty=Tensor[(45), float64] */;
  %860 = cast(%var_1744, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %861 = reshape(%859, newshape=[9, 1, 5]) /* ty=Tensor[(9, 1, 5), float64] */;
  %862 = reshape(%860, newshape=[660, 4]) /* ty=Tensor[(660, 4), uint32] */;
  %863 = @func_791(%861, %862) /* ty=(Tensor[(9, ?, 5), uint32], Tensor[(11, 16, 15), uint32], Tensor[(660, 4), uint32], Tensor[(11, 16, 15), float32]) */;
  %864 = %863.2;
  %865 = cast(%864, dtype="float32") /* ty=Tensor[(660, 4), float32] */;
  %866 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %867 = asinh(%865) /* ty=Tensor[(660, 4), float32] */;
  (%866, %var_1743, %var_1744, %867)
}

def @func_2683() -> (Tensor[(14, 4, 16), int16],) {
  %870 = fn () -> (Tensor[(14, 4, 16), int16],) {
    %868 = @func_925() /* ty=(Tensor[(11, 16, 15), float64], Tensor[(14, 4, 16), int16]) */;
    %869 = %868.1;
    (%869,)
  };
  %870() /* ty=(Tensor[(14, 4, 16), int16],) */
}

def @func_5021() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float32]) {
  @func_5019() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float32], Tensor[(11, 16, 15), float32]) */
}

def @func_3644() -> Tensor[(11, 16, 15), float64] {
  %871 = fn () -> Tensor[(11, 16, 15), float64] {
    @func_2216() /* ty=Tensor[(11, 16, 15), float64] */
  };
  %871() /* ty=Tensor[(11, 16, 15), float64] */
}

def @func_3019(%var_3001: Tensor[(8, 10, 5), float32]) -> Tensor[(8, 10, 5), float32] {
  %872 = cast(meta[relay.Constant][51] /* ty=Tensor[(8, 10, 5), float32] */, dtype="float32") /* ty=Tensor[(8, 10, 5), float32] */;
  %873 = shape_of(%var_3001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%var_3001, dtype="float32") /* ty=Tensor[(8, 10, 5), float32] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%874, %875) /* ty=Tensor[(8, 10, 5), float32] */
}

def @func_4442(%var_4424: Tensor[(45), float64]) -> (Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64], Tensor[(45), float64], Tensor[(2640), uint32]) {
  %876 = cast(%var_4424, dtype="float64") /* ty=Tensor[(45), float64] */;
  %877 = cast(meta[relay.Constant][52] /* ty=Tensor[(2640), uint32] */, dtype="uint32") /* ty=Tensor[(2640), uint32] */;
  %878 = reshape(%876, newshape=[45]) /* ty=Tensor[(45), float64] */;
  %879 = reshape(%877, newshape=[2640]) /* ty=Tensor[(2640), uint32] */;
  %880 = @func_978(%878, %879) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(45), float64], Tensor[(2640), uint32], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), float64]) */;
  %881 = @func_1599() /* ty=Tensor[(14, 4, 16), float64] */;
  %882 = %880.5;
  (%881, %882, %var_4424, meta[relay.Constant][52] /* ty=Tensor[(2640), uint32] */)
}

def @func_6226() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %883 = @func_4586() /* ty=Tensor[(14, 4, 16), float64] */;
  %884 = @func_4292() /* ty=Tensor[(14, 4, 16), float64] */;
  (%883, %884)
}

def @func_632() -> Tensor[(14, 4, 16), float64] {
  @func_630() /* ty=Tensor[(14, 4, 16), float64] */
}

def @func_630() -> Tensor[(14, 4, 16), float64] {
  %885 = @func_348() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
  %885.0
}

def @func_2053(%var_2052: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) {
  %895 = fn (%var_2019: Tensor[(14, 4, 16), float64]) -> (Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) {
    %886 = @func_630() /* ty=Tensor[(14, 4, 16), float64] */;
    %887 = cast(%var_2019, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %888 = shape_of(%886, dtype="int32") /* ty=Tensor[(3), int32] */;
    %889 = cast(%886, dtype="bool") /* ty=Tensor[(14, 4, 16), bool] */;
    %890 = dyn.reshape(%887, %888, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %891 = @func_1728() /* ty=(Tensor[(14, 4, 16), float32],) */;
    %892 = greater(%889, %890) /* ty=Tensor[(14, 4, 16), bool] */;
    %893 = %891.0;
    %894 = @func_594() /* ty=Tensor[(14, 4, 16), float32] */;
    (%892, %893, %894)
  };
  %895(%var_2052) /* ty=(Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float32], Tensor[(14, 4, 16), float32]) */
}

def @func_4888(%var_4885: Tensor[(7, 3, 6), float64], %var_4886: Tensor[(7, 3, 6), float64], %var_4887: Tensor[(507), float32]) -> (Tensor[(7, 3, 6), bool], Tensor[(13, 13, 3), uint32], Tensor[(507), float32], Tensor[(7, 3, 6), float32], Tensor[(7, 3, 6), uint64]) {
  %919 = fn (%var_4833: Tensor[(7, 3, 6), float64], %var_4842: Tensor[(7, 3, 6), float64], %var_4861: Tensor[(507), float32]) -> (Tensor[(7, 3, 6), bool], Tensor[(13, 13, 3), uint32], Tensor[(507), float32], Tensor[(7, 3, 6), float32], Tensor[(7, 3, 6), uint64]) {
    %896 = cast(%var_4842, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
    %897 = shape_of(%var_4833, dtype="int32") /* ty=Tensor[(3), int32] */;
    %898 = cast(%var_4833, dtype="bool") /* ty=Tensor[(7, 3, 6), bool] */;
    %899 = dyn.reshape(%896, %897, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %900 = cast(%var_4861, dtype="float32") /* ty=Tensor[(507), float32] */;
    %901 = reshape(%900, newshape=[13, 13, 3]) /* ty=Tensor[(13, 13, 3), float32] */;
    %902 = @func_1270(%901) /* ty=(Tensor[(13, 13, 3), uint32], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */;
    %903 = cast(%var_4833, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %904 = acos(%903) /* ty=Tensor[(7, 3, 6), float64] */;
    %905 = cast(%var_4833, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %907 = cast(%904, dtype="float64") /* ty=Tensor[(7, 3, 6), float64] */;
    %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %909 = subtract(%907, %908) /* ty=Tensor[(7, 3, 6), float64] */;
    %910 = cast(%909, dtype="float32") /* ty=Tensor[(7, 3, 6), float32] */;
    %911 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 3, 6), float64] */, dtype="uint64") /* ty=Tensor[(7, 3, 6), uint64] */;
    %912 = shape_of(%909, dtype="int32") /* ty=Tensor[(3), int32] */;
    %913 = cast(%909, dtype="uint64") /* ty=Tensor[(7, 3, 6), uint64] */;
    %914 = dyn.reshape(%911, %912, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %915 = less(%898, %899) /* ty=Tensor[(7, 3, 6), bool] */;
    %916 = %902.0;
    %917 = log(%910) /* ty=Tensor[(7, 3, 6), float32] */;
    %918 = minimum(%913, %914) /* ty=Tensor[(7, 3, 6), uint64] */;
    (%915, %916, %var_4861, %917, %918)
  };
  %919(%var_4885, %var_4886, %var_4887) /* ty=(Tensor[(7, 3, 6), bool], Tensor[(13, 13, 3), uint32], Tensor[(507), float32], Tensor[(7, 3, 6), float32], Tensor[(7, 3, 6), uint64]) */
}

def @func_349() -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
  %926 = fn () -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) {
    %920 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %921 = @func_250() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */;
    %922 = %921.2;
    %923 = cast(%922, dtype="float64") /* ty=Tensor[(14, 4, 16), float64] */;
    %924 = %920.1;
    %925 = asin(%923) /* ty=Tensor[(14, 4, 16), float64] */;
    (%924, %925)
  };
  %926() /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), float64]) */
}

def @func_2779(%var_2777: Tensor[(2640), uint32]) -> (Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) {
  @func_2776(%var_2777) /* ty=(Tensor[(14, 4, 16), float64], Tensor[(14, 4, 16), bool], Tensor[(14, 4, 16), float64], Tensor[(11, 16, 15), uint32], Tensor[(2640), uint32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen266/build/output.py:2494: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen266/build/output.py", line 2499, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(224) tvmgen_default_fused_cast_cast_reshape_greater_equal_kernel0(signed char* __restrict__ T_greater_equal, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_greater_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

