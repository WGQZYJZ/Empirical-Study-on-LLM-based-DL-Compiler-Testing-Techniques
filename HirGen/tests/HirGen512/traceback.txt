==========mod==========
#[version = "0.0.5"]
def @func_2908(%var_2893: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(30, 2), float64], Tensor[(144), float32]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(30, 2), float64] */, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %1 = cast(%var_2893, dtype="float32") /* ty=Tensor[(144), float32] */;
  %2 = reshape(%0, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %3 = reshape(%1, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %4 = @func_1789(%2, %3) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
  %5 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %6 = %4.1;
  (%5, %6, meta[relay.Constant][0] /* ty=Tensor[(30, 2), float64] */, %var_2893)
}

def @func_1333() -> (Tensor[(3, ?, 2), float64],) {
  %7 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  (%7,)
}

def @func_5956() -> (Tensor[(3, ?, 2), float64],) {
  %8 = @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %9 = %8.0;
  (%9,)
}

def @func_7675(%var_7652: Tensor[(1920), bool], %var_7668: Tensor[(3, 16, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(1920), bool], Tensor[(3, 16, 2), float64]) {
  %10 = cast(%var_7652, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %11 = reshape(%10, newshape=[1920]) /* ty=Tensor[(1920), bool] */;
  %12 = @func_5584(%11) /* ty=(Tensor[(66), float32], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) */;
  %13 = @func_6804() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %14 = %13.0;
  %15 = cast(%14, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %16 = cast(%var_7668, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %17 = %12.1;
  %18 = mod(%15, %16) /* ty=Tensor[(3, 16, 2), float64] */;
  (%17, %var_7652, %18)
}

def @func_7924(%var_7877: Tensor[(12, 11, 13), uint64], %var_7878: Tensor[(12, 11, 13), uint64]) -> (Tensor[(12, 11, 13), bool], Tensor[(3, ?, 2), float64], Tensor[(9, 5, 15), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(8, 70), uint8]) {
  %19 = cast(%var_7878, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %20 = shape_of(%var_7877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %21 = cast(%var_7877, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %22 = dyn.reshape(%19, %20, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %23 = cast(meta[relay.Constant][1] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %24 = reshape(%23, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %25 = @func_5677(%24) /* ty=Tensor[(9, 5, 15), float32] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(675), float32] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
  %28 = cast(%25, dtype="float64") /* ty=Tensor[(9, 5, 15), float64] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %30 = cast(meta[relay.Constant][2] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %31 = cast(meta[relay.Constant][2] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 70), uint8] */, dtype="uint8") /* ty=Tensor[(8, 70), uint8] */;
  %33 = reshape(%30, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %34 = reshape(%31, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %35 = reshape(%32, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %36 = @func_1041(%33, %34, %35) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %37 = not_equal(%21, %22) /* ty=Tensor[(12, 11, 13), bool] */;
  %38 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %39 = power(%28, %29) /* ty=Tensor[(9, 5, 15), float64] */;
  %40 = %36.2;
  (%37, %38, %39, %40, meta[relay.Constant][2] /* ty=Tensor[(704), uint64] */, meta[relay.Constant][3] /* ty=Tensor[(8, 70), uint8] */)
}

def @func_7839(%var_7824: Tensor[(3, 14, 11), float32]) -> Tensor[(3, 14, 11), float64] {
  %41 = cast(%var_7824, dtype="float32") /* ty=Tensor[(3, 14, 11), float32] */;
  %42 = sqrt(%41) /* ty=Tensor[(3, 14, 11), float32] */;
  %43 = cast(%42, dtype="float64") /* ty=Tensor[(3, 14, 11), float64] */;
  asin(%43) /* ty=Tensor[(3, 14, 11), float64] */
}

def @func_3308(%var_3300: Tensor[(16, 8, 15), bool], %var_3301: Tensor[(16, 8, 15), bool]) -> Tensor[(16, 8, 15), bool] {
  %44 = cast(%var_3301, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %45 = shape_of(%var_3300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_3300, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%46, %47) /* ty=Tensor[(16, 8, 15), bool] */
}

def @func_477(%var_457: Tensor[(1, 12, 12), float32], %var_463: Tensor[(560), uint8]) -> (Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %48 = cast(%var_457, dtype="float32") /* ty=Tensor[(1, 12, 12), float32] */;
  %49 = cast(%var_463, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %50 = cast(%var_463, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %51 = reshape(%49, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %52 = reshape(%50, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %53 = @func_172(%51, %52) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %54 = sinh(%48) /* ty=Tensor[(1, 12, 12), float32] */;
  %55 = %53.0;
  (%54, %55, %var_463)
}

def @func_1299() -> Tensor[(3, ?, 2), float64] {
  %56 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %56.0
}

def @func_1907(%var_1857: Tensor[(1, 144), float32], %var_1893: Tensor[(12, 144), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) {
  %57 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %58 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %59 = cast(meta[relay.Constant][5] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %60 = reshape(%58, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %61 = reshape(%59, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %62 = @func_477(%60, %61) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %63 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %64 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %67 = reshape(%65, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %68 = reshape(%66, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %69 = @func_172(%67, %68) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %70 = cast(meta[relay.Constant][6] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %71 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %72 = reshape(%70, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %73 = reshape(%71, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %74 = @func_1789(%72, %73) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
  %75 = cast(%var_1857, dtype="uint8") /* ty=Tensor[(1, 144), uint8] */;
  %76 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(1, 144), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %77 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 144), float32] */, dtype="uint8") /* ty=Tensor[(1, 144), uint8] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %79 = subtract(%77, %78) /* ty=Tensor[(?, 144), uint8] */;
  %80 = cast(%79, dtype="int16") /* ty=Tensor[(?, 144), int16] */;
  %81 = cast(%var_1893, dtype="int16") /* ty=Tensor[(12, 144), int16] */;
  %82 = %57.0;
  %83 = %62.0;
  %84 = %63.0;
  %85 = %64.2;
  %86 = %69.0;
  %87 = %74.2;
  %88 = add(%80, %81) /* ty=Tensor[(12, 144), int16] */;
  (%82, %83, meta[relay.Constant][5] /* ty=Tensor[(560), uint8] */, %84, %85, %86, %87, meta[relay.Constant][6] /* ty=Tensor[(60), float64] */, %88)
}

def @func_6571() -> (Tensor[(3, ?, 2), float64],) {
  %89 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %90 = %89.0;
  (%90,)
}

def @func_2608(%var_2581: Tensor[(3, 11, 2), float64]) -> (Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) {
  %91 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %92 = %91.0;
  %93 = cast(%92, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %94 = cast(%var_2581, dtype="float64") /* ty=Tensor[(3, 11, 2), float64] */;
  %95 = cast(meta[relay.Constant][7] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %96 = cast(meta[relay.Constant][7] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %97 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 280), uint8] */, dtype="uint8") /* ty=Tensor[(2, 280), uint8] */;
  %98 = reshape(%95, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %99 = reshape(%96, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %100 = reshape(%97, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %101 = @func_1041(%98, %99, %100) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %102 = %101.7;
  %103 = cast(%102, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %104 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(2, 280), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %105 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 280), uint8] */, dtype="bool") /* ty=Tensor[(2, 280), bool] */;
  %106 = dyn.reshape(%103, %104, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %107 = divide(%93, %94) /* ty=Tensor[(3, 11, 2), float64] */;
  %108 = not_equal(%105, %106) /* ty=Tensor[(2, 280), bool] */;
  (%107, meta[relay.Constant][7] /* ty=Tensor[(704), uint64] */, %108)
}

def @func_1574(%var_1547: Tensor[(3, 15, 2), float64], %var_1554: Tensor[(3, 15, 2), float64], %var_1568: Tensor[(1, 60), float64], %var_1569: Tensor[(144), float32]) -> (Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) {
  %109 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %110 = %109.0;
  %111 = cast(%110, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
  %112 = cast(%var_1547, dtype="uint32") /* ty=Tensor[(3, 15, 2), uint32] */;
  %113 = cast(%var_1554, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
  %114 = shape_of(%var_1547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%var_1547, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %117 = cast(%var_1568, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %118 = cast(%var_1569, dtype="float32") /* ty=Tensor[(144), float32] */;
  %119 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 560), uint8] */, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
  %120 = reshape(%117, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
  %121 = reshape(%118, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %122 = reshape(%119, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %123 = @func_1438(%120, %121, %122) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
  %124 = cast(%var_1568, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %125 = cast(%var_1569, dtype="float32") /* ty=Tensor[(144), float32] */;
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 560), uint8] */, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
  %127 = reshape(%124, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
  %128 = reshape(%125, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %129 = reshape(%126, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %130 = @func_1438(%127, %128, %129) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
  %131 = add(%111, %112) /* ty=Tensor[(3, 15, 2), uint32] */;
  %132 = power(%115, %116) /* ty=Tensor[(3, 15, 2), float32] */;
  %133 = %123.2;
  %134 = %130.2;
  (%131, %132, %133, %var_1568, %var_1569, meta[relay.Constant][9] /* ty=Tensor[(1, 560), uint8] */, %134)
}

def @func_2870() -> (Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) {
  %135 = @func_1704() /* ty=Tensor[(66), float64] */;
  %136 = cast(%135, dtype="float32") /* ty=Tensor[(66), float32] */;
  %137 = cast(%135, dtype="float64") /* ty=Tensor[(66), float64] */;
  %138 = reshape(%137, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
  %139 = @func_2608(%138) /* ty=(Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) */;
  %140 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %141 = sin(%136) /* ty=Tensor[(66), float32] */;
  %142 = %139.1;
  %143 = %140.0;
  (%141, %142, %143)
}

def @func_4065() -> Tensor[(3, ?, 2), float64] {
  %144 = @func_2983() /* ty=(Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %144.2
}

def @func_5730(%var_5726: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %145 = @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %146 = cast(%var_5726, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %147 = reshape(%146, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %148 = @func_1686(%147) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %149 = %145.0;
  %150 = %148.2;
  (%149, %150, %var_5726)
}

def @func_5279(%var_5264: uint8, %var_5272: Tensor[(144, 1), float32]) -> (Tensor[(66), float64], uint8, Tensor[(864), uint8], Tensor[(3, ?, 2), float64], Tensor[(144, 1), float32], Tensor[(6, 12, 12), int32]) {
  %151 = @func_1704() /* ty=Tensor[(66), float64] */;
  %152 = cast(%151, dtype="float64") /* ty=Tensor[(66), float64] */;
  %153 = cast(%var_5272, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %154 = reshape(%152, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
  %155 = reshape(%153, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %156 = @func_4470(%154, %155) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) */;
  %157 = cast(%var_5264, dtype="uint8") /* ty=uint8 */;
  %158 = cast(meta[relay.Constant][10] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %159 = reshape(%157, newshape=[]) /* ty=uint8 */;
  %160 = reshape(%158, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
  %161 = @func_3116(%159, %160) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
  %162 = %161.0;
  %163 = cast(%var_5264, dtype="uint8") /* ty=uint8 */;
  %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %165 = reshape(%163, newshape=[]) /* ty=uint8 */;
  %166 = reshape(%164, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
  %167 = @func_3116(%165, %166) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
  %168 = %167.0;
  %169 = cast(%168, dtype="int32") /* ty=Tensor[(6, 12, 12), int32] */;
  %170 = shape_of(%162, dtype="int32") /* ty=Tensor[(3), int32] */;
  %171 = cast(%162, dtype="int32") /* ty=Tensor[(6, 12, 12), int32] */;
  %172 = dyn.reshape(%169, %170, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %173 = %156.0;
  %174 = right_shift(%171, %172) /* ty=Tensor[(6, 12, 12), int32] */;
  (%151, %var_5264, meta[relay.Constant][10] /* ty=Tensor[(864), uint8] */, %173, %var_5272, %174)
}

def @func_3199(%var_3189: Tensor[(3, 16, 2), float64]) -> (Tensor[(3, 16, 2), bool],) {
  %175 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %178 = cast(%var_3189, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
  %179 = logical_and(%177, %178) /* ty=Tensor[(3, 16, 2), bool] */;
  (%179,)
}

def @func_5693() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %180 = @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %181 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %182 = %180.0;
  %183 = %181.1;
  (%182, %183)
}

def @func_4317(%var_4248: Tensor[(11, 6), float64], %var_4260: int8, %var_4266: Tensor[(864), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) {
  %184 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %185 = cast(%var_4248, dtype="float64") /* ty=Tensor[(11, 6), float64] */;
  %186 = reshape(%185, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
  %187 = @func_1284(%186) /* ty=(Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) */;
  %188 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %189 = cast(%var_4260, dtype="int8") /* ty=int8 */;
  %190 = reshape(%189, newshape=[]) /* ty=int8 */;
  %191 = @func_3915(%190) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 7, 11), float64], int8, Tensor[(12, 12, 12), float64]) */;
  %192 = %191.2;
  %193 = cast(%192, dtype="uint8") /* ty=uint8 */;
  %194 = cast(%var_4266, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %195 = reshape(%193, newshape=[]) /* ty=uint8 */;
  %196 = reshape(%194, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
  %197 = @func_3116(%195, %196) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
  %198 = cast(meta[relay.Constant][12] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %199 = cast(meta[relay.Constant][12] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %200 = reshape(%198, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
  %201 = reshape(%199, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
  %202 = @func_2264(%200, %201) /* ty=(Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) */;
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
  %204 = reshape(%203, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
  %205 = @func_3696(%204) /* ty=Tensor[(3, 3, 2), int32] */;
  %206 = cast(%205, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %207 = log(%206) /* ty=Tensor[(3, 3, 2), float64] */;
  %208 = cast(%207, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
  %209 = atan(%208) /* ty=Tensor[(3, 3, 2), float64] */;
  %210 = cast(%209, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
  %211 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %212 = cast(%207, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
  %213 = cast(%var_4260, dtype="uint8") /* ty=uint8 */;
  %214 = cast(%var_4266, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %215 = reshape(%213, newshape=[]) /* ty=uint8 */;
  %216 = reshape(%214, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
  %217 = @func_3116(%215, %216) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
  %218 = %184.0;
  %219 = %187.1;
  %220 = %188.2;
  %221 = %197.2;
  %222 = %202.1;
  %223 = log2(%210) /* ty=Tensor[(3, 3, 2), float32] */;
  %224 = %211.0;
  %225 = log10(%212) /* ty=Tensor[(3, 3, 2), float32] */;
  %226 = %217.2;
  (%218, meta[relay.Constant][11] /* ty=Tensor[(18), float64] */, %219, %var_4248, %220, %192, %var_4260, %221, %var_4266, %222, meta[relay.Constant][12] /* ty=Tensor[(1936), float32] */, %223, %224, %225, %226)
}

def @func_5776() -> (Tensor[(66), float64], Tensor[(3, ?, 2), float64]) {
  %227 = @func_4900() /* ty=(Tensor[(66), float64],) */;
  %228 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %229 = %227.0;
  %230 = %228.0;
  (%229, %230)
}

def @func_1627() -> (Tensor[(3, ?, 2), float64],) {
  %231 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %232 = %231.0;
  (%232,)
}

def @func_1686(%var_1682: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %233 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %234 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %235 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %236 = %235.0;
  %237 = cast(%236, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %238 = shape_of(%234, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%234, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = cast(%var_1682, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %242 = cast(%var_1682, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %243 = reshape(%241, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %244 = reshape(%242, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %245 = @func_172(%243, %244) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %246 = %233.0;
  %247 = greater_equal(%239, %240) /* ty=Tensor[(3, ?, 2), bool] */;
  %248 = %245.0;
  (%246, %247, %248, %var_1682)
}

def @func_7602(%var_7597: Tensor[(3, 6, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(3, 6, 2), int32]) {
  %249 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %250 = %249.0;
  %251 = cast(%250, dtype="int32") /* ty=Tensor[(3, ?, 2), int32] */;
  %252 = cast(%var_7597, dtype="int32") /* ty=Tensor[(3, 6, 2), int32] */;
  %253 = @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */;
  %254 = minimum(%251, %252) /* ty=Tensor[(3, 6, 2), int32] */;
  (%253, %254)
}

def @func_7869() -> (Tensor[(3, ?, 2), float64],) {
  %255 = @func_6051() /* ty=Tensor[(3, ?, 2), float64] */;
  (%255,)
}

def @func_7512() -> Tensor[(3, ?, 2), float64] {
  @func_6051() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_6363(%var_6359: Tensor[(864), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) {
  %256 = @func_2870() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */;
  %257 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %258 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %259 = cast(meta[relay.Constant][13] /* ty=Tensor[(66, 1), float64] */, dtype="float64") /* ty=Tensor[(66, 1), float64] */;
  %260 = cast(meta[relay.Constant][14] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %261 = cast(%var_6359, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %262 = reshape(%259, newshape=[11, 6]) /* ty=Tensor[(11, 6), float64] */;
  %263 = reshape(%260, newshape=[]) /* ty=int8 */;
  %264 = reshape(%261, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %265 = @func_4317(%262, %263, %264) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %266 = %256.2;
  %267 = %257.0;
  %268 = %258.0;
  %269 = %265.5;
  (%266, %267, %268, %269, meta[relay.Constant][13] /* ty=Tensor[(66, 1), float64] */, meta[relay.Constant][14] /* ty=int8 */, %var_6359)
}

def @func_6051() -> Tensor[(3, ?, 2), float64] {
  %270 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %270.0
}

def @func_7461(%var_7425: Tensor[(3, 11, 2), float64], %var_7448: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), uint16], Tensor[(3, ?, 2), float64], Tensor[(3, 11, 2), uint64], Tensor[(864), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 280, 2), bool], Tensor[(144), float32], Tensor[(3, ?, 2), float64]) {
  %271 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %272 = %271.0;
  %273 = @func_5002() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %274 = %273.0;
  %275 = cast(%274, dtype="uint16") /* ty=Tensor[(3, ?, 2), uint16] */;
  %276 = shape_of(%272, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%272, dtype="uint16") /* ty=Tensor[(3, ?, 2), uint16] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %279 = @func_5956() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %280 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %281 = cast(%280, dtype="uint64") /* ty=Tensor[(3, ?, 2), uint64] */;
  %282 = cast(%var_7425, dtype="uint64") /* ty=Tensor[(3, 11, 2), uint64] */;
  %283 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %284 = reshape(%283, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %285 = @func_6363(%284) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */;
  %286 = %285.5;
  %287 = cast(meta[relay.Constant][15] /* ty=Tensor[(864), uint8] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %288 = cast(%286, dtype="float64") /* ty=float64 */;
  %289 = @func_5693() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %290 = cast(%var_7448, dtype="float32") /* ty=Tensor[(144), float32] */;
  %291 = reshape(%290, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %292 = @func_2760(%291) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
  %293 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %294 = bitwise_or(%277, %278) /* ty=Tensor[(3, ?, 2), uint16] */;
  %295 = %279.0;
  %296 = subtract(%281, %282) /* ty=Tensor[(3, 11, 2), uint64] */;
  %297 = maximum(%287, %288) /* ty=Tensor[(864), float64] */;
  %298 = %289.0;
  %299 = %292.2;
  %300 = %293.0;
  (%294, %295, %296, %297, %298, %299, %var_7448, %300)
}

def @main(%var_8339: Tensor[(675), float32]) -> (Tensor[(12), float64], Tensor[(?, 9, 10), float32], Tensor[(66), bool], Tensor[(3, ?, 2), float64], Tensor[(?, 9, 10), bool], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(?, 9, 10), uint16], Tensor[(?, 9, 10), float32]) {
  %301 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %302 = atanh(%301) /* ty=Tensor[(1, 9, 10), float64] */;
  %303 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 9, 10), float64] */, dtype="uint64") /* ty=Tensor[(1, 9, 10), uint64] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="uint64") /* ty=Tensor[(1, 9, 10), uint64] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %307 = logical_xor(%305, %306) /* ty=Tensor[(?, 9, 10), uint64] */;
  %308 = cast(%302, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %309 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%307, dtype="float32") /* ty=Tensor[(?, 9, 10), float32] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %312 = cast(meta[relay.Constant][16] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %313 = reshape(%312, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %314 = @func_4383(%313) /* ty=(Tensor[(3, 4, 2), int16], Tensor[(24, 1), float64], Tensor[(3, 2, 2), int64], Tensor[(66), float64]) */;
  %315 = %314.3;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(66), float64] */, dtype="bool") /* ty=Tensor[(66), bool] */;
  %317 = shape_of(%315, dtype="int32") /* ty=Tensor[(1), int32] */;
  %318 = cast(%315, dtype="bool") /* ty=Tensor[(66), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?), bool] */;
  %320 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %321 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 9, 10), float64] */, dtype="uint32") /* ty=Tensor[(1, 9, 10), uint32] */;
  %322 = shape_of(%307, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%307, dtype="uint32") /* ty=Tensor[(?, 9, 10), uint32] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %325 = multiply(%323, %324) /* ty=Tensor[(?, 9, 10), uint32] */;
  %326 = cast(%307, dtype="bool") /* ty=Tensor[(?, 9, 10), bool] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="bool") /* ty=Tensor[(?, 9, 10), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = cast(%var_8339, dtype="float32") /* ty=Tensor[(675), float32] */;
  %331 = reshape(%330, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %332 = cast(%302, dtype="uint16") /* ty=Tensor[(1, 9, 10), uint16] */;
  %333 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %334 = cast(%325, dtype="uint16") /* ty=Tensor[(?, 9, 10), uint16] */;
  %335 = dyn.reshape(%332, %333, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %336 = cast(%325, dtype="float32") /* ty=Tensor[(?, 9, 10), float32] */;
  %337 = floor_divide(%310, %311) /* ty=Tensor[(?, 9, 10), float32] */;
  %338 = greater(%318, %319) /* ty=Tensor[(66), bool] */;
  %339 = %320.0;
  %340 = logical_or(%328, %329) /* ty=Tensor[(?, 9, 10), bool] */;
  %341 = @func_5677(%331) /* ty=Tensor[(9, 5, 15), float32] */;
  %342 = right_shift(%334, %335) /* ty=Tensor[(?, 9, 10), uint16] */;
  %343 = asinh(%336) /* ty=Tensor[(?, 9, 10), float32] */;
  (meta[relay.Constant][16] /* ty=Tensor[(12), float64] */, %337, %338, %339, %340, %341, %var_8339, %342, %343)
}

def @func_3429() -> (Tensor[(3, ?, 2), float64],) {
  %344 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  (%344,)
}

def @func_3363() -> Tensor[(66), float64] {
  %345 = @func_1704() /* ty=Tensor[(66), float64] */;
  %346 = cast(meta[relay.Constant][19] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(1), int32] */;
  %348 = cast(%345, dtype="float64") /* ty=Tensor[(66), float64] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?), float64] */;
  power(%348, %349) /* ty=Tensor[(66), float64] */
}

def @func_7057() -> (Tensor[(3, ?, 2), float64], Tensor[(16, 8, 15), bool], Tensor[(1920), bool], Tensor[(3, ?, 2), float64]) {
  %350 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %351 = %350.0;
  %352 = @func_2231() /* ty=Tensor[(3, ?, 2), float64] */;
  %353 = cast(%352, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %354 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %355 = cast(%351, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %357 = cast(meta[relay.Constant][20] /* ty=Tensor[(1920), bool] */, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %358 = cast(meta[relay.Constant][20] /* ty=Tensor[(1920), bool] */, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %359 = reshape(%357, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %360 = reshape(%358, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %361 = mod(%355, %356) /* ty=Tensor[(3, ?, 2), float64] */;
  %362 = @func_3308(%359, %360) /* ty=Tensor[(16, 8, 15), bool] */;
  %363 = @func_6773() /* ty=Tensor[(3, ?, 2), float64] */;
  (%361, %362, meta[relay.Constant][20] /* ty=Tensor[(1920), bool] */, %363)
}

def @func_8118(%var_8110: float32, %var_8111: Tensor[(1, 6, 16), float32]) -> (Tensor[(1, 6, 16), float32], Tensor[(1, 6, 16), float32]) {
  %364 = cast(%var_8110, dtype="float32") /* ty=float32 */;
  %365 = cast(%var_8111, dtype="float32") /* ty=Tensor[(1, 6, 16), float32] */;
  %366 = cast(%var_8111, dtype="float32") /* ty=Tensor[(1, 6, 16), float32] */;
  %367 = power(%364, %365) /* ty=Tensor[(1, 6, 16), float32] */;
  %368 = cos(%366) /* ty=Tensor[(1, 6, 16), float32] */;
  (%367, %368)
}

def @func_6461(%var_6454: Tensor[(2, 5, 9), uint32], %var_6455: Tensor[(2, 5, 9), uint32]) -> Tensor[(2, 5, 9), uint32] {
  %369 = cast(%var_6455, dtype="uint32") /* ty=Tensor[(2, 5, 9), uint32] */;
  %370 = shape_of(%var_6454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %371 = cast(%var_6454, dtype="uint32") /* ty=Tensor[(2, 5, 9), uint32] */;
  %372 = dyn.reshape(%369, %370, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%371, %372) /* ty=Tensor[(2, 5, 9), uint32] */
}

def @func_5864(%var_5862: Tensor[(1728), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(12, 144), int16], Tensor[(1, 144), float32], Tensor[(1728), uint8]) {
  %373 = @func_5693() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %374 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %375 = cast(%var_5862, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
  %376 = reshape(%374, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %377 = reshape(%375, newshape=[12, 144]) /* ty=Tensor[(12, 144), uint8] */;
  %378 = @func_1907(%376, %377) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) */;
  %379 = @func_2231() /* ty=Tensor[(3, ?, 2), float64] */;
  %380 = %373.1;
  %381 = %378.8;
  (%379, %380, %381, meta[relay.Constant][21] /* ty=Tensor[(1, 144), float32] */, %var_5862)
}

def @func_6773() -> Tensor[(3, ?, 2), float64] {
  %382 = @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %382.0
}

def @func_3116(%var_3089: uint8, %var_3090: Tensor[(6, 12, 12), uint8]) -> (Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) {
  %383 = cast(%var_3089, dtype="bool") /* ty=bool */;
  %384 = cast(%var_3090, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %385 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 12, 12), uint8] */, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
  %386 = shape_of(%var_3090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_3090, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %389 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %390 = less_equal(%383, %384) /* ty=Tensor[(6, 12, 12), bool] */;
  %391 = logical_xor(%387, %388) /* ty=Tensor[(6, 12, 12), int16] */;
  %392 = %389.0;
  (%390, %391, %392)
}

def @func_2153() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %393 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %394 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %395 = %393.0;
  %396 = %394.0;
  (%395, %396)
}

def @func_2231() -> Tensor[(3, ?, 2), float64] {
  %397 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %397.0
}

def @func_6980(%var_6964: Tensor[(864), uint8]) -> (Tensor[(66), float64], Tensor[(3, ?, 2), float32], Tensor[(864), uint8]) {
  %398 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %399 = cast(%var_6964, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %400 = reshape(%399, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %401 = @func_6363(%400) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */;
  %402 = %398.2;
  %403 = %401.1;
  (%402, %403, %var_6964)
}

def @func_1041(%var_980: Tensor[(16, 11, 4), uint64], %var_981: Tensor[(16, 11, 4), uint64], %var_987: Tensor[(560), uint8]) -> (Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) {
  %404 = cast(%var_981, dtype="uint64") /* ty=Tensor[(16, 11, 4), uint64] */;
  %405 = shape_of(%var_980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %406 = cast(%var_980, dtype="uint64") /* ty=Tensor[(16, 11, 4), uint64] */;
  %407 = dyn.reshape(%404, %405, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %408 = cast(%var_987, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %409 = cast(%var_987, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %410 = reshape(%408, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %411 = reshape(%409, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %412 = @func_172(%410, %411) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %413 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %414 = %412.0;
  %415 = cast(%414, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %416 = cast(%414, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %417 = reshape(%415, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %418 = reshape(%416, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %419 = @func_172(%417, %418) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %420 = %419.0;
  %421 = cast(%420, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %422 = reshape(%413, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %423 = reshape(%421, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %424 = @func_477(%422, %423) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %425 = cast(%414, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %426 = cast(%var_987, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %427 = reshape(%425, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %428 = reshape(%426, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %429 = @func_172(%427, %428) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %430 = %429.0;
  %431 = cast(%420, dtype="uint16") /* ty=Tensor[(8, 14, 5), uint16] */;
  %432 = shape_of(%430, dtype="int32") /* ty=Tensor[(3), int32] */;
  %433 = cast(%430, dtype="uint16") /* ty=Tensor[(8, 14, 5), uint16] */;
  %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %435 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %436 = %424.2;
  %437 = cast(%436, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %438 = reshape(%435, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %439 = reshape(%437, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %440 = @func_477(%438, %439) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %441 = %440.1;
  %442 = cast(%441, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %443 = cast(%420, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %444 = reshape(%442, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %445 = reshape(%443, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %446 = @func_172(%444, %445) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %447 = cast(%420, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %448 = logical_xor(%433, %434) /* ty=Tensor[(8, 14, 5), uint16] */;
  %449 = cast(%448, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %450 = reshape(%447, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %451 = reshape(%449, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %452 = @func_172(%450, %451) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %453 = maximum(%406, %407) /* ty=Tensor[(16, 11, 4), uint64] */;
  %454 = %446.0;
  %455 = %452.0;
  (%453, %414, %var_987, %436, meta[relay.Constant][23] /* ty=Tensor[(144), float32] */, %448, %441, %454, %455)
}

def @func_2658() -> (Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) {
  %456 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %457 = cast(meta[relay.Constant][24] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %458 = reshape(%456, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %459 = reshape(%457, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %460 = @func_477(%458, %459) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %461 = %460.0;
  %462 = cast(meta[relay.Constant][25] /* ty=Tensor[(144), float32] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %463 = shape_of(%461, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(%461, dtype="uint16") /* ty=Tensor[(1, 12, 12), uint16] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %466 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %467 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %468 = left_shift(%464, %465) /* ty=Tensor[(?, 12, 12), uint16] */;
  %469 = %466.0;
  (%467, meta[relay.Constant][24] /* ty=Tensor[(560), uint8] */, %468, %469)
}

def @func_3056(%var_3026: Tensor[(9, 10, 13), float32], %var_3047: Tensor[(560), uint8]) -> (Tensor[(9, 10, 13), float32], Tensor[(9, 10, 13), bool], Tensor[(560), uint8], Tensor[(560), uint8]) {
  %470 = cast(%var_3026, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %471 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(9, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %474 = cast(%var_3026, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %475 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(9, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(meta[relay.Constant][26] /* ty=Tensor[(9, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %478 = cast(%var_3047, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %479 = reshape(%478, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %480 = @func_1686(%479) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %481 = power(%472, %473) /* ty=Tensor[(9, 10, 13), float32] */;
  %482 = logical_or(%476, %477) /* ty=Tensor[(9, 10, 13), bool] */;
  %483 = %480.3;
  (%481, %482, %483, %var_3047)
}

def @func_6261(%var_6259: Tensor[(4, 140), int64]) -> (Tensor[(66), float64], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], int8, Tensor[(864), uint8], Tensor[(66), float64], Tensor[(4, 140), int64]) {
  %484 = @func_5776() /* ty=(Tensor[(66), float64], Tensor[(3, ?, 2), float64]) */;
  %485 = @func_6072() /* ty=(Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) */;
  %486 = @func_5776() /* ty=(Tensor[(66), float64], Tensor[(3, ?, 2), float64]) */;
  %487 = %485.0;
  %488 = cast(%487, dtype="float64") /* ty=Tensor[(66), float64] */;
  %489 = cast(meta[relay.Constant][27] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %490 = cast(meta[relay.Constant][28] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %491 = reshape(%488, newshape=[11, 6]) /* ty=Tensor[(11, 6), float64] */;
  %492 = reshape(%489, newshape=[]) /* ty=int8 */;
  %493 = reshape(%490, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %494 = @func_4317(%491, %492, %493) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %495 = cast(%var_6259, dtype="int64") /* ty=Tensor[(4, 140), int64] */;
  %496 = cast(%var_6259, dtype="int64") /* ty=Tensor[(4, 140), int64] */;
  %497 = reshape(%495, newshape=[5, 16, 7]) /* ty=Tensor[(5, 16, 7), int64] */;
  %498 = reshape(%496, newshape=[5, 16, 7]) /* ty=Tensor[(5, 16, 7), int64] */;
  %499 = @func_4850(%497, %498) /* ty=(Tensor[(5, 16, 7), int64], Tensor[(144), float32], Tensor[(66), float64], Tensor[(2, 72), float32]) */;
  %500 = %484.0;
  %501 = %486.1;
  %502 = %494.11;
  %503 = %499.2;
  (%500, %487, %501, %502, meta[relay.Constant][27] /* ty=int8 */, meta[relay.Constant][28] /* ty=Tensor[(864), uint8] */, %503, %var_6259)
}

def @func_3827() -> (Tensor[(3, ?, 2), float64],) {
  %504 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %506 = log2(%505) /* ty=Tensor[(3, ?, 2), float64] */;
  %507 = cast(%504, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %508 = shape_of(%506, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%506, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %511 = divide(%509, %510) /* ty=Tensor[(3, ?, 2), float64] */;
  (%511,)
}

def @func_3730() -> (Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) {
  %512 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %513 = @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */;
  %514 = cast(%513, dtype="float64") /* ty=Tensor[(?, 12, 12), float64] */;
  %515 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 12, 12), uint16] */, dtype="float64") /* ty=Tensor[(12, 12, 12), float64] */;
  %516 = %512.0;
  %517 = power(%514, %515) /* ty=Tensor[(12, 12, 12), float64] */;
  (%516, %517)
}

def @func_4383(%var_4333: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 4, 2), int16], Tensor[(24, 1), float64], Tensor[(3, 2, 2), int64], Tensor[(66), float64]) {
  %518 = cast(meta[relay.Constant][30] /* ty=Tensor[(24, 1), float64] */, dtype="float64") /* ty=Tensor[(24, 1), float64] */;
  %519 = reshape(%518, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float64] */;
  %520 = @func_2460(%519) /* ty=(Tensor[(3, 4, 2), int16],) */;
  %521 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %522 = %521.3;
  %523 = cast(%522, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %524 = cast(%var_4333, dtype="bool") /* ty=Tensor[(3, 2, 2), bool] */;
  %525 = logical_or(%523, %524) /* ty=Tensor[(3, 2, 2), bool] */;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %527 = sqrt(%526) /* ty=Tensor[(3, 2, 2), float64] */;
  %528 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 2, 2), float64] */, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
  %529 = shape_of(%527, dtype="int32") /* ty=Tensor[(3), int32] */;
  %530 = cast(%527, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
  %531 = dyn.reshape(%528, %529, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %532 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 2, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
  %533 = reshape(%532, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %534 = @func_3670(%533) /* ty=(Tensor[(3, 2, 2), int16], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(8, 70), uint8], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) */;
  %535 = %520.0;
  %536 = logical_xor(%530, %531) /* ty=Tensor[(3, 2, 2), int64] */;
  %537 = %534.1;
  (%535, meta[relay.Constant][30] /* ty=Tensor[(24, 1), float64] */, %536, %537)
}

def @func_1789(%var_1768: Tensor[(60), float64], %var_1769: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) {
  %538 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %539 = cast(%var_1768, dtype="float64") /* ty=Tensor[(60), float64] */;
  %540 = cast(%var_1769, dtype="float32") /* ty=Tensor[(144), float32] */;
  %541 = cast(meta[relay.Constant][32] /* ty=Tensor[(280, 2), uint8] */, dtype="uint8") /* ty=Tensor[(280, 2), uint8] */;
  %542 = reshape(%539, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
  %543 = reshape(%540, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %544 = reshape(%541, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %545 = @func_1438(%542, %543, %544) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
  %546 = %538.0;
  %547 = %545.0;
  (%546, %547, %var_1768, %var_1769, meta[relay.Constant][32] /* ty=Tensor[(280, 2), uint8] */)
}

def @func_2563() -> (Tensor[(3, ?, 2), float64],) {
  %548 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  (%548,)
}

def @func_4633() -> Tensor[(3, ?, 2), float64] {
  %549 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %549.0
}

def @func_4850(%var_4812: Tensor[(5, 16, 7), int64], %var_4813: Tensor[(5, 16, 7), int64]) -> (Tensor[(5, 16, 7), int64], Tensor[(144), float32], Tensor[(66), float64], Tensor[(2, 72), float32]) {
  %550 = cast(%var_4813, dtype="int64") /* ty=Tensor[(5, 16, 7), int64] */;
  %551 = shape_of(%var_4812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_4812, dtype="int64") /* ty=Tensor[(5, 16, 7), int64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %554 = cast(meta[relay.Constant][33] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %555 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 72), float32] */, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %556 = reshape(%554, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
  %557 = reshape(%555, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %558 = @func_4470(%556, %557) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) */;
  %559 = subtract(%552, %553) /* ty=Tensor[(5, 16, 7), int64] */;
  %560 = %558.3;
  (%559, %560, meta[relay.Constant][33] /* ty=Tensor[(66), float64] */, meta[relay.Constant][34] /* ty=Tensor[(2, 72), float32] */)
}

def @func_2845(%var_2832: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %561 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %562 = cast(%var_2832, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %563 = reshape(%562, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %564 = @func_1686(%563) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %565 = %561.0;
  %566 = %564.2;
  (%565, %566, %var_2832)
}

def @func_7984(%var_7968: Tensor[(66), float64]) -> Tensor[(66), float64] {
  %567 = @func_1704() /* ty=Tensor[(66), float64] */;
  %568 = cast(%var_7968, dtype="float64") /* ty=Tensor[(66), float64] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(1), int32] */;
  %570 = cast(%567, dtype="float64") /* ty=Tensor[(66), float64] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_divide(%570, %571) /* ty=Tensor[(66), float64] */
}

def @func_5677(%var_5670: Tensor[(9, 5, 15), float32]) -> Tensor[(9, 5, 15), float32] {
  %572 = cast(%var_5670, dtype="float32") /* ty=Tensor[(9, 5, 15), float32] */;
  log(%572) /* ty=Tensor[(9, 5, 15), float32] */
}

def @func_8061(%var_8055: Tensor[(2, 12, 4), float32]) -> (Tensor[(2, 12, 4), float32], Tensor[(3, ?, 2), float64]) {
  %573 = cast(%var_8055, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
  %574 = @func_6823() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %575 = sinh(%573) /* ty=Tensor[(2, 12, 4), float32] */;
  %576 = %574.0;
  (%575, %576)
}

def @func_1803() -> (Tensor[(3, ?, 2), float64],) {
  %577 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %578 = %577.0;
  (%578,)
}

def @func_7123(%var_7106: Tensor[(90), float64], %var_7107: Tensor[(60), float64], %var_7108: Tensor[(144, 1), float32]) -> (Tensor[(3, ?, 2), float32], Tensor[(1, 60), float64], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144, 1), float32], Tensor[(11, 16, 11), bool], Tensor[(1936), float32], Tensor[(864), uint8], Tensor[(864), uint8]) {
  %579 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %580 = cast(%var_7106, dtype="float64") /* ty=Tensor[(90), float64] */;
  %581 = cast(%var_7106, dtype="float64") /* ty=Tensor[(90), float64] */;
  %582 = cast(%var_7107, dtype="float64") /* ty=Tensor[(60), float64] */;
  %583 = cast(%var_7108, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %584 = reshape(%580, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
  %585 = reshape(%581, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
  %586 = reshape(%582, newshape=[1, 60]) /* ty=Tensor[(1, 60), float64] */;
  %587 = reshape(%583, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %588 = @func_1574(%584, %585, %586, %587) /* ty=(Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %590 = cast(meta[relay.Constant][35] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
  %591 = reshape(%589, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
  %592 = reshape(%590, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
  %593 = @func_2264(%591, %592) /* ty=(Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) */;
  %594 = cast(meta[relay.Constant][36] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %595 = reshape(%594, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %596 = @func_6363(%595) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */;
  %597 = %579.0;
  %598 = %588.3;
  %599 = %593.0;
  %600 = %596.6;
  (%597, %598, %var_7106, %var_7107, %var_7108, %599, meta[relay.Constant][35] /* ty=Tensor[(1936), float32] */, %600, meta[relay.Constant][36] /* ty=Tensor[(864), uint8] */)
}

def @func_2264(%var_2257: Tensor[(11, 16, 11), float32], %var_2258: Tensor[(11, 16, 11), float32]) -> (Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) {
  %601 = cast(%var_2258, dtype="bool") /* ty=Tensor[(11, 16, 11), bool] */;
  %602 = shape_of(%var_2257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_2257, dtype="bool") /* ty=Tensor[(11, 16, 11), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = cast(%var_2257, dtype="float32") /* ty=Tensor[(11, 16, 11), float32] */;
  %606 = less_equal(%603, %604) /* ty=Tensor[(11, 16, 11), bool] */;
  %607 = rsqrt(%605) /* ty=Tensor[(11, 16, 11), float32] */;
  (%606, %607)
}

def @func_172(%var_161: Tensor[(8, 14, 5), uint8], %var_162: Tensor[(8, 14, 5), uint8]) -> (Tensor[(8, 14, 5), bool],) {
  %608 = cast(%var_162, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %609 = shape_of(%var_161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%var_161, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = less_equal(%610, %611) /* ty=Tensor[(8, 14, 5), bool] */;
  (%612,)
}

def @func_8238(%var_8205: Tensor[(8, 8, 5), float64]) -> (Tensor[(8, 8, 5), float64], Tensor[(144), float32], Tensor[(144), float32], Tensor[(8, 14, 5), bool], Tensor[(1728), uint8]) {
  %613 = cast(%var_8205, dtype="float64") /* ty=Tensor[(8, 8, 5), float64] */;
  %614 = cast(meta[relay.Constant][37] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %615 = reshape(%614, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %616 = @func_2760(%615) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
  %617 = cast(meta[relay.Constant][37] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %618 = cast(meta[relay.Constant][38] /* ty=Tensor[(1728), uint8] */, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
  %619 = reshape(%617, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %620 = reshape(%618, newshape=[12, 144]) /* ty=Tensor[(12, 144), uint8] */;
  %621 = @func_1907(%619, %620) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) */;
  %622 = atan(%613) /* ty=Tensor[(8, 8, 5), float64] */;
  %623 = %616.1;
  %624 = %621.5;
  (%622, %623, meta[relay.Constant][37] /* ty=Tensor[(144), float32] */, %624, meta[relay.Constant][38] /* ty=Tensor[(1728), uint8] */)
}

def @func_8264() -> (Tensor[(3, ?, 2), float64],) {
  %625 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  (%625,)
}

def @func_3494(%var_3449: int8) -> (Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) {
  %626 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %627 = cast(meta[relay.Constant][39] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %628 = reshape(%627, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %629 = @func_2760(%628) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
  %630 = cast(%var_3449, dtype="int8") /* ty=int8 */;
  %631 = cast(meta[relay.Constant][40] /* ty=Tensor[(8, 7, 11), int8] */, dtype="int8") /* ty=Tensor[(8, 7, 11), int8] */;
  %632 = multiply(%630, %631) /* ty=Tensor[(8, 7, 11), int8] */;
  %633 = cast(%var_3449, dtype="bool") /* ty=bool */;
  %634 = cast(%632, dtype="bool") /* ty=Tensor[(8, 7, 11), bool] */;
  %635 = logical_or(%633, %634) /* ty=Tensor[(8, 7, 11), bool] */;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
  %637 = sin(%636) /* ty=Tensor[(8, 7, 11), float32] */;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
  %639 = %626.0;
  %640 = %629.0;
  %641 = log2(%638) /* ty=Tensor[(8, 7, 11), float64] */;
  (%639, %640, meta[relay.Constant][39] /* ty=Tensor[(144), float32] */, %641)
}

def @func_4929() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %642 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %643 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %644 = %642.0;
  %645 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %646 = %643.0;
  (%644, %645, %646)
}

def @func_1327() -> (Tensor[(3, ?, 2), float64],) {
  %647 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %648 = %647.0;
  (%648,)
}

def @func_4725() -> (Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) {
  %649 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %650 = cast(%649, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
  %651 = @func_2153() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %652 = cosh(%650) /* ty=Tensor[(3, ?, 2), float32] */;
  %653 = %651.1;
  (%652, %653)
}

def @func_5584(%var_5571: Tensor[(1920), bool]) -> (Tensor[(66), float32], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) {
  %654 = @func_2870() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */;
  %655 = cast(meta[relay.Constant][41] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %656 = reshape(%655, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %657 = @func_2845(%656) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %658 = cast(%var_5571, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %659 = cast(%var_5571, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %660 = reshape(%658, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %661 = reshape(%659, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %662 = %654.0;
  %663 = @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */;
  %664 = %657.0;
  %665 = @func_3308(%660, %661) /* ty=Tensor[(16, 8, 15), bool] */;
  (%662, %663, %664, meta[relay.Constant][41] /* ty=Tensor[(560), uint8] */, %665, %var_5571)
}

def @func_8156() -> (Tensor[(3, ?, 2), float32],) {
  %666 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %667 = cast(%666, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
  %668 = rsqrt(%667) /* ty=Tensor[(3, ?, 2), float32] */;
  (%668,)
}

def @func_6148(%var_6129: Tensor[(8, 10, 13), int64], %var_6130: Tensor[(8, 10, 13), int64]) -> Tensor[(8, 10, 13), bool] {
  %669 = cast(%var_6130, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %670 = shape_of(%var_6129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_6129, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%671, %672) /* ty=Tensor[(8, 10, 13), bool] */
}

def @func_6111(%var_6091: Tensor[(3, 12, 2), float64]) -> (Tensor[(3, 12, 2), int32], Tensor[(3, ?, 2), float64]) {
  %673 = @func_2563() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %674 = %673.0;
  %675 = cast(%674, dtype="int32") /* ty=Tensor[(3, ?, 2), int32] */;
  %676 = cast(%var_6091, dtype="int32") /* ty=Tensor[(3, 12, 2), int32] */;
  %677 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %678 = bitwise_or(%675, %676) /* ty=Tensor[(3, 12, 2), int32] */;
  %679 = %677.0;
  (%678, %679)
}

def @func_7864() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %680 = @func_2153() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %681 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %682 = %680.0;
  %683 = @func_6051() /* ty=Tensor[(3, ?, 2), float64] */;
  %684 = %681.0;
  (%682, %683, %684)
}

def @func_4900() -> (Tensor[(66), float64],) {
  %685 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %686 = %685.2;
  (%686,)
}

def @func_5222(%var_5185: Tensor[(560, 1), uint8], %var_5193: Tensor[(60), float64]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 12, 2), bool], Tensor[(8, 14, 5), uint16], Tensor[(704), uint64], Tensor[(560, 1), uint8], Tensor[(560), uint8], Tensor[(60), float64], Tensor[(144), float32]) {
  %687 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %688 = @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %689 = %688.0;
  %690 = cast(%689, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %691 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 12, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %692 = cast(meta[relay.Constant][43] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %693 = cast(meta[relay.Constant][43] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %694 = cast(%var_5185, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
  %695 = reshape(%692, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %696 = reshape(%693, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %697 = reshape(%694, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %698 = @func_1041(%695, %696, %697) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %699 = cast(%var_5193, dtype="float64") /* ty=Tensor[(60), float64] */;
  %700 = cast(meta[relay.Constant][44] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %701 = cast(%var_5185, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
  %702 = reshape(%699, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
  %703 = reshape(%700, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %704 = reshape(%701, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %705 = @func_1438(%702, %703, %704) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
  %706 = %687.0;
  %707 = logical_or(%690, %691) /* ty=Tensor[(3, 12, 2), bool] */;
  %708 = %698.5;
  %709 = %705.1;
  (%706, %707, %708, meta[relay.Constant][43] /* ty=Tensor[(704), uint64] */, %var_5185, %709, %var_5193, meta[relay.Constant][44] /* ty=Tensor[(144), float32] */)
}

def @func_1694() -> Tensor[(3, ?, 2), float64] {
  @func_1299() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_1966() -> (Tensor[(3, ?, 2), float64],) {
  %710 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %711 = %710.0;
  (%711,)
}

def @func_8188() -> (Tensor[(3, 16, 2), float32],) {
  %712 = @func_6438() /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) */;
  %713 = %712.1;
  %714 = cast(%713, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %715 = sin(%714) /* ty=Tensor[(3, 16, 2), float32] */;
  (%715,)
}

def @func_5118() -> Tensor[(560), uint8] {
  %716 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %716.1
}

def @func_1609() -> (Tensor[(3, ?, 2), float64],) {
  %717 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %718 = %717.0;
  %719 = cast(%718, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %720 = log10(%719) /* ty=Tensor[(3, ?, 2), float64] */;
  (%720,)
}

def @func_6738() -> (Tensor[(18), float64], Tensor[(3, ?, 2), float64]) {
  %721 = @func_6072() /* ty=(Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) */;
  %722 = %721.1;
  %723 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  (%722, %723)
}

def @func_1704() -> Tensor[(66), float64] {
  %724 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %724.2
}

def @func_7558(%var_7539: Tensor[(6, 10, 5), int8], %var_7540: Tensor[(6, 10, 5), int8], %var_7549: Tensor[(1, 60), float64], %var_7550: Tensor[(144), float32]) -> (Tensor[(6, 10, 5), float32], Tensor[(6, 10, 5), float64], Tensor[(3, 10, 2), bool], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(60), float64]) {
  %725 = cast(%var_7540, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
  %726 = shape_of(%var_7539, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_7539, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %729 = bitwise_and(%727, %728) /* ty=Tensor[(6, 10, 5), int8] */;
  %730 = cast(%729, dtype="float32") /* ty=Tensor[(6, 10, 5), float32] */;
  %731 = cast(%var_7540, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
  %732 = cast(%var_7549, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
  %733 = cast(%var_7550, dtype="float32") /* ty=Tensor[(144), float32] */;
  %734 = reshape(%732, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %735 = reshape(%733, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %736 = @func_1789(%734, %735) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
  %737 = @func_5380() /* ty=(Tensor[(40, 14), uint8], Tensor[(3, ?, 2), bool], Tensor[(1, 560), uint8], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) */;
  %738 = exp(%730) /* ty=Tensor[(6, 10, 5), float32] */;
  %739 = log(%731) /* ty=Tensor[(6, 10, 5), float64] */;
  %740 = %736.1;
  %741 = %737.4;
  (%738, %739, %740, %var_7549, %var_7550, %741)
}

def @func_6438() -> (Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) {
  %742 = @func_5002() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %743 = %742.0;
  %744 = cast(%743, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
  %745 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 16, 2), float64] */, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %746 = cast(meta[relay.Constant][45] /* ty=Tensor[(3, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %747 = cos(%746) /* ty=Tensor[(3, 16, 2), float64] */;
  %748 = cast(%747, dtype="uint32") /* ty=Tensor[(3, 16, 2), uint32] */;
  %749 = cast(%743, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
  %750 = cast(meta[relay.Constant][46] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %751 = reshape(%750, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %752 = @func_1686(%751) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %753 = power(%744, %745) /* ty=Tensor[(3, 16, 2), float32] */;
  %754 = multiply(%748, %749) /* ty=Tensor[(3, 16, 2), uint32] */;
  %755 = %752.0;
  (%753, %754, %755, meta[relay.Constant][46] /* ty=Tensor[(560), uint8] */)
}

def @func_6804() -> (Tensor[(3, ?, 2), float64],) {
  %756 = @func_6773() /* ty=Tensor[(3, ?, 2), float64] */;
  (%756,)
}

def @func_2460(%var_2443: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), int16],) {
  %757 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %758 = %757.0;
  %759 = cast(%758, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
  %760 = cast(%var_2443, dtype="int16") /* ty=Tensor[(3, 4, 2), int16] */;
  %761 = bitwise_and(%759, %760) /* ty=Tensor[(3, 4, 2), int16] */;
  (%761,)
}

def @func_3857(%var_3841: Tensor[(4, 6, 3), float64], %var_3853: Tensor[(4, 140), uint8]) -> (Tensor[(4, 6, 3), float64], Tensor[(560), uint8], Tensor[(4, 140), uint8]) {
  %762 = cast(%var_3841, dtype="float64") /* ty=Tensor[(4, 6, 3), float64] */;
  %763 = cast(%var_3853, dtype="uint8") /* ty=Tensor[(4, 140), uint8] */;
  %764 = reshape(%763, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %765 = @func_2845(%764) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %766 = asin(%762) /* ty=Tensor[(4, 6, 3), float64] */;
  %767 = %765.2;
  (%766, %767, %var_3853)
}

def @func_2790() -> (Tensor[(3, ?, 2), float64],) {
  %768 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %769 = %768.0;
  (%769,)
}

def @func_2983() -> (Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %770 = @func_2870() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */;
  %771 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %772 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %773 = %770.1;
  %774 = %771.0;
  %775 = %772.0;
  (%773, %774, %775)
}

def @func_3915(%var_3888: int8) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 7, 11), float64], int8, Tensor[(12, 12, 12), float64]) {
  %776 = cast(%var_3888, dtype="int8") /* ty=int8 */;
  %777 = reshape(%776, newshape=[]) /* ty=int8 */;
  %778 = @func_3494(%777) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) */;
  %779 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %780 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %781 = %778.3;
  %782 = %779.1;
  (%780, %781, %var_3888, %782)
}

def @func_4115() -> (Tensor[(3, ?, 2), float64],) {
  %783 = @func_2023() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(560), uint8], Tensor[(3, ?, 2), float64]) */;
  %784 = %783.0;
  (%784,)
}

def @func_4744() -> (Tensor[(3, ?, 2), float64],) {
  %785 = @func_4065() /* ty=Tensor[(3, ?, 2), float64] */;
  (%785,)
}

def @func_5918() -> (Tensor[(?, 12, 12), uint16],) {
  %786 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %787 = %786.2;
  (%787,)
}

def @func_1536() -> (Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) {
  %788 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %789 = cast(meta[relay.Constant][47] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %790 = reshape(%789, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
  %791 = @func_1284(%790) /* ty=(Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) */;
  %792 = %788.0;
  %793 = %791.1;
  (%792, %793, meta[relay.Constant][47] /* ty=Tensor[(66), float64] */)
}

def @func_3258() -> Tensor[(?, 12, 12), uint16] {
  %794 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %794.2
}

def @func_2023() -> (Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(560), uint8], Tensor[(3, ?, 2), float64]) {
  %795 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %796 = %795.0;
  %797 = cast(%796, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %798 = cast(meta[relay.Constant][48] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %799 = cast(meta[relay.Constant][48] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %800 = cast(meta[relay.Constant][49] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %801 = reshape(%798, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %802 = reshape(%799, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %803 = reshape(%800, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %804 = @func_1041(%801, %802, %803) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %805 = %804.2;
  %806 = cast(%805, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %807 = reshape(%806, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %808 = @func_1686(%807) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %809 = tan(%797) /* ty=Tensor[(3, ?, 2), float64] */;
  %810 = %808.0;
  (%809, %805, meta[relay.Constant][48] /* ty=Tensor[(704), uint64] */, meta[relay.Constant][49] /* ty=Tensor[(560), uint8] */, %810)
}

def @func_4525(%var_4507: Tensor[(3, 11, 14), float32], %var_4523: int8) -> (Tensor[(3, 11, 14), float32], Tensor[(8, 7, 11), float64], int8) {
  %811 = cast(%var_4507, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
  %812 = cast(%var_4523, dtype="int8") /* ty=int8 */;
  %813 = reshape(%812, newshape=[]) /* ty=int8 */;
  %814 = @func_3494(%813) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) */;
  %815 = sinh(%811) /* ty=Tensor[(3, 11, 14), float32] */;
  %816 = %814.3;
  (%815, %816, %var_4523)
}

def @func_6913() -> (Tensor[(3, 16, 2), float64],) {
  %817 = @func_6438() /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) */;
  %818 = %817.0;
  %819 = cast(%818, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %820 = cosh(%819) /* ty=Tensor[(3, 16, 2), float64] */;
  (%820,)
}

def @func_7284(%var_7272: Tensor[(3, 16, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(3, 16, 2), float32], Tensor[(12, 12, 12), float64]) {
  %821 = @func_5918() /* ty=(Tensor[(?, 12, 12), uint16],) */;
  %822 = @func_6913() /* ty=(Tensor[(3, 16, 2), float64],) */;
  %823 = %822.0;
  %824 = cast(%var_7272, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%823, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %828 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %829 = %821.0;
  %830 = divide(%826, %827) /* ty=Tensor[(3, 16, 2), float32] */;
  %831 = %828.1;
  (%829, %830, %831)
}

def @func_6284(%var_6274: Tensor[(144, 1), float32]) -> (Tensor[(704), uint64], Tensor[(30, 2), float64], Tensor[(144, 1), float32]) {
  %832 = @func_2983() /* ty=(Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %833 = cast(%var_6274, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %834 = reshape(%833, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %835 = @func_2908(%834) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(30, 2), float64], Tensor[(144), float32]) */;
  %836 = %832.0;
  %837 = %835.2;
  (%836, %837, %var_6274)
}

def @func_6823() -> (Tensor[(3, ?, 2), float64],) {
  %838 = @func_4065() /* ty=Tensor[(3, ?, 2), float64] */;
  (%838,)
}

def @func_7189() -> (Tensor[(96), float64], Tensor[(3, 16, 2), int8], Tensor[(3, 16, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(4, 140), uint8], Tensor[(72), float64], Tensor[(560), uint8]) {
  %839 = @func_4065() /* ty=Tensor[(3, ?, 2), float64] */;
  %840 = cast(meta[relay.Constant][50] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %841 = reshape(%840, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %842 = @func_3199(%841) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %843 = %842.0;
  %844 = cast(%839, dtype="int8") /* ty=Tensor[(3, ?, 2), int8] */;
  %845 = cast(%843, dtype="int8") /* ty=Tensor[(3, 16, 2), int8] */;
  %846 = cast(meta[relay.Constant][51] /* ty=Tensor[(3, 16, 2), bool] */, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %847 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%843, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %850 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %851 = cast(meta[relay.Constant][52] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %852 = cast(meta[relay.Constant][53] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %853 = reshape(%851, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float64] */;
  %854 = reshape(%852, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint8] */;
  %855 = @func_3857(%853, %854) /* ty=(Tensor[(4, 6, 3), float64], Tensor[(560), uint8], Tensor[(4, 140), uint8]) */;
  %856 = minimum(%844, %845) /* ty=Tensor[(3, 16, 2), int8] */;
  %857 = floor_mod(%848, %849) /* ty=Tensor[(3, 16, 2), float32] */;
  %858 = %850.0;
  %859 = %855.2;
  (meta[relay.Constant][50] /* ty=Tensor[(96), float64] */, %856, %857, %858, %859, meta[relay.Constant][52] /* ty=Tensor[(72), float64] */, meta[relay.Constant][53] /* ty=Tensor[(560), uint8] */)
}

def @func_5380() -> (Tensor[(40, 14), uint8], Tensor[(3, ?, 2), bool], Tensor[(1, 560), uint8], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) {
  %860 = @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %861 = %860.0;
  %862 = cast(meta[relay.Constant][54] /* ty=Tensor[(40, 14), uint8] */, dtype="uint8") /* ty=Tensor[(40, 14), uint8] */;
  %863 = reshape(%862, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %864 = @func_2845(%863) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %865 = %864.0;
  %866 = cast(%865, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %867 = shape_of(%861, dtype="int32") /* ty=Tensor[(3), int32] */;
  %868 = cast(%861, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %869 = dyn.reshape(%866, %867, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %870 = cast(meta[relay.Constant][55] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %871 = cast(meta[relay.Constant][55] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %872 = cast(meta[relay.Constant][56] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %873 = cast(meta[relay.Constant][57] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %874 = reshape(%870, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
  %875 = reshape(%871, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
  %876 = reshape(%872, newshape=[1, 60]) /* ty=Tensor[(1, 60), float64] */;
  %877 = reshape(%873, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %878 = @func_1574(%874, %875, %876, %877) /* ty=(Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) */;
  %879 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %880 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %881 = less(%868, %869) /* ty=Tensor[(3, ?, 2), bool] */;
  %882 = %878.5;
  %883 = %879.0;
  %884 = %880.0;
  (meta[relay.Constant][54] /* ty=Tensor[(40, 14), uint8] */, %881, %882, meta[relay.Constant][55] /* ty=Tensor[(90), float64] */, meta[relay.Constant][56] /* ty=Tensor[(60), float64] */, meta[relay.Constant][57] /* ty=Tensor[(144), float32] */, %883, %884)
}

def @func_8076(%var_8074: Tensor[(1920), bool]) -> (Tensor[(?, 12, 12), uint16], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) {
  %885 = @func_5918() /* ty=(Tensor[(?, 12, 12), uint16],) */;
  %886 = cast(%var_8074, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %887 = cast(%var_8074, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %888 = reshape(%886, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %889 = reshape(%887, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %890 = %885.0;
  %891 = @func_3308(%888, %889) /* ty=Tensor[(16, 8, 15), bool] */;
  (%890, %891, %var_8074)
}

def @func_4470(%var_4435: Tensor[(22, 3), float64], %var_4449: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) {
  %892 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %893 = cast(%var_4435, dtype="float32") /* ty=Tensor[(22, 3), float32] */;
  %894 = rsqrt(%893) /* ty=Tensor[(22, 3), float32] */;
  %895 = cast(%var_4435, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %896 = reshape(%895, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
  %897 = @func_2608(%896) /* ty=(Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) */;
  %898 = %897.0;
  %899 = cast(%898, dtype="float64") /* ty=Tensor[(3, 11, 2), float64] */;
  %900 = shape_of(%894, dtype="int32") /* ty=Tensor[(2), int32] */;
  %901 = cast(%894, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %903 = cast(%var_4449, dtype="float32") /* ty=Tensor[(144), float32] */;
  %904 = reshape(%903, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %905 = @func_2760(%904) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
  %906 = %892.0;
  %907 = floor_divide(%901, %902) /* ty=Tensor[(22, 3), float64] */;
  %908 = %905.0;
  (%906, %907, %908, %var_4449)
}

def @func_4052() -> Tensor[(3, ?, 2), float64] {
  %909 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %909.0
}

def @func_3696(%var_3686: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), int32] {
  %910 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %911 = %910.0;
  %912 = cast(%911, dtype="int32") /* ty=Tensor[(3, ?, 2), int32] */;
  %913 = cast(%var_3686, dtype="int32") /* ty=Tensor[(3, 3, 2), int32] */;
  right_shift(%912, %913) /* ty=Tensor[(3, 3, 2), int32] */
}

def @func_2760(%var_2709: Tensor[(144), float32]) -> (Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) {
  %914 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  %915 = cast(meta[relay.Constant][58] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %916 = cast(%var_2709, dtype="float32") /* ty=Tensor[(144), float32] */;
  %917 = reshape(%915, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %918 = reshape(%916, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %919 = @func_1789(%917, %918) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
  %920 = %919.4;
  %921 = cast(%914, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
  %922 = cast(%920, dtype="int16") /* ty=Tensor[(280, 2), int16] */;
  %923 = bitwise_and(%921, %922) /* ty=Tensor[(3, 280, 2), int16] */;
  %924 = cast(%923, dtype="bool") /* ty=Tensor[(3, 280, 2), bool] */;
  %925 = cast(%914, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %926 = less(%924, %925) /* ty=Tensor[(3, 280, 2), bool] */;
  (meta[relay.Constant][58] /* ty=Tensor[(60), float64] */, %var_2709, %926)
}

def @func_6072() -> (Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) {
  %927 = @func_4900() /* ty=(Tensor[(66), float64],) */;
  %928 = %927.0;
  %929 = cast(%928, dtype="float64") /* ty=Tensor[(66), float64] */;
  %930 = cast(meta[relay.Constant][59] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %931 = cast(meta[relay.Constant][60] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %932 = reshape(%929, newshape=[11, 6]) /* ty=Tensor[(11, 6), float64] */;
  %933 = reshape(%930, newshape=[]) /* ty=int8 */;
  %934 = reshape(%931, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %935 = @func_4317(%932, %933, %934) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %936 = %935.1;
  (%928, %936, meta[relay.Constant][59] /* ty=int8 */, meta[relay.Constant][60] /* ty=Tensor[(864), uint8] */)
}

def @func_3670(%var_3624: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), int16], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(8, 70), uint8], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) {
  %937 = @func_2563() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %938 = %937.0;
  %939 = cast(%938, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
  %940 = cast(%var_3624, dtype="int16") /* ty=Tensor[(3, 2, 2), int16] */;
  %941 = cast(meta[relay.Constant][61] /* ty=Tensor[(8, 70), uint8] */, dtype="uint8") /* ty=Tensor[(8, 70), uint8] */;
  %942 = reshape(%941, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %943 = @func_2845(%942) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %944 = cast(%938, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
  %945 = maximum(%939, %940) /* ty=Tensor[(3, 2, 2), int16] */;
  %946 = @func_1704() /* ty=Tensor[(66), float64] */;
  %947 = %943.0;
  %948 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %949 = sqrt(%944) /* ty=Tensor[(3, ?, 2), float32] */;
  (%945, %946, %947, meta[relay.Constant][61] /* ty=Tensor[(8, 70), uint8] */, %948, %949)
}

def @func_3580() -> Tensor[(3, ?, 2), float64] {
  %950 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %950.0
}

def @func_7335() -> Tensor[(66), float64] {
  %951 = @func_4900() /* ty=(Tensor[(66), float64],) */;
  %951.0
}

def @func_5002() -> (Tensor[(3, ?, 2), float64],) {
  %952 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  (%952,)
}

def @func_1215() -> (Tensor[(3, ?, 2), float64],) {
  %953 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 2), float32] */;
  %954 = exp(%953) /* ty=Tensor[(3, 1, 2), float32] */;
  %955 = cast(meta[relay.Constant][62] /* ty=Tensor[(3, 1, 2), float32] */, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %956 = shape_of(%954, dtype="int32") /* ty=Tensor[(3), int32] */;
  %957 = cast(%954, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %958 = dyn.reshape(%955, %956, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %959 = equal(%957, %958) /* ty=Tensor[(3, ?, 2), bool] */;
  %960 = cast(%959, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %961 = cos(%960) /* ty=Tensor[(3, ?, 2), float64] */;
  (%961,)
}

def @func_1438(%var_1394: Tensor[(3, 10, 2), float64], %var_1409: Tensor[(1, 144), float32], %var_1410: Tensor[(560), uint8]) -> (Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) {
  %962 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %963 = %962.0;
  %964 = cast(%963, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %965 = cast(%var_1394, dtype="bool") /* ty=Tensor[(3, 10, 2), bool] */;
  %966 = cast(%var_1409, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %967 = cast(%var_1410, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %968 = reshape(%966, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %969 = reshape(%967, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %970 = @func_477(%968, %969) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %971 = %970.0;
  %972 = cast(%971, dtype="bool") /* ty=Tensor[(1, 12, 12), bool] */;
  %973 = shape_of(%var_1409, dtype="int32") /* ty=Tensor[(2), int32] */;
  %974 = cast(%var_1409, dtype="bool") /* ty=Tensor[(1, 144), bool] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %976 = less_equal(%974, %975) /* ty=Tensor[(?, 144), bool] */;
  %977 = cast(%976, dtype="float32") /* ty=Tensor[(?, 144), float32] */;
  %978 = less_equal(%964, %965) /* ty=Tensor[(3, 10, 2), bool] */;
  %979 = asinh(%977) /* ty=Tensor[(?, 144), float32] */;
  (%978, %var_1410, %979)
}

def @func_1284(%var_1255: Tensor[(3, 11, 2), float64]) -> (Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) {
  %980 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %981 = %980.0;
  %982 = cast(%981, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
  %983 = cast(%var_1255, dtype="uint32") /* ty=Tensor[(3, 11, 2), uint32] */;
  %984 = cast(%981, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %985 = cast(meta[relay.Constant][63] /* ty=Tensor[(3, 3, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %986 = add(%982, %983) /* ty=Tensor[(3, 11, 2), uint32] */;
  %987 = less(%984, %985) /* ty=Tensor[(3, 3, 2), bool] */;
  (%986, %987)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1579(%var_1575: Tensor[(3, 15, 2), float64], %var_1576: Tensor[(3, 15, 2), float64], %var_1577: Tensor[(1, 60), float64], %var_1578: Tensor[(144), float32]) -> (Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) {
  %26 = fn (%var_1547: Tensor[(3, 15, 2), float64], %var_1554: Tensor[(3, 15, 2), float64], %var_1568: Tensor[(1, 60), float64], %var_1569: Tensor[(144), float32]) -> (Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) {
    %0 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %1 = %0.0;
    %2 = cast(%1, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
    %3 = cast(%var_1547, dtype="uint32") /* ty=Tensor[(3, 15, 2), uint32] */;
    %4 = cast(%var_1554, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
    %5 = shape_of(%var_1547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %6 = cast(%var_1547, dtype="float32") /* ty=Tensor[(3, 15, 2), float32] */;
    %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %8 = cast(%var_1568, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
    %9 = cast(%var_1569, dtype="float32") /* ty=Tensor[(144), float32] */;
    %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 560), uint8] */, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
    %11 = reshape(%8, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
    %12 = reshape(%9, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
    %13 = reshape(%10, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %14 = @func_1438(%11, %12, %13) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
    %15 = cast(%var_1568, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
    %16 = cast(%var_1569, dtype="float32") /* ty=Tensor[(144), float32] */;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 560), uint8] */, dtype="uint8") /* ty=Tensor[(1, 560), uint8] */;
    %18 = reshape(%15, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
    %19 = reshape(%16, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
    %20 = reshape(%17, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %21 = @func_1438(%18, %19, %20) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
    %22 = add(%2, %3) /* ty=Tensor[(3, 15, 2), uint32] */;
    %23 = power(%6, %7) /* ty=Tensor[(3, 15, 2), float32] */;
    %24 = %14.2;
    %25 = %21.2;
    (%22, %23, %24, %var_1568, %var_1569, meta[relay.Constant][0] /* ty=Tensor[(1, 560), uint8] */, %25)
  };
  %26(%var_1575, %var_1576, %var_1577, %var_1578) /* ty=(Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) */
}

def @func_2658() -> (Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) {
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %28 = cast(meta[relay.Constant][1] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %29 = reshape(%27, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %30 = reshape(%28, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %31 = @func_477(%29, %30) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %32 = %31.0;
  %33 = cast(meta[relay.Constant][2] /* ty=Tensor[(144), float32] */, dtype="uint16") /* ty=Tensor[(144), uint16] */;
  %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(3), int32] */;
  %35 = cast(%32, dtype="uint16") /* ty=Tensor[(1, 12, 12), uint16] */;
  %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %37 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %38 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %39 = left_shift(%35, %36) /* ty=Tensor[(?, 12, 12), uint16] */;
  %40 = %37.0;
  (%38, meta[relay.Constant][1] /* ty=Tensor[(560), uint8] */, %39, %40)
}

def @func_8156() -> (Tensor[(3, ?, 2), float32],) {
  %41 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
  %43 = rsqrt(%42) /* ty=Tensor[(3, ?, 2), float32] */;
  (%43,)
}

def @func_7464(%var_7462: Tensor[(3, 11, 2), float64], %var_7463: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), uint16], Tensor[(3, ?, 2), float64], Tensor[(3, 11, 2), uint64], Tensor[(864), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 280, 2), bool], Tensor[(144), float32], Tensor[(3, ?, 2), float64]) {
  %74 = fn (%var_7425: Tensor[(3, 11, 2), float64], %var_7448: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), uint16], Tensor[(3, ?, 2), float64], Tensor[(3, 11, 2), uint64], Tensor[(864), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 280, 2), bool], Tensor[(144), float32], Tensor[(3, ?, 2), float64]) {
    %44 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %45 = %44.0;
    %46 = @func_5002() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %47 = %46.0;
    %48 = cast(%47, dtype="uint16") /* ty=Tensor[(3, ?, 2), uint16] */;
    %49 = shape_of(%45, dtype="int32") /* ty=Tensor[(3), int32] */;
    %50 = cast(%45, dtype="uint16") /* ty=Tensor[(3, ?, 2), uint16] */;
    %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %52 = @func_5956() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %53 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
    %54 = cast(%53, dtype="uint64") /* ty=Tensor[(3, ?, 2), uint64] */;
    %55 = cast(%var_7425, dtype="uint64") /* ty=Tensor[(3, 11, 2), uint64] */;
    %56 = cast(meta[relay.Constant][3] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %57 = reshape(%56, newshape=[864]) /* ty=Tensor[(864), uint8] */;
    %58 = @func_6363(%57) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */;
    %59 = %58.5;
    %60 = cast(meta[relay.Constant][3] /* ty=Tensor[(864), uint8] */, dtype="float64") /* ty=Tensor[(864), float64] */;
    %61 = cast(%59, dtype="float64") /* ty=float64 */;
    %62 = @func_5693() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
    %63 = cast(%var_7448, dtype="float32") /* ty=Tensor[(144), float32] */;
    %64 = reshape(%63, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %65 = @func_2760(%64) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
    %66 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %67 = bitwise_or(%50, %51) /* ty=Tensor[(3, ?, 2), uint16] */;
    %68 = %52.0;
    %69 = subtract(%54, %55) /* ty=Tensor[(3, 11, 2), uint64] */;
    %70 = maximum(%60, %61) /* ty=Tensor[(864), float64] */;
    %71 = %62.0;
    %72 = %65.2;
    %73 = %66.0;
    (%67, %68, %69, %70, %71, %72, %var_7448, %73)
  };
  %74(%var_7462, %var_7463) /* ty=(Tensor[(3, ?, 2), uint16], Tensor[(3, ?, 2), float64], Tensor[(3, 11, 2), uint64], Tensor[(864), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 280, 2), bool], Tensor[(144), float32], Tensor[(3, ?, 2), float64]) */
}

def @func_2154() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %79 = fn () -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
    %75 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %76 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %77 = %75.0;
    %78 = %76.0;
    (%77, %78)
  };
  %79() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_3060(%var_3058: Tensor[(9, 10, 13), float32], %var_3059: Tensor[(560), uint8]) -> (Tensor[(9, 10, 13), float32], Tensor[(9, 10, 13), bool], Tensor[(560), uint8], Tensor[(560), uint8]) {
  @func_3056(%var_3058, %var_3059) /* ty=(Tensor[(9, 10, 13), float32], Tensor[(9, 10, 13), bool], Tensor[(560), uint8], Tensor[(560), uint8]) */
}

def @func_1334() -> (Tensor[(3, ?, 2), float64],) {
  %81 = fn () -> (Tensor[(3, ?, 2), float64],) {
    %80 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
    (%80,)
  };
  %81() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_1438(%var_1394: Tensor[(3, 10, 2), float64], %var_1409: Tensor[(1, 144), float32], %var_1410: Tensor[(560), uint8]) -> (Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) {
  %82 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %83 = %82.0;
  %84 = cast(%83, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %85 = cast(%var_1394, dtype="bool") /* ty=Tensor[(3, 10, 2), bool] */;
  %86 = cast(%var_1409, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
  %87 = cast(%var_1410, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %88 = reshape(%86, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %89 = reshape(%87, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %90 = @func_477(%88, %89) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %91 = %90.0;
  %92 = cast(%91, dtype="bool") /* ty=Tensor[(1, 12, 12), bool] */;
  %93 = shape_of(%var_1409, dtype="int32") /* ty=Tensor[(2), int32] */;
  %94 = cast(%var_1409, dtype="bool") /* ty=Tensor[(1, 144), bool] */;
  %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %96 = less_equal(%94, %95) /* ty=Tensor[(?, 144), bool] */;
  %97 = cast(%96, dtype="float32") /* ty=Tensor[(?, 144), float32] */;
  %98 = less_equal(%84, %85) /* ty=Tensor[(3, 10, 2), bool] */;
  %99 = asinh(%97) /* ty=Tensor[(?, 144), float32] */;
  (%98, %var_1410, %99)
}

def @func_2984() -> (Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %106 = fn () -> (Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
    %100 = @func_2870() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */;
    %101 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %102 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %103 = %100.1;
    %104 = %101.0;
    %105 = %102.0;
    (%103, %104, %105)
  };
  %106() /* ty=(Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_6073() -> (Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) {
  %117 = fn () -> (Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) {
    %107 = @func_4900() /* ty=(Tensor[(66), float64],) */;
    %108 = %107.0;
    %109 = cast(%108, dtype="float64") /* ty=Tensor[(66), float64] */;
    %110 = cast(meta[relay.Constant][4] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %112 = reshape(%109, newshape=[11, 6]) /* ty=Tensor[(11, 6), float64] */;
    %113 = reshape(%110, newshape=[]) /* ty=int8 */;
    %114 = reshape(%111, newshape=[864]) /* ty=Tensor[(864), uint8] */;
    %115 = @func_4317(%112, %113, %114) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */;
    %116 = %115.1;
    (%108, %116, meta[relay.Constant][4] /* ty=int8 */, meta[relay.Constant][5] /* ty=Tensor[(864), uint8] */)
  };
  %117() /* ty=(Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) */
}

def @func_7869() -> (Tensor[(3, ?, 2), float64],) {
  %118 = @func_6051() /* ty=Tensor[(3, ?, 2), float64] */;
  (%118,)
}

def @func_4929() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %119 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %120 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %121 = %119.0;
  %122 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %123 = %120.0;
  (%121, %122, %123)
}

def @func_6263(%var_6262: Tensor[(4, 140), int64]) -> (Tensor[(66), float64], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], int8, Tensor[(864), uint8], Tensor[(66), float64], Tensor[(4, 140), int64]) {
  %144 = fn (%var_6259: Tensor[(4, 140), int64]) -> (Tensor[(66), float64], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], int8, Tensor[(864), uint8], Tensor[(66), float64], Tensor[(4, 140), int64]) {
    %124 = @func_5776() /* ty=(Tensor[(66), float64], Tensor[(3, ?, 2), float64]) */;
    %125 = @func_6072() /* ty=(Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) */;
    %126 = @func_5776() /* ty=(Tensor[(66), float64], Tensor[(3, ?, 2), float64]) */;
    %127 = %125.0;
    %128 = cast(%127, dtype="float64") /* ty=Tensor[(66), float64] */;
    %129 = cast(meta[relay.Constant][6] /* ty=int8 */, dtype="int8") /* ty=int8 */;
    %130 = cast(meta[relay.Constant][7] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %131 = reshape(%128, newshape=[11, 6]) /* ty=Tensor[(11, 6), float64] */;
    %132 = reshape(%129, newshape=[]) /* ty=int8 */;
    %133 = reshape(%130, newshape=[864]) /* ty=Tensor[(864), uint8] */;
    %134 = @func_4317(%131, %132, %133) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */;
    %135 = cast(%var_6259, dtype="int64") /* ty=Tensor[(4, 140), int64] */;
    %136 = cast(%var_6259, dtype="int64") /* ty=Tensor[(4, 140), int64] */;
    %137 = reshape(%135, newshape=[5, 16, 7]) /* ty=Tensor[(5, 16, 7), int64] */;
    %138 = reshape(%136, newshape=[5, 16, 7]) /* ty=Tensor[(5, 16, 7), int64] */;
    %139 = @func_4850(%137, %138) /* ty=(Tensor[(5, 16, 7), int64], Tensor[(144), float32], Tensor[(66), float64], Tensor[(2, 72), float32]) */;
    %140 = %124.0;
    %141 = %126.1;
    %142 = %134.11;
    %143 = %139.2;
    (%140, %127, %141, %142, meta[relay.Constant][6] /* ty=int8 */, meta[relay.Constant][7] /* ty=Tensor[(864), uint8] */, %143, %var_6259)
  };
  %144(%var_6262) /* ty=(Tensor[(66), float64], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], int8, Tensor[(864), uint8], Tensor[(66), float64], Tensor[(4, 140), int64]) */
}

def @func_8264() -> (Tensor[(3, ?, 2), float64],) {
  %145 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  (%145,)
}

def @func_1537() -> (Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) {
  %152 = fn () -> (Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) {
    %146 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %148 = reshape(%147, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
    %149 = @func_1284(%148) /* ty=(Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) */;
    %150 = %146.0;
    %151 = %149.1;
    (%150, %151, meta[relay.Constant][8] /* ty=Tensor[(66), float64] */)
  };
  %152() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */
}

def @func_6806() -> (Tensor[(3, ?, 2), float64],) {
  @func_6804() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_3582() -> Tensor[(3, ?, 2), float64] {
  @func_3580() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_5587(%var_5585: Tensor[(1920), bool]) -> (Tensor[(66), float32], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) {
  @func_5584(%var_5585) /* ty=(Tensor[(66), float32], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) */
}

def @func_5002() -> (Tensor[(3, ?, 2), float64],) {
  %153 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  (%153,)
}

def @func_6573() -> (Tensor[(3, ?, 2), float64],) {
  @func_6571() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_5118() -> Tensor[(560), uint8] {
  %154 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %154.1
}

def @func_3696(%var_3686: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), int32] {
  %155 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %156 = %155.0;
  %157 = cast(%156, dtype="int32") /* ty=Tensor[(3, ?, 2), int32] */;
  %158 = cast(%var_3686, dtype="int32") /* ty=Tensor[(3, 3, 2), int32] */;
  right_shift(%157, %158) /* ty=Tensor[(3, 3, 2), int32] */
}

def @func_7512() -> Tensor[(3, ?, 2), float64] {
  @func_6051() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_7928(%var_7926: Tensor[(12, 11, 13), uint64], %var_7927: Tensor[(12, 11, 13), uint64]) -> (Tensor[(12, 11, 13), bool], Tensor[(3, ?, 2), float64], Tensor[(9, 5, 15), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(8, 70), uint8]) {
  @func_7924(%var_7926, %var_7927) /* ty=(Tensor[(12, 11, 13), bool], Tensor[(3, ?, 2), float64], Tensor[(9, 5, 15), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(8, 70), uint8]) */
}

def @func_8063(%var_8062: Tensor[(2, 12, 4), float32]) -> (Tensor[(2, 12, 4), float32], Tensor[(3, ?, 2), float64]) {
  %163 = fn (%var_8055: Tensor[(2, 12, 4), float32]) -> (Tensor[(2, 12, 4), float32], Tensor[(3, ?, 2), float64]) {
    %159 = cast(%var_8055, dtype="float32") /* ty=Tensor[(2, 12, 4), float32] */;
    %160 = @func_6823() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %161 = sinh(%159) /* ty=Tensor[(2, 12, 4), float32] */;
    %162 = %160.0;
    (%161, %162)
  };
  %163(%var_8062) /* ty=(Tensor[(2, 12, 4), float32], Tensor[(3, ?, 2), float64]) */
}

def @func_2660() -> (Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) {
  @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */
}

def @func_6740() -> (Tensor[(18), float64], Tensor[(3, ?, 2), float64]) {
  @func_6738() /* ty=(Tensor[(18), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_7924(%var_7877: Tensor[(12, 11, 13), uint64], %var_7878: Tensor[(12, 11, 13), uint64]) -> (Tensor[(12, 11, 13), bool], Tensor[(3, ?, 2), float64], Tensor[(9, 5, 15), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(8, 70), uint8]) {
  %164 = cast(%var_7878, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %165 = shape_of(%var_7877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%var_7877, dtype="bool") /* ty=Tensor[(12, 11, 13), bool] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %168 = cast(meta[relay.Constant][9] /* ty=Tensor[(675), float32] */, dtype="float32") /* ty=Tensor[(675), float32] */;
  %169 = reshape(%168, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %170 = @func_5677(%169) /* ty=Tensor[(9, 5, 15), float32] */;
  %171 = cast(meta[relay.Constant][9] /* ty=Tensor[(675), float32] */, dtype="float64") /* ty=Tensor[(675), float64] */;
  %172 = shape_of(%170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %173 = cast(%170, dtype="float64") /* ty=Tensor[(9, 5, 15), float64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %175 = cast(meta[relay.Constant][10] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %176 = cast(meta[relay.Constant][10] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %177 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 70), uint8] */, dtype="uint8") /* ty=Tensor[(8, 70), uint8] */;
  %178 = reshape(%175, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %179 = reshape(%176, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %180 = reshape(%177, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %181 = @func_1041(%178, %179, %180) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %182 = not_equal(%166, %167) /* ty=Tensor[(12, 11, 13), bool] */;
  %183 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %184 = power(%173, %174) /* ty=Tensor[(9, 5, 15), float64] */;
  %185 = %181.2;
  (%182, %183, %184, %185, meta[relay.Constant][10] /* ty=Tensor[(704), uint64] */, meta[relay.Constant][11] /* ty=Tensor[(8, 70), uint8] */)
}

def @func_2908(%var_2893: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(30, 2), float64], Tensor[(144), float32]) {
  %186 = cast(meta[relay.Constant][12] /* ty=Tensor[(30, 2), float64] */, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %187 = cast(%var_2893, dtype="float32") /* ty=Tensor[(144), float32] */;
  %188 = reshape(%186, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %189 = reshape(%187, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %190 = @func_1789(%188, %189) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
  %191 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %192 = %190.1;
  (%191, %192, meta[relay.Constant][12] /* ty=Tensor[(30, 2), float64] */, %var_2893)
}

def @func_5120() -> Tensor[(560), uint8] {
  @func_5118() /* ty=Tensor[(560), uint8] */
}

def @func_2565() -> (Tensor[(3, ?, 2), float64],) {
  @func_2563() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_3829() -> (Tensor[(3, ?, 2), float64],) {
  @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_2608(%var_2581: Tensor[(3, 11, 2), float64]) -> (Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) {
  %193 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %194 = %193.0;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %196 = cast(%var_2581, dtype="float64") /* ty=Tensor[(3, 11, 2), float64] */;
  %197 = cast(meta[relay.Constant][13] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %198 = cast(meta[relay.Constant][13] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %199 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 280), uint8] */, dtype="uint8") /* ty=Tensor[(2, 280), uint8] */;
  %200 = reshape(%197, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %201 = reshape(%198, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %202 = reshape(%199, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %203 = @func_1041(%200, %201, %202) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %204 = %203.7;
  %205 = cast(%204, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %206 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(2, 280), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %207 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 280), uint8] */, dtype="bool") /* ty=Tensor[(2, 280), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %209 = divide(%195, %196) /* ty=Tensor[(3, 11, 2), float64] */;
  %210 = not_equal(%207, %208) /* ty=Tensor[(2, 280), bool] */;
  (%209, meta[relay.Constant][13] /* ty=Tensor[(704), uint64] */, %210)
}

def @func_2760(%var_2709: Tensor[(144), float32]) -> (Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) {
  %211 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  %212 = cast(meta[relay.Constant][15] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %213 = cast(%var_2709, dtype="float32") /* ty=Tensor[(144), float32] */;
  %214 = reshape(%212, newshape=[60]) /* ty=Tensor[(60), float64] */;
  %215 = reshape(%213, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %216 = @func_1789(%214, %215) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
  %217 = %216.4;
  %218 = cast(%211, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
  %219 = cast(%217, dtype="int16") /* ty=Tensor[(280, 2), int16] */;
  %220 = bitwise_and(%218, %219) /* ty=Tensor[(3, 280, 2), int16] */;
  %221 = cast(%220, dtype="bool") /* ty=Tensor[(3, 280, 2), bool] */;
  %222 = cast(%211, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %223 = less(%221, %222) /* ty=Tensor[(3, 280, 2), bool] */;
  (meta[relay.Constant][15] /* ty=Tensor[(60), float64] */, %var_2709, %223)
}

def @func_4321(%var_4318: Tensor[(11, 6), float64], %var_4319: int8, %var_4320: Tensor[(864), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) {
  %267 = fn (%var_4248: Tensor[(11, 6), float64], %var_4260: int8, %var_4266: Tensor[(864), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) {
    %224 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %225 = cast(%var_4248, dtype="float64") /* ty=Tensor[(11, 6), float64] */;
    %226 = reshape(%225, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
    %227 = @func_1284(%226) /* ty=(Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) */;
    %228 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
    %229 = cast(%var_4260, dtype="int8") /* ty=int8 */;
    %230 = reshape(%229, newshape=[]) /* ty=int8 */;
    %231 = @func_3915(%230) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 7, 11), float64], int8, Tensor[(12, 12, 12), float64]) */;
    %232 = %231.2;
    %233 = cast(%232, dtype="uint8") /* ty=uint8 */;
    %234 = cast(%var_4266, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %235 = reshape(%233, newshape=[]) /* ty=uint8 */;
    %236 = reshape(%234, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
    %237 = @func_3116(%235, %236) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
    %238 = cast(meta[relay.Constant][17] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %239 = cast(meta[relay.Constant][17] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %240 = reshape(%238, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
    %241 = reshape(%239, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
    %242 = @func_2264(%240, %241) /* ty=(Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) */;
    %243 = cast(meta[relay.Constant][16] /* ty=Tensor[(18), float64] */, dtype="float64") /* ty=Tensor[(18), float64] */;
    %244 = reshape(%243, newshape=[3, 3, 2]) /* ty=Tensor[(3, 3, 2), float64] */;
    %245 = @func_3696(%244) /* ty=Tensor[(3, 3, 2), int32] */;
    %246 = cast(%245, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %247 = log(%246) /* ty=Tensor[(3, 3, 2), float64] */;
    %248 = cast(%247, dtype="float64") /* ty=Tensor[(3, 3, 2), float64] */;
    %249 = atan(%248) /* ty=Tensor[(3, 3, 2), float64] */;
    %250 = cast(%249, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
    %251 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %252 = cast(%247, dtype="float32") /* ty=Tensor[(3, 3, 2), float32] */;
    %253 = cast(%var_4260, dtype="uint8") /* ty=uint8 */;
    %254 = cast(%var_4266, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %255 = reshape(%253, newshape=[]) /* ty=uint8 */;
    %256 = reshape(%254, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
    %257 = @func_3116(%255, %256) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
    %258 = %224.0;
    %259 = %227.1;
    %260 = %228.2;
    %261 = %237.2;
    %262 = %242.1;
    %263 = log2(%250) /* ty=Tensor[(3, 3, 2), float32] */;
    %264 = %251.0;
    %265 = log10(%252) /* ty=Tensor[(3, 3, 2), float32] */;
    %266 = %257.2;
    (%258, meta[relay.Constant][16] /* ty=Tensor[(18), float64] */, %259, %var_4248, %260, %232, %var_4260, %261, %var_4266, %262, meta[relay.Constant][17] /* ty=Tensor[(1936), float32] */, %263, %264, %265, %266)
  };
  %267(%var_4318, %var_4319, %var_4320) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */
}

def @func_3429() -> (Tensor[(3, ?, 2), float64],) {
  %268 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  (%268,)
}

def @func_2871() -> (Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) {
  %278 = fn () -> (Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) {
    %269 = @func_1704() /* ty=Tensor[(66), float64] */;
    %270 = cast(%269, dtype="float32") /* ty=Tensor[(66), float32] */;
    %271 = cast(%269, dtype="float64") /* ty=Tensor[(66), float64] */;
    %272 = reshape(%271, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
    %273 = @func_2608(%272) /* ty=(Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) */;
    %274 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %275 = sin(%270) /* ty=Tensor[(66), float32] */;
    %276 = %273.1;
    %277 = %274.0;
    (%275, %276, %277)
  };
  %278() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */
}

def @func_4053() -> Tensor[(3, ?, 2), float64] {
  %280 = fn () -> Tensor[(3, ?, 2), float64] {
    %279 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %279.0
  };
  %280() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_4474(%var_4472: Tensor[(22, 3), float64], %var_4473: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) {
  @func_4470(%var_4472, %var_4473) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) */
}

def @func_5866(%var_5865: Tensor[(1728), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(12, 144), int16], Tensor[(1, 144), float32], Tensor[(1728), uint8]) {
  %290 = fn (%var_5862: Tensor[(1728), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(12, 144), int16], Tensor[(1, 144), float32], Tensor[(1728), uint8]) {
    %281 = @func_5693() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
    %282 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
    %283 = cast(%var_5862, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
    %284 = reshape(%282, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
    %285 = reshape(%283, newshape=[12, 144]) /* ty=Tensor[(12, 144), uint8] */;
    %286 = @func_1907(%284, %285) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) */;
    %287 = @func_2231() /* ty=Tensor[(3, ?, 2), float64] */;
    %288 = %281.1;
    %289 = %286.8;
    (%287, %288, %289, meta[relay.Constant][18] /* ty=Tensor[(1, 144), float32] */, %var_5862)
  };
  %290(%var_5865) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(12, 144), int16], Tensor[(1, 144), float32], Tensor[(1728), uint8]) */
}

def @func_6773() -> Tensor[(3, ?, 2), float64] {
  %291 = @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %291.0
}

def @func_7057() -> (Tensor[(3, ?, 2), float64], Tensor[(16, 8, 15), bool], Tensor[(1920), bool], Tensor[(3, ?, 2), float64]) {
  %292 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %293 = %292.0;
  %294 = @func_2231() /* ty=Tensor[(3, ?, 2), float64] */;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %296 = shape_of(%293, dtype="int32") /* ty=Tensor[(3), int32] */;
  %297 = cast(%293, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %299 = cast(meta[relay.Constant][19] /* ty=Tensor[(1920), bool] */, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %300 = cast(meta[relay.Constant][19] /* ty=Tensor[(1920), bool] */, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %301 = reshape(%299, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %302 = reshape(%300, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %303 = mod(%297, %298) /* ty=Tensor[(3, ?, 2), float64] */;
  %304 = @func_3308(%301, %302) /* ty=Tensor[(16, 8, 15), bool] */;
  %305 = @func_6773() /* ty=Tensor[(3, ?, 2), float64] */;
  (%303, %304, meta[relay.Constant][19] /* ty=Tensor[(1920), bool] */, %305)
}

def @func_6439() -> (Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) {
  %320 = fn () -> (Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) {
    %306 = @func_5002() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %307 = %306.0;
    %308 = cast(%307, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
    %309 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 16, 2), float64] */, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
    %310 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 16, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
    %311 = cos(%310) /* ty=Tensor[(3, 16, 2), float64] */;
    %312 = cast(%311, dtype="uint32") /* ty=Tensor[(3, 16, 2), uint32] */;
    %313 = cast(%307, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
    %314 = cast(meta[relay.Constant][21] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %315 = reshape(%314, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %316 = @func_1686(%315) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
    %317 = power(%308, %309) /* ty=Tensor[(3, 16, 2), float32] */;
    %318 = multiply(%312, %313) /* ty=Tensor[(3, 16, 2), uint32] */;
    %319 = %316.0;
    (%317, %318, %319, meta[relay.Constant][21] /* ty=Tensor[(560), uint8] */)
  };
  %320() /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) */
}

def @func_5733(%var_5731: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  @func_5730(%var_5731) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */
}

def @func_3496(%var_3495: int8) -> (Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) {
  %337 = fn (%var_3449: int8) -> (Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) {
    %321 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
    %322 = cast(meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %323 = reshape(%322, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %324 = @func_2760(%323) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
    %325 = cast(%var_3449, dtype="int8") /* ty=int8 */;
    %326 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 7, 11), int8] */, dtype="int8") /* ty=Tensor[(8, 7, 11), int8] */;
    %327 = multiply(%325, %326) /* ty=Tensor[(8, 7, 11), int8] */;
    %328 = cast(%var_3449, dtype="bool") /* ty=bool */;
    %329 = cast(%327, dtype="bool") /* ty=Tensor[(8, 7, 11), bool] */;
    %330 = logical_or(%328, %329) /* ty=Tensor[(8, 7, 11), bool] */;
    %331 = cast(%330, dtype="float32") /* ty=Tensor[(8, 7, 11), float32] */;
    %332 = sin(%331) /* ty=Tensor[(8, 7, 11), float32] */;
    %333 = cast(%332, dtype="float64") /* ty=Tensor[(8, 7, 11), float64] */;
    %334 = %321.0;
    %335 = %324.0;
    %336 = log2(%333) /* ty=Tensor[(8, 7, 11), float64] */;
    (%334, %335, meta[relay.Constant][22] /* ty=Tensor[(144), float32] */, %336)
  };
  %337(%var_3495) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) */
}

def @func_6775() -> Tensor[(3, ?, 2), float64] {
  @func_6773() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_6113(%var_6112: Tensor[(3, 12, 2), float64]) -> (Tensor[(3, 12, 2), int32], Tensor[(3, ?, 2), float64]) {
  %345 = fn (%var_6091: Tensor[(3, 12, 2), float64]) -> (Tensor[(3, 12, 2), int32], Tensor[(3, ?, 2), float64]) {
    %338 = @func_2563() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %339 = %338.0;
    %340 = cast(%339, dtype="int32") /* ty=Tensor[(3, ?, 2), int32] */;
    %341 = cast(%var_6091, dtype="int32") /* ty=Tensor[(3, 12, 2), int32] */;
    %342 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %343 = bitwise_or(%340, %341) /* ty=Tensor[(3, 12, 2), int32] */;
    %344 = %342.0;
    (%343, %344)
  };
  %345(%var_6112) /* ty=(Tensor[(3, 12, 2), int32], Tensor[(3, ?, 2), float64]) */
}

def @func_7127(%var_7124: Tensor[(90), float64], %var_7125: Tensor[(60), float64], %var_7126: Tensor[(144, 1), float32]) -> (Tensor[(3, ?, 2), float32], Tensor[(1, 60), float64], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144, 1), float32], Tensor[(11, 16, 11), bool], Tensor[(1936), float32], Tensor[(864), uint8], Tensor[(864), uint8]) {
  %368 = fn (%var_7106: Tensor[(90), float64], %var_7107: Tensor[(60), float64], %var_7108: Tensor[(144, 1), float32]) -> (Tensor[(3, ?, 2), float32], Tensor[(1, 60), float64], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144, 1), float32], Tensor[(11, 16, 11), bool], Tensor[(1936), float32], Tensor[(864), uint8], Tensor[(864), uint8]) {
    %346 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
    %347 = cast(%var_7106, dtype="float64") /* ty=Tensor[(90), float64] */;
    %348 = cast(%var_7106, dtype="float64") /* ty=Tensor[(90), float64] */;
    %349 = cast(%var_7107, dtype="float64") /* ty=Tensor[(60), float64] */;
    %350 = cast(%var_7108, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
    %351 = reshape(%347, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
    %352 = reshape(%348, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
    %353 = reshape(%349, newshape=[1, 60]) /* ty=Tensor[(1, 60), float64] */;
    %354 = reshape(%350, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %355 = @func_1574(%351, %352, %353, %354) /* ty=(Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) */;
    %356 = cast(meta[relay.Constant][24] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %357 = cast(meta[relay.Constant][24] /* ty=Tensor[(1936), float32] */, dtype="float32") /* ty=Tensor[(1936), float32] */;
    %358 = reshape(%356, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
    %359 = reshape(%357, newshape=[11, 16, 11]) /* ty=Tensor[(11, 16, 11), float32] */;
    %360 = @func_2264(%358, %359) /* ty=(Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) */;
    %361 = cast(meta[relay.Constant][25] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %362 = reshape(%361, newshape=[864]) /* ty=Tensor[(864), uint8] */;
    %363 = @func_6363(%362) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */;
    %364 = %346.0;
    %365 = %355.3;
    %366 = %360.0;
    %367 = %363.6;
    (%364, %365, %var_7106, %var_7107, %var_7108, %366, meta[relay.Constant][24] /* ty=Tensor[(1936), float32] */, %367, meta[relay.Constant][25] /* ty=Tensor[(864), uint8] */)
  };
  %368(%var_7124, %var_7125, %var_7126) /* ty=(Tensor[(3, ?, 2), float32], Tensor[(1, 60), float64], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144, 1), float32], Tensor[(11, 16, 11), bool], Tensor[(1936), float32], Tensor[(864), uint8], Tensor[(864), uint8]) */
}

def @func_7841(%var_7840: Tensor[(3, 14, 11), float32]) -> Tensor[(3, 14, 11), float64] {
  %372 = fn (%var_7824: Tensor[(3, 14, 11), float32]) -> Tensor[(3, 14, 11), float64] {
    %369 = cast(%var_7824, dtype="float32") /* ty=Tensor[(3, 14, 11), float32] */;
    %370 = sqrt(%369) /* ty=Tensor[(3, 14, 11), float32] */;
    %371 = cast(%370, dtype="float64") /* ty=Tensor[(3, 14, 11), float64] */;
    asin(%371) /* ty=Tensor[(3, 14, 11), float64] */
  };
  %372(%var_7840) /* ty=Tensor[(3, 14, 11), float64] */
}

def @func_7864() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %373 = @func_2153() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %374 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %375 = %373.0;
  %376 = @func_6051() /* ty=Tensor[(3, ?, 2), float64] */;
  %377 = %374.0;
  (%375, %376, %377)
}

def @func_8240(%var_8239: Tensor[(8, 8, 5), float64]) -> (Tensor[(8, 8, 5), float64], Tensor[(144), float32], Tensor[(144), float32], Tensor[(8, 14, 5), bool], Tensor[(1728), uint8]) {
  %390 = fn (%var_8205: Tensor[(8, 8, 5), float64]) -> (Tensor[(8, 8, 5), float64], Tensor[(144), float32], Tensor[(144), float32], Tensor[(8, 14, 5), bool], Tensor[(1728), uint8]) {
    %378 = cast(%var_8205, dtype="float64") /* ty=Tensor[(8, 8, 5), float64] */;
    %379 = cast(meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %380 = reshape(%379, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %381 = @func_2760(%380) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
    %382 = cast(meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
    %383 = cast(meta[relay.Constant][27] /* ty=Tensor[(1728), uint8] */, dtype="uint8") /* ty=Tensor[(1728), uint8] */;
    %384 = reshape(%382, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
    %385 = reshape(%383, newshape=[12, 144]) /* ty=Tensor[(12, 144), uint8] */;
    %386 = @func_1907(%384, %385) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) */;
    %387 = atan(%378) /* ty=Tensor[(8, 8, 5), float64] */;
    %388 = %381.1;
    %389 = %386.5;
    (%387, %388, meta[relay.Constant][26] /* ty=Tensor[(144), float32] */, %389, meta[relay.Constant][27] /* ty=Tensor[(1728), uint8] */)
  };
  %390(%var_8239) /* ty=(Tensor[(8, 8, 5), float64], Tensor[(144), float32], Tensor[(144), float32], Tensor[(8, 14, 5), bool], Tensor[(1728), uint8]) */
}

def @func_7984(%var_7968: Tensor[(66), float64]) -> Tensor[(66), float64] {
  %391 = @func_1704() /* ty=Tensor[(66), float64] */;
  %392 = cast(%var_7968, dtype="float64") /* ty=Tensor[(66), float64] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(1), int32] */;
  %394 = cast(%391, dtype="float64") /* ty=Tensor[(66), float64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?), float64] */;
  floor_divide(%394, %395) /* ty=Tensor[(66), float64] */
}

def @func_1686(%var_1682: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %396 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %397 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %398 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %399 = %398.0;
  %400 = cast(%399, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %401 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %402 = cast(%397, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %403 = dyn.reshape(%400, %401, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %404 = cast(%var_1682, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %405 = cast(%var_1682, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %406 = reshape(%404, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %407 = reshape(%405, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %408 = @func_172(%406, %407) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %409 = %396.0;
  %410 = greater_equal(%402, %403) /* ty=Tensor[(3, ?, 2), bool] */;
  %411 = %408.0;
  (%409, %410, %411, %var_1682)
}

def @func_4850(%var_4812: Tensor[(5, 16, 7), int64], %var_4813: Tensor[(5, 16, 7), int64]) -> (Tensor[(5, 16, 7), int64], Tensor[(144), float32], Tensor[(66), float64], Tensor[(2, 72), float32]) {
  %412 = cast(%var_4813, dtype="int64") /* ty=Tensor[(5, 16, 7), int64] */;
  %413 = shape_of(%var_4812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %414 = cast(%var_4812, dtype="int64") /* ty=Tensor[(5, 16, 7), int64] */;
  %415 = dyn.reshape(%412, %413, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %416 = cast(meta[relay.Constant][28] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
  %417 = cast(meta[relay.Constant][29] /* ty=Tensor[(2, 72), float32] */, dtype="float32") /* ty=Tensor[(2, 72), float32] */;
  %418 = reshape(%416, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
  %419 = reshape(%417, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %420 = @func_4470(%418, %419) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) */;
  %421 = subtract(%414, %415) /* ty=Tensor[(5, 16, 7), int64] */;
  %422 = %420.3;
  (%421, %422, meta[relay.Constant][28] /* ty=Tensor[(66), float64] */, meta[relay.Constant][29] /* ty=Tensor[(2, 72), float32] */)
}

def @func_4117() -> (Tensor[(3, ?, 2), float64],) {
  @func_4115() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_1443(%var_1440: Tensor[(3, 10, 2), float64], %var_1441: Tensor[(1, 144), float32], %var_1442: Tensor[(560), uint8]) -> (Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) {
  @func_1438(%var_1440, %var_1441, %var_1442) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */
}

def @func_5919() -> (Tensor[(?, 12, 12), uint16],) {
  %425 = fn () -> (Tensor[(?, 12, 12), uint16],) {
    %423 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
    %424 = %423.2;
    (%424,)
  };
  %425() /* ty=(Tensor[(?, 12, 12), uint16],) */
}

def @func_3699(%var_3697: Tensor[(3, 3, 2), float64]) -> Tensor[(3, 3, 2), int32] {
  @func_3696(%var_3697) /* ty=Tensor[(3, 3, 2), int32] */
}

def @func_6804() -> (Tensor[(3, ?, 2), float64],) {
  %426 = @func_6773() /* ty=Tensor[(3, ?, 2), float64] */;
  (%426,)
}

def @func_7514() -> Tensor[(3, ?, 2), float64] {
  @func_7512() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_1627() -> (Tensor[(3, ?, 2), float64],) {
  %427 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %428 = %427.0;
  (%428,)
}

def @func_1301() -> Tensor[(3, ?, 2), float64] {
  @func_1299() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_3730() -> (Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) {
  %429 = @func_2790() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %430 = @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(?, 12, 12), float64] */;
  %432 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 12, 12), uint16] */, dtype="float64") /* ty=Tensor[(12, 12, 12), float64] */;
  %433 = %429.0;
  %434 = power(%431, %432) /* ty=Tensor[(12, 12, 12), float64] */;
  (%433, %434)
}

def @func_8121(%var_8119: float32, %var_8120: Tensor[(1, 6, 16), float32]) -> (Tensor[(1, 6, 16), float32], Tensor[(1, 6, 16), float32]) {
  %440 = fn (%var_8110: float32, %var_8111: Tensor[(1, 6, 16), float32]) -> (Tensor[(1, 6, 16), float32], Tensor[(1, 6, 16), float32]) {
    %435 = cast(%var_8110, dtype="float32") /* ty=float32 */;
    %436 = cast(%var_8111, dtype="float32") /* ty=Tensor[(1, 6, 16), float32] */;
    %437 = cast(%var_8111, dtype="float32") /* ty=Tensor[(1, 6, 16), float32] */;
    %438 = power(%435, %436) /* ty=Tensor[(1, 6, 16), float32] */;
    %439 = cos(%437) /* ty=Tensor[(1, 6, 16), float32] */;
    (%438, %439)
  };
  %440(%var_8119, %var_8120) /* ty=(Tensor[(1, 6, 16), float32], Tensor[(1, 6, 16), float32]) */
}

def @func_6982(%var_6981: Tensor[(864), uint8]) -> (Tensor[(66), float64], Tensor[(3, ?, 2), float32], Tensor[(864), uint8]) {
  %447 = fn (%var_6964: Tensor[(864), uint8]) -> (Tensor[(66), float64], Tensor[(3, ?, 2), float32], Tensor[(864), uint8]) {
    %441 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
    %442 = cast(%var_6964, dtype="uint8") /* ty=Tensor[(864), uint8] */;
    %443 = reshape(%442, newshape=[864]) /* ty=Tensor[(864), uint8] */;
    %444 = @func_6363(%443) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */;
    %445 = %441.2;
    %446 = %444.1;
    (%445, %446, %var_6964)
  };
  %447(%var_6981) /* ty=(Tensor[(66), float64], Tensor[(3, ?, 2), float32], Tensor[(864), uint8]) */
}

def @func_1803() -> (Tensor[(3, ?, 2), float64],) {
  %448 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %449 = %448.0;
  (%449,)
}

def @func_1284(%var_1255: Tensor[(3, 11, 2), float64]) -> (Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) {
  %450 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %451 = %450.0;
  %452 = cast(%451, dtype="uint32") /* ty=Tensor[(3, ?, 2), uint32] */;
  %453 = cast(%var_1255, dtype="uint32") /* ty=Tensor[(3, 11, 2), uint32] */;
  %454 = cast(%451, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %455 = cast(meta[relay.Constant][31] /* ty=Tensor[(3, 3, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 3, 2), bool] */;
  %456 = add(%452, %453) /* ty=Tensor[(3, 11, 2), uint32] */;
  %457 = less(%454, %455) /* ty=Tensor[(3, 3, 2), bool] */;
  (%456, %457)
}

def @func_3056(%var_3026: Tensor[(9, 10, 13), float32], %var_3047: Tensor[(560), uint8]) -> (Tensor[(9, 10, 13), float32], Tensor[(9, 10, 13), bool], Tensor[(560), uint8], Tensor[(560), uint8]) {
  %458 = cast(%var_3026, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %459 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %460 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 10, 13), float32] */, dtype="float32") /* ty=Tensor[(9, 10, 13), float32] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %462 = cast(%var_3026, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %463 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(9, 10, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %464 = cast(meta[relay.Constant][32] /* ty=Tensor[(9, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %465 = dyn.reshape(%462, %463, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %466 = cast(%var_3047, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %467 = reshape(%466, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %468 = @func_1686(%467) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %469 = power(%460, %461) /* ty=Tensor[(9, 10, 13), float32] */;
  %470 = logical_or(%464, %465) /* ty=Tensor[(9, 10, 13), bool] */;
  %471 = %468.3;
  (%469, %470, %471, %var_3047)
}

def @func_7191() -> (Tensor[(96), float64], Tensor[(3, 16, 2), int8], Tensor[(3, 16, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(4, 140), uint8], Tensor[(72), float64], Tensor[(560), uint8]) {
  @func_7189() /* ty=(Tensor[(96), float64], Tensor[(3, 16, 2), int8], Tensor[(3, 16, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(4, 140), uint8], Tensor[(72), float64], Tensor[(560), uint8]) */
}

def @func_3431() -> (Tensor[(3, ?, 2), float64],) {
  @func_3429() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_1329() -> (Tensor[(3, ?, 2), float64],) {
  @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_2462(%var_2461: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), int16],) {
  %477 = fn (%var_2443: Tensor[(3, 4, 2), float64]) -> (Tensor[(3, 4, 2), int16],) {
    %472 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %473 = %472.0;
    %474 = cast(%473, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
    %475 = cast(%var_2443, dtype="int16") /* ty=Tensor[(3, 4, 2), int16] */;
    %476 = bitwise_and(%474, %475) /* ty=Tensor[(3, 4, 2), int16] */;
    (%476,)
  };
  %477(%var_2461) /* ty=(Tensor[(3, 4, 2), int16],) */
}

def @func_5226(%var_5224: Tensor[(560, 1), uint8], %var_5225: Tensor[(60), float64]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 12, 2), bool], Tensor[(8, 14, 5), uint16], Tensor[(704), uint64], Tensor[(560, 1), uint8], Tensor[(560), uint8], Tensor[(60), float64], Tensor[(144), float32]) {
  @func_5222(%var_5224, %var_5225) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 12, 2), bool], Tensor[(8, 14, 5), uint16], Tensor[(704), uint64], Tensor[(560, 1), uint8], Tensor[(560), uint8], Tensor[(60), float64], Tensor[(144), float32]) */
}

def @func_2264(%var_2257: Tensor[(11, 16, 11), float32], %var_2258: Tensor[(11, 16, 11), float32]) -> (Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) {
  %478 = cast(%var_2258, dtype="bool") /* ty=Tensor[(11, 16, 11), bool] */;
  %479 = shape_of(%var_2257, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%var_2257, dtype="bool") /* ty=Tensor[(11, 16, 11), bool] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %482 = cast(%var_2257, dtype="float32") /* ty=Tensor[(11, 16, 11), float32] */;
  %483 = less_equal(%480, %481) /* ty=Tensor[(11, 16, 11), bool] */;
  %484 = rsqrt(%482) /* ty=Tensor[(11, 16, 11), float32] */;
  (%483, %484)
}

def @main(%var_8339: Tensor[(675), float32]) -> (Tensor[(12), float64], Tensor[(?, 9, 10), float32], Tensor[(66), bool], Tensor[(3, ?, 2), float64], Tensor[(?, 9, 10), bool], Tensor[(9, 5, 15), float32], Tensor[(675), float32], Tensor[(?, 9, 10), uint16], Tensor[(?, 9, 10), float32]) {
  %485 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 9, 10), float64] */, dtype="float64") /* ty=Tensor[(1, 9, 10), float64] */;
  %486 = atanh(%485) /* ty=Tensor[(1, 9, 10), float64] */;
  %487 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 9, 10), float64] */, dtype="uint64") /* ty=Tensor[(1, 9, 10), uint64] */;
  %488 = shape_of(%486, dtype="int32") /* ty=Tensor[(3), int32] */;
  %489 = cast(%486, dtype="uint64") /* ty=Tensor[(1, 9, 10), uint64] */;
  %490 = dyn.reshape(%487, %488, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %491 = logical_xor(%489, %490) /* ty=Tensor[(?, 9, 10), uint64] */;
  %492 = cast(%486, dtype="float32") /* ty=Tensor[(1, 9, 10), float32] */;
  %493 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %494 = cast(%491, dtype="float32") /* ty=Tensor[(?, 9, 10), float32] */;
  %495 = dyn.reshape(%492, %493, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %496 = cast(meta[relay.Constant][33] /* ty=Tensor[(12), float64] */, dtype="float64") /* ty=Tensor[(12), float64] */;
  %497 = reshape(%496, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
  %498 = @func_4385(%497) /* ty=(Tensor[(3, 4, 2), int16], Tensor[(24, 1), float64], Tensor[(3, 2, 2), int64], Tensor[(66), float64]) */;
  %499 = %498.3;
  %500 = cast(meta[relay.Constant][35] /* ty=Tensor[(66), float64] */, dtype="bool") /* ty=Tensor[(66), bool] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(1), int32] */;
  %502 = cast(%499, dtype="bool") /* ty=Tensor[(66), bool] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?), bool] */;
  %504 = @func_2791() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %505 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 9, 10), float64] */, dtype="uint32") /* ty=Tensor[(1, 9, 10), uint32] */;
  %506 = shape_of(%491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%491, dtype="uint32") /* ty=Tensor[(?, 9, 10), uint32] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %509 = multiply(%507, %508) /* ty=Tensor[(?, 9, 10), uint32] */;
  %510 = cast(%491, dtype="bool") /* ty=Tensor[(?, 9, 10), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(?, 9, 10), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = cast(%var_8339, dtype="float32") /* ty=Tensor[(675), float32] */;
  %515 = reshape(%514, newshape=[9, 5, 15]) /* ty=Tensor[(9, 5, 15), float32] */;
  %516 = cast(%486, dtype="uint16") /* ty=Tensor[(1, 9, 10), uint16] */;
  %517 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %518 = cast(%509, dtype="uint16") /* ty=Tensor[(?, 9, 10), uint16] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %520 = cast(%509, dtype="float32") /* ty=Tensor[(?, 9, 10), float32] */;
  %521 = floor_divide(%494, %495) /* ty=Tensor[(?, 9, 10), float32] */;
  %522 = greater(%502, %503) /* ty=Tensor[(66), bool] */;
  %523 = %504.0;
  %524 = logical_or(%512, %513) /* ty=Tensor[(?, 9, 10), bool] */;
  %525 = @func_5677(%515) /* ty=Tensor[(9, 5, 15), float32] */;
  %526 = right_shift(%518, %519) /* ty=Tensor[(?, 9, 10), uint16] */;
  %527 = asinh(%520) /* ty=Tensor[(?, 9, 10), float32] */;
  (meta[relay.Constant][33] /* ty=Tensor[(12), float64] */, %521, %522, %523, %524, %525, %var_8339, %526, %527)
}

def @func_3673(%var_3671: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), int16], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(8, 70), uint8], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) {
  @func_3670(%var_3671) /* ty=(Tensor[(3, 2, 2), int16], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(8, 70), uint8], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) */
}

def @func_4634() -> Tensor[(3, ?, 2), float64] {
  %529 = fn () -> Tensor[(3, ?, 2), float64] {
    %528 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
    %528.0
  };
  %529() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_7871() -> (Tensor[(3, ?, 2), float64],) {
  @func_7869() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_6571() -> (Tensor[(3, ?, 2), float64],) {
  %530 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %531 = %530.0;
  (%531,)
}

def @func_7987(%var_7985: Tensor[(66), float64]) -> Tensor[(66), float64] {
  @func_7984(%var_7985) /* ty=Tensor[(66), float64] */
}

def @func_3915(%var_3888: int8) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 7, 11), float64], int8, Tensor[(12, 12, 12), float64]) {
  %532 = cast(%var_3888, dtype="int8") /* ty=int8 */;
  %533 = reshape(%532, newshape=[]) /* ty=int8 */;
  %534 = @func_3494(%533) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) */;
  %535 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %536 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %537 = %534.3;
  %538 = %535.1;
  (%536, %537, %var_3888, %538)
}

def @func_3311(%var_3309: Tensor[(16, 8, 15), bool], %var_3310: Tensor[(16, 8, 15), bool]) -> Tensor[(16, 8, 15), bool] {
  %543 = fn (%var_3300: Tensor[(16, 8, 15), bool], %var_3301: Tensor[(16, 8, 15), bool]) -> Tensor[(16, 8, 15), bool] {
    %539 = cast(%var_3301, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
    %540 = shape_of(%var_3300, dtype="int32") /* ty=Tensor[(3), int32] */;
    %541 = cast(%var_3300, dtype="bool") /* ty=Tensor[(16, 8, 15), bool] */;
    %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%541, %542) /* ty=Tensor[(16, 8, 15), bool] */
  };
  %543(%var_3309, %var_3310) /* ty=Tensor[(16, 8, 15), bool] */
}

def @func_3120(%var_3118: uint8, %var_3119: Tensor[(6, 12, 12), uint8]) -> (Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) {
  @func_3116(%var_3118, %var_3119) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */
}

def @func_2232() -> Tensor[(3, ?, 2), float64] {
  %545 = fn () -> Tensor[(3, ?, 2), float64] {
    %544 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %544.0
  };
  %545() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_6825() -> (Tensor[(3, ?, 2), float64],) {
  @func_6823() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_8188() -> (Tensor[(3, 16, 2), float32],) {
  %546 = @func_6438() /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) */;
  %547 = %546.1;
  %548 = cast(%547, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %549 = sin(%548) /* ty=Tensor[(3, 16, 2), float32] */;
  (%549,)
}

def @func_2763(%var_2761: Tensor[(144), float32]) -> (Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) {
  @func_2760(%var_2761) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */
}

def @func_4744() -> (Tensor[(3, ?, 2), float64],) {
  %550 = @func_4065() /* ty=Tensor[(3, ?, 2), float64] */;
  (%550,)
}

def @func_3258() -> Tensor[(?, 12, 12), uint16] {
  %551 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
  %551.2
}

def @func_5380() -> (Tensor[(40, 14), uint8], Tensor[(3, ?, 2), bool], Tensor[(1, 560), uint8], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) {
  %552 = @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %553 = %552.0;
  %554 = cast(meta[relay.Constant][36] /* ty=Tensor[(40, 14), uint8] */, dtype="uint8") /* ty=Tensor[(40, 14), uint8] */;
  %555 = reshape(%554, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %556 = @func_2845(%555) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %559 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%553, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = cast(meta[relay.Constant][37] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %563 = cast(meta[relay.Constant][37] /* ty=Tensor[(90), float64] */, dtype="float64") /* ty=Tensor[(90), float64] */;
  %564 = cast(meta[relay.Constant][38] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
  %565 = cast(meta[relay.Constant][39] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %566 = reshape(%562, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
  %567 = reshape(%563, newshape=[3, 15, 2]) /* ty=Tensor[(3, 15, 2), float64] */;
  %568 = reshape(%564, newshape=[1, 60]) /* ty=Tensor[(1, 60), float64] */;
  %569 = reshape(%565, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %570 = @func_1574(%566, %567, %568, %569) /* ty=(Tensor[(3, 15, 2), uint32], Tensor[(3, 15, 2), float32], Tensor[(?, 144), float32], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(1, 560), uint8], Tensor[(?, 144), float32]) */;
  %571 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %572 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %573 = less(%560, %561) /* ty=Tensor[(3, ?, 2), bool] */;
  %574 = %570.5;
  %575 = %571.0;
  %576 = %572.0;
  (meta[relay.Constant][36] /* ty=Tensor[(40, 14), uint8] */, %573, %574, meta[relay.Constant][37] /* ty=Tensor[(90), float64] */, meta[relay.Constant][38] /* ty=Tensor[(60), float64] */, meta[relay.Constant][39] /* ty=Tensor[(144), float32] */, %575, %576)
}

def @func_7675(%var_7652: Tensor[(1920), bool], %var_7668: Tensor[(3, 16, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(1920), bool], Tensor[(3, 16, 2), float64]) {
  %577 = cast(%var_7652, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %578 = reshape(%577, newshape=[1920]) /* ty=Tensor[(1920), bool] */;
  %579 = @func_5584(%578) /* ty=(Tensor[(66), float32], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) */;
  %580 = @func_6804() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %583 = cast(%var_7668, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
  %584 = %579.1;
  %585 = mod(%582, %583) /* ty=Tensor[(3, 16, 2), float64] */;
  (%584, %var_7652, %585)
}

def @func_2791() -> (Tensor[(3, ?, 2), float64],) {
  %588 = fn () -> (Tensor[(3, ?, 2), float64],) {
    %586 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %587 = %586.0;
    (%587,)
  };
  %588() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_2611(%var_2609: Tensor[(3, 11, 2), float64]) -> (Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) {
  @func_2608(%var_2609) /* ty=(Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) */
}

def @func_2024() -> (Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(560), uint8], Tensor[(3, ?, 2), float64]) {
  %605 = fn () -> (Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(560), uint8], Tensor[(3, ?, 2), float64]) {
    %589 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %590 = %589.0;
    %591 = cast(%590, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
    %592 = cast(meta[relay.Constant][40] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
    %593 = cast(meta[relay.Constant][40] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
    %594 = cast(meta[relay.Constant][41] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %595 = reshape(%592, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
    %596 = reshape(%593, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
    %597 = reshape(%594, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %598 = @func_1041(%595, %596, %597) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
    %599 = %598.2;
    %600 = cast(%599, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %601 = reshape(%600, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %602 = @func_1686(%601) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
    %603 = tan(%591) /* ty=Tensor[(3, ?, 2), float64] */;
    %604 = %602.0;
    (%603, %599, meta[relay.Constant][40] /* ty=Tensor[(704), uint64] */, meta[relay.Constant][41] /* ty=Tensor[(560), uint8] */, %604)
  };
  %605() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(560), uint8], Tensor[(3, ?, 2), float64]) */
}

def @func_3827() -> (Tensor[(3, ?, 2), float64],) {
  %606 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  %607 = cast(%606, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %608 = log2(%607) /* ty=Tensor[(3, ?, 2), float64] */;
  %609 = cast(%606, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
  %611 = cast(%608, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %613 = divide(%611, %612) /* ty=Tensor[(3, ?, 2), float64] */;
  (%613,)
}

def @func_5730(%var_5726: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %614 = @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %615 = cast(%var_5726, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %616 = reshape(%615, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %617 = @func_1686(%616) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %618 = %614.0;
  %619 = %617.2;
  (%618, %619, %var_5726)
}

def @func_6461(%var_6454: Tensor[(2, 5, 9), uint32], %var_6455: Tensor[(2, 5, 9), uint32]) -> Tensor[(2, 5, 9), uint32] {
  %620 = cast(%var_6455, dtype="uint32") /* ty=Tensor[(2, 5, 9), uint32] */;
  %621 = shape_of(%var_6454, dtype="int32") /* ty=Tensor[(3), int32] */;
  %622 = cast(%var_6454, dtype="uint32") /* ty=Tensor[(2, 5, 9), uint32] */;
  %623 = dyn.reshape(%620, %621, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  multiply(%622, %623) /* ty=Tensor[(2, 5, 9), uint32] */
}

def @func_1910(%var_1908: Tensor[(1, 144), float32], %var_1909: Tensor[(12, 144), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) {
  %656 = fn (%var_1857: Tensor[(1, 144), float32], %var_1893: Tensor[(12, 144), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) {
    %624 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %625 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
    %626 = cast(meta[relay.Constant][43] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %627 = reshape(%625, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
    %628 = reshape(%626, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %629 = @func_477(%627, %628) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
    %630 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %631 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
    %632 = cast(meta[relay.Constant][43] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %633 = cast(meta[relay.Constant][43] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %634 = reshape(%632, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
    %635 = reshape(%633, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
    %636 = @func_172(%634, %635) /* ty=(Tensor[(8, 14, 5), bool],) */;
    %637 = cast(meta[relay.Constant][44] /* ty=Tensor[(60), float64] */, dtype="float64") /* ty=Tensor[(60), float64] */;
    %638 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 144), float32] */, dtype="float32") /* ty=Tensor[(1, 144), float32] */;
    %639 = reshape(%637, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %640 = reshape(%638, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %641 = @func_1789(%639, %640) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
    %642 = cast(%var_1857, dtype="uint8") /* ty=Tensor[(1, 144), uint8] */;
    %643 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(1, 144), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %644 = cast(meta[relay.Constant][42] /* ty=Tensor[(1, 144), float32] */, dtype="uint8") /* ty=Tensor[(1, 144), uint8] */;
    %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
    %646 = subtract(%644, %645) /* ty=Tensor[(?, 144), uint8] */;
    %647 = cast(%646, dtype="int16") /* ty=Tensor[(?, 144), int16] */;
    %648 = cast(%var_1893, dtype="int16") /* ty=Tensor[(12, 144), int16] */;
    %649 = %624.0;
    %650 = %629.0;
    %651 = %630.0;
    %652 = %631.2;
    %653 = %636.0;
    %654 = %641.2;
    %655 = add(%647, %648) /* ty=Tensor[(12, 144), int16] */;
    (%649, %650, meta[relay.Constant][43] /* ty=Tensor[(560), uint8] */, %651, %652, %653, %654, meta[relay.Constant][44] /* ty=Tensor[(60), float64] */, %655)
  };
  %656(%var_1908, %var_1909) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(1, 12, 12), float32], Tensor[(560), uint8], Tensor[(3, ?, 2), float64], Tensor[(66), float64], Tensor[(8, 14, 5), bool], Tensor[(60), float64], Tensor[(60), float64], Tensor[(12, 144), int16]) */
}

def @func_1805() -> (Tensor[(3, ?, 2), float64],) {
  @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_5279(%var_5264: uint8, %var_5272: Tensor[(144, 1), float32]) -> (Tensor[(66), float64], uint8, Tensor[(864), uint8], Tensor[(3, ?, 2), float64], Tensor[(144, 1), float32], Tensor[(6, 12, 12), int32]) {
  %657 = @func_1704() /* ty=Tensor[(66), float64] */;
  %658 = cast(%657, dtype="float64") /* ty=Tensor[(66), float64] */;
  %659 = cast(%var_5272, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %660 = reshape(%658, newshape=[22, 3]) /* ty=Tensor[(22, 3), float64] */;
  %661 = reshape(%659, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %662 = @func_4470(%660, %661) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) */;
  %663 = cast(%var_5264, dtype="uint8") /* ty=uint8 */;
  %664 = cast(meta[relay.Constant][45] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %665 = reshape(%663, newshape=[]) /* ty=uint8 */;
  %666 = reshape(%664, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
  %667 = @func_3116(%665, %666) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
  %668 = %667.0;
  %669 = cast(%var_5264, dtype="uint8") /* ty=uint8 */;
  %670 = cast(meta[relay.Constant][45] /* ty=Tensor[(864), uint8] */, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %671 = reshape(%669, newshape=[]) /* ty=uint8 */;
  %672 = reshape(%670, newshape=[6, 12, 12]) /* ty=Tensor[(6, 12, 12), uint8] */;
  %673 = @func_3116(%671, %672) /* ty=(Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) */;
  %674 = %673.0;
  %675 = cast(%674, dtype="int32") /* ty=Tensor[(6, 12, 12), int32] */;
  %676 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %677 = cast(%668, dtype="int32") /* ty=Tensor[(6, 12, 12), int32] */;
  %678 = dyn.reshape(%675, %676, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %679 = %662.0;
  %680 = right_shift(%677, %678) /* ty=Tensor[(6, 12, 12), int32] */;
  (%657, %var_5264, meta[relay.Constant][45] /* ty=Tensor[(864), uint8] */, %679, %var_5272, %680)
}

def @func_5777() -> (Tensor[(66), float64], Tensor[(3, ?, 2), float64]) {
  %685 = fn () -> (Tensor[(66), float64], Tensor[(3, ?, 2), float64]) {
    %681 = @func_4900() /* ty=(Tensor[(66), float64],) */;
    %682 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %683 = %681.0;
    %684 = %682.0;
    (%683, %684)
  };
  %685() /* ty=(Tensor[(66), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_6148(%var_6129: Tensor[(8, 10, 13), int64], %var_6130: Tensor[(8, 10, 13), int64]) -> Tensor[(8, 10, 13), bool] {
  %686 = cast(%var_6130, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %687 = shape_of(%var_6129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%var_6129, dtype="bool") /* ty=Tensor[(8, 10, 13), bool] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%688, %689) /* ty=Tensor[(8, 10, 13), bool] */
}

def @func_7604(%var_7603: Tensor[(3, 6, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(3, 6, 2), int32]) {
  %696 = fn (%var_7597: Tensor[(3, 6, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(3, 6, 2), int32]) {
    %690 = @func_1803() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %691 = %690.0;
    %692 = cast(%691, dtype="int32") /* ty=Tensor[(3, ?, 2), int32] */;
    %693 = cast(%var_7597, dtype="int32") /* ty=Tensor[(3, 6, 2), int32] */;
    %694 = @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */;
    %695 = minimum(%692, %693) /* ty=Tensor[(3, 6, 2), int32] */;
    (%694, %695)
  };
  %696(%var_7603) /* ty=(Tensor[(?, 12, 12), uint16], Tensor[(3, 6, 2), int32]) */
}

def @func_2911(%var_2909: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(30, 2), float64], Tensor[(144), float32]) {
  @func_2908(%var_2909) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(30, 2), float64], Tensor[(144), float32]) */
}

def @func_6366(%var_6364: Tensor[(864), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) {
  @func_6363(%var_6364) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) */
}

def @func_1629() -> (Tensor[(3, ?, 2), float64],) {
  @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_4385(%var_4384: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 4, 2), int16], Tensor[(24, 1), float64], Tensor[(3, 2, 2), int64], Tensor[(66), float64]) {
  %717 = fn (%var_4333: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 4, 2), int16], Tensor[(24, 1), float64], Tensor[(3, 2, 2), int64], Tensor[(66), float64]) {
    %697 = cast(meta[relay.Constant][46] /* ty=Tensor[(24, 1), float64] */, dtype="float64") /* ty=Tensor[(24, 1), float64] */;
    %698 = reshape(%697, newshape=[3, 4, 2]) /* ty=Tensor[(3, 4, 2), float64] */;
    %699 = @func_2460(%698) /* ty=(Tensor[(3, 4, 2), int16],) */;
    %700 = @func_2658() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64]) */;
    %701 = %700.3;
    %702 = cast(%701, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
    %703 = cast(%var_4333, dtype="bool") /* ty=Tensor[(3, 2, 2), bool] */;
    %704 = logical_or(%702, %703) /* ty=Tensor[(3, 2, 2), bool] */;
    %705 = cast(%704, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
    %706 = sqrt(%705) /* ty=Tensor[(3, 2, 2), float64] */;
    %707 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 2, 2), float64] */, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
    %708 = shape_of(%706, dtype="int32") /* ty=Tensor[(3), int32] */;
    %709 = cast(%706, dtype="int64") /* ty=Tensor[(3, 2, 2), int64] */;
    %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %711 = cast(meta[relay.Constant][47] /* ty=Tensor[(3, 2, 2), float64] */, dtype="float64") /* ty=Tensor[(3, 2, 2), float64] */;
    %712 = reshape(%711, newshape=[3, 2, 2]) /* ty=Tensor[(3, 2, 2), float64] */;
    %713 = @func_3670(%712) /* ty=(Tensor[(3, 2, 2), int16], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(8, 70), uint8], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) */;
    %714 = %699.0;
    %715 = logical_xor(%709, %710) /* ty=Tensor[(3, 2, 2), int64] */;
    %716 = %713.1;
    (%714, meta[relay.Constant][46] /* ty=Tensor[(24, 1), float64] */, %715, %716)
  };
  %717(%var_4384) /* ty=(Tensor[(3, 4, 2), int16], Tensor[(24, 1), float64], Tensor[(3, 2, 2), int64], Tensor[(66), float64]) */
}

def @func_4115() -> (Tensor[(3, ?, 2), float64],) {
  %718 = @func_2023() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(704), uint64], Tensor[(560), uint8], Tensor[(3, ?, 2), float64]) */;
  %719 = %718.0;
  (%719,)
}

def @func_5283(%var_5281: uint8, %var_5282: Tensor[(144, 1), float32]) -> (Tensor[(66), float64], uint8, Tensor[(864), uint8], Tensor[(3, ?, 2), float64], Tensor[(144, 1), float32], Tensor[(6, 12, 12), int32]) {
  @func_5279(%var_5281, %var_5282) /* ty=(Tensor[(66), float64], uint8, Tensor[(864), uint8], Tensor[(3, ?, 2), float64], Tensor[(144, 1), float32], Tensor[(6, 12, 12), int32]) */
}

def @func_8266() -> (Tensor[(3, ?, 2), float64],) {
  @func_8264() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_4854(%var_4852: Tensor[(5, 16, 7), int64], %var_4853: Tensor[(5, 16, 7), int64]) -> (Tensor[(5, 16, 7), int64], Tensor[(144), float32], Tensor[(66), float64], Tensor[(2, 72), float32]) {
  @func_4850(%var_4852, %var_4853) /* ty=(Tensor[(5, 16, 7), int64], Tensor[(144), float32], Tensor[(66), float64], Tensor[(2, 72), float32]) */
}

def @func_3860(%var_3858: Tensor[(4, 6, 3), float64], %var_3859: Tensor[(4, 140), uint8]) -> (Tensor[(4, 6, 3), float64], Tensor[(560), uint8], Tensor[(4, 140), uint8]) {
  %726 = fn (%var_3841: Tensor[(4, 6, 3), float64], %var_3853: Tensor[(4, 140), uint8]) -> (Tensor[(4, 6, 3), float64], Tensor[(560), uint8], Tensor[(4, 140), uint8]) {
    %720 = cast(%var_3841, dtype="float64") /* ty=Tensor[(4, 6, 3), float64] */;
    %721 = cast(%var_3853, dtype="uint8") /* ty=Tensor[(4, 140), uint8] */;
    %722 = reshape(%721, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %723 = @func_2845(%722) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
    %724 = asin(%720) /* ty=Tensor[(4, 6, 3), float64] */;
    %725 = %723.2;
    (%724, %725, %var_3853)
  };
  %726(%var_3858, %var_3859) /* ty=(Tensor[(4, 6, 3), float64], Tensor[(560), uint8], Tensor[(4, 140), uint8]) */
}

def @func_7286(%var_7285: Tensor[(3, 16, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(3, 16, 2), float32], Tensor[(12, 12, 12), float64]) {
  %738 = fn (%var_7272: Tensor[(3, 16, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(3, 16, 2), float32], Tensor[(12, 12, 12), float64]) {
    %727 = @func_5918() /* ty=(Tensor[(?, 12, 12), uint16],) */;
    %728 = @func_6913() /* ty=(Tensor[(3, 16, 2), float64],) */;
    %729 = %728.0;
    %730 = cast(%var_7272, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
    %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
    %732 = cast(%729, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
    %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %734 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
    %735 = %727.0;
    %736 = divide(%732, %733) /* ty=Tensor[(3, 16, 2), float32] */;
    %737 = %734.1;
    (%735, %736, %737)
  };
  %738(%var_7285) /* ty=(Tensor[(?, 12, 12), uint16], Tensor[(3, 16, 2), float32], Tensor[(12, 12, 12), float64]) */
}

def @func_7866() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  @func_7864() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_1966() -> (Tensor[(3, ?, 2), float64],) {
  %739 = @func_1327() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %740 = %739.0;
  (%740,)
}

def @func_7059() -> (Tensor[(3, ?, 2), float64], Tensor[(16, 8, 15), bool], Tensor[(1920), bool], Tensor[(3, ?, 2), float64]) {
  @func_7057() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(16, 8, 15), bool], Tensor[(1920), bool], Tensor[(3, ?, 2), float64]) */
}

def @func_7189() -> (Tensor[(96), float64], Tensor[(3, 16, 2), int8], Tensor[(3, 16, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(4, 140), uint8], Tensor[(72), float64], Tensor[(560), uint8]) {
  %741 = @func_4065() /* ty=Tensor[(3, ?, 2), float64] */;
  %742 = cast(meta[relay.Constant][48] /* ty=Tensor[(96), float64] */, dtype="float64") /* ty=Tensor[(96), float64] */;
  %743 = reshape(%742, newshape=[3, 16, 2]) /* ty=Tensor[(3, 16, 2), float64] */;
  %744 = @func_3199(%743) /* ty=(Tensor[(3, 16, 2), bool],) */;
  %745 = %744.0;
  %746 = cast(%741, dtype="int8") /* ty=Tensor[(3, ?, 2), int8] */;
  %747 = cast(%745, dtype="int8") /* ty=Tensor[(3, 16, 2), int8] */;
  %748 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 16, 2), bool] */, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %749 = shape_of(%745, dtype="int32") /* ty=Tensor[(3), int32] */;
  %750 = cast(%745, dtype="float32") /* ty=Tensor[(3, 16, 2), float32] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %752 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %753 = cast(meta[relay.Constant][50] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %754 = cast(meta[relay.Constant][51] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %755 = reshape(%753, newshape=[4, 6, 3]) /* ty=Tensor[(4, 6, 3), float64] */;
  %756 = reshape(%754, newshape=[4, 140]) /* ty=Tensor[(4, 140), uint8] */;
  %757 = @func_3857(%755, %756) /* ty=(Tensor[(4, 6, 3), float64], Tensor[(560), uint8], Tensor[(4, 140), uint8]) */;
  %758 = minimum(%746, %747) /* ty=Tensor[(3, 16, 2), int8] */;
  %759 = floor_mod(%750, %751) /* ty=Tensor[(3, 16, 2), float32] */;
  %760 = %752.0;
  %761 = %757.2;
  (meta[relay.Constant][48] /* ty=Tensor[(96), float64] */, %758, %759, %760, %761, meta[relay.Constant][50] /* ty=Tensor[(72), float64] */, meta[relay.Constant][51] /* ty=Tensor[(560), uint8] */)
}

def @func_1299() -> Tensor[(3, ?, 2), float64] {
  %762 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %762.0
}

def @func_481(%var_479: Tensor[(1, 12, 12), float32], %var_480: Tensor[(560), uint8]) -> (Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  @func_477(%var_479, %var_480) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */
}

def @func_4901() -> (Tensor[(66), float64],) {
  %765 = fn () -> (Tensor[(66), float64],) {
    %763 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
    %764 = %763.2;
    (%764,)
  };
  %765() /* ty=(Tensor[(66), float64],) */
}

def @func_6363(%var_6359: Tensor[(864), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64], int8, Tensor[(66, 1), float64], int8, Tensor[(864), uint8]) {
  %766 = @func_2870() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */;
  %767 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %768 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %769 = cast(meta[relay.Constant][52] /* ty=Tensor[(66, 1), float64] */, dtype="float64") /* ty=Tensor[(66, 1), float64] */;
  %770 = cast(meta[relay.Constant][53] /* ty=int8 */, dtype="int8") /* ty=int8 */;
  %771 = cast(%var_6359, dtype="uint8") /* ty=Tensor[(864), uint8] */;
  %772 = reshape(%769, newshape=[11, 6]) /* ty=Tensor[(11, 6), float64] */;
  %773 = reshape(%770, newshape=[]) /* ty=int8 */;
  %774 = reshape(%771, newshape=[864]) /* ty=Tensor[(864), uint8] */;
  %775 = @func_4317(%772, %773, %774) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(18), float64], Tensor[(3, 3, 2), bool], Tensor[(11, 6), float64], Tensor[(?, 12, 12), uint16], int8, int8, Tensor[(3, ?, 2), float64], Tensor[(864), uint8], Tensor[(11, 16, 11), float32], Tensor[(1936), float32], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), float32], Tensor[(3, ?, 2), float64]) */;
  %776 = %766.2;
  %777 = %767.0;
  %778 = %768.0;
  %779 = %775.5;
  (%776, %777, %778, %779, meta[relay.Constant][52] /* ty=Tensor[(66, 1), float64] */, meta[relay.Constant][53] /* ty=int8 */, %var_6359)
}

def @func_1609() -> (Tensor[(3, ?, 2), float64],) {
  %780 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %781 = %780.0;
  %782 = cast(%781, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %783 = log10(%782) /* ty=Tensor[(3, ?, 2), float64] */;
  (%783,)
}

def @func_4528(%var_4526: Tensor[(3, 11, 14), float32], %var_4527: int8) -> (Tensor[(3, 11, 14), float32], Tensor[(8, 7, 11), float64], int8) {
  %790 = fn (%var_4507: Tensor[(3, 11, 14), float32], %var_4523: int8) -> (Tensor[(3, 11, 14), float32], Tensor[(8, 7, 11), float64], int8) {
    %784 = cast(%var_4507, dtype="float32") /* ty=Tensor[(3, 11, 14), float32] */;
    %785 = cast(%var_4523, dtype="int8") /* ty=int8 */;
    %786 = reshape(%785, newshape=[]) /* ty=int8 */;
    %787 = @func_3494(%786) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(8, 7, 11), float64]) */;
    %788 = sinh(%784) /* ty=Tensor[(3, 11, 14), float32] */;
    %789 = %787.3;
    (%788, %789, %var_4523)
  };
  %790(%var_4526, %var_4527) /* ty=(Tensor[(3, 11, 14), float32], Tensor[(8, 7, 11), float64], int8) */
}

def @func_477(%var_457: Tensor[(1, 12, 12), float32], %var_463: Tensor[(560), uint8]) -> (Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %791 = cast(%var_457, dtype="float32") /* ty=Tensor[(1, 12, 12), float32] */;
  %792 = cast(%var_463, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %793 = cast(%var_463, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %794 = reshape(%792, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %795 = reshape(%793, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %796 = @func_172(%794, %795) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %797 = sinh(%791) /* ty=Tensor[(1, 12, 12), float32] */;
  %798 = %796.0;
  (%797, %798, %var_463)
}

def @func_1215() -> (Tensor[(3, ?, 2), float64],) {
  %799 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 2), float32] */;
  %800 = exp(%799) /* ty=Tensor[(3, 1, 2), float32] */;
  %801 = cast(meta[relay.Constant][54] /* ty=Tensor[(3, 1, 2), float32] */, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %802 = shape_of(%800, dtype="int32") /* ty=Tensor[(3), int32] */;
  %803 = cast(%800, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %805 = equal(%803, %804) /* ty=Tensor[(3, ?, 2), bool] */;
  %806 = cast(%805, dtype="float64") /* ty=Tensor[(3, ?, 2), float64] */;
  %807 = cos(%806) /* ty=Tensor[(3, ?, 2), float64] */;
  (%807,)
}

def @func_1689(%var_1687: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  @func_1686(%var_1687) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */
}

def @func_1705() -> Tensor[(66), float64] {
  %809 = fn () -> Tensor[(66), float64] {
    %808 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
    %808.2
  };
  %809() /* ty=Tensor[(66), float64] */
}

def @func_5677(%var_5670: Tensor[(9, 5, 15), float32]) -> Tensor[(9, 5, 15), float32] {
  %810 = cast(%var_5670, dtype="float32") /* ty=Tensor[(9, 5, 15), float32] */;
  log(%810) /* ty=Tensor[(9, 5, 15), float32] */
}

def @func_6287(%var_6285: Tensor[(144, 1), float32]) -> (Tensor[(704), uint64], Tensor[(30, 2), float64], Tensor[(144, 1), float32]) {
  @func_6284(%var_6285) /* ty=(Tensor[(704), uint64], Tensor[(30, 2), float64], Tensor[(144, 1), float32]) */
}

def @func_7335() -> Tensor[(66), float64] {
  %811 = @func_4900() /* ty=(Tensor[(66), float64],) */;
  %811.0
}

def @func_7337() -> Tensor[(66), float64] {
  @func_7335() /* ty=Tensor[(66), float64] */
}

def @func_4746() -> (Tensor[(3, ?, 2), float64],) {
  @func_4744() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_5222(%var_5185: Tensor[(560, 1), uint8], %var_5193: Tensor[(60), float64]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 12, 2), bool], Tensor[(8, 14, 5), uint16], Tensor[(704), uint64], Tensor[(560, 1), uint8], Tensor[(560), uint8], Tensor[(60), float64], Tensor[(144), float32]) {
  %812 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %813 = @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %814 = %813.0;
  %815 = cast(%814, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
  %816 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 12, 2), float64] */, dtype="bool") /* ty=Tensor[(3, 12, 2), bool] */;
  %817 = cast(meta[relay.Constant][56] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %818 = cast(meta[relay.Constant][56] /* ty=Tensor[(704), uint64] */, dtype="uint64") /* ty=Tensor[(704), uint64] */;
  %819 = cast(%var_5185, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
  %820 = reshape(%817, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %821 = reshape(%818, newshape=[16, 11, 4]) /* ty=Tensor[(16, 11, 4), uint64] */;
  %822 = reshape(%819, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %823 = @func_1041(%820, %821, %822) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */;
  %824 = cast(%var_5193, dtype="float64") /* ty=Tensor[(60), float64] */;
  %825 = cast(meta[relay.Constant][57] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %826 = cast(%var_5185, dtype="uint8") /* ty=Tensor[(560, 1), uint8] */;
  %827 = reshape(%824, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
  %828 = reshape(%825, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
  %829 = reshape(%826, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %830 = @func_1438(%827, %828, %829) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
  %831 = %812.0;
  %832 = logical_or(%815, %816) /* ty=Tensor[(3, 12, 2), bool] */;
  %833 = %823.5;
  %834 = %830.1;
  (%831, %832, %833, meta[relay.Constant][56] /* ty=Tensor[(704), uint64] */, %var_5185, %834, %var_5193, meta[relay.Constant][57] /* ty=Tensor[(144), float32] */)
}

def @func_5694() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  %839 = fn () -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
    %835 = @func_3827() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %836 = @func_4725() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */;
    %837 = %835.0;
    %838 = %836.1;
    (%837, %838)
  };
  %839() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_6914() -> (Tensor[(3, 16, 2), float64],) {
  %844 = fn () -> (Tensor[(3, 16, 2), float64],) {
    %840 = @func_6438() /* ty=(Tensor[(3, 16, 2), float32], Tensor[(3, 16, 2), uint32], Tensor[(3, ?, 2), float64], Tensor[(560), uint8]) */;
    %841 = %840.0;
    %842 = cast(%841, dtype="float64") /* ty=Tensor[(3, 16, 2), float64] */;
    %843 = cosh(%842) /* ty=Tensor[(3, 16, 2), float64] */;
    (%843,)
  };
  %844() /* ty=(Tensor[(3, 16, 2), float64],) */
}

def @func_1968() -> (Tensor[(3, ?, 2), float64],) {
  @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_8190() -> (Tensor[(3, 16, 2), float32],) {
  @func_8188() /* ty=(Tensor[(3, 16, 2), float32],) */
}

def @func_7679(%var_7677: Tensor[(1920), bool], %var_7678: Tensor[(3, 16, 2), float64]) -> (Tensor[(?, 12, 12), uint16], Tensor[(1920), bool], Tensor[(3, 16, 2), float64]) {
  @func_7675(%var_7677, %var_7678) /* ty=(Tensor[(?, 12, 12), uint16], Tensor[(1920), bool], Tensor[(3, 16, 2), float64]) */
}

def @func_4931() -> (Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) {
  @func_4929() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */
}

def @func_4470(%var_4435: Tensor[(22, 3), float64], %var_4449: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(22, 3), float64], Tensor[(60), float64], Tensor[(144), float32]) {
  %845 = @func_1627() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %846 = cast(%var_4435, dtype="float32") /* ty=Tensor[(22, 3), float32] */;
  %847 = rsqrt(%846) /* ty=Tensor[(22, 3), float32] */;
  %848 = cast(%var_4435, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %849 = reshape(%848, newshape=[3, 11, 2]) /* ty=Tensor[(3, 11, 2), float64] */;
  %850 = @func_2608(%849) /* ty=(Tensor[(3, 11, 2), float64], Tensor[(704), uint64], Tensor[(2, 280), bool]) */;
  %851 = %850.0;
  %852 = cast(%851, dtype="float64") /* ty=Tensor[(3, 11, 2), float64] */;
  %853 = shape_of(%847, dtype="int32") /* ty=Tensor[(2), int32] */;
  %854 = cast(%847, dtype="float64") /* ty=Tensor[(22, 3), float64] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %856 = cast(%var_4449, dtype="float32") /* ty=Tensor[(144), float32] */;
  %857 = reshape(%856, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %858 = @func_2760(%857) /* ty=(Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, 280, 2), bool]) */;
  %859 = %845.0;
  %860 = floor_divide(%854, %855) /* ty=Tensor[(22, 3), float64] */;
  %861 = %858.0;
  (%859, %860, %861, %var_4449)
}

def @func_2563() -> (Tensor[(3, ?, 2), float64],) {
  %862 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
  (%862,)
}

def @func_7563(%var_7559: Tensor[(6, 10, 5), int8], %var_7560: Tensor[(6, 10, 5), int8], %var_7561: Tensor[(1, 60), float64], %var_7562: Tensor[(144), float32]) -> (Tensor[(6, 10, 5), float32], Tensor[(6, 10, 5), float64], Tensor[(3, 10, 2), bool], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(60), float64]) {
  %880 = fn (%var_7539: Tensor[(6, 10, 5), int8], %var_7540: Tensor[(6, 10, 5), int8], %var_7549: Tensor[(1, 60), float64], %var_7550: Tensor[(144), float32]) -> (Tensor[(6, 10, 5), float32], Tensor[(6, 10, 5), float64], Tensor[(3, 10, 2), bool], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(60), float64]) {
    %863 = cast(%var_7540, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
    %864 = shape_of(%var_7539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %865 = cast(%var_7539, dtype="int8") /* ty=Tensor[(6, 10, 5), int8] */;
    %866 = dyn.reshape(%863, %864, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %867 = bitwise_and(%865, %866) /* ty=Tensor[(6, 10, 5), int8] */;
    %868 = cast(%867, dtype="float32") /* ty=Tensor[(6, 10, 5), float32] */;
    %869 = cast(%var_7540, dtype="float64") /* ty=Tensor[(6, 10, 5), float64] */;
    %870 = cast(%var_7549, dtype="float64") /* ty=Tensor[(1, 60), float64] */;
    %871 = cast(%var_7550, dtype="float32") /* ty=Tensor[(144), float32] */;
    %872 = reshape(%870, newshape=[60]) /* ty=Tensor[(60), float64] */;
    %873 = reshape(%871, newshape=[144]) /* ty=Tensor[(144), float32] */;
    %874 = @func_1789(%872, %873) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */;
    %875 = @func_5380() /* ty=(Tensor[(40, 14), uint8], Tensor[(3, ?, 2), bool], Tensor[(1, 560), uint8], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) */;
    %876 = exp(%868) /* ty=Tensor[(6, 10, 5), float32] */;
    %877 = log(%869) /* ty=Tensor[(6, 10, 5), float64] */;
    %878 = %874.1;
    %879 = %875.4;
    (%876, %877, %878, %var_7549, %var_7550, %879)
  };
  %880(%var_7559, %var_7560, %var_7561, %var_7562) /* ty=(Tensor[(6, 10, 5), float32], Tensor[(6, 10, 5), float64], Tensor[(3, 10, 2), bool], Tensor[(1, 60), float64], Tensor[(144), float32], Tensor[(60), float64]) */
}

def @func_1327() -> (Tensor[(3, ?, 2), float64],) {
  %881 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %882 = %881.0;
  (%882,)
}

def @func_3260() -> Tensor[(?, 12, 12), uint16] {
  @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */
}

def @func_4726() -> (Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) {
  %888 = fn () -> (Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) {
    %883 = @func_1299() /* ty=Tensor[(3, ?, 2), float64] */;
    %884 = cast(%883, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
    %885 = @func_2153() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
    %886 = cosh(%884) /* ty=Tensor[(3, ?, 2), float32] */;
    %887 = %885.1;
    (%886, %887)
  };
  %888() /* ty=(Tensor[(3, ?, 2), float32], Tensor[(3, ?, 2), float64]) */
}

def @func_1041(%var_980: Tensor[(16, 11, 4), uint64], %var_981: Tensor[(16, 11, 4), uint64], %var_987: Tensor[(560), uint8]) -> (Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) {
  %889 = cast(%var_981, dtype="uint64") /* ty=Tensor[(16, 11, 4), uint64] */;
  %890 = shape_of(%var_980, dtype="int32") /* ty=Tensor[(3), int32] */;
  %891 = cast(%var_980, dtype="uint64") /* ty=Tensor[(16, 11, 4), uint64] */;
  %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %893 = cast(%var_987, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %894 = cast(%var_987, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %895 = reshape(%893, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %896 = reshape(%894, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %897 = @func_172(%895, %896) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %898 = cast(meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %899 = %897.0;
  %900 = cast(%899, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %901 = cast(%899, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %902 = reshape(%900, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %903 = reshape(%901, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %904 = @func_172(%902, %903) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %905 = %904.0;
  %906 = cast(%905, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %907 = reshape(%898, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %908 = reshape(%906, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %909 = @func_477(%907, %908) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %910 = cast(%899, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %911 = cast(%var_987, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %912 = reshape(%910, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %913 = reshape(%911, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %914 = @func_172(%912, %913) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %915 = %914.0;
  %916 = cast(%905, dtype="uint16") /* ty=Tensor[(8, 14, 5), uint16] */;
  %917 = shape_of(%915, dtype="int32") /* ty=Tensor[(3), int32] */;
  %918 = cast(%915, dtype="uint16") /* ty=Tensor[(8, 14, 5), uint16] */;
  %919 = dyn.reshape(%916, %917, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %920 = cast(meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, dtype="float32") /* ty=Tensor[(144), float32] */;
  %921 = %909.2;
  %922 = cast(%921, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %923 = reshape(%920, newshape=[1, 12, 12]) /* ty=Tensor[(1, 12, 12), float32] */;
  %924 = reshape(%922, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %925 = @func_477(%923, %924) /* ty=(Tensor[(1, 12, 12), float32], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %926 = %925.1;
  %927 = cast(%926, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %928 = cast(%905, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %929 = reshape(%927, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %930 = reshape(%928, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %931 = @func_172(%929, %930) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %932 = cast(%905, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %933 = logical_xor(%918, %919) /* ty=Tensor[(8, 14, 5), uint16] */;
  %934 = cast(%933, dtype="uint8") /* ty=Tensor[(8, 14, 5), uint8] */;
  %935 = reshape(%932, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %936 = reshape(%934, newshape=[8, 14, 5]) /* ty=Tensor[(8, 14, 5), uint8] */;
  %937 = @func_172(%935, %936) /* ty=(Tensor[(8, 14, 5), bool],) */;
  %938 = maximum(%891, %892) /* ty=Tensor[(16, 11, 4), uint64] */;
  %939 = %931.0;
  %940 = %937.0;
  (%938, %899, %var_987, %921, meta[relay.Constant][58] /* ty=Tensor[(144), float32] */, %933, %926, %939, %940)
}

def @func_6053() -> Tensor[(3, ?, 2), float64] {
  @func_6051() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_6284(%var_6274: Tensor[(144, 1), float32]) -> (Tensor[(704), uint64], Tensor[(30, 2), float64], Tensor[(144, 1), float32]) {
  %941 = @func_2983() /* ty=(Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
  %942 = cast(%var_6274, dtype="float32") /* ty=Tensor[(144, 1), float32] */;
  %943 = reshape(%942, newshape=[144]) /* ty=Tensor[(144), float32] */;
  %944 = @func_2908(%943) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(30, 2), float64], Tensor[(144), float32]) */;
  %945 = %941.0;
  %946 = %944.2;
  (%945, %946, %var_6274)
}

def @func_3116(%var_3089: uint8, %var_3090: Tensor[(6, 12, 12), uint8]) -> (Tensor[(6, 12, 12), bool], Tensor[(6, 12, 12), int16], Tensor[(3, ?, 2), float64]) {
  %947 = cast(%var_3089, dtype="bool") /* ty=bool */;
  %948 = cast(%var_3090, dtype="bool") /* ty=Tensor[(6, 12, 12), bool] */;
  %949 = cast(meta[relay.Constant][59] /* ty=Tensor[(6, 12, 12), uint8] */, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
  %950 = shape_of(%var_3090, dtype="int32") /* ty=Tensor[(3), int32] */;
  %951 = cast(%var_3090, dtype="int16") /* ty=Tensor[(6, 12, 12), int16] */;
  %952 = dyn.reshape(%949, %950, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %953 = @func_1536() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 3, 2), bool], Tensor[(66), float64]) */;
  %954 = less_equal(%947, %948) /* ty=Tensor[(6, 12, 12), bool] */;
  %955 = logical_xor(%951, %952) /* ty=Tensor[(6, 12, 12), int16] */;
  %956 = %953.0;
  (%954, %955, %956)
}

def @func_8158() -> (Tensor[(3, ?, 2), float32],) {
  @func_8156() /* ty=(Tensor[(3, ?, 2), float32],) */
}

def @func_1287(%var_1285: Tensor[(3, 11, 2), float64]) -> (Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) {
  @func_1284(%var_1285) /* ty=(Tensor[(3, 11, 2), uint32], Tensor[(3, 3, 2), bool]) */
}

def @func_2847(%var_2846: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
  %963 = fn (%var_2832: Tensor[(560), uint8]) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) {
    %957 = @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %958 = cast(%var_2832, dtype="uint8") /* ty=Tensor[(560), uint8] */;
    %959 = reshape(%958, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %960 = @func_1686(%959) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), bool], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
    %961 = %957.0;
    %962 = %960.2;
    (%961, %962, %var_2832)
  };
  %963(%var_2846) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */
}

def @func_8076(%var_8074: Tensor[(1920), bool]) -> (Tensor[(?, 12, 12), uint16], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) {
  %964 = @func_5918() /* ty=(Tensor[(?, 12, 12), uint16],) */;
  %965 = cast(%var_8074, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %966 = cast(%var_8074, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %967 = reshape(%965, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %968 = reshape(%966, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %969 = %964.0;
  %970 = @func_3308(%967, %968) /* ty=Tensor[(16, 8, 15), bool] */;
  (%969, %970, %var_8074)
}

def @func_1217() -> (Tensor[(3, ?, 2), float64],) {
  @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_1611() -> (Tensor[(3, ?, 2), float64],) {
  @func_1609() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_6152(%var_6150: Tensor[(8, 10, 13), int64], %var_6151: Tensor[(8, 10, 13), int64]) -> Tensor[(8, 10, 13), bool] {
  @func_6148(%var_6150, %var_6151) /* ty=Tensor[(8, 10, 13), bool] */
}

def @func_6051() -> Tensor[(3, ?, 2), float64] {
  %971 = @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */;
  %971.0
}

def @func_8079(%var_8077: Tensor[(1920), bool]) -> (Tensor[(?, 12, 12), uint16], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) {
  @func_8076(%var_8077) /* ty=(Tensor[(?, 12, 12), uint16], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) */
}

def @func_5382() -> (Tensor[(40, 14), uint8], Tensor[(3, ?, 2), bool], Tensor[(1, 560), uint8], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) {
  @func_5380() /* ty=(Tensor[(40, 14), uint8], Tensor[(3, ?, 2), bool], Tensor[(1, 560), uint8], Tensor[(90), float64], Tensor[(60), float64], Tensor[(144), float32], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) */
}

def @func_1695() -> Tensor[(3, ?, 2), float64] {
  %972 = fn () -> Tensor[(3, ?, 2), float64] {
    @func_1299() /* ty=Tensor[(3, ?, 2), float64] */
  };
  %972() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_3918(%var_3916: int8) -> (Tensor[(3, ?, 2), float64], Tensor[(8, 7, 11), float64], int8, Tensor[(12, 12, 12), float64]) {
  @func_3915(%var_3916) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 7, 11), float64], int8, Tensor[(12, 12, 12), float64]) */
}

def @func_3580() -> Tensor[(3, ?, 2), float64] {
  %973 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %973.0
}

def @func_6738() -> (Tensor[(18), float64], Tensor[(3, ?, 2), float64]) {
  %974 = @func_6072() /* ty=(Tensor[(66), float64], Tensor[(18), float64], int8, Tensor[(864), uint8]) */;
  %975 = %974.1;
  %976 = @func_1694() /* ty=Tensor[(3, ?, 2), float64] */;
  (%975, %976)
}

def @func_6465(%var_6463: Tensor[(2, 5, 9), uint32], %var_6464: Tensor[(2, 5, 9), uint32]) -> Tensor[(2, 5, 9), uint32] {
  @func_6461(%var_6463, %var_6464) /* ty=Tensor[(2, 5, 9), uint32] */
}

def @func_2268(%var_2266: Tensor[(11, 16, 11), float32], %var_2267: Tensor[(11, 16, 11), float32]) -> (Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) {
  @func_2264(%var_2266, %var_2267) /* ty=(Tensor[(11, 16, 11), bool], Tensor[(11, 16, 11), float32]) */
}

def @func_5680(%var_5678: Tensor[(9, 5, 15), float32]) -> Tensor[(9, 5, 15), float32] {
  @func_5677(%var_5678) /* ty=Tensor[(9, 5, 15), float32] */
}

def @func_5584(%var_5571: Tensor[(1920), bool]) -> (Tensor[(66), float32], Tensor[(?, 12, 12), uint16], Tensor[(3, ?, 2), float64], Tensor[(560), uint8], Tensor[(16, 8, 15), bool], Tensor[(1920), bool]) {
  %977 = @func_2870() /* ty=(Tensor[(66), float32], Tensor[(704), uint64], Tensor[(3, ?, 2), float64]) */;
  %978 = cast(meta[relay.Constant][60] /* ty=Tensor[(560), uint8] */, dtype="uint8") /* ty=Tensor[(560), uint8] */;
  %979 = reshape(%978, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %980 = @func_2845(%979) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %981 = cast(%var_5571, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %982 = cast(%var_5571, dtype="bool") /* ty=Tensor[(1920), bool] */;
  %983 = reshape(%981, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %984 = reshape(%982, newshape=[16, 8, 15]) /* ty=Tensor[(16, 8, 15), bool] */;
  %985 = %977.0;
  %986 = @func_3258() /* ty=Tensor[(?, 12, 12), uint16] */;
  %987 = %980.0;
  %988 = @func_3308(%983, %984) /* ty=Tensor[(16, 8, 15), bool] */;
  (%985, %986, %987, meta[relay.Constant][60] /* ty=Tensor[(560), uint8] */, %988, %var_5571)
}

def @func_3364() -> Tensor[(66), float64] {
  %994 = fn () -> Tensor[(66), float64] {
    %989 = @func_1704() /* ty=Tensor[(66), float64] */;
    %990 = cast(meta[relay.Constant][61] /* ty=Tensor[(66), float64] */, dtype="float64") /* ty=Tensor[(66), float64] */;
    %991 = shape_of(%989, dtype="int32") /* ty=Tensor[(1), int32] */;
    %992 = cast(%989, dtype="float64") /* ty=Tensor[(66), float64] */;
    %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?), float64] */;
    power(%992, %993) /* ty=Tensor[(66), float64] */
  };
  %994() /* ty=Tensor[(66), float64] */
}

def @func_3201(%var_3200: Tensor[(3, 16, 2), float64]) -> (Tensor[(3, 16, 2), bool],) {
  %1000 = fn (%var_3189: Tensor[(3, 16, 2), float64]) -> (Tensor[(3, 16, 2), bool],) {
    %995 = @func_1215() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %996 = %995.0;
    %997 = cast(%996, dtype="bool") /* ty=Tensor[(3, ?, 2), bool] */;
    %998 = cast(%var_3189, dtype="bool") /* ty=Tensor[(3, 16, 2), bool] */;
    %999 = logical_and(%997, %998) /* ty=Tensor[(3, 16, 2), bool] */;
    (%999,)
  };
  %1000(%var_3200) /* ty=(Tensor[(3, 16, 2), bool],) */
}

def @func_5004() -> (Tensor[(3, ?, 2), float64],) {
  @func_5002() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_1046(%var_1043: Tensor[(16, 11, 4), uint64], %var_1044: Tensor[(16, 11, 4), uint64], %var_1045: Tensor[(560), uint8]) -> (Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) {
  @func_1041(%var_1043, %var_1044, %var_1045) /* ty=(Tensor[(16, 11, 4), uint64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8], Tensor[(560), uint8], Tensor[(144), float32], Tensor[(8, 14, 5), uint16], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool], Tensor[(8, 14, 5), bool]) */
}

def @func_4066() -> Tensor[(3, ?, 2), float64] {
  %1002 = fn () -> Tensor[(3, ?, 2), float64] {
    %1001 = @func_2983() /* ty=(Tensor[(704), uint64], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float64]) */;
    %1001.2
  };
  %1002() /* ty=Tensor[(3, ?, 2), float64] */
}

def @func_6823() -> (Tensor[(3, ?, 2), float64],) {
  %1003 = @func_4065() /* ty=Tensor[(3, ?, 2), float64] */;
  (%1003,)
}

def @func_172(%var_161: Tensor[(8, 14, 5), uint8], %var_162: Tensor[(8, 14, 5), uint8]) -> (Tensor[(8, 14, 5), bool],) {
  %1004 = cast(%var_162, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %1005 = shape_of(%var_161, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1006 = cast(%var_161, dtype="bool") /* ty=Tensor[(8, 14, 5), bool] */;
  %1007 = dyn.reshape(%1004, %1005, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1008 = less_equal(%1006, %1007) /* ty=Tensor[(8, 14, 5), bool] */;
  (%1008,)
}

def @func_3670(%var_3624: Tensor[(3, 2, 2), float64]) -> (Tensor[(3, 2, 2), int16], Tensor[(66), float64], Tensor[(3, ?, 2), float64], Tensor[(8, 70), uint8], Tensor[(3, ?, 2), float64], Tensor[(3, ?, 2), float32]) {
  %1009 = @func_2563() /* ty=(Tensor[(3, ?, 2), float64],) */;
  %1010 = %1009.0;
  %1011 = cast(%1010, dtype="int16") /* ty=Tensor[(3, ?, 2), int16] */;
  %1012 = cast(%var_3624, dtype="int16") /* ty=Tensor[(3, 2, 2), int16] */;
  %1013 = cast(meta[relay.Constant][62] /* ty=Tensor[(8, 70), uint8] */, dtype="uint8") /* ty=Tensor[(8, 70), uint8] */;
  %1014 = reshape(%1013, newshape=[560]) /* ty=Tensor[(560), uint8] */;
  %1015 = @func_2845(%1014) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(8, 14, 5), bool], Tensor[(560), uint8]) */;
  %1016 = cast(%1010, dtype="float32") /* ty=Tensor[(3, ?, 2), float32] */;
  %1017 = maximum(%1011, %1012) /* ty=Tensor[(3, 2, 2), int16] */;
  %1018 = @func_1704() /* ty=Tensor[(66), float64] */;
  %1019 = %1015.0;
  %1020 = @func_3580() /* ty=Tensor[(3, ?, 2), float64] */;
  %1021 = sqrt(%1016) /* ty=Tensor[(3, ?, 2), float32] */;
  (%1017, %1018, %1019, meta[relay.Constant][62] /* ty=Tensor[(8, 70), uint8] */, %1020, %1021)
}

def @func_5957() -> (Tensor[(3, ?, 2), float64],) {
  %1024 = fn () -> (Tensor[(3, ?, 2), float64],) {
    %1022 = @func_1966() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %1023 = %1022.0;
    (%1023,)
  };
  %1024() /* ty=(Tensor[(3, ?, 2), float64],) */
}

def @func_176(%var_174: Tensor[(8, 14, 5), uint8], %var_175: Tensor[(8, 14, 5), uint8]) -> (Tensor[(8, 14, 5), bool],) {
  @func_172(%var_174, %var_175) /* ty=(Tensor[(8, 14, 5), bool],) */
}

def @func_1792(%var_1790: Tensor[(60), float64], %var_1791: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) {
  %1035 = fn (%var_1768: Tensor[(60), float64], %var_1769: Tensor[(144), float32]) -> (Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) {
    %1025 = @func_1333() /* ty=(Tensor[(3, ?, 2), float64],) */;
    %1026 = cast(%var_1768, dtype="float64") /* ty=Tensor[(60), float64] */;
    %1027 = cast(%var_1769, dtype="float32") /* ty=Tensor[(144), float32] */;
    %1028 = cast(meta[relay.Constant][63] /* ty=Tensor[(280, 2), uint8] */, dtype="uint8") /* ty=Tensor[(280, 2), uint8] */;
    %1029 = reshape(%1026, newshape=[3, 10, 2]) /* ty=Tensor[(3, 10, 2), float64] */;
    %1030 = reshape(%1027, newshape=[1, 144]) /* ty=Tensor[(1, 144), float32] */;
    %1031 = reshape(%1028, newshape=[560]) /* ty=Tensor[(560), uint8] */;
    %1032 = @func_1438(%1029, %1030, %1031) /* ty=(Tensor[(3, 10, 2), bool], Tensor[(560), uint8], Tensor[(?, 144), float32]) */;
    %1033 = %1025.0;
    %1034 = %1032.0;
    (%1033, %1034, %var_1768, %var_1769, meta[relay.Constant][63] /* ty=Tensor[(280, 2), uint8] */)
  };
  %1035(%var_1790, %var_1791) /* ty=(Tensor[(3, ?, 2), float64], Tensor[(3, 10, 2), bool], Tensor[(60), float64], Tensor[(144), float32], Tensor[(280, 2), uint8]) */
}

def @func_3732() -> (Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) {
  @func_3730() /* ty=(Tensor[(3, ?, 2), float64], Tensor[(12, 12, 12), float64]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen512/build/output.py", line 2573, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:26:35] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

