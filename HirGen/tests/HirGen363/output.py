import tvm
from tvm import relay
from tvm.ir.transform import Sequential
from tvm.contrib import graph_runtime
import numpy as np
mod = tvm.IRModule()
mutated_mod = tvm.IRModule()
var_6 = relay.var("var_6", dtype = "float32", shape = (3, 7, 1))#candidate|6|(3, 7, 1)|var|float32
uop_7 = relay.log2(var_6.astype('float32')) # shape=(3, 7, 1)
uop_18 = relay.exp(uop_7.astype('float64')) # shape=(3, 7, 1)
output = relay.Tuple([uop_18,])
output2 = relay.Tuple([uop_18,])
func_20 = relay.Function([var_6,], output)
mod['func_20'] = func_20
mod = relay.transform.InferType()(mod)
var_21 = relay.var("var_21", dtype = "float32", shape = (3, 7, 1))#candidate|21|(3, 7, 1)|var|float32
output = func_20(var_21)
func_22 = relay.Function([var_21], output)
mutated_mod['func_22'] = func_22
mutated_mod = relay.transform.InferType()(mutated_mod)
var_24 = relay.var("var_24", dtype = "float32", shape = (12, 10, 5))#candidate|24|(12, 10, 5)|var|float32
var_25 = relay.var("var_25", dtype = "float32", shape = (12, 10, 5))#candidate|25|(12, 10, 5)|var|float32
bop_26 = relay.mod(var_24.astype('float32'), relay.reshape(var_25.astype('float32'), relay.shape_of(var_24))) # shape=(12, 10, 5)
output = bop_26
output2 = bop_26
func_30 = relay.Function([var_24,var_25,], output)
mod['func_30'] = func_30
mod = relay.transform.InferType()(mod)
var_31 = relay.var("var_31", dtype = "float32", shape = (12, 10, 5))#candidate|31|(12, 10, 5)|var|float32
var_32 = relay.var("var_32", dtype = "float32", shape = (12, 10, 5))#candidate|32|(12, 10, 5)|var|float32
output = func_30(var_31,var_32,)
func_33 = relay.Function([var_31,var_32,], output)
mutated_mod['func_33'] = func_33
mutated_mod = relay.transform.InferType()(mutated_mod)
const_186 = relay.const([[[8.694433,-0.215315,3.701801,0.555011,-3.134036,7.470936,-3.539730,1.832452,-8.164433,-2.475777,-4.014029,3.802942,6.670808,-5.071733,4.890212],[-6.862561,-5.212911,-1.380954,6.826138,4.320771,2.169567,-7.683690,1.790040,-8.692956,1.710725,-0.364897,3.492312,7.598051,-5.361806,-7.864469],[9.069854,5.490299,1.598897,9.025753,7.139785,-4.506873,6.671357,-2.655407,-5.247043,5.123665,-7.436017,0.315661,0.825960,-6.172273,-4.291070],[1.857382,2.384686,2.144000,-3.318409,-1.594033,-0.816704,-8.759382,1.866809,-4.929368,0.231015,-9.953143,2.851405,-2.895152,-8.724594,6.743185],[1.774823,3.422629,9.707324,7.448078,3.034187,6.479899,-6.601874,-0.478614,9.601400,4.648216,-3.812587,-2.823755,7.270488,-6.868586,8.159299]],[[-5.195652,-6.790394,7.696458,-1.017512,7.352717,-2.423857,2.215550,-3.115559,3.886081,1.401045,-7.097784,-0.364022,7.326830,1.243196,9.512311],[3.179843,3.210467,5.213584,6.868223,8.851166,-5.064220,-9.433085,-9.878599,2.837971,-5.757192,-3.452531,-8.366090,0.820008,-3.160618,6.116155],[8.281421,9.636049,-0.097979,3.534776,3.520264,-8.421418,3.466946,8.363172,0.503819,1.125026,1.157061,-1.296777,-7.118268,-1.150170,8.364246],[-1.639157,-1.195962,4.573035,1.862919,3.522585,-2.883072,-3.017771,-0.055746,0.292562,-1.580254,8.479788,4.523563,9.459100,5.848641,-3.785329],[1.629281,9.165650,2.129123,-6.948362,9.632471,7.476964,8.623510,3.080200,8.904875,0.302824,3.259100,-9.143575,-0.923964,-9.062906,7.450091]],[[-3.529060,-8.466513,-3.298506,4.110284,-4.640045,-1.650154,-7.788689,7.856774,5.688623,-1.484102,-2.098220,4.793634,-8.429327,-9.239728,7.010661],[-1.584435,-0.037012,3.130080,-4.462726,3.841041,-4.373466,-0.962136,6.154141,-3.409892,-7.960869,2.991275,2.505421,4.284998,-1.541261,-6.387791],[0.384935,-8.124771,6.655926,7.461587,-3.528612,-7.257301,-3.357650,5.692773,-9.151073,1.656438,-4.879550,9.496333,8.101514,-1.912633,-3.518177],[-4.716484,4.463846,6.736502,-0.264416,-8.150819,4.327523,3.912717,3.650453,0.807013,5.410811,-5.815818,1.341940,1.948424,1.811970,6.930129],[-4.299425,9.155030,-4.706142,3.551254,0.038266,3.041659,-1.173275,1.626314,2.563936,-6.987389,3.459563,-5.268086,-9.140448,7.965581,0.566665]],[[-8.687437,-7.544926,7.812885,-5.863804,-6.778171,-6.515473,6.684524,-9.306648,-8.100070,8.373054,-1.473650,-6.598553,-4.535244,-8.235114,-3.394586],[-8.993043,-0.408170,-7.535201,2.243675,-4.293742,1.282848,3.350940,0.083541,1.894047,0.986642,-2.621759,6.780582,-7.432398,-6.392805,6.661862],[5.834437,6.811442,5.609336,9.099840,-6.669853,-3.918117,4.753686,-1.972998,6.367898,-3.422315,7.577938,8.619049,6.205001,-3.102612,-5.522241],[-8.767173,9.682949,5.861499,-9.623581,0.917204,-2.301042,-6.093811,7.636728,7.140291,-5.458934,4.403923,-1.557250,-3.821383,-0.280512,5.089139],[-3.730815,-3.882729,2.307487,-3.332889,6.991064,2.295639,9.116785,6.127155,-5.470102,-4.184638,-8.117151,-3.257789,-7.432761,8.546070,0.760115]],[[2.044933,-0.721460,8.733994,-6.276311,2.994458,2.590763,8.169805,-9.577218,4.369322,3.776673,9.586915,3.792692,0.416477,-7.775889,4.308999],[2.784165,-7.633670,-2.734827,-2.829930,1.665305,-1.732900,-8.310629,-5.689861,-3.904742,2.381538,9.742454,-5.266622,2.818923,-0.779930,-9.052206],[2.418685,-2.899381,5.158406,-5.513989,6.137366,-3.563561,-3.793895,-6.116360,8.435984,2.514081,-2.699662,-2.727781,7.678892,-2.286091,0.911535],[3.911523,9.578369,-8.143423,8.608409,-2.386358,6.566729,-0.241216,0.756319,-2.802691,-4.746669,8.756279,-9.209321,7.708365,8.641864,1.134876],[-4.446600,-6.748497,-1.854306,-3.089036,7.402182,8.832432,7.053315,-3.075218,-6.259474,-3.081987,-6.341602,3.961736,4.958770,1.263151,7.840782]],[[0.144224,4.225244,9.235647,9.880564,5.522822,-4.949347,8.163850,9.845092,-3.268200,-4.058622,-4.978558,-2.542732,1.502629,-2.505982,5.583190],[6.141392,9.356689,-9.078665,-6.013850,-3.844357,-9.099993,-2.707771,0.524286,3.562127,8.272225,-4.657536,7.837780,-1.060691,-8.273421,1.429801],[-9.597193,-1.484762,9.670671,-2.644257,-9.821021,-1.399069,6.308973,-5.220336,-6.126265,-2.239299,2.831709,6.139411,6.907243,6.308789,-2.781037],[7.678032,8.162561,-8.617373,-8.459838,2.283187,4.956065,1.073435,-1.281001,9.303091,-4.809157,5.812099,-1.700479,-8.151771,-8.252092,5.924592],[-9.509073,7.717834,0.475787,-1.852685,-4.166262,-2.584537,1.882950,-9.354894,-4.328190,-5.956582,5.526159,-2.384695,-7.771527,4.254595,0.055839]],[[3.720783,-5.582922,4.508775,-1.904300,9.704375,0.195995,8.083132,-0.767264,0.887242,6.434807,7.537364,5.095193,8.683261,-9.740506,-8.343899],[2.980299,8.713852,-9.745755,6.551616,-3.533581,4.028968,9.941750,0.891373,-3.885168,-0.005646,-7.341015,-1.561593,2.214745,-4.051476,-5.674383],[3.272205,-7.049173,9.689116,-3.278308,-0.793715,-1.033406,-8.316094,-5.350724,5.337739,-3.045250,-2.402626,2.571148,-3.153313,-9.327127,-1.518404],[1.877728,6.115428,-7.725736,-1.182211,2.153055,2.160466,-7.505461,9.621213,1.479729,2.755146,-1.880308,6.753842,-7.774709,5.194810,-5.327212],[-6.900484,0.216101,9.207712,-2.340876,-6.332359,-4.716615,4.203180,-0.669713,3.380461,5.106387,2.704210,8.644574,8.993908,8.545343,-2.128392]],[[-8.835613,0.722980,-8.646028,4.580344,4.637605,7.472147,-0.636374,-2.287395,7.766433,-6.513278,2.272399,7.411873,-1.339239,-6.095947,8.999309],[4.583212,7.711053,2.466670,-2.260604,9.765438,7.666782,4.823563,3.271540,-7.588386,-0.349614,-4.383950,-0.549094,-3.006782,-7.804629,-6.190339],[1.399891,-7.381286,8.204228,5.422687,-3.225579,9.242762,4.940016,4.166843,-0.560835,6.516529,4.390578,-8.754448,6.823893,-3.062613,-2.683025],[2.295790,1.922299,-5.705787,-3.660008,-6.957404,-4.957617,-1.284921,-3.805531,0.091077,2.821456,1.558513,-2.500343,-9.391225,-2.690857,8.475251],[-9.942766,8.509546,-1.400736,-7.312728,2.642168,-7.136828,-8.893228,1.158121,-1.018640,3.773979,1.534374,-9.994453,0.441213,-2.398121,-5.480407]],[[-1.159156,-9.425612,-3.957333,8.542945,4.339795,2.239642,7.431390,-4.925518,-0.805858,6.849439,-2.522341,2.502792,-1.344142,-0.328674,-4.456588],[-4.608218,9.935054,-9.945446,-6.702778,-3.741460,-7.324189,1.386428,5.509977,-6.696199,-2.033253,9.007434,6.594435,-9.035219,8.831072,-0.647253],[0.463045,-1.780065,2.362893,-8.631362,0.791075,-8.023342,-6.177537,2.908579,6.571899,4.326802,1.645161,8.802244,1.301803,-0.219633,-2.434476],[7.498822,2.472523,-3.010876,-8.955093,-4.361910,1.192069,-2.609932,-5.636888,6.917551,6.551016,-4.194561,0.260755,1.966775,0.310955,-2.708406],[-5.655777,6.588951,4.325649,8.547594,-4.452847,2.193361,-9.299838,6.260865,4.878481,-3.770390,0.189490,2.592623,-4.831349,-1.555890,-2.121996]],[[0.535456,-3.630978,0.469608,-4.565788,9.563716,-4.985559,-8.460752,-0.062982,-8.838733,-2.785971,6.234763,6.409805,1.030846,7.285880,2.842090],[-5.573467,8.466928,9.049241,-8.189654,6.668420,-9.102456,4.465447,-9.868807,-1.175085,0.908593,0.414068,-0.708405,-1.858119,0.979944,7.462745],[5.424508,3.898021,-9.088509,5.820064,9.460547,6.783483,6.880898,-2.236622,-9.242737,-3.900731,-8.502496,-9.244871,-7.114516,-5.171522,2.591802],[-9.773813,9.331861,9.089725,-9.858138,-4.031699,8.422777,7.957143,-0.841998,-4.236612,-9.981516,1.655259,-7.866373,5.524425,-1.944471,-5.064759],[-9.025923,-1.196446,2.390746,6.910960,5.343746,2.837417,2.653420,6.411429,-1.579833,3.044778,-3.920861,8.026312,-3.071430,4.538815,-4.481621]],[[-5.924791,-4.272704,-9.084142,-3.355200,4.543537,-2.103431,-0.918917,1.159535,3.142351,7.398325,-2.963884,5.016536,6.847862,-8.347298,-3.086377],[-8.845973,4.178987,-7.302781,-1.880638,-6.914456,-1.344125,-8.183388,-4.082679,-2.667231,-2.144893,-1.375629,0.975155,-3.796230,-4.334520,1.647595],[-7.370089,5.033567,-8.128812,7.552007,2.477948,-2.481336,-6.201281,-5.668552,-1.657300,4.818300,7.158040,5.244719,6.228548,9.435400,-5.109884],[3.697645,-7.373794,1.600155,-4.427450,-2.208241,-3.122762,9.023679,2.743086,9.502622,-4.378225,-9.430882,6.004448,-7.886617,-7.118433,-0.112858],[-2.474667,2.112450,-1.891007,9.557934,0.650712,-6.376454,-3.309070,2.860354,-9.524335,9.733229,7.322873,-2.481161,6.846608,3.131810,-5.481516]],[[-8.883905,7.836083,1.151721,-2.438089,-0.426894,-8.679000,4.206121,-5.319602,9.979042,-7.395516,8.396717,-5.705365,-0.748914,-7.012389,3.453538],[9.248507,5.128323,6.140593,-4.167578,3.525375,-3.712810,-4.999458,-7.408552,-0.597012,1.236262,-2.881419,-2.841231,-6.540506,-2.195764,-4.613262],[8.524076,-0.881914,7.907730,3.275689,8.322327,-1.630843,5.017593,-6.500748,-9.963532,8.160055,3.021773,-2.365261,-0.522523,-6.943052,-2.298283],[7.935837,-3.861336,-2.880268,1.856219,4.052273,9.972391,-9.089583,-7.949301,-8.497518,4.349907,-4.642343,-8.850487,-0.586697,4.568792,9.528466],[-6.853477,7.369273,-0.677804,-6.812323,-3.564037,3.789923,4.770727,-9.883081,-0.607312,-9.001453,-9.001300,-2.668023,-6.478807,4.470967,2.470273]],[[5.451231,7.137615,-6.976121,-4.581469,-4.153644,-1.515630,-0.284727,0.102227,-9.437990,-1.572537,-6.958792,5.176158,9.021903,5.482849,-8.966188],[2.557090,-8.112282,-4.641041,8.086806,5.378592,4.787606,4.567556,-9.997934,-4.784292,-4.210862,5.262831,9.778252,8.152216,-6.792424,-0.860181],[8.477700,-0.611789,-9.191321,-7.403164,-7.255123,1.818843,4.175782,6.324146,-8.625238,-2.573912,-4.574013,9.143124,9.147710,-7.172112,7.703873],[-7.636792,3.814874,5.898172,7.256931,5.674287,5.475546,-0.049067,3.685414,-6.314266,2.914093,-6.038725,4.180738,-7.526325,-7.318112,-7.147790],[2.413817,-8.821621,-8.207759,-5.324995,9.451763,0.049686,0.892442,9.532941,6.101624,-5.190649,4.143616,3.363964,-4.786729,0.066105,-9.236431]],[[-8.874993,-8.876595,-4.635212,-1.439451,-0.265352,-6.437206,7.971752,0.300922,-7.852921,-8.951348,-5.407224,7.692881,-4.149555,1.512043,-0.770467],[-5.993407,8.942139,2.196515,9.772880,-1.009919,1.763011,8.676259,-9.967713,-5.633515,4.161961,8.243952,-5.750975,6.858223,-7.677369,-9.755096],[6.859566,-2.658193,0.865655,-3.793379,1.788786,-4.407592,-8.684275,4.304232,2.878798,1.536123,4.934453,-0.551339,-2.045855,-3.214827,-3.300190],[9.206552,0.020553,-2.562955,-9.552976,6.503075,9.361183,-6.577378,4.851400,2.768740,2.805221,-9.550266,1.368500,-3.424787,-2.233260,1.512032],[8.426787,-1.249613,-3.928847,3.379849,-2.768975,-3.699361,8.078388,0.815261,3.315971,4.851064,4.075100,5.612216,-0.596017,-7.668160,-0.688802]],[[6.566341,4.459969,4.209323,-0.075635,-0.254028,2.954430,-2.936703,7.124615,-0.062587,-7.676618,-3.002442,4.530949,4.568548,3.693076,-6.742639],[3.431658,-6.481377,-9.301900,-6.832782,-6.959532,4.641903,6.036101,-3.647471,2.350900,1.936932,-2.373095,3.566981,2.422077,9.825636,9.785983],[9.307663,8.016990,2.982981,3.081108,-2.250152,-2.143136,1.182684,-1.673985,-0.295903,-8.403722,8.645229,7.594245,-8.495071,2.476740,-5.723000],[-4.663978,1.053553,3.613598,6.310490,-7.256392,-4.143837,4.071721,8.787318,-4.583449,6.579713,9.469790,8.730203,0.329265,-4.257790,-2.581114],[7.891268,-1.848837,-4.092889,2.412265,-3.492094,-8.844593,-8.950579,-7.390351,9.048231,-8.961219,-0.902948,6.042282,-1.906026,1.027544,-7.104718]]], dtype = "float64")#candidate|186|(15, 5, 15)|const|float64
uop_187 = relay.rsqrt(const_186.astype('float64')) # shape=(15, 5, 15)
output = relay.Tuple([uop_187,])
output2 = relay.Tuple([uop_187,])
func_193 = relay.Function([], output)
mod['func_193'] = func_193
mod = relay.transform.InferType()(mod)
output = func_193()
func_194 = relay.Function([], output)
mutated_mod['func_194'] = func_194
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_195 = relay.TupleGetItem(func_193_call(), 0)
call_196 = relay.TupleGetItem(func_194_call(), 0)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_197 = relay.TupleGetItem(func_193_call(), 0)
call_198 = relay.TupleGetItem(func_194_call(), 0)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
const_204 = relay.const([-9.666171,-3.693037,6.356169,0.127274,9.460908,-7.915131,-1.573726,-4.717172,-9.050148,-5.026471,7.351187,3.802415,-2.208641,4.355849,0.507233,7.297470,-0.569530,-6.023885,-2.842215,-0.541870,-4.479186], dtype = "float32")#candidate|204|(21,)|const|float32
call_203 = relay.TupleGetItem(func_20_call(relay.reshape(const_204.astype('float32'), [3, 7, 1])), 0)
call_205 = relay.TupleGetItem(func_22_call(relay.reshape(const_204.astype('float32'), [3, 7, 1])), 0)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
call_212 = relay.TupleGetItem(func_20_call(relay.reshape(call_203.astype('float32'), [3, 7, 1])), 0)
call_213 = relay.TupleGetItem(func_22_call(relay.reshape(call_203.astype('float32'), [3, 7, 1])), 0)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_220 = relay.TupleGetItem(func_193_call(), 0)
call_221 = relay.TupleGetItem(func_194_call(), 0)
output = relay.Tuple([call_195,call_197,call_203,const_204,call_212,call_220,])
output2 = relay.Tuple([call_196,call_198,call_205,const_204,call_213,call_221,])
func_235 = relay.Function([], output)
mod['func_235'] = func_235
mod = relay.transform.InferType()(mod)
output = func_235()
func_236 = relay.Function([], output)
mutated_mod['func_236'] = func_236
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_255 = relay.TupleGetItem(func_235_call(), 2)
call_256 = relay.TupleGetItem(func_236_call(), 2)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
var_258 = relay.var("var_258", dtype = "float32", shape = (600,))#candidate|258|(600,)|var|float32
call_257 = func_30_call(relay.reshape(var_258.astype('float32'), [12, 10, 5]), relay.reshape(var_258.astype('float32'), [12, 10, 5]), )
call_259 = func_30_call(relay.reshape(var_258.astype('float32'), [12, 10, 5]), relay.reshape(var_258.astype('float32'), [12, 10, 5]), )
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_266 = relay.TupleGetItem(func_235_call(), 5)
call_267 = relay.TupleGetItem(func_236_call(), 5)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_271 = func_30_call(relay.reshape(call_257.astype('float32'), [12, 10, 5]), relay.reshape(call_257.astype('float32'), [12, 10, 5]), )
call_272 = func_30_call(relay.reshape(call_257.astype('float32'), [12, 10, 5]), relay.reshape(call_257.astype('float32'), [12, 10, 5]), )
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
call_288 = relay.TupleGetItem(func_20_call(relay.reshape(call_255.astype('float32'), [3, 7, 1])), 0)
call_289 = relay.TupleGetItem(func_22_call(relay.reshape(call_255.astype('float32'), [3, 7, 1])), 0)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
call_295 = relay.TupleGetItem(func_20_call(relay.reshape(call_255.astype('float32'), [3, 7, 1])), 0)
call_296 = relay.TupleGetItem(func_22_call(relay.reshape(call_255.astype('float32'), [3, 7, 1])), 0)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_308 = func_30_call(relay.reshape(call_271.astype('float32'), [12, 10, 5]), relay.reshape(var_258.astype('float32'), [12, 10, 5]), )
call_309 = func_30_call(relay.reshape(call_271.astype('float32'), [12, 10, 5]), relay.reshape(var_258.astype('float32'), [12, 10, 5]), )
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_315 = relay.TupleGetItem(func_193_call(), 0)
call_316 = relay.TupleGetItem(func_194_call(), 0)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_317 = func_30_call(relay.reshape(call_271.astype('float32'), [12, 10, 5]), relay.reshape(call_308.astype('float32'), [12, 10, 5]), )
call_318 = func_30_call(relay.reshape(call_271.astype('float32'), [12, 10, 5]), relay.reshape(call_308.astype('float32'), [12, 10, 5]), )
output = relay.Tuple([call_255,call_257,var_258,call_266,call_271,call_288,call_295,call_308,call_315,call_317,])
output2 = relay.Tuple([call_256,call_259,var_258,call_267,call_272,call_289,call_296,call_309,call_316,call_318,])
func_329 = relay.Function([var_258,], output)
mod['func_329'] = func_329
mod = relay.transform.InferType()(mod)
mutated_mod['func_329'] = func_329
mutated_mod = relay.transform.InferType()(mutated_mod)
var_330 = relay.var("var_330", dtype = "float32", shape = (600,))#candidate|330|(600,)|var|float32
func_329_call = mutated_mod.get_global_var('func_329')
call_331 = func_329_call(var_330)
output = call_331
func_332 = relay.Function([var_330], output)
mutated_mod['func_332'] = func_332
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_390 = relay.TupleGetItem(func_193_call(), 0)
call_391 = relay.TupleGetItem(func_194_call(), 0)
var_392 = relay.var("var_392", dtype = "float64", shape = (15, 5, 15))#candidate|392|(15, 5, 15)|var|float64
bop_393 = relay.logical_or(call_390.astype('bool'), relay.reshape(var_392.astype('bool'), relay.shape_of(call_390))) # shape=(15, 5, 15)
bop_396 = relay.logical_or(call_391.astype('bool'), relay.reshape(var_392.astype('bool'), relay.shape_of(call_391))) # shape=(15, 5, 15)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
var_419 = relay.var("var_419", dtype = "float32", shape = (600,))#candidate|419|(600,)|var|float32
call_418 = func_30_call(relay.reshape(var_419.astype('float32'), [12, 10, 5]), relay.reshape(var_419.astype('float32'), [12, 10, 5]), )
call_420 = func_30_call(relay.reshape(var_419.astype('float32'), [12, 10, 5]), relay.reshape(var_419.astype('float32'), [12, 10, 5]), )
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_422 = func_30_call(relay.reshape(call_418.astype('float32'), [12, 10, 5]), relay.reshape(call_418.astype('float32'), [12, 10, 5]), )
call_423 = func_30_call(relay.reshape(call_418.astype('float32'), [12, 10, 5]), relay.reshape(call_418.astype('float32'), [12, 10, 5]), )
bop_425 = relay.bitwise_or(call_418.astype('uint32'), relay.reshape(var_419.astype('uint32'), relay.shape_of(call_418))) # shape=(12, 10, 5)
bop_428 = relay.bitwise_or(call_420.astype('uint32'), relay.reshape(var_419.astype('uint32'), relay.shape_of(call_420))) # shape=(12, 10, 5)
uop_433 = relay.log2(bop_425.astype('float32')) # shape=(12, 10, 5)
uop_435 = relay.log2(bop_428.astype('float32')) # shape=(12, 10, 5)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_439 = relay.TupleGetItem(func_235_call(), 3)
call_440 = relay.TupleGetItem(func_236_call(), 3)
func_329_call = mod.get_global_var('func_329')
func_332_call = mutated_mod.get_global_var('func_332')
call_442 = relay.TupleGetItem(func_329_call(relay.reshape(var_419.astype('float32'), [600,])), 1)
call_443 = relay.TupleGetItem(func_332_call(relay.reshape(var_419.astype('float32'), [600,])), 1)
output = relay.Tuple([bop_393,call_422,uop_433,call_439,call_442,])
output2 = relay.Tuple([bop_396,call_423,uop_435,call_440,call_443,])
func_466 = relay.Function([var_392,var_419,], output)
mod['func_466'] = func_466
mod = relay.transform.InferType()(mod)
var_467 = relay.var("var_467", dtype = "float64", shape = (15, 5, 15))#candidate|467|(15, 5, 15)|var|float64
var_468 = relay.var("var_468", dtype = "float32", shape = (600,))#candidate|468|(600,)|var|float32
output = func_466(var_467,var_468,)
func_469 = relay.Function([var_467,var_468,], output)
mutated_mod['func_469'] = func_469
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_496 = relay.TupleGetItem(func_193_call(), 0)
call_497 = relay.TupleGetItem(func_194_call(), 0)
output = call_496
output2 = call_497
func_511 = relay.Function([], output)
mod['func_511'] = func_511
mod = relay.transform.InferType()(mod)
output = func_511()
func_512 = relay.Function([], output)
mutated_mod['func_512'] = func_512
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_545 = relay.TupleGetItem(func_193_call(), 0)
call_546 = relay.TupleGetItem(func_194_call(), 0)
var_547 = relay.var("var_547", dtype = "float64", shape = (15, 5, 15))#candidate|547|(15, 5, 15)|var|float64
bop_548 = relay.not_equal(call_545.astype('bool'), relay.reshape(var_547.astype('bool'), relay.shape_of(call_545))) # shape=(15, 5, 15)
bop_551 = relay.not_equal(call_546.astype('bool'), relay.reshape(var_547.astype('bool'), relay.shape_of(call_546))) # shape=(15, 5, 15)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_563 = relay.TupleGetItem(func_235_call(), 3)
call_564 = relay.TupleGetItem(func_236_call(), 3)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
var_583 = relay.var("var_583", dtype = "float32", shape = (600,))#candidate|583|(600,)|var|float32
call_582 = func_30_call(relay.reshape(var_583.astype('float32'), [12, 10, 5]), relay.reshape(var_583.astype('float32'), [12, 10, 5]), )
call_584 = func_30_call(relay.reshape(var_583.astype('float32'), [12, 10, 5]), relay.reshape(var_583.astype('float32'), [12, 10, 5]), )
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_586 = func_30_call(relay.reshape(var_583.astype('float32'), [12, 10, 5]), relay.reshape(var_583.astype('float32'), [12, 10, 5]), )
call_587 = func_30_call(relay.reshape(var_583.astype('float32'), [12, 10, 5]), relay.reshape(var_583.astype('float32'), [12, 10, 5]), )
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_588 = relay.TupleGetItem(func_235_call(), 2)
call_589 = relay.TupleGetItem(func_236_call(), 2)
output = relay.Tuple([bop_548,call_563,call_582,var_583,call_586,call_588,])
output2 = relay.Tuple([bop_551,call_564,call_584,var_583,call_587,call_589,])
func_596 = relay.Function([var_547,var_583,], output)
mod['func_596'] = func_596
mod = relay.transform.InferType()(mod)
var_597 = relay.var("var_597", dtype = "float64", shape = (15, 5, 15))#candidate|597|(15, 5, 15)|var|float64
var_598 = relay.var("var_598", dtype = "float32", shape = (600,))#candidate|598|(600,)|var|float32
output = func_596(var_597,var_598,)
func_599 = relay.Function([var_597,var_598,], output)
mutated_mod['func_599'] = func_599
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_650 = relay.TupleGetItem(func_235_call(), 3)
call_651 = relay.TupleGetItem(func_236_call(), 3)
var_652 = relay.var("var_652", dtype = "float32", shape = (21,))#candidate|652|(21,)|var|float32
bop_653 = relay.logical_or(call_650.astype('bool'), relay.reshape(var_652.astype('bool'), relay.shape_of(call_650))) # shape=(21,)
bop_656 = relay.logical_or(call_651.astype('bool'), relay.reshape(var_652.astype('bool'), relay.shape_of(call_651))) # shape=(21,)
output = relay.Tuple([bop_653,])
output2 = relay.Tuple([bop_656,])
func_658 = relay.Function([var_652,], output)
mod['func_658'] = func_658
mod = relay.transform.InferType()(mod)
var_659 = relay.var("var_659", dtype = "float32", shape = (21,))#candidate|659|(21,)|var|float32
output = func_658(var_659)
func_660 = relay.Function([var_659], output)
mutated_mod['func_660'] = func_660
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_747 = relay.TupleGetItem(func_193_call(), 0)
call_748 = relay.TupleGetItem(func_194_call(), 0)
uop_749 = relay.asinh(call_747.astype('float64')) # shape=(15, 5, 15)
uop_751 = relay.asinh(call_748.astype('float64')) # shape=(15, 5, 15)
uop_752 = relay.log10(call_747.astype('float64')) # shape=(15, 5, 15)
uop_754 = relay.log10(call_748.astype('float64')) # shape=(15, 5, 15)
bop_756 = relay.logical_xor(uop_749.astype('int16'), relay.reshape(call_747.astype('int16'), relay.shape_of(uop_749))) # shape=(15, 5, 15)
bop_759 = relay.logical_xor(uop_751.astype('int16'), relay.reshape(call_748.astype('int16'), relay.shape_of(uop_751))) # shape=(15, 5, 15)
output = relay.Tuple([uop_752,bop_756,])
output2 = relay.Tuple([uop_754,bop_759,])
func_768 = relay.Function([], output)
mod['func_768'] = func_768
mod = relay.transform.InferType()(mod)
output = func_768()
func_769 = relay.Function([], output)
mutated_mod['func_769'] = func_769
mutated_mod = relay.transform.InferType()(mutated_mod)
const_801 = relay.const([[[0.436775,-5.489081,5.596574,4.988190,8.310515,6.770510,-6.223659,-3.901666],[-0.965196,-7.014798,5.423590,-1.922232,2.645185,-3.850738,8.595768,7.843106],[9.710456,-3.334848,9.826290,4.454578,5.574492,-4.342411,-6.045531,-7.023908],[0.011256,-7.940413,4.875860,6.880944,6.540591,-8.307074,9.500423,3.193618],[-1.429175,6.763309,-3.330491,-3.050946,0.171103,1.302526,-8.534829,9.567517],[-8.089144,-8.330832,-3.431410,1.045362,3.983759,6.379544,1.848436,-4.115767],[-9.083340,9.281717,-0.454526,-9.541281,-3.572786,-0.837738,4.696644,-8.402738],[1.042040,8.304261,-8.229293,-3.113316,0.582314,-4.909707,-2.590118,-9.632091],[4.974130,5.390966,8.850750,2.239141,2.899417,-7.147016,1.963466,9.792873],[-6.545900,0.737170,0.437872,-7.368985,6.048127,2.267660,4.044852,-0.279945],[1.819999,9.741256,-7.290603,-5.609758,-8.938030,-3.965193,6.545229,-6.717934],[4.644411,5.028972,2.007015,8.957217,-8.377742,5.958248,-1.084615,-3.572413],[8.093465,-4.857504,5.893581,-6.342007,-2.661154,5.663004,-2.467926,6.625709],[5.976857,-7.056816,-5.888434,1.029852,-4.079342,7.086553,9.053481,-5.580122]],[[4.703727,-5.446505,9.435811,-8.046985,5.696693,1.678609,5.114617,5.839673],[9.949832,-1.351640,8.766402,4.440088,-8.616081,-7.102648,-5.417065,-4.385353],[-1.942958,-6.912523,7.313884,3.026278,1.400513,-4.512947,4.533914,3.246480],[4.359341,-4.859473,-2.732145,-7.791158,-6.323745,-4.595713,2.711896,-5.957341],[1.816583,8.479614,1.788748,9.569041,-1.672482,-0.957906,-6.763730,-9.089322],[0.017602,-1.384141,-8.315311,-7.404759,-1.761691,-3.407439,3.467444,4.380180],[0.297473,-9.462930,7.186609,9.865906,2.703736,0.754397,-9.440154,-4.520325],[-0.840399,6.105365,3.185935,-8.357326,-1.451689,-9.692290,1.082297,-7.045374],[-7.230982,-5.700219,-1.329825,4.819576,5.458313,5.469448,7.244391,5.165324],[5.894424,-1.543816,-2.694392,-6.917558,4.949432,-6.853108,-8.331720,-4.666955],[8.944779,-4.623953,-4.508901,-1.627275,-4.481245,3.788491,6.323119,2.840558],[3.271121,7.156174,-7.592671,-5.773650,-9.280067,3.896420,8.523903,-2.673078],[-4.485937,6.496647,-3.578200,-7.338529,6.108188,-3.138752,-3.932168,6.467272],[-9.150043,2.708987,-2.187394,-0.904452,-7.517648,4.066047,0.428216,0.172297]],[[-9.683043,6.780608,-8.929701,2.222828,7.641249,-2.412454,-9.131386,-0.737127],[-5.671971,2.759956,9.813047,-7.003356,2.118807,-7.561357,5.314374,-7.354356],[-2.016600,-1.441927,0.147293,-3.434174,-6.166359,-3.302512,7.557093,7.343265],[-9.500168,-0.183143,-3.100287,-7.238476,3.549952,2.171373,-1.342009,-5.425047],[4.174545,7.900491,4.080804,0.436722,-8.192170,-4.166458,-4.708278,4.182552],[-0.288687,3.583186,-9.565459,8.770904,-0.005258,-3.619831,-9.953059,3.968526],[-2.988495,6.701297,-7.610752,8.383239,-3.977552,-7.587401,7.021128,-5.961788],[-5.466070,-9.796986,2.408223,-7.005043,-8.912968,-4.700756,3.248315,-6.459697],[-7.297524,8.602172,3.436973,4.136020,-1.373643,-1.299244,2.976252,-7.964328],[-2.508793,8.703566,-1.194584,3.396425,-6.083102,3.555356,4.207881,9.224642],[3.882271,3.829515,7.650682,0.945480,-7.235172,4.396083,-3.735965,0.471866],[0.874740,-0.523501,-2.726008,-3.655333,0.088800,1.940877,-8.866868,-1.221972],[9.050490,-1.930766,-0.273395,3.782437,1.250287,-0.914568,-9.040076,9.427109],[-9.422928,6.371883,1.527634,-3.894990,3.686757,-7.762333,-1.283167,-7.717549]],[[-3.726221,2.534347,-2.090339,4.499297,9.946387,8.740317,-5.453983,6.496749],[-7.787704,2.651789,6.762564,-5.568731,1.733263,-9.555511,6.264646,-8.148059],[4.913239,-1.971090,-4.952133,6.685105,4.501836,3.272755,3.422608,6.450893],[7.862033,-1.727295,-1.514076,8.572891,2.298864,2.393396,-5.324858,-5.966127],[1.530046,3.992714,-0.502777,-9.103327,5.341653,7.606418,-0.115853,-5.881751],[-6.794009,-0.420026,7.327960,-4.064790,1.553827,1.287905,8.479240,4.698683],[-6.496200,-5.785933,-6.156692,1.518786,-9.969787,-5.129212,9.558894,-6.069004],[9.331352,-5.398879,0.448247,7.419031,-5.768254,-4.138714,-2.068696,6.909648],[9.869102,-1.717837,-6.341473,1.971805,-5.289763,7.547086,5.975924,1.784428],[5.492493,5.200611,8.971086,4.019083,-3.575406,2.523249,-3.034254,1.868230],[6.725383,0.519051,2.799570,-8.665280,-6.946231,0.080906,-4.919622,6.190650],[-2.455055,-8.235889,6.706051,-2.386143,9.708013,8.853291,-7.749782,1.017435],[-0.455590,5.619317,-3.797803,8.123336,1.012442,-9.259631,-1.258800,7.265542],[-0.246235,-5.278309,-0.281746,5.536078,-2.493266,0.228003,-2.921771,-9.056533]],[[4.825904,-0.136123,-1.949690,-5.888905,8.704720,5.606804,-1.832655,-1.445417],[-7.721173,9.564981,2.744561,-0.745503,0.135215,-1.814969,6.928314,-4.637929],[-5.843619,-8.152251,-9.266767,1.537530,6.498966,0.262071,4.837360,-2.030863],[-6.305096,-5.516990,4.072547,-6.235892,-1.568008,-7.447433,2.209104,-4.222077],[6.574155,-7.339017,-3.751170,6.529960,-1.729689,4.243435,8.397010,6.352611],[4.037312,6.453243,1.019397,0.395790,0.900860,3.924009,-5.617535,-2.163606],[-1.355623,-5.157755,-4.864244,-0.677967,-4.826292,6.599692,2.055889,-5.361088],[-1.330704,8.105892,8.602433,-3.187844,-8.572232,2.819495,5.542422,7.470519],[3.362511,-2.094601,0.051472,-9.077804,8.562529,4.959594,4.223993,5.541010],[-4.582340,3.216506,-7.612902,-8.044596,5.209444,8.753102,4.760527,-1.673723],[-9.611228,9.798856,7.908868,-3.485705,1.998299,3.737767,0.726267,-4.788710],[-7.054513,9.436235,0.167177,7.163176,7.160123,-9.117790,5.902160,7.035327],[2.578783,-9.452647,3.840274,1.751775,-8.633106,0.168040,-0.852603,0.037943],[8.314428,5.942322,-8.684886,3.970844,1.240893,6.268829,-0.639135,3.446957]],[[2.767663,-6.993229,-3.503979,8.073917,-4.491631,-4.933193,-3.830296,5.761252],[-6.856447,8.109769,-2.538230,-2.488595,-4.553767,-4.214658,6.109773,-1.414161],[8.826954,6.634127,4.555064,1.454238,5.509396,-8.519219,6.554428,3.912964],[-6.938762,8.646037,4.945994,-4.404715,6.811297,-9.791436,-0.797642,7.598480],[3.370829,1.361484,2.590187,-2.959610,-3.836234,-2.201911,0.592006,1.454210],[-2.593308,-6.715175,0.588435,6.217126,7.913896,3.850774,1.211528,-2.533268],[6.719094,7.045482,-9.743236,9.717625,-4.761998,-7.582361,0.389683,7.292721],[-0.568400,7.796786,-7.618201,-1.896572,-4.502949,-3.408956,-1.438687,-8.845499],[-2.809738,-7.796851,0.098937,-2.473566,-7.317520,9.872744,-9.875150,8.877284],[-4.049675,-3.732304,-7.433260,6.853206,-5.308230,-4.137697,-4.068527,-9.687818],[-3.278020,9.291750,-4.508425,6.274294,-2.773773,-3.142354,9.120757,-6.580570],[-4.076175,-6.487690,2.889693,1.878248,2.549186,4.202291,-3.352361,4.086217],[-4.799959,6.133720,-4.667018,7.035259,7.269225,9.092740,-6.379636,1.896734],[3.200567,5.477669,2.706659,-3.237329,-4.786888,-0.704543,-3.173861,6.877724]],[[-3.375485,1.707009,5.830813,5.651911,0.250394,5.317807,-9.027665,-7.538149],[-8.807833,3.750268,6.719944,9.277960,2.366624,-5.671189,7.591578,-1.497980],[-7.080547,-0.887999,7.701502,3.566439,-4.859880,-5.806510,8.731183,-3.906260],[-7.115679,1.096021,-5.166109,0.817752,-4.666198,8.440495,3.766047,3.281718],[6.342889,8.073596,7.278496,0.256808,1.253213,2.934323,4.554924,-6.349904],[8.477816,1.282123,-5.799048,6.015195,-4.822820,-8.481859,-8.000946,-2.548505],[5.462293,-3.856206,-4.891411,7.901285,3.915953,-9.908286,-3.136768,-9.255025],[-4.400855,1.341890,-6.043772,3.619874,9.408155,-3.702566,9.895987,-1.686755],[-8.260167,4.828710,-5.395490,-3.229184,0.075972,-4.794485,-7.354269,4.048534],[-8.755367,7.155190,3.372180,-6.485341,8.784193,6.564995,5.050733,0.970490],[-9.292840,-6.208295,6.135731,7.196576,5.561489,1.447371,-3.596267,-9.185506],[9.475891,-1.652571,-8.896107,-8.768178,6.874553,-8.728665,4.091083,3.917825],[-8.547988,-2.980544,-9.690284,2.333233,-2.568633,0.404317,4.057133,5.389638],[-0.213053,-8.762467,-5.484675,-6.691904,-6.573479,-4.735590,-0.126984,2.534825]],[[1.608726,2.496826,7.298612,7.175633,3.323991,2.840065,-4.234118,6.026783],[-0.847583,8.374032,-3.660175,-1.665309,-1.166570,-9.026721,-2.181749,-0.396388],[-6.652433,-7.710286,-8.552130,3.623694,-9.077874,-5.748598,9.282205,5.918285],[7.278761,0.207326,-3.047622,-2.761627,-2.851384,-5.173855,7.982966,0.287988],[-9.550192,4.304633,1.354339,-0.478641,8.002143,1.838627,-2.810722,-8.158513],[4.252006,-1.047845,-6.016645,6.401116,0.595800,1.625416,-9.651719,-1.385232],[-1.966897,5.581623,-7.865190,-6.858510,-9.711482,2.381723,-8.925384,1.143771],[1.389045,-8.571893,-4.334317,-8.937738,0.573024,-6.801837,-7.502701,-0.690053],[2.785653,4.640117,9.143914,0.294159,8.067434,-5.932492,0.292928,9.060225],[9.691218,-6.021405,3.951704,-3.905137,-0.580095,-5.931759,2.040150,-1.954045],[-8.310342,3.570291,7.464804,-6.752399,3.241586,-6.994155,-1.929468,6.486481],[4.980642,2.728546,-0.682351,0.509964,1.321374,-5.179419,-9.176325,8.931577],[-3.738581,-4.688058,8.761626,-4.184496,-4.005651,8.841422,-0.512610,-7.578929],[-4.023066,9.787457,2.232017,-4.751861,-6.388786,-3.500658,6.646629,-6.157231]]], dtype = "float64")#candidate|801|(8, 14, 8)|const|float64
uop_802 = relay.atanh(const_801.astype('float64')) # shape=(8, 14, 8)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
const_807 = relay.const([-0.921609,-7.757151,5.388485,-1.454131,1.359113,-0.848418,9.040251,-3.014262,0.247340,5.920555,-3.436208,1.631352,7.093336,-8.673279,4.678009,-5.649989,7.230660,-2.923916,-6.773125,-9.124043,3.797480,-8.075536,-7.216922,-6.507508,3.855670,0.548351,6.212638,7.870414,1.952837,-7.912115,-9.909444,-5.287415,8.946026,-6.484255,-1.311136,-6.201449,8.490934,-6.597067,5.403497,-6.644600,-2.782454,-4.183798,-4.737403,-8.719055,3.239533,-5.388408,8.861079,-1.381775,-7.659167,-1.618291,2.215352,-3.785282,8.238878,8.449816,-8.950561,-1.650974,3.460251,-3.293354,-8.208616,5.881536,9.179021,6.966740,8.730227,-8.801145,-0.423543,-2.160631,7.247656,6.821103,5.718858,8.337523,-4.449451,-3.350712,2.873894,0.896674,-1.636104,7.523056,-0.824656,-9.914362,-7.015783,0.950952,-7.251233,7.345092,9.549873,-6.481515,2.708573,-5.118037,6.428664,2.537033,8.875568,5.445391,-8.685505,-4.557911,7.747807,-7.761248,5.941410,0.512852,7.143054,2.344599,4.012122,9.295273,7.178125,-6.424581,-1.864154,7.544003,-0.293040,4.155157,-8.042328,8.777718,7.324209,5.683927,-9.399605,-7.705904,4.192207,-0.224313,9.050281,6.271516,9.302309,-2.838591,-5.792126,0.097374,-0.191520,7.832962,-7.954217,-1.272060,-1.278894,-9.770045,-4.224484,-2.543348,-3.505580,-5.806142,-7.617365,5.278806,8.668181,0.699181,2.990478,-4.809275,-2.461777,-3.384742,0.629747,-6.031135,0.364633,-3.176578,1.709933,9.815919,4.887957,5.869637,-7.374520,8.279067,-3.476291,7.631333,2.240943,1.568447,8.931004,3.173636,3.734418,-4.007207,-4.244092,-0.448007,2.586210,-5.265360,-1.138121,-4.441665,-2.393228,-9.271904,-1.930929,-6.788131,-0.426645,8.651719,-3.833223,-9.329805,-5.113577,-7.233816,7.888421,-6.598330,-5.337031,3.748077,4.186669,2.518845,5.403656,-9.349721,8.898274,5.638817,7.372104,5.873558,1.143740,6.072620,-0.663593,8.785295,-2.041159,-4.818237,-6.149357,7.145531,4.167429,0.268091,7.190235,4.591086,-6.389552,-9.976874,5.491648,9.704963,3.455754,5.421664,-7.419383,7.041559,-9.787262,-2.189498,7.738730,-5.581493,-5.416261,1.383556,-5.209778,6.044147,5.154573,-7.331263,0.574283,-9.987908,-8.444788,2.932613,-6.325717,8.043284,-5.813601,9.066741,-5.603847,6.688016,0.544504,-1.044460,5.950902,-8.816715,1.000523,9.647198,0.783937,9.193421,0.742156,-4.166530,8.292260,2.896224,6.308561,2.033540,-0.623618,9.387026,0.866288,7.870422,0.882359,8.151811,-2.009263,6.709380,-0.629702,0.470257,4.274112,7.781645,-2.946708,6.086498,5.939312,5.516245,3.700519,3.921169,-1.411588,5.019093,7.017587,-7.975158,4.360702,4.814411,-4.562586,-6.681531,-1.370001,-6.009658,-7.008433,0.519535,-6.109694,2.844977,5.907224,-0.467174,-7.059857,5.964128,-1.297363,9.846297,9.113573,-8.321716,-8.018818,-2.035719,-5.191831,4.226669,-2.348413,1.708425,8.607149,-3.263420,4.943006,-9.275045,-2.565176,2.934635,6.681187,-1.662360,7.490470,-4.162060,9.601722,2.455877,7.721325,-3.933454,5.281762,-3.917953,1.733403,8.157949,3.721904,-3.226753,8.573139,-9.648460,-7.137202,1.777049,9.488487,3.585861,-7.649367,4.236130,2.424613,2.090801,5.887994,4.818565,-1.610609,7.335523,-0.706294,6.331144,-0.620258,-8.951509,1.762381,-5.656282,1.565197,9.191831,-0.784249,8.838760,6.400465,-1.864936,-1.072310,6.372304,-4.163064,-5.722137,-2.678027,-2.833198,-3.926611,3.866383,7.545909,-4.197228,-8.279126,-6.346157,-6.509093,-0.103991,0.608000,-6.770826,8.641925,-3.880273,7.545195,-5.696285,5.073108,-6.671866,-5.766797,2.483620,6.203198,-2.703411,5.319290,3.390601,3.522747,7.779298,-1.514263,-4.573984,9.804164,-7.031916,-6.038631,-5.360602,1.520381,4.764770,9.171958,7.052805,-7.911535,-6.211379,0.723065,-2.672455,5.520446,7.697978,6.456072,8.284151,-8.184815,0.087248,4.128934,-9.613072,-4.316867,-6.163129,-8.978269,8.291396,7.082191,0.349460,3.027718,9.001378,9.545999,-0.472639,2.315881,-8.606458,6.435020,-9.782765,5.815564,-4.895845,-7.660725,7.927324,-8.752179,4.080425,-6.268204,-8.831939,-0.954077,4.688379,-4.888020,7.447606,4.732909,-1.169034,5.298038,1.372377,2.919870,8.015817,-6.030874,4.399254,7.583534,0.988542,5.727143,7.074723,8.775970,7.299492,-9.128931,4.634509,-6.800030,9.509674,-3.957160,3.265512,-5.763231,1.581069,6.298879,3.340809,-3.707882,8.566961,3.224920,8.364570,4.315657,-6.927465,6.273431,5.810068,7.255824,-8.500533,-1.328946,-1.989960,-7.085858,3.282268,-7.593652,-0.597021,3.969767,-6.161379,-4.685885,-2.877960,-7.584135,2.008991,-0.712630,-2.560512,9.316286,-7.080345,-2.070351,-0.312770,-0.060091,-2.022763,4.499934,0.390224,-9.853800,7.744427,-7.928894,-8.994584,-4.098216,-3.882441,3.405358,5.797360,6.272976,-4.938930,-3.435754,-8.652244,-6.587216,4.948510,7.013264,8.238191,-7.386988,-0.278425,-9.381204,5.272099,3.483994,2.589474,-3.202614,6.287040,-4.471498,6.397851,2.984793,-0.124111,7.668719,5.965164,-0.755760,-9.326528,1.890555,3.976008,-6.644707,-8.185972,6.494439,-1.885314,-8.648839,1.448810,2.710250,7.559157,2.161507,-1.343504,9.546116,6.174438,-5.712700,-0.035769,8.868406,5.564501,5.568857,2.124871,-2.615621,-0.252484,1.832238,0.939101,8.942022,6.957231,-6.670356,5.363776,0.160987,-5.959648,-2.345485,6.547041,-1.480198,5.673666,5.035553,-9.606684,-6.100718,-7.686930,0.670297,-6.431457,4.312076,6.441571,-7.517039,1.450990,2.153451,7.491224,7.474742,2.442308,-0.734968,8.476926,5.147154,0.527916,-3.488866,-6.847075,3.453567,-6.082533,-4.495872,1.421949,-5.650560,8.260825,-2.263494,-0.038698,3.307421,7.348606,-4.340975,0.598821,5.403775,-9.314991,6.051427,2.720610,1.152899,3.613134,8.295745,-5.308188,7.517494,8.411409,0.815866,0.297679,-8.901631,-9.570178,3.343558,-8.272670,-1.670314,5.175364,3.166355,-7.285928,-5.480876,7.214290,-1.362270,-6.852607,1.491115,3.636379,4.490637,1.601173,-3.721061,-3.733380,-1.232489,-9.791822,4.160655,-6.291862,-9.573464,-1.476172,-5.309957,-6.000488], dtype = "float32")#candidate|807|(600,)|const|float32
call_806 = func_30_call(relay.reshape(const_807.astype('float32'), [12, 10, 5]), relay.reshape(const_807.astype('float32'), [12, 10, 5]), )
call_808 = func_30_call(relay.reshape(const_807.astype('float32'), [12, 10, 5]), relay.reshape(const_807.astype('float32'), [12, 10, 5]), )
output = relay.Tuple([uop_802,call_806,const_807,])
output2 = relay.Tuple([uop_802,call_808,const_807,])
func_811 = relay.Function([], output)
mod['func_811'] = func_811
mod = relay.transform.InferType()(mod)
mutated_mod['func_811'] = func_811
mutated_mod = relay.transform.InferType()(mutated_mod)
func_811_call = mutated_mod.get_global_var('func_811')
call_812 = func_811_call()
output = call_812
func_813 = relay.Function([], output)
mutated_mod['func_813'] = func_813
mutated_mod = relay.transform.InferType()(mutated_mod)
func_768_call = mod.get_global_var('func_768')
func_769_call = mutated_mod.get_global_var('func_769')
call_856 = relay.TupleGetItem(func_768_call(), 1)
call_857 = relay.TupleGetItem(func_769_call(), 1)
func_466_call = mod.get_global_var('func_466')
func_469_call = mutated_mod.get_global_var('func_469')
const_859 = relay.const([2.849124,2.718853,-2.231313,-6.094035,6.422182,0.013390,-4.653559,8.765364,8.476544,-8.654024,-1.164873,-9.342916,-0.911845,9.904159,-8.984196,-8.267914,2.358021,7.832893,-5.724478,2.406670,-3.926614,3.927553,8.366012,4.486602,2.080627,-7.598668,-3.394296,0.874651,9.079341,-0.389636,4.801176,4.848203,-6.499978,-2.218048,-7.375964,-8.716043,-9.696911,-9.688035,-0.601105,-5.713270,5.900645,-3.040147,9.833366,-8.101799,-9.967942,-7.450460,1.438120,5.111514,-9.256515,-7.178348,4.860710,5.812151,6.745209,2.988008,-6.252229,3.986212,7.727916,9.907505,2.180593,7.498850,-0.459970,5.168221,5.688249,-7.718748,-1.620371,-4.437604,6.755788,5.863752,7.792292,3.189598,7.835822,3.251870,-4.481268,1.176438,-2.685413,4.477401,8.674359,1.236963,6.590854,-7.206230,-0.867266,-8.651848,7.130505,-5.262775,-6.981866,-9.209050,-1.134359,-3.594758,-2.564451,1.255163,-0.646217,1.238961,2.630570,-6.644778,-1.346672,9.340178,-5.814015,6.480099,0.634303,-6.840237,3.710699,3.486259,0.939499,-9.761571,-1.098096,-5.364124,-6.950157,-4.788226,-9.693564,1.867478,1.176316,-5.934045,-5.558814,4.576238,3.453940,4.457907,-1.401353,6.908022,9.685959,6.781383,1.649747,-7.541085,-7.168315,9.270230,-8.934132,5.962515,6.258413,8.312786,3.963078,-6.726351,-9.274088,0.946672,-4.513506,-3.056837,-0.657969,1.497037,-2.311684,-2.642694,-2.969602,1.348893,-5.710327,1.500066,-3.897843,7.540308,3.125849,4.492867,7.420422,0.384121,6.085117,6.615112,9.704127,0.742897,6.955614,-9.118559,3.852651,-5.751837,4.148063,-5.555796,-0.501771,1.512707,1.308025,2.643404,-0.179991,-9.640050,8.939724,4.108052,3.148850,-9.500443,-6.574103,-1.442751,-3.141548,3.897240,-9.856082,-9.893022,2.534303,5.892730,-2.836550,-3.959154,7.552741,-4.683229,-3.219228,4.673175,-1.253026,-9.231930,4.375575,-1.531193,5.223089,5.563564,3.407765,-0.564749,3.907655,4.729315,7.532718,-0.033593,9.429866,0.690357,5.940430,6.583806,-9.333837,-1.476413,-1.153278,7.557801,9.639248,-0.315208,-4.235770,9.525477,-4.849459,1.924521,-9.528056,-9.423830,-0.557500,-9.168353,-6.584628,2.883197,8.548771,-6.942073,8.450769,-0.273346,-6.593286,0.883810,9.711245,7.993453,-5.751475,3.799796,-2.111599,-8.308298,2.394219,-2.321781,-9.258946,-0.785415,-2.097547,3.445780,1.941103,-2.848776,-0.646370,-2.268077,-1.815097,3.689532,2.407494,-4.542390,-8.457921,-0.630063,9.494568,-2.950087,2.849439,3.084315,0.727144,8.785936,-1.110469,2.229308,9.868308,6.466238,2.316653,-3.297175,2.491975,-4.779155,5.709785,-3.082394,-6.272468,-3.053990,1.002765,2.959776,2.661645,6.911609,-7.741077,-8.541276,4.883496,3.583773,3.709586,3.848086,-1.929038,-4.628306,-6.771955,-8.562279,7.209048,-1.628829,3.734497,-6.718714,-5.223754,-5.512604,-8.272057,1.054824,-8.078445,-0.013714,-7.817628,8.073177,8.486716,7.030139,-1.446547,-1.731645,-6.778586,-3.282164,-3.060083,-6.504313,5.396395,6.486579,-2.967817,9.296156,-3.021033,-4.944003,2.279231,8.330708,6.012932,-9.169460,3.014912,-9.612496,-9.900582,4.780780,0.902668,1.122719,-4.392520,-1.837914,4.373070,-3.126662,7.667239,4.660589,-1.379150,0.679158,8.566469,4.140997,2.873417,-8.638675,-8.989560,-3.863347,-9.873263,-6.944015,3.624901,7.293322,-3.858133,-4.112418,-6.098295,-8.263612,-4.428802,-0.151108,-4.301721,-5.651336,7.454286,2.315977,-0.330186,1.787355,8.721559,-8.826863,-9.421360,-7.202469,6.107244,-0.686328,-9.261461,-7.199847,6.589412,-7.371079,-9.895271,6.160276,5.222456,8.457150,-3.781147,-1.855494,5.825490,-5.909846,-5.244469,-4.011270,1.740017,7.694923,-8.926152,2.219487,8.192333,0.473722,-3.591365,9.855488,7.583215,-0.068432,-3.274289,1.919742,6.705015,2.863511,-7.594034,1.971829,3.438031,3.567152,-1.304569,8.119073,-6.164072,8.149695,0.646526,5.437199,5.705086,-3.093236,-8.348044,7.452494,-7.217433,-9.599834,7.015476,-7.238292,-4.212661,-0.344291,-7.088511,-2.348323,-1.206815,-0.197924,0.182374,-6.458655,8.299265,-2.044785,-2.859959,5.094480,-2.210613,-6.007694,0.535092,-0.646594,-0.586050,-2.311720,-4.335513,-6.588247,-3.850633,-5.745134,-4.904834,-2.881053,-7.977971,3.292561,6.148002,1.264804,-3.819950,7.405294,-2.354759,-9.027811,-0.236924,-7.741521,4.066901,9.922225,4.844537,9.889781,-2.595510,6.733775,-4.557279,9.949099,1.493074,-5.956479,-2.008875,1.022887,4.700311,-4.364222,-2.900121,0.294561,1.558282,5.755475,-0.222717,-8.914788,-6.320822,9.166178,-5.179640,-0.818637,7.485304,-1.989759,-8.852011,9.658082,4.235483,7.298138,-2.909249,8.552633,6.043315,-6.796163,-7.045143,-1.907785,-8.588787,5.421796,2.880290,-9.697048,-9.533403,-2.883163,-1.035796,0.979577,3.762824,0.627442,7.254723,3.098676,0.943945,-6.444257,-3.196905,-9.753139,7.376816,-1.650054,-1.209334,9.971369,4.152704,1.155989,9.695587,9.808837,-0.912660,-7.576839,1.008610,-1.064966,2.696448,-3.431001,-2.594988,-8.794547,3.524630,-8.194763,2.639182,-3.955164,3.356227,-2.886548,-6.380506,-1.991059,-8.141284,-7.610854,-3.989122,-9.646179,-3.113368,-9.394642,-0.660815,-3.506856,7.256133,9.476092,-3.859021,6.511103,4.616634,7.664625,7.022902,-7.706255,-2.699031,6.202792,-7.878478,8.973114,7.149229,3.345844,-2.753719,2.433498,-5.177803,2.498299,-7.172225,-1.111357,-0.654702,-5.953391,4.051000,-9.239683,1.831425,3.292416,8.101948,-8.901661,-3.110423,-3.531818,1.894619,-1.296141,-5.372922,0.280658,-1.360459,1.038940,4.194678,-3.806817,-8.786300,-2.081285,-3.080554,0.238514,-1.114859,-2.588464,0.409582,-8.844508,-5.547298,-6.975478,-0.255186,-2.175103,-8.439490,0.400909,2.063920,-0.368680,-5.020674,9.183614,-3.720273,0.009195,9.784125,9.859473,-2.329795,1.127720,-7.506656,-6.327820,0.953832,0.395838,-3.683766,5.179955,-9.213029,8.690650,6.248372,-1.706544,-5.340423,-9.591468,5.215285,-5.808981,5.419317,4.552440,-2.201961,-5.291852,-2.062155,5.324800,7.463676,-5.933698,-9.583486,-6.698502,-0.543769,-7.343488,-5.286102,-0.050402], dtype = "float32")#candidate|859|(600,)|const|float32
call_858 = relay.TupleGetItem(func_466_call(relay.reshape(call_856.astype('float64'), [15, 5, 15]), relay.reshape(const_859.astype('float32'), [600,]), ), 2)
call_860 = relay.TupleGetItem(func_469_call(relay.reshape(call_856.astype('float64'), [15, 5, 15]), relay.reshape(const_859.astype('float32'), [600,]), ), 2)
output = relay.Tuple([call_856,call_858,const_859,])
output2 = relay.Tuple([call_857,call_860,const_859,])
func_861 = relay.Function([], output)
mod['func_861'] = func_861
mod = relay.transform.InferType()(mod)
output = func_861()
func_862 = relay.Function([], output)
mutated_mod['func_862'] = func_862
mutated_mod = relay.transform.InferType()(mutated_mod)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_863 = relay.TupleGetItem(func_811_call(), 1)
call_864 = relay.TupleGetItem(func_813_call(), 1)
output = relay.Tuple([call_863,])
output2 = relay.Tuple([call_864,])
func_867 = relay.Function([], output)
mod['func_867'] = func_867
mod = relay.transform.InferType()(mod)
mutated_mod['func_867'] = func_867
mutated_mod = relay.transform.InferType()(mutated_mod)
func_867_call = mutated_mod.get_global_var('func_867')
call_868 = func_867_call()
output = call_868
func_869 = relay.Function([], output)
mutated_mod['func_869'] = func_869
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_973 = relay.TupleGetItem(func_235_call(), 2)
call_974 = relay.TupleGetItem(func_236_call(), 2)
output = call_973
output2 = call_974
func_992 = relay.Function([], output)
mod['func_992'] = func_992
mod = relay.transform.InferType()(mod)
mutated_mod['func_992'] = func_992
mutated_mod = relay.transform.InferType()(mutated_mod)
func_992_call = mutated_mod.get_global_var('func_992')
call_993 = func_992_call()
output = call_993
func_994 = relay.Function([], output)
mutated_mod['func_994'] = func_994
mutated_mod = relay.transform.InferType()(mutated_mod)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_1002 = relay.TupleGetItem(func_811_call(), 0)
call_1003 = relay.TupleGetItem(func_813_call(), 0)
output = relay.Tuple([call_1002,])
output2 = relay.Tuple([call_1003,])
func_1005 = relay.Function([], output)
mod['func_1005'] = func_1005
mod = relay.transform.InferType()(mod)
mutated_mod['func_1005'] = func_1005
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1005_call = mutated_mod.get_global_var('func_1005')
call_1006 = func_1005_call()
output = call_1006
func_1007 = relay.Function([], output)
mutated_mod['func_1007'] = func_1007
mutated_mod = relay.transform.InferType()(mutated_mod)
func_768_call = mod.get_global_var('func_768')
func_769_call = mutated_mod.get_global_var('func_769')
call_1046 = relay.TupleGetItem(func_768_call(), 1)
call_1047 = relay.TupleGetItem(func_769_call(), 1)
uop_1058 = relay.sqrt(call_1046.astype('float64')) # shape=(15, 5, 15)
uop_1060 = relay.sqrt(call_1047.astype('float64')) # shape=(15, 5, 15)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_1063 = relay.TupleGetItem(func_861_call(), 1)
call_1064 = relay.TupleGetItem(func_862_call(), 1)
output = relay.Tuple([uop_1058,call_1063,])
output2 = relay.Tuple([uop_1060,call_1064,])
func_1070 = relay.Function([], output)
mod['func_1070'] = func_1070
mod = relay.transform.InferType()(mod)
output = func_1070()
func_1071 = relay.Function([], output)
mutated_mod['func_1071'] = func_1071
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_1072 = relay.TupleGetItem(func_193_call(), 0)
call_1073 = relay.TupleGetItem(func_194_call(), 0)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_1074 = relay.TupleGetItem(func_1070_call(), 0)
call_1075 = relay.TupleGetItem(func_1071_call(), 0)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_1078 = relay.TupleGetItem(func_811_call(), 0)
call_1079 = relay.TupleGetItem(func_813_call(), 0)
func_511_call = mod.get_global_var('func_511')
func_512_call = mutated_mod.get_global_var('func_512')
call_1081 = func_511_call()
call_1082 = func_511_call()
output = relay.Tuple([call_1072,call_1074,call_1078,call_1081,])
output2 = relay.Tuple([call_1073,call_1075,call_1079,call_1082,])
func_1083 = relay.Function([], output)
mod['func_1083'] = func_1083
mod = relay.transform.InferType()(mod)
output = func_1083()
func_1084 = relay.Function([], output)
mutated_mod['func_1084'] = func_1084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_768_call = mod.get_global_var('func_768')
func_769_call = mutated_mod.get_global_var('func_769')
call_1114 = relay.TupleGetItem(func_768_call(), 1)
call_1115 = relay.TupleGetItem(func_769_call(), 1)
var_1121 = relay.var("var_1121", dtype = "int16", shape = (15, 5, 15))#candidate|1121|(15, 5, 15)|var|int16
bop_1122 = relay.logical_and(call_1114.astype('bool'), relay.reshape(var_1121.astype('bool'), relay.shape_of(call_1114))) # shape=(15, 5, 15)
bop_1125 = relay.logical_and(call_1115.astype('bool'), relay.reshape(var_1121.astype('bool'), relay.shape_of(call_1115))) # shape=(15, 5, 15)
output = bop_1122
output2 = bop_1125
func_1128 = relay.Function([var_1121,], output)
mod['func_1128'] = func_1128
mod = relay.transform.InferType()(mod)
mutated_mod['func_1128'] = func_1128
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1129 = relay.var("var_1129", dtype = "int16", shape = (15, 5, 15))#candidate|1129|(15, 5, 15)|var|int16
func_1128_call = mutated_mod.get_global_var('func_1128')
call_1130 = func_1128_call(var_1129)
output = call_1130
func_1131 = relay.Function([var_1129], output)
mutated_mod['func_1131'] = func_1131
mutated_mod = relay.transform.InferType()(mutated_mod)
const_1136 = relay.const(False, dtype = "bool")#candidate|1136|()|const|bool
var_1137 = relay.var("var_1137", dtype = "bool", shape = (14, 14, 12))#candidate|1137|(14, 14, 12)|var|bool
bop_1138 = relay.logical_and(const_1136.astype('bool'), var_1137.astype('bool')) # shape=(14, 14, 12)
output = bop_1138
output2 = bop_1138
func_1145 = relay.Function([var_1137,], output)
mod['func_1145'] = func_1145
mod = relay.transform.InferType()(mod)
mutated_mod['func_1145'] = func_1145
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1146 = relay.var("var_1146", dtype = "bool", shape = (14, 14, 12))#candidate|1146|(14, 14, 12)|var|bool
func_1145_call = mutated_mod.get_global_var('func_1145')
call_1147 = func_1145_call(var_1146)
output = call_1147
func_1148 = relay.Function([var_1146], output)
mutated_mod['func_1148'] = func_1148
mutated_mod = relay.transform.InferType()(mutated_mod)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_1168 = relay.TupleGetItem(func_811_call(), 1)
call_1169 = relay.TupleGetItem(func_813_call(), 1)
const_1173 = relay.const([[[7.232951,-1.057966,-5.363026,-9.992152,8.259047],[-5.642321,7.278694,-1.494991,3.217595,-3.096050],[9.852139,-0.671121,-0.146341,2.157977,0.461768],[6.546881,-4.472126,-1.195253,-5.287020,8.976175],[2.859972,-2.875867,-0.782024,1.113018,8.282547],[2.517299,-2.833392,0.233477,1.565764,7.038624],[8.027703,7.308295,-6.769956,-2.894241,1.927086],[2.614509,-1.696988,9.032278,-1.675924,-5.340549],[-2.126341,-4.720967,2.927590,7.099020,6.748220],[2.189455,-3.560749,-3.870322,0.479658,9.798325]],[[-0.739901,0.990945,-9.980174,7.604719,8.157264],[-7.421988,4.410700,-3.496797,-3.052721,7.920668],[-6.663700,-0.331377,-0.531640,-0.279129,-1.691283],[-6.170244,-1.720702,7.549362,-0.653229,3.859934],[-1.984701,6.046147,-5.899475,-6.355594,6.212068],[-4.200115,-6.588250,-0.206087,2.295188,-2.612117],[-4.589270,-9.138386,-2.038431,-1.300696,-3.479954],[3.354935,9.843265,4.979764,-2.775359,1.617819],[4.891808,-1.844171,-1.145033,-3.284347,9.111864],[8.330994,7.991000,-6.488509,8.750829,-9.808348]],[[-8.790039,-5.024583,-4.496007,3.964410,7.470827],[5.719470,5.149936,0.990617,-4.463980,8.570248],[-5.323064,-0.134733,8.688947,-0.099075,5.671977],[-7.964578,-7.353941,0.634825,-0.883703,3.202007],[0.563084,4.745757,-7.669354,1.488916,-1.993383],[-7.063971,6.087861,9.768623,8.531532,-9.691470],[-4.007403,-4.212577,1.259060,-3.644925,6.617852],[-3.571508,-9.204832,9.857033,-0.341683,3.774364],[2.272905,4.475922,-0.932744,0.774775,-8.472660],[-4.397495,9.604849,6.355358,5.583868,-7.680288]],[[-9.463014,3.955167,-1.066227,6.465545,0.188287],[-3.540049,8.678146,-0.915802,-2.390751,8.245211],[6.731865,2.539435,5.159896,6.481852,-5.577257],[0.927944,-4.525563,8.979835,9.334672,7.801159],[-0.895096,1.779713,-4.489386,8.395877,-6.479063],[5.827014,8.464446,-1.317329,-5.965707,1.361786],[2.023206,1.707171,3.762451,7.200436,2.808353],[-4.037637,-0.518886,2.196968,9.867549,3.077725],[-7.188908,0.115635,9.209227,-1.994561,5.305040],[9.891503,-3.991475,1.769878,3.228091,-7.216562]],[[4.258505,-1.118138,-2.658780,-0.353472,8.310535],[0.594496,9.042418,4.707065,-5.740715,-9.252454],[0.995060,1.276100,-3.273577,1.974794,2.444075],[-9.929534,-7.765652,-1.642037,5.270050,-5.681037],[-3.892886,-1.286124,-0.237186,-7.239302,0.533956],[8.317038,-7.218253,-9.783813,2.855121,9.267137],[2.707426,0.217337,-4.917077,-2.237056,5.717701],[-5.780001,6.788071,6.182983,-5.634161,-5.790642],[-0.285278,-3.032156,-1.193354,6.718273,1.626015],[-0.179017,-4.420267,-0.553105,5.169036,-8.808172]],[[-7.842385,-1.797401,4.355134,7.574471,-3.847293],[3.568969,7.063845,4.424764,-4.624934,3.752581],[0.996736,-9.367009,-4.353980,7.668273,-5.282417],[-4.098019,-1.982692,-3.438836,-5.669341,-2.853653],[8.100987,1.102761,1.820982,8.173179,8.955783],[5.854746,-8.417289,-0.651377,1.216303,7.693331],[-3.255833,-6.172271,-3.252681,-9.224983,-3.586748],[7.257787,0.378817,0.013625,-5.929920,-8.663958],[4.620547,-6.884070,-8.065139,-9.816437,-7.451006],[9.410615,5.856192,-3.433733,-3.189612,-9.885151]],[[9.651067,-0.300574,-2.532063,9.114671,-3.734438],[-1.185844,-3.948260,-1.107966,-0.183431,-4.949097],[-2.933941,9.065150,7.664494,6.053956,-6.475024],[-7.697782,-6.882684,-6.084835,-3.663332,7.228738],[-1.829277,4.934491,-2.924303,0.879696,-1.998291],[-1.584670,7.065106,1.838405,0.819953,-9.533834],[-3.705911,9.980702,2.489127,-0.260980,1.304691],[0.932232,4.732552,-0.801917,-7.142111,-6.364959],[1.718554,2.514865,-6.157440,8.933240,9.377849],[-3.072559,0.786004,-0.775998,4.339016,-9.905737]],[[-9.078362,-9.342165,-9.086144,-2.000662,-7.854144],[-5.466183,5.845519,-9.246145,-6.461037,2.165796],[3.282998,7.415421,3.448946,-1.348390,-0.461006],[2.672405,-5.766507,0.802686,2.102685,6.784679],[-4.009975,1.203796,9.577177,-8.730358,-6.350403],[7.118508,6.260435,-9.457037,1.413269,4.832391],[2.851832,-2.575672,8.504163,3.945431,6.231117],[-3.427351,-0.351851,4.021182,-2.649543,3.919026],[9.374883,-4.232258,7.371498,5.008713,7.469184],[6.883361,-8.690556,-7.111898,9.918322,-1.858696]],[[-9.162763,-3.741690,-2.743505,-1.557613,5.125601],[3.811571,9.342827,3.048452,-1.839058,0.461079],[-7.902697,3.597623,-3.521423,-9.100084,6.061223],[3.503541,3.581142,-5.974813,6.075435,-1.758930],[-7.680694,-1.318912,-0.897910,-0.131658,-2.239651],[-8.124858,-8.746453,9.372023,-4.336163,-5.113592],[-8.894888,3.093925,-4.971317,-2.939673,7.760164],[-5.407334,-0.641956,2.274157,4.210918,-4.698023],[0.497953,-1.229494,-2.309343,-5.876064,0.538680],[-4.166949,-5.044649,9.953191,6.001052,9.037195]],[[4.711771,-0.685441,-4.142933,-8.912451,7.091942],[7.621842,9.679146,1.546681,-4.862139,-5.336035],[-0.499348,4.840809,5.674067,8.341384,-8.433992],[6.298836,1.196802,-3.865522,7.633975,3.969879],[6.121240,4.089667,-1.134390,-3.448975,-0.256276],[-9.449192,6.291010,-1.146731,-4.741186,4.028610],[-0.705171,-4.168123,-7.842885,1.540721,6.900004],[-9.368941,5.354552,-7.605994,-6.470038,-8.387417],[4.744401,-5.061239,4.246267,0.728809,-7.101212],[-3.475627,3.723897,-7.113765,6.943203,0.683823]],[[-8.844140,0.247116,4.927021,5.605998,-2.152800],[1.882247,-1.882419,-5.817526,-5.603431,-4.361591],[-7.158313,6.324645,7.866070,8.884488,3.472211],[-8.553247,0.239930,9.087855,2.997735,-3.001425],[8.746839,6.929122,9.571103,3.465187,-2.532133],[5.304382,-8.734742,-6.849707,-3.024412,2.365526],[8.735799,-8.394090,7.077724,3.865739,-5.325999],[4.151837,7.184986,-3.019018,-3.401004,-6.239609],[6.442683,-8.430853,-6.611142,0.336984,-0.356793],[-8.940166,-0.550595,-2.436723,9.785126,-5.686013]],[[-1.231095,4.399168,9.493876,-6.260901,7.612059],[-1.607701,-9.011443,-1.205197,4.351714,-5.253949],[-0.204004,5.711936,5.907735,5.467434,-1.193426],[-1.438411,3.256992,-4.676702,9.279762,-8.983041],[-1.803154,3.929058,5.049759,8.789502,-2.654425],[6.148243,7.766765,0.278927,-4.835431,8.974216],[9.530820,8.553438,2.205592,7.317114,1.489414],[1.614893,-0.189010,-0.184888,-1.580720,-9.460239],[1.132869,-2.723293,4.171644,5.370054,-8.114025],[-9.688294,6.920031,-7.083404,8.628126,5.951336]]], dtype = "float32")#candidate|1173|(12, 10, 5)|const|float32
bop_1174 = relay.minimum(call_1168.astype('float64'), relay.reshape(const_1173.astype('float64'), relay.shape_of(call_1168))) # shape=(12, 10, 5)
bop_1177 = relay.minimum(call_1169.astype('float64'), relay.reshape(const_1173.astype('float64'), relay.shape_of(call_1169))) # shape=(12, 10, 5)
output = bop_1174
output2 = bop_1177
func_1184 = relay.Function([], output)
mod['func_1184'] = func_1184
mod = relay.transform.InferType()(mod)
output = func_1184()
func_1185 = relay.Function([], output)
mutated_mod['func_1185'] = func_1185
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_1327 = relay.TupleGetItem(func_1070_call(), 1)
call_1328 = relay.TupleGetItem(func_1071_call(), 1)
func_329_call = mod.get_global_var('func_329')
func_332_call = mutated_mod.get_global_var('func_332')
call_1336 = relay.TupleGetItem(func_329_call(relay.reshape(call_1327.astype('float32'), [600,])), 7)
call_1337 = relay.TupleGetItem(func_332_call(relay.reshape(call_1327.astype('float32'), [600,])), 7)
uop_1338 = relay.tan(call_1336.astype('float64')) # shape=(12, 10, 5)
uop_1340 = relay.tan(call_1337.astype('float64')) # shape=(12, 10, 5)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_1351 = relay.TupleGetItem(func_861_call(), 0)
call_1352 = relay.TupleGetItem(func_862_call(), 0)
func_466_call = mod.get_global_var('func_466')
func_469_call = mutated_mod.get_global_var('func_469')
call_1353 = relay.TupleGetItem(func_466_call(relay.reshape(call_1351.astype('float64'), [15, 5, 15]), relay.reshape(uop_1338.astype('float32'), [600,]), ), 2)
call_1354 = relay.TupleGetItem(func_469_call(relay.reshape(call_1351.astype('float64'), [15, 5, 15]), relay.reshape(uop_1338.astype('float32'), [600,]), ), 2)
output = relay.Tuple([call_1327,uop_1338,call_1351,call_1353,])
output2 = relay.Tuple([call_1328,uop_1340,call_1352,call_1354,])
func_1355 = relay.Function([], output)
mod['func_1355'] = func_1355
mod = relay.transform.InferType()(mod)
output = func_1355()
func_1356 = relay.Function([], output)
mutated_mod['func_1356'] = func_1356
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_1363 = relay.TupleGetItem(func_1355_call(), 3)
call_1364 = relay.TupleGetItem(func_1356_call(), 3)
output = relay.Tuple([call_1363,])
output2 = relay.Tuple([call_1364,])
func_1374 = relay.Function([], output)
mod['func_1374'] = func_1374
mod = relay.transform.InferType()(mod)
output = func_1374()
func_1375 = relay.Function([], output)
mutated_mod['func_1375'] = func_1375
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_1379 = relay.TupleGetItem(func_1374_call(), 0)
call_1380 = relay.TupleGetItem(func_1375_call(), 0)
var_1390 = relay.var("var_1390", dtype = "float32", shape = (12, 10, 5))#candidate|1390|(12, 10, 5)|var|float32
bop_1391 = relay.subtract(call_1379.astype('uint16'), relay.reshape(var_1390.astype('uint16'), relay.shape_of(call_1379))) # shape=(12, 10, 5)
bop_1394 = relay.subtract(call_1380.astype('uint16'), relay.reshape(var_1390.astype('uint16'), relay.shape_of(call_1380))) # shape=(12, 10, 5)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_1397 = relay.TupleGetItem(func_235_call(), 3)
call_1398 = relay.TupleGetItem(func_236_call(), 3)
uop_1402 = relay.erf(bop_1391.astype('float64')) # shape=(12, 10, 5)
uop_1404 = relay.erf(bop_1394.astype('float64')) # shape=(12, 10, 5)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_1413 = relay.TupleGetItem(func_861_call(), 0)
call_1414 = relay.TupleGetItem(func_862_call(), 0)
func_1145_call = mod.get_global_var('func_1145')
func_1148_call = mutated_mod.get_global_var('func_1148')
const_1426 = relay.const([False,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,False,False,True,True,False,False,False,False,True,True,False,True,True,False,True,True,True,True,True,False,True,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,False,False,False,False,True,True,True,False,False,True,True,False,True,True,True,True,True,False,True,True,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,False,False,True,True,False,False,True,True,False,True,True,True,True,True,True,False,False,True,False,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,False,False,True,False,False,False,True,False,True,True,True,True,True,True,True,False,False,True,True,False,True,False,True,False,True,False,False,True,True,True,False,True,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,True,True,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,True,False,False,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,True,False,False,True,True,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,False,True,True,True,False,False,True,True,False,False,False,True,True,False,False,False,True,True,False,True,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,True,False,True,True,True,True,False,False,True,True,True,True,True,True,True,False,False,False,True,False,False,False,True,True,True,False,False,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,True,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,True,True,True,False,True,False,False,True,True,True,False,False,True,True,False,False,True,False,False,False,False,True,True,False,False,True,False,False,True,False,True,False,True,False,True,False,False,True,False,False,False,False,False,True,False,False,True,True,False,False,True,True,True,False,True,True,True,True,True,False,True,False,False,True,False,True,True,False,False,True,False,False,False,False,False,False,False,True,True,True,True,False,False,False,False,True,True,True,False,False,True,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,True,True,True,False,True,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,False,True,False,True,True,True,True,False,False,True,True,True,False,False,False,False,True,True,True,True,False,False,False,True,True,False,False,False,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,True,True,False,True,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,True,False,False,False,True,True,False,True,True,False,True,False,False,True,False,True,True,True,False,True,True,True,False,True,False,False,False,True,True,True,True,True,False,True,True,True,True,True,True,False,True,False,False,False,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,False,False,False,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,False,False,False,False,False,False,True,False,False,True,True,True,False,True,False,False,True,False,True,False,False,True,True,True,True,True,False,True,True,False,False,False,False,False,False,False,True,True,True,True,True,False,False,True,True,True,False,False,True,True,False,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,False,False,False,True,False,True,False,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,True,False,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,False,False,False,False,False,True,True,False,True,False,False,False,False,False,False,False,False,False,True,False,False,True,True,True,True,False,True,False,False,False,False,True,False,False,True,True,False,False,True,True,False,False,True,True,False,True,True,False,False,True,False,False,False,False,True,True,False,True,True,False,True,True,True,False,False,False,True,False,False,False,True,True,False,True,False,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,False,False,False,False,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,True,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,False,True,True,False,True,True,False,True,True,True,False,True,True,True,True,False,False,False,False,False,False,False,True,False,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,False,True,False,True,True,False,True,False,False,True,True,False,False,False,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,True,True,True,False,True,False,False,True,True,False,False,True,True,False,True,False,False,True,True,False,True,False,True,False,False,True,False,False,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,True,True,True,False,False,False,False,True,True,False,True,True,True,True,True,False,True,False,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,False,False,True,True,True,True,False,True,True,False,False,False,False,True,True,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,False,False,True,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,False,False,False,True,False,True,False,False,True,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,False,True,False,False,False,True,False,False,True,True,False,False,True,False,True,True,True,False,True,False,True,True,True,True,True,False,True,False,False,True,True,False,True,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,True,False,False,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,False,True,False,True,True,False,False,True,False,True,False,False,True,False,True,False,True,False,False,False,False,True,True,True,True,True,True,True,False,False,True,True,True,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,True,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,True,True,False,False,False,True,False,False,False,False,True,False,False,True,False,False,False,True,False,False,False,False,False,False,True,True,False,False,False,False,False,True,True,True,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,False,True,False,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,True,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,True,True,True,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,False,False,True,True,False,True,False,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,False,False,True,False,False,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,True,False,True,False,True,False,False,False,True,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,True,False,False,True,True,False,False,False,False,True,False,False,True,False,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,True,True,False,True,True,True,True,False,False,True,False,False,False,True,False,False,False,True,True,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,True,True,False,False,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,True,False,True,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,False,False,True,False,False,False,False,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,True,True,True,True,False,False,False,False,False,True,False,True,True,False,True,True,True,False,True,False,True,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,True,True,True,False,True,False,True,False,False,True,True,False,False,False,True,True,True,True,True,False,True,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,True,True,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,True,False,False,True,False,False,False,False,True,False,False,False,True,False,True,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,False,True,True,True,False,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,False,True,True,True,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,False,True,True,False,True,False,True,False,False,False,False,False,False,True,True,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,False,False,True,False,False,False,False,True,False,False,True,True,False,False,False,False,True,False,True,True,True,True,False,True,False,False,True,False,False,True,False,True,True,True,True,True,True,True,False,False,False,True,True,False,True,True,False,True], dtype = "bool")#candidate|1426|(2352,)|const|bool
call_1425 = func_1145_call(relay.reshape(const_1426.astype('bool'), [14, 14, 12]))
call_1427 = func_1145_call(relay.reshape(const_1426.astype('bool'), [14, 14, 12]))
output = relay.Tuple([call_1397,uop_1402,call_1413,call_1425,const_1426,])
output2 = relay.Tuple([call_1398,uop_1404,call_1414,call_1427,const_1426,])
func_1428 = relay.Function([var_1390,], output)
mod['func_1428'] = func_1428
mod = relay.transform.InferType()(mod)
mutated_mod['func_1428'] = func_1428
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1429 = relay.var("var_1429", dtype = "float32", shape = (12, 10, 5))#candidate|1429|(12, 10, 5)|var|float32
func_1428_call = mutated_mod.get_global_var('func_1428')
call_1430 = func_1428_call(var_1429)
output = call_1430
func_1431 = relay.Function([var_1429], output)
mutated_mod['func_1431'] = func_1431
mutated_mod = relay.transform.InferType()(mutated_mod)
func_867_call = mod.get_global_var('func_867')
func_869_call = mutated_mod.get_global_var('func_869')
call_1444 = relay.TupleGetItem(func_867_call(), 0)
call_1445 = relay.TupleGetItem(func_869_call(), 0)
output = call_1444
output2 = call_1445
func_1446 = relay.Function([], output)
mod['func_1446'] = func_1446
mod = relay.transform.InferType()(mod)
output = func_1446()
func_1447 = relay.Function([], output)
mutated_mod['func_1447'] = func_1447
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1448 = relay.var("var_1448", dtype = "float64", shape = (14, 9, 3))#candidate|1448|(14, 9, 3)|var|float64
uop_1449 = relay.log(var_1448.astype('float64')) # shape=(14, 9, 3)
uop_1494 = relay.log2(uop_1449.astype('float64')) # shape=(14, 9, 3)
var_1498 = relay.var("var_1498", dtype = "float64", shape = (14, 9, 3))#candidate|1498|(14, 9, 3)|var|float64
bop_1499 = relay.equal(var_1448.astype('bool'), relay.reshape(var_1498.astype('bool'), relay.shape_of(var_1448))) # shape=(14, 9, 3)
output = relay.Tuple([uop_1494,bop_1499,])
output2 = relay.Tuple([uop_1494,bop_1499,])
func_1502 = relay.Function([var_1448,var_1498,], output)
mod['func_1502'] = func_1502
mod = relay.transform.InferType()(mod)
var_1503 = relay.var("var_1503", dtype = "float64", shape = (14, 9, 3))#candidate|1503|(14, 9, 3)|var|float64
var_1504 = relay.var("var_1504", dtype = "float64", shape = (14, 9, 3))#candidate|1504|(14, 9, 3)|var|float64
output = func_1502(var_1503,var_1504,)
func_1505 = relay.Function([var_1503,var_1504,], output)
mutated_mod['func_1505'] = func_1505
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1518 = relay.var("var_1518", dtype = "uint64", shape = (7, 13, 15))#candidate|1518|(7, 13, 15)|var|uint64
var_1519 = relay.var("var_1519", dtype = "uint64", shape = (7, 13, 15))#candidate|1519|(7, 13, 15)|var|uint64
bop_1520 = relay.equal(var_1518.astype('bool'), relay.reshape(var_1519.astype('bool'), relay.shape_of(var_1518))) # shape=(7, 13, 15)
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_1531 = relay.TupleGetItem(func_1355_call(), 3)
call_1532 = relay.TupleGetItem(func_1356_call(), 3)
const_1537 = relay.const([[[-7,2,2,4,-2,5,-8,-9,3,-6,-1,3,-6,-5,1],[7,-6,10,7,-3,9,-6,-9,1,7,10,8,7,8,-10],[-7,-1,-8,-10,4,-5,1,10,-8,-10,10,4,-7,9,5],[6,-8,5,-7,2,8,4,9,-1,-7,-2,5,3,9,7],[3,5,2,9,5,-1,-1,6,9,6,8,-10,-6,-5,5],[8,-7,9,-3,9,10,-2,-4,-10,6,8,-6,9,3,6],[5,-6,-6,-2,-3,-6,-10,3,-9,-7,-1,-2,-3,-8,4],[4,9,-6,7,2,10,5,8,-1,3,3,3,10,6,-2],[-3,4,10,-6,7,-9,8,4,-3,3,5,9,-3,3,8],[-4,6,4,-5,1,10,6,3,4,-6,-4,-4,8,4,9],[-9,-7,-8,-8,-5,4,10,-3,-9,-9,-3,4,7,-7,3],[7,8,6,-6,8,3,7,1,6,-7,4,9,-9,2,-9],[1,-7,-9,4,7,-5,5,4,1,3,7,10,-5,-2,5]],[[2,-7,-7,-3,-10,-5,1,-8,-4,-6,-9,-6,7,-7,10],[2,10,-2,4,7,6,-2,2,3,-10,-4,-10,-5,-4,9],[6,6,9,-2,3,-10,3,-7,1,-10,-7,-10,-7,-5,9],[6,5,9,10,-10,3,4,-1,9,-1,5,-7,6,-9,-8],[-6,4,-6,5,6,-1,-5,-3,7,8,-4,7,-7,-9,5],[7,-10,1,3,2,-1,-8,-9,3,-4,-6,-6,-2,-8,-3],[6,4,-10,4,3,5,-8,-2,-4,4,8,8,5,-8,1],[-5,3,7,-8,-9,4,7,-6,10,6,10,6,-7,-8,-5],[8,7,1,7,2,10,-9,-1,-8,5,-7,-7,2,5,10],[-8,1,-2,-1,2,4,-1,-3,-9,5,4,-10,-6,-6,2],[-2,6,8,-6,8,2,1,6,8,-4,3,5,-10,6,4],[2,10,1,-8,9,-6,8,6,1,3,-7,5,8,2,1],[-3,4,-3,-3,2,6,3,-5,-10,-5,2,-7,-3,-2,10]],[[3,-6,-7,3,-9,2,-3,9,-5,4,2,-9,5,-6,9],[10,-1,10,-5,-10,8,-10,-8,-8,-8,3,2,-10,6,-2],[6,-6,10,7,-6,2,10,4,-10,2,-9,-9,1,-6,9],[-1,-3,2,-4,9,-7,-6,4,6,4,-4,-5,4,6,2],[-1,10,3,-5,10,-6,6,3,-2,4,7,1,-4,-7,-6],[-6,3,8,10,2,1,7,10,7,-9,7,10,-7,2,5],[-4,-4,-8,4,8,-10,-3,-6,6,-4,4,-2,-9,9,2],[9,6,4,6,4,1,-4,-10,9,4,3,-3,2,-4,3],[-6,4,6,10,6,-7,-9,-3,-3,-6,-4,-5,-6,10,10],[7,-6,8,1,-3,1,3,-2,8,9,-4,-5,-1,-8,10],[-2,1,-10,-9,6,-7,1,8,8,-1,-2,-1,4,5,-3],[-7,3,-3,9,-5,4,-6,4,10,-2,1,6,10,-2,-1],[1,1,7,9,8,5,-6,8,-6,3,9,-3,-4,4,-9]],[[2,-4,6,-7,-9,6,6,4,-3,-2,8,8,8,-4,9],[-9,3,-2,-7,3,3,-10,3,-2,-6,-5,-8,8,7,10],[5,-7,-5,7,-9,7,-2,-2,5,-3,10,5,-1,6,5],[3,7,8,10,-3,-8,2,1,4,10,7,5,10,5,3],[-1,-1,8,-2,9,-9,8,-8,7,-3,9,-9,-1,10,4],[-9,-10,3,2,-6,1,-7,-9,7,8,5,1,-4,4,2],[7,-2,2,5,-3,4,-8,-2,-7,-5,3,4,5,-8,-2],[-4,2,6,-3,9,-1,9,-5,6,-2,-10,-2,-8,-2,5],[-7,-3,-9,2,-1,6,-5,3,6,5,-2,-4,9,1,-8],[-7,9,3,-10,-10,7,5,10,3,7,5,-3,2,-3,-3],[-3,-8,-10,-10,10,-3,5,1,4,-3,-4,-8,9,10,7],[7,-4,4,-7,-8,4,4,-7,-7,10,2,8,2,-4,-1],[8,10,-2,7,9,-8,5,4,-6,-5,-1,-2,-8,6,9]],[[-10,-7,8,-5,1,-10,-8,-1,-9,5,5,10,5,-4,-10],[2,9,-2,-1,1,2,-10,-8,-3,10,-10,6,-4,8,3],[4,-9,7,9,-2,-9,-4,5,2,7,-7,-8,-9,-3,-4],[-6,-4,-1,-10,-6,-1,-7,5,-4,-9,8,-10,-9,3,-7],[-10,5,-9,4,7,2,-6,2,10,-8,-1,-4,-7,1,7],[-8,10,-3,-10,-10,9,-6,10,8,-7,8,-7,10,-7,3],[-8,3,4,9,-2,-2,1,-8,5,-9,-4,-10,-9,-4,-3],[4,-10,1,2,-10,9,5,-10,-10,-9,-9,6,-4,2,-5],[7,-8,4,-2,9,1,4,9,7,10,10,8,1,-3,8],[-9,7,1,-7,8,-5,-8,-4,-4,8,-6,-3,4,-4,10],[7,8,-9,3,-4,-5,-1,9,-10,6,-4,6,-7,-5,9],[7,-9,8,-6,5,6,-10,-3,-2,-9,-10,-3,4,9,2],[-7,4,4,5,4,9,-9,9,-7,4,-9,10,-1,1,6]],[[-7,-10,10,-4,-3,4,-10,-10,-7,-10,-4,-5,1,3,-5],[-7,3,-5,1,-7,-8,6,-5,7,-5,3,7,8,-6,-2],[-7,5,-6,2,-10,2,1,7,6,10,-2,3,-4,7,-9],[9,10,7,-4,3,-9,3,-5,-7,-4,-2,-3,6,-5,5],[4,3,10,9,-10,-10,-9,10,3,7,-6,4,6,-7,4],[9,6,3,-2,1,-7,1,-4,-2,-10,-2,7,-8,-7,6],[-4,9,-6,7,-5,8,-1,-9,-3,10,9,-10,2,-1,-10],[10,3,6,-2,-5,-3,-8,-5,-9,-8,-2,3,-7,-9,-3],[7,-6,1,-10,-7,9,-2,-4,3,-5,-2,-10,-8,-9,-5],[-9,6,-5,-7,9,1,-6,4,-10,-3,8,10,2,2,7],[4,2,-9,-6,-3,2,4,7,-10,-4,9,-10,-7,9,6],[9,-9,-9,-9,9,-1,-5,1,-2,6,3,6,-6,-8,4],[-8,3,5,10,-8,-3,-9,5,-10,-8,4,4,7,-5,-5]],[[-6,-4,-2,2,3,10,10,-6,-9,3,-5,-1,7,10,-10],[10,10,6,3,4,7,-1,5,-3,4,-4,-4,-7,-2,4],[-2,1,-10,-3,-4,-8,3,9,7,-4,1,-1,2,8,6],[7,6,-1,-2,9,3,8,-9,6,2,-8,-8,10,10,4],[-9,6,-9,-4,-1,-9,-2,-4,6,8,2,1,-6,9,-6],[-2,4,-2,4,3,1,-2,1,-4,8,4,-8,9,5,-10],[1,-8,7,-7,6,-6,2,-9,-6,9,-5,-5,8,-6,1],[4,7,8,-1,-7,-5,-3,-5,-1,5,6,-2,2,-6,-1],[-4,1,-6,-7,4,-4,-9,7,1,-6,9,-6,-4,1,7],[-6,-8,4,6,10,7,10,-3,1,-4,-10,-8,3,5,1],[7,-4,-6,10,-2,-3,-6,-7,9,-5,-7,-5,-3,9,4],[1,9,6,-6,9,-9,-8,-5,-6,-5,9,-7,-8,-3,-8],[9,8,-7,-5,-3,2,9,6,5,10,4,3,-2,-10,8]]], dtype = "uint64")#candidate|1537|(7, 13, 15)|const|uint64
bop_1538 = relay.logical_or(var_1518.astype('bool'), relay.reshape(const_1537.astype('bool'), relay.shape_of(var_1518))) # shape=(7, 13, 15)
uop_1545 = relay.cos(call_1531.astype('float32')) # shape=(12, 10, 5)
uop_1547 = relay.cos(call_1532.astype('float32')) # shape=(12, 10, 5)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_1549 = relay.TupleGetItem(func_1070_call(), 0)
call_1550 = relay.TupleGetItem(func_1071_call(), 0)
func_1128_call = mod.get_global_var('func_1128')
func_1131_call = mutated_mod.get_global_var('func_1131')
call_1553 = func_1128_call(relay.reshape(call_1549.astype('int16'), [15, 5, 15]))
call_1554 = func_1128_call(relay.reshape(call_1549.astype('int16'), [15, 5, 15]))
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_1557 = relay.TupleGetItem(func_1355_call(), 1)
call_1558 = relay.TupleGetItem(func_1356_call(), 1)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_1566 = func_30_call(relay.reshape(call_1557.astype('float32'), [12, 10, 5]), relay.reshape(uop_1545.astype('float32'), [12, 10, 5]), )
call_1567 = func_30_call(relay.reshape(call_1557.astype('float32'), [12, 10, 5]), relay.reshape(uop_1545.astype('float32'), [12, 10, 5]), )
bop_1575 = relay.right_shift(uop_1545.astype('int64'), relay.reshape(call_1566.astype('int64'), relay.shape_of(uop_1545))) # shape=(12, 10, 5)
bop_1578 = relay.right_shift(uop_1547.astype('int64'), relay.reshape(call_1567.astype('int64'), relay.shape_of(uop_1547))) # shape=(12, 10, 5)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_1587 = relay.TupleGetItem(func_811_call(), 2)
call_1588 = relay.TupleGetItem(func_813_call(), 2)
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_1589 = relay.TupleGetItem(func_1374_call(), 0)
call_1590 = relay.TupleGetItem(func_1375_call(), 0)
var_1607 = relay.var("var_1607", dtype = "float32", shape = (12, 10, 5))#candidate|1607|(12, 10, 5)|var|float32
bop_1608 = relay.less(call_1566.astype('bool'), relay.reshape(var_1607.astype('bool'), relay.shape_of(call_1566))) # shape=(12, 10, 5)
bop_1611 = relay.less(call_1567.astype('bool'), relay.reshape(var_1607.astype('bool'), relay.shape_of(call_1567))) # shape=(12, 10, 5)
func_1128_call = mod.get_global_var('func_1128')
func_1131_call = mutated_mod.get_global_var('func_1131')
call_1619 = func_1128_call(relay.reshape(call_1549.astype('int16'), [15, 5, 15]))
call_1620 = func_1128_call(relay.reshape(call_1549.astype('int16'), [15, 5, 15]))
output = relay.Tuple([bop_1520,bop_1538,call_1549,call_1553,call_1557,bop_1575,call_1587,call_1589,bop_1608,call_1619,])
output2 = relay.Tuple([bop_1520,bop_1538,call_1550,call_1554,call_1558,bop_1578,call_1588,call_1590,bop_1611,call_1620,])
func_1622 = relay.Function([var_1518,var_1519,var_1607,], output)
mod['func_1622'] = func_1622
mod = relay.transform.InferType()(mod)
var_1623 = relay.var("var_1623", dtype = "uint64", shape = (7, 13, 15))#candidate|1623|(7, 13, 15)|var|uint64
var_1624 = relay.var("var_1624", dtype = "uint64", shape = (7, 13, 15))#candidate|1624|(7, 13, 15)|var|uint64
var_1625 = relay.var("var_1625", dtype = "float32", shape = (12, 10, 5))#candidate|1625|(12, 10, 5)|var|float32
output = func_1622(var_1623,var_1624,var_1625,)
func_1626 = relay.Function([var_1623,var_1624,var_1625,], output)
mutated_mod['func_1626'] = func_1626
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_1731 = relay.TupleGetItem(func_235_call(), 5)
call_1732 = relay.TupleGetItem(func_236_call(), 5)
output = relay.Tuple([call_1731,])
output2 = relay.Tuple([call_1732,])
func_1733 = relay.Function([], output)
mod['func_1733'] = func_1733
mod = relay.transform.InferType()(mod)
mutated_mod['func_1733'] = func_1733
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1733_call = mutated_mod.get_global_var('func_1733')
call_1734 = func_1733_call()
output = call_1734
func_1735 = relay.Function([], output)
mutated_mod['func_1735'] = func_1735
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1005_call = mod.get_global_var('func_1005')
func_1007_call = mutated_mod.get_global_var('func_1007')
call_1754 = relay.TupleGetItem(func_1005_call(), 0)
call_1755 = relay.TupleGetItem(func_1007_call(), 0)
uop_1772 = relay.sinh(call_1754.astype('float32')) # shape=(8, 14, 8)
uop_1774 = relay.sinh(call_1755.astype('float32')) # shape=(8, 14, 8)
output = relay.Tuple([uop_1772,])
output2 = relay.Tuple([uop_1774,])
func_1778 = relay.Function([], output)
mod['func_1778'] = func_1778
mod = relay.transform.InferType()(mod)
mutated_mod['func_1778'] = func_1778
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1778_call = mutated_mod.get_global_var('func_1778')
call_1779 = func_1778_call()
output = call_1779
func_1780 = relay.Function([], output)
mutated_mod['func_1780'] = func_1780
mutated_mod = relay.transform.InferType()(mutated_mod)
func_768_call = mod.get_global_var('func_768')
func_769_call = mutated_mod.get_global_var('func_769')
call_1788 = relay.TupleGetItem(func_768_call(), 1)
call_1789 = relay.TupleGetItem(func_769_call(), 1)
uop_1791 = relay.sigmoid(call_1788.astype('float64')) # shape=(15, 5, 15)
uop_1793 = relay.sigmoid(call_1789.astype('float64')) # shape=(15, 5, 15)
bop_1794 = relay.floor_divide(call_1788.astype('float32'), relay.reshape(uop_1791.astype('float32'), relay.shape_of(call_1788))) # shape=(15, 5, 15)
bop_1797 = relay.floor_divide(call_1789.astype('float32'), relay.reshape(uop_1793.astype('float32'), relay.shape_of(call_1789))) # shape=(15, 5, 15)
func_1005_call = mod.get_global_var('func_1005')
func_1007_call = mutated_mod.get_global_var('func_1007')
call_1802 = relay.TupleGetItem(func_1005_call(), 0)
call_1803 = relay.TupleGetItem(func_1007_call(), 0)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_1805 = relay.TupleGetItem(func_235_call(), 2)
call_1806 = relay.TupleGetItem(func_236_call(), 2)
uop_1809 = relay.atanh(uop_1791.astype('float32')) # shape=(15, 5, 15)
uop_1811 = relay.atanh(uop_1793.astype('float32')) # shape=(15, 5, 15)
uop_1816 = relay.cos(uop_1791.astype('float64')) # shape=(15, 5, 15)
uop_1818 = relay.cos(uop_1793.astype('float64')) # shape=(15, 5, 15)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_1822 = relay.TupleGetItem(func_1733_call(), 0)
call_1823 = relay.TupleGetItem(func_1735_call(), 0)
func_596_call = mod.get_global_var('func_596')
func_599_call = mutated_mod.get_global_var('func_599')
var_1825 = relay.var("var_1825", dtype = "float32", shape = (600,))#candidate|1825|(600,)|var|float32
call_1824 = relay.TupleGetItem(func_596_call(relay.reshape(uop_1809.astype('float64'), [15, 5, 15]), relay.reshape(var_1825.astype('float32'), [600,]), ), 1)
call_1826 = relay.TupleGetItem(func_599_call(relay.reshape(uop_1809.astype('float64'), [15, 5, 15]), relay.reshape(var_1825.astype('float32'), [600,]), ), 1)
bop_1837 = relay.bitwise_or(uop_1809.astype('uint16'), relay.reshape(uop_1816.astype('uint16'), relay.shape_of(uop_1809))) # shape=(15, 5, 15)
bop_1840 = relay.bitwise_or(uop_1811.astype('uint16'), relay.reshape(uop_1818.astype('uint16'), relay.shape_of(uop_1811))) # shape=(15, 5, 15)
func_1428_call = mod.get_global_var('func_1428')
func_1431_call = mutated_mod.get_global_var('func_1431')
call_1841 = relay.TupleGetItem(func_1428_call(relay.reshape(var_1825.astype('float32'), [12, 10, 5])), 0)
call_1842 = relay.TupleGetItem(func_1431_call(relay.reshape(var_1825.astype('float32'), [12, 10, 5])), 0)
func_1083_call = mod.get_global_var('func_1083')
func_1084_call = mutated_mod.get_global_var('func_1084')
call_1848 = relay.TupleGetItem(func_1083_call(), 1)
call_1849 = relay.TupleGetItem(func_1084_call(), 1)
var_1860 = relay.var("var_1860", dtype = "uint16", shape = (15, 5, 15))#candidate|1860|(15, 5, 15)|var|uint16
bop_1861 = relay.subtract(bop_1837.astype('int8'), relay.reshape(var_1860.astype('int8'), relay.shape_of(bop_1837))) # shape=(15, 5, 15)
bop_1864 = relay.subtract(bop_1840.astype('int8'), relay.reshape(var_1860.astype('int8'), relay.shape_of(bop_1840))) # shape=(15, 5, 15)
func_1428_call = mod.get_global_var('func_1428')
func_1431_call = mutated_mod.get_global_var('func_1431')
call_1870 = relay.TupleGetItem(func_1428_call(relay.reshape(var_1825.astype('float32'), [12, 10, 5])), 3)
call_1871 = relay.TupleGetItem(func_1431_call(relay.reshape(var_1825.astype('float32'), [12, 10, 5])), 3)
func_1428_call = mod.get_global_var('func_1428')
func_1431_call = mutated_mod.get_global_var('func_1431')
call_1883 = relay.TupleGetItem(func_1428_call(relay.reshape(var_1825.astype('float32'), [12, 10, 5])), 2)
call_1884 = relay.TupleGetItem(func_1431_call(relay.reshape(var_1825.astype('float32'), [12, 10, 5])), 2)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_1886 = relay.TupleGetItem(func_861_call(), 2)
call_1887 = relay.TupleGetItem(func_862_call(), 2)
output = relay.Tuple([bop_1794,call_1802,call_1805,call_1822,call_1824,var_1825,call_1841,call_1848,bop_1861,call_1870,call_1883,call_1886,])
output2 = relay.Tuple([bop_1797,call_1803,call_1806,call_1823,call_1826,var_1825,call_1842,call_1849,bop_1864,call_1871,call_1884,call_1887,])
func_1910 = relay.Function([var_1825,var_1860,], output)
mod['func_1910'] = func_1910
mod = relay.transform.InferType()(mod)
mutated_mod['func_1910'] = func_1910
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1910_call = mutated_mod.get_global_var('func_1910')
var_1912 = relay.var("var_1912", dtype = "float32", shape = (600,))#candidate|1912|(600,)|var|float32
var_1913 = relay.var("var_1913", dtype = "uint16", shape = (15, 5, 15))#candidate|1913|(15, 5, 15)|var|uint16
call_1911 = func_1910_call(var_1912,var_1913,)
output = call_1911
func_1914 = relay.Function([var_1912,var_1913,], output)
mutated_mod['func_1914'] = func_1914
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_1941 = relay.TupleGetItem(func_1355_call(), 3)
call_1942 = relay.TupleGetItem(func_1356_call(), 3)
var_1943 = relay.var("var_1943", dtype = "float32", shape = (12, 10, 5))#candidate|1943|(12, 10, 5)|var|float32
bop_1944 = relay.equal(call_1941.astype('bool'), relay.reshape(var_1943.astype('bool'), relay.shape_of(call_1941))) # shape=(12, 10, 5)
bop_1947 = relay.equal(call_1942.astype('bool'), relay.reshape(var_1943.astype('bool'), relay.shape_of(call_1942))) # shape=(12, 10, 5)
output = relay.Tuple([bop_1944,])
output2 = relay.Tuple([bop_1947,])
func_1955 = relay.Function([var_1943,], output)
mod['func_1955'] = func_1955
mod = relay.transform.InferType()(mod)
mutated_mod['func_1955'] = func_1955
mutated_mod = relay.transform.InferType()(mutated_mod)
var_1956 = relay.var("var_1956", dtype = "float32", shape = (12, 10, 5))#candidate|1956|(12, 10, 5)|var|float32
func_1955_call = mutated_mod.get_global_var('func_1955')
call_1957 = func_1955_call(var_1956)
output = call_1957
func_1958 = relay.Function([var_1956], output)
mutated_mod['func_1958'] = func_1958
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2000 = relay.var("var_2000", dtype = "float64", shape = (14, 8, 13))#candidate|2000|(14, 8, 13)|var|float64
uop_2001 = relay.asinh(var_2000.astype('float64')) # shape=(14, 8, 13)
uop_2005 = relay.acosh(var_2000.astype('float64')) # shape=(14, 8, 13)
output = relay.Tuple([uop_2001,uop_2005,])
output2 = relay.Tuple([uop_2001,uop_2005,])
func_2007 = relay.Function([var_2000,], output)
mod['func_2007'] = func_2007
mod = relay.transform.InferType()(mod)
var_2008 = relay.var("var_2008", dtype = "float64", shape = (14, 8, 13))#candidate|2008|(14, 8, 13)|var|float64
output = func_2007(var_2008)
func_2009 = relay.Function([var_2008], output)
mutated_mod['func_2009'] = func_2009
mutated_mod = relay.transform.InferType()(mutated_mod)
func_511_call = mod.get_global_var('func_511')
func_512_call = mutated_mod.get_global_var('func_512')
call_2113 = func_511_call()
call_2114 = func_511_call()
func_2007_call = mod.get_global_var('func_2007')
func_2009_call = mutated_mod.get_global_var('func_2009')
var_2127 = relay.var("var_2127", dtype = "float64", shape = (1456,))#candidate|2127|(1456,)|var|float64
call_2126 = relay.TupleGetItem(func_2007_call(relay.reshape(var_2127.astype('float64'), [14, 8, 13])), 1)
call_2128 = relay.TupleGetItem(func_2009_call(relay.reshape(var_2127.astype('float64'), [14, 8, 13])), 1)
func_1778_call = mod.get_global_var('func_1778')
func_1780_call = mutated_mod.get_global_var('func_1780')
call_2144 = relay.TupleGetItem(func_1778_call(), 0)
call_2145 = relay.TupleGetItem(func_1780_call(), 0)
output = relay.Tuple([call_2113,call_2126,var_2127,call_2144,])
output2 = relay.Tuple([call_2114,call_2128,var_2127,call_2145,])
func_2154 = relay.Function([var_2127,], output)
mod['func_2154'] = func_2154
mod = relay.transform.InferType()(mod)
mutated_mod['func_2154'] = func_2154
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2155 = relay.var("var_2155", dtype = "float64", shape = (1456,))#candidate|2155|(1456,)|var|float64
func_2154_call = mutated_mod.get_global_var('func_2154')
call_2156 = func_2154_call(var_2155)
output = call_2156
func_2157 = relay.Function([var_2155], output)
mutated_mod['func_2157'] = func_2157
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1446_call = mod.get_global_var('func_1446')
func_1447_call = mutated_mod.get_global_var('func_1447')
call_2223 = func_1446_call()
call_2224 = func_1446_call()
output = relay.Tuple([call_2223,])
output2 = relay.Tuple([call_2224,])
func_2227 = relay.Function([], output)
mod['func_2227'] = func_2227
mod = relay.transform.InferType()(mod)
output = func_2227()
func_2228 = relay.Function([], output)
mutated_mod['func_2228'] = func_2228
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_2249 = relay.TupleGetItem(func_235_call(), 2)
call_2250 = relay.TupleGetItem(func_236_call(), 2)
const_2279 = relay.const([[[6.741319,-2.408511,7.906916,-0.808096,-5.839756,-2.330250,9.040284,-9.077208,-0.796168,-4.760147,-1.917259],[9.099872,7.811726,-0.671591,-8.985782,-4.540454,-7.606957,-6.805632,-5.024146,7.261483,-1.130953,-9.174842],[2.859296,-3.793984,8.365262,-8.671427,-4.694874,-6.608278,1.855316,3.377922,-5.653692,0.559409,-9.694596],[9.826241,-2.817737,-8.948284,-2.756901,-1.032346,3.294032,8.458959,3.938500,-2.181643,-7.904322,-2.874087],[1.337743,7.140263,6.662979,-1.451863,1.648813,-3.955292,4.437284,-4.275762,4.695661,7.798903,9.642273],[-7.233567,-5.523243,-3.939425,2.261184,5.588657,-9.038151,9.654296,4.229719,-8.928984,0.181841,2.614619],[0.514795,-0.373058,-1.096922,7.396713,4.937334,2.861596,-8.788734,-0.068927,-8.633976,-6.187002,-7.024680]],[[-6.084762,-8.556906,-9.466157,8.899105,-6.495625,6.107957,9.152894,-5.636584,7.963960,-9.334674,-5.609438],[2.218209,7.825504,-0.610655,-1.188455,8.319882,-5.672214,5.987331,3.805581,-7.723538,8.017818,-7.535075],[-4.420661,7.103669,-1.535426,-9.029324,-0.502469,4.559005,6.649026,-5.798266,3.028446,-2.618332,9.470242],[-7.733594,-1.019212,-0.401321,7.284571,-1.824138,3.812075,2.008256,-2.188210,-3.963962,4.567218,-7.766718],[3.935669,9.659476,-0.584077,6.453018,6.140037,-5.673170,-3.674084,-0.132596,0.073916,0.261804,-9.088852],[3.296752,-8.433804,-3.602231,0.062930,-8.251596,0.984558,0.467221,8.361118,2.225373,2.516007,-7.575539],[-0.128876,7.549269,-1.224592,-0.717246,8.064460,0.604643,-6.803870,-7.322459,-8.349175,-7.692246,-0.320031]],[[5.809394,-2.314859,-1.729757,-5.756880,-1.758794,9.030431,-5.358482,-0.147742,2.260128,-9.958919,-0.762022],[-8.217294,8.595667,4.705023,-0.445138,8.812544,-1.825093,-8.791538,8.593365,7.996099,0.501247,6.766154],[-0.929823,-3.541946,-4.629513,-2.808137,0.165145,2.015432,9.361158,0.636309,-0.736298,7.511106,-1.345330],[4.030160,-9.887459,9.219025,-4.555289,-8.792150,7.685690,-1.698186,1.198038,-1.455761,7.979850,9.703465],[-4.161264,-8.401083,-6.233118,4.640070,0.452976,-1.316701,-6.043890,9.368689,2.726981,9.563049,-1.938933],[-7.798802,0.211585,6.517339,-8.880952,5.377713,8.327314,3.235115,-3.482057,-6.516699,8.816436,8.065342],[4.394742,-3.436183,-4.600051,7.611595,0.174890,2.805865,-5.152378,1.259047,7.664949,9.019778,-1.139120]]], dtype = "float64")#candidate|2279|(3, 7, 11)|const|float64
bop_2280 = relay.logical_or(call_2249.astype('bool'), const_2279.astype('bool')) # shape=(3, 7, 11)
bop_2283 = relay.logical_or(call_2250.astype('bool'), const_2279.astype('bool')) # shape=(3, 7, 11)
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_2304 = relay.TupleGetItem(func_1374_call(), 0)
call_2305 = relay.TupleGetItem(func_1375_call(), 0)
bop_2311 = relay.equal(bop_2280.astype('bool'), call_2249.astype('bool')) # shape=(3, 7, 11)
bop_2314 = relay.equal(bop_2283.astype('bool'), call_2250.astype('bool')) # shape=(3, 7, 11)
output = relay.Tuple([call_2304,bop_2311,])
output2 = relay.Tuple([call_2305,bop_2314,])
func_2317 = relay.Function([], output)
mod['func_2317'] = func_2317
mod = relay.transform.InferType()(mod)
mutated_mod['func_2317'] = func_2317
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2317_call = mutated_mod.get_global_var('func_2317')
call_2318 = func_2317_call()
output = call_2318
func_2319 = relay.Function([], output)
mutated_mod['func_2319'] = func_2319
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2317_call = mod.get_global_var('func_2317')
func_2319_call = mutated_mod.get_global_var('func_2319')
call_2324 = relay.TupleGetItem(func_2317_call(), 1)
call_2325 = relay.TupleGetItem(func_2319_call(), 1)
uop_2335 = relay.sin(call_2324.astype('float64')) # shape=(3, 7, 11)
uop_2337 = relay.sin(call_2325.astype('float64')) # shape=(3, 7, 11)
output = relay.Tuple([uop_2335,])
output2 = relay.Tuple([uop_2337,])
func_2342 = relay.Function([], output)
mod['func_2342'] = func_2342
mod = relay.transform.InferType()(mod)
mutated_mod['func_2342'] = func_2342
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2342_call = mutated_mod.get_global_var('func_2342')
call_2343 = func_2342_call()
output = call_2343
func_2344 = relay.Function([], output)
mutated_mod['func_2344'] = func_2344
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2378 = relay.var("var_2378", dtype = "float64", shape = (9, 3, 10))#candidate|2378|(9, 3, 10)|var|float64
uop_2379 = relay.log(var_2378.astype('float64')) # shape=(9, 3, 10)
output = relay.Tuple([uop_2379,])
output2 = relay.Tuple([uop_2379,])
func_2384 = relay.Function([var_2378,], output)
mod['func_2384'] = func_2384
mod = relay.transform.InferType()(mod)
mutated_mod['func_2384'] = func_2384
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2385 = relay.var("var_2385", dtype = "float64", shape = (9, 3, 10))#candidate|2385|(9, 3, 10)|var|float64
func_2384_call = mutated_mod.get_global_var('func_2384')
call_2386 = func_2384_call(var_2385)
output = call_2386
func_2387 = relay.Function([var_2385], output)
mutated_mod['func_2387'] = func_2387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_2399 = relay.TupleGetItem(func_1355_call(), 1)
call_2400 = relay.TupleGetItem(func_1356_call(), 1)
output = call_2399
output2 = call_2400
func_2403 = relay.Function([], output)
mod['func_2403'] = func_2403
mod = relay.transform.InferType()(mod)
output = func_2403()
func_2404 = relay.Function([], output)
mutated_mod['func_2404'] = func_2404
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2342_call = mod.get_global_var('func_2342')
func_2344_call = mutated_mod.get_global_var('func_2344')
call_2411 = relay.TupleGetItem(func_2342_call(), 0)
call_2412 = relay.TupleGetItem(func_2344_call(), 0)
output = relay.Tuple([call_2411,])
output2 = relay.Tuple([call_2412,])
func_2444 = relay.Function([], output)
mod['func_2444'] = func_2444
mod = relay.transform.InferType()(mod)
output = func_2444()
func_2445 = relay.Function([], output)
mutated_mod['func_2445'] = func_2445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1778_call = mod.get_global_var('func_1778')
func_1780_call = mutated_mod.get_global_var('func_1780')
call_2505 = relay.TupleGetItem(func_1778_call(), 0)
call_2506 = relay.TupleGetItem(func_1780_call(), 0)
output = call_2505
output2 = call_2506
func_2516 = relay.Function([], output)
mod['func_2516'] = func_2516
mod = relay.transform.InferType()(mod)
mutated_mod['func_2516'] = func_2516
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2516_call = mutated_mod.get_global_var('func_2516')
call_2517 = func_2516_call()
output = call_2517
func_2518 = relay.Function([], output)
mutated_mod['func_2518'] = func_2518
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2444_call = mod.get_global_var('func_2444')
func_2445_call = mutated_mod.get_global_var('func_2445')
call_2560 = relay.TupleGetItem(func_2444_call(), 0)
call_2561 = relay.TupleGetItem(func_2445_call(), 0)
uop_2563 = relay.sqrt(call_2560.astype('float32')) # shape=(3, 7, 11)
uop_2565 = relay.sqrt(call_2561.astype('float32')) # shape=(3, 7, 11)
output = relay.Tuple([uop_2563,])
output2 = relay.Tuple([uop_2565,])
func_2570 = relay.Function([], output)
mod['func_2570'] = func_2570
mod = relay.transform.InferType()(mod)
mutated_mod['func_2570'] = func_2570
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2570_call = mutated_mod.get_global_var('func_2570')
call_2571 = func_2570_call()
output = call_2571
func_2572 = relay.Function([], output)
mutated_mod['func_2572'] = func_2572
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2588 = relay.var("var_2588", dtype = "float32", shape = (13, 9, 11))#candidate|2588|(13, 9, 11)|var|float32
uop_2589 = relay.log2(var_2588.astype('float32')) # shape=(13, 9, 11)
output = uop_2589
output2 = uop_2589
func_2591 = relay.Function([var_2588,], output)
mod['func_2591'] = func_2591
mod = relay.transform.InferType()(mod)
mutated_mod['func_2591'] = func_2591
mutated_mod = relay.transform.InferType()(mutated_mod)
var_2592 = relay.var("var_2592", dtype = "float32", shape = (13, 9, 11))#candidate|2592|(13, 9, 11)|var|float32
func_2591_call = mutated_mod.get_global_var('func_2591')
call_2593 = func_2591_call(var_2592)
output = call_2593
func_2594 = relay.Function([var_2592], output)
mutated_mod['func_2594'] = func_2594
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1005_call = mod.get_global_var('func_1005')
func_1007_call = mutated_mod.get_global_var('func_1007')
call_2600 = relay.TupleGetItem(func_1005_call(), 0)
call_2601 = relay.TupleGetItem(func_1007_call(), 0)
output = call_2600
output2 = call_2601
func_2611 = relay.Function([], output)
mod['func_2611'] = func_2611
mod = relay.transform.InferType()(mod)
output = func_2611()
func_2612 = relay.Function([], output)
mutated_mod['func_2612'] = func_2612
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_2620 = relay.TupleGetItem(func_1070_call(), 0)
call_2621 = relay.TupleGetItem(func_1071_call(), 0)
uop_2632 = relay.atan(call_2620.astype('float64')) # shape=(15, 5, 15)
uop_2634 = relay.atan(call_2621.astype('float64')) # shape=(15, 5, 15)
output = uop_2632
output2 = uop_2634
func_2641 = relay.Function([], output)
mod['func_2641'] = func_2641
mod = relay.transform.InferType()(mod)
output = func_2641()
func_2642 = relay.Function([], output)
mutated_mod['func_2642'] = func_2642
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1184_call = mod.get_global_var('func_1184')
func_1185_call = mutated_mod.get_global_var('func_1185')
call_2703 = func_1184_call()
call_2704 = func_1184_call()
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_2708 = relay.TupleGetItem(func_1374_call(), 0)
call_2709 = relay.TupleGetItem(func_1375_call(), 0)
func_596_call = mod.get_global_var('func_596')
func_599_call = mutated_mod.get_global_var('func_599')
var_2712 = relay.var("var_2712", dtype = "float64", shape = (5, 225))#candidate|2712|(5, 225)|var|float64
call_2711 = relay.TupleGetItem(func_596_call(relay.reshape(var_2712.astype('float64'), [15, 5, 15]), relay.reshape(call_2703.astype('float32'), [600,]), ), 1)
call_2713 = relay.TupleGetItem(func_599_call(relay.reshape(var_2712.astype('float64'), [15, 5, 15]), relay.reshape(call_2703.astype('float32'), [600,]), ), 1)
var_2728 = relay.var("var_2728", dtype = "float64", shape = (5, 225))#candidate|2728|(5, 225)|var|float64
bop_2729 = relay.subtract(var_2712.astype('int8'), relay.reshape(var_2728.astype('int8'), relay.shape_of(var_2712))) # shape=(5, 225)
bop_2756 = relay.bitwise_and(bop_2729.astype('uint8'), relay.reshape(var_2712.astype('uint8'), relay.shape_of(bop_2729))) # shape=(5, 225)
output = relay.Tuple([call_2703,call_2708,call_2711,bop_2756,])
output2 = relay.Tuple([call_2704,call_2709,call_2713,bop_2756,])
func_2760 = relay.Function([var_2712,var_2728,], output)
mod['func_2760'] = func_2760
mod = relay.transform.InferType()(mod)
var_2761 = relay.var("var_2761", dtype = "float64", shape = (5, 225))#candidate|2761|(5, 225)|var|float64
var_2762 = relay.var("var_2762", dtype = "float64", shape = (5, 225))#candidate|2762|(5, 225)|var|float64
output = func_2760(var_2761,var_2762,)
func_2763 = relay.Function([var_2761,var_2762,], output)
mutated_mod['func_2763'] = func_2763
mutated_mod = relay.transform.InferType()(mutated_mod)
func_768_call = mod.get_global_var('func_768')
func_769_call = mutated_mod.get_global_var('func_769')
call_2771 = relay.TupleGetItem(func_768_call(), 0)
call_2772 = relay.TupleGetItem(func_769_call(), 0)
output = relay.Tuple([call_2771,])
output2 = relay.Tuple([call_2772,])
func_2812 = relay.Function([], output)
mod['func_2812'] = func_2812
mod = relay.transform.InferType()(mod)
output = func_2812()
func_2813 = relay.Function([], output)
mutated_mod['func_2813'] = func_2813
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2641_call = mod.get_global_var('func_2641')
func_2642_call = mutated_mod.get_global_var('func_2642')
call_2847 = func_2641_call()
call_2848 = func_2641_call()
output = call_2847
output2 = call_2848
func_2851 = relay.Function([], output)
mod['func_2851'] = func_2851
mod = relay.transform.InferType()(mod)
mutated_mod['func_2851'] = func_2851
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2851_call = mutated_mod.get_global_var('func_2851')
call_2852 = func_2851_call()
output = call_2852
func_2853 = relay.Function([], output)
mutated_mod['func_2853'] = func_2853
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1184_call = mod.get_global_var('func_1184')
func_1185_call = mutated_mod.get_global_var('func_1185')
call_2863 = func_1184_call()
call_2864 = func_1184_call()
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_2870 = func_30_call(relay.reshape(call_2863.astype('float32'), [12, 10, 5]), relay.reshape(call_2863.astype('float32'), [12, 10, 5]), )
call_2871 = func_30_call(relay.reshape(call_2863.astype('float32'), [12, 10, 5]), relay.reshape(call_2863.astype('float32'), [12, 10, 5]), )
output = relay.Tuple([call_2863,call_2870,])
output2 = relay.Tuple([call_2864,call_2871,])
func_2885 = relay.Function([], output)
mod['func_2885'] = func_2885
mod = relay.transform.InferType()(mod)
mutated_mod['func_2885'] = func_2885
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2885_call = mutated_mod.get_global_var('func_2885')
call_2886 = func_2885_call()
output = call_2886
func_2887 = relay.Function([], output)
mutated_mod['func_2887'] = func_2887
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2516_call = mod.get_global_var('func_2516')
func_2518_call = mutated_mod.get_global_var('func_2518')
call_3025 = func_2516_call()
call_3026 = func_2516_call()
uop_3028 = relay.exp(call_3025.astype('float32')) # shape=(8, 14, 8)
uop_3030 = relay.exp(call_3026.astype('float32')) # shape=(8, 14, 8)
func_2007_call = mod.get_global_var('func_2007')
func_2009_call = mutated_mod.get_global_var('func_2009')
var_3045 = relay.var("var_3045", dtype = "float64", shape = (4, 364))#candidate|3045|(4, 364)|var|float64
call_3044 = relay.TupleGetItem(func_2007_call(relay.reshape(var_3045.astype('float64'), [14, 8, 13])), 1)
call_3046 = relay.TupleGetItem(func_2009_call(relay.reshape(var_3045.astype('float64'), [14, 8, 13])), 1)
uop_3071 = relay.erf(call_3044.astype('float32')) # shape=(14, 8, 13)
uop_3073 = relay.erf(call_3046.astype('float32')) # shape=(14, 8, 13)
func_466_call = mod.get_global_var('func_466')
func_469_call = mutated_mod.get_global_var('func_469')
const_3077 = relay.const([[-4.936656,8.456910,8.755466],[5.091858,-3.732150,9.432265],[-1.749531,-2.665611,0.866989],[2.961349,-4.932934,-8.194473],[-5.460155,6.726568,0.182409],[-1.698090,-7.578928,-5.125294],[5.691427,7.060278,4.321566],[-5.197678,5.910855,-3.673677],[-4.587883,-4.089440,-8.708314],[0.721275,2.498160,-2.262781],[0.458230,-1.200655,-0.407129],[0.278534,-1.369751,1.819166],[-4.103270,0.154878,1.518080],[-2.324970,0.292608,-1.523746],[7.864126,4.179716,3.420316],[7.676960,-8.293112,-3.409075],[-0.243660,-4.533111,-8.180842],[4.457630,8.007721,5.877380],[-0.569258,-9.858609,-7.327192],[6.586539,-2.478455,-4.290626],[-2.325130,8.016842,1.651272],[-5.663118,0.795180,1.124601],[-5.529162,-9.715849,4.744350],[-1.576722,1.653531,-8.213851],[-4.199741,0.925287,-2.715796],[-9.958314,-5.265759,5.792364],[7.484421,7.415458,-9.638337],[-0.181367,5.737956,-3.690822],[-8.287076,-3.561469,0.380816],[-2.007608,9.004262,4.172110],[4.819112,-9.608749,1.734979],[-2.043812,2.839730,4.226919],[-9.474688,4.743682,8.618965],[-4.017350,-4.195790,8.378032],[3.206483,6.327956,-0.913482],[-3.483020,-5.326932,1.175010],[-1.870027,-0.011958,6.446215],[1.340022,-8.452211,-8.373364],[-2.700015,7.713949,5.632947],[0.315337,-6.282856,8.172594],[6.901616,6.570445,8.365236],[0.492340,-5.642351,0.763571],[0.527474,2.463243,7.073616],[0.080917,-6.347698,6.752402],[-7.729451,4.127581,6.691954],[8.211972,-3.689881,5.839736],[3.879632,-7.422065,-6.329036],[1.282505,-2.726184,6.172374],[-6.783201,-7.779577,-5.277023],[7.822158,-0.078378,0.027823],[1.009454,-0.982958,0.924702],[6.679933,-5.680886,-3.124083],[-3.431885,-9.702041,-3.737474],[-0.059786,3.312093,-7.566180],[-6.685297,-1.833908,-5.497076],[3.985880,-1.966477,0.589193],[8.691832,-3.849876,-6.800394],[-6.472401,-4.549218,-1.170739],[9.093517,-6.767264,7.613499],[-3.658892,-4.709295,-9.298274],[-2.160974,-0.597314,7.794023],[1.336479,1.069395,-0.843884],[-5.925918,-3.703722,1.369093],[-8.705594,2.985337,9.119506],[9.449617,8.255303,-3.380398],[-8.528168,1.577831,6.872462],[-6.301449,4.082951,-9.830362],[-1.003122,-9.277952,-2.767507],[7.893770,-1.138388,3.821269],[8.621953,6.538675,-5.105683],[-2.553848,0.456459,5.156953],[-5.303785,6.241448,6.622369],[2.397169,-2.974973,-2.539304],[6.564746,4.252473,7.108687],[-8.488462,2.256633,1.876698],[9.258479,-8.376149,3.247899],[-2.775609,-5.877183,8.482058],[2.669383,0.298632,-5.596608],[-1.899451,7.554392,-3.342524],[-4.350043,5.949495,-9.742729],[3.923752,-7.276750,-6.683333],[-9.662408,7.006215,-3.260439],[-7.910345,5.309127,-9.483498],[-1.225392,9.405109,-8.795994],[-3.982319,-4.590624,9.127129],[-3.618241,8.794139,-2.380056],[-7.667073,-7.106235,2.218318],[-9.217438,-2.509544,3.661481],[1.520989,-9.004803,7.475999],[-2.800235,5.246753,6.351612],[-9.916710,-9.700285,-1.305628],[3.005167,8.239882,-4.036644],[6.222917,-7.294123,-3.909723],[-8.411973,0.957752,5.646968],[9.512061,-8.076963,-0.247425],[8.886856,8.186891,-3.987368],[4.285954,-8.878870,8.819519],[7.222693,8.943787,3.714954],[-7.855898,-8.823951,-7.250044],[-5.305309,2.630368,-8.273680],[7.747724,-3.279022,5.129398],[-0.071399,3.299287,0.649371],[-6.752842,1.301490,7.078945],[7.995171,-0.221328,3.695405],[5.205897,-2.688148,3.147577],[5.750095,0.103531,3.289593],[-8.231946,8.894412,2.999623],[7.506988,4.361869,2.590789],[1.723971,-3.712817,-6.578704],[-3.294637,-1.880001,3.887610],[0.515693,-6.844218,-0.701015],[-7.186302,5.136494,-1.517961],[-7.632054,-6.235709,-0.133735],[-3.056959,1.804426,0.991593],[5.370413,1.556400,8.532407],[0.006979,0.034609,1.043259],[8.398540,2.829302,7.876906],[3.555051,8.444881,5.692933],[-3.454921,3.122661,9.067998],[9.655566,-7.313280,-2.218715],[1.607554,-2.534646,4.722253],[2.713295,4.376746,9.931367],[-0.795778,7.162212,0.021424],[-9.882784,-8.060824,7.474190],[-4.996444,-5.461685,5.296960],[-2.479966,-2.200900,-3.395629],[-9.516072,1.731127,-3.770115],[-6.072264,7.185892,-6.686169],[3.662105,-3.370664,-6.060473],[9.821886,1.880816,7.532589],[-8.346530,9.423126,-5.144145],[-7.344704,1.936994,4.241287],[-1.977277,3.493130,7.191752],[-8.859965,-8.244571,-3.845298],[-8.744604,5.304945,-1.727289],[5.397996,6.717014,5.070299],[-3.985045,-1.023225,9.229503],[9.181920,-5.207754,-5.851912],[-3.409209,-5.078736,6.221768],[9.535040,-8.766478,8.294022],[2.287631,5.982503,-6.674759],[-9.329358,-7.546407,-7.886700],[-4.674143,8.952689,-2.384233],[-4.328797,2.490809,5.414774],[-1.790707,-0.885459,-7.302764],[2.637666,-5.833085,-1.868682],[7.748543,8.755817,3.156676],[-5.792681,0.913435,-7.652100],[7.583690,-4.800625,5.228664],[3.299804,-3.362149,-6.170973],[-3.173687,-1.194031,-4.423616],[2.091363,-5.109393,9.600767],[-9.638020,9.869578,-5.706418],[-1.200151,2.415769,-6.381746],[-3.034422,-2.498126,5.864388],[0.051904,-3.680010,9.044759],[-6.289999,-8.628545,4.264233],[3.424705,3.165094,-2.106559],[-3.391010,6.912444,7.217773],[6.070770,-9.029232,7.190560],[-3.744234,8.049622,-1.562391],[-9.424597,7.611739,9.869543],[-6.141213,-4.610815,-0.446162],[3.527858,8.587595,-6.234085],[-5.757328,2.482153,8.172982],[2.990164,8.747954,-2.408330],[1.508323,8.865932,1.621957],[9.447327,5.749137,-4.456412],[-5.756751,-8.328294,-5.498990],[1.848942,-6.799839,2.396495],[9.515530,-2.486996,0.085684],[-3.487865,5.710576,7.220653],[3.522395,-9.539874,1.016270],[-7.105330,8.380242,7.794629],[1.824747,-5.927044,8.998269],[4.380247,-7.922792,-7.070170],[-8.623543,-5.588620,-1.350596],[-2.597953,9.002654,-4.207963],[0.582396,-2.837984,5.056364],[6.813569,-0.654655,2.756143],[7.921704,-5.987856,-3.544644],[-2.519269,-5.660731,-0.555252],[-0.014477,-7.835838,3.609450],[-0.887591,3.189159,6.095287],[6.702046,7.669771,0.382525],[8.686950,3.425891,-3.662527],[-5.236980,-4.772456,-5.057929],[1.557010,9.893496,-7.749983],[-1.584593,-9.245363,9.597598],[1.777060,-5.170580,9.018441],[7.486014,-9.538443,-2.797839],[-2.541260,0.558501,0.115701],[2.313041,5.287576,-5.504179],[8.082232,-7.473503,-7.682243],[-8.224123,-8.107265,-6.477441],[-4.485482,6.516961,-4.370813],[3.087150,-3.186592,2.751858],[-6.103133,5.968047,-5.466966],[4.157636,-0.453531,8.479119],[-7.642384,-1.442019,-8.921575],[-6.488527,-8.425469,9.710552],[3.380551,0.815283,-2.697142],[-5.844008,7.811084,-9.172457],[5.337317,-9.454193,8.385557],[8.820453,1.450755,5.067622],[-4.892227,-3.356254,5.210600],[-2.030924,-6.117247,-4.165228],[-7.383224,-5.796752,-6.397314],[8.278423,-5.124918,-1.750641],[4.452330,0.156913,3.360513],[-7.304953,-0.396567,3.092157],[5.277300,1.163704,1.795036],[-2.405960,-9.864217,-7.832571],[5.713185,-0.393352,9.906205],[5.686924,-6.680339,1.965702],[9.956784,-0.338198,-2.116356],[4.485543,7.490102,5.842394],[5.383929,-2.141319,-3.387436],[-4.374129,9.684710,-4.112667],[5.437868,0.447154,-7.959338],[-3.473076,3.348197,-4.001349],[-2.069400,2.284757,-1.653046],[-0.605202,-8.827135,5.146747],[5.947491,-4.854514,-7.003025],[8.929438,-2.429701,-7.962964],[7.324181,1.201587,0.042923],[-4.407787,5.516354,3.683091],[2.770160,5.423024,-0.979239],[-6.447716,4.634534,-8.476475],[5.767180,4.677750,7.900594],[8.224844,-6.606384,1.226907],[-8.729344,3.838648,7.106333],[3.886607,4.479358,-9.727238],[5.654503,9.115002,4.056482],[-5.716217,-4.092879,-4.091887],[0.829593,-4.572698,-9.261296],[1.328907,-4.320027,9.752063],[3.652836,-2.899669,0.552605],[2.651521,0.146911,2.112424],[-9.042370,-5.790009,-9.820030],[-9.591054,-5.887777,8.546710],[-3.798396,0.085792,-2.856262],[-7.928221,1.202116,-7.673557],[3.488269,1.695796,-9.594452],[9.867550,-8.264575,4.863999],[5.707801,8.904673,6.128260],[-0.249269,4.477890,-1.788856],[-4.757136,-4.308513,2.610185],[7.602869,-2.493745,7.875575],[7.460601,7.185511,-8.642869],[-6.592211,0.725936,8.164758],[5.547338,-5.477669,8.269831],[-9.170426,-0.802140,4.683712],[6.611525,-5.315725,5.596156],[-9.679896,3.067331,4.079068],[1.456446,8.834608,0.463643],[7.444970,-0.195696,6.350916],[-6.121607,-6.528448,-5.800170],[-7.375230,-5.163076,3.360112],[-8.130517,-4.641697,-0.277659],[-3.823832,-9.432361,-9.389880],[-5.956900,-3.029128,1.721976],[1.261303,2.202516,-5.733263],[3.847174,3.254485,-4.872354],[-1.077644,-9.937073,-6.037204],[-8.722281,-7.966512,-6.905299],[-5.332847,-3.694852,7.649799],[-6.665489,0.609743,-8.930008],[-9.696232,-6.217267,6.664301],[-4.631509,-7.610721,5.486609],[9.360395,5.940088,-6.111351],[-2.906545,-8.160667,4.661099],[5.412202,-5.567540,2.051176],[-3.709994,8.849308,4.382259],[1.525890,-7.778263,-5.806157],[-2.269600,1.084467,-0.483317],[5.871814,-1.361283,2.029466],[-6.068331,2.868901,-5.681981],[3.318145,-9.117147,6.482028],[-4.688623,-8.805327,-8.099888],[-6.392128,-3.043813,-7.660817],[2.892131,-8.658433,-4.840767],[4.790922,-7.352399,4.800987],[2.733853,3.078077,2.255105],[0.257444,-4.805535,-5.572859],[-5.942384,7.124950,-9.781868],[2.366093,-0.690845,0.030985],[-5.545946,7.508480,-8.802629],[9.003585,9.625696,0.933213],[1.717674,-0.659793,-0.260121],[8.836257,9.852105,-5.573109],[-9.375054,4.142309,0.615136],[6.456620,7.817520,-5.886675],[-0.678063,2.378246,-0.276666],[-6.316261,5.943347,6.310254],[-6.413953,0.824862,-6.315664],[1.081510,7.089813,1.836299],[-6.290002,-6.037710,9.269765],[4.320257,-7.323987,1.617872],[2.647812,9.929825,9.934290],[6.585544,0.399533,8.722543],[-6.722290,-6.320568,-3.789217],[-2.973763,4.743392,-0.304208],[4.483429,-6.046260,8.105165],[-7.808094,7.115180,8.976886],[6.648545,-7.972674,5.133605],[-4.518038,4.400007,-1.961718],[-0.085822,-2.308171,0.793838],[-0.720932,-2.693840,0.783920],[-3.046806,-8.668552,4.416551],[-7.157714,-0.898719,3.050091],[4.322299,5.642966,-0.312236],[-0.114762,-7.213118,-1.274891],[2.602373,-0.385380,1.924366],[4.124110,-0.323730,-1.947337],[-1.991356,-1.451868,5.578652],[-6.625539,7.708447,8.912364],[4.529185,-8.806110,-2.637379],[-5.396330,0.597276,2.416213],[-6.748422,-9.747016,9.781867],[-3.876874,-6.997192,-1.286492],[-3.954347,-3.639179,0.855913],[4.655243,5.277382,-6.013207],[8.131787,7.219214,-6.810602],[6.622497,-7.439519,1.376339],[-5.569174,4.253737,-3.766272],[8.844488,-4.761955,-8.954173],[5.463466,6.519308,6.317155],[4.185077,-9.328881,6.336524],[1.314378,7.824290,-8.073691],[7.789058,-9.333733,1.980000],[1.257537,4.868436,-8.571631],[8.089518,4.949547,-6.321646],[-2.200533,9.668651,0.151387],[5.679608,-5.825534,-2.782365],[9.689166,2.854373,-1.410506],[-2.630642,4.169756,7.176965],[1.875254,-8.165450,0.869824],[9.754599,-6.978526,-2.060498],[3.714408,-9.924989,-9.039250],[2.943068,7.187672,1.595882],[0.593824,6.182106,5.256114],[1.145123,8.687023,-2.383791],[-4.380623,-7.554213,-6.237991],[-9.600722,0.558539,5.297291],[1.950754,9.892216,-0.373504],[-4.828446,9.189654,-8.860200],[9.481214,0.983635,1.760370],[5.003419,-4.024657,-7.464587],[6.182726,-9.654126,-2.593169],[-7.084317,-5.361067,-7.709345],[9.361045,0.078971,-9.361753],[9.237568,8.630644,-7.079525],[-4.737268,-1.719016,4.123325],[-1.818035,-2.304723,9.770973],[-4.706634,-3.007101,-5.788307],[2.609356,-6.408528,-4.660114],[0.154209,-5.067352,-1.542484],[6.501776,-5.668608,1.760231],[2.107314,-9.846109,9.519817],[-7.711875,-0.956163,-3.465268],[1.267677,-1.852504,-3.850869],[-4.865858,-4.933046,-6.907483],[8.243696,-5.095727,-6.831091],[7.574833,8.875168,9.209529],[-7.734515,-7.509432,-7.261084],[8.857510,5.618878,7.923281],[-4.749499,9.067796,-9.522733],[6.945612,0.298254,-9.091936],[-1.778532,6.182925,8.847627],[-1.464559,-7.790830,-6.829655],[5.763136,-8.315000,4.709780],[0.649244,0.204313,9.530550],[-1.813542,2.653882,-2.666650],[1.600435,-4.839373,-2.292274]], dtype = "float64")#candidate|3077|(375, 3)|const|float64
const_3078 = relay.const([7.297119,1.471594,0.642972,4.103431,2.349342,-2.564175,1.115578,4.084166,-0.320354,-9.544265,-3.818572,8.579893,-3.840102,-5.018676,-9.731855,-5.669072,-1.846284,9.004308,7.666345,-0.852511,8.311773,-6.002559,-0.767402,-7.800756,-6.154080,0.078955,3.905194,5.435993,-2.011845,7.604775,0.636503,0.245315,1.237344,4.751677,4.276747,-8.009128,-4.444144,-2.694189,-6.679267,-4.935666,0.962470,1.242647,-4.319202,-3.284292,-8.378015,-1.019819,4.833457,9.770271,-1.778700,-7.877176,7.812791,-6.938035,7.496268,-0.654484,4.174818,-8.861733,4.075956,9.226322,4.381676,-3.960563,-9.750837,6.446883,-0.072227,-9.445469,-1.836169,2.596153,3.739252,2.248999,-9.077573,-2.309538,-9.049465,-2.927454,-9.997900,-4.064613,2.155595,-3.777931,8.630023,-3.901343,-1.539836,-1.830272,6.302222,-1.031415,0.292563,5.180535,-7.922764,2.451629,-9.375128,-1.121185,-2.877985,-5.306565,6.121688,8.394544,1.667364,4.360417,-6.500488,-0.270982,5.427730,7.537613,-0.335781,-1.003687,-5.029604,-3.443779,4.398399,-5.995709,9.766843,4.329580,5.614566,6.154581,-9.440291,-1.903871,-6.867707,-5.638420,-5.214684,-3.437499,-4.323989,1.519221,-1.482441,-0.563144,-8.425750,6.272825,5.307545,-1.675990,2.343392,5.204965,-1.107804,6.668088,-3.340097,-4.193544,7.728537,-3.052767,8.848292,-4.916780,1.299887,6.487828,3.638149,0.371993,-9.673344,3.371130,5.137763,5.889021,6.027658,-4.362561,5.702007,-7.735665,7.635222,-0.745109,-6.197602,-8.372194,3.823638,0.837730,9.175911,-2.971297,-9.147376,8.776994,-6.317612,-5.156466,5.220812,-0.671529,0.617285,9.952684,6.935362,-9.813195,9.316718,4.134306,-5.820339,0.793402,5.938935,0.280856,-2.158495,4.321379,-1.238116,-8.854623,-0.574185,-8.049594,3.821094,-4.720265,3.672430,-9.922541,7.369496,-9.924687,-4.527308,1.885203,6.004806,1.017360,-4.034276,-6.656437,-8.110877,-9.548343,1.763225,2.725744,1.628952,4.656640,-8.873492,9.973025,7.570755,2.786706,7.897293,4.790292,-2.215227,-3.666778,1.109943,2.744195,8.289647,-5.434697,-6.210478,6.025053,2.180349,-9.070461,-6.539379,-8.154808,6.605433,2.889910,-0.712275,3.870686,-8.089178,1.155401,1.395345,6.440518,6.703640,1.945396,4.156735,5.635464,-9.422058,-5.134262,2.225615,-4.722514,4.375280,0.809392,3.874081,-7.107038,1.477051,8.540053,-6.896010,2.016296,6.148847,6.347852,-7.821826,7.315354,-5.232201,1.307927,-4.448954,0.908514,-0.453850,-8.965170,6.355324,3.274437,-2.003080,2.225821,8.170863,-2.386742,-1.961425,-7.646685,-7.014869,4.342595,4.881468,-0.285377,-7.372303,1.768414,2.850401,-8.124914,-5.881494,0.474155,1.162983,6.434282,5.015002,3.515403,9.966204,-7.114139,0.117981,6.134874,1.797092,0.519939,5.850423,-1.341333,-2.879586,1.531264,-4.552483,9.338309,-2.917027,-6.168085,0.117263,3.745936,4.097256,-6.667972,8.735148,-0.246317,-4.701224,-5.044032,-0.212918,-5.454853,-4.632711,-5.394631,-7.683953,-3.962097,-6.950820,-3.319192,-9.708281,6.597517,-7.696840,-6.014589,6.914252,-9.490817,-3.821891,4.956152,4.573474,1.744073,2.578685,-1.280437,-4.636036,-4.588051,6.900151,-4.112490,-9.798200,-5.497430,3.892964,-3.613379,3.693460,-7.434748,-5.670885,-3.919963,3.408685,3.229735,8.091792,-4.039620,-9.853658,9.745714,-8.080896,0.215935,2.192041,5.468149,-7.542868,3.815728,-6.855468,-8.977161,6.994095,-2.260306,-5.615667,5.651762,8.693223,1.222829,2.360086,7.415805,-9.450530,-4.266306,-1.208047,4.769732,-5.371939,-3.731798,-1.993398,4.794756,-7.319051,3.364420,7.466071,-1.437887,-8.365043,-4.259052,-5.446779,0.957791,-3.346354,-2.329702,9.758671,8.315858,-0.579711,-1.795020,-7.633919,-3.972848,1.629600,-6.910500,7.426781,3.138267,-7.853879,0.257373,-7.359306,-1.092593,-0.143610,0.389743,-9.818747,0.631571,8.784653,3.057194,5.780036,-3.888401,6.657607,1.091914,8.645503,3.886453,-6.228415,0.633724,7.911661,2.328012,-2.580526,-1.404458,-6.477485,-6.493704,0.348415,6.083720,3.319302,-4.658874,-9.420275,4.146665,-6.615485,-2.271986,6.888273,5.389802,3.433360,2.749581,-8.923050,-7.057848,0.955679,-2.350176,-9.348220,-0.513328,6.675912,7.283545,-0.921911,0.083741,3.029207,-6.045501,7.421180,5.245003,-1.177261,6.714344,-4.864591,9.515078,-6.354694,9.055238,-4.167581,-2.386460,-2.748591,3.013168,8.361972,6.060498,-6.655214,1.621318,-0.687059,-9.157674,2.540830,6.221365,6.974732,-5.442799,-1.253584,4.498976,2.060904,-0.941710,1.771592,-6.009960,-7.788130,4.112052,1.618678,2.146378,1.790570,8.423994,6.997910,0.053897,5.075715,-7.392837,1.645789,-7.407158,3.723001,-5.127458,5.610236,0.468360,-9.294878,-5.192893,-7.664351,8.425309,-4.828433,-1.910922,6.715389,-8.261303,1.743896,-9.120016,-5.562620,0.079407,9.286797,-9.684672,0.990396,6.906262,-4.329255,5.763165,9.771784,0.855983,9.055808,3.372640,1.856072,-1.386593,-2.981028,9.780597,3.238565,-2.977991,-3.141995,3.292396,3.762323,1.642926,1.337067,-7.168957,-8.717729,-0.320472,8.962332,-2.979410,2.146472,-8.922931,-3.111839,8.994133,-4.001341,-1.726356,-4.669869,-0.248338,-3.003843,-3.293235,0.419663,-2.686493,-3.188209,1.742509,-7.079616,-9.347190,-5.226054,1.716356,-4.181388,9.815102,0.333869,4.205892,0.997960,3.378668,7.479867,9.258059,-9.537302,-3.834433,-6.718257,-6.176324,-9.021490,6.770515,4.912220,8.585657,6.763770,1.226073,-2.857951,-5.422006,-8.346464,-3.134318,6.582991,-2.866225,0.327938,-2.901954,5.840339,9.863058,4.434969,-3.200656,3.193559,-6.012394,-3.614441,3.906307,-7.346983,5.984368,2.276191,6.480852,8.900276,-5.246305,-5.259374,8.568143,-8.852050,3.520593,5.744940,-5.669579,7.724431,7.177930,-9.549866,4.966784,-9.864414,-0.590786,-3.798442,0.586795,9.512291,-9.176701,-9.076838,0.320671,-0.614275,3.052957,5.004515,9.780103,-4.268277,-8.315521,5.293930,-7.625387,-9.141077,-3.230293,-9.374389,3.096665,6.592845,5.675234,9.334507,-7.766861,-2.787642,4.922967,-2.898425,-5.516688,0.421376,1.046894,-6.486417,-1.753421], dtype = "float32")#candidate|3078|(600,)|const|float32
call_3076 = relay.TupleGetItem(func_466_call(relay.reshape(const_3077.astype('float64'), [15, 5, 15]), relay.reshape(const_3078.astype('float32'), [600,]), ), 4)
call_3079 = relay.TupleGetItem(func_469_call(relay.reshape(const_3077.astype('float64'), [15, 5, 15]), relay.reshape(const_3078.astype('float32'), [600,]), ), 4)
output = relay.Tuple([uop_3028,var_3045,uop_3071,call_3076,const_3077,const_3078,])
output2 = relay.Tuple([uop_3030,var_3045,uop_3073,call_3079,const_3077,const_3078,])
func_3081 = relay.Function([var_3045,], output)
mod['func_3081'] = func_3081
mod = relay.transform.InferType()(mod)
var_3082 = relay.var("var_3082", dtype = "float64", shape = (4, 364))#candidate|3082|(4, 364)|var|float64
output = func_3081(var_3082)
func_3083 = relay.Function([var_3082], output)
mutated_mod['func_3083'] = func_3083
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_3090 = relay.TupleGetItem(func_1070_call(), 0)
call_3091 = relay.TupleGetItem(func_1071_call(), 0)
var_3096 = relay.var("var_3096", dtype = "float64", shape = (15, 5, 15))#candidate|3096|(15, 5, 15)|var|float64
bop_3097 = relay.power(call_3090.astype('float32'), relay.reshape(var_3096.astype('float32'), relay.shape_of(call_3090))) # shape=(15, 5, 15)
bop_3100 = relay.power(call_3091.astype('float32'), relay.reshape(var_3096.astype('float32'), relay.shape_of(call_3091))) # shape=(15, 5, 15)
func_992_call = mod.get_global_var('func_992')
func_994_call = mutated_mod.get_global_var('func_994')
call_3102 = func_992_call()
call_3103 = func_992_call()
var_3105 = relay.var("var_3105", dtype = "float64", shape = (3, 7, 5))#candidate|3105|(3, 7, 5)|var|float64
bop_3106 = relay.greater_equal(call_3102.astype('bool'), var_3105.astype('bool')) # shape=(3, 7, 5)
bop_3109 = relay.greater_equal(call_3103.astype('bool'), var_3105.astype('bool')) # shape=(3, 7, 5)
output = relay.Tuple([bop_3097,bop_3106,])
output2 = relay.Tuple([bop_3100,bop_3109,])
func_3123 = relay.Function([var_3096,var_3105,], output)
mod['func_3123'] = func_3123
mod = relay.transform.InferType()(mod)
var_3124 = relay.var("var_3124", dtype = "float64", shape = (15, 5, 15))#candidate|3124|(15, 5, 15)|var|float64
var_3125 = relay.var("var_3125", dtype = "float64", shape = (3, 7, 5))#candidate|3125|(3, 7, 5)|var|float64
output = func_3123(var_3124,var_3125,)
func_3126 = relay.Function([var_3124,var_3125,], output)
mutated_mod['func_3126'] = func_3126
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2611_call = mod.get_global_var('func_2611')
func_2612_call = mutated_mod.get_global_var('func_2612')
call_3164 = func_2611_call()
call_3165 = func_2611_call()
output = relay.Tuple([call_3164,])
output2 = relay.Tuple([call_3165,])
func_3190 = relay.Function([], output)
mod['func_3190'] = func_3190
mod = relay.transform.InferType()(mod)
output = func_3190()
func_3191 = relay.Function([], output)
mutated_mod['func_3191'] = func_3191
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3190_call = mod.get_global_var('func_3190')
func_3191_call = mutated_mod.get_global_var('func_3191')
call_3194 = relay.TupleGetItem(func_3190_call(), 0)
call_3195 = relay.TupleGetItem(func_3191_call(), 0)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_3201 = relay.TupleGetItem(func_1070_call(), 1)
call_3202 = relay.TupleGetItem(func_1071_call(), 1)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_3208 = relay.TupleGetItem(func_811_call(), 2)
call_3209 = relay.TupleGetItem(func_813_call(), 2)
uop_3250 = relay.erf(call_3208.astype('float64')) # shape=(600,)
uop_3252 = relay.erf(call_3209.astype('float64')) # shape=(600,)
func_1622_call = mod.get_global_var('func_1622')
func_1626_call = mutated_mod.get_global_var('func_1626')
const_3260 = relay.const([8,-6,9,-2,5,-3,-7,-2,-10,-8,5,9,6,1,2,6,-1,10,6,-3,2,-3,-6,-5,1,-7,5,8,7,-7,1,-9,-6,2,-3,-5,10,-3,3,3,1,-8,-3,2,-10,-7,10,3,6,-10,-10,-5,4,-7,6,-9,-7,7,-5,-1,8,8,-5,6,6,-2,2,9,5,-3,5,2,-10,3,8,2,2,-5,-1,-10,-8,5,10,-8,-1,6,4,7,6,1,2,1,-3,2,-7,3,3,-7,-4,-7,-5,-1,2,-3,8,4,9,-5,-2,-6,-7,4,7,-2,6,7,2,-2,-4,5,-3,1,4,2,-2,5,-7,9,10,-6,1,-2,9,-9,3,6,-3,-5,4,-3,6,-8,-6,-7,-10,-7,-6,6,-2,-2,-1,10,7,10,-3,-2,10,-1,6,-7,3,-7,-2,8,-10,-1,-9,6,6,-1,-9,-9,-10,-7,10,-1,7,-6,3,-3,2,-7,-4,-9,6,-1,-3,-6,-1,-9,9,8,10,-5,5,7,3,-2,-6,7,-1,9,-9,6,1,2,5,-8,-1,-9,2,-8,9,-1,-1,7,7,5,-4,-5,-6,5,-5,8,7,-4,3,-3,10,-7,2,-2,-3,-4,-9,2,-8,-9,-1,10,-4,6,-6,8,-10,-8,3,1,10,1,-8,7,1,8,-4,-9,-5,-4,5,-9,-10,-9,-9,-7,8,10,-4,-2,4,-6,-10,-7,-3,6,-6,2,5,7,2,5,-5,-7,-4,3,-1,-8,-5,6,9,-3,-10,-9,6,9,3,7,-8,6,-3,10,7,7,-5,7,8,7,4,-2,-5,8,4,-5,-10,-4,9,9,4,-7,2,2,-3,-7,-8,-9,8,8,-5,-4,-3,9,2,7,5,-4,-7,6,-7,9,2,6,-7,3,9,-6,8,4,5,-6,5,-7,8,2,-8,1,-3,1,-5,-2,2,7,-5,-9,-4,1,7,-2,3,2,-9,3,-2,-1,-7,-1,3,8,-1,-6,-4,-4,5,7,2,-3,-2,2,-9,3,6,-6,4,-6,-4,7,1,8,9,-6,-5,-1,-3,3,6,1,-1,-2,2,-7,-2,4,-8,-9,-10,-10,-4,-1,6,1,1,-7,-1,-5,-8,-1,9,-2,-10,5,-8,4,-8,10,-1,5,5,4,10,8,4,-8,5,-1,3,-2,3,-2,2,-2,-5,5,-10,3,-10,9,10,-10,-7,7,-9,2,8,-10,8,-1,2,10,-9,-5,3,5,-9,-6,6,-10,-6,-6,6,5,9,-6,4,-4,-8,1,2,5,-1,-2,8,-3,-4,-1,6,-6,-1,-7,-8,-7,-1,-10,-4,-6,7,5,8,4,-6,4,-10,-8,-3,-6,-9,9,-1,5,-5,-2,9,-10,5,10,-8,5,5,8,2,8,7,3,6,1,1,6,1,10,9,-9,-4,-4,10,6,-6,-3,-2,8,6,-1,-5,10,2,-3,-10,9,-7,-3,-7,-8,5,-5,-10,7,4,-7,-7,-8,5,-2,-4,-10,-8,-7,-4,-7,6,4,-4,-4,-10,-9,5,6,9,-6,-10,3,9,-10,-6,-2,8,-10,8,9,6,3,-5,3,6,6,-8,-4,10,-10,3,-3,-7,-1,9,-2,-10,-6,5,-9,-1,-9,-6,5,-10,-4,-6,-4,-2,-9,9,-5,8,5,3,6,-9,-2,-9,2,-4,10,5,-7,1,9,-9,8,-8,-1,-7,4,2,-10,4,8,-10,10,-4,-2,10,4,6,7,5,4,6,7,-7,-9,-10,-9,-7,6,5,-8,-1,-6,-4,-2,2,-10,-7,6,-5,5,4,-6,4,-6,-3,-3,7,-1,2,-2,1,-3,-9,2,-6,1,-2,4,-10,2,3,8,-3,-2,4,9,6,-6,5,-10,7,-2,8,-3,-6,-4,10,-10,-10,-8,-6,2,3,6,-5,8,8,9,9,6,6,-6,-9,9,-9,-4,8,-7,-3,8,9,-10,-9,3,-10,3,7,4,8,-5,-4,1,6,-4,1,5,-1,5,3,-10,-6,-2,-4,1,2,6,9,-10,7,2,-6,-8,-1,7,-2,8,9,3,8,5,1,6,1,3,-9,-6,3,2,-6,9,-7,5,8,-9,-1,-6,8,-2,-9,-6,9,3,-5,-5,7,6,2,-10,-1,-7,-5,-5,-7,1,2,-2,9,-3,4,3,6,3,-3,8,-6,-6,-8,-4,-8,10,-2,10,-10,4,-5,-5,-8,-8,-3,-5,-1,-10,2,5,8,-9,-10,10,4,-5,-10,-9,-9,9,1,-1,-7,-3,-4,10,-6,2,7,-5,3,9,10,-4,-3,3,9,8,6,6,2,3,6,-3,5,-6,-9,6,5,10,-2,-3,8,6,5,-5,-1,-6,-4,-2,10,-1,-4,-10,-4,-6,5,7,3,9,-9,-6,5,-9,-4,9,-10,-2,-7,3,3,10,-1,1,-2,3,-7,4,-2,2,-4,9,-3,-8,5,4,3,6,-2,-9,7,8,2,5,-2,1,10,-2,4,3,-1,7,-4,-9,10,-1,-9,-3,10,6,-5,-10,8,-5,-1,-2,-9,6,2,10,-3,-10,-9,-3,1,10,6,-8,-3,-7,-5,-7,-7,-8,10,2,-10,-6,-5,7,-8,-1,-9,1,4,-6,-6,-3,-10,4,10,3,-8,8,-10,9,-2,-6,-7,-4,-4,10,-5,-5,-6,5,2,-6,9,-4,-7,-8,-3,-3,-1,3,-9,-5,8,9,8,-9,-4,-3,-7,3,-9,-4,-5,-3,3,-2,-9,-7,7,-10,-2,7,2,-8,-6,4,1,-6,-6,-3,-4,-3,1,1,-8,5,8,7,-10,2,7,1,-7,-6,-7,3,-3,-8,10,4,-8,9,1,-7,-2,-8,6,-9,-8,5,-4,-9,-9,-3,4,-7,8,-10,4,1,8,-7,1,-9,-10,4,-5,3,2,4,-7,10,-7,-6,10,8,-9,4,10,-8,-8,-6,-7,-8,7,9,-3,9,1,-2,3,1,-7,-1,-8,9,1,-10,4,-1,2,-5,9,6,1,3,1,5,10,-7,5,6,-3,8,6,10,-7,2,1,8,-7,-8,-6,6,-1,4,-1,3,5,-1,1,9,-8,-6,1,3,-6,6,-3,7,5,9,-10,-10,-6,-7,4,-4,1,1,5,-9,4,2,8,-1,-1,-9,-5,-7,1,7,-4,-6,-1,4,-5,-5,-8,6,6,-9,10,-7,8,-7,2,2,2,-8,9,9,8,-2,-2,-2,-8,7,-10,6,-10,7,-4,7,-9,1,10,-1,-5,-5,-1,-7,-10,8,9,-10,-4,1,7,8,-5,-3,8,-1,7,1,-3,-5,-1,4,7,-8,-2,1,-9,7,-7,-6,6,-9,5,9,8,-2,-8,-8,-2,-8,-7,6,-9,9,5,2,-5,4,-2,-8,8,-9,6,-3,-6,-3,-1,9,1,-3,-5,8,7,2,7,-8,-9,1,-6,4,-7,-5,7,6,5,-4,6,2,6,-1,-5,-7,-7,2,3,5,4,-8,-5,-8,-4,1,-6,3,9,4,4,8,10,-5,7,-4,-10,-3,7,-5,4,10,9,4,7,9,9,-3,1,-3,7,-1,-10,-2,-8,7,-1,3,-10,7,5,1,5,-5,3,7,5,-7,-4,9,5], dtype = "uint64")#candidate|3260|(1365,)|const|uint64
call_3259 = relay.TupleGetItem(func_1622_call(relay.reshape(const_3260.astype('uint64'), [7, 13, 15]), relay.reshape(const_3260.astype('uint64'), [7, 13, 15]), relay.reshape(call_3201.astype('float32'), [12, 10, 5]), ), 8)
call_3261 = relay.TupleGetItem(func_1626_call(relay.reshape(const_3260.astype('uint64'), [7, 13, 15]), relay.reshape(const_3260.astype('uint64'), [7, 13, 15]), relay.reshape(call_3201.astype('float32'), [12, 10, 5]), ), 8)
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_3272 = relay.TupleGetItem(func_1355_call(), 2)
call_3273 = relay.TupleGetItem(func_1356_call(), 2)
uop_3287 = relay.asinh(call_3259.astype('float64')) # shape=(12, 10, 5)
uop_3289 = relay.asinh(call_3261.astype('float64')) # shape=(12, 10, 5)
output = relay.Tuple([call_3194,call_3201,uop_3250,const_3260,call_3272,uop_3287,])
output2 = relay.Tuple([call_3195,call_3202,uop_3252,const_3260,call_3273,uop_3289,])
func_3293 = relay.Function([], output)
mod['func_3293'] = func_3293
mod = relay.transform.InferType()(mod)
mutated_mod['func_3293'] = func_3293
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3293_call = mutated_mod.get_global_var('func_3293')
call_3294 = func_3293_call()
output = call_3294
func_3295 = relay.Function([], output)
mutated_mod['func_3295'] = func_3295
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3330 = relay.var("var_3330", dtype = "float32", shape = (10, 10, 13))#candidate|3330|(10, 10, 13)|var|float32
var_3331 = relay.var("var_3331", dtype = "float32", shape = (10, 10, 13))#candidate|3331|(10, 10, 13)|var|float32
bop_3332 = relay.less(var_3330.astype('bool'), relay.reshape(var_3331.astype('bool'), relay.shape_of(var_3330))) # shape=(10, 10, 13)
output = bop_3332
output2 = bop_3332
func_3335 = relay.Function([var_3330,var_3331,], output)
mod['func_3335'] = func_3335
mod = relay.transform.InferType()(mod)
var_3336 = relay.var("var_3336", dtype = "float32", shape = (10, 10, 13))#candidate|3336|(10, 10, 13)|var|float32
var_3337 = relay.var("var_3337", dtype = "float32", shape = (10, 10, 13))#candidate|3337|(10, 10, 13)|var|float32
output = func_3335(var_3336,var_3337,)
func_3338 = relay.Function([var_3336,var_3337,], output)
mutated_mod['func_3338'] = func_3338
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3378 = relay.var("var_3378", dtype = "float32", shape = (5, 4, 16))#candidate|3378|(5, 4, 16)|var|float32
var_3379 = relay.var("var_3379", dtype = "float32", shape = (5, 4, 16))#candidate|3379|(5, 4, 16)|var|float32
bop_3380 = relay.greater_equal(var_3378.astype('bool'), relay.reshape(var_3379.astype('bool'), relay.shape_of(var_3378))) # shape=(5, 4, 16)
output = bop_3380
output2 = bop_3380
func_3383 = relay.Function([var_3378,var_3379,], output)
mod['func_3383'] = func_3383
mod = relay.transform.InferType()(mod)
mutated_mod['func_3383'] = func_3383
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3383_call = mutated_mod.get_global_var('func_3383')
var_3385 = relay.var("var_3385", dtype = "float32", shape = (5, 4, 16))#candidate|3385|(5, 4, 16)|var|float32
var_3386 = relay.var("var_3386", dtype = "float32", shape = (5, 4, 16))#candidate|3386|(5, 4, 16)|var|float32
call_3384 = func_3383_call(var_3385,var_3386,)
output = call_3384
func_3387 = relay.Function([var_3385,var_3386,], output)
mutated_mod['func_3387'] = func_3387
mutated_mod = relay.transform.InferType()(mutated_mod)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_3414 = relay.TupleGetItem(func_861_call(), 2)
call_3415 = relay.TupleGetItem(func_862_call(), 2)
output = relay.Tuple([call_3414,])
output2 = relay.Tuple([call_3415,])
func_3428 = relay.Function([], output)
mod['func_3428'] = func_3428
mod = relay.transform.InferType()(mod)
mutated_mod['func_3428'] = func_3428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3428_call = mutated_mod.get_global_var('func_3428')
call_3429 = func_3428_call()
output = call_3429
func_3430 = relay.Function([], output)
mutated_mod['func_3430'] = func_3430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2516_call = mod.get_global_var('func_2516')
func_2518_call = mutated_mod.get_global_var('func_2518')
call_3488 = func_2516_call()
call_3489 = func_2516_call()
output = call_3488
output2 = call_3489
func_3498 = relay.Function([], output)
mod['func_3498'] = func_3498
mod = relay.transform.InferType()(mod)
output = func_3498()
func_3499 = relay.Function([], output)
mutated_mod['func_3499'] = func_3499
mutated_mod = relay.transform.InferType()(mutated_mod)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_3510 = relay.TupleGetItem(func_811_call(), 0)
call_3511 = relay.TupleGetItem(func_813_call(), 0)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
const_3525 = relay.const([-3.690581,-6.476133,2.845437,-5.746606,-2.767254,-9.132539,-1.543772,8.417107,9.779709,0.768109,3.257920,-0.357576,8.791841,9.245542,0.736539,-2.790899,4.786952,-2.487079,1.582500,1.481379,-7.068054], dtype = "float32")#candidate|3525|(21,)|const|float32
call_3524 = relay.TupleGetItem(func_20_call(relay.reshape(const_3525.astype('float32'), [3, 7, 1])), 0)
call_3526 = relay.TupleGetItem(func_22_call(relay.reshape(const_3525.astype('float32'), [3, 7, 1])), 0)
func_3335_call = mod.get_global_var('func_3335')
func_3338_call = mutated_mod.get_global_var('func_3338')
const_3537 = relay.const([9.866811,5.208916,-4.328187,-0.123061,5.438564,5.420536,2.561189,0.150249,6.180154,-4.233248,-2.441912,-2.820368,9.652918,1.865163,-8.335950,-9.630407,9.490560,-1.295512,7.273187,-2.790385,9.912718,0.948681,4.105308,2.515713,-7.456343,-3.111738,9.678255,-0.264018,0.141481,4.957791,5.587957,6.254420,3.126615,-6.814066,8.215945,-3.201335,5.861728,9.429599,-5.937188,1.782225,6.900690,2.857686,-9.443702,9.675414,5.739380,3.399517,-4.837968,-7.268377,-9.712899,-7.596850,5.107509,-9.709884,-5.105711,8.423927,-9.491453,2.407084,3.339411,-6.790094,9.296346,6.674935,5.928903,5.498871,-5.301253,8.208873,7.777847,-0.702723,-3.436673,4.383006,-2.555156,7.703462,0.740736,-3.288127,2.631150,-0.467651,-8.535321,-9.453470,-3.166102,4.342385,7.855896,4.575603,3.286291,5.914395,-2.938695,-9.501216,2.498730,-3.408323,7.384002,3.001415,6.770672,2.836913,-5.738257,1.854744,6.746389,5.408916,-8.942970,2.791529,-9.628604,2.825619,6.435890,2.450161,-9.594209,0.024117,9.516085,-8.027103,-5.169489,-2.012614,1.922397,9.651868,2.627671,7.078793,4.827724,6.456736,4.682800,8.118030,-3.858622,-1.159260,-7.644978,-5.611344,-8.894975,-0.611185,-0.663666,9.332157,8.214808,1.595424,4.518901,-0.203660,0.924331,-1.064093,-2.477222,-1.539535,4.406950,0.860673,-8.020871,4.731728,2.425414,-4.449099,-5.529650,6.406739,-6.592239,-9.667498,-7.340450,6.978894,-6.545834,-1.107688,9.202946,-1.789128,1.179852,-2.107360,8.865726,7.533905,5.217119,9.419887,6.689038,5.991520,4.319180,-6.605794,-9.969894,7.209512,4.805254,-7.950207,-4.654874,4.953741,-1.180060,-1.390401,1.522299,-5.225499,0.994107,1.779486,0.012996,-6.696651,-7.435667,-5.994706,-6.745035,-7.350483,3.687855,-2.000781,4.493952,-1.870176,1.964714,4.509202,-8.149903,-2.380503,1.681295,-3.065881,-7.481475,6.509530,5.653909,-5.259026,-6.108261,-3.369516,0.130466,7.882557,-4.862666,-4.273039,-1.304230,6.832582,-0.954311,-1.062212,2.367751,-6.480958,-8.140782,-1.548882,6.499324,3.577495,9.207587,5.678632,1.775117,7.793137,-8.502302,6.344851,-0.314256,1.491219,-7.986293,-0.683239,8.704948,-7.533817,0.168163,5.466836,7.399709,-2.407207,-6.223437,0.055617,-9.204573,-4.866100,-5.254146,-1.608127,-3.616543,9.814084,2.200734,-7.117964,-7.588795,-5.124774,9.417472,-8.487448,5.355162,-4.293515,5.935671,3.184759,-2.819204,-1.329213,3.497071,5.948719,3.274123,3.392584,2.587666,0.914244,-1.330230,6.483153,6.901321,-6.947719,-8.334647,7.929967,-1.287243,1.005283,-2.465046,3.862376,-3.129929,0.518832,-6.895601,3.420216,-1.434390,3.981294,-9.748737,-9.318377,8.220393,-8.553557,4.315647,5.856907,-4.438174,1.239519,-3.153580,6.149852,2.013509,-7.700885,3.856808,4.268470,-4.850849,-2.732447,2.829208,9.466981,9.544718,-0.252229,8.800918,-0.707001,1.689728,-6.660295,-2.951981,-5.975907,-6.287512,6.984298,-5.226982,3.507012,-5.437703,-7.959235,-4.285466,-8.431745,2.762426,2.402387,-7.719987,9.895294,5.869310,8.329409,7.063005,3.186199,8.651986,1.755969,-3.485844,-2.645142,-5.673922,-1.734693,-1.433762,-0.363688,-6.984276,-5.615551,0.791555,-8.961948,7.662884,-4.854159,6.858668,-5.034333,7.080628,8.297205,-9.735217,-6.771915,-6.803152,-7.219817,7.858835,-5.404525,-1.965490,-4.384062,-6.744578,-7.863094,-5.314012,-1.980596,-4.998491,-3.355987,-2.476843,2.724662,-9.278546,5.986633,2.293891,5.958825,-8.717473,-5.905346,6.122381,-0.751906,6.506777,3.658753,-6.357904,8.722396,1.270040,-0.660716,2.177637,-3.888210,6.255961,-8.879537,7.066059,7.549521,-0.430238,-1.746239,-0.966216,2.835332,0.675910,4.594939,4.590523,0.640177,0.075076,-3.086692,1.347086,-1.153531,5.160355,7.727738,-9.474386,-5.415435,-6.397365,-1.622104,-1.826278,-3.023740,4.600695,9.947969,4.886132,7.649897,-3.576793,7.685353,-0.593011,-0.588348,3.329219,4.486444,-2.199539,-8.809857,-8.874245,7.481509,-2.064933,0.080150,7.958401,-3.786150,2.568711,3.850336,-2.382726,4.902407,-8.421914,-7.754468,-9.289519,-1.131415,9.877122,5.851968,1.050964,-8.168579,8.163779,4.328634,-5.686498,0.971574,5.939703,0.052370,2.156909,9.090532,-8.379230,1.521181,9.821009,2.601292,-6.662695,-4.316463,6.258480,-3.763783,-6.198405,-8.832205,2.791789,-9.446963,-4.822910,-0.079123,3.616662,-4.515680,4.754117,-6.743695,9.519935,-8.166745,-7.765834,4.347710,4.105249,-7.613773,-6.076867,1.977247,-5.768532,-8.180535,2.906569,0.992752,-9.889213,4.199593,3.527421,-7.664216,2.939905,0.560873,-7.757287,-0.593437,-2.662935,7.481968,1.758084,-1.891162,1.085100,-9.056695,-7.089496,2.309483,1.714206,-1.429359,-6.202808,1.381379,2.083801,3.602725,-0.697544,-5.291733,6.772861,5.800047,-2.957870,-9.399919,-9.633155,-4.186212,-7.924665,-5.544482,-8.248566,5.703510,4.495079,3.071908,5.529831,-4.105376,-8.320714,-0.580240,1.092924,-9.926384,4.590208,0.155312,9.989670,-6.071365,9.889408,-9.939180,-5.740503,-3.808883,-8.811854,-1.124988,-4.657351,4.107509,6.512331,-2.751045,4.701780,-6.069825,-2.826218,9.953874,-9.088185,3.998564,-8.210650,0.216247,1.079415,-9.838309,5.774016,1.720896,-4.404871,-1.852615,-1.410661,-2.077836,4.195385,9.905187,-6.526575,-3.534840,-6.572680,-8.605239,4.389534,4.894742,5.020275,-3.497890,5.426491,-4.094323,5.830609,6.321256,-0.135321,6.361642,1.324348,3.905001,1.574223,-1.198861,3.291406,-7.167967,-3.209207,-5.699608,-8.795722,8.706085,-5.639800,9.014107,-3.524837,-0.319765,-5.587313,3.706758,-1.159483,3.960284,-3.180235,9.094904,-5.475624,-3.658690,-7.060032,-4.138457,2.765494,-8.297832,4.703442,3.348192,-1.872333,-1.788625,-3.811316,-0.486897,-9.448453,-9.147129,4.015419,9.589599,-6.012172,0.585570,-5.134154,5.732077,6.718753,3.175878,2.374974,-6.751106,-3.908969,-3.104580,-9.177989,4.565696,-1.299558,3.342395,-4.494695,3.357635,-1.926057,1.787239,-9.972235,8.019154,-6.847791,-1.695312,7.417345,7.337760,-5.642809,-2.162682,7.735739,7.812790,-6.760135,2.195821,0.829599,7.342931,6.098611,-0.742051,1.642504,6.154110,0.272361,9.447003,0.033514,-3.219230,-2.667186,-6.658580,0.084372,4.104872,8.328671,-8.630020,5.917881,-2.056598,-8.021564,-0.115892,-0.757148,3.511057,5.514152,1.752026,3.879018,-2.678050,-6.960278,3.729031,9.516921,8.535781,-2.638331,9.668436,1.848254,-8.803005,8.781464,5.700722,7.090279,9.086532,8.517038,6.405552,-3.666843,-6.946533,-0.057170,-5.629445,-7.122431,-0.439820,4.505114,-7.527774,-8.038032,-9.232488,0.891889,6.900573,-5.474612,-7.594450,3.332542,5.610974,4.321568,9.452250,1.001956,6.728108,8.981019,-0.925487,-5.139660,-1.818524,-4.564753,-7.608716,-9.163142,-1.134960,-2.599622,2.017994,-6.331762,7.589797,-4.923564,0.884167,5.992740,-7.367434,6.046661,3.328321,5.402813,-5.997669,5.012394,-1.276214,-6.589693,-3.514317,9.969680,4.678259,-8.007265,3.140886,6.452914,5.678148,-7.383456,3.869550,-0.037967,3.344328,-6.630492,0.319732,-8.449560,-9.174590,-2.948553,8.154256,-2.275842,5.529862,3.715536,8.177481,-4.725184,7.041345,-7.736204,-5.564531,-5.299795,9.641535,9.148498,-8.105903,-4.793366,-8.895220,0.444875,-5.594359,-6.450781,5.290101,-0.775311,-4.697866,1.856487,6.888005,3.248178,-9.607149,2.996135,-4.251753,8.688425,-2.617950,8.372654,-8.976216,-0.070996,-6.647465,5.941498,5.660878,3.352924,-2.825678,3.998926,-4.562543,9.993779,-6.457334,-3.869471,4.315762,5.554301,8.855143,-6.947133,-3.580828,-1.101904,-3.261987,-3.876641,-7.068821,8.555914,-6.488151,-2.282837,4.328273,1.009673,4.100633,1.516230,4.937458,-3.336369,1.275059,7.269496,-4.553416,2.715021,7.983462,-1.779376,1.010472,-3.149286,-4.869357,-2.344175,-0.112316,-9.513608,-9.322419,-0.694930,-3.518529,-4.551791,6.466763,1.815539,-4.038204,-8.579283,-0.810264,9.888161,6.123809,9.913471,-7.892808,3.060050,-1.588826,-5.115530,5.650933,-4.997298,-5.099747,-6.324215,-0.674410,8.854286,-5.330745,-1.977631,-4.778591,-3.628261,8.124006,9.074999,3.281773,-4.081251,-9.473265,-7.756104,5.455391,-8.515078,-1.859439,-2.200564,-0.820716,5.493638,0.490679,-0.756425,3.145156,6.162523,-2.615252,-7.921940,-8.088294,4.020505,-9.465223,-3.167444,3.698378,2.402405,9.676716,-6.772165,4.259302,-3.244027,-1.459520,-1.043993,8.628970,-0.538353,-7.236272,-5.441912,-3.155221,-1.692722,2.464724,-9.715410,9.420840,-3.047069,9.457270,-5.328343,-8.170463,-2.784742,7.160735,-6.953645,-3.868299,5.850691,-6.440884,1.483355,3.319263,6.828029,8.832452,1.483111,5.174964,1.681539,0.417846,4.886172,9.249861,-9.093821,-0.630784,4.662095,6.106398,5.990768,-0.062708,-3.104411,-6.455074,5.955341,-3.027708,-3.530017,-9.193311,-5.227889,-8.894093,-6.513594,4.680021,-7.705240,8.251122,7.029490,-4.688179,-4.200735,5.820578,6.249702,-6.165839,2.305154,8.339784,-9.346487,-5.856090,5.789517,-5.647766,-4.069267,-0.547175,8.780574,-5.489172,6.375081,-6.975796,-7.616397,-8.267158,5.702191,-0.498396,2.568315,5.849782,4.207646,7.442723,-8.455286,-9.762811,4.246023,7.854296,0.110067,4.769326,9.525382,-4.998099,-5.702704,0.349351,-8.007070,-2.736483,6.744321,9.448949,9.753405,-4.639857,3.459732,-4.842358,3.365818,9.541285,-9.923792,4.146739,-6.787323,2.008284,6.173183,4.869414,-0.336551,3.371516,4.469990,-2.195967,8.165173,-1.108381,-5.114117,-7.569378,-6.801288,-1.425018,-4.232081,-7.477771,7.630263,6.396407,-3.769770,-8.431949,0.517123,9.686956,9.622145,2.845663,-4.395315,1.879342,5.192793,-1.312469,1.862868,-2.833133,8.733205,8.912419,-6.485165,0.026739,2.565762,2.914863,5.504005,1.688490,-0.233649,-5.296599,-5.576279,8.207731,0.858770,1.899080,-0.653993,-9.620754,6.979331,1.500030,9.552792,-4.771175,-7.342262,3.825556,-6.613431,-8.996380,5.221493,6.999358,-4.834802,9.578002,4.159260,2.290339,-6.129864,0.006988,8.599187,0.032398,4.658337,4.823338,6.702113,6.008019,5.776332,3.389949,-1.180805,-3.504713,6.194284,-6.343409,-9.975582,7.351064,-4.805673,-4.878157,0.375098,-2.890326,-6.879356,-1.794317,-8.453364,5.245984,-7.521716,-1.723511,-8.211548,6.637621,6.493384,-4.115677,1.339356,-1.336753,-7.402790,5.331446,7.156831,-6.344211,4.296715,4.939276,-6.761054,1.852378,5.660507,-9.399800,-1.801505,-0.703973,9.544370,-0.519724,-6.288993,-1.905351,1.905825,-4.734248,4.539014,-4.770425,8.723961,-5.645204,5.432888,-3.250611,-7.103383,-2.169465,2.942938,-3.897547,3.645328,5.869893,9.134594,-4.676795,-1.750085,9.004989,5.189531,-5.837535,-6.979074,-8.602879,4.792344,-9.622971,0.821114,-2.556418,8.948208,-5.080271,0.710299,-1.235911,8.866792,-0.129340,1.578039,-2.039937,5.002925,-9.567194,5.863905,8.248332,3.833389,-8.156537,-0.350621,5.674108,0.352170,-3.245152,-6.586785,-3.037384,4.135936,4.111532,-1.961004,7.261487,-4.880891,9.891622,8.962981,-5.941119,1.329075,3.100786,-9.889107,2.944638,-6.050284,-5.800631,9.952070,9.268105,2.454608,4.049692,-8.065326,-5.469491,-3.450376,-1.881744,-4.614191,7.415995,-7.725519,-1.415178,1.454820,-2.552838,0.134770,-7.201773,0.430743,-5.708402,-6.077663,2.651861,-3.064508,-0.424571,9.781322,-3.269146,8.627244,9.372854,1.292506,-8.815109,-0.407190,-1.614386,-5.663956,-1.834401,-3.226269,-4.911583,-5.312787,4.552030,3.671817,-8.455170,5.828744,4.902800,-9.907091,-1.715993,-1.129994,-2.044020,8.294284,-7.333479,-7.455564,-7.990685,4.706439,0.352243,-7.592231,0.376564,-0.563886,-0.080882,-0.741414,3.365221,2.563865,-4.405892,-1.463549,-4.474498,-6.731018,8.138006,1.685872,9.356889,1.155359,-2.138303,-2.298047,6.159663,7.221257,-3.967709,0.019618,-7.480728,6.572982,-3.264109,-1.472765,6.152165,-4.702771,5.088718,-5.760761,-3.608022,3.143104,3.915166,-7.576913,9.115346,7.084383,-8.865175,9.962998,7.882891,1.616122,-0.574080,-9.834519,-8.874567,7.295354,-4.306122,8.832874,8.187861,7.879198,-9.114398,3.995606,-3.538160,5.635829,-3.917904,8.519920,6.469720,7.485599,-3.785963,0.876967,-4.651952,-9.779949,0.979247,-8.354498,2.014094,3.153738,8.677069,1.681212,2.566815,-7.059991,2.143417,8.130460,2.609972,-7.725443,-7.807358,-4.439543,-6.152417,1.397027,-4.798756,-9.948397,-3.041550,3.543791,4.540613,7.877290,2.583515,-9.326326,9.369564,4.429052,-5.554565,3.356280,-1.877725,-3.182294,-1.172135,-7.325979,2.427152,-6.981705,-6.062391,2.310271,-5.001018,3.532011,0.204425,-3.893091,3.867323,4.199495,-6.926104,8.092530,-5.873813,4.209311,1.799974,-9.369749,8.844664,-0.905946,-0.160329,3.945257,-8.080528,8.865955,-5.892449,7.134079,5.299571,6.658738,8.096187,-6.165500,-1.936078,-1.304308,9.934458,-5.229888,-9.270953,0.863957,9.483550,9.540858,5.773798,0.970734,8.272614,2.764894,3.433365,-1.511904,8.016633,-3.466600,-7.789038,-5.002234,8.736770,-5.039033,2.595321,0.571978,-0.351745,5.522850,7.900439,5.733240,3.937159,2.944329,-2.739335,4.099946,2.250138,1.487185,-8.023236,9.262206,5.506146,8.227881,2.361972,3.604378,-7.653461,1.704986,7.101300], dtype = "float32")#candidate|3537|(1300,)|const|float32
call_3536 = func_3335_call(relay.reshape(const_3537.astype('float32'), [10, 10, 13]), relay.reshape(const_3537.astype('float32'), [10, 10, 13]), )
call_3538 = func_3335_call(relay.reshape(const_3537.astype('float32'), [10, 10, 13]), relay.reshape(const_3537.astype('float32'), [10, 10, 13]), )
const_3540 = relay.const([[[-2.638516,-9.775939,1.056449,5.512054,-0.042440,1.158035,8.819061,1.118642,-3.198999,5.594138],[-7.501978,-2.257831,2.667492,0.353746,6.412062,7.033205,-6.241755,-8.948422,1.472254,-3.607205],[5.000808,0.072237,6.563499,-7.656620,3.787814,-6.297065,9.290458,1.545320,0.212196,-4.882901],[9.519723,-7.596353,5.802096,2.174026,-4.940535,-0.365600,-6.689147,-6.461597,-4.173059,9.041460],[0.994099,8.127912,-5.974891,4.892642,6.335341,-4.595649,-3.216955,-4.326568,7.827717,-5.803962],[8.235852,-9.696264,-6.351234,-8.780323,5.361178,-2.663982,0.258383,9.826743,-6.318759,5.403871],[-6.455883,-6.312566,-8.672677,-2.928737,5.992426,3.172978,0.997731,-5.005561,6.208860,-4.067616]],[[-5.106596,8.558190,0.195306,5.881909,1.000316,7.723272,2.082431,-5.246216,8.437767,6.399286],[-1.464889,6.067399,-3.857475,9.389676,-8.913903,-4.707350,7.314375,9.041416,-4.647355,-6.673407],[3.919351,5.953121,-5.419731,7.301183,-0.322139,-1.733957,1.972775,-0.472633,6.962579,7.801615],[-9.072120,-7.045316,8.042125,-4.845716,-3.845924,-5.332694,-6.374890,-3.720869,3.831926,-7.851478],[8.242147,-3.146253,2.696021,-3.633907,5.252352,-6.838440,-1.363657,7.817152,-9.448526,8.791756],[-9.656949,5.491606,-4.250562,3.501496,5.984626,4.119041,-2.826864,2.431347,9.604443,-1.582964],[-3.324072,-4.163040,9.325024,-2.186344,3.291640,2.301654,0.507293,-3.579402,-3.970576,-6.395950]],[[-8.207849,-4.000608,4.954186,-9.675161,-7.009037,7.157046,1.843503,5.995491,9.679424,7.921364],[8.703304,1.244747,9.135676,-0.559141,6.324390,2.659862,6.615716,9.226169,9.303576,7.077507],[-9.951931,-2.138231,-4.403642,2.252824,-1.689417,-0.541283,0.552772,-4.356486,6.938263,-2.202401],[9.354481,-4.716601,-8.277494,-0.621688,4.997812,9.277377,-8.598244,-9.320989,2.445608,2.698250],[-3.214050,0.312517,5.051790,-4.905321,1.249335,2.877756,-4.653894,1.872067,2.417633,-0.696499],[8.559937,2.672603,-2.345126,-3.455200,9.440507,1.468923,8.728717,0.793823,-0.591845,7.098608],[-0.975944,1.424755,9.390102,9.776843,-3.542624,7.886587,6.035842,4.351677,-9.670287,3.974593]]], dtype = "float64")#candidate|3540|(3, 7, 10)|const|float64
bop_3541 = relay.minimum(call_3524.astype('int32'), const_3540.astype('int32')) # shape=(3, 7, 10)
bop_3544 = relay.minimum(call_3526.astype('int32'), const_3540.astype('int32')) # shape=(3, 7, 10)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_3559 = relay.TupleGetItem(func_1733_call(), 0)
call_3560 = relay.TupleGetItem(func_1735_call(), 0)
func_2403_call = mod.get_global_var('func_2403')
func_2404_call = mutated_mod.get_global_var('func_2404')
call_3561 = func_2403_call()
call_3562 = func_2403_call()
output = relay.Tuple([call_3510,const_3525,call_3536,const_3537,bop_3541,call_3559,call_3561,])
output2 = relay.Tuple([call_3511,const_3525,call_3538,const_3537,bop_3544,call_3560,call_3562,])
func_3564 = relay.Function([], output)
mod['func_3564'] = func_3564
mod = relay.transform.InferType()(mod)
output = func_3564()
func_3565 = relay.Function([], output)
mutated_mod['func_3565'] = func_3565
mutated_mod = relay.transform.InferType()(mutated_mod)
func_867_call = mod.get_global_var('func_867')
func_869_call = mutated_mod.get_global_var('func_869')
call_3580 = relay.TupleGetItem(func_867_call(), 0)
call_3581 = relay.TupleGetItem(func_869_call(), 0)
func_2227_call = mod.get_global_var('func_2227')
func_2228_call = mutated_mod.get_global_var('func_2228')
call_3583 = relay.TupleGetItem(func_2227_call(), 0)
call_3584 = relay.TupleGetItem(func_2228_call(), 0)
func_1184_call = mod.get_global_var('func_1184')
func_1185_call = mutated_mod.get_global_var('func_1185')
call_3610 = func_1184_call()
call_3611 = func_1184_call()
bop_3612 = relay.logical_and(call_3580.astype('bool'), relay.reshape(call_3610.astype('bool'), relay.shape_of(call_3580))) # shape=(12, 10, 5)
bop_3615 = relay.logical_and(call_3581.astype('bool'), relay.reshape(call_3611.astype('bool'), relay.shape_of(call_3581))) # shape=(12, 10, 5)
output = relay.Tuple([call_3583,bop_3612,])
output2 = relay.Tuple([call_3584,bop_3615,])
func_3616 = relay.Function([], output)
mod['func_3616'] = func_3616
mod = relay.transform.InferType()(mod)
mutated_mod['func_3616'] = func_3616
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3616_call = mutated_mod.get_global_var('func_3616')
call_3617 = func_3616_call()
output = call_3617
func_3618 = relay.Function([], output)
mutated_mod['func_3618'] = func_3618
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2812_call = mod.get_global_var('func_2812')
func_2813_call = mutated_mod.get_global_var('func_2813')
call_3629 = relay.TupleGetItem(func_2812_call(), 0)
call_3630 = relay.TupleGetItem(func_2813_call(), 0)
func_596_call = mod.get_global_var('func_596')
func_599_call = mutated_mod.get_global_var('func_599')
var_3633 = relay.var("var_3633", dtype = "float32", shape = (600,))#candidate|3633|(600,)|var|float32
call_3632 = relay.TupleGetItem(func_596_call(relay.reshape(call_3629.astype('float64'), [15, 5, 15]), relay.reshape(var_3633.astype('float32'), [600,]), ), 0)
call_3634 = relay.TupleGetItem(func_599_call(relay.reshape(call_3629.astype('float64'), [15, 5, 15]), relay.reshape(var_3633.astype('float32'), [600,]), ), 0)
func_1005_call = mod.get_global_var('func_1005')
func_1007_call = mutated_mod.get_global_var('func_1007')
call_3668 = relay.TupleGetItem(func_1005_call(), 0)
call_3669 = relay.TupleGetItem(func_1007_call(), 0)
output = relay.Tuple([call_3629,call_3632,var_3633,call_3668,])
output2 = relay.Tuple([call_3630,call_3634,var_3633,call_3669,])
func_3672 = relay.Function([var_3633,], output)
mod['func_3672'] = func_3672
mod = relay.transform.InferType()(mod)
var_3673 = relay.var("var_3673", dtype = "float32", shape = (600,))#candidate|3673|(600,)|var|float32
output = func_3672(var_3673)
func_3674 = relay.Function([var_3673], output)
mutated_mod['func_3674'] = func_3674
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3293_call = mod.get_global_var('func_3293')
func_3295_call = mutated_mod.get_global_var('func_3295')
call_3684 = relay.TupleGetItem(func_3293_call(), 1)
call_3685 = relay.TupleGetItem(func_3295_call(), 1)
func_3564_call = mod.get_global_var('func_3564')
func_3565_call = mutated_mod.get_global_var('func_3565')
call_3688 = relay.TupleGetItem(func_3564_call(), 3)
call_3689 = relay.TupleGetItem(func_3565_call(), 3)
uop_3690 = relay.atanh(call_3688.astype('float32')) # shape=(1300,)
uop_3692 = relay.atanh(call_3689.astype('float32')) # shape=(1300,)
uop_3706 = relay.tan(call_3688.astype('float64')) # shape=(1300,)
uop_3708 = relay.tan(call_3689.astype('float64')) # shape=(1300,)
func_2444_call = mod.get_global_var('func_2444')
func_2445_call = mutated_mod.get_global_var('func_2445')
call_3713 = relay.TupleGetItem(func_2444_call(), 0)
call_3714 = relay.TupleGetItem(func_2445_call(), 0)
func_2570_call = mod.get_global_var('func_2570')
func_2572_call = mutated_mod.get_global_var('func_2572')
call_3715 = relay.TupleGetItem(func_2570_call(), 0)
call_3716 = relay.TupleGetItem(func_2572_call(), 0)
func_2007_call = mod.get_global_var('func_2007')
func_2009_call = mutated_mod.get_global_var('func_2009')
const_3722 = relay.const([[-0.687248],[-3.162898],[-8.239117],[0.188312],[0.683574],[-9.851238],[-4.749784],[1.190953],[1.263118],[7.664172],[-3.383729],[4.693637],[8.671237],[9.741329],[2.777475],[5.745398],[0.898938],[-1.572545],[4.092402],[9.680997],[3.068140],[9.920473],[-3.485785],[-1.824274],[5.533268],[8.872900],[-5.452756],[2.027188],[8.950516],[4.160057],[-4.974894],[-8.121117],[-3.145752],[1.033738],[-4.668226],[5.573594],[8.020450],[1.305867],[1.281369],[5.174387],[-8.574436],[-2.345617],[0.092623],[-2.534070],[-7.544736],[7.727991],[4.087564],[9.449010],[9.199035],[7.878797],[6.965050],[7.723015],[2.918628],[8.809754],[-8.200074],[-6.977062],[5.642933],[-4.125286],[-4.727276],[6.233650],[-9.276572],[-6.433540],[-5.613921],[-4.542967],[-1.296744],[8.475728],[-5.053191],[-2.017719],[6.147147],[-1.754598],[1.722176],[-7.800380],[9.220946],[6.111602],[-5.890883],[-1.756451],[-0.801247],[-1.572537],[-9.493016],[-4.138588],[-8.233875],[4.211565],[-8.898039],[-9.041495],[6.144616],[-5.440198],[0.652953],[6.653876],[7.414087],[3.115261],[6.418266],[-0.879054],[-9.836866],[-6.454058],[1.943313],[1.692128],[-5.146544],[-9.925258],[7.678836],[-6.188582],[2.341355],[0.992420],[-7.234545],[2.303561],[0.072149],[2.376161],[3.916538],[-6.417894],[-6.964563],[-8.602770],[0.083179],[0.238764],[-2.628806],[9.964650],[-0.764220],[-2.499200],[-5.476170],[2.595367],[-4.024988],[-2.888491],[0.447851],[-2.518652],[3.415488],[-7.989175],[4.057305],[-9.689662],[-3.550674],[-9.227004],[7.828778],[-4.143867],[-8.227882],[-1.261452],[-2.156676],[3.579017],[-7.239111],[9.937508],[1.473917],[-9.957978],[-7.148217],[-1.227930],[-2.396045],[9.358561],[-8.317768],[5.546187],[0.176581],[7.692834],[7.818313],[-1.539731],[6.961418],[-6.020502],[7.635516],[2.432173],[-4.861182],[4.264477],[-3.695275],[-8.152589],[-6.706753],[-0.077241],[-8.026218],[8.003513],[0.731060],[4.767734],[-5.825466],[4.850196],[5.554535],[8.065267],[0.721731],[7.933185],[1.488813],[-7.272499],[-9.948977],[-4.429675],[-7.788365],[9.410847],[-4.873771],[-6.914153],[4.432245],[-9.245718],[8.355482],[-2.427358],[-8.691456],[8.713831],[-6.109543],[4.634851],[-9.874289],[-5.571228],[-1.395579],[2.518247],[0.986492],[0.362185],[4.557418],[2.626479],[2.560570],[-4.120479],[5.699608],[4.920548],[5.226595],[4.647271],[2.297751],[5.479933],[8.585890],[-5.985505],[-0.182292],[-7.961961],[-6.745387],[6.984366],[-9.988986],[7.298861],[2.423784],[-4.044889],[-4.486991],[-3.850875],[2.720199],[8.039388],[-3.329865],[-1.052228],[-1.328530],[7.128867],[-0.458183],[-9.241619],[-3.520303],[1.358221],[1.375436],[-7.554323],[-7.957826],[4.985434],[8.219213],[-0.214099],[-9.679342],[0.313872],[-2.798739],[-6.284988],[7.623484],[0.759072],[8.127387],[-0.762266],[-3.136744],[-3.956727],[-9.634879],[-1.053594],[-1.240373],[8.706413],[3.788380],[-8.935879],[-2.044867],[-5.001600],[8.655992],[1.125441],[-5.342274],[-7.706483],[1.703761],[3.807220],[-1.429302],[1.460682],[6.449911],[-7.844040],[5.239505],[2.763290],[7.692232],[-1.988724],[4.943288],[9.336869],[4.077818],[5.476251],[4.289174],[-8.550901],[4.578900],[-9.499535],[0.278038],[-7.312175],[0.600491],[-6.839375],[8.833777],[8.372514],[3.702386],[-3.148119],[-0.416891],[2.353631],[-3.153919],[-2.789316],[5.011807],[-8.119940],[-6.116885],[-8.313972],[-1.566868],[-6.046266],[4.654812],[5.668255],[-3.079399],[-1.046752],[-7.457279],[7.569248],[-5.516299],[1.208263],[4.184144],[-3.505726],[-9.976664],[4.780031],[-5.347323],[-3.732071],[8.582726],[-4.914716],[-4.079032],[5.520030],[8.096069],[-7.923185],[-6.313766],[-6.932534],[9.725203],[9.820104],[2.479757],[2.389349],[3.479101],[2.858533],[-7.422143],[-2.820626],[-7.231415],[3.747330],[-6.132868],[-1.033980],[-4.262430],[-0.913222],[-6.889712],[2.147231],[-8.736153],[-4.790333],[-3.139463],[7.731582],[6.280051],[9.324082],[-9.629704],[5.499156],[9.719905],[9.645703],[3.674267],[9.022258],[2.266766],[-9.014788],[-2.462175],[8.934354],[-2.664267],[8.203986],[3.782126],[-7.625134],[2.229234],[-3.058187],[-9.676213],[-9.082434],[-9.409380],[9.361588],[2.726272],[9.384383],[-1.366649],[-0.703882],[6.834277],[7.511492],[-1.929800],[1.972965],[2.544659],[-6.724943],[6.187240],[5.194053],[-1.635918],[5.363201],[1.370119],[-3.335165],[0.826107],[1.629201],[1.829362],[3.841058],[2.250989],[-5.260132],[2.019830],[2.067414],[-6.551810],[1.691888],[8.442593],[2.069207],[-7.166037],[-8.730853],[8.280224],[8.443619],[6.401194],[5.449998],[-3.749228],[3.487553],[4.534929],[5.546236],[0.457339],[-8.328320],[-9.253503],[-6.735652],[-9.757299],[4.981829],[-8.492503],[-1.967057],[-3.931129],[7.880141],[2.530201],[-1.673667],[2.707934],[4.767202],[-3.757237],[5.339691],[-4.360878],[5.159858],[4.598373],[-3.740497],[1.857205],[-4.952941],[7.953277],[1.818867],[-0.734967],[8.774402],[9.812733],[-7.206722],[-4.009340],[-6.269651],[-1.644874],[-7.953729],[4.411086],[-0.181812],[0.393706],[-2.704614],[-1.649251],[8.356626],[3.248623],[-7.334133],[7.162455],[0.118025],[1.096038],[5.107373],[-9.779153],[-8.616703],[8.525993],[9.411925],[-8.196244],[1.320598],[-2.979891],[-8.648317],[-7.206262],[-2.301983],[8.937939],[-3.030435],[8.954574],[5.008755],[1.032819],[-9.577430],[-7.100316],[-2.778320],[8.235790],[-1.509705],[4.049276],[-9.479592],[1.869122],[8.887069],[-9.551646],[-0.889396],[-9.355509],[-7.786040],[-4.261417],[-2.777024],[-4.563006],[9.455038],[-4.565142],[-0.123980],[3.540168],[9.859788],[-5.528101],[-2.501780],[3.100830],[3.544208],[-0.314096],[7.845109],[-1.733776],[-8.847280],[4.513222],[-5.666415],[4.777197],[1.103892],[-9.044350],[3.558203],[-2.991939],[-5.473156],[-8.155927],[0.147683],[-5.459747],[3.858270],[-7.971060],[2.629858],[-7.942002],[6.698631],[7.580078],[1.714019],[-9.636314],[-6.901044],[-9.973244],[-2.002718],[-8.714907],[7.240094],[-0.749316],[-6.539918],[-8.728844],[1.658200],[-2.579010],[4.073251],[-0.007566],[6.529519],[9.611636],[-6.519262],[1.540971],[-8.102680],[-5.317799],[-5.446220],[1.534455],[-6.402018],[-8.883119],[4.671703],[-0.860421],[3.281851],[4.995418],[-9.382853],[-3.479459],[1.185718],[-9.285138],[8.640893],[-7.537669],[-6.721337],[-9.363026],[-2.367877],[-7.079520],[2.659528],[5.635427],[6.426319],[7.652406],[1.809762],[-3.301319],[-1.717087],[7.913768],[-8.256552],[0.539274],[6.338325],[4.863368],[7.555800],[-4.997438],[9.803077],[-2.949069],[-7.354442],[9.698248],[7.269703],[-7.034201],[-7.051918],[-1.668309],[0.736526],[-6.694230],[-7.444012],[4.022401],[-7.506291],[9.634245],[3.439413],[0.361814],[-6.648967],[2.501849],[8.880729],[7.903850],[-3.872227],[6.485683],[-9.966509],[8.188834],[8.347821],[2.322830],[-3.289759],[4.091469],[6.609980],[-0.346247],[2.730840],[3.173401],[0.799500],[-1.993468],[-7.691382],[4.137479],[0.237287],[6.173941],[7.503380],[-0.771504],[-1.586529],[-4.613887],[-5.069654],[0.151263],[-3.757522],[-5.968073],[9.753734],[3.780305],[4.438590],[-7.763350],[0.786041],[-6.243722],[-6.421300],[-9.847126],[-7.690141],[0.193759],[-6.994945],[9.148846],[2.503891],[-0.297511],[-5.556284],[3.837604],[0.441053],[-0.812276],[-1.845035],[-9.354076],[5.207438],[0.844239],[-7.447318],[8.507149],[-0.249169],[0.200335],[-4.203426],[7.132169],[-0.783414],[8.062317],[6.016765],[-0.969953],[6.361864],[0.286097],[4.186739],[-3.711518],[-7.822024],[3.665991],[5.836182],[6.513244],[7.285787],[7.211209],[-4.506915],[4.366358],[-3.340434],[8.597315],[-7.084620],[-4.805923],[9.355340],[0.342473],[1.741251],[0.508426],[5.177602],[-5.727927],[2.812556],[-6.896662],[1.848082],[-1.971724],[7.675587],[-6.464503],[-5.192659],[7.352039],[0.119154],[-2.937901],[2.671874],[-2.789499],[6.117515],[-6.488204],[-0.271228],[-3.175331],[-0.399238],[-5.330710],[-1.695647],[4.751808],[-1.210992],[4.829581],[-1.956484],[5.070506],[5.538215],[-3.751406],[-8.771273],[7.404173],[-9.256910],[-7.795295],[9.189944],[-0.782900],[-2.440766],[0.409611],[5.350179],[-1.813831],[-9.803022],[-9.534825],[-3.658178],[-2.327336],[6.750552],[-9.493079],[0.840582],[-5.899547],[0.402404],[-5.001613],[4.254274],[-1.894377],[7.959008],[-6.147663],[8.706939],[6.360721],[-7.077888],[-8.204560],[7.440947],[-2.324085],[1.191863],[-9.670163],[3.488598],[-1.933267],[-6.813455],[8.230247],[4.449484],[8.873861],[5.868524],[0.573675],[-0.211616],[-6.539804],[-3.862686],[2.896531],[4.734486],[-0.898696],[-6.060286],[-6.558919],[3.085862],[-2.012578],[5.545912],[1.297219],[5.984554],[-1.181678],[-7.078666],[6.520464],[-9.324195],[-5.228451],[-0.981681],[-2.427977],[5.729381],[-1.447400],[-0.033463],[6.085390],[3.410150],[2.355986],[8.068183],[7.616933],[9.829382],[9.134411],[9.651757],[-2.533698],[-3.075421],[-7.279215],[-4.755551],[8.318413],[-9.884899],[3.650258],[-3.677380],[-5.317339],[-2.764965],[-2.994224],[6.228522],[-9.386589],[6.967577],[-0.140693],[1.436571],[-9.432995],[8.787340],[-4.820959],[-3.144875],[-6.122329],[-6.610797],[3.570458],[-0.737678],[-8.765938],[0.476840],[9.242277],[0.409150],[5.365914],[5.593131],[8.182490],[-8.347009],[3.567604],[9.913003],[0.675240],[4.669476],[-6.088903],[7.010465],[-5.057549],[3.126177],[-0.295696],[5.435808],[5.633653],[9.134945],[-3.168861],[3.508608],[2.438864],[0.440452],[5.703293],[1.645101],[-7.899310],[-1.312228],[-7.761769],[-6.608139],[-4.625126],[8.572490],[-8.277915],[-5.840375],[7.826157],[-3.287221],[-7.030590],[-0.870665],[9.281974],[-3.114480],[-5.755542],[2.487452],[-3.585730],[3.327175],[3.109787],[8.778758],[8.840373],[-8.848480],[-7.158138],[-8.379779],[2.443192],[6.308663],[-1.220953],[9.795139],[5.997534],[-2.868881],[9.582067],[7.680495],[-6.559876],[-3.655179],[-6.344366],[6.695369],[4.973404],[-7.602933],[-1.202991],[1.221439],[9.478177],[9.442488],[-5.088955],[-0.139643],[8.063512],[0.932318],[-7.839314],[-1.776658],[8.656213],[9.307262],[4.390131],[-5.448473],[-1.249853],[-1.121421],[5.812843],[-1.757217],[-6.534945],[-2.331322],[6.187774],[-3.391915],[0.052126],[6.720220],[-7.325280],[-1.827323],[5.076747],[-4.898585],[-0.353808],[7.559041],[9.228572],[9.512607],[5.430091],[6.116251],[-8.698979],[8.521815],[-1.504553],[-7.616994],[1.737847],[-3.424216],[8.842321],[-3.746415],[-2.545017],[2.540171],[5.878451],[9.876225],[-1.103743],[2.718419],[3.292656],[7.133517],[-3.306672],[2.022202],[8.640756],[-8.531584],[8.772551],[-9.482639],[-6.395147],[3.551136],[1.088764],[9.663555],[8.739903],[4.290379],[-3.751634],[-3.166946],[-6.478833],[7.027579],[-0.555148],[8.150090],[-6.963636],[-2.852308],[-7.650381],[-1.643082],[3.126724],[8.528309],[1.763168],[7.998497],[-6.369491],[-2.294988],[0.353125],[-1.904233],[0.990476],[-9.432297],[-9.567568],[8.815303],[-9.014108],[-1.545749],[-9.156663],[5.529810],[0.841909],[8.557130],[0.182438],[7.612877],[8.044473],[-2.603061],[-9.003530],[-6.714393],[-1.434796],[7.818384],[6.641790],[7.789312],[7.052730],[-5.836776],[9.529872],[1.099306],[1.818436],[0.574450],[-2.789032],[-1.248373],[-7.785640],[-7.097855],[9.599671],[-5.247168],[-7.843928],[-1.450551],[-6.392233],[8.873392],[4.122020],[-6.502194],[1.043659],[2.104970],[-4.256450],[7.634532],[-4.891942],[-7.718182],[0.131708],[0.859244],[-1.523180],[-3.072793],[-1.680744],[-9.611545],[9.309259],[-2.693041],[4.808147],[8.592719],[-5.727338],[1.560563],[7.759339],[9.510183],[-0.435028],[-1.802186],[3.131154],[-3.753953],[-2.183576],[-7.602806],[0.860063],[7.095671],[-0.541941],[-9.236664],[-8.345667],[-0.499224],[-2.531518],[1.146816],[-0.862817],[3.647511],[1.581903],[-4.376779],[-9.505690],[-4.641971],[-8.008186],[8.217244],[3.977637],[-0.480501],[-7.510236],[1.889489],[-9.581784],[7.200269],[-0.929229],[-7.939733],[-1.473580],[0.814970],[0.981881],[-9.394724],[1.189872],[-5.343983],[0.532036],[8.198111],[1.097000],[-6.523228],[-9.914499],[-3.362358],[1.348985],[-4.626972],[1.642647],[-9.310122],[-7.085234],[6.682315],[-4.247809],[2.124145],[-1.994397],[2.777154],[5.923316],[-7.395355],[-5.528003],[-7.687674],[-3.316686],[5.934414],[3.160859],[1.539811],[-8.743520],[-0.279167],[-0.577248],[-3.889545],[8.357404],[-7.219516],[-3.515103],[2.819787],[-3.134077],[-9.273803],[-5.562733],[-2.277635],[3.727707],[-4.397824],[9.720000],[7.808357],[9.113416],[-5.947072],[1.407244],[-6.536539],[5.779954],[-7.677515],[-8.132639],[8.437981],[7.351141],[0.969632],[6.868272],[6.018412],[2.595372],[4.184639],[9.149522],[-7.689379],[-6.643728],[-4.669822],[-2.501289],[-6.562324],[5.795094],[6.833886],[-2.609912],[6.396519],[-0.107525],[3.429532],[-4.029270],[-0.405340],[-8.898865],[-7.303917],[4.615184],[-5.274580],[3.513224],[0.605750],[-2.317808],[3.398075],[3.194552],[0.811176],[-6.895683],[8.591254],[-3.017633],[-4.060007],[6.031166],[-9.114806],[-7.566786],[-0.067164],[-1.430446],[1.564478],[3.924389],[2.291482],[-8.850597],[-2.325935],[4.448942],[4.588889],[-8.555059],[-2.548363],[1.959069],[7.541545],[8.937873],[-9.122722],[-6.288449],[0.449475],[0.399621],[-2.510802],[-8.227088],[-8.862330],[8.310190],[-8.549874],[4.795321],[-8.120559],[-1.493151],[-3.987446],[0.470182],[1.525584],[8.430570],[-0.973344],[-1.879624],[-0.298932],[-4.658539],[-6.759822],[-1.686135],[9.963774],[4.415529],[-5.309553],[0.552623],[-3.390789],[8.196562],[4.188598],[-9.149785],[-3.328210],[-5.762119],[4.389999],[-9.118198],[-2.785686],[5.104933],[3.373381],[-3.396570],[6.738732],[-3.640083],[-3.532714],[-0.597775],[-9.079052],[1.693358],[-0.985538],[-2.087278],[7.013263],[1.969615],[6.166309],[1.574657],[-8.420326],[-6.107341],[-9.362720],[-0.717058],[4.526953],[-9.503855],[-0.162421],[-3.942333],[-5.941786],[-0.185465],[-5.779042],[0.363432],[6.347256],[-9.035416],[9.901526],[-6.493103],[-9.351648],[1.076240],[0.093618],[-0.199457],[4.142865],[-1.240847],[0.997244],[-3.659577],[-3.612636],[-7.834934],[3.691170],[4.816019],[-6.564201],[1.112235],[8.499683],[7.817915],[-7.865785],[-6.498715],[-3.734255],[-0.404513],[5.335502],[8.722914],[-7.605907],[4.486596],[-7.764398],[9.821955],[9.129543],[-7.989872],[-7.848021],[4.860854],[-6.354937],[-1.501418],[-8.052434],[-3.870233],[9.640108],[-2.794382],[-1.658788],[-4.380079],[4.167812],[5.642424],[4.662982],[6.985001],[3.785652],[3.810610],[2.270673],[9.219089],[5.844503],[-8.960619],[1.413222],[4.208390],[-8.476428],[7.346400],[3.191727],[1.418801],[2.814969],[8.226085],[0.670100],[-2.405076],[-4.207965],[-9.492049],[-2.141850],[4.203536],[9.465409],[5.642108],[0.489440],[-1.575313],[-0.093381],[-1.499409],[4.614392],[-4.539902],[-5.379798],[0.699126],[-1.034437],[7.354506],[1.254446],[-1.114827],[8.480722],[-5.167186],[-4.298166],[9.762936],[-7.207110],[5.602706],[-4.018238],[-3.012137],[1.361416],[-6.533925],[-5.577114],[5.081343],[4.984576],[-3.021323],[-1.742645],[1.059636],[-3.426851],[7.863226],[5.246489],[-2.379683],[-8.761791],[1.384662],[5.910095],[-8.882514],[-5.474869],[5.447014],[-9.022265],[-9.199069],[8.758559],[8.436857],[5.924984],[5.339436],[-4.739761],[-8.687172],[-0.464929],[9.109348],[-3.503276],[0.067171],[-8.330625],[-0.608199],[-9.825023],[-9.092887],[-9.300076],[5.524721],[9.990286],[-7.317573],[3.856877],[-2.646199],[-7.803509],[6.137503],[-8.473967],[7.846578],[6.170949],[-8.940439],[-3.614749],[4.822240],[-7.441761],[1.723864],[-7.890722],[-9.624623],[1.386351],[-7.387425],[2.939171],[-6.129722],[-2.460357],[-5.195220],[-1.478405],[1.987233],[-0.954984],[-2.463784],[4.205516],[0.903927],[1.276870],[-0.043514],[1.604330],[6.800738],[5.666293],[7.205927],[-5.769989],[-4.070974],[-4.031917],[6.808118],[-4.727283],[-0.963536],[2.403418],[8.213362],[-3.933655],[-7.799151],[-6.505109],[0.473476],[-4.031509],[-1.821856],[5.949076],[-0.131775],[-3.562145],[-3.380804],[7.852917],[5.838268],[-5.687594],[-5.523139],[-4.050068],[-4.931896],[-8.113503],[-7.853274],[-5.592061],[8.525384],[-1.602294],[-2.121785],[1.445441],[-9.180529],[-8.185453],[-7.381411],[-7.046468],[5.218926],[-1.961073],[-7.480404],[-7.687110],[1.650848],[-3.593834],[5.441015],[-7.570658],[4.967195],[-1.760222],[-9.804661],[-9.972639],[4.133163],[4.218039],[-7.988177],[-8.626272],[-2.823749],[4.145749],[3.489477],[-3.667186],[-3.619259],[4.154920],[0.407710],[-5.547423],[-2.278762],[-5.732943],[2.839668],[5.370629],[3.575976],[-7.393485],[2.488443],[-2.325015],[0.363084],[-9.621021],[1.560933],[-5.942900],[3.911902],[2.882769],[4.976913],[0.093659],[-1.181483],[-3.461312],[-4.893294],[6.240155],[-2.262963],[5.191376],[-4.901764],[6.974104],[8.790904],[-6.921266],[-7.735751],[8.168332],[-1.281959],[-0.912624],[-5.942102],[-0.695387],[-2.923318],[-4.803896],[-7.442929],[-4.525289],[-0.388208],[-8.151732],[6.442359],[-8.770483],[-4.690543],[1.754029],[9.673836],[-2.991930],[7.132557],[7.627483],[3.771030],[7.448407],[-4.550697],[-8.886215],[3.326642],[7.558263],[0.278218],[-7.205685],[-2.422789],[4.762337],[4.865264],[9.063410],[2.778795],[2.646727],[7.788702],[6.748974],[-1.483096],[-1.635298],[-6.468367],[7.957111],[1.305985],[9.540472],[7.969140],[-8.124382],[1.081018],[-1.888443],[-2.712877],[2.465219]], dtype = "float64")#candidate|3722|(1456, 1)|const|float64
call_3721 = relay.TupleGetItem(func_2007_call(relay.reshape(const_3722.astype('float64'), [14, 8, 13])), 0)
call_3723 = relay.TupleGetItem(func_2009_call(relay.reshape(const_3722.astype('float64'), [14, 8, 13])), 0)
func_511_call = mod.get_global_var('func_511')
func_512_call = mutated_mod.get_global_var('func_512')
call_3724 = func_511_call()
call_3725 = func_511_call()
output = relay.Tuple([call_3684,uop_3690,uop_3706,call_3713,call_3715,call_3721,const_3722,call_3724,])
output2 = relay.Tuple([call_3685,uop_3692,uop_3708,call_3714,call_3716,call_3723,const_3722,call_3725,])
func_3726 = relay.Function([], output)
mod['func_3726'] = func_3726
mod = relay.transform.InferType()(mod)
mutated_mod['func_3726'] = func_3726
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3726_call = mutated_mod.get_global_var('func_3726')
call_3727 = func_3726_call()
output = call_3727
func_3728 = relay.Function([], output)
mutated_mod['func_3728'] = func_3728
mutated_mod = relay.transform.InferType()(mutated_mod)
func_235_call = mod.get_global_var('func_235')
func_236_call = mutated_mod.get_global_var('func_236')
call_3739 = relay.TupleGetItem(func_235_call(), 5)
call_3740 = relay.TupleGetItem(func_236_call(), 5)
func_20_call = mod.get_global_var('func_20')
func_22_call = mutated_mod.get_global_var('func_22')
var_3744 = relay.var("var_3744", dtype = "float32", shape = (21,))#candidate|3744|(21,)|var|float32
call_3743 = relay.TupleGetItem(func_20_call(relay.reshape(var_3744.astype('float32'), [3, 7, 1])), 0)
call_3745 = relay.TupleGetItem(func_22_call(relay.reshape(var_3744.astype('float32'), [3, 7, 1])), 0)
const_3763 = relay.const([[[-3.766167,-2.188077,-9.688832,4.049865,7.342020,8.734039,2.160590],[-3.721838,-1.247897,2.134800,-7.367223,-4.483250,1.143945,5.479802],[3.187831,-4.206801,-8.812401,7.564554,-7.849770,-4.796702,-8.267978],[3.545033,6.088263,9.352099,0.871781,-4.998622,-1.400345,-1.939128],[0.111664,-7.552753,-9.536776,-5.707632,9.733828,2.833456,-0.094717],[7.448001,-3.175614,-6.165860,1.943075,8.276605,-2.362560,-3.096646],[-5.301912,7.967301,-3.652546,-9.050140,-6.080297,-3.566036,6.806488]],[[-9.273745,1.303933,-6.172752,-8.086062,1.174311,8.134084,-9.940314],[-7.049215,-6.287662,4.084084,-9.697904,9.066687,-5.399301,3.363476],[-0.382619,-1.778278,2.078868,-4.156154,8.727132,-3.985114,-9.093518],[4.218931,-8.967904,-0.393536,8.642696,-1.270475,6.409845,-1.377579],[3.261660,-6.605328,-7.635407,-5.075761,1.360389,-4.488114,6.435088],[3.505957,-7.994180,-4.001224,4.458055,3.647206,-9.033961,-3.876371],[8.698527,7.279337,7.831808,-5.963843,4.420699,5.366826,-0.063834]],[[3.135978,-9.275384,2.624608,-5.397953,8.814473,-3.354920,-9.425491],[-8.241791,7.409921,9.935023,6.159125,-6.785023,0.538467,-6.700971],[-2.074217,-9.349887,9.327592,0.902562,6.267058,-1.836161,1.436935],[9.027053,-3.050573,-9.928891,8.476327,-2.582631,-1.164839,7.721602],[-0.067841,-6.600826,-0.472375,3.275321,-6.422826,-9.295215,-5.260387],[-6.548665,-4.650314,3.562480,-7.191807,-4.959763,2.790351,-0.304208],[5.227293,8.798287,7.216365,5.942389,-7.132538,2.146793,1.868791]]], dtype = "float64")#candidate|3763|(3, 7, 7)|const|float64
bop_3764 = relay.left_shift(call_3743.astype('uint16'), const_3763.astype('uint16')) # shape=(3, 7, 7)
bop_3767 = relay.left_shift(call_3745.astype('uint16'), const_3763.astype('uint16')) # shape=(3, 7, 7)
func_1446_call = mod.get_global_var('func_1446')
func_1447_call = mutated_mod.get_global_var('func_1447')
call_3770 = func_1446_call()
call_3771 = func_1446_call()
func_1778_call = mod.get_global_var('func_1778')
func_1780_call = mutated_mod.get_global_var('func_1780')
call_3773 = relay.TupleGetItem(func_1778_call(), 0)
call_3774 = relay.TupleGetItem(func_1780_call(), 0)
uop_3788 = relay.tan(bop_3764.astype('float32')) # shape=(3, 7, 7)
uop_3790 = relay.tan(bop_3767.astype('float32')) # shape=(3, 7, 7)
func_2851_call = mod.get_global_var('func_2851')
func_2853_call = mutated_mod.get_global_var('func_2853')
call_3795 = func_2851_call()
call_3796 = func_2851_call()
uop_3797 = relay.log10(uop_3788.astype('float64')) # shape=(3, 7, 7)
uop_3799 = relay.log10(uop_3790.astype('float64')) # shape=(3, 7, 7)
output = relay.Tuple([call_3739,var_3744,call_3770,call_3773,call_3795,uop_3797,])
output2 = relay.Tuple([call_3740,var_3744,call_3771,call_3774,call_3796,uop_3799,])
func_3801 = relay.Function([var_3744,], output)
mod['func_3801'] = func_3801
mod = relay.transform.InferType()(mod)
var_3802 = relay.var("var_3802", dtype = "float32", shape = (21,))#candidate|3802|(21,)|var|float32
output = func_3801(var_3802)
func_3803 = relay.Function([var_3802], output)
mutated_mod['func_3803'] = func_3803
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_3896 = relay.TupleGetItem(func_1374_call(), 0)
call_3897 = relay.TupleGetItem(func_1375_call(), 0)
func_1145_call = mod.get_global_var('func_1145')
func_1148_call = mutated_mod.get_global_var('func_1148')
const_3917 = relay.const([False,False,True,False,True,True,True,False,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,True,True,True,False,True,True,False,False,True,True,True,True,True,False,True,True,True,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,False,True,False,True,True,False,False,False,True,False,False,True,True,True,False,True,True,True,False,False,False,False,False,False,False,False,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,True,True,False,True,True,True,True,True,True,True,True,True,True,False,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,False,False,True,False,True,False,True,False,True,False,True,False,True,True,False,True,False,False,True,False,True,True,False,True,False,False,False,True,True,True,False,True,True,True,True,True,True,False,True,False,False,True,True,True,False,True,False,False,True,True,True,True,True,True,False,True,True,False,False,False,False,False,True,True,False,False,False,True,False,False,False,False,True,True,True,True,False,False,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,True,False,True,True,True,True,True,True,True,False,False,True,True,True,True,True,True,False,True,False,True,True,True,False,True,False,False,False,False,False,True,True,False,True,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,True,False,True,True,False,False,False,False,True,False,True,False,False,False,False,True,False,True,True,False,True,False,False,True,False,True,True,False,False,True,True,True,True,False,False,True,False,False,True,False,False,False,False,True,True,False,False,True,True,True,True,False,True,True,True,True,True,False,True,True,True,False,False,False,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,False,False,True,False,True,True,True,False,False,False,True,True,False,False,True,False,True,False,False,False,True,False,True,False,False,True,True,True,False,True,False,False,True,True,False,True,False,True,True,True,True,False,False,True,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,False,True,False,True,True,False,True,True,False,False,True,True,False,False,True,False,False,True,False,False,False,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,True,True,False,True,True,False,False,False,False,False,False,True,True,False,True,True,False,False,True,False,False,True,False,True,False,True,True,True,False,True,False,True,False,True,False,False,True,False,False,True,False,False,False,True,True,False,False,True,False,False,True,True,True,False,False,True,True,True,True,True,True,True,False,True,False,False,True,True,False,True,True,True,False,True,False,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,True,False,False,True,False,True,False,True,False,False,False,False,False,True,True,False,False,True,True,True,False,True,False,True,True,False,False,False,False,True,True,True,False,False,False,False,True,False,False,True,False,False,True,True,True,False,True,False,False,False,True,False,True,True,True,False,True,False,False,True,True,False,False,True,False,False,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,False,False,False,True,True,False,True,False,False,False,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,True,False,False,False,False,True,True,True,True,True,False,True,True,False,True,False,True,False,True,True,True,True,True,False,False,True,False,False,False,True,True,True,True,False,True,True,True,True,False,False,False,False,True,True,False,True,True,False,True,False,True,False,True,False,True,True,True,True,True,False,False,True,True,True,True,True,False,False,False,False,True,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,True,True,True,False,True,True,True,True,False,False,False,False,True,False,False,False,False,False,False,True,True,False,True,False,False,True,False,True,False,False,True,True,False,False,False,True,True,True,False,True,False,False,True,True,False,True,True,False,False,True,True,True,True,False,False,False,True,False,True,False,True,True,True,True,True,True,False,True,True,True,False,True,True,False,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,True,False,False,False,True,True,False,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,False,False,True,False,False,False,False,True,False,True,True,True,True,False,False,False,True,False,True,False,False,False,True,True,True,False,True,True,False,True,False,False,False,True,False,False,True,False,False,True,True,True,False,True,True,False,True,True,False,False,True,True,False,False,False,True,False,True,False,False,True,True,True,True,False,True,True,False,False,True,True,True,False,False,False,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,False,False,False,True,True,False,True,True,False,False,False,True,True,False,False,True,True,True,False,False,True,False,False,False,False,False,True,True,True,True,True,False,True,True,True,False,True,False,True,True,True,False,True,False,False,True,True,True,False,True,True,True,True,True,False,True,True,True,True,True,False,False,True,False,True,False,False,True,True,False,False,False,False,True,False,False,False,True,False,True,False,True,False,True,True,False,False,False,False,True,True,False,True,False,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,True,True,True,True,False,False,False,False,False,False,False,False,False,True,True,False,True,False,True,False,False,True,True,True,True,False,True,True,False,True,False,True,True,True,False,True,True,False,True,False,True,False,False,True,True,True,True,False,False,True,True,False,False,False,True,False,True,False,True,True,False,False,False,True,True,True,False,True,True,True,True,False,True,True,True,False,False,True,True,False,False,False,True,False,False,False,False,True,True,False,False,True,False,True,False,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,False,False,True,True,True,True,False,False,True,True,True,True,False,True,True,False,True,True,True,False,True,True,True,True,True,True,False,True,True,False,False,False,False,True,True,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,True,True,True,False,False,False,True,True,False,True,True,False,True,True,True,False,True,True,True,False,True,False,True,True,False,False,True,True,True,True,True,False,False,False,False,True,True,False,False,True,True,True,True,False,False,False,False,True,True,True,False,True,True,True,False,False,True,True,True,False,True,False,False,True,False,True,False,True,True,False,False,False,True,True,False,False,True,False,True,True,True,True,False,True,False,False,True,False,True,False,False,False,False,True,False,False,False,False,False,True,True,False,True,False,False,True,False,True,True,False,False,False,True,False,True,False,False,False,False,False,False,False,False,False,True,False,True,True,True,True,False,False,True,True,False,True,False,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,False,False,True,False,False,False,False,True,False,False,False,True,False,True,False,False,True,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,False,False,True,False,True,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,False,True,False,False,False,False,True,True,False,True,True,True,False,True,False,True,False,False,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,False,True,False,False,False,True,False,False,False,True,False,True,False,False,True,False,False,False,True,True,True,False,False,True,True,True,True,False,True,False,True,True,False,True,True,False,True,False,False,True,True,True,True,True,True,False,False,True,False,True,True,True,True,True,False,True,True,False,True,False,False,False,False,False,False,True,True,True,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,True,False,False,False,False,False,True,True,False,True,True,False,False,False,True,False,False,False,True,False,True,True,False,True,False,True,False,False,True,False,True,False,False,False,True,True,False,False,False,False,True,True,True,True,False,False,True,False,False,False,False,False,False,False,True,False,True,True,False,False,True,True,True,False,True,False,True,True,False,True,False,True,False,True,False,False,True,False,False,False,False,True,False,False,True,True,False,True,True,False,True,False,False,False,False,True,False,True,True,False,False,True,True,True,False,False,True,True,False,False,True,False,True,True,True,False,True,True,True,False,False,True,False,False,True,True,True,False,False,False,False,True,True,False,False,True,False,True,True,False,True,False,False,False,False,True,True,True,True,False,True,True,True,True,True,True,False,False,True,True,True,True,False,False,True,False,False,True,True,True,True,True,True,False,True,True,True,False,False,False,True,True,True,False,True,False,True,True,True,False,False,False,False,False,False,True,False,False,True,False,True,False,True,True,False,False,False,False,True,True,False,False,False,False,False,True,False,False,True,True,False,True,True,False,False,False,False,False,False,True,False,False,True,True,True,False,False,True,False,True,False,False,True,True,False,True,False,True,True,True,False,False,True,False,False,True,False,False,True,False,True,False,False,True,True,True,True,True,True,True,False,True,True,True,False,False,True,True,True,False,False,True,False,True,True,True,False,True,True,False,False,True,False,False,False,True,False,True,True,True,False,True,False,True,True,True,True,False,False,False,False,False,False,True,False,True,False,False,True,True,False,True,False,False,True,False,False,True,True,True,False,True,False,True,True,True,False,False,True,False,True,False,False,True,True,False,False,True,True,True,False,True,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,True,False,False,True,True,False,True,False,True,False,False,False,True,False,True,False,False,False,False,False,True,False,False,False,True,False,True,True,True,False,False,False,False,False,True,True,True,False,True,False,False,False,True,True,False,False,False,False,False,False,True,True,True,True,False,False,True,True,True,False,True,True,False,False,False,True,True,True,True,True,True,False,True,False,True,True,False,True,True,False,False,False,False,True,True,False,True,False,True,True,False,False,False,False,False,False,True,False,True,True,True,True,True,False,True,False,True,False,False,False,False,False,True,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,False,False,False,True,True,True,True,False,False,False,False,False,True,True,False,False,True,True,False,False,True,True,True,True,True,True,True,True,False,True,False,False,True,True,False,False,False,True,True,False,False,True,False,True,False,False,True,False,True,True,False,True,True,True,False,False,True,True,True,True,False,True,True,False,False,True,False,True,True,True,True,True,True,False,False,True,False,True,True,False,False,True,True,True,True,True,True,False,False,False,True,False,False,False,False,False,False,True,True,True,False,True,False,True,True,False,True,True,True,False,True,True,False,False,True,True,True,False,True,True,True,False,False,True,False,False,True,False,True,True,True,False,False,True,True,True,True,False,False,False,True,False,False,True,False,True,False,False,True,True,True,False,True,True,True,True,False,True,False,True,False,True,True,False,True,True,True,False,True,True,True,False,True,True,True,False,False,True,False,True,False,True,False,True,True,True,True,True,False,True,False,False,False,False,False,True,True,True,False,False,True,True,True,False,False,False,False,False,False,False,True,False,False,True,False,True,True,True,False,True,False,False,False,False,False,False,False,True,False,False,False,True,True,True], dtype = "bool")#candidate|3917|(2352,)|const|bool
call_3916 = func_1145_call(relay.reshape(const_3917.astype('bool'), [14, 14, 12]))
call_3918 = func_1145_call(relay.reshape(const_3917.astype('bool'), [14, 14, 12]))
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_3921 = relay.TupleGetItem(func_811_call(), 1)
call_3922 = relay.TupleGetItem(func_813_call(), 1)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_3923 = relay.TupleGetItem(func_1733_call(), 0)
call_3924 = relay.TupleGetItem(func_1735_call(), 0)
func_1128_call = mod.get_global_var('func_1128')
func_1131_call = mutated_mod.get_global_var('func_1131')
call_3928 = func_1128_call(relay.reshape(call_3923.astype('int16'), [15, 5, 15]))
call_3929 = func_1128_call(relay.reshape(call_3923.astype('int16'), [15, 5, 15]))
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_3935 = relay.TupleGetItem(func_1733_call(), 0)
call_3936 = relay.TupleGetItem(func_1735_call(), 0)
output = relay.Tuple([call_3896,call_3916,const_3917,call_3921,call_3923,call_3928,call_3935,])
output2 = relay.Tuple([call_3897,call_3918,const_3917,call_3922,call_3924,call_3929,call_3936,])
func_3962 = relay.Function([], output)
mod['func_3962'] = func_3962
mod = relay.transform.InferType()(mod)
output = func_3962()
func_3963 = relay.Function([], output)
mutated_mod['func_3963'] = func_3963
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3971 = relay.var("var_3971", dtype = "float64", shape = (12, 5, 11))#candidate|3971|(12, 5, 11)|var|float64
uop_3972 = relay.atanh(var_3971.astype('float64')) # shape=(12, 5, 11)
output = relay.Tuple([uop_3972,])
output2 = relay.Tuple([uop_3972,])
func_3977 = relay.Function([var_3971,], output)
mod['func_3977'] = func_3977
mod = relay.transform.InferType()(mod)
mutated_mod['func_3977'] = func_3977
mutated_mod = relay.transform.InferType()(mutated_mod)
var_3978 = relay.var("var_3978", dtype = "float64", shape = (12, 5, 11))#candidate|3978|(12, 5, 11)|var|float64
func_3977_call = mutated_mod.get_global_var('func_3977')
call_3979 = func_3977_call(var_3978)
output = call_3979
func_3980 = relay.Function([var_3978], output)
mutated_mod['func_3980'] = func_3980
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_4024 = relay.TupleGetItem(func_1733_call(), 0)
call_4025 = relay.TupleGetItem(func_1735_call(), 0)
output = relay.Tuple([call_4024,])
output2 = relay.Tuple([call_4025,])
func_4032 = relay.Function([], output)
mod['func_4032'] = func_4032
mod = relay.transform.InferType()(mod)
mutated_mod['func_4032'] = func_4032
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4032_call = mutated_mod.get_global_var('func_4032')
call_4033 = func_4032_call()
output = call_4033
func_4034 = relay.Function([], output)
mutated_mod['func_4034'] = func_4034
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3293_call = mod.get_global_var('func_3293')
func_3295_call = mutated_mod.get_global_var('func_3295')
call_4084 = relay.TupleGetItem(func_3293_call(), 3)
call_4085 = relay.TupleGetItem(func_3295_call(), 3)
func_2812_call = mod.get_global_var('func_2812')
func_2813_call = mutated_mod.get_global_var('func_2813')
call_4092 = relay.TupleGetItem(func_2812_call(), 0)
call_4093 = relay.TupleGetItem(func_2813_call(), 0)
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_4094 = relay.TupleGetItem(func_1374_call(), 0)
call_4095 = relay.TupleGetItem(func_1375_call(), 0)
output = relay.Tuple([call_4084,call_4092,call_4094,])
output2 = relay.Tuple([call_4085,call_4093,call_4095,])
func_4107 = relay.Function([], output)
mod['func_4107'] = func_4107
mod = relay.transform.InferType()(mod)
output = func_4107()
func_4108 = relay.Function([], output)
mutated_mod['func_4108'] = func_4108
mutated_mod = relay.transform.InferType()(mutated_mod)
func_992_call = mod.get_global_var('func_992')
func_994_call = mutated_mod.get_global_var('func_994')
call_4204 = func_992_call()
call_4205 = func_992_call()
func_1955_call = mod.get_global_var('func_1955')
func_1958_call = mutated_mod.get_global_var('func_1958')
const_4209 = relay.const([9.725533,0.988968,3.192415,8.896336,0.089225,-9.710157,-7.084138,2.290776,-5.275657,7.011980,5.139482,7.725262,-7.110380,-0.955397,2.416595,6.815700,-6.371682,7.475475,4.034138,-1.417262,-4.981811,9.551750,2.088315,7.327317,-0.617670,4.765266,9.573577,5.695723,-4.463427,-7.171878,-1.942817,-2.832037,-9.734883,-2.828180,-8.189028,-2.652672,0.362304,9.345479,-8.091598,3.205068,3.029154,-5.919779,6.718989,-3.747495,0.412201,-8.208901,-8.412882,6.038562,-1.898252,-0.923993,-6.993351,-5.750613,9.541385,-6.649566,-8.199345,-8.465368,7.751078,6.348326,-7.908973,-8.745245,-5.533008,9.889035,5.676057,1.277640,5.091806,-1.724247,-2.733875,8.467624,-8.401593,9.931578,7.191643,-8.191878,1.730477,-2.009104,1.814230,8.400648,8.336527,8.002262,7.507263,-2.173938,-4.940300,1.827740,5.019950,-4.706587,-1.240967,4.875710,4.634678,-3.133282,9.277151,5.893131,6.400476,-7.405227,1.963951,3.192524,-0.230273,1.832557,-1.233861,7.386319,-4.707624,8.657365,7.998537,-1.910754,-9.024951,0.912203,4.676260,5.498203,-0.206363,9.815185,1.995655,-4.302366,3.633172,-2.741577,-5.590967,8.870064,-0.129115,-8.457640,8.608385,-8.330755,9.326814,5.920371,-6.893305,-2.472368,-4.398739,5.759595,-1.317553,2.752137,1.216083,-3.696939,4.243136,-2.942697,-2.613492,-1.321043,-5.375050,-8.624214,-0.152317,-0.040953,-1.700771,2.903494,5.735472,-8.082594,1.628669,4.496693,7.627812,-3.951664,9.734045,-3.482728,5.318417,-5.790672,-0.302587,-8.028916,-6.888989,1.107814,1.026583,-2.442696,6.159609,-1.681940,-2.471394,-7.691562,9.884035,3.081624,8.802392,3.860206,-4.477592,-9.574721,-3.668582,4.647818,-3.214791,3.226489,-3.543110,-9.970807,-6.346508,-7.455438,-7.092944,-1.519064,3.955725,-4.060417,-6.893187,-1.999277,0.413214,6.674317,4.917664,5.665258,9.784269,7.505653,-9.764592,-5.466959,-5.278475,9.950012,6.268696,0.072980,2.658128,6.741058,7.411475,-4.121680,3.066885,-1.751202,5.385411,-7.208116,-2.253089,-3.636967,5.193148,6.207615,3.509412,-5.091068,-2.526885,5.062075,8.700483,5.976573,-1.173438,-9.954698,9.995501,-2.474260,-7.807741,-9.853231,-9.286595,7.918332,3.987793,-5.849997,6.798819,8.782905,-0.738913,-1.701547,7.986772,-3.497602,1.381438,1.811025,5.426712,1.184595,-4.106744,-2.714868,-2.419323,-5.796700,-0.146177,-0.208862,7.612231,6.841686,1.791760,-0.499987,-7.681103,-7.547509,6.927848,-3.410131,-3.371711,-2.988537,6.077451,0.077347,-3.797446,7.522509,-5.159350,-7.838943,2.233168,8.366618,3.211780,-5.318297,-2.601857,-1.991690,-3.394719,-8.595408,-0.104823,-8.441729,6.386406,-3.009101,5.064727,-9.345787,6.945444,-6.146035,3.053351,6.056555,7.489673,-7.778842,4.775795,4.705206,1.422293,-6.372121,-0.848148,-1.235462,-7.448915,6.317134,-5.825976,-5.130926,-8.747091,3.090215,-4.811431,4.720994,-0.242663,-4.272560,-3.207282,0.122305,8.060261,9.412372,-9.323473,-2.677723,-8.127458,8.075962,4.465621,8.537330,-0.522724,4.231652,7.952201,-6.325377,-9.837381,5.639805,-1.774758,5.545120,-8.838819,6.447059,-6.213655,-8.163452,2.771696,3.423200,9.064255,-8.330428,5.371895,-2.551342,-7.876698,-3.955808,9.247076,1.192544,0.286411,-0.951184,-0.304604,-2.850941,7.695991,4.748395,-5.022568,8.320275,1.686911,0.070719,-6.246893,-6.855628,-4.226251,1.229560,-3.743938,4.950676,6.436826,-1.326805,2.047897,-2.555945,4.554368,9.466031,4.264474,2.025344,7.368837,6.326755,-6.482232,-6.349686,1.862913,9.926024,6.347946,6.248654,-7.934760,-2.226542,-1.840005,-4.507511,-9.159833,-8.153575,-1.560473,9.654707,-9.546226,0.022255,-2.646858,-1.619988,-1.227946,2.671762,-9.386036,-9.487133,-3.845673,4.139464,-6.143766,-2.869958,3.614125,-0.979675,-0.858113,7.099159,-5.827018,-8.896387,6.541735,-1.988772,-3.433338,2.236135,-8.374615,3.566264,-2.606086,-4.289122,-9.060766,4.919951,2.813250,4.016580,2.775145,-2.650688,-9.548362,-1.465686,2.690654,3.501190,7.889742,2.682424,-3.447148,-3.617674,4.388094,3.091520,-3.531475,1.444252,-8.262557,8.083259,-0.023795,-6.440275,-2.992177,-7.738427,6.597283,4.945925,-5.935914,5.201495,5.770463,4.107930,-3.940424,-4.639588,3.596357,-5.560839,5.294270,-8.603714,0.475903,-5.353876,4.884156,-4.597013,-1.280818,4.750401,-6.354697,6.999448,8.511633,-7.654706,-9.080057,-1.969440,-0.473955,3.390623,-3.050758,2.668680,-0.027078,-8.406133,-7.267241,8.589526,-0.146502,5.623133,2.691717,6.154384,8.995048,-0.858286,-9.322768,-8.323118,0.786856,-5.286751,3.805736,9.090931,7.589907,3.573785,-5.797805,-6.227662,-6.878172,4.190731,1.917103,-7.613545,-9.309712,-2.051841,2.290679,-7.728905,-2.023686,-3.215609,-3.640975,-1.440424,2.940318,-0.571995,-7.236358,8.332335,-9.941333,-1.792481,4.661343,1.820881,6.072669,-0.808556,-8.681396,1.047086,-0.316638,-2.240484,2.804525,-7.752320,-7.939887,4.643621,-0.400786,4.091228,8.603585,-3.583843,-4.104233,9.793116,8.985607,-4.123755,-1.526321,-4.507118,-0.224495,1.205227,4.137193,-5.719511,-1.164854,-9.688686,-7.864085,-9.060999,6.540111,-3.930459,-2.235078,5.725215,-7.566675,5.422793,3.694381,7.761390,-4.308204,-3.800604,-2.575499,9.026981,-6.621586,6.796591,-1.760301,-7.159231,-1.005961,8.230086,-6.000532,-9.807529,0.619063,4.088911,-7.148681,-5.924817,-6.375949,-3.246858,6.059820,8.556440,-5.492572,3.310137,-5.077335,-3.520493,-3.647392,6.994625,8.017508,1.042974,6.582510,0.376764,7.086010,-3.363593,-9.094662,2.337331,9.452029,7.536514,7.249332,-5.185391,6.776163,4.717091,-8.078310,-6.545629,-7.766548,-0.539248,6.823227,3.876824,6.607798,-7.768521,9.476238,-6.025289,-1.182451,-9.551758,-3.628197,-0.528400,4.618995,9.639022,-7.669625,0.415664,-8.056736,7.150473,-2.120615,-9.987957,-3.340305,6.456744,-8.295499,-1.090901,-3.334297,9.629878,8.137221,-7.784187,9.402252,3.005402,2.776287,-8.355475,-6.770842,9.088192,6.047990,8.491023,-6.896468,9.984818,-8.611746,-4.743355,-5.593318,1.096982,2.288295,-4.087441,6.854662,-6.983062], dtype = "float32")#candidate|4209|(600,)|const|float32
call_4208 = relay.TupleGetItem(func_1955_call(relay.reshape(const_4209.astype('float32'), [12, 10, 5])), 0)
call_4210 = relay.TupleGetItem(func_1958_call(relay.reshape(const_4209.astype('float32'), [12, 10, 5])), 0)
func_2760_call = mod.get_global_var('func_2760')
func_2763_call = mutated_mod.get_global_var('func_2763')
const_4214 = relay.const([[6.690834,9.014444,0.323109,2.532777,2.284190,3.751473,9.117571,-8.395798,-5.721410,-8.240844,-0.634499,-1.887766,3.848892,9.248570,4.324917,3.868217,-1.723292,3.458793,-6.814505,0.272068,-1.106669,-7.639039,-5.166475,-8.545248,-4.025991,-5.953651,8.808029,-4.213598,8.906931,-7.026772,-4.059653,4.049854,9.503378,-6.846371,7.636059,4.725988,-0.570022,4.880279,2.216380,2.804644,-5.218972,-0.343951,-1.134037,-0.058714,-1.031581,9.419570,3.924729,-7.466966,8.790407,-2.292060,-3.245845,-9.118990,4.202981,5.909947,8.010441,5.014056,5.570685,-6.122052,-2.126354,1.313484,1.570660,1.601102,2.794980,3.095693,-1.556124,4.657033,-9.548874,-0.571500,3.756120,-9.294856,-9.578191,-5.631954,0.091101,-2.420471,6.580635,7.867745,-8.418779,8.822647,-5.089146,-9.674641,9.136876,2.452591,3.010539,7.233922,-4.521065,0.507579,0.934960,-0.977156,-8.799436,-9.085659,-5.844267,4.454402,-3.870174,-8.268820,6.429950,-8.012952,-6.657547,-6.316298,4.662875,-6.044707,0.059856,-9.283591,8.579123,-4.443655,9.626263,7.005629,-1.006031,-4.226996,-7.531467,9.394120,2.899216,-9.743085,7.990869,1.285750,-4.909574,-5.450331,-4.835810,1.403064,1.015437,5.944413,-8.023023,-5.459959,1.213135,-2.037604,4.276343,-8.560849,5.659623,-7.605374,2.153464,7.165114,5.997418,-4.842366,-1.287164,5.307013,5.800487,5.023475,-8.578995,-1.446961,-0.794228,2.248416,-7.327348,2.663368,-8.248135,-0.735912,2.602643,2.819347,-8.203947,-6.994987,9.274044,-4.589117,2.889805,7.809180,-0.095529,6.130102,-6.872416,-6.017785,-8.877399,-1.814437,-3.628177,9.471806,-8.887093,-6.202083,-1.020667,3.388703,3.535104,-7.058069,4.045386,-9.346474,1.107948,2.811193,-6.541925,-9.413398,7.987928,7.585719,0.630491,3.846934,2.031520,-8.117389,8.620611,-9.106638,-2.396360,0.370172,-5.800698,0.997698,4.456474,4.864950,-8.430106,0.766712,-5.678881,3.870696,7.563284,1.426642,5.806581,-5.877535,4.994977,8.288318,1.218125,-1.040030,-2.422692,6.496761,-7.170736,5.035716,-2.356120,-6.634127,6.292382,-6.372178,-9.455910,9.114366,-4.965770,-6.447345,-1.027749,2.218152,-9.800281,5.267218,6.598263,9.879818,1.341383,-0.790116,2.818123,-4.656633,2.697142,3.459220,-9.046861,8.495348,-2.174890,4.891911,5.391610,-5.367143,-8.733837,-7.420222,-5.478714,8.303914,-6.800469,3.988399,-6.455647,-4.159047,-0.743921,0.508390,-5.116640,1.259961,7.512282,-7.712689,3.793398,-1.524538,-4.247616,8.574649,-5.096193,3.048373,7.446845,-2.460967,-4.872520,3.669206,-1.109856,-2.378552,3.118714,9.011979,-2.377657,5.865914,-7.420938,6.195349,-8.254637,6.497732,8.436385,2.184948,0.709871,-2.288561,-3.171150,6.880436,-0.450163,9.743386,2.013950,-8.543751,-0.587241,-8.098434,-9.650404,-4.183285,-0.167583,2.330478,-1.108634,-0.561537,4.531604,8.980271,-7.851470,-7.179173,-7.609908,-9.735019,8.108662,7.086786,-4.013026,-8.389853,7.811059,0.530715,1.271045,0.721323,8.343902,9.762261,-7.378074,-6.974817,8.056978,-3.824538,8.768132,-1.228578,9.777703,-2.944352,1.129816,-5.684678,6.006113,-5.454905,9.987334,-6.817404,-4.494790,8.190825,5.443878,3.988316,-8.812955,-8.070366,4.499836,-5.898926,5.713907,-5.089717,-9.117591,0.949615,6.249055,-2.658768,-9.672785,5.217646,-9.501284,0.626760,7.401663,9.631570,-0.027525,8.922967,-6.489746,3.377277,-9.075038,-8.063472,-2.387162,0.178633,4.126128,-0.688035,-7.536488,-4.838576,-5.993124,-5.537949,6.754546,-7.267947,-6.171377,6.220320,4.651619,-2.526660,-7.583674,-6.682781,-5.845747,-1.954794,5.235724,4.127851,8.259061,2.190848,-2.674139,4.500710,3.734946,0.207449,4.270411,-4.849989,0.709933,-8.723819,3.154355,0.634777,-0.980903,4.853335,-3.330382,-6.481031,2.095966,-1.260847,8.875440,9.612884,2.693782,-7.483629,8.661516,3.665560,0.570493,-8.407520,6.436965,3.570242,-3.530692,3.298640,7.581390,-1.074704,6.888226,-7.296488,-2.094324,2.273480,7.009288,-2.877656,-9.647566,8.622705,8.984313,-4.361231,9.457271,7.202145,6.703146,1.717389,-7.695183,7.846329,-5.900974,-4.351983,9.031007,-5.248517,-0.012946,5.180954,-6.560352,-6.566562,-0.776310,-1.606810,-0.452382,6.836100,4.555385,0.403682,-4.913076,9.050229,-2.436722,3.136635,-5.807278,-2.794272,-3.146951,3.470882,5.149843,5.447943,9.380312,2.572506,7.839891,5.649487,1.643048,-8.848789,3.414165,-1.560252,1.467250,5.860566,8.177288,-8.263455,2.937779,7.367726,-6.849819,-4.161184,-2.755340,3.315711,8.189989,-5.832270,5.713091,-6.871192,9.140121,4.362642,4.241704,-0.240653,-0.269010,-2.683530,-1.795725,-1.994164,-6.273949,-4.255142,1.058340,-4.295163,-8.256632,2.243557,8.993036,-8.471040,6.894661,-5.447226,-6.041306,6.779979,0.396870,-5.295423,3.138888,-5.985219,-1.602499,3.185439,2.894517,-1.879539,-3.185005,2.378986,0.378864,-7.977238,1.618989,5.327156,1.417405,5.765154,1.148513,0.890198,-7.781554,-5.569005,-4.405657,-7.294232,-3.563130,-9.349554,9.603320,-6.744401,1.732600,3.995287,9.197893,3.919563,2.373839,-9.372313,-1.815790,-7.416701,4.236335,9.933155,-2.918600,7.753458,-3.024822,9.479575,-3.851042,7.509862,7.072390,-9.847795,9.256997,4.891825,-5.780687,8.848773,5.158976,-5.957606,1.624840,5.396833,9.533519,-0.706677,-6.304905,3.915607,5.464520,-5.011631,1.927384,-0.491724,-1.932864,-5.554959,7.566782,-7.476956,7.764018,1.487694,-1.625175,-5.962998,-3.286342,-2.502993,-5.539885,5.288661,-9.405304,-6.014756,-1.490584,-5.816340,7.034893,-3.199013,6.459090,5.891420,3.759886,9.862435,7.585024,6.550480,-0.176092,-8.464865,-9.008305,-1.578194,-7.137998,-2.414512,5.159960,2.286208,1.213960,1.406696,-0.673137,8.852201,-3.210547,-4.411757,-3.224381,2.022671,4.532798,-5.891290,7.265263,-2.092226,0.711187,-3.109913,7.290629,5.370051,1.374761,5.834604,-9.897024,9.513181,4.507632,-6.420997,-7.383520,-0.871942,-6.033007,6.641744,-9.870088,9.771042,-8.206247,-4.189263,1.253458,6.993240,0.153776,2.181335,0.864125,-2.253544,-7.892107,3.297550,-7.960717,-6.165491,-4.728452,-5.274789,1.537100,-8.915288,6.736344,7.180210,9.301522,-6.092766,-5.388600,-2.706624,-5.867525,-8.271731,5.513044,4.587403,-5.260517,-8.460863,3.147957,7.036365,-3.203816,5.099181,-4.554338,7.298482,3.230505,-4.383175,3.841475,2.914865,5.699143,-3.444550,2.318488,-9.465423,8.664132,-5.543519,5.992626,3.557839,-8.064877,-4.071047,9.941325,-7.457433,1.318595,-0.600930,5.679301,-7.876411,-4.463043,4.770850,9.878967,1.879454,9.158273,7.943613,6.169267,-1.334106,2.302572,-5.028852,-1.137194,2.571856,-3.462589,-3.590353,-0.022590,-8.245254,8.615642,-6.235884,-2.450603,9.335072,-6.666594,-0.138637,4.011292,0.758452,9.536606,-8.172100,-6.322480,3.009201,8.377212,-9.721160,1.749128,-5.735260,-2.568859,5.984030,-6.367913,-5.793435,1.038615,-6.919764,-1.980368,-2.817035,-0.133332,2.231289,-1.556031,0.984317,4.947289,3.352589,-5.035850,9.062665,8.764855,9.649450,-5.159828,-5.112405,8.756753,-2.189514,-6.887217,8.512782,3.242342,6.673178,-5.738526,-3.253601,-1.728935,-5.297781,4.197064,0.532803,-7.122554,6.879254,9.114021,-7.555834,-9.180319,-8.892078,0.062968,5.098087,-5.295752,7.980073,0.664888,-5.973188,2.906032,3.127993,6.450228,2.014093,1.347019,-0.159745,-4.986792,3.187792,8.772659,1.318155,-5.968280,-5.130090,9.708422,3.622496,4.792052,-9.504733,-1.266261,3.723102,2.460079,4.515296,3.309532,7.644359,-8.310618,9.653923,-2.360239,5.113846,4.770979,7.858626,9.517412,-2.808329,4.154482,7.321136,-7.770790,1.378516,-7.178588,-7.259246,-5.498997,7.522495,8.178775,-2.019599,-0.576323,-8.063135,1.955507,-4.641565,-6.061158,3.334117,-2.849707,6.385918,-4.774371,-9.534342,2.061060,-9.016392,-0.480853,-1.565626,-4.840372,7.399678,-0.646091,5.869355,4.905056,-8.896140,-6.870607,0.677757,3.652956,3.694887,5.293608,-7.369347,-3.849734,-6.565218,-1.242190,-9.522912,-0.222587,9.892990,3.258551,-6.382887,2.725546,-7.214320,2.317666,-1.846255,-9.164308,-8.574105,1.356314,-0.411180,8.027954,-0.819032,-4.346838,3.876101,-3.367561,7.347037,8.584803,-2.746094,5.702776,-0.039585,7.319449,3.143480,-6.723433,0.786662,-1.602108,4.005816,5.830112,6.459432,6.134405,-3.721220,-8.291429,3.431229,4.953984,-2.988335,3.171839,9.620919,4.466961,-1.864395,-8.509009,8.405507,-2.842367,2.655046,-5.465408,9.329794,1.599800,4.008827,0.349541,8.820522,-7.742522,0.374696,-0.518819,-4.732044,0.414264,3.114333,1.785869,-8.711177,1.762562,8.581317,3.796453,7.814072,-2.991132,-2.071349,-7.520905,-1.968202,1.608002,-9.327757,0.189951,0.310892,2.254942,-1.389243,6.394926,-2.376720,-7.282578,-4.114993,-9.290394,-0.874918,-3.332323,2.913773,-6.379059,2.954314,8.952786,7.118841,8.286724,-0.501874,3.993933,7.838366,1.586909,-2.137943,0.528053,0.081166,-5.218981,-3.291487,-5.389743,7.604984,7.838715,-8.107992,-8.270220,4.114462,-4.848100,9.990186,3.473199,-3.363705,-6.981882,-7.285036,0.777040,-4.607372,-8.138022,-2.873392,-1.780386,3.009938,7.895557,-7.012438,-9.105600,0.940519,9.890116,-1.259560,9.445390,-4.565777,7.920206,6.984571,-8.820906,1.289798,-3.419579,-8.962793,1.369507,-0.386984,7.703715,4.271309,8.328948,2.166511,5.459801,0.225419,-3.354425,-2.054081,-1.715526,1.171241,9.620477,9.866491,-3.391702,-5.173282,-6.913272,-1.235736,-2.366649,1.249778,-1.621409,-7.827055,-8.166073,-9.905755,6.861633,9.555222,-1.048453,5.294242,7.835123,7.865083,-8.285914,9.824686,3.267578,-1.397883,5.236507,0.956117,-5.156697,1.833990,2.120388,-8.664998,2.746285,-2.795041,-0.132570,5.477502,5.506111,7.410618,0.385661,-2.280485,3.089262,-7.937997,-5.363745,-0.321007,5.257238,7.081387,-4.629140,-6.402258,3.296143,6.208872,-2.839938,8.214372,-1.307435,2.124691,-3.829097,-5.554871,-3.552774,-8.028311,-3.605414,-1.405600,7.842918,-3.964785,0.283149,9.792491,5.483935,-2.802230,0.356587,4.806391,-5.930435,8.253205,-7.847580,-3.804594,-5.665068,9.658405,-7.833641,6.030719,-1.212101,7.718341,-3.597263,-5.089633,2.666911,0.241748,9.669261,-9.520217,1.545294,-2.233037,6.672681,-4.713193,8.689647,-9.709542,4.731246,1.852264,1.712497,2.148053,4.343031,-8.177148,-6.261560,-6.829015,-4.187427,-8.289496,-2.525841,-5.155833,1.420817,-3.552106,-8.787886,-1.199383,-4.044329,0.083343,-1.276182,8.842579,1.381093,5.444992,1.347975,0.625724,-3.555463,7.517903,-8.500467,0.862101,-9.580817,-9.230150,-4.906112,5.173419,3.096957,0.075144,4.552948,0.532700,-6.580252,4.301598,-1.790685,7.086786,-4.712516,-0.724656,-1.963900,-4.104562,8.819886,-3.696104,-1.354214,-3.056926,-0.226209,7.218914,-3.833703,-0.112616,9.714377,-3.492590,-7.854575,5.656363,-9.741145,8.032149,1.027159,6.581552,8.892809,-9.927047,4.595768,5.371874,-4.276774,-7.285988,9.238421,7.060859,-5.593582,8.858478,-8.104239,2.989394,-4.782318,2.134145,-3.228783,-2.989020,-4.162687,8.344711,8.472259,-6.285886,-7.708051,-9.348613,4.308578,-5.744982,2.100543,4.447072,-6.717625,-5.950829,0.741646,-0.962658,-5.134248,4.421196,-1.678958,7.223635,6.770744,0.368015,-5.342385,-2.121631,-6.872035,9.664449,-2.751392,1.792102,9.019084,5.877640,1.964449,-2.103344,-2.745721,1.309038,5.037550,-2.212474,-9.235137]], dtype = "float64")#candidate|4214|(1, 1125)|const|float64
call_4213 = relay.TupleGetItem(func_2760_call(relay.reshape(const_4214.astype('float64'), [5, 225]), relay.reshape(const_4214.astype('float64'), [5, 225]), ), 1)
call_4215 = relay.TupleGetItem(func_2763_call(relay.reshape(const_4214.astype('float64'), [5, 225]), relay.reshape(const_4214.astype('float64'), [5, 225]), ), 1)
output = relay.Tuple([call_4204,call_4208,const_4209,call_4213,const_4214,])
output2 = relay.Tuple([call_4205,call_4210,const_4209,call_4215,const_4214,])
func_4217 = relay.Function([], output)
mod['func_4217'] = func_4217
mod = relay.transform.InferType()(mod)
output = func_4217()
func_4218 = relay.Function([], output)
mutated_mod['func_4218'] = func_4218
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_4227 = relay.TupleGetItem(func_1733_call(), 0)
call_4228 = relay.TupleGetItem(func_1735_call(), 0)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_4243 = relay.TupleGetItem(func_861_call(), 0)
call_4244 = relay.TupleGetItem(func_862_call(), 0)
func_3383_call = mod.get_global_var('func_3383')
func_3387_call = mutated_mod.get_global_var('func_3387')
var_4246 = relay.var("var_4246", dtype = "float32", shape = (8, 40))#candidate|4246|(8, 40)|var|float32
call_4245 = func_3383_call(relay.reshape(var_4246.astype('float32'), [5, 4, 16]), relay.reshape(var_4246.astype('float32'), [5, 4, 16]), )
call_4247 = func_3383_call(relay.reshape(var_4246.astype('float32'), [5, 4, 16]), relay.reshape(var_4246.astype('float32'), [5, 4, 16]), )
uop_4254 = relay.log(call_4227.astype('float64')) # shape=(15, 5, 15)
uop_4256 = relay.log(call_4228.astype('float64')) # shape=(15, 5, 15)
func_4032_call = mod.get_global_var('func_4032')
func_4034_call = mutated_mod.get_global_var('func_4034')
call_4257 = relay.TupleGetItem(func_4032_call(), 0)
call_4258 = relay.TupleGetItem(func_4034_call(), 0)
bop_4269 = relay.right_shift(call_4227.astype('int8'), relay.reshape(call_4243.astype('int8'), relay.shape_of(call_4227))) # shape=(15, 5, 15)
bop_4272 = relay.right_shift(call_4228.astype('int8'), relay.reshape(call_4244.astype('int8'), relay.shape_of(call_4228))) # shape=(15, 5, 15)
bop_4276 = relay.greater_equal(uop_4254.astype('bool'), relay.reshape(bop_4269.astype('bool'), relay.shape_of(uop_4254))) # shape=(15, 5, 15)
bop_4279 = relay.greater_equal(uop_4256.astype('bool'), relay.reshape(bop_4272.astype('bool'), relay.shape_of(uop_4256))) # shape=(15, 5, 15)
output = relay.Tuple([call_4245,var_4246,call_4257,bop_4276,])
output2 = relay.Tuple([call_4247,var_4246,call_4258,bop_4279,])
func_4300 = relay.Function([var_4246,], output)
mod['func_4300'] = func_4300
mod = relay.transform.InferType()(mod)
mutated_mod['func_4300'] = func_4300
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4301 = relay.var("var_4301", dtype = "float32", shape = (8, 40))#candidate|4301|(8, 40)|var|float32
func_4300_call = mutated_mod.get_global_var('func_4300')
call_4302 = func_4300_call(var_4301)
output = call_4302
func_4303 = relay.Function([var_4301], output)
mutated_mod['func_4303'] = func_4303
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2317_call = mod.get_global_var('func_2317')
func_2319_call = mutated_mod.get_global_var('func_2319')
call_4396 = relay.TupleGetItem(func_2317_call(), 0)
call_4397 = relay.TupleGetItem(func_2319_call(), 0)
uop_4417 = relay.atan(call_4396.astype('float64')) # shape=(12, 10, 5)
uop_4419 = relay.atan(call_4397.astype('float64')) # shape=(12, 10, 5)
func_3335_call = mod.get_global_var('func_3335')
func_3338_call = mutated_mod.get_global_var('func_3338')
var_4425 = relay.var("var_4425", dtype = "float32", shape = (1300, 1))#candidate|4425|(1300, 1)|var|float32
call_4424 = func_3335_call(relay.reshape(var_4425.astype('float32'), [10, 10, 13]), relay.reshape(var_4425.astype('float32'), [10, 10, 13]), )
call_4426 = func_3335_call(relay.reshape(var_4425.astype('float32'), [10, 10, 13]), relay.reshape(var_4425.astype('float32'), [10, 10, 13]), )
uop_4433 = relay.erf(var_4425.astype('float32')) # shape=(1300, 1)
func_511_call = mod.get_global_var('func_511')
func_512_call = mutated_mod.get_global_var('func_512')
call_4441 = func_511_call()
call_4442 = func_511_call()
output = relay.Tuple([uop_4417,call_4424,uop_4433,call_4441,])
output2 = relay.Tuple([uop_4419,call_4426,uop_4433,call_4442,])
func_4443 = relay.Function([var_4425,], output)
mod['func_4443'] = func_4443
mod = relay.transform.InferType()(mod)
var_4444 = relay.var("var_4444", dtype = "float32", shape = (1300, 1))#candidate|4444|(1300, 1)|var|float32
output = func_4443(var_4444)
func_4445 = relay.Function([var_4444], output)
mutated_mod['func_4445'] = func_4445
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2403_call = mod.get_global_var('func_2403')
func_2404_call = mutated_mod.get_global_var('func_2404')
call_4460 = func_2403_call()
call_4461 = func_2403_call()
output = relay.Tuple([call_4460,])
output2 = relay.Tuple([call_4461,])
func_4468 = relay.Function([], output)
mod['func_4468'] = func_4468
mod = relay.transform.InferType()(mod)
mutated_mod['func_4468'] = func_4468
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4468_call = mutated_mod.get_global_var('func_4468')
call_4469 = func_4468_call()
output = call_4469
func_4470 = relay.Function([], output)
mutated_mod['func_4470'] = func_4470
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4546 = relay.var("var_4546", dtype = "float32", shape = (16, 7, 16))#candidate|4546|(16, 7, 16)|var|float32
uop_4547 = relay.sinh(var_4546.astype('float32')) # shape=(16, 7, 16)
func_1005_call = mod.get_global_var('func_1005')
func_1007_call = mutated_mod.get_global_var('func_1007')
call_4554 = relay.TupleGetItem(func_1005_call(), 0)
call_4555 = relay.TupleGetItem(func_1007_call(), 0)
output = relay.Tuple([uop_4547,call_4554,])
output2 = relay.Tuple([uop_4547,call_4555,])
func_4569 = relay.Function([var_4546,], output)
mod['func_4569'] = func_4569
mod = relay.transform.InferType()(mod)
mutated_mod['func_4569'] = func_4569
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4570 = relay.var("var_4570", dtype = "float32", shape = (16, 7, 16))#candidate|4570|(16, 7, 16)|var|float32
func_4569_call = mutated_mod.get_global_var('func_4569')
call_4571 = func_4569_call(var_4570)
output = call_4571
func_4572 = relay.Function([var_4570], output)
mutated_mod['func_4572'] = func_4572
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1374_call = mod.get_global_var('func_1374')
func_1375_call = mutated_mod.get_global_var('func_1375')
call_4579 = relay.TupleGetItem(func_1374_call(), 0)
call_4580 = relay.TupleGetItem(func_1375_call(), 0)
func_2342_call = mod.get_global_var('func_2342')
func_2344_call = mutated_mod.get_global_var('func_2344')
call_4581 = relay.TupleGetItem(func_2342_call(), 0)
call_4582 = relay.TupleGetItem(func_2344_call(), 0)
output = relay.Tuple([call_4579,call_4581,])
output2 = relay.Tuple([call_4580,call_4582,])
func_4584 = relay.Function([], output)
mod['func_4584'] = func_4584
mod = relay.transform.InferType()(mod)
mutated_mod['func_4584'] = func_4584
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4584_call = mutated_mod.get_global_var('func_4584')
call_4585 = func_4584_call()
output = call_4585
func_4586 = relay.Function([], output)
mutated_mod['func_4586'] = func_4586
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1446_call = mod.get_global_var('func_1446')
func_1447_call = mutated_mod.get_global_var('func_1447')
call_4625 = func_1446_call()
call_4626 = func_1446_call()
func_3726_call = mod.get_global_var('func_3726')
func_3728_call = mutated_mod.get_global_var('func_3728')
call_4630 = relay.TupleGetItem(func_3726_call(), 2)
call_4631 = relay.TupleGetItem(func_3728_call(), 2)
output = relay.Tuple([call_4625,call_4630,])
output2 = relay.Tuple([call_4626,call_4631,])
func_4652 = relay.Function([], output)
mod['func_4652'] = func_4652
mod = relay.transform.InferType()(mod)
output = func_4652()
func_4653 = relay.Function([], output)
mutated_mod['func_4653'] = func_4653
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4693 = relay.var("var_4693", dtype = "float32", shape = (7, 7, 12))#candidate|4693|(7, 7, 12)|var|float32
var_4694 = relay.var("var_4694", dtype = "float32", shape = (7, 7, 12))#candidate|4694|(7, 7, 12)|var|float32
bop_4695 = relay.mod(var_4693.astype('float32'), relay.reshape(var_4694.astype('float32'), relay.shape_of(var_4693))) # shape=(7, 7, 12)
output = bop_4695
output2 = bop_4695
func_4700 = relay.Function([var_4693,var_4694,], output)
mod['func_4700'] = func_4700
mod = relay.transform.InferType()(mod)
mutated_mod['func_4700'] = func_4700
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4700_call = mutated_mod.get_global_var('func_4700')
var_4702 = relay.var("var_4702", dtype = "float32", shape = (7, 7, 12))#candidate|4702|(7, 7, 12)|var|float32
var_4703 = relay.var("var_4703", dtype = "float32", shape = (7, 7, 12))#candidate|4703|(7, 7, 12)|var|float32
call_4701 = func_4700_call(var_4702,var_4703,)
output = call_4701
func_4704 = relay.Function([var_4702,var_4703,], output)
mutated_mod['func_4704'] = func_4704
mutated_mod = relay.transform.InferType()(mutated_mod)
func_867_call = mod.get_global_var('func_867')
func_869_call = mutated_mod.get_global_var('func_869')
call_4743 = relay.TupleGetItem(func_867_call(), 0)
call_4744 = relay.TupleGetItem(func_869_call(), 0)
func_2317_call = mod.get_global_var('func_2317')
func_2319_call = mutated_mod.get_global_var('func_2319')
call_4745 = relay.TupleGetItem(func_2317_call(), 1)
call_4746 = relay.TupleGetItem(func_2319_call(), 1)
func_1184_call = mod.get_global_var('func_1184')
func_1185_call = mutated_mod.get_global_var('func_1185')
call_4770 = func_1184_call()
call_4771 = func_1184_call()
func_3335_call = mod.get_global_var('func_3335')
func_3338_call = mutated_mod.get_global_var('func_3338')
var_4810 = relay.var("var_4810", dtype = "float32", shape = (130, 10))#candidate|4810|(130, 10)|var|float32
call_4809 = func_3335_call(relay.reshape(var_4810.astype('float32'), [10, 10, 13]), relay.reshape(var_4810.astype('float32'), [10, 10, 13]), )
call_4811 = func_3335_call(relay.reshape(var_4810.astype('float32'), [10, 10, 13]), relay.reshape(var_4810.astype('float32'), [10, 10, 13]), )
output = relay.Tuple([call_4743,call_4745,call_4770,call_4809,var_4810,])
output2 = relay.Tuple([call_4744,call_4746,call_4771,call_4811,var_4810,])
func_4816 = relay.Function([var_4810,], output)
mod['func_4816'] = func_4816
mod = relay.transform.InferType()(mod)
var_4817 = relay.var("var_4817", dtype = "float32", shape = (130, 10))#candidate|4817|(130, 10)|var|float32
output = func_4816(var_4817)
func_4818 = relay.Function([var_4817], output)
mutated_mod['func_4818'] = func_4818
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3564_call = mod.get_global_var('func_3564')
func_3565_call = mutated_mod.get_global_var('func_3565')
call_4831 = relay.TupleGetItem(func_3564_call(), 0)
call_4832 = relay.TupleGetItem(func_3565_call(), 0)
func_4032_call = mod.get_global_var('func_4032')
func_4034_call = mutated_mod.get_global_var('func_4034')
call_4833 = relay.TupleGetItem(func_4032_call(), 0)
call_4834 = relay.TupleGetItem(func_4034_call(), 0)
uop_4847 = relay.cos(call_4831.astype('float64')) # shape=(8, 14, 8)
uop_4849 = relay.cos(call_4832.astype('float64')) # shape=(8, 14, 8)
uop_4859 = relay.atan(uop_4847.astype('float32')) # shape=(8, 14, 8)
uop_4861 = relay.atan(uop_4849.astype('float32')) # shape=(8, 14, 8)
output = relay.Tuple([call_4833,uop_4859,])
output2 = relay.Tuple([call_4834,uop_4861,])
func_4870 = relay.Function([], output)
mod['func_4870'] = func_4870
mod = relay.transform.InferType()(mod)
output = func_4870()
func_4871 = relay.Function([], output)
mutated_mod['func_4871'] = func_4871
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4870_call = mod.get_global_var('func_4870')
func_4871_call = mutated_mod.get_global_var('func_4871')
call_4890 = relay.TupleGetItem(func_4870_call(), 0)
call_4891 = relay.TupleGetItem(func_4871_call(), 0)
output = relay.Tuple([call_4890,])
output2 = relay.Tuple([call_4891,])
func_4903 = relay.Function([], output)
mod['func_4903'] = func_4903
mod = relay.transform.InferType()(mod)
mutated_mod['func_4903'] = func_4903
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4903_call = mutated_mod.get_global_var('func_4903')
call_4904 = func_4903_call()
output = call_4904
func_4905 = relay.Function([], output)
mutated_mod['func_4905'] = func_4905
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4652_call = mod.get_global_var('func_4652')
func_4653_call = mutated_mod.get_global_var('func_4653')
call_4908 = relay.TupleGetItem(func_4652_call(), 0)
call_4909 = relay.TupleGetItem(func_4653_call(), 0)
output = call_4908
output2 = call_4909
func_4922 = relay.Function([], output)
mod['func_4922'] = func_4922
mod = relay.transform.InferType()(mod)
output = func_4922()
func_4923 = relay.Function([], output)
mutated_mod['func_4923'] = func_4923
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4032_call = mod.get_global_var('func_4032')
func_4034_call = mutated_mod.get_global_var('func_4034')
call_4973 = relay.TupleGetItem(func_4032_call(), 0)
call_4974 = relay.TupleGetItem(func_4034_call(), 0)
output = call_4973
output2 = call_4974
func_4987 = relay.Function([], output)
mod['func_4987'] = func_4987
mod = relay.transform.InferType()(mod)
mutated_mod['func_4987'] = func_4987
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4987_call = mutated_mod.get_global_var('func_4987')
call_4988 = func_4987_call()
output = call_4988
func_4989 = relay.Function([], output)
mutated_mod['func_4989'] = func_4989
mutated_mod = relay.transform.InferType()(mutated_mod)
var_4993 = relay.var("var_4993", dtype = "float64", shape = (12, 12, 8))#candidate|4993|(12, 12, 8)|var|float64
uop_4994 = relay.tan(var_4993.astype('float64')) # shape=(12, 12, 8)
output = uop_4994
output2 = uop_4994
func_4999 = relay.Function([var_4993,], output)
mod['func_4999'] = func_4999
mod = relay.transform.InferType()(mod)
var_5000 = relay.var("var_5000", dtype = "float64", shape = (12, 12, 8))#candidate|5000|(12, 12, 8)|var|float64
output = func_4999(var_5000)
func_5001 = relay.Function([var_5000], output)
mutated_mod['func_5001'] = func_5001
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3962_call = mod.get_global_var('func_3962')
func_3963_call = mutated_mod.get_global_var('func_3963')
call_5009 = relay.TupleGetItem(func_3962_call(), 4)
call_5010 = relay.TupleGetItem(func_3963_call(), 4)
output = call_5009
output2 = call_5010
func_5024 = relay.Function([], output)
mod['func_5024'] = func_5024
mod = relay.transform.InferType()(mod)
output = func_5024()
func_5025 = relay.Function([], output)
mutated_mod['func_5025'] = func_5025
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1083_call = mod.get_global_var('func_1083')
func_1084_call = mutated_mod.get_global_var('func_1084')
call_5107 = relay.TupleGetItem(func_1083_call(), 0)
call_5108 = relay.TupleGetItem(func_1084_call(), 0)
output = relay.Tuple([call_5107,])
output2 = relay.Tuple([call_5108,])
func_5112 = relay.Function([], output)
mod['func_5112'] = func_5112
mod = relay.transform.InferType()(mod)
output = func_5112()
func_5113 = relay.Function([], output)
mutated_mod['func_5113'] = func_5113
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2317_call = mod.get_global_var('func_2317')
func_2319_call = mutated_mod.get_global_var('func_2319')
call_5130 = relay.TupleGetItem(func_2317_call(), 1)
call_5131 = relay.TupleGetItem(func_2319_call(), 1)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_5132 = relay.TupleGetItem(func_193_call(), 0)
call_5133 = relay.TupleGetItem(func_194_call(), 0)
output = relay.Tuple([call_5130,call_5132,])
output2 = relay.Tuple([call_5131,call_5133,])
func_5138 = relay.Function([], output)
mod['func_5138'] = func_5138
mod = relay.transform.InferType()(mod)
output = func_5138()
func_5139 = relay.Function([], output)
mutated_mod['func_5139'] = func_5139
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4032_call = mod.get_global_var('func_4032')
func_4034_call = mutated_mod.get_global_var('func_4034')
call_5168 = relay.TupleGetItem(func_4032_call(), 0)
call_5169 = relay.TupleGetItem(func_4034_call(), 0)
output = call_5168
output2 = call_5169
func_5174 = relay.Function([], output)
mod['func_5174'] = func_5174
mod = relay.transform.InferType()(mod)
mutated_mod['func_5174'] = func_5174
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5174_call = mutated_mod.get_global_var('func_5174')
call_5175 = func_5174_call()
output = call_5175
func_5176 = relay.Function([], output)
mutated_mod['func_5176'] = func_5176
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2403_call = mod.get_global_var('func_2403')
func_2404_call = mutated_mod.get_global_var('func_2404')
call_5190 = func_2403_call()
call_5191 = func_2403_call()
output = call_5190
output2 = call_5191
func_5197 = relay.Function([], output)
mod['func_5197'] = func_5197
mod = relay.transform.InferType()(mod)
output = func_5197()
func_5198 = relay.Function([], output)
mutated_mod['func_5198'] = func_5198
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3564_call = mod.get_global_var('func_3564')
func_3565_call = mutated_mod.get_global_var('func_3565')
call_5218 = relay.TupleGetItem(func_3564_call(), 3)
call_5219 = relay.TupleGetItem(func_3565_call(), 3)
output = relay.Tuple([call_5218,])
output2 = relay.Tuple([call_5219,])
func_5222 = relay.Function([], output)
mod['func_5222'] = func_5222
mod = relay.transform.InferType()(mod)
mutated_mod['func_5222'] = func_5222
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5222_call = mutated_mod.get_global_var('func_5222')
call_5223 = func_5222_call()
output = call_5223
func_5224 = relay.Function([], output)
mutated_mod['func_5224'] = func_5224
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1778_call = mod.get_global_var('func_1778')
func_1780_call = mutated_mod.get_global_var('func_1780')
call_5263 = relay.TupleGetItem(func_1778_call(), 0)
call_5264 = relay.TupleGetItem(func_1780_call(), 0)
output = relay.Tuple([call_5263,])
output2 = relay.Tuple([call_5264,])
func_5282 = relay.Function([], output)
mod['func_5282'] = func_5282
mod = relay.transform.InferType()(mod)
output = func_5282()
func_5283 = relay.Function([], output)
mutated_mod['func_5283'] = func_5283
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5292 = relay.var("var_5292", dtype = "float32", shape = (6, 10, 12))#candidate|5292|(6, 10, 12)|var|float32
uop_5293 = relay.cos(var_5292.astype('float32')) # shape=(6, 10, 12)
output = relay.Tuple([uop_5293,])
output2 = relay.Tuple([uop_5293,])
func_5304 = relay.Function([var_5292,], output)
mod['func_5304'] = func_5304
mod = relay.transform.InferType()(mod)
mutated_mod['func_5304'] = func_5304
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5305 = relay.var("var_5305", dtype = "float32", shape = (6, 10, 12))#candidate|5305|(6, 10, 12)|var|float32
func_5304_call = mutated_mod.get_global_var('func_5304')
call_5306 = func_5304_call(var_5305)
output = call_5306
func_5307 = relay.Function([var_5305], output)
mutated_mod['func_5307'] = func_5307
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3428_call = mod.get_global_var('func_3428')
func_3430_call = mutated_mod.get_global_var('func_3430')
call_5369 = relay.TupleGetItem(func_3428_call(), 0)
call_5370 = relay.TupleGetItem(func_3430_call(), 0)
func_3564_call = mod.get_global_var('func_3564')
func_3565_call = mutated_mod.get_global_var('func_3565')
call_5377 = relay.TupleGetItem(func_3564_call(), 5)
call_5378 = relay.TupleGetItem(func_3565_call(), 5)
func_3672_call = mod.get_global_var('func_3672')
func_3674_call = mutated_mod.get_global_var('func_3674')
call_5385 = relay.TupleGetItem(func_3672_call(relay.reshape(call_5369.astype('float32'), [600,])), 1)
call_5386 = relay.TupleGetItem(func_3674_call(relay.reshape(call_5369.astype('float32'), [600,])), 1)
func_2154_call = mod.get_global_var('func_2154')
func_2157_call = mutated_mod.get_global_var('func_2157')
const_5395 = relay.const([1.907632,8.163831,9.249696,-3.083649,0.609702,0.995199,-4.416994,-1.573922,-8.581183,-7.896413,-6.417399,-4.092650,1.199009,7.288588,8.365978,7.467949,-8.845879,-3.089152,9.020254,5.460661,6.044299,6.237886,6.669569,-9.792617,-0.988651,3.395591,5.870665,8.966547,-3.126221,-4.891333,-4.388528,6.607957,-6.800182,0.177928,-5.888727,4.673181,8.849954,8.170187,-1.156842,-7.541153,-4.573609,4.386065,1.294837,-1.035361,2.036460,7.437019,4.446884,-3.069048,-8.000912,7.136997,5.148103,0.814439,6.366175,2.897538,-8.781097,-4.810311,-3.742095,7.946796,1.654374,5.096239,-0.110081,-3.018000,6.242273,3.220436,-9.720404,1.337833,7.636927,-9.295385,3.224380,-1.151582,-5.162464,0.415290,-4.805840,-5.047347,-4.358046,0.266324,9.169659,-8.739826,-8.542041,-6.569332,-6.698529,-8.334771,-8.188611,2.746971,7.605139,-4.686562,-4.220011,-3.313112,-8.751952,-5.992553,-7.510428,0.851340,-0.591477,3.354268,6.899192,0.578298,2.001314,-1.125824,4.243652,4.889338,9.103765,-1.004604,9.466542,7.461797,5.864624,7.294360,8.828909,6.706864,-6.182104,-8.817743,6.781343,-0.653810,-4.080049,-9.686347,-9.179219,-0.141369,0.194537,8.576761,2.776595,-2.597064,9.611723,-2.696685,-0.360176,-5.328408,-5.387446,2.149797,-5.370400,-4.104082,-7.807240,-9.710640,4.950032,-3.640922,0.612848,5.575243,-5.720766,-3.418952,7.562958,-7.021625,-9.805643,2.703021,-2.611605,-9.356454,-0.132295,6.296624,-9.241853,8.845130,-5.135054,-7.239095,6.644675,-0.921571,-8.745074,7.444936,0.553419,8.772698,-2.361276,7.681315,0.418066,-8.069315,-5.791043,-9.475872,4.785371,-8.700759,-1.274286,-2.255007,2.354829,5.069612,8.951172,8.924301,1.623318,-3.418126,6.998115,-5.286920,-7.035242,-3.134376,-9.631546,1.435198,-5.189722,7.158054,-4.349657,7.893947,-4.992348,8.213241,6.451405,-1.394808,-9.045637,4.689448,-3.179644,-6.899593,-6.260975,-3.433853,-1.780988,-3.775335,4.568281,9.236711,3.986951,9.840116,2.825111,3.401515,-6.201397,6.142209,5.270265,-5.534057,-5.951358,-5.785955,-1.215809,5.238755,-9.357829,8.775670,7.025954,3.505499,5.259091,-6.722986,-8.718593,-6.154052,-5.592848,8.367613,-1.980272,6.063864,-7.455620,5.224953,-5.100203,4.882880,-2.152660,6.870121,1.681231,7.667729,8.984263,-2.159878,3.563420,-2.841263,-3.788328,0.721228,-4.028113,-9.950838,-8.577703,2.946213,-4.555867,9.562060,0.848483,8.372253,-3.677926,-7.336902,-5.835382,0.707036,8.377240,5.749502,5.940229,-7.380254,-2.978031,-2.479920,-8.851196,7.041091,1.285817,4.558157,0.773115,3.303252,6.588207,-3.116104,-7.365944,-0.439866,5.235864,-7.168515,-5.815444,-2.688104,0.484548,-7.123363,-9.495952,-6.271444,-2.113782,2.999088,-0.048064,0.783678,-0.334720,-6.070986,9.156073,-4.551145,-0.789168,6.723879,8.755807,3.876666,0.348242,-9.395544,-4.090163,7.705473,-3.989882,-1.716205,3.698155,2.829670,5.206137,9.197027,-9.297236,-7.297368,-5.997375,1.270837,7.656921,-0.269131,-3.535275,8.572966,9.043929,-6.950085,0.416433,0.078738,-4.514981,-8.778831,-4.523040,7.676969,3.128127,4.268104,1.623874,6.475435,-4.711116,2.618050,-0.936735,1.858621,6.441880,6.743118,-8.051348,-6.776335,1.791668,4.784497,-9.949426,-0.370261,-2.627143,1.493773,4.161056,-1.845588,-2.002620,-1.656124,-6.176197,-3.360991,1.343365,-7.509690,-1.731431,9.901178,2.857657,1.012227,0.754456,3.869847,-3.697271,0.198922,2.395957,6.255908,-8.104804,-1.597734,7.253690,-3.639086,5.479284,-6.565523,5.040270,4.942113,-3.189007,-8.162000,9.669230,4.305640,-4.522964,6.819426,2.572277,7.348765,-3.157318,-7.021646,6.463323,5.888393,-7.825003,-9.119351,5.329853,-3.932720,0.987654,3.781006,4.872776,-1.936528,5.039029,4.145573,-4.240787,-9.690185,9.529102,-4.422896,-1.842902,9.534875,1.467302,-1.120623,4.979257,9.209283,-4.456776,0.990221,3.541397,2.710105,5.727930,7.978674,-6.026198,1.873747,5.199390,-4.493151,9.336931,-4.055020,4.809641,4.063209,2.686094,9.582242,2.235406,8.452149,-6.297680,3.002201,-6.945209,5.526702,6.723688,-2.180872,-3.816984,-5.193229,-0.055018,4.893408,2.518727,-5.146520,4.842759,-7.013374,1.749784,6.253604,3.152996,2.660451,-6.581570,-6.392204,6.229755,-2.600560,0.346750,0.746024,5.336808,6.195363,8.917804,8.066820,-1.316570,7.862171,-8.510227,8.422280,-4.218645,3.492115,-4.586805,-7.693531,-1.865818,8.286613,1.653199,3.649894,8.095309,1.628692,-2.371853,5.814009,0.853632,-0.934479,-1.198471,7.532721,3.288547,3.473053,-4.401921,6.695373,-4.283574,-2.025309,-2.924890,-6.608106,-0.325035,-3.032010,-2.053257,8.763674,6.516915,1.223686,-9.480371,-0.498796,3.034715,9.072900,8.452144,-8.968250,2.721405,4.776372,-5.116395,-8.915321,4.964045,-1.909518,-6.847359,2.003703,4.734421,6.308744,7.678016,9.243574,2.719477,-4.052519,-4.978436,-2.022111,8.636534,4.189457,8.008185,2.580418,-5.195289,0.379833,3.978012,-8.791736,0.418125,-1.859771,5.504109,-5.552675,-1.760800,8.984181,4.663258,9.200472,4.580836,6.920175,-8.873399,-1.726532,-2.240080,2.484681,-0.516789,-1.859275,-0.565602,6.845549,8.333479,-7.197613,-3.132924,-8.404476,-4.584326,2.189985,-0.465474,-4.009932,0.657599,5.085679,-9.351610,8.446826,7.882007,4.636638,9.832378,3.483995,-3.634502,-6.261463,-5.240945,-0.592500,-9.712424,-9.226122,-9.998800,7.790561,5.358585,4.241740,-7.208367,2.722539,0.125134,0.825100,0.606573,9.166056,-5.874027,-2.509667,-6.766594,1.260721,-1.343919,2.874134,2.879006,-3.233628,7.285512,-7.997991,6.934511,7.534947,-5.212405,5.759721,-8.927898,4.174520,-7.969708,0.517484,3.821771,-9.520473,-6.482745,-7.308039,-7.980843,2.301457,7.496835,7.878118,6.964933,6.833515,8.578260,7.162470,2.797803,9.792520,-4.678508,-5.564829,4.741335,-2.849407,-1.907496,0.347389,6.119138,-9.701995,4.263196,6.759662,4.326758,-9.949803,8.907894,-1.448577,9.715668,5.482047,-3.588628,4.818504,-2.547628,1.836982,-6.014654,0.903289,5.728323,-7.224485,-7.626608,5.339751,-8.477064,-3.891694,9.451875,-5.554138,-2.831667,6.841105,7.550440,0.303891,-3.339745,-0.728155,4.689267,-8.322055,-7.546426,6.604144,1.095151,-7.929525,7.659589,5.584360,3.894057,7.740866,1.891879,-4.206295,5.491798,-0.682312,-8.247486,-0.427106,0.588192,3.510627,-9.505502,-0.067641,0.228014,1.065436,8.620334,-7.492944,5.230250,5.173921,-2.618956,7.846306,5.403600,5.688341,3.310918,4.902056,-2.532692,-9.443116,-8.858100,-2.194007,9.149114,-8.594651,7.215380,2.808292,-7.938630,2.766533,-3.225380,-1.533816,0.214703,0.709317,9.143058,3.848742,1.197729,-8.909708,-4.648081,-0.836737,4.345014,-6.279005,0.647463,8.906508,-7.391355,-8.942785,7.026063,-0.742691,-7.317035,4.461889,0.977324,0.356564,-6.359195,-9.229271,0.206244,-6.851242,8.789026,1.413107,-5.565165,-7.618432,5.915370,9.766468,0.350989,3.919304,-3.903243,0.982468,1.627967,-8.074868,2.253703,-1.409048,6.103622,4.759275,-3.087003,8.681328,0.886881,7.848824,-7.769825,0.442526,2.529626,3.367503,-0.867566,4.043263,-2.349924,3.339822,-6.735946,-8.898466,4.700927,-0.988527,-3.044526,-7.818987,3.059818,-6.430940,0.295916,6.691696,6.037493,-9.025210,6.818696,9.657053,6.380635,6.841602,5.744109,-2.319924,9.485084,-8.989192,-1.497213,9.701050,-8.288979,-1.999984,-9.512182,-6.445180,-6.698948,8.635374,-5.740703,9.629231,2.798171,3.583330,-5.243036,6.494131,-6.486190,7.342384,1.771120,-4.029761,2.570706,4.151751,-5.265993,5.906336,-6.306432,4.684068,1.180711,-2.113482,8.768735,7.542315,2.102969,-0.601531,-6.025427,0.406230,-6.717082,-8.095008,-7.898744,3.408611,4.864039,1.931028,3.671070,6.934852,-7.161793,-2.415671,3.868050,3.364119,-5.480155,5.523971,-0.918486,-1.821944,-5.302343,-4.594389,-7.747436,-6.598674,-4.162383,7.762274,-4.142356,-0.562817,0.445650,-4.315983,4.807301,3.486024,1.941003,-7.055042,0.045842,9.744554,4.451816,-2.042841,4.179839,-9.520539,9.058263,-1.707248,-0.937118,-3.730771,2.709845,-9.238825,-5.118178,-3.294439,-0.117840,4.579111,-8.378656,-1.393766,-8.969385,7.986422,0.768019,2.219561,-0.249213,-0.303516,9.476112,-3.910527,7.434629,6.778150,-3.928758,-6.364974,-9.499115,8.018557,-5.765255,6.550038,-3.953968,-8.704336,-4.636179,-9.661807,5.126660,1.021066,1.383131,5.878979,-2.021645,7.448896,2.956598,-2.285405,6.535961,-0.577389,0.552918,3.134981,-8.323217,5.659908,9.786921,9.303506,-8.476942,8.878886,-7.139217,-0.427866,3.937768,-2.808444,7.360354,3.306530,-4.593761,-6.465428,4.667761,0.797580,-2.532146,-2.303438,1.026795,-7.283117,-1.448677,3.670209,0.425036,5.492996,1.518738,8.985030,-0.584371,-2.622977,-1.049236,-1.714220,-7.697105,5.085445,-5.022330,-2.853850,-4.726461,9.459132,8.758172,2.301970,5.540063,5.675377,-4.297100,8.367271,4.849878,1.079475,8.257125,6.171089,-0.043834,-3.217679,-3.945471,-3.264014,0.166416,2.284061,-3.621210,8.224635,-8.632718,2.521152,7.168969,5.180306,-3.224672,-5.364963,2.240822,6.514353,8.998273,-0.886423,-3.566378,-5.786140,6.728191,-4.871483,-4.515202,3.542230,3.363750,-2.208869,5.948438,6.900432,-4.136971,9.053869,-8.234024,1.236260,-2.211602,2.938349,-9.685079,6.510075,-6.837571,-1.065476,5.598679,3.607433,-0.641407,-7.271996,1.542632,5.965714,8.693733,8.091071,2.526662,1.258985,0.335490,-7.892712,-8.421039,1.547569,-2.682502,-4.176613,1.155813,-6.832242,6.526731,7.208976,-8.830186,-4.327384,-8.342644,1.030996,2.547144,2.412452,-6.852383,-7.681851,2.528476,2.617831,3.997335,-6.345766,6.201156,-3.466758,8.737585,4.591055,-4.566005,4.256755,-1.216809,-1.108281,-0.490260,-3.735924,-2.913589,5.257011,-8.961590,2.352245,-3.562790,-7.111350,-7.177313,-5.088089,-0.333827,3.130725,-4.006003,4.106144,-0.797729,-9.841182,-2.130245,9.236253,2.328759,-6.805696,9.475307,-1.497631,1.094804,8.414472,1.440932,0.512038,5.619010,6.123694,-2.293421,-0.642398,-2.208243,3.008645,6.183404,5.027662,3.884303,-9.693860,8.647242,9.995754,5.612706,-1.998368,-3.660312,9.705831,0.321506,1.740317,2.924699,-4.523126,-5.910653,-2.511707,-5.171476,3.379215,-3.528876,-7.512769,-4.795906,-5.946505,-1.932885,-3.285816,4.821372,-2.010147,-5.362715,-5.678477,-7.431826,-1.066494,-8.381228,-6.016763,-1.298354,-2.806757,-6.869413,9.297966,-7.484656,-2.960043,-1.627040,-9.575790,-0.985637,-4.278300,-7.385051,2.031644,4.170491,-8.837998,-0.341941,-6.449303,-6.393817,4.455664,4.940248,7.309290,9.476589,-5.484375,-0.545352,7.414274,-6.291884,-5.150784,-7.387212,9.507976,5.918347,0.399733,-7.876027,-3.512652,-9.350871,3.791357,-0.455930,-9.162415,4.315480,-2.112197,2.210463,-5.622423,7.484730,-3.713612,-7.301566,-5.298242,6.930599,-2.198078,3.524197,-9.237753,-7.756690,-0.413510,-5.258056,-0.842310,2.085030,-9.897211,-9.267396,-8.252610,6.763516,3.597244,-2.374325,2.738305,3.820375,-2.079316,-0.997453,2.889128,-4.311840,-8.326200,-0.240863,-5.585839,3.918779,-7.691677,-2.910279,7.153915,8.600661,2.878974,-9.958705,-3.708925,-3.710422,7.598142,3.235327,-7.286315,-8.486955,4.859642,5.483397,-3.203001,-5.501001,7.247887,-3.115529,-9.840648,1.428489,8.665813,-8.759899,-8.425275,-7.650143,1.201940,-9.234004,-8.684565,-8.184407,4.794885,8.986478,-8.633171,-7.004818,-9.436670,8.002132,-1.334872,5.845769,-2.962916,5.065832,-8.222892,-7.067647,-7.393713,7.148865,5.352019,-2.444010,-3.004673,1.543661,5.847720,-4.876046,-4.494241,-2.866914,-8.381508,-7.849494,7.937350,6.109024,-0.412134,0.299327,-6.386623,7.191247,8.473115,-0.252946,8.227550,-2.501280,2.694869,5.050517,-6.794819,1.715890,5.405752,-0.686948,9.438615,-4.459579,6.041762,-9.629333,1.867136,-5.950366,1.826333,-4.850193,-4.189396,5.807651,4.566941,1.448979,-6.686691,-4.008909,-2.324640,-2.835095,4.672136,7.411276,8.501098,-5.988671,7.576935,1.205409,-9.804822,-0.578863,-7.644254,-1.797295,-6.022619,-6.961520,-7.898904,-0.997265,3.475151,1.252656,4.915057,3.519093,-4.228689,1.838116,-7.936152,2.756455,-1.775017,6.287268,0.688175,-9.152322,6.082524,8.037482,-3.613883,4.345649,-3.448291,-2.373376,1.006370,-5.307323,2.873206,-6.871744,-6.006261,-7.923965,8.617639,-3.781696,-4.164332,-5.169035,2.578821,8.967916,6.590230,2.090341,6.806028,1.791319,9.205786,5.214056,-5.674541,9.104123,9.624351,0.899500,6.882297,1.540309,8.569507,-2.672923,6.625802,-2.714099,-7.586183,4.837117,3.216534,-2.457113,-8.393730,8.633846,4.135098,-4.852799,3.895114,8.051596,8.838597,-5.569199,-7.889410,9.180037,-1.145562,-7.627774,3.381866,8.516694,8.604785,7.611421,5.303074,-4.171683,8.394880,5.384975,-1.619280,-4.305857,6.339107,-4.517584,0.419140,-0.796541,4.422888,-4.072731,-3.627329,6.450921,8.183886,0.020180,-7.952043,-0.458138,-0.986923,-0.609271,-0.134289,-6.156838,1.143543,-6.572971,-7.820869,-5.262792,0.067813,-7.588313,-5.359342,7.245594,6.479139,-5.937104,-3.917525,8.890187,-5.358353,-6.426144,-9.670287,6.604550,7.172798,-0.798953,-4.562006,-0.710146,4.846558,4.977593,-8.996298,-8.777858,8.094310,0.105882,9.914438,8.570396,-2.340255,-9.430769,-4.157470,-3.774467,5.671027,-1.367270,-7.118358,-5.166490,4.929017,0.185430,-5.560018,8.751147,7.601143,-0.403028,-8.957799,-2.354186,7.836520,5.886677,-5.184054,4.234851,7.705527,5.746799,-3.081366,5.040071,1.017333,-4.304812,-3.612771,-1.599704,-0.017397,-8.529818,-9.314380,-0.586464,-2.262295,4.094804,9.902707,-9.643866,-2.332241,-7.135372,1.980094,7.739150,3.626791,2.489491,5.732363,4.207670,-5.527222,-0.527546,-5.274316,-3.300300,5.427392,-4.494152,-6.341230,8.077592,-6.231457,-4.693198,2.823130,9.026533,7.648615,9.131819,-5.668887,-7.925726,-6.864117,9.978309,1.067825,0.872431,7.821058,-0.190877,6.045853,8.423219,7.952057,0.139842,0.031161,4.415169,9.887287,7.732619,9.348301,-7.313116,7.038892,2.918202,7.288753,7.226607,-4.240049,1.346381,6.220799,4.464517,-7.106622,6.541221,7.963540,-9.956934,1.931228,-0.153491,6.347313,5.305314,-6.861988,-0.925305,2.181677,9.172510,6.639895,0.490656,0.556776,0.953138,-4.657567,1.765703,-6.629719,-7.155462,6.910069,-3.355816,-4.416209,8.778490,-2.598954,-7.287345,1.011485,3.237953,-6.637197,6.860837,-3.034362,7.957415,-0.645055,-5.011333,-0.732165,-0.150555,-2.265520,5.927132,-8.198878,7.013131,-4.512862,5.735375,4.575979,-2.513025,7.589772,9.826600,-5.678175,-1.815850,1.000886,1.243344,-4.388794,-9.256674,6.507335,3.818572,-7.058499,-0.016649,-9.459386,9.639902,6.718814,-4.231206,4.276725,-3.466934,-7.808751], dtype = "float64")#candidate|5395|(1456,)|const|float64
call_5394 = relay.TupleGetItem(func_2154_call(relay.reshape(const_5395.astype('float64'), [1456,])), 1)
call_5396 = relay.TupleGetItem(func_2157_call(relay.reshape(const_5395.astype('float64'), [1456,])), 1)
func_4652_call = mod.get_global_var('func_4652')
func_4653_call = mutated_mod.get_global_var('func_4653')
call_5400 = relay.TupleGetItem(func_4652_call(), 0)
call_5401 = relay.TupleGetItem(func_4653_call(), 0)
func_1128_call = mod.get_global_var('func_1128')
func_1131_call = mutated_mod.get_global_var('func_1131')
call_5403 = func_1128_call(relay.reshape(call_5377.astype('int16'), [15, 5, 15]))
call_5404 = func_1128_call(relay.reshape(call_5377.astype('int16'), [15, 5, 15]))
output = relay.Tuple([call_5369,call_5377,call_5385,call_5394,const_5395,call_5400,call_5403,])
output2 = relay.Tuple([call_5370,call_5378,call_5386,call_5396,const_5395,call_5401,call_5404,])
func_5409 = relay.Function([], output)
mod['func_5409'] = func_5409
mod = relay.transform.InferType()(mod)
output = func_5409()
func_5410 = relay.Function([], output)
mutated_mod['func_5410'] = func_5410
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5112_call = mod.get_global_var('func_5112')
func_5113_call = mutated_mod.get_global_var('func_5113')
call_5419 = relay.TupleGetItem(func_5112_call(), 0)
call_5420 = relay.TupleGetItem(func_5113_call(), 0)
output = call_5419
output2 = call_5420
func_5428 = relay.Function([], output)
mod['func_5428'] = func_5428
mod = relay.transform.InferType()(mod)
mutated_mod['func_5428'] = func_5428
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5428_call = mutated_mod.get_global_var('func_5428')
call_5429 = func_5428_call()
output = call_5429
func_5430 = relay.Function([], output)
mutated_mod['func_5430'] = func_5430
mutated_mod = relay.transform.InferType()(mutated_mod)
func_193_call = mod.get_global_var('func_193')
func_194_call = mutated_mod.get_global_var('func_194')
call_5495 = relay.TupleGetItem(func_193_call(), 0)
call_5496 = relay.TupleGetItem(func_194_call(), 0)
func_1070_call = mod.get_global_var('func_1070')
func_1071_call = mutated_mod.get_global_var('func_1071')
call_5499 = relay.TupleGetItem(func_1070_call(), 1)
call_5500 = relay.TupleGetItem(func_1071_call(), 1)
func_5138_call = mod.get_global_var('func_5138')
func_5139_call = mutated_mod.get_global_var('func_5139')
call_5519 = relay.TupleGetItem(func_5138_call(), 0)
call_5520 = relay.TupleGetItem(func_5139_call(), 0)
uop_5530 = relay.cosh(call_5495.astype('float32')) # shape=(15, 5, 15)
uop_5532 = relay.cosh(call_5496.astype('float32')) # shape=(15, 5, 15)
output = relay.Tuple([call_5499,call_5519,uop_5530,])
output2 = relay.Tuple([call_5500,call_5520,uop_5532,])
func_5550 = relay.Function([], output)
mod['func_5550'] = func_5550
mod = relay.transform.InferType()(mod)
mutated_mod['func_5550'] = func_5550
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5550_call = mutated_mod.get_global_var('func_5550')
call_5551 = func_5550_call()
output = call_5551
func_5552 = relay.Function([], output)
mutated_mod['func_5552'] = func_5552
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2611_call = mod.get_global_var('func_2611')
func_2612_call = mutated_mod.get_global_var('func_2612')
call_5567 = func_2611_call()
call_5568 = func_2611_call()
func_3335_call = mod.get_global_var('func_3335')
func_3338_call = mutated_mod.get_global_var('func_3338')
var_5575 = relay.var("var_5575", dtype = "float32", shape = (650, 2))#candidate|5575|(650, 2)|var|float32
call_5574 = func_3335_call(relay.reshape(var_5575.astype('float32'), [10, 10, 13]), relay.reshape(var_5575.astype('float32'), [10, 10, 13]), )
call_5576 = func_3335_call(relay.reshape(var_5575.astype('float32'), [10, 10, 13]), relay.reshape(var_5575.astype('float32'), [10, 10, 13]), )
output = relay.Tuple([call_5567,call_5574,var_5575,])
output2 = relay.Tuple([call_5568,call_5576,var_5575,])
func_5581 = relay.Function([var_5575,], output)
mod['func_5581'] = func_5581
mod = relay.transform.InferType()(mod)
mutated_mod['func_5581'] = func_5581
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5582 = relay.var("var_5582", dtype = "float32", shape = (650, 2))#candidate|5582|(650, 2)|var|float32
func_5581_call = mutated_mod.get_global_var('func_5581')
call_5583 = func_5581_call(var_5582)
output = call_5583
func_5584 = relay.Function([var_5582], output)
mutated_mod['func_5584'] = func_5584
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5138_call = mod.get_global_var('func_5138')
func_5139_call = mutated_mod.get_global_var('func_5139')
call_5608 = relay.TupleGetItem(func_5138_call(), 0)
call_5609 = relay.TupleGetItem(func_5139_call(), 0)
output = call_5608
output2 = call_5609
func_5610 = relay.Function([], output)
mod['func_5610'] = func_5610
mod = relay.transform.InferType()(mod)
output = func_5610()
func_5611 = relay.Function([], output)
mutated_mod['func_5611'] = func_5611
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2851_call = mod.get_global_var('func_2851')
func_2853_call = mutated_mod.get_global_var('func_2853')
call_5623 = func_2851_call()
call_5624 = func_2851_call()
output = relay.Tuple([call_5623,])
output2 = relay.Tuple([call_5624,])
func_5641 = relay.Function([], output)
mod['func_5641'] = func_5641
mod = relay.transform.InferType()(mod)
mutated_mod['func_5641'] = func_5641
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5641_call = mutated_mod.get_global_var('func_5641')
call_5642 = func_5641_call()
output = call_5642
func_5643 = relay.Function([], output)
mutated_mod['func_5643'] = func_5643
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2342_call = mod.get_global_var('func_2342')
func_2344_call = mutated_mod.get_global_var('func_2344')
call_5662 = relay.TupleGetItem(func_2342_call(), 0)
call_5663 = relay.TupleGetItem(func_2344_call(), 0)
output = relay.Tuple([call_5662,])
output2 = relay.Tuple([call_5663,])
func_5679 = relay.Function([], output)
mod['func_5679'] = func_5679
mod = relay.transform.InferType()(mod)
mutated_mod['func_5679'] = func_5679
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5679_call = mutated_mod.get_global_var('func_5679')
call_5680 = func_5679_call()
output = call_5680
func_5681 = relay.Function([], output)
mutated_mod['func_5681'] = func_5681
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4870_call = mod.get_global_var('func_4870')
func_4871_call = mutated_mod.get_global_var('func_4871')
call_5705 = relay.TupleGetItem(func_4870_call(), 0)
call_5706 = relay.TupleGetItem(func_4871_call(), 0)
func_5610_call = mod.get_global_var('func_5610')
func_5611_call = mutated_mod.get_global_var('func_5611')
call_5720 = func_5610_call()
call_5721 = func_5610_call()
func_3977_call = mod.get_global_var('func_3977')
func_3980_call = mutated_mod.get_global_var('func_3980')
const_5738 = relay.const([[9.934604,3.388553,-5.769953,-4.717155,-5.261500,-7.789489,-2.327014,1.002311,6.807686,8.768799,2.538572,7.097838,-7.344016,0.357658,-1.227944,-4.292122,-1.238077,6.066987,0.891882,1.276361,0.642198,5.604697,-5.203818,-3.504257,-8.516108,3.978903,2.198838,-9.478532,-1.726330,2.316119,7.443769,-3.876030,5.467840,-0.689760,5.721632,-2.174728,7.932759,-8.046693,-4.280585,-6.130588,-9.783938,-0.782108,-5.061826,-3.667344,-9.661588,9.961363,0.110888,-7.896285,-5.454922,9.416048,-4.199534,-4.954753,7.809557,-8.560302,7.145641,-6.640342,-2.143235,-3.527518,4.550049,8.092107,-2.510062,6.765438,7.428295,-5.602270,-2.427271,5.964334,4.684262,8.873292,3.634123,4.903495,-8.795120,-1.755549,-0.533111,7.653253,6.232032,-4.611835,-5.266111,5.153767,5.844596,8.198397,-0.153301,-5.931482,-7.208973,-2.909750,0.823525,8.975066,-5.097400,7.718630,-3.690788,-4.905436,6.665271,8.163787,3.514940,1.097385,-4.491173,-7.530445,-0.877972,-8.385844,-5.349795,-9.340915,-3.614506,3.681314,1.846815,-8.792440,-1.475026,-0.375544,9.403794,7.488183,-2.501183,3.456824,2.472715,1.503966,-0.169043,-4.551475,1.058255,5.400924,-2.357986,-6.633629,6.204764,6.378693,9.426164,7.901113,5.078053,7.007537,-3.684541,-6.153651,7.326292,7.901129,-5.949463,-8.990522,-9.329873,8.611935],[0.040950,-6.886501,-9.680337,-9.379855,1.619964,-9.574666,-5.303579,6.880354,-8.563842,-6.255033,1.668808,-3.820689,2.216914,3.000707,-0.420361,9.720780,-9.419695,-7.279499,9.935993,3.254316,-8.587027,-7.234185,9.481051,8.573254,8.321319,6.336992,7.821840,-5.362011,4.864326,-1.384536,9.508736,8.375936,-7.201181,-0.563671,-7.319461,-8.866969,-2.913897,4.137915,-1.543339,2.125251,-1.440911,6.145979,-4.415866,-9.608948,6.749623,8.108245,-2.468345,9.741082,-6.838480,9.617347,7.295161,-8.277537,-3.909115,2.111657,-1.446940,-5.212761,-5.551276,0.303831,-3.628801,-1.201736,-6.950966,-8.383633,-5.667766,9.828020,8.810343,5.648569,6.279326,-7.940631,7.097161,-5.174288,5.395363,-2.933746,-5.049253,-7.748196,8.415625,6.395194,5.491216,2.709574,4.520157,-1.295149,2.809633,6.056439,1.956900,-8.775311,2.523426,2.719967,3.193461,-1.118146,4.714926,-9.646497,9.183035,-7.472057,9.513422,-1.691807,4.201874,-9.260314,-4.853927,7.546056,5.904384,-2.750280,-4.404567,1.361359,5.765284,-2.121669,1.252358,-0.783837,-3.633043,2.283664,-7.110404,-4.830189,-1.397053,-6.092477,-1.551002,4.840561,6.133998,-8.318034,9.072875,8.777963,-8.451853,3.840535,1.074763,-4.672937,-1.417296,4.877563,-5.222177,-2.173028,-8.703726,9.036248,-5.272585,3.155718,9.682421,-5.029097],[3.374516,8.276005,9.344583,3.901390,-2.161943,-5.079760,6.666661,3.643695,8.608806,3.677325,-5.400109,-0.403140,3.019464,-9.609215,7.310429,8.690961,7.005677,-3.910063,9.341253,0.065792,-0.394226,-0.946873,0.420705,6.736366,-9.397127,4.344784,7.941857,4.541729,8.357482,2.195303,-6.196386,7.483411,-5.205979,-5.400844,-5.498574,2.218857,6.881998,-3.631412,-1.505717,1.027597,-7.365401,1.974674,-4.273079,-7.953858,8.960170,3.334099,-7.283836,8.300687,-7.815178,-1.089810,9.044457,3.213909,-6.599095,8.059197,1.349310,6.399052,3.014840,-6.964139,2.678737,6.403653,-1.120556,0.360185,-8.448322,0.584361,-2.369697,0.520435,-3.221931,2.398128,-8.006726,5.063857,8.038567,-5.718725,7.875097,2.136590,5.702739,0.828871,0.651148,4.829317,2.582282,-5.752333,-9.524265,0.480734,2.155766,3.696064,-6.835225,2.739518,2.127380,-9.947501,-1.320626,-0.439926,9.031225,-7.211838,-0.340143,-6.782277,-3.426757,4.816396,-2.998111,6.320386,8.819834,7.344944,9.468383,-8.998987,-4.571853,-6.166681,-0.932757,6.619237,-7.914649,-1.291161,9.644816,1.840957,8.508464,-2.896574,3.928656,9.902247,8.471842,-2.229617,-6.294415,6.218235,-6.545994,6.605877,-1.273472,-8.042037,-9.512474,5.675903,4.903545,-2.309126,-2.197552,-0.604977,-4.528072,-8.599482,-9.165538,8.070778],[0.076193,-1.160505,-9.783861,-4.475890,-9.361051,7.863362,8.461029,-3.606207,8.590352,-6.332912,4.011232,-3.531830,-0.809858,3.727210,6.518529,7.933298,-8.789694,-4.585527,-9.527729,2.758079,0.953559,5.616506,-0.150449,8.086790,-0.722318,5.727469,-3.695088,-5.934040,-9.629630,-4.598935,-4.357672,5.705067,6.412632,6.288261,-8.287986,-6.456010,8.110997,7.557298,7.287076,-8.114784,-5.651534,8.673640,3.752864,0.796196,-6.357529,5.131493,-2.419452,4.727588,7.056237,2.517767,6.703014,0.220429,2.471879,-7.661698,-5.705411,9.591554,-0.832287,0.779743,-8.780975,-4.001823,-4.473626,2.693002,-4.758522,-2.162642,4.324505,4.588897,0.610188,3.393815,8.999352,5.851013,-6.792110,-7.462667,-2.615016,-3.748915,6.141140,8.491265,5.236573,-7.106547,0.398599,7.884251,-7.789139,2.843963,7.710616,-9.112350,3.991605,-9.421719,-8.143437,-8.459244,5.202162,5.966454,1.571822,-1.819657,6.553649,-9.404397,-9.340787,7.037885,7.512512,-0.675973,-9.416724,7.644960,3.910252,8.837018,9.897409,-1.712944,8.809731,7.845517,-6.751125,9.179879,-3.936558,-1.050344,8.164744,9.428353,-3.437860,4.049892,-6.537522,-4.644265,1.389707,-3.893285,-1.385826,2.693926,-6.603175,-4.061338,-8.372819,4.060392,-1.765612,1.642535,1.226367,-1.530893,5.167817,-0.989433,-8.694039,9.387840],[0.633880,-0.374048,-5.158368,6.939458,-0.678580,4.921328,9.583592,5.428696,-7.948357,7.264996,0.791881,8.407641,8.567145,8.396421,2.228637,5.505660,-3.311874,-6.392220,7.765555,1.660956,2.899038,6.641735,6.268378,-0.504097,9.084529,-3.638844,7.178981,2.688863,5.001610,9.281721,5.547924,5.962674,-0.354643,-1.580690,8.667004,-0.416175,-2.299219,4.738663,-3.310936,4.133816,2.648777,2.165860,-2.609169,-3.373307,7.488198,-3.050153,-6.937277,-4.120108,2.283828,3.356487,-9.677643,3.850494,4.807309,3.946313,6.993528,7.286279,-4.812200,1.022513,-7.720820,-7.061463,5.272260,-4.913433,0.711457,0.507200,-7.172331,5.461529,-2.423543,4.693042,-4.600100,0.054553,-5.074448,-9.374070,7.772698,5.598431,0.870005,9.680646,-0.168829,4.106080,-4.414934,-9.759186,6.942699,-6.258249,-1.671858,1.131109,-0.804983,-7.540639,8.121324,8.166076,5.996016,-9.330627,-5.903301,7.092975,-5.839217,-7.302347,4.678894,4.088813,1.330799,-8.917660,1.782352,-4.241450,4.069821,-6.856087,4.769920,3.270982,-6.546575,-1.490326,-1.701528,2.156380,-8.863439,6.380628,-4.556799,-9.715653,-3.516893,-4.118482,-7.831098,2.561619,7.227997,-4.792818,1.569940,0.353643,-7.536952,2.871413,-3.484806,7.444836,-7.616263,-4.734236,8.542570,-7.962017,-1.318589,6.406644,8.337070,-1.444742]], dtype = "float64")#candidate|5738|(5, 132)|const|float64
call_5737 = relay.TupleGetItem(func_3977_call(relay.reshape(const_5738.astype('float64'), [12, 5, 11])), 0)
call_5739 = relay.TupleGetItem(func_3980_call(relay.reshape(const_5738.astype('float64'), [12, 5, 11])), 0)
func_2384_call = mod.get_global_var('func_2384')
func_2387_call = mutated_mod.get_global_var('func_2387')
var_5741 = relay.var("var_5741", dtype = "float64", shape = (270,))#candidate|5741|(270,)|var|float64
call_5740 = relay.TupleGetItem(func_2384_call(relay.reshape(var_5741.astype('float64'), [9, 3, 10])), 0)
call_5742 = relay.TupleGetItem(func_2387_call(relay.reshape(var_5741.astype('float64'), [9, 3, 10])), 0)
bop_5743 = relay.add(call_5737.astype('float64'), relay.reshape(const_5738.astype('float64'), relay.shape_of(call_5737))) # shape=(12, 5, 11)
bop_5746 = relay.add(call_5739.astype('float64'), relay.reshape(const_5738.astype('float64'), relay.shape_of(call_5739))) # shape=(12, 5, 11)
uop_5753 = relay.acosh(call_5737.astype('float64')) # shape=(12, 5, 11)
uop_5755 = relay.acosh(call_5739.astype('float64')) # shape=(12, 5, 11)
uop_5759 = relay.acos(uop_5753.astype('float32')) # shape=(12, 5, 11)
uop_5761 = relay.acos(uop_5755.astype('float32')) # shape=(12, 5, 11)
func_2516_call = mod.get_global_var('func_2516')
func_2518_call = mutated_mod.get_global_var('func_2518')
call_5769 = func_2516_call()
call_5770 = func_2516_call()
output = relay.Tuple([call_5705,call_5720,call_5740,var_5741,bop_5743,uop_5759,call_5769,])
output2 = relay.Tuple([call_5706,call_5721,call_5742,var_5741,bop_5746,uop_5761,call_5770,])
func_5785 = relay.Function([var_5741,], output)
mod['func_5785'] = func_5785
mod = relay.transform.InferType()(mod)
mutated_mod['func_5785'] = func_5785
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5786 = relay.var("var_5786", dtype = "float64", shape = (270,))#candidate|5786|(270,)|var|float64
func_5785_call = mutated_mod.get_global_var('func_5785')
call_5787 = func_5785_call(var_5786)
output = call_5787
func_5788 = relay.Function([var_5786], output)
mutated_mod['func_5788'] = func_5788
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3293_call = mod.get_global_var('func_3293')
func_3295_call = mutated_mod.get_global_var('func_3295')
call_5829 = relay.TupleGetItem(func_3293_call(), 4)
call_5830 = relay.TupleGetItem(func_3295_call(), 4)
output = relay.Tuple([call_5829,])
output2 = relay.Tuple([call_5830,])
func_5835 = relay.Function([], output)
mod['func_5835'] = func_5835
mod = relay.transform.InferType()(mod)
mutated_mod['func_5835'] = func_5835
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5835_call = mutated_mod.get_global_var('func_5835')
call_5836 = func_5835_call()
output = call_5836
func_5837 = relay.Function([], output)
mutated_mod['func_5837'] = func_5837
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_5851 = relay.TupleGetItem(func_1733_call(), 0)
call_5852 = relay.TupleGetItem(func_1735_call(), 0)
output = call_5851
output2 = call_5852
func_5869 = relay.Function([], output)
mod['func_5869'] = func_5869
mod = relay.transform.InferType()(mod)
output = func_5869()
func_5870 = relay.Function([], output)
mutated_mod['func_5870'] = func_5870
mutated_mod = relay.transform.InferType()(mutated_mod)
var_5953 = relay.var("var_5953", dtype = "float32", shape = ())#candidate|5953|()|var|float32
var_5954 = relay.var("var_5954", dtype = "float32", shape = (6, 12, 1))#candidate|5954|(6, 12, 1)|var|float32
bop_5955 = relay.less(var_5953.astype('bool'), var_5954.astype('bool')) # shape=(6, 12, 1)
output = bop_5955
output2 = bop_5955
func_5973 = relay.Function([var_5953,var_5954,], output)
mod['func_5973'] = func_5973
mod = relay.transform.InferType()(mod)
var_5974 = relay.var("var_5974", dtype = "float32", shape = ())#candidate|5974|()|var|float32
var_5975 = relay.var("var_5975", dtype = "float32", shape = (6, 12, 1))#candidate|5975|(6, 12, 1)|var|float32
output = func_5973(var_5974,var_5975,)
func_5976 = relay.Function([var_5974,var_5975,], output)
mutated_mod['func_5976'] = func_5976
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2851_call = mod.get_global_var('func_2851')
func_2853_call = mutated_mod.get_global_var('func_2853')
call_5978 = func_2851_call()
call_5979 = func_2851_call()
output = call_5978
output2 = call_5979
func_5989 = relay.Function([], output)
mod['func_5989'] = func_5989
mod = relay.transform.InferType()(mod)
mutated_mod['func_5989'] = func_5989
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5989_call = mutated_mod.get_global_var('func_5989')
call_5990 = func_5989_call()
output = call_5990
func_5991 = relay.Function([], output)
mutated_mod['func_5991'] = func_5991
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6010 = relay.var("var_6010", dtype = "float32", shape = ())#candidate|6010|()|var|float32
var_6011 = relay.var("var_6011", dtype = "float32", shape = (4, 1, 15))#candidate|6011|(4, 1, 15)|var|float32
bop_6012 = relay.not_equal(var_6010.astype('bool'), var_6011.astype('bool')) # shape=(4, 1, 15)
func_1733_call = mod.get_global_var('func_1733')
func_1735_call = mutated_mod.get_global_var('func_1735')
call_6015 = relay.TupleGetItem(func_1733_call(), 0)
call_6016 = relay.TupleGetItem(func_1735_call(), 0)
func_4987_call = mod.get_global_var('func_4987')
func_4989_call = mutated_mod.get_global_var('func_4989')
call_6036 = func_4987_call()
call_6037 = func_4987_call()
output = relay.Tuple([bop_6012,call_6015,call_6036,])
output2 = relay.Tuple([bop_6012,call_6016,call_6037,])
func_6040 = relay.Function([var_6010,var_6011,], output)
mod['func_6040'] = func_6040
mod = relay.transform.InferType()(mod)
mutated_mod['func_6040'] = func_6040
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6040_call = mutated_mod.get_global_var('func_6040')
var_6042 = relay.var("var_6042", dtype = "float32", shape = ())#candidate|6042|()|var|float32
var_6043 = relay.var("var_6043", dtype = "float32", shape = (4, 1, 15))#candidate|6043|(4, 1, 15)|var|float32
call_6041 = func_6040_call(var_6042,var_6043,)
output = call_6041
func_6044 = relay.Function([var_6042,var_6043,], output)
mutated_mod['func_6044'] = func_6044
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5835_call = mod.get_global_var('func_5835')
func_5837_call = mutated_mod.get_global_var('func_5837')
call_6049 = relay.TupleGetItem(func_5835_call(), 0)
call_6050 = relay.TupleGetItem(func_5837_call(), 0)
output = relay.Tuple([call_6049,])
output2 = relay.Tuple([call_6050,])
func_6083 = relay.Function([], output)
mod['func_6083'] = func_6083
mod = relay.transform.InferType()(mod)
output = func_6083()
func_6084 = relay.Function([], output)
mutated_mod['func_6084'] = func_6084
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5550_call = mod.get_global_var('func_5550')
func_5552_call = mutated_mod.get_global_var('func_5552')
call_6210 = relay.TupleGetItem(func_5550_call(), 1)
call_6211 = relay.TupleGetItem(func_5552_call(), 1)
uop_6222 = relay.erf(call_6210.astype('float64')) # shape=(3, 7, 11)
uop_6224 = relay.erf(call_6211.astype('float64')) # shape=(3, 7, 11)
func_2611_call = mod.get_global_var('func_2611')
func_2612_call = mutated_mod.get_global_var('func_2612')
call_6234 = func_2611_call()
call_6235 = func_2611_call()
uop_6259 = relay.sigmoid(call_6210.astype('float64')) # shape=(3, 7, 11)
uop_6261 = relay.sigmoid(call_6211.astype('float64')) # shape=(3, 7, 11)
output = relay.Tuple([uop_6222,call_6234,uop_6259,])
output2 = relay.Tuple([uop_6224,call_6235,uop_6261,])
func_6263 = relay.Function([], output)
mod['func_6263'] = func_6263
mod = relay.transform.InferType()(mod)
output = func_6263()
func_6264 = relay.Function([], output)
mutated_mod['func_6264'] = func_6264
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3190_call = mod.get_global_var('func_3190')
func_3191_call = mutated_mod.get_global_var('func_3191')
call_6288 = relay.TupleGetItem(func_3190_call(), 0)
call_6289 = relay.TupleGetItem(func_3191_call(), 0)
output = relay.Tuple([call_6288,])
output2 = relay.Tuple([call_6289,])
func_6299 = relay.Function([], output)
mod['func_6299'] = func_6299
mod = relay.transform.InferType()(mod)
mutated_mod['func_6299'] = func_6299
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6299_call = mutated_mod.get_global_var('func_6299')
call_6300 = func_6299_call()
output = call_6300
func_6301 = relay.Function([], output)
mutated_mod['func_6301'] = func_6301
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2444_call = mod.get_global_var('func_2444')
func_2445_call = mutated_mod.get_global_var('func_2445')
call_6325 = relay.TupleGetItem(func_2444_call(), 0)
call_6326 = relay.TupleGetItem(func_2445_call(), 0)
func_6299_call = mod.get_global_var('func_6299')
func_6301_call = mutated_mod.get_global_var('func_6301')
call_6327 = relay.TupleGetItem(func_6299_call(), 0)
call_6328 = relay.TupleGetItem(func_6301_call(), 0)
func_6083_call = mod.get_global_var('func_6083')
func_6084_call = mutated_mod.get_global_var('func_6084')
call_6346 = relay.TupleGetItem(func_6083_call(), 0)
call_6347 = relay.TupleGetItem(func_6084_call(), 0)
func_861_call = mod.get_global_var('func_861')
func_862_call = mutated_mod.get_global_var('func_862')
call_6358 = relay.TupleGetItem(func_861_call(), 0)
call_6359 = relay.TupleGetItem(func_862_call(), 0)
output = relay.Tuple([call_6325,call_6327,call_6346,call_6358,])
output2 = relay.Tuple([call_6326,call_6328,call_6347,call_6359,])
func_6373 = relay.Function([], output)
mod['func_6373'] = func_6373
mod = relay.transform.InferType()(mod)
mutated_mod['func_6373'] = func_6373
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6373_call = mutated_mod.get_global_var('func_6373')
call_6374 = func_6373_call()
output = call_6374
func_6375 = relay.Function([], output)
mutated_mod['func_6375'] = func_6375
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3616_call = mod.get_global_var('func_3616')
func_3618_call = mutated_mod.get_global_var('func_3618')
call_6384 = relay.TupleGetItem(func_3616_call(), 0)
call_6385 = relay.TupleGetItem(func_3618_call(), 0)
func_5610_call = mod.get_global_var('func_5610')
func_5611_call = mutated_mod.get_global_var('func_5611')
call_6395 = func_5610_call()
call_6396 = func_5610_call()
output = relay.Tuple([call_6384,call_6395,])
output2 = relay.Tuple([call_6385,call_6396,])
func_6401 = relay.Function([], output)
mod['func_6401'] = func_6401
mod = relay.transform.InferType()(mod)
mutated_mod['func_6401'] = func_6401
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6401_call = mutated_mod.get_global_var('func_6401')
call_6402 = func_6401_call()
output = call_6402
func_6403 = relay.Function([], output)
mutated_mod['func_6403'] = func_6403
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5282_call = mod.get_global_var('func_5282')
func_5283_call = mutated_mod.get_global_var('func_5283')
call_6404 = relay.TupleGetItem(func_5282_call(), 0)
call_6405 = relay.TupleGetItem(func_5283_call(), 0)
func_2885_call = mod.get_global_var('func_2885')
func_2887_call = mutated_mod.get_global_var('func_2887')
call_6430 = relay.TupleGetItem(func_2885_call(), 1)
call_6431 = relay.TupleGetItem(func_2887_call(), 1)
uop_6432 = relay.log10(call_6430.astype('float32')) # shape=(12, 10, 5)
uop_6434 = relay.log10(call_6431.astype('float32')) # shape=(12, 10, 5)
func_5835_call = mod.get_global_var('func_5835')
func_5837_call = mutated_mod.get_global_var('func_5837')
call_6445 = relay.TupleGetItem(func_5835_call(), 0)
call_6446 = relay.TupleGetItem(func_5837_call(), 0)
func_30_call = mod.get_global_var('func_30')
func_33_call = mutated_mod.get_global_var('func_33')
call_6467 = func_30_call(relay.reshape(uop_6432.astype('float32'), [12, 10, 5]), relay.reshape(uop_6432.astype('float32'), [12, 10, 5]), )
call_6468 = func_30_call(relay.reshape(uop_6432.astype('float32'), [12, 10, 5]), relay.reshape(uop_6432.astype('float32'), [12, 10, 5]), )
func_5869_call = mod.get_global_var('func_5869')
func_5870_call = mutated_mod.get_global_var('func_5870')
call_6469 = func_5869_call()
call_6470 = func_5869_call()
func_5304_call = mod.get_global_var('func_5304')
func_5307_call = mutated_mod.get_global_var('func_5307')
var_6481 = relay.var("var_6481", dtype = "float32", shape = (720,))#candidate|6481|(720,)|var|float32
call_6480 = relay.TupleGetItem(func_5304_call(relay.reshape(var_6481.astype('float32'), [6, 10, 12])), 0)
call_6482 = relay.TupleGetItem(func_5307_call(relay.reshape(var_6481.astype('float32'), [6, 10, 12])), 0)
func_867_call = mod.get_global_var('func_867')
func_869_call = mutated_mod.get_global_var('func_869')
call_6492 = relay.TupleGetItem(func_867_call(), 0)
call_6493 = relay.TupleGetItem(func_869_call(), 0)
output = relay.Tuple([call_6404,uop_6432,call_6445,call_6467,call_6469,call_6480,var_6481,call_6492,])
output2 = relay.Tuple([call_6405,uop_6434,call_6446,call_6468,call_6470,call_6482,var_6481,call_6493,])
func_6499 = relay.Function([var_6481,], output)
mod['func_6499'] = func_6499
mod = relay.transform.InferType()(mod)
var_6500 = relay.var("var_6500", dtype = "float32", shape = (720,))#candidate|6500|(720,)|var|float32
output = func_6499(var_6500)
func_6501 = relay.Function([var_6500], output)
mutated_mod['func_6501'] = func_6501
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5282_call = mod.get_global_var('func_5282')
func_5283_call = mutated_mod.get_global_var('func_5283')
call_6541 = relay.TupleGetItem(func_5282_call(), 0)
call_6542 = relay.TupleGetItem(func_5283_call(), 0)
var_6546 = relay.var("var_6546", dtype = "float32", shape = (8, 14, 8))#candidate|6546|(8, 14, 8)|var|float32
bop_6547 = relay.subtract(call_6541.astype('float64'), relay.reshape(var_6546.astype('float64'), relay.shape_of(call_6541))) # shape=(8, 14, 8)
bop_6550 = relay.subtract(call_6542.astype('float64'), relay.reshape(var_6546.astype('float64'), relay.shape_of(call_6542))) # shape=(8, 14, 8)
func_5550_call = mod.get_global_var('func_5550')
func_5552_call = mutated_mod.get_global_var('func_5552')
call_6551 = relay.TupleGetItem(func_5550_call(), 2)
call_6552 = relay.TupleGetItem(func_5552_call(), 2)
bop_6554 = relay.mod(var_6546.astype('float64'), relay.reshape(call_6541.astype('float64'), relay.shape_of(var_6546))) # shape=(8, 14, 8)
bop_6557 = relay.mod(var_6546.astype('float64'), relay.reshape(call_6542.astype('float64'), relay.shape_of(var_6546))) # shape=(8, 14, 8)
func_4300_call = mod.get_global_var('func_4300')
func_4303_call = mutated_mod.get_global_var('func_4303')
var_6573 = relay.var("var_6573", dtype = "float32", shape = (320,))#candidate|6573|(320,)|var|float32
call_6572 = relay.TupleGetItem(func_4300_call(relay.reshape(var_6573.astype('float32'), [8, 40])), 3)
call_6574 = relay.TupleGetItem(func_4303_call(relay.reshape(var_6573.astype('float32'), [8, 40])), 3)
output = relay.Tuple([bop_6547,call_6551,bop_6554,call_6572,var_6573,])
output2 = relay.Tuple([bop_6550,call_6552,bop_6557,call_6574,var_6573,])
func_6580 = relay.Function([var_6546,var_6573,], output)
mod['func_6580'] = func_6580
mod = relay.transform.InferType()(mod)
var_6581 = relay.var("var_6581", dtype = "float32", shape = (8, 14, 8))#candidate|6581|(8, 14, 8)|var|float32
var_6582 = relay.var("var_6582", dtype = "float32", shape = (320,))#candidate|6582|(320,)|var|float32
output = func_6580(var_6581,var_6582,)
func_6583 = relay.Function([var_6581,var_6582,], output)
mutated_mod['func_6583'] = func_6583
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2641_call = mod.get_global_var('func_2641')
func_2642_call = mutated_mod.get_global_var('func_2642')
call_6596 = func_2641_call()
call_6597 = func_2641_call()
uop_6605 = relay.exp(call_6596.astype('float32')) # shape=(15, 5, 15)
uop_6607 = relay.exp(call_6597.astype('float32')) # shape=(15, 5, 15)
func_5428_call = mod.get_global_var('func_5428')
func_5430_call = mutated_mod.get_global_var('func_5430')
call_6614 = func_5428_call()
call_6615 = func_5428_call()
uop_6638 = relay.log2(uop_6605.astype('float64')) # shape=(15, 5, 15)
uop_6640 = relay.log2(uop_6607.astype('float64')) # shape=(15, 5, 15)
output = relay.Tuple([call_6614,uop_6638,])
output2 = relay.Tuple([call_6615,uop_6640,])
func_6663 = relay.Function([], output)
mod['func_6663'] = func_6663
mod = relay.transform.InferType()(mod)
output = func_6663()
func_6664 = relay.Function([], output)
mutated_mod['func_6664'] = func_6664
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6694 = relay.var("var_6694", dtype = "float64", shape = (1, 8))#candidate|6694|(1, 8)|var|float64
uop_6695 = relay.cosh(var_6694.astype('float64')) # shape=(1, 8)
func_329_call = mod.get_global_var('func_329')
func_332_call = mutated_mod.get_global_var('func_332')
var_6699 = relay.var("var_6699", dtype = "float32", shape = (600,))#candidate|6699|(600,)|var|float32
call_6698 = relay.TupleGetItem(func_329_call(relay.reshape(var_6699.astype('float32'), [600,])), 2)
call_6700 = relay.TupleGetItem(func_332_call(relay.reshape(var_6699.astype('float32'), [600,])), 2)
output = relay.Tuple([uop_6695,call_6698,var_6699,])
output2 = relay.Tuple([uop_6695,call_6700,var_6699,])
func_6706 = relay.Function([var_6694,var_6699,], output)
mod['func_6706'] = func_6706
mod = relay.transform.InferType()(mod)
var_6707 = relay.var("var_6707", dtype = "float64", shape = (1, 8))#candidate|6707|(1, 8)|var|float64
var_6708 = relay.var("var_6708", dtype = "float32", shape = (600,))#candidate|6708|(600,)|var|float32
output = func_6706(var_6707,var_6708,)
func_6709 = relay.Function([var_6707,var_6708,], output)
mutated_mod['func_6709'] = func_6709
mutated_mod = relay.transform.InferType()(mutated_mod)
var_6720 = relay.var("var_6720", dtype = "int64", shape = ())#candidate|6720|()|var|int64
var_6721 = relay.var("var_6721", dtype = "int64", shape = (2, 13, 1))#candidate|6721|(2, 13, 1)|var|int64
bop_6722 = relay.add(var_6720.astype('int64'), var_6721.astype('int64')) # shape=(2, 13, 1)
output = relay.Tuple([bop_6722,])
output2 = relay.Tuple([bop_6722,])
func_6726 = relay.Function([var_6720,var_6721,], output)
mod['func_6726'] = func_6726
mod = relay.transform.InferType()(mod)
mutated_mod['func_6726'] = func_6726
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6726_call = mutated_mod.get_global_var('func_6726')
var_6728 = relay.var("var_6728", dtype = "int64", shape = ())#candidate|6728|()|var|int64
var_6729 = relay.var("var_6729", dtype = "int64", shape = (2, 13, 1))#candidate|6729|(2, 13, 1)|var|int64
call_6727 = func_6726_call(var_6728,var_6729,)
output = call_6727
func_6730 = relay.Function([var_6728,var_6729,], output)
mutated_mod['func_6730'] = func_6730
mutated_mod = relay.transform.InferType()(mutated_mod)
func_511_call = mod.get_global_var('func_511')
func_512_call = mutated_mod.get_global_var('func_512')
call_6751 = func_511_call()
call_6752 = func_511_call()
func_4816_call = mod.get_global_var('func_4816')
func_4818_call = mutated_mod.get_global_var('func_4818')
var_6778 = relay.var("var_6778", dtype = "float32", shape = (1300,))#candidate|6778|(1300,)|var|float32
call_6777 = relay.TupleGetItem(func_4816_call(relay.reshape(var_6778.astype('float32'), [130, 10])), 3)
call_6779 = relay.TupleGetItem(func_4818_call(relay.reshape(var_6778.astype('float32'), [130, 10])), 3)
uop_6797 = relay.sqrt(call_6777.astype('float32')) # shape=(10, 10, 13)
uop_6799 = relay.sqrt(call_6779.astype('float32')) # shape=(10, 10, 13)
func_768_call = mod.get_global_var('func_768')
func_769_call = mutated_mod.get_global_var('func_769')
call_6838 = relay.TupleGetItem(func_768_call(), 1)
call_6839 = relay.TupleGetItem(func_769_call(), 1)
func_3672_call = mod.get_global_var('func_3672')
func_3674_call = mutated_mod.get_global_var('func_3674')
const_6844 = relay.const([7.101109,-1.007286,-0.848085,-2.643355,3.765769,3.240609,-2.006945,2.899823,-0.093360,3.225230,7.972777,3.297824,2.841039,3.466619,7.104700,1.311657,-0.389818,-5.953729,9.772078,2.201722,-1.075425,4.879216,5.142345,3.859547,6.041416,0.156681,-9.846961,-2.306059,0.251223,-0.736052,-1.829829,2.927755,-8.798909,6.640232,-2.928400,-6.795321,9.820995,7.455686,-9.384709,-5.436531,0.012612,-3.483692,3.845473,-9.302384,6.854585,9.042927,-6.483635,-7.080756,-4.652979,-3.329488,5.817660,6.668173,-2.914710,7.534000,1.062062,-7.684755,9.413434,4.904310,-4.351676,2.983989,-9.514294,8.116981,1.059127,3.571647,-0.329757,-6.817232,-5.271254,-9.612172,-1.931401,-4.392746,-1.084465,2.598317,7.716245,-6.919102,-1.483149,0.915797,-9.876712,9.128547,0.766458,2.660922,2.863564,4.859585,-3.509764,-3.709931,7.761084,-7.637455,-4.774234,5.036833,-9.578634,0.424692,0.726068,-1.230866,0.126745,5.516680,-2.589736,-5.162056,-2.356100,-7.823771,-0.819286,4.953400,9.262278,0.458240,4.716897,0.811531,-1.251791,-1.786090,-4.391693,5.307431,2.084304,-9.098676,6.413829,8.651026,-2.552050,-5.862885,-0.827710,-0.319798,-3.080262,1.875424,-3.763767,8.814852,8.443348,-7.584532,-7.076551,-9.052339,-5.178322,-9.745566,5.342591,7.901017,1.942050,-4.707039,3.632025,4.591003,-8.540975,-2.768905,4.085753,7.936754,1.645331,-0.889893,2.294150,6.742402,6.611198,-1.605183,7.749974,-4.173658,6.479156,8.658211,5.661691,-8.584090,6.589529,-4.905539,7.760133,-1.966503,6.892827,-2.651279,2.302448,-9.360508,1.572455,2.743921,-9.533809,1.455981,5.669310,2.256882,7.727826,-5.631518,-9.333130,-2.464047,9.225334,-9.738909,4.990882,6.189458,5.424670,-4.354041,-3.385332,2.366221,9.996965,7.111774,6.787670,-7.488194,-5.988951,-2.732915,9.786307,-8.375266,3.812868,-8.435045,-6.847454,3.905351,5.246044,-7.544277,5.301237,9.903055,8.705927,5.754976,5.509671,7.175579,6.151687,-8.931357,-5.262416,6.675803,8.769508,6.017394,7.532008,4.496252,-6.043069,0.478458,-2.811179,-8.135000,7.779092,-4.672144,9.267587,-1.052207,9.522126,-2.395926,-8.958475,2.914529,8.889090,7.739759,1.797723,3.463482,-7.125206,-1.706564,5.860610,-2.672535,-9.317393,1.422265,4.485546,-0.008608,-6.206571,-6.523208,-8.513276,2.047221,-7.154207,4.114995,8.750184,8.878245,9.555905,-5.244641,4.763048,9.129858,-7.270440,9.728595,-4.464758,-0.033236,-7.769141,0.616054,9.139197,-3.406126,8.809739,1.122883,5.768657,3.360026,-5.866623,9.883018,-1.174481,-2.441120,-6.172402,-7.362505,5.283393,5.550199,-2.705772,4.578202,8.157984,2.650894,4.266820,-8.919423,-3.800620,9.332426,6.124485,-8.796565,9.241172,-7.424944,-9.209476,-1.665314,-2.296690,-5.796138,5.550009,-9.701802,7.995110,9.322973,-9.294809,9.462252,1.801289,-7.930712,-1.464572,9.952488,2.556708,2.612088,-4.961443,2.608245,9.123774,4.951803,4.631770,-9.891822,-5.904438,6.866055,7.538464,1.638065,8.195274,2.456914,-4.450215,6.168648,3.449385,5.564409,7.041439,-4.600470,-5.688511,3.217455,5.260382,3.186927,3.994733,-8.972474,6.951215,-8.256249,8.347407,-9.990265,-0.677953,1.754704,-9.289768,6.711591,-7.677983,2.814611,-9.081206,-5.421302,-2.108514,5.650109,2.724582,-7.075886,9.282964,1.208230,-9.004176,-0.169247,-5.793366,-4.214598,-4.433246,-8.790146,8.930717,-4.450704,-6.686467,9.696542,-2.932585,-1.681223,7.823548,-2.734460,4.579663,4.158648,-9.911150,-2.448290,-2.807154,4.982157,6.132229,5.334887,9.358494,-9.181639,-1.929243,-9.303236,-7.286803,-3.879763,6.354958,-3.861377,6.764672,5.865913,6.437856,-3.000207,-5.356566,-0.970209,2.853983,8.171103,6.186789,-0.724995,6.257917,-1.580561,0.435890,6.288141,-8.826597,-5.418136,-8.682831,6.615059,1.218329,4.888885,5.716833,4.288076,2.994615,-6.794937,-0.406194,-7.756221,8.696614,3.718786,-5.488922,-7.736247,-6.409588,-1.668897,-8.671609,-6.678526,2.471062,2.216350,-6.603836,3.626743,9.562378,-2.455285,-9.413245,-1.702579,-7.618914,-0.440611,-1.377801,9.480962,8.373439,3.918865,5.323043,-8.515604,0.441975,1.275900,-0.254730,0.239987,-7.490614,-5.295477,7.789671,0.737395,-1.065003,-4.694220,-3.804129,-9.854448,1.156429,3.426550,9.815498,2.522804,5.382976,-1.962179,9.386839,-1.941686,-1.910432,-6.592308,8.362752,2.945468,0.317485,-8.087402,9.411147,-4.949619,5.270485,4.455574,0.258476,5.636988,3.455260,-7.192921,-1.750417,8.537014,6.084292,-1.136713,0.312865,3.068183,8.465988,-9.750815,-7.171825,3.286090,-0.857813,-6.026100,0.280218,-8.217771,-4.134940,1.860712,8.133497,2.324860,-3.248390,0.817904,0.101953,-3.835024,2.371184,9.398453,7.614621,4.730339,0.403167,9.412089,3.283674,6.279816,0.729201,-4.001226,3.916559,5.456242,9.095614,7.849304,0.322828,8.878846,-6.756838,-4.463791,9.857683,3.115282,-6.567770,6.699728,6.686448,7.373920,0.622260,9.231063,4.340500,-9.865164,-9.318951,2.143531,-7.630239,-4.651378,6.237560,-1.384353,-2.942908,8.528158,1.466181,-3.660930,6.906458,0.420172,-7.671830,-2.698687,6.357101,-9.350405,-0.062977,-3.599595,6.851849,-2.187304,6.825500,8.259883,-2.070845,-3.970271,-1.271290,-3.738125,-1.887171,-9.133122,1.766172,-4.802280,-5.874498,-3.121567,-1.674219,6.527016,0.259337,-5.539541,-8.874646,-2.964256,-1.539676,-8.165098,0.317358,0.335718,-4.059932,-9.862848,-8.756790,2.273703,-5.468643,1.086586,-0.227051,-2.674826,-2.676317,-3.667505,-9.281059,-3.240772,-8.628132,7.911054,4.477646,9.281367,0.906378,1.298217,4.856054,-0.480455,-1.334412,-9.526669,-8.888978,-2.162144,-0.560303,6.616495,7.899029,4.770146,4.551364,-7.031640,7.944021,-1.259222,9.972274,-8.399852,-9.268072,-1.292495,1.923999,2.816064,8.920424,-6.058346,2.966261,0.351316,0.518497,-2.820250,7.822919,-1.682842,-2.159916,7.459641,-8.943257,-0.803700,-3.657207,-9.862296,-0.892508,3.611988,0.143925,0.672551,-9.040320,-3.294138,5.451375,-8.286881,2.280849,-4.180019,9.209540,2.195550,6.079081,2.958154], dtype = "float32")#candidate|6844|(600,)|const|float32
call_6843 = relay.TupleGetItem(func_3672_call(relay.reshape(const_6844.astype('float32'), [600,])), 0)
call_6845 = relay.TupleGetItem(func_3674_call(relay.reshape(const_6844.astype('float32'), [600,])), 0)
func_4700_call = mod.get_global_var('func_4700')
func_4704_call = mutated_mod.get_global_var('func_4704')
var_6858 = relay.var("var_6858", dtype = "float32", shape = (588,))#candidate|6858|(588,)|var|float32
call_6857 = func_4700_call(relay.reshape(var_6858.astype('float32'), [7, 7, 12]), relay.reshape(var_6858.astype('float32'), [7, 7, 12]), )
call_6859 = func_4700_call(relay.reshape(var_6858.astype('float32'), [7, 7, 12]), relay.reshape(var_6858.astype('float32'), [7, 7, 12]), )
func_511_call = mod.get_global_var('func_511')
func_512_call = mutated_mod.get_global_var('func_512')
call_6860 = func_511_call()
call_6861 = func_511_call()
func_2516_call = mod.get_global_var('func_2516')
func_2518_call = mutated_mod.get_global_var('func_2518')
call_6862 = func_2516_call()
call_6863 = func_2516_call()
func_3962_call = mod.get_global_var('func_3962')
func_3963_call = mutated_mod.get_global_var('func_3963')
call_6864 = relay.TupleGetItem(func_3962_call(), 0)
call_6865 = relay.TupleGetItem(func_3963_call(), 0)
output = relay.Tuple([call_6751,var_6778,uop_6797,call_6838,call_6843,const_6844,call_6857,var_6858,call_6860,call_6862,call_6864,])
output2 = relay.Tuple([call_6752,var_6778,uop_6799,call_6839,call_6845,const_6844,call_6859,var_6858,call_6861,call_6863,call_6865,])
func_6867 = relay.Function([var_6778,var_6858,], output)
mod['func_6867'] = func_6867
mod = relay.transform.InferType()(mod)
var_6868 = relay.var("var_6868", dtype = "float32", shape = (1300,))#candidate|6868|(1300,)|var|float32
var_6869 = relay.var("var_6869", dtype = "float32", shape = (588,))#candidate|6869|(588,)|var|float32
output = func_6867(var_6868,var_6869,)
func_6870 = relay.Function([var_6868,var_6869,], output)
mutated_mod['func_6870'] = func_6870
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6373_call = mod.get_global_var('func_6373')
func_6375_call = mutated_mod.get_global_var('func_6375')
call_6884 = relay.TupleGetItem(func_6373_call(), 2)
call_6885 = relay.TupleGetItem(func_6375_call(), 2)
func_4468_call = mod.get_global_var('func_4468')
func_4470_call = mutated_mod.get_global_var('func_4470')
call_6909 = relay.TupleGetItem(func_4468_call(), 0)
call_6910 = relay.TupleGetItem(func_4470_call(), 0)
output = relay.Tuple([call_6884,call_6909,])
output2 = relay.Tuple([call_6885,call_6910,])
func_6912 = relay.Function([], output)
mod['func_6912'] = func_6912
mod = relay.transform.InferType()(mod)
output = func_6912()
func_6913 = relay.Function([], output)
mutated_mod['func_6913'] = func_6913
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4922_call = mod.get_global_var('func_4922')
func_4923_call = mutated_mod.get_global_var('func_4923')
call_6914 = func_4922_call()
call_6915 = func_4922_call()
output = call_6914
output2 = call_6915
func_6919 = relay.Function([], output)
mod['func_6919'] = func_6919
mod = relay.transform.InferType()(mod)
output = func_6919()
func_6920 = relay.Function([], output)
mutated_mod['func_6920'] = func_6920
mutated_mod = relay.transform.InferType()(mutated_mod)
func_3428_call = mod.get_global_var('func_3428')
func_3430_call = mutated_mod.get_global_var('func_3430')
call_6938 = relay.TupleGetItem(func_3428_call(), 0)
call_6939 = relay.TupleGetItem(func_3430_call(), 0)
func_2444_call = mod.get_global_var('func_2444')
func_2445_call = mutated_mod.get_global_var('func_2445')
call_6944 = relay.TupleGetItem(func_2444_call(), 0)
call_6945 = relay.TupleGetItem(func_2445_call(), 0)
uop_6961 = relay.exp(call_6944.astype('float64')) # shape=(3, 7, 11)
uop_6963 = relay.exp(call_6945.astype('float64')) # shape=(3, 7, 11)
output = relay.Tuple([call_6938,uop_6961,])
output2 = relay.Tuple([call_6939,uop_6963,])
func_6964 = relay.Function([], output)
mod['func_6964'] = func_6964
mod = relay.transform.InferType()(mod)
mutated_mod['func_6964'] = func_6964
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6964_call = mutated_mod.get_global_var('func_6964')
call_6965 = func_6964_call()
output = call_6965
func_6966 = relay.Function([], output)
mutated_mod['func_6966'] = func_6966
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2342_call = mod.get_global_var('func_2342')
func_2344_call = mutated_mod.get_global_var('func_2344')
call_6967 = relay.TupleGetItem(func_2342_call(), 0)
call_6968 = relay.TupleGetItem(func_2344_call(), 0)
output = relay.Tuple([call_6967,])
output2 = relay.Tuple([call_6968,])
func_6969 = relay.Function([], output)
mod['func_6969'] = func_6969
mod = relay.transform.InferType()(mod)
output = func_6969()
func_6970 = relay.Function([], output)
mutated_mod['func_6970'] = func_6970
mutated_mod = relay.transform.InferType()(mutated_mod)
func_2611_call = mod.get_global_var('func_2611')
func_2612_call = mutated_mod.get_global_var('func_2612')
call_6985 = func_2611_call()
call_6986 = func_2611_call()
func_5024_call = mod.get_global_var('func_5024')
func_5025_call = mutated_mod.get_global_var('func_5025')
call_6993 = func_5024_call()
call_6994 = func_5024_call()
func_466_call = mod.get_global_var('func_466')
func_469_call = mutated_mod.get_global_var('func_469')
var_7025 = relay.var("var_7025", dtype = "float32", shape = (60, 10))#candidate|7025|(60, 10)|var|float32
call_7024 = relay.TupleGetItem(func_466_call(relay.reshape(call_6993.astype('float64'), [15, 5, 15]), relay.reshape(var_7025.astype('float32'), [600,]), ), 4)
call_7026 = relay.TupleGetItem(func_469_call(relay.reshape(call_6993.astype('float64'), [15, 5, 15]), relay.reshape(var_7025.astype('float32'), [600,]), ), 4)
bop_7043 = relay.equal(var_7025.astype('bool'), relay.reshape(call_7024.astype('bool'), relay.shape_of(var_7025))) # shape=(60, 10)
bop_7046 = relay.equal(var_7025.astype('bool'), relay.reshape(call_7026.astype('bool'), relay.shape_of(var_7025))) # shape=(60, 10)
output = relay.Tuple([call_6985,call_6993,bop_7043,])
output2 = relay.Tuple([call_6986,call_6994,bop_7046,])
func_7053 = relay.Function([var_7025,], output)
mod['func_7053'] = func_7053
mod = relay.transform.InferType()(mod)
var_7054 = relay.var("var_7054", dtype = "float32", shape = (60, 10))#candidate|7054|(60, 10)|var|float32
output = func_7053(var_7054)
func_7055 = relay.Function([var_7054], output)
mutated_mod['func_7055'] = func_7055
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6912_call = mod.get_global_var('func_6912')
func_6913_call = mutated_mod.get_global_var('func_6913')
call_7079 = relay.TupleGetItem(func_6912_call(), 1)
call_7080 = relay.TupleGetItem(func_6913_call(), 1)
func_1910_call = mod.get_global_var('func_1910')
func_1914_call = mutated_mod.get_global_var('func_1914')
const_7085 = relay.const([-4,7,9,5,1,-10,1,4,-3,4,4,3,10,4,-8,6,4,-1,-3,-10,-10,-3,10,-8,4,3,5,9,9,-5,10,8,5,8,-8,6,1,-10,9,-3,7,-2,1,10,-3,-6,-6,-9,-6,1,-5,1,-6,-6,6,-7,5,-9,-1,4,-6,8,-7,-5,6,-6,-2,-9,-5,-3,-4,7,-2,-6,5,-10,2,-5,9,-9,-5,-5,1,5,-1,-8,3,-6,2,-9,-4,2,-8,-3,6,-1,-9,7,-2,-6,5,8,1,-2,-6,4,1,-5,2,8,-2,-8,-7,8,1,2,2,-3,-6,8,5,1,7,-9,-4,6,7,-6,10,2,10,7,-6,2,3,-3,3,8,-1,-10,5,-10,9,5,-10,3,2,1,-10,9,5,6,9,-10,1,5,4,-8,-3,-4,-1,4,-7,-5,-8,-2,8,10,10,-8,-8,10,-10,8,-1,-10,-9,10,-7,-5,-9,9,3,-7,-1,-7,-7,2,-5,-5,-3,3,-7,-10,-7,-1,-1,6,-2,-8,-7,2,2,-5,4,-5,5,1,-8,8,7,4,2,4,4,-6,7,-6,2,5,-1,5,8,-8,8,-4,9,-2,9,-4,-6,-3,-8,3,10,6,-8,-7,-8,5,-3,8,6,-5,-6,7,1,6,-8,-9,-8,-10,-7,-5,2,-10,6,8,-8,6,-4,-7,-2,4,1,-8,10,7,5,-4,-9,-1,-2,8,2,5,8,10,-4,-2,8,6,-10,-5,5,9,4,1,-10,8,-5,-7,7,-5,-2,8,10,7,-10,-4,-4,9,4,-5,-10,-8,8,-10,-5,-5,-3,-6,-10,-3,-7,-5,10,8,5,10,-8,4,6,-10,8,-7,-2,-4,-7,-5,3,-3,4,-1,-7,-8,-1,-1,-6,-5,10,-7,-6,7,9,-6,-9,-9,2,-4,1,6,-6,-9,9,7,8,2,-7,7,-8,-10,4,2,9,7,-9,4,-1,8,-6,1,-10,-10,-1,-3,-10,10,4,1,7,3,-2,-3,-7,5,7,9,-9,2,-6,1,-2,1,2,-7,-2,8,7,-7,2,2,-7,7,-10,6,-6,1,9,-3,-3,-1,-1,9,10,-6,9,4,-7,-2,9,-2,-8,-2,6,-9,6,-4,-8,-6,-8,-3,-10,-4,5,5,-5,-9,-1,-9,6,6,7,10,-2,6,-1,-8,5,8,-8,-3,10,-6,-5,-10,1,5,-7,-3,-3,10,7,5,-1,-1,-5,-2,6,-10,10,-4,-7,1,5,-2,5,2,-1,4,-9,-9,-9,3,-8,8,2,-3,10,2,9,4,5,6,5,8,-6,10,9,-3,-6,-6,-3,-9,2,10,5,-7,-2,-8,4,-10,-2,-6,-6,7,9,2,4,-7,-3,10,-1,-10,-10,7,-4,-4,9,-7,-8,9,-2,9,4,-2,1,7,-9,-4,-7,4,-9,-8,-10,-5,3,-4,-7,-9,-9,6,-5,3,-1,-4,1,10,8,-10,4,5,-1,10,-3,7,-4,-5,7,2,6,-6,3,7,-3,8,-2,3,-5,1,6,2,-10,-8,5,-7,-3,8,-9,7,-1,7,9,7,7,-2,6,10,2,-5,7,8,6,-7,-10,-7,1,-2,-6,-4,9,-3,-1,2,-2,-10,8,-10,-5,-9,3,-4,10,5,-9,8,-7,2,7,-1,1,-9,-3,-5,-9,-1,-10,7,3,5,-2,-9,-5,7,4,-2,-3,-4,-9,-5,3,1,1,3,-3,-7,3,-4,-6,2,-10,5,-5,-2,-7,-3,2,-4,-5,8,-9,-2,10,3,-6,-6,-9,-4,7,9,10,6,9,5,-1,1,-8,2,-9,-4,2,-3,-8,-7,2,2,-1,4,-10,-5,1,-1,-9,7,-10,2,10,4,4,-4,1,-8,4,-4,10,5,3,10,-7,-1,9,-10,1,-6,9,-3,8,3,-3,6,6,5,-5,3,-6,-10,8,-4,4,-5,-2,3,10,-1,3,-8,-9,8,2,6,6,10,6,2,-6,2,5,-9,3,10,9,5,-3,-2,6,10,3,-5,-6,8,-4,-1,8,-4,3,-9,3,10,8,-10,9,-6,2,1,8,1,2,9,-3,2,-8,-8,-4,-9,-10,9,-1,-4,-8,-2,-6,6,-6,-9,1,-6,-2,-2,-3,-1,9,6,6,-2,7,-1,-8,3,4,-4,-3,4,5,4,-6,-2,-6,5,-10,-6,-3,-2,-4,7,-6,2,1,7,-3,-3,7,-2,-8,4,-3,5,-7,-7,9,-10,-4,4,-10,1,-1,2,4,2,-10,7,9,1,8,-9,-3,4,1,5,9,5,-2,2,1,-5,-10,-8,6,-7,9,-3,-4,2,-5,7,10,-7,-8,-8,3,-2,10,4,-9,-2,8,1,-2,-7,9,-4,7,3,2,-8,7,-10,10,-2,-8,9,10,7,-4,-3,-10,2,-10,-5,-8,-9,-3,-1,6,5,-2,9,-4,-5,1,-1,-7,-10,-10,1,-8,-3,1,7,1,-1,-4,-4,9,1,9,10,-7,-5,5,-2,-10,7,1,1,4,3,-4,-8,-6,2,-1,3,5,4,8,5,3,9,6,5,2,7,5,-9,-6,-8,3,4,1,-8,-6,-7,6,2,-4,1,-5,3,6,2,-3,9,-4,-6,3,-4,-10,7,-6,8,-7,9,-7,-3,4,-7,6,7,-8,-4,8,9,10,-3,-6,10,2,-5,-2,4,-4,3,4,9,-2,5,3,-9,10,1,5,-1,-1,-5,-7,-6,-9,-10,-10,7,1,3,5,-9,4,-1,1,5,8,-4,-9,5,-1,3,5,-7,-3,2,-2,3,1,4,-5,4,9,10,10,7,4,5,9,6,2,-10,-1,10,-6,-5,-5,6,-7,-1,-4,8,-8,7,-7,-1,-5,3,3,-7,10,-10,1,9,4,6,-10,-8,-1,8,-10,-5,10,-10,-1,-10,8,-6,-5,8,-4,-9,-1,3,-2,8,-9,-6,10,2,10,2,3], dtype = "uint16")#candidate|7085|(1125,)|const|uint16
call_7084 = relay.TupleGetItem(func_1910_call(relay.reshape(call_7079.astype('float32'), [600,]), relay.reshape(const_7085.astype('uint16'), [15, 5, 15]), ), 1)
call_7086 = relay.TupleGetItem(func_1914_call(relay.reshape(call_7079.astype('float32'), [600,]), relay.reshape(const_7085.astype('uint16'), [15, 5, 15]), ), 1)
func_1446_call = mod.get_global_var('func_1446')
func_1447_call = mutated_mod.get_global_var('func_1447')
call_7087 = func_1446_call()
call_7088 = func_1446_call()
func_4468_call = mod.get_global_var('func_4468')
func_4470_call = mutated_mod.get_global_var('func_4470')
call_7092 = relay.TupleGetItem(func_4468_call(), 0)
call_7093 = relay.TupleGetItem(func_4470_call(), 0)
output = relay.Tuple([call_7079,call_7084,const_7085,call_7087,call_7092,])
output2 = relay.Tuple([call_7080,call_7086,const_7085,call_7088,call_7093,])
func_7096 = relay.Function([], output)
mod['func_7096'] = func_7096
mod = relay.transform.InferType()(mod)
mutated_mod['func_7096'] = func_7096
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7096_call = mutated_mod.get_global_var('func_7096')
call_7097 = func_7096_call()
output = call_7097
func_7098 = relay.Function([], output)
mutated_mod['func_7098'] = func_7098
mutated_mod = relay.transform.InferType()(mutated_mod)
func_5869_call = mod.get_global_var('func_5869')
func_5870_call = mutated_mod.get_global_var('func_5870')
call_7118 = func_5869_call()
call_7119 = func_5869_call()
var_7127 = relay.var("var_7127", dtype = "float64", shape = (15, 5, 15))#candidate|7127|(15, 5, 15)|var|float64
bop_7128 = relay.less(call_7118.astype('bool'), relay.reshape(var_7127.astype('bool'), relay.shape_of(call_7118))) # shape=(15, 5, 15)
bop_7131 = relay.less(call_7119.astype('bool'), relay.reshape(var_7127.astype('bool'), relay.shape_of(call_7119))) # shape=(15, 5, 15)
func_5989_call = mod.get_global_var('func_5989')
func_5991_call = mutated_mod.get_global_var('func_5991')
call_7133 = func_5989_call()
call_7134 = func_5989_call()
output = relay.Tuple([bop_7128,call_7133,])
output2 = relay.Tuple([bop_7131,call_7134,])
func_7138 = relay.Function([var_7127,], output)
mod['func_7138'] = func_7138
mod = relay.transform.InferType()(mod)
var_7139 = relay.var("var_7139", dtype = "float64", shape = (15, 5, 15))#candidate|7139|(15, 5, 15)|var|float64
output = func_7138(var_7139)
func_7140 = relay.Function([var_7139], output)
mutated_mod['func_7140'] = func_7140
mutated_mod = relay.transform.InferType()(mutated_mod)
func_4584_call = mod.get_global_var('func_4584')
func_4586_call = mutated_mod.get_global_var('func_4586')
call_7142 = relay.TupleGetItem(func_4584_call(), 1)
call_7143 = relay.TupleGetItem(func_4586_call(), 1)
output = call_7142
output2 = call_7143
func_7144 = relay.Function([], output)
mod['func_7144'] = func_7144
mod = relay.transform.InferType()(mod)
mutated_mod['func_7144'] = func_7144
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7144_call = mutated_mod.get_global_var('func_7144')
call_7145 = func_7144_call()
output = call_7145
func_7146 = relay.Function([], output)
mutated_mod['func_7146'] = func_7146
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7191 = relay.var("var_7191", dtype = "float64", shape = (15, 4, 15))#candidate|7191|(15, 4, 15)|var|float64
uop_7192 = relay.asinh(var_7191.astype('float64')) # shape=(15, 4, 15)
uop_7197 = relay.cos(uop_7192.astype('float32')) # shape=(15, 4, 15)
uop_7199 = relay.sigmoid(uop_7197.astype('float32')) # shape=(15, 4, 15)
func_4032_call = mod.get_global_var('func_4032')
func_4034_call = mutated_mod.get_global_var('func_4034')
call_7212 = relay.TupleGetItem(func_4032_call(), 0)
call_7213 = relay.TupleGetItem(func_4034_call(), 0)
output = relay.Tuple([uop_7199,call_7212,])
output2 = relay.Tuple([uop_7199,call_7213,])
func_7214 = relay.Function([var_7191,], output)
mod['func_7214'] = func_7214
mod = relay.transform.InferType()(mod)
mutated_mod['func_7214'] = func_7214
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7215 = relay.var("var_7215", dtype = "float64", shape = (15, 4, 15))#candidate|7215|(15, 4, 15)|var|float64
func_7214_call = mutated_mod.get_global_var('func_7214')
call_7216 = func_7214_call(var_7215)
output = call_7216
func_7217 = relay.Function([var_7215], output)
mutated_mod['func_7217'] = func_7217
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6969_call = mod.get_global_var('func_6969')
func_6970_call = mutated_mod.get_global_var('func_6970')
call_7295 = relay.TupleGetItem(func_6969_call(), 0)
call_7296 = relay.TupleGetItem(func_6970_call(), 0)
var_7304 = relay.var("var_7304", dtype = "float64", shape = (3, 7, 11))#candidate|7304|(3, 7, 11)|var|float64
bop_7305 = relay.multiply(call_7295.astype('int32'), relay.reshape(var_7304.astype('int32'), relay.shape_of(call_7295))) # shape=(3, 7, 11)
bop_7308 = relay.multiply(call_7296.astype('int32'), relay.reshape(var_7304.astype('int32'), relay.shape_of(call_7296))) # shape=(3, 7, 11)
output = bop_7305
output2 = bop_7308
func_7311 = relay.Function([var_7304,], output)
mod['func_7311'] = func_7311
mod = relay.transform.InferType()(mod)
var_7312 = relay.var("var_7312", dtype = "float64", shape = (3, 7, 11))#candidate|7312|(3, 7, 11)|var|float64
output = func_7311(var_7312)
func_7313 = relay.Function([var_7312], output)
mutated_mod['func_7313'] = func_7313
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7424 = relay.var("var_7424", dtype = "bool", shape = (9, 9, 8))#candidate|7424|(9, 9, 8)|var|bool
var_7425 = relay.var("var_7425", dtype = "bool", shape = (9, 9, 8))#candidate|7425|(9, 9, 8)|var|bool
bop_7426 = relay.logical_and(var_7424.astype('bool'), relay.reshape(var_7425.astype('bool'), relay.shape_of(var_7424))) # shape=(9, 9, 8)
func_4816_call = mod.get_global_var('func_4816')
func_4818_call = mutated_mod.get_global_var('func_4818')
var_7433 = relay.var("var_7433", dtype = "float32", shape = (1, 1300))#candidate|7433|(1, 1300)|var|float32
call_7432 = relay.TupleGetItem(func_4816_call(relay.reshape(var_7433.astype('float32'), [130, 10])), 0)
call_7434 = relay.TupleGetItem(func_4818_call(relay.reshape(var_7433.astype('float32'), [130, 10])), 0)
output = relay.Tuple([bop_7426,call_7432,var_7433,])
output2 = relay.Tuple([bop_7426,call_7434,var_7433,])
func_7435 = relay.Function([var_7424,var_7425,var_7433,], output)
mod['func_7435'] = func_7435
mod = relay.transform.InferType()(mod)
mutated_mod['func_7435'] = func_7435
mutated_mod = relay.transform.InferType()(mutated_mod)
func_7435_call = mutated_mod.get_global_var('func_7435')
var_7437 = relay.var("var_7437", dtype = "bool", shape = (9, 9, 8))#candidate|7437|(9, 9, 8)|var|bool
var_7438 = relay.var("var_7438", dtype = "bool", shape = (9, 9, 8))#candidate|7438|(9, 9, 8)|var|bool
var_7439 = relay.var("var_7439", dtype = "float32", shape = (1, 1300))#candidate|7439|(1, 1300)|var|float32
call_7436 = func_7435_call(var_7437,var_7438,var_7439,)
output = call_7436
func_7440 = relay.Function([var_7437,var_7438,var_7439,], output)
mutated_mod['func_7440'] = func_7440
mutated_mod = relay.transform.InferType()(mutated_mod)
func_6299_call = mod.get_global_var('func_6299')
func_6301_call = mutated_mod.get_global_var('func_6301')
call_7501 = relay.TupleGetItem(func_6299_call(), 0)
call_7502 = relay.TupleGetItem(func_6301_call(), 0)
func_811_call = mod.get_global_var('func_811')
func_813_call = mutated_mod.get_global_var('func_813')
call_7510 = relay.TupleGetItem(func_811_call(), 2)
call_7511 = relay.TupleGetItem(func_813_call(), 2)
var_7517 = relay.var("var_7517", dtype = "float32", shape = (600,))#candidate|7517|(600,)|var|float32
bop_7518 = relay.logical_and(call_7510.astype('bool'), relay.reshape(var_7517.astype('bool'), relay.shape_of(call_7510))) # shape=(600,)
bop_7521 = relay.logical_and(call_7511.astype('bool'), relay.reshape(var_7517.astype('bool'), relay.shape_of(call_7511))) # shape=(600,)
output = relay.Tuple([call_7501,bop_7518,])
output2 = relay.Tuple([call_7502,bop_7521,])
func_7526 = relay.Function([var_7517,], output)
mod['func_7526'] = func_7526
mod = relay.transform.InferType()(mod)
mutated_mod['func_7526'] = func_7526
mutated_mod = relay.transform.InferType()(mutated_mod)
var_7527 = relay.var("var_7527", dtype = "float32", shape = (600,))#candidate|7527|(600,)|var|float32
func_7526_call = mutated_mod.get_global_var('func_7526')
call_7528 = func_7526_call(var_7527)
output = call_7528
func_7529 = relay.Function([var_7527], output)
mutated_mod['func_7529'] = func_7529
mutated_mod = relay.transform.InferType()(mutated_mod)
func_1355_call = mod.get_global_var('func_1355')
func_1356_call = mutated_mod.get_global_var('func_1356')
call_7545 = relay.TupleGetItem(func_1355_call(), 3)
call_7546 = relay.TupleGetItem(func_1356_call(), 3)
uop_7553 = relay.cosh(call_7545.astype('float64')) # shape=(12, 10, 5)
uop_7555 = relay.cosh(call_7546.astype('float64')) # shape=(12, 10, 5)
output = uop_7553
output2 = uop_7555
F = relay.Function([], output)
mod['main'] = F
mod = relay.transform.InferType()(mod)
print('==========mod==========')
print(mod.astext(show_meta_data=False))
print('===================================')
F = relay.Function([], output2)
mutated_mod['main'] = F
mutated_mod = relay.transform.InferType()(mutated_mod)
print('==========mutated_mod==========')
print(mutated_mod.astext(show_meta_data=False))
print('===================================')
graph, lib, params = relay.build(mod, target='llvm')
module1 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp2 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp3 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp4 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module5 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp6 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp7 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp8 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
seq = Sequential([
	relay.transform.AlterOpLayout(),
	relay.transform.AnnotateSpans(),
	relay.transform.BatchingOps(),
	relay.transform.CanonicalizeCast(),
	relay.transform.CanonicalizeOps(),
	relay.transform.DeadCodeElimination(),
])
mod = seq(mod)
print(mod.astext(show_meta_data=False))
graph, lib, params = relay.build(mod, target='llvm')
module9 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp10 = relay.build_module.create_executor('graph', mod, tvm.device('llvm',0),'llvm')
intrp11 = relay.build_module.create_executor('debug', mod, tvm.device('llvm',0),'llvm')
intrp12 = relay.build_module.create_executor('vm', mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mod, target='cuda')
module13 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp14 = relay.build_module.create_executor('graph', mod, tvm.device('cuda',0),'cuda')
intrp15 = relay.build_module.create_executor('debug', mod, tvm.device('cuda',0),'cuda')
intrp16 = relay.build_module.create_executor('vm', mod, tvm.device('cuda',0),'cuda')
graph, lib, params = relay.build(mutated_mod, target='llvm')
module17 = graph_runtime.create(graph, lib, tvm.device('llvm',0))
intrp18 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('llvm',0),'llvm')
intrp19 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('llvm',0),'llvm')
intrp20 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('llvm',0),'llvm')
graph, lib, params = relay.build(mutated_mod, target='cuda')
module21 = graph_runtime.create(graph, lib, tvm.device('cuda',0))
intrp22 = relay.build_module.create_executor('graph', mutated_mod, tvm.device('cuda',0),'cuda')
intrp23 = relay.build_module.create_executor('debug', mutated_mod, tvm.device('cuda',0),'cuda')
intrp24 = relay.build_module.create_executor('vm', mutated_mod, tvm.device('cuda',0),'cuda')
