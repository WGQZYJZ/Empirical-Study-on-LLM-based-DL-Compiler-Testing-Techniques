==========mod==========
#[version = "0.0.5"]
def @func_4038() -> (Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) {
  %0 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(105, 3), int8] */, dtype="int8") /* ty=Tensor[(105, 3), int8] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(105, 3), int8] */, dtype="int8") /* ty=Tensor[(105, 3), int8] */;
  %3 = reshape(%1, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %4 = reshape(%2, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %5 = @func_1191(%3, %4) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(288, 1), float32] */, dtype="float32") /* ty=Tensor[(288, 1), float32] */;
  %7 = reshape(%6, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %8 = @func_1598(%7) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %9 = %0.0;
  %10 = %5.0;
  %11 = %8.0;
  (%9, %10, meta[relay.Constant][0] /* ty=Tensor[(105, 3), int8] */, %11, meta[relay.Constant][1] /* ty=Tensor[(288, 1), float32] */)
}

def @func_5302(%var_5292: Tensor[(9, 1, 1), int32]) -> Tensor[(9, 3, 2), int32] {
  %12 = cast(%var_5292, dtype="int32") /* ty=Tensor[(9, 1, 1), int32] */;
  %13 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(9, 3, 2), int32] */;
  bitwise_xor(%12, %13) /* ty=Tensor[(9, 3, 2), int32] */
}

def @func_6257(%var_6253: Tensor[(315), int8]) -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(882), float64], Tensor[(520), uint64], Tensor[(3, 15, 7), int8], Tensor[(315), int8]) {
  %14 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %16 = cast(%14, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %17 = cast(meta[relay.Constant][3] /* ty=Tensor[(520), uint64] */, dtype="uint64") /* ty=Tensor[(520), uint64] */;
  %18 = cast(meta[relay.Constant][3] /* ty=Tensor[(520), uint64] */, dtype="uint64") /* ty=Tensor[(520), uint64] */;
  %19 = reshape(%17, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %20 = reshape(%18, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %21 = @func_2392(%19, %20) /* ty=(Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) */;
  %22 = cast(%var_6253, dtype="int8") /* ty=Tensor[(315), int8] */;
  %23 = cast(%var_6253, dtype="int8") /* ty=Tensor[(315), int8] */;
  %24 = reshape(%22, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %25 = reshape(%23, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %26 = @func_1191(%24, %25) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %27 = sinh(%15) /* ty=Tensor[(8, 5, 12), float32] */;
  %28 = atanh(%16) /* ty=Tensor[(8, 5, 12), float32] */;
  %29 = %21.3;
  %30 = %26.0;
  (%27, %28, %29, meta[relay.Constant][3] /* ty=Tensor[(520), uint64] */, %30, %var_6253)
}

def @func_5231() -> (Tensor[(8, 5, 12), float64],) {
  %31 = @func_5020() /* ty=(Tensor[(8, 5, 12), float64],) */;
  %32 = %31.0;
  (%32,)
}

def @func_3800() -> (Tensor[(8, 5, 12), bool],) {
  %33 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %34 = %33.0;
  (%34,)
}

def @func_5622() -> Tensor[(8, 5, 12), float64] {
  %35 = @func_5020() /* ty=(Tensor[(8, 5, 12), float64],) */;
  %36 = %35.0;
  %37 = cast(%36, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  acosh(%37) /* ty=Tensor[(8, 5, 12), float64] */
}

def @func_4004() -> (Tensor[(8, 5, 12), bool],) {
  %38 = @func_3800() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %39 = %38.0;
  (%39,)
}

def @func_5241(%var_5236: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), uint32] {
  %40 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %41 = %40.0;
  %42 = cast(%var_5236, dtype="uint32") /* ty=Tensor[(8, 5, 12), uint32] */;
  %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
  %44 = cast(%41, dtype="uint32") /* ty=Tensor[(8, 5, 12), uint32] */;
  %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  left_shift(%44, %45) /* ty=Tensor[(8, 5, 12), uint32] */
}

def @func_5089() -> (Tensor[(8, 5, 12), bool],) {
  %46 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %47 = %46.0;
  (%47,)
}

def @func_4536() -> Tensor[(8, 5, 12), float32] {
  %48 = @func_4502() /* ty=Tensor[(8, 5, 12), int16] */;
  %49 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 5, 12), int16] */, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %50 = shape_of(%48, dtype="int32") /* ty=Tensor[(3), int32] */;
  %51 = cast(%48, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %52 = dyn.reshape(%49, %50, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%51, %52) /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_5668() -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32]) {
  %53 = @func_4733() /* ty=(Tensor[(8, 5, 12), float32],) */;
  %54 = @func_4536() /* ty=Tensor[(8, 5, 12), float32] */;
  %55 = %53.0;
  (%54, %55)
}

def @func_1191(%var_1183: Tensor[(3, 15, 7), int8], %var_1184: Tensor[(3, 15, 7), int8]) -> (Tensor[(3, 15, 7), int8],) {
  %56 = cast(%var_1184, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %57 = shape_of(%var_1183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %58 = cast(%var_1183, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %59 = dyn.reshape(%56, %57, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %60 = bitwise_and(%58, %59) /* ty=Tensor[(3, 15, 7), int8] */;
  (%60,)
}

def @func_303(%var_223: int16, %var_224: Tensor[(1, 5, 2), int16], %var_236: Tensor[(882), float64], %var_262: Tensor[(882), float64]) -> (Tensor[(?, 5, 2), float64], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(14, 7, 9), float64], Tensor[(14, 7, 9), float64], Tensor[(882), uint16], Tensor[(9, 3, 2), bool], Tensor[(14, 7, 9), float64], Tensor[(1, 5, 2), float32], Tensor[(9, 3, 2), bool]) {
  %61 = cast(%var_223, dtype="int16") /* ty=int16 */;
  %62 = cast(%var_224, dtype="int16") /* ty=Tensor[(1, 5, 2), int16] */;
  %63 = maximum(%61, %62) /* ty=Tensor[(1, 5, 2), int16] */;
  %64 = cast(%63, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  %65 = shape_of(%var_224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_224, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %68 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %69 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %70 = cast(%var_236, dtype="float64") /* ty=Tensor[(882), float64] */;
  %71 = reshape(%68, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %72 = reshape(%69, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %73 = reshape(%70, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %74 = @func_112(%71, %72, %73) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %75 = cast(%var_236, dtype="float64") /* ty=Tensor[(882), float64] */;
  %76 = reshape(%75, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %77 = cast(%var_236, dtype="float64") /* ty=Tensor[(882), float64] */;
  %78 = reshape(%77, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %79 = %74.1;
  %80 = cast(%79, dtype="int64") /* ty=Tensor[(9, 3, 2), int64] */;
  %81 = cast(%79, dtype="int64") /* ty=Tensor[(9, 3, 2), int64] */;
  %82 = @func_71(%76) /* ty=Tensor[(14, 7, 9), float64] */;
  %83 = cast(%82, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  %84 = reshape(%80, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %85 = reshape(%81, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %86 = reshape(%83, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %87 = @func_112(%84, %85, %86) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %88 = %87.3;
  %89 = cast(%var_262, dtype="uint16") /* ty=Tensor[(882), uint16] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(1), int32] */;
  %91 = cast(%88, dtype="uint16") /* ty=Tensor[(882), uint16] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %93 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %94 = cast(%79, dtype="int64") /* ty=Tensor[(9, 3, 2), int64] */;
  %95 = cast(%88, dtype="float64") /* ty=Tensor[(882), float64] */;
  %96 = reshape(%93, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %97 = reshape(%94, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %98 = reshape(%95, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %99 = @func_112(%96, %97, %98) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %100 = maximum(%91, %92) /* ty=Tensor[(882), uint16] */;
  %101 = cast(%100, dtype="float64") /* ty=Tensor[(882), float64] */;
  %102 = reshape(%101, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %103 = cast(%63, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  %104 = acosh(%103) /* ty=Tensor[(1, 5, 2), float64] */;
  %105 = cast(%104, dtype="float32") /* ty=Tensor[(1, 5, 2), float32] */;
  %106 = acos(%105) /* ty=Tensor[(1, 5, 2), float32] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(1, 5, 2), float32] */;
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %109 = cast(meta[relay.Constant][5] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %110 = @func_71(%78) /* ty=Tensor[(14, 7, 9), float64] */;
  %111 = cast(%110, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  %112 = reshape(%108, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %113 = reshape(%109, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %114 = reshape(%111, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %115 = @func_112(%112, %113, %114) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %116 = floor_divide(%66, %67) /* ty=Tensor[(?, 5, 2), float64] */;
  %117 = %99.0;
  %118 = @func_71(%102) /* ty=Tensor[(14, 7, 9), float64] */;
  %119 = cos(%107) /* ty=Tensor[(1, 5, 2), float32] */;
  %120 = %115.0;
  (%116, %79, meta[relay.Constant][5] /* ty=Tensor[(54), int64] */, %var_236, %82, %110, %100, %117, %118, %119, %120)
}

def @func_1753(%var_1714: Tensor[(12, 15, 14), float64], %var_1749: int16, %var_1750: Tensor[(10), int16]) -> (Tensor[(12, 15, 14), float64], Tensor[(12, 15, 14), int64], Tensor[(882), uint16], int16, Tensor[(10), int16], Tensor[(882), float64]) {
  %121 = cast(%var_1714, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
  %122 = cast(%var_1714, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
  %123 = exp(%122) /* ty=Tensor[(12, 15, 14), float64] */;
  %124 = cast(%123, dtype="int64") /* ty=Tensor[(12, 15, 14), int64] */;
  %125 = shape_of(%var_1714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%var_1714, dtype="int64") /* ty=Tensor[(12, 15, 14), int64] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %128 = cast(%var_1749, dtype="int16") /* ty=int16 */;
  %129 = cast(%var_1750, dtype="int16") /* ty=Tensor[(10), int16] */;
  %130 = cast(meta[relay.Constant][6] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %131 = cast(meta[relay.Constant][6] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %132 = reshape(%128, newshape=[]) /* ty=int16 */;
  %133 = reshape(%129, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), int16] */;
  %134 = reshape(%130, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %135 = reshape(%131, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %136 = @func_303(%132, %133, %134, %135) /* ty=(Tensor[(?, 5, 2), float64], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(14, 7, 9), float64], Tensor[(14, 7, 9), float64], Tensor[(882), uint16], Tensor[(9, 3, 2), bool], Tensor[(14, 7, 9), float64], Tensor[(1, 5, 2), float32], Tensor[(9, 3, 2), bool]) */;
  %137 = rsqrt(%121) /* ty=Tensor[(12, 15, 14), float64] */;
  %138 = multiply(%126, %127) /* ty=Tensor[(12, 15, 14), int64] */;
  %139 = %136.6;
  (%137, %138, %139, %var_1749, %var_1750, meta[relay.Constant][6] /* ty=Tensor[(882), float64] */)
}

def @func_4996(%var_4987: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), float32] {
  %140 = cast(%var_4987, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  atan(%140) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_2069(%var_2056: Tensor[(7, 16, 3), float64]) -> (Tensor[(7, 16, 3), float64],) {
  %141 = cast(%var_2056, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %142 = cos(%141) /* ty=Tensor[(7, 16, 3), float64] */;
  (%142,)
}

def @func_5020() -> (Tensor[(8, 5, 12), float64],) {
  %143 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %144 = %143.0;
  %145 = cast(%144, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  %146 = erf(%145) /* ty=Tensor[(8, 5, 12), float64] */;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  %148 = log10(%147) /* ty=Tensor[(8, 5, 12), float64] */;
  (%148,)
}

def @func_3764() -> (Tensor[(8, 5, 12), bool],) {
  %149 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  (%149,)
}

def @func_5405(%var_5323: Tensor[(7, 14, 12), float64], %var_5386: Tensor[(7, 14, 12), float64]) -> (Tensor[(7, 14, 12), float32], Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(7, 14, 12), uint16], Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(99), float32], Tensor[(2160), float32], Tensor[(8, 5, 12), bool], Tensor[(7, 14, 12), int64]) {
  %150 = cast(%var_5323, dtype="float32") /* ty=Tensor[(7, 14, 12), float32] */;
  %151 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %152 = cast(%var_5323, dtype="float64") /* ty=Tensor[(7, 14, 12), float64] */;
  %153 = asin(%152) /* ty=Tensor[(7, 14, 12), float64] */;
  %154 = cast(%var_5323, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
  %155 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %156 = cast(%153, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
  %157 = dyn.reshape(%154, %155, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %158 = cast(meta[relay.Constant][7] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %159 = cast(meta[relay.Constant][8] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %160 = reshape(%158, newshape=[33, 3]) /* ty=Tensor[(33, 3), float32] */;
  %161 = reshape(%159, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %162 = @func_5179(%160, %161) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(11, 9, ?), float64], Tensor[(180, 12), float64]) */;
  %163 = @func_3800() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %164 = cast(%var_5386, dtype="int64") /* ty=Tensor[(7, 14, 12), int64] */;
  %165 = shape_of(%153, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(%153, dtype="int64") /* ty=Tensor[(7, 14, 12), int64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %168 = tan(%150) /* ty=Tensor[(7, 14, 12), float32] */;
  %169 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %170 = %151.1;
  %171 = subtract(%156, %157) /* ty=Tensor[(7, 14, 12), uint16] */;
  %172 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %173 = %162.0;
  %174 = %163.0;
  %175 = multiply(%166, %167) /* ty=Tensor[(7, 14, 12), int64] */;
  (%168, %169, %170, %171, %172, %173, meta[relay.Constant][7] /* ty=Tensor[(99), float32] */, meta[relay.Constant][8] /* ty=Tensor[(2160), float32] */, %174, %175)
}

def @func_5879(%var_5841: Tensor[(10, 7, 10), float32], %var_5866: Tensor[(10, 7, 10), float32]) -> (Tensor[(10, 7, 10), float32], Tensor[(10, 7, 10), float32], Tensor[(8, 5, 12), float32], Tensor[(10, 7, 10), bool], Tensor[(8, 5, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) {
  %176 = cast(%var_5841, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  %177 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(10, 7, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  %179 = dyn.reshape(%176, %177, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %180 = cast(%var_5841, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  %181 = cast(%var_5866, dtype="bool") /* ty=Tensor[(10, 7, 10), bool] */;
  %182 = shape_of(%var_5841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %183 = cast(%var_5841, dtype="bool") /* ty=Tensor[(10, 7, 10), bool] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %185 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %187 = reshape(%186, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %188 = @func_2069(%187) /* ty=(Tensor[(7, 16, 3), float64],) */;
  %189 = power(%178, %179) /* ty=Tensor[(10, 7, 10), float32] */;
  %190 = erf(%180) /* ty=Tensor[(10, 7, 10), float32] */;
  %191 = @func_4536() /* ty=Tensor[(8, 5, 12), float32] */;
  %192 = greater(%183, %184) /* ty=Tensor[(10, 7, 10), bool] */;
  %193 = %185.0;
  %194 = %188.0;
  (%189, %190, %191, %192, %193, %194, meta[relay.Constant][10] /* ty=Tensor[(336), float64] */)
}

def @func_71(%var_60: Tensor[(14, 7, 9), float64]) -> Tensor[(14, 7, 9), float64] {
  %195 = cast(%var_60, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  sigmoid(%195) /* ty=Tensor[(14, 7, 9), float64] */
}

def @func_5473(%var_5459: Tensor[(300), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  %196 = cast(%var_5459, dtype="float32") /* ty=Tensor[(300), float32] */;
  %197 = reshape(%196, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %198 = @func_1775(%197) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %199 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %200 = %198.0;
  (%199, %200, %var_5459)
}

def @func_3819() -> (Tensor[(8, 5, 12), bool],) {
  %201 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %202 = %201.0;
  (%202,)
}

def @func_1897(%var_1791: Tensor[(13, 4, 7), float32], %var_1820: Tensor[(13, 4, 7), float32], %var_1876: Tensor[(882), float64], %var_1886: Tensor[(315), int8]) -> (Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(300, 288), bool], Tensor[(16, 2, 9), float32], Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64], Tensor[(14, 7, 9), float64], Tensor[(882), float64], Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(315), int8], Tensor[(13, 4, 7), float32]) {
  %203 = cast(meta[relay.Constant][11] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %204 = reshape(%203, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %205 = @func_1598(%204) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %206 = cast(meta[relay.Constant][12] /* ty=Tensor[(300, 1), float32] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %207 = reshape(%206, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %208 = @func_1775(%207) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %209 = cast(meta[relay.Constant][12] /* ty=Tensor[(300, 1), float32] */, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %210 = cast(meta[relay.Constant][11] /* ty=Tensor[(288), float32] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %211 = cast(meta[relay.Constant][11] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %212 = reshape(%211, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %213 = @func_1598(%212) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %214 = cast(%var_1791, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %215 = acosh(%214) /* ty=Tensor[(13, 4, 7), float32] */;
  %216 = cast(%var_1791, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %217 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%215, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %220 = add(%218, %219) /* ty=Tensor[(13, 4, 7), float32] */;
  %221 = cast(%var_1820, dtype="bool") /* ty=Tensor[(13, 4, 7), bool] */;
  %222 = shape_of(%220, dtype="int32") /* ty=Tensor[(3), int32] */;
  %223 = cast(%220, dtype="bool") /* ty=Tensor[(13, 4, 7), bool] */;
  %224 = dyn.reshape(%221, %222, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %225 = logical_and(%223, %224) /* ty=Tensor[(13, 4, 7), bool] */;
  %226 = cast(%225, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %227 = shape_of(%215, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%215, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %230 = cast(%220, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %231 = cosh(%230) /* ty=Tensor[(13, 4, 7), float32] */;
  %232 = cast(%220, dtype="uint8") /* ty=Tensor[(13, 4, 7), uint8] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="uint8") /* ty=Tensor[(13, 4, 7), uint8] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %236 = logical_xor(%234, %235) /* ty=Tensor[(13, 4, 7), uint8] */;
  %237 = cast(%var_1791, dtype="int32") /* ty=Tensor[(13, 4, 7), int32] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="int32") /* ty=Tensor[(13, 4, 7), int32] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %241 = maximum(%239, %240) /* ty=Tensor[(13, 4, 7), int32] */;
  %242 = cast(%215, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
  %244 = cast(%241, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %246 = cast(%var_1876, dtype="float64") /* ty=Tensor[(882), float64] */;
  %247 = reshape(%246, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %248 = %213.0;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(16, 2, 9), float32] */;
  %250 = reshape(%249, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %251 = @func_1598(%250) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %252 = %208.0;
  %253 = cast(%252, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %254 = reshape(%253, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %255 = @func_1775(%254) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %256 = cast(%var_1886, dtype="int8") /* ty=Tensor[(315), int8] */;
  %257 = cast(%var_1886, dtype="int8") /* ty=Tensor[(315), int8] */;
  %258 = reshape(%256, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %259 = reshape(%257, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %260 = @func_1191(%258, %259) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %261 = cast(%236, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %262 = %205.0;
  %263 = greater(%209, %210) /* ty=Tensor[(300, 288), bool] */;
  %264 = mod(%228, %229) /* ty=Tensor[(13, 4, 7), float64] */;
  %265 = subtract(%244, %245) /* ty=Tensor[(13, 4, 7), float64] */;
  %266 = @func_71(%247) /* ty=Tensor[(14, 7, 9), float64] */;
  %267 = %251.0;
  %268 = %255.0;
  %269 = %260.0;
  %270 = cos(%261) /* ty=Tensor[(13, 4, 7), float32] */;
  (%262, %252, %263, %248, %264, %265, %266, %var_1876, %267, %268, %269, %var_1886, %270)
}

def @func_1775(%var_1771: Tensor[(5, 15, 4), float32]) -> (Tensor[(5, 15, 4), float32],) {
  %271 = cast(%var_1771, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %272 = exp(%271) /* ty=Tensor[(5, 15, 4), float32] */;
  (%272,)
}

def @main() -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(8, 5, 12), bool], Tensor[(11, 9, 2160), uint16], Tensor[(2, 12), uint16], Tensor[(99), float64]) {
  %273 = @func_5690() /* ty=(Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
  %274 = @func_6000() /* ty=(Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(15, 10, 8), uint16], Tensor[(1200), float32], Tensor[(8, 5, 12), bool]) */;
  %275 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 12), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12), uint16] */;
  %276 = cast(meta[relay.Constant][14] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %277 = reshape(%275, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), uint16] */;
  %278 = reshape(%276, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %279 = @func_1039(%277, %278) /* ty=(Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) */;
  %280 = cast(meta[relay.Constant][14] /* ty=Tensor[(99), float32] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %281 = @func_5314() /* ty=Tensor[(8, 5, 12), bool] */;
  %282 = %273.1;
  %283 = %274.4;
  %284 = %279.2;
  %285 = asin(%280) /* ty=Tensor[(99), float64] */;
  (%281, %282, %283, %284, meta[relay.Constant][13] /* ty=Tensor[(2, 12), uint16] */, %285)
}

def @func_4661(%var_4606: int32, %var_4607: Tensor[(15, 10, 4), int32], %var_4626: Tensor[(1200), float32], %var_4634: Tensor[(2520), float64]) -> (Tensor[(15, 10, 4), int32], Tensor[(2160), float32], Tensor[(1200), float32], Tensor[(882), uint16], Tensor[(2520), float64], Tensor[(10), int16], Tensor[(15, 10, 4), float32]) {
  %286 = cast(%var_4606, dtype="int32") /* ty=int32 */;
  %287 = cast(%var_4607, dtype="int32") /* ty=Tensor[(15, 10, 4), int32] */;
  %288 = cast(%var_4626, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %289 = reshape(%288, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float32] */;
  %290 = @func_4316(%289) /* ty=(Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) */;
  %291 = cast(%var_4634, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %292 = cast(%var_4606, dtype="int16") /* ty=int16 */;
  %293 = cast(meta[relay.Constant][15] /* ty=Tensor[(10), int16] */, dtype="int16") /* ty=Tensor[(10), int16] */;
  %294 = reshape(%291, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), float64] */;
  %295 = reshape(%292, newshape=[]) /* ty=int16 */;
  %296 = reshape(%293, newshape=[10]) /* ty=Tensor[(10), int16] */;
  %297 = @func_1753(%294, %295, %296) /* ty=(Tensor[(12, 15, 14), float64], Tensor[(12, 15, 14), int64], Tensor[(882), uint16], int16, Tensor[(10), int16], Tensor[(882), float64]) */;
  %298 = cast(%var_4607, dtype="float64") /* ty=Tensor[(15, 10, 4), float64] */;
  %299 = log2(%298) /* ty=Tensor[(15, 10, 4), float64] */;
  %300 = cast(%299, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %301 = bitwise_xor(%286, %287) /* ty=Tensor[(15, 10, 4), int32] */;
  %302 = %290.1;
  %303 = %297.2;
  %304 = erf(%300) /* ty=Tensor[(15, 10, 4), float32] */;
  (%301, %302, %var_4626, %303, %var_4634, meta[relay.Constant][15] /* ty=Tensor[(10), int16] */, %304)
}

def @func_2647(%var_2598: Tensor[(15, 3, 5), float64], %var_2640: Tensor[(364), float32], %var_2641: Tensor[(882), float64], %var_2642: Tensor[(315), int8]) -> (Tensor[(15, 3, 5), float64], Tensor[(15, 3, 5), float64], Tensor[(16, 2, 9), float32], Tensor[(364), float32], Tensor[(882), float64], Tensor[(315), int8]) {
  %305 = cast(%var_2598, dtype="float64") /* ty=Tensor[(15, 3, 5), float64] */;
  %306 = cast(%var_2598, dtype="float64") /* ty=Tensor[(15, 3, 5), float64] */;
  %307 = cast(%var_2640, dtype="float32") /* ty=Tensor[(364), float32] */;
  %308 = cast(%var_2640, dtype="float32") /* ty=Tensor[(364), float32] */;
  %309 = cast(%var_2641, dtype="float64") /* ty=Tensor[(882), float64] */;
  %310 = cast(%var_2642, dtype="int8") /* ty=Tensor[(315), int8] */;
  %311 = reshape(%307, newshape=[13, 4, 7]) /* ty=Tensor[(13, 4, 7), float32] */;
  %312 = reshape(%308, newshape=[13, 4, 7]) /* ty=Tensor[(13, 4, 7), float32] */;
  %313 = reshape(%309, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %314 = reshape(%310, newshape=[315]) /* ty=Tensor[(315), int8] */;
  %315 = @func_1897(%311, %312, %313, %314) /* ty=(Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(300, 288), bool], Tensor[(16, 2, 9), float32], Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64], Tensor[(14, 7, 9), float64], Tensor[(882), float64], Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(315), int8], Tensor[(13, 4, 7), float32]) */;
  %316 = acos(%305) /* ty=Tensor[(15, 3, 5), float64] */;
  %317 = log2(%306) /* ty=Tensor[(15, 3, 5), float64] */;
  %318 = %315.3;
  (%316, %317, %318, %var_2640, %var_2641, %var_2642)
}

def @func_779(%var_753: Tensor[(9, 15, 16), float32]) -> (Tensor[(9, 15, 16), int16],) {
  %319 = cast(%var_753, dtype="float32") /* ty=Tensor[(9, 15, 16), float32] */;
  %320 = tan(%319) /* ty=Tensor[(9, 15, 16), float32] */;
  %321 = cast(%var_753, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %325 = minimum(%323, %324) /* ty=Tensor[(9, 15, 16), int16] */;
  %326 = cast(%320, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %330 = bitwise_and(%328, %329) /* ty=Tensor[(9, 15, 16), int16] */;
  (%330,)
}

def @func_3514(%var_3482: Tensor[(10, 9, 12), uint8]) -> (Tensor[(10, 9, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) {
  %331 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 9, 12), uint8] */, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
  %332 = shape_of(%var_3482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_3482, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %336 = reshape(%335, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %337 = @func_2069(%336) /* ty=(Tensor[(7, 16, 3), float64],) */;
  %338 = equal(%333, %334) /* ty=Tensor[(10, 9, 12), bool] */;
  %339 = %337.0;
  (%338, %339, meta[relay.Constant][17] /* ty=Tensor[(336), float64] */)
}

def @func_1598(%var_1595: Tensor[(16, 2, 9), float32]) -> (Tensor[(16, 2, 9), float32],) {
  %340 = cast(%var_1595, dtype="float32") /* ty=Tensor[(16, 2, 9), float32] */;
  %341 = cos(%340) /* ty=Tensor[(16, 2, 9), float32] */;
  (%341,)
}

def @func_6423() -> (Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), uint32], Tensor[(8, 5, 12), float64]) {
  %342 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %343 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 5, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %344 = shape_of(%342, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%342, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %347 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 5, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %348 = reshape(%347, newshape=[8, 5, 12]) /* ty=Tensor[(8, 5, 12), bool] */;
  %349 = @func_5231() /* ty=(Tensor[(8, 5, 12), float64],) */;
  %350 = logical_and(%345, %346) /* ty=Tensor[(8, 5, 12), bool] */;
  %351 = @func_5241(%348) /* ty=Tensor[(8, 5, 12), uint32] */;
  %352 = %349.0;
  (%350, %351, %352)
}

def @func_4423(%var_4337: Tensor[(315), float64], %var_4353: Tensor[(7, 5, 9), bool], %var_4385: Tensor[(99), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(7, 5, 9), bool], Tensor[(9, 15, 16), int16], Tensor[(99), float32], Tensor[(180, 12), float32], Tensor[(3, 15, 7), int8], Tensor[(7, 5, 9), bool]) {
  %353 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %354 = cast(%var_4337, dtype="float64") /* ty=Tensor[(315), float64] */;
  %355 = reshape(%354, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %356 = @func_3329(%355) /* ty=Tensor[(7, 5, 9), float64] */;
  %357 = cast(%var_4337, dtype="bool") /* ty=Tensor[(315), bool] */;
  %358 = shape_of(%356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%356, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %361 = logical_and(%359, %360) /* ty=Tensor[(7, 5, 9), bool] */;
  %362 = cast(%var_4353, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %366 = cast(%var_4385, dtype="float32") /* ty=Tensor[(99), float32] */;
  %367 = cast(meta[relay.Constant][19] /* ty=Tensor[(180, 12), float32] */, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %368 = reshape(%366, newshape=[11, 9, 1]) /* ty=Tensor[(11, 9, 1), float32] */;
  %369 = reshape(%367, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %370 = @func_938(%368, %369) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */;
  %371 = cast(%361, dtype="float32") /* ty=Tensor[(7, 5, 9), float32] */;
  %372 = log10(%371) /* ty=Tensor[(7, 5, 9), float32] */;
  %373 = cast(%372, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %374 = log(%373) /* ty=Tensor[(7, 5, 9), float64] */;
  %375 = cast(%356, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %376 = shape_of(%374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %377 = cast(%374, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %379 = %353.0;
  %380 = logical_or(%364, %365) /* ty=Tensor[(7, 5, 9), bool] */;
  %381 = %370.1;
  %382 = @func_4096() /* ty=Tensor[(3, 15, 7), int8] */;
  %383 = less(%377, %378) /* ty=Tensor[(7, 5, 9), bool] */;
  (%379, %380, %381, %var_4385, meta[relay.Constant][19] /* ty=Tensor[(180, 12), float32] */, %382, %383)
}

def @func_4733() -> (Tensor[(8, 5, 12), float32],) {
  %384 = @func_4536() /* ty=Tensor[(8, 5, 12), float32] */;
  (%384,)
}

def @func_3329(%var_3323: Tensor[(7, 5, 9), float64]) -> Tensor[(7, 5, 9), float64] {
  %385 = cast(%var_3323, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  tan(%385) /* ty=Tensor[(7, 5, 9), float64] */
}

def @func_4096() -> Tensor[(3, 15, 7), int8] {
  %386 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %386.1
}

def @func_5287(%var_5253: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), float32] {
  %387 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %388 = cast(%var_5253, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
  %390 = cast(%387, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%390, %391) /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_4835() -> Tensor[(8, 5, 12), bool] {
  @func_3652() /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_5838() -> Tensor[(8, 5, 12), bool] {
  %392 = @func_3800() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %392.0
}

def @func_1039(%var_1005: Tensor[(2, 2, 6), uint16], %var_1029: Tensor[(99), float32]) -> (Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) {
  %393 = cast(meta[relay.Constant][20] /* ty=Tensor[(2, 2, 6), uint16] */, dtype="uint16") /* ty=Tensor[(2, 2, 6), uint16] */;
  %394 = shape_of(%var_1005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%var_1005, dtype="uint16") /* ty=Tensor[(2, 2, 6), uint16] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %397 = cast(%var_1029, dtype="float32") /* ty=Tensor[(99), float32] */;
  %398 = cast(meta[relay.Constant][21] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %399 = reshape(%397, newshape=[11, 9, 1]) /* ty=Tensor[(11, 9, 1), float32] */;
  %400 = reshape(%398, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %401 = @func_938(%399, %400) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */;
  %402 = %401.0;
  %403 = cast(meta[relay.Constant][21] /* ty=Tensor[(2160), float32] */, dtype="uint16") /* ty=Tensor[(2160), uint16] */;
  %404 = cast(%402, dtype="uint16") /* ty=Tensor[(11, 9, 1), uint16] */;
  %405 = subtract(%395, %396) /* ty=Tensor[(2, 2, 6), uint16] */;
  %406 = left_shift(%403, %404) /* ty=Tensor[(11, 9, 2160), uint16] */;
  (%405, %var_1029, %406)
}

def @func_4816() -> (Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(9, 3, 2), float32], Tensor[(3, 18), int64], Tensor[(882), float64], Tensor[(8, 5, 12), bool]) {
  %407 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %408 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 18), int64] */, dtype="int64") /* ty=Tensor[(3, 18), int64] */;
  %410 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 18), int64] */, dtype="int64") /* ty=Tensor[(3, 18), int64] */;
  %411 = cast(meta[relay.Constant][23] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %412 = reshape(%409, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %413 = reshape(%410, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %414 = reshape(%411, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %415 = @func_112(%412, %413, %414) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %416 = @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %417 = %407.0;
  %418 = %408.0;
  %419 = %415.1;
  %420 = %416.0;
  (%417, %418, %419, meta[relay.Constant][22] /* ty=Tensor[(3, 18), int64] */, meta[relay.Constant][23] /* ty=Tensor[(882), float64] */, %420)
}

def @func_1942(%var_1917: Tensor[(1, 11, 11), float64], %var_1918: Tensor[(13, 11, 11), float64], %var_1931: Tensor[(24), uint16]) -> (Tensor[(13, 11, 11), float64], Tensor[(99), float32], Tensor[(24), uint16], Tensor[(99), float32]) {
  %421 = cast(%var_1917, dtype="float64") /* ty=Tensor[(1, 11, 11), float64] */;
  %422 = cast(%var_1918, dtype="float64") /* ty=Tensor[(13, 11, 11), float64] */;
  %423 = cast(%var_1931, dtype="uint16") /* ty=Tensor[(24), uint16] */;
  %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %425 = reshape(%423, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), uint16] */;
  %426 = reshape(%424, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %427 = @func_1039(%425, %426) /* ty=(Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) */;
  %428 = mod(%421, %422) /* ty=Tensor[(13, 11, 11), float64] */;
  %429 = %427.1;
  (%428, %429, %var_1931, meta[relay.Constant][24] /* ty=Tensor[(99), float32] */)
}

def @func_6486(%var_6470: Tensor[(2, 5, 14), float32]) -> (Tensor[(2, 5, 14), float32],) {
  %430 = cast(%var_6470, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
  %431 = sinh(%430) /* ty=Tensor[(2, 5, 14), float32] */;
  (%431,)
}

def @func_5923() -> (Tensor[(8, 5, 12), bool],) {
  %432 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %433 = %432.0;
  (%433,)
}

def @func_5757(%var_5695: Tensor[(35, 9), float64], %var_5738: Tensor[(35, 9), float64]) -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(50, 6), float32], Tensor[(8, 5, 12), int16], Tensor[(35, 9), bool], Tensor[(35, 9), float64], Tensor[(8, 5, 12), float64]) {
  %434 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %435 = cast(meta[relay.Constant][25] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
  %436 = reshape(%435, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %437 = @func_5473(%436) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
  %438 = cast(%var_5738, dtype="bool") /* ty=Tensor[(35, 9), bool] */;
  %439 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %440 = cast(%var_5695, dtype="bool") /* ty=Tensor[(35, 9), bool] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %442 = cast(%var_5695, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %443 = reshape(%442, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
  %444 = @func_3329(%443) /* ty=Tensor[(7, 5, 9), float64] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %446 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(2), int32] */;
  %447 = cast(%var_5695, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %449 = mod(%447, %448) /* ty=Tensor[(35, 9), float64] */;
  %450 = cast(%444, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(2), int32] */;
  %452 = cast(%449, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %454 = %434.0;
  %455 = %437.1;
  %456 = @func_4502() /* ty=Tensor[(8, 5, 12), int16] */;
  %457 = logical_and(%440, %441) /* ty=Tensor[(35, 9), bool] */;
  %458 = power(%452, %453) /* ty=Tensor[(35, 9), float64] */;
  %459 = @func_5622() /* ty=Tensor[(8, 5, 12), float64] */;
  (%454, %455, meta[relay.Constant][25] /* ty=Tensor[(50, 6), float32] */, %456, %457, %458, %459)
}

def @func_112(%var_89: Tensor[(9, 3, 2), int64], %var_90: Tensor[(9, 3, 2), int64], %var_105: Tensor[(882), float64]) -> (Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) {
  %460 = cast(%var_90, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %461 = shape_of(%var_89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %462 = cast(%var_89, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %463 = dyn.reshape(%460, %461, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %464 = cast(%var_89, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %465 = cast(%var_105, dtype="float64") /* ty=Tensor[(882), float64] */;
  %466 = reshape(%465, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %467 = less(%462, %463) /* ty=Tensor[(9, 3, 2), bool] */;
  %468 = cos(%464) /* ty=Tensor[(9, 3, 2), float32] */;
  %469 = @func_71(%466) /* ty=Tensor[(14, 7, 9), float64] */;
  (%467, %468, %469, %var_105)
}

def @func_4958() -> Tensor[(8, 5, 12), float32] {
  %470 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %471 = %470.0;
  %472 = cast(%471, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  tan(%472) /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_3727(%var_3672: Tensor[(8, 5, 12), bool], %var_3708: Tensor[(54), int64], %var_3713: Tensor[(300), float32]) -> (Tensor[(882), float64], Tensor[(10, 52), uint64], Tensor[(8, 5, 12), uint8], Tensor[(8, 5, 12), uint8], Tensor[(9, 3, 2), bool], Tensor[(54), int64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  %473 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 52), uint64] */, dtype="uint64") /* ty=Tensor[(10, 52), uint64] */;
  %474 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 52), uint64] */, dtype="uint64") /* ty=Tensor[(10, 52), uint64] */;
  %475 = reshape(%473, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %476 = reshape(%474, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %477 = @func_2392(%475, %476) /* ty=(Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) */;
  %478 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %479 = cast(%478, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %480 = log2(%479) /* ty=Tensor[(8, 5, 12), float32] */;
  %481 = cast(%var_3672, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %482 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %483 = cast(%478, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %484 = dyn.reshape(%481, %482, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %485 = greater_equal(%483, %484) /* ty=Tensor[(8, 5, 12), bool] */;
  %486 = cast(%485, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %487 = shape_of(%480, dtype="int32") /* ty=Tensor[(3), int32] */;
  %488 = cast(%480, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %489 = dyn.reshape(%486, %487, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %490 = cast(%485, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %491 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %492 = cast(%478, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %494 = cast(%var_3708, dtype="int64") /* ty=Tensor[(54), int64] */;
  %495 = cast(%var_3708, dtype="int64") /* ty=Tensor[(54), int64] */;
  %496 = %477.3;
  %497 = cast(%496, dtype="float64") /* ty=Tensor[(882), float64] */;
  %498 = reshape(%494, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %499 = reshape(%495, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %500 = reshape(%497, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %501 = @func_112(%498, %499, %500) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %502 = cast(%var_3713, dtype="float32") /* ty=Tensor[(300), float32] */;
  %503 = reshape(%502, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %504 = @func_1775(%503) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %505 = cast(%var_3713, dtype="float32") /* ty=Tensor[(300), float32] */;
  %506 = logical_xor(%488, %489) /* ty=Tensor[(8, 5, 12), uint8] */;
  %507 = minimum(%492, %493) /* ty=Tensor[(8, 5, 12), uint8] */;
  %508 = %501.0;
  %509 = %504.0;
  %510 = rsqrt(%505) /* ty=Tensor[(300), float32] */;
  (%496, meta[relay.Constant][26] /* ty=Tensor[(10, 52), uint64] */, %506, %507, %508, %var_3708, %509, %510)
}

def @func_6512() -> Tensor[(8, 5, 12), uint64] {
  %511 = @func_5815() /* ty=(Tensor[(8, 5, 12), uint64],) */;
  %511.0
}

def @func_4458() -> (Tensor[(8, 5, 12), bool],) {
  %512 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %513 = %512.0;
  (%513,)
}

def @func_2254(%var_2237: float32, %var_2238: Tensor[(8, 11, 4), float32], %var_2248: Tensor[(5, 63), int8]) -> (Tensor[(8, 11, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(5, 63), int8]) {
  %514 = cast(%var_2237, dtype="float32") /* ty=float32 */;
  %515 = cast(%var_2238, dtype="float32") /* ty=Tensor[(8, 11, 4), float32] */;
  %516 = cast(%var_2248, dtype="int8") /* ty=Tensor[(5, 63), int8] */;
  %517 = cast(%var_2248, dtype="int8") /* ty=Tensor[(5, 63), int8] */;
  %518 = reshape(%516, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %519 = reshape(%517, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %520 = @func_1191(%518, %519) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %521 = floor_divide(%514, %515) /* ty=Tensor[(8, 11, 4), float32] */;
  %522 = %520.0;
  (%521, %522, %var_2248)
}

def @func_4502() -> Tensor[(8, 5, 12), int16] {
  %523 = @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %524 = %523.0;
  %525 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %526 = %525.0;
  %527 = cast(%526, dtype="int16") /* ty=Tensor[(8, 5, 12), int16] */;
  %528 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %529 = cast(%524, dtype="int16") /* ty=Tensor[(8, 5, 12), int16] */;
  %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  right_shift(%529, %530) /* ty=Tensor[(8, 5, 12), int16] */
}

def @func_5179(%var_5157: Tensor[(33, 3), float32], %var_5158: Tensor[(180, 12), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(11, 9, ?), float64], Tensor[(180, 12), float64]) {
  %531 = @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %532 = %531.0;
  %533 = cast(meta[relay.Constant][27] /* ty=Tensor[(8, 5, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %534 = shape_of(%532, dtype="int32") /* ty=Tensor[(3), int32] */;
  %535 = cast(%532, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %536 = dyn.reshape(%533, %534, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %537 = cast(%var_5157, dtype="float32") /* ty=Tensor[(33, 3), float32] */;
  %538 = cast(%var_5158, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
  %539 = reshape(%537, newshape=[11, 9, 1]) /* ty=Tensor[(11, 9, 1), float32] */;
  %540 = reshape(%538, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %541 = @func_938(%539, %540) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */;
  %542 = %541.0;
  %543 = cast(%var_5157, dtype="float64") /* ty=Tensor[(33, 3), float64] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="float64") /* ty=Tensor[(11, 9, 1), float64] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %547 = cast(%var_5158, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
  %548 = logical_or(%535, %536) /* ty=Tensor[(8, 5, 12), bool] */;
  %549 = floor_mod(%545, %546) /* ty=Tensor[(11, 9, ?), float64] */;
  %550 = erf(%547) /* ty=Tensor[(180, 12), float64] */;
  (%548, %549, %550)
}

def @func_2392(%var_2356: Tensor[(8, 5, 13), uint64], %var_2357: Tensor[(8, 5, 13), uint64]) -> (Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) {
  %551 = cast(%var_2356, dtype="uint8") /* ty=Tensor[(8, 5, 13), uint8] */;
  %552 = shape_of(%var_2357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_2357, dtype="uint8") /* ty=Tensor[(8, 5, 13), uint8] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %555 = cast(meta[relay.Constant][28] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %556 = cast(meta[relay.Constant][28] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %557 = cast(meta[relay.Constant][29] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %558 = reshape(%555, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %559 = reshape(%556, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %560 = reshape(%557, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %561 = @func_112(%558, %559, %560) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %562 = cast(%var_2357, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %563 = shape_of(%var_2356, dtype="int32") /* ty=Tensor[(3), int32] */;
  %564 = cast(%var_2356, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
  %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %566 = greater(%564, %565) /* ty=Tensor[(8, 5, 13), bool] */;
  %567 = cast(%566, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
  %568 = bitwise_and(%553, %554) /* ty=Tensor[(8, 5, 13), uint8] */;
  %569 = %561.1;
  %570 = rsqrt(%567) /* ty=Tensor[(8, 5, 13), float64] */;
  (%568, %569, meta[relay.Constant][28] /* ty=Tensor[(54), int64] */, meta[relay.Constant][29] /* ty=Tensor[(882), float64] */, %570)
}

def @func_3843(%var_3823: Tensor[(10, 10, 5), int16], %var_3828: Tensor[(10, 10, 5), bool]) -> (Tensor[(10, 10, 5), int32], Tensor[(8, 5, 12), bool], Tensor[(10, 10, 5), float64]) {
  %571 = cast(%var_3823, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %572 = shape_of(meta[relay.Constant][30] /* ty=Tensor[(10, 10, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 10, 5), int16] */, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %575 = greater_equal(%573, %574) /* ty=Tensor[(10, 10, 5), bool] */;
  %576 = cast(%var_3828, dtype="int32") /* ty=Tensor[(10, 10, 5), int32] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="int32") /* ty=Tensor[(10, 10, 5), int32] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %580 = cast(meta[relay.Constant][30] /* ty=Tensor[(10, 10, 5), int16] */, dtype="float64") /* ty=Tensor[(10, 10, 5), float64] */;
  %581 = left_shift(%578, %579) /* ty=Tensor[(10, 10, 5), int32] */;
  %582 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %583 = atan(%580) /* ty=Tensor[(10, 10, 5), float64] */;
  (%581, %582, %583)
}

def @func_4257() -> (Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) {
  %584 = cast(meta[relay.Constant][31] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %585 = reshape(%584, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), uint8] */;
  %586 = @func_3514(%585) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) */;
  %587 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %588 = %587.0;
  %589 = cast(%588, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  %590 = cosh(%589) /* ty=Tensor[(8, 5, 12), float64] */;
  %591 = cast(%590, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %592 = %586.2;
  %593 = asin(%591) /* ty=Tensor[(8, 5, 12), float32] */;
  (%592, meta[relay.Constant][31] /* ty=Tensor[(1080), uint8] */, %593)
}

def @func_3904(%var_3888: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), int64] {
  %594 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %595 = %594.0;
  %596 = cast(%var_3888, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %597 = shape_of(%595, dtype="int32") /* ty=Tensor[(3), int32] */;
  %598 = cast(%595, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %599 = dyn.reshape(%596, %597, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %600 = bitwise_or(%598, %599) /* ty=Tensor[(8, 5, 12), uint8] */;
  %601 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="int64") /* ty=Tensor[(8, 5, 12), int64] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="int64") /* ty=Tensor[(8, 5, 12), int64] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%603, %604) /* ty=Tensor[(8, 5, 12), int64] */
}

def @func_6033(%var_6010: Tensor[(5, 15, 4), float32]) -> (Tensor[(5, 15, 4), float64], Tensor[(5, 15, 4), float32]) {
  %605 = @func_5690() /* ty=(Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
  %606 = %605.1;
  %607 = cast(%var_6010, dtype="bool") /* ty=Tensor[(5, 15, 4), bool] */;
  %608 = shape_of(%606, dtype="int32") /* ty=Tensor[(3), int32] */;
  %609 = cast(%606, dtype="bool") /* ty=Tensor[(5, 15, 4), bool] */;
  %610 = dyn.reshape(%607, %608, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %611 = less_equal(%609, %610) /* ty=Tensor[(5, 15, 4), bool] */;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %613 = tan(%612) /* ty=Tensor[(5, 15, 4), float32] */;
  %614 = cast(%606, dtype="float64") /* ty=Tensor[(5, 15, 4), float64] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="float64") /* ty=Tensor[(5, 15, 4), float64] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %618 = cast(%var_6010, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %619 = reshape(%618, newshape=[300]) /* ty=Tensor[(300), float32] */;
  %620 = @func_5473(%619) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
  %621 = floor_mod(%616, %617) /* ty=Tensor[(5, 15, 4), float64] */;
  %622 = %620.1;
  (%621, %622)
}

def @func_5553() -> (Tensor[(8, 5, 12), float32],) {
  %623 = @func_4257() /* ty=(Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) */;
  %624 = %623.2;
  (%624,)
}

def @func_6000() -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(15, 10, 8), uint16], Tensor[(1200), float32], Tensor[(8, 5, 12), bool]) {
  %625 = @func_4733() /* ty=(Tensor[(8, 5, 12), float32],) */;
  %626 = @func_4257() /* ty=(Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) */;
  %627 = cast(meta[relay.Constant][33] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %628 = reshape(%627, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float32] */;
  %629 = @func_4316(%628) /* ty=(Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) */;
  %630 = @func_4816() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(9, 3, 2), float32], Tensor[(3, 18), int64], Tensor[(882), float64], Tensor[(8, 5, 12), bool]) */;
  %631 = %625.0;
  %632 = %626.2;
  %633 = %629.2;
  %634 = %630.5;
  (%631, %632, %633, meta[relay.Constant][33] /* ty=Tensor[(1200), float32] */, %634)
}

def @func_4316(%var_4262: Tensor[(15, 10, 8), float32]) -> (Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) {
  %635 = cast(meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %636 = reshape(%635, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %637 = @func_779(%636) /* ty=(Tensor[(9, 15, 16), int16],) */;
  %638 = cast(%var_4262, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %639 = sigmoid(%638) /* ty=Tensor[(15, 10, 8), float32] */;
  %640 = cast(%var_4262, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %641 = asin(%640) /* ty=Tensor[(15, 10, 8), float32] */;
  %642 = cast(%641, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
  %643 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %644 = cast(%639, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
  %645 = dyn.reshape(%642, %643, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %646 = cast(%641, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %647 = shape_of(%639, dtype="int32") /* ty=Tensor[(3), int32] */;
  %648 = cast(%639, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
  %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %650 = equal(%648, %649) /* ty=Tensor[(15, 10, 8), bool] */;
  %651 = cast(%650, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
  %652 = %637.0;
  %653 = multiply(%644, %645) /* ty=Tensor[(15, 10, 8), uint16] */;
  %654 = @func_4096() /* ty=Tensor[(3, 15, 7), int8] */;
  %655 = asinh(%651) /* ty=Tensor[(15, 10, 8), float32] */;
  (%652, meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */, %653, %654, %655)
}

def @func_3652() -> Tensor[(8, 5, 12), bool] {
  %656 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %657 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%658, %659) /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_5314() -> Tensor[(8, 5, 12), bool] {
  %660 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %660.0
}

def @func_5690() -> (Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  %661 = cast(meta[relay.Constant][37] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
  %662 = reshape(%661, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %663 = @func_1775(%662) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %664 = @func_5622() /* ty=Tensor[(8, 5, 12), float64] */;
  %665 = %663.0;
  (%664, %665, meta[relay.Constant][37] /* ty=Tensor[(300), float32] */)
}

def @func_938(%var_926: Tensor[(11, 9, 1), float32], %var_930: Tensor[(2160), float32]) -> (Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) {
  %666 = cast(%var_926, dtype="float32") /* ty=Tensor[(11, 9, 1), float32] */;
  %667 = cast(%var_930, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %668 = reshape(%667, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
  %669 = @func_779(%668) /* ty=(Tensor[(9, 15, 16), int16],) */;
  %670 = log(%666) /* ty=Tensor[(11, 9, 1), float32] */;
  %671 = %669.0;
  (%670, %671, %var_930)
}

def @func_5815() -> (Tensor[(8, 5, 12), uint64],) {
  %672 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %673 = cast(meta[relay.Constant][38] /* ty=Tensor[(8, 5, 12), bool] */, dtype="uint64") /* ty=Tensor[(8, 5, 12), uint64] */;
  %674 = shape_of(%672, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%672, dtype="uint64") /* ty=Tensor[(8, 5, 12), uint64] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %677 = bitwise_xor(%675, %676) /* ty=Tensor[(8, 5, 12), uint64] */;
  (%677,)
}

def @func_6520(%var_6516: Tensor[(6, 4, 16), float32]) -> Tensor[(6, 4, 16), float32] {
  %678 = cast(%var_6516, dtype="float32") /* ty=Tensor[(6, 4, 16), float32] */;
  acosh(%678) /* ty=Tensor[(6, 4, 16), float32] */
}

def @func_6441() -> (Tensor[(8, 5, 12), int16],) {
  %679 = @func_4502() /* ty=Tensor[(8, 5, 12), int16] */;
  (%679,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5316() -> Tensor[(8, 5, 12), bool] {
  @func_5314() /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_2647(%var_2598: Tensor[(15, 3, 5), float64], %var_2640: Tensor[(364), float32], %var_2641: Tensor[(882), float64], %var_2642: Tensor[(315), int8]) -> (Tensor[(15, 3, 5), float64], Tensor[(15, 3, 5), float64], Tensor[(16, 2, 9), float32], Tensor[(364), float32], Tensor[(882), float64], Tensor[(315), int8]) {
  %0 = cast(%var_2598, dtype="float64") /* ty=Tensor[(15, 3, 5), float64] */;
  %1 = cast(%var_2598, dtype="float64") /* ty=Tensor[(15, 3, 5), float64] */;
  %2 = cast(%var_2640, dtype="float32") /* ty=Tensor[(364), float32] */;
  %3 = cast(%var_2640, dtype="float32") /* ty=Tensor[(364), float32] */;
  %4 = cast(%var_2641, dtype="float64") /* ty=Tensor[(882), float64] */;
  %5 = cast(%var_2642, dtype="int8") /* ty=Tensor[(315), int8] */;
  %6 = reshape(%2, newshape=[13, 4, 7]) /* ty=Tensor[(13, 4, 7), float32] */;
  %7 = reshape(%3, newshape=[13, 4, 7]) /* ty=Tensor[(13, 4, 7), float32] */;
  %8 = reshape(%4, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %9 = reshape(%5, newshape=[315]) /* ty=Tensor[(315), int8] */;
  %10 = @func_1897(%6, %7, %8, %9) /* ty=(Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(300, 288), bool], Tensor[(16, 2, 9), float32], Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64], Tensor[(14, 7, 9), float64], Tensor[(882), float64], Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(315), int8], Tensor[(13, 4, 7), float32]) */;
  %11 = acos(%0) /* ty=Tensor[(15, 3, 5), float64] */;
  %12 = log2(%1) /* ty=Tensor[(15, 3, 5), float64] */;
  %13 = %10.3;
  (%11, %12, %13, %var_2640, %var_2641, %var_2642)
}

def @func_2259(%var_2256: float32, %var_2257: Tensor[(8, 11, 4), float32], %var_2258: Tensor[(5, 63), int8]) -> (Tensor[(8, 11, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(5, 63), int8]) {
  @func_2254(%var_2256, %var_2257, %var_2258) /* ty=(Tensor[(8, 11, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(5, 63), int8]) */
}

def @func_2395(%var_2393: Tensor[(8, 5, 13), uint64], %var_2394: Tensor[(8, 5, 13), uint64]) -> (Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) {
  %34 = fn (%var_2356: Tensor[(8, 5, 13), uint64], %var_2357: Tensor[(8, 5, 13), uint64]) -> (Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) {
    %14 = cast(%var_2356, dtype="uint8") /* ty=Tensor[(8, 5, 13), uint8] */;
    %15 = shape_of(%var_2357, dtype="int32") /* ty=Tensor[(3), int32] */;
    %16 = cast(%var_2357, dtype="uint8") /* ty=Tensor[(8, 5, 13), uint8] */;
    %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %18 = cast(meta[relay.Constant][0] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
    %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
    %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
    %21 = reshape(%18, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
    %22 = reshape(%19, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
    %23 = reshape(%20, newshape=[882]) /* ty=Tensor[(882), float64] */;
    %24 = @func_112(%21, %22, %23) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
    %25 = cast(%var_2357, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
    %26 = shape_of(%var_2356, dtype="int32") /* ty=Tensor[(3), int32] */;
    %27 = cast(%var_2356, dtype="bool") /* ty=Tensor[(8, 5, 13), bool] */;
    %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %29 = greater(%27, %28) /* ty=Tensor[(8, 5, 13), bool] */;
    %30 = cast(%29, dtype="float64") /* ty=Tensor[(8, 5, 13), float64] */;
    %31 = bitwise_and(%16, %17) /* ty=Tensor[(8, 5, 13), uint8] */;
    %32 = %24.1;
    %33 = rsqrt(%30) /* ty=Tensor[(8, 5, 13), float64] */;
    (%31, %32, meta[relay.Constant][0] /* ty=Tensor[(54), int64] */, meta[relay.Constant][1] /* ty=Tensor[(882), float64] */, %33)
  };
  %34(%var_2393, %var_2394) /* ty=(Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) */
}

def @func_71(%var_60: Tensor[(14, 7, 9), float64]) -> Tensor[(14, 7, 9), float64] {
  %35 = cast(%var_60, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  sigmoid(%35) /* ty=Tensor[(14, 7, 9), float64] */
}

def @func_5232() -> (Tensor[(8, 5, 12), float64],) {
  %38 = fn () -> (Tensor[(8, 5, 12), float64],) {
    %36 = @func_5020() /* ty=(Tensor[(8, 5, 12), float64],) */;
    %37 = %36.0;
    (%37,)
  };
  %38() /* ty=(Tensor[(8, 5, 12), float64],) */
}

def @func_5816() -> (Tensor[(8, 5, 12), uint64],) {
  %45 = fn () -> (Tensor[(8, 5, 12), uint64],) {
    %39 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
    %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 5, 12), bool] */, dtype="uint64") /* ty=Tensor[(8, 5, 12), uint64] */;
    %41 = shape_of(%39, dtype="int32") /* ty=Tensor[(3), int32] */;
    %42 = cast(%39, dtype="uint64") /* ty=Tensor[(8, 5, 12), uint64] */;
    %43 = dyn.reshape(%40, %41, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %44 = bitwise_xor(%42, %43) /* ty=Tensor[(8, 5, 12), uint64] */;
    (%44,)
  };
  %45() /* ty=(Tensor[(8, 5, 12), uint64],) */
}

def @func_6257(%var_6253: Tensor[(315), int8]) -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(882), float64], Tensor[(520), uint64], Tensor[(3, 15, 7), int8], Tensor[(315), int8]) {
  %46 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %47 = cast(%46, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %48 = cast(%46, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %49 = cast(meta[relay.Constant][3] /* ty=Tensor[(520), uint64] */, dtype="uint64") /* ty=Tensor[(520), uint64] */;
  %50 = cast(meta[relay.Constant][3] /* ty=Tensor[(520), uint64] */, dtype="uint64") /* ty=Tensor[(520), uint64] */;
  %51 = reshape(%49, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %52 = reshape(%50, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %53 = @func_2392(%51, %52) /* ty=(Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) */;
  %54 = cast(%var_6253, dtype="int8") /* ty=Tensor[(315), int8] */;
  %55 = cast(%var_6253, dtype="int8") /* ty=Tensor[(315), int8] */;
  %56 = reshape(%54, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %57 = reshape(%55, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %58 = @func_1191(%56, %57) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %59 = sinh(%47) /* ty=Tensor[(8, 5, 12), float32] */;
  %60 = atanh(%48) /* ty=Tensor[(8, 5, 12), float32] */;
  %61 = %53.3;
  %62 = %58.0;
  (%59, %60, %61, meta[relay.Constant][3] /* ty=Tensor[(520), uint64] */, %62, %var_6253)
}

def @func_4503() -> Tensor[(8, 5, 12), int16] {
  %71 = fn () -> Tensor[(8, 5, 12), int16] {
    %63 = @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %64 = %63.0;
    %65 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %66 = %65.0;
    %67 = cast(%66, dtype="int16") /* ty=Tensor[(8, 5, 12), int16] */;
    %68 = shape_of(%64, dtype="int32") /* ty=Tensor[(3), int32] */;
    %69 = cast(%64, dtype="int16") /* ty=Tensor[(8, 5, 12), int16] */;
    %70 = dyn.reshape(%67, %68, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    right_shift(%69, %70) /* ty=Tensor[(8, 5, 12), int16] */
  };
  %71() /* ty=Tensor[(8, 5, 12), int16] */
}

def @func_4667(%var_4663: int32, %var_4664: Tensor[(15, 10, 4), int32], %var_4665: Tensor[(1200), float32], %var_4666: Tensor[(2520), float64]) -> (Tensor[(15, 10, 4), int32], Tensor[(2160), float32], Tensor[(1200), float32], Tensor[(882), uint16], Tensor[(2520), float64], Tensor[(10), int16], Tensor[(15, 10, 4), float32]) {
  @func_4661(%var_4663, %var_4664, %var_4665, %var_4666) /* ty=(Tensor[(15, 10, 4), int32], Tensor[(2160), float32], Tensor[(1200), float32], Tensor[(882), uint16], Tensor[(2520), float64], Tensor[(10), int16], Tensor[(15, 10, 4), float32]) */
}

def @func_3766() -> (Tensor[(8, 5, 12), bool],) {
  @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_6001() -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(15, 10, 8), uint16], Tensor[(1200), float32], Tensor[(8, 5, 12), bool]) {
  %82 = fn () -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(15, 10, 8), uint16], Tensor[(1200), float32], Tensor[(8, 5, 12), bool]) {
    %72 = @func_4733() /* ty=(Tensor[(8, 5, 12), float32],) */;
    %73 = @func_4257() /* ty=(Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) */;
    %74 = cast(meta[relay.Constant][4] /* ty=Tensor[(1200), float32] */, dtype="float32") /* ty=Tensor[(1200), float32] */;
    %75 = reshape(%74, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float32] */;
    %76 = @func_4316(%75) /* ty=(Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) */;
    %77 = @func_4816() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(9, 3, 2), float32], Tensor[(3, 18), int64], Tensor[(882), float64], Tensor[(8, 5, 12), bool]) */;
    %78 = %72.0;
    %79 = %73.2;
    %80 = %76.2;
    %81 = %77.5;
    (%78, %79, %80, meta[relay.Constant][4] /* ty=Tensor[(1200), float32] */, %81)
  };
  %82() /* ty=(Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(15, 10, 8), uint16], Tensor[(1200), float32], Tensor[(8, 5, 12), bool]) */
}

def @func_3904(%var_3888: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), int64] {
  %83 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %84 = %83.0;
  %85 = cast(%var_3888, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %86 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%84, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %89 = bitwise_or(%87, %88) /* ty=Tensor[(8, 5, 12), uint8] */;
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="int64") /* ty=Tensor[(8, 5, 12), int64] */;
  %91 = shape_of(%89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%89, dtype="int64") /* ty=Tensor[(8, 5, 12), int64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_and(%92, %93) /* ty=Tensor[(8, 5, 12), int64] */
}

def @func_4257() -> (Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) {
  %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(1080), uint8] */, dtype="uint8") /* ty=Tensor[(1080), uint8] */;
  %95 = reshape(%94, newshape=[10, 9, 12]) /* ty=Tensor[(10, 9, 12), uint8] */;
  %96 = @func_3514(%95) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) */;
  %97 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %98 = %97.0;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
  %100 = cosh(%99) /* ty=Tensor[(8, 5, 12), float64] */;
  %101 = cast(%100, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %102 = %96.2;
  %103 = asin(%101) /* ty=Tensor[(8, 5, 12), float32] */;
  (%102, meta[relay.Constant][6] /* ty=Tensor[(1080), uint8] */, %103)
}

def @func_3843(%var_3823: Tensor[(10, 10, 5), int16], %var_3828: Tensor[(10, 10, 5), bool]) -> (Tensor[(10, 10, 5), int32], Tensor[(8, 5, 12), bool], Tensor[(10, 10, 5), float64]) {
  %104 = cast(%var_3823, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %105 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(10, 10, 5), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %106 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 10, 5), int16] */, dtype="bool") /* ty=Tensor[(10, 10, 5), bool] */;
  %107 = dyn.reshape(%104, %105, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %108 = greater_equal(%106, %107) /* ty=Tensor[(10, 10, 5), bool] */;
  %109 = cast(%var_3828, dtype="int32") /* ty=Tensor[(10, 10, 5), int32] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="int32") /* ty=Tensor[(10, 10, 5), int32] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(10, 10, 5), int16] */, dtype="float64") /* ty=Tensor[(10, 10, 5), float64] */;
  %114 = left_shift(%111, %112) /* ty=Tensor[(10, 10, 5), int32] */;
  %115 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %116 = atan(%113) /* ty=Tensor[(10, 10, 5), float64] */;
  (%114, %115, %116)
}

def @func_5760(%var_5758: Tensor[(35, 9), float64], %var_5759: Tensor[(35, 9), float64]) -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(50, 6), float32], Tensor[(8, 5, 12), int16], Tensor[(35, 9), bool], Tensor[(35, 9), float64], Tensor[(8, 5, 12), float64]) {
  %143 = fn (%var_5695: Tensor[(35, 9), float64], %var_5738: Tensor[(35, 9), float64]) -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(50, 6), float32], Tensor[(8, 5, 12), int16], Tensor[(35, 9), bool], Tensor[(35, 9), float64], Tensor[(8, 5, 12), float64]) {
    %117 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %118 = cast(meta[relay.Constant][8] /* ty=Tensor[(50, 6), float32] */, dtype="float32") /* ty=Tensor[(50, 6), float32] */;
    %119 = reshape(%118, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %120 = @func_5473(%119) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
    %121 = cast(%var_5738, dtype="bool") /* ty=Tensor[(35, 9), bool] */;
    %122 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(2), int32] */;
    %123 = cast(%var_5695, dtype="bool") /* ty=Tensor[(35, 9), bool] */;
    %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %125 = cast(%var_5695, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
    %126 = reshape(%125, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
    %127 = @func_3329(%126) /* ty=Tensor[(7, 5, 9), float64] */;
    %128 = cast(%127, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    %129 = shape_of(%var_5695, dtype="int32") /* ty=Tensor[(2), int32] */;
    %130 = cast(%var_5695, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
    %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %132 = mod(%130, %131) /* ty=Tensor[(35, 9), float64] */;
    %133 = cast(%127, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(2), int32] */;
    %135 = cast(%132, dtype="float64") /* ty=Tensor[(35, 9), float64] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %137 = %117.0;
    %138 = %120.1;
    %139 = @func_4502() /* ty=Tensor[(8, 5, 12), int16] */;
    %140 = logical_and(%123, %124) /* ty=Tensor[(35, 9), bool] */;
    %141 = power(%135, %136) /* ty=Tensor[(35, 9), float64] */;
    %142 = @func_5622() /* ty=Tensor[(8, 5, 12), float64] */;
    (%137, %138, meta[relay.Constant][8] /* ty=Tensor[(50, 6), float32] */, %139, %140, %141, %142)
  };
  %143(%var_5758, %var_5759) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(50, 6), float32], Tensor[(8, 5, 12), int16], Tensor[(35, 9), bool], Tensor[(35, 9), float64], Tensor[(8, 5, 12), float64]) */
}

def @func_3801() -> (Tensor[(8, 5, 12), bool],) {
  %146 = fn () -> (Tensor[(8, 5, 12), bool],) {
    %144 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %145 = %144.0;
    (%145,)
  };
  %146() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_4661(%var_4606: int32, %var_4607: Tensor[(15, 10, 4), int32], %var_4626: Tensor[(1200), float32], %var_4634: Tensor[(2520), float64]) -> (Tensor[(15, 10, 4), int32], Tensor[(2160), float32], Tensor[(1200), float32], Tensor[(882), uint16], Tensor[(2520), float64], Tensor[(10), int16], Tensor[(15, 10, 4), float32]) {
  %147 = cast(%var_4606, dtype="int32") /* ty=int32 */;
  %148 = cast(%var_4607, dtype="int32") /* ty=Tensor[(15, 10, 4), int32] */;
  %149 = cast(%var_4626, dtype="float32") /* ty=Tensor[(1200), float32] */;
  %150 = reshape(%149, newshape=[15, 10, 8]) /* ty=Tensor[(15, 10, 8), float32] */;
  %151 = @func_4316(%150) /* ty=(Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) */;
  %152 = cast(%var_4634, dtype="float64") /* ty=Tensor[(2520), float64] */;
  %153 = cast(%var_4606, dtype="int16") /* ty=int16 */;
  %154 = cast(meta[relay.Constant][9] /* ty=Tensor[(10), int16] */, dtype="int16") /* ty=Tensor[(10), int16] */;
  %155 = reshape(%152, newshape=[12, 15, 14]) /* ty=Tensor[(12, 15, 14), float64] */;
  %156 = reshape(%153, newshape=[]) /* ty=int16 */;
  %157 = reshape(%154, newshape=[10]) /* ty=Tensor[(10), int16] */;
  %158 = @func_1753(%155, %156, %157) /* ty=(Tensor[(12, 15, 14), float64], Tensor[(12, 15, 14), int64], Tensor[(882), uint16], int16, Tensor[(10), int16], Tensor[(882), float64]) */;
  %159 = cast(%var_4607, dtype="float64") /* ty=Tensor[(15, 10, 4), float64] */;
  %160 = log2(%159) /* ty=Tensor[(15, 10, 4), float64] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(15, 10, 4), float32] */;
  %162 = bitwise_xor(%147, %148) /* ty=Tensor[(15, 10, 4), int32] */;
  %163 = %151.1;
  %164 = %158.2;
  %165 = erf(%161) /* ty=Tensor[(15, 10, 4), float32] */;
  (%162, %163, %var_4626, %164, %var_4634, meta[relay.Constant][9] /* ty=Tensor[(10), int16] */, %165)
}

def @func_4837() -> Tensor[(8, 5, 12), bool] {
  @func_4835() /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_4039() -> (Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) {
  %178 = fn () -> (Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) {
    %166 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(105, 3), int8] */, dtype="int8") /* ty=Tensor[(105, 3), int8] */;
    %168 = cast(meta[relay.Constant][10] /* ty=Tensor[(105, 3), int8] */, dtype="int8") /* ty=Tensor[(105, 3), int8] */;
    %169 = reshape(%167, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
    %170 = reshape(%168, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
    %171 = @func_1191(%169, %170) /* ty=(Tensor[(3, 15, 7), int8],) */;
    %172 = cast(meta[relay.Constant][11] /* ty=Tensor[(288, 1), float32] */, dtype="float32") /* ty=Tensor[(288, 1), float32] */;
    %173 = reshape(%172, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
    %174 = @func_1598(%173) /* ty=(Tensor[(16, 2, 9), float32],) */;
    %175 = %166.0;
    %176 = %171.0;
    %177 = %174.0;
    (%175, %176, meta[relay.Constant][10] /* ty=Tensor[(105, 3), int8] */, %177, meta[relay.Constant][11] /* ty=Tensor[(288, 1), float32] */)
  };
  %178() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */
}

def @func_1195(%var_1193: Tensor[(3, 15, 7), int8], %var_1194: Tensor[(3, 15, 7), int8]) -> (Tensor[(3, 15, 7), int8],) {
  @func_1191(%var_1193, %var_1194) /* ty=(Tensor[(3, 15, 7), int8],) */
}

def @func_3821() -> (Tensor[(8, 5, 12), bool],) {
  @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_1601(%var_1599: Tensor[(16, 2, 9), float32]) -> (Tensor[(16, 2, 9), float32],) {
  @func_1598(%var_1599) /* ty=(Tensor[(16, 2, 9), float32],) */
}

def @func_2069(%var_2056: Tensor[(7, 16, 3), float64]) -> (Tensor[(7, 16, 3), float64],) {
  %179 = cast(%var_2056, dtype="float64") /* ty=Tensor[(7, 16, 3), float64] */;
  %180 = cos(%179) /* ty=Tensor[(7, 16, 3), float64] */;
  (%180,)
}

def @func_2254(%var_2237: float32, %var_2238: Tensor[(8, 11, 4), float32], %var_2248: Tensor[(5, 63), int8]) -> (Tensor[(8, 11, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(5, 63), int8]) {
  %181 = cast(%var_2237, dtype="float32") /* ty=float32 */;
  %182 = cast(%var_2238, dtype="float32") /* ty=Tensor[(8, 11, 4), float32] */;
  %183 = cast(%var_2248, dtype="int8") /* ty=Tensor[(5, 63), int8] */;
  %184 = cast(%var_2248, dtype="int8") /* ty=Tensor[(5, 63), int8] */;
  %185 = reshape(%183, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %186 = reshape(%184, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %187 = @func_1191(%185, %186) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %188 = floor_divide(%181, %182) /* ty=Tensor[(8, 11, 4), float32] */;
  %189 = %187.0;
  (%188, %189, %var_2248)
}

def @func_5409(%var_5407: Tensor[(7, 14, 12), float64], %var_5408: Tensor[(7, 14, 12), float64]) -> (Tensor[(7, 14, 12), float32], Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(7, 14, 12), uint16], Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(99), float32], Tensor[(2160), float32], Tensor[(8, 5, 12), bool], Tensor[(7, 14, 12), int64]) {
  @func_5405(%var_5407, %var_5408) /* ty=(Tensor[(7, 14, 12), float32], Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(7, 14, 12), uint16], Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(99), float32], Tensor[(2160), float32], Tensor[(8, 5, 12), bool], Tensor[(7, 14, 12), int64]) */
}

def @func_5554() -> (Tensor[(8, 5, 12), float32],) {
  %192 = fn () -> (Tensor[(8, 5, 12), float32],) {
    %190 = @func_4257() /* ty=(Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) */;
    %191 = %190.2;
    (%191,)
  };
  %192() /* ty=(Tensor[(8, 5, 12), float32],) */
}

def @func_1598(%var_1595: Tensor[(16, 2, 9), float32]) -> (Tensor[(16, 2, 9), float32],) {
  %193 = cast(%var_1595, dtype="float32") /* ty=Tensor[(16, 2, 9), float32] */;
  %194 = cos(%193) /* ty=Tensor[(16, 2, 9), float32] */;
  (%194,)
}

def @func_6424() -> (Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), uint32], Tensor[(8, 5, 12), float64]) {
  %206 = fn () -> (Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), uint32], Tensor[(8, 5, 12), float64]) {
    %195 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
    %196 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 5, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %197 = shape_of(%195, dtype="int32") /* ty=Tensor[(3), int32] */;
    %198 = cast(%195, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %199 = dyn.reshape(%196, %197, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 5, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %201 = reshape(%200, newshape=[8, 5, 12]) /* ty=Tensor[(8, 5, 12), bool] */;
    %202 = @func_5231() /* ty=(Tensor[(8, 5, 12), float64],) */;
    %203 = logical_and(%198, %199) /* ty=Tensor[(8, 5, 12), bool] */;
    %204 = @func_5241(%201) /* ty=Tensor[(8, 5, 12), uint32] */;
    %205 = %202.0;
    (%203, %204, %205)
  };
  %206() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), uint32], Tensor[(8, 5, 12), float64]) */
}

def @func_4996(%var_4987: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), float32] {
  %207 = cast(%var_4987, dtype="float32") /* ty=Tensor[(13, 12, 12), float32] */;
  atan(%207) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_5243(%var_5242: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), uint32] {
  %214 = fn (%var_5236: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), uint32] {
    %208 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %209 = %208.0;
    %210 = cast(%var_5236, dtype="uint32") /* ty=Tensor[(8, 5, 12), uint32] */;
    %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(3), int32] */;
    %212 = cast(%209, dtype="uint32") /* ty=Tensor[(8, 5, 12), uint32] */;
    %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    left_shift(%212, %213) /* ty=Tensor[(8, 5, 12), uint32] */
  };
  %214(%var_5242) /* ty=Tensor[(8, 5, 12), uint32] */
}

def @func_1942(%var_1917: Tensor[(1, 11, 11), float64], %var_1918: Tensor[(13, 11, 11), float64], %var_1931: Tensor[(24), uint16]) -> (Tensor[(13, 11, 11), float64], Tensor[(99), float32], Tensor[(24), uint16], Tensor[(99), float32]) {
  %215 = cast(%var_1917, dtype="float64") /* ty=Tensor[(1, 11, 11), float64] */;
  %216 = cast(%var_1918, dtype="float64") /* ty=Tensor[(13, 11, 11), float64] */;
  %217 = cast(%var_1931, dtype="uint16") /* ty=Tensor[(24), uint16] */;
  %218 = cast(meta[relay.Constant][13] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %219 = reshape(%217, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), uint16] */;
  %220 = reshape(%218, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %221 = @func_1039(%219, %220) /* ty=(Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) */;
  %222 = mod(%215, %216) /* ty=Tensor[(13, 11, 11), float64] */;
  %223 = %221.1;
  (%222, %223, %var_1931, meta[relay.Constant][13] /* ty=Tensor[(99), float32] */)
}

def @func_6035(%var_6034: Tensor[(5, 15, 4), float32]) -> (Tensor[(5, 15, 4), float64], Tensor[(5, 15, 4), float32]) {
  %242 = fn (%var_6010: Tensor[(5, 15, 4), float32]) -> (Tensor[(5, 15, 4), float64], Tensor[(5, 15, 4), float32]) {
    %224 = @func_5690() /* ty=(Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
    %225 = %224.1;
    %226 = cast(%var_6010, dtype="bool") /* ty=Tensor[(5, 15, 4), bool] */;
    %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
    %228 = cast(%225, dtype="bool") /* ty=Tensor[(5, 15, 4), bool] */;
    %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %230 = less_equal(%228, %229) /* ty=Tensor[(5, 15, 4), bool] */;
    %231 = cast(%230, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
    %232 = tan(%231) /* ty=Tensor[(5, 15, 4), float32] */;
    %233 = cast(%225, dtype="float64") /* ty=Tensor[(5, 15, 4), float64] */;
    %234 = shape_of(%232, dtype="int32") /* ty=Tensor[(3), int32] */;
    %235 = cast(%232, dtype="float64") /* ty=Tensor[(5, 15, 4), float64] */;
    %236 = dyn.reshape(%233, %234, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %237 = cast(%var_6010, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
    %238 = reshape(%237, newshape=[300]) /* ty=Tensor[(300), float32] */;
    %239 = @func_5473(%238) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
    %240 = floor_mod(%235, %236) /* ty=Tensor[(5, 15, 4), float64] */;
    %241 = %239.1;
    (%240, %241)
  };
  %242(%var_6034) /* ty=(Tensor[(5, 15, 4), float64], Tensor[(5, 15, 4), float32]) */
}

def @func_5883(%var_5881: Tensor[(10, 7, 10), float32], %var_5882: Tensor[(10, 7, 10), float32]) -> (Tensor[(10, 7, 10), float32], Tensor[(10, 7, 10), float32], Tensor[(8, 5, 12), float32], Tensor[(10, 7, 10), bool], Tensor[(8, 5, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) {
  @func_5879(%var_5881, %var_5882) /* ty=(Tensor[(10, 7, 10), float32], Tensor[(10, 7, 10), float32], Tensor[(8, 5, 12), float32], Tensor[(10, 7, 10), bool], Tensor[(8, 5, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) */
}

def @func_5287(%var_5253: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), float32] {
  %243 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %244 = cast(%var_5253, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_divide(%246, %247) /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_5476(%var_5474: Tensor[(300), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  @func_5473(%var_5474) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */
}

def @func_6260(%var_6258: Tensor[(315), int8]) -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(882), float64], Tensor[(520), uint64], Tensor[(3, 15, 7), int8], Tensor[(315), int8]) {
  @func_6257(%var_6258) /* ty=(Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(882), float64], Tensor[(520), uint64], Tensor[(3, 15, 7), int8], Tensor[(315), int8]) */
}

def @main() -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(8, 5, 12), bool], Tensor[(11, 9, 2160), uint16], Tensor[(2, 12), uint16], Tensor[(99), float64]) {
  %248 = @func_5691() /* ty=(Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */;
  %249 = @func_6001() /* ty=(Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32], Tensor[(15, 10, 8), uint16], Tensor[(1200), float32], Tensor[(8, 5, 12), bool]) */;
  %250 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 12), uint16] */, dtype="uint16") /* ty=Tensor[(2, 12), uint16] */;
  %251 = cast(meta[relay.Constant][15] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %252 = reshape(%250, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), uint16] */;
  %253 = reshape(%251, newshape=[99]) /* ty=Tensor[(99), float32] */;
  %254 = @func_1043(%252, %253) /* ty=(Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) */;
  %255 = cast(meta[relay.Constant][15] /* ty=Tensor[(99), float32] */, dtype="float64") /* ty=Tensor[(99), float64] */;
  %256 = @func_5314() /* ty=Tensor[(8, 5, 12), bool] */;
  %257 = %248.1;
  %258 = %249.4;
  %259 = %254.2;
  %260 = asin(%255) /* ty=Tensor[(99), float64] */;
  (%256, %257, %258, %259, meta[relay.Constant][14] /* ty=Tensor[(2, 12), uint16] */, %260)
}

def @func_6488(%var_6487: Tensor[(2, 5, 14), float32]) -> (Tensor[(2, 5, 14), float32],) {
  %263 = fn (%var_6470: Tensor[(2, 5, 14), float32]) -> (Tensor[(2, 5, 14), float32],) {
    %261 = cast(%var_6470, dtype="float32") /* ty=Tensor[(2, 5, 14), float32] */;
    %262 = sinh(%261) /* ty=Tensor[(2, 5, 14), float32] */;
    (%262,)
  };
  %263(%var_6487) /* ty=(Tensor[(2, 5, 14), float32],) */
}

def @func_6513() -> Tensor[(8, 5, 12), uint64] {
  %265 = fn () -> Tensor[(8, 5, 12), uint64] {
    %264 = @func_5815() /* ty=(Tensor[(8, 5, 12), uint64],) */;
    %264.0
  };
  %265() /* ty=Tensor[(8, 5, 12), uint64] */
}

def @func_5021() -> (Tensor[(8, 5, 12), float64],) {
  %272 = fn () -> (Tensor[(8, 5, 12), float64],) {
    %266 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %267 = %266.0;
    %268 = cast(%267, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
    %269 = erf(%268) /* ty=Tensor[(8, 5, 12), float64] */;
    %270 = cast(%269, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
    %271 = log10(%270) /* ty=Tensor[(8, 5, 12), float64] */;
    (%271,)
  };
  %272() /* ty=(Tensor[(8, 5, 12), float64],) */
}

def @func_5839() -> Tensor[(8, 5, 12), bool] {
  %274 = fn () -> Tensor[(8, 5, 12), bool] {
    %273 = @func_3800() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %273.0
  };
  %274() /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_1903(%var_1899: Tensor[(13, 4, 7), float32], %var_1900: Tensor[(13, 4, 7), float32], %var_1901: Tensor[(882), float64], %var_1902: Tensor[(315), int8]) -> (Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(300, 288), bool], Tensor[(16, 2, 9), float32], Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64], Tensor[(14, 7, 9), float64], Tensor[(882), float64], Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(315), int8], Tensor[(13, 4, 7), float32]) {
  @func_1897(%var_1899, %var_1900, %var_1901, %var_1902) /* ty=(Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(300, 288), bool], Tensor[(16, 2, 9), float32], Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64], Tensor[(14, 7, 9), float64], Tensor[(882), float64], Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(315), int8], Tensor[(13, 4, 7), float32]) */
}

def @func_3764() -> (Tensor[(8, 5, 12), bool],) {
  %275 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  (%275,)
}

def @func_5623() -> Tensor[(8, 5, 12), float64] {
  %279 = fn () -> Tensor[(8, 5, 12), float64] {
    %276 = @func_5020() /* ty=(Tensor[(8, 5, 12), float64],) */;
    %277 = %276.0;
    %278 = cast(%277, dtype="float64") /* ty=Tensor[(8, 5, 12), float64] */;
    acosh(%278) /* ty=Tensor[(8, 5, 12), float64] */
  };
  %279() /* ty=Tensor[(8, 5, 12), float64] */
}

def @func_5879(%var_5841: Tensor[(10, 7, 10), float32], %var_5866: Tensor[(10, 7, 10), float32]) -> (Tensor[(10, 7, 10), float32], Tensor[(10, 7, 10), float32], Tensor[(8, 5, 12), float32], Tensor[(10, 7, 10), bool], Tensor[(8, 5, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) {
  %280 = cast(%var_5841, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  %281 = shape_of(meta[relay.Constant][16] /* ty=Tensor[(10, 7, 10), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 7, 10), float32] */, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %284 = cast(%var_5841, dtype="float32") /* ty=Tensor[(10, 7, 10), float32] */;
  %285 = cast(%var_5866, dtype="bool") /* ty=Tensor[(10, 7, 10), bool] */;
  %286 = shape_of(%var_5841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %287 = cast(%var_5841, dtype="bool") /* ty=Tensor[(10, 7, 10), bool] */;
  %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %289 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %290 = cast(meta[relay.Constant][17] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
  %291 = reshape(%290, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
  %292 = @func_2069(%291) /* ty=(Tensor[(7, 16, 3), float64],) */;
  %293 = power(%282, %283) /* ty=Tensor[(10, 7, 10), float32] */;
  %294 = erf(%284) /* ty=Tensor[(10, 7, 10), float32] */;
  %295 = @func_4536() /* ty=Tensor[(8, 5, 12), float32] */;
  %296 = greater(%287, %288) /* ty=Tensor[(10, 7, 10), bool] */;
  %297 = %289.0;
  %298 = %292.0;
  (%293, %294, %295, %296, %297, %298, meta[relay.Constant][17] /* ty=Tensor[(336), float64] */)
}

def @func_4005() -> (Tensor[(8, 5, 12), bool],) {
  %301 = fn () -> (Tensor[(8, 5, 12), bool],) {
    %299 = @func_3800() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %300 = %299.0;
    (%300,)
  };
  %301() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_5304(%var_5303: Tensor[(9, 1, 1), int32]) -> Tensor[(9, 3, 2), int32] {
  %304 = fn (%var_5292: Tensor[(9, 1, 1), int32]) -> Tensor[(9, 3, 2), int32] {
    %302 = cast(%var_5292, dtype="int32") /* ty=Tensor[(9, 1, 1), int32] */;
    %303 = cast(meta[relay.Constant][18] /* ty=Tensor[(9, 3, 2), int32] */, dtype="int32") /* ty=Tensor[(9, 3, 2), int32] */;
    bitwise_xor(%302, %303) /* ty=Tensor[(9, 3, 2), int32] */
  };
  %304(%var_5303) /* ty=Tensor[(9, 3, 2), int32] */
}

def @func_6442() -> (Tensor[(8, 5, 12), int16],) {
  %306 = fn () -> (Tensor[(8, 5, 12), int16],) {
    %305 = @func_4502() /* ty=Tensor[(8, 5, 12), int16] */;
    (%305,)
  };
  %306() /* ty=(Tensor[(8, 5, 12), int16],) */
}

def @func_3331(%var_3330: Tensor[(7, 5, 9), float64]) -> Tensor[(7, 5, 9), float64] {
  %308 = fn (%var_3323: Tensor[(7, 5, 9), float64]) -> Tensor[(7, 5, 9), float64] {
    %307 = cast(%var_3323, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    tan(%307) /* ty=Tensor[(7, 5, 9), float64] */
  };
  %308(%var_3330) /* ty=Tensor[(7, 5, 9), float64] */
}

def @func_4259() -> (Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) {
  @func_4257() /* ty=(Tensor[(336), float64], Tensor[(1080), uint8], Tensor[(8, 5, 12), float32]) */
}

def @func_4427(%var_4424: Tensor[(315), float64], %var_4425: Tensor[(7, 5, 9), bool], %var_4426: Tensor[(99), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(7, 5, 9), bool], Tensor[(9, 15, 16), int16], Tensor[(99), float32], Tensor[(180, 12), float32], Tensor[(3, 15, 7), int8], Tensor[(7, 5, 9), bool]) {
  %340 = fn (%var_4337: Tensor[(315), float64], %var_4353: Tensor[(7, 5, 9), bool], %var_4385: Tensor[(99), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(7, 5, 9), bool], Tensor[(9, 15, 16), int16], Tensor[(99), float32], Tensor[(180, 12), float32], Tensor[(3, 15, 7), int8], Tensor[(7, 5, 9), bool]) {
    %309 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %310 = cast(%var_4337, dtype="float64") /* ty=Tensor[(315), float64] */;
    %311 = reshape(%310, newshape=[7, 5, 9]) /* ty=Tensor[(7, 5, 9), float64] */;
    %312 = @func_3329(%311) /* ty=Tensor[(7, 5, 9), float64] */;
    %313 = cast(%var_4337, dtype="bool") /* ty=Tensor[(315), bool] */;
    %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
    %315 = cast(%312, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %317 = logical_and(%315, %316) /* ty=Tensor[(7, 5, 9), bool] */;
    %318 = cast(%var_4353, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %319 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
    %320 = cast(%317, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %321 = dyn.reshape(%318, %319, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %322 = cast(%var_4385, dtype="float32") /* ty=Tensor[(99), float32] */;
    %323 = cast(meta[relay.Constant][19] /* ty=Tensor[(180, 12), float32] */, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %324 = reshape(%322, newshape=[11, 9, 1]) /* ty=Tensor[(11, 9, 1), float32] */;
    %325 = reshape(%323, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %326 = @func_938(%324, %325) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */;
    %327 = cast(%317, dtype="float32") /* ty=Tensor[(7, 5, 9), float32] */;
    %328 = log10(%327) /* ty=Tensor[(7, 5, 9), float32] */;
    %329 = cast(%328, dtype="float64") /* ty=Tensor[(7, 5, 9), float64] */;
    %330 = log(%329) /* ty=Tensor[(7, 5, 9), float64] */;
    %331 = cast(%312, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %332 = shape_of(%330, dtype="int32") /* ty=Tensor[(3), int32] */;
    %333 = cast(%330, dtype="bool") /* ty=Tensor[(7, 5, 9), bool] */;
    %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %335 = %309.0;
    %336 = logical_or(%320, %321) /* ty=Tensor[(7, 5, 9), bool] */;
    %337 = %326.1;
    %338 = @func_4096() /* ty=Tensor[(3, 15, 7), int8] */;
    %339 = less(%333, %334) /* ty=Tensor[(7, 5, 9), bool] */;
    (%335, %336, %337, %var_4385, meta[relay.Constant][19] /* ty=Tensor[(180, 12), float32] */, %338, %339)
  };
  %340(%var_4424, %var_4425, %var_4426) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(7, 5, 9), bool], Tensor[(9, 15, 16), int16], Tensor[(99), float32], Tensor[(180, 12), float32], Tensor[(3, 15, 7), int8], Tensor[(7, 5, 9), bool]) */
}

def @func_2653(%var_2649: Tensor[(15, 3, 5), float64], %var_2650: Tensor[(364), float32], %var_2651: Tensor[(882), float64], %var_2652: Tensor[(315), int8]) -> (Tensor[(15, 3, 5), float64], Tensor[(15, 3, 5), float64], Tensor[(16, 2, 9), float32], Tensor[(364), float32], Tensor[(882), float64], Tensor[(315), int8]) {
  @func_2647(%var_2649, %var_2650, %var_2651, %var_2652) /* ty=(Tensor[(15, 3, 5), float64], Tensor[(15, 3, 5), float64], Tensor[(16, 2, 9), float32], Tensor[(364), float32], Tensor[(882), float64], Tensor[(315), int8]) */
}

def @func_6522(%var_6521: Tensor[(6, 4, 16), float32]) -> Tensor[(6, 4, 16), float32] {
  %342 = fn (%var_6516: Tensor[(6, 4, 16), float32]) -> Tensor[(6, 4, 16), float32] {
    %341 = cast(%var_6516, dtype="float32") /* ty=Tensor[(6, 4, 16), float32] */;
    acosh(%341) /* ty=Tensor[(6, 4, 16), float32] */
  };
  %342(%var_6521) /* ty=Tensor[(6, 4, 16), float32] */
}

def @func_4818() -> (Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(9, 3, 2), float32], Tensor[(3, 18), int64], Tensor[(882), float64], Tensor[(8, 5, 12), bool]) {
  @func_4816() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(9, 3, 2), float32], Tensor[(3, 18), int64], Tensor[(882), float64], Tensor[(8, 5, 12), bool]) */
}

def @func_1191(%var_1183: Tensor[(3, 15, 7), int8], %var_1184: Tensor[(3, 15, 7), int8]) -> (Tensor[(3, 15, 7), int8],) {
  %343 = cast(%var_1184, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %344 = shape_of(%var_1183, dtype="int32") /* ty=Tensor[(3), int32] */;
  %345 = cast(%var_1183, dtype="int8") /* ty=Tensor[(3, 15, 7), int8] */;
  %346 = dyn.reshape(%343, %344, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %347 = bitwise_and(%345, %346) /* ty=Tensor[(3, 15, 7), int8] */;
  (%347,)
}

def @func_1775(%var_1771: Tensor[(5, 15, 4), float32]) -> (Tensor[(5, 15, 4), float32],) {
  %348 = cast(%var_1771, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %349 = exp(%348) /* ty=Tensor[(5, 15, 4), float32] */;
  (%349,)
}

def @func_4816() -> (Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(9, 3, 2), float32], Tensor[(3, 18), int64], Tensor[(882), float64], Tensor[(8, 5, 12), bool]) {
  %350 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %351 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %352 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 18), int64] */, dtype="int64") /* ty=Tensor[(3, 18), int64] */;
  %353 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 18), int64] */, dtype="int64") /* ty=Tensor[(3, 18), int64] */;
  %354 = cast(meta[relay.Constant][21] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %355 = reshape(%352, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %356 = reshape(%353, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %357 = reshape(%354, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %358 = @func_112(%355, %356, %357) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %359 = @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %360 = %350.0;
  %361 = %351.0;
  %362 = %358.1;
  %363 = %359.0;
  (%360, %361, %362, meta[relay.Constant][20] /* ty=Tensor[(3, 18), int64] */, meta[relay.Constant][21] /* ty=Tensor[(882), float64] */, %363)
}

def @func_303(%var_223: int16, %var_224: Tensor[(1, 5, 2), int16], %var_236: Tensor[(882), float64], %var_262: Tensor[(882), float64]) -> (Tensor[(?, 5, 2), float64], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(14, 7, 9), float64], Tensor[(14, 7, 9), float64], Tensor[(882), uint16], Tensor[(9, 3, 2), bool], Tensor[(14, 7, 9), float64], Tensor[(1, 5, 2), float32], Tensor[(9, 3, 2), bool]) {
  %364 = cast(%var_223, dtype="int16") /* ty=int16 */;
  %365 = cast(%var_224, dtype="int16") /* ty=Tensor[(1, 5, 2), int16] */;
  %366 = maximum(%364, %365) /* ty=Tensor[(1, 5, 2), int16] */;
  %367 = cast(%366, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  %368 = shape_of(%var_224, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%var_224, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %371 = cast(meta[relay.Constant][22] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %372 = cast(meta[relay.Constant][22] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %373 = cast(%var_236, dtype="float64") /* ty=Tensor[(882), float64] */;
  %374 = reshape(%371, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %375 = reshape(%372, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %376 = reshape(%373, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %377 = @func_112(%374, %375, %376) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %378 = cast(%var_236, dtype="float64") /* ty=Tensor[(882), float64] */;
  %379 = reshape(%378, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %380 = cast(%var_236, dtype="float64") /* ty=Tensor[(882), float64] */;
  %381 = reshape(%380, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %382 = %377.1;
  %383 = cast(%382, dtype="int64") /* ty=Tensor[(9, 3, 2), int64] */;
  %384 = cast(%382, dtype="int64") /* ty=Tensor[(9, 3, 2), int64] */;
  %385 = @func_71(%379) /* ty=Tensor[(14, 7, 9), float64] */;
  %386 = cast(%385, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  %387 = reshape(%383, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %388 = reshape(%384, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %389 = reshape(%386, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %390 = @func_112(%387, %388, %389) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %391 = %390.3;
  %392 = cast(%var_262, dtype="uint16") /* ty=Tensor[(882), uint16] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(1), int32] */;
  %394 = cast(%391, dtype="uint16") /* ty=Tensor[(882), uint16] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %396 = cast(meta[relay.Constant][22] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %397 = cast(%382, dtype="int64") /* ty=Tensor[(9, 3, 2), int64] */;
  %398 = cast(%391, dtype="float64") /* ty=Tensor[(882), float64] */;
  %399 = reshape(%396, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %400 = reshape(%397, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %401 = reshape(%398, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %402 = @func_112(%399, %400, %401) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %403 = maximum(%394, %395) /* ty=Tensor[(882), uint16] */;
  %404 = cast(%403, dtype="float64") /* ty=Tensor[(882), float64] */;
  %405 = reshape(%404, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %406 = cast(%366, dtype="float64") /* ty=Tensor[(1, 5, 2), float64] */;
  %407 = acosh(%406) /* ty=Tensor[(1, 5, 2), float64] */;
  %408 = cast(%407, dtype="float32") /* ty=Tensor[(1, 5, 2), float32] */;
  %409 = acos(%408) /* ty=Tensor[(1, 5, 2), float32] */;
  %410 = cast(%409, dtype="float32") /* ty=Tensor[(1, 5, 2), float32] */;
  %411 = cast(meta[relay.Constant][22] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %412 = cast(meta[relay.Constant][22] /* ty=Tensor[(54), int64] */, dtype="int64") /* ty=Tensor[(54), int64] */;
  %413 = @func_71(%381) /* ty=Tensor[(14, 7, 9), float64] */;
  %414 = cast(%413, dtype="float64") /* ty=Tensor[(14, 7, 9), float64] */;
  %415 = reshape(%411, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %416 = reshape(%412, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %417 = reshape(%414, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %418 = @func_112(%415, %416, %417) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %419 = floor_divide(%369, %370) /* ty=Tensor[(?, 5, 2), float64] */;
  %420 = %402.0;
  %421 = @func_71(%405) /* ty=Tensor[(14, 7, 9), float64] */;
  %422 = cos(%410) /* ty=Tensor[(1, 5, 2), float32] */;
  %423 = %418.0;
  (%419, %382, meta[relay.Constant][22] /* ty=Tensor[(54), int64] */, %var_236, %385, %413, %403, %420, %421, %422, %423)
}

def @func_3653() -> Tensor[(8, 5, 12), bool] {
  %428 = fn () -> Tensor[(8, 5, 12), bool] {
    %424 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %425 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 5, 12), uint8] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    not_equal(%426, %427) /* ty=Tensor[(8, 5, 12), bool] */
  };
  %428() /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_1778(%var_1776: Tensor[(5, 15, 4), float32]) -> (Tensor[(5, 15, 4), float32],) {
  @func_1775(%var_1776) /* ty=(Tensor[(5, 15, 4), float32],) */
}

def @func_5670() -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32]) {
  @func_5668() /* ty=(Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32]) */
}

def @func_5691() -> (Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  %434 = fn () -> (Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
    %429 = cast(meta[relay.Constant][25] /* ty=Tensor[(300), float32] */, dtype="float32") /* ty=Tensor[(300), float32] */;
    %430 = reshape(%429, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
    %431 = @func_1775(%430) /* ty=(Tensor[(5, 15, 4), float32],) */;
    %432 = @func_5622() /* ty=Tensor[(8, 5, 12), float64] */;
    %433 = %431.0;
    (%432, %433, meta[relay.Constant][25] /* ty=Tensor[(300), float32] */)
  };
  %434() /* ty=(Tensor[(8, 5, 12), float64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */
}

def @func_5089() -> (Tensor[(8, 5, 12), bool],) {
  %435 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %436 = %435.0;
  (%436,)
}

def @func_4960() -> Tensor[(8, 5, 12), float32] {
  @func_4958() /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_4098() -> Tensor[(3, 15, 7), int8] {
  @func_4096() /* ty=Tensor[(3, 15, 7), int8] */
}

def @func_5473(%var_5459: Tensor[(300), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  %437 = cast(%var_5459, dtype="float32") /* ty=Tensor[(300), float32] */;
  %438 = reshape(%437, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %439 = @func_1775(%438) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %440 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %441 = %439.0;
  (%440, %441, %var_5459)
}

def @func_1947(%var_1944: Tensor[(1, 11, 11), float64], %var_1945: Tensor[(13, 11, 11), float64], %var_1946: Tensor[(24), uint16]) -> (Tensor[(13, 11, 11), float64], Tensor[(99), float32], Tensor[(24), uint16], Tensor[(99), float32]) {
  @func_1942(%var_1944, %var_1945, %var_1946) /* ty=(Tensor[(13, 11, 11), float64], Tensor[(99), float32], Tensor[(24), uint16], Tensor[(99), float32]) */
}

def @func_3907(%var_3905: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), int64] {
  @func_3904(%var_3905) /* ty=Tensor[(8, 5, 12), int64] */
}

def @func_5405(%var_5323: Tensor[(7, 14, 12), float64], %var_5386: Tensor[(7, 14, 12), float64]) -> (Tensor[(7, 14, 12), float32], Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(7, 14, 12), uint16], Tensor[(8, 5, 12), bool], Tensor[(8, 5, 12), bool], Tensor[(99), float32], Tensor[(2160), float32], Tensor[(8, 5, 12), bool], Tensor[(7, 14, 12), int64]) {
  %442 = cast(%var_5323, dtype="float32") /* ty=Tensor[(7, 14, 12), float32] */;
  %443 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %444 = cast(%var_5323, dtype="float64") /* ty=Tensor[(7, 14, 12), float64] */;
  %445 = asin(%444) /* ty=Tensor[(7, 14, 12), float64] */;
  %446 = cast(%var_5323, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
  %447 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %448 = cast(%445, dtype="uint16") /* ty=Tensor[(7, 14, 12), uint16] */;
  %449 = dyn.reshape(%446, %447, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %450 = cast(meta[relay.Constant][26] /* ty=Tensor[(99), float32] */, dtype="float32") /* ty=Tensor[(99), float32] */;
  %451 = cast(meta[relay.Constant][27] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %452 = reshape(%450, newshape=[33, 3]) /* ty=Tensor[(33, 3), float32] */;
  %453 = reshape(%451, newshape=[180, 12]) /* ty=Tensor[(180, 12), float32] */;
  %454 = @func_5179(%452, %453) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(11, 9, ?), float64], Tensor[(180, 12), float64]) */;
  %455 = @func_3800() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %456 = cast(%var_5386, dtype="int64") /* ty=Tensor[(7, 14, 12), int64] */;
  %457 = shape_of(%445, dtype="int32") /* ty=Tensor[(3), int32] */;
  %458 = cast(%445, dtype="int64") /* ty=Tensor[(7, 14, 12), int64] */;
  %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %460 = tan(%442) /* ty=Tensor[(7, 14, 12), float32] */;
  %461 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %462 = %443.1;
  %463 = subtract(%448, %449) /* ty=Tensor[(7, 14, 12), uint16] */;
  %464 = @func_4835() /* ty=Tensor[(8, 5, 12), bool] */;
  %465 = %454.0;
  %466 = %455.0;
  %467 = multiply(%458, %459) /* ty=Tensor[(7, 14, 12), int64] */;
  (%460, %461, %462, %463, %464, %465, meta[relay.Constant][26] /* ty=Tensor[(99), float32] */, meta[relay.Constant][27] /* ty=Tensor[(2160), float32] */, %466, %467)
}

def @func_4958() -> Tensor[(8, 5, 12), float32] {
  %468 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %469 = %468.0;
  %470 = cast(%469, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  tan(%470) /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_1753(%var_1714: Tensor[(12, 15, 14), float64], %var_1749: int16, %var_1750: Tensor[(10), int16]) -> (Tensor[(12, 15, 14), float64], Tensor[(12, 15, 14), int64], Tensor[(882), uint16], int16, Tensor[(10), int16], Tensor[(882), float64]) {
  %471 = cast(%var_1714, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
  %472 = cast(%var_1714, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
  %473 = exp(%472) /* ty=Tensor[(12, 15, 14), float64] */;
  %474 = cast(%473, dtype="int64") /* ty=Tensor[(12, 15, 14), int64] */;
  %475 = shape_of(%var_1714, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(%var_1714, dtype="int64") /* ty=Tensor[(12, 15, 14), int64] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %478 = cast(%var_1749, dtype="int16") /* ty=int16 */;
  %479 = cast(%var_1750, dtype="int16") /* ty=Tensor[(10), int16] */;
  %480 = cast(meta[relay.Constant][28] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %481 = cast(meta[relay.Constant][28] /* ty=Tensor[(882), float64] */, dtype="float64") /* ty=Tensor[(882), float64] */;
  %482 = reshape(%478, newshape=[]) /* ty=int16 */;
  %483 = reshape(%479, newshape=[1, 5, 2]) /* ty=Tensor[(1, 5, 2), int16] */;
  %484 = reshape(%480, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %485 = reshape(%481, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %486 = @func_303(%482, %483, %484, %485) /* ty=(Tensor[(?, 5, 2), float64], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(14, 7, 9), float64], Tensor[(14, 7, 9), float64], Tensor[(882), uint16], Tensor[(9, 3, 2), bool], Tensor[(14, 7, 9), float64], Tensor[(1, 5, 2), float32], Tensor[(9, 3, 2), bool]) */;
  %487 = rsqrt(%471) /* ty=Tensor[(12, 15, 14), float64] */;
  %488 = multiply(%476, %477) /* ty=Tensor[(12, 15, 14), int64] */;
  %489 = %486.6;
  (%487, %488, %489, %var_1749, %var_1750, meta[relay.Constant][28] /* ty=Tensor[(882), float64] */)
}

def @func_3819() -> (Tensor[(8, 5, 12), bool],) {
  %490 = @func_3764() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %491 = %490.0;
  (%491,)
}

def @func_1897(%var_1791: Tensor[(13, 4, 7), float32], %var_1820: Tensor[(13, 4, 7), float32], %var_1876: Tensor[(882), float64], %var_1886: Tensor[(315), int8]) -> (Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(300, 288), bool], Tensor[(16, 2, 9), float32], Tensor[(13, 4, 7), float64], Tensor[(13, 4, 7), float64], Tensor[(14, 7, 9), float64], Tensor[(882), float64], Tensor[(16, 2, 9), float32], Tensor[(5, 15, 4), float32], Tensor[(3, 15, 7), int8], Tensor[(315), int8], Tensor[(13, 4, 7), float32]) {
  %492 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %493 = reshape(%492, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %494 = @func_1598(%493) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %495 = cast(meta[relay.Constant][30] /* ty=Tensor[(300, 1), float32] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %496 = reshape(%495, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %497 = @func_1775(%496) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %498 = cast(meta[relay.Constant][30] /* ty=Tensor[(300, 1), float32] */, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %499 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), float32] */, dtype="bool") /* ty=Tensor[(288), bool] */;
  %500 = cast(meta[relay.Constant][29] /* ty=Tensor[(288), float32] */, dtype="float32") /* ty=Tensor[(288), float32] */;
  %501 = reshape(%500, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %502 = @func_1598(%501) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %503 = cast(%var_1791, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %504 = acosh(%503) /* ty=Tensor[(13, 4, 7), float32] */;
  %505 = cast(%var_1791, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %506 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%504, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %509 = add(%507, %508) /* ty=Tensor[(13, 4, 7), float32] */;
  %510 = cast(%var_1820, dtype="bool") /* ty=Tensor[(13, 4, 7), bool] */;
  %511 = shape_of(%509, dtype="int32") /* ty=Tensor[(3), int32] */;
  %512 = cast(%509, dtype="bool") /* ty=Tensor[(13, 4, 7), bool] */;
  %513 = dyn.reshape(%510, %511, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %514 = logical_and(%512, %513) /* ty=Tensor[(13, 4, 7), bool] */;
  %515 = cast(%514, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %516 = shape_of(%504, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%504, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %519 = cast(%509, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %520 = cosh(%519) /* ty=Tensor[(13, 4, 7), float32] */;
  %521 = cast(%509, dtype="uint8") /* ty=Tensor[(13, 4, 7), uint8] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(3), int32] */;
  %523 = cast(%520, dtype="uint8") /* ty=Tensor[(13, 4, 7), uint8] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %525 = logical_xor(%523, %524) /* ty=Tensor[(13, 4, 7), uint8] */;
  %526 = cast(%var_1791, dtype="int32") /* ty=Tensor[(13, 4, 7), int32] */;
  %527 = shape_of(%525, dtype="int32") /* ty=Tensor[(3), int32] */;
  %528 = cast(%525, dtype="int32") /* ty=Tensor[(13, 4, 7), int32] */;
  %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %530 = maximum(%528, %529) /* ty=Tensor[(13, 4, 7), int32] */;
  %531 = cast(%504, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %533 = cast(%530, dtype="float64") /* ty=Tensor[(13, 4, 7), float64] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %535 = cast(%var_1876, dtype="float64") /* ty=Tensor[(882), float64] */;
  %536 = reshape(%535, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %537 = %502.0;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(16, 2, 9), float32] */;
  %539 = reshape(%538, newshape=[16, 2, 9]) /* ty=Tensor[(16, 2, 9), float32] */;
  %540 = @func_1598(%539) /* ty=(Tensor[(16, 2, 9), float32],) */;
  %541 = %497.0;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(5, 15, 4), float32] */;
  %543 = reshape(%542, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %544 = @func_1775(%543) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %545 = cast(%var_1886, dtype="int8") /* ty=Tensor[(315), int8] */;
  %546 = cast(%var_1886, dtype="int8") /* ty=Tensor[(315), int8] */;
  %547 = reshape(%545, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %548 = reshape(%546, newshape=[3, 15, 7]) /* ty=Tensor[(3, 15, 7), int8] */;
  %549 = @func_1191(%547, %548) /* ty=(Tensor[(3, 15, 7), int8],) */;
  %550 = cast(%525, dtype="float32") /* ty=Tensor[(13, 4, 7), float32] */;
  %551 = %494.0;
  %552 = greater(%498, %499) /* ty=Tensor[(300, 288), bool] */;
  %553 = mod(%517, %518) /* ty=Tensor[(13, 4, 7), float64] */;
  %554 = subtract(%533, %534) /* ty=Tensor[(13, 4, 7), float64] */;
  %555 = @func_71(%536) /* ty=Tensor[(14, 7, 9), float64] */;
  %556 = %540.0;
  %557 = %544.0;
  %558 = %549.0;
  %559 = cos(%550) /* ty=Tensor[(13, 4, 7), float32] */;
  (%551, %541, %552, %537, %553, %554, %555, %var_1876, %556, %557, %558, %var_1886, %559)
}

def @func_3732(%var_3729: Tensor[(8, 5, 12), bool], %var_3730: Tensor[(54), int64], %var_3731: Tensor[(300), float32]) -> (Tensor[(882), float64], Tensor[(10, 52), uint64], Tensor[(8, 5, 12), uint8], Tensor[(8, 5, 12), uint8], Tensor[(9, 3, 2), bool], Tensor[(54), int64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  @func_3727(%var_3729, %var_3730, %var_3731) /* ty=(Tensor[(882), float64], Tensor[(10, 52), uint64], Tensor[(8, 5, 12), uint8], Tensor[(8, 5, 12), uint8], Tensor[(9, 3, 2), bool], Tensor[(54), int64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) */
}

def @func_5668() -> (Tensor[(8, 5, 12), float32], Tensor[(8, 5, 12), float32]) {
  %560 = @func_4733() /* ty=(Tensor[(8, 5, 12), float32],) */;
  %561 = @func_4536() /* ty=Tensor[(8, 5, 12), float32] */;
  %562 = %560.0;
  (%561, %562)
}

def @func_4458() -> (Tensor[(8, 5, 12), bool],) {
  %563 = @func_4004() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %564 = %563.0;
  (%564,)
}

def @func_3516(%var_3515: Tensor[(10, 9, 12), uint8]) -> (Tensor[(10, 9, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) {
  %574 = fn (%var_3482: Tensor[(10, 9, 12), uint8]) -> (Tensor[(10, 9, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) {
    %565 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 12), uint8] */, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
    %566 = shape_of(%var_3482, dtype="int32") /* ty=Tensor[(3), int32] */;
    %567 = cast(%var_3482, dtype="bool") /* ty=Tensor[(10, 9, 12), bool] */;
    %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %569 = cast(meta[relay.Constant][32] /* ty=Tensor[(336), float64] */, dtype="float64") /* ty=Tensor[(336), float64] */;
    %570 = reshape(%569, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), float64] */;
    %571 = @func_2069(%570) /* ty=(Tensor[(7, 16, 3), float64],) */;
    %572 = equal(%567, %568) /* ty=Tensor[(10, 9, 12), bool] */;
    %573 = %571.0;
    (%572, %573, meta[relay.Constant][32] /* ty=Tensor[(336), float64] */)
  };
  %574(%var_3515) /* ty=(Tensor[(10, 9, 12), bool], Tensor[(7, 16, 3), float64], Tensor[(336), float64]) */
}

def @func_5091() -> (Tensor[(8, 5, 12), bool],) {
  @func_5089() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_117(%var_114: Tensor[(9, 3, 2), int64], %var_115: Tensor[(9, 3, 2), int64], %var_116: Tensor[(882), float64]) -> (Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) {
  @func_112(%var_114, %var_115, %var_116) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */
}

def @func_5290(%var_5288: Tensor[(8, 5, 12), bool]) -> Tensor[(8, 5, 12), float32] {
  @func_5287(%var_5288) /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_1758(%var_1755: Tensor[(12, 15, 14), float64], %var_1756: int16, %var_1757: Tensor[(10), int16]) -> (Tensor[(12, 15, 14), float64], Tensor[(12, 15, 14), int64], Tensor[(882), uint16], int16, Tensor[(10), int16], Tensor[(882), float64]) {
  @func_1753(%var_1755, %var_1756, %var_1757) /* ty=(Tensor[(12, 15, 14), float64], Tensor[(12, 15, 14), int64], Tensor[(882), uint16], int16, Tensor[(10), int16], Tensor[(882), float64]) */
}

def @func_5314() -> Tensor[(8, 5, 12), bool] {
  %575 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
  %575.0
}

def @func_781(%var_780: Tensor[(9, 15, 16), float32]) -> (Tensor[(9, 15, 16), int16],) {
  %588 = fn (%var_753: Tensor[(9, 15, 16), float32]) -> (Tensor[(9, 15, 16), int16],) {
    %576 = cast(%var_753, dtype="float32") /* ty=Tensor[(9, 15, 16), float32] */;
    %577 = tan(%576) /* ty=Tensor[(9, 15, 16), float32] */;
    %578 = cast(%var_753, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
    %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
    %580 = cast(%577, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %582 = minimum(%580, %581) /* ty=Tensor[(9, 15, 16), int16] */;
    %583 = cast(%577, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="int16") /* ty=Tensor[(9, 15, 16), int16] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %587 = bitwise_and(%585, %586) /* ty=Tensor[(9, 15, 16), int16] */;
    (%587,)
  };
  %588(%var_780) /* ty=(Tensor[(9, 15, 16), int16],) */
}

def @func_4460() -> (Tensor[(8, 5, 12), bool],) {
  @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_4734() -> (Tensor[(8, 5, 12), float32],) {
  %590 = fn () -> (Tensor[(8, 5, 12), float32],) {
    %589 = @func_4536() /* ty=Tensor[(8, 5, 12), float32] */;
    (%589,)
  };
  %590() /* ty=(Tensor[(8, 5, 12), float32],) */
}

def @func_4537() -> Tensor[(8, 5, 12), float32] {
  %596 = fn () -> Tensor[(8, 5, 12), float32] {
    %591 = @func_4502() /* ty=Tensor[(8, 5, 12), int16] */;
    %592 = cast(meta[relay.Constant][33] /* ty=Tensor[(8, 5, 12), int16] */, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
    %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(3), int32] */;
    %594 = cast(%591, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    power(%594, %595) /* ty=Tensor[(8, 5, 12), float32] */
  };
  %596() /* ty=Tensor[(8, 5, 12), float32] */
}

def @func_2072(%var_2070: Tensor[(7, 16, 3), float64]) -> (Tensor[(7, 16, 3), float64],) {
  @func_2069(%var_2070) /* ty=(Tensor[(7, 16, 3), float64],) */
}

def @func_4318(%var_4317: Tensor[(15, 10, 8), float32]) -> (Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) {
  %618 = fn (%var_4262: Tensor[(15, 10, 8), float32]) -> (Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) {
    %597 = cast(meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %598 = reshape(%597, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
    %599 = @func_779(%598) /* ty=(Tensor[(9, 15, 16), int16],) */;
    %600 = cast(%var_4262, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
    %601 = sigmoid(%600) /* ty=Tensor[(15, 10, 8), float32] */;
    %602 = cast(%var_4262, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
    %603 = asin(%602) /* ty=Tensor[(15, 10, 8), float32] */;
    %604 = cast(%603, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
    %605 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %606 = cast(%601, dtype="uint16") /* ty=Tensor[(15, 10, 8), uint16] */;
    %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %608 = cast(%603, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %609 = shape_of(%601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%601, dtype="bool") /* ty=Tensor[(15, 10, 8), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = equal(%610, %611) /* ty=Tensor[(15, 10, 8), bool] */;
    %613 = cast(%612, dtype="float32") /* ty=Tensor[(15, 10, 8), float32] */;
    %614 = %599.0;
    %615 = multiply(%606, %607) /* ty=Tensor[(15, 10, 8), uint16] */;
    %616 = @func_4096() /* ty=Tensor[(3, 15, 7), int8] */;
    %617 = asinh(%613) /* ty=Tensor[(15, 10, 8), float32] */;
    (%614, meta[relay.Constant][34] /* ty=Tensor[(2160), float32] */, %615, %616, %617)
  };
  %618(%var_4317) /* ty=(Tensor[(9, 15, 16), int16], Tensor[(2160), float32], Tensor[(15, 10, 8), uint16], Tensor[(3, 15, 7), int8], Tensor[(15, 10, 8), float32]) */
}

def @func_74(%var_72: Tensor[(14, 7, 9), float64]) -> Tensor[(14, 7, 9), float64] {
  @func_71(%var_72) /* ty=Tensor[(14, 7, 9), float64] */
}

def @func_1043(%var_1041: Tensor[(2, 2, 6), uint16], %var_1042: Tensor[(99), float32]) -> (Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) {
  @func_1039(%var_1041, %var_1042) /* ty=(Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) */
}

def @func_3847(%var_3845: Tensor[(10, 10, 5), int16], %var_3846: Tensor[(10, 10, 5), bool]) -> (Tensor[(10, 10, 5), int32], Tensor[(8, 5, 12), bool], Tensor[(10, 10, 5), float64]) {
  @func_3843(%var_3845, %var_3846) /* ty=(Tensor[(10, 10, 5), int32], Tensor[(8, 5, 12), bool], Tensor[(10, 10, 5), float64]) */
}

def @func_4835() -> Tensor[(8, 5, 12), bool] {
  @func_3652() /* ty=Tensor[(8, 5, 12), bool] */
}

def @func_4999(%var_4997: Tensor[(13, 12, 12), float32]) -> Tensor[(13, 12, 12), float32] {
  @func_4996(%var_4997) /* ty=Tensor[(13, 12, 12), float32] */
}

def @func_5182(%var_5180: Tensor[(33, 3), float32], %var_5181: Tensor[(180, 12), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(11, 9, ?), float64], Tensor[(180, 12), float64]) {
  %639 = fn (%var_5157: Tensor[(33, 3), float32], %var_5158: Tensor[(180, 12), float32]) -> (Tensor[(8, 5, 12), bool], Tensor[(11, 9, ?), float64], Tensor[(180, 12), float64]) {
    %619 = @func_4458() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %620 = %619.0;
    %621 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 5, 12), bool] */, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %622 = shape_of(%620, dtype="int32") /* ty=Tensor[(3), int32] */;
    %623 = cast(%620, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
    %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %625 = cast(%var_5157, dtype="float32") /* ty=Tensor[(33, 3), float32] */;
    %626 = cast(%var_5158, dtype="float32") /* ty=Tensor[(180, 12), float32] */;
    %627 = reshape(%625, newshape=[11, 9, 1]) /* ty=Tensor[(11, 9, 1), float32] */;
    %628 = reshape(%626, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
    %629 = @func_938(%627, %628) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */;
    %630 = %629.0;
    %631 = cast(%var_5157, dtype="float64") /* ty=Tensor[(33, 3), float64] */;
    %632 = shape_of(%630, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%630, dtype="float64") /* ty=Tensor[(11, 9, 1), float64] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %635 = cast(%var_5158, dtype="float64") /* ty=Tensor[(180, 12), float64] */;
    %636 = logical_or(%623, %624) /* ty=Tensor[(8, 5, 12), bool] */;
    %637 = floor_mod(%633, %634) /* ty=Tensor[(11, 9, ?), float64] */;
    %638 = erf(%635) /* ty=Tensor[(180, 12), float64] */;
    (%636, %637, %638)
  };
  %639(%var_5180, %var_5181) /* ty=(Tensor[(8, 5, 12), bool], Tensor[(11, 9, ?), float64], Tensor[(180, 12), float64]) */
}

def @func_4096() -> Tensor[(3, 15, 7), int8] {
  %640 = @func_4038() /* ty=(Tensor[(8, 5, 12), bool], Tensor[(3, 15, 7), int8], Tensor[(105, 3), int8], Tensor[(16, 2, 9), float32], Tensor[(288, 1), float32]) */;
  %640.1
}

def @func_5924() -> (Tensor[(8, 5, 12), bool],) {
  %643 = fn () -> (Tensor[(8, 5, 12), bool],) {
    %641 = @func_3819() /* ty=(Tensor[(8, 5, 12), bool],) */;
    %642 = %641.0;
    (%642,)
  };
  %643() /* ty=(Tensor[(8, 5, 12), bool],) */
}

def @func_941(%var_939: Tensor[(11, 9, 1), float32], %var_940: Tensor[(2160), float32]) -> (Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) {
  %650 = fn (%var_926: Tensor[(11, 9, 1), float32], %var_930: Tensor[(2160), float32]) -> (Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) {
    %644 = cast(%var_926, dtype="float32") /* ty=Tensor[(11, 9, 1), float32] */;
    %645 = cast(%var_930, dtype="float32") /* ty=Tensor[(2160), float32] */;
    %646 = reshape(%645, newshape=[9, 15, 16]) /* ty=Tensor[(9, 15, 16), float32] */;
    %647 = @func_779(%646) /* ty=(Tensor[(9, 15, 16), int16],) */;
    %648 = log(%644) /* ty=Tensor[(11, 9, 1), float32] */;
    %649 = %647.0;
    (%648, %649, %var_930)
  };
  %650(%var_939, %var_940) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */
}

def @func_3727(%var_3672: Tensor[(8, 5, 12), bool], %var_3708: Tensor[(54), int64], %var_3713: Tensor[(300), float32]) -> (Tensor[(882), float64], Tensor[(10, 52), uint64], Tensor[(8, 5, 12), uint8], Tensor[(8, 5, 12), uint8], Tensor[(9, 3, 2), bool], Tensor[(54), int64], Tensor[(5, 15, 4), float32], Tensor[(300), float32]) {
  %651 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 52), uint64] */, dtype="uint64") /* ty=Tensor[(10, 52), uint64] */;
  %652 = cast(meta[relay.Constant][36] /* ty=Tensor[(10, 52), uint64] */, dtype="uint64") /* ty=Tensor[(10, 52), uint64] */;
  %653 = reshape(%651, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %654 = reshape(%652, newshape=[8, 5, 13]) /* ty=Tensor[(8, 5, 13), uint64] */;
  %655 = @func_2392(%653, %654) /* ty=(Tensor[(8, 5, 13), uint8], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(8, 5, 13), float64]) */;
  %656 = @func_3652() /* ty=Tensor[(8, 5, 12), bool] */;
  %657 = cast(%656, dtype="float32") /* ty=Tensor[(8, 5, 12), float32] */;
  %658 = log2(%657) /* ty=Tensor[(8, 5, 12), float32] */;
  %659 = cast(%var_3672, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %660 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%656, dtype="bool") /* ty=Tensor[(8, 5, 12), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %663 = greater_equal(%661, %662) /* ty=Tensor[(8, 5, 12), bool] */;
  %664 = cast(%663, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %665 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%658, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %668 = cast(%663, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %669 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %670 = cast(%656, dtype="uint8") /* ty=Tensor[(8, 5, 12), uint8] */;
  %671 = dyn.reshape(%668, %669, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %672 = cast(%var_3708, dtype="int64") /* ty=Tensor[(54), int64] */;
  %673 = cast(%var_3708, dtype="int64") /* ty=Tensor[(54), int64] */;
  %674 = %655.3;
  %675 = cast(%674, dtype="float64") /* ty=Tensor[(882), float64] */;
  %676 = reshape(%672, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %677 = reshape(%673, newshape=[9, 3, 2]) /* ty=Tensor[(9, 3, 2), int64] */;
  %678 = reshape(%675, newshape=[882]) /* ty=Tensor[(882), float64] */;
  %679 = @func_112(%676, %677, %678) /* ty=(Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) */;
  %680 = cast(%var_3713, dtype="float32") /* ty=Tensor[(300), float32] */;
  %681 = reshape(%680, newshape=[5, 15, 4]) /* ty=Tensor[(5, 15, 4), float32] */;
  %682 = @func_1775(%681) /* ty=(Tensor[(5, 15, 4), float32],) */;
  %683 = cast(%var_3713, dtype="float32") /* ty=Tensor[(300), float32] */;
  %684 = logical_xor(%666, %667) /* ty=Tensor[(8, 5, 12), uint8] */;
  %685 = minimum(%670, %671) /* ty=Tensor[(8, 5, 12), uint8] */;
  %686 = %679.0;
  %687 = %682.0;
  %688 = rsqrt(%683) /* ty=Tensor[(300), float32] */;
  (%674, meta[relay.Constant][36] /* ty=Tensor[(10, 52), uint64] */, %684, %685, %686, %var_3708, %687, %688)
}

def @func_309(%var_305: int16, %var_306: Tensor[(1, 5, 2), int16], %var_307: Tensor[(882), float64], %var_308: Tensor[(882), float64]) -> (Tensor[(?, 5, 2), float64], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(14, 7, 9), float64], Tensor[(14, 7, 9), float64], Tensor[(882), uint16], Tensor[(9, 3, 2), bool], Tensor[(14, 7, 9), float64], Tensor[(1, 5, 2), float32], Tensor[(9, 3, 2), bool]) {
  @func_303(%var_305, %var_306, %var_307, %var_308) /* ty=(Tensor[(?, 5, 2), float64], Tensor[(9, 3, 2), float32], Tensor[(54), int64], Tensor[(882), float64], Tensor[(14, 7, 9), float64], Tensor[(14, 7, 9), float64], Tensor[(882), uint16], Tensor[(9, 3, 2), bool], Tensor[(14, 7, 9), float64], Tensor[(1, 5, 2), float32], Tensor[(9, 3, 2), bool]) */
}

def @func_1039(%var_1005: Tensor[(2, 2, 6), uint16], %var_1029: Tensor[(99), float32]) -> (Tensor[(2, 2, 6), uint16], Tensor[(99), float32], Tensor[(11, 9, 2160), uint16]) {
  %689 = cast(meta[relay.Constant][37] /* ty=Tensor[(2, 2, 6), uint16] */, dtype="uint16") /* ty=Tensor[(2, 2, 6), uint16] */;
  %690 = shape_of(%var_1005, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_1005, dtype="uint16") /* ty=Tensor[(2, 2, 6), uint16] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %693 = cast(%var_1029, dtype="float32") /* ty=Tensor[(99), float32] */;
  %694 = cast(meta[relay.Constant][38] /* ty=Tensor[(2160), float32] */, dtype="float32") /* ty=Tensor[(2160), float32] */;
  %695 = reshape(%693, newshape=[11, 9, 1]) /* ty=Tensor[(11, 9, 1), float32] */;
  %696 = reshape(%694, newshape=[2160]) /* ty=Tensor[(2160), float32] */;
  %697 = @func_938(%695, %696) /* ty=(Tensor[(11, 9, 1), float32], Tensor[(9, 15, 16), int16], Tensor[(2160), float32]) */;
  %698 = %697.0;
  %699 = cast(meta[relay.Constant][38] /* ty=Tensor[(2160), float32] */, dtype="uint16") /* ty=Tensor[(2160), uint16] */;
  %700 = cast(%698, dtype="uint16") /* ty=Tensor[(11, 9, 1), uint16] */;
  %701 = subtract(%691, %692) /* ty=Tensor[(2, 2, 6), uint16] */;
  %702 = left_shift(%699, %700) /* ty=Tensor[(11, 9, 2160), uint16] */;
  (%701, %var_1029, %702)
}

def @func_112(%var_89: Tensor[(9, 3, 2), int64], %var_90: Tensor[(9, 3, 2), int64], %var_105: Tensor[(882), float64]) -> (Tensor[(9, 3, 2), bool], Tensor[(9, 3, 2), float32], Tensor[(14, 7, 9), float64], Tensor[(882), float64]) {
  %703 = cast(%var_90, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %704 = shape_of(%var_89, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_89, dtype="bool") /* ty=Tensor[(9, 3, 2), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = cast(%var_89, dtype="float32") /* ty=Tensor[(9, 3, 2), float32] */;
  %708 = cast(%var_105, dtype="float64") /* ty=Tensor[(882), float64] */;
  %709 = reshape(%708, newshape=[14, 7, 9]) /* ty=Tensor[(14, 7, 9), float64] */;
  %710 = less(%705, %706) /* ty=Tensor[(9, 3, 2), bool] */;
  %711 = cos(%707) /* ty=Tensor[(9, 3, 2), float32] */;
  %712 = @func_71(%709) /* ty=Tensor[(14, 7, 9), float64] */;
  (%710, %711, %712, %var_105)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen9/build/output.py", line 1506, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:43:41] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

