==========mod==========
#[version = "0.0.5"]
def @func_1910() -> Tensor[(8, 3, 10), float64] {
  @func_1596() /* ty=Tensor[(8, 3, 10), float64] */
}

def @func_3468(%var_3402: Tensor[(2, 10, 7), float32]) -> (Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) {
  %0 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
  %1 = cast(%var_3402, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %2 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %3 = cast(%var_3402, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %4 = acosh(%3) /* ty=Tensor[(2, 10, 7), float32] */;
  %5 = cast(%4, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %6 = sin(%5) /* ty=Tensor[(2, 10, 7), float32] */;
  %7 = cast(%4, dtype="float64") /* ty=Tensor[(2, 10, 7), float64] */;
  %8 = shape_of(%6, dtype="int32") /* ty=Tensor[(3), int32] */;
  %9 = cast(%6, dtype="float64") /* ty=Tensor[(2, 10, 7), float64] */;
  %10 = dyn.reshape(%7, %8, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %11 = floor_mod(%9, %10) /* ty=Tensor[(2, 10, 7), float64] */;
  %12 = cast(%4, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %13 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%11, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(110), int32] */, dtype="int32") /* ty=Tensor[(110), int32] */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %18 = reshape(%16, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %19 = reshape(%17, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %20 = @func_1523(%18, %19) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %21 = %0.1;
  %22 = acos(%1) /* ty=Tensor[(2, 10, 7), float32] */;
  %23 = %2.0;
  %24 = less(%14, %15) /* ty=Tensor[(2, 10, 7), bool] */;
  %25 = %20.2;
  (%21, %22, %23, %24, %25, meta[relay.Constant][0] /* ty=Tensor[(110), int32] */, meta[relay.Constant][1] /* ty=Tensor[(990), int32] */)
}

def @func_1575() -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) {
  %26 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %27 = cast(meta[relay.Constant][2] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(2145), uint8] */, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %29 = reshape(%27, newshape=[]) /* ty=uint8 */;
  %30 = reshape(%28, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %31 = @func_828(%29, %30) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %32 = %26.0;
  %33 = %31.1;
  (%32, %33, meta[relay.Constant][2] /* ty=uint8 */, meta[relay.Constant][3] /* ty=Tensor[(2145), uint8] */)
}

def @func_2593() -> (uint8,) {
  %34 = @func_2166() /* ty=uint8 */;
  (%34,)
}

def @func_3905() -> uint8 {
  %35 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %35.1
}

def @func_7924() -> uint8 {
  %36 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %36.1
}

def @func_5404() -> (Tensor[(2145), uint8],) {
  %37 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
  %38 = %37.1;
  (%38,)
}

def @func_2063(%var_2044: uint8) -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint32], Tensor[(12, 2, 1), bool]) {
  %39 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %40 = cast(%var_2044, dtype="uint8") /* ty=uint8 */;
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(2145), uint8] */, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %42 = reshape(%40, newshape=[]) /* ty=uint8 */;
  %43 = reshape(%41, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %44 = @func_828(%42, %43) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %45 = cast(meta[relay.Constant][4] /* ty=Tensor[(2145), uint8] */, dtype="uint32") /* ty=Tensor[(2145), uint32] */;
  %46 = cast(%var_2044, dtype="uint32") /* ty=uint32 */;
  %47 = cast(%var_2044, dtype="uint16") /* ty=uint16 */;
  %48 = reshape(%47, newshape=[]) /* ty=uint16 */;
  %49 = %39.0;
  %50 = %44.1;
  %51 = multiply(%45, %46) /* ty=Tensor[(2145), uint32] */;
  %52 = @func_274(%48) /* ty=Tensor[(12, 2, 1), bool] */;
  (%49, %50, %51, %52)
}

def @func_2801() -> (Tensor[(8, 3, 10), float64], uint8) {
  %53 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %54 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %55 = %53.0;
  %56 = %54.2;
  (%55, %56)
}

def @func_5228() -> (Tensor[(8, 3, 10), float32], Tensor[(12, 2, 1), bool], uint16) {
  %57 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %58 = cast(meta[relay.Constant][5] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %59 = reshape(%58, newshape=[]) /* ty=uint16 */;
  %60 = %57.0;
  %61 = @func_274(%59) /* ty=Tensor[(12, 2, 1), bool] */;
  (%60, %61, meta[relay.Constant][5] /* ty=uint16 */)
}

def @func_6205(%var_6181: Tensor[(90), uint32], %var_6184: Tensor[(165, 2), float32]) -> (Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(165, 2), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(165, 2), float64]) {
  %62 = cast(%var_6181, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %63 = reshape(%62, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint32] */;
  %64 = @func_2301(%63) /* ty=(Tensor[(9, 5, 2), uint32],) */;
  %65 = @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */;
  %66 = %65.5;
  %67 = cast(%66, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
  %68 = rsqrt(%67) /* ty=Tensor[(165, 2), float32] */;
  %69 = cast(%var_6184, dtype="bool") /* ty=Tensor[(165, 2), bool] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(2), int32] */;
  %71 = cast(%68, dtype="bool") /* ty=Tensor[(165, 2), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %73 = cast(meta[relay.Constant][6] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %74 = reshape(%73, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %75 = @func_1239(%74) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %76 = cast(%68, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
  %77 = %64.0;
  %78 = greater(%71, %72) /* ty=Tensor[(165, 2), bool] */;
  %79 = %75.0;
  %80 = acos(%76) /* ty=Tensor[(165, 2), float64] */;
  (%77, %var_6181, %78, %79, meta[relay.Constant][6] /* ty=Tensor[(108), float64] */, %80)
}

def @func_7520(%var_7491: Tensor[(8, 2, 13), float32], %var_7494: Tensor[(8, 2, 13), float32]) -> (Tensor[(8, 2, 13), bool], Tensor[(8, 2, 13), float64], Tensor[(8, 2, 13), uint8], Tensor[(8, 2, 13), float32]) {
  %81 = cast(%var_7491, dtype="float32") /* ty=Tensor[(8, 2, 13), float32] */;
  %82 = acos(%81) /* ty=Tensor[(8, 2, 13), float32] */;
  %83 = cast(%var_7494, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = cast(%var_7491, dtype="float64") /* ty=Tensor[(8, 2, 13), float64] */;
  %88 = cast(%82, dtype="uint8") /* ty=Tensor[(8, 2, 13), uint8] */;
  %89 = shape_of(%var_7491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %90 = cast(%var_7491, dtype="uint8") /* ty=Tensor[(8, 2, 13), uint8] */;
  %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %92 = cast(%82, dtype="float32") /* ty=Tensor[(8, 2, 13), float32] */;
  %93 = not_equal(%85, %86) /* ty=Tensor[(8, 2, 13), bool] */;
  %94 = exp(%87) /* ty=Tensor[(8, 2, 13), float64] */;
  %95 = logical_xor(%90, %91) /* ty=Tensor[(8, 2, 13), uint8] */;
  %96 = atanh(%92) /* ty=Tensor[(8, 2, 13), float32] */;
  (%93, %94, %95, %96)
}

def @func_7137(%var_7133: Tensor[(11, 3, 15), int16]) -> (Tensor[(11, 3, 15), int16],) {
  %97 = cast(meta[relay.Constant][7] /* ty=Tensor[(1, 1, 1), int16] */, dtype="int16") /* ty=Tensor[(1, 1, 1), int16] */;
  %98 = cast(%var_7133, dtype="int16") /* ty=Tensor[(11, 3, 15), int16] */;
  %99 = subtract(%97, %98) /* ty=Tensor[(11, 3, 15), int16] */;
  (%99,)
}

def @func_6758() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], uint8) {
  %100 = @func_6292() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %101 = @func_5664() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) */;
  %102 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
  %103 = %100.0;
  %104 = %101.0;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_7791(%var_7768: Tensor[(7, 14, 6), float32]) -> (Tensor[(7, 14, 6), float32],) {
  %106 = cast(%var_7768, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %107 = erf(%106) /* ty=Tensor[(7, 14, 6), float32] */;
  %108 = cast(%107, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %109 = shape_of(%var_7768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%var_7768, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %112 = floor_mod(%110, %111) /* ty=Tensor[(7, 14, 6), float32] */;
  (%112,)
}

def @func_5741() -> (Tensor[(8, 9, 1), bool],) {
  %113 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %114 = %113.1;
  %115 = cast(%114, dtype="bool") /* ty=bool */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(8, 9, 1), uint8] */, dtype="bool") /* ty=Tensor[(8, 9, 1), bool] */;
  %117 = not_equal(%115, %116) /* ty=Tensor[(8, 9, 1), bool] */;
  (%117,)
}

def @func_6268(%var_6266: Tensor[(1, 140), float32]) -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(1, 140), float32]) {
  %118 = cast(%var_6266, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %119 = reshape(%118, newshape=[2, 10, 7]) /* ty=Tensor[(2, 10, 7), float32] */;
  %120 = @func_3468(%119) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */;
  %121 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  %122 = %120.2;
  (%121, %122, %var_6266)
}

def @func_4786() -> (Tensor[(8, 3, 10), float32],) {
  %123 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %124 = %123.0;
  (%124,)
}

def @func_7221(%var_7208: Tensor[(12, 3, 12), float64]) -> Tensor[(12, 3, 12), float64] {
  %125 = cast(%var_7208, dtype="float64") /* ty=Tensor[(12, 3, 12), float64] */;
  log2(%125) /* ty=Tensor[(12, 3, 12), float64] */
}

def @func_1474() -> (Tensor[(8, 3, 10), float64],) {
  %126 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %127 = cos(%126) /* ty=Tensor[(8, 3, 10), float64] */;
  (%127,)
}

def @func_8188() -> (uint8,) {
  %128 = @func_3905() /* ty=uint8 */;
  (%128,)
}

def @func_7578() -> (uint8,) {
  %129 = @func_3905() /* ty=uint8 */;
  (%129,)
}

def @func_4155(%var_4096: Tensor[(840, 1), bool]) -> (Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) {
  %130 = @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */;
  %131 = %130.3;
  %132 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %133 = cast(%131, dtype="bool") /* ty=bool */;
  %134 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %135 = @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %136 = cast(%131, dtype="bool") /* ty=bool */;
  %137 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %138 = reshape(%136, newshape=[]) /* ty=bool */;
  %139 = reshape(%137, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), bool] */;
  %140 = @func_1642(%138, %139) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %141 = %140.0;
  %142 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %143 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
  %144 = cast(%141, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
  %145 = dyn.reshape(%142, %143, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %146 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %147 = %146.0;
  %148 = cast(%147, dtype="bool") /* ty=bool */;
  %149 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
  %150 = logical_and(%132, %133) /* ty=Tensor[(840, 1), bool] */;
  %151 = %134.0;
  %152 = %135.0;
  %153 = less(%144, %145) /* ty=Tensor[(7, 10, 12), bool] */;
  %154 = logical_or(%148, %149) /* ty=Tensor[(840, 1), bool] */;
  (%150, %151, %152, %153, %154)
}

def @func_5112(%var_5098: Tensor[(7, 2, 9), float32]) -> (Tensor[(7, 2, 9), float32],) {
  %155 = cast(%var_5098, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %156 = rsqrt(%155) /* ty=Tensor[(7, 2, 9), float32] */;
  %157 = cast(%156, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
  %158 = sin(%157) /* ty=Tensor[(7, 2, 9), float32] */;
  (%158,)
}

def @func_8610() -> (uint8,) {
  %159 = @func_3334() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %160 = %159.1;
  (%160,)
}

def @func_7403() -> Tensor[(2145), uint8] {
  %161 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
  %161.1
}

def @func_5852() -> (Tensor[(8, 3, 10), float32],) {
  %162 = @func_5250() /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %163 = %162.2;
  (%163,)
}

def @func_7832() -> (Tensor[(12, 2, 1), bool],) {
  %164 = @func_4814() /* ty=(uint8, Tensor[(12, 2, 1), bool]) */;
  %165 = %164.1;
  (%165,)
}

def @func_4297(%var_4291: Tensor[(4, 1, 4), float32], %var_4292: Tensor[(4, 15, 4), float32]) -> Tensor[(4, 15, 4), float32] {
  %166 = cast(%var_4291, dtype="float32") /* ty=Tensor[(4, 1, 4), float32] */;
  %167 = cast(%var_4292, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
  divide(%166, %167) /* ty=Tensor[(4, 15, 4), float32] */
}

def @func_2276() -> (Tensor[(8, 3, 10), float32],) {
  %168 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  (%168,)
}

def @func_5378() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %169 = @func_4255() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */;
  %170 = %169.0;
  %171 = @func_2723() /* ty=Tensor[(8, 3, 10), float32] */;
  (%170, %171)
}

def @func_4814() -> (uint8, Tensor[(12, 2, 1), bool]) {
  %172 = @func_3905() /* ty=uint8 */;
  %173 = cast(%172, dtype="uint16") /* ty=uint16 */;
  %174 = reshape(%173, newshape=[]) /* ty=uint16 */;
  %175 = @func_274(%174) /* ty=Tensor[(12, 2, 1), bool] */;
  (%172, %175)
}

def @func_6650() -> Tensor[(8, 3, 10), float32] {
  %176 = @func_6017() /* ty=(Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) */;
  %176.1
}

def @func_5092() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %177 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %178 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %179 = %177.0;
  %180 = %178.2;
  (%179, %180)
}

def @func_8666() -> (uint8, Tensor[(8, 3, 10), float64]) {
  %181 = @func_7174() /* ty=(uint8,) */;
  %182 = %181.0;
  %183 = @func_8475() /* ty=Tensor[(8, 3, 10), float64] */;
  (%182, %183)
}

def @func_6232() -> (Tensor[(8, 3, 10), float32], uint8) {
  %184 = @func_5852() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %185 = %184.0;
  %186 = @func_5694() /* ty=uint8 */;
  (%185, %186)
}

def @func_2706() -> (Tensor[(8, 3, 10), float64],) {
  %187 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %188 = %187.0;
  (%188,)
}

def @func_6822() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) {
  %189 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %190 = cast(meta[relay.Constant][10] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %191 = reshape(%190, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint32] */;
  %192 = @func_2301(%191) /* ty=(Tensor[(9, 5, 2), uint32],) */;
  %193 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
  %194 = @func_6650() /* ty=Tensor[(8, 3, 10), float32] */;
  %195 = %189.1;
  %196 = %192.0;
  %197 = %193.1;
  (%194, %195, %196, meta[relay.Constant][10] /* ty=Tensor[(90), uint32] */, %197)
}

def @func_8163(%var_8144: Tensor[(320), float32], %var_8154: Tensor[(90), uint32]) -> (Tensor[(8, 3, 10), float32], Tensor[(8, 4, 10), float32], Tensor[(40), float32], Tensor[(320), float32], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64]) {
  %198 = @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %199 = cast(meta[relay.Constant][11] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %200 = cast(%var_8144, dtype="float32") /* ty=Tensor[(320), float32] */;
  %201 = reshape(%199, newshape=[1, 4, 10]) /* ty=Tensor[(1, 4, 10), float32] */;
  %202 = reshape(%200, newshape=[8, 4, 10]) /* ty=Tensor[(8, 4, 10), float32] */;
  %203 = @func_3142(%201, %202) /* ty=(Tensor[(8, 4, 10), float32],) */;
  %204 = cast(%var_8154, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %205 = reshape(%204, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint32] */;
  %206 = @func_2301(%205) /* ty=(Tensor[(9, 5, 2), uint32],) */;
  %207 = @func_6822() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) */;
  %208 = %198.0;
  %209 = %203.0;
  %210 = %206.0;
  %211 = @func_2723() /* ty=Tensor[(8, 3, 10), float32] */;
  %212 = %207.1;
  (%208, %209, meta[relay.Constant][11] /* ty=Tensor[(40), float32] */, %var_8144, %210, %var_8154, %211, %212)
}

def @func_8449(%var_8427: Tensor[(240), float32]) -> (Tensor[(8, 9, 1), bool], Tensor[(8, 3, 10), int32], Tensor[(240), float32], Tensor[(2145), uint8], uint8) {
  %213 = @func_5741() /* ty=(Tensor[(8, 9, 1), bool],) */;
  %214 = cast(%var_8427, dtype="float32") /* ty=Tensor[(240), float32] */;
  %215 = reshape(%214, newshape=[8, 3, 10]) /* ty=Tensor[(8, 3, 10), float32] */;
  %216 = @func_3177() /* ty=(uint8,) */;
  %217 = %213.0;
  %218 = @func_3793(%215) /* ty=Tensor[(8, 3, 10), int32] */;
  %219 = @func_4841() /* ty=Tensor[(2145), uint8] */;
  %220 = %216.0;
  (%217, %218, %var_8427, %219, %220)
}

def @func_7174() -> (uint8,) {
  %221 = @func_5694() /* ty=uint8 */;
  (%221,)
}

def @func_5250() -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %222 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
  %223 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %224 = @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %225 = %222.0;
  %226 = %223.0;
  %227 = %224.1;
  (%225, %226, %227)
}

def @func_857(%var_845: Tensor[(11, 10, 3), int16], %var_846: Tensor[(11, 10, 3), int16]) -> (Tensor[(11, 10, 3), int16],) {
  %228 = cast(%var_846, dtype="int16") /* ty=Tensor[(11, 10, 3), int16] */;
  %229 = shape_of(%var_845, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%var_845, dtype="int16") /* ty=Tensor[(11, 10, 3), int16] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %232 = add(%230, %231) /* ty=Tensor[(11, 10, 3), int16] */;
  (%232,)
}

def @main(%var_8691: Tensor[(15, 1, 12), float64]) -> (Tensor[(15, 1, 12), float64],) {
  %233 = cast(%var_8691, dtype="float64") /* ty=Tensor[(15, 1, 12), float64] */;
  %234 = sqrt(%233) /* ty=Tensor[(15, 1, 12), float64] */;
  (%234,)
}

def @func_5590() -> (Tensor[(990), float32], Tensor[(9, 10, 11), bool], Tensor[(110), int32]) {
  %235 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %236 = cast(meta[relay.Constant][12] /* ty=Tensor[(110), int32] */, dtype="int32") /* ty=Tensor[(110), int32] */;
  %237 = %235.0;
  %238 = cast(%237, dtype="int32") /* ty=Tensor[(990), int32] */;
  %239 = reshape(%236, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %240 = reshape(%238, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %241 = @func_1523(%239, %240) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %242 = %241.0;
  (%237, %242, meta[relay.Constant][12] /* ty=Tensor[(110), int32] */)
}

def @func_1523(%var_1498: Tensor[(1, 10, 11), int32], %var_1499: Tensor[(9, 10, 11), int32]) -> (Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) {
  %243 = cast(%var_1498, dtype="bool") /* ty=Tensor[(1, 10, 11), bool] */;
  %244 = cast(%var_1499, dtype="bool") /* ty=Tensor[(9, 10, 11), bool] */;
  %245 = cast(%var_1498, dtype="float32") /* ty=Tensor[(1, 10, 11), float32] */;
  %246 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %247 = equal(%243, %244) /* ty=Tensor[(9, 10, 11), bool] */;
  %248 = asin(%245) /* ty=Tensor[(1, 10, 11), float32] */;
  %249 = %246.0;
  (%247, %248, %249)
}

def @func_8677() -> (uint8,) {
  %250 = @func_8188() /* ty=(uint8,) */;
  %251 = %250.0;
  (%251,)
}

def @func_4566() -> (Tensor[(8, 3, 10), float64],) {
  %252 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  (%252,)
}

def @func_2301(%var_2285: Tensor[(9, 5, 2), uint32]) -> (Tensor[(9, 5, 2), uint32],) {
  %253 = cast(meta[relay.Constant][13] /* ty=Tensor[(9, 5, 2), uint32] */, dtype="uint32") /* ty=Tensor[(9, 5, 2), uint32] */;
  %254 = shape_of(%var_2285, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%var_2285, dtype="uint32") /* ty=Tensor[(9, 5, 2), uint32] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %257 = left_shift(%255, %256) /* ty=Tensor[(9, 5, 2), uint32] */;
  (%257,)
}

def @func_4717(%var_4699: Tensor[(10, 11, 16), bool], %var_4710: Tensor[(320), float32]) -> (Tensor[(10, 11, 16), bool], Tensor[(8, 4, 10), float32], Tensor[(10, 4), float32], Tensor[(320), float32]) {
  %258 = cast(meta[relay.Constant][14] /* ty=Tensor[(10, 11, 16), bool] */, dtype="bool") /* ty=Tensor[(10, 11, 16), bool] */;
  %259 = shape_of(%var_4699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_4699, dtype="bool") /* ty=Tensor[(10, 11, 16), bool] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %262 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 4), float32] */;
  %263 = cast(%var_4710, dtype="float32") /* ty=Tensor[(320), float32] */;
  %264 = reshape(%262, newshape=[1, 4, 10]) /* ty=Tensor[(1, 4, 10), float32] */;
  %265 = reshape(%263, newshape=[8, 4, 10]) /* ty=Tensor[(8, 4, 10), float32] */;
  %266 = @func_3142(%264, %265) /* ty=(Tensor[(8, 4, 10), float32],) */;
  %267 = logical_and(%260, %261) /* ty=Tensor[(10, 11, 16), bool] */;
  %268 = %266.0;
  (%267, %268, meta[relay.Constant][15] /* ty=Tensor[(10, 4), float32] */, %var_4710)
}

def @func_7881(%var_7869: Tensor[(990), int32]) -> (Tensor[(990), bool], Tensor[(108), float64], Tensor[(108), float64]) {
  %269 = @func_5815() /* ty=(Tensor[(990), int32],) */;
  %270 = %269.0;
  %271 = cast(%var_7869, dtype="bool") /* ty=Tensor[(990), bool] */;
  %272 = shape_of(%270, dtype="int32") /* ty=Tensor[(1), int32] */;
  %273 = cast(%270, dtype="bool") /* ty=Tensor[(990), bool] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), bool] */;
  %275 = cast(meta[relay.Constant][16] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %276 = reshape(%275, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %277 = @func_3538(%276) /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) */;
  %278 = not_equal(%273, %274) /* ty=Tensor[(990), bool] */;
  %279 = %277.3;
  (%278, %279, meta[relay.Constant][16] /* ty=Tensor[(108), float64] */)
}

def @func_6297() -> (Tensor[(8, 3, 10), float32],) {
  %280 = @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %281 = %280.0;
  (%281,)
}

def @func_2663() -> (uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  %282 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %283 = %282.0;
  %284 = cast(%283, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %285 = cosh(%284) /* ty=Tensor[(8, 3, 10), float64] */;
  %286 = cast(%285, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %287 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %288 = @func_1861() /* ty=uint8 */;
  %289 = atanh(%286) /* ty=Tensor[(8, 3, 10), float64] */;
  %290 = %287.0;
  (%288, %289, %290)
}

def @func_3642() -> (Tensor[(8, 3, 10), float64],) {
  %291 = @func_2723() /* ty=Tensor[(8, 3, 10), float32] */;
  %292 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 3, 10), float32] */, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %294 = cast(%291, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %296 = power(%294, %295) /* ty=Tensor[(8, 3, 10), float64] */;
  (%296,)
}

def @func_5535() -> Tensor[(8, 3, 10), float64] {
  %297 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
  %297.2
}

def @func_7314() -> (Tensor[(8, 3, 10), float32],) {
  %298 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %299 = %298.0;
  (%299,)
}

def @func_7281() -> Tensor[(8, 3, 10), float32] {
  %300 = @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */;
  %300.0
}

def @func_2166() -> uint8 {
  @func_1861() /* ty=uint8 */
}

def @func_4841() -> Tensor[(2145), uint8] {
  %301 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %301.3
}

def @func_2150(%var_2102: Tensor[(2145), uint8]) -> (Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) {
  %302 = @func_1861() /* ty=uint8 */;
  %303 = cast(%302, dtype="uint8") /* ty=uint8 */;
  %304 = cast(%var_2102, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %305 = reshape(%303, newshape=[]) /* ty=uint8 */;
  %306 = reshape(%304, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %307 = @func_828(%305, %306) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %308 = cast(meta[relay.Constant][18] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
  %309 = reshape(%308, newshape=[12, 13, 2]) /* ty=Tensor[(12, 13, 2), float32] */;
  %310 = @func_1948(%309) /* ty=(Tensor[(12, 13, 2), float32], Tensor[(8, 3, 10), float64]) */;
  %311 = cast(%302, dtype="uint8") /* ty=uint8 */;
  %312 = reshape(%311, newshape=[]) /* ty=uint8 */;
  %313 = @func_2063(%312) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint32], Tensor[(12, 2, 1), bool]) */;
  %314 = %313.3;
  %315 = cast(%314, dtype="uint8") /* ty=Tensor[(12, 2, 1), uint8] */;
  %316 = cast(%302, dtype="uint8") /* ty=uint8 */;
  %317 = %307.1;
  %318 = %310.0;
  %319 = minimum(%315, %316) /* ty=Tensor[(12, 2, 1), uint8] */;
  %320 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  (%317, %var_2102, %318, meta[relay.Constant][18] /* ty=Tensor[(312), float32] */, %319, %320)
}

def @func_3690() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) {
  %321 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %322 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %323 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %324 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %325 = %321.0;
  %326 = %322.0;
  %327 = %323.0;
  %328 = %324.0;
  (%325, %326, %327, %328)
}

def @func_4591() -> Tensor[(2145), uint8] {
  %329 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %329.3
}

def @func_1642(%var_1614: bool, %var_1615: Tensor[(7, 10, 12), bool]) -> (Tensor[(7, 10, 12), bool],) {
  %330 = cast(%var_1614, dtype="bool") /* ty=bool */;
  %331 = cast(%var_1615, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
  %332 = logical_and(%330, %331) /* ty=Tensor[(7, 10, 12), bool] */;
  (%332,)
}

def @func_8335(%var_8328: Tensor[(8, 3, 10), float64]) -> (Tensor[(8, 3, 10), uint16],) {
  %333 = @func_6758() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], uint8) */;
  %334 = %333.1;
  %335 = cast(%var_8328, dtype="uint16") /* ty=Tensor[(8, 3, 10), uint16] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="uint16") /* ty=Tensor[(8, 3, 10), uint16] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %339 = left_shift(%337, %338) /* ty=Tensor[(8, 3, 10), uint16] */;
  (%339,)
}

def @func_3793(%var_3784: Tensor[(8, 3, 10), float32]) -> Tensor[(8, 3, 10), int32] {
  %340 = @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %341 = %340.0;
  %342 = cast(%var_3784, dtype="int32") /* ty=Tensor[(8, 3, 10), int32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="int32") /* ty=Tensor[(8, 3, 10), int32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%344, %345) /* ty=Tensor[(8, 3, 10), int32] */
}

def @func_4214() -> (Tensor[(8, 3, 10), float32], uint8) {
  %346 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  %348 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %349 = acosh(%347) /* ty=Tensor[(8, 3, 10), float32] */;
  %350 = %348.1;
  (%349, %350)
}

def @func_7058(%var_7054: Tensor[(2145), uint8]) -> (Tensor[(8, 3, 10), float32], Tensor[(312), float32], Tensor[(2145), uint8]) {
  %351 = cast(%var_7054, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %352 = reshape(%351, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %353 = @func_2150(%352) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */;
  %354 = @func_6650() /* ty=Tensor[(8, 3, 10), float32] */;
  %355 = %353.3;
  (%354, %355, %var_7054)
}

def @func_7641(%var_7633: Tensor[(140), float32]) -> (Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], Tensor[(110), int32], Tensor[(140), float32], Tensor[(8, 3, 10), float32]) {
  %356 = @func_5404() /* ty=(Tensor[(2145), uint8],) */;
  %357 = cast(%var_7633, dtype="float32") /* ty=Tensor[(140), float32] */;
  %358 = reshape(%357, newshape=[2, 10, 7]) /* ty=Tensor[(2, 10, 7), float32] */;
  %359 = @func_3468(%358) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */;
  %360 = @func_6876() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %361 = @func_7281() /* ty=Tensor[(8, 3, 10), float32] */;
  %362 = %356.0;
  %363 = %359.5;
  %364 = %360.0;
  (%361, %362, %363, %var_7633, %364)
}

def @func_8475() -> Tensor[(8, 3, 10), float64] {
  %365 = @func_5664() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) */;
  %365.0
}

def @func_8110() -> (Tensor[(8, 3, 10), float32],) {
  %366 = @func_6966() /* ty=Tensor[(8, 3, 10), float32] */;
  (%366,)
}

def @func_8548() -> (Tensor[(8, 3, 10), float64],) {
  %367 = @func_3642() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %368 = %367.0;
  (%368,)
}

def @func_2723() -> Tensor[(8, 3, 10), float32] {
  @func_2256() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_1861() -> uint8 {
  %369 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %369.2
}

def @func_3984() -> (Tensor[(8, 3, 10), float32],) {
  %370 = @func_2991() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float64]) */;
  %371 = %370.1;
  %372 = cast(%371, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  %373 = log2(%372) /* ty=Tensor[(8, 3, 10), float32] */;
  (%373,)
}

def @func_1808(%var_1798: Tensor[(8, 3, 10), float64]) -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  %374 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %375 = %374.0;
  %376 = cast(%var_1798, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %380 = cast(%375, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  %381 = floor_mod(%378, %379) /* ty=Tensor[(8, 3, 10), float64] */;
  %382 = log(%380) /* ty=Tensor[(8, 3, 10), float32] */;
  (%381, %382)
}

def @func_7096() -> (Tensor[(2145), uint8],) {
  %383 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %384 = %383.3;
  %385 = cast(%384, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %386 = erf(%385) /* ty=Tensor[(2145), float64] */;
  %387 = cast(%384, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(1), int32] */;
  %389 = cast(%386, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %391 = right_shift(%389, %390) /* ty=Tensor[(2145), uint8] */;
  (%391,)
}

def @func_6991(%var_6978: uint32, %var_6979: Tensor[(1, 2145), uint8]) -> (Tensor[(2145), uint8], Tensor[(1, 2145), int8], Tensor[(9, 5, 2), float32]) {
  %392 = cast(%var_6978, dtype="uint32") /* ty=uint32 */;
  %393 = cast(%var_6979, dtype="uint8") /* ty=Tensor[(1, 2145), uint8] */;
  %394 = reshape(%392, newshape=[]) /* ty=uint32 */;
  %395 = reshape(%393, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %396 = @func_6450(%394, %395) /* ty=(Tensor[(990), float32], Tensor[(11, 10, 3), int16], uint32, Tensor[(2145), uint8], Tensor[(2145), uint8]) */;
  %397 = cast(%var_6978, dtype="int8") /* ty=int8 */;
  %398 = cast(%var_6979, dtype="int8") /* ty=Tensor[(1, 2145), int8] */;
  %399 = @func_6822() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) */;
  %400 = %399.2;
  %401 = cast(%400, dtype="float32") /* ty=Tensor[(9, 5, 2), float32] */;
  %402 = %396.3;
  %403 = add(%397, %398) /* ty=Tensor[(1, 2145), int8] */;
  %404 = sigmoid(%401) /* ty=Tensor[(9, 5, 2), float32] */;
  (%402, %403, %404)
}

def @func_3052() -> (Tensor[(8, 3, 10), float32],) {
  %405 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %406 = %405.0;
  %407 = cast(%406, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  %408 = asinh(%407) /* ty=Tensor[(8, 3, 10), float32] */;
  (%408,)
}

def @func_6430() -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(108), float64]) {
  %409 = cast(meta[relay.Constant][19] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %410 = reshape(%409, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %411 = @func_3538(%410) /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) */;
  %412 = @func_2166() /* ty=uint8 */;
  %413 = %411.1;
  (%412, %413, meta[relay.Constant][19] /* ty=Tensor[(108), float64] */)
}

def @func_7343(%var_7322: Tensor[(7, 4, 10), float64], %var_7323: Tensor[(7, 4, 10), float64]) -> (Tensor[(7, 4, 10), float64], Tensor[(7, 4, 10), float64]) {
  %414 = cast(%var_7323, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
  %415 = shape_of(%var_7322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_7322, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %418 = cast(%var_7322, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
  %419 = floor_mod(%416, %417) /* ty=Tensor[(7, 4, 10), float64] */;
  %420 = tan(%418) /* ty=Tensor[(7, 4, 10), float64] */;
  (%419, %420)
}

def @func_3564(%var_3554: Tensor[(5, 13, 3), float32]) -> (Tensor[(5, 13, 3), float32], Tensor[(8, 3, 10), float64]) {
  %421 = cast(%var_3554, dtype="float32") /* ty=Tensor[(5, 13, 3), float32] */;
  %422 = @func_2706() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %423 = erf(%421) /* ty=Tensor[(5, 13, 3), float32] */;
  %424 = %422.0;
  (%423, %424)
}

def @func_5458() -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  %425 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %426 = @func_3984() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %427 = %425.0;
  %428 = %426.0;
  (%427, %428)
}

def @func_2991() -> (uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float64]) {
  %429 = @func_2593() /* ty=(uint8,) */;
  %430 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %431 = %429.0;
  %432 = %430.0;
  %433 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  (%431, %432, %433)
}

def @func_3538(%var_3527: Tensor[(108), float64]) -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) {
  %434 = @func_3177() /* ty=(uint8,) */;
  %435 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %436 = cast(%var_3527, dtype="float64") /* ty=Tensor[(108), float64] */;
  %437 = reshape(%436, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %438 = @func_1239(%437) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %439 = %434.0;
  %440 = cast(%439, dtype="uint32") /* ty=uint32 */;
  %441 = reshape(%440, newshape=[]) /* ty=uint32 */;
  %442 = @func_1005(%441) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
  %443 = %435.0;
  %444 = %438.0;
  %445 = %442.3;
  (%439, %443, %444, %var_3527, %445)
}

def @func_5135() -> (Tensor[(8, 3, 10), float32],) {
  %446 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %447 = %446.0;
  (%447,)
}

def @func_6031(%var_6026: Tensor[(16, 11, 8), float64], %var_6027: Tensor[(16, 11, 8), float64]) -> (Tensor[(16, 11, 8), float64],) {
  %448 = cast(%var_6027, dtype="float64") /* ty=Tensor[(16, 11, 8), float64] */;
  %449 = shape_of(%var_6026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%var_6026, dtype="float64") /* ty=Tensor[(16, 11, 8), float64] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %452 = divide(%450, %451) /* ty=Tensor[(16, 11, 8), float64] */;
  (%452,)
}

def @func_6140(%var_6108: Tensor[(14, 10, 9), int64]) -> Tensor[(14, 10, 9), int64] {
  %453 = cast(%var_6108, dtype="int64") /* ty=Tensor[(14, 10, 9), int64] */;
  %454 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(14, 10, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(meta[relay.Constant][20] /* ty=Tensor[(14, 10, 9), int64] */, dtype="int64") /* ty=Tensor[(14, 10, 9), int64] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%455, %456) /* ty=Tensor[(14, 10, 9), int64] */
}

def @func_6876() -> (Tensor[(8, 3, 10), float32],) {
  %457 = @func_5135() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %458 = %457.0;
  (%458,)
}

def @func_6163(%var_6153: uint16) -> (Tensor[(8, 1, 16), uint16], Tensor[(14, 10, 9), int64], Tensor[(1260), int64]) {
  %459 = cast(%var_6153, dtype="uint16") /* ty=uint16 */;
  %460 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 1, 16), uint16] */, dtype="uint16") /* ty=Tensor[(8, 1, 16), uint16] */;
  %461 = cast(meta[relay.Constant][22] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %462 = reshape(%461, newshape=[14, 10, 9]) /* ty=Tensor[(14, 10, 9), int64] */;
  %463 = multiply(%459, %460) /* ty=Tensor[(8, 1, 16), uint16] */;
  %464 = @func_6140(%462) /* ty=Tensor[(14, 10, 9), int64] */;
  (%463, %464, meta[relay.Constant][22] /* ty=Tensor[(1260), int64] */)
}

def @func_3334() -> (Tensor[(8, 3, 10), float64], uint8) {
  %465 = @func_2706() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %466 = %465.0;
  %467 = @func_1861() /* ty=uint8 */;
  (%466, %467)
}

def @func_6499() -> (Tensor[(8, 3, 10), bool],) {
  %468 = @func_6017() /* ty=(Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) */;
  %469 = %468.1;
  %470 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 3, 10), float32] */, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = greater(%472, %473) /* ty=Tensor[(8, 3, 10), bool] */;
  (%474,)
}

def @func_6845() -> (Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64]) {
  %475 = @func_4814() /* ty=(uint8, Tensor[(12, 2, 1), bool]) */;
  %476 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
  %477 = %475.1;
  %478 = %476.1;
  (%477, %478)
}

def @func_7696() -> (Tensor[(8, 3, 10), float32],) {
  %479 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  (%479,)
}

def @func_2501(%var_2451: Tensor[(2145), uint8]) -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(12, 2, 1), bool], uint16, Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(9, 12, 1), float64], Tensor[(108, 1), float64], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(8, 3, 10), float32]) {
  %480 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %481 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  %482 = cast(%481, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %483 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %484 = reshape(%483, newshape=[]) /* ty=uint16 */;
  %485 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint8") /* ty=uint8 */;
  %486 = cast(%var_2451, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %487 = reshape(%485, newshape=[]) /* ty=uint8 */;
  %488 = reshape(%486, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %489 = @func_828(%487, %488) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %490 = cast(meta[relay.Constant][25] /* ty=Tensor[(108, 1), float64] */, dtype="float64") /* ty=Tensor[(108, 1), float64] */;
  %491 = reshape(%490, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %492 = @func_1239(%491) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %493 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint8") /* ty=uint8 */;
  %494 = cast(%var_2451, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %495 = reshape(%493, newshape=[]) /* ty=uint8 */;
  %496 = reshape(%494, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %497 = @func_828(%495, %496) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %498 = %492.0;
  %499 = cast(%498, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %500 = reshape(%499, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %501 = @func_1239(%500) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %502 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %503 = %480.0;
  %504 = sinh(%482) /* ty=Tensor[(8, 3, 10), float64] */;
  %505 = @func_274(%484) /* ty=Tensor[(12, 2, 1), bool] */;
  %506 = %489.1;
  %507 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  %508 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  %509 = %497.1;
  %510 = %501.0;
  %511 = %502.0;
  (%503, %504, %505, meta[relay.Constant][24] /* ty=uint16 */, %506, %var_2451, %498, meta[relay.Constant][25] /* ty=Tensor[(108, 1), float64] */, %507, %508, %509, %510, %511)
}

def @func_274(%var_254: uint16) -> Tensor[(12, 2, 1), bool] {
  %512 = cast(%var_254, dtype="bool") /* ty=bool */;
  %513 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 2, 1), uint16] */, dtype="bool") /* ty=Tensor[(12, 2, 1), bool] */;
  less(%512, %513) /* ty=Tensor[(12, 2, 1), bool] */
}

def @func_6450(%var_6435: uint32, %var_6446: Tensor[(2145), uint8]) -> (Tensor[(990), float32], Tensor[(11, 10, 3), int16], uint32, Tensor[(2145), uint8], Tensor[(2145), uint8]) {
  %514 = @func_3690() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) */;
  %515 = cast(%var_6435, dtype="uint32") /* ty=uint32 */;
  %516 = reshape(%515, newshape=[]) /* ty=uint32 */;
  %517 = @func_1005(%516) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
  %518 = cast(%var_6446, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %519 = reshape(%518, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %520 = @func_2150(%519) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */;
  %521 = %514.3;
  %522 = %517.1;
  %523 = %520.1;
  (%521, %522, %var_6435, %523, %var_6446)
}

def @func_5952() -> Tensor[(8, 3, 10), float32] {
  %524 = @func_4786() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %524.0
}

def @func_828(%var_790: uint8, %var_791: Tensor[(15, 11, 13), uint8]) -> (Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) {
  %525 = cast(%var_791, dtype="float64") /* ty=Tensor[(15, 11, 13), float64] */;
  %526 = rsqrt(%525) /* ty=Tensor[(15, 11, 13), float64] */;
  %527 = cast(%var_790, dtype="bool") /* ty=bool */;
  %528 = cast(%var_791, dtype="bool") /* ty=Tensor[(15, 11, 13), bool] */;
  %529 = greater_equal(%527, %528) /* ty=Tensor[(15, 11, 13), bool] */;
  %530 = cast(%529, dtype="int16") /* ty=Tensor[(15, 11, 13), int16] */;
  %531 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%526, dtype="int16") /* ty=Tensor[(15, 11, 13), int16] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %534 = cast(%529, dtype="bool") /* ty=Tensor[(15, 11, 13), bool] */;
  %535 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%526, dtype="bool") /* ty=Tensor[(15, 11, 13), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = minimum(%532, %533) /* ty=Tensor[(15, 11, 13), int16] */;
  %539 = logical_and(%536, %537) /* ty=Tensor[(15, 11, 13), bool] */;
  (%538, %539)
}

def @func_4513() -> (Tensor[(8, 3, 10), float32],) {
  %540 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  (%540,)
}

def @func_3142(%var_3133: Tensor[(1, 4, 10), float32], %var_3134: Tensor[(8, 4, 10), float32]) -> (Tensor[(8, 4, 10), float32],) {
  %541 = cast(%var_3133, dtype="float32") /* ty=Tensor[(1, 4, 10), float32] */;
  %542 = cast(%var_3134, dtype="float32") /* ty=Tensor[(8, 4, 10), float32] */;
  %543 = divide(%541, %542) /* ty=Tensor[(8, 4, 10), float32] */;
  (%543,)
}

def @func_8205(%var_8201: Tensor[(5, 16, 16), float32]) -> (Tensor[(5, 16, 16), float32],) {
  %544 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 16), float32] */;
  %545 = cast(%var_8201, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %546 = floor_divide(%544, %545) /* ty=Tensor[(5, 16, 16), float32] */;
  (%546,)
}

def @func_5621(%var_5601: Tensor[(16, 16, 13), int32], %var_5602: Tensor[(16, 16, 13), int32], %var_5616: Tensor[(16, 16, 13), int32]) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), bool]) {
  %547 = cast(%var_5602, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %548 = shape_of(%var_5601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %549 = cast(%var_5601, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %550 = dyn.reshape(%547, %548, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %551 = cast(%var_5616, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %552 = shape_of(%var_5601, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_5601, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %555 = greater_equal(%549, %550) /* ty=Tensor[(16, 16, 13), bool] */;
  %556 = equal(%553, %554) /* ty=Tensor[(16, 16, 13), bool] */;
  (%555, %556)
}

def @func_8524(%var_8491: Tensor[(126), float32], %var_8503: Tensor[(8, 3, 10), float64]) -> (Tensor[(126), float32], Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32], Tensor[(7, 2, 9), uint32]) {
  %557 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  %558 = cast(%var_8503, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = @func_5250() /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %563 = cast(%var_8491, dtype="float32") /* ty=Tensor[(126), float32] */;
  %564 = reshape(%563, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), float32] */;
  %565 = @func_5112(%564) /* ty=(Tensor[(7, 2, 9), float32],) */;
  %566 = %565.0;
  %567 = @func_4214() /* ty=(Tensor[(8, 3, 10), float32], uint8) */;
  %568 = %567.1;
  %569 = cast(%566, dtype="uint32") /* ty=Tensor[(7, 2, 9), uint32] */;
  %570 = cast(%568, dtype="uint32") /* ty=uint32 */;
  %571 = not_equal(%560, %561) /* ty=Tensor[(8, 3, 10), bool] */;
  %572 = %562.1;
  %573 = logical_xor(%569, %570) /* ty=Tensor[(7, 2, 9), uint32] */;
  (%var_8491, %571, %572, %573)
}

def @func_5560(%var_5540: Tensor[(10, 2, 15), uint8]) -> Tensor[(10, 2, 15), bool] {
  %574 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 2, 1), uint8] */, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
  %575 = cast(%var_5540, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  equal(%574, %575) /* ty=Tensor[(10, 2, 15), bool] */
}

def @func_933(%var_882: Tensor[(8, 15, 11), bool], %var_883: Tensor[(8, 15, 11), bool], %var_926: Tensor[(8, 15, 11), bool]) -> (Tensor[(8, 15, 11), int8], Tensor[(8, 15, 11), float64]) {
  %576 = cast(%var_883, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %577 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%var_882, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = logical_and(%578, %579) /* ty=Tensor[(8, 15, 11), bool] */;
  %581 = cast(%580, dtype="int8") /* ty=Tensor[(8, 15, 11), int8] */;
  %582 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
  %583 = cast(%var_882, dtype="int8") /* ty=Tensor[(8, 15, 11), int8] */;
  %584 = dyn.reshape(%581, %582, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %585 = cast(%var_926, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %586 = shape_of(%var_883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %587 = cast(%var_883, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %589 = maximum(%583, %584) /* ty=Tensor[(8, 15, 11), int8] */;
  %590 = floor_mod(%587, %588) /* ty=Tensor[(8, 15, 11), float64] */;
  (%589, %590)
}

def @func_4255() -> (Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) {
  %591 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %592 = cast(meta[relay.Constant][29] /* ty=Tensor[(480, 1), float64] */, dtype="float64") /* ty=Tensor[(480, 1), float64] */;
  %593 = reshape(%592, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float64] */;
  %594 = %591.0;
  %595 = @func_446(%593) /* ty=Tensor[(16, 6, 5), float64] */;
  (%594, %595, meta[relay.Constant][29] /* ty=Tensor[(480, 1), float64] */)
}

def @func_3863() -> (Tensor[(8, 3, 10), float32],) {
  %596 = @func_3690() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) */;
  %597 = %596.1;
  (%597,)
}

def @func_6966() -> Tensor[(8, 3, 10), float32] {
  %598 = @func_5135() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %598.0
}

def @func_3114() -> (Tensor[(990), float32],) {
  %599 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
  %600 = %599.2;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(990), float32] */;
  %602 = atan(%601) /* ty=Tensor[(990), float32] */;
  (%602,)
}

def @func_6017() -> (Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) {
  %603 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %604 = %603.2;
  %605 = cast(meta[relay.Constant][30] /* ty=Tensor[(8, 3, 10), float32] */, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %606 = shape_of(%604, dtype="int32") /* ty=Tensor[(3), int32] */;
  %607 = cast(%604, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
  %608 = dyn.reshape(%605, %606, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %609 = @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %610 = greater_equal(%607, %608) /* ty=Tensor[(8, 3, 10), bool] */;
  %611 = %609.0;
  (%610, %611)
}

def @func_2848() -> (uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) {
  %612 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %613 = cast(meta[relay.Constant][31] /* ty=Tensor[(110, 1), int32] */, dtype="int32") /* ty=Tensor[(110, 1), int32] */;
  %614 = cast(meta[relay.Constant][32] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %615 = cast(meta[relay.Constant][33] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %616 = cast(meta[relay.Constant][33] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %617 = reshape(%613, newshape=[110]) /* ty=Tensor[(110), int32] */;
  %618 = reshape(%614, newshape=[990]) /* ty=Tensor[(990), int32] */;
  %619 = reshape(%615, newshape=[55, 6]) /* ty=Tensor[(55, 6), int16] */;
  %620 = reshape(%616, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %621 = @func_1760(%617, %618, %619, %620) /* ty=(Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) */;
  %622 = cast(meta[relay.Constant][33] /* ty=Tensor[(330), int16] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %623 = cast(meta[relay.Constant][31] /* ty=Tensor[(110, 1), int32] */, dtype="uint8") /* ty=Tensor[(110, 1), uint8] */;
  %624 = %621.0;
  %625 = cast(%624, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %626 = reshape(%625, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %627 = @func_2150(%626) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */;
  %628 = %612.1;
  %629 = maximum(%622, %623) /* ty=Tensor[(110, 330), uint8] */;
  %630 = %627.1;
  (%628, %624, meta[relay.Constant][32] /* ty=Tensor[(990), int32] */, %629, %630)
}

def @func_8224() -> (uint8,) {
  %631 = @func_5694() /* ty=uint8 */;
  (%631,)
}

def @func_446(%var_430: Tensor[(16, 6, 5), float64]) -> Tensor[(16, 6, 5), float64] {
  %632 = cast(%var_430, dtype="float64") /* ty=Tensor[(16, 6, 5), float64] */;
  tan(%632) /* ty=Tensor[(16, 6, 5), float64] */
}

def @func_7459(%var_7435: Tensor[(108), float64], %var_7450: Tensor[(715, 3), float32]) -> (Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], uint32, Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(715, 3), int16], Tensor[(715, 3), uint64]) {
  %633 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %634 = cast(meta[relay.Constant][34] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %635 = cast(meta[relay.Constant][35] /* ty=Tensor[(715, 3), uint8] */, dtype="uint8") /* ty=Tensor[(715, 3), uint8] */;
  %636 = reshape(%634, newshape=[]) /* ty=uint32 */;
  %637 = reshape(%635, newshape=[1, 2145]) /* ty=Tensor[(1, 2145), uint8] */;
  %638 = @func_6991(%636, %637) /* ty=(Tensor[(2145), uint8], Tensor[(1, 2145), int8], Tensor[(9, 5, 2), float32]) */;
  %639 = cast(%var_7435, dtype="float64") /* ty=Tensor[(108), float64] */;
  %640 = reshape(%639, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %641 = @func_1239(%640) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %642 = cast(meta[relay.Constant][35] /* ty=Tensor[(715, 3), uint8] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %643 = sin(%642) /* ty=Tensor[(715, 3), float32] */;
  %644 = cast(meta[relay.Constant][36] /* ty=Tensor[(715, 3), float32] */, dtype="int16") /* ty=Tensor[(715, 3), int16] */;
  %645 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %646 = cast(%643, dtype="int16") /* ty=Tensor[(715, 3), int16] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %648 = cast(%var_7450, dtype="int64") /* ty=Tensor[(715, 3), int64] */;
  %649 = shape_of(%643, dtype="int32") /* ty=Tensor[(2), int32] */;
  %650 = cast(%643, dtype="int64") /* ty=Tensor[(715, 3), int64] */;
  %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %652 = right_shift(%650, %651) /* ty=Tensor[(715, 3), int64] */;
  %653 = cast(%var_7450, dtype="uint64") /* ty=Tensor[(715, 3), uint64] */;
  %654 = shape_of(%652, dtype="int32") /* ty=Tensor[(2), int32] */;
  %655 = cast(%652, dtype="uint64") /* ty=Tensor[(715, 3), uint64] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %657 = %633.0;
  %658 = %638.0;
  %659 = %641.0;
  %660 = minimum(%646, %647) /* ty=Tensor[(715, 3), int16] */;
  %661 = subtract(%655, %656) /* ty=Tensor[(715, 3), uint64] */;
  (%657, %658, meta[relay.Constant][34] /* ty=uint32 */, %659, %var_7435, %660, %661)
}

def @func_5694() -> uint8 {
  %662 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %662.1
}

def @func_2779(%var_2771: Tensor[(8, 8, 10), float32], %var_2777: Tensor[(330), int16]) -> (Tensor[(8, 8, 10), float32], Tensor[(11, 10, 3), int16], Tensor[(330), int16]) {
  %663 = cast(%var_2771, dtype="float32") /* ty=Tensor[(8, 8, 10), float32] */;
  %664 = cast(%var_2777, dtype="int16") /* ty=Tensor[(330), int16] */;
  %665 = cast(%var_2777, dtype="int16") /* ty=Tensor[(330), int16] */;
  %666 = reshape(%664, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %667 = reshape(%665, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %668 = @func_857(%666, %667) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %669 = acos(%663) /* ty=Tensor[(8, 8, 10), float32] */;
  %670 = %668.0;
  (%669, %670, %var_2777)
}

def @func_6768() -> (Tensor[(16, 6, 5), float64],) {
  %671 = @func_4255() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */;
  %672 = %671.1;
  (%672,)
}

def @func_6678() -> (Tensor[(8, 3, 10), float32], Tensor[(840, 1), bool], Tensor[(840), bool]) {
  %673 = @func_4214() /* ty=(Tensor[(8, 3, 10), float32], uint8) */;
  %674 = cast(meta[relay.Constant][37] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %675 = reshape(%674, newshape=[840, 1]) /* ty=Tensor[(840, 1), bool] */;
  %676 = @func_4155(%675) /* ty=(Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) */;
  %677 = %673.0;
  %678 = %676.0;
  (%677, %678, meta[relay.Constant][37] /* ty=Tensor[(840), bool] */)
}

def @func_3272() -> (Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) {
  %679 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %680 = cast(meta[relay.Constant][38] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %681 = reshape(%680, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float64] */;
  %682 = cast(meta[relay.Constant][39] /* ty=Tensor[(165, 2), int16] */, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %683 = cast(meta[relay.Constant][39] /* ty=Tensor[(165, 2), int16] */, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %684 = reshape(%682, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %685 = reshape(%683, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %686 = @func_857(%684, %685) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %687 = %679.0;
  %688 = @func_446(%681) /* ty=Tensor[(16, 6, 5), float64] */;
  %689 = @func_1861() /* ty=uint8 */;
  %690 = %686.0;
  (%687, %688, meta[relay.Constant][38] /* ty=Tensor[(480), float64] */, %689, %690, meta[relay.Constant][39] /* ty=Tensor[(165, 2), int16] */)
}

def @func_5178() -> (Tensor[(2145), float32],) {
  %691 = @func_4841() /* ty=Tensor[(2145), uint8] */;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %693 = acos(%692) /* ty=Tensor[(2145), float32] */;
  (%693,)
}

def @func_3177() -> (uint8,) {
  %694 = @func_2593() /* ty=(uint8,) */;
  %695 = %694.0;
  (%695,)
}

def @func_3759() -> (Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) {
  %696 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %697 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %698 = cast(meta[relay.Constant][40] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %699 = reshape(%698, newshape=[]) /* ty=uint32 */;
  %700 = @func_1005(%699) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
  %701 = %696.0;
  %702 = %697.0;
  %703 = %700.0;
  (%701, %702, %703, meta[relay.Constant][40] /* ty=uint32 */)
}

def @func_2256() -> Tensor[(8, 3, 10), float32] {
  %704 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %705 = %704.0;
  %706 = cast(%705, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  erf(%706) /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_1760(%var_1693: Tensor[(110), int32], %var_1694: Tensor[(990), int32], %var_1708: Tensor[(55, 6), int16], %var_1745: Tensor[(11, 10, 3), int16]) -> (Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) {
  %707 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %708 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %709 = reshape(%708, newshape=[]) /* ty=uint16 */;
  %710 = cast(%var_1693, dtype="int32") /* ty=Tensor[(110), int32] */;
  %711 = cast(%var_1694, dtype="int32") /* ty=Tensor[(990), int32] */;
  %712 = reshape(%710, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %713 = reshape(%711, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %714 = @func_1523(%712, %713) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %715 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %716 = cast(meta[relay.Constant][42] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %717 = reshape(%715, newshape=[]) /* ty=bool */;
  %718 = reshape(%716, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), bool] */;
  %719 = @func_1642(%717, %718) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %720 = cast(meta[relay.Constant][41] /* ty=uint16 */, dtype="uint8") /* ty=uint8 */;
  %721 = %707.3;
  %722 = cast(%721, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %723 = reshape(%720, newshape=[]) /* ty=uint8 */;
  %724 = reshape(%722, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %725 = @func_828(%723, %724) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %726 = cast(%var_1708, dtype="int16") /* ty=Tensor[(55, 6), int16] */;
  %727 = cast(%var_1708, dtype="int16") /* ty=Tensor[(55, 6), int16] */;
  %728 = reshape(%726, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %729 = reshape(%727, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %730 = @func_857(%728, %729) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %731 = %730.0;
  %732 = cast(%var_1745, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %733 = shape_of(%731, dtype="int32") /* ty=Tensor[(3), int32] */;
  %734 = cast(%731, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %736 = @func_274(%709) /* ty=Tensor[(12, 2, 1), bool] */;
  %737 = %714.0;
  %738 = %719.0;
  %739 = %725.0;
  %740 = power(%734, %735) /* ty=Tensor[(11, 10, 3), float64] */;
  (%721, %736, meta[relay.Constant][41] /* ty=uint16 */, %737, %var_1693, %var_1694, %var_1708, %738, meta[relay.Constant][42] /* ty=Tensor[(840), bool] */, %739, %740)
}

def @func_4942(%var_4929: Tensor[(110), int32]) -> (Tensor[(8, 3, 10), float64], Tensor[(1, 10, 11), float32], Tensor[(110), int32], Tensor[(990), int32], uint8, Tensor[(8, 3, 10), float64]) {
  %741 = cast(%var_4929, dtype="int32") /* ty=Tensor[(110), int32] */;
  %742 = cast(meta[relay.Constant][43] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %743 = reshape(%741, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %744 = reshape(%742, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %745 = @func_1523(%743, %744) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %746 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %747 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  %748 = %745.1;
  %749 = @func_3905() /* ty=uint8 */;
  %750 = %746.0;
  (%747, %748, %var_4929, meta[relay.Constant][43] /* ty=Tensor[(990), int32] */, %749, %750)
}

def @func_1596() -> Tensor[(8, 3, 10), float64] {
  %751 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %751.0
}

def @func_6571(%var_6505: Tensor[(6, 8, 1), float64]) -> (Tensor[(1521), int32], Tensor[(6, 8, 840), bool], Tensor[(6, 8, ?), bool], Tensor[(2, 10, 7), bool], Tensor[(140), float32], Tensor[(14, 10, 9), int64], uint16, Tensor[(8, 3, 10), float32]) {
  %752 = cast(%var_6505, dtype="float64") /* ty=Tensor[(6, 8, 1), float64] */;
  %753 = atanh(%752) /* ty=Tensor[(6, 8, 1), float64] */;
  %754 = cast(%var_6505, dtype="int8") /* ty=Tensor[(6, 8, 1), int8] */;
  %755 = shape_of(%753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %756 = cast(%753, dtype="int8") /* ty=Tensor[(6, 8, 1), int8] */;
  %757 = dyn.reshape(%754, %755, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %758 = multiply(%756, %757) /* ty=Tensor[(6, 8, ?), int8] */;
  %759 = cast(meta[relay.Constant][44] /* ty=Tensor[(1521), int32] */, dtype="int32") /* ty=Tensor[(1521), int32] */;
  %760 = reshape(%759, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int32] */;
  %761 = @func_2909(%760) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 12), bool], bool, Tensor[(840), bool], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8]) */;
  %762 = %761.5;
  %763 = cast(%758, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %764 = cast(%762, dtype="bool") /* ty=Tensor[(840), bool] */;
  %765 = cast(%758, dtype="float32") /* ty=Tensor[(6, 8, ?), float32] */;
  %766 = acos(%765) /* ty=Tensor[(6, 8, ?), float32] */;
  %767 = cast(%766, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %768 = shape_of(%758, dtype="int32") /* ty=Tensor[(3), int32] */;
  %769 = cast(%758, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %770 = dyn.reshape(%767, %768, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %771 = logical_or(%769, %770) /* ty=Tensor[(6, 8, ?), bool] */;
  %772 = cast(%771, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %773 = shape_of(%766, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%766, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %776 = cast(meta[relay.Constant][45] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %777 = reshape(%776, newshape=[2, 10, 7]) /* ty=Tensor[(2, 10, 7), float32] */;
  %778 = @func_3468(%777) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */;
  %779 = cast(meta[relay.Constant][46] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %780 = reshape(%779, newshape=[]) /* ty=uint16 */;
  %781 = @func_6163(%780) /* ty=(Tensor[(8, 1, 16), uint16], Tensor[(14, 10, 9), int64], Tensor[(1260), int64]) */;
  %782 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %783 = not_equal(%763, %764) /* ty=Tensor[(6, 8, 840), bool] */;
  %784 = less_equal(%774, %775) /* ty=Tensor[(6, 8, ?), bool] */;
  %785 = %778.3;
  %786 = %781.1;
  %787 = %782.0;
  (meta[relay.Constant][44] /* ty=Tensor[(1521), int32] */, %783, %784, %785, meta[relay.Constant][45] /* ty=Tensor[(140), float32] */, %786, meta[relay.Constant][46] /* ty=uint16 */, %787)
}

def @func_6361() -> (Tensor[(990), float64], uint16) {
  %788 = @func_5815() /* ty=(Tensor[(990), int32],) */;
  %789 = %788.0;
  %790 = cast(meta[relay.Constant][47] /* ty=Tensor[(990), int32] */, dtype="float64") /* ty=Tensor[(990), float64] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(1), int32] */;
  %792 = cast(%789, dtype="float64") /* ty=Tensor[(990), float64] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?), float64] */;
  %794 = @func_5228() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(12, 2, 1), bool], uint16) */;
  %795 = mod(%792, %793) /* ty=Tensor[(990), float64] */;
  %796 = %794.2;
  (%795, %796)
}

def @func_7995(%var_7978: float64) -> Tensor[(14, 5, 2), float64] {
  %797 = cast(%var_7978, dtype="float64") /* ty=float64 */;
  %798 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  floor_mod(%797, %798) /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_4479(%var_4402: Tensor[(2145), uint8], %var_4462: Tensor[(8, 2, 15), uint8]) -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(16, 12, 9), uint32], uint32, uint8, Tensor[(840, 1), bool], Tensor[(840), bool], Tensor[(8, 2, 15), bool], Tensor[(165, 2), int16]) {
  %799 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %800 = cast(%var_4402, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %801 = reshape(%800, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %802 = @func_2501(%801) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(12, 2, 1), bool], uint16, Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(9, 12, 1), float64], Tensor[(108, 1), float64], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(8, 3, 10), float32]) */;
  %803 = cast(meta[relay.Constant][49] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %804 = reshape(%803, newshape=[]) /* ty=uint32 */;
  %805 = @func_1005(%804) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
  %806 = cast(meta[relay.Constant][50] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %807 = reshape(%806, newshape=[840, 1]) /* ty=Tensor[(840, 1), bool] */;
  %808 = @func_4155(%807) /* ty=(Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) */;
  %809 = @func_2166() /* ty=uint8 */;
  %810 = cast(%809, dtype="bool") /* ty=bool */;
  %811 = cast(%var_4462, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
  %812 = @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */;
  %813 = %799.0;
  %814 = %802.10;
  %815 = %805.0;
  %816 = @func_2166() /* ty=uint8 */;
  %817 = %808.0;
  %818 = greater(%810, %811) /* ty=Tensor[(8, 2, 15), bool] */;
  %819 = %812.5;
  (%813, %814, %var_4402, %815, meta[relay.Constant][49] /* ty=uint32 */, %816, %817, meta[relay.Constant][50] /* ty=Tensor[(840), bool] */, %818, %819)
}

def @func_8293() -> (Tensor[(990), float32],) {
  %820 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %821 = %820.0;
  %822 = cast(%821, dtype="float32") /* ty=Tensor[(990), float32] */;
  %823 = rsqrt(%822) /* ty=Tensor[(990), float32] */;
  (%823,)
}

def @func_2909(%var_2870: Tensor[(9, 13, 13), int32]) -> (Tensor[(9, 13, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 12), bool], bool, Tensor[(840), bool], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8]) {
  %824 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 13, 1), int32] */, dtype="bool") /* ty=Tensor[(9, 13, 1), bool] */;
  %825 = cast(%var_2870, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %826 = cast(meta[relay.Constant][52] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %827 = reshape(%826, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %828 = @func_1239(%827) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %829 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %830 = cast(meta[relay.Constant][53] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %831 = reshape(%829, newshape=[]) /* ty=bool */;
  %832 = reshape(%830, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), bool] */;
  %833 = @func_1642(%831, %832) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %834 = cast(False /* ty=bool */, dtype="uint8") /* ty=uint8 */;
  %835 = cast(meta[relay.Constant][54] /* ty=Tensor[(2145), uint8] */, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %836 = reshape(%834, newshape=[]) /* ty=uint8 */;
  %837 = reshape(%835, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %838 = @func_828(%836, %837) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %839 = greater_equal(%824, %825) /* ty=Tensor[(9, 13, 13), bool] */;
  %840 = %828.0;
  %841 = %833.0;
  %842 = %838.1;
  (%839, %840, meta[relay.Constant][52] /* ty=Tensor[(108), float64] */, %841, False /* ty=bool */, meta[relay.Constant][53] /* ty=Tensor[(840), bool] */, %842, meta[relay.Constant][54] /* ty=Tensor[(2145), uint8] */)
}

def @func_5664() -> (Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) {
  %843 = @func_4255() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */;
  %844 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  %845 = %843.2;
  (%844, %845)
}

def @func_1005(%var_972: uint32) -> (Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) {
  %846 = cast(%var_972, dtype="uint32") /* ty=uint32 */;
  %847 = cast(meta[relay.Constant][55] /* ty=Tensor[(16, 12, 9), uint32] */, dtype="uint32") /* ty=Tensor[(16, 12, 9), uint32] */;
  %848 = cast(meta[relay.Constant][56] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %849 = cast(meta[relay.Constant][56] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %850 = reshape(%848, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %851 = reshape(%849, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %852 = @func_857(%850, %851) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %853 = cast(%var_972, dtype="uint16") /* ty=uint16 */;
  %854 = reshape(%853, newshape=[]) /* ty=uint16 */;
  %855 = cast(meta[relay.Constant][57] /* ty=Tensor[(120, 4), float64] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
  %856 = reshape(%855, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float64] */;
  %857 = bitwise_and(%846, %847) /* ty=Tensor[(16, 12, 9), uint32] */;
  %858 = %852.0;
  %859 = @func_274(%854) /* ty=Tensor[(12, 2, 1), bool] */;
  %860 = @func_446(%856) /* ty=Tensor[(16, 6, 5), float64] */;
  (%857, %858, meta[relay.Constant][56] /* ty=Tensor[(330), int16] */, %859, %860, meta[relay.Constant][57] /* ty=Tensor[(120, 4), float64] */)
}

def @func_1948(%var_1928: Tensor[(12, 13, 2), float32]) -> (Tensor[(12, 13, 2), float32], Tensor[(8, 3, 10), float64]) {
  %861 = cast(%var_1928, dtype="float32") /* ty=Tensor[(12, 13, 2), float32] */;
  %862 = rsqrt(%861) /* ty=Tensor[(12, 13, 2), float32] */;
  %863 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  (%862, %863)
}

def @func_4882() -> (uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) {
  %864 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %865 = @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */;
  %866 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %867 = %864.1;
  %868 = %865.1;
  %869 = %866.1;
  (%867, %868, %869)
}

def @func_6292() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %870 = @func_5458() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %871 = @func_5911() /* ty=(Tensor[(990), float32], Tensor[(8, 3, 10), float32], Tensor[(2145), uint8]) */;
  %872 = %870.1;
  %873 = %871.1;
  (%872, %873)
}

def @func_1975() -> (Tensor[(8, 3, 10), float64],) {
  %874 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  (%874,)
}

def @func_2318() -> (Tensor[(8, 3, 10), float32],) {
  %875 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %876 = %875.0;
  (%876,)
}

def @func_4035(%var_4031: Tensor[(2, 9, 14), uint8]) -> Tensor[(2, 9, 14), bool] {
  %877 = cast(%var_4031, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %878 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(2, 9, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %879 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 9, 14), uint8] */, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %880 = dyn.reshape(%877, %878, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%879, %880) /* ty=Tensor[(2, 9, 14), bool] */
}

def @func_1239(%var_1233: Tensor[(9, 12, 1), float64]) -> (Tensor[(9, 12, 1), float64],) {
  %881 = cast(%var_1233, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %882 = tan(%881) /* ty=Tensor[(9, 12, 1), float64] */;
  (%882,)
}

def @func_5028() -> (uint8, uint16, Tensor[(110), int32], Tensor[(990), int32], Tensor[(330), int16]) {
  %883 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
  %884 = cast(meta[relay.Constant][59] /* ty=Tensor[(110), int32] */, dtype="int32") /* ty=Tensor[(110), int32] */;
  %885 = cast(meta[relay.Constant][60] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %886 = cast(meta[relay.Constant][61] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %887 = cast(meta[relay.Constant][61] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %888 = reshape(%884, newshape=[110]) /* ty=Tensor[(110), int32] */;
  %889 = reshape(%885, newshape=[990]) /* ty=Tensor[(990), int32] */;
  %890 = reshape(%886, newshape=[55, 6]) /* ty=Tensor[(55, 6), int16] */;
  %891 = reshape(%887, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %892 = @func_1760(%888, %889, %890, %891) /* ty=(Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) */;
  %893 = %883.0;
  %894 = %892.2;
  (%893, %894, meta[relay.Constant][59] /* ty=Tensor[(110), int32] */, meta[relay.Constant][60] /* ty=Tensor[(990), int32] */, meta[relay.Constant][61] /* ty=Tensor[(330), int16] */)
}

def @func_6857() -> (Tensor[(16, 6, 5), float64],) {
  %895 = @func_6768() /* ty=(Tensor[(16, 6, 5), float64],) */;
  %896 = %895.0;
  (%896,)
}

def @func_5815() -> (Tensor[(990), int32],) {
  %897 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %898 = %897.0;
  %899 = cast(meta[relay.Constant][62] /* ty=Tensor[(990), float32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %900 = shape_of(%898, dtype="int32") /* ty=Tensor[(1), int32] */;
  %901 = cast(%898, dtype="int32") /* ty=Tensor[(990), int32] */;
  %902 = dyn.reshape(%899, %900, newshape=[]) /* ty=Tensor[(?), int32] */;
  %903 = right_shift(%901, %902) /* ty=Tensor[(990), int32] */;
  (%903,)
}

def @func_5911() -> (Tensor[(990), float32], Tensor[(8, 3, 10), float32], Tensor[(2145), uint8]) {
  %904 = @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */;
  %905 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %906 = %904.1;
  %907 = %905.0;
  %908 = @func_4591() /* ty=Tensor[(2145), uint8] */;
  (%906, %907, %908)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1007(%var_1006: uint32) -> (Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) {
  %15 = fn (%var_972: uint32) -> (Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) {
    %0 = cast(%var_972, dtype="uint32") /* ty=uint32 */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 12, 9), uint32] */, dtype="uint32") /* ty=Tensor[(16, 12, 9), uint32] */;
    %2 = cast(meta[relay.Constant][1] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
    %3 = cast(meta[relay.Constant][1] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
    %4 = reshape(%2, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
    %5 = reshape(%3, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
    %6 = @func_857(%4, %5) /* ty=(Tensor[(11, 10, 3), int16],) */;
    %7 = cast(%var_972, dtype="uint16") /* ty=uint16 */;
    %8 = reshape(%7, newshape=[]) /* ty=uint16 */;
    %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(120, 4), float64] */, dtype="float64") /* ty=Tensor[(120, 4), float64] */;
    %10 = reshape(%9, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float64] */;
    %11 = bitwise_and(%0, %1) /* ty=Tensor[(16, 12, 9), uint32] */;
    %12 = %6.0;
    %13 = @func_274(%8) /* ty=Tensor[(12, 2, 1), bool] */;
    %14 = @func_446(%10) /* ty=Tensor[(16, 6, 5), float64] */;
    (%11, %12, meta[relay.Constant][1] /* ty=Tensor[(330), int16] */, %13, %14, meta[relay.Constant][2] /* ty=Tensor[(120, 4), float64] */)
  };
  %15(%var_1006) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */
}

def @func_6299() -> (Tensor[(8, 3, 10), float32],) {
  @func_6297() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_6450(%var_6435: uint32, %var_6446: Tensor[(2145), uint8]) -> (Tensor[(990), float32], Tensor[(11, 10, 3), int16], uint32, Tensor[(2145), uint8], Tensor[(2145), uint8]) {
  %16 = @func_3690() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) */;
  %17 = cast(%var_6435, dtype="uint32") /* ty=uint32 */;
  %18 = reshape(%17, newshape=[]) /* ty=uint32 */;
  %19 = @func_1005(%18) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
  %20 = cast(%var_6446, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %21 = reshape(%20, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %22 = @func_2150(%21) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */;
  %23 = %16.3;
  %24 = %19.1;
  %25 = %22.1;
  (%23, %24, %var_6435, %25, %var_6446)
}

def @func_6208(%var_6206: Tensor[(90), uint32], %var_6207: Tensor[(165, 2), float32]) -> (Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(165, 2), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(165, 2), float64]) {
  %45 = fn (%var_6181: Tensor[(90), uint32], %var_6184: Tensor[(165, 2), float32]) -> (Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(165, 2), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(165, 2), float64]) {
    %26 = cast(%var_6181, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %27 = reshape(%26, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint32] */;
    %28 = @func_2301(%27) /* ty=(Tensor[(9, 5, 2), uint32],) */;
    %29 = @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */;
    %30 = %29.5;
    %31 = cast(%30, dtype="float32") /* ty=Tensor[(165, 2), float32] */;
    %32 = rsqrt(%31) /* ty=Tensor[(165, 2), float32] */;
    %33 = cast(%var_6184, dtype="bool") /* ty=Tensor[(165, 2), bool] */;
    %34 = shape_of(%32, dtype="int32") /* ty=Tensor[(2), int32] */;
    %35 = cast(%32, dtype="bool") /* ty=Tensor[(165, 2), bool] */;
    %36 = dyn.reshape(%33, %34, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %38 = reshape(%37, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
    %39 = @func_1239(%38) /* ty=(Tensor[(9, 12, 1), float64],) */;
    %40 = cast(%32, dtype="float64") /* ty=Tensor[(165, 2), float64] */;
    %41 = %28.0;
    %42 = greater(%35, %36) /* ty=Tensor[(165, 2), bool] */;
    %43 = %39.0;
    %44 = acos(%40) /* ty=Tensor[(165, 2), float64] */;
    (%41, %var_6181, %42, %43, meta[relay.Constant][3] /* ty=Tensor[(108), float64] */, %44)
  };
  %45(%var_6206, %var_6207) /* ty=(Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(165, 2), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(165, 2), float64]) */
}

def @func_6233() -> (Tensor[(8, 3, 10), float32], uint8) {
  %49 = fn () -> (Tensor[(8, 3, 10), float32], uint8) {
    %46 = @func_5852() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %47 = %46.0;
    %48 = @func_5694() /* ty=uint8 */;
    (%47, %48)
  };
  %49() /* ty=(Tensor[(8, 3, 10), float32], uint8) */
}

def @func_446(%var_430: Tensor[(16, 6, 5), float64]) -> Tensor[(16, 6, 5), float64] {
  %50 = cast(%var_430, dtype="float64") /* ty=Tensor[(16, 6, 5), float64] */;
  tan(%50) /* ty=Tensor[(16, 6, 5), float64] */
}

def @func_6991(%var_6978: uint32, %var_6979: Tensor[(1, 2145), uint8]) -> (Tensor[(2145), uint8], Tensor[(1, 2145), int8], Tensor[(9, 5, 2), float32]) {
  %51 = cast(%var_6978, dtype="uint32") /* ty=uint32 */;
  %52 = cast(%var_6979, dtype="uint8") /* ty=Tensor[(1, 2145), uint8] */;
  %53 = reshape(%51, newshape=[]) /* ty=uint32 */;
  %54 = reshape(%52, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %55 = @func_6450(%53, %54) /* ty=(Tensor[(990), float32], Tensor[(11, 10, 3), int16], uint32, Tensor[(2145), uint8], Tensor[(2145), uint8]) */;
  %56 = cast(%var_6978, dtype="int8") /* ty=int8 */;
  %57 = cast(%var_6979, dtype="int8") /* ty=Tensor[(1, 2145), int8] */;
  %58 = @func_6822() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) */;
  %59 = %58.2;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(9, 5, 2), float32] */;
  %61 = %55.3;
  %62 = add(%56, %57) /* ty=Tensor[(1, 2145), int8] */;
  %63 = sigmoid(%60) /* ty=Tensor[(9, 5, 2), float32] */;
  (%61, %62, %63)
}

def @func_1526(%var_1524: Tensor[(1, 10, 11), int32], %var_1525: Tensor[(9, 10, 11), int32]) -> (Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) {
  %71 = fn (%var_1498: Tensor[(1, 10, 11), int32], %var_1499: Tensor[(9, 10, 11), int32]) -> (Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) {
    %64 = cast(%var_1498, dtype="bool") /* ty=Tensor[(1, 10, 11), bool] */;
    %65 = cast(%var_1499, dtype="bool") /* ty=Tensor[(9, 10, 11), bool] */;
    %66 = cast(%var_1498, dtype="float32") /* ty=Tensor[(1, 10, 11), float32] */;
    %67 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %68 = equal(%64, %65) /* ty=Tensor[(9, 10, 11), bool] */;
    %69 = asin(%66) /* ty=Tensor[(1, 10, 11), float32] */;
    %70 = %67.0;
    (%68, %69, %70)
  };
  %71(%var_1524, %var_1525) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */
}

def @func_8335(%var_8328: Tensor[(8, 3, 10), float64]) -> (Tensor[(8, 3, 10), uint16],) {
  %72 = @func_6758() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], uint8) */;
  %73 = %72.1;
  %74 = cast(%var_8328, dtype="uint16") /* ty=Tensor[(8, 3, 10), uint16] */;
  %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
  %76 = cast(%73, dtype="uint16") /* ty=Tensor[(8, 3, 10), uint16] */;
  %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %78 = left_shift(%76, %77) /* ty=Tensor[(8, 3, 10), uint16] */;
  (%78,)
}

def @func_6292() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %79 = @func_5458() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %80 = @func_5911() /* ty=(Tensor[(990), float32], Tensor[(8, 3, 10), float32], Tensor[(2145), uint8]) */;
  %81 = %79.1;
  %82 = %80.1;
  (%81, %82)
}

def @func_7174() -> (uint8,) {
  %83 = @func_5694() /* ty=uint8 */;
  (%83,)
}

def @func_2256() -> Tensor[(8, 3, 10), float32] {
  %84 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %85 = %84.0;
  %86 = cast(%85, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  erf(%86) /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_5625(%var_5622: Tensor[(16, 16, 13), int32], %var_5623: Tensor[(16, 16, 13), int32], %var_5624: Tensor[(16, 16, 13), int32]) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), bool]) {
  %97 = fn (%var_5601: Tensor[(16, 16, 13), int32], %var_5602: Tensor[(16, 16, 13), int32], %var_5616: Tensor[(16, 16, 13), int32]) -> (Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), bool]) {
    %87 = cast(%var_5602, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
    %88 = shape_of(%var_5601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %89 = cast(%var_5601, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %91 = cast(%var_5616, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
    %92 = shape_of(%var_5601, dtype="int32") /* ty=Tensor[(3), int32] */;
    %93 = cast(%var_5601, dtype="bool") /* ty=Tensor[(16, 16, 13), bool] */;
    %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %95 = greater_equal(%89, %90) /* ty=Tensor[(16, 16, 13), bool] */;
    %96 = equal(%93, %94) /* ty=Tensor[(16, 16, 13), bool] */;
    (%95, %96)
  };
  %97(%var_5622, %var_5623, %var_5624) /* ty=(Tensor[(16, 16, 13), bool], Tensor[(16, 16, 13), bool]) */
}

def @func_4300(%var_4298: Tensor[(4, 1, 4), float32], %var_4299: Tensor[(4, 15, 4), float32]) -> Tensor[(4, 15, 4), float32] {
  %100 = fn (%var_4291: Tensor[(4, 1, 4), float32], %var_4292: Tensor[(4, 15, 4), float32]) -> Tensor[(4, 15, 4), float32] {
    %98 = cast(%var_4291, dtype="float32") /* ty=Tensor[(4, 1, 4), float32] */;
    %99 = cast(%var_4292, dtype="float32") /* ty=Tensor[(4, 15, 4), float32] */;
    divide(%98, %99) /* ty=Tensor[(4, 15, 4), float32] */
  };
  %100(%var_4298, %var_4299) /* ty=Tensor[(4, 15, 4), float32] */
}

def @func_2991() -> (uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float64]) {
  %101 = @func_2593() /* ty=(uint8,) */;
  %102 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %103 = %101.0;
  %104 = %102.0;
  %105 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  (%103, %104, %105)
}

def @func_4256() -> (Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) {
  %111 = fn () -> (Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) {
    %106 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(480, 1), float64] */, dtype="float64") /* ty=Tensor[(480, 1), float64] */;
    %108 = reshape(%107, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float64] */;
    %109 = %106.0;
    %110 = @func_446(%108) /* ty=Tensor[(16, 6, 5), float64] */;
    (%109, %110, meta[relay.Constant][4] /* ty=Tensor[(480, 1), float64] */)
  };
  %111() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */
}

def @func_1475() -> (Tensor[(8, 3, 10), float64],) {
  %114 = fn () -> (Tensor[(8, 3, 10), float64],) {
    %112 = cast(meta[relay.Constant][5] /* ty=Tensor[(8, 3, 10), float64] */, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %113 = cos(%112) /* ty=Tensor[(8, 3, 10), float64] */;
    (%113,)
  };
  %114() /* ty=(Tensor[(8, 3, 10), float64],) */
}

def @func_4942(%var_4929: Tensor[(110), int32]) -> (Tensor[(8, 3, 10), float64], Tensor[(1, 10, 11), float32], Tensor[(110), int32], Tensor[(990), int32], uint8, Tensor[(8, 3, 10), float64]) {
  %115 = cast(%var_4929, dtype="int32") /* ty=Tensor[(110), int32] */;
  %116 = cast(meta[relay.Constant][6] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %117 = reshape(%115, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %118 = reshape(%116, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %119 = @func_1523(%117, %118) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %120 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %121 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  %122 = %119.1;
  %123 = @func_3905() /* ty=uint8 */;
  %124 = %120.0;
  (%121, %122, %var_4929, meta[relay.Constant][6] /* ty=Tensor[(990), int32] */, %123, %124)
}

def @func_5954() -> Tensor[(8, 3, 10), float32] {
  @func_5952() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_1950(%var_1949: Tensor[(12, 13, 2), float32]) -> (Tensor[(12, 13, 2), float32], Tensor[(8, 3, 10), float64]) {
  %128 = fn (%var_1928: Tensor[(12, 13, 2), float32]) -> (Tensor[(12, 13, 2), float32], Tensor[(8, 3, 10), float64]) {
    %125 = cast(%var_1928, dtype="float32") /* ty=Tensor[(12, 13, 2), float32] */;
    %126 = rsqrt(%125) /* ty=Tensor[(12, 13, 2), float32] */;
    %127 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
    (%126, %127)
  };
  %128(%var_1949) /* ty=(Tensor[(12, 13, 2), float32], Tensor[(8, 3, 10), float64]) */
}

def @func_7282() -> Tensor[(8, 3, 10), float32] {
  %130 = fn () -> Tensor[(8, 3, 10), float32] {
    %129 = @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */;
    %129.0
  };
  %130() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_6362() -> (Tensor[(990), float64], uint16) {
  %140 = fn () -> (Tensor[(990), float64], uint16) {
    %131 = @func_5815() /* ty=(Tensor[(990), int32],) */;
    %132 = %131.0;
    %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(990), int32] */, dtype="float64") /* ty=Tensor[(990), float64] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(1), int32] */;
    %135 = cast(%132, dtype="float64") /* ty=Tensor[(990), float64] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?), float64] */;
    %137 = @func_5228() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(12, 2, 1), bool], uint16) */;
    %138 = mod(%135, %136) /* ty=Tensor[(990), float64] */;
    %139 = %137.2;
    (%138, %139)
  };
  %140() /* ty=(Tensor[(990), float64], uint16) */
}

def @func_2708() -> (Tensor[(8, 3, 10), float64],) {
  @func_2706() /* ty=(Tensor[(8, 3, 10), float64],) */
}

def @func_2063(%var_2044: uint8) -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint32], Tensor[(12, 2, 1), bool]) {
  %141 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %142 = cast(%var_2044, dtype="uint8") /* ty=uint8 */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(2145), uint8] */, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %144 = reshape(%142, newshape=[]) /* ty=uint8 */;
  %145 = reshape(%143, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %146 = @func_828(%144, %145) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %147 = cast(meta[relay.Constant][8] /* ty=Tensor[(2145), uint8] */, dtype="uint32") /* ty=Tensor[(2145), uint32] */;
  %148 = cast(%var_2044, dtype="uint32") /* ty=uint32 */;
  %149 = cast(%var_2044, dtype="uint16") /* ty=uint16 */;
  %150 = reshape(%149, newshape=[]) /* ty=uint16 */;
  %151 = %141.0;
  %152 = %146.1;
  %153 = multiply(%147, %148) /* ty=Tensor[(2145), uint32] */;
  %154 = @func_274(%150) /* ty=Tensor[(12, 2, 1), bool] */;
  (%151, %152, %153, %154)
}

def @func_2993() -> (uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float64]) {
  @func_2991() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float64]) */
}

def @func_1976() -> (Tensor[(8, 3, 10), float64],) {
  %156 = fn () -> (Tensor[(8, 3, 10), float64],) {
    %155 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
    (%155,)
  };
  %156() /* ty=(Tensor[(8, 3, 10), float64],) */
}

def @func_5379() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %160 = fn () -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
    %157 = @func_4255() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */;
    %158 = %157.0;
    %159 = @func_2723() /* ty=Tensor[(8, 3, 10), float32] */;
    (%158, %159)
  };
  %160() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */
}

def @func_5742() -> (Tensor[(8, 9, 1), bool],) {
  %166 = fn () -> (Tensor[(8, 9, 1), bool],) {
    %161 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
    %162 = %161.1;
    %163 = cast(%162, dtype="bool") /* ty=bool */;
    %164 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 9, 1), uint8] */, dtype="bool") /* ty=Tensor[(8, 9, 1), bool] */;
    %165 = not_equal(%163, %164) /* ty=Tensor[(8, 9, 1), bool] */;
    (%165,)
  };
  %166() /* ty=(Tensor[(8, 9, 1), bool],) */
}

def @func_6140(%var_6108: Tensor[(14, 10, 9), int64]) -> Tensor[(14, 10, 9), int64] {
  %167 = cast(%var_6108, dtype="int64") /* ty=Tensor[(14, 10, 9), int64] */;
  %168 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(14, 10, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(meta[relay.Constant][10] /* ty=Tensor[(14, 10, 9), int64] */, dtype="int64") /* ty=Tensor[(14, 10, 9), int64] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  logical_xor(%169, %170) /* ty=Tensor[(14, 10, 9), int64] */
}

def @func_4591() -> Tensor[(2145), uint8] {
  %171 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %171.3
}

def @func_6770() -> (Tensor[(16, 6, 5), float64],) {
  @func_6768() /* ty=(Tensor[(16, 6, 5), float64],) */
}

def @func_5251() -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %178 = fn () -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
    %172 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
    %173 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %174 = @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
    %175 = %172.0;
    %176 = %173.0;
    %177 = %174.1;
    (%175, %176, %177)
  };
  %178() /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */
}

def @func_6574(%var_6572: Tensor[(6, 8, 1), float64]) -> (Tensor[(1521), int32], Tensor[(6, 8, 840), bool], Tensor[(6, 8, ?), bool], Tensor[(2, 10, 7), bool], Tensor[(140), float32], Tensor[(14, 10, 9), int64], uint16, Tensor[(8, 3, 10), float32]) {
  @func_6571(%var_6572) /* ty=(Tensor[(1521), int32], Tensor[(6, 8, 840), bool], Tensor[(6, 8, ?), bool], Tensor[(2, 10, 7), bool], Tensor[(140), float32], Tensor[(14, 10, 9), int64], uint16, Tensor[(8, 3, 10), float32]) */
}

def @func_937(%var_934: Tensor[(8, 15, 11), bool], %var_935: Tensor[(8, 15, 11), bool], %var_936: Tensor[(8, 15, 11), bool]) -> (Tensor[(8, 15, 11), int8], Tensor[(8, 15, 11), float64]) {
  %194 = fn (%var_882: Tensor[(8, 15, 11), bool], %var_883: Tensor[(8, 15, 11), bool], %var_926: Tensor[(8, 15, 11), bool]) -> (Tensor[(8, 15, 11), int8], Tensor[(8, 15, 11), float64]) {
    %179 = cast(%var_883, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
    %180 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
    %181 = cast(%var_882, dtype="bool") /* ty=Tensor[(8, 15, 11), bool] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %183 = logical_and(%181, %182) /* ty=Tensor[(8, 15, 11), bool] */;
    %184 = cast(%183, dtype="int8") /* ty=Tensor[(8, 15, 11), int8] */;
    %185 = shape_of(%var_882, dtype="int32") /* ty=Tensor[(3), int32] */;
    %186 = cast(%var_882, dtype="int8") /* ty=Tensor[(8, 15, 11), int8] */;
    %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %188 = cast(%var_926, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %189 = shape_of(%var_883, dtype="int32") /* ty=Tensor[(3), int32] */;
    %190 = cast(%var_883, dtype="float64") /* ty=Tensor[(8, 15, 11), float64] */;
    %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %192 = maximum(%186, %187) /* ty=Tensor[(8, 15, 11), int8] */;
    %193 = floor_mod(%190, %191) /* ty=Tensor[(8, 15, 11), float64] */;
    (%192, %193)
  };
  %194(%var_934, %var_935, %var_936) /* ty=(Tensor[(8, 15, 11), int8], Tensor[(8, 15, 11), float64]) */
}

def @func_832(%var_830: uint8, %var_831: Tensor[(15, 11, 13), uint8]) -> (Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) {
  @func_828(%var_830, %var_831) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */
}

def @func_2725() -> Tensor[(8, 3, 10), float32] {
  @func_2723() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_1861() -> uint8 {
  %195 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %195.2
}

def @func_1863() -> uint8 {
  @func_1861() /* ty=uint8 */
}

def @func_6680() -> (Tensor[(8, 3, 10), float32], Tensor[(840, 1), bool], Tensor[(840), bool]) {
  @func_6678() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(840, 1), bool], Tensor[(840), bool]) */
}

def @func_3052() -> (Tensor[(8, 3, 10), float32],) {
  %196 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
  %199 = asinh(%198) /* ty=Tensor[(8, 3, 10), float32] */;
  (%199,)
}

def @func_4038(%var_4036: Tensor[(2, 9, 14), uint8]) -> Tensor[(2, 9, 14), bool] {
  @func_4035(%var_4036) /* ty=Tensor[(2, 9, 14), bool] */
}

def @func_6143(%var_6141: Tensor[(14, 10, 9), int64]) -> Tensor[(14, 10, 9), int64] {
  @func_6140(%var_6141) /* ty=Tensor[(14, 10, 9), int64] */
}

def @func_6571(%var_6505: Tensor[(6, 8, 1), float64]) -> (Tensor[(1521), int32], Tensor[(6, 8, 840), bool], Tensor[(6, 8, ?), bool], Tensor[(2, 10, 7), bool], Tensor[(140), float32], Tensor[(14, 10, 9), int64], uint16, Tensor[(8, 3, 10), float32]) {
  %200 = cast(%var_6505, dtype="float64") /* ty=Tensor[(6, 8, 1), float64] */;
  %201 = atanh(%200) /* ty=Tensor[(6, 8, 1), float64] */;
  %202 = cast(%var_6505, dtype="int8") /* ty=Tensor[(6, 8, 1), int8] */;
  %203 = shape_of(%201, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%201, dtype="int8") /* ty=Tensor[(6, 8, 1), int8] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %206 = multiply(%204, %205) /* ty=Tensor[(6, 8, ?), int8] */;
  %207 = cast(meta[relay.Constant][11] /* ty=Tensor[(1521), int32] */, dtype="int32") /* ty=Tensor[(1521), int32] */;
  %208 = reshape(%207, newshape=[9, 13, 13]) /* ty=Tensor[(9, 13, 13), int32] */;
  %209 = @func_2909(%208) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 12), bool], bool, Tensor[(840), bool], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8]) */;
  %210 = %209.5;
  %211 = cast(%206, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %212 = cast(%210, dtype="bool") /* ty=Tensor[(840), bool] */;
  %213 = cast(%206, dtype="float32") /* ty=Tensor[(6, 8, ?), float32] */;
  %214 = acos(%213) /* ty=Tensor[(6, 8, ?), float32] */;
  %215 = cast(%214, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %216 = shape_of(%206, dtype="int32") /* ty=Tensor[(3), int32] */;
  %217 = cast(%206, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %218 = dyn.reshape(%215, %216, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %219 = logical_or(%217, %218) /* ty=Tensor[(6, 8, ?), bool] */;
  %220 = cast(%219, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %221 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %222 = cast(%214, dtype="bool") /* ty=Tensor[(6, 8, ?), bool] */;
  %223 = dyn.reshape(%220, %221, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %224 = cast(meta[relay.Constant][12] /* ty=Tensor[(140), float32] */, dtype="float32") /* ty=Tensor[(140), float32] */;
  %225 = reshape(%224, newshape=[2, 10, 7]) /* ty=Tensor[(2, 10, 7), float32] */;
  %226 = @func_3468(%225) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */;
  %227 = cast(meta[relay.Constant][13] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %228 = reshape(%227, newshape=[]) /* ty=uint16 */;
  %229 = @func_6163(%228) /* ty=(Tensor[(8, 1, 16), uint16], Tensor[(14, 10, 9), int64], Tensor[(1260), int64]) */;
  %230 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %231 = not_equal(%211, %212) /* ty=Tensor[(6, 8, 840), bool] */;
  %232 = less_equal(%222, %223) /* ty=Tensor[(6, 8, ?), bool] */;
  %233 = %226.3;
  %234 = %229.1;
  %235 = %230.0;
  (meta[relay.Constant][11] /* ty=Tensor[(1521), int32] */, %231, %232, %233, meta[relay.Constant][12] /* ty=Tensor[(140), float32] */, %234, meta[relay.Constant][13] /* ty=uint16 */, %235)
}

def @func_8163(%var_8144: Tensor[(320), float32], %var_8154: Tensor[(90), uint32]) -> (Tensor[(8, 3, 10), float32], Tensor[(8, 4, 10), float32], Tensor[(40), float32], Tensor[(320), float32], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64]) {
  %236 = @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %237 = cast(meta[relay.Constant][14] /* ty=Tensor[(40), float32] */, dtype="float32") /* ty=Tensor[(40), float32] */;
  %238 = cast(%var_8144, dtype="float32") /* ty=Tensor[(320), float32] */;
  %239 = reshape(%237, newshape=[1, 4, 10]) /* ty=Tensor[(1, 4, 10), float32] */;
  %240 = reshape(%238, newshape=[8, 4, 10]) /* ty=Tensor[(8, 4, 10), float32] */;
  %241 = @func_3142(%239, %240) /* ty=(Tensor[(8, 4, 10), float32],) */;
  %242 = cast(%var_8154, dtype="uint32") /* ty=Tensor[(90), uint32] */;
  %243 = reshape(%242, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint32] */;
  %244 = @func_2301(%243) /* ty=(Tensor[(9, 5, 2), uint32],) */;
  %245 = @func_6822() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) */;
  %246 = %236.0;
  %247 = %241.0;
  %248 = %244.0;
  %249 = @func_2723() /* ty=Tensor[(8, 3, 10), float32] */;
  %250 = %245.1;
  (%246, %247, meta[relay.Constant][14] /* ty=Tensor[(40), float32] */, %var_8144, %248, %var_8154, %249, %250)
}

def @func_7520(%var_7491: Tensor[(8, 2, 13), float32], %var_7494: Tensor[(8, 2, 13), float32]) -> (Tensor[(8, 2, 13), bool], Tensor[(8, 2, 13), float64], Tensor[(8, 2, 13), uint8], Tensor[(8, 2, 13), float32]) {
  %251 = cast(%var_7491, dtype="float32") /* ty=Tensor[(8, 2, 13), float32] */;
  %252 = acos(%251) /* ty=Tensor[(8, 2, 13), float32] */;
  %253 = cast(%var_7494, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
  %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(3), int32] */;
  %255 = cast(%252, dtype="bool") /* ty=Tensor[(8, 2, 13), bool] */;
  %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %257 = cast(%var_7491, dtype="float64") /* ty=Tensor[(8, 2, 13), float64] */;
  %258 = cast(%252, dtype="uint8") /* ty=Tensor[(8, 2, 13), uint8] */;
  %259 = shape_of(%var_7491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %260 = cast(%var_7491, dtype="uint8") /* ty=Tensor[(8, 2, 13), uint8] */;
  %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %262 = cast(%252, dtype="float32") /* ty=Tensor[(8, 2, 13), float32] */;
  %263 = not_equal(%255, %256) /* ty=Tensor[(8, 2, 13), bool] */;
  %264 = exp(%257) /* ty=Tensor[(8, 2, 13), float64] */;
  %265 = logical_xor(%260, %261) /* ty=Tensor[(8, 2, 13), uint8] */;
  %266 = atanh(%262) /* ty=Tensor[(8, 2, 13), float32] */;
  (%263, %264, %265, %266)
}

def @func_8550() -> (Tensor[(8, 3, 10), float64],) {
  @func_8548() /* ty=(Tensor[(8, 3, 10), float64],) */
}

def @func_5405() -> (Tensor[(2145), uint8],) {
  %269 = fn () -> (Tensor[(2145), uint8],) {
    %267 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
    %268 = %267.1;
    (%268,)
  };
  %269() /* ty=(Tensor[(2145), uint8],) */
}

def @func_277(%var_275: uint16) -> Tensor[(12, 2, 1), bool] {
  @func_274(%var_275) /* ty=Tensor[(12, 2, 1), bool] */
}

def @func_8188() -> (uint8,) {
  %270 = @func_3905() /* ty=uint8 */;
  (%270,)
}

def @func_1597() -> Tensor[(8, 3, 10), float64] {
  %272 = fn () -> Tensor[(8, 3, 10), float64] {
    %271 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %271.0
  };
  %272() /* ty=Tensor[(8, 3, 10), float64] */
}

def @func_4717(%var_4699: Tensor[(10, 11, 16), bool], %var_4710: Tensor[(320), float32]) -> (Tensor[(10, 11, 16), bool], Tensor[(8, 4, 10), float32], Tensor[(10, 4), float32], Tensor[(320), float32]) {
  %273 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 11, 16), bool] */, dtype="bool") /* ty=Tensor[(10, 11, 16), bool] */;
  %274 = shape_of(%var_4699, dtype="int32") /* ty=Tensor[(3), int32] */;
  %275 = cast(%var_4699, dtype="bool") /* ty=Tensor[(10, 11, 16), bool] */;
  %276 = dyn.reshape(%273, %274, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %277 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 4), float32] */, dtype="float32") /* ty=Tensor[(10, 4), float32] */;
  %278 = cast(%var_4710, dtype="float32") /* ty=Tensor[(320), float32] */;
  %279 = reshape(%277, newshape=[1, 4, 10]) /* ty=Tensor[(1, 4, 10), float32] */;
  %280 = reshape(%278, newshape=[8, 4, 10]) /* ty=Tensor[(8, 4, 10), float32] */;
  %281 = @func_3142(%279, %280) /* ty=(Tensor[(8, 4, 10), float32],) */;
  %282 = logical_and(%275, %276) /* ty=Tensor[(10, 11, 16), bool] */;
  %283 = %281.0;
  (%282, %283, meta[relay.Constant][16] /* ty=Tensor[(10, 4), float32] */, %var_4710)
}

def @func_3643() -> (Tensor[(8, 3, 10), float64],) {
  %290 = fn () -> (Tensor[(8, 3, 10), float64],) {
    %284 = @func_2723() /* ty=Tensor[(8, 3, 10), float32] */;
    %285 = cast(meta[relay.Constant][17] /* ty=Tensor[(8, 3, 10), float32] */, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %286 = shape_of(%284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %287 = cast(%284, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %288 = dyn.reshape(%285, %286, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %289 = power(%287, %288) /* ty=Tensor[(8, 3, 10), float64] */;
    (%289,)
  };
  %290() /* ty=(Tensor[(8, 3, 10), float64],) */
}

def @func_6858() -> (Tensor[(16, 6, 5), float64],) {
  %293 = fn () -> (Tensor[(16, 6, 5), float64],) {
    %291 = @func_6768() /* ty=(Tensor[(16, 6, 5), float64],) */;
    %292 = %291.0;
    (%292,)
  };
  %293() /* ty=(Tensor[(16, 6, 5), float64],) */
}

def @func_6031(%var_6026: Tensor[(16, 11, 8), float64], %var_6027: Tensor[(16, 11, 8), float64]) -> (Tensor[(16, 11, 8), float64],) {
  %294 = cast(%var_6027, dtype="float64") /* ty=Tensor[(16, 11, 8), float64] */;
  %295 = shape_of(%var_6026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %296 = cast(%var_6026, dtype="float64") /* ty=Tensor[(16, 11, 8), float64] */;
  %297 = dyn.reshape(%294, %295, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %298 = divide(%296, %297) /* ty=Tensor[(16, 11, 8), float64] */;
  (%298,)
}

def @func_5952() -> Tensor[(8, 3, 10), float32] {
  %299 = @func_4786() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %299.0
}

def @func_5694() -> uint8 {
  %300 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %300.1
}

def @func_4884() -> (uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) {
  @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */
}

def @func_2594() -> (uint8,) {
  %302 = fn () -> (uint8,) {
    %301 = @func_2166() /* ty=uint8 */;
    (%301,)
  };
  %302() /* ty=(uint8,) */
}

def @func_5092() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  %303 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %304 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %305 = %303.0;
  %306 = %304.2;
  (%305, %306)
}

def @func_7060(%var_7059: Tensor[(2145), uint8]) -> (Tensor[(8, 3, 10), float32], Tensor[(312), float32], Tensor[(2145), uint8]) {
  %312 = fn (%var_7054: Tensor[(2145), uint8]) -> (Tensor[(8, 3, 10), float32], Tensor[(312), float32], Tensor[(2145), uint8]) {
    %307 = cast(%var_7054, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
    %308 = reshape(%307, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
    %309 = @func_2150(%308) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */;
    %310 = @func_6650() /* ty=Tensor[(8, 3, 10), float32] */;
    %311 = %309.3;
    (%310, %311, %var_7054)
  };
  %312(%var_7059) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(312), float32], Tensor[(2145), uint8]) */
}

def @func_2167() -> uint8 {
  %313 = fn () -> uint8 {
    @func_1861() /* ty=uint8 */
  };
  %313() /* ty=uint8 */
}

def @func_7346(%var_7344: Tensor[(7, 4, 10), float64], %var_7345: Tensor[(7, 4, 10), float64]) -> (Tensor[(7, 4, 10), float64], Tensor[(7, 4, 10), float64]) {
  %321 = fn (%var_7322: Tensor[(7, 4, 10), float64], %var_7323: Tensor[(7, 4, 10), float64]) -> (Tensor[(7, 4, 10), float64], Tensor[(7, 4, 10), float64]) {
    %314 = cast(%var_7323, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
    %315 = shape_of(%var_7322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %316 = cast(%var_7322, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
    %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %318 = cast(%var_7322, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
    %319 = floor_mod(%316, %317) /* ty=Tensor[(7, 4, 10), float64] */;
    %320 = tan(%318) /* ty=Tensor[(7, 4, 10), float64] */;
    (%319, %320)
  };
  %321(%var_7344, %var_7345) /* ty=(Tensor[(7, 4, 10), float64], Tensor[(7, 4, 10), float64]) */
}

def @func_8205(%var_8201: Tensor[(5, 16, 16), float32]) -> (Tensor[(5, 16, 16), float32],) {
  %322 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 16, 16), float32] */, dtype="float32") /* ty=Tensor[(1, 16, 16), float32] */;
  %323 = cast(%var_8201, dtype="float32") /* ty=Tensor[(5, 16, 16), float32] */;
  %324 = floor_divide(%322, %323) /* ty=Tensor[(5, 16, 16), float32] */;
  (%324,)
}

def @func_8666() -> (uint8, Tensor[(8, 3, 10), float64]) {
  %325 = @func_7174() /* ty=(uint8,) */;
  %326 = %325.0;
  %327 = @func_8475() /* ty=Tensor[(8, 3, 10), float64] */;
  (%326, %327)
}

def @func_6878() -> (Tensor[(8, 3, 10), float32],) {
  @func_6876() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_6163(%var_6153: uint16) -> (Tensor[(8, 1, 16), uint16], Tensor[(14, 10, 9), int64], Tensor[(1260), int64]) {
  %328 = cast(%var_6153, dtype="uint16") /* ty=uint16 */;
  %329 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 1, 16), uint16] */, dtype="uint16") /* ty=Tensor[(8, 1, 16), uint16] */;
  %330 = cast(meta[relay.Constant][20] /* ty=Tensor[(1260), int64] */, dtype="int64") /* ty=Tensor[(1260), int64] */;
  %331 = reshape(%330, newshape=[14, 10, 9]) /* ty=Tensor[(14, 10, 9), int64] */;
  %332 = multiply(%328, %329) /* ty=Tensor[(8, 1, 16), uint16] */;
  %333 = @func_6140(%331) /* ty=Tensor[(14, 10, 9), int64] */;
  (%332, %333, meta[relay.Constant][20] /* ty=Tensor[(1260), int64] */)
}

def @func_1645(%var_1643: bool, %var_1644: Tensor[(7, 10, 12), bool]) -> (Tensor[(7, 10, 12), bool],) {
  %337 = fn (%var_1614: bool, %var_1615: Tensor[(7, 10, 12), bool]) -> (Tensor[(7, 10, 12), bool],) {
    %334 = cast(%var_1614, dtype="bool") /* ty=bool */;
    %335 = cast(%var_1615, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
    %336 = logical_and(%334, %335) /* ty=Tensor[(7, 10, 12), bool] */;
    (%336,)
  };
  %337(%var_1643, %var_1644) /* ty=(Tensor[(7, 10, 12), bool],) */
}

def @func_6876() -> (Tensor[(8, 3, 10), float32],) {
  %338 = @func_5135() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %339 = %338.0;
  (%339,)
}

def @func_5666() -> (Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) {
  @func_5664() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) */
}

def @func_8225() -> (uint8,) {
  %341 = fn () -> (uint8,) {
    %340 = @func_5694() /* ty=uint8 */;
    (%340,)
  };
  %341() /* ty=(uint8,) */
}

def @func_7791(%var_7768: Tensor[(7, 14, 6), float32]) -> (Tensor[(7, 14, 6), float32],) {
  %342 = cast(%var_7768, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %343 = erf(%342) /* ty=Tensor[(7, 14, 6), float32] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %345 = shape_of(%var_7768, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_7768, dtype="float32") /* ty=Tensor[(7, 14, 6), float32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %348 = floor_mod(%346, %347) /* ty=Tensor[(7, 14, 6), float32] */;
  (%348,)
}

def @func_8548() -> (Tensor[(8, 3, 10), float64],) {
  %349 = @func_3642() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %350 = %349.0;
  (%350,)
}

def @func_7834() -> (Tensor[(12, 2, 1), bool],) {
  @func_7832() /* ty=(Tensor[(12, 2, 1), bool],) */
}

def @func_7098() -> (Tensor[(2145), uint8],) {
  @func_7096() /* ty=(Tensor[(2145), uint8],) */
}

def @func_3054() -> (Tensor[(8, 3, 10), float32],) {
  @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_3985() -> (Tensor[(8, 3, 10), float32],) {
  %355 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %351 = @func_2991() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float64]) */;
    %352 = %351.1;
    %353 = cast(%352, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
    %354 = log2(%353) /* ty=Tensor[(8, 3, 10), float32] */;
    (%354,)
  };
  %355() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_2504(%var_2502: Tensor[(2145), uint8]) -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(12, 2, 1), bool], uint16, Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(9, 12, 1), float64], Tensor[(108, 1), float64], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(8, 3, 10), float32]) {
  @func_2501(%var_2502) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(12, 2, 1), bool], uint16, Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(9, 12, 1), float64], Tensor[(108, 1), float64], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(8, 3, 10), float32]) */
}

def @func_7096() -> (Tensor[(2145), uint8],) {
  %356 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %357 = %356.3;
  %358 = cast(%357, dtype="float64") /* ty=Tensor[(2145), float64] */;
  %359 = erf(%358) /* ty=Tensor[(2145), float64] */;
  %360 = cast(%357, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(1), int32] */;
  %362 = cast(%359, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %364 = right_shift(%362, %363) /* ty=Tensor[(2145), uint8] */;
  (%364,)
}

def @func_3335() -> (Tensor[(8, 3, 10), float64], uint8) {
  %368 = fn () -> (Tensor[(8, 3, 10), float64], uint8) {
    %365 = @func_2706() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %366 = %365.0;
    %367 = @func_1861() /* ty=uint8 */;
    (%366, %367)
  };
  %368() /* ty=(Tensor[(8, 3, 10), float64], uint8) */
}

def @func_6500() -> (Tensor[(8, 3, 10), bool],) {
  %376 = fn () -> (Tensor[(8, 3, 10), bool],) {
    %369 = @func_6017() /* ty=(Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) */;
    %370 = %369.1;
    %371 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 3, 10), float32] */, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %372 = shape_of(%370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %373 = cast(%370, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %374 = dyn.reshape(%371, %372, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %375 = greater(%373, %374) /* ty=Tensor[(8, 3, 10), bool] */;
    (%375,)
  };
  %376() /* ty=(Tensor[(8, 3, 10), bool],) */
}

def @func_4787() -> (Tensor[(8, 3, 10), float32],) {
  %379 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %377 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %378 = %377.0;
    (%378,)
  };
  %379() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_449(%var_447: Tensor[(16, 6, 5), float64]) -> Tensor[(16, 6, 5), float64] {
  @func_446(%var_447) /* ty=Tensor[(16, 6, 5), float64] */
}

def @func_3146(%var_3144: Tensor[(1, 4, 10), float32], %var_3145: Tensor[(8, 4, 10), float32]) -> (Tensor[(8, 4, 10), float32],) {
  @func_3142(%var_3144, %var_3145) /* ty=(Tensor[(8, 4, 10), float32],) */
}

def @func_6768() -> (Tensor[(16, 6, 5), float64],) {
  %380 = @func_4255() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */;
  %381 = %380.1;
  (%381,)
}

def @func_3690() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) {
  %382 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %383 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %384 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %385 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %386 = %382.0;
  %387 = %383.0;
  %388 = %384.0;
  %389 = %385.0;
  (%386, %387, %388, %389)
}

def @func_5458() -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  %390 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %391 = @func_3984() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %392 = %390.0;
  %393 = %391.0;
  (%392, %393)
}

def @func_1575() -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) {
  %394 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %395 = cast(meta[relay.Constant][22] /* ty=uint8 */, dtype="uint8") /* ty=uint8 */;
  %396 = cast(meta[relay.Constant][23] /* ty=Tensor[(2145), uint8] */, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %397 = reshape(%395, newshape=[]) /* ty=uint8 */;
  %398 = reshape(%396, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %399 = @func_828(%397, %398) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %400 = %394.0;
  %401 = %399.1;
  (%400, %401, meta[relay.Constant][22] /* ty=uint8 */, meta[relay.Constant][23] /* ty=Tensor[(2145), uint8] */)
}

def @func_8451(%var_8450: Tensor[(240), float32]) -> (Tensor[(8, 9, 1), bool], Tensor[(8, 3, 10), int32], Tensor[(240), float32], Tensor[(2145), uint8], uint8) {
  %410 = fn (%var_8427: Tensor[(240), float32]) -> (Tensor[(8, 9, 1), bool], Tensor[(8, 3, 10), int32], Tensor[(240), float32], Tensor[(2145), uint8], uint8) {
    %402 = @func_5741() /* ty=(Tensor[(8, 9, 1), bool],) */;
    %403 = cast(%var_8427, dtype="float32") /* ty=Tensor[(240), float32] */;
    %404 = reshape(%403, newshape=[8, 3, 10]) /* ty=Tensor[(8, 3, 10), float32] */;
    %405 = @func_3177() /* ty=(uint8,) */;
    %406 = %402.0;
    %407 = @func_3793(%404) /* ty=Tensor[(8, 3, 10), int32] */;
    %408 = @func_4841() /* ty=Tensor[(2145), uint8] */;
    %409 = %405.0;
    (%406, %407, %var_8427, %408, %409)
  };
  %410(%var_8450) /* ty=(Tensor[(8, 9, 1), bool], Tensor[(8, 3, 10), int32], Tensor[(240), float32], Tensor[(2145), uint8], uint8) */
}

def @func_8611() -> (uint8,) {
  %413 = fn () -> (uint8,) {
    %411 = @func_3334() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
    %412 = %411.1;
    (%412,)
  };
  %413() /* ty=(uint8,) */
}

def @func_2783(%var_2781: Tensor[(8, 8, 10), float32], %var_2782: Tensor[(330), int16]) -> (Tensor[(8, 8, 10), float32], Tensor[(11, 10, 3), int16], Tensor[(330), int16]) {
  @func_2779(%var_2781, %var_2782) /* ty=(Tensor[(8, 8, 10), float32], Tensor[(11, 10, 3), int16], Tensor[(330), int16]) */
}

def @func_3692() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) {
  @func_3690() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) */
}

def @func_2803() -> (Tensor[(8, 3, 10), float64], uint8) {
  @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */
}

def @func_3274() -> (Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) {
  @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */
}

def @func_3907() -> uint8 {
  @func_3905() /* ty=uint8 */
}

def @func_6846() -> (Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64]) {
  %418 = fn () -> (Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64]) {
    %414 = @func_4814() /* ty=(uint8, Tensor[(12, 2, 1), bool]) */;
    %415 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
    %416 = %414.1;
    %417 = %415.1;
    (%416, %417)
  };
  %418() /* ty=(Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64]) */
}

def @func_5114(%var_5113: Tensor[(7, 2, 9), float32]) -> (Tensor[(7, 2, 9), float32],) {
  %423 = fn (%var_5098: Tensor[(7, 2, 9), float32]) -> (Tensor[(7, 2, 9), float32],) {
    %419 = cast(%var_5098, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
    %420 = rsqrt(%419) /* ty=Tensor[(7, 2, 9), float32] */;
    %421 = cast(%420, dtype="float32") /* ty=Tensor[(7, 2, 9), float32] */;
    %422 = sin(%421) /* ty=Tensor[(7, 2, 9), float32] */;
    (%422,)
  };
  %423(%var_5113) /* ty=(Tensor[(7, 2, 9), float32],) */
}

def @func_6035(%var_6033: Tensor[(16, 11, 8), float64], %var_6034: Tensor[(16, 11, 8), float64]) -> (Tensor[(16, 11, 8), float64],) {
  @func_6031(%var_6033, %var_6034) /* ty=(Tensor[(16, 11, 8), float64],) */
}

def @func_860(%var_858: Tensor[(11, 10, 3), int16], %var_859: Tensor[(11, 10, 3), int16]) -> (Tensor[(11, 10, 3), int16],) {
  %429 = fn (%var_845: Tensor[(11, 10, 3), int16], %var_846: Tensor[(11, 10, 3), int16]) -> (Tensor[(11, 10, 3), int16],) {
    %424 = cast(%var_846, dtype="int16") /* ty=Tensor[(11, 10, 3), int16] */;
    %425 = shape_of(%var_845, dtype="int32") /* ty=Tensor[(3), int32] */;
    %426 = cast(%var_845, dtype="int16") /* ty=Tensor[(11, 10, 3), int16] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %428 = add(%426, %427) /* ty=Tensor[(11, 10, 3), int16] */;
    (%428,)
  };
  %429(%var_858, %var_859) /* ty=(Tensor[(11, 10, 3), int16],) */
}

def @func_7176() -> (uint8,) {
  @func_7174() /* ty=(uint8,) */
}

def @func_5178() -> (Tensor[(2145), float32],) {
  %430 = @func_4841() /* ty=Tensor[(2145), uint8] */;
  %431 = cast(%430, dtype="float32") /* ty=Tensor[(2145), float32] */;
  %432 = acos(%431) /* ty=Tensor[(2145), float32] */;
  (%432,)
}

def @func_2066(%var_2064: uint8) -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint32], Tensor[(12, 2, 1), bool]) {
  @func_2063(%var_2064) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint32], Tensor[(12, 2, 1), bool]) */
}

def @func_2258() -> Tensor[(8, 3, 10), float32] {
  @func_2256() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_2912(%var_2910: Tensor[(9, 13, 13), int32]) -> (Tensor[(9, 13, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 12), bool], bool, Tensor[(840), bool], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8]) {
  @func_2909(%var_2910) /* ty=(Tensor[(9, 13, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 12), bool], bool, Tensor[(840), bool], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8]) */
}

def @func_2723() -> Tensor[(8, 3, 10), float32] {
  @func_2256() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_7997(%var_7996: float64) -> Tensor[(14, 5, 2), float64] {
  %435 = fn (%var_7978: float64) -> Tensor[(14, 5, 2), float64] {
    %433 = cast(%var_7978, dtype="float64") /* ty=float64 */;
    %434 = cast(meta[relay.Constant][24] /* ty=Tensor[(14, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
    floor_mod(%433, %434) /* ty=Tensor[(14, 5, 2), float64] */
  };
  %435(%var_7996) /* ty=Tensor[(14, 5, 2), float64] */
}

def @func_6651() -> Tensor[(8, 3, 10), float32] {
  %437 = fn () -> Tensor[(8, 3, 10), float32] {
    %436 = @func_6017() /* ty=(Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) */;
    %436.1
  };
  %437() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_7643(%var_7642: Tensor[(140), float32]) -> (Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], Tensor[(110), int32], Tensor[(140), float32], Tensor[(8, 3, 10), float32]) {
  %447 = fn (%var_7633: Tensor[(140), float32]) -> (Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], Tensor[(110), int32], Tensor[(140), float32], Tensor[(8, 3, 10), float32]) {
    %438 = @func_5404() /* ty=(Tensor[(2145), uint8],) */;
    %439 = cast(%var_7633, dtype="float32") /* ty=Tensor[(140), float32] */;
    %440 = reshape(%439, newshape=[2, 10, 7]) /* ty=Tensor[(2, 10, 7), float32] */;
    %441 = @func_3468(%440) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */;
    %442 = @func_6876() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %443 = @func_7281() /* ty=Tensor[(8, 3, 10), float32] */;
    %444 = %438.0;
    %445 = %441.5;
    %446 = %442.0;
    (%443, %444, %445, %var_7633, %446)
  };
  %447(%var_7642) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], Tensor[(110), int32], Tensor[(140), float32], Tensor[(8, 3, 10), float32]) */
}

def @func_6454(%var_6452: uint32, %var_6453: Tensor[(2145), uint8]) -> (Tensor[(990), float32], Tensor[(11, 10, 3), int16], uint32, Tensor[(2145), uint8], Tensor[(2145), uint8]) {
  @func_6450(%var_6452, %var_6453) /* ty=(Tensor[(990), float32], Tensor[(11, 10, 3), int16], uint32, Tensor[(2145), uint8], Tensor[(2145), uint8]) */
}

def @func_7221(%var_7208: Tensor[(12, 3, 12), float64]) -> Tensor[(12, 3, 12), float64] {
  %448 = cast(%var_7208, dtype="float64") /* ty=Tensor[(12, 3, 12), float64] */;
  log2(%448) /* ty=Tensor[(12, 3, 12), float64] */
}

def @func_3761() -> (Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) {
  @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */
}

def @func_5536() -> Tensor[(8, 3, 10), float64] {
  %450 = fn () -> Tensor[(8, 3, 10), float64] {
    %449 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
    %449.2
  };
  %450() /* ty=Tensor[(8, 3, 10), float64] */
}

def @func_2779(%var_2771: Tensor[(8, 8, 10), float32], %var_2777: Tensor[(330), int16]) -> (Tensor[(8, 8, 10), float32], Tensor[(11, 10, 3), int16], Tensor[(330), int16]) {
  %451 = cast(%var_2771, dtype="float32") /* ty=Tensor[(8, 8, 10), float32] */;
  %452 = cast(%var_2777, dtype="int16") /* ty=Tensor[(330), int16] */;
  %453 = cast(%var_2777, dtype="int16") /* ty=Tensor[(330), int16] */;
  %454 = reshape(%452, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %455 = reshape(%453, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %456 = @func_857(%454, %455) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %457 = acos(%451) /* ty=Tensor[(8, 8, 10), float32] */;
  %458 = %456.0;
  (%457, %458, %var_2777)
}

def @func_3566(%var_3565: Tensor[(5, 13, 3), float32]) -> (Tensor[(5, 13, 3), float32], Tensor[(8, 3, 10), float64]) {
  %463 = fn (%var_3554: Tensor[(5, 13, 3), float32]) -> (Tensor[(5, 13, 3), float32], Tensor[(8, 3, 10), float64]) {
    %459 = cast(%var_3554, dtype="float32") /* ty=Tensor[(5, 13, 3), float32] */;
    %460 = @func_2706() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %461 = erf(%459) /* ty=Tensor[(5, 13, 3), float32] */;
    %462 = %460.0;
    (%461, %462)
  };
  %463(%var_3565) /* ty=(Tensor[(5, 13, 3), float32], Tensor[(8, 3, 10), float64]) */
}

def @func_6968() -> Tensor[(8, 3, 10), float32] {
  @func_6966() /* ty=Tensor[(8, 3, 10), float32] */
}

def @func_5028() -> (uint8, uint16, Tensor[(110), int32], Tensor[(990), int32], Tensor[(330), int16]) {
  %464 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
  %465 = cast(meta[relay.Constant][25] /* ty=Tensor[(110), int32] */, dtype="int32") /* ty=Tensor[(110), int32] */;
  %466 = cast(meta[relay.Constant][26] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %467 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %468 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %469 = reshape(%465, newshape=[110]) /* ty=Tensor[(110), int32] */;
  %470 = reshape(%466, newshape=[990]) /* ty=Tensor[(990), int32] */;
  %471 = reshape(%467, newshape=[55, 6]) /* ty=Tensor[(55, 6), int16] */;
  %472 = reshape(%468, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %473 = @func_1760(%469, %470, %471, %472) /* ty=(Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) */;
  %474 = %464.0;
  %475 = %473.2;
  (%474, %475, meta[relay.Constant][25] /* ty=Tensor[(110), int32] */, meta[relay.Constant][26] /* ty=Tensor[(990), int32] */, meta[relay.Constant][27] /* ty=Tensor[(330), int16] */)
}

def @func_4513() -> (Tensor[(8, 3, 10), float32],) {
  %476 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  (%476,)
}

def @func_7524(%var_7522: Tensor[(8, 2, 13), float32], %var_7523: Tensor[(8, 2, 13), float32]) -> (Tensor[(8, 2, 13), bool], Tensor[(8, 2, 13), float64], Tensor[(8, 2, 13), uint8], Tensor[(8, 2, 13), float32]) {
  @func_7520(%var_7522, %var_7523) /* ty=(Tensor[(8, 2, 13), bool], Tensor[(8, 2, 13), float64], Tensor[(8, 2, 13), uint8], Tensor[(8, 2, 13), float32]) */
}

def @func_7578() -> (uint8,) {
  %477 = @func_3905() /* ty=uint8 */;
  (%477,)
}

def @func_5664() -> (Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) {
  %478 = @func_4255() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480, 1), float64]) */;
  %479 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  %480 = %478.2;
  (%479, %480)
}

def @func_2848() -> (uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) {
  %481 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %482 = cast(meta[relay.Constant][28] /* ty=Tensor[(110, 1), int32] */, dtype="int32") /* ty=Tensor[(110, 1), int32] */;
  %483 = cast(meta[relay.Constant][29] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %484 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %485 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), int16] */, dtype="int16") /* ty=Tensor[(330), int16] */;
  %486 = reshape(%482, newshape=[110]) /* ty=Tensor[(110), int32] */;
  %487 = reshape(%483, newshape=[990]) /* ty=Tensor[(990), int32] */;
  %488 = reshape(%484, newshape=[55, 6]) /* ty=Tensor[(55, 6), int16] */;
  %489 = reshape(%485, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %490 = @func_1760(%486, %487, %488, %489) /* ty=(Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) */;
  %491 = cast(meta[relay.Constant][30] /* ty=Tensor[(330), int16] */, dtype="uint8") /* ty=Tensor[(330), uint8] */;
  %492 = cast(meta[relay.Constant][28] /* ty=Tensor[(110, 1), int32] */, dtype="uint8") /* ty=Tensor[(110, 1), uint8] */;
  %493 = %490.0;
  %494 = cast(%493, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %495 = reshape(%494, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
  %496 = @func_2150(%495) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */;
  %497 = %481.1;
  %498 = maximum(%491, %492) /* ty=Tensor[(110, 330), uint8] */;
  %499 = %496.1;
  (%497, %493, meta[relay.Constant][29] /* ty=Tensor[(990), int32] */, %498, %499)
}

def @func_1911() -> Tensor[(8, 3, 10), float64] {
  %500 = fn () -> Tensor[(8, 3, 10), float64] {
    @func_1596() /* ty=Tensor[(8, 3, 10), float64] */
  };
  %500() /* ty=Tensor[(8, 3, 10), float64] */
}

def @func_7926() -> uint8 {
  @func_7924() /* ty=uint8 */
}

def @func_5563(%var_5561: Tensor[(10, 2, 15), uint8]) -> Tensor[(10, 2, 15), bool] {
  @func_5560(%var_5561) /* ty=Tensor[(10, 2, 15), bool] */
}

def @func_7459(%var_7435: Tensor[(108), float64], %var_7450: Tensor[(715, 3), float32]) -> (Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], uint32, Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(715, 3), int16], Tensor[(715, 3), uint64]) {
  %501 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %502 = cast(meta[relay.Constant][31] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %503 = cast(meta[relay.Constant][32] /* ty=Tensor[(715, 3), uint8] */, dtype="uint8") /* ty=Tensor[(715, 3), uint8] */;
  %504 = reshape(%502, newshape=[]) /* ty=uint32 */;
  %505 = reshape(%503, newshape=[1, 2145]) /* ty=Tensor[(1, 2145), uint8] */;
  %506 = @func_6991(%504, %505) /* ty=(Tensor[(2145), uint8], Tensor[(1, 2145), int8], Tensor[(9, 5, 2), float32]) */;
  %507 = cast(%var_7435, dtype="float64") /* ty=Tensor[(108), float64] */;
  %508 = reshape(%507, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %509 = @func_1239(%508) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %510 = cast(meta[relay.Constant][32] /* ty=Tensor[(715, 3), uint8] */, dtype="float32") /* ty=Tensor[(715, 3), float32] */;
  %511 = sin(%510) /* ty=Tensor[(715, 3), float32] */;
  %512 = cast(meta[relay.Constant][33] /* ty=Tensor[(715, 3), float32] */, dtype="int16") /* ty=Tensor[(715, 3), int16] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %514 = cast(%511, dtype="int16") /* ty=Tensor[(715, 3), int16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %516 = cast(%var_7450, dtype="int64") /* ty=Tensor[(715, 3), int64] */;
  %517 = shape_of(%511, dtype="int32") /* ty=Tensor[(2), int32] */;
  %518 = cast(%511, dtype="int64") /* ty=Tensor[(715, 3), int64] */;
  %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %520 = right_shift(%518, %519) /* ty=Tensor[(715, 3), int64] */;
  %521 = cast(%var_7450, dtype="uint64") /* ty=Tensor[(715, 3), uint64] */;
  %522 = shape_of(%520, dtype="int32") /* ty=Tensor[(2), int32] */;
  %523 = cast(%520, dtype="uint64") /* ty=Tensor[(715, 3), uint64] */;
  %524 = dyn.reshape(%521, %522, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %525 = %501.0;
  %526 = %506.0;
  %527 = %509.0;
  %528 = minimum(%514, %515) /* ty=Tensor[(715, 3), int16] */;
  %529 = subtract(%523, %524) /* ty=Tensor[(715, 3), uint64] */;
  (%525, %526, meta[relay.Constant][31] /* ty=uint32 */, %527, %var_7435, %528, %529)
}

def @func_4843() -> Tensor[(2145), uint8] {
  @func_4841() /* ty=Tensor[(2145), uint8] */
}

def @func_4945(%var_4943: Tensor[(110), int32]) -> (Tensor[(8, 3, 10), float64], Tensor[(1, 10, 11), float32], Tensor[(110), int32], Tensor[(990), int32], uint8, Tensor[(8, 3, 10), float64]) {
  @func_4942(%var_4943) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(1, 10, 11), float32], Tensor[(110), int32], Tensor[(990), int32], uint8, Tensor[(8, 3, 10), float64]) */
}

def @func_7314() -> (Tensor[(8, 3, 10), float32],) {
  %530 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %531 = %530.0;
  (%531,)
}

def @func_8294() -> (Tensor[(990), float32],) {
  %536 = fn () -> (Tensor[(990), float32],) {
    %532 = @func_3114() /* ty=(Tensor[(990), float32],) */;
    %533 = %532.0;
    %534 = cast(%533, dtype="float32") /* ty=Tensor[(990), float32] */;
    %535 = rsqrt(%534) /* ty=Tensor[(990), float32] */;
    (%535,)
  };
  %536() /* ty=(Tensor[(990), float32],) */
}

def @func_5912() -> (Tensor[(990), float32], Tensor[(8, 3, 10), float32], Tensor[(2145), uint8]) {
  %542 = fn () -> (Tensor[(990), float32], Tensor[(8, 3, 10), float32], Tensor[(2145), uint8]) {
    %537 = @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */;
    %538 = @func_3863() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %539 = %537.1;
    %540 = %538.0;
    %541 = @func_4591() /* ty=Tensor[(2145), uint8] */;
    (%539, %540, %541)
  };
  %542() /* ty=(Tensor[(990), float32], Tensor[(8, 3, 10), float32], Tensor[(2145), uint8]) */
}

def @func_1241(%var_1240: Tensor[(9, 12, 1), float64]) -> (Tensor[(9, 12, 1), float64],) {
  %545 = fn (%var_1233: Tensor[(9, 12, 1), float64]) -> (Tensor[(9, 12, 1), float64],) {
    %543 = cast(%var_1233, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
    %544 = tan(%543) /* ty=Tensor[(9, 12, 1), float64] */;
    (%544,)
  };
  %545(%var_1240) /* ty=(Tensor[(9, 12, 1), float64],) */
}

def @func_3540(%var_3539: Tensor[(108), float64]) -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) {
  %558 = fn (%var_3527: Tensor[(108), float64]) -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) {
    %546 = @func_3177() /* ty=(uint8,) */;
    %547 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %548 = cast(%var_3527, dtype="float64") /* ty=Tensor[(108), float64] */;
    %549 = reshape(%548, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
    %550 = @func_1239(%549) /* ty=(Tensor[(9, 12, 1), float64],) */;
    %551 = %546.0;
    %552 = cast(%551, dtype="uint32") /* ty=uint32 */;
    %553 = reshape(%552, newshape=[]) /* ty=uint32 */;
    %554 = @func_1005(%553) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
    %555 = %547.0;
    %556 = %550.0;
    %557 = %554.3;
    (%551, %555, %556, %var_3527, %557)
  };
  %558(%var_3539) /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) */
}

def @func_2850() -> (uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) {
  @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */
}

def @func_6759() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], uint8) {
  %565 = fn () -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], uint8) {
    %559 = @func_6292() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
    %560 = @func_5664() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) */;
    %561 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
    %562 = %559.0;
    %563 = %560.0;
    %564 = %561.0;
    (%562, %563, %564)
  };
  %565() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], uint8) */
}

def @func_5229() -> (Tensor[(8, 3, 10), float32], Tensor[(12, 2, 1), bool], uint16) {
  %571 = fn () -> (Tensor[(8, 3, 10), float32], Tensor[(12, 2, 1), bool], uint16) {
    %566 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %567 = cast(meta[relay.Constant][34] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %568 = reshape(%567, newshape=[]) /* ty=uint16 */;
    %569 = %566.0;
    %570 = @func_274(%568) /* ty=Tensor[(12, 2, 1), bool] */;
    (%569, %570, meta[relay.Constant][34] /* ty=uint16 */)
  };
  %571() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(12, 2, 1), bool], uint16) */
}

def @func_7140(%var_7138: Tensor[(11, 3, 15), int16]) -> (Tensor[(11, 3, 15), int16],) {
  @func_7137(%var_7138) /* ty=(Tensor[(11, 3, 15), int16],) */
}

def @func_6018() -> (Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) {
  %581 = fn () -> (Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) {
    %572 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
    %573 = %572.2;
    %574 = cast(meta[relay.Constant][35] /* ty=Tensor[(8, 3, 10), float32] */, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %576 = cast(%573, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %578 = @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %579 = greater_equal(%576, %577) /* ty=Tensor[(8, 3, 10), bool] */;
    %580 = %578.0;
    (%579, %580)
  };
  %581() /* ty=(Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32]) */
}

def @func_7794(%var_7792: Tensor[(7, 14, 6), float32]) -> (Tensor[(7, 14, 6), float32],) {
  @func_7791(%var_7792) /* ty=(Tensor[(7, 14, 6), float32],) */
}

def @func_8111() -> (Tensor[(8, 3, 10), float32],) {
  %583 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %582 = @func_6966() /* ty=Tensor[(8, 3, 10), float32] */;
    (%582,)
  };
  %583() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_6268(%var_6266: Tensor[(1, 140), float32]) -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(1, 140), float32]) {
  %584 = cast(%var_6266, dtype="float32") /* ty=Tensor[(1, 140), float32] */;
  %585 = reshape(%584, newshape=[2, 10, 7]) /* ty=Tensor[(2, 10, 7), float32] */;
  %586 = @func_3468(%585) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */;
  %587 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
  %588 = %586.2;
  (%587, %588, %var_6266)
}

def @func_5180() -> (Tensor[(2145), float32],) {
  @func_5178() /* ty=(Tensor[(2145), float32],) */
}

def @func_6995(%var_6993: uint32, %var_6994: Tensor[(1, 2145), uint8]) -> (Tensor[(2145), uint8], Tensor[(1, 2145), int8], Tensor[(9, 5, 2), float32]) {
  @func_6991(%var_6993, %var_6994) /* ty=(Tensor[(2145), uint8], Tensor[(1, 2145), int8], Tensor[(9, 5, 2), float32]) */
}

def @func_1810(%var_1809: Tensor[(8, 3, 10), float64]) -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  %598 = fn (%var_1798: Tensor[(8, 3, 10), float64]) -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
    %589 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %590 = %589.0;
    %591 = cast(%var_1798, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %592 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
    %593 = cast(%590, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %594 = dyn.reshape(%591, %592, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %595 = cast(%590, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
    %596 = floor_mod(%593, %594) /* ty=Tensor[(8, 3, 10), float64] */;
    %597 = log(%595) /* ty=Tensor[(8, 3, 10), float32] */;
    (%596, %597)
  };
  %598(%var_1809) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */
}

def @func_5816() -> (Tensor[(990), int32],) {
  %606 = fn () -> (Tensor[(990), int32],) {
    %599 = @func_3114() /* ty=(Tensor[(990), float32],) */;
    %600 = %599.0;
    %601 = cast(meta[relay.Constant][36] /* ty=Tensor[(990), float32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
    %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(1), int32] */;
    %603 = cast(%600, dtype="int32") /* ty=Tensor[(990), int32] */;
    %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?), int32] */;
    %605 = right_shift(%603, %604) /* ty=Tensor[(990), int32] */;
    (%605,)
  };
  %606() /* ty=(Tensor[(990), int32],) */
}

def @func_4157(%var_4156: Tensor[(840, 1), bool]) -> (Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) {
  %632 = fn (%var_4096: Tensor[(840, 1), bool]) -> (Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) {
    %607 = @func_3759() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) */;
    %608 = %607.3;
    %609 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %610 = cast(%608, dtype="bool") /* ty=bool */;
    %611 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %612 = @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %613 = cast(%608, dtype="bool") /* ty=bool */;
    %614 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %615 = reshape(%613, newshape=[]) /* ty=bool */;
    %616 = reshape(%614, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), bool] */;
    %617 = @func_1642(%615, %616) /* ty=(Tensor[(7, 10, 12), bool],) */;
    %618 = %617.0;
    %619 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%618, dtype="bool") /* ty=Tensor[(7, 10, 12), bool] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %623 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
    %624 = %623.0;
    %625 = cast(%624, dtype="bool") /* ty=bool */;
    %626 = cast(%var_4096, dtype="bool") /* ty=Tensor[(840, 1), bool] */;
    %627 = logical_and(%609, %610) /* ty=Tensor[(840, 1), bool] */;
    %628 = %611.0;
    %629 = %612.0;
    %630 = less(%621, %622) /* ty=Tensor[(7, 10, 12), bool] */;
    %631 = logical_or(%625, %626) /* ty=Tensor[(840, 1), bool] */;
    (%627, %628, %629, %630, %631)
  };
  %632(%var_4156) /* ty=(Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) */
}

def @func_2278() -> (Tensor[(8, 3, 10), float32],) {
  @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_8208(%var_8206: Tensor[(5, 16, 16), float32]) -> (Tensor[(5, 16, 16), float32],) {
  @func_8205(%var_8206) /* ty=(Tensor[(5, 16, 16), float32],) */
}

def @func_6678() -> (Tensor[(8, 3, 10), float32], Tensor[(840, 1), bool], Tensor[(840), bool]) {
  %633 = @func_4214() /* ty=(Tensor[(8, 3, 10), float32], uint8) */;
  %634 = cast(meta[relay.Constant][37] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %635 = reshape(%634, newshape=[840, 1]) /* ty=Tensor[(840, 1), bool] */;
  %636 = @func_4155(%635) /* ty=(Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) */;
  %637 = %633.0;
  %638 = %636.0;
  (%637, %638, meta[relay.Constant][37] /* ty=Tensor[(840), bool] */)
}

def @func_7580() -> (uint8,) {
  @func_7578() /* ty=(uint8,) */
}

def @func_5560(%var_5540: Tensor[(10, 2, 15), uint8]) -> Tensor[(10, 2, 15), bool] {
  %639 = cast(meta[relay.Constant][38] /* ty=Tensor[(10, 2, 1), uint8] */, dtype="bool") /* ty=Tensor[(10, 2, 1), bool] */;
  %640 = cast(%var_5540, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  equal(%639, %640) /* ty=Tensor[(10, 2, 15), bool] */
}

def @func_6823() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) {
  %650 = fn () -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) {
    %641 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
    %642 = cast(meta[relay.Constant][39] /* ty=Tensor[(90), uint32] */, dtype="uint32") /* ty=Tensor[(90), uint32] */;
    %643 = reshape(%642, newshape=[9, 5, 2]) /* ty=Tensor[(9, 5, 2), uint32] */;
    %644 = @func_2301(%643) /* ty=(Tensor[(9, 5, 2), uint32],) */;
    %645 = @func_4882() /* ty=(uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) */;
    %646 = @func_6650() /* ty=Tensor[(8, 3, 10), float32] */;
    %647 = %641.1;
    %648 = %644.0;
    %649 = %645.1;
    (%646, %647, %648, meta[relay.Constant][39] /* ty=Tensor[(90), uint32] */, %649)
  };
  %650() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(16, 6, 5), float64]) */
}

def @func_5853() -> (Tensor[(8, 3, 10), float32],) {
  %653 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %651 = @func_5250() /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
    %652 = %651.2;
    (%652,)
  };
  %653() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_8668() -> (uint8, Tensor[(8, 3, 10), float64]) {
  @func_8666() /* ty=(uint8, Tensor[(8, 3, 10), float64]) */
}

def @func_3864() -> (Tensor[(8, 3, 10), float32],) {
  %656 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %654 = @func_3690() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(990), float32]) */;
    %655 = %654.1;
    (%655,)
  };
  %656() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_7924() -> uint8 {
  %657 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %657.1
}

def @func_2909(%var_2870: Tensor[(9, 13, 13), int32]) -> (Tensor[(9, 13, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(7, 10, 12), bool], bool, Tensor[(840), bool], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8]) {
  %658 = cast(meta[relay.Constant][40] /* ty=Tensor[(9, 13, 1), int32] */, dtype="bool") /* ty=Tensor[(9, 13, 1), bool] */;
  %659 = cast(%var_2870, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %660 = cast(meta[relay.Constant][41] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %661 = reshape(%660, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %662 = @func_1239(%661) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %663 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %664 = cast(meta[relay.Constant][42] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %665 = reshape(%663, newshape=[]) /* ty=bool */;
  %666 = reshape(%664, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), bool] */;
  %667 = @func_1642(%665, %666) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %668 = cast(False /* ty=bool */, dtype="uint8") /* ty=uint8 */;
  %669 = cast(meta[relay.Constant][43] /* ty=Tensor[(2145), uint8] */, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %670 = reshape(%668, newshape=[]) /* ty=uint8 */;
  %671 = reshape(%669, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %672 = @func_828(%670, %671) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %673 = greater_equal(%658, %659) /* ty=Tensor[(9, 13, 13), bool] */;
  %674 = %662.0;
  %675 = %667.0;
  %676 = %672.1;
  (%673, %674, meta[relay.Constant][41] /* ty=Tensor[(108), float64] */, %675, False /* ty=bool */, meta[relay.Constant][42] /* ty=Tensor[(840), bool] */, %676, meta[relay.Constant][43] /* ty=Tensor[(2145), uint8] */)
}

def @func_2706() -> (Tensor[(8, 3, 10), float64],) {
  %677 = @func_1474() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %678 = %677.0;
  (%678,)
}

def @func_3468(%var_3402: Tensor[(2, 10, 7), float32]) -> (Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) {
  %679 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
  %680 = cast(%var_3402, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %681 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %682 = cast(%var_3402, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %683 = acosh(%682) /* ty=Tensor[(2, 10, 7), float32] */;
  %684 = cast(%683, dtype="float32") /* ty=Tensor[(2, 10, 7), float32] */;
  %685 = sin(%684) /* ty=Tensor[(2, 10, 7), float32] */;
  %686 = cast(%683, dtype="float64") /* ty=Tensor[(2, 10, 7), float64] */;
  %687 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %688 = cast(%685, dtype="float64") /* ty=Tensor[(2, 10, 7), float64] */;
  %689 = dyn.reshape(%686, %687, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %690 = floor_mod(%688, %689) /* ty=Tensor[(2, 10, 7), float64] */;
  %691 = cast(%683, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %692 = shape_of(%690, dtype="int32") /* ty=Tensor[(3), int32] */;
  %693 = cast(%690, dtype="bool") /* ty=Tensor[(2, 10, 7), bool] */;
  %694 = dyn.reshape(%691, %692, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %695 = cast(meta[relay.Constant][44] /* ty=Tensor[(110), int32] */, dtype="int32") /* ty=Tensor[(110), int32] */;
  %696 = cast(meta[relay.Constant][45] /* ty=Tensor[(990), int32] */, dtype="int32") /* ty=Tensor[(990), int32] */;
  %697 = reshape(%695, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %698 = reshape(%696, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %699 = @func_1523(%697, %698) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %700 = %679.1;
  %701 = acos(%680) /* ty=Tensor[(2, 10, 7), float32] */;
  %702 = %681.0;
  %703 = less(%693, %694) /* ty=Tensor[(2, 10, 7), bool] */;
  %704 = %699.2;
  (%700, %701, %702, %703, %704, meta[relay.Constant][44] /* ty=Tensor[(110), int32] */, meta[relay.Constant][45] /* ty=Tensor[(990), int32] */)
}

def @func_8476() -> Tensor[(8, 3, 10), float64] {
  %706 = fn () -> Tensor[(8, 3, 10), float64] {
    %705 = @func_5664() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(480, 1), float64]) */;
    %705.0
  };
  %706() /* ty=Tensor[(8, 3, 10), float64] */
}

def @func_2276() -> (Tensor[(8, 3, 10), float32],) {
  %707 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  (%707,)
}

def @func_7316() -> (Tensor[(8, 3, 10), float32],) {
  @func_7314() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_7404() -> Tensor[(2145), uint8] {
  %709 = fn () -> Tensor[(2145), uint8] {
    %708 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
    %708.1
  };
  %709() /* ty=Tensor[(2145), uint8] */
}

def @func_4593() -> Tensor[(2145), uint8] {
  @func_4591() /* ty=Tensor[(2145), uint8] */
}

def @func_5094() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */
}

def @func_4882() -> (uint8, Tensor[(16, 6, 5), float64], Tensor[(8, 3, 10), float64]) {
  %710 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %711 = @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */;
  %712 = @func_2663() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */;
  %713 = %710.1;
  %714 = %711.1;
  %715 = %712.1;
  (%713, %714, %715)
}

def @func_7137(%var_7133: Tensor[(11, 3, 15), int16]) -> (Tensor[(11, 3, 15), int16],) {
  %716 = cast(meta[relay.Constant][46] /* ty=Tensor[(1, 1, 1), int16] */, dtype="int16") /* ty=Tensor[(1, 1, 1), int16] */;
  %717 = cast(%var_7133, dtype="int16") /* ty=Tensor[(11, 3, 15), int16] */;
  %718 = subtract(%716, %717) /* ty=Tensor[(11, 3, 15), int16] */;
  (%718,)
}

def @func_5137() -> (Tensor[(8, 3, 10), float32],) {
  @func_5135() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_8678() -> (uint8,) {
  %721 = fn () -> (uint8,) {
    %719 = @func_8188() /* ty=(uint8,) */;
    %720 = %719.0;
    (%720,)
  };
  %721() /* ty=(uint8,) */
}

def @func_5030() -> (uint8, uint16, Tensor[(110), int32], Tensor[(990), int32], Tensor[(330), int16]) {
  @func_5028() /* ty=(uint8, uint16, Tensor[(110), int32], Tensor[(990), int32], Tensor[(330), int16]) */
}

def @func_3178() -> (uint8,) {
  %724 = fn () -> (uint8,) {
    %722 = @func_2593() /* ty=(uint8,) */;
    %723 = %722.0;
    (%723,)
  };
  %724() /* ty=(uint8,) */
}

def @func_4035(%var_4031: Tensor[(2, 9, 14), uint8]) -> Tensor[(2, 9, 14), bool] {
  %725 = cast(%var_4031, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %726 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(2, 9, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 9, 14), uint8] */, dtype="bool") /* ty=Tensor[(2, 9, 14), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%727, %728) /* ty=Tensor[(2, 9, 14), bool] */
}

def @func_4815() -> (uint8, Tensor[(12, 2, 1), bool]) {
  %733 = fn () -> (uint8, Tensor[(12, 2, 1), bool]) {
    %729 = @func_3905() /* ty=uint8 */;
    %730 = cast(%729, dtype="uint16") /* ty=uint16 */;
    %731 = reshape(%730, newshape=[]) /* ty=uint16 */;
    %732 = @func_274(%731) /* ty=Tensor[(12, 2, 1), bool] */;
    (%729, %732)
  };
  %733() /* ty=(uint8, Tensor[(12, 2, 1), bool]) */
}

def @func_4482(%var_4480: Tensor[(2145), uint8], %var_4481: Tensor[(8, 2, 15), uint8]) -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(16, 12, 9), uint32], uint32, uint8, Tensor[(840, 1), bool], Tensor[(840), bool], Tensor[(8, 2, 15), bool], Tensor[(165, 2), int16]) {
  %755 = fn (%var_4402: Tensor[(2145), uint8], %var_4462: Tensor[(8, 2, 15), uint8]) -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(16, 12, 9), uint32], uint32, uint8, Tensor[(840, 1), bool], Tensor[(840), bool], Tensor[(8, 2, 15), bool], Tensor[(165, 2), int16]) {
    %734 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %735 = cast(%var_4402, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
    %736 = reshape(%735, newshape=[2145]) /* ty=Tensor[(2145), uint8] */;
    %737 = @func_2501(%736) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(12, 2, 1), bool], uint16, Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(9, 12, 1), float64], Tensor[(108, 1), float64], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(8, 3, 10), float32]) */;
    %738 = cast(meta[relay.Constant][48] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %739 = reshape(%738, newshape=[]) /* ty=uint32 */;
    %740 = @func_1005(%739) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
    %741 = cast(meta[relay.Constant][49] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
    %742 = reshape(%741, newshape=[840, 1]) /* ty=Tensor[(840, 1), bool] */;
    %743 = @func_4155(%742) /* ty=(Tensor[(840, 1), bool], Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(7, 10, 12), bool], Tensor[(840, 1), bool]) */;
    %744 = @func_2166() /* ty=uint8 */;
    %745 = cast(%744, dtype="bool") /* ty=bool */;
    %746 = cast(%var_4462, dtype="bool") /* ty=Tensor[(8, 2, 15), bool] */;
    %747 = @func_3272() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) */;
    %748 = %734.0;
    %749 = %737.10;
    %750 = %740.0;
    %751 = @func_2166() /* ty=uint8 */;
    %752 = %743.0;
    %753 = greater(%745, %746) /* ty=Tensor[(8, 2, 15), bool] */;
    %754 = %747.5;
    (%748, %749, %var_4402, %750, meta[relay.Constant][48] /* ty=uint32 */, %751, %752, meta[relay.Constant][49] /* ty=Tensor[(840), bool] */, %753, %754)
  };
  %755(%var_4480, %var_4481) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(16, 12, 9), uint32], uint32, uint8, Tensor[(840, 1), bool], Tensor[(840), bool], Tensor[(8, 2, 15), bool], Tensor[(165, 2), int16]) */
}

def @func_4215() -> (Tensor[(8, 3, 10), float32], uint8) {
  %761 = fn () -> (Tensor[(8, 3, 10), float32], uint8) {
    %756 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
    %757 = cast(%756, dtype="float32") /* ty=Tensor[(8, 3, 10), float32] */;
    %758 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
    %759 = acosh(%757) /* ty=Tensor[(8, 3, 10), float32] */;
    %760 = %758.1;
    (%759, %760)
  };
  %761() /* ty=(Tensor[(8, 3, 10), float32], uint8) */
}

def @func_6294() -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) {
  @func_6292() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */
}

def @func_5460() -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  @func_5458() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */
}

def @func_3796(%var_3794: Tensor[(8, 3, 10), float32]) -> Tensor[(8, 3, 10), int32] {
  @func_3793(%var_3794) /* ty=Tensor[(8, 3, 10), int32] */
}

def @func_3471(%var_3469: Tensor[(2, 10, 7), float32]) -> (Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) {
  @func_3468(%var_3469) /* ty=(Tensor[(2145), uint8], Tensor[(2, 10, 7), float32], Tensor[(8, 3, 10), float32], Tensor[(2, 10, 7), bool], Tensor[(8, 3, 10), float64], Tensor[(110), int32], Tensor[(990), int32]) */
}

def @func_5591() -> (Tensor[(990), float32], Tensor[(9, 10, 11), bool], Tensor[(110), int32]) {
  %770 = fn () -> (Tensor[(990), float32], Tensor[(9, 10, 11), bool], Tensor[(110), int32]) {
    %762 = @func_3114() /* ty=(Tensor[(990), float32],) */;
    %763 = cast(meta[relay.Constant][50] /* ty=Tensor[(110), int32] */, dtype="int32") /* ty=Tensor[(110), int32] */;
    %764 = %762.0;
    %765 = cast(%764, dtype="int32") /* ty=Tensor[(990), int32] */;
    %766 = reshape(%763, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
    %767 = reshape(%765, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
    %768 = @func_1523(%766, %767) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
    %769 = %768.0;
    (%764, %769, meta[relay.Constant][50] /* ty=Tensor[(110), int32] */)
  };
  %770() /* ty=(Tensor[(990), float32], Tensor[(9, 10, 11), bool], Tensor[(110), int32]) */
}

def @func_274(%var_254: uint16) -> Tensor[(12, 2, 1), bool] {
  %771 = cast(%var_254, dtype="bool") /* ty=bool */;
  %772 = cast(meta[relay.Constant][51] /* ty=Tensor[(12, 2, 1), uint16] */, dtype="bool") /* ty=Tensor[(12, 2, 1), bool] */;
  less(%771, %772) /* ty=Tensor[(12, 2, 1), bool] */
}

def @func_4567() -> (Tensor[(8, 3, 10), float64],) {
  %774 = fn () -> (Tensor[(8, 3, 10), float64],) {
    %773 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
    (%773,)
  };
  %774() /* ty=(Tensor[(8, 3, 10), float64],) */
}

def @func_5135() -> (Tensor[(8, 3, 10), float32],) {
  %775 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %776 = %775.0;
  (%776,)
}

def @main(%var_8691: Tensor[(15, 1, 12), float64]) -> (Tensor[(15, 1, 12), float64],) {
  %777 = cast(%var_8691, dtype="float64") /* ty=Tensor[(15, 1, 12), float64] */;
  %778 = sqrt(%777) /* ty=Tensor[(15, 1, 12), float64] */;
  (%778,)
}

def @func_8527(%var_8525: Tensor[(126), float32], %var_8526: Tensor[(8, 3, 10), float64]) -> (Tensor[(126), float32], Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32], Tensor[(7, 2, 9), uint32]) {
  %796 = fn (%var_8491: Tensor[(126), float32], %var_8503: Tensor[(8, 3, 10), float64]) -> (Tensor[(126), float32], Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32], Tensor[(7, 2, 9), uint32]) {
    %779 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
    %780 = cast(%var_8503, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %781 = shape_of(%779, dtype="int32") /* ty=Tensor[(3), int32] */;
    %782 = cast(%779, dtype="bool") /* ty=Tensor[(8, 3, 10), bool] */;
    %783 = dyn.reshape(%780, %781, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %784 = @func_5250() /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
    %785 = cast(%var_8491, dtype="float32") /* ty=Tensor[(126), float32] */;
    %786 = reshape(%785, newshape=[7, 2, 9]) /* ty=Tensor[(7, 2, 9), float32] */;
    %787 = @func_5112(%786) /* ty=(Tensor[(7, 2, 9), float32],) */;
    %788 = %787.0;
    %789 = @func_4214() /* ty=(Tensor[(8, 3, 10), float32], uint8) */;
    %790 = %789.1;
    %791 = cast(%788, dtype="uint32") /* ty=Tensor[(7, 2, 9), uint32] */;
    %792 = cast(%790, dtype="uint32") /* ty=uint32 */;
    %793 = not_equal(%782, %783) /* ty=Tensor[(8, 3, 10), bool] */;
    %794 = %784.1;
    %795 = logical_xor(%791, %792) /* ty=Tensor[(7, 2, 9), uint32] */;
    (%var_8491, %793, %794, %795)
  };
  %796(%var_8525, %var_8526) /* ty=(Tensor[(126), float32], Tensor[(8, 3, 10), bool], Tensor[(8, 3, 10), float32], Tensor[(7, 2, 9), uint32]) */
}

def @func_8190() -> (uint8,) {
  @func_8188() /* ty=(uint8,) */
}

def @func_6431() -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(108), float64]) {
  %802 = fn () -> (uint8, Tensor[(8, 3, 10), float32], Tensor[(108), float64]) {
    %797 = cast(meta[relay.Constant][52] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %798 = reshape(%797, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %799 = @func_3538(%798) /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) */;
    %800 = @func_2166() /* ty=uint8 */;
    %801 = %799.1;
    (%800, %801, meta[relay.Constant][52] /* ty=Tensor[(108), float64] */)
  };
  %802() /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(108), float64]) */
}

def @func_7224(%var_7222: Tensor[(12, 3, 12), float64]) -> Tensor[(12, 3, 12), float64] {
  @func_7221(%var_7222) /* ty=Tensor[(12, 3, 12), float64] */
}

def @func_6297() -> (Tensor[(8, 3, 10), float32],) {
  %803 = @func_5092() /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float32]) */;
  %804 = %803.0;
  (%804,)
}

def @func_8167(%var_8165: Tensor[(320), float32], %var_8166: Tensor[(90), uint32]) -> (Tensor[(8, 3, 10), float32], Tensor[(8, 4, 10), float32], Tensor[(40), float32], Tensor[(320), float32], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64]) {
  @func_8163(%var_8165, %var_8166) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(8, 4, 10), float32], Tensor[(40), float32], Tensor[(320), float32], Tensor[(9, 5, 2), uint32], Tensor[(90), uint32], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64]) */
}

def @func_3272() -> (Tensor[(8, 3, 10), float32], Tensor[(16, 6, 5), float64], Tensor[(480), float64], uint8, Tensor[(11, 10, 3), int16], Tensor[(165, 2), int16]) {
  %805 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %806 = cast(meta[relay.Constant][53] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %807 = reshape(%806, newshape=[16, 6, 5]) /* ty=Tensor[(16, 6, 5), float64] */;
  %808 = cast(meta[relay.Constant][54] /* ty=Tensor[(165, 2), int16] */, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %809 = cast(meta[relay.Constant][54] /* ty=Tensor[(165, 2), int16] */, dtype="int16") /* ty=Tensor[(165, 2), int16] */;
  %810 = reshape(%808, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %811 = reshape(%809, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %812 = @func_857(%810, %811) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %813 = %805.0;
  %814 = @func_446(%807) /* ty=Tensor[(16, 6, 5), float64] */;
  %815 = @func_1861() /* ty=uint8 */;
  %816 = %812.0;
  (%813, %814, meta[relay.Constant][53] /* ty=Tensor[(480), float64] */, %815, %816, meta[relay.Constant][54] /* ty=Tensor[(165, 2), int16] */)
}

def @func_8338(%var_8336: Tensor[(8, 3, 10), float64]) -> (Tensor[(8, 3, 10), uint16],) {
  @func_8335(%var_8336) /* ty=(Tensor[(8, 3, 10), uint16],) */
}

def @func_1760(%var_1693: Tensor[(110), int32], %var_1694: Tensor[(990), int32], %var_1708: Tensor[(55, 6), int16], %var_1745: Tensor[(11, 10, 3), int16]) -> (Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) {
  %817 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %818 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %819 = reshape(%818, newshape=[]) /* ty=uint16 */;
  %820 = cast(%var_1693, dtype="int32") /* ty=Tensor[(110), int32] */;
  %821 = cast(%var_1694, dtype="int32") /* ty=Tensor[(990), int32] */;
  %822 = reshape(%820, newshape=[1, 10, 11]) /* ty=Tensor[(1, 10, 11), int32] */;
  %823 = reshape(%821, newshape=[9, 10, 11]) /* ty=Tensor[(9, 10, 11), int32] */;
  %824 = @func_1523(%822, %823) /* ty=(Tensor[(9, 10, 11), bool], Tensor[(1, 10, 11), float32], Tensor[(8, 3, 10), float64]) */;
  %825 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="bool") /* ty=bool */;
  %826 = cast(meta[relay.Constant][56] /* ty=Tensor[(840), bool] */, dtype="bool") /* ty=Tensor[(840), bool] */;
  %827 = reshape(%825, newshape=[]) /* ty=bool */;
  %828 = reshape(%826, newshape=[7, 10, 12]) /* ty=Tensor[(7, 10, 12), bool] */;
  %829 = @func_1642(%827, %828) /* ty=(Tensor[(7, 10, 12), bool],) */;
  %830 = cast(meta[relay.Constant][55] /* ty=uint16 */, dtype="uint8") /* ty=uint8 */;
  %831 = %817.3;
  %832 = cast(%831, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %833 = reshape(%830, newshape=[]) /* ty=uint8 */;
  %834 = reshape(%832, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %835 = @func_828(%833, %834) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %836 = cast(%var_1708, dtype="int16") /* ty=Tensor[(55, 6), int16] */;
  %837 = cast(%var_1708, dtype="int16") /* ty=Tensor[(55, 6), int16] */;
  %838 = reshape(%836, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %839 = reshape(%837, newshape=[11, 10, 3]) /* ty=Tensor[(11, 10, 3), int16] */;
  %840 = @func_857(%838, %839) /* ty=(Tensor[(11, 10, 3), int16],) */;
  %841 = %840.0;
  %842 = cast(%var_1745, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %843 = shape_of(%841, dtype="int32") /* ty=Tensor[(3), int32] */;
  %844 = cast(%841, dtype="float64") /* ty=Tensor[(11, 10, 3), float64] */;
  %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %846 = @func_274(%819) /* ty=Tensor[(12, 2, 1), bool] */;
  %847 = %824.0;
  %848 = %829.0;
  %849 = %835.0;
  %850 = power(%844, %845) /* ty=Tensor[(11, 10, 3), float64] */;
  (%831, %846, meta[relay.Constant][55] /* ty=uint16 */, %847, %var_1693, %var_1694, %var_1708, %848, meta[relay.Constant][56] /* ty=Tensor[(840), bool] */, %849, %850)
}

def @func_2303(%var_2302: Tensor[(9, 5, 2), uint32]) -> (Tensor[(9, 5, 2), uint32],) {
  %856 = fn (%var_2285: Tensor[(9, 5, 2), uint32]) -> (Tensor[(9, 5, 2), uint32],) {
    %851 = cast(meta[relay.Constant][57] /* ty=Tensor[(9, 5, 2), uint32] */, dtype="uint32") /* ty=Tensor[(9, 5, 2), uint32] */;
    %852 = shape_of(%var_2285, dtype="int32") /* ty=Tensor[(3), int32] */;
    %853 = cast(%var_2285, dtype="uint32") /* ty=Tensor[(9, 5, 2), uint32] */;
    %854 = dyn.reshape(%851, %852, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %855 = left_shift(%853, %854) /* ty=Tensor[(9, 5, 2), uint32] */;
    (%855,)
  };
  %856(%var_2302) /* ty=(Tensor[(9, 5, 2), uint32],) */
}

def @func_7832() -> (Tensor[(12, 2, 1), bool],) {
  %857 = @func_4814() /* ty=(uint8, Tensor[(12, 2, 1), bool]) */;
  %858 = %857.1;
  (%858,)
}

def @func_7463(%var_7461: Tensor[(108), float64], %var_7462: Tensor[(715, 3), float32]) -> (Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], uint32, Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(715, 3), int16], Tensor[(715, 3), uint64]) {
  @func_7459(%var_7461, %var_7462) /* ty=(Tensor[(8, 3, 10), float32], Tensor[(2145), uint8], uint32, Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(715, 3), int16], Tensor[(715, 3), uint64]) */
}

def @func_7881(%var_7869: Tensor[(990), int32]) -> (Tensor[(990), bool], Tensor[(108), float64], Tensor[(108), float64]) {
  %859 = @func_5815() /* ty=(Tensor[(990), int32],) */;
  %860 = %859.0;
  %861 = cast(%var_7869, dtype="bool") /* ty=Tensor[(990), bool] */;
  %862 = shape_of(%860, dtype="int32") /* ty=Tensor[(1), int32] */;
  %863 = cast(%860, dtype="bool") /* ty=Tensor[(990), bool] */;
  %864 = dyn.reshape(%861, %862, newshape=[]) /* ty=Tensor[(?), bool] */;
  %865 = cast(meta[relay.Constant][58] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %866 = reshape(%865, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %867 = @func_3538(%866) /* ty=(uint8, Tensor[(8, 3, 10), float32], Tensor[(9, 12, 1), float64], Tensor[(108), float64], Tensor[(12, 2, 1), bool]) */;
  %868 = not_equal(%863, %864) /* ty=Tensor[(990), bool] */;
  %869 = %867.3;
  (%868, %869, meta[relay.Constant][58] /* ty=Tensor[(108), float64] */)
}

def @func_4841() -> Tensor[(2145), uint8] {
  %870 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %870.3
}

def @func_6166(%var_6164: uint16) -> (Tensor[(8, 1, 16), uint16], Tensor[(14, 10, 9), int64], Tensor[(1260), int64]) {
  @func_6163(%var_6164) /* ty=(Tensor[(8, 1, 16), uint16], Tensor[(14, 10, 9), int64], Tensor[(1260), int64]) */
}

def @func_7697() -> (Tensor[(8, 3, 10), float32],) {
  %872 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %871 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
    (%871,)
  };
  %872() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_4515() -> (Tensor[(8, 3, 10), float32],) {
  @func_4513() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_2319() -> (Tensor[(8, 3, 10), float32],) {
  %875 = fn () -> (Tensor[(8, 3, 10), float32],) {
    %873 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %874 = %873.0;
    (%874,)
  };
  %875() /* ty=(Tensor[(8, 3, 10), float32],) */
}

def @func_3905() -> uint8 {
  %876 = @func_2801() /* ty=(Tensor[(8, 3, 10), float64], uint8) */;
  %876.1
}

def @func_2664() -> (uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
  %886 = fn () -> (uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) {
    %877 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
    %878 = %877.0;
    %879 = cast(%878, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %880 = cosh(%879) /* ty=Tensor[(8, 3, 10), float64] */;
    %881 = cast(%880, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
    %882 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
    %883 = @func_1861() /* ty=uint8 */;
    %884 = atanh(%881) /* ty=Tensor[(8, 3, 10), float64] */;
    %885 = %882.0;
    (%883, %884, %885)
  };
  %886() /* ty=(uint8, Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32]) */
}

def @func_6966() -> Tensor[(8, 3, 10), float32] {
  %887 = @func_5135() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %887.0
}

def @func_3793(%var_3784: Tensor[(8, 3, 10), float32]) -> Tensor[(8, 3, 10), int32] {
  %888 = @func_3052() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %889 = %888.0;
  %890 = cast(%var_3784, dtype="int32") /* ty=Tensor[(8, 3, 10), int32] */;
  %891 = shape_of(%889, dtype="int32") /* ty=Tensor[(3), int32] */;
  %892 = cast(%889, dtype="int32") /* ty=Tensor[(8, 3, 10), int32] */;
  %893 = dyn.reshape(%890, %891, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  right_shift(%892, %893) /* ty=Tensor[(8, 3, 10), int32] */
}

def @func_3759() -> (Tensor[(8, 3, 10), float32], Tensor[(990), float32], Tensor[(16, 12, 9), uint32], uint32) {
  %894 = @func_2318() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %895 = @func_3114() /* ty=(Tensor[(990), float32],) */;
  %896 = cast(meta[relay.Constant][59] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %897 = reshape(%896, newshape=[]) /* ty=uint32 */;
  %898 = @func_1005(%897) /* ty=(Tensor[(16, 12, 9), uint32], Tensor[(11, 10, 3), int16], Tensor[(330), int16], Tensor[(12, 2, 1), bool], Tensor[(16, 6, 5), float64], Tensor[(120, 4), float64]) */;
  %899 = %894.0;
  %900 = %895.0;
  %901 = %898.0;
  (%899, %900, %901, meta[relay.Constant][59] /* ty=uint32 */)
}

def @func_1577() -> (Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) {
  @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */
}

def @func_3142(%var_3133: Tensor[(1, 4, 10), float32], %var_3134: Tensor[(8, 4, 10), float32]) -> (Tensor[(8, 4, 10), float32],) {
  %902 = cast(%var_3133, dtype="float32") /* ty=Tensor[(1, 4, 10), float32] */;
  %903 = cast(%var_3134, dtype="float32") /* ty=Tensor[(8, 4, 10), float32] */;
  %904 = divide(%902, %903) /* ty=Tensor[(8, 4, 10), float32] */;
  (%904,)
}

def @func_3115() -> (Tensor[(990), float32],) {
  %909 = fn () -> (Tensor[(990), float32],) {
    %905 = @func_2848() /* ty=(uint8, Tensor[(2145), uint8], Tensor[(990), int32], Tensor[(110, 330), uint8], Tensor[(2145), uint8]) */;
    %906 = %905.2;
    %907 = cast(%906, dtype="float32") /* ty=Tensor[(990), float32] */;
    %908 = atan(%907) /* ty=Tensor[(990), float32] */;
    (%908,)
  };
  %909() /* ty=(Tensor[(990), float32],) */
}

def @func_4721(%var_4719: Tensor[(10, 11, 16), bool], %var_4720: Tensor[(320), float32]) -> (Tensor[(10, 11, 16), bool], Tensor[(8, 4, 10), float32], Tensor[(10, 4), float32], Tensor[(320), float32]) {
  @func_4717(%var_4719, %var_4720) /* ty=(Tensor[(10, 11, 16), bool], Tensor[(8, 4, 10), float32], Tensor[(10, 4), float32], Tensor[(320), float32]) */
}

def @func_2801() -> (Tensor[(8, 3, 10), float64], uint8) {
  %910 = @func_1975() /* ty=(Tensor[(8, 3, 10), float64],) */;
  %911 = @func_1575() /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], uint8, Tensor[(2145), uint8]) */;
  %912 = %910.0;
  %913 = %911.2;
  (%912, %913)
}

def @func_5696() -> uint8 {
  @func_5694() /* ty=uint8 */
}

def @func_1766(%var_1762: Tensor[(110), int32], %var_1763: Tensor[(990), int32], %var_1764: Tensor[(55, 6), int16], %var_1765: Tensor[(11, 10, 3), int16]) -> (Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) {
  @func_1760(%var_1762, %var_1763, %var_1764, %var_1765) /* ty=(Tensor[(2145), uint8], Tensor[(12, 2, 1), bool], uint16, Tensor[(9, 10, 11), bool], Tensor[(110), int32], Tensor[(990), int32], Tensor[(55, 6), int16], Tensor[(7, 10, 12), bool], Tensor[(840), bool], Tensor[(15, 11, 13), int16], Tensor[(11, 10, 3), float64]) */
}

def @func_2501(%var_2451: Tensor[(2145), uint8]) -> (Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(12, 2, 1), bool], uint16, Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(9, 12, 1), float64], Tensor[(108, 1), float64], Tensor[(8, 3, 10), float32], Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(9, 12, 1), float64], Tensor[(8, 3, 10), float32]) {
  %914 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %915 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  %916 = cast(%915, dtype="float64") /* ty=Tensor[(8, 3, 10), float64] */;
  %917 = cast(meta[relay.Constant][60] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %918 = reshape(%917, newshape=[]) /* ty=uint16 */;
  %919 = cast(meta[relay.Constant][60] /* ty=uint16 */, dtype="uint8") /* ty=uint8 */;
  %920 = cast(%var_2451, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %921 = reshape(%919, newshape=[]) /* ty=uint8 */;
  %922 = reshape(%920, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %923 = @func_828(%921, %922) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %924 = cast(meta[relay.Constant][61] /* ty=Tensor[(108, 1), float64] */, dtype="float64") /* ty=Tensor[(108, 1), float64] */;
  %925 = reshape(%924, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %926 = @func_1239(%925) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %927 = cast(meta[relay.Constant][60] /* ty=uint16 */, dtype="uint8") /* ty=uint8 */;
  %928 = cast(%var_2451, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
  %929 = reshape(%927, newshape=[]) /* ty=uint8 */;
  %930 = reshape(%928, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
  %931 = @func_828(%929, %930) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
  %932 = %926.0;
  %933 = cast(%932, dtype="float64") /* ty=Tensor[(9, 12, 1), float64] */;
  %934 = reshape(%933, newshape=[9, 12, 1]) /* ty=Tensor[(9, 12, 1), float64] */;
  %935 = @func_1239(%934) /* ty=(Tensor[(9, 12, 1), float64],) */;
  %936 = @func_2276() /* ty=(Tensor[(8, 3, 10), float32],) */;
  %937 = %914.0;
  %938 = sinh(%916) /* ty=Tensor[(8, 3, 10), float64] */;
  %939 = @func_274(%918) /* ty=Tensor[(12, 2, 1), bool] */;
  %940 = %923.1;
  %941 = @func_2256() /* ty=Tensor[(8, 3, 10), float32] */;
  %942 = @func_1910() /* ty=Tensor[(8, 3, 10), float64] */;
  %943 = %931.1;
  %944 = %935.0;
  %945 = %936.0;
  (%937, %938, %939, meta[relay.Constant][60] /* ty=uint16 */, %940, %var_2451, %932, meta[relay.Constant][61] /* ty=Tensor[(108, 1), float64] */, %941, %942, %943, %944, %945)
}

def @func_2152(%var_2151: Tensor[(2145), uint8]) -> (Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) {
  %965 = fn (%var_2102: Tensor[(2145), uint8]) -> (Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) {
    %946 = @func_1861() /* ty=uint8 */;
    %947 = cast(%946, dtype="uint8") /* ty=uint8 */;
    %948 = cast(%var_2102, dtype="uint8") /* ty=Tensor[(2145), uint8] */;
    %949 = reshape(%947, newshape=[]) /* ty=uint8 */;
    %950 = reshape(%948, newshape=[15, 11, 13]) /* ty=Tensor[(15, 11, 13), uint8] */;
    %951 = @func_828(%949, %950) /* ty=(Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) */;
    %952 = cast(meta[relay.Constant][62] /* ty=Tensor[(312), float32] */, dtype="float32") /* ty=Tensor[(312), float32] */;
    %953 = reshape(%952, newshape=[12, 13, 2]) /* ty=Tensor[(12, 13, 2), float32] */;
    %954 = @func_1948(%953) /* ty=(Tensor[(12, 13, 2), float32], Tensor[(8, 3, 10), float64]) */;
    %955 = cast(%946, dtype="uint8") /* ty=uint8 */;
    %956 = reshape(%955, newshape=[]) /* ty=uint8 */;
    %957 = @func_2063(%956) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(15, 11, 13), bool], Tensor[(2145), uint32], Tensor[(12, 2, 1), bool]) */;
    %958 = %957.3;
    %959 = cast(%958, dtype="uint8") /* ty=Tensor[(12, 2, 1), uint8] */;
    %960 = cast(%946, dtype="uint8") /* ty=uint8 */;
    %961 = %951.1;
    %962 = %954.0;
    %963 = minimum(%959, %960) /* ty=Tensor[(12, 2, 1), uint8] */;
    %964 = @func_1596() /* ty=Tensor[(8, 3, 10), float64] */;
    (%961, %var_2102, %962, meta[relay.Constant][62] /* ty=Tensor[(312), float32] */, %963, %964)
  };
  %965(%var_2151) /* ty=(Tensor[(15, 11, 13), bool], Tensor[(2145), uint8], Tensor[(12, 13, 2), float32], Tensor[(312), float32], Tensor[(12, 2, 1), uint8], Tensor[(8, 3, 10), float64]) */
}

def @func_828(%var_790: uint8, %var_791: Tensor[(15, 11, 13), uint8]) -> (Tensor[(15, 11, 13), int16], Tensor[(15, 11, 13), bool]) {
  %966 = cast(%var_791, dtype="float64") /* ty=Tensor[(15, 11, 13), float64] */;
  %967 = rsqrt(%966) /* ty=Tensor[(15, 11, 13), float64] */;
  %968 = cast(%var_790, dtype="bool") /* ty=bool */;
  %969 = cast(%var_791, dtype="bool") /* ty=Tensor[(15, 11, 13), bool] */;
  %970 = greater_equal(%968, %969) /* ty=Tensor[(15, 11, 13), bool] */;
  %971 = cast(%970, dtype="int16") /* ty=Tensor[(15, 11, 13), int16] */;
  %972 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %973 = cast(%967, dtype="int16") /* ty=Tensor[(15, 11, 13), int16] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %975 = cast(%970, dtype="bool") /* ty=Tensor[(15, 11, 13), bool] */;
  %976 = shape_of(%967, dtype="int32") /* ty=Tensor[(3), int32] */;
  %977 = cast(%967, dtype="bool") /* ty=Tensor[(15, 11, 13), bool] */;
  %978 = dyn.reshape(%975, %976, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %979 = minimum(%973, %974) /* ty=Tensor[(15, 11, 13), int16] */;
  %980 = logical_and(%977, %978) /* ty=Tensor[(15, 11, 13), bool] */;
  (%979, %980)
}

def @func_7884(%var_7882: Tensor[(990), int32]) -> (Tensor[(990), bool], Tensor[(108), float64], Tensor[(108), float64]) {
  @func_7881(%var_7882) /* ty=(Tensor[(990), bool], Tensor[(108), float64], Tensor[(108), float64]) */
}

def @func_6271(%var_6269: Tensor[(1, 140), float32]) -> (Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(1, 140), float32]) {
  @func_6268(%var_6269) /* ty=(Tensor[(8, 3, 10), float64], Tensor[(8, 3, 10), float32], Tensor[(1, 140), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen239/build/output.py:2903: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen239/build/output.py", line 2908, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(180) tvmgen_default_fused_sqrt_kernel0(double* __restrict__ T_sqrt, double* __restrict__ placeholder) {
  T_sqrt[(((int)threadIdx.x))] = sqrt(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

