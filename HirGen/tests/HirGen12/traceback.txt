==========mod==========
#[version = "0.0.5"]
def @func_2515() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %0 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %2 = acosh(%1) /* ty=Tensor[(4, 13, 3), float32] */;
  %3 = cast(%2, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %4 = asinh(%3) /* ty=Tensor[(4, 13, 3), float64] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %6 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %7 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %8 = erf(%5) /* ty=Tensor[(4, 13, 3), float64] */;
  (%6, %7, %8)
}

def @func_2601() -> (Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) {
  %9 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 176), float64] */, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %11 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 176), float64] */, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %12 = reshape(%10, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %13 = reshape(%11, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %14 = @func_470(%12, %13) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %15 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 176), float64] */, dtype="bool") /* ty=Tensor[(1, 176), bool] */;
  %16 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 176), float64] */, dtype="bool") /* ty=Tensor[(10, 176), bool] */;
  %17 = %9.0;
  %18 = %14.2;
  %19 = greater(%15, %16) /* ty=Tensor[(10, 176), bool] */;
  (%17, %18, %19)
}

def @func_4475() -> (Tensor[(4, 13, 3), bool],) {
  %20 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %21 = %20.0;
  (%21,)
}

def @func_4253() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %22 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %24 = reshape(%23, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %25 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %26 = @func_4086() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %27 = @func_4050() /* ty=Tensor[(4, 13, 3), bool] */;
  %28 = @func_3221(%24) /* ty=Tensor[(4, 13, 3), float64] */;
  %29 = %25.0;
  %30 = @func_1910() /* ty=Tensor[(4, 13, 3), float64] */;
  %31 = %26.0;
  (%22, %27, %28, %29, %30, %31)
}

def @func_1224(%var_1186: Tensor[(14, 6, 2), float32]) -> (Tensor[(14, 6, 2), float32], Tensor[(176), float64], Tensor[(1560), float64]) {
  %32 = cast(meta[relay.Constant][2] /* ty=Tensor[(14, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 2), float32] */;
  %33 = shape_of(%var_1186, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%var_1186, dtype="float32") /* ty=Tensor[(14, 6, 2), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %36 = cast(meta[relay.Constant][3] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %37 = reshape(%36, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float32] */;
  %38 = @func_553(%37) /* ty=(Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) */;
  %39 = cast(meta[relay.Constant][3] /* ty=Tensor[(1560), float32] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
  %40 = mod(%34, %35) /* ty=Tensor[(14, 6, 2), float32] */;
  %41 = %38.2;
  %42 = asin(%39) /* ty=Tensor[(1560), float64] */;
  (%40, %41, %42)
}

def @func_3303() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4686() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %43 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %46 = reshape(%45, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %47 = @func_3221(%46) /* ty=Tensor[(4, 13, 3), float64] */;
  (%44, %47)
}

def @func_2001() -> (Tensor[(4, 13, 3), float64],) {
  %48 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  (%48,)
}

def @func_5085() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %49 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %50 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %51 = %49.0;
  %52 = %50.0;
  (%51, %52)
}

def @main(%var_6771: Tensor[(13, 4, 11), uint8]) -> Tensor[(13, 4, 11), bool] {
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(13, 4, 1), uint8] */, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %54 = cast(%var_6771, dtype="bool") /* ty=Tensor[(13, 4, 11), bool] */;
  less_equal(%53, %54) /* ty=Tensor[(13, 4, 11), bool] */
}

def @func_2149(%var_2134: Tensor[(10, 1, 7), float32]) -> (Tensor[(10, 9, 7), float32],) {
  %55 = cast(%var_2134, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(10, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 7), float32] */;
  %57 = floor_mod(%55, %56) /* ty=Tensor[(10, 9, 7), float32] */;
  (%57,)
}

def @func_2750() -> (Tensor[(4, 13, 3), float64],) {
  %58 = @func_1955() /* ty=Tensor[(4, 13, 3), float64] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %60 = rsqrt(%59) /* ty=Tensor[(4, 13, 3), float64] */;
  (%60,)
}

def @func_5814() -> Tensor[(4, 13, 3), float64] {
  %61 = @func_4847() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %61.0
}

def @func_2009() -> (Tensor[(4, 13, 3), float64],) {
  %62 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  (%62,)
}

def @func_6583() -> (Tensor[(4, 13, 3), float64],) {
  %63 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  (%63,)
}

def @func_3221(%var_3200: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), float64] {
  %64 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %65 = %64.0;
  %66 = cast(%var_3200, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %70 = not_equal(%68, %69) /* ty=Tensor[(4, 13, 3), bool] */;
  %71 = cast(%70, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  sqrt(%71) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5593(%var_5584: Tensor[(4, 13, 3), bool]) -> (Tensor[(4, 13, 3), float32],) {
  %72 = @func_4050() /* ty=Tensor[(4, 13, 3), bool] */;
  %73 = cast(%var_5584, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %77 = power(%75, %76) /* ty=Tensor[(4, 13, 3), float32] */;
  (%77,)
}

def @func_2224(%var_2200: Tensor[(4, 13, 3), float64], %var_2206: Tensor[(1560, 1), float32], %var_2217: Tensor[(1092), float32]) -> (Tensor[(176), float64], Tensor[(1560, 1), float32], Tensor[(4, 13, 3), int16], Tensor[(4, 13, 3), float64], Tensor[(12, 13, 7), int64], Tensor[(1092), float32], Tensor[(4, 13, 3), float64]) {
  %78 = cast(%var_2206, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
  %79 = reshape(%78, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float32] */;
  %80 = @func_553(%79) /* ty=(Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) */;
  %81 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %82 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %83 = cast(%var_2217, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %84 = cast(%var_2217, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %85 = cast(%var_2217, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %86 = %80.2;
  %87 = cast(%86, dtype="float64") /* ty=Tensor[(176), float64] */;
  %88 = reshape(%83, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %89 = reshape(%84, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %90 = reshape(%85, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %91 = reshape(%87, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %92 = @func_1305(%88, %89, %90, %91) /* ty=(Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) */;
  %93 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %94 = %93.0;
  %95 = cast(%var_2200, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %96 = shape_of(%94, dtype="int32") /* ty=Tensor[(3), int32] */;
  %97 = cast(%94, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %98 = dyn.reshape(%95, %96, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %99 = logical_and(%97, %98) /* ty=Tensor[(4, 13, 3), bool] */;
  %100 = cast(%99, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %101 = %81.1;
  %102 = %82.0;
  %103 = %92.4;
  %104 = log2(%100) /* ty=Tensor[(4, 13, 3), float64] */;
  (%86, %var_2206, %101, %102, %103, %var_2217, %104)
}

def @func_3272(%var_3260: Tensor[(12, 7, 6), float32], %var_3261: Tensor[(12, 7, 6), float32]) -> Tensor[(12, 7, 6), float32] {
  %105 = cast(%var_3261, dtype="float32") /* ty=Tensor[(12, 7, 6), float32] */;
  %106 = shape_of(%var_3260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %107 = cast(%var_3260, dtype="float32") /* ty=Tensor[(12, 7, 6), float32] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%107, %108) /* ty=Tensor[(12, 7, 6), float32] */
}

def @func_6613() -> (Tensor[(4, 13, 3), float64],) {
  %109 = @func_3191() /* ty=Tensor[(4, 13, 3), float64] */;
  (%109,)
}

def @func_4830(%var_4828: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(176), float64]) {
  %110 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
  %111 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
  %112 = cast(%var_4828, dtype="float64") /* ty=Tensor[(176), float64] */;
  %113 = reshape(%112, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %114 = @func_4447(%113) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(36, 2), float64], Tensor[(176), float64]) */;
  %115 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %116 = %110.1;
  %117 = %111.1;
  %118 = %114.2;
  (%115, %116, %117, %118, %var_4828)
}

def @func_2690() -> Tensor[(4, 13, 3), float64] {
  %119 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %119.0
}

def @func_1305(%var_1239: Tensor[(12, 13, 7), float32], %var_1252: Tensor[(12, 13, 7), float32], %var_1270: Tensor[(12, 13, 7), float32], %var_1285: Tensor[(4, 44), float64]) -> (Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) {
  %120 = cast(%var_1239, dtype="float32") /* ty=Tensor[(12, 13, 7), float32] */;
  %121 = atanh(%120) /* ty=Tensor[(12, 13, 7), float32] */;
  %122 = cast(%var_1252, dtype="bool") /* ty=Tensor[(12, 13, 7), bool] */;
  %123 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%121, dtype="bool") /* ty=Tensor[(12, 13, 7), bool] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %126 = cast(meta[relay.Constant][6] /* ty=Tensor[(2352), float64] */, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %127 = reshape(%126, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float64] */;
  %128 = cast(%121, dtype="float64") /* ty=Tensor[(12, 13, 7), float64] */;
  %129 = shape_of(%var_1239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %130 = cast(%var_1239, dtype="float64") /* ty=Tensor[(12, 13, 7), float64] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %132 = maximum(%130, %131) /* ty=Tensor[(12, 13, 7), float64] */;
  %133 = cast(%var_1252, dtype="uint64") /* ty=Tensor[(12, 13, 7), uint64] */;
  %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
  %135 = cast(%132, dtype="uint64") /* ty=Tensor[(12, 13, 7), uint64] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %137 = cast(%var_1270, dtype="int64") /* ty=Tensor[(12, 13, 7), int64] */;
  %138 = shape_of(%var_1239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %139 = cast(%var_1239, dtype="int64") /* ty=Tensor[(12, 13, 7), int64] */;
  %140 = dyn.reshape(%137, %138, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %141 = cast(%var_1285, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %142 = cast(%var_1285, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %143 = reshape(%141, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %144 = reshape(%142, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %145 = @func_470(%143, %144) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %146 = %145.0;
  %147 = cast(%146, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %148 = less_equal(%124, %125) /* ty=Tensor[(12, 13, 7), bool] */;
  %149 = @func_687(%127) /* ty=Tensor[(14, 12, 14), float64] */;
  %150 = left_shift(%135, %136) /* ty=Tensor[(12, 13, 7), uint64] */;
  %151 = subtract(%139, %140) /* ty=Tensor[(12, 13, 7), int64] */;
  %152 = cosh(%147) /* ty=Tensor[(4, 4, 11), float64] */;
  (%148, %149, meta[relay.Constant][6] /* ty=Tensor[(2352), float64] */, %150, %151, %var_1285, %152)
}

def @func_5991() -> (Tensor[(3, 4, 13), uint8],) {
  %153 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
  %154 = %153.3;
  (%154,)
}

def @func_4447(%var_4434: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(36, 2), float64], Tensor[(176), float64]) {
  %155 = @func_2723() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %156 = cast(meta[relay.Constant][7] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
  %157 = cast(%var_4434, dtype="float64") /* ty=Tensor[(176), float64] */;
  %158 = reshape(%156, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
  %159 = reshape(%157, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %160 = @func_2665(%158, %159) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
  %161 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %162 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %163 = %155.0;
  %164 = %160.1;
  (%161, %162, %163, %164, meta[relay.Constant][7] /* ty=Tensor[(36, 2), float64] */, %var_4434)
}

def @func_5142() -> (Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) {
  %165 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
  %166 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 12, 4), float32] */, dtype="float64") /* ty=Tensor[(7, 12, 4), float64] */;
  %167 = rsqrt(%165) /* ty=Tensor[(7, 12, 4), float32] */;
  %168 = sigmoid(%166) /* ty=Tensor[(7, 12, 4), float64] */;
  (%167, %168)
}

def @func_2875(%var_2860: Tensor[(11, 12, 3), float64]) -> Tensor[(11, 12, 3), float64] {
  %169 = cast(%var_2860, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  sinh(%169) /* ty=Tensor[(11, 12, 3), float64] */
}

def @func_4910() -> (Tensor[(4, 13, 3), float64],) {
  %170 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %171 = %170.2;
  (%171,)
}

def @func_6762(%var_6747: Tensor[(1980), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(15, 12, 11), float64], float64, Tensor[(1980), float64], Tensor[(176), float64], Tensor[(72), float64], Tensor[(4, 44), float64]) {
  %172 = cast(-0.315888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %173 = cast(%var_6747, dtype="float64") /* ty=Tensor[(1980), float64] */;
  %174 = reshape(%172, newshape=[]) /* ty=float64 */;
  %175 = reshape(%173, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float64] */;
  %176 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 44), float64] */, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %178 = reshape(%176, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
  %179 = reshape(%177, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %180 = @func_2665(%178, %179) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
  %181 = @func_5557() /* ty=Tensor[(4, 13, 3), float64] */;
  %182 = @func_4723(%174, %175) /* ty=Tensor[(15, 12, 11), float64] */;
  %183 = %180.2;
  (%181, %182, -0.315888f64 /* ty=float64 */, %var_6747, %183, meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, meta[relay.Constant][10] /* ty=Tensor[(4, 44), float64] */)
}

def @func_5325() -> (Tensor[(4, 13, 3), float64],) {
  %184 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
  %185 = %184.0;
  (%185,)
}

def @func_5695(%var_5689: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), float32] {
  %186 = cast(meta[relay.Constant][11] /* ty=Tensor[(10, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %187 = shape_of(%var_5689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %188 = cast(%var_5689, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %189 = dyn.reshape(%186, %187, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%188, %189) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_6096(%var_6077: Tensor[(5, 15, 12), int32], %var_6078: Tensor[(5, 15, 12), int32]) -> (Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64]) {
  %190 = cast(%var_6078, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %191 = shape_of(%var_6077, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%var_6077, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %194 = cast(%var_6078, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %195 = atan(%194) /* ty=Tensor[(5, 15, 12), float64] */;
  %196 = cast(%195, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
  %197 = equal(%192, %193) /* ty=Tensor[(5, 15, 12), bool] */;
  %198 = acos(%196) /* ty=Tensor[(5, 15, 12), float64] */;
  (%197, %198)
}

def @func_1834() -> Tensor[(4, 13, 3), float64] {
  %199 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  %200 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %201 = shape_of(%199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%199, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%202, %203) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4050() -> Tensor[(4, 13, 3), bool] {
  %204 = @func_2389() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */;
  %204.0
}

def @func_5066() -> (Tensor[(4, 13, 3), float64],) {
  %205 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  (%205,)
}

def @func_1910() -> Tensor[(4, 13, 3), float64] {
  @func_1793() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_2723() -> (Tensor[(4, 13, 3), float64],) {
  %206 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %207 = %206.0;
  (%207,)
}

def @func_3138(%var_3126: Tensor[(10, 176), bool]) -> Tensor[(10, 176), bool] {
  %208 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %209 = %208.2;
  %210 = cast(%var_3126, dtype="bool") /* ty=Tensor[(10, 176), bool] */;
  %211 = shape_of(%209, dtype="int32") /* ty=Tensor[(2), int32] */;
  %212 = cast(%209, dtype="bool") /* ty=Tensor[(10, 176), bool] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%212, %213) /* ty=Tensor[(10, 176), bool] */
}

def @func_4285() -> (Tensor[(4, 13, 3), float64],) {
  %214 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %215 = %214.0;
  (%215,)
}

def @func_5432(%var_5426: Tensor[(11, 6, 13), float64]) -> Tensor[(11, 6, 13), float64] {
  %216 = cast(%var_5426, dtype="float64") /* ty=Tensor[(11, 6, 13), float64] */;
  log(%216) /* ty=Tensor[(11, 6, 13), float64] */
}

def @func_2534(%var_2518: Tensor[(3, 4, 13), int8], %var_2519: Tensor[(3, 4, 13), int8]) -> (Tensor[(3, 4, 13), int8],) {
  %217 = cast(%var_2519, dtype="int8") /* ty=Tensor[(3, 4, 13), int8] */;
  %218 = shape_of(%var_2518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %219 = cast(%var_2518, dtype="int8") /* ty=Tensor[(3, 4, 13), int8] */;
  %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %221 = bitwise_or(%219, %220) /* ty=Tensor[(3, 4, 13), int8] */;
  (%221,)
}

def @func_5800(%var_5743: Tensor[(6, 5, 7), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 5, 7), float64]) {
  %222 = @func_4847() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %223 = @func_5254() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %224 = %223.1;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %226 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %227 = shape_of(%var_5743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_5743, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %230 = add(%228, %229) /* ty=Tensor[(6, 5, 7), float64] */;
  %231 = cast(%230, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %232 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(6, 5, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %235 = %222.0;
  %236 = sinh(%225) /* ty=Tensor[(4, 13, 3), float64] */;
  %237 = subtract(%233, %234) /* ty=Tensor[(6, 5, 7), float64] */;
  (%235, %236, %237)
}

def @func_4075() -> Tensor[(4, 13, 3), float64] {
  @func_3191() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_1793() -> Tensor[(4, 13, 3), float64] {
  %238 = cast(meta[relay.Constant][14] /* ty=Tensor[(4, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  asin(%238) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_3029() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) {
  %239 = cast(meta[relay.Constant][16] /* ty=Tensor[(7, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 4), float64] */;
  %240 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(7, 5, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %241 = cast(meta[relay.Constant][15] /* ty=Tensor[(7, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 4), float64] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %243 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %244 = add(%241, %242) /* ty=Tensor[(7, 5, 4), float64] */;
  %245 = %243.0;
  (%244, %245)
}

def @func_5841(%var_5834: Tensor[(6, 7, 2), uint8]) -> Tensor[(6, 7, 2), bool] {
  %246 = cast(meta[relay.Constant][17] /* ty=Tensor[(6, 7, 2), uint8] */, dtype="bool") /* ty=Tensor[(6, 7, 2), bool] */;
  %247 = shape_of(%var_5834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_5834, dtype="bool") /* ty=Tensor[(6, 7, 2), bool] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%248, %249) /* ty=Tensor[(6, 7, 2), bool] */
}

def @func_4932() -> Tensor[(4, 13, 3), float64] {
  @func_4613() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4086() -> (Tensor[(4, 13, 3), float64],) {
  %250 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %251 = %250.1;
  %252 = cast(%251, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %253 = cosh(%252) /* ty=Tensor[(4, 13, 3), float64] */;
  (%253,)
}

def @func_687(%var_682: Tensor[(14, 12, 14), float64]) -> Tensor[(14, 12, 14), float64] {
  %254 = cast(%var_682, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
  sin(%254) /* ty=Tensor[(14, 12, 14), float64] */
}

def @func_6051(%var_6012: Tensor[(12, 2, 7), int64], %var_6013: Tensor[(12, 2, 7), int64]) -> (Tensor[(12, 2, 7), int64], Tensor[(12, 2, 7), float32]) {
  %255 = cast(%var_6013, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
  %256 = shape_of(%var_6012, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%var_6012, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %259 = cast(%var_6012, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
  %260 = bitwise_or(%257, %258) /* ty=Tensor[(12, 2, 7), int64] */;
  %261 = rsqrt(%259) /* ty=Tensor[(12, 2, 7), float32] */;
  (%260, %261)
}

def @func_3601() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4847() -> (Tensor[(4, 13, 3), float64],) {
  %262 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  (%262,)
}

def @func_6224(%var_6205: Tensor[(12, 9, 10), float32], %var_6215: Tensor[(72), float64], %var_6216: Tensor[(176), float64]) -> (Tensor[(12, 9, 10), float32], Tensor[(3, 24), float64], Tensor[(72), float64], Tensor[(176), float64]) {
  %263 = cast(%var_6205, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
  %264 = sinh(%263) /* ty=Tensor[(12, 9, 10), float32] */;
  %265 = cast(%264, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
  %266 = cast(%var_6215, dtype="float64") /* ty=Tensor[(72), float64] */;
  %267 = cast(%var_6216, dtype="float64") /* ty=Tensor[(176), float64] */;
  %268 = reshape(%266, newshape=[3, 24]) /* ty=Tensor[(3, 24), float64] */;
  %269 = reshape(%267, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %270 = @func_6174(%268, %269) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64], Tensor[(3, 24), float64], Tensor[(176), float64]) */;
  %271 = log10(%265) /* ty=Tensor[(12, 9, 10), float32] */;
  %272 = %270.3;
  (%271, %272, %var_6215, %var_6216)
}

def @func_3086(%var_3052: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), float64] {
  %273 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %274 = %273.0;
  %275 = cast(%var_3052, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %276 = shape_of(%274, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%274, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %279 = subtract(%277, %278) /* ty=Tensor[(4, 13, 3), float64] */;
  %280 = cast(%279, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  log10(%280) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_2646() -> (Tensor[(4, 13, 3), bool],) {
  %281 = @func_2389() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */;
  %282 = %281.0;
  (%282,)
}

def @func_6174(%var_6171: Tensor[(3, 24), float64], %var_6172: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64], Tensor[(3, 24), float64], Tensor[(176), float64]) {
  %283 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %284 = %283.0;
  %285 = cast(%284, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %286 = reshape(%285, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %287 = cast(%var_6171, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %288 = cast(%var_6172, dtype="float64") /* ty=Tensor[(176), float64] */;
  %289 = @func_3221(%286) /* ty=Tensor[(4, 13, 3), float64] */;
  %290 = cast(%289, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %291 = cast(%var_6171, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %292 = reshape(%287, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %293 = reshape(%288, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %294 = reshape(%290, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %295 = reshape(%291, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %296 = @func_3889(%292, %293, %294, %295) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(176), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float32], Tensor[(72), float32], Tensor[(4, 13, 3), float64], Tensor[(10, 176), bool], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64]) */;
  %297 = %296.9;
  (%284, %289, %297, %var_6171, %var_6172)
}

def @func_6371(%var_6337: Tensor[(10, 7, 8), float32]) -> (Tensor[(10, 7, 8), float32], Tensor[(4, 44), float64], Tensor[(1092), float32], Tensor[(176), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 900), int32], Tensor[(4, 13, 3), float64]) {
  %298 = cast(%var_6337, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %299 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %300 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %302 = cast(meta[relay.Constant][19] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %303 = reshape(%299, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %304 = reshape(%300, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %305 = reshape(%301, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %306 = reshape(%302, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %307 = @func_1305(%303, %304, %305, %306) /* ty=(Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) */;
  %308 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 900), int32] */, dtype="int32") /* ty=Tensor[(1, 900), int32] */;
  %309 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 900), int32] */, dtype="int32") /* ty=Tensor[(1, 900), int32] */;
  %310 = reshape(%308, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), int32] */;
  %311 = reshape(%309, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), int32] */;
  %312 = @func_6096(%310, %311) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64]) */;
  %313 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %314 = log10(%298) /* ty=Tensor[(10, 7, 8), float32] */;
  %315 = %307.5;
  %316 = %312.1;
  %317 = %313.0;
  (%314, %315, meta[relay.Constant][18] /* ty=Tensor[(1092), float32] */, meta[relay.Constant][19] /* ty=Tensor[(176), float64] */, %316, meta[relay.Constant][20] /* ty=Tensor[(1, 900), int32] */, %317)
}

def @func_5541() -> Tensor[(4, 13, 3), float64] {
  @func_3601() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4146(%var_4136: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), uint32] {
  %318 = @func_4075() /* ty=Tensor[(4, 13, 3), float64] */;
  %319 = cast(%var_4136, dtype="uint32") /* ty=Tensor[(4, 13, 3), uint32] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="uint32") /* ty=Tensor[(4, 13, 3), uint32] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  minimum(%321, %322) /* ty=Tensor[(4, 13, 3), uint32] */
}

def @func_277(%var_272: Tensor[(11, 13, 2), float64]) -> Tensor[(11, 13, 2), float64] {
  %323 = cast(%var_272, dtype="float64") /* ty=Tensor[(11, 13, 2), float64] */;
  atanh(%323) /* ty=Tensor[(11, 13, 2), float64] */
}

def @func_2964(%var_2959: Tensor[(4, 13, 3), float64]) -> (Tensor[(4, 13, 3), bool],) {
  %324 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %325 = %324.0;
  %326 = cast(%var_2959, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(3), int32] */;
  %328 = cast(%325, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %330 = less_equal(%328, %329) /* ty=Tensor[(4, 13, 3), bool] */;
  (%330,)
}

def @func_470(%var_459: Tensor[(4, 4, 11), float64], %var_460: Tensor[(4, 4, 11), float64]) -> (Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) {
  %331 = cast(%var_460, dtype="bool") /* ty=Tensor[(4, 4, 11), bool] */;
  %332 = shape_of(%var_459, dtype="int32") /* ty=Tensor[(3), int32] */;
  %333 = cast(%var_459, dtype="bool") /* ty=Tensor[(4, 4, 11), bool] */;
  %334 = dyn.reshape(%331, %332, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %335 = cast(meta[relay.Constant][21] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
  %336 = reshape(%335, newshape=[11, 13, 2]) /* ty=Tensor[(11, 13, 2), float64] */;
  %337 = not_equal(%333, %334) /* ty=Tensor[(4, 4, 11), bool] */;
  %338 = @func_277(%336) /* ty=Tensor[(11, 13, 2), float64] */;
  (%337, %338, meta[relay.Constant][21] /* ty=Tensor[(286), float64] */)
}

def @func_1138(%var_1120: Tensor[(7, 15, 10), float64], %var_1135: Tensor[(286), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) {
  %339 = cast(%var_1120, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %340 = cast(%var_1135, dtype="float64") /* ty=Tensor[(286), float64] */;
  %341 = reshape(%340, newshape=[11, 13, 2]) /* ty=Tensor[(11, 13, 2), float64] */;
  %342 = sin(%339) /* ty=Tensor[(7, 15, 10), float64] */;
  %343 = @func_277(%341) /* ty=Tensor[(11, 13, 2), float64] */;
  (%342, %343, %var_1135)
}

def @func_2665(%var_2652: Tensor[(3, 4, 6), float64], %var_2661: Tensor[(176), float64]) -> (Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) {
  %344 = cast(%var_2652, dtype="float64") /* ty=Tensor[(3, 4, 6), float64] */;
  %345 = cast(%var_2661, dtype="float64") /* ty=Tensor[(176), float64] */;
  %346 = cast(%var_2661, dtype="float64") /* ty=Tensor[(176), float64] */;
  %347 = reshape(%345, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %348 = reshape(%346, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %349 = @func_470(%347, %348) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %350 = log10(%344) /* ty=Tensor[(3, 4, 6), float64] */;
  %351 = %349.2;
  (%350, %351, %var_2661)
}

def @func_5924(%var_5877: Tensor[(7, 13, 16), int64], %var_5878: Tensor[(7, 13, 16), int64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(7, 13, 16), int16]) {
  %352 = @func_4285() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %353 = @func_3343() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %354 = cast(%var_5878, dtype="int64") /* ty=Tensor[(7, 13, 16), int64] */;
  %355 = shape_of(%var_5877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%var_5877, dtype="int64") /* ty=Tensor[(7, 13, 16), int64] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %358 = bitwise_xor(%356, %357) /* ty=Tensor[(7, 13, 16), int64] */;
  %359 = cast(%var_5877, dtype="int16") /* ty=Tensor[(7, 13, 16), int16] */;
  %360 = shape_of(%358, dtype="int32") /* ty=Tensor[(3), int32] */;
  %361 = cast(%358, dtype="int16") /* ty=Tensor[(7, 13, 16), int16] */;
  %362 = dyn.reshape(%359, %360, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %363 = %352.0;
  %364 = %353.1;
  %365 = maximum(%361, %362) /* ty=Tensor[(7, 13, 16), int16] */;
  (%363, %364, %365)
}

def @func_2318(%var_2292: Tensor[(4, 14, 12), float64]) -> Tensor[(4, 14, 12), float64] {
  %366 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %367 = shape_of(%var_2292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_2292, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%368, %369) /* ty=Tensor[(4, 14, 12), float64] */
}

def @func_2275() -> (Tensor[(4, 13, 3), float64],) {
  %370 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %371 = %370.0;
  (%371,)
}

def @func_6701(%var_6650: Tensor[(9, 15, 15), uint32], %var_6651: Tensor[(9, 15, 15), uint32], %var_6661: Tensor[(9, 15, 15), uint32], %var_6673: Tensor[(390, 3), float32]) -> (Tensor[(9, 15, 15), float32], Tensor[(10, 9, 13), float32], Tensor[(390, 3), float32], Tensor[(9, 15, 15), float64], Tensor[(7, 5, 4), float64]) {
  %372 = cast(%var_6661, dtype="float32") /* ty=Tensor[(9, 15, 15), float32] */;
  %373 = shape_of(%var_6651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_6651, dtype="float32") /* ty=Tensor[(9, 15, 15), float32] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %376 = cast(%var_6673, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %377 = reshape(%376, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %378 = cast(%var_6651, dtype="uint32") /* ty=Tensor[(9, 15, 15), uint32] */;
  %379 = shape_of(%var_6650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(9, 15, 15), uint32] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %382 = left_shift(%380, %381) /* ty=Tensor[(9, 15, 15), uint32] */;
  %383 = cast(%382, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %384 = rsqrt(%383) /* ty=Tensor[(9, 15, 15), float64] */;
  %385 = cast(%384, dtype="int64") /* ty=Tensor[(9, 15, 15), int64] */;
  %386 = shape_of(%var_6651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %387 = cast(%var_6651, dtype="int64") /* ty=Tensor[(9, 15, 15), int64] */;
  %388 = dyn.reshape(%385, %386, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %389 = bitwise_or(%387, %388) /* ty=Tensor[(9, 15, 15), int64] */;
  %390 = cast(%389, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %391 = @func_3417() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) */;
  %392 = floor_mod(%374, %375) /* ty=Tensor[(9, 15, 15), float32] */;
  %393 = @func_5695(%377) /* ty=Tensor[(10, 9, 13), float32] */;
  %394 = sigmoid(%390) /* ty=Tensor[(9, 15, 15), float64] */;
  %395 = %391.0;
  (%392, %393, %var_6673, %394, %395)
}

def @func_4613() -> Tensor[(4, 13, 3), float64] {
  @func_1955() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4539() -> (Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(1, 280), float32]) {
  %396 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %397 = @func_4175() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %398 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 280), float32] */, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %399 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 280), float32] */, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %400 = reshape(%398, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %401 = reshape(%399, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %402 = @func_2915(%400, %401) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */;
  %403 = %396.0;
  %404 = %397.0;
  %405 = %402.1;
  (%403, %404, %405, meta[relay.Constant][23] /* ty=Tensor[(1, 280), float32] */)
}

def @func_5862(%var_5846: uint16, %var_5847: Tensor[(8, 5, 4), uint16]) -> (Tensor[(8, 5, 4), bool],) {
  %406 = cast(%var_5846, dtype="bool") /* ty=bool */;
  %407 = cast(%var_5847, dtype="bool") /* ty=Tensor[(8, 5, 4), bool] */;
  %408 = equal(%406, %407) /* ty=Tensor[(8, 5, 4), bool] */;
  (%408,)
}

def @func_1955() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4926() -> (Tensor[(1, 15, 4), float32],) {
  %409 = cast(meta[relay.Constant][24] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %410 = acos(%409) /* ty=Tensor[(1, 15, 4), float32] */;
  (%410,)
}

def @func_3251() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) {
  %411 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %412 = %411.0;
  %413 = cast(%412, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %414 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  %415 = cast(%414, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %416 = reshape(%415, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %417 = @func_1969(%416) /* ty=(Tensor[(4, 13, 3), int16],) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="uint8") /* ty=Tensor[(4, 13, 3), uint8] */;
  %420 = tan(%413) /* ty=Tensor[(4, 13, 3), float64] */;
  %421 = cast(%420, dtype="uint8") /* ty=Tensor[(4, 13, 3), uint8] */;
  %422 = reshape(%419, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint8] */;
  %423 = reshape(%421, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint8] */;
  %424 = @func_3105(%422, %423) /* ty=(Tensor[(3, 4, 13), uint8],) */;
  %425 = %424.0;
  (%414, %420, %418, %425)
}

def @func_3889(%var_3781: Tensor[(72), float64], %var_3782: Tensor[(176), float64], %var_3841: Tensor[(4, 13, 3), float64], %var_3848: Tensor[(72), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(176), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float32], Tensor[(72), float32], Tensor[(4, 13, 3), float64], Tensor[(10, 176), bool], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64]) {
  %426 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %427 = cast(%var_3781, dtype="float64") /* ty=Tensor[(72), float64] */;
  %428 = cast(%var_3782, dtype="float64") /* ty=Tensor[(176), float64] */;
  %429 = reshape(%427, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
  %430 = reshape(%428, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %431 = @func_2665(%429, %430) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
  %432 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %433 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %434 = %433.0;
  %435 = cast(%var_3841, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %439 = cast(%var_3848, dtype="float32") /* ty=Tensor[(72), float32] */;
  %440 = shape_of(%var_3781, dtype="int32") /* ty=Tensor[(1), int32] */;
  %441 = cast(%var_3781, dtype="float32") /* ty=Tensor[(72), float32] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?), float32] */;
  %443 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %444 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %445 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %446 = %445.0;
  %447 = cast(%446, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %448 = cast(%var_3848, dtype="float64") /* ty=Tensor[(72), float64] */;
  %449 = cast(%var_3782, dtype="float64") /* ty=Tensor[(176), float64] */;
  %450 = reshape(%448, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
  %451 = reshape(%449, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %452 = @func_2665(%450, %451) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
  %453 = %426.0;
  %454 = %431.1;
  %455 = %432.0;
  %456 = floor_mod(%437, %438) /* ty=Tensor[(4, 13, 3), float32] */;
  %457 = power(%441, %442) /* ty=Tensor[(72), float32] */;
  %458 = %443.0;
  %459 = %444.2;
  %460 = cos(%447) /* ty=Tensor[(4, 13, 3), float64] */;
  %461 = %452.0;
  (%453, %454, %var_3782, %455, %456, %457, %458, %459, %460, %461)
}

def @func_3560() -> (Tensor[(7, 5, 4), float64],) {
  %462 = @func_3029() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) */;
  %463 = %462.0;
  (%463,)
}

def @func_5417(%var_5402: Tensor[(2, 15, 4), float64]) -> Tensor[(2, 15, 4), float64] {
  %464 = cast(%var_5402, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %465 = sigmoid(%464) /* ty=Tensor[(2, 15, 4), float64] */;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %467 = tan(%466) /* ty=Tensor[(2, 15, 4), float64] */;
  %468 = cast(%465, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%467, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%470, %471) /* ty=Tensor[(2, 15, 4), float64] */
}

def @func_4175() -> (Tensor[(4, 13, 3), float64],) {
  %472 = @func_3303() /* ty=Tensor[(4, 13, 3), float64] */;
  (%472,)
}

def @func_3958() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 12, 3), int8], Tensor[(216), int8], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %473 = cast(meta[relay.Constant][25] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
  %474 = cast(meta[relay.Constant][25] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
  %475 = reshape(%473, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %476 = reshape(%474, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
  %477 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %478 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %479 = @func_1910() /* ty=Tensor[(4, 13, 3), float64] */;
  %480 = @func_2339(%475, %476) /* ty=Tensor[(6, 12, 3), int8] */;
  %481 = %477.0;
  %482 = @func_1910() /* ty=Tensor[(4, 13, 3), float64] */;
  (%478, %479, %480, meta[relay.Constant][25] /* ty=Tensor[(216), int8] */, %481, %482)
}

def @func_3417() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) {
  %483 = @func_3029() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) */;
  %484 = @func_3343() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %485 = %483.0;
  %486 = %484.0;
  (%485, %486)
}

def @func_3496(%var_3481: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), uint16] {
  %487 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %488 = %487.0;
  %489 = cast(%var_3481, dtype="uint16") /* ty=Tensor[(4, 13, 3), uint16] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="uint16") /* ty=Tensor[(4, 13, 3), uint16] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%491, %492) /* ty=Tensor[(4, 13, 3), uint16] */
}

def @func_4770(%var_4761: Tensor[(5, 6, 10), float64]) -> (Tensor[(5, 6, 10), float64], Tensor[(4, 13, 3), float64]) {
  %493 = cast(%var_4761, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
  %494 = sigmoid(%493) /* ty=Tensor[(5, 6, 10), float64] */;
  %495 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  (%494, %495)
}

def @func_3460(%var_3438: Tensor[(280), float32]) -> (Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 13, 3), float32]) {
  %496 = cast(%var_3438, dtype="float32") /* ty=Tensor[(280), float32] */;
  %497 = cast(%var_3438, dtype="float32") /* ty=Tensor[(280), float32] */;
  %498 = reshape(%496, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %499 = reshape(%497, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %500 = @func_2915(%498, %499) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */;
  %501 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %502 = %501.0;
  %503 = cast(%502, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %504 = %500.1;
  %505 = exp(%503) /* ty=Tensor[(4, 13, 3), float32] */;
  (%504, %var_3438, %505)
}

def @func_5529(%var_5519: Tensor[(396), float64]) -> (Tensor[(4, 13, 3), float32], Tensor[(4, 13, 3), float64], Tensor[(11, 12, 3), float64], Tensor[(396), float32]) {
  %506 = @func_4686() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %507 = %506.0;
  %508 = cast(%507, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %509 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %510 = cast(%var_5519, dtype="float64") /* ty=Tensor[(396), float64] */;
  %511 = reshape(%510, newshape=[11, 12, 3]) /* ty=Tensor[(11, 12, 3), float64] */;
  %512 = cast(%var_5519, dtype="float32") /* ty=Tensor[(396), float32] */;
  %513 = sin(%508) /* ty=Tensor[(4, 13, 3), float32] */;
  %514 = %509.0;
  %515 = @func_2875(%511) /* ty=Tensor[(11, 12, 3), float64] */;
  %516 = cosh(%512) /* ty=Tensor[(396), float32] */;
  (%513, %514, %515, %516)
}

def @func_5254() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %517 = @func_3343() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %518 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %519 = %517.0;
  %520 = %518.0;
  (%519, %520)
}

def @func_4389() -> (Tensor[(4, 13, 3), float64], Tensor[(2352), float64], Tensor[(4, 13, 3), int64]) {
  %521 = cast(meta[relay.Constant][26] /* ty=Tensor[(2352), float64] */, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %522 = reshape(%521, newshape=[2352]) /* ty=Tensor[(2352), float64] */;
  %523 = @func_2853(%522) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(2352), uint8], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(14, 12, 14), float32]) */;
  %524 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %525 = cast(meta[relay.Constant][27] /* ty=Tensor[(4, 13, 3), float64] */, dtype="int64") /* ty=Tensor[(4, 13, 3), int64] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(3), int32] */;
  %527 = cast(%524, dtype="int64") /* ty=Tensor[(4, 13, 3), int64] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %529 = %523.0;
  %530 = logical_xor(%527, %528) /* ty=Tensor[(4, 13, 3), int64] */;
  (%529, meta[relay.Constant][26] /* ty=Tensor[(2352), float64] */, %530)
}

def @func_2853(%var_2828: Tensor[(2352), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(2352), uint8], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(14, 12, 14), float32]) {
  %531 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %532 = cast(meta[relay.Constant][28] /* ty=Tensor[(2352), float64] */, dtype="uint8") /* ty=Tensor[(2352), uint8] */;
  %533 = shape_of(%var_2828, dtype="int32") /* ty=Tensor[(1), int32] */;
  %534 = cast(%var_2828, dtype="uint8") /* ty=Tensor[(2352), uint8] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %536 = cast(meta[relay.Constant][29] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %537 = reshape(%536, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), float32] */;
  %538 = @func_2149(%537) /* ty=(Tensor[(10, 9, 7), float32],) */;
  %539 = cast(%var_2828, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %540 = reshape(%539, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float64] */;
  %541 = @func_687(%540) /* ty=Tensor[(14, 12, 14), float64] */;
  %542 = cast(%541, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %543 = %531.0;
  %544 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %545 = bitwise_xor(%534, %535) /* ty=Tensor[(2352), uint8] */;
  %546 = %538.0;
  %547 = atan(%542) /* ty=Tensor[(14, 12, 14), float32] */;
  (%543, %544, %545, %546, meta[relay.Constant][29] /* ty=Tensor[(70), float32] */, %547)
}

def @func_6332() -> (Tensor[(12, 2, 6), float32], Tensor[(7, 12, 4), float64]) {
  %548 = cast(meta[relay.Constant][30] /* ty=Tensor[(12, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 6), float32] */;
  %549 = @func_5142() /* ty=(Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) */;
  %550 = asin(%548) /* ty=Tensor[(12, 2, 6), float32] */;
  %551 = %549.1;
  (%550, %551)
}

def @func_5711() -> Tensor[(4, 13, 3), float64] {
  %552 = @func_4686() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %552.1
}

def @func_1969(%var_1963: Tensor[(4, 13, 3), float64]) -> (Tensor[(4, 13, 3), int16],) {
  %553 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  %554 = cast(%var_1963, dtype="int16") /* ty=Tensor[(4, 13, 3), int16] */;
  %555 = shape_of(%553, dtype="int32") /* ty=Tensor[(3), int32] */;
  %556 = cast(%553, dtype="int16") /* ty=Tensor[(4, 13, 3), int16] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %558 = left_shift(%556, %557) /* ty=Tensor[(4, 13, 3), int16] */;
  (%558,)
}

def @func_4003(%var_3985: Tensor[(10, 3, 6), float64]) -> (Tensor[(10, 3, 6), float64], Tensor[(10, 176), bool]) {
  %559 = cast(%var_3985, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %560 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %561 = sinh(%559) /* ty=Tensor[(10, 3, 6), float64] */;
  %562 = %560.2;
  (%561, %562)
}

def @func_4723(%var_4708: float64, %var_4709: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float64] {
  %563 = cast(%var_4708, dtype="float64") /* ty=float64 */;
  %564 = cast(%var_4709, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  floor_mod(%563, %564) /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_2915(%var_2906: Tensor[(8, 5, 7), float32], %var_2907: Tensor[(8, 5, 7), float32]) -> (Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) {
  %565 = cast(%var_2907, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %566 = shape_of(%var_2906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%var_2906, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %570 = subtract(%567, %568) /* ty=Tensor[(8, 5, 7), float32] */;
  %571 = %569.0;
  (%570, %571)
}

def @func_3191() -> Tensor[(4, 13, 3), float64] {
  %572 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %572.0
}

def @func_3343() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %573 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %574 = %573.0;
  %575 = @func_1955() /* ty=Tensor[(4, 13, 3), float64] */;
  (%574, %575)
}

def @func_5173(%var_5166: Tensor[(11, 3, 10), float64]) -> Tensor[(11, 3, 10), float64] {
  %576 = cast(%var_5166, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  atanh(%576) /* ty=Tensor[(11, 3, 10), float64] */
}

def @func_4197(%var_4178: Tensor[(14, 11, 11), float64], %var_4179: Tensor[(14, 11, 11), float64]) -> (Tensor[(14, 11, 11), int64], Tensor[(14, 11, 11), bool]) {
  %577 = cast(%var_4179, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %578 = shape_of(%var_4178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%var_4178, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %581 = mod(%579, %580) /* ty=Tensor[(14, 11, 11), float64] */;
  %582 = cast(%581, dtype="int64") /* ty=Tensor[(14, 11, 11), int64] */;
  %583 = shape_of(%var_4178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%var_4178, dtype="int64") /* ty=Tensor[(14, 11, 11), int64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %586 = cast(%var_4179, dtype="bool") /* ty=Tensor[(14, 11, 11), bool] */;
  %587 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %588 = cast(%581, dtype="bool") /* ty=Tensor[(14, 11, 11), bool] */;
  %589 = dyn.reshape(%586, %587, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %590 = add(%584, %585) /* ty=Tensor[(14, 11, 11), int64] */;
  %591 = logical_and(%588, %589) /* ty=Tensor[(14, 11, 11), bool] */;
  (%590, %591)
}

def @func_3734() -> (Tensor[(4, 13, 3), float64], Tensor[(176), float64], Tensor[(3, 4, 13), int8], Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 4, 11), int8], Tensor[(4, 4, 11), uint64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(4, 4, 11), float32], Tensor[(4, 13, 3), float64]) {
  %592 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="int8") /* ty=Tensor[(4, 13, 3), int8] */;
  %595 = cast(%593, dtype="int8") /* ty=Tensor[(4, 13, 3), int8] */;
  %596 = reshape(%594, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), int8] */;
  %597 = reshape(%595, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), int8] */;
  %598 = @func_2534(%596, %597) /* ty=(Tensor[(3, 4, 13), int8],) */;
  %599 = cast(meta[relay.Constant][32] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %600 = cast(meta[relay.Constant][32] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
  %601 = reshape(%599, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %602 = reshape(%600, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %603 = @func_2915(%601, %602) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */;
  %604 = cast(meta[relay.Constant][31] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %605 = cast(meta[relay.Constant][31] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %606 = reshape(%604, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %607 = reshape(%605, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %608 = @func_470(%606, %607) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %609 = %608.0;
  %610 = cast(%609, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
  %611 = sin(%610) /* ty=Tensor[(4, 4, 11), float32] */;
  %612 = cast(%611, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %613 = rsqrt(%612) /* ty=Tensor[(4, 4, 11), float64] */;
  %614 = cast(%611, dtype="uint16") /* ty=Tensor[(4, 4, 11), uint16] */;
  %615 = shape_of(%613, dtype="int32") /* ty=Tensor[(3), int32] */;
  %616 = cast(%613, dtype="uint16") /* ty=Tensor[(4, 4, 11), uint16] */;
  %617 = dyn.reshape(%614, %615, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %618 = minimum(%616, %617) /* ty=Tensor[(4, 4, 11), uint16] */;
  %619 = cast(%613, dtype="int8") /* ty=Tensor[(4, 4, 11), int8] */;
  %620 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %621 = cast(%618, dtype="int8") /* ty=Tensor[(4, 4, 11), int8] */;
  %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %623 = cast(meta[relay.Constant][33] /* ty=Tensor[(4, 4, 11), float32] */, dtype="uint64") /* ty=Tensor[(4, 4, 11), uint64] */;
  %624 = shape_of(%611, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%611, dtype="uint64") /* ty=Tensor[(4, 4, 11), uint64] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %627 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %628 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %629 = cast(meta[relay.Constant][34] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %630 = reshape(%629, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), float32] */;
  %631 = @func_2149(%630) /* ty=(Tensor[(10, 9, 7), float32],) */;
  %632 = cast(%611, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
  %633 = %598.0;
  %634 = %603.1;
  %635 = add(%621, %622) /* ty=Tensor[(4, 4, 11), int8] */;
  %636 = right_shift(%625, %626) /* ty=Tensor[(4, 4, 11), uint64] */;
  %637 = %627.0;
  %638 = %628.0;
  %639 = %631.0;
  %640 = sigmoid(%632) /* ty=Tensor[(4, 4, 11), float32] */;
  %641 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  (%593, meta[relay.Constant][31] /* ty=Tensor[(176), float64] */, %633, %634, meta[relay.Constant][32] /* ty=Tensor[(280), float32] */, %635, %636, %637, %638, %639, meta[relay.Constant][34] /* ty=Tensor[(70), float32] */, %640, %641)
}

def @func_3975(%var_3972: Tensor[(6, 1, 14), float64]) -> (Tensor[(6, 1, 14), float64],) {
  %642 = cast(%var_3972, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %643 = asin(%642) /* ty=Tensor[(6, 1, 14), float64] */;
  (%643,)
}

def @func_4564() -> (Tensor[(4, 13, 3), float64],) {
  %644 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %645 = %644.2;
  (%645,)
}

def @func_2035() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5641() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), bool]) {
  %646 = @func_4475() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %647 = @func_2389() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */;
  %648 = @func_5557() /* ty=Tensor[(4, 13, 3), float64] */;
  %649 = %646.0;
  %650 = %647.0;
  (%648, %649, %650)
}

def @func_6058() -> (Tensor[(7, 12, 4), float32],) {
  %651 = @func_5142() /* ty=(Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) */;
  %652 = %651.0;
  (%652,)
}

def @func_553(%var_536: Tensor[(10, 12, 13), float32]) -> (Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) {
  %653 = cast(%var_536, dtype="float32") /* ty=Tensor[(10, 12, 13), float32] */;
  %654 = cast(meta[relay.Constant][35] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %655 = cast(meta[relay.Constant][35] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %656 = reshape(%654, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %657 = reshape(%655, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %658 = @func_470(%656, %657) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %659 = sigmoid(%653) /* ty=Tensor[(10, 12, 13), float32] */;
  %660 = %658.0;
  (%659, %660, meta[relay.Constant][35] /* ty=Tensor[(176), float64] */)
}

def @func_6499() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool], Tensor[(156), float64]) {
  %661 = @func_3417() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) */;
  %662 = cast(meta[relay.Constant][36] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
  %663 = reshape(%662, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %664 = @func_2964(%663) /* ty=(Tensor[(4, 13, 3), bool],) */;
  %665 = %661.0;
  %666 = %664.0;
  (%665, %666, meta[relay.Constant][36] /* ty=Tensor[(156), float64] */)
}

def @func_3105(%var_3096: Tensor[(3, 4, 13), uint8], %var_3097: Tensor[(3, 4, 13), uint8]) -> (Tensor[(3, 4, 13), uint8],) {
  %667 = cast(%var_3097, dtype="uint8") /* ty=Tensor[(3, 4, 13), uint8] */;
  %668 = shape_of(%var_3096, dtype="int32") /* ty=Tensor[(3), int32] */;
  %669 = cast(%var_3096, dtype="uint8") /* ty=Tensor[(3, 4, 13), uint8] */;
  %670 = dyn.reshape(%667, %668, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %671 = add(%669, %670) /* ty=Tensor[(3, 4, 13), uint8] */;
  (%671,)
}

def @func_6421() -> (Tensor[(4, 13, 3), float64], Tensor[(7, 12, 4), float32]) {
  %672 = @func_6058() /* ty=(Tensor[(7, 12, 4), float32],) */;
  %673 = @func_2690() /* ty=Tensor[(4, 13, 3), float64] */;
  %674 = %672.0;
  (%673, %674)
}

def @func_2389() -> (Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) {
  %675 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %676 = %675.0;
  %677 = cast(%676, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %678 = atanh(%677) /* ty=Tensor[(4, 13, 3), float32] */;
  %679 = cast(%676, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = cast(%678, dtype="int32") /* ty=Tensor[(4, 13, 3), int32] */;
  %684 = shape_of(%676, dtype="int32") /* ty=Tensor[(3), int32] */;
  %685 = cast(%676, dtype="int32") /* ty=Tensor[(4, 13, 3), int32] */;
  %686 = dyn.reshape(%683, %684, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %687 = equal(%681, %682) /* ty=Tensor[(4, 13, 3), bool] */;
  %688 = add(%685, %686) /* ty=Tensor[(4, 13, 3), int32] */;
  (%687, %688)
}

def @func_3424() -> (Tensor[(4, 13, 3), float64],) {
  %689 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %690 = %689.1;
  (%690,)
}

def @func_2189() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) {
  %691 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  %692 = cast(%691, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %693 = reshape(%692, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %694 = @func_1969(%693) /* ty=(Tensor[(4, 13, 3), int16],) */;
  %695 = %694.0;
  (%691, %695)
}

def @func_2339(%var_2333: Tensor[(6, 12, 3), int8], %var_2334: Tensor[(6, 12, 3), int8]) -> Tensor[(6, 12, 3), int8] {
  %696 = cast(%var_2334, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %697 = shape_of(%var_2333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_2333, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_or(%698, %699) /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_5557() -> Tensor[(4, 13, 3), float64] {
  %700 = @func_4539() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(1, 280), float32]) */;
  %700.2
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5711() -> Tensor[(4, 13, 3), float64] {
  %0 = @func_4686() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %0.1
}

def @func_1793() -> Tensor[(4, 13, 3), float64] {
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(4, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  asin(%1) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_3894(%var_3890: Tensor[(72), float64], %var_3891: Tensor[(176), float64], %var_3892: Tensor[(4, 13, 3), float64], %var_3893: Tensor[(72), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(176), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float32], Tensor[(72), float32], Tensor[(4, 13, 3), float64], Tensor[(10, 176), bool], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64]) {
  %38 = fn (%var_3781: Tensor[(72), float64], %var_3782: Tensor[(176), float64], %var_3841: Tensor[(4, 13, 3), float64], %var_3848: Tensor[(72), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(176), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float32], Tensor[(72), float32], Tensor[(4, 13, 3), float64], Tensor[(10, 176), bool], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64]) {
    %2 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
    %3 = cast(%var_3781, dtype="float64") /* ty=Tensor[(72), float64] */;
    %4 = cast(%var_3782, dtype="float64") /* ty=Tensor[(176), float64] */;
    %5 = reshape(%3, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
    %6 = reshape(%4, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %7 = @func_2665(%5, %6) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
    %8 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
    %9 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %10 = %9.0;
    %11 = cast(%var_3841, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
    %12 = shape_of(%10, dtype="int32") /* ty=Tensor[(3), int32] */;
    %13 = cast(%10, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
    %14 = dyn.reshape(%11, %12, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %15 = cast(%var_3848, dtype="float32") /* ty=Tensor[(72), float32] */;
    %16 = shape_of(%var_3781, dtype="int32") /* ty=Tensor[(1), int32] */;
    %17 = cast(%var_3781, dtype="float32") /* ty=Tensor[(72), float32] */;
    %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?), float32] */;
    %19 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %20 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
    %21 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %22 = %21.0;
    %23 = cast(%22, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %24 = cast(%var_3848, dtype="float64") /* ty=Tensor[(72), float64] */;
    %25 = cast(%var_3782, dtype="float64") /* ty=Tensor[(176), float64] */;
    %26 = reshape(%24, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
    %27 = reshape(%25, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %28 = @func_2665(%26, %27) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
    %29 = %2.0;
    %30 = %7.1;
    %31 = %8.0;
    %32 = floor_mod(%13, %14) /* ty=Tensor[(4, 13, 3), float32] */;
    %33 = power(%17, %18) /* ty=Tensor[(72), float32] */;
    %34 = %19.0;
    %35 = %20.2;
    %36 = cos(%23) /* ty=Tensor[(4, 13, 3), float64] */;
    %37 = %28.0;
    (%29, %30, %var_3782, %31, %32, %33, %34, %35, %36, %37)
  };
  %38(%var_3890, %var_3891, %var_3892, %var_3893) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(176), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float32], Tensor[(72), float32], Tensor[(4, 13, 3), float64], Tensor[(10, 176), bool], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64]) */
}

def @func_2390() -> (Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) {
  %53 = fn () -> (Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) {
    %39 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
    %40 = %39.0;
    %41 = cast(%40, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
    %42 = atanh(%41) /* ty=Tensor[(4, 13, 3), float32] */;
    %43 = cast(%40, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
    %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%42, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %47 = cast(%42, dtype="int32") /* ty=Tensor[(4, 13, 3), int32] */;
    %48 = shape_of(%40, dtype="int32") /* ty=Tensor[(3), int32] */;
    %49 = cast(%40, dtype="int32") /* ty=Tensor[(4, 13, 3), int32] */;
    %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %51 = equal(%45, %46) /* ty=Tensor[(4, 13, 3), bool] */;
    %52 = add(%49, %50) /* ty=Tensor[(4, 13, 3), int32] */;
    (%51, %52)
  };
  %53() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */
}

def @func_4255() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  @func_4253() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_5085() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %54 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %55 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %56 = %54.0;
  %57 = %55.0;
  (%56, %57)
}

def @func_2189() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) {
  %58 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  %59 = cast(%58, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %60 = reshape(%59, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %61 = @func_1969(%60) /* ty=(Tensor[(4, 13, 3), int16],) */;
  %62 = %61.0;
  (%58, %62)
}

def @func_2517() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_4175() -> (Tensor[(4, 13, 3), float64],) {
  %63 = @func_3303() /* ty=Tensor[(4, 13, 3), float64] */;
  (%63,)
}

def @func_5641() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), bool]) {
  %64 = @func_4475() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %65 = @func_2389() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */;
  %66 = @func_5557() /* ty=Tensor[(4, 13, 3), float64] */;
  %67 = %64.0;
  %68 = %65.0;
  (%66, %67, %68)
}

def @func_3601() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4389() -> (Tensor[(4, 13, 3), float64], Tensor[(2352), float64], Tensor[(4, 13, 3), int64]) {
  %69 = cast(meta[relay.Constant][1] /* ty=Tensor[(2352), float64] */, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %70 = reshape(%69, newshape=[2352]) /* ty=Tensor[(2352), float64] */;
  %71 = @func_2853(%70) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(2352), uint8], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(14, 12, 14), float32]) */;
  %72 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %73 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 13, 3), float64] */, dtype="int64") /* ty=Tensor[(4, 13, 3), int64] */;
  %74 = shape_of(%72, dtype="int32") /* ty=Tensor[(3), int32] */;
  %75 = cast(%72, dtype="int64") /* ty=Tensor[(4, 13, 3), int64] */;
  %76 = dyn.reshape(%73, %74, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %77 = %71.0;
  %78 = logical_xor(%75, %76) /* ty=Tensor[(4, 13, 3), int64] */;
  (%77, meta[relay.Constant][1] /* ty=Tensor[(2352), float64] */, %78)
}

def @func_6613() -> (Tensor[(4, 13, 3), float64],) {
  %79 = @func_3191() /* ty=Tensor[(4, 13, 3), float64] */;
  (%79,)
}

def @func_6371(%var_6337: Tensor[(10, 7, 8), float32]) -> (Tensor[(10, 7, 8), float32], Tensor[(4, 44), float64], Tensor[(1092), float32], Tensor[(176), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 900), int32], Tensor[(4, 13, 3), float64]) {
  %80 = cast(%var_6337, dtype="float32") /* ty=Tensor[(10, 7, 8), float32] */;
  %81 = cast(meta[relay.Constant][3] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %82 = cast(meta[relay.Constant][3] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %83 = cast(meta[relay.Constant][3] /* ty=Tensor[(1092), float32] */, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %84 = cast(meta[relay.Constant][4] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
  %85 = reshape(%81, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %86 = reshape(%82, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %87 = reshape(%83, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %88 = reshape(%84, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %89 = @func_1305(%85, %86, %87, %88) /* ty=(Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) */;
  %90 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 900), int32] */, dtype="int32") /* ty=Tensor[(1, 900), int32] */;
  %91 = cast(meta[relay.Constant][5] /* ty=Tensor[(1, 900), int32] */, dtype="int32") /* ty=Tensor[(1, 900), int32] */;
  %92 = reshape(%90, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), int32] */;
  %93 = reshape(%91, newshape=[5, 15, 12]) /* ty=Tensor[(5, 15, 12), int32] */;
  %94 = @func_6096(%92, %93) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64]) */;
  %95 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %96 = log10(%80) /* ty=Tensor[(10, 7, 8), float32] */;
  %97 = %89.5;
  %98 = %94.1;
  %99 = %95.0;
  (%96, %97, meta[relay.Constant][3] /* ty=Tensor[(1092), float32] */, meta[relay.Constant][4] /* ty=Tensor[(176), float64] */, %98, meta[relay.Constant][5] /* ty=Tensor[(1, 900), int32] */, %99)
}

def @func_6374(%var_6372: Tensor[(10, 7, 8), float32]) -> (Tensor[(10, 7, 8), float32], Tensor[(4, 44), float64], Tensor[(1092), float32], Tensor[(176), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 900), int32], Tensor[(4, 13, 3), float64]) {
  @func_6371(%var_6372) /* ty=(Tensor[(10, 7, 8), float32], Tensor[(4, 44), float64], Tensor[(1092), float32], Tensor[(176), float64], Tensor[(5, 15, 12), float64], Tensor[(1, 900), int32], Tensor[(4, 13, 3), float64]) */
}

def @func_5993() -> (Tensor[(3, 4, 13), uint8],) {
  @func_5991() /* ty=(Tensor[(3, 4, 13), uint8],) */
}

def @func_5814() -> Tensor[(4, 13, 3), float64] {
  %100 = @func_4847() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %100.0
}

def @func_6615() -> (Tensor[(4, 13, 3), float64],) {
  @func_6613() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_2648() -> (Tensor[(4, 13, 3), bool],) {
  @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */
}

def @func_6707(%var_6703: Tensor[(9, 15, 15), uint32], %var_6704: Tensor[(9, 15, 15), uint32], %var_6705: Tensor[(9, 15, 15), uint32], %var_6706: Tensor[(390, 3), float32]) -> (Tensor[(9, 15, 15), float32], Tensor[(10, 9, 13), float32], Tensor[(390, 3), float32], Tensor[(9, 15, 15), float64], Tensor[(7, 5, 4), float64]) {
  @func_6701(%var_6703, %var_6704, %var_6705, %var_6706) /* ty=(Tensor[(9, 15, 15), float32], Tensor[(10, 9, 13), float32], Tensor[(390, 3), float32], Tensor[(9, 15, 15), float64], Tensor[(7, 5, 4), float64]) */
}

def @func_4564() -> (Tensor[(4, 13, 3), float64],) {
  %101 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %102 = %101.2;
  (%102,)
}

def @func_2646() -> (Tensor[(4, 13, 3), bool],) {
  %103 = @func_2389() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */;
  %104 = %103.0;
  (%104,)
}

def @func_4177() -> (Tensor[(4, 13, 3), float64],) {
  @func_4175() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_2750() -> (Tensor[(4, 13, 3), float64],) {
  %105 = @func_1955() /* ty=Tensor[(4, 13, 3), float64] */;
  %106 = cast(%105, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %107 = rsqrt(%106) /* ty=Tensor[(4, 13, 3), float64] */;
  (%107,)
}

def @func_2853(%var_2828: Tensor[(2352), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(2352), uint8], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(14, 12, 14), float32]) {
  %108 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %109 = cast(meta[relay.Constant][6] /* ty=Tensor[(2352), float64] */, dtype="uint8") /* ty=Tensor[(2352), uint8] */;
  %110 = shape_of(%var_2828, dtype="int32") /* ty=Tensor[(1), int32] */;
  %111 = cast(%var_2828, dtype="uint8") /* ty=Tensor[(2352), uint8] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
  %114 = reshape(%113, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), float32] */;
  %115 = @func_2149(%114) /* ty=(Tensor[(10, 9, 7), float32],) */;
  %116 = cast(%var_2828, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %117 = reshape(%116, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float64] */;
  %118 = @func_687(%117) /* ty=Tensor[(14, 12, 14), float64] */;
  %119 = cast(%118, dtype="float32") /* ty=Tensor[(14, 12, 14), float32] */;
  %120 = %108.0;
  %121 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %122 = bitwise_xor(%111, %112) /* ty=Tensor[(2352), uint8] */;
  %123 = %115.0;
  %124 = atan(%119) /* ty=Tensor[(14, 12, 14), float32] */;
  (%120, %121, %122, %123, meta[relay.Constant][7] /* ty=Tensor[(70), float32] */, %124)
}

def @func_4197(%var_4178: Tensor[(14, 11, 11), float64], %var_4179: Tensor[(14, 11, 11), float64]) -> (Tensor[(14, 11, 11), int64], Tensor[(14, 11, 11), bool]) {
  %125 = cast(%var_4179, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %126 = shape_of(%var_4178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%var_4178, dtype="float64") /* ty=Tensor[(14, 11, 11), float64] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %129 = mod(%127, %128) /* ty=Tensor[(14, 11, 11), float64] */;
  %130 = cast(%129, dtype="int64") /* ty=Tensor[(14, 11, 11), int64] */;
  %131 = shape_of(%var_4178, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%var_4178, dtype="int64") /* ty=Tensor[(14, 11, 11), int64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %134 = cast(%var_4179, dtype="bool") /* ty=Tensor[(14, 11, 11), bool] */;
  %135 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%129, dtype="bool") /* ty=Tensor[(14, 11, 11), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = add(%132, %133) /* ty=Tensor[(14, 11, 11), int64] */;
  %139 = logical_and(%136, %137) /* ty=Tensor[(14, 11, 11), bool] */;
  (%138, %139)
}

def @func_6765(%var_6763: Tensor[(1980), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(15, 12, 11), float64], float64, Tensor[(1980), float64], Tensor[(176), float64], Tensor[(72), float64], Tensor[(4, 44), float64]) {
  @func_6762(%var_6763) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(15, 12, 11), float64], float64, Tensor[(1980), float64], Tensor[(176), float64], Tensor[(72), float64], Tensor[(4, 44), float64]) */
}

def @func_4932() -> Tensor[(4, 13, 3), float64] {
  @func_4613() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_6059() -> (Tensor[(7, 12, 4), float32],) {
  %142 = fn () -> (Tensor[(7, 12, 4), float32],) {
    %140 = @func_5142() /* ty=(Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) */;
    %141 = %140.0;
    (%141,)
  };
  %142() /* ty=(Tensor[(7, 12, 4), float32],) */
}

def @func_5543() -> Tensor[(4, 13, 3), float64] {
  @func_5541() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5087() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  @func_5085() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_3252() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) {
  %158 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) {
    %143 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %144 = %143.0;
    %145 = cast(%144, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %146 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
    %147 = cast(%146, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %148 = reshape(%147, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
    %149 = @func_1969(%148) /* ty=(Tensor[(4, 13, 3), int16],) */;
    %150 = %149.0;
    %151 = cast(%150, dtype="uint8") /* ty=Tensor[(4, 13, 3), uint8] */;
    %152 = tan(%145) /* ty=Tensor[(4, 13, 3), float64] */;
    %153 = cast(%152, dtype="uint8") /* ty=Tensor[(4, 13, 3), uint8] */;
    %154 = reshape(%151, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint8] */;
    %155 = reshape(%153, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), uint8] */;
    %156 = @func_3105(%154, %155) /* ty=(Tensor[(3, 4, 13), uint8],) */;
    %157 = %156.0;
    (%146, %152, %150, %157)
  };
  %158() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */
}

def @func_6228(%var_6225: Tensor[(12, 9, 10), float32], %var_6226: Tensor[(72), float64], %var_6227: Tensor[(176), float64]) -> (Tensor[(12, 9, 10), float32], Tensor[(3, 24), float64], Tensor[(72), float64], Tensor[(176), float64]) {
  %169 = fn (%var_6205: Tensor[(12, 9, 10), float32], %var_6215: Tensor[(72), float64], %var_6216: Tensor[(176), float64]) -> (Tensor[(12, 9, 10), float32], Tensor[(3, 24), float64], Tensor[(72), float64], Tensor[(176), float64]) {
    %159 = cast(%var_6205, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
    %160 = sinh(%159) /* ty=Tensor[(12, 9, 10), float32] */;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(12, 9, 10), float32] */;
    %162 = cast(%var_6215, dtype="float64") /* ty=Tensor[(72), float64] */;
    %163 = cast(%var_6216, dtype="float64") /* ty=Tensor[(176), float64] */;
    %164 = reshape(%162, newshape=[3, 24]) /* ty=Tensor[(3, 24), float64] */;
    %165 = reshape(%163, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %166 = @func_6174(%164, %165) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64], Tensor[(3, 24), float64], Tensor[(176), float64]) */;
    %167 = log10(%161) /* ty=Tensor[(12, 9, 10), float32] */;
    %168 = %166.3;
    (%167, %168, %var_6215, %var_6216)
  };
  %169(%var_6225, %var_6226, %var_6227) /* ty=(Tensor[(12, 9, 10), float32], Tensor[(3, 24), float64], Tensor[(72), float64], Tensor[(176), float64]) */
}

def @func_3460(%var_3438: Tensor[(280), float32]) -> (Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 13, 3), float32]) {
  %170 = cast(%var_3438, dtype="float32") /* ty=Tensor[(280), float32] */;
  %171 = cast(%var_3438, dtype="float32") /* ty=Tensor[(280), float32] */;
  %172 = reshape(%170, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %173 = reshape(%171, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
  %174 = @func_2915(%172, %173) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */;
  %175 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %176 = %175.0;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %178 = %174.1;
  %179 = exp(%177) /* ty=Tensor[(4, 13, 3), float32] */;
  (%178, %var_3438, %179)
}

def @func_6762(%var_6747: Tensor[(1980), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(15, 12, 11), float64], float64, Tensor[(1980), float64], Tensor[(176), float64], Tensor[(72), float64], Tensor[(4, 44), float64]) {
  %180 = cast(-0.315888f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %181 = cast(%var_6747, dtype="float64") /* ty=Tensor[(1980), float64] */;
  %182 = reshape(%180, newshape=[]) /* ty=float64 */;
  %183 = reshape(%181, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float64] */;
  %184 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %185 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 44), float64] */, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %186 = reshape(%184, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
  %187 = reshape(%185, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %188 = @func_2665(%186, %187) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
  %189 = @func_5557() /* ty=Tensor[(4, 13, 3), float64] */;
  %190 = @func_4723(%182, %183) /* ty=Tensor[(15, 12, 11), float64] */;
  %191 = %188.2;
  (%189, %190, -0.315888f64 /* ty=float64 */, %var_6747, %191, meta[relay.Constant][8] /* ty=Tensor[(72), float64] */, meta[relay.Constant][9] /* ty=Tensor[(4, 44), float64] */)
}

def @func_2915(%var_2906: Tensor[(8, 5, 7), float32], %var_2907: Tensor[(8, 5, 7), float32]) -> (Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) {
  %192 = cast(%var_2907, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %193 = shape_of(%var_2906, dtype="int32") /* ty=Tensor[(3), int32] */;
  %194 = cast(%var_2906, dtype="float32") /* ty=Tensor[(8, 5, 7), float32] */;
  %195 = dyn.reshape(%192, %193, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %196 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %197 = subtract(%194, %195) /* ty=Tensor[(8, 5, 7), float32] */;
  %198 = %196.0;
  (%197, %198)
}

def @func_3088(%var_3087: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), float64] {
  %207 = fn (%var_3052: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), float64] {
    %199 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %200 = %199.0;
    %201 = cast(%var_3052, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %202 = shape_of(%200, dtype="int32") /* ty=Tensor[(3), int32] */;
    %203 = cast(%200, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %204 = dyn.reshape(%201, %202, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %205 = subtract(%203, %204) /* ty=Tensor[(4, 13, 3), float64] */;
    %206 = cast(%205, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    log10(%206) /* ty=Tensor[(4, 13, 3), float64] */
  };
  %207(%var_3087) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5841(%var_5834: Tensor[(6, 7, 2), uint8]) -> Tensor[(6, 7, 2), bool] {
  %208 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 7, 2), uint8] */, dtype="bool") /* ty=Tensor[(6, 7, 2), bool] */;
  %209 = shape_of(%var_5834, dtype="int32") /* ty=Tensor[(3), int32] */;
  %210 = cast(%var_5834, dtype="bool") /* ty=Tensor[(6, 7, 2), bool] */;
  %211 = dyn.reshape(%208, %209, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  not_equal(%210, %211) /* ty=Tensor[(6, 7, 2), bool] */
}

def @func_3272(%var_3260: Tensor[(12, 7, 6), float32], %var_3261: Tensor[(12, 7, 6), float32]) -> Tensor[(12, 7, 6), float32] {
  %212 = cast(%var_3261, dtype="float32") /* ty=Tensor[(12, 7, 6), float32] */;
  %213 = shape_of(%var_3260, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%var_3260, dtype="float32") /* ty=Tensor[(12, 7, 6), float32] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%214, %215) /* ty=Tensor[(12, 7, 6), float32] */
}

def @func_3223(%var_3222: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), float64] {
  %224 = fn (%var_3200: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), float64] {
    %216 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
    %217 = %216.0;
    %218 = cast(%var_3200, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %222 = not_equal(%220, %221) /* ty=Tensor[(4, 13, 3), bool] */;
    %223 = cast(%222, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    sqrt(%223) /* ty=Tensor[(4, 13, 3), float64] */
  };
  %224(%var_3222) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_6054(%var_6052: Tensor[(12, 2, 7), int64], %var_6053: Tensor[(12, 2, 7), int64]) -> (Tensor[(12, 2, 7), int64], Tensor[(12, 2, 7), float32]) {
  %232 = fn (%var_6012: Tensor[(12, 2, 7), int64], %var_6013: Tensor[(12, 2, 7), int64]) -> (Tensor[(12, 2, 7), int64], Tensor[(12, 2, 7), float32]) {
    %225 = cast(%var_6013, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
    %226 = shape_of(%var_6012, dtype="int32") /* ty=Tensor[(3), int32] */;
    %227 = cast(%var_6012, dtype="int64") /* ty=Tensor[(12, 2, 7), int64] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %229 = cast(%var_6012, dtype="float32") /* ty=Tensor[(12, 2, 7), float32] */;
    %230 = bitwise_or(%227, %228) /* ty=Tensor[(12, 2, 7), int64] */;
    %231 = rsqrt(%229) /* ty=Tensor[(12, 2, 7), float32] */;
    (%230, %231)
  };
  %232(%var_6052, %var_6053) /* ty=(Tensor[(12, 2, 7), int64], Tensor[(12, 2, 7), float32]) */
}

def @func_1138(%var_1120: Tensor[(7, 15, 10), float64], %var_1135: Tensor[(286), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) {
  %233 = cast(%var_1120, dtype="float64") /* ty=Tensor[(7, 15, 10), float64] */;
  %234 = cast(%var_1135, dtype="float64") /* ty=Tensor[(286), float64] */;
  %235 = reshape(%234, newshape=[11, 13, 2]) /* ty=Tensor[(11, 13, 2), float64] */;
  %236 = sin(%233) /* ty=Tensor[(7, 15, 10), float64] */;
  %237 = @func_277(%235) /* ty=Tensor[(11, 13, 2), float64] */;
  (%236, %237, %var_1135)
}

def @func_3419() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) {
  @func_3417() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_5435(%var_5433: Tensor[(11, 6, 13), float64]) -> Tensor[(11, 6, 13), float64] {
  @func_5432(%var_5433) /* ty=Tensor[(11, 6, 13), float64] */
}

def @func_5557() -> Tensor[(4, 13, 3), float64] {
  %238 = @func_4539() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(1, 280), float32]) */;
  %238.2
}

def @func_4566() -> (Tensor[(4, 13, 3), float64],) {
  @func_4564() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_6174(%var_6171: Tensor[(3, 24), float64], %var_6172: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64], Tensor[(3, 24), float64], Tensor[(176), float64]) {
  %239 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %240 = %239.0;
  %241 = cast(%240, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %242 = reshape(%241, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %243 = cast(%var_6171, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %244 = cast(%var_6172, dtype="float64") /* ty=Tensor[(176), float64] */;
  %245 = @func_3221(%242) /* ty=Tensor[(4, 13, 3), float64] */;
  %246 = cast(%245, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %247 = cast(%var_6171, dtype="float64") /* ty=Tensor[(3, 24), float64] */;
  %248 = reshape(%243, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %249 = reshape(%244, newshape=[176]) /* ty=Tensor[(176), float64] */;
  %250 = reshape(%246, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %251 = reshape(%247, newshape=[72]) /* ty=Tensor[(72), float64] */;
  %252 = @func_3889(%248, %249, %250, %251) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(176), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float32], Tensor[(72), float32], Tensor[(4, 13, 3), float64], Tensor[(10, 176), bool], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64]) */;
  %253 = %252.9;
  (%240, %245, %253, %var_6171, %var_6172)
}

def @func_3304() -> Tensor[(4, 13, 3), float64] {
  %254 = fn () -> Tensor[(4, 13, 3), float64] {
    @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
  };
  %254() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5698(%var_5696: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), float32] {
  @func_5695(%var_5696) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_2878(%var_2876: Tensor[(11, 12, 3), float64]) -> Tensor[(11, 12, 3), float64] {
  @func_2875(%var_2876) /* ty=Tensor[(11, 12, 3), float64] */
}

def @func_3191() -> Tensor[(4, 13, 3), float64] {
  %255 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %255.0
}

def @func_4926() -> (Tensor[(1, 15, 4), float32],) {
  %256 = cast(meta[relay.Constant][11] /* ty=Tensor[(1, 15, 4), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 4), float32] */;
  %257 = acos(%256) /* ty=Tensor[(1, 15, 4), float32] */;
  (%257,)
}

def @func_1142(%var_1140: Tensor[(7, 15, 10), float64], %var_1141: Tensor[(286), float64]) -> (Tensor[(7, 15, 10), float64], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) {
  @func_1138(%var_1140, %var_1141) /* ty=(Tensor[(7, 15, 10), float64], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */
}

def @func_4772(%var_4771: Tensor[(5, 6, 10), float64]) -> (Tensor[(5, 6, 10), float64], Tensor[(4, 13, 3), float64]) {
  %261 = fn (%var_4761: Tensor[(5, 6, 10), float64]) -> (Tensor[(5, 6, 10), float64], Tensor[(4, 13, 3), float64]) {
    %258 = cast(%var_4761, dtype="float64") /* ty=Tensor[(5, 6, 10), float64] */;
    %259 = sigmoid(%258) /* ty=Tensor[(5, 6, 10), float64] */;
    %260 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
    (%259, %260)
  };
  %261(%var_4771) /* ty=(Tensor[(5, 6, 10), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_2875(%var_2860: Tensor[(11, 12, 3), float64]) -> Tensor[(11, 12, 3), float64] {
  %262 = cast(%var_2860, dtype="float64") /* ty=Tensor[(11, 12, 3), float64] */;
  sinh(%262) /* ty=Tensor[(11, 12, 3), float64] */
}

def @func_5067() -> (Tensor[(4, 13, 3), float64],) {
  %264 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %263 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
    (%263,)
  };
  %264() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_4449(%var_4448: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(36, 2), float64], Tensor[(176), float64]) {
  %275 = fn (%var_4434: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(36, 2), float64], Tensor[(176), float64]) {
    %265 = @func_2723() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %266 = cast(meta[relay.Constant][12] /* ty=Tensor[(36, 2), float64] */, dtype="float64") /* ty=Tensor[(36, 2), float64] */;
    %267 = cast(%var_4434, dtype="float64") /* ty=Tensor[(176), float64] */;
    %268 = reshape(%266, newshape=[3, 4, 6]) /* ty=Tensor[(3, 4, 6), float64] */;
    %269 = reshape(%267, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %270 = @func_2665(%268, %269) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */;
    %271 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
    %272 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
    %273 = %265.0;
    %274 = %270.1;
    (%271, %272, %273, %274, meta[relay.Constant][12] /* ty=Tensor[(36, 2), float64] */, %var_4434)
  };
  %275(%var_4448) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(36, 2), float64], Tensor[(176), float64]) */
}

def @func_3193() -> Tensor[(4, 13, 3), float64] {
  @func_3191() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_2229(%var_2226: Tensor[(4, 13, 3), float64], %var_2227: Tensor[(1560, 1), float32], %var_2228: Tensor[(1092), float32]) -> (Tensor[(176), float64], Tensor[(1560, 1), float32], Tensor[(4, 13, 3), int16], Tensor[(4, 13, 3), float64], Tensor[(12, 13, 7), int64], Tensor[(1092), float32], Tensor[(4, 13, 3), float64]) {
  @func_2224(%var_2226, %var_2227, %var_2228) /* ty=(Tensor[(176), float64], Tensor[(1560, 1), float32], Tensor[(4, 13, 3), int16], Tensor[(4, 13, 3), float64], Tensor[(12, 13, 7), int64], Tensor[(1092), float32], Tensor[(4, 13, 3), float64]) */
}

def @func_6500() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool], Tensor[(156), float64]) {
  %282 = fn () -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool], Tensor[(156), float64]) {
    %276 = @func_3417() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) */;
    %277 = cast(meta[relay.Constant][13] /* ty=Tensor[(156), float64] */, dtype="float64") /* ty=Tensor[(156), float64] */;
    %278 = reshape(%277, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
    %279 = @func_2964(%278) /* ty=(Tensor[(4, 13, 3), bool],) */;
    %280 = %276.0;
    %281 = %279.0;
    (%280, %281, meta[relay.Constant][13] /* ty=Tensor[(156), float64] */)
  };
  %282() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool], Tensor[(156), float64]) */
}

def @main(%var_6771: Tensor[(13, 4, 11), uint8]) -> Tensor[(13, 4, 11), bool] {
  %283 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 4, 1), uint8] */, dtype="bool") /* ty=Tensor[(13, 4, 1), bool] */;
  %284 = cast(%var_6771, dtype="bool") /* ty=Tensor[(13, 4, 11), bool] */;
  less_equal(%283, %284) /* ty=Tensor[(13, 4, 11), bool] */
}

def @func_5844(%var_5842: Tensor[(6, 7, 2), uint8]) -> Tensor[(6, 7, 2), bool] {
  @func_5841(%var_5842) /* ty=Tensor[(6, 7, 2), bool] */
}

def @func_4615() -> Tensor[(4, 13, 3), float64] {
  @func_4613() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_2036() -> Tensor[(4, 13, 3), float64] {
  %285 = fn () -> Tensor[(4, 13, 3), float64] {
    @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
  };
  %285() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_280(%var_278: Tensor[(11, 13, 2), float64]) -> Tensor[(11, 13, 2), float64] {
  @func_277(%var_278) /* ty=Tensor[(11, 13, 2), float64] */
}

def @func_5532(%var_5530: Tensor[(396), float64]) -> (Tensor[(4, 13, 3), float32], Tensor[(4, 13, 3), float64], Tensor[(11, 12, 3), float64], Tensor[(396), float32]) {
  @func_5529(%var_5530) /* ty=(Tensor[(4, 13, 3), float32], Tensor[(4, 13, 3), float64], Tensor[(11, 12, 3), float64], Tensor[(396), float32]) */
}

def @func_5991() -> (Tensor[(3, 4, 13), uint8],) {
  %286 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
  %287 = %286.3;
  (%287,)
}

def @func_4253() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %288 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %290 = reshape(%289, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
  %291 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %292 = @func_4086() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %293 = @func_4050() /* ty=Tensor[(4, 13, 3), bool] */;
  %294 = @func_3221(%290) /* ty=Tensor[(4, 13, 3), float64] */;
  %295 = %291.0;
  %296 = @func_1910() /* ty=Tensor[(4, 13, 3), float64] */;
  %297 = %292.0;
  (%288, %293, %294, %295, %296, %297)
}

def @func_4201(%var_4199: Tensor[(14, 11, 11), float64], %var_4200: Tensor[(14, 11, 11), float64]) -> (Tensor[(14, 11, 11), int64], Tensor[(14, 11, 11), bool]) {
  @func_4197(%var_4199, %var_4200) /* ty=(Tensor[(14, 11, 11), int64], Tensor[(14, 11, 11), bool]) */
}

def @func_3735() -> (Tensor[(4, 13, 3), float64], Tensor[(176), float64], Tensor[(3, 4, 13), int8], Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 4, 11), int8], Tensor[(4, 4, 11), uint64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(4, 4, 11), float32], Tensor[(4, 13, 3), float64]) {
  %348 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(176), float64], Tensor[(3, 4, 13), int8], Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 4, 11), int8], Tensor[(4, 4, 11), uint64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(4, 4, 11), float32], Tensor[(4, 13, 3), float64]) {
    %298 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %299 = %298.0;
    %300 = cast(%299, dtype="int8") /* ty=Tensor[(4, 13, 3), int8] */;
    %301 = cast(%299, dtype="int8") /* ty=Tensor[(4, 13, 3), int8] */;
    %302 = reshape(%300, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), int8] */;
    %303 = reshape(%301, newshape=[3, 4, 13]) /* ty=Tensor[(3, 4, 13), int8] */;
    %304 = @func_2534(%302, %303) /* ty=(Tensor[(3, 4, 13), int8],) */;
    %305 = cast(meta[relay.Constant][16] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %306 = cast(meta[relay.Constant][16] /* ty=Tensor[(280), float32] */, dtype="float32") /* ty=Tensor[(280), float32] */;
    %307 = reshape(%305, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
    %308 = reshape(%306, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
    %309 = @func_2915(%307, %308) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */;
    %310 = cast(meta[relay.Constant][15] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %311 = cast(meta[relay.Constant][15] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %312 = reshape(%310, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %313 = reshape(%311, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %314 = @func_470(%312, %313) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
    %315 = %314.0;
    %316 = cast(%315, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
    %317 = sin(%316) /* ty=Tensor[(4, 4, 11), float32] */;
    %318 = cast(%317, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
    %319 = rsqrt(%318) /* ty=Tensor[(4, 4, 11), float64] */;
    %320 = cast(%317, dtype="uint16") /* ty=Tensor[(4, 4, 11), uint16] */;
    %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %322 = cast(%319, dtype="uint16") /* ty=Tensor[(4, 4, 11), uint16] */;
    %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %324 = minimum(%322, %323) /* ty=Tensor[(4, 4, 11), uint16] */;
    %325 = cast(%319, dtype="int8") /* ty=Tensor[(4, 4, 11), int8] */;
    %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
    %327 = cast(%324, dtype="int8") /* ty=Tensor[(4, 4, 11), int8] */;
    %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %329 = cast(meta[relay.Constant][17] /* ty=Tensor[(4, 4, 11), float32] */, dtype="uint64") /* ty=Tensor[(4, 4, 11), uint64] */;
    %330 = shape_of(%317, dtype="int32") /* ty=Tensor[(3), int32] */;
    %331 = cast(%317, dtype="uint64") /* ty=Tensor[(4, 4, 11), uint64] */;
    %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %333 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %334 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
    %335 = cast(meta[relay.Constant][18] /* ty=Tensor[(70), float32] */, dtype="float32") /* ty=Tensor[(70), float32] */;
    %336 = reshape(%335, newshape=[10, 1, 7]) /* ty=Tensor[(10, 1, 7), float32] */;
    %337 = @func_2149(%336) /* ty=(Tensor[(10, 9, 7), float32],) */;
    %338 = cast(%317, dtype="float32") /* ty=Tensor[(4, 4, 11), float32] */;
    %339 = %304.0;
    %340 = %309.1;
    %341 = add(%327, %328) /* ty=Tensor[(4, 4, 11), int8] */;
    %342 = right_shift(%331, %332) /* ty=Tensor[(4, 4, 11), uint64] */;
    %343 = %333.0;
    %344 = %334.0;
    %345 = %337.0;
    %346 = sigmoid(%338) /* ty=Tensor[(4, 4, 11), float32] */;
    %347 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
    (%299, meta[relay.Constant][15] /* ty=Tensor[(176), float64] */, %339, %340, meta[relay.Constant][16] /* ty=Tensor[(280), float32] */, %341, %342, %343, %344, %345, meta[relay.Constant][18] /* ty=Tensor[(70), float32] */, %346, %347)
  };
  %348() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(176), float64], Tensor[(3, 4, 13), int8], Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 4, 11), int8], Tensor[(4, 4, 11), uint64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(4, 4, 11), float32], Tensor[(4, 13, 3), float64]) */
}

def @func_2191() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) {
  @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */
}

def @func_1305(%var_1239: Tensor[(12, 13, 7), float32], %var_1252: Tensor[(12, 13, 7), float32], %var_1270: Tensor[(12, 13, 7), float32], %var_1285: Tensor[(4, 44), float64]) -> (Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) {
  %349 = cast(%var_1239, dtype="float32") /* ty=Tensor[(12, 13, 7), float32] */;
  %350 = atanh(%349) /* ty=Tensor[(12, 13, 7), float32] */;
  %351 = cast(%var_1252, dtype="bool") /* ty=Tensor[(12, 13, 7), bool] */;
  %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(%350, dtype="bool") /* ty=Tensor[(12, 13, 7), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = cast(meta[relay.Constant][19] /* ty=Tensor[(2352), float64] */, dtype="float64") /* ty=Tensor[(2352), float64] */;
  %356 = reshape(%355, newshape=[14, 12, 14]) /* ty=Tensor[(14, 12, 14), float64] */;
  %357 = cast(%350, dtype="float64") /* ty=Tensor[(12, 13, 7), float64] */;
  %358 = shape_of(%var_1239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %359 = cast(%var_1239, dtype="float64") /* ty=Tensor[(12, 13, 7), float64] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %361 = maximum(%359, %360) /* ty=Tensor[(12, 13, 7), float64] */;
  %362 = cast(%var_1252, dtype="uint64") /* ty=Tensor[(12, 13, 7), uint64] */;
  %363 = shape_of(%361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %364 = cast(%361, dtype="uint64") /* ty=Tensor[(12, 13, 7), uint64] */;
  %365 = dyn.reshape(%362, %363, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %366 = cast(%var_1270, dtype="int64") /* ty=Tensor[(12, 13, 7), int64] */;
  %367 = shape_of(%var_1239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %368 = cast(%var_1239, dtype="int64") /* ty=Tensor[(12, 13, 7), int64] */;
  %369 = dyn.reshape(%366, %367, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %370 = cast(%var_1285, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %371 = cast(%var_1285, dtype="float64") /* ty=Tensor[(4, 44), float64] */;
  %372 = reshape(%370, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %373 = reshape(%371, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %374 = @func_470(%372, %373) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(4, 4, 11), float64] */;
  %377 = less_equal(%353, %354) /* ty=Tensor[(12, 13, 7), bool] */;
  %378 = @func_687(%356) /* ty=Tensor[(14, 12, 14), float64] */;
  %379 = left_shift(%364, %365) /* ty=Tensor[(12, 13, 7), uint64] */;
  %380 = subtract(%368, %369) /* ty=Tensor[(12, 13, 7), int64] */;
  %381 = cosh(%376) /* ty=Tensor[(4, 4, 11), float64] */;
  (%377, %378, meta[relay.Constant][19] /* ty=Tensor[(2352), float64] */, %379, %380, %var_1285, %381)
}

def @func_4391() -> (Tensor[(4, 13, 3), float64], Tensor[(2352), float64], Tensor[(4, 13, 3), int64]) {
  @func_4389() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(2352), float64], Tensor[(4, 13, 3), int64]) */
}

def @func_4476() -> (Tensor[(4, 13, 3), bool],) {
  %384 = fn () -> (Tensor[(4, 13, 3), bool],) {
    %382 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
    %383 = %382.0;
    (%383,)
  };
  %384() /* ty=(Tensor[(4, 13, 3), bool],) */
}

def @func_2668(%var_2666: Tensor[(3, 4, 6), float64], %var_2667: Tensor[(176), float64]) -> (Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) {
  %393 = fn (%var_2652: Tensor[(3, 4, 6), float64], %var_2661: Tensor[(176), float64]) -> (Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) {
    %385 = cast(%var_2652, dtype="float64") /* ty=Tensor[(3, 4, 6), float64] */;
    %386 = cast(%var_2661, dtype="float64") /* ty=Tensor[(176), float64] */;
    %387 = cast(%var_2661, dtype="float64") /* ty=Tensor[(176), float64] */;
    %388 = reshape(%386, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %389 = reshape(%387, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %390 = @func_470(%388, %389) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
    %391 = log10(%385) /* ty=Tensor[(3, 4, 6), float64] */;
    %392 = %390.2;
    (%391, %392, %var_2661)
  };
  %393(%var_2666, %var_2667) /* ty=(Tensor[(3, 4, 6), float64], Tensor[(286), float64], Tensor[(176), float64]) */
}

def @func_1955() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_2919(%var_2917: Tensor[(8, 5, 7), float32], %var_2918: Tensor[(8, 5, 7), float32]) -> (Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) {
  @func_2915(%var_2917, %var_2918) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */
}

def @func_4050() -> Tensor[(4, 13, 3), bool] {
  %394 = @func_2389() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), int32]) */;
  %394.0
}

def @func_3561() -> (Tensor[(7, 5, 4), float64],) {
  %397 = fn () -> (Tensor[(7, 5, 4), float64],) {
    %395 = @func_3029() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) */;
    %396 = %395.0;
    (%396,)
  };
  %397() /* ty=(Tensor[(7, 5, 4), float64],) */
}

def @func_1971(%var_1970: Tensor[(4, 13, 3), float64]) -> (Tensor[(4, 13, 3), int16],) {
  %404 = fn (%var_1963: Tensor[(4, 13, 3), float64]) -> (Tensor[(4, 13, 3), int16],) {
    %398 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
    %399 = cast(%var_1963, dtype="int16") /* ty=Tensor[(4, 13, 3), int16] */;
    %400 = shape_of(%398, dtype="int32") /* ty=Tensor[(3), int32] */;
    %401 = cast(%398, dtype="int16") /* ty=Tensor[(4, 13, 3), int16] */;
    %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %403 = left_shift(%401, %402) /* ty=Tensor[(4, 13, 3), int16] */;
    (%403,)
  };
  %404(%var_1970) /* ty=(Tensor[(4, 13, 3), int16],) */
}

def @func_3496(%var_3481: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), uint16] {
  %405 = @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %406 = %405.0;
  %407 = cast(%var_3481, dtype="uint16") /* ty=Tensor[(4, 13, 3), uint16] */;
  %408 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %409 = cast(%406, dtype="uint16") /* ty=Tensor[(4, 13, 3), uint16] */;
  %410 = dyn.reshape(%407, %408, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  multiply(%409, %410) /* ty=Tensor[(4, 13, 3), uint16] */
}

def @func_5173(%var_5166: Tensor[(11, 3, 10), float64]) -> Tensor[(11, 3, 10), float64] {
  %411 = cast(%var_5166, dtype="float64") /* ty=Tensor[(11, 3, 10), float64] */;
  atanh(%411) /* ty=Tensor[(11, 3, 10), float64] */
}

def @func_5529(%var_5519: Tensor[(396), float64]) -> (Tensor[(4, 13, 3), float32], Tensor[(4, 13, 3), float64], Tensor[(11, 12, 3), float64], Tensor[(396), float32]) {
  %412 = @func_4686() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %413 = %412.0;
  %414 = cast(%413, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %415 = @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %416 = cast(%var_5519, dtype="float64") /* ty=Tensor[(396), float64] */;
  %417 = reshape(%416, newshape=[11, 12, 3]) /* ty=Tensor[(11, 12, 3), float64] */;
  %418 = cast(%var_5519, dtype="float32") /* ty=Tensor[(396), float32] */;
  %419 = sin(%414) /* ty=Tensor[(4, 13, 3), float32] */;
  %420 = %415.0;
  %421 = @func_2875(%417) /* ty=Tensor[(11, 12, 3), float64] */;
  %422 = cosh(%418) /* ty=Tensor[(396), float32] */;
  (%419, %420, %421, %422)
}

def @func_2224(%var_2200: Tensor[(4, 13, 3), float64], %var_2206: Tensor[(1560, 1), float32], %var_2217: Tensor[(1092), float32]) -> (Tensor[(176), float64], Tensor[(1560, 1), float32], Tensor[(4, 13, 3), int16], Tensor[(4, 13, 3), float64], Tensor[(12, 13, 7), int64], Tensor[(1092), float32], Tensor[(4, 13, 3), float64]) {
  %423 = cast(%var_2206, dtype="float32") /* ty=Tensor[(1560, 1), float32] */;
  %424 = reshape(%423, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float32] */;
  %425 = @func_553(%424) /* ty=(Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) */;
  %426 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
  %427 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %428 = cast(%var_2217, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %429 = cast(%var_2217, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %430 = cast(%var_2217, dtype="float32") /* ty=Tensor[(1092), float32] */;
  %431 = %425.2;
  %432 = cast(%431, dtype="float64") /* ty=Tensor[(176), float64] */;
  %433 = reshape(%428, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %434 = reshape(%429, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %435 = reshape(%430, newshape=[12, 13, 7]) /* ty=Tensor[(12, 13, 7), float32] */;
  %436 = reshape(%432, newshape=[4, 44]) /* ty=Tensor[(4, 44), float64] */;
  %437 = @func_1305(%433, %434, %435, %436) /* ty=(Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) */;
  %438 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %439 = %438.0;
  %440 = cast(%var_2200, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = logical_and(%442, %443) /* ty=Tensor[(4, 13, 3), bool] */;
  %445 = cast(%444, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %446 = %426.1;
  %447 = %427.0;
  %448 = %437.4;
  %449 = log2(%445) /* ty=Tensor[(4, 13, 3), float64] */;
  (%431, %var_2206, %446, %447, %448, %var_2217, %449)
}

def @func_3978(%var_3976: Tensor[(6, 1, 14), float64]) -> (Tensor[(6, 1, 14), float64],) {
  @func_3975(%var_3976) /* ty=(Tensor[(6, 1, 14), float64],) */
}

def @func_1311(%var_1307: Tensor[(12, 13, 7), float32], %var_1308: Tensor[(12, 13, 7), float32], %var_1309: Tensor[(12, 13, 7), float32], %var_1310: Tensor[(4, 44), float64]) -> (Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) {
  @func_1305(%var_1307, %var_1308, %var_1309, %var_1310) /* ty=(Tensor[(12, 13, 7), bool], Tensor[(14, 12, 14), float64], Tensor[(2352), float64], Tensor[(12, 13, 7), uint64], Tensor[(12, 13, 7), int64], Tensor[(4, 44), float64], Tensor[(4, 4, 11), float64]) */
}

def @func_2601() -> (Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) {
  %450 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %451 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 176), float64] */, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %452 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 176), float64] */, dtype="float64") /* ty=Tensor[(1, 176), float64] */;
  %453 = reshape(%451, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %454 = reshape(%452, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
  %455 = @func_470(%453, %454) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
  %456 = cast(meta[relay.Constant][20] /* ty=Tensor[(1, 176), float64] */, dtype="bool") /* ty=Tensor[(1, 176), bool] */;
  %457 = cast(meta[relay.Constant][21] /* ty=Tensor[(10, 176), float64] */, dtype="bool") /* ty=Tensor[(10, 176), bool] */;
  %458 = %450.0;
  %459 = %455.2;
  %460 = greater(%456, %457) /* ty=Tensor[(10, 176), bool] */;
  (%458, %459, %460)
}

def @func_5419(%var_5418: Tensor[(2, 15, 4), float64]) -> Tensor[(2, 15, 4), float64] {
  %469 = fn (%var_5402: Tensor[(2, 15, 4), float64]) -> Tensor[(2, 15, 4), float64] {
    %461 = cast(%var_5402, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %462 = sigmoid(%461) /* ty=Tensor[(2, 15, 4), float64] */;
    %463 = cast(%462, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %464 = tan(%463) /* ty=Tensor[(2, 15, 4), float64] */;
    %465 = cast(%462, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %466 = shape_of(%464, dtype="int32") /* ty=Tensor[(3), int32] */;
    %467 = cast(%464, dtype="float64") /* ty=Tensor[(2, 15, 4), float64] */;
    %468 = dyn.reshape(%465, %466, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%467, %468) /* ty=Tensor[(2, 15, 4), float64] */
  };
  %469(%var_5418) /* ty=Tensor[(2, 15, 4), float64] */
}

def @func_6099(%var_6097: Tensor[(5, 15, 12), int32], %var_6098: Tensor[(5, 15, 12), int32]) -> (Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64]) {
  %479 = fn (%var_6077: Tensor[(5, 15, 12), int32], %var_6078: Tensor[(5, 15, 12), int32]) -> (Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64]) {
    %470 = cast(%var_6078, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
    %471 = shape_of(%var_6077, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%var_6077, dtype="bool") /* ty=Tensor[(5, 15, 12), bool] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %474 = cast(%var_6078, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    %475 = atan(%474) /* ty=Tensor[(5, 15, 12), float64] */;
    %476 = cast(%475, dtype="float64") /* ty=Tensor[(5, 15, 12), float64] */;
    %477 = equal(%472, %473) /* ty=Tensor[(5, 15, 12), bool] */;
    %478 = acos(%476) /* ty=Tensor[(5, 15, 12), float64] */;
    (%477, %478)
  };
  %479(%var_6097, %var_6098) /* ty=(Tensor[(5, 15, 12), bool], Tensor[(5, 15, 12), float64]) */
}

def @func_5865(%var_5863: uint16, %var_5864: Tensor[(8, 5, 4), uint16]) -> (Tensor[(8, 5, 4), bool],) {
  %483 = fn (%var_5846: uint16, %var_5847: Tensor[(8, 5, 4), uint16]) -> (Tensor[(8, 5, 4), bool],) {
    %480 = cast(%var_5846, dtype="bool") /* ty=bool */;
    %481 = cast(%var_5847, dtype="bool") /* ty=Tensor[(8, 5, 4), bool] */;
    %482 = equal(%480, %481) /* ty=Tensor[(8, 5, 4), bool] */;
    (%482,)
  };
  %483(%var_5863, %var_5864) /* ty=(Tensor[(8, 5, 4), bool],) */
}

def @func_2011() -> (Tensor[(4, 13, 3), float64],) {
  @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_2690() -> Tensor[(4, 13, 3), float64] {
  %484 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %484.0
}

def @func_4613() -> Tensor[(4, 13, 3), float64] {
  @func_1955() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_3426() -> (Tensor[(4, 13, 3), float64],) {
  @func_3424() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_3959() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 12, 3), int8], Tensor[(216), int8], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %495 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 12, 3), int8], Tensor[(216), int8], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
    %485 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
    %486 = cast(meta[relay.Constant][22] /* ty=Tensor[(216), int8] */, dtype="int8") /* ty=Tensor[(216), int8] */;
    %487 = reshape(%485, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
    %488 = reshape(%486, newshape=[6, 12, 3]) /* ty=Tensor[(6, 12, 3), int8] */;
    %489 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %490 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
    %491 = @func_1910() /* ty=Tensor[(4, 13, 3), float64] */;
    %492 = @func_2339(%487, %488) /* ty=Tensor[(6, 12, 3), int8] */;
    %493 = %489.0;
    %494 = @func_1910() /* ty=Tensor[(4, 13, 3), float64] */;
    (%490, %491, %492, meta[relay.Constant][22] /* ty=Tensor[(216), int8] */, %493, %494)
  };
  %495() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 12, 3), int8], Tensor[(216), int8], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_4052() -> Tensor[(4, 13, 3), bool] {
  @func_4050() /* ty=Tensor[(4, 13, 3), bool] */
}

def @func_4077() -> Tensor[(4, 13, 3), float64] {
  @func_4075() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4934() -> Tensor[(4, 13, 3), float64] {
  @func_4932() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4848() -> (Tensor[(4, 13, 3), float64],) {
  %497 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %496 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
    (%496,)
  };
  %497() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_3424() -> (Tensor[(4, 13, 3), float64],) {
  %498 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %499 = %498.1;
  (%499,)
}

def @func_3029() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) {
  %500 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 4), float64] */;
  %501 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 4), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(meta[relay.Constant][23] /* ty=Tensor[(7, 5, 4), float64] */, dtype="float64") /* ty=Tensor[(7, 5, 4), float64] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %504 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
  %505 = add(%502, %503) /* ty=Tensor[(7, 5, 4), float64] */;
  %506 = %504.0;
  (%505, %506)
}

def @func_5326() -> (Tensor[(4, 13, 3), float64],) {
  %509 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %507 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
    %508 = %507.0;
    (%508,)
  };
  %509() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_2001() -> (Tensor[(4, 13, 3), float64],) {
  %510 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  (%510,)
}

def @func_277(%var_272: Tensor[(11, 13, 2), float64]) -> Tensor[(11, 13, 2), float64] {
  %511 = cast(%var_272, dtype="float64") /* ty=Tensor[(11, 13, 2), float64] */;
  atanh(%511) /* ty=Tensor[(11, 13, 2), float64] */
}

def @func_3417() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) {
  %512 = @func_3029() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) */;
  %513 = @func_3343() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %514 = %512.0;
  %515 = %513.0;
  (%514, %515)
}

def @func_5928(%var_5926: Tensor[(7, 13, 16), int64], %var_5927: Tensor[(7, 13, 16), int64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(7, 13, 16), int16]) {
  @func_5924(%var_5926, %var_5927) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(7, 13, 16), int16]) */
}

def @func_6333() -> (Tensor[(12, 2, 6), float32], Tensor[(7, 12, 4), float64]) {
  %520 = fn () -> (Tensor[(12, 2, 6), float32], Tensor[(7, 12, 4), float64]) {
    %516 = cast(meta[relay.Constant][25] /* ty=Tensor[(12, 2, 6), float32] */, dtype="float32") /* ty=Tensor[(12, 2, 6), float32] */;
    %517 = @func_5142() /* ty=(Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) */;
    %518 = asin(%516) /* ty=Tensor[(12, 2, 6), float32] */;
    %519 = %517.1;
    (%518, %519)
  };
  %520() /* ty=(Tensor[(12, 2, 6), float32], Tensor[(7, 12, 4), float64]) */
}

def @func_4723(%var_4708: float64, %var_4709: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float64] {
  %521 = cast(%var_4708, dtype="float64") /* ty=float64 */;
  %522 = cast(%var_4709, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  floor_mod(%521, %522) /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_6422() -> (Tensor[(4, 13, 3), float64], Tensor[(7, 12, 4), float32]) {
  %526 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(7, 12, 4), float32]) {
    %523 = @func_6058() /* ty=(Tensor[(7, 12, 4), float32],) */;
    %524 = @func_2690() /* ty=Tensor[(4, 13, 3), float64] */;
    %525 = %523.0;
    (%524, %525)
  };
  %526() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(7, 12, 4), float32]) */
}

def @func_2692() -> Tensor[(4, 13, 3), float64] {
  @func_2690() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_1226(%var_1225: Tensor[(14, 6, 2), float32]) -> (Tensor[(14, 6, 2), float32], Tensor[(176), float64], Tensor[(1560), float64]) {
  %538 = fn (%var_1186: Tensor[(14, 6, 2), float32]) -> (Tensor[(14, 6, 2), float32], Tensor[(176), float64], Tensor[(1560), float64]) {
    %527 = cast(meta[relay.Constant][26] /* ty=Tensor[(14, 6, 2), float32] */, dtype="float32") /* ty=Tensor[(14, 6, 2), float32] */;
    %528 = shape_of(%var_1186, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%var_1186, dtype="float32") /* ty=Tensor[(14, 6, 2), float32] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %531 = cast(meta[relay.Constant][27] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
    %532 = reshape(%531, newshape=[10, 12, 13]) /* ty=Tensor[(10, 12, 13), float32] */;
    %533 = @func_553(%532) /* ty=(Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) */;
    %534 = cast(meta[relay.Constant][27] /* ty=Tensor[(1560), float32] */, dtype="float64") /* ty=Tensor[(1560), float64] */;
    %535 = mod(%529, %530) /* ty=Tensor[(14, 6, 2), float32] */;
    %536 = %533.2;
    %537 = asin(%534) /* ty=Tensor[(1560), float64] */;
    (%535, %536, %537)
  };
  %538(%var_1225) /* ty=(Tensor[(14, 6, 2), float32], Tensor[(176), float64], Tensor[(1560), float64]) */
}

def @func_2275() -> (Tensor[(4, 13, 3), float64],) {
  %539 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %540 = %539.0;
  (%540,)
}

def @func_473(%var_471: Tensor[(4, 4, 11), float64], %var_472: Tensor[(4, 4, 11), float64]) -> (Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) {
  %549 = fn (%var_459: Tensor[(4, 4, 11), float64], %var_460: Tensor[(4, 4, 11), float64]) -> (Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) {
    %541 = cast(%var_460, dtype="bool") /* ty=Tensor[(4, 4, 11), bool] */;
    %542 = shape_of(%var_459, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%var_459, dtype="bool") /* ty=Tensor[(4, 4, 11), bool] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %545 = cast(meta[relay.Constant][28] /* ty=Tensor[(286), float64] */, dtype="float64") /* ty=Tensor[(286), float64] */;
    %546 = reshape(%545, newshape=[11, 13, 2]) /* ty=Tensor[(11, 13, 2), float64] */;
    %547 = not_equal(%543, %544) /* ty=Tensor[(4, 4, 11), bool] */;
    %548 = @func_277(%546) /* ty=Tensor[(11, 13, 2), float64] */;
    (%547, %548, meta[relay.Constant][28] /* ty=Tensor[(286), float64] */)
  };
  %549(%var_471, %var_472) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */
}

def @func_2318(%var_2292: Tensor[(4, 14, 12), float64]) -> Tensor[(4, 14, 12), float64] {
  %550 = cast(meta[relay.Constant][29] /* ty=Tensor[(4, 14, 12), float64] */, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %551 = shape_of(%var_2292, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_2292, dtype="float64") /* ty=Tensor[(4, 14, 12), float64] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  floor_mod(%552, %553) /* ty=Tensor[(4, 14, 12), float64] */
}

def @func_4540() -> (Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(1, 280), float32]) {
  %564 = fn () -> (Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(1, 280), float32]) {
    %554 = @func_2646() /* ty=(Tensor[(4, 13, 3), bool],) */;
    %555 = @func_4175() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %556 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 280), float32] */, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
    %557 = cast(meta[relay.Constant][30] /* ty=Tensor[(1, 280), float32] */, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
    %558 = reshape(%556, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
    %559 = reshape(%557, newshape=[8, 5, 7]) /* ty=Tensor[(8, 5, 7), float32] */;
    %560 = @func_2915(%558, %559) /* ty=(Tensor[(8, 5, 7), float32], Tensor[(4, 13, 3), float64]) */;
    %561 = %554.0;
    %562 = %555.0;
    %563 = %560.1;
    (%561, %562, %563, meta[relay.Constant][30] /* ty=Tensor[(1, 280), float32] */)
  };
  %564() /* ty=(Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(1, 280), float32]) */
}

def @func_3276(%var_3274: Tensor[(12, 7, 6), float32], %var_3275: Tensor[(12, 7, 6), float32]) -> Tensor[(12, 7, 6), float32] {
  @func_3272(%var_3274, %var_3275) /* ty=Tensor[(12, 7, 6), float32] */
}

def @func_1836() -> Tensor[(4, 13, 3), float64] {
  @func_1834() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4075() -> Tensor[(4, 13, 3), float64] {
  @func_3191() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_1910() -> Tensor[(4, 13, 3), float64] {
  @func_1793() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_2603() -> (Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) {
  @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */
}

def @func_3140(%var_3139: Tensor[(10, 176), bool]) -> Tensor[(10, 176), bool] {
  %571 = fn (%var_3126: Tensor[(10, 176), bool]) -> Tensor[(10, 176), bool] {
    %565 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
    %566 = %565.2;
    %567 = cast(%var_3126, dtype="bool") /* ty=Tensor[(10, 176), bool] */;
    %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(2), int32] */;
    %569 = cast(%566, dtype="bool") /* ty=Tensor[(10, 176), bool] */;
    %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    logical_or(%569, %570) /* ty=Tensor[(10, 176), bool] */
  };
  %571(%var_3139) /* ty=Tensor[(10, 176), bool] */
}

def @func_2151(%var_2150: Tensor[(10, 1, 7), float32]) -> (Tensor[(10, 9, 7), float32],) {
  %575 = fn (%var_2134: Tensor[(10, 1, 7), float32]) -> (Tensor[(10, 9, 7), float32],) {
    %572 = cast(%var_2134, dtype="float32") /* ty=Tensor[(10, 1, 7), float32] */;
    %573 = cast(meta[relay.Constant][31] /* ty=Tensor[(10, 9, 7), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 7), float32] */;
    %574 = floor_mod(%572, %573) /* ty=Tensor[(10, 9, 7), float32] */;
    (%574,)
  };
  %575(%var_2150) /* ty=(Tensor[(10, 9, 7), float32],) */
}

def @func_5559() -> Tensor[(4, 13, 3), float64] {
  @func_5557() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_6178(%var_6176: Tensor[(3, 24), float64], %var_6177: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64], Tensor[(3, 24), float64], Tensor[(176), float64]) {
  @func_6174(%var_6176, %var_6177) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(3, 4, 6), float64], Tensor[(3, 24), float64], Tensor[(176), float64]) */
}

def @func_2752() -> (Tensor[(4, 13, 3), float64],) {
  @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_5255() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %580 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
    %576 = @func_3343() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
    %577 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %578 = %576.0;
    %579 = %577.0;
    (%578, %579)
  };
  %580() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_4687() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %586 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
    %581 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %582 = %581.0;
    %583 = cast(%582, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %584 = reshape(%583, newshape=[4, 13, 3]) /* ty=Tensor[(4, 13, 3), float64] */;
    %585 = @func_3221(%584) /* ty=Tensor[(4, 13, 3), float64] */;
    (%582, %585)
  };
  %586() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_3975(%var_3972: Tensor[(6, 1, 14), float64]) -> (Tensor[(6, 1, 14), float64],) {
  %587 = cast(%var_3972, dtype="float64") /* ty=Tensor[(6, 1, 14), float64] */;
  %588 = asin(%587) /* ty=Tensor[(6, 1, 14), float64] */;
  (%588,)
}

def @func_2342(%var_2340: Tensor[(6, 12, 3), int8], %var_2341: Tensor[(6, 12, 3), int8]) -> Tensor[(6, 12, 3), int8] {
  %593 = fn (%var_2333: Tensor[(6, 12, 3), int8], %var_2334: Tensor[(6, 12, 3), int8]) -> Tensor[(6, 12, 3), int8] {
    %589 = cast(%var_2334, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
    %590 = shape_of(%var_2333, dtype="int32") /* ty=Tensor[(3), int32] */;
    %591 = cast(%var_2333, dtype="int8") /* ty=Tensor[(6, 12, 3), int8] */;
    %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_or(%591, %592) /* ty=Tensor[(6, 12, 3), int8] */
  };
  %593(%var_2340, %var_2341) /* ty=Tensor[(6, 12, 3), int8] */
}

def @func_2724() -> (Tensor[(4, 13, 3), float64],) {
  %596 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %594 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %595 = %594.0;
    (%595,)
  };
  %596() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_4285() -> (Tensor[(4, 13, 3), float64],) {
  %597 = @func_2750() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %598 = %597.0;
  (%598,)
}

def @func_6584() -> (Tensor[(4, 13, 3), float64],) {
  %600 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %599 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
    (%599,)
  };
  %600() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_2003() -> (Tensor[(4, 13, 3), float64],) {
  @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_5643() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), bool]) {
  @func_5641() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), bool], Tensor[(4, 13, 3), bool]) */
}

def @func_3499(%var_3497: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), uint16] {
  @func_3496(%var_3497) /* ty=Tensor[(4, 13, 3), uint16] */
}

def @func_555(%var_554: Tensor[(10, 12, 13), float32]) -> (Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) {
  %609 = fn (%var_536: Tensor[(10, 12, 13), float32]) -> (Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) {
    %601 = cast(%var_536, dtype="float32") /* ty=Tensor[(10, 12, 13), float32] */;
    %602 = cast(meta[relay.Constant][32] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %603 = cast(meta[relay.Constant][32] /* ty=Tensor[(176), float64] */, dtype="float64") /* ty=Tensor[(176), float64] */;
    %604 = reshape(%602, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %605 = reshape(%603, newshape=[4, 4, 11]) /* ty=Tensor[(4, 4, 11), float64] */;
    %606 = @func_470(%604, %605) /* ty=(Tensor[(4, 4, 11), bool], Tensor[(11, 13, 2), float64], Tensor[(286), float64]) */;
    %607 = sigmoid(%601) /* ty=Tensor[(10, 12, 13), float32] */;
    %608 = %606.0;
    (%607, %608, meta[relay.Constant][32] /* ty=Tensor[(176), float64] */)
  };
  %609(%var_554) /* ty=(Tensor[(10, 12, 13), float32], Tensor[(4, 4, 11), bool], Tensor[(176), float64]) */
}

def @func_5713() -> Tensor[(4, 13, 3), float64] {
  @func_5711() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_3108(%var_3106: Tensor[(3, 4, 13), uint8], %var_3107: Tensor[(3, 4, 13), uint8]) -> (Tensor[(3, 4, 13), uint8],) {
  %615 = fn (%var_3096: Tensor[(3, 4, 13), uint8], %var_3097: Tensor[(3, 4, 13), uint8]) -> (Tensor[(3, 4, 13), uint8],) {
    %610 = cast(%var_3097, dtype="uint8") /* ty=Tensor[(3, 4, 13), uint8] */;
    %611 = shape_of(%var_3096, dtype="int32") /* ty=Tensor[(3), int32] */;
    %612 = cast(%var_3096, dtype="uint8") /* ty=Tensor[(3, 4, 13), uint8] */;
    %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %614 = add(%612, %613) /* ty=Tensor[(3, 4, 13), uint8] */;
    (%614,)
  };
  %615(%var_3106, %var_3107) /* ty=(Tensor[(3, 4, 13), uint8],) */
}

def @func_2856(%var_2854: Tensor[(2352), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(2352), uint8], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(14, 12, 14), float32]) {
  @func_2853(%var_2854) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(2352), uint8], Tensor[(10, 9, 7), float32], Tensor[(70), float32], Tensor[(14, 12, 14), float32]) */
}

def @func_5803(%var_5801: Tensor[(6, 5, 7), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 5, 7), float64]) {
  @func_5800(%var_5801) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 5, 7), float64]) */
}

def @func_5695(%var_5689: Tensor[(10, 9, 13), float32]) -> Tensor[(10, 9, 13), float32] {
  %616 = cast(meta[relay.Constant][33] /* ty=Tensor[(10, 9, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %617 = shape_of(%var_5689, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%var_5689, dtype="float32") /* ty=Tensor[(10, 9, 13), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  subtract(%618, %619) /* ty=Tensor[(10, 9, 13), float32] */
}

def @func_2009() -> (Tensor[(4, 13, 3), float64],) {
  %620 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  (%620,)
}

def @func_2515() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %621 = @func_2035() /* ty=Tensor[(4, 13, 3), float64] */;
  %622 = cast(%621, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
  %623 = acosh(%622) /* ty=Tensor[(4, 13, 3), float32] */;
  %624 = cast(%623, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %625 = asinh(%624) /* ty=Tensor[(4, 13, 3), float64] */;
  %626 = cast(%625, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %627 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %628 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
  %629 = erf(%626) /* ty=Tensor[(4, 13, 3), float64] */;
  (%627, %628, %629)
}

def @func_4087() -> (Tensor[(4, 13, 3), float64],) {
  %634 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %630 = @func_2189() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16]) */;
    %631 = %630.1;
    %632 = cast(%631, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
    %633 = cosh(%632) /* ty=Tensor[(4, 13, 3), float64] */;
    (%633,)
  };
  %634() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_3463(%var_3461: Tensor[(280), float32]) -> (Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 13, 3), float32]) {
  @func_3460(%var_3461) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(280), float32], Tensor[(4, 13, 3), float32]) */
}

def @func_3603() -> Tensor[(4, 13, 3), float64] {
  @func_3601() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4911() -> (Tensor[(4, 13, 3), float64],) {
  %637 = fn () -> (Tensor[(4, 13, 3), float64],) {
    %635 = @func_2515() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
    %636 = %635.2;
    (%636,)
  };
  %637() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_4003(%var_3985: Tensor[(10, 3, 6), float64]) -> (Tensor[(10, 3, 6), float64], Tensor[(10, 176), bool]) {
  %638 = cast(%var_3985, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %639 = @func_2601() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(10, 176), bool]) */;
  %640 = sinh(%638) /* ty=Tensor[(10, 3, 6), float64] */;
  %641 = %639.2;
  (%640, %641)
}

def @func_4832(%var_4831: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(176), float64]) {
  %651 = fn (%var_4828: Tensor[(176), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(176), float64]) {
    %642 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
    %643 = @func_3251() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), int16], Tensor[(3, 4, 13), uint8]) */;
    %644 = cast(%var_4828, dtype="float64") /* ty=Tensor[(176), float64] */;
    %645 = reshape(%644, newshape=[176]) /* ty=Tensor[(176), float64] */;
    %646 = @func_4447(%645) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(286), float64], Tensor[(36, 2), float64], Tensor[(176), float64]) */;
    %647 = @func_1834() /* ty=Tensor[(4, 13, 3), float64] */;
    %648 = %642.1;
    %649 = %643.1;
    %650 = %646.2;
    (%647, %648, %649, %650, %var_4828)
  };
  %651(%var_4831) /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(176), float64]) */
}

def @func_2966(%var_2965: Tensor[(4, 13, 3), float64]) -> (Tensor[(4, 13, 3), bool],) {
  %659 = fn (%var_2959: Tensor[(4, 13, 3), float64]) -> (Tensor[(4, 13, 3), bool],) {
    %652 = @func_2001() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %653 = %652.0;
    %654 = cast(%var_2959, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
    %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
    %656 = cast(%653, dtype="bool") /* ty=Tensor[(4, 13, 3), bool] */;
    %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %658 = less_equal(%656, %657) /* ty=Tensor[(4, 13, 3), bool] */;
    (%658,)
  };
  %659(%var_2965) /* ty=(Tensor[(4, 13, 3), bool],) */
}

def @func_5800(%var_5743: Tensor[(6, 5, 7), float64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(6, 5, 7), float64]) {
  %660 = @func_4847() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %661 = @func_5254() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %662 = %661.1;
  %663 = cast(%662, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %664 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %665 = shape_of(%var_5743, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%var_5743, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %668 = add(%666, %667) /* ty=Tensor[(6, 5, 7), float64] */;
  %669 = cast(%668, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %670 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(6, 5, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(meta[relay.Constant][34] /* ty=Tensor[(6, 5, 7), float64] */, dtype="float64") /* ty=Tensor[(6, 5, 7), float64] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %673 = %660.0;
  %674 = sinh(%663) /* ty=Tensor[(4, 13, 3), float64] */;
  %675 = subtract(%671, %672) /* ty=Tensor[(6, 5, 7), float64] */;
  (%673, %674, %675)
}

def @func_6701(%var_6650: Tensor[(9, 15, 15), uint32], %var_6651: Tensor[(9, 15, 15), uint32], %var_6661: Tensor[(9, 15, 15), uint32], %var_6673: Tensor[(390, 3), float32]) -> (Tensor[(9, 15, 15), float32], Tensor[(10, 9, 13), float32], Tensor[(390, 3), float32], Tensor[(9, 15, 15), float64], Tensor[(7, 5, 4), float64]) {
  %676 = cast(%var_6661, dtype="float32") /* ty=Tensor[(9, 15, 15), float32] */;
  %677 = shape_of(%var_6651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %678 = cast(%var_6651, dtype="float32") /* ty=Tensor[(9, 15, 15), float32] */;
  %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %680 = cast(%var_6673, dtype="float32") /* ty=Tensor[(390, 3), float32] */;
  %681 = reshape(%680, newshape=[10, 9, 13]) /* ty=Tensor[(10, 9, 13), float32] */;
  %682 = cast(%var_6651, dtype="uint32") /* ty=Tensor[(9, 15, 15), uint32] */;
  %683 = shape_of(%var_6650, dtype="int32") /* ty=Tensor[(3), int32] */;
  %684 = cast(%var_6650, dtype="uint32") /* ty=Tensor[(9, 15, 15), uint32] */;
  %685 = dyn.reshape(%682, %683, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %686 = left_shift(%684, %685) /* ty=Tensor[(9, 15, 15), uint32] */;
  %687 = cast(%686, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %688 = rsqrt(%687) /* ty=Tensor[(9, 15, 15), float64] */;
  %689 = cast(%688, dtype="int64") /* ty=Tensor[(9, 15, 15), int64] */;
  %690 = shape_of(%var_6651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(%var_6651, dtype="int64") /* ty=Tensor[(9, 15, 15), int64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %693 = bitwise_or(%691, %692) /* ty=Tensor[(9, 15, 15), int64] */;
  %694 = cast(%693, dtype="float64") /* ty=Tensor[(9, 15, 15), float64] */;
  %695 = @func_3417() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), float64]) */;
  %696 = floor_mod(%678, %679) /* ty=Tensor[(9, 15, 15), float32] */;
  %697 = @func_5695(%681) /* ty=Tensor[(10, 9, 13), float32] */;
  %698 = sigmoid(%694) /* ty=Tensor[(9, 15, 15), float64] */;
  %699 = %695.0;
  (%696, %697, %var_6673, %698, %699)
}

def @func_5143() -> (Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) {
  %704 = fn () -> (Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) {
    %700 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 12, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 12, 4), float32] */;
    %701 = cast(meta[relay.Constant][35] /* ty=Tensor[(7, 12, 4), float32] */, dtype="float64") /* ty=Tensor[(7, 12, 4), float64] */;
    %702 = rsqrt(%700) /* ty=Tensor[(7, 12, 4), float32] */;
    %703 = sigmoid(%701) /* ty=Tensor[(7, 12, 4), float64] */;
    (%702, %703)
  };
  %704() /* ty=(Tensor[(7, 12, 4), float32], Tensor[(7, 12, 4), float64]) */
}

def @func_689(%var_688: Tensor[(14, 12, 14), float64]) -> Tensor[(14, 12, 14), float64] {
  %706 = fn (%var_682: Tensor[(14, 12, 14), float64]) -> Tensor[(14, 12, 14), float64] {
    %705 = cast(%var_682, dtype="float64") /* ty=Tensor[(14, 12, 14), float64] */;
    sin(%705) /* ty=Tensor[(14, 12, 14), float64] */
  };
  %706(%var_688) /* ty=Tensor[(14, 12, 14), float64] */
}

def @func_1912() -> Tensor[(4, 13, 3), float64] {
  @func_1910() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4727(%var_4725: float64, %var_4726: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float64] {
  @func_4723(%var_4725, %var_4726) /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_5432(%var_5426: Tensor[(11, 6, 13), float64]) -> Tensor[(11, 6, 13), float64] {
  %707 = cast(%var_5426, dtype="float64") /* ty=Tensor[(11, 6, 13), float64] */;
  log(%707) /* ty=Tensor[(11, 6, 13), float64] */
}

def @func_3344() -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
  %711 = fn () -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) {
    %708 = @func_2009() /* ty=(Tensor[(4, 13, 3), float64],) */;
    %709 = %708.0;
    %710 = @func_1955() /* ty=Tensor[(4, 13, 3), float64] */;
    (%709, %710)
  };
  %711() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */
}

def @func_3031() -> (Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) {
  @func_3029() /* ty=(Tensor[(7, 5, 4), float64], Tensor[(4, 13, 3), bool]) */
}

def @func_2321(%var_2319: Tensor[(4, 14, 12), float64]) -> Tensor[(4, 14, 12), float64] {
  @func_2318(%var_2319) /* ty=Tensor[(4, 14, 12), float64] */
}

def @func_4148(%var_4147: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), uint32] {
  %717 = fn (%var_4136: Tensor[(4, 13, 3), float64]) -> Tensor[(4, 13, 3), uint32] {
    %712 = @func_4075() /* ty=Tensor[(4, 13, 3), float64] */;
    %713 = cast(%var_4136, dtype="uint32") /* ty=Tensor[(4, 13, 3), uint32] */;
    %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
    %715 = cast(%712, dtype="uint32") /* ty=Tensor[(4, 13, 3), uint32] */;
    %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    minimum(%715, %716) /* ty=Tensor[(4, 13, 3), uint32] */
  };
  %717(%var_4147) /* ty=Tensor[(4, 13, 3), uint32] */
}

def @func_4287() -> (Tensor[(4, 13, 3), float64],) {
  @func_4285() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_5816() -> Tensor[(4, 13, 3), float64] {
  @func_5814() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_1957() -> Tensor[(4, 13, 3), float64] {
  @func_1955() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5924(%var_5877: Tensor[(7, 13, 16), int64], %var_5878: Tensor[(7, 13, 16), int64]) -> (Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64], Tensor[(7, 13, 16), int16]) {
  %718 = @func_4285() /* ty=(Tensor[(4, 13, 3), float64],) */;
  %719 = @func_3343() /* ty=(Tensor[(4, 13, 3), float64], Tensor[(4, 13, 3), float64]) */;
  %720 = cast(%var_5878, dtype="int64") /* ty=Tensor[(7, 13, 16), int64] */;
  %721 = shape_of(%var_5877, dtype="int32") /* ty=Tensor[(3), int32] */;
  %722 = cast(%var_5877, dtype="int64") /* ty=Tensor[(7, 13, 16), int64] */;
  %723 = dyn.reshape(%720, %721, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %724 = bitwise_xor(%722, %723) /* ty=Tensor[(7, 13, 16), int64] */;
  %725 = cast(%var_5877, dtype="int16") /* ty=Tensor[(7, 13, 16), int16] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="int16") /* ty=Tensor[(7, 13, 16), int16] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %729 = %718.0;
  %730 = %719.1;
  %731 = maximum(%727, %728) /* ty=Tensor[(7, 13, 16), int16] */;
  (%729, %730, %731)
}

def @func_2537(%var_2535: Tensor[(3, 4, 13), int8], %var_2536: Tensor[(3, 4, 13), int8]) -> (Tensor[(3, 4, 13), int8],) {
  %737 = fn (%var_2518: Tensor[(3, 4, 13), int8], %var_2519: Tensor[(3, 4, 13), int8]) -> (Tensor[(3, 4, 13), int8],) {
    %732 = cast(%var_2519, dtype="int8") /* ty=Tensor[(3, 4, 13), int8] */;
    %733 = shape_of(%var_2518, dtype="int32") /* ty=Tensor[(3), int32] */;
    %734 = cast(%var_2518, dtype="int8") /* ty=Tensor[(3, 4, 13), int8] */;
    %735 = dyn.reshape(%732, %733, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %736 = bitwise_or(%734, %735) /* ty=Tensor[(3, 4, 13), int8] */;
    (%736,)
  };
  %737(%var_2535, %var_2536) /* ty=(Tensor[(3, 4, 13), int8],) */
}

def @func_1834() -> Tensor[(4, 13, 3), float64] {
  %738 = @func_1793() /* ty=Tensor[(4, 13, 3), float64] */;
  %739 = cast(meta[relay.Constant][36] /* ty=Tensor[(4, 13, 3), float64] */, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="float64") /* ty=Tensor[(4, 13, 3), float64] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%741, %742) /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_5176(%var_5174: Tensor[(11, 3, 10), float64]) -> Tensor[(11, 3, 10), float64] {
  @func_5173(%var_5174) /* ty=Tensor[(11, 3, 10), float64] */
}

def @func_1795() -> Tensor[(4, 13, 3), float64] {
  @func_1793() /* ty=Tensor[(4, 13, 3), float64] */
}

def @func_4006(%var_4004: Tensor[(10, 3, 6), float64]) -> (Tensor[(10, 3, 6), float64], Tensor[(10, 176), bool]) {
  @func_4003(%var_4004) /* ty=(Tensor[(10, 3, 6), float64], Tensor[(10, 176), bool]) */
}

def @func_4928() -> (Tensor[(1, 15, 4), float32],) {
  @func_4926() /* ty=(Tensor[(1, 15, 4), float32],) */
}

def @func_2277() -> (Tensor[(4, 13, 3), float64],) {
  @func_2275() /* ty=(Tensor[(4, 13, 3), float64],) */
}

def @func_5595(%var_5594: Tensor[(4, 13, 3), bool]) -> (Tensor[(4, 13, 3), float32],) {
  %749 = fn (%var_5584: Tensor[(4, 13, 3), bool]) -> (Tensor[(4, 13, 3), float32],) {
    %743 = @func_4050() /* ty=Tensor[(4, 13, 3), bool] */;
    %744 = cast(%var_5584, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
    %745 = shape_of(%743, dtype="int32") /* ty=Tensor[(3), int32] */;
    %746 = cast(%743, dtype="float32") /* ty=Tensor[(4, 13, 3), float32] */;
    %747 = dyn.reshape(%744, %745, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %748 = power(%746, %747) /* ty=Tensor[(4, 13, 3), float32] */;
    (%748,)
  };
  %749(%var_5594) /* ty=(Tensor[(4, 13, 3), float32],) */
}

def @func_5541() -> Tensor[(4, 13, 3), float64] {
  @func_3601() /* ty=Tensor[(4, 13, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen12/build/output.py:2226: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen12/build/output.py", line 2231, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(572) tvmgen_default_fused_cast_less_equal_kernel0(signed char* __restrict__ T_less_equal, signed char* __restrict__ placeholder, uchar* __restrict__ placeholder1) {
  T_less_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[((((int)threadIdx.x) / 11))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

