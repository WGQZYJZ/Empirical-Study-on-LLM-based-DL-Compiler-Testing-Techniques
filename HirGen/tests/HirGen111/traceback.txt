==========mod==========
#[version = "0.0.5"]
def @func_7797(%var_7753: Tensor[(4, 3, 6), float64], %var_7774: Tensor[(720), float64]) -> (Tensor[(4, 3, 6), int32], Tensor[(10, 10, 2), float32], Tensor[(2880), int8], Tensor[(720), float64], Tensor[(10, 10, 2), float32]) {
  %0 = cast(%var_7753, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %1 = log10(%0) /* ty=Tensor[(4, 3, 6), float64] */;
  %2 = cast(%1, dtype="int32") /* ty=Tensor[(4, 3, 6), int32] */;
  %3 = shape_of(%var_7753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_7753, dtype="int32") /* ty=Tensor[(4, 3, 6), int32] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %6 = cast(%var_7774, dtype="float64") /* ty=Tensor[(720), float64] */;
  %7 = reshape(%6, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float64] */;
  %8 = @func_1366(%7) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */;
  %9 = @func_3400() /* ty=Tensor[(10, 10, 2), float32] */;
  %10 = cast(%9, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %11 = reshape(%10, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %12 = @func_2142(%11) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */;
  %13 = right_shift(%4, %5) /* ty=Tensor[(4, 3, 6), int32] */;
  %14 = %8.3;
  %15 = %12.1;
  (%13, %9, %14, %var_7774, %15)
}

def @func_4263() -> Tensor[(10, 10, 2), float32] {
  %16 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %16.0
}

def @func_5142() -> Tensor[(10, 10, 2), float32] {
  @func_2090() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2090() -> Tensor[(10, 10, 2), float32] {
  @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2735() -> (Tensor[(98, 4), float64], Tensor[(10, 1, 2), float64]) {
  %17 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
  %18 = %17.1;
  %19 = cast(%18, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %20 = exp(%19) /* ty=Tensor[(98, 4), float64] */;
  %21 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  (%20, %21)
}

def @func_5251() -> Tensor[(6, 12, 7), int32] {
  %22 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %22.0
}

def @func_7318() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) {
  %23 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %24 = @func_7096() /* ty=(Tensor[(10, 10, 2), float64],) */;
  %25 = %23.0;
  %26 = %24.0;
  %27 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
  (%25, %26, %27)
}

def @func_5406() -> Tensor[(10, 10, 2), float32] {
  @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_474(%var_467: Tensor[(7, 8, 7), int8]) -> Tensor[(7, 8, 7), int8] {
  %28 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 1, 7), int8] */, dtype="int8") /* ty=Tensor[(7, 1, 7), int8] */;
  %29 = cast(%var_467, dtype="int8") /* ty=Tensor[(7, 8, 7), int8] */;
  logical_xor(%28, %29) /* ty=Tensor[(7, 8, 7), int8] */
}

def @func_6577(%var_6537: Tensor[(392), int8], %var_6547: Tensor[(336), uint64], %var_6568: Tensor[(12), float32], %var_6574: Tensor[(192, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(2880), float32], Tensor[(336), uint64], Tensor[(20), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32], Tensor[(10, 10, 2), float32], Tensor[(3, 16, 8), float64], Tensor[(192, 2), float32]) {
  %30 = @func_1597() /* ty=Tensor[(10, 10, 2), float32] */;
  %31 = cast(%30, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %32 = cast(%var_6537, dtype="int8") /* ty=Tensor[(392), int8] */;
  %33 = reshape(%32, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %34 = cast(%var_6547, dtype="uint64") /* ty=Tensor[(336), uint64] */;
  %35 = cast(%var_6547, dtype="uint64") /* ty=Tensor[(336), uint64] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %37 = reshape(%34, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), uint64] */;
  %38 = reshape(%35, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), uint64] */;
  %39 = reshape(%36, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %40 = @func_6425(%37, %38, %39) /* ty=(Tensor[(3, 8, 14), bool], Tensor[(2880), float32], Tensor[(20), float64]) */;
  %41 = cast(%var_6568, dtype="float32") /* ty=Tensor[(12), float32] */;
  %42 = reshape(%41, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %43 = @func_1276(%42) /* ty=(Tensor[(2, 1, 6), float64],) */;
  %44 = cast(%var_6574, dtype="float32") /* ty=Tensor[(192, 2), float32] */;
  %45 = reshape(%44, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
  %46 = acosh(%31) /* ty=Tensor[(10, 10, 2), float32] */;
  %47 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
  %48 = @func_4300() /* ty=Tensor[(10, 10, 2), float32] */;
  %49 = @func_474(%33) /* ty=Tensor[(7, 8, 7), int8] */;
  %50 = %40.1;
  %51 = %43.0;
  %52 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %53 = @func_1699(%45) /* ty=Tensor[(3, 16, 8), float64] */;
  (%46, %47, %48, %49, %var_6537, %50, %var_6547, meta[relay.Constant][1] /* ty=Tensor[(20), float64] */, %51, %var_6568, %52, %53, %var_6574)
}

def @func_8634() -> (Tensor[(10, 10, 2), float32],) {
  %54 = @func_4902() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2, ?, 6), bool], Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(384), float32]) */;
  %55 = %54.1;
  (%55,)
}

def @func_3761(%var_3757: Tensor[(12), float32]) -> (Tensor[(5, 4), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) {
  %56 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %57 = cast(%var_3757, dtype="float32") /* ty=Tensor[(12), float32] */;
  %58 = reshape(%57, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %59 = @func_1276(%58) /* ty=(Tensor[(2, 1, 6), float64],) */;
  %60 = %56.0;
  %61 = %59.0;
  (%60, %61, %var_3757)
}

def @func_6425(%var_6393: Tensor[(3, 8, 14), uint64], %var_6394: Tensor[(3, 8, 14), uint64], %var_6415: Tensor[(20), float64]) -> (Tensor[(3, 8, 14), bool], Tensor[(2880), float32], Tensor[(20), float64]) {
  %62 = cast(%var_6394, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %63 = shape_of(%var_6393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_6393, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = cast(%var_6415, dtype="float64") /* ty=Tensor[(20), float64] */;
  %67 = reshape(%66, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %68 = @func_4063(%67) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
  %69 = equal(%64, %65) /* ty=Tensor[(3, 8, 14), bool] */;
  %70 = %68.1;
  (%69, %70, %var_6415)
}

def @func_1276(%var_1238: Tensor[(2, 1, 6), float32]) -> (Tensor[(2, 1, 6), float64],) {
  %71 = cast(%var_1238, dtype="float32") /* ty=Tensor[(2, 1, 6), float32] */;
  %72 = rsqrt(%71) /* ty=Tensor[(2, 1, 6), float32] */;
  %73 = cast(%72, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
  %74 = atanh(%73) /* ty=Tensor[(2, 1, 6), float64] */;
  (%74,)
}

def @func_8572() -> Tensor[(10, 10, 2), float32] {
  %75 = @func_8208() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %75.0
}

def @func_6679(%var_6668: Tensor[(9, 13, 13), uint8]) -> Tensor[(9, 13, 13), bool] {
  %76 = cast(%var_6668, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %77 = shape_of(meta[relay.Constant][2] /* ty=Tensor[(9, 13, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(meta[relay.Constant][2] /* ty=Tensor[(9, 13, 13), uint8] */, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%78, %79) /* ty=Tensor[(9, 13, 13), bool] */
}

def @func_1321() -> (Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) {
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 13, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
  %81 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
  %82 = reshape(%81, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %83 = @func_276(%82) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %84 = sinh(%80) /* ty=Tensor[(2, 13, 2), float64] */;
  %85 = %83.0;
  (%84, %85, meta[relay.Constant][4] /* ty=Tensor[(5, 4), float64] */)
}

def @func_8199(%var_8140: Tensor[(13, 10, 2), float32], %var_8153: Tensor[(2880), float32]) -> (Tensor[(13, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(2880), uint16], Tensor[(10, 10, 2), float32]) {
  %86 = cast(%var_8140, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
  %87 = cast(%var_8153, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %88 = reshape(%87, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), float32] */;
  %89 = @func_2294(%88) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */;
  %90 = cast(%var_8153, dtype="float64") /* ty=Tensor[(2880), float64] */;
  %91 = atanh(%90) /* ty=Tensor[(2880), float64] */;
  %92 = cast(%91, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %93 = erf(%92) /* ty=Tensor[(2880), float32] */;
  %94 = cast(%91, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
  %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(1), int32] */;
  %96 = cast(%93, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
  %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %98 = erf(%86) /* ty=Tensor[(13, 10, 2), float32] */;
  %99 = %89.0;
  %100 = bitwise_or(%96, %97) /* ty=Tensor[(2880), uint16] */;
  %101 = @func_3101() /* ty=Tensor[(10, 10, 2), float32] */;
  (%98, %99, %100, %101)
}

def @func_5093() -> Tensor[(10, 10, 2), float32] {
  @func_1439() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4300() -> Tensor[(10, 10, 2), float32] {
  @func_3342() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2838() -> (Tensor[(20), float64], Tensor[(10, 10, 2), float32]) {
  %102 = @func_2814() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) */;
  %103 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %104 = %102.3;
  %105 = %103.0;
  (%104, %105)
}

def @func_6727() -> (Tensor[(6, 12, 7), int32], Tensor[(10, 1, 2), float64]) {
  %106 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
  %107 = @func_4523() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) */;
  %108 = %106.2;
  %109 = %107.1;
  (%108, %109)
}

def @func_7859() -> (Tensor[(10, 10, 2), float32],) {
  %110 = @func_5276() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %111 = %110.0;
  (%111,)
}

def @func_4495() -> (Tensor[(10, 10, 2), float32],) {
  %112 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %113 = %112.0;
  (%113,)
}

def @func_4624() -> (Tensor[(6, 12, 7), int32],) {
  %114 = cast(meta[relay.Constant][6] /* ty=Tensor[(6, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
  %115 = shape_of(meta[relay.Constant][5] /* ty=Tensor[(6, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %118 = right_shift(%116, %117) /* ty=Tensor[(6, 12, 7), int32] */;
  (%118,)
}

def @func_8580() -> Tensor[(10, 10, 2), float32] {
  %119 = @func_4495() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %119.0
}

def @func_276(%var_271: Tensor[(10, 1, 2), float64]) -> (Tensor[(10, 1, 2), float64],) {
  %120 = cast(%var_271, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %121 = atan(%120) /* ty=Tensor[(10, 1, 2), float64] */;
  (%121,)
}

def @func_2463(%var_2425: Tensor[(10, 10, 2), float32], %var_2456: Tensor[(2880), float32], %var_2459: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) {
  %122 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
  %123 = cast(%var_2425, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %127 = cast(%var_2456, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %128 = reshape(%127, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), float32] */;
  %129 = @func_2294(%128) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */;
  %130 = cast(%var_2456, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %131 = cast(%var_2456, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %132 = cast(%var_2459, dtype="float64") /* ty=Tensor[(20), float64] */;
  %133 = reshape(%130, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %134 = reshape(%131, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %135 = reshape(%132, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %136 = @func_599(%133, %134, %135) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %137 = minimum(%125, %126) /* ty=Tensor[(10, 10, 2), float64] */;
  %138 = %129.4;
  %139 = %136.3;
  (%137, %138, %var_2456, %139, %var_2459)
}

def @func_1597() -> Tensor[(10, 10, 2), float32] {
  @func_1439() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2506() -> Tensor[(10, 10, 2), float32] {
  @func_2377() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3963(%var_3953: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(20), float64]) {
  %140 = cast(%var_3953, dtype="float64") /* ty=Tensor[(20), float64] */;
  %141 = reshape(%140, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %142 = @func_276(%141) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %143 = @func_2838() /* ty=(Tensor[(20), float64], Tensor[(10, 10, 2), float32]) */;
  %144 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %145 = %142.0;
  %146 = %143.0;
  (%144, %145, %var_3953, %146)
}

def @func_5116(%var_5107: Tensor[(98, 4), int8]) -> (Tensor[(98, 4), float64], Tensor[(10, 10, 2), float32]) {
  %147 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
  %148 = %147.1;
  %149 = cast(%var_5107, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %150 = shape_of(%148, dtype="int32") /* ty=Tensor[(2), int32] */;
  %151 = cast(%148, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %152 = dyn.reshape(%149, %150, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %153 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %154 = mod(%151, %152) /* ty=Tensor[(98, 4), float64] */;
  %155 = %153.0;
  (%154, %155)
}

def @func_6235(%var_6217: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), float64], Tensor[(10, 10, 2), float32]) {
  %156 = cast(%var_6217, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
  %157 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %158 = acos(%156) /* ty=Tensor[(3, 16, 14), float64] */;
  %159 = %157.0;
  (%158, %159)
}

def @func_4941(%var_4928: Tensor[(7, 16, 11), bool], %var_4929: Tensor[(7, 16, 11), bool]) -> Tensor[(7, 16, 11), bool] {
  %160 = cast(%var_4929, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
  %161 = shape_of(%var_4928, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%var_4928, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%162, %163) /* ty=Tensor[(7, 16, 11), bool] */
}

def @main(%var_8837: Tensor[(48, 60), float32]) -> (Tensor[(10, 10, 2), uint32], Tensor[(48, 60), int32], Tensor[(48, 60), float64]) {
  %164 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
  %165 = @func_8120() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(48, 60), float32]) */;
  %166 = %165.2;
  %167 = cast(meta[relay.Constant][7] /* ty=Tensor[(48, 60), float32] */, dtype="int32") /* ty=Tensor[(48, 60), int32] */;
  %168 = shape_of(%166, dtype="int32") /* ty=Tensor[(2), int32] */;
  %169 = cast(%166, dtype="int32") /* ty=Tensor[(48, 60), int32] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %171 = cast(%var_8837, dtype="float64") /* ty=Tensor[(48, 60), float64] */;
  %172 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(48, 60), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %173 = cast(meta[relay.Constant][7] /* ty=Tensor[(48, 60), float32] */, dtype="float64") /* ty=Tensor[(48, 60), float64] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %175 = %164.0;
  %176 = add(%169, %170) /* ty=Tensor[(48, 60), int32] */;
  %177 = power(%173, %174) /* ty=Tensor[(48, 60), float64] */;
  (%175, %176, %177)
}

def @func_1366(%var_1338: Tensor[(3, 15, 16), float64]) -> (Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) {
  %178 = cast(meta[relay.Constant][8] /* ty=Tensor[(98, 4), int8] */, dtype="int8") /* ty=Tensor[(98, 4), int8] */;
  %179 = reshape(%178, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %180 = cast(meta[relay.Constant][9] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %181 = cast(meta[relay.Constant][9] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %182 = cast(meta[relay.Constant][10] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %183 = reshape(%180, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %184 = reshape(%181, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %185 = reshape(%182, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %186 = @func_599(%183, %184, %185) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %187 = cast(%var_1338, dtype="float64") /* ty=Tensor[(3, 15, 16), float64] */;
  %188 = asinh(%187) /* ty=Tensor[(3, 15, 16), float64] */;
  %189 = cast(%188, dtype="float32") /* ty=Tensor[(3, 15, 16), float32] */;
  %190 = @func_474(%179) /* ty=Tensor[(7, 8, 7), int8] */;
  %191 = %186.2;
  %192 = sqrt(%189) /* ty=Tensor[(3, 15, 16), float32] */;
  (%190, meta[relay.Constant][8] /* ty=Tensor[(98, 4), int8] */, %191, meta[relay.Constant][9] /* ty=Tensor[(2880), int8] */, meta[relay.Constant][10] /* ty=Tensor[(20), float64] */, %192)
}

def @func_4798() -> (Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) {
  %193 = @func_4723() /* ty=Tensor[(10, 10, 2), float32] */;
  %194 = cast(%193, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %195 = log10(%194) /* ty=Tensor[(10, 10, 2), float32] */;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %197 = sqrt(%196) /* ty=Tensor[(10, 10, 2), float32] */;
  %198 = cast(%195, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %199 = shape_of(%197, dtype="int32") /* ty=Tensor[(3), int32] */;
  %200 = cast(%197, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %201 = dyn.reshape(%198, %199, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %202 = cast(%197, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %203 = reshape(%202, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %204 = @func_3296(%203) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */;
  %205 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %206 = right_shift(%200, %201) /* ty=Tensor[(10, 10, 2), uint32] */;
  %207 = %204.1;
  %208 = %205.0;
  (%206, %207, %208)
}

def @func_7556(%var_7549: Tensor[(225, 6), float32]) -> Tensor[(225, 6), int32] {
  %209 = @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */;
  %210 = %209.4;
  %211 = cast(%210, dtype="int32") /* ty=Tensor[(225, 1), int32] */;
  %212 = cast(%var_7549, dtype="int32") /* ty=Tensor[(225, 6), int32] */;
  logical_xor(%211, %212) /* ty=Tensor[(225, 6), int32] */
}

def @func_6318() -> (Tensor[(10, 10, 2), float32],) {
  %213 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  (%213,)
}

def @func_4352() -> (Tensor[(10, 10, 2), float32],) {
  %214 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  (%214,)
}

def @func_4552() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) {
  %215 = @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */;
  %216 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %217 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  %218 = %215.2;
  (%216, %217, %218)
}

def @func_7647(%var_7641: uint64, %var_7642: Tensor[(7, 15, 10), uint64]) -> Tensor[(7, 15, 10), uint64] {
  %219 = cast(%var_7641, dtype="uint64") /* ty=uint64 */;
  %220 = cast(%var_7642, dtype="uint64") /* ty=Tensor[(7, 15, 10), uint64] */;
  logical_xor(%219, %220) /* ty=Tensor[(7, 15, 10), uint64] */
}

def @func_6800() -> (Tensor[(10, 10, 2), float32],) {
  %221 = @func_5276() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %222 = %221.0;
  (%222,)
}

def @func_4824() -> (Tensor[(10, 1, 2), float64],) {
  %223 = @func_4523() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) */;
  %224 = %223.1;
  (%224,)
}

def @func_3342() -> Tensor[(10, 10, 2), float32] {
  @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1902(%var_1892: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), uint32], Tensor[(5, 15, 3), float32], Tensor[(225), float32]) {
  %225 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %226 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  %227 = cast(%var_1892, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(3), int32] */;
  %229 = cast(%226, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(225), float32] */, dtype="float32") /* ty=Tensor[(225), float32] */;
  %232 = reshape(%231, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), float32] */;
  %233 = @func_1529(%232) /* ty=(Tensor[(5, 15, 3), float32],) */;
  %234 = %225.0;
  %235 = add(%229, %230) /* ty=Tensor[(10, 10, 2), uint32] */;
  %236 = %233.0;
  (%234, %235, %236, meta[relay.Constant][11] /* ty=Tensor[(225), float32] */)
}

def @func_5086() -> (Tensor[(10, 1, 2), float64],) {
  %237 = @func_2814() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) */;
  %238 = %237.2;
  (%238,)
}

def @func_3189() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) {
  %239 = cast(meta[relay.Constant][12] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %240 = reshape(%239, newshape=[10, 2]) /* ty=Tensor[(10, 2), float32] */;
  %241 = @func_1078(%240) /* ty=(Tensor[(10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) */;
  %242 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %243 = %241.1;
  (%242, %243, meta[relay.Constant][12] /* ty=Tensor[(20), float32] */)
}

def @func_7150() -> (Tensor[(10, 10, 2), float32],) {
  %244 = @func_5093() /* ty=Tensor[(10, 10, 2), float32] */;
  (%244,)
}

def @func_4716(%var_4699: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(200), float32], Tensor[(10, 10, 2), uint8]) {
  %245 = @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */;
  %246 = %245.1;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %248 = reshape(%247, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %249 = @func_3046(%248) /* ty=(Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) */;
  %250 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %251 = %250.0;
  %252 = cast(%var_4699, dtype="uint8") /* ty=Tensor[(10, 10, 2), uint8] */;
  %253 = shape_of(%251, dtype="int32") /* ty=Tensor[(3), int32] */;
  %254 = cast(%251, dtype="uint8") /* ty=Tensor[(10, 10, 2), uint8] */;
  %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %256 = %249.2;
  %257 = bitwise_and(%254, %255) /* ty=Tensor[(10, 10, 2), uint8] */;
  (%246, %256, %257)
}

def @func_4723() -> Tensor[(10, 10, 2), float32] {
  @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6356() -> (Tensor[(10, 10, 2), float32],) {
  %258 = @func_2506() /* ty=Tensor[(10, 10, 2), float32] */;
  (%258,)
}

def @func_4112() -> (Tensor[(10, 10, 2), float32],) {
  %259 = @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %260 = %259.1;
  (%260,)
}

def @func_3379() -> (Tensor[(10, 10, 2), float32],) {
  %261 = @func_1833() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %262 = %261.0;
  (%262,)
}

def @func_8345() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) {
  %263 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %264 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %265 = @func_6882() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) */;
  %266 = %263.0;
  %267 = %264.0;
  %268 = %265.2;
  (%266, %267, %268)
}

def @func_7981(%var_7950: Tensor[(2880), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) {
  %269 = cast(%var_7950, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %270 = reshape(%269, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), float32] */;
  %271 = @func_2294(%270) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */;
  %272 = cast(meta[relay.Constant][13] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %273 = reshape(%272, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %274 = cast(meta[relay.Constant][14] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %275 = reshape(%274, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %276 = @func_4063(%275) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
  %277 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %278 = %271.4;
  %279 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %280 = @func_474(%273) /* ty=Tensor[(7, 8, 7), int8] */;
  %281 = %276.0;
  (%277, %278, %var_7950, %279, %280, meta[relay.Constant][13] /* ty=Tensor[(392), int8] */, %281, meta[relay.Constant][14] /* ty=Tensor[(20), float64] */)
}

def @func_1439() -> Tensor[(10, 10, 2), float32] {
  %282 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
  %283 = %282.1;
  %284 = cast(%283, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %285 = cast(meta[relay.Constant][15] /* ty=Tensor[(10, 10, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %286 = greater_equal(%284, %285) /* ty=Tensor[(10, 10, 2), bool] */;
  %287 = cast(%286, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %288 = rsqrt(%287) /* ty=Tensor[(10, 10, 2), float32] */;
  %289 = cast(%288, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  exp(%289) /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_5716() -> (Tensor[(5, 4), float64], Tensor[(5, 4), float64]) {
  %290 = @func_4232() /* ty=(Tensor[(5, 4), float64],) */;
  %291 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %292 = %290.0;
  %293 = %291.0;
  (%292, %293)
}

def @func_5981() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(720), float64]) {
  %294 = cast(meta[relay.Constant][16] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %295 = reshape(%294, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %296 = @func_1582(%295) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(720), float64], Tensor[(10, 1, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %297 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  %298 = %296.4;
  (%297, %298, meta[relay.Constant][16] /* ty=Tensor[(720), float64] */)
}

def @func_6838() -> (Tensor[(10, 10, 2), float32],) {
  %299 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  (%299,)
}

def @func_4232() -> (Tensor[(5, 4), float64],) {
  %300 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
  %301 = %300.2;
  (%301,)
}

def @func_5196(%var_5190: Tensor[(4, 8, 11), bool], %var_5191: Tensor[(4, 8, 11), bool]) -> Tensor[(4, 8, 11), bool] {
  %302 = cast(%var_5191, dtype="bool") /* ty=Tensor[(4, 8, 11), bool] */;
  %303 = shape_of(%var_5190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%var_5190, dtype="bool") /* ty=Tensor[(4, 8, 11), bool] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%304, %305) /* ty=Tensor[(4, 8, 11), bool] */
}

def @func_8614(%var_8602: Tensor[(8, 13, 2), float64]) -> (Tensor[(8, 13, 2), float64],) {
  %306 = cast(%var_8602, dtype="float64") /* ty=Tensor[(8, 13, 2), float64] */;
  %307 = sigmoid(%306) /* ty=Tensor[(8, 13, 2), float64] */;
  (%307,)
}

def @func_7194() -> (Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 1, 2), float32]) {
  %308 = @func_7076() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %309 = cast(meta[relay.Constant][17] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %310 = reshape(%309, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %311 = @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */;
  %312 = %311.0;
  %313 = cast(%312, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %314 = erf(%313) /* ty=Tensor[(10, 1, 2), float64] */;
  %315 = cast(%314, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %316 = %308.0;
  %317 = @func_474(%310) /* ty=Tensor[(7, 8, 7), int8] */;
  %318 = acos(%315) /* ty=Tensor[(10, 1, 2), float32] */;
  (%316, %317, meta[relay.Constant][17] /* ty=Tensor[(392), int8] */, %318)
}

def @func_7681(%var_7676: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 1, 2), float32], Tensor[(10, 7, 2), bool]) {
  %319 = @func_5086() /* ty=(Tensor[(10, 1, 2), float64],) */;
  %320 = %319.0;
  %321 = cast(%320, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %322 = cast(%320, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %323 = cast(%var_7676, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %324 = cosh(%321) /* ty=Tensor[(10, 1, 2), float32] */;
  %325 = equal(%322, %323) /* ty=Tensor[(10, 7, 2), bool] */;
  (%324, %325)
}

def @func_4484() -> (Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) {
  %326 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %327 = cast(%326, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %328 = reshape(%327, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %329 = @func_3046(%328) /* ty=(Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) */;
  %330 = @func_4352() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %331 = %329.0;
  %332 = %330.0;
  (%326, %331, %332)
}

def @func_7373() -> Tensor[(10, 10, 2), float32] {
  %333 = @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %333.0
}

def @func_7465() -> (Tensor[(10, 10, 2), float32],) {
  %334 = @func_3101() /* ty=Tensor[(10, 10, 2), float32] */;
  (%334,)
}

def @func_6099() -> (Tensor[(7, 9, 8), float64], Tensor[(384), float32], Tensor[(10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) {
  %335 = cast(meta[relay.Constant][19] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %336 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(7, 9, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(meta[relay.Constant][18] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %339 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
  %340 = reshape(%339, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %341 = @func_4063(%340) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
  %342 = @func_4112() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %343 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
  %344 = reshape(%343, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %345 = @func_276(%344) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %346 = mod(%337, %338) /* ty=Tensor[(7, 9, 8), float64] */;
  %347 = %341.5;
  %348 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
  %349 = %342.0;
  %350 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  %351 = %345.0;
  (%346, %347, meta[relay.Constant][20] /* ty=Tensor[(10, 2), float64] */, %348, %349, %350, %351)
}

def @func_2402() -> (Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) {
  %352 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  %353 = cast(%352, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %354 = reshape(%353, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %355 = @func_2142(%354) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */;
  %356 = cast(meta[relay.Constant][21] /* ty=Tensor[(225, 1), float32] */, dtype="float32") /* ty=Tensor[(225, 1), float32] */;
  %357 = reshape(%356, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), float32] */;
  %358 = @func_1529(%357) /* ty=(Tensor[(5, 15, 3), float32],) */;
  %359 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  %360 = %355.0;
  %361 = %358.0;
  (%359, %352, %360, %361, meta[relay.Constant][21] /* ty=Tensor[(225, 1), float32] */)
}

def @func_1833() -> (Tensor[(10, 10, 2), float32],) {
  %362 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %363 = %362.0;
  (%363,)
}

def @func_2870() -> (Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) {
  %364 = @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */;
  %365 = %364.1;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
  %367 = reshape(%366, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %368 = @func_276(%367) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %369 = %368.0;
  (%365, %369)
}

def @func_3001() -> Tensor[(10, 10, 2), float32] {
  @func_1640() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4523() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) {
  %370 = @func_3189() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) */;
  %371 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %372 = %370.1;
  (%371, %372)
}

def @func_3130() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %373 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %374 = %373.0;
  %375 = @func_2506() /* ty=Tensor[(10, 10, 2), float32] */;
  (%374, %375)
}

def @func_5951(%var_5932: Tensor[(40), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(40), float64], Tensor[(10, 10, 2), float32]) {
  %376 = cast(%var_5932, dtype="float64") /* ty=Tensor[(40), float64] */;
  %377 = reshape(%376, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), float64] */;
  %378 = @func_5812(%377) /* ty=(Tensor[(10, 4, 1), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %379 = %378.2;
  %380 = cast(%379, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %381 = reshape(%380, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %382 = @func_3296(%381) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */;
  %383 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  %384 = %382.1;
  (%383, %379, %var_5932, %384)
}

def @func_8120() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(48, 60), float32]) {
  %385 = @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */;
  %386 = cast(meta[relay.Constant][22] /* ty=Tensor[(48, 60), float32] */, dtype="float32") /* ty=Tensor[(48, 60), float32] */;
  %387 = reshape(%386, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %388 = @func_7981(%387) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) */;
  %389 = %385.0;
  %390 = %388.6;
  (%389, %390, meta[relay.Constant][22] /* ty=Tensor[(48, 60), float32] */)
}

def @func_7446() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(200), float32]) {
  %391 = @func_6790() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %392 = @func_4484() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) */;
  %393 = %391.2;
  %394 = cast(%393, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %395 = cast(meta[relay.Constant][23] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %396 = %392.1;
  %397 = cast(%396, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
  %398 = reshape(%394, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %399 = reshape(%395, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %400 = reshape(%397, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %401 = @func_2463(%398, %399, %400) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) */;
  %402 = @func_6882() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) */;
  %403 = @func_4300() /* ty=Tensor[(10, 10, 2), float32] */;
  %404 = %401.1;
  %405 = %402.2;
  (%403, %393, %396, %404, meta[relay.Constant][23] /* ty=Tensor[(2880), float32] */, %405)
}

def @func_7512() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) {
  %406 = @func_4300() /* ty=Tensor[(10, 10, 2), float32] */;
  %407 = @func_5210() /* ty=Tensor[(10, 10, 2), bool] */;
  (%406, %407)
}

def @func_6790() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %408 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %409 = @func_6613() /* ty=Tensor[(10, 10, 2), float32] */;
  %410 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  (%408, %409, %410)
}

def @func_2014(%var_1990: Tensor[(13, 7, 8), float64]) -> (Tensor[(13, 7, 8), float64], Tensor[(3, 16, 8), float64], Tensor[(12, 32), float32], Tensor[(10, 10, 2), float32]) {
  %411 = cast(%var_1990, dtype="float64") /* ty=Tensor[(13, 7, 8), float64] */;
  %412 = cast(meta[relay.Constant][24] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
  %413 = reshape(%412, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
  %414 = asin(%411) /* ty=Tensor[(13, 7, 8), float64] */;
  %415 = @func_1699(%413) /* ty=Tensor[(3, 16, 8), float64] */;
  %416 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  (%414, %415, meta[relay.Constant][24] /* ty=Tensor[(12, 32), float32] */, %416)
}

def @func_4387() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %417 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %418 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
  %419 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %420 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
  %421 = %417.0;
  (%418, %419, %420, %421)
}

def @func_7873() -> (Tensor[(10, 10, 2), bool],) {
  %422 = @func_5210() /* ty=Tensor[(10, 10, 2), bool] */;
  (%422,)
}

def @func_8072(%var_8048: Tensor[(3, 15), float64], %var_8063: Tensor[(2880), float32]) -> (Tensor[(3, 15), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32]) {
  %423 = cast(%var_8048, dtype="float64") /* ty=Tensor[(3, 15), float64] */;
  %424 = @func_7859() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %425 = cast(%var_8063, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %426 = reshape(%425, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %427 = @func_7981(%426) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) */;
  %428 = sinh(%423) /* ty=Tensor[(3, 15), float64] */;
  %429 = %424.0;
  %430 = %427.0;
  (%428, %429, %430, %var_8063)
}

def @func_8016() -> (Tensor[(10, 1, 2), float64],) {
  %431 = @func_5086() /* ty=(Tensor[(10, 1, 2), float64],) */;
  %432 = %431.0;
  (%432,)
}

def @func_8658() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) {
  %433 = @func_5716() /* ty=(Tensor[(5, 4), float64], Tensor[(5, 4), float64]) */;
  %434 = @func_6800() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %435 = %433.0;
  %436 = %434.0;
  (%435, %436)
}

def @func_2178() -> Tensor[(10, 10, 2), float32] {
  @func_1640() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1640() -> Tensor[(10, 10, 2), float32] {
  @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1699(%var_1690: Tensor[(3, 16, 8), float32]) -> Tensor[(3, 16, 8), float64] {
  %437 = cast(%var_1690, dtype="float32") /* ty=Tensor[(3, 16, 8), float32] */;
  %438 = exp(%437) /* ty=Tensor[(3, 16, 8), float32] */;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
  sin(%439) /* ty=Tensor[(3, 16, 8), float64] */
}

def @func_2676() -> (Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) {
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %441 = cast(meta[relay.Constant][25] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %442 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  %443 = cast(%442, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %444 = reshape(%440, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %445 = reshape(%441, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %446 = reshape(%443, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %447 = @func_599(%444, %445, %446) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %448 = %447.2;
  (%442, %448, meta[relay.Constant][25] /* ty=Tensor[(2880), int8] */)
}

def @func_1529(%var_1499: Tensor[(5, 15, 3), float32]) -> (Tensor[(5, 15, 3), float32],) {
  %449 = cast(%var_1499, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %450 = acosh(%449) /* ty=Tensor[(5, 15, 3), float32] */;
  %451 = cast(%450, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %452 = sigmoid(%451) /* ty=Tensor[(5, 15, 3), float32] */;
  (%452,)
}

def @func_5276() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %453 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %454 = %453.0;
  %455 = @func_3101() /* ty=Tensor[(10, 10, 2), float32] */;
  (%454, %455)
}

def @func_5761(%var_5757: Tensor[(16, 1, 11), float32]) -> Tensor[(16, 1, 11), float32] {
  %456 = cast(%var_5757, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
  atan(%456) /* ty=Tensor[(16, 1, 11), float32] */
}

def @func_5210() -> Tensor[(10, 10, 2), bool] {
  %457 = @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */;
  %457.2
}

def @func_6613() -> Tensor[(10, 10, 2), float32] {
  %458 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  %459 = cast(%458, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  acos(%459) /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6383(%var_6378: Tensor[(14, 6, 14), float64]) -> Tensor[(14, 6, 14), float64] {
  %460 = cast(%var_6378, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
  acos(%460) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_3913(%var_3832: Tensor[(10, 2, 13), float32], %var_3854: Tensor[(384), float32]) -> (Tensor[(3, 16, 8), float64], Tensor[(384), float32], Tensor[(10, 2, 13), bool], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 2, 13), float32]) {
  %461 = cast(%var_3854, dtype="float32") /* ty=Tensor[(384), float32] */;
  %462 = reshape(%461, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
  %463 = cast(%var_3832, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %464 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(10, 2, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %465 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 2, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %467 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %468 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 2, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
  %469 = atanh(%468) /* ty=Tensor[(10, 2, 13), float64] */;
  %470 = cast(meta[relay.Constant][26] /* ty=Tensor[(10, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %471 = shape_of(%var_3832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%var_3832, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %474 = floor_divide(%472, %473) /* ty=Tensor[(10, 2, 13), float32] */;
  %475 = cast(%474, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %476 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%469, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %479 = @func_1699(%462) /* ty=Tensor[(3, 16, 8), float64] */;
  %480 = greater(%465, %466) /* ty=Tensor[(10, 2, 13), bool] */;
  %481 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
  %482 = %467.0;
  %483 = power(%477, %478) /* ty=Tensor[(10, 2, 13), float32] */;
  (%479, %var_3854, %480, %481, %482, %483)
}

def @func_6120() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) {
  %484 = @func_5276() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %485 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
  %486 = @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %487 = %484.0;
  %488 = %485.0;
  %489 = %486.0;
  (%487, %488, %489)
}

def @func_2072() -> Tensor[(10, 10, 2), float32] {
  @func_1640() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1716() -> (Tensor[(10, 10, 2), float32],) {
  %490 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %491 = %490.0;
  (%491,)
}

def @func_2814() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) {
  %492 = cast(meta[relay.Constant][27] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %493 = reshape(%492, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %494 = @func_276(%493) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %495 = @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */;
  %496 = %495.2;
  %497 = cast(meta[relay.Constant][28] /* ty=Tensor[(2880), int8] */, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %498 = shape_of(%496, dtype="int32") /* ty=Tensor[(1), int32] */;
  %499 = cast(%496, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?), bool] */;
  %501 = cast(meta[relay.Constant][29] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %502 = cast(meta[relay.Constant][28] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %503 = reshape(%501, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float64] */;
  %504 = reshape(%502, newshape=[2880]) /* ty=Tensor[(2880), int8] */;
  %505 = @func_1925(%503, %504) /* ty=(Tensor[(9, 4, 12), float64], Tensor[(20), float64], Tensor[(2880), int8], Tensor[(20), float64]) */;
  %506 = @func_1597() /* ty=Tensor[(10, 10, 2), float32] */;
  %507 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  %508 = %494.0;
  %509 = equal(%499, %500) /* ty=Tensor[(2880), bool] */;
  %510 = %505.1;
  (%506, %507, %508, meta[relay.Constant][27] /* ty=Tensor[(20), float64] */, %509, %510, meta[relay.Constant][29] /* ty=Tensor[(432), float64] */)
}

def @func_4188(%var_4177: Tensor[(10, 14, 2), float64]) -> (Tensor[(10, 14, 2), bool],) {
  %511 = @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %514 = cast(%var_4177, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %515 = not_equal(%513, %514) /* ty=Tensor[(10, 14, 2), bool] */;
  (%515,)
}

def @func_2064() -> (Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) {
  %516 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %517 = cast(%516, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %518 = sigmoid(%517) /* ty=Tensor[(10, 10, 2), float32] */;
  %519 = cast(%516, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %523 = cast(meta[relay.Constant][30] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %524 = reshape(%523, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float64] */;
  %525 = @func_1366(%524) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */;
  %526 = greater(%521, %522) /* ty=Tensor[(10, 10, 2), bool] */;
  %527 = %525.1;
  (%526, %527, meta[relay.Constant][30] /* ty=Tensor[(720), float64] */)
}

def @func_3046(%var_3028: Tensor[(200), float32]) -> (Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) {
  %528 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %529 = cast(%var_3028, dtype="float32") /* ty=Tensor[(200), float32] */;
  %530 = reshape(%529, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %531 = @func_1902(%530) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), uint32], Tensor[(5, 15, 3), float32], Tensor[(225), float32]) */;
  %532 = %528.0;
  %533 = %531.2;
  (%532, %533, %var_3028)
}

def @func_1582(%var_1550: Tensor[(720), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(720), float64], Tensor[(10, 1, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %534 = cast(%var_1550, dtype="float64") /* ty=Tensor[(720), float64] */;
  %535 = reshape(%534, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float64] */;
  %536 = @func_1366(%535) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */;
  %537 = %536.2;
  %538 = cast(%537, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %539 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %540 = sin(%538) /* ty=Tensor[(10, 1, 2), float32] */;
  %541 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %542 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  (%539, %var_1550, %540, %541, %542)
}

def @func_3547() -> Tensor[(10, 10, 2), float32] {
  @func_3400() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7638() -> Tensor[(6, 12, 7), float64] {
  %543 = @func_5069() /* ty=(Tensor[(6, 12, 7), float64], Tensor[(10, 10, 2), float32]) */;
  %543.0
}

def @func_2142(%var_2131: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) {
  %544 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
  %545 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %546 = cast(%var_2131, dtype="uint16") /* ty=Tensor[(10, 10, 2), uint16] */;
  %547 = shape_of(%545, dtype="int32") /* ty=Tensor[(3), int32] */;
  %548 = cast(%545, dtype="uint16") /* ty=Tensor[(10, 10, 2), uint16] */;
  %549 = dyn.reshape(%546, %547, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %550 = subtract(%548, %549) /* ty=Tensor[(10, 10, 2), uint16] */;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %552 = %544.0;
  %553 = asin(%551) /* ty=Tensor[(10, 10, 2), float32] */;
  (%552, %553)
}

def @func_4638() -> (Tensor[(10, 10, 2), float32], Tensor[(98, 4), int8]) {
  %554 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
  %555 = @func_2506() /* ty=Tensor[(10, 10, 2), float32] */;
  %556 = %554.1;
  (%555, %556)
}

def @func_1606() -> Tensor[(10, 10, 2), float32] {
  @func_1439() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_8482(%var_8476: Tensor[(20), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(20), bool]) {
  %557 = @func_7258() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %558 = @func_7240() /* ty=(Tensor[(20), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %559 = %558.0;
  %560 = cast(%var_8476, dtype="bool") /* ty=Tensor[(20), bool] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(1), int32] */;
  %562 = cast(%559, dtype="bool") /* ty=Tensor[(20), bool] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?), bool] */;
  %564 = %557.0;
  %565 = less(%562, %563) /* ty=Tensor[(20), bool] */;
  (%564, %565)
}

def @func_2377() -> Tensor[(10, 10, 2), float32] {
  @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1078(%var_1037: Tensor[(10, 2), float32]) -> (Tensor[(10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) {
  %566 = cast(%var_1037, dtype="float32") /* ty=Tensor[(10, 2), float32] */;
  %567 = cast(%var_1037, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
  %568 = reshape(%567, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %569 = @func_276(%568) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %570 = %569.0;
  %571 = cast(%570, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %572 = reshape(%571, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %573 = @func_276(%572) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %574 = atanh(%566) /* ty=Tensor[(10, 2), float32] */;
  %575 = %573.0;
  (%574, %570, %575)
}

def @func_5610(%var_5597: Tensor[(6, 12, 7), int32]) -> (Tensor[(6, 12, 7), bool], Tensor[(225, 1), float32], Tensor[(10, 1, 2), float64]) {
  %576 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
  %577 = %576.2;
  %578 = cast(%var_5597, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%577, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %582 = @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */;
  %583 = %582.4;
  %584 = cast(%583, dtype="float32") /* ty=Tensor[(225, 1), float32] */;
  %585 = logical_or(%580, %581) /* ty=Tensor[(6, 12, 7), bool] */;
  %586 = atanh(%584) /* ty=Tensor[(225, 1), float32] */;
  %587 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  (%585, %586, %587)
}

def @func_3603() -> (Tensor[(10, 10, 2), float32],) {
  %588 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
  (%588,)
}

def @func_7019() -> Tensor[(10, 10, 2), float32] {
  @func_2090() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3101() -> Tensor[(10, 10, 2), float32] {
  @func_2377() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2238() -> Tensor[(10, 1, 2), float64] {
  %589 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
  %589.1
}

def @func_7746(%var_7739: Tensor[(9, 13, 11), int64]) -> Tensor[(9, 13, 11), int64] {
  %590 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %591 = cast(%var_7739, dtype="int64") /* ty=Tensor[(9, 13, 11), int64] */;
  multiply(%590, %591) /* ty=Tensor[(9, 13, 11), int64] */
}

def @func_5069() -> (Tensor[(6, 12, 7), float64], Tensor[(10, 10, 2), float32]) {
  %592 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %593 = %592.0;
  %594 = cast(%593, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %595 = @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */;
  %596 = rsqrt(%594) /* ty=Tensor[(6, 12, 7), float64] */;
  %597 = %595.0;
  (%596, %597)
}

def @func_8230() -> Tensor[(5, 4), float64] {
  %598 = @func_4232() /* ty=(Tensor[(5, 4), float64],) */;
  %598.0
}

def @func_4902() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2, ?, 6), bool], Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(384), float32]) {
  %599 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %600 = @func_3001() /* ty=Tensor[(10, 10, 2), float32] */;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %602 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
  %603 = reshape(%602, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %604 = @func_1276(%603) /* ty=(Tensor[(2, 1, 6), float64],) */;
  %605 = %604.0;
  %606 = cast(meta[relay.Constant][31] /* ty=Tensor[(6, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 2), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(2, 1, 6), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = @func_2735() /* ty=(Tensor[(98, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %611 = @func_4112() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %612 = %610.1;
  %613 = cast(%612, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %614 = reshape(%613, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %615 = @func_4063(%614) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
  %616 = %599.0;
  %617 = log(%601) /* ty=Tensor[(10, 10, 2), float32] */;
  %618 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
  %619 = logical_and(%608, %609) /* ty=Tensor[(2, ?, 6), bool] */;
  %620 = %611.0;
  %621 = %615.5;
  (%616, %617, %618, %619, %612, %620, %621)
}

def @func_7096() -> (Tensor[(10, 10, 2), float64],) {
  %622 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
  %623 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %624 = shape_of(%622, dtype="int32") /* ty=Tensor[(3), int32] */;
  %625 = cast(%622, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %626 = dyn.reshape(%623, %624, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %627 = mod(%625, %626) /* ty=Tensor[(10, 10, 2), float32] */;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
  %629 = asinh(%628) /* ty=Tensor[(10, 10, 2), float64] */;
  (%629,)
}

def @func_8208() -> (Tensor[(10, 10, 2), float32],) {
  %630 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
  (%630,)
}

def @func_4165() -> Tensor[(10, 10, 2), float32] {
  %631 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %632 = %631.0;
  %633 = cast(%632, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  atan(%633) /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6135() -> Tensor[(10, 10, 2), float32] {
  @func_4165() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_599(%var_555: Tensor[(16, 15, 12), int8], %var_556: Tensor[(16, 15, 12), int8], %var_583: Tensor[(20), float64]) -> (Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) {
  %634 = cast(%var_556, dtype="int8") /* ty=Tensor[(16, 15, 12), int8] */;
  %635 = shape_of(%var_555, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_555, dtype="int8") /* ty=Tensor[(16, 15, 12), int8] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %638 = right_shift(%636, %637) /* ty=Tensor[(16, 15, 12), int8] */;
  %639 = cast(%638, dtype="float64") /* ty=Tensor[(16, 15, 12), float64] */;
  %640 = cast(%var_556, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %641 = cast(%var_583, dtype="float64") /* ty=Tensor[(20), float64] */;
  %642 = reshape(%641, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %643 = @func_276(%642) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %644 = %643.0;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %646 = reshape(%645, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %647 = @func_276(%646) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %648 = erf(%639) /* ty=Tensor[(16, 15, 12), float64] */;
  %649 = sigmoid(%640) /* ty=Tensor[(16, 15, 12), float32] */;
  %650 = %647.0;
  (%648, %649, %644, %var_583, %650)
}

def @func_2590() -> (Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) {
  %651 = @func_1833() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %652 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
  %653 = %651.0;
  %654 = %652.2;
  (%653, %654)
}

def @func_5518(%var_5500: Tensor[(6, 12, 7), int32]) -> (Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) {
  %655 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %656 = %655.0;
  %657 = cast(%var_5500, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %658 = shape_of(%656, dtype="int32") /* ty=Tensor[(3), int32] */;
  %659 = cast(%656, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %660 = dyn.reshape(%657, %658, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %661 = cast(%var_5500, dtype="float32") /* ty=Tensor[(6, 12, 7), float32] */;
  %662 = multiply(%659, %660) /* ty=Tensor[(6, 12, 7), float64] */;
  %663 = atanh(%661) /* ty=Tensor[(6, 12, 7), float32] */;
  (%662, %663)
}

def @func_3732(%var_3657: Tensor[(15, 6, 11), float32], %var_3669: Tensor[(15, 6, 11), float32], %var_3694: Tensor[(15, 6, 11), float32]) -> (Tensor[(15, 6, 11), float32], Tensor[(15, 6, 11), bool], Tensor[(10, 10, 2), float32], Tensor[(15, 6, 11), float64]) {
  %664 = cast(%var_3657, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %665 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(15, 6, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %668 = floor_mod(%666, %667) /* ty=Tensor[(15, 6, 11), float32] */;
  %669 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%668, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %673 = cast(%var_3669, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %674 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(15, 6, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 6, 11), float32] */, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %677 = cast(meta[relay.Constant][33] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %678 = sqrt(%677) /* ty=Tensor[(15, 6, 11), float32] */;
  %679 = cast(%var_3694, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %683 = divide(%681, %682) /* ty=Tensor[(15, 6, 11), float64] */;
  %684 = cast(%683, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %685 = mod(%671, %672) /* ty=Tensor[(15, 6, 11), float32] */;
  %686 = less_equal(%675, %676) /* ty=Tensor[(15, 6, 11), bool] */;
  %687 = @func_3400() /* ty=Tensor[(10, 10, 2), float32] */;
  %688 = log2(%684) /* ty=Tensor[(15, 6, 11), float64] */;
  (%685, %686, %687, %688)
}

def @func_6923() -> Tensor[(10, 10, 2), float32] {
  %689 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %689.0
}

def @func_6882() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) {
  %690 = @func_4232() /* ty=(Tensor[(5, 4), float64],) */;
  %691 = cast(meta[relay.Constant][34] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %692 = reshape(%691, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %693 = @func_3296(%692) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */;
  %694 = %690.0;
  %695 = %693.1;
  (%694, %695, meta[relay.Constant][34] /* ty=Tensor[(200), float32] */)
}

def @func_7123(%var_7106: Tensor[(200), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32]) {
  %696 = @func_5086() /* ty=(Tensor[(10, 1, 2), float64],) */;
  %697 = cast(%var_7106, dtype="float32") /* ty=Tensor[(200), float32] */;
  %698 = reshape(%697, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %699 = @func_2142(%698) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */;
  %700 = %699.1;
  %701 = cast(%var_7106, dtype="float32") /* ty=Tensor[(200), float32] */;
  %702 = shape_of(%700, dtype="int32") /* ty=Tensor[(3), int32] */;
  %703 = cast(%700, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %704 = dyn.reshape(%701, %702, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %705 = %696.0;
  %706 = divide(%703, %704) /* ty=Tensor[(10, 10, 2), float32] */;
  (%705, %706)
}

def @func_4063(%var_4028: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) {
  %707 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %709 = cast(meta[relay.Constant][35] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %710 = cast(%var_4028, dtype="float64") /* ty=Tensor[(20), float64] */;
  %711 = reshape(%708, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %712 = reshape(%709, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
  %713 = reshape(%710, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %714 = @func_2463(%711, %712, %713) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) */;
  %715 = cast(meta[relay.Constant][35] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %716 = cast(meta[relay.Constant][36] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
  %717 = reshape(%716, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
  %718 = %714.2;
  %719 = cos(%715) /* ty=Tensor[(2880), float32] */;
  %720 = @func_1699(%717) /* ty=Tensor[(3, 16, 8), float64] */;
  (%707, %718, %var_4028, %719, %720, meta[relay.Constant][36] /* ty=Tensor[(384), float32] */)
}

def @func_1613() -> (Tensor[(10, 10, 2), float32],) {
  %721 = @func_1606() /* ty=Tensor[(10, 10, 2), float32] */;
  (%721,)
}

def @func_8538(%var_8532: Tensor[(6, 12, 7), float64]) -> (Tensor[(3, 9, 14), uint8], Tensor[(6, 12, 7), bool]) {
  %722 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 9, 14), uint8] */, dtype="uint8") /* ty=Tensor[(3, 9, 14), uint8] */;
  %723 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(3, 9, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %724 = cast(meta[relay.Constant][37] /* ty=Tensor[(3, 9, 14), uint8] */, dtype="uint8") /* ty=Tensor[(3, 9, 14), uint8] */;
  %725 = dyn.reshape(%722, %723, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %726 = @func_7638() /* ty=Tensor[(6, 12, 7), float64] */;
  %727 = cast(%var_8532, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %728 = shape_of(%726, dtype="int32") /* ty=Tensor[(3), int32] */;
  %729 = cast(%726, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %730 = dyn.reshape(%727, %728, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %731 = maximum(%724, %725) /* ty=Tensor[(3, 9, 14), uint8] */;
  %732 = less_equal(%729, %730) /* ty=Tensor[(6, 12, 7), bool] */;
  (%731, %732)
}

def @func_7258() -> (Tensor[(10, 10, 2), float32],) {
  %733 = @func_3001() /* ty=Tensor[(10, 10, 2), float32] */;
  (%733,)
}

def @func_2564() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %734 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %735 = %734.0;
  %736 = @func_2072() /* ty=Tensor[(10, 10, 2), float32] */;
  (%735, %736)
}

def @func_1925(%var_1914: Tensor[(9, 4, 12), float64], %var_1919: Tensor[(2880), int8]) -> (Tensor[(9, 4, 12), float64], Tensor[(20), float64], Tensor[(2880), int8], Tensor[(20), float64]) {
  %737 = cast(%var_1914, dtype="float64") /* ty=Tensor[(9, 4, 12), float64] */;
  %738 = cast(%var_1919, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %739 = cast(%var_1919, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %740 = cast(meta[relay.Constant][39] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %741 = reshape(%738, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %742 = reshape(%739, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %743 = reshape(%740, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %744 = @func_599(%741, %742, %743) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %745 = sinh(%737) /* ty=Tensor[(9, 4, 12), float64] */;
  %746 = %744.3;
  (%745, %746, %var_1919, meta[relay.Constant][39] /* ty=Tensor[(20), float64] */)
}

def @func_2294(%var_2282: Tensor[(16, 15, 12), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) {
  %747 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %748 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %749 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %750 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 1440), int8] */, dtype="int8") /* ty=Tensor[(2, 1440), int8] */;
  %751 = cast(meta[relay.Constant][40] /* ty=Tensor[(2, 1440), int8] */, dtype="int8") /* ty=Tensor[(2, 1440), int8] */;
  %752 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  %753 = cast(%752, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %754 = reshape(%750, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %755 = reshape(%751, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %756 = reshape(%753, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %757 = @func_599(%754, %755, %756) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %758 = %757.1;
  %759 = cast(%758, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %760 = atan(%759) /* ty=Tensor[(16, 15, 12), float32] */;
  %761 = cast(%var_2282, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %765 = mod(%763, %764) /* ty=Tensor[(16, 15, 12), float32] */;
  %766 = cast(%758, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %770 = %747.0;
  %771 = %748.0;
  %772 = %749.0;
  %773 = left_shift(%768, %769) /* ty=Tensor[(16, 15, 12), int64] */;
  (%752, meta[relay.Constant][40] /* ty=Tensor[(2, 1440), int8] */, %770, %771, %772, %773)
}

def @func_8274() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64]) {
  %774 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
  %775 = @func_2564() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %776 = @func_7096() /* ty=(Tensor[(10, 10, 2), float64],) */;
  %777 = %774.1;
  %778 = %775.0;
  %779 = %776.0;
  (%777, %778, %779)
}

def @func_5812(%var_5779: Tensor[(10, 4, 1), float64]) -> (Tensor[(10, 4, 1), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %780 = cast(-0.415788f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %781 = cast(%var_5779, dtype="float64") /* ty=Tensor[(10, 4, 1), float64] */;
  %782 = @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */;
  %783 = floor_mod(%780, %781) /* ty=Tensor[(10, 4, 1), float64] */;
  %784 = @func_1606() /* ty=Tensor[(10, 10, 2), float32] */;
  %785 = %782.1;
  (%783, %784, %785)
}

def @func_7076() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %786 = @func_1597() /* ty=Tensor[(10, 10, 2), float32] */;
  %787 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  (%786, %787)
}

def @func_7894() -> Tensor[(10, 10, 2), float64] {
  %788 = @func_7096() /* ty=(Tensor[(10, 10, 2), float64],) */;
  %788.0
}

def @func_3400() -> Tensor[(10, 10, 2), float32] {
  @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3296(%var_3238: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) {
  %789 = @func_2072() /* ty=Tensor[(10, 10, 2), float32] */;
  %790 = cast(%var_3238, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %791 = shape_of(%789, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%789, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %794 = not_equal(%792, %793) /* ty=Tensor[(10, 10, 2), bool] */;
  %795 = cast(%794, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
  %796 = cast(%789, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %797 = log2(%795) /* ty=Tensor[(10, 10, 2), float64] */;
  %798 = tan(%796) /* ty=Tensor[(10, 10, 2), float32] */;
  (%797, %798)
}

def @func_7599(%var_7561: Tensor[(7, 12, 6), int32], %var_7562: Tensor[(7, 12, 6), int32], %var_7567: Tensor[(7, 12, 6), int32]) -> (Tensor[(7, 12, 6), int32], Tensor[(7, 12, 6), int16], Tensor[(5, 15, 3), float32], Tensor[(75, 3), float32], Tensor[(7, 12, 6), bool]) {
  %799 = cast(%var_7562, dtype="int32") /* ty=Tensor[(7, 12, 6), int32] */;
  %800 = shape_of(%var_7561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %801 = cast(%var_7561, dtype="int32") /* ty=Tensor[(7, 12, 6), int32] */;
  %802 = dyn.reshape(%799, %800, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %803 = cast(%var_7567, dtype="int16") /* ty=Tensor[(7, 12, 6), int16] */;
  %804 = shape_of(%var_7561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%var_7561, dtype="int16") /* ty=Tensor[(7, 12, 6), int16] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %807 = cast(meta[relay.Constant][41] /* ty=Tensor[(75, 3), float32] */, dtype="float32") /* ty=Tensor[(75, 3), float32] */;
  %808 = reshape(%807, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), float32] */;
  %809 = @func_1529(%808) /* ty=(Tensor[(5, 15, 3), float32],) */;
  %810 = cast(%var_7562, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  %811 = shape_of(%var_7567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %812 = cast(%var_7567, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  %813 = dyn.reshape(%810, %811, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %814 = bitwise_or(%801, %802) /* ty=Tensor[(7, 12, 6), int32] */;
  %815 = multiply(%805, %806) /* ty=Tensor[(7, 12, 6), int16] */;
  %816 = %809.0;
  %817 = logical_and(%812, %813) /* ty=Tensor[(7, 12, 6), bool] */;
  (%814, %815, %816, meta[relay.Constant][41] /* ty=Tensor[(75, 3), float32] */, %817)
}

def @func_5919() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %818 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %819 = %818.0;
  %820 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  (%819, %820)
}

def @func_7240() -> (Tensor[(20), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %821 = @func_3189() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) */;
  %822 = %821.2;
  %823 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %824 = @func_4723() /* ty=Tensor[(10, 10, 2), float32] */;
  (%822, %823, %824)
}

def @func_8399(%var_8369: Tensor[(8, 14, 3), float32]) -> (Tensor[(8, 14, 3), float32], Tensor[(10, 10, 2), float32], Tensor[(8, 14, 3), float32]) {
  %825 = cast(%var_8369, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %826 = shape_of(meta[relay.Constant][42] /* ty=Tensor[(8, 14, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %827 = cast(meta[relay.Constant][42] /* ty=Tensor[(8, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %828 = dyn.reshape(%825, %826, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %829 = cast(%var_8369, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %830 = multiply(%827, %828) /* ty=Tensor[(8, 14, 3), float32] */;
  %831 = @func_7019() /* ty=Tensor[(10, 10, 2), float32] */;
  %832 = sin(%829) /* ty=Tensor[(8, 14, 3), float32] */;
  (%830, %831, %832)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_8617(%var_8615: Tensor[(8, 13, 2), float64]) -> (Tensor[(8, 13, 2), float64],) {
  @func_8614(%var_8615) /* ty=(Tensor[(8, 13, 2), float64],) */
}

def @func_2814() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) {
  %0 = cast(meta[relay.Constant][0] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %1 = reshape(%0, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %2 = @func_276(%1) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %3 = @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */;
  %4 = %3.2;
  %5 = cast(meta[relay.Constant][1] /* ty=Tensor[(2880), int8] */, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %6 = shape_of(%4, dtype="int32") /* ty=Tensor[(1), int32] */;
  %7 = cast(%4, dtype="bool") /* ty=Tensor[(2880), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?), bool] */;
  %9 = cast(meta[relay.Constant][2] /* ty=Tensor[(432), float64] */, dtype="float64") /* ty=Tensor[(432), float64] */;
  %10 = cast(meta[relay.Constant][1] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %11 = reshape(%9, newshape=[9, 4, 12]) /* ty=Tensor[(9, 4, 12), float64] */;
  %12 = reshape(%10, newshape=[2880]) /* ty=Tensor[(2880), int8] */;
  %13 = @func_1925(%11, %12) /* ty=(Tensor[(9, 4, 12), float64], Tensor[(20), float64], Tensor[(2880), int8], Tensor[(20), float64]) */;
  %14 = @func_1597() /* ty=Tensor[(10, 10, 2), float32] */;
  %15 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  %16 = %2.0;
  %17 = equal(%7, %8) /* ty=Tensor[(2880), bool] */;
  %18 = %13.1;
  (%14, %15, %16, meta[relay.Constant][0] /* ty=Tensor[(20), float64] */, %17, %18, meta[relay.Constant][2] /* ty=Tensor[(432), float64] */)
}

def @func_6800() -> (Tensor[(10, 10, 2), float32],) {
  %19 = @func_5276() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %20 = %19.0;
  (%20,)
}

def @func_1322() -> (Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) {
  %27 = fn () -> (Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) {
    %21 = cast(meta[relay.Constant][3] /* ty=Tensor[(2, 13, 2), float64] */, dtype="float64") /* ty=Tensor[(2, 13, 2), float64] */;
    %22 = cast(meta[relay.Constant][4] /* ty=Tensor[(5, 4), float64] */, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
    %23 = reshape(%22, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
    %24 = @func_276(%23) /* ty=(Tensor[(10, 1, 2), float64],) */;
    %25 = sinh(%21) /* ty=Tensor[(2, 13, 2), float64] */;
    %26 = %24.0;
    (%25, %26, meta[relay.Constant][4] /* ty=Tensor[(5, 4), float64] */)
  };
  %27() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */
}

def @func_8075(%var_8073: Tensor[(3, 15), float64], %var_8074: Tensor[(2880), float32]) -> (Tensor[(3, 15), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32]) {
  %36 = fn (%var_8048: Tensor[(3, 15), float64], %var_8063: Tensor[(2880), float32]) -> (Tensor[(3, 15), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32]) {
    %28 = cast(%var_8048, dtype="float64") /* ty=Tensor[(3, 15), float64] */;
    %29 = @func_7859() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %30 = cast(%var_8063, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %31 = reshape(%30, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %32 = @func_7981(%31) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) */;
    %33 = sinh(%28) /* ty=Tensor[(3, 15), float64] */;
    %34 = %29.0;
    %35 = %32.0;
    (%33, %34, %35, %var_8063)
  };
  %36(%var_8073, %var_8074) /* ty=(Tensor[(3, 15), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32]) */
}

def @func_4302() -> Tensor[(10, 10, 2), float32] {
  @func_4300() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3379() -> (Tensor[(10, 10, 2), float32],) {
  %37 = @func_1833() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %38 = %37.0;
  (%38,)
}

def @func_1597() -> Tensor[(10, 10, 2), float32] {
  @func_1439() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1080(%var_1079: Tensor[(10, 2), float32]) -> (Tensor[(10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) {
  %49 = fn (%var_1037: Tensor[(10, 2), float32]) -> (Tensor[(10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) {
    %39 = cast(%var_1037, dtype="float32") /* ty=Tensor[(10, 2), float32] */;
    %40 = cast(%var_1037, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
    %41 = reshape(%40, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
    %42 = @func_276(%41) /* ty=(Tensor[(10, 1, 2), float64],) */;
    %43 = %42.0;
    %44 = cast(%43, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
    %45 = reshape(%44, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
    %46 = @func_276(%45) /* ty=(Tensor[(10, 1, 2), float64],) */;
    %47 = atanh(%39) /* ty=Tensor[(10, 2), float32] */;
    %48 = %46.0;
    (%47, %43, %48)
  };
  %49(%var_1079) /* ty=(Tensor[(10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) */
}

def @func_4944(%var_4942: Tensor[(7, 16, 11), bool], %var_4943: Tensor[(7, 16, 11), bool]) -> Tensor[(7, 16, 11), bool] {
  %54 = fn (%var_4928: Tensor[(7, 16, 11), bool], %var_4929: Tensor[(7, 16, 11), bool]) -> Tensor[(7, 16, 11), bool] {
    %50 = cast(%var_4929, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
    %51 = shape_of(%var_4928, dtype="int32") /* ty=Tensor[(3), int32] */;
    %52 = cast(%var_4928, dtype="bool") /* ty=Tensor[(7, 16, 11), bool] */;
    %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%52, %53) /* ty=Tensor[(7, 16, 11), bool] */
  };
  %54(%var_4942, %var_4943) /* ty=Tensor[(7, 16, 11), bool] */
}

def @func_3101() -> Tensor[(10, 10, 2), float32] {
  @func_2377() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3048(%var_3047: Tensor[(200), float32]) -> (Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) {
  %61 = fn (%var_3028: Tensor[(200), float32]) -> (Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) {
    %55 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
    %56 = cast(%var_3028, dtype="float32") /* ty=Tensor[(200), float32] */;
    %57 = reshape(%56, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
    %58 = @func_1902(%57) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), uint32], Tensor[(5, 15, 3), float32], Tensor[(225), float32]) */;
    %59 = %55.0;
    %60 = %58.2;
    (%59, %60, %var_3028)
  };
  %61(%var_3047) /* ty=(Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) */
}

def @func_4191(%var_4189: Tensor[(10, 14, 2), float64]) -> (Tensor[(10, 14, 2), bool],) {
  @func_4188(%var_4189) /* ty=(Tensor[(10, 14, 2), bool],) */
}

def @func_5954(%var_5952: Tensor[(40), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(40), float64], Tensor[(10, 10, 2), float32]) {
  @func_5951(%var_5952) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(40), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_1606() -> Tensor[(10, 10, 2), float32] {
  @func_1439() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7638() -> Tensor[(6, 12, 7), float64] {
  %62 = @func_5069() /* ty=(Tensor[(6, 12, 7), float64], Tensor[(10, 10, 2), float32]) */;
  %62.0
}

def @func_8580() -> Tensor[(10, 10, 2), float32] {
  %63 = @func_4495() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %63.0
}

def @func_5196(%var_5190: Tensor[(4, 8, 11), bool], %var_5191: Tensor[(4, 8, 11), bool]) -> Tensor[(4, 8, 11), bool] {
  %64 = cast(%var_5191, dtype="bool") /* ty=Tensor[(4, 8, 11), bool] */;
  %65 = shape_of(%var_5190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_5190, dtype="bool") /* ty=Tensor[(4, 8, 11), bool] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%66, %67) /* ty=Tensor[(4, 8, 11), bool] */
}

def @func_7152() -> (Tensor[(10, 10, 2), float32],) {
  @func_7150() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_2239() -> Tensor[(10, 1, 2), float64] {
  %69 = fn () -> Tensor[(10, 1, 2), float64] {
    %68 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
    %68.1
  };
  %69() /* ty=Tensor[(10, 1, 2), float64] */
}

def @func_2404() -> (Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) {
  @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */
}

def @func_2838() -> (Tensor[(20), float64], Tensor[(10, 10, 2), float32]) {
  %70 = @func_2814() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) */;
  %71 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %72 = %70.3;
  %73 = %71.0;
  (%72, %73)
}

def @func_7194() -> (Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 1, 2), float32]) {
  %74 = @func_7076() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %75 = cast(meta[relay.Constant][5] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %76 = reshape(%75, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %77 = @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */;
  %78 = %77.0;
  %79 = cast(%78, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %80 = erf(%79) /* ty=Tensor[(10, 1, 2), float64] */;
  %81 = cast(%80, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %82 = %74.0;
  %83 = @func_474(%76) /* ty=Tensor[(7, 8, 7), int8] */;
  %84 = acos(%81) /* ty=Tensor[(10, 1, 2), float32] */;
  (%82, %83, meta[relay.Constant][5] /* ty=Tensor[(392), int8] */, %84)
}

def @func_5119(%var_5117: Tensor[(98, 4), int8]) -> (Tensor[(98, 4), float64], Tensor[(10, 10, 2), float32]) {
  @func_5116(%var_5117) /* ty=(Tensor[(98, 4), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_8345() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) {
  %85 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %86 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %87 = @func_6882() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) */;
  %88 = %85.0;
  %89 = %86.0;
  %90 = %87.2;
  (%88, %89, %90)
}

def @func_1440() -> Tensor[(10, 10, 2), float32] {
  %99 = fn () -> Tensor[(10, 10, 2), float32] {
    %91 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
    %92 = %91.1;
    %93 = cast(%92, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
    %94 = cast(meta[relay.Constant][6] /* ty=Tensor[(10, 10, 2), float64] */, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
    %95 = greater_equal(%93, %94) /* ty=Tensor[(10, 10, 2), bool] */;
    %96 = cast(%95, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %97 = rsqrt(%96) /* ty=Tensor[(10, 10, 2), float32] */;
    %98 = cast(%97, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    exp(%98) /* ty=Tensor[(10, 10, 2), float32] */
  };
  %99() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7320() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) {
  @func_7318() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_4719(%var_4717: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(200), float32], Tensor[(10, 10, 2), uint8]) {
  @func_4716(%var_4717) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(200), float32], Tensor[(10, 10, 2), uint8]) */
}

def @func_8274() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64]) {
  %100 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
  %101 = @func_2564() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %102 = @func_7096() /* ty=(Tensor[(10, 10, 2), float64],) */;
  %103 = %100.1;
  %104 = %101.0;
  %105 = %102.0;
  (%103, %104, %105)
}

def @func_1717() -> (Tensor[(10, 10, 2), float32],) {
  %108 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %106 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %107 = %106.0;
    (%107,)
  };
  %108() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_7259() -> (Tensor[(10, 10, 2), float32],) {
  %110 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %109 = @func_3001() /* ty=Tensor[(10, 10, 2), float32] */;
    (%109,)
  };
  %110() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_2178() -> Tensor[(10, 10, 2), float32] {
  @func_1640() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6679(%var_6668: Tensor[(9, 13, 13), uint8]) -> Tensor[(9, 13, 13), bool] {
  %111 = cast(%var_6668, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %112 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(9, 13, 13), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %113 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 13, 13), uint8] */, dtype="bool") /* ty=Tensor[(9, 13, 13), bool] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%113, %114) /* ty=Tensor[(9, 13, 13), bool] */
}

def @func_8634() -> (Tensor[(10, 10, 2), float32],) {
  %115 = @func_4902() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2, ?, 6), bool], Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(384), float32]) */;
  %116 = %115.1;
  (%116,)
}

def @func_4300() -> Tensor[(10, 10, 2), float32] {
  @func_3342() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1278(%var_1277: Tensor[(2, 1, 6), float32]) -> (Tensor[(2, 1, 6), float64],) {
  %121 = fn (%var_1238: Tensor[(2, 1, 6), float32]) -> (Tensor[(2, 1, 6), float64],) {
    %117 = cast(%var_1238, dtype="float32") /* ty=Tensor[(2, 1, 6), float32] */;
    %118 = rsqrt(%117) /* ty=Tensor[(2, 1, 6), float32] */;
    %119 = cast(%118, dtype="float64") /* ty=Tensor[(2, 1, 6), float64] */;
    %120 = atanh(%119) /* ty=Tensor[(2, 1, 6), float64] */;
    (%120,)
  };
  %121(%var_1277) /* ty=(Tensor[(2, 1, 6), float64],) */
}

def @func_7078() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  @func_7076() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_3381() -> (Tensor[(10, 10, 2), float32],) {
  @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_6320() -> (Tensor[(10, 10, 2), float32],) {
  @func_6318() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_4112() -> (Tensor[(10, 10, 2), float32],) {
  %122 = @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %123 = %122.1;
  (%123,)
}

def @func_1701(%var_1700: Tensor[(3, 16, 8), float32]) -> Tensor[(3, 16, 8), float64] {
  %127 = fn (%var_1690: Tensor[(3, 16, 8), float32]) -> Tensor[(3, 16, 8), float64] {
    %124 = cast(%var_1690, dtype="float32") /* ty=Tensor[(3, 16, 8), float32] */;
    %125 = exp(%124) /* ty=Tensor[(3, 16, 8), float32] */;
    %126 = cast(%125, dtype="float64") /* ty=Tensor[(3, 16, 8), float64] */;
    sin(%126) /* ty=Tensor[(3, 16, 8), float64] */
  };
  %127(%var_1700) /* ty=Tensor[(3, 16, 8), float64] */
}

def @func_5071() -> (Tensor[(6, 12, 7), float64], Tensor[(10, 10, 2), float32]) {
  @func_5069() /* ty=(Tensor[(6, 12, 7), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_5951(%var_5932: Tensor[(40), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(40), float64], Tensor[(10, 10, 2), float32]) {
  %128 = cast(%var_5932, dtype="float64") /* ty=Tensor[(40), float64] */;
  %129 = reshape(%128, newshape=[10, 4, 1]) /* ty=Tensor[(10, 4, 1), float64] */;
  %130 = @func_5812(%129) /* ty=(Tensor[(10, 4, 1), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %131 = %130.2;
  %132 = cast(%131, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %133 = reshape(%132, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %134 = @func_3296(%133) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */;
  %135 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  %136 = %134.1;
  (%135, %131, %var_5932, %136)
}

def @func_7797(%var_7753: Tensor[(4, 3, 6), float64], %var_7774: Tensor[(720), float64]) -> (Tensor[(4, 3, 6), int32], Tensor[(10, 10, 2), float32], Tensor[(2880), int8], Tensor[(720), float64], Tensor[(10, 10, 2), float32]) {
  %137 = cast(%var_7753, dtype="float64") /* ty=Tensor[(4, 3, 6), float64] */;
  %138 = log10(%137) /* ty=Tensor[(4, 3, 6), float64] */;
  %139 = cast(%138, dtype="int32") /* ty=Tensor[(4, 3, 6), int32] */;
  %140 = shape_of(%var_7753, dtype="int32") /* ty=Tensor[(3), int32] */;
  %141 = cast(%var_7753, dtype="int32") /* ty=Tensor[(4, 3, 6), int32] */;
  %142 = dyn.reshape(%139, %140, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %143 = cast(%var_7774, dtype="float64") /* ty=Tensor[(720), float64] */;
  %144 = reshape(%143, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float64] */;
  %145 = @func_1366(%144) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */;
  %146 = @func_3400() /* ty=Tensor[(10, 10, 2), float32] */;
  %147 = cast(%146, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %148 = reshape(%147, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %149 = @func_2142(%148) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */;
  %150 = right_shift(%141, %142) /* ty=Tensor[(4, 3, 6), int32] */;
  %151 = %145.3;
  %152 = %149.1;
  (%150, %146, %151, %var_7774, %152)
}

def @func_3761(%var_3757: Tensor[(12), float32]) -> (Tensor[(5, 4), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) {
  %153 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
  %154 = cast(%var_3757, dtype="float32") /* ty=Tensor[(12), float32] */;
  %155 = reshape(%154, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %156 = @func_1276(%155) /* ty=(Tensor[(2, 1, 6), float64],) */;
  %157 = %153.0;
  %158 = %156.0;
  (%157, %158, %var_3757)
}

def @func_2092() -> Tensor[(10, 10, 2), float32] {
  @func_2090() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_5143() -> Tensor[(10, 10, 2), float32] {
  %159 = fn () -> Tensor[(10, 10, 2), float32] {
    @func_2090() /* ty=Tensor[(10, 10, 2), float32] */
  };
  %159() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1905(%var_1903: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), uint32], Tensor[(5, 15, 3), float32], Tensor[(225), float32]) {
  @func_1902(%var_1903) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), uint32], Tensor[(5, 15, 3), float32], Tensor[(225), float32]) */
}

def @func_8582() -> Tensor[(10, 10, 2), float32] {
  @func_8580() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7896() -> Tensor[(10, 10, 2), float64] {
  @func_7894() /* ty=Tensor[(10, 10, 2), float64] */
}

def @func_8347() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) {
  @func_8345() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) */
}

def @func_4065(%var_4064: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) {
  %174 = fn (%var_4028: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) {
    %160 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %162 = cast(meta[relay.Constant][8] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %163 = cast(%var_4028, dtype="float64") /* ty=Tensor[(20), float64] */;
    %164 = reshape(%161, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
    %165 = reshape(%162, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %166 = reshape(%163, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %167 = @func_2463(%164, %165, %166) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) */;
    %168 = cast(meta[relay.Constant][8] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %169 = cast(meta[relay.Constant][9] /* ty=Tensor[(384), float32] */, dtype="float32") /* ty=Tensor[(384), float32] */;
    %170 = reshape(%169, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
    %171 = %167.2;
    %172 = cos(%168) /* ty=Tensor[(2880), float32] */;
    %173 = @func_1699(%170) /* ty=Tensor[(3, 16, 8), float64] */;
    (%160, %171, %var_4028, %172, %173, meta[relay.Constant][9] /* ty=Tensor[(384), float32] */)
  };
  %174(%var_4064) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */
}

def @func_2592() -> (Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) {
  @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */
}

def @func_3003() -> Tensor[(10, 10, 2), float32] {
  @func_3001() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6925() -> Tensor[(10, 10, 2), float32] {
  @func_6923() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3737(%var_3734: Tensor[(15, 6, 11), float32], %var_3735: Tensor[(15, 6, 11), float32], %var_3736: Tensor[(15, 6, 11), float32]) -> (Tensor[(15, 6, 11), float32], Tensor[(15, 6, 11), bool], Tensor[(10, 10, 2), float32], Tensor[(15, 6, 11), float64]) {
  @func_3732(%var_3734, %var_3735, %var_3736) /* ty=(Tensor[(15, 6, 11), float32], Tensor[(15, 6, 11), bool], Tensor[(10, 10, 2), float32], Tensor[(15, 6, 11), float64]) */
}

def @func_3732(%var_3657: Tensor[(15, 6, 11), float32], %var_3669: Tensor[(15, 6, 11), float32], %var_3694: Tensor[(15, 6, 11), float32]) -> (Tensor[(15, 6, 11), float32], Tensor[(15, 6, 11), bool], Tensor[(10, 10, 2), float32], Tensor[(15, 6, 11), float64]) {
  %175 = cast(%var_3657, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %176 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 6, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %179 = floor_mod(%177, %178) /* ty=Tensor[(15, 6, 11), float32] */;
  %180 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %182 = cast(%179, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %184 = cast(%var_3669, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %185 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(15, 6, 11), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 6, 11), float32] */, dtype="bool") /* ty=Tensor[(15, 6, 11), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = cast(meta[relay.Constant][10] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %189 = sqrt(%188) /* ty=Tensor[(15, 6, 11), float32] */;
  %190 = cast(%var_3694, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%189, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %194 = divide(%192, %193) /* ty=Tensor[(15, 6, 11), float64] */;
  %195 = cast(%194, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %196 = mod(%182, %183) /* ty=Tensor[(15, 6, 11), float32] */;
  %197 = less_equal(%186, %187) /* ty=Tensor[(15, 6, 11), bool] */;
  %198 = @func_3400() /* ty=Tensor[(10, 10, 2), float32] */;
  %199 = log2(%195) /* ty=Tensor[(15, 6, 11), float64] */;
  (%196, %197, %198, %199)
}

def @func_2816() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) {
  @func_2814() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) */
}

def @func_7984(%var_7982: Tensor[(2880), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) {
  @func_7981(%var_7982) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) */
}

def @func_3130() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %200 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %201 = %200.0;
  %202 = @func_2506() /* ty=Tensor[(10, 10, 2), float32] */;
  (%201, %202)
}

def @func_6923() -> Tensor[(10, 10, 2), float32] {
  %203 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %203.0
}

def @func_8482(%var_8476: Tensor[(20), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(20), bool]) {
  %204 = @func_7258() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %205 = @func_7240() /* ty=(Tensor[(20), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %206 = %205.0;
  %207 = cast(%var_8476, dtype="bool") /* ty=Tensor[(20), bool] */;
  %208 = shape_of(%206, dtype="int32") /* ty=Tensor[(1), int32] */;
  %209 = cast(%206, dtype="bool") /* ty=Tensor[(20), bool] */;
  %210 = dyn.reshape(%207, %208, newshape=[]) /* ty=Tensor[(?), bool] */;
  %211 = %204.0;
  %212 = less(%209, %210) /* ty=Tensor[(20), bool] */;
  (%211, %212)
}

def @func_7604(%var_7601: Tensor[(7, 12, 6), int32], %var_7602: Tensor[(7, 12, 6), int32], %var_7603: Tensor[(7, 12, 6), int32]) -> (Tensor[(7, 12, 6), int32], Tensor[(7, 12, 6), int16], Tensor[(5, 15, 3), float32], Tensor[(75, 3), float32], Tensor[(7, 12, 6), bool]) {
  @func_7599(%var_7601, %var_7602, %var_7603) /* ty=(Tensor[(7, 12, 6), int32], Tensor[(7, 12, 6), int16], Tensor[(5, 15, 3), float32], Tensor[(75, 3), float32], Tensor[(7, 12, 6), bool]) */
}

def @func_8541(%var_8539: Tensor[(6, 12, 7), float64]) -> (Tensor[(3, 9, 14), uint8], Tensor[(6, 12, 7), bool]) {
  @func_8538(%var_8539) /* ty=(Tensor[(3, 9, 14), uint8], Tensor[(6, 12, 7), bool]) */
}

def @func_4798() -> (Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) {
  %213 = @func_4723() /* ty=Tensor[(10, 10, 2), float32] */;
  %214 = cast(%213, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %215 = log10(%214) /* ty=Tensor[(10, 10, 2), float32] */;
  %216 = cast(%215, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %217 = sqrt(%216) /* ty=Tensor[(10, 10, 2), float32] */;
  %218 = cast(%215, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%217, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %222 = cast(%217, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %223 = reshape(%222, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %224 = @func_3296(%223) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */;
  %225 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %226 = right_shift(%220, %221) /* ty=Tensor[(10, 10, 2), uint32] */;
  %227 = %224.1;
  %228 = %225.0;
  (%226, %227, %228)
}

def @func_8538(%var_8532: Tensor[(6, 12, 7), float64]) -> (Tensor[(3, 9, 14), uint8], Tensor[(6, 12, 7), bool]) {
  %229 = cast(meta[relay.Constant][12] /* ty=Tensor[(3, 9, 14), uint8] */, dtype="uint8") /* ty=Tensor[(3, 9, 14), uint8] */;
  %230 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(3, 9, 14), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(meta[relay.Constant][11] /* ty=Tensor[(3, 9, 14), uint8] */, dtype="uint8") /* ty=Tensor[(3, 9, 14), uint8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %233 = @func_7638() /* ty=Tensor[(6, 12, 7), float64] */;
  %234 = cast(%var_8532, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %235 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
  %236 = cast(%233, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %238 = maximum(%231, %232) /* ty=Tensor[(3, 9, 14), uint8] */;
  %239 = less_equal(%236, %237) /* ty=Tensor[(6, 12, 7), bool] */;
  (%238, %239)
}

def @func_5520(%var_5519: Tensor[(6, 12, 7), int32]) -> (Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) {
  %249 = fn (%var_5500: Tensor[(6, 12, 7), int32]) -> (Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) {
    %240 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
    %241 = %240.0;
    %242 = cast(%var_5500, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    %243 = shape_of(%241, dtype="int32") /* ty=Tensor[(3), int32] */;
    %244 = cast(%241, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
    %245 = dyn.reshape(%242, %243, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %246 = cast(%var_5500, dtype="float32") /* ty=Tensor[(6, 12, 7), float32] */;
    %247 = multiply(%244, %245) /* ty=Tensor[(6, 12, 7), float64] */;
    %248 = atanh(%246) /* ty=Tensor[(6, 12, 7), float32] */;
    (%247, %248)
  };
  %249(%var_5519) /* ty=(Tensor[(6, 12, 7), float64], Tensor[(6, 12, 7), float32]) */
}

def @func_6121() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) {
  %256 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) {
    %250 = @func_5276() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
    %251 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
    %252 = @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
    %253 = %250.0;
    %254 = %251.0;
    %255 = %252.0;
    (%253, %254, %255)
  };
  %256() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */
}

def @func_1834() -> (Tensor[(10, 10, 2), float32],) {
  %259 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %257 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %258 = %257.0;
    (%258,)
  };
  %259() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_4389() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  @func_4387() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_3001() -> Tensor[(10, 10, 2), float32] {
  @func_1640() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4524() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) {
  %263 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) {
    %260 = @func_3189() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) */;
    %261 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
    %262 = %260.1;
    (%261, %262)
  };
  %263() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) */
}

def @func_6728() -> (Tensor[(6, 12, 7), int32], Tensor[(10, 1, 2), float64]) {
  %268 = fn () -> (Tensor[(6, 12, 7), int32], Tensor[(10, 1, 2), float64]) {
    %264 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
    %265 = @func_4523() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) */;
    %266 = %264.2;
    %267 = %265.1;
    (%266, %267)
  };
  %268() /* ty=(Tensor[(6, 12, 7), int32], Tensor[(10, 1, 2), float64]) */
}

def @func_5095() -> Tensor[(10, 10, 2), float32] {
  @func_5093() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2180() -> Tensor[(10, 10, 2), float32] {
  @func_2178() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_8121() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(48, 60), float32]) {
  %275 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(48, 60), float32]) {
    %269 = @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */;
    %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(48, 60), float32] */, dtype="float32") /* ty=Tensor[(48, 60), float32] */;
    %271 = reshape(%270, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %272 = @func_7981(%271) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) */;
    %273 = %269.0;
    %274 = %272.6;
    (%273, %274, meta[relay.Constant][13] /* ty=Tensor[(48, 60), float32] */)
  };
  %275() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(48, 60), float32]) */
}

def @func_5812(%var_5779: Tensor[(10, 4, 1), float64]) -> (Tensor[(10, 4, 1), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %276 = cast(-0.415788f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %277 = cast(%var_5779, dtype="float64") /* ty=Tensor[(10, 4, 1), float64] */;
  %278 = @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */;
  %279 = floor_mod(%276, %277) /* ty=Tensor[(10, 4, 1), float64] */;
  %280 = @func_1606() /* ty=Tensor[(10, 10, 2), float32] */;
  %281 = %278.1;
  (%279, %280, %281)
}

def @func_8017() -> (Tensor[(10, 1, 2), float64],) {
  %284 = fn () -> (Tensor[(10, 1, 2), float64],) {
    %282 = @func_5086() /* ty=(Tensor[(10, 1, 2), float64],) */;
    %283 = %282.0;
    (%283,)
  };
  %284() /* ty=(Tensor[(10, 1, 2), float64],) */
}

def @func_7318() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) {
  %285 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %286 = @func_7096() /* ty=(Tensor[(10, 10, 2), float64],) */;
  %287 = %285.0;
  %288 = %286.0;
  %289 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
  (%287, %288, %289)
}

def @func_8402(%var_8400: Tensor[(8, 14, 3), float32]) -> (Tensor[(8, 14, 3), float32], Tensor[(10, 10, 2), float32], Tensor[(8, 14, 3), float32]) {
  @func_8399(%var_8400) /* ty=(Tensor[(8, 14, 3), float32], Tensor[(10, 10, 2), float32], Tensor[(8, 14, 3), float32]) */
}

def @func_4496() -> (Tensor[(10, 10, 2), float32],) {
  %292 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %290 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %291 = %290.0;
    (%291,)
  };
  %292() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_2296(%var_2295: Tensor[(16, 15, 12), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) {
  %320 = fn (%var_2282: Tensor[(16, 15, 12), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) {
    %293 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %294 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %295 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %296 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 1440), int8] */, dtype="int8") /* ty=Tensor[(2, 1440), int8] */;
    %297 = cast(meta[relay.Constant][14] /* ty=Tensor[(2, 1440), int8] */, dtype="int8") /* ty=Tensor[(2, 1440), int8] */;
    %298 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
    %299 = cast(%298, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
    %300 = reshape(%296, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
    %301 = reshape(%297, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
    %302 = reshape(%299, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %303 = @func_599(%300, %301, %302) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
    %304 = %303.1;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %306 = atan(%305) /* ty=Tensor[(16, 15, 12), float32] */;
    %307 = cast(%var_2282, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
    %309 = cast(%306, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %311 = mod(%309, %310) /* ty=Tensor[(16, 15, 12), float32] */;
    %312 = cast(%304, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
    %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
    %314 = cast(%311, dtype="int64") /* ty=Tensor[(16, 15, 12), int64] */;
    %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %316 = %293.0;
    %317 = %294.0;
    %318 = %295.0;
    %319 = left_shift(%314, %315) /* ty=Tensor[(16, 15, 12), int64] */;
    (%298, meta[relay.Constant][14] /* ty=Tensor[(2, 1440), int8] */, %316, %317, %318, %319)
  };
  %320(%var_2295) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */
}

def @func_2377() -> Tensor[(10, 10, 2), float32] {
  @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2144(%var_2143: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) {
  %331 = fn (%var_2131: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) {
    %321 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
    %322 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
    %323 = cast(%var_2131, dtype="uint16") /* ty=Tensor[(10, 10, 2), uint16] */;
    %324 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
    %325 = cast(%322, dtype="uint16") /* ty=Tensor[(10, 10, 2), uint16] */;
    %326 = dyn.reshape(%323, %324, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %327 = subtract(%325, %326) /* ty=Tensor[(10, 10, 2), uint16] */;
    %328 = cast(%327, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %329 = %321.0;
    %330 = asin(%328) /* ty=Tensor[(10, 10, 2), float32] */;
    (%329, %330)
  };
  %331(%var_2143) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */
}

def @func_2590() -> (Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) {
  %332 = @func_1833() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %333 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
  %334 = %332.0;
  %335 = %333.2;
  (%334, %335)
}

def @func_3963(%var_3953: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(20), float64]) {
  %336 = cast(%var_3953, dtype="float64") /* ty=Tensor[(20), float64] */;
  %337 = reshape(%336, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %338 = @func_276(%337) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %339 = @func_2838() /* ty=(Tensor[(20), float64], Tensor[(10, 10, 2), float32]) */;
  %340 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %341 = %338.0;
  %342 = %339.0;
  (%340, %341, %var_3953, %342)
}

def @func_4114() -> (Tensor[(10, 10, 2), float32],) {
  @func_4112() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_6682(%var_6680: Tensor[(9, 13, 13), uint8]) -> Tensor[(9, 13, 13), bool] {
  @func_6679(%var_6680) /* ty=Tensor[(9, 13, 13), bool] */
}

def @func_7894() -> Tensor[(10, 10, 2), float64] {
  %343 = @func_7096() /* ty=(Tensor[(10, 10, 2), float64],) */;
  %343.0
}

def @func_8399(%var_8369: Tensor[(8, 14, 3), float32]) -> (Tensor[(8, 14, 3), float32], Tensor[(10, 10, 2), float32], Tensor[(8, 14, 3), float32]) {
  %344 = cast(%var_8369, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %345 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(8, 14, 3), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 14, 3), float32] */, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %348 = cast(%var_8369, dtype="float32") /* ty=Tensor[(8, 14, 3), float32] */;
  %349 = multiply(%346, %347) /* ty=Tensor[(8, 14, 3), float32] */;
  %350 = @func_7019() /* ty=Tensor[(10, 10, 2), float32] */;
  %351 = sin(%348) /* ty=Tensor[(8, 14, 3), float32] */;
  (%349, %350, %351)
}

def @func_1584(%var_1583: Tensor[(720), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(720), float64], Tensor[(10, 1, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %361 = fn (%var_1550: Tensor[(720), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(720), float64], Tensor[(10, 1, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
    %352 = cast(%var_1550, dtype="float64") /* ty=Tensor[(720), float64] */;
    %353 = reshape(%352, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float64] */;
    %354 = @func_1366(%353) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */;
    %355 = %354.2;
    %356 = cast(%355, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
    %357 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
    %358 = sin(%356) /* ty=Tensor[(10, 1, 2), float32] */;
    %359 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
    %360 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
    (%357, %var_1550, %358, %359, %360)
  };
  %361(%var_1583) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(720), float64], Tensor[(10, 1, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_1369(%var_1367: Tensor[(3, 15, 16), float64]) -> (Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) {
  @func_1366(%var_1367) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */
}

def @func_1608() -> Tensor[(10, 10, 2), float32] {
  @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3296(%var_3238: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) {
  %362 = @func_2072() /* ty=Tensor[(10, 10, 2), float32] */;
  %363 = cast(%var_3238, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %364 = shape_of(%362, dtype="int32") /* ty=Tensor[(3), int32] */;
  %365 = cast(%362, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %366 = dyn.reshape(%363, %364, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %367 = not_equal(%365, %366) /* ty=Tensor[(10, 10, 2), bool] */;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
  %369 = cast(%362, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %370 = log2(%368) /* ty=Tensor[(10, 10, 2), float64] */;
  %371 = tan(%369) /* ty=Tensor[(10, 10, 2), float32] */;
  (%370, %371)
}

def @func_7076() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %372 = @func_1597() /* ty=Tensor[(10, 10, 2), float32] */;
  %373 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  (%372, %373)
}

def @func_5069() -> (Tensor[(6, 12, 7), float64], Tensor[(10, 10, 2), float32]) {
  %374 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %375 = %374.0;
  %376 = cast(%375, dtype="float64") /* ty=Tensor[(6, 12, 7), float64] */;
  %377 = @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */;
  %378 = rsqrt(%376) /* ty=Tensor[(6, 12, 7), float64] */;
  %379 = %377.0;
  (%378, %379)
}

def @func_5087() -> (Tensor[(10, 1, 2), float64],) {
  %382 = fn () -> (Tensor[(10, 1, 2), float64],) {
    %380 = @func_2814() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(2880), bool], Tensor[(20), float64], Tensor[(432), float64]) */;
    %381 = %380.2;
    (%381,)
  };
  %382() /* ty=(Tensor[(10, 1, 2), float64],) */
}

def @func_7559(%var_7557: Tensor[(225, 6), float32]) -> Tensor[(225, 6), int32] {
  @func_7556(%var_7557) /* ty=Tensor[(225, 6), int32] */
}

def @func_7241() -> (Tensor[(20), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %387 = fn () -> (Tensor[(20), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
    %383 = @func_3189() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) */;
    %384 = %383.2;
    %385 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
    %386 = @func_4723() /* ty=Tensor[(10, 10, 2), float32] */;
    (%384, %385, %386)
  };
  %387() /* ty=(Tensor[(20), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_7021() -> Tensor[(10, 10, 2), float32] {
  @func_7019() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6882() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) {
  %388 = @func_4232() /* ty=(Tensor[(5, 4), float64],) */;
  %389 = cast(meta[relay.Constant][16] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %390 = reshape(%389, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %391 = @func_3296(%390) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */;
  %392 = %388.0;
  %393 = %391.1;
  (%392, %393, meta[relay.Constant][16] /* ty=Tensor[(200), float32] */)
}

def @func_5211() -> Tensor[(10, 10, 2), bool] {
  %395 = fn () -> Tensor[(10, 10, 2), bool] {
    %394 = @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */;
    %394.2
  };
  %395() /* ty=Tensor[(10, 10, 2), bool] */
}

def @func_2508() -> Tensor[(10, 10, 2), float32] {
  @func_2506() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7875() -> (Tensor[(10, 10, 2), bool],) {
  @func_7873() /* ty=(Tensor[(10, 10, 2), bool],) */
}

def @func_5815(%var_5813: Tensor[(10, 4, 1), float64]) -> (Tensor[(10, 4, 1), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  @func_5812(%var_5813) /* ty=(Tensor[(10, 4, 1), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_4486() -> (Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) {
  @func_4484() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_6613() -> Tensor[(10, 10, 2), float32] {
  %396 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  %397 = cast(%396, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  acos(%397) /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3966(%var_3964: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(20), float64]) {
  @func_3963(%var_3964) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(20), float64]) */
}

def @func_8574() -> Tensor[(10, 10, 2), float32] {
  @func_8572() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3604() -> (Tensor[(10, 10, 2), float32],) {
  %399 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %398 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
    (%398,)
  };
  %399() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_5717() -> (Tensor[(5, 4), float64], Tensor[(5, 4), float64]) {
  %404 = fn () -> (Tensor[(5, 4), float64], Tensor[(5, 4), float64]) {
    %400 = @func_4232() /* ty=(Tensor[(5, 4), float64],) */;
    %401 = @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */;
    %402 = %400.0;
    %403 = %401.0;
    (%402, %403)
  };
  %404() /* ty=(Tensor[(5, 4), float64], Tensor[(5, 4), float64]) */
}

def @func_8636() -> (Tensor[(10, 10, 2), float32],) {
  @func_8634() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_3917(%var_3915: Tensor[(10, 2, 13), float32], %var_3916: Tensor[(384), float32]) -> (Tensor[(3, 16, 8), float64], Tensor[(384), float32], Tensor[(10, 2, 13), bool], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 2, 13), float32]) {
  @func_3913(%var_3915, %var_3916) /* ty=(Tensor[(3, 16, 8), float64], Tensor[(384), float32], Tensor[(10, 2, 13), bool], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 2, 13), float32]) */
}

def @func_6577(%var_6537: Tensor[(392), int8], %var_6547: Tensor[(336), uint64], %var_6568: Tensor[(12), float32], %var_6574: Tensor[(192, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(2880), float32], Tensor[(336), uint64], Tensor[(20), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32], Tensor[(10, 10, 2), float32], Tensor[(3, 16, 8), float64], Tensor[(192, 2), float32]) {
  %405 = @func_1597() /* ty=Tensor[(10, 10, 2), float32] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %407 = cast(%var_6537, dtype="int8") /* ty=Tensor[(392), int8] */;
  %408 = reshape(%407, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %409 = cast(%var_6547, dtype="uint64") /* ty=Tensor[(336), uint64] */;
  %410 = cast(%var_6547, dtype="uint64") /* ty=Tensor[(336), uint64] */;
  %411 = cast(meta[relay.Constant][17] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %412 = reshape(%409, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), uint64] */;
  %413 = reshape(%410, newshape=[3, 8, 14]) /* ty=Tensor[(3, 8, 14), uint64] */;
  %414 = reshape(%411, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %415 = @func_6425(%412, %413, %414) /* ty=(Tensor[(3, 8, 14), bool], Tensor[(2880), float32], Tensor[(20), float64]) */;
  %416 = cast(%var_6568, dtype="float32") /* ty=Tensor[(12), float32] */;
  %417 = reshape(%416, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
  %418 = @func_1276(%417) /* ty=(Tensor[(2, 1, 6), float64],) */;
  %419 = cast(%var_6574, dtype="float32") /* ty=Tensor[(192, 2), float32] */;
  %420 = reshape(%419, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
  %421 = acosh(%406) /* ty=Tensor[(10, 10, 2), float32] */;
  %422 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
  %423 = @func_4300() /* ty=Tensor[(10, 10, 2), float32] */;
  %424 = @func_474(%408) /* ty=Tensor[(7, 8, 7), int8] */;
  %425 = %415.1;
  %426 = %418.0;
  %427 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %428 = @func_1699(%420) /* ty=Tensor[(3, 16, 8), float64] */;
  (%421, %422, %423, %424, %var_6537, %425, %var_6547, meta[relay.Constant][17] /* ty=Tensor[(20), float64] */, %426, %var_6568, %427, %428, %var_6574)
}

def @func_6137() -> Tensor[(10, 10, 2), float32] {
  @func_6135() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_5920() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %432 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
    %429 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %430 = %429.0;
    %431 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
    (%430, %431)
  };
  %432() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_3191() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) {
  @func_3189() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) */
}

def @func_5983() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(720), float64]) {
  @func_5981() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(720), float64]) */
}

def @func_3764(%var_3762: Tensor[(12), float32]) -> (Tensor[(5, 4), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) {
  @func_3761(%var_3762) /* ty=(Tensor[(5, 4), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32]) */
}

def @func_2073() -> Tensor[(10, 10, 2), float32] {
  %433 = fn () -> Tensor[(10, 10, 2), float32] {
    @func_1640() /* ty=Tensor[(10, 10, 2), float32] */
  };
  %433() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6790() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %434 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %435 = @func_6613() /* ty=Tensor[(10, 10, 2), float32] */;
  %436 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  (%434, %435, %436)
}

def @func_4800() -> (Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) {
  @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */
}

def @func_2402() -> (Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) {
  %437 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  %438 = cast(%437, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %439 = reshape(%438, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
  %440 = @func_2142(%439) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */;
  %441 = cast(meta[relay.Constant][18] /* ty=Tensor[(225, 1), float32] */, dtype="float32") /* ty=Tensor[(225, 1), float32] */;
  %442 = reshape(%441, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), float32] */;
  %443 = @func_1529(%442) /* ty=(Tensor[(5, 15, 3), float32],) */;
  %444 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  %445 = %440.0;
  %446 = %443.0;
  (%444, %437, %445, %446, meta[relay.Constant][18] /* ty=Tensor[(225, 1), float32] */)
}

def @func_2840() -> (Tensor[(20), float64], Tensor[(10, 10, 2), float32]) {
  @func_2838() /* ty=(Tensor[(20), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_1902(%var_1892: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), uint32], Tensor[(5, 15, 3), float32], Tensor[(225), float32]) {
  %447 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %448 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  %449 = cast(%var_1892, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %450 = shape_of(%448, dtype="int32") /* ty=Tensor[(3), int32] */;
  %451 = cast(%448, dtype="uint32") /* ty=Tensor[(10, 10, 2), uint32] */;
  %452 = dyn.reshape(%449, %450, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %453 = cast(meta[relay.Constant][19] /* ty=Tensor[(225), float32] */, dtype="float32") /* ty=Tensor[(225), float32] */;
  %454 = reshape(%453, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), float32] */;
  %455 = @func_1529(%454) /* ty=(Tensor[(5, 15, 3), float32],) */;
  %456 = %447.0;
  %457 = add(%451, %452) /* ty=Tensor[(10, 10, 2), uint32] */;
  %458 = %455.0;
  (%456, %457, %458, meta[relay.Constant][19] /* ty=Tensor[(225), float32] */)
}

def @func_4165() -> Tensor[(10, 10, 2), float32] {
  %459 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %460 = %459.0;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  atan(%461) /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_5407() -> Tensor[(10, 10, 2), float32] {
  %462 = fn () -> Tensor[(10, 10, 2), float32] {
    @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
  };
  %462() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7684(%var_7682: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 1, 2), float32], Tensor[(10, 7, 2), bool]) {
  @func_7681(%var_7682) /* ty=(Tensor[(10, 1, 2), float32], Tensor[(10, 7, 2), bool]) */
}

def @func_7374() -> Tensor[(10, 10, 2), float32] {
  %464 = fn () -> Tensor[(10, 10, 2), float32] {
    %463 = @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
    %463.0
  };
  %464() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6615() -> Tensor[(10, 10, 2), float32] {
  @func_6613() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3299(%var_3297: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) {
  @func_3296(%var_3297) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_2566() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  @func_2564() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_2736() -> (Tensor[(98, 4), float64], Tensor[(10, 1, 2), float64]) {
  %470 = fn () -> (Tensor[(98, 4), float64], Tensor[(10, 1, 2), float64]) {
    %465 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
    %466 = %465.1;
    %467 = cast(%466, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
    %468 = exp(%467) /* ty=Tensor[(98, 4), float64] */;
    %469 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
    (%468, %469)
  };
  %470() /* ty=(Tensor[(98, 4), float64], Tensor[(10, 1, 2), float64]) */
}

def @func_7860() -> (Tensor[(10, 10, 2), float32],) {
  %473 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %471 = @func_5276() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
    %472 = %471.0;
    (%472,)
  };
  %473() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_5200(%var_5198: Tensor[(4, 8, 11), bool], %var_5199: Tensor[(4, 8, 11), bool]) -> Tensor[(4, 8, 11), bool] {
  @func_5196(%var_5198, %var_5199) /* ty=Tensor[(4, 8, 11), bool] */
}

def @func_2872() -> (Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) {
  @func_2870() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) */
}

def @func_3343() -> Tensor[(10, 10, 2), float32] {
  %474 = fn () -> Tensor[(10, 10, 2), float32] {
    @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
  };
  %474() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_2506() -> Tensor[(10, 10, 2), float32] {
  @func_2377() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4167() -> Tensor[(10, 10, 2), float32] {
  @func_4165() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4484() -> (Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) {
  %475 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %476 = cast(%475, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %477 = reshape(%476, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %478 = @func_3046(%477) /* ty=(Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) */;
  %479 = @func_4352() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %480 = %478.0;
  %481 = %479.0;
  (%475, %480, %481)
}

def @func_4233() -> (Tensor[(5, 4), float64],) {
  %484 = fn () -> (Tensor[(5, 4), float64],) {
    %482 = @func_1321() /* ty=(Tensor[(2, 13, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(5, 4), float64]) */;
    %483 = %482.2;
    (%483,)
  };
  %484() /* ty=(Tensor[(5, 4), float64],) */
}

def @func_4639() -> (Tensor[(10, 10, 2), float32], Tensor[(98, 4), int8]) {
  %488 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(98, 4), int8]) {
    %485 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
    %486 = @func_2506() /* ty=Tensor[(10, 10, 2), float32] */;
    %487 = %485.1;
    (%486, %487)
  };
  %488() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(98, 4), int8]) */
}

def @func_6318() -> (Tensor[(10, 10, 2), float32],) {
  %489 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  (%489,)
}

def @func_7981(%var_7950: Tensor[(2880), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 10, 2), float32], Tensor[(20), float64]) {
  %490 = cast(%var_7950, dtype="float32") /* ty=Tensor[(2880), float32] */;
  %491 = reshape(%490, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), float32] */;
  %492 = @func_2294(%491) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */;
  %493 = cast(meta[relay.Constant][20] /* ty=Tensor[(392), int8] */, dtype="int8") /* ty=Tensor[(392), int8] */;
  %494 = reshape(%493, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %495 = cast(meta[relay.Constant][21] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %496 = reshape(%495, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %497 = @func_4063(%496) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
  %498 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %499 = %492.4;
  %500 = @func_4263() /* ty=Tensor[(10, 10, 2), float32] */;
  %501 = @func_474(%494) /* ty=Tensor[(7, 8, 7), int8] */;
  %502 = %497.0;
  (%498, %499, %var_7950, %500, %501, meta[relay.Constant][20] /* ty=Tensor[(392), int8] */, %502, meta[relay.Constant][21] /* ty=Tensor[(20), float64] */)
}

def @func_4626() -> (Tensor[(6, 12, 7), int32],) {
  @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */
}

def @func_1613() -> (Tensor[(10, 10, 2), float32],) {
  %503 = @func_1606() /* ty=Tensor[(10, 10, 2), float32] */;
  (%503,)
}

def @func_3402() -> Tensor[(10, 10, 2), float32] {
  @func_3400() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_8572() -> Tensor[(10, 10, 2), float32] {
  %504 = @func_8208() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %504.0
}

def @func_7097() -> (Tensor[(10, 10, 2), float64],) {
  %513 = fn () -> (Tensor[(10, 10, 2), float64],) {
    %505 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
    %506 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 10, 2), float32] */, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%505, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %510 = mod(%508, %509) /* ty=Tensor[(10, 10, 2), float32] */;
    %511 = cast(%510, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
    %512 = asinh(%511) /* ty=Tensor[(10, 10, 2), float64] */;
    (%512,)
  };
  %513() /* ty=(Tensor[(10, 10, 2), float64],) */
}

def @func_1529(%var_1499: Tensor[(5, 15, 3), float32]) -> (Tensor[(5, 15, 3), float32],) {
  %514 = cast(%var_1499, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %515 = acosh(%514) /* ty=Tensor[(5, 15, 3), float32] */;
  %516 = cast(%515, dtype="float32") /* ty=Tensor[(5, 15, 3), float32] */;
  %517 = sigmoid(%516) /* ty=Tensor[(5, 15, 3), float32] */;
  (%517,)
}

def @func_8210() -> (Tensor[(10, 10, 2), float32],) {
  @func_8208() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_8276() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64]) {
  @func_8274() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float64]) */
}

def @func_3132() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  @func_3130() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_6884() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) {
  @func_6882() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) */
}

def @func_5116(%var_5107: Tensor[(98, 4), int8]) -> (Tensor[(98, 4), float64], Tensor[(10, 10, 2), float32]) {
  %518 = @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */;
  %519 = %518.1;
  %520 = cast(%var_5107, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%519, dtype="float64") /* ty=Tensor[(98, 4), float64] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %524 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %525 = mod(%522, %523) /* ty=Tensor[(98, 4), float64] */;
  %526 = %524.0;
  (%525, %526)
}

def @func_3103() -> Tensor[(10, 10, 2), float32] {
  @func_3101() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_3189() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float32]) {
  %527 = cast(meta[relay.Constant][23] /* ty=Tensor[(20), float32] */, dtype="float32") /* ty=Tensor[(20), float32] */;
  %528 = reshape(%527, newshape=[10, 2]) /* ty=Tensor[(10, 2), float32] */;
  %529 = @func_1078(%528) /* ty=(Tensor[(10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) */;
  %530 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %531 = %529.1;
  (%530, %531, meta[relay.Constant][23] /* ty=Tensor[(20), float32] */)
}

def @func_4554() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) {
  @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */
}

def @func_4716(%var_4699: Tensor[(10, 10, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(200), float32], Tensor[(10, 10, 2), uint8]) {
  %532 = @func_4552() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */;
  %533 = %532.1;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %535 = reshape(%534, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %536 = @func_3046(%535) /* ty=(Tensor[(5, 4), float64], Tensor[(5, 15, 3), float32], Tensor[(200), float32]) */;
  %537 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %538 = %537.0;
  %539 = cast(%var_4699, dtype="uint8") /* ty=Tensor[(10, 10, 2), uint8] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="uint8") /* ty=Tensor[(10, 10, 2), uint8] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %543 = %536.2;
  %544 = bitwise_and(%541, %542) /* ty=Tensor[(10, 10, 2), uint8] */;
  (%533, %543, %544)
}

def @func_7019() -> Tensor[(10, 10, 2), float32] {
  @func_2090() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_8658() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) {
  %545 = @func_5716() /* ty=(Tensor[(5, 4), float64], Tensor[(5, 4), float64]) */;
  %546 = @func_6800() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %547 = %545.0;
  %548 = %546.0;
  (%547, %548)
}

def @main(%var_8837: Tensor[(48, 60), float32]) -> (Tensor[(10, 10, 2), uint32], Tensor[(48, 60), int32], Tensor[(48, 60), float64]) {
  %549 = @func_4800() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
  %550 = @func_8121() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(48, 60), float32]) */;
  %551 = %550.2;
  %552 = cast(meta[relay.Constant][24] /* ty=Tensor[(48, 60), float32] */, dtype="int32") /* ty=Tensor[(48, 60), int32] */;
  %553 = shape_of(%551, dtype="int32") /* ty=Tensor[(2), int32] */;
  %554 = cast(%551, dtype="int32") /* ty=Tensor[(48, 60), int32] */;
  %555 = dyn.reshape(%552, %553, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %556 = cast(%var_8837, dtype="float64") /* ty=Tensor[(48, 60), float64] */;
  %557 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(48, 60), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %558 = cast(meta[relay.Constant][24] /* ty=Tensor[(48, 60), float32] */, dtype="float64") /* ty=Tensor[(48, 60), float64] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %560 = %549.0;
  %561 = add(%554, %555) /* ty=Tensor[(48, 60), int32] */;
  %562 = power(%558, %559) /* ty=Tensor[(48, 60), float64] */;
  (%560, %561, %562)
}

def @func_7599(%var_7561: Tensor[(7, 12, 6), int32], %var_7562: Tensor[(7, 12, 6), int32], %var_7567: Tensor[(7, 12, 6), int32]) -> (Tensor[(7, 12, 6), int32], Tensor[(7, 12, 6), int16], Tensor[(5, 15, 3), float32], Tensor[(75, 3), float32], Tensor[(7, 12, 6), bool]) {
  %563 = cast(%var_7562, dtype="int32") /* ty=Tensor[(7, 12, 6), int32] */;
  %564 = shape_of(%var_7561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%var_7561, dtype="int32") /* ty=Tensor[(7, 12, 6), int32] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %567 = cast(%var_7567, dtype="int16") /* ty=Tensor[(7, 12, 6), int16] */;
  %568 = shape_of(%var_7561, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%var_7561, dtype="int16") /* ty=Tensor[(7, 12, 6), int16] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %571 = cast(meta[relay.Constant][25] /* ty=Tensor[(75, 3), float32] */, dtype="float32") /* ty=Tensor[(75, 3), float32] */;
  %572 = reshape(%571, newshape=[5, 15, 3]) /* ty=Tensor[(5, 15, 3), float32] */;
  %573 = @func_1529(%572) /* ty=(Tensor[(5, 15, 3), float32],) */;
  %574 = cast(%var_7562, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  %575 = shape_of(%var_7567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_7567, dtype="bool") /* ty=Tensor[(7, 12, 6), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = bitwise_or(%565, %566) /* ty=Tensor[(7, 12, 6), int32] */;
  %579 = multiply(%569, %570) /* ty=Tensor[(7, 12, 6), int16] */;
  %580 = %573.0;
  %581 = logical_and(%576, %577) /* ty=Tensor[(7, 12, 6), bool] */;
  (%578, %579, %580, meta[relay.Constant][25] /* ty=Tensor[(75, 3), float32] */, %581)
}

def @func_2467(%var_2464: Tensor[(10, 10, 2), float32], %var_2465: Tensor[(2880), float32], %var_2466: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) {
  %600 = fn (%var_2425: Tensor[(10, 10, 2), float32], %var_2456: Tensor[(2880), float32], %var_2459: Tensor[(20), float64]) -> (Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) {
    %582 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
    %583 = cast(%var_2425, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(3), int32] */;
    %585 = cast(%582, dtype="float64") /* ty=Tensor[(10, 10, 2), float64] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %587 = cast(%var_2456, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %588 = reshape(%587, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), float32] */;
    %589 = @func_2294(%588) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */;
    %590 = cast(%var_2456, dtype="int8") /* ty=Tensor[(2880), int8] */;
    %591 = cast(%var_2456, dtype="int8") /* ty=Tensor[(2880), int8] */;
    %592 = cast(%var_2459, dtype="float64") /* ty=Tensor[(20), float64] */;
    %593 = reshape(%590, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
    %594 = reshape(%591, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
    %595 = reshape(%592, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %596 = @func_599(%593, %594, %595) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
    %597 = minimum(%585, %586) /* ty=Tensor[(10, 10, 2), float64] */;
    %598 = %589.4;
    %599 = %596.3;
    (%597, %598, %var_2456, %599, %var_2459)
  };
  %600(%var_2464, %var_2465, %var_2466) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) */
}

def @func_6357() -> (Tensor[(10, 10, 2), float32],) {
  %602 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %601 = @func_2506() /* ty=Tensor[(10, 10, 2), float32] */;
    (%601,)
  };
  %602() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_4264() -> Tensor[(10, 10, 2), float32] {
  %604 = fn () -> Tensor[(10, 10, 2), float32] {
    %603 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %603.0
  };
  %604() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1599() -> Tensor[(10, 10, 2), float32] {
  @func_1597() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_476(%var_475: Tensor[(7, 8, 7), int8]) -> Tensor[(7, 8, 7), int8] {
  %607 = fn (%var_467: Tensor[(7, 8, 7), int8]) -> Tensor[(7, 8, 7), int8] {
    %605 = cast(meta[relay.Constant][26] /* ty=Tensor[(7, 1, 7), int8] */, dtype="int8") /* ty=Tensor[(7, 1, 7), int8] */;
    %606 = cast(%var_467, dtype="int8") /* ty=Tensor[(7, 8, 7), int8] */;
    logical_xor(%605, %606) /* ty=Tensor[(7, 8, 7), int8] */
  };
  %607(%var_475) /* ty=Tensor[(7, 8, 7), int8] */
}

def @func_6840() -> (Tensor[(10, 10, 2), float32],) {
  @func_6838() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_2064() -> (Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) {
  %608 = @func_1439() /* ty=Tensor[(10, 10, 2), float32] */;
  %609 = cast(%608, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
  %610 = sigmoid(%609) /* ty=Tensor[(10, 10, 2), float32] */;
  %611 = cast(%608, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(10, 10, 2), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = cast(meta[relay.Constant][27] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %616 = reshape(%615, newshape=[3, 15, 16]) /* ty=Tensor[(3, 15, 16), float64] */;
  %617 = @func_1366(%616) /* ty=(Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) */;
  %618 = greater(%613, %614) /* ty=Tensor[(10, 10, 2), bool] */;
  %619 = %617.1;
  (%618, %619, meta[relay.Constant][27] /* ty=Tensor[(720), float64] */)
}

def @func_6802() -> (Tensor[(10, 10, 2), float32],) {
  @func_6800() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_3913(%var_3832: Tensor[(10, 2, 13), float32], %var_3854: Tensor[(384), float32]) -> (Tensor[(3, 16, 8), float64], Tensor[(384), float32], Tensor[(10, 2, 13), bool], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 2, 13), float32]) {
  %620 = cast(%var_3854, dtype="float32") /* ty=Tensor[(384), float32] */;
  %621 = reshape(%620, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
  %622 = cast(%var_3832, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %623 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(10, 2, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 2, 13), float32] */, dtype="bool") /* ty=Tensor[(10, 2, 13), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %627 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 2, 13), float32] */, dtype="float64") /* ty=Tensor[(10, 2, 13), float64] */;
  %628 = atanh(%627) /* ty=Tensor[(10, 2, 13), float64] */;
  %629 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 2, 13), float32] */, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %630 = shape_of(%var_3832, dtype="int32") /* ty=Tensor[(3), int32] */;
  %631 = cast(%var_3832, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %632 = dyn.reshape(%629, %630, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %633 = floor_divide(%631, %632) /* ty=Tensor[(10, 2, 13), float32] */;
  %634 = cast(%633, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %635 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%628, dtype="float32") /* ty=Tensor[(10, 2, 13), float32] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %638 = @func_1699(%621) /* ty=Tensor[(3, 16, 8), float64] */;
  %639 = greater(%624, %625) /* ty=Tensor[(10, 2, 13), bool] */;
  %640 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
  %641 = %626.0;
  %642 = power(%636, %637) /* ty=Tensor[(10, 2, 13), float32] */;
  (%638, %var_3854, %639, %640, %641, %642)
}

def @func_7125(%var_7124: Tensor[(200), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32]) {
  %654 = fn (%var_7106: Tensor[(200), float32]) -> (Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32]) {
    %643 = @func_5086() /* ty=(Tensor[(10, 1, 2), float64],) */;
    %644 = cast(%var_7106, dtype="float32") /* ty=Tensor[(200), float32] */;
    %645 = reshape(%644, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
    %646 = @func_2142(%645) /* ty=(Tensor[(10, 10, 2), bool], Tensor[(10, 10, 2), float32]) */;
    %647 = %646.1;
    %648 = cast(%var_7106, dtype="float32") /* ty=Tensor[(200), float32] */;
    %649 = shape_of(%647, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%647, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %652 = %643.0;
    %653 = divide(%650, %651) /* ty=Tensor[(10, 10, 2), float32] */;
    (%652, %653)
  };
  %654(%var_7124) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_2066() -> (Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) {
  @func_2064() /* ty=(Tensor[(10, 10, 2), bool], Tensor[(98, 4), int8], Tensor[(720), float64]) */
}

def @func_3400() -> Tensor[(10, 10, 2), float32] {
  @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4552() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) {
  %655 = @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */;
  %656 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %657 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
  %658 = %655.2;
  (%656, %657, %658)
}

def @func_4903() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2, ?, 6), bool], Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(384), float32]) {
  %682 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2, ?, 6), bool], Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(384), float32]) {
    %659 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %660 = @func_3001() /* ty=Tensor[(10, 10, 2), float32] */;
    %661 = cast(%660, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %662 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 2), float32] */, dtype="float32") /* ty=Tensor[(6, 2), float32] */;
    %663 = reshape(%662, newshape=[2, 1, 6]) /* ty=Tensor[(2, 1, 6), float32] */;
    %664 = @func_1276(%663) /* ty=(Tensor[(2, 1, 6), float64],) */;
    %665 = %664.0;
    %666 = cast(meta[relay.Constant][29] /* ty=Tensor[(6, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 2), bool] */;
    %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%665, dtype="bool") /* ty=Tensor[(2, 1, 6), bool] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %670 = @func_2735() /* ty=(Tensor[(98, 4), float64], Tensor[(10, 1, 2), float64]) */;
    %671 = @func_4112() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %672 = %670.1;
    %673 = cast(%672, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
    %674 = reshape(%673, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %675 = @func_4063(%674) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
    %676 = %659.0;
    %677 = log(%661) /* ty=Tensor[(10, 10, 2), float32] */;
    %678 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
    %679 = logical_and(%668, %669) /* ty=Tensor[(2, ?, 6), bool] */;
    %680 = %671.0;
    %681 = %675.5;
    (%676, %677, %678, %679, %672, %680, %681)
  };
  %682() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(2, ?, 6), bool], Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(384), float32]) */
}

def @func_6385(%var_6384: Tensor[(14, 6, 14), float64]) -> Tensor[(14, 6, 14), float64] {
  %684 = fn (%var_6378: Tensor[(14, 6, 14), float64]) -> Tensor[(14, 6, 14), float64] {
    %683 = cast(%var_6378, dtype="float64") /* ty=Tensor[(14, 6, 14), float64] */;
    acos(%683) /* ty=Tensor[(14, 6, 14), float64] */
  };
  %684(%var_6384) /* ty=Tensor[(14, 6, 14), float64] */
}

def @func_603(%var_600: Tensor[(16, 15, 12), int8], %var_601: Tensor[(16, 15, 12), int8], %var_602: Tensor[(20), float64]) -> (Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) {
  %702 = fn (%var_555: Tensor[(16, 15, 12), int8], %var_556: Tensor[(16, 15, 12), int8], %var_583: Tensor[(20), float64]) -> (Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) {
    %685 = cast(%var_556, dtype="int8") /* ty=Tensor[(16, 15, 12), int8] */;
    %686 = shape_of(%var_555, dtype="int32") /* ty=Tensor[(3), int32] */;
    %687 = cast(%var_555, dtype="int8") /* ty=Tensor[(16, 15, 12), int8] */;
    %688 = dyn.reshape(%685, %686, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %689 = right_shift(%687, %688) /* ty=Tensor[(16, 15, 12), int8] */;
    %690 = cast(%689, dtype="float64") /* ty=Tensor[(16, 15, 12), float64] */;
    %691 = cast(%var_556, dtype="float32") /* ty=Tensor[(16, 15, 12), float32] */;
    %692 = cast(%var_583, dtype="float64") /* ty=Tensor[(20), float64] */;
    %693 = reshape(%692, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
    %694 = @func_276(%693) /* ty=(Tensor[(10, 1, 2), float64],) */;
    %695 = %694.0;
    %696 = cast(%695, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
    %697 = reshape(%696, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
    %698 = @func_276(%697) /* ty=(Tensor[(10, 1, 2), float64],) */;
    %699 = erf(%690) /* ty=Tensor[(16, 15, 12), float64] */;
    %700 = sigmoid(%691) /* ty=Tensor[(16, 15, 12), float32] */;
    %701 = %698.0;
    (%699, %700, %695, %var_583, %701)
  };
  %702(%var_600, %var_601, %var_602) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */
}

def @func_5763(%var_5762: Tensor[(16, 1, 11), float32]) -> Tensor[(16, 1, 11), float32] {
  %704 = fn (%var_5757: Tensor[(16, 1, 11), float32]) -> Tensor[(16, 1, 11), float32] {
    %703 = cast(%var_5757, dtype="float32") /* ty=Tensor[(16, 1, 11), float32] */;
    atan(%703) /* ty=Tensor[(16, 1, 11), float32] */
  };
  %704(%var_5762) /* ty=Tensor[(16, 1, 11), float32] */
}

def @func_2870() -> (Tensor[(5, 4), float64], Tensor[(10, 1, 2), float64]) {
  %705 = @func_2590() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64]) */;
  %706 = %705.1;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
  %708 = reshape(%707, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
  %709 = @func_276(%708) /* ty=(Tensor[(10, 1, 2), float64],) */;
  %710 = %709.0;
  (%706, %710)
}

def @func_7447() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(200), float32]) {
  %726 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(200), float32]) {
    %711 = @func_6790() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
    %712 = @func_4484() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) */;
    %713 = %711.2;
    %714 = cast(%713, dtype="float32") /* ty=Tensor[(10, 10, 2), float32] */;
    %715 = cast(meta[relay.Constant][30] /* ty=Tensor[(2880), float32] */, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %716 = %712.1;
    %717 = cast(%716, dtype="float64") /* ty=Tensor[(5, 4), float64] */;
    %718 = reshape(%714, newshape=[10, 10, 2]) /* ty=Tensor[(10, 10, 2), float32] */;
    %719 = reshape(%715, newshape=[2880]) /* ty=Tensor[(2880), float32] */;
    %720 = reshape(%717, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %721 = @func_2463(%718, %719, %720) /* ty=(Tensor[(10, 10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(20), float64]) */;
    %722 = @func_6882() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(200), float32]) */;
    %723 = @func_4300() /* ty=Tensor[(10, 10, 2), float32] */;
    %724 = %721.1;
    %725 = %722.2;
    (%723, %713, %716, %724, meta[relay.Constant][30] /* ty=Tensor[(2880), float32] */, %725)
  };
  %726() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(200), float32]) */
}

def @func_2678() -> (Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) {
  @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */
}

def @func_7873() -> (Tensor[(10, 10, 2), bool],) {
  %727 = @func_5210() /* ty=Tensor[(10, 10, 2), bool] */;
  (%727,)
}

def @func_7512() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) {
  %728 = @func_4300() /* ty=Tensor[(10, 10, 2), float32] */;
  %729 = @func_5210() /* ty=Tensor[(10, 10, 2), bool] */;
  (%728, %729)
}

def @func_2379() -> Tensor[(10, 10, 2), float32] {
  @func_2377() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7196() -> (Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 1, 2), float32]) {
  @func_7194() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(10, 1, 2), float32]) */
}

def @func_8660() -> (Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) {
  @func_8658() /* ty=(Tensor[(5, 4), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_1928(%var_1926: Tensor[(9, 4, 12), float64], %var_1927: Tensor[(2880), int8]) -> (Tensor[(9, 4, 12), float64], Tensor[(20), float64], Tensor[(2880), int8], Tensor[(20), float64]) {
  %740 = fn (%var_1914: Tensor[(9, 4, 12), float64], %var_1919: Tensor[(2880), int8]) -> (Tensor[(9, 4, 12), float64], Tensor[(20), float64], Tensor[(2880), int8], Tensor[(20), float64]) {
    %730 = cast(%var_1914, dtype="float64") /* ty=Tensor[(9, 4, 12), float64] */;
    %731 = cast(%var_1919, dtype="int8") /* ty=Tensor[(2880), int8] */;
    %732 = cast(%var_1919, dtype="int8") /* ty=Tensor[(2880), int8] */;
    %733 = cast(meta[relay.Constant][31] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
    %734 = reshape(%731, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
    %735 = reshape(%732, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
    %736 = reshape(%733, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %737 = @func_599(%734, %735, %736) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
    %738 = sinh(%730) /* ty=Tensor[(9, 4, 12), float64] */;
    %739 = %737.3;
    (%738, %739, %var_1919, meta[relay.Constant][31] /* ty=Tensor[(20), float64] */)
  };
  %740(%var_1926, %var_1927) /* ty=(Tensor[(9, 4, 12), float64], Tensor[(20), float64], Tensor[(2880), int8], Tensor[(20), float64]) */
}

def @func_2016(%var_2015: Tensor[(13, 7, 8), float64]) -> (Tensor[(13, 7, 8), float64], Tensor[(3, 16, 8), float64], Tensor[(12, 32), float32], Tensor[(10, 10, 2), float32]) {
  %747 = fn (%var_1990: Tensor[(13, 7, 8), float64]) -> (Tensor[(13, 7, 8), float64], Tensor[(3, 16, 8), float64], Tensor[(12, 32), float32], Tensor[(10, 10, 2), float32]) {
    %741 = cast(%var_1990, dtype="float64") /* ty=Tensor[(13, 7, 8), float64] */;
    %742 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 32), float32] */, dtype="float32") /* ty=Tensor[(12, 32), float32] */;
    %743 = reshape(%742, newshape=[3, 16, 8]) /* ty=Tensor[(3, 16, 8), float32] */;
    %744 = asin(%741) /* ty=Tensor[(13, 7, 8), float64] */;
    %745 = @func_1699(%743) /* ty=Tensor[(3, 16, 8), float64] */;
    %746 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
    (%744, %745, meta[relay.Constant][32] /* ty=Tensor[(12, 32), float32] */, %746)
  };
  %747(%var_2015) /* ty=(Tensor[(13, 7, 8), float64], Tensor[(3, 16, 8), float64], Tensor[(12, 32), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_279(%var_277: Tensor[(10, 1, 2), float64]) -> (Tensor[(10, 1, 2), float64],) {
  @func_276(%var_277) /* ty=(Tensor[(10, 1, 2), float64],) */
}

def @func_5251() -> Tensor[(6, 12, 7), int32] {
  %748 = @func_4624() /* ty=(Tensor[(6, 12, 7), int32],) */;
  %748.0
}

def @func_8230() -> Tensor[(5, 4), float64] {
  %749 = @func_4232() /* ty=(Tensor[(5, 4), float64],) */;
  %749.0
}

def @func_6135() -> Tensor[(10, 10, 2), float32] {
  @func_4165() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7150() -> (Tensor[(10, 10, 2), float32],) {
  %750 = @func_5093() /* ty=Tensor[(10, 10, 2), float32] */;
  (%750,)
}

def @func_7556(%var_7549: Tensor[(225, 6), float32]) -> Tensor[(225, 6), int32] {
  %751 = @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */;
  %752 = %751.4;
  %753 = cast(%752, dtype="int32") /* ty=Tensor[(225, 1), int32] */;
  %754 = cast(%var_7549, dtype="int32") /* ty=Tensor[(225, 6), int32] */;
  logical_xor(%753, %754) /* ty=Tensor[(225, 6), int32] */
}

def @func_4188(%var_4177: Tensor[(10, 14, 2), float64]) -> (Tensor[(10, 14, 2), bool],) {
  %755 = @func_2676() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) */;
  %756 = %755.0;
  %757 = cast(%756, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %758 = cast(%var_4177, dtype="bool") /* ty=Tensor[(10, 14, 2), bool] */;
  %759 = not_equal(%757, %758) /* ty=Tensor[(10, 14, 2), bool] */;
  (%759,)
}

def @func_5612(%var_5611: Tensor[(6, 12, 7), int32]) -> (Tensor[(6, 12, 7), bool], Tensor[(225, 1), float32], Tensor[(10, 1, 2), float64]) {
  %772 = fn (%var_5597: Tensor[(6, 12, 7), int32]) -> (Tensor[(6, 12, 7), bool], Tensor[(225, 1), float32], Tensor[(10, 1, 2), float64]) {
    %760 = @func_4798() /* ty=(Tensor[(10, 10, 2), uint32], Tensor[(10, 10, 2), float32], Tensor[(6, 12, 7), int32]) */;
    %761 = %760.2;
    %762 = cast(%var_5597, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
    %763 = shape_of(%761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %764 = cast(%761, dtype="bool") /* ty=Tensor[(6, 12, 7), bool] */;
    %765 = dyn.reshape(%762, %763, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %766 = @func_2402() /* ty=(Tensor[(10, 1, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool], Tensor[(5, 15, 3), float32], Tensor[(225, 1), float32]) */;
    %767 = %766.4;
    %768 = cast(%767, dtype="float32") /* ty=Tensor[(225, 1), float32] */;
    %769 = logical_or(%764, %765) /* ty=Tensor[(6, 12, 7), bool] */;
    %770 = atanh(%768) /* ty=Tensor[(225, 1), float32] */;
    %771 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
    (%769, %770, %771)
  };
  %772(%var_5611) /* ty=(Tensor[(6, 12, 7), bool], Tensor[(225, 1), float32], Tensor[(10, 1, 2), float64]) */
}

def @func_6429(%var_6426: Tensor[(3, 8, 14), uint64], %var_6427: Tensor[(3, 8, 14), uint64], %var_6428: Tensor[(20), float64]) -> (Tensor[(3, 8, 14), bool], Tensor[(2880), float32], Tensor[(20), float64]) {
  %782 = fn (%var_6393: Tensor[(3, 8, 14), uint64], %var_6394: Tensor[(3, 8, 14), uint64], %var_6415: Tensor[(20), float64]) -> (Tensor[(3, 8, 14), bool], Tensor[(2880), float32], Tensor[(20), float64]) {
    %773 = cast(%var_6394, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
    %774 = shape_of(%var_6393, dtype="int32") /* ty=Tensor[(3), int32] */;
    %775 = cast(%var_6393, dtype="bool") /* ty=Tensor[(3, 8, 14), bool] */;
    %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %777 = cast(%var_6415, dtype="float64") /* ty=Tensor[(20), float64] */;
    %778 = reshape(%777, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %779 = @func_4063(%778) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
    %780 = equal(%775, %776) /* ty=Tensor[(3, 8, 14), bool] */;
    %781 = %779.1;
    (%780, %781, %var_6415)
  };
  %782(%var_6426, %var_6427, %var_6428) /* ty=(Tensor[(3, 8, 14), bool], Tensor[(2880), float32], Tensor[(20), float64]) */
}

def @func_7640() -> Tensor[(6, 12, 7), float64] {
  @func_7638() /* ty=Tensor[(6, 12, 7), float64] */
}

def @func_8202(%var_8200: Tensor[(13, 10, 2), float32], %var_8201: Tensor[(2880), float32]) -> (Tensor[(13, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(2880), uint16], Tensor[(10, 10, 2), float32]) {
  %799 = fn (%var_8140: Tensor[(13, 10, 2), float32], %var_8153: Tensor[(2880), float32]) -> (Tensor[(13, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(2880), uint16], Tensor[(10, 10, 2), float32]) {
    %783 = cast(%var_8140, dtype="float32") /* ty=Tensor[(13, 10, 2), float32] */;
    %784 = cast(%var_8153, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %785 = reshape(%784, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), float32] */;
    %786 = @func_2294(%785) /* ty=(Tensor[(10, 1, 2), float64], Tensor[(2, 1440), int8], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(16, 15, 12), int64]) */;
    %787 = cast(%var_8153, dtype="float64") /* ty=Tensor[(2880), float64] */;
    %788 = atanh(%787) /* ty=Tensor[(2880), float64] */;
    %789 = cast(%788, dtype="float32") /* ty=Tensor[(2880), float32] */;
    %790 = erf(%789) /* ty=Tensor[(2880), float32] */;
    %791 = cast(%788, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
    %792 = shape_of(%790, dtype="int32") /* ty=Tensor[(1), int32] */;
    %793 = cast(%790, dtype="uint16") /* ty=Tensor[(2880), uint16] */;
    %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %795 = erf(%783) /* ty=Tensor[(13, 10, 2), float32] */;
    %796 = %786.0;
    %797 = bitwise_or(%793, %794) /* ty=Tensor[(2880), uint16] */;
    %798 = @func_3101() /* ty=Tensor[(10, 10, 2), float32] */;
    (%795, %796, %797, %798)
  };
  %799(%var_8200, %var_8201) /* ty=(Tensor[(13, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(2880), uint16], Tensor[(10, 10, 2), float32]) */
}

def @func_2676() -> (Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64], Tensor[(2880), int8]) {
  %800 = cast(meta[relay.Constant][33] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %801 = cast(meta[relay.Constant][33] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %802 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
  %803 = cast(%802, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %804 = reshape(%800, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %805 = reshape(%801, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %806 = reshape(%803, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %807 = @func_599(%804, %805, %806) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %808 = %807.2;
  (%802, %808, meta[relay.Constant][33] /* ty=Tensor[(2880), int8] */)
}

def @func_2564() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %809 = @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %810 = %809.0;
  %811 = @func_2072() /* ty=Tensor[(10, 10, 2), float32] */;
  (%810, %811)
}

def @func_4724() -> Tensor[(10, 10, 2), float32] {
  %812 = fn () -> Tensor[(10, 10, 2), float32] {
    @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
  };
  %812() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_5981() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(720), float64]) {
  %813 = cast(meta[relay.Constant][34] /* ty=Tensor[(720), float64] */, dtype="float64") /* ty=Tensor[(720), float64] */;
  %814 = reshape(%813, newshape=[720]) /* ty=Tensor[(720), float64] */;
  %815 = @func_1582(%814) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(720), float64], Tensor[(10, 1, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */;
  %816 = @func_1640() /* ty=Tensor[(10, 10, 2), float32] */;
  %817 = %815.4;
  (%816, %817, meta[relay.Constant][34] /* ty=Tensor[(720), float64] */)
}

def @func_5093() -> Tensor[(10, 10, 2), float32] {
  @func_1439() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7514() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) {
  @func_7512() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), bool]) */
}

def @func_7681(%var_7676: Tensor[(10, 7, 2), float64]) -> (Tensor[(10, 1, 2), float32], Tensor[(10, 7, 2), bool]) {
  %818 = @func_5086() /* ty=(Tensor[(10, 1, 2), float64],) */;
  %819 = %818.0;
  %820 = cast(%819, dtype="float32") /* ty=Tensor[(10, 1, 2), float32] */;
  %821 = cast(%819, dtype="bool") /* ty=Tensor[(10, 1, 2), bool] */;
  %822 = cast(%var_7676, dtype="bool") /* ty=Tensor[(10, 7, 2), bool] */;
  %823 = cosh(%820) /* ty=Tensor[(10, 1, 2), float32] */;
  %824 = equal(%821, %822) /* ty=Tensor[(10, 7, 2), bool] */;
  (%823, %824)
}

def @func_2090() -> Tensor[(10, 10, 2), float32] {
  @func_2072() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_7748(%var_7747: Tensor[(9, 13, 11), int64]) -> Tensor[(9, 13, 11), int64] {
  %827 = fn (%var_7739: Tensor[(9, 13, 11), int64]) -> Tensor[(9, 13, 11), int64] {
    %825 = cast(4 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %826 = cast(%var_7739, dtype="int64") /* ty=Tensor[(9, 13, 11), int64] */;
    multiply(%825, %826) /* ty=Tensor[(9, 13, 11), int64] */
  };
  %827(%var_7747) /* ty=Tensor[(9, 13, 11), int64] */
}

def @func_8208() -> (Tensor[(10, 10, 2), float32],) {
  %828 = @func_3547() /* ty=Tensor[(10, 10, 2), float32] */;
  (%828,)
}

def @func_8232() -> Tensor[(5, 4), float64] {
  @func_8230() /* ty=Tensor[(5, 4), float64] */
}

def @func_3547() -> Tensor[(10, 10, 2), float32] {
  @func_3400() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_6838() -> (Tensor[(10, 10, 2), float32],) {
  %829 = @func_2090() /* ty=Tensor[(10, 10, 2), float32] */;
  (%829,)
}

def @func_276(%var_271: Tensor[(10, 1, 2), float64]) -> (Tensor[(10, 1, 2), float64],) {
  %830 = cast(%var_271, dtype="float64") /* ty=Tensor[(10, 1, 2), float64] */;
  %831 = atan(%830) /* ty=Tensor[(10, 1, 2), float64] */;
  (%831,)
}

def @func_7466() -> (Tensor[(10, 10, 2), float32],) {
  %833 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %832 = @func_3101() /* ty=Tensor[(10, 10, 2), float32] */;
    (%832,)
  };
  %833() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_1615() -> (Tensor[(10, 10, 2), float32],) {
  @func_1613() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_7801(%var_7799: Tensor[(4, 3, 6), float64], %var_7800: Tensor[(720), float64]) -> (Tensor[(4, 3, 6), int32], Tensor[(10, 10, 2), float32], Tensor[(2880), int8], Tensor[(720), float64], Tensor[(10, 10, 2), float32]) {
  @func_7797(%var_7799, %var_7800) /* ty=(Tensor[(4, 3, 6), int32], Tensor[(10, 10, 2), float32], Tensor[(2880), int8], Tensor[(720), float64], Tensor[(10, 10, 2), float32]) */
}

def @func_6583(%var_6579: Tensor[(392), int8], %var_6580: Tensor[(336), uint64], %var_6581: Tensor[(12), float32], %var_6582: Tensor[(192, 2), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(2880), float32], Tensor[(336), uint64], Tensor[(20), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32], Tensor[(10, 10, 2), float32], Tensor[(3, 16, 8), float64], Tensor[(192, 2), float32]) {
  @func_6577(%var_6579, %var_6580, %var_6581, %var_6582) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(7, 8, 7), int8], Tensor[(392), int8], Tensor[(2880), float32], Tensor[(336), uint64], Tensor[(20), float64], Tensor[(2, 1, 6), float64], Tensor[(12), float32], Tensor[(10, 10, 2), float32], Tensor[(3, 16, 8), float64], Tensor[(192, 2), float32]) */
}

def @func_8614(%var_8602: Tensor[(8, 13, 2), float64]) -> (Tensor[(8, 13, 2), float64],) {
  %834 = cast(%var_8602, dtype="float64") /* ty=Tensor[(8, 13, 2), float64] */;
  %835 = sigmoid(%834) /* ty=Tensor[(8, 13, 2), float64] */;
  (%835,)
}

def @func_1532(%var_1530: Tensor[(5, 15, 3), float32]) -> (Tensor[(5, 15, 3), float32],) {
  @func_1529(%var_1530) /* ty=(Tensor[(5, 15, 3), float32],) */
}

def @func_1641() -> Tensor[(10, 10, 2), float32] {
  %836 = fn () -> Tensor[(10, 10, 2), float32] {
    @func_1606() /* ty=Tensor[(10, 10, 2), float32] */
  };
  %836() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_1366(%var_1338: Tensor[(3, 15, 16), float64]) -> (Tensor[(7, 8, 7), int8], Tensor[(98, 4), int8], Tensor[(10, 1, 2), float64], Tensor[(2880), int8], Tensor[(20), float64], Tensor[(3, 15, 16), float32]) {
  %837 = cast(meta[relay.Constant][35] /* ty=Tensor[(98, 4), int8] */, dtype="int8") /* ty=Tensor[(98, 4), int8] */;
  %838 = reshape(%837, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), int8] */;
  %839 = cast(meta[relay.Constant][36] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %840 = cast(meta[relay.Constant][36] /* ty=Tensor[(2880), int8] */, dtype="int8") /* ty=Tensor[(2880), int8] */;
  %841 = cast(meta[relay.Constant][37] /* ty=Tensor[(20), float64] */, dtype="float64") /* ty=Tensor[(20), float64] */;
  %842 = reshape(%839, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %843 = reshape(%840, newshape=[16, 15, 12]) /* ty=Tensor[(16, 15, 12), int8] */;
  %844 = reshape(%841, newshape=[20]) /* ty=Tensor[(20), float64] */;
  %845 = @func_599(%842, %843, %844) /* ty=(Tensor[(16, 15, 12), float64], Tensor[(16, 15, 12), float32], Tensor[(10, 1, 2), float64], Tensor[(20), float64], Tensor[(10, 1, 2), float64]) */;
  %846 = cast(%var_1338, dtype="float64") /* ty=Tensor[(3, 15, 16), float64] */;
  %847 = asinh(%846) /* ty=Tensor[(3, 15, 16), float64] */;
  %848 = cast(%847, dtype="float32") /* ty=Tensor[(3, 15, 16), float32] */;
  %849 = @func_474(%838) /* ty=Tensor[(7, 8, 7), int8] */;
  %850 = %845.2;
  %851 = sqrt(%848) /* ty=Tensor[(3, 15, 16), float32] */;
  (%849, meta[relay.Constant][35] /* ty=Tensor[(98, 4), int8] */, %850, meta[relay.Constant][36] /* ty=Tensor[(2880), int8] */, meta[relay.Constant][37] /* ty=Tensor[(20), float64] */, %851)
}

def @func_5277() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %855 = fn () -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
    %852 = @func_3379() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %853 = %852.0;
    %854 = @func_3101() /* ty=Tensor[(10, 10, 2), float32] */;
    (%853, %854)
  };
  %855() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_3549() -> Tensor[(10, 10, 2), float32] {
  @func_3547() /* ty=Tensor[(10, 10, 2), float32] */
}

def @func_4825() -> (Tensor[(10, 1, 2), float64],) {
  %858 = fn () -> (Tensor[(10, 1, 2), float64],) {
    %856 = @func_4523() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64]) */;
    %857 = %856.1;
    (%857,)
  };
  %858() /* ty=(Tensor[(10, 1, 2), float64],) */
}

def @func_4624() -> (Tensor[(6, 12, 7), int32],) {
  %859 = cast(meta[relay.Constant][39] /* ty=Tensor[(6, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
  %860 = shape_of(meta[relay.Constant][38] /* ty=Tensor[(6, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %861 = cast(meta[relay.Constant][38] /* ty=Tensor[(6, 12, 7), int32] */, dtype="int32") /* ty=Tensor[(6, 12, 7), int32] */;
  %862 = dyn.reshape(%859, %860, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %863 = right_shift(%861, %862) /* ty=Tensor[(6, 12, 7), int32] */;
  (%863,)
}

def @func_6100() -> (Tensor[(7, 9, 8), float64], Tensor[(384), float32], Tensor[(10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) {
  %881 = fn () -> (Tensor[(7, 9, 8), float64], Tensor[(384), float32], Tensor[(10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) {
    %864 = cast(meta[relay.Constant][41] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
    %865 = shape_of(meta[relay.Constant][40] /* ty=Tensor[(7, 9, 8), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %866 = cast(meta[relay.Constant][40] /* ty=Tensor[(7, 9, 8), float64] */, dtype="float64") /* ty=Tensor[(7, 9, 8), float64] */;
    %867 = dyn.reshape(%864, %865, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %868 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
    %869 = reshape(%868, newshape=[20]) /* ty=Tensor[(20), float64] */;
    %870 = @func_4063(%869) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(2880), float32], Tensor[(20), float64], Tensor[(2880), float32], Tensor[(3, 16, 8), float64], Tensor[(384), float32]) */;
    %871 = @func_4112() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %872 = cast(meta[relay.Constant][42] /* ty=Tensor[(10, 2), float64] */, dtype="float64") /* ty=Tensor[(10, 2), float64] */;
    %873 = reshape(%872, newshape=[10, 1, 2]) /* ty=Tensor[(10, 1, 2), float64] */;
    %874 = @func_276(%873) /* ty=(Tensor[(10, 1, 2), float64],) */;
    %875 = mod(%866, %867) /* ty=Tensor[(7, 9, 8), float64] */;
    %876 = %870.5;
    %877 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
    %878 = %871.0;
    %879 = @func_2238() /* ty=Tensor[(10, 1, 2), float64] */;
    %880 = %874.0;
    (%875, %876, meta[relay.Constant][42] /* ty=Tensor[(10, 2), float64] */, %877, %878, %879, %880)
  };
  %881() /* ty=(Tensor[(7, 9, 8), float64], Tensor[(384), float32], Tensor[(10, 2), float64], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 1, 2), float64], Tensor[(10, 1, 2), float64]) */
}

def @func_4353() -> (Tensor[(10, 10, 2), float32],) {
  %883 = fn () -> (Tensor[(10, 10, 2), float32],) {
    %882 = @func_2377() /* ty=Tensor[(10, 10, 2), float32] */;
    (%882,)
  };
  %883() /* ty=(Tensor[(10, 10, 2), float32],) */
}

def @func_6792() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  @func_6790() /* ty=(Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) */
}

def @func_5253() -> Tensor[(6, 12, 7), int32] {
  @func_5251() /* ty=Tensor[(6, 12, 7), int32] */
}

def @func_4387() -> (Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32], Tensor[(10, 10, 2), float32]) {
  %884 = @func_3603() /* ty=(Tensor[(10, 10, 2), float32],) */;
  %885 = @func_3342() /* ty=Tensor[(10, 10, 2), float32] */;
  %886 = @func_4165() /* ty=Tensor[(10, 10, 2), float32] */;
  %887 = @func_2178() /* ty=Tensor[(10, 10, 2), float32] */;
  %888 = %884.0;
  (%885, %886, %887, %888)
}

def @func_7650(%var_7648: uint64, %var_7649: Tensor[(7, 15, 10), uint64]) -> Tensor[(7, 15, 10), uint64] {
  %891 = fn (%var_7641: uint64, %var_7642: Tensor[(7, 15, 10), uint64]) -> Tensor[(7, 15, 10), uint64] {
    %889 = cast(%var_7641, dtype="uint64") /* ty=uint64 */;
    %890 = cast(%var_7642, dtype="uint64") /* ty=Tensor[(7, 15, 10), uint64] */;
    logical_xor(%889, %890) /* ty=Tensor[(7, 15, 10), uint64] */
  };
  %891(%var_7648, %var_7649) /* ty=Tensor[(7, 15, 10), uint64] */
}

def @func_8485(%var_8483: Tensor[(20), float32]) -> (Tensor[(10, 10, 2), float32], Tensor[(20), bool]) {
  @func_8482(%var_8483) /* ty=(Tensor[(10, 10, 2), float32], Tensor[(20), bool]) */
}

def @func_6237(%var_6236: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), float64], Tensor[(10, 10, 2), float32]) {
  %896 = fn (%var_6217: Tensor[(3, 16, 14), float64]) -> (Tensor[(3, 16, 14), float64], Tensor[(10, 10, 2), float32]) {
    %892 = cast(%var_6217, dtype="float64") /* ty=Tensor[(3, 16, 14), float64] */;
    %893 = @func_1716() /* ty=(Tensor[(10, 10, 2), float32],) */;
    %894 = acos(%892) /* ty=Tensor[(3, 16, 14), float64] */;
    %895 = %893.0;
    (%894, %895)
  };
  %896(%var_6236) /* ty=(Tensor[(3, 16, 14), float64], Tensor[(10, 10, 2), float32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen111/build/output.py", line 3045, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:50:30] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

