==========mod==========
#[version = "0.0.5"]
def @func_3721() -> (Tensor[(16, 2, 14), float64],) {
  %0 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_2585(%var_2583: Tensor[(4, 112), float32]) -> (Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) {
  %2 = @func_1982() /* ty=(Tensor[(130), float32],) */;
  %3 = cast(%var_2583, dtype="float32") /* ty=Tensor[(4, 112), float32] */;
  %4 = reshape(%3, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %5 = @func_1702(%4) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %6 = %2.0;
  %7 = %5.2;
  (%6, %7, %var_2583)
}

def @func_12703() -> (Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) {
  %8 = @func_10394() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 130), float32] */, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
  %10 = reshape(%9, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %11 = %8.0;
  %12 = @func_10962(%10) /* ty=Tensor[(130), bool] */;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(1, 130), float32] */)
}

def @func_1265() -> (Tensor[(16, 2, 14), float64],) {
  %13 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  (%13,)
}

def @func_12988() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float32], Tensor[(1, 6, 6), float64], Tensor[(900), float32], Tensor[(105), bool]) {
  %14 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %15 = @func_12737() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %16 = @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %17 = @func_7872() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %18 = @func_8265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %19 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
  %20 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(105), bool] */, dtype="bool") /* ty=Tensor[(105), bool] */;
  %22 = reshape(%21, newshape=[1, 105]) /* ty=Tensor[(1, 105), bool] */;
  %23 = @func_11646(%22) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
  %24 = %14.1;
  %25 = %15.0;
  %26 = %16.0;
  %27 = %17.0;
  %28 = %18.0;
  %29 = @func_11852() /* ty=Tensor[(16, 2, 14), float64] */;
  %30 = %19.1;
  %31 = %20.1;
  %32 = @func_11826() /* ty=Tensor[(1, 6, 6), float64] */;
  %33 = %23.4;
  (%24, %25, %26, %27, %28, %29, %30, %31, %32, %33, meta[relay.Constant][1] /* ty=Tensor[(105), bool] */)
}

def @func_10719() -> Tensor[(1, 10, 13), float64] {
  @func_1565() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_8805() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) {
  %34 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %35 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %36 = %34.0;
  %37 = %35.0;
  (%36, %37)
}

def @func_18483() -> (Tensor[(130), float32],) {
  %38 = @func_7467() /* ty=Tensor[(130), float32] */;
  (%38,)
}

def @func_16887() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  %39 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %40 = @func_7243() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %41 = %39.2;
  %42 = %40.0;
  (%41, %42)
}

def @func_13422() -> Tensor[(?, 10, 13), float32] {
  %43 = @func_5778() /* ty=(Tensor[(?, 10, 13), float32],) */;
  %43.0
}

def @func_13967() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) {
  %44 = @func_7612() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %45 = %44.0;
  %46 = @func_10913() /* ty=Tensor[(?, 10, 13), uint32] */;
  (%45, %46)
}

def @func_14149() -> Tensor[(?, 10, 13), uint32] {
  @func_10913() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_8709() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %47 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %48 = @func_6523() /* ty=Tensor[(16, 2, 14), float64] */;
  %49 = %47.1;
  (%48, %49)
}

def @func_17847() -> (Tensor[(16, 2, 14), float64], Tensor[(6, 14, ?), bool], Tensor[(7, 6, 13), float64]) {
  %50 = @func_13639() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) */;
  %51 = @func_17663() /* ty=(Tensor[(6, 14, ?), bool],) */;
  %52 = %50.1;
  %53 = %51.0;
  %54 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
  (%52, %53, %54)
}

def @func_18050(%var_18038: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), uint64], Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  %55 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %56 = %55.0;
  %57 = cast(%56, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %58 = reshape(%57, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %59 = cast(%var_18038, dtype="float32") /* ty=Tensor[(900), float32] */;
  %60 = reshape(%59, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %61 = @func_9221(%60) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %62 = @func_13967() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */;
  %63 = @func_1900() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) */;
  %64 = @func_14876(%58) /* ty=Tensor[(16, 2, 14), uint64] */;
  %65 = %61.4;
  %66 = %62.0;
  %67 = %63.2;
  (%56, %64, %65, %var_18038, %66, %67)
}

def @func_5306() -> Tensor[(16, 2, 14), float64] {
  %68 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %68.0
}

def @func_934(%var_895: Tensor[(3, 9, 16), float32], %var_899: Tensor[(130), float32]) -> (Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) {
  %69 = cast(%var_895, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %70 = cast(%var_899, dtype="float32") /* ty=Tensor[(130), float32] */;
  %71 = reshape(%70, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %72 = @func_233(%71) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %73 = cast(%var_899, dtype="float32") /* ty=Tensor[(130), float32] */;
  %74 = reshape(%73, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %75 = @func_233(%74) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %76 = %72.0;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %78 = reshape(%77, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %79 = @func_233(%78) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %80 = exp(%69) /* ty=Tensor[(3, 9, 16), float32] */;
  %81 = %75.0;
  %82 = %79.0;
  (%80, %76, %var_899, %81, %82)
}

def @func_14679() -> (Tensor[(900), float32],) {
  %83 = @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */;
  %84 = %83.3;
  (%84,)
}

def @func_4893(%var_4884: Tensor[(13, 8, 9), bool], %var_4885: Tensor[(13, 8, 9), bool]) -> (Tensor[(13, 8, 9), bool],) {
  %85 = cast(%var_4885, dtype="bool") /* ty=Tensor[(13, 8, 9), bool] */;
  %86 = shape_of(%var_4884, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_4884, dtype="bool") /* ty=Tensor[(13, 8, 9), bool] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %89 = logical_and(%87, %88) /* ty=Tensor[(13, 8, 9), bool] */;
  (%89,)
}

def @func_13011() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  %90 = @func_7028() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %91 = @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %92 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %93 = %90.1;
  %94 = %91.2;
  %95 = %92.0;
  (%93, %94, %95)
}

def @func_13282(%var_13274: uint32) -> Tensor[(16, 7, 2), float64] {
  %96 = cast(%var_13274, dtype="uint32") /* ty=uint32 */;
  %97 = cast(meta[relay.Constant][2] /* ty=Tensor[(16, 7, 2), uint32] */, dtype="uint32") /* ty=Tensor[(16, 7, 2), uint32] */;
  %98 = minimum(%96, %97) /* ty=Tensor[(16, 7, 2), uint32] */;
  %99 = cast(%98, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
  cos(%99) /* ty=Tensor[(16, 7, 2), float64] */
}

def @func_12837() -> Tensor[(16, 2, 14), float64] {
  %100 = @func_10863() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) */;
  %100.0
}

def @func_15213() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  %101 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %102 = @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %103 = %101.1;
  %104 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  %105 = %102.1;
  (%103, %104, %105)
}

def @func_17246(%var_17200: Tensor[(7, 8, 8), float32], %var_17227: Tensor[(7, 8, 8), float32], %var_17240: Tensor[(7, 8, 8), float32]) -> (Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(7, 8, 8), uint64]) {
  %106 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %107 = cast(%var_17200, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %108 = atan(%107) /* ty=Tensor[(7, 8, 8), float32] */;
  %109 = cast(%var_17227, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %110 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %111 = cast(%108, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %112 = dyn.reshape(%109, %110, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %113 = cast(%var_17240, dtype="uint64") /* ty=Tensor[(7, 8, 8), uint64] */;
  %114 = shape_of(%108, dtype="int32") /* ty=Tensor[(3), int32] */;
  %115 = cast(%108, dtype="uint64") /* ty=Tensor[(7, 8, 8), uint64] */;
  %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %117 = @func_8205() /* ty=Tensor[(1, 10, 13), float64] */;
  %118 = %106.0;
  %119 = floor_mod(%111, %112) /* ty=Tensor[(7, 8, 8), float64] */;
  %120 = bitwise_or(%115, %116) /* ty=Tensor[(7, 8, 8), uint64] */;
  (%117, %118, %119, %120)
}

def @func_4272() -> Tensor[(1, 10, 13), float64] {
  %121 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %121.0
}

def @func_5047() -> (Tensor[(16, 2, 14), float64],) {
  %122 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  (%122,)
}

def @func_4225(%var_4162: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(4, 112), float32], Tensor[(13, 15, 2), float32]) {
  %123 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %124 = cast(%var_4162, dtype="float64") /* ty=Tensor[(390), float64] */;
  %125 = %123.1;
  %126 = cast(%125, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %127 = reshape(%126, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %128 = @func_2585(%127) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %129 = cast(%var_4162, dtype="float64") /* ty=Tensor[(390), float64] */;
  %130 = reshape(%129, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %131 = @func_3610(%130) /* ty=Tensor[(13, 15, 2), float64] */;
  %132 = cast(%var_4162, dtype="int8") /* ty=Tensor[(390), int8] */;
  %133 = shape_of(%131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %134 = cast(%131, dtype="int8") /* ty=Tensor[(13, 15, 2), int8] */;
  %135 = dyn.reshape(%132, %133, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %136 = logical_xor(%134, %135) /* ty=Tensor[(13, 15, 2), int8] */;
  %137 = cast(%136, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %138 = log2(%124) /* ty=Tensor[(390), float64] */;
  %139 = %128.2;
  %140 = log2(%137) /* ty=Tensor[(13, 15, 2), float32] */;
  (%125, %138, %139, %140)
}

def @func_5650() -> Tensor[(16, 2, 14), float64] {
  %141 = @func_4038() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %141.0
}

def @func_14337(%var_14307: Tensor[(1680), float64]) -> (Tensor[(1680), float64], Tensor[(448), float64], Tensor[(?, 10, 13), int32], Tensor[(16, 2, 14), float64]) {
  %142 = @func_12166() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %143 = %142.0;
  %144 = cast(%var_14307, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %145 = cast(meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %146 = reshape(%144, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float64] */;
  %147 = reshape(%145, newshape=[1, 448]) /* ty=Tensor[(1, 448), float64] */;
  %148 = @func_11509(%146, %147) /* ty=(Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) */;
  %149 = %148.1;
  %150 = cast(%149, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %151 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %152 = cast(%143, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %154 = @func_3721() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %155 = left_shift(%152, %153) /* ty=Tensor[(?, 10, 13), int32] */;
  %156 = %154.0;
  (%var_14307, meta[relay.Constant][3] /* ty=Tensor[(448), float64] */, %155, %156)
}

def @func_2918(%var_2906: Tensor[(16, 10, 13), float32]) -> Tensor[(16, 10, 13), bool] {
  %157 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %158 = %157.0;
  %159 = cast(%158, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %160 = cast(%var_2906, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  greater_equal(%159, %160) /* ty=Tensor[(16, 10, 13), bool] */
}

def @func_11599(%var_11563: Tensor[(1300), uint32]) -> (Tensor[(16, 2, 14), float32], Tensor[(10, 10, 13), int32], Tensor[(1300), uint32], Tensor[(1, 10, 13), float64]) {
  %161 = @func_5518() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %162 = cast(%var_11563, dtype="uint32") /* ty=Tensor[(1300), uint32] */;
  %163 = reshape(%162, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), uint32] */;
  %164 = @func_6272(%163) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(10, 10, 13), int32], Tensor[(16, 2, 14), float64]) */;
  %165 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %166 = %161.0;
  %167 = %164.2;
  %168 = %165.0;
  (%166, %167, %var_11563, %168)
}

def @func_14561() -> (Tensor[(16, 2, 14), float32],) {
  %169 = @func_9818() /* ty=Tensor[(16, 2, 14), float32] */;
  (%169,)
}

def @func_2495() -> (Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) {
  %170 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %171 = %170.0;
  %172 = cast(meta[relay.Constant][4] /* ty=Tensor[(1, 10, 13), uint32] */, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %173 = shape_of(%171, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%171, dtype="int32") /* ty=Tensor[(?, 10, 13), int32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %176 = bitwise_and(%174, %175) /* ty=Tensor[(?, 10, 13), int32] */;
  %177 = cast(%176, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %178 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %179 = cast(meta[relay.Constant][5] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %180 = acosh(%177) /* ty=Tensor[(?, 10, 13), float32] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %182 = reshape(%179, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %183 = reshape(%181, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %184 = @func_934(%182, %183) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %185 = %178.0;
  %186 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  %187 = %184.0;
  (%180, %185, %186, %187, meta[relay.Constant][5] /* ty=Tensor[(432), float32] */)
}

def @func_11852() -> Tensor[(16, 2, 14), float64] {
  @func_7527() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_13974() -> (Tensor[(1, 10, 13), float32],) {
  %188 = @func_13476() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %189 = %188.0;
  (%189,)
}

def @func_1565() -> Tensor[(1, 10, 13), float64] {
  %190 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %190.0
}

def @func_11085() -> (Tensor[(16, 2, 14), float32],) {
  %191 = @func_10191() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %192 = %191.0;
  (%192,)
}

def @func_16716(%var_16714: uint32) -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 7, 2), float64], uint32) {
  %193 = @func_14070() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %194 = @func_13967() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */;
  %195 = @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %196 = cast(%var_16714, dtype="uint32") /* ty=uint32 */;
  %197 = reshape(%196, newshape=[]) /* ty=uint32 */;
  %198 = %193.0;
  %199 = %194.1;
  %200 = %195.0;
  %201 = @func_13282(%197) /* ty=Tensor[(16, 7, 2), float64] */;
  (%198, %199, %200, %201, %var_16714)
}

def @func_7367() -> Tensor[(16, 2, 14), float64] {
  %202 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %202.0
}

def @func_11667() -> Tensor[(1, 10, 13), float32] {
  %203 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %203.0
}

def @func_6211() -> (Tensor[(1, 10, 13), float64],) {
  %204 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  (%204,)
}

def @func_6341(%var_6330: Tensor[(3, 7, 5), bool]) -> Tensor[(3, 7, 5), bool] {
  %205 = cast(meta[relay.Constant][6] /* ty=Tensor[(3, 7, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %206 = shape_of(%var_6330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%var_6330, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%207, %208) /* ty=Tensor[(3, 7, 5), bool] */
}

def @func_10203() -> (Tensor[(16, 2, 14), float32],) {
  %209 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  (%209,)
}

def @func_4098() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %210 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %211 = @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %212 = %210.0;
  %213 = %211.1;
  (%212, %213)
}

def @func_14963() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %214 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  %215 = @func_10301() /* ty=Tensor[(?, 10, 13), float64] */;
  %216 = @func_13915() /* ty=Tensor[(1, 10, 13), float64] */;
  (%214, %215, %216)
}

def @func_13122(%var_13119: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), bool], Tensor[(130), float32], Tensor[(130), float32], Tensor[(14, 13, 10), uint32], Tensor[(1820), uint32], Tensor[(390), float64]) {
  %217 = @func_8382() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) */;
  %218 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %219 = @func_11688() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %220 = cast(meta[relay.Constant][7] /* ty=Tensor[(1820), uint32] */, dtype="uint32") /* ty=Tensor[(1820), uint32] */;
  %221 = cast(meta[relay.Constant][7] /* ty=Tensor[(1820), uint32] */, dtype="uint32") /* ty=Tensor[(1820), uint32] */;
  %222 = cast(%var_13119, dtype="float64") /* ty=Tensor[(390), float64] */;
  %223 = reshape(%220, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), uint32] */;
  %224 = reshape(%221, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), uint32] */;
  %225 = reshape(%222, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %226 = @func_5703(%223, %224, %225) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(14, 13, 10), uint32], Tensor[(14, 13, 10), int8]) */;
  %227 = %217.1;
  %228 = %218.0;
  %229 = %219.1;
  %230 = %226.2;
  (%227, %228, %229, %230, meta[relay.Constant][7] /* ty=Tensor[(1820), uint32] */, %var_13119)
}

def @func_10301() -> Tensor[(?, 10, 13), float64] {
  %231 = @func_8771() /* ty=Tensor[(?, 10, 13), uint32] */;
  %232 = cast(%231, dtype="float64") /* ty=Tensor[(?, 10, 13), float64] */;
  asin(%232) /* ty=Tensor[(?, 10, 13), float64] */
}

def @func_10688() -> (Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %233 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %234 = @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */;
  %235 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  %236 = %233.0;
  (%234, %235, %236)
}

def @func_14200() -> (Tensor[(16, 2, 14), float64],) {
  %237 = @func_6947() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */;
  %238 = %237.0;
  (%238,)
}

def @func_12527(%var_12505: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) {
  %239 = @func_10203() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %240 = cast(%var_12505, dtype="float32") /* ty=Tensor[(900), float32] */;
  %241 = reshape(%240, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %242 = @func_9221(%241) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %243 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %244 = %239.0;
  %245 = %242.1;
  %246 = %243.1;
  (%244, %245, %var_12505, %246)
}

def @main() -> (Tensor[(6, 14, ?), bool], Tensor[(4, 112), int16]) {
  %247 = @func_17663() /* ty=(Tensor[(6, 14, ?), bool],) */;
  %248 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %249 = %248.1;
  %250 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 112), float64] */, dtype="int16") /* ty=Tensor[(4, 112), int16] */;
  %251 = shape_of(%249, dtype="int32") /* ty=Tensor[(2), int32] */;
  %252 = cast(%249, dtype="int16") /* ty=Tensor[(4, 112), int16] */;
  %253 = dyn.reshape(%250, %251, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %254 = %247.0;
  %255 = logical_xor(%252, %253) /* ty=Tensor[(4, 112), int16] */;
  (%254, %255)
}

def @func_3937() -> (Tensor[(7, 6, 13), float64],) {
  %256 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 13), float64] */;
  %257 = asin(%256) /* ty=Tensor[(7, 6, 13), float64] */;
  (%257,)
}

def @func_8997() -> (Tensor[(900), float32], Tensor[(1, 10, 13), float64]) {
  %258 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %259 = @func_5438() /* ty=Tensor[(900), float32] */;
  %260 = %258.0;
  (%259, %260)
}

def @func_3434(%var_3402: Tensor[(432), float32]) -> (Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) {
  %261 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %262 = cast(%var_3402, dtype="float32") /* ty=Tensor[(432), float32] */;
  %263 = cast(meta[relay.Constant][10] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %264 = reshape(%262, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %265 = reshape(%263, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %266 = @func_934(%264, %265) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %267 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %268 = %261.1;
  %269 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  %270 = %266.0;
  %271 = %267.0;
  (%268, %269, %270, %var_3402, meta[relay.Constant][10] /* ty=Tensor[(130), float32] */, %271)
}

def @func_18537() -> (Tensor[(130), float32], Tensor[(16, 2, 14), float32]) {
  %272 = @func_9690() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %273 = @func_7467() /* ty=Tensor[(130), float32] */;
  %274 = %272.0;
  (%273, %274)
}

def @func_5703(%var_5662: Tensor[(14, 13, 10), uint32], %var_5663: Tensor[(14, 13, 10), uint32], %var_5675: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(14, 13, 10), uint32], Tensor[(14, 13, 10), int8]) {
  %275 = cast(%var_5675, dtype="float64") /* ty=Tensor[(390), float64] */;
  %276 = reshape(%275, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %277 = @func_5230(%276) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) */;
  %278 = cast(%var_5663, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %279 = shape_of(%var_5662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%var_5662, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %282 = bitwise_and(%280, %281) /* ty=Tensor[(14, 13, 10), uint32] */;
  %283 = cast(%282, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %284 = shape_of(%var_5663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %285 = cast(%var_5663, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %286 = dyn.reshape(%283, %284, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %287 = cast(meta[relay.Constant][11] /* ty=Tensor[(14, 13, 10), uint32] */, dtype="int8") /* ty=Tensor[(14, 13, 10), int8] */;
  %288 = shape_of(%282, dtype="int32") /* ty=Tensor[(3), int32] */;
  %289 = cast(%282, dtype="int8") /* ty=Tensor[(14, 13, 10), int8] */;
  %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %291 = %277.0;
  %292 = minimum(%285, %286) /* ty=Tensor[(14, 13, 10), uint32] */;
  %293 = add(%289, %290) /* ty=Tensor[(14, 13, 10), int8] */;
  (%291, %var_5675, %292, %293)
}

def @func_7354() -> (Tensor[(?, 10, 13), uint32],) {
  %294 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  (%294,)
}

def @func_12737() -> (Tensor[(16, 2, 14), float64],) {
  %295 = @func_11688() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %296 = %295.0;
  (%296,)
}

def @func_2618() -> (Tensor[(1, 10, 13), float32],) {
  %297 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %298 = %297.0;
  %299 = cast(%298, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %300 = log2(%299) /* ty=Tensor[(1, 10, 13), float32] */;
  (%300,)
}

def @func_11646(%var_11627: Tensor[(1, 105), bool]) -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  %301 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %302 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %303 = cast(%var_11627, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
  %304 = cast(meta[relay.Constant][12] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %305 = reshape(%303, newshape=[105]) /* ty=Tensor[(105), bool] */;
  %306 = reshape(%304, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %307 = @func_9443(%305, %306) /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(3, 7, 5), bool], Tensor[(105), bool], Tensor[(900), float32], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) */;
  %308 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %309 = %301.0;
  %310 = %302.0;
  %311 = %307.3;
  %312 = %308.1;
  (%309, %310, %311, %var_11627, meta[relay.Constant][12] /* ty=Tensor[(900), float32] */, %312)
}

def @func_14376(%var_14369: Tensor[(7, 16, 9), uint16]) -> Tensor[(7, 16, 9), uint16] {
  %313 = cast(%var_14369, dtype="uint16") /* ty=Tensor[(7, 16, 9), uint16] */;
  %314 = shape_of(meta[relay.Constant][13] /* ty=Tensor[(7, 16, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(meta[relay.Constant][13] /* ty=Tensor[(7, 16, 9), uint16] */, dtype="uint16") /* ty=Tensor[(7, 16, 9), uint16] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%315, %316) /* ty=Tensor[(7, 16, 9), uint16] */
}

def @func_1178() -> Tensor[(16, 2, 14), float64] {
  @func_1094() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_12234() -> Tensor[(16, 2, 14), float64] {
  @func_1178() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_17628(%var_17606: Tensor[(13, 8, 1), uint32], %var_17607: Tensor[(13, 8, 13), uint32]) -> (Tensor[(13, 8, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(900), float32]) {
  %317 = cast(%var_17606, dtype="uint32") /* ty=Tensor[(13, 8, 1), uint32] */;
  %318 = cast(%var_17607, dtype="uint32") /* ty=Tensor[(13, 8, 13), uint32] */;
  %319 = @func_5047() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %320 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %321 = maximum(%317, %318) /* ty=Tensor[(13, 8, 13), uint32] */;
  %322 = %319.0;
  %323 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  %324 = %320.2;
  (%321, %322, %323, %324)
}

def @func_9753() -> (Tensor[(7, 6, 13), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  %325 = @func_8969() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(7, 6, 13), float64]) */;
  %326 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
  %327 = @func_4882() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %328 = %325.1;
  %329 = %326.1;
  %330 = %327.0;
  (%328, %329, %330)
}

def @func_13738() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) {
  %331 = @func_2201() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */;
  %332 = %331.1;
  %333 = @func_11199() /* ty=Tensor[(16, 2, 14), float32] */;
  (%332, %333)
}

def @func_6077() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float64]) {
  %334 = @func_5960() /* ty=(Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) */;
  %335 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
  %336 = %334.1;
  %337 = %335.0;
  (%336, %337)
}

def @func_3532() -> Tensor[(16, 2, 14), float64] {
  %338 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %338.2
}

def @func_8680() -> Tensor[(16, 2, 14), float32] {
  %339 = @func_7872() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %339.1
}

def @func_8172() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %340 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
  %341 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %342 = %340.0;
  (%341, %342)
}

def @func_18159() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) {
  %343 = @func_6819() /* ty=(Tensor[(3, 9, 16), float32], Tensor[(16, 2, 14), float64]) */;
  %344 = @func_10811() /* ty=(Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
  %345 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %346 = @func_14441() /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32]) */;
  %347 = %343.1;
  %348 = %344.0;
  %349 = %345.0;
  %350 = %346.0;
  (%347, %348, %349, %350)
}

def @func_15507() -> Tensor[(?, 10, 13), uint32] {
  %351 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %351.0
}

def @func_2730() -> (Tensor[(1, 10, 13), float64], Tensor[(900), float32]) {
  %352 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %353 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %354 = %352.0;
  %355 = %353.2;
  (%354, %355)
}

def @func_10811() -> (Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  %356 = @func_6872() /* ty=(Tensor[(900), float32],) */;
  %357 = %356.0;
  %358 = @func_8680() /* ty=Tensor[(16, 2, 14), float32] */;
  (%357, %358)
}

def @func_18215() -> (Tensor[(16, 2, 14), float32],) {
  %359 = @func_7612() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %360 = %359.0;
  (%360,)
}

def @func_3274() -> Tensor[(1, 10, 13), float64] {
  %361 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %361.2
}

def @func_9087(%var_9054: Tensor[(56), float64]) -> (Tensor[(11, 11, 12), float32], Tensor[(4, 14, 1), float64], Tensor[(56), float64], Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), bool], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) {
  %362 = cast(meta[relay.Constant][14] /* ty=Tensor[(11, 1, 12), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %363 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %364 = cast(%var_9054, dtype="float64") /* ty=Tensor[(56), float64] */;
  %365 = reshape(%364, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %366 = @func_6746(%365) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) */;
  %367 = @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %368 = @func_8613() /* ty=(Tensor[(?, 10, 13), bool], Tensor[(900), float32], Tensor[(900), float32]) */;
  %369 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %370 = @func_7789() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %371 = power(%362, %363) /* ty=Tensor[(11, 11, 12), float32] */;
  %372 = %366.0;
  %373 = %367.1;
  %374 = %368.0;
  %375 = %369.1;
  %376 = %370.0;
  (%371, %372, %var_9054, %373, %374, %375, %376)
}

def @func_6553() -> (Tensor[(?, 10, 13), uint32],) {
  %377 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %378 = %377.0;
  (%378,)
}

def @func_14397() -> (Tensor[(16, 2, 14), float32],) {
  %379 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  (%379,)
}

def @func_8280(%var_8275: Tensor[(448), float64]) -> (Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) {
  %380 = @func_7789() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %381 = cast(%var_8275, dtype="float64") /* ty=Tensor[(448), float64] */;
  %382 = reshape(%381, newshape=[4, 112]) /* ty=Tensor[(4, 112), float64] */;
  %383 = @func_5862(%382) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) */;
  %384 = cast(%var_8275, dtype="float32") /* ty=Tensor[(448), float32] */;
  %385 = reshape(%384, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %386 = @func_2585(%385) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %387 = %380.0;
  %388 = %383.2;
  %389 = %386.2;
  (%387, %388, %var_8275, %389)
}

def @func_14876(%var_14860: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), uint64] {
  %390 = @func_10863() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) */;
  %391 = %390.0;
  %392 = cast(%var_14860, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%394, %395) /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_2405() -> Tensor[(?, 10, 13), uint32] {
  %396 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %396.0
}

def @func_10244() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool]) {
  %397 = @func_7416() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %398 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %399 = %398.0;
  %400 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %401 = %400.0;
  %402 = cast(%401, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %403 = shape_of(%399, dtype="int32") /* ty=Tensor[(3), int32] */;
  %404 = cast(%399, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %405 = dyn.reshape(%402, %403, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %406 = %397.0;
  %407 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
  %408 = logical_or(%404, %405) /* ty=Tensor[(?, 10, 13), bool] */;
  (%406, %407, %408)
}

def @func_6605() -> (Tensor[(16, 2, 14), float32],) {
  %409 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %410 = %409.0;
  %411 = cast(%410, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %412 = asinh(%411) /* ty=Tensor[(16, 2, 14), float32] */;
  (%412,)
}

def @func_8528() -> (Tensor[(7, 6, 13), float64],) {
  %413 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
  (%413,)
}

def @func_11199() -> Tensor[(16, 2, 14), float32] {
  %414 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %414.1
}

def @func_17122() -> (Tensor[(?, 10, 13), float64],) {
  %415 = @func_11424() /* ty=Tensor[(?, 10, 13), float64] */;
  (%415,)
}

def @func_13695() -> Tensor[(1, 10, 13), float64] {
  @func_3274() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_1620(%var_1615: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), bool] {
  %416 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  %417 = cast(%var_1615, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %418 = shape_of(%416, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%416, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%419, %420) /* ty=Tensor[(16, 2, 14), bool] */
}

def @func_17832() -> Tensor[(3, 9, 16), float32] {
  %421 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
  %421.3
}

def @func_7872() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %422 = @func_7354() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %423 = @func_7612() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %424 = %422.0;
  %425 = %423.0;
  (%424, %425)
}

def @func_9690() -> (Tensor[(16, 2, 14), float32],) {
  %426 = @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %427 = %426.0;
  (%427,)
}

def @func_6450() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  %428 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %429 = @func_3721() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %430 = %428.0;
  %431 = %429.0;
  (%430, %431)
}

def @func_5862(%var_5850: Tensor[(4, 112), float64]) -> (Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) {
  %432 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %433 = cast(%var_5850, dtype="float64") /* ty=Tensor[(4, 112), float64] */;
  %434 = reshape(%433, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %435 = @func_4813(%434) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), bool], Tensor[(448), float64]) */;
  %436 = @func_5047() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %437 = %432.3;
  %438 = %435.1;
  %439 = %436.0;
  (%437, %438, %var_5850, %439)
}

def @func_233(%var_230: Tensor[(1, 10, 13), float32]) -> (Tensor[(1, 10, 13), float32],) {
  %440 = cast(%var_230, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %441 = sinh(%440) /* ty=Tensor[(1, 10, 13), float32] */;
  (%441,)
}

def @func_2952() -> (Tensor[(?, 10, 13), uint32],) {
  %442 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %443 = %442.1;
  (%443,)
}

def @func_16123() -> (Tensor[(7, 6, 13), float64],) {
  %444 = @func_9396() /* ty=Tensor[(7, 6, 13), float64] */;
  (%444,)
}

def @func_7028() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %445 = @func_6947() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */;
  %446 = %445.1;
  %447 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  (%446, %447)
}

def @func_5960() -> (Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) {
  %448 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %449 = erf(%448) /* ty=Tensor[(6, 14, 1), float32] */;
  %450 = cast(meta[relay.Constant][16] /* ty=Tensor[(6, 14, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 1), bool] */;
  %451 = shape_of(%449, dtype="int32") /* ty=Tensor[(3), int32] */;
  %452 = cast(%449, dtype="bool") /* ty=Tensor[(6, 14, 1), bool] */;
  %453 = dyn.reshape(%450, %451, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %454 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %455 = cast(%449, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %456 = sigmoid(%455) /* ty=Tensor[(6, 14, 1), float32] */;
  %457 = cast(%456, dtype="float64") /* ty=Tensor[(6, 14, 1), float64] */;
  %458 = log10(%457) /* ty=Tensor[(6, 14, 1), float64] */;
  %459 = cast(%449, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %460 = shape_of(%458, dtype="int32") /* ty=Tensor[(3), int32] */;
  %461 = cast(%458, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %462 = dyn.reshape(%459, %460, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %463 = cast(%458, dtype="float64") /* ty=Tensor[(6, 14, 1), float64] */;
  %464 = not_equal(%452, %453) /* ty=Tensor[(6, 14, ?), bool] */;
  %465 = %454.0;
  %466 = subtract(%461, %462) /* ty=Tensor[(6, 14, ?), float32] */;
  %467 = log(%463) /* ty=Tensor[(6, 14, 1), float64] */;
  (%464, %465, %466, %467)
}

def @func_12166() -> (Tensor[(1, 10, 13), float64],) {
  %468 = @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %469 = %468.1;
  (%469,)
}

def @func_17101() -> (Tensor[(900), float32], Tensor[(900), float32]) {
  %470 = @func_9753() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
  %471 = @func_16616() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(900), float32]) */;
  %472 = %470.1;
  %473 = %471.2;
  (%472, %473)
}

def @func_16370(%var_16341: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64], Tensor[(900), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool]) {
  %474 = @func_14820() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %475 = cast(%var_16341, dtype="float32") /* ty=Tensor[(900), float32] */;
  %476 = reshape(%475, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %477 = @func_9221(%476) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %478 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %479 = @func_13670() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 7, 2), float64], uint32) */;
  %480 = @func_10244() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool]) */;
  %481 = %474.0;
  %482 = @func_13695() /* ty=Tensor[(1, 10, 13), float64] */;
  %483 = %477.2;
  %484 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
  %485 = %478.0;
  %486 = %479.0;
  %487 = %480.2;
  (%481, %482, %483, %var_16341, %484, %485, %486, %487)
}

def @func_4561() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) {
  %488 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %489 = %488.0;
  %490 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  (%489, %490)
}

def @func_9818() -> Tensor[(16, 2, 14), float32] {
  %491 = @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %491.0
}

def @func_14586() -> Tensor[(?, 10, 13), bool] {
  %492 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %492.2
}

def @func_3127() -> Tensor[(16, 2, 14), float32] {
  %493 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %493.0
}

def @func_13639() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) {
  %494 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %495 = %494.0;
  %496 = @func_12234() /* ty=Tensor[(16, 2, 14), float64] */;
  %497 = @func_11973() /* ty=Tensor[(16, 2, 14), float32] */;
  (%495, %496, %497)
}

def @func_14192() -> (Tensor[(?, 10, 13), float32],) {
  %498 = @func_12042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %499 = %498.0;
  %500 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 10, 13), uint32] */, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
  %502 = cast(%499, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %504 = minimum(%502, %503) /* ty=Tensor[(?, 10, 13), float32] */;
  (%504,)
}

def @func_17291() -> (Tensor[(16, 2, 14), bool],) {
  %505 = @func_8503() /* ty=(Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) */;
  %506 = %505.8;
  (%506,)
}

def @func_9581() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) {
  %507 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %508 = @func_8805() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */;
  %509 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %510 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %511 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %512 = %510.2;
  %513 = cast(%512, dtype="float32") /* ty=Tensor[(900), float32] */;
  %514 = reshape(%513, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %515 = @func_9221(%514) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %516 = %507.0;
  %517 = %508.0;
  %518 = %509.0;
  %519 = %511.2;
  %520 = %515.2;
  (%516, %517, %518, %512, %519, %520)
}

def @func_7612() -> (Tensor[(16, 2, 14), float32],) {
  %521 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %522 = %521.1;
  (%522,)
}

def @func_12325() -> Tensor[(3, 1, 1), float32] {
  %523 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 1), float32] */;
  rsqrt(%523) /* ty=Tensor[(3, 1, 1), float32] */
}

def @func_13789(%var_13774: Tensor[(10, 10, 13), uint32]) -> (Tensor[(10, 10, 13), float64],) {
  %524 = @func_4937() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) */;
  %525 = %524.3;
  %526 = cast(%525, dtype="float64") /* ty=Tensor[(?, 10, 13), float64] */;
  %527 = cast(%var_13774, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
  %528 = floor_divide(%526, %527) /* ty=Tensor[(10, 10, 13), float64] */;
  (%528,)
}

def @func_1982() -> (Tensor[(130), float32],) {
  %529 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %530 = %529.2;
  (%530,)
}

def @func_3787() -> (Tensor[(16, 2, 14), float64],) {
  %531 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
  (%531,)
}

def @func_12211() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %532 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %533 = @func_11085() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %534 = %532.0;
  %535 = %533.0;
  (%534, %535)
}

def @func_2324(%var_2302: Tensor[(6, 10, 13), float64]) -> (Tensor[(6, 10, 13), float32], Tensor[(?, 10, 13), uint32]) {
  %536 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %538 = cast(%var_2302, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %539 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %540 = mod(%537, %538) /* ty=Tensor[(6, 10, 13), float32] */;
  %541 = %539.1;
  (%540, %541)
}

def @func_15073(%var_15046: Tensor[(10, 10, 13), float64]) -> (Tensor[(?, 10, 13), float32], Tensor[(10, 10, 13), float32], Tensor[(16, 2, 14), float64]) {
  %542 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %543 = @func_13915() /* ty=Tensor[(1, 10, 13), float64] */;
  %544 = cast(%543, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %545 = cast(%var_15046, dtype="float32") /* ty=Tensor[(10, 10, 13), float32] */;
  %546 = @func_3787() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %547 = %542.0;
  %548 = mod(%544, %545) /* ty=Tensor[(10, 10, 13), float32] */;
  %549 = %546.0;
  (%547, %548, %549)
}

def @func_16089() -> (Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64]) {
  %550 = @func_12424() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) */;
  %551 = @func_14986() /* ty=Tensor[(1, 10, 13), float64] */;
  %552 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %553 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %554 = %550.2;
  (%551, %552, %553, %554)
}

def @func_11455() -> (Tensor[(16, 2, 14), float64],) {
  %555 = @func_6051() /* ty=Tensor[(16, 2, 14), float64] */;
  (%555,)
}

def @func_11291() -> (Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32]) {
  %556 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %557 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %558 = @func_7563() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %559 = @func_10659() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %560 = %556.1;
  %561 = %557.0;
  %562 = %558.0;
  %563 = %559.1;
  (%560, %561, %562, %563)
}

def @func_14441() -> (Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32]) {
  %564 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
  %565 = %564.3;
  %566 = @func_11667() /* ty=Tensor[(1, 10, 13), float32] */;
  (%565, %566)
}

def @func_1744() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  %567 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %568 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %569 = %567.0;
  (%568, %569)
}

def @func_16228() -> Tensor[(390), float64] {
  %570 = @func_12424() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) */;
  %570.3
}

def @func_4038() -> (Tensor[(16, 2, 14), float64],) {
  %571 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %572 = %571.2;
  (%572,)
}

def @func_3343() -> (Tensor[(1, 10, 13), float64],) {
  %573 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  (%573,)
}

def @func_12060(%var_12056: Tensor[(14, 16, 5), float64]) -> Tensor[(14, 16, 5), float64] {
  %574 = cast(%var_12056, dtype="float64") /* ty=Tensor[(14, 16, 5), float64] */;
  asin(%574) /* ty=Tensor[(14, 16, 5), float64] */
}

def @func_10394() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  %575 = @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */;
  %576 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %577 = %575.1;
  %578 = %576.1;
  (%577, %578)
}

def @func_16557() -> (Tensor[(1, 10, 13), float32],) {
  %579 = @func_13476() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %580 = %579.0;
  (%580,)
}

def @func_4743(%var_4733: Tensor[(448), float32]) -> (Tensor[(130), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(448), float32]) {
  %581 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %582 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %583 = cast(%var_4733, dtype="float32") /* ty=Tensor[(448), float32] */;
  %584 = reshape(%583, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %585 = @func_2585(%584) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %586 = %581.0;
  %587 = %582.0;
  %588 = %585.1;
  (%586, %587, %588, %var_4733)
}

def @func_11509(%var_11498: Tensor[(12, 14, 10), float64], %var_11504: Tensor[(1, 448), float64]) -> (Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) {
  %589 = cast(%var_11498, dtype="float64") /* ty=Tensor[(12, 14, 10), float64] */;
  %590 = cast(%var_11504, dtype="float64") /* ty=Tensor[(1, 448), float64] */;
  %591 = reshape(%590, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %592 = @func_8280(%591) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) */;
  %593 = cos(%589) /* ty=Tensor[(12, 14, 10), float64] */;
  %594 = %592.0;
  (%593, %594, %var_11504)
}

def @func_14534(%var_14499: uint8) -> (Tensor[(16, 2, 7), uint8], Tensor[(16, 2, 14), float32]) {
  %595 = cast(%var_14499, dtype="uint8") /* ty=uint8 */;
  %596 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 2, 7), uint8] */, dtype="uint8") /* ty=Tensor[(16, 2, 7), uint8] */;
  %597 = @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %598 = add(%595, %596) /* ty=Tensor[(16, 2, 7), uint8] */;
  %599 = %597.0;
  (%598, %599)
}

def @func_7467() -> Tensor[(130), float32] {
  %600 = @func_1982() /* ty=(Tensor[(130), float32],) */;
  %600.0
}

def @func_10434() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %601 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %602 = %601.0;
  %603 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  (%602, %603)
}

def @func_7416() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %604 = @func_7279() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %605 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
  %606 = @func_6092() /* ty=Tensor[(16, 2, 14), float32] */;
  %607 = %604.2;
  %608 = %605.0;
  (%606, %607, %608)
}

def @func_5438() -> Tensor[(900), float32] {
  %609 = @func_2704() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %609.5
}

def @func_4937() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) {
  %610 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %611 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  %612 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  %613 = %610.0;
  %614 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  (%611, %612, %613, %614)
}

def @func_8265() -> (Tensor[(16, 2, 14), float64],) {
  %615 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %616 = %615.0;
  (%616,)
}

def @func_9310() -> (Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) {
  %617 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %618 = %617.0;
  %619 = cast(%618, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %620 = reshape(%619, newshape=[4, 112]) /* ty=Tensor[(4, 112), float64] */;
  %621 = @func_5862(%620) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) */;
  %622 = %621.2;
  (%618, %622)
}

def @func_9621() -> Tensor[(900), float32] {
  %623 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %623.2
}

def @func_6523() -> Tensor[(16, 2, 14), float64] {
  %624 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %624.1
}

def @func_9669(%var_9651: Tensor[(432), float32], %var_9659: Tensor[(5, 10, 13), float64]) -> (Tensor[(5, 10, 13), uint16], Tensor[(1, 10, 13), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(5, 10, 13), bool], Tensor[(16, 2, 14), float64]) {
  %625 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %626 = %625.3;
  %627 = cast(%626, dtype="uint16") /* ty=Tensor[(1, 10, 13), uint16] */;
  %628 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 10, 13), float64] */, dtype="uint16") /* ty=Tensor[(5, 10, 13), uint16] */;
  %629 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %630 = cast(%var_9651, dtype="float32") /* ty=Tensor[(432), float32] */;
  %631 = %629.0;
  %632 = cast(%631, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %633 = reshape(%630, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %634 = reshape(%632, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %635 = @func_934(%633, %634) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %636 = cast(%var_9659, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %637 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(5, 10, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %638 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 10, 13), float64] */, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %639 = dyn.reshape(%636, %637, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %640 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %641 = bitwise_xor(%627, %628) /* ty=Tensor[(5, 10, 13), uint16] */;
  %642 = %635.0;
  %643 = equal(%638, %639) /* ty=Tensor[(5, 10, 13), bool] */;
  %644 = %640.0;
  (%641, %631, %642, %var_9651, %643, %644)
}

def @func_9281() -> (Tensor[(16, 2, 14), float32],) {
  %645 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %646 = %645.1;
  (%646,)
}

def @func_14820() -> (Tensor[(16, 2, 14), float32],) {
  %647 = @func_10110() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %648 = %647.0;
  (%648,)
}

def @func_7756() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) {
  %649 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %650 = %649.4;
  %651 = cast(%650, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %652 = reshape(%651, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %653 = @func_1620(%652) /* ty=Tensor[(16, 2, 14), bool] */;
  (%650, %653)
}

def @func_10452() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32]) {
  %654 = @func_8503() /* ty=(Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) */;
  %655 = %654.1;
  %656 = @func_9621() /* ty=Tensor[(900), float32] */;
  (%655, %656)
}

def @func_16464() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) {
  %657 = @func_13974() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %658 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
  %659 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %660 = %657.0;
  %661 = %658.1;
  %662 = %659.0;
  (%660, %661, %662)
}

def @func_12885() -> Tensor[(?, 10, 13), float32] {
  %663 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %663.0
}

def @func_9951() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %664 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %665 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %666 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %667 = %664.1;
  %668 = %665.0;
  %669 = %666.0;
  (%667, %668, %669)
}

def @func_1519() -> (Tensor[(16, 2, 14), float64],) {
  %670 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  (%670,)
}

def @func_9221(%var_9204: Tensor[(9, 100), float32]) -> (Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) {
  %671 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %672 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
  %673 = cast(%var_9204, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
  %674 = reshape(%673, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %675 = @func_1163(%674) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
  %676 = %671.2;
  %677 = %672.1;
  %678 = %675.0;
  %679 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
  (%676, %677, %678, %var_9204, %679)
}

def @func_3082(%var_3038: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) {
  %680 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %681 = %680.0;
  %682 = cast(%681, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %683 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %684 = cast(%681, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %685 = reshape(%684, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %686 = @func_2585(%685) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %687 = @func_2704() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %688 = %687.5;
  %689 = cast(%var_3038, dtype="float64") /* ty=Tensor[(900), float64] */;
  %690 = shape_of(%688, dtype="int32") /* ty=Tensor[(1), int32] */;
  %691 = cast(%688, dtype="float64") /* ty=Tensor[(900), float64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?), float64] */;
  %693 = tan(%682) /* ty=Tensor[(16, 2, 14), float32] */;
  %694 = %683.2;
  %695 = %686.2;
  %696 = divide(%691, %692) /* ty=Tensor[(900), float64] */;
  (%693, %694, %695, %696)
}

def @func_16978(%var_16969: Tensor[(56), float64]) -> (Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool], Tensor[(56), float64]) {
  %697 = @func_16123() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %698 = cast(%var_16969, dtype="float64") /* ty=Tensor[(56), float64] */;
  %699 = reshape(%698, newshape=[56]) /* ty=Tensor[(56), float64] */;
  %700 = @func_9087(%699) /* ty=(Tensor[(11, 11, 12), float32], Tensor[(4, 14, 1), float64], Tensor[(56), float64], Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), bool], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */;
  %701 = %697.0;
  %702 = %700.4;
  (%701, %702, %var_16969)
}

def @func_17417() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(900), float32], Tensor[(130), float32]) {
  %703 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %704 = cast(meta[relay.Constant][21] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %705 = reshape(%704, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %706 = @func_16370(%705) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64], Tensor[(900), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool]) */;
  %707 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %708 = %703.2;
  %709 = %706.3;
  %710 = %707.1;
  (%708, %709, meta[relay.Constant][21] /* ty=Tensor[(900), float32] */, %710)
}

def @func_6947() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) {
  %711 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %712 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %713 = %711.1;
  %714 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  %715 = %712.0;
  (%713, %714, %715)
}

def @func_6847() -> (Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) {
  %716 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
  %717 = @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %718 = erf(%716) /* ty=Tensor[(1, 6, 6), float32] */;
  %719 = %717.0;
  (%718, %719)
}

def @func_4412() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  %720 = @func_3787() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %721 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %722 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
  %723 = cast(%722, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %724 = acos(%723) /* ty=Tensor[(1, 10, 13), float32] */;
  %725 = cast(%722, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %726 = shape_of(%724, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%724, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %729 = power(%727, %728) /* ty=Tensor[(?, 10, 13), float32] */;
  %730 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %734 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %735 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %736 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %737 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %738 = %737.0;
  %739 = cast(%738, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %740 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%729, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %743 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %744 = %720.0;
  %745 = %721.2;
  %746 = not_equal(%732, %733) /* ty=Tensor[(?, 10, 13), bool] */;
  %747 = %734.0;
  %748 = %735.0;
  %749 = %736.1;
  %750 = mod(%741, %742) /* ty=Tensor[(?, 10, 13), float32] */;
  %751 = %743.0;
  (%744, %745, %746, %747, %748, %749, %750, %751)
}

def @func_11973() -> Tensor[(16, 2, 14), float32] {
  %752 = @func_11312() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %752.0
}

def @func_12042() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  %753 = @func_8936() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(4, 112), float32]) */;
  %754 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %755 = %753.0;
  %756 = %754.0;
  (%755, %756)
}

def @func_7625() -> Tensor[(7, 6, 13), float64] {
  %757 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %757.0
}

def @func_7180() -> (Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) {
  %758 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
  %759 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %760 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %761 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %762 = %758.0;
  %763 = %759.0;
  %764 = %760.1;
  %765 = %761.3;
  (%762, %763, %764, %765)
}

def @func_18448(%var_18428: Tensor[(6, 10, 13), float64]) -> (Tensor[(6, 10, 13), float64],) {
  %766 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %767 = %766.2;
  %768 = cast(%767, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %769 = cast(%var_18428, dtype="float64") /* ty=Tensor[(6, 10, 13), float64] */;
  %770 = floor_mod(%768, %769) /* ty=Tensor[(6, 10, 13), float64] */;
  (%770,)
}

def @func_13569() -> Tensor[(16, 2, 14), float64] {
  %771 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %771.1
}

def @func_4726() -> (Tensor[(1, 10, 13), float64], Tensor[(432), float32]) {
  %772 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %773 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
  %774 = %772.2;
  (%773, %774)
}

def @func_7552() -> (Tensor[(1, 10, 13), float64],) {
  %775 = @func_5169() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */;
  %776 = %775.2;
  (%776,)
}

def @func_10913() -> Tensor[(?, 10, 13), uint32] {
  %777 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %777.0
}

def @func_8936() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(4, 112), float32]) {
  %778 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %779 = @func_6523() /* ty=Tensor[(16, 2, 14), float64] */;
  %780 = cast(%779, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %781 = reshape(%780, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %782 = @func_8280(%781) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) */;
  %783 = %778.1;
  %784 = %782.3;
  (%783, %779, %784)
}

def @func_11312() -> (Tensor[(16, 2, 14), float32],) {
  %785 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  (%785,)
}

def @func_8969() -> (Tensor[(1, 10, 13), float64], Tensor[(7, 6, 13), float64]) {
  %786 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %787 = @func_8528() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %788 = %786.0;
  %789 = %787.0;
  (%788, %789)
}

def @func_3599() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %790 = @func_1982() /* ty=(Tensor[(130), float32],) */;
  %791 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  %792 = %790.0;
  (%791, %792)
}

def @func_17905() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %793 = @func_14561() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %794 = @func_12042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %795 = %793.0;
  %796 = %794.1;
  (%795, %796)
}

def @func_8771() -> Tensor[(?, 10, 13), uint32] {
  %797 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %797.0
}

def @func_8613() -> (Tensor[(?, 10, 13), bool], Tensor[(900), float32], Tensor[(900), float32]) {
  %798 = @func_7354() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %799 = %798.0;
  %800 = cast(%799, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %801 = sigmoid(%800) /* ty=Tensor[(?, 10, 13), float32] */;
  %802 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  %803 = cast(%802, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %804 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%801, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %807 = cast(meta[relay.Constant][24] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %808 = reshape(%807, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %809 = @func_3082(%808) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */;
  %810 = less(%805, %806) /* ty=Tensor[(?, 10, 13), bool] */;
  %811 = %809.1;
  (%810, %811, meta[relay.Constant][24] /* ty=Tensor[(900), float32] */)
}

def @func_1900() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) {
  %812 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %813 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %814 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %815 = cast(%814, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %816 = reshape(%815, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %817 = @func_1702(%816) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %818 = %812.1;
  %819 = %813.0;
  %820 = %817.1;
  (%814, %818, %819, %820)
}

def @func_3906() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %821 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %822 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %823 = %821.0;
  %824 = %822.0;
  (%823, %824)
}

def @func_2069() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %825 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %826 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %827 = %825.1;
  %828 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %829 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %830 = %826.0;
  (%827, %828, %829, %830)
}

def @func_9443(%var_9421: Tensor[(105), bool], %var_9435: Tensor[(900), float32]) -> (Tensor[(?, 10, 13), uint32], Tensor[(3, 7, 5), bool], Tensor[(105), bool], Tensor[(900), float32], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) {
  %831 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %832 = cast(%var_9421, dtype="bool") /* ty=Tensor[(105), bool] */;
  %833 = reshape(%832, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), bool] */;
  %834 = cast(%var_9435, dtype="float32") /* ty=Tensor[(900), float32] */;
  %835 = reshape(%834, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %836 = @func_3082(%835) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */;
  %837 = @func_5169() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */;
  %838 = %831.2;
  %839 = @func_6341(%833) /* ty=Tensor[(3, 7, 5), bool] */;
  %840 = %836.1;
  %841 = %837.1;
  (%838, %839, %var_9421, %840, %var_9435, %841)
}

def @func_10889() -> (Tensor[(16, 2, 14), float64],) {
  %842 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
  (%842,)
}

def @func_3235() -> (Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) {
  %843 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  %844 = cast(%843, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %845 = reshape(%844, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %846 = @func_1702(%845) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %847 = %846.1;
  (%843, %847)
}

def @func_6272(%var_6228: Tensor[(10, 10, 13), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(10, 10, 13), int32], Tensor[(16, 2, 14), float64]) {
  %848 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %849 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %850 = cast(%849, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %851 = cast(%var_6228, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %852 = greater_equal(%850, %851) /* ty=Tensor[(10, 10, 13), bool] */;
  %853 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %854 = %853.1;
  %855 = cast(%852, dtype="int32") /* ty=Tensor[(10, 10, 13), int32] */;
  %856 = cast(%854, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %857 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %858 = %848.0;
  %859 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  %860 = left_shift(%855, %856) /* ty=Tensor[(10, 10, 13), int32] */;
  %861 = %857.0;
  (%858, %859, %860, %861)
}

def @func_14899() -> (Tensor[(16, 2, 14), float64],) {
  %862 = @func_12234() /* ty=Tensor[(16, 2, 14), float64] */;
  (%862,)
}

def @func_15488(%var_15482: Tensor[(1690), float64], %var_15483: Tensor[(432), float32], %var_15484: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(1690), float64], Tensor[(432), float32], Tensor[(390), float64]) {
  %863 = @func_10434() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %864 = cast(%var_15482, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %865 = cast(%var_15483, dtype="float32") /* ty=Tensor[(432), float32] */;
  %866 = cast(%var_15484, dtype="float64") /* ty=Tensor[(390), float64] */;
  %867 = reshape(%864, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float64] */;
  %868 = reshape(%865, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %869 = reshape(%866, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %870 = @func_7115(%867, %868, %869) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(13, 10, 13), int16], Tensor[(432), float32], Tensor[(432), float32], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) */;
  %871 = %863.1;
  %872 = %870.0;
  (%871, %872, %var_15482, %var_15483, %var_15484)
}

def @func_8205() -> Tensor[(1, 10, 13), float64] {
  %873 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %873.0
}

def @func_3860() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %874 = @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %875 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %876 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %877 = %874.0;
  %878 = %875.3;
  (%876, %877, %878)
}

def @func_10659() -> (Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) {
  %879 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
  %880 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %881 = %879.0;
  %882 = %880.0;
  (%881, %882)
}

def @func_13818(%var_13808: Tensor[(16, 7, 11), int64], %var_13809: Tensor[(16, 7, 11), int64]) -> (Tensor[(16, 7, 11), int64], Tensor[(16, 2, 14), float32]) {
  %883 = cast(%var_13809, dtype="int64") /* ty=Tensor[(16, 7, 11), int64] */;
  %884 = shape_of(%var_13808, dtype="int32") /* ty=Tensor[(3), int32] */;
  %885 = cast(%var_13808, dtype="int64") /* ty=Tensor[(16, 7, 11), int64] */;
  %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %887 = @func_13011() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %888 = logical_xor(%885, %886) /* ty=Tensor[(16, 7, 11), int64] */;
  %889 = %887.0;
  (%888, %889)
}

def @func_5627(%var_5591: Tensor[(1, 432), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(15, 5, 12), float64], Tensor[(1, 432), float32], Tensor[(?, 10, 13), bool]) {
  %890 = @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %891 = @func_2704() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %892 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %893 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %894 = cast(%var_5591, dtype="float32") /* ty=Tensor[(1, 432), float32] */;
  %895 = reshape(%894, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %896 = @func_3434(%895) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %897 = @func_2618() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %898 = %897.0;
  %899 = cast(%898, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %900 = cos(%899) /* ty=Tensor[(1, 10, 13), float32] */;
  %901 = cast(%898, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %902 = shape_of(%900, dtype="int32") /* ty=Tensor[(3), int32] */;
  %903 = cast(%900, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %904 = dyn.reshape(%901, %902, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %905 = %890.0;
  %906 = %891.1;
  %907 = %892.0;
  %908 = %893.1;
  %909 = %896.0;
  %910 = greater_equal(%903, %904) /* ty=Tensor[(?, 10, 13), bool] */;
  (%905, %906, %907, %908, %909, %var_5591, %910)
}

def @func_18280(%var_18266: Tensor[(1300), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(1300), uint32], Tensor[(1300), uint32], Tensor[(16, 2, 14), float64]) {
  %911 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %912 = cast(%var_18266, dtype="uint32") /* ty=Tensor[(1300), uint32] */;
  %913 = reshape(%912, newshape=[1300]) /* ty=Tensor[(1300), uint32] */;
  %914 = @func_11599(%913) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(10, 10, 13), int32], Tensor[(1300), uint32], Tensor[(1, 10, 13), float64]) */;
  %915 = %911.0;
  %916 = %914.2;
  %917 = @func_7527() /* ty=Tensor[(16, 2, 14), float64] */;
  (%915, %916, %var_18266, %917)
}

def @func_18383() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(?, 10, 13), uint32], Tensor[(10, 6, 1), float32], Tensor[(60), float32]) {
  %918 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %919 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %920 = @func_16089() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64]) */;
  %921 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %922 = cast(meta[relay.Constant][25] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %923 = reshape(%922, newshape=[10, 6, 1]) /* ty=Tensor[(10, 6, 1), float32] */;
  %924 = @func_14470(%923) /* ty=(Tensor[(10, 6, 1), float32],) */;
  %925 = %918.0;
  %926 = %919.1;
  %927 = %920.3;
  %928 = %921.2;
  %929 = %924.0;
  (%925, %926, %927, %928, %929, meta[relay.Constant][25] /* ty=Tensor[(60), float32] */)
}

def @func_7789() -> (Tensor[(1, 10, 13), float64],) {
  %930 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  (%930,)
}

def @func_14802(%var_14776: Tensor[(1680, 1), float64]) -> (Tensor[(130), bool], Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(12, 14, 10), float64], Tensor[(1680, 1), float64], Tensor[(16, 2, 14), float64]) {
  %931 = @func_12703() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) */;
  %932 = @func_13011() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %933 = cast(%var_14776, dtype="float64") /* ty=Tensor[(1680, 1), float64] */;
  %934 = %932.0;
  %935 = cast(%934, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %936 = reshape(%933, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float64] */;
  %937 = reshape(%935, newshape=[1, 448]) /* ty=Tensor[(1, 448), float64] */;
  %938 = @func_11509(%936, %937) /* ty=(Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) */;
  %939 = @func_4937() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) */;
  %940 = %931.1;
  %941 = @func_11667() /* ty=Tensor[(1, 10, 13), float32] */;
  %942 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
  %943 = %938.0;
  %944 = %939.0;
  (%940, %941, %934, %942, %943, %var_14776, %944)
}

def @func_5778() -> (Tensor[(?, 10, 13), float32],) {
  %945 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %946 = %945.0;
  (%946,)
}

def @func_1367() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) {
  %947 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %948 = cast(meta[relay.Constant][26] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %949 = reshape(%948, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %950 = @func_233(%949) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %951 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %952 = %947.0;
  %953 = %950.0;
  %954 = %951.0;
  (%952, %953, meta[relay.Constant][26] /* ty=Tensor[(130), float32] */, %954)
}

def @func_11424() -> Tensor[(?, 10, 13), float64] {
  @func_10301() /* ty=Tensor[(?, 10, 13), float64] */
}

def @func_17111() -> Tensor[(900), float32] {
  %955 = @func_17101() /* ty=(Tensor[(900), float32], Tensor[(900), float32]) */;
  %955.1
}

def @func_9883() -> (Tensor[(?, 10, 13), uint32],) {
  %956 = @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */;
  (%956,)
}

def @func_1163(%var_1149: Tensor[(15, 5, 12), float32]) -> (Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) {
  %957 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 1), float32] */;
  %958 = cosh(%957) /* ty=Tensor[(1, 5, 1), float32] */;
  %959 = cast(%958, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  %960 = cast(%var_1149, dtype="float64") /* ty=Tensor[(15, 5, 12), float64] */;
  %961 = cast(meta[relay.Constant][28] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %962 = cast(meta[relay.Constant][29] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %963 = reshape(%961, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %964 = reshape(%962, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %965 = @func_934(%963, %964) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %966 = multiply(%959, %960) /* ty=Tensor[(15, 5, 12), float64] */;
  %967 = %965.0;
  (%966, %967, meta[relay.Constant][28] /* ty=Tensor[(432), float32] */, meta[relay.Constant][29] /* ty=Tensor[(130), float32] */)
}

def @func_15942(%var_15932: Tensor[(4, 10, 13), float64]) -> Tensor[(4, 10, 13), float64] {
  %968 = @func_8205() /* ty=Tensor[(1, 10, 13), float64] */;
  %969 = cast(%968, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %970 = cast(%var_15932, dtype="float64") /* ty=Tensor[(4, 10, 13), float64] */;
  floor_mod(%969, %970) /* ty=Tensor[(4, 10, 13), float64] */
}

def @func_1702(%var_1652: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) {
  %971 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %972 = cast(%var_1652, dtype="uint8") /* ty=Tensor[(16, 2, 14), uint8] */;
  %973 = shape_of(%971, dtype="int32") /* ty=Tensor[(3), int32] */;
  %974 = cast(%971, dtype="uint8") /* ty=Tensor[(16, 2, 14), uint8] */;
  %975 = dyn.reshape(%972, %973, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %976 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %977 = reshape(%976, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %978 = @func_1163(%977) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
  %979 = bitwise_and(%974, %975) /* ty=Tensor[(16, 2, 14), uint8] */;
  %980 = %978.0;
  (%979, %980, meta[relay.Constant][30] /* ty=Tensor[(900), float32] */)
}

def @func_5128() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  %981 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %982 = @func_2618() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %983 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %984 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %985 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %986 = %981.1;
  %987 = %982.0;
  %988 = %983.0;
  %989 = %984.2;
  %990 = %985.0;
  %991 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
  (%986, %987, %988, %989, %990, %991)
}

def @func_7115(%var_7077: Tensor[(13, 10, 13), float64], %var_7101: Tensor[(432), float32], %var_7111: Tensor[(5, 78), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(13, 10, 13), int16], Tensor[(432), float32], Tensor[(432), float32], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) {
  %992 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %993 = @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %994 = %993.1;
  %995 = cast(%994, dtype="int16") /* ty=Tensor[(1, 10, 13), int16] */;
  %996 = cast(%var_7077, dtype="int16") /* ty=Tensor[(13, 10, 13), int16] */;
  %997 = cast(%var_7101, dtype="float32") /* ty=Tensor[(432), float32] */;
  %998 = reshape(%997, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %999 = @func_3434(%998) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %1000 = cast(%var_7111, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %1001 = reshape(%1000, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %1002 = %992.1;
  %1003 = subtract(%995, %996) /* ty=Tensor[(13, 10, 13), int16] */;
  %1004 = %999.3;
  %1005 = @func_3610(%1001) /* ty=Tensor[(13, 15, 2), float64] */;
  (%1002, %1003, %1004, %var_7101, %1005, %var_7111)
}

def @func_4882() -> (Tensor[(16, 2, 14), float32],) {
  %1006 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1006,)
}

def @func_17766() -> (Tensor[(16, 2, 14), float64],) {
  %1007 = @func_11455() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1008 = %1007.0;
  (%1008,)
}

def @func_10962(%var_10956: Tensor[(130), float32]) -> Tensor[(130), bool] {
  %1009 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1010 = %1009.1;
  %1011 = cast(%var_10956, dtype="bool") /* ty=Tensor[(130), bool] */;
  %1012 = shape_of(%1010, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1013 = cast(%1010, dtype="bool") /* ty=Tensor[(130), bool] */;
  %1014 = dyn.reshape(%1011, %1012, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%1013, %1014) /* ty=Tensor[(130), bool] */
}

def @func_1937() -> (Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) {
  %1015 = @func_1900() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) */;
  %1016 = cast(meta[relay.Constant][31] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1017 = reshape(%1016, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %1018 = @func_1163(%1017) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
  %1019 = %1015.2;
  %1020 = %1018.3;
  (%1019, %1020, meta[relay.Constant][31] /* ty=Tensor[(900), float32] */)
}

def @func_1577() -> (Tensor[(130), float32],) {
  %1021 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %1022 = %1021.2;
  (%1022,)
}

def @func_12424() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) {
  %1023 = @func_2201() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */;
  %1024 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1025 = cast(meta[relay.Constant][32] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %1026 = reshape(%1025, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %1027 = @func_4225(%1026) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(4, 112), float32], Tensor[(13, 15, 2), float32]) */;
  %1028 = @func_3721() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1029 = %1023.1;
  %1030 = %1024.0;
  %1031 = %1027.1;
  %1032 = %1028.0;
  (%1029, %1030, %1031, meta[relay.Constant][32] /* ty=Tensor[(390), float64] */, %1032)
}

def @func_11688() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %1033 = @func_11416() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %1034 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %1035 = %1033.2;
  %1036 = %1034.1;
  (%1035, %1036)
}

def @func_2238() -> (Tensor[(?, 10, 13), uint32],) {
  %1037 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %1038 = %1037.1;
  (%1038,)
}

def @func_5169() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) {
  %1039 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1040 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %1041 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %1042 = %1039.0;
  %1043 = %1040.0;
  (%1041, %1042, %1043)
}

def @func_17663() -> (Tensor[(6, 14, ?), bool],) {
  %1044 = @func_5960() /* ty=(Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) */;
  %1045 = %1044.0;
  (%1045,)
}

def @func_1094() -> Tensor[(16, 2, 14), float64] {
  %1046 = cast(meta[relay.Constant][33] /* ty=Tensor[(16, 2, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  erf(%1046) /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_14095() -> Tensor[(1, 10, 13), float64] {
  %1047 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
  %1047.0
}

def @func_11902() -> (Tensor[(130), float32],) {
  %1048 = @func_1982() /* ty=(Tensor[(130), float32],) */;
  %1049 = %1048.0;
  (%1049,)
}

def @func_14986() -> Tensor[(1, 10, 13), float64] {
  %1050 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
  %1050.0
}

def @func_15781(%var_15735: Tensor[(105), bool], %var_15772: Tensor[(9, 10, 13), float64]) -> (Tensor[(2, 14, 9), float64], Tensor[(900), float32], Tensor[(105), bool], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(9, 10, 13), int8]) {
  %1051 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 9), float64] */;
  %1052 = cast(%var_15735, dtype="bool") /* ty=Tensor[(105), bool] */;
  %1053 = reshape(%1052, newshape=[1, 105]) /* ty=Tensor[(1, 105), bool] */;
  %1054 = @func_11646(%1053) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
  %1055 = @func_11455() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1056 = @func_9261() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %1057 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1058 = %1057.0;
  %1059 = cast(%1058, dtype="int8") /* ty=Tensor[(1, 10, 13), int8] */;
  %1060 = cast(%var_15772, dtype="int8") /* ty=Tensor[(9, 10, 13), int8] */;
  %1061 = rsqrt(%1051) /* ty=Tensor[(2, 14, 9), float64] */;
  %1062 = %1054.2;
  %1063 = %1055.0;
  %1064 = %1056.1;
  %1065 = subtract(%1059, %1060) /* ty=Tensor[(9, 10, 13), int8] */;
  (%1061, %1062, %var_15735, %1063, %1064, %1065)
}

def @func_17882() -> (Tensor[(1, 10, 13), float64],) {
  %1066 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  (%1066,)
}

def @func_4813(%var_4801: Tensor[(448), float64]) -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), bool], Tensor[(448), float64]) {
  %1067 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %1068 = cast(%var_4801, dtype="float64") /* ty=Tensor[(448), float64] */;
  %1069 = reshape(%1068, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %1070 = %1067.2;
  %1071 = @func_1620(%1069) /* ty=Tensor[(16, 2, 14), bool] */;
  (%1070, %1071, %var_4801)
}

def @func_7527() -> Tensor[(16, 2, 14), float64] {
  @func_1178() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_8503() -> (Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) {
  %1072 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
  %1073 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
  %1074 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
  %1075 = %1074.1;
  %1076 = cast(%1075, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  %1077 = sigmoid(%1076) /* ty=Tensor[(1, 6, 6), float64] */;
  %1078 = cast(%1075, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  %1079 = shape_of(%1077, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1080 = cast(%1077, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  %1081 = dyn.reshape(%1078, %1079, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1082 = @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */;
  %1083 = cast(meta[relay.Constant][35] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1084 = reshape(%1083, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
  %1085 = @func_5627(%1084) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(15, 5, 12), float64], Tensor[(1, 432), float32], Tensor[(?, 10, 13), bool]) */;
  %1086 = %1085.2;
  %1087 = cast(%1086, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %1088 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1089 = cast(%1082, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %1090 = dyn.reshape(%1087, %1088, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1091 = cast(%1075, dtype="uint16") /* ty=Tensor[(1, 6, 6), uint16] */;
  %1092 = shape_of(%1077, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1093 = cast(%1077, dtype="uint16") /* ty=Tensor[(1, 6, 6), uint16] */;
  %1094 = dyn.reshape(%1091, %1092, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1095 = bitwise_xor(%1093, %1094) /* ty=Tensor[(?, 6, 6), uint16] */;
  %1096 = cast(%1077, dtype="int64") /* ty=Tensor[(1, 6, 6), int64] */;
  %1097 = shape_of(%1095, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1098 = cast(%1095, dtype="int64") /* ty=Tensor[(?, 6, 6), int64] */;
  %1099 = dyn.reshape(%1096, %1097, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1100 = @func_8382() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) */;
  %1101 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %1102 = @func_5650() /* ty=Tensor[(16, 2, 14), float64] */;
  %1103 = %1072.0;
  %1104 = %1073.2;
  %1105 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
  %1106 = mod(%1080, %1081) /* ty=Tensor[(?, 6, 6), float64] */;
  %1107 = less_equal(%1089, %1090) /* ty=Tensor[(?, 10, 13), bool] */;
  %1108 = add(%1098, %1099) /* ty=Tensor[(?, 6, 6), int64] */;
  %1109 = %1100.1;
  %1110 = %1101.1;
  (meta[relay.Constant][35] /* ty=Tensor[(432), float32] */, %1102, %1103, %1104, %1105, %1106, %1107, %1108, %1109, %1110)
}

def @func_9396() -> Tensor[(7, 6, 13), float64] {
  %1111 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %1111.0
}

def @func_18675() -> (Tensor[(?, 10, 13), float32],) {
  %1112 = @func_14192() /* ty=(Tensor[(?, 10, 13), float32],) */;
  %1113 = %1112.0;
  (%1113,)
}

def @func_13915() -> Tensor[(1, 10, 13), float64] {
  %1114 = @func_8997() /* ty=(Tensor[(900), float32], Tensor[(1, 10, 13), float64]) */;
  %1114.1
}

def @func_5282() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) {
  %1115 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1116 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  %1117 = %1115.0;
  (%1116, %1117)
}

def @func_11826() -> Tensor[(1, 6, 6), float64] {
  %1118 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %1119 = %1118.0;
  %1120 = cast(%1119, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  asin(%1120) /* ty=Tensor[(1, 6, 6), float64] */
}

def @func_12474() -> Tensor[(16, 2, 14), float32] {
  %1121 = @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1121.0
}

def @func_3610(%var_3607: Tensor[(13, 15, 2), float64]) -> Tensor[(13, 15, 2), float64] {
  %1122 = cast(%var_3607, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  sqrt(%1122) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_1457() -> (Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) {
  %1123 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %1124 = %1123.1;
  %1125 = cast(%1124, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %1126 = cast(%1124, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %1127 = asinh(%1126) /* ty=Tensor[(1, 10, 13), float32] */;
  %1128 = cast(%1127, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
  %1129 = shape_of(%1124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1130 = cast(%1124, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
  %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1132 = atan(%1125) /* ty=Tensor[(1, 10, 13), float64] */;
  %1133 = maximum(%1130, %1131) /* ty=Tensor[(?, 10, 13), uint32] */;
  (%1132, %1133)
}

def @func_7243() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %1134 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1135 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1136 = %1134.0;
  %1137 = %1135.1;
  (%1136, %1137)
}

def @func_6719() -> (Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) {
  %1138 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1139 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1140 = %1138.6;
  %1141 = %1139.0;
  (%1140, %1141)
}

def @func_1755() -> (Tensor[(1, 10, 13), float64],) {
  %1142 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %1143 = %1142.0;
  (%1143,)
}

def @func_1967() -> (Tensor[(16, 2, 14), float64],) {
  %1144 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1145 = %1144.0;
  (%1145,)
}

def @func_14003() -> (Tensor[(16, 2, 14), float64],) {
  %1146 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  (%1146,)
}

def @func_7279() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %1147 = @func_6947() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */;
  %1148 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1149 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %1150 = %1147.1;
  %1151 = %1148.0;
  %1152 = %1149.0;
  (%1150, %1151, %1152)
}

def @func_2201() -> (Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) {
  %1153 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %1154 = cast(%1153, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %1155 = reshape(%1154, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %1156 = cast(%1153, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %1157 = @func_1620(%1155) /* ty=Tensor[(16, 2, 14), bool] */;
  %1158 = rsqrt(%1156) /* ty=Tensor[(16, 2, 14), float64] */;
  (%1157, %1158)
}

def @func_6872() -> (Tensor[(900), float32],) {
  %1159 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
  %1160 = %1159.1;
  (%1160,)
}

def @func_5518() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %1161 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %1162 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1163 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %1164 = %1161.0;
  %1165 = %1162.0;
  %1166 = %1163.1;
  (%1164, %1165, %1166)
}

def @func_2850() -> (Tensor[(16, 2, 14), float32],) {
  %1167 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1167,)
}

def @func_5230(%var_5220: Tensor[(5, 78), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) {
  %1168 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1169 = cast(%var_5220, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %1170 = reshape(%1169, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %1171 = %1168.0;
  %1172 = @func_3610(%1170) /* ty=Tensor[(13, 15, 2), float64] */;
  (%1171, %1172, %var_5220)
}

def @func_1833() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) {
  %1173 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1174 = %1173.0;
  %1175 = cast(%1174, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %1176 = reshape(%1175, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %1177 = @func_1702(%1176) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %1178 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %1179 = %1177.1;
  (%1178, %1174, %1179)
}

def @func_7336() -> Tensor[(?, 10, 13), uint32] {
  @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_8382() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) {
  %1180 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1181 = @func_2201() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */;
  %1182 = %1180.0;
  %1183 = %1181.0;
  (%1182, %1183)
}

def @func_10863() -> (Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) {
  %1184 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %1185 = %1184.1;
  %1186 = @func_9396() /* ty=Tensor[(7, 6, 13), float64] */;
  (%1185, %1186)
}

def @func_15470(%var_15340: Tensor[(13, 15, 10), float32]) -> (Tensor[(13, 15, 10), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1187 = cast(%var_15340, dtype="float32") /* ty=Tensor[(13, 15, 10), float32] */;
  %1188 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1189 = @func_14397() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1190 = @func_11749() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %1191 = sinh(%1187) /* ty=Tensor[(13, 15, 10), float32] */;
  %1192 = %1188.0;
  %1193 = %1189.0;
  %1194 = %1190.1;
  (%1191, %1192, %1193, %1194)
}

def @func_12372() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(28, 2), float64]) {
  %1195 = @func_11455() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1196 = cast(meta[relay.Constant][36] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %1197 = reshape(%1196, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %1198 = @func_6746(%1197) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) */;
  %1199 = %1195.0;
  %1200 = %1198.1;
  (%1199, %1200, meta[relay.Constant][36] /* ty=Tensor[(28, 2), float64] */)
}

def @func_2283() -> (Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  %1201 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %1202 = %1201.0;
  %1203 = cast(%1202, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %1204 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %1205 = cast(%1202, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %1206 = log(%1203) /* ty=Tensor[(1, 10, 13), float32] */;
  %1207 = %1204.1;
  %1208 = exp(%1205) /* ty=Tensor[(1, 10, 13), float64] */;
  (%1206, %1207, %1208)
}

def @func_17960() -> (Tensor[(1, 10, 13), float32],) {
  %1209 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %1210 = %1209.1;
  (%1210,)
}

def @func_11749() -> (Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) {
  %1211 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
  %1212 = @func_8680() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1211, %1212)
}

def @func_3654() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) {
  %1213 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1214 = cast(meta[relay.Constant][37] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1215 = reshape(%1214, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %1216 = @func_3434(%1215) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %1217 = %1213.0;
  %1218 = %1216.4;
  (%1217, %1218, meta[relay.Constant][37] /* ty=Tensor[(432), float32] */)
}

def @func_7964() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1219 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1220 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1221 = %1219.0;
  %1222 = %1220.0;
  (%1221, %1222)
}

def @func_18305() -> Tensor[(?, 10, 13), uint32] {
  %1223 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %1223.0
}

def @func_13670() -> (Tensor[(7, 6, 13), float64], Tensor[(16, 7, 2), float64], uint32) {
  %1224 = cast(meta[relay.Constant][38] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1225 = reshape(%1224, newshape=[]) /* ty=uint32 */;
  %1226 = @func_9396() /* ty=Tensor[(7, 6, 13), float64] */;
  %1227 = @func_13282(%1225) /* ty=Tensor[(16, 7, 2), float64] */;
  (%1226, %1227, meta[relay.Constant][38] /* ty=uint32 */)
}

def @func_1215() -> Tensor[(16, 2, 14), float32] {
  %1228 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  %1229 = cast(%1228, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  log10(%1229) /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_10191() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1230 = @func_9261() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %1231 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  %1232 = %1230.1;
  (%1231, %1232)
}

def @func_9261() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1233 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %1234 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %1235 = %1233.1;
  %1236 = %1234.1;
  (%1235, %1236)
}

def @func_12003(%var_11998: Tensor[(1, 10, 13), float32]) -> Tensor[(?, 10, 13), uint8] {
  %1237 = @func_2618() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %1238 = %1237.0;
  %1239 = cast(%var_11998, dtype="uint8") /* ty=Tensor[(1, 10, 13), uint8] */;
  %1240 = shape_of(%1238, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1241 = cast(%1238, dtype="uint8") /* ty=Tensor[(1, 10, 13), uint8] */;
  %1242 = dyn.reshape(%1239, %1240, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%1241, %1242) /* ty=Tensor[(?, 10, 13), uint8] */
}

def @func_17345() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float32]) {
  %1243 = @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */;
  %1244 = @func_12042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %1245 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %1246 = @func_14820() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1247 = @func_8680() /* ty=Tensor[(16, 2, 14), float32] */;
  %1248 = %1243.0;
  %1249 = %1244.1;
  %1250 = %1245.0;
  %1251 = %1246.0;
  (%1247, %1248, %1249, %1250, %1251)
}

def @func_14470(%var_14459: Tensor[(10, 6, 1), float32]) -> (Tensor[(10, 6, 1), float32],) {
  %1252 = cast(%var_14459, dtype="float32") /* ty=Tensor[(10, 6, 1), float32] */;
  %1253 = sin(%1252) /* ty=Tensor[(10, 6, 1), float32] */;
  (%1253,)
}

def @func_17048() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32]) {
  %1254 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %1255 = @func_5518() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %1256 = %1254.1;
  %1257 = %1255.1;
  (%1256, %1257)
}

def @func_10581() -> (Tensor[(1, 10, 13), float64],) {
  %1258 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  (%1258,)
}

def @func_17016() -> Tensor[(16, 2, 14), float64] {
  @func_12837() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_1302() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) {
  %1259 = cast(meta[relay.Constant][39] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %1260 = reshape(%1259, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %1261 = @func_233(%1260) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %1262 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %1263 = %1261.0;
  (%1262, %1263, meta[relay.Constant][39] /* ty=Tensor[(130), float32] */)
}

def @func_13258() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %1264 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %1265 = @func_13011() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %1266 = @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1267 = @func_10203() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1268 = %1264.0;
  %1269 = %1265.2;
  %1270 = %1266.0;
  %1271 = %1267.0;
  (%1268, %1269, %1270, %1271)
}

def @func_13528() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  %1272 = @func_7354() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1273 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1274 = %1272.0;
  %1275 = %1273.0;
  (%1274, %1275)
}

def @func_18107() -> (Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64]) {
  %1276 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %1277 = @func_14963() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %1278 = %1276.1;
  %1279 = %1277.1;
  (%1278, %1279)
}

def @func_2873() -> (Tensor[(1, 10, 13), float64],) {
  %1280 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1281 = %1280.0;
  (%1281,)
}

def @func_7563() -> (Tensor[(?, 10, 13), uint32],) {
  %1282 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1283 = %1282.5;
  (%1283,)
}

def @func_13395(%var_13386: uint64, %var_13387: Tensor[(4, 13, 2), uint64]) -> (Tensor[(4, 13, 2), bool],) {
  %1284 = cast(%var_13386, dtype="bool") /* ty=bool */;
  %1285 = cast(%var_13387, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
  %1286 = less_equal(%1284, %1285) /* ty=Tensor[(4, 13, 2), bool] */;
  (%1286,)
}

def @func_15710() -> (Tensor[(10, 10, 13), int16], Tensor[(1, 10, 13), float64]) {
  %1287 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %1288 = cast(%1287, dtype="int16") /* ty=Tensor[(?, 10, 13), int16] */;
  %1289 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 10, 13), uint32] */, dtype="int16") /* ty=Tensor[(10, 10, 13), int16] */;
  %1290 = bitwise_and(%1288, %1289) /* ty=Tensor[(10, 10, 13), int16] */;
  %1291 = @func_8205() /* ty=Tensor[(1, 10, 13), float64] */;
  (%1290, %1291)
}

def @func_4431() -> Tensor[(16, 2, 14), float32] {
  %1292 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %1292.0
}

def @func_6312() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) {
  %1293 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1294 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %1295 = %1293.1;
  %1296 = %1294.0;
  %1297 = @func_5438() /* ty=Tensor[(900), float32] */;
  (%1295, %1296, %1297)
}

def @func_12783() -> Tensor[(1, 10, 13), float64] {
  %1298 = @func_9951() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %1298.1
}

def @func_10598() -> (Tensor[(?, 10, 13), uint32],) {
  %1299 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1300 = %1299.0;
  (%1300,)
}

def @func_6051() -> Tensor[(16, 2, 14), float64] {
  %1301 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1302 = %1301.0;
  %1303 = cast(%1302, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %1304 = sin(%1303) /* ty=Tensor[(16, 2, 14), float32] */;
  %1305 = cast(%1304, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  atanh(%1305) /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_6746(%var_6739: Tensor[(4, 14, 1), float64]) -> (Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) {
  %1306 = cast(%var_6739, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
  %1307 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1308 = acos(%1306) /* ty=Tensor[(4, 14, 1), float64] */;
  %1309 = %1307.0;
  (%1308, %1309)
}

def @func_17150() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  %1310 = @func_10110() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1311 = @func_12737() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1312 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %1313 = %1310.0;
  %1314 = %1311.0;
  %1315 = %1312.4;
  (%1313, %1314, %1315)
}

def @func_17814() -> (Tensor[(1, 10, 13), float64],) {
  %1316 = @func_7279() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %1317 = %1316.1;
  (%1317,)
}

def @func_4863() -> (Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), float64]) {
  %1318 = @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %1319 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1320 = %1319.3;
  %1321 = cast(%1320, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %1322 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1323 = %1322.0;
  %1324 = cast(%1323, dtype="float64") /* ty=Tensor[(?, 10, 13), float64] */;
  %1325 = shape_of(%1320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1326 = cast(%1320, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %1327 = dyn.reshape(%1324, %1325, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1328 = %1318.0;
  %1329 = atanh(%1321) /* ty=Tensor[(1, 10, 13), float64] */;
  %1330 = floor_divide(%1326, %1327) /* ty=Tensor[(?, 10, 13), float64] */;
  (%1328, %1329, %1330)
}

def @func_13476() -> (Tensor[(1, 10, 13), float32],) {
  %1331 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1332 = %1331.1;
  (%1332,)
}

def @func_16922() -> (Tensor[(15, 6, 11), float64],) {
  %1333 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
  %1334 = acosh(%1333) /* ty=Tensor[(15, 6, 11), float64] */;
  (%1334,)
}

def @func_2704() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) {
  %1335 = @func_1982() /* ty=(Tensor[(130), float32],) */;
  %1336 = cast(meta[relay.Constant][42] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %1337 = %1335.0;
  %1338 = cast(%1337, dtype="float32") /* ty=Tensor[(130), float32] */;
  %1339 = reshape(%1336, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %1340 = reshape(%1338, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %1341 = @func_934(%1339, %1340) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %1342 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1343 = cast(meta[relay.Constant][43] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1344 = reshape(%1343, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %1345 = @func_1163(%1344) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
  %1346 = %1341.1;
  %1347 = %1342.0;
  %1348 = %1345.0;
  (%1337, %1346, meta[relay.Constant][42] /* ty=Tensor[(432), float32] */, %1347, %1348, meta[relay.Constant][43] /* ty=Tensor[(900), float32] */)
}

def @func_11921(%var_11916: Tensor[(11, 10, 13), uint32]) -> Tensor[(11, 10, 13), bool] {
  %1349 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %1350 = cast(%1349, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %1351 = cast(%var_11916, dtype="bool") /* ty=Tensor[(11, 10, 13), bool] */;
  less(%1350, %1351) /* ty=Tensor[(11, 10, 13), bool] */
}

def @func_11416() -> (Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  %1352 = @func_8265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1353 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1354 = %1352.0;
  %1355 = @func_10301() /* ty=Tensor[(?, 10, 13), float64] */;
  %1356 = %1353.0;
  (%1354, %1355, %1356)
}

def @func_6819() -> (Tensor[(3, 9, 16), float32], Tensor[(16, 2, 14), float64]) {
  %1357 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %1358 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %1359 = %1357.3;
  %1360 = %1358.2;
  (%1359, %1360)
}

def @func_6092() -> Tensor[(16, 2, 14), float32] {
  @func_1215() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_4627(%var_4619: Tensor[(7, 6, 13), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), bool], Tensor[(15, 5, 12), float64]) {
  %1361 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %1362 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %1363 = %1362.0;
  %1364 = cast(%var_4619, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %1365 = shape_of(%1363, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1366 = cast(%1363, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %1367 = dyn.reshape(%1364, %1365, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1368 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %1369 = %1361.0;
  %1370 = greater_equal(%1366, %1367) /* ty=Tensor[(7, 6, 13), bool] */;
  %1371 = %1368.1;
  (%1369, %1370, %1371)
}

def @func_10110() -> (Tensor[(16, 2, 14), float32],) {
  %1372 = @func_6092() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1372,)
}

def @func_15881(%var_15869: Tensor[(7, 6, 13), float64]) -> Tensor[(7, 6, 13), float32] {
  %1373 = @func_11749() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %1374 = %1373.0;
  %1375 = cast(%var_15869, dtype="int16") /* ty=Tensor[(7, 6, 13), int16] */;
  %1376 = shape_of(%1374, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1377 = cast(%1374, dtype="int16") /* ty=Tensor[(7, 6, 13), int16] */;
  %1378 = dyn.reshape(%1375, %1376, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1379 = bitwise_xor(%1377, %1378) /* ty=Tensor[(7, 6, 13), int16] */;
  %1380 = cast(%1379, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  atan(%1380) /* ty=Tensor[(7, 6, 13), float32] */
}

def @func_11142() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32]) {
  %1381 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %1382 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1383 = %1381.1;
  %1384 = %1382.1;
  (%1383, %1384)
}

def @func_14070() -> (Tensor[(16, 2, 14), float32],) {
  %1385 = @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %1386 = %1385.0;
  (%1386,)
}

def @func_16616() -> (Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(900), float32]) {
  %1387 = @func_4863() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), float64]) */;
  %1388 = cast(meta[relay.Constant][44] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1389 = reshape(%1388, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %1390 = @func_3082(%1389) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */;
  %1391 = %1387.1;
  %1392 = %1390.1;
  (%1391, %1392, meta[relay.Constant][44] /* ty=Tensor[(900), float32] */)
}

def @func_17729(%var_17726: Tensor[(1, 105), bool], %var_17727: Tensor[(1170), float64]) -> (Tensor[(130), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 105), bool], Tensor[(1170), float64]) {
  %1393 = @func_12703() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) */;
  %1394 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %1395 = cast(%var_17726, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
  %1396 = cast(%var_17727, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %1397 = reshape(%1395, newshape=[105]) /* ty=Tensor[(105), bool] */;
  %1398 = reshape(%1396, newshape=[9, 10, 13]) /* ty=Tensor[(9, 10, 13), float64] */;
  %1399 = @func_15781(%1397, %1398) /* ty=(Tensor[(2, 14, 9), float64], Tensor[(900), float32], Tensor[(105), bool], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(9, 10, 13), int8]) */;
  %1400 = %1393.1;
  %1401 = %1394.1;
  %1402 = %1399.3;
  (%1400, %1401, %1402, %var_17726, %var_17727)
}

def @func_17195(%var_17171: Tensor[(7, 6, 13), float64]) -> (Tensor[(7, 6, 13), bool],) {
  %1403 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %1404 = %1403.0;
  %1405 = cast(%var_17171, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %1406 = shape_of(%1404, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1407 = cast(%1404, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %1408 = dyn.reshape(%1405, %1406, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1409 = logical_and(%1407, %1408) /* ty=Tensor[(7, 6, 13), bool] */;
  (%1409,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_13530() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  @func_13528() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */
}

def @func_18053(%var_18051: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), uint64], Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  @func_18050(%var_18051) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), uint64], Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_4896(%var_4894: Tensor[(13, 8, 9), bool], %var_4895: Tensor[(13, 8, 9), bool]) -> (Tensor[(13, 8, 9), bool],) {
  %5 = fn (%var_4884: Tensor[(13, 8, 9), bool], %var_4885: Tensor[(13, 8, 9), bool]) -> (Tensor[(13, 8, 9), bool],) {
    %0 = cast(%var_4885, dtype="bool") /* ty=Tensor[(13, 8, 9), bool] */;
    %1 = shape_of(%var_4884, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_4884, dtype="bool") /* ty=Tensor[(13, 8, 9), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = logical_and(%2, %3) /* ty=Tensor[(13, 8, 9), bool] */;
    (%4,)
  };
  %5(%var_4894, %var_4895) /* ty=(Tensor[(13, 8, 9), bool],) */
}

def @func_13640() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) {
  %10 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) {
    %6 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
    %7 = %6.0;
    %8 = @func_12234() /* ty=Tensor[(16, 2, 14), float64] */;
    %9 = @func_11973() /* ty=Tensor[(16, 2, 14), float32] */;
    (%7, %8, %9)
  };
  %10() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) */
}

def @func_13569() -> Tensor[(16, 2, 14), float64] {
  %11 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %11.1
}

def @func_7554() -> (Tensor[(1, 10, 13), float64],) {
  @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_6452() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */
}

def @func_6848() -> (Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) {
  %16 = fn () -> (Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) {
    %12 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 6, 6), float32] */, dtype="float32") /* ty=Tensor[(1, 6, 6), float32] */;
    %13 = @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %14 = erf(%12) /* ty=Tensor[(1, 6, 6), float32] */;
    %15 = %13.0;
    (%14, %15)
  };
  %16() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_9312() -> (Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) {
  @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */
}

def @func_1180() -> Tensor[(16, 2, 14), float64] {
  @func_1178() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_14072() -> (Tensor[(16, 2, 14), float32],) {
  @func_14070() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_8969() -> (Tensor[(1, 10, 13), float64], Tensor[(7, 6, 13), float64]) {
  %17 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %18 = @func_8528() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %19 = %17.0;
  %20 = %18.0;
  (%19, %20)
}

def @func_1702(%var_1652: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) {
  %21 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %22 = cast(%var_1652, dtype="uint8") /* ty=Tensor[(16, 2, 14), uint8] */;
  %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
  %24 = cast(%21, dtype="uint8") /* ty=Tensor[(16, 2, 14), uint8] */;
  %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %27 = reshape(%26, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %28 = @func_1163(%27) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
  %29 = bitwise_and(%24, %25) /* ty=Tensor[(16, 2, 14), uint8] */;
  %30 = %28.0;
  (%29, %30, meta[relay.Constant][1] /* ty=Tensor[(900), float32] */)
}

def @func_8528() -> (Tensor[(7, 6, 13), float64],) {
  %31 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
  (%31,)
}

def @func_4413() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  %64 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
    %32 = @func_3787() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %33 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %34 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
    %35 = cast(%34, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
    %36 = acos(%35) /* ty=Tensor[(1, 10, 13), float32] */;
    %37 = cast(%34, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
    %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%36, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %41 = power(%39, %40) /* ty=Tensor[(?, 10, 13), float32] */;
    %42 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 10, 13), float32] */, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
    %43 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %44 = cast(%41, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
    %45 = dyn.reshape(%42, %43, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %46 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %47 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
    %48 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %49 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %50 = %49.0;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
    %52 = shape_of(%41, dtype="int32") /* ty=Tensor[(3), int32] */;
    %53 = cast(%41, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
    %54 = dyn.reshape(%51, %52, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %55 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %56 = %32.0;
    %57 = %33.2;
    %58 = not_equal(%44, %45) /* ty=Tensor[(?, 10, 13), bool] */;
    %59 = %46.0;
    %60 = %47.0;
    %61 = %48.1;
    %62 = mod(%53, %54) /* ty=Tensor[(?, 10, 13), float32] */;
    %63 = %55.0;
    (%56, %57, %58, %59, %60, %61, %62, %63)
  };
  %64() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_5627(%var_5591: Tensor[(1, 432), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(15, 5, 12), float64], Tensor[(1, 432), float32], Tensor[(?, 10, 13), bool]) {
  %65 = @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %66 = @func_2704() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %67 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %68 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %69 = cast(%var_5591, dtype="float32") /* ty=Tensor[(1, 432), float32] */;
  %70 = reshape(%69, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %71 = @func_3434(%70) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %72 = @func_2618() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %73 = %72.0;
  %74 = cast(%73, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %75 = cos(%74) /* ty=Tensor[(1, 10, 13), float32] */;
  %76 = cast(%73, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %77 = shape_of(%75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %78 = cast(%75, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
  %79 = dyn.reshape(%76, %77, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %80 = %65.0;
  %81 = %66.1;
  %82 = %67.0;
  %83 = %68.1;
  %84 = %71.0;
  %85 = greater_equal(%78, %79) /* ty=Tensor[(?, 10, 13), bool] */;
  (%80, %81, %82, %83, %84, %var_5591, %85)
}

def @func_10110() -> (Tensor[(16, 2, 14), float32],) {
  %86 = @func_6092() /* ty=Tensor[(16, 2, 14), float32] */;
  (%86,)
}

def @func_7281() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  @func_7279() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_5650() -> Tensor[(16, 2, 14), float64] {
  %87 = @func_4038() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %87.0
}

def @func_13122(%var_13119: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), bool], Tensor[(130), float32], Tensor[(130), float32], Tensor[(14, 13, 10), uint32], Tensor[(1820), uint32], Tensor[(390), float64]) {
  %88 = @func_8382() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) */;
  %89 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %90 = @func_11688() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %91 = cast(meta[relay.Constant][3] /* ty=Tensor[(1820), uint32] */, dtype="uint32") /* ty=Tensor[(1820), uint32] */;
  %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(1820), uint32] */, dtype="uint32") /* ty=Tensor[(1820), uint32] */;
  %93 = cast(%var_13119, dtype="float64") /* ty=Tensor[(390), float64] */;
  %94 = reshape(%91, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), uint32] */;
  %95 = reshape(%92, newshape=[14, 13, 10]) /* ty=Tensor[(14, 13, 10), uint32] */;
  %96 = reshape(%93, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %97 = @func_5703(%94, %95, %96) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(14, 13, 10), uint32], Tensor[(14, 13, 10), int8]) */;
  %98 = %88.1;
  %99 = %89.0;
  %100 = %90.1;
  %101 = %97.2;
  (%98, %99, %100, %101, meta[relay.Constant][3] /* ty=Tensor[(1820), uint32] */, %var_13119)
}

def @func_5129() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  %113 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
    %102 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
    %103 = @func_2618() /* ty=(Tensor[(1, 10, 13), float32],) */;
    %104 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %105 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
    %106 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
    %107 = %102.1;
    %108 = %103.0;
    %109 = %104.0;
    %110 = %105.2;
    %111 = %106.0;
    %112 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
    (%107, %108, %109, %110, %111, %112)
  };
  %113() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_11293() -> (Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32]) {
  @func_11291() /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32]) */
}

def @func_15073(%var_15046: Tensor[(10, 10, 13), float64]) -> (Tensor[(?, 10, 13), float32], Tensor[(10, 10, 13), float32], Tensor[(16, 2, 14), float64]) {
  %114 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %115 = @func_13915() /* ty=Tensor[(1, 10, 13), float64] */;
  %116 = cast(%115, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %117 = cast(%var_15046, dtype="float32") /* ty=Tensor[(10, 10, 13), float32] */;
  %118 = @func_3787() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %119 = %114.0;
  %120 = mod(%116, %117) /* ty=Tensor[(10, 10, 13), float32] */;
  %121 = %118.0;
  (%119, %120, %121)
}

def @func_14150() -> Tensor[(?, 10, 13), uint32] {
  %122 = fn () -> Tensor[(?, 10, 13), uint32] {
    @func_10913() /* ty=Tensor[(?, 10, 13), uint32] */
  };
  %122() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_15785(%var_15783: Tensor[(105), bool], %var_15784: Tensor[(9, 10, 13), float64]) -> (Tensor[(2, 14, 9), float64], Tensor[(900), float32], Tensor[(105), bool], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(9, 10, 13), int8]) {
  @func_15781(%var_15783, %var_15784) /* ty=(Tensor[(2, 14, 9), float64], Tensor[(900), float32], Tensor[(105), bool], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(9, 10, 13), int8]) */
}

def @func_17251(%var_17248: Tensor[(7, 8, 8), float32], %var_17249: Tensor[(7, 8, 8), float32], %var_17250: Tensor[(7, 8, 8), float32]) -> (Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(7, 8, 8), uint64]) {
  @func_17246(%var_17248, %var_17249, %var_17250) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(7, 8, 8), uint64]) */
}

def @func_16125() -> (Tensor[(7, 6, 13), float64],) {
  @func_16123() /* ty=(Tensor[(7, 6, 13), float64],) */
}

def @func_17018() -> Tensor[(16, 2, 14), float64] {
  @func_17016() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_18451(%var_18449: Tensor[(6, 10, 13), float64]) -> (Tensor[(6, 10, 13), float64],) {
  @func_18448(%var_18449) /* ty=(Tensor[(6, 10, 13), float64],) */
}

def @func_2240() -> (Tensor[(?, 10, 13), uint32],) {
  @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_17347() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float32]) {
  @func_17345() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_9310() -> (Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) {
  %123 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %126 = reshape(%125, newshape=[4, 112]) /* ty=Tensor[(4, 112), float64] */;
  %127 = @func_5862(%126) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) */;
  %128 = %127.2;
  (%124, %128)
}

def @func_9622() -> Tensor[(900), float32] {
  %130 = fn () -> Tensor[(900), float32] {
    %129 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
    %129.2
  };
  %130() /* ty=Tensor[(900), float32] */
}

def @func_10889() -> (Tensor[(16, 2, 14), float64],) {
  %131 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
  (%131,)
}

def @func_17663() -> (Tensor[(6, 14, ?), bool],) {
  %132 = @func_5960() /* ty=(Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) */;
  %133 = %132.0;
  (%133,)
}

def @func_10435() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %137 = fn () -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
    %134 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
    %135 = %134.0;
    %136 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
    (%135, %136)
  };
  %137() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */
}

def @func_7564() -> (Tensor[(?, 10, 13), uint32],) {
  %140 = fn () -> (Tensor[(?, 10, 13), uint32],) {
    %138 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %139 = %138.5;
    (%139,)
  };
  %140() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_4272() -> Tensor[(1, 10, 13), float64] {
  %141 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %141.0
}

def @func_5439() -> Tensor[(900), float32] {
  %143 = fn () -> Tensor[(900), float32] {
    %142 = @func_2704() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
    %142.5
  };
  %143() /* ty=Tensor[(900), float32] */
}

def @func_8283(%var_8281: Tensor[(448), float64]) -> (Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) {
  @func_8280(%var_8281) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) */
}

def @func_7355() -> (Tensor[(?, 10, 13), uint32],) {
  %145 = fn () -> (Tensor[(?, 10, 13), uint32],) {
    %144 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
    (%144,)
  };
  %145() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_7418() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  @func_7416() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_9583() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) {
  @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */
}

def @func_6213() -> (Tensor[(1, 10, 13), float64],) {
  @func_6211() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_10962(%var_10956: Tensor[(130), float32]) -> Tensor[(130), bool] {
  %146 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %147 = %146.1;
  %148 = cast(%var_10956, dtype="bool") /* ty=Tensor[(130), bool] */;
  %149 = shape_of(%147, dtype="int32") /* ty=Tensor[(1), int32] */;
  %150 = cast(%147, dtype="bool") /* ty=Tensor[(130), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?), bool] */;
  logical_or(%150, %151) /* ty=Tensor[(130), bool] */
}

def @func_12837() -> Tensor[(16, 2, 14), float64] {
  %152 = @func_10863() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) */;
  %152.0
}

def @func_8773() -> Tensor[(?, 10, 13), uint32] {
  @func_8771() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_16464() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) {
  %153 = @func_13974() /* ty=(Tensor[(1, 10, 13), float32],) */;
  %154 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
  %155 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %156 = %153.0;
  %157 = %154.1;
  %158 = %155.0;
  (%156, %157, %158)
}

def @func_12527(%var_12505: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) {
  %159 = @func_10203() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %160 = cast(%var_12505, dtype="float32") /* ty=Tensor[(900), float32] */;
  %161 = reshape(%160, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %162 = @func_9221(%161) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %163 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %164 = %159.0;
  %165 = %162.1;
  %166 = %163.1;
  (%164, %165, %var_12505, %166)
}

def @func_5652() -> Tensor[(16, 2, 14), float64] {
  @func_5650() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_6748(%var_6747: Tensor[(4, 14, 1), float64]) -> (Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) {
  %171 = fn (%var_6739: Tensor[(4, 14, 1), float64]) -> (Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) {
    %167 = cast(%var_6739, dtype="float64") /* ty=Tensor[(4, 14, 1), float64] */;
    %168 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %169 = acos(%167) /* ty=Tensor[(4, 14, 1), float64] */;
    %170 = %168.0;
    (%169, %170)
  };
  %171(%var_6747) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_7790() -> (Tensor[(1, 10, 13), float64],) {
  %173 = fn () -> (Tensor[(1, 10, 13), float64],) {
    %172 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
    (%172,)
  };
  %173() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_14441() -> (Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32]) {
  %174 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
  %175 = %174.3;
  %176 = @func_11667() /* ty=Tensor[(1, 10, 13), float32] */;
  (%175, %176)
}

def @func_12424() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) {
  %177 = @func_2201() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */;
  %178 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %179 = cast(meta[relay.Constant][4] /* ty=Tensor[(390), float64] */, dtype="float64") /* ty=Tensor[(390), float64] */;
  %180 = reshape(%179, newshape=[390]) /* ty=Tensor[(390), float64] */;
  %181 = @func_4225(%180) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(4, 112), float32], Tensor[(13, 15, 2), float32]) */;
  %182 = @func_3721() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %183 = %177.1;
  %184 = %178.0;
  %185 = %181.1;
  %186 = %182.0;
  (%183, %184, %185, meta[relay.Constant][4] /* ty=Tensor[(390), float64] */, %186)
}

def @func_3906() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %187 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %188 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %189 = %187.0;
  %190 = %188.0;
  (%189, %190)
}

def @func_11668() -> Tensor[(1, 10, 13), float32] {
  %192 = fn () -> Tensor[(1, 10, 13), float32] {
    %191 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
    %191.0
  };
  %192() /* ty=Tensor[(1, 10, 13), float32] */
}

def @func_5284() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) {
  @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */
}

def @func_7528() -> Tensor[(16, 2, 14), float64] {
  %193 = fn () -> Tensor[(16, 2, 14), float64] {
    @func_1178() /* ty=Tensor[(16, 2, 14), float64] */
  };
  %193() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_1265() -> (Tensor[(16, 2, 14), float64],) {
  %194 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  (%194,)
}

def @func_3908() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */
}

def @func_16617() -> (Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(900), float32]) {
  %201 = fn () -> (Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(900), float32]) {
    %195 = @func_4863() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), float64]) */;
    %196 = cast(meta[relay.Constant][5] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %197 = reshape(%196, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %198 = @func_3082(%197) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */;
    %199 = %195.1;
    %200 = %198.1;
    (%199, %200, meta[relay.Constant][5] /* ty=Tensor[(900), float32] */)
  };
  %201() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(900), float32]) */
}

def @func_17016() -> Tensor[(16, 2, 14), float64] {
  @func_12837() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_15214() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  %207 = fn () -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
    %202 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %203 = @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
    %204 = %202.1;
    %205 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
    %206 = %203.1;
    (%204, %205, %206)
  };
  %207() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_14201() -> (Tensor[(16, 2, 14), float64],) {
  %210 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %208 = @func_6947() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */;
    %209 = %208.0;
    (%209,)
  };
  %210() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_11425() -> Tensor[(?, 10, 13), float64] {
  %211 = fn () -> Tensor[(?, 10, 13), float64] {
    @func_10301() /* ty=Tensor[(?, 10, 13), float64] */
  };
  %211() /* ty=Tensor[(?, 10, 13), float64] */
}

def @func_1577() -> (Tensor[(130), float32],) {
  %212 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %213 = %212.2;
  (%213,)
}

def @func_16887() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  %214 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %215 = @func_7243() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %216 = %214.2;
  %217 = %215.0;
  (%216, %217)
}

def @func_1565() -> Tensor[(1, 10, 13), float64] {
  %218 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %218.0
}

def @func_13695() -> Tensor[(1, 10, 13), float64] {
  @func_3274() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_934(%var_895: Tensor[(3, 9, 16), float32], %var_899: Tensor[(130), float32]) -> (Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) {
  %219 = cast(%var_895, dtype="float32") /* ty=Tensor[(3, 9, 16), float32] */;
  %220 = cast(%var_899, dtype="float32") /* ty=Tensor[(130), float32] */;
  %221 = reshape(%220, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %222 = @func_233(%221) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %223 = cast(%var_899, dtype="float32") /* ty=Tensor[(130), float32] */;
  %224 = reshape(%223, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %225 = @func_233(%224) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %226 = %222.0;
  %227 = cast(%226, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %228 = reshape(%227, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %229 = @func_233(%228) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %230 = exp(%219) /* ty=Tensor[(3, 9, 16), float32] */;
  %231 = %225.0;
  %232 = %229.0;
  (%230, %226, %var_899, %231, %232)
}

def @func_13125(%var_13123: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), bool], Tensor[(130), float32], Tensor[(130), float32], Tensor[(14, 13, 10), uint32], Tensor[(1820), uint32], Tensor[(390), float64]) {
  @func_13122(%var_13123) /* ty=(Tensor[(16, 2, 14), bool], Tensor[(130), float32], Tensor[(130), float32], Tensor[(14, 13, 10), uint32], Tensor[(1820), uint32], Tensor[(390), float64]) */
}

def @func_8614() -> (Tensor[(?, 10, 13), bool], Tensor[(900), float32], Tensor[(900), float32]) {
  %247 = fn () -> (Tensor[(?, 10, 13), bool], Tensor[(900), float32], Tensor[(900), float32]) {
    %233 = @func_7354() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %234 = %233.0;
    %235 = cast(%234, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
    %236 = sigmoid(%235) /* ty=Tensor[(?, 10, 13), float32] */;
    %237 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
    %238 = cast(%237, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
    %239 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
    %240 = cast(%236, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
    %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %242 = cast(meta[relay.Constant][6] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %243 = reshape(%242, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %244 = @func_3082(%243) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */;
    %245 = less(%240, %241) /* ty=Tensor[(?, 10, 13), bool] */;
    %246 = %244.1;
    (%245, %246, meta[relay.Constant][6] /* ty=Tensor[(900), float32] */)
  };
  %247() /* ty=(Tensor[(?, 10, 13), bool], Tensor[(900), float32], Tensor[(900), float32]) */
}

def @func_6077() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float64]) {
  %248 = @func_5960() /* ty=(Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) */;
  %249 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
  %250 = %248.1;
  %251 = %249.0;
  (%250, %251)
}

def @func_13282(%var_13274: uint32) -> Tensor[(16, 7, 2), float64] {
  %252 = cast(%var_13274, dtype="uint32") /* ty=uint32 */;
  %253 = cast(meta[relay.Constant][7] /* ty=Tensor[(16, 7, 2), uint32] */, dtype="uint32") /* ty=Tensor[(16, 7, 2), uint32] */;
  %254 = minimum(%252, %253) /* ty=Tensor[(16, 7, 2), uint32] */;
  %255 = cast(%254, dtype="float64") /* ty=Tensor[(16, 7, 2), float64] */;
  cos(%255) /* ty=Tensor[(16, 7, 2), float64] */
}

def @func_6313() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) {
  %261 = fn () -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) {
    %256 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %257 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
    %258 = %256.1;
    %259 = %257.0;
    %260 = @func_5438() /* ty=Tensor[(900), float32] */;
    (%258, %259, %260)
  };
  %261() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */
}

def @func_18282(%var_18281: Tensor[(1300), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(1300), uint32], Tensor[(1300), uint32], Tensor[(16, 2, 14), float64]) {
  %269 = fn (%var_18266: Tensor[(1300), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(1300), uint32], Tensor[(1300), uint32], Tensor[(16, 2, 14), float64]) {
    %262 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
    %263 = cast(%var_18266, dtype="uint32") /* ty=Tensor[(1300), uint32] */;
    %264 = reshape(%263, newshape=[1300]) /* ty=Tensor[(1300), uint32] */;
    %265 = @func_11599(%264) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(10, 10, 13), int32], Tensor[(1300), uint32], Tensor[(1, 10, 13), float64]) */;
    %266 = %262.0;
    %267 = %265.2;
    %268 = @func_7527() /* ty=Tensor[(16, 2, 14), float64] */;
    (%266, %267, %var_18266, %268)
  };
  %269(%var_18281) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1300), uint32], Tensor[(1300), uint32], Tensor[(16, 2, 14), float64]) */
}

def @func_14194() -> (Tensor[(?, 10, 13), float32],) {
  @func_14192() /* ty=(Tensor[(?, 10, 13), float32],) */
}

def @func_1835() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) {
  @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */
}

def @func_3860() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %270 = @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %271 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %272 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %273 = %270.0;
  %274 = %271.3;
  (%272, %273, %274)
}

def @func_2873() -> (Tensor[(1, 10, 13), float64],) {
  %275 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %276 = %275.0;
  (%276,)
}

def @func_3533() -> Tensor[(16, 2, 14), float64] {
  %278 = fn () -> Tensor[(16, 2, 14), float64] {
    %277 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %277.2
  };
  %278() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_8771() -> Tensor[(?, 10, 13), uint32] {
  %279 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %279.0
}

def @func_14470(%var_14459: Tensor[(10, 6, 1), float32]) -> (Tensor[(10, 6, 1), float32],) {
  %280 = cast(%var_14459, dtype="float32") /* ty=Tensor[(10, 6, 1), float32] */;
  %281 = sin(%280) /* ty=Tensor[(10, 6, 1), float32] */;
  (%281,)
}

def @func_15493(%var_15490: Tensor[(1690), float64], %var_15491: Tensor[(432), float32], %var_15492: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(1690), float64], Tensor[(432), float32], Tensor[(390), float64]) {
  @func_15488(%var_15490, %var_15491, %var_15492) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(1690), float64], Tensor[(432), float32], Tensor[(390), float64]) */
}

def @func_15507() -> Tensor[(?, 10, 13), uint32] {
  %282 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %282.0
}

def @func_14005() -> (Tensor[(16, 2, 14), float64],) {
  @func_14003() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_18307() -> Tensor[(?, 10, 13), uint32] {
  @func_18305() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_3722() -> (Tensor[(16, 2, 14), float64],) {
  %285 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %283 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %284 = %283.0;
    (%284,)
  };
  %285() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_1520() -> (Tensor[(16, 2, 14), float64],) {
  %287 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %286 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
    (%286,)
  };
  %287() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_2852() -> (Tensor[(16, 2, 14), float32],) {
  @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_8806() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) {
  %292 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) {
    %288 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
    %289 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %290 = %288.0;
    %291 = %289.0;
    (%290, %291)
  };
  %292() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */
}

def @func_6525() -> Tensor[(16, 2, 14), float64] {
  @func_6523() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_11751() -> (Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) {
  @func_11749() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) */
}

def @func_14821() -> (Tensor[(16, 2, 14), float32],) {
  %295 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %293 = @func_10110() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %294 = %293.0;
    (%294,)
  };
  %295() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_13398(%var_13396: uint64, %var_13397: Tensor[(4, 13, 2), uint64]) -> (Tensor[(4, 13, 2), bool],) {
  %299 = fn (%var_13386: uint64, %var_13387: Tensor[(4, 13, 2), uint64]) -> (Tensor[(4, 13, 2), bool],) {
    %296 = cast(%var_13386, dtype="bool") /* ty=bool */;
    %297 = cast(%var_13387, dtype="bool") /* ty=Tensor[(4, 13, 2), bool] */;
    %298 = less_equal(%296, %297) /* ty=Tensor[(4, 13, 2), bool] */;
    (%298,)
  };
  %299(%var_13396, %var_13397) /* ty=(Tensor[(4, 13, 2), bool],) */
}

def @func_17631(%var_17629: Tensor[(13, 8, 1), uint32], %var_17630: Tensor[(13, 8, 13), uint32]) -> (Tensor[(13, 8, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(900), float32]) {
  %308 = fn (%var_17606: Tensor[(13, 8, 1), uint32], %var_17607: Tensor[(13, 8, 13), uint32]) -> (Tensor[(13, 8, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(900), float32]) {
    %300 = cast(%var_17606, dtype="uint32") /* ty=Tensor[(13, 8, 1), uint32] */;
    %301 = cast(%var_17607, dtype="uint32") /* ty=Tensor[(13, 8, 13), uint32] */;
    %302 = @func_5047() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %303 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
    %304 = maximum(%300, %301) /* ty=Tensor[(13, 8, 13), uint32] */;
    %305 = %302.0;
    %306 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
    %307 = %303.2;
    (%304, %305, %306, %307)
  };
  %308(%var_17629, %var_17630) /* ty=(Tensor[(13, 8, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(900), float32]) */
}

def @func_2952() -> (Tensor[(?, 10, 13), uint32],) {
  %309 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %310 = %309.1;
  (%310,)
}

def @func_17195(%var_17171: Tensor[(7, 6, 13), float64]) -> (Tensor[(7, 6, 13), bool],) {
  %311 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %312 = %311.0;
  %313 = cast(%var_17171, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %314 = shape_of(%312, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%312, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %317 = logical_and(%315, %316) /* ty=Tensor[(7, 6, 13), bool] */;
  (%317,)
}

def @func_4883() -> (Tensor[(16, 2, 14), float32],) {
  %319 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %318 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
    (%318,)
  };
  %319() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_7338() -> Tensor[(?, 10, 13), uint32] {
  @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_2497() -> (Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) {
  @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */
}

def @func_17050() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32]) {
  @func_17048() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_7368() -> Tensor[(16, 2, 14), float64] {
  %321 = fn () -> Tensor[(16, 2, 14), float64] {
    %320 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
    %320.0
  };
  %321() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_1369() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) {
  @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_2954() -> (Tensor[(?, 10, 13), uint32],) {
  @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_4432() -> Tensor[(16, 2, 14), float32] {
  %323 = fn () -> Tensor[(16, 2, 14), float32] {
    %322 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
    %322.0
  };
  %323() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_6450() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  %324 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %325 = @func_3721() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %326 = %324.0;
  %327 = %325.0;
  (%326, %327)
}

def @func_5049() -> (Tensor[(16, 2, 14), float64],) {
  @func_5047() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_10690() -> (Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  @func_10688() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_6607() -> (Tensor[(16, 2, 14), float32],) {
  @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_10301() -> Tensor[(?, 10, 13), float64] {
  %328 = @func_8771() /* ty=Tensor[(?, 10, 13), uint32] */;
  %329 = cast(%328, dtype="float64") /* ty=Tensor[(?, 10, 13), float64] */;
  asin(%329) /* ty=Tensor[(?, 10, 13), float64] */
}

def @func_8383() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) {
  %334 = fn () -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) {
    %330 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %331 = @func_2201() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */;
    %332 = %330.0;
    %333 = %331.0;
    (%332, %333)
  };
  %334() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) */
}

def @func_12475() -> Tensor[(16, 2, 14), float32] {
  %336 = fn () -> Tensor[(16, 2, 14), float32] {
    %335 = @func_2850() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %335.0
  };
  %336() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_1096() -> Tensor[(16, 2, 14), float64] {
  @func_1094() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_11903() -> (Tensor[(130), float32],) {
  %339 = fn () -> (Tensor[(130), float32],) {
    %337 = @func_1982() /* ty=(Tensor[(130), float32],) */;
    %338 = %337.0;
    (%338,)
  };
  %339() /* ty=(Tensor[(130), float32],) */
}

def @func_11199() -> Tensor[(16, 2, 14), float32] {
  %340 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %340.1
}

def @func_7244() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %345 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
    %341 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
    %342 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
    %343 = %341.0;
    %344 = %342.1;
    (%343, %344)
  };
  %345() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */
}

def @func_11513(%var_11511: Tensor[(12, 14, 10), float64], %var_11512: Tensor[(1, 448), float64]) -> (Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) {
  @func_11509(%var_11511, %var_11512) /* ty=(Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) */
}

def @func_5233(%var_5231: Tensor[(5, 78), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) {
  @func_5230(%var_5231) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) */
}

def @func_13791(%var_13790: Tensor[(10, 10, 13), uint32]) -> (Tensor[(10, 10, 13), float64],) {
  %351 = fn (%var_13774: Tensor[(10, 10, 13), uint32]) -> (Tensor[(10, 10, 13), float64],) {
    %346 = @func_4937() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) */;
    %347 = %346.3;
    %348 = cast(%347, dtype="float64") /* ty=Tensor[(?, 10, 13), float64] */;
    %349 = cast(%var_13774, dtype="float64") /* ty=Tensor[(10, 10, 13), float64] */;
    %350 = floor_divide(%348, %349) /* ty=Tensor[(10, 10, 13), float64] */;
    (%350,)
  };
  %351(%var_13790) /* ty=(Tensor[(10, 10, 13), float64],) */
}

def @func_11601(%var_11600: Tensor[(1300), uint32]) -> (Tensor[(16, 2, 14), float32], Tensor[(10, 10, 13), int32], Tensor[(1300), uint32], Tensor[(1, 10, 13), float64]) {
  %360 = fn (%var_11563: Tensor[(1300), uint32]) -> (Tensor[(16, 2, 14), float32], Tensor[(10, 10, 13), int32], Tensor[(1300), uint32], Tensor[(1, 10, 13), float64]) {
    %352 = @func_5518() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
    %353 = cast(%var_11563, dtype="uint32") /* ty=Tensor[(1300), uint32] */;
    %354 = reshape(%353, newshape=[10, 10, 13]) /* ty=Tensor[(10, 10, 13), uint32] */;
    %355 = @func_6272(%354) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(10, 10, 13), int32], Tensor[(16, 2, 14), float64]) */;
    %356 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %357 = %352.0;
    %358 = %355.2;
    %359 = %356.0;
    (%357, %358, %var_11563, %359)
  };
  %360(%var_11600) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(10, 10, 13), int32], Tensor[(1300), uint32], Tensor[(1, 10, 13), float64]) */
}

def @func_4938() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) {
  %366 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) {
    %361 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
    %362 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
    %363 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
    %364 = %361.0;
    %365 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
    (%362, %363, %364, %365)
  };
  %366() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) */
}

def @func_9090(%var_9088: Tensor[(56), float64]) -> (Tensor[(11, 11, 12), float32], Tensor[(4, 14, 1), float64], Tensor[(56), float64], Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), bool], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) {
  @func_9087(%var_9088) /* ty=(Tensor[(11, 11, 12), float32], Tensor[(4, 14, 1), float64], Tensor[(56), float64], Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), bool], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_8267() -> (Tensor[(16, 2, 14), float64],) {
  @func_8265() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_8504() -> (Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) {
  %406 = fn () -> (Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) {
    %367 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
    %368 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
    %369 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
    %370 = %369.1;
    %371 = cast(%370, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
    %372 = sigmoid(%371) /* ty=Tensor[(1, 6, 6), float64] */;
    %373 = cast(%370, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
    %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%372, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %377 = @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */;
    %378 = cast(meta[relay.Constant][8] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %379 = reshape(%378, newshape=[1, 432]) /* ty=Tensor[(1, 432), float32] */;
    %380 = @func_5627(%379) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(15, 5, 12), float64], Tensor[(1, 432), float32], Tensor[(?, 10, 13), bool]) */;
    %381 = %380.2;
    %382 = cast(%381, dtype="bool") /* ty=Tensor[(1, 10, 13), bool] */;
    %383 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%377, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %386 = cast(%370, dtype="uint16") /* ty=Tensor[(1, 6, 6), uint16] */;
    %387 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
    %388 = cast(%372, dtype="uint16") /* ty=Tensor[(1, 6, 6), uint16] */;
    %389 = dyn.reshape(%386, %387, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %390 = bitwise_xor(%388, %389) /* ty=Tensor[(?, 6, 6), uint16] */;
    %391 = cast(%372, dtype="int64") /* ty=Tensor[(1, 6, 6), int64] */;
    %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%390, dtype="int64") /* ty=Tensor[(?, 6, 6), int64] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %395 = @func_8382() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), bool]) */;
    %396 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %397 = @func_5650() /* ty=Tensor[(16, 2, 14), float64] */;
    %398 = %367.0;
    %399 = %368.2;
    %400 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
    %401 = mod(%375, %376) /* ty=Tensor[(?, 6, 6), float64] */;
    %402 = less_equal(%384, %385) /* ty=Tensor[(?, 10, 13), bool] */;
    %403 = add(%393, %394) /* ty=Tensor[(?, 6, 6), int64] */;
    %404 = %395.1;
    %405 = %396.1;
    (meta[relay.Constant][8] /* ty=Tensor[(432), float32] */, %397, %398, %399, %400, %401, %402, %403, %404, %405)
  };
  %406() /* ty=(Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) */
}

def @func_13697() -> Tensor[(1, 10, 13), float64] {
  @func_13695() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_13285(%var_13283: uint32) -> Tensor[(16, 7, 2), float64] {
  @func_13282(%var_13283) /* ty=Tensor[(16, 7, 2), float64] */
}

def @func_10598() -> (Tensor[(?, 10, 13), uint32],) {
  %407 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %408 = %407.0;
  (%408,)
}

def @func_12839() -> Tensor[(16, 2, 14), float64] {
  @func_12837() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_7416() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %409 = @func_7279() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %410 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
  %411 = @func_6092() /* ty=Tensor[(16, 2, 14), float32] */;
  %412 = %409.2;
  %413 = %410.0;
  (%411, %412, %413)
}

def @func_4746(%var_4744: Tensor[(448), float32]) -> (Tensor[(130), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(448), float32]) {
  @func_4743(%var_4744) /* ty=(Tensor[(130), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(448), float32]) */
}

def @func_15710() -> (Tensor[(10, 10, 13), int16], Tensor[(1, 10, 13), float64]) {
  %414 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %415 = cast(%414, dtype="int16") /* ty=Tensor[(?, 10, 13), int16] */;
  %416 = cast(meta[relay.Constant][9] /* ty=Tensor[(10, 10, 13), uint32] */, dtype="int16") /* ty=Tensor[(10, 10, 13), int16] */;
  %417 = bitwise_and(%415, %416) /* ty=Tensor[(10, 10, 13), int16] */;
  %418 = @func_8205() /* ty=Tensor[(1, 10, 13), float64] */;
  (%417, %418)
}

def @func_9447(%var_9445: Tensor[(105), bool], %var_9446: Tensor[(900), float32]) -> (Tensor[(?, 10, 13), uint32], Tensor[(3, 7, 5), bool], Tensor[(105), bool], Tensor[(900), float32], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) {
  @func_9443(%var_9445, %var_9446) /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(3, 7, 5), bool], Tensor[(105), bool], Tensor[(900), float32], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_10660() -> (Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) {
  %423 = fn () -> (Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) {
    %419 = @func_4726() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */;
    %420 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %421 = %419.0;
    %422 = %420.0;
    (%421, %422)
  };
  %423() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */
}

def @func_6341(%var_6330: Tensor[(3, 7, 5), bool]) -> Tensor[(3, 7, 5), bool] {
  %424 = cast(meta[relay.Constant][10] /* ty=Tensor[(3, 7, 5), bool] */, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %425 = shape_of(%var_6330, dtype="int32") /* ty=Tensor[(3), int32] */;
  %426 = cast(%var_6330, dtype="bool") /* ty=Tensor[(3, 7, 5), bool] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%426, %427) /* ty=Tensor[(3, 7, 5), bool] */
}

def @func_12372() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(28, 2), float64]) {
  %428 = @func_11455() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %429 = cast(meta[relay.Constant][11] /* ty=Tensor[(28, 2), float64] */, dtype="float64") /* ty=Tensor[(28, 2), float64] */;
  %430 = reshape(%429, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %431 = @func_6746(%430) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) */;
  %432 = %428.0;
  %433 = %431.1;
  (%432, %433, meta[relay.Constant][11] /* ty=Tensor[(28, 2), float64] */)
}

def @func_4864() -> (Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), float64]) {
  %447 = fn () -> (Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), float64]) {
    %434 = @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
    %435 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %436 = %435.3;
    %437 = cast(%436, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
    %438 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %439 = %438.0;
    %440 = cast(%439, dtype="float64") /* ty=Tensor[(?, 10, 13), float64] */;
    %441 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %442 = cast(%436, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
    %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %444 = %434.0;
    %445 = atanh(%437) /* ty=Tensor[(1, 10, 13), float64] */;
    %446 = floor_divide(%442, %443) /* ty=Tensor[(?, 10, 13), float64] */;
    (%444, %445, %446)
  };
  %447() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), float64]) */
}

def @func_13740() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) {
  @func_13738() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) */
}

def @func_17419() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(900), float32], Tensor[(130), float32]) {
  @func_17417() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(900), float32], Tensor[(130), float32]) */
}

def @func_4039() -> (Tensor[(16, 2, 14), float64],) {
  %450 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %448 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %449 = %448.2;
    (%449,)
  };
  %450() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_12783() -> Tensor[(1, 10, 13), float64] {
  %451 = @func_9951() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %451.1
}

def @func_17733(%var_17731: Tensor[(1, 105), bool], %var_17732: Tensor[(1170), float64]) -> (Tensor[(130), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 105), bool], Tensor[(1170), float64]) {
  @func_17729(%var_17731, %var_17732) /* ty=(Tensor[(130), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 105), bool], Tensor[(1170), float64]) */
}

def @func_3275() -> Tensor[(1, 10, 13), float64] {
  %453 = fn () -> Tensor[(1, 10, 13), float64] {
    %452 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
    %452.2
  };
  %453() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_10914() -> Tensor[(?, 10, 13), uint32] {
  %455 = fn () -> Tensor[(?, 10, 13), uint32] {
    %454 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %454.0
  };
  %455() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_16123() -> (Tensor[(7, 6, 13), float64],) {
  %456 = @func_9396() /* ty=Tensor[(7, 6, 13), float64] */;
  (%456,)
}

def @func_2588(%var_2586: Tensor[(4, 112), float32]) -> (Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) {
  @func_2585(%var_2586) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */
}

def @func_9883() -> (Tensor[(?, 10, 13), uint32],) {
  %457 = @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */;
  (%457,)
}

def @func_8680() -> Tensor[(16, 2, 14), float32] {
  %458 = @func_7872() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %458.1
}

def @func_7336() -> Tensor[(?, 10, 13), uint32] {
  @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_4100() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */
}

def @func_9952() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %465 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
    %459 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
    %460 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %461 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %462 = %459.1;
    %463 = %460.0;
    %464 = %461.0;
    (%462, %463, %464)
  };
  %465() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_17961() -> (Tensor[(1, 10, 13), float32],) {
  %468 = fn () -> (Tensor[(1, 10, 13), float32],) {
    %466 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
    %467 = %466.1;
    (%467,)
  };
  %468() /* ty=(Tensor[(1, 10, 13), float32],) */
}

def @func_3128() -> Tensor[(16, 2, 14), float32] {
  %470 = fn () -> Tensor[(16, 2, 14), float32] {
    %469 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
    %469.0
  };
  %470() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_10192() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %474 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
    %471 = @func_9261() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
    %472 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
    %473 = %471.1;
    (%472, %473)
  };
  %474() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_4228(%var_4226: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(4, 112), float32], Tensor[(13, 15, 2), float32]) {
  @func_4225(%var_4226) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(4, 112), float32], Tensor[(13, 15, 2), float32]) */
}

def @func_8172() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %475 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
  %476 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  %477 = %475.0;
  (%476, %477)
}

def @func_6275(%var_6273: Tensor[(10, 10, 13), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(10, 10, 13), int32], Tensor[(16, 2, 14), float64]) {
  @func_6272(%var_6273) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(10, 10, 13), int32], Tensor[(16, 2, 14), float64]) */
}

def @func_5708(%var_5705: Tensor[(14, 13, 10), uint32], %var_5706: Tensor[(14, 13, 10), uint32], %var_5707: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(14, 13, 10), uint32], Tensor[(14, 13, 10), int8]) {
  @func_5703(%var_5705, %var_5706, %var_5707) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(14, 13, 10), uint32], Tensor[(14, 13, 10), int8]) */
}

def @func_8174() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_7627() -> Tensor[(7, 6, 13), float64] {
  @func_7625() /* ty=Tensor[(7, 6, 13), float64] */
}

def @func_9398() -> Tensor[(7, 6, 13), float64] {
  @func_9396() /* ty=Tensor[(7, 6, 13), float64] */
}

def @func_6079() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float64]) {
  @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_12327() -> Tensor[(3, 1, 1), float32] {
  @func_12325() /* ty=Tensor[(3, 1, 1), float32] */
}

def @func_13012() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  %484 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
    %478 = @func_7028() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
    %479 = @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
    %480 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
    %481 = %478.1;
    %482 = %479.2;
    %483 = %480.0;
    (%481, %482, %483)
  };
  %484() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_13738() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) {
  %485 = @func_2201() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */;
  %486 = %485.1;
  %487 = @func_11199() /* ty=Tensor[(16, 2, 14), float32] */;
  (%486, %487)
}

def @func_7966() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_13915() -> Tensor[(1, 10, 13), float64] {
  %488 = @func_8997() /* ty=(Tensor[(900), float32], Tensor[(1, 10, 13), float64]) */;
  %488.1
}

def @func_14802(%var_14776: Tensor[(1680, 1), float64]) -> (Tensor[(130), bool], Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(12, 14, 10), float64], Tensor[(1680, 1), float64], Tensor[(16, 2, 14), float64]) {
  %489 = @func_12703() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) */;
  %490 = @func_13011() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %491 = cast(%var_14776, dtype="float64") /* ty=Tensor[(1680, 1), float64] */;
  %492 = %490.0;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %494 = reshape(%491, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float64] */;
  %495 = reshape(%493, newshape=[1, 448]) /* ty=Tensor[(1, 448), float64] */;
  %496 = @func_11509(%494, %495) /* ty=(Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) */;
  %497 = @func_4937() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32]) */;
  %498 = %489.1;
  %499 = @func_11667() /* ty=Tensor[(1, 10, 13), float32] */;
  %500 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
  %501 = %496.0;
  %502 = %497.0;
  (%498, %499, %492, %500, %501, %var_14776, %502)
}

def @func_14965() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  @func_14963() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_14900() -> (Tensor[(16, 2, 14), float64],) {
  %504 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %503 = @func_12234() /* ty=Tensor[(16, 2, 14), float64] */;
    (%503,)
  };
  %504() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_16370(%var_16341: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64], Tensor[(900), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool]) {
  %505 = @func_14820() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %506 = cast(%var_16341, dtype="float32") /* ty=Tensor[(900), float32] */;
  %507 = reshape(%506, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %508 = @func_9221(%507) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %509 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %510 = @func_13670() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 7, 2), float64], uint32) */;
  %511 = @func_10244() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool]) */;
  %512 = %505.0;
  %513 = @func_13695() /* ty=Tensor[(1, 10, 13), float64] */;
  %514 = %508.2;
  %515 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
  %516 = %509.0;
  %517 = %510.0;
  %518 = %511.2;
  (%512, %513, %514, %var_16341, %515, %516, %517, %518)
}

def @func_16373(%var_16371: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64], Tensor[(900), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool]) {
  @func_16370(%var_16371) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64], Tensor[(900), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool]) */
}

def @func_3434(%var_3402: Tensor[(432), float32]) -> (Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) {
  %519 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %520 = cast(%var_3402, dtype="float32") /* ty=Tensor[(432), float32] */;
  %521 = cast(meta[relay.Constant][12] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %522 = reshape(%520, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %523 = reshape(%521, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %524 = @func_934(%522, %523) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %525 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %526 = %519.1;
  %527 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  %528 = %524.0;
  %529 = %525.0;
  (%526, %527, %528, %var_3402, meta[relay.Constant][12] /* ty=Tensor[(130), float32] */, %529)
}

def @func_17882() -> (Tensor[(1, 10, 13), float64],) {
  %530 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  (%530,)
}

def @func_2285() -> (Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_17112() -> Tensor[(900), float32] {
  %532 = fn () -> Tensor[(900), float32] {
    %531 = @func_17101() /* ty=(Tensor[(900), float32], Tensor[(900), float32]) */;
    %531.1
  };
  %532() /* ty=Tensor[(900), float32] */
}

def @func_5960() -> (Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) {
  %533 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 14, 1), float32] */, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %534 = erf(%533) /* ty=Tensor[(6, 14, 1), float32] */;
  %535 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 14, 1), float32] */, dtype="bool") /* ty=Tensor[(6, 14, 1), bool] */;
  %536 = shape_of(%534, dtype="int32") /* ty=Tensor[(3), int32] */;
  %537 = cast(%534, dtype="bool") /* ty=Tensor[(6, 14, 1), bool] */;
  %538 = dyn.reshape(%535, %536, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %539 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %540 = cast(%534, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %541 = sigmoid(%540) /* ty=Tensor[(6, 14, 1), float32] */;
  %542 = cast(%541, dtype="float64") /* ty=Tensor[(6, 14, 1), float64] */;
  %543 = log10(%542) /* ty=Tensor[(6, 14, 1), float64] */;
  %544 = cast(%534, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="float32") /* ty=Tensor[(6, 14, 1), float32] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %548 = cast(%543, dtype="float64") /* ty=Tensor[(6, 14, 1), float64] */;
  %549 = not_equal(%537, %538) /* ty=Tensor[(6, 14, ?), bool] */;
  %550 = %539.0;
  %551 = subtract(%546, %547) /* ty=Tensor[(6, 14, ?), float32] */;
  %552 = log(%548) /* ty=Tensor[(6, 14, 1), float64] */;
  (%549, %550, %551, %552)
}

def @func_14587() -> Tensor[(?, 10, 13), bool] {
  %554 = fn () -> Tensor[(?, 10, 13), bool] {
    %553 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %553.2
  };
  %554() /* ty=Tensor[(?, 10, 13), bool] */
}

def @func_13975() -> (Tensor[(1, 10, 13), float32],) {
  %557 = fn () -> (Tensor[(1, 10, 13), float32],) {
    %555 = @func_13476() /* ty=(Tensor[(1, 10, 13), float32],) */;
    %556 = %555.0;
    (%556,)
  };
  %557() /* ty=(Tensor[(1, 10, 13), float32],) */
}

def @func_18216() -> (Tensor[(16, 2, 14), float32],) {
  %560 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %558 = @func_7612() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %559 = %558.0;
    (%559,)
  };
  %560() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_17833() -> Tensor[(3, 9, 16), float32] {
  %562 = fn () -> Tensor[(3, 9, 16), float32] {
    %561 = @func_7180() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */;
    %561.3
  };
  %562() /* ty=Tensor[(3, 9, 16), float32] */
}

def @func_14192() -> (Tensor[(?, 10, 13), float32],) {
  %563 = @func_12042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %564 = %563.0;
  %565 = cast(meta[relay.Constant][14] /* ty=Tensor[(1, 10, 13), uint32] */, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %566 = shape_of(%564, dtype="int32") /* ty=Tensor[(3), int32] */;
  %567 = cast(%564, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %568 = dyn.reshape(%565, %566, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %569 = minimum(%567, %568) /* ty=Tensor[(?, 10, 13), float32] */;
  (%569,)
}

def @func_6720() -> (Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) {
  %574 = fn () -> (Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) {
    %570 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %571 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %572 = %570.6;
    %573 = %571.0;
    (%572, %573)
  };
  %574() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */
}

def @func_1457() -> (Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) {
  %575 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %576 = %575.1;
  %577 = cast(%576, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %578 = cast(%576, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %579 = asinh(%578) /* ty=Tensor[(1, 10, 13), float32] */;
  %580 = cast(%579, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
  %581 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %582 = cast(%576, dtype="uint32") /* ty=Tensor[(1, 10, 13), uint32] */;
  %583 = dyn.reshape(%580, %581, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %584 = atan(%577) /* ty=Tensor[(1, 10, 13), float64] */;
  %585 = maximum(%582, %583) /* ty=Tensor[(?, 10, 13), uint32] */;
  (%584, %585)
}

def @func_12530(%var_12528: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) {
  @func_12527(%var_12528) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_9673(%var_9671: Tensor[(432), float32], %var_9672: Tensor[(5, 10, 13), float64]) -> (Tensor[(5, 10, 13), uint16], Tensor[(1, 10, 13), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(5, 10, 13), bool], Tensor[(16, 2, 14), float64]) {
  @func_9669(%var_9671, %var_9672) /* ty=(Tensor[(5, 10, 13), uint16], Tensor[(1, 10, 13), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(5, 10, 13), bool], Tensor[(16, 2, 14), float64]) */
}

def @func_10688() -> (Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %586 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %587 = @func_7336() /* ty=Tensor[(?, 10, 13), uint32] */;
  %588 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  %589 = %586.0;
  (%587, %588, %589)
}

def @func_10583() -> (Tensor[(1, 10, 13), float64],) {
  @func_10581() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_3654() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) {
  %590 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %591 = cast(meta[relay.Constant][15] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %592 = reshape(%591, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %593 = @func_3434(%592) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %594 = %590.0;
  %595 = %593.4;
  (%594, %595, meta[relay.Constant][15] /* ty=Tensor[(432), float32] */)
}

def @func_11144() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32]) {
  @func_11142() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32]) */
}

def @func_1094() -> Tensor[(16, 2, 14), float64] {
  %596 = cast(meta[relay.Constant][16] /* ty=Tensor[(16, 2, 14), float64] */, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  erf(%596) /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_9281() -> (Tensor[(16, 2, 14), float32],) {
  %597 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %598 = %597.1;
  (%598,)
}

def @func_2283() -> (Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) {
  %599 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %600 = %599.0;
  %601 = cast(%600, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %602 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %603 = cast(%600, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %604 = log(%601) /* ty=Tensor[(1, 10, 13), float32] */;
  %605 = %602.1;
  %606 = exp(%603) /* ty=Tensor[(1, 10, 13), float64] */;
  (%604, %605, %606)
}

def @func_1939() -> (Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) {
  @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */
}

def @func_1303() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) {
  %612 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) {
    %607 = cast(meta[relay.Constant][17] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
    %608 = reshape(%607, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
    %609 = @func_233(%608) /* ty=(Tensor[(1, 10, 13), float32],) */;
    %610 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
    %611 = %609.0;
    (%610, %611, meta[relay.Constant][17] /* ty=Tensor[(130), float32] */)
  };
  %612() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */
}

def @func_10865() -> (Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) {
  @func_10863() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) */
}

def @func_11648(%var_11647: Tensor[(1, 105), bool]) -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  %625 = fn (%var_11627: Tensor[(1, 105), bool]) -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
    %613 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
    %614 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %615 = cast(%var_11627, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
    %616 = cast(meta[relay.Constant][18] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %617 = reshape(%615, newshape=[105]) /* ty=Tensor[(105), bool] */;
    %618 = reshape(%616, newshape=[900]) /* ty=Tensor[(900), float32] */;
    %619 = @func_9443(%617, %618) /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(3, 7, 5), bool], Tensor[(105), bool], Tensor[(900), float32], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) */;
    %620 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
    %621 = %613.0;
    %622 = %614.0;
    %623 = %619.3;
    %624 = %620.1;
    (%621, %622, %623, %var_11627, meta[relay.Constant][18] /* ty=Tensor[(900), float32] */, %624)
  };
  %625(%var_11647) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_7030() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  @func_7028() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_1705(%var_1703: Tensor[(16, 2, 14), float32]) -> (Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) {
  @func_1702(%var_1703) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */
}

def @func_10245() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool]) {
  %638 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool]) {
    %626 = @func_7416() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
    %627 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
    %628 = %627.0;
    %629 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %630 = %629.0;
    %631 = cast(%630, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
    %632 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
    %633 = cast(%628, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
    %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %635 = %626.0;
    %636 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
    %637 = logical_or(%633, %634) /* ty=Tensor[(?, 10, 13), bool] */;
    (%635, %636, %637)
  };
  %638() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool]) */
}

def @func_11142() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32]) {
  %639 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %640 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %641 = %639.1;
  %642 = %640.1;
  (%641, %642)
}

def @func_7181() -> (Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) {
  %651 = fn () -> (Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) {
    %643 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
    %644 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
    %645 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
    %646 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %647 = %643.0;
    %648 = %644.0;
    %649 = %645.1;
    %650 = %646.3;
    (%647, %648, %649, %650)
  };
  %651() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */
}

def @func_2850() -> (Tensor[(16, 2, 14), float32],) {
  %652 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  (%652,)
}

def @func_2327(%var_2325: Tensor[(6, 10, 13), float64]) -> (Tensor[(6, 10, 13), float32], Tensor[(?, 10, 13), uint32]) {
  @func_2324(%var_2325) /* ty=(Tensor[(6, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */
}

def @func_8206() -> Tensor[(1, 10, 13), float64] {
  %654 = fn () -> Tensor[(1, 10, 13), float64] {
    %653 = @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %653.0
  };
  %654() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_10303() -> Tensor[(?, 10, 13), float64] {
  @func_10301() /* ty=Tensor[(?, 10, 13), float64] */
}

def @func_2202() -> (Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) {
  %661 = fn () -> (Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) {
    %655 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
    %657 = reshape(%656, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
    %658 = cast(%655, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
    %659 = @func_1620(%657) /* ty=Tensor[(16, 2, 14), bool] */;
    %660 = rsqrt(%658) /* ty=Tensor[(16, 2, 14), float64] */;
    (%659, %660)
  };
  %661() /* ty=(Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float64]) */
}

def @func_2495() -> (Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) {
  %662 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %663 = %662.0;
  %664 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 10, 13), uint32] */, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %665 = shape_of(%663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %666 = cast(%663, dtype="int32") /* ty=Tensor[(?, 10, 13), int32] */;
  %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %668 = bitwise_and(%666, %667) /* ty=Tensor[(?, 10, 13), int32] */;
  %669 = cast(%668, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %670 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %671 = cast(meta[relay.Constant][20] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %672 = acosh(%669) /* ty=Tensor[(?, 10, 13), float32] */;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(?, 10, 13), float32] */;
  %674 = reshape(%671, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %675 = reshape(%673, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %676 = @func_934(%674, %675) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %677 = %670.0;
  %678 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  %679 = %676.0;
  (%672, %677, %678, %679, meta[relay.Constant][20] /* ty=Tensor[(432), float32] */)
}

def @func_5780() -> (Tensor[(?, 10, 13), float32],) {
  @func_5778() /* ty=(Tensor[(?, 10, 13), float32],) */
}

def @func_14070() -> (Tensor[(16, 2, 14), float32],) {
  %680 = @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %681 = %680.0;
  (%681,)
}

def @func_8265() -> (Tensor[(16, 2, 14), float64],) {
  %682 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %683 = %682.0;
  (%683,)
}

def @func_6093() -> Tensor[(16, 2, 14), float32] {
  %684 = fn () -> Tensor[(16, 2, 14), float32] {
    @func_1215() /* ty=Tensor[(16, 2, 14), float32] */
  };
  %684() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_7279() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %685 = @func_6947() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */;
  %686 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %687 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %688 = %685.1;
  %689 = %686.0;
  %690 = %687.0;
  (%688, %689, %690)
}

def @func_11853() -> Tensor[(16, 2, 14), float64] {
  %691 = fn () -> Tensor[(16, 2, 14), float64] {
    @func_7527() /* ty=Tensor[(16, 2, 14), float64] */
  };
  %691() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_17665() -> (Tensor[(6, 14, ?), bool],) {
  @func_17663() /* ty=(Tensor[(6, 14, ?), bool],) */
}

def @func_10454() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32]) {
  @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */
}

def @func_8997() -> (Tensor[(900), float32], Tensor[(1, 10, 13), float64]) {
  %692 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %693 = @func_5438() /* ty=Tensor[(900), float32] */;
  %694 = %692.0;
  (%693, %694)
}

def @func_2070() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %701 = fn () -> (Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
    %695 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
    %696 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %697 = %695.1;
    %698 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
    %699 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
    %700 = %696.0;
    (%697, %698, %699, %700)
  };
  %701() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_6052() -> Tensor[(16, 2, 14), float64] {
  %707 = fn () -> Tensor[(16, 2, 14), float64] {
    %702 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %703 = %702.0;
    %704 = cast(%703, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %705 = sin(%704) /* ty=Tensor[(16, 2, 14), float32] */;
    %706 = cast(%705, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
    atanh(%706) /* ty=Tensor[(16, 2, 14), float64] */
  };
  %707() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_1901() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) {
  %717 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) {
    %708 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %709 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
    %710 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
    %711 = cast(%710, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %712 = reshape(%711, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
    %713 = @func_1702(%712) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
    %714 = %708.1;
    %715 = %709.0;
    %716 = %713.1;
    (%710, %714, %715, %716)
  };
  %717() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) */
}

def @func_9581() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) {
  %718 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %719 = @func_8805() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */;
  %720 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %721 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %722 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
  %723 = %721.2;
  %724 = cast(%723, dtype="float32") /* ty=Tensor[(900), float32] */;
  %725 = reshape(%724, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %726 = @func_9221(%725) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %727 = %718.0;
  %728 = %719.0;
  %729 = %720.0;
  %730 = %722.2;
  %731 = %726.2;
  (%727, %728, %729, %723, %730, %731)
}

def @func_4727() -> (Tensor[(1, 10, 13), float64], Tensor[(432), float32]) {
  %735 = fn () -> (Tensor[(1, 10, 13), float64], Tensor[(432), float32]) {
    %732 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
    %733 = @func_4272() /* ty=Tensor[(1, 10, 13), float64] */;
    %734 = %732.2;
    (%733, %734)
  };
  %735() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(432), float32]) */
}

def @func_12737() -> (Tensor[(16, 2, 14), float64],) {
  %736 = @func_11688() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %737 = %736.0;
  (%737,)
}

def @func_8710() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %741 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
    %738 = @func_3599() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
    %739 = @func_6523() /* ty=Tensor[(16, 2, 14), float64] */;
    %740 = %738.1;
    (%739, %740)
  };
  %741() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */
}

def @func_5962() -> (Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) {
  @func_5960() /* ty=(Tensor[(6, 14, ?), bool], Tensor[(130), float32], Tensor[(6, 14, ?), float32], Tensor[(6, 14, 1), float64]) */
}

def @func_7115(%var_7077: Tensor[(13, 10, 13), float64], %var_7101: Tensor[(432), float32], %var_7111: Tensor[(5, 78), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(13, 10, 13), int16], Tensor[(432), float32], Tensor[(432), float32], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) {
  %742 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %743 = @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %744 = %743.1;
  %745 = cast(%744, dtype="int16") /* ty=Tensor[(1, 10, 13), int16] */;
  %746 = cast(%var_7077, dtype="int16") /* ty=Tensor[(13, 10, 13), int16] */;
  %747 = cast(%var_7101, dtype="float32") /* ty=Tensor[(432), float32] */;
  %748 = reshape(%747, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %749 = @func_3434(%748) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
  %750 = cast(%var_7111, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %751 = reshape(%750, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %752 = %742.1;
  %753 = subtract(%745, %746) /* ty=Tensor[(13, 10, 13), int16] */;
  %754 = %749.3;
  %755 = @func_3610(%751) /* ty=Tensor[(13, 15, 2), float64] */;
  (%752, %753, %754, %var_7101, %755, %var_7111)
}

def @func_4561() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) {
  %756 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %757 = %756.0;
  %758 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  (%757, %758)
}

def @func_5778() -> (Tensor[(?, 10, 13), float32],) {
  %759 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %760 = %759.0;
  (%760,)
}

def @func_16091() -> (Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64]) {
  @func_16089() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64]) */
}

def @func_17848() -> (Tensor[(16, 2, 14), float64], Tensor[(6, 14, ?), bool], Tensor[(7, 6, 13), float64]) {
  %766 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(6, 14, ?), bool], Tensor[(7, 6, 13), float64]) {
    %761 = @func_13639() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32]) */;
    %762 = @func_17663() /* ty=(Tensor[(6, 14, ?), bool],) */;
    %763 = %761.1;
    %764 = %762.0;
    %765 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
    (%763, %764, %765)
  };
  %766() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(6, 14, ?), bool], Tensor[(7, 6, 13), float64]) */
}

def @func_13528() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  %767 = @func_7354() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %768 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %769 = %767.0;
  %770 = %768.0;
  (%769, %770)
}

def @func_1163(%var_1149: Tensor[(15, 5, 12), float32]) -> (Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) {
  %771 = cast(meta[relay.Constant][21] /* ty=Tensor[(1, 5, 1), float32] */, dtype="float32") /* ty=Tensor[(1, 5, 1), float32] */;
  %772 = cosh(%771) /* ty=Tensor[(1, 5, 1), float32] */;
  %773 = cast(%772, dtype="float64") /* ty=Tensor[(1, 5, 1), float64] */;
  %774 = cast(%var_1149, dtype="float64") /* ty=Tensor[(15, 5, 12), float64] */;
  %775 = cast(meta[relay.Constant][22] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %776 = cast(meta[relay.Constant][23] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %777 = reshape(%775, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %778 = reshape(%776, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %779 = @func_934(%777, %778) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %780 = multiply(%773, %774) /* ty=Tensor[(15, 5, 12), float64] */;
  %781 = %779.0;
  (%780, %781, meta[relay.Constant][22] /* ty=Tensor[(432), float32] */, meta[relay.Constant][23] /* ty=Tensor[(130), float32] */)
}

def @func_2705() -> (Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) {
  %796 = fn () -> (Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) {
    %782 = @func_1982() /* ty=(Tensor[(130), float32],) */;
    %783 = cast(meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
    %784 = %782.0;
    %785 = cast(%784, dtype="float32") /* ty=Tensor[(130), float32] */;
    %786 = reshape(%783, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
    %787 = reshape(%785, newshape=[130]) /* ty=Tensor[(130), float32] */;
    %788 = @func_934(%786, %787) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
    %789 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %790 = cast(meta[relay.Constant][25] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
    %791 = reshape(%790, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
    %792 = @func_1163(%791) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
    %793 = %788.1;
    %794 = %789.0;
    %795 = %792.0;
    (%784, %793, meta[relay.Constant][24] /* ty=Tensor[(432), float32] */, %794, %795, meta[relay.Constant][25] /* ty=Tensor[(900), float32] */)
  };
  %796() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */
}

def @func_9669(%var_9651: Tensor[(432), float32], %var_9659: Tensor[(5, 10, 13), float64]) -> (Tensor[(5, 10, 13), uint16], Tensor[(1, 10, 13), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(5, 10, 13), bool], Tensor[(16, 2, 14), float64]) {
  %797 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %798 = %797.3;
  %799 = cast(%798, dtype="uint16") /* ty=Tensor[(1, 10, 13), uint16] */;
  %800 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 13), float64] */, dtype="uint16") /* ty=Tensor[(5, 10, 13), uint16] */;
  %801 = @func_3343() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %802 = cast(%var_9651, dtype="float32") /* ty=Tensor[(432), float32] */;
  %803 = %801.0;
  %804 = cast(%803, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %805 = reshape(%802, newshape=[3, 9, 16]) /* ty=Tensor[(3, 9, 16), float32] */;
  %806 = reshape(%804, newshape=[130]) /* ty=Tensor[(130), float32] */;
  %807 = @func_934(%805, %806) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */;
  %808 = cast(%var_9659, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %809 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 13), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %810 = cast(meta[relay.Constant][26] /* ty=Tensor[(5, 10, 13), float64] */, dtype="bool") /* ty=Tensor[(5, 10, 13), bool] */;
  %811 = dyn.reshape(%808, %809, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %812 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %813 = bitwise_xor(%799, %800) /* ty=Tensor[(5, 10, 13), uint16] */;
  %814 = %807.0;
  %815 = equal(%810, %811) /* ty=Tensor[(5, 10, 13), bool] */;
  %816 = %812.0;
  (%813, %803, %814, %var_9651, %815, %816)
}

def @func_6523() -> Tensor[(16, 2, 14), float64] {
  %817 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %817.1
}

def @func_1755() -> (Tensor[(1, 10, 13), float64],) {
  %818 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %819 = %818.0;
  (%819,)
}

def @func_7757() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) {
  %825 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) {
    %820 = @func_4412() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), bool], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %821 = %820.4;
    %822 = cast(%821, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
    %823 = reshape(%822, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
    %824 = @func_1620(%823) /* ty=Tensor[(16, 2, 14), bool] */;
    (%821, %824)
  };
  %825() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */
}

def @func_12325() -> Tensor[(3, 1, 1), float32] {
  %826 = cast(meta[relay.Constant][27] /* ty=Tensor[(3, 1, 1), float32] */, dtype="float32") /* ty=Tensor[(3, 1, 1), float32] */;
  rsqrt(%826) /* ty=Tensor[(3, 1, 1), float32] */
}

def @func_14337(%var_14307: Tensor[(1680), float64]) -> (Tensor[(1680), float64], Tensor[(448), float64], Tensor[(?, 10, 13), int32], Tensor[(16, 2, 14), float64]) {
  %827 = @func_12166() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %828 = %827.0;
  %829 = cast(%var_14307, dtype="float64") /* ty=Tensor[(1680), float64] */;
  %830 = cast(meta[relay.Constant][28] /* ty=Tensor[(448), float64] */, dtype="float64") /* ty=Tensor[(448), float64] */;
  %831 = reshape(%829, newshape=[12, 14, 10]) /* ty=Tensor[(12, 14, 10), float64] */;
  %832 = reshape(%830, newshape=[1, 448]) /* ty=Tensor[(1, 448), float64] */;
  %833 = @func_11509(%831, %832) /* ty=(Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) */;
  %834 = %833.1;
  %835 = cast(%834, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %836 = shape_of(%828, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(%828, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %839 = @func_3721() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %840 = left_shift(%837, %838) /* ty=Tensor[(?, 10, 13), int32] */;
  %841 = %839.0;
  (%var_14307, meta[relay.Constant][28] /* ty=Tensor[(448), float64] */, %840, %841)
}

def @func_13967() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) {
  %842 = @func_7612() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %843 = %842.0;
  %844 = @func_10913() /* ty=Tensor[(?, 10, 13), uint32] */;
  (%843, %844)
}

def @func_15488(%var_15482: Tensor[(1690), float64], %var_15483: Tensor[(432), float32], %var_15484: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(1690), float64], Tensor[(432), float32], Tensor[(390), float64]) {
  %845 = @func_10434() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %846 = cast(%var_15482, dtype="float64") /* ty=Tensor[(1690), float64] */;
  %847 = cast(%var_15483, dtype="float32") /* ty=Tensor[(432), float32] */;
  %848 = cast(%var_15484, dtype="float64") /* ty=Tensor[(390), float64] */;
  %849 = reshape(%846, newshape=[13, 10, 13]) /* ty=Tensor[(13, 10, 13), float64] */;
  %850 = reshape(%847, newshape=[432]) /* ty=Tensor[(432), float32] */;
  %851 = reshape(%848, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %852 = @func_7115(%849, %850, %851) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(13, 10, 13), int16], Tensor[(432), float32], Tensor[(432), float32], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) */;
  %853 = %845.1;
  %854 = %852.0;
  (%853, %854, %var_15482, %var_15483, %var_15484)
}

def @func_2405() -> Tensor[(?, 10, 13), uint32] {
  %855 = @func_2238() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %855.0
}

def @func_11689() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %860 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
    %856 = @func_11416() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
    %857 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
    %858 = %856.2;
    %859 = %857.1;
    (%858, %859)
  };
  %860() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */
}

def @func_12885() -> Tensor[(?, 10, 13), float32] {
  %861 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %861.0
}

def @func_5170() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) {
  %867 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) {
    %862 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %863 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
    %864 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
    %865 = %862.0;
    %866 = %863.0;
    (%864, %865, %866)
  };
  %867() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */
}

def @func_14378(%var_14377: Tensor[(7, 16, 9), uint16]) -> Tensor[(7, 16, 9), uint16] {
  %872 = fn (%var_14369: Tensor[(7, 16, 9), uint16]) -> Tensor[(7, 16, 9), uint16] {
    %868 = cast(%var_14369, dtype="uint16") /* ty=Tensor[(7, 16, 9), uint16] */;
    %869 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(7, 16, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %870 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 16, 9), uint16] */, dtype="uint16") /* ty=Tensor[(7, 16, 9), uint16] */;
    %871 = dyn.reshape(%868, %869, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    right_shift(%870, %871) /* ty=Tensor[(7, 16, 9), uint16] */
  };
  %872(%var_14377) /* ty=Tensor[(7, 16, 9), uint16] */
}

def @func_3600() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
  %876 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32]) {
    %873 = @func_1982() /* ty=(Tensor[(130), float32],) */;
    %874 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
    %875 = %873.0;
    (%874, %875)
  };
  %876() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */
}

def @func_12887() -> Tensor[(?, 10, 13), float32] {
  @func_12885() /* ty=Tensor[(?, 10, 13), float32] */
}

def @func_3612(%var_3611: Tensor[(13, 15, 2), float64]) -> Tensor[(13, 15, 2), float64] {
  %878 = fn (%var_3607: Tensor[(13, 15, 2), float64]) -> Tensor[(13, 15, 2), float64] {
    %877 = cast(%var_3607, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
    sqrt(%877) /* ty=Tensor[(13, 15, 2), float64] */
  };
  %878(%var_3611) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_3437(%var_3435: Tensor[(432), float32]) -> (Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) {
  @func_3434(%var_3435) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float32], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_18050(%var_18038: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), uint64], Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  %879 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %880 = %879.0;
  %881 = cast(%880, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %882 = reshape(%881, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %883 = cast(%var_18038, dtype="float32") /* ty=Tensor[(900), float32] */;
  %884 = reshape(%883, newshape=[9, 100]) /* ty=Tensor[(9, 100), float32] */;
  %885 = @func_9221(%884) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */;
  %886 = @func_13967() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */;
  %887 = @func_1900() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) */;
  %888 = @func_14876(%882) /* ty=Tensor[(16, 2, 14), uint64] */;
  %889 = %885.4;
  %890 = %886.0;
  %891 = %887.2;
  (%880, %888, %889, %var_18038, %890, %891)
}

def @func_1757() -> (Tensor[(1, 10, 13), float64],) {
  @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_16466() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) {
  @func_16464() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) */
}

def @func_17417() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(900), float32], Tensor[(130), float32]) {
  %892 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %893 = cast(meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %894 = reshape(%893, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %895 = @func_16370(%894) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64], Tensor[(900), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool]) */;
  %896 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %897 = %892.2;
  %898 = %895.3;
  %899 = %896.1;
  (%897, %898, meta[relay.Constant][30] /* ty=Tensor[(900), float32] */, %899)
}

def @func_14805(%var_14803: Tensor[(1680, 1), float64]) -> (Tensor[(130), bool], Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(12, 14, 10), float64], Tensor[(1680, 1), float64], Tensor[(16, 2, 14), float64]) {
  @func_14802(%var_14803) /* ty=(Tensor[(130), bool], Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(12, 14, 10), float64], Tensor[(1680, 1), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_11417() -> (Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  %905 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
    %900 = @func_8265() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %901 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
    %902 = %900.0;
    %903 = @func_10301() /* ty=Tensor[(?, 10, 13), float64] */;
    %904 = %901.0;
    (%902, %903, %904)
  };
  %905() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_9885() -> (Tensor[(?, 10, 13), uint32],) {
  @func_9883() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_11291() -> (Tensor[(15, 5, 12), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32]) {
  %906 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %907 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %908 = @func_7563() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %909 = @func_10659() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %910 = %906.1;
  %911 = %907.0;
  %912 = %908.0;
  %913 = %909.1;
  (%910, %911, %912, %913)
}

def @func_11086() -> (Tensor[(16, 2, 14), float32],) {
  %916 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %914 = @func_10191() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
    %915 = %914.0;
    (%915,)
  };
  %916() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_10891() -> (Tensor[(16, 2, 14), float64],) {
  @func_10889() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_10813() -> (Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  @func_10811() /* ty=(Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_5307() -> Tensor[(16, 2, 14), float64] {
  %918 = fn () -> Tensor[(16, 2, 14), float64] {
    %917 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %917.0
  };
  %918() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_11456() -> (Tensor[(16, 2, 14), float64],) {
  %920 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %919 = @func_6051() /* ty=Tensor[(16, 2, 14), float64] */;
    (%919,)
  };
  %920() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_13672() -> (Tensor[(7, 6, 13), float64], Tensor[(16, 7, 2), float64], uint32) {
  @func_13670() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 7, 2), float64], uint32) */
}

def @func_1967() -> (Tensor[(16, 2, 14), float64],) {
  %921 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %922 = %921.0;
  (%922,)
}

def @func_2407() -> Tensor[(?, 10, 13), uint32] {
  @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_5518() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %923 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
  %924 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %925 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %926 = %923.0;
  %927 = %924.0;
  %928 = %925.1;
  (%926, %927, %928)
}

def @func_15076(%var_15074: Tensor[(10, 10, 13), float64]) -> (Tensor[(?, 10, 13), float32], Tensor[(10, 10, 13), float32], Tensor[(16, 2, 14), float64]) {
  @func_15073(%var_15074) /* ty=(Tensor[(?, 10, 13), float32], Tensor[(10, 10, 13), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_14987() -> Tensor[(1, 10, 13), float64] {
  %930 = fn () -> Tensor[(1, 10, 13), float64] {
    %929 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
    %929.0
  };
  %930() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_13259() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %939 = fn () -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
    %931 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
    %932 = @func_13011() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
    %933 = @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %934 = @func_10203() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %935 = %931.0;
    %936 = %932.2;
    %937 = %933.0;
    %938 = %934.0;
    (%935, %936, %937, %938)
  };
  %939() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */
}

def @func_15472(%var_15471: Tensor[(13, 15, 10), float32]) -> (Tensor[(13, 15, 10), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %948 = fn (%var_15340: Tensor[(13, 15, 10), float32]) -> (Tensor[(13, 15, 10), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
    %940 = cast(%var_15340, dtype="float32") /* ty=Tensor[(13, 15, 10), float32] */;
    %941 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
    %942 = @func_14397() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %943 = @func_11749() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) */;
    %944 = sinh(%940) /* ty=Tensor[(13, 15, 10), float32] */;
    %945 = %941.0;
    %946 = %942.0;
    %947 = %943.1;
    (%944, %945, %946, %947)
  };
  %948(%var_15471) /* ty=(Tensor[(13, 15, 10), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_4629(%var_4628: Tensor[(7, 6, 13), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), bool], Tensor[(15, 5, 12), float64]) {
  %960 = fn (%var_4619: Tensor[(7, 6, 13), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), bool], Tensor[(15, 5, 12), float64]) {
    %949 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
    %950 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
    %951 = %950.0;
    %952 = cast(%var_4619, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
    %953 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
    %954 = cast(%951, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
    %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %956 = @func_3235() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
    %957 = %949.0;
    %958 = greater_equal(%954, %955) /* ty=Tensor[(7, 6, 13), bool] */;
    %959 = %956.1;
    (%957, %958, %959)
  };
  %960(%var_4628) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), bool], Tensor[(15, 5, 12), float64]) */
}

def @func_7552() -> (Tensor[(1, 10, 13), float64],) {
  %961 = @func_5169() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */;
  %962 = %961.2;
  (%962,)
}

def @func_6553() -> (Tensor[(?, 10, 13), uint32],) {
  %963 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %964 = %963.0;
  (%964,)
}

def @func_15509() -> Tensor[(?, 10, 13), uint32] {
  @func_15507() /* ty=Tensor[(?, 10, 13), uint32] */
}

def @func_4098() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %965 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %966 = @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %967 = %965.0;
  %968 = %966.1;
  (%967, %968)
}

def @func_18448(%var_18428: Tensor[(6, 10, 13), float64]) -> (Tensor[(6, 10, 13), float64],) {
  %969 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %970 = %969.2;
  %971 = cast(%970, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
  %972 = cast(%var_18428, dtype="float64") /* ty=Tensor[(6, 10, 13), float64] */;
  %973 = floor_mod(%971, %972) /* ty=Tensor[(6, 10, 13), float64] */;
  (%973,)
}

def @func_6272(%var_6228: Tensor[(10, 10, 13), uint32]) -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(10, 10, 13), int32], Tensor[(16, 2, 14), float64]) {
  %974 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %975 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
  %976 = cast(%975, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %977 = cast(%var_6228, dtype="bool") /* ty=Tensor[(10, 10, 13), bool] */;
  %978 = greater_equal(%976, %977) /* ty=Tensor[(10, 10, 13), bool] */;
  %979 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %980 = %979.1;
  %981 = cast(%978, dtype="int32") /* ty=Tensor[(10, 10, 13), int32] */;
  %982 = cast(%980, dtype="int32") /* ty=Tensor[(1, 10, 13), int32] */;
  %983 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %984 = %974.0;
  %985 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  %986 = left_shift(%981, %982) /* ty=Tensor[(10, 10, 13), int32] */;
  %987 = %983.0;
  (%984, %985, %986, %987)
}

def @func_15712() -> (Tensor[(10, 10, 13), int16], Tensor[(1, 10, 13), float64]) {
  @func_15710() /* ty=(Tensor[(10, 10, 13), int16], Tensor[(1, 10, 13), float64]) */
}

def @func_17729(%var_17726: Tensor[(1, 105), bool], %var_17727: Tensor[(1170), float64]) -> (Tensor[(130), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 105), bool], Tensor[(1170), float64]) {
  %988 = @func_12703() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) */;
  %989 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
  %990 = cast(%var_17726, dtype="bool") /* ty=Tensor[(1, 105), bool] */;
  %991 = cast(%var_17727, dtype="float64") /* ty=Tensor[(1170), float64] */;
  %992 = reshape(%990, newshape=[105]) /* ty=Tensor[(105), bool] */;
  %993 = reshape(%991, newshape=[9, 10, 13]) /* ty=Tensor[(9, 10, 13), float64] */;
  %994 = @func_15781(%992, %993) /* ty=(Tensor[(2, 14, 9), float64], Tensor[(900), float32], Tensor[(105), bool], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(9, 10, 13), int8]) */;
  %995 = %988.1;
  %996 = %989.1;
  %997 = %994.3;
  (%995, %996, %997, %var_17726, %var_17727)
}

def @func_16718(%var_16717: uint32) -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 7, 2), float64], uint32) {
  %1007 = fn (%var_16714: uint32) -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 7, 2), float64], uint32) {
    %998 = @func_14070() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %999 = @func_13967() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */;
    %1000 = @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %1001 = cast(%var_16714, dtype="uint32") /* ty=uint32 */;
    %1002 = reshape(%1001, newshape=[]) /* ty=uint32 */;
    %1003 = %998.0;
    %1004 = %999.1;
    %1005 = %1000.0;
    %1006 = @func_13282(%1002) /* ty=Tensor[(16, 7, 2), float64] */;
    (%1003, %1004, %1005, %1006, %var_16714)
  };
  %1007(%var_16717) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 7, 2), float64], uint32) */
}

def @func_14562() -> (Tensor[(16, 2, 14), float32],) {
  %1009 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %1008 = @func_9818() /* ty=Tensor[(16, 2, 14), float32] */;
    (%1008,)
  };
  %1009() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_16889() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  @func_16887() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_17198(%var_17196: Tensor[(7, 6, 13), float64]) -> (Tensor[(7, 6, 13), bool],) {
  @func_17195(%var_17196) /* ty=(Tensor[(7, 6, 13), bool],) */
}

def @func_7120(%var_7117: Tensor[(13, 10, 13), float64], %var_7118: Tensor[(432), float32], %var_7119: Tensor[(5, 78), float64]) -> (Tensor[(16, 2, 14), float32], Tensor[(13, 10, 13), int16], Tensor[(432), float32], Tensor[(432), float32], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) {
  @func_7115(%var_7117, %var_7118, %var_7119) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(13, 10, 13), int16], Tensor[(432), float32], Tensor[(432), float32], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) */
}

def @func_4563() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) {
  @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */
}

def @func_14473(%var_14471: Tensor[(10, 6, 1), float32]) -> (Tensor[(10, 6, 1), float32],) {
  @func_14470(%var_14471) /* ty=(Tensor[(10, 6, 1), float32],) */
}

def @func_5630(%var_5628: Tensor[(1, 432), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(15, 5, 12), float64], Tensor[(1, 432), float32], Tensor[(?, 10, 13), bool]) {
  @func_5627(%var_5628) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(15, 5, 12), float64], Tensor[(1, 432), float32], Tensor[(?, 10, 13), bool]) */
}

def @main() -> (Tensor[(6, 14, ?), bool], Tensor[(4, 112), int16]) {
  %1010 = @func_17665() /* ty=(Tensor[(6, 14, ?), bool],) */;
  %1011 = @func_9312() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
  %1012 = %1011.1;
  %1013 = cast(meta[relay.Constant][31] /* ty=Tensor[(4, 112), float64] */, dtype="int16") /* ty=Tensor[(4, 112), int16] */;
  %1014 = shape_of(%1012, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1015 = cast(%1012, dtype="int16") /* ty=Tensor[(4, 112), int16] */;
  %1016 = dyn.reshape(%1013, %1014, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1017 = %1010.0;
  %1018 = logical_xor(%1015, %1016) /* ty=Tensor[(4, 112), int16] */;
  (%1017, %1018)
}

def @func_5703(%var_5662: Tensor[(14, 13, 10), uint32], %var_5663: Tensor[(14, 13, 10), uint32], %var_5675: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(14, 13, 10), uint32], Tensor[(14, 13, 10), int8]) {
  %1019 = cast(%var_5675, dtype="float64") /* ty=Tensor[(390), float64] */;
  %1020 = reshape(%1019, newshape=[5, 78]) /* ty=Tensor[(5, 78), float64] */;
  %1021 = @func_5230(%1020) /* ty=(Tensor[(16, 2, 14), float64], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) */;
  %1022 = cast(%var_5663, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %1023 = shape_of(%var_5662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1024 = cast(%var_5662, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %1025 = dyn.reshape(%1022, %1023, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1026 = bitwise_and(%1024, %1025) /* ty=Tensor[(14, 13, 10), uint32] */;
  %1027 = cast(%1026, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %1028 = shape_of(%var_5663, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1029 = cast(%var_5663, dtype="uint32") /* ty=Tensor[(14, 13, 10), uint32] */;
  %1030 = dyn.reshape(%1027, %1028, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1031 = cast(meta[relay.Constant][32] /* ty=Tensor[(14, 13, 10), uint32] */, dtype="int8") /* ty=Tensor[(14, 13, 10), int8] */;
  %1032 = shape_of(%1026, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1033 = cast(%1026, dtype="int8") /* ty=Tensor[(14, 13, 10), int8] */;
  %1034 = dyn.reshape(%1031, %1032, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1035 = %1021.0;
  %1036 = minimum(%1029, %1030) /* ty=Tensor[(14, 13, 10), uint32] */;
  %1037 = add(%1033, %1034) /* ty=Tensor[(14, 13, 10), int8] */;
  (%1035, %var_5675, %1036, %1037)
}

def @func_10600() -> (Tensor[(?, 10, 13), uint32],) {
  @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_12212() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %1042 = fn () -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
    %1038 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
    %1039 = @func_11085() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %1040 = %1038.0;
    %1041 = %1039.0;
    (%1040, %1041)
  };
  %1042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */
}

def @func_8682() -> Tensor[(16, 2, 14), float32] {
  @func_8680() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_6873() -> (Tensor[(900), float32],) {
  %1045 = fn () -> (Tensor[(900), float32],) {
    %1043 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
    %1044 = %1043.1;
    (%1044,)
  };
  %1045() /* ty=(Tensor[(900), float32],) */
}

def @func_9223(%var_9222: Tensor[(9, 100), float32]) -> (Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) {
  %1055 = fn (%var_9204: Tensor[(9, 100), float32]) -> (Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) {
    %1046 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
    %1047 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
    %1048 = cast(%var_9204, dtype="float32") /* ty=Tensor[(9, 100), float32] */;
    %1049 = reshape(%1048, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
    %1050 = @func_1163(%1049) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
    %1051 = %1046.2;
    %1052 = %1047.1;
    %1053 = %1050.0;
    %1054 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
    (%1051, %1052, %1053, %var_9204, %1054)
  };
  %1055(%var_9222) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(15, 5, 12), float64], Tensor[(9, 100), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_13477() -> (Tensor[(1, 10, 13), float32],) {
  %1058 = fn () -> (Tensor[(1, 10, 13), float32],) {
    %1056 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
    %1057 = %1056.1;
    (%1057,)
  };
  %1058() /* ty=(Tensor[(1, 10, 13), float32],) */
}

def @func_3788() -> (Tensor[(16, 2, 14), float64],) {
  %1060 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %1059 = @func_3532() /* ty=Tensor[(16, 2, 14), float64] */;
    (%1059,)
  };
  %1060() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_235(%var_234: Tensor[(1, 10, 13), float32]) -> (Tensor[(1, 10, 13), float32],) {
  %1063 = fn (%var_230: Tensor[(1, 10, 13), float32]) -> (Tensor[(1, 10, 13), float32],) {
    %1061 = cast(%var_230, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
    %1062 = sinh(%1061) /* ty=Tensor[(1, 10, 13), float32] */;
    (%1062,)
  };
  %1063(%var_234) /* ty=(Tensor[(1, 10, 13), float32],) */
}

def @func_17123() -> (Tensor[(?, 10, 13), float64],) {
  %1065 = fn () -> (Tensor[(?, 10, 13), float64],) {
    %1064 = @func_11424() /* ty=Tensor[(?, 10, 13), float64] */;
    (%1064,)
  };
  %1065() /* ty=(Tensor[(?, 10, 13), float64],) */
}

def @func_17152() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  @func_17150() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_5864(%var_5863: Tensor[(4, 112), float64]) -> (Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) {
  %1074 = fn (%var_5850: Tensor[(4, 112), float64]) -> (Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) {
    %1066 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
    %1067 = cast(%var_5850, dtype="float64") /* ty=Tensor[(4, 112), float64] */;
    %1068 = reshape(%1067, newshape=[448]) /* ty=Tensor[(448), float64] */;
    %1069 = @func_4813(%1068) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), bool], Tensor[(448), float64]) */;
    %1070 = @func_5047() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %1071 = %1066.3;
    %1072 = %1069.1;
    %1073 = %1070.0;
    (%1071, %1072, %var_5850, %1073)
  };
  %1074(%var_5863) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_6555() -> (Tensor[(?, 10, 13), uint32],) {
  @func_6553() /* ty=(Tensor[(?, 10, 13), uint32],) */
}

def @func_9753() -> (Tensor[(7, 6, 13), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  %1075 = @func_8969() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(7, 6, 13), float64]) */;
  %1076 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
  %1077 = @func_4882() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1078 = %1075.1;
  %1079 = %1076.1;
  %1080 = %1077.0;
  (%1078, %1079, %1080)
}

def @func_10112() -> (Tensor[(16, 2, 14), float32],) {
  @func_10110() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_18676() -> (Tensor[(?, 10, 13), float32],) {
  %1083 = fn () -> (Tensor[(?, 10, 13), float32],) {
    %1081 = @func_14192() /* ty=(Tensor[(?, 10, 13), float32],) */;
    %1082 = %1081.0;
    (%1082,)
  };
  %1083() /* ty=(Tensor[(?, 10, 13), float32],) */
}

def @func_4225(%var_4162: Tensor[(390), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(4, 112), float32], Tensor[(13, 15, 2), float32]) {
  %1084 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %1085 = cast(%var_4162, dtype="float64") /* ty=Tensor[(390), float64] */;
  %1086 = %1084.1;
  %1087 = cast(%1086, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %1088 = reshape(%1087, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %1089 = @func_2585(%1088) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %1090 = cast(%var_4162, dtype="float64") /* ty=Tensor[(390), float64] */;
  %1091 = reshape(%1090, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %1092 = @func_3610(%1091) /* ty=Tensor[(13, 15, 2), float64] */;
  %1093 = cast(%var_4162, dtype="int8") /* ty=Tensor[(390), int8] */;
  %1094 = shape_of(%1092, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1095 = cast(%1092, dtype="int8") /* ty=Tensor[(13, 15, 2), int8] */;
  %1096 = dyn.reshape(%1093, %1094, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1097 = logical_xor(%1095, %1096) /* ty=Tensor[(13, 15, 2), int8] */;
  %1098 = cast(%1097, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %1099 = log2(%1085) /* ty=Tensor[(390), float64] */;
  %1100 = %1089.2;
  %1101 = log2(%1098) /* ty=Tensor[(13, 15, 2), float32] */;
  (%1086, %1099, %1100, %1101)
}

def @func_10811() -> (Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  %1102 = @func_6872() /* ty=(Tensor[(900), float32],) */;
  %1103 = %1102.0;
  %1104 = @func_8680() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1103, %1104)
}

def @func_13423() -> Tensor[(?, 10, 13), float32] {
  %1106 = fn () -> Tensor[(?, 10, 13), float32] {
    %1105 = @func_5778() /* ty=(Tensor[(?, 10, 13), float32],) */;
    %1105.0
  };
  %1106() /* ty=Tensor[(?, 10, 13), float32] */
}

def @func_8936() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(4, 112), float32]) {
  %1107 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %1108 = @func_6523() /* ty=Tensor[(16, 2, 14), float64] */;
  %1109 = cast(%1108, dtype="float64") /* ty=Tensor[(16, 2, 14), float64] */;
  %1110 = reshape(%1109, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %1111 = @func_8280(%1110) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) */;
  %1112 = %1107.1;
  %1113 = %1111.3;
  (%1112, %1108, %1113)
}

def @func_7874() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  @func_7872() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */
}

def @func_16558() -> (Tensor[(1, 10, 13), float32],) {
  %1116 = fn () -> (Tensor[(1, 10, 13), float32],) {
    %1114 = @func_13476() /* ty=(Tensor[(1, 10, 13), float32],) */;
    %1115 = %1114.0;
    (%1115,)
  };
  %1116() /* ty=(Tensor[(1, 10, 13), float32],) */
}

def @func_8999() -> (Tensor[(900), float32], Tensor[(1, 10, 13), float64]) {
  @func_8997() /* ty=(Tensor[(900), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_17767() -> (Tensor[(16, 2, 14), float64],) {
  %1119 = fn () -> (Tensor[(16, 2, 14), float64],) {
    %1117 = @func_11455() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %1118 = %1117.0;
    (%1118,)
  };
  %1119() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_7872() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) {
  %1120 = @func_7354() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1121 = @func_7612() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1122 = %1120.0;
  %1123 = %1121.0;
  (%1122, %1123)
}

def @func_17048() -> (Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float32]) {
  %1124 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %1125 = @func_5518() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %1126 = %1124.1;
  %1127 = %1125.1;
  (%1126, %1127)
}

def @func_9443(%var_9421: Tensor[(105), bool], %var_9435: Tensor[(900), float32]) -> (Tensor[(?, 10, 13), uint32], Tensor[(3, 7, 5), bool], Tensor[(105), bool], Tensor[(900), float32], Tensor[(900), float32], Tensor[(16, 2, 14), float64]) {
  %1128 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %1129 = cast(%var_9421, dtype="bool") /* ty=Tensor[(105), bool] */;
  %1130 = reshape(%1129, newshape=[3, 7, 5]) /* ty=Tensor[(3, 7, 5), bool] */;
  %1131 = cast(%var_9435, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1132 = reshape(%1131, newshape=[900]) /* ty=Tensor[(900), float32] */;
  %1133 = @func_3082(%1132) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */;
  %1134 = @func_5169() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */;
  %1135 = %1128.2;
  %1136 = @func_6341(%1130) /* ty=Tensor[(3, 7, 5), bool] */;
  %1137 = %1133.1;
  %1138 = %1134.1;
  (%1135, %1136, %var_9421, %1137, %var_9435, %1138)
}

def @func_3344() -> (Tensor[(1, 10, 13), float64],) {
  %1140 = fn () -> (Tensor[(1, 10, 13), float64],) {
    %1139 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
    (%1139,)
  };
  %1140() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_11201() -> Tensor[(16, 2, 14), float32] {
  @func_11199() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_1267() -> (Tensor[(16, 2, 14), float64],) {
  @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_938(%var_936: Tensor[(3, 9, 16), float32], %var_937: Tensor[(130), float32]) -> (Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) {
  @func_934(%var_936, %var_937) /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32]) */
}

def @func_15881(%var_15869: Tensor[(7, 6, 13), float64]) -> Tensor[(7, 6, 13), float32] {
  %1141 = @func_11749() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) */;
  %1142 = %1141.0;
  %1143 = cast(%var_15869, dtype="int16") /* ty=Tensor[(7, 6, 13), int16] */;
  %1144 = shape_of(%1142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1145 = cast(%1142, dtype="int16") /* ty=Tensor[(7, 6, 13), int16] */;
  %1146 = dyn.reshape(%1143, %1144, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1147 = bitwise_xor(%1145, %1146) /* ty=Tensor[(7, 6, 13), int16] */;
  %1148 = cast(%1147, dtype="float32") /* ty=Tensor[(7, 6, 13), float32] */;
  atan(%1148) /* ty=Tensor[(7, 6, 13), float32] */
}

def @func_12374() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(28, 2), float64]) {
  @func_12372() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(28, 2), float64]) */
}

def @func_18108() -> (Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64]) {
  %1153 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64]) {
    %1149 = @func_6450() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
    %1150 = @func_14963() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
    %1151 = %1149.1;
    %1152 = %1150.1;
    (%1151, %1152)
  };
  %1153() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float64]) */
}

def @func_3862() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  @func_3860() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_10581() -> (Tensor[(1, 10, 13), float64],) {
  %1154 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  (%1154,)
}

def @func_14096() -> Tensor[(1, 10, 13), float64] {
  %1156 = fn () -> Tensor[(1, 10, 13), float64] {
    %1155 = @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */;
    %1155.0
  };
  %1156() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_14340(%var_14338: Tensor[(1680), float64]) -> (Tensor[(1680), float64], Tensor[(448), float64], Tensor[(?, 10, 13), int32], Tensor[(16, 2, 14), float64]) {
  @func_14337(%var_14338) /* ty=(Tensor[(1680), float64], Tensor[(448), float64], Tensor[(?, 10, 13), int32], Tensor[(16, 2, 14), float64]) */
}

def @func_1984() -> (Tensor[(130), float32],) {
  @func_1982() /* ty=(Tensor[(130), float32],) */
}

def @func_11313() -> (Tensor[(16, 2, 14), float32],) {
  %1158 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %1157 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
    (%1157,)
  };
  %1158() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_10452() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32]) {
  %1159 = @func_8503() /* ty=(Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) */;
  %1160 = %1159.1;
  %1161 = @func_9621() /* ty=Tensor[(900), float32] */;
  (%1160, %1161)
}

def @func_2918(%var_2906: Tensor[(16, 10, 13), float32]) -> Tensor[(16, 10, 13), bool] {
  %1162 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
  %1163 = %1162.0;
  %1164 = cast(%1163, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
  %1165 = cast(%var_2906, dtype="bool") /* ty=Tensor[(16, 10, 13), bool] */;
  greater_equal(%1164, %1165) /* ty=Tensor[(16, 10, 13), bool] */
}

def @func_6211() -> (Tensor[(1, 10, 13), float64],) {
  %1166 = @func_3274() /* ty=Tensor[(1, 10, 13), float64] */;
  (%1166,)
}

def @func_9819() -> Tensor[(16, 2, 14), float32] {
  %1168 = fn () -> Tensor[(16, 2, 14), float32] {
    %1167 = @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %1167.0
  };
  %1168() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_6605() -> (Tensor[(16, 2, 14), float32],) {
  %1169 = @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1170 = %1169.0;
  %1171 = cast(%1170, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %1172 = asinh(%1171) /* ty=Tensor[(16, 2, 14), float32] */;
  (%1172,)
}

def @func_7964() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1173 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1174 = @func_5282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) */;
  %1175 = %1173.0;
  %1176 = %1174.0;
  (%1175, %1176)
}

def @func_17246(%var_17200: Tensor[(7, 8, 8), float32], %var_17227: Tensor[(7, 8, 8), float32], %var_17240: Tensor[(7, 8, 8), float32]) -> (Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(7, 8, 8), float64], Tensor[(7, 8, 8), uint64]) {
  %1177 = @func_1833() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */;
  %1178 = cast(%var_17200, dtype="float32") /* ty=Tensor[(7, 8, 8), float32] */;
  %1179 = atan(%1178) /* ty=Tensor[(7, 8, 8), float32] */;
  %1180 = cast(%var_17227, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %1181 = shape_of(%1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1182 = cast(%1179, dtype="float64") /* ty=Tensor[(7, 8, 8), float64] */;
  %1183 = dyn.reshape(%1180, %1181, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1184 = cast(%var_17240, dtype="uint64") /* ty=Tensor[(7, 8, 8), uint64] */;
  %1185 = shape_of(%1179, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1186 = cast(%1179, dtype="uint64") /* ty=Tensor[(7, 8, 8), uint64] */;
  %1187 = dyn.reshape(%1184, %1185, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1188 = @func_8205() /* ty=Tensor[(1, 10, 13), float64] */;
  %1189 = %1177.0;
  %1190 = floor_mod(%1182, %1183) /* ty=Tensor[(7, 8, 8), float64] */;
  %1191 = bitwise_or(%1186, %1187) /* ty=Tensor[(7, 8, 8), uint64] */;
  (%1188, %1189, %1190, %1191)
}

def @func_3938() -> (Tensor[(7, 6, 13), float64],) {
  %1194 = fn () -> (Tensor[(7, 6, 13), float64],) {
    %1192 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 6, 13), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 13), float64] */;
    %1193 = asin(%1192) /* ty=Tensor[(7, 6, 13), float64] */;
    (%1193,)
  };
  %1194() /* ty=(Tensor[(7, 6, 13), float64],) */
}

def @func_1459() -> (Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) {
  @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */
}

def @func_1982() -> (Tensor[(130), float32],) {
  %1195 = @func_1367() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) */;
  %1196 = %1195.2;
  (%1196,)
}

def @func_10204() -> (Tensor[(16, 2, 14), float32],) {
  %1198 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %1197 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
    (%1197,)
  };
  %1198() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_8280(%var_8275: Tensor[(448), float64]) -> (Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) {
  %1199 = @func_7789() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1200 = cast(%var_8275, dtype="float64") /* ty=Tensor[(448), float64] */;
  %1201 = reshape(%1200, newshape=[4, 112]) /* ty=Tensor[(4, 112), float64] */;
  %1202 = @func_5862(%1201) /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), bool], Tensor[(4, 112), float64], Tensor[(16, 2, 14), float64]) */;
  %1203 = cast(%var_8275, dtype="float32") /* ty=Tensor[(448), float32] */;
  %1204 = reshape(%1203, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %1205 = @func_2585(%1204) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %1206 = %1199.0;
  %1207 = %1202.2;
  %1208 = %1205.2;
  (%1206, %1207, %var_8275, %1208)
}

def @func_2619() -> (Tensor[(1, 10, 13), float32],) {
  %1213 = fn () -> (Tensor[(1, 10, 13), float32],) {
    %1209 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
    %1210 = %1209.0;
    %1211 = cast(%1210, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
    %1212 = log2(%1211) /* ty=Tensor[(1, 10, 13), float32] */;
    (%1212,)
  };
  %1213() /* ty=(Tensor[(1, 10, 13), float32],) */
}

def @func_1969() -> (Tensor[(16, 2, 14), float64],) {
  @func_1967() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_12043() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
  %1218 = fn () -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) {
    %1214 = @func_8936() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(4, 112), float32]) */;
    %1215 = @func_10452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
    %1216 = %1214.0;
    %1217 = %1215.0;
    (%1216, %1217)
  };
  %1218() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */
}

def @func_8938() -> (Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(4, 112), float32]) {
  @func_8936() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(4, 112), float32]) */
}

def @func_6344(%var_6342: Tensor[(3, 7, 5), bool]) -> Tensor[(3, 7, 5), bool] {
  @func_6341(%var_6342) /* ty=Tensor[(3, 7, 5), bool] */
}

def @func_4743(%var_4733: Tensor[(448), float32]) -> (Tensor[(130), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(448), float32]) {
  %1219 = @func_1577() /* ty=(Tensor[(130), float32],) */;
  %1220 = @func_2952() /* ty=(Tensor[(?, 10, 13), uint32],) */;
  %1221 = cast(%var_4733, dtype="float32") /* ty=Tensor[(448), float32] */;
  %1222 = reshape(%1221, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
  %1223 = @func_2585(%1222) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
  %1224 = %1219.0;
  %1225 = %1220.0;
  %1226 = %1223.1;
  (%1224, %1225, %1226, %var_4733)
}

def @func_17291() -> (Tensor[(16, 2, 14), bool],) {
  %1227 = @func_8503() /* ty=(Tensor[(432), float32], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64], Tensor[(?, 6, 6), float64], Tensor[(?, 10, 13), bool], Tensor[(?, 6, 6), int64], Tensor[(16, 2, 14), bool], Tensor[(?, 10, 13), uint32]) */;
  %1228 = %1227.8;
  (%1228,)
}

def @func_12426() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) {
  @func_12424() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_17150() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) {
  %1229 = @func_10110() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1230 = @func_12737() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1231 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
  %1232 = %1229.0;
  %1233 = %1230.0;
  %1234 = %1231.4;
  (%1232, %1233, %1234)
}

def @func_1216() -> Tensor[(16, 2, 14), float32] {
  %1237 = fn () -> Tensor[(16, 2, 14), float32] {
    %1235 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
    %1236 = cast(%1235, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    log10(%1236) /* ty=Tensor[(16, 2, 14), float32] */
  };
  %1237() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_1166(%var_1164: Tensor[(15, 5, 12), float32]) -> (Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) {
  @func_1163(%var_1164) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */
}

def @func_12785() -> Tensor[(1, 10, 13), float64] {
  @func_12783() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_14399() -> (Tensor[(16, 2, 14), float32],) {
  @func_14397() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_5047() -> (Tensor[(16, 2, 14), float64],) {
  %1238 = @func_1178() /* ty=Tensor[(16, 2, 14), float64] */;
  (%1238,)
}

def @func_14536(%var_14535: uint8) -> (Tensor[(16, 2, 7), uint8], Tensor[(16, 2, 14), float32]) {
  %1244 = fn (%var_14499: uint8) -> (Tensor[(16, 2, 7), uint8], Tensor[(16, 2, 14), float32]) {
    %1239 = cast(%var_14499, dtype="uint8") /* ty=uint8 */;
    %1240 = cast(meta[relay.Constant][34] /* ty=Tensor[(16, 2, 7), uint8] */, dtype="uint8") /* ty=Tensor[(16, 2, 7), uint8] */;
    %1241 = @func_6605() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %1242 = add(%1239, %1240) /* ty=Tensor[(16, 2, 7), uint8] */;
    %1243 = %1241.0;
    (%1242, %1243)
  };
  %1244(%var_14535) /* ty=(Tensor[(16, 2, 7), uint8], Tensor[(16, 2, 14), float32]) */
}

def @func_16089() -> (Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64]) {
  %1245 = @func_12424() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) */;
  %1246 = @func_14986() /* ty=Tensor[(1, 10, 13), float64] */;
  %1247 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %1248 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %1249 = %1245.2;
  (%1246, %1247, %1248, %1249)
}

def @func_6820() -> (Tensor[(3, 9, 16), float32], Tensor[(16, 2, 14), float64]) {
  %1254 = fn () -> (Tensor[(3, 9, 16), float32], Tensor[(16, 2, 14), float64]) {
    %1250 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %1251 = @func_2495() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32]) */;
    %1252 = %1250.3;
    %1253 = %1251.2;
    (%1252, %1253)
  };
  %1254() /* ty=(Tensor[(3, 9, 16), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_1833() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) {
  %1255 = @func_1519() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1256 = %1255.0;
  %1257 = cast(%1256, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
  %1258 = reshape(%1257, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %1259 = @func_1702(%1258) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %1260 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %1261 = %1259.1;
  (%1260, %1256, %1261)
}

def @func_11828() -> Tensor[(1, 6, 6), float64] {
  @func_11826() /* ty=Tensor[(1, 6, 6), float64] */
}

def @func_12739() -> (Tensor[(16, 2, 14), float64],) {
  @func_12737() /* ty=(Tensor[(16, 2, 14), float64],) */
}

def @func_18484() -> (Tensor[(130), float32],) {
  %1263 = fn () -> (Tensor[(130), float32],) {
    %1262 = @func_7467() /* ty=Tensor[(130), float32] */;
    (%1262,)
  };
  %1263() /* ty=(Tensor[(130), float32],) */
}

def @func_4813(%var_4801: Tensor[(448), float64]) -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), bool], Tensor[(448), float64]) {
  %1264 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
  %1265 = cast(%var_4801, dtype="float64") /* ty=Tensor[(448), float64] */;
  %1266 = reshape(%1265, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float64] */;
  %1267 = %1264.2;
  %1268 = @func_1620(%1266) /* ty=Tensor[(16, 2, 14), bool] */;
  (%1267, %1268, %var_4801)
}

def @func_9692() -> (Tensor[(16, 2, 14), float32],) {
  @func_9690() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_18537() -> (Tensor[(130), float32], Tensor[(16, 2, 14), float32]) {
  %1269 = @func_9690() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1270 = @func_7467() /* ty=Tensor[(130), float32] */;
  %1271 = %1269.0;
  (%1270, %1271)
}

def @func_4274() -> Tensor[(1, 10, 13), float64] {
  @func_4272() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_5520() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  @func_5518() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_17884() -> (Tensor[(1, 10, 13), float64],) {
  @func_17882() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_14397() -> (Tensor[(16, 2, 14), float32],) {
  %1272 = @func_1215() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1272,)
}

def @func_7028() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1273 = @func_6947() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */;
  %1274 = %1273.1;
  %1275 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1274, %1275)
}

def @func_16229() -> Tensor[(390), float64] {
  %1277 = fn () -> Tensor[(390), float64] {
    %1276 = @func_12424() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64], Tensor[(390), float64], Tensor[(16, 2, 14), float64]) */;
    %1276.3
  };
  %1277() /* ty=Tensor[(390), float64] */
}

def @func_9262() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
  %1282 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) {
    %1278 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
    %1279 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
    %1280 = %1278.1;
    %1281 = %1279.1;
    (%1280, %1281)
  };
  %1282() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_10965(%var_10963: Tensor[(130), float32]) -> Tensor[(130), bool] {
  @func_10962(%var_10963) /* ty=Tensor[(130), bool] */
}

def @func_13821(%var_13819: Tensor[(16, 7, 11), int64], %var_13820: Tensor[(16, 7, 11), int64]) -> (Tensor[(16, 7, 11), int64], Tensor[(16, 2, 14), float32]) {
  %1290 = fn (%var_13808: Tensor[(16, 7, 11), int64], %var_13809: Tensor[(16, 7, 11), int64]) -> (Tensor[(16, 7, 11), int64], Tensor[(16, 2, 14), float32]) {
    %1283 = cast(%var_13809, dtype="int64") /* ty=Tensor[(16, 7, 11), int64] */;
    %1284 = shape_of(%var_13808, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1285 = cast(%var_13808, dtype="int64") /* ty=Tensor[(16, 7, 11), int64] */;
    %1286 = dyn.reshape(%1283, %1284, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %1287 = @func_13011() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
    %1288 = logical_xor(%1285, %1286) /* ty=Tensor[(16, 7, 11), int64] */;
    %1289 = %1287.0;
    (%1288, %1289)
  };
  %1290(%var_13819, %var_13820) /* ty=(Tensor[(16, 7, 11), int64], Tensor[(16, 2, 14), float32]) */
}

def @func_12005(%var_12004: Tensor[(1, 10, 13), float32]) -> Tensor[(?, 10, 13), uint8] {
  %1297 = fn (%var_11998: Tensor[(1, 10, 13), float32]) -> Tensor[(?, 10, 13), uint8] {
    %1291 = @func_2618() /* ty=(Tensor[(1, 10, 13), float32],) */;
    %1292 = %1291.0;
    %1293 = cast(%var_11998, dtype="uint8") /* ty=Tensor[(1, 10, 13), uint8] */;
    %1294 = shape_of(%1292, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1295 = cast(%1292, dtype="uint8") /* ty=Tensor[(1, 10, 13), uint8] */;
    %1296 = dyn.reshape(%1293, %1294, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    right_shift(%1295, %1296) /* ty=Tensor[(?, 10, 13), uint8] */
  };
  %1297(%var_12004) /* ty=Tensor[(?, 10, 13), uint8] */
}

def @func_16923() -> (Tensor[(15, 6, 11), float64],) {
  %1300 = fn () -> (Tensor[(15, 6, 11), float64],) {
    %1298 = cast(meta[relay.Constant][35] /* ty=Tensor[(15, 6, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 6, 11), float64] */;
    %1299 = acosh(%1298) /* ty=Tensor[(15, 6, 11), float64] */;
    (%1299,)
  };
  %1300() /* ty=(Tensor[(15, 6, 11), float64],) */
}

def @func_18305() -> Tensor[(?, 10, 13), uint32] {
  %1301 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
  %1301.0
}

def @func_7625() -> Tensor[(7, 6, 13), float64] {
  %1302 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %1302.0
}

def @func_1937() -> (Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) {
  %1303 = @func_1900() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(1, 10, 13), float64], Tensor[(15, 5, 12), float64]) */;
  %1304 = cast(meta[relay.Constant][36] /* ty=Tensor[(900), float32] */, dtype="float32") /* ty=Tensor[(900), float32] */;
  %1305 = reshape(%1304, newshape=[15, 5, 12]) /* ty=Tensor[(15, 5, 12), float32] */;
  %1306 = @func_1163(%1305) /* ty=(Tensor[(15, 5, 12), float64], Tensor[(3, 9, 16), float32], Tensor[(432), float32], Tensor[(130), float32]) */;
  %1307 = %1303.2;
  %1308 = %1306.3;
  (%1307, %1308, meta[relay.Constant][36] /* ty=Tensor[(900), float32] */)
}

def @func_5230(%var_5220: Tensor[(5, 78), float64]) -> (Tensor[(16, 2, 14), float64], Tensor[(13, 15, 2), float64], Tensor[(5, 78), float64]) {
  %1309 = @func_3906() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32]) */;
  %1310 = cast(%var_5220, dtype="float64") /* ty=Tensor[(5, 78), float64] */;
  %1311 = reshape(%1310, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), float64] */;
  %1312 = %1309.0;
  %1313 = @func_3610(%1311) /* ty=Tensor[(13, 15, 2), float64] */;
  (%1312, %1313, %var_5220)
}

def @func_7613() -> (Tensor[(16, 2, 14), float32],) {
  %1316 = fn () -> (Tensor[(16, 2, 14), float32],) {
    %1314 = @func_4561() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32]) */;
    %1315 = %1314.1;
    (%1315,)
  };
  %1316() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_9396() -> Tensor[(7, 6, 13), float64] {
  %1317 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
  %1317.0
}

def @func_2921(%var_2919: Tensor[(16, 10, 13), float32]) -> Tensor[(16, 10, 13), bool] {
  @func_2918(%var_2919) /* ty=Tensor[(16, 10, 13), bool] */
}

def @func_2875() -> (Tensor[(1, 10, 13), float64],) {
  @func_2873() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_1567() -> Tensor[(1, 10, 13), float64] {
  @func_1565() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_1622(%var_1621: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), bool] {
  %1323 = fn (%var_1615: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), bool] {
    %1318 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
    %1319 = cast(%var_1615, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
    %1320 = shape_of(%1318, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1321 = cast(%1318, dtype="bool") /* ty=Tensor[(16, 2, 14), bool] */;
    %1322 = dyn.reshape(%1319, %1320, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%1321, %1322) /* ty=Tensor[(16, 2, 14), bool] */
  };
  %1323(%var_1621) /* ty=Tensor[(16, 2, 14), bool] */
}

def @func_10720() -> Tensor[(1, 10, 13), float64] {
  %1324 = fn () -> Tensor[(1, 10, 13), float64] {
    @func_1565() /* ty=Tensor[(1, 10, 13), float64] */
  };
  %1324() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_11826() -> Tensor[(1, 6, 6), float64] {
  %1325 = @func_6847() /* ty=(Tensor[(1, 6, 6), float32], Tensor[(16, 2, 14), float32]) */;
  %1326 = %1325.0;
  %1327 = cast(%1326, dtype="float64") /* ty=Tensor[(1, 6, 6), float64] */;
  asin(%1327) /* ty=Tensor[(1, 6, 6), float64] */
}

def @func_11974() -> Tensor[(16, 2, 14), float32] {
  %1329 = fn () -> Tensor[(16, 2, 14), float32] {
    %1328 = @func_11312() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %1328.0
  };
  %1329() /* ty=Tensor[(16, 2, 14), float32] */
}

def @func_14680() -> (Tensor[(900), float32],) {
  %1332 = fn () -> (Tensor[(900), float32],) {
    %1330 = @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */;
    %1331 = %1330.3;
    (%1331,)
  };
  %1332() /* ty=(Tensor[(900), float32],) */
}

def @func_14879(%var_14877: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), uint64] {
  @func_14876(%var_14877) /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_2730() -> (Tensor[(1, 10, 13), float64], Tensor[(900), float32]) {
  %1333 = @func_1755() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1334 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
  %1335 = %1333.0;
  %1336 = %1334.2;
  (%1335, %1336)
}

def @func_8530() -> (Tensor[(7, 6, 13), float64],) {
  @func_8528() /* ty=(Tensor[(7, 6, 13), float64],) */
}

def @func_8971() -> (Tensor[(1, 10, 13), float64], Tensor[(7, 6, 13), float64]) {
  @func_8969() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(7, 6, 13), float64]) */
}

def @func_12704() -> (Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) {
  %1342 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) {
    %1337 = @func_10394() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) */;
    %1338 = cast(meta[relay.Constant][37] /* ty=Tensor[(1, 130), float32] */, dtype="float32") /* ty=Tensor[(1, 130), float32] */;
    %1339 = reshape(%1338, newshape=[130]) /* ty=Tensor[(130), float32] */;
    %1340 = %1337.0;
    %1341 = @func_10962(%1339) /* ty=Tensor[(130), bool] */;
    (%1340, %1341, meta[relay.Constant][37] /* ty=Tensor[(1, 130), float32] */)
  };
  %1342() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(130), bool], Tensor[(1, 130), float32]) */
}

def @func_18539() -> (Tensor[(130), float32], Tensor[(16, 2, 14), float32]) {
  @func_18537() /* ty=(Tensor[(130), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_15781(%var_15735: Tensor[(105), bool], %var_15772: Tensor[(9, 10, 13), float64]) -> (Tensor[(2, 14, 9), float64], Tensor[(900), float32], Tensor[(105), bool], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(9, 10, 13), int8]) {
  %1343 = cast(meta[relay.Constant][38] /* ty=Tensor[(2, 14, 9), float64] */, dtype="float64") /* ty=Tensor[(2, 14, 9), float64] */;
  %1344 = cast(%var_15735, dtype="bool") /* ty=Tensor[(105), bool] */;
  %1345 = reshape(%1344, newshape=[1, 105]) /* ty=Tensor[(1, 105), bool] */;
  %1346 = @func_11646(%1345) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
  %1347 = @func_11455() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1348 = @func_9261() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %1349 = @func_7552() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1350 = %1349.0;
  %1351 = cast(%1350, dtype="int8") /* ty=Tensor[(1, 10, 13), int8] */;
  %1352 = cast(%var_15772, dtype="int8") /* ty=Tensor[(9, 10, 13), int8] */;
  %1353 = rsqrt(%1343) /* ty=Tensor[(2, 14, 9), float64] */;
  %1354 = %1346.2;
  %1355 = %1347.0;
  %1356 = %1348.1;
  %1357 = subtract(%1351, %1352) /* ty=Tensor[(9, 10, 13), int8] */;
  (%1353, %1354, %var_15735, %1355, %1356, %1357)
}

def @func_2732() -> (Tensor[(1, 10, 13), float64], Tensor[(900), float32]) {
  @func_2730() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32]) */
}

def @func_13670() -> (Tensor[(7, 6, 13), float64], Tensor[(16, 7, 2), float64], uint32) {
  %1358 = cast(meta[relay.Constant][39] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %1359 = reshape(%1358, newshape=[]) /* ty=uint32 */;
  %1360 = @func_9396() /* ty=Tensor[(7, 6, 13), float64] */;
  %1361 = @func_13282(%1359) /* ty=Tensor[(16, 7, 2), float64] */;
  (%1360, %1361, meta[relay.Constant][39] /* ty=uint32 */)
}

def @func_14963() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), float64], Tensor[(1, 10, 13), float64]) {
  %1362 = @func_4431() /* ty=Tensor[(16, 2, 14), float32] */;
  %1363 = @func_10301() /* ty=Tensor[(?, 10, 13), float64] */;
  %1364 = @func_13915() /* ty=Tensor[(1, 10, 13), float64] */;
  (%1362, %1363, %1364)
}

def @func_17102() -> (Tensor[(900), float32], Tensor[(900), float32]) {
  %1369 = fn () -> (Tensor[(900), float32], Tensor[(900), float32]) {
    %1365 = @func_9753() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
    %1366 = @func_16616() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(900), float32]) */;
    %1367 = %1365.1;
    %1368 = %1366.2;
    (%1367, %1368)
  };
  %1369() /* ty=(Tensor[(900), float32], Tensor[(900), float32]) */
}

def @func_12235() -> Tensor[(16, 2, 14), float64] {
  %1370 = fn () -> Tensor[(16, 2, 14), float64] {
    @func_1178() /* ty=Tensor[(16, 2, 14), float64] */
  };
  %1370() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_7468() -> Tensor[(130), float32] {
  %1372 = fn () -> Tensor[(130), float32] {
    %1371 = @func_1982() /* ty=(Tensor[(130), float32],) */;
    %1371.0
  };
  %1372() /* ty=Tensor[(130), float32] */
}

def @func_14003() -> (Tensor[(16, 2, 14), float64],) {
  %1373 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
  (%1373,)
}

def @func_6948() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) {
  %1379 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) {
    %1374 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
    %1375 = @func_3937() /* ty=(Tensor[(7, 6, 13), float64],) */;
    %1376 = %1374.1;
    %1377 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
    %1378 = %1375.0;
    (%1376, %1377, %1378)
  };
  %1379() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float32], Tensor[(7, 6, 13), float64]) */
}

def @func_10863() -> (Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) {
  %1380 = @func_1744() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */;
  %1381 = %1380.1;
  %1382 = @func_9396() /* ty=Tensor[(7, 6, 13), float64] */;
  (%1381, %1382)
}

def @func_9087(%var_9054: Tensor[(56), float64]) -> (Tensor[(11, 11, 12), float32], Tensor[(4, 14, 1), float64], Tensor[(56), float64], Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), bool], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) {
  %1383 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 1, 12), float32] */, dtype="float32") /* ty=Tensor[(11, 1, 12), float32] */;
  %1384 = cast(meta[relay.Constant][41] /* ty=Tensor[(11, 11, 12), float32] */, dtype="float32") /* ty=Tensor[(11, 11, 12), float32] */;
  %1385 = cast(%var_9054, dtype="float64") /* ty=Tensor[(56), float64] */;
  %1386 = reshape(%1385, newshape=[4, 14, 1]) /* ty=Tensor[(4, 14, 1), float64] */;
  %1387 = @func_6746(%1386) /* ty=(Tensor[(4, 14, 1), float64], Tensor[(1, 10, 13), float64]) */;
  %1388 = @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %1389 = @func_8613() /* ty=(Tensor[(?, 10, 13), bool], Tensor[(900), float32], Tensor[(900), float32]) */;
  %1390 = @func_8172() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */;
  %1391 = @func_7789() /* ty=(Tensor[(1, 10, 13), float64],) */;
  %1392 = power(%1383, %1384) /* ty=Tensor[(11, 11, 12), float32] */;
  %1393 = %1387.0;
  %1394 = %1388.1;
  %1395 = %1389.0;
  %1396 = %1390.1;
  %1397 = %1391.0;
  (%1392, %1393, %var_9054, %1394, %1395, %1396, %1397)
}

def @func_11509(%var_11498: Tensor[(12, 14, 10), float64], %var_11504: Tensor[(1, 448), float64]) -> (Tensor[(12, 14, 10), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 448), float64]) {
  %1398 = cast(%var_11498, dtype="float64") /* ty=Tensor[(12, 14, 10), float64] */;
  %1399 = cast(%var_11504, dtype="float64") /* ty=Tensor[(1, 448), float64] */;
  %1400 = reshape(%1399, newshape=[448]) /* ty=Tensor[(448), float64] */;
  %1401 = @func_8280(%1400) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(4, 112), float64], Tensor[(448), float64], Tensor[(4, 112), float32]) */;
  %1402 = cos(%1398) /* ty=Tensor[(12, 14, 10), float64] */;
  %1403 = %1401.0;
  (%1402, %1403, %var_11504)
}

def @func_2238() -> (Tensor[(?, 10, 13), uint32],) {
  %1404 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %1405 = %1404.1;
  (%1405,)
}

def @func_14443() -> (Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32]) {
  @func_14441() /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32]) */
}

def @func_9283() -> (Tensor[(16, 2, 14), float32],) {
  @func_9281() /* ty=(Tensor[(16, 2, 14), float32],) */
}

def @func_2585(%var_2583: Tensor[(4, 112), float32]) -> (Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) {
  %1406 = @func_1982() /* ty=(Tensor[(130), float32],) */;
  %1407 = cast(%var_2583, dtype="float32") /* ty=Tensor[(4, 112), float32] */;
  %1408 = reshape(%1407, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
  %1409 = @func_1702(%1408) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
  %1410 = %1406.0;
  %1411 = %1409.2;
  (%1410, %1411, %var_2583)
}

def @func_3656() -> (Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) {
  @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */
}

def @func_3084(%var_3083: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) {
  %1429 = fn (%var_3038: Tensor[(900), float32]) -> (Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) {
    %1412 = @func_1302() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32], Tensor[(130), float32]) */;
    %1413 = %1412.0;
    %1414 = cast(%1413, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %1415 = @func_1937() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(130), float32], Tensor[(900), float32]) */;
    %1416 = cast(%1413, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %1417 = reshape(%1416, newshape=[4, 112]) /* ty=Tensor[(4, 112), float32] */;
    %1418 = @func_2585(%1417) /* ty=(Tensor[(130), float32], Tensor[(900), float32], Tensor[(4, 112), float32]) */;
    %1419 = @func_2704() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float32], Tensor[(432), float32], Tensor[(1, 10, 13), float32], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
    %1420 = %1419.5;
    %1421 = cast(%var_3038, dtype="float64") /* ty=Tensor[(900), float64] */;
    %1422 = shape_of(%1420, dtype="int32") /* ty=Tensor[(1), int32] */;
    %1423 = cast(%1420, dtype="float64") /* ty=Tensor[(900), float64] */;
    %1424 = dyn.reshape(%1421, %1422, newshape=[]) /* ty=Tensor[(?), float64] */;
    %1425 = tan(%1414) /* ty=Tensor[(16, 2, 14), float32] */;
    %1426 = %1415.2;
    %1427 = %1418.2;
    %1428 = divide(%1423, %1424) /* ty=Tensor[(900), float64] */;
    (%1425, %1426, %1427, %1428)
  };
  %1429(%var_3083) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(900), float32], Tensor[(4, 112), float32], Tensor[(900), float64]) */
}

def @func_13969() -> (Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) {
  @func_13967() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32]) */
}

def @func_3236() -> (Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) {
  %1435 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) {
    %1430 = @func_1094() /* ty=Tensor[(16, 2, 14), float64] */;
    %1431 = cast(%1430, dtype="float32") /* ty=Tensor[(16, 2, 14), float32] */;
    %1432 = reshape(%1431, newshape=[16, 2, 14]) /* ty=Tensor[(16, 2, 14), float32] */;
    %1433 = @func_1702(%1432) /* ty=(Tensor[(16, 2, 14), uint8], Tensor[(15, 5, 12), float64], Tensor[(900), float32]) */;
    %1434 = %1433.1;
    (%1430, %1434)
  };
  %1435() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(15, 5, 12), float64]) */
}

def @func_15884(%var_15882: Tensor[(7, 6, 13), float64]) -> Tensor[(7, 6, 13), float32] {
  @func_15881(%var_15882) /* ty=Tensor[(7, 6, 13), float32] */
}

def @func_17815() -> (Tensor[(1, 10, 13), float64],) {
  %1438 = fn () -> (Tensor[(1, 10, 13), float64],) {
    %1436 = @func_7279() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
    %1437 = %1436.1;
    (%1437,)
  };
  %1438() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_17906() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
  %1443 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) {
    %1439 = @func_14561() /* ty=(Tensor[(16, 2, 14), float32],) */;
    %1440 = @func_12042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
    %1441 = %1439.0;
    %1442 = %1440.1;
    (%1441, %1442)
  };
  %1443() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64]) */
}

def @func_18160() -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) {
  %1452 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) {
    %1444 = @func_6819() /* ty=(Tensor[(3, 9, 16), float32], Tensor[(16, 2, 14), float64]) */;
    %1445 = @func_10811() /* ty=(Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
    %1446 = @func_3654() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(130), float32], Tensor[(432), float32]) */;
    %1447 = @func_14441() /* ty=(Tensor[(3, 9, 16), float32], Tensor[(1, 10, 13), float32]) */;
    %1448 = %1444.1;
    %1449 = %1445.0;
    %1450 = %1446.0;
    %1451 = %1447.0;
    (%1448, %1449, %1450, %1451)
  };
  %1452() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float64], Tensor[(3, 9, 16), float32]) */
}

def @func_2324(%var_2302: Tensor[(6, 10, 13), float64]) -> (Tensor[(6, 10, 13), float32], Tensor[(?, 10, 13), uint32]) {
  %1453 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
  %1454 = cast(%1453, dtype="float32") /* ty=Tensor[(1, 10, 13), float32] */;
  %1455 = cast(%var_2302, dtype="float32") /* ty=Tensor[(6, 10, 13), float32] */;
  %1456 = @func_1457() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(?, 10, 13), uint32]) */;
  %1457 = mod(%1454, %1455) /* ty=Tensor[(6, 10, 13), float32] */;
  %1458 = %1456.1;
  (%1457, %1458)
}

def @func_4816(%var_4814: Tensor[(448), float64]) -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), bool], Tensor[(448), float64]) {
  @func_4813(%var_4814) /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), bool], Tensor[(448), float64]) */
}

def @func_10395() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
  %1463 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) {
    %1459 = @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */;
    %1460 = @func_2069() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64]) */;
    %1461 = %1459.1;
    %1462 = %1460.1;
    (%1461, %1462)
  };
  %1463() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64]) */
}

def @func_11923(%var_11922: Tensor[(11, 10, 13), uint32]) -> Tensor[(11, 10, 13), bool] {
  %1467 = fn (%var_11916: Tensor[(11, 10, 13), uint32]) -> Tensor[(11, 10, 13), bool] {
    %1464 = @func_2405() /* ty=Tensor[(?, 10, 13), uint32] */;
    %1465 = cast(%1464, dtype="bool") /* ty=Tensor[(?, 10, 13), bool] */;
    %1466 = cast(%var_11916, dtype="bool") /* ty=Tensor[(11, 10, 13), bool] */;
    less(%1465, %1466) /* ty=Tensor[(11, 10, 13), bool] */
  };
  %1467(%var_11922) /* ty=Tensor[(11, 10, 13), bool] */
}

def @func_18384() -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(?, 10, 13), uint32], Tensor[(10, 6, 1), float32], Tensor[(60), float32]) {
  %1480 = fn () -> (Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(?, 10, 13), uint32], Tensor[(10, 6, 1), float32], Tensor[(60), float32]) {
    %1468 = @func_9310() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(4, 112), float64]) */;
    %1469 = @func_6312() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(16, 2, 14), float64], Tensor[(900), float32]) */;
    %1470 = @func_16089() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(1, 10, 13), float64], Tensor[(390), float64]) */;
    %1471 = @func_5128() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(?, 10, 13), uint32], Tensor[(130), float32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64]) */;
    %1472 = cast(meta[relay.Constant][42] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
    %1473 = reshape(%1472, newshape=[10, 6, 1]) /* ty=Tensor[(10, 6, 1), float32] */;
    %1474 = @func_14470(%1473) /* ty=(Tensor[(10, 6, 1), float32],) */;
    %1475 = %1468.0;
    %1476 = %1469.1;
    %1477 = %1470.3;
    %1478 = %1471.2;
    %1479 = %1474.0;
    (%1475, %1476, %1477, %1478, %1479, meta[relay.Constant][42] /* ty=Tensor[(60), float32] */)
  };
  %1480() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(390), float64], Tensor[(?, 10, 13), uint32], Tensor[(10, 6, 1), float32], Tensor[(60), float32]) */
}

def @func_17293() -> (Tensor[(16, 2, 14), bool],) {
  @func_17291() /* ty=(Tensor[(16, 2, 14), bool],) */
}

def @func_5282() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float32]) {
  %1481 = @func_2283() /* ty=(Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float32], Tensor[(1, 10, 13), float64]) */;
  %1482 = @func_3127() /* ty=Tensor[(16, 2, 14), float32] */;
  %1483 = %1481.0;
  (%1482, %1483)
}

def @func_17345() -> (Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), float32], Tensor[(16, 2, 14), float32]) {
  %1484 = @func_9581() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float32], Tensor[(1, 10, 13), float64], Tensor[(900), float32], Tensor[(432), float32], Tensor[(15, 5, 12), float64]) */;
  %1485 = @func_12042() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64]) */;
  %1486 = @func_6719() /* ty=(Tensor[(?, 10, 13), float32], Tensor[(?, 10, 13), uint32]) */;
  %1487 = @func_14820() /* ty=(Tensor[(16, 2, 14), float32],) */;
  %1488 = @func_8680() /* ty=Tensor[(16, 2, 14), float32] */;
  %1489 = %1484.0;
  %1490 = %1485.1;
  %1491 = %1486.0;
  %1492 = %1487.0;
  (%1488, %1489, %1490, %1491, %1492)
}

def @func_11749() -> (Tensor[(7, 6, 13), float64], Tensor[(16, 2, 14), float32]) {
  %1493 = @func_7625() /* ty=Tensor[(7, 6, 13), float64] */;
  %1494 = @func_8680() /* ty=Tensor[(16, 2, 14), float32] */;
  (%1493, %1494)
}

def @func_9690() -> (Tensor[(16, 2, 14), float32],) {
  %1495 = @func_7964() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float32]) */;
  %1496 = %1495.0;
  (%1496,)
}

def @func_13917() -> Tensor[(1, 10, 13), float64] {
  @func_13915() /* ty=Tensor[(1, 10, 13), float64] */
}

def @func_16980(%var_16979: Tensor[(56), float64]) -> (Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool], Tensor[(56), float64]) {
  %1503 = fn (%var_16969: Tensor[(56), float64]) -> (Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool], Tensor[(56), float64]) {
    %1497 = @func_16123() /* ty=(Tensor[(7, 6, 13), float64],) */;
    %1498 = cast(%var_16969, dtype="float64") /* ty=Tensor[(56), float64] */;
    %1499 = reshape(%1498, newshape=[56]) /* ty=Tensor[(56), float64] */;
    %1500 = @func_9087(%1499) /* ty=(Tensor[(11, 11, 12), float32], Tensor[(4, 14, 1), float64], Tensor[(56), float64], Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), bool], Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float64]) */;
    %1501 = %1497.0;
    %1502 = %1500.4;
    (%1501, %1502, %var_16969)
  };
  %1503(%var_16979) /* ty=(Tensor[(7, 6, 13), float64], Tensor[(?, 10, 13), bool], Tensor[(56), float64]) */
}

def @func_1745() -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
  %1507 = fn () -> (Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) {
    %1504 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %1505 = @func_1565() /* ty=Tensor[(1, 10, 13), float64] */;
    %1506 = %1504.0;
    (%1505, %1506)
  };
  %1507() /* ty=(Tensor[(1, 10, 13), float64], Tensor[(16, 2, 14), float64]) */
}

def @func_1579() -> (Tensor[(130), float32],) {
  @func_1577() /* ty=(Tensor[(130), float32],) */
}

def @func_1178() -> Tensor[(16, 2, 14), float64] {
  @func_1094() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_9755() -> (Tensor[(7, 6, 13), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) {
  @func_9753() /* ty=(Tensor[(7, 6, 13), float64], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */
}

def @func_12167() -> (Tensor[(1, 10, 13), float64],) {
  %1510 = fn () -> (Tensor[(1, 10, 13), float64],) {
    %1508 = @func_6077() /* ty=(Tensor[(130), float32], Tensor[(1, 10, 13), float64]) */;
    %1509 = %1508.1;
    (%1509,)
  };
  %1510() /* ty=(Tensor[(1, 10, 13), float64],) */
}

def @func_1367() -> (Tensor[(16, 2, 14), float64], Tensor[(1, 10, 13), float32], Tensor[(130), float32], Tensor[(16, 2, 14), float64]) {
  %1511 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1512 = cast(meta[relay.Constant][43] /* ty=Tensor[(130), float32] */, dtype="float32") /* ty=Tensor[(130), float32] */;
  %1513 = reshape(%1512, newshape=[1, 10, 13]) /* ty=Tensor[(1, 10, 13), float32] */;
  %1514 = @func_233(%1513) /* ty=(Tensor[(1, 10, 13), float32],) */;
  %1515 = @func_1265() /* ty=(Tensor[(16, 2, 14), float64],) */;
  %1516 = %1511.0;
  %1517 = %1514.0;
  %1518 = %1515.0;
  (%1516, %1517, meta[relay.Constant][43] /* ty=Tensor[(130), float32] */, %1518)
}

def @func_12062(%var_12061: Tensor[(14, 16, 5), float64]) -> Tensor[(14, 16, 5), float64] {
  %1520 = fn (%var_12056: Tensor[(14, 16, 5), float64]) -> Tensor[(14, 16, 5), float64] {
    %1519 = cast(%var_12056, dtype="float64") /* ty=Tensor[(14, 16, 5), float64] */;
    asin(%1519) /* ty=Tensor[(14, 16, 5), float64] */
  };
  %1520(%var_12061) /* ty=Tensor[(14, 16, 5), float64] */
}

def @func_13571() -> Tensor[(16, 2, 14), float64] {
  @func_13569() /* ty=Tensor[(16, 2, 14), float64] */
}

def @func_15944(%var_15943: Tensor[(4, 10, 13), float64]) -> Tensor[(4, 10, 13), float64] {
  %1524 = fn (%var_15932: Tensor[(4, 10, 13), float64]) -> Tensor[(4, 10, 13), float64] {
    %1521 = @func_8205() /* ty=Tensor[(1, 10, 13), float64] */;
    %1522 = cast(%1521, dtype="float64") /* ty=Tensor[(1, 10, 13), float64] */;
    %1523 = cast(%var_15932, dtype="float64") /* ty=Tensor[(4, 10, 13), float64] */;
    floor_mod(%1522, %1523) /* ty=Tensor[(4, 10, 13), float64] */
  };
  %1524(%var_15943) /* ty=Tensor[(4, 10, 13), float64] */
}

def @func_14876(%var_14860: Tensor[(16, 2, 14), float64]) -> Tensor[(16, 2, 14), uint64] {
  %1525 = @func_10863() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(7, 6, 13), float64]) */;
  %1526 = %1525.0;
  %1527 = cast(%var_14860, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %1528 = shape_of(%1526, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1529 = cast(%1526, dtype="uint64") /* ty=Tensor[(16, 2, 14), uint64] */;
  %1530 = dyn.reshape(%1527, %1528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%1529, %1530) /* ty=Tensor[(16, 2, 14), uint64] */
}

def @func_12989() -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float32], Tensor[(1, 6, 6), float64], Tensor[(900), float32], Tensor[(105), bool]) {
  %1551 = fn () -> (Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float32], Tensor[(1, 6, 6), float64], Tensor[(900), float32], Tensor[(105), bool]) {
    %1531 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
    %1532 = @func_12737() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %1533 = @func_10598() /* ty=(Tensor[(?, 10, 13), uint32],) */;
    %1534 = @func_7872() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
    %1535 = @func_8265() /* ty=(Tensor[(16, 2, 14), float64],) */;
    %1536 = @func_7756() /* ty=(Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool]) */;
    %1537 = @func_4098() /* ty=(Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float32]) */;
    %1538 = cast(meta[relay.Constant][44] /* ty=Tensor[(105), bool] */, dtype="bool") /* ty=Tensor[(105), bool] */;
    %1539 = reshape(%1538, newshape=[1, 105]) /* ty=Tensor[(1, 105), bool] */;
    %1540 = @func_11646(%1539) /* ty=(Tensor[(16, 2, 14), float32], Tensor[(?, 10, 13), uint32], Tensor[(900), float32], Tensor[(1, 105), bool], Tensor[(900), float32], Tensor[(16, 2, 14), float32]) */;
    %1541 = %1531.1;
    %1542 = %1532.0;
    %1543 = %1533.0;
    %1544 = %1534.0;
    %1545 = %1535.0;
    %1546 = @func_11852() /* ty=Tensor[(16, 2, 14), float64] */;
    %1547 = %1536.1;
    %1548 = %1537.1;
    %1549 = @func_11826() /* ty=Tensor[(1, 6, 6), float64] */;
    %1550 = %1540.4;
    (%1541, %1542, %1543, %1544, %1545, %1546, %1547, %1548, %1549, %1550, meta[relay.Constant][44] /* ty=Tensor[(105), bool] */)
  };
  %1551() /* ty=(Tensor[(16, 2, 14), float32], Tensor[(16, 2, 14), float64], Tensor[(?, 10, 13), uint32], Tensor[(?, 10, 13), uint32], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), float64], Tensor[(16, 2, 14), bool], Tensor[(16, 2, 14), float32], Tensor[(1, 6, 6), float64], Tensor[(900), float32], Tensor[(105), bool]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen663/build/output.py", line 5855, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:47:06] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

