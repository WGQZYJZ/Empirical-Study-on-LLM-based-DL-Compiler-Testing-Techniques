==========mod==========
#[version = "0.0.5"]
def @func_7389(%var_7337: Tensor[(8, 15, 8), bool], %var_7338: Tensor[(8, 15, 8), bool], %var_7349: Tensor[(308, 2), float32], %var_7350: Tensor[(150), float32], %var_7352: Tensor[(924), float32]) -> (Tensor[(8, 15, 8), bool], Tensor[(150), float32], float32, Tensor[(308, 2), float32], Tensor[(150), float32], Tensor[(1404, 1), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  %0 = cast(%var_7338, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %1 = shape_of(%var_7337, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(%var_7337, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %4 = cast(1.64169f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %5 = cast(%var_7349, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %6 = cast(%var_7350, dtype="float32") /* ty=Tensor[(150), float32] */;
  %7 = cast(%var_7349, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
  %8 = cast(meta[relay.Constant][0] /* ty=Tensor[(1404, 1), float64] */, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
  %9 = cast(%var_7352, dtype="float32") /* ty=Tensor[(924), float32] */;
  %10 = reshape(%4, newshape=[]) /* ty=float32 */;
  %11 = reshape(%5, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %12 = reshape(%6, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %13 = reshape(%7, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %14 = reshape(%8, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %15 = reshape(%9, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %16 = @func_5128(%10, %11, %12, %13, %14, %15) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */;
  %17 = cast(meta[relay.Constant][1] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %18 = reshape(%17, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %19 = logical_and(%2, %3) /* ty=Tensor[(8, 15, 8), bool] */;
  %20 = %16.2;
  %21 = @func_230(%18) /* ty=Tensor[(6, 16, 2), bool] */;
  (%19, %20, 1.64169f /* ty=float32 */, %var_7349, %var_7350, meta[relay.Constant][0] /* ty=Tensor[(1404, 1), float64] */, %var_7352, %21, meta[relay.Constant][1] /* ty=Tensor[(192), float32] */)
}

def @func_7917(%var_7874: Tensor[(7, 14, 2), bool], %var_7895: Tensor[(924), float32], %var_7908: Tensor[(192), float64]) -> (Tensor[(7, 14, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(192), float64]) {
  %22 = @func_7333() /* ty=Tensor[(7, ?, 2), bool] */;
  %23 = cast(%22, dtype="bool") /* ty=Tensor[(7, ?, 2), bool] */;
  %24 = cast(%var_7874, dtype="bool") /* ty=Tensor[(7, 14, 2), bool] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %26 = cast(%var_7895, dtype="float32") /* ty=Tensor[(924), float32] */;
  %27 = reshape(%25, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float64] */;
  %28 = reshape(%26, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %29 = @func_1123(%27, %28) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */;
  %30 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %31 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %32 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
  %34 = cast(%var_7908, dtype="float64") /* ty=Tensor[(192), float64] */;
  %35 = reshape(%30, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %36 = reshape(%31, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %37 = reshape(%32, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %38 = reshape(%33, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %39 = reshape(%34, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float64] */;
  %40 = @func_371(%35, %36, %37, %38, %39) /* ty=(Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) */;
  %41 = not_equal(%23, %24) /* ty=Tensor[(7, 14, 2), bool] */;
  %42 = %29.1;
  %43 = %40.6;
  (%41, %42, meta[relay.Constant][2] /* ty=Tensor[(1, 770), float64] */, %var_7895, %43, meta[relay.Constant][3] /* ty=Tensor[(252), int64] */, %var_7908)
}

def @func_6902() -> (Tensor[(7, ?, 2), bool],) {
  %44 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
  (%44,)
}

def @func_10240() -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), float64]) {
  %45 = @func_8999() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %46 = @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %47 = %45.0;
  %48 = %46.0;
  (%47, %48)
}

def @func_8419() -> Tensor[(7, ?, 2), bool] {
  %49 = @func_7269() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */;
  %49.1
}

def @func_9635() -> (Tensor[(7, ?, 2), bool],) {
  %50 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %51 = %50.0;
  (%51,)
}

def @func_9206(%var_9129: Tensor[(3, 1, 8), float64], %var_9191: Tensor[(160), float32], %var_9192: Tensor[(1, 560), float32], %var_9194: Tensor[(420), float64], %var_9200: Tensor[(616), float32], %var_9201: Tensor[(25, 6), float32], %var_9202: Tensor[(18, 78), float64]) -> (Tensor[(3, 9, 8), uint16], Tensor[(7, ?, 2), float64], Tensor[(3, 9, 8), uint64], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(7, ?, 2), bool], Tensor[(4, 10, 4), float64], Tensor[(160), float32], Tensor[(1, 560), float32], Tensor[(1408), float32], Tensor[(420), float64], Tensor[(7, 8, 11), bool], float32, Tensor[(616), float32], Tensor[(25, 6), float32], Tensor[(18, 78), float64], Tensor[(924), float32]) {
  %52 = cast(%var_9129, dtype="float64") /* ty=Tensor[(3, 1, 8), float64] */;
  %53 = atan(%52) /* ty=Tensor[(3, 1, 8), float64] */;
  %54 = cast(%53, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
  %55 = exp(%54) /* ty=Tensor[(3, 1, 8), float32] */;
  %56 = cast(%55, dtype="uint16") /* ty=Tensor[(3, 1, 8), uint16] */;
  %57 = cast(meta[relay.Constant][4] /* ty=Tensor[(3, 9, 8), float32] */, dtype="uint16") /* ty=Tensor[(3, 9, 8), uint16] */;
  %58 = left_shift(%56, %57) /* ty=Tensor[(3, 9, 8), uint16] */;
  %59 = cast(%58, dtype="uint16") /* ty=Tensor[(3, 9, 8), uint16] */;
  %60 = cast(%53, dtype="uint16") /* ty=Tensor[(3, 1, 8), uint16] */;
  %61 = @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %62 = cast(%55, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
  %63 = log2(%62) /* ty=Tensor[(3, 1, 8), float32] */;
  %64 = cast(%63, dtype="uint64") /* ty=Tensor[(3, 1, 8), uint64] */;
  %65 = cast(%58, dtype="uint64") /* ty=Tensor[(3, 9, 8), uint64] */;
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %67 = reshape(%66, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
  %68 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %69 = cast(%var_9191, dtype="float32") /* ty=Tensor[(160), float32] */;
  %70 = cast(%var_9192, dtype="float32") /* ty=Tensor[(1, 560), float32] */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %72 = cast(%var_9194, dtype="float64") /* ty=Tensor[(420), float64] */;
  %73 = reshape(%69, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), float32] */;
  %74 = reshape(%70, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %75 = reshape(%71, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %76 = reshape(%72, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %77 = @func_7064(%73, %74, %75, %76) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */;
  %78 = cast(5.87371f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %79 = cast(%var_9200, dtype="float32") /* ty=Tensor[(616), float32] */;
  %80 = cast(%var_9201, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
  %81 = cast(%var_9200, dtype="float32") /* ty=Tensor[(616), float32] */;
  %82 = cast(%var_9202, dtype="float64") /* ty=Tensor[(18, 78), float64] */;
  %83 = cast(meta[relay.Constant][7] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %84 = reshape(%78, newshape=[]) /* ty=float32 */;
  %85 = reshape(%79, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %86 = reshape(%80, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %87 = reshape(%81, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %88 = reshape(%82, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %89 = reshape(%83, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %90 = @func_5128(%84, %85, %86, %87, %88, %89) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */;
  %91 = bitwise_xor(%59, %60) /* ty=Tensor[(3, 9, 8), uint16] */;
  %92 = %61.0;
  %93 = maximum(%64, %65) /* ty=Tensor[(3, 9, 8), uint64] */;
  %94 = @func_8785(%67) /* ty=Tensor[(9, 12, 8), float64] */;
  %95 = %68.0;
  %96 = %77.2;
  %97 = %90.3;
  (%91, %92, %93, %94, meta[relay.Constant][5] /* ty=Tensor[(864), float64] */, %95, %96, %var_9191, %var_9192, meta[relay.Constant][6] /* ty=Tensor[(1408), float32] */, %var_9194, %97, 5.87371f /* ty=float32 */, %var_9200, %var_9201, %var_9202, meta[relay.Constant][7] /* ty=Tensor[(924), float32] */)
}

def @func_9329() -> Tensor[(7, ?, 2), float64] {
  @func_8620() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_5881(%var_5846: Tensor[(1, 1, 3), int8], %var_5847: Tensor[(14, 3, 3), int8], %var_5852: Tensor[(8), float64], %var_5853: Tensor[(2, 896), float32], %var_5859: Tensor[(2, 896), float32], %var_5877: Tensor[(2, 896), float32]) -> (Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) {
  %98 = cast(%var_5846, dtype="bool") /* ty=Tensor[(1, 1, 3), bool] */;
  %99 = cast(%var_5847, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
  %100 = cast(%var_5852, dtype="float64") /* ty=Tensor[(8), float64] */;
  %101 = cast(%var_5853, dtype="float32") /* ty=Tensor[(2, 896), float32] */;
  %102 = reshape(%100, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
  %103 = reshape(%101, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %104 = @func_3452(%102, %103) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */;
  %105 = cast(%var_5859, dtype="bool") /* ty=Tensor[(2, 896), bool] */;
  %106 = shape_of(%var_5853, dtype="int32") /* ty=Tensor[(2), int32] */;
  %107 = cast(%var_5853, dtype="bool") /* ty=Tensor[(2, 896), bool] */;
  %108 = dyn.reshape(%105, %106, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %109 = cast(%var_5859, dtype="float32") /* ty=Tensor[(2, 896), float32] */;
  %110 = sqrt(%109) /* ty=Tensor[(2, 896), float32] */;
  %111 = cast(%var_5877, dtype="int16") /* ty=Tensor[(2, 896), int16] */;
  %112 = shape_of(%110, dtype="int32") /* ty=Tensor[(2), int32] */;
  %113 = cast(%110, dtype="int16") /* ty=Tensor[(2, 896), int16] */;
  %114 = dyn.reshape(%111, %112, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %115 = not_equal(%98, %99) /* ty=Tensor[(14, 3, 3), bool] */;
  %116 = %104.3;
  %117 = greater(%107, %108) /* ty=Tensor[(2, 896), bool] */;
  %118 = bitwise_or(%113, %114) /* ty=Tensor[(2, 896), int16] */;
  (%115, %116, %var_5852, %117, %118)
}

def @func_7188() -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) {
  %119 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %120 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %121 = %119.0;
  %122 = %120.0;
  (%121, %122)
}

def @func_11005(%var_10934: Tensor[(1792), float32]) -> (Tensor[(7, ?, 2), uint8], Tensor[(3), int8], Tensor[(126, 1), int8], Tensor[(4, 2), float64], Tensor[(1792), float32], Tensor[(22, 64), int16], Tensor[(7, ?, 2), float64]) {
  %123 = @func_9635() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %124 = %123.0;
  %125 = cast(%124, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
  %126 = rsqrt(%125) /* ty=Tensor[(7, ?, 2), float32] */;
  %127 = cast(%126, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
  %128 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %129 = cast(%124, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
  %130 = dyn.reshape(%127, %128, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %131 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 2), float64] */;
  %132 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %133 = reshape(%131, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
  %134 = reshape(%132, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %135 = @func_3452(%133, %134) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */;
  %136 = %135.1;
  %137 = cast(meta[relay.Constant][8] /* ty=Tensor[(3), int8] */, dtype="int8") /* ty=Tensor[(3), int8] */;
  %138 = cast(meta[relay.Constant][9] /* ty=Tensor[(126, 1), int8] */, dtype="int8") /* ty=Tensor[(126, 1), int8] */;
  %139 = cast(meta[relay.Constant][10] /* ty=Tensor[(4, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 2), float64] */;
  %140 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %141 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %142 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %143 = reshape(%137, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), int8] */;
  %144 = reshape(%138, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int8] */;
  %145 = reshape(%139, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %146 = reshape(%140, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
  %147 = reshape(%141, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
  %148 = reshape(%142, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
  %149 = @func_5881(%143, %144, %145, %146, %147, %148) /* ty=(Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) */;
  %150 = %149.1;
  %151 = cast(%150, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %152 = shape_of(%136, dtype="int32") /* ty=Tensor[(2), int32] */;
  %153 = cast(%136, dtype="int16") /* ty=Tensor[(22, 64), int16] */;
  %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %155 = cast(%124, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %156 = right_shift(%129, %130) /* ty=Tensor[(7, ?, 2), uint8] */;
  %157 = right_shift(%153, %154) /* ty=Tensor[(22, 64), int16] */;
  %158 = atanh(%155) /* ty=Tensor[(7, ?, 2), float64] */;
  (%156, meta[relay.Constant][8] /* ty=Tensor[(3), int8] */, meta[relay.Constant][9] /* ty=Tensor[(126, 1), int8] */, meta[relay.Constant][10] /* ty=Tensor[(4, 2), float64] */, %var_10934, %157, %158)
}

def @func_2231(%var_2183: uint64, %var_2192: Tensor[(924), float32], %var_2210: Tensor[(1, 540), int16]) -> (Tensor[(15, 8, 1), uint64], Tensor[(6, 14, 11), float32], Tensor[(1404), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(5, 12, 9), bool], Tensor[(1, 540), int16], Tensor[(6, 14, 11), float32], Tensor[(770), float64]) {
  %159 = cast(%var_2183, dtype="uint64") /* ty=uint64 */;
  %160 = cast(meta[relay.Constant][11] /* ty=Tensor[(15, 8, 1), uint64] */, dtype="uint64") /* ty=Tensor[(15, 8, 1), uint64] */;
  %161 = cast(meta[relay.Constant][12] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %162 = cast(meta[relay.Constant][13] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %163 = cast(%var_2192, dtype="float32") /* ty=Tensor[(924), float32] */;
  %164 = cast(meta[relay.Constant][14] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %165 = reshape(%161, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %166 = reshape(%162, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %167 = reshape(%163, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %168 = reshape(%164, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %169 = @func_2073(%165, %166, %167, %168) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %170 = cast(%var_2210, dtype="int16") /* ty=Tensor[(1, 540), int16] */;
  %171 = reshape(%170, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), int16] */;
  %172 = cast(%var_2192, dtype="float32") /* ty=Tensor[(924), float32] */;
  %173 = reshape(%172, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %174 = @func_760(%173) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %175 = cast(meta[relay.Constant][13] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %176 = log2(%175) /* ty=Tensor[(770), float64] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(770), float64] */;
  %178 = add(%159, %160) /* ty=Tensor[(15, 8, 1), uint64] */;
  %179 = %169.6;
  %180 = @func_1855(%171) /* ty=Tensor[(5, 12, 9), bool] */;
  %181 = %174.0;
  %182 = asin(%177) /* ty=Tensor[(770), float64] */;
  (%178, %179, meta[relay.Constant][12] /* ty=Tensor[(1404), float64] */, %var_2192, meta[relay.Constant][14] /* ty=Tensor[(2496), float32] */, %180, %var_2210, %181, %182)
}

def @func_7963(%var_7935: Tensor[(10, 1, 12), int8], %var_7936: Tensor[(10, 2, 12), int8], %var_7949: Tensor[(1408), float32]) -> (Tensor[(10, 2, 12), bool], Tensor[(8, 11, 16), bool], Tensor[(1408), float32], Tensor[(10, 2, 12), float32]) {
  %183 = cast(%var_7935, dtype="bool") /* ty=Tensor[(10, 1, 12), bool] */;
  %184 = cast(%var_7936, dtype="bool") /* ty=Tensor[(10, 2, 12), bool] */;
  %185 = cast(%var_7949, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %186 = cast(%var_7949, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %187 = reshape(%185, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %188 = reshape(%186, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %189 = @func_1168(%187, %188) /* ty=(Tensor[(8, 11, 16), bool],) */;
  %190 = cast(%var_7936, dtype="float32") /* ty=Tensor[(10, 2, 12), float32] */;
  %191 = less_equal(%183, %184) /* ty=Tensor[(10, 2, 12), bool] */;
  %192 = %189.0;
  %193 = atan(%190) /* ty=Tensor[(10, 2, 12), float32] */;
  (%191, %192, %var_7949, %193)
}

def @func_7483(%var_7469: Tensor[(312, 8), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(312, 8), float32], Tensor[(16, 12, 13), float32]) {
  %194 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %195 = cast(%var_7469, dtype="float32") /* ty=Tensor[(312, 8), float32] */;
  %196 = reshape(%195, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %197 = @func_1982(%196) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %198 = %197.0;
  %199 = cast(%198, dtype="float32") /* ty=Tensor[(16, 12, 13), float32] */;
  %200 = %194.0;
  %201 = cosh(%199) /* ty=Tensor[(16, 12, 13), float32] */;
  (%200, %var_7469, %201)
}

def @func_10881() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) {
  %202 = @func_8401() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %203 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %204 = %202.0;
  %205 = %203.0;
  (%204, %205)
}

def @func_2673(%var_2658: Tensor[(5, 11, 14), float64], %var_2670: Tensor[(252), int64]) -> (Tensor[(5, 11, 14), float64], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(8, 24), float64]) {
  %206 = cast(%var_2658, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %207 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %208 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %209 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %210 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %211 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 24), float64] */, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %212 = reshape(%207, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %213 = reshape(%208, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %214 = reshape(%209, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %215 = reshape(%210, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %216 = reshape(%211, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float64] */;
  %217 = @func_371(%212, %213, %214, %215, %216) /* ty=(Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) */;
  %218 = log(%206) /* ty=Tensor[(5, 11, 14), float64] */;
  %219 = %217.9;
  (%218, %219, %var_2670, meta[relay.Constant][15] /* ty=Tensor[(8, 24), float64] */)
}

def @func_8785(%var_8779: Tensor[(9, 12, 8), float64]) -> Tensor[(9, 12, 8), float64] {
  %220 = cast(%var_8779, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  tan(%220) /* ty=Tensor[(9, 12, 8), float64] */
}

def @func_9619(%var_9569: Tensor[(810), bool], %var_9582: Tensor[(462), int8], %var_9585: Tensor[(160), float32], %var_9586: Tensor[(560), float32], %var_9587: Tensor[(1408), float32], %var_9588: Tensor[(420), float64]) -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(448, 4), float32], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408), float32], Tensor[(420), float64]) {
  %221 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %222 = cast(%var_9569, dtype="bool") /* ty=Tensor[(810), bool] */;
  %223 = reshape(%221, newshape=[]) /* ty=bool */;
  %224 = reshape(%222, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), bool] */;
  %225 = cast(%var_9582, dtype="int8") /* ty=Tensor[(462), int8] */;
  %226 = reshape(%225, newshape=[462]) /* ty=Tensor[(462), int8] */;
  %227 = @func_8249(%226) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(1404), float64], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) */;
  %228 = cast(%var_9585, dtype="float32") /* ty=Tensor[(160), float32] */;
  %229 = cast(%var_9586, dtype="float32") /* ty=Tensor[(560), float32] */;
  %230 = cast(%var_9587, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %231 = cast(%var_9588, dtype="float64") /* ty=Tensor[(420), float64] */;
  %232 = reshape(%228, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), float32] */;
  %233 = reshape(%229, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %234 = reshape(%230, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %235 = reshape(%231, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %236 = @func_7064(%232, %233, %234, %235) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */;
  %237 = @func_9329() /* ty=Tensor[(7, ?, 2), float64] */;
  %238 = @func_8620() /* ty=Tensor[(7, ?, 2), float64] */;
  %239 = @func_8151(%223, %224) /* ty=Tensor[(6, 15, 9), bool] */;
  %240 = %227.1;
  %241 = %236.4;
  (%237, %238, %239, True /* ty=bool */, %var_9569, %240, %var_9582, %241, %var_9585, %var_9586, %var_9587, %var_9588)
}

def @func_4263(%var_4258: Tensor[(9, 15, 4), uint64]) -> Tensor[(9, 15, 4), bool] {
  %242 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 15, 4), uint64] */, dtype="bool") /* ty=Tensor[(1, 15, 4), bool] */;
  %243 = cast(%var_4258, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  less_equal(%242, %243) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_10294() -> Tensor[(7, ?, 2), float64] {
  %244 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %244.0
}

def @func_10579(%var_10518: Tensor[(16, 48), float32], %var_10530: Tensor[(112), bool], %var_10538: Tensor[(924), float32], %var_10567: Tensor[(112), bool]) -> (Tensor[(7, ?, 2), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 48), float32], Tensor[(420), float64], Tensor[(308, 2), float32], Tensor[(960), bool], Tensor[(616), float32], Tensor[(150), float32], Tensor[(924), float32], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(16, 16, 3), float32], Tensor[(112), uint8]) {
  %245 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %246 = cast(%var_10518, dtype="float32") /* ty=Tensor[(16, 48), float32] */;
  %247 = cast(%var_10518, dtype="float32") /* ty=Tensor[(16, 48), float32] */;
  %248 = reshape(%246, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %249 = reshape(%247, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %250 = cast(%var_10530, dtype="bool") /* ty=Tensor[(112), bool] */;
  %251 = reshape(%250, newshape=[7, 8, 2]) /* ty=Tensor[(7, 8, 2), bool] */;
  %252 = @func_9386(%251) /* ty=(Tensor[(7, 8, 2), bool], Tensor[(420), float64], Tensor[(4, 15, 7), float64]) */;
  %253 = cast(meta[relay.Constant][17] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %254 = cast(meta[relay.Constant][17] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
  %255 = cast(meta[relay.Constant][18] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
  %256 = cast(meta[relay.Constant][19] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %257 = cast(%var_10538, dtype="float32") /* ty=Tensor[(924), float32] */;
  %258 = reshape(%253, newshape=[8, 15, 8]) /* ty=Tensor[(8, 15, 8), bool] */;
  %259 = reshape(%254, newshape=[8, 15, 8]) /* ty=Tensor[(8, 15, 8), bool] */;
  %260 = reshape(%255, newshape=[308, 2]) /* ty=Tensor[(308, 2), float32] */;
  %261 = reshape(%256, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %262 = reshape(%257, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %263 = @func_7389(%258, %259, %260, %261, %262) /* ty=(Tensor[(8, 15, 8), bool], Tensor[(150), float32], float32, Tensor[(308, 2), float32], Tensor[(150), float32], Tensor[(1404, 1), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
  %264 = cast(meta[relay.Constant][20] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
  %265 = reshape(%264, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
  %266 = cast(%var_10518, dtype="float32") /* ty=Tensor[(16, 48), float32] */;
  %267 = @func_5268(%248, %249) /* ty=Tensor[(16, 16, 3), float32] */;
  %268 = cast(%267, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
  %269 = reshape(%266, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %270 = reshape(%268, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %271 = cast(%var_10567, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %272 = shape_of(%var_10530, dtype="int32") /* ty=Tensor[(1), int32] */;
  %273 = cast(%var_10530, dtype="uint8") /* ty=Tensor[(112), uint8] */;
  %274 = dyn.reshape(%271, %272, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %275 = %245.0;
  %276 = %252.1;
  %277 = %263.3;
  %278 = @func_8785(%265) /* ty=Tensor[(9, 12, 8), float64] */;
  %279 = @func_5268(%269, %270) /* ty=Tensor[(16, 16, 3), float32] */;
  %280 = maximum(%273, %274) /* ty=Tensor[(112), uint8] */;
  (%275, %267, %var_10518, %276, %277, meta[relay.Constant][17] /* ty=Tensor[(960), bool] */, meta[relay.Constant][18] /* ty=Tensor[(616), float32] */, meta[relay.Constant][19] /* ty=Tensor[(150), float32] */, %var_10538, %278, meta[relay.Constant][20] /* ty=Tensor[(864), float64] */, %279, %280)
}

def @func_8999() -> (Tensor[(7, ?, 2), bool],) {
  %281 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
  (%281,)
}

def @func_4981(%var_4921: Tensor[(4, 10, 3), int16], %var_4943: Tensor[(4, 10, 3), int16], %var_4951: Tensor[(1404), float64], %var_4952: Tensor[(770), float64], %var_4953: Tensor[(924), float32], %var_4954: Tensor[(2, 1248), float32]) -> (Tensor[(1408), float32], Tensor[(8, 11, 16), float64], Tensor[(11, 5, 14), float64], Tensor[(1404), float64], Tensor[(770), float64], Tensor[(924), float32], Tensor[(2, 1248), float32], Tensor[(4, 10, 3), int8], Tensor[(22, 64), float32], Tensor[(4, 448), float32]) {
  %282 = cast(meta[relay.Constant][21] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %283 = cast(meta[relay.Constant][21] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %284 = reshape(%282, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %285 = reshape(%283, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %286 = @func_1168(%284, %285) /* ty=(Tensor[(8, 11, 16), bool],) */;
  %287 = %286.0;
  %288 = cast(%287, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %289 = cast(%var_4951, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %290 = cast(%var_4952, dtype="float64") /* ty=Tensor[(770), float64] */;
  %291 = cast(%var_4953, dtype="float32") /* ty=Tensor[(924), float32] */;
  %292 = cast(%var_4954, dtype="float32") /* ty=Tensor[(2, 1248), float32] */;
  %293 = reshape(%289, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %294 = reshape(%290, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %295 = reshape(%291, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %296 = reshape(%292, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %297 = @func_2073(%293, %294, %295, %296) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %298 = cast(meta[relay.Constant][22] /* ty=Tensor[(4, 10, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 10, 3), int16] */;
  %299 = shape_of(%var_4921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(%var_4921, dtype="int16") /* ty=Tensor[(4, 10, 3), int16] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %302 = minimum(%300, %301) /* ty=Tensor[(4, 10, 3), int16] */;
  %303 = cast(%var_4943, dtype="uint16") /* ty=Tensor[(4, 10, 3), uint16] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="uint16") /* ty=Tensor[(4, 10, 3), uint16] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %307 = bitwise_or(%305, %306) /* ty=Tensor[(4, 10, 3), uint16] */;
  %308 = cast(%307, dtype="int8") /* ty=Tensor[(4, 10, 3), int8] */;
  %309 = shape_of(%var_4943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%var_4943, dtype="int8") /* ty=Tensor[(4, 10, 3), int8] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %312 = cast(meta[relay.Constant][23] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %313 = cast(meta[relay.Constant][21] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %314 = reshape(%312, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float32] */;
  %315 = reshape(%313, newshape=[22, 64]) /* ty=Tensor[(22, 64), float32] */;
  %316 = @func_1418(%314, %315) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */;
  %317 = erf(%288) /* ty=Tensor[(8, 11, 16), float64] */;
  %318 = %297.1;
  %319 = multiply(%310, %311) /* ty=Tensor[(4, 10, 3), int8] */;
  %320 = %316.2;
  (meta[relay.Constant][21] /* ty=Tensor[(1408), float32] */, %317, %318, %var_4951, %var_4952, %var_4953, %var_4954, %319, %320, meta[relay.Constant][23] /* ty=Tensor[(4, 448), float32] */)
}

def @func_5320(%var_5290: Tensor[(11, 6, 7), int8], %var_5299: Tensor[(3, 468), float64]) -> (Tensor[(11, 6, 7), int8], Tensor[(924, 1), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(156, 16), float32], Tensor[(3, 468), uint8], Tensor[(16, 12, 13), float64]) {
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(11, 6, 7), int8] */, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %322 = shape_of(%var_5290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%var_5290, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %325 = cast(%var_5299, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
  %326 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %327 = cast(meta[relay.Constant][26] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %328 = cast(meta[relay.Constant][27] /* ty=Tensor[(156, 16), float32] */, dtype="float32") /* ty=Tensor[(156, 16), float32] */;
  %329 = reshape(%325, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %330 = reshape(%326, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %331 = reshape(%327, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %332 = reshape(%328, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %333 = @func_2073(%329, %330, %331, %332) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %334 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 468), float64] */, dtype="uint8") /* ty=Tensor[(3, 468), uint8] */;
  %335 = shape_of(%var_5299, dtype="int32") /* ty=Tensor[(2), int32] */;
  %336 = cast(%var_5299, dtype="uint8") /* ty=Tensor[(3, 468), uint8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %338 = cast(meta[relay.Constant][27] /* ty=Tensor[(156, 16), float32] */, dtype="float32") /* ty=Tensor[(156, 16), float32] */;
  %339 = reshape(%338, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %340 = @func_1982(%339) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %341 = %340.0;
  %342 = cast(%341, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %343 = subtract(%323, %324) /* ty=Tensor[(11, 6, 7), int8] */;
  %344 = %333.3;
  %345 = subtract(%336, %337) /* ty=Tensor[(3, 468), uint8] */;
  %346 = acos(%342) /* ty=Tensor[(16, 12, 13), float64] */;
  (%343, %344, meta[relay.Constant][25] /* ty=Tensor[(1, 770), float64] */, meta[relay.Constant][26] /* ty=Tensor[(924), float32] */, meta[relay.Constant][27] /* ty=Tensor[(156, 16), float32] */, %345, %346)
}

def @func_9108() -> (Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) {
  %347 = @func_8401() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %348 = cast(meta[relay.Constant][29] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %349 = reshape(%348, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), float32] */;
  %350 = @func_3195(%349) /* ty=(Tensor[(10, 1, 15), float32],) */;
  %351 = %347.0;
  %352 = %350.0;
  (%351, %352, meta[relay.Constant][29] /* ty=Tensor[(150), float32] */)
}

def @func_10888() -> (Tensor[(7, ?, 2), float64],) {
  %353 = @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %354 = %353.0;
  (%354,)
}

def @func_10431() -> (Tensor[(7, ?, 2), float64],) {
  %355 = @func_8952() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %356 = %355.0;
  (%356,)
}

def @func_6931() -> (Tensor[(7, ?, 2), bool],) {
  %357 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %358 = %357.0;
  (%358,)
}

def @func_3195(%var_3181: Tensor[(10, 1, 15), float32]) -> (Tensor[(10, 1, 15), float32],) {
  %359 = cast(%var_3181, dtype="float32") /* ty=Tensor[(10, 1, 15), float32] */;
  %360 = log(%359) /* ty=Tensor[(10, 1, 15), float32] */;
  (%360,)
}

def @func_8055(%var_8011: Tensor[(252), int64], %var_8024: Tensor[(616), float32], %var_8025: Tensor[(150), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(192), float32], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(150), float32], float32, Tensor[(616), float32], Tensor[(150), float32], Tensor[(3, 468), float64], Tensor[(924), float32], Tensor[(7, ?, 2), bool]) {
  %361 = cast(meta[relay.Constant][30] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %362 = cast(%var_8011, dtype="int64") /* ty=Tensor[(252), int64] */;
  %363 = cast(meta[relay.Constant][31] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %364 = reshape(%361, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %365 = reshape(%362, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %366 = reshape(%363, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %367 = @func_7005(%364, %365, %366) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
  %368 = cast(4.23909f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %369 = cast(%var_8024, dtype="float32") /* ty=Tensor[(616), float32] */;
  %370 = cast(%var_8025, dtype="float32") /* ty=Tensor[(150), float32] */;
  %371 = cast(%var_8024, dtype="float32") /* ty=Tensor[(616), float32] */;
  %372 = cast(meta[relay.Constant][32] /* ty=Tensor[(3, 468), float64] */, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
  %373 = cast(meta[relay.Constant][33] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %374 = reshape(%368, newshape=[]) /* ty=float32 */;
  %375 = reshape(%369, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %376 = reshape(%370, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %377 = reshape(%371, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %378 = reshape(%372, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %379 = reshape(%373, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %380 = @func_5128(%374, %375, %376, %377, %378, %379) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */;
  %381 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %382 = @func_7333() /* ty=Tensor[(7, ?, 2), bool] */;
  %383 = %367.5;
  %384 = %380.2;
  %385 = %381.0;
  (%382, %383, meta[relay.Constant][30] /* ty=Tensor[(770), float64] */, %var_8011, meta[relay.Constant][31] /* ty=Tensor[(192), float32] */, %384, 4.23909f /* ty=float32 */, %var_8024, %var_8025, meta[relay.Constant][32] /* ty=Tensor[(3, 468), float64] */, meta[relay.Constant][33] /* ty=Tensor[(924), float32] */, %385)
}

def @func_8380(%var_8321: Tensor[(7, 2, 2), float64], %var_8338: Tensor[(7, 2, 2), float64], %var_8350: Tensor[(924), float32], %var_8376: Tensor[(2496), float32]) -> (Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), int8], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool], Tensor[(16, 12, 13), float32], Tensor[(2496), float32]) {
  %386 = @func_8122() /* ty=Tensor[(7, ?, 2), float64] */;
  %387 = cast(%386, dtype="bool") /* ty=Tensor[(7, ?, 2), bool] */;
  %388 = cast(%var_8321, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %389 = cast(%var_8338, dtype="int8") /* ty=Tensor[(7, 2, 2), int8] */;
  %390 = shape_of(%var_8321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%var_8321, dtype="int8") /* ty=Tensor[(7, 2, 2), int8] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %393 = cast(%var_8350, dtype="float32") /* ty=Tensor[(924), float32] */;
  %394 = reshape(%393, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %395 = @func_760(%394) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %396 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %397 = @func_7735() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %398 = cast(%var_8376, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %399 = reshape(%398, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %400 = @func_1982(%399) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %401 = less_equal(%387, %388) /* ty=Tensor[(7, 2, 2), bool] */;
  %402 = logical_xor(%391, %392) /* ty=Tensor[(7, 2, 2), int8] */;
  %403 = %395.0;
  %404 = %396.0;
  %405 = %397.0;
  %406 = %400.0;
  (%401, %402, %403, %var_8350, %404, %405, %406, %var_8376)
}

def @func_9283() -> Tensor[(7, ?, 2), bool] {
  @func_8292() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_8249(%var_8217: Tensor[(462), int8]) -> (Tensor[(7, ?, 2), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(1404), float64], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) {
  %407 = cast(%var_8217, dtype="int8") /* ty=Tensor[(462), int8] */;
  %408 = cast(meta[relay.Constant][34] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %409 = reshape(%407, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int8] */;
  %410 = reshape(%408, newshape=[3, 468]) /* ty=Tensor[(3, 468), float64] */;
  %411 = @func_5320(%409, %410) /* ty=(Tensor[(11, 6, 7), int8], Tensor[(924, 1), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(156, 16), float32], Tensor[(3, 468), uint8], Tensor[(16, 12, 13), float64]) */;
  %412 = cast(meta[relay.Constant][35] /* ty=Tensor[(540), uint64] */, dtype="uint64") /* ty=Tensor[(540), uint64] */;
  %413 = reshape(%412, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), uint64] */;
  %414 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
  %415 = %411.0;
  %416 = @func_4263(%413) /* ty=Tensor[(9, 15, 4), bool] */;
  (%414, %415, %var_8217, meta[relay.Constant][34] /* ty=Tensor[(1404), float64] */, %416, meta[relay.Constant][35] /* ty=Tensor[(540), uint64] */)
}

def @func_371(%var_278: Tensor[(14, 2, 9), int64], %var_279: Tensor[(14, 2, 9), int64], %var_313: Tensor[(14, 2, 9), int64], %var_324: Tensor[(14, 2, 9), int64], %var_353: Tensor[(6, 16, 2), float64]) -> (Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) {
  %417 = cast(%var_279, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %418 = shape_of(%var_278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_278, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %421 = cast(%var_278, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
  %422 = shape_of(%var_279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %423 = cast(%var_279, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %425 = cast(%var_313, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %426 = shape_of(%var_278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %427 = cast(%var_278, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %428 = dyn.reshape(%425, %426, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %429 = cast(%var_324, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %430 = shape_of(%var_279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%var_279, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %434 = reshape(%433, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %435 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %436 = reshape(%435, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %437 = cast(meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %438 = reshape(%437, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %439 = @func_230(%438) /* ty=Tensor[(6, 16, 2), bool] */;
  %440 = cast(%439, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %441 = log(%440) /* ty=Tensor[(6, 16, 2), float64] */;
  %442 = cast(%var_353, dtype="uint64") /* ty=Tensor[(6, 16, 2), uint64] */;
  %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
  %444 = cast(%441, dtype="uint64") /* ty=Tensor[(6, 16, 2), uint64] */;
  %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %446 = add(%444, %445) /* ty=Tensor[(6, 16, 2), uint64] */;
  %447 = cast(%446, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  %448 = reshape(%447, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %449 = cast(%441, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  %450 = reshape(%449, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %451 = cast(%441, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %452 = asin(%451) /* ty=Tensor[(6, 16, 2), float64] */;
  %453 = cast(%452, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  %454 = reshape(%453, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %455 = equal(%419, %420) /* ty=Tensor[(14, 2, 9), bool] */;
  %456 = bitwise_or(%423, %424) /* ty=Tensor[(14, 2, 9), uint8] */;
  %457 = less(%427, %428) /* ty=Tensor[(14, 2, 9), bool] */;
  %458 = not_equal(%431, %432) /* ty=Tensor[(14, 2, 9), bool] */;
  %459 = @func_230(%434) /* ty=Tensor[(6, 16, 2), bool] */;
  %460 = @func_230(%436) /* ty=Tensor[(6, 16, 2), bool] */;
  %461 = @func_230(%448) /* ty=Tensor[(6, 16, 2), bool] */;
  %462 = @func_230(%450) /* ty=Tensor[(6, 16, 2), bool] */;
  %463 = @func_230(%454) /* ty=Tensor[(6, 16, 2), bool] */;
  (%455, %456, meta[relay.Constant][36] /* ty=Tensor[(192), float32] */, %457, %458, %459, %460, %446, %461, %462, %452, %463)
}

def @func_7269() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  %464 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %465 = %464.0;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %467 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %468 = sin(%466) /* ty=Tensor[(7, ?, 2), float64] */;
  %469 = %467.0;
  (%468, %469)
}

def @func_8764(%var_8742: Tensor[(120), int16], %var_8743: Tensor[(14, 66), float32], %var_8744: Tensor[(560), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(7, 15, 2), uint32], Tensor[(210), uint32], Tensor[(6, 16, 2), bool], Tensor[(192), float32], Tensor[(7, ?, 2), bool], Tensor[(120), int16], Tensor[(14, 66), float32], Tensor[(560), float32]) {
  %470 = @func_7188() /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) */;
  %471 = cast(meta[relay.Constant][37] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
  %472 = reshape(%471, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), uint32] */;
  %473 = @func_5615(%472) /* ty=(Tensor[(7, 15, 2), uint32],) */;
  %474 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %475 = reshape(%474, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %476 = cast(%var_8742, dtype="int16") /* ty=Tensor[(120), int16] */;
  %477 = cast(%var_8743, dtype="float32") /* ty=Tensor[(14, 66), float32] */;
  %478 = cast(%var_8744, dtype="float32") /* ty=Tensor[(560), float32] */;
  %479 = reshape(%476, newshape=[120]) /* ty=Tensor[(120), int16] */;
  %480 = reshape(%477, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %481 = reshape(%478, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %482 = @func_7136(%479, %480, %481) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(2, 1248), float32], Tensor[(120), int16], Tensor[(770), float64], Tensor[(312, 8), float32], Tensor[(924, 1404), bool], Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32]) */;
  %483 = %470.0;
  %484 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
  %485 = %473.0;
  %486 = @func_230(%475) /* ty=Tensor[(6, 16, 2), bool] */;
  %487 = %482.0;
  (%483, %484, %485, meta[relay.Constant][37] /* ty=Tensor[(210), uint32] */, %486, meta[relay.Constant][38] /* ty=Tensor[(192), float32] */, %487, %var_8742, %var_8743, %var_8744)
}

def @func_4770(%var_4758: Tensor[(11, 1, 9), int8], %var_4764: Tensor[(420), float64]) -> (Tensor[(11, 10, 9), int8], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) {
  %488 = cast(%var_4758, dtype="int8") /* ty=Tensor[(11, 1, 9), int8] */;
  %489 = cast(meta[relay.Constant][39] /* ty=Tensor[(11, 10, 9), int8] */, dtype="int8") /* ty=Tensor[(11, 10, 9), int8] */;
  %490 = cast(%var_4764, dtype="float64") /* ty=Tensor[(420), float64] */;
  %491 = reshape(%490, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %492 = @func_1697(%491) /* ty=(Tensor[(4, 15, 7), float64],) */;
  %493 = bitwise_or(%488, %489) /* ty=Tensor[(11, 10, 9), int8] */;
  %494 = %492.0;
  (%493, %494, %var_4764)
}

def @func_8674() -> (Tensor[(7, ?, 2), float64],) {
  %495 = @func_8122() /* ty=Tensor[(7, ?, 2), float64] */;
  (%495,)
}

def @main(%var_11028: Tensor[(7, 16, 2), bool]) -> Tensor[(7, 16, 2), uint16] {
  %496 = @func_9283() /* ty=Tensor[(7, ?, 2), bool] */;
  %497 = cast(%496, dtype="uint16") /* ty=Tensor[(7, ?, 2), uint16] */;
  %498 = cast(%var_11028, dtype="uint16") /* ty=Tensor[(7, 16, 2), uint16] */;
  left_shift(%497, %498) /* ty=Tensor[(7, 16, 2), uint16] */
}

def @func_7136(%var_7115: Tensor[(120), int16], %var_7118: Tensor[(924, 1), float32], %var_7128: Tensor[(560, 1), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(2, 1248), float32], Tensor[(120), int16], Tensor[(770), float64], Tensor[(312, 8), float32], Tensor[(924, 1404), bool], Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32]) {
  %499 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %500 = cast(%var_7115, dtype="int16") /* ty=Tensor[(120), int16] */;
  %501 = cast(%var_7115, dtype="int16") /* ty=Tensor[(120), int16] */;
  %502 = cast(meta[relay.Constant][40] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %503 = cast(meta[relay.Constant][41] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %504 = cast(%var_7118, dtype="float32") /* ty=Tensor[(924, 1), float32] */;
  %505 = cast(meta[relay.Constant][42] /* ty=Tensor[(312, 8), float32] */, dtype="float32") /* ty=Tensor[(312, 8), float32] */;
  %506 = reshape(%500, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int16] */;
  %507 = reshape(%501, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int16] */;
  %508 = reshape(%502, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %509 = reshape(%503, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %510 = reshape(%504, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %511 = reshape(%505, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), float32] */;
  %512 = @func_4981(%506, %507, %508, %509, %510, %511) /* ty=(Tensor[(1408), float32], Tensor[(8, 11, 16), float64], Tensor[(11, 5, 14), float64], Tensor[(1404), float64], Tensor[(770), float64], Tensor[(924), float32], Tensor[(2, 1248), float32], Tensor[(4, 10, 3), int8], Tensor[(22, 64), float32], Tensor[(4, 448), float32]) */;
  %513 = cast(meta[relay.Constant][40] /* ty=Tensor[(1404), float64] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
  %514 = cast(%var_7118, dtype="bool") /* ty=Tensor[(924, 1), bool] */;
  %515 = cast(%var_7128, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %516 = reshape(%515, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), float32] */;
  %517 = @func_6207(%516) /* ty=(Tensor[(5, 14, 8), uint16],) */;
  %518 = %499.0;
  %519 = %512.6;
  %520 = logical_and(%513, %514) /* ty=Tensor[(924, 1404), bool] */;
  %521 = %517.0;
  (%518, %519, %var_7115, meta[relay.Constant][41] /* ty=Tensor[(770), float64] */, meta[relay.Constant][42] /* ty=Tensor[(312, 8), float32] */, %520, %521, %var_7128)
}

def @func_9689(%var_9672: Tensor[(14, 12, 5), float64], %var_9687: Tensor[(768), float32]) -> (Tensor[(14, 12, 5), float64], Tensor[(16, 16, 3), float32], Tensor[(768), float32]) {
  %522 = cast(%var_9672, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %523 = cast(%var_9687, dtype="float32") /* ty=Tensor[(768), float32] */;
  %524 = cast(%var_9687, dtype="float32") /* ty=Tensor[(768), float32] */;
  %525 = reshape(%523, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %526 = reshape(%524, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %527 = log(%522) /* ty=Tensor[(14, 12, 5), float64] */;
  %528 = @func_5268(%525, %526) /* ty=Tensor[(16, 16, 3), float32] */;
  (%527, %528, %var_9687)
}

def @func_9906() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  %529 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %530 = @func_9329() /* ty=Tensor[(7, ?, 2), float64] */;
  %531 = %529.0;
  (%530, %531)
}

def @func_8620() -> Tensor[(7, ?, 2), float64] {
  @func_8068() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_8122() -> Tensor[(7, ?, 2), float64] {
  @func_8068() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_9436(%var_9421: Tensor[(7, 11, 2), float64]) -> (Tensor[(7, 11, 2), int8], Tensor[(7, ?, 2), bool]) {
  %532 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %533 = %532.0;
  %534 = cast(%533, dtype="int8") /* ty=Tensor[(7, ?, 2), int8] */;
  %535 = cast(%var_9421, dtype="int8") /* ty=Tensor[(7, 11, 2), int8] */;
  %536 = @func_7735() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %537 = maximum(%534, %535) /* ty=Tensor[(7, 11, 2), int8] */;
  %538 = %536.0;
  (%537, %538)
}

def @func_1982(%var_1972: Tensor[(16, 12, 13), float32]) -> (Tensor[(16, 12, 13), float32],) {
  %539 = cast(%var_1972, dtype="float32") /* ty=Tensor[(16, 12, 13), float32] */;
  %540 = atan(%539) /* ty=Tensor[(16, 12, 13), float32] */;
  (%540,)
}

def @func_3452(%var_3438: Tensor[(1, 4, 2), float64], %var_3445: Tensor[(1792), float32]) -> (Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) {
  %541 = cast(%var_3438, dtype="float64") /* ty=Tensor[(1, 4, 2), float64] */;
  %542 = asinh(%541) /* ty=Tensor[(1, 4, 2), float64] */;
  %543 = cast(%var_3438, dtype="int16") /* ty=Tensor[(1, 4, 2), int16] */;
  %544 = shape_of(%542, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%542, dtype="int16") /* ty=Tensor[(1, 4, 2), int16] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %547 = cast(%var_3445, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %548 = cast(meta[relay.Constant][43] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %549 = reshape(%547, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float32] */;
  %550 = reshape(%548, newshape=[22, 64]) /* ty=Tensor[(22, 64), float32] */;
  %551 = @func_1418(%549, %550) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */;
  %552 = maximum(%545, %546) /* ty=Tensor[(?, 4, 2), int16] */;
  %553 = %551.2;
  (%552, %553, %var_3445, meta[relay.Constant][43] /* ty=Tensor[(1408), float32] */)
}

def @func_8681() -> (Tensor[(7, ?, 2), bool],) {
  %554 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %555 = %554.0;
  (%555,)
}

def @func_10503(%var_10465: Tensor[(924), float32], %var_10479: Tensor[(770), float64], %var_10487: Tensor[(2496), float32]) -> (Tensor[(7, 3, 2), int16], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(770), float64], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(7, 3, 2), float32]) {
  %556 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %557 = %556.0;
  %558 = cast(%557, dtype="int16") /* ty=Tensor[(7, ?, 2), int16] */;
  %559 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 3, 2), float64] */, dtype="int16") /* ty=Tensor[(7, 3, 2), int16] */;
  %560 = cast(%var_10465, dtype="float32") /* ty=Tensor[(924), float32] */;
  %561 = reshape(%560, newshape=[1, 924]) /* ty=Tensor[(1, 924), float32] */;
  %562 = @func_2921(%561) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float64], Tensor[(6, 14, 11), float32], Tensor[(1, 924), float32]) */;
  %563 = cast(%var_10479, dtype="float64") /* ty=Tensor[(770), float64] */;
  %564 = cast(%var_10465, dtype="float32") /* ty=Tensor[(924), float32] */;
  %565 = reshape(%563, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float64] */;
  %566 = reshape(%564, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %567 = @func_1123(%565, %566) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */;
  %568 = cast(%var_10487, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %569 = reshape(%568, newshape=[312, 8]) /* ty=Tensor[(312, 8), float32] */;
  %570 = @func_7483(%569) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(312, 8), float32], Tensor[(16, 12, 13), float32]) */;
  %571 = cast(meta[relay.Constant][44] /* ty=Tensor[(7, 3, 2), float64] */, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %572 = left_shift(%558, %559) /* ty=Tensor[(7, 3, 2), int16] */;
  %573 = %562.2;
  %574 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  %575 = %567.1;
  %576 = %570.2;
  %577 = sigmoid(%571) /* ty=Tensor[(7, 3, 2), float32] */;
  (%572, %573, %var_10465, %574, %575, %var_10479, %576, %var_10487, %577)
}

def @func_8205(%var_8186: Tensor[(5, 1, 7), float32]) -> (Tensor[(5, 1, 7), float32],) {
  %578 = cast(%var_8186, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %579 = atan(%578) /* ty=Tensor[(5, 1, 7), float32] */;
  (%579,)
}

def @func_9985(%var_9967: Tensor[(7, 7, 2), float64]) -> (Tensor[(7, 7, 2), float64],) {
  %580 = @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */;
  %581 = %580.0;
  %582 = cast(%581, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %583 = cast(%var_9967, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
  %584 = power(%582, %583) /* ty=Tensor[(7, 7, 2), float64] */;
  (%584,)
}

def @func_1418(%var_1409: Tensor[(8, 14, 16), float32], %var_1413: Tensor[(22, 64), float32]) -> (Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) {
  %585 = cast(%var_1409, dtype="float32") /* ty=Tensor[(8, 14, 16), float32] */;
  %586 = cast(%var_1413, dtype="float32") /* ty=Tensor[(22, 64), float32] */;
  %587 = cast(%var_1413, dtype="float32") /* ty=Tensor[(22, 64), float32] */;
  %588 = reshape(%586, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %589 = reshape(%587, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %590 = @func_1168(%588, %589) /* ty=(Tensor[(8, 11, 16), bool],) */;
  %591 = log2(%585) /* ty=Tensor[(8, 14, 16), float32] */;
  %592 = %590.0;
  (%591, %592, %var_1413)
}

def @func_10374() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  %593 = @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */;
  %594 = %593.0;
  %595 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  (%594, %595)
}

def @func_1123(%var_1111: Tensor[(11, 5, 14), float64], %var_1121: Tensor[(154, 6), float32]) -> (Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) {
  %596 = cast(%var_1111, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %597 = cast(%var_1121, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
  %598 = reshape(%597, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %599 = @func_760(%598) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %600 = atanh(%596) /* ty=Tensor[(11, 5, 14), float64] */;
  %601 = %599.0;
  (%600, %601, %var_1121)
}

def @func_8483(%var_8436: Tensor[(55, 6), float64], %var_8437: Tensor[(420), float64], %var_8438: Tensor[(392), float32], %var_8442: Tensor[(252), int64]) -> (uint64, Tensor[(55, 6), float64], Tensor[(420), float64], Tensor[(392), float32], Tensor[(6, 16, 2), bool], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(7, ?, 2), uint8], Tensor[(16, 16, 3), float32], Tensor[(2, 384), float32]) {
  %602 = cast(%var_8436, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %603 = cast(%var_8436, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
  %604 = cast(%var_8437, dtype="float64") /* ty=Tensor[(420), float64] */;
  %605 = cast(%var_8438, dtype="float32") /* ty=Tensor[(392), float32] */;
  %606 = reshape(%602, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %607 = reshape(%603, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %608 = reshape(%604, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %609 = reshape(%605, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %610 = @func_2786(%606, %607, %608, %609) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) */;
  %611 = cast(meta[relay.Constant][45] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %612 = cast(%var_8442, dtype="int64") /* ty=Tensor[(252), int64] */;
  %613 = cast(meta[relay.Constant][46] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %614 = reshape(%611, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %615 = reshape(%612, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %616 = reshape(%613, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %617 = @func_7005(%614, %615, %616) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
  %618 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  %619 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %620 = %619.0;
  %621 = cast(%620, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
  %622 = shape_of(%618, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%618, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %625 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 384), float32] */, dtype="float32") /* ty=Tensor[(2, 384), float32] */;
  %626 = cast(meta[relay.Constant][47] /* ty=Tensor[(2, 384), float32] */, dtype="float32") /* ty=Tensor[(2, 384), float32] */;
  %627 = reshape(%625, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %628 = reshape(%626, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %629 = %610.7;
  %630 = %617.4;
  %631 = bitwise_or(%623, %624) /* ty=Tensor[(7, ?, 2), uint8] */;
  %632 = @func_5268(%627, %628) /* ty=Tensor[(16, 16, 3), float32] */;
  (%629, %var_8436, %var_8437, %var_8438, %630, meta[relay.Constant][45] /* ty=Tensor[(770), float64] */, %var_8442, meta[relay.Constant][46] /* ty=Tensor[(192), float32] */, %631, %632, meta[relay.Constant][47] /* ty=Tensor[(2, 384), float32] */)
}

def @func_9726(%var_9708: Tensor[(420), float64]) -> (Tensor[(7, ?, 2), bool], Tensor[(4, 15, 7), float64], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408, 1), float32], Tensor[(420), float64]) {
  %633 = @func_8999() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %634 = cast(meta[relay.Constant][48] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %635 = cast(meta[relay.Constant][49] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %636 = cast(meta[relay.Constant][50] /* ty=Tensor[(1408, 1), float32] */, dtype="float32") /* ty=Tensor[(1408, 1), float32] */;
  %637 = cast(%var_9708, dtype="float64") /* ty=Tensor[(420), float64] */;
  %638 = reshape(%634, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), float32] */;
  %639 = reshape(%635, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %640 = reshape(%636, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %641 = reshape(%637, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %642 = @func_7064(%638, %639, %640, %641) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */;
  %643 = %633.0;
  %644 = %642.6;
  (%643, %644, meta[relay.Constant][48] /* ty=Tensor[(160), float32] */, meta[relay.Constant][49] /* ty=Tensor[(560), float32] */, meta[relay.Constant][50] /* ty=Tensor[(1408, 1), float32] */, %var_9708)
}

def @func_7735() -> (Tensor[(7, ?, 2), bool],) {
  %645 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %646 = %645.0;
  (%646,)
}

def @func_10102() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) {
  %647 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %648 = @func_8952() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %649 = %647.0;
  %650 = %648.0;
  (%649, %650)
}

def @func_7788() -> (Tensor[(7, ?, 2), float64],) {
  %651 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %652 = %651.0;
  %653 = cast(%652, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %654 = sinh(%653) /* ty=Tensor[(7, ?, 2), float64] */;
  (%654,)
}

def @func_8151(%var_8146: bool, %var_8147: Tensor[(6, 15, 9), bool]) -> Tensor[(6, 15, 9), bool] {
  %655 = cast(%var_8146, dtype="bool") /* ty=bool */;
  %656 = cast(%var_8147, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  logical_or(%655, %656) /* ty=Tensor[(6, 15, 9), bool] */
}

def @func_10854(%var_10781: Tensor[(3, 15, 7), float32], %var_10812: Tensor[(924), float32], %var_10827: Tensor[(8), float64]) -> (Tensor[(3, 15, 7), float32], Tensor[(7, 2, 2), bool], Tensor[(28), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(3, 15, 7), uint32], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(1792), float32], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) {
  %657 = cast(%var_10781, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %658 = sigmoid(%657) /* ty=Tensor[(3, 15, 7), float32] */;
  %659 = cast(%658, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %660 = cast(meta[relay.Constant][51] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %661 = cast(meta[relay.Constant][51] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %662 = cast(%var_10812, dtype="float32") /* ty=Tensor[(924), float32] */;
  %663 = cast(meta[relay.Constant][52] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %664 = reshape(%660, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %665 = reshape(%661, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %666 = reshape(%662, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %667 = reshape(%663, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %668 = @func_8380(%664, %665, %666, %667) /* ty=(Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), int8], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool], Tensor[(16, 12, 13), float32], Tensor[(2496), float32]) */;
  %669 = cast(%658, dtype="uint32") /* ty=Tensor[(3, 15, 7), uint32] */;
  %670 = shape_of(%var_10781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %671 = cast(%var_10781, dtype="uint32") /* ty=Tensor[(3, 15, 7), uint32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %673 = cast(%var_10827, dtype="float64") /* ty=Tensor[(8), float64] */;
  %674 = cast(meta[relay.Constant][53] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %675 = reshape(%673, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
  %676 = reshape(%674, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %677 = @func_3452(%675, %676) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */;
  %678 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %679 = cast(meta[relay.Constant][54] /* ty=Tensor[(810), bool] */, dtype="bool") /* ty=Tensor[(810), bool] */;
  %680 = reshape(%678, newshape=[]) /* ty=bool */;
  %681 = reshape(%679, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), bool] */;
  %682 = cast(meta[relay.Constant][55] /* ty=Tensor[(540), uint64] */, dtype="uint64") /* ty=Tensor[(540), uint64] */;
  %683 = reshape(%682, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), uint64] */;
  %684 = acos(%659) /* ty=Tensor[(3, 15, 7), float32] */;
  %685 = %668.0;
  %686 = minimum(%671, %672) /* ty=Tensor[(3, 15, 7), uint32] */;
  %687 = %677.3;
  %688 = @func_8151(%680, %681) /* ty=Tensor[(6, 15, 9), bool] */;
  %689 = @func_4263(%683) /* ty=Tensor[(9, 15, 4), bool] */;
  (%684, %685, meta[relay.Constant][51] /* ty=Tensor[(28), float64] */, %var_10812, meta[relay.Constant][52] /* ty=Tensor[(2496), float32] */, %686, %687, %var_10827, meta[relay.Constant][53] /* ty=Tensor[(1792), float32] */, %688, True /* ty=bool */, meta[relay.Constant][54] /* ty=Tensor[(810), bool] */, %689, meta[relay.Constant][55] /* ty=Tensor[(540), uint64] */)
}

def @func_8292() -> Tensor[(7, ?, 2), bool] {
  %690 = @func_7269() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */;
  %690.1
}

def @func_7159() -> (Tensor[(7, ?, 2), bool],) {
  %691 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %692 = %691.0;
  (%692,)
}

def @func_7005(%var_6967: Tensor[(770), float64], %var_6968: Tensor[(252), int64], %var_6986: Tensor[(192), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  %693 = cast(%var_6967, dtype="float64") /* ty=Tensor[(770), float64] */;
  %694 = cast(%var_6968, dtype="int64") /* ty=Tensor[(252), int64] */;
  %695 = reshape(%693, newshape=[5, 11, 14]) /* ty=Tensor[(5, 11, 14), float64] */;
  %696 = reshape(%694, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %697 = @func_2673(%695, %696) /* ty=(Tensor[(5, 11, 14), float64], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(8, 24), float64]) */;
  %698 = cast(%var_6986, dtype="float32") /* ty=Tensor[(192), float32] */;
  %699 = reshape(%698, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %700 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
  %701 = %697.2;
  %702 = @func_230(%699) /* ty=Tensor[(6, 16, 2), bool] */;
  (%700, %701, %var_6967, %var_6968, %702, %var_6986)
}

def @func_1697(%var_1683: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64],) {
  %703 = cast(%var_1683, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %704 = log2(%703) /* ty=Tensor[(4, 15, 7), float64] */;
  (%704,)
}

def @func_8584(%var_8573: Tensor[(3), int8], %var_8576: Tensor[(1792), float32]) -> (Tensor[(7, ?, 2), uint32], Tensor[(1408), float32], Tensor[(3), int8], Tensor[(126), int8], Tensor[(8), float64], Tensor[(1792), float32]) {
  %705 = @func_7735() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %706 = %705.0;
  %707 = cast(%706, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %708 = sigmoid(%707) /* ty=Tensor[(7, ?, 2), float64] */;
  %709 = cast(%706, dtype="uint32") /* ty=Tensor[(7, ?, 2), uint32] */;
  %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
  %711 = cast(%708, dtype="uint32") /* ty=Tensor[(7, ?, 2), uint32] */;
  %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %713 = cast(%var_8573, dtype="int8") /* ty=Tensor[(3), int8] */;
  %714 = cast(meta[relay.Constant][56] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
  %715 = cast(meta[relay.Constant][57] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
  %716 = cast(%var_8576, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %717 = cast(%var_8576, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %718 = cast(%var_8576, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %719 = reshape(%713, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), int8] */;
  %720 = reshape(%714, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int8] */;
  %721 = reshape(%715, newshape=[8]) /* ty=Tensor[(8), float64] */;
  %722 = reshape(%716, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
  %723 = reshape(%717, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
  %724 = reshape(%718, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
  %725 = @func_5881(%719, %720, %721, %722, %723, %724) /* ty=(Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) */;
  %726 = bitwise_and(%711, %712) /* ty=Tensor[(7, ?, 2), uint32] */;
  %727 = %725.1;
  (%726, %727, %var_8573, meta[relay.Constant][56] /* ty=Tensor[(126), int8] */, meta[relay.Constant][57] /* ty=Tensor[(8), float64] */, %var_8576)
}

def @func_5268(%var_5255: Tensor[(16, 16, 3), float32], %var_5256: Tensor[(16, 16, 3), float32]) -> Tensor[(16, 16, 3), float32] {
  %728 = cast(%var_5256, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
  %729 = shape_of(%var_5255, dtype="int32") /* ty=Tensor[(3), int32] */;
  %730 = cast(%var_5255, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
  %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  add(%730, %731) /* ty=Tensor[(16, 16, 3), float32] */
}

def @func_6870() -> Tensor[(7, ?, 2), bool] {
  %732 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  %733 = acosh(%732) /* ty=Tensor[(7, 1, 2), float32] */;
  %734 = cast(meta[relay.Constant][58] /* ty=Tensor[(7, 1, 2), float32] */, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %735 = shape_of(%733, dtype="int32") /* ty=Tensor[(3), int32] */;
  %736 = cast(%733, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %737 = dyn.reshape(%734, %735, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%736, %737) /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_2073(%var_2039: Tensor[(13, 12, 9), float64], %var_2049: Tensor[(770), float64], %var_2050: Tensor[(924, 1), float32], %var_2063: Tensor[(2496), float32]) -> (Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) {
  %738 = cast(%var_2039, dtype="float64") /* ty=Tensor[(13, 12, 9), float64] */;
  %739 = sqrt(%738) /* ty=Tensor[(13, 12, 9), float64] */;
  %740 = cast(%739, dtype="float32") /* ty=Tensor[(13, 12, 9), float32] */;
  %741 = cast(%var_2049, dtype="float64") /* ty=Tensor[(770), float64] */;
  %742 = cast(%var_2050, dtype="float32") /* ty=Tensor[(924, 1), float32] */;
  %743 = reshape(%741, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float64] */;
  %744 = reshape(%742, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %745 = @func_1123(%743, %744) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */;
  %746 = cast(%var_2063, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %747 = reshape(%746, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %748 = @func_1982(%747) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %749 = cast(%var_2050, dtype="float32") /* ty=Tensor[(924, 1), float32] */;
  %750 = reshape(%749, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %751 = @func_760(%750) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %752 = log(%740) /* ty=Tensor[(13, 12, 9), float32] */;
  %753 = %745.0;
  %754 = %748.0;
  %755 = %751.0;
  (%752, %753, %var_2049, %var_2050, %754, %var_2063, %755)
}

def @func_10160(%var_10125: Tensor[(770), float64], %var_10126: Tensor[(252, 1), int64]) -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(770), float64], Tensor[(252, 1), int64], Tensor[(192), float32], Tensor[(7, ?, 2), float64]) {
  %756 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %757 = cast(%var_10125, dtype="float64") /* ty=Tensor[(770), float64] */;
  %758 = cast(%var_10126, dtype="int64") /* ty=Tensor[(252, 1), int64] */;
  %759 = cast(meta[relay.Constant][59] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %760 = reshape(%757, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %761 = reshape(%758, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %762 = reshape(%759, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %763 = @func_7005(%760, %761, %762) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
  %764 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %765 = %756.0;
  %766 = %763.0;
  %767 = %764.0;
  (%765, %766, %var_10125, %var_10126, meta[relay.Constant][59] /* ty=Tensor[(192), float32] */, %767)
}

def @func_6207(%var_6185: Tensor[(5, 14, 8), float32]) -> (Tensor[(5, 14, 8), uint16],) {
  %768 = cast(%var_6185, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %769 = exp(%768) /* ty=Tensor[(5, 14, 8), float32] */;
  %770 = cast(%var_6185, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
  %771 = shape_of(%769, dtype="int32") /* ty=Tensor[(3), int32] */;
  %772 = cast(%769, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
  %773 = dyn.reshape(%770, %771, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %774 = bitwise_and(%772, %773) /* ty=Tensor[(5, 14, 8), uint16] */;
  (%774,)
}

def @func_7722(%var_7663: Tensor[(330), float64], %var_7665: Tensor[(1, 392), float32], %var_7718: Tensor[(192), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(924), float32], Tensor[(330), float64], Tensor[(420), float64], Tensor[(1, 392), float32], Tensor[(6, 14, 11), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  %775 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %776 = cast(%var_7663, dtype="float64") /* ty=Tensor[(330), float64] */;
  %777 = cast(%var_7663, dtype="float64") /* ty=Tensor[(330), float64] */;
  %778 = cast(meta[relay.Constant][60] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %779 = cast(%var_7665, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %780 = reshape(%776, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %781 = reshape(%777, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %782 = reshape(%778, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %783 = reshape(%779, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %784 = @func_2786(%780, %781, %782, %783) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) */;
  %785 = %784.8;
  %786 = cast(%785, dtype="float32") /* ty=Tensor[(924), float32] */;
  %787 = reshape(%786, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %788 = @func_760(%787) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %789 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %790 = cast(%var_7718, dtype="float32") /* ty=Tensor[(192), float32] */;
  %791 = reshape(%790, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %792 = %775.0;
  %793 = %788.0;
  %794 = %789.0;
  %795 = @func_230(%791) /* ty=Tensor[(6, 16, 2), bool] */;
  (%792, %785, %var_7663, meta[relay.Constant][60] /* ty=Tensor[(420), float64] */, %var_7665, %793, %794, %795, %var_7718)
}

def @func_2321(%var_2306: Tensor[(7, 8, 7), float32], %var_2315: uint64, %var_2316: Tensor[(924), float32]) -> (Tensor[(7, 8, 7), float64], Tensor[(7, 8, 7), float64], Tensor[(924), float32], uint64, Tensor[(924), float32], Tensor[(540), int16]) {
  %796 = cast(%var_2306, dtype="float32") /* ty=Tensor[(7, 8, 7), float32] */;
  %797 = sinh(%796) /* ty=Tensor[(7, 8, 7), float32] */;
  %798 = cast(%797, dtype="float64") /* ty=Tensor[(7, 8, 7), float64] */;
  %799 = cast(%797, dtype="float64") /* ty=Tensor[(7, 8, 7), float64] */;
  %800 = cast(%var_2315, dtype="uint64") /* ty=uint64 */;
  %801 = cast(%var_2316, dtype="float32") /* ty=Tensor[(924), float32] */;
  %802 = cast(meta[relay.Constant][61] /* ty=Tensor[(540), int16] */, dtype="int16") /* ty=Tensor[(540), int16] */;
  %803 = reshape(%800, newshape=[]) /* ty=uint64 */;
  %804 = reshape(%801, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %805 = reshape(%802, newshape=[1, 540]) /* ty=Tensor[(1, 540), int16] */;
  %806 = @func_2231(%803, %804, %805) /* ty=(Tensor[(15, 8, 1), uint64], Tensor[(6, 14, 11), float32], Tensor[(1404), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(5, 12, 9), bool], Tensor[(1, 540), int16], Tensor[(6, 14, 11), float32], Tensor[(770), float64]) */;
  %807 = sigmoid(%798) /* ty=Tensor[(7, 8, 7), float64] */;
  %808 = acos(%799) /* ty=Tensor[(7, 8, 7), float64] */;
  %809 = %806.3;
  (%807, %808, %809, %var_2315, %var_2316, meta[relay.Constant][61] /* ty=Tensor[(540), int16] */)
}

def @func_9483(%var_9475: Tensor[(7, 8, 2), float64]) -> (Tensor[(7, 8, 2), uint32], Tensor[(5, 1, 7), float32], Tensor[(35), float32]) {
  %810 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %811 = %810.0;
  %812 = cast(%811, dtype="uint32") /* ty=Tensor[(7, ?, 2), uint32] */;
  %813 = cast(%var_9475, dtype="uint32") /* ty=Tensor[(7, 8, 2), uint32] */;
  %814 = cast(meta[relay.Constant][62] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %815 = reshape(%814, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), float32] */;
  %816 = @func_8205(%815) /* ty=(Tensor[(5, 1, 7), float32],) */;
  %817 = multiply(%812, %813) /* ty=Tensor[(7, 8, 2), uint32] */;
  %818 = %816.0;
  (%817, %818, meta[relay.Constant][62] /* ty=Tensor[(35), float32] */)
}

def @func_5128(%var_5086: float32, %var_5087: Tensor[(7, 8, 11), float32], %var_5111: Tensor[(150), float32], %var_5113: Tensor[(7, 8, 11), float32], %var_5118: Tensor[(1404), float64], %var_5120: Tensor[(924), float32]) -> (Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) {
  %819 = cast(%var_5086, dtype="float32") /* ty=float32 */;
  %820 = cast(%var_5087, dtype="float32") /* ty=Tensor[(7, 8, 11), float32] */;
  %821 = cast(%var_5111, dtype="float32") /* ty=Tensor[(150), float32] */;
  %822 = reshape(%821, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), float32] */;
  %823 = @func_3195(%822) /* ty=(Tensor[(10, 1, 15), float32],) */;
  %824 = cast(%var_5113, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %825 = shape_of(%var_5087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %826 = cast(%var_5087, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %828 = cast(%var_5118, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %829 = cast(meta[relay.Constant][63] /* ty=Tensor[(7, 110), float64] */, dtype="float64") /* ty=Tensor[(7, 110), float64] */;
  %830 = cast(%var_5120, dtype="float32") /* ty=Tensor[(924), float32] */;
  %831 = cast(meta[relay.Constant][64] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %832 = reshape(%828, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %833 = reshape(%829, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %834 = reshape(%830, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %835 = reshape(%831, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %836 = @func_2073(%832, %833, %834, %835) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %837 = divide(%819, %820) /* ty=Tensor[(7, 8, 11), float32] */;
  %838 = %823.0;
  %839 = less(%826, %827) /* ty=Tensor[(7, 8, 11), bool] */;
  %840 = %836.3;
  (%837, %838, %var_5111, %839, %840, %var_5118, meta[relay.Constant][63] /* ty=Tensor[(7, 110), float64] */, %var_5120, meta[relay.Constant][64] /* ty=Tensor[(2496), float32] */)
}

def @func_5615(%var_5603: Tensor[(7, 15, 2), uint32]) -> (Tensor[(7, 15, 2), uint32],) {
  %841 = cast(meta[relay.Constant][65] /* ty=Tensor[(7, 15, 2), uint32] */, dtype="uint32") /* ty=Tensor[(7, 15, 2), uint32] */;
  %842 = shape_of(%var_5603, dtype="int32") /* ty=Tensor[(3), int32] */;
  %843 = cast(%var_5603, dtype="uint32") /* ty=Tensor[(7, 15, 2), uint32] */;
  %844 = dyn.reshape(%841, %842, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %845 = bitwise_or(%843, %844) /* ty=Tensor[(7, 15, 2), uint32] */;
  (%845,)
}

def @func_1855(%var_1836: Tensor[(5, 12, 9), int16]) -> Tensor[(5, 12, 9), bool] {
  %846 = cast(meta[relay.Constant][66] /* ty=Tensor[(5, 12, 9), int16] */, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %847 = shape_of(%var_1836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %848 = cast(%var_1836, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %849 = dyn.reshape(%846, %847, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%848, %849) /* ty=Tensor[(5, 12, 9), bool] */
}

def @func_760(%var_757: Tensor[(6, 14, 11), float32]) -> (Tensor[(6, 14, 11), float32],) {
  %850 = cast(%var_757, dtype="float32") /* ty=Tensor[(6, 14, 11), float32] */;
  %851 = sin(%850) /* ty=Tensor[(6, 14, 11), float32] */;
  (%851,)
}

def @func_9386(%var_9362: Tensor[(7, 8, 2), bool]) -> (Tensor[(7, 8, 2), bool], Tensor[(420), float64], Tensor[(4, 15, 7), float64]) {
  %852 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
  %853 = cast(%852, dtype="bool") /* ty=Tensor[(7, ?, 2), bool] */;
  %854 = cast(%var_9362, dtype="bool") /* ty=Tensor[(7, 8, 2), bool] */;
  %855 = cast(meta[relay.Constant][67] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %856 = reshape(%855, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %857 = @func_1697(%856) /* ty=(Tensor[(4, 15, 7), float64],) */;
  %858 = %857.0;
  %859 = cast(%858, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
  %860 = not_equal(%853, %854) /* ty=Tensor[(7, 8, 2), bool] */;
  %861 = atan(%859) /* ty=Tensor[(4, 15, 7), float64] */;
  (%860, meta[relay.Constant][67] /* ty=Tensor[(420), float64] */, %861)
}

def @func_8068() -> Tensor[(7, ?, 2), float64] {
  %862 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %862.0
}

def @func_7333() -> Tensor[(7, ?, 2), bool] {
  %863 = @func_7188() /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) */;
  %863.0
}

def @func_4678(%var_4628: Tensor[(1, 7, 6), uint32], %var_4629: Tensor[(14, 7, 6), uint32], %var_4672: Tensor[(540), int16]) -> (Tensor[(14, 7, 6), bool], Tensor[(1, 7, 6), float32], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(14, 7, 6), float32]) {
  %864 = cast(%var_4628, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
  %865 = cast(%var_4629, dtype="bool") /* ty=Tensor[(14, 7, 6), bool] */;
  %866 = not_equal(%864, %865) /* ty=Tensor[(14, 7, 6), bool] */;
  %867 = cast(%866, dtype="bool") /* ty=Tensor[(14, 7, 6), bool] */;
  %868 = cast(%var_4628, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
  %869 = cast(%var_4628, dtype="float32") /* ty=Tensor[(1, 7, 6), float32] */;
  %870 = cast(%var_4672, dtype="int16") /* ty=Tensor[(540), int16] */;
  %871 = reshape(%870, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), int16] */;
  %872 = cast(%866, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
  %873 = greater_equal(%867, %868) /* ty=Tensor[(14, 7, 6), bool] */;
  %874 = rsqrt(%869) /* ty=Tensor[(1, 7, 6), float32] */;
  %875 = @func_1855(%871) /* ty=Tensor[(5, 12, 9), bool] */;
  %876 = log10(%872) /* ty=Tensor[(14, 7, 6), float32] */;
  (%873, %874, %875, %var_4672, %876)
}

def @func_10699() -> Tensor[(7, ?, 2), float32] {
  %877 = @func_10374() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */;
  %878 = %877.1;
  %879 = @func_8292() /* ty=Tensor[(7, ?, 2), bool] */;
  %880 = cast(%879, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
  %881 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
  %882 = cast(%878, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
  %883 = dyn.reshape(%880, %881, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%882, %883) /* ty=Tensor[(7, ?, 2), float32] */
}

def @func_2921(%var_2918: Tensor[(1, 924), float32]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float64], Tensor[(6, 14, 11), float32], Tensor[(1, 924), float32]) {
  %884 = cast(meta[relay.Constant][69] /* ty=Tensor[(6, 8, 16), int16] */, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %885 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(6, 8, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(meta[relay.Constant][68] /* ty=Tensor[(6, 8, 16), int16] */, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %888 = cast(meta[relay.Constant][68] /* ty=Tensor[(6, 8, 16), int16] */, dtype="float64") /* ty=Tensor[(6, 8, 16), float64] */;
  %889 = cast(%var_2918, dtype="float32") /* ty=Tensor[(1, 924), float32] */;
  %890 = reshape(%889, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %891 = @func_760(%890) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %892 = equal(%886, %887) /* ty=Tensor[(6, 8, 16), bool] */;
  %893 = asin(%888) /* ty=Tensor[(6, 8, 16), float64] */;
  %894 = %891.0;
  (%892, %893, %894, %var_2918)
}

def @func_2786(%var_2737: Tensor[(6, 5, 11), float64], %var_2738: Tensor[(6, 5, 11), float64], %var_2746: Tensor[(210, 2), float64], %var_2779: Tensor[(392), float32]) -> (Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) {
  %895 = cast(%var_2738, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %896 = shape_of(%var_2737, dtype="int32") /* ty=Tensor[(3), int32] */;
  %897 = cast(%var_2737, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
  %898 = dyn.reshape(%895, %896, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %899 = cast(%var_2746, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
  %900 = reshape(%899, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %901 = @func_1697(%900) /* ty=(Tensor[(4, 15, 7), float64],) */;
  %902 = cast(meta[relay.Constant][70] /* ty=Tensor[(540), int16] */, dtype="int16") /* ty=Tensor[(540), int16] */;
  %903 = reshape(%902, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), int16] */;
  %904 = cast(%var_2779, dtype="float32") /* ty=Tensor[(392), float32] */;
  %905 = cast(meta[relay.Constant][71] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %906 = cast(meta[relay.Constant][72] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %907 = reshape(%904, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), float32] */;
  %908 = reshape(%905, newshape=[]) /* ty=uint64 */;
  %909 = reshape(%906, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %910 = @func_2321(%907, %908, %909) /* ty=(Tensor[(7, 8, 7), float64], Tensor[(7, 8, 7), float64], Tensor[(924), float32], uint64, Tensor[(924), float32], Tensor[(540), int16]) */;
  %911 = floor_divide(%897, %898) /* ty=Tensor[(6, 5, 11), float64] */;
  %912 = %901.0;
  %913 = @func_1855(%903) /* ty=Tensor[(5, 12, 9), bool] */;
  %914 = %910.5;
  (%911, %912, %var_2746, %913, meta[relay.Constant][70] /* ty=Tensor[(540), int16] */, %914, %var_2779, meta[relay.Constant][71] /* ty=uint64 */, meta[relay.Constant][72] /* ty=Tensor[(924), float32] */)
}

def @func_8401() -> (Tensor[(7, ?, 2), float64],) {
  %915 = @func_8122() /* ty=Tensor[(7, ?, 2), float64] */;
  (%915,)
}

def @func_9402() -> (Tensor[(7, ?, 2), float64],) {
  %916 = @func_8620() /* ty=Tensor[(7, ?, 2), float64] */;
  (%916,)
}

def @func_9835(%var_9830: Tensor[(7, 6, 2), bool]) -> Tensor[(7, 6, 2), float32] {
  %917 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  %918 = cast(%917, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
  %919 = cast(%var_9830, dtype="float32") /* ty=Tensor[(7, 6, 2), float32] */;
  minimum(%918, %919) /* ty=Tensor[(7, 6, 2), float32] */
}

def @func_9871() -> (Tensor[(7, ?, 2), bool],) {
  %920 = @func_9635() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %921 = %920.0;
  (%921,)
}

def @func_230(%var_222: Tensor[(6, 16, 2), float32]) -> Tensor[(6, 16, 2), bool] {
  %922 = cast(%var_222, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %923 = shape_of(meta[relay.Constant][73] /* ty=Tensor[(6, 16, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %924 = cast(meta[relay.Constant][73] /* ty=Tensor[(6, 16, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%924, %925) /* ty=Tensor[(6, 16, 2), bool] */
}

def @func_7064(%var_7021: Tensor[(4, 10, 4), float32], %var_7027: Tensor[(560, 1), float32], %var_7040: Tensor[(1408), float32], %var_7062: Tensor[(420), float64]) -> (Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) {
  %926 = cast(%var_7027, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
  %927 = reshape(%926, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), float32] */;
  %928 = @func_6207(%927) /* ty=(Tensor[(5, 14, 8), uint16],) */;
  %929 = cast(%var_7021, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
  %930 = atanh(%929) /* ty=Tensor[(4, 10, 4), float32] */;
  %931 = cast(%var_7021, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %935 = cast(meta[relay.Constant][74] /* ty=Tensor[(448, 4), float32] */, dtype="float32") /* ty=Tensor[(448, 4), float32] */;
  %936 = cast(%var_7040, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %937 = reshape(%935, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float32] */;
  %938 = reshape(%936, newshape=[22, 64]) /* ty=Tensor[(22, 64), float32] */;
  %939 = @func_1418(%937, %938) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */;
  %940 = cast(%var_7062, dtype="float64") /* ty=Tensor[(420), float64] */;
  %941 = reshape(%940, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %942 = @func_1697(%941) /* ty=(Tensor[(4, 15, 7), float64],) */;
  %943 = %928.0;
  %944 = floor_mod(%933, %934) /* ty=Tensor[(4, 10, 4), float64] */;
  %945 = %939.2;
  %946 = %942.0;
  (%943, %var_7027, %944, %945, meta[relay.Constant][74] /* ty=Tensor[(448, 4), float32] */, %var_7040, %946, %var_7062)
}

def @func_1168(%var_1156: Tensor[(8, 11, 16), float32], %var_1157: Tensor[(8, 11, 16), float32]) -> (Tensor[(8, 11, 16), bool],) {
  %947 = cast(%var_1157, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %948 = shape_of(%var_1156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%var_1156, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %951 = floor_divide(%949, %950) /* ty=Tensor[(8, 11, 16), float32] */;
  %952 = cast(%var_1156, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %953 = shape_of(%951, dtype="int32") /* ty=Tensor[(3), int32] */;
  %954 = cast(%951, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %955 = dyn.reshape(%952, %953, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %956 = not_equal(%954, %955) /* ty=Tensor[(8, 11, 16), bool] */;
  (%956,)
}

def @func_8952() -> (Tensor[(7, ?, 2), float64],) {
  %957 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %958 = %957.0;
  (%958,)
}

def @func_10396(%var_10385: Tensor[(7, 16, 2), float64]) -> (Tensor[(7, 16, 2), float64], Tensor[(7, ?, 2), bool]) {
  %959 = @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */;
  %960 = %959.0;
  %961 = cast(%960, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %962 = cast(%var_10385, dtype="float64") /* ty=Tensor[(7, 16, 2), float64] */;
  %963 = floor_mod(%961, %962) /* ty=Tensor[(7, 16, 2), float64] */;
  %964 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  (%963, %964)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1123(%var_1111: Tensor[(11, 5, 14), float64], %var_1121: Tensor[(154, 6), float32]) -> (Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) {
  %0 = cast(%var_1111, dtype="float64") /* ty=Tensor[(11, 5, 14), float64] */;
  %1 = cast(%var_1121, dtype="float32") /* ty=Tensor[(154, 6), float32] */;
  %2 = reshape(%1, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %3 = @func_760(%2) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %4 = atanh(%0) /* ty=Tensor[(11, 5, 14), float64] */;
  %5 = %3.0;
  (%4, %5, %var_1121)
}

def @func_9486(%var_9484: Tensor[(7, 8, 2), float64]) -> (Tensor[(7, 8, 2), uint32], Tensor[(5, 1, 7), float32], Tensor[(35), float32]) {
  @func_9483(%var_9484) /* ty=(Tensor[(7, 8, 2), uint32], Tensor[(5, 1, 7), float32], Tensor[(35), float32]) */
}

def @func_233(%var_231: Tensor[(6, 16, 2), float32]) -> Tensor[(6, 16, 2), bool] {
  @func_230(%var_231) /* ty=Tensor[(6, 16, 2), bool] */
}

def @func_7790() -> (Tensor[(7, ?, 2), float64],) {
  @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_1172(%var_1170: Tensor[(8, 11, 16), float32], %var_1171: Tensor[(8, 11, 16), float32]) -> (Tensor[(8, 11, 16), bool],) {
  @func_1168(%var_1170, %var_1171) /* ty=(Tensor[(8, 11, 16), bool],) */
}

def @func_371(%var_278: Tensor[(14, 2, 9), int64], %var_279: Tensor[(14, 2, 9), int64], %var_313: Tensor[(14, 2, 9), int64], %var_324: Tensor[(14, 2, 9), int64], %var_353: Tensor[(6, 16, 2), float64]) -> (Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) {
  %6 = cast(%var_279, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %7 = shape_of(%var_278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_278, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = cast(%var_278, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
  %11 = shape_of(%var_279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %12 = cast(%var_279, dtype="uint8") /* ty=Tensor[(14, 2, 9), uint8] */;
  %13 = dyn.reshape(%10, %11, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %14 = cast(%var_313, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %15 = shape_of(%var_278, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%var_278, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %18 = cast(%var_324, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %19 = shape_of(%var_279, dtype="int32") /* ty=Tensor[(3), int32] */;
  %20 = cast(%var_279, dtype="bool") /* ty=Tensor[(14, 2, 9), bool] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %23 = reshape(%22, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %24 = cast(meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %25 = reshape(%24, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %27 = reshape(%26, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %28 = @func_230(%27) /* ty=Tensor[(6, 16, 2), bool] */;
  %29 = cast(%28, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %30 = log(%29) /* ty=Tensor[(6, 16, 2), float64] */;
  %31 = cast(%var_353, dtype="uint64") /* ty=Tensor[(6, 16, 2), uint64] */;
  %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%30, dtype="uint64") /* ty=Tensor[(6, 16, 2), uint64] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %35 = add(%33, %34) /* ty=Tensor[(6, 16, 2), uint64] */;
  %36 = cast(%35, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  %37 = reshape(%36, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %38 = cast(%30, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  %39 = reshape(%38, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %40 = cast(%30, dtype="float64") /* ty=Tensor[(6, 16, 2), float64] */;
  %41 = asin(%40) /* ty=Tensor[(6, 16, 2), float64] */;
  %42 = cast(%41, dtype="float32") /* ty=Tensor[(6, 16, 2), float32] */;
  %43 = reshape(%42, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %44 = equal(%8, %9) /* ty=Tensor[(14, 2, 9), bool] */;
  %45 = bitwise_or(%12, %13) /* ty=Tensor[(14, 2, 9), uint8] */;
  %46 = less(%16, %17) /* ty=Tensor[(14, 2, 9), bool] */;
  %47 = not_equal(%20, %21) /* ty=Tensor[(14, 2, 9), bool] */;
  %48 = @func_230(%23) /* ty=Tensor[(6, 16, 2), bool] */;
  %49 = @func_230(%25) /* ty=Tensor[(6, 16, 2), bool] */;
  %50 = @func_230(%37) /* ty=Tensor[(6, 16, 2), bool] */;
  %51 = @func_230(%39) /* ty=Tensor[(6, 16, 2), bool] */;
  %52 = @func_230(%43) /* ty=Tensor[(6, 16, 2), bool] */;
  (%44, %45, meta[relay.Constant][0] /* ty=Tensor[(192), float32] */, %46, %47, %48, %49, %35, %50, %51, %41, %52)
}

def @func_7269() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  %53 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %54 = %53.0;
  %55 = cast(%54, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %56 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %57 = sin(%55) /* ty=Tensor[(7, ?, 2), float64] */;
  %58 = %56.0;
  (%57, %58)
}

def @func_10296() -> Tensor[(7, ?, 2), float64] {
  @func_10294() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_9838(%var_9836: Tensor[(7, 6, 2), bool]) -> Tensor[(7, 6, 2), float32] {
  @func_9835(%var_9836) /* ty=Tensor[(7, 6, 2), float32] */
}

def @func_9436(%var_9421: Tensor[(7, 11, 2), float64]) -> (Tensor[(7, 11, 2), int8], Tensor[(7, ?, 2), bool]) {
  %59 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %60 = %59.0;
  %61 = cast(%60, dtype="int8") /* ty=Tensor[(7, ?, 2), int8] */;
  %62 = cast(%var_9421, dtype="int8") /* ty=Tensor[(7, 11, 2), int8] */;
  %63 = @func_7735() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %64 = maximum(%61, %62) /* ty=Tensor[(7, 11, 2), int8] */;
  %65 = %63.0;
  (%64, %65)
}

def @func_1421(%var_1419: Tensor[(8, 14, 16), float32], %var_1420: Tensor[(22, 64), float32]) -> (Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) {
  %74 = fn (%var_1409: Tensor[(8, 14, 16), float32], %var_1413: Tensor[(22, 64), float32]) -> (Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) {
    %66 = cast(%var_1409, dtype="float32") /* ty=Tensor[(8, 14, 16), float32] */;
    %67 = cast(%var_1413, dtype="float32") /* ty=Tensor[(22, 64), float32] */;
    %68 = cast(%var_1413, dtype="float32") /* ty=Tensor[(22, 64), float32] */;
    %69 = reshape(%67, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
    %70 = reshape(%68, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
    %71 = @func_1168(%69, %70) /* ty=(Tensor[(8, 11, 16), bool],) */;
    %72 = log2(%66) /* ty=Tensor[(8, 14, 16), float32] */;
    %73 = %71.0;
    (%72, %73, %var_1413)
  };
  %74(%var_1419, %var_1420) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */
}

def @func_7009(%var_7006: Tensor[(770), float64], %var_7007: Tensor[(252), int64], %var_7008: Tensor[(192), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  %85 = fn (%var_6967: Tensor[(770), float64], %var_6968: Tensor[(252), int64], %var_6986: Tensor[(192), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
    %75 = cast(%var_6967, dtype="float64") /* ty=Tensor[(770), float64] */;
    %76 = cast(%var_6968, dtype="int64") /* ty=Tensor[(252), int64] */;
    %77 = reshape(%75, newshape=[5, 11, 14]) /* ty=Tensor[(5, 11, 14), float64] */;
    %78 = reshape(%76, newshape=[252]) /* ty=Tensor[(252), int64] */;
    %79 = @func_2673(%77, %78) /* ty=(Tensor[(5, 11, 14), float64], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(8, 24), float64]) */;
    %80 = cast(%var_6986, dtype="float32") /* ty=Tensor[(192), float32] */;
    %81 = reshape(%80, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
    %82 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
    %83 = %79.2;
    %84 = @func_230(%81) /* ty=Tensor[(6, 16, 2), bool] */;
    (%82, %83, %var_6967, %var_6968, %84, %var_6986)
  };
  %85(%var_7006, %var_7007, %var_7008) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */
}

def @func_10854(%var_10781: Tensor[(3, 15, 7), float32], %var_10812: Tensor[(924), float32], %var_10827: Tensor[(8), float64]) -> (Tensor[(3, 15, 7), float32], Tensor[(7, 2, 2), bool], Tensor[(28), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(3, 15, 7), uint32], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(1792), float32], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) {
  %86 = cast(%var_10781, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %87 = sigmoid(%86) /* ty=Tensor[(3, 15, 7), float32] */;
  %88 = cast(%87, dtype="float32") /* ty=Tensor[(3, 15, 7), float32] */;
  %89 = cast(meta[relay.Constant][1] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %90 = cast(meta[relay.Constant][1] /* ty=Tensor[(28), float64] */, dtype="float64") /* ty=Tensor[(28), float64] */;
  %91 = cast(%var_10812, dtype="float32") /* ty=Tensor[(924), float32] */;
  %92 = cast(meta[relay.Constant][2] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %93 = reshape(%89, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %94 = reshape(%90, newshape=[7, 2, 2]) /* ty=Tensor[(7, 2, 2), float64] */;
  %95 = reshape(%91, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %96 = reshape(%92, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %97 = @func_8380(%93, %94, %95, %96) /* ty=(Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), int8], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool], Tensor[(16, 12, 13), float32], Tensor[(2496), float32]) */;
  %98 = cast(%87, dtype="uint32") /* ty=Tensor[(3, 15, 7), uint32] */;
  %99 = shape_of(%var_10781, dtype="int32") /* ty=Tensor[(3), int32] */;
  %100 = cast(%var_10781, dtype="uint32") /* ty=Tensor[(3, 15, 7), uint32] */;
  %101 = dyn.reshape(%98, %99, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %102 = cast(%var_10827, dtype="float64") /* ty=Tensor[(8), float64] */;
  %103 = cast(meta[relay.Constant][3] /* ty=Tensor[(1792), float32] */, dtype="float32") /* ty=Tensor[(1792), float32] */;
  %104 = reshape(%102, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
  %105 = reshape(%103, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
  %106 = @func_3452(%104, %105) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */;
  %107 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %108 = cast(meta[relay.Constant][4] /* ty=Tensor[(810), bool] */, dtype="bool") /* ty=Tensor[(810), bool] */;
  %109 = reshape(%107, newshape=[]) /* ty=bool */;
  %110 = reshape(%108, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), bool] */;
  %111 = cast(meta[relay.Constant][5] /* ty=Tensor[(540), uint64] */, dtype="uint64") /* ty=Tensor[(540), uint64] */;
  %112 = reshape(%111, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), uint64] */;
  %113 = acos(%88) /* ty=Tensor[(3, 15, 7), float32] */;
  %114 = %97.0;
  %115 = minimum(%100, %101) /* ty=Tensor[(3, 15, 7), uint32] */;
  %116 = %106.3;
  %117 = @func_8151(%109, %110) /* ty=Tensor[(6, 15, 9), bool] */;
  %118 = @func_4263(%112) /* ty=Tensor[(9, 15, 4), bool] */;
  (%113, %114, meta[relay.Constant][1] /* ty=Tensor[(28), float64] */, %var_10812, meta[relay.Constant][2] /* ty=Tensor[(2496), float32] */, %115, %116, %var_10827, meta[relay.Constant][3] /* ty=Tensor[(1792), float32] */, %117, True /* ty=bool */, meta[relay.Constant][4] /* ty=Tensor[(810), bool] */, %118, meta[relay.Constant][5] /* ty=Tensor[(540), uint64] */)
}

def @func_7727(%var_7724: Tensor[(330), float64], %var_7725: Tensor[(1, 392), float32], %var_7726: Tensor[(192), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(924), float32], Tensor[(330), float64], Tensor[(420), float64], Tensor[(1, 392), float32], Tensor[(6, 14, 11), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  @func_7722(%var_7724, %var_7725, %var_7726) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(924), float32], Tensor[(330), float64], Tensor[(420), float64], Tensor[(1, 392), float32], Tensor[(6, 14, 11), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */
}

def @func_4263(%var_4258: Tensor[(9, 15, 4), uint64]) -> Tensor[(9, 15, 4), bool] {
  %119 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 15, 4), uint64] */, dtype="bool") /* ty=Tensor[(1, 15, 4), bool] */;
  %120 = cast(%var_4258, dtype="bool") /* ty=Tensor[(9, 15, 4), bool] */;
  less_equal(%119, %120) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_6207(%var_6185: Tensor[(5, 14, 8), float32]) -> (Tensor[(5, 14, 8), uint16],) {
  %121 = cast(%var_6185, dtype="float32") /* ty=Tensor[(5, 14, 8), float32] */;
  %122 = exp(%121) /* ty=Tensor[(5, 14, 8), float32] */;
  %123 = cast(%var_6185, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
  %124 = shape_of(%122, dtype="int32") /* ty=Tensor[(3), int32] */;
  %125 = cast(%122, dtype="uint16") /* ty=Tensor[(5, 14, 8), uint16] */;
  %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %127 = bitwise_and(%125, %126) /* ty=Tensor[(5, 14, 8), uint16] */;
  (%127,)
}

def @func_10889() -> (Tensor[(7, ?, 2), float64],) {
  %130 = fn () -> (Tensor[(7, ?, 2), float64],) {
    %128 = @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %129 = %128.0;
    (%129,)
  };
  %130() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_8208(%var_8206: Tensor[(5, 1, 7), float32]) -> (Tensor[(5, 1, 7), float32],) {
  @func_8205(%var_8206) /* ty=(Tensor[(5, 1, 7), float32],) */
}

def @func_10503(%var_10465: Tensor[(924), float32], %var_10479: Tensor[(770), float64], %var_10487: Tensor[(2496), float32]) -> (Tensor[(7, 3, 2), int16], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(770), float64], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(7, 3, 2), float32]) {
  %131 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %132 = %131.0;
  %133 = cast(%132, dtype="int16") /* ty=Tensor[(7, ?, 2), int16] */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 3, 2), float64] */, dtype="int16") /* ty=Tensor[(7, 3, 2), int16] */;
  %135 = cast(%var_10465, dtype="float32") /* ty=Tensor[(924), float32] */;
  %136 = reshape(%135, newshape=[1, 924]) /* ty=Tensor[(1, 924), float32] */;
  %137 = @func_2921(%136) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float64], Tensor[(6, 14, 11), float32], Tensor[(1, 924), float32]) */;
  %138 = cast(%var_10479, dtype="float64") /* ty=Tensor[(770), float64] */;
  %139 = cast(%var_10465, dtype="float32") /* ty=Tensor[(924), float32] */;
  %140 = reshape(%138, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float64] */;
  %141 = reshape(%139, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %142 = @func_1123(%140, %141) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */;
  %143 = cast(%var_10487, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %144 = reshape(%143, newshape=[312, 8]) /* ty=Tensor[(312, 8), float32] */;
  %145 = @func_7483(%144) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(312, 8), float32], Tensor[(16, 12, 13), float32]) */;
  %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 3, 2), float64] */, dtype="float32") /* ty=Tensor[(7, 3, 2), float32] */;
  %147 = left_shift(%133, %134) /* ty=Tensor[(7, 3, 2), int16] */;
  %148 = %137.2;
  %149 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  %150 = %142.1;
  %151 = %145.2;
  %152 = sigmoid(%146) /* ty=Tensor[(7, 3, 2), float32] */;
  (%147, %148, %var_10465, %149, %150, %var_10479, %151, %var_10487, %152)
}

def @func_3198(%var_3196: Tensor[(10, 1, 15), float32]) -> (Tensor[(10, 1, 15), float32],) {
  @func_3195(%var_3196) /* ty=(Tensor[(10, 1, 15), float32],) */
}

def @func_6872() -> Tensor[(7, ?, 2), bool] {
  @func_6870() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_9110() -> (Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) {
  @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */
}

def @func_9873() -> (Tensor[(7, ?, 2), bool],) {
  @func_9871() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_10584(%var_10580: Tensor[(16, 48), float32], %var_10581: Tensor[(112), bool], %var_10582: Tensor[(924), float32], %var_10583: Tensor[(112), bool]) -> (Tensor[(7, ?, 2), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 48), float32], Tensor[(420), float64], Tensor[(308, 2), float32], Tensor[(960), bool], Tensor[(616), float32], Tensor[(150), float32], Tensor[(924), float32], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(16, 16, 3), float32], Tensor[(112), uint8]) {
  %189 = fn (%var_10518: Tensor[(16, 48), float32], %var_10530: Tensor[(112), bool], %var_10538: Tensor[(924), float32], %var_10567: Tensor[(112), bool]) -> (Tensor[(7, ?, 2), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 48), float32], Tensor[(420), float64], Tensor[(308, 2), float32], Tensor[(960), bool], Tensor[(616), float32], Tensor[(150), float32], Tensor[(924), float32], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(16, 16, 3), float32], Tensor[(112), uint8]) {
    %153 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %154 = cast(%var_10518, dtype="float32") /* ty=Tensor[(16, 48), float32] */;
    %155 = cast(%var_10518, dtype="float32") /* ty=Tensor[(16, 48), float32] */;
    %156 = reshape(%154, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
    %157 = reshape(%155, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
    %158 = cast(%var_10530, dtype="bool") /* ty=Tensor[(112), bool] */;
    %159 = reshape(%158, newshape=[7, 8, 2]) /* ty=Tensor[(7, 8, 2), bool] */;
    %160 = @func_9386(%159) /* ty=(Tensor[(7, 8, 2), bool], Tensor[(420), float64], Tensor[(4, 15, 7), float64]) */;
    %161 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %162 = cast(meta[relay.Constant][8] /* ty=Tensor[(960), bool] */, dtype="bool") /* ty=Tensor[(960), bool] */;
    %163 = cast(meta[relay.Constant][9] /* ty=Tensor[(616), float32] */, dtype="float32") /* ty=Tensor[(616), float32] */;
    %164 = cast(meta[relay.Constant][10] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %165 = cast(%var_10538, dtype="float32") /* ty=Tensor[(924), float32] */;
    %166 = reshape(%161, newshape=[8, 15, 8]) /* ty=Tensor[(8, 15, 8), bool] */;
    %167 = reshape(%162, newshape=[8, 15, 8]) /* ty=Tensor[(8, 15, 8), bool] */;
    %168 = reshape(%163, newshape=[308, 2]) /* ty=Tensor[(308, 2), float32] */;
    %169 = reshape(%164, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %170 = reshape(%165, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %171 = @func_7389(%166, %167, %168, %169, %170) /* ty=(Tensor[(8, 15, 8), bool], Tensor[(150), float32], float32, Tensor[(308, 2), float32], Tensor[(150), float32], Tensor[(1404, 1), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
    %172 = cast(meta[relay.Constant][11] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
    %173 = reshape(%172, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
    %174 = cast(%var_10518, dtype="float32") /* ty=Tensor[(16, 48), float32] */;
    %175 = @func_5268(%156, %157) /* ty=Tensor[(16, 16, 3), float32] */;
    %176 = cast(%175, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
    %177 = reshape(%174, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
    %178 = reshape(%176, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
    %179 = cast(%var_10567, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %180 = shape_of(%var_10530, dtype="int32") /* ty=Tensor[(1), int32] */;
    %181 = cast(%var_10530, dtype="uint8") /* ty=Tensor[(112), uint8] */;
    %182 = dyn.reshape(%179, %180, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %183 = %153.0;
    %184 = %160.1;
    %185 = %171.3;
    %186 = @func_8785(%173) /* ty=Tensor[(9, 12, 8), float64] */;
    %187 = @func_5268(%177, %178) /* ty=Tensor[(16, 16, 3), float32] */;
    %188 = maximum(%181, %182) /* ty=Tensor[(112), uint8] */;
    (%183, %175, %var_10518, %184, %185, meta[relay.Constant][8] /* ty=Tensor[(960), bool] */, meta[relay.Constant][9] /* ty=Tensor[(616), float32] */, meta[relay.Constant][10] /* ty=Tensor[(150), float32] */, %var_10538, %186, meta[relay.Constant][11] /* ty=Tensor[(864), float64] */, %187, %188)
  };
  %189(%var_10580, %var_10581, %var_10582, %var_10583) /* ty=(Tensor[(7, ?, 2), float64], Tensor[(16, 16, 3), float32], Tensor[(16, 48), float32], Tensor[(420), float64], Tensor[(308, 2), float32], Tensor[(960), bool], Tensor[(616), float32], Tensor[(150), float32], Tensor[(924), float32], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(16, 16, 3), float32], Tensor[(112), uint8]) */
}

def @func_8402() -> (Tensor[(7, ?, 2), float64],) {
  %191 = fn () -> (Tensor[(7, ?, 2), float64],) {
    %190 = @func_8122() /* ty=Tensor[(7, ?, 2), float64] */;
    (%190,)
  };
  %191() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_9285() -> Tensor[(7, ?, 2), bool] {
  @func_9283() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_10508(%var_10505: Tensor[(924), float32], %var_10506: Tensor[(770), float64], %var_10507: Tensor[(2496), float32]) -> (Tensor[(7, 3, 2), int16], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(770), float64], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(7, 3, 2), float32]) {
  @func_10503(%var_10505, %var_10506, %var_10507) /* ty=(Tensor[(7, 3, 2), int16], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(770), float64], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(7, 3, 2), float32]) */
}

def @func_5128(%var_5086: float32, %var_5087: Tensor[(7, 8, 11), float32], %var_5111: Tensor[(150), float32], %var_5113: Tensor[(7, 8, 11), float32], %var_5118: Tensor[(1404), float64], %var_5120: Tensor[(924), float32]) -> (Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) {
  %192 = cast(%var_5086, dtype="float32") /* ty=float32 */;
  %193 = cast(%var_5087, dtype="float32") /* ty=Tensor[(7, 8, 11), float32] */;
  %194 = cast(%var_5111, dtype="float32") /* ty=Tensor[(150), float32] */;
  %195 = reshape(%194, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), float32] */;
  %196 = @func_3195(%195) /* ty=(Tensor[(10, 1, 15), float32],) */;
  %197 = cast(%var_5113, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %198 = shape_of(%var_5087, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%var_5087, dtype="bool") /* ty=Tensor[(7, 8, 11), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = cast(%var_5118, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %202 = cast(meta[relay.Constant][12] /* ty=Tensor[(7, 110), float64] */, dtype="float64") /* ty=Tensor[(7, 110), float64] */;
  %203 = cast(%var_5120, dtype="float32") /* ty=Tensor[(924), float32] */;
  %204 = cast(meta[relay.Constant][13] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %205 = reshape(%201, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %206 = reshape(%202, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %207 = reshape(%203, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %208 = reshape(%204, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %209 = @func_2073(%205, %206, %207, %208) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %210 = divide(%192, %193) /* ty=Tensor[(7, 8, 11), float32] */;
  %211 = %196.0;
  %212 = less(%199, %200) /* ty=Tensor[(7, 8, 11), bool] */;
  %213 = %209.3;
  (%210, %211, %var_5111, %212, %213, %var_5118, meta[relay.Constant][12] /* ty=Tensor[(7, 110), float64] */, %var_5120, meta[relay.Constant][13] /* ty=Tensor[(2496), float32] */)
}

def @func_8587(%var_8585: Tensor[(3), int8], %var_8586: Tensor[(1792), float32]) -> (Tensor[(7, ?, 2), uint32], Tensor[(1408), float32], Tensor[(3), int8], Tensor[(126), int8], Tensor[(8), float64], Tensor[(1792), float32]) {
  %237 = fn (%var_8573: Tensor[(3), int8], %var_8576: Tensor[(1792), float32]) -> (Tensor[(7, ?, 2), uint32], Tensor[(1408), float32], Tensor[(3), int8], Tensor[(126), int8], Tensor[(8), float64], Tensor[(1792), float32]) {
    %214 = @func_7735() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %215 = %214.0;
    %216 = cast(%215, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
    %217 = sigmoid(%216) /* ty=Tensor[(7, ?, 2), float64] */;
    %218 = cast(%215, dtype="uint32") /* ty=Tensor[(7, ?, 2), uint32] */;
    %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(3), int32] */;
    %220 = cast(%217, dtype="uint32") /* ty=Tensor[(7, ?, 2), uint32] */;
    %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %222 = cast(%var_8573, dtype="int8") /* ty=Tensor[(3), int8] */;
    %223 = cast(meta[relay.Constant][14] /* ty=Tensor[(126), int8] */, dtype="int8") /* ty=Tensor[(126), int8] */;
    %224 = cast(meta[relay.Constant][15] /* ty=Tensor[(8), float64] */, dtype="float64") /* ty=Tensor[(8), float64] */;
    %225 = cast(%var_8576, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %226 = cast(%var_8576, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %227 = cast(%var_8576, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %228 = reshape(%222, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), int8] */;
    %229 = reshape(%223, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int8] */;
    %230 = reshape(%224, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %231 = reshape(%225, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
    %232 = reshape(%226, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
    %233 = reshape(%227, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
    %234 = @func_5881(%228, %229, %230, %231, %232, %233) /* ty=(Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) */;
    %235 = bitwise_and(%220, %221) /* ty=Tensor[(7, ?, 2), uint32] */;
    %236 = %234.1;
    (%235, %236, %var_8573, meta[relay.Constant][14] /* ty=Tensor[(126), int8] */, meta[relay.Constant][15] /* ty=Tensor[(8), float64] */, %var_8576)
  };
  %237(%var_8585, %var_8586) /* ty=(Tensor[(7, ?, 2), uint32], Tensor[(1408), float32], Tensor[(3), int8], Tensor[(126), int8], Tensor[(8), float64], Tensor[(1792), float32]) */
}

def @func_8785(%var_8779: Tensor[(9, 12, 8), float64]) -> Tensor[(9, 12, 8), float64] {
  %238 = cast(%var_8779, dtype="float64") /* ty=Tensor[(9, 12, 8), float64] */;
  tan(%238) /* ty=Tensor[(9, 12, 8), float64] */
}

def @func_9000() -> (Tensor[(7, ?, 2), bool],) {
  %240 = fn () -> (Tensor[(7, ?, 2), bool],) {
    %239 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
    (%239,)
  };
  %240() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_9835(%var_9830: Tensor[(7, 6, 2), bool]) -> Tensor[(7, 6, 2), float32] {
  %241 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
  %243 = cast(%var_9830, dtype="float32") /* ty=Tensor[(7, 6, 2), float32] */;
  minimum(%242, %243) /* ty=Tensor[(7, 6, 2), float32] */
}

def @func_1982(%var_1972: Tensor[(16, 12, 13), float32]) -> (Tensor[(16, 12, 13), float32],) {
  %244 = cast(%var_1972, dtype="float32") /* ty=Tensor[(16, 12, 13), float32] */;
  %245 = atan(%244) /* ty=Tensor[(16, 12, 13), float32] */;
  (%245,)
}

def @func_4989(%var_4983: Tensor[(4, 10, 3), int16], %var_4984: Tensor[(4, 10, 3), int16], %var_4985: Tensor[(1404), float64], %var_4986: Tensor[(770), float64], %var_4987: Tensor[(924), float32], %var_4988: Tensor[(2, 1248), float32]) -> (Tensor[(1408), float32], Tensor[(8, 11, 16), float64], Tensor[(11, 5, 14), float64], Tensor[(1404), float64], Tensor[(770), float64], Tensor[(924), float32], Tensor[(2, 1248), float32], Tensor[(4, 10, 3), int8], Tensor[(22, 64), float32], Tensor[(4, 448), float32]) {
  @func_4981(%var_4983, %var_4984, %var_4985, %var_4986, %var_4987, %var_4988) /* ty=(Tensor[(1408), float32], Tensor[(8, 11, 16), float64], Tensor[(11, 5, 14), float64], Tensor[(1404), float64], Tensor[(770), float64], Tensor[(924), float32], Tensor[(2, 1248), float32], Tensor[(4, 10, 3), int8], Tensor[(22, 64), float32], Tensor[(4, 448), float32]) */
}

def @func_5320(%var_5290: Tensor[(11, 6, 7), int8], %var_5299: Tensor[(3, 468), float64]) -> (Tensor[(11, 6, 7), int8], Tensor[(924, 1), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(156, 16), float32], Tensor[(3, 468), uint8], Tensor[(16, 12, 13), float64]) {
  %246 = cast(meta[relay.Constant][16] /* ty=Tensor[(11, 6, 7), int8] */, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %247 = shape_of(%var_5290, dtype="int32") /* ty=Tensor[(3), int32] */;
  %248 = cast(%var_5290, dtype="int8") /* ty=Tensor[(11, 6, 7), int8] */;
  %249 = dyn.reshape(%246, %247, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %250 = cast(%var_5299, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
  %251 = cast(meta[relay.Constant][17] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
  %252 = cast(meta[relay.Constant][18] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %253 = cast(meta[relay.Constant][19] /* ty=Tensor[(156, 16), float32] */, dtype="float32") /* ty=Tensor[(156, 16), float32] */;
  %254 = reshape(%250, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %255 = reshape(%251, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %256 = reshape(%252, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %257 = reshape(%253, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %258 = @func_2073(%254, %255, %256, %257) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %259 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 468), float64] */, dtype="uint8") /* ty=Tensor[(3, 468), uint8] */;
  %260 = shape_of(%var_5299, dtype="int32") /* ty=Tensor[(2), int32] */;
  %261 = cast(%var_5299, dtype="uint8") /* ty=Tensor[(3, 468), uint8] */;
  %262 = dyn.reshape(%259, %260, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %263 = cast(meta[relay.Constant][19] /* ty=Tensor[(156, 16), float32] */, dtype="float32") /* ty=Tensor[(156, 16), float32] */;
  %264 = reshape(%263, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %265 = @func_1982(%264) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %266 = %265.0;
  %267 = cast(%266, dtype="float64") /* ty=Tensor[(16, 12, 13), float64] */;
  %268 = subtract(%248, %249) /* ty=Tensor[(11, 6, 7), int8] */;
  %269 = %258.3;
  %270 = subtract(%261, %262) /* ty=Tensor[(3, 468), uint8] */;
  %271 = acos(%267) /* ty=Tensor[(16, 12, 13), float64] */;
  (%268, %269, meta[relay.Constant][17] /* ty=Tensor[(1, 770), float64] */, meta[relay.Constant][18] /* ty=Tensor[(924), float32] */, meta[relay.Constant][19] /* ty=Tensor[(156, 16), float32] */, %270, %271)
}

def @func_2236(%var_2233: uint64, %var_2234: Tensor[(924), float32], %var_2235: Tensor[(1, 540), int16]) -> (Tensor[(15, 8, 1), uint64], Tensor[(6, 14, 11), float32], Tensor[(1404), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(5, 12, 9), bool], Tensor[(1, 540), int16], Tensor[(6, 14, 11), float32], Tensor[(770), float64]) {
  @func_2231(%var_2233, %var_2234, %var_2235) /* ty=(Tensor[(15, 8, 1), uint64], Tensor[(6, 14, 11), float32], Tensor[(1404), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(5, 12, 9), bool], Tensor[(1, 540), int16], Tensor[(6, 14, 11), float32], Tensor[(770), float64]) */
}

def @func_8251(%var_8250: Tensor[(462), int8]) -> (Tensor[(7, ?, 2), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(1404), float64], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) {
  %282 = fn (%var_8217: Tensor[(462), int8]) -> (Tensor[(7, ?, 2), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(1404), float64], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) {
    %272 = cast(%var_8217, dtype="int8") /* ty=Tensor[(462), int8] */;
    %273 = cast(meta[relay.Constant][21] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %274 = reshape(%272, newshape=[11, 6, 7]) /* ty=Tensor[(11, 6, 7), int8] */;
    %275 = reshape(%273, newshape=[3, 468]) /* ty=Tensor[(3, 468), float64] */;
    %276 = @func_5320(%274, %275) /* ty=(Tensor[(11, 6, 7), int8], Tensor[(924, 1), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(156, 16), float32], Tensor[(3, 468), uint8], Tensor[(16, 12, 13), float64]) */;
    %277 = cast(meta[relay.Constant][22] /* ty=Tensor[(540), uint64] */, dtype="uint64") /* ty=Tensor[(540), uint64] */;
    %278 = reshape(%277, newshape=[9, 15, 4]) /* ty=Tensor[(9, 15, 4), uint64] */;
    %279 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
    %280 = %276.0;
    %281 = @func_4263(%278) /* ty=Tensor[(9, 15, 4), bool] */;
    (%279, %280, %var_8217, meta[relay.Constant][21] /* ty=Tensor[(1404), float64] */, %281, meta[relay.Constant][22] /* ty=Tensor[(540), uint64] */)
  };
  %282(%var_8250) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(1404), float64], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) */
}

def @func_9729(%var_9727: Tensor[(420), float64]) -> (Tensor[(7, ?, 2), bool], Tensor[(4, 15, 7), float64], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408, 1), float32], Tensor[(420), float64]) {
  @func_9726(%var_9727) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(4, 15, 7), float64], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408, 1), float32], Tensor[(420), float64]) */
}

def @func_9907() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  %286 = fn () -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
    %283 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %284 = @func_9329() /* ty=Tensor[(7, ?, 2), float64] */;
    %285 = %283.0;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */
}

def @func_7483(%var_7469: Tensor[(312, 8), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(312, 8), float32], Tensor[(16, 12, 13), float32]) {
  %287 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %288 = cast(%var_7469, dtype="float32") /* ty=Tensor[(312, 8), float32] */;
  %289 = reshape(%288, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %290 = @func_1982(%289) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(16, 12, 13), float32] */;
  %293 = %287.0;
  %294 = cosh(%292) /* ty=Tensor[(16, 12, 13), float32] */;
  (%293, %var_7469, %294)
}

def @func_2073(%var_2039: Tensor[(13, 12, 9), float64], %var_2049: Tensor[(770), float64], %var_2050: Tensor[(924, 1), float32], %var_2063: Tensor[(2496), float32]) -> (Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) {
  %295 = cast(%var_2039, dtype="float64") /* ty=Tensor[(13, 12, 9), float64] */;
  %296 = sqrt(%295) /* ty=Tensor[(13, 12, 9), float64] */;
  %297 = cast(%296, dtype="float32") /* ty=Tensor[(13, 12, 9), float32] */;
  %298 = cast(%var_2049, dtype="float64") /* ty=Tensor[(770), float64] */;
  %299 = cast(%var_2050, dtype="float32") /* ty=Tensor[(924, 1), float32] */;
  %300 = reshape(%298, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float64] */;
  %301 = reshape(%299, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
  %302 = @func_1123(%300, %301) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */;
  %303 = cast(%var_2063, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %304 = reshape(%303, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %305 = @func_1982(%304) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %306 = cast(%var_2050, dtype="float32") /* ty=Tensor[(924, 1), float32] */;
  %307 = reshape(%306, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %308 = @func_760(%307) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %309 = log(%297) /* ty=Tensor[(13, 12, 9), float32] */;
  %310 = %302.0;
  %311 = %305.0;
  %312 = %308.0;
  (%309, %310, %var_2049, %var_2050, %311, %var_2063, %312)
}

def @func_1855(%var_1836: Tensor[(5, 12, 9), int16]) -> Tensor[(5, 12, 9), bool] {
  %313 = cast(meta[relay.Constant][23] /* ty=Tensor[(5, 12, 9), int16] */, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %314 = shape_of(%var_1836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %315 = cast(%var_1836, dtype="bool") /* ty=Tensor[(5, 12, 9), bool] */;
  %316 = dyn.reshape(%313, %314, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%315, %316) /* ty=Tensor[(5, 12, 9), bool] */
}

def @func_4774(%var_4772: Tensor[(11, 1, 9), int8], %var_4773: Tensor[(420), float64]) -> (Tensor[(11, 10, 9), int8], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) {
  @func_4770(%var_4772, %var_4773) /* ty=(Tensor[(11, 10, 9), int8], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */
}

def @func_9483(%var_9475: Tensor[(7, 8, 2), float64]) -> (Tensor[(7, 8, 2), uint32], Tensor[(5, 1, 7), float32], Tensor[(35), float32]) {
  %317 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %318 = %317.0;
  %319 = cast(%318, dtype="uint32") /* ty=Tensor[(7, ?, 2), uint32] */;
  %320 = cast(%var_9475, dtype="uint32") /* ty=Tensor[(7, 8, 2), uint32] */;
  %321 = cast(meta[relay.Constant][24] /* ty=Tensor[(35), float32] */, dtype="float32") /* ty=Tensor[(35), float32] */;
  %322 = reshape(%321, newshape=[5, 1, 7]) /* ty=Tensor[(5, 1, 7), float32] */;
  %323 = @func_8205(%322) /* ty=(Tensor[(5, 1, 7), float32],) */;
  %324 = multiply(%319, %320) /* ty=Tensor[(7, 8, 2), uint32] */;
  %325 = %323.0;
  (%324, %325, meta[relay.Constant][24] /* ty=Tensor[(35), float32] */)
}

def @func_7140(%var_7137: Tensor[(120), int16], %var_7138: Tensor[(924, 1), float32], %var_7139: Tensor[(560, 1), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(2, 1248), float32], Tensor[(120), int16], Tensor[(770), float64], Tensor[(312, 8), float32], Tensor[(924, 1404), bool], Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32]) {
  %349 = fn (%var_7115: Tensor[(120), int16], %var_7118: Tensor[(924, 1), float32], %var_7128: Tensor[(560, 1), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(2, 1248), float32], Tensor[(120), int16], Tensor[(770), float64], Tensor[(312, 8), float32], Tensor[(924, 1404), bool], Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32]) {
    %326 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %327 = cast(%var_7115, dtype="int16") /* ty=Tensor[(120), int16] */;
    %328 = cast(%var_7115, dtype="int16") /* ty=Tensor[(120), int16] */;
    %329 = cast(meta[relay.Constant][25] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
    %330 = cast(meta[relay.Constant][26] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %331 = cast(%var_7118, dtype="float32") /* ty=Tensor[(924, 1), float32] */;
    %332 = cast(meta[relay.Constant][27] /* ty=Tensor[(312, 8), float32] */, dtype="float32") /* ty=Tensor[(312, 8), float32] */;
    %333 = reshape(%327, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int16] */;
    %334 = reshape(%328, newshape=[4, 10, 3]) /* ty=Tensor[(4, 10, 3), int16] */;
    %335 = reshape(%329, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %336 = reshape(%330, newshape=[770]) /* ty=Tensor[(770), float64] */;
    %337 = reshape(%331, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %338 = reshape(%332, newshape=[2, 1248]) /* ty=Tensor[(2, 1248), float32] */;
    %339 = @func_4981(%333, %334, %335, %336, %337, %338) /* ty=(Tensor[(1408), float32], Tensor[(8, 11, 16), float64], Tensor[(11, 5, 14), float64], Tensor[(1404), float64], Tensor[(770), float64], Tensor[(924), float32], Tensor[(2, 1248), float32], Tensor[(4, 10, 3), int8], Tensor[(22, 64), float32], Tensor[(4, 448), float32]) */;
    %340 = cast(meta[relay.Constant][25] /* ty=Tensor[(1404), float64] */, dtype="bool") /* ty=Tensor[(1404), bool] */;
    %341 = cast(%var_7118, dtype="bool") /* ty=Tensor[(924, 1), bool] */;
    %342 = cast(%var_7128, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
    %343 = reshape(%342, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), float32] */;
    %344 = @func_6207(%343) /* ty=(Tensor[(5, 14, 8), uint16],) */;
    %345 = %326.0;
    %346 = %339.6;
    %347 = logical_and(%340, %341) /* ty=Tensor[(924, 1404), bool] */;
    %348 = %344.0;
    (%345, %346, %var_7115, meta[relay.Constant][26] /* ty=Tensor[(770), float64] */, meta[relay.Constant][27] /* ty=Tensor[(312, 8), float32] */, %347, %348, %var_7128)
  };
  %349(%var_7137, %var_7138, %var_7139) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(2, 1248), float32], Tensor[(120), int16], Tensor[(770), float64], Tensor[(312, 8), float32], Tensor[(924, 1404), bool], Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32]) */
}

def @func_9627(%var_9621: Tensor[(810), bool], %var_9622: Tensor[(462), int8], %var_9623: Tensor[(160), float32], %var_9624: Tensor[(560), float32], %var_9625: Tensor[(1408), float32], %var_9626: Tensor[(420), float64]) -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(448, 4), float32], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408), float32], Tensor[(420), float64]) {
  @func_9619(%var_9621, %var_9622, %var_9623, %var_9624, %var_9625, %var_9626) /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(448, 4), float32], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408), float32], Tensor[(420), float64]) */
}

def @func_3455(%var_3453: Tensor[(1, 4, 2), float64], %var_3454: Tensor[(1792), float32]) -> (Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) {
  %363 = fn (%var_3438: Tensor[(1, 4, 2), float64], %var_3445: Tensor[(1792), float32]) -> (Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) {
    %350 = cast(%var_3438, dtype="float64") /* ty=Tensor[(1, 4, 2), float64] */;
    %351 = asinh(%350) /* ty=Tensor[(1, 4, 2), float64] */;
    %352 = cast(%var_3438, dtype="int16") /* ty=Tensor[(1, 4, 2), int16] */;
    %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
    %354 = cast(%351, dtype="int16") /* ty=Tensor[(1, 4, 2), int16] */;
    %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %356 = cast(%var_3445, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %357 = cast(meta[relay.Constant][28] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %358 = reshape(%356, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float32] */;
    %359 = reshape(%357, newshape=[22, 64]) /* ty=Tensor[(22, 64), float32] */;
    %360 = @func_1418(%358, %359) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */;
    %361 = maximum(%354, %355) /* ty=Tensor[(?, 4, 2), int16] */;
    %362 = %360.2;
    (%361, %362, %var_3445, meta[relay.Constant][28] /* ty=Tensor[(1408), float32] */)
  };
  %363(%var_3453, %var_3454) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */
}

def @func_10700() -> Tensor[(7, ?, 2), float32] {
  %371 = fn () -> Tensor[(7, ?, 2), float32] {
    %364 = @func_10374() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */;
    %365 = %364.1;
    %366 = @func_8292() /* ty=Tensor[(7, ?, 2), bool] */;
    %367 = cast(%366, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
    %368 = shape_of(%365, dtype="int32") /* ty=Tensor[(3), int32] */;
    %369 = cast(%365, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
    %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%369, %370) /* ty=Tensor[(7, ?, 2), float32] */
  };
  %371() /* ty=Tensor[(7, ?, 2), float32] */
}

def @func_8070() -> Tensor[(7, ?, 2), float64] {
  @func_8068() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_7189() -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) {
  %376 = fn () -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) {
    %372 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %373 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %374 = %372.0;
    %375 = %373.0;
    (%374, %375)
  };
  %376() /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) */
}

def @func_7486(%var_7484: Tensor[(312, 8), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(312, 8), float32], Tensor[(16, 12, 13), float32]) {
  @func_7483(%var_7484) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(312, 8), float32], Tensor[(16, 12, 13), float32]) */
}

def @func_8488(%var_8484: Tensor[(55, 6), float64], %var_8485: Tensor[(420), float64], %var_8486: Tensor[(392), float32], %var_8487: Tensor[(252), int64]) -> (uint64, Tensor[(55, 6), float64], Tensor[(420), float64], Tensor[(392), float32], Tensor[(6, 16, 2), bool], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(7, ?, 2), uint8], Tensor[(16, 16, 3), float32], Tensor[(2, 384), float32]) {
  %408 = fn (%var_8436: Tensor[(55, 6), float64], %var_8437: Tensor[(420), float64], %var_8438: Tensor[(392), float32], %var_8442: Tensor[(252), int64]) -> (uint64, Tensor[(55, 6), float64], Tensor[(420), float64], Tensor[(392), float32], Tensor[(6, 16, 2), bool], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(7, ?, 2), uint8], Tensor[(16, 16, 3), float32], Tensor[(2, 384), float32]) {
    %377 = cast(%var_8436, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
    %378 = cast(%var_8436, dtype="float64") /* ty=Tensor[(55, 6), float64] */;
    %379 = cast(%var_8437, dtype="float64") /* ty=Tensor[(420), float64] */;
    %380 = cast(%var_8438, dtype="float32") /* ty=Tensor[(392), float32] */;
    %381 = reshape(%377, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
    %382 = reshape(%378, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
    %383 = reshape(%379, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
    %384 = reshape(%380, newshape=[392]) /* ty=Tensor[(392), float32] */;
    %385 = @func_2786(%381, %382, %383, %384) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) */;
    %386 = cast(meta[relay.Constant][29] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
    %387 = cast(%var_8442, dtype="int64") /* ty=Tensor[(252), int64] */;
    %388 = cast(meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %389 = reshape(%386, newshape=[770]) /* ty=Tensor[(770), float64] */;
    %390 = reshape(%387, newshape=[252]) /* ty=Tensor[(252), int64] */;
    %391 = reshape(%388, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %392 = @func_7005(%389, %390, %391) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
    %393 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
    %394 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %395 = %394.0;
    %396 = cast(%395, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
    %397 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
    %398 = cast(%393, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
    %399 = dyn.reshape(%396, %397, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %400 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 384), float32] */, dtype="float32") /* ty=Tensor[(2, 384), float32] */;
    %401 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 384), float32] */, dtype="float32") /* ty=Tensor[(2, 384), float32] */;
    %402 = reshape(%400, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
    %403 = reshape(%401, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
    %404 = %385.7;
    %405 = %392.4;
    %406 = bitwise_or(%398, %399) /* ty=Tensor[(7, ?, 2), uint8] */;
    %407 = @func_5268(%402, %403) /* ty=Tensor[(16, 16, 3), float32] */;
    (%404, %var_8436, %var_8437, %var_8438, %405, meta[relay.Constant][29] /* ty=Tensor[(770), float64] */, %var_8442, meta[relay.Constant][30] /* ty=Tensor[(192), float32] */, %406, %407, meta[relay.Constant][31] /* ty=Tensor[(2, 384), float32] */)
  };
  %408(%var_8484, %var_8485, %var_8486, %var_8487) /* ty=(uint64, Tensor[(55, 6), float64], Tensor[(420), float64], Tensor[(392), float32], Tensor[(6, 16, 2), bool], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(7, ?, 2), uint8], Tensor[(16, 16, 3), float32], Tensor[(2, 384), float32]) */
}

def @func_8768(%var_8765: Tensor[(120), int16], %var_8766: Tensor[(14, 66), float32], %var_8767: Tensor[(560), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(7, 15, 2), uint32], Tensor[(210), uint32], Tensor[(6, 16, 2), bool], Tensor[(192), float32], Tensor[(7, ?, 2), bool], Tensor[(120), int16], Tensor[(14, 66), float32], Tensor[(560), float32]) {
  %427 = fn (%var_8742: Tensor[(120), int16], %var_8743: Tensor[(14, 66), float32], %var_8744: Tensor[(560), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(7, 15, 2), uint32], Tensor[(210), uint32], Tensor[(6, 16, 2), bool], Tensor[(192), float32], Tensor[(7, ?, 2), bool], Tensor[(120), int16], Tensor[(14, 66), float32], Tensor[(560), float32]) {
    %409 = @func_7188() /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) */;
    %410 = cast(meta[relay.Constant][32] /* ty=Tensor[(210), uint32] */, dtype="uint32") /* ty=Tensor[(210), uint32] */;
    %411 = reshape(%410, newshape=[7, 15, 2]) /* ty=Tensor[(7, 15, 2), uint32] */;
    %412 = @func_5615(%411) /* ty=(Tensor[(7, 15, 2), uint32],) */;
    %413 = cast(meta[relay.Constant][33] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %414 = reshape(%413, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
    %415 = cast(%var_8742, dtype="int16") /* ty=Tensor[(120), int16] */;
    %416 = cast(%var_8743, dtype="float32") /* ty=Tensor[(14, 66), float32] */;
    %417 = cast(%var_8744, dtype="float32") /* ty=Tensor[(560), float32] */;
    %418 = reshape(%415, newshape=[120]) /* ty=Tensor[(120), int16] */;
    %419 = reshape(%416, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
    %420 = reshape(%417, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
    %421 = @func_7136(%418, %419, %420) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(2, 1248), float32], Tensor[(120), int16], Tensor[(770), float64], Tensor[(312, 8), float32], Tensor[(924, 1404), bool], Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32]) */;
    %422 = %409.0;
    %423 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
    %424 = %412.0;
    %425 = @func_230(%414) /* ty=Tensor[(6, 16, 2), bool] */;
    %426 = %421.0;
    (%422, %423, %424, meta[relay.Constant][32] /* ty=Tensor[(210), uint32] */, %425, meta[relay.Constant][33] /* ty=Tensor[(192), float32] */, %426, %var_8742, %var_8743, %var_8744)
  };
  %427(%var_8765, %var_8766, %var_8767) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(7, 15, 2), uint32], Tensor[(210), uint32], Tensor[(6, 16, 2), bool], Tensor[(192), float32], Tensor[(7, ?, 2), bool], Tensor[(120), int16], Tensor[(14, 66), float32], Tensor[(560), float32]) */
}

def @func_9283() -> Tensor[(7, ?, 2), bool] {
  @func_8292() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_9330() -> Tensor[(7, ?, 2), float64] {
  %428 = fn () -> Tensor[(7, ?, 2), float64] {
    @func_8620() /* ty=Tensor[(7, ?, 2), float64] */
  };
  %428() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_9987(%var_9986: Tensor[(7, 7, 2), float64]) -> (Tensor[(7, 7, 2), float64],) {
  %434 = fn (%var_9967: Tensor[(7, 7, 2), float64]) -> (Tensor[(7, 7, 2), float64],) {
    %429 = @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */;
    %430 = %429.0;
    %431 = cast(%430, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
    %432 = cast(%var_9967, dtype="float64") /* ty=Tensor[(7, 7, 2), float64] */;
    %433 = power(%431, %432) /* ty=Tensor[(7, 7, 2), float64] */;
    (%433,)
  };
  %434(%var_9986) /* ty=(Tensor[(7, 7, 2), float64],) */
}

def @func_8683() -> (Tensor[(7, ?, 2), bool],) {
  @func_8681() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_1168(%var_1156: Tensor[(8, 11, 16), float32], %var_1157: Tensor[(8, 11, 16), float32]) -> (Tensor[(8, 11, 16), bool],) {
  %435 = cast(%var_1157, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %436 = shape_of(%var_1156, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%var_1156, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %439 = floor_divide(%437, %438) /* ty=Tensor[(8, 11, 16), float32] */;
  %440 = cast(%var_1156, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %441 = shape_of(%439, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%439, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %444 = not_equal(%442, %443) /* ty=Tensor[(8, 11, 16), bool] */;
  (%444,)
}

def @func_2079(%var_2075: Tensor[(13, 12, 9), float64], %var_2076: Tensor[(770), float64], %var_2077: Tensor[(924, 1), float32], %var_2078: Tensor[(2496), float32]) -> (Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) {
  @func_2073(%var_2075, %var_2076, %var_2077, %var_2078) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */
}

def @func_7395(%var_7390: Tensor[(8, 15, 8), bool], %var_7391: Tensor[(8, 15, 8), bool], %var_7392: Tensor[(308, 2), float32], %var_7393: Tensor[(150), float32], %var_7394: Tensor[(924), float32]) -> (Tensor[(8, 15, 8), bool], Tensor[(150), float32], float32, Tensor[(308, 2), float32], Tensor[(150), float32], Tensor[(1404, 1), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  %467 = fn (%var_7337: Tensor[(8, 15, 8), bool], %var_7338: Tensor[(8, 15, 8), bool], %var_7349: Tensor[(308, 2), float32], %var_7350: Tensor[(150), float32], %var_7352: Tensor[(924), float32]) -> (Tensor[(8, 15, 8), bool], Tensor[(150), float32], float32, Tensor[(308, 2), float32], Tensor[(150), float32], Tensor[(1404, 1), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
    %445 = cast(%var_7338, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
    %446 = shape_of(%var_7337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %447 = cast(%var_7337, dtype="bool") /* ty=Tensor[(8, 15, 8), bool] */;
    %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %449 = cast(1.64169f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %450 = cast(%var_7349, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
    %451 = cast(%var_7350, dtype="float32") /* ty=Tensor[(150), float32] */;
    %452 = cast(%var_7349, dtype="float32") /* ty=Tensor[(308, 2), float32] */;
    %453 = cast(meta[relay.Constant][34] /* ty=Tensor[(1404, 1), float64] */, dtype="float64") /* ty=Tensor[(1404, 1), float64] */;
    %454 = cast(%var_7352, dtype="float32") /* ty=Tensor[(924), float32] */;
    %455 = reshape(%449, newshape=[]) /* ty=float32 */;
    %456 = reshape(%450, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
    %457 = reshape(%451, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %458 = reshape(%452, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
    %459 = reshape(%453, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %460 = reshape(%454, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %461 = @func_5128(%455, %456, %457, %458, %459, %460) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */;
    %462 = cast(meta[relay.Constant][35] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %463 = reshape(%462, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
    %464 = logical_and(%447, %448) /* ty=Tensor[(8, 15, 8), bool] */;
    %465 = %461.2;
    %466 = @func_230(%463) /* ty=Tensor[(6, 16, 2), bool] */;
    (%464, %465, 1.64169f /* ty=float32 */, %var_7349, %var_7350, meta[relay.Constant][34] /* ty=Tensor[(1404, 1), float64] */, %var_7352, %466, meta[relay.Constant][35] /* ty=Tensor[(192), float32] */)
  };
  %467(%var_7390, %var_7391, %var_7392, %var_7393, %var_7394) /* ty=(Tensor[(8, 15, 8), bool], Tensor[(150), float32], float32, Tensor[(308, 2), float32], Tensor[(150), float32], Tensor[(1404, 1), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */
}

def @func_8205(%var_8186: Tensor[(5, 1, 7), float32]) -> (Tensor[(5, 1, 7), float32],) {
  %468 = cast(%var_8186, dtype="float32") /* ty=Tensor[(5, 1, 7), float32] */;
  %469 = atan(%468) /* ty=Tensor[(5, 1, 7), float32] */;
  (%469,)
}

def @func_7069(%var_7065: Tensor[(4, 10, 4), float32], %var_7066: Tensor[(560, 1), float32], %var_7067: Tensor[(1408), float32], %var_7068: Tensor[(420), float64]) -> (Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) {
  %491 = fn (%var_7021: Tensor[(4, 10, 4), float32], %var_7027: Tensor[(560, 1), float32], %var_7040: Tensor[(1408), float32], %var_7062: Tensor[(420), float64]) -> (Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) {
    %470 = cast(%var_7027, dtype="float32") /* ty=Tensor[(560, 1), float32] */;
    %471 = reshape(%470, newshape=[5, 14, 8]) /* ty=Tensor[(5, 14, 8), float32] */;
    %472 = @func_6207(%471) /* ty=(Tensor[(5, 14, 8), uint16],) */;
    %473 = cast(%var_7021, dtype="float32") /* ty=Tensor[(4, 10, 4), float32] */;
    %474 = atanh(%473) /* ty=Tensor[(4, 10, 4), float32] */;
    %475 = cast(%var_7021, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
    %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(3), int32] */;
    %477 = cast(%474, dtype="float64") /* ty=Tensor[(4, 10, 4), float64] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %479 = cast(meta[relay.Constant][36] /* ty=Tensor[(448, 4), float32] */, dtype="float32") /* ty=Tensor[(448, 4), float32] */;
    %480 = cast(%var_7040, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %481 = reshape(%479, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float32] */;
    %482 = reshape(%480, newshape=[22, 64]) /* ty=Tensor[(22, 64), float32] */;
    %483 = @func_1418(%481, %482) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */;
    %484 = cast(%var_7062, dtype="float64") /* ty=Tensor[(420), float64] */;
    %485 = reshape(%484, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %486 = @func_1697(%485) /* ty=(Tensor[(4, 15, 7), float64],) */;
    %487 = %472.0;
    %488 = floor_mod(%477, %478) /* ty=Tensor[(4, 10, 4), float64] */;
    %489 = %483.2;
    %490 = %486.0;
    (%487, %var_7027, %488, %489, meta[relay.Constant][36] /* ty=Tensor[(448, 4), float32] */, %var_7040, %490, %var_7062)
  };
  %491(%var_7065, %var_7066, %var_7067, %var_7068) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */
}

def @func_8674() -> (Tensor[(7, ?, 2), float64],) {
  %492 = @func_8122() /* ty=Tensor[(7, ?, 2), float64] */;
  (%492,)
}

def @func_230(%var_222: Tensor[(6, 16, 2), float32]) -> Tensor[(6, 16, 2), bool] {
  %493 = cast(%var_222, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %494 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(6, 16, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(meta[relay.Constant][37] /* ty=Tensor[(6, 16, 2), float32] */, dtype="bool") /* ty=Tensor[(6, 16, 2), bool] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%495, %496) /* ty=Tensor[(6, 16, 2), bool] */
}

def @func_8386(%var_8382: Tensor[(7, 2, 2), float64], %var_8383: Tensor[(7, 2, 2), float64], %var_8384: Tensor[(924), float32], %var_8385: Tensor[(2496), float32]) -> (Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), int8], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool], Tensor[(16, 12, 13), float32], Tensor[(2496), float32]) {
  @func_8380(%var_8382, %var_8383, %var_8384, %var_8385) /* ty=(Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), int8], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool], Tensor[(16, 12, 13), float32], Tensor[(2496), float32]) */
}

def @func_7921(%var_7918: Tensor[(7, 14, 2), bool], %var_7919: Tensor[(924), float32], %var_7920: Tensor[(192), float64]) -> (Tensor[(7, 14, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(192), float64]) {
  %519 = fn (%var_7874: Tensor[(7, 14, 2), bool], %var_7895: Tensor[(924), float32], %var_7908: Tensor[(192), float64]) -> (Tensor[(7, 14, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(192), float64]) {
    %497 = @func_7333() /* ty=Tensor[(7, ?, 2), bool] */;
    %498 = cast(%497, dtype="bool") /* ty=Tensor[(7, ?, 2), bool] */;
    %499 = cast(%var_7874, dtype="bool") /* ty=Tensor[(7, 14, 2), bool] */;
    %500 = cast(meta[relay.Constant][38] /* ty=Tensor[(1, 770), float64] */, dtype="float64") /* ty=Tensor[(1, 770), float64] */;
    %501 = cast(%var_7895, dtype="float32") /* ty=Tensor[(924), float32] */;
    %502 = reshape(%500, newshape=[11, 5, 14]) /* ty=Tensor[(11, 5, 14), float64] */;
    %503 = reshape(%501, newshape=[154, 6]) /* ty=Tensor[(154, 6), float32] */;
    %504 = @func_1123(%502, %503) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */;
    %505 = cast(meta[relay.Constant][39] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
    %506 = cast(meta[relay.Constant][39] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
    %507 = cast(meta[relay.Constant][39] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
    %508 = cast(meta[relay.Constant][39] /* ty=Tensor[(252), int64] */, dtype="int64") /* ty=Tensor[(252), int64] */;
    %509 = cast(%var_7908, dtype="float64") /* ty=Tensor[(192), float64] */;
    %510 = reshape(%505, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
    %511 = reshape(%506, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
    %512 = reshape(%507, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
    %513 = reshape(%508, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
    %514 = reshape(%509, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float64] */;
    %515 = @func_371(%510, %511, %512, %513, %514) /* ty=(Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) */;
    %516 = not_equal(%498, %499) /* ty=Tensor[(7, 14, 2), bool] */;
    %517 = %504.1;
    %518 = %515.6;
    (%516, %517, meta[relay.Constant][38] /* ty=Tensor[(1, 770), float64] */, %var_7895, %518, meta[relay.Constant][39] /* ty=Tensor[(252), int64] */, %var_7908)
  };
  %519(%var_7918, %var_7919, %var_7920) /* ty=(Tensor[(7, 14, 2), bool], Tensor[(6, 14, 11), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(192), float64]) */
}

def @func_8620() -> Tensor[(7, ?, 2), float64] {
  @func_8068() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_8953() -> (Tensor[(7, ?, 2), float64],) {
  %522 = fn () -> (Tensor[(7, ?, 2), float64],) {
    %520 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %521 = %520.0;
    (%521,)
  };
  %522() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_8122() -> Tensor[(7, ?, 2), float64] {
  @func_8068() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_6933() -> (Tensor[(7, ?, 2), bool],) {
  @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_7736() -> (Tensor[(7, ?, 2), bool],) {
  %525 = fn () -> (Tensor[(7, ?, 2), bool],) {
    %523 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %524 = %523.0;
    (%524,)
  };
  %525() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_2326(%var_2323: Tensor[(7, 8, 7), float32], %var_2324: uint64, %var_2325: Tensor[(924), float32]) -> (Tensor[(7, 8, 7), float64], Tensor[(7, 8, 7), float64], Tensor[(924), float32], uint64, Tensor[(924), float32], Tensor[(540), int16]) {
  @func_2321(%var_2323, %var_2324, %var_2325) /* ty=(Tensor[(7, 8, 7), float64], Tensor[(7, 8, 7), float64], Tensor[(924), float32], uint64, Tensor[(924), float32], Tensor[(540), int16]) */
}

def @func_7788() -> (Tensor[(7, ?, 2), float64],) {
  %526 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %527 = %526.0;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
  %529 = sinh(%528) /* ty=Tensor[(7, ?, 2), float64] */;
  (%529,)
}

def @func_8420() -> Tensor[(7, ?, 2), bool] {
  %531 = fn () -> Tensor[(7, ?, 2), bool] {
    %530 = @func_7269() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */;
    %530.1
  };
  %531() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_9871() -> (Tensor[(7, ?, 2), bool],) {
  %532 = @func_9635() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %533 = %532.0;
  (%533,)
}

def @func_10375() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  %537 = fn () -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
    %534 = @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */;
    %535 = %534.0;
    %536 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
    (%535, %536)
  };
  %537() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */
}

def @func_11007(%var_11006: Tensor[(1792), float32]) -> (Tensor[(7, ?, 2), uint8], Tensor[(3), int8], Tensor[(126, 1), int8], Tensor[(4, 2), float64], Tensor[(1792), float32], Tensor[(22, 64), int16], Tensor[(7, ?, 2), float64]) {
  %574 = fn (%var_10934: Tensor[(1792), float32]) -> (Tensor[(7, ?, 2), uint8], Tensor[(3), int8], Tensor[(126, 1), int8], Tensor[(4, 2), float64], Tensor[(1792), float32], Tensor[(22, 64), int16], Tensor[(7, ?, 2), float64]) {
    %538 = @func_9635() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %539 = %538.0;
    %540 = cast(%539, dtype="float32") /* ty=Tensor[(7, ?, 2), float32] */;
    %541 = rsqrt(%540) /* ty=Tensor[(7, ?, 2), float32] */;
    %542 = cast(%541, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
    %543 = shape_of(%539, dtype="int32") /* ty=Tensor[(3), int32] */;
    %544 = cast(%539, dtype="uint8") /* ty=Tensor[(7, ?, 2), uint8] */;
    %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %546 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 2), float64] */;
    %547 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %548 = reshape(%546, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
    %549 = reshape(%547, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
    %550 = @func_3452(%548, %549) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */;
    %551 = %550.1;
    %552 = cast(meta[relay.Constant][40] /* ty=Tensor[(3), int8] */, dtype="int8") /* ty=Tensor[(3), int8] */;
    %553 = cast(meta[relay.Constant][41] /* ty=Tensor[(126, 1), int8] */, dtype="int8") /* ty=Tensor[(126, 1), int8] */;
    %554 = cast(meta[relay.Constant][42] /* ty=Tensor[(4, 2), float64] */, dtype="float64") /* ty=Tensor[(4, 2), float64] */;
    %555 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %556 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %557 = cast(%var_10934, dtype="float32") /* ty=Tensor[(1792), float32] */;
    %558 = reshape(%552, newshape=[1, 1, 3]) /* ty=Tensor[(1, 1, 3), int8] */;
    %559 = reshape(%553, newshape=[14, 3, 3]) /* ty=Tensor[(14, 3, 3), int8] */;
    %560 = reshape(%554, newshape=[8]) /* ty=Tensor[(8), float64] */;
    %561 = reshape(%555, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
    %562 = reshape(%556, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
    %563 = reshape(%557, newshape=[2, 896]) /* ty=Tensor[(2, 896), float32] */;
    %564 = @func_5881(%558, %559, %560, %561, %562, %563) /* ty=(Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) */;
    %565 = %564.1;
    %566 = cast(%565, dtype="int16") /* ty=Tensor[(1408), int16] */;
    %567 = shape_of(%551, dtype="int32") /* ty=Tensor[(2), int32] */;
    %568 = cast(%551, dtype="int16") /* ty=Tensor[(22, 64), int16] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %570 = cast(%539, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
    %571 = right_shift(%544, %545) /* ty=Tensor[(7, ?, 2), uint8] */;
    %572 = right_shift(%568, %569) /* ty=Tensor[(22, 64), int16] */;
    %573 = atanh(%570) /* ty=Tensor[(7, ?, 2), float64] */;
    (%571, meta[relay.Constant][40] /* ty=Tensor[(3), int8] */, meta[relay.Constant][41] /* ty=Tensor[(126, 1), int8] */, meta[relay.Constant][42] /* ty=Tensor[(4, 2), float64] */, %var_10934, %572, %573)
  };
  %574(%var_11006) /* ty=(Tensor[(7, ?, 2), uint8], Tensor[(3), int8], Tensor[(126, 1), int8], Tensor[(4, 2), float64], Tensor[(1792), float32], Tensor[(22, 64), int16], Tensor[(7, ?, 2), float64]) */
}

def @func_4682(%var_4679: Tensor[(1, 7, 6), uint32], %var_4680: Tensor[(14, 7, 6), uint32], %var_4681: Tensor[(540), int16]) -> (Tensor[(14, 7, 6), bool], Tensor[(1, 7, 6), float32], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(14, 7, 6), float32]) {
  %588 = fn (%var_4628: Tensor[(1, 7, 6), uint32], %var_4629: Tensor[(14, 7, 6), uint32], %var_4672: Tensor[(540), int16]) -> (Tensor[(14, 7, 6), bool], Tensor[(1, 7, 6), float32], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(14, 7, 6), float32]) {
    %575 = cast(%var_4628, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
    %576 = cast(%var_4629, dtype="bool") /* ty=Tensor[(14, 7, 6), bool] */;
    %577 = not_equal(%575, %576) /* ty=Tensor[(14, 7, 6), bool] */;
    %578 = cast(%577, dtype="bool") /* ty=Tensor[(14, 7, 6), bool] */;
    %579 = cast(%var_4628, dtype="bool") /* ty=Tensor[(1, 7, 6), bool] */;
    %580 = cast(%var_4628, dtype="float32") /* ty=Tensor[(1, 7, 6), float32] */;
    %581 = cast(%var_4672, dtype="int16") /* ty=Tensor[(540), int16] */;
    %582 = reshape(%581, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), int16] */;
    %583 = cast(%577, dtype="float32") /* ty=Tensor[(14, 7, 6), float32] */;
    %584 = greater_equal(%578, %579) /* ty=Tensor[(14, 7, 6), bool] */;
    %585 = rsqrt(%580) /* ty=Tensor[(1, 7, 6), float32] */;
    %586 = @func_1855(%582) /* ty=Tensor[(5, 12, 9), bool] */;
    %587 = log10(%583) /* ty=Tensor[(14, 7, 6), float32] */;
    (%584, %585, %586, %var_4672, %587)
  };
  %588(%var_4679, %var_4680, %var_4681) /* ty=(Tensor[(14, 7, 6), bool], Tensor[(1, 7, 6), float32], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(14, 7, 6), float32]) */
}

def @func_4266(%var_4264: Tensor[(9, 15, 4), uint64]) -> Tensor[(9, 15, 4), bool] {
  @func_4263(%var_4264) /* ty=Tensor[(9, 15, 4), bool] */
}

def @func_9403() -> (Tensor[(7, ?, 2), float64],) {
  %590 = fn () -> (Tensor[(7, ?, 2), float64],) {
    %589 = @func_8620() /* ty=Tensor[(7, ?, 2), float64] */;
    (%589,)
  };
  %590() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_10398(%var_10397: Tensor[(7, 16, 2), float64]) -> (Tensor[(7, 16, 2), float64], Tensor[(7, ?, 2), bool]) {
  %597 = fn (%var_10385: Tensor[(7, 16, 2), float64]) -> (Tensor[(7, 16, 2), float64], Tensor[(7, ?, 2), bool]) {
    %591 = @func_9108() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) */;
    %592 = %591.0;
    %593 = cast(%592, dtype="float64") /* ty=Tensor[(7, ?, 2), float64] */;
    %594 = cast(%var_10385, dtype="float64") /* ty=Tensor[(7, 16, 2), float64] */;
    %595 = floor_mod(%593, %594) /* ty=Tensor[(7, 16, 2), float64] */;
    %596 = @func_8419() /* ty=Tensor[(7, ?, 2), bool] */;
    (%595, %596)
  };
  %597(%var_10397) /* ty=(Tensor[(7, 16, 2), float64], Tensor[(7, ?, 2), bool]) */
}

def @func_378(%var_373: Tensor[(14, 2, 9), int64], %var_374: Tensor[(14, 2, 9), int64], %var_375: Tensor[(14, 2, 9), int64], %var_376: Tensor[(14, 2, 9), int64], %var_377: Tensor[(6, 16, 2), float64]) -> (Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) {
  @func_371(%var_373, %var_374, %var_375, %var_376, %var_377) /* ty=(Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) */
}

def @func_8292() -> Tensor[(7, ?, 2), bool] {
  %598 = @func_7269() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */;
  %598.1
}

def @func_1858(%var_1856: Tensor[(5, 12, 9), int16]) -> Tensor[(5, 12, 9), bool] {
  @func_1855(%var_1856) /* ty=Tensor[(5, 12, 9), bool] */
}

def @func_10103() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) {
  %603 = fn () -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) {
    %599 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %600 = @func_8952() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %601 = %599.0;
    %602 = %600.0;
    (%601, %602)
  };
  %603() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) */
}

def @func_10241() -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), float64]) {
  %608 = fn () -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), float64]) {
    %604 = @func_8999() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %605 = @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %606 = %604.0;
    %607 = %605.0;
    (%606, %607)
  };
  %608() /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), float64]) */
}

def @main(%var_11028: Tensor[(7, 16, 2), bool]) -> Tensor[(7, 16, 2), uint16] {
  %609 = @func_9283() /* ty=Tensor[(7, ?, 2), bool] */;
  %610 = cast(%609, dtype="uint16") /* ty=Tensor[(7, ?, 2), uint16] */;
  %611 = cast(%var_11028, dtype="uint16") /* ty=Tensor[(7, 16, 2), uint16] */;
  left_shift(%610, %611) /* ty=Tensor[(7, 16, 2), uint16] */
}

def @func_9108() -> (Tensor[(7, ?, 2), float64], Tensor[(10, 1, 15), float32], Tensor[(150), float32]) {
  %612 = @func_8401() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %613 = cast(meta[relay.Constant][43] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %614 = reshape(%613, newshape=[10, 1, 15]) /* ty=Tensor[(10, 1, 15), float32] */;
  %615 = @func_3195(%614) /* ty=(Tensor[(10, 1, 15), float32],) */;
  %616 = %612.0;
  %617 = %615.0;
  (%616, %617, meta[relay.Constant][43] /* ty=Tensor[(150), float32] */)
}

def @func_4770(%var_4758: Tensor[(11, 1, 9), int8], %var_4764: Tensor[(420), float64]) -> (Tensor[(11, 10, 9), int8], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) {
  %618 = cast(%var_4758, dtype="int8") /* ty=Tensor[(11, 1, 9), int8] */;
  %619 = cast(meta[relay.Constant][44] /* ty=Tensor[(11, 10, 9), int8] */, dtype="int8") /* ty=Tensor[(11, 10, 9), int8] */;
  %620 = cast(%var_4764, dtype="float64") /* ty=Tensor[(420), float64] */;
  %621 = reshape(%620, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
  %622 = @func_1697(%621) /* ty=(Tensor[(4, 15, 7), float64],) */;
  %623 = bitwise_or(%618, %619) /* ty=Tensor[(11, 10, 9), int8] */;
  %624 = %622.0;
  (%623, %624, %var_4764)
}

def @func_6903() -> (Tensor[(7, ?, 2), bool],) {
  %626 = fn () -> (Tensor[(7, ?, 2), bool],) {
    %625 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
    (%625,)
  };
  %626() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_9619(%var_9569: Tensor[(810), bool], %var_9582: Tensor[(462), int8], %var_9585: Tensor[(160), float32], %var_9586: Tensor[(560), float32], %var_9587: Tensor[(1408), float32], %var_9588: Tensor[(420), float64]) -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(448, 4), float32], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408), float32], Tensor[(420), float64]) {
  %627 = cast(True /* ty=bool */, dtype="bool") /* ty=bool */;
  %628 = cast(%var_9569, dtype="bool") /* ty=Tensor[(810), bool] */;
  %629 = reshape(%627, newshape=[]) /* ty=bool */;
  %630 = reshape(%628, newshape=[6, 15, 9]) /* ty=Tensor[(6, 15, 9), bool] */;
  %631 = cast(%var_9582, dtype="int8") /* ty=Tensor[(462), int8] */;
  %632 = reshape(%631, newshape=[462]) /* ty=Tensor[(462), int8] */;
  %633 = @func_8249(%632) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(11, 6, 7), int8], Tensor[(462), int8], Tensor[(1404), float64], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) */;
  %634 = cast(%var_9585, dtype="float32") /* ty=Tensor[(160), float32] */;
  %635 = cast(%var_9586, dtype="float32") /* ty=Tensor[(560), float32] */;
  %636 = cast(%var_9587, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %637 = cast(%var_9588, dtype="float64") /* ty=Tensor[(420), float64] */;
  %638 = reshape(%634, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), float32] */;
  %639 = reshape(%635, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %640 = reshape(%636, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %641 = reshape(%637, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %642 = @func_7064(%638, %639, %640, %641) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */;
  %643 = @func_9329() /* ty=Tensor[(7, ?, 2), float64] */;
  %644 = @func_8620() /* ty=Tensor[(7, ?, 2), float64] */;
  %645 = @func_8151(%629, %630) /* ty=Tensor[(6, 15, 9), bool] */;
  %646 = %633.1;
  %647 = %642.4;
  (%643, %644, %645, True /* ty=bool */, %var_9569, %646, %var_9582, %647, %var_9585, %var_9586, %var_9587, %var_9588)
}

def @func_5271(%var_5269: Tensor[(16, 16, 3), float32], %var_5270: Tensor[(16, 16, 3), float32]) -> Tensor[(16, 16, 3), float32] {
  %652 = fn (%var_5255: Tensor[(16, 16, 3), float32], %var_5256: Tensor[(16, 16, 3), float32]) -> Tensor[(16, 16, 3), float32] {
    %648 = cast(%var_5256, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
    %649 = shape_of(%var_5255, dtype="int32") /* ty=Tensor[(3), int32] */;
    %650 = cast(%var_5255, dtype="float32") /* ty=Tensor[(16, 16, 3), float32] */;
    %651 = dyn.reshape(%648, %649, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    add(%650, %651) /* ty=Tensor[(16, 16, 3), float32] */
  };
  %652(%var_5269, %var_5270) /* ty=Tensor[(16, 16, 3), float32] */
}

def @func_7334() -> Tensor[(7, ?, 2), bool] {
  %654 = fn () -> Tensor[(7, ?, 2), bool] {
    %653 = @func_7188() /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool]) */;
    %653.0
  };
  %654() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_9439(%var_9437: Tensor[(7, 11, 2), float64]) -> (Tensor[(7, 11, 2), int8], Tensor[(7, ?, 2), bool]) {
  @func_9436(%var_9437) /* ty=(Tensor[(7, 11, 2), int8], Tensor[(7, ?, 2), bool]) */
}

def @func_6210(%var_6208: Tensor[(5, 14, 8), float32]) -> (Tensor[(5, 14, 8), uint16],) {
  @func_6207(%var_6208) /* ty=(Tensor[(5, 14, 8), uint16],) */
}

def @func_2677(%var_2675: Tensor[(5, 11, 14), float64], %var_2676: Tensor[(252), int64]) -> (Tensor[(5, 11, 14), float64], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(8, 24), float64]) {
  @func_2673(%var_2675, %var_2676) /* ty=(Tensor[(5, 11, 14), float64], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(8, 24), float64]) */
}

def @func_8294() -> Tensor[(7, ?, 2), bool] {
  @func_8292() /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_8151(%var_8146: bool, %var_8147: Tensor[(6, 15, 9), bool]) -> Tensor[(6, 15, 9), bool] {
  %655 = cast(%var_8146, dtype="bool") /* ty=bool */;
  %656 = cast(%var_8147, dtype="bool") /* ty=Tensor[(6, 15, 9), bool] */;
  logical_or(%655, %656) /* ty=Tensor[(6, 15, 9), bool] */
}

def @func_763(%var_761: Tensor[(6, 14, 11), float32]) -> (Tensor[(6, 14, 11), float32],) {
  @func_760(%var_761) /* ty=(Tensor[(6, 14, 11), float32],) */
}

def @func_6870() -> Tensor[(7, ?, 2), bool] {
  %657 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 1, 2), float32] */, dtype="float32") /* ty=Tensor[(7, 1, 2), float32] */;
  %658 = acosh(%657) /* ty=Tensor[(7, 1, 2), float32] */;
  %659 = cast(meta[relay.Constant][45] /* ty=Tensor[(7, 1, 2), float32] */, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %660 = shape_of(%658, dtype="int32") /* ty=Tensor[(3), int32] */;
  %661 = cast(%658, dtype="bool") /* ty=Tensor[(7, 1, 2), bool] */;
  %662 = dyn.reshape(%659, %660, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_and(%661, %662) /* ty=Tensor[(7, ?, 2), bool] */
}

def @func_5617(%var_5616: Tensor[(7, 15, 2), uint32]) -> (Tensor[(7, 15, 2), uint32],) {
  %668 = fn (%var_5603: Tensor[(7, 15, 2), uint32]) -> (Tensor[(7, 15, 2), uint32],) {
    %663 = cast(meta[relay.Constant][46] /* ty=Tensor[(7, 15, 2), uint32] */, dtype="uint32") /* ty=Tensor[(7, 15, 2), uint32] */;
    %664 = shape_of(%var_5603, dtype="int32") /* ty=Tensor[(3), int32] */;
    %665 = cast(%var_5603, dtype="uint32") /* ty=Tensor[(7, 15, 2), uint32] */;
    %666 = dyn.reshape(%663, %664, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %667 = bitwise_or(%665, %666) /* ty=Tensor[(7, 15, 2), uint32] */;
    (%667,)
  };
  %668(%var_5616) /* ty=(Tensor[(7, 15, 2), uint32],) */
}

def @func_8676() -> (Tensor[(7, ?, 2), float64],) {
  @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_7722(%var_7663: Tensor[(330), float64], %var_7665: Tensor[(1, 392), float32], %var_7718: Tensor[(192), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(924), float32], Tensor[(330), float64], Tensor[(420), float64], Tensor[(1, 392), float32], Tensor[(6, 14, 11), float32], Tensor[(7, ?, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) {
  %669 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %670 = cast(%var_7663, dtype="float64") /* ty=Tensor[(330), float64] */;
  %671 = cast(%var_7663, dtype="float64") /* ty=Tensor[(330), float64] */;
  %672 = cast(meta[relay.Constant][47] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
  %673 = cast(%var_7665, dtype="float32") /* ty=Tensor[(1, 392), float32] */;
  %674 = reshape(%670, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %675 = reshape(%671, newshape=[6, 5, 11]) /* ty=Tensor[(6, 5, 11), float64] */;
  %676 = reshape(%672, newshape=[210, 2]) /* ty=Tensor[(210, 2), float64] */;
  %677 = reshape(%673, newshape=[392]) /* ty=Tensor[(392), float32] */;
  %678 = @func_2786(%674, %675, %676, %677) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) */;
  %679 = %678.8;
  %680 = cast(%679, dtype="float32") /* ty=Tensor[(924), float32] */;
  %681 = reshape(%680, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %682 = @func_760(%681) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %683 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %684 = cast(%var_7718, dtype="float32") /* ty=Tensor[(192), float32] */;
  %685 = reshape(%684, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float32] */;
  %686 = %669.0;
  %687 = %682.0;
  %688 = %683.0;
  %689 = @func_230(%685) /* ty=Tensor[(6, 16, 2), bool] */;
  (%686, %679, %var_7663, meta[relay.Constant][47] /* ty=Tensor[(420), float64] */, %var_7665, %687, %688, %689, %var_7718)
}

def @func_10859(%var_10856: Tensor[(3, 15, 7), float32], %var_10857: Tensor[(924), float32], %var_10858: Tensor[(8), float64]) -> (Tensor[(3, 15, 7), float32], Tensor[(7, 2, 2), bool], Tensor[(28), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(3, 15, 7), uint32], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(1792), float32], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) {
  @func_10854(%var_10856, %var_10857, %var_10858) /* ty=(Tensor[(3, 15, 7), float32], Tensor[(7, 2, 2), bool], Tensor[(28), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(3, 15, 7), uint32], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(1792), float32], Tensor[(6, 15, 9), bool], bool, Tensor[(810), bool], Tensor[(9, 15, 4), bool], Tensor[(540), uint64]) */
}

def @func_8681() -> (Tensor[(7, ?, 2), bool],) {
  %690 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %691 = %690.0;
  (%691,)
}

def @func_2923(%var_2922: Tensor[(1, 924), float32]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float64], Tensor[(6, 14, 11), float32], Tensor[(1, 924), float32]) {
  %703 = fn (%var_2918: Tensor[(1, 924), float32]) -> (Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float64], Tensor[(6, 14, 11), float32], Tensor[(1, 924), float32]) {
    %692 = cast(meta[relay.Constant][49] /* ty=Tensor[(6, 8, 16), int16] */, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
    %693 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(6, 8, 16), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %694 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 8, 16), int16] */, dtype="bool") /* ty=Tensor[(6, 8, 16), bool] */;
    %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %696 = cast(meta[relay.Constant][48] /* ty=Tensor[(6, 8, 16), int16] */, dtype="float64") /* ty=Tensor[(6, 8, 16), float64] */;
    %697 = cast(%var_2918, dtype="float32") /* ty=Tensor[(1, 924), float32] */;
    %698 = reshape(%697, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
    %699 = @func_760(%698) /* ty=(Tensor[(6, 14, 11), float32],) */;
    %700 = equal(%694, %695) /* ty=Tensor[(6, 8, 16), bool] */;
    %701 = asin(%696) /* ty=Tensor[(6, 8, 16), float64] */;
    %702 = %699.0;
    (%700, %701, %702, %var_2918)
  };
  %703(%var_2922) /* ty=(Tensor[(6, 8, 16), bool], Tensor[(6, 8, 16), float64], Tensor[(6, 14, 11), float32], Tensor[(1, 924), float32]) */
}

def @func_2673(%var_2658: Tensor[(5, 11, 14), float64], %var_2670: Tensor[(252), int64]) -> (Tensor[(5, 11, 14), float64], Tensor[(6, 16, 2), bool], Tensor[(252), int64], Tensor[(8, 24), float64]) {
  %704 = cast(%var_2658, dtype="float64") /* ty=Tensor[(5, 11, 14), float64] */;
  %705 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %706 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %707 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %708 = cast(%var_2670, dtype="int64") /* ty=Tensor[(252), int64] */;
  %709 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 24), float64] */, dtype="float64") /* ty=Tensor[(8, 24), float64] */;
  %710 = reshape(%705, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %711 = reshape(%706, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %712 = reshape(%707, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %713 = reshape(%708, newshape=[14, 2, 9]) /* ty=Tensor[(14, 2, 9), int64] */;
  %714 = reshape(%709, newshape=[6, 16, 2]) /* ty=Tensor[(6, 16, 2), float64] */;
  %715 = @func_371(%710, %711, %712, %713, %714) /* ty=(Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), uint8], Tensor[(192), float32], Tensor[(14, 2, 9), bool], Tensor[(14, 2, 9), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), uint64], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), bool], Tensor[(6, 16, 2), float64], Tensor[(6, 16, 2), bool]) */;
  %716 = log(%704) /* ty=Tensor[(5, 11, 14), float64] */;
  %717 = %715.9;
  (%716, %717, %var_2670, meta[relay.Constant][50] /* ty=Tensor[(8, 24), float64] */)
}

def @func_8622() -> Tensor[(7, ?, 2), float64] {
  @func_8620() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_8124() -> Tensor[(7, ?, 2), float64] {
  @func_8122() /* ty=Tensor[(7, ?, 2), float64] */
}

def @func_8380(%var_8321: Tensor[(7, 2, 2), float64], %var_8338: Tensor[(7, 2, 2), float64], %var_8350: Tensor[(924), float32], %var_8376: Tensor[(2496), float32]) -> (Tensor[(7, 2, 2), bool], Tensor[(7, 2, 2), int8], Tensor[(6, 14, 11), float32], Tensor[(924), float32], Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool], Tensor[(16, 12, 13), float32], Tensor[(2496), float32]) {
  %718 = @func_8122() /* ty=Tensor[(7, ?, 2), float64] */;
  %719 = cast(%718, dtype="bool") /* ty=Tensor[(7, ?, 2), bool] */;
  %720 = cast(%var_8321, dtype="bool") /* ty=Tensor[(7, 2, 2), bool] */;
  %721 = cast(%var_8338, dtype="int8") /* ty=Tensor[(7, 2, 2), int8] */;
  %722 = shape_of(%var_8321, dtype="int32") /* ty=Tensor[(3), int32] */;
  %723 = cast(%var_8321, dtype="int8") /* ty=Tensor[(7, 2, 2), int8] */;
  %724 = dyn.reshape(%721, %722, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %725 = cast(%var_8350, dtype="float32") /* ty=Tensor[(924), float32] */;
  %726 = reshape(%725, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %727 = @func_760(%726) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %728 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %729 = @func_7735() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %730 = cast(%var_8376, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %731 = reshape(%730, newshape=[16, 12, 13]) /* ty=Tensor[(16, 12, 13), float32] */;
  %732 = @func_1982(%731) /* ty=(Tensor[(16, 12, 13), float32],) */;
  %733 = less_equal(%719, %720) /* ty=Tensor[(7, 2, 2), bool] */;
  %734 = logical_xor(%723, %724) /* ty=Tensor[(7, 2, 2), int8] */;
  %735 = %727.0;
  %736 = %728.0;
  %737 = %729.0;
  %738 = %732.0;
  (%733, %734, %735, %var_8350, %736, %737, %738, %var_8376)
}

def @func_10432() -> (Tensor[(7, ?, 2), float64],) {
  %741 = fn () -> (Tensor[(7, ?, 2), float64],) {
    %739 = @func_8952() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %740 = %739.0;
    (%740,)
  };
  %741() /* ty=(Tensor[(7, ?, 2), float64],) */
}

def @func_9388(%var_9387: Tensor[(7, 8, 2), bool]) -> (Tensor[(7, 8, 2), bool], Tensor[(420), float64], Tensor[(4, 15, 7), float64]) {
  %752 = fn (%var_9362: Tensor[(7, 8, 2), bool]) -> (Tensor[(7, 8, 2), bool], Tensor[(420), float64], Tensor[(4, 15, 7), float64]) {
    %742 = @func_6870() /* ty=Tensor[(7, ?, 2), bool] */;
    %743 = cast(%742, dtype="bool") /* ty=Tensor[(7, ?, 2), bool] */;
    %744 = cast(%var_9362, dtype="bool") /* ty=Tensor[(7, 8, 2), bool] */;
    %745 = cast(meta[relay.Constant][51] /* ty=Tensor[(420), float64] */, dtype="float64") /* ty=Tensor[(420), float64] */;
    %746 = reshape(%745, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %747 = @func_1697(%746) /* ty=(Tensor[(4, 15, 7), float64],) */;
    %748 = %747.0;
    %749 = cast(%748, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %750 = not_equal(%743, %744) /* ty=Tensor[(7, 8, 2), bool] */;
    %751 = atan(%749) /* ty=Tensor[(4, 15, 7), float64] */;
    (%750, meta[relay.Constant][51] /* ty=Tensor[(420), float64] */, %751)
  };
  %752(%var_9387) /* ty=(Tensor[(7, 8, 2), bool], Tensor[(420), float64], Tensor[(4, 15, 7), float64]) */
}

def @func_9214(%var_9207: Tensor[(3, 1, 8), float64], %var_9208: Tensor[(160), float32], %var_9209: Tensor[(1, 560), float32], %var_9210: Tensor[(420), float64], %var_9211: Tensor[(616), float32], %var_9212: Tensor[(25, 6), float32], %var_9213: Tensor[(18, 78), float64]) -> (Tensor[(3, 9, 8), uint16], Tensor[(7, ?, 2), float64], Tensor[(3, 9, 8), uint64], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(7, ?, 2), bool], Tensor[(4, 10, 4), float64], Tensor[(160), float32], Tensor[(1, 560), float32], Tensor[(1408), float32], Tensor[(420), float64], Tensor[(7, 8, 11), bool], float32, Tensor[(616), float32], Tensor[(25, 6), float32], Tensor[(18, 78), float64], Tensor[(924), float32]) {
  %799 = fn (%var_9129: Tensor[(3, 1, 8), float64], %var_9191: Tensor[(160), float32], %var_9192: Tensor[(1, 560), float32], %var_9194: Tensor[(420), float64], %var_9200: Tensor[(616), float32], %var_9201: Tensor[(25, 6), float32], %var_9202: Tensor[(18, 78), float64]) -> (Tensor[(3, 9, 8), uint16], Tensor[(7, ?, 2), float64], Tensor[(3, 9, 8), uint64], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(7, ?, 2), bool], Tensor[(4, 10, 4), float64], Tensor[(160), float32], Tensor[(1, 560), float32], Tensor[(1408), float32], Tensor[(420), float64], Tensor[(7, 8, 11), bool], float32, Tensor[(616), float32], Tensor[(25, 6), float32], Tensor[(18, 78), float64], Tensor[(924), float32]) {
    %753 = cast(%var_9129, dtype="float64") /* ty=Tensor[(3, 1, 8), float64] */;
    %754 = atan(%753) /* ty=Tensor[(3, 1, 8), float64] */;
    %755 = cast(%754, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
    %756 = exp(%755) /* ty=Tensor[(3, 1, 8), float32] */;
    %757 = cast(%756, dtype="uint16") /* ty=Tensor[(3, 1, 8), uint16] */;
    %758 = cast(meta[relay.Constant][52] /* ty=Tensor[(3, 9, 8), float32] */, dtype="uint16") /* ty=Tensor[(3, 9, 8), uint16] */;
    %759 = left_shift(%757, %758) /* ty=Tensor[(3, 9, 8), uint16] */;
    %760 = cast(%759, dtype="uint16") /* ty=Tensor[(3, 9, 8), uint16] */;
    %761 = cast(%754, dtype="uint16") /* ty=Tensor[(3, 1, 8), uint16] */;
    %762 = @func_8674() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %763 = cast(%756, dtype="float32") /* ty=Tensor[(3, 1, 8), float32] */;
    %764 = log2(%763) /* ty=Tensor[(3, 1, 8), float32] */;
    %765 = cast(%764, dtype="uint64") /* ty=Tensor[(3, 1, 8), uint64] */;
    %766 = cast(%759, dtype="uint64") /* ty=Tensor[(3, 9, 8), uint64] */;
    %767 = cast(meta[relay.Constant][53] /* ty=Tensor[(864), float64] */, dtype="float64") /* ty=Tensor[(864), float64] */;
    %768 = reshape(%767, newshape=[9, 12, 8]) /* ty=Tensor[(9, 12, 8), float64] */;
    %769 = @func_6931() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %770 = cast(%var_9191, dtype="float32") /* ty=Tensor[(160), float32] */;
    %771 = cast(%var_9192, dtype="float32") /* ty=Tensor[(1, 560), float32] */;
    %772 = cast(meta[relay.Constant][54] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %773 = cast(%var_9194, dtype="float64") /* ty=Tensor[(420), float64] */;
    %774 = reshape(%770, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), float32] */;
    %775 = reshape(%771, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
    %776 = reshape(%772, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
    %777 = reshape(%773, newshape=[420]) /* ty=Tensor[(420), float64] */;
    %778 = @func_7064(%774, %775, %776, %777) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */;
    %779 = cast(5.87371f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %780 = cast(%var_9200, dtype="float32") /* ty=Tensor[(616), float32] */;
    %781 = cast(%var_9201, dtype="float32") /* ty=Tensor[(25, 6), float32] */;
    %782 = cast(%var_9200, dtype="float32") /* ty=Tensor[(616), float32] */;
    %783 = cast(%var_9202, dtype="float64") /* ty=Tensor[(18, 78), float64] */;
    %784 = cast(meta[relay.Constant][55] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %785 = reshape(%779, newshape=[]) /* ty=float32 */;
    %786 = reshape(%780, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
    %787 = reshape(%781, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %788 = reshape(%782, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
    %789 = reshape(%783, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
    %790 = reshape(%784, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %791 = @func_5128(%785, %786, %787, %788, %789, %790) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */;
    %792 = bitwise_xor(%760, %761) /* ty=Tensor[(3, 9, 8), uint16] */;
    %793 = %762.0;
    %794 = maximum(%765, %766) /* ty=Tensor[(3, 9, 8), uint64] */;
    %795 = @func_8785(%768) /* ty=Tensor[(9, 12, 8), float64] */;
    %796 = %769.0;
    %797 = %778.2;
    %798 = %791.3;
    (%792, %793, %794, %795, meta[relay.Constant][53] /* ty=Tensor[(864), float64] */, %796, %797, %var_9191, %var_9192, meta[relay.Constant][54] /* ty=Tensor[(1408), float32] */, %var_9194, %798, 5.87371f /* ty=float32 */, %var_9200, %var_9201, %var_9202, meta[relay.Constant][55] /* ty=Tensor[(924), float32] */)
  };
  %799(%var_9207, %var_9208, %var_9209, %var_9210, %var_9211, %var_9212, %var_9213) /* ty=(Tensor[(3, 9, 8), uint16], Tensor[(7, ?, 2), float64], Tensor[(3, 9, 8), uint64], Tensor[(9, 12, 8), float64], Tensor[(864), float64], Tensor[(7, ?, 2), bool], Tensor[(4, 10, 4), float64], Tensor[(160), float32], Tensor[(1, 560), float32], Tensor[(1408), float32], Tensor[(420), float64], Tensor[(7, 8, 11), bool], float32, Tensor[(616), float32], Tensor[(25, 6), float32], Tensor[(18, 78), float64], Tensor[(924), float32]) */
}

def @func_2791(%var_2787: Tensor[(6, 5, 11), float64], %var_2788: Tensor[(6, 5, 11), float64], %var_2789: Tensor[(210, 2), float64], %var_2790: Tensor[(392), float32]) -> (Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) {
  %820 = fn (%var_2737: Tensor[(6, 5, 11), float64], %var_2738: Tensor[(6, 5, 11), float64], %var_2746: Tensor[(210, 2), float64], %var_2779: Tensor[(392), float32]) -> (Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) {
    %800 = cast(%var_2738, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
    %801 = shape_of(%var_2737, dtype="int32") /* ty=Tensor[(3), int32] */;
    %802 = cast(%var_2737, dtype="float64") /* ty=Tensor[(6, 5, 11), float64] */;
    %803 = dyn.reshape(%800, %801, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %804 = cast(%var_2746, dtype="float64") /* ty=Tensor[(210, 2), float64] */;
    %805 = reshape(%804, newshape=[4, 15, 7]) /* ty=Tensor[(4, 15, 7), float64] */;
    %806 = @func_1697(%805) /* ty=(Tensor[(4, 15, 7), float64],) */;
    %807 = cast(meta[relay.Constant][56] /* ty=Tensor[(540), int16] */, dtype="int16") /* ty=Tensor[(540), int16] */;
    %808 = reshape(%807, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), int16] */;
    %809 = cast(%var_2779, dtype="float32") /* ty=Tensor[(392), float32] */;
    %810 = cast(meta[relay.Constant][57] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %811 = cast(meta[relay.Constant][58] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
    %812 = reshape(%809, newshape=[7, 8, 7]) /* ty=Tensor[(7, 8, 7), float32] */;
    %813 = reshape(%810, newshape=[]) /* ty=uint64 */;
    %814 = reshape(%811, newshape=[924]) /* ty=Tensor[(924), float32] */;
    %815 = @func_2321(%812, %813, %814) /* ty=(Tensor[(7, 8, 7), float64], Tensor[(7, 8, 7), float64], Tensor[(924), float32], uint64, Tensor[(924), float32], Tensor[(540), int16]) */;
    %816 = floor_divide(%802, %803) /* ty=Tensor[(6, 5, 11), float64] */;
    %817 = %806.0;
    %818 = @func_1855(%808) /* ty=Tensor[(5, 12, 9), bool] */;
    %819 = %815.5;
    (%816, %817, %var_2746, %818, meta[relay.Constant][56] /* ty=Tensor[(540), int16] */, %819, %var_2779, meta[relay.Constant][57] /* ty=uint64 */, meta[relay.Constant][58] /* ty=Tensor[(924), float32] */)
  };
  %820(%var_2787, %var_2788, %var_2789, %var_2790) /* ty=(Tensor[(6, 5, 11), float64], Tensor[(4, 15, 7), float64], Tensor[(210, 2), float64], Tensor[(5, 12, 9), bool], Tensor[(540), int16], Tensor[(540), int16], Tensor[(392), float32], uint64, Tensor[(924), float32]) */
}

def @func_6931() -> (Tensor[(7, ?, 2), bool],) {
  %821 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %822 = %821.0;
  (%822,)
}

def @func_4981(%var_4921: Tensor[(4, 10, 3), int16], %var_4943: Tensor[(4, 10, 3), int16], %var_4951: Tensor[(1404), float64], %var_4952: Tensor[(770), float64], %var_4953: Tensor[(924), float32], %var_4954: Tensor[(2, 1248), float32]) -> (Tensor[(1408), float32], Tensor[(8, 11, 16), float64], Tensor[(11, 5, 14), float64], Tensor[(1404), float64], Tensor[(770), float64], Tensor[(924), float32], Tensor[(2, 1248), float32], Tensor[(4, 10, 3), int8], Tensor[(22, 64), float32], Tensor[(4, 448), float32]) {
  %823 = cast(meta[relay.Constant][59] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %824 = cast(meta[relay.Constant][59] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %825 = reshape(%823, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %826 = reshape(%824, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
  %827 = @func_1168(%825, %826) /* ty=(Tensor[(8, 11, 16), bool],) */;
  %828 = %827.0;
  %829 = cast(%828, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %830 = cast(%var_4951, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %831 = cast(%var_4952, dtype="float64") /* ty=Tensor[(770), float64] */;
  %832 = cast(%var_4953, dtype="float32") /* ty=Tensor[(924), float32] */;
  %833 = cast(%var_4954, dtype="float32") /* ty=Tensor[(2, 1248), float32] */;
  %834 = reshape(%830, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %835 = reshape(%831, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %836 = reshape(%832, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %837 = reshape(%833, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %838 = @func_2073(%834, %835, %836, %837) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %839 = cast(meta[relay.Constant][60] /* ty=Tensor[(4, 10, 3), int16] */, dtype="int16") /* ty=Tensor[(4, 10, 3), int16] */;
  %840 = shape_of(%var_4921, dtype="int32") /* ty=Tensor[(3), int32] */;
  %841 = cast(%var_4921, dtype="int16") /* ty=Tensor[(4, 10, 3), int16] */;
  %842 = dyn.reshape(%839, %840, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %843 = minimum(%841, %842) /* ty=Tensor[(4, 10, 3), int16] */;
  %844 = cast(%var_4943, dtype="uint16") /* ty=Tensor[(4, 10, 3), uint16] */;
  %845 = shape_of(%843, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%843, dtype="uint16") /* ty=Tensor[(4, 10, 3), uint16] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %848 = bitwise_or(%846, %847) /* ty=Tensor[(4, 10, 3), uint16] */;
  %849 = cast(%848, dtype="int8") /* ty=Tensor[(4, 10, 3), int8] */;
  %850 = shape_of(%var_4943, dtype="int32") /* ty=Tensor[(3), int32] */;
  %851 = cast(%var_4943, dtype="int8") /* ty=Tensor[(4, 10, 3), int8] */;
  %852 = dyn.reshape(%849, %850, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %853 = cast(meta[relay.Constant][61] /* ty=Tensor[(4, 448), float32] */, dtype="float32") /* ty=Tensor[(4, 448), float32] */;
  %854 = cast(meta[relay.Constant][59] /* ty=Tensor[(1408), float32] */, dtype="float32") /* ty=Tensor[(1408), float32] */;
  %855 = reshape(%853, newshape=[8, 14, 16]) /* ty=Tensor[(8, 14, 16), float32] */;
  %856 = reshape(%854, newshape=[22, 64]) /* ty=Tensor[(22, 64), float32] */;
  %857 = @func_1418(%855, %856) /* ty=(Tensor[(8, 14, 16), float32], Tensor[(8, 11, 16), bool], Tensor[(22, 64), float32]) */;
  %858 = erf(%829) /* ty=Tensor[(8, 11, 16), float64] */;
  %859 = %838.1;
  %860 = multiply(%851, %852) /* ty=Tensor[(4, 10, 3), int8] */;
  %861 = %857.2;
  (meta[relay.Constant][59] /* ty=Tensor[(1408), float32] */, %858, %859, %var_4951, %var_4952, %var_4953, %var_4954, %860, %861, meta[relay.Constant][61] /* ty=Tensor[(4, 448), float32] */)
}

def @func_9693(%var_9691: Tensor[(14, 12, 5), float64], %var_9692: Tensor[(768), float32]) -> (Tensor[(14, 12, 5), float64], Tensor[(16, 16, 3), float32], Tensor[(768), float32]) {
  @func_9689(%var_9691, %var_9692) /* ty=(Tensor[(14, 12, 5), float64], Tensor[(16, 16, 3), float32], Tensor[(768), float32]) */
}

def @func_2321(%var_2306: Tensor[(7, 8, 7), float32], %var_2315: uint64, %var_2316: Tensor[(924), float32]) -> (Tensor[(7, 8, 7), float64], Tensor[(7, 8, 7), float64], Tensor[(924), float32], uint64, Tensor[(924), float32], Tensor[(540), int16]) {
  %862 = cast(%var_2306, dtype="float32") /* ty=Tensor[(7, 8, 7), float32] */;
  %863 = sinh(%862) /* ty=Tensor[(7, 8, 7), float32] */;
  %864 = cast(%863, dtype="float64") /* ty=Tensor[(7, 8, 7), float64] */;
  %865 = cast(%863, dtype="float64") /* ty=Tensor[(7, 8, 7), float64] */;
  %866 = cast(%var_2315, dtype="uint64") /* ty=uint64 */;
  %867 = cast(%var_2316, dtype="float32") /* ty=Tensor[(924), float32] */;
  %868 = cast(meta[relay.Constant][62] /* ty=Tensor[(540), int16] */, dtype="int16") /* ty=Tensor[(540), int16] */;
  %869 = reshape(%866, newshape=[]) /* ty=uint64 */;
  %870 = reshape(%867, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %871 = reshape(%868, newshape=[1, 540]) /* ty=Tensor[(1, 540), int16] */;
  %872 = @func_2231(%869, %870, %871) /* ty=(Tensor[(15, 8, 1), uint64], Tensor[(6, 14, 11), float32], Tensor[(1404), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(5, 12, 9), bool], Tensor[(1, 540), int16], Tensor[(6, 14, 11), float32], Tensor[(770), float64]) */;
  %873 = sigmoid(%864) /* ty=Tensor[(7, 8, 7), float64] */;
  %874 = acos(%865) /* ty=Tensor[(7, 8, 7), float64] */;
  %875 = %872.3;
  (%873, %874, %875, %var_2315, %var_2316, meta[relay.Constant][62] /* ty=Tensor[(540), int16] */)
}

def @func_5888(%var_5882: Tensor[(1, 1, 3), int8], %var_5883: Tensor[(14, 3, 3), int8], %var_5884: Tensor[(8), float64], %var_5885: Tensor[(2, 896), float32], %var_5886: Tensor[(2, 896), float32], %var_5887: Tensor[(2, 896), float32]) -> (Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) {
  %897 = fn (%var_5846: Tensor[(1, 1, 3), int8], %var_5847: Tensor[(14, 3, 3), int8], %var_5852: Tensor[(8), float64], %var_5853: Tensor[(2, 896), float32], %var_5859: Tensor[(2, 896), float32], %var_5877: Tensor[(2, 896), float32]) -> (Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) {
    %876 = cast(%var_5846, dtype="bool") /* ty=Tensor[(1, 1, 3), bool] */;
    %877 = cast(%var_5847, dtype="bool") /* ty=Tensor[(14, 3, 3), bool] */;
    %878 = cast(%var_5852, dtype="float64") /* ty=Tensor[(8), float64] */;
    %879 = cast(%var_5853, dtype="float32") /* ty=Tensor[(2, 896), float32] */;
    %880 = reshape(%878, newshape=[1, 4, 2]) /* ty=Tensor[(1, 4, 2), float64] */;
    %881 = reshape(%879, newshape=[1792]) /* ty=Tensor[(1792), float32] */;
    %882 = @func_3452(%880, %881) /* ty=(Tensor[(?, 4, 2), int16], Tensor[(22, 64), float32], Tensor[(1792), float32], Tensor[(1408), float32]) */;
    %883 = cast(%var_5859, dtype="bool") /* ty=Tensor[(2, 896), bool] */;
    %884 = shape_of(%var_5853, dtype="int32") /* ty=Tensor[(2), int32] */;
    %885 = cast(%var_5853, dtype="bool") /* ty=Tensor[(2, 896), bool] */;
    %886 = dyn.reshape(%883, %884, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %887 = cast(%var_5859, dtype="float32") /* ty=Tensor[(2, 896), float32] */;
    %888 = sqrt(%887) /* ty=Tensor[(2, 896), float32] */;
    %889 = cast(%var_5877, dtype="int16") /* ty=Tensor[(2, 896), int16] */;
    %890 = shape_of(%888, dtype="int32") /* ty=Tensor[(2), int32] */;
    %891 = cast(%888, dtype="int16") /* ty=Tensor[(2, 896), int16] */;
    %892 = dyn.reshape(%889, %890, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
    %893 = not_equal(%876, %877) /* ty=Tensor[(14, 3, 3), bool] */;
    %894 = %882.3;
    %895 = greater(%885, %886) /* ty=Tensor[(2, 896), bool] */;
    %896 = bitwise_or(%891, %892) /* ty=Tensor[(2, 896), int16] */;
    (%893, %894, %var_5852, %895, %896)
  };
  %897(%var_5882, %var_5883, %var_5884, %var_5885, %var_5886, %var_5887) /* ty=(Tensor[(14, 3, 3), bool], Tensor[(1408), float32], Tensor[(8), float64], Tensor[(2, 896), bool], Tensor[(2, 896), int16]) */
}

def @func_8788(%var_8786: Tensor[(9, 12, 8), float64]) -> Tensor[(9, 12, 8), float64] {
  @func_8785(%var_8786) /* ty=Tensor[(9, 12, 8), float64] */
}

def @func_1699(%var_1698: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64],) {
  %900 = fn (%var_1683: Tensor[(4, 15, 7), float64]) -> (Tensor[(4, 15, 7), float64],) {
    %898 = cast(%var_1683, dtype="float64") /* ty=Tensor[(4, 15, 7), float64] */;
    %899 = log2(%898) /* ty=Tensor[(4, 15, 7), float64] */;
    (%899,)
  };
  %900(%var_1698) /* ty=(Tensor[(4, 15, 7), float64],) */
}

def @func_8068() -> Tensor[(7, ?, 2), float64] {
  %901 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %901.0
}

def @func_10294() -> Tensor[(7, ?, 2), float64] {
  %902 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
  %902.0
}

def @func_1127(%var_1125: Tensor[(11, 5, 14), float64], %var_1126: Tensor[(154, 6), float32]) -> (Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) {
  @func_1123(%var_1125, %var_1126) /* ty=(Tensor[(11, 5, 14), float64], Tensor[(6, 14, 11), float32], Tensor[(154, 6), float32]) */
}

def @func_5324(%var_5322: Tensor[(11, 6, 7), int8], %var_5323: Tensor[(3, 468), float64]) -> (Tensor[(11, 6, 7), int8], Tensor[(924, 1), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(156, 16), float32], Tensor[(3, 468), uint8], Tensor[(16, 12, 13), float64]) {
  @func_5320(%var_5322, %var_5323) /* ty=(Tensor[(11, 6, 7), int8], Tensor[(924, 1), float32], Tensor[(1, 770), float64], Tensor[(924), float32], Tensor[(156, 16), float32], Tensor[(3, 468), uint8], Tensor[(16, 12, 13), float64]) */
}

def @func_7161() -> (Tensor[(7, ?, 2), bool],) {
  @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_8055(%var_8011: Tensor[(252), int64], %var_8024: Tensor[(616), float32], %var_8025: Tensor[(150), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(192), float32], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(150), float32], float32, Tensor[(616), float32], Tensor[(150), float32], Tensor[(3, 468), float64], Tensor[(924), float32], Tensor[(7, ?, 2), bool]) {
  %903 = cast(meta[relay.Constant][63] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %904 = cast(%var_8011, dtype="int64") /* ty=Tensor[(252), int64] */;
  %905 = cast(meta[relay.Constant][64] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %906 = reshape(%903, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %907 = reshape(%904, newshape=[252]) /* ty=Tensor[(252), int64] */;
  %908 = reshape(%905, newshape=[192]) /* ty=Tensor[(192), float32] */;
  %909 = @func_7005(%906, %907, %908) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
  %910 = cast(4.23909f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %911 = cast(%var_8024, dtype="float32") /* ty=Tensor[(616), float32] */;
  %912 = cast(%var_8025, dtype="float32") /* ty=Tensor[(150), float32] */;
  %913 = cast(%var_8024, dtype="float32") /* ty=Tensor[(616), float32] */;
  %914 = cast(meta[relay.Constant][65] /* ty=Tensor[(3, 468), float64] */, dtype="float64") /* ty=Tensor[(3, 468), float64] */;
  %915 = cast(meta[relay.Constant][66] /* ty=Tensor[(924), float32] */, dtype="float32") /* ty=Tensor[(924), float32] */;
  %916 = reshape(%910, newshape=[]) /* ty=float32 */;
  %917 = reshape(%911, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %918 = reshape(%912, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %919 = reshape(%913, newshape=[7, 8, 11]) /* ty=Tensor[(7, 8, 11), float32] */;
  %920 = reshape(%914, newshape=[1404]) /* ty=Tensor[(1404), float64] */;
  %921 = reshape(%915, newshape=[924]) /* ty=Tensor[(924), float32] */;
  %922 = @func_5128(%916, %917, %918, %919, %920, %921) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */;
  %923 = @func_7159() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %924 = @func_7333() /* ty=Tensor[(7, ?, 2), bool] */;
  %925 = %909.5;
  %926 = %922.2;
  %927 = %923.0;
  (%924, %925, meta[relay.Constant][63] /* ty=Tensor[(770), float64] */, %var_8011, meta[relay.Constant][64] /* ty=Tensor[(192), float32] */, %926, 4.23909f /* ty=float32 */, %var_8024, %var_8025, meta[relay.Constant][65] /* ty=Tensor[(3, 468), float64] */, meta[relay.Constant][66] /* ty=Tensor[(924), float32] */, %927)
}

def @func_9635() -> (Tensor[(7, ?, 2), bool],) {
  %928 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %929 = %928.0;
  (%929,)
}

def @func_8060(%var_8057: Tensor[(252), int64], %var_8058: Tensor[(616), float32], %var_8059: Tensor[(150), float32]) -> (Tensor[(7, ?, 2), bool], Tensor[(192), float32], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(150), float32], float32, Tensor[(616), float32], Tensor[(150), float32], Tensor[(3, 468), float64], Tensor[(924), float32], Tensor[(7, ?, 2), bool]) {
  @func_8055(%var_8057, %var_8058, %var_8059) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(192), float32], Tensor[(770), float64], Tensor[(252), int64], Tensor[(192), float32], Tensor[(150), float32], float32, Tensor[(616), float32], Tensor[(150), float32], Tensor[(3, 468), float64], Tensor[(924), float32], Tensor[(7, ?, 2), bool]) */
}

def @func_10882() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) {
  %934 = fn () -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) {
    %930 = @func_8401() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %931 = @func_9402() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %932 = %930.0;
    %933 = %931.0;
    (%932, %933)
  };
  %934() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), float64]) */
}

def @func_1985(%var_1983: Tensor[(16, 12, 13), float32]) -> (Tensor[(16, 12, 13), float32],) {
  @func_1982(%var_1983) /* ty=(Tensor[(16, 12, 13), float32],) */
}

def @func_7271() -> (Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) {
  @func_7269() /* ty=(Tensor[(7, ?, 2), float64], Tensor[(7, ?, 2), bool]) */
}

def @func_9637() -> (Tensor[(7, ?, 2), bool],) {
  @func_9635() /* ty=(Tensor[(7, ?, 2), bool],) */
}

def @func_9726(%var_9708: Tensor[(420), float64]) -> (Tensor[(7, ?, 2), bool], Tensor[(4, 15, 7), float64], Tensor[(160), float32], Tensor[(560), float32], Tensor[(1408, 1), float32], Tensor[(420), float64]) {
  %935 = @func_8999() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %936 = cast(meta[relay.Constant][67] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %937 = cast(meta[relay.Constant][68] /* ty=Tensor[(560), float32] */, dtype="float32") /* ty=Tensor[(560), float32] */;
  %938 = cast(meta[relay.Constant][69] /* ty=Tensor[(1408, 1), float32] */, dtype="float32") /* ty=Tensor[(1408, 1), float32] */;
  %939 = cast(%var_9708, dtype="float64") /* ty=Tensor[(420), float64] */;
  %940 = reshape(%936, newshape=[4, 10, 4]) /* ty=Tensor[(4, 10, 4), float32] */;
  %941 = reshape(%937, newshape=[560, 1]) /* ty=Tensor[(560, 1), float32] */;
  %942 = reshape(%938, newshape=[1408]) /* ty=Tensor[(1408), float32] */;
  %943 = reshape(%939, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %944 = @func_7064(%940, %941, %942, %943) /* ty=(Tensor[(5, 14, 8), uint16], Tensor[(560, 1), float32], Tensor[(4, 10, 4), float64], Tensor[(22, 64), float32], Tensor[(448, 4), float32], Tensor[(1408), float32], Tensor[(4, 15, 7), float64], Tensor[(420), float64]) */;
  %945 = %935.0;
  %946 = %944.6;
  (%945, %946, meta[relay.Constant][67] /* ty=Tensor[(160), float32] */, meta[relay.Constant][68] /* ty=Tensor[(560), float32] */, meta[relay.Constant][69] /* ty=Tensor[(1408, 1), float32] */, %var_9708)
}

def @func_5136(%var_5130: float32, %var_5131: Tensor[(7, 8, 11), float32], %var_5132: Tensor[(150), float32], %var_5133: Tensor[(7, 8, 11), float32], %var_5134: Tensor[(1404), float64], %var_5135: Tensor[(924), float32]) -> (Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) {
  @func_5128(%var_5130, %var_5131, %var_5132, %var_5133, %var_5134, %var_5135) /* ty=(Tensor[(7, 8, 11), float32], Tensor[(10, 1, 15), float32], Tensor[(150), float32], Tensor[(7, 8, 11), bool], Tensor[(924, 1), float32], Tensor[(1404), float64], Tensor[(7, 110), float64], Tensor[(924), float32], Tensor[(2496), float32]) */
}

def @func_7967(%var_7964: Tensor[(10, 1, 12), int8], %var_7965: Tensor[(10, 2, 12), int8], %var_7966: Tensor[(1408), float32]) -> (Tensor[(10, 2, 12), bool], Tensor[(8, 11, 16), bool], Tensor[(1408), float32], Tensor[(10, 2, 12), float32]) {
  %958 = fn (%var_7935: Tensor[(10, 1, 12), int8], %var_7936: Tensor[(10, 2, 12), int8], %var_7949: Tensor[(1408), float32]) -> (Tensor[(10, 2, 12), bool], Tensor[(8, 11, 16), bool], Tensor[(1408), float32], Tensor[(10, 2, 12), float32]) {
    %947 = cast(%var_7935, dtype="bool") /* ty=Tensor[(10, 1, 12), bool] */;
    %948 = cast(%var_7936, dtype="bool") /* ty=Tensor[(10, 2, 12), bool] */;
    %949 = cast(%var_7949, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %950 = cast(%var_7949, dtype="float32") /* ty=Tensor[(1408), float32] */;
    %951 = reshape(%949, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
    %952 = reshape(%950, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), float32] */;
    %953 = @func_1168(%951, %952) /* ty=(Tensor[(8, 11, 16), bool],) */;
    %954 = cast(%var_7936, dtype="float32") /* ty=Tensor[(10, 2, 12), float32] */;
    %955 = less_equal(%947, %948) /* ty=Tensor[(10, 2, 12), bool] */;
    %956 = %953.0;
    %957 = atan(%954) /* ty=Tensor[(10, 2, 12), float32] */;
    (%955, %956, %var_7949, %957)
  };
  %958(%var_7964, %var_7965, %var_7966) /* ty=(Tensor[(10, 2, 12), bool], Tensor[(8, 11, 16), bool], Tensor[(1408), float32], Tensor[(10, 2, 12), float32]) */
}

def @func_7159() -> (Tensor[(7, ?, 2), bool],) {
  %959 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
  %960 = %959.0;
  (%960,)
}

def @func_10163(%var_10161: Tensor[(770), float64], %var_10162: Tensor[(252, 1), int64]) -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(770), float64], Tensor[(252, 1), int64], Tensor[(192), float32], Tensor[(7, ?, 2), float64]) {
  %973 = fn (%var_10125: Tensor[(770), float64], %var_10126: Tensor[(252, 1), int64]) -> (Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(770), float64], Tensor[(252, 1), int64], Tensor[(192), float32], Tensor[(7, ?, 2), float64]) {
    %961 = @func_6902() /* ty=(Tensor[(7, ?, 2), bool],) */;
    %962 = cast(%var_10125, dtype="float64") /* ty=Tensor[(770), float64] */;
    %963 = cast(%var_10126, dtype="int64") /* ty=Tensor[(252, 1), int64] */;
    %964 = cast(meta[relay.Constant][70] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
    %965 = reshape(%962, newshape=[770]) /* ty=Tensor[(770), float64] */;
    %966 = reshape(%963, newshape=[252]) /* ty=Tensor[(252), int64] */;
    %967 = reshape(%964, newshape=[192]) /* ty=Tensor[(192), float32] */;
    %968 = @func_7005(%965, %966, %967) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(252), int64], Tensor[(770), float64], Tensor[(252), int64], Tensor[(6, 16, 2), bool], Tensor[(192), float32]) */;
    %969 = @func_7788() /* ty=(Tensor[(7, ?, 2), float64],) */;
    %970 = %961.0;
    %971 = %968.0;
    %972 = %969.0;
    (%970, %971, %var_10125, %var_10126, meta[relay.Constant][70] /* ty=Tensor[(192), float32] */, %972)
  };
  %973(%var_10161, %var_10162) /* ty=(Tensor[(7, ?, 2), bool], Tensor[(7, ?, 2), bool], Tensor[(770), float64], Tensor[(252, 1), int64], Tensor[(192), float32], Tensor[(7, ?, 2), float64]) */
}

def @func_9689(%var_9672: Tensor[(14, 12, 5), float64], %var_9687: Tensor[(768), float32]) -> (Tensor[(14, 12, 5), float64], Tensor[(16, 16, 3), float32], Tensor[(768), float32]) {
  %974 = cast(%var_9672, dtype="float64") /* ty=Tensor[(14, 12, 5), float64] */;
  %975 = cast(%var_9687, dtype="float32") /* ty=Tensor[(768), float32] */;
  %976 = cast(%var_9687, dtype="float32") /* ty=Tensor[(768), float32] */;
  %977 = reshape(%975, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %978 = reshape(%976, newshape=[16, 16, 3]) /* ty=Tensor[(16, 16, 3), float32] */;
  %979 = log(%974) /* ty=Tensor[(14, 12, 5), float64] */;
  %980 = @func_5268(%977, %978) /* ty=Tensor[(16, 16, 3), float32] */;
  (%979, %980, %var_9687)
}

def @func_8155(%var_8153: bool, %var_8154: Tensor[(6, 15, 9), bool]) -> Tensor[(6, 15, 9), bool] {
  @func_8151(%var_8153, %var_8154) /* ty=Tensor[(6, 15, 9), bool] */
}

def @func_760(%var_757: Tensor[(6, 14, 11), float32]) -> (Tensor[(6, 14, 11), float32],) {
  %981 = cast(%var_757, dtype="float32") /* ty=Tensor[(6, 14, 11), float32] */;
  %982 = sin(%981) /* ty=Tensor[(6, 14, 11), float32] */;
  (%982,)
}

def @func_2231(%var_2183: uint64, %var_2192: Tensor[(924), float32], %var_2210: Tensor[(1, 540), int16]) -> (Tensor[(15, 8, 1), uint64], Tensor[(6, 14, 11), float32], Tensor[(1404), float64], Tensor[(924), float32], Tensor[(2496), float32], Tensor[(5, 12, 9), bool], Tensor[(1, 540), int16], Tensor[(6, 14, 11), float32], Tensor[(770), float64]) {
  %983 = cast(%var_2183, dtype="uint64") /* ty=uint64 */;
  %984 = cast(meta[relay.Constant][71] /* ty=Tensor[(15, 8, 1), uint64] */, dtype="uint64") /* ty=Tensor[(15, 8, 1), uint64] */;
  %985 = cast(meta[relay.Constant][72] /* ty=Tensor[(1404), float64] */, dtype="float64") /* ty=Tensor[(1404), float64] */;
  %986 = cast(meta[relay.Constant][73] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %987 = cast(%var_2192, dtype="float32") /* ty=Tensor[(924), float32] */;
  %988 = cast(meta[relay.Constant][74] /* ty=Tensor[(2496), float32] */, dtype="float32") /* ty=Tensor[(2496), float32] */;
  %989 = reshape(%985, newshape=[13, 12, 9]) /* ty=Tensor[(13, 12, 9), float64] */;
  %990 = reshape(%986, newshape=[770]) /* ty=Tensor[(770), float64] */;
  %991 = reshape(%987, newshape=[924, 1]) /* ty=Tensor[(924, 1), float32] */;
  %992 = reshape(%988, newshape=[2496]) /* ty=Tensor[(2496), float32] */;
  %993 = @func_2073(%989, %990, %991, %992) /* ty=(Tensor[(13, 12, 9), float32], Tensor[(11, 5, 14), float64], Tensor[(770), float64], Tensor[(924, 1), float32], Tensor[(16, 12, 13), float32], Tensor[(2496), float32], Tensor[(6, 14, 11), float32]) */;
  %994 = cast(%var_2210, dtype="int16") /* ty=Tensor[(1, 540), int16] */;
  %995 = reshape(%994, newshape=[5, 12, 9]) /* ty=Tensor[(5, 12, 9), int16] */;
  %996 = cast(%var_2192, dtype="float32") /* ty=Tensor[(924), float32] */;
  %997 = reshape(%996, newshape=[6, 14, 11]) /* ty=Tensor[(6, 14, 11), float32] */;
  %998 = @func_760(%997) /* ty=(Tensor[(6, 14, 11), float32],) */;
  %999 = cast(meta[relay.Constant][73] /* ty=Tensor[(770), float64] */, dtype="float64") /* ty=Tensor[(770), float64] */;
  %1000 = log2(%999) /* ty=Tensor[(770), float64] */;
  %1001 = cast(%1000, dtype="float64") /* ty=Tensor[(770), float64] */;
  %1002 = add(%983, %984) /* ty=Tensor[(15, 8, 1), uint64] */;
  %1003 = %993.6;
  %1004 = @func_1855(%995) /* ty=Tensor[(5, 12, 9), bool] */;
  %1005 = %998.0;
  %1006 = asin(%1001) /* ty=Tensor[(770), float64] */;
  (%1002, %1003, meta[relay.Constant][72] /* ty=Tensor[(1404), float64] */, %var_2192, meta[relay.Constant][74] /* ty=Tensor[(2496), float32] */, %1004, %var_2210, %1005, %1006)
}

def @func_3195(%var_3181: Tensor[(10, 1, 15), float32]) -> (Tensor[(10, 1, 15), float32],) {
  %1007 = cast(%var_3181, dtype="float32") /* ty=Tensor[(10, 1, 15), float32] */;
  %1008 = log(%1007) /* ty=Tensor[(10, 1, 15), float32] */;
  (%1008,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen405/build/output.py", line 2213, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:14:36] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

