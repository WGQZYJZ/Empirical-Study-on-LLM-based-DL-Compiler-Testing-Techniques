==========mod==========
#[version = "0.0.5"]
def @func_1980(%var_1977: Tensor[(1, 4, 13), float64]) -> Tensor[(1, 4, 13), float64] {
  %0 = cast(%var_1977, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
  erf(%0) /* ty=Tensor[(1, 4, 13), float64] */
}

def @func_2477(%var_2474: Tensor[(14, 14, 16), float64]) -> Tensor[(14, 14, 16), float64] {
  %1 = cast(%var_2474, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  sqrt(%1) /* ty=Tensor[(14, 14, 16), float64] */
}

def @func_5010() -> (Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) {
  %2 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %4 = reshape(%3, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %5 = cast(meta[relay.Constant][1] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %6 = reshape(%5, newshape=[]) /* ty=uint64 */;
  %7 = %2.0;
  %8 = @func_2690(%4) /* ty=Tensor[(13, 8, 14), float64] */;
  %9 = @func_1586(%6) /* ty=Tensor[(13, 11, 13), uint64] */;
  (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(1456), float64] */, %9, meta[relay.Constant][1] /* ty=uint64 */)
}

def @func_6387(%var_6373: Tensor[(6, 1, 6), uint8], %var_6374: Tensor[(6, 3, 6), uint8]) -> Tensor[(6, 3, 6), float64] {
  %10 = cast(%var_6373, dtype="uint8") /* ty=Tensor[(6, 1, 6), uint8] */;
  %11 = cast(%var_6374, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
  %12 = minimum(%10, %11) /* ty=Tensor[(6, 3, 6), uint8] */;
  %13 = cast(%12, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
  log2(%13) /* ty=Tensor[(6, 3, 6), float64] */
}

def @func_5217(%var_5180: Tensor[(196), uint64], %var_5187: Tensor[(196), int64], %var_5210: Tensor[(196), uint32]) -> Tensor[(196), float32] {
  %14 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %15 = %14.1;
  %16 = cast(%var_5180, dtype="int64") /* ty=Tensor[(196), int64] */;
  %17 = shape_of(%15, dtype="int32") /* ty=Tensor[(1), int32] */;
  %18 = cast(%15, dtype="int64") /* ty=Tensor[(196), int64] */;
  %19 = dyn.reshape(%16, %17, newshape=[]) /* ty=Tensor[(?), int64] */;
  %20 = bitwise_and(%18, %19) /* ty=Tensor[(196), int64] */;
  %21 = cast(%var_5187, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %22 = shape_of(%20, dtype="int32") /* ty=Tensor[(1), int32] */;
  %23 = cast(%20, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %25 = minimum(%23, %24) /* ty=Tensor[(196), uint32] */;
  %26 = cast(%var_5210, dtype="float32") /* ty=Tensor[(196), float32] */;
  %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(1), int32] */;
  %28 = cast(%25, dtype="float32") /* ty=Tensor[(196), float32] */;
  %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?), float32] */;
  divide(%28, %29) /* ty=Tensor[(196), float32] */
}

def @func_4407(%var_4402: Tensor[(5, 13, 7), int16]) -> Tensor[(5, 13, 7), float32] {
  %30 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %31 = %30.2;
  %32 = cast(%var_4402, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(3), int32] */;
  %34 = cast(%31, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%34, %35) /* ty=Tensor[(5, 13, 7), float32] */
}

def @func_5798() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  %36 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %37 = @func_5302() /* ty=Tensor[(196), float64] */;
  %38 = %36.0;
  (%37, %38)
}

def @func_7113() -> (uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) {
  %39 = @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */;
  %40 = cast(meta[relay.Constant][2] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
  %41 = reshape(%40, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %42 = %39.3;
  %43 = @func_2690(%41) /* ty=Tensor[(13, 8, 14), float64] */;
  (%42, %43, meta[relay.Constant][2] /* ty=Tensor[(1456), float64] */)
}

def @func_971(%var_946: Tensor[(2, 1, 14), float32]) -> (Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) {
  %44 = cast(%var_946, dtype="float32") /* ty=Tensor[(2, 1, 14), float32] */;
  %45 = log(%44) /* ty=Tensor[(2, 1, 14), float32] */;
  %46 = cast(%45, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
  %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %48 = cast(meta[relay.Constant][3] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
  %49 = reshape(%47, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
  %50 = reshape(%48, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
  %51 = rsqrt(%46) /* ty=Tensor[(2, 1, 14), float64] */;
  %52 = @func_519(%49, %50) /* ty=Tensor[(8, 9, 4), int32] */;
  (%51, %52, meta[relay.Constant][3] /* ty=Tensor[(288), int32] */)
}

def @func_5642(%var_5605: Tensor[(1100), float32], %var_5619: Tensor[(8, 2, 5), float64]) -> (uint64, Tensor[(196), uint64], Tensor[(64), float64], Tensor[(1100), float32], Tensor[(240), uint64], Tensor[(1100), float32], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool]) {
  %53 = cast(meta[relay.Constant][4] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %54 = reshape(%53, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %55 = @func_3966(%54) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) */;
  %56 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), uint64] */, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %57 = @func_5418() /* ty=uint64 */;
  %58 = cast(%57, dtype="uint64") /* ty=uint64 */;
  %59 = cast(%var_5605, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %60 = reshape(%56, newshape=[1, 240]) /* ty=Tensor[(1, 240), uint64] */;
  %61 = reshape(%58, newshape=[]) /* ty=uint64 */;
  %62 = reshape(%59, newshape=[1100]) /* ty=Tensor[(1100), float32] */;
  %63 = @func_4135(%60, %61, %62) /* ty=(Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) */;
  %64 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %65 = %64.0;
  %66 = cast(%65, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
  %67 = tan(%66) /* ty=Tensor[(8, 2, 5), float64] */;
  %68 = cast(%var_5619, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %70 = cast(%67, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %72 = cast(%65, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
  %73 = shape_of(%67, dtype="int32") /* ty=Tensor[(3), int32] */;
  %74 = cast(%67, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
  %75 = dyn.reshape(%72, %73, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %76 = right_shift(%74, %75) /* ty=Tensor[(8, 2, 5), uint8] */;
  %77 = cast(%var_5619, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %78 = shape_of(%76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %79 = cast(%76, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %80 = dyn.reshape(%77, %78, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %81 = cast(%67, dtype="float32") /* ty=Tensor[(8, 2, 5), float32] */;
  %82 = log(%81) /* ty=Tensor[(8, 2, 5), float32] */;
  %83 = cast(%76, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %87 = %55.1;
  %88 = %63.6;
  %89 = logical_and(%70, %71) /* ty=Tensor[(8, 2, 5), bool] */;
  %90 = less_equal(%79, %80) /* ty=Tensor[(8, 2, 5), bool] */;
  %91 = not_equal(%85, %86) /* ty=Tensor[(8, 2, 5), bool] */;
  (%57, %87, meta[relay.Constant][4] /* ty=Tensor[(64), float64] */, %88, meta[relay.Constant][5] /* ty=Tensor[(240), uint64] */, %var_5605, %89, %90, %91)
}

def @func_3966(%var_3951: Tensor[(4, 4, 4), float64]) -> (Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) {
  %92 = cast(%var_3951, dtype="float64") /* ty=Tensor[(4, 4, 4), float64] */;
  %93 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %94 = sin(%92) /* ty=Tensor[(4, 4, 4), float64] */;
  %95 = %93.1;
  (%94, %95)
}

def @func_7683() -> Tensor[(196), uint64] {
  %96 = @func_7039() /* ty=(Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) */;
  %96.1
}

def @func_6799() -> (Tensor[(196), float64],) {
  %97 = @func_6596() /* ty=(Tensor[(196), float64],) */;
  %98 = %97.0;
  (%98,)
}

def @func_6730(%var_6706: Tensor[(7, 2, 16), float32], %var_6720: Tensor[(455), int16]) -> (Tensor[(7, 2, 16), float32], Tensor[(455), float32]) {
  %99 = cast(%var_6706, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %100 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(7, 2, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(meta[relay.Constant][6] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %103 = cast(%var_6720, dtype="int16") /* ty=Tensor[(455), int16] */;
  %104 = reshape(%103, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), int16] */;
  %105 = @func_4407(%104) /* ty=Tensor[(5, 13, 7), float32] */;
  %106 = cast(%105, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %107 = shape_of(%var_6720, dtype="int32") /* ty=Tensor[(1), int32] */;
  %108 = cast(%var_6720, dtype="float32") /* ty=Tensor[(455), float32] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?), float32] */;
  %110 = mod(%101, %102) /* ty=Tensor[(7, 2, 16), float32] */;
  %111 = floor_divide(%108, %109) /* ty=Tensor[(455), float32] */;
  (%110, %111)
}

def @func_3864() -> (Tensor[(196), float64],) {
  %112 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %113 = %112.1;
  %114 = cast(%113, dtype="float64") /* ty=Tensor[(196), float64] */;
  %115 = log10(%114) /* ty=Tensor[(196), float64] */;
  (%115,)
}

def @func_6357() -> (Tensor[(196), float64], Tensor[(196), float64], Tensor[(1, 4, 8), float64], Tensor[(32), float64]) {
  %116 = @func_5136() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */;
  %117 = @func_6016() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */;
  %118 = cast(meta[relay.Constant][7] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %119 = reshape(%118, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), float64] */;
  %120 = @func_5286(%119) /* ty=(Tensor[(1, 4, 8), float64],) */;
  %121 = %116.0;
  %122 = %117.0;
  %123 = %120.0;
  (%121, %122, %123, meta[relay.Constant][7] /* ty=Tensor[(32), float64] */)
}

def @func_4841() -> (Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) {
  %124 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %125 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %126 = %124.1;
  (%125, %126)
}

def @func_6972() -> (Tensor[(196), float64], Tensor[(196), float64], uint64, Tensor[(14, 2, 7), bool], Tensor[(14, 2, 7), float32]) {
  %127 = @func_4446() /* ty=(Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) */;
  %128 = cast(meta[relay.Constant][8] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %129 = reshape(%128, newshape=[]) /* ty=uint64 */;
  %130 = @func_4197(%129) /* ty=(Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) */;
  %131 = cast(meta[relay.Constant][8] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %132 = reshape(%131, newshape=[]) /* ty=uint64 */;
  %133 = @func_4197(%132) /* ty=(Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) */;
  %134 = %127.0;
  %135 = %130.0;
  %136 = %133.1;
  %137 = @func_5863() /* ty=Tensor[(14, 2, 7), float32] */;
  (%134, %135, meta[relay.Constant][8] /* ty=uint64 */, %136, %137)
}

def @func_6247() -> (Tensor[(196), float64],) {
  %138 = @func_5136() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */;
  %139 = %138.0;
  (%139,)
}

def @func_6668() -> (Tensor[(14, 2, 7), float32],) {
  %140 = @func_4275() /* ty=(Tensor[(14, 2, 7), bool],) */;
  %141 = %140.0;
  %142 = cast(%141, dtype="float64") /* ty=Tensor[(14, 2, 7), float64] */;
  %143 = atanh(%142) /* ty=Tensor[(14, 2, 7), float64] */;
  %144 = cast(%143, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  %145 = log2(%144) /* ty=Tensor[(14, 2, 7), float32] */;
  (%145,)
}

def @func_7166() -> (Tensor[(9, 2, 14), uint16],) {
  %146 = cast(meta[relay.Constant][10] /* ty=Tensor[(9, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 14), uint16] */;
  %147 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(9, 2, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 14), uint16] */;
  %149 = dyn.reshape(%146, %147, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %150 = bitwise_or(%148, %149) /* ty=Tensor[(9, 2, 14), uint16] */;
  (%150,)
}

def @func_7520(%var_7492: Tensor[(12, 4, 15), float64], %var_7501: Tensor[(336), uint16], %var_7508: Tensor[(36), uint8], %var_7509: Tensor[(1, 108), uint8]) -> (Tensor[(12, 4, 15), float64], Tensor[(8, 2, 5), float64], Tensor[(7, 16, 3), uint16], Tensor[(336), uint16], Tensor[(196), float64], Tensor[(6, 3, 6), float64], Tensor[(36), uint8], Tensor[(1, 108), uint8]) {
  %151 = cast(%var_7492, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
  %152 = @func_6171() /* ty=(Tensor[(8, 2, 5), float64],) */;
  %153 = cast(%var_7501, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %154 = cast(%var_7501, dtype="uint16") /* ty=Tensor[(336), uint16] */;
  %155 = reshape(%153, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
  %156 = reshape(%154, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
  %157 = @func_3710(%155, %156) /* ty=(Tensor[(7, 16, 3), uint16],) */;
  %158 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %159 = cast(%var_7508, dtype="uint8") /* ty=Tensor[(36), uint8] */;
  %160 = cast(%var_7509, dtype="uint8") /* ty=Tensor[(1, 108), uint8] */;
  %161 = reshape(%159, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), uint8] */;
  %162 = reshape(%160, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
  %163 = log10(%151) /* ty=Tensor[(12, 4, 15), float64] */;
  %164 = %152.0;
  %165 = %157.0;
  %166 = %158.0;
  %167 = @func_6387(%161, %162) /* ty=Tensor[(6, 3, 6), float64] */;
  (%163, %164, %165, %var_7501, %166, %167, %var_7508, %var_7509)
}

def @func_5136() -> (Tensor[(196), float64], Tensor[(196), uint32]) {
  %168 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %171 = reshape(%170, newshape=[196]) /* ty=Tensor[(196), uint64] */;
  %172 = @func_4701(%171) /* ty=(Tensor[(196), uint32],) */;
  %173 = %172.0;
  (%169, %173)
}

def @func_5457(%var_5447: Tensor[(8, 15, 6), float32]) -> (Tensor[(8, 15, 6), float32], Tensor[(196), uint64]) {
  %174 = cast(%var_5447, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %175 = @func_4803() /* ty=(Tensor[(196), uint64],) */;
  %176 = sqrt(%174) /* ty=Tensor[(8, 15, 6), float32] */;
  %177 = %175.0;
  (%176, %177)
}

def @func_4701(%var_4682: Tensor[(196), uint64]) -> (Tensor[(196), uint32],) {
  %178 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %179 = %178.1;
  %180 = cast(%var_4682, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %181 = shape_of(%179, dtype="int32") /* ty=Tensor[(1), int32] */;
  %182 = cast(%179, dtype="uint32") /* ty=Tensor[(196), uint32] */;
  %183 = dyn.reshape(%180, %181, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %184 = add(%182, %183) /* ty=Tensor[(196), uint32] */;
  (%184,)
}

def @func_7239(%var_7230: Tensor[(1, 240), uint64], %var_7236: Tensor[(245), float64], %var_7237: Tensor[(650), uint16]) -> (Tensor[(8, 2, 5), float32], Tensor[(330), float64], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(650), uint16]) {
  %185 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %186 = @func_6220() /* ty=(Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) */;
  %187 = cast(%var_7230, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
  %188 = reshape(%187, newshape=[8, 6, 5]) /* ty=Tensor[(8, 6, 5), uint64] */;
  %189 = @func_2898(%188) /* ty=(Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) */;
  %190 = cast(%var_7236, dtype="float64") /* ty=Tensor[(245), float64] */;
  %191 = cast(%var_7237, dtype="uint16") /* ty=Tensor[(650), uint16] */;
  %192 = reshape(%190, newshape=[35, 7]) /* ty=Tensor[(35, 7), float64] */;
  %193 = reshape(%191, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), uint16] */;
  %194 = @func_4780(%192, %193) /* ty=(uint64, Tensor[(10, 13, 5), bool], Tensor[(28), float32], Tensor[(35, 7), float64], Tensor[(14, 2, 7), bool], Tensor[(98, 2), uint64], Tensor[(10, 13, 5), float64]) */;
  %195 = %185.1;
  %196 = %186.2;
  %197 = %189.2;
  %198 = %194.2;
  (%195, %196, %197, %var_7230, %198, %var_7236, %var_7237)
}

def @func_6398() -> Tensor[(196), float64] {
  %199 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
  %199.0
}

def @func_7730(%var_7709: Tensor[(300), float64]) -> (Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(4, 15, 5), float64], Tensor[(300), float64], Tensor[(196), float64], Tensor[(196), float64]) {
  %200 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %201 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %202 = cast(%var_7709, dtype="float64") /* ty=Tensor[(300), float64] */;
  %203 = reshape(%202, newshape=[4, 15, 5]) /* ty=Tensor[(4, 15, 5), float64] */;
  %204 = @func_2082(%203) /* ty=(Tensor[(4, 15, 5), float64],) */;
  %205 = @func_7649() /* ty=(Tensor[(196), float64],) */;
  %206 = %200.1;
  %207 = %201.1;
  %208 = %204.0;
  %209 = @func_6056() /* ty=Tensor[(196), float64] */;
  %210 = %205.0;
  (%206, %207, %208, %var_7709, %209, %210)
}

def @func_4520(%var_4476: Tensor[(8, 36), int32], %var_4513: Tensor[(8, 36), int32]) -> (Tensor[(400), int16], Tensor[(8, 9, 4), int32], Tensor[(120), float32], Tensor[(14, 2, 7), bool], uint64, Tensor[(98, 2), uint64], Tensor[(8, 36), bool]) {
  %211 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %212 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %213 = cast(meta[relay.Constant][11] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %214 = cast(%var_4476, dtype="int32") /* ty=Tensor[(8, 36), int32] */;
  %215 = reshape(%212, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), float32] */;
  %216 = reshape(%213, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), float32] */;
  %217 = reshape(%214, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %218 = @func_1906(%215, %216, %217) /* ty=(Tensor[(8, 9, 4), int32], Tensor[(288), int32], Tensor[(3, 10, 4), bool]) */;
  %219 = cast(meta[relay.Constant][12] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %220 = cast(meta[relay.Constant][13] /* ty=Tensor[(98, 2), uint64] */, dtype="uint64") /* ty=Tensor[(98, 2), uint64] */;
  %221 = reshape(%219, newshape=[]) /* ty=uint64 */;
  %222 = reshape(%220, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %223 = cast(%var_4513, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
  %224 = shape_of(%var_4476, dtype="int32") /* ty=Tensor[(2), int32] */;
  %225 = cast(%var_4476, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %227 = %211.2;
  %228 = %218.0;
  %229 = @func_2431(%221, %222) /* ty=Tensor[(14, 2, 7), bool] */;
  %230 = greater_equal(%225, %226) /* ty=Tensor[(8, 36), bool] */;
  (%227, %228, meta[relay.Constant][11] /* ty=Tensor[(120), float32] */, %229, meta[relay.Constant][12] /* ty=uint64 */, meta[relay.Constant][13] /* ty=Tensor[(98, 2), uint64] */, %230)
}

def @func_3710(%var_3703: Tensor[(7, 16, 3), uint16], %var_3704: Tensor[(7, 16, 3), uint16]) -> (Tensor[(7, 16, 3), uint16],) {
  %231 = cast(%var_3704, dtype="uint16") /* ty=Tensor[(7, 16, 3), uint16] */;
  %232 = shape_of(%var_3703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %233 = cast(%var_3703, dtype="uint16") /* ty=Tensor[(7, 16, 3), uint16] */;
  %234 = dyn.reshape(%231, %232, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %235 = add(%233, %234) /* ty=Tensor[(7, 16, 3), uint16] */;
  (%235,)
}

def @func_6056() -> Tensor[(196), float64] {
  %236 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %236.0
}

def @func_3790() -> (Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) {
  %237 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %238 = cast(meta[relay.Constant][15] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %239 = reshape(%237, newshape=[]) /* ty=uint64 */;
  %240 = reshape(%238, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %241 = cast(meta[relay.Constant][16] /* ty=Tensor[(5, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %242 = rsqrt(%241) /* ty=Tensor[(5, 13, 7), float64] */;
  %243 = cast(%242, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %244 = sqrt(%243) /* ty=Tensor[(5, 13, 7), float64] */;
  %245 = cast(%244, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %246 = tan(%245) /* ty=Tensor[(5, 13, 7), float32] */;
  %247 = cast(%246, dtype="int16") /* ty=Tensor[(5, 13, 7), int16] */;
  %248 = cast(meta[relay.Constant][14] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
  %249 = @func_2431(%239, %240) /* ty=Tensor[(14, 2, 7), bool] */;
  %250 = logical_xor(%247, %248) /* ty=Tensor[(5, 13, 7), int16] */;
  (%249, meta[relay.Constant][15] /* ty=Tensor[(196), uint64] */, %250)
}

def @func_7754() -> (uint64,) {
  %251 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
  %252 = %251.4;
  (%252,)
}

def @func_3002(%var_2949: uint64, %var_2950: Tensor[(8, 14, 13), uint64]) -> (Tensor[(8, 14, 13), int64], Tensor[(10, 13, 5), float32], Tensor[(8, 14, 13), float32], Tensor[(13, 8, 14), float64]) {
  %253 = cast(%var_2949, dtype="int64") /* ty=int64 */;
  %254 = cast(%var_2950, dtype="int64") /* ty=Tensor[(8, 14, 13), int64] */;
  %255 = cast(%var_2949, dtype="float32") /* ty=float32 */;
  %256 = reshape(%255, newshape=[]) /* ty=float32 */;
  %257 = @func_2859(%256) /* ty=(Tensor[(10, 13, 5), float32],) */;
  %258 = cast(%var_2949, dtype="bool") /* ty=bool */;
  %259 = cast(%var_2950, dtype="bool") /* ty=Tensor[(8, 14, 13), bool] */;
  %260 = less(%258, %259) /* ty=Tensor[(8, 14, 13), bool] */;
  %261 = cast(%260, dtype="float32") /* ty=Tensor[(8, 14, 13), float32] */;
  %262 = sin(%261) /* ty=Tensor[(8, 14, 13), float32] */;
  %263 = cast(%262, dtype="float64") /* ty=Tensor[(8, 14, 13), float64] */;
  %264 = reshape(%263, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
  %265 = subtract(%253, %254) /* ty=Tensor[(8, 14, 13), int64] */;
  %266 = %257.0;
  %267 = @func_2690(%264) /* ty=Tensor[(13, 8, 14), float64] */;
  (%265, %266, %262, %267)
}

def @func_4135(%var_4115: Tensor[(1, 240), uint64], %var_4121: uint64, %var_4126: Tensor[(1100), float32]) -> (Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) {
  %268 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %269 = %268.1;
  %270 = cast(meta[relay.Constant][17] /* ty=Tensor[(196), uint64] */, dtype="bool") /* ty=Tensor[(196), bool] */;
  %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(1), int32] */;
  %272 = cast(%269, dtype="bool") /* ty=Tensor[(196), bool] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?), bool] */;
  %274 = cast(%var_4115, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
  %275 = reshape(%274, newshape=[8, 6, 5]) /* ty=Tensor[(8, 6, 5), uint64] */;
  %276 = @func_2898(%275) /* ty=(Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) */;
  %277 = cast(%var_4121, dtype="uint64") /* ty=uint64 */;
  %278 = cast(%269, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %279 = reshape(%277, newshape=[]) /* ty=uint64 */;
  %280 = reshape(%278, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %281 = cast(%var_4126, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %282 = reshape(%281, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
  %283 = @func_2298(%282) /* ty=(Tensor[(1, 4, 13), float64], Tensor[(52, 1), float64], Tensor[(11, 10, 10), float64]) */;
  %284 = logical_or(%272, %273) /* ty=Tensor[(196), bool] */;
  %285 = %276.2;
  %286 = @func_2431(%279, %280) /* ty=Tensor[(14, 2, 7), bool] */;
  %287 = %283.1;
  (%284, %285, %var_4115, %286, %var_4121, %287, %var_4126)
}

def @func_4254() -> Tensor[(14, 2, 7), float32] {
  @func_4215() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_4871() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  %288 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %289 = @func_4446() /* ty=(Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) */;
  %290 = %288.0;
  %291 = %289.0;
  (%290, %291)
}

def @func_1906(%var_1868: Tensor[(3, 10, 4), float32], %var_1869: Tensor[(3, 10, 4), float32], %var_1875: Tensor[(288), int32]) -> (Tensor[(8, 9, 4), int32], Tensor[(288), int32], Tensor[(3, 10, 4), bool]) {
  %292 = cast(%var_1875, dtype="int32") /* ty=Tensor[(288), int32] */;
  %293 = cast(%var_1875, dtype="int32") /* ty=Tensor[(288), int32] */;
  %294 = reshape(%292, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
  %295 = reshape(%293, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
  %296 = cast(%var_1869, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
  %297 = shape_of(%var_1868, dtype="int32") /* ty=Tensor[(3), int32] */;
  %298 = cast(%var_1868, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
  %299 = dyn.reshape(%296, %297, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %300 = less(%298, %299) /* ty=Tensor[(3, 10, 4), bool] */;
  %301 = cast(%var_1869, dtype="uint64") /* ty=Tensor[(3, 10, 4), uint64] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="uint64") /* ty=Tensor[(3, 10, 4), uint64] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %305 = minimum(%303, %304) /* ty=Tensor[(3, 10, 4), uint64] */;
  %306 = cast(%var_1868, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
  %307 = shape_of(%305, dtype="int32") /* ty=Tensor[(3), int32] */;
  %308 = cast(%305, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
  %309 = dyn.reshape(%306, %307, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %310 = @func_519(%294, %295) /* ty=Tensor[(8, 9, 4), int32] */;
  %311 = greater_equal(%308, %309) /* ty=Tensor[(3, 10, 4), bool] */;
  (%310, %var_1875, %311)
}

def @func_5757(%var_5732: Tensor[(7, 15, 11), uint64], %var_5733: Tensor[(7, 15, 11), uint64]) -> (Tensor[(7, 15, 11), uint64], Tensor[(196), uint32], Tensor[(196), uint64], Tensor[(7, 15, 11), float64]) {
  %312 = cast(%var_5733, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
  %313 = shape_of(%var_5732, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%var_5732, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %316 = cast(meta[relay.Constant][18] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %317 = reshape(%316, newshape=[196]) /* ty=Tensor[(196), uint64] */;
  %318 = @func_4701(%317) /* ty=(Tensor[(196), uint32],) */;
  %319 = cast(%var_5732, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %320 = acosh(%319) /* ty=Tensor[(7, 15, 11), float64] */;
  %321 = cast(%var_5732, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %322 = shape_of(%320, dtype="int32") /* ty=Tensor[(3), int32] */;
  %323 = cast(%320, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
  %324 = dyn.reshape(%321, %322, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %325 = right_shift(%314, %315) /* ty=Tensor[(7, 15, 11), uint64] */;
  %326 = %318.0;
  %327 = divide(%323, %324) /* ty=Tensor[(7, 15, 11), float64] */;
  (%325, %326, meta[relay.Constant][18] /* ty=Tensor[(196), uint64] */, %327)
}

def @func_6171() -> (Tensor[(8, 2, 5), float64],) {
  %328 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %329 = %328.0;
  %330 = cast(%329, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
  %331 = exp(%330) /* ty=Tensor[(8, 2, 5), float64] */;
  (%331,)
}

def @func_1289(%var_1276: Tensor[(245), float64]) -> (Tensor[(16, 6, 8), float64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(8, 9, 4), int32]) {
  %332 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %333 = cast(%var_1276, dtype="float64") /* ty=Tensor[(245), float64] */;
  %334 = reshape(%333, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), float64] */;
  %335 = @func_1064(%334) /* ty=(Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) */;
  %336 = %335.2;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(28), float32] */;
  %338 = reshape(%337, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), float32] */;
  %339 = @func_971(%338) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */;
  %340 = exp(%332) /* ty=Tensor[(16, 6, 8), float64] */;
  %341 = %339.1;
  (%340, %336, %var_1276, %341)
}

def @func_1064(%var_1041: Tensor[(7, 5, 7), float64]) -> (Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) {
  %342 = cast(%var_1041, dtype="float64") /* ty=Tensor[(7, 5, 7), float64] */;
  %343 = sqrt(%342) /* ty=Tensor[(7, 5, 7), float64] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(7, 5, 7), float32] */;
  %345 = erf(%344) /* ty=Tensor[(7, 5, 7), float32] */;
  %346 = cast(%var_1041, dtype="int32") /* ty=Tensor[(7, 5, 7), int32] */;
  %347 = shape_of(%345, dtype="int32") /* ty=Tensor[(3), int32] */;
  %348 = cast(%345, dtype="int32") /* ty=Tensor[(7, 5, 7), int32] */;
  %349 = dyn.reshape(%346, %347, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %350 = cast(meta[relay.Constant][20] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %351 = reshape(%350, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), float32] */;
  %352 = @func_971(%351) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */;
  %353 = add(%348, %349) /* ty=Tensor[(7, 5, 7), int32] */;
  %354 = %352.0;
  (%353, %354, meta[relay.Constant][20] /* ty=Tensor[(28), float32] */)
}

def @func_7302() -> (Tensor[(196), float64],) {
  %355 = @func_6816() /* ty=Tensor[(196), float64] */;
  (%355,)
}

def @func_5899() -> Tensor[(196), float64] {
  @func_5028() /* ty=Tensor[(196), float64] */
}

def @func_5378() -> Tensor[(14, 2, 7), float32] {
  %356 = @func_4841() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) */;
  %356.0
}

def @func_2082(%var_2069: Tensor[(4, 15, 5), float64]) -> (Tensor[(4, 15, 5), float64],) {
  %357 = cast(%var_2069, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %358 = log(%357) /* ty=Tensor[(4, 15, 5), float64] */;
  (%358,)
}

def @func_6220() -> (Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) {
  %359 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %360 = cast(meta[relay.Constant][21] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %361 = reshape(%360, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), float64] */;
  %362 = @func_1766(%361) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(245), float64], Tensor[(245), float64]) */;
  %363 = %359.1;
  %364 = %362.1;
  (%363, %364, meta[relay.Constant][21] /* ty=Tensor[(330), float64] */)
}

def @func_5504(%var_5498: int16) -> Tensor[(16, 5, 2), int16] {
  %365 = cast(%var_5498, dtype="int16") /* ty=int16 */;
  %366 = cast(meta[relay.Constant][22] /* ty=Tensor[(16, 5, 2), int16] */, dtype="int16") /* ty=Tensor[(16, 5, 2), int16] */;
  bitwise_xor(%365, %366) /* ty=Tensor[(16, 5, 2), int16] */
}

def @func_6143(%var_6102: Tensor[(1456), uint64], %var_6138: Tensor[(28), float32]) -> (Tensor[(14, 2, 7), float32], Tensor[(8, 14, 13), int64], uint64, Tensor[(1456), uint64], Tensor[(8, 9, 4), int32], Tensor[(28), float32]) {
  %367 = cast(meta[relay.Constant][23] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %368 = cast(%var_6102, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %369 = reshape(%367, newshape=[]) /* ty=uint64 */;
  %370 = reshape(%368, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), uint64] */;
  %371 = @func_3002(%369, %370) /* ty=(Tensor[(8, 14, 13), int64], Tensor[(10, 13, 5), float32], Tensor[(8, 14, 13), float32], Tensor[(13, 8, 14), float64]) */;
  %372 = cast(%var_6138, dtype="float32") /* ty=Tensor[(28), float32] */;
  %373 = reshape(%372, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), float32] */;
  %374 = @func_971(%373) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */;
  %375 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %376 = %371.0;
  %377 = %374.1;
  (%375, %376, meta[relay.Constant][23] /* ty=uint64 */, %var_6102, %377, %var_6138)
}

def @func_6816() -> Tensor[(196), float64] {
  %378 = @func_6596() /* ty=(Tensor[(196), float64],) */;
  %378.0
}

def @func_2898(%var_2870: Tensor[(8, 6, 5), uint64]) -> (Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) {
  %379 = cast(%var_2870, dtype="uint64") /* ty=Tensor[(8, 6, 5), uint64] */;
  %380 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(8, 6, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %381 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 6, 5), uint64] */, dtype="uint64") /* ty=Tensor[(8, 6, 5), uint64] */;
  %382 = dyn.reshape(%379, %380, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %383 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 6, 5), uint64] */, dtype="float64") /* ty=Tensor[(8, 6, 5), float64] */;
  %384 = shape_of(%var_2870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %385 = cast(%var_2870, dtype="float64") /* ty=Tensor[(8, 6, 5), float64] */;
  %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %387 = cast(%var_2870, dtype="float64") /* ty=Tensor[(8, 6, 5), float64] */;
  %388 = subtract(%381, %382) /* ty=Tensor[(8, 6, 5), uint64] */;
  %389 = floor_mod(%385, %386) /* ty=Tensor[(8, 6, 5), float64] */;
  %390 = tan(%387) /* ty=Tensor[(8, 6, 5), float64] */;
  (%388, %389, %390)
}

def @func_7920(%var_7910: Tensor[(8, 5, 10), int16]) -> (Tensor[(196), float64], Tensor[(8, 5, 10), uint32]) {
  %391 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %392 = %391.1;
  %393 = cast(%var_7910, dtype="uint32") /* ty=Tensor[(8, 5, 10), uint32] */;
  %394 = shape_of(%392, dtype="int32") /* ty=Tensor[(3), int32] */;
  %395 = cast(%392, dtype="uint32") /* ty=Tensor[(8, 5, 10), uint32] */;
  %396 = dyn.reshape(%393, %394, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %397 = @func_5899() /* ty=Tensor[(196), float64] */;
  %398 = left_shift(%395, %396) /* ty=Tensor[(8, 5, 10), uint32] */;
  (%397, %398)
}

def @func_8156(%var_8131: Tensor[(7, 2, 10), float32]) -> (Tensor[(7, 2, 10), float32], Tensor[(5, 13, 7), float32], Tensor[(455), int16], Tensor[(13, 8, 14), float64]) {
  %399 = cast(meta[relay.Constant][25] /* ty=Tensor[(7, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %400 = shape_of(%var_8131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%var_8131, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %403 = cast(meta[relay.Constant][26] /* ty=Tensor[(455), int16] */, dtype="int16") /* ty=Tensor[(455), int16] */;
  %404 = reshape(%403, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), int16] */;
  %405 = @func_7113() /* ty=(uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) */;
  %406 = power(%401, %402) /* ty=Tensor[(7, 2, 10), float32] */;
  %407 = @func_4407(%404) /* ty=Tensor[(5, 13, 7), float32] */;
  %408 = %405.1;
  (%406, %407, meta[relay.Constant][26] /* ty=Tensor[(455), int16] */, %408)
}

def @func_5872() -> (Tensor[(14, 2, 7), float32],) {
  %409 = @func_4254() /* ty=Tensor[(14, 2, 7), float32] */;
  (%409,)
}

def @func_4446() -> (Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) {
  %410 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %411 = cast(meta[relay.Constant][27] /* ty=Tensor[(65, 7), int16] */, dtype="int16") /* ty=Tensor[(65, 7), int16] */;
  %412 = reshape(%411, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), int16] */;
  %413 = cast(meta[relay.Constant][27] /* ty=Tensor[(65, 7), int16] */, dtype="float32") /* ty=Tensor[(65, 7), float32] */;
  %414 = %410.0;
  %415 = @func_4407(%412) /* ty=Tensor[(5, 13, 7), float32] */;
  %416 = sqrt(%413) /* ty=Tensor[(65, 7), float32] */;
  (%414, %415, %416)
}

def @func_2859(%var_2853: float32) -> (Tensor[(10, 13, 5), float32],) {
  %417 = cast(%var_2853, dtype="float32") /* ty=float32 */;
  %418 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 5), float32] */;
  %419 = divide(%417, %418) /* ty=Tensor[(10, 13, 5), float32] */;
  (%419,)
}

def @func_2690(%var_2687: Tensor[(13, 8, 14), float64]) -> Tensor[(13, 8, 14), float64] {
  %420 = cast(%var_2687, dtype="float64") /* ty=Tensor[(13, 8, 14), float64] */;
  exp(%420) /* ty=Tensor[(13, 8, 14), float64] */
}

def @func_4780(%var_4755: Tensor[(35, 7), float64], %var_4767: Tensor[(10, 13, 5), uint16]) -> (uint64, Tensor[(10, 13, 5), bool], Tensor[(28), float32], Tensor[(35, 7), float64], Tensor[(14, 2, 7), bool], Tensor[(98, 2), uint64], Tensor[(10, 13, 5), float64]) {
  %421 = @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */;
  %422 = %421.3;
  %423 = cast(%422, dtype="float32") /* ty=float32 */;
  %424 = reshape(%423, newshape=[]) /* ty=float32 */;
  %425 = @func_2859(%424) /* ty=(Tensor[(10, 13, 5), float32],) */;
  %426 = %425.0;
  %427 = cast(%426, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %428 = log(%427) /* ty=Tensor[(10, 13, 5), float64] */;
  %429 = cast(meta[relay.Constant][29] /* ty=Tensor[(10, 13, 5), float64] */, dtype="bool") /* ty=Tensor[(10, 13, 5), bool] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %431 = cast(%428, dtype="bool") /* ty=Tensor[(10, 13, 5), bool] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %433 = cast(%var_4755, dtype="float64") /* ty=Tensor[(35, 7), float64] */;
  %434 = reshape(%433, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), float64] */;
  %435 = @func_1064(%434) /* ty=(Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) */;
  %436 = cast(%422, dtype="uint64") /* ty=uint64 */;
  %437 = cast(meta[relay.Constant][30] /* ty=Tensor[(98, 2), uint64] */, dtype="uint64") /* ty=Tensor[(98, 2), uint64] */;
  %438 = reshape(%436, newshape=[]) /* ty=uint64 */;
  %439 = reshape(%437, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %440 = cast(%426, dtype="uint16") /* ty=Tensor[(10, 13, 5), uint16] */;
  %441 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%428, dtype="uint16") /* ty=Tensor[(10, 13, 5), uint16] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %444 = multiply(%442, %443) /* ty=Tensor[(10, 13, 5), uint16] */;
  %445 = cast(%var_4767, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %446 = shape_of(%444, dtype="int32") /* ty=Tensor[(3), int32] */;
  %447 = cast(%444, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %448 = dyn.reshape(%445, %446, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %449 = mod(%447, %448) /* ty=Tensor[(10, 13, 5), float64] */;
  %450 = cast(%449, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
  %451 = greater_equal(%431, %432) /* ty=Tensor[(10, 13, 5), bool] */;
  %452 = %435.2;
  %453 = @func_2431(%438, %439) /* ty=Tensor[(14, 2, 7), bool] */;
  %454 = log2(%450) /* ty=Tensor[(10, 13, 5), float64] */;
  (%422, %451, %452, %var_4755, %453, meta[relay.Constant][30] /* ty=Tensor[(98, 2), uint64] */, %454)
}

def @func_4392() -> (Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) {
  %455 = cast(meta[relay.Constant][31] /* ty=Tensor[(240), uint64] */, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %456 = cast(meta[relay.Constant][32] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %457 = cast(meta[relay.Constant][33] /* ty=Tensor[(1100, 1), float32] */, dtype="float32") /* ty=Tensor[(1100, 1), float32] */;
  %458 = reshape(%455, newshape=[1, 240]) /* ty=Tensor[(1, 240), uint64] */;
  %459 = reshape(%456, newshape=[]) /* ty=uint64 */;
  %460 = reshape(%457, newshape=[1100]) /* ty=Tensor[(1100), float32] */;
  %461 = @func_4135(%458, %459, %460) /* ty=(Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) */;
  %462 = @func_4254() /* ty=Tensor[(14, 2, 7), float32] */;
  %463 = %461.6;
  (%462, %463, meta[relay.Constant][31] /* ty=Tensor[(240), uint64] */, meta[relay.Constant][32] /* ty=uint64 */, meta[relay.Constant][33] /* ty=Tensor[(1100, 1), float32] */)
}

def @func_7039() -> (Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) {
  %464 = @func_6220() /* ty=(Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) */;
  %465 = %464.2;
  %466 = cast(%465, dtype="float64") /* ty=Tensor[(330), float64] */;
  %467 = sqrt(%466) /* ty=Tensor[(330), float64] */;
  %468 = cast(meta[relay.Constant][34] /* ty=Tensor[(330), float64] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %469 = shape_of(%467, dtype="int32") /* ty=Tensor[(1), int32] */;
  %470 = cast(%467, dtype="uint32") /* ty=Tensor[(330), uint32] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %472 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %473 = cast(meta[relay.Constant][35] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
  %474 = reshape(%473, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
  %475 = @func_3966(%474) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) */;
  %476 = subtract(%470, %471) /* ty=Tensor[(330), uint32] */;
  %477 = %472.0;
  %478 = %475.1;
  (%476, %477, %478, meta[relay.Constant][35] /* ty=Tensor[(64), float64] */)
}

def @func_4215() -> Tensor[(14, 2, 7), float32] {
  %479 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %480 = %479.0;
  %481 = cast(%480, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  tan(%481) /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_6016() -> (Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) {
  %482 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %483 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %484 = %483.0;
  %485 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 2, 5), float64] */, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %486 = shape_of(%484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %487 = cast(%484, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
  %488 = dyn.reshape(%485, %486, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %489 = @func_5028() /* ty=Tensor[(196), float64] */;
  %490 = %482.0;
  %491 = equal(%487, %488) /* ty=Tensor[(8, 2, 5), bool] */;
  (%489, %490, %491)
}

def @func_2431(%var_2423: uint64, %var_2424: Tensor[(14, 2, 7), uint64]) -> Tensor[(14, 2, 7), bool] {
  %492 = cast(%var_2423, dtype="uint64") /* ty=uint64 */;
  %493 = cast(%var_2424, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
  %494 = multiply(%492, %493) /* ty=Tensor[(14, 2, 7), uint64] */;
  %495 = cast(%var_2423, dtype="bool") /* ty=bool */;
  %496 = cast(%494, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
  greater(%495, %496) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_519(%var_514: Tensor[(8, 9, 4), int32], %var_515: Tensor[(8, 9, 4), int32]) -> Tensor[(8, 9, 4), int32] {
  %497 = cast(%var_515, dtype="int32") /* ty=Tensor[(8, 9, 4), int32] */;
  %498 = shape_of(%var_514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %499 = cast(%var_514, dtype="int32") /* ty=Tensor[(8, 9, 4), int32] */;
  %500 = dyn.reshape(%497, %498, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  logical_xor(%499, %500) /* ty=Tensor[(8, 9, 4), int32] */
}

def @func_6491(%var_6467: Tensor[(12, 12, 2), bool]) -> (Tensor[(12, 12, 2), bool], Tensor[(12, 12, 2), bool], Tensor[(13, 8, 14), float64]) {
  %501 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %502 = shape_of(%var_6467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %503 = cast(%var_6467, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %504 = dyn.reshape(%501, %502, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %505 = cast(%var_6467, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %506 = shape_of(meta[relay.Constant][37] /* ty=Tensor[(12, 12, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(meta[relay.Constant][37] /* ty=Tensor[(12, 12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %509 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
  %510 = logical_and(%503, %504) /* ty=Tensor[(12, 12, 2), bool] */;
  %511 = greater_equal(%507, %508) /* ty=Tensor[(12, 12, 2), bool] */;
  %512 = %509.1;
  (%510, %511, %512)
}

def @func_4275() -> (Tensor[(14, 2, 7), bool],) {
  %513 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %514 = %513.0;
  (%514,)
}

def @func_5286(%var_5280: Tensor[(1, 4, 8), float64]) -> (Tensor[(1, 4, 8), float64],) {
  %515 = cast(%var_5280, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %516 = rsqrt(%515) /* ty=Tensor[(1, 4, 8), float64] */;
  (%516,)
}

def @func_5072(%var_5051: Tensor[(15, 13, 15), int64], %var_5052: Tensor[(15, 13, 15), int64], %var_5067: Tensor[(400), int16]) -> (Tensor[(15, 13, 15), bool], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) {
  %517 = cast(%var_5052, dtype="bool") /* ty=Tensor[(15, 13, 15), bool] */;
  %518 = shape_of(%var_5051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%var_5051, dtype="bool") /* ty=Tensor[(15, 13, 15), bool] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %521 = cast(%var_5067, dtype="int16") /* ty=Tensor[(400), int16] */;
  %522 = reshape(%521, newshape=[8, 5, 10]) /* ty=Tensor[(8, 5, 10), int16] */;
  %523 = @func_3809(%522) /* ty=(Tensor[(8, 5, 10), int16],) */;
  %524 = less_equal(%519, %520) /* ty=Tensor[(15, 13, 15), bool] */;
  %525 = %523.0;
  (%524, %525, %var_5067)
}

def @func_7075() -> (Tensor[(196), float64],) {
  %526 = @func_6016() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */;
  %527 = %526.1;
  %528 = cast(%527, dtype="float64") /* ty=Tensor[(196), float64] */;
  %529 = asinh(%528) /* ty=Tensor[(196), float64] */;
  (%529,)
}

def @func_5975(%var_5931: Tensor[(12, 8, 11), float64]) -> (Tensor[(12, 8, 11), float64], Tensor[(400), int16], Tensor[(400), int16], Tensor[(2925), float32], Tensor[(14, 2, 7), bool]) {
  %530 = cast(meta[relay.Constant][38] /* ty=Tensor[(12, 8, 11), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %531 = shape_of(%var_5931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %532 = cast(%var_5931, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %534 = cast(meta[relay.Constant][39] /* ty=Tensor[(2925), int64] */, dtype="int64") /* ty=Tensor[(2925), int64] */;
  %535 = cast(meta[relay.Constant][39] /* ty=Tensor[(2925), int64] */, dtype="int64") /* ty=Tensor[(2925), int64] */;
  %536 = cast(meta[relay.Constant][40] /* ty=Tensor[(400), int16] */, dtype="int16") /* ty=Tensor[(400), int16] */;
  %537 = reshape(%534, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), int64] */;
  %538 = reshape(%535, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), int64] */;
  %539 = reshape(%536, newshape=[400]) /* ty=Tensor[(400), int16] */;
  %540 = @func_5072(%537, %538, %539) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %541 = cast(meta[relay.Constant][39] /* ty=Tensor[(2925), int64] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %542 = @func_4275() /* ty=(Tensor[(14, 2, 7), bool],) */;
  %543 = mod(%532, %533) /* ty=Tensor[(12, 8, 11), float64] */;
  %544 = %540.2;
  %545 = asin(%541) /* ty=Tensor[(2925), float32] */;
  %546 = %542.0;
  (%543, %544, meta[relay.Constant][40] /* ty=Tensor[(400), int16] */, %545, %546)
}

def @func_7649() -> (Tensor[(196), float64],) {
  %547 = @func_5028() /* ty=Tensor[(196), float64] */;
  (%547,)
}

def @func_6899() -> (Tensor[(15, 6, 11), float32], Tensor[(196), float64]) {
  %548 = cast(meta[relay.Constant][41] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
  %549 = asin(%548) /* ty=Tensor[(15, 6, 11), float32] */;
  %550 = @func_6056() /* ty=Tensor[(196), float64] */;
  (%549, %550)
}

def @func_8054() -> (Tensor[(14, 2, 7), float32],) {
  %551 = @func_7132() /* ty=(Tensor[(14, 2, 7), float32],) */;
  %552 = %551.0;
  (%552,)
}

def @func_5863() -> Tensor[(14, 2, 7), float32] {
  %553 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  exp(%554) /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_8183() -> (Tensor[(400), int16],) {
  %555 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %556 = %555.2;
  (%556,)
}

def @func_4803() -> (Tensor[(196), uint64],) {
  %557 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %558 = %557.0;
  (%558,)
}

def @func_2298(%var_2275: Tensor[(11, 10, 10), float32]) -> (Tensor[(1, 4, 13), float64], Tensor[(52, 1), float64], Tensor[(11, 10, 10), float64]) {
  %559 = cast(meta[relay.Constant][42] /* ty=Tensor[(52, 1), float64] */, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %560 = reshape(%559, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %561 = cast(%var_2275, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %562 = acos(%561) /* ty=Tensor[(11, 10, 10), float32] */;
  %563 = cast(%562, dtype="float64") /* ty=Tensor[(11, 10, 10), float64] */;
  %564 = shape_of(%var_2275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%var_2275, dtype="float64") /* ty=Tensor[(11, 10, 10), float64] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %567 = @func_1980(%560) /* ty=Tensor[(1, 4, 13), float64] */;
  %568 = floor_mod(%565, %566) /* ty=Tensor[(11, 10, 10), float64] */;
  (%567, meta[relay.Constant][42] /* ty=Tensor[(52, 1), float64] */, %568)
}

def @func_7132() -> (Tensor[(14, 2, 7), float32],) {
  %569 = @func_5378() /* ty=Tensor[(14, 2, 7), float32] */;
  (%569,)
}

def @func_7968(%var_7959: Tensor[(2, 1, 16), float64], %var_7960: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64],) {
  %570 = cast(%var_7959, dtype="float64") /* ty=Tensor[(2, 1, 16), float64] */;
  %571 = cast(%var_7960, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
  %572 = floor_mod(%570, %571) /* ty=Tensor[(2, 5, 16), float64] */;
  (%572,)
}

def @main() -> (Tensor[(14, 2, 7), float32], Tensor[(196), float64]) {
  %573 = @func_6247() /* ty=(Tensor[(196), float64],) */;
  %574 = %573.0;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(196), float64] */;
  %576 = @func_4254() /* ty=Tensor[(14, 2, 7), float32] */;
  %577 = atan(%575) /* ty=Tensor[(196), float64] */;
  (%576, %577)
}

def @func_3809(%var_3799: Tensor[(8, 5, 10), int16]) -> (Tensor[(8, 5, 10), int16],) {
  %578 = cast(meta[relay.Constant][43] /* ty=Tensor[(8, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(8, 5, 10), int16] */;
  %579 = shape_of(%var_3799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %580 = cast(%var_3799, dtype="int16") /* ty=Tensor[(8, 5, 10), int16] */;
  %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %582 = maximum(%580, %581) /* ty=Tensor[(8, 5, 10), int16] */;
  (%582,)
}

def @func_3189(%var_3175: bool, %var_3176: Tensor[(5, 2, 7), bool]) -> Tensor[(5, 2, 7), bool] {
  %583 = cast(%var_3175, dtype="bool") /* ty=bool */;
  %584 = cast(%var_3176, dtype="bool") /* ty=Tensor[(5, 2, 7), bool] */;
  logical_or(%583, %584) /* ty=Tensor[(5, 2, 7), bool] */
}

def @func_4161() -> (Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) {
  %585 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %586 = cast(meta[relay.Constant][44] /* ty=Tensor[(400), int16] */, dtype="int16") /* ty=Tensor[(400), int16] */;
  %587 = reshape(%586, newshape=[8, 5, 10]) /* ty=Tensor[(8, 5, 10), int16] */;
  %588 = @func_3809(%587) /* ty=(Tensor[(8, 5, 10), int16],) */;
  %589 = %585.1;
  %590 = %588.0;
  (%589, %590, meta[relay.Constant][44] /* ty=Tensor[(400), int16] */)
}

def @func_6464() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  %591 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %592 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %593 = %591.0;
  %594 = %592.2;
  (%593, %594)
}

def @func_5302() -> Tensor[(196), float64] {
  @func_5028() /* ty=Tensor[(196), float64] */
}

def @func_7476() -> (Tensor[(196), float32],) {
  %595 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %596 = %595.0;
  %597 = cast(%596, dtype="float32") /* ty=Tensor[(196), float32] */;
  %598 = sinh(%597) /* ty=Tensor[(196), float32] */;
  (%598,)
}

def @func_5418() -> uint64 {
  %599 = @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */;
  %599.3
}

def @func_8350(%var_8347: Tensor[(5, 9, 1), float64]) -> (Tensor[(5, 9, 1), float64],) {
  %600 = cast(%var_8347, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %601 = sinh(%600) /* ty=Tensor[(5, 9, 1), float64] */;
  (%601,)
}

def @func_1006(%var_1001: Tensor[(7, 8, 16), int8], %var_1002: Tensor[(7, 8, 16), int8]) -> Tensor[(7, 8, 16), int8] {
  %602 = cast(%var_1002, dtype="int8") /* ty=Tensor[(7, 8, 16), int8] */;
  %603 = shape_of(%var_1001, dtype="int32") /* ty=Tensor[(3), int32] */;
  %604 = cast(%var_1001, dtype="int8") /* ty=Tensor[(7, 8, 16), int8] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  bitwise_and(%604, %605) /* ty=Tensor[(7, 8, 16), int8] */
}

def @func_1766(%var_1750: Tensor[(10, 11, 3), float64]) -> (Tensor[(10, 11, 3), bool], Tensor[(245), float64], Tensor[(245), float64]) {
  %606 = cast(%var_1750, dtype="float64") /* ty=Tensor[(10, 11, 3), float64] */;
  %607 = sqrt(%606) /* ty=Tensor[(10, 11, 3), float64] */;
  %608 = cast(%var_1750, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
  %610 = cast(%607, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %612 = cast(meta[relay.Constant][45] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %613 = reshape(%612, newshape=[245]) /* ty=Tensor[(245), float64] */;
  %614 = @func_1289(%613) /* ty=(Tensor[(16, 6, 8), float64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(8, 9, 4), int32]) */;
  %615 = not_equal(%610, %611) /* ty=Tensor[(10, 11, 3), bool] */;
  %616 = %614.2;
  (%615, %616, meta[relay.Constant][45] /* ty=Tensor[(245), float64] */)
}

def @func_5259(%var_5245: Tensor[(2, 4, 11), float64], %var_5246: Tensor[(2, 4, 11), float64], %var_5251: Tensor[(2, 168), uint16]) -> (Tensor[(2, 4, 11), float64], Tensor[(7, 16, 3), uint16], Tensor[(2, 168), uint16]) {
  %617 = cast(%var_5246, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %618 = shape_of(%var_5245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %619 = cast(%var_5245, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %621 = cast(%var_5251, dtype="uint16") /* ty=Tensor[(2, 168), uint16] */;
  %622 = cast(%var_5251, dtype="uint16") /* ty=Tensor[(2, 168), uint16] */;
  %623 = reshape(%621, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
  %624 = reshape(%622, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
  %625 = @func_3710(%623, %624) /* ty=(Tensor[(7, 16, 3), uint16],) */;
  %626 = floor_mod(%619, %620) /* ty=Tensor[(2, 4, 11), float64] */;
  %627 = %625.0;
  (%626, %627, %var_5251)
}

def @func_4197(%var_4184: uint64) -> (Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) {
  %628 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %629 = cast(%var_4184, dtype="uint64") /* ty=uint64 */;
  %630 = %628.0;
  %631 = cast(%630, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %632 = reshape(%629, newshape=[]) /* ty=uint64 */;
  %633 = reshape(%631, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %634 = @func_2431(%632, %633) /* ty=Tensor[(14, 2, 7), bool] */;
  (%630, %634, %var_4184)
}

def @func_4895() -> Tensor[(14, 2, 7), float32] {
  @func_4254() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_4952(%var_4931: Tensor[(13, 11, 13), uint64]) -> (uint64, Tensor[(13, 11, 13), bool], Tensor[(14, 2, 7), bool], Tensor[(196), uint8]) {
  %635 = cast(meta[relay.Constant][46] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %636 = reshape(%635, newshape=[]) /* ty=uint64 */;
  %637 = @func_1586(%636) /* ty=Tensor[(13, 11, 13), uint64] */;
  %638 = cast(%var_4931, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  %639 = shape_of(%637, dtype="int32") /* ty=Tensor[(3), int32] */;
  %640 = cast(%637, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  %641 = dyn.reshape(%638, %639, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %642 = @func_4275() /* ty=(Tensor[(14, 2, 7), bool],) */;
  %643 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %644 = %643.0;
  %645 = cast(%644, dtype="float32") /* ty=Tensor[(196), float32] */;
  %646 = exp(%645) /* ty=Tensor[(196), float32] */;
  %647 = cast(%644, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(1), int32] */;
  %649 = cast(%646, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %651 = logical_and(%640, %641) /* ty=Tensor[(13, 11, 13), bool] */;
  %652 = %642.0;
  %653 = logical_xor(%649, %650) /* ty=Tensor[(196), uint8] */;
  (meta[relay.Constant][46] /* ty=uint64 */, %651, %652, %653)
}

def @func_5683() -> (Tensor[(196), uint32], Tensor[(196), float64], uint64, Tensor[(1100), float32], Tensor[(80), float64]) {
  %654 = @func_5136() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */;
  %655 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %656 = cast(meta[relay.Constant][47] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %657 = cast(meta[relay.Constant][48] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %658 = reshape(%656, newshape=[1100]) /* ty=Tensor[(1100), float32] */;
  %659 = reshape(%657, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), float64] */;
  %660 = @func_5642(%658, %659) /* ty=(uint64, Tensor[(196), uint64], Tensor[(64), float64], Tensor[(1100), float32], Tensor[(240), uint64], Tensor[(1100), float32], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool]) */;
  %661 = %654.1;
  %662 = %655.0;
  %663 = %660.0;
  (%661, %662, %663, meta[relay.Constant][47] /* ty=Tensor[(1100), float32] */, meta[relay.Constant][48] /* ty=Tensor[(80), float64] */)
}

def @func_1586(%var_1581: uint64) -> Tensor[(13, 11, 13), uint64] {
  %664 = cast(%var_1581, dtype="uint64") /* ty=uint64 */;
  %665 = cast(meta[relay.Constant][49] /* ty=Tensor[(13, 11, 13), uint64] */, dtype="uint64") /* ty=Tensor[(13, 11, 13), uint64] */;
  logical_xor(%664, %665) /* ty=Tensor[(13, 11, 13), uint64] */
}

def @func_8090() -> Tensor[(196), float64] {
  %666 = @func_7649() /* ty=(Tensor[(196), float64],) */;
  %666.0
}

def @func_5028() -> Tensor[(196), float64] {
  %667 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %667.0
}

def @func_1628(%var_1618: Tensor[(16, 6, 6), float64]) -> Tensor[(16, 6, 6), float64] {
  %668 = cast(%var_1618, dtype="float64") /* ty=Tensor[(16, 6, 6), float64] */;
  asin(%668) /* ty=Tensor[(16, 6, 6), float64] */
}

def @func_7401() -> (Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32]) {
  %669 = @func_5872() /* ty=(Tensor[(14, 2, 7), float32],) */;
  %670 = %669.0;
  %671 = @func_6972() /* ty=(Tensor[(196), float64], Tensor[(196), float64], uint64, Tensor[(14, 2, 7), bool], Tensor[(14, 2, 7), float32]) */;
  %672 = %671.1;
  %673 = cast(%672, dtype="float32") /* ty=Tensor[(196), float32] */;
  %674 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
  %675 = cast(%670, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %677 = maximum(%675, %676) /* ty=Tensor[(14, 2, 7), float32] */;
  %678 = @func_5378() /* ty=Tensor[(14, 2, 7), float32] */;
  (%677, %678)
}

def @func_6418() -> Tensor[(196), float64] {
  @func_5899() /* ty=Tensor[(196), float64] */
}

def @func_4718() -> (Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) {
  %679 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
  %680 = cast(meta[relay.Constant][50] /* ty=Tensor[(8, 2, 5), float64] */, dtype="float32") /* ty=Tensor[(8, 2, 5), float32] */;
  %681 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %682 = cosh(%679) /* ty=Tensor[(8, 2, 5), float64] */;
  %683 = log10(%680) /* ty=Tensor[(8, 2, 5), float32] */;
  %684 = %681.0;
  (%682, %683, %684)
}

def @func_6596() -> (Tensor[(196), float64],) {
  %685 = @func_6464() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %686 = %685.1;
  (%686,)
}

def @func_7563(%var_7540: uint64) -> (Tensor[(8, 2, 5), bool], Tensor[(13, 11, 13), uint64], uint64, Tensor[(1456), float64]) {
  %687 = @func_6016() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */;
  %688 = cast(%var_7540, dtype="uint64") /* ty=uint64 */;
  %689 = reshape(%688, newshape=[]) /* ty=uint64 */;
  %690 = @func_7113() /* ty=(uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) */;
  %691 = %687.2;
  %692 = @func_1586(%689) /* ty=Tensor[(13, 11, 13), uint64] */;
  %693 = %690.2;
  (%691, %692, %var_7540, %693)
}

def @func_7806() -> (Tensor[(330), uint16], Tensor[(14, 2, 7), float32]) {
  %694 = @func_7039() /* ty=(Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) */;
  %695 = %694.0;
  %696 = cast(meta[relay.Constant][51] /* ty=Tensor[(330), uint32] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %697 = shape_of(%695, dtype="int32") /* ty=Tensor[(1), int32] */;
  %698 = cast(%695, dtype="uint16") /* ty=Tensor[(330), uint16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %700 = @func_4841() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) */;
  %701 = bitwise_and(%698, %699) /* ty=Tensor[(330), uint16] */;
  %702 = %700.0;
  (%701, %702)
}

def @func_8019() -> (Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(196), uint16]) {
  %703 = @func_7132() /* ty=(Tensor[(14, 2, 7), float32],) */;
  %704 = @func_5028() /* ty=Tensor[(196), float64] */;
  %705 = @func_5302() /* ty=Tensor[(196), float64] */;
  %706 = cast(%705, dtype="uint16") /* ty=Tensor[(196), uint16] */;
  %707 = shape_of(%704, dtype="int32") /* ty=Tensor[(1), int32] */;
  %708 = cast(%704, dtype="uint16") /* ty=Tensor[(196), uint16] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %710 = %703.0;
  %711 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %712 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %713 = bitwise_xor(%708, %709) /* ty=Tensor[(196), uint16] */;
  (%710, %711, %712, %713)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6220() -> (Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) {
  %0 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(330), float64] */, dtype="float64") /* ty=Tensor[(330), float64] */;
  %2 = reshape(%1, newshape=[10, 11, 3]) /* ty=Tensor[(10, 11, 3), float64] */;
  %3 = @func_1766(%2) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(245), float64], Tensor[(245), float64]) */;
  %4 = %0.1;
  %5 = %3.1;
  (%4, %5, meta[relay.Constant][0] /* ty=Tensor[(330), float64] */)
}

def @func_4410(%var_4408: Tensor[(5, 13, 7), int16]) -> Tensor[(5, 13, 7), float32] {
  @func_4407(%var_4408) /* ty=Tensor[(5, 13, 7), float32] */
}

def @func_7525(%var_7521: Tensor[(12, 4, 15), float64], %var_7522: Tensor[(336), uint16], %var_7523: Tensor[(36), uint8], %var_7524: Tensor[(1, 108), uint8]) -> (Tensor[(12, 4, 15), float64], Tensor[(8, 2, 5), float64], Tensor[(7, 16, 3), uint16], Tensor[(336), uint16], Tensor[(196), float64], Tensor[(6, 3, 6), float64], Tensor[(36), uint8], Tensor[(1, 108), uint8]) {
  %23 = fn (%var_7492: Tensor[(12, 4, 15), float64], %var_7501: Tensor[(336), uint16], %var_7508: Tensor[(36), uint8], %var_7509: Tensor[(1, 108), uint8]) -> (Tensor[(12, 4, 15), float64], Tensor[(8, 2, 5), float64], Tensor[(7, 16, 3), uint16], Tensor[(336), uint16], Tensor[(196), float64], Tensor[(6, 3, 6), float64], Tensor[(36), uint8], Tensor[(1, 108), uint8]) {
    %6 = cast(%var_7492, dtype="float64") /* ty=Tensor[(12, 4, 15), float64] */;
    %7 = @func_6171() /* ty=(Tensor[(8, 2, 5), float64],) */;
    %8 = cast(%var_7501, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %9 = cast(%var_7501, dtype="uint16") /* ty=Tensor[(336), uint16] */;
    %10 = reshape(%8, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
    %11 = reshape(%9, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
    %12 = @func_3710(%10, %11) /* ty=(Tensor[(7, 16, 3), uint16],) */;
    %13 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
    %14 = cast(%var_7508, dtype="uint8") /* ty=Tensor[(36), uint8] */;
    %15 = cast(%var_7509, dtype="uint8") /* ty=Tensor[(1, 108), uint8] */;
    %16 = reshape(%14, newshape=[6, 1, 6]) /* ty=Tensor[(6, 1, 6), uint8] */;
    %17 = reshape(%15, newshape=[6, 3, 6]) /* ty=Tensor[(6, 3, 6), uint8] */;
    %18 = log10(%6) /* ty=Tensor[(12, 4, 15), float64] */;
    %19 = %7.0;
    %20 = %12.0;
    %21 = %13.0;
    %22 = @func_6387(%16, %17) /* ty=Tensor[(6, 3, 6), float64] */;
    (%18, %19, %20, %var_7501, %21, %22, %var_7508, %var_7509)
  };
  %23(%var_7521, %var_7522, %var_7523, %var_7524) /* ty=(Tensor[(12, 4, 15), float64], Tensor[(8, 2, 5), float64], Tensor[(7, 16, 3), uint16], Tensor[(336), uint16], Tensor[(196), float64], Tensor[(6, 3, 6), float64], Tensor[(36), uint8], Tensor[(1, 108), uint8]) */
}

def @func_7477() -> (Tensor[(196), float32],) {
  %28 = fn () -> (Tensor[(196), float32],) {
    %24 = @func_3864() /* ty=(Tensor[(196), float64],) */;
    %25 = %24.0;
    %26 = cast(%25, dtype="float32") /* ty=Tensor[(196), float32] */;
    %27 = sinh(%26) /* ty=Tensor[(196), float32] */;
    (%27,)
  };
  %28() /* ty=(Tensor[(196), float32],) */
}

def @func_7684() -> Tensor[(196), uint64] {
  %30 = fn () -> Tensor[(196), uint64] {
    %29 = @func_7039() /* ty=(Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) */;
    %29.1
  };
  %30() /* ty=Tensor[(196), uint64] */
}

def @func_5072(%var_5051: Tensor[(15, 13, 15), int64], %var_5052: Tensor[(15, 13, 15), int64], %var_5067: Tensor[(400), int16]) -> (Tensor[(15, 13, 15), bool], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) {
  %31 = cast(%var_5052, dtype="bool") /* ty=Tensor[(15, 13, 15), bool] */;
  %32 = shape_of(%var_5051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_5051, dtype="bool") /* ty=Tensor[(15, 13, 15), bool] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %35 = cast(%var_5067, dtype="int16") /* ty=Tensor[(400), int16] */;
  %36 = reshape(%35, newshape=[8, 5, 10]) /* ty=Tensor[(8, 5, 10), int16] */;
  %37 = @func_3809(%36) /* ty=(Tensor[(8, 5, 10), int16],) */;
  %38 = less_equal(%33, %34) /* ty=Tensor[(15, 13, 15), bool] */;
  %39 = %37.0;
  (%38, %39, %var_5067)
}

def @func_6017() -> (Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) {
  %50 = fn () -> (Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) {
    %40 = @func_3864() /* ty=(Tensor[(196), float64],) */;
    %41 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
    %42 = %41.0;
    %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 2, 5), float64] */, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(3), int32] */;
    %45 = cast(%42, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %47 = @func_5028() /* ty=Tensor[(196), float64] */;
    %48 = %40.0;
    %49 = equal(%45, %46) /* ty=Tensor[(8, 2, 5), bool] */;
    (%47, %48, %49)
  };
  %50() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */
}

def @func_1064(%var_1041: Tensor[(7, 5, 7), float64]) -> (Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) {
  %51 = cast(%var_1041, dtype="float64") /* ty=Tensor[(7, 5, 7), float64] */;
  %52 = sqrt(%51) /* ty=Tensor[(7, 5, 7), float64] */;
  %53 = cast(%52, dtype="float32") /* ty=Tensor[(7, 5, 7), float32] */;
  %54 = erf(%53) /* ty=Tensor[(7, 5, 7), float32] */;
  %55 = cast(%var_1041, dtype="int32") /* ty=Tensor[(7, 5, 7), int32] */;
  %56 = shape_of(%54, dtype="int32") /* ty=Tensor[(3), int32] */;
  %57 = cast(%54, dtype="int32") /* ty=Tensor[(7, 5, 7), int32] */;
  %58 = dyn.reshape(%55, %56, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %59 = cast(meta[relay.Constant][2] /* ty=Tensor[(28), float32] */, dtype="float32") /* ty=Tensor[(28), float32] */;
  %60 = reshape(%59, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), float32] */;
  %61 = @func_971(%60) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */;
  %62 = add(%57, %58) /* ty=Tensor[(7, 5, 7), int32] */;
  %63 = %61.0;
  (%62, %63, meta[relay.Constant][2] /* ty=Tensor[(28), float32] */)
}

def @func_3809(%var_3799: Tensor[(8, 5, 10), int16]) -> (Tensor[(8, 5, 10), int16],) {
  %64 = cast(meta[relay.Constant][3] /* ty=Tensor[(8, 5, 10), int16] */, dtype="int16") /* ty=Tensor[(8, 5, 10), int16] */;
  %65 = shape_of(%var_3799, dtype="int32") /* ty=Tensor[(3), int32] */;
  %66 = cast(%var_3799, dtype="int16") /* ty=Tensor[(8, 5, 10), int16] */;
  %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %68 = maximum(%66, %67) /* ty=Tensor[(8, 5, 10), int16] */;
  (%68,)
}

def @func_4276() -> (Tensor[(14, 2, 7), bool],) {
  %71 = fn () -> (Tensor[(14, 2, 7), bool],) {
    %69 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
    %70 = %69.0;
    (%70,)
  };
  %71() /* ty=(Tensor[(14, 2, 7), bool],) */
}

def @func_4161() -> (Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) {
  %72 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %73 = cast(meta[relay.Constant][4] /* ty=Tensor[(400), int16] */, dtype="int16") /* ty=Tensor[(400), int16] */;
  %74 = reshape(%73, newshape=[8, 5, 10]) /* ty=Tensor[(8, 5, 10), int16] */;
  %75 = @func_3809(%74) /* ty=(Tensor[(8, 5, 10), int16],) */;
  %76 = %72.1;
  %77 = %75.0;
  (%76, %77, meta[relay.Constant][4] /* ty=Tensor[(400), int16] */)
}

def @func_4703(%var_4702: Tensor[(196), uint64]) -> (Tensor[(196), uint32],) {
  %85 = fn (%var_4682: Tensor[(196), uint64]) -> (Tensor[(196), uint32],) {
    %78 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
    %79 = %78.1;
    %80 = cast(%var_4682, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %81 = shape_of(%79, dtype="int32") /* ty=Tensor[(1), int32] */;
    %82 = cast(%79, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %84 = add(%82, %83) /* ty=Tensor[(196), uint32] */;
    (%84,)
  };
  %85(%var_4702) /* ty=(Tensor[(196), uint32],) */
}

def @func_7304() -> (Tensor[(196), float64],) {
  @func_7302() /* ty=(Tensor[(196), float64],) */
}

def @func_1009(%var_1007: Tensor[(7, 8, 16), int8], %var_1008: Tensor[(7, 8, 16), int8]) -> Tensor[(7, 8, 16), int8] {
  %90 = fn (%var_1001: Tensor[(7, 8, 16), int8], %var_1002: Tensor[(7, 8, 16), int8]) -> Tensor[(7, 8, 16), int8] {
    %86 = cast(%var_1002, dtype="int8") /* ty=Tensor[(7, 8, 16), int8] */;
    %87 = shape_of(%var_1001, dtype="int32") /* ty=Tensor[(3), int32] */;
    %88 = cast(%var_1001, dtype="int8") /* ty=Tensor[(7, 8, 16), int8] */;
    %89 = dyn.reshape(%86, %87, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    bitwise_and(%88, %89) /* ty=Tensor[(7, 8, 16), int8] */
  };
  %90(%var_1007, %var_1008) /* ty=Tensor[(7, 8, 16), int8] */
}

def @func_6419() -> Tensor[(196), float64] {
  %91 = fn () -> Tensor[(196), float64] {
    @func_5899() /* ty=Tensor[(196), float64] */
  };
  %91() /* ty=Tensor[(196), float64] */
}

def @func_3005(%var_3003: uint64, %var_3004: Tensor[(8, 14, 13), uint64]) -> (Tensor[(8, 14, 13), int64], Tensor[(10, 13, 5), float32], Tensor[(8, 14, 13), float32], Tensor[(13, 8, 14), float64]) {
  %107 = fn (%var_2949: uint64, %var_2950: Tensor[(8, 14, 13), uint64]) -> (Tensor[(8, 14, 13), int64], Tensor[(10, 13, 5), float32], Tensor[(8, 14, 13), float32], Tensor[(13, 8, 14), float64]) {
    %92 = cast(%var_2949, dtype="int64") /* ty=int64 */;
    %93 = cast(%var_2950, dtype="int64") /* ty=Tensor[(8, 14, 13), int64] */;
    %94 = cast(%var_2949, dtype="float32") /* ty=float32 */;
    %95 = reshape(%94, newshape=[]) /* ty=float32 */;
    %96 = @func_2859(%95) /* ty=(Tensor[(10, 13, 5), float32],) */;
    %97 = cast(%var_2949, dtype="bool") /* ty=bool */;
    %98 = cast(%var_2950, dtype="bool") /* ty=Tensor[(8, 14, 13), bool] */;
    %99 = less(%97, %98) /* ty=Tensor[(8, 14, 13), bool] */;
    %100 = cast(%99, dtype="float32") /* ty=Tensor[(8, 14, 13), float32] */;
    %101 = sin(%100) /* ty=Tensor[(8, 14, 13), float32] */;
    %102 = cast(%101, dtype="float64") /* ty=Tensor[(8, 14, 13), float64] */;
    %103 = reshape(%102, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
    %104 = subtract(%92, %93) /* ty=Tensor[(8, 14, 13), int64] */;
    %105 = %96.0;
    %106 = @func_2690(%103) /* ty=Tensor[(13, 8, 14), float64] */;
    (%104, %105, %101, %106)
  };
  %107(%var_3003, %var_3004) /* ty=(Tensor[(8, 14, 13), int64], Tensor[(10, 13, 5), float32], Tensor[(8, 14, 13), float32], Tensor[(13, 8, 14), float64]) */
}

def @func_4392() -> (Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) {
  %108 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), uint64] */, dtype="uint64") /* ty=Tensor[(240), uint64] */;
  %109 = cast(meta[relay.Constant][6] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %110 = cast(meta[relay.Constant][7] /* ty=Tensor[(1100, 1), float32] */, dtype="float32") /* ty=Tensor[(1100, 1), float32] */;
  %111 = reshape(%108, newshape=[1, 240]) /* ty=Tensor[(1, 240), uint64] */;
  %112 = reshape(%109, newshape=[]) /* ty=uint64 */;
  %113 = reshape(%110, newshape=[1100]) /* ty=Tensor[(1100), float32] */;
  %114 = @func_4135(%111, %112, %113) /* ty=(Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) */;
  %115 = @func_4254() /* ty=Tensor[(14, 2, 7), float32] */;
  %116 = %114.6;
  (%115, %116, meta[relay.Constant][5] /* ty=Tensor[(240), uint64] */, meta[relay.Constant][6] /* ty=uint64 */, meta[relay.Constant][7] /* ty=Tensor[(1100, 1), float32] */)
}

def @func_6900() -> (Tensor[(15, 6, 11), float32], Tensor[(196), float64]) {
  %120 = fn () -> (Tensor[(15, 6, 11), float32], Tensor[(196), float64]) {
    %117 = cast(meta[relay.Constant][8] /* ty=Tensor[(15, 6, 11), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 11), float32] */;
    %118 = asin(%117) /* ty=Tensor[(15, 6, 11), float32] */;
    %119 = @func_6056() /* ty=Tensor[(196), float64] */;
    (%118, %119)
  };
  %120() /* ty=(Tensor[(15, 6, 11), float32], Tensor[(196), float64]) */
}

def @func_2082(%var_2069: Tensor[(4, 15, 5), float64]) -> (Tensor[(4, 15, 5), float64],) {
  %121 = cast(%var_2069, dtype="float64") /* ty=Tensor[(4, 15, 5), float64] */;
  %122 = log(%121) /* ty=Tensor[(4, 15, 5), float64] */;
  (%122,)
}

def @func_6733(%var_6731: Tensor[(7, 2, 16), float32], %var_6732: Tensor[(455), int16]) -> (Tensor[(7, 2, 16), float32], Tensor[(455), float32]) {
  %136 = fn (%var_6706: Tensor[(7, 2, 16), float32], %var_6720: Tensor[(455), int16]) -> (Tensor[(7, 2, 16), float32], Tensor[(455), float32]) {
    %123 = cast(%var_6706, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %124 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(7, 2, 16), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %125 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 2, 16), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 16), float32] */;
    %126 = dyn.reshape(%123, %124, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %127 = cast(%var_6720, dtype="int16") /* ty=Tensor[(455), int16] */;
    %128 = reshape(%127, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), int16] */;
    %129 = @func_4407(%128) /* ty=Tensor[(5, 13, 7), float32] */;
    %130 = cast(%129, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
    %131 = shape_of(%var_6720, dtype="int32") /* ty=Tensor[(1), int32] */;
    %132 = cast(%var_6720, dtype="float32") /* ty=Tensor[(455), float32] */;
    %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?), float32] */;
    %134 = mod(%125, %126) /* ty=Tensor[(7, 2, 16), float32] */;
    %135 = floor_divide(%132, %133) /* ty=Tensor[(455), float32] */;
    (%134, %135)
  };
  %136(%var_6731, %var_6732) /* ty=(Tensor[(7, 2, 16), float32], Tensor[(455), float32]) */
}

def @func_6466() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  @func_6464() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */
}

def @func_3192(%var_3190: bool, %var_3191: Tensor[(5, 2, 7), bool]) -> Tensor[(5, 2, 7), bool] {
  %139 = fn (%var_3175: bool, %var_3176: Tensor[(5, 2, 7), bool]) -> Tensor[(5, 2, 7), bool] {
    %137 = cast(%var_3175, dtype="bool") /* ty=bool */;
    %138 = cast(%var_3176, dtype="bool") /* ty=Tensor[(5, 2, 7), bool] */;
    logical_or(%137, %138) /* ty=Tensor[(5, 2, 7), bool] */
  };
  %139(%var_3190, %var_3191) /* ty=Tensor[(5, 2, 7), bool] */
}

def @func_7402() -> (Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32]) {
  %150 = fn () -> (Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32]) {
    %140 = @func_5872() /* ty=(Tensor[(14, 2, 7), float32],) */;
    %141 = %140.0;
    %142 = @func_6972() /* ty=(Tensor[(196), float64], Tensor[(196), float64], uint64, Tensor[(14, 2, 7), bool], Tensor[(14, 2, 7), float32]) */;
    %143 = %142.1;
    %144 = cast(%143, dtype="float32") /* ty=Tensor[(196), float32] */;
    %145 = shape_of(%141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %146 = cast(%141, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
    %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %148 = maximum(%146, %147) /* ty=Tensor[(14, 2, 7), float32] */;
    %149 = @func_5378() /* ty=Tensor[(14, 2, 7), float32] */;
    (%148, %149)
  };
  %150() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32]) */
}

def @func_7651() -> (Tensor[(196), float64],) {
  @func_7649() /* ty=(Tensor[(196), float64],) */
}

def @func_5645(%var_5643: Tensor[(1100), float32], %var_5644: Tensor[(8, 2, 5), float64]) -> (uint64, Tensor[(196), uint64], Tensor[(64), float64], Tensor[(1100), float32], Tensor[(240), uint64], Tensor[(1100), float32], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool]) {
  %190 = fn (%var_5605: Tensor[(1100), float32], %var_5619: Tensor[(8, 2, 5), float64]) -> (uint64, Tensor[(196), uint64], Tensor[(64), float64], Tensor[(1100), float32], Tensor[(240), uint64], Tensor[(1100), float32], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool]) {
    %151 = cast(meta[relay.Constant][10] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %152 = reshape(%151, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %153 = @func_3966(%152) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) */;
    %154 = cast(meta[relay.Constant][11] /* ty=Tensor[(240), uint64] */, dtype="uint64") /* ty=Tensor[(240), uint64] */;
    %155 = @func_5418() /* ty=uint64 */;
    %156 = cast(%155, dtype="uint64") /* ty=uint64 */;
    %157 = cast(%var_5605, dtype="float32") /* ty=Tensor[(1100), float32] */;
    %158 = reshape(%154, newshape=[1, 240]) /* ty=Tensor[(1, 240), uint64] */;
    %159 = reshape(%156, newshape=[]) /* ty=uint64 */;
    %160 = reshape(%157, newshape=[1100]) /* ty=Tensor[(1100), float32] */;
    %161 = @func_4135(%158, %159, %160) /* ty=(Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) */;
    %162 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
    %163 = %162.0;
    %164 = cast(%163, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
    %165 = tan(%164) /* ty=Tensor[(8, 2, 5), float64] */;
    %166 = cast(%var_5619, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(%165, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %170 = cast(%163, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
    %171 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%165, dtype="uint8") /* ty=Tensor[(8, 2, 5), uint8] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %174 = right_shift(%172, %173) /* ty=Tensor[(8, 2, 5), uint8] */;
    %175 = cast(%var_5619, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
    %177 = cast(%174, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %179 = cast(%165, dtype="float32") /* ty=Tensor[(8, 2, 5), float32] */;
    %180 = log(%179) /* ty=Tensor[(8, 2, 5), float32] */;
    %181 = cast(%174, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %182 = shape_of(%180, dtype="int32") /* ty=Tensor[(3), int32] */;
    %183 = cast(%180, dtype="bool") /* ty=Tensor[(8, 2, 5), bool] */;
    %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %185 = %153.1;
    %186 = %161.6;
    %187 = logical_and(%168, %169) /* ty=Tensor[(8, 2, 5), bool] */;
    %188 = less_equal(%177, %178) /* ty=Tensor[(8, 2, 5), bool] */;
    %189 = not_equal(%183, %184) /* ty=Tensor[(8, 2, 5), bool] */;
    (%155, %185, meta[relay.Constant][10] /* ty=Tensor[(64), float64] */, %186, meta[relay.Constant][11] /* ty=Tensor[(240), uint64] */, %var_5605, %187, %188, %189)
  };
  %190(%var_5643, %var_5644) /* ty=(uint64, Tensor[(196), uint64], Tensor[(64), float64], Tensor[(1100), float32], Tensor[(240), uint64], Tensor[(1100), float32], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool]) */
}

def @func_2898(%var_2870: Tensor[(8, 6, 5), uint64]) -> (Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) {
  %191 = cast(%var_2870, dtype="uint64") /* ty=Tensor[(8, 6, 5), uint64] */;
  %192 = shape_of(meta[relay.Constant][12] /* ty=Tensor[(8, 6, 5), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 6, 5), uint64] */, dtype="uint64") /* ty=Tensor[(8, 6, 5), uint64] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %195 = cast(meta[relay.Constant][12] /* ty=Tensor[(8, 6, 5), uint64] */, dtype="float64") /* ty=Tensor[(8, 6, 5), float64] */;
  %196 = shape_of(%var_2870, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_2870, dtype="float64") /* ty=Tensor[(8, 6, 5), float64] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %199 = cast(%var_2870, dtype="float64") /* ty=Tensor[(8, 6, 5), float64] */;
  %200 = subtract(%193, %194) /* ty=Tensor[(8, 6, 5), uint64] */;
  %201 = floor_mod(%197, %198) /* ty=Tensor[(8, 6, 5), float64] */;
  %202 = tan(%199) /* ty=Tensor[(8, 6, 5), float64] */;
  (%200, %201, %202)
}

def @func_6143(%var_6102: Tensor[(1456), uint64], %var_6138: Tensor[(28), float32]) -> (Tensor[(14, 2, 7), float32], Tensor[(8, 14, 13), int64], uint64, Tensor[(1456), uint64], Tensor[(8, 9, 4), int32], Tensor[(28), float32]) {
  %203 = cast(meta[relay.Constant][13] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %204 = cast(%var_6102, dtype="uint64") /* ty=Tensor[(1456), uint64] */;
  %205 = reshape(%203, newshape=[]) /* ty=uint64 */;
  %206 = reshape(%204, newshape=[8, 14, 13]) /* ty=Tensor[(8, 14, 13), uint64] */;
  %207 = @func_3002(%205, %206) /* ty=(Tensor[(8, 14, 13), int64], Tensor[(10, 13, 5), float32], Tensor[(8, 14, 13), float32], Tensor[(13, 8, 14), float64]) */;
  %208 = cast(%var_6138, dtype="float32") /* ty=Tensor[(28), float32] */;
  %209 = reshape(%208, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), float32] */;
  %210 = @func_971(%209) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */;
  %211 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %212 = %207.0;
  %213 = %210.1;
  (%211, %212, meta[relay.Constant][13] /* ty=uint64 */, %var_6102, %213, %var_6138)
}

def @func_5420() -> uint64 {
  @func_5418() /* ty=uint64 */
}

def @func_2298(%var_2275: Tensor[(11, 10, 10), float32]) -> (Tensor[(1, 4, 13), float64], Tensor[(52, 1), float64], Tensor[(11, 10, 10), float64]) {
  %214 = cast(meta[relay.Constant][14] /* ty=Tensor[(52, 1), float64] */, dtype="float64") /* ty=Tensor[(52, 1), float64] */;
  %215 = reshape(%214, newshape=[1, 4, 13]) /* ty=Tensor[(1, 4, 13), float64] */;
  %216 = cast(%var_2275, dtype="float32") /* ty=Tensor[(11, 10, 10), float32] */;
  %217 = acos(%216) /* ty=Tensor[(11, 10, 10), float32] */;
  %218 = cast(%217, dtype="float64") /* ty=Tensor[(11, 10, 10), float64] */;
  %219 = shape_of(%var_2275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %220 = cast(%var_2275, dtype="float64") /* ty=Tensor[(11, 10, 10), float64] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %222 = @func_1980(%215) /* ty=Tensor[(1, 4, 13), float64] */;
  %223 = floor_mod(%220, %221) /* ty=Tensor[(11, 10, 10), float64] */;
  (%222, meta[relay.Constant][14] /* ty=Tensor[(52, 1), float64] */, %223)
}

def @func_4407(%var_4402: Tensor[(5, 13, 7), int16]) -> Tensor[(5, 13, 7), float32] {
  %224 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %225 = %224.2;
  %226 = cast(%var_4402, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %227 = shape_of(%225, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%225, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%228, %229) /* ty=Tensor[(5, 13, 7), float32] */
}

def @func_6818() -> Tensor[(196), float64] {
  @func_6816() /* ty=Tensor[(196), float64] */
}

def @func_7166() -> (Tensor[(9, 2, 14), uint16],) {
  %230 = cast(meta[relay.Constant][16] /* ty=Tensor[(9, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 14), uint16] */;
  %231 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(9, 2, 14), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 2, 14), uint16] */, dtype="uint16") /* ty=Tensor[(9, 2, 14), uint16] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %234 = bitwise_or(%232, %233) /* ty=Tensor[(9, 2, 14), uint16] */;
  (%234,)
}

def @func_1980(%var_1977: Tensor[(1, 4, 13), float64]) -> Tensor[(1, 4, 13), float64] {
  %235 = cast(%var_1977, dtype="float64") /* ty=Tensor[(1, 4, 13), float64] */;
  erf(%235) /* ty=Tensor[(1, 4, 13), float64] */
}

def @func_5077(%var_5074: Tensor[(15, 13, 15), int64], %var_5075: Tensor[(15, 13, 15), int64], %var_5076: Tensor[(400), int16]) -> (Tensor[(15, 13, 15), bool], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) {
  @func_5072(%var_5074, %var_5075, %var_5076) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */
}

def @func_5264(%var_5261: Tensor[(2, 4, 11), float64], %var_5262: Tensor[(2, 4, 11), float64], %var_5263: Tensor[(2, 168), uint16]) -> (Tensor[(2, 4, 11), float64], Tensor[(7, 16, 3), uint16], Tensor[(2, 168), uint16]) {
  @func_5259(%var_5261, %var_5262, %var_5263) /* ty=(Tensor[(2, 4, 11), float64], Tensor[(7, 16, 3), uint16], Tensor[(2, 168), uint16]) */
}

def @func_6801() -> (Tensor[(196), float64],) {
  @func_6799() /* ty=(Tensor[(196), float64],) */
}

def @func_7168() -> (Tensor[(9, 2, 14), uint16],) {
  @func_7166() /* ty=(Tensor[(9, 2, 14), uint16],) */
}

def @func_7302() -> (Tensor[(196), float64],) {
  %236 = @func_6816() /* ty=Tensor[(196), float64] */;
  (%236,)
}

def @func_7807() -> (Tensor[(330), uint16], Tensor[(14, 2, 7), float32]) {
  %246 = fn () -> (Tensor[(330), uint16], Tensor[(14, 2, 7), float32]) {
    %237 = @func_7039() /* ty=(Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) */;
    %238 = %237.0;
    %239 = cast(meta[relay.Constant][17] /* ty=Tensor[(330), uint32] */, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %240 = shape_of(%238, dtype="int32") /* ty=Tensor[(1), int32] */;
    %241 = cast(%238, dtype="uint16") /* ty=Tensor[(330), uint16] */;
    %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?), uint16] */;
    %243 = @func_4841() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) */;
    %244 = bitwise_and(%241, %242) /* ty=Tensor[(330), uint16] */;
    %245 = %243.0;
    (%244, %245)
  };
  %246() /* ty=(Tensor[(330), uint16], Tensor[(14, 2, 7), float32]) */
}

def @func_3864() -> (Tensor[(196), float64],) {
  %247 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %248 = %247.1;
  %249 = cast(%248, dtype="float64") /* ty=Tensor[(196), float64] */;
  %250 = log10(%249) /* ty=Tensor[(196), float64] */;
  (%250,)
}

def @func_3790() -> (Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) {
  %251 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %252 = cast(meta[relay.Constant][19] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
  %253 = reshape(%251, newshape=[]) /* ty=uint64 */;
  %254 = reshape(%252, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %255 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 13, 7), float64] */, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %256 = rsqrt(%255) /* ty=Tensor[(5, 13, 7), float64] */;
  %257 = cast(%256, dtype="float64") /* ty=Tensor[(5, 13, 7), float64] */;
  %258 = sqrt(%257) /* ty=Tensor[(5, 13, 7), float64] */;
  %259 = cast(%258, dtype="float32") /* ty=Tensor[(5, 13, 7), float32] */;
  %260 = tan(%259) /* ty=Tensor[(5, 13, 7), float32] */;
  %261 = cast(%260, dtype="int16") /* ty=Tensor[(5, 13, 7), int16] */;
  %262 = cast(meta[relay.Constant][18] /* ty=uint64 */, dtype="int16") /* ty=int16 */;
  %263 = @func_2431(%253, %254) /* ty=Tensor[(14, 2, 7), bool] */;
  %264 = logical_xor(%261, %262) /* ty=Tensor[(5, 13, 7), int16] */;
  (%263, meta[relay.Constant][19] /* ty=Tensor[(196), uint64] */, %264)
}

def @func_4955(%var_4953: Tensor[(13, 11, 13), uint64]) -> (uint64, Tensor[(13, 11, 13), bool], Tensor[(14, 2, 7), bool], Tensor[(196), uint8]) {
  @func_4952(%var_4953) /* ty=(uint64, Tensor[(13, 11, 13), bool], Tensor[(14, 2, 7), bool], Tensor[(196), uint8]) */
}

def @func_5864() -> Tensor[(14, 2, 7), float32] {
  %267 = fn () -> Tensor[(14, 2, 7), float32] {
    %265 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
    %266 = cast(%265, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
    exp(%266) /* ty=Tensor[(14, 2, 7), float32] */
  };
  %267() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_5901() -> Tensor[(196), float64] {
  @func_5899() /* ty=Tensor[(196), float64] */
}

def @func_4139(%var_4136: Tensor[(1, 240), uint64], %var_4137: uint64, %var_4138: Tensor[(1100), float32]) -> (Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) {
  %288 = fn (%var_4115: Tensor[(1, 240), uint64], %var_4121: uint64, %var_4126: Tensor[(1100), float32]) -> (Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) {
    %268 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
    %269 = %268.1;
    %270 = cast(meta[relay.Constant][21] /* ty=Tensor[(196), uint64] */, dtype="bool") /* ty=Tensor[(196), bool] */;
    %271 = shape_of(%269, dtype="int32") /* ty=Tensor[(1), int32] */;
    %272 = cast(%269, dtype="bool") /* ty=Tensor[(196), bool] */;
    %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?), bool] */;
    %274 = cast(%var_4115, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
    %275 = reshape(%274, newshape=[8, 6, 5]) /* ty=Tensor[(8, 6, 5), uint64] */;
    %276 = @func_2898(%275) /* ty=(Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) */;
    %277 = cast(%var_4121, dtype="uint64") /* ty=uint64 */;
    %278 = cast(%269, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %279 = reshape(%277, newshape=[]) /* ty=uint64 */;
    %280 = reshape(%278, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
    %281 = cast(%var_4126, dtype="float32") /* ty=Tensor[(1100), float32] */;
    %282 = reshape(%281, newshape=[11, 10, 10]) /* ty=Tensor[(11, 10, 10), float32] */;
    %283 = @func_2298(%282) /* ty=(Tensor[(1, 4, 13), float64], Tensor[(52, 1), float64], Tensor[(11, 10, 10), float64]) */;
    %284 = logical_or(%272, %273) /* ty=Tensor[(196), bool] */;
    %285 = %276.2;
    %286 = @func_2431(%279, %280) /* ty=Tensor[(14, 2, 7), bool] */;
    %287 = %283.1;
    (%284, %285, %var_4115, %286, %var_4121, %287, %var_4126)
  };
  %288(%var_4136, %var_4137, %var_4138) /* ty=(Tensor[(196), bool], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(14, 2, 7), bool], uint64, Tensor[(52, 1), float64], Tensor[(1100), float32]) */
}

def @func_2861(%var_2860: float32) -> (Tensor[(10, 13, 5), float32],) {
  %292 = fn (%var_2853: float32) -> (Tensor[(10, 13, 5), float32],) {
    %289 = cast(%var_2853, dtype="float32") /* ty=float32 */;
    %290 = cast(meta[relay.Constant][22] /* ty=Tensor[(10, 13, 5), float32] */, dtype="float32") /* ty=Tensor[(10, 13, 5), float32] */;
    %291 = divide(%289, %290) /* ty=Tensor[(10, 13, 5), float32] */;
    (%291,)
  };
  %292(%var_2860) /* ty=(Tensor[(10, 13, 5), float32],) */
}

def @func_6390(%var_6388: Tensor[(6, 1, 6), uint8], %var_6389: Tensor[(6, 3, 6), uint8]) -> Tensor[(6, 3, 6), float64] {
  %297 = fn (%var_6373: Tensor[(6, 1, 6), uint8], %var_6374: Tensor[(6, 3, 6), uint8]) -> Tensor[(6, 3, 6), float64] {
    %293 = cast(%var_6373, dtype="uint8") /* ty=Tensor[(6, 1, 6), uint8] */;
    %294 = cast(%var_6374, dtype="uint8") /* ty=Tensor[(6, 3, 6), uint8] */;
    %295 = minimum(%293, %294) /* ty=Tensor[(6, 3, 6), uint8] */;
    %296 = cast(%295, dtype="float64") /* ty=Tensor[(6, 3, 6), float64] */;
    log2(%296) /* ty=Tensor[(6, 3, 6), float64] */
  };
  %297(%var_6388, %var_6389) /* ty=Tensor[(6, 3, 6), float64] */
}

def @func_4873() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */
}

def @func_7244(%var_7241: Tensor[(1, 240), uint64], %var_7242: Tensor[(245), float64], %var_7243: Tensor[(650), uint16]) -> (Tensor[(8, 2, 5), float32], Tensor[(330), float64], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(650), uint16]) {
  @func_7239(%var_7241, %var_7242, %var_7243) /* ty=(Tensor[(8, 2, 5), float32], Tensor[(330), float64], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(650), uint16]) */
}

def @func_1289(%var_1276: Tensor[(245), float64]) -> (Tensor[(16, 6, 8), float64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(8, 9, 4), int32]) {
  %298 = cast(meta[relay.Constant][23] /* ty=Tensor[(16, 6, 8), float64] */, dtype="float64") /* ty=Tensor[(16, 6, 8), float64] */;
  %299 = cast(%var_1276, dtype="float64") /* ty=Tensor[(245), float64] */;
  %300 = reshape(%299, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), float64] */;
  %301 = @func_1064(%300) /* ty=(Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) */;
  %302 = %301.2;
  %303 = cast(%302, dtype="float32") /* ty=Tensor[(28), float32] */;
  %304 = reshape(%303, newshape=[2, 1, 14]) /* ty=Tensor[(2, 1, 14), float32] */;
  %305 = @func_971(%304) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */;
  %306 = exp(%298) /* ty=Tensor[(16, 6, 8), float64] */;
  %307 = %305.1;
  (%306, %302, %var_1276, %307)
}

def @func_4254() -> Tensor[(14, 2, 7), float32] {
  @func_4215() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_5011() -> (Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) {
  %316 = fn () -> (Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) {
    %308 = @func_3864() /* ty=(Tensor[(196), float64],) */;
    %309 = cast(meta[relay.Constant][24] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %310 = reshape(%309, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
    %311 = cast(meta[relay.Constant][25] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %312 = reshape(%311, newshape=[]) /* ty=uint64 */;
    %313 = %308.0;
    %314 = @func_2690(%310) /* ty=Tensor[(13, 8, 14), float64] */;
    %315 = @func_1586(%312) /* ty=Tensor[(13, 11, 13), uint64] */;
    (%313, %314, meta[relay.Constant][24] /* ty=Tensor[(1456), float64] */, %315, meta[relay.Constant][25] /* ty=uint64 */)
  };
  %316() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */
}

def @func_4896() -> Tensor[(14, 2, 7), float32] {
  %317 = fn () -> Tensor[(14, 2, 7), float32] {
    @func_4254() /* ty=Tensor[(14, 2, 7), float32] */
  };
  %317() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_5137() -> (Tensor[(196), float64], Tensor[(196), uint32]) {
  %324 = fn () -> (Tensor[(196), float64], Tensor[(196), uint32]) {
    %318 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
    %319 = %318.0;
    %320 = cast(%319, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %321 = reshape(%320, newshape=[196]) /* ty=Tensor[(196), uint64] */;
    %322 = @func_4701(%321) /* ty=(Tensor[(196), uint32],) */;
    %323 = %322.0;
    (%319, %323)
  };
  %324() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */
}

def @func_4804() -> (Tensor[(196), uint64],) {
  %327 = fn () -> (Tensor[(196), uint64],) {
    %325 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
    %326 = %325.0;
    (%326,)
  };
  %327() /* ty=(Tensor[(196), uint64],) */
}

def @func_4447() -> (Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) {
  %335 = fn () -> (Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) {
    %328 = @func_3864() /* ty=(Tensor[(196), float64],) */;
    %329 = cast(meta[relay.Constant][26] /* ty=Tensor[(65, 7), int16] */, dtype="int16") /* ty=Tensor[(65, 7), int16] */;
    %330 = reshape(%329, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), int16] */;
    %331 = cast(meta[relay.Constant][26] /* ty=Tensor[(65, 7), int16] */, dtype="float32") /* ty=Tensor[(65, 7), float32] */;
    %332 = %328.0;
    %333 = @func_4407(%330) /* ty=Tensor[(5, 13, 7), float32] */;
    %334 = sqrt(%331) /* ty=Tensor[(65, 7), float32] */;
    (%332, %333, %334)
  };
  %335() /* ty=(Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) */
}

def @func_5259(%var_5245: Tensor[(2, 4, 11), float64], %var_5246: Tensor[(2, 4, 11), float64], %var_5251: Tensor[(2, 168), uint16]) -> (Tensor[(2, 4, 11), float64], Tensor[(7, 16, 3), uint16], Tensor[(2, 168), uint16]) {
  %336 = cast(%var_5246, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %337 = shape_of(%var_5245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%var_5245, dtype="float64") /* ty=Tensor[(2, 4, 11), float64] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %340 = cast(%var_5251, dtype="uint16") /* ty=Tensor[(2, 168), uint16] */;
  %341 = cast(%var_5251, dtype="uint16") /* ty=Tensor[(2, 168), uint16] */;
  %342 = reshape(%340, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
  %343 = reshape(%341, newshape=[7, 16, 3]) /* ty=Tensor[(7, 16, 3), uint16] */;
  %344 = @func_3710(%342, %343) /* ty=(Tensor[(7, 16, 3), uint16],) */;
  %345 = floor_mod(%338, %339) /* ty=Tensor[(2, 4, 11), float64] */;
  %346 = %344.0;
  (%345, %346, %var_5251)
}

def @func_7040() -> (Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) {
  %362 = fn () -> (Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) {
    %347 = @func_6220() /* ty=(Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) */;
    %348 = %347.2;
    %349 = cast(%348, dtype="float64") /* ty=Tensor[(330), float64] */;
    %350 = sqrt(%349) /* ty=Tensor[(330), float64] */;
    %351 = cast(meta[relay.Constant][27] /* ty=Tensor[(330), float64] */, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %352 = shape_of(%350, dtype="int32") /* ty=Tensor[(1), int32] */;
    %353 = cast(%350, dtype="uint32") /* ty=Tensor[(330), uint32] */;
    %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %355 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
    %356 = cast(meta[relay.Constant][28] /* ty=Tensor[(64), float64] */, dtype="float64") /* ty=Tensor[(64), float64] */;
    %357 = reshape(%356, newshape=[4, 4, 4]) /* ty=Tensor[(4, 4, 4), float64] */;
    %358 = @func_3966(%357) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) */;
    %359 = subtract(%353, %354) /* ty=Tensor[(330), uint32] */;
    %360 = %355.0;
    %361 = %358.1;
    (%359, %360, %361, meta[relay.Constant][28] /* ty=Tensor[(64), float64] */)
  };
  %362() /* ty=(Tensor[(330), uint32], Tensor[(196), uint64], Tensor[(196), uint64], Tensor[(64), float64]) */
}

def @func_6248() -> (Tensor[(196), float64],) {
  %365 = fn () -> (Tensor[(196), float64],) {
    %363 = @func_5136() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */;
    %364 = %363.0;
    (%364,)
  };
  %365() /* ty=(Tensor[(196), float64],) */
}

def @func_7075() -> (Tensor[(196), float64],) {
  %366 = @func_6016() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */;
  %367 = %366.1;
  %368 = cast(%367, dtype="float64") /* ty=Tensor[(196), float64] */;
  %369 = asinh(%368) /* ty=Tensor[(196), float64] */;
  (%369,)
}

def @func_8021() -> (Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(196), uint16]) {
  @func_8019() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(196), uint16]) */
}

def @func_7732(%var_7731: Tensor[(300), float64]) -> (Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(4, 15, 5), float64], Tensor[(300), float64], Tensor[(196), float64], Tensor[(196), float64]) {
  %381 = fn (%var_7709: Tensor[(300), float64]) -> (Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(4, 15, 5), float64], Tensor[(300), float64], Tensor[(196), float64], Tensor[(196), float64]) {
    %370 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
    %371 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
    %372 = cast(%var_7709, dtype="float64") /* ty=Tensor[(300), float64] */;
    %373 = reshape(%372, newshape=[4, 15, 5]) /* ty=Tensor[(4, 15, 5), float64] */;
    %374 = @func_2082(%373) /* ty=(Tensor[(4, 15, 5), float64],) */;
    %375 = @func_7649() /* ty=(Tensor[(196), float64],) */;
    %376 = %370.1;
    %377 = %371.1;
    %378 = %374.0;
    %379 = @func_6056() /* ty=Tensor[(196), float64] */;
    %380 = %375.0;
    (%376, %377, %378, %var_7709, %379, %380)
  };
  %381(%var_7731) /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(4, 15, 5), float64], Tensor[(300), float64], Tensor[(196), float64], Tensor[(196), float64]) */
}

def @func_5760(%var_5758: Tensor[(7, 15, 11), uint64], %var_5759: Tensor[(7, 15, 11), uint64]) -> (Tensor[(7, 15, 11), uint64], Tensor[(196), uint32], Tensor[(196), uint64], Tensor[(7, 15, 11), float64]) {
  %398 = fn (%var_5732: Tensor[(7, 15, 11), uint64], %var_5733: Tensor[(7, 15, 11), uint64]) -> (Tensor[(7, 15, 11), uint64], Tensor[(196), uint32], Tensor[(196), uint64], Tensor[(7, 15, 11), float64]) {
    %382 = cast(%var_5733, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
    %383 = shape_of(%var_5732, dtype="int32") /* ty=Tensor[(3), int32] */;
    %384 = cast(%var_5732, dtype="uint64") /* ty=Tensor[(7, 15, 11), uint64] */;
    %385 = dyn.reshape(%382, %383, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %386 = cast(meta[relay.Constant][29] /* ty=Tensor[(196), uint64] */, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %387 = reshape(%386, newshape=[196]) /* ty=Tensor[(196), uint64] */;
    %388 = @func_4701(%387) /* ty=(Tensor[(196), uint32],) */;
    %389 = cast(%var_5732, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
    %390 = acosh(%389) /* ty=Tensor[(7, 15, 11), float64] */;
    %391 = cast(%var_5732, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
    %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
    %393 = cast(%390, dtype="float64") /* ty=Tensor[(7, 15, 11), float64] */;
    %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %395 = right_shift(%384, %385) /* ty=Tensor[(7, 15, 11), uint64] */;
    %396 = %388.0;
    %397 = divide(%393, %394) /* ty=Tensor[(7, 15, 11), float64] */;
    (%395, %396, meta[relay.Constant][29] /* ty=Tensor[(196), uint64] */, %397)
  };
  %398(%var_5758, %var_5759) /* ty=(Tensor[(7, 15, 11), uint64], Tensor[(196), uint32], Tensor[(196), uint64], Tensor[(7, 15, 11), float64]) */
}

def @func_6972() -> (Tensor[(196), float64], Tensor[(196), float64], uint64, Tensor[(14, 2, 7), bool], Tensor[(14, 2, 7), float32]) {
  %399 = @func_4446() /* ty=(Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) */;
  %400 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %401 = reshape(%400, newshape=[]) /* ty=uint64 */;
  %402 = @func_4197(%401) /* ty=(Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) */;
  %403 = cast(meta[relay.Constant][30] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %404 = reshape(%403, newshape=[]) /* ty=uint64 */;
  %405 = @func_4197(%404) /* ty=(Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) */;
  %406 = %399.0;
  %407 = %402.0;
  %408 = %405.1;
  %409 = @func_5863() /* ty=Tensor[(14, 2, 7), float32] */;
  (%406, %407, meta[relay.Constant][30] /* ty=uint64 */, %408, %409)
}

def @func_6357() -> (Tensor[(196), float64], Tensor[(196), float64], Tensor[(1, 4, 8), float64], Tensor[(32), float64]) {
  %410 = @func_5136() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */;
  %411 = @func_6016() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */;
  %412 = cast(meta[relay.Constant][31] /* ty=Tensor[(32), float64] */, dtype="float64") /* ty=Tensor[(32), float64] */;
  %413 = reshape(%412, newshape=[1, 4, 8]) /* ty=Tensor[(1, 4, 8), float64] */;
  %414 = @func_5286(%413) /* ty=(Tensor[(1, 4, 8), float64],) */;
  %415 = %410.0;
  %416 = %411.0;
  %417 = %414.0;
  (%415, %416, %417, meta[relay.Constant][31] /* ty=Tensor[(32), float64] */)
}

def @func_7923(%var_7921: Tensor[(8, 5, 10), int16]) -> (Tensor[(196), float64], Tensor[(8, 5, 10), uint32]) {
  @func_7920(%var_7921) /* ty=(Tensor[(196), float64], Tensor[(8, 5, 10), uint32]) */
}

def @func_6222() -> (Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) {
  @func_6220() /* ty=(Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) */
}

def @func_6816() -> Tensor[(196), float64] {
  %418 = @func_6596() /* ty=(Tensor[(196), float64],) */;
  %418.0
}

def @func_6494(%var_6492: Tensor[(12, 12, 2), bool]) -> (Tensor[(12, 12, 2), bool], Tensor[(12, 12, 2), bool], Tensor[(13, 8, 14), float64]) {
  @func_6491(%var_6492) /* ty=(Tensor[(12, 12, 2), bool], Tensor[(12, 12, 2), bool], Tensor[(13, 8, 14), float64]) */
}

def @func_3710(%var_3703: Tensor[(7, 16, 3), uint16], %var_3704: Tensor[(7, 16, 3), uint16]) -> (Tensor[(7, 16, 3), uint16],) {
  %419 = cast(%var_3704, dtype="uint16") /* ty=Tensor[(7, 16, 3), uint16] */;
  %420 = shape_of(%var_3703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %421 = cast(%var_3703, dtype="uint16") /* ty=Tensor[(7, 16, 3), uint16] */;
  %422 = dyn.reshape(%419, %420, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %423 = add(%421, %422) /* ty=Tensor[(7, 16, 3), uint16] */;
  (%423,)
}

def @func_4952(%var_4931: Tensor[(13, 11, 13), uint64]) -> (uint64, Tensor[(13, 11, 13), bool], Tensor[(14, 2, 7), bool], Tensor[(196), uint8]) {
  %424 = cast(meta[relay.Constant][32] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %425 = reshape(%424, newshape=[]) /* ty=uint64 */;
  %426 = @func_1586(%425) /* ty=Tensor[(13, 11, 13), uint64] */;
  %427 = cast(%var_4931, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  %428 = shape_of(%426, dtype="int32") /* ty=Tensor[(3), int32] */;
  %429 = cast(%426, dtype="bool") /* ty=Tensor[(13, 11, 13), bool] */;
  %430 = dyn.reshape(%427, %428, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %431 = @func_4275() /* ty=(Tensor[(14, 2, 7), bool],) */;
  %432 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %433 = %432.0;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(196), float32] */;
  %435 = exp(%434) /* ty=Tensor[(196), float32] */;
  %436 = cast(%433, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %437 = shape_of(%435, dtype="int32") /* ty=Tensor[(1), int32] */;
  %438 = cast(%435, dtype="uint8") /* ty=Tensor[(196), uint8] */;
  %439 = dyn.reshape(%436, %437, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %440 = logical_and(%429, %430) /* ty=Tensor[(13, 11, 13), bool] */;
  %441 = %431.0;
  %442 = logical_xor(%438, %439) /* ty=Tensor[(196), uint8] */;
  (meta[relay.Constant][32] /* ty=uint64 */, %440, %441, %442)
}

def @func_4520(%var_4476: Tensor[(8, 36), int32], %var_4513: Tensor[(8, 36), int32]) -> (Tensor[(400), int16], Tensor[(8, 9, 4), int32], Tensor[(120), float32], Tensor[(14, 2, 7), bool], uint64, Tensor[(98, 2), uint64], Tensor[(8, 36), bool]) {
  %443 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %444 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %445 = cast(meta[relay.Constant][33] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %446 = cast(%var_4476, dtype="int32") /* ty=Tensor[(8, 36), int32] */;
  %447 = reshape(%444, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), float32] */;
  %448 = reshape(%445, newshape=[3, 10, 4]) /* ty=Tensor[(3, 10, 4), float32] */;
  %449 = reshape(%446, newshape=[288]) /* ty=Tensor[(288), int32] */;
  %450 = @func_1906(%447, %448, %449) /* ty=(Tensor[(8, 9, 4), int32], Tensor[(288), int32], Tensor[(3, 10, 4), bool]) */;
  %451 = cast(meta[relay.Constant][34] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %452 = cast(meta[relay.Constant][35] /* ty=Tensor[(98, 2), uint64] */, dtype="uint64") /* ty=Tensor[(98, 2), uint64] */;
  %453 = reshape(%451, newshape=[]) /* ty=uint64 */;
  %454 = reshape(%452, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
  %455 = cast(%var_4513, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
  %456 = shape_of(%var_4476, dtype="int32") /* ty=Tensor[(2), int32] */;
  %457 = cast(%var_4476, dtype="bool") /* ty=Tensor[(8, 36), bool] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %459 = %443.2;
  %460 = %450.0;
  %461 = @func_2431(%453, %454) /* ty=Tensor[(14, 2, 7), bool] */;
  %462 = greater_equal(%457, %458) /* ty=Tensor[(8, 36), bool] */;
  (%459, %460, meta[relay.Constant][33] /* ty=Tensor[(120), float32] */, %461, meta[relay.Constant][34] /* ty=uint64 */, meta[relay.Constant][35] /* ty=Tensor[(98, 2), uint64] */, %462)
}

def @func_4871() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  %463 = @func_3864() /* ty=(Tensor[(196), float64],) */;
  %464 = @func_4446() /* ty=(Tensor[(196), float64], Tensor[(5, 13, 7), float32], Tensor[(65, 7), float32]) */;
  %465 = %463.0;
  %466 = %464.0;
  (%465, %466)
}

def @func_5029() -> Tensor[(196), float64] {
  %468 = fn () -> Tensor[(196), float64] {
    %467 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
    %467.0
  };
  %468() /* ty=Tensor[(196), float64] */
}

def @func_7565(%var_7564: uint64) -> (Tensor[(8, 2, 5), bool], Tensor[(13, 11, 13), uint64], uint64, Tensor[(1456), float64]) {
  %476 = fn (%var_7540: uint64) -> (Tensor[(8, 2, 5), bool], Tensor[(13, 11, 13), uint64], uint64, Tensor[(1456), float64]) {
    %469 = @func_6016() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(8, 2, 5), bool]) */;
    %470 = cast(%var_7540, dtype="uint64") /* ty=uint64 */;
    %471 = reshape(%470, newshape=[]) /* ty=uint64 */;
    %472 = @func_7113() /* ty=(uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) */;
    %473 = %469.2;
    %474 = @func_1586(%471) /* ty=Tensor[(13, 11, 13), uint64] */;
    %475 = %472.2;
    (%473, %474, %var_7540, %475)
  };
  %476(%var_7564) /* ty=(Tensor[(8, 2, 5), bool], Tensor[(13, 11, 13), uint64], uint64, Tensor[(1456), float64]) */
}

def @func_4524(%var_4522: Tensor[(8, 36), int32], %var_4523: Tensor[(8, 36), int32]) -> (Tensor[(400), int16], Tensor[(8, 9, 4), int32], Tensor[(120), float32], Tensor[(14, 2, 7), bool], uint64, Tensor[(98, 2), uint64], Tensor[(8, 36), bool]) {
  @func_4520(%var_4522, %var_4523) /* ty=(Tensor[(400), int16], Tensor[(8, 9, 4), int32], Tensor[(120), float32], Tensor[(14, 2, 7), bool], uint64, Tensor[(98, 2), uint64], Tensor[(8, 36), bool]) */
}

def @func_7920(%var_7910: Tensor[(8, 5, 10), int16]) -> (Tensor[(196), float64], Tensor[(8, 5, 10), uint32]) {
  %477 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %478 = %477.1;
  %479 = cast(%var_7910, dtype="uint32") /* ty=Tensor[(8, 5, 10), uint32] */;
  %480 = shape_of(%478, dtype="int32") /* ty=Tensor[(3), int32] */;
  %481 = cast(%478, dtype="uint32") /* ty=Tensor[(8, 5, 10), uint32] */;
  %482 = dyn.reshape(%479, %480, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %483 = @func_5899() /* ty=Tensor[(196), float64] */;
  %484 = left_shift(%481, %482) /* ty=Tensor[(8, 5, 10), uint32] */;
  (%483, %484)
}

def @func_5289(%var_5287: Tensor[(1, 4, 8), float64]) -> (Tensor[(1, 4, 8), float64],) {
  @func_5286(%var_5287) /* ty=(Tensor[(1, 4, 8), float64],) */
}

def @func_7239(%var_7230: Tensor[(1, 240), uint64], %var_7236: Tensor[(245), float64], %var_7237: Tensor[(650), uint16]) -> (Tensor[(8, 2, 5), float32], Tensor[(330), float64], Tensor[(8, 6, 5), float64], Tensor[(1, 240), uint64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(650), uint16]) {
  %485 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %486 = @func_6220() /* ty=(Tensor[(8, 2, 5), float32], Tensor[(245), float64], Tensor[(330), float64]) */;
  %487 = cast(%var_7230, dtype="uint64") /* ty=Tensor[(1, 240), uint64] */;
  %488 = reshape(%487, newshape=[8, 6, 5]) /* ty=Tensor[(8, 6, 5), uint64] */;
  %489 = @func_2898(%488) /* ty=(Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) */;
  %490 = cast(%var_7236, dtype="float64") /* ty=Tensor[(245), float64] */;
  %491 = cast(%var_7237, dtype="uint16") /* ty=Tensor[(650), uint16] */;
  %492 = reshape(%490, newshape=[35, 7]) /* ty=Tensor[(35, 7), float64] */;
  %493 = reshape(%491, newshape=[10, 13, 5]) /* ty=Tensor[(10, 13, 5), uint16] */;
  %494 = @func_4780(%492, %493) /* ty=(uint64, Tensor[(10, 13, 5), bool], Tensor[(28), float32], Tensor[(35, 7), float64], Tensor[(14, 2, 7), bool], Tensor[(98, 2), uint64], Tensor[(10, 13, 5), float64]) */;
  %495 = %485.1;
  %496 = %486.2;
  %497 = %489.2;
  %498 = %494.2;
  (%495, %496, %497, %var_7230, %498, %var_7236, %var_7237)
}

def @func_2692(%var_2691: Tensor[(13, 8, 14), float64]) -> Tensor[(13, 8, 14), float64] {
  %500 = fn (%var_2687: Tensor[(13, 8, 14), float64]) -> Tensor[(13, 8, 14), float64] {
    %499 = cast(%var_2687, dtype="float64") /* ty=Tensor[(13, 8, 14), float64] */;
    exp(%499) /* ty=Tensor[(13, 8, 14), float64] */
  };
  %500(%var_2691) /* ty=Tensor[(13, 8, 14), float64] */
}

def @func_3714(%var_3712: Tensor[(7, 16, 3), uint16], %var_3713: Tensor[(7, 16, 3), uint16]) -> (Tensor[(7, 16, 3), uint16],) {
  @func_3710(%var_3712, %var_3713) /* ty=(Tensor[(7, 16, 3), uint16],) */
}

def @func_5460(%var_5458: Tensor[(8, 15, 6), float32]) -> (Tensor[(8, 15, 6), float32], Tensor[(196), uint64]) {
  @func_5457(%var_5458) /* ty=(Tensor[(8, 15, 6), float32], Tensor[(196), uint64]) */
}

def @func_5899() -> Tensor[(196), float64] {
  @func_5028() /* ty=Tensor[(196), float64] */
}

def @func_1983(%var_1981: Tensor[(1, 4, 13), float64]) -> Tensor[(1, 4, 13), float64] {
  @func_1980(%var_1981) /* ty=Tensor[(1, 4, 13), float64] */
}

def @func_4841() -> (Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) {
  %501 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %502 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %503 = %501.1;
  (%502, %503)
}

def @func_3812(%var_3810: Tensor[(8, 5, 10), int16]) -> (Tensor[(8, 5, 10), int16],) {
  @func_3809(%var_3810) /* ty=(Tensor[(8, 5, 10), int16],) */
}

def @func_6669() -> (Tensor[(14, 2, 7), float32],) {
  %510 = fn () -> (Tensor[(14, 2, 7), float32],) {
    %504 = @func_4275() /* ty=(Tensor[(14, 2, 7), bool],) */;
    %505 = %504.0;
    %506 = cast(%505, dtype="float64") /* ty=Tensor[(14, 2, 7), float64] */;
    %507 = atanh(%506) /* ty=Tensor[(14, 2, 7), float64] */;
    %508 = cast(%507, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
    %509 = log2(%508) /* ty=Tensor[(14, 2, 7), float32] */;
    (%509,)
  };
  %510() /* ty=(Tensor[(14, 2, 7), float32],) */
}

def @func_6171() -> (Tensor[(8, 2, 5), float64],) {
  %511 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %512 = %511.0;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
  %514 = exp(%513) /* ty=Tensor[(8, 2, 5), float64] */;
  (%514,)
}

def @func_5978(%var_5976: Tensor[(12, 8, 11), float64]) -> (Tensor[(12, 8, 11), float64], Tensor[(400), int16], Tensor[(400), int16], Tensor[(2925), float32], Tensor[(14, 2, 7), bool]) {
  @func_5975(%var_5976) /* ty=(Tensor[(12, 8, 11), float64], Tensor[(400), int16], Tensor[(400), int16], Tensor[(2925), float32], Tensor[(14, 2, 7), bool]) */
}

def @func_6399() -> Tensor[(196), float64] {
  %516 = fn () -> Tensor[(196), float64] {
    %515 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
    %515.0
  };
  %516() /* ty=Tensor[(196), float64] */
}

def @func_8353(%var_8351: Tensor[(5, 9, 1), float64]) -> (Tensor[(5, 9, 1), float64],) {
  @func_8350(%var_8351) /* ty=(Tensor[(5, 9, 1), float64],) */
}

def @func_5800() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  @func_5798() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */
}

def @func_6359() -> (Tensor[(196), float64], Tensor[(196), float64], Tensor[(1, 4, 8), float64], Tensor[(32), float64]) {
  @func_6357() /* ty=(Tensor[(196), float64], Tensor[(196), float64], Tensor[(1, 4, 8), float64], Tensor[(32), float64]) */
}

def @func_5286(%var_5280: Tensor[(1, 4, 8), float64]) -> (Tensor[(1, 4, 8), float64],) {
  %517 = cast(%var_5280, dtype="float64") /* ty=Tensor[(1, 4, 8), float64] */;
  %518 = rsqrt(%517) /* ty=Tensor[(1, 4, 8), float64] */;
  (%518,)
}

def @func_5874() -> (Tensor[(14, 2, 7), float32],) {
  @func_5872() /* ty=(Tensor[(14, 2, 7), float32],) */
}

def @func_2480(%var_2478: Tensor[(14, 14, 16), float64]) -> Tensor[(14, 14, 16), float64] {
  @func_2477(%var_2478) /* ty=Tensor[(14, 14, 16), float64] */
}

def @func_1588(%var_1587: uint64) -> Tensor[(13, 11, 13), uint64] {
  %521 = fn (%var_1581: uint64) -> Tensor[(13, 11, 13), uint64] {
    %519 = cast(%var_1581, dtype="uint64") /* ty=uint64 */;
    %520 = cast(meta[relay.Constant][36] /* ty=Tensor[(13, 11, 13), uint64] */, dtype="uint64") /* ty=Tensor[(13, 11, 13), uint64] */;
    logical_xor(%519, %520) /* ty=Tensor[(13, 11, 13), uint64] */
  };
  %521(%var_1587) /* ty=Tensor[(13, 11, 13), uint64] */
}

def @func_2085(%var_2083: Tensor[(4, 15, 5), float64]) -> (Tensor[(4, 15, 5), float64],) {
  @func_2082(%var_2083) /* ty=(Tensor[(4, 15, 5), float64],) */
}

def @func_8159(%var_8157: Tensor[(7, 2, 10), float32]) -> (Tensor[(7, 2, 10), float32], Tensor[(5, 13, 7), float32], Tensor[(455), int16], Tensor[(13, 8, 14), float64]) {
  @func_8156(%var_8157) /* ty=(Tensor[(7, 2, 10), float32], Tensor[(5, 13, 7), float32], Tensor[(455), int16], Tensor[(13, 8, 14), float64]) */
}

def @func_2477(%var_2474: Tensor[(14, 14, 16), float64]) -> Tensor[(14, 14, 16), float64] {
  %522 = cast(%var_2474, dtype="float64") /* ty=Tensor[(14, 14, 16), float64] */;
  sqrt(%522) /* ty=Tensor[(14, 14, 16), float64] */
}

def @func_8183() -> (Tensor[(400), int16],) {
  %523 = @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %524 = %523.2;
  (%524,)
}

def @func_7114() -> (uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) {
  %530 = fn () -> (uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) {
    %525 = @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */;
    %526 = cast(meta[relay.Constant][37] /* ty=Tensor[(1456), float64] */, dtype="float64") /* ty=Tensor[(1456), float64] */;
    %527 = reshape(%526, newshape=[13, 8, 14]) /* ty=Tensor[(13, 8, 14), float64] */;
    %528 = %525.3;
    %529 = @func_2690(%527) /* ty=Tensor[(13, 8, 14), float64] */;
    (%528, %529, meta[relay.Constant][37] /* ty=Tensor[(1456), float64] */)
  };
  %530() /* ty=(uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) */
}

def @func_5872() -> (Tensor[(14, 2, 7), float32],) {
  %531 = @func_4254() /* ty=Tensor[(14, 2, 7), float32] */;
  (%531,)
}

def @func_6464() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  %532 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %533 = @func_4718() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */;
  %534 = %532.0;
  %535 = %533.2;
  (%534, %535)
}

def @func_5418() -> uint64 {
  %536 = @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */;
  %536.3
}

def @func_4843() -> (Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) {
  @func_4841() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) */
}

def @func_1630(%var_1629: Tensor[(16, 6, 6), float64]) -> Tensor[(16, 6, 6), float64] {
  %538 = fn (%var_1618: Tensor[(16, 6, 6), float64]) -> Tensor[(16, 6, 6), float64] {
    %537 = cast(%var_1618, dtype="float64") /* ty=Tensor[(16, 6, 6), float64] */;
    asin(%537) /* ty=Tensor[(16, 6, 6), float64] */
  };
  %538(%var_1629) /* ty=Tensor[(16, 6, 6), float64] */
}

def @func_8156(%var_8131: Tensor[(7, 2, 10), float32]) -> (Tensor[(7, 2, 10), float32], Tensor[(5, 13, 7), float32], Tensor[(455), int16], Tensor[(13, 8, 14), float64]) {
  %539 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 2, 10), float32] */, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %540 = shape_of(%var_8131, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%var_8131, dtype="float32") /* ty=Tensor[(7, 2, 10), float32] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %543 = cast(meta[relay.Constant][39] /* ty=Tensor[(455), int16] */, dtype="int16") /* ty=Tensor[(455), int16] */;
  %544 = reshape(%543, newshape=[5, 13, 7]) /* ty=Tensor[(5, 13, 7), int16] */;
  %545 = @func_7113() /* ty=(uint64, Tensor[(13, 8, 14), float64], Tensor[(1456), float64]) */;
  %546 = power(%541, %542) /* ty=Tensor[(7, 2, 10), float32] */;
  %547 = @func_4407(%544) /* ty=Tensor[(5, 13, 7), float32] */;
  %548 = %545.1;
  (%546, %547, meta[relay.Constant][39] /* ty=Tensor[(455), int16] */, %548)
}

def @func_6147(%var_6145: Tensor[(1456), uint64], %var_6146: Tensor[(28), float32]) -> (Tensor[(14, 2, 7), float32], Tensor[(8, 14, 13), int64], uint64, Tensor[(1456), uint64], Tensor[(8, 9, 4), int32], Tensor[(28), float32]) {
  @func_6143(%var_6145, %var_6146) /* ty=(Tensor[(14, 2, 7), float32], Tensor[(8, 14, 13), int64], uint64, Tensor[(1456), uint64], Tensor[(8, 9, 4), int32], Tensor[(28), float32]) */
}

def @func_6799() -> (Tensor[(196), float64],) {
  %549 = @func_6596() /* ty=(Tensor[(196), float64],) */;
  %550 = %549.0;
  (%550,)
}

def @func_5975(%var_5931: Tensor[(12, 8, 11), float64]) -> (Tensor[(12, 8, 11), float64], Tensor[(400), int16], Tensor[(400), int16], Tensor[(2925), float32], Tensor[(14, 2, 7), bool]) {
  %551 = cast(meta[relay.Constant][40] /* ty=Tensor[(12, 8, 11), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %552 = shape_of(%var_5931, dtype="int32") /* ty=Tensor[(3), int32] */;
  %553 = cast(%var_5931, dtype="float64") /* ty=Tensor[(12, 8, 11), float64] */;
  %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %555 = cast(meta[relay.Constant][41] /* ty=Tensor[(2925), int64] */, dtype="int64") /* ty=Tensor[(2925), int64] */;
  %556 = cast(meta[relay.Constant][41] /* ty=Tensor[(2925), int64] */, dtype="int64") /* ty=Tensor[(2925), int64] */;
  %557 = cast(meta[relay.Constant][42] /* ty=Tensor[(400), int16] */, dtype="int16") /* ty=Tensor[(400), int16] */;
  %558 = reshape(%555, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), int64] */;
  %559 = reshape(%556, newshape=[15, 13, 15]) /* ty=Tensor[(15, 13, 15), int64] */;
  %560 = reshape(%557, newshape=[400]) /* ty=Tensor[(400), int16] */;
  %561 = @func_5072(%558, %559, %560) /* ty=(Tensor[(15, 13, 15), bool], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */;
  %562 = cast(meta[relay.Constant][41] /* ty=Tensor[(2925), int64] */, dtype="float32") /* ty=Tensor[(2925), float32] */;
  %563 = @func_4275() /* ty=(Tensor[(14, 2, 7), bool],) */;
  %564 = mod(%553, %554) /* ty=Tensor[(12, 8, 11), float64] */;
  %565 = %561.2;
  %566 = asin(%562) /* ty=Tensor[(2925), float32] */;
  %567 = %563.0;
  (%564, %565, meta[relay.Constant][42] /* ty=Tensor[(400), int16] */, %566, %567)
}

def @func_522(%var_520: Tensor[(8, 9, 4), int32], %var_521: Tensor[(8, 9, 4), int32]) -> Tensor[(8, 9, 4), int32] {
  %572 = fn (%var_514: Tensor[(8, 9, 4), int32], %var_515: Tensor[(8, 9, 4), int32]) -> Tensor[(8, 9, 4), int32] {
    %568 = cast(%var_515, dtype="int32") /* ty=Tensor[(8, 9, 4), int32] */;
    %569 = shape_of(%var_514, dtype="int32") /* ty=Tensor[(3), int32] */;
    %570 = cast(%var_514, dtype="int32") /* ty=Tensor[(8, 9, 4), int32] */;
    %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    logical_xor(%570, %571) /* ty=Tensor[(8, 9, 4), int32] */
  };
  %572(%var_520, %var_521) /* ty=Tensor[(8, 9, 4), int32] */
}

def @func_7755() -> (uint64,) {
  %575 = fn () -> (uint64,) {
    %573 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
    %574 = %573.4;
    (%574,)
  };
  %575() /* ty=(uint64,) */
}

def @func_4217() -> Tensor[(14, 2, 7), float32] {
  @func_4215() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_4163() -> (Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) {
  @func_4161() /* ty=(Tensor[(196), uint64], Tensor[(8, 5, 10), int16], Tensor[(400), int16]) */
}

def @func_5221(%var_5218: Tensor[(196), uint64], %var_5219: Tensor[(196), int64], %var_5220: Tensor[(196), uint32]) -> Tensor[(196), float32] {
  %592 = fn (%var_5180: Tensor[(196), uint64], %var_5187: Tensor[(196), int64], %var_5210: Tensor[(196), uint32]) -> Tensor[(196), float32] {
    %576 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
    %577 = %576.1;
    %578 = cast(%var_5180, dtype="int64") /* ty=Tensor[(196), int64] */;
    %579 = shape_of(%577, dtype="int32") /* ty=Tensor[(1), int32] */;
    %580 = cast(%577, dtype="int64") /* ty=Tensor[(196), int64] */;
    %581 = dyn.reshape(%578, %579, newshape=[]) /* ty=Tensor[(?), int64] */;
    %582 = bitwise_and(%580, %581) /* ty=Tensor[(196), int64] */;
    %583 = cast(%var_5187, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(1), int32] */;
    %585 = cast(%582, dtype="uint32") /* ty=Tensor[(196), uint32] */;
    %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %587 = minimum(%585, %586) /* ty=Tensor[(196), uint32] */;
    %588 = cast(%var_5210, dtype="float32") /* ty=Tensor[(196), float32] */;
    %589 = shape_of(%587, dtype="int32") /* ty=Tensor[(1), int32] */;
    %590 = cast(%587, dtype="float32") /* ty=Tensor[(196), float32] */;
    %591 = dyn.reshape(%588, %589, newshape=[]) /* ty=Tensor[(?), float32] */;
    divide(%590, %591) /* ty=Tensor[(196), float32] */
  };
  %592(%var_5218, %var_5219, %var_5220) /* ty=Tensor[(196), float32] */
}

def @func_5457(%var_5447: Tensor[(8, 15, 6), float32]) -> (Tensor[(8, 15, 6), float32], Tensor[(196), uint64]) {
  %593 = cast(%var_5447, dtype="float32") /* ty=Tensor[(8, 15, 6), float32] */;
  %594 = @func_4803() /* ty=(Tensor[(196), uint64],) */;
  %595 = sqrt(%593) /* ty=Tensor[(8, 15, 6), float32] */;
  %596 = %594.0;
  (%595, %596)
}

def @func_5685() -> (Tensor[(196), uint32], Tensor[(196), float64], uint64, Tensor[(1100), float32], Tensor[(80), float64]) {
  @func_5683() /* ty=(Tensor[(196), uint32], Tensor[(196), float64], uint64, Tensor[(1100), float32], Tensor[(80), float64]) */
}

def @func_3792() -> (Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) {
  @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */
}

def @func_4394() -> (Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) {
  @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */
}

def @func_6974() -> (Tensor[(196), float64], Tensor[(196), float64], uint64, Tensor[(14, 2, 7), bool], Tensor[(14, 2, 7), float32]) {
  @func_6972() /* ty=(Tensor[(196), float64], Tensor[(196), float64], uint64, Tensor[(14, 2, 7), bool], Tensor[(14, 2, 7), float32]) */
}

def @func_6057() -> Tensor[(196), float64] {
  %598 = fn () -> Tensor[(196), float64] {
    %597 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
    %597.0
  };
  %598() /* ty=Tensor[(196), float64] */
}

def @func_1769(%var_1767: Tensor[(10, 11, 3), float64]) -> (Tensor[(10, 11, 3), bool], Tensor[(245), float64], Tensor[(245), float64]) {
  @func_1766(%var_1767) /* ty=(Tensor[(10, 11, 3), bool], Tensor[(245), float64], Tensor[(245), float64]) */
}

def @func_7134() -> (Tensor[(14, 2, 7), float32],) {
  @func_7132() /* ty=(Tensor[(14, 2, 7), float32],) */
}

def @func_8185() -> (Tensor[(400), int16],) {
  @func_8183() /* ty=(Tensor[(400), int16],) */
}

def @func_5303() -> Tensor[(196), float64] {
  %599 = fn () -> Tensor[(196), float64] {
    @func_5028() /* ty=Tensor[(196), float64] */
  };
  %599() /* ty=Tensor[(196), float64] */
}

def @func_4783(%var_4781: Tensor[(35, 7), float64], %var_4782: Tensor[(10, 13, 5), uint16]) -> (uint64, Tensor[(10, 13, 5), bool], Tensor[(28), float32], Tensor[(35, 7), float64], Tensor[(14, 2, 7), bool], Tensor[(98, 2), uint64], Tensor[(10, 13, 5), float64]) {
  %634 = fn (%var_4755: Tensor[(35, 7), float64], %var_4767: Tensor[(10, 13, 5), uint16]) -> (uint64, Tensor[(10, 13, 5), bool], Tensor[(28), float32], Tensor[(35, 7), float64], Tensor[(14, 2, 7), bool], Tensor[(98, 2), uint64], Tensor[(10, 13, 5), float64]) {
    %600 = @func_4392() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(1100), float32], Tensor[(240), uint64], uint64, Tensor[(1100, 1), float32]) */;
    %601 = %600.3;
    %602 = cast(%601, dtype="float32") /* ty=float32 */;
    %603 = reshape(%602, newshape=[]) /* ty=float32 */;
    %604 = @func_2859(%603) /* ty=(Tensor[(10, 13, 5), float32],) */;
    %605 = %604.0;
    %606 = cast(%605, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
    %607 = log(%606) /* ty=Tensor[(10, 13, 5), float64] */;
    %608 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 13, 5), float64] */, dtype="bool") /* ty=Tensor[(10, 13, 5), bool] */;
    %609 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %610 = cast(%607, dtype="bool") /* ty=Tensor[(10, 13, 5), bool] */;
    %611 = dyn.reshape(%608, %609, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %612 = cast(%var_4755, dtype="float64") /* ty=Tensor[(35, 7), float64] */;
    %613 = reshape(%612, newshape=[7, 5, 7]) /* ty=Tensor[(7, 5, 7), float64] */;
    %614 = @func_1064(%613) /* ty=(Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) */;
    %615 = cast(%601, dtype="uint64") /* ty=uint64 */;
    %616 = cast(meta[relay.Constant][44] /* ty=Tensor[(98, 2), uint64] */, dtype="uint64") /* ty=Tensor[(98, 2), uint64] */;
    %617 = reshape(%615, newshape=[]) /* ty=uint64 */;
    %618 = reshape(%616, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
    %619 = cast(%605, dtype="uint16") /* ty=Tensor[(10, 13, 5), uint16] */;
    %620 = shape_of(%607, dtype="int32") /* ty=Tensor[(3), int32] */;
    %621 = cast(%607, dtype="uint16") /* ty=Tensor[(10, 13, 5), uint16] */;
    %622 = dyn.reshape(%619, %620, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %623 = multiply(%621, %622) /* ty=Tensor[(10, 13, 5), uint16] */;
    %624 = cast(%var_4767, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
    %625 = shape_of(%623, dtype="int32") /* ty=Tensor[(3), int32] */;
    %626 = cast(%623, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
    %627 = dyn.reshape(%624, %625, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %628 = mod(%626, %627) /* ty=Tensor[(10, 13, 5), float64] */;
    %629 = cast(%628, dtype="float64") /* ty=Tensor[(10, 13, 5), float64] */;
    %630 = greater_equal(%610, %611) /* ty=Tensor[(10, 13, 5), bool] */;
    %631 = %614.2;
    %632 = @func_2431(%617, %618) /* ty=Tensor[(14, 2, 7), bool] */;
    %633 = log2(%629) /* ty=Tensor[(10, 13, 5), float64] */;
    (%601, %630, %631, %var_4755, %632, meta[relay.Constant][44] /* ty=Tensor[(98, 2), uint64] */, %633)
  };
  %634(%var_4781, %var_4782) /* ty=(uint64, Tensor[(10, 13, 5), bool], Tensor[(28), float32], Tensor[(35, 7), float64], Tensor[(14, 2, 7), bool], Tensor[(98, 2), uint64], Tensor[(10, 13, 5), float64]) */
}

def @func_1766(%var_1750: Tensor[(10, 11, 3), float64]) -> (Tensor[(10, 11, 3), bool], Tensor[(245), float64], Tensor[(245), float64]) {
  %635 = cast(%var_1750, dtype="float64") /* ty=Tensor[(10, 11, 3), float64] */;
  %636 = sqrt(%635) /* ty=Tensor[(10, 11, 3), float64] */;
  %637 = cast(%var_1750, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %638 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%636, dtype="bool") /* ty=Tensor[(10, 11, 3), bool] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %641 = cast(meta[relay.Constant][45] /* ty=Tensor[(245), float64] */, dtype="float64") /* ty=Tensor[(245), float64] */;
  %642 = reshape(%641, newshape=[245]) /* ty=Tensor[(245), float64] */;
  %643 = @func_1289(%642) /* ty=(Tensor[(16, 6, 8), float64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(8, 9, 4), int32]) */;
  %644 = not_equal(%639, %640) /* ty=Tensor[(10, 11, 3), bool] */;
  %645 = %643.2;
  (%644, %645, meta[relay.Constant][45] /* ty=Tensor[(245), float64] */)
}

def @func_6597() -> (Tensor[(196), float64],) {
  %648 = fn () -> (Tensor[(196), float64],) {
    %646 = @func_6464() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
    %647 = %646.1;
    (%647,)
  };
  %648() /* ty=(Tensor[(196), float64],) */
}

def @func_7132() -> (Tensor[(14, 2, 7), float32],) {
  %649 = @func_5378() /* ty=Tensor[(14, 2, 7), float32] */;
  (%649,)
}

def @func_6491(%var_6467: Tensor[(12, 12, 2), bool]) -> (Tensor[(12, 12, 2), bool], Tensor[(12, 12, 2), bool], Tensor[(13, 8, 14), float64]) {
  %650 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %651 = shape_of(%var_6467, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%var_6467, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %654 = cast(%var_6467, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %655 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(12, 12, 2), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(meta[relay.Constant][46] /* ty=Tensor[(12, 12, 2), bool] */, dtype="bool") /* ty=Tensor[(12, 12, 2), bool] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %658 = @func_5010() /* ty=(Tensor[(196), float64], Tensor[(13, 8, 14), float64], Tensor[(1456), float64], Tensor[(13, 11, 13), uint64], uint64) */;
  %659 = logical_and(%652, %653) /* ty=Tensor[(12, 12, 2), bool] */;
  %660 = greater_equal(%656, %657) /* ty=Tensor[(12, 12, 2), bool] */;
  %661 = %658.1;
  (%659, %660, %661)
}

def @func_1910(%var_1907: Tensor[(3, 10, 4), float32], %var_1908: Tensor[(3, 10, 4), float32], %var_1909: Tensor[(288), int32]) -> (Tensor[(8, 9, 4), int32], Tensor[(288), int32], Tensor[(3, 10, 4), bool]) {
  %682 = fn (%var_1868: Tensor[(3, 10, 4), float32], %var_1869: Tensor[(3, 10, 4), float32], %var_1875: Tensor[(288), int32]) -> (Tensor[(8, 9, 4), int32], Tensor[(288), int32], Tensor[(3, 10, 4), bool]) {
    %662 = cast(%var_1875, dtype="int32") /* ty=Tensor[(288), int32] */;
    %663 = cast(%var_1875, dtype="int32") /* ty=Tensor[(288), int32] */;
    %664 = reshape(%662, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
    %665 = reshape(%663, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
    %666 = cast(%var_1869, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
    %667 = shape_of(%var_1868, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%var_1868, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %670 = less(%668, %669) /* ty=Tensor[(3, 10, 4), bool] */;
    %671 = cast(%var_1869, dtype="uint64") /* ty=Tensor[(3, 10, 4), uint64] */;
    %672 = shape_of(%670, dtype="int32") /* ty=Tensor[(3), int32] */;
    %673 = cast(%670, dtype="uint64") /* ty=Tensor[(3, 10, 4), uint64] */;
    %674 = dyn.reshape(%671, %672, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %675 = minimum(%673, %674) /* ty=Tensor[(3, 10, 4), uint64] */;
    %676 = cast(%var_1868, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
    %677 = shape_of(%675, dtype="int32") /* ty=Tensor[(3), int32] */;
    %678 = cast(%675, dtype="bool") /* ty=Tensor[(3, 10, 4), bool] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %680 = @func_519(%664, %665) /* ty=Tensor[(8, 9, 4), int32] */;
    %681 = greater_equal(%678, %679) /* ty=Tensor[(3, 10, 4), bool] */;
    (%680, %var_1875, %681)
  };
  %682(%var_1907, %var_1908, %var_1909) /* ty=(Tensor[(8, 9, 4), int32], Tensor[(288), int32], Tensor[(3, 10, 4), bool]) */
}

def @func_7649() -> (Tensor[(196), float64],) {
  %683 = @func_5028() /* ty=Tensor[(196), float64] */;
  (%683,)
}

def @main() -> (Tensor[(14, 2, 7), float32], Tensor[(196), float64]) {
  %684 = @func_6248() /* ty=(Tensor[(196), float64],) */;
  %685 = %684.0;
  %686 = cast(%685, dtype="float64") /* ty=Tensor[(196), float64] */;
  %687 = @func_4254() /* ty=Tensor[(14, 2, 7), float32] */;
  %688 = atan(%686) /* ty=Tensor[(196), float64] */;
  (%687, %688)
}

def @func_4719() -> (Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) {
  %695 = fn () -> (Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) {
    %689 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 2, 5), float64] */, dtype="float64") /* ty=Tensor[(8, 2, 5), float64] */;
    %690 = cast(meta[relay.Constant][47] /* ty=Tensor[(8, 2, 5), float64] */, dtype="float32") /* ty=Tensor[(8, 2, 5), float32] */;
    %691 = @func_3864() /* ty=(Tensor[(196), float64],) */;
    %692 = cosh(%689) /* ty=Tensor[(8, 2, 5), float64] */;
    %693 = log10(%690) /* ty=Tensor[(8, 2, 5), float32] */;
    %694 = %691.0;
    (%692, %693, %694)
  };
  %695() /* ty=(Tensor[(8, 2, 5), float64], Tensor[(8, 2, 5), float32], Tensor[(196), float64]) */
}

def @func_2434(%var_2432: uint64, %var_2433: Tensor[(14, 2, 7), uint64]) -> Tensor[(14, 2, 7), bool] {
  %701 = fn (%var_2423: uint64, %var_2424: Tensor[(14, 2, 7), uint64]) -> Tensor[(14, 2, 7), bool] {
    %696 = cast(%var_2423, dtype="uint64") /* ty=uint64 */;
    %697 = cast(%var_2424, dtype="uint64") /* ty=Tensor[(14, 2, 7), uint64] */;
    %698 = multiply(%696, %697) /* ty=Tensor[(14, 2, 7), uint64] */;
    %699 = cast(%var_2423, dtype="bool") /* ty=bool */;
    %700 = cast(%698, dtype="bool") /* ty=Tensor[(14, 2, 7), bool] */;
    greater(%699, %700) /* ty=Tensor[(14, 2, 7), bool] */
  };
  %701(%var_2432, %var_2433) /* ty=Tensor[(14, 2, 7), bool] */
}

def @func_3969(%var_3967: Tensor[(4, 4, 4), float64]) -> (Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) {
  @func_3966(%var_3967) /* ty=(Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) */
}

def @func_8350(%var_8347: Tensor[(5, 9, 1), float64]) -> (Tensor[(5, 9, 1), float64],) {
  %702 = cast(%var_8347, dtype="float64") /* ty=Tensor[(5, 9, 1), float64] */;
  %703 = sinh(%702) /* ty=Tensor[(5, 9, 1), float64] */;
  (%703,)
}

def @func_8019() -> (Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(14, 2, 7), float32], Tensor[(196), uint16]) {
  %704 = @func_7132() /* ty=(Tensor[(14, 2, 7), float32],) */;
  %705 = @func_5028() /* ty=Tensor[(196), float64] */;
  %706 = @func_5302() /* ty=Tensor[(196), float64] */;
  %707 = cast(%706, dtype="uint16") /* ty=Tensor[(196), uint16] */;
  %708 = shape_of(%705, dtype="int32") /* ty=Tensor[(1), int32] */;
  %709 = cast(%705, dtype="uint16") /* ty=Tensor[(196), uint16] */;
  %710 = dyn.reshape(%707, %708, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %711 = %704.0;
  %712 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %713 = @func_4215() /* ty=Tensor[(14, 2, 7), float32] */;
  %714 = bitwise_xor(%709, %710) /* ty=Tensor[(196), uint16] */;
  (%711, %712, %713, %714)
}

def @func_8055() -> (Tensor[(14, 2, 7), float32],) {
  %717 = fn () -> (Tensor[(14, 2, 7), float32],) {
    %715 = @func_7132() /* ty=(Tensor[(14, 2, 7), float32],) */;
    %716 = %715.0;
    (%716,)
  };
  %717() /* ty=(Tensor[(14, 2, 7), float32],) */
}

def @func_4256() -> Tensor[(14, 2, 7), float32] {
  @func_4254() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_2901(%var_2899: Tensor[(8, 6, 5), uint64]) -> (Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) {
  @func_2898(%var_2899) /* ty=(Tensor[(8, 6, 5), uint64], Tensor[(8, 6, 5), float64], Tensor[(8, 6, 5), float64]) */
}

def @func_4199(%var_4198: uint64) -> (Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) {
  %725 = fn (%var_4184: uint64) -> (Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) {
    %718 = @func_3864() /* ty=(Tensor[(196), float64],) */;
    %719 = cast(%var_4184, dtype="uint64") /* ty=uint64 */;
    %720 = %718.0;
    %721 = cast(%720, dtype="uint64") /* ty=Tensor[(196), uint64] */;
    %722 = reshape(%719, newshape=[]) /* ty=uint64 */;
    %723 = reshape(%721, newshape=[14, 2, 7]) /* ty=Tensor[(14, 2, 7), uint64] */;
    %724 = @func_2431(%722, %723) /* ty=Tensor[(14, 2, 7), bool] */;
    (%720, %724, %var_4184)
  };
  %725(%var_4198) /* ty=(Tensor[(196), float64], Tensor[(14, 2, 7), bool], uint64) */
}

def @func_5379() -> Tensor[(14, 2, 7), float32] {
  %727 = fn () -> Tensor[(14, 2, 7), float32] {
    %726 = @func_4841() /* ty=(Tensor[(14, 2, 7), float32], Tensor[(8, 5, 10), int16]) */;
    %726.0
  };
  %727() /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_7971(%var_7969: Tensor[(2, 1, 16), float64], %var_7970: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64],) {
  %731 = fn (%var_7959: Tensor[(2, 1, 16), float64], %var_7960: Tensor[(2, 5, 16), float64]) -> (Tensor[(2, 5, 16), float64],) {
    %728 = cast(%var_7959, dtype="float64") /* ty=Tensor[(2, 1, 16), float64] */;
    %729 = cast(%var_7960, dtype="float64") /* ty=Tensor[(2, 5, 16), float64] */;
    %730 = floor_mod(%728, %729) /* ty=Tensor[(2, 5, 16), float64] */;
    (%730,)
  };
  %731(%var_7969, %var_7970) /* ty=(Tensor[(2, 5, 16), float64],) */
}

def @func_973(%var_972: Tensor[(2, 1, 14), float32]) -> (Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) {
  %741 = fn (%var_946: Tensor[(2, 1, 14), float32]) -> (Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) {
    %732 = cast(%var_946, dtype="float32") /* ty=Tensor[(2, 1, 14), float32] */;
    %733 = log(%732) /* ty=Tensor[(2, 1, 14), float32] */;
    %734 = cast(%733, dtype="float64") /* ty=Tensor[(2, 1, 14), float64] */;
    %735 = cast(meta[relay.Constant][48] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %736 = cast(meta[relay.Constant][48] /* ty=Tensor[(288), int32] */, dtype="int32") /* ty=Tensor[(288), int32] */;
    %737 = reshape(%735, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
    %738 = reshape(%736, newshape=[8, 9, 4]) /* ty=Tensor[(8, 9, 4), int32] */;
    %739 = rsqrt(%734) /* ty=Tensor[(2, 1, 14), float64] */;
    %740 = @func_519(%737, %738) /* ty=Tensor[(8, 9, 4), int32] */;
    (%739, %740, meta[relay.Constant][48] /* ty=Tensor[(288), int32] */)
  };
  %741(%var_972) /* ty=(Tensor[(2, 1, 14), float64], Tensor[(8, 9, 4), int32], Tensor[(288), int32]) */
}

def @func_8091() -> Tensor[(196), float64] {
  %743 = fn () -> Tensor[(196), float64] {
    %742 = @func_7649() /* ty=(Tensor[(196), float64],) */;
    %742.0
  };
  %743() /* ty=Tensor[(196), float64] */
}

def @func_5506(%var_5505: int16) -> Tensor[(16, 5, 2), int16] {
  %746 = fn (%var_5498: int16) -> Tensor[(16, 5, 2), int16] {
    %744 = cast(%var_5498, dtype="int16") /* ty=int16 */;
    %745 = cast(meta[relay.Constant][49] /* ty=Tensor[(16, 5, 2), int16] */, dtype="int16") /* ty=Tensor[(16, 5, 2), int16] */;
    bitwise_xor(%744, %745) /* ty=Tensor[(16, 5, 2), int16] */
  };
  %746(%var_5505) /* ty=Tensor[(16, 5, 2), int16] */
}

def @func_3966(%var_3951: Tensor[(4, 4, 4), float64]) -> (Tensor[(4, 4, 4), float64], Tensor[(196), uint64]) {
  %747 = cast(%var_3951, dtype="float64") /* ty=Tensor[(4, 4, 4), float64] */;
  %748 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %749 = sin(%747) /* ty=Tensor[(4, 4, 4), float64] */;
  %750 = %748.1;
  (%749, %750)
}

def @func_6173() -> (Tensor[(8, 2, 5), float64],) {
  @func_6171() /* ty=(Tensor[(8, 2, 5), float64],) */
}

def @func_2301(%var_2299: Tensor[(11, 10, 10), float32]) -> (Tensor[(1, 4, 13), float64], Tensor[(52, 1), float64], Tensor[(11, 10, 10), float64]) {
  @func_2298(%var_2299) /* ty=(Tensor[(1, 4, 13), float64], Tensor[(52, 1), float64], Tensor[(11, 10, 10), float64]) */
}

def @func_5683() -> (Tensor[(196), uint32], Tensor[(196), float64], uint64, Tensor[(1100), float32], Tensor[(80), float64]) {
  %751 = @func_5136() /* ty=(Tensor[(196), float64], Tensor[(196), uint32]) */;
  %752 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %753 = cast(meta[relay.Constant][50] /* ty=Tensor[(1100), float32] */, dtype="float32") /* ty=Tensor[(1100), float32] */;
  %754 = cast(meta[relay.Constant][51] /* ty=Tensor[(80), float64] */, dtype="float64") /* ty=Tensor[(80), float64] */;
  %755 = reshape(%753, newshape=[1100]) /* ty=Tensor[(1100), float32] */;
  %756 = reshape(%754, newshape=[8, 2, 5]) /* ty=Tensor[(8, 2, 5), float64] */;
  %757 = @func_5642(%755, %756) /* ty=(uint64, Tensor[(196), uint64], Tensor[(64), float64], Tensor[(1100), float32], Tensor[(240), uint64], Tensor[(1100), float32], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool], Tensor[(8, 2, 5), bool]) */;
  %758 = %751.1;
  %759 = %752.0;
  %760 = %757.0;
  (%758, %759, %760, meta[relay.Constant][50] /* ty=Tensor[(1100), float32] */, meta[relay.Constant][51] /* ty=Tensor[(80), float64] */)
}

def @func_3866() -> (Tensor[(196), float64],) {
  @func_3864() /* ty=(Tensor[(196), float64],) */
}

def @func_4215() -> Tensor[(14, 2, 7), float32] {
  %761 = @func_3790() /* ty=(Tensor[(14, 2, 7), bool], Tensor[(196), uint64], Tensor[(5, 13, 7), int16]) */;
  %762 = %761.0;
  %763 = cast(%762, dtype="float32") /* ty=Tensor[(14, 2, 7), float32] */;
  tan(%763) /* ty=Tensor[(14, 2, 7), float32] */
}

def @func_1067(%var_1065: Tensor[(7, 5, 7), float64]) -> (Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) {
  @func_1064(%var_1065) /* ty=(Tensor[(7, 5, 7), int32], Tensor[(2, 1, 14), float64], Tensor[(28), float32]) */
}

def @func_5798() -> (Tensor[(196), float64], Tensor[(196), float64]) {
  %764 = @func_4871() /* ty=(Tensor[(196), float64], Tensor[(196), float64]) */;
  %765 = @func_5302() /* ty=Tensor[(196), float64] */;
  %766 = %764.0;
  (%765, %766)
}

def @func_7077() -> (Tensor[(196), float64],) {
  @func_7075() /* ty=(Tensor[(196), float64],) */
}

def @func_1292(%var_1290: Tensor[(245), float64]) -> (Tensor[(16, 6, 8), float64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(8, 9, 4), int32]) {
  @func_1289(%var_1290) /* ty=(Tensor[(16, 6, 8), float64], Tensor[(28), float32], Tensor[(245), float64], Tensor[(8, 9, 4), int32]) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
