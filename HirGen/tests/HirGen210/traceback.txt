==========mod==========
#[version = "0.0.5"]
def @func_4138() -> (Tensor[(12, 15, 13), int64],) {
  %0 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  (%0,)
}

def @func_6630() -> (Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(10, 4, 12), float32], Tensor[(480), float32]) {
  %1 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %2 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
  %3 = cast(meta[relay.Constant][0] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %4 = reshape(%3, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %5 = @func_4018(%4) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) */;
  %6 = cast(meta[relay.Constant][1] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %7 = reshape(%6, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), float32] */;
  %8 = @func_5778(%7) /* ty=(Tensor[(10, 4, 12), float64], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(10, 4, 12), float32]) */;
  %9 = @func_4493() /* ty=Tensor[(12, 15, 13), int32] */;
  %10 = %1.0;
  %11 = %2.1;
  %12 = %5.2;
  %13 = %8.4;
  (%9, %10, %11, %12, meta[relay.Constant][0] /* ty=Tensor[(4), uint32] */, %13, meta[relay.Constant][1] /* ty=Tensor[(480), float32] */)
}

def @func_3944() -> Tensor[(12, 15, 13), float32] {
  %14 = @func_3356() /* ty=Tensor[(12, 15, 13), int32] */;
  %15 = cast(%14, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  sqrt(%15) /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_2742(%var_2729: Tensor[(4), uint32], %var_2730: Tensor[(12), uint16], %var_2740: Tensor[(350, 2), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(2730), float32], Tensor[(14, 10, 5), float64], Tensor[(350, 2), float32]) {
  %16 = cast(%var_2729, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %17 = cast(%var_2730, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %18 = reshape(%16, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %19 = reshape(%17, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %20 = @func_1376(%18, %19) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %21 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
  %22 = %21.2;
  %23 = cast(%22, dtype="float64") /* ty=Tensor[(2730), float64] */;
  %24 = sinh(%23) /* ty=Tensor[(2730), float64] */;
  %25 = cast(%24, dtype="bool") /* ty=Tensor[(2730), bool] */;
  %26 = shape_of(%22, dtype="int32") /* ty=Tensor[(1), int32] */;
  %27 = cast(%22, dtype="bool") /* ty=Tensor[(2730), bool] */;
  %28 = dyn.reshape(%25, %26, newshape=[]) /* ty=Tensor[(?), bool] */;
  %29 = logical_and(%27, %28) /* ty=Tensor[(2730), bool] */;
  %30 = cast(%29, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %31 = log2(%30) /* ty=Tensor[(2730), float32] */;
  %32 = cast(%24, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %33 = shape_of(%31, dtype="int32") /* ty=Tensor[(1), int32] */;
  %34 = cast(%31, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %35 = dyn.reshape(%32, %33, newshape=[]) /* ty=Tensor[(?), float32] */;
  %36 = cast(%var_2740, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
  %37 = cast(%var_2740, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
  %38 = reshape(%36, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %39 = reshape(%37, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %40 = @func_1257(%38, %39) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %41 = %20.1;
  %42 = floor_divide(%34, %35) /* ty=Tensor[(2730), float32] */;
  %43 = %40.3;
  (%41, %var_2729, %var_2730, %42, %43, %var_2740)
}

def @func_4631(%var_4579: Tensor[(3, 10, 3), float64], %var_4580: Tensor[(3, 10, 3), float64]) -> (Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) {
  %44 = cast(%var_4580, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %45 = shape_of(%var_4579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%var_4579, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %48 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 2), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2), uint32] */;
  %49 = reshape(%48, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %50 = @func_4018(%49) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) */;
  %51 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %52 = multiply(%46, %47) /* ty=Tensor[(3, 10, 3), float64] */;
  %53 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  %54 = %50.1;
  %55 = %51.0;
  (%52, %53, %54, meta[relay.Constant][2] /* ty=Tensor[(2, 2), uint32] */, %55)
}

def @func_1798(%var_1750: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) {
  %56 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %57 = cast(%var_1750, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %58 = reshape(%57, newshape=[4, 3]) /* ty=Tensor[(4, 3), uint16] */;
  %59 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %60 = @func_297(%58) /* ty=Tensor[(4, 3), uint16] */;
  %61 = cast(%60, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %62 = reshape(%61, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %63 = @func_1601(%62) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */;
  %64 = %63.5;
  %65 = cast(meta[relay.Constant][3] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %66 = cast(%60, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %67 = reshape(%65, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %68 = reshape(%66, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %69 = @func_1376(%67, %68) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %70 = %69.3;
  %71 = cast(%64, dtype="int8") /* ty=Tensor[(2730), int8] */;
  %72 = cast(%70, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
  %73 = cast(%60, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %74 = reshape(%73, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %75 = @func_1601(%74) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */;
  %76 = %56.0;
  %77 = %59.0;
  %78 = bitwise_xor(%71, %72) /* ty=Tensor[(12, 2730), int8] */;
  %79 = %75.7;
  (%76, %60, %var_1750, meta[relay.Constant][3] /* ty=Tensor[(4), uint32] */, %77, %78, %79)
}

def @func_4310() -> (Tensor[(12, 15, 13), int64],) {
  %80 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %81 = %80.0;
  (%81,)
}

def @func_5613(%var_5610: Tensor[(160), float32], %var_5611: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(160), float32], Tensor[(2730), float32]) {
  %82 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %83 = cast(%var_5610, dtype="float32") /* ty=Tensor[(160), float32] */;
  %84 = cast(%var_5611, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %85 = reshape(%83, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float32] */;
  %86 = reshape(%84, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %87 = @func_5251(%85, %86) /* ty=(Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) */;
  %88 = %82.0;
  %89 = %87.2;
  (%88, %89, %var_5610, %var_5611)
}

def @func_3346(%var_3339: Tensor[(12), uint16]) -> (Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) {
  %90 = cast(%var_3339, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %91 = reshape(%90, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %92 = @func_1798(%91) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %93 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  %94 = cast(%93, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %95 = cosh(%94) /* ty=Tensor[(12, 15, 13), float32] */;
  %96 = cast(%95, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %97 = %92.3;
  %98 = log2(%96) /* ty=Tensor[(12, 15, 13), float32] */;
  (%97, %var_3339, %98)
}

def @func_6144() -> Tensor[(12, 15, 13), int32] {
  @func_3356() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_7090() -> Tensor[(12, 15, 13), int64] {
  %99 = @func_5031() /* ty=(Tensor[(1638), int8], Tensor[(12, 15, 13), int64]) */;
  %99.1
}

def @func_7659(%var_7651: Tensor[(2, 6, 15), float64]) -> (Tensor[(2, 6, 15), float64],) {
  %100 = cast(%var_7651, dtype="float64") /* ty=Tensor[(2, 6, 15), float64] */;
  %101 = sinh(%100) /* ty=Tensor[(2, 6, 15), float64] */;
  (%101,)
}

def @func_7285(%var_7215: Tensor[(864), float32], %var_7257: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(14, 9, 13), float64], Tensor[(12, 15, 13), int32], Tensor[(864), float32], Tensor[(12, 15, 13), bool], Tensor[(160), float32], Tensor[(2730), float32], Tensor[(2, 432), float64]) {
  %102 = cast(meta[relay.Constant][4] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %103 = reshape(%102, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %104 = @func_1798(%103) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %105 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %106 = cast(%var_7215, dtype="float32") /* ty=Tensor[(864), float32] */;
  %107 = cast(meta[relay.Constant][5] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %108 = cast(%var_7257, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %109 = reshape(%107, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float32] */;
  %110 = reshape(%108, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %111 = @func_5251(%109, %110) /* ty=(Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) */;
  %112 = cast(%var_7215, dtype="float32") /* ty=Tensor[(864), float32] */;
  %113 = reshape(%112, newshape=[2, 432]) /* ty=Tensor[(2, 432), float32] */;
  %114 = @func_6804(%113) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) */;
  %115 = %114.2;
  %116 = cast(%115, dtype="float64") /* ty=Tensor[(2, 432), float64] */;
  %117 = @func_4134() /* ty=Tensor[(12, 15, 13), int32] */;
  %118 = %104.5;
  %119 = %105.1;
  %120 = @func_4493() /* ty=Tensor[(12, 15, 13), int32] */;
  %121 = log10(%106) /* ty=Tensor[(864), float32] */;
  %122 = %111.4;
  %123 = atanh(%116) /* ty=Tensor[(2, 432), float64] */;
  (%117, %118, meta[relay.Constant][4] /* ty=Tensor[(12), uint16] */, %119, %120, %121, %122, meta[relay.Constant][5] /* ty=Tensor[(160), float32] */, %var_7257, %123)
}

def @func_2139() -> Tensor[(12, 15, 13), int64] {
  %124 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %124.0
}

def @func_145(%var_128: Tensor[(8, 15), float64]) -> (Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) {
  %125 = cast(%var_128, dtype="float64") /* ty=Tensor[(8, 15), float64] */;
  %126 = cast(meta[relay.Constant][6] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %127 = cast(meta[relay.Constant][6] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %128 = reshape(%126, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %129 = reshape(%127, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %130 = atan(%125) /* ty=Tensor[(8, 15), float64] */;
  %131 = @func_33(%128, %129) /* ty=Tensor[(14, 9, 13), float64] */;
  (%130, %131, meta[relay.Constant][6] /* ty=Tensor[(1638), float64] */)
}

def @func_5903(%var_5869: Tensor[(144, 1), float64]) -> (Tensor[(12, 30), float32], Tensor[(924), uint64], Tensor[(144, 1), float64], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), int64]) {
  %132 = cast(meta[relay.Constant][7] /* ty=Tensor[(924), uint64] */, dtype="uint64") /* ty=Tensor[(924), uint64] */;
  %133 = cast(meta[relay.Constant][7] /* ty=Tensor[(924), uint64] */, dtype="uint64") /* ty=Tensor[(924), uint64] */;
  %134 = cast(%var_5869, dtype="float64") /* ty=Tensor[(144, 1), float64] */;
  %135 = reshape(%132, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
  %136 = reshape(%133, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
  %137 = reshape(%134, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %138 = @func_3208(%135, %136, %137) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) */;
  %139 = @func_5544() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %142 = sinh(%141) /* ty=Tensor[(12, 15, 13), float32] */;
  %143 = cast(meta[relay.Constant][8] /* ty=Tensor[(12, 15, 13), int64] */, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
  %144 = shape_of(%140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %145 = cast(%140, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %147 = power(%145, %146) /* ty=Tensor[(12, 15, 13), float64] */;
  %148 = cast(%147, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %149 = shape_of(%142, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%142, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %152 = %138.10;
  %153 = greater_equal(%150, %151) /* ty=Tensor[(12, 15, 13), bool] */;
  %154 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
  (%152, meta[relay.Constant][7] /* ty=Tensor[(924), uint64] */, %var_5869, %153, %154)
}

def @func_7162() -> (Tensor[(12, 15, 13), int64],) {
  %155 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %156 = %155.0;
  (%156,)
}

def @func_7627(%var_7587: Tensor[(3, 4, 9), uint64], %var_7588: Tensor[(3, 4, 9), uint64], %var_7611: Tensor[(924), uint64]) -> (Tensor[(3, 4, 9), bool], Tensor[(3, 4, 9), float64], Tensor[(700), float32], Tensor[(924), uint64]) {
  %157 = cast(%var_7588, dtype="bool") /* ty=Tensor[(3, 4, 9), bool] */;
  %158 = shape_of(%var_7587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%var_7587, dtype="bool") /* ty=Tensor[(3, 4, 9), bool] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %161 = cast(%var_7588, dtype="uint64") /* ty=Tensor[(3, 4, 9), uint64] */;
  %162 = shape_of(%var_7587, dtype="int32") /* ty=Tensor[(3), int32] */;
  %163 = cast(%var_7587, dtype="uint64") /* ty=Tensor[(3, 4, 9), uint64] */;
  %164 = dyn.reshape(%161, %162, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %165 = bitwise_and(%163, %164) /* ty=Tensor[(3, 4, 9), uint64] */;
  %166 = cast(%var_7588, dtype="float64") /* ty=Tensor[(3, 4, 9), float64] */;
  %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %168 = cast(%165, dtype="float64") /* ty=Tensor[(3, 4, 9), float64] */;
  %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %170 = cast(%var_7611, dtype="uint64") /* ty=Tensor[(924), uint64] */;
  %171 = reshape(%170, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint64] */;
  %172 = @func_2310(%171) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */;
  %173 = not_equal(%159, %160) /* ty=Tensor[(3, 4, 9), bool] */;
  %174 = power(%168, %169) /* ty=Tensor[(3, 4, 9), float64] */;
  %175 = %172.1;
  (%173, %174, %175, %var_7611)
}

def @func_3101(%var_3071: Tensor[(120), float64], %var_3092: Tensor[(120), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(120), uint32]) {
  %176 = cast(%var_3071, dtype="float64") /* ty=Tensor[(120), float64] */;
  %177 = reshape(%176, newshape=[8, 15]) /* ty=Tensor[(8, 15), float64] */;
  %178 = @func_145(%177) /* ty=(Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %179 = %178.1;
  %180 = cast(%179, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
  %181 = cast(%var_3092, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %182 = shape_of(%var_3071, dtype="int32") /* ty=Tensor[(1), int32] */;
  %183 = cast(%var_3071, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %184 = dyn.reshape(%181, %182, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %185 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
  %186 = erf(%180) /* ty=Tensor[(14, 9, 13), float64] */;
  %187 = minimum(%183, %184) /* ty=Tensor[(120), uint32] */;
  (%185, %186, %187)
}

def @func_2604() -> (Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) {
  %188 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %189 = cast(meta[relay.Constant][10] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %190 = cast(meta[relay.Constant][10] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %191 = reshape(%189, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %192 = reshape(%190, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %193 = @func_1257(%191, %192) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %194 = cast(meta[relay.Constant][9] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %195 = reshape(%194, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %196 = @func_392(%195) /* ty=Tensor[(12, 1, 12), float64] */;
  %197 = cast(%196, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  %198 = reshape(%197, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %199 = @func_392(%198) /* ty=Tensor[(12, 1, 12), float64] */;
  %200 = cast(%199, dtype="uint64") /* ty=Tensor[(12, 1, 12), uint64] */;
  %201 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %202 = cast(%196, dtype="uint64") /* ty=Tensor[(12, 1, 12), uint64] */;
  %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %204 = %188.0;
  %205 = %193.0;
  %206 = bitwise_and(%202, %203) /* ty=Tensor[(12, ?, 12), uint64] */;
  (%204, meta[relay.Constant][9] /* ty=Tensor[(144), float64] */, %205, meta[relay.Constant][10] /* ty=Tensor[(700), float32] */, %206)
}

def @func_3756(%var_3745: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), int16], Tensor[(12, 15, 13), int32]) {
  %207 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %208 = %207.0;
  %209 = cast(%var_3745, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %210 = shape_of(%208, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%208, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %213 = maximum(%211, %212) /* ty=Tensor[(10, 4, 12), int16] */;
  %214 = @func_3356() /* ty=Tensor[(12, 15, 13), int32] */;
  (%213, %214)
}

def @func_1601(%var_1552: Tensor[(12, 1), uint16]) -> (Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) {
  %215 = cast(meta[relay.Constant][11] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %216 = cast(%var_1552, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %217 = reshape(%215, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %218 = reshape(%216, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %219 = @func_1376(%217, %218) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %220 = cast(meta[relay.Constant][12] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %221 = cast(meta[relay.Constant][12] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %222 = reshape(%220, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %223 = reshape(%221, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %224 = @func_1257(%222, %223) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %225 = cast(meta[relay.Constant][13] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %226 = reshape(%225, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %227 = @func_1353(%226) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %228 = cast(meta[relay.Constant][11] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %229 = cast(%var_1552, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %230 = reshape(%228, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %231 = reshape(%229, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %232 = @func_1376(%230, %231) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %233 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %234 = %233.0;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
  %236 = acos(%235) /* ty=Tensor[(12, 15, 13), float64] */;
  %237 = cast(%234, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %238 = shape_of(%236, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%236, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %241 = %219.0;
  %242 = %224.0;
  %243 = %227.2;
  %244 = %232.3;
  %245 = less_equal(%239, %240) /* ty=Tensor[(12, 15, 13), bool] */;
  (%241, meta[relay.Constant][11] /* ty=Tensor[(4), uint32] */, %var_1552, %242, meta[relay.Constant][12] /* ty=Tensor[(700), float32] */, %243, meta[relay.Constant][13] /* ty=Tensor[(2730), float32] */, %244, %245)
}

def @func_4018(%var_4009: Tensor[(1, 4), uint32]) -> (Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) {
  %246 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  %247 = cast(meta[relay.Constant][14] /* ty=Tensor[(12, 15, 13), int64] */, dtype="uint64") /* ty=Tensor[(12, 15, 13), uint64] */;
  %248 = shape_of(%246, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%246, dtype="uint64") /* ty=Tensor[(12, 15, 13), uint64] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %251 = cast(%var_4009, dtype="uint32") /* ty=Tensor[(1, 4), uint32] */;
  %252 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2), uint16] */;
  %253 = reshape(%251, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %254 = reshape(%252, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %255 = @func_1889(%253, %254) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
  %256 = bitwise_or(%249, %250) /* ty=Tensor[(12, 15, 13), uint64] */;
  %257 = @func_2812() /* ty=Tensor[(12, 15, 13), int32] */;
  %258 = %255.5;
  %259 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%256, %257, %258, %var_4009, meta[relay.Constant][15] /* ty=Tensor[(6, 2), uint16] */, %259)
}

def @func_5490() -> Tensor[(12, 15, 13), int64] {
  %260 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %260.0
}

def @func_4922(%var_4910: Tensor[(12, 15, 13), int64]) -> (Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), uint8]) {
  %261 = cast(meta[relay.Constant][16] /* ty=Tensor[(12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %262 = reshape(%261, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %263 = @func_3346(%262) /* ty=(Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) */;
  %264 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
  %265 = cast(%var_4910, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
  %267 = cast(%264, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %269 = %263.0;
  %270 = logical_xor(%267, %268) /* ty=Tensor[(12, 15, 13), uint8] */;
  (%269, meta[relay.Constant][16] /* ty=Tensor[(12, 1), uint16] */, %270)
}

def @func_7815(%var_7781: Tensor[(1638), float64], %var_7782: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(4), uint32], Tensor[(1872), float64], Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), bool]) {
  %271 = cast(meta[relay.Constant][17] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %272 = cast(meta[relay.Constant][17] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
  %273 = cast(%var_7781, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %274 = cast(%var_7782, dtype="float32") /* ty=Tensor[(700), float32] */;
  %275 = reshape(%271, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %276 = reshape(%272, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %277 = reshape(%273, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %278 = reshape(%274, newshape=[350, 2]) /* ty=Tensor[(350, 2), float32] */;
  %279 = @func_4469(%275, %276, %277, %278) /* ty=(Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) */;
  %280 = @func_6243() /* ty=Tensor[(12, 15, 13), int32] */;
  %281 = cast(%280, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %282 = reshape(%281, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
  %283 = @func_4922(%282) /* ty=(Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), uint8]) */;
  %284 = cast(%280, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %285 = reshape(%284, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
  %286 = @func_2812() /* ty=Tensor[(12, 15, 13), int32] */;
  %287 = cast(%286, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %288 = reshape(%287, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
  %289 = %279.4;
  %290 = %283.1;
  %291 = @func_1512(%285) /* ty=Tensor[(12, 15, 13), bool] */;
  %292 = @func_1512(%288) /* ty=Tensor[(12, 15, 13), bool] */;
  (%280, %286, %289, meta[relay.Constant][17] /* ty=Tensor[(1872), float64] */, %var_7781, %var_7782, %290, %291, %292)
}

def @func_4213() -> Tensor[(12, 15, 13), int64] {
  %293 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %293.0
}

def @func_6049() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(2730), float32], Tensor[(10, 4, 12), uint16], Tensor[(10, 4, 12), float32]) {
  %294 = @func_4310() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %295 = cast(meta[relay.Constant][18] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %296 = reshape(%295, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint64] */;
  %297 = @func_3003(%296) /* ty=(Tensor[(2, 2, 3), uint64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(2, 2, 3), float32], Tensor[(12), uint16]) */;
  %298 = @func_5622() /* ty=Tensor[(10, 4, 12), float32] */;
  %299 = cast(%298, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %300 = cast(meta[relay.Constant][18] /* ty=Tensor[(12), uint64] */, dtype="int16") /* ty=Tensor[(12), int16] */;
  %301 = bitwise_xor(%299, %300) /* ty=Tensor[(10, 4, 12), int16] */;
  %302 = cast(%298, dtype="uint16") /* ty=Tensor[(10, 4, 12), uint16] */;
  %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(%301, dtype="uint16") /* ty=Tensor[(10, 4, 12), uint16] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %306 = %294.0;
  %307 = @func_4134() /* ty=Tensor[(12, 15, 13), int32] */;
  %308 = %297.3;
  %309 = logical_xor(%304, %305) /* ty=Tensor[(10, 4, 12), uint16] */;
  %310 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%306, %307, %308, %309, %310)
}

def @func_3673(%var_3662: Tensor[(1, 3, 9), float32]) -> (Tensor[(1, 3, 9), float32],) {
  %311 = cast(%var_3662, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %312 = sqrt(%311) /* ty=Tensor[(1, 3, 9), float32] */;
  %313 = cast(%312, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %314 = sinh(%313) /* ty=Tensor[(1, 3, 9), float32] */;
  (%314,)
}

def @func_1376(%var_1366: Tensor[(1, 4), uint32], %var_1374: Tensor[(12, 1), uint16]) -> (Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) {
  %315 = cast(meta[relay.Constant][19] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %316 = cast(%var_1366, dtype="uint32") /* ty=Tensor[(1, 4), uint32] */;
  %317 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %318 = cast(%var_1374, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %319 = reshape(%318, newshape=[4, 3]) /* ty=Tensor[(4, 3), uint16] */;
  %320 = bitwise_or(%315, %316) /* ty=Tensor[(1, 4), uint32] */;
  %321 = %317.0;
  %322 = @func_297(%319) /* ty=Tensor[(4, 3), uint16] */;
  (%320, %321, %322, %var_1374)
}

def @func_6754() -> Tensor[(12, 15, 13), float32] {
  @func_3944() /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_4841() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) {
  %323 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %324 = %323.0;
  %325 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  (%324, %325)
}

def @func_6475() -> (Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(924), uint64], Tensor[(10, 4, 12), float64]) {
  %326 = cast(meta[relay.Constant][20] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %327 = cast(meta[relay.Constant][21] /* ty=Tensor[(924), uint64] */, dtype="uint64") /* ty=Tensor[(924), uint64] */;
  %328 = reshape(%326, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %329 = reshape(%327, newshape=[924]) /* ty=Tensor[(924), uint64] */;
  %330 = @func_4876(%328, %329) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(12, 15, 13), int64], Tensor[(924), uint64]) */;
  %331 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %332 = %331.0;
  %333 = cast(%332, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %334 = atanh(%333) /* ty=Tensor[(10, 4, 12), float64] */;
  %335 = cast(%332, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(3), int32] */;
  %337 = cast(%334, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %339 = %330.2;
  %340 = floor_mod(%337, %338) /* ty=Tensor[(10, 4, 12), float64] */;
  (%339, meta[relay.Constant][20] /* ty=Tensor[(144), float64] */, meta[relay.Constant][21] /* ty=Tensor[(924), uint64] */, %340)
}

def @func_5172(%var_5162: Tensor[(12), uint16], %var_5163: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) {
  %341 = cast(%var_5162, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %342 = cast(%var_5163, dtype="float64") /* ty=Tensor[(144), float64] */;
  %343 = reshape(%341, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %344 = reshape(%342, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %345 = @func_2101(%343, %344) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) */;
  %346 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  %347 = %345.3;
  (%346, %347, %var_5162, %var_5163)
}

def @func_3045() -> Tensor[(12, 15, 13), int64] {
  %348 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %348.0
}

def @func_1495(%var_1492: Tensor[(2, 15, 1), float32]) -> Tensor[(2, 15, 1), float32] {
  %349 = cast(%var_1492, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  cosh(%349) /* ty=Tensor[(2, 15, 1), float32] */
}

def @func_1512(%var_1506: Tensor[(12, 15, 13), int64]) -> Tensor[(12, 15, 13), bool] {
  %350 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %351 = %350.0;
  %352 = cast(%var_1506, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %353 = shape_of(%351, dtype="int32") /* ty=Tensor[(3), int32] */;
  %354 = cast(%351, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %355 = dyn.reshape(%352, %353, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%354, %355) /* ty=Tensor[(12, 15, 13), bool] */
}

def @func_7486(%var_7475: Tensor[(2, 10, 15), int8]) -> (Tensor[(2, 10, 15), int8],) {
  %356 = cast(meta[relay.Constant][22] /* ty=Tensor[(2, 10, 15), int8] */, dtype="int8") /* ty=Tensor[(2, 10, 15), int8] */;
  %357 = shape_of(%var_7475, dtype="int32") /* ty=Tensor[(3), int32] */;
  %358 = cast(%var_7475, dtype="int8") /* ty=Tensor[(2, 10, 15), int8] */;
  %359 = dyn.reshape(%356, %357, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %360 = logical_xor(%358, %359) /* ty=Tensor[(2, 10, 15), int8] */;
  (%360,)
}

def @func_6500() -> (Tensor[(10, 4, 12), float32],) {
  %361 = @func_4073() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %362 = %361.0;
  (%362,)
}

def @func_4797(%var_4726: Tensor[(120), float64]) -> (Tensor[(12, 15, 13), int32], Tensor[(8, 15), float64], Tensor[(120), float64], Tensor[(8, 18), float64], Tensor[(6, 2), uint16], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1, 12), uint8]) {
  %363 = cast(%var_4726, dtype="float64") /* ty=Tensor[(120), float64] */;
  %364 = reshape(%363, newshape=[8, 15]) /* ty=Tensor[(8, 15), float64] */;
  %365 = @func_145(%364) /* ty=(Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %366 = cast(meta[relay.Constant][25] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %367 = cast(meta[relay.Constant][24] /* ty=Tensor[(6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2), uint16] */;
  %368 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %369 = reshape(%367, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %370 = reshape(%368, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %371 = @func_2101(%369, %370) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) */;
  %372 = %371.2;
  %373 = cast(%372, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %374 = reshape(%366, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %375 = reshape(%373, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %376 = @func_1889(%374, %375) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
  %377 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
  %378 = reshape(%377, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %379 = @func_392(%378) /* ty=Tensor[(12, 1, 12), float64] */;
  %380 = cast(%379, dtype="uint8") /* ty=Tensor[(12, 1, 12), uint8] */;
  %381 = cast(%372, dtype="uint8") /* ty=Tensor[(12), uint8] */;
  %382 = @func_2812() /* ty=Tensor[(12, 15, 13), int32] */;
  %383 = %365.0;
  %384 = %376.2;
  %385 = bitwise_xor(%380, %381) /* ty=Tensor[(12, 1, 12), uint8] */;
  (%382, %383, %var_4726, meta[relay.Constant][23] /* ty=Tensor[(8, 18), float64] */, meta[relay.Constant][24] /* ty=Tensor[(6, 2), uint16] */, %384, meta[relay.Constant][25] /* ty=Tensor[(4), uint32] */, %385)
}

def @func_5702(%var_5693: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(1, 90), float64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(12, 15, 13), int32], Tensor[(14, 9, 13), float64], Tensor[(700), float32]) {
  %386 = @func_4821() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %387 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %388 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %389 = reshape(%387, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %390 = reshape(%388, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %391 = @func_4631(%389, %390) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) */;
  %392 = cast(meta[relay.Constant][27] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %393 = reshape(%392, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %394 = @func_3346(%393) /* ty=(Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) */;
  %395 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %396 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %397 = reshape(%395, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %398 = reshape(%396, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %399 = @func_4631(%397, %398) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) */;
  %400 = cast(%var_5693, dtype="float32") /* ty=Tensor[(700), float32] */;
  %401 = cast(%var_5693, dtype="float32") /* ty=Tensor[(700), float32] */;
  %402 = reshape(%400, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %403 = reshape(%401, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %404 = @func_1257(%402, %403) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %405 = %386.0;
  %406 = %391.1;
  %407 = %394.1;
  %408 = %399.1;
  %409 = %404.0;
  (%405, %406, meta[relay.Constant][26] /* ty=Tensor[(1, 90), float64] */, %407, meta[relay.Constant][27] /* ty=Tensor[(12), uint16] */, %408, %409, %var_5693)
}

def @func_1304() -> (Tensor[(12, 15, 13), int64],) {
  %410 = cast(meta[relay.Constant][29] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %411 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %412 = cast(meta[relay.Constant][28] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %413 = dyn.reshape(%410, %411, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %414 = bitwise_and(%412, %413) /* ty=Tensor[(12, 15, 13), int64] */;
  (%414,)
}

def @func_4493() -> Tensor[(12, 15, 13), int32] {
  @func_3356() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_2474(%var_2386: Tensor[(1, 2, 8), uint64], %var_2387: Tensor[(6, 2, 8), uint64], %var_2468: Tensor[(3, 2, 8), uint8]) -> (Tensor[(14, 12, 13), int32], Tensor[(2184), int32], Tensor[(4), uint32], Tensor[(1, 12), uint16], Tensor[(6, 2, 8), bool], Tensor[(3, 2, 8), uint16]) {
  %415 = cast(meta[relay.Constant][30] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %416 = cast(meta[relay.Constant][30] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %417 = reshape(%415, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %418 = reshape(%416, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %419 = @func_2019(%417, %418) /* ty=(Tensor[(14, 12, 13), int32],) */;
  %420 = cast(meta[relay.Constant][31] /* ty=Tensor[(1, 12), uint16] */, dtype="uint16") /* ty=Tensor[(1, 12), uint16] */;
  %421 = reshape(%420, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %422 = @func_1798(%421) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %423 = cast(%var_2386, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %424 = erf(%423) /* ty=Tensor[(1, 2, 8), float64] */;
  %425 = cast(%var_2386, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %426 = cast(%var_2387, dtype="bool") /* ty=Tensor[(6, 2, 8), bool] */;
  %427 = greater_equal(%425, %426) /* ty=Tensor[(6, 2, 8), bool] */;
  %428 = cast(%424, dtype="uint16") /* ty=Tensor[(1, 2, 8), uint16] */;
  %429 = cast(%427, dtype="uint16") /* ty=Tensor[(6, 2, 8), uint16] */;
  %430 = subtract(%428, %429) /* ty=Tensor[(6, 2, 8), uint16] */;
  %431 = cast(%424, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %432 = cast(%430, dtype="bool") /* ty=Tensor[(6, 2, 8), bool] */;
  %433 = cast(%var_2386, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %434 = shape_of(%424, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%424, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %437 = mod(%435, %436) /* ty=Tensor[(?, 2, 8), float64] */;
  %438 = cast(%424, dtype="uint8") /* ty=Tensor[(1, 2, 8), uint8] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="uint8") /* ty=Tensor[(?, 2, 8), uint8] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %442 = bitwise_xor(%440, %441) /* ty=Tensor[(?, 2, 8), uint8] */;
  %443 = cast(%442, dtype="uint16") /* ty=Tensor[(?, 2, 8), uint16] */;
  %444 = cast(%var_2468, dtype="uint16") /* ty=Tensor[(3, 2, 8), uint16] */;
  %445 = %419.0;
  %446 = %422.3;
  %447 = less(%431, %432) /* ty=Tensor[(6, 2, 8), bool] */;
  %448 = add(%443, %444) /* ty=Tensor[(3, 2, 8), uint16] */;
  (%445, meta[relay.Constant][30] /* ty=Tensor[(2184), int32] */, %446, meta[relay.Constant][31] /* ty=Tensor[(1, 12), uint16] */, %447, %448)
}

def @func_5405() -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(10, 4, 12), float32]) {
  %449 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %450 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %451 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  %452 = %449.1;
  %453 = %450.0;
  (%451, %452, %453)
}

def @func_5088() -> Tensor[(10, 4, 12), float32] {
  %454 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %454.0
}

def @func_3636() -> (Tensor[(12, 15, 13), int64],) {
  %455 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  (%455,)
}

def @func_6682() -> (Tensor[(12, 15, 13), int64],) {
  %456 = @func_5544() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */;
  %457 = %456.0;
  (%457,)
}

def @func_392(%var_387: Tensor[(12, 1, 12), float64]) -> Tensor[(12, 1, 12), float64] {
  %458 = cast(%var_387, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  log(%458) /* ty=Tensor[(12, 1, 12), float64] */
}

def @func_6804(%var_6801: Tensor[(2, 432), float32]) -> (Tensor[(12, 15, 13), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) {
  %459 = cast(%var_6801, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
  %460 = cast(%var_6801, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
  %461 = reshape(%459, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %462 = reshape(%460, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %463 = @func_5816(%461, %462) /* ty=(Tensor[(8, 12, 9), float32],) */;
  %464 = @func_3883() /* ty=Tensor[(12, 15, 13), float32] */;
  %465 = %463.0;
  (%464, %465, %var_6801)
}

def @func_4876(%var_4869: Tensor[(144), float64], %var_4874: Tensor[(924), uint64]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(12, 15, 13), int64], Tensor[(924), uint64]) {
  %466 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %467 = cast(%var_4869, dtype="float64") /* ty=Tensor[(144), float64] */;
  %468 = reshape(%467, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %469 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(924), uint64] */;
  %470 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(924), uint64] */;
  %471 = @func_392(%468) /* ty=Tensor[(12, 1, 12), float64] */;
  %472 = cast(%471, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  %473 = reshape(%469, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
  %474 = reshape(%470, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
  %475 = reshape(%472, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %476 = @func_3208(%473, %474, %475) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) */;
  %477 = @func_3944() /* ty=Tensor[(12, 15, 13), float32] */;
  %478 = %466.0;
  %479 = %476.0;
  (%477, %478, %471, %var_4869, %479, %var_4874)
}

def @func_4469(%var_4436: Tensor[(12, 13, 12), float64], %var_4437: Tensor[(12, 13, 12), float64], %var_4451: Tensor[(1638), float64], %var_4466: Tensor[(350, 2), float32]) -> (Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) {
  %480 = cast(%var_4437, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
  %481 = shape_of(%var_4436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %482 = cast(%var_4436, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
  %483 = dyn.reshape(%480, %481, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %484 = cast(%var_4451, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %485 = cast(%var_4451, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %486 = reshape(%484, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %487 = reshape(%485, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %488 = cast(meta[relay.Constant][32] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %489 = cast(meta[relay.Constant][33] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %490 = cast(%var_4466, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
  %491 = reshape(%488, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %492 = reshape(%489, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %493 = reshape(%490, newshape=[350, 2]) /* ty=Tensor[(350, 2), float32] */;
  %494 = @func_2742(%491, %492, %493) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(2730), float32], Tensor[(14, 10, 5), float64], Tensor[(350, 2), float32]) */;
  %495 = power(%482, %483) /* ty=Tensor[(12, 13, 12), float64] */;
  %496 = @func_33(%486, %487) /* ty=Tensor[(14, 9, 13), float64] */;
  %497 = %494.3;
  (%495, %496, %var_4451, %497, meta[relay.Constant][32] /* ty=Tensor[(4), uint32] */, meta[relay.Constant][33] /* ty=Tensor[(12), uint16] */, %var_4466)
}

def @func_8027(%var_8010: Tensor[(1638), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(2, 936), float64], Tensor[(700), float32], Tensor[(12, 15, 13), float32], Tensor[(1638), bool], Tensor[(12, ?, 12), uint64], Tensor[(10, 4, 12), float32]) {
  %498 = @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */;
  %499 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %500 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 936), float64] */, dtype="float64") /* ty=Tensor[(2, 936), float64] */;
  %501 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 936), float64] */, dtype="float64") /* ty=Tensor[(2, 936), float64] */;
  %502 = cast(meta[relay.Constant][35] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %503 = cast(meta[relay.Constant][36] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %504 = reshape(%500, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %505 = reshape(%501, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %506 = reshape(%502, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %507 = reshape(%503, newshape=[350, 2]) /* ty=Tensor[(350, 2), float32] */;
  %508 = @func_4469(%504, %505, %506, %507) /* ty=(Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) */;
  %509 = cast(%var_8010, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %510 = shape_of(meta[relay.Constant][35] /* ty=Tensor[(1638), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %511 = cast(meta[relay.Constant][35] /* ty=Tensor[(1638), float64] */, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %512 = dyn.reshape(%509, %510, newshape=[]) /* ty=Tensor[(?), bool] */;
  %513 = @func_2604() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */;
  %514 = @func_5550() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %515 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  %516 = %498.2;
  %517 = %499.0;
  %518 = %508.4;
  %519 = @func_3944() /* ty=Tensor[(12, 15, 13), float32] */;
  %520 = not_equal(%511, %512) /* ty=Tensor[(1638), bool] */;
  %521 = %513.4;
  %522 = %514.0;
  (%515, %516, %517, %518, meta[relay.Constant][34] /* ty=Tensor[(2, 936), float64] */, meta[relay.Constant][36] /* ty=Tensor[(700), float32] */, %519, %520, %521, %522)
}

def @func_6836(%var_6811: uint8, %var_6812: Tensor[(1, 9, 7), uint8]) -> Tensor[(1, 9, 7), bool] {
  %523 = cast(%var_6811, dtype="bool") /* ty=bool */;
  %524 = cast(%var_6812, dtype="bool") /* ty=Tensor[(1, 9, 7), bool] */;
  greater_equal(%523, %524) /* ty=Tensor[(1, 9, 7), bool] */
}

def @func_7887() -> (Tensor[(12, 15, 13), int64],) {
  %525 = @func_5844() /* ty=Tensor[(12, 15, 13), int64] */;
  (%525,)
}

def @func_1257(%var_1209: Tensor[(14, 10, 5), float32], %var_1210: Tensor[(14, 10, 5), float32]) -> (Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) {
  %526 = cast(meta[relay.Constant][37] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %527 = cast(meta[relay.Constant][37] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %528 = reshape(%526, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %529 = reshape(%527, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %530 = cast(meta[relay.Constant][37] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %531 = cast(meta[relay.Constant][37] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %532 = reshape(%530, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %533 = reshape(%531, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %534 = cast(%var_1210, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
  %535 = shape_of(%var_1209, dtype="int32") /* ty=Tensor[(3), int32] */;
  %536 = cast(%var_1209, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
  %537 = dyn.reshape(%534, %535, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %538 = less(%536, %537) /* ty=Tensor[(14, 10, 5), bool] */;
  %539 = cast(%var_1210, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %540 = shape_of(%538, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%538, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %543 = cast(%538, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
  %544 = shape_of(%var_1210, dtype="int32") /* ty=Tensor[(3), int32] */;
  %545 = cast(%var_1210, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
  %546 = dyn.reshape(%543, %544, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %547 = @func_33(%528, %529) /* ty=Tensor[(14, 9, 13), float64] */;
  %548 = @func_33(%532, %533) /* ty=Tensor[(14, 9, 13), float64] */;
  %549 = divide(%541, %542) /* ty=Tensor[(14, 10, 5), float64] */;
  %550 = not_equal(%545, %546) /* ty=Tensor[(14, 10, 5), bool] */;
  (%547, meta[relay.Constant][37] /* ty=Tensor[(1638), float64] */, %548, %549, %550)
}

def @func_3208(%var_3112: Tensor[(154, 6), uint64], %var_3120: Tensor[(154, 6), uint64], %var_3168: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) {
  %551 = cast(%var_3112, dtype="uint64") /* ty=Tensor[(154, 6), uint64] */;
  %552 = reshape(%551, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint64] */;
  %553 = @func_2310(%552) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */;
  %554 = cast(%var_3120, dtype="bool") /* ty=Tensor[(154, 6), bool] */;
  %555 = shape_of(%var_3112, dtype="int32") /* ty=Tensor[(2), int32] */;
  %556 = cast(%var_3112, dtype="bool") /* ty=Tensor[(154, 6), bool] */;
  %557 = dyn.reshape(%554, %555, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %558 = cast(%var_3168, dtype="float64") /* ty=Tensor[(144), float64] */;
  %559 = reshape(%558, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %560 = @func_392(%559) /* ty=Tensor[(12, 1, 12), float64] */;
  %561 = cast(%560, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
  %562 = reshape(%561, newshape=[2, 72]) /* ty=Tensor[(2, 72), float64] */;
  %563 = @func_2198(%562) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) */;
  %564 = cast(%var_3120, dtype="uint64") /* ty=Tensor[(154, 6), uint64] */;
  %565 = reshape(%564, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint64] */;
  %566 = @func_2310(%565) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */;
  %567 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 30), float32] */, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %568 = tan(%567) /* ty=Tensor[(1, 30), float32] */;
  %569 = cast(%568, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %570 = log10(%569) /* ty=Tensor[(1, 30), float32] */;
  %571 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 30), float32] */, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %572 = reshape(%571, newshape=[2, 15, 1]) /* ty=Tensor[(2, 15, 1), float32] */;
  %573 = @func_1495(%572) /* ty=Tensor[(2, 15, 1), float32] */;
  %574 = cast(%573, dtype="bool") /* ty=Tensor[(2, 15, 1), bool] */;
  %575 = shape_of(%570, dtype="int32") /* ty=Tensor[(2), int32] */;
  %576 = cast(%570, dtype="bool") /* ty=Tensor[(1, 30), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %578 = cast(meta[relay.Constant][38] /* ty=Tensor[(3, 4), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4), uint16] */;
  %579 = reshape(%578, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %580 = @func_1798(%579) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %581 = %580.6;
  %582 = cast(%568, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %583 = cast(%581, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
  %584 = cast(%570, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %585 = shape_of(%568, dtype="int32") /* ty=Tensor[(2), int32] */;
  %586 = cast(%568, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %588 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
  %589 = %553.0;
  %590 = greater(%556, %557) /* ty=Tensor[(154, 6), bool] */;
  %591 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
  %592 = %563.2;
  %593 = %566.2;
  %594 = logical_or(%576, %577) /* ty=Tensor[(?, 30), bool] */;
  %595 = mod(%582, %583) /* ty=Tensor[(12, 30), float32] */;
  %596 = subtract(%586, %587) /* ty=Tensor[(?, 30), float32] */;
  (%588, %589, %590, %591, meta[relay.Constant][38] /* ty=Tensor[(3, 4), uint16] */, %560, %var_3168, %592, %593, %594, %595, %596)
}

def @func_3874() -> (Tensor[(12, 15, 13), int32],) {
  %597 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  (%597,)
}

def @func_1353(%var_1325: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) {
  %598 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %599 = cast(%var_1325, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %600 = reshape(%599, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
  %601 = @func_978(%600) /* ty=(Tensor[(13, 15, 14), float32],) */;
  %602 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %603 = %598.0;
  %604 = %601.0;
  %605 = %602.0;
  (%603, %604, %var_1325, %605)
}

def @func_5031() -> (Tensor[(1638), int8], Tensor[(12, 15, 13), int64]) {
  %606 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %607 = %606.2;
  %608 = cast(%607, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %609 = sinh(%608) /* ty=Tensor[(1638), float64] */;
  %610 = cast(%607, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %611 = shape_of(%609, dtype="int32") /* ty=Tensor[(1), int32] */;
  %612 = cast(%609, dtype="int8") /* ty=Tensor[(1638), int8] */;
  %613 = dyn.reshape(%610, %611, newshape=[]) /* ty=Tensor[(?), int8] */;
  %614 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %615 = bitwise_xor(%612, %613) /* ty=Tensor[(1638), int8] */;
  %616 = %614.0;
  (%615, %616)
}

def @func_1969() -> Tensor[(12, 15, 13), int64] {
  %617 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %617.0
}

def @func_3883() -> Tensor[(12, 15, 13), float32] {
  %618 = @func_3552() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %619 = %618.0;
  %620 = cast(%619, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  acosh(%620) /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_5844() -> Tensor[(12, 15, 13), int64] {
  @func_3045() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_4083() -> (Tensor[(12, 15, 13), int64],) {
  %621 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  (%621,)
}

def @func_5440() -> (Tensor[(12, 15, 13), int32],) {
  %622 = @func_3874() /* ty=(Tensor[(12, 15, 13), int32],) */;
  %623 = %622.0;
  (%623,)
}

def @func_8086() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_7562() -> (Tensor[(12, 15, 13), int64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(12, 15, 13), bool]) {
  %624 = cast(meta[relay.Constant][40] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %625 = cast(meta[relay.Constant][40] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %626 = reshape(%624, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %627 = reshape(%625, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %628 = @func_6136(%626, %627) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %629 = @func_2139() /* ty=Tensor[(12, 15, 13), int64] */;
  %630 = cast(%629, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %631 = reshape(%630, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
  %632 = %628.0;
  %633 = @func_1512(%631) /* ty=Tensor[(12, 15, 13), bool] */;
  (%629, %632, meta[relay.Constant][40] /* ty=Tensor[(2400), float32] */, %633)
}

def @func_3477(%var_3447: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), float64], Tensor[(12, 15, 13), int64], Tensor[(2730), float32]) {
  %634 = cast(meta[relay.Constant][41] /* ty=Tensor[(14, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %635 = shape_of(%var_3447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %636 = cast(%var_3447, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %637 = dyn.reshape(%634, %635, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %638 = cast(meta[relay.Constant][42] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %639 = reshape(%638, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %640 = @func_1353(%639) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %641 = floor_divide(%636, %637) /* ty=Tensor[(14, 5, 2), float64] */;
  %642 = %640.3;
  (%641, %642, meta[relay.Constant][42] /* ty=Tensor[(2730), float32] */)
}

def @func_7061() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) {
  %643 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
  %644 = %643.1;
  %645 = cast(%644, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
  %646 = @func_5844() /* ty=Tensor[(12, 15, 13), int64] */;
  %647 = @func_5490() /* ty=Tensor[(12, 15, 13), int64] */;
  %648 = log2(%645) /* ty=Tensor[(13, 15, 14), float64] */;
  (%646, %647, %648)
}

def @func_5296() -> (Tensor[(10, 4, 12), float32],) {
  %649 = @func_5088() /* ty=Tensor[(10, 4, 12), float32] */;
  (%649,)
}

def @func_33(%var_3: Tensor[(14, 9, 13), float64], %var_4: Tensor[(14, 9, 13), float64]) -> Tensor[(14, 9, 13), float64] {
  %650 = cast(%var_4, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
  %651 = shape_of(%var_3, dtype="int32") /* ty=Tensor[(3), int32] */;
  %652 = cast(%var_3, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
  %653 = dyn.reshape(%650, %651, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%652, %653) /* ty=Tensor[(14, 9, 13), float64] */
}

def @func_4984(%var_4969: Tensor[(12, 15, 13), int64]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32]) {
  %654 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %655 = %654.0;
  %656 = cast(%var_4969, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %657 = shape_of(%655, dtype="int32") /* ty=Tensor[(3), int32] */;
  %658 = cast(%655, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %660 = @func_3552() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %661 = floor_divide(%658, %659) /* ty=Tensor[(12, 15, 13), float32] */;
  %662 = %660.0;
  %663 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%661, %662, %663)
}

def @func_2613() -> (Tensor[(12, 15, 13), int64],) {
  %664 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  (%664,)
}

def @func_1430() -> (Tensor[(12, 15, 13), int64],) {
  %665 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %666 = %665.0;
  (%666,)
}

def @func_7878(%var_7868: Tensor[(700), float64]) -> (Tensor[(10, 15, 16), float32], Tensor[(700), int32], Tensor[(12, 15, 13), int64]) {
  %667 = @func_7562() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(12, 15, 13), bool]) */;
  %668 = @func_3262() /* ty=Tensor[(700), float64] */;
  %669 = cast(%var_7868, dtype="int32") /* ty=Tensor[(700), int32] */;
  %670 = shape_of(%668, dtype="int32") /* ty=Tensor[(1), int32] */;
  %671 = cast(%668, dtype="int32") /* ty=Tensor[(700), int32] */;
  %672 = dyn.reshape(%669, %670, newshape=[]) /* ty=Tensor[(?), int32] */;
  %673 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %674 = %667.1;
  %675 = bitwise_and(%671, %672) /* ty=Tensor[(700), int32] */;
  %676 = %673.0;
  (%674, %675, %676)
}

def @func_3602() -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) {
  %677 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %678 = cast(meta[relay.Constant][43] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %679 = cast(meta[relay.Constant][43] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %680 = reshape(%678, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %681 = reshape(%679, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %682 = %677.0;
  %683 = @func_33(%680, %681) /* ty=Tensor[(14, 9, 13), float64] */;
  (%682, %683, meta[relay.Constant][43] /* ty=Tensor[(1638), float64] */)
}

def @func_1837(%var_1816: Tensor[(12), uint16]) -> (Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) {
  %684 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 1), uint32] */;
  %685 = cast(%var_1816, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %686 = reshape(%684, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %687 = reshape(%685, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %688 = @func_1376(%686, %687) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %689 = cast(meta[relay.Constant][44] /* ty=Tensor[(4, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 1), uint32] */;
  %690 = %688.3;
  %691 = cast(%690, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %692 = reshape(%689, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %693 = reshape(%691, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %694 = @func_1376(%692, %693) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %695 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %696 = %695.0;
  %697 = cast(%696, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
  %698 = log10(%697) /* ty=Tensor[(12, 15, 13), float64] */;
  %699 = cast(%696, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
  %701 = cast(%698, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %703 = add(%701, %702) /* ty=Tensor[(12, 15, 13), uint8] */;
  %704 = cast(%698, dtype="uint32") /* ty=Tensor[(12, 15, 13), uint32] */;
  %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
  %706 = cast(%703, dtype="uint32") /* ty=Tensor[(12, 15, 13), uint32] */;
  %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %708 = %694.0;
  %709 = right_shift(%706, %707) /* ty=Tensor[(12, 15, 13), uint32] */;
  (%690, meta[relay.Constant][44] /* ty=Tensor[(4, 1), uint32] */, %var_1816, %708, %709)
}

def @func_2198(%var_2193: Tensor[(2, 72), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) {
  %710 = cast(%var_2193, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
  %711 = reshape(%710, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %712 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
  %713 = @func_392(%711) /* ty=Tensor[(12, 1, 12), float64] */;
  (%712, %713, %var_2193)
}

def @func_4295(%var_4236: uint8, %var_4237: Tensor[(10, 16, 15), uint8], %var_4279: Tensor[(4, 24), uint64], %var_4280: Tensor[(48), uint8]) -> (Tensor[(12, 15, 13), int64], Tensor[(10, 16, 15), bool], Tensor[(10, 16, 15), float64], Tensor[(2184), int32], Tensor[(2, 8), uint64], Tensor[(4, 24), uint64], Tensor[(48), uint8]) {
  %714 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %715 = cast(%var_4236, dtype="uint8") /* ty=uint8 */;
  %716 = cast(%var_4237, dtype="uint8") /* ty=Tensor[(10, 16, 15), uint8] */;
  %717 = minimum(%715, %716) /* ty=Tensor[(10, 16, 15), uint8] */;
  %718 = cast(%717, dtype="bool") /* ty=Tensor[(10, 16, 15), bool] */;
  %719 = cast(%var_4236, dtype="bool") /* ty=bool */;
  %720 = cast(%var_4236, dtype="float64") /* ty=float64 */;
  %721 = cast(%717, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
  %722 = floor_divide(%720, %721) /* ty=Tensor[(10, 16, 15), float64] */;
  %723 = cast(%722, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
  %724 = cast(meta[relay.Constant][45] /* ty=Tensor[(2, 8), uint64] */, dtype="uint64") /* ty=Tensor[(2, 8), uint64] */;
  %725 = cast(%var_4279, dtype="uint64") /* ty=Tensor[(4, 24), uint64] */;
  %726 = cast(%var_4280, dtype="uint8") /* ty=Tensor[(48), uint8] */;
  %727 = reshape(%724, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint64] */;
  %728 = reshape(%725, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), uint64] */;
  %729 = reshape(%726, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), uint8] */;
  %730 = @func_2474(%727, %728, %729) /* ty=(Tensor[(14, 12, 13), int32], Tensor[(2184), int32], Tensor[(4), uint32], Tensor[(1, 12), uint16], Tensor[(6, 2, 8), bool], Tensor[(3, 2, 8), uint16]) */;
  %731 = %714.0;
  %732 = greater(%718, %719) /* ty=Tensor[(10, 16, 15), bool] */;
  %733 = atan(%723) /* ty=Tensor[(10, 16, 15), float64] */;
  %734 = %730.1;
  (%731, %732, %733, %734, meta[relay.Constant][45] /* ty=Tensor[(2, 8), uint64] */, %var_4279, %var_4280)
}

def @func_6780() -> Tensor[(12, 15, 13), float32] {
  %735 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %736 = %735.0;
  %737 = cast(%736, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  asinh(%737) /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_4344(%var_4338: Tensor[(12, 15, 13), int32]) -> (Tensor[(12, 15, 13), bool],) {
  %738 = @func_3874() /* ty=(Tensor[(12, 15, 13), int32],) */;
  %739 = %738.0;
  %740 = cast(%var_4338, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %741 = shape_of(%739, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%739, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = logical_or(%742, %743) /* ty=Tensor[(12, 15, 13), bool] */;
  (%744,)
}

def @func_297(%var_283: Tensor[(4, 3), uint16]) -> Tensor[(4, 3), uint16] {
  %745 = cast(meta[relay.Constant][46] /* ty=Tensor[(4, 3), uint16] */, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %746 = shape_of(%var_283, dtype="int32") /* ty=Tensor[(2), int32] */;
  %747 = cast(%var_283, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  left_shift(%747, %748) /* ty=Tensor[(4, 3), uint16] */
}

def @func_3356() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_5550() -> (Tensor[(10, 4, 12), float32],) {
  %749 = @func_4073() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %750 = %749.0;
  (%750,)
}

def @func_3552() -> (Tensor[(12, 15, 13), int64],) {
  %751 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
  (%751,)
}

def @func_6196() -> (Tensor[(12, 15, 13), int64],) {
  %752 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %753 = %752.0;
  (%753,)
}

def @func_6976(%var_6971: Tensor[(4), uint32], %var_6972: Tensor[(12, 1), uint16]) -> (Tensor[(12, 15, 13), float32], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1), uint16]) {
  %754 = cast(%var_6971, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %755 = cast(%var_6972, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %756 = reshape(%754, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %757 = reshape(%755, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %758 = @func_1889(%756, %757) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
  %759 = @func_3944() /* ty=Tensor[(12, 15, 13), float32] */;
  %760 = %758.2;
  (%759, %760, %var_6971, %var_6972)
}

def @func_978(%var_970: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  %761 = cast(%var_970, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
  %762 = sqrt(%761) /* ty=Tensor[(13, 15, 14), float32] */;
  (%762,)
}

def @func_4134() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_6257() -> Tensor[(10, 4, 12), float32] {
  %763 = @func_4814() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %763.0
}

def @func_2360() -> Tensor[(12, 15, 13), int64] {
  %764 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %764.0
}

def @func_2846() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_7190(%var_7185: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16]) {
  %765 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
  %766 = cast(meta[relay.Constant][47] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %767 = cast(%var_7185, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %768 = reshape(%766, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %769 = reshape(%767, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %770 = @func_1376(%768, %769) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %771 = %765.0;
  %772 = %770.1;
  (%771, %772, meta[relay.Constant][47] /* ty=Tensor[(4), uint32] */, %var_7185)
}

def @func_3434() -> (Tensor[(12, 15, 13), int64],) {
  %773 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %774 = %773.0;
  (%774,)
}

def @func_8043() -> (Tensor[(12, 15, 13), float64],) {
  %775 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
  %776 = %775.0;
  (%776,)
}

def @func_2812() -> Tensor[(12, 15, 13), int32] {
  %777 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  %778 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int32") /* ty=Tensor[(12, 15, 13), int32] */;
  %779 = shape_of(%777, dtype="int32") /* ty=Tensor[(3), int32] */;
  %780 = cast(%777, dtype="int32") /* ty=Tensor[(12, 15, 13), int32] */;
  %781 = dyn.reshape(%778, %779, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  minimum(%780, %781) /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_5251(%var_5187: Tensor[(16, 10, 1), float32], %var_5208: Tensor[(2730), float32]) -> (Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) {
  %782 = cast(%var_5187, dtype="float32") /* ty=Tensor[(16, 10, 1), float32] */;
  %783 = cast(meta[relay.Constant][49] /* ty=Tensor[(3, 4), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4), uint16] */;
  %784 = reshape(%783, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %785 = @func_1798(%784) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %786 = %785.0;
  %787 = cast(%var_5208, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %788 = reshape(%787, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %789 = @func_1353(%788) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %790 = %789.3;
  %791 = cast(%790, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %792 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %793 = cast(%786, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %794 = dyn.reshape(%791, %792, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %795 = tan(%782) /* ty=Tensor[(16, 10, 1), float32] */;
  %796 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  %797 = not_equal(%793, %794) /* ty=Tensor[(12, 15, 13), bool] */;
  (%795, %var_5208, meta[relay.Constant][49] /* ty=Tensor[(3, 4), uint16] */, %796, %797)
}

def @func_3736(%var_3686: Tensor[(12, 1), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(7, 234), float64], Tensor[(12, 15, 13), int64], Tensor[(120), uint32], Tensor[(120), float64], Tensor[(14, 12, 13), int32], Tensor[(12, 182), int32]) {
  %798 = @func_3434() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %799 = cast(%var_3686, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %800 = reshape(%799, newshape=[4, 3]) /* ty=Tensor[(4, 3), uint16] */;
  %801 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 234), float64] */, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
  %802 = cast(meta[relay.Constant][50] /* ty=Tensor[(7, 234), float64] */, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
  %803 = reshape(%801, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %804 = reshape(%802, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %805 = @func_3434() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %806 = cast(meta[relay.Constant][51] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %807 = cast(meta[relay.Constant][51] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %808 = reshape(%806, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %809 = reshape(%807, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %810 = @func_3101(%808, %809) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(120), uint32]) */;
  %811 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 182), int32] */, dtype="int32") /* ty=Tensor[(12, 182), int32] */;
  %812 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 182), int32] */, dtype="int32") /* ty=Tensor[(12, 182), int32] */;
  %813 = reshape(%811, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %814 = reshape(%812, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %815 = @func_2019(%813, %814) /* ty=(Tensor[(14, 12, 13), int32],) */;
  %816 = %798.0;
  %817 = @func_297(%800) /* ty=Tensor[(4, 3), uint16] */;
  %818 = @func_33(%803, %804) /* ty=Tensor[(14, 9, 13), float64] */;
  %819 = %805.0;
  %820 = %810.2;
  %821 = %815.0;
  (%816, %817, %var_3686, %818, meta[relay.Constant][50] /* ty=Tensor[(7, 234), float64] */, %819, %820, meta[relay.Constant][51] /* ty=Tensor[(120), float64] */, %821, meta[relay.Constant][52] /* ty=Tensor[(12, 182), int32] */)
}

def @func_4821() -> (Tensor[(12, 15, 13), int64],) {
  %822 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
  (%822,)
}

def @func_6136(%var_6128: Tensor[(10, 15, 16), float32], %var_6129: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float32],) {
  %823 = cast(%var_6129, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %824 = shape_of(%var_6128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_6128, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %827 = mod(%825, %826) /* ty=Tensor[(10, 15, 16), float32] */;
  (%827,)
}

def @func_3262() -> Tensor[(700), float64] {
  %828 = @func_2604() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */;
  %829 = %828.3;
  %830 = cast(%829, dtype="float64") /* ty=Tensor[(700), float64] */;
  log(%830) /* ty=Tensor[(700), float64] */
}

def @func_3840(%var_3796: Tensor[(7, 14, 4), float32], %var_3829: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(7, 14, 4), float64]) {
  %831 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %832 = cast(%var_3829, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %833 = reshape(%832, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %834 = @func_1798(%833) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %835 = cast(%var_3796, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %836 = shape_of(meta[relay.Constant][53] /* ty=Tensor[(7, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %837 = cast(meta[relay.Constant][53] /* ty=Tensor[(7, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
  %838 = dyn.reshape(%835, %836, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %839 = divide(%837, %838) /* ty=Tensor[(7, 14, 4), float32] */;
  %840 = cast(%839, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
  %841 = %831.0;
  %842 = %834.5;
  %843 = atan(%840) /* ty=Tensor[(7, 14, 4), float64] */;
  (%841, %842, %var_3829, %843)
}

def @func_4178(%var_4140: Tensor[(11, 13, 4), float32], %var_4141: Tensor[(11, 13, 4), float32]) -> (Tensor[(11, 13, 4), float64],) {
  %844 = cast(%var_4141, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %845 = shape_of(%var_4140, dtype="int32") /* ty=Tensor[(3), int32] */;
  %846 = cast(%var_4140, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
  %847 = dyn.reshape(%844, %845, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %848 = multiply(%846, %847) /* ty=Tensor[(11, 13, 4), float32] */;
  %849 = cast(%848, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
  %850 = acos(%849) /* ty=Tensor[(11, 13, 4), float64] */;
  (%850,)
}

def @func_2920() -> Tensor[(12, 15, 13), int64] {
  %851 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %851.0
}

def @func_5816(%var_5804: Tensor[(8, 12, 9), float32], %var_5805: Tensor[(8, 12, 9), float32]) -> (Tensor[(8, 12, 9), float32],) {
  %852 = cast(%var_5805, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %853 = shape_of(%var_5804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %854 = cast(%var_5804, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %855 = dyn.reshape(%852, %853, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %856 = floor_divide(%854, %855) /* ty=Tensor[(8, 12, 9), float32] */;
  (%856,)
}

def @func_2019(%var_2011: Tensor[(14, 12, 13), int32], %var_2012: Tensor[(14, 12, 13), int32]) -> (Tensor[(14, 12, 13), int32],) {
  %857 = cast(%var_2012, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %858 = shape_of(%var_2011, dtype="int32") /* ty=Tensor[(3), int32] */;
  %859 = cast(%var_2011, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
  %860 = dyn.reshape(%857, %858, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %861 = subtract(%859, %860) /* ty=Tensor[(14, 12, 13), int32] */;
  (%861,)
}

def @func_5922() -> (Tensor[(13, 15, 14), float32],) {
  %862 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
  %863 = %862.1;
  (%863,)
}

def @func_7709() -> (Tensor[(12, 15, 13), int32], Tensor[(700), float32], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) {
  %864 = @func_2604() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */;
  %865 = cast(meta[relay.Constant][54] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %866 = cast(meta[relay.Constant][55] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %867 = reshape(%865, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %868 = reshape(%866, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %869 = @func_5172(%867, %868) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) */;
  %870 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  %871 = %864.3;
  %872 = %869.2;
  (%870, %871, %872, meta[relay.Constant][54] /* ty=Tensor[(12), uint16] */, meta[relay.Constant][55] /* ty=Tensor[(144), float64] */)
}

def @func_5544() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) {
  %873 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
  %874 = @func_4083() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %875 = %873.0;
  %876 = %874.0;
  (%875, %876)
}

def @func_2310(%var_2295: Tensor[(11, 6, 14), uint64]) -> (Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) {
  %877 = cast(meta[relay.Constant][56] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %878 = cast(meta[relay.Constant][56] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %879 = reshape(%877, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %880 = reshape(%878, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %881 = @func_1257(%879, %880) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %882 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 14), float64] */;
  %883 = atan(%882) /* ty=Tensor[(1, 6, 14), float64] */;
  %884 = cast(meta[relay.Constant][57] /* ty=Tensor[(1, 6, 14), float64] */, dtype="uint64") /* ty=Tensor[(1, 6, 14), uint64] */;
  %885 = shape_of(%883, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%883, dtype="uint64") /* ty=Tensor[(1, 6, 14), uint64] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %888 = bitwise_and(%886, %887) /* ty=Tensor[(?, 6, 14), uint64] */;
  %889 = cast(%888, dtype="uint64") /* ty=Tensor[(?, 6, 14), uint64] */;
  %890 = cast(%var_2295, dtype="uint64") /* ty=Tensor[(11, 6, 14), uint64] */;
  %891 = %881.1;
  %892 = @func_2139() /* ty=Tensor[(12, 15, 13), int64] */;
  %893 = maximum(%889, %890) /* ty=Tensor[(11, 6, 14), uint64] */;
  (%891, meta[relay.Constant][56] /* ty=Tensor[(700), float32] */, %892, %893)
}

def @func_6243() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_1889(%var_1875: Tensor[(4), uint32], %var_1876: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) {
  %894 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %895 = cast(meta[relay.Constant][58] /* ty=Tensor[(70, 10), float32] */, dtype="float32") /* ty=Tensor[(70, 10), float32] */;
  %896 = reshape(%895, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %897 = @func_1621(%896) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) */;
  %898 = cast(%var_1875, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %899 = cast(%var_1876, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %900 = reshape(%898, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %901 = reshape(%899, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %902 = @func_1376(%900, %901) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %903 = cast(%var_1876, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %904 = reshape(%903, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %905 = @func_1837(%904) /* ty=(Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) */;
  %906 = %894.0;
  %907 = %897.0;
  %908 = %902.1;
  %909 = %905.0;
  (%906, %907, meta[relay.Constant][58] /* ty=Tensor[(70, 10), float32] */, %908, %var_1875, %var_1876, %909)
}

def @func_7015() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64]) {
  %910 = @func_5544() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */;
  %911 = @func_2139() /* ty=Tensor[(12, 15, 13), int64] */;
  %912 = @func_6780() /* ty=Tensor[(12, 15, 13), float32] */;
  %913 = %910.0;
  (%911, %912, %913)
}

def @func_4814() -> (Tensor[(10, 4, 12), float32],) {
  %914 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%914,)
}

def @func_7454() -> (Tensor[(12, 15, 13), int64], Tensor[(700), float32], Tensor[(700), float32]) {
  %915 = @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */;
  %916 = cast(meta[relay.Constant][59] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %917 = reshape(%916, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %918 = @func_1621(%917) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) */;
  %919 = %915.0;
  %920 = %918.2;
  (%919, %920, meta[relay.Constant][59] /* ty=Tensor[(700), float32] */)
}

def @func_1621(%var_1617: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) {
  %921 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %922 = cast(%var_1617, dtype="float32") /* ty=Tensor[(700), float32] */;
  %923 = cast(%var_1617, dtype="float32") /* ty=Tensor[(700), float32] */;
  %924 = reshape(%922, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %925 = reshape(%923, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %926 = @func_1257(%924, %925) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %927 = %921.0;
  %928 = %926.3;
  (%927, %928, %var_1617)
}

def @main(%var_8111: Tensor[(12, 15, 13), int64]) -> Tensor[(12, 15, 13), float32] {
  %929 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
  %930 = %929.0;
  %931 = cast(%var_8111, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %932 = shape_of(%930, dtype="int32") /* ty=Tensor[(3), int32] */;
  %933 = cast(%930, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %934 = dyn.reshape(%931, %932, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%933, %934) /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_6338(%var_6325: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) {
  %935 = cast(%var_6325, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %936 = cast(meta[relay.Constant][60] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %937 = reshape(%935, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %938 = reshape(%936, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %939 = @func_5172(%937, %938) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) */;
  %940 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  %941 = %939.2;
  (%940, %941, %var_6325, meta[relay.Constant][60] /* ty=Tensor[(144), float64] */)
}

def @func_3003(%var_2939: Tensor[(2, 2, 3), uint64]) -> (Tensor[(2, 2, 3), uint64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(2, 2, 3), float32], Tensor[(12), uint16]) {
  %942 = cast(meta[relay.Constant][61] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %943 = cast(%var_2939, dtype="uint64") /* ty=Tensor[(2, 2, 3), uint64] */;
  %944 = cast(meta[relay.Constant][62] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %945 = reshape(%944, newshape=[2, 72]) /* ty=Tensor[(2, 72), float64] */;
  %946 = @func_2198(%945) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) */;
  %947 = cast(meta[relay.Constant][63] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %948 = reshape(%947, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %949 = @func_1353(%948) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %950 = cast(meta[relay.Constant][61] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %951 = cast(%var_2939, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %952 = divide(%950, %951) /* ty=Tensor[(2, 2, 3), float64] */;
  %953 = cast(%952, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
  %954 = cast(%var_2939, dtype="uint16") /* ty=Tensor[(2, 2, 3), uint16] */;
  %955 = reshape(%954, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %956 = @func_1837(%955) /* ty=(Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) */;
  %957 = bitwise_xor(%942, %943) /* ty=Tensor[(2, 2, 3), uint64] */;
  %958 = %946.1;
  %959 = %949.2;
  %960 = atan(%953) /* ty=Tensor[(2, 2, 3), float32] */;
  %961 = %956.2;
  (%957, %958, meta[relay.Constant][62] /* ty=Tensor[(144), float64] */, %959, meta[relay.Constant][63] /* ty=Tensor[(2730), float32] */, %960, %961)
}

def @func_2526() -> Tensor[(10, 4, 12), float32] {
  %962 = cast(meta[relay.Constant][64] /* ty=Tensor[(10, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  atan(%962) /* ty=Tensor[(10, 4, 12), float32] */
}

def @func_3034() -> (Tensor[(10, 4, 12), float32],) {
  %963 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  %964 = cast(meta[relay.Constant][65] /* ty=Tensor[(10, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %965 = shape_of(%963, dtype="int32") /* ty=Tensor[(3), int32] */;
  %966 = cast(%963, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %967 = dyn.reshape(%964, %965, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %968 = power(%966, %967) /* ty=Tensor[(10, 4, 12), float32] */;
  (%968,)
}

def @func_2101(%var_2061: Tensor[(12), uint16], %var_2075: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) {
  %969 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %970 = cast(%var_2061, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %971 = reshape(%970, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %972 = @func_1601(%971) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */;
  %973 = cast(%var_2075, dtype="float64") /* ty=Tensor[(144), float64] */;
  %974 = reshape(%973, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %975 = cast(meta[relay.Constant][66] /* ty=Tensor[(10, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %976 = reshape(%975, newshape=[2, 15, 1]) /* ty=Tensor[(2, 15, 1), float32] */;
  %977 = %969.0;
  %978 = %972.0;
  %979 = @func_392(%974) /* ty=Tensor[(12, 1, 12), float64] */;
  %980 = @func_1495(%976) /* ty=Tensor[(2, 15, 1), float32] */;
  (%977, %978, %var_2061, %979, %var_2075, %980, meta[relay.Constant][66] /* ty=Tensor[(10, 3), float32] */)
}

def @func_2175() -> (Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) {
  %981 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %982 = %981.0;
  %983 = cast(%982, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
  %984 = cast(meta[relay.Constant][67] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %985 = reshape(%984, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
  %986 = @func_978(%985) /* ty=(Tensor[(13, 15, 14), float32],) */;
  %987 = cast(meta[relay.Constant][68] /* ty=Tensor[(6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2), uint16] */;
  %988 = reshape(%987, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %989 = @func_1798(%988) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %990 = sigmoid(%983) /* ty=Tensor[(12, 15, 13), float64] */;
  %991 = %986.0;
  %992 = %989.2;
  (%990, %991, meta[relay.Constant][67] /* ty=Tensor[(2730), float32] */, %992, meta[relay.Constant][68] /* ty=Tensor[(6, 2), uint16] */)
}

def @func_5743() -> Tensor[(10, 4, 12), float32] {
  %993 = @func_5550() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %993.0
}

def @func_5622() -> Tensor[(10, 4, 12), float32] {
  %994 = @func_5296() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %994.0
}

def @func_7846() -> Tensor[(12, 15, 13), int32] {
  %995 = @func_6630() /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(10, 4, 12), float32], Tensor[(480), float32]) */;
  %995.2
}

def @func_4073() -> (Tensor[(10, 4, 12), float32],) {
  %996 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %997 = %996.0;
  (%997,)
}

def @func_7362() -> (Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) {
  %998 = @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */;
  %999 = cast(meta[relay.Constant][69] /* ty=Tensor[(2, 432), float32] */, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
  %1000 = cast(meta[relay.Constant][69] /* ty=Tensor[(2, 432), float32] */, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
  %1001 = reshape(%999, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %1002 = reshape(%1000, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %1003 = @func_5816(%1001, %1002) /* ty=(Tensor[(8, 12, 9), float32],) */;
  %1004 = %998.1;
  %1005 = @func_5088() /* ty=Tensor[(10, 4, 12), float32] */;
  %1006 = %1003.0;
  (%1004, %1005, %1006, meta[relay.Constant][69] /* ty=Tensor[(2, 432), float32] */)
}

def @func_5778(%var_5755: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), float64], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(10, 4, 12), float32]) {
  %1007 = @func_5622() /* ty=Tensor[(10, 4, 12), float32] */;
  %1008 = cast(%var_5755, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %1009 = shape_of(%1007, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1010 = cast(%1007, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1012 = cast(meta[relay.Constant][70] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %1013 = cast(meta[relay.Constant][71] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %1014 = reshape(%1012, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %1015 = reshape(%1013, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %1016 = @func_1889(%1014, %1015) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
  %1017 = floor_divide(%1010, %1011) /* ty=Tensor[(10, 4, 12), float64] */;
  %1018 = %1016.5;
  %1019 = @func_5622() /* ty=Tensor[(10, 4, 12), float32] */;
  (%1017, %1018, meta[relay.Constant][70] /* ty=Tensor[(4), uint32] */, meta[relay.Constant][71] /* ty=Tensor[(12), uint16] */, %1019)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_3480(%var_3478: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), float64], Tensor[(12, 15, 13), int64], Tensor[(2730), float32]) {
  @func_3477(%var_3478) /* ty=(Tensor[(14, 5, 2), float64], Tensor[(12, 15, 13), int64], Tensor[(2730), float32]) */
}

def @func_6244() -> Tensor[(12, 15, 13), int32] {
  %0 = fn () -> Tensor[(12, 15, 13), int32] {
    @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
  };
  %0() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_6196() -> (Tensor[(12, 15, 13), int64],) {
  %1 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %2 = %1.0;
  (%2,)
}

def @func_1379(%var_1377: Tensor[(1, 4), uint32], %var_1378: Tensor[(12, 1), uint16]) -> (Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) {
  %11 = fn (%var_1366: Tensor[(1, 4), uint32], %var_1374: Tensor[(12, 1), uint16]) -> (Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) {
    %3 = cast(meta[relay.Constant][0] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %4 = cast(%var_1366, dtype="uint32") /* ty=Tensor[(1, 4), uint32] */;
    %5 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %6 = cast(%var_1374, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
    %7 = reshape(%6, newshape=[4, 3]) /* ty=Tensor[(4, 3), uint16] */;
    %8 = bitwise_or(%3, %4) /* ty=Tensor[(1, 4), uint32] */;
    %9 = %5.0;
    %10 = @func_297(%7) /* ty=Tensor[(4, 3), uint16] */;
    (%8, %9, %10, %var_1374)
  };
  %11(%var_1377, %var_1378) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */
}

def @func_4181(%var_4179: Tensor[(11, 13, 4), float32], %var_4180: Tensor[(11, 13, 4), float32]) -> (Tensor[(11, 13, 4), float64],) {
  %19 = fn (%var_4140: Tensor[(11, 13, 4), float32], %var_4141: Tensor[(11, 13, 4), float32]) -> (Tensor[(11, 13, 4), float64],) {
    %12 = cast(%var_4141, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
    %13 = shape_of(%var_4140, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%var_4140, dtype="float32") /* ty=Tensor[(11, 13, 4), float32] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %16 = multiply(%14, %15) /* ty=Tensor[(11, 13, 4), float32] */;
    %17 = cast(%16, dtype="float64") /* ty=Tensor[(11, 13, 4), float64] */;
    %18 = acos(%17) /* ty=Tensor[(11, 13, 4), float64] */;
    (%18,)
  };
  %19(%var_4179, %var_4180) /* ty=(Tensor[(11, 13, 4), float64],) */
}

def @func_3262() -> Tensor[(700), float64] {
  %20 = @func_2604() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */;
  %21 = %20.3;
  %22 = cast(%21, dtype="float64") /* ty=Tensor[(700), float64] */;
  log(%22) /* ty=Tensor[(700), float64] */
}

def @func_3034() -> (Tensor[(10, 4, 12), float32],) {
  %23 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  %24 = cast(meta[relay.Constant][1] /* ty=Tensor[(10, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %28 = power(%26, %27) /* ty=Tensor[(10, 4, 12), float32] */;
  (%28,)
}

def @func_297(%var_283: Tensor[(4, 3), uint16]) -> Tensor[(4, 3), uint16] {
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(4, 3), uint16] */, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %30 = shape_of(%var_283, dtype="int32") /* ty=Tensor[(2), int32] */;
  %31 = cast(%var_283, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
  %32 = dyn.reshape(%29, %30, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  left_shift(%31, %32) /* ty=Tensor[(4, 3), uint16] */
}

def @func_7164() -> (Tensor[(12, 15, 13), int64],) {
  @func_7162() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_8088() -> Tensor[(12, 15, 13), int32] {
  @func_8086() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_4135() -> Tensor[(12, 15, 13), int32] {
  %33 = fn () -> Tensor[(12, 15, 13), int32] {
    @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
  };
  %33() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_1971() -> Tensor[(12, 15, 13), int64] {
  @func_1969() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_2614() -> (Tensor[(12, 15, 13), int64],) {
  %35 = fn () -> (Tensor[(12, 15, 13), int64],) {
    %34 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
    (%34,)
  };
  %35() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_5816(%var_5804: Tensor[(8, 12, 9), float32], %var_5805: Tensor[(8, 12, 9), float32]) -> (Tensor[(8, 12, 9), float32],) {
  %36 = cast(%var_5805, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %37 = shape_of(%var_5804, dtype="int32") /* ty=Tensor[(3), int32] */;
  %38 = cast(%var_5804, dtype="float32") /* ty=Tensor[(8, 12, 9), float32] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %40 = floor_divide(%38, %39) /* ty=Tensor[(8, 12, 9), float32] */;
  (%40,)
}

def @func_2605() -> (Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) {
  %60 = fn () -> (Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) {
    %41 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %43 = cast(meta[relay.Constant][4] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %44 = reshape(%42, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
    %45 = reshape(%43, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
    %46 = @func_1257(%44, %45) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
    %47 = cast(meta[relay.Constant][3] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %48 = reshape(%47, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
    %49 = @func_392(%48) /* ty=Tensor[(12, 1, 12), float64] */;
    %50 = cast(%49, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    %51 = reshape(%50, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
    %52 = @func_392(%51) /* ty=Tensor[(12, 1, 12), float64] */;
    %53 = cast(%52, dtype="uint64") /* ty=Tensor[(12, 1, 12), uint64] */;
    %54 = shape_of(%49, dtype="int32") /* ty=Tensor[(3), int32] */;
    %55 = cast(%49, dtype="uint64") /* ty=Tensor[(12, 1, 12), uint64] */;
    %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %57 = %41.0;
    %58 = %46.0;
    %59 = bitwise_and(%55, %56) /* ty=Tensor[(12, ?, 12), uint64] */;
    (%57, meta[relay.Constant][3] /* ty=Tensor[(144), float64] */, %58, meta[relay.Constant][4] /* ty=Tensor[(700), float32] */, %59)
  };
  %60() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */
}

def @func_1260(%var_1258: Tensor[(14, 10, 5), float32], %var_1259: Tensor[(14, 10, 5), float32]) -> (Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) {
  %86 = fn (%var_1209: Tensor[(14, 10, 5), float32], %var_1210: Tensor[(14, 10, 5), float32]) -> (Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) {
    %61 = cast(meta[relay.Constant][5] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %62 = cast(meta[relay.Constant][5] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %63 = reshape(%61, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %64 = reshape(%62, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %67 = reshape(%65, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %68 = reshape(%66, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %69 = cast(%var_1210, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
    %70 = shape_of(%var_1209, dtype="int32") /* ty=Tensor[(3), int32] */;
    %71 = cast(%var_1209, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
    %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %73 = less(%71, %72) /* ty=Tensor[(14, 10, 5), bool] */;
    %74 = cast(%var_1210, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
    %75 = shape_of(%73, dtype="int32") /* ty=Tensor[(3), int32] */;
    %76 = cast(%73, dtype="float64") /* ty=Tensor[(14, 10, 5), float64] */;
    %77 = dyn.reshape(%74, %75, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %78 = cast(%73, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
    %79 = shape_of(%var_1210, dtype="int32") /* ty=Tensor[(3), int32] */;
    %80 = cast(%var_1210, dtype="bool") /* ty=Tensor[(14, 10, 5), bool] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %82 = @func_33(%63, %64) /* ty=Tensor[(14, 9, 13), float64] */;
    %83 = @func_33(%67, %68) /* ty=Tensor[(14, 9, 13), float64] */;
    %84 = divide(%76, %77) /* ty=Tensor[(14, 10, 5), float64] */;
    %85 = not_equal(%80, %81) /* ty=Tensor[(14, 10, 5), bool] */;
    (%82, meta[relay.Constant][5] /* ty=Tensor[(1638), float64] */, %83, %84, %85)
  };
  %86(%var_1258, %var_1259) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */
}

def @func_4020(%var_4019: Tensor[(1, 4), uint32]) -> (Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) {
  %101 = fn (%var_4009: Tensor[(1, 4), uint32]) -> (Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) {
    %87 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
    %88 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 15, 13), int64] */, dtype="uint64") /* ty=Tensor[(12, 15, 13), uint64] */;
    %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(%87, dtype="uint64") /* ty=Tensor[(12, 15, 13), uint64] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %92 = cast(%var_4009, dtype="uint32") /* ty=Tensor[(1, 4), uint32] */;
    %93 = cast(meta[relay.Constant][7] /* ty=Tensor[(6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2), uint16] */;
    %94 = reshape(%92, newshape=[4]) /* ty=Tensor[(4), uint32] */;
    %95 = reshape(%93, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %96 = @func_1889(%94, %95) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
    %97 = bitwise_or(%90, %91) /* ty=Tensor[(12, 15, 13), uint64] */;
    %98 = @func_2812() /* ty=Tensor[(12, 15, 13), int32] */;
    %99 = %96.5;
    %100 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
    (%97, %98, %99, %var_4009, meta[relay.Constant][7] /* ty=Tensor[(6, 2), uint16] */, %100)
  };
  %101(%var_4019) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) */
}

def @func_3673(%var_3662: Tensor[(1, 3, 9), float32]) -> (Tensor[(1, 3, 9), float32],) {
  %102 = cast(%var_3662, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %103 = sqrt(%102) /* ty=Tensor[(1, 3, 9), float32] */;
  %104 = cast(%103, dtype="float32") /* ty=Tensor[(1, 3, 9), float32] */;
  %105 = sinh(%104) /* ty=Tensor[(1, 3, 9), float32] */;
  (%105,)
}

def @func_5844() -> Tensor[(12, 15, 13), int64] {
  @func_3045() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_1512(%var_1506: Tensor[(12, 15, 13), int64]) -> Tensor[(12, 15, 13), bool] {
  %106 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %107 = %106.0;
  %108 = cast(%var_1506, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%110, %111) /* ty=Tensor[(12, 15, 13), bool] */
}

def @func_4631(%var_4579: Tensor[(3, 10, 3), float64], %var_4580: Tensor[(3, 10, 3), float64]) -> (Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) {
  %112 = cast(%var_4580, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %113 = shape_of(%var_4579, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%var_4579, dtype="float64") /* ty=Tensor[(3, 10, 3), float64] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %116 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 2), uint32] */, dtype="uint32") /* ty=Tensor[(2, 2), uint32] */;
  %117 = reshape(%116, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %118 = @func_4018(%117) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) */;
  %119 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %120 = multiply(%114, %115) /* ty=Tensor[(3, 10, 3), float64] */;
  %121 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  %122 = %118.1;
  %123 = %119.0;
  (%120, %121, %122, meta[relay.Constant][8] /* ty=Tensor[(2, 2), uint32] */, %123)
}

def @func_4300(%var_4296: uint8, %var_4297: Tensor[(10, 16, 15), uint8], %var_4298: Tensor[(4, 24), uint64], %var_4299: Tensor[(48), uint8]) -> (Tensor[(12, 15, 13), int64], Tensor[(10, 16, 15), bool], Tensor[(10, 16, 15), float64], Tensor[(2184), int32], Tensor[(2, 8), uint64], Tensor[(4, 24), uint64], Tensor[(48), uint8]) {
  %145 = fn (%var_4236: uint8, %var_4237: Tensor[(10, 16, 15), uint8], %var_4279: Tensor[(4, 24), uint64], %var_4280: Tensor[(48), uint8]) -> (Tensor[(12, 15, 13), int64], Tensor[(10, 16, 15), bool], Tensor[(10, 16, 15), float64], Tensor[(2184), int32], Tensor[(2, 8), uint64], Tensor[(4, 24), uint64], Tensor[(48), uint8]) {
    %124 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %125 = cast(%var_4236, dtype="uint8") /* ty=uint8 */;
    %126 = cast(%var_4237, dtype="uint8") /* ty=Tensor[(10, 16, 15), uint8] */;
    %127 = minimum(%125, %126) /* ty=Tensor[(10, 16, 15), uint8] */;
    %128 = cast(%127, dtype="bool") /* ty=Tensor[(10, 16, 15), bool] */;
    %129 = cast(%var_4236, dtype="bool") /* ty=bool */;
    %130 = cast(%var_4236, dtype="float64") /* ty=float64 */;
    %131 = cast(%127, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
    %132 = floor_divide(%130, %131) /* ty=Tensor[(10, 16, 15), float64] */;
    %133 = cast(%132, dtype="float64") /* ty=Tensor[(10, 16, 15), float64] */;
    %134 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 8), uint64] */, dtype="uint64") /* ty=Tensor[(2, 8), uint64] */;
    %135 = cast(%var_4279, dtype="uint64") /* ty=Tensor[(4, 24), uint64] */;
    %136 = cast(%var_4280, dtype="uint8") /* ty=Tensor[(48), uint8] */;
    %137 = reshape(%134, newshape=[1, 2, 8]) /* ty=Tensor[(1, 2, 8), uint64] */;
    %138 = reshape(%135, newshape=[6, 2, 8]) /* ty=Tensor[(6, 2, 8), uint64] */;
    %139 = reshape(%136, newshape=[3, 2, 8]) /* ty=Tensor[(3, 2, 8), uint8] */;
    %140 = @func_2474(%137, %138, %139) /* ty=(Tensor[(14, 12, 13), int32], Tensor[(2184), int32], Tensor[(4), uint32], Tensor[(1, 12), uint16], Tensor[(6, 2, 8), bool], Tensor[(3, 2, 8), uint16]) */;
    %141 = %124.0;
    %142 = greater(%128, %129) /* ty=Tensor[(10, 16, 15), bool] */;
    %143 = atan(%133) /* ty=Tensor[(10, 16, 15), float64] */;
    %144 = %140.1;
    (%141, %142, %143, %144, meta[relay.Constant][9] /* ty=Tensor[(2, 8), uint64] */, %var_4279, %var_4280)
  };
  %145(%var_4296, %var_4297, %var_4298, %var_4299) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(10, 16, 15), bool], Tensor[(10, 16, 15), float64], Tensor[(2184), int32], Tensor[(2, 8), uint64], Tensor[(4, 24), uint64], Tensor[(48), uint8]) */
}

def @func_2361() -> Tensor[(12, 15, 13), int64] {
  %147 = fn () -> Tensor[(12, 15, 13), int64] {
    %146 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %146.0
  };
  %147() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_6683() -> (Tensor[(12, 15, 13), int64],) {
  %150 = fn () -> (Tensor[(12, 15, 13), int64],) {
    %148 = @func_5544() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */;
    %149 = %148.0;
    (%149,)
  };
  %150() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_5922() -> (Tensor[(13, 15, 14), float32],) {
  %151 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
  %152 = %151.1;
  (%152,)
}

def @func_1889(%var_1875: Tensor[(4), uint32], %var_1876: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) {
  %153 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %154 = cast(meta[relay.Constant][10] /* ty=Tensor[(70, 10), float32] */, dtype="float32") /* ty=Tensor[(70, 10), float32] */;
  %155 = reshape(%154, newshape=[700]) /* ty=Tensor[(700), float32] */;
  %156 = @func_1621(%155) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) */;
  %157 = cast(%var_1875, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %158 = cast(%var_1876, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %159 = reshape(%157, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %160 = reshape(%158, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %161 = @func_1376(%159, %160) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %162 = cast(%var_1876, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %163 = reshape(%162, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %164 = @func_1837(%163) /* ty=(Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) */;
  %165 = %153.0;
  %166 = %156.0;
  %167 = %161.1;
  %168 = %164.0;
  (%165, %166, meta[relay.Constant][10] /* ty=Tensor[(70, 10), float32] */, %167, %var_1875, %var_1876, %168)
}

def @func_7564() -> (Tensor[(12, 15, 13), int64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(12, 15, 13), bool]) {
  @func_7562() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(12, 15, 13), bool]) */
}

def @func_7017() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64]) {
  @func_7015() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64]) */
}

def @func_2813() -> Tensor[(12, 15, 13), int32] {
  %174 = fn () -> Tensor[(12, 15, 13), int32] {
    %169 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
    %170 = cast(meta[relay.Constant][11] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int32") /* ty=Tensor[(12, 15, 13), int32] */;
    %171 = shape_of(%169, dtype="int32") /* ty=Tensor[(3), int32] */;
    %172 = cast(%169, dtype="int32") /* ty=Tensor[(12, 15, 13), int32] */;
    %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    minimum(%172, %173) /* ty=Tensor[(12, 15, 13), int32] */
  };
  %174() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_3264() -> Tensor[(700), float64] {
  @func_3262() /* ty=Tensor[(700), float64] */
}

def @func_1839(%var_1838: Tensor[(12), uint16]) -> (Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) {
  %201 = fn (%var_1816: Tensor[(12), uint16]) -> (Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) {
    %175 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 1), uint32] */;
    %176 = cast(%var_1816, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %177 = reshape(%175, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
    %178 = reshape(%176, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %179 = @func_1376(%177, %178) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
    %180 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 1), uint32] */, dtype="uint32") /* ty=Tensor[(4, 1), uint32] */;
    %181 = %179.3;
    %182 = cast(%181, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
    %183 = reshape(%180, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
    %184 = reshape(%182, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %185 = @func_1376(%183, %184) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
    %186 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %187 = %186.0;
    %188 = cast(%187, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
    %189 = log10(%188) /* ty=Tensor[(12, 15, 13), float64] */;
    %190 = cast(%187, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
    %191 = shape_of(%189, dtype="int32") /* ty=Tensor[(3), int32] */;
    %192 = cast(%189, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
    %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %194 = add(%192, %193) /* ty=Tensor[(12, 15, 13), uint8] */;
    %195 = cast(%189, dtype="uint32") /* ty=Tensor[(12, 15, 13), uint32] */;
    %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
    %197 = cast(%194, dtype="uint32") /* ty=Tensor[(12, 15, 13), uint32] */;
    %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %199 = %185.0;
    %200 = right_shift(%197, %198) /* ty=Tensor[(12, 15, 13), uint32] */;
    (%181, meta[relay.Constant][12] /* ty=Tensor[(4, 1), uint32] */, %var_1816, %199, %200)
  };
  %201(%var_1838) /* ty=(Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) */
}

def @func_36(%var_34: Tensor[(14, 9, 13), float64], %var_35: Tensor[(14, 9, 13), float64]) -> Tensor[(14, 9, 13), float64] {
  %206 = fn (%var_3: Tensor[(14, 9, 13), float64], %var_4: Tensor[(14, 9, 13), float64]) -> Tensor[(14, 9, 13), float64] {
    %202 = cast(%var_4, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
    %203 = shape_of(%var_3, dtype="int32") /* ty=Tensor[(3), int32] */;
    %204 = cast(%var_3, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
    %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    power(%204, %205) /* ty=Tensor[(14, 9, 13), float64] */
  };
  %206(%var_34, %var_35) /* ty=Tensor[(14, 9, 13), float64] */
}

def @func_7285(%var_7215: Tensor[(864), float32], %var_7257: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(14, 9, 13), float64], Tensor[(12, 15, 13), int32], Tensor[(864), float32], Tensor[(12, 15, 13), bool], Tensor[(160), float32], Tensor[(2730), float32], Tensor[(2, 432), float64]) {
  %207 = cast(meta[relay.Constant][13] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %208 = reshape(%207, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %209 = @func_1798(%208) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %210 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %211 = cast(%var_7215, dtype="float32") /* ty=Tensor[(864), float32] */;
  %212 = cast(meta[relay.Constant][14] /* ty=Tensor[(160), float32] */, dtype="float32") /* ty=Tensor[(160), float32] */;
  %213 = cast(%var_7257, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %214 = reshape(%212, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float32] */;
  %215 = reshape(%213, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %216 = @func_5251(%214, %215) /* ty=(Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) */;
  %217 = cast(%var_7215, dtype="float32") /* ty=Tensor[(864), float32] */;
  %218 = reshape(%217, newshape=[2, 432]) /* ty=Tensor[(2, 432), float32] */;
  %219 = @func_6804(%218) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) */;
  %220 = %219.2;
  %221 = cast(%220, dtype="float64") /* ty=Tensor[(2, 432), float64] */;
  %222 = @func_4134() /* ty=Tensor[(12, 15, 13), int32] */;
  %223 = %209.5;
  %224 = %210.1;
  %225 = @func_4493() /* ty=Tensor[(12, 15, 13), int32] */;
  %226 = log10(%211) /* ty=Tensor[(864), float32] */;
  %227 = %216.4;
  %228 = atanh(%221) /* ty=Tensor[(2, 432), float64] */;
  (%222, %223, meta[relay.Constant][13] /* ty=Tensor[(12), uint16] */, %224, %225, %226, %227, meta[relay.Constant][14] /* ty=Tensor[(160), float32] */, %var_7257, %228)
}

def @func_3434() -> (Tensor[(12, 15, 13), int64],) {
  %229 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %230 = %229.0;
  (%230,)
}

def @func_394(%var_393: Tensor[(12, 1, 12), float64]) -> Tensor[(12, 1, 12), float64] {
  %232 = fn (%var_387: Tensor[(12, 1, 12), float64]) -> Tensor[(12, 1, 12), float64] {
    %231 = cast(%var_387, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    log(%231) /* ty=Tensor[(12, 1, 12), float64] */
  };
  %232(%var_393) /* ty=Tensor[(12, 1, 12), float64] */
}

def @func_1498(%var_1496: Tensor[(2, 15, 1), float32]) -> Tensor[(2, 15, 1), float32] {
  @func_1495(%var_1496) /* ty=Tensor[(2, 15, 1), float32] */
}

def @func_4083() -> (Tensor[(12, 15, 13), int64],) {
  %233 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  (%233,)
}

def @func_6630() -> (Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(10, 4, 12), float32], Tensor[(480), float32]) {
  %234 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %235 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
  %236 = cast(meta[relay.Constant][15] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %237 = reshape(%236, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %238 = @func_4018(%237) /* ty=(Tensor[(12, 15, 13), uint64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(6, 2), uint16], Tensor[(10, 4, 12), float32]) */;
  %239 = cast(meta[relay.Constant][16] /* ty=Tensor[(480), float32] */, dtype="float32") /* ty=Tensor[(480), float32] */;
  %240 = reshape(%239, newshape=[10, 4, 12]) /* ty=Tensor[(10, 4, 12), float32] */;
  %241 = @func_5778(%240) /* ty=(Tensor[(10, 4, 12), float64], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(10, 4, 12), float32]) */;
  %242 = @func_4493() /* ty=Tensor[(12, 15, 13), int32] */;
  %243 = %234.0;
  %244 = %235.1;
  %245 = %238.2;
  %246 = %241.4;
  (%242, %243, %244, %245, meta[relay.Constant][15] /* ty=Tensor[(4), uint32] */, %246, meta[relay.Constant][16] /* ty=Tensor[(480), float32] */)
}

def @func_7659(%var_7651: Tensor[(2, 6, 15), float64]) -> (Tensor[(2, 6, 15), float64],) {
  %247 = cast(%var_7651, dtype="float64") /* ty=Tensor[(2, 6, 15), float64] */;
  %248 = sinh(%247) /* ty=Tensor[(2, 6, 15), float64] */;
  (%248,)
}

def @func_2746(%var_2743: Tensor[(4), uint32], %var_2744: Tensor[(12), uint16], %var_2745: Tensor[(350, 2), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(2730), float32], Tensor[(14, 10, 5), float64], Tensor[(350, 2), float32]) {
  %277 = fn (%var_2729: Tensor[(4), uint32], %var_2730: Tensor[(12), uint16], %var_2740: Tensor[(350, 2), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(2730), float32], Tensor[(14, 10, 5), float64], Tensor[(350, 2), float32]) {
    %249 = cast(%var_2729, dtype="uint32") /* ty=Tensor[(4), uint32] */;
    %250 = cast(%var_2730, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %251 = reshape(%249, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
    %252 = reshape(%250, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %253 = @func_1376(%251, %252) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
    %254 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
    %255 = %254.2;
    %256 = cast(%255, dtype="float64") /* ty=Tensor[(2730), float64] */;
    %257 = sinh(%256) /* ty=Tensor[(2730), float64] */;
    %258 = cast(%257, dtype="bool") /* ty=Tensor[(2730), bool] */;
    %259 = shape_of(%255, dtype="int32") /* ty=Tensor[(1), int32] */;
    %260 = cast(%255, dtype="bool") /* ty=Tensor[(2730), bool] */;
    %261 = dyn.reshape(%258, %259, newshape=[]) /* ty=Tensor[(?), bool] */;
    %262 = logical_and(%260, %261) /* ty=Tensor[(2730), bool] */;
    %263 = cast(%262, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %264 = log2(%263) /* ty=Tensor[(2730), float32] */;
    %265 = cast(%257, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(1), int32] */;
    %267 = cast(%264, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?), float32] */;
    %269 = cast(%var_2740, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
    %270 = cast(%var_2740, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
    %271 = reshape(%269, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
    %272 = reshape(%270, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
    %273 = @func_1257(%271, %272) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
    %274 = %253.1;
    %275 = floor_divide(%267, %268) /* ty=Tensor[(2730), float32] */;
    %276 = %273.3;
    (%274, %var_2729, %var_2730, %275, %276, %var_2740)
  };
  %277(%var_2743, %var_2744, %var_2745) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(2730), float32], Tensor[(14, 10, 5), float64], Tensor[(350, 2), float32]) */
}

def @func_6140(%var_6138: Tensor[(10, 15, 16), float32], %var_6139: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float32],) {
  @func_6136(%var_6138, %var_6139) /* ty=(Tensor[(10, 15, 16), float32],) */
}

def @func_7889() -> (Tensor[(12, 15, 13), int64],) {
  @func_7887() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_4312() -> (Tensor[(12, 15, 13), int64],) {
  @func_4310() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_7289(%var_7287: Tensor[(864), float32], %var_7288: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(14, 9, 13), float64], Tensor[(12, 15, 13), int32], Tensor[(864), float32], Tensor[(12, 15, 13), bool], Tensor[(160), float32], Tensor[(2730), float32], Tensor[(2, 432), float64]) {
  @func_7285(%var_7287, %var_7288) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(14, 9, 13), float64], Tensor[(12, 15, 13), int32], Tensor[(864), float32], Tensor[(12, 15, 13), bool], Tensor[(160), float32], Tensor[(2730), float32], Tensor[(2, 432), float64]) */
}

def @func_6198() -> (Tensor[(12, 15, 13), int64],) {
  @func_6196() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_5744() -> Tensor[(10, 4, 12), float32] {
  %279 = fn () -> Tensor[(10, 4, 12), float32] {
    %278 = @func_5550() /* ty=(Tensor[(10, 4, 12), float32],) */;
    %278.0
  };
  %279() /* ty=Tensor[(10, 4, 12), float32] */
}

def @func_300(%var_298: Tensor[(4, 3), uint16]) -> Tensor[(4, 3), uint16] {
  @func_297(%var_298) /* ty=Tensor[(4, 3), uint16] */
}

def @func_3945() -> Tensor[(12, 15, 13), float32] {
  %282 = fn () -> Tensor[(12, 15, 13), float32] {
    %280 = @func_3356() /* ty=Tensor[(12, 15, 13), int32] */;
    %281 = cast(%280, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    sqrt(%281) /* ty=Tensor[(12, 15, 13), float32] */
  };
  %282() /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_4842() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) {
  %286 = fn () -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) {
    %283 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %284 = %283.0;
    %285 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */
}

def @func_2022(%var_2020: Tensor[(14, 12, 13), int32], %var_2021: Tensor[(14, 12, 13), int32]) -> (Tensor[(14, 12, 13), int32],) {
  %292 = fn (%var_2011: Tensor[(14, 12, 13), int32], %var_2012: Tensor[(14, 12, 13), int32]) -> (Tensor[(14, 12, 13), int32],) {
    %287 = cast(%var_2012, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %288 = shape_of(%var_2011, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%var_2011, dtype="int32") /* ty=Tensor[(14, 12, 13), int32] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %291 = subtract(%289, %290) /* ty=Tensor[(14, 12, 13), int32] */;
    (%291,)
  };
  %292(%var_2020, %var_2021) /* ty=(Tensor[(14, 12, 13), int32],) */
}

def @func_3736(%var_3686: Tensor[(12, 1), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(7, 234), float64], Tensor[(12, 15, 13), int64], Tensor[(120), uint32], Tensor[(120), float64], Tensor[(14, 12, 13), int32], Tensor[(12, 182), int32]) {
  %293 = @func_3434() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %294 = cast(%var_3686, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %295 = reshape(%294, newshape=[4, 3]) /* ty=Tensor[(4, 3), uint16] */;
  %296 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 234), float64] */, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
  %297 = cast(meta[relay.Constant][17] /* ty=Tensor[(7, 234), float64] */, dtype="float64") /* ty=Tensor[(7, 234), float64] */;
  %298 = reshape(%296, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %299 = reshape(%297, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %300 = @func_3434() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %301 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %302 = cast(meta[relay.Constant][18] /* ty=Tensor[(120), float64] */, dtype="float64") /* ty=Tensor[(120), float64] */;
  %303 = reshape(%301, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %304 = reshape(%302, newshape=[120]) /* ty=Tensor[(120), float64] */;
  %305 = @func_3101(%303, %304) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(120), uint32]) */;
  %306 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 182), int32] */, dtype="int32") /* ty=Tensor[(12, 182), int32] */;
  %307 = cast(meta[relay.Constant][19] /* ty=Tensor[(12, 182), int32] */, dtype="int32") /* ty=Tensor[(12, 182), int32] */;
  %308 = reshape(%306, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %309 = reshape(%307, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %310 = @func_2019(%308, %309) /* ty=(Tensor[(14, 12, 13), int32],) */;
  %311 = %293.0;
  %312 = @func_297(%295) /* ty=Tensor[(4, 3), uint16] */;
  %313 = @func_33(%298, %299) /* ty=Tensor[(14, 9, 13), float64] */;
  %314 = %300.0;
  %315 = %305.2;
  %316 = %310.0;
  (%311, %312, %var_3686, %313, meta[relay.Constant][17] /* ty=Tensor[(7, 234), float64] */, %314, %315, meta[relay.Constant][18] /* ty=Tensor[(120), float64] */, %316, meta[relay.Constant][19] /* ty=Tensor[(12, 182), int32] */)
}

def @func_4494() -> Tensor[(12, 15, 13), int32] {
  %317 = fn () -> Tensor[(12, 15, 13), int32] {
    @func_3356() /* ty=Tensor[(12, 15, 13), int32] */
  };
  %317() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_6146() -> Tensor[(12, 15, 13), int32] {
  @func_6144() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_5251(%var_5187: Tensor[(16, 10, 1), float32], %var_5208: Tensor[(2730), float32]) -> (Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) {
  %318 = cast(%var_5187, dtype="float32") /* ty=Tensor[(16, 10, 1), float32] */;
  %319 = cast(meta[relay.Constant][20] /* ty=Tensor[(3, 4), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4), uint16] */;
  %320 = reshape(%319, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %321 = @func_1798(%320) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %322 = %321.0;
  %323 = cast(%var_5208, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %324 = reshape(%323, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %325 = @func_1353(%324) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %326 = %325.3;
  %327 = cast(%326, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %328 = shape_of(%322, dtype="int32") /* ty=Tensor[(3), int32] */;
  %329 = cast(%322, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %330 = dyn.reshape(%327, %328, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %331 = tan(%318) /* ty=Tensor[(16, 10, 1), float32] */;
  %332 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  %333 = not_equal(%329, %330) /* ty=Tensor[(12, 15, 13), bool] */;
  (%331, %var_5208, meta[relay.Constant][20] /* ty=Tensor[(3, 4), uint16] */, %332, %333)
}

def @func_1495(%var_1492: Tensor[(2, 15, 1), float32]) -> Tensor[(2, 15, 1), float32] {
  %334 = cast(%var_1492, dtype="float32") /* ty=Tensor[(2, 15, 1), float32] */;
  cosh(%334) /* ty=Tensor[(2, 15, 1), float32] */
}

def @func_5552() -> (Tensor[(10, 4, 12), float32],) {
  @func_5550() /* ty=(Tensor[(10, 4, 12), float32],) */
}

def @func_5705(%var_5703: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(1, 90), float64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(12, 15, 13), int32], Tensor[(14, 9, 13), float64], Tensor[(700), float32]) {
  @func_5702(%var_5703) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(1, 90), float64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(12, 15, 13), int32], Tensor[(14, 9, 13), float64], Tensor[(700), float32]) */
}

def @func_3637() -> (Tensor[(12, 15, 13), int64],) {
  %336 = fn () -> (Tensor[(12, 15, 13), int64],) {
    %335 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
    (%335,)
  };
  %336() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_2922() -> Tensor[(12, 15, 13), int64] {
  @func_2920() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_5255(%var_5253: Tensor[(16, 10, 1), float32], %var_5254: Tensor[(2730), float32]) -> (Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) {
  @func_5251(%var_5253, %var_5254) /* ty=(Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) */
}

def @func_6501() -> (Tensor[(10, 4, 12), float32],) {
  %339 = fn () -> (Tensor[(10, 4, 12), float32],) {
    %337 = @func_4073() /* ty=(Tensor[(10, 4, 12), float32],) */;
    %338 = %337.0;
    (%338,)
  };
  %339() /* ty=(Tensor[(10, 4, 12), float32],) */
}

def @func_5846() -> Tensor[(12, 15, 13), int64] {
  @func_5844() /* ty=Tensor[(12, 15, 13), int64] */
}

def @main(%var_8111: Tensor[(12, 15, 13), int64]) -> Tensor[(12, 15, 13), float32] {
  %340 = @func_4842() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
  %341 = %340.0;
  %342 = cast(%var_8111, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(3), int32] */;
  %344 = cast(%341, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  divide(%344, %345) /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_3047() -> Tensor[(12, 15, 13), int64] {
  @func_3045() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_2479(%var_2476: Tensor[(1, 2, 8), uint64], %var_2477: Tensor[(6, 2, 8), uint64], %var_2478: Tensor[(3, 2, 8), uint8]) -> (Tensor[(14, 12, 13), int32], Tensor[(2184), int32], Tensor[(4), uint32], Tensor[(1, 12), uint16], Tensor[(6, 2, 8), bool], Tensor[(3, 2, 8), uint16]) {
  @func_2474(%var_2476, %var_2477, %var_2478) /* ty=(Tensor[(14, 12, 13), int32], Tensor[(2184), int32], Tensor[(4), uint32], Tensor[(1, 12), uint16], Tensor[(6, 2, 8), bool], Tensor[(3, 2, 8), uint16]) */
}

def @func_1432() -> (Tensor[(12, 15, 13), int64],) {
  @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_5407() -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(10, 4, 12), float32]) {
  @func_5405() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(10, 4, 12), float32]) */
}

def @func_5778(%var_5755: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), float64], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(10, 4, 12), float32]) {
  %346 = @func_5622() /* ty=Tensor[(10, 4, 12), float32] */;
  %347 = cast(%var_5755, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %348 = shape_of(%346, dtype="int32") /* ty=Tensor[(3), int32] */;
  %349 = cast(%346, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
  %350 = dyn.reshape(%347, %348, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %351 = cast(meta[relay.Constant][21] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %352 = cast(meta[relay.Constant][22] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %353 = reshape(%351, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %354 = reshape(%352, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %355 = @func_1889(%353, %354) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
  %356 = floor_divide(%349, %350) /* ty=Tensor[(10, 4, 12), float64] */;
  %357 = %355.5;
  %358 = @func_5622() /* ty=Tensor[(10, 4, 12), float32] */;
  (%356, %357, meta[relay.Constant][21] /* ty=Tensor[(4), uint32] */, meta[relay.Constant][22] /* ty=Tensor[(12), uint16] */, %358)
}

def @func_7880(%var_7879: Tensor[(700), float64]) -> (Tensor[(10, 15, 16), float32], Tensor[(700), int32], Tensor[(12, 15, 13), int64]) {
  %369 = fn (%var_7868: Tensor[(700), float64]) -> (Tensor[(10, 15, 16), float32], Tensor[(700), int32], Tensor[(12, 15, 13), int64]) {
    %359 = @func_7562() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(12, 15, 13), bool]) */;
    %360 = @func_3262() /* ty=Tensor[(700), float64] */;
    %361 = cast(%var_7868, dtype="int32") /* ty=Tensor[(700), int32] */;
    %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(1), int32] */;
    %363 = cast(%360, dtype="int32") /* ty=Tensor[(700), int32] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?), int32] */;
    %365 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %366 = %359.1;
    %367 = bitwise_and(%363, %364) /* ty=Tensor[(700), int32] */;
    %368 = %365.0;
    (%366, %367, %368)
  };
  %369(%var_7879) /* ty=(Tensor[(10, 15, 16), float32], Tensor[(700), int32], Tensor[(12, 15, 13), int64]) */
}

def @func_6340(%var_6339: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) {
  %377 = fn (%var_6325: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) {
    %370 = cast(%var_6325, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %371 = cast(meta[relay.Constant][23] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %372 = reshape(%370, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %373 = reshape(%371, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %374 = @func_5172(%372, %373) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) */;
    %375 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
    %376 = %374.2;
    (%375, %376, %var_6325, meta[relay.Constant][23] /* ty=Tensor[(144), float64] */)
  };
  %377(%var_6339) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) */
}

def @func_3348(%var_3347: Tensor[(12), uint16]) -> (Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) {
  %387 = fn (%var_3339: Tensor[(12), uint16]) -> (Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) {
    %378 = cast(%var_3339, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %379 = reshape(%378, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %380 = @func_1798(%379) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
    %381 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
    %382 = cast(%381, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    %383 = cosh(%382) /* ty=Tensor[(12, 15, 13), float32] */;
    %384 = cast(%383, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    %385 = %380.3;
    %386 = log2(%384) /* ty=Tensor[(12, 15, 13), float32] */;
    (%385, %var_3339, %386)
  };
  %387(%var_3347) /* ty=(Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) */
}

def @func_2527() -> Tensor[(10, 4, 12), float32] {
  %389 = fn () -> Tensor[(10, 4, 12), float32] {
    %388 = cast(meta[relay.Constant][24] /* ty=Tensor[(10, 4, 12), float32] */, dtype="float32") /* ty=Tensor[(10, 4, 12), float32] */;
    atan(%388) /* ty=Tensor[(10, 4, 12), float32] */
  };
  %389() /* ty=Tensor[(10, 4, 12), float32] */
}

def @func_5490() -> Tensor[(12, 15, 13), int64] {
  %390 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %390.0
}

def @func_3212(%var_3209: Tensor[(154, 6), uint64], %var_3210: Tensor[(154, 6), uint64], %var_3211: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) {
  %437 = fn (%var_3112: Tensor[(154, 6), uint64], %var_3120: Tensor[(154, 6), uint64], %var_3168: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) {
    %391 = cast(%var_3112, dtype="uint64") /* ty=Tensor[(154, 6), uint64] */;
    %392 = reshape(%391, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint64] */;
    %393 = @func_2310(%392) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */;
    %394 = cast(%var_3120, dtype="bool") /* ty=Tensor[(154, 6), bool] */;
    %395 = shape_of(%var_3112, dtype="int32") /* ty=Tensor[(2), int32] */;
    %396 = cast(%var_3112, dtype="bool") /* ty=Tensor[(154, 6), bool] */;
    %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %398 = cast(%var_3168, dtype="float64") /* ty=Tensor[(144), float64] */;
    %399 = reshape(%398, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
    %400 = @func_392(%399) /* ty=Tensor[(12, 1, 12), float64] */;
    %401 = cast(%400, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    %402 = reshape(%401, newshape=[2, 72]) /* ty=Tensor[(2, 72), float64] */;
    %403 = @func_2198(%402) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) */;
    %404 = cast(%var_3120, dtype="uint64") /* ty=Tensor[(154, 6), uint64] */;
    %405 = reshape(%404, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint64] */;
    %406 = @func_2310(%405) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */;
    %407 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 30), float32] */, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %408 = tan(%407) /* ty=Tensor[(1, 30), float32] */;
    %409 = cast(%408, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %410 = log10(%409) /* ty=Tensor[(1, 30), float32] */;
    %411 = cast(meta[relay.Constant][26] /* ty=Tensor[(1, 30), float32] */, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %412 = reshape(%411, newshape=[2, 15, 1]) /* ty=Tensor[(2, 15, 1), float32] */;
    %413 = @func_1495(%412) /* ty=Tensor[(2, 15, 1), float32] */;
    %414 = cast(%413, dtype="bool") /* ty=Tensor[(2, 15, 1), bool] */;
    %415 = shape_of(%410, dtype="int32") /* ty=Tensor[(2), int32] */;
    %416 = cast(%410, dtype="bool") /* ty=Tensor[(1, 30), bool] */;
    %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %418 = cast(meta[relay.Constant][25] /* ty=Tensor[(3, 4), uint16] */, dtype="uint16") /* ty=Tensor[(3, 4), uint16] */;
    %419 = reshape(%418, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %420 = @func_1798(%419) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
    %421 = %420.6;
    %422 = cast(%408, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %423 = cast(%421, dtype="float32") /* ty=Tensor[(12, 1), float32] */;
    %424 = cast(%410, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %425 = shape_of(%408, dtype="int32") /* ty=Tensor[(2), int32] */;
    %426 = cast(%408, dtype="float32") /* ty=Tensor[(1, 30), float32] */;
    %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %428 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
    %429 = %393.0;
    %430 = greater(%396, %397) /* ty=Tensor[(154, 6), bool] */;
    %431 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
    %432 = %403.2;
    %433 = %406.2;
    %434 = logical_or(%416, %417) /* ty=Tensor[(?, 30), bool] */;
    %435 = mod(%422, %423) /* ty=Tensor[(12, 30), float32] */;
    %436 = subtract(%426, %427) /* ty=Tensor[(?, 30), float32] */;
    (%428, %429, %430, %431, meta[relay.Constant][25] /* ty=Tensor[(3, 4), uint16] */, %400, %var_3168, %432, %433, %434, %435, %436)
  };
  %437(%var_3209, %var_3210, %var_3211) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) */
}

def @func_4073() -> (Tensor[(10, 4, 12), float32],) {
  %438 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %439 = %438.0;
  (%439,)
}

def @func_6144() -> Tensor[(12, 15, 13), int32] {
  @func_3356() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_3036() -> (Tensor[(10, 4, 12), float32],) {
  @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */
}

def @func_6136(%var_6128: Tensor[(10, 15, 16), float32], %var_6129: Tensor[(10, 15, 16), float32]) -> (Tensor[(10, 15, 16), float32],) {
  %440 = cast(%var_6129, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %441 = shape_of(%var_6128, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%var_6128, dtype="float32") /* ty=Tensor[(10, 15, 16), float32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %444 = mod(%442, %443) /* ty=Tensor[(10, 15, 16), float32] */;
  (%444,)
}

def @func_980(%var_979: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
  %447 = fn (%var_970: Tensor[(13, 15, 14), float32]) -> (Tensor[(13, 15, 14), float32],) {
    %445 = cast(%var_970, dtype="float32") /* ty=Tensor[(13, 15, 14), float32] */;
    %446 = sqrt(%445) /* ty=Tensor[(13, 15, 14), float32] */;
    (%446,)
  };
  %447(%var_979) /* ty=(Tensor[(13, 15, 14), float32],) */
}

def @func_5781(%var_5779: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), float64], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(10, 4, 12), float32]) {
  @func_5778(%var_5779) /* ty=(Tensor[(10, 4, 12), float64], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(10, 4, 12), float32]) */
}

def @func_5172(%var_5162: Tensor[(12), uint16], %var_5163: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) {
  %448 = cast(%var_5162, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %449 = cast(%var_5163, dtype="float64") /* ty=Tensor[(144), float64] */;
  %450 = reshape(%448, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %451 = reshape(%449, newshape=[144]) /* ty=Tensor[(144), float64] */;
  %452 = @func_2101(%450, %451) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) */;
  %453 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  %454 = %452.3;
  (%453, %454, %var_5162, %var_5163)
}

def @func_2176() -> (Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) {
  %467 = fn () -> (Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) {
    %455 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %456 = %455.0;
    %457 = cast(%456, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
    %458 = cast(meta[relay.Constant][27] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %459 = reshape(%458, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
    %460 = @func_978(%459) /* ty=(Tensor[(13, 15, 14), float32],) */;
    %461 = cast(meta[relay.Constant][28] /* ty=Tensor[(6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2), uint16] */;
    %462 = reshape(%461, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %463 = @func_1798(%462) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
    %464 = sigmoid(%457) /* ty=Tensor[(12, 15, 13), float64] */;
    %465 = %460.0;
    %466 = %463.2;
    (%464, %465, meta[relay.Constant][27] /* ty=Tensor[(2730), float32] */, %466, meta[relay.Constant][28] /* ty=Tensor[(6, 2), uint16] */)
  };
  %467() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */
}

def @func_7848() -> Tensor[(12, 15, 13), int32] {
  @func_7846() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_4925(%var_4923: Tensor[(12, 15, 13), int64]) -> (Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), uint8]) {
  @func_4922(%var_4923) /* ty=(Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), uint8]) */
}

def @func_4344(%var_4338: Tensor[(12, 15, 13), int32]) -> (Tensor[(12, 15, 13), bool],) {
  %468 = @func_3874() /* ty=(Tensor[(12, 15, 13), int32],) */;
  %469 = %468.0;
  %470 = cast(%var_4338, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
  %472 = cast(%469, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %474 = logical_or(%472, %473) /* ty=Tensor[(12, 15, 13), bool] */;
  (%474,)
}

def @func_5820(%var_5818: Tensor[(8, 12, 9), float32], %var_5819: Tensor[(8, 12, 9), float32]) -> (Tensor[(8, 12, 9), float32],) {
  @func_5816(%var_5818, %var_5819) /* ty=(Tensor[(8, 12, 9), float32],) */
}

def @func_6476() -> (Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(924), uint64], Tensor[(10, 4, 12), float64]) {
  %490 = fn () -> (Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(924), uint64], Tensor[(10, 4, 12), float64]) {
    %475 = cast(meta[relay.Constant][29] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %476 = cast(meta[relay.Constant][30] /* ty=Tensor[(924), uint64] */, dtype="uint64") /* ty=Tensor[(924), uint64] */;
    %477 = reshape(%475, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %478 = reshape(%476, newshape=[924]) /* ty=Tensor[(924), uint64] */;
    %479 = @func_4876(%477, %478) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(12, 15, 13), int64], Tensor[(924), uint64]) */;
    %480 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
    %481 = %480.0;
    %482 = cast(%481, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
    %483 = atanh(%482) /* ty=Tensor[(10, 4, 12), float64] */;
    %484 = cast(%481, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
    %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(3), int32] */;
    %486 = cast(%483, dtype="float64") /* ty=Tensor[(10, 4, 12), float64] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %488 = %479.2;
    %489 = floor_mod(%486, %487) /* ty=Tensor[(10, 4, 12), float64] */;
    (%488, meta[relay.Constant][29] /* ty=Tensor[(144), float64] */, meta[relay.Constant][30] /* ty=Tensor[(924), uint64] */, %489)
  };
  %490() /* ty=(Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(924), uint64], Tensor[(10, 4, 12), float64]) */
}

def @func_5924() -> (Tensor[(13, 15, 14), float32],) {
  @func_5922() /* ty=(Tensor[(13, 15, 14), float32],) */
}

def @func_5905(%var_5904: Tensor[(144, 1), float64]) -> (Tensor[(12, 30), float32], Tensor[(924), uint64], Tensor[(144, 1), float64], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), int64]) {
  %514 = fn (%var_5869: Tensor[(144, 1), float64]) -> (Tensor[(12, 30), float32], Tensor[(924), uint64], Tensor[(144, 1), float64], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), int64]) {
    %491 = cast(meta[relay.Constant][31] /* ty=Tensor[(924), uint64] */, dtype="uint64") /* ty=Tensor[(924), uint64] */;
    %492 = cast(meta[relay.Constant][31] /* ty=Tensor[(924), uint64] */, dtype="uint64") /* ty=Tensor[(924), uint64] */;
    %493 = cast(%var_5869, dtype="float64") /* ty=Tensor[(144, 1), float64] */;
    %494 = reshape(%491, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
    %495 = reshape(%492, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
    %496 = reshape(%493, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %497 = @func_3208(%494, %495, %496) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) */;
    %498 = @func_5544() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */;
    %499 = %498.0;
    %500 = cast(%499, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    %501 = sinh(%500) /* ty=Tensor[(12, 15, 13), float32] */;
    %502 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 15, 13), int64] */, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
    %503 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %504 = cast(%499, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
    %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %506 = power(%504, %505) /* ty=Tensor[(12, 15, 13), float64] */;
    %507 = cast(%506, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
    %508 = shape_of(%501, dtype="int32") /* ty=Tensor[(3), int32] */;
    %509 = cast(%501, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
    %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %511 = %497.10;
    %512 = greater_equal(%509, %510) /* ty=Tensor[(12, 15, 13), bool] */;
    %513 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
    (%511, meta[relay.Constant][31] /* ty=Tensor[(924), uint64] */, %var_5869, %512, %513)
  };
  %514(%var_5904) /* ty=(Tensor[(12, 30), float32], Tensor[(924), uint64], Tensor[(144, 1), float64], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), int64]) */
}

def @func_7061() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) {
  %515 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
  %516 = %515.1;
  %517 = cast(%516, dtype="float64") /* ty=Tensor[(13, 15, 14), float64] */;
  %518 = @func_5844() /* ty=Tensor[(12, 15, 13), int64] */;
  %519 = @func_5490() /* ty=Tensor[(12, 15, 13), int64] */;
  %520 = log2(%517) /* ty=Tensor[(13, 15, 14), float64] */;
  (%518, %519, %520)
}

def @func_2474(%var_2386: Tensor[(1, 2, 8), uint64], %var_2387: Tensor[(6, 2, 8), uint64], %var_2468: Tensor[(3, 2, 8), uint8]) -> (Tensor[(14, 12, 13), int32], Tensor[(2184), int32], Tensor[(4), uint32], Tensor[(1, 12), uint16], Tensor[(6, 2, 8), bool], Tensor[(3, 2, 8), uint16]) {
  %521 = cast(meta[relay.Constant][33] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %522 = cast(meta[relay.Constant][33] /* ty=Tensor[(2184), int32] */, dtype="int32") /* ty=Tensor[(2184), int32] */;
  %523 = reshape(%521, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %524 = reshape(%522, newshape=[14, 12, 13]) /* ty=Tensor[(14, 12, 13), int32] */;
  %525 = @func_2019(%523, %524) /* ty=(Tensor[(14, 12, 13), int32],) */;
  %526 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 12), uint16] */, dtype="uint16") /* ty=Tensor[(1, 12), uint16] */;
  %527 = reshape(%526, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %528 = @func_1798(%527) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
  %529 = cast(%var_2386, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %530 = erf(%529) /* ty=Tensor[(1, 2, 8), float64] */;
  %531 = cast(%var_2386, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %532 = cast(%var_2387, dtype="bool") /* ty=Tensor[(6, 2, 8), bool] */;
  %533 = greater_equal(%531, %532) /* ty=Tensor[(6, 2, 8), bool] */;
  %534 = cast(%530, dtype="uint16") /* ty=Tensor[(1, 2, 8), uint16] */;
  %535 = cast(%533, dtype="uint16") /* ty=Tensor[(6, 2, 8), uint16] */;
  %536 = subtract(%534, %535) /* ty=Tensor[(6, 2, 8), uint16] */;
  %537 = cast(%530, dtype="bool") /* ty=Tensor[(1, 2, 8), bool] */;
  %538 = cast(%536, dtype="bool") /* ty=Tensor[(6, 2, 8), bool] */;
  %539 = cast(%var_2386, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %540 = shape_of(%530, dtype="int32") /* ty=Tensor[(3), int32] */;
  %541 = cast(%530, dtype="float64") /* ty=Tensor[(1, 2, 8), float64] */;
  %542 = dyn.reshape(%539, %540, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %543 = mod(%541, %542) /* ty=Tensor[(?, 2, 8), float64] */;
  %544 = cast(%530, dtype="uint8") /* ty=Tensor[(1, 2, 8), uint8] */;
  %545 = shape_of(%543, dtype="int32") /* ty=Tensor[(3), int32] */;
  %546 = cast(%543, dtype="uint8") /* ty=Tensor[(?, 2, 8), uint8] */;
  %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %548 = bitwise_xor(%546, %547) /* ty=Tensor[(?, 2, 8), uint8] */;
  %549 = cast(%548, dtype="uint16") /* ty=Tensor[(?, 2, 8), uint16] */;
  %550 = cast(%var_2468, dtype="uint16") /* ty=Tensor[(3, 2, 8), uint16] */;
  %551 = %525.0;
  %552 = %528.3;
  %553 = less(%537, %538) /* ty=Tensor[(6, 2, 8), bool] */;
  %554 = add(%549, %550) /* ty=Tensor[(3, 2, 8), uint16] */;
  (%551, meta[relay.Constant][33] /* ty=Tensor[(2184), int32] */, %552, meta[relay.Constant][34] /* ty=Tensor[(1, 12), uint16] */, %553, %554)
}

def @func_2101(%var_2061: Tensor[(12), uint16], %var_2075: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) {
  %555 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %556 = cast(%var_2061, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %557 = reshape(%556, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %558 = @func_1601(%557) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */;
  %559 = cast(%var_2075, dtype="float64") /* ty=Tensor[(144), float64] */;
  %560 = reshape(%559, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
  %561 = cast(meta[relay.Constant][35] /* ty=Tensor[(10, 3), float32] */, dtype="float32") /* ty=Tensor[(10, 3), float32] */;
  %562 = reshape(%561, newshape=[2, 15, 1]) /* ty=Tensor[(2, 15, 1), float32] */;
  %563 = %555.0;
  %564 = %558.0;
  %565 = @func_392(%560) /* ty=Tensor[(12, 1, 12), float64] */;
  %566 = @func_1495(%562) /* ty=Tensor[(2, 15, 1), float32] */;
  (%563, %564, %var_2061, %565, %var_2075, %566, meta[relay.Constant][35] /* ty=Tensor[(10, 3), float32] */)
}

def @func_1601(%var_1552: Tensor[(12, 1), uint16]) -> (Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) {
  %567 = cast(meta[relay.Constant][36] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %568 = cast(%var_1552, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %569 = reshape(%567, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %570 = reshape(%568, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %571 = @func_1376(%569, %570) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %572 = cast(meta[relay.Constant][37] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %573 = cast(meta[relay.Constant][37] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %574 = reshape(%572, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %575 = reshape(%573, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %576 = @func_1257(%574, %575) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %577 = cast(meta[relay.Constant][38] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %578 = reshape(%577, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %579 = @func_1353(%578) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %580 = cast(meta[relay.Constant][36] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %581 = cast(%var_1552, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %582 = reshape(%580, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
  %583 = reshape(%581, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
  %584 = @func_1376(%582, %583) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
  %585 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %586 = %585.0;
  %587 = cast(%586, dtype="float64") /* ty=Tensor[(12, 15, 13), float64] */;
  %588 = acos(%587) /* ty=Tensor[(12, 15, 13), float64] */;
  %589 = cast(%586, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="bool") /* ty=Tensor[(12, 15, 13), bool] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %593 = %571.0;
  %594 = %576.0;
  %595 = %579.2;
  %596 = %584.3;
  %597 = less_equal(%591, %592) /* ty=Tensor[(12, 15, 13), bool] */;
  (%593, meta[relay.Constant][36] /* ty=Tensor[(4), uint32] */, %var_1552, %594, meta[relay.Constant][37] /* ty=Tensor[(700), float32] */, %595, meta[relay.Constant][38] /* ty=Tensor[(2730), float32] */, %596, %597)
}

def @func_2105(%var_2103: Tensor[(12), uint16], %var_2104: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) {
  @func_2101(%var_2103, %var_2104) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) */
}

def @func_5090() -> Tensor[(10, 4, 12), float32] {
  @func_5088() /* ty=Tensor[(10, 4, 12), float32] */
}

def @func_4879(%var_4877: Tensor[(144), float64], %var_4878: Tensor[(924), uint64]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(12, 15, 13), int64], Tensor[(924), uint64]) {
  %612 = fn (%var_4869: Tensor[(144), float64], %var_4874: Tensor[(924), uint64]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(12, 15, 13), int64], Tensor[(924), uint64]) {
    %598 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %599 = cast(%var_4869, dtype="float64") /* ty=Tensor[(144), float64] */;
    %600 = reshape(%599, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
    %601 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(924), uint64] */;
    %602 = cast(%var_4874, dtype="uint64") /* ty=Tensor[(924), uint64] */;
    %603 = @func_392(%600) /* ty=Tensor[(12, 1, 12), float64] */;
    %604 = cast(%603, dtype="float64") /* ty=Tensor[(12, 1, 12), float64] */;
    %605 = reshape(%601, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
    %606 = reshape(%602, newshape=[154, 6]) /* ty=Tensor[(154, 6), uint64] */;
    %607 = reshape(%604, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %608 = @func_3208(%605, %606, %607) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1638), float64], Tensor[(154, 6), bool], Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 72), float64], Tensor[(12, 15, 13), int64], Tensor[(?, 30), bool], Tensor[(12, 30), float32], Tensor[(?, 30), float32]) */;
    %609 = @func_3944() /* ty=Tensor[(12, 15, 13), float32] */;
    %610 = %598.0;
    %611 = %608.0;
    (%609, %610, %603, %var_4869, %611, %var_4874)
  };
  %612(%var_4877, %var_4878) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(12, 15, 13), int64], Tensor[(924), uint64]) */
}

def @func_4822() -> (Tensor[(12, 15, 13), int64],) {
  %614 = fn () -> (Tensor[(12, 15, 13), int64],) {
    %613 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
    (%613,)
  };
  %614() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_3006(%var_3004: Tensor[(2, 2, 3), uint64]) -> (Tensor[(2, 2, 3), uint64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(2, 2, 3), float32], Tensor[(12), uint16]) {
  @func_3003(%var_3004) /* ty=(Tensor[(2, 2, 3), uint64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(2, 2, 3), float32], Tensor[(12), uint16]) */
}

def @func_6632() -> (Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(10, 4, 12), float32], Tensor[(480), float32]) {
  @func_6630() /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(10, 4, 12), float32], Tensor[(480), float32]) */
}

def @func_7846() -> Tensor[(12, 15, 13), int32] {
  %615 = @func_6630() /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(10, 4, 12), float32], Tensor[(480), float32]) */;
  %615.2
}

def @func_7455() -> (Tensor[(12, 15, 13), int64], Tensor[(700), float32], Tensor[(700), float32]) {
  %622 = fn () -> (Tensor[(12, 15, 13), int64], Tensor[(700), float32], Tensor[(700), float32]) {
    %616 = @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */;
    %617 = cast(meta[relay.Constant][39] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %618 = reshape(%617, newshape=[700]) /* ty=Tensor[(700), float32] */;
    %619 = @func_1621(%618) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) */;
    %620 = %616.0;
    %621 = %619.2;
    (%620, %621, meta[relay.Constant][39] /* ty=Tensor[(700), float32] */)
  };
  %622() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(700), float32], Tensor[(700), float32]) */
}

def @func_3045() -> Tensor[(12, 15, 13), int64] {
  %623 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %623.0
}

def @func_7887() -> (Tensor[(12, 15, 13), int64],) {
  %624 = @func_5844() /* ty=Tensor[(12, 15, 13), int64] */;
  (%624,)
}

def @func_3105(%var_3103: Tensor[(120), float64], %var_3104: Tensor[(120), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(120), uint32]) {
  @func_3101(%var_3103, %var_3104) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(120), uint32]) */
}

def @func_3874() -> (Tensor[(12, 15, 13), int32],) {
  %625 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
  (%625,)
}

def @func_6804(%var_6801: Tensor[(2, 432), float32]) -> (Tensor[(12, 15, 13), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) {
  %626 = cast(%var_6801, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
  %627 = cast(%var_6801, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
  %628 = reshape(%626, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %629 = reshape(%627, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
  %630 = @func_5816(%628, %629) /* ty=(Tensor[(8, 12, 9), float32],) */;
  %631 = @func_3883() /* ty=Tensor[(12, 15, 13), float32] */;
  %632 = %630.0;
  (%631, %632, %var_6801)
}

def @func_147(%var_146: Tensor[(8, 15), float64]) -> (Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) {
  %640 = fn (%var_128: Tensor[(8, 15), float64]) -> (Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) {
    %633 = cast(%var_128, dtype="float64") /* ty=Tensor[(8, 15), float64] */;
    %634 = cast(meta[relay.Constant][40] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %635 = cast(meta[relay.Constant][40] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %636 = reshape(%634, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %637 = reshape(%635, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %638 = atan(%633) /* ty=Tensor[(8, 15), float64] */;
    %639 = @func_33(%636, %637) /* ty=Tensor[(14, 9, 13), float64] */;
    (%638, %639, meta[relay.Constant][40] /* ty=Tensor[(1638), float64] */)
  };
  %640(%var_146) /* ty=(Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */
}

def @func_4139() -> (Tensor[(12, 15, 13), int64],) {
  %642 = fn () -> (Tensor[(12, 15, 13), int64],) {
    %641 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
    (%641,)
  };
  %642() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_4310() -> (Tensor[(12, 15, 13), int64],) {
  %643 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %644 = %643.0;
  (%644,)
}

def @func_7162() -> (Tensor[(12, 15, 13), int64],) {
  %645 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %646 = %645.0;
  (%646,)
}

def @func_5176(%var_5174: Tensor[(12), uint16], %var_5175: Tensor[(144), float64]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) {
  @func_5172(%var_5174, %var_5175) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) */
}

def @func_6051() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(2730), float32], Tensor[(10, 4, 12), uint16], Tensor[(10, 4, 12), float32]) {
  @func_6049() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(2730), float32], Tensor[(10, 4, 12), uint16], Tensor[(10, 4, 12), float32]) */
}

def @func_5702(%var_5693: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(1, 90), float64], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(12, 15, 13), int32], Tensor[(14, 9, 13), float64], Tensor[(700), float32]) {
  %647 = @func_4821() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %648 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %649 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %650 = reshape(%648, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %651 = reshape(%649, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %652 = @func_4631(%650, %651) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) */;
  %653 = cast(meta[relay.Constant][42] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %654 = reshape(%653, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %655 = @func_3346(%654) /* ty=(Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) */;
  %656 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %657 = cast(meta[relay.Constant][41] /* ty=Tensor[(1, 90), float64] */, dtype="float64") /* ty=Tensor[(1, 90), float64] */;
  %658 = reshape(%656, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %659 = reshape(%657, newshape=[3, 10, 3]) /* ty=Tensor[(3, 10, 3), float64] */;
  %660 = @func_4631(%658, %659) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) */;
  %661 = cast(%var_5693, dtype="float32") /* ty=Tensor[(700), float32] */;
  %662 = cast(%var_5693, dtype="float32") /* ty=Tensor[(700), float32] */;
  %663 = reshape(%661, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %664 = reshape(%662, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %665 = @func_1257(%663, %664) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %666 = %647.0;
  %667 = %652.1;
  %668 = %655.1;
  %669 = %660.1;
  %670 = %665.0;
  (%666, %667, meta[relay.Constant][41] /* ty=Tensor[(1, 90), float64] */, %668, meta[relay.Constant][42] /* ty=Tensor[(12), uint16] */, %669, %670, %var_5693)
}

def @func_4816() -> (Tensor[(10, 4, 12), float32],) {
  @func_4814() /* ty=(Tensor[(10, 4, 12), float32],) */
}

def @func_2920() -> Tensor[(12, 15, 13), int64] {
  %671 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %671.0
}

def @func_1604(%var_1602: Tensor[(12, 1), uint16]) -> (Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) {
  @func_1601(%var_1602) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */
}

def @func_3436() -> (Tensor[(12, 15, 13), int64],) {
  @func_3434() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_1800(%var_1799: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) {
  %696 = fn (%var_1750: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) {
    %672 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %673 = cast(%var_1750, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %674 = reshape(%673, newshape=[4, 3]) /* ty=Tensor[(4, 3), uint16] */;
    %675 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %676 = @func_297(%674) /* ty=Tensor[(4, 3), uint16] */;
    %677 = cast(%676, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
    %678 = reshape(%677, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %679 = @func_1601(%678) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */;
    %680 = %679.5;
    %681 = cast(meta[relay.Constant][43] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
    %682 = cast(%676, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
    %683 = reshape(%681, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
    %684 = reshape(%682, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %685 = @func_1376(%683, %684) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
    %686 = %685.3;
    %687 = cast(%680, dtype="int8") /* ty=Tensor[(2730), int8] */;
    %688 = cast(%686, dtype="int8") /* ty=Tensor[(12, 1), int8] */;
    %689 = cast(%676, dtype="uint16") /* ty=Tensor[(4, 3), uint16] */;
    %690 = reshape(%689, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %691 = @func_1601(%690) /* ty=(Tensor[(1, 4), uint32], Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool]) */;
    %692 = %672.0;
    %693 = %675.0;
    %694 = bitwise_xor(%687, %688) /* ty=Tensor[(12, 2730), int8] */;
    %695 = %691.7;
    (%692, %676, %var_1750, meta[relay.Constant][43] /* ty=Tensor[(4), uint32] */, %693, %694, %695)
  };
  %696(%var_1799) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */
}

def @func_4085() -> (Tensor[(12, 15, 13), int64],) {
  @func_4083() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_3003(%var_2939: Tensor[(2, 2, 3), uint64]) -> (Tensor[(2, 2, 3), uint64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(2, 2, 3), float32], Tensor[(12), uint16]) {
  %697 = cast(meta[relay.Constant][44] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %698 = cast(%var_2939, dtype="uint64") /* ty=Tensor[(2, 2, 3), uint64] */;
  %699 = cast(meta[relay.Constant][45] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %700 = reshape(%699, newshape=[2, 72]) /* ty=Tensor[(2, 72), float64] */;
  %701 = @func_2198(%700) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) */;
  %702 = cast(meta[relay.Constant][46] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %703 = reshape(%702, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %704 = @func_1353(%703) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %705 = cast(meta[relay.Constant][44] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %706 = cast(%var_2939, dtype="float64") /* ty=Tensor[(2, 2, 3), float64] */;
  %707 = divide(%705, %706) /* ty=Tensor[(2, 2, 3), float64] */;
  %708 = cast(%707, dtype="float32") /* ty=Tensor[(2, 2, 3), float32] */;
  %709 = cast(%var_2939, dtype="uint16") /* ty=Tensor[(2, 2, 3), uint16] */;
  %710 = reshape(%709, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %711 = @func_1837(%710) /* ty=(Tensor[(12, 1), uint16], Tensor[(4, 1), uint32], Tensor[(12), uint16], Tensor[(1, 4), uint32], Tensor[(12, 15, 13), uint32]) */;
  %712 = bitwise_xor(%697, %698) /* ty=Tensor[(2, 2, 3), uint64] */;
  %713 = %701.1;
  %714 = %704.2;
  %715 = atan(%708) /* ty=Tensor[(2, 2, 3), float32] */;
  %716 = %711.2;
  (%712, %713, meta[relay.Constant][45] /* ty=Tensor[(144), float64] */, %714, meta[relay.Constant][46] /* ty=Tensor[(2730), float32] */, %715, %716)
}

def @func_5545() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) {
  %721 = fn () -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) {
    %717 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
    %718 = @func_4083() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %719 = %717.0;
    %720 = %718.0;
    (%719, %720)
  };
  %721() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */
}

def @func_6840(%var_6838: uint8, %var_6839: Tensor[(1, 9, 7), uint8]) -> Tensor[(1, 9, 7), bool] {
  @func_6836(%var_6838, %var_6839) /* ty=Tensor[(1, 9, 7), bool] */
}

def @func_3876() -> (Tensor[(12, 15, 13), int32],) {
  @func_3874() /* ty=(Tensor[(12, 15, 13), int32],) */
}

def @func_6049() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32], Tensor[(2730), float32], Tensor[(10, 4, 12), uint16], Tensor[(10, 4, 12), float32]) {
  %722 = @func_4310() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %723 = cast(meta[relay.Constant][47] /* ty=Tensor[(12), uint64] */, dtype="uint64") /* ty=Tensor[(12), uint64] */;
  %724 = reshape(%723, newshape=[2, 2, 3]) /* ty=Tensor[(2, 2, 3), uint64] */;
  %725 = @func_3003(%724) /* ty=(Tensor[(2, 2, 3), uint64], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2730), float32], Tensor[(2730), float32], Tensor[(2, 2, 3), float32], Tensor[(12), uint16]) */;
  %726 = @func_5622() /* ty=Tensor[(10, 4, 12), float32] */;
  %727 = cast(%726, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %728 = cast(meta[relay.Constant][47] /* ty=Tensor[(12), uint64] */, dtype="int16") /* ty=Tensor[(12), int16] */;
  %729 = bitwise_xor(%727, %728) /* ty=Tensor[(10, 4, 12), int16] */;
  %730 = cast(%726, dtype="uint16") /* ty=Tensor[(10, 4, 12), uint16] */;
  %731 = shape_of(%729, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(%729, dtype="uint16") /* ty=Tensor[(10, 4, 12), uint16] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %734 = %722.0;
  %735 = @func_4134() /* ty=Tensor[(12, 15, 13), int32] */;
  %736 = %725.3;
  %737 = logical_xor(%732, %733) /* ty=Tensor[(10, 4, 12), uint16] */;
  %738 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%734, %735, %736, %737, %738)
}

def @func_1624(%var_1622: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) {
  @func_1621(%var_1622) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) */
}

def @func_4214() -> Tensor[(12, 15, 13), int64] {
  %740 = fn () -> Tensor[(12, 15, 13), int64] {
    %739 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %739.0
  };
  %740() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_6781() -> Tensor[(12, 15, 13), float32] {
  %744 = fn () -> Tensor[(12, 15, 13), float32] {
    %741 = @func_3636() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %742 = %741.0;
    %743 = cast(%742, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    asinh(%743) /* ty=Tensor[(12, 15, 13), float32] */
  };
  %744() /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_1304() -> (Tensor[(12, 15, 13), int64],) {
  %745 = cast(meta[relay.Constant][49] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %746 = shape_of(meta[relay.Constant][48] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %747 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 15, 13), int64] */, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %748 = dyn.reshape(%745, %746, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %749 = bitwise_and(%747, %748) /* ty=Tensor[(12, 15, 13), int64] */;
  (%749,)
}

def @func_6980(%var_6978: Tensor[(4), uint32], %var_6979: Tensor[(12, 1), uint16]) -> (Tensor[(12, 15, 13), float32], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1), uint16]) {
  @func_6976(%var_6978, %var_6979) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1), uint16]) */
}

def @func_3358() -> Tensor[(12, 15, 13), int32] {
  @func_3356() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_1355(%var_1354: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) {
  %758 = fn (%var_1325: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) {
    %750 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %751 = cast(%var_1325, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %752 = reshape(%751, newshape=[13, 15, 14]) /* ty=Tensor[(13, 15, 14), float32] */;
    %753 = @func_978(%752) /* ty=(Tensor[(13, 15, 14), float32],) */;
    %754 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %755 = %750.0;
    %756 = %753.0;
    %757 = %754.0;
    (%755, %756, %var_1325, %757)
  };
  %758(%var_1354) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */
}

def @func_5297() -> (Tensor[(10, 4, 12), float32],) {
  %760 = fn () -> (Tensor[(10, 4, 12), float32],) {
    %759 = @func_5088() /* ty=Tensor[(10, 4, 12), float32] */;
    (%759,)
  };
  %760() /* ty=(Tensor[(10, 4, 12), float32],) */
}

def @func_1893(%var_1891: Tensor[(4), uint32], %var_1892: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) {
  @func_1889(%var_1891, %var_1892) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */
}

def @func_3101(%var_3071: Tensor[(120), float64], %var_3092: Tensor[(120), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(120), uint32]) {
  %761 = cast(%var_3071, dtype="float64") /* ty=Tensor[(120), float64] */;
  %762 = reshape(%761, newshape=[8, 15]) /* ty=Tensor[(8, 15), float64] */;
  %763 = @func_145(%762) /* ty=(Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %764 = %763.1;
  %765 = cast(%764, dtype="float64") /* ty=Tensor[(14, 9, 13), float64] */;
  %766 = cast(%var_3092, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %767 = shape_of(%var_3071, dtype="int32") /* ty=Tensor[(1), int32] */;
  %768 = cast(%var_3071, dtype="uint32") /* ty=Tensor[(120), uint32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %770 = @func_2920() /* ty=Tensor[(12, 15, 13), int64] */;
  %771 = erf(%765) /* ty=Tensor[(14, 9, 13), float64] */;
  %772 = minimum(%768, %769) /* ty=Tensor[(120), uint32] */;
  (%770, %771, %772)
}

def @func_4474(%var_4470: Tensor[(12, 13, 12), float64], %var_4471: Tensor[(12, 13, 12), float64], %var_4472: Tensor[(1638), float64], %var_4473: Tensor[(350, 2), float32]) -> (Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) {
  %791 = fn (%var_4436: Tensor[(12, 13, 12), float64], %var_4437: Tensor[(12, 13, 12), float64], %var_4451: Tensor[(1638), float64], %var_4466: Tensor[(350, 2), float32]) -> (Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) {
    %773 = cast(%var_4437, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
    %774 = shape_of(%var_4436, dtype="int32") /* ty=Tensor[(3), int32] */;
    %775 = cast(%var_4436, dtype="float64") /* ty=Tensor[(12, 13, 12), float64] */;
    %776 = dyn.reshape(%773, %774, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %777 = cast(%var_4451, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %778 = cast(%var_4451, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %779 = reshape(%777, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %780 = reshape(%778, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
    %781 = cast(meta[relay.Constant][50] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
    %782 = cast(meta[relay.Constant][51] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %783 = cast(%var_4466, dtype="float32") /* ty=Tensor[(350, 2), float32] */;
    %784 = reshape(%781, newshape=[4]) /* ty=Tensor[(4), uint32] */;
    %785 = reshape(%782, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %786 = reshape(%783, newshape=[350, 2]) /* ty=Tensor[(350, 2), float32] */;
    %787 = @func_2742(%784, %785, %786) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(2730), float32], Tensor[(14, 10, 5), float64], Tensor[(350, 2), float32]) */;
    %788 = power(%775, %776) /* ty=Tensor[(12, 13, 12), float64] */;
    %789 = @func_33(%779, %780) /* ty=Tensor[(14, 9, 13), float64] */;
    %790 = %787.3;
    (%788, %789, %var_4451, %790, meta[relay.Constant][50] /* ty=Tensor[(4), uint32] */, meta[relay.Constant][51] /* ty=Tensor[(12), uint16] */, %var_4466)
  };
  %791(%var_4470, %var_4471, %var_4472, %var_4473) /* ty=(Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) */
}

def @func_6976(%var_6971: Tensor[(4), uint32], %var_6972: Tensor[(12, 1), uint16]) -> (Tensor[(12, 15, 13), float32], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1), uint16]) {
  %792 = cast(%var_6971, dtype="uint32") /* ty=Tensor[(4), uint32] */;
  %793 = cast(%var_6972, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %794 = reshape(%792, newshape=[4]) /* ty=Tensor[(4), uint32] */;
  %795 = reshape(%793, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %796 = @func_1889(%794, %795) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
  %797 = @func_3944() /* ty=Tensor[(12, 15, 13), float32] */;
  %798 = %796.2;
  (%797, %798, %var_6971, %var_6972)
}

def @func_4922(%var_4910: Tensor[(12, 15, 13), int64]) -> (Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), uint8]) {
  %799 = cast(meta[relay.Constant][52] /* ty=Tensor[(12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %800 = reshape(%799, newshape=[12]) /* ty=Tensor[(12), uint16] */;
  %801 = @func_3346(%800) /* ty=(Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 15, 13), float32]) */;
  %802 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
  %803 = cast(%var_4910, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %804 = shape_of(%802, dtype="int32") /* ty=Tensor[(3), int32] */;
  %805 = cast(%802, dtype="uint8") /* ty=Tensor[(12, 15, 13), uint8] */;
  %806 = dyn.reshape(%803, %804, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %807 = %801.0;
  %808 = logical_xor(%805, %806) /* ty=Tensor[(12, 15, 13), uint8] */;
  (%807, meta[relay.Constant][52] /* ty=Tensor[(12, 1), uint16] */, %808)
}

def @func_5441() -> (Tensor[(12, 15, 13), int32],) {
  %811 = fn () -> (Tensor[(12, 15, 13), int32],) {
    %809 = @func_3874() /* ty=(Tensor[(12, 15, 13), int32],) */;
    %810 = %809.0;
    (%810,)
  };
  %811() /* ty=(Tensor[(12, 15, 13), int32],) */
}

def @func_3739(%var_3737: Tensor[(12, 1), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(7, 234), float64], Tensor[(12, 15, 13), int64], Tensor[(120), uint32], Tensor[(120), float64], Tensor[(14, 12, 13), int32], Tensor[(12, 182), int32]) {
  @func_3736(%var_3737) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16], Tensor[(14, 9, 13), float64], Tensor[(7, 234), float64], Tensor[(12, 15, 13), int64], Tensor[(120), uint32], Tensor[(120), float64], Tensor[(14, 12, 13), int32], Tensor[(12, 182), int32]) */
}

def @func_5088() -> Tensor[(10, 4, 12), float32] {
  %812 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %812.0
}

def @func_4799(%var_4798: Tensor[(120), float64]) -> (Tensor[(12, 15, 13), int32], Tensor[(8, 15), float64], Tensor[(120), float64], Tensor[(8, 18), float64], Tensor[(6, 2), uint16], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1, 12), uint8]) {
  %836 = fn (%var_4726: Tensor[(120), float64]) -> (Tensor[(12, 15, 13), int32], Tensor[(8, 15), float64], Tensor[(120), float64], Tensor[(8, 18), float64], Tensor[(6, 2), uint16], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1, 12), uint8]) {
    %813 = cast(%var_4726, dtype="float64") /* ty=Tensor[(120), float64] */;
    %814 = reshape(%813, newshape=[8, 15]) /* ty=Tensor[(8, 15), float64] */;
    %815 = @func_145(%814) /* ty=(Tensor[(8, 15), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
    %816 = cast(meta[relay.Constant][55] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
    %817 = cast(meta[relay.Constant][54] /* ty=Tensor[(6, 2), uint16] */, dtype="uint16") /* ty=Tensor[(6, 2), uint16] */;
    %818 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
    %819 = reshape(%817, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %820 = reshape(%818, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %821 = @func_2101(%819, %820) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(1, 4), uint32], Tensor[(12), uint16], Tensor[(12, 1, 12), float64], Tensor[(144), float64], Tensor[(2, 15, 1), float32], Tensor[(10, 3), float32]) */;
    %822 = %821.2;
    %823 = cast(%822, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %824 = reshape(%816, newshape=[4]) /* ty=Tensor[(4), uint32] */;
    %825 = reshape(%823, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %826 = @func_1889(%824, %825) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(70, 10), float32], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(12, 1), uint16]) */;
    %827 = cast(meta[relay.Constant][53] /* ty=Tensor[(8, 18), float64] */, dtype="float64") /* ty=Tensor[(8, 18), float64] */;
    %828 = reshape(%827, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
    %829 = @func_392(%828) /* ty=Tensor[(12, 1, 12), float64] */;
    %830 = cast(%829, dtype="uint8") /* ty=Tensor[(12, 1, 12), uint8] */;
    %831 = cast(%822, dtype="uint8") /* ty=Tensor[(12), uint8] */;
    %832 = @func_2812() /* ty=Tensor[(12, 15, 13), int32] */;
    %833 = %815.0;
    %834 = %826.2;
    %835 = bitwise_xor(%830, %831) /* ty=Tensor[(12, 1, 12), uint8] */;
    (%832, %833, %var_4726, meta[relay.Constant][53] /* ty=Tensor[(8, 18), float64] */, meta[relay.Constant][54] /* ty=Tensor[(6, 2), uint16] */, %834, meta[relay.Constant][55] /* ty=Tensor[(4), uint32] */, %835)
  };
  %836(%var_4798) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(8, 15), float64], Tensor[(120), float64], Tensor[(8, 18), float64], Tensor[(6, 2), uint16], Tensor[(70, 10), float32], Tensor[(4), uint32], Tensor[(12, 1, 12), uint8]) */
}

def @func_5405() -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(10, 4, 12), float32]) {
  %837 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
  %838 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %839 = @func_2360() /* ty=Tensor[(12, 15, 13), int64] */;
  %840 = %837.1;
  %841 = %838.0;
  (%839, %840, %841)
}

def @func_7488(%var_7487: Tensor[(2, 10, 15), int8]) -> (Tensor[(2, 10, 15), int8],) {
  %847 = fn (%var_7475: Tensor[(2, 10, 15), int8]) -> (Tensor[(2, 10, 15), int8],) {
    %842 = cast(meta[relay.Constant][56] /* ty=Tensor[(2, 10, 15), int8] */, dtype="int8") /* ty=Tensor[(2, 10, 15), int8] */;
    %843 = shape_of(%var_7475, dtype="int32") /* ty=Tensor[(3), int32] */;
    %844 = cast(%var_7475, dtype="int8") /* ty=Tensor[(2, 10, 15), int8] */;
    %845 = dyn.reshape(%842, %843, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %846 = logical_xor(%844, %845) /* ty=Tensor[(2, 10, 15), int8] */;
    (%846,)
  };
  %847(%var_7487) /* ty=(Tensor[(2, 10, 15), int8],) */
}

def @func_3553() -> (Tensor[(12, 15, 13), int64],) {
  %849 = fn () -> (Tensor[(12, 15, 13), int64],) {
    %848 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
    (%848,)
  };
  %849() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_7063() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) {
  @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */
}

def @func_7710() -> (Tensor[(12, 15, 13), int32], Tensor[(700), float32], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) {
  %859 = fn () -> (Tensor[(12, 15, 13), int32], Tensor[(700), float32], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) {
    %850 = @func_2604() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */;
    %851 = cast(meta[relay.Constant][57] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %852 = cast(meta[relay.Constant][58] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %853 = reshape(%851, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %854 = reshape(%852, newshape=[144]) /* ty=Tensor[(144), float64] */;
    %855 = @func_5172(%853, %854) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 1, 12), float64], Tensor[(12), uint16], Tensor[(144), float64]) */;
    %856 = @func_2846() /* ty=Tensor[(12, 15, 13), int32] */;
    %857 = %850.3;
    %858 = %855.2;
    (%856, %857, %858, meta[relay.Constant][57] /* ty=Tensor[(12), uint16] */, meta[relay.Constant][58] /* ty=Tensor[(144), float64] */)
  };
  %859() /* ty=(Tensor[(12, 15, 13), int32], Tensor[(700), float32], Tensor[(12), uint16], Tensor[(12), uint16], Tensor[(144), float64]) */
}

def @func_1621(%var_1617: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(14, 10, 5), float64], Tensor[(700), float32]) {
  %860 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %861 = cast(%var_1617, dtype="float32") /* ty=Tensor[(700), float32] */;
  %862 = cast(%var_1617, dtype="float32") /* ty=Tensor[(700), float32] */;
  %863 = reshape(%861, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %864 = reshape(%862, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
  %865 = @func_1257(%863, %864) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
  %866 = %860.0;
  %867 = %865.3;
  (%866, %867, %var_1617)
}

def @func_7015() -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64]) {
  %868 = @func_5544() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64]) */;
  %869 = @func_2139() /* ty=Tensor[(12, 15, 13), int64] */;
  %870 = @func_6780() /* ty=Tensor[(12, 15, 13), float32] */;
  %871 = %868.0;
  (%869, %870, %871)
}

def @func_1306() -> (Tensor[(12, 15, 13), int64],) {
  @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */
}

def @func_2312(%var_2311: Tensor[(11, 6, 14), uint64]) -> (Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) {
  %889 = fn (%var_2295: Tensor[(11, 6, 14), uint64]) -> (Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) {
    %872 = cast(meta[relay.Constant][59] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %873 = cast(meta[relay.Constant][59] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
    %874 = reshape(%872, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
    %875 = reshape(%873, newshape=[14, 10, 5]) /* ty=Tensor[(14, 10, 5), float32] */;
    %876 = @func_1257(%874, %875) /* ty=(Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(14, 9, 13), float64], Tensor[(14, 10, 5), float64], Tensor[(14, 10, 5), bool]) */;
    %877 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 6, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 6, 14), float64] */;
    %878 = atan(%877) /* ty=Tensor[(1, 6, 14), float64] */;
    %879 = cast(meta[relay.Constant][60] /* ty=Tensor[(1, 6, 14), float64] */, dtype="uint64") /* ty=Tensor[(1, 6, 14), uint64] */;
    %880 = shape_of(%878, dtype="int32") /* ty=Tensor[(3), int32] */;
    %881 = cast(%878, dtype="uint64") /* ty=Tensor[(1, 6, 14), uint64] */;
    %882 = dyn.reshape(%879, %880, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %883 = bitwise_and(%881, %882) /* ty=Tensor[(?, 6, 14), uint64] */;
    %884 = cast(%883, dtype="uint64") /* ty=Tensor[(?, 6, 14), uint64] */;
    %885 = cast(%var_2295, dtype="uint64") /* ty=Tensor[(11, 6, 14), uint64] */;
    %886 = %876.1;
    %887 = @func_2139() /* ty=Tensor[(12, 15, 13), int64] */;
    %888 = maximum(%884, %885) /* ty=Tensor[(11, 6, 14), uint64] */;
    (%886, meta[relay.Constant][59] /* ty=Tensor[(700), float32] */, %887, %888)
  };
  %889(%var_2311) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */
}

def @func_1430() -> (Tensor[(12, 15, 13), int64],) {
  %890 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %891 = %890.0;
  (%891,)
}

def @func_6754() -> Tensor[(12, 15, 13), float32] {
  @func_3944() /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_6807(%var_6805: Tensor[(2, 432), float32]) -> (Tensor[(12, 15, 13), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) {
  @func_6804(%var_6805) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) */
}

def @func_3477(%var_3447: Tensor[(14, 5, 2), float64]) -> (Tensor[(14, 5, 2), float64], Tensor[(12, 15, 13), int64], Tensor[(2730), float32]) {
  %892 = cast(meta[relay.Constant][61] /* ty=Tensor[(14, 5, 2), float64] */, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %893 = shape_of(%var_3447, dtype="int32") /* ty=Tensor[(3), int32] */;
  %894 = cast(%var_3447, dtype="float64") /* ty=Tensor[(14, 5, 2), float64] */;
  %895 = dyn.reshape(%892, %893, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %896 = cast(meta[relay.Constant][62] /* ty=Tensor[(2730), float32] */, dtype="float32") /* ty=Tensor[(2730), float32] */;
  %897 = reshape(%896, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
  %898 = @func_1353(%897) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12, 15, 13), int64]) */;
  %899 = floor_divide(%894, %895) /* ty=Tensor[(14, 5, 2), float64] */;
  %900 = %898.3;
  (%899, %900, meta[relay.Constant][62] /* ty=Tensor[(2730), float32] */)
}

def @func_7363() -> (Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) {
  %910 = fn () -> (Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) {
    %901 = @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */;
    %902 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 432), float32] */, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
    %903 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 432), float32] */, dtype="float32") /* ty=Tensor[(2, 432), float32] */;
    %904 = reshape(%902, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
    %905 = reshape(%903, newshape=[8, 12, 9]) /* ty=Tensor[(8, 12, 9), float32] */;
    %906 = @func_5816(%904, %905) /* ty=(Tensor[(8, 12, 9), float32],) */;
    %907 = %901.1;
    %908 = @func_5088() /* ty=Tensor[(10, 4, 12), float32] */;
    %909 = %906.0;
    (%907, %908, %909, meta[relay.Constant][63] /* ty=Tensor[(2, 432), float32] */)
  };
  %910() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32], Tensor[(8, 12, 9), float32], Tensor[(2, 432), float32]) */
}

def @func_4984(%var_4969: Tensor[(12, 15, 13), int64]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32]) {
  %911 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %912 = %911.0;
  %913 = cast(%var_4969, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %914 = shape_of(%912, dtype="int32") /* ty=Tensor[(3), int32] */;
  %915 = cast(%912, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
  %916 = dyn.reshape(%913, %914, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %917 = @func_3552() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %918 = floor_divide(%915, %916) /* ty=Tensor[(12, 15, 13), float32] */;
  %919 = %917.0;
  %920 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%918, %919, %920)
}

def @func_5032() -> (Tensor[(1638), int8], Tensor[(12, 15, 13), int64]) {
  %932 = fn () -> (Tensor[(1638), int8], Tensor[(12, 15, 13), int64]) {
    %921 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
    %922 = %921.2;
    %923 = cast(%922, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %924 = sinh(%923) /* ty=Tensor[(1638), float64] */;
    %925 = cast(%922, dtype="int8") /* ty=Tensor[(1638), int8] */;
    %926 = shape_of(%924, dtype="int32") /* ty=Tensor[(1), int32] */;
    %927 = cast(%924, dtype="int8") /* ty=Tensor[(1638), int8] */;
    %928 = dyn.reshape(%925, %926, newshape=[]) /* ty=Tensor[(?), int8] */;
    %929 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %930 = bitwise_xor(%927, %928) /* ty=Tensor[(1638), int8] */;
    %931 = %929.0;
    (%930, %931)
  };
  %932() /* ty=(Tensor[(1638), int8], Tensor[(12, 15, 13), int64]) */
}

def @func_4635(%var_4633: Tensor[(3, 10, 3), float64], %var_4634: Tensor[(3, 10, 3), float64]) -> (Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) {
  @func_4631(%var_4633, %var_4634) /* ty=(Tensor[(3, 10, 3), float64], Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(2, 2), uint32], Tensor[(12, 15, 13), int64]) */
}

def @func_3356() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_4347(%var_4345: Tensor[(12, 15, 13), int32]) -> (Tensor[(12, 15, 13), bool],) {
  @func_4344(%var_4345) /* ty=(Tensor[(12, 15, 13), bool],) */
}

def @func_4987(%var_4985: Tensor[(12, 15, 13), int64]) -> (Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32]) {
  @func_4984(%var_4985) /* ty=(Tensor[(12, 15, 13), float32], Tensor[(12, 15, 13), int64], Tensor[(10, 4, 12), float32]) */
}

def @func_6756() -> Tensor[(12, 15, 13), float32] {
  @func_6754() /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_5616(%var_5614: Tensor[(160), float32], %var_5615: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(160), float32], Tensor[(2730), float32]) {
  %941 = fn (%var_5610: Tensor[(160), float32], %var_5611: Tensor[(2730), float32]) -> (Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(160), float32], Tensor[(2730), float32]) {
    %933 = @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */;
    %934 = cast(%var_5610, dtype="float32") /* ty=Tensor[(160), float32] */;
    %935 = cast(%var_5611, dtype="float32") /* ty=Tensor[(2730), float32] */;
    %936 = reshape(%934, newshape=[16, 10, 1]) /* ty=Tensor[(16, 10, 1), float32] */;
    %937 = reshape(%935, newshape=[2730]) /* ty=Tensor[(2730), float32] */;
    %938 = @func_5251(%936, %937) /* ty=(Tensor[(16, 10, 1), float32], Tensor[(2730), float32], Tensor[(3, 4), uint16], Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), bool]) */;
    %939 = %933.0;
    %940 = %938.2;
    (%939, %940, %var_5610, %var_5611)
  };
  %941(%var_5614, %var_5615) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(3, 4), uint16], Tensor[(160), float32], Tensor[(2730), float32]) */
}

def @func_2848() -> Tensor[(12, 15, 13), int32] {
  @func_2846() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_7662(%var_7660: Tensor[(2, 6, 15), float64]) -> (Tensor[(2, 6, 15), float64],) {
  @func_7659(%var_7660) /* ty=(Tensor[(2, 6, 15), float64],) */
}

def @func_7192(%var_7191: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16]) {
  %950 = fn (%var_7185: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16]) {
    %942 = @func_4841() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int32]) */;
    %943 = cast(meta[relay.Constant][64] /* ty=Tensor[(4), uint32] */, dtype="uint32") /* ty=Tensor[(4), uint32] */;
    %944 = cast(%var_7185, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %945 = reshape(%943, newshape=[1, 4]) /* ty=Tensor[(1, 4), uint32] */;
    %946 = reshape(%944, newshape=[12, 1]) /* ty=Tensor[(12, 1), uint16] */;
    %947 = @func_1376(%945, %946) /* ty=(Tensor[(1, 4), uint32], Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12, 1), uint16]) */;
    %948 = %942.0;
    %949 = %947.1;
    (%948, %949, meta[relay.Constant][64] /* ty=Tensor[(4), uint32] */, %var_7185)
  };
  %950(%var_7191) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(12), uint16]) */
}

def @func_8027(%var_8010: Tensor[(1638), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(2, 936), float64], Tensor[(700), float32], Tensor[(12, 15, 13), float32], Tensor[(1638), bool], Tensor[(12, ?, 12), uint64], Tensor[(10, 4, 12), float32]) {
  %951 = @func_7061() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64]) */;
  %952 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %953 = cast(meta[relay.Constant][65] /* ty=Tensor[(2, 936), float64] */, dtype="float64") /* ty=Tensor[(2, 936), float64] */;
  %954 = cast(meta[relay.Constant][65] /* ty=Tensor[(2, 936), float64] */, dtype="float64") /* ty=Tensor[(2, 936), float64] */;
  %955 = cast(meta[relay.Constant][66] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %956 = cast(meta[relay.Constant][67] /* ty=Tensor[(700), float32] */, dtype="float32") /* ty=Tensor[(700), float32] */;
  %957 = reshape(%953, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %958 = reshape(%954, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
  %959 = reshape(%955, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
  %960 = reshape(%956, newshape=[350, 2]) /* ty=Tensor[(350, 2), float32] */;
  %961 = @func_4469(%957, %958, %959, %960) /* ty=(Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) */;
  %962 = cast(%var_8010, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %963 = shape_of(meta[relay.Constant][66] /* ty=Tensor[(1638), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %964 = cast(meta[relay.Constant][66] /* ty=Tensor[(1638), float64] */, dtype="bool") /* ty=Tensor[(1638), bool] */;
  %965 = dyn.reshape(%962, %963, newshape=[]) /* ty=Tensor[(?), bool] */;
  %966 = @func_2604() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(144), float64], Tensor[(14, 9, 13), float64], Tensor[(700), float32], Tensor[(12, ?, 12), uint64]) */;
  %967 = @func_5550() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %968 = @func_3045() /* ty=Tensor[(12, 15, 13), int64] */;
  %969 = %951.2;
  %970 = %952.0;
  %971 = %961.4;
  %972 = @func_3944() /* ty=Tensor[(12, 15, 13), float32] */;
  %973 = not_equal(%964, %965) /* ty=Tensor[(1638), bool] */;
  %974 = %966.4;
  %975 = %967.0;
  (%968, %969, %970, %971, meta[relay.Constant][65] /* ty=Tensor[(2, 936), float64] */, meta[relay.Constant][67] /* ty=Tensor[(700), float32] */, %972, %973, %974, %975)
}

def @func_2846() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_3604() -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) {
  @func_3602() /* ty=(Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) */
}

def @func_7562() -> (Tensor[(12, 15, 13), int64], Tensor[(10, 15, 16), float32], Tensor[(2400), float32], Tensor[(12, 15, 13), bool]) {
  %976 = cast(meta[relay.Constant][68] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %977 = cast(meta[relay.Constant][68] /* ty=Tensor[(2400), float32] */, dtype="float32") /* ty=Tensor[(2400), float32] */;
  %978 = reshape(%976, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %979 = reshape(%977, newshape=[10, 15, 16]) /* ty=Tensor[(10, 15, 16), float32] */;
  %980 = @func_6136(%978, %979) /* ty=(Tensor[(10, 15, 16), float32],) */;
  %981 = @func_2139() /* ty=Tensor[(12, 15, 13), int64] */;
  %982 = cast(%981, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
  %983 = reshape(%982, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
  %984 = %980.0;
  %985 = @func_1512(%983) /* ty=Tensor[(12, 15, 13), bool] */;
  (%981, %984, meta[relay.Constant][68] /* ty=Tensor[(2400), float32] */, %985)
}

def @func_3676(%var_3674: Tensor[(1, 3, 9), float32]) -> (Tensor[(1, 3, 9), float32],) {
  @func_3673(%var_3674) /* ty=(Tensor[(1, 3, 9), float32],) */
}

def @func_3756(%var_3745: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), int16], Tensor[(12, 15, 13), int32]) {
  %986 = @func_3034() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %987 = %986.0;
  %988 = cast(%var_3745, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %989 = shape_of(%987, dtype="int32") /* ty=Tensor[(3), int32] */;
  %990 = cast(%987, dtype="int16") /* ty=Tensor[(10, 4, 12), int16] */;
  %991 = dyn.reshape(%988, %989, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %992 = maximum(%990, %991) /* ty=Tensor[(10, 4, 12), int16] */;
  %993 = @func_3356() /* ty=Tensor[(12, 15, 13), int32] */;
  (%992, %993)
}

def @func_1969() -> Tensor[(12, 15, 13), int64] {
  %994 = @func_1304() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %994.0
}

def @func_3602() -> (Tensor[(12, 15, 13), int64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64]) {
  %995 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
  %996 = cast(meta[relay.Constant][69] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %997 = cast(meta[relay.Constant][69] /* ty=Tensor[(1638), float64] */, dtype="float64") /* ty=Tensor[(1638), float64] */;
  %998 = reshape(%996, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %999 = reshape(%997, newshape=[14, 9, 13]) /* ty=Tensor[(14, 9, 13), float64] */;
  %1000 = %995.0;
  %1001 = @func_33(%998, %999) /* ty=Tensor[(14, 9, 13), float64] */;
  (%1000, %1001, meta[relay.Constant][69] /* ty=Tensor[(1638), float64] */)
}

def @func_2140() -> Tensor[(12, 15, 13), int64] {
  %1003 = fn () -> Tensor[(12, 15, 13), int64] {
    %1002 = @func_1430() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %1002.0
  };
  %1003() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_3843(%var_3841: Tensor[(7, 14, 4), float32], %var_3842: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(7, 14, 4), float64]) {
  %1017 = fn (%var_3796: Tensor[(7, 14, 4), float32], %var_3829: Tensor[(12), uint16]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(7, 14, 4), float64]) {
    %1004 = @func_2613() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %1005 = cast(%var_3829, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %1006 = reshape(%1005, newshape=[12]) /* ty=Tensor[(12), uint16] */;
    %1007 = @func_1798(%1006) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(4, 3), uint16], Tensor[(12), uint16], Tensor[(4), uint32], Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12, 1), uint16]) */;
    %1008 = cast(%var_3796, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %1009 = shape_of(meta[relay.Constant][70] /* ty=Tensor[(7, 14, 4), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1010 = cast(meta[relay.Constant][70] /* ty=Tensor[(7, 14, 4), float32] */, dtype="float32") /* ty=Tensor[(7, 14, 4), float32] */;
    %1011 = dyn.reshape(%1008, %1009, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1012 = divide(%1010, %1011) /* ty=Tensor[(7, 14, 4), float32] */;
    %1013 = cast(%1012, dtype="float64") /* ty=Tensor[(7, 14, 4), float64] */;
    %1014 = %1004.0;
    %1015 = %1007.5;
    %1016 = atan(%1013) /* ty=Tensor[(7, 14, 4), float64] */;
    (%1014, %1015, %var_3829, %1016)
  };
  %1017(%var_3841, %var_3842) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 2730), int8], Tensor[(12), uint16], Tensor[(7, 14, 4), float64]) */
}

def @func_5492() -> Tensor[(12, 15, 13), int64] {
  @func_5490() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_3884() -> Tensor[(12, 15, 13), float32] {
  %1021 = fn () -> Tensor[(12, 15, 13), float32] {
    %1018 = @func_3552() /* ty=(Tensor[(12, 15, 13), int64],) */;
    %1019 = %1018.0;
    %1020 = cast(%1019, dtype="float32") /* ty=Tensor[(12, 15, 13), float32] */;
    acosh(%1020) /* ty=Tensor[(12, 15, 13), float32] */
  };
  %1021() /* ty=Tensor[(12, 15, 13), float32] */
}

def @func_6258() -> Tensor[(10, 4, 12), float32] {
  %1023 = fn () -> Tensor[(10, 4, 12), float32] {
    %1022 = @func_4814() /* ty=(Tensor[(10, 4, 12), float32],) */;
    %1022.0
  };
  %1023() /* ty=Tensor[(10, 4, 12), float32] */
}

def @func_4814() -> (Tensor[(10, 4, 12), float32],) {
  %1024 = @func_2526() /* ty=Tensor[(10, 4, 12), float32] */;
  (%1024,)
}

def @func_5623() -> Tensor[(10, 4, 12), float32] {
  %1026 = fn () -> Tensor[(10, 4, 12), float32] {
    %1025 = @func_5296() /* ty=(Tensor[(10, 4, 12), float32],) */;
    %1025.0
  };
  %1026() /* ty=Tensor[(10, 4, 12), float32] */
}

def @func_7091() -> Tensor[(12, 15, 13), int64] {
  %1028 = fn () -> Tensor[(12, 15, 13), int64] {
    %1027 = @func_5031() /* ty=(Tensor[(1638), int8], Tensor[(12, 15, 13), int64]) */;
    %1027.1
  };
  %1028() /* ty=Tensor[(12, 15, 13), int64] */
}

def @func_5550() -> (Tensor[(10, 4, 12), float32],) {
  %1029 = @func_4073() /* ty=(Tensor[(10, 4, 12), float32],) */;
  %1030 = %1029.0;
  (%1030,)
}

def @func_3759(%var_3757: Tensor[(10, 4, 12), float32]) -> (Tensor[(10, 4, 12), int16], Tensor[(12, 15, 13), int32]) {
  @func_3756(%var_3757) /* ty=(Tensor[(10, 4, 12), int16], Tensor[(12, 15, 13), int32]) */
}

def @func_8044() -> (Tensor[(12, 15, 13), float64],) {
  %1033 = fn () -> (Tensor[(12, 15, 13), float64],) {
    %1031 = @func_2175() /* ty=(Tensor[(12, 15, 13), float64], Tensor[(13, 15, 14), float32], Tensor[(2730), float32], Tensor[(12), uint16], Tensor[(6, 2), uint16]) */;
    %1032 = %1031.0;
    (%1032,)
  };
  %1033() /* ty=(Tensor[(12, 15, 13), float64],) */
}

def @func_6836(%var_6811: uint8, %var_6812: Tensor[(1, 9, 7), uint8]) -> Tensor[(1, 9, 7), bool] {
  %1034 = cast(%var_6811, dtype="bool") /* ty=bool */;
  %1035 = cast(%var_6812, dtype="bool") /* ty=Tensor[(1, 9, 7), bool] */;
  greater_equal(%1034, %1035) /* ty=Tensor[(1, 9, 7), bool] */
}

def @func_7631(%var_7628: Tensor[(3, 4, 9), uint64], %var_7629: Tensor[(3, 4, 9), uint64], %var_7630: Tensor[(924), uint64]) -> (Tensor[(3, 4, 9), bool], Tensor[(3, 4, 9), float64], Tensor[(700), float32], Tensor[(924), uint64]) {
  %1055 = fn (%var_7587: Tensor[(3, 4, 9), uint64], %var_7588: Tensor[(3, 4, 9), uint64], %var_7611: Tensor[(924), uint64]) -> (Tensor[(3, 4, 9), bool], Tensor[(3, 4, 9), float64], Tensor[(700), float32], Tensor[(924), uint64]) {
    %1036 = cast(%var_7588, dtype="bool") /* ty=Tensor[(3, 4, 9), bool] */;
    %1037 = shape_of(%var_7587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1038 = cast(%var_7587, dtype="bool") /* ty=Tensor[(3, 4, 9), bool] */;
    %1039 = dyn.reshape(%1036, %1037, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1040 = cast(%var_7588, dtype="uint64") /* ty=Tensor[(3, 4, 9), uint64] */;
    %1041 = shape_of(%var_7587, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1042 = cast(%var_7587, dtype="uint64") /* ty=Tensor[(3, 4, 9), uint64] */;
    %1043 = dyn.reshape(%1040, %1041, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %1044 = bitwise_and(%1042, %1043) /* ty=Tensor[(3, 4, 9), uint64] */;
    %1045 = cast(%var_7588, dtype="float64") /* ty=Tensor[(3, 4, 9), float64] */;
    %1046 = shape_of(%1044, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1047 = cast(%1044, dtype="float64") /* ty=Tensor[(3, 4, 9), float64] */;
    %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %1049 = cast(%var_7611, dtype="uint64") /* ty=Tensor[(924), uint64] */;
    %1050 = reshape(%1049, newshape=[11, 6, 14]) /* ty=Tensor[(11, 6, 14), uint64] */;
    %1051 = @func_2310(%1050) /* ty=(Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 15, 13), int64], Tensor[(11, 6, 14), uint64]) */;
    %1052 = not_equal(%1038, %1039) /* ty=Tensor[(3, 4, 9), bool] */;
    %1053 = power(%1047, %1048) /* ty=Tensor[(3, 4, 9), float64] */;
    %1054 = %1051.1;
    (%1052, %1053, %1054, %var_7611)
  };
  %1055(%var_7628, %var_7629, %var_7630) /* ty=(Tensor[(3, 4, 9), bool], Tensor[(3, 4, 9), float64], Tensor[(700), float32], Tensor[(924), uint64]) */
}

def @func_2200(%var_2199: Tensor[(2, 72), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) {
  %1060 = fn (%var_2193: Tensor[(2, 72), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) {
    %1056 = cast(%var_2193, dtype="float64") /* ty=Tensor[(2, 72), float64] */;
    %1057 = reshape(%1056, newshape=[12, 1, 12]) /* ty=Tensor[(12, 1, 12), float64] */;
    %1058 = @func_1969() /* ty=Tensor[(12, 15, 13), int64] */;
    %1059 = @func_392(%1057) /* ty=Tensor[(12, 1, 12), float64] */;
    (%1058, %1059, %var_2193)
  };
  %1060(%var_2199) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(12, 1, 12), float64], Tensor[(2, 72), float64]) */
}

def @func_1515(%var_1513: Tensor[(12, 15, 13), int64]) -> Tensor[(12, 15, 13), bool] {
  @func_1512(%var_1513) /* ty=Tensor[(12, 15, 13), bool] */
}

def @func_8086() -> Tensor[(12, 15, 13), int32] {
  @func_2812() /* ty=Tensor[(12, 15, 13), int32] */
}

def @func_7818(%var_7816: Tensor[(1638), float64], %var_7817: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(4), uint32], Tensor[(1872), float64], Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), bool]) {
  %1083 = fn (%var_7781: Tensor[(1638), float64], %var_7782: Tensor[(700), float32]) -> (Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(4), uint32], Tensor[(1872), float64], Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), bool]) {
    %1061 = cast(meta[relay.Constant][71] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %1062 = cast(meta[relay.Constant][71] /* ty=Tensor[(1872), float64] */, dtype="float64") /* ty=Tensor[(1872), float64] */;
    %1063 = cast(%var_7781, dtype="float64") /* ty=Tensor[(1638), float64] */;
    %1064 = cast(%var_7782, dtype="float32") /* ty=Tensor[(700), float32] */;
    %1065 = reshape(%1061, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
    %1066 = reshape(%1062, newshape=[12, 13, 12]) /* ty=Tensor[(12, 13, 12), float64] */;
    %1067 = reshape(%1063, newshape=[1638]) /* ty=Tensor[(1638), float64] */;
    %1068 = reshape(%1064, newshape=[350, 2]) /* ty=Tensor[(350, 2), float32] */;
    %1069 = @func_4469(%1065, %1066, %1067, %1068) /* ty=(Tensor[(12, 13, 12), float64], Tensor[(14, 9, 13), float64], Tensor[(1638), float64], Tensor[(2730), float32], Tensor[(4), uint32], Tensor[(12), uint16], Tensor[(350, 2), float32]) */;
    %1070 = @func_6243() /* ty=Tensor[(12, 15, 13), int32] */;
    %1071 = cast(%1070, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
    %1072 = reshape(%1071, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
    %1073 = @func_4922(%1072) /* ty=(Tensor[(4), uint32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), uint8]) */;
    %1074 = cast(%1070, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
    %1075 = reshape(%1074, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
    %1076 = @func_2812() /* ty=Tensor[(12, 15, 13), int32] */;
    %1077 = cast(%1076, dtype="int64") /* ty=Tensor[(12, 15, 13), int64] */;
    %1078 = reshape(%1077, newshape=[12, 15, 13]) /* ty=Tensor[(12, 15, 13), int64] */;
    %1079 = %1069.4;
    %1080 = %1073.1;
    %1081 = @func_1512(%1075) /* ty=Tensor[(12, 15, 13), bool] */;
    %1082 = @func_1512(%1078) /* ty=Tensor[(12, 15, 13), bool] */;
    (%1070, %1076, %1079, meta[relay.Constant][71] /* ty=Tensor[(1872), float64] */, %var_7781, %var_7782, %1080, %1081, %1082)
  };
  %1083(%var_7816, %var_7817) /* ty=(Tensor[(12, 15, 13), int32], Tensor[(12, 15, 13), int32], Tensor[(4), uint32], Tensor[(1872), float64], Tensor[(1638), float64], Tensor[(700), float32], Tensor[(12, 1), uint16], Tensor[(12, 15, 13), bool], Tensor[(12, 15, 13), bool]) */
}

def @func_8030(%var_8028: Tensor[(1638), float64]) -> (Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(2, 936), float64], Tensor[(700), float32], Tensor[(12, 15, 13), float32], Tensor[(1638), bool], Tensor[(12, ?, 12), uint64], Tensor[(10, 4, 12), float32]) {
  @func_8027(%var_8028) /* ty=(Tensor[(12, 15, 13), int64], Tensor[(13, 15, 14), float64], Tensor[(12, 15, 13), int64], Tensor[(4), uint32], Tensor[(2, 936), float64], Tensor[(700), float32], Tensor[(12, 15, 13), float32], Tensor[(1638), bool], Tensor[(12, ?, 12), uint64], Tensor[(10, 4, 12), float32]) */
}

def @func_4075() -> (Tensor[(10, 4, 12), float32],) {
  @func_4073() /* ty=(Tensor[(10, 4, 12), float32],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen210/build/output.py", line 2800, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:57:40] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

