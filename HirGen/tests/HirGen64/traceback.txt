==========mod==========
#[version = "0.0.5"]
def @func_5104() -> Tensor[(2, 9, 7), float32] {
  @func_4738() /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_5177() -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64]) {
  %0 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %1 = %0.2;
  %2 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  (%1, %2)
}

def @func_4177(%var_4105: uint32, %var_4106: Tensor[(1, 15), uint32], %var_4138: Tensor[(1, 756), float32]) -> (Tensor[(2, 9, 7), float64], Tensor[(1200), int32], Tensor[(1200), int32], Tensor[(2, 13, 3), float64], Tensor[(9, 12, 7), float32], Tensor[(1, 756), float32], Tensor[(9, 8, 15), bool], Tensor[(78), uint16]) {
  %3 = @func_3919() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %4 = cast(%var_4105, dtype="uint32") /* ty=uint32 */;
  %5 = cast(%var_4106, dtype="uint32") /* ty=Tensor[(1, 15), uint32] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(1200), int32] */, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %7 = reshape(%4, newshape=[]) /* ty=uint32 */;
  %8 = reshape(%5, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %9 = reshape(%6, newshape=[1200]) /* ty=Tensor[(1200), int32] */;
  %10 = @func_1094(%7, %8, %9) /* ty=(Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) */;
  %11 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %12 = reshape(%11, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
  %13 = @func_808(%12) /* ty=(Tensor[(2, 13, 3), float64],) */;
  %14 = cast(%var_4138, dtype="float32") /* ty=Tensor[(1, 756), float32] */;
  %15 = reshape(%14, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float32] */;
  %16 = @func_1366(%15) /* ty=(Tensor[(9, 12, 7), float32],) */;
  %17 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %18 = %17.0;
  %19 = cast(%var_4106, dtype="bool") /* ty=Tensor[(1, 15), bool] */;
  %20 = cast(%18, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %21 = cast(meta[relay.Constant][1] /* ty=Tensor[(78), float64] */, dtype="uint16") /* ty=Tensor[(78), uint16] */;
  %22 = cast(%var_4105, dtype="uint16") /* ty=uint16 */;
  %23 = %3.0;
  %24 = %10.2;
  %25 = %13.0;
  %26 = %16.0;
  %27 = greater(%19, %20) /* ty=Tensor[(9, 8, 15), bool] */;
  %28 = bitwise_xor(%21, %22) /* ty=Tensor[(78), uint16] */;
  (%23, %24, meta[relay.Constant][0] /* ty=Tensor[(1200), int32] */, %25, %26, %var_4138, %27, %28)
}

def @func_4465() -> Tensor[(5, 6, 1), float32] {
  %29 = cast(meta[relay.Constant][2] /* ty=Tensor[(5, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 1), float32] */;
  sinh(%29) /* ty=Tensor[(5, 6, 1), float32] */
}

def @func_2582() -> (Tensor[(12, 8, 3), float32],) {
  %30 = @func_2385() /* ty=(Tensor[(12, 8, 3), float32],) */;
  %31 = %30.0;
  (%31,)
}

def @func_4239(%var_4221: Tensor[(27, 2), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64], Tensor[(27, 2), uint64]) {
  %32 = @func_3543() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64]) */;
  %33 = cast(meta[relay.Constant][3] /* ty=Tensor[(27, 2), float64] */, dtype="float64") /* ty=Tensor[(27, 2), float64] */;
  %34 = reshape(%33, newshape=[3, 18]) /* ty=Tensor[(3, 18), float64] */;
  %35 = @func_3250(%34) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(9, 8, 15), int16], float32, Tensor[(2, 9, 3), float32], Tensor[(3, 18), float64]) */;
  %36 = cast(%var_4221, dtype="uint64") /* ty=Tensor[(27, 2), uint64] */;
  %37 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(27, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %38 = cast(meta[relay.Constant][3] /* ty=Tensor[(27, 2), float64] */, dtype="uint64") /* ty=Tensor[(27, 2), uint64] */;
  %39 = dyn.reshape(%36, %37, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %40 = %32.0;
  %41 = %35.0;
  %42 = logical_xor(%38, %39) /* ty=Tensor[(27, 2), uint64] */;
  (%40, %41, %42)
}

def @func_2547(%var_2539: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int16], Tensor[(2, 9, 7), float64]) {
  %43 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %44 = %43.0;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %46 = log2(%45) /* ty=Tensor[(2, 9, 7), float64] */;
  %47 = cast(%var_2539, dtype="int16") /* ty=Tensor[(2, 9, 7), int16] */;
  %48 = shape_of(%46, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%46, dtype="int16") /* ty=Tensor[(2, 9, 7), int16] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %51 = cast(%44, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %52 = subtract(%49, %50) /* ty=Tensor[(2, 9, 7), int16] */;
  %53 = sqrt(%51) /* ty=Tensor[(2, 9, 7), float64] */;
  (%52, %53)
}

def @func_3919() -> (Tensor[(2, 9, 7), float64],) {
  %54 = @func_1312() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %55 = %54.0;
  (%55,)
}

def @func_3333() -> (Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) {
  %56 = @func_2582() /* ty=(Tensor[(12, 8, 3), float32],) */;
  %57 = %56.0;
  %58 = cast(%57, dtype="float64") /* ty=Tensor[(12, 8, 3), float64] */;
  %59 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
  %60 = sin(%58) /* ty=Tensor[(12, 8, 3), float64] */;
  %61 = %59.0;
  (%60, %61)
}

def @func_3190(%var_3174: Tensor[(1620), uint64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float64]) {
  %62 = cast(%var_3174, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %63 = cast(%var_3174, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %64 = reshape(%62, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %65 = reshape(%63, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %66 = @func_1507(%64, %65) /* ty=(Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) */;
  %67 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
  %68 = %66.2;
  %69 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
  (%67, %68, %var_3174, %69)
}

def @func_1649(%var_1620: Tensor[(2, 9, 7), float64], %var_1645: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), uint32], Tensor[(2, 9, 7), float64]) {
  %70 = @func_1578() /* ty=Tensor[(2, 9, 7), float64] */;
  %71 = cast(%var_1620, dtype="uint32") /* ty=Tensor[(2, 9, 7), uint32] */;
  %72 = shape_of(%70, dtype="int32") /* ty=Tensor[(3), int32] */;
  %73 = cast(%70, dtype="uint32") /* ty=Tensor[(2, 9, 7), uint32] */;
  %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %75 = cast(%var_1645, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %76 = shape_of(%var_1620, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%var_1620, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %79 = minimum(%73, %74) /* ty=Tensor[(2, 9, 7), uint32] */;
  %80 = floor_mod(%77, %78) /* ty=Tensor[(2, 9, 7), float64] */;
  (%79, %80)
}

def @func_2901(%var_2860: Tensor[(12, 8, 3), float32]) -> (Tensor[(12, 8, 3), uint16],) {
  %81 = @func_2582() /* ty=(Tensor[(12, 8, 3), float32],) */;
  %82 = %81.0;
  %83 = cast(%var_2860, dtype="uint16") /* ty=Tensor[(12, 8, 3), uint16] */;
  %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(3), int32] */;
  %85 = cast(%82, dtype="uint16") /* ty=Tensor[(12, 8, 3), uint16] */;
  %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %87 = logical_xor(%85, %86) /* ty=Tensor[(12, 8, 3), uint16] */;
  (%87,)
}

def @func_5255() -> Tensor[(2, 9, 7), float64] {
  @func_1578() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_4070(%var_4061: Tensor[(16, 6, 12), float32], %var_4067: Tensor[(150), int32], %var_4068: Tensor[(1200), int32]) -> (Tensor[(16, 6, 12), float32], Tensor[(10, 15, 8), int32], Tensor[(150), int32], Tensor[(1200), int32]) {
  %88 = cast(%var_4061, dtype="float32") /* ty=Tensor[(16, 6, 12), float32] */;
  %89 = cast(%var_4067, dtype="int32") /* ty=Tensor[(150), int32] */;
  %90 = cast(%var_4068, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %91 = reshape(%89, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
  %92 = reshape(%90, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
  %93 = @func_188(%91, %92) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
  %94 = rsqrt(%88) /* ty=Tensor[(16, 6, 12), float32] */;
  %95 = %93.0;
  (%94, %95, %var_4067, %var_4068)
}

def @main(%var_5258: Tensor[(5, 12, 5), float64], %var_5259: Tensor[(5, 12, 5), float64]) -> (Tensor[(5, 12, 5), bool],) {
  %96 = cast(%var_5259, dtype="bool") /* ty=Tensor[(5, 12, 5), bool] */;
  %97 = shape_of(%var_5258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %98 = cast(%var_5258, dtype="bool") /* ty=Tensor[(5, 12, 5), bool] */;
  %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %100 = less_equal(%98, %99) /* ty=Tensor[(5, 12, 5), bool] */;
  (%100,)
}

def @func_2284() -> (Tensor[(2, 9, 7), float64],) {
  %101 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  (%101,)
}

def @func_4806() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  %102 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %103 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  %104 = %102.0;
  (%103, %104)
}

def @func_4712(%var_4704: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  %105 = @func_3223() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(10, 15, 8), float32], Tensor[(150), int32], Tensor[(2, 9, 7), float64]) */;
  %106 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %107 = %106.0;
  %108 = cast(%var_4704, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %109 = shape_of(%107, dtype="int32") /* ty=Tensor[(3), int32] */;
  %110 = cast(%107, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %111 = dyn.reshape(%108, %109, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %112 = %105.3;
  %113 = divide(%110, %111) /* ty=Tensor[(2, 9, 7), float64] */;
  (%112, %113)
}

def @func_2222(%var_2215: Tensor[(15), uint32], %var_2216: Tensor[(60, 20), int32]) -> (Tensor[(2, 9, 7), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(60, 20), int32]) {
  %114 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
  %115 = cast(%var_2215, dtype="uint32") /* ty=Tensor[(15), uint32] */;
  %116 = cast(%var_2216, dtype="int32") /* ty=Tensor[(60, 20), int32] */;
  %117 = reshape(%114, newshape=[]) /* ty=uint32 */;
  %118 = reshape(%115, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %119 = reshape(%116, newshape=[1200]) /* ty=Tensor[(1200), int32] */;
  %120 = @func_1094(%117, %118, %119) /* ty=(Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) */;
  %121 = @func_1578() /* ty=Tensor[(2, 9, 7), float64] */;
  %122 = %120.0;
  (%121, %122, meta[relay.Constant][4] /* ty=uint32 */, %var_2215, %var_2216)
}

def @func_2385() -> (Tensor[(12, 8, 3), float32],) {
  %123 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 3), float64] */;
  %124 = atanh(%123) /* ty=Tensor[(12, 8, 3), float64] */;
  %125 = cast(meta[relay.Constant][5] /* ty=Tensor[(12, 8, 3), float64] */, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
  %126 = shape_of(%124, dtype="int32") /* ty=Tensor[(3), int32] */;
  %127 = cast(%124, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
  %128 = dyn.reshape(%125, %126, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %129 = divide(%127, %128) /* ty=Tensor[(12, 8, 3), float32] */;
  (%129,)
}

def @func_642(%var_632: Tensor[(15, 12, 9), uint64]) -> Tensor[(15, 12, 9), uint64] {
  %130 = cast(%var_632, dtype="uint64") /* ty=Tensor[(15, 12, 9), uint64] */;
  %131 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(15, 12, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(15, 12, 9), uint64] */, dtype="uint64") /* ty=Tensor[(15, 12, 9), uint64] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  logical_xor(%132, %133) /* ty=Tensor[(15, 12, 9), uint64] */
}

def @func_525(%var_514: Tensor[(14, 16, 14), float32]) -> (Tensor[(14, 16, 14), float32],) {
  %134 = cast(%var_514, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  %135 = acos(%134) /* ty=Tensor[(14, 16, 14), float32] */;
  (%135,)
}

def @func_4513() -> Tensor[(2, 9, 7), float32] {
  %136 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %137 = %136.0;
  %138 = cast(%137, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  tan(%138) /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_1312() -> (Tensor[(2, 9, 7), float64],) {
  %139 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  (%139,)
}

def @func_4934() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  %140 = @func_2298() /* ty=Tensor[(2, 9, 7), float64] */;
  %141 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
  (%140, %141)
}

def @func_4640() -> (Tensor[(9, 8, 15), int16],) {
  %142 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %143 = %142.0;
  (%143,)
}

def @func_1578() -> Tensor[(2, 9, 7), float64] {
  @func_1117() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_1781(%var_1654: int64, %var_1655: Tensor[(12, 2, 10), int64], %var_1688: Tensor[(1620), uint64], %var_1713: Tensor[(54), float64], %var_1748: Tensor[(1620), uint64]) -> (Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) {
  %144 = cast(%var_1654, dtype="bool") /* ty=bool */;
  %145 = cast(%var_1655, dtype="bool") /* ty=Tensor[(12, 2, 10), bool] */;
  %146 = cast(meta[relay.Constant][7] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %147 = reshape(%146, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %148 = @func_1550(%147) /* ty=(Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(1620), uint64], Tensor[(1620), uint64]) */;
  %149 = %148.2;
  %150 = cast(%var_1688, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %151 = shape_of(%149, dtype="int32") /* ty=Tensor[(1), int32] */;
  %152 = cast(%149, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %153 = dyn.reshape(%150, %151, newshape=[]) /* ty=Tensor[(?), bool] */;
  %154 = cast(meta[relay.Constant][8] /* ty=Tensor[(3136), float32] */, dtype="float32") /* ty=Tensor[(3136), float32] */;
  %155 = reshape(%154, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), float32] */;
  %156 = @func_525(%155) /* ty=(Tensor[(14, 16, 14), float32],) */;
  %157 = cast(%var_1713, dtype="float64") /* ty=Tensor[(54), float64] */;
  %158 = reshape(%157, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float64] */;
  %159 = @func_613(%158) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */;
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
  %161 = reshape(%160, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float32] */;
  %162 = @func_1366(%161) /* ty=(Tensor[(9, 12, 7), float32],) */;
  %163 = cast(%var_1748, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %164 = shape_of(%149, dtype="int32") /* ty=Tensor[(1), int32] */;
  %165 = cast(%149, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %166 = dyn.reshape(%163, %164, newshape=[]) /* ty=Tensor[(?), bool] */;
  %167 = %159.1;
  %168 = cast(%167, dtype="float64") /* ty=Tensor[(2, 9, 3), float64] */;
  %169 = reshape(%168, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float64] */;
  %170 = @func_613(%169) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */;
  %171 = cast(%149, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %172 = shape_of(%var_1748, dtype="int32") /* ty=Tensor[(1), int32] */;
  %173 = cast(%var_1748, dtype="bool") /* ty=Tensor[(1620), bool] */;
  %174 = dyn.reshape(%171, %172, newshape=[]) /* ty=Tensor[(?), bool] */;
  %175 = greater_equal(%144, %145) /* ty=Tensor[(12, 2, 10), bool] */;
  %176 = logical_or(%152, %153) /* ty=Tensor[(1620), bool] */;
  %177 = %156.0;
  %178 = %162.0;
  %179 = not_equal(%165, %166) /* ty=Tensor[(1620), bool] */;
  %180 = %170.1;
  %181 = logical_and(%173, %174) /* ty=Tensor[(1620), bool] */;
  (%175, meta[relay.Constant][7] /* ty=Tensor[(1620), uint64] */, %176, %177, meta[relay.Constant][8] /* ty=Tensor[(3136), float32] */, %167, %var_1713, %178, meta[relay.Constant][9] /* ty=Tensor[(756), float32] */, %179, %180, %181)
}

def @func_4907() -> (Tensor[(9, 8, 15), uint8],) {
  %182 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %183 = %182.0;
  %184 = cast(%183, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  %185 = acosh(%184) /* ty=Tensor[(9, 8, 15), float64] */;
  %186 = cast(%185, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  %187 = erf(%186) /* ty=Tensor[(9, 8, 15), float64] */;
  %188 = cast(%183, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  %189 = asin(%188) /* ty=Tensor[(9, 8, 15), float64] */;
  %190 = cast(%189, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
  %191 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %192 = cast(%187, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
  %193 = dyn.reshape(%190, %191, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %194 = power(%192, %193) /* ty=Tensor[(9, 8, 15), float32] */;
  %195 = cast(%189, dtype="uint8") /* ty=Tensor[(9, 8, 15), uint8] */;
  %196 = shape_of(%194, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%194, dtype="uint8") /* ty=Tensor[(9, 8, 15), uint8] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %199 = minimum(%197, %198) /* ty=Tensor[(9, 8, 15), uint8] */;
  (%199,)
}

def @func_2936(%var_2931: float32) -> (Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), float64], Tensor[(100), uint16], float32) {
  %200 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
  %201 = cast(%var_2931, dtype="float32") /* ty=float32 */;
  %202 = reshape(%201, newshape=[]) /* ty=float32 */;
  %203 = @func_2350(%202) /* ty=(Tensor[(8, 12, 7), float32], Tensor[(5, 5, 4), bool], Tensor[(100), uint16], Tensor[(8, 12, 7), float64]) */;
  %204 = %200.0;
  %205 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  %206 = %203.2;
  (%204, %205, %206, %var_2931)
}

def @func_808(%var_779: Tensor[(2, 13, 3), float64]) -> (Tensor[(2, 13, 3), float64],) {
  %207 = cast(%var_779, dtype="float64") /* ty=Tensor[(2, 13, 3), float64] */;
  %208 = rsqrt(%207) /* ty=Tensor[(2, 13, 3), float64] */;
  (%208,)
}

def @func_2298() -> Tensor[(2, 9, 7), float64] {
  @func_1578() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_1507(%var_1418: Tensor[(1620), uint64], %var_1489: Tensor[(1620), float64]) -> (Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) {
  %209 = cast(%var_1418, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %210 = reshape(%209, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %211 = @func_968(%210) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %212 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %213 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %214 = %213.0;
  %215 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  %216 = cast(%215, dtype="uint16") /* ty=Tensor[(2, 9, 7), uint16] */;
  %217 = shape_of(%214, dtype="int32") /* ty=Tensor[(3), int32] */;
  %218 = cast(%214, dtype="uint16") /* ty=Tensor[(2, 9, 7), uint16] */;
  %219 = dyn.reshape(%216, %217, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %220 = %211.1;
  %221 = cast(%220, dtype="uint64") /* ty=Tensor[(15, 12, 9), uint64] */;
  %222 = reshape(%221, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %223 = @func_968(%222) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %224 = %223.2;
  %225 = cast(%224, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %226 = sinh(%225) /* ty=Tensor[(1620), float64] */;
  %227 = cast(%var_1489, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %228 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %229 = cast(%226, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
  %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %231 = cast(%var_1489, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %232 = reshape(%231, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %233 = @func_968(%232) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %234 = cast(%224, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %235 = shape_of(%226, dtype="int32") /* ty=Tensor[(1), int32] */;
  %236 = cast(%226, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %237 = dyn.reshape(%234, %235, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %238 = logical_xor(%236, %237) /* ty=Tensor[(1620), uint64] */;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %240 = cosh(%239) /* ty=Tensor[(1620), float32] */;
  %241 = cast(%240, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %242 = %212.1;
  %243 = add(%218, %219) /* ty=Tensor[(2, 9, 7), uint16] */;
  %244 = bitwise_and(%229, %230) /* ty=Tensor[(1620), uint8] */;
  %245 = %233.1;
  %246 = atan(%241) /* ty=Tensor[(1620), float32] */;
  (%220, %var_1418, %242, %243, %244, %245, %246)
}

def @func_3444() -> Tensor[(78), float64] {
  %247 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %247.2
}

def @func_3643(%var_3595: Tensor[(2, 15, 6), float64]) -> (Tensor[(1620), uint64], Tensor[(12, 13, 11), float32], Tensor[(2, 15, 6), uint32]) {
  %248 = cast(meta[relay.Constant][10] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %249 = reshape(%248, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %250 = @func_968(%249) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %251 = %250.0;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(12, 13, 11), float32] */;
  %253 = cast(%var_3595, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %254 = sin(%253) /* ty=Tensor[(2, 15, 6), float64] */;
  %255 = cast(%var_3595, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %256 = shape_of(%254, dtype="int32") /* ty=Tensor[(3), int32] */;
  %257 = cast(%254, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %258 = dyn.reshape(%255, %256, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %259 = less_equal(%257, %258) /* ty=Tensor[(2, 15, 6), bool] */;
  %260 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 15, 6), bool] */, dtype="uint32") /* ty=Tensor[(2, 15, 6), uint32] */;
  %261 = shape_of(%259, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(%259, dtype="uint32") /* ty=Tensor[(2, 15, 6), uint32] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %264 = acosh(%252) /* ty=Tensor[(12, 13, 11), float32] */;
  %265 = add(%262, %263) /* ty=Tensor[(2, 15, 6), uint32] */;
  (meta[relay.Constant][10] /* ty=Tensor[(1620), uint64] */, %264, %265)
}

def @func_3697(%var_3682: Tensor[(3, 6, 10), uint32], %var_3683: Tensor[(3, 6, 10), uint32]) -> Tensor[(3, 6, 10), uint32] {
  %266 = cast(%var_3683, dtype="uint32") /* ty=Tensor[(3, 6, 10), uint32] */;
  %267 = shape_of(%var_3682, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%var_3682, dtype="uint32") /* ty=Tensor[(3, 6, 10), uint32] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  maximum(%268, %269) /* ty=Tensor[(3, 6, 10), uint32] */
}

def @func_4738() -> Tensor[(2, 9, 7), float32] {
  %270 = @func_4279() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  cos(%272) /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_4948() -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(126), float64], Tensor[(2, 13, 3), float64]) {
  %273 = cast(meta[relay.Constant][12] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
  %274 = reshape(%273, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
  %275 = @func_4712(%274) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) */;
  %276 = @func_3444() /* ty=Tensor[(78), float64] */;
  %277 = cast(%276, dtype="float64") /* ty=Tensor[(78), float64] */;
  %278 = reshape(%277, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
  %279 = @func_808(%278) /* ty=(Tensor[(2, 13, 3), float64],) */;
  %280 = %275.0;
  %281 = %279.0;
  (%276, %280, meta[relay.Constant][12] /* ty=Tensor[(126), float64] */, %281)
}

def @func_468(%var_457: Tensor[(25, 6), int32]) -> (Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) {
  %282 = cast(meta[relay.Constant][13] /* ty=Tensor[(11, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 16), float64] */;
  %283 = cast(%var_457, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
  %284 = cast(meta[relay.Constant][14] /* ty=Tensor[(1200), int32] */, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %285 = reshape(%283, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
  %286 = reshape(%284, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
  %287 = @func_188(%285, %286) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
  %288 = cast(%var_457, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
  %289 = %287.2;
  %290 = cast(%289, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %291 = reshape(%288, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
  %292 = reshape(%290, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
  %293 = @func_188(%291, %292) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
  %294 = exp(%282) /* ty=Tensor[(11, 15, 16), float64] */;
  %295 = %293.0;
  (%294, %289, %var_457, meta[relay.Constant][14] /* ty=Tensor[(1200), int32] */, %295)
}

def @func_4402(%var_4392: Tensor[(2, 9, 7), float64]) -> (Tensor[(9, 8, 15), float64], Tensor[(2, 9, 7), bool], Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), bool]) {
  %296 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
  %297 = cast(%296, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %298 = rsqrt(%297) /* ty=Tensor[(2, 9, 7), float64] */;
  %299 = cast(%298, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %300 = erf(%299) /* ty=Tensor[(2, 9, 7), float64] */;
  %301 = cast(%300, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %302 = acosh(%301) /* ty=Tensor[(2, 9, 7), float64] */;
  %303 = cast(%298, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %304 = shape_of(%302, dtype="int32") /* ty=Tensor[(3), int32] */;
  %305 = cast(%302, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %306 = dyn.reshape(%303, %304, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %307 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
  %308 = cast(%var_4392, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %309 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %310 = cast(%300, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %311 = dyn.reshape(%308, %309, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %312 = @func_4270() /* ty=Tensor[(9, 8, 15), float64] */;
  %313 = logical_or(%305, %306) /* ty=Tensor[(2, 9, 7), bool] */;
  %314 = %307.0;
  %315 = equal(%310, %311) /* ty=Tensor[(2, 9, 7), bool] */;
  (%312, %313, %314, %315)
}

def @func_2031(%var_2024: Tensor[(5, 5, 4), uint16]) -> Tensor[(5, 5, 4), bool] {
  %316 = cast(meta[relay.Constant][15] /* ty=Tensor[(5, 5, 4), uint16] */, dtype="bool") /* ty=Tensor[(5, 5, 4), bool] */;
  %317 = shape_of(%var_2024, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_2024, dtype="bool") /* ty=Tensor[(5, 5, 4), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less(%318, %319) /* ty=Tensor[(5, 5, 4), bool] */
}

def @func_1366(%var_1354: Tensor[(9, 12, 7), float32]) -> (Tensor[(9, 12, 7), float32],) {
  %320 = cast(%var_1354, dtype="float32") /* ty=Tensor[(9, 12, 7), float32] */;
  %321 = asinh(%320) /* ty=Tensor[(9, 12, 7), float32] */;
  (%321,)
}

def @func_188(%var_113: Tensor[(10, 15, 1), int32], %var_128: Tensor[(10, 15, 8), int32]) -> (Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) {
  %322 = cast(%var_113, dtype="int32") /* ty=Tensor[(10, 15, 1), int32] */;
  %323 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %324 = left_shift(%322, %323) /* ty=Tensor[(10, 15, 8), int32] */;
  %325 = cast(%var_128, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %326 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %327 = cast(%324, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %328 = dyn.reshape(%325, %326, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %329 = bitwise_xor(%327, %328) /* ty=Tensor[(10, 15, 8), int32] */;
  %330 = cast(meta[relay.Constant][16] /* ty=Tensor[(10, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %331 = shape_of(%329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %332 = cast(%329, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %333 = dyn.reshape(%330, %331, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %334 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %335 = shape_of(%324, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%324, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %338 = cast(meta[relay.Constant][17] /* ty=Tensor[(10, 15, 8), int32] */, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
  %339 = right_shift(%332, %333) /* ty=Tensor[(10, 15, 8), int32] */;
  %340 = bitwise_or(%336, %337) /* ty=Tensor[(10, 15, 8), int32] */;
  %341 = exp(%338) /* ty=Tensor[(10, 15, 8), float32] */;
  (%339, %340, %341)
}

def @func_613(%var_592: Tensor[(2, 9, 3), float64]) -> (Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) {
  %342 = cast(%var_592, dtype="float64") /* ty=Tensor[(2, 9, 3), float64] */;
  %343 = asin(%342) /* ty=Tensor[(2, 9, 3), float64] */;
  %344 = cast(%343, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %345 = shape_of(%var_592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %346 = cast(%var_592, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %348 = cast(%343, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %349 = floor_mod(%346, %347) /* ty=Tensor[(2, 9, 3), float32] */;
  %350 = erf(%348) /* ty=Tensor[(2, 9, 3), float32] */;
  (%349, %350)
}

def @func_2473(%var_2399: Tensor[(18, 90), uint64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float32], Tensor[(18, 90), uint16], Tensor[(15, 12, 9), float32], Tensor[(2, 13, 3), float64], Tensor[(78), float64], Tensor[(2, 9, 7), int32]) {
  %351 = cast(%var_2399, dtype="uint64") /* ty=Tensor[(18, 90), uint64] */;
  %352 = reshape(%351, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %353 = @func_2174(%352) /* ty=(Tensor[(1620), uint64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float32]) */;
  %354 = cast(%var_2399, dtype="uint64") /* ty=Tensor[(18, 90), uint64] */;
  %355 = reshape(%354, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), uint64] */;
  %356 = @func_642(%355) /* ty=Tensor[(15, 12, 9), uint64] */;
  %357 = cast(%356, dtype="uint16") /* ty=Tensor[(15, 12, 9), uint16] */;
  %358 = shape_of(%var_2399, dtype="int32") /* ty=Tensor[(2), int32] */;
  %359 = cast(%var_2399, dtype="uint16") /* ty=Tensor[(18, 90), uint16] */;
  %360 = dyn.reshape(%357, %358, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %361 = cast(%356, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
  %362 = cast(meta[relay.Constant][18] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %363 = reshape(%362, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
  %364 = @func_808(%363) /* ty=(Tensor[(2, 13, 3), float64],) */;
  %365 = %353.2;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %367 = reshape(%366, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
  %368 = @func_2150(%367) /* ty=(Tensor[(2, 9, 7), int32],) */;
  %369 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
  %370 = left_shift(%359, %360) /* ty=Tensor[(18, 90), uint16] */;
  %371 = tan(%361) /* ty=Tensor[(15, 12, 9), float32] */;
  %372 = %364.0;
  %373 = %368.0;
  (%369, %365, %370, %371, %372, meta[relay.Constant][18] /* ty=Tensor[(78), float64] */, %373)
}

def @func_4633(%var_4609: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int64], Tensor[(2, 9, 7), float64], Tensor[(1232), uint32], Tensor[(2, 9, 7), int32], Tensor[(12, 8, 3), float64]) {
  %374 = @func_2284() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %375 = %374.0;
  %376 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 9, 7), float64] */, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %377 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %378 = cast(%375, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %379 = dyn.reshape(%376, %377, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %380 = cast(%var_4609, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %381 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(2, 9, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %384 = cast(meta[relay.Constant][20] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %385 = reshape(%384, newshape=[8, 11, 14]) /* ty=Tensor[(8, 11, 14), float64] */;
  %386 = @func_3575(%385) /* ty=(Tensor[(8, 11, 14), float64],) */;
  %387 = %386.0;
  %388 = cast(%387, dtype="uint32") /* ty=Tensor[(8, 11, 14), uint32] */;
  %389 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(1232), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %390 = cast(meta[relay.Constant][20] /* ty=Tensor[(1232), float64] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %392 = cast(%375, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %393 = cosh(%392) /* ty=Tensor[(2, 9, 7), float32] */;
  %394 = cast(meta[relay.Constant][19] /* ty=Tensor[(2, 9, 7), float64] */, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %395 = shape_of(%375, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(%375, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %398 = greater(%396, %397) /* ty=Tensor[(2, 9, 7), bool] */;
  %399 = cast(%398, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
  %400 = shape_of(%393, dtype="int32") /* ty=Tensor[(3), int32] */;
  %401 = cast(%393, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
  %402 = dyn.reshape(%399, %400, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %403 = @func_3333() /* ty=(Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) */;
  %404 = bitwise_and(%378, %379) /* ty=Tensor[(2, 9, 7), int64] */;
  %405 = mod(%382, %383) /* ty=Tensor[(2, 9, 7), float64] */;
  %406 = multiply(%390, %391) /* ty=Tensor[(1232), uint32] */;
  %407 = maximum(%401, %402) /* ty=Tensor[(2, 9, 7), int32] */;
  %408 = %403.0;
  (%404, %405, %406, %407, %408)
}

def @func_4777() -> (Tensor[(2, 9, 7), float64], Tensor[(78), float64]) {
  %409 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  %410 = @func_3444() /* ty=Tensor[(78), float64] */;
  (%409, %410)
}

def @func_1550(%var_1542: Tensor[(1620), uint64]) -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(1620), uint64], Tensor[(1620), uint64]) {
  %411 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %412 = cast(%var_1542, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %413 = reshape(%412, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %414 = @func_968(%413) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %415 = %411.2;
  %416 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  %417 = %414.2;
  (%415, %416, %417, %var_1542)
}

def @func_3250(%var_3243: Tensor[(3, 18), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(9, 8, 15), int16], float32, Tensor[(2, 9, 3), float32], Tensor[(3, 18), float64]) {
  %418 = @func_2284() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %419 = cast(3.40444f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %420 = reshape(%419, newshape=[]) /* ty=float32 */;
  %421 = @func_2936(%420) /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), float64], Tensor[(100), uint16], float32) */;
  %422 = cast(%var_3243, dtype="float64") /* ty=Tensor[(3, 18), float64] */;
  %423 = reshape(%422, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float64] */;
  %424 = @func_613(%423) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */;
  %425 = %418.0;
  %426 = %421.0;
  %427 = %424.0;
  (%425, %426, 3.40444f /* ty=float32 */, %427, %var_3243)
}

def @func_2019() -> (Tensor[(9, 8, 15), int16],) {
  %428 = cast(meta[relay.Constant][22] /* ty=Tensor[(9, 8, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
  %429 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(9, 8, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %430 = cast(meta[relay.Constant][21] /* ty=Tensor[(9, 8, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
  %431 = dyn.reshape(%428, %429, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %432 = multiply(%430, %431) /* ty=Tensor[(9, 8, 15), int16] */;
  (%432,)
}

def @func_5057(%var_5032: Tensor[(12, 15, 14), int8], %var_5045: Tensor[(12, 15, 14), int8]) -> (Tensor[(12, 15, 14), int8], Tensor[(12, 15, 14), float64]) {
  %433 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 15, 14), int8] */, dtype="int8") /* ty=Tensor[(12, 15, 14), int8] */;
  %434 = shape_of(%var_5032, dtype="int32") /* ty=Tensor[(3), int32] */;
  %435 = cast(%var_5032, dtype="int8") /* ty=Tensor[(12, 15, 14), int8] */;
  %436 = dyn.reshape(%433, %434, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %437 = cast(%var_5045, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
  %438 = shape_of(meta[relay.Constant][23] /* ty=Tensor[(12, 15, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %439 = cast(meta[relay.Constant][23] /* ty=Tensor[(12, 15, 14), int8] */, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
  %440 = dyn.reshape(%437, %438, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %441 = bitwise_or(%435, %436) /* ty=Tensor[(12, 15, 14), int8] */;
  %442 = divide(%439, %440) /* ty=Tensor[(12, 15, 14), float64] */;
  (%441, %442)
}

def @func_1987(%var_1982: int64, %var_1983: Tensor[(240), int64], %var_1984: Tensor[(3, 540), uint64]) -> (Tensor[(2, 13, 3), float64], Tensor[(1620), bool], int64, Tensor[(240), int64], Tensor[(3, 540), uint64], Tensor[(9, 6), float64]) {
  %443 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %444 = cast(%var_1982, dtype="int64") /* ty=int64 */;
  %445 = cast(%var_1983, dtype="int64") /* ty=Tensor[(240), int64] */;
  %446 = cast(%var_1984, dtype="uint64") /* ty=Tensor[(3, 540), uint64] */;
  %447 = cast(meta[relay.Constant][24] /* ty=Tensor[(9, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 6), float64] */;
  %448 = cast(%var_1984, dtype="uint64") /* ty=Tensor[(3, 540), uint64] */;
  %449 = reshape(%444, newshape=[]) /* ty=int64 */;
  %450 = reshape(%445, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), int64] */;
  %451 = reshape(%446, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %452 = reshape(%447, newshape=[54]) /* ty=Tensor[(54), float64] */;
  %453 = reshape(%448, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %454 = @func_1781(%449, %450, %451, %452, %453) /* ty=(Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) */;
  %455 = %443.1;
  %456 = %454.11;
  (%455, %456, %var_1982, %var_1983, %var_1984, meta[relay.Constant][24] /* ty=Tensor[(9, 6), float64] */)
}

def @func_3401() -> (Tensor[(2, 13, 3), float64],) {
  %457 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %458 = %457.1;
  (%458,)
}

def @func_3497() -> Tensor[(2, 9, 7), float64] {
  @func_1117() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_1094(%var_1080: uint32, %var_1081: Tensor[(1, 1, 15), uint32], %var_1087: Tensor[(1200), int32]) -> (Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) {
  %459 = cast(%var_1080, dtype="uint32") /* ty=uint32 */;
  %460 = cast(%var_1081, dtype="uint32") /* ty=Tensor[(1, 1, 15), uint32] */;
  %461 = cast(meta[relay.Constant][25] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %462 = cast(%var_1087, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %463 = reshape(%461, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
  %464 = reshape(%462, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
  %465 = @func_188(%463, %464) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
  %466 = %465.2;
  %467 = cast(%466, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
  %468 = cast(meta[relay.Constant][25] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %469 = reshape(%468, newshape=[25, 6]) /* ty=Tensor[(25, 6), int32] */;
  %470 = @func_468(%469) /* ty=(Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) */;
  %471 = multiply(%459, %460) /* ty=Tensor[(1, 1, 15), uint32] */;
  %472 = sigmoid(%467) /* ty=Tensor[(10, 15, 8), float32] */;
  %473 = %470.4;
  (%471, meta[relay.Constant][25] /* ty=Tensor[(150), int32] */, %var_1087, %472, %473)
}

def @func_3575(%var_3570: Tensor[(8, 11, 14), float64]) -> (Tensor[(8, 11, 14), float64],) {
  %474 = cast(%var_3570, dtype="float64") /* ty=Tensor[(8, 11, 14), float64] */;
  %475 = erf(%474) /* ty=Tensor[(8, 11, 14), float64] */;
  (%475,)
}

def @func_2838() -> (Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) {
  %476 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
  %477 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %478 = %476.0;
  %479 = %477.1;
  (%478, %479)
}

def @func_968(%var_963: Tensor[(1620), uint64]) -> (Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) {
  %480 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 11), float64] */;
  %481 = atanh(%480) /* ty=Tensor[(12, 13, 11), float64] */;
  %482 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 13, 11), float64] */, dtype="bool") /* ty=Tensor[(12, 13, 11), bool] */;
  %483 = shape_of(%481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%481, dtype="bool") /* ty=Tensor[(12, 13, 11), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = cast(%var_963, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %487 = reshape(%486, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), uint64] */;
  %488 = greater(%484, %485) /* ty=Tensor[(12, 13, 11), bool] */;
  %489 = @func_642(%487) /* ty=Tensor[(15, 12, 9), uint64] */;
  (%488, %489, %var_963)
}

def @func_2150(%var_2145: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int32],) {
  %490 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
  %491 = cast(%var_2145, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
  %492 = shape_of(%490, dtype="int32") /* ty=Tensor[(3), int32] */;
  %493 = cast(%490, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
  %494 = dyn.reshape(%491, %492, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %495 = bitwise_or(%493, %494) /* ty=Tensor[(2, 9, 7), int32] */;
  (%495,)
}

def @func_3478() -> Tensor[(9, 8, 15), int16] {
  %496 = @func_3333() /* ty=(Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) */;
  %496.1
}

def @func_4279() -> (Tensor[(2, 9, 7), float64],) {
  %497 = @func_3497() /* ty=Tensor[(2, 9, 7), float64] */;
  (%497,)
}

def @func_2481() -> Tensor[(2, 9, 7), float64] {
  %498 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %498.0
}

def @func_2660(%var_2632: Tensor[(12, 10, 11), int32], %var_2633: Tensor[(12, 10, 11), int32]) -> (Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) {
  %499 = cast(%var_2633, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %500 = shape_of(%var_2632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %501 = cast(%var_2632, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %502 = dyn.reshape(%499, %500, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %503 = cast(%var_2632, dtype="float64") /* ty=Tensor[(12, 10, 11), float64] */;
  %504 = equal(%501, %502) /* ty=Tensor[(12, 10, 11), bool] */;
  %505 = acosh(%503) /* ty=Tensor[(12, 10, 11), float64] */;
  (%504, %505)
}

def @func_1803() -> Tensor[(2, 9, 7), float64] {
  %506 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %506.0
}

def @func_2752(%var_2721: Tensor[(2, 12, 8), float32], %var_2737: Tensor[(2, 12, 8), float32]) -> (Tensor[(2, 12, 8), int64], Tensor[(2, 12, 8), int64]) {
  %507 = cast(%var_2737, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
  %508 = shape_of(%var_2721, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_2721, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %511 = cast(%var_2721, dtype="float32") /* ty=Tensor[(2, 12, 8), float32] */;
  %512 = asin(%511) /* ty=Tensor[(2, 12, 8), float32] */;
  %513 = cast(%512, dtype="float64") /* ty=Tensor[(2, 12, 8), float64] */;
  %514 = log2(%513) /* ty=Tensor[(2, 12, 8), float64] */;
  %515 = cast(%var_2737, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
  %516 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %517 = cast(%514, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
  %518 = dyn.reshape(%515, %516, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %519 = bitwise_and(%509, %510) /* ty=Tensor[(2, 12, 8), int64] */;
  %520 = add(%517, %518) /* ty=Tensor[(2, 12, 8), int64] */;
  (%519, %520)
}

def @func_3223() -> (Tensor[(2, 9, 7), float64], Tensor[(10, 15, 8), float32], Tensor[(150), int32], Tensor[(2, 9, 7), float64]) {
  %521 = cast(meta[relay.Constant][27] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %522 = reshape(%521, newshape=[25, 6]) /* ty=Tensor[(25, 6), int32] */;
  %523 = @func_468(%522) /* ty=(Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) */;
  %524 = @func_2298() /* ty=Tensor[(2, 9, 7), float64] */;
  %525 = %523.1;
  %526 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  (%524, %525, meta[relay.Constant][27] /* ty=Tensor[(150), int32] */, %526)
}

def @func_3104() -> Tensor[(2, 9, 7), float64] {
  %527 = @func_2284() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %527.0
}

def @func_1200() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) {
  %528 = cast(meta[relay.Constant][28] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %529 = reshape(%528, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
  %530 = @func_808(%529) /* ty=(Tensor[(2, 13, 3), float64],) */;
  %531 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  %532 = %530.0;
  (%531, %532, meta[relay.Constant][28] /* ty=Tensor[(78), float64] */)
}

def @func_2174(%var_2166: Tensor[(1620), uint64]) -> (Tensor[(1620), uint64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float32]) {
  %533 = cast(%var_2166, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %534 = reshape(%533, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %535 = @func_968(%534) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %536 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
  %537 = cast(%536, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %538 = %535.2;
  %539 = log(%537) /* ty=Tensor[(2, 9, 7), float32] */;
  (%538, %var_2166, %539)
}

def @func_3835(%var_3799: Tensor[(16, 16, 16), int64], %var_3833: Tensor[(126), float64]) -> (Tensor[(16, 16, 16), int64], Tensor[(54), float64], Tensor[(240), int64], Tensor[(1620), uint64], Tensor[(54), float64], Tensor[(2, 9, 7), uint32], Tensor[(126), float64]) {
  %540 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %541 = cast(%var_3799, dtype="int64") /* ty=Tensor[(16, 16, 16), int64] */;
  %542 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %543 = cast(meta[relay.Constant][29] /* ty=Tensor[(240), int64] */, dtype="int64") /* ty=Tensor[(240), int64] */;
  %544 = cast(meta[relay.Constant][30] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %545 = cast(meta[relay.Constant][31] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
  %546 = cast(meta[relay.Constant][30] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %547 = reshape(%542, newshape=[]) /* ty=int64 */;
  %548 = reshape(%543, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), int64] */;
  %549 = reshape(%544, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %550 = reshape(%545, newshape=[54]) /* ty=Tensor[(54), float64] */;
  %551 = reshape(%546, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %552 = @func_1781(%547, %548, %549, %550, %551) /* ty=(Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) */;
  %553 = cast(%var_3833, dtype="float64") /* ty=Tensor[(126), float64] */;
  %554 = cast(%var_3833, dtype="float64") /* ty=Tensor[(126), float64] */;
  %555 = reshape(%553, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
  %556 = reshape(%554, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
  %557 = @func_1649(%555, %556) /* ty=(Tensor[(2, 9, 7), uint32], Tensor[(2, 9, 7), float64]) */;
  %558 = multiply(%540, %541) /* ty=Tensor[(16, 16, 16), int64] */;
  %559 = %552.6;
  %560 = %557.0;
  (%558, %559, meta[relay.Constant][29] /* ty=Tensor[(240), int64] */, meta[relay.Constant][30] /* ty=Tensor[(1620), uint64] */, meta[relay.Constant][31] /* ty=Tensor[(54), float64] */, %560, %var_3833)
}

def @func_2350(%var_2321: float32) -> (Tensor[(8, 12, 7), float32], Tensor[(5, 5, 4), bool], Tensor[(100), uint16], Tensor[(8, 12, 7), float64]) {
  %561 = cast(%var_2321, dtype="float32") /* ty=float32 */;
  %562 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 7), float32] */;
  %563 = cast(meta[relay.Constant][33] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
  %564 = reshape(%563, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), uint16] */;
  %565 = cast(meta[relay.Constant][32] /* ty=Tensor[(8, 12, 7), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 7), float64] */;
  %566 = cast(%var_2321, dtype="float64") /* ty=float64 */;
  %567 = power(%561, %562) /* ty=Tensor[(8, 12, 7), float32] */;
  %568 = @func_2031(%564) /* ty=Tensor[(5, 5, 4), bool] */;
  %569 = floor_divide(%565, %566) /* ty=Tensor[(8, 12, 7), float64] */;
  (%567, %568, meta[relay.Constant][33] /* ty=Tensor[(100), uint16] */, %569)
}

def @func_1117() -> Tensor[(2, 9, 7), float64] {
  %570 = cast(meta[relay.Constant][34] /* ty=Tensor[(2, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  sin(%570) /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_3065(%var_2971: Tensor[(1320), int32]) -> (Tensor[(12, 10, 11), int16], Tensor[(9, 8, 15), float32], Tensor[(12, 13, 11), bool], Tensor[(1620), uint64], Tensor[(9, 8, 15), int16]) {
  %571 = cast(%var_2971, dtype="int32") /* ty=Tensor[(1320), int32] */;
  %572 = cast(%var_2971, dtype="int32") /* ty=Tensor[(1320), int32] */;
  %573 = reshape(%571, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
  %574 = reshape(%572, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
  %575 = @func_2660(%573, %574) /* ty=(Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) */;
  %576 = %575.1;
  %577 = cast(%var_2971, dtype="int16") /* ty=Tensor[(1320), int16] */;
  %578 = shape_of(%576, dtype="int32") /* ty=Tensor[(3), int32] */;
  %579 = cast(%576, dtype="int16") /* ty=Tensor[(12, 10, 11), int16] */;
  %580 = dyn.reshape(%577, %578, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %581 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
  %582 = %581.0;
  %583 = cast(%582, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
  %584 = log10(%583) /* ty=Tensor[(9, 8, 15), float32] */;
  %585 = cast(%584, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
  %586 = cast(meta[relay.Constant][35] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %587 = reshape(%586, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %588 = @func_968(%587) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %589 = cast(%582, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  %590 = cos(%589) /* ty=Tensor[(9, 8, 15), float64] */;
  %591 = cast(%584, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  %592 = log2(%591) /* ty=Tensor[(9, 8, 15), float64] */;
  %593 = cast(%592, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
  %594 = shape_of(%590, dtype="int32") /* ty=Tensor[(3), int32] */;
  %595 = cast(%590, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
  %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %597 = bitwise_and(%579, %580) /* ty=Tensor[(12, 10, 11), int16] */;
  %598 = exp(%585) /* ty=Tensor[(9, 8, 15), float32] */;
  %599 = %588.0;
  %600 = add(%595, %596) /* ty=Tensor[(9, 8, 15), int16] */;
  (%597, %598, %599, meta[relay.Constant][35] /* ty=Tensor[(1620), uint64] */, %600)
}

def @func_3984(%var_3925: Tensor[(12, 110), int32]) -> (Tensor[(9, 8, 15), int16], Tensor[(12, 110), int32], Tensor[(12, 110), float64], Tensor[(2, 9, 7), float64]) {
  %601 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %602 = cast(%var_3925, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
  %603 = erf(%602) /* ty=Tensor[(12, 110), float32] */;
  %604 = cast(%603, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
  %605 = rsqrt(%604) /* ty=Tensor[(12, 110), float32] */;
  %606 = cast(%var_3925, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
  %607 = cast(%var_3925, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
  %608 = reshape(%606, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
  %609 = reshape(%607, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
  %610 = @func_2660(%608, %609) /* ty=(Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) */;
  %611 = %610.1;
  %612 = cast(%611, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
  %613 = shape_of(%603, dtype="int32") /* ty=Tensor[(2), int32] */;
  %614 = cast(%603, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
  %615 = dyn.reshape(%612, %613, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %616 = floor_mod(%614, %615) /* ty=Tensor[(12, 110), float32] */;
  %617 = cast(%616, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
  %618 = shape_of(%605, dtype="int32") /* ty=Tensor[(2), int32] */;
  %619 = cast(%605, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
  %620 = dyn.reshape(%617, %618, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %621 = cast(%605, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
  %622 = %601.0;
  %623 = bitwise_xor(%619, %620) /* ty=Tensor[(12, 110), int32] */;
  %624 = cos(%621) /* ty=Tensor[(12, 110), float64] */;
  %625 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
  (%622, %623, %624, %625)
}

def @func_4270() -> Tensor[(9, 8, 15), float64] {
  %626 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %627 = %626.0;
  %628 = cast(%627, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  sigmoid(%628) /* ty=Tensor[(9, 8, 15), float64] */
}

def @func_1920() -> (Tensor[(2, 9, 7), float64],) {
  %629 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
  (%629,)
}

def @func_5022() -> (Tensor[(3, 6, 10), uint32], Tensor[(180), uint32], Tensor[(78), float32], Tensor[(2, 9, 7), float32]) {
  %630 = cast(meta[relay.Constant][36] /* ty=Tensor[(180), uint32] */, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %631 = cast(meta[relay.Constant][36] /* ty=Tensor[(180), uint32] */, dtype="uint32") /* ty=Tensor[(180), uint32] */;
  %632 = reshape(%630, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), uint32] */;
  %633 = reshape(%631, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), uint32] */;
  %634 = @func_4777() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(78), float64]) */;
  %635 = %634.1;
  %636 = cast(%635, dtype="float32") /* ty=Tensor[(78), float32] */;
  %637 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
  %638 = cast(%637, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %639 = @func_3697(%632, %633) /* ty=Tensor[(3, 6, 10), uint32] */;
  %640 = atanh(%636) /* ty=Tensor[(78), float32] */;
  %641 = asin(%638) /* ty=Tensor[(2, 9, 7), float32] */;
  (%639, meta[relay.Constant][36] /* ty=Tensor[(180), uint32] */, %640, %641)
}

def @func_3543() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64]) {
  %642 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %643 = @func_3401() /* ty=(Tensor[(2, 13, 3), float64],) */;
  %644 = %642.0;
  %645 = %643.0;
  (%644, %645)
}

def @func_3392(%var_3369: Tensor[(1620), uint64]) -> (Tensor[(1620), uint64], Tensor[(2, 9, 7), bool]) {
  %646 = cast(%var_3369, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %647 = cast(%var_3369, dtype="float64") /* ty=Tensor[(1620), float64] */;
  %648 = reshape(%646, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %649 = reshape(%647, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
  %650 = @func_1507(%648, %649) /* ty=(Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) */;
  %651 = %650.3;
  %652 = @func_1578() /* ty=Tensor[(2, 9, 7), float64] */;
  %653 = cast(%652, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %654 = shape_of(%651, dtype="int32") /* ty=Tensor[(3), int32] */;
  %655 = cast(%651, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %656 = dyn.reshape(%653, %654, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %657 = not_equal(%655, %656) /* ty=Tensor[(2, 9, 7), bool] */;
  (%var_3369, %657)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1805() -> Tensor[(2, 9, 7), float64] {
  @func_1803() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_644(%var_643: Tensor[(15, 12, 9), uint64]) -> Tensor[(15, 12, 9), uint64] {
  %4 = fn (%var_632: Tensor[(15, 12, 9), uint64]) -> Tensor[(15, 12, 9), uint64] {
    %0 = cast(%var_632, dtype="uint64") /* ty=Tensor[(15, 12, 9), uint64] */;
    %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(15, 12, 9), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(15, 12, 9), uint64] */, dtype="uint64") /* ty=Tensor[(15, 12, 9), uint64] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    logical_xor(%2, %3) /* ty=Tensor[(15, 12, 9), uint64] */
  };
  %4(%var_643) /* ty=Tensor[(15, 12, 9), uint64] */
}

def @func_2549(%var_2548: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int16], Tensor[(2, 9, 7), float64]) {
  %16 = fn (%var_2539: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int16], Tensor[(2, 9, 7), float64]) {
    %5 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
    %6 = %5.0;
    %7 = cast(%6, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %8 = log2(%7) /* ty=Tensor[(2, 9, 7), float64] */;
    %9 = cast(%var_2539, dtype="int16") /* ty=Tensor[(2, 9, 7), int16] */;
    %10 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
    %11 = cast(%8, dtype="int16") /* ty=Tensor[(2, 9, 7), int16] */;
    %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %13 = cast(%6, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %14 = subtract(%11, %12) /* ty=Tensor[(2, 9, 7), int16] */;
    %15 = sqrt(%13) /* ty=Tensor[(2, 9, 7), float64] */;
    (%14, %15)
  };
  %16(%var_2548) /* ty=(Tensor[(2, 9, 7), int16], Tensor[(2, 9, 7), float64]) */
}

def @func_2904(%var_2902: Tensor[(12, 8, 3), float32]) -> (Tensor[(12, 8, 3), uint16],) {
  @func_2901(%var_2902) /* ty=(Tensor[(12, 8, 3), uint16],) */
}

def @func_2664(%var_2662: Tensor[(12, 10, 11), int32], %var_2663: Tensor[(12, 10, 11), int32]) -> (Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) {
  @func_2660(%var_2662, %var_2663) /* ty=(Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) */
}

def @main(%var_5258: Tensor[(5, 12, 5), float64], %var_5259: Tensor[(5, 12, 5), float64]) -> (Tensor[(5, 12, 5), bool],) {
  %17 = cast(%var_5259, dtype="bool") /* ty=Tensor[(5, 12, 5), bool] */;
  %18 = shape_of(%var_5258, dtype="int32") /* ty=Tensor[(3), int32] */;
  %19 = cast(%var_5258, dtype="bool") /* ty=Tensor[(5, 12, 5), bool] */;
  %20 = dyn.reshape(%17, %18, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %21 = less_equal(%19, %20) /* ty=Tensor[(5, 12, 5), bool] */;
  (%21,)
}

def @func_528(%var_526: Tensor[(14, 16, 14), float32]) -> (Tensor[(14, 16, 14), float32],) {
  @func_525(%var_526) /* ty=(Tensor[(14, 16, 14), float32],) */
}

def @func_4466() -> Tensor[(5, 6, 1), float32] {
  %23 = fn () -> Tensor[(5, 6, 1), float32] {
    %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(5, 6, 1), float32] */, dtype="float32") /* ty=Tensor[(5, 6, 1), float32] */;
    sinh(%22) /* ty=Tensor[(5, 6, 1), float32] */
  };
  %23() /* ty=Tensor[(5, 6, 1), float32] */
}

def @func_1118() -> Tensor[(2, 9, 7), float64] {
  %25 = fn () -> Tensor[(2, 9, 7), float64] {
    %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    sin(%24) /* ty=Tensor[(2, 9, 7), float64] */
  };
  %25() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_3575(%var_3570: Tensor[(8, 11, 14), float64]) -> (Tensor[(8, 11, 14), float64],) {
  %26 = cast(%var_3570, dtype="float64") /* ty=Tensor[(8, 11, 14), float64] */;
  %27 = erf(%26) /* ty=Tensor[(8, 11, 14), float64] */;
  (%27,)
}

def @func_2660(%var_2632: Tensor[(12, 10, 11), int32], %var_2633: Tensor[(12, 10, 11), int32]) -> (Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) {
  %28 = cast(%var_2633, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %29 = shape_of(%var_2632, dtype="int32") /* ty=Tensor[(3), int32] */;
  %30 = cast(%var_2632, dtype="bool") /* ty=Tensor[(12, 10, 11), bool] */;
  %31 = dyn.reshape(%28, %29, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %32 = cast(%var_2632, dtype="float64") /* ty=Tensor[(12, 10, 11), float64] */;
  %33 = equal(%30, %31) /* ty=Tensor[(12, 10, 11), bool] */;
  %34 = acosh(%32) /* ty=Tensor[(12, 10, 11), float64] */;
  (%33, %34)
}

def @func_970(%var_969: Tensor[(1620), uint64]) -> (Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) {
  %45 = fn (%var_963: Tensor[(1620), uint64]) -> (Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) {
    %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 13, 11), float64] */, dtype="float64") /* ty=Tensor[(12, 13, 11), float64] */;
    %36 = atanh(%35) /* ty=Tensor[(12, 13, 11), float64] */;
    %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(12, 13, 11), float64] */, dtype="bool") /* ty=Tensor[(12, 13, 11), bool] */;
    %38 = shape_of(%36, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%36, dtype="bool") /* ty=Tensor[(12, 13, 11), bool] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %41 = cast(%var_963, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %42 = reshape(%41, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), uint64] */;
    %43 = greater(%39, %40) /* ty=Tensor[(12, 13, 11), bool] */;
    %44 = @func_642(%42) /* ty=Tensor[(15, 12, 9), uint64] */;
    (%43, %44, %var_963)
  };
  %45(%var_969) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */
}

def @func_2225(%var_2223: Tensor[(15), uint32], %var_2224: Tensor[(60, 20), int32]) -> (Tensor[(2, 9, 7), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(60, 20), int32]) {
  %55 = fn (%var_2215: Tensor[(15), uint32], %var_2216: Tensor[(60, 20), int32]) -> (Tensor[(2, 9, 7), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(60, 20), int32]) {
    %46 = cast(meta[relay.Constant][4] /* ty=uint32 */, dtype="uint32") /* ty=uint32 */;
    %47 = cast(%var_2215, dtype="uint32") /* ty=Tensor[(15), uint32] */;
    %48 = cast(%var_2216, dtype="int32") /* ty=Tensor[(60, 20), int32] */;
    %49 = reshape(%46, newshape=[]) /* ty=uint32 */;
    %50 = reshape(%47, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
    %51 = reshape(%48, newshape=[1200]) /* ty=Tensor[(1200), int32] */;
    %52 = @func_1094(%49, %50, %51) /* ty=(Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) */;
    %53 = @func_1578() /* ty=Tensor[(2, 9, 7), float64] */;
    %54 = %52.0;
    (%53, %54, meta[relay.Constant][4] /* ty=uint32 */, %var_2215, %var_2216)
  };
  %55(%var_2223, %var_2224) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(1, 1, 15), uint32], uint32, Tensor[(15), uint32], Tensor[(60, 20), int32]) */
}

def @func_1098(%var_1095: uint32, %var_1096: Tensor[(1, 1, 15), uint32], %var_1097: Tensor[(1200), int32]) -> (Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) {
  %71 = fn (%var_1080: uint32, %var_1081: Tensor[(1, 1, 15), uint32], %var_1087: Tensor[(1200), int32]) -> (Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) {
    %56 = cast(%var_1080, dtype="uint32") /* ty=uint32 */;
    %57 = cast(%var_1081, dtype="uint32") /* ty=Tensor[(1, 1, 15), uint32] */;
    %58 = cast(meta[relay.Constant][5] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
    %59 = cast(%var_1087, dtype="int32") /* ty=Tensor[(1200), int32] */;
    %60 = reshape(%58, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
    %61 = reshape(%59, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
    %62 = @func_188(%60, %61) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
    %63 = %62.2;
    %64 = cast(%63, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
    %65 = cast(meta[relay.Constant][5] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
    %66 = reshape(%65, newshape=[25, 6]) /* ty=Tensor[(25, 6), int32] */;
    %67 = @func_468(%66) /* ty=(Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) */;
    %68 = multiply(%56, %57) /* ty=Tensor[(1, 1, 15), uint32] */;
    %69 = sigmoid(%64) /* ty=Tensor[(10, 15, 8), float32] */;
    %70 = %67.4;
    (%68, meta[relay.Constant][5] /* ty=Tensor[(150), int32] */, %var_1087, %69, %70)
  };
  %71(%var_1095, %var_1096, %var_1097) /* ty=(Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) */
}

def @func_2021() -> (Tensor[(9, 8, 15), int16],) {
  @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */
}

def @func_2285() -> (Tensor[(2, 9, 7), float64],) {
  %73 = fn () -> (Tensor[(2, 9, 7), float64],) {
    %72 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
    (%72,)
  };
  %73() /* ty=(Tensor[(2, 9, 7), float64],) */
}

def @func_4949() -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(126), float64], Tensor[(2, 13, 3), float64]) {
  %83 = fn () -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(126), float64], Tensor[(2, 13, 3), float64]) {
    %74 = cast(meta[relay.Constant][6] /* ty=Tensor[(126), float64] */, dtype="float64") /* ty=Tensor[(126), float64] */;
    %75 = reshape(%74, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
    %76 = @func_4712(%75) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) */;
    %77 = @func_3444() /* ty=Tensor[(78), float64] */;
    %78 = cast(%77, dtype="float64") /* ty=Tensor[(78), float64] */;
    %79 = reshape(%78, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
    %80 = @func_808(%79) /* ty=(Tensor[(2, 13, 3), float64],) */;
    %81 = %76.0;
    %82 = %80.0;
    (%77, %81, meta[relay.Constant][6] /* ty=Tensor[(126), float64] */, %82)
  };
  %83() /* ty=(Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(126), float64], Tensor[(2, 13, 3), float64]) */
}

def @func_4279() -> (Tensor[(2, 9, 7), float64],) {
  %84 = @func_3497() /* ty=Tensor[(2, 9, 7), float64] */;
  (%84,)
}

def @func_5177() -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64]) {
  %85 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %86 = %85.2;
  %87 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  (%86, %87)
}

def @func_808(%var_779: Tensor[(2, 13, 3), float64]) -> (Tensor[(2, 13, 3), float64],) {
  %88 = cast(%var_779, dtype="float64") /* ty=Tensor[(2, 13, 3), float64] */;
  %89 = rsqrt(%88) /* ty=Tensor[(2, 13, 3), float64] */;
  (%89,)
}

def @func_2152(%var_2151: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int32],) {
  %96 = fn (%var_2145: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int32],) {
    %90 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
    %91 = cast(%var_2145, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
    %92 = shape_of(%90, dtype="int32") /* ty=Tensor[(3), int32] */;
    %93 = cast(%90, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
    %94 = dyn.reshape(%91, %92, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %95 = bitwise_or(%93, %94) /* ty=Tensor[(2, 9, 7), int32] */;
    (%95,)
  };
  %96(%var_2151) /* ty=(Tensor[(2, 9, 7), int32],) */
}

def @func_3700(%var_3698: Tensor[(3, 6, 10), uint32], %var_3699: Tensor[(3, 6, 10), uint32]) -> Tensor[(3, 6, 10), uint32] {
  %101 = fn (%var_3682: Tensor[(3, 6, 10), uint32], %var_3683: Tensor[(3, 6, 10), uint32]) -> Tensor[(3, 6, 10), uint32] {
    %97 = cast(%var_3683, dtype="uint32") /* ty=Tensor[(3, 6, 10), uint32] */;
    %98 = shape_of(%var_3682, dtype="int32") /* ty=Tensor[(3), int32] */;
    %99 = cast(%var_3682, dtype="uint32") /* ty=Tensor[(3, 6, 10), uint32] */;
    %100 = dyn.reshape(%97, %98, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    maximum(%99, %100) /* ty=Tensor[(3, 6, 10), uint32] */
  };
  %101(%var_3698, %var_3699) /* ty=Tensor[(3, 6, 10), uint32] */
}

def @func_3545() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64]) {
  @func_3543() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64]) */
}

def @func_2840() -> (Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) {
  @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */
}

def @func_5104() -> Tensor[(2, 9, 7), float32] {
  @func_4738() /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_2838() -> (Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) {
  %102 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
  %103 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %104 = %102.0;
  %105 = %103.1;
  (%104, %105)
}

def @func_3394(%var_3393: Tensor[(1620), uint64]) -> (Tensor[(1620), uint64], Tensor[(2, 9, 7), bool]) {
  %118 = fn (%var_3369: Tensor[(1620), uint64]) -> (Tensor[(1620), uint64], Tensor[(2, 9, 7), bool]) {
    %106 = cast(%var_3369, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %107 = cast(%var_3369, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %108 = reshape(%106, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %109 = reshape(%107, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %110 = @func_1507(%108, %109) /* ty=(Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) */;
    %111 = %110.3;
    %112 = @func_1578() /* ty=Tensor[(2, 9, 7), float64] */;
    %113 = cast(%112, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %114 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
    %115 = cast(%111, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %116 = dyn.reshape(%113, %114, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %117 = not_equal(%115, %116) /* ty=Tensor[(2, 9, 7), bool] */;
    (%var_3369, %117)
  };
  %118(%var_3393) /* ty=(Tensor[(1620), uint64], Tensor[(2, 9, 7), bool]) */
}

def @func_5106() -> Tensor[(2, 9, 7), float32] {
  @func_5104() /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_3192(%var_3191: Tensor[(1620), uint64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float64]) {
  %127 = fn (%var_3174: Tensor[(1620), uint64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float64]) {
    %119 = cast(%var_3174, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %120 = cast(%var_3174, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %121 = reshape(%119, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %122 = reshape(%120, newshape=[1620]) /* ty=Tensor[(1620), float64] */;
    %123 = @func_1507(%121, %122) /* ty=(Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) */;
    %124 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
    %125 = %123.2;
    %126 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
    (%124, %125, %var_3174, %126)
  };
  %127(%var_3191) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float64]) */
}

def @func_4514() -> Tensor[(2, 9, 7), float32] {
  %131 = fn () -> Tensor[(2, 9, 7), float32] {
    %128 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
    %129 = %128.0;
    %130 = cast(%129, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
    tan(%130) /* ty=Tensor[(2, 9, 7), float32] */
  };
  %131() /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_4177(%var_4105: uint32, %var_4106: Tensor[(1, 15), uint32], %var_4138: Tensor[(1, 756), float32]) -> (Tensor[(2, 9, 7), float64], Tensor[(1200), int32], Tensor[(1200), int32], Tensor[(2, 13, 3), float64], Tensor[(9, 12, 7), float32], Tensor[(1, 756), float32], Tensor[(9, 8, 15), bool], Tensor[(78), uint16]) {
  %132 = @func_3919() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %133 = cast(%var_4105, dtype="uint32") /* ty=uint32 */;
  %134 = cast(%var_4106, dtype="uint32") /* ty=Tensor[(1, 15), uint32] */;
  %135 = cast(meta[relay.Constant][7] /* ty=Tensor[(1200), int32] */, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %136 = reshape(%133, newshape=[]) /* ty=uint32 */;
  %137 = reshape(%134, newshape=[1, 1, 15]) /* ty=Tensor[(1, 1, 15), uint32] */;
  %138 = reshape(%135, newshape=[1200]) /* ty=Tensor[(1200), int32] */;
  %139 = @func_1094(%136, %137, %138) /* ty=(Tensor[(1, 1, 15), uint32], Tensor[(150), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), float32], Tensor[(10, 15, 8), int32]) */;
  %140 = cast(meta[relay.Constant][8] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
  %141 = reshape(%140, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
  %142 = @func_808(%141) /* ty=(Tensor[(2, 13, 3), float64],) */;
  %143 = cast(%var_4138, dtype="float32") /* ty=Tensor[(1, 756), float32] */;
  %144 = reshape(%143, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float32] */;
  %145 = @func_1366(%144) /* ty=(Tensor[(9, 12, 7), float32],) */;
  %146 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %147 = %146.0;
  %148 = cast(%var_4106, dtype="bool") /* ty=Tensor[(1, 15), bool] */;
  %149 = cast(%147, dtype="bool") /* ty=Tensor[(9, 8, 15), bool] */;
  %150 = cast(meta[relay.Constant][8] /* ty=Tensor[(78), float64] */, dtype="uint16") /* ty=Tensor[(78), uint16] */;
  %151 = cast(%var_4105, dtype="uint16") /* ty=uint16 */;
  %152 = %132.0;
  %153 = %139.2;
  %154 = %142.0;
  %155 = %145.0;
  %156 = greater(%148, %149) /* ty=Tensor[(9, 8, 15), bool] */;
  %157 = bitwise_xor(%150, %151) /* ty=Tensor[(78), uint16] */;
  (%152, %153, meta[relay.Constant][7] /* ty=Tensor[(1200), int32] */, %154, %155, %var_4138, %156, %157)
}

def @func_4633(%var_4609: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int64], Tensor[(2, 9, 7), float64], Tensor[(1232), uint32], Tensor[(2, 9, 7), int32], Tensor[(12, 8, 3), float64]) {
  %158 = @func_2284() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %159 = %158.0;
  %160 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 9, 7), float64] */, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %161 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %162 = cast(%159, dtype="int64") /* ty=Tensor[(2, 9, 7), int64] */;
  %163 = dyn.reshape(%160, %161, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %164 = cast(%var_4609, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %165 = shape_of(meta[relay.Constant][9] /* ty=Tensor[(2, 9, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %166 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 9, 7), float64] */, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
  %167 = dyn.reshape(%164, %165, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %168 = cast(meta[relay.Constant][10] /* ty=Tensor[(1232), float64] */, dtype="float64") /* ty=Tensor[(1232), float64] */;
  %169 = reshape(%168, newshape=[8, 11, 14]) /* ty=Tensor[(8, 11, 14), float64] */;
  %170 = @func_3575(%169) /* ty=(Tensor[(8, 11, 14), float64],) */;
  %171 = %170.0;
  %172 = cast(%171, dtype="uint32") /* ty=Tensor[(8, 11, 14), uint32] */;
  %173 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(1232), float64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %174 = cast(meta[relay.Constant][10] /* ty=Tensor[(1232), float64] */, dtype="uint32") /* ty=Tensor[(1232), uint32] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %176 = cast(%159, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
  %177 = cosh(%176) /* ty=Tensor[(2, 9, 7), float32] */;
  %178 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 9, 7), float64] */, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %179 = shape_of(%159, dtype="int32") /* ty=Tensor[(3), int32] */;
  %180 = cast(%159, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
  %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %182 = greater(%180, %181) /* ty=Tensor[(2, 9, 7), bool] */;
  %183 = cast(%182, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
  %184 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
  %185 = cast(%177, dtype="int32") /* ty=Tensor[(2, 9, 7), int32] */;
  %186 = dyn.reshape(%183, %184, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %187 = @func_3333() /* ty=(Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) */;
  %188 = bitwise_and(%162, %163) /* ty=Tensor[(2, 9, 7), int64] */;
  %189 = mod(%166, %167) /* ty=Tensor[(2, 9, 7), float64] */;
  %190 = multiply(%174, %175) /* ty=Tensor[(1232), uint32] */;
  %191 = maximum(%185, %186) /* ty=Tensor[(2, 9, 7), int32] */;
  %192 = %187.0;
  (%188, %189, %190, %191, %192)
}

def @func_3446() -> Tensor[(78), float64] {
  @func_3444() /* ty=Tensor[(78), float64] */
}

def @func_5179() -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64]) {
  @func_5177() /* ty=(Tensor[(78), float64], Tensor[(2, 9, 7), float64]) */
}

def @func_2300() -> Tensor[(2, 9, 7), float64] {
  @func_2298() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_1201() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) {
  %198 = fn () -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) {
    %193 = cast(meta[relay.Constant][11] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %194 = reshape(%193, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
    %195 = @func_808(%194) /* ty=(Tensor[(2, 13, 3), float64],) */;
    %196 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
    %197 = %195.0;
    (%196, %197, meta[relay.Constant][11] /* ty=Tensor[(78), float64] */)
  };
  %198() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */
}

def @func_3444() -> Tensor[(78), float64] {
  %199 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %199.2
}

def @func_1803() -> Tensor[(2, 9, 7), float64] {
  %200 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %200.0
}

def @func_1987(%var_1982: int64, %var_1983: Tensor[(240), int64], %var_1984: Tensor[(3, 540), uint64]) -> (Tensor[(2, 13, 3), float64], Tensor[(1620), bool], int64, Tensor[(240), int64], Tensor[(3, 540), uint64], Tensor[(9, 6), float64]) {
  %201 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
  %202 = cast(%var_1982, dtype="int64") /* ty=int64 */;
  %203 = cast(%var_1983, dtype="int64") /* ty=Tensor[(240), int64] */;
  %204 = cast(%var_1984, dtype="uint64") /* ty=Tensor[(3, 540), uint64] */;
  %205 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 6), float64] */, dtype="float64") /* ty=Tensor[(9, 6), float64] */;
  %206 = cast(%var_1984, dtype="uint64") /* ty=Tensor[(3, 540), uint64] */;
  %207 = reshape(%202, newshape=[]) /* ty=int64 */;
  %208 = reshape(%203, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), int64] */;
  %209 = reshape(%204, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %210 = reshape(%205, newshape=[54]) /* ty=Tensor[(54), float64] */;
  %211 = reshape(%206, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %212 = @func_1781(%207, %208, %209, %210, %211) /* ty=(Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) */;
  %213 = %201.1;
  %214 = %212.11;
  (%213, %214, %var_1982, %var_1983, %var_1984, meta[relay.Constant][12] /* ty=Tensor[(9, 6), float64] */)
}

def @func_3223() -> (Tensor[(2, 9, 7), float64], Tensor[(10, 15, 8), float32], Tensor[(150), int32], Tensor[(2, 9, 7), float64]) {
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(150), int32] */, dtype="int32") /* ty=Tensor[(150), int32] */;
  %216 = reshape(%215, newshape=[25, 6]) /* ty=Tensor[(25, 6), int32] */;
  %217 = @func_468(%216) /* ty=(Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) */;
  %218 = @func_2298() /* ty=Tensor[(2, 9, 7), float64] */;
  %219 = %217.1;
  %220 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  (%218, %219, meta[relay.Constant][13] /* ty=Tensor[(150), int32] */, %220)
}

def @func_3499() -> Tensor[(2, 9, 7), float64] {
  @func_3497() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_5257() -> Tensor[(2, 9, 7), float64] {
  @func_5255() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_613(%var_592: Tensor[(2, 9, 3), float64]) -> (Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) {
  %221 = cast(%var_592, dtype="float64") /* ty=Tensor[(2, 9, 3), float64] */;
  %222 = asin(%221) /* ty=Tensor[(2, 9, 3), float64] */;
  %223 = cast(%222, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %224 = shape_of(%var_592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%var_592, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %227 = cast(%222, dtype="float32") /* ty=Tensor[(2, 9, 3), float32] */;
  %228 = floor_mod(%225, %226) /* ty=Tensor[(2, 9, 3), float32] */;
  %229 = erf(%227) /* ty=Tensor[(2, 9, 3), float32] */;
  (%228, %229)
}

def @func_3067(%var_3066: Tensor[(1320), int32]) -> (Tensor[(12, 10, 11), int16], Tensor[(9, 8, 15), float32], Tensor[(12, 13, 11), bool], Tensor[(1620), uint64], Tensor[(9, 8, 15), int16]) {
  %260 = fn (%var_2971: Tensor[(1320), int32]) -> (Tensor[(12, 10, 11), int16], Tensor[(9, 8, 15), float32], Tensor[(12, 13, 11), bool], Tensor[(1620), uint64], Tensor[(9, 8, 15), int16]) {
    %230 = cast(%var_2971, dtype="int32") /* ty=Tensor[(1320), int32] */;
    %231 = cast(%var_2971, dtype="int32") /* ty=Tensor[(1320), int32] */;
    %232 = reshape(%230, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
    %233 = reshape(%231, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
    %234 = @func_2660(%232, %233) /* ty=(Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) */;
    %235 = %234.1;
    %236 = cast(%var_2971, dtype="int16") /* ty=Tensor[(1320), int16] */;
    %237 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
    %238 = cast(%235, dtype="int16") /* ty=Tensor[(12, 10, 11), int16] */;
    %239 = dyn.reshape(%236, %237, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %240 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
    %241 = %240.0;
    %242 = cast(%241, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
    %243 = log10(%242) /* ty=Tensor[(9, 8, 15), float32] */;
    %244 = cast(%243, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
    %245 = cast(meta[relay.Constant][14] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %246 = reshape(%245, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %247 = @func_968(%246) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
    %248 = cast(%241, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
    %249 = cos(%248) /* ty=Tensor[(9, 8, 15), float64] */;
    %250 = cast(%243, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
    %251 = log2(%250) /* ty=Tensor[(9, 8, 15), float64] */;
    %252 = cast(%251, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
    %253 = shape_of(%249, dtype="int32") /* ty=Tensor[(3), int32] */;
    %254 = cast(%249, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
    %255 = dyn.reshape(%252, %253, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %256 = bitwise_and(%238, %239) /* ty=Tensor[(12, 10, 11), int16] */;
    %257 = exp(%244) /* ty=Tensor[(9, 8, 15), float32] */;
    %258 = %247.0;
    %259 = add(%254, %255) /* ty=Tensor[(9, 8, 15), int16] */;
    (%256, %257, %258, meta[relay.Constant][14] /* ty=Tensor[(1620), uint64] */, %259)
  };
  %260(%var_3066) /* ty=(Tensor[(12, 10, 11), int16], Tensor[(9, 8, 15), float32], Tensor[(12, 13, 11), bool], Tensor[(1620), uint64], Tensor[(9, 8, 15), int16]) */
}

def @func_4936() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  @func_4934() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) */
}

def @func_4642() -> (Tensor[(9, 8, 15), int16],) {
  @func_4640() /* ty=(Tensor[(9, 8, 15), int16],) */
}

def @func_3920() -> (Tensor[(2, 9, 7), float64],) {
  %263 = fn () -> (Tensor[(2, 9, 7), float64],) {
    %261 = @func_1312() /* ty=(Tensor[(2, 9, 7), float64],) */;
    %262 = %261.0;
    (%262,)
  };
  %263() /* ty=(Tensor[(2, 9, 7), float64],) */
}

def @func_1921() -> (Tensor[(2, 9, 7), float64],) {
  %265 = fn () -> (Tensor[(2, 9, 7), float64],) {
    %264 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
    (%264,)
  };
  %265() /* ty=(Tensor[(2, 9, 7), float64],) */
}

def @func_3838(%var_3836: Tensor[(16, 16, 16), int64], %var_3837: Tensor[(126), float64]) -> (Tensor[(16, 16, 16), int64], Tensor[(54), float64], Tensor[(240), int64], Tensor[(1620), uint64], Tensor[(54), float64], Tensor[(2, 9, 7), uint32], Tensor[(126), float64]) {
  %287 = fn (%var_3799: Tensor[(16, 16, 16), int64], %var_3833: Tensor[(126), float64]) -> (Tensor[(16, 16, 16), int64], Tensor[(54), float64], Tensor[(240), int64], Tensor[(1620), uint64], Tensor[(54), float64], Tensor[(2, 9, 7), uint32], Tensor[(126), float64]) {
    %266 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %267 = cast(%var_3799, dtype="int64") /* ty=Tensor[(16, 16, 16), int64] */;
    %268 = cast(-6 /* ty=int64 */, dtype="int64") /* ty=int64 */;
    %269 = cast(meta[relay.Constant][15] /* ty=Tensor[(240), int64] */, dtype="int64") /* ty=Tensor[(240), int64] */;
    %270 = cast(meta[relay.Constant][16] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %271 = cast(meta[relay.Constant][17] /* ty=Tensor[(54), float64] */, dtype="float64") /* ty=Tensor[(54), float64] */;
    %272 = cast(meta[relay.Constant][16] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %273 = reshape(%268, newshape=[]) /* ty=int64 */;
    %274 = reshape(%269, newshape=[12, 2, 10]) /* ty=Tensor[(12, 2, 10), int64] */;
    %275 = reshape(%270, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %276 = reshape(%271, newshape=[54]) /* ty=Tensor[(54), float64] */;
    %277 = reshape(%272, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %278 = @func_1781(%273, %274, %275, %276, %277) /* ty=(Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) */;
    %279 = cast(%var_3833, dtype="float64") /* ty=Tensor[(126), float64] */;
    %280 = cast(%var_3833, dtype="float64") /* ty=Tensor[(126), float64] */;
    %281 = reshape(%279, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
    %282 = reshape(%280, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
    %283 = @func_1649(%281, %282) /* ty=(Tensor[(2, 9, 7), uint32], Tensor[(2, 9, 7), float64]) */;
    %284 = multiply(%266, %267) /* ty=Tensor[(16, 16, 16), int64] */;
    %285 = %278.6;
    %286 = %283.0;
    (%284, %285, meta[relay.Constant][15] /* ty=Tensor[(240), int64] */, meta[relay.Constant][16] /* ty=Tensor[(1620), uint64] */, meta[relay.Constant][17] /* ty=Tensor[(54), float64] */, %286, %var_3833)
  };
  %287(%var_3836, %var_3837) /* ty=(Tensor[(16, 16, 16), int64], Tensor[(54), float64], Tensor[(240), int64], Tensor[(1620), uint64], Tensor[(54), float64], Tensor[(2, 9, 7), uint32], Tensor[(126), float64]) */
}

def @func_525(%var_514: Tensor[(14, 16, 14), float32]) -> (Tensor[(14, 16, 14), float32],) {
  %288 = cast(%var_514, dtype="float32") /* ty=Tensor[(14, 16, 14), float32] */;
  %289 = acos(%288) /* ty=Tensor[(14, 16, 14), float32] */;
  (%289,)
}

def @func_1366(%var_1354: Tensor[(9, 12, 7), float32]) -> (Tensor[(9, 12, 7), float32],) {
  %290 = cast(%var_1354, dtype="float32") /* ty=Tensor[(9, 12, 7), float32] */;
  %291 = asinh(%290) /* ty=Tensor[(9, 12, 7), float32] */;
  (%291,)
}

def @func_2352(%var_2351: float32) -> (Tensor[(8, 12, 7), float32], Tensor[(5, 5, 4), bool], Tensor[(100), uint16], Tensor[(8, 12, 7), float64]) {
  %301 = fn (%var_2321: float32) -> (Tensor[(8, 12, 7), float32], Tensor[(5, 5, 4), bool], Tensor[(100), uint16], Tensor[(8, 12, 7), float64]) {
    %292 = cast(%var_2321, dtype="float32") /* ty=float32 */;
    %293 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 12, 7), float32] */, dtype="float32") /* ty=Tensor[(8, 12, 7), float32] */;
    %294 = cast(meta[relay.Constant][19] /* ty=Tensor[(100), uint16] */, dtype="uint16") /* ty=Tensor[(100), uint16] */;
    %295 = reshape(%294, newshape=[5, 5, 4]) /* ty=Tensor[(5, 5, 4), uint16] */;
    %296 = cast(meta[relay.Constant][18] /* ty=Tensor[(8, 12, 7), float32] */, dtype="float64") /* ty=Tensor[(8, 12, 7), float64] */;
    %297 = cast(%var_2321, dtype="float64") /* ty=float64 */;
    %298 = power(%292, %293) /* ty=Tensor[(8, 12, 7), float32] */;
    %299 = @func_2031(%295) /* ty=Tensor[(5, 5, 4), bool] */;
    %300 = floor_divide(%296, %297) /* ty=Tensor[(8, 12, 7), float64] */;
    (%298, %299, meta[relay.Constant][19] /* ty=Tensor[(100), uint16] */, %300)
  };
  %301(%var_2351) /* ty=(Tensor[(8, 12, 7), float32], Tensor[(5, 5, 4), bool], Tensor[(100), uint16], Tensor[(8, 12, 7), float64]) */
}

def @func_3479() -> Tensor[(9, 8, 15), int16] {
  %303 = fn () -> Tensor[(9, 8, 15), int16] {
    %302 = @func_3333() /* ty=(Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) */;
    %302.1
  };
  %303() /* ty=Tensor[(9, 8, 15), int16] */
}

def @func_1312() -> (Tensor[(2, 9, 7), float64],) {
  %304 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
  (%304,)
}

def @func_2901(%var_2860: Tensor[(12, 8, 3), float32]) -> (Tensor[(12, 8, 3), uint16],) {
  %305 = @func_2582() /* ty=(Tensor[(12, 8, 3), float32],) */;
  %306 = %305.0;
  %307 = cast(%var_2860, dtype="uint16") /* ty=Tensor[(12, 8, 3), uint16] */;
  %308 = shape_of(%306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%306, dtype="uint16") /* ty=Tensor[(12, 8, 3), uint16] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %311 = logical_xor(%309, %310) /* ty=Tensor[(12, 8, 3), uint16] */;
  (%311,)
}

def @func_1578() -> Tensor[(2, 9, 7), float64] {
  @func_1117() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_3104() -> Tensor[(2, 9, 7), float64] {
  %312 = @func_2284() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %312.0
}

def @func_3402() -> (Tensor[(2, 13, 3), float64],) {
  %315 = fn () -> (Tensor[(2, 13, 3), float64],) {
    %313 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
    %314 = %313.1;
    (%314,)
  };
  %315() /* ty=(Tensor[(2, 13, 3), float64],) */
}

def @func_470(%var_469: Tensor[(25, 6), int32]) -> (Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) {
  %330 = fn (%var_457: Tensor[(25, 6), int32]) -> (Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) {
    %316 = cast(meta[relay.Constant][20] /* ty=Tensor[(11, 15, 16), float64] */, dtype="float64") /* ty=Tensor[(11, 15, 16), float64] */;
    %317 = cast(%var_457, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
    %318 = cast(meta[relay.Constant][21] /* ty=Tensor[(1200), int32] */, dtype="int32") /* ty=Tensor[(1200), int32] */;
    %319 = reshape(%317, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
    %320 = reshape(%318, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
    %321 = @func_188(%319, %320) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
    %322 = cast(%var_457, dtype="int32") /* ty=Tensor[(25, 6), int32] */;
    %323 = %321.2;
    %324 = cast(%323, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %325 = reshape(%322, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
    %326 = reshape(%324, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
    %327 = @func_188(%325, %326) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
    %328 = exp(%316) /* ty=Tensor[(11, 15, 16), float64] */;
    %329 = %327.0;
    (%328, %323, %var_457, meta[relay.Constant][21] /* ty=Tensor[(1200), int32] */, %329)
  };
  %330(%var_469) /* ty=(Tensor[(11, 15, 16), float64], Tensor[(10, 15, 8), float32], Tensor[(25, 6), int32], Tensor[(1200), int32], Tensor[(10, 15, 8), int32]) */
}

def @func_3106() -> Tensor[(2, 9, 7), float64] {
  @func_3104() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_5255() -> Tensor[(2, 9, 7), float64] {
  @func_1578() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_1369(%var_1367: Tensor[(9, 12, 7), float32]) -> (Tensor[(9, 12, 7), float32],) {
  @func_1366(%var_1367) /* ty=(Tensor[(9, 12, 7), float32],) */
}

def @func_2583() -> (Tensor[(12, 8, 3), float32],) {
  %333 = fn () -> (Tensor[(12, 8, 3), float32],) {
    %331 = @func_2385() /* ty=(Tensor[(12, 8, 3), float32],) */;
    %332 = %331.0;
    (%332,)
  };
  %333() /* ty=(Tensor[(12, 8, 3), float32],) */
}

def @func_1787(%var_1782: int64, %var_1783: Tensor[(12, 2, 10), int64], %var_1784: Tensor[(1620), uint64], %var_1785: Tensor[(54), float64], %var_1786: Tensor[(1620), uint64]) -> (Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) {
  %372 = fn (%var_1654: int64, %var_1655: Tensor[(12, 2, 10), int64], %var_1688: Tensor[(1620), uint64], %var_1713: Tensor[(54), float64], %var_1748: Tensor[(1620), uint64]) -> (Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) {
    %334 = cast(%var_1654, dtype="bool") /* ty=bool */;
    %335 = cast(%var_1655, dtype="bool") /* ty=Tensor[(12, 2, 10), bool] */;
    %336 = cast(meta[relay.Constant][22] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %337 = reshape(%336, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %338 = @func_1550(%337) /* ty=(Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(1620), uint64], Tensor[(1620), uint64]) */;
    %339 = %338.2;
    %340 = cast(%var_1688, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %341 = shape_of(%339, dtype="int32") /* ty=Tensor[(1), int32] */;
    %342 = cast(%339, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?), bool] */;
    %344 = cast(meta[relay.Constant][23] /* ty=Tensor[(3136), float32] */, dtype="float32") /* ty=Tensor[(3136), float32] */;
    %345 = reshape(%344, newshape=[14, 16, 14]) /* ty=Tensor[(14, 16, 14), float32] */;
    %346 = @func_525(%345) /* ty=(Tensor[(14, 16, 14), float32],) */;
    %347 = cast(%var_1713, dtype="float64") /* ty=Tensor[(54), float64] */;
    %348 = reshape(%347, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float64] */;
    %349 = @func_613(%348) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */;
    %350 = cast(meta[relay.Constant][24] /* ty=Tensor[(756), float32] */, dtype="float32") /* ty=Tensor[(756), float32] */;
    %351 = reshape(%350, newshape=[9, 12, 7]) /* ty=Tensor[(9, 12, 7), float32] */;
    %352 = @func_1366(%351) /* ty=(Tensor[(9, 12, 7), float32],) */;
    %353 = cast(%var_1748, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %354 = shape_of(%339, dtype="int32") /* ty=Tensor[(1), int32] */;
    %355 = cast(%339, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %356 = dyn.reshape(%353, %354, newshape=[]) /* ty=Tensor[(?), bool] */;
    %357 = %349.1;
    %358 = cast(%357, dtype="float64") /* ty=Tensor[(2, 9, 3), float64] */;
    %359 = reshape(%358, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float64] */;
    %360 = @func_613(%359) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */;
    %361 = cast(%339, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %362 = shape_of(%var_1748, dtype="int32") /* ty=Tensor[(1), int32] */;
    %363 = cast(%var_1748, dtype="bool") /* ty=Tensor[(1620), bool] */;
    %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?), bool] */;
    %365 = greater_equal(%334, %335) /* ty=Tensor[(12, 2, 10), bool] */;
    %366 = logical_or(%342, %343) /* ty=Tensor[(1620), bool] */;
    %367 = %346.0;
    %368 = %352.0;
    %369 = not_equal(%355, %356) /* ty=Tensor[(1620), bool] */;
    %370 = %360.1;
    %371 = logical_and(%363, %364) /* ty=Tensor[(1620), bool] */;
    (%365, meta[relay.Constant][22] /* ty=Tensor[(1620), uint64] */, %366, %367, meta[relay.Constant][23] /* ty=Tensor[(3136), float32] */, %357, %var_1713, %368, meta[relay.Constant][24] /* ty=Tensor[(756), float32] */, %369, %370, %371)
  };
  %372(%var_1782, %var_1783, %var_1784, %var_1785, %var_1786) /* ty=(Tensor[(12, 2, 10), bool], Tensor[(1620), uint64], Tensor[(1620), bool], Tensor[(14, 16, 14), float32], Tensor[(3136), float32], Tensor[(2, 9, 3), float32], Tensor[(54), float64], Tensor[(9, 12, 7), float32], Tensor[(756), float32], Tensor[(1620), bool], Tensor[(2, 9, 3), float32], Tensor[(1620), bool]) */
}

def @func_1314() -> (Tensor[(2, 9, 7), float64],) {
  @func_1312() /* ty=(Tensor[(2, 9, 7), float64],) */
}

def @func_3497() -> Tensor[(2, 9, 7), float64] {
  @func_1117() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_2298() -> Tensor[(2, 9, 7), float64] {
  @func_1578() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_3646(%var_3644: Tensor[(2, 15, 6), float64]) -> (Tensor[(1620), uint64], Tensor[(12, 13, 11), float32], Tensor[(2, 15, 6), uint32]) {
  @func_3643(%var_3644) /* ty=(Tensor[(1620), uint64], Tensor[(12, 13, 11), float32], Tensor[(2, 15, 6), uint32]) */
}

def @func_3334() -> (Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) {
  %379 = fn () -> (Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) {
    %373 = @func_2582() /* ty=(Tensor[(12, 8, 3), float32],) */;
    %374 = %373.0;
    %375 = cast(%374, dtype="float64") /* ty=Tensor[(12, 8, 3), float64] */;
    %376 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
    %377 = sin(%375) /* ty=Tensor[(12, 8, 3), float64] */;
    %378 = %376.0;
    (%377, %378)
  };
  %379() /* ty=(Tensor[(12, 8, 3), float64], Tensor[(9, 8, 15), int16]) */
}

def @func_2755(%var_2753: Tensor[(2, 12, 8), float32], %var_2754: Tensor[(2, 12, 8), float32]) -> (Tensor[(2, 12, 8), int64], Tensor[(2, 12, 8), int64]) {
  %394 = fn (%var_2721: Tensor[(2, 12, 8), float32], %var_2737: Tensor[(2, 12, 8), float32]) -> (Tensor[(2, 12, 8), int64], Tensor[(2, 12, 8), int64]) {
    %380 = cast(%var_2737, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
    %381 = shape_of(%var_2721, dtype="int32") /* ty=Tensor[(3), int32] */;
    %382 = cast(%var_2721, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
    %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %384 = cast(%var_2721, dtype="float32") /* ty=Tensor[(2, 12, 8), float32] */;
    %385 = asin(%384) /* ty=Tensor[(2, 12, 8), float32] */;
    %386 = cast(%385, dtype="float64") /* ty=Tensor[(2, 12, 8), float64] */;
    %387 = log2(%386) /* ty=Tensor[(2, 12, 8), float64] */;
    %388 = cast(%var_2737, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
    %389 = shape_of(%387, dtype="int32") /* ty=Tensor[(3), int32] */;
    %390 = cast(%387, dtype="int64") /* ty=Tensor[(2, 12, 8), int64] */;
    %391 = dyn.reshape(%388, %389, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %392 = bitwise_and(%382, %383) /* ty=Tensor[(2, 12, 8), int64] */;
    %393 = add(%390, %391) /* ty=Tensor[(2, 12, 8), int64] */;
    (%392, %393)
  };
  %394(%var_2753, %var_2754) /* ty=(Tensor[(2, 12, 8), int64], Tensor[(2, 12, 8), int64]) */
}

def @func_4272() -> Tensor[(9, 8, 15), float64] {
  @func_4270() /* ty=Tensor[(9, 8, 15), float64] */
}

def @func_1552(%var_1551: Tensor[(1620), uint64]) -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(1620), uint64], Tensor[(1620), uint64]) {
  %402 = fn (%var_1542: Tensor[(1620), uint64]) -> (Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(1620), uint64], Tensor[(1620), uint64]) {
    %395 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
    %396 = cast(%var_1542, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %397 = reshape(%396, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %398 = @func_968(%397) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
    %399 = %395.2;
    %400 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
    %401 = %398.2;
    (%399, %400, %401, %var_1542)
  };
  %402(%var_1551) /* ty=(Tensor[(78), float64], Tensor[(2, 9, 7), float64], Tensor[(1620), uint64], Tensor[(1620), uint64]) */
}

def @func_4281() -> (Tensor[(2, 9, 7), float64],) {
  @func_4279() /* ty=(Tensor[(2, 9, 7), float64],) */
}

def @func_4070(%var_4061: Tensor[(16, 6, 12), float32], %var_4067: Tensor[(150), int32], %var_4068: Tensor[(1200), int32]) -> (Tensor[(16, 6, 12), float32], Tensor[(10, 15, 8), int32], Tensor[(150), int32], Tensor[(1200), int32]) {
  %403 = cast(%var_4061, dtype="float32") /* ty=Tensor[(16, 6, 12), float32] */;
  %404 = cast(%var_4067, dtype="int32") /* ty=Tensor[(150), int32] */;
  %405 = cast(%var_4068, dtype="int32") /* ty=Tensor[(1200), int32] */;
  %406 = reshape(%404, newshape=[10, 15, 1]) /* ty=Tensor[(10, 15, 1), int32] */;
  %407 = reshape(%405, newshape=[10, 15, 8]) /* ty=Tensor[(10, 15, 8), int32] */;
  %408 = @func_188(%406, %407) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */;
  %409 = rsqrt(%403) /* ty=Tensor[(16, 6, 12), float32] */;
  %410 = %408.0;
  (%409, %410, %var_4067, %var_4068)
}

def @func_2033(%var_2032: Tensor[(5, 5, 4), uint16]) -> Tensor[(5, 5, 4), bool] {
  %415 = fn (%var_2024: Tensor[(5, 5, 4), uint16]) -> Tensor[(5, 5, 4), bool] {
    %411 = cast(meta[relay.Constant][25] /* ty=Tensor[(5, 5, 4), uint16] */, dtype="bool") /* ty=Tensor[(5, 5, 4), bool] */;
    %412 = shape_of(%var_2024, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%var_2024, dtype="bool") /* ty=Tensor[(5, 5, 4), bool] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    less(%413, %414) /* ty=Tensor[(5, 5, 4), bool] */
  };
  %415(%var_2032) /* ty=Tensor[(5, 5, 4), bool] */
}

def @func_4075(%var_4072: Tensor[(16, 6, 12), float32], %var_4073: Tensor[(150), int32], %var_4074: Tensor[(1200), int32]) -> (Tensor[(16, 6, 12), float32], Tensor[(10, 15, 8), int32], Tensor[(150), int32], Tensor[(1200), int32]) {
  @func_4070(%var_4072, %var_4073, %var_4074) /* ty=(Tensor[(16, 6, 12), float32], Tensor[(10, 15, 8), int32], Tensor[(150), int32], Tensor[(1200), int32]) */
}

def @func_2938(%var_2937: float32) -> (Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), float64], Tensor[(100), uint16], float32) {
  %423 = fn (%var_2931: float32) -> (Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), float64], Tensor[(100), uint16], float32) {
    %416 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
    %417 = cast(%var_2931, dtype="float32") /* ty=float32 */;
    %418 = reshape(%417, newshape=[]) /* ty=float32 */;
    %419 = @func_2350(%418) /* ty=(Tensor[(8, 12, 7), float32], Tensor[(5, 5, 4), bool], Tensor[(100), uint16], Tensor[(8, 12, 7), float64]) */;
    %420 = %416.0;
    %421 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
    %422 = %419.2;
    (%420, %421, %422, %var_2931)
  };
  %423(%var_2937) /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), float64], Tensor[(100), uint16], float32) */
}

def @func_3578(%var_3576: Tensor[(8, 11, 14), float64]) -> (Tensor[(8, 11, 14), float64],) {
  @func_3575(%var_3576) /* ty=(Tensor[(8, 11, 14), float64],) */
}

def @func_4270() -> Tensor[(9, 8, 15), float64] {
  %424 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %425 = %424.0;
  %426 = cast(%425, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
  sigmoid(%426) /* ty=Tensor[(9, 8, 15), float64] */
}

def @func_616(%var_614: Tensor[(2, 9, 3), float64]) -> (Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) {
  @func_613(%var_614) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */
}

def @func_1580() -> Tensor[(2, 9, 7), float64] {
  @func_1578() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_811(%var_809: Tensor[(2, 13, 3), float64]) -> (Tensor[(2, 13, 3), float64],) {
  @func_808(%var_809) /* ty=(Tensor[(2, 13, 3), float64],) */
}

def @func_4241(%var_4240: Tensor[(27, 2), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64], Tensor[(27, 2), uint64]) {
  %438 = fn (%var_4221: Tensor[(27, 2), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64], Tensor[(27, 2), uint64]) {
    %427 = @func_3543() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64]) */;
    %428 = cast(meta[relay.Constant][26] /* ty=Tensor[(27, 2), float64] */, dtype="float64") /* ty=Tensor[(27, 2), float64] */;
    %429 = reshape(%428, newshape=[3, 18]) /* ty=Tensor[(3, 18), float64] */;
    %430 = @func_3250(%429) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(9, 8, 15), int16], float32, Tensor[(2, 9, 3), float32], Tensor[(3, 18), float64]) */;
    %431 = cast(%var_4221, dtype="uint64") /* ty=Tensor[(27, 2), uint64] */;
    %432 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(27, 2), float64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %433 = cast(meta[relay.Constant][26] /* ty=Tensor[(27, 2), float64] */, dtype="uint64") /* ty=Tensor[(27, 2), uint64] */;
    %434 = dyn.reshape(%431, %432, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %435 = %427.0;
    %436 = %430.0;
    %437 = logical_xor(%433, %434) /* ty=Tensor[(27, 2), uint64] */;
    (%435, %436, %437)
  };
  %438(%var_4240) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64], Tensor[(27, 2), uint64]) */
}

def @func_4636(%var_4634: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), int64], Tensor[(2, 9, 7), float64], Tensor[(1232), uint32], Tensor[(2, 9, 7), int32], Tensor[(12, 8, 3), float64]) {
  @func_4633(%var_4634) /* ty=(Tensor[(2, 9, 7), int64], Tensor[(2, 9, 7), float64], Tensor[(1232), uint32], Tensor[(2, 9, 7), int32], Tensor[(12, 8, 3), float64]) */
}

def @func_191(%var_189: Tensor[(10, 15, 1), int32], %var_190: Tensor[(10, 15, 8), int32]) -> (Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) {
  %459 = fn (%var_113: Tensor[(10, 15, 1), int32], %var_128: Tensor[(10, 15, 8), int32]) -> (Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) {
    %439 = cast(%var_113, dtype="int32") /* ty=Tensor[(10, 15, 1), int32] */;
    %440 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %441 = left_shift(%439, %440) /* ty=Tensor[(10, 15, 8), int32] */;
    %442 = cast(%var_128, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %443 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %444 = cast(%441, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %445 = dyn.reshape(%442, %443, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %446 = bitwise_xor(%444, %445) /* ty=Tensor[(10, 15, 8), int32] */;
    %447 = cast(meta[relay.Constant][27] /* ty=Tensor[(10, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %448 = shape_of(%446, dtype="int32") /* ty=Tensor[(3), int32] */;
    %449 = cast(%446, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %450 = dyn.reshape(%447, %448, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %451 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 15, 8), int32] */, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %452 = shape_of(%441, dtype="int32") /* ty=Tensor[(3), int32] */;
    %453 = cast(%441, dtype="int32") /* ty=Tensor[(10, 15, 8), int32] */;
    %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %455 = cast(meta[relay.Constant][28] /* ty=Tensor[(10, 15, 8), int32] */, dtype="float32") /* ty=Tensor[(10, 15, 8), float32] */;
    %456 = right_shift(%449, %450) /* ty=Tensor[(10, 15, 8), int32] */;
    %457 = bitwise_or(%453, %454) /* ty=Tensor[(10, 15, 8), int32] */;
    %458 = exp(%455) /* ty=Tensor[(10, 15, 8), float32] */;
    (%456, %457, %458)
  };
  %459(%var_189, %var_190) /* ty=(Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), int32], Tensor[(10, 15, 8), float32]) */
}

def @func_1992(%var_1989: int64, %var_1990: Tensor[(240), int64], %var_1991: Tensor[(3, 540), uint64]) -> (Tensor[(2, 13, 3), float64], Tensor[(1620), bool], int64, Tensor[(240), int64], Tensor[(3, 540), uint64], Tensor[(9, 6), float64]) {
  @func_1987(%var_1989, %var_1990, %var_1991) /* ty=(Tensor[(2, 13, 3), float64], Tensor[(1620), bool], int64, Tensor[(240), int64], Tensor[(3, 540), uint64], Tensor[(9, 6), float64]) */
}

def @func_3543() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64]) {
  %460 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
  %461 = @func_3401() /* ty=(Tensor[(2, 13, 3), float64],) */;
  %462 = %460.0;
  %463 = %461.0;
  (%462, %463)
}

def @func_4182(%var_4179: uint32, %var_4180: Tensor[(1, 15), uint32], %var_4181: Tensor[(1, 756), float32]) -> (Tensor[(2, 9, 7), float64], Tensor[(1200), int32], Tensor[(1200), int32], Tensor[(2, 13, 3), float64], Tensor[(9, 12, 7), float32], Tensor[(1, 756), float32], Tensor[(9, 8, 15), bool], Tensor[(78), uint16]) {
  @func_4177(%var_4179, %var_4180, %var_4181) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(1200), int32], Tensor[(1200), int32], Tensor[(2, 13, 3), float64], Tensor[(9, 12, 7), float32], Tensor[(1, 756), float32], Tensor[(9, 8, 15), bool], Tensor[(78), uint16]) */
}

def @func_4640() -> (Tensor[(9, 8, 15), int16],) {
  %464 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
  %465 = %464.0;
  (%465,)
}

def @func_4777() -> (Tensor[(2, 9, 7), float64], Tensor[(78), float64]) {
  %466 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
  %467 = @func_3444() /* ty=Tensor[(78), float64] */;
  (%466, %467)
}

def @func_4934() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  %468 = @func_2298() /* ty=Tensor[(2, 9, 7), float64] */;
  %469 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
  (%468, %469)
}

def @func_4807() -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  %473 = fn () -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
    %470 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
    %471 = @func_3104() /* ty=Tensor[(2, 9, 7), float64] */;
    %472 = %470.0;
    (%471, %472)
  };
  %473() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) */
}

def @func_2019() -> (Tensor[(9, 8, 15), int16],) {
  %474 = cast(meta[relay.Constant][30] /* ty=Tensor[(9, 8, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
  %475 = shape_of(meta[relay.Constant][29] /* ty=Tensor[(9, 8, 15), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %476 = cast(meta[relay.Constant][29] /* ty=Tensor[(9, 8, 15), int16] */, dtype="int16") /* ty=Tensor[(9, 8, 15), int16] */;
  %477 = dyn.reshape(%474, %475, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %478 = multiply(%476, %477) /* ty=Tensor[(9, 8, 15), int16] */;
  (%478,)
}

def @func_3986(%var_3985: Tensor[(12, 110), int32]) -> (Tensor[(9, 8, 15), int16], Tensor[(12, 110), int32], Tensor[(12, 110), float64], Tensor[(2, 9, 7), float64]) {
  %504 = fn (%var_3925: Tensor[(12, 110), int32]) -> (Tensor[(9, 8, 15), int16], Tensor[(12, 110), int32], Tensor[(12, 110), float64], Tensor[(2, 9, 7), float64]) {
    %479 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
    %480 = cast(%var_3925, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
    %481 = erf(%480) /* ty=Tensor[(12, 110), float32] */;
    %482 = cast(%481, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
    %483 = rsqrt(%482) /* ty=Tensor[(12, 110), float32] */;
    %484 = cast(%var_3925, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
    %485 = cast(%var_3925, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
    %486 = reshape(%484, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
    %487 = reshape(%485, newshape=[12, 10, 11]) /* ty=Tensor[(12, 10, 11), int32] */;
    %488 = @func_2660(%486, %487) /* ty=(Tensor[(12, 10, 11), bool], Tensor[(12, 10, 11), float64]) */;
    %489 = %488.1;
    %490 = cast(%489, dtype="float32") /* ty=Tensor[(12, 10, 11), float32] */;
    %491 = shape_of(%481, dtype="int32") /* ty=Tensor[(2), int32] */;
    %492 = cast(%481, dtype="float32") /* ty=Tensor[(12, 110), float32] */;
    %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %494 = floor_mod(%492, %493) /* ty=Tensor[(12, 110), float32] */;
    %495 = cast(%494, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
    %496 = shape_of(%483, dtype="int32") /* ty=Tensor[(2), int32] */;
    %497 = cast(%483, dtype="int32") /* ty=Tensor[(12, 110), int32] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
    %499 = cast(%483, dtype="float64") /* ty=Tensor[(12, 110), float64] */;
    %500 = %479.0;
    %501 = bitwise_xor(%497, %498) /* ty=Tensor[(12, 110), int32] */;
    %502 = cos(%499) /* ty=Tensor[(12, 110), float64] */;
    %503 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
    (%500, %501, %502, %503)
  };
  %504(%var_3985) /* ty=(Tensor[(9, 8, 15), int16], Tensor[(12, 110), int32], Tensor[(12, 110), float64], Tensor[(2, 9, 7), float64]) */
}

def @func_4739() -> Tensor[(2, 9, 7), float32] {
  %508 = fn () -> Tensor[(2, 9, 7), float32] {
    %505 = @func_4279() /* ty=(Tensor[(2, 9, 7), float64],) */;
    %506 = %505.0;
    %507 = cast(%506, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
    cos(%507) /* ty=Tensor[(2, 9, 7), float32] */
  };
  %508() /* ty=Tensor[(2, 9, 7), float32] */
}

def @func_5023() -> (Tensor[(3, 6, 10), uint32], Tensor[(180), uint32], Tensor[(78), float32], Tensor[(2, 9, 7), float32]) {
  %521 = fn () -> (Tensor[(3, 6, 10), uint32], Tensor[(180), uint32], Tensor[(78), float32], Tensor[(2, 9, 7), float32]) {
    %509 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), uint32] */, dtype="uint32") /* ty=Tensor[(180), uint32] */;
    %510 = cast(meta[relay.Constant][31] /* ty=Tensor[(180), uint32] */, dtype="uint32") /* ty=Tensor[(180), uint32] */;
    %511 = reshape(%509, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), uint32] */;
    %512 = reshape(%510, newshape=[3, 6, 10]) /* ty=Tensor[(3, 6, 10), uint32] */;
    %513 = @func_4777() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(78), float64]) */;
    %514 = %513.1;
    %515 = cast(%514, dtype="float32") /* ty=Tensor[(78), float32] */;
    %516 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
    %517 = cast(%516, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
    %518 = @func_3697(%511, %512) /* ty=Tensor[(3, 6, 10), uint32] */;
    %519 = atanh(%515) /* ty=Tensor[(78), float32] */;
    %520 = asin(%517) /* ty=Tensor[(2, 9, 7), float32] */;
    (%518, meta[relay.Constant][31] /* ty=Tensor[(180), uint32] */, %519, %520)
  };
  %521() /* ty=(Tensor[(3, 6, 10), uint32], Tensor[(180), uint32], Tensor[(78), float32], Tensor[(2, 9, 7), float32]) */
}

def @func_5060(%var_5058: Tensor[(12, 15, 14), int8], %var_5059: Tensor[(12, 15, 14), int8]) -> (Tensor[(12, 15, 14), int8], Tensor[(12, 15, 14), float64]) {
  %532 = fn (%var_5032: Tensor[(12, 15, 14), int8], %var_5045: Tensor[(12, 15, 14), int8]) -> (Tensor[(12, 15, 14), int8], Tensor[(12, 15, 14), float64]) {
    %522 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 15, 14), int8] */, dtype="int8") /* ty=Tensor[(12, 15, 14), int8] */;
    %523 = shape_of(%var_5032, dtype="int32") /* ty=Tensor[(3), int32] */;
    %524 = cast(%var_5032, dtype="int8") /* ty=Tensor[(12, 15, 14), int8] */;
    %525 = dyn.reshape(%522, %523, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %526 = cast(%var_5045, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
    %527 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(12, 15, 14), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %528 = cast(meta[relay.Constant][32] /* ty=Tensor[(12, 15, 14), int8] */, dtype="float64") /* ty=Tensor[(12, 15, 14), float64] */;
    %529 = dyn.reshape(%526, %527, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %530 = bitwise_or(%524, %525) /* ty=Tensor[(12, 15, 14), int8] */;
    %531 = divide(%528, %529) /* ty=Tensor[(12, 15, 14), float64] */;
    (%530, %531)
  };
  %532(%var_5058, %var_5059) /* ty=(Tensor[(12, 15, 14), int8], Tensor[(12, 15, 14), float64]) */
}

def @func_2482() -> Tensor[(2, 9, 7), float64] {
  %534 = fn () -> Tensor[(2, 9, 7), float64] {
    %533 = @func_1920() /* ty=(Tensor[(2, 9, 7), float64],) */;
    %533.0
  };
  %534() /* ty=Tensor[(2, 9, 7), float64] */
}

def @func_2176(%var_2175: Tensor[(1620), uint64]) -> (Tensor[(1620), uint64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float32]) {
  %542 = fn (%var_2166: Tensor[(1620), uint64]) -> (Tensor[(1620), uint64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float32]) {
    %535 = cast(%var_2166, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %536 = reshape(%535, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %537 = @func_968(%536) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
    %538 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
    %539 = cast(%538, dtype="float32") /* ty=Tensor[(2, 9, 7), float32] */;
    %540 = %537.2;
    %541 = log(%539) /* ty=Tensor[(2, 9, 7), float32] */;
    (%540, %var_2166, %541)
  };
  %542(%var_2175) /* ty=(Tensor[(1620), uint64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float32]) */
}

def @func_2386() -> (Tensor[(12, 8, 3), float32],) {
  %550 = fn () -> (Tensor[(12, 8, 3), float32],) {
    %543 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 8, 3), float64] */, dtype="float64") /* ty=Tensor[(12, 8, 3), float64] */;
    %544 = atanh(%543) /* ty=Tensor[(12, 8, 3), float64] */;
    %545 = cast(meta[relay.Constant][33] /* ty=Tensor[(12, 8, 3), float64] */, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
    %546 = shape_of(%544, dtype="int32") /* ty=Tensor[(3), int32] */;
    %547 = cast(%544, dtype="float32") /* ty=Tensor[(12, 8, 3), float32] */;
    %548 = dyn.reshape(%545, %546, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %549 = divide(%547, %548) /* ty=Tensor[(12, 8, 3), float32] */;
    (%549,)
  };
  %550() /* ty=(Tensor[(12, 8, 3), float32],) */
}

def @func_4779() -> (Tensor[(2, 9, 7), float64], Tensor[(78), float64]) {
  @func_4777() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(78), float64]) */
}

def @func_3643(%var_3595: Tensor[(2, 15, 6), float64]) -> (Tensor[(1620), uint64], Tensor[(12, 13, 11), float32], Tensor[(2, 15, 6), uint32]) {
  %551 = cast(meta[relay.Constant][34] /* ty=Tensor[(1620), uint64] */, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
  %552 = reshape(%551, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
  %553 = @func_968(%552) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
  %554 = %553.0;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(12, 13, 11), float32] */;
  %556 = cast(%var_3595, dtype="float64") /* ty=Tensor[(2, 15, 6), float64] */;
  %557 = sin(%556) /* ty=Tensor[(2, 15, 6), float64] */;
  %558 = cast(%var_3595, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %559 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
  %560 = cast(%557, dtype="bool") /* ty=Tensor[(2, 15, 6), bool] */;
  %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %562 = less_equal(%560, %561) /* ty=Tensor[(2, 15, 6), bool] */;
  %563 = cast(meta[relay.Constant][35] /* ty=Tensor[(2, 15, 6), bool] */, dtype="uint32") /* ty=Tensor[(2, 15, 6), uint32] */;
  %564 = shape_of(%562, dtype="int32") /* ty=Tensor[(3), int32] */;
  %565 = cast(%562, dtype="uint32") /* ty=Tensor[(2, 15, 6), uint32] */;
  %566 = dyn.reshape(%563, %564, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %567 = acosh(%555) /* ty=Tensor[(12, 13, 11), float32] */;
  %568 = add(%565, %566) /* ty=Tensor[(2, 15, 6), uint32] */;
  (meta[relay.Constant][34] /* ty=Tensor[(1620), uint64] */, %567, %568)
}

def @func_1510(%var_1508: Tensor[(1620), uint64], %var_1509: Tensor[(1620), float64]) -> (Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) {
  %607 = fn (%var_1418: Tensor[(1620), uint64], %var_1489: Tensor[(1620), float64]) -> (Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) {
    %569 = cast(%var_1418, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %570 = reshape(%569, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %571 = @func_968(%570) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
    %572 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
    %573 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
    %574 = %573.0;
    %575 = @func_1117() /* ty=Tensor[(2, 9, 7), float64] */;
    %576 = cast(%575, dtype="uint16") /* ty=Tensor[(2, 9, 7), uint16] */;
    %577 = shape_of(%574, dtype="int32") /* ty=Tensor[(3), int32] */;
    %578 = cast(%574, dtype="uint16") /* ty=Tensor[(2, 9, 7), uint16] */;
    %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %580 = %571.1;
    %581 = cast(%580, dtype="uint64") /* ty=Tensor[(15, 12, 9), uint64] */;
    %582 = reshape(%581, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %583 = @func_968(%582) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
    %584 = %583.2;
    %585 = cast(%584, dtype="float64") /* ty=Tensor[(1620), float64] */;
    %586 = sinh(%585) /* ty=Tensor[(1620), float64] */;
    %587 = cast(%var_1489, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
    %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(1), int32] */;
    %589 = cast(%586, dtype="uint8") /* ty=Tensor[(1620), uint8] */;
    %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %591 = cast(%var_1489, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %592 = reshape(%591, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %593 = @func_968(%592) /* ty=(Tensor[(12, 13, 11), bool], Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64]) */;
    %594 = cast(%584, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %595 = shape_of(%586, dtype="int32") /* ty=Tensor[(1), int32] */;
    %596 = cast(%586, dtype="uint64") /* ty=Tensor[(1620), uint64] */;
    %597 = dyn.reshape(%594, %595, newshape=[]) /* ty=Tensor[(?), uint64] */;
    %598 = logical_xor(%596, %597) /* ty=Tensor[(1620), uint64] */;
    %599 = cast(%598, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %600 = cosh(%599) /* ty=Tensor[(1620), float32] */;
    %601 = cast(%600, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %602 = %572.1;
    %603 = add(%578, %579) /* ty=Tensor[(2, 9, 7), uint16] */;
    %604 = bitwise_and(%589, %590) /* ty=Tensor[(1620), uint8] */;
    %605 = %593.1;
    %606 = atan(%601) /* ty=Tensor[(1620), float32] */;
    (%580, %var_1418, %602, %603, %604, %605, %606)
  };
  %607(%var_1508, %var_1509) /* ty=(Tensor[(15, 12, 9), uint64], Tensor[(1620), uint64], Tensor[(2, 13, 3), float64], Tensor[(2, 9, 7), uint16], Tensor[(1620), uint8], Tensor[(15, 12, 9), uint64], Tensor[(1620), float32]) */
}

def @func_1652(%var_1650: Tensor[(2, 9, 7), float64], %var_1651: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), uint32], Tensor[(2, 9, 7), float64]) {
  %619 = fn (%var_1620: Tensor[(2, 9, 7), float64], %var_1645: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), uint32], Tensor[(2, 9, 7), float64]) {
    %608 = @func_1578() /* ty=Tensor[(2, 9, 7), float64] */;
    %609 = cast(%var_1620, dtype="uint32") /* ty=Tensor[(2, 9, 7), uint32] */;
    %610 = shape_of(%608, dtype="int32") /* ty=Tensor[(3), int32] */;
    %611 = cast(%608, dtype="uint32") /* ty=Tensor[(2, 9, 7), uint32] */;
    %612 = dyn.reshape(%609, %610, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %613 = cast(%var_1645, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %614 = shape_of(%var_1620, dtype="int32") /* ty=Tensor[(3), int32] */;
    %615 = cast(%var_1620, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %616 = dyn.reshape(%613, %614, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %617 = minimum(%611, %612) /* ty=Tensor[(2, 9, 7), uint32] */;
    %618 = floor_mod(%615, %616) /* ty=Tensor[(2, 9, 7), float64] */;
    (%617, %618)
  };
  %619(%var_1650, %var_1651) /* ty=(Tensor[(2, 9, 7), uint32], Tensor[(2, 9, 7), float64]) */
}

def @func_2475(%var_2474: Tensor[(18, 90), uint64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float32], Tensor[(18, 90), uint16], Tensor[(15, 12, 9), float32], Tensor[(2, 13, 3), float64], Tensor[(78), float64], Tensor[(2, 9, 7), int32]) {
  %643 = fn (%var_2399: Tensor[(18, 90), uint64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float32], Tensor[(18, 90), uint16], Tensor[(15, 12, 9), float32], Tensor[(2, 13, 3), float64], Tensor[(78), float64], Tensor[(2, 9, 7), int32]) {
    %620 = cast(%var_2399, dtype="uint64") /* ty=Tensor[(18, 90), uint64] */;
    %621 = reshape(%620, newshape=[1620]) /* ty=Tensor[(1620), uint64] */;
    %622 = @func_2174(%621) /* ty=(Tensor[(1620), uint64], Tensor[(1620), uint64], Tensor[(2, 9, 7), float32]) */;
    %623 = cast(%var_2399, dtype="uint64") /* ty=Tensor[(18, 90), uint64] */;
    %624 = reshape(%623, newshape=[15, 12, 9]) /* ty=Tensor[(15, 12, 9), uint64] */;
    %625 = @func_642(%624) /* ty=Tensor[(15, 12, 9), uint64] */;
    %626 = cast(%625, dtype="uint16") /* ty=Tensor[(15, 12, 9), uint16] */;
    %627 = shape_of(%var_2399, dtype="int32") /* ty=Tensor[(2), int32] */;
    %628 = cast(%var_2399, dtype="uint16") /* ty=Tensor[(18, 90), uint16] */;
    %629 = dyn.reshape(%626, %627, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %630 = cast(%625, dtype="float32") /* ty=Tensor[(15, 12, 9), float32] */;
    %631 = cast(meta[relay.Constant][36] /* ty=Tensor[(78), float64] */, dtype="float64") /* ty=Tensor[(78), float64] */;
    %632 = reshape(%631, newshape=[2, 13, 3]) /* ty=Tensor[(2, 13, 3), float64] */;
    %633 = @func_808(%632) /* ty=(Tensor[(2, 13, 3), float64],) */;
    %634 = %622.2;
    %635 = cast(%634, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %636 = reshape(%635, newshape=[2, 9, 7]) /* ty=Tensor[(2, 9, 7), float64] */;
    %637 = @func_2150(%636) /* ty=(Tensor[(2, 9, 7), int32],) */;
    %638 = @func_1803() /* ty=Tensor[(2, 9, 7), float64] */;
    %639 = left_shift(%628, %629) /* ty=Tensor[(18, 90), uint16] */;
    %640 = tan(%630) /* ty=Tensor[(15, 12, 9), float32] */;
    %641 = %633.0;
    %642 = %637.0;
    (%638, %634, %639, %640, %641, meta[relay.Constant][36] /* ty=Tensor[(78), float64] */, %642)
  };
  %643(%var_2474) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float32], Tensor[(18, 90), uint16], Tensor[(15, 12, 9), float32], Tensor[(2, 13, 3), float64], Tensor[(78), float64], Tensor[(2, 9, 7), int32]) */
}

def @func_3225() -> (Tensor[(2, 9, 7), float64], Tensor[(10, 15, 8), float32], Tensor[(150), int32], Tensor[(2, 9, 7), float64]) {
  @func_3223() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(10, 15, 8), float32], Tensor[(150), int32], Tensor[(2, 9, 7), float64]) */
}

def @func_4404(%var_4403: Tensor[(2, 9, 7), float64]) -> (Tensor[(9, 8, 15), float64], Tensor[(2, 9, 7), bool], Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), bool]) {
  %664 = fn (%var_4392: Tensor[(2, 9, 7), float64]) -> (Tensor[(9, 8, 15), float64], Tensor[(2, 9, 7), bool], Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), bool]) {
    %644 = @func_2481() /* ty=Tensor[(2, 9, 7), float64] */;
    %645 = cast(%644, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %646 = rsqrt(%645) /* ty=Tensor[(2, 9, 7), float64] */;
    %647 = cast(%646, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %648 = erf(%647) /* ty=Tensor[(2, 9, 7), float64] */;
    %649 = cast(%648, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %650 = acosh(%649) /* ty=Tensor[(2, 9, 7), float64] */;
    %651 = cast(%646, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %652 = shape_of(%650, dtype="int32") /* ty=Tensor[(3), int32] */;
    %653 = cast(%650, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %655 = @func_2019() /* ty=(Tensor[(9, 8, 15), int16],) */;
    %656 = cast(%var_4392, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %657 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
    %658 = cast(%648, dtype="bool") /* ty=Tensor[(2, 9, 7), bool] */;
    %659 = dyn.reshape(%656, %657, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %660 = @func_4270() /* ty=Tensor[(9, 8, 15), float64] */;
    %661 = logical_or(%653, %654) /* ty=Tensor[(2, 9, 7), bool] */;
    %662 = %655.0;
    %663 = equal(%658, %659) /* ty=Tensor[(2, 9, 7), bool] */;
    (%660, %661, %662, %663)
  };
  %664(%var_4403) /* ty=(Tensor[(9, 8, 15), float64], Tensor[(2, 9, 7), bool], Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), bool]) */
}

def @func_3252(%var_3251: Tensor[(3, 18), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(9, 8, 15), int16], float32, Tensor[(2, 9, 3), float32], Tensor[(3, 18), float64]) {
  %675 = fn (%var_3243: Tensor[(3, 18), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(9, 8, 15), int16], float32, Tensor[(2, 9, 3), float32], Tensor[(3, 18), float64]) {
    %665 = @func_2284() /* ty=(Tensor[(2, 9, 7), float64],) */;
    %666 = cast(3.40444f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %667 = reshape(%666, newshape=[]) /* ty=float32 */;
    %668 = @func_2936(%667) /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 9, 7), float64], Tensor[(100), uint16], float32) */;
    %669 = cast(%var_3243, dtype="float64") /* ty=Tensor[(3, 18), float64] */;
    %670 = reshape(%669, newshape=[2, 9, 3]) /* ty=Tensor[(2, 9, 3), float64] */;
    %671 = @func_613(%670) /* ty=(Tensor[(2, 9, 3), float32], Tensor[(2, 9, 3), float32]) */;
    %672 = %665.0;
    %673 = %668.0;
    %674 = %671.0;
    (%672, %673, 3.40444f /* ty=float32 */, %674, %var_3243)
  };
  %675(%var_3251) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(9, 8, 15), int16], float32, Tensor[(2, 9, 3), float32], Tensor[(3, 18), float64]) */
}

def @func_4714(%var_4713: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
  %685 = fn (%var_4704: Tensor[(2, 9, 7), float64]) -> (Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) {
    %676 = @func_3223() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(10, 15, 8), float32], Tensor[(150), int32], Tensor[(2, 9, 7), float64]) */;
    %677 = @func_1200() /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 13, 3), float64], Tensor[(78), float64]) */;
    %678 = %677.0;
    %679 = cast(%var_4704, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %681 = cast(%678, dtype="float64") /* ty=Tensor[(2, 9, 7), float64] */;
    %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %683 = %676.3;
    %684 = divide(%681, %682) /* ty=Tensor[(2, 9, 7), float64] */;
    (%683, %684)
  };
  %685(%var_4713) /* ty=(Tensor[(2, 9, 7), float64], Tensor[(2, 9, 7), float64]) */
}

def @func_4908() -> (Tensor[(9, 8, 15), uint8],) {
  %704 = fn () -> (Tensor[(9, 8, 15), uint8],) {
    %686 = @func_2838() /* ty=(Tensor[(9, 8, 15), int16], Tensor[(2, 13, 3), float64]) */;
    %687 = %686.0;
    %688 = cast(%687, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
    %689 = acosh(%688) /* ty=Tensor[(9, 8, 15), float64] */;
    %690 = cast(%689, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
    %691 = erf(%690) /* ty=Tensor[(9, 8, 15), float64] */;
    %692 = cast(%687, dtype="float64") /* ty=Tensor[(9, 8, 15), float64] */;
    %693 = asin(%692) /* ty=Tensor[(9, 8, 15), float64] */;
    %694 = cast(%693, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
    %695 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
    %696 = cast(%691, dtype="float32") /* ty=Tensor[(9, 8, 15), float32] */;
    %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %698 = power(%696, %697) /* ty=Tensor[(9, 8, 15), float32] */;
    %699 = cast(%693, dtype="uint8") /* ty=Tensor[(9, 8, 15), uint8] */;
    %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%698, dtype="uint8") /* ty=Tensor[(9, 8, 15), uint8] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %703 = minimum(%701, %702) /* ty=Tensor[(9, 8, 15), uint8] */;
    (%703,)
  };
  %704() /* ty=(Tensor[(9, 8, 15), uint8],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen64/build/output.py:1637: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen64/build/output.py", line 1642, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(300) tvmgen_default_fused_cast_cast_reshape_less_equal_kernel0(signed char* __restrict__ T_less_equal, double* __restrict__ placeholder, double* __restrict__ placeholder1) {
  T_less_equal[(((int)threadIdx.x))] = ((signed char)(((bool)placeholder[(((int)threadIdx.x))]) <= ((bool)placeholder1[(((int)threadIdx.x))])));
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

