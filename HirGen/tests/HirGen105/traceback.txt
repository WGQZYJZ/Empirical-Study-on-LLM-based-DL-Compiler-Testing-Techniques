==========mod==========
#[version = "0.0.5"]
def @func_1764() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %0 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %1 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %2 = %0.0;
  (%1, %2)
}

def @func_4435() -> (Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(945), float32]) {
  %3 = @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */;
  %4 = cast(meta[relay.Constant][0] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %5 = reshape(%4, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), float32] */;
  %6 = @func_2050(%5) /* ty=(Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %7 = %3.1;
  %8 = %6.3;
  (%7, %8, meta[relay.Constant][0] /* ty=Tensor[(945), float32] */)
}

def @func_4044() -> (Tensor[(1, 15, 9), float32], Tensor[(14, 14, 3), bool], uint64) {
  %9 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %10 = cast(meta[relay.Constant][1] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %11 = reshape(%10, newshape=[]) /* ty=uint64 */;
  %12 = %9.0;
  %13 = @func_1927(%11) /* ty=Tensor[(14, 14, 3), bool] */;
  (%12, %13, meta[relay.Constant][1] /* ty=uint64 */)
}

def @func_2662() -> (Tensor[(1, 15, 9), float32],) {
  %14 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %15 = %14.1;
  (%15,)
}

def @func_4740() -> (Tensor[(1, 15, 9), float32],) {
  %16 = @func_4308() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %17 = %16.1;
  (%17,)
}

def @main() -> Tensor[(?, 15, 9), float64] {
  %18 = @func_1007() /* ty=Tensor[(1, 15, 9), float32] */;
  %19 = @func_2356() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %20 = %19.0;
  %21 = cast(%20, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %22 = shape_of(%18, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%18, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%23, %24) /* ty=Tensor[(?, 15, 9), float64] */
}

def @func_530(%var_528: Tensor[(9, 9), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(9, 9), float32]) {
  %25 = cast(%var_528, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
  %26 = reshape(%25, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
  %27 = @func_69(%26) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
  %28 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %29 = %27.1;
  (%28, %29, %var_528)
}

def @func_4921() -> Tensor[(1, 15, 9), float32] {
  %30 = @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %30.0
}

def @func_2317(%var_2306: Tensor[(4, 8, 7), uint32], %var_2307: Tensor[(4, 8, 7), uint32]) -> Tensor[(4, 8, 7), uint32] {
  %31 = cast(%var_2307, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
  %32 = shape_of(%var_2306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %33 = cast(%var_2306, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
  %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%33, %34) /* ty=Tensor[(4, 8, 7), uint32] */
}

def @func_5288() -> (Tensor[(8, 15, 9), int32],) {
  %35 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %36 = cast(%35, dtype="int32") /* ty=Tensor[(1, 15, 9), int32] */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 15, 9), float32] */, dtype="int32") /* ty=Tensor[(8, 15, 9), int32] */;
  %38 = left_shift(%36, %37) /* ty=Tensor[(8, 15, 9), int32] */;
  (%38,)
}

def @func_1652(%var_1583: Tensor[(7, 16, 6), float64], %var_1584: Tensor[(7, 16, 6), float64], %var_1594: Tensor[(270), float32]) -> (Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) {
  %39 = cast(%var_1584, dtype="float64") /* ty=Tensor[(7, 16, 6), float64] */;
  %40 = shape_of(%var_1583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %41 = cast(%var_1583, dtype="float64") /* ty=Tensor[(7, 16, 6), float64] */;
  %42 = dyn.reshape(%39, %40, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %43 = subtract(%41, %42) /* ty=Tensor[(7, 16, 6), float64] */;
  %44 = cast(%var_1583, dtype="bool") /* ty=Tensor[(7, 16, 6), bool] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="bool") /* ty=Tensor[(7, 16, 6), bool] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %48 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %49 = cast(%var_1594, dtype="float32") /* ty=Tensor[(270), float32] */;
  %50 = reshape(%49, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %51 = @func_1564(%50) /* ty=Tensor[(2, 15, 9), int32] */;
  %52 = cast(%51, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %53 = reshape(%52, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %54 = cast(%51, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %55 = logical_and(%46, %47) /* ty=Tensor[(7, 16, 6), bool] */;
  %56 = %48.0;
  %57 = @func_1564(%53) /* ty=Tensor[(2, 15, 9), int32] */;
  %58 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %59 = cosh(%54) /* ty=Tensor[(2, 15, 9), float64] */;
  (%55, %var_1594, %56, %57, %58, %59)
}

def @func_4975(%var_4950: Tensor[(1, 280), float32]) -> (Tensor[(1, 280), float32], Tensor[(1, 15, 9), float32], Tensor[(2, 14, 10), float32], Tensor[(?, 15, 9), bool]) {
  %60 = cast(%var_4950, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %61 = reshape(%60, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %62 = @func_2887(%61) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %63 = %62.0;
  %64 = cast(%63, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %65 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %66 = %65.0;
  %67 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %70 = shape_of(%66, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%66, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %73 = @func_685() /* ty=Tensor[(1, 15, 9), float32] */;
  %74 = sqrt(%64) /* ty=Tensor[(2, 14, 10), float32] */;
  %75 = less_equal(%71, %72) /* ty=Tensor[(?, 15, 9), bool] */;
  (%var_4950, %73, %74, %75)
}

def @func_352(%var_325: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(3, 3, 9), bool], Tensor[(81), float32], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %76 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %77 = cast(%76, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %78 = log(%77) /* ty=Tensor[(1, 15, 9), float32] */;
  %79 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %80 = cast(%79, dtype="int8") /* ty=Tensor[(1, 15, 9), int8] */;
  %81 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %82 = cast(%78, dtype="int8") /* ty=Tensor[(1, 15, 9), int8] */;
  %83 = dyn.reshape(%80, %81, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %84 = multiply(%82, %83) /* ty=Tensor[(?, 15, 9), int8] */;
  %85 = cast(%76, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %86 = shape_of(%78, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%78, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %89 = floor_mod(%87, %88) /* ty=Tensor[(?, 15, 9), float64] */;
  %90 = cast(%89, dtype="float64") /* ty=Tensor[(?, 15, 9), float64] */;
  %91 = shape_of(%84, dtype="int32") /* ty=Tensor[(3), int32] */;
  %92 = cast(%84, dtype="float64") /* ty=Tensor[(?, 15, 9), float64] */;
  %93 = dyn.reshape(%90, %91, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %94 = cast(%var_325, dtype="float32") /* ty=Tensor[(81), float32] */;
  %95 = reshape(%94, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
  %96 = @func_69(%95) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
  %97 = cast(%79, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %98 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %99 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %100 = mod(%92, %93) /* ty=Tensor[(?, 15, 9), float64] */;
  %101 = %96.0;
  %102 = log2(%97) /* ty=Tensor[(1, 15, 9), float32] */;
  %103 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  (%98, %99, %100, %101, %var_325, %102, %103)
}

def @func_3770() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %104 = @func_3262() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %105 = @func_3071() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %106 = %104.1;
  %107 = %105.0;
  (%106, %107)
}

def @func_4308() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %108 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %109 = %108.0;
  %110 = cast(%109, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %111 = asin(%110) /* ty=Tensor[(1, 15, 9), float32] */;
  %112 = @func_3429() /* ty=Tensor[(1, 15, 9), float32] */;
  (%111, %112)
}

def @func_586() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %113 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %114 = %113.0;
  %115 = cast(%114, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %116 = @func_396() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %117 = erf(%115) /* ty=Tensor[(1, 15, 9), float32] */;
  %118 = %116.0;
  (%117, %118)
}

def @func_414() -> (Tensor[(1, 15, 9), float32],) {
  %119 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  (%119,)
}

def @func_2903() -> Tensor[(1, 15, 9), float32] {
  %120 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %120.0
}

def @func_5426(%var_5418: Tensor[(504), float64]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float32]) {
  %121 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
  %122 = reshape(%121, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %123 = @func_2190(%122) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) */;
  %124 = cast(meta[relay.Constant][3] /* ty=Tensor[(9, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
  %125 = reshape(%124, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %126 = @func_3935(%125) /* ty=(Tensor[(504), float64], Tensor[(1, 15, 9), float32], Tensor[(7, 4, 10), float64], Tensor[(280), float64], Tensor[(81), uint16]) */;
  %127 = %126.0;
  %128 = cast(%var_5418, dtype="float32") /* ty=Tensor[(504), float32] */;
  %129 = shape_of(%127, dtype="int32") /* ty=Tensor[(1), int32] */;
  %130 = cast(%127, dtype="float32") /* ty=Tensor[(504), float32] */;
  %131 = dyn.reshape(%128, %129, newshape=[]) /* ty=Tensor[(?), float32] */;
  %132 = @func_4921() /* ty=Tensor[(1, 15, 9), float32] */;
  %133 = %123.0;
  %134 = floor_divide(%130, %131) /* ty=Tensor[(504), float32] */;
  (%132, meta[relay.Constant][3] /* ty=Tensor[(9, 9), float32] */, %133, %134)
}

def @func_4129() -> Tensor[(8, 15, 9), bool] {
  %135 = @func_2922() /* ty=(Tensor[(?, 15, 9), float32],) */;
  %136 = %135.0;
  %137 = cast(%136, dtype="bool") /* ty=Tensor[(?, 15, 9), bool] */;
  %138 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  equal(%137, %138) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_4535(%var_4493: Tensor[(8, 15, 9), float32], %var_4514: Tensor[(224), uint32]) -> (Tensor[(13, 15, 9), uint16], Tensor[(8, 15, 9), bool], Tensor[(?, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(4, 8, 7), uint32], Tensor[(224), uint32]) {
  %139 = @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %140 = %139.0;
  %141 = cast(%140, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %142 = cast(%var_4493, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  %143 = @func_2922() /* ty=(Tensor[(?, 15, 9), float32],) */;
  %144 = cast(%var_4493, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %145 = cast(%var_4514, dtype="uint32") /* ty=Tensor[(224), uint32] */;
  %146 = cast(%var_4514, dtype="uint32") /* ty=Tensor[(224), uint32] */;
  %147 = reshape(%145, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint32] */;
  %148 = reshape(%146, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint32] */;
  %149 = @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */;
  %150 = less(%141, %142) /* ty=Tensor[(8, 15, 9), bool] */;
  %151 = %143.0;
  %152 = sinh(%144) /* ty=Tensor[(8, 15, 9), float64] */;
  %153 = @func_2317(%147, %148) /* ty=Tensor[(4, 8, 7), uint32] */;
  (%149, %150, %151, %152, %153, %var_4514)
}

def @func_3453() -> (Tensor[(1, 15, 9), float32],) {
  %154 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %155 = %154.0;
  (%155,)
}

def @func_2505() -> (Tensor[(504), float64], Tensor[(504), float64]) {
  %156 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
  %157 = @func_2258() /* ty=Tensor[(504), float64] */;
  %158 = %156.2;
  (%157, %158)
}

def @func_2603(%var_2599: Tensor[(27, 3), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1620), float32], Tensor[(90, 18), float32], Tensor[(27, 3), float32]) {
  %159 = @func_2356() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %160 = cast(meta[relay.Constant][5] /* ty=Tensor[(90, 18), float32] */, dtype="float32") /* ty=Tensor[(90, 18), float32] */;
  %161 = cast(%var_2599, dtype="float32") /* ty=Tensor[(27, 3), float32] */;
  %162 = reshape(%160, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
  %163 = reshape(%161, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %164 = @func_1159(%162, %163) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(12, 15, 9), uint64], Tensor[(1620), float32], Tensor[(81), uint8]) */;
  %165 = %159.0;
  %166 = %164.2;
  (%165, %166, meta[relay.Constant][5] /* ty=Tensor[(90, 18), float32] */, %var_2599)
}

def @func_689() -> Tensor[(1, 15, 9), float32] {
  @func_100() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1127(%var_1114: Tensor[(9, 6, 9), uint8], %var_1115: Tensor[(9, 6, 9), uint8]) -> (Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) {
  %167 = cast(%var_1115, dtype="uint8") /* ty=Tensor[(9, 6, 9), uint8] */;
  %168 = shape_of(%var_1114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %169 = cast(%var_1114, dtype="uint8") /* ty=Tensor[(9, 6, 9), uint8] */;
  %170 = dyn.reshape(%167, %168, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %171 = cast(%var_1115, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %172 = left_shift(%169, %170) /* ty=Tensor[(9, 6, 9), uint8] */;
  %173 = sqrt(%171) /* ty=Tensor[(9, 6, 9), float64] */;
  (%172, %173)
}

def @func_3262() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %174 = @func_3071() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %175 = @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %176 = %174.0;
  %177 = %175.0;
  (%176, %177)
}

def @func_2950(%var_2947: Tensor[(8, 4, 10), float64]) -> Tensor[(8, 4, 10), float64] {
  %178 = cast(%var_2947, dtype="float64") /* ty=Tensor[(8, 4, 10), float64] */;
  sin(%178) /* ty=Tensor[(8, 4, 10), float64] */
}

def @func_3429() -> Tensor[(1, 15, 9), float32] {
  @func_2903() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_4729() -> Tensor[(1, 15, 9), float32] {
  %179 = @func_4308() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %179.1
}

def @func_100() -> Tensor[(1, 15, 9), float32] {
  %180 = cast(meta[relay.Constant][6] /* ty=Tensor[(1, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  rsqrt(%180) /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_2050(%var_1977: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %181 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %182 = %181.1;
  %183 = cast(%182, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %184 = cast(%var_1977, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %185 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
  %186 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %187 = cast(%var_1977, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %188 = sigmoid(%187) /* ty=Tensor[(7, 15, 9), float64] */;
  %189 = cast(%188, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %190 = cast(%182, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %191 = cast(meta[relay.Constant][7] /* ty=Tensor[(7, 15, 9), float64] */, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %192 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%188, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %195 = cast(%188, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %196 = log(%195) /* ty=Tensor[(7, 15, 9), float64] */;
  %197 = cast(%188, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %198 = shape_of(%196, dtype="int32") /* ty=Tensor[(3), int32] */;
  %199 = cast(%196, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %200 = dyn.reshape(%197, %198, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %201 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %202 = greater(%183, %184) /* ty=Tensor[(7, 15, 9), bool] */;
  %203 = %185.1;
  %204 = %186.0;
  %205 = divide(%189, %190) /* ty=Tensor[(7, 15, 9), float32] */;
  %206 = power(%193, %194) /* ty=Tensor[(7, 15, 9), float32] */;
  %207 = logical_or(%199, %200) /* ty=Tensor[(7, 15, 9), bool] */;
  %208 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %209 = %201.0;
  (%202, %203, %204, %205, %206, %207, %208, %209)
}

def @func_3935(%var_3899: Tensor[(81), float32]) -> (Tensor[(504), float64], Tensor[(1, 15, 9), float32], Tensor[(7, 4, 10), float64], Tensor[(280), float64], Tensor[(81), uint16]) {
  %210 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %211 = cast(%var_3899, dtype="float32") /* ty=Tensor[(81), float32] */;
  %212 = reshape(%211, newshape=[9, 9]) /* ty=Tensor[(9, 9), float32] */;
  %213 = @func_530(%212) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(9, 9), float32]) */;
  %214 = cast(meta[relay.Constant][8] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %215 = reshape(%214, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), float64] */;
  %216 = cast(%var_3899, dtype="float64") /* ty=Tensor[(81), float64] */;
  %217 = cos(%216) /* ty=Tensor[(81), float64] */;
  %218 = cast(%var_3899, dtype="uint16") /* ty=Tensor[(81), uint16] */;
  %219 = shape_of(%217, dtype="int32") /* ty=Tensor[(1), int32] */;
  %220 = cast(%217, dtype="uint16") /* ty=Tensor[(81), uint16] */;
  %221 = dyn.reshape(%218, %219, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %222 = %210.0;
  %223 = %213.0;
  %224 = @func_978(%215) /* ty=Tensor[(7, 4, 10), float64] */;
  %225 = add(%220, %221) /* ty=Tensor[(81), uint16] */;
  (%222, %223, %224, meta[relay.Constant][8] /* ty=Tensor[(280), float64] */, %225)
}

def @func_2922() -> (Tensor[(?, 15, 9), float32],) {
  %226 = @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %227 = %226.1;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %229 = atanh(%228) /* ty=Tensor[(1, 15, 9), float32] */;
  %230 = cast(%227, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %231 = shape_of(%229, dtype="int32") /* ty=Tensor[(3), int32] */;
  %232 = cast(%229, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %234 = maximum(%232, %233) /* ty=Tensor[(?, 15, 9), float32] */;
  (%234,)
}

def @func_4705() -> (Tensor[(1, 15, 9), float32],) {
  %235 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
  (%235,)
}

def @func_5345(%var_5326: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), uint16], Tensor[(1, 15, 9), float32]) {
  %236 = @func_2118() /* ty=Tensor[(1, 15, 9), float32] */;
  %237 = cast(%236, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %238 = cast(%var_5326, dtype="uint16") /* ty=Tensor[(9, 15, 9), uint16] */;
  %239 = right_shift(%237, %238) /* ty=Tensor[(9, 15, 9), uint16] */;
  %240 = @func_4407() /* ty=Tensor[(1, 15, 9), float32] */;
  (%239, %240)
}

def @func_2511() -> (Tensor[(1, 15, 9), float32],) {
  %241 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %242 = %241.0;
  (%242,)
}

def @func_475(%var_444: Tensor[(9, 8, 7), float64]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 8, 7), float64]) {
  %243 = cast(meta[relay.Constant][9] /* ty=Tensor[(9, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %244 = log10(%243) /* ty=Tensor[(9, 8, 7), float64] */;
  %245 = cast(%var_444, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %246 = shape_of(%244, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%244, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %249 = divide(%247, %248) /* ty=Tensor[(9, 8, 7), float32] */;
  %250 = cast(%249, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %251 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %252 = atanh(%250) /* ty=Tensor[(9, 8, 7), float64] */;
  (%251, %252)
}

def @func_4284() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float64], Tensor[(1, 15, 9), float32]) {
  %253 = @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %254 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %255 = %254.0;
  %256 = cast(%255, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %257 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
  %258 = %253.0;
  %259 = sigmoid(%256) /* ty=Tensor[(1, 15, 9), float64] */;
  %260 = %257.1;
  (%258, %259, %260)
}

def @func_1070() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %261 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %262 = %261.0;
  %263 = @func_1007() /* ty=Tensor[(1, 15, 9), float32] */;
  (%262, %263)
}

def @func_2356() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %264 = @func_1863() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %265 = @func_1007() /* ty=Tensor[(1, 15, 9), float32] */;
  %266 = cast(%265, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %267 = %264.1;
  %268 = exp(%266) /* ty=Tensor[(1, 15, 9), float32] */;
  (%267, %268)
}

def @func_4407() -> Tensor[(1, 15, 9), float32] {
  %269 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %269.0
}

def @func_3071() -> (Tensor[(1, 15, 9), float32],) {
  %270 = @func_2662() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %271 = %270.0;
  (%271,)
}

def @func_396() -> (Tensor[(1, 15, 9), float32],) {
  %272 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %273 = %272.0;
  (%273,)
}

def @func_5168(%var_5149: Tensor[(9, 10, 13), float64]) -> (Tensor[(9, 10, 13), bool],) {
  %274 = cast(%var_5149, dtype="float64") /* ty=Tensor[(9, 10, 13), float64] */;
  %275 = sinh(%274) /* ty=Tensor[(9, 10, 13), float64] */;
  %276 = cast(%var_5149, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %277 = shape_of(%275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %278 = cast(%275, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %279 = dyn.reshape(%276, %277, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %280 = not_equal(%278, %279) /* ty=Tensor[(9, 10, 13), bool] */;
  (%280,)
}

def @func_4381(%var_4367: Tensor[(1, 486), uint8]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 6, 9), uint64]) {
  %281 = @func_3499() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %282 = cast(%var_4367, dtype="uint8") /* ty=Tensor[(1, 486), uint8] */;
  %283 = cast(%var_4367, dtype="uint8") /* ty=Tensor[(1, 486), uint8] */;
  %284 = reshape(%282, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
  %285 = reshape(%283, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
  %286 = @func_1127(%284, %285) /* ty=(Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) */;
  %287 = %286.0;
  %288 = cast(%var_4367, dtype="uint64") /* ty=Tensor[(1, 486), uint64] */;
  %289 = shape_of(%287, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%287, dtype="uint64") /* ty=Tensor[(9, 6, 9), uint64] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %292 = %281.1;
  %293 = bitwise_and(%290, %291) /* ty=Tensor[(9, 6, 9), uint64] */;
  (%292, %293)
}

def @func_5027() -> (Tensor[(5, 15, 9), uint8],) {
  %294 = @func_1958() /* ty=Tensor[(1, 15, 9), float32] */;
  %295 = cast(%294, dtype="uint8") /* ty=Tensor[(1, 15, 9), uint8] */;
  %296 = cast(meta[relay.Constant][10] /* ty=Tensor[(5, 15, 9), float32] */, dtype="uint8") /* ty=Tensor[(5, 15, 9), uint8] */;
  %297 = add(%295, %296) /* ty=Tensor[(5, 15, 9), uint8] */;
  (%297,)
}

def @func_1355() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) {
  %298 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %299 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %300 = %298.0;
  %301 = @func_685() /* ty=Tensor[(1, 15, 9), float32] */;
  %302 = %299.0;
  (%300, %301, %302)
}

def @func_3586() -> (Tensor[(13, 15, 9), float64],) {
  %303 = @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */;
  %304 = cast(%303, dtype="float64") /* ty=Tensor[(13, 15, 9), float64] */;
  %305 = atanh(%304) /* ty=Tensor[(13, 15, 9), float64] */;
  (%305,)
}

def @func_139() -> (Tensor[(1, 15, 9), float32],) {
  %306 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  (%306,)
}

def @func_2457(%var_2408: Tensor[(1, 1, 16), int32]) -> (Tensor[(1, 1, 16), int32], Tensor[(6, 7, 16), uint8]) {
  %307 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %308 = cast(%var_2408, dtype="int32") /* ty=Tensor[(1, 1, 16), int32] */;
  %309 = cast(%var_2408, dtype="uint8") /* ty=Tensor[(1, 1, 16), uint8] */;
  %310 = cast(meta[relay.Constant][11] /* ty=Tensor[(6, 7, 16), int32] */, dtype="uint8") /* ty=Tensor[(6, 7, 16), uint8] */;
  %311 = subtract(%307, %308) /* ty=Tensor[(1, 1, 16), int32] */;
  %312 = right_shift(%309, %310) /* ty=Tensor[(6, 7, 16), uint8] */;
  (%311, %312)
}

def @func_5132(%var_5111: Tensor[(13, 1, 4), int16], %var_5112: Tensor[(13, 7, 4), int16], %var_5122: Tensor[(140, 2), float64]) -> (Tensor[(13, 7, 4), float32], Tensor[(7, 4, 10), float64], Tensor[(140, 2), float64]) {
  %313 = cast(%var_5111, dtype="int16") /* ty=Tensor[(13, 1, 4), int16] */;
  %314 = cast(%var_5112, dtype="int16") /* ty=Tensor[(13, 7, 4), int16] */;
  %315 = add(%313, %314) /* ty=Tensor[(13, 7, 4), int16] */;
  %316 = cast(%315, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
  %317 = cast(%var_5122, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
  %318 = reshape(%317, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), float64] */;
  %319 = sqrt(%316) /* ty=Tensor[(13, 7, 4), float32] */;
  %320 = @func_978(%318) /* ty=Tensor[(7, 4, 10), float64] */;
  (%319, %320, %var_5122)
}

def @func_1958() -> Tensor[(1, 15, 9), float32] {
  %321 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %321.3
}

def @func_2190(%var_2167: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) {
  %322 = @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %323 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %324 = %323.1;
  %325 = cast(%324, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %326 = acosh(%325) /* ty=Tensor[(1, 15, 9), float64] */;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %328 = cos(%327) /* ty=Tensor[(1, 15, 9), float64] */;
  %329 = cast(%324, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %333 = cast(%var_2167, dtype="float32") /* ty=Tensor[(81), float32] */;
  %334 = reshape(%333, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %335 = @func_352(%334) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(3, 3, 9), bool], Tensor[(81), float32], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %336 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %337 = %322.1;
  %338 = floor_divide(%331, %332) /* ty=Tensor[(?, 15, 9), float64] */;
  %339 = %335.0;
  %340 = %336.0;
  (%337, %338, %339, %var_2167, %340)
}

def @func_1159(%var_1142: Tensor[(1620), float32], %var_1147: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(12, 15, 9), uint64], Tensor[(1620), float32], Tensor[(81), uint8]) {
  %341 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %342 = cast(%var_1142, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %343 = reshape(%342, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %344 = @func_665(%343) /* ty=(Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) */;
  %345 = cast(%var_1147, dtype="float32") /* ty=Tensor[(81), float32] */;
  %346 = reshape(%345, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %347 = @func_190(%346) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) */;
  %348 = %347.1;
  %349 = cast(%348, dtype="uint8") /* ty=Tensor[(3, 3, 9), uint8] */;
  %350 = shape_of(%var_1147, dtype="int32") /* ty=Tensor[(1), int32] */;
  %351 = cast(%var_1147, dtype="uint8") /* ty=Tensor[(81), uint8] */;
  %352 = dyn.reshape(%349, %350, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %353 = %341.0;
  %354 = %344.0;
  %355 = logical_xor(%351, %352) /* ty=Tensor[(81), uint8] */;
  (%353, %354, %var_1142, %355)
}

def @func_124() -> Tensor[(1, 15, 9), float32] {
  @func_100() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_3676(%var_3636: Tensor[(15, 15, 9), float32]) -> (Tensor[(15, 15, 9), int64], Tensor[(15, 15, 9), uint32]) {
  %356 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %357 = %356.1;
  %358 = cast(%357, dtype="int64") /* ty=Tensor[(1, 15, 9), int64] */;
  %359 = cast(%var_3636, dtype="int64") /* ty=Tensor[(15, 15, 9), int64] */;
  %360 = cast(%var_3636, dtype="uint32") /* ty=Tensor[(15, 15, 9), uint32] */;
  %361 = cast(%357, dtype="uint32") /* ty=Tensor[(1, 15, 9), uint32] */;
  %362 = bitwise_or(%358, %359) /* ty=Tensor[(15, 15, 9), int64] */;
  %363 = add(%360, %361) /* ty=Tensor[(15, 15, 9), uint32] */;
  (%362, %363)
}

def @func_1891() -> (Tensor[(1, 15, 9), float32],) {
  %364 = @func_685() /* ty=Tensor[(1, 15, 9), float32] */;
  (%364,)
}

def @func_2118() -> Tensor[(1, 15, 9), float32] {
  @func_124() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_4800() -> (Tensor[(4, 15, 9), uint32],) {
  %365 = @func_3770() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %366 = %365.0;
  %367 = cast(%366, dtype="uint32") /* ty=Tensor[(1, 15, 9), uint32] */;
  %368 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 15, 9), float32] */, dtype="uint32") /* ty=Tensor[(4, 15, 9), uint32] */;
  %369 = logical_xor(%367, %368) /* ty=Tensor[(4, 15, 9), uint32] */;
  (%369,)
}

def @func_822() -> (Tensor[(1, 15, 9), float32],) {
  %370 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
  (%370,)
}

def @func_1197() -> (Tensor[(504), float64],) {
  %371 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %372 = %371.2;
  (%372,)
}

def @func_685() -> Tensor[(1, 15, 9), float32] {
  %373 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %373.0
}

def @func_3007(%var_2978: Tensor[(14, 6, 11), float32], %var_2998: Tensor[(8, 84), float64]) -> (Tensor[(270), float32], Tensor[(8, 84), float64], Tensor[(270), float32], Tensor[(14, 6, 11), float32]) {
  %374 = cast(%var_2998, dtype="float64") /* ty=Tensor[(8, 84), float64] */;
  %375 = cast(%var_2998, dtype="float64") /* ty=Tensor[(8, 84), float64] */;
  %376 = cast(meta[relay.Constant][13] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %377 = reshape(%374, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %378 = reshape(%375, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %379 = reshape(%376, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %380 = @func_1652(%377, %378, %379) /* ty=(Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) */;
  %381 = cast(%var_2978, dtype="float32") /* ty=Tensor[(14, 6, 11), float32] */;
  %382 = acosh(%381) /* ty=Tensor[(14, 6, 11), float32] */;
  %383 = cast(%382, dtype="float32") /* ty=Tensor[(14, 6, 11), float32] */;
  %384 = %380.1;
  %385 = tan(%383) /* ty=Tensor[(14, 6, 11), float32] */;
  (%384, %var_2998, meta[relay.Constant][13] /* ty=Tensor[(270), float32] */, %385)
}

def @func_1564(%var_1559: Tensor[(2, 15, 9), float32]) -> Tensor[(2, 15, 9), int32] {
  %386 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %387 = %386.0;
  %388 = cast(%387, dtype="int32") /* ty=Tensor[(1, 15, 9), int32] */;
  %389 = cast(%var_1559, dtype="int32") /* ty=Tensor[(2, 15, 9), int32] */;
  minimum(%388, %389) /* ty=Tensor[(2, 15, 9), int32] */
}

def @func_3354() -> Tensor[(13, 15, 9), uint16] {
  %390 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %391 = %390.0;
  %392 = cast(%391, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %393 = cast(meta[relay.Constant][14] /* ty=Tensor[(13, 15, 9), float32] */, dtype="uint16") /* ty=Tensor[(13, 15, 9), uint16] */;
  bitwise_or(%392, %393) /* ty=Tensor[(13, 15, 9), uint16] */
}

def @func_4101() -> (Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) {
  %394 = @func_4044() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(14, 14, 3), bool], uint64) */;
  %395 = %394.2;
  %396 = @func_1706() /* ty=Tensor[(1, 15, 9), float32] */;
  %397 = cast(%395, dtype="bool") /* ty=bool */;
  %398 = cast(%396, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %399 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %400 = not_equal(%397, %398) /* ty=Tensor[(1, 15, 9), bool] */;
  %401 = %399.1;
  (%400, %401)
}

def @func_1706() -> Tensor[(1, 15, 9), float32] {
  %402 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %402.0
}

def @func_5480() -> (Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float32], Tensor[(1620), float32]) {
  %403 = @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */;
  %404 = cast(meta[relay.Constant][15] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %405 = reshape(%404, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %406 = @func_665(%405) /* ty=(Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) */;
  %407 = %403.0;
  %408 = @func_4921() /* ty=Tensor[(1, 15, 9), float32] */;
  %409 = %406.2;
  (%407, %408, %409, meta[relay.Constant][15] /* ty=Tensor[(1620), float32] */)
}

def @func_4216(%var_4207: Tensor[(3, 15, 9), float32]) -> (Tensor[(3, 15, 9), bool],) {
  %410 = @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */;
  %411 = %410.1;
  %412 = cast(%411, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %413 = cast(%var_4207, dtype="bool") /* ty=Tensor[(3, 15, 9), bool] */;
  %414 = less(%412, %413) /* ty=Tensor[(3, 15, 9), bool] */;
  (%414,)
}

def @func_1007() -> Tensor[(1, 15, 9), float32] {
  @func_685() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_910() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) {
  %415 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %416 = cast(meta[relay.Constant][16] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
  %417 = reshape(%416, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float64] */;
  %418 = @func_475(%417) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(9, 8, 7), float64]) */;
  %419 = %415.0;
  %420 = %418.0;
  %421 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  (%419, %420, meta[relay.Constant][16] /* ty=Tensor[(504), float64] */, %421)
}

def @func_665(%var_631: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) {
  %422 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %423 = %422.0;
  %424 = cast(%423, dtype="uint64") /* ty=Tensor[(1, 15, 9), uint64] */;
  %425 = cast(%var_631, dtype="uint64") /* ty=Tensor[(12, 15, 9), uint64] */;
  %426 = cast(%423, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %427 = cast(%var_631, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %428 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %429 = %428.0;
  %430 = cast(%429, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %431 = shape_of(%423, dtype="int32") /* ty=Tensor[(3), int32] */;
  %432 = cast(%423, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %433 = dyn.reshape(%430, %431, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %434 = left_shift(%424, %425) /* ty=Tensor[(12, 15, 9), uint64] */;
  %435 = less_equal(%426, %427) /* ty=Tensor[(12, 15, 9), bool] */;
  %436 = divide(%432, %433) /* ty=Tensor[(?, 15, 9), float32] */;
  (%434, %435, %436)
}

def @func_1927(%var_1893: uint64) -> Tensor[(14, 14, 3), bool] {
  %437 = cast(%var_1893, dtype="bool") /* ty=bool */;
  %438 = cast(meta[relay.Constant][17] /* ty=Tensor[(14, 14, 3), uint64] */, dtype="bool") /* ty=Tensor[(14, 14, 3), bool] */;
  %439 = equal(%437, %438) /* ty=Tensor[(14, 14, 3), bool] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
  %441 = cast(%var_1893, dtype="float32") /* ty=float32 */;
  %442 = floor_mod(%440, %441) /* ty=Tensor[(14, 14, 3), float32] */;
  %443 = cast(%var_1893, dtype="bool") /* ty=bool */;
  %444 = cast(%442, dtype="bool") /* ty=Tensor[(14, 14, 3), bool] */;
  less_equal(%443, %444) /* ty=Tensor[(14, 14, 3), bool] */
}

def @func_4863() -> Tensor[(1, 15, 9), float32] {
  %445 = @func_1863() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %445.0
}

def @func_5016() -> Tensor[(3, 15, 9), float32] {
  %446 = @func_4407() /* ty=Tensor[(1, 15, 9), float32] */;
  %447 = cast(%446, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %448 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 15, 9), float32] */, dtype="uint16") /* ty=Tensor[(3, 15, 9), uint16] */;
  %449 = bitwise_and(%447, %448) /* ty=Tensor[(3, 15, 9), uint16] */;
  %450 = cast(%449, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
  tan(%450) /* ty=Tensor[(3, 15, 9), float32] */
}

def @func_1546(%var_1485: Tensor[(1215), float32], %var_1486: Tensor[(81), float32], %var_1513: Tensor[(243, 2), bool], %var_1524: Tensor[(243, 2), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(81), float32], Tensor[(243, 2), int64], Tensor[(3, 3, 9), bool], Tensor[(243, 2), float32], Tensor[(243, 2), int8], Tensor[(1, 15, 9), float32], Tensor[(243, 2), uint64]) {
  %451 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %452 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %453 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
  %454 = cast(%var_1485, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %455 = cast(%var_1486, dtype="float32") /* ty=Tensor[(81), float32] */;
  %456 = reshape(%454, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
  %457 = reshape(%455, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %458 = @func_1314(%456, %457) /* ty=(Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) */;
  %459 = cast(meta[relay.Constant][19] /* ty=Tensor[(243, 2), uint8] */, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %460 = log10(%459) /* ty=Tensor[(243, 2), float32] */;
  %461 = cast(%460, dtype="float64") /* ty=Tensor[(243, 2), float64] */;
  %462 = asinh(%461) /* ty=Tensor[(243, 2), float64] */;
  %463 = cast(%462, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %464 = exp(%463) /* ty=Tensor[(243, 2), float32] */;
  %465 = cast(%464, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %466 = cosh(%465) /* ty=Tensor[(243, 2), float32] */;
  %467 = cast(meta[relay.Constant][19] /* ty=Tensor[(243, 2), uint8] */, dtype="uint8") /* ty=Tensor[(243, 2), uint8] */;
  %468 = cast(meta[relay.Constant][19] /* ty=Tensor[(243, 2), uint8] */, dtype="uint8") /* ty=Tensor[(243, 2), uint8] */;
  %469 = reshape(%467, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
  %470 = reshape(%468, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
  %471 = @func_1127(%469, %470) /* ty=(Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
  %474 = shape_of(%466, dtype="int32") /* ty=Tensor[(2), int32] */;
  %475 = cast(%466, dtype="bool") /* ty=Tensor[(243, 2), bool] */;
  %476 = dyn.reshape(%473, %474, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %477 = logical_and(%475, %476) /* ty=Tensor[(243, 2), bool] */;
  %478 = cast(%472, dtype="float32") /* ty=Tensor[(9, 6, 9), float32] */;
  %479 = shape_of(meta[relay.Constant][19] /* ty=Tensor[(243, 2), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %480 = cast(meta[relay.Constant][19] /* ty=Tensor[(243, 2), uint8] */, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %482 = power(%480, %481) /* ty=Tensor[(243, 2), float32] */;
  %483 = cast(%482, dtype="int64") /* ty=Tensor[(243, 2), int64] */;
  %484 = shape_of(%477, dtype="int32") /* ty=Tensor[(2), int32] */;
  %485 = cast(%477, dtype="int64") /* ty=Tensor[(243, 2), int64] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %487 = cast(%var_1486, dtype="float32") /* ty=Tensor[(81), float32] */;
  %488 = reshape(%487, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
  %489 = @func_69(%488) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
  %490 = cast(%482, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %491 = shape_of(%462, dtype="int32") /* ty=Tensor[(2), int32] */;
  %492 = cast(%462, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %493 = dyn.reshape(%490, %491, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %494 = mod(%492, %493) /* ty=Tensor[(243, 2), float32] */;
  %495 = cast(%462, dtype="bool") /* ty=Tensor[(243, 2), bool] */;
  %496 = shape_of(%494, dtype="int32") /* ty=Tensor[(2), int32] */;
  %497 = cast(%494, dtype="bool") /* ty=Tensor[(243, 2), bool] */;
  %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %499 = equal(%497, %498) /* ty=Tensor[(243, 2), bool] */;
  %500 = cast(%var_1513, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(2), int32] */;
  %502 = cast(%499, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
  %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %504 = cast(%var_1524, dtype="int8") /* ty=Tensor[(243, 2), int8] */;
  %505 = shape_of(%466, dtype="int32") /* ty=Tensor[(2), int32] */;
  %506 = cast(%466, dtype="int8") /* ty=Tensor[(243, 2), int8] */;
  %507 = dyn.reshape(%504, %505, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
  %508 = cast(%482, dtype="uint64") /* ty=Tensor[(243, 2), uint64] */;
  %509 = shape_of(%477, dtype="int32") /* ty=Tensor[(2), int32] */;
  %510 = cast(%477, dtype="uint64") /* ty=Tensor[(243, 2), uint64] */;
  %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %512 = %451.0;
  %513 = %452.1;
  %514 = %453.2;
  %515 = %458.3;
  %516 = subtract(%485, %486) /* ty=Tensor[(243, 2), int64] */;
  %517 = %489.0;
  %518 = divide(%502, %503) /* ty=Tensor[(243, 2), float32] */;
  %519 = logical_xor(%506, %507) /* ty=Tensor[(243, 2), int8] */;
  %520 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
  %521 = minimum(%510, %511) /* ty=Tensor[(243, 2), uint64] */;
  (%512, %513, %514, %515, %var_1485, %var_1486, %516, %517, %518, %519, %520, %521)
}

def @func_5077() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float64]) {
  %522 = cast(meta[relay.Constant][20] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
  %523 = reshape(%522, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %524 = @func_2190(%523) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) */;
  %525 = @func_4284() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float64], Tensor[(1, 15, 9), float32]) */;
  %526 = @func_3429() /* ty=Tensor[(1, 15, 9), float32] */;
  %527 = %524.2;
  %528 = %525.1;
  (%526, %527, meta[relay.Constant][20] /* ty=Tensor[(81), float32] */, %528)
}

def @func_2258() -> Tensor[(504), float64] {
  %529 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %529.0
}

def @func_190(%var_188: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) {
  %530 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %531 = %530.0;
  %532 = cast(%531, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %533 = cast(%var_188, dtype="float32") /* ty=Tensor[(81), float32] */;
  %534 = reshape(%533, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
  %535 = @func_69(%534) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
  %536 = log10(%532) /* ty=Tensor[(1, 15, 9), float32] */;
  %537 = %535.2;
  (%536, %537, %var_188)
}

def @func_1314(%var_1227: Tensor[(9, 15, 9), float32], %var_1248: Tensor[(81), float32]) -> (Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) {
  %538 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
  %539 = cast(%538, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %540 = cast(%var_1227, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
  %541 = less_equal(%539, %540) /* ty=Tensor[(9, 15, 9), bool] */;
  %542 = cast(%var_1227, dtype="int32") /* ty=Tensor[(9, 15, 9), int32] */;
  %543 = shape_of(%541, dtype="int32") /* ty=Tensor[(3), int32] */;
  %544 = cast(%541, dtype="int32") /* ty=Tensor[(9, 15, 9), int32] */;
  %545 = dyn.reshape(%542, %543, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %546 = cast(%var_1248, dtype="float32") /* ty=Tensor[(81), float32] */;
  %547 = reshape(%546, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %548 = @func_190(%547) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) */;
  %549 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %550 = %549.0;
  %551 = cast(%550, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %552 = sqrt(%551) /* ty=Tensor[(1, 15, 9), float32] */;
  %553 = cast(%552, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %554 = cast(%541, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
  %555 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %556 = cast(%550, dtype="uint8") /* ty=Tensor[(1, 15, 9), uint8] */;
  %557 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
  %558 = cast(%552, dtype="uint8") /* ty=Tensor[(1, 15, 9), uint8] */;
  %559 = dyn.reshape(%556, %557, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %560 = bitwise_xor(%544, %545) /* ty=Tensor[(9, 15, 9), int32] */;
  %561 = %548.0;
  %562 = mod(%553, %554) /* ty=Tensor[(9, 15, 9), float32] */;
  %563 = %555.0;
  %564 = logical_xor(%558, %559) /* ty=Tensor[(?, 15, 9), uint8] */;
  (%560, %561, %var_1248, %562, %563, %564)
}

def @func_2887(%var_2880: Tensor[(2, 14, 10), float32]) -> (Tensor[(2, 14, 10), float32],) {
  %565 = cast(%var_2880, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %566 = asin(%565) /* ty=Tensor[(2, 14, 10), float32] */;
  (%566,)
}

def @func_3228() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %567 = @func_1863() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %568 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %569 = %567.0;
  %570 = %568.0;
  (%569, %570)
}

def @func_4561(%var_4552: Tensor[(6, 5, 8), int16]) -> (Tensor[(6, 5, 8), int16], Tensor[(?, 15, 9), uint8], Tensor[(1215), float32], Tensor[(81, 1), float32]) {
  %571 = cast(%var_4552, dtype="int16") /* ty=Tensor[(6, 5, 8), int16] */;
  %572 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(6, 5, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(meta[relay.Constant][21] /* ty=Tensor[(6, 5, 8), int16] */, dtype="int16") /* ty=Tensor[(6, 5, 8), int16] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %575 = cast(meta[relay.Constant][22] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
  %576 = cast(meta[relay.Constant][23] /* ty=Tensor[(81, 1), float32] */, dtype="float32") /* ty=Tensor[(81, 1), float32] */;
  %577 = reshape(%575, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
  %578 = reshape(%576, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %579 = @func_1314(%577, %578) /* ty=(Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) */;
  %580 = bitwise_or(%573, %574) /* ty=Tensor[(6, 5, 8), int16] */;
  %581 = %579.5;
  (%580, %581, meta[relay.Constant][22] /* ty=Tensor[(1215), float32] */, meta[relay.Constant][23] /* ty=Tensor[(81, 1), float32] */)
}

def @func_69(%var_47: Tensor[(3, 3, 9), float32]) -> (Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) {
  %582 = cast(%var_47, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
  %583 = shape_of(meta[relay.Constant][24] /* ty=Tensor[(3, 3, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 3, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %586 = cast(%var_47, dtype="float64") /* ty=Tensor[(3, 3, 9), float64] */;
  %587 = cast(%var_47, dtype="float64") /* ty=Tensor[(3, 3, 9), float64] */;
  %588 = less(%584, %585) /* ty=Tensor[(3, 3, 9), bool] */;
  %589 = acos(%586) /* ty=Tensor[(3, 3, 9), float64] */;
  %590 = sqrt(%587) /* ty=Tensor[(3, 3, 9), float64] */;
  (%588, %589, %590)
}

def @func_4685(%var_4608: Tensor[(16, 15, 9), float32], %var_4620: Tensor[(672), float64], %var_4621: Tensor[(90, 3), float32]) -> (Tensor[(16, 15, 9), bool], Tensor[(2, 15, 9), int32], Tensor[(672), float64], Tensor[(90, 3), float32], Tensor[(16, 15, 9), bool], Tensor[(13, 15, 9), uint16], Tensor[(16, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) {
  %591 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %592 = %591.1;
  %593 = cast(%592, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %594 = cast(%var_4608, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %595 = cast(%var_4620, dtype="float64") /* ty=Tensor[(672), float64] */;
  %596 = cast(%var_4620, dtype="float64") /* ty=Tensor[(672), float64] */;
  %597 = cast(%var_4621, dtype="float32") /* ty=Tensor[(90, 3), float32] */;
  %598 = reshape(%595, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %599 = reshape(%596, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %600 = reshape(%597, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %601 = @func_1652(%598, %599, %600) /* ty=(Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) */;
  %602 = cast(%592, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %603 = cast(%var_4608, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %604 = @func_3071() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %605 = %604.0;
  %606 = cast(%var_4608, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
  %607 = cast(%605, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %608 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %609 = less_equal(%593, %594) /* ty=Tensor[(16, 15, 9), bool] */;
  %610 = %601.3;
  %611 = greater(%602, %603) /* ty=Tensor[(16, 15, 9), bool] */;
  %612 = @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */;
  %613 = floor_mod(%606, %607) /* ty=Tensor[(16, 15, 9), float64] */;
  %614 = @func_1958() /* ty=Tensor[(1, 15, 9), float32] */;
  %615 = %608.0;
  (%609, %610, %var_4620, %var_4621, %611, %612, %613, %614, %615)
}

def @func_978(%var_974: Tensor[(7, 4, 10), float64]) -> Tensor[(7, 4, 10), float64] {
  %616 = cast(%var_974, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
  acos(%616) /* ty=Tensor[(7, 4, 10), float64] */
}

def @func_4447() -> Tensor[(1, 15, 9), float32] {
  @func_100() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1863() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %617 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %618 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %619 = %617.0;
  %620 = %618.0;
  (%619, %620)
}

def @func_3852(%var_3813: Tensor[(8, 15, 9), float32]) -> (Tensor[(8, 15, 9), int64], Tensor[(8, 15, 9), float64]) {
  %621 = @func_1958() /* ty=Tensor[(1, 15, 9), float32] */;
  %622 = cast(%621, dtype="int64") /* ty=Tensor[(1, 15, 9), int64] */;
  %623 = cast(%var_3813, dtype="int64") /* ty=Tensor[(8, 15, 9), int64] */;
  %624 = cast(%621, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %625 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(8, 15, 9), uint16] */;
  %626 = right_shift(%624, %625) /* ty=Tensor[(8, 15, 9), uint16] */;
  %627 = cast(%626, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %628 = exp(%627) /* ty=Tensor[(8, 15, 9), float64] */;
  %629 = cast(%628, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %630 = multiply(%622, %623) /* ty=Tensor[(8, 15, 9), int64] */;
  %631 = atanh(%629) /* ty=Tensor[(8, 15, 9), float64] */;
  (%630, %631)
}

def @func_3499() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %632 = @func_2356() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %633 = %632.0;
  %634 = @func_2118() /* ty=Tensor[(1, 15, 9), float32] */;
  (%633, %634)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_1318(%var_1316: Tensor[(9, 15, 9), float32], %var_1317: Tensor[(81), float32]) -> (Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) {
  @func_1314(%var_1316, %var_1317) /* ty=(Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) */
}

def @func_352(%var_325: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(3, 3, 9), bool], Tensor[(81), float32], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %0 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %1 = cast(%0, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %2 = log(%1) /* ty=Tensor[(1, 15, 9), float32] */;
  %3 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %4 = cast(%3, dtype="int8") /* ty=Tensor[(1, 15, 9), int8] */;
  %5 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %6 = cast(%2, dtype="int8") /* ty=Tensor[(1, 15, 9), int8] */;
  %7 = dyn.reshape(%4, %5, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %8 = multiply(%6, %7) /* ty=Tensor[(?, 15, 9), int8] */;
  %9 = cast(%0, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %10 = shape_of(%2, dtype="int32") /* ty=Tensor[(3), int32] */;
  %11 = cast(%2, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %12 = dyn.reshape(%9, %10, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %13 = floor_mod(%11, %12) /* ty=Tensor[(?, 15, 9), float64] */;
  %14 = cast(%13, dtype="float64") /* ty=Tensor[(?, 15, 9), float64] */;
  %15 = shape_of(%8, dtype="int32") /* ty=Tensor[(3), int32] */;
  %16 = cast(%8, dtype="float64") /* ty=Tensor[(?, 15, 9), float64] */;
  %17 = dyn.reshape(%14, %15, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %18 = cast(%var_325, dtype="float32") /* ty=Tensor[(81), float32] */;
  %19 = reshape(%18, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
  %20 = @func_69(%19) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
  %21 = cast(%3, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %22 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %23 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %24 = mod(%16, %17) /* ty=Tensor[(?, 15, 9), float64] */;
  %25 = %20.0;
  %26 = log2(%21) /* ty=Tensor[(1, 15, 9), float32] */;
  %27 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  (%22, %23, %24, %25, %var_325, %26, %27)
}

def @func_1892() -> (Tensor[(1, 15, 9), float32],) {
  %29 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %28 = @func_685() /* ty=Tensor[(1, 15, 9), float32] */;
    (%28,)
  };
  %29() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_4285() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float64], Tensor[(1, 15, 9), float32]) {
  %38 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float64], Tensor[(1, 15, 9), float32]) {
    %30 = @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %31 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %32 = %31.0;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
    %34 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
    %35 = %30.0;
    %36 = sigmoid(%33) /* ty=Tensor[(1, 15, 9), float64] */;
    %37 = %34.1;
    (%35, %36, %37)
  };
  %38() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float64], Tensor[(1, 15, 9), float32]) */
}

def @func_4437() -> (Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(945), float32]) {
  @func_4435() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(945), float32]) */
}

def @func_4310() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_4308() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_1551(%var_1547: Tensor[(1215), float32], %var_1548: Tensor[(81), float32], %var_1549: Tensor[(243, 2), bool], %var_1550: Tensor[(243, 2), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(81), float32], Tensor[(243, 2), int64], Tensor[(3, 3, 9), bool], Tensor[(243, 2), float32], Tensor[(243, 2), int8], Tensor[(1, 15, 9), float32], Tensor[(243, 2), uint64]) {
  %110 = fn (%var_1485: Tensor[(1215), float32], %var_1486: Tensor[(81), float32], %var_1513: Tensor[(243, 2), bool], %var_1524: Tensor[(243, 2), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(81), float32], Tensor[(243, 2), int64], Tensor[(3, 3, 9), bool], Tensor[(243, 2), float32], Tensor[(243, 2), int8], Tensor[(1, 15, 9), float32], Tensor[(243, 2), uint64]) {
    %39 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %40 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
    %41 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
    %42 = cast(%var_1485, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %43 = cast(%var_1486, dtype="float32") /* ty=Tensor[(81), float32] */;
    %44 = reshape(%42, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
    %45 = reshape(%43, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %46 = @func_1314(%44, %45) /* ty=(Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) */;
    %47 = cast(meta[relay.Constant][0] /* ty=Tensor[(243, 2), uint8] */, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %48 = log10(%47) /* ty=Tensor[(243, 2), float32] */;
    %49 = cast(%48, dtype="float64") /* ty=Tensor[(243, 2), float64] */;
    %50 = asinh(%49) /* ty=Tensor[(243, 2), float64] */;
    %51 = cast(%50, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %52 = exp(%51) /* ty=Tensor[(243, 2), float32] */;
    %53 = cast(%52, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %54 = cosh(%53) /* ty=Tensor[(243, 2), float32] */;
    %55 = cast(meta[relay.Constant][0] /* ty=Tensor[(243, 2), uint8] */, dtype="uint8") /* ty=Tensor[(243, 2), uint8] */;
    %56 = cast(meta[relay.Constant][0] /* ty=Tensor[(243, 2), uint8] */, dtype="uint8") /* ty=Tensor[(243, 2), uint8] */;
    %57 = reshape(%55, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
    %58 = reshape(%56, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
    %59 = @func_1127(%57, %58) /* ty=(Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) */;
    %60 = %59.0;
    %61 = cast(%60, dtype="bool") /* ty=Tensor[(9, 6, 9), bool] */;
    %62 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
    %63 = cast(%54, dtype="bool") /* ty=Tensor[(243, 2), bool] */;
    %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %65 = logical_and(%63, %64) /* ty=Tensor[(243, 2), bool] */;
    %66 = cast(%60, dtype="float32") /* ty=Tensor[(9, 6, 9), float32] */;
    %67 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(243, 2), uint8] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %68 = cast(meta[relay.Constant][0] /* ty=Tensor[(243, 2), uint8] */, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %70 = power(%68, %69) /* ty=Tensor[(243, 2), float32] */;
    %71 = cast(%70, dtype="int64") /* ty=Tensor[(243, 2), int64] */;
    %72 = shape_of(%65, dtype="int32") /* ty=Tensor[(2), int32] */;
    %73 = cast(%65, dtype="int64") /* ty=Tensor[(243, 2), int64] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
    %75 = cast(%var_1486, dtype="float32") /* ty=Tensor[(81), float32] */;
    %76 = reshape(%75, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
    %77 = @func_69(%76) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
    %78 = cast(%70, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %79 = shape_of(%50, dtype="int32") /* ty=Tensor[(2), int32] */;
    %80 = cast(%50, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %81 = dyn.reshape(%78, %79, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %82 = mod(%80, %81) /* ty=Tensor[(243, 2), float32] */;
    %83 = cast(%50, dtype="bool") /* ty=Tensor[(243, 2), bool] */;
    %84 = shape_of(%82, dtype="int32") /* ty=Tensor[(2), int32] */;
    %85 = cast(%82, dtype="bool") /* ty=Tensor[(243, 2), bool] */;
    %86 = dyn.reshape(%83, %84, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %87 = equal(%85, %86) /* ty=Tensor[(243, 2), bool] */;
    %88 = cast(%var_1513, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %89 = shape_of(%87, dtype="int32") /* ty=Tensor[(2), int32] */;
    %90 = cast(%87, dtype="float32") /* ty=Tensor[(243, 2), float32] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
    %92 = cast(%var_1524, dtype="int8") /* ty=Tensor[(243, 2), int8] */;
    %93 = shape_of(%54, dtype="int32") /* ty=Tensor[(2), int32] */;
    %94 = cast(%54, dtype="int8") /* ty=Tensor[(243, 2), int8] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?), int8] */;
    %96 = cast(%70, dtype="uint64") /* ty=Tensor[(243, 2), uint64] */;
    %97 = shape_of(%65, dtype="int32") /* ty=Tensor[(2), int32] */;
    %98 = cast(%65, dtype="uint64") /* ty=Tensor[(243, 2), uint64] */;
    %99 = dyn.reshape(%96, %97, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %100 = %39.0;
    %101 = %40.1;
    %102 = %41.2;
    %103 = %46.3;
    %104 = subtract(%73, %74) /* ty=Tensor[(243, 2), int64] */;
    %105 = %77.0;
    %106 = divide(%90, %91) /* ty=Tensor[(243, 2), float32] */;
    %107 = logical_xor(%94, %95) /* ty=Tensor[(243, 2), int8] */;
    %108 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
    %109 = minimum(%98, %99) /* ty=Tensor[(243, 2), uint64] */;
    (%100, %101, %102, %103, %var_1485, %var_1486, %104, %105, %106, %107, %108, %109)
  };
  %110(%var_1547, %var_1548, %var_1549, %var_1550) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(9, 15, 9), float32], Tensor[(1215), float32], Tensor[(81), float32], Tensor[(243, 2), int64], Tensor[(3, 3, 9), bool], Tensor[(243, 2), float32], Tensor[(243, 2), int8], Tensor[(1, 15, 9), float32], Tensor[(243, 2), uint64]) */
}

def @func_4741() -> (Tensor[(1, 15, 9), float32],) {
  %113 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %111 = @func_4308() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %112 = %111.1;
    (%112,)
  };
  %113() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_1766() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_2050(%var_1977: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %114 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %115 = %114.1;
  %116 = cast(%115, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %117 = cast(%var_1977, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %118 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
  %119 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %120 = cast(%var_1977, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %121 = sigmoid(%120) /* ty=Tensor[(7, 15, 9), float64] */;
  %122 = cast(%121, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %123 = cast(%115, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %124 = cast(meta[relay.Constant][1] /* ty=Tensor[(7, 15, 9), float64] */, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %125 = shape_of(%121, dtype="int32") /* ty=Tensor[(3), int32] */;
  %126 = cast(%121, dtype="float32") /* ty=Tensor[(7, 15, 9), float32] */;
  %127 = dyn.reshape(%124, %125, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %128 = cast(%121, dtype="float64") /* ty=Tensor[(7, 15, 9), float64] */;
  %129 = log(%128) /* ty=Tensor[(7, 15, 9), float64] */;
  %130 = cast(%121, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %131 = shape_of(%129, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%129, dtype="bool") /* ty=Tensor[(7, 15, 9), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %135 = greater(%116, %117) /* ty=Tensor[(7, 15, 9), bool] */;
  %136 = %118.1;
  %137 = %119.0;
  %138 = divide(%122, %123) /* ty=Tensor[(7, 15, 9), float32] */;
  %139 = power(%126, %127) /* ty=Tensor[(7, 15, 9), float32] */;
  %140 = logical_or(%132, %133) /* ty=Tensor[(7, 15, 9), bool] */;
  %141 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %142 = %134.0;
  (%135, %136, %137, %138, %139, %140, %141, %142)
}

def @func_1072() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_2356() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %143 = @func_1863() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %144 = @func_1007() /* ty=Tensor[(1, 15, 9), float32] */;
  %145 = cast(%144, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %146 = %143.1;
  %147 = exp(%145) /* ty=Tensor[(1, 15, 9), float32] */;
  (%146, %147)
}

def @func_4923() -> Tensor[(1, 15, 9), float32] {
  @func_4921() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1652(%var_1583: Tensor[(7, 16, 6), float64], %var_1584: Tensor[(7, 16, 6), float64], %var_1594: Tensor[(270), float32]) -> (Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) {
  %148 = cast(%var_1584, dtype="float64") /* ty=Tensor[(7, 16, 6), float64] */;
  %149 = shape_of(%var_1583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %150 = cast(%var_1583, dtype="float64") /* ty=Tensor[(7, 16, 6), float64] */;
  %151 = dyn.reshape(%148, %149, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %152 = subtract(%150, %151) /* ty=Tensor[(7, 16, 6), float64] */;
  %153 = cast(%var_1583, dtype="bool") /* ty=Tensor[(7, 16, 6), bool] */;
  %154 = shape_of(%152, dtype="int32") /* ty=Tensor[(3), int32] */;
  %155 = cast(%152, dtype="bool") /* ty=Tensor[(7, 16, 6), bool] */;
  %156 = dyn.reshape(%153, %154, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %157 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %158 = cast(%var_1594, dtype="float32") /* ty=Tensor[(270), float32] */;
  %159 = reshape(%158, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %160 = @func_1564(%159) /* ty=Tensor[(2, 15, 9), int32] */;
  %161 = cast(%160, dtype="float32") /* ty=Tensor[(2, 15, 9), float32] */;
  %162 = reshape(%161, newshape=[2, 15, 9]) /* ty=Tensor[(2, 15, 9), float32] */;
  %163 = cast(%160, dtype="float64") /* ty=Tensor[(2, 15, 9), float64] */;
  %164 = logical_and(%155, %156) /* ty=Tensor[(7, 16, 6), bool] */;
  %165 = %157.0;
  %166 = @func_1564(%162) /* ty=Tensor[(2, 15, 9), int32] */;
  %167 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %168 = cosh(%163) /* ty=Tensor[(2, 15, 9), float64] */;
  (%164, %var_1594, %165, %166, %167, %168)
}

def @func_3500() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %172 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
    %169 = @func_2356() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %170 = %169.0;
    %171 = @func_2118() /* ty=Tensor[(1, 15, 9), float32] */;
    (%170, %171)
  };
  %172() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_1864() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %177 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
    %173 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %174 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
    %175 = %173.0;
    %176 = %174.0;
    (%175, %176)
  };
  %177() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_5136(%var_5133: Tensor[(13, 1, 4), int16], %var_5134: Tensor[(13, 7, 4), int16], %var_5135: Tensor[(140, 2), float64]) -> (Tensor[(13, 7, 4), float32], Tensor[(7, 4, 10), float64], Tensor[(140, 2), float64]) {
  %186 = fn (%var_5111: Tensor[(13, 1, 4), int16], %var_5112: Tensor[(13, 7, 4), int16], %var_5122: Tensor[(140, 2), float64]) -> (Tensor[(13, 7, 4), float32], Tensor[(7, 4, 10), float64], Tensor[(140, 2), float64]) {
    %178 = cast(%var_5111, dtype="int16") /* ty=Tensor[(13, 1, 4), int16] */;
    %179 = cast(%var_5112, dtype="int16") /* ty=Tensor[(13, 7, 4), int16] */;
    %180 = add(%178, %179) /* ty=Tensor[(13, 7, 4), int16] */;
    %181 = cast(%180, dtype="float32") /* ty=Tensor[(13, 7, 4), float32] */;
    %182 = cast(%var_5122, dtype="float64") /* ty=Tensor[(140, 2), float64] */;
    %183 = reshape(%182, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), float64] */;
    %184 = sqrt(%181) /* ty=Tensor[(13, 7, 4), float32] */;
    %185 = @func_978(%183) /* ty=Tensor[(7, 4, 10), float64] */;
    (%184, %185, %var_5122)
  };
  %186(%var_5133, %var_5134, %var_5135) /* ty=(Tensor[(13, 7, 4), float32], Tensor[(7, 4, 10), float64], Tensor[(140, 2), float64]) */
}

def @func_4384(%var_4382: Tensor[(1, 486), uint8]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 6, 9), uint64]) {
  @func_4381(%var_4382) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(9, 6, 9), uint64]) */
}

def @func_4046() -> (Tensor[(1, 15, 9), float32], Tensor[(14, 14, 3), bool], uint64) {
  @func_4044() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(14, 14, 3), bool], uint64) */
}

def @func_2053(%var_2051: Tensor[(7, 15, 9), float32]) -> (Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_2050(%var_2051) /* ty=(Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_2924() -> (Tensor[(?, 15, 9), float32],) {
  @func_2922() /* ty=(Tensor[(?, 15, 9), float32],) */
}

def @func_5168(%var_5149: Tensor[(9, 10, 13), float64]) -> (Tensor[(9, 10, 13), bool],) {
  %187 = cast(%var_5149, dtype="float64") /* ty=Tensor[(9, 10, 13), float64] */;
  %188 = sinh(%187) /* ty=Tensor[(9, 10, 13), float64] */;
  %189 = cast(%var_5149, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %190 = shape_of(%188, dtype="int32") /* ty=Tensor[(3), int32] */;
  %191 = cast(%188, dtype="bool") /* ty=Tensor[(9, 10, 13), bool] */;
  %192 = dyn.reshape(%189, %190, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %193 = not_equal(%191, %192) /* ty=Tensor[(9, 10, 13), bool] */;
  (%193,)
}

def @func_3430() -> Tensor[(1, 15, 9), float32] {
  %194 = fn () -> Tensor[(1, 15, 9), float32] {
    @func_2903() /* ty=Tensor[(1, 15, 9), float32] */
  };
  %194() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_3230() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_3228() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_4921() -> Tensor[(1, 15, 9), float32] {
  %195 = @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %195.0
}

def @func_2662() -> (Tensor[(1, 15, 9), float32],) {
  %196 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %197 = %196.1;
  (%197,)
}

def @func_1567(%var_1565: Tensor[(2, 15, 9), float32]) -> Tensor[(2, 15, 9), int32] {
  @func_1564(%var_1565) /* ty=Tensor[(2, 15, 9), int32] */
}

def @func_3453() -> (Tensor[(1, 15, 9), float32],) {
  %198 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %199 = %198.0;
  (%199,)
}

def @func_4690(%var_4687: Tensor[(16, 15, 9), float32], %var_4688: Tensor[(672), float64], %var_4689: Tensor[(90, 3), float32]) -> (Tensor[(16, 15, 9), bool], Tensor[(2, 15, 9), int32], Tensor[(672), float64], Tensor[(90, 3), float32], Tensor[(16, 15, 9), bool], Tensor[(13, 15, 9), uint16], Tensor[(16, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) {
  @func_4685(%var_4687, %var_4688, %var_4689) /* ty=(Tensor[(16, 15, 9), bool], Tensor[(2, 15, 9), int32], Tensor[(672), float64], Tensor[(90, 3), float32], Tensor[(16, 15, 9), bool], Tensor[(13, 15, 9), uint16], Tensor[(16, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */
}

def @func_3588() -> (Tensor[(13, 15, 9), float64],) {
  @func_3586() /* ty=(Tensor[(13, 15, 9), float64],) */
}

def @func_2952(%var_2951: Tensor[(8, 4, 10), float64]) -> Tensor[(8, 4, 10), float64] {
  %201 = fn (%var_2947: Tensor[(8, 4, 10), float64]) -> Tensor[(8, 4, 10), float64] {
    %200 = cast(%var_2947, dtype="float64") /* ty=Tensor[(8, 4, 10), float64] */;
    sin(%200) /* ty=Tensor[(8, 4, 10), float64] */
  };
  %201(%var_2951) /* ty=Tensor[(8, 4, 10), float64] */
}

def @func_4101() -> (Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) {
  %202 = @func_4044() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(14, 14, 3), bool], uint64) */;
  %203 = %202.2;
  %204 = @func_1706() /* ty=Tensor[(1, 15, 9), float32] */;
  %205 = cast(%203, dtype="bool") /* ty=bool */;
  %206 = cast(%204, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %207 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %208 = not_equal(%205, %206) /* ty=Tensor[(1, 15, 9), bool] */;
  %209 = %207.1;
  (%208, %209)
}

def @func_3678(%var_3677: Tensor[(15, 15, 9), float32]) -> (Tensor[(15, 15, 9), int64], Tensor[(15, 15, 9), uint32]) {
  %218 = fn (%var_3636: Tensor[(15, 15, 9), float32]) -> (Tensor[(15, 15, 9), int64], Tensor[(15, 15, 9), uint32]) {
    %210 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
    %211 = %210.1;
    %212 = cast(%211, dtype="int64") /* ty=Tensor[(1, 15, 9), int64] */;
    %213 = cast(%var_3636, dtype="int64") /* ty=Tensor[(15, 15, 9), int64] */;
    %214 = cast(%var_3636, dtype="uint32") /* ty=Tensor[(15, 15, 9), uint32] */;
    %215 = cast(%211, dtype="uint32") /* ty=Tensor[(1, 15, 9), uint32] */;
    %216 = bitwise_or(%212, %213) /* ty=Tensor[(15, 15, 9), int64] */;
    %217 = add(%214, %215) /* ty=Tensor[(15, 15, 9), uint32] */;
    (%216, %217)
  };
  %218(%var_3677) /* ty=(Tensor[(15, 15, 9), int64], Tensor[(15, 15, 9), uint32]) */
}

def @func_3007(%var_2978: Tensor[(14, 6, 11), float32], %var_2998: Tensor[(8, 84), float64]) -> (Tensor[(270), float32], Tensor[(8, 84), float64], Tensor[(270), float32], Tensor[(14, 6, 11), float32]) {
  %219 = cast(%var_2998, dtype="float64") /* ty=Tensor[(8, 84), float64] */;
  %220 = cast(%var_2998, dtype="float64") /* ty=Tensor[(8, 84), float64] */;
  %221 = cast(meta[relay.Constant][2] /* ty=Tensor[(270), float32] */, dtype="float32") /* ty=Tensor[(270), float32] */;
  %222 = reshape(%219, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %223 = reshape(%220, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %224 = reshape(%221, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %225 = @func_1652(%222, %223, %224) /* ty=(Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) */;
  %226 = cast(%var_2978, dtype="float32") /* ty=Tensor[(14, 6, 11), float32] */;
  %227 = acosh(%226) /* ty=Tensor[(14, 6, 11), float32] */;
  %228 = cast(%227, dtype="float32") /* ty=Tensor[(14, 6, 11), float32] */;
  %229 = %225.1;
  %230 = tan(%228) /* ty=Tensor[(14, 6, 11), float32] */;
  (%229, %var_2998, meta[relay.Constant][2] /* ty=Tensor[(270), float32] */, %230)
}

def @func_4435() -> (Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(945), float32]) {
  %231 = @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */;
  %232 = cast(meta[relay.Constant][3] /* ty=Tensor[(945), float32] */, dtype="float32") /* ty=Tensor[(945), float32] */;
  %233 = reshape(%232, newshape=[7, 15, 9]) /* ty=Tensor[(7, 15, 9), float32] */;
  %234 = @func_2050(%233) /* ty=(Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), float32], Tensor[(7, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %235 = %231.1;
  %236 = %234.3;
  (%235, %236, meta[relay.Constant][3] /* ty=Tensor[(945), float32] */)
}

def @func_5171(%var_5169: Tensor[(9, 10, 13), float64]) -> (Tensor[(9, 10, 13), bool],) {
  @func_5168(%var_5169) /* ty=(Tensor[(9, 10, 13), bool],) */
}

def @func_2321(%var_2319: Tensor[(4, 8, 7), uint32], %var_2320: Tensor[(4, 8, 7), uint32]) -> Tensor[(4, 8, 7), uint32] {
  @func_2317(%var_2319, %var_2320) /* ty=Tensor[(4, 8, 7), uint32] */
}

def @func_4103() -> (Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) {
  @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */
}

def @func_3771() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %241 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
    %237 = @func_3262() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %238 = @func_3071() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %239 = %237.1;
    %240 = %238.0;
    (%239, %240)
  };
  %241() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_125() -> Tensor[(1, 15, 9), float32] {
  %242 = fn () -> Tensor[(1, 15, 9), float32] {
    @func_100() /* ty=Tensor[(1, 15, 9), float32] */
  };
  %242() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_4447() -> Tensor[(1, 15, 9), float32] {
  @func_100() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_4407() -> Tensor[(1, 15, 9), float32] {
  %243 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %243.0
}

def @func_4729() -> Tensor[(1, 15, 9), float32] {
  %244 = @func_4308() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %244.1
}

def @func_4308() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %245 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %246 = %245.0;
  %247 = cast(%246, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %248 = asin(%247) /* ty=Tensor[(1, 15, 9), float32] */;
  %249 = @func_3429() /* ty=Tensor[(1, 15, 9), float32] */;
  (%248, %249)
}

def @func_823() -> (Tensor[(1, 15, 9), float32],) {
  %251 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %250 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
    (%250,)
  };
  %251() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_5029() -> (Tensor[(5, 15, 9), uint8],) {
  @func_5027() /* ty=(Tensor[(5, 15, 9), uint8],) */
}

def @func_586() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %252 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %253 = %252.0;
  %254 = cast(%253, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %255 = @func_396() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %256 = erf(%254) /* ty=Tensor[(1, 15, 9), float32] */;
  %257 = %255.0;
  (%256, %257)
}

def @func_588() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_4131() -> Tensor[(8, 15, 9), bool] {
  @func_4129() /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_1929(%var_1928: uint64) -> Tensor[(14, 14, 3), bool] {
  %266 = fn (%var_1893: uint64) -> Tensor[(14, 14, 3), bool] {
    %258 = cast(%var_1893, dtype="bool") /* ty=bool */;
    %259 = cast(meta[relay.Constant][4] /* ty=Tensor[(14, 14, 3), uint64] */, dtype="bool") /* ty=Tensor[(14, 14, 3), bool] */;
    %260 = equal(%258, %259) /* ty=Tensor[(14, 14, 3), bool] */;
    %261 = cast(%260, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
    %262 = cast(%var_1893, dtype="float32") /* ty=float32 */;
    %263 = floor_mod(%261, %262) /* ty=Tensor[(14, 14, 3), float32] */;
    %264 = cast(%var_1893, dtype="bool") /* ty=bool */;
    %265 = cast(%263, dtype="bool") /* ty=Tensor[(14, 14, 3), bool] */;
    less_equal(%264, %265) /* ty=Tensor[(14, 14, 3), bool] */
  };
  %266(%var_1928) /* ty=Tensor[(14, 14, 3), bool] */
}

def @func_1131(%var_1129: Tensor[(9, 6, 9), uint8], %var_1130: Tensor[(9, 6, 9), uint8]) -> (Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) {
  @func_1127(%var_1129, %var_1130) /* ty=(Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) */
}

def @func_2119() -> Tensor[(1, 15, 9), float32] {
  %267 = fn () -> Tensor[(1, 15, 9), float32] {
    @func_124() /* ty=Tensor[(1, 15, 9), float32] */
  };
  %267() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1197() -> (Tensor[(504), float64],) {
  %268 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %269 = %268.2;
  (%269,)
}

def @func_4731() -> Tensor[(1, 15, 9), float32] {
  @func_4729() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1564(%var_1559: Tensor[(2, 15, 9), float32]) -> Tensor[(2, 15, 9), int32] {
  %270 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %271 = %270.0;
  %272 = cast(%271, dtype="int32") /* ty=Tensor[(1, 15, 9), int32] */;
  %273 = cast(%var_1559, dtype="int32") /* ty=Tensor[(2, 15, 9), int32] */;
  minimum(%272, %273) /* ty=Tensor[(2, 15, 9), int32] */
}

def @func_3455() -> (Tensor[(1, 15, 9), float32],) {
  @func_3453() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_4864() -> Tensor[(1, 15, 9), float32] {
  %275 = fn () -> Tensor[(1, 15, 9), float32] {
    %274 = @func_1863() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %274.0
  };
  %275() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_2457(%var_2408: Tensor[(1, 1, 16), int32]) -> (Tensor[(1, 1, 16), int32], Tensor[(6, 7, 16), uint8]) {
  %276 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %277 = cast(%var_2408, dtype="int32") /* ty=Tensor[(1, 1, 16), int32] */;
  %278 = cast(%var_2408, dtype="uint8") /* ty=Tensor[(1, 1, 16), uint8] */;
  %279 = cast(meta[relay.Constant][5] /* ty=Tensor[(6, 7, 16), int32] */, dtype="uint8") /* ty=Tensor[(6, 7, 16), uint8] */;
  %280 = subtract(%276, %277) /* ty=Tensor[(1, 1, 16), int32] */;
  %281 = right_shift(%278, %279) /* ty=Tensor[(6, 7, 16), uint8] */;
  (%280, %281)
}

def @func_3011(%var_3009: Tensor[(14, 6, 11), float32], %var_3010: Tensor[(8, 84), float64]) -> (Tensor[(270), float32], Tensor[(8, 84), float64], Tensor[(270), float32], Tensor[(14, 6, 11), float32]) {
  @func_3007(%var_3009, %var_3010) /* ty=(Tensor[(270), float32], Tensor[(8, 84), float64], Tensor[(270), float32], Tensor[(14, 6, 11), float32]) */
}

def @func_5482() -> (Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float32], Tensor[(1620), float32]) {
  @func_5480() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float32], Tensor[(1620), float32]) */
}

def @func_3263() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %286 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
    %282 = @func_3071() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %283 = @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %284 = %282.0;
    %285 = %283.0;
    (%284, %285)
  };
  %286() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_192(%var_191: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) {
  %295 = fn (%var_188: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) {
    %287 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %288 = %287.0;
    %289 = cast(%288, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
    %290 = cast(%var_188, dtype="float32") /* ty=Tensor[(81), float32] */;
    %291 = reshape(%290, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
    %292 = @func_69(%291) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
    %293 = log10(%289) /* ty=Tensor[(1, 15, 9), float32] */;
    %294 = %292.2;
    (%293, %294, %var_188)
  };
  %295(%var_191) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) */
}

def @func_4705() -> (Tensor[(1, 15, 9), float32],) {
  %296 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
  (%296,)
}

def @func_415() -> (Tensor[(1, 15, 9), float32],) {
  %298 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %297 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
    (%297,)
  };
  %298() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_665(%var_631: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) {
  %299 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %300 = %299.0;
  %301 = cast(%300, dtype="uint64") /* ty=Tensor[(1, 15, 9), uint64] */;
  %302 = cast(%var_631, dtype="uint64") /* ty=Tensor[(12, 15, 9), uint64] */;
  %303 = cast(%300, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %304 = cast(%var_631, dtype="bool") /* ty=Tensor[(12, 15, 9), bool] */;
  %305 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %306 = %305.0;
  %307 = cast(%306, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %308 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %309 = cast(%300, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %310 = dyn.reshape(%307, %308, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %311 = left_shift(%301, %302) /* ty=Tensor[(12, 15, 9), uint64] */;
  %312 = less_equal(%303, %304) /* ty=Tensor[(12, 15, 9), bool] */;
  %313 = divide(%309, %310) /* ty=Tensor[(?, 15, 9), float32] */;
  (%311, %312, %313)
}

def @func_5345(%var_5326: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), uint16], Tensor[(1, 15, 9), float32]) {
  %314 = @func_2118() /* ty=Tensor[(1, 15, 9), float32] */;
  %315 = cast(%314, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %316 = cast(%var_5326, dtype="uint16") /* ty=Tensor[(9, 15, 9), uint16] */;
  %317 = right_shift(%315, %316) /* ty=Tensor[(9, 15, 9), uint16] */;
  %318 = @func_4407() /* ty=Tensor[(1, 15, 9), float32] */;
  (%317, %318)
}

def @func_5428(%var_5427: Tensor[(504), float64]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float32]) {
  %333 = fn (%var_5418: Tensor[(504), float64]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float32]) {
    %319 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
    %320 = reshape(%319, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %321 = @func_2190(%320) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) */;
    %322 = cast(meta[relay.Constant][6] /* ty=Tensor[(9, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
    %323 = reshape(%322, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %324 = @func_3935(%323) /* ty=(Tensor[(504), float64], Tensor[(1, 15, 9), float32], Tensor[(7, 4, 10), float64], Tensor[(280), float64], Tensor[(81), uint16]) */;
    %325 = %324.0;
    %326 = cast(%var_5418, dtype="float32") /* ty=Tensor[(504), float32] */;
    %327 = shape_of(%325, dtype="int32") /* ty=Tensor[(1), int32] */;
    %328 = cast(%325, dtype="float32") /* ty=Tensor[(504), float32] */;
    %329 = dyn.reshape(%326, %327, newshape=[]) /* ty=Tensor[(?), float32] */;
    %330 = @func_4921() /* ty=Tensor[(1, 15, 9), float32] */;
    %331 = %321.0;
    %332 = floor_divide(%328, %329) /* ty=Tensor[(504), float32] */;
    (%330, meta[relay.Constant][6] /* ty=Tensor[(9, 9), float32] */, %331, %332)
  };
  %333(%var_5427) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(9, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float32]) */
}

def @func_475(%var_444: Tensor[(9, 8, 7), float64]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 8, 7), float64]) {
  %334 = cast(meta[relay.Constant][7] /* ty=Tensor[(9, 8, 7), float64] */, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %335 = log10(%334) /* ty=Tensor[(9, 8, 7), float64] */;
  %336 = cast(%var_444, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %337 = shape_of(%335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %338 = cast(%335, dtype="float32") /* ty=Tensor[(9, 8, 7), float32] */;
  %339 = dyn.reshape(%336, %337, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %340 = divide(%338, %339) /* ty=Tensor[(9, 8, 7), float32] */;
  %341 = cast(%340, dtype="float64") /* ty=Tensor[(9, 8, 7), float64] */;
  %342 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %343 = atanh(%341) /* ty=Tensor[(9, 8, 7), float64] */;
  (%342, %343)
}

def @func_2664() -> (Tensor[(1, 15, 9), float32],) {
  @func_2662() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_911() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) {
  %351 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) {
    %344 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %345 = cast(meta[relay.Constant][8] /* ty=Tensor[(504), float64] */, dtype="float64") /* ty=Tensor[(504), float64] */;
    %346 = reshape(%345, newshape=[9, 8, 7]) /* ty=Tensor[(9, 8, 7), float64] */;
    %347 = @func_475(%346) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(9, 8, 7), float64]) */;
    %348 = %344.0;
    %349 = %347.0;
    %350 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
    (%348, %349, meta[relay.Constant][8] /* ty=Tensor[(504), float64] */, %350)
  };
  %351() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */
}

def @func_2513() -> (Tensor[(1, 15, 9), float32],) {
  @func_2511() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_3228() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %352 = @func_1863() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %353 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %354 = %352.0;
  %355 = %353.0;
  (%354, %355)
}

def @func_140() -> (Tensor[(1, 15, 9), float32],) {
  %357 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %356 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
    (%356,)
  };
  %357() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_3852(%var_3813: Tensor[(8, 15, 9), float32]) -> (Tensor[(8, 15, 9), int64], Tensor[(8, 15, 9), float64]) {
  %358 = @func_1958() /* ty=Tensor[(1, 15, 9), float32] */;
  %359 = cast(%358, dtype="int64") /* ty=Tensor[(1, 15, 9), int64] */;
  %360 = cast(%var_3813, dtype="int64") /* ty=Tensor[(8, 15, 9), int64] */;
  %361 = cast(%358, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %362 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(8, 15, 9), uint16] */;
  %363 = right_shift(%361, %362) /* ty=Tensor[(8, 15, 9), uint16] */;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %365 = exp(%364) /* ty=Tensor[(8, 15, 9), float64] */;
  %366 = cast(%365, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
  %367 = multiply(%359, %360) /* ty=Tensor[(8, 15, 9), int64] */;
  %368 = atanh(%366) /* ty=Tensor[(8, 15, 9), float64] */;
  (%367, %368)
}

def @func_3938(%var_3936: Tensor[(81), float32]) -> (Tensor[(504), float64], Tensor[(1, 15, 9), float32], Tensor[(7, 4, 10), float64], Tensor[(280), float64], Tensor[(81), uint16]) {
  @func_3935(%var_3936) /* ty=(Tensor[(504), float64], Tensor[(1, 15, 9), float32], Tensor[(7, 4, 10), float64], Tensor[(280), float64], Tensor[(81), uint16]) */
}

def @func_2887(%var_2880: Tensor[(2, 14, 10), float32]) -> (Tensor[(2, 14, 10), float32],) {
  %369 = cast(%var_2880, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %370 = asin(%369) /* ty=Tensor[(2, 14, 10), float32] */;
  (%370,)
}

def @func_2258() -> Tensor[(504), float64] {
  %371 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %371.0
}

def @func_5078() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float64]) {
  %379 = fn () -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float64]) {
    %372 = cast(meta[relay.Constant][9] /* ty=Tensor[(81), float32] */, dtype="float32") /* ty=Tensor[(81), float32] */;
    %373 = reshape(%372, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %374 = @func_2190(%373) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) */;
    %375 = @func_4284() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float64], Tensor[(1, 15, 9), float32]) */;
    %376 = @func_3429() /* ty=Tensor[(1, 15, 9), float32] */;
    %377 = %374.2;
    %378 = %375.1;
    (%376, %377, meta[relay.Constant][9] /* ty=Tensor[(81), float32] */, %378)
  };
  %379() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float64]) */
}

def @func_2317(%var_2306: Tensor[(4, 8, 7), uint32], %var_2307: Tensor[(4, 8, 7), uint32]) -> Tensor[(4, 8, 7), uint32] {
  %380 = cast(%var_2307, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
  %381 = shape_of(%var_2306, dtype="int32") /* ty=Tensor[(3), int32] */;
  %382 = cast(%var_2306, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  subtract(%382, %383) /* ty=Tensor[(4, 8, 7), uint32] */
}

def @func_2511() -> (Tensor[(1, 15, 9), float32],) {
  %384 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %385 = %384.0;
  (%385,)
}

def @func_690() -> Tensor[(1, 15, 9), float32] {
  %386 = fn () -> Tensor[(1, 15, 9), float32] {
    @func_100() /* ty=Tensor[(1, 15, 9), float32] */
  };
  %386() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1958() -> Tensor[(1, 15, 9), float32] {
  %387 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %387.3
}

def @func_1199() -> (Tensor[(504), float64],) {
  @func_1197() /* ty=(Tensor[(504), float64],) */
}

def @func_3072() -> (Tensor[(1, 15, 9), float32],) {
  %390 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %388 = @func_2662() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %389 = %388.0;
    (%389,)
  };
  %390() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_4381(%var_4367: Tensor[(1, 486), uint8]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 6, 9), uint64]) {
  %391 = @func_3499() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %392 = cast(%var_4367, dtype="uint8") /* ty=Tensor[(1, 486), uint8] */;
  %393 = cast(%var_4367, dtype="uint8") /* ty=Tensor[(1, 486), uint8] */;
  %394 = reshape(%392, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
  %395 = reshape(%393, newshape=[9, 6, 9]) /* ty=Tensor[(9, 6, 9), uint8] */;
  %396 = @func_1127(%394, %395) /* ty=(Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) */;
  %397 = %396.0;
  %398 = cast(%var_4367, dtype="uint64") /* ty=Tensor[(1, 486), uint64] */;
  %399 = shape_of(%397, dtype="int32") /* ty=Tensor[(3), int32] */;
  %400 = cast(%397, dtype="uint64") /* ty=Tensor[(9, 6, 9), uint64] */;
  %401 = dyn.reshape(%398, %399, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %402 = %391.1;
  %403 = bitwise_and(%400, %401) /* ty=Tensor[(9, 6, 9), uint64] */;
  (%402, %403)
}

def @func_1008() -> Tensor[(1, 15, 9), float32] {
  %404 = fn () -> Tensor[(1, 15, 9), float32] {
    @func_685() /* ty=Tensor[(1, 15, 9), float32] */
  };
  %404() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_2905() -> Tensor[(1, 15, 9), float32] {
  @func_2903() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1657(%var_1654: Tensor[(7, 16, 6), float64], %var_1655: Tensor[(7, 16, 6), float64], %var_1656: Tensor[(270), float32]) -> (Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) {
  @func_1652(%var_1654, %var_1655, %var_1656) /* ty=(Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) */
}

def @func_4218(%var_4217: Tensor[(3, 15, 9), float32]) -> (Tensor[(3, 15, 9), bool],) {
  %410 = fn (%var_4207: Tensor[(3, 15, 9), float32]) -> (Tensor[(3, 15, 9), bool],) {
    %405 = @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */;
    %406 = %405.1;
    %407 = cast(%406, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
    %408 = cast(%var_4207, dtype="bool") /* ty=Tensor[(3, 15, 9), bool] */;
    %409 = less(%407, %408) /* ty=Tensor[(3, 15, 9), bool] */;
    (%409,)
  };
  %410(%var_4217) /* ty=(Tensor[(3, 15, 9), bool],) */
}

def @func_4707() -> (Tensor[(1, 15, 9), float32],) {
  @func_4705() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_100() -> Tensor[(1, 15, 9), float32] {
  %411 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 15, 9), float32] */, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  rsqrt(%411) /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_5290() -> (Tensor[(8, 15, 9), int32],) {
  @func_5288() /* ty=(Tensor[(8, 15, 9), int32],) */
}

def @func_686() -> Tensor[(1, 15, 9), float32] {
  %413 = fn () -> Tensor[(1, 15, 9), float32] {
    %412 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %412.0
  };
  %413() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_5288() -> (Tensor[(8, 15, 9), int32],) {
  %414 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %415 = cast(%414, dtype="int32") /* ty=Tensor[(1, 15, 9), int32] */;
  %416 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 15, 9), float32] */, dtype="int32") /* ty=Tensor[(8, 15, 9), int32] */;
  %417 = left_shift(%415, %416) /* ty=Tensor[(8, 15, 9), int32] */;
  (%417,)
}

def @func_5027() -> (Tensor[(5, 15, 9), uint8],) {
  %418 = @func_1958() /* ty=Tensor[(1, 15, 9), float32] */;
  %419 = cast(%418, dtype="uint8") /* ty=Tensor[(1, 15, 9), uint8] */;
  %420 = cast(meta[relay.Constant][12] /* ty=Tensor[(5, 15, 9), float32] */, dtype="uint8") /* ty=Tensor[(5, 15, 9), uint8] */;
  %421 = add(%419, %420) /* ty=Tensor[(5, 15, 9), uint8] */;
  (%421,)
}

def @func_1960() -> Tensor[(1, 15, 9), float32] {
  @func_1958() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_3586() -> (Tensor[(13, 15, 9), float64],) {
  %422 = @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */;
  %423 = cast(%422, dtype="float64") /* ty=Tensor[(13, 15, 9), float64] */;
  %424 = atanh(%423) /* ty=Tensor[(13, 15, 9), float64] */;
  (%424,)
}

def @func_4538(%var_4536: Tensor[(8, 15, 9), float32], %var_4537: Tensor[(224), uint32]) -> (Tensor[(13, 15, 9), uint16], Tensor[(8, 15, 9), bool], Tensor[(?, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(4, 8, 7), uint32], Tensor[(224), uint32]) {
  %440 = fn (%var_4493: Tensor[(8, 15, 9), float32], %var_4514: Tensor[(224), uint32]) -> (Tensor[(13, 15, 9), uint16], Tensor[(8, 15, 9), bool], Tensor[(?, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(4, 8, 7), uint32], Tensor[(224), uint32]) {
    %425 = @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %426 = %425.0;
    %427 = cast(%426, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
    %428 = cast(%var_4493, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
    %429 = @func_2922() /* ty=(Tensor[(?, 15, 9), float32],) */;
    %430 = cast(%var_4493, dtype="float64") /* ty=Tensor[(8, 15, 9), float64] */;
    %431 = cast(%var_4514, dtype="uint32") /* ty=Tensor[(224), uint32] */;
    %432 = cast(%var_4514, dtype="uint32") /* ty=Tensor[(224), uint32] */;
    %433 = reshape(%431, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint32] */;
    %434 = reshape(%432, newshape=[4, 8, 7]) /* ty=Tensor[(4, 8, 7), uint32] */;
    %435 = @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */;
    %436 = less(%427, %428) /* ty=Tensor[(8, 15, 9), bool] */;
    %437 = %429.0;
    %438 = sinh(%430) /* ty=Tensor[(8, 15, 9), float64] */;
    %439 = @func_2317(%433, %434) /* ty=Tensor[(4, 8, 7), uint32] */;
    (%435, %436, %437, %438, %439, %var_4514)
  };
  %440(%var_4536, %var_4537) /* ty=(Tensor[(13, 15, 9), uint16], Tensor[(8, 15, 9), bool], Tensor[(?, 15, 9), float32], Tensor[(8, 15, 9), float64], Tensor[(4, 8, 7), uint32], Tensor[(224), uint32]) */
}

def @func_2903() -> Tensor[(1, 15, 9), float32] {
  %441 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %441.0
}

def @func_3354() -> Tensor[(13, 15, 9), uint16] {
  %442 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %443 = %442.0;
  %444 = cast(%443, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
  %445 = cast(meta[relay.Constant][13] /* ty=Tensor[(13, 15, 9), float32] */, dtype="uint16") /* ty=Tensor[(13, 15, 9), uint16] */;
  bitwise_or(%444, %445) /* ty=Tensor[(13, 15, 9), uint16] */
}

def @func_2506() -> (Tensor[(504), float64], Tensor[(504), float64]) {
  %449 = fn () -> (Tensor[(504), float64], Tensor[(504), float64]) {
    %446 = @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */;
    %447 = @func_2258() /* ty=Tensor[(504), float64] */;
    %448 = %446.2;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(504), float64], Tensor[(504), float64]) */
}

def @func_3935(%var_3899: Tensor[(81), float32]) -> (Tensor[(504), float64], Tensor[(1, 15, 9), float32], Tensor[(7, 4, 10), float64], Tensor[(280), float64], Tensor[(81), uint16]) {
  %450 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %451 = cast(%var_3899, dtype="float32") /* ty=Tensor[(81), float32] */;
  %452 = reshape(%451, newshape=[9, 9]) /* ty=Tensor[(9, 9), float32] */;
  %453 = @func_530(%452) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(9, 9), float32]) */;
  %454 = cast(meta[relay.Constant][14] /* ty=Tensor[(280), float64] */, dtype="float64") /* ty=Tensor[(280), float64] */;
  %455 = reshape(%454, newshape=[7, 4, 10]) /* ty=Tensor[(7, 4, 10), float64] */;
  %456 = cast(%var_3899, dtype="float64") /* ty=Tensor[(81), float64] */;
  %457 = cos(%456) /* ty=Tensor[(81), float64] */;
  %458 = cast(%var_3899, dtype="uint16") /* ty=Tensor[(81), uint16] */;
  %459 = shape_of(%457, dtype="int32") /* ty=Tensor[(1), int32] */;
  %460 = cast(%457, dtype="uint16") /* ty=Tensor[(81), uint16] */;
  %461 = dyn.reshape(%458, %459, newshape=[]) /* ty=Tensor[(?), uint16] */;
  %462 = %450.0;
  %463 = %453.0;
  %464 = @func_978(%455) /* ty=Tensor[(7, 4, 10), float64] */;
  %465 = add(%460, %461) /* ty=Tensor[(81), uint16] */;
  (%462, %463, %464, meta[relay.Constant][14] /* ty=Tensor[(280), float64] */, %465)
}

def @func_533(%var_531: Tensor[(9, 9), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(9, 9), float32]) {
  @func_530(%var_531) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(9, 9), float32]) */
}

def @func_5348(%var_5346: Tensor[(9, 15, 9), float32]) -> (Tensor[(9, 15, 9), uint16], Tensor[(1, 15, 9), float32]) {
  @func_5345(%var_5346) /* ty=(Tensor[(9, 15, 9), uint16], Tensor[(1, 15, 9), float32]) */
}

def @func_3855(%var_3853: Tensor[(8, 15, 9), float32]) -> (Tensor[(8, 15, 9), int64], Tensor[(8, 15, 9), float64]) {
  @func_3852(%var_3853) /* ty=(Tensor[(8, 15, 9), int64], Tensor[(8, 15, 9), float64]) */
}

def @func_3356() -> Tensor[(13, 15, 9), uint16] {
  @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */
}

def @func_1357() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) {
  @func_1355() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) */
}

def @func_4978(%var_4976: Tensor[(1, 280), float32]) -> (Tensor[(1, 280), float32], Tensor[(1, 15, 9), float32], Tensor[(2, 14, 10), float32], Tensor[(?, 15, 9), bool]) {
  @func_4975(%var_4976) /* ty=(Tensor[(1, 280), float32], Tensor[(1, 15, 9), float32], Tensor[(2, 14, 10), float32], Tensor[(?, 15, 9), bool]) */
}

def @func_530(%var_528: Tensor[(9, 9), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(9, 9), float32]) {
  %466 = cast(%var_528, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
  %467 = reshape(%466, newshape=[3, 3, 9]) /* ty=Tensor[(3, 3, 9), float32] */;
  %468 = @func_69(%467) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */;
  %469 = @func_100() /* ty=Tensor[(1, 15, 9), float32] */;
  %470 = %468.1;
  (%469, %470, %var_528)
}

def @func_2190(%var_2167: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) {
  %471 = @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %472 = @func_910() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64], Tensor[(1, 15, 9), float32]) */;
  %473 = %472.1;
  %474 = cast(%473, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %475 = acosh(%474) /* ty=Tensor[(1, 15, 9), float64] */;
  %476 = cast(%475, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %477 = cos(%476) /* ty=Tensor[(1, 15, 9), float64] */;
  %478 = cast(%473, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %479 = shape_of(%477, dtype="int32") /* ty=Tensor[(3), int32] */;
  %480 = cast(%477, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %481 = dyn.reshape(%478, %479, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %482 = cast(%var_2167, dtype="float32") /* ty=Tensor[(81), float32] */;
  %483 = reshape(%482, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %484 = @func_352(%483) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(3, 3, 9), bool], Tensor[(81), float32], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %485 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %486 = %471.1;
  %487 = floor_divide(%480, %481) /* ty=Tensor[(?, 15, 9), float64] */;
  %488 = %484.0;
  %489 = %485.0;
  (%486, %487, %488, %var_2167, %489)
}

def @func_2460(%var_2458: Tensor[(1, 1, 16), int32]) -> (Tensor[(1, 1, 16), int32], Tensor[(6, 7, 16), uint8]) {
  @func_2457(%var_2458) /* ty=(Tensor[(1, 1, 16), int32], Tensor[(6, 7, 16), uint8]) */
}

def @func_4409() -> Tensor[(1, 15, 9), float32] {
  @func_4407() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_1355() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) {
  %490 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %491 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %492 = %490.0;
  %493 = @func_685() /* ty=Tensor[(1, 15, 9), float32] */;
  %494 = %491.0;
  (%492, %493, %494)
}

def @func_668(%var_666: Tensor[(12, 15, 9), float32]) -> (Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) {
  @func_665(%var_666) /* ty=(Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) */
}

def @func_4563(%var_4562: Tensor[(6, 5, 8), int16]) -> (Tensor[(6, 5, 8), int16], Tensor[(?, 15, 9), uint8], Tensor[(1215), float32], Tensor[(81, 1), float32]) {
  %506 = fn (%var_4552: Tensor[(6, 5, 8), int16]) -> (Tensor[(6, 5, 8), int16], Tensor[(?, 15, 9), uint8], Tensor[(1215), float32], Tensor[(81, 1), float32]) {
    %495 = cast(%var_4552, dtype="int16") /* ty=Tensor[(6, 5, 8), int16] */;
    %496 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(6, 5, 8), int16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %497 = cast(meta[relay.Constant][15] /* ty=Tensor[(6, 5, 8), int16] */, dtype="int16") /* ty=Tensor[(6, 5, 8), int16] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %499 = cast(meta[relay.Constant][16] /* ty=Tensor[(1215), float32] */, dtype="float32") /* ty=Tensor[(1215), float32] */;
    %500 = cast(meta[relay.Constant][17] /* ty=Tensor[(81, 1), float32] */, dtype="float32") /* ty=Tensor[(81, 1), float32] */;
    %501 = reshape(%499, newshape=[9, 15, 9]) /* ty=Tensor[(9, 15, 9), float32] */;
    %502 = reshape(%500, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %503 = @func_1314(%501, %502) /* ty=(Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) */;
    %504 = bitwise_or(%497, %498) /* ty=Tensor[(6, 5, 8), int16] */;
    %505 = %503.5;
    (%504, %505, meta[relay.Constant][16] /* ty=Tensor[(1215), float32] */, meta[relay.Constant][17] /* ty=Tensor[(81, 1), float32] */)
  };
  %506(%var_4562) /* ty=(Tensor[(6, 5, 8), int16], Tensor[(?, 15, 9), uint8], Tensor[(1215), float32], Tensor[(81, 1), float32]) */
}

def @func_5480() -> (Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float32], Tensor[(1620), float32]) {
  %507 = @func_4101() /* ty=(Tensor[(1, 15, 9), bool], Tensor[(1, 15, 9), float32]) */;
  %508 = cast(meta[relay.Constant][18] /* ty=Tensor[(1620), float32] */, dtype="float32") /* ty=Tensor[(1620), float32] */;
  %509 = reshape(%508, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
  %510 = @func_665(%509) /* ty=(Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) */;
  %511 = %507.0;
  %512 = @func_4921() /* ty=Tensor[(1, 15, 9), float32] */;
  %513 = %510.2;
  (%511, %512, %513, meta[relay.Constant][18] /* ty=Tensor[(1620), float32] */)
}

def @main() -> Tensor[(?, 15, 9), float64] {
  %514 = @func_1007() /* ty=Tensor[(1, 15, 9), float32] */;
  %515 = @func_2358() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %516 = %515.0;
  %517 = cast(%516, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %518 = shape_of(%514, dtype="int32") /* ty=Tensor[(3), int32] */;
  %519 = cast(%514, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %520 = dyn.reshape(%517, %518, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  power(%519, %520) /* ty=Tensor[(?, 15, 9), float64] */
}

def @func_4801() -> (Tensor[(4, 15, 9), uint32],) {
  %526 = fn () -> (Tensor[(4, 15, 9), uint32],) {
    %521 = @func_3770() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %522 = %521.0;
    %523 = cast(%522, dtype="uint32") /* ty=Tensor[(1, 15, 9), uint32] */;
    %524 = cast(meta[relay.Constant][19] /* ty=Tensor[(4, 15, 9), float32] */, dtype="uint32") /* ty=Tensor[(4, 15, 9), uint32] */;
    %525 = logical_xor(%523, %524) /* ty=Tensor[(4, 15, 9), uint32] */;
    (%525,)
  };
  %526() /* ty=(Tensor[(4, 15, 9), uint32],) */
}

def @func_4044() -> (Tensor[(1, 15, 9), float32], Tensor[(14, 14, 3), bool], uint64) {
  %527 = @func_1891() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %528 = cast(meta[relay.Constant][20] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %529 = reshape(%528, newshape=[]) /* ty=uint64 */;
  %530 = %527.0;
  %531 = @func_1927(%529) /* ty=Tensor[(14, 14, 3), bool] */;
  (%530, %531, meta[relay.Constant][20] /* ty=uint64 */)
}

def @func_2922() -> (Tensor[(?, 15, 9), float32],) {
  %532 = @func_1764() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %533 = %532.1;
  %534 = cast(%533, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %535 = atanh(%534) /* ty=Tensor[(1, 15, 9), float32] */;
  %536 = cast(%533, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %537 = shape_of(%535, dtype="int32") /* ty=Tensor[(3), int32] */;
  %538 = cast(%535, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %539 = dyn.reshape(%536, %537, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %540 = maximum(%538, %539) /* ty=Tensor[(?, 15, 9), float32] */;
  (%540,)
}

def @func_397() -> (Tensor[(1, 15, 9), float32],) {
  %543 = fn () -> (Tensor[(1, 15, 9), float32],) {
    %541 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %542 = %541.0;
    (%542,)
  };
  %543() /* ty=(Tensor[(1, 15, 9), float32],) */
}

def @func_2260() -> Tensor[(504), float64] {
  @func_2258() /* ty=Tensor[(504), float64] */
}

def @func_71(%var_70: Tensor[(3, 3, 9), float32]) -> (Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) {
  %553 = fn (%var_47: Tensor[(3, 3, 9), float32]) -> (Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) {
    %544 = cast(%var_47, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
    %545 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(3, 3, 9), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 3, 9), float32] */, dtype="bool") /* ty=Tensor[(3, 3, 9), bool] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %548 = cast(%var_47, dtype="float64") /* ty=Tensor[(3, 3, 9), float64] */;
    %549 = cast(%var_47, dtype="float64") /* ty=Tensor[(3, 3, 9), float64] */;
    %550 = less(%546, %547) /* ty=Tensor[(3, 3, 9), bool] */;
    %551 = acos(%548) /* ty=Tensor[(3, 3, 9), float64] */;
    %552 = sqrt(%549) /* ty=Tensor[(3, 3, 9), float64] */;
    (%550, %551, %552)
  };
  %553(%var_70) /* ty=(Tensor[(3, 3, 9), bool], Tensor[(3, 3, 9), float64], Tensor[(3, 3, 9), float64]) */
}

def @func_4129() -> Tensor[(8, 15, 9), bool] {
  %554 = @func_2922() /* ty=(Tensor[(?, 15, 9), float32],) */;
  %555 = %554.0;
  %556 = cast(%555, dtype="bool") /* ty=Tensor[(?, 15, 9), bool] */;
  %557 = cast(meta[relay.Constant][22] /* ty=Tensor[(8, 15, 9), float32] */, dtype="bool") /* ty=Tensor[(8, 15, 9), bool] */;
  equal(%556, %557) /* ty=Tensor[(8, 15, 9), bool] */
}

def @func_1162(%var_1160: Tensor[(1620), float32], %var_1161: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(12, 15, 9), uint64], Tensor[(1620), float32], Tensor[(81), uint8]) {
  %573 = fn (%var_1142: Tensor[(1620), float32], %var_1147: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(12, 15, 9), uint64], Tensor[(1620), float32], Tensor[(81), uint8]) {
    %558 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %559 = cast(%var_1142, dtype="float32") /* ty=Tensor[(1620), float32] */;
    %560 = reshape(%559, newshape=[12, 15, 9]) /* ty=Tensor[(12, 15, 9), float32] */;
    %561 = @func_665(%560) /* ty=(Tensor[(12, 15, 9), uint64], Tensor[(12, 15, 9), bool], Tensor[(?, 15, 9), float32]) */;
    %562 = cast(%var_1147, dtype="float32") /* ty=Tensor[(81), float32] */;
    %563 = reshape(%562, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %564 = @func_190(%563) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) */;
    %565 = %564.1;
    %566 = cast(%565, dtype="uint8") /* ty=Tensor[(3, 3, 9), uint8] */;
    %567 = shape_of(%var_1147, dtype="int32") /* ty=Tensor[(1), int32] */;
    %568 = cast(%var_1147, dtype="uint8") /* ty=Tensor[(81), uint8] */;
    %569 = dyn.reshape(%566, %567, newshape=[]) /* ty=Tensor[(?), uint8] */;
    %570 = %558.0;
    %571 = %561.0;
    %572 = logical_xor(%568, %569) /* ty=Tensor[(81), uint8] */;
    (%570, %571, %var_1142, %572)
  };
  %573(%var_1160, %var_1161) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(12, 15, 9), uint64], Tensor[(1620), float32], Tensor[(81), uint8]) */
}

def @func_2605(%var_2604: Tensor[(27, 3), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1620), float32], Tensor[(90, 18), float32], Tensor[(27, 3), float32]) {
  %582 = fn (%var_2599: Tensor[(27, 3), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1620), float32], Tensor[(90, 18), float32], Tensor[(27, 3), float32]) {
    %574 = @func_2356() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
    %575 = cast(meta[relay.Constant][23] /* ty=Tensor[(90, 18), float32] */, dtype="float32") /* ty=Tensor[(90, 18), float32] */;
    %576 = cast(%var_2599, dtype="float32") /* ty=Tensor[(27, 3), float32] */;
    %577 = reshape(%575, newshape=[1620]) /* ty=Tensor[(1620), float32] */;
    %578 = reshape(%576, newshape=[81]) /* ty=Tensor[(81), float32] */;
    %579 = @func_1159(%577, %578) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(12, 15, 9), uint64], Tensor[(1620), float32], Tensor[(81), uint8]) */;
    %580 = %574.0;
    %581 = %579.2;
    (%580, %581, meta[relay.Constant][23] /* ty=Tensor[(90, 18), float32] */, %var_2599)
  };
  %582(%var_2604) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1620), float32], Tensor[(90, 18), float32], Tensor[(27, 3), float32]) */
}

def @func_1314(%var_1227: Tensor[(9, 15, 9), float32], %var_1248: Tensor[(81), float32]) -> (Tensor[(9, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(9, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), uint8]) {
  %583 = @func_689() /* ty=Tensor[(1, 15, 9), float32] */;
  %584 = cast(%583, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %585 = cast(%var_1227, dtype="bool") /* ty=Tensor[(9, 15, 9), bool] */;
  %586 = less_equal(%584, %585) /* ty=Tensor[(9, 15, 9), bool] */;
  %587 = cast(%var_1227, dtype="int32") /* ty=Tensor[(9, 15, 9), int32] */;
  %588 = shape_of(%586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(%586, dtype="int32") /* ty=Tensor[(9, 15, 9), int32] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %591 = cast(%var_1248, dtype="float32") /* ty=Tensor[(81), float32] */;
  %592 = reshape(%591, newshape=[81]) /* ty=Tensor[(81), float32] */;
  %593 = @func_190(%592) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(3, 3, 9), float64], Tensor[(81), float32]) */;
  %594 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %595 = %594.0;
  %596 = cast(%595, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %597 = sqrt(%596) /* ty=Tensor[(1, 15, 9), float32] */;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(1, 15, 9), float32] */;
  %599 = cast(%586, dtype="float32") /* ty=Tensor[(9, 15, 9), float32] */;
  %600 = @func_414() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %601 = cast(%595, dtype="uint8") /* ty=Tensor[(1, 15, 9), uint8] */;
  %602 = shape_of(%597, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%597, dtype="uint8") /* ty=Tensor[(1, 15, 9), uint8] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %605 = bitwise_xor(%589, %590) /* ty=Tensor[(9, 15, 9), int32] */;
  %606 = %593.0;
  %607 = mod(%598, %599) /* ty=Tensor[(9, 15, 9), float32] */;
  %608 = %600.0;
  %609 = logical_xor(%603, %604) /* ty=Tensor[(?, 15, 9), uint8] */;
  (%605, %606, %var_1248, %607, %608, %609)
}

def @func_2890(%var_2888: Tensor[(2, 14, 10), float32]) -> (Tensor[(2, 14, 10), float32],) {
  @func_2887(%var_2888) /* ty=(Tensor[(2, 14, 10), float32],) */
}

def @func_102() -> Tensor[(1, 15, 9), float32] {
  @func_100() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_4449() -> Tensor[(1, 15, 9), float32] {
  @func_4447() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_478(%var_476: Tensor[(9, 8, 7), float64]) -> (Tensor[(1, 15, 9), float32], Tensor[(9, 8, 7), float64]) {
  @func_475(%var_476) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(9, 8, 7), float64]) */
}

def @func_2358() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_2356() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_355(%var_353: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(3, 3, 9), bool], Tensor[(81), float32], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  @func_352(%var_353) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(3, 3, 9), bool], Tensor[(81), float32], Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_4685(%var_4608: Tensor[(16, 15, 9), float32], %var_4620: Tensor[(672), float64], %var_4621: Tensor[(90, 3), float32]) -> (Tensor[(16, 15, 9), bool], Tensor[(2, 15, 9), int32], Tensor[(672), float64], Tensor[(90, 3), float32], Tensor[(16, 15, 9), bool], Tensor[(13, 15, 9), uint16], Tensor[(16, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(504), float64]) {
  %610 = @func_586() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %611 = %610.1;
  %612 = cast(%611, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %613 = cast(%var_4608, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %614 = cast(%var_4620, dtype="float64") /* ty=Tensor[(672), float64] */;
  %615 = cast(%var_4620, dtype="float64") /* ty=Tensor[(672), float64] */;
  %616 = cast(%var_4621, dtype="float32") /* ty=Tensor[(90, 3), float32] */;
  %617 = reshape(%614, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %618 = reshape(%615, newshape=[7, 16, 6]) /* ty=Tensor[(7, 16, 6), float64] */;
  %619 = reshape(%616, newshape=[270]) /* ty=Tensor[(270), float32] */;
  %620 = @func_1652(%617, %618, %619) /* ty=(Tensor[(7, 16, 6), bool], Tensor[(270), float32], Tensor[(504), float64], Tensor[(2, 15, 9), int32], Tensor[(1, 15, 9), float32], Tensor[(2, 15, 9), float64]) */;
  %621 = cast(%611, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %622 = cast(%var_4608, dtype="bool") /* ty=Tensor[(16, 15, 9), bool] */;
  %623 = @func_3071() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %624 = %623.0;
  %625 = cast(%var_4608, dtype="float64") /* ty=Tensor[(16, 15, 9), float64] */;
  %626 = cast(%624, dtype="float64") /* ty=Tensor[(1, 15, 9), float64] */;
  %627 = @func_1197() /* ty=(Tensor[(504), float64],) */;
  %628 = less_equal(%612, %613) /* ty=Tensor[(16, 15, 9), bool] */;
  %629 = %620.3;
  %630 = greater(%621, %622) /* ty=Tensor[(16, 15, 9), bool] */;
  %631 = @func_3354() /* ty=Tensor[(13, 15, 9), uint16] */;
  %632 = floor_mod(%625, %626) /* ty=Tensor[(16, 15, 9), float64] */;
  %633 = @func_1958() /* ty=Tensor[(1, 15, 9), float32] */;
  %634 = %627.0;
  (%628, %629, %var_4620, %var_4621, %630, %631, %632, %633, %634)
}

def @func_2193(%var_2191: Tensor[(81), float32]) -> (Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) {
  @func_2190(%var_2191) /* ty=(Tensor[(1, 15, 9), float32], Tensor[(?, 15, 9), float64], Tensor[(1, 15, 9), float32], Tensor[(81), float32], Tensor[(1, 15, 9), float32]) */
}

def @func_4975(%var_4950: Tensor[(1, 280), float32]) -> (Tensor[(1, 280), float32], Tensor[(1, 15, 9), float32], Tensor[(2, 14, 10), float32], Tensor[(?, 15, 9), bool]) {
  %635 = cast(%var_4950, dtype="float32") /* ty=Tensor[(1, 280), float32] */;
  %636 = reshape(%635, newshape=[2, 14, 10]) /* ty=Tensor[(2, 14, 10), float32] */;
  %637 = @func_2887(%636) /* ty=(Tensor[(2, 14, 10), float32],) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(2, 14, 10), float32] */;
  %640 = @func_1070() /* ty=(Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) */;
  %641 = %640.0;
  %642 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %643 = %642.0;
  %644 = cast(%643, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %645 = shape_of(%641, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%641, dtype="bool") /* ty=Tensor[(1, 15, 9), bool] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %648 = @func_685() /* ty=Tensor[(1, 15, 9), float32] */;
  %649 = sqrt(%639) /* ty=Tensor[(2, 14, 10), float32] */;
  %650 = less_equal(%646, %647) /* ty=Tensor[(?, 15, 9), bool] */;
  (%var_4950, %648, %649, %650)
}

def @func_1127(%var_1114: Tensor[(9, 6, 9), uint8], %var_1115: Tensor[(9, 6, 9), uint8]) -> (Tensor[(9, 6, 9), uint8], Tensor[(9, 6, 9), float64]) {
  %651 = cast(%var_1115, dtype="uint8") /* ty=Tensor[(9, 6, 9), uint8] */;
  %652 = shape_of(%var_1114, dtype="int32") /* ty=Tensor[(3), int32] */;
  %653 = cast(%var_1114, dtype="uint8") /* ty=Tensor[(9, 6, 9), uint8] */;
  %654 = dyn.reshape(%651, %652, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %655 = cast(%var_1115, dtype="float64") /* ty=Tensor[(9, 6, 9), float64] */;
  %656 = left_shift(%653, %654) /* ty=Tensor[(9, 6, 9), uint8] */;
  %657 = sqrt(%655) /* ty=Tensor[(9, 6, 9), float64] */;
  (%656, %657)
}

def @func_1707() -> Tensor[(1, 15, 9), float32] {
  %659 = fn () -> Tensor[(1, 15, 9), float32] {
    %658 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
    %658.0
  };
  %659() /* ty=Tensor[(1, 15, 9), float32] */
}

def @func_980(%var_979: Tensor[(7, 4, 10), float64]) -> Tensor[(7, 4, 10), float64] {
  %661 = fn (%var_974: Tensor[(7, 4, 10), float64]) -> Tensor[(7, 4, 10), float64] {
    %660 = cast(%var_974, dtype="float64") /* ty=Tensor[(7, 4, 10), float64] */;
    acos(%660) /* ty=Tensor[(7, 4, 10), float64] */
  };
  %661(%var_979) /* ty=Tensor[(7, 4, 10), float64] */
}

def @func_5017() -> Tensor[(3, 15, 9), float32] {
  %667 = fn () -> Tensor[(3, 15, 9), float32] {
    %662 = @func_4407() /* ty=Tensor[(1, 15, 9), float32] */;
    %663 = cast(%662, dtype="uint16") /* ty=Tensor[(1, 15, 9), uint16] */;
    %664 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 15, 9), float32] */, dtype="uint16") /* ty=Tensor[(3, 15, 9), uint16] */;
    %665 = bitwise_and(%663, %664) /* ty=Tensor[(3, 15, 9), uint16] */;
    %666 = cast(%665, dtype="float32") /* ty=Tensor[(3, 15, 9), float32] */;
    tan(%666) /* ty=Tensor[(3, 15, 9), float32] */
  };
  %667() /* ty=Tensor[(3, 15, 9), float32] */
}

def @func_1070() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %668 = @func_822() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %669 = %668.0;
  %670 = @func_1007() /* ty=Tensor[(1, 15, 9), float32] */;
  (%669, %670)
}

def @func_1764() -> (Tensor[(1, 15, 9), float32], Tensor[(1, 15, 9), float32]) {
  %671 = @func_139() /* ty=(Tensor[(1, 15, 9), float32],) */;
  %672 = @func_124() /* ty=Tensor[(1, 15, 9), float32] */;
  %673 = %671.0;
  (%672, %673)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */The type inference pass was unable to infer a type for this expression.
This usually occurs when an operator call is under constrained in some way, check other reported errors for hints of what may of happened.

===================================
note: run with `TVM_BACKTRACE=1` environment variable to display a backtrace.
