==========mod==========
#[version = "0.0.5"]
def @func_3246() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) {
  %0 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %1 = cast(%0, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %2 = reshape(%1, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %3 = @func_2875(%2) /* ty=(Tensor[(30, 2), uint16],) */;
  %4 = cast(%0, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %5 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %6 = %3.0;
  %7 = cos(%4) /* ty=Tensor[(15, 2, 2), float32] */;
  %8 = %5.0;
  (%6, %7, %8)
}

def @func_5412(%var_5406: Tensor[(6, 13, 6), float32]) -> (Tensor[(6, 13, 6), float32], Tensor[(15, 2, 2), bool], Tensor[(60), float32]) {
  %9 = cast(%var_5406, dtype="float32") /* ty=Tensor[(6, 13, 6), float32] */;
  %10 = cast(meta[relay.Constant][0] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %11 = reshape(%10, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %12 = @func_4028(%11) /* ty=(Tensor[(15, 2, 2), bool],) */;
  %13 = log2(%9) /* ty=Tensor[(6, 13, 6), float32] */;
  %14 = %12.0;
  (%13, %14, meta[relay.Constant][0] /* ty=Tensor[(60), float32] */)
}

def @func_12535() -> Tensor[(30, 2), bool] {
  %15 = @func_8576() /* ty=(Tensor[(30, 2), bool],) */;
  %15.0
}

def @func_7316() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), bool]) {
  %16 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %17 = %16.0;
  %18 = @func_4242() /* ty=Tensor[(30, 2), bool] */;
  (%17, %18)
}

def @func_15939() -> (Tensor[(30, 2), float64],) {
  %19 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %20 = %19.1;
  (%20,)
}

def @func_2060(%var_2047: Tensor[(15, 2, 2), bool], %var_2048: Tensor[(15, 2, 2), bool]) -> (Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) {
  %21 = cast(%var_2048, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %22 = shape_of(%var_2047, dtype="int32") /* ty=Tensor[(3), int32] */;
  %23 = cast(%var_2047, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %25 = cast(%var_2048, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %26 = logical_and(%23, %24) /* ty=Tensor[(15, 2, 2), bool] */;
  %27 = exp(%25) /* ty=Tensor[(15, 2, 2), float32] */;
  (%26, %27)
}

def @func_14426(%var_14402: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), uint16]) {
  %28 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %29 = %28.0;
  %30 = cast(%var_14402, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %31 = shape_of(%29, dtype="int32") /* ty=Tensor[(3), int32] */;
  %32 = cast(%29, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %33 = dyn.reshape(%30, %31, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %34 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %35 = floor_divide(%32, %33) /* ty=Tensor[(15, 2, 2), float64] */;
  %36 = %34.0;
  (%35, %36)
}

def @func_8020() -> Tensor[(30, 2), bool] {
  %37 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %37.0
}

def @func_11045() -> Tensor[(15, 2, 2), bool] {
  @func_4122() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_8142() -> (Tensor[(15, 2, 2), float32],) {
  %38 = @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %39 = %38.0;
  (%39,)
}

def @func_17920() -> Tensor[(30, 2), uint16] {
  %40 = @func_17551() /* ty=(Tensor[(30, 2), uint16],) */;
  %40.0
}

def @func_4086(%var_4067: Tensor[(30, 2), float32]) -> (Tensor[(30, 2), int64], Tensor[(30, 2), float32]) {
  %41 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %42 = %41.0;
  %43 = cast(%var_4067, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %44 = shape_of(%42, dtype="int32") /* ty=Tensor[(2), int32] */;
  %45 = cast(%42, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %46 = dyn.reshape(%43, %44, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %47 = power(%45, %46) /* ty=Tensor[(30, 2), float64] */;
  %48 = cast(%var_4067, dtype="int64") /* ty=Tensor[(30, 2), int64] */;
  %49 = shape_of(%47, dtype="int32") /* ty=Tensor[(2), int32] */;
  %50 = cast(%47, dtype="int64") /* ty=Tensor[(30, 2), int64] */;
  %51 = dyn.reshape(%48, %49, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %52 = multiply(%50, %51) /* ty=Tensor[(30, 2), int64] */;
  %53 = @func_3793() /* ty=Tensor[(30, 2), float32] */;
  (%52, %53)
}

def @func_7166() -> (Tensor[(15, 2, 2), float32],) {
  %54 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %55 = %54.0;
  (%55,)
}

def @func_17033() -> (Tensor[(30, 2), int16], Tensor[(30, 2), bool]) {
  %56 = @func_15527() /* ty=(Tensor[(30, 2), int16],) */;
  %57 = %56.0;
  %58 = @func_15579() /* ty=Tensor[(30, 2), bool] */;
  (%57, %58)
}

def @func_16418() -> (Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool]) {
  %59 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %60 = %59.0;
  %61 = @func_10478() /* ty=Tensor[(15, 2, 2), bool] */;
  (%60, %61)
}

def @func_18103() -> Tensor[(30, 2), bool] {
  %62 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %62.0
}

def @func_4672() -> Tensor[(15, 2, 2), float32] {
  %63 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %63.0
}

def @func_11352() -> Tensor[(15, 2, 2), bool] {
  @func_6111() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_8130() -> Tensor[(30, 2), bool] {
  %64 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %64.1
}

def @func_17312() -> (Tensor[(15, 2, 2), float32],) {
  %65 = @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %66 = %65.0;
  (%66,)
}

def @func_10784() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %67 = @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */;
  %68 = %67.0;
  %69 = cast(%68, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %70 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %71 = acosh(%69) /* ty=Tensor[(15, 2, 2), float64] */;
  %72 = @func_7964() /* ty=Tensor[(15, 2, 2), float32] */;
  %73 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
  %74 = %70.1;
  (%71, %72, %73, %74)
}

def @func_9116() -> Tensor[(30, 2), bool] {
  %75 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %75.1
}

def @func_11471() -> Tensor[(30, 2), bool] {
  @func_6712() /* ty=Tensor[(30, 2), bool] */
}

def @func_15210() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) {
  %76 = @func_7982() /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) */;
  %77 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %78 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %79 = %78.0;
  %80 = cast(%79, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %81 = %76.1;
  %82 = %77.1;
  %83 = cosh(%80) /* ty=Tensor[(15, 2, 2), float64] */;
  (%81, %82, %83)
}

def @func_16797() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %84 = @func_15047() /* ty=(Tensor[(30, 2), float32], Tensor[(15, 2, 2), uint32]) */;
  %85 = %84.0;
  %86 = @func_11697() /* ty=Tensor[(30, 2), bool] */;
  (%85, %86)
}

def @func_5665(%var_5639: Tensor[(1, 10, 15), float64]) -> (Tensor[(8, 10, 15), float64], Tensor[(1352), float64], Tensor[(11, 11, 15), uint8], Tensor[(1815), float64]) {
  %87 = cast(%var_5639, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %88 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 15), float64] */;
  %89 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %90 = cast(meta[relay.Constant][2] /* ty=Tensor[(1815), float64] */, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %91 = cast(meta[relay.Constant][2] /* ty=Tensor[(1815), float64] */, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %92 = reshape(%90, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %93 = reshape(%91, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %94 = @func_105(%92, %93) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(11, 11, 15), uint8]) */;
  %95 = power(%87, %88) /* ty=Tensor[(8, 10, 15), float64] */;
  %96 = %89.1;
  %97 = %94.1;
  (%95, %96, %97, meta[relay.Constant][2] /* ty=Tensor[(1815), float64] */)
}

def @func_18016() -> Tensor[(30, 2), uint16] {
  @func_9065() /* ty=Tensor[(30, 2), uint16] */
}

def @func_14682() -> Tensor[(5, 11, 2), float64] {
  %98 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %98.0
}

def @func_7086(%var_7061: Tensor[(3, 6, 5), int16], %var_7062: Tensor[(3, 6, 5), int16]) -> Tensor[(3, 6, 5), int16] {
  %99 = cast(%var_7062, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
  %100 = shape_of(%var_7061, dtype="int32") /* ty=Tensor[(3), int32] */;
  %101 = cast(%var_7061, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
  %102 = dyn.reshape(%99, %100, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  subtract(%101, %102) /* ty=Tensor[(3, 6, 5), int16] */
}

def @func_15960() -> Tensor[(30, 2), bool] {
  %103 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %103.0
}

def @func_16191() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  %104 = @func_13427() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %105 = %104.0;
  %106 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
  (%105, %106)
}

def @func_16332() -> (Tensor[(30, 2), bool],) {
  %107 = @func_6712() /* ty=Tensor[(30, 2), bool] */;
  (%107,)
}

def @func_7784() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %108 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  %109 = cast(%108, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %110 = reshape(%109, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %111 = @func_6310(%110) /* ty=Tensor[(30, 2), float32] */;
  %112 = cast(%111, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %113 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %114 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %115 = cos(%112) /* ty=Tensor[(30, 2), float64] */;
  %116 = %113.0;
  %117 = %114.0;
  (%108, %115, %116, %117)
}

def @func_7508(%var_7472: Tensor[(16, 10, 14), float64]) -> (Tensor[(30, 2), float32], Tensor[(16, 10, 14), float64]) {
  %118 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %119 = cast(%var_7472, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
  %120 = atan(%119) /* ty=Tensor[(16, 10, 14), float64] */;
  %121 = cast(%120, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
  %122 = %118.0;
  %123 = sigmoid(%121) /* ty=Tensor[(16, 10, 14), float64] */;
  (%122, %123)
}

def @func_12402() -> (Tensor[(30, 2), bool],) {
  %124 = @func_10826() /* ty=Tensor[(30, 2), bool] */;
  (%124,)
}

def @func_15579() -> Tensor[(30, 2), bool] {
  %125 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
  %125.0
}

def @func_2726(%var_2671: Tensor[(30, 2), bool]) -> (Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %126 = cast(meta[relay.Constant][3] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %127 = reshape(%126, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float64] */;
  %128 = @func_813(%127) /* ty=(Tensor[(13, 8, 13), float64],) */;
  %129 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %130 = %129.0;
  %131 = cast(%130, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %132 = erf(%131) /* ty=Tensor[(30, 2), float64] */;
  %133 = cast(%var_2671, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %134 = shape_of(%130, dtype="int32") /* ty=Tensor[(2), int32] */;
  %135 = cast(%130, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %137 = add(%135, %136) /* ty=Tensor[(30, 2), uint16] */;
  %138 = cast(%137, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %139 = shape_of(%132, dtype="int32") /* ty=Tensor[(2), int32] */;
  %140 = cast(%132, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %141 = dyn.reshape(%138, %139, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %142 = greater(%140, %141) /* ty=Tensor[(30, 2), bool] */;
  %143 = cast(%142, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %144 = shape_of(%132, dtype="int32") /* ty=Tensor[(2), int32] */;
  %145 = cast(%132, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %147 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %148 = %128.0;
  %149 = less_equal(%145, %146) /* ty=Tensor[(30, 2), bool] */;
  %150 = %147.0;
  (%148, meta[relay.Constant][3] /* ty=Tensor[(1352), float64] */, %149, %150)
}

def @func_13471() -> Tensor[(30, 2), bool] {
  @func_3559() /* ty=Tensor[(30, 2), bool] */
}

def @func_3062() -> (Tensor[(30, 2), bool], Tensor[(1352), float64]) {
  %151 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %152 = %151.2;
  %153 = cast(%152, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %154 = reshape(%153, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %155 = @func_2726(%154) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %156 = %155.1;
  (%152, %156)
}

def @func_8771(%var_8761: Tensor[(16, 13, 13), float64], %var_8762: Tensor[(16, 13, 13), float64]) -> (Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) {
  %157 = cast(%var_8762, dtype="float64") /* ty=Tensor[(16, 13, 13), float64] */;
  %158 = shape_of(%var_8761, dtype="int32") /* ty=Tensor[(3), int32] */;
  %159 = cast(%var_8761, dtype="float64") /* ty=Tensor[(16, 13, 13), float64] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %161 = @func_7246() /* ty=(Tensor[(30, 2), uint16],) */;
  %162 = divide(%159, %160) /* ty=Tensor[(16, 13, 13), float64] */;
  %163 = %161.0;
  (%162, %163)
}

def @func_1395(%var_1379: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 3, 11), float64], Tensor[(13, 8, 13), float64], Tensor[(64), float32]) {
  %164 = cast(%var_1379, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %165 = cast(meta[relay.Constant][4] /* ty=Tensor[(15, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %166 = cast(meta[relay.Constant][5] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %167 = reshape(%166, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %168 = @func_1136(%167) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */;
  %169 = mod(%164, %165) /* ty=Tensor[(15, 3, 11), float64] */;
  %170 = %168.0;
  (%169, %170, meta[relay.Constant][5] /* ty=Tensor[(64), float32] */)
}

def @func_15367() -> Tensor[(30, 2), bool] {
  %171 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %171.1
}

def @func_4854() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) {
  %172 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %173 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %174 = %172.0;
  %175 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  %176 = %173.1;
  (%174, %175, %176)
}

def @func_2763() -> (Tensor[(30, 2), bool],) {
  %177 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %178 = %177.0;
  (%178,)
}

def @func_17190() -> Tensor[(30, 2), uint16] {
  @func_5902() /* ty=Tensor[(30, 2), uint16] */
}

def @func_3153() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) {
  %179 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %180 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %181 = %179.0;
  %182 = %180.0;
  (%181, %182)
}

def @func_18415() -> Tensor[(15, 2, 2), float64] {
  %183 = @func_9278() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %183.0
}

def @func_6756(%var_6728: Tensor[(6, 6, 16), float64], %var_6729: Tensor[(6, 6, 16), float64]) -> (Tensor[(6, 6, 16), bool], Tensor[(30, 2), float64]) {
  %184 = cast(%var_6729, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
  %185 = shape_of(%var_6728, dtype="int32") /* ty=Tensor[(3), int32] */;
  %186 = cast(%var_6728, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
  %187 = dyn.reshape(%184, %185, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %188 = not_equal(%186, %187) /* ty=Tensor[(6, 6, 16), bool] */;
  %189 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  (%188, %189)
}

def @func_12599() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) {
  %190 = @func_7467() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %191 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
  %192 = %190.1;
  (%191, %192)
}

def @func_5261(%var_5247: Tensor[(9, 1, 8), float32], %var_5248: Tensor[(9, 7, 8), float32]) -> (Tensor[(9, 7, 8), float32], Tensor[(9, 7, 8), float32]) {
  %193 = cast(%var_5247, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
  %194 = cast(%var_5248, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %195 = cast(%var_5248, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
  %196 = floor_divide(%193, %194) /* ty=Tensor[(9, 7, 8), float32] */;
  %197 = sinh(%195) /* ty=Tensor[(9, 7, 8), float32] */;
  (%196, %197)
}

def @func_2604() -> (Tensor[(30, 2), bool],) {
  %198 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %199 = %198.0;
  (%199,)
}

def @func_14913() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(2240), float64]) {
  %200 = @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %201 = @func_14627() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
  %202 = @func_12402() /* ty=(Tensor[(30, 2), bool],) */;
  %203 = @func_12293() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(5, 11, 2), float64]) */;
  %204 = @func_10197() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(16, 10, 14), float64], Tensor[(2240), float64], Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %205 = @func_13471() /* ty=Tensor[(30, 2), bool] */;
  %206 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
  %207 = @func_11045() /* ty=Tensor[(15, 2, 2), bool] */;
  %208 = %200.0;
  %209 = %201.2;
  %210 = %202.0;
  %211 = %203.0;
  %212 = %204.2;
  (%205, %206, %207, %208, %209, %210, %211, %212)
}

def @func_17759() -> (Tensor[(15, 2, 2), float32],) {
  %213 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
  (%213,)
}

def @func_5078() -> (Tensor[(5, 11, 2), float64],) {
  %214 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %215 = %214.0;
  (%215,)
}

def @func_7048() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) {
  %216 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
  %217 = %216.3;
  %218 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  (%217, %218)
}

def @func_10688(%var_10678: Tensor[(13, 5, 14), float32]) -> (Tensor[(13, 5, 14), bool],) {
  %219 = cast(meta[relay.Constant][6] /* ty=Tensor[(13, 5, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 14), bool] */;
  %220 = shape_of(%var_10678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%var_10678, dtype="bool") /* ty=Tensor[(13, 5, 14), bool] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %223 = less_equal(%221, %222) /* ty=Tensor[(13, 5, 14), bool] */;
  (%223,)
}

def @func_3559() -> Tensor[(30, 2), bool] {
  %224 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %224.0
}

def @func_105(%var_76: Tensor[(11, 11, 15), float64], %var_77: Tensor[(11, 11, 15), float64]) -> (Tensor[(11, 11, 15), float64], Tensor[(11, 11, 15), uint8]) {
  %225 = cast(%var_77, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %226 = shape_of(%var_76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %227 = cast(%var_76, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
  %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %229 = cast(meta[relay.Constant][7] /* ty=Tensor[(11, 11, 15), float64] */, dtype="uint8") /* ty=Tensor[(11, 11, 15), uint8] */;
  %230 = shape_of(%var_76, dtype="int32") /* ty=Tensor[(3), int32] */;
  %231 = cast(%var_76, dtype="uint8") /* ty=Tensor[(11, 11, 15), uint8] */;
  %232 = dyn.reshape(%229, %230, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %233 = divide(%227, %228) /* ty=Tensor[(11, 11, 15), float64] */;
  %234 = logical_xor(%231, %232) /* ty=Tensor[(11, 11, 15), uint8] */;
  (%233, %234)
}

def @func_3290() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) {
  %235 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %236 = %235.0;
  %237 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %238 = %237.1;
  %239 = cast(%238, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %240 = shape_of(%236, dtype="int32") /* ty=Tensor[(2), int32] */;
  %241 = cast(%236, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %242 = dyn.reshape(%239, %240, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %243 = cast(%238, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %244 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %245 = floor_divide(%241, %242) /* ty=Tensor[(30, 2), float32] */;
  %246 = asinh(%243) /* ty=Tensor[(15, 2, 2), float32] */;
  (%244, %245, %246)
}

def @func_16929() -> Tensor[(15, 2, 2), float32] {
  %247 = @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %247.0
}

def @func_13698(%var_13687: Tensor[(1152), uint64]) -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64]) {
  %248 = @func_12842() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) */;
  %249 = cast(meta[relay.Constant][8] /* ty=Tensor[(72), uint64] */, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %250 = cast(%var_13687, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %251 = reshape(%249, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
  %252 = reshape(%250, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
  %253 = @func_4196(%251, %252) /* ty=(Tensor[(9, 8, 16), uint64],) */;
  %254 = %248.2;
  %255 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
  %256 = %253.0;
  (%254, %255, %256, meta[relay.Constant][8] /* ty=Tensor[(72), uint64] */, %var_13687)
}

def @func_8730() -> (Tensor[(15, 2, 2), float32],) {
  %257 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %258 = %257.0;
  (%258,)
}

def @func_10791() -> (Tensor[(15, 2, 2), float32],) {
  %259 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  (%259,)
}

def @func_17745() -> (Tensor[(15, 2, 2), float32],) {
  %260 = @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %261 = %260.0;
  (%261,)
}

def @func_17942() -> (Tensor[(30, 2), float32],) {
  %262 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %263 = %262.0;
  (%263,)
}

def @func_4028(%var_4018: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), bool],) {
  %264 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %265 = %264.0;
  %266 = cast(%var_4018, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
  %268 = cast(%265, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %270 = greater_equal(%268, %269) /* ty=Tensor[(15, 2, 2), bool] */;
  (%270,)
}

def @func_4453() -> (Tensor[(30, 2), int16],) {
  %271 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  (%271,)
}

def @func_12842() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) {
  %272 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %273 = @func_12700() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) */;
  %274 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %275 = %272.0;
  %276 = %273.2;
  %277 = %274.2;
  (%275, %276, %277)
}

def @func_4196(%var_4182: Tensor[(9, 8, 1), uint64], %var_4183: Tensor[(9, 8, 16), uint64]) -> (Tensor[(9, 8, 16), uint64],) {
  %278 = cast(%var_4182, dtype="uint64") /* ty=Tensor[(9, 8, 1), uint64] */;
  %279 = cast(%var_4183, dtype="uint64") /* ty=Tensor[(9, 8, 16), uint64] */;
  %280 = add(%278, %279) /* ty=Tensor[(9, 8, 16), uint64] */;
  (%280,)
}

def @func_5880(%var_5798: Tensor[(72), uint64]) -> (Tensor[(8, 1, 7), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %281 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 7), float32] */;
  %282 = cast(%var_5798, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %283 = cast(meta[relay.Constant][10] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %284 = reshape(%282, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
  %285 = reshape(%283, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
  %286 = @func_4196(%284, %285) /* ty=(Tensor[(9, 8, 16), uint64],) */;
  %287 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %288 = %287.0;
  %289 = cast(%288, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %290 = reshape(%289, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %291 = @func_2726(%290) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %292 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %293 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %294 = tan(%281) /* ty=Tensor[(8, 1, 7), float32] */;
  %295 = %286.0;
  %296 = %291.2;
  %297 = %292.1;
  %298 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
  %299 = %293.0;
  (%294, %295, %var_5798, meta[relay.Constant][10] /* ty=Tensor[(1152), uint64] */, %288, %296, %297, %298, %299)
}

def @func_11224() -> (Tensor[(30, 2), bool],) {
  %300 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %301 = %300.1;
  (%301,)
}

def @func_9947(%var_9884: Tensor[(30, 2), uint16]) -> (Tensor[(30, 2), uint32], Tensor[(16, 13, 13), float64], Tensor[(104, 26), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %302 = @func_7246() /* ty=(Tensor[(30, 2), uint16],) */;
  %303 = %302.0;
  %304 = cast(%var_9884, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %305 = shape_of(%303, dtype="int32") /* ty=Tensor[(2), int32] */;
  %306 = cast(%303, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %307 = dyn.reshape(%304, %305, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %308 = cast(meta[relay.Constant][11] /* ty=Tensor[(104, 26), float64] */, dtype="float64") /* ty=Tensor[(104, 26), float64] */;
  %309 = cast(meta[relay.Constant][11] /* ty=Tensor[(104, 26), float64] */, dtype="float64") /* ty=Tensor[(104, 26), float64] */;
  %310 = reshape(%308, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %311 = reshape(%309, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %312 = @func_8771(%310, %311) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */;
  %313 = @func_9350() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
  %314 = @func_6253() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(1040), float32], float32) */;
  %315 = bitwise_or(%306, %307) /* ty=Tensor[(30, 2), uint32] */;
  %316 = %312.0;
  %317 = %313.1;
  %318 = %314.0;
  (%315, %316, meta[relay.Constant][11] /* ty=Tensor[(104, 26), float64] */, %317, %318)
}

def @func_7467() -> (Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %319 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  %320 = cast(meta[relay.Constant][12] /* ty=Tensor[(30, 2), float64] */, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %321 = shape_of(%319, dtype="int32") /* ty=Tensor[(2), int32] */;
  %322 = cast(%319, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %323 = dyn.reshape(%320, %321, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %324 = cast(meta[relay.Constant][12] /* ty=Tensor[(30, 2), float64] */, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %325 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
  %326 = %325.1;
  %327 = cast(%326, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %328 = reshape(%324, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %329 = reshape(%327, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %330 = @func_2060(%328, %329) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %331 = cast(%326, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %332 = acosh(%331) /* ty=Tensor[(30, 2), float32] */;
  %333 = cast(%332, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %334 = atan(%333) /* ty=Tensor[(30, 2), float32] */;
  %335 = cast(%319, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %336 = shape_of(%334, dtype="int32") /* ty=Tensor[(2), int32] */;
  %337 = cast(%334, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %338 = dyn.reshape(%335, %336, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %339 = @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %340 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %341 = bitwise_xor(%322, %323) /* ty=Tensor[(30, 2), uint32] */;
  %342 = %330.0;
  %343 = equal(%337, %338) /* ty=Tensor[(30, 2), bool] */;
  %344 = %339.0;
  %345 = %340.1;
  (%341, %342, %343, %344, %345)
}

def @func_17112() -> Tensor[(15, 2, 2), bool] {
  @func_11352() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_12569() -> Tensor[(30, 2), float32] {
  %346 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %346.0
}

def @func_16759(%var_16743: Tensor[(2704), float64]) -> (Tensor[(30, 2), int16], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), bool], Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) {
  %347 = @func_15527() /* ty=(Tensor[(30, 2), int16],) */;
  %348 = cast(%var_16743, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %349 = reshape(%348, newshape=[2704]) /* ty=Tensor[(2704), float64] */;
  %350 = @func_13822(%349) /* ty=(Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64], Tensor[(2704), float64], Tensor[(30, 2), uint16]) */;
  %351 = %347.0;
  %352 = cast(%351, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %353 = reshape(%352, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
  %354 = %350.3;
  %355 = cast(%354, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %356 = reshape(%355, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %357 = @func_8966(%356) /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), uint16], Tensor[(60), bool], Tensor[(30, 2), uint16]) */;
  %358 = @func_9847() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %359 = @func_12729(%353) /* ty=Tensor[(30, 2), bool] */;
  %360 = %357.0;
  %361 = %358.0;
  (%351, %354, %var_16743, %359, %360, %361)
}

def @func_4242() -> Tensor[(30, 2), bool] {
  %362 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %362.0
}

def @func_6938() -> (Tensor[(30, 2), float32],) {
  %363 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  (%363,)
}

def @func_9763(%var_9722: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), uint32],) {
  %364 = @func_6363() /* ty=Tensor[(15, 2, 2), float32] */;
  %365 = cast(%var_9722, dtype="uint32") /* ty=Tensor[(15, 2, 2), uint32] */;
  %366 = shape_of(%364, dtype="int32") /* ty=Tensor[(3), int32] */;
  %367 = cast(%364, dtype="uint32") /* ty=Tensor[(15, 2, 2), uint32] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %369 = add(%367, %368) /* ty=Tensor[(15, 2, 2), uint32] */;
  (%369,)
}

def @func_6705(%var_6671: Tensor[(72), uint64], %var_6672: Tensor[(1152), uint64]) -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), int16], Tensor[(30, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %370 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %371 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %372 = %371.0;
  %373 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  %374 = cast(%373, dtype="int16") /* ty=Tensor[(30, 2), int16] */;
  %375 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %376 = cast(%372, dtype="int16") /* ty=Tensor[(15, 2, 2), int16] */;
  %377 = dyn.reshape(%374, %375, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %378 = cast(%373, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %379 = cast(%var_6671, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %380 = cast(%var_6672, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %381 = reshape(%379, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
  %382 = reshape(%380, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
  %383 = @func_4196(%381, %382) /* ty=(Tensor[(9, 8, 16), uint64],) */;
  %384 = @func_6049() /* ty=(Tensor[(30, 2), bool],) */;
  %385 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %386 = %385.0;
  %387 = cast(%386, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %388 = sqrt(%387) /* ty=Tensor[(30, 2), float32] */;
  %389 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %390 = %389.0;
  %391 = cast(%390, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %392 = shape_of(%388, dtype="int32") /* ty=Tensor[(2), int32] */;
  %393 = cast(%388, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %395 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  %396 = %370.0;
  %397 = bitwise_xor(%376, %377) /* ty=Tensor[(15, 2, 2), int16] */;
  %398 = tan(%378) /* ty=Tensor[(30, 2), float32] */;
  %399 = %383.0;
  %400 = %384.0;
  %401 = not_equal(%393, %394) /* ty=Tensor[(30, 2), bool] */;
  (%395, %396, %397, %398, %399, %var_6671, %var_6672, %400, %401)
}

def @func_13926() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %402 = @func_10784() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %403 = %402.1;
  %404 = @func_8020() /* ty=Tensor[(30, 2), bool] */;
  (%403, %404)
}

def @func_18446() -> (Tensor[(15, 2, 2), bool],) {
  %405 = @func_4122() /* ty=Tensor[(15, 2, 2), bool] */;
  (%405,)
}

def @func_8576() -> (Tensor[(30, 2), bool],) {
  %406 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %407 = %406.1;
  (%407,)
}

def @func_16161(%var_16159: Tensor[(2704), float64]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(2704), float64]) {
  %408 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %409 = cast(%var_16159, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %410 = reshape(%409, newshape=[2704]) /* ty=Tensor[(2704), float64] */;
  %411 = @func_13071(%410) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), uint16]) */;
  %412 = %408.0;
  %413 = %411.4;
  (%412, %413, %var_16159)
}

def @func_14443() -> Tensor[(30, 2), bool] {
  %414 = @func_10703() /* ty=(Tensor[(30, 2), bool],) */;
  %414.0
}

def @func_6568() -> Tensor[(15, 2, 2), float32] {
  %415 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %415.0
}

def @func_16529() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), int64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  %416 = @func_15210() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) */;
  %417 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %418 = %417.0;
  %419 = cast(%418, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %420 = reshape(%419, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
  %421 = @func_4086(%420) /* ty=(Tensor[(30, 2), int64], Tensor[(30, 2), float32]) */;
  %422 = @func_12599() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */;
  %423 = %416.2;
  %424 = %421.0;
  %425 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
  %426 = %422.0;
  (%423, %418, %424, %425, %426)
}

def @func_6310(%var_6296: Tensor[(30, 2), uint16]) -> Tensor[(30, 2), float32] {
  %427 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %428 = %427.0;
  %429 = cast(%var_6296, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %430 = shape_of(%428, dtype="int32") /* ty=Tensor[(2), int32] */;
  %431 = cast(%428, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %432 = dyn.reshape(%429, %430, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %433 = mod(%431, %432) /* ty=Tensor[(30, 2), float64] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  asinh(%434) /* ty=Tensor[(30, 2), float32] */
}

def @func_10826() -> Tensor[(30, 2), bool] {
  %435 = @func_8986() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %435.0
}

def @func_3486() -> (Tensor[(30, 2), float64],) {
  %436 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %437 = %436.0;
  %438 = cast(%437, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %439 = log10(%438) /* ty=Tensor[(30, 2), float64] */;
  (%439,)
}

def @func_6029(%var_5991: float32) -> (Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) {
  %440 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %441 = %440.1;
  %442 = cast(%441, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %443 = cast(%var_5991, dtype="float32") /* ty=float32 */;
  %444 = cast(meta[relay.Constant][13] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %445 = reshape(%443, newshape=[]) /* ty=float32 */;
  %446 = reshape(%444, newshape=[13, 16, 5]) /* ty=Tensor[(13, 16, 5), float32] */;
  %447 = @func_4157(%445, %446) /* ty=(Tensor[(13, 16, 5), float32],) */;
  %448 = cast(%441, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %449 = cast(meta[relay.Constant][14] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %450 = reshape(%448, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
  %451 = reshape(%449, newshape=[338, 4]) /* ty=Tensor[(338, 4), float64] */;
  %452 = @func_2985(%450, %451) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) */;
  %453 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
  %454 = asin(%442) /* ty=Tensor[(30, 2), float64] */;
  %455 = %447.0;
  %456 = %452.3;
  %457 = %453.3;
  %458 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  (%454, %455, %var_5991, meta[relay.Constant][13] /* ty=Tensor[(1040), float32] */, %456, meta[relay.Constant][14] /* ty=Tensor[(1352), float64] */, %457, %458)
}

def @func_14329() -> (Tensor[(30, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool]) {
  %459 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %460 = @func_9163() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), uint16]) */;
  %461 = %459.0;
  %462 = %460.1;
  %463 = @func_9629() /* ty=Tensor[(30, 2), bool] */;
  (%461, %462, %463)
}

def @func_13247(%var_13177: Tensor[(64), float32]) -> (Tensor[(30, 2), uint16], Tensor[(8, 4, 2), uint64], Tensor[(64), float32], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %464 = cast(%var_13177, dtype="float32") /* ty=Tensor[(64), float32] */;
  %465 = reshape(%464, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %466 = @func_1136(%465) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */;
  %467 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %468 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %469 = @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %470 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %471 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
  %472 = %466.2;
  %473 = %467.1;
  %474 = %468.0;
  %475 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  %476 = @func_9287() /* ty=Tensor[(30, 2), bool] */;
  %477 = %469.0;
  %478 = %470.0;
  (%471, %472, %var_13177, %473, %474, %475, %476, %477, %478)
}

def @func_7207() -> (Tensor[(15, 2, 2), float32],) {
  %479 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %480 = %479.0;
  (%480,)
}

def @func_14573(%var_14491: Tensor[(6, 2, 7), float64], %var_14492: Tensor[(6, 2, 7), float64], %var_14566: Tensor[(165, 1), float64]) -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(6, 2, 7), uint8], Tensor[(15, 3, 11), float64], Tensor[(165, 1), float64]) {
  %481 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %482 = cast(%var_14492, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %483 = shape_of(%var_14491, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_14491, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = greater(%484, %485) /* ty=Tensor[(6, 2, 7), bool] */;
  %487 = cast(%486, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %488 = asinh(%487) /* ty=Tensor[(6, 2, 7), float64] */;
  %489 = cast(%488, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %490 = cos(%489) /* ty=Tensor[(6, 2, 7), float64] */;
  %491 = cast(%490, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
  %492 = log10(%491) /* ty=Tensor[(6, 2, 7), float64] */;
  %493 = cast(%490, dtype="uint8") /* ty=Tensor[(6, 2, 7), uint8] */;
  %494 = shape_of(%492, dtype="int32") /* ty=Tensor[(3), int32] */;
  %495 = cast(%492, dtype="uint8") /* ty=Tensor[(6, 2, 7), uint8] */;
  %496 = dyn.reshape(%493, %494, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %497 = cast(%var_14566, dtype="float64") /* ty=Tensor[(165, 1), float64] */;
  %498 = reshape(%497, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), float64] */;
  %499 = @func_1395(%498) /* ty=(Tensor[(15, 3, 11), float64], Tensor[(13, 8, 13), float64], Tensor[(64), float32]) */;
  %500 = %481.0;
  %501 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  %502 = maximum(%495, %496) /* ty=Tensor[(6, 2, 7), uint8] */;
  %503 = %499.0;
  (%500, %501, %502, %503, %var_14566)
}

def @func_16576() -> Tensor[(15, 2, 2), float32] {
  @func_10715() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_17527() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  %504 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %505 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %506 = %505.2;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %508 = %504.0;
  %509 = log(%507) /* ty=Tensor[(15, 2, 2), float64] */;
  (%508, %509)
}

def @func_11265() -> Tensor[(30, 2), bool] {
  @func_5350() /* ty=Tensor[(30, 2), bool] */
}

def @func_12522() -> (Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %510 = @func_9990() /* ty=(Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) */;
  %511 = @func_11907() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */;
  %512 = @func_10883() /* ty=(Tensor[(30, 2), uint16],) */;
  %513 = @func_9374() /* ty=(Tensor[(30, 2), float32],) */;
  %514 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %515 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %516 = %510.1;
  %517 = %511.2;
  %518 = %512.0;
  %519 = %513.0;
  %520 = %514.1;
  %521 = %515.0;
  (%516, %517, %518, %519, %520, %521)
}

def @func_10396() -> Tensor[(5, 11, 2), float64] {
  %522 = @func_5497() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %522.1
}

def @func_13529() -> (Tensor[(30, 2), uint16],) {
  %523 = @func_13313() /* ty=(Tensor[(30, 2), uint16],) */;
  %524 = %523.0;
  (%524,)
}

def @func_15261() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %525 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
  %526 = %525.0;
  %527 = @func_8130() /* ty=Tensor[(30, 2), bool] */;
  (%526, %527)
}

def @func_7964() -> Tensor[(15, 2, 2), float32] {
  @func_4672() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_17622() -> Tensor[(30, 2), bool] {
  %528 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %528.1
}

def @func_8896(%var_8876: Tensor[(1352), float64]) -> (Tensor[(1352), int32], Tensor[(30, 2), float64]) {
  %529 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %530 = %529.1;
  %531 = cast(%var_8876, dtype="int32") /* ty=Tensor[(1352), int32] */;
  %532 = shape_of(%530, dtype="int32") /* ty=Tensor[(1), int32] */;
  %533 = cast(%530, dtype="int32") /* ty=Tensor[(1352), int32] */;
  %534 = dyn.reshape(%531, %532, newshape=[]) /* ty=Tensor[(?), int32] */;
  %535 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %536 = subtract(%533, %534) /* ty=Tensor[(1352), int32] */;
  %537 = %535.2;
  (%536, %537)
}

def @func_13071(%var_13040: Tensor[(2704), float64]) -> (Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), uint16]) {
  %538 = @func_10234() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %539 = cast(%var_13040, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %540 = cast(%var_13040, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %541 = reshape(%539, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %542 = reshape(%540, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %543 = @func_8771(%541, %542) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */;
  %544 = @func_8530() /* ty=(Tensor[(30, 2), uint16],) */;
  %545 = @func_11352() /* ty=Tensor[(15, 2, 2), bool] */;
  %546 = %538.0;
  %547 = %543.1;
  %548 = %544.0;
  (%545, %546, %547, %var_13040, %548)
}

def @func_5902() -> Tensor[(30, 2), uint16] {
  %549 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %549.0
}

def @func_11697() -> Tensor[(30, 2), bool] {
  %550 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %550.2
}

def @func_14627() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %551 = @func_7246() /* ty=(Tensor[(30, 2), uint16],) */;
  %552 = @func_11625() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
  %553 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
  %554 = %551.0;
  %555 = %552.2;
  (%553, %554, %555)
}

def @func_9278() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %556 = @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
  %557 = @func_5497() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %558 = @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %559 = %556.0;
  %560 = @func_4122() /* ty=Tensor[(15, 2, 2), bool] */;
  %561 = %557.0;
  %562 = %558.0;
  (%559, %560, %561, %562)
}

def @func_8852(%var_8817: Tensor[(15, 2, 2), float64]) -> (Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) {
  %563 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %564 = %563.0;
  %565 = cast(%564, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %566 = rsqrt(%565) /* ty=Tensor[(15, 2, 2), float64] */;
  %567 = cast(%var_8817, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
  %568 = shape_of(%566, dtype="int32") /* ty=Tensor[(3), int32] */;
  %569 = cast(%566, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
  %570 = dyn.reshape(%567, %568, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %571 = cast(%566, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %572 = shape_of(%var_8817, dtype="int32") /* ty=Tensor[(3), int32] */;
  %573 = cast(%var_8817, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %575 = left_shift(%569, %570) /* ty=Tensor[(15, 2, 2), int8] */;
  %576 = divide(%573, %574) /* ty=Tensor[(15, 2, 2), float32] */;
  (%575, %576)
}

def @func_15865() -> (Tensor[(30, 2), float32], Tensor[(30, 2), uint16]) {
  %577 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %578 = @func_12569() /* ty=Tensor[(30, 2), float32] */;
  %579 = %577.2;
  (%578, %579)
}

def @func_2985(%var_2955: Tensor[(30, 2), float32], %var_2975: Tensor[(338, 4), float64]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) {
  %580 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %581 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %582 = %581.0;
  %583 = cast(%var_2955, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %584 = shape_of(%582, dtype="int32") /* ty=Tensor[(2), int32] */;
  %585 = cast(%582, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %586 = dyn.reshape(%583, %584, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %587 = cast(%var_2975, dtype="float64") /* ty=Tensor[(338, 4), float64] */;
  %588 = reshape(%587, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float64] */;
  %589 = @func_813(%588) /* ty=(Tensor[(13, 8, 13), float64],) */;
  %590 = %580.0;
  %591 = left_shift(%585, %586) /* ty=Tensor[(30, 2), uint32] */;
  %592 = %589.0;
  (%590, %591, %592, %var_2975)
}

def @func_4607(%var_4582: Tensor[(1152), uint64], %var_4593: Tensor[(18, 4), uint64]) -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(1152), uint64], Tensor[(18, 4), float64]) {
  %593 = @func_4242() /* ty=Tensor[(30, 2), bool] */;
  %594 = cast(%593, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %595 = cast(%593, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %596 = reshape(%594, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %597 = reshape(%595, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %598 = @func_2060(%596, %597) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %599 = cast(meta[relay.Constant][15] /* ty=Tensor[(18, 4), uint64] */, dtype="uint64") /* ty=Tensor[(18, 4), uint64] */;
  %600 = cast(%var_4582, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %601 = reshape(%599, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
  %602 = reshape(%600, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
  %603 = @func_4196(%601, %602) /* ty=(Tensor[(9, 8, 16), uint64],) */;
  %604 = cast(%var_4593, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
  %605 = shape_of(meta[relay.Constant][15] /* ty=Tensor[(18, 4), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %606 = cast(meta[relay.Constant][15] /* ty=Tensor[(18, 4), uint64] */, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
  %607 = dyn.reshape(%604, %605, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %608 = %598.1;
  %609 = %603.0;
  %610 = floor_mod(%606, %607) /* ty=Tensor[(18, 4), float64] */;
  (%593, %608, %609, %var_4582, %610)
}

def @func_16054() -> (Tensor[(15, 6, 14), float32],) {
  %611 = cast(meta[relay.Constant][16] /* ty=Tensor[(15, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 14), float32] */;
  %612 = tan(%611) /* ty=Tensor[(15, 6, 14), float32] */;
  (%612,)
}

def @func_18221() -> (Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64]) {
  %613 = @func_16332() /* ty=(Tensor[(30, 2), bool],) */;
  %614 = %613.0;
  %615 = cast(%614, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %616 = reshape(%615, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %617 = @func_9947(%616) /* ty=(Tensor[(30, 2), uint32], Tensor[(16, 13, 13), float64], Tensor[(104, 26), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %618 = %617.1;
  (%614, %618)
}

def @func_12060(%var_12036: Tensor[(1152), uint64]) -> (Tensor[(30, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(1152), uint64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], int32, Tensor[(15, 2, 2), float32]) {
  %619 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %620 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %621 = cast(%var_12036, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %622 = reshape(%621, newshape=[48, 24]) /* ty=Tensor[(48, 24), uint64] */;
  %623 = @func_10353(%622) /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(48, 24), uint64], Tensor[(3, 24), uint64]) */;
  %624 = @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %625 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %626 = reshape(%625, newshape=[]) /* ty=int32 */;
  %627 = @func_5623(%626) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
  %628 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %629 = reshape(%628, newshape=[]) /* ty=int32 */;
  %630 = @func_10995(%629) /* ty=(Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %631 = %619.0;
  %632 = %620.2;
  %633 = %623.0;
  %634 = %624.0;
  %635 = %627.1;
  %636 = %630.2;
  (%631, %632, %633, %var_12036, %634, %635, -2 /* ty=int32 */, %636)
}

def @func_9834() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) {
  %637 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
  %638 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
  %639 = %637.0;
  (%638, %639)
}

def @func_6049() -> (Tensor[(30, 2), bool],) {
  %640 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %641 = %640.0;
  (%641,)
}

def @func_1136(%var_1111: Tensor[(8, 4, 2), float32]) -> (Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) {
  %642 = cast(meta[relay.Constant][17] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %643 = reshape(%642, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float64] */;
  %644 = @func_813(%643) /* ty=(Tensor[(13, 8, 13), float64],) */;
  %645 = cast(%var_1111, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
  %646 = tan(%645) /* ty=Tensor[(8, 4, 2), float32] */;
  %647 = cast(%var_1111, dtype="uint64") /* ty=Tensor[(8, 4, 2), uint64] */;
  %648 = shape_of(%646, dtype="int32") /* ty=Tensor[(3), int32] */;
  %649 = cast(%646, dtype="uint64") /* ty=Tensor[(8, 4, 2), uint64] */;
  %650 = dyn.reshape(%647, %648, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %651 = %644.0;
  %652 = left_shift(%649, %650) /* ty=Tensor[(8, 4, 2), uint64] */;
  (%651, meta[relay.Constant][17] /* ty=Tensor[(1352), float64] */, %652)
}

def @func_11660() -> Tensor[(5, 11, 2), float64] {
  @func_10396() /* ty=Tensor[(5, 11, 2), float64] */
}

def @func_7246() -> (Tensor[(30, 2), uint16],) {
  %653 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  (%653,)
}

def @func_2843() -> Tensor[(15, 2, 2), float32] {
  %654 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %654.0
}

def @func_9690(%var_9682: Tensor[(30, 2), bool]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) {
  %655 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %656 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %657 = %656.0;
  %658 = cast(%var_9682, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %659 = shape_of(%657, dtype="int32") /* ty=Tensor[(2), int32] */;
  %660 = cast(%657, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %661 = dyn.reshape(%658, %659, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %662 = cast(-9.0822f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %663 = reshape(%662, newshape=[]) /* ty=float32 */;
  %664 = @func_6029(%663) /* ty=(Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %665 = %655.0;
  %666 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  %667 = subtract(%660, %661) /* ty=Tensor[(30, 2), float64] */;
  %668 = %664.2;
  (%665, %666, %667, %668, -9.0822f /* ty=float32 */)
}

def @func_15351() -> (Tensor[(30, 2), bool],) {
  %669 = @func_11265() /* ty=Tensor[(30, 2), bool] */;
  (%669,)
}

def @func_11550() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %670 = @func_11352() /* ty=Tensor[(15, 2, 2), bool] */;
  %671 = cast(%670, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %672 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %673 = erf(%671) /* ty=Tensor[(15, 2, 2), float32] */;
  %674 = %672.1;
  (%673, %674)
}

def @func_10353(%var_10336: Tensor[(48, 24), uint64]) -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(48, 24), uint64], Tensor[(3, 24), uint64]) {
  %675 = @func_8084() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %676 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %677 = cast(%var_10336, dtype="uint64") /* ty=Tensor[(48, 24), uint64] */;
  %678 = cast(meta[relay.Constant][18] /* ty=Tensor[(3, 24), uint64] */, dtype="uint64") /* ty=Tensor[(3, 24), uint64] */;
  %679 = reshape(%677, newshape=[1152]) /* ty=Tensor[(1152), uint64] */;
  %680 = reshape(%678, newshape=[18, 4]) /* ty=Tensor[(18, 4), uint64] */;
  %681 = @func_4607(%679, %680) /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(1152), uint64], Tensor[(18, 4), float64]) */;
  %682 = %675.0;
  %683 = %676.1;
  %684 = %681.0;
  (%682, %683, %684, %var_10336, meta[relay.Constant][18] /* ty=Tensor[(3, 24), uint64] */)
}

def @func_3432() -> (Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  %685 = cast(meta[relay.Constant][19] /* ty=Tensor[(6, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %686 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %687 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %688 = %687.0;
  %689 = cast(%688, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %690 = cast(%688, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %691 = reshape(%689, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %692 = reshape(%690, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %693 = @func_2060(%691, %692) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %694 = atanh(%685) /* ty=Tensor[(6, 12, 5), float64] */;
  %695 = %686.1;
  %696 = %693.0;
  (%694, %695, %688, %696)
}

def @func_7008() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  %697 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %698 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %699 = %697.0;
  %700 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  %701 = %698.1;
  (%699, %700, %701)
}

def @func_10904() -> Tensor[(30, 2), float64] {
  %702 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %702.2
}

def @func_16102() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), int16]) {
  %703 = @func_5023() /* ty=(Tensor[(30, 2), int16],) */;
  %704 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
  %705 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  %706 = %703.0;
  (%704, %705, %706)
}

def @func_9592() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %707 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %708 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  %709 = %707.0;
  (%708, %709)
}

def @func_9163() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), uint16]) {
  %710 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %711 = @func_6712() /* ty=Tensor[(30, 2), bool] */;
  %712 = %710.2;
  %713 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
  (%711, %712, %713)
}

def @func_2462() -> (Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %714 = cast(meta[relay.Constant][20] /* ty=Tensor[(5, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
  %715 = cast(meta[relay.Constant][21] /* ty=Tensor[(30, 2), bool] */, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %716 = cast(meta[relay.Constant][21] /* ty=Tensor[(30, 2), bool] */, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %717 = reshape(%715, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %718 = reshape(%716, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %719 = @func_2060(%717, %718) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %720 = acosh(%714) /* ty=Tensor[(5, 3, 3), float32] */;
  %721 = %719.1;
  (%720, %721, meta[relay.Constant][21] /* ty=Tensor[(30, 2), bool] */)
}

def @func_4157(%var_4133: float32, %var_4134: Tensor[(13, 16, 5), float32]) -> (Tensor[(13, 16, 5), float32],) {
  %722 = cast(%var_4133, dtype="float32") /* ty=float32 */;
  %723 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 16, 5), float32] */;
  %724 = floor_divide(%722, %723) /* ty=Tensor[(13, 16, 5), float32] */;
  (%724,)
}

def @func_4974() -> (Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) {
  %725 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
  %726 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %727 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %728 = %725.0;
  %729 = %726.1;
  %730 = %727.0;
  (%728, %729, %730)
}

def @func_3633() -> (Tensor[(5, 11, 2), float64],) {
  %731 = cast(meta[relay.Constant][22] /* ty=Tensor[(5, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
  %732 = acos(%731) /* ty=Tensor[(5, 11, 2), float64] */;
  (%732,)
}

def @func_17838() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %733 = @func_16332() /* ty=(Tensor[(30, 2), bool],) */;
  %734 = @func_11907() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */;
  %735 = %733.0;
  %736 = %734.0;
  (%735, %736)
}

def @func_16178() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %737 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
  %738 = @func_13471() /* ty=Tensor[(30, 2), bool] */;
  %739 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
  (%737, %738, %739)
}

def @func_17785() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32]) {
  %740 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %741 = %740.1;
  %742 = @func_3793() /* ty=Tensor[(30, 2), float32] */;
  (%741, %742)
}

def @main(%var_18448: Tensor[(6, 10, 14), float64]) -> Tensor[(6, 10, 14), float64] {
  %743 = cast(%var_18448, dtype="float64") /* ty=Tensor[(6, 10, 14), float64] */;
  log10(%743) /* ty=Tensor[(6, 10, 14), float64] */
}

def @func_3987() -> (Tensor[(15, 2, 2), float32],) {
  %744 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %745 = %744.0;
  (%745,)
}

def @func_8966(%var_8934: Tensor[(60), bool]) -> (Tensor[(6, 12, 5), float64], Tensor[(30, 2), uint16], Tensor[(60), bool], Tensor[(30, 2), uint16]) {
  %746 = @func_4695() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) */;
  %747 = cast(%var_8934, dtype="bool") /* ty=Tensor[(60), bool] */;
  %748 = reshape(%747, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %749 = @func_2875(%748) /* ty=(Tensor[(30, 2), uint16],) */;
  %750 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %751 = %746.0;
  %752 = %749.0;
  %753 = %750.0;
  (%751, %752, %var_8934, %753)
}

def @func_7618(%var_7612: Tensor[(468), float32]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(60), float32], Tensor[(468), float32]) {
  %754 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %755 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %756 = cast(%var_7612, dtype="float32") /* ty=Tensor[(468), float32] */;
  %757 = reshape(%756, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float32] */;
  %758 = @func_5412(%757) /* ty=(Tensor[(6, 13, 6), float32], Tensor[(15, 2, 2), bool], Tensor[(60), float32]) */;
  %759 = %754.1;
  %760 = %755.0;
  %761 = %758.2;
  (%759, %760, %761, %var_7612)
}

def @func_12293() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(5, 11, 2), float64]) {
  %762 = @func_7467() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %763 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
  %764 = @func_11224() /* ty=(Tensor[(30, 2), bool],) */;
  %765 = %764.0;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %767 = shape_of(%763, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%763, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %770 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %771 = %762.1;
  %772 = @func_8409() /* ty=Tensor[(30, 2), bool] */;
  %773 = multiply(%768, %769) /* ty=Tensor[(15, 2, 2), float32] */;
  %774 = @func_11660() /* ty=Tensor[(5, 11, 2), float64] */;
  (%770, %771, %772, %773, %774)
}

def @func_6111() -> Tensor[(15, 2, 2), bool] {
  @func_4122() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_8530() -> (Tensor[(30, 2), uint16],) {
  %775 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %776 = %775.0;
  (%776,)
}

def @func_12385() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(1352), int32], Tensor[(30, 2), float32], int32, Tensor[(13, 104), float64]) {
  %777 = @func_10638() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %778 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
  %779 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 104), float64] */, dtype="float64") /* ty=Tensor[(13, 104), float64] */;
  %780 = reshape(%779, newshape=[1352]) /* ty=Tensor[(1352), float64] */;
  %781 = @func_8896(%780) /* ty=(Tensor[(1352), int32], Tensor[(30, 2), float64]) */;
  %782 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %783 = reshape(%782, newshape=[]) /* ty=int32 */;
  %784 = @func_11753(%783) /* ty=(Tensor[(30, 2), float64], Tensor[(30, 2), float32], int32) */;
  %785 = cast(meta[relay.Constant][23] /* ty=Tensor[(13, 104), float64] */, dtype="float64") /* ty=Tensor[(13, 104), float64] */;
  %786 = %777.0;
  %787 = %778.1;
  %788 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  %789 = %781.0;
  %790 = %784.1;
  %791 = sqrt(%785) /* ty=Tensor[(13, 104), float64] */;
  (%786, %787, %788, %789, %790, -1 /* ty=int32 */, %791)
}

def @func_2930() -> (Tensor[(30, 2), bool],) {
  %792 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %793 = %792.2;
  (%793,)
}

def @func_9847() -> (Tensor[(15, 2, 2), float32],) {
  %794 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %795 = %794.0;
  (%795,)
}

def @func_17386() -> Tensor[(15, 2, 2), float32] {
  %796 = @func_14913() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(2240), float64]) */;
  %796.3
}

def @func_5590() -> Tensor[(15, 2, 2), float64] {
  %797 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %798 = %797.2;
  %799 = cast(%798, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  atanh(%799) /* ty=Tensor[(15, 2, 2), float64] */
}

def @func_10995(%var_10931: int32) -> (Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %800 = cast(%var_10931, dtype="int32") /* ty=int32 */;
  %801 = reshape(%800, newshape=[]) /* ty=int32 */;
  %802 = @func_5623(%801) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
  %803 = %802.3;
  %804 = cast(%803, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %805 = @func_8576() /* ty=(Tensor[(30, 2), bool],) */;
  %806 = @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */;
  %807 = %805.0;
  %808 = cast(%807, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %809 = reshape(%808, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %810 = @func_2875(%809) /* ty=(Tensor[(30, 2), uint16],) */;
  %811 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  %812 = @func_10715() /* ty=Tensor[(15, 2, 2), float32] */;
  %813 = log2(%804) /* ty=Tensor[(30, 2), float64] */;
  %814 = %806.1;
  %815 = @func_9517() /* ty=Tensor[(30, 2), bool] */;
  %816 = %810.0;
  (%811, %var_10931, %812, %813, %807, %814, %815, %816)
}

def @func_18297() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %817 = @func_12700() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) */;
  %818 = @func_10703() /* ty=(Tensor[(30, 2), bool],) */;
  %819 = %817.1;
  %820 = %818.0;
  %821 = @func_10715() /* ty=Tensor[(15, 2, 2), float32] */;
  (%819, %820, %821)
}

def @func_10421() -> Tensor[(30, 2), bool] {
  @func_9287() /* ty=Tensor[(30, 2), bool] */
}

def @func_9374() -> (Tensor[(30, 2), float32],) {
  %822 = @func_8171() /* ty=Tensor[(30, 2), float32] */;
  (%822,)
}

def @func_5350() -> Tensor[(30, 2), bool] {
  %823 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %823.2
}

def @func_5398() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %824 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
  %825 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  (%824, %825)
}

def @func_11073() -> (Tensor[(30, 2), uint16],) {
  %826 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %827 = %826.0;
  (%827,)
}

def @func_813(%var_807: Tensor[(13, 8, 13), float64]) -> (Tensor[(13, 8, 13), float64],) {
  %828 = cast(%var_807, dtype="float64") /* ty=Tensor[(13, 8, 13), float64] */;
  %829 = exp(%828) /* ty=Tensor[(13, 8, 13), float64] */;
  (%829,)
}

def @func_3793() -> Tensor[(30, 2), float32] {
  %830 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %830.1
}

def @func_10197() -> (Tensor[(15, 2, 2), float64], Tensor[(16, 10, 14), float64], Tensor[(2240), float64], Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %831 = @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */;
  %832 = cast(meta[relay.Constant][24] /* ty=Tensor[(2240), float64] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
  %833 = reshape(%832, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float64] */;
  %834 = @func_7508(%833) /* ty=(Tensor[(30, 2), float32], Tensor[(16, 10, 14), float64]) */;
  %835 = @func_9834() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
  %836 = %835.0;
  %837 = cast(%836, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %838 = @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
  %839 = @func_7467() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %840 = %831.0;
  %841 = %834.1;
  %842 = sin(%837) /* ty=Tensor[(15, 2, 2), float64] */;
  %843 = %838.1;
  %844 = %839.3;
  (%840, %841, meta[relay.Constant][24] /* ty=Tensor[(2240), float64] */, %842, %843, %844)
}

def @func_8084() -> (Tensor[(15, 2, 2), float32],) {
  %845 = @func_7964() /* ty=Tensor[(15, 2, 2), float32] */;
  (%845,)
}

def @func_2573() -> (Tensor[(30, 2), bool],) {
  %846 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %847 = %846.0;
  (%847,)
}

def @func_3568() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  %848 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %849 = %848.0;
  %850 = cast(%849, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %851 = cast(%849, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %852 = reshape(%850, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %853 = reshape(%851, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %854 = @func_2060(%852, %853) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %855 = %854.0;
  (%849, %855)
}

def @func_17708() -> Tensor[(15, 2, 2), bool] {
  @func_11352() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_4695() -> (Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) {
  %856 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %857 = %856.0;
  %858 = @func_3823() /* ty=Tensor[(15, 2, 2), float32] */;
  (%857, %858)
}

def @func_16908() -> (Tensor[(30, 2), bool], Tensor[(468), float32], Tensor[(468), float32]) {
  %859 = @func_12522() /* ty=(Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %860 = cast(meta[relay.Constant][25] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
  %861 = reshape(%860, newshape=[468]) /* ty=Tensor[(468), float32] */;
  %862 = @func_7618(%861) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(60), float32], Tensor[(468), float32]) */;
  %863 = %859.4;
  %864 = %862.3;
  (%863, %864, meta[relay.Constant][25] /* ty=Tensor[(468), float32] */)
}

def @func_12814() -> (Tensor[(1352), float64],) {
  %865 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %866 = %865.1;
  (%866,)
}

def @func_7666() -> (Tensor[(30, 2), bool],) {
  %867 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %868 = %867.1;
  (%868,)
}

def @func_9990() -> (Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) {
  %869 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %870 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  %871 = cast(%870, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %872 = reshape(%871, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %873 = @func_2726(%872) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %874 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
  %875 = %869.1;
  %876 = %873.0;
  %877 = %874.0;
  (%875, %870, %876, %877)
}

def @func_13393() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %878 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %879 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %880 = %878.2;
  %881 = %879.0;
  (%880, %881)
}

def @func_14658() -> (Tensor[(5, 11, 2), float64],) {
  %882 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %883 = %882.0;
  (%883,)
}

def @func_10478() -> Tensor[(15, 2, 2), bool] {
  %884 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
  %884.3
}

def @func_11625() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %885 = @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %886 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %887 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %888 = %885.0;
  %889 = %886.0;
  %890 = %887.0;
  (%888, %889, %890)
}

def @func_12990() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %891 = @func_6712() /* ty=Tensor[(30, 2), bool] */;
  %892 = @func_10904() /* ty=Tensor[(30, 2), float64] */;
  (%891, %892)
}

def @func_9350() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %893 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %894 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  %895 = %893.2;
  (%894, %895)
}

def @func_7729(%var_7693: Tensor[(13, 13, 1), float32]) -> (Tensor[(15, 2, 2), float32], Tensor[(13, 13, 60), bool], Tensor[(13, 13, 1), float64]) {
  %896 = cast(meta[relay.Constant][26] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %897 = reshape(%896, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %898 = @func_2726(%897) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %899 = cast(%var_7693, dtype="float32") /* ty=Tensor[(13, 13, 1), float32] */;
  %900 = atan(%899) /* ty=Tensor[(13, 13, 1), float32] */;
  %901 = cast(%900, dtype="bool") /* ty=Tensor[(13, 13, 1), bool] */;
  %902 = cast(meta[relay.Constant][26] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
  %903 = cast(%900, dtype="float64") /* ty=Tensor[(13, 13, 1), float64] */;
  %904 = %898.3;
  %905 = greater(%901, %902) /* ty=Tensor[(13, 13, 60), bool] */;
  %906 = sqrt(%903) /* ty=Tensor[(13, 13, 1), float64] */;
  (%904, %905, %906)
}

def @func_10715() -> Tensor[(15, 2, 2), float32] {
  @func_10072() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_14213(%var_14103: Tensor[(5, 1, 16), int16], %var_14104: Tensor[(5, 10, 16), int16], %var_14186: Tensor[(90), int16]) -> (Tensor[(5, 10, 16), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], int32, Tensor[(3, 6, 5), int16], Tensor[(90), int16], Tensor[(5, 10, 16), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %907 = cast(%var_14103, dtype="bool") /* ty=Tensor[(5, 1, 16), bool] */;
  %908 = cast(%var_14104, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %909 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %910 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %911 = reshape(%910, newshape=[]) /* ty=int32 */;
  %912 = @func_10995(%911) /* ty=(Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %913 = cast(%var_14186, dtype="int16") /* ty=Tensor[(90), int16] */;
  %914 = cast(%var_14186, dtype="int16") /* ty=Tensor[(90), int16] */;
  %915 = reshape(%913, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), int16] */;
  %916 = reshape(%914, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), int16] */;
  %917 = cast(%var_14104, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %918 = log10(%917) /* ty=Tensor[(5, 10, 16), float32] */;
  %919 = cast(%918, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %920 = tan(%919) /* ty=Tensor[(5, 10, 16), float64] */;
  %921 = cast(%920, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %922 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %923 = %909.0;
  %924 = cast(%923, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %925 = reshape(%924, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %926 = @func_9690(%925) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) */;
  %927 = not_equal(%907, %908) /* ty=Tensor[(5, 10, 16), bool] */;
  %928 = @func_11045() /* ty=Tensor[(15, 2, 2), bool] */;
  %929 = %912.2;
  %930 = @func_7086(%915, %916) /* ty=Tensor[(3, 6, 5), int16] */;
  %931 = sinh(%921) /* ty=Tensor[(5, 10, 16), float32] */;
  %932 = %922.0;
  %933 = %926.2;
  (%927, %923, %928, %929, -10 /* ty=int32 */, %930, %var_14186, %931, %932, %933)
}

def @func_11999() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(30, 2), float32]) {
  %934 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %935 = @func_10638() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %936 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %937 = %934.0;
  %938 = %935.1;
  %939 = %936.0;
  (%937, %938, %939)
}

def @func_12144() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32]) {
  %940 = @func_11073() /* ty=(Tensor[(30, 2), uint16],) */;
  %941 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %942 = %940.0;
  %943 = %941.0;
  (%942, %943)
}

def @func_8986() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  %944 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %945 = %944.1;
  %946 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
  (%945, %946)
}

def @func_13313() -> (Tensor[(30, 2), uint16],) {
  %947 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %948 = %947.0;
  (%948,)
}

def @func_17214() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %949 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %950 = @func_6049() /* ty=(Tensor[(30, 2), bool],) */;
  %951 = %949.0;
  %952 = %950.0;
  (%951, %952)
}

def @func_6848() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %953 = @func_5497() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %954 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %955 = %953.0;
  %956 = %954.0;
  (%955, %956)
}

def @func_15691() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  %957 = @func_13427() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %958 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %959 = %957.0;
  %960 = %958.0;
  (%959, %960)
}

def @func_15732() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %961 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %962 = %961.0;
  %963 = @func_7964() /* ty=Tensor[(15, 2, 2), float32] */;
  (%962, %963)
}

def @func_5947() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %964 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %965 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
  %966 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  %967 = %964.0;
  %968 = %965.0;
  (%966, %967, %968)
}

def @func_3598() -> Tensor[(30, 2), float32] {
  %969 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %970 = %969.0;
  %971 = cast(%970, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  exp(%971) /* ty=Tensor[(30, 2), float32] */
}

def @func_15092() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %972 = @func_12522() /* ty=(Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %973 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %974 = @func_13529() /* ty=(Tensor[(30, 2), uint16],) */;
  %975 = %972.1;
  %976 = %973.0;
  %977 = %974.0;
  (%975, %976, %977)
}

def @func_7982() -> (Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) {
  %978 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %979 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  %980 = %978.0;
  (%979, %980)
}

def @func_9517() -> Tensor[(30, 2), bool] {
  @func_3559() /* ty=Tensor[(30, 2), bool] */
}

def @func_13623() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %981 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
  %982 = @func_8130() /* ty=Tensor[(30, 2), bool] */;
  %983 = %981.0;
  (%982, %983)
}

def @func_14258() -> (Tensor[(15, 2, 2), float32],) {
  %984 = @func_6363() /* ty=Tensor[(15, 2, 2), float32] */;
  (%984,)
}

def @func_15849(%var_15826: Tensor[(64), float32]) -> (Tensor[(15, 2, 2), float32], Tensor[(64), float32], Tensor[(1352), uint32], Tensor[(1352), float64]) {
  %985 = @func_11625() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
  %986 = cast(%var_15826, dtype="float32") /* ty=Tensor[(64), float32] */;
  %987 = reshape(%986, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %988 = @func_1136(%987) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */;
  %989 = %988.1;
  %990 = cast(meta[relay.Constant][27] /* ty=Tensor[(1352), float64] */, dtype="uint32") /* ty=Tensor[(1352), uint32] */;
  %991 = shape_of(%989, dtype="int32") /* ty=Tensor[(1), int32] */;
  %992 = cast(%989, dtype="uint32") /* ty=Tensor[(1352), uint32] */;
  %993 = dyn.reshape(%990, %991, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %994 = cast(meta[relay.Constant][27] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %995 = %985.2;
  %996 = bitwise_xor(%992, %993) /* ty=Tensor[(1352), uint32] */;
  %997 = log(%994) /* ty=Tensor[(1352), float64] */;
  (%995, %var_15826, %996, %997)
}

def @func_4737(%var_4724: Tensor[(30, 2), float32]) -> (Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) {
  %998 = @func_3793() /* ty=Tensor[(30, 2), float32] */;
  %999 = cast(%var_4724, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %1000 = shape_of(%998, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1001 = cast(%998, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %1002 = dyn.reshape(%999, %1000, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1003 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %1004 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %1005 = divide(%1001, %1002) /* ty=Tensor[(30, 2), float64] */;
  %1006 = %1003.0;
  %1007 = %1004.0;
  %1008 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  (%1005, %1006, %1007, %1008)
}

def @func_5623(%var_5596: int32) -> (Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %1009 = cast(%var_5596, dtype="int32") /* ty=int32 */;
  %1010 = cast(meta[relay.Constant][28] /* ty=Tensor[(5, 12, 3), int32] */, dtype="int32") /* ty=Tensor[(5, 12, 3), int32] */;
  %1011 = right_shift(%1009, %1010) /* ty=Tensor[(5, 12, 3), int32] */;
  %1012 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  %1013 = @func_4893() /* ty=Tensor[(30, 2), float32] */;
  %1014 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  (%1011, %1012, %1013, %1014)
}

def @func_6363() -> Tensor[(15, 2, 2), float32] {
  @func_4672() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_14050() -> Tensor[(15, 2, 2), float64] {
  %1015 = @func_8986() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %1015.1
}

def @func_5458() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) {
  %1016 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %1017 = %1016.2;
  %1018 = cast(%1017, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %1019 = cast(meta[relay.Constant][29] /* ty=Tensor[(1352, 1), float64] */, dtype="float64") /* ty=Tensor[(1352, 1), float64] */;
  %1020 = reshape(%1018, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
  %1021 = reshape(%1019, newshape=[338, 4]) /* ty=Tensor[(338, 4), float64] */;
  %1022 = @func_2985(%1020, %1021) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) */;
  %1023 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %1024 = %1022.0;
  %1025 = %1023.1;
  (%1017, %1024, meta[relay.Constant][29] /* ty=Tensor[(1352, 1), float64] */, %1025)
}

def @func_9629() -> Tensor[(30, 2), bool] {
  @func_3559() /* ty=Tensor[(30, 2), bool] */
}

def @func_3845() -> Tensor[(30, 2), int16] {
  %1026 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %1027 = %1026.2;
  %1028 = cast(meta[relay.Constant][30] /* ty=Tensor[(30, 2), uint16] */, dtype="int16") /* ty=Tensor[(30, 2), int16] */;
  %1029 = shape_of(%1027, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1030 = cast(%1027, dtype="int16") /* ty=Tensor[(30, 2), int16] */;
  %1031 = dyn.reshape(%1028, %1029, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  minimum(%1030, %1031) /* ty=Tensor[(30, 2), int16] */
}

def @func_15047() -> (Tensor[(30, 2), float32], Tensor[(15, 2, 2), uint32]) {
  %1032 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %1033 = %1032.1;
  %1034 = cast(%1033, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %1035 = reshape(%1034, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %1036 = @func_9763(%1035) /* ty=(Tensor[(15, 2, 2), uint32],) */;
  %1037 = %1036.0;
  (%1033, %1037)
}

def @func_12632(%var_12629: Tensor[(1152), uint64]) -> (Tensor[(30, 2), int16], Tensor[(30, 2), float32], Tensor[(1152), uint64]) {
  %1038 = cast(%var_12629, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %1039 = reshape(%1038, newshape=[1152]) /* ty=Tensor[(1152), uint64] */;
  %1040 = @func_12060(%1039) /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(1152), uint64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], int32, Tensor[(15, 2, 2), float32]) */;
  %1041 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  %1042 = %1040.0;
  (%1041, %1042, %var_12629)
}

def @func_2875(%var_2870: Tensor[(30, 2), bool]) -> (Tensor[(30, 2), uint16],) {
  %1043 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %1044 = %1043.0;
  %1045 = cast(%var_2870, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %1046 = shape_of(%1044, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1047 = cast(%1044, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %1049 = bitwise_and(%1047, %1048) /* ty=Tensor[(30, 2), uint16] */;
  (%1049,)
}

def @func_2893() -> (Tensor[(30, 2), float32],) {
  %1050 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %1051 = %1050.0;
  %1052 = cast(%1051, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %1053 = sinh(%1052) /* ty=Tensor[(30, 2), float32] */;
  (%1053,)
}

def @func_10590() -> (Tensor[(30, 2), float32],) {
  %1054 = @func_9374() /* ty=(Tensor[(30, 2), float32],) */;
  %1055 = %1054.0;
  (%1055,)
}

def @func_2665() -> (Tensor[(15, 2, 2), float32],) {
  %1056 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %1057 = %1056.1;
  %1058 = cast(%1057, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %1059 = cast(%1057, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %1060 = reshape(%1058, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %1061 = reshape(%1059, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %1062 = @func_2060(%1060, %1061) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %1063 = %1062.1;
  %1064 = cast(%1063, dtype="int16") /* ty=Tensor[(15, 2, 2), int16] */;
  %1065 = shape_of(%1057, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1066 = cast(%1057, dtype="int16") /* ty=Tensor[(15, 2, 2), int16] */;
  %1067 = dyn.reshape(%1064, %1065, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %1068 = minimum(%1066, %1067) /* ty=Tensor[(15, 2, 2), int16] */;
  %1069 = cast(%1068, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %1070 = log10(%1069) /* ty=Tensor[(15, 2, 2), float32] */;
  (%1070,)
}

def @func_14967() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) {
  %1071 = @func_13856() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %1072 = @func_8020() /* ty=Tensor[(30, 2), bool] */;
  %1073 = cast(%1072, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1074 = reshape(%1073, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %1075 = @func_9690(%1074) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) */;
  %1076 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %1077 = @func_7008() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %1078 = @func_7207() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1079 = %1071.3;
  %1080 = %1075.2;
  %1081 = %1076.0;
  %1082 = %1077.2;
  %1083 = %1078.0;
  (%1079, %1072, %1080, %1081, %1082, %1083)
}

def @func_6272() -> (Tensor[(30, 2), uint16],) {
  %1084 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  (%1084,)
}

def @func_6169(%var_6154: Tensor[(12, 16, 5), uint8], %var_6155: Tensor[(12, 16, 5), uint8]) -> (Tensor[(12, 16, 5), uint8], Tensor[(30, 2), bool]) {
  %1085 = cast(%var_6155, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %1086 = shape_of(%var_6154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1087 = cast(%var_6154, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %1088 = dyn.reshape(%1085, %1086, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %1089 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %1090 = multiply(%1087, %1088) /* ty=Tensor[(12, 16, 5), uint8] */;
  %1091 = %1089.0;
  (%1090, %1091)
}

def @func_10044() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) {
  %1092 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %1093 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %1094 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
  %1095 = %1092.0;
  %1096 = %1093.0;
  (%1094, %1095, %1096)
}

def @func_3955() -> (Tensor[(30, 2), uint16],) {
  %1097 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %1098 = %1097.2;
  (%1098,)
}

def @func_16129() -> (Tensor[(30, 2), uint16], Tensor[(5, 11, 2), float64]) {
  %1099 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %1100 = @func_5078() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %1101 = %1099.0;
  %1102 = %1100.0;
  (%1101, %1102)
}

def @func_13856() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  %1103 = @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
  %1104 = @func_11550() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %1105 = @func_8986() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %1106 = %1103.0;
  %1107 = @func_10826() /* ty=Tensor[(30, 2), bool] */;
  %1108 = %1104.1;
  %1109 = %1105.1;
  (%1106, %1107, %1108, %1109)
}

def @func_12700() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) {
  %1110 = @func_7982() /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) */;
  %1111 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %1112 = %1111.2;
  %1113 = cast(%1112, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %1114 = reshape(%1113, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float64] */;
  %1115 = @func_8852(%1114) /* ty=(Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) */;
  %1116 = %1110.1;
  %1117 = %1115.0;
  (%1116, %1112, %1117)
}

def @func_15669(%var_15612: Tensor[(1040), float32]) -> (Tensor[(30, 2), uint16], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32]) {
  %1118 = @func_13529() /* ty=(Tensor[(30, 2), uint16],) */;
  %1119 = cast(-2.53848f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1120 = cast(%var_15612, dtype="float32") /* ty=Tensor[(1040), float32] */;
  %1121 = reshape(%1119, newshape=[]) /* ty=float32 */;
  %1122 = reshape(%1120, newshape=[13, 16, 5]) /* ty=Tensor[(13, 16, 5), float32] */;
  %1123 = @func_4157(%1121, %1122) /* ty=(Tensor[(13, 16, 5), float32],) */;
  %1124 = @func_9278() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %1125 = @func_9990() /* ty=(Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) */;
  %1126 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1127 = %1118.0;
  %1128 = %1123.0;
  %1129 = %1124.2;
  %1130 = %1125.3;
  %1131 = %1126.0;
  (%1127, %1128, -2.53848f /* ty=float32 */, %var_15612, %1129, %1130, %1131)
}

def @func_6253() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(1040), float32], float32) {
  %1132 = @func_5078() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %1133 = cast(3.97294f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %1134 = reshape(%1133, newshape=[]) /* ty=float32 */;
  %1135 = @func_6029(%1134) /* ty=(Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %1136 = @func_4242() /* ty=Tensor[(30, 2), bool] */;
  %1137 = %1132.0;
  %1138 = %1135.3;
  (%1136, %1137, %1138, 3.97294f /* ty=float32 */)
}

def @func_15527() -> (Tensor[(30, 2), int16],) {
  %1139 = @func_5023() /* ty=(Tensor[(30, 2), int16],) */;
  %1140 = %1139.0;
  (%1140,)
}

def @func_10638() -> (Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) {
  %1141 = @func_7008() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %1142 = %1141.2;
  %1143 = @func_10396() /* ty=Tensor[(5, 11, 2), float64] */;
  (%1142, %1143)
}

def @func_6712() -> Tensor[(30, 2), bool] {
  @func_5350() /* ty=Tensor[(30, 2), bool] */
}

def @func_5788() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %1144 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %1145 = %1144.1;
  %1146 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  (%1145, %1146)
}

def @func_13427() -> (Tensor[(15, 2, 2), float32],) {
  %1147 = @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1148 = %1147.0;
  (%1148,)
}

def @func_11907() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) {
  %1149 = @func_10715() /* ty=Tensor[(15, 2, 2), float32] */;
  %1150 = cast(%1149, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %1151 = @func_8020() /* ty=Tensor[(30, 2), bool] */;
  %1152 = sigmoid(%1150) /* ty=Tensor[(15, 2, 2), float32] */;
  %1153 = @func_11352() /* ty=Tensor[(15, 2, 2), bool] */;
  (%1151, %1152, %1153)
}

def @func_8222() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), float64]) {
  %1154 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
  %1155 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  (%1154, %1155)
}

def @func_8171() -> Tensor[(30, 2), float32] {
  %1156 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %1156.0
}

def @func_10501() -> (Tensor[(30, 2), bool],) {
  %1157 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %1158 = %1157.1;
  (%1158,)
}

def @func_18329() -> Tensor[(30, 2), uint16] {
  %1159 = @func_15210() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) */;
  %1159.0
}

def @func_6514(%var_6485: Tensor[(30, 2), bool]) -> Tensor[(30, 2), uint64] {
  %1160 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %1161 = %1160.0;
  %1162 = cast(%var_6485, dtype="uint64") /* ty=Tensor[(30, 2), uint64] */;
  %1163 = shape_of(%1161, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1164 = cast(%1161, dtype="uint64") /* ty=Tensor[(30, 2), uint64] */;
  %1165 = dyn.reshape(%1162, %1163, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  right_shift(%1164, %1165) /* ty=Tensor[(30, 2), uint64] */
}

def @func_4893() -> Tensor[(30, 2), float32] {
  @func_3598() /* ty=Tensor[(30, 2), float32] */
}

def @func_13822(%var_13810: Tensor[(2704), float64]) -> (Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64], Tensor[(2704), float64], Tensor[(30, 2), uint16]) {
  %1166 = cast(%var_13810, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %1167 = cast(%var_13810, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %1168 = reshape(%1166, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %1169 = reshape(%1167, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %1170 = @func_8771(%1168, %1169) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */;
  %1171 = @func_13529() /* ty=(Tensor[(30, 2), uint16],) */;
  %1172 = @func_12535() /* ty=Tensor[(30, 2), bool] */;
  %1173 = %1170.0;
  %1174 = %1171.0;
  (%1172, %1173, %var_13810, %1174)
}

def @func_5120() -> Tensor[(30, 2), float64] {
  %1175 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %1176 = %1175.0;
  %1177 = cast(%1176, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  atanh(%1177) /* ty=Tensor[(30, 2), float64] */
}

def @func_10072() -> Tensor[(15, 2, 2), float32] {
  %1178 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1178.0
}

def @func_5023() -> (Tensor[(30, 2), int16],) {
  %1179 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  (%1179,)
}

def @func_15746() -> Tensor[(15, 2, 2), float32] {
  @func_13667() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_2551() -> (Tensor[(30, 2), bool],) {
  %1180 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %1181 = %1180.0;
  (%1181,)
}

def @func_2522() -> (Tensor[(30, 2), bool],) {
  %1182 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %1183 = %1182.2;
  (%1183,)
}

def @func_16315() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %1184 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %1185 = @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1186 = %1184.0;
  %1187 = %1185.0;
  (%1186, %1187)
}

def @func_8669() -> (Tensor[(15, 13, 6), float32], Tensor[(15, 2, 2), float32]) {
  %1188 = cast(meta[relay.Constant][31] /* ty=Tensor[(15, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 6), float32] */;
  %1189 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1190 = atan(%1188) /* ty=Tensor[(15, 13, 6), float32] */;
  %1191 = %1189.0;
  (%1190, %1191)
}

def @func_17485() -> (Tensor[(30, 2), bool],) {
  %1192 = @func_8409() /* ty=Tensor[(30, 2), bool] */;
  (%1192,)
}

def @func_10883() -> (Tensor[(30, 2), uint16],) {
  %1193 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %1194 = %1193.0;
  (%1194,)
}

def @func_11753(%var_11733: int32) -> (Tensor[(30, 2), float64], Tensor[(30, 2), float32], int32) {
  %1195 = cast(%var_11733, dtype="int32") /* ty=int32 */;
  %1196 = reshape(%1195, newshape=[]) /* ty=int32 */;
  %1197 = @func_5623(%1196) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
  %1198 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  %1199 = %1197.1;
  (%1198, %1199, %var_11733)
}

def @func_3328() -> (Tensor[(30, 2), bool],) {
  %1200 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %1201 = %1200.0;
  (%1201,)
}

def @func_3823() -> Tensor[(15, 2, 2), float32] {
  %1202 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %1202.1
}

def @func_8409() -> Tensor[(30, 2), bool] {
  %1203 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %1203.2
}

def @func_7375() -> (Tensor[(15, 2, 2), float32],) {
  %1204 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  (%1204,)
}

def @func_12729(%var_12721: Tensor[(30, 2), float32]) -> Tensor[(30, 2), bool] {
  %1205 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %1206 = %1205.0;
  %1207 = cast(%var_12721, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1208 = shape_of(%1206, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1209 = cast(%1206, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1210 = dyn.reshape(%1207, %1208, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%1209, %1210) /* ty=Tensor[(30, 2), bool] */
}

def @func_4122() -> Tensor[(15, 2, 2), bool] {
  %1211 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %1211.3
}

def @func_10703() -> (Tensor[(30, 2), bool],) {
  %1212 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
  %1213 = %1212.0;
  (%1213,)
}

def @func_15137() -> (Tensor[(2, 5, 9), int64], Tensor[(30, 2), bool], Tensor[(2, 5, 9), float32]) {
  %1214 = cast(meta[relay.Constant][33] /* ty=Tensor[(2, 5, 9), int64] */, dtype="int64") /* ty=Tensor[(2, 5, 9), int64] */;
  %1215 = shape_of(meta[relay.Constant][32] /* ty=Tensor[(2, 5, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1216 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 5, 9), int64] */, dtype="int64") /* ty=Tensor[(2, 5, 9), int64] */;
  %1217 = dyn.reshape(%1214, %1215, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %1218 = @func_10703() /* ty=(Tensor[(30, 2), bool],) */;
  %1219 = cast(meta[relay.Constant][32] /* ty=Tensor[(2, 5, 9), int64] */, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
  %1220 = right_shift(%1216, %1217) /* ty=Tensor[(2, 5, 9), int64] */;
  %1221 = %1218.0;
  %1222 = rsqrt(%1219) /* ty=Tensor[(2, 5, 9), float32] */;
  (%1220, %1221, %1222)
}

def @func_3111() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %1223 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %1224 = cast(%1223, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %1225 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %1226 = %1225.0;
  %1227 = cast(%1226, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1228 = reshape(%1227, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %1229 = @func_2875(%1228) /* ty=(Tensor[(30, 2), uint16],) */;
  %1230 = sqrt(%1224) /* ty=Tensor[(15, 2, 2), float64] */;
  %1231 = %1229.0;
  (%1230, %1226, %1231)
}

def @func_10234() -> (Tensor[(15, 2, 2), float32],) {
  %1232 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1233 = %1232.0;
  (%1233,)
}

def @func_16425() -> Tensor[(15, 2, 2), float32] {
  %1234 = @func_14258() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1234.0
}

def @func_16618() -> (Tensor[(6, 12, 5), float64],) {
  %1235 = @func_4695() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) */;
  %1236 = %1235.0;
  (%1236,)
}

def @func_9472(%var_9457: Tensor[(15, 2, 2), float32]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), uint64]) {
  %1237 = @func_7784() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
  %1238 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %1239 = @func_7207() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1240 = %1239.0;
  %1241 = cast(%var_9457, dtype="uint64") /* ty=Tensor[(15, 2, 2), uint64] */;
  %1242 = shape_of(%1240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1243 = cast(%1240, dtype="uint64") /* ty=Tensor[(15, 2, 2), uint64] */;
  %1244 = dyn.reshape(%1241, %1242, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %1245 = %1237.3;
  %1246 = %1238.2;
  %1247 = right_shift(%1243, %1244) /* ty=Tensor[(15, 2, 2), uint64] */;
  (%1245, %1246, %1247)
}

def @func_18425() -> (Tensor[(30, 2), float32],) {
  %1248 = @func_17942() /* ty=(Tensor[(30, 2), float32],) */;
  %1249 = %1248.0;
  (%1249,)
}

def @func_9287() -> Tensor[(30, 2), bool] {
  %1250 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %1250.0
}

def @func_9065() -> Tensor[(30, 2), uint16] {
  %1251 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %1251.0
}

def @func_5497() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) {
  %1252 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %1253 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %1254 = %1252.0;
  %1255 = %1253.0;
  (%1254, %1255)
}

def @func_14668() -> (Tensor[(15, 2, 2), float32],) {
  %1256 = @func_10234() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1257 = %1256.0;
  (%1257,)
}

def @func_17551() -> (Tensor[(30, 2), uint16],) {
  %1258 = @func_7316() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool]) */;
  %1259 = %1258.0;
  (%1259,)
}

def @func_17677() -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %1260 = @func_6049() /* ty=(Tensor[(30, 2), bool],) */;
  %1261 = @func_15865() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), uint16]) */;
  %1262 = %1260.0;
  %1263 = %1261.1;
  (%1262, %1263)
}

def @func_13667() -> Tensor[(15, 2, 2), float32] {
  @func_6568() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_8697() -> (Tensor[(30, 2), uint16],) {
  %1264 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %1265 = %1264.0;
  (%1265,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_16530() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), int64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  %11 = fn () -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), int64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
    %0 = @func_15210() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) */;
    %1 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %2 = %1.0;
    %3 = cast(%2, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %4 = reshape(%3, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
    %5 = @func_4086(%4) /* ty=(Tensor[(30, 2), int64], Tensor[(30, 2), float32]) */;
    %6 = @func_12599() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */;
    %7 = %0.2;
    %8 = %5.0;
    %9 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
    %10 = %6.0;
    (%7, %2, %8, %9, %10)
  };
  %11() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), int64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) */
}

def @func_8899(%var_8897: Tensor[(1352), float64]) -> (Tensor[(1352), int32], Tensor[(30, 2), float64]) {
  @func_8896(%var_8897) /* ty=(Tensor[(1352), int32], Tensor[(30, 2), float64]) */
}

def @func_17838() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %12 = @func_16332() /* ty=(Tensor[(30, 2), bool],) */;
  %13 = @func_11907() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */;
  %14 = %12.0;
  %15 = %13.0;
  (%14, %15)
}

def @func_6938() -> (Tensor[(30, 2), float32],) {
  %16 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  (%16,)
}

def @func_8409() -> Tensor[(30, 2), bool] {
  %17 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %17.2
}

def @func_16332() -> (Tensor[(30, 2), bool],) {
  %18 = @func_6712() /* ty=Tensor[(30, 2), bool] */;
  (%18,)
}

def @func_5459() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) {
  %29 = fn () -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) {
    %19 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
    %20 = %19.2;
    %21 = cast(%20, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(1352, 1), float64] */, dtype="float64") /* ty=Tensor[(1352, 1), float64] */;
    %23 = reshape(%21, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
    %24 = reshape(%22, newshape=[338, 4]) /* ty=Tensor[(338, 4), float64] */;
    %25 = @func_2985(%23, %24) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) */;
    %26 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
    %27 = %25.0;
    %28 = %26.1;
    (%20, %27, meta[relay.Constant][0] /* ty=Tensor[(1352, 1), float64] */, %28)
  };
  %29() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */
}

def @func_12632(%var_12629: Tensor[(1152), uint64]) -> (Tensor[(30, 2), int16], Tensor[(30, 2), float32], Tensor[(1152), uint64]) {
  %30 = cast(%var_12629, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %31 = reshape(%30, newshape=[1152]) /* ty=Tensor[(1152), uint64] */;
  %32 = @func_12060(%31) /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(1152), uint64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], int32, Tensor[(15, 2, 2), float32]) */;
  %33 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  %34 = %32.0;
  (%33, %34, %var_12629)
}

def @func_11625() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %35 = @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %36 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %37 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %38 = %35.0;
  %39 = %36.0;
  %40 = %37.0;
  (%38, %39, %40)
}

def @func_16317() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  @func_16315() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */
}

def @func_9116() -> Tensor[(30, 2), bool] {
  %41 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %41.1
}

def @func_5351() -> Tensor[(30, 2), bool] {
  %43 = fn () -> Tensor[(30, 2), bool] {
    %42 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
    %42.2
  };
  %43() /* ty=Tensor[(30, 2), bool] */
}

def @func_15747() -> Tensor[(15, 2, 2), float32] {
  %44 = fn () -> Tensor[(15, 2, 2), float32] {
    @func_13667() /* ty=Tensor[(15, 2, 2), float32] */
  };
  %44() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_10074() -> Tensor[(15, 2, 2), float32] {
  @func_10072() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_10828() -> Tensor[(30, 2), bool] {
  @func_10826() /* ty=Tensor[(30, 2), bool] */
}

def @func_16334() -> (Tensor[(30, 2), bool],) {
  @func_16332() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_16129() -> (Tensor[(30, 2), uint16], Tensor[(5, 11, 2), float64]) {
  %45 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %46 = @func_5078() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %47 = %45.0;
  %48 = %46.0;
  (%47, %48)
}

def @func_17034() -> (Tensor[(30, 2), int16], Tensor[(30, 2), bool]) {
  %52 = fn () -> (Tensor[(30, 2), int16], Tensor[(30, 2), bool]) {
    %49 = @func_15527() /* ty=(Tensor[(30, 2), int16],) */;
    %50 = %49.0;
    %51 = @func_15579() /* ty=Tensor[(30, 2), bool] */;
    (%50, %51)
  };
  %52() /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), bool]) */
}

def @func_15732() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %53 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %54 = %53.0;
  %55 = @func_7964() /* ty=Tensor[(15, 2, 2), float32] */;
  (%54, %55)
}

def @func_7377() -> (Tensor[(15, 2, 2), float32],) {
  @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_6850() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_4895() -> Tensor[(30, 2), float32] {
  @func_4893() /* ty=Tensor[(30, 2), float32] */
}

def @func_10785() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %64 = fn () -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
    %56 = @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */;
    %57 = %56.0;
    %58 = cast(%57, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %59 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %60 = acosh(%58) /* ty=Tensor[(15, 2, 2), float64] */;
    %61 = @func_7964() /* ty=Tensor[(15, 2, 2), float32] */;
    %62 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
    %63 = %59.1;
    (%60, %61, %62, %63)
  };
  %64() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_6274() -> (Tensor[(30, 2), uint16],) {
  @func_6272() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_15734() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  @func_15732() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_8671() -> (Tensor[(15, 13, 6), float32], Tensor[(15, 2, 2), float32]) {
  @func_8669() /* ty=(Tensor[(15, 13, 6), float32], Tensor[(15, 2, 2), float32]) */
}

def @func_14670() -> (Tensor[(15, 2, 2), float32],) {
  @func_14668() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_3064() -> (Tensor[(30, 2), bool], Tensor[(1352), float64]) {
  @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */
}

def @func_17527() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  %65 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %66 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %67 = %66.2;
  %68 = cast(%67, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  %69 = %65.0;
  %70 = log(%68) /* ty=Tensor[(15, 2, 2), float64] */;
  (%69, %70)
}

def @func_18223() -> (Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64]) {
  @func_18221() /* ty=(Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64]) */
}

def @func_2063(%var_2061: Tensor[(15, 2, 2), bool], %var_2062: Tensor[(15, 2, 2), bool]) -> (Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) {
  %78 = fn (%var_2047: Tensor[(15, 2, 2), bool], %var_2048: Tensor[(15, 2, 2), bool]) -> (Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) {
    %71 = cast(%var_2048, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    %72 = shape_of(%var_2047, dtype="int32") /* ty=Tensor[(3), int32] */;
    %73 = cast(%var_2047, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    %74 = dyn.reshape(%71, %72, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %75 = cast(%var_2048, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %76 = logical_and(%73, %74) /* ty=Tensor[(15, 2, 2), bool] */;
    %77 = exp(%75) /* ty=Tensor[(15, 2, 2), float32] */;
    (%76, %77)
  };
  %78(%var_2061, %var_2062) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_8968(%var_8967: Tensor[(60), bool]) -> (Tensor[(6, 12, 5), float64], Tensor[(30, 2), uint16], Tensor[(60), bool], Tensor[(30, 2), uint16]) {
  %87 = fn (%var_8934: Tensor[(60), bool]) -> (Tensor[(6, 12, 5), float64], Tensor[(30, 2), uint16], Tensor[(60), bool], Tensor[(30, 2), uint16]) {
    %79 = @func_4695() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) */;
    %80 = cast(%var_8934, dtype="bool") /* ty=Tensor[(60), bool] */;
    %81 = reshape(%80, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
    %82 = @func_2875(%81) /* ty=(Tensor[(30, 2), uint16],) */;
    %83 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
    %84 = %79.0;
    %85 = %82.0;
    %86 = %83.0;
    (%84, %85, %var_8934, %86)
  };
  %87(%var_8967) /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), uint16], Tensor[(60), bool], Tensor[(30, 2), uint16]) */
}

def @func_108(%var_106: Tensor[(11, 11, 15), float64], %var_107: Tensor[(11, 11, 15), float64]) -> (Tensor[(11, 11, 15), float64], Tensor[(11, 11, 15), uint8]) {
  %98 = fn (%var_76: Tensor[(11, 11, 15), float64], %var_77: Tensor[(11, 11, 15), float64]) -> (Tensor[(11, 11, 15), float64], Tensor[(11, 11, 15), uint8]) {
    %88 = cast(%var_77, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
    %89 = shape_of(%var_76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %90 = cast(%var_76, dtype="float64") /* ty=Tensor[(11, 11, 15), float64] */;
    %91 = dyn.reshape(%88, %89, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %92 = cast(meta[relay.Constant][1] /* ty=Tensor[(11, 11, 15), float64] */, dtype="uint8") /* ty=Tensor[(11, 11, 15), uint8] */;
    %93 = shape_of(%var_76, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%var_76, dtype="uint8") /* ty=Tensor[(11, 11, 15), uint8] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %96 = divide(%90, %91) /* ty=Tensor[(11, 11, 15), float64] */;
    %97 = logical_xor(%94, %95) /* ty=Tensor[(11, 11, 15), uint8] */;
    (%96, %97)
  };
  %98(%var_106, %var_107) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(11, 11, 15), uint8]) */
}

def @func_5626(%var_5624: int32) -> (Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  @func_5623(%var_5624) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_7316() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), bool]) {
  %99 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %100 = %99.0;
  %101 = @func_4242() /* ty=Tensor[(30, 2), bool] */;
  (%100, %101)
}

def @func_8576() -> (Tensor[(30, 2), bool],) {
  %102 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %103 = %102.1;
  (%103,)
}

def @func_9950(%var_9948: Tensor[(30, 2), uint16]) -> (Tensor[(30, 2), uint32], Tensor[(16, 13, 13), float64], Tensor[(104, 26), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  @func_9947(%var_9948) /* ty=(Tensor[(30, 2), uint32], Tensor[(16, 13, 13), float64], Tensor[(104, 26), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_4030(%var_4029: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), bool],) {
  %111 = fn (%var_4018: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), bool],) {
    %104 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %105 = %104.0;
    %106 = cast(%var_4018, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%105, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %110 = greater_equal(%108, %109) /* ty=Tensor[(15, 2, 2), bool] */;
    (%110,)
  };
  %111(%var_4029) /* ty=(Tensor[(15, 2, 2), bool],) */
}

def @func_9474(%var_9473: Tensor[(15, 2, 2), float32]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), uint64]) {
  %123 = fn (%var_9457: Tensor[(15, 2, 2), float32]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), uint64]) {
    %112 = @func_7784() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
    %113 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
    %114 = @func_7207() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %115 = %114.0;
    %116 = cast(%var_9457, dtype="uint64") /* ty=Tensor[(15, 2, 2), uint64] */;
    %117 = shape_of(%115, dtype="int32") /* ty=Tensor[(3), int32] */;
    %118 = cast(%115, dtype="uint64") /* ty=Tensor[(15, 2, 2), uint64] */;
    %119 = dyn.reshape(%116, %117, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %120 = %112.3;
    %121 = %113.2;
    %122 = right_shift(%118, %119) /* ty=Tensor[(15, 2, 2), uint64] */;
    (%120, %121, %122)
  };
  %123(%var_9473) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), uint64]) */
}

def @func_7009() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  %129 = fn () -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
    %124 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
    %125 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
    %126 = %124.0;
    %127 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
    %128 = %125.1;
    (%126, %127, %128)
  };
  %129() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */
}

def @func_9834() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) {
  %130 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
  %131 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
  %132 = %130.0;
  (%131, %132)
}

def @func_11225() -> (Tensor[(30, 2), bool],) {
  %135 = fn () -> (Tensor[(30, 2), bool],) {
    %133 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %134 = %133.1;
    (%134,)
  };
  %135() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_13427() -> (Tensor[(15, 2, 2), float32],) {
  %136 = @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %137 = %136.0;
  (%137,)
}

def @func_5080() -> (Tensor[(5, 11, 2), float64],) {
  @func_5078() /* ty=(Tensor[(5, 11, 2), float64],) */
}

def @func_15849(%var_15826: Tensor[(64), float32]) -> (Tensor[(15, 2, 2), float32], Tensor[(64), float32], Tensor[(1352), uint32], Tensor[(1352), float64]) {
  %138 = @func_11625() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
  %139 = cast(%var_15826, dtype="float32") /* ty=Tensor[(64), float32] */;
  %140 = reshape(%139, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %141 = @func_1136(%140) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */;
  %142 = %141.1;
  %143 = cast(meta[relay.Constant][2] /* ty=Tensor[(1352), float64] */, dtype="uint32") /* ty=Tensor[(1352), uint32] */;
  %144 = shape_of(%142, dtype="int32") /* ty=Tensor[(1), int32] */;
  %145 = cast(%142, dtype="uint32") /* ty=Tensor[(1352), uint32] */;
  %146 = dyn.reshape(%143, %144, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %147 = cast(meta[relay.Constant][2] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
  %148 = %138.2;
  %149 = bitwise_xor(%145, %146) /* ty=Tensor[(1352), uint32] */;
  %150 = log(%147) /* ty=Tensor[(1352), float64] */;
  (%148, %var_15826, %149, %150)
}

def @func_4455() -> (Tensor[(30, 2), int16],) {
  @func_4453() /* ty=(Tensor[(30, 2), int16],) */
}

def @func_9593() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %154 = fn () -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
    %151 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %152 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
    %153 = %151.0;
    (%152, %153)
  };
  %154() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_5902() -> Tensor[(30, 2), uint16] {
  %155 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %155.0
}

def @func_17113() -> Tensor[(15, 2, 2), bool] {
  %156 = fn () -> Tensor[(15, 2, 2), bool] {
    @func_11352() /* ty=Tensor[(15, 2, 2), bool] */
  };
  %156() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_6517(%var_6515: Tensor[(30, 2), bool]) -> Tensor[(30, 2), uint64] {
  @func_6514(%var_6515) /* ty=Tensor[(30, 2), uint64] */
}

def @func_15865() -> (Tensor[(30, 2), float32], Tensor[(30, 2), uint16]) {
  %157 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %158 = @func_12569() /* ty=Tensor[(30, 2), float32] */;
  %159 = %157.2;
  (%158, %159)
}

def @func_10422() -> Tensor[(30, 2), bool] {
  %160 = fn () -> Tensor[(30, 2), bool] {
    @func_9287() /* ty=Tensor[(30, 2), bool] */
  };
  %160() /* ty=Tensor[(30, 2), bool] */
}

def @func_1395(%var_1379: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 3, 11), float64], Tensor[(13, 8, 13), float64], Tensor[(64), float32]) {
  %161 = cast(%var_1379, dtype="float64") /* ty=Tensor[(15, 1, 11), float64] */;
  %162 = cast(meta[relay.Constant][3] /* ty=Tensor[(15, 3, 11), float64] */, dtype="float64") /* ty=Tensor[(15, 3, 11), float64] */;
  %163 = cast(meta[relay.Constant][4] /* ty=Tensor[(64), float32] */, dtype="float32") /* ty=Tensor[(64), float32] */;
  %164 = reshape(%163, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %165 = @func_1136(%164) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */;
  %166 = mod(%161, %162) /* ty=Tensor[(15, 3, 11), float64] */;
  %167 = %165.0;
  (%166, %167, meta[relay.Constant][4] /* ty=Tensor[(64), float32] */)
}

def @func_5120() -> Tensor[(30, 2), float64] {
  %168 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %169 = %168.0;
  %170 = cast(%169, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  atanh(%170) /* ty=Tensor[(30, 2), float64] */
}

def @func_7621(%var_7619: Tensor[(468), float32]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(60), float32], Tensor[(468), float32]) {
  @func_7618(%var_7619) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(60), float32], Tensor[(468), float32]) */
}

def @func_7965() -> Tensor[(15, 2, 2), float32] {
  %171 = fn () -> Tensor[(15, 2, 2), float32] {
    @func_4672() /* ty=Tensor[(15, 2, 2), float32] */
  };
  %171() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_6111() -> Tensor[(15, 2, 2), bool] {
  @func_4122() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_8530() -> (Tensor[(30, 2), uint16],) {
  %172 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %173 = %172.0;
  (%173,)
}

def @func_9164() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), uint16]) {
  %178 = fn () -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), uint16]) {
    %174 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
    %175 = @func_6712() /* ty=Tensor[(30, 2), bool] */;
    %176 = %174.2;
    %177 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
    (%175, %176, %177)
  };
  %178() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), uint16]) */
}

def @func_16191() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  %179 = @func_13427() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %180 = %179.0;
  %181 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
  (%180, %181)
}

def @func_17552() -> (Tensor[(30, 2), uint16],) {
  %184 = fn () -> (Tensor[(30, 2), uint16],) {
    %182 = @func_7316() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool]) */;
    %183 = %182.0;
    (%183,)
  };
  %184() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_7510(%var_7509: Tensor[(16, 10, 14), float64]) -> (Tensor[(30, 2), float32], Tensor[(16, 10, 14), float64]) {
  %191 = fn (%var_7472: Tensor[(16, 10, 14), float64]) -> (Tensor[(30, 2), float32], Tensor[(16, 10, 14), float64]) {
    %185 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
    %186 = cast(%var_7472, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
    %187 = atan(%186) /* ty=Tensor[(16, 10, 14), float64] */;
    %188 = cast(%187, dtype="float64") /* ty=Tensor[(16, 10, 14), float64] */;
    %189 = %185.0;
    %190 = sigmoid(%188) /* ty=Tensor[(16, 10, 14), float64] */;
    (%189, %190)
  };
  %191(%var_7509) /* ty=(Tensor[(30, 2), float32], Tensor[(16, 10, 14), float64]) */
}

def @func_6173(%var_6171: Tensor[(12, 16, 5), uint8], %var_6172: Tensor[(12, 16, 5), uint8]) -> (Tensor[(12, 16, 5), uint8], Tensor[(30, 2), bool]) {
  @func_6169(%var_6171, %var_6172) /* ty=(Tensor[(12, 16, 5), uint8], Tensor[(30, 2), bool]) */
}

def @func_9065() -> Tensor[(30, 2), uint16] {
  %192 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %192.0
}

def @func_12815() -> (Tensor[(1352), float64],) {
  %195 = fn () -> (Tensor[(1352), float64],) {
    %193 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
    %194 = %193.1;
    (%194,)
  };
  %195() /* ty=(Tensor[(1352), float64],) */
}

def @func_18221() -> (Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64]) {
  %196 = @func_16332() /* ty=(Tensor[(30, 2), bool],) */;
  %197 = %196.0;
  %198 = cast(%197, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %199 = reshape(%198, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
  %200 = @func_9947(%199) /* ty=(Tensor[(30, 2), uint32], Tensor[(16, 13, 13), float64], Tensor[(104, 26), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %201 = %200.1;
  (%197, %201)
}

def @func_2553() -> (Tensor[(30, 2), bool],) {
  @func_2551() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_2988(%var_2986: Tensor[(30, 2), float32], %var_2987: Tensor[(338, 4), float64]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) {
  %215 = fn (%var_2955: Tensor[(30, 2), float32], %var_2975: Tensor[(338, 4), float64]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) {
    %202 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
    %203 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
    %204 = %203.0;
    %205 = cast(%var_2955, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(2), int32] */;
    %207 = cast(%204, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %209 = cast(%var_2975, dtype="float64") /* ty=Tensor[(338, 4), float64] */;
    %210 = reshape(%209, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float64] */;
    %211 = @func_813(%210) /* ty=(Tensor[(13, 8, 13), float64],) */;
    %212 = %202.0;
    %213 = left_shift(%207, %208) /* ty=Tensor[(30, 2), uint32] */;
    %214 = %211.0;
    (%212, %213, %214, %var_2975)
  };
  %215(%var_2986, %var_2987) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) */
}

def @func_10044() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) {
  %216 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %217 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
  %218 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
  %219 = %216.0;
  %220 = %217.0;
  (%218, %219, %220)
}

def @func_6253() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(1040), float32], float32) {
  %221 = @func_5078() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %222 = cast(3.97294f /* ty=float32 */, dtype="float32") /* ty=float32 */;
  %223 = reshape(%222, newshape=[]) /* ty=float32 */;
  %224 = @func_6029(%223) /* ty=(Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
  %225 = @func_4242() /* ty=Tensor[(30, 2), bool] */;
  %226 = %221.0;
  %227 = %224.3;
  (%225, %226, %227, 3.97294f /* ty=float32 */)
}

def @func_7731(%var_7730: Tensor[(13, 13, 1), float32]) -> (Tensor[(15, 2, 2), float32], Tensor[(13, 13, 60), bool], Tensor[(13, 13, 1), float64]) {
  %239 = fn (%var_7693: Tensor[(13, 13, 1), float32]) -> (Tensor[(15, 2, 2), float32], Tensor[(13, 13, 60), bool], Tensor[(13, 13, 1), float64]) {
    %228 = cast(meta[relay.Constant][5] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %229 = reshape(%228, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
    %230 = @func_2726(%229) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %231 = cast(%var_7693, dtype="float32") /* ty=Tensor[(13, 13, 1), float32] */;
    %232 = atan(%231) /* ty=Tensor[(13, 13, 1), float32] */;
    %233 = cast(%232, dtype="bool") /* ty=Tensor[(13, 13, 1), bool] */;
    %234 = cast(meta[relay.Constant][5] /* ty=Tensor[(60), bool] */, dtype="bool") /* ty=Tensor[(60), bool] */;
    %235 = cast(%232, dtype="float64") /* ty=Tensor[(13, 13, 1), float64] */;
    %236 = %230.3;
    %237 = greater(%233, %234) /* ty=Tensor[(13, 13, 60), bool] */;
    %238 = sqrt(%235) /* ty=Tensor[(13, 13, 1), float64] */;
    (%236, %237, %238)
  };
  %239(%var_7730) /* ty=(Tensor[(15, 2, 2), float32], Tensor[(13, 13, 60), bool], Tensor[(13, 13, 1), float64]) */
}

def @func_5412(%var_5406: Tensor[(6, 13, 6), float32]) -> (Tensor[(6, 13, 6), float32], Tensor[(15, 2, 2), bool], Tensor[(60), float32]) {
  %240 = cast(%var_5406, dtype="float32") /* ty=Tensor[(6, 13, 6), float32] */;
  %241 = cast(meta[relay.Constant][6] /* ty=Tensor[(60), float32] */, dtype="float32") /* ty=Tensor[(60), float32] */;
  %242 = reshape(%241, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
  %243 = @func_4028(%242) /* ty=(Tensor[(15, 2, 2), bool],) */;
  %244 = log2(%240) /* ty=Tensor[(6, 13, 6), float32] */;
  %245 = %243.0;
  (%244, %245, meta[relay.Constant][6] /* ty=Tensor[(60), float32] */)
}

def @func_3599() -> Tensor[(30, 2), float32] {
  %249 = fn () -> Tensor[(30, 2), float32] {
    %246 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
    %247 = %246.0;
    %248 = cast(%247, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    exp(%248) /* ty=Tensor[(30, 2), float32] */
  };
  %249() /* ty=Tensor[(30, 2), float32] */
}

def @func_9629() -> Tensor[(30, 2), bool] {
  @func_3559() /* ty=Tensor[(30, 2), bool] */
}

def @func_10397() -> Tensor[(5, 11, 2), float64] {
  %251 = fn () -> Tensor[(5, 11, 2), float64] {
    %250 = @func_5497() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */;
    %250.1
  };
  %251() /* ty=Tensor[(5, 11, 2), float64] */
}

def @func_16178() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %252 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
  %253 = @func_13471() /* ty=Tensor[(30, 2), bool] */;
  %254 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
  (%252, %253, %254)
}

def @func_6568() -> Tensor[(15, 2, 2), float32] {
  %255 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %255.0
}

def @func_3248() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) {
  @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */
}

def @func_17215() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %260 = fn () -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
    %256 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
    %257 = @func_6049() /* ty=(Tensor[(30, 2), bool],) */;
    %258 = %256.0;
    %259 = %257.0;
    (%258, %259)
  };
  %260() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_6169(%var_6154: Tensor[(12, 16, 5), uint8], %var_6155: Tensor[(12, 16, 5), uint8]) -> (Tensor[(12, 16, 5), uint8], Tensor[(30, 2), bool]) {
  %261 = cast(%var_6155, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %262 = shape_of(%var_6154, dtype="int32") /* ty=Tensor[(3), int32] */;
  %263 = cast(%var_6154, dtype="uint8") /* ty=Tensor[(12, 16, 5), uint8] */;
  %264 = dyn.reshape(%261, %262, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %265 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %266 = multiply(%263, %264) /* ty=Tensor[(12, 16, 5), uint8] */;
  %267 = %265.0;
  (%266, %267)
}

def @func_17840() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  @func_17838() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_2844() -> Tensor[(15, 2, 2), float32] {
  %269 = fn () -> Tensor[(15, 2, 2), float32] {
    %268 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %268.0
  };
  %269() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_7668() -> (Tensor[(30, 2), bool],) {
  @func_7666() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_7248() -> (Tensor[(30, 2), uint16],) {
  @func_7246() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_5264(%var_5262: Tensor[(9, 1, 8), float32], %var_5263: Tensor[(9, 7, 8), float32]) -> (Tensor[(9, 7, 8), float32], Tensor[(9, 7, 8), float32]) {
  %275 = fn (%var_5247: Tensor[(9, 1, 8), float32], %var_5248: Tensor[(9, 7, 8), float32]) -> (Tensor[(9, 7, 8), float32], Tensor[(9, 7, 8), float32]) {
    %270 = cast(%var_5247, dtype="float32") /* ty=Tensor[(9, 1, 8), float32] */;
    %271 = cast(%var_5248, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
    %272 = cast(%var_5248, dtype="float32") /* ty=Tensor[(9, 7, 8), float32] */;
    %273 = floor_divide(%270, %271) /* ty=Tensor[(9, 7, 8), float32] */;
    %274 = sinh(%272) /* ty=Tensor[(9, 7, 8), float32] */;
    (%273, %274)
  };
  %275(%var_5262, %var_5263) /* ty=(Tensor[(9, 7, 8), float32], Tensor[(9, 7, 8), float32]) */
}

def @func_10906() -> Tensor[(30, 2), float64] {
  @func_10904() /* ty=Tensor[(30, 2), float64] */
}

def @func_14967() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) {
  %276 = @func_13856() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %277 = @func_8020() /* ty=Tensor[(30, 2), bool] */;
  %278 = cast(%277, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %279 = reshape(%278, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %280 = @func_9690(%279) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) */;
  %281 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
  %282 = @func_7008() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %283 = @func_7207() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %284 = %276.3;
  %285 = %280.2;
  %286 = %281.0;
  %287 = %282.2;
  %288 = %283.0;
  (%284, %277, %285, %286, %287, %288)
}

def @func_9763(%var_9722: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), uint32],) {
  %289 = @func_6363() /* ty=Tensor[(15, 2, 2), float32] */;
  %290 = cast(%var_9722, dtype="uint32") /* ty=Tensor[(15, 2, 2), uint32] */;
  %291 = shape_of(%289, dtype="int32") /* ty=Tensor[(3), int32] */;
  %292 = cast(%289, dtype="uint32") /* ty=Tensor[(15, 2, 2), uint32] */;
  %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %294 = add(%292, %293) /* ty=Tensor[(15, 2, 2), uint32] */;
  (%294,)
}

def @func_8172() -> Tensor[(30, 2), float32] {
  %296 = fn () -> Tensor[(30, 2), float32] {
    %295 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
    %295.0
  };
  %296() /* ty=Tensor[(30, 2), float32] */
}

def @func_13315() -> (Tensor[(30, 2), uint16],) {
  @func_13313() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_8774(%var_8772: Tensor[(16, 13, 13), float64], %var_8773: Tensor[(16, 13, 13), float64]) -> (Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) {
  %304 = fn (%var_8761: Tensor[(16, 13, 13), float64], %var_8762: Tensor[(16, 13, 13), float64]) -> (Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) {
    %297 = cast(%var_8762, dtype="float64") /* ty=Tensor[(16, 13, 13), float64] */;
    %298 = shape_of(%var_8761, dtype="int32") /* ty=Tensor[(3), int32] */;
    %299 = cast(%var_8761, dtype="float64") /* ty=Tensor[(16, 13, 13), float64] */;
    %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %301 = @func_7246() /* ty=(Tensor[(30, 2), uint16],) */;
    %302 = divide(%299, %300) /* ty=Tensor[(16, 13, 13), float64] */;
    %303 = %301.0;
    (%302, %303)
  };
  %304(%var_8772, %var_8773) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */
}

def @func_2551() -> (Tensor[(30, 2), bool],) {
  %305 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %306 = %305.0;
  (%306,)
}

def @func_17709() -> Tensor[(15, 2, 2), bool] {
  %307 = fn () -> Tensor[(15, 2, 2), bool] {
    @func_11352() /* ty=Tensor[(15, 2, 2), bool] */
  };
  %307() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_8732() -> (Tensor[(15, 2, 2), float32],) {
  @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_6312(%var_6311: Tensor[(30, 2), uint16]) -> Tensor[(30, 2), float32] {
  %316 = fn (%var_6296: Tensor[(30, 2), uint16]) -> Tensor[(30, 2), float32] {
    %308 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
    %309 = %308.0;
    %310 = cast(%var_6296, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %311 = shape_of(%309, dtype="int32") /* ty=Tensor[(2), int32] */;
    %312 = cast(%309, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %313 = dyn.reshape(%310, %311, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %314 = mod(%312, %313) /* ty=Tensor[(30, 2), float64] */;
    %315 = cast(%314, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    asinh(%315) /* ty=Tensor[(30, 2), float32] */
  };
  %316(%var_6311) /* ty=Tensor[(30, 2), float32] */
}

def @func_8532() -> (Tensor[(30, 2), uint16],) {
  @func_8530() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_16056() -> (Tensor[(15, 6, 14), float32],) {
  @func_16054() /* ty=(Tensor[(15, 6, 14), float32],) */
}

def @func_4695() -> (Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) {
  %317 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %318 = %317.0;
  %319 = @func_3823() /* ty=Tensor[(15, 2, 2), float32] */;
  (%318, %319)
}

def @func_12386() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(1352), int32], Tensor[(30, 2), float32], int32, Tensor[(13, 104), float64]) {
  %335 = fn () -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(1352), int32], Tensor[(30, 2), float32], int32, Tensor[(13, 104), float64]) {
    %320 = @func_10638() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) */;
    %321 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %322 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 104), float64] */, dtype="float64") /* ty=Tensor[(13, 104), float64] */;
    %323 = reshape(%322, newshape=[1352]) /* ty=Tensor[(1352), float64] */;
    %324 = @func_8896(%323) /* ty=(Tensor[(1352), int32], Tensor[(30, 2), float64]) */;
    %325 = cast(-1 /* ty=int32 */, dtype="int32") /* ty=int32 */;
    %326 = reshape(%325, newshape=[]) /* ty=int32 */;
    %327 = @func_11753(%326) /* ty=(Tensor[(30, 2), float64], Tensor[(30, 2), float32], int32) */;
    %328 = cast(meta[relay.Constant][7] /* ty=Tensor[(13, 104), float64] */, dtype="float64") /* ty=Tensor[(13, 104), float64] */;
    %329 = %320.0;
    %330 = %321.1;
    %331 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
    %332 = %324.0;
    %333 = %327.1;
    %334 = sqrt(%328) /* ty=Tensor[(13, 104), float64] */;
    (%329, %330, %331, %332, %333, -1 /* ty=int32 */, %334)
  };
  %335() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(1352), int32], Tensor[(30, 2), float32], int32, Tensor[(13, 104), float64]) */
}

def @func_18105() -> Tensor[(30, 2), bool] {
  @func_18103() /* ty=Tensor[(30, 2), bool] */
}

def @func_3634() -> (Tensor[(5, 11, 2), float64],) {
  %338 = fn () -> (Tensor[(5, 11, 2), float64],) {
    %336 = cast(meta[relay.Constant][8] /* ty=Tensor[(5, 11, 2), float64] */, dtype="float64") /* ty=Tensor[(5, 11, 2), float64] */;
    %337 = acos(%336) /* ty=Tensor[(5, 11, 2), float64] */;
    (%337,)
  };
  %338() /* ty=(Tensor[(5, 11, 2), float64],) */
}

def @func_14051() -> Tensor[(15, 2, 2), float64] {
  %340 = fn () -> Tensor[(15, 2, 2), float64] {
    %339 = @func_8986() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
    %339.1
  };
  %340() /* ty=Tensor[(15, 2, 2), float64] */
}

def @func_3328() -> (Tensor[(30, 2), bool],) {
  %341 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %342 = %341.0;
  (%342,)
}

def @func_15093() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %349 = fn () -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
    %343 = @func_12522() /* ty=(Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
    %344 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
    %345 = @func_13529() /* ty=(Tensor[(30, 2), uint16],) */;
    %346 = %343.1;
    %347 = %344.0;
    %348 = %345.0;
    (%346, %347, %348)
  };
  %349() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_5880(%var_5798: Tensor[(72), uint64]) -> (Tensor[(8, 1, 7), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %350 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 1, 7), float32] */, dtype="float32") /* ty=Tensor[(8, 1, 7), float32] */;
  %351 = cast(%var_5798, dtype="uint64") /* ty=Tensor[(72), uint64] */;
  %352 = cast(meta[relay.Constant][10] /* ty=Tensor[(1152), uint64] */, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %353 = reshape(%351, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
  %354 = reshape(%352, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
  %355 = @func_4196(%353, %354) /* ty=(Tensor[(9, 8, 16), uint64],) */;
  %356 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
  %357 = %356.0;
  %358 = cast(%357, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %359 = reshape(%358, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %360 = @func_2726(%359) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %361 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %362 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %363 = tan(%350) /* ty=Tensor[(8, 1, 7), float32] */;
  %364 = %355.0;
  %365 = %360.2;
  %366 = %361.1;
  %367 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
  %368 = %362.0;
  (%363, %364, %var_5798, meta[relay.Constant][10] /* ty=Tensor[(1152), uint64] */, %357, %365, %366, %367, %368)
}

def @func_8730() -> (Tensor[(15, 2, 2), float32],) {
  %369 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %370 = %369.0;
  (%370,)
}

def @func_13624() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %374 = fn () -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
    %371 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
    %372 = @func_8130() /* ty=Tensor[(30, 2), bool] */;
    %373 = %371.0;
    (%372, %373)
  };
  %374() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */
}

def @func_3795() -> Tensor[(30, 2), float32] {
  @func_3793() /* ty=Tensor[(30, 2), float32] */
}

def @func_13668() -> Tensor[(15, 2, 2), float32] {
  %375 = fn () -> Tensor[(15, 2, 2), float32] {
    @func_6568() /* ty=Tensor[(15, 2, 2), float32] */
  };
  %375() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_16762(%var_16760: Tensor[(2704), float64]) -> (Tensor[(30, 2), int16], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), bool], Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) {
  @func_16759(%var_16760) /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), bool], Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) */
}

def @func_4196(%var_4182: Tensor[(9, 8, 1), uint64], %var_4183: Tensor[(9, 8, 16), uint64]) -> (Tensor[(9, 8, 16), uint64],) {
  %376 = cast(%var_4182, dtype="uint64") /* ty=Tensor[(9, 8, 1), uint64] */;
  %377 = cast(%var_4183, dtype="uint64") /* ty=Tensor[(9, 8, 16), uint64] */;
  %378 = add(%376, %377) /* ty=Tensor[(9, 8, 16), uint64] */;
  (%378,)
}

def @func_813(%var_807: Tensor[(13, 8, 13), float64]) -> (Tensor[(13, 8, 13), float64],) {
  %379 = cast(%var_807, dtype="float64") /* ty=Tensor[(13, 8, 13), float64] */;
  %380 = exp(%379) /* ty=Tensor[(13, 8, 13), float64] */;
  (%380,)
}

def @func_15138() -> (Tensor[(2, 5, 9), int64], Tensor[(30, 2), bool], Tensor[(2, 5, 9), float32]) {
  %390 = fn () -> (Tensor[(2, 5, 9), int64], Tensor[(30, 2), bool], Tensor[(2, 5, 9), float32]) {
    %381 = cast(meta[relay.Constant][12] /* ty=Tensor[(2, 5, 9), int64] */, dtype="int64") /* ty=Tensor[(2, 5, 9), int64] */;
    %382 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(2, 5, 9), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %383 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 5, 9), int64] */, dtype="int64") /* ty=Tensor[(2, 5, 9), int64] */;
    %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %385 = @func_10703() /* ty=(Tensor[(30, 2), bool],) */;
    %386 = cast(meta[relay.Constant][11] /* ty=Tensor[(2, 5, 9), int64] */, dtype="float32") /* ty=Tensor[(2, 5, 9), float32] */;
    %387 = right_shift(%383, %384) /* ty=Tensor[(2, 5, 9), int64] */;
    %388 = %385.0;
    %389 = rsqrt(%386) /* ty=Tensor[(2, 5, 9), float32] */;
    (%387, %388, %389)
  };
  %390() /* ty=(Tensor[(2, 5, 9), int64], Tensor[(30, 2), bool], Tensor[(2, 5, 9), float32]) */
}

def @func_18447() -> (Tensor[(15, 2, 2), bool],) {
  %392 = fn () -> (Tensor[(15, 2, 2), bool],) {
    %391 = @func_4122() /* ty=Tensor[(15, 2, 2), bool] */;
    (%391,)
  };
  %392() /* ty=(Tensor[(15, 2, 2), bool],) */
}

def @func_14329() -> (Tensor[(30, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool]) {
  %393 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %394 = @func_9163() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), uint16]) */;
  %395 = %393.0;
  %396 = %394.1;
  %397 = @func_9629() /* ty=Tensor[(30, 2), bool] */;
  (%395, %396, %397)
}

def @func_17920() -> Tensor[(30, 2), uint16] {
  %398 = @func_17551() /* ty=(Tensor[(30, 2), uint16],) */;
  %398.0
}

def @func_9836() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) {
  @func_9834() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */
}

def @func_2894() -> (Tensor[(30, 2), float32],) {
  %403 = fn () -> (Tensor[(30, 2), float32],) {
    %399 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
    %400 = %399.0;
    %401 = cast(%400, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %402 = sinh(%401) /* ty=Tensor[(30, 2), float32] */;
    (%402,)
  };
  %403() /* ty=(Tensor[(30, 2), float32],) */
}

def @func_10590() -> (Tensor[(30, 2), float32],) {
  %404 = @func_9374() /* ty=(Tensor[(30, 2), float32],) */;
  %405 = %404.0;
  (%405,)
}

def @func_15671(%var_15670: Tensor[(1040), float32]) -> (Tensor[(30, 2), uint16], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32]) {
  %420 = fn (%var_15612: Tensor[(1040), float32]) -> (Tensor[(30, 2), uint16], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32]) {
    %406 = @func_13529() /* ty=(Tensor[(30, 2), uint16],) */;
    %407 = cast(-2.53848f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %408 = cast(%var_15612, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %409 = reshape(%407, newshape=[]) /* ty=float32 */;
    %410 = reshape(%408, newshape=[13, 16, 5]) /* ty=Tensor[(13, 16, 5), float32] */;
    %411 = @func_4157(%409, %410) /* ty=(Tensor[(13, 16, 5), float32],) */;
    %412 = @func_9278() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %413 = @func_9990() /* ty=(Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) */;
    %414 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %415 = %406.0;
    %416 = %411.0;
    %417 = %412.2;
    %418 = %413.3;
    %419 = %414.0;
    (%415, %416, -2.53848f /* ty=float32 */, %var_15612, %417, %418, %419)
  };
  %420(%var_15670) /* ty=(Tensor[(30, 2), uint16], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32]) */
}

def @func_14443() -> Tensor[(30, 2), bool] {
  %421 = @func_10703() /* ty=(Tensor[(30, 2), bool],) */;
  %421.0
}

def @func_4244() -> Tensor[(30, 2), bool] {
  @func_4242() /* ty=Tensor[(30, 2), bool] */
}

def @func_2875(%var_2870: Tensor[(30, 2), bool]) -> (Tensor[(30, 2), uint16],) {
  %422 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %423 = %422.0;
  %424 = cast(%var_2870, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %425 = shape_of(%423, dtype="int32") /* ty=Tensor[(2), int32] */;
  %426 = cast(%423, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
  %427 = dyn.reshape(%424, %425, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %428 = bitwise_and(%426, %427) /* ty=Tensor[(30, 2), uint16] */;
  (%428,)
}

def @func_9631() -> Tensor[(30, 2), bool] {
  @func_9629() /* ty=Tensor[(30, 2), bool] */
}

def @func_12146() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32]) {
  @func_12144() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32]) */
}

def @func_16426() -> Tensor[(15, 2, 2), float32] {
  %430 = fn () -> Tensor[(15, 2, 2), float32] {
    %429 = @func_14258() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %429.0
  };
  %430() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_8578() -> (Tensor[(30, 2), bool],) {
  @func_8576() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_13858() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  @func_13856() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */
}

def @func_11472() -> Tensor[(30, 2), bool] {
  %431 = fn () -> Tensor[(30, 2), bool] {
    @func_6712() /* ty=Tensor[(30, 2), bool] */
  };
  %431() /* ty=Tensor[(30, 2), bool] */
}

def @func_16102() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), int16]) {
  %432 = @func_5023() /* ty=(Tensor[(30, 2), int16],) */;
  %433 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
  %434 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  %435 = %432.0;
  (%433, %434, %435)
}

def @func_14331() -> (Tensor[(30, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool]) {
  @func_14329() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool]) */
}

def @func_12063(%var_12061: Tensor[(1152), uint64]) -> (Tensor[(30, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(1152), uint64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], int32, Tensor[(15, 2, 2), float32]) {
  @func_12060(%var_12061) /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(1152), uint64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], int32, Tensor[(15, 2, 2), float32]) */
}

def @func_18017() -> Tensor[(30, 2), uint16] {
  %436 = fn () -> Tensor[(30, 2), uint16] {
    @func_9065() /* ty=Tensor[(30, 2), uint16] */
  };
  %436() /* ty=Tensor[(30, 2), uint16] */
}

def @func_4697() -> (Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) {
  @func_4695() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) */
}

def @func_14668() -> (Tensor[(15, 2, 2), float32],) {
  %437 = @func_10234() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %438 = %437.0;
  (%438,)
}

def @func_6514(%var_6485: Tensor[(30, 2), bool]) -> Tensor[(30, 2), uint64] {
  %439 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %440 = %439.0;
  %441 = cast(%var_6485, dtype="uint64") /* ty=Tensor[(30, 2), uint64] */;
  %442 = shape_of(%440, dtype="int32") /* ty=Tensor[(2), int32] */;
  %443 = cast(%440, dtype="uint64") /* ty=Tensor[(30, 2), uint64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  right_shift(%443, %444) /* ty=Tensor[(30, 2), uint64] */
}

def @func_16104() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), int16]) {
  @func_16102() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), int16]) */
}

def @func_18331() -> Tensor[(30, 2), uint16] {
  @func_18329() /* ty=Tensor[(30, 2), uint16] */
}

def @func_14259() -> (Tensor[(15, 2, 2), float32],) {
  %446 = fn () -> (Tensor[(15, 2, 2), float32],) {
    %445 = @func_6363() /* ty=Tensor[(15, 2, 2), float32] */;
    (%445,)
  };
  %446() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_8987() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  %450 = fn () -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
    %447 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
    %448 = %447.1;
    %449 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
    (%448, %449)
  };
  %450() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */
}

def @func_10640() -> (Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) {
  @func_10638() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) */
}

def @func_6255() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(1040), float32], float32) {
  @func_6253() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(1040), float32], float32) */
}

def @func_3824() -> Tensor[(15, 2, 2), float32] {
  %452 = fn () -> Tensor[(15, 2, 2), float32] {
    %451 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %451.1
  };
  %452() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_3434() -> (Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */
}

def @func_5668(%var_5666: Tensor[(1, 10, 15), float64]) -> (Tensor[(8, 10, 15), float64], Tensor[(1352), float64], Tensor[(11, 11, 15), uint8], Tensor[(1815), float64]) {
  @func_5665(%var_5666) /* ty=(Tensor[(8, 10, 15), float64], Tensor[(1352), float64], Tensor[(11, 11, 15), uint8], Tensor[(1815), float64]) */
}

def @func_12732(%var_12730: Tensor[(30, 2), float32]) -> Tensor[(30, 2), bool] {
  @func_12729(%var_12730) /* ty=Tensor[(30, 2), bool] */
}

def @func_6365() -> Tensor[(15, 2, 2), float32] {
  @func_6363() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_15939() -> (Tensor[(30, 2), float64],) {
  %453 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %454 = %453.1;
  (%454,)
}

def @func_17314() -> (Tensor[(15, 2, 2), float32],) {
  @func_17312() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_5498() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) {
  %459 = fn () -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) {
    %455 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
    %456 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
    %457 = %455.0;
    %458 = %456.0;
    (%457, %458)
  };
  %459() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */
}

def @func_6113() -> Tensor[(15, 2, 2), bool] {
  @func_6111() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_3290() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) {
  %460 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %461 = %460.0;
  %462 = @func_3246() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) */;
  %463 = %462.1;
  %464 = cast(%463, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %465 = shape_of(%461, dtype="int32") /* ty=Tensor[(2), int32] */;
  %466 = cast(%461, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %467 = dyn.reshape(%464, %465, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %468 = cast(%463, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %469 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %470 = floor_divide(%466, %467) /* ty=Tensor[(30, 2), float32] */;
  %471 = asinh(%468) /* ty=Tensor[(15, 2, 2), float32] */;
  (%469, %470, %471)
}

def @func_3155() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) {
  @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */
}

def @func_8131() -> Tensor[(30, 2), bool] {
  %473 = fn () -> Tensor[(30, 2), bool] {
    %472 = @func_6848() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %472.1
  };
  %473() /* ty=Tensor[(30, 2), bool] */
}

def @func_8669() -> (Tensor[(15, 13, 6), float32], Tensor[(15, 2, 2), float32]) {
  %474 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 13, 6), float32] */, dtype="float32") /* ty=Tensor[(15, 13, 6), float32] */;
  %475 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %476 = atan(%474) /* ty=Tensor[(15, 13, 6), float32] */;
  %477 = %475.0;
  (%476, %477)
}

def @main(%var_18448: Tensor[(6, 10, 14), float64]) -> Tensor[(6, 10, 14), float64] {
  %478 = cast(%var_18448, dtype="float64") /* ty=Tensor[(6, 10, 14), float64] */;
  log10(%478) /* ty=Tensor[(6, 10, 14), float64] */
}

def @func_15352() -> (Tensor[(30, 2), bool],) {
  %480 = fn () -> (Tensor[(30, 2), bool],) {
    %479 = @func_11265() /* ty=Tensor[(30, 2), bool] */;
    (%479,)
  };
  %480() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_3330() -> (Tensor[(30, 2), bool],) {
  @func_3328() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_5904() -> Tensor[(30, 2), uint16] {
  @func_5902() /* ty=Tensor[(30, 2), uint16] */
}

def @func_9692(%var_9691: Tensor[(30, 2), bool]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) {
  %495 = fn (%var_9682: Tensor[(30, 2), bool]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) {
    %481 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
    %482 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %483 = %482.0;
    %484 = cast(%var_9682, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %485 = shape_of(%483, dtype="int32") /* ty=Tensor[(2), int32] */;
    %486 = cast(%483, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %488 = cast(-9.0822f /* ty=float32 */, dtype="float32") /* ty=float32 */;
    %489 = reshape(%488, newshape=[]) /* ty=float32 */;
    %490 = @func_6029(%489) /* ty=(Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
    %491 = %481.0;
    %492 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
    %493 = subtract(%486, %487) /* ty=Tensor[(30, 2), float64] */;
    %494 = %490.2;
    (%491, %492, %493, %494, -9.0822f /* ty=float32 */)
  };
  %495(%var_9691) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) */
}

def @func_9519() -> Tensor[(30, 2), bool] {
  @func_9517() /* ty=Tensor[(30, 2), bool] */
}

def @func_11908() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) {
  %501 = fn () -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) {
    %496 = @func_10715() /* ty=Tensor[(15, 2, 2), float32] */;
    %497 = cast(%496, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %498 = @func_8020() /* ty=Tensor[(30, 2), bool] */;
    %499 = sigmoid(%497) /* ty=Tensor[(15, 2, 2), float32] */;
    %500 = @func_11352() /* ty=Tensor[(15, 2, 2), bool] */;
    (%498, %499, %500)
  };
  %501() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */
}

def @func_13927() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %505 = fn () -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
    %502 = @func_10784() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %503 = %502.1;
    %504 = @func_8020() /* ty=Tensor[(30, 2), bool] */;
    (%503, %504)
  };
  %505() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_14218(%var_14215: Tensor[(5, 1, 16), int16], %var_14216: Tensor[(5, 10, 16), int16], %var_14217: Tensor[(90), int16]) -> (Tensor[(5, 10, 16), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], int32, Tensor[(3, 6, 5), int16], Tensor[(90), int16], Tensor[(5, 10, 16), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  @func_14213(%var_14215, %var_14216, %var_14217) /* ty=(Tensor[(5, 10, 16), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], int32, Tensor[(3, 6, 5), int16], Tensor[(90), int16], Tensor[(5, 10, 16), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */
}

def @func_17486() -> (Tensor[(30, 2), bool],) {
  %507 = fn () -> (Tensor[(30, 2), bool],) {
    %506 = @func_8409() /* ty=Tensor[(30, 2), bool] */;
    (%506,)
  };
  %507() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_7982() -> (Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) {
  %508 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %509 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  %510 = %508.0;
  (%509, %510)
}

def @func_10883() -> (Tensor[(30, 2), uint16],) {
  %511 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
  %512 = %511.0;
  (%512,)
}

def @func_13529() -> (Tensor[(30, 2), uint16],) {
  %513 = @func_13313() /* ty=(Tensor[(30, 2), uint16],) */;
  %514 = %513.0;
  (%514,)
}

def @func_14577(%var_14574: Tensor[(6, 2, 7), float64], %var_14575: Tensor[(6, 2, 7), float64], %var_14576: Tensor[(165, 1), float64]) -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(6, 2, 7), uint8], Tensor[(15, 3, 11), float64], Tensor[(165, 1), float64]) {
  %538 = fn (%var_14491: Tensor[(6, 2, 7), float64], %var_14492: Tensor[(6, 2, 7), float64], %var_14566: Tensor[(165, 1), float64]) -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(6, 2, 7), uint8], Tensor[(15, 3, 11), float64], Tensor[(165, 1), float64]) {
    %515 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
    %516 = cast(%var_14492, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
    %517 = shape_of(%var_14491, dtype="int32") /* ty=Tensor[(3), int32] */;
    %518 = cast(%var_14491, dtype="bool") /* ty=Tensor[(6, 2, 7), bool] */;
    %519 = dyn.reshape(%516, %517, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %520 = greater(%518, %519) /* ty=Tensor[(6, 2, 7), bool] */;
    %521 = cast(%520, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
    %522 = asinh(%521) /* ty=Tensor[(6, 2, 7), float64] */;
    %523 = cast(%522, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
    %524 = cos(%523) /* ty=Tensor[(6, 2, 7), float64] */;
    %525 = cast(%524, dtype="float64") /* ty=Tensor[(6, 2, 7), float64] */;
    %526 = log10(%525) /* ty=Tensor[(6, 2, 7), float64] */;
    %527 = cast(%524, dtype="uint8") /* ty=Tensor[(6, 2, 7), uint8] */;
    %528 = shape_of(%526, dtype="int32") /* ty=Tensor[(3), int32] */;
    %529 = cast(%526, dtype="uint8") /* ty=Tensor[(6, 2, 7), uint8] */;
    %530 = dyn.reshape(%527, %528, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %531 = cast(%var_14566, dtype="float64") /* ty=Tensor[(165, 1), float64] */;
    %532 = reshape(%531, newshape=[15, 1, 11]) /* ty=Tensor[(15, 1, 11), float64] */;
    %533 = @func_1395(%532) /* ty=(Tensor[(15, 3, 11), float64], Tensor[(13, 8, 13), float64], Tensor[(64), float32]) */;
    %534 = %515.0;
    %535 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
    %536 = maximum(%529, %530) /* ty=Tensor[(6, 2, 7), uint8] */;
    %537 = %533.0;
    (%534, %535, %536, %537, %var_14566)
  };
  %538(%var_14574, %var_14575, %var_14576) /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(6, 2, 7), uint8], Tensor[(15, 3, 11), float64], Tensor[(165, 1), float64]) */
}

def @func_17747() -> (Tensor[(15, 2, 2), float32],) {
  @func_17745() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_14428(%var_14427: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), uint16]) {
  %548 = fn (%var_14402: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), uint16]) {
    %539 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %540 = %539.0;
    %541 = cast(%var_14402, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %542 = shape_of(%540, dtype="int32") /* ty=Tensor[(3), int32] */;
    %543 = cast(%540, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %544 = dyn.reshape(%541, %542, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %545 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
    %546 = floor_divide(%543, %544) /* ty=Tensor[(15, 2, 2), float64] */;
    %547 = %545.0;
    (%546, %547)
  };
  %548(%var_14427) /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), uint16]) */
}

def @func_7618(%var_7612: Tensor[(468), float32]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(60), float32], Tensor[(468), float32]) {
  %549 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %550 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %551 = cast(%var_7612, dtype="float32") /* ty=Tensor[(468), float32] */;
  %552 = reshape(%551, newshape=[6, 13, 6]) /* ty=Tensor[(6, 13, 6), float32] */;
  %553 = @func_5412(%552) /* ty=(Tensor[(6, 13, 6), float32], Tensor[(15, 2, 2), bool], Tensor[(60), float32]) */;
  %554 = %549.1;
  %555 = %550.0;
  %556 = %553.2;
  (%554, %555, %556, %var_7612)
}

def @func_2728(%var_2727: Tensor[(30, 2), bool]) -> (Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %582 = fn (%var_2671: Tensor[(30, 2), bool]) -> (Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
    %557 = cast(meta[relay.Constant][14] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
    %558 = reshape(%557, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float64] */;
    %559 = @func_813(%558) /* ty=(Tensor[(13, 8, 13), float64],) */;
    %560 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
    %561 = %560.0;
    %562 = cast(%561, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %563 = erf(%562) /* ty=Tensor[(30, 2), float64] */;
    %564 = cast(%var_2671, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
    %565 = shape_of(%561, dtype="int32") /* ty=Tensor[(2), int32] */;
    %566 = cast(%561, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    %568 = add(%566, %567) /* ty=Tensor[(30, 2), uint16] */;
    %569 = cast(%568, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %570 = shape_of(%563, dtype="int32") /* ty=Tensor[(2), int32] */;
    %571 = cast(%563, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %573 = greater(%571, %572) /* ty=Tensor[(30, 2), bool] */;
    %574 = cast(%573, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %575 = shape_of(%563, dtype="int32") /* ty=Tensor[(2), int32] */;
    %576 = cast(%563, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %578 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %579 = %559.0;
    %580 = less_equal(%576, %577) /* ty=Tensor[(30, 2), bool] */;
    %581 = %578.0;
    (%579, meta[relay.Constant][14] /* ty=Tensor[(1352), float64] */, %580, %581)
  };
  %582(%var_2727) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_12729(%var_12721: Tensor[(30, 2), float32]) -> Tensor[(30, 2), bool] {
  %583 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %584 = %583.0;
  %585 = cast(%var_12721, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %586 = shape_of(%584, dtype="int32") /* ty=Tensor[(2), int32] */;
  %587 = cast(%584, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %588 = dyn.reshape(%585, %586, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  logical_or(%587, %588) /* ty=Tensor[(30, 2), bool] */
}

def @func_15048() -> (Tensor[(30, 2), float32], Tensor[(15, 2, 2), uint32]) {
  %595 = fn () -> (Tensor[(30, 2), float32], Tensor[(15, 2, 2), uint32]) {
    %589 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
    %590 = %589.1;
    %591 = cast(%590, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %592 = reshape(%591, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float32] */;
    %593 = @func_9763(%592) /* ty=(Tensor[(15, 2, 2), uint32],) */;
    %594 = %593.0;
    (%590, %594)
  };
  %595() /* ty=(Tensor[(30, 2), float32], Tensor[(15, 2, 2), uint32]) */
}

def @func_13429() -> (Tensor[(15, 2, 2), float32],) {
  @func_13427() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_11352() -> Tensor[(15, 2, 2), bool] {
  @func_6111() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_15693() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  @func_15691() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) */
}

def @func_17388() -> Tensor[(15, 2, 2), float32] {
  @func_17386() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_4673() -> Tensor[(15, 2, 2), float32] {
  %597 = fn () -> Tensor[(15, 2, 2), float32] {
    %596 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %596.0
  };
  %597() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_12570() -> Tensor[(30, 2), float32] {
  %599 = fn () -> Tensor[(30, 2), float32] {
    %598 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
    %598.0
  };
  %599() /* ty=Tensor[(30, 2), float32] */
}

def @func_15867() -> (Tensor[(30, 2), float32], Tensor[(30, 2), uint16]) {
  @func_15865() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), uint16]) */
}

def @func_12524() -> (Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  @func_12522() /* ty=(Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_8896(%var_8876: Tensor[(1352), float64]) -> (Tensor[(1352), int32], Tensor[(30, 2), float64]) {
  %600 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %601 = %600.1;
  %602 = cast(%var_8876, dtype="int32") /* ty=Tensor[(1352), int32] */;
  %603 = shape_of(%601, dtype="int32") /* ty=Tensor[(1), int32] */;
  %604 = cast(%601, dtype="int32") /* ty=Tensor[(1352), int32] */;
  %605 = dyn.reshape(%602, %603, newshape=[]) /* ty=Tensor[(?), int32] */;
  %606 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %607 = subtract(%604, %605) /* ty=Tensor[(1352), int32] */;
  %608 = %606.2;
  (%607, %608)
}

def @func_13247(%var_13177: Tensor[(64), float32]) -> (Tensor[(30, 2), uint16], Tensor[(8, 4, 2), uint64], Tensor[(64), float32], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %609 = cast(%var_13177, dtype="float32") /* ty=Tensor[(64), float32] */;
  %610 = reshape(%609, newshape=[8, 4, 2]) /* ty=Tensor[(8, 4, 2), float32] */;
  %611 = @func_1136(%610) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */;
  %612 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %613 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %614 = @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %615 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %616 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
  %617 = %611.2;
  %618 = %612.1;
  %619 = %613.0;
  %620 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  %621 = @func_9287() /* ty=Tensor[(30, 2), bool] */;
  %622 = %614.0;
  %623 = %615.0;
  (%616, %617, %var_13177, %618, %619, %620, %621, %622, %623)
}

def @func_5665(%var_5639: Tensor[(1, 10, 15), float64]) -> (Tensor[(8, 10, 15), float64], Tensor[(1352), float64], Tensor[(11, 11, 15), uint8], Tensor[(1815), float64]) {
  %624 = cast(%var_5639, dtype="float64") /* ty=Tensor[(1, 10, 15), float64] */;
  %625 = cast(meta[relay.Constant][15] /* ty=Tensor[(8, 10, 15), float64] */, dtype="float64") /* ty=Tensor[(8, 10, 15), float64] */;
  %626 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %627 = cast(meta[relay.Constant][16] /* ty=Tensor[(1815), float64] */, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %628 = cast(meta[relay.Constant][16] /* ty=Tensor[(1815), float64] */, dtype="float64") /* ty=Tensor[(1815), float64] */;
  %629 = reshape(%627, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %630 = reshape(%628, newshape=[11, 11, 15]) /* ty=Tensor[(11, 11, 15), float64] */;
  %631 = @func_105(%629, %630) /* ty=(Tensor[(11, 11, 15), float64], Tensor[(11, 11, 15), uint8]) */;
  %632 = power(%624, %625) /* ty=Tensor[(8, 10, 15), float64] */;
  %633 = %626.1;
  %634 = %631.1;
  (%632, %633, %634, meta[relay.Constant][16] /* ty=Tensor[(1815), float64] */)
}

def @func_15263() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  @func_15261() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_12293() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(5, 11, 2), float64]) {
  %635 = @func_7467() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %636 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
  %637 = @func_11224() /* ty=(Tensor[(30, 2), bool],) */;
  %638 = %637.0;
  %639 = cast(%638, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %640 = shape_of(%636, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%636, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %643 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %644 = %635.1;
  %645 = @func_8409() /* ty=Tensor[(30, 2), bool] */;
  %646 = multiply(%641, %642) /* ty=Tensor[(15, 2, 2), float32] */;
  %647 = @func_11660() /* ty=Tensor[(5, 11, 2), float64] */;
  (%643, %644, %645, %646, %647)
}

def @func_17944() -> (Tensor[(30, 2), float32],) {
  @func_17942() /* ty=(Tensor[(30, 2), float32],) */
}

def @func_9848() -> (Tensor[(15, 2, 2), float32],) {
  %650 = fn () -> (Tensor[(15, 2, 2), float32],) {
    %648 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %649 = %648.0;
    (%649,)
  };
  %650() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_4200(%var_4198: Tensor[(9, 8, 1), uint64], %var_4199: Tensor[(9, 8, 16), uint64]) -> (Tensor[(9, 8, 16), uint64],) {
  @func_4196(%var_4198, %var_4199) /* ty=(Tensor[(9, 8, 16), uint64],) */
}

def @func_13856() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  %651 = @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
  %652 = @func_11550() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %653 = @func_8986() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %654 = %651.0;
  %655 = @func_10826() /* ty=Tensor[(30, 2), bool] */;
  %656 = %652.1;
  %657 = %653.1;
  (%654, %655, %656, %657)
}

def @func_16180() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  @func_16178() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_8854(%var_8853: Tensor[(15, 2, 2), float64]) -> (Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) {
  %672 = fn (%var_8817: Tensor[(15, 2, 2), float64]) -> (Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) {
    %658 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
    %659 = %658.0;
    %660 = cast(%659, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %661 = rsqrt(%660) /* ty=Tensor[(15, 2, 2), float64] */;
    %662 = cast(%var_8817, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
    %663 = shape_of(%661, dtype="int32") /* ty=Tensor[(3), int32] */;
    %664 = cast(%661, dtype="int8") /* ty=Tensor[(15, 2, 2), int8] */;
    %665 = dyn.reshape(%662, %663, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %666 = cast(%661, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %667 = shape_of(%var_8817, dtype="int32") /* ty=Tensor[(3), int32] */;
    %668 = cast(%var_8817, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %670 = left_shift(%664, %665) /* ty=Tensor[(15, 2, 2), int8] */;
    %671 = divide(%668, %669) /* ty=Tensor[(15, 2, 2), float32] */;
    (%670, %671)
  };
  %672(%var_8853) /* ty=(Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) */
}

def @func_7089(%var_7087: Tensor[(3, 6, 5), int16], %var_7088: Tensor[(3, 6, 5), int16]) -> Tensor[(3, 6, 5), int16] {
  %677 = fn (%var_7061: Tensor[(3, 6, 5), int16], %var_7062: Tensor[(3, 6, 5), int16]) -> Tensor[(3, 6, 5), int16] {
    %673 = cast(%var_7062, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
    %674 = shape_of(%var_7061, dtype="int32") /* ty=Tensor[(3), int32] */;
    %675 = cast(%var_7061, dtype="int16") /* ty=Tensor[(3, 6, 5), int16] */;
    %676 = dyn.reshape(%673, %674, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    subtract(%675, %676) /* ty=Tensor[(3, 6, 5), int16] */
  };
  %677(%var_7087, %var_7088) /* ty=Tensor[(3, 6, 5), int16] */
}

def @func_9766(%var_9764: Tensor[(15, 2, 2), float32]) -> (Tensor[(15, 2, 2), uint32],) {
  @func_9763(%var_9764) /* ty=(Tensor[(15, 2, 2), uint32],) */
}

def @func_13394() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %682 = fn () -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
    %678 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
    %679 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
    %680 = %678.2;
    %681 = %679.0;
    (%680, %681)
  };
  %682() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_12635(%var_12633: Tensor[(1152), uint64]) -> (Tensor[(30, 2), int16], Tensor[(30, 2), float32], Tensor[(1152), uint64]) {
  @func_12632(%var_12633) /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), float32], Tensor[(1152), uint64]) */
}

def @func_12536() -> Tensor[(30, 2), bool] {
  %684 = fn () -> Tensor[(30, 2), bool] {
    %683 = @func_8576() /* ty=(Tensor[(30, 2), bool],) */;
    %683.0
  };
  %684() /* ty=Tensor[(30, 2), bool] */
}

def @func_9992() -> (Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) {
  @func_9990() /* ty=(Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) */
}

def @func_5623(%var_5596: int32) -> (Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %685 = cast(%var_5596, dtype="int32") /* ty=int32 */;
  %686 = cast(meta[relay.Constant][17] /* ty=Tensor[(5, 12, 3), int32] */, dtype="int32") /* ty=Tensor[(5, 12, 3), int32] */;
  %687 = right_shift(%685, %686) /* ty=Tensor[(5, 12, 3), int32] */;
  %688 = @func_3598() /* ty=Tensor[(30, 2), float32] */;
  %689 = @func_4893() /* ty=Tensor[(30, 2), float32] */;
  %690 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  (%687, %688, %689, %690)
}

def @func_8020() -> Tensor[(30, 2), bool] {
  %691 = @func_3568() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %691.0
}

def @func_16620() -> (Tensor[(6, 12, 5), float64],) {
  @func_16618() /* ty=(Tensor[(6, 12, 5), float64],) */
}

def @func_2523() -> (Tensor[(30, 2), bool],) {
  %694 = fn () -> (Tensor[(30, 2), bool],) {
    %692 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %693 = %692.2;
    (%693,)
  };
  %694() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_12522() -> (Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %695 = @func_9990() /* ty=(Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) */;
  %696 = @func_11907() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */;
  %697 = @func_10883() /* ty=(Tensor[(30, 2), uint16],) */;
  %698 = @func_9374() /* ty=(Tensor[(30, 2), float32],) */;
  %699 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %700 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %701 = %695.1;
  %702 = %696.2;
  %703 = %697.0;
  %704 = %698.0;
  %705 = %699.1;
  %706 = %700.0;
  (%701, %702, %703, %704, %705, %706)
}

def @func_9278() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %707 = @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
  %708 = @func_5497() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %709 = @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %710 = %707.0;
  %711 = @func_4122() /* ty=Tensor[(15, 2, 2), bool] */;
  %712 = %708.0;
  %713 = %709.0;
  (%710, %711, %712, %713)
}

def @func_4610(%var_4608: Tensor[(1152), uint64], %var_4609: Tensor[(18, 4), uint64]) -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(1152), uint64], Tensor[(18, 4), float64]) {
  %732 = fn (%var_4582: Tensor[(1152), uint64], %var_4593: Tensor[(18, 4), uint64]) -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(1152), uint64], Tensor[(18, 4), float64]) {
    %714 = @func_4242() /* ty=Tensor[(30, 2), bool] */;
    %715 = cast(%714, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %716 = cast(%714, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %717 = reshape(%715, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %718 = reshape(%716, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %719 = @func_2060(%717, %718) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %720 = cast(meta[relay.Constant][18] /* ty=Tensor[(18, 4), uint64] */, dtype="uint64") /* ty=Tensor[(18, 4), uint64] */;
    %721 = cast(%var_4582, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
    %722 = reshape(%720, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
    %723 = reshape(%721, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
    %724 = @func_4196(%722, %723) /* ty=(Tensor[(9, 8, 16), uint64],) */;
    %725 = cast(%var_4593, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
    %726 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(18, 4), uint64] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %727 = cast(meta[relay.Constant][18] /* ty=Tensor[(18, 4), uint64] */, dtype="float64") /* ty=Tensor[(18, 4), float64] */;
    %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %729 = %719.1;
    %730 = %724.0;
    %731 = floor_mod(%727, %728) /* ty=Tensor[(18, 4), float64] */;
    (%714, %729, %730, %var_4582, %731)
  };
  %732(%var_4608, %var_4609) /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(1152), uint64], Tensor[(18, 4), float64]) */
}

def @func_7318() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), bool]) {
  @func_7316() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool]) */
}

def @func_12990() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %733 = @func_6712() /* ty=Tensor[(30, 2), bool] */;
  %734 = @func_10904() /* ty=Tensor[(30, 2), float64] */;
  (%733, %734)
}

def @func_7785() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %745 = fn () -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
    %735 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
    %736 = cast(%735, dtype="uint16") /* ty=Tensor[(30, 2), uint16] */;
    %737 = reshape(%736, newshape=[30, 2]) /* ty=Tensor[(30, 2), uint16] */;
    %738 = @func_6310(%737) /* ty=Tensor[(30, 2), float32] */;
    %739 = cast(%738, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %740 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
    %741 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
    %742 = cos(%739) /* ty=Tensor[(30, 2), float64] */;
    %743 = %740.0;
    %744 = %741.0;
    (%735, %742, %743, %744)
  };
  %745() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_13074(%var_13072: Tensor[(2704), float64]) -> (Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), uint16]) {
  @func_13071(%var_13072) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), uint16]) */
}

def @func_18416() -> Tensor[(15, 2, 2), float64] {
  %747 = fn () -> Tensor[(15, 2, 2), float64] {
    %746 = @func_9278() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %746.0
  };
  %747() /* ty=Tensor[(15, 2, 2), float64] */
}

def @func_10502() -> (Tensor[(30, 2), bool],) {
  %750 = fn () -> (Tensor[(30, 2), bool],) {
    %748 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
    %749 = %748.1;
    (%749,)
  };
  %750() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_9280() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  @func_9278() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_8411() -> Tensor[(30, 2), bool] {
  @func_8409() /* ty=Tensor[(30, 2), bool] */
}

def @func_10234() -> (Tensor[(15, 2, 2), float32],) {
  %751 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %752 = %751.0;
  (%752,)
}

def @func_17679() -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  @func_17677() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_15261() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %753 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
  %754 = %753.0;
  %755 = @func_8130() /* ty=Tensor[(30, 2), bool] */;
  (%754, %755)
}

def @func_2763() -> (Tensor[(30, 2), bool],) {
  %756 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %757 = %756.0;
  (%757,)
}

def @func_11265() -> Tensor[(30, 2), bool] {
  @func_5350() /* ty=Tensor[(30, 2), bool] */
}

def @func_2463() -> (Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %766 = fn () -> (Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
    %758 = cast(meta[relay.Constant][19] /* ty=Tensor[(5, 3, 3), float32] */, dtype="float32") /* ty=Tensor[(5, 3, 3), float32] */;
    %759 = cast(meta[relay.Constant][20] /* ty=Tensor[(30, 2), bool] */, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %760 = cast(meta[relay.Constant][20] /* ty=Tensor[(30, 2), bool] */, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %761 = reshape(%759, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %762 = reshape(%760, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %763 = @func_2060(%761, %762) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %764 = acosh(%758) /* ty=Tensor[(5, 3, 3), float32] */;
    %765 = %763.1;
    (%764, %765, meta[relay.Constant][20] /* ty=Tensor[(30, 2), bool] */)
  };
  %766() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_7208() -> (Tensor[(15, 2, 2), float32],) {
  %769 = fn () -> (Tensor[(15, 2, 2), float32],) {
    %767 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %768 = %767.0;
    (%768,)
  };
  %769() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_12402() -> (Tensor[(30, 2), bool],) {
  %770 = @func_10826() /* ty=Tensor[(30, 2), bool] */;
  (%770,)
}

def @func_14445() -> Tensor[(30, 2), bool] {
  @func_14443() /* ty=Tensor[(30, 2), bool] */
}

def @func_16798() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
  %774 = fn () -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool]) {
    %771 = @func_15047() /* ty=(Tensor[(30, 2), float32], Tensor[(15, 2, 2), uint32]) */;
    %772 = %771.0;
    %773 = @func_11697() /* ty=Tensor[(30, 2), bool] */;
    (%772, %773)
  };
  %774() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_13071(%var_13040: Tensor[(2704), float64]) -> (Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), uint16]) {
  %775 = @func_10234() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %776 = cast(%var_13040, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %777 = cast(%var_13040, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %778 = reshape(%776, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %779 = reshape(%777, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %780 = @func_8771(%778, %779) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */;
  %781 = @func_8530() /* ty=(Tensor[(30, 2), uint16],) */;
  %782 = @func_11352() /* ty=Tensor[(15, 2, 2), bool] */;
  %783 = %775.0;
  %784 = %780.1;
  %785 = %781.0;
  (%782, %783, %784, %var_13040, %785)
}

def @func_17785() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32]) {
  %786 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %787 = %786.1;
  %788 = @func_3793() /* ty=Tensor[(30, 2), float32] */;
  (%787, %788)
}

def @func_17761() -> (Tensor[(15, 2, 2), float32],) {
  @func_17759() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_5399() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %791 = fn () -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
    %789 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
    %790 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
    (%789, %790)
  };
  %791() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_7375() -> (Tensor[(15, 2, 2), float32],) {
  %792 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  (%792,)
}

def @func_17745() -> (Tensor[(15, 2, 2), float32],) {
  %793 = @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %794 = %793.0;
  (%794,)
}

def @func_12992() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  @func_12990() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */
}

def @func_15960() -> Tensor[(30, 2), bool] {
  %795 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %795.0
}

def @func_2574() -> (Tensor[(30, 2), bool],) {
  %798 = fn () -> (Tensor[(30, 2), bool],) {
    %796 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
    %797 = %796.0;
    (%797,)
  };
  %798() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_18425() -> (Tensor[(30, 2), float32],) {
  %799 = @func_17942() /* ty=(Tensor[(30, 2), float32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_7984() -> (Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) {
  @func_7982() /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) */
}

def @func_17529() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) {
  @func_17527() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */
}

def @func_6759(%var_6757: Tensor[(6, 6, 16), float64], %var_6758: Tensor[(6, 6, 16), float64]) -> (Tensor[(6, 6, 16), bool], Tensor[(30, 2), float64]) {
  %807 = fn (%var_6728: Tensor[(6, 6, 16), float64], %var_6729: Tensor[(6, 6, 16), float64]) -> (Tensor[(6, 6, 16), bool], Tensor[(30, 2), float64]) {
    %801 = cast(%var_6729, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
    %802 = shape_of(%var_6728, dtype="int32") /* ty=Tensor[(3), int32] */;
    %803 = cast(%var_6728, dtype="bool") /* ty=Tensor[(6, 6, 16), bool] */;
    %804 = dyn.reshape(%801, %802, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %805 = not_equal(%803, %804) /* ty=Tensor[(6, 6, 16), bool] */;
    %806 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
    (%805, %806)
  };
  %807(%var_6757, %var_6758) /* ty=(Tensor[(6, 6, 16), bool], Tensor[(30, 2), float64]) */
}

def @func_7468() -> (Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %835 = fn () -> (Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
    %808 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
    %809 = cast(meta[relay.Constant][21] /* ty=Tensor[(30, 2), float64] */, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
    %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(2), int32] */;
    %811 = cast(%808, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
    %813 = cast(meta[relay.Constant][21] /* ty=Tensor[(30, 2), float64] */, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %814 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
    %815 = %814.1;
    %816 = cast(%815, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %817 = reshape(%813, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %818 = reshape(%816, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %819 = @func_2060(%817, %818) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %820 = cast(%815, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %821 = acosh(%820) /* ty=Tensor[(30, 2), float32] */;
    %822 = cast(%821, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %823 = atan(%822) /* ty=Tensor[(30, 2), float32] */;
    %824 = cast(%808, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %825 = shape_of(%823, dtype="int32") /* ty=Tensor[(2), int32] */;
    %826 = cast(%823, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %827 = dyn.reshape(%824, %825, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %828 = @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %829 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
    %830 = bitwise_xor(%811, %812) /* ty=Tensor[(30, 2), uint32] */;
    %831 = %819.0;
    %832 = equal(%826, %827) /* ty=Tensor[(30, 2), bool] */;
    %833 = %828.0;
    %834 = %829.1;
    (%830, %831, %832, %833, %834)
  };
  %835() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_18103() -> Tensor[(30, 2), bool] {
  %836 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %836.0
}

def @func_9067() -> Tensor[(30, 2), uint16] {
  @func_9065() /* ty=Tensor[(30, 2), uint16] */
}

def @func_11627() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  @func_11625() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */
}

def @func_9118() -> Tensor[(30, 2), bool] {
  @func_9116() /* ty=Tensor[(30, 2), bool] */
}

def @func_6050() -> (Tensor[(30, 2), bool],) {
  %839 = fn () -> (Tensor[(30, 2), bool],) {
    %837 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
    %838 = %837.0;
    (%838,)
  };
  %839() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_4453() -> (Tensor[(30, 2), int16],) {
  %840 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  (%840,)
}

def @func_14213(%var_14103: Tensor[(5, 1, 16), int16], %var_14104: Tensor[(5, 10, 16), int16], %var_14186: Tensor[(90), int16]) -> (Tensor[(5, 10, 16), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], int32, Tensor[(3, 6, 5), int16], Tensor[(90), int16], Tensor[(5, 10, 16), float32], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %841 = cast(%var_14103, dtype="bool") /* ty=Tensor[(5, 1, 16), bool] */;
  %842 = cast(%var_14104, dtype="bool") /* ty=Tensor[(5, 10, 16), bool] */;
  %843 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %844 = cast(-10 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %845 = reshape(%844, newshape=[]) /* ty=int32 */;
  %846 = @func_10995(%845) /* ty=(Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %847 = cast(%var_14186, dtype="int16") /* ty=Tensor[(90), int16] */;
  %848 = cast(%var_14186, dtype="int16") /* ty=Tensor[(90), int16] */;
  %849 = reshape(%847, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), int16] */;
  %850 = reshape(%848, newshape=[3, 6, 5]) /* ty=Tensor[(3, 6, 5), int16] */;
  %851 = cast(%var_14104, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %852 = log10(%851) /* ty=Tensor[(5, 10, 16), float32] */;
  %853 = cast(%852, dtype="float64") /* ty=Tensor[(5, 10, 16), float64] */;
  %854 = tan(%853) /* ty=Tensor[(5, 10, 16), float64] */;
  %855 = cast(%854, dtype="float32") /* ty=Tensor[(5, 10, 16), float32] */;
  %856 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
  %857 = %843.0;
  %858 = cast(%857, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %859 = reshape(%858, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %860 = @func_9690(%859) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float64], float32, float32) */;
  %861 = not_equal(%841, %842) /* ty=Tensor[(5, 10, 16), bool] */;
  %862 = @func_11045() /* ty=Tensor[(15, 2, 2), bool] */;
  %863 = %846.2;
  %864 = @func_7086(%849, %850) /* ty=Tensor[(3, 6, 5), int16] */;
  %865 = sinh(%855) /* ty=Tensor[(5, 10, 16), float32] */;
  %866 = %856.0;
  %867 = %860.2;
  (%861, %857, %862, %863, -10 /* ty=int32 */, %864, %var_14186, %865, %866, %867)
}

def @func_9288() -> Tensor[(30, 2), bool] {
  %869 = fn () -> Tensor[(30, 2), bool] {
    %868 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
    %868.0
  };
  %869() /* ty=Tensor[(30, 2), bool] */
}

def @func_10480() -> Tensor[(15, 2, 2), bool] {
  @func_10478() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_4242() -> Tensor[(30, 2), bool] {
  %870 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
  %870.0
}

def @func_3847() -> Tensor[(30, 2), int16] {
  @func_3845() /* ty=Tensor[(30, 2), int16] */
}

def @func_3845() -> Tensor[(30, 2), int16] {
  %871 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %872 = %871.2;
  %873 = cast(meta[relay.Constant][22] /* ty=Tensor[(30, 2), uint16] */, dtype="int16") /* ty=Tensor[(30, 2), int16] */;
  %874 = shape_of(%872, dtype="int32") /* ty=Tensor[(2), int32] */;
  %875 = cast(%872, dtype="int16") /* ty=Tensor[(30, 2), int16] */;
  %876 = dyn.reshape(%873, %874, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  minimum(%875, %876) /* ty=Tensor[(30, 2), int16] */
}

def @func_15691() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  %877 = @func_13427() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %878 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %879 = %877.0;
  %880 = %878.0;
  (%879, %880)
}

def @func_11045() -> Tensor[(15, 2, 2), bool] {
  @func_4122() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_17942() -> (Tensor[(30, 2), float32],) {
  %881 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %882 = %881.0;
  (%882,)
}

def @func_3486() -> (Tensor[(30, 2), float64],) {
  %883 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %884 = %883.0;
  %885 = cast(%884, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %886 = log10(%885) /* ty=Tensor[(30, 2), float64] */;
  (%886,)
}

def @func_16054() -> (Tensor[(15, 6, 14), float32],) {
  %887 = cast(meta[relay.Constant][23] /* ty=Tensor[(15, 6, 14), float32] */, dtype="float32") /* ty=Tensor[(15, 6, 14), float32] */;
  %888 = tan(%887) /* ty=Tensor[(15, 6, 14), float32] */;
  (%888,)
}

def @func_7166() -> (Tensor[(15, 2, 2), float32],) {
  %889 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %890 = %889.0;
  (%890,)
}

def @func_3957() -> (Tensor[(30, 2), uint16],) {
  @func_3955() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_2765() -> (Tensor[(30, 2), bool],) {
  @func_2763() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_3955() -> (Tensor[(30, 2), uint16],) {
  %891 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %892 = %891.2;
  (%892,)
}

def @func_5883(%var_5881: Tensor[(72), uint64]) -> (Tensor[(8, 1, 7), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  @func_5880(%var_5881) /* ty=(Tensor[(8, 1, 7), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_816(%var_814: Tensor[(13, 8, 13), float64]) -> (Tensor[(13, 8, 13), float64],) {
  @func_813(%var_814) /* ty=(Tensor[(13, 8, 13), float64],) */
}

def @func_3153() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) {
  %893 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %894 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %895 = %893.0;
  %896 = %894.0;
  (%895, %896)
}

def @func_1398(%var_1396: Tensor[(15, 1, 11), float64]) -> (Tensor[(15, 3, 11), float64], Tensor[(13, 8, 13), float64], Tensor[(64), float32]) {
  @func_1395(%var_1396) /* ty=(Tensor[(15, 3, 11), float64], Tensor[(13, 8, 13), float64], Tensor[(64), float32]) */
}

def @func_5949() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */
}

def @func_4122() -> Tensor[(15, 2, 2), bool] {
  %897 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %897.3
}

def @func_16618() -> (Tensor[(6, 12, 5), float64],) {
  %898 = @func_4695() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) */;
  %899 = %898.0;
  (%899,)
}

def @func_1138(%var_1137: Tensor[(8, 4, 2), float32]) -> (Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) {
  %911 = fn (%var_1111: Tensor[(8, 4, 2), float32]) -> (Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) {
    %900 = cast(meta[relay.Constant][24] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
    %901 = reshape(%900, newshape=[13, 8, 13]) /* ty=Tensor[(13, 8, 13), float64] */;
    %902 = @func_813(%901) /* ty=(Tensor[(13, 8, 13), float64],) */;
    %903 = cast(%var_1111, dtype="float32") /* ty=Tensor[(8, 4, 2), float32] */;
    %904 = tan(%903) /* ty=Tensor[(8, 4, 2), float32] */;
    %905 = cast(%var_1111, dtype="uint64") /* ty=Tensor[(8, 4, 2), uint64] */;
    %906 = shape_of(%904, dtype="int32") /* ty=Tensor[(3), int32] */;
    %907 = cast(%904, dtype="uint64") /* ty=Tensor[(8, 4, 2), uint64] */;
    %908 = dyn.reshape(%905, %906, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %909 = %902.0;
    %910 = left_shift(%907, %908) /* ty=Tensor[(8, 4, 2), uint64] */;
    (%909, meta[relay.Constant][24] /* ty=Tensor[(1352), float64] */, %910)
  };
  %911(%var_1137) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(8, 4, 2), uint64]) */
}

def @func_8022() -> Tensor[(30, 2), bool] {
  @func_8020() /* ty=Tensor[(30, 2), bool] */
}

def @func_15962() -> Tensor[(30, 2), bool] {
  @func_15960() /* ty=Tensor[(30, 2), bool] */
}

def @func_9517() -> Tensor[(30, 2), bool] {
  @func_3559() /* ty=Tensor[(30, 2), bool] */
}

def @func_7168() -> (Tensor[(15, 2, 2), float32],) {
  @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_18427() -> (Tensor[(30, 2), float32],) {
  @func_18425() /* ty=(Tensor[(30, 2), float32],) */
}

def @func_17922() -> Tensor[(30, 2), uint16] {
  @func_17920() /* ty=Tensor[(30, 2), uint16] */
}

def @func_18329() -> Tensor[(30, 2), uint16] {
  %912 = @func_15210() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) */;
  %912.0
}

def @func_11756(%var_11754: int32) -> (Tensor[(30, 2), float64], Tensor[(30, 2), float32], int32) {
  @func_11753(%var_11754) /* ty=(Tensor[(30, 2), float64], Tensor[(30, 2), float32], int32) */
}

def @func_10478() -> Tensor[(15, 2, 2), bool] {
  %913 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
  %913.3
}

def @func_11697() -> Tensor[(30, 2), bool] {
  %914 = @func_4974() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */;
  %914.2
}

def @func_9374() -> (Tensor[(30, 2), float32],) {
  %915 = @func_8171() /* ty=Tensor[(30, 2), float32] */;
  (%915,)
}

def @func_9947(%var_9884: Tensor[(30, 2), uint16]) -> (Tensor[(30, 2), uint32], Tensor[(16, 13, 13), float64], Tensor[(104, 26), float64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %916 = @func_7246() /* ty=(Tensor[(30, 2), uint16],) */;
  %917 = %916.0;
  %918 = cast(%var_9884, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %919 = shape_of(%917, dtype="int32") /* ty=Tensor[(2), int32] */;
  %920 = cast(%917, dtype="uint32") /* ty=Tensor[(30, 2), uint32] */;
  %921 = dyn.reshape(%918, %919, newshape=[]) /* ty=Tensor[(?, ?), uint32] */;
  %922 = cast(meta[relay.Constant][25] /* ty=Tensor[(104, 26), float64] */, dtype="float64") /* ty=Tensor[(104, 26), float64] */;
  %923 = cast(meta[relay.Constant][25] /* ty=Tensor[(104, 26), float64] */, dtype="float64") /* ty=Tensor[(104, 26), float64] */;
  %924 = reshape(%922, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %925 = reshape(%923, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %926 = @func_8771(%924, %925) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */;
  %927 = @func_9350() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
  %928 = @func_6253() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(1040), float32], float32) */;
  %929 = bitwise_or(%920, %921) /* ty=Tensor[(30, 2), uint32] */;
  %930 = %926.0;
  %931 = %927.1;
  %932 = %928.0;
  (%929, %930, meta[relay.Constant][25] /* ty=Tensor[(104, 26), float64] */, %931, %932)
}

def @func_6708(%var_6706: Tensor[(72), uint64], %var_6707: Tensor[(1152), uint64]) -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), int16], Tensor[(30, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %965 = fn (%var_6671: Tensor[(72), uint64], %var_6672: Tensor[(1152), uint64]) -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), int16], Tensor[(30, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
    %933 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %934 = @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %935 = %934.0;
    %936 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
    %937 = cast(%936, dtype="int16") /* ty=Tensor[(30, 2), int16] */;
    %938 = shape_of(%935, dtype="int32") /* ty=Tensor[(3), int32] */;
    %939 = cast(%935, dtype="int16") /* ty=Tensor[(15, 2, 2), int16] */;
    %940 = dyn.reshape(%937, %938, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %941 = cast(%936, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %942 = cast(%var_6671, dtype="uint64") /* ty=Tensor[(72), uint64] */;
    %943 = cast(%var_6672, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
    %944 = reshape(%942, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
    %945 = reshape(%943, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
    %946 = @func_4196(%944, %945) /* ty=(Tensor[(9, 8, 16), uint64],) */;
    %947 = @func_6049() /* ty=(Tensor[(30, 2), bool],) */;
    %948 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
    %949 = %948.0;
    %950 = cast(%949, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %951 = sqrt(%950) /* ty=Tensor[(30, 2), float32] */;
    %952 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
    %953 = %952.0;
    %954 = cast(%953, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %955 = shape_of(%951, dtype="int32") /* ty=Tensor[(2), int32] */;
    %956 = cast(%951, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %957 = dyn.reshape(%954, %955, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %958 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
    %959 = %933.0;
    %960 = bitwise_xor(%939, %940) /* ty=Tensor[(15, 2, 2), int16] */;
    %961 = tan(%941) /* ty=Tensor[(30, 2), float32] */;
    %962 = %946.0;
    %963 = %947.0;
    %964 = not_equal(%956, %957) /* ty=Tensor[(30, 2), bool] */;
    (%958, %959, %960, %961, %962, %var_6671, %var_6672, %963, %964)
  };
  %965(%var_6706, %var_6707) /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), int16], Tensor[(30, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64], Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_17787() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32]) {
  @func_17785() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32]) */
}

def @func_5025() -> (Tensor[(30, 2), int16],) {
  @func_5023() /* ty=(Tensor[(30, 2), int16],) */
}

def @func_13471() -> Tensor[(30, 2), bool] {
  @func_3559() /* ty=Tensor[(30, 2), bool] */
}

def @func_14659() -> (Tensor[(5, 11, 2), float64],) {
  %968 = fn () -> (Tensor[(5, 11, 2), float64],) {
    %966 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
    %967 = %966.0;
    (%967,)
  };
  %968() /* ty=(Tensor[(5, 11, 2), float64],) */
}

def @func_3112() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %978 = fn () -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
    %969 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
    %970 = cast(%969, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %971 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
    %972 = %971.0;
    %973 = cast(%972, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %974 = reshape(%973, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
    %975 = @func_2875(%974) /* ty=(Tensor[(30, 2), uint16],) */;
    %976 = sqrt(%970) /* ty=Tensor[(15, 2, 2), float64] */;
    %977 = %975.0;
    (%976, %972, %977)
  };
  %978() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_10826() -> Tensor[(30, 2), bool] {
  %979 = @func_8986() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float64]) */;
  %979.0
}

def @func_11267() -> Tensor[(30, 2), bool] {
  @func_11265() /* ty=Tensor[(30, 2), bool] */
}

def @func_13825(%var_13823: Tensor[(2704), float64]) -> (Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64], Tensor[(2704), float64], Tensor[(30, 2), uint16]) {
  @func_13822(%var_13823) /* ty=(Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64], Tensor[(2704), float64], Tensor[(30, 2), uint16]) */
}

def @func_3062() -> (Tensor[(30, 2), bool], Tensor[(1352), float64]) {
  %980 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %981 = %980.2;
  %982 = cast(%981, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %983 = reshape(%982, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %984 = @func_2726(%983) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %985 = %984.1;
  (%981, %985)
}

def @func_4160(%var_4158: float32, %var_4159: Tensor[(13, 16, 5), float32]) -> (Tensor[(13, 16, 5), float32],) {
  %989 = fn (%var_4133: float32, %var_4134: Tensor[(13, 16, 5), float32]) -> (Tensor[(13, 16, 5), float32],) {
    %986 = cast(%var_4133, dtype="float32") /* ty=float32 */;
    %987 = cast(%var_4134, dtype="float32") /* ty=Tensor[(13, 16, 5), float32] */;
    %988 = floor_divide(%986, %987) /* ty=Tensor[(13, 16, 5), float32] */;
    (%988,)
  };
  %989(%var_4158, %var_4159) /* ty=(Tensor[(13, 16, 5), float32],) */
}

def @func_13250(%var_13248: Tensor[(64), float32]) -> (Tensor[(30, 2), uint16], Tensor[(8, 4, 2), uint64], Tensor[(64), float32], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  @func_13247(%var_13248) /* ty=(Tensor[(30, 2), uint16], Tensor[(8, 4, 2), uint64], Tensor[(64), float32], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_17192() -> Tensor[(30, 2), uint16] {
  @func_17190() /* ty=Tensor[(30, 2), uint16] */
}

def @func_11660() -> Tensor[(5, 11, 2), float64] {
  @func_10396() /* ty=Tensor[(5, 11, 2), float64] */
}

def @func_6713() -> Tensor[(30, 2), bool] {
  %990 = fn () -> Tensor[(30, 2), bool] {
    @func_5350() /* ty=Tensor[(30, 2), bool] */
  };
  %990() /* ty=Tensor[(30, 2), bool] */
}

def @func_4089(%var_4087: Tensor[(30, 2), float32]) -> (Tensor[(30, 2), int64], Tensor[(30, 2), float32]) {
  @func_4086(%var_4087) /* ty=(Tensor[(30, 2), int64], Tensor[(30, 2), float32]) */
}

def @func_12701() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) {
  %999 = fn () -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) {
    %991 = @func_7982() /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) */;
    %992 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
    %993 = %992.2;
    %994 = cast(%993, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %995 = reshape(%994, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), float64] */;
    %996 = @func_8852(%995) /* ty=(Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) */;
    %997 = %991.1;
    %998 = %996.0;
    (%997, %993, %998)
  };
  %999() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) */
}

def @func_5122() -> Tensor[(30, 2), float64] {
  @func_5120() /* ty=Tensor[(30, 2), float64] */
}

def @func_4086(%var_4067: Tensor[(30, 2), float32]) -> (Tensor[(30, 2), int64], Tensor[(30, 2), float32]) {
  %1000 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
  %1001 = %1000.0;
  %1002 = cast(%var_4067, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %1003 = shape_of(%1001, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1004 = cast(%1001, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
  %1005 = dyn.reshape(%1002, %1003, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %1006 = power(%1004, %1005) /* ty=Tensor[(30, 2), float64] */;
  %1007 = cast(%var_4067, dtype="int64") /* ty=Tensor[(30, 2), int64] */;
  %1008 = shape_of(%1006, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1009 = cast(%1006, dtype="int64") /* ty=Tensor[(30, 2), int64] */;
  %1010 = dyn.reshape(%1007, %1008, newshape=[]) /* ty=Tensor[(?, ?), int64] */;
  %1011 = multiply(%1009, %1010) /* ty=Tensor[(30, 2), int64] */;
  %1012 = @func_3793() /* ty=Tensor[(30, 2), float32] */;
  (%1011, %1012)
}

def @func_10355(%var_10354: Tensor[(48, 24), uint64]) -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(48, 24), uint64], Tensor[(3, 24), uint64]) {
  %1023 = fn (%var_10336: Tensor[(48, 24), uint64]) -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(48, 24), uint64], Tensor[(3, 24), uint64]) {
    %1013 = @func_8084() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %1014 = @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */;
    %1015 = cast(%var_10336, dtype="uint64") /* ty=Tensor[(48, 24), uint64] */;
    %1016 = cast(meta[relay.Constant][26] /* ty=Tensor[(3, 24), uint64] */, dtype="uint64") /* ty=Tensor[(3, 24), uint64] */;
    %1017 = reshape(%1015, newshape=[1152]) /* ty=Tensor[(1152), uint64] */;
    %1018 = reshape(%1016, newshape=[18, 4]) /* ty=Tensor[(18, 4), uint64] */;
    %1019 = @func_4607(%1017, %1018) /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(1152), uint64], Tensor[(18, 4), float64]) */;
    %1020 = %1013.0;
    %1021 = %1014.1;
    %1022 = %1019.0;
    (%1020, %1021, %1022, %var_10336, meta[relay.Constant][26] /* ty=Tensor[(3, 24), uint64] */)
  };
  %1023(%var_10354) /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(48, 24), uint64], Tensor[(3, 24), uint64]) */
}

def @func_12843() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) {
  %1030 = fn () -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) {
    %1024 = @func_2551() /* ty=(Tensor[(30, 2), bool],) */;
    %1025 = @func_12700() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) */;
    %1026 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
    %1027 = %1024.0;
    %1028 = %1025.2;
    %1029 = %1026.2;
    (%1027, %1028, %1029)
  };
  %1030() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) */
}

def @func_3432() -> (Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  %1031 = cast(meta[relay.Constant][27] /* ty=Tensor[(6, 12, 5), float64] */, dtype="float64") /* ty=Tensor[(6, 12, 5), float64] */;
  %1032 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %1033 = @func_2930() /* ty=(Tensor[(30, 2), bool],) */;
  %1034 = %1033.0;
  %1035 = cast(%1034, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1036 = cast(%1034, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1037 = reshape(%1035, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %1038 = reshape(%1036, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
  %1039 = @func_2060(%1037, %1038) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %1040 = atanh(%1031) /* ty=Tensor[(6, 12, 5), float64] */;
  %1041 = %1032.1;
  %1042 = %1039.0;
  (%1040, %1041, %1034, %1042)
}

def @func_14914() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(2240), float64]) {
  %1056 = fn () -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(2240), float64]) {
    %1043 = @func_7166() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %1044 = @func_14627() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
    %1045 = @func_12402() /* ty=(Tensor[(30, 2), bool],) */;
    %1046 = @func_12293() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(5, 11, 2), float64]) */;
    %1047 = @func_10197() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(16, 10, 14), float64], Tensor[(2240), float64], Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %1048 = @func_13471() /* ty=Tensor[(30, 2), bool] */;
    %1049 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
    %1050 = @func_11045() /* ty=Tensor[(15, 2, 2), bool] */;
    %1051 = %1043.0;
    %1052 = %1044.2;
    %1053 = %1045.0;
    %1054 = %1046.0;
    %1055 = %1047.2;
    (%1048, %1049, %1050, %1051, %1052, %1053, %1054, %1055)
  };
  %1056() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(2240), float64]) */
}

def @func_9376() -> (Tensor[(30, 2), float32],) {
  @func_9374() /* ty=(Tensor[(30, 2), float32],) */
}

def @func_3292() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) {
  @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */
}

def @func_6031(%var_6030: float32) -> (Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) {
  %1076 = fn (%var_5991: float32) -> (Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) {
    %1057 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %1058 = %1057.1;
    %1059 = cast(%1058, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %1060 = cast(%var_5991, dtype="float32") /* ty=float32 */;
    %1061 = cast(meta[relay.Constant][28] /* ty=Tensor[(1040), float32] */, dtype="float32") /* ty=Tensor[(1040), float32] */;
    %1062 = reshape(%1060, newshape=[]) /* ty=float32 */;
    %1063 = reshape(%1061, newshape=[13, 16, 5]) /* ty=Tensor[(13, 16, 5), float32] */;
    %1064 = @func_4157(%1062, %1063) /* ty=(Tensor[(13, 16, 5), float32],) */;
    %1065 = cast(%1058, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
    %1066 = cast(meta[relay.Constant][29] /* ty=Tensor[(1352), float64] */, dtype="float64") /* ty=Tensor[(1352), float64] */;
    %1067 = reshape(%1065, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
    %1068 = reshape(%1066, newshape=[338, 4]) /* ty=Tensor[(338, 4), float64] */;
    %1069 = @func_2985(%1067, %1068) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint32], Tensor[(13, 8, 13), float64], Tensor[(338, 4), float64]) */;
    %1070 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
    %1071 = asin(%1059) /* ty=Tensor[(30, 2), float64] */;
    %1072 = %1064.0;
    %1073 = %1069.3;
    %1074 = %1070.3;
    %1075 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
    (%1071, %1072, %var_5991, meta[relay.Constant][28] /* ty=Tensor[(1040), float32] */, %1073, meta[relay.Constant][29] /* ty=Tensor[(1352), float64] */, %1074, %1075)
  };
  %1076(%var_6030) /* ty=(Tensor[(30, 2), float64], Tensor[(13, 16, 5), float32], float32, Tensor[(1040), float32], Tensor[(338, 4), float64], Tensor[(1352), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_12295() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(5, 11, 2), float64]) {
  @func_12293() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(5, 11, 2), float64]) */
}

def @func_12600() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) {
  %1080 = fn () -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) {
    %1077 = @func_7467() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %1078 = @func_10072() /* ty=Tensor[(15, 2, 2), float32] */;
    %1079 = %1077.1;
    (%1078, %1079)
  };
  %1080() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool]) */
}

def @func_16418() -> (Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool]) {
  %1081 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %1082 = %1081.0;
  %1083 = @func_10478() /* ty=Tensor[(15, 2, 2), bool] */;
  (%1082, %1083)
}

def @func_5592() -> Tensor[(15, 2, 2), float64] {
  @func_5590() /* ty=Tensor[(15, 2, 2), float64] */
}

def @func_4975() -> (Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) {
  %1090 = fn () -> (Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) {
    %1084 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
    %1085 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
    %1086 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
    %1087 = %1084.0;
    %1088 = %1085.1;
    %1089 = %1086.0;
    (%1087, %1088, %1089)
  };
  %1090() /* ty=(Tensor[(30, 2), float64], Tensor[(1352), float64], Tensor[(30, 2), bool]) */
}

def @func_17190() -> Tensor[(30, 2), uint16] {
  @func_5902() /* ty=Tensor[(30, 2), uint16] */
}

def @func_17759() -> (Tensor[(15, 2, 2), float32],) {
  %1091 = @func_6568() /* ty=Tensor[(15, 2, 2), float32] */;
  (%1091,)
}

def @func_13473() -> Tensor[(30, 2), bool] {
  @func_13471() /* ty=Tensor[(30, 2), bool] */
}

def @func_7666() -> (Tensor[(30, 2), bool],) {
  %1092 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
  %1093 = %1092.1;
  (%1093,)
}

def @func_2666() -> (Tensor[(15, 2, 2), float32],) {
  %1109 = fn () -> (Tensor[(15, 2, 2), float32],) {
    %1094 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %1095 = %1094.1;
    %1096 = cast(%1095, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    %1097 = cast(%1095, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
    %1098 = reshape(%1096, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %1099 = reshape(%1097, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %1100 = @func_2060(%1098, %1099) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %1101 = %1100.1;
    %1102 = cast(%1101, dtype="int16") /* ty=Tensor[(15, 2, 2), int16] */;
    %1103 = shape_of(%1095, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1104 = cast(%1095, dtype="int16") /* ty=Tensor[(15, 2, 2), int16] */;
    %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %1106 = minimum(%1104, %1105) /* ty=Tensor[(15, 2, 2), int16] */;
    %1107 = cast(%1106, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %1108 = log10(%1107) /* ty=Tensor[(15, 2, 2), float32] */;
    (%1108,)
  };
  %1109() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_13531() -> (Tensor[(30, 2), uint16],) {
  @func_13529() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_16131() -> (Tensor[(30, 2), uint16], Tensor[(5, 11, 2), float64]) {
  @func_16129() /* ty=(Tensor[(30, 2), uint16], Tensor[(5, 11, 2), float64]) */
}

def @func_5590() -> Tensor[(15, 2, 2), float64] {
  %1110 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %1111 = %1110.2;
  %1112 = cast(%1111, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
  atanh(%1112) /* ty=Tensor[(15, 2, 2), float64] */
}

def @func_11753(%var_11733: int32) -> (Tensor[(30, 2), float64], Tensor[(30, 2), float32], int32) {
  %1113 = cast(%var_11733, dtype="int32") /* ty=int32 */;
  %1114 = reshape(%1113, newshape=[]) /* ty=int32 */;
  %1115 = @func_5623(%1114) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
  %1116 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  %1117 = %1115.1;
  (%1116, %1117, %var_11733)
}

def @func_16576() -> Tensor[(15, 2, 2), float32] {
  @func_10715() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_16930() -> Tensor[(15, 2, 2), float32] {
  %1119 = fn () -> Tensor[(15, 2, 2), float32] {
    %1118 = @func_8730() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %1118.0
  };
  %1119() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_15580() -> Tensor[(30, 2), bool] {
  %1121 = fn () -> Tensor[(30, 2), bool] {
    %1120 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
    %1120.0
  };
  %1121() /* ty=Tensor[(30, 2), bool] */
}

def @func_17386() -> Tensor[(15, 2, 2), float32] {
  %1122 = @func_14913() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(2240), float64]) */;
  %1122.3
}

def @func_8698() -> (Tensor[(30, 2), uint16],) {
  %1125 = fn () -> (Tensor[(30, 2), uint16],) {
    %1123 = @func_4854() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */;
    %1124 = %1123.0;
    (%1124,)
  };
  %1125() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_7050() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) {
  @func_7048() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) */
}

def @func_16759(%var_16743: Tensor[(2704), float64]) -> (Tensor[(30, 2), int16], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), bool], Tensor[(6, 12, 5), float64], Tensor[(15, 2, 2), float32]) {
  %1126 = @func_15527() /* ty=(Tensor[(30, 2), int16],) */;
  %1127 = cast(%var_16743, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %1128 = reshape(%1127, newshape=[2704]) /* ty=Tensor[(2704), float64] */;
  %1129 = @func_13822(%1128) /* ty=(Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64], Tensor[(2704), float64], Tensor[(30, 2), uint16]) */;
  %1130 = %1126.0;
  %1131 = cast(%1130, dtype="float32") /* ty=Tensor[(30, 2), float32] */;
  %1132 = reshape(%1131, newshape=[30, 2]) /* ty=Tensor[(30, 2), float32] */;
  %1133 = %1129.3;
  %1134 = cast(%1133, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1135 = reshape(%1134, newshape=[60]) /* ty=Tensor[(60), bool] */;
  %1136 = @func_8966(%1135) /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), uint16], Tensor[(60), bool], Tensor[(30, 2), uint16]) */;
  %1137 = @func_9847() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1138 = @func_12729(%1132) /* ty=Tensor[(30, 2), bool] */;
  %1139 = %1136.0;
  %1140 = %1137.0;
  (%1130, %1133, %var_16743, %1138, %1139, %1140)
}

def @func_18298() -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %1146 = fn () -> (Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
    %1141 = @func_12700() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), int8]) */;
    %1142 = @func_10703() /* ty=(Tensor[(30, 2), bool],) */;
    %1143 = %1141.1;
    %1144 = %1142.0;
    %1145 = @func_10715() /* ty=Tensor[(15, 2, 2), float32] */;
    (%1143, %1144, %1145)
  };
  %1146() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_10997(%var_10996: int32) -> (Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %1164 = fn (%var_10931: int32) -> (Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
    %1147 = cast(%var_10931, dtype="int32") /* ty=int32 */;
    %1148 = reshape(%1147, newshape=[]) /* ty=int32 */;
    %1149 = @func_5623(%1148) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
    %1150 = %1149.3;
    %1151 = cast(%1150, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %1152 = @func_8576() /* ty=(Tensor[(30, 2), bool],) */;
    %1153 = @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */;
    %1154 = %1152.0;
    %1155 = cast(%1154, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %1156 = reshape(%1155, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
    %1157 = @func_2875(%1156) /* ty=(Tensor[(30, 2), uint16],) */;
    %1158 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
    %1159 = @func_10715() /* ty=Tensor[(15, 2, 2), float32] */;
    %1160 = log2(%1151) /* ty=Tensor[(30, 2), float64] */;
    %1161 = %1153.1;
    %1162 = @func_9517() /* ty=Tensor[(30, 2), bool] */;
    %1163 = %1157.0;
    (%1158, %var_10931, %1159, %1160, %1154, %1161, %1162, %1163)
  };
  %1164(%var_10996) /* ty=(Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_8223() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), float64]) {
  %1167 = fn () -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), float64]) {
    %1165 = @func_5590() /* ty=Tensor[(15, 2, 2), float64] */;
    %1166 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
    (%1165, %1166)
  };
  %1167() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), float64]) */
}

def @func_16909() -> (Tensor[(30, 2), bool], Tensor[(468), float32], Tensor[(468), float32]) {
  %1174 = fn () -> (Tensor[(30, 2), bool], Tensor[(468), float32], Tensor[(468), float32]) {
    %1168 = @func_12522() /* ty=(Tensor[(30, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
    %1169 = cast(meta[relay.Constant][30] /* ty=Tensor[(468), float32] */, dtype="float32") /* ty=Tensor[(468), float32] */;
    %1170 = reshape(%1169, newshape=[468]) /* ty=Tensor[(468), float32] */;
    %1171 = @func_7618(%1170) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(60), float32], Tensor[(468), float32]) */;
    %1172 = %1168.4;
    %1173 = %1171.3;
    (%1172, %1173, meta[relay.Constant][30] /* ty=Tensor[(468), float32] */)
  };
  %1174() /* ty=(Tensor[(30, 2), bool], Tensor[(468), float32], Tensor[(468), float32]) */
}

def @func_14683() -> Tensor[(5, 11, 2), float64] {
  %1176 = fn () -> Tensor[(5, 11, 2), float64] {
    %1175 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
    %1175.0
  };
  %1176() /* ty=Tensor[(5, 11, 2), float64] */
}

def @func_17312() -> (Tensor[(15, 2, 2), float32],) {
  %1177 = @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1178 = %1177.0;
  (%1178,)
}

def @func_6570() -> Tensor[(15, 2, 2), float32] {
  @func_6568() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_9352() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  @func_9350() /* ty=(Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */
}

def @func_4124() -> Tensor[(15, 2, 2), bool] {
  @func_4122() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_3987() -> (Tensor[(15, 2, 2), float32],) {
  %1179 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1180 = %1179.0;
  (%1180,)
}

def @func_10638() -> (Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) {
  %1181 = @func_7008() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
  %1182 = %1181.2;
  %1183 = @func_10396() /* ty=Tensor[(5, 11, 2), float64] */;
  (%1182, %1183)
}

def @func_4739(%var_4738: Tensor[(30, 2), float32]) -> (Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) {
  %1195 = fn (%var_4724: Tensor[(30, 2), float32]) -> (Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) {
    %1184 = @func_3793() /* ty=Tensor[(30, 2), float32] */;
    %1185 = cast(%var_4724, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %1186 = shape_of(%1184, dtype="int32") /* ty=Tensor[(2), int32] */;
    %1187 = cast(%1184, dtype="float64") /* ty=Tensor[(30, 2), float64] */;
    %1188 = dyn.reshape(%1185, %1186, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %1189 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
    %1190 = @func_2893() /* ty=(Tensor[(30, 2), float32],) */;
    %1191 = divide(%1187, %1188) /* ty=Tensor[(30, 2), float64] */;
    %1192 = %1189.0;
    %1193 = %1190.0;
    %1194 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
    (%1191, %1192, %1193, %1194)
  };
  %1195(%var_4738) /* ty=(Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */
}

def @func_12404() -> (Tensor[(30, 2), bool],) {
  @func_12402() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_16164(%var_16162: Tensor[(2704), float64]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(2704), float64]) {
  @func_16161(%var_16162) /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(2704), float64]) */
}

def @func_17677() -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) {
  %1196 = @func_6049() /* ty=(Tensor[(30, 2), bool],) */;
  %1197 = @func_15865() /* ty=(Tensor[(30, 2), float32], Tensor[(30, 2), uint16]) */;
  %1198 = %1196.0;
  %1199 = %1197.1;
  (%1198, %1199)
}

def @func_4855() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) {
  %1205 = fn () -> (Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) {
    %1200 = @func_3955() /* ty=(Tensor[(30, 2), uint16],) */;
    %1201 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
    %1202 = %1200.0;
    %1203 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
    %1204 = %1201.1;
    (%1202, %1203, %1204)
  };
  %1205() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), bool], Tensor[(30, 2), float32]) */
}

def @func_14628() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %1211 = fn () -> (Tensor[(30, 2), uint16], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
    %1206 = @func_7246() /* ty=(Tensor[(30, 2), uint16],) */;
    %1207 = @func_11625() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */;
    %1208 = @func_9065() /* ty=Tensor[(30, 2), uint16] */;
    %1209 = %1206.0;
    %1210 = %1207.2;
    (%1208, %1209, %1210)
  };
  %1211() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) */
}

def @func_15368() -> Tensor[(30, 2), bool] {
  %1213 = fn () -> Tensor[(30, 2), bool] {
    %1212 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %1212.1
  };
  %1213() /* ty=Tensor[(30, 2), bool] */
}

def @func_11354() -> Tensor[(15, 2, 2), bool] {
  @func_11352() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_9990() -> (Tensor[(1352), float64], Tensor[(30, 2), float64], Tensor[(13, 8, 13), float64], Tensor[(30, 2), float64]) {
  %1214 = @func_3062() /* ty=(Tensor[(30, 2), bool], Tensor[(1352), float64]) */;
  %1215 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
  %1216 = cast(%1215, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
  %1217 = reshape(%1216, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %1218 = @func_2726(%1217) /* ty=(Tensor[(13, 8, 13), float64], Tensor[(1352), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */;
  %1219 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
  %1220 = %1214.1;
  %1221 = %1218.0;
  %1222 = %1219.0;
  (%1220, %1215, %1221, %1222)
}

def @func_16578() -> Tensor[(15, 2, 2), float32] {
  @func_16576() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_10904() -> Tensor[(30, 2), float64] {
  %1223 = @func_5947() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %1223.2
}

def @func_11551() -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
  %1229 = fn () -> (Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) {
    %1224 = @func_11352() /* ty=Tensor[(15, 2, 2), bool] */;
    %1225 = cast(%1224, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
    %1226 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
    %1227 = erf(%1225) /* ty=Tensor[(15, 2, 2), float32] */;
    %1228 = %1226.1;
    (%1227, %1228)
  };
  %1229() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */
}

def @func_2878(%var_2876: Tensor[(30, 2), bool]) -> (Tensor[(30, 2), uint16],) {
  @func_2875(%var_2876) /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_3793() -> Tensor[(30, 2), float32] {
  %1230 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %1230.1
}

def @func_12144() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32]) {
  %1231 = @func_11073() /* ty=(Tensor[(30, 2), uint16],) */;
  %1232 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
  %1233 = %1231.0;
  %1234 = %1232.0;
  (%1233, %1234)
}

def @func_5947() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %1235 = @func_5788() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */;
  %1236 = @func_3486() /* ty=(Tensor[(30, 2), float64],) */;
  %1237 = @func_3559() /* ty=Tensor[(30, 2), bool] */;
  %1238 = %1235.0;
  %1239 = %1236.0;
  (%1237, %1238, %1239)
}

def @func_13822(%var_13810: Tensor[(2704), float64]) -> (Tensor[(30, 2), bool], Tensor[(16, 13, 13), float64], Tensor[(2704), float64], Tensor[(30, 2), uint16]) {
  %1240 = cast(%var_13810, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %1241 = cast(%var_13810, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %1242 = reshape(%1240, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %1243 = reshape(%1241, newshape=[16, 13, 13]) /* ty=Tensor[(16, 13, 13), float64] */;
  %1244 = @func_8771(%1242, %1243) /* ty=(Tensor[(16, 13, 13), float64], Tensor[(30, 2), uint16]) */;
  %1245 = @func_13529() /* ty=(Tensor[(30, 2), uint16],) */;
  %1246 = @func_12535() /* ty=Tensor[(30, 2), bool] */;
  %1247 = %1244.0;
  %1248 = %1245.0;
  (%1246, %1247, %var_13810, %1248)
}

def @func_7246() -> (Tensor[(30, 2), uint16],) {
  %1249 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  (%1249,)
}

def @func_12060(%var_12036: Tensor[(1152), uint64]) -> (Tensor[(30, 2), float32], Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(1152), uint64], Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], int32, Tensor[(15, 2, 2), float32]) {
  %1250 = @func_10590() /* ty=(Tensor[(30, 2), float32],) */;
  %1251 = @func_3111() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %1252 = cast(%var_12036, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
  %1253 = reshape(%1252, newshape=[48, 24]) /* ty=Tensor[(48, 24), uint64] */;
  %1254 = @func_10353(%1253) /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(30, 2), bool], Tensor[(48, 24), uint64], Tensor[(3, 24), uint64]) */;
  %1255 = @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1256 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1257 = reshape(%1256, newshape=[]) /* ty=int32 */;
  %1258 = @func_5623(%1257) /* ty=(Tensor[(5, 12, 3), int32], Tensor[(30, 2), float32], Tensor[(30, 2), float32], Tensor[(30, 2), bool]) */;
  %1259 = cast(-2 /* ty=int32 */, dtype="int32") /* ty=int32 */;
  %1260 = reshape(%1259, newshape=[]) /* ty=int32 */;
  %1261 = @func_10995(%1260) /* ty=(Tensor[(30, 2), int16], int32, Tensor[(15, 2, 2), float32], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(30, 2), uint16]) */;
  %1262 = %1250.0;
  %1263 = %1251.2;
  %1264 = %1254.0;
  %1265 = %1255.0;
  %1266 = %1258.1;
  %1267 = %1261.2;
  (%1262, %1263, %1264, %var_12036, %1265, %1266, -2 /* ty=int32 */, %1267)
}

def @func_10885() -> (Tensor[(30, 2), uint16],) {
  @func_10883() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_10716() -> Tensor[(15, 2, 2), float32] {
  %1268 = fn () -> Tensor[(15, 2, 2), float32] {
    @func_10072() /* ty=Tensor[(15, 2, 2), float32] */
  };
  %1268() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_10690(%var_10689: Tensor[(13, 5, 14), float32]) -> (Tensor[(13, 5, 14), bool],) {
  %1274 = fn (%var_10678: Tensor[(13, 5, 14), float32]) -> (Tensor[(13, 5, 14), bool],) {
    %1269 = cast(meta[relay.Constant][31] /* ty=Tensor[(13, 5, 14), float32] */, dtype="bool") /* ty=Tensor[(13, 5, 14), bool] */;
    %1270 = shape_of(%var_10678, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1271 = cast(%var_10678, dtype="bool") /* ty=Tensor[(13, 5, 14), bool] */;
    %1272 = dyn.reshape(%1269, %1270, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1273 = less_equal(%1271, %1272) /* ty=Tensor[(13, 5, 14), bool] */;
    (%1273,)
  };
  %1274(%var_10689) /* ty=(Tensor[(13, 5, 14), bool],) */
}

def @func_6940() -> (Tensor[(30, 2), float32],) {
  @func_6938() /* ty=(Tensor[(30, 2), float32],) */
}

def @func_5078() -> (Tensor[(5, 11, 2), float64],) {
  %1275 = @func_3633() /* ty=(Tensor[(5, 11, 2), float64],) */;
  %1276 = %1275.0;
  (%1276,)
}

def @func_13700(%var_13699: Tensor[(1152), uint64]) -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64]) {
  %1286 = fn (%var_13687: Tensor[(1152), uint64]) -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64]) {
    %1277 = @func_12842() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), int8], Tensor[(15, 2, 2), float32]) */;
    %1278 = cast(meta[relay.Constant][32] /* ty=Tensor[(72), uint64] */, dtype="uint64") /* ty=Tensor[(72), uint64] */;
    %1279 = cast(%var_13687, dtype="uint64") /* ty=Tensor[(1152), uint64] */;
    %1280 = reshape(%1278, newshape=[9, 8, 1]) /* ty=Tensor[(9, 8, 1), uint64] */;
    %1281 = reshape(%1279, newshape=[9, 8, 16]) /* ty=Tensor[(9, 8, 16), uint64] */;
    %1282 = @func_4196(%1280, %1281) /* ty=(Tensor[(9, 8, 16), uint64],) */;
    %1283 = %1277.2;
    %1284 = @func_4672() /* ty=Tensor[(15, 2, 2), float32] */;
    %1285 = %1282.0;
    (%1283, %1284, %1285, meta[relay.Constant][32] /* ty=Tensor[(72), uint64] */, %var_13687)
  };
  %1286(%var_13699) /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32], Tensor[(9, 8, 16), uint64], Tensor[(72), uint64], Tensor[(1152), uint64]) */
}

def @func_10704() -> (Tensor[(30, 2), bool],) {
  %1289 = fn () -> (Tensor[(30, 2), bool],) {
    %1287 = @func_7666() /* ty=(Tensor[(30, 2), bool],) */;
    %1288 = %1287.0;
    (%1288,)
  };
  %1289() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_14969() -> (Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) {
  @func_14967() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(30, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_6363() -> Tensor[(15, 2, 2), float32] {
  @func_4672() /* ty=Tensor[(15, 2, 2), float32] */
}

def @func_11047() -> Tensor[(15, 2, 2), bool] {
  @func_11045() /* ty=Tensor[(15, 2, 2), bool] */
}

def @func_15528() -> (Tensor[(30, 2), int16],) {
  %1292 = fn () -> (Tensor[(30, 2), int16],) {
    %1290 = @func_5023() /* ty=(Tensor[(30, 2), int16],) */;
    %1291 = %1290.0;
    (%1291,)
  };
  %1292() /* ty=(Tensor[(30, 2), int16],) */
}

def @func_3560() -> Tensor[(30, 2), bool] {
  %1294 = fn () -> Tensor[(30, 2), bool] {
    %1293 = @func_2604() /* ty=(Tensor[(30, 2), bool],) */;
    %1293.0
  };
  %1294() /* ty=Tensor[(30, 2), bool] */
}

def @func_3488() -> (Tensor[(30, 2), float64],) {
  @func_3486() /* ty=(Tensor[(30, 2), float64],) */
}

def @func_6272() -> (Tensor[(30, 2), uint16],) {
  %1295 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  (%1295,)
}

def @func_10198() -> (Tensor[(15, 2, 2), float64], Tensor[(16, 10, 14), float64], Tensor[(2240), float64], Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
  %1310 = fn () -> (Tensor[(15, 2, 2), float64], Tensor[(16, 10, 14), float64], Tensor[(2240), float64], Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) {
    %1296 = @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */;
    %1297 = cast(meta[relay.Constant][33] /* ty=Tensor[(2240), float64] */, dtype="float64") /* ty=Tensor[(2240), float64] */;
    %1298 = reshape(%1297, newshape=[16, 10, 14]) /* ty=Tensor[(16, 10, 14), float64] */;
    %1299 = @func_7508(%1298) /* ty=(Tensor[(30, 2), float32], Tensor[(16, 10, 14), float64]) */;
    %1300 = @func_9834() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
    %1301 = %1300.0;
    %1302 = cast(%1301, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %1303 = @func_3153() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool]) */;
    %1304 = @func_7467() /* ty=(Tensor[(30, 2), uint32], Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %1305 = %1296.0;
    %1306 = %1299.1;
    %1307 = sin(%1302) /* ty=Tensor[(15, 2, 2), float64] */;
    %1308 = %1303.1;
    %1309 = %1304.3;
    (%1305, %1306, meta[relay.Constant][33] /* ty=Tensor[(2240), float64] */, %1307, %1308, %1309)
  };
  %1310() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(16, 10, 14), float64], Tensor[(2240), float64], Tensor[(15, 2, 2), float64], Tensor[(30, 2), bool], Tensor[(15, 2, 2), float32]) */
}

def @func_3569() -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
  %1319 = fn () -> (Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) {
    %1311 = @func_3328() /* ty=(Tensor[(30, 2), bool],) */;
    %1312 = %1311.0;
    %1313 = cast(%1312, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %1314 = cast(%1312, dtype="bool") /* ty=Tensor[(30, 2), bool] */;
    %1315 = reshape(%1313, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %1316 = reshape(%1314, newshape=[15, 2, 2]) /* ty=Tensor[(15, 2, 2), bool] */;
    %1317 = @func_2060(%1315, %1316) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32]) */;
    %1318 = %1317.0;
    (%1312, %1318)
  };
  %1319() /* ty=(Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */
}

def @func_4893() -> Tensor[(30, 2), float32] {
  @func_3598() /* ty=Tensor[(30, 2), float32] */
}

def @func_16315() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %1320 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %1321 = @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1322 = %1320.0;
  %1323 = %1321.0;
  (%1322, %1323)
}

def @func_13313() -> (Tensor[(30, 2), uint16],) {
  %1324 = @func_8697() /* ty=(Tensor[(30, 2), uint16],) */;
  %1325 = %1324.0;
  (%1325,)
}

def @func_11074() -> (Tensor[(30, 2), uint16],) {
  %1328 = fn () -> (Tensor[(30, 2), uint16],) {
    %1326 = @func_6272() /* ty=(Tensor[(30, 2), uint16],) */;
    %1327 = %1326.0;
    (%1327,)
  };
  %1328() /* ty=(Tensor[(30, 2), uint16],) */
}

def @func_3246() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32], Tensor[(5, 3, 3), float32]) {
  %1329 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  %1330 = cast(%1329, dtype="bool") /* ty=Tensor[(15, 2, 2), bool] */;
  %1331 = reshape(%1330, newshape=[30, 2]) /* ty=Tensor[(30, 2), bool] */;
  %1332 = @func_2875(%1331) /* ty=(Tensor[(30, 2), uint16],) */;
  %1333 = cast(%1329, dtype="float32") /* ty=Tensor[(15, 2, 2), float32] */;
  %1334 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
  %1335 = %1332.0;
  %1336 = cos(%1333) /* ty=Tensor[(15, 2, 2), float32] */;
  %1337 = %1334.0;
  (%1335, %1336, %1337)
}

def @func_5023() -> (Tensor[(30, 2), int16],) {
  %1338 = @func_3845() /* ty=Tensor[(30, 2), int16] */;
  (%1338,)
}

def @func_5415(%var_5413: Tensor[(6, 13, 6), float32]) -> (Tensor[(6, 13, 6), float32], Tensor[(15, 2, 2), bool], Tensor[(60), float32]) {
  @func_5412(%var_5413) /* ty=(Tensor[(6, 13, 6), float32], Tensor[(15, 2, 2), bool], Tensor[(60), float32]) */
}

def @func_6848() -> (Tensor[(30, 2), bool], Tensor[(30, 2), bool]) {
  %1339 = @func_5497() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64]) */;
  %1340 = @func_2763() /* ty=(Tensor[(30, 2), bool],) */;
  %1341 = %1339.0;
  %1342 = %1340.0;
  (%1341, %1342)
}

def @func_2931() -> (Tensor[(30, 2), bool],) {
  %1345 = fn () -> (Tensor[(30, 2), bool],) {
    %1343 = @func_2462() /* ty=(Tensor[(5, 3, 3), float32], Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %1344 = %1343.2;
    (%1344,)
  };
  %1345() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_11699() -> Tensor[(30, 2), bool] {
  @func_11697() /* ty=Tensor[(30, 2), bool] */
}

def @func_2605() -> (Tensor[(30, 2), bool],) {
  %1348 = fn () -> (Tensor[(30, 2), bool],) {
    %1346 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
    %1347 = %1346.0;
    (%1347,)
  };
  %1348() /* ty=(Tensor[(30, 2), bool],) */
}

def @func_8085() -> (Tensor[(15, 2, 2), float32],) {
  %1350 = fn () -> (Tensor[(15, 2, 2), float32],) {
    %1349 = @func_7964() /* ty=Tensor[(15, 2, 2), float32] */;
    (%1349,)
  };
  %1350() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_15852(%var_15850: Tensor[(64), float32]) -> (Tensor[(15, 2, 2), float32], Tensor[(64), float32], Tensor[(1352), uint32], Tensor[(1352), float64]) {
  @func_15849(%var_15850) /* ty=(Tensor[(15, 2, 2), float32], Tensor[(64), float32], Tensor[(1352), uint32], Tensor[(1352), float64]) */
}

def @func_10592() -> (Tensor[(30, 2), float32],) {
  @func_10590() /* ty=(Tensor[(30, 2), float32],) */
}

def @func_8143() -> (Tensor[(15, 2, 2), float32],) {
  %1353 = fn () -> (Tensor[(15, 2, 2), float32],) {
    %1351 = @func_7375() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %1352 = %1351.0;
    (%1352,)
  };
  %1353() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_15211() -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) {
  %1362 = fn () -> (Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) {
    %1354 = @func_7982() /* ty=(Tensor[(30, 2), int16], Tensor[(30, 2), uint16]) */;
    %1355 = @func_3432() /* ty=(Tensor[(6, 12, 5), float64], Tensor[(30, 2), float32], Tensor[(30, 2), bool], Tensor[(15, 2, 2), bool]) */;
    %1356 = @func_8142() /* ty=(Tensor[(15, 2, 2), float32],) */;
    %1357 = %1356.0;
    %1358 = cast(%1357, dtype="float64") /* ty=Tensor[(15, 2, 2), float64] */;
    %1359 = %1354.1;
    %1360 = %1355.1;
    %1361 = cosh(%1358) /* ty=Tensor[(15, 2, 2), float64] */;
    (%1359, %1360, %1361)
  };
  %1362() /* ty=(Tensor[(30, 2), uint16], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float64]) */
}

def @func_9350() -> (Tensor[(30, 2), uint16], Tensor[(15, 2, 2), float32]) {
  %1363 = @func_3290() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), float32], Tensor[(15, 2, 2), float32]) */;
  %1364 = @func_5902() /* ty=Tensor[(30, 2), uint16] */;
  %1365 = %1363.2;
  (%1364, %1365)
}

def @func_16161(%var_16159: Tensor[(2704), float64]) -> (Tensor[(30, 2), bool], Tensor[(30, 2), uint16], Tensor[(2704), float64]) {
  %1366 = @func_2573() /* ty=(Tensor[(30, 2), bool],) */;
  %1367 = cast(%var_16159, dtype="float64") /* ty=Tensor[(2704), float64] */;
  %1368 = reshape(%1367, newshape=[2704]) /* ty=Tensor[(2704), float64] */;
  %1369 = @func_13071(%1368) /* ty=(Tensor[(15, 2, 2), bool], Tensor[(15, 2, 2), float32], Tensor[(30, 2), uint16], Tensor[(2704), float64], Tensor[(30, 2), uint16]) */;
  %1370 = %1366.0;
  %1371 = %1369.4;
  (%1370, %1371, %var_16159)
}

def @func_11662() -> Tensor[(5, 11, 2), float64] {
  @func_11660() /* ty=Tensor[(5, 11, 2), float64] */
}

def @func_3989() -> (Tensor[(15, 2, 2), float32],) {
  @func_3987() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_10236() -> (Tensor[(15, 2, 2), float32],) {
  @func_10234() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_10791() -> (Tensor[(15, 2, 2), float32],) {
  %1372 = @func_2843() /* ty=Tensor[(15, 2, 2), float32] */;
  (%1372,)
}

def @func_10793() -> (Tensor[(15, 2, 2), float32],) {
  @func_10791() /* ty=(Tensor[(15, 2, 2), float32],) */
}

def @func_5789() -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
  %1376 = fn () -> (Tensor[(30, 2), bool], Tensor[(30, 2), float64]) {
    %1373 = @func_5398() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool]) */;
    %1374 = %1373.1;
    %1375 = @func_5120() /* ty=Tensor[(30, 2), float64] */;
    (%1374, %1375)
  };
  %1376() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), float64]) */
}

def @func_7048() -> (Tensor[(15, 2, 2), bool], Tensor[(30, 2), bool]) {
  %1377 = @func_5458() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(30, 2), bool], Tensor[(1352, 1), float64], Tensor[(15, 2, 2), bool]) */;
  %1378 = %1377.3;
  %1379 = @func_5350() /* ty=Tensor[(30, 2), bool] */;
  (%1378, %1379)
}

def @func_16420() -> (Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool]) {
  @func_16418() /* ty=(Tensor[(30, 2), float32], Tensor[(15, 2, 2), bool]) */
}

def @func_16193() -> (Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) {
  @func_16191() /* ty=(Tensor[(15, 2, 2), float32], Tensor[(15, 2, 2), float32]) */
}

def @func_10046() -> (Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) {
  @func_10044() /* ty=(Tensor[(15, 2, 2), float64], Tensor[(15, 2, 2), bool], Tensor[(30, 2), uint16]) */
}

def @func_12000() -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(30, 2), float32]) {
  %1386 = fn () -> (Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(30, 2), float32]) {
    %1380 = @func_2522() /* ty=(Tensor[(30, 2), bool],) */;
    %1381 = @func_10638() /* ty=(Tensor[(15, 2, 2), bool], Tensor[(5, 11, 2), float64]) */;
    %1382 = @func_6938() /* ty=(Tensor[(30, 2), float32],) */;
    %1383 = %1380.0;
    %1384 = %1381.1;
    %1385 = %1382.0;
    (%1383, %1384, %1385)
  };
  %1386() /* ty=(Tensor[(30, 2), bool], Tensor[(5, 11, 2), float64], Tensor[(30, 2), float32]) */
}

def @func_15941() -> (Tensor[(30, 2), float64],) {
  @func_15939() /* ty=(Tensor[(30, 2), float64],) */
}

def @func_17623() -> Tensor[(30, 2), bool] {
  %1388 = fn () -> Tensor[(30, 2), bool] {
    %1387 = @func_9592() /* ty=(Tensor[(30, 2), bool], Tensor[(30, 2), bool]) */;
    %1387.1
  };
  %1388() /* ty=Tensor[(30, 2), bool] */
}

def @func_10072() -> Tensor[(15, 2, 2), float32] {
  %1389 = @func_2665() /* ty=(Tensor[(15, 2, 2), float32],) */;
  %1389.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen748/build/output.py:5243: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(

===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen748/build/output.py", line 5248, in <module>
    graph, lib, params = relay.build(mod, target='cuda')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: TVMFuncCall
  6: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  5: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  4: tvm::build(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  3: tvm::codegen::Build(tvm::IRModule, tvm::Target)
  2: tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::IRModule, tvm::Target)>::AssignTypedLambda<tvm::runtime::Module (*)(tvm::IRModule, tvm::Target)>(tvm::runtime::Module (*)(tvm::IRModule, tvm::Target), std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  1: tvm::codegen::BuildCUDA(tvm::IRModule, tvm::Target)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/autotvm/measure/measure_methods.py", line 789, in tvm_callback_cuda_compile
    ptx = nvcc.compile_cuda(code, target=target, arch=AutotvmGlobalScope.current.cuda_target_arch)
  File "/home/yujunzhe/tvm/python/tvm/contrib/nvcc.py", line 108, in compile_cuda
    raise RuntimeError(msg)
RuntimeError: 
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(840) tvmgen_default_fused_log10_kernel0(double* __restrict__ T_log10, double* __restrict__ placeholder) {
  T_log10[(((int)threadIdx.x))] = log10(placeholder[(((int)threadIdx.x))]);
}


Compilation error:
In file included from /usr/local/cuda/bin/../targets/x86_64-linux/include/cuda_runtime.h:82,
                 from <command-line>:
/usr/local/cuda/bin/../targets/x86_64-linux/include/crt/host_config.h:143:2: error: #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
  143 | #error -- unsupported GNU version! gcc versions later than 12 are not supported! The nvcc flag '-allow-unsupported-compiler' can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.
      |  ^~~~~

