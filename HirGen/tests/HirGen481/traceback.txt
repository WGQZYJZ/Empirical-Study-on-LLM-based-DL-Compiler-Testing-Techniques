==========mod==========
#[version = "0.0.5"]
def @func_694(%var_676: Tensor[(7, 9, 9), int8], %var_689: Tensor[(88, 16), uint64]) -> (Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) {
  %0 = cast(%var_676, dtype="int8") /* ty=Tensor[(7, 9, 9), int8] */;
  %1 = shape_of(meta[relay.Constant][0] /* ty=Tensor[(7, 9, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(7, 9, 9), int8] */, dtype="int8") /* ty=Tensor[(7, 9, 9), int8] */;
  %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %4 = bitwise_and(%2, %3) /* ty=Tensor[(7, 9, 9), int8] */;
  %5 = cast(%4, dtype="float64") /* ty=Tensor[(7, 9, 9), float64] */;
  %6 = cast(%var_689, dtype="uint64") /* ty=Tensor[(88, 16), uint64] */;
  %7 = reshape(%6, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %8 = @func_569(%7) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %9 = erf(%5) /* ty=Tensor[(7, 9, 9), float64] */;
  %10 = %8.1;
  (%9, %10, %var_689)
}

def @func_6633(%var_6631: Tensor[(55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32]) {
  %11 = @func_6444() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %12 = cast(%var_6631, dtype="int32") /* ty=Tensor[(55), int32] */;
  %13 = reshape(%12, newshape=[55]) /* ty=Tensor[(55), int32] */;
  %14 = @func_4109(%13) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */;
  %15 = %11.0;
  %16 = %14.0;
  (%15, %16, %var_6631)
}

def @func_7867() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %17 = @func_4844() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %18 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  %19 = %17.1;
  (%18, %19)
}

def @func_8747(%var_8726: Tensor[(616), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(11, 4, 14), bool]) {
  %20 = cast(%var_8726, dtype="float64") /* ty=Tensor[(616), float64] */;
  %21 = reshape(%20, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), float64] */;
  %22 = @func_4859(%21) /* ty=(Tensor[(11, 4, 14), float64],) */;
  %23 = %22.0;
  %24 = cast(%var_8726, dtype="bool") /* ty=Tensor[(616), bool] */;
  %25 = shape_of(%23, dtype="int32") /* ty=Tensor[(3), int32] */;
  %26 = cast(%23, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
  %27 = dyn.reshape(%24, %25, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %28 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
  %29 = logical_or(%26, %27) /* ty=Tensor[(11, 4, 14), bool] */;
  (%28, %29)
}

def @func_9503() -> (Tensor[(2, 7, 7), float64],) {
  %30 = @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %31 = %30.0;
  (%31,)
}

def @func_5372(%var_5299: Tensor[(16, 12, 1), float32], %var_5304: Tensor[(567), int8]) -> (Tensor[(16, 12, 1), float32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408, ?), int16], Tensor[(16, 12, 1408), uint32], Tensor[(8, 11, 16), int32]) {
  %32 = cast(%var_5299, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %34 = atan(%33) /* ty=Tensor[(1408), float64] */;
  %35 = cast(%var_5304, dtype="int8") /* ty=Tensor[(567), int8] */;
  %36 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %37 = reshape(%35, newshape=[189, 3]) /* ty=Tensor[(189, 3), int8] */;
  %38 = reshape(%36, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %39 = @func_4801(%37, %38) /* ty=(Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) */;
  %40 = %39.1;
  %41 = cast(%40, dtype="bool") /* ty=Tensor[(1408, 1), bool] */;
  %42 = shape_of(meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %43 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), bool] */;
  %45 = less_equal(%43, %44) /* ty=Tensor[(1408), bool] */;
  %46 = cast(%45, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %47 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
  %48 = cast(%34, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %49 = dyn.reshape(%46, %47, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %51 = shape_of(%40, dtype="int32") /* ty=Tensor[(2), int32] */;
  %52 = cast(%40, dtype="int16") /* ty=Tensor[(1408, 1), int16] */;
  %53 = dyn.reshape(%50, %51, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %54 = cast(%34, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %55 = cast(%var_5299, dtype="uint32") /* ty=Tensor[(16, 12, 1), uint32] */;
  %56 = @func_3962() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) */;
  %57 = sin(%32) /* ty=Tensor[(16, 12, 1), float32] */;
  %58 = bitwise_xor(%48, %49) /* ty=Tensor[(1408), uint64] */;
  %59 = left_shift(%52, %53) /* ty=Tensor[(1408, ?), int16] */;
  %60 = subtract(%54, %55) /* ty=Tensor[(16, 12, 1408), uint32] */;
  %61 = %56.1;
  (%57, %var_5304, %58, %59, %60, %61)
}

def @func_4636(%var_4629: Tensor[(120), float32], %var_4630: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32]) {
  %62 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %63 = cast(%var_4629, dtype="float32") /* ty=Tensor[(120), float32] */;
  %64 = cast(%var_4629, dtype="float32") /* ty=Tensor[(120), float32] */;
  %65 = cast(%var_4630, dtype="int32") /* ty=Tensor[(715), int32] */;
  %66 = reshape(%63, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %67 = reshape(%64, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %68 = reshape(%65, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %69 = @func_1402(%66, %67, %68) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %70 = %62.0;
  %71 = %69.4;
  (%70, %71, %var_4629, %var_4630)
}

def @func_6527() -> Tensor[(2, 16, 3), float64] {
  %72 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %72.0
}

def @func_7163(%var_7153: Tensor[(2, 16, 3), float64], %var_7161: Tensor[(65, 11), int32]) -> (Tensor[(2, 16, 3), bool], Tensor[(55), int32], Tensor[(120), float32], Tensor[(65, 11), int32]) {
  %73 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %74 = %73.1;
  %75 = cast(%var_7153, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %76 = shape_of(%74, dtype="int32") /* ty=Tensor[(3), int32] */;
  %77 = cast(%74, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %78 = dyn.reshape(%75, %76, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %79 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %80 = cast(meta[relay.Constant][2] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %81 = cast(%var_7161, dtype="int32") /* ty=Tensor[(65, 11), int32] */;
  %82 = reshape(%79, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %83 = reshape(%80, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %84 = reshape(%81, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %85 = @func_1402(%82, %83, %84) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %86 = greater_equal(%77, %78) /* ty=Tensor[(2, 16, 3), bool] */;
  %87 = %85.2;
  (%86, %87, meta[relay.Constant][2] /* ty=Tensor[(120), float32] */, %var_7161)
}

def @func_7262(%var_7251: Tensor[(18, 36), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(18, 36), float64]) {
  %88 = @func_5412() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %89 = cast(%var_7251, dtype="float64") /* ty=Tensor[(18, 36), float64] */;
  %90 = reshape(%89, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %91 = @func_6257(%90) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */;
  %92 = %88.0;
  %93 = %91.1;
  (%92, %93, %var_7251)
}

def @func_4859(%var_4846: Tensor[(11, 4, 14), float64]) -> (Tensor[(11, 4, 14), float64],) {
  %94 = cast(%var_4846, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %95 = rsqrt(%94) /* ty=Tensor[(11, 4, 14), float64] */;
  (%95,)
}

def @func_2453(%var_2439: Tensor[(98), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  %96 = cast(%var_2439, dtype="float64") /* ty=Tensor[(98), float64] */;
  %97 = cast(%var_2439, dtype="float64") /* ty=Tensor[(98), float64] */;
  %98 = reshape(%96, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %99 = reshape(%97, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %100 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  %101 = @func_667(%98, %99) /* ty=Tensor[(2, 7, 7), float64] */;
  (%100, %101, %var_2439)
}

def @func_3104() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) {
  %102 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %103 = cast(meta[relay.Constant][3] /* ty=Tensor[(1050, 2), float32] */, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %104 = cast(meta[relay.Constant][4] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %105 = reshape(%103, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %106 = reshape(%104, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %107 = @func_2596(%105, %106) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) */;
  %108 = %102.0;
  %109 = %107.4;
  (%108, %109, meta[relay.Constant][3] /* ty=Tensor[(1050, 2), float32] */, meta[relay.Constant][4] /* ty=Tensor[(1408), uint64] */)
}

def @func_4040() -> (Tensor[(2, 16, 3), float64],) {
  %110 = @func_3304() /* ty=Tensor[(2, 16, 3), float64] */;
  (%110,)
}

def @func_5269() -> (Tensor[(2, 16, 3), float64],) {
  %111 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %112 = %111.0;
  (%112,)
}

def @func_6485() -> (Tensor[(2, 16, 3), float64], Tensor[(1408, 1), uint64], Tensor[(9, 63), int8], Tensor[(2, 704), uint64]) {
  %113 = cast(meta[relay.Constant][5] /* ty=Tensor[(9, 63), int8] */, dtype="int8") /* ty=Tensor[(9, 63), int8] */;
  %114 = cast(meta[relay.Constant][6] /* ty=Tensor[(2, 704), uint64] */, dtype="uint64") /* ty=Tensor[(2, 704), uint64] */;
  %115 = reshape(%113, newshape=[189, 3]) /* ty=Tensor[(189, 3), int8] */;
  %116 = reshape(%114, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %117 = @func_4801(%115, %116) /* ty=(Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) */;
  %118 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
  %119 = %117.1;
  (%118, %119, meta[relay.Constant][5] /* ty=Tensor[(9, 63), int8] */, meta[relay.Constant][6] /* ty=Tensor[(2, 704), uint64] */)
}

def @func_9444() -> (Tensor[(2, 16, 3), float64],) {
  %120 = @func_5226() /* ty=Tensor[(2, 16, 3), float64] */;
  (%120,)
}

def @func_4844() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %121 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %122 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %123 = %121.0;
  %124 = %122.0;
  (%123, %124)
}

def @func_4998() -> Tensor[(2, 16, 3), float64] {
  @func_4574() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_2596(%var_2581: Tensor[(2100), float32], %var_2582: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) {
  %125 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %126 = %125.0;
  %127 = cast(%126, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %128 = cast(%var_2581, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %129 = cast(%var_2582, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %130 = reshape(%127, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %131 = reshape(%128, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %132 = reshape(%129, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %133 = @func_2375(%130, %131, %132) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) */;
  %134 = cast(meta[relay.Constant][7] /* ty=Tensor[(2, 16, 3), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %135 = shape_of(%126, dtype="int32") /* ty=Tensor[(3), int32] */;
  %136 = cast(%126, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %137 = dyn.reshape(%134, %135, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %138 = %133.0;
  %139 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  %140 = less_equal(%136, %137) /* ty=Tensor[(2, 16, 3), bool] */;
  (%138, %var_2581, %var_2582, %139, %140)
}

def @func_10996() -> (Tensor[(2, 16, 3), float64], Tensor[(150, 14), float32]) {
  %141 = @func_10957() /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(715), float32], Tensor[(120), float32], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(150, 14), float32], Tensor[(1408), uint64]) */;
  %142 = %141.7;
  %143 = cast(%142, dtype="float32") /* ty=Tensor[(150, 14), float32] */;
  %144 = @func_8708() /* ty=Tensor[(2, 16, 3), float64] */;
  %145 = cos(%143) /* ty=Tensor[(150, 14), float32] */;
  (%144, %145)
}

def @func_3456() -> (Tensor[(2, 16, 3), float64],) {
  %146 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %147 = %146.0;
  (%147,)
}

def @func_7058() -> Tensor[(2, 16, 3), float64] {
  %148 = @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %148.0
}

def @func_4324() -> (Tensor[(480), bool],) {
  %149 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %150 = %149.2;
  (%150,)
}

def @func_6085() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %151 = @func_5680() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %152 = @func_5269() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %153 = %151.0;
  %154 = %152.0;
  (%153, %154)
}

def @func_8611(%var_8569: Tensor[(98, 1), float64], %var_8604: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(98, 1), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], int64, Tensor[(75), float64]) {
  %155 = @func_7119() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %156 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %157 = cast(%var_8569, dtype="float64") /* ty=Tensor[(98, 1), float64] */;
  %158 = cast(meta[relay.Constant][8] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %159 = reshape(%157, newshape=[14, 7]) /* ty=Tensor[(14, 7), float64] */;
  %160 = reshape(%158, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %161 = @func_4268(%159, %160) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(14, 7), float64], Tensor[(2, 16, 3), float64], Tensor[(2100, 1408), uint64], Tensor[(1408), uint64], Tensor[(1408), float64], Tensor[(14, 3, 13), float64]) */;
  %162 = @func_7855() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) */;
  %163 = %162.1;
  %164 = cast(%163, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %165 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %166 = cast(%var_8604, dtype="float64") /* ty=Tensor[(75), float64] */;
  %167 = %161.4;
  %168 = cast(%167, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %169 = reshape(%165, newshape=[]) /* ty=int64 */;
  %170 = reshape(%166, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %171 = reshape(%168, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %172 = @func_6218(%169, %170, %171) /* ty=(Tensor[(12, 8, 6), bool], Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2100), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(715), int32]) */;
  %173 = %155.0;
  %174 = %156.0;
  %175 = atanh(%164) /* ty=Tensor[(2, 16, 3), float32] */;
  %176 = %172.1;
  (%173, %174, %167, %var_8569, meta[relay.Constant][8] /* ty=Tensor[(1408), uint64] */, %175, %176, -8 /* ty=int64 */, %var_8604)
}

def @func_6875() -> (Tensor[(2, 16, 3), float64],) {
  %177 = @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %178 = %177.0;
  (%178,)
}

def @func_5057() -> (Tensor[(8, 11, 16), int32],) {
  %179 = @func_3962() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) */;
  %180 = %179.1;
  (%180,)
}

def @func_2652() -> (Tensor[(2, 16, 3), float64],) {
  %181 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %182 = %181.0;
  (%182,)
}

def @func_4574() -> Tensor[(2, 16, 3), float64] {
  %183 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %183.0
}

def @func_6257(%var_6237: Tensor[(648), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) {
  %184 = cast(meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
  %185 = cast(%var_6237, dtype="float64") /* ty=Tensor[(648), float64] */;
  %186 = reshape(%184, newshape=[9, 1, 8]) /* ty=Tensor[(9, 1, 8), float64] */;
  %187 = reshape(%185, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %188 = @func_5880(%186, %187) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) */;
  %189 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %190 = @func_6107() /* ty=Tensor[(2, 16, 3), float64] */;
  %191 = %188.1;
  %192 = %189.2;
  (%190, %191, meta[relay.Constant][9] /* ty=Tensor[(72), float64] */, %var_6237, %192)
}

def @func_3061(%var_3057: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(7, 9, 9), float64], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408), uint64]) {
  %193 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %194 = cast(meta[relay.Constant][10] /* ty=Tensor[(567), int8] */, dtype="int8") /* ty=Tensor[(567), int8] */;
  %195 = cast(%var_3057, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %196 = reshape(%194, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %197 = reshape(%195, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %198 = @func_694(%196, %197) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %199 = %193.0;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %201 = cast(%var_3057, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %202 = reshape(%200, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %203 = reshape(%201, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %204 = @func_2746(%202, %203) /* ty=(Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) */;
  %205 = %198.0;
  %206 = %204.3;
  (%199, %205, meta[relay.Constant][10] /* ty=Tensor[(567), int8] */, %var_3057, %206)
}

def @func_4268(%var_4203: Tensor[(14, 7), float64], %var_4257: Tensor[(1408), uint64]) -> (Tensor[(2, 7, 7), float64], Tensor[(14, 7), float64], Tensor[(2, 16, 3), float64], Tensor[(2100, 1408), uint64], Tensor[(1408), uint64], Tensor[(1408), float64], Tensor[(14, 3, 13), float64]) {
  %207 = cast(%var_4203, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
  %208 = cast(%var_4203, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
  %209 = reshape(%207, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %210 = reshape(%208, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %211 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %212 = %211.0;
  %213 = cast(%212, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %214 = cast(meta[relay.Constant][11] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %215 = reshape(%213, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %216 = reshape(%214, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %217 = @func_2746(%215, %216) /* ty=(Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) */;
  %218 = %217.2;
  %219 = cast(%218, dtype="uint64") /* ty=Tensor[(2100, 1), uint64] */;
  %220 = cast(meta[relay.Constant][11] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %221 = cast(%218, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
  %222 = cast(meta[relay.Constant][11] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %223 = reshape(%221, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %224 = reshape(%222, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %225 = @func_1490(%223, %224) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %226 = cast(%var_4257, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %227 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(1408), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %228 = cast(meta[relay.Constant][11] /* ty=Tensor[(1408), uint64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?), float64] */;
  %230 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 3, 13), float32] */;
  %231 = asinh(%230) /* ty=Tensor[(14, 3, 13), float32] */;
  %232 = cast(meta[relay.Constant][12] /* ty=Tensor[(14, 3, 13), float32] */, dtype="uint32") /* ty=Tensor[(14, 3, 13), uint32] */;
  %233 = shape_of(%231, dtype="int32") /* ty=Tensor[(3), int32] */;
  %234 = cast(%231, dtype="uint32") /* ty=Tensor[(14, 3, 13), uint32] */;
  %235 = dyn.reshape(%232, %233, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %236 = minimum(%234, %235) /* ty=Tensor[(14, 3, 13), uint32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(14, 3, 13), float64] */;
  %238 = asin(%237) /* ty=Tensor[(14, 3, 13), float64] */;
  %239 = cast(%238, dtype="float64") /* ty=Tensor[(14, 3, 13), float64] */;
  %240 = @func_667(%209, %210) /* ty=Tensor[(2, 7, 7), float64] */;
  %241 = left_shift(%219, %220) /* ty=Tensor[(2100, 1408), uint64] */;
  %242 = %225.2;
  %243 = floor_mod(%228, %229) /* ty=Tensor[(1408), float64] */;
  %244 = cos(%239) /* ty=Tensor[(14, 3, 13), float64] */;
  (%240, %var_4203, %212, %241, %242, %243, %244)
}

def @func_667(%var_662: Tensor[(2, 7, 7), float64], %var_663: Tensor[(2, 7, 7), float64]) -> Tensor[(2, 7, 7), float64] {
  %245 = cast(%var_663, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %246 = shape_of(%var_662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_662, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%247, %248) /* ty=Tensor[(2, 7, 7), float64] */
}

def @func_5465() -> (Tensor[(2, 16, 3), float64],) {
  %249 = @func_4021() /* ty=Tensor[(2, 16, 3), float64] */;
  (%249,)
}

def @func_5737() -> (Tensor[(2, 16, 3), float64],) {
  %250 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  (%250,)
}

def @func_6944() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float32]) {
  %251 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
  %252 = cast(%251, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %253 = @func_3507() /* ty=Tensor[(2, 16, 3), float64] */;
  %254 = cosh(%252) /* ty=Tensor[(2, 16, 3), float32] */;
  (%253, %254)
}

def @func_7587() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %255 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  %256 = @func_6107() /* ty=Tensor[(2, 16, 3), float64] */;
  (%255, %256)
}

def @func_6444() -> (Tensor[(2, 16, 3), float64],) {
  %257 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  (%257,)
}

def @func_6854() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) {
  %258 = @func_6485() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408, 1), uint64], Tensor[(9, 63), int8], Tensor[(2, 704), uint64]) */;
  %259 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  %260 = %258.3;
  (%259, %260)
}

def @func_2212(%var_2187: Tensor[(75), float64], %var_2188: Tensor[(1408, 1), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) {
  %261 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %262 = cast(%var_2187, dtype="float64") /* ty=Tensor[(75), float64] */;
  %263 = cast(%var_2188, dtype="uint64") /* ty=Tensor[(1408, 1), uint64] */;
  %264 = cast(meta[relay.Constant][13] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %265 = reshape(%262, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
  %266 = reshape(%263, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %267 = reshape(%264, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %268 = @func_1857(%265, %266, %267) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %269 = cast(meta[relay.Constant][14] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
  %270 = cast(meta[relay.Constant][13] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %271 = reshape(%269, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
  %272 = reshape(%270, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
  %273 = @func_810(%271, %272) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
  %274 = cast(%var_2187, dtype="float64") /* ty=Tensor[(75), float64] */;
  %275 = %268.0;
  %276 = cast(%275, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
  %277 = cast(meta[relay.Constant][13] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %278 = reshape(%274, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
  %279 = reshape(%276, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %280 = reshape(%277, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %281 = @func_1857(%278, %279, %280) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %282 = %261.0;
  %283 = %273.3;
  %284 = %281.5;
  (%282, %275, %var_2187, %var_2188, meta[relay.Constant][13] /* ty=Tensor[(715), int32] */, %283, meta[relay.Constant][14] /* ty=Tensor[(55), int32] */, %284)
}

def @func_8513() -> (Tensor[(2, 7, 7), float64],) {
  %285 = @func_8317() /* ty=(Tensor[(480), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %286 = %285.1;
  (%286,)
}

def @func_8708() -> Tensor[(2, 16, 3), float64] {
  %287 = @func_7855() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) */;
  %287.0
}

def @func_3962() -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) {
  %288 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %289 = cast(meta[relay.Constant][15] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %290 = cast(meta[relay.Constant][16] /* ty=Tensor[(88, 16), uint64] */, dtype="uint64") /* ty=Tensor[(88, 16), uint64] */;
  %291 = reshape(%289, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %292 = reshape(%290, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %293 = @func_2212(%291, %292) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %294 = %288.0;
  %295 = %293.5;
  (%294, %295, meta[relay.Constant][15] /* ty=Tensor[(75), float64] */, meta[relay.Constant][16] /* ty=Tensor[(88, 16), uint64] */)
}

def @func_6218(%var_6173: int64, %var_6206: Tensor[(75), float64], %var_6207: Tensor[(1408), uint64]) -> (Tensor[(12, 8, 6), bool], Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2100), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(715), int32]) {
  %296 = cast(%var_6173, dtype="bool") /* ty=bool */;
  %297 = cast(meta[relay.Constant][17] /* ty=Tensor[(12, 8, 6), int64] */, dtype="bool") /* ty=Tensor[(12, 8, 6), bool] */;
  %298 = @func_3773() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %299 = @func_4324() /* ty=(Tensor[(480), bool],) */;
  %300 = cast(%var_6206, dtype="float64") /* ty=Tensor[(75), float64] */;
  %301 = cast(%var_6207, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %302 = cast(meta[relay.Constant][18] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %303 = reshape(%300, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
  %304 = reshape(%301, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %305 = reshape(%302, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %306 = @func_1857(%303, %304, %305) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %307 = greater(%296, %297) /* ty=Tensor[(12, 8, 6), bool] */;
  %308 = %298.0;
  %309 = %299.0;
  %310 = %306.1;
  (%307, %308, %309, %310, %var_6206, %var_6207, meta[relay.Constant][18] /* ty=Tensor[(715), int32] */)
}

def @func_1402(%var_1353: Tensor[(6, 4, 5), float32], %var_1354: Tensor[(6, 4, 5), float32], %var_1360: Tensor[(715), int32]) -> (Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) {
  %311 = cast(%var_1354, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
  %312 = shape_of(%var_1353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %313 = cast(%var_1353, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
  %314 = dyn.reshape(%311, %312, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %315 = cast(meta[relay.Constant][19] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
  %316 = cast(%var_1360, dtype="int32") /* ty=Tensor[(715), int32] */;
  %317 = reshape(%315, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
  %318 = reshape(%316, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
  %319 = @func_810(%317, %318) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
  %320 = cast(%var_1353, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
  %321 = floor_divide(%313, %314) /* ty=Tensor[(6, 4, 5), float32] */;
  %322 = %319.0;
  %323 = sigmoid(%320) /* ty=Tensor[(6, 4, 5), float64] */;
  (%321, %322, meta[relay.Constant][19] /* ty=Tensor[(55), int32] */, %var_1360, %323)
}

def @func_6808() -> (Tensor[(2, 16, 3), float64],) {
  %324 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %325 = %324.0;
  (%325,)
}

def @func_10252() -> (Tensor[(480), bool], Tensor[(2, 16, 3), float64]) {
  %326 = @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */;
  %327 = %326.1;
  %328 = @func_6527() /* ty=Tensor[(2, 16, 3), float64] */;
  (%327, %328)
}

def @func_7009() -> Tensor[(2, 16, 3), float64] {
  %329 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %329.0
}

def @func_7119() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %330 = @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %331 = %330.0;
  %332 = @func_6527() /* ty=Tensor[(2, 16, 3), float64] */;
  (%331, %332)
}

def @func_11665(%var_11646: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(2, 7, 7), float64]) {
  %333 = cast(meta[relay.Constant][20] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %334 = reshape(%333, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %335 = @func_6257(%334) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */;
  %336 = cast(meta[relay.Constant][20] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %337 = cast(%var_11646, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %338 = reshape(%337, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %339 = @func_3391(%338) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %340 = @func_9503() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %341 = @func_4782() /* ty=Tensor[(2, 16, 3), float64] */;
  %342 = @func_4782() /* ty=Tensor[(2, 16, 3), float64] */;
  %343 = %335.1;
  %344 = asin(%336) /* ty=Tensor[(648), float64] */;
  %345 = %339.4;
  %346 = %340.0;
  (%341, %342, %343, %344, %345, %var_11646, %346)
}

def @func_10451() -> (Tensor[(8, 11, 16), int32], Tensor[(2, 16, 3), float64]) {
  %347 = @func_10225() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32]) */;
  %348 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %349 = %347.1;
  %350 = %348.1;
  (%349, %350)
}

def @func_569(%var_547: Tensor[(8, 11, 16), uint64]) -> (Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) {
  %351 = cast(%var_547, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %352 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(8, 11, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %353 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 11, 16), uint64] */, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
  %354 = dyn.reshape(%351, %352, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %355 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 11, 16), uint64] */, dtype="int32") /* ty=Tensor[(8, 11, 16), int32] */;
  %356 = shape_of(%var_547, dtype="int32") /* ty=Tensor[(3), int32] */;
  %357 = cast(%var_547, dtype="int32") /* ty=Tensor[(8, 11, 16), int32] */;
  %358 = dyn.reshape(%355, %356, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %359 = less_equal(%353, %354) /* ty=Tensor[(8, 11, 16), bool] */;
  %360 = left_shift(%357, %358) /* ty=Tensor[(8, 11, 16), int32] */;
  (%359, %360)
}

def @func_11442() -> Tensor[(55), float32] {
  %361 = @func_8220() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(55), int32], Tensor[(13, ?, 16), int64]) */;
  %362 = %361.2;
  %363 = cast(%362, dtype="float64") /* ty=Tensor[(55), float64] */;
  %364 = atan(%363) /* ty=Tensor[(55), float64] */;
  %365 = cast(%364, dtype="float64") /* ty=Tensor[(55), float64] */;
  %366 = shape_of(%362, dtype="int32") /* ty=Tensor[(1), int32] */;
  %367 = cast(%362, dtype="float64") /* ty=Tensor[(55), float64] */;
  %368 = dyn.reshape(%365, %366, newshape=[]) /* ty=Tensor[(?), float64] */;
  %369 = floor_divide(%367, %368) /* ty=Tensor[(55), float64] */;
  %370 = cast(%369, dtype="float32") /* ty=Tensor[(55), float32] */;
  log2(%370) /* ty=Tensor[(55), float32] */
}

def @func_1490(%var_1477: Tensor[(15, 10, 14), float32], %var_1483: Tensor[(1408), uint64]) -> (Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) {
  %371 = cast(%var_1477, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
  %372 = cast(%var_1483, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %373 = reshape(%372, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %374 = @func_569(%373) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %375 = cosh(%371) /* ty=Tensor[(15, 10, 14), float32] */;
  %376 = %374.0;
  (%375, %376, %var_1483)
}

def @func_10866() -> Tensor[(2, 16, 3), float64] {
  @func_4021() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_3194(%var_3187: Tensor[(3, 4, 3), float64]) -> Tensor[(3, 4, 3), float64] {
  %377 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 4, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
  %378 = shape_of(%var_3187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %379 = cast(%var_3187, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
  %380 = dyn.reshape(%377, %378, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%379, %380) /* ty=Tensor[(3, 4, 3), float64] */
}

def @func_4801(%var_4787: Tensor[(189, 3), int8], %var_4788: Tensor[(1408, 1), uint64]) -> (Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) {
  %381 = cast(%var_4787, dtype="int8") /* ty=Tensor[(189, 3), int8] */;
  %382 = cast(%var_4788, dtype="uint64") /* ty=Tensor[(1408, 1), uint64] */;
  %383 = reshape(%381, newshape=[567]) /* ty=Tensor[(567), int8] */;
  %384 = reshape(%382, newshape=[22, 64]) /* ty=Tensor[(22, 64), uint64] */;
  %385 = @func_2959(%383, %384) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32], Tensor[(88, 16), uint64], Tensor[(567), int8], Tensor[(22, 64), uint64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %386 = %385.0;
  %387 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %388 = %387.0;
  %389 = cast(%388, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %390 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%386, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %393 = power(%391, %392) /* ty=Tensor[(2, 16, 3), float64] */;
  (%var_4787, %var_4788, %393)
}

def @func_3391(%var_3349: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) {
  %394 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %395 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %396 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %397 = cast(%var_3349, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %398 = reshape(%397, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %399 = @func_569(%398) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %400 = %394.0;
  %401 = %395.1;
  %402 = %396.0;
  %403 = %399.0;
  (%400, %401, %402, %403, %var_3349)
}

def @func_8502() -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) {
  %404 = @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %405 = cast(meta[relay.Constant][23] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %406 = reshape(%405, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %407 = @func_3061(%406) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(7, 9, 9), float64], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408), uint64]) */;
  %408 = %404.1;
  %409 = %407.3;
  (%408, %409, meta[relay.Constant][23] /* ty=Tensor[(1408), uint64] */)
}

def @func_10762() -> (Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64]) {
  %410 = @func_6944() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float32]) */;
  %411 = %410.1;
  %412 = @func_4782() /* ty=Tensor[(2, 16, 3), float64] */;
  (%411, %412)
}

def @func_3304() -> Tensor[(2, 16, 3), float64] {
  %413 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %413.0
}

def @func_3922(%var_3885: Tensor[(1408), uint64], %var_3888: Tensor[(88, 16), uint64], %var_3903: Tensor[(88, 16), uint8], %var_3915: Tensor[(55), int32], %var_3916: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(189, 3), int8], Tensor[(1408), uint64], Tensor[(88, 16), bool], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(88, 16), float32]) {
  %414 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %415 = cast(meta[relay.Constant][24] /* ty=Tensor[(189, 3), int8] */, dtype="int8") /* ty=Tensor[(189, 3), int8] */;
  %416 = cast(%var_3885, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %417 = reshape(%415, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %418 = reshape(%416, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %419 = @func_694(%417, %418) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %420 = %419.2;
  %421 = cast(%var_3888, dtype="uint8") /* ty=Tensor[(88, 16), uint8] */;
  %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(2), int32] */;
  %423 = cast(%420, dtype="uint8") /* ty=Tensor[(88, 16), uint8] */;
  %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %425 = multiply(%423, %424) /* ty=Tensor[(88, 16), uint8] */;
  %426 = cast(%var_3903, dtype="bool") /* ty=Tensor[(88, 16), bool] */;
  %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(2), int32] */;
  %428 = cast(%425, dtype="bool") /* ty=Tensor[(88, 16), bool] */;
  %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %430 = cast(%var_3915, dtype="int32") /* ty=Tensor[(55), int32] */;
  %431 = cast(%var_3916, dtype="int32") /* ty=Tensor[(715), int32] */;
  %432 = reshape(%430, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
  %433 = reshape(%431, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
  %434 = @func_810(%432, %433) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
  %435 = cast(%420, dtype="float32") /* ty=Tensor[(88, 16), float32] */;
  %436 = %414.0;
  %437 = less_equal(%428, %429) /* ty=Tensor[(88, 16), bool] */;
  %438 = %434.0;
  %439 = cos(%435) /* ty=Tensor[(88, 16), float32] */;
  (%436, meta[relay.Constant][24] /* ty=Tensor[(189, 3), int8] */, %var_3885, %437, %438, %var_3915, %var_3916, %439)
}

def @func_810(%var_776: Tensor[(1, 11, 5), int32], %var_777: Tensor[(13, 11, 5), int32]) -> (Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) {
  %440 = cast(meta[relay.Constant][25] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %441 = reshape(%440, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %442 = @func_569(%441) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %443 = cast(%var_776, dtype="int32") /* ty=Tensor[(1, 11, 5), int32] */;
  %444 = cast(%var_777, dtype="int32") /* ty=Tensor[(13, 11, 5), int32] */;
  %445 = minimum(%443, %444) /* ty=Tensor[(13, 11, 5), int32] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(13, 11, 5), float64] */;
  %447 = %442.0;
  %448 = cast(%447, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
  %449 = reshape(%448, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %450 = @func_569(%449) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %451 = acosh(%446) /* ty=Tensor[(13, 11, 5), float64] */;
  %452 = %450.1;
  (%447, meta[relay.Constant][25] /* ty=Tensor[(1408), uint64] */, %451, %452)
}

def @func_2892(%var_2888: Tensor[(1, 2100), float32]) -> (Tensor[(75), uint32], Tensor[(1408), uint64], Tensor[(1, 2100), float32], Tensor[(1408), uint64]) {
  %453 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %454 = %453.2;
  %455 = cast(%454, dtype="float32") /* ty=Tensor[(75), float32] */;
  %456 = tan(%455) /* ty=Tensor[(75), float32] */;
  %457 = cast(%454, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %458 = shape_of(%456, dtype="int32") /* ty=Tensor[(1), int32] */;
  %459 = cast(%456, dtype="uint32") /* ty=Tensor[(75), uint32] */;
  %460 = dyn.reshape(%457, %458, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %461 = cast(%var_2888, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
  %462 = cast(meta[relay.Constant][26] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %463 = reshape(%461, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %464 = reshape(%462, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %465 = @func_1490(%463, %464) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %466 = bitwise_or(%459, %460) /* ty=Tensor[(75), uint32] */;
  %467 = %465.2;
  (%466, %467, %var_2888, meta[relay.Constant][26] /* ty=Tensor[(1408), uint64] */)
}

def @func_8116(%var_8111: Tensor[(1050, 2), float32]) -> (Tensor[(1050, 2), float32],) {
  %468 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %469 = %468.2;
  %470 = cast(%var_8111, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %471 = shape_of(%469, dtype="int32") /* ty=Tensor[(2), int32] */;
  %472 = cast(%469, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %474 = floor_mod(%472, %473) /* ty=Tensor[(1050, 2), float32] */;
  (%474,)
}

def @func_5042() -> (Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) {
  %475 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %476 = @func_4324() /* ty=(Tensor[(480), bool],) */;
  %477 = %475.0;
  %478 = %476.0;
  %479 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  (%477, %478, %479)
}

def @func_5540() -> (Tensor[(2, 16, 3), float64],) {
  %480 = @func_5521() /* ty=Tensor[(2, 16, 3), float64] */;
  (%480,)
}

def @func_5823() -> (Tensor[(2, 16, 3), float64],) {
  %481 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %482 = %481.0;
  (%482,)
}

def @func_2410() -> (Tensor[(2, 16, 3), float64],) {
  %483 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %484 = %483.0;
  (%484,)
}

def @func_2564(%var_2552: Tensor[(189, 3), int8]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(88, 16), uint64], Tensor[(189, 3), int8], Tensor[(567), int8], Tensor[(715), int32]) {
  %485 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %486 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %487 = %486.0;
  %488 = cast(meta[relay.Constant][27] /* ty=Tensor[(2, 16, 3), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %489 = shape_of(%487, dtype="int32") /* ty=Tensor[(3), int32] */;
  %490 = cast(%487, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %491 = dyn.reshape(%488, %489, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %492 = greater(%490, %491) /* ty=Tensor[(2, 16, 3), bool] */;
  %493 = cast(%492, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %494 = cast(meta[relay.Constant][28] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %495 = cast(meta[relay.Constant][29] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %496 = reshape(%494, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %497 = reshape(%495, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %498 = @func_2212(%496, %497) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %499 = cast(%var_2552, dtype="int8") /* ty=Tensor[(189, 3), int8] */;
  %500 = %498.1;
  %501 = cast(%500, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
  %502 = reshape(%499, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %503 = reshape(%501, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %504 = @func_694(%502, %503) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %505 = cast(meta[relay.Constant][28] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %506 = cast(%500, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
  %507 = cast(meta[relay.Constant][30] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %508 = reshape(%505, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
  %509 = reshape(%506, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %510 = reshape(%507, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %511 = @func_1857(%508, %509, %510) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %512 = %485.0;
  %513 = atan(%493) /* ty=Tensor[(2, 16, 3), float64] */;
  %514 = %504.2;
  %515 = %511.6;
  (%512, %513, %500, meta[relay.Constant][28] /* ty=Tensor[(75), float64] */, meta[relay.Constant][29] /* ty=Tensor[(1408), uint64] */, %514, %var_2552, %515, meta[relay.Constant][30] /* ty=Tensor[(715), int32] */)
}

def @func_6400(%var_6346: Tensor[(2, 16, 3), float64], %var_6364: Tensor[(120), float32], %var_6365: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) {
  %516 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %517 = %516.0;
  %518 = cast(%var_6346, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %522 = cast(%517, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %523 = cast(%var_6364, dtype="float32") /* ty=Tensor[(120), float32] */;
  %524 = cast(%var_6365, dtype="int32") /* ty=Tensor[(715), int32] */;
  %525 = reshape(%523, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %526 = reshape(%524, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %527 = @func_4636(%525, %526) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32]) */;
  %528 = cast(%var_6365, dtype="float32") /* ty=Tensor[(715), float32] */;
  %529 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %530 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %531 = @func_5173() /* ty=(Tensor[(1408), uint64],) */;
  %532 = logical_or(%520, %521) /* ty=Tensor[(2, 16, 3), bool] */;
  %533 = rsqrt(%522) /* ty=Tensor[(2, 16, 3), float32] */;
  %534 = %527.3;
  %535 = cos(%528) /* ty=Tensor[(715), float32] */;
  %536 = %529.0;
  %537 = %530.0;
  %538 = %531.0;
  (%532, %533, %534, %var_6364, %535, %536, %537, %538)
}

def @func_3022() -> (Tensor[(2, 16, 3), float64],) {
  %539 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %540 = %539.0;
  (%540,)
}

def @func_5680() -> (Tensor[(2, 16, 3), float64],) {
  %541 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %542 = %541.0;
  (%542,)
}

def @func_7855() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) {
  %543 = @func_5226() /* ty=Tensor[(2, 16, 3), float64] */;
  %544 = @func_7009() /* ty=Tensor[(2, 16, 3), float64] */;
  %545 = @func_6894() /* ty=Tensor[(480), bool] */;
  (%543, %544, %545)
}

def @func_11074() -> Tensor[(2, 16, 3), float64] {
  %546 = @func_10483() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %546.0
}

def @func_5412() -> (Tensor[(2, 16, 3), float64],) {
  %547 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %548 = %547.0;
  (%548,)
}

def @func_2166() -> (Tensor[(2, 16, 3), float64],) {
  %549 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  (%549,)
}

def @func_7389() -> Tensor[(2, 16, 3), float64] {
  @func_7058() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_10088() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %550 = @func_4288() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %551 = %550.0;
  %552 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
  (%551, %552)
}

def @func_5834() -> Tensor[(2, 16, 3), float64] {
  %553 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %553.0
}

def @func_3507() -> Tensor[(2, 16, 3), float64] {
  %554 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %554.0
}

def @func_3726() -> Tensor[(2, 16, 3), float64] {
  @func_3507() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_9022() -> Tensor[(1408), uint64] {
  %555 = @func_8502() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) */;
  %555.2
}

def @func_10880() -> (Tensor[(2, 7, 7), float64],) {
  %556 = @func_9503() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %557 = %556.0;
  (%557,)
}

def @func_2156() -> Tensor[(2, 16, 3), float64] {
  %558 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %559 = acosh(%558) /* ty=Tensor[(2, 16, 3), float64] */;
  %560 = cast(meta[relay.Constant][31] /* ty=Tensor[(2, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %561 = shape_of(%559, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%559, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%562, %563) /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_6599(%var_6582: Tensor[(2100), float32]) -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), uint32]) {
  %564 = @func_5412() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %565 = cast(%var_6582, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %566 = cast(meta[relay.Constant][32] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %567 = reshape(%565, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %568 = reshape(%566, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %569 = @func_2596(%567, %568) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) */;
  %570 = %569.1;
  %571 = cast(%var_6582, dtype="uint32") /* ty=Tensor[(2100), uint32] */;
  %572 = shape_of(%570, dtype="int32") /* ty=Tensor[(1), int32] */;
  %573 = cast(%570, dtype="uint32") /* ty=Tensor[(2100), uint32] */;
  %574 = dyn.reshape(%571, %572, newshape=[]) /* ty=Tensor[(?), uint32] */;
  %575 = %564.0;
  %576 = right_shift(%573, %574) /* ty=Tensor[(2100), uint32] */;
  (%575, meta[relay.Constant][32] /* ty=Tensor[(1408), uint64] */, %576)
}

def @func_1857(%var_1771: Tensor[(15, 5, 1), float64], %var_1787: Tensor[(1408), uint64], %var_1800: Tensor[(715), int32]) -> (Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  %577 = cast(meta[relay.Constant][33] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %578 = cast(%var_1787, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %579 = reshape(%577, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %580 = reshape(%578, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %581 = @func_1490(%579, %580) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %582 = cast(meta[relay.Constant][34] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %583 = cast(meta[relay.Constant][34] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %584 = cast(%var_1800, dtype="int32") /* ty=Tensor[(715), int32] */;
  %585 = reshape(%582, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %586 = reshape(%583, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %587 = reshape(%584, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %588 = @func_1402(%585, %586, %587) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %589 = cast(meta[relay.Constant][35] /* ty=Tensor[(567), int8] */, dtype="int8") /* ty=Tensor[(567), int8] */;
  %590 = cast(%var_1787, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %591 = reshape(%589, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %592 = reshape(%590, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %593 = @func_694(%591, %592) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %594 = cast(meta[relay.Constant][33] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %595 = cast(%var_1787, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %596 = reshape(%594, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %597 = reshape(%595, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %598 = @func_1490(%596, %597) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %599 = cast(%var_1771, dtype="float64") /* ty=Tensor[(15, 5, 1), float64] */;
  %600 = erf(%599) /* ty=Tensor[(15, 5, 1), float64] */;
  %601 = cast(%var_1771, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %602 = shape_of(%600, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%600, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = logical_and(%603, %604) /* ty=Tensor[(15, 5, ?), bool] */;
  %606 = cast(%600, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %607 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(%605, dtype="bool") /* ty=Tensor[(15, 5, ?), bool] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %610 = logical_or(%608, %609) /* ty=Tensor[(15, 5, ?), bool] */;
  %611 = cast(%610, dtype="float64") /* ty=Tensor[(15, 5, ?), float64] */;
  %612 = shape_of(%605, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%605, dtype="float64") /* ty=Tensor[(15, 5, ?), float64] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %615 = mod(%613, %614) /* ty=Tensor[(15, 5, ?), float64] */;
  %616 = cast(%615, dtype="bool") /* ty=Tensor[(15, 5, ?), bool] */;
  %617 = cast(%var_1800, dtype="bool") /* ty=Tensor[(715), bool] */;
  %618 = cast(meta[relay.Constant][36] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %619 = cast(meta[relay.Constant][36] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %620 = reshape(%618, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %621 = reshape(%619, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %622 = %581.1;
  %623 = %588.4;
  %624 = %593.1;
  %625 = %598.2;
  %626 = greater_equal(%616, %617) /* ty=Tensor[(15, 5, 715), bool] */;
  %627 = @func_667(%620, %621) /* ty=Tensor[(2, 7, 7), float64] */;
  (%622, meta[relay.Constant][33] /* ty=Tensor[(2100), float32] */, %var_1787, %623, meta[relay.Constant][34] /* ty=Tensor[(120), float32] */, %624, meta[relay.Constant][35] /* ty=Tensor[(567), int8] */, %625, %626, %627, meta[relay.Constant][36] /* ty=Tensor[(98), float64] */)
}

def @func_8882() -> (Tensor[(2, 16, 3), float64],) {
  %628 = @func_6875() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %629 = %628.0;
  %630 = cast(%629, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %631 = sinh(%630) /* ty=Tensor[(2, 16, 3), float64] */;
  (%631,)
}

def @func_7968() -> (Tensor[(2, 16, 3), float64],) {
  %632 = @func_6107() /* ty=Tensor[(2, 16, 3), float64] */;
  (%632,)
}

def @func_7545() -> Tensor[(2, 16, 3), float64] {
  @func_4574() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_11119() -> (Tensor[(8, 11, 16), float32],) {
  %633 = @func_9293() /* ty=Tensor[(8, 11, 16), float32] */;
  (%633,)
}

def @func_8397(%var_8393: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(75), float64]) {
  %634 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %635 = cast(%var_8393, dtype="float64") /* ty=Tensor[(75), float64] */;
  %636 = cast(%var_8393, dtype="float64") /* ty=Tensor[(75), float64] */;
  %637 = reshape(%635, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %638 = reshape(%636, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %639 = @func_2801(%637, %638) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) */;
  %640 = @func_3304() /* ty=Tensor[(2, 16, 3), float64] */;
  %641 = %634.0;
  %642 = %639.2;
  (%640, %641, %642, %var_8393)
}

def @func_5226() -> Tensor[(2, 16, 3), float64] {
  %643 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %643.0
}

def @func_4715(%var_4706: Tensor[(1, 12, 5), bool], %var_4707: Tensor[(10, 12, 5), bool]) -> Tensor[(10, 12, 5), bool] {
  %644 = cast(%var_4706, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
  %645 = cast(%var_4707, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
  logical_or(%644, %645) /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_7899(%var_7894: Tensor[(1408), uint64], %var_7895: Tensor[(1, 55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(88, 16), float32], Tensor[(1408), uint64], Tensor[(1, 55), int32], Tensor[(715), int32]) {
  %646 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %647 = cast(%var_7894, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %648 = cast(%var_7894, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %649 = cast(%var_7894, dtype="uint8") /* ty=Tensor[(1408), uint8] */;
  %650 = cast(%var_7895, dtype="int32") /* ty=Tensor[(1, 55), int32] */;
  %651 = cast(meta[relay.Constant][37] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %652 = reshape(%647, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %653 = reshape(%648, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %654 = reshape(%649, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint8] */;
  %655 = reshape(%650, newshape=[55]) /* ty=Tensor[(55), int32] */;
  %656 = reshape(%651, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %657 = @func_3922(%652, %653, %654, %655, %656) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(189, 3), int8], Tensor[(1408), uint64], Tensor[(88, 16), bool], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(88, 16), float32]) */;
  %658 = %646.0;
  %659 = %657.7;
  (%658, %659, %var_7894, %var_7895, meta[relay.Constant][37] /* ty=Tensor[(715), int32] */)
}

def @func_8220() -> (Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(55), int32], Tensor[(13, ?, 16), int64]) {
  %660 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %661 = cast(meta[relay.Constant][38] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
  %662 = reshape(%661, newshape=[55]) /* ty=Tensor[(55), int32] */;
  %663 = @func_4109(%662) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */;
  %664 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
  %665 = log10(%664) /* ty=Tensor[(13, 1, 16), float32] */;
  %666 = cast(meta[relay.Constant][39] /* ty=Tensor[(13, 1, 16), float32] */, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
  %667 = shape_of(%665, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%665, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %670 = %660.0;
  %671 = %663.3;
  %672 = multiply(%668, %669) /* ty=Tensor[(13, ?, 16), int64] */;
  (%670, %671, meta[relay.Constant][38] /* ty=Tensor[(55), int32] */, %672)
}

def @func_7197() -> Tensor[(2, 16, 3), float64] {
  %673 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %673.0
}

def @func_11198(%var_11155: Tensor[(7, 14, 5), uint16], %var_11156: Tensor[(7, 14, 5), uint16]) -> (Tensor[(7, 14, 5), bool], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(7, 14, 5), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float32], Tensor[(1, 120), float32], Tensor[(715), int32]) {
  %674 = cast(%var_11156, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %675 = shape_of(%var_11155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %676 = cast(%var_11155, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %677 = dyn.reshape(%674, %675, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %678 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %679 = cast(%var_11155, dtype="float32") /* ty=Tensor[(7, 14, 5), float32] */;
  %680 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %681 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 120), float32] */, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %682 = cast(meta[relay.Constant][40] /* ty=Tensor[(1, 120), float32] */, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %683 = cast(meta[relay.Constant][41] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %684 = reshape(%681, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %685 = reshape(%682, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %686 = reshape(%683, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %687 = @func_1402(%684, %685, %686) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %688 = less_equal(%676, %677) /* ty=Tensor[(7, 14, 5), bool] */;
  %689 = @func_8489() /* ty=Tensor[(2, 16, 3), float64] */;
  %690 = %678.0;
  %691 = sqrt(%679) /* ty=Tensor[(7, 14, 5), float32] */;
  %692 = %680.0;
  %693 = @func_6527() /* ty=Tensor[(2, 16, 3), float64] */;
  %694 = %687.0;
  (%688, %689, %690, %691, %692, %693, %694, meta[relay.Constant][40] /* ty=Tensor[(1, 120), float32] */, meta[relay.Constant][41] /* ty=Tensor[(715), int32] */)
}

def @func_2337() -> (Tensor[(2, 16, 3), float64],) {
  %695 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %696 = %695.0;
  (%696,)
}

def @func_8940() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %697 = @func_8373() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %698 = @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %699 = %697.1;
  %700 = %698.0;
  (%699, %700)
}

def @main(%var_11762: Tensor[(1, 72), float64], %var_11770: Tensor[(1, 72), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, 9, 8), bool], Tensor[(3, 216), float64], Tensor[(?, 72), int32]) {
  %701 = cast(%var_11762, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %702 = cast(meta[relay.Constant][42] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %703 = reshape(%701, newshape=[9, 1, 8]) /* ty=Tensor[(9, 1, 8), float64] */;
  %704 = reshape(%702, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %705 = @func_5880(%703, %704) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) */;
  %706 = cast(%var_11770, dtype="int32") /* ty=Tensor[(1, 72), int32] */;
  %707 = shape_of(%var_11762, dtype="int32") /* ty=Tensor[(2), int32] */;
  %708 = cast(%var_11762, dtype="int32") /* ty=Tensor[(1, 72), int32] */;
  %709 = dyn.reshape(%706, %707, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %710 = @func_10866() /* ty=Tensor[(2, 16, 3), float64] */;
  %711 = %705.0;
  %712 = bitwise_and(%708, %709) /* ty=Tensor[(?, 72), int32] */;
  (%710, %711, meta[relay.Constant][42] /* ty=Tensor[(3, 216), float64] */, %712)
}

def @func_9897() -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(1050, 2), float32]) {
  %713 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %714 = cast(meta[relay.Constant][43] /* ty=Tensor[(1050, 2), float32] */, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %715 = reshape(%714, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %716 = @func_2892(%715) /* ty=(Tensor[(75), uint32], Tensor[(1408), uint64], Tensor[(1, 2100), float32], Tensor[(1408), uint64]) */;
  %717 = %713.0;
  %718 = @func_9022() /* ty=Tensor[(1408), uint64] */;
  %719 = %716.1;
  (%717, %718, %719, meta[relay.Constant][43] /* ty=Tensor[(1050, 2), float32] */)
}

def @func_2693(%var_2691: Tensor[(480), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  %720 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %721 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %722 = cast(%var_2691, dtype="bool") /* ty=Tensor[(480), bool] */;
  %723 = reshape(%722, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), bool] */;
  %724 = @func_1587(%723) /* ty=(Tensor[(4, 10, 12), bool],) */;
  %725 = %720.0;
  %726 = %721.0;
  %727 = %724.0;
  (%725, %726, %727, %var_2691)
}

def @func_10656() -> (Tensor[(2, 16, 3), float64], Tensor[(72), float64], Tensor[(648), float64]) {
  %728 = @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */;
  %729 = cast(meta[relay.Constant][44] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %730 = reshape(%729, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %731 = @func_6257(%730) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */;
  %732 = %728.2;
  %733 = %731.2;
  (%732, %733, meta[relay.Constant][44] /* ty=Tensor[(648), float64] */)
}

def @func_10510() -> Tensor[(1408), uint64] {
  %734 = @func_4469() /* ty=(Tensor[(1408), uint64],) */;
  %734.0
}

def @func_4021() -> Tensor[(2, 16, 3), float64] {
  %735 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %735.0
}

def @func_4434(%var_4357: Tensor[(3, 1, 14), float32], %var_4358: Tensor[(3, 3, 14), float32], %var_4385: Tensor[(1408), uint64], %var_4386: Tensor[(715), int32], %var_4409: Tensor[(3, 1, 14), float32], %var_4420: Tensor[(36), float64]) -> (Tensor[(3, 3, 14), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(715), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(3, ?, 14), float64], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64]) {
  %736 = cast(%var_4357, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
  %737 = cast(%var_4358, dtype="float32") /* ty=Tensor[(3, 3, 14), float32] */;
  %738 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %739 = %738.1;
  %740 = cast(%739, dtype="float64") /* ty=Tensor[(75), float64] */;
  %741 = cast(%var_4385, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %742 = cast(%var_4386, dtype="int32") /* ty=Tensor[(715), int32] */;
  %743 = reshape(%740, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
  %744 = reshape(%741, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %745 = reshape(%742, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %746 = @func_1857(%743, %744, %745) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %747 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %748 = @func_4040() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %749 = cast(%var_4409, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %750 = shape_of(%var_4357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %751 = cast(%var_4357, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %752 = dyn.reshape(%749, %750, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %753 = cast(%var_4420, dtype="float64") /* ty=Tensor[(36), float64] */;
  %754 = reshape(%753, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float64] */;
  %755 = multiply(%736, %737) /* ty=Tensor[(3, 3, 14), float32] */;
  %756 = %746.2;
  %757 = %747.0;
  %758 = %748.0;
  %759 = mod(%751, %752) /* ty=Tensor[(3, ?, 14), float64] */;
  %760 = @func_4021() /* ty=Tensor[(2, 16, 3), float64] */;
  %761 = @func_3194(%754) /* ty=Tensor[(3, 4, 3), float64] */;
  (%755, %739, %756, %var_4385, %var_4386, %757, %758, %759, %760, %761, %var_4420)
}

def @func_5880(%var_5836: Tensor[(9, 1, 8), float64], %var_5843: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) {
  %762 = cast(%var_5836, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %763 = cast(%var_5843, dtype="bool") /* ty=Tensor[(9, 9, 8), bool] */;
  %764 = cast(%var_5836, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
  %765 = sin(%764) /* ty=Tensor[(9, 1, 8), float64] */;
  %766 = cast(%765, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
  %767 = shape_of(%var_5836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%var_5836, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %770 = minimum(%768, %769) /* ty=Tensor[(9, ?, 8), uint8] */;
  %771 = cast(%765, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %772 = shape_of(%770, dtype="int32") /* ty=Tensor[(3), int32] */;
  %773 = cast(%770, dtype="bool") /* ty=Tensor[(9, ?, 8), bool] */;
  %774 = dyn.reshape(%771, %772, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %775 = not_equal(%773, %774) /* ty=Tensor[(9, ?, 8), bool] */;
  %776 = cast(%765, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
  %777 = shape_of(%775, dtype="int32") /* ty=Tensor[(3), int32] */;
  %778 = cast(%775, dtype="bool") /* ty=Tensor[(9, ?, 8), bool] */;
  %779 = dyn.reshape(%776, %777, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %780 = not_equal(%762, %763) /* ty=Tensor[(9, 9, 8), bool] */;
  %781 = equal(%778, %779) /* ty=Tensor[(9, ?, 8), bool] */;
  (%780, %781)
}

def @func_6016() -> (Tensor[(8, 11, 16), int32],) {
  %782 = @func_5057() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %783 = %782.0;
  (%783,)
}

def @func_10740(%var_10735: Tensor[(1, 10, 4), float64]) -> Tensor[(1, 10, 4), float64] {
  %784 = cast(%var_10735, dtype="float64") /* ty=Tensor[(1, 10, 4), float64] */;
  sinh(%784) /* ty=Tensor[(1, 10, 4), float64] */
}

def @func_6107() -> Tensor[(2, 16, 3), float64] {
  @func_4147() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_10064() -> Tensor[(2, 16, 3), float64] {
  %785 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %785.0
}

def @func_6009(%var_6002: Tensor[(12, 13, 12), uint64]) -> Tensor[(12, 13, 12), bool] {
  %786 = cast(meta[relay.Constant][45] /* ty=Tensor[(12, 13, 12), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
  %787 = shape_of(%var_6002, dtype="int32") /* ty=Tensor[(3), int32] */;
  %788 = cast(%var_6002, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
  %789 = dyn.reshape(%786, %787, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  equal(%788, %789) /* ty=Tensor[(12, 13, 12), bool] */
}

def @func_9377() -> (Tensor[(9, 11, 15), int8], Tensor[(2, 16, 3), float64]) {
  %790 = cast(meta[relay.Constant][47] /* ty=Tensor[(9, 11, 15), int8] */, dtype="int8") /* ty=Tensor[(9, 11, 15), int8] */;
  %791 = shape_of(meta[relay.Constant][46] /* ty=Tensor[(9, 11, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(meta[relay.Constant][46] /* ty=Tensor[(9, 11, 15), int8] */, dtype="int8") /* ty=Tensor[(9, 11, 15), int8] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %794 = subtract(%792, %793) /* ty=Tensor[(9, 11, 15), int8] */;
  %795 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  (%794, %795)
}

def @func_10037(%var_10023: Tensor[(648), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64]) {
  %796 = cast(%var_10023, dtype="float64") /* ty=Tensor[(648), float64] */;
  %797 = reshape(%796, newshape=[18, 36]) /* ty=Tensor[(18, 36), float64] */;
  %798 = @func_7262(%797) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(18, 36), float64]) */;
  %799 = @func_7058() /* ty=Tensor[(2, 16, 3), float64] */;
  %800 = @func_5521() /* ty=Tensor[(2, 16, 3), float64] */;
  %801 = %798.1;
  (%799, %800, %801, %var_10023)
}

def @func_7767(%var_7718: Tensor[(98), float64], %var_7736: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(98), float64], Tensor[(98), float64], Tensor[(8, 11, 16), int32], Tensor[(1408), int16]) {
  %802 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %803 = cast(%var_7718, dtype="float64") /* ty=Tensor[(98), float64] */;
  %804 = reshape(%803, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %805 = @func_2453(%804) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %806 = @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %807 = @func_5278() /* ty=(Tensor[(1408), uint64],) */;
  %808 = %807.0;
  %809 = cast(%var_7736, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %810 = shape_of(%808, dtype="int32") /* ty=Tensor[(1), int32] */;
  %811 = cast(%808, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %813 = maximum(%811, %812) /* ty=Tensor[(1408), uint64] */;
  %814 = cast(%var_7736, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %815 = shape_of(%813, dtype="int32") /* ty=Tensor[(1), int32] */;
  %816 = cast(%813, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %817 = dyn.reshape(%814, %815, newshape=[]) /* ty=Tensor[(?), int16] */;
  %818 = %802.0;
  %819 = %805.2;
  %820 = %806.0;
  %821 = logical_xor(%816, %817) /* ty=Tensor[(1408), int16] */;
  (%818, %819, %var_7718, %820, %821)
}

def @func_10363() -> Tensor[(2, 16, 3), float64] {
  %822 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %822.0
}

def @func_10407(%var_10394: Tensor[(9, 4, 5), uint64], %var_10395: Tensor[(9, 4, 5), uint64]) -> (Tensor[(9, 4, 5), bool],) {
  %823 = cast(%var_10395, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %824 = shape_of(%var_10394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %825 = cast(%var_10394, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
  %826 = dyn.reshape(%823, %824, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %827 = greater(%825, %826) /* ty=Tensor[(9, 4, 5), bool] */;
  (%827,)
}

def @func_5173() -> (Tensor[(1408), uint64],) {
  %828 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %829 = %828.3;
  (%829,)
}

def @func_5999() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %830 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %831 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  %832 = %830.0;
  (%831, %832)
}

def @func_10225() -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32]) {
  %833 = @func_6854() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) */;
  %834 = @func_5057() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %835 = %833.0;
  %836 = %834.0;
  (%835, %836)
}

def @func_8275(%var_8273: Tensor[(1, 715), int32]) -> (Tensor[(98), float64], Tensor[(2, 16, 3), bool], Tensor[(8, 12), float64], Tensor[(120), float32], Tensor[(1, 715), int32]) {
  %837 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %838 = cast(meta[relay.Constant][48] /* ty=Tensor[(8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 12), float64] */;
  %839 = cast(meta[relay.Constant][49] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %840 = cast(%var_8273, dtype="int32") /* ty=Tensor[(1, 715), int32] */;
  %841 = reshape(%838, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %842 = reshape(%839, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %843 = reshape(%840, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %844 = @func_6400(%841, %842, %843) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) */;
  %845 = %837.2;
  %846 = %844.0;
  (%845, %846, meta[relay.Constant][48] /* ty=Tensor[(8, 12), float64] */, meta[relay.Constant][49] /* ty=Tensor[(120), float32] */, %var_8273)
}

def @func_4147() -> Tensor[(2, 16, 3), float64] {
  %847 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %847.0
}

def @func_3564() -> Tensor[(2, 16, 3), float64] {
  %848 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %848.0
}

def @func_8765() -> Tensor[(2, 16, 3), float64] {
  %849 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %849.1
}

def @func_5598() -> Tensor[(2, 16, 3), float64] {
  %850 = @func_4569() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %850.0
}

def @func_10483() -> (Tensor[(2, 16, 3), float64],) {
  %851 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  (%851,)
}

def @func_11710(%var_11690: uint16, %var_11691: Tensor[(2, 3, 10), uint16]) -> (Tensor[(2, 3, 10), bool], Tensor[(2, 16, 3), float64]) {
  %852 = cast(%var_11690, dtype="bool") /* ty=bool */;
  %853 = cast(%var_11691, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
  %854 = @func_8057() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %855 = greater(%852, %853) /* ty=Tensor[(2, 3, 10), bool] */;
  %856 = %854.0;
  (%855, %856)
}

def @func_11749() -> (Tensor[(1408), uint64],) {
  %857 = @func_5173() /* ty=(Tensor[(1408), uint64],) */;
  %858 = %857.0;
  (%858,)
}

def @func_9689(%var_9655: Tensor[(1, 55), int32], %var_9677: Tensor[(9, 55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, 55), uint32]) {
  %859 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %860 = cast(%var_9655, dtype="int32") /* ty=Tensor[(1, 55), int32] */;
  %861 = reshape(%860, newshape=[55]) /* ty=Tensor[(55), int32] */;
  %862 = @func_6633(%861) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32]) */;
  %863 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %864 = cast(%var_9655, dtype="uint32") /* ty=Tensor[(1, 55), uint32] */;
  %865 = cast(%var_9677, dtype="uint32") /* ty=Tensor[(9, 55), uint32] */;
  %866 = %859.0;
  %867 = %862.0;
  %868 = %863.0;
  %869 = add(%864, %865) /* ty=Tensor[(9, 55), uint32] */;
  (%866, %867, %868, %869)
}

def @func_3773() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %870 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %871 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %872 = %870.0;
  %873 = %871.0;
  %874 = @func_3304() /* ty=Tensor[(2, 16, 3), float64] */;
  (%872, %873, %874)
}

def @func_4288() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %875 = @func_4040() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %876 = @func_3773() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %877 = %875.0;
  %878 = %876.2;
  (%877, %878)
}

def @func_7507() -> (Tensor[(2, 16, 3), float64],) {
  %879 = @func_6854() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) */;
  %880 = %879.0;
  (%880,)
}

def @func_8373() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %881 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %882 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  %883 = %881.0;
  (%882, %883)
}

def @func_6894() -> Tensor[(480), bool] {
  %884 = @func_4324() /* ty=(Tensor[(480), bool],) */;
  %884.0
}

def @func_4569() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %885 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %886 = cast(meta[relay.Constant][50] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
  %887 = reshape(%886, newshape=[55]) /* ty=Tensor[(55), int32] */;
  %888 = @func_4109(%887) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */;
  %889 = %885.0;
  %890 = %888.0;
  %891 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  %892 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  (%889, %890, meta[relay.Constant][50] /* ty=Tensor[(55), int32] */, %891, %892)
}

def @func_8057() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %893 = @func_5999() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %894 = @func_7058() /* ty=Tensor[(2, 16, 3), float64] */;
  %895 = %893.1;
  (%894, %895)
}

def @func_6712() -> (Tensor[(2, 16, 3), float64],) {
  %896 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %897 = %896.0;
  (%897,)
}

def @func_1587(%var_1582: Tensor[(4, 10, 12), bool]) -> (Tensor[(4, 10, 12), bool],) {
  %898 = cast(%var_1582, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %899 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(4, 10, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %900 = cast(meta[relay.Constant][51] /* ty=Tensor[(4, 10, 12), bool] */, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %902 = logical_or(%900, %901) /* ty=Tensor[(4, 10, 12), bool] */;
  (%902,)
}

def @func_10375() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %903 = @func_9647() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %904 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %905 = %903.0;
  %906 = %904.0;
  (%905, %906)
}

def @func_11540() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %907 = @func_10483() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %908 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %909 = %907.0;
  %910 = %908.0;
  (%909, %910)
}

def @func_2838() -> (Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) {
  %911 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %912 = cast(meta[relay.Constant][52] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %913 = cast(meta[relay.Constant][53] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %914 = reshape(%912, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %915 = reshape(%913, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %916 = @func_2212(%914, %915) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %917 = %911.0;
  %918 = %916.2;
  (%917, %918, meta[relay.Constant][52] /* ty=Tensor[(75), float64] */, meta[relay.Constant][53] /* ty=Tensor[(1408), uint64] */)
}

def @func_9293() -> Tensor[(8, 11, 16), float32] {
  %919 = @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %920 = %919.0;
  %921 = cast(%920, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  acosh(%921) /* ty=Tensor[(8, 11, 16), float32] */
}

def @func_4109(%var_4091: Tensor[(55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) {
  %922 = cast(%var_4091, dtype="int32") /* ty=Tensor[(55), int32] */;
  %923 = cast(meta[relay.Constant][54] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %924 = reshape(%922, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
  %925 = reshape(%923, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
  %926 = @func_810(%924, %925) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
  %927 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
  %928 = %926.3;
  (%927, %928, %var_4091, meta[relay.Constant][54] /* ty=Tensor[(715), int32] */)
}

def @func_8317() -> (Tensor[(480), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  %929 = @func_4324() /* ty=(Tensor[(480), bool],) */;
  %930 = cast(meta[relay.Constant][55] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %931 = reshape(%930, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %932 = @func_2453(%931) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %933 = %929.0;
  %934 = %932.1;
  (%933, %934, meta[relay.Constant][55] /* ty=Tensor[(98), float64] */)
}

def @func_4469() -> (Tensor[(1408), uint64],) {
  %935 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %936 = %935.3;
  (%936,)
}

def @func_3146() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) {
  %937 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %938 = cast(meta[relay.Constant][56] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %939 = %937.0;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %941 = reshape(%938, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %942 = reshape(%940, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
  %943 = @func_2310(%941, %942) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 7, 7), float64], Tensor[(98), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), int32], Tensor[(8, 11, 16), int32], Tensor[(1408), uint64]) */;
  %944 = %943.3;
  (%939, %944, meta[relay.Constant][56] /* ty=Tensor[(98), float64] */)
}

def @func_10831(%var_10807: Tensor[(2, 7, 7), float64]) -> (Tensor[(2, 7, 7), float32], Tensor[(2, 16, 3), float64]) {
  %945 = @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %946 = %945.0;
  %947 = cast(%var_10807, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  %948 = shape_of(%946, dtype="int32") /* ty=Tensor[(3), int32] */;
  %949 = cast(%946, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  %950 = dyn.reshape(%947, %948, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %951 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %952 = power(%949, %950) /* ty=Tensor[(2, 7, 7), float32] */;
  %953 = %951.0;
  (%952, %953)
}

def @func_2801(%var_2790: Tensor[(75), float64], %var_2795: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) {
  %954 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %955 = cast(%var_2790, dtype="float64") /* ty=Tensor[(75), float64] */;
  %956 = cast(meta[relay.Constant][57] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %957 = reshape(%955, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %958 = reshape(%956, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %959 = @func_2212(%957, %958) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %960 = cast(%var_2795, dtype="bool") /* ty=Tensor[(75), bool] */;
  %961 = shape_of(%var_2790, dtype="int32") /* ty=Tensor[(1), int32] */;
  %962 = cast(%var_2790, dtype="bool") /* ty=Tensor[(75), bool] */;
  %963 = dyn.reshape(%960, %961, newshape=[]) /* ty=Tensor[(?), bool] */;
  %964 = %954.0;
  %965 = %959.4;
  %966 = less(%962, %963) /* ty=Tensor[(75), bool] */;
  (%964, %965, meta[relay.Constant][57] /* ty=Tensor[(1408), uint64] */, %966)
}

def @func_2673() -> (Tensor[(2, 16, 3), float64],) {
  %967 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %968 = %967.0;
  (%968,)
}

def @func_2959(%var_2938: Tensor[(567), int8], %var_2939: Tensor[(22, 64), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32], Tensor[(88, 16), uint64], Tensor[(567), int8], Tensor[(22, 64), uint64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  %969 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %970 = cast(meta[relay.Constant][58] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %971 = cast(meta[relay.Constant][58] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %972 = cast(meta[relay.Constant][59] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %973 = reshape(%970, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %974 = reshape(%971, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %975 = reshape(%972, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %976 = @func_1402(%973, %974, %975) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %977 = cast(%var_2938, dtype="int8") /* ty=Tensor[(567), int8] */;
  %978 = cast(%var_2939, dtype="uint64") /* ty=Tensor[(22, 64), uint64] */;
  %979 = reshape(%977, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %980 = reshape(%978, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %981 = @func_694(%979, %980) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %982 = cast(meta[relay.Constant][60] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %983 = reshape(%982, newshape=[480]) /* ty=Tensor[(480), bool] */;
  %984 = @func_2693(%983) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %985 = %969.0;
  %986 = %976.4;
  %987 = %981.2;
  %988 = %984.2;
  (%985, %986, meta[relay.Constant][58] /* ty=Tensor[(120), float32] */, meta[relay.Constant][59] /* ty=Tensor[(715), int32] */, %987, %var_2938, %var_2939, %988, meta[relay.Constant][60] /* ty=Tensor[(480), bool] */)
}

def @func_8905() -> Tensor[(2, 16, 3), float64] {
  @func_6527() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_10333(%var_10291: Tensor[(9, 9, 15), float32]) -> (Tensor[(9, 9, 15), int8],) {
  %989 = cast(%var_10291, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %990 = erf(%989) /* ty=Tensor[(9, 9, 15), float32] */;
  %991 = cast(%990, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %992 = sigmoid(%991) /* ty=Tensor[(9, 9, 15), float32] */;
  %993 = cast(%990, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %994 = shape_of(%var_10291, dtype="int32") /* ty=Tensor[(3), int32] */;
  %995 = cast(%var_10291, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
  %996 = dyn.reshape(%993, %994, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %997 = power(%995, %996) /* ty=Tensor[(9, 9, 15), float32] */;
  %998 = cast(%997, dtype="int8") /* ty=Tensor[(9, 9, 15), int8] */;
  %999 = shape_of(%992, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1000 = cast(%992, dtype="int8") /* ty=Tensor[(9, 9, 15), int8] */;
  %1001 = dyn.reshape(%998, %999, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %1002 = logical_xor(%1000, %1001) /* ty=Tensor[(9, 9, 15), int8] */;
  (%1002,)
}

def @func_5278() -> (Tensor[(1408), uint64],) {
  %1003 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %1004 = %1003.3;
  (%1004,)
}

def @func_8489() -> Tensor[(2, 16, 3), float64] {
  @func_4574() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_10957() -> (Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(715), float32], Tensor[(120), float32], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(150, 14), float32], Tensor[(1408), uint64]) {
  %1005 = @func_10483() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1006 = %1005.0;
  %1007 = cast(%1006, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %1008 = @func_8373() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %1009 = @func_7119() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %1010 = cast(%1006, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %1011 = cast(meta[relay.Constant][61] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1012 = cast(meta[relay.Constant][62] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %1013 = reshape(%1010, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %1014 = reshape(%1011, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %1015 = reshape(%1012, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %1016 = @func_6400(%1013, %1014, %1015) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) */;
  %1017 = cast(meta[relay.Constant][63] /* ty=Tensor[(150, 14), float32] */, dtype="float32") /* ty=Tensor[(150, 14), float32] */;
  %1018 = cast(meta[relay.Constant][64] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1019 = reshape(%1017, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %1020 = reshape(%1018, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1021 = @func_1490(%1019, %1020) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %1022 = log(%1007) /* ty=Tensor[(2, 16, 3), float32] */;
  %1023 = %1008.0;
  %1024 = %1009.1;
  %1025 = %1016.4;
  %1026 = %1021.2;
  (%1022, %1023, %1024, %1025, meta[relay.Constant][61] /* ty=Tensor[(120), float32] */, meta[relay.Constant][62] /* ty=Tensor[(715), int32] */, %1026, meta[relay.Constant][63] /* ty=Tensor[(150, 14), float32] */, meta[relay.Constant][64] /* ty=Tensor[(1408), uint64] */)
}

def @func_2375(%var_2360: Tensor[(2, 16, 3), float64], %var_2369: Tensor[(2100), float32], %var_2370: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) {
  %1027 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1028 = %1027.0;
  %1029 = cast(%var_2360, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %1030 = shape_of(%1028, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1031 = cast(%1028, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %1032 = dyn.reshape(%1029, %1030, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1033 = cast(%var_2369, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %1034 = cast(%var_2370, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1035 = reshape(%1033, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %1036 = reshape(%1034, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1037 = @func_1490(%1035, %1036) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %1038 = logical_and(%1031, %1032) /* ty=Tensor[(2, 16, 3), bool] */;
  %1039 = %1037.0;
  (%1038, %1039, %var_2369, %var_2370)
}

def @func_2746(%var_2724: Tensor[(2, 16, 3), float64], %var_2731: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) {
  %1040 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1041 = %1040.0;
  %1042 = cast(%var_2724, dtype="uint16") /* ty=Tensor[(2, 16, 3), uint16] */;
  %1043 = shape_of(%1041, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1044 = cast(%1041, dtype="uint16") /* ty=Tensor[(2, 16, 3), uint16] */;
  %1045 = dyn.reshape(%1042, %1043, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %1046 = cast(meta[relay.Constant][65] /* ty=Tensor[(2100, 1), float32] */, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
  %1047 = cast(%var_2731, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1048 = reshape(%1046, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %1049 = reshape(%1047, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1050 = @func_1490(%1048, %1049) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %1051 = bitwise_and(%1044, %1045) /* ty=Tensor[(2, 16, 3), uint16] */;
  %1052 = %1050.0;
  (%1051, %1052, meta[relay.Constant][65] /* ty=Tensor[(2100, 1), float32] */, %var_2731)
}

def @func_8146() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %1053 = @func_5999() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %1054 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1055 = %1053.0;
  %1056 = %1054.0;
  (%1055, %1056)
}

def @func_3623() -> (Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  %1057 = cast(meta[relay.Constant][66] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %1058 = reshape(%1057, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), bool] */;
  %1059 = @func_1587(%1058) /* ty=(Tensor[(4, 10, 12), bool],) */;
  %1060 = @func_3507() /* ty=Tensor[(2, 16, 3), float64] */;
  %1061 = %1059.0;
  (%1060, %1061, meta[relay.Constant][66] /* ty=Tensor[(480), bool] */)
}

def @func_11723() -> (Tensor[(2, 16, 3), float64],) {
  %1062 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
  (%1062,)
}

def @func_10388() -> Tensor[(2, 16, 3), float64] {
  %1063 = @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %1063.1
}

def @func_10502() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %1064 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1065 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1066 = %1064.0;
  %1067 = %1065.0;
  (%1066, %1067)
}

def @func_8659() -> Tensor[(2, 16, 3), float64] {
  %1068 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1068.0
}

def @func_9832(%var_9744: Tensor[(75), float64], %var_9821: Tensor[(600), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), float32], Tensor[(10, 12, 5), bool], Tensor[(3, 20), bool], Tensor[(600), bool]) {
  %1069 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1070 = @func_8373() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %1071 = cast(%var_9744, dtype="float64") /* ty=Tensor[(75), float64] */;
  %1072 = cast(%var_9744, dtype="float64") /* ty=Tensor[(75), float64] */;
  %1073 = reshape(%1071, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %1074 = reshape(%1072, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %1075 = @func_2801(%1073, %1074) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) */;
  %1076 = @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %1077 = %1076.0;
  %1078 = cast(%1077, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %1079 = cos(%1078) /* ty=Tensor[(8, 11, 16), float64] */;
  %1080 = cast(%1079, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %1081 = cast(%1079, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
  %1082 = cosh(%1081) /* ty=Tensor[(8, 11, 16), float64] */;
  %1083 = cast(%1079, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %1084 = shape_of(%1082, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1085 = cast(%1082, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %1086 = dyn.reshape(%1083, %1084, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1087 = cast(meta[relay.Constant][67] /* ty=Tensor[(3, 20), bool] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
  %1088 = cast(%var_9821, dtype="bool") /* ty=Tensor[(600), bool] */;
  %1089 = reshape(%1087, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), bool] */;
  %1090 = reshape(%1088, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), bool] */;
  %1091 = %1069.0;
  %1092 = %1070.0;
  %1093 = %1075.0;
  %1094 = atanh(%1080) /* ty=Tensor[(8, 11, 16), float64] */;
  %1095 = multiply(%1085, %1086) /* ty=Tensor[(8, 11, 16), float32] */;
  %1096 = @func_4715(%1089, %1090) /* ty=Tensor[(10, 12, 5), bool] */;
  (%1091, %1092, %1093, %var_9744, %1094, %1095, %1096, meta[relay.Constant][67] /* ty=Tensor[(3, 20), bool] */, %var_9821)
}

def @func_7447(%var_7419: Tensor[(8, 11, 16), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64], Tensor[(8, 11, 16), float32]) {
  %1097 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1098 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 704), uint64] */, dtype="uint64") /* ty=Tensor[(2, 704), uint64] */;
  %1099 = reshape(%1098, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %1100 = @func_569(%1099) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %1101 = %1100.1;
  %1102 = cast(%var_7419, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %1103 = shape_of(%1101, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1104 = cast(%1101, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  %1105 = dyn.reshape(%1102, %1103, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1106 = %1097.0;
  %1107 = divide(%1104, %1105) /* ty=Tensor[(8, 11, 16), float32] */;
  (%1106, meta[relay.Constant][68] /* ty=Tensor[(2, 704), uint64] */, %1107)
}

def @func_4782() -> Tensor[(2, 16, 3), float64] {
  %1108 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1108.0
}

def @func_2310(%var_2242: Tensor[(98), float64], %var_2255: Tensor[(2, 16, 3), float32]) -> (Tensor[(2, 16, 3), float32], Tensor[(2, 7, 7), float64], Tensor[(98), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), int32], Tensor[(8, 11, 16), int32], Tensor[(1408), uint64]) {
  %1109 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  %1110 = cast(%1109, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %1111 = erf(%1110) /* ty=Tensor[(2, 16, 3), float32] */;
  %1112 = cast(%1111, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %1113 = shape_of(%1109, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1114 = cast(%1109, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %1115 = dyn.reshape(%1112, %1113, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1116 = cast(%var_2242, dtype="float64") /* ty=Tensor[(98), float64] */;
  %1117 = cast(%var_2242, dtype="float64") /* ty=Tensor[(98), float64] */;
  %1118 = reshape(%1116, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %1119 = reshape(%1117, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %1120 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1121 = cast(%var_2255, dtype="int32") /* ty=Tensor[(2, 16, 3), int32] */;
  %1122 = shape_of(%1111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1123 = cast(%1111, dtype="int32") /* ty=Tensor[(2, 16, 3), int32] */;
  %1124 = dyn.reshape(%1121, %1122, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %1125 = cast(meta[relay.Constant][69] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1126 = reshape(%1125, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %1127 = @func_569(%1126) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %1128 = floor_mod(%1114, %1115) /* ty=Tensor[(2, 16, 3), float32] */;
  %1129 = @func_667(%1118, %1119) /* ty=Tensor[(2, 7, 7), float64] */;
  %1130 = %1120.0;
  %1131 = right_shift(%1123, %1124) /* ty=Tensor[(2, 16, 3), int32] */;
  %1132 = %1127.1;
  (%1128, %1129, %var_2242, %1130, %1131, %1132, meta[relay.Constant][69] /* ty=Tensor[(1408), uint64] */)
}

def @func_4174() -> (Tensor[(2, 16, 3), float64],) {
  %1133 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
  (%1133,)
}

def @func_9647() -> (Tensor[(2, 16, 3), float64],) {
  %1134 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1135 = %1134.0;
  (%1135,)
}

def @func_4913(%var_4873: Tensor[(75), float64]) -> (Tensor[(75), bool], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(1408), uint64]) {
  %1136 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %1137 = %1136.2;
  %1138 = cast(%var_4873, dtype="int64") /* ty=Tensor[(75), int64] */;
  %1139 = shape_of(%1137, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1140 = cast(%1137, dtype="int64") /* ty=Tensor[(75), int64] */;
  %1141 = dyn.reshape(%1138, %1139, newshape=[]) /* ty=Tensor[(?), int64] */;
  %1142 = right_shift(%1140, %1141) /* ty=Tensor[(75), int64] */;
  %1143 = cast(meta[relay.Constant][70] /* ty=Tensor[(75), int64] */, dtype="bool") /* ty=Tensor[(75), bool] */;
  %1144 = shape_of(%1142, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1145 = cast(%1142, dtype="bool") /* ty=Tensor[(75), bool] */;
  %1146 = dyn.reshape(%1143, %1144, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1147 = cast(meta[relay.Constant][71] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
  %1148 = reshape(%1147, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float64] */;
  %1149 = cast(meta[relay.Constant][72] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %1150 = cast(meta[relay.Constant][73] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1151 = reshape(%1149, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %1152 = reshape(%1150, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1153 = @func_1490(%1151, %1152) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %1154 = greater(%1145, %1146) /* ty=Tensor[(75), bool] */;
  %1155 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
  %1156 = @func_3194(%1148) /* ty=Tensor[(3, 4, 3), float64] */;
  %1157 = %1153.2;
  (%1154, %1155, %1156, meta[relay.Constant][71] /* ty=Tensor[(36), float64] */, %1157, meta[relay.Constant][72] /* ty=Tensor[(2100), float32] */, meta[relay.Constant][73] /* ty=Tensor[(1408), uint64] */)
}

def @func_9215() -> (Tensor[(1408), uint64], Tensor[(2, 7, 7), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64]) {
  %1158 = @func_8502() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) */;
  %1159 = @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %1160 = @func_5278() /* ty=(Tensor[(1408), uint64],) */;
  %1161 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1162 = %1158.1;
  %1163 = %1159.0;
  %1164 = %1160.0;
  %1165 = %1161.0;
  (%1162, %1163, %1164, %1165)
}

def @func_10596(%var_10574: Tensor[(8, 60), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 60), bool], Tensor[(4, 10, 12), float64]) {
  %1166 = @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */;
  %1167 = cast(%var_10574, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
  %1168 = reshape(%1167, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), bool] */;
  %1169 = @func_1587(%1168) /* ty=(Tensor[(4, 10, 12), bool],) */;
  %1170 = %1169.0;
  %1171 = cast(%1170, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
  %1172 = log2(%1171) /* ty=Tensor[(4, 10, 12), float32] */;
  %1173 = cast(%1172, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
  %1174 = %1166.0;
  %1175 = acos(%1173) /* ty=Tensor[(4, 10, 12), float64] */;
  (%1174, %var_10574, %1175)
}

def @func_8457() -> (Tensor[(1408), uint64],) {
  %1176 = @func_5173() /* ty=(Tensor[(1408), uint64],) */;
  %1177 = %1176.0;
  (%1177,)
}

def @func_3832(%var_3817: Tensor[(176, 8), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(176, 8), uint64], Tensor[(2, 16, 3), float64]) {
  %1178 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1179 = %1178.0;
  %1180 = cast(%1179, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %1181 = cast(meta[relay.Constant][74] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %1182 = cast(%var_3817, dtype="uint64") /* ty=Tensor[(176, 8), uint64] */;
  %1183 = reshape(%1180, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %1184 = reshape(%1181, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %1185 = reshape(%1182, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1186 = @func_2375(%1183, %1184, %1185) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) */;
  %1187 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %1188 = %1186.3;
  %1189 = %1187.0;
  (%1179, %1188, meta[relay.Constant][74] /* ty=Tensor[(2100), float32] */, %var_3817, %1189)
}

def @func_5521() -> Tensor[(2, 16, 3), float64] {
  %1190 = @func_5269() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1190.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2337() -> (Tensor[(2, 16, 3), float64],) {
  %0 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1 = %0.0;
  (%1,)
}

def @func_8374() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %5 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %2 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %3 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
    %4 = %2.0;
    (%3, %4)
  };
  %5() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_2693(%var_2691: Tensor[(480), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  %6 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %7 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %8 = cast(%var_2691, dtype="bool") /* ty=Tensor[(480), bool] */;
  %9 = reshape(%8, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), bool] */;
  %10 = @func_1587(%9) /* ty=(Tensor[(4, 10, 12), bool],) */;
  %11 = %6.0;
  %12 = %7.0;
  %13 = %10.0;
  (%11, %12, %13, %var_2691)
}

def @func_8458() -> (Tensor[(1408), uint64],) {
  %16 = fn () -> (Tensor[(1408), uint64],) {
    %14 = @func_5173() /* ty=(Tensor[(1408), uint64],) */;
    %15 = %14.0;
    (%15,)
  };
  %16() /* ty=(Tensor[(1408), uint64],) */
}

def @func_6876() -> (Tensor[(2, 16, 3), float64],) {
  %19 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %17 = @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %18 = %17.0;
    (%18,)
  };
  %19() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_2805(%var_2803: Tensor[(75), float64], %var_2804: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) {
  @func_2801(%var_2803, %var_2804) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) */
}

def @func_10065() -> Tensor[(2, 16, 3), float64] {
  %21 = fn () -> Tensor[(2, 16, 3), float64] {
    %20 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %20.0
  };
  %21() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_6018() -> (Tensor[(8, 11, 16), int32],) {
  @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */
}

def @func_4571() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_4569() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_11667(%var_11666: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(2, 7, 7), float64]) {
  %36 = fn (%var_11646: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(2, 7, 7), float64]) {
    %22 = cast(meta[relay.Constant][0] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %23 = reshape(%22, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %24 = @func_6257(%23) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */;
    %25 = cast(meta[relay.Constant][0] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
    %26 = cast(%var_11646, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %27 = reshape(%26, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %28 = @func_3391(%27) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
    %29 = @func_9503() /* ty=(Tensor[(2, 7, 7), float64],) */;
    %30 = @func_4782() /* ty=Tensor[(2, 16, 3), float64] */;
    %31 = @func_4782() /* ty=Tensor[(2, 16, 3), float64] */;
    %32 = %24.1;
    %33 = asin(%25) /* ty=Tensor[(648), float64] */;
    %34 = %28.4;
    %35 = %29.0;
    (%30, %31, %32, %33, %34, %var_11646, %35)
  };
  %36(%var_11666) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(2, 7, 7), float64]) */
}

def @func_4290() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_4288() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_2894(%var_2893: Tensor[(1, 2100), float32]) -> (Tensor[(75), uint32], Tensor[(1408), uint64], Tensor[(1, 2100), float32], Tensor[(1408), uint64]) {
  %52 = fn (%var_2888: Tensor[(1, 2100), float32]) -> (Tensor[(75), uint32], Tensor[(1408), uint64], Tensor[(1, 2100), float32], Tensor[(1408), uint64]) {
    %37 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
    %38 = %37.2;
    %39 = cast(%38, dtype="float32") /* ty=Tensor[(75), float32] */;
    %40 = tan(%39) /* ty=Tensor[(75), float32] */;
    %41 = cast(%38, dtype="uint32") /* ty=Tensor[(75), uint32] */;
    %42 = shape_of(%40, dtype="int32") /* ty=Tensor[(1), int32] */;
    %43 = cast(%40, dtype="uint32") /* ty=Tensor[(75), uint32] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %45 = cast(%var_2888, dtype="float32") /* ty=Tensor[(1, 2100), float32] */;
    %46 = cast(meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %47 = reshape(%45, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %48 = reshape(%46, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %49 = @func_1490(%47, %48) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
    %50 = bitwise_or(%43, %44) /* ty=Tensor[(75), uint32] */;
    %51 = %49.2;
    (%50, %51, %var_2888, meta[relay.Constant][1] /* ty=Tensor[(1408), uint64] */)
  };
  %52(%var_2893) /* ty=(Tensor[(75), uint32], Tensor[(1408), uint64], Tensor[(1, 2100), float32], Tensor[(1408), uint64]) */
}

def @func_11444() -> Tensor[(55), float32] {
  @func_11442() /* ty=Tensor[(55), float32] */
}

def @func_2696(%var_2694: Tensor[(480), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  @func_2693(%var_2694) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */
}

def @func_10997() -> (Tensor[(2, 16, 3), float64], Tensor[(150, 14), float32]) {
  %58 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(150, 14), float32]) {
    %53 = @func_10957() /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(715), float32], Tensor[(120), float32], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(150, 14), float32], Tensor[(1408), uint64]) */;
    %54 = %53.7;
    %55 = cast(%54, dtype="float32") /* ty=Tensor[(150, 14), float32] */;
    %56 = @func_8708() /* ty=Tensor[(2, 16, 3), float64] */;
    %57 = cos(%55) /* ty=Tensor[(150, 14), float32] */;
    (%56, %57)
  };
  %58() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(150, 14), float32]) */
}

def @func_8749(%var_8748: Tensor[(616), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(11, 4, 14), bool]) {
  %69 = fn (%var_8726: Tensor[(616), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(11, 4, 14), bool]) {
    %59 = cast(%var_8726, dtype="float64") /* ty=Tensor[(616), float64] */;
    %60 = reshape(%59, newshape=[11, 4, 14]) /* ty=Tensor[(11, 4, 14), float64] */;
    %61 = @func_4859(%60) /* ty=(Tensor[(11, 4, 14), float64],) */;
    %62 = %61.0;
    %63 = cast(%var_8726, dtype="bool") /* ty=Tensor[(616), bool] */;
    %64 = shape_of(%62, dtype="int32") /* ty=Tensor[(3), int32] */;
    %65 = cast(%62, dtype="bool") /* ty=Tensor[(11, 4, 14), bool] */;
    %66 = dyn.reshape(%63, %64, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %67 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
    %68 = logical_or(%65, %66) /* ty=Tensor[(11, 4, 14), bool] */;
    (%67, %68)
  };
  %69(%var_8748) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(11, 4, 14), bool]) */
}

def @func_10364() -> Tensor[(2, 16, 3), float64] {
  %71 = fn () -> Tensor[(2, 16, 3), float64] {
    %70 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %70.0
  };
  %71() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_7547() -> Tensor[(2, 16, 3), float64] {
  @func_7545() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_2380(%var_2377: Tensor[(2, 16, 3), float64], %var_2378: Tensor[(2100), float32], %var_2379: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) {
  @func_2375(%var_2377, %var_2378, %var_2379) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) */
}

def @func_8615(%var_8613: Tensor[(98, 1), float64], %var_8614: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(98, 1), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], int64, Tensor[(75), float64]) {
  @func_8611(%var_8613, %var_8614) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(98, 1), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], int64, Tensor[(75), float64]) */
}

def @func_7902(%var_7900: Tensor[(1408), uint64], %var_7901: Tensor[(1, 55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(88, 16), float32], Tensor[(1408), uint64], Tensor[(1, 55), int32], Tensor[(715), int32]) {
  %86 = fn (%var_7894: Tensor[(1408), uint64], %var_7895: Tensor[(1, 55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(88, 16), float32], Tensor[(1408), uint64], Tensor[(1, 55), int32], Tensor[(715), int32]) {
    %72 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %73 = cast(%var_7894, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %74 = cast(%var_7894, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %75 = cast(%var_7894, dtype="uint8") /* ty=Tensor[(1408), uint8] */;
    %76 = cast(%var_7895, dtype="int32") /* ty=Tensor[(1, 55), int32] */;
    %77 = cast(meta[relay.Constant][2] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %78 = reshape(%73, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %79 = reshape(%74, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
    %80 = reshape(%75, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint8] */;
    %81 = reshape(%76, newshape=[55]) /* ty=Tensor[(55), int32] */;
    %82 = reshape(%77, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %83 = @func_3922(%78, %79, %80, %81, %82) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(189, 3), int8], Tensor[(1408), uint64], Tensor[(88, 16), bool], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(88, 16), float32]) */;
    %84 = %72.0;
    %85 = %83.7;
    (%84, %85, %var_7894, %var_7895, meta[relay.Constant][2] /* ty=Tensor[(715), int32] */)
  };
  %86(%var_7900, %var_7901) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(88, 16), float32], Tensor[(1408), uint64], Tensor[(1, 55), int32], Tensor[(715), int32]) */
}

def @func_6809() -> (Tensor[(2, 16, 3), float64],) {
  %89 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %87 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %88 = %87.0;
    (%88,)
  };
  %89() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_10453() -> (Tensor[(8, 11, 16), int32], Tensor[(2, 16, 3), float64]) {
  @func_10451() /* ty=(Tensor[(8, 11, 16), int32], Tensor[(2, 16, 3), float64]) */
}

def @func_9379() -> (Tensor[(9, 11, 15), int8], Tensor[(2, 16, 3), float64]) {
  @func_9377() /* ty=(Tensor[(9, 11, 15), int8], Tensor[(2, 16, 3), float64]) */
}

def @func_4442(%var_4436: Tensor[(3, 1, 14), float32], %var_4437: Tensor[(3, 3, 14), float32], %var_4438: Tensor[(1408), uint64], %var_4439: Tensor[(715), int32], %var_4440: Tensor[(3, 1, 14), float32], %var_4441: Tensor[(36), float64]) -> (Tensor[(3, 3, 14), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(715), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(3, ?, 14), float64], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64]) {
  @func_4434(%var_4436, %var_4437, %var_4438, %var_4439, %var_4440, %var_4441) /* ty=(Tensor[(3, 3, 14), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(715), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(3, ?, 14), float64], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64]) */
}

def @func_2959(%var_2938: Tensor[(567), int8], %var_2939: Tensor[(22, 64), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32], Tensor[(88, 16), uint64], Tensor[(567), int8], Tensor[(22, 64), uint64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  %90 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %91 = cast(meta[relay.Constant][3] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %92 = cast(meta[relay.Constant][3] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %93 = cast(meta[relay.Constant][4] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %94 = reshape(%91, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %95 = reshape(%92, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %96 = reshape(%93, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %97 = @func_1402(%94, %95, %96) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %98 = cast(%var_2938, dtype="int8") /* ty=Tensor[(567), int8] */;
  %99 = cast(%var_2939, dtype="uint64") /* ty=Tensor[(22, 64), uint64] */;
  %100 = reshape(%98, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %101 = reshape(%99, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %102 = @func_694(%100, %101) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %103 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %104 = reshape(%103, newshape=[480]) /* ty=Tensor[(480), bool] */;
  %105 = @func_2693(%104) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %106 = %90.0;
  %107 = %97.4;
  %108 = %102.2;
  %109 = %105.2;
  (%106, %107, meta[relay.Constant][3] /* ty=Tensor[(120), float32] */, meta[relay.Constant][4] /* ty=Tensor[(715), int32] */, %108, %var_2938, %var_2939, %109, meta[relay.Constant][5] /* ty=Tensor[(480), bool] */)
}

def @func_6601(%var_6600: Tensor[(2100), float32]) -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), uint32]) {
  %123 = fn (%var_6582: Tensor[(2100), float32]) -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), uint32]) {
    %110 = @func_5412() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %111 = cast(%var_6582, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %113 = reshape(%111, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %114 = reshape(%112, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %115 = @func_2596(%113, %114) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) */;
    %116 = %115.1;
    %117 = cast(%var_6582, dtype="uint32") /* ty=Tensor[(2100), uint32] */;
    %118 = shape_of(%116, dtype="int32") /* ty=Tensor[(1), int32] */;
    %119 = cast(%116, dtype="uint32") /* ty=Tensor[(2100), uint32] */;
    %120 = dyn.reshape(%117, %118, newshape=[]) /* ty=Tensor[(?), uint32] */;
    %121 = %110.0;
    %122 = right_shift(%119, %120) /* ty=Tensor[(2100), uint32] */;
    (%121, meta[relay.Constant][6] /* ty=Tensor[(1408), uint64] */, %122)
  };
  %123(%var_6600) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), uint32]) */
}

def @func_3104() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) {
  %124 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %125 = cast(meta[relay.Constant][7] /* ty=Tensor[(1050, 2), float32] */, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %126 = cast(meta[relay.Constant][8] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %127 = reshape(%125, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
  %128 = reshape(%126, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %129 = @func_2596(%127, %128) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) */;
  %130 = %124.0;
  %131 = %129.4;
  (%130, %131, meta[relay.Constant][7] /* ty=Tensor[(1050, 2), float32] */, meta[relay.Constant][8] /* ty=Tensor[(1408), uint64] */)
}

def @func_9024() -> Tensor[(1408), uint64] {
  @func_9022() /* ty=Tensor[(1408), uint64] */
}

def @func_10598(%var_10597: Tensor[(8, 60), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 60), bool], Tensor[(4, 10, 12), float64]) {
  %142 = fn (%var_10574: Tensor[(8, 60), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 60), bool], Tensor[(4, 10, 12), float64]) {
    %132 = @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */;
    %133 = cast(%var_10574, dtype="bool") /* ty=Tensor[(8, 60), bool] */;
    %134 = reshape(%133, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), bool] */;
    %135 = @func_1587(%134) /* ty=(Tensor[(4, 10, 12), bool],) */;
    %136 = %135.0;
    %137 = cast(%136, dtype="float32") /* ty=Tensor[(4, 10, 12), float32] */;
    %138 = log2(%137) /* ty=Tensor[(4, 10, 12), float32] */;
    %139 = cast(%138, dtype="float64") /* ty=Tensor[(4, 10, 12), float64] */;
    %140 = %132.0;
    %141 = acos(%139) /* ty=Tensor[(4, 10, 12), float64] */;
    (%140, %var_10574, %141)
  };
  %142(%var_10597) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 60), bool], Tensor[(4, 10, 12), float64]) */
}

def @func_4804(%var_4802: Tensor[(189, 3), int8], %var_4803: Tensor[(1408, 1), uint64]) -> (Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) {
  %156 = fn (%var_4787: Tensor[(189, 3), int8], %var_4788: Tensor[(1408, 1), uint64]) -> (Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) {
    %143 = cast(%var_4787, dtype="int8") /* ty=Tensor[(189, 3), int8] */;
    %144 = cast(%var_4788, dtype="uint64") /* ty=Tensor[(1408, 1), uint64] */;
    %145 = reshape(%143, newshape=[567]) /* ty=Tensor[(567), int8] */;
    %146 = reshape(%144, newshape=[22, 64]) /* ty=Tensor[(22, 64), uint64] */;
    %147 = @func_2959(%145, %146) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32], Tensor[(88, 16), uint64], Tensor[(567), int8], Tensor[(22, 64), uint64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
    %148 = %147.0;
    %149 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
    %150 = %149.0;
    %151 = cast(%150, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %152 = shape_of(%148, dtype="int32") /* ty=Tensor[(3), int32] */;
    %153 = cast(%148, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %154 = dyn.reshape(%151, %152, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %155 = power(%153, %154) /* ty=Tensor[(2, 16, 3), float64] */;
    (%var_4787, %var_4788, %155)
  };
  %156(%var_4802, %var_4803) /* ty=(Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) */
}

def @func_7058() -> Tensor[(2, 16, 3), float64] {
  %157 = @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %157.0
}

def @func_5042() -> (Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) {
  %158 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %159 = @func_4324() /* ty=(Tensor[(480), bool],) */;
  %160 = %158.0;
  %161 = %159.0;
  %162 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  (%160, %161, %162)
}

def @func_5824() -> (Tensor[(2, 16, 3), float64],) {
  %165 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %163 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %164 = %163.0;
    (%164,)
  };
  %165() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_8940() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %166 = @func_8373() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %167 = @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %168 = %166.1;
  %169 = %167.0;
  (%168, %169)
}

def @func_7545() -> Tensor[(2, 16, 3), float64] {
  @func_4574() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_8513() -> (Tensor[(2, 7, 7), float64],) {
  %170 = @func_8317() /* ty=(Tensor[(480), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %171 = %170.1;
  (%171,)
}

def @func_7197() -> Tensor[(2, 16, 3), float64] {
  %172 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %172.0
}

def @func_8942() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_8940() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_7449(%var_7448: Tensor[(8, 11, 16), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64], Tensor[(8, 11, 16), float32]) {
  %184 = fn (%var_7419: Tensor[(8, 11, 16), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64], Tensor[(8, 11, 16), float32]) {
    %173 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %174 = cast(meta[relay.Constant][9] /* ty=Tensor[(2, 704), uint64] */, dtype="uint64") /* ty=Tensor[(2, 704), uint64] */;
    %175 = reshape(%174, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
    %176 = @func_569(%175) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
    %177 = %176.1;
    %178 = cast(%var_7419, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
    %179 = shape_of(%177, dtype="int32") /* ty=Tensor[(3), int32] */;
    %180 = cast(%177, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
    %181 = dyn.reshape(%178, %179, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %182 = %173.0;
    %183 = divide(%180, %181) /* ty=Tensor[(8, 11, 16), float32] */;
    (%182, meta[relay.Constant][9] /* ty=Tensor[(2, 704), uint64] */, %183)
  };
  %184(%var_7448) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64], Tensor[(8, 11, 16), float32]) */
}

def @func_10225() -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32]) {
  %185 = @func_6854() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) */;
  %186 = @func_5057() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %187 = %185.0;
  %188 = %186.0;
  (%187, %188)
}

def @func_9649() -> (Tensor[(2, 16, 3), float64],) {
  @func_9647() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_6086() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %193 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %189 = @func_5680() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %190 = @func_5269() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %191 = %189.0;
    %192 = %190.0;
    (%191, %192)
  };
  %193() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_8397(%var_8393: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(75), float64]) {
  %194 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %195 = cast(%var_8393, dtype="float64") /* ty=Tensor[(75), float64] */;
  %196 = cast(%var_8393, dtype="float64") /* ty=Tensor[(75), float64] */;
  %197 = reshape(%195, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %198 = reshape(%196, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %199 = @func_2801(%197, %198) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) */;
  %200 = @func_3304() /* ty=Tensor[(2, 16, 3), float64] */;
  %201 = %194.0;
  %202 = %199.2;
  (%200, %201, %202, %var_8393)
}

def @func_2375(%var_2360: Tensor[(2, 16, 3), float64], %var_2369: Tensor[(2100), float32], %var_2370: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) {
  %203 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %204 = %203.0;
  %205 = cast(%var_2360, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
  %207 = cast(%204, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %209 = cast(%var_2369, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %210 = cast(%var_2370, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %211 = reshape(%209, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %212 = reshape(%210, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %213 = @func_1490(%211, %212) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %214 = logical_and(%207, %208) /* ty=Tensor[(2, 16, 3), bool] */;
  %215 = %213.0;
  (%214, %215, %var_2369, %var_2370)
}

def @func_6714() -> (Tensor[(2, 16, 3), float64],) {
  @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_7009() -> Tensor[(2, 16, 3), float64] {
  %216 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %216.0
}

def @func_10451() -> (Tensor[(8, 11, 16), int32], Tensor[(2, 16, 3), float64]) {
  %217 = @func_10225() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32]) */;
  %218 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
  %219 = %217.1;
  %220 = %218.1;
  (%219, %220)
}

def @func_2963(%var_2961: Tensor[(567), int8], %var_2962: Tensor[(22, 64), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32], Tensor[(88, 16), uint64], Tensor[(567), int8], Tensor[(22, 64), uint64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  @func_2959(%var_2961, %var_2962) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32], Tensor[(88, 16), uint64], Tensor[(567), int8], Tensor[(22, 64), uint64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */
}

def @func_6001() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_5999() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_814(%var_812: Tensor[(1, 11, 5), int32], %var_813: Tensor[(13, 11, 5), int32]) -> (Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) {
  @func_810(%var_812, %var_813) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */
}

def @func_10834(%var_10832: Tensor[(2, 7, 7), float64]) -> (Tensor[(2, 7, 7), float32], Tensor[(2, 16, 3), float64]) {
  @func_10831(%var_10832) /* ty=(Tensor[(2, 7, 7), float32], Tensor[(2, 16, 3), float64]) */
}

def @func_10335(%var_10334: Tensor[(9, 9, 15), float32]) -> (Tensor[(9, 9, 15), int8],) {
  %235 = fn (%var_10291: Tensor[(9, 9, 15), float32]) -> (Tensor[(9, 9, 15), int8],) {
    %221 = cast(%var_10291, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
    %222 = erf(%221) /* ty=Tensor[(9, 9, 15), float32] */;
    %223 = cast(%222, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
    %224 = sigmoid(%223) /* ty=Tensor[(9, 9, 15), float32] */;
    %225 = cast(%222, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
    %226 = shape_of(%var_10291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %227 = cast(%var_10291, dtype="float32") /* ty=Tensor[(9, 9, 15), float32] */;
    %228 = dyn.reshape(%225, %226, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %229 = power(%227, %228) /* ty=Tensor[(9, 9, 15), float32] */;
    %230 = cast(%229, dtype="int8") /* ty=Tensor[(9, 9, 15), int8] */;
    %231 = shape_of(%224, dtype="int32") /* ty=Tensor[(3), int32] */;
    %232 = cast(%224, dtype="int8") /* ty=Tensor[(9, 9, 15), int8] */;
    %233 = dyn.reshape(%230, %231, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %234 = logical_xor(%232, %233) /* ty=Tensor[(9, 9, 15), int8] */;
    (%234,)
  };
  %235(%var_10334) /* ty=(Tensor[(9, 9, 15), int8],) */
}

def @func_10656() -> (Tensor[(2, 16, 3), float64], Tensor[(72), float64], Tensor[(648), float64]) {
  %236 = @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */;
  %237 = cast(meta[relay.Constant][10] /* ty=Tensor[(648), float64] */, dtype="float64") /* ty=Tensor[(648), float64] */;
  %238 = reshape(%237, newshape=[648]) /* ty=Tensor[(648), float64] */;
  %239 = @func_6257(%238) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */;
  %240 = %236.2;
  %241 = %239.2;
  (%240, %241, meta[relay.Constant][10] /* ty=Tensor[(648), float64] */)
}

def @func_3834(%var_3833: Tensor[(176, 8), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(176, 8), uint64], Tensor[(2, 16, 3), float64]) {
  %254 = fn (%var_3817: Tensor[(176, 8), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(176, 8), uint64], Tensor[(2, 16, 3), float64]) {
    %242 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %243 = %242.0;
    %244 = cast(%243, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %245 = cast(meta[relay.Constant][11] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %246 = cast(%var_3817, dtype="uint64") /* ty=Tensor[(176, 8), uint64] */;
    %247 = reshape(%244, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
    %248 = reshape(%245, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %249 = reshape(%246, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %250 = @func_2375(%247, %248, %249) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) */;
    %251 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
    %252 = %250.3;
    %253 = %251.0;
    (%243, %252, meta[relay.Constant][11] /* ty=Tensor[(2100), float32] */, %var_3817, %253)
  };
  %254(%var_3833) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(176, 8), uint64], Tensor[(2, 16, 3), float64]) */
}

def @func_5057() -> (Tensor[(8, 11, 16), int32],) {
  %255 = @func_3962() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) */;
  %256 = %255.1;
  (%256,)
}

def @func_11119() -> (Tensor[(8, 11, 16), float32],) {
  %257 = @func_9293() /* ty=Tensor[(8, 11, 16), float32] */;
  (%257,)
}

def @func_6854() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) {
  %258 = @func_6485() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408, 1), uint64], Tensor[(9, 63), int8], Tensor[(2, 704), uint64]) */;
  %259 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  %260 = %258.3;
  (%259, %260)
}

def @func_6486() -> (Tensor[(2, 16, 3), float64], Tensor[(1408, 1), uint64], Tensor[(9, 63), int8], Tensor[(2, 704), uint64]) {
  %268 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(1408, 1), uint64], Tensor[(9, 63), int8], Tensor[(2, 704), uint64]) {
    %261 = cast(meta[relay.Constant][12] /* ty=Tensor[(9, 63), int8] */, dtype="int8") /* ty=Tensor[(9, 63), int8] */;
    %262 = cast(meta[relay.Constant][13] /* ty=Tensor[(2, 704), uint64] */, dtype="uint64") /* ty=Tensor[(2, 704), uint64] */;
    %263 = reshape(%261, newshape=[189, 3]) /* ty=Tensor[(189, 3), int8] */;
    %264 = reshape(%262, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
    %265 = @func_4801(%263, %264) /* ty=(Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) */;
    %266 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
    %267 = %265.1;
    (%266, %267, meta[relay.Constant][12] /* ty=Tensor[(9, 63), int8] */, meta[relay.Constant][13] /* ty=Tensor[(2, 704), uint64] */)
  };
  %268() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408, 1), uint64], Tensor[(9, 63), int8], Tensor[(2, 704), uint64]) */
}

def @func_9022() -> Tensor[(1408), uint64] {
  %269 = @func_8502() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) */;
  %269.2
}

def @func_2838() -> (Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) {
  %270 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %271 = cast(meta[relay.Constant][14] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %272 = cast(meta[relay.Constant][15] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %273 = reshape(%271, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %274 = reshape(%272, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %275 = @func_2212(%273, %274) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %276 = %270.0;
  %277 = %275.2;
  (%276, %277, meta[relay.Constant][14] /* ty=Tensor[(75), float64] */, meta[relay.Constant][15] /* ty=Tensor[(1408), uint64] */)
}

def @func_5883(%var_5881: Tensor[(9, 1, 8), float64], %var_5882: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) {
  %298 = fn (%var_5836: Tensor[(9, 1, 8), float64], %var_5843: Tensor[(9, 9, 8), float64]) -> (Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) {
    %278 = cast(%var_5836, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %279 = cast(%var_5843, dtype="bool") /* ty=Tensor[(9, 9, 8), bool] */;
    %280 = cast(%var_5836, dtype="float64") /* ty=Tensor[(9, 1, 8), float64] */;
    %281 = sin(%280) /* ty=Tensor[(9, 1, 8), float64] */;
    %282 = cast(%281, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
    %283 = shape_of(%var_5836, dtype="int32") /* ty=Tensor[(3), int32] */;
    %284 = cast(%var_5836, dtype="uint8") /* ty=Tensor[(9, 1, 8), uint8] */;
    %285 = dyn.reshape(%282, %283, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %286 = minimum(%284, %285) /* ty=Tensor[(9, ?, 8), uint8] */;
    %287 = cast(%281, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %288 = shape_of(%286, dtype="int32") /* ty=Tensor[(3), int32] */;
    %289 = cast(%286, dtype="bool") /* ty=Tensor[(9, ?, 8), bool] */;
    %290 = dyn.reshape(%287, %288, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %291 = not_equal(%289, %290) /* ty=Tensor[(9, ?, 8), bool] */;
    %292 = cast(%281, dtype="bool") /* ty=Tensor[(9, 1, 8), bool] */;
    %293 = shape_of(%291, dtype="int32") /* ty=Tensor[(3), int32] */;
    %294 = cast(%291, dtype="bool") /* ty=Tensor[(9, ?, 8), bool] */;
    %295 = dyn.reshape(%292, %293, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %296 = not_equal(%278, %279) /* ty=Tensor[(9, 9, 8), bool] */;
    %297 = equal(%294, %295) /* ty=Tensor[(9, ?, 8), bool] */;
    (%296, %297)
  };
  %298(%var_5881, %var_5882) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) */
}

def @func_7391() -> Tensor[(2, 16, 3), float64] {
  @func_7389() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_4471() -> (Tensor[(1408), uint64],) {
  @func_4469() /* ty=(Tensor[(1408), uint64],) */
}

def @func_6895() -> Tensor[(480), bool] {
  %300 = fn () -> Tensor[(480), bool] {
    %299 = @func_4324() /* ty=(Tensor[(480), bool],) */;
    %299.0
  };
  %300() /* ty=Tensor[(480), bool] */
}

def @func_10740(%var_10735: Tensor[(1, 10, 4), float64]) -> Tensor[(1, 10, 4), float64] {
  %301 = cast(%var_10735, dtype="float64") /* ty=Tensor[(1, 10, 4), float64] */;
  sinh(%301) /* ty=Tensor[(1, 10, 4), float64] */
}

def @func_3147() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) {
  %310 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) {
    %302 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %303 = cast(meta[relay.Constant][16] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
    %304 = %302.0;
    %305 = cast(%304, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
    %306 = reshape(%303, newshape=[98]) /* ty=Tensor[(98), float64] */;
    %307 = reshape(%305, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float32] */;
    %308 = @func_2310(%306, %307) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 7, 7), float64], Tensor[(98), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), int32], Tensor[(8, 11, 16), int32], Tensor[(1408), uint64]) */;
    %309 = %308.3;
    (%304, %309, meta[relay.Constant][16] /* ty=Tensor[(98), float64] */)
  };
  %310() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */
}

def @func_5540() -> (Tensor[(2, 16, 3), float64],) {
  %311 = @func_5521() /* ty=Tensor[(2, 16, 3), float64] */;
  (%311,)
}

def @func_6444() -> (Tensor[(2, 16, 3), float64],) {
  %312 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  (%312,)
}

def @func_6856() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) {
  @func_6854() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) */
}

def @func_9692(%var_9690: Tensor[(1, 55), int32], %var_9691: Tensor[(9, 55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, 55), uint32]) {
  %324 = fn (%var_9655: Tensor[(1, 55), int32], %var_9677: Tensor[(9, 55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, 55), uint32]) {
    %313 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %314 = cast(%var_9655, dtype="int32") /* ty=Tensor[(1, 55), int32] */;
    %315 = reshape(%314, newshape=[55]) /* ty=Tensor[(55), int32] */;
    %316 = @func_6633(%315) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32]) */;
    %317 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %318 = cast(%var_9655, dtype="uint32") /* ty=Tensor[(1, 55), uint32] */;
    %319 = cast(%var_9677, dtype="uint32") /* ty=Tensor[(9, 55), uint32] */;
    %320 = %313.0;
    %321 = %316.0;
    %322 = %317.0;
    %323 = add(%318, %319) /* ty=Tensor[(9, 55), uint32] */;
    (%320, %321, %322, %323)
  };
  %324(%var_9690, %var_9691) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, 55), uint32]) */
}

def @func_2158() -> Tensor[(2, 16, 3), float64] {
  @func_2156() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_11713(%var_11711: uint16, %var_11712: Tensor[(2, 3, 10), uint16]) -> (Tensor[(2, 3, 10), bool], Tensor[(2, 16, 3), float64]) {
  %330 = fn (%var_11690: uint16, %var_11691: Tensor[(2, 3, 10), uint16]) -> (Tensor[(2, 3, 10), bool], Tensor[(2, 16, 3), float64]) {
    %325 = cast(%var_11690, dtype="bool") /* ty=bool */;
    %326 = cast(%var_11691, dtype="bool") /* ty=Tensor[(2, 3, 10), bool] */;
    %327 = @func_8057() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
    %328 = greater(%325, %326) /* ty=Tensor[(2, 3, 10), bool] */;
    %329 = %327.0;
    (%328, %329)
  };
  %330(%var_11711, %var_11712) /* ty=(Tensor[(2, 3, 10), bool], Tensor[(2, 16, 3), float64]) */
}

def @func_8058() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %334 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %331 = @func_5999() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
    %332 = @func_7058() /* ty=Tensor[(2, 16, 3), float64] */;
    %333 = %331.1;
    (%332, %333)
  };
  %334() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_10867() -> Tensor[(2, 16, 3), float64] {
  %335 = fn () -> Tensor[(2, 16, 3), float64] {
    @func_4021() /* ty=Tensor[(2, 16, 3), float64] */
  };
  %335() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_2599(%var_2597: Tensor[(2100), float32], %var_2598: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) {
  %352 = fn (%var_2581: Tensor[(2100), float32], %var_2582: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) {
    %336 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %337 = %336.0;
    %338 = cast(%337, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %339 = cast(%var_2581, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %340 = cast(%var_2582, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %341 = reshape(%338, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
    %342 = reshape(%339, newshape=[2100]) /* ty=Tensor[(2100), float32] */;
    %343 = reshape(%340, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %344 = @func_2375(%341, %342, %343) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(15, 10, 14), float32], Tensor[(2100), float32], Tensor[(1408), uint64]) */;
    %345 = cast(meta[relay.Constant][17] /* ty=Tensor[(2, 16, 3), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
    %346 = shape_of(%337, dtype="int32") /* ty=Tensor[(3), int32] */;
    %347 = cast(%337, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
    %348 = dyn.reshape(%345, %346, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %349 = %344.0;
    %350 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
    %351 = less_equal(%347, %348) /* ty=Tensor[(2, 16, 3), bool] */;
    (%349, %var_2581, %var_2582, %350, %351)
  };
  %352(%var_2597, %var_2598) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool]) */
}

def @func_4147() -> Tensor[(2, 16, 3), float64] {
  %353 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %353.0
}

def @func_9647() -> (Tensor[(2, 16, 3), float64],) {
  %354 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %355 = %354.0;
  (%355,)
}

def @func_7589() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_5681() -> (Tensor[(2, 16, 3), float64],) {
  %358 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %356 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %357 = %356.0;
    (%357,)
  };
  %358() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_10254() -> (Tensor[(480), bool], Tensor[(2, 16, 3), float64]) {
  @func_10252() /* ty=(Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */
}

def @func_4862(%var_4860: Tensor[(11, 4, 14), float64]) -> (Tensor[(11, 4, 14), float64],) {
  @func_4859(%var_4860) /* ty=(Tensor[(11, 4, 14), float64],) */
}

def @func_6259(%var_6258: Tensor[(648), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) {
  %368 = fn (%var_6237: Tensor[(648), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) {
    %359 = cast(meta[relay.Constant][18] /* ty=Tensor[(72), float64] */, dtype="float64") /* ty=Tensor[(72), float64] */;
    %360 = cast(%var_6237, dtype="float64") /* ty=Tensor[(648), float64] */;
    %361 = reshape(%359, newshape=[9, 1, 8]) /* ty=Tensor[(9, 1, 8), float64] */;
    %362 = reshape(%360, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
    %363 = @func_5880(%361, %362) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) */;
    %364 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
    %365 = @func_6107() /* ty=Tensor[(2, 16, 3), float64] */;
    %366 = %363.1;
    %367 = %364.2;
    (%365, %366, meta[relay.Constant][18] /* ty=Tensor[(72), float64] */, %var_6237, %367)
  };
  %368(%var_6258) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */
}

def @func_8148() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_8146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_3393(%var_3392: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) {
  %379 = fn (%var_3349: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) {
    %369 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %370 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
    %371 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %372 = cast(%var_3349, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %373 = reshape(%372, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
    %374 = @func_569(%373) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
    %375 = %369.0;
    %376 = %370.1;
    %377 = %371.0;
    %378 = %374.0;
    (%375, %376, %377, %378, %var_3349)
  };
  %379(%var_3392) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */
}

def @func_4999() -> Tensor[(2, 16, 3), float64] {
  %380 = fn () -> Tensor[(2, 16, 3), float64] {
    @func_4574() /* ty=Tensor[(2, 16, 3), float64] */
  };
  %380() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_10252() -> (Tensor[(480), bool], Tensor[(2, 16, 3), float64]) {
  %381 = @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */;
  %382 = %381.1;
  %383 = @func_6527() /* ty=Tensor[(2, 16, 3), float64] */;
  (%382, %383)
}

def @func_8221() -> (Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(55), int32], Tensor[(13, ?, 16), int64]) {
  %397 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(55), int32], Tensor[(13, ?, 16), int64]) {
    %384 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %385 = cast(meta[relay.Constant][19] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
    %386 = reshape(%385, newshape=[55]) /* ty=Tensor[(55), int32] */;
    %387 = @func_4109(%386) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */;
    %388 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 1, 16), float32] */, dtype="float32") /* ty=Tensor[(13, 1, 16), float32] */;
    %389 = log10(%388) /* ty=Tensor[(13, 1, 16), float32] */;
    %390 = cast(meta[relay.Constant][20] /* ty=Tensor[(13, 1, 16), float32] */, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
    %391 = shape_of(%389, dtype="int32") /* ty=Tensor[(3), int32] */;
    %392 = cast(%389, dtype="int64") /* ty=Tensor[(13, 1, 16), int64] */;
    %393 = dyn.reshape(%390, %391, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %394 = %384.0;
    %395 = %387.3;
    %396 = multiply(%392, %393) /* ty=Tensor[(13, ?, 16), int64] */;
    (%394, %395, meta[relay.Constant][19] /* ty=Tensor[(55), int32] */, %396)
  };
  %397() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(55), int32], Tensor[(13, ?, 16), int64]) */
}

def @func_6528() -> Tensor[(2, 16, 3), float64] {
  %399 = fn () -> Tensor[(2, 16, 3), float64] {
    %398 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %398.0
  };
  %399() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_2566(%var_2565: Tensor[(189, 3), int8]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(88, 16), uint64], Tensor[(189, 3), int8], Tensor[(567), int8], Tensor[(715), int32]) {
  %431 = fn (%var_2552: Tensor[(189, 3), int8]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(88, 16), uint64], Tensor[(189, 3), int8], Tensor[(567), int8], Tensor[(715), int32]) {
    %400 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %401 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %402 = %401.0;
    %403 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 16, 3), float64] */, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
    %404 = shape_of(%402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %405 = cast(%402, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
    %406 = dyn.reshape(%403, %404, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %407 = greater(%405, %406) /* ty=Tensor[(2, 16, 3), bool] */;
    %408 = cast(%407, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %409 = cast(meta[relay.Constant][22] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
    %410 = cast(meta[relay.Constant][23] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %411 = reshape(%409, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %412 = reshape(%410, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
    %413 = @func_2212(%411, %412) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
    %414 = cast(%var_2552, dtype="int8") /* ty=Tensor[(189, 3), int8] */;
    %415 = %413.1;
    %416 = cast(%415, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
    %417 = reshape(%414, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
    %418 = reshape(%416, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
    %419 = @func_694(%417, %418) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
    %420 = cast(meta[relay.Constant][22] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
    %421 = cast(%415, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
    %422 = cast(meta[relay.Constant][24] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %423 = reshape(%420, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
    %424 = reshape(%421, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %425 = reshape(%422, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %426 = @func_1857(%423, %424, %425) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
    %427 = %400.0;
    %428 = atan(%408) /* ty=Tensor[(2, 16, 3), float64] */;
    %429 = %419.2;
    %430 = %426.6;
    (%427, %428, %415, meta[relay.Constant][22] /* ty=Tensor[(75), float64] */, meta[relay.Constant][23] /* ty=Tensor[(1408), uint64] */, %429, %var_2552, %430, meta[relay.Constant][24] /* ty=Tensor[(715), int32] */)
  };
  %431(%var_2565) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(88, 16), uint64], Tensor[(189, 3), int8], Tensor[(567), int8], Tensor[(715), int32]) */
}

def @func_2746(%var_2724: Tensor[(2, 16, 3), float64], %var_2731: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) {
  %432 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %433 = %432.0;
  %434 = cast(%var_2724, dtype="uint16") /* ty=Tensor[(2, 16, 3), uint16] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="uint16") /* ty=Tensor[(2, 16, 3), uint16] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %438 = cast(meta[relay.Constant][25] /* ty=Tensor[(2100, 1), float32] */, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
  %439 = cast(%var_2731, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %440 = reshape(%438, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %441 = reshape(%439, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %442 = @func_1490(%440, %441) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %443 = bitwise_and(%436, %437) /* ty=Tensor[(2, 16, 3), uint16] */;
  %444 = %442.0;
  (%443, %444, meta[relay.Constant][25] /* ty=Tensor[(2100, 1), float32] */, %var_2731)
}

def @func_10503() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %449 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %445 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %446 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %447 = %445.0;
    %448 = %446.0;
    (%447, %448)
  };
  %449() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_10376() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %454 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %450 = @func_9647() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %451 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %452 = %450.0;
    %453 = %451.0;
    (%452, %453)
  };
  %454() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_10959() -> (Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(715), float32], Tensor[(120), float32], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(150, 14), float32], Tensor[(1408), uint64]) {
  @func_10957() /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(715), float32], Tensor[(120), float32], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(150, 14), float32], Tensor[(1408), uint64]) */
}

def @func_11749() -> (Tensor[(1408), uint64],) {
  %455 = @func_5173() /* ty=(Tensor[(1408), uint64],) */;
  %456 = %455.0;
  (%456,)
}

def @func_8146() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %457 = @func_5999() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %458 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %459 = %457.0;
  %460 = %458.0;
  (%459, %460)
}

def @func_7587() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %461 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
  %462 = @func_6107() /* ty=Tensor[(2, 16, 3), float64] */;
  (%461, %462)
}

def @func_1589(%var_1588: Tensor[(4, 10, 12), bool]) -> (Tensor[(4, 10, 12), bool],) {
  %468 = fn (%var_1582: Tensor[(4, 10, 12), bool]) -> (Tensor[(4, 10, 12), bool],) {
    %463 = cast(%var_1582, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
    %464 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(4, 10, 12), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %465 = cast(meta[relay.Constant][26] /* ty=Tensor[(4, 10, 12), bool] */, dtype="bool") /* ty=Tensor[(4, 10, 12), bool] */;
    %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %467 = logical_or(%465, %466) /* ty=Tensor[(4, 10, 12), bool] */;
    (%467,)
  };
  %468(%var_1588) /* ty=(Tensor[(4, 10, 12), bool],) */
}

def @func_8502() -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) {
  %469 = @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %470 = cast(meta[relay.Constant][27] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %471 = reshape(%470, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %472 = @func_3061(%471) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(7, 9, 9), float64], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408), uint64]) */;
  %473 = %469.1;
  %474 = %472.3;
  (%473, %474, meta[relay.Constant][27] /* ty=Tensor[(1408), uint64] */)
}

def @func_3194(%var_3187: Tensor[(3, 4, 3), float64]) -> Tensor[(3, 4, 3), float64] {
  %475 = cast(meta[relay.Constant][28] /* ty=Tensor[(3, 4, 3), float64] */, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
  %476 = shape_of(%var_3187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %477 = cast(%var_3187, dtype="float64") /* ty=Tensor[(3, 4, 3), float64] */;
  %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  add(%477, %478) /* ty=Tensor[(3, 4, 3), float64] */
}

def @func_2410() -> (Tensor[(2, 16, 3), float64],) {
  %479 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %480 = %479.0;
  (%480,)
}

def @func_10957() -> (Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(715), float32], Tensor[(120), float32], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(150, 14), float32], Tensor[(1408), uint64]) {
  %481 = @func_10483() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %482 = %481.0;
  %483 = cast(%482, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %484 = @func_8373() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %485 = @func_7119() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %486 = cast(%482, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %487 = cast(meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %488 = cast(meta[relay.Constant][30] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %489 = reshape(%486, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
  %490 = reshape(%487, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %491 = reshape(%488, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %492 = @func_6400(%489, %490, %491) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) */;
  %493 = cast(meta[relay.Constant][31] /* ty=Tensor[(150, 14), float32] */, dtype="float32") /* ty=Tensor[(150, 14), float32] */;
  %494 = cast(meta[relay.Constant][32] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %495 = reshape(%493, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %496 = reshape(%494, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %497 = @func_1490(%495, %496) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %498 = log(%483) /* ty=Tensor[(2, 16, 3), float32] */;
  %499 = %484.0;
  %500 = %485.1;
  %501 = %492.4;
  %502 = %497.2;
  (%498, %499, %500, %501, meta[relay.Constant][29] /* ty=Tensor[(120), float32] */, meta[relay.Constant][30] /* ty=Tensor[(715), int32] */, %502, meta[relay.Constant][31] /* ty=Tensor[(150, 14), float32] */, meta[relay.Constant][32] /* ty=Tensor[(1408), uint64] */)
}

def @func_10227() -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32]) {
  @func_10225() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32]) */
}

def @func_11442() -> Tensor[(55), float32] {
  %503 = @func_8220() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(55), int32], Tensor[(13, ?, 16), int64]) */;
  %504 = %503.2;
  %505 = cast(%504, dtype="float64") /* ty=Tensor[(55), float64] */;
  %506 = atan(%505) /* ty=Tensor[(55), float64] */;
  %507 = cast(%506, dtype="float64") /* ty=Tensor[(55), float64] */;
  %508 = shape_of(%504, dtype="int32") /* ty=Tensor[(1), int32] */;
  %509 = cast(%504, dtype="float64") /* ty=Tensor[(55), float64] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?), float64] */;
  %511 = floor_divide(%509, %510) /* ty=Tensor[(55), float64] */;
  %512 = cast(%511, dtype="float32") /* ty=Tensor[(55), float32] */;
  log2(%512) /* ty=Tensor[(55), float32] */
}

def @func_3922(%var_3885: Tensor[(1408), uint64], %var_3888: Tensor[(88, 16), uint64], %var_3903: Tensor[(88, 16), uint8], %var_3915: Tensor[(55), int32], %var_3916: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(189, 3), int8], Tensor[(1408), uint64], Tensor[(88, 16), bool], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(88, 16), float32]) {
  %513 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %514 = cast(meta[relay.Constant][33] /* ty=Tensor[(189, 3), int8] */, dtype="int8") /* ty=Tensor[(189, 3), int8] */;
  %515 = cast(%var_3885, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %516 = reshape(%514, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %517 = reshape(%515, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %518 = @func_694(%516, %517) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %519 = %518.2;
  %520 = cast(%var_3888, dtype="uint8") /* ty=Tensor[(88, 16), uint8] */;
  %521 = shape_of(%519, dtype="int32") /* ty=Tensor[(2), int32] */;
  %522 = cast(%519, dtype="uint8") /* ty=Tensor[(88, 16), uint8] */;
  %523 = dyn.reshape(%520, %521, newshape=[]) /* ty=Tensor[(?, ?), uint8] */;
  %524 = multiply(%522, %523) /* ty=Tensor[(88, 16), uint8] */;
  %525 = cast(%var_3903, dtype="bool") /* ty=Tensor[(88, 16), bool] */;
  %526 = shape_of(%524, dtype="int32") /* ty=Tensor[(2), int32] */;
  %527 = cast(%524, dtype="bool") /* ty=Tensor[(88, 16), bool] */;
  %528 = dyn.reshape(%525, %526, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %529 = cast(%var_3915, dtype="int32") /* ty=Tensor[(55), int32] */;
  %530 = cast(%var_3916, dtype="int32") /* ty=Tensor[(715), int32] */;
  %531 = reshape(%529, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
  %532 = reshape(%530, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
  %533 = @func_810(%531, %532) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
  %534 = cast(%519, dtype="float32") /* ty=Tensor[(88, 16), float32] */;
  %535 = %513.0;
  %536 = less_equal(%527, %528) /* ty=Tensor[(88, 16), bool] */;
  %537 = %533.0;
  %538 = cos(%534) /* ty=Tensor[(88, 16), float32] */;
  (%535, meta[relay.Constant][33] /* ty=Tensor[(189, 3), int8] */, %var_3885, %536, %537, %var_3915, %var_3916, %538)
}

def @func_4271(%var_4269: Tensor[(14, 7), float64], %var_4270: Tensor[(1408), uint64]) -> (Tensor[(2, 7, 7), float64], Tensor[(14, 7), float64], Tensor[(2, 16, 3), float64], Tensor[(2100, 1408), uint64], Tensor[(1408), uint64], Tensor[(1408), float64], Tensor[(14, 3, 13), float64]) {
  %577 = fn (%var_4203: Tensor[(14, 7), float64], %var_4257: Tensor[(1408), uint64]) -> (Tensor[(2, 7, 7), float64], Tensor[(14, 7), float64], Tensor[(2, 16, 3), float64], Tensor[(2100, 1408), uint64], Tensor[(1408), uint64], Tensor[(1408), float64], Tensor[(14, 3, 13), float64]) {
    %539 = cast(%var_4203, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
    %540 = cast(%var_4203, dtype="float64") /* ty=Tensor[(14, 7), float64] */;
    %541 = reshape(%539, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
    %542 = reshape(%540, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
    %543 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %544 = %543.0;
    %545 = cast(%544, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %546 = cast(meta[relay.Constant][34] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %547 = reshape(%545, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
    %548 = reshape(%546, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %549 = @func_2746(%547, %548) /* ty=(Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) */;
    %550 = %549.2;
    %551 = cast(%550, dtype="uint64") /* ty=Tensor[(2100, 1), uint64] */;
    %552 = cast(meta[relay.Constant][34] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %553 = cast(%550, dtype="float32") /* ty=Tensor[(2100, 1), float32] */;
    %554 = cast(meta[relay.Constant][34] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %555 = reshape(%553, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %556 = reshape(%554, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %557 = @func_1490(%555, %556) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
    %558 = cast(%var_4257, dtype="float64") /* ty=Tensor[(1408), float64] */;
    %559 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(1408), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
    %560 = cast(meta[relay.Constant][34] /* ty=Tensor[(1408), uint64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?), float64] */;
    %562 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 3, 13), float32] */, dtype="float32") /* ty=Tensor[(14, 3, 13), float32] */;
    %563 = asinh(%562) /* ty=Tensor[(14, 3, 13), float32] */;
    %564 = cast(meta[relay.Constant][35] /* ty=Tensor[(14, 3, 13), float32] */, dtype="uint32") /* ty=Tensor[(14, 3, 13), uint32] */;
    %565 = shape_of(%563, dtype="int32") /* ty=Tensor[(3), int32] */;
    %566 = cast(%563, dtype="uint32") /* ty=Tensor[(14, 3, 13), uint32] */;
    %567 = dyn.reshape(%564, %565, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %568 = minimum(%566, %567) /* ty=Tensor[(14, 3, 13), uint32] */;
    %569 = cast(%568, dtype="float64") /* ty=Tensor[(14, 3, 13), float64] */;
    %570 = asin(%569) /* ty=Tensor[(14, 3, 13), float64] */;
    %571 = cast(%570, dtype="float64") /* ty=Tensor[(14, 3, 13), float64] */;
    %572 = @func_667(%541, %542) /* ty=Tensor[(2, 7, 7), float64] */;
    %573 = left_shift(%551, %552) /* ty=Tensor[(2100, 1408), uint64] */;
    %574 = %557.2;
    %575 = floor_mod(%560, %561) /* ty=Tensor[(1408), float64] */;
    %576 = cos(%571) /* ty=Tensor[(14, 3, 13), float64] */;
    (%572, %var_4203, %544, %573, %574, %575, %576)
  };
  %577(%var_4269, %var_4270) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(14, 7), float64], Tensor[(2, 16, 3), float64], Tensor[(2100, 1408), uint64], Tensor[(1408), uint64], Tensor[(1408), float64], Tensor[(14, 3, 13), float64]) */
}

def @func_1494(%var_1492: Tensor[(15, 10, 14), float32], %var_1493: Tensor[(1408), uint64]) -> (Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) {
  @func_1490(%var_1492, %var_1493) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */
}

def @func_4469() -> (Tensor[(1408), uint64],) {
  %578 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %579 = %578.3;
  (%579,)
}

def @func_8317() -> (Tensor[(480), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  %580 = @func_4324() /* ty=(Tensor[(480), bool],) */;
  %581 = cast(meta[relay.Constant][36] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %582 = reshape(%581, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %583 = @func_2453(%582) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %584 = %580.0;
  %585 = %583.1;
  (%584, %585, meta[relay.Constant][36] /* ty=Tensor[(98), float64] */)
}

def @func_10390() -> Tensor[(2, 16, 3), float64] {
  @func_10388() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_7868() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %589 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %586 = @func_4844() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
    %587 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
    %588 = %586.1;
    (%587, %588)
  };
  %589() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_4915(%var_4914: Tensor[(75), float64]) -> (Tensor[(75), bool], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(1408), uint64]) {
  %612 = fn (%var_4873: Tensor[(75), float64]) -> (Tensor[(75), bool], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(1408), uint64]) {
    %590 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
    %591 = %590.2;
    %592 = cast(%var_4873, dtype="int64") /* ty=Tensor[(75), int64] */;
    %593 = shape_of(%591, dtype="int32") /* ty=Tensor[(1), int32] */;
    %594 = cast(%591, dtype="int64") /* ty=Tensor[(75), int64] */;
    %595 = dyn.reshape(%592, %593, newshape=[]) /* ty=Tensor[(?), int64] */;
    %596 = right_shift(%594, %595) /* ty=Tensor[(75), int64] */;
    %597 = cast(meta[relay.Constant][37] /* ty=Tensor[(75), int64] */, dtype="bool") /* ty=Tensor[(75), bool] */;
    %598 = shape_of(%596, dtype="int32") /* ty=Tensor[(1), int32] */;
    %599 = cast(%596, dtype="bool") /* ty=Tensor[(75), bool] */;
    %600 = dyn.reshape(%597, %598, newshape=[]) /* ty=Tensor[(?), bool] */;
    %601 = cast(meta[relay.Constant][38] /* ty=Tensor[(36), float64] */, dtype="float64") /* ty=Tensor[(36), float64] */;
    %602 = reshape(%601, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float64] */;
    %603 = cast(meta[relay.Constant][39] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
    %604 = cast(meta[relay.Constant][40] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %605 = reshape(%603, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
    %606 = reshape(%604, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %607 = @func_1490(%605, %606) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
    %608 = greater(%599, %600) /* ty=Tensor[(75), bool] */;
    %609 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
    %610 = @func_3194(%602) /* ty=Tensor[(3, 4, 3), float64] */;
    %611 = %607.2;
    (%608, %609, %610, meta[relay.Constant][38] /* ty=Tensor[(36), float64] */, %611, meta[relay.Constant][39] /* ty=Tensor[(2100), float32] */, meta[relay.Constant][40] /* ty=Tensor[(1408), uint64] */)
  };
  %612(%var_4914) /* ty=(Tensor[(75), bool], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64], Tensor[(1408), uint64], Tensor[(2100), float32], Tensor[(1408), uint64]) */
}

def @func_8710() -> Tensor[(2, 16, 3), float64] {
  @func_8708() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_3507() -> Tensor[(2, 16, 3), float64] {
  %613 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %613.0
}

def @func_10831(%var_10807: Tensor[(2, 7, 7), float64]) -> (Tensor[(2, 7, 7), float32], Tensor[(2, 16, 3), float64]) {
  %614 = @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %615 = %614.0;
  %616 = cast(%var_10807, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  %617 = shape_of(%615, dtype="int32") /* ty=Tensor[(3), int32] */;
  %618 = cast(%615, dtype="float32") /* ty=Tensor[(2, 7, 7), float32] */;
  %619 = dyn.reshape(%616, %617, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %620 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %621 = power(%618, %619) /* ty=Tensor[(2, 7, 7), float32] */;
  %622 = %620.0;
  (%621, %622)
}

def @func_7855() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) {
  %623 = @func_5226() /* ty=Tensor[(2, 16, 3), float64] */;
  %624 = @func_7009() /* ty=Tensor[(2, 16, 3), float64] */;
  %625 = @func_6894() /* ty=Tensor[(480), bool] */;
  (%623, %624, %625)
}

def @func_671(%var_669: Tensor[(2, 7, 7), float64], %var_670: Tensor[(2, 7, 7), float64]) -> Tensor[(2, 7, 7), float64] {
  @func_667(%var_669, %var_670) /* ty=Tensor[(2, 7, 7), float64] */
}

def @func_5376(%var_5374: Tensor[(16, 12, 1), float32], %var_5375: Tensor[(567), int8]) -> (Tensor[(16, 12, 1), float32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408, ?), int16], Tensor[(16, 12, 1408), uint32], Tensor[(8, 11, 16), int32]) {
  @func_5372(%var_5374, %var_5375) /* ty=(Tensor[(16, 12, 1), float32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408, ?), int16], Tensor[(16, 12, 1408), uint32], Tensor[(8, 11, 16), int32]) */
}

def @func_5466() -> (Tensor[(2, 16, 3), float64],) {
  %627 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %626 = @func_4021() /* ty=Tensor[(2, 16, 3), float64] */;
    (%626,)
  };
  %627() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_11075() -> Tensor[(2, 16, 3), float64] {
  %629 = fn () -> Tensor[(2, 16, 3), float64] {
    %628 = @func_10483() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %628.0
  };
  %629() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_3625() -> (Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */
}

def @func_7857() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) {
  @func_7855() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) */
}

def @func_5542() -> (Tensor[(2, 16, 3), float64],) {
  @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_4859(%var_4846: Tensor[(11, 4, 14), float64]) -> (Tensor[(11, 4, 14), float64],) {
  %630 = cast(%var_4846, dtype="float64") /* ty=Tensor[(11, 4, 14), float64] */;
  %631 = rsqrt(%630) /* ty=Tensor[(11, 4, 14), float64] */;
  (%631,)
}

def @func_4718(%var_4716: Tensor[(1, 12, 5), bool], %var_4717: Tensor[(10, 12, 5), bool]) -> Tensor[(10, 12, 5), bool] {
  %634 = fn (%var_4706: Tensor[(1, 12, 5), bool], %var_4707: Tensor[(10, 12, 5), bool]) -> Tensor[(10, 12, 5), bool] {
    %632 = cast(%var_4706, dtype="bool") /* ty=Tensor[(1, 12, 5), bool] */;
    %633 = cast(%var_4707, dtype="bool") /* ty=Tensor[(10, 12, 5), bool] */;
    logical_or(%632, %633) /* ty=Tensor[(10, 12, 5), bool] */
  };
  %634(%var_4716, %var_4717) /* ty=Tensor[(10, 12, 5), bool] */
}

def @func_5227() -> Tensor[(2, 16, 3), float64] {
  %636 = fn () -> Tensor[(2, 16, 3), float64] {
    %635 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %635.0
  };
  %636() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_6446() -> (Tensor[(2, 16, 3), float64],) {
  @func_6444() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_4575() -> Tensor[(2, 16, 3), float64] {
  %638 = fn () -> Tensor[(2, 16, 3), float64] {
    %637 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %637.0
  };
  %638() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_9897() -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(1050, 2), float32]) {
  %639 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %640 = cast(meta[relay.Constant][41] /* ty=Tensor[(1050, 2), float32] */, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %641 = reshape(%640, newshape=[1, 2100]) /* ty=Tensor[(1, 2100), float32] */;
  %642 = @func_2892(%641) /* ty=(Tensor[(75), uint32], Tensor[(1408), uint64], Tensor[(1, 2100), float32], Tensor[(1408), uint64]) */;
  %643 = %639.0;
  %644 = @func_9022() /* ty=Tensor[(1408), uint64] */;
  %645 = %642.1;
  (%643, %644, %645, meta[relay.Constant][41] /* ty=Tensor[(1050, 2), float32] */)
}

def @func_8708() -> Tensor[(2, 16, 3), float64] {
  %646 = @func_7855() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) */;
  %646.0
}

def @func_9504() -> (Tensor[(2, 7, 7), float64],) {
  %649 = fn () -> (Tensor[(2, 7, 7), float64],) {
    %647 = @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */;
    %648 = %647.0;
    (%648,)
  };
  %649() /* ty=(Tensor[(2, 7, 7), float64],) */
}

def @func_10088() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %650 = @func_4288() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %651 = %650.0;
  %652 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
  (%651, %652)
}

def @func_8660() -> Tensor[(2, 16, 3), float64] {
  %654 = fn () -> Tensor[(2, 16, 3), float64] {
    %653 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %653.0
  };
  %654() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_4569() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %655 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %656 = cast(meta[relay.Constant][42] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
  %657 = reshape(%656, newshape=[55]) /* ty=Tensor[(55), int32] */;
  %658 = @func_4109(%657) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */;
  %659 = %655.0;
  %660 = %658.0;
  %661 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  %662 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
  (%659, %660, meta[relay.Constant][42] /* ty=Tensor[(55), int32] */, %661, %662)
}

def @func_11725() -> (Tensor[(2, 16, 3), float64],) {
  @func_11723() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_8119(%var_8117: Tensor[(1050, 2), float32]) -> (Tensor[(1050, 2), float32],) {
  @func_8116(%var_8117) /* ty=(Tensor[(1050, 2), float32],) */
}

def @func_2840() -> (Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) {
  @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */
}

def @func_3106() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) {
  @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */
}

def @func_2167() -> (Tensor[(2, 16, 3), float64],) {
  %664 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %663 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
    (%663,)
  };
  %664() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_8611(%var_8569: Tensor[(98, 1), float64], %var_8604: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(98, 1), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64], int64, Tensor[(75), float64]) {
  %665 = @func_7119() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %666 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %667 = cast(%var_8569, dtype="float64") /* ty=Tensor[(98, 1), float64] */;
  %668 = cast(meta[relay.Constant][43] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %669 = reshape(%667, newshape=[14, 7]) /* ty=Tensor[(14, 7), float64] */;
  %670 = reshape(%668, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %671 = @func_4268(%669, %670) /* ty=(Tensor[(2, 7, 7), float64], Tensor[(14, 7), float64], Tensor[(2, 16, 3), float64], Tensor[(2100, 1408), uint64], Tensor[(1408), uint64], Tensor[(1408), float64], Tensor[(14, 3, 13), float64]) */;
  %672 = @func_7855() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(480), bool]) */;
  %673 = %672.1;
  %674 = cast(%673, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %675 = cast(-8 /* ty=int64 */, dtype="int64") /* ty=int64 */;
  %676 = cast(%var_8604, dtype="float64") /* ty=Tensor[(75), float64] */;
  %677 = %671.4;
  %678 = cast(%677, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %679 = reshape(%675, newshape=[]) /* ty=int64 */;
  %680 = reshape(%676, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %681 = reshape(%678, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %682 = @func_6218(%679, %680, %681) /* ty=(Tensor[(12, 8, 6), bool], Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2100), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(715), int32]) */;
  %683 = %665.0;
  %684 = %666.0;
  %685 = atanh(%674) /* ty=Tensor[(2, 16, 3), float32] */;
  %686 = %682.1;
  (%683, %684, %677, %var_8569, meta[relay.Constant][43] /* ty=Tensor[(1408), uint64] */, %685, %686, -8 /* ty=int64 */, %var_8604)
}

def @func_4175() -> (Tensor[(2, 16, 3), float64],) {
  %688 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %687 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
    (%687,)
  };
  %688() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_4288() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %689 = @func_4040() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %690 = @func_3773() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %691 = %689.0;
  %692 = %690.2;
  (%691, %692)
}

def @func_3305() -> Tensor[(2, 16, 3), float64] {
  %694 = fn () -> Tensor[(2, 16, 3), float64] {
    %693 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %693.0
  };
  %694() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_5280() -> (Tensor[(1408), uint64],) {
  @func_5278() /* ty=(Tensor[(1408), uint64],) */
}

def @func_4434(%var_4357: Tensor[(3, 1, 14), float32], %var_4358: Tensor[(3, 3, 14), float32], %var_4385: Tensor[(1408), uint64], %var_4386: Tensor[(715), int32], %var_4409: Tensor[(3, 1, 14), float32], %var_4420: Tensor[(36), float64]) -> (Tensor[(3, 3, 14), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(715), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(3, ?, 14), float64], Tensor[(2, 16, 3), float64], Tensor[(3, 4, 3), float64], Tensor[(36), float64]) {
  %695 = cast(%var_4357, dtype="float32") /* ty=Tensor[(3, 1, 14), float32] */;
  %696 = cast(%var_4358, dtype="float32") /* ty=Tensor[(3, 3, 14), float32] */;
  %697 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %698 = %697.1;
  %699 = cast(%698, dtype="float64") /* ty=Tensor[(75), float64] */;
  %700 = cast(%var_4385, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %701 = cast(%var_4386, dtype="int32") /* ty=Tensor[(715), int32] */;
  %702 = reshape(%699, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
  %703 = reshape(%700, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %704 = reshape(%701, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %705 = @func_1857(%702, %703, %704) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %706 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %707 = @func_4040() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %708 = cast(%var_4409, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %709 = shape_of(%var_4357, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%var_4357, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %712 = cast(%var_4420, dtype="float64") /* ty=Tensor[(36), float64] */;
  %713 = reshape(%712, newshape=[3, 4, 3]) /* ty=Tensor[(3, 4, 3), float64] */;
  %714 = multiply(%695, %696) /* ty=Tensor[(3, 3, 14), float32] */;
  %715 = %705.2;
  %716 = %706.0;
  %717 = %707.0;
  %718 = mod(%710, %711) /* ty=Tensor[(3, ?, 14), float64] */;
  %719 = @func_4021() /* ty=Tensor[(2, 16, 3), float64] */;
  %720 = @func_3194(%713) /* ty=Tensor[(3, 4, 3), float64] */;
  (%714, %698, %715, %var_4385, %var_4386, %716, %717, %718, %719, %720, %var_4420)
}

def @func_3728() -> Tensor[(2, 16, 3), float64] {
  @func_3726() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_9446() -> (Tensor[(2, 16, 3), float64],) {
  @func_9444() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_3457() -> (Tensor[(2, 16, 3), float64],) {
  %723 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %721 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
    %722 = %721.0;
    (%722,)
  };
  %723() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_4639(%var_4637: Tensor[(120), float32], %var_4638: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32]) {
  %734 = fn (%var_4629: Tensor[(120), float32], %var_4630: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32]) {
    %724 = @func_4174() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %725 = cast(%var_4629, dtype="float32") /* ty=Tensor[(120), float32] */;
    %726 = cast(%var_4629, dtype="float32") /* ty=Tensor[(120), float32] */;
    %727 = cast(%var_4630, dtype="int32") /* ty=Tensor[(715), int32] */;
    %728 = reshape(%725, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
    %729 = reshape(%726, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
    %730 = reshape(%727, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %731 = @func_1402(%728, %729, %730) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
    %732 = %724.0;
    %733 = %731.4;
    (%732, %733, %var_4629, %var_4630)
  };
  %734(%var_4637, %var_4638) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32]) */
}

def @func_2455(%var_2454: Tensor[(98), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  %741 = fn (%var_2439: Tensor[(98), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
    %735 = cast(%var_2439, dtype="float64") /* ty=Tensor[(98), float64] */;
    %736 = cast(%var_2439, dtype="float64") /* ty=Tensor[(98), float64] */;
    %737 = reshape(%735, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
    %738 = reshape(%736, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
    %739 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
    %740 = @func_667(%737, %738) /* ty=Tensor[(2, 7, 7), float64] */;
    (%739, %740, %var_2439)
  };
  %741(%var_2454) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */
}

def @func_6011(%var_6010: Tensor[(12, 13, 12), uint64]) -> Tensor[(12, 13, 12), bool] {
  %746 = fn (%var_6002: Tensor[(12, 13, 12), uint64]) -> Tensor[(12, 13, 12), bool] {
    %742 = cast(meta[relay.Constant][44] /* ty=Tensor[(12, 13, 12), uint64] */, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
    %743 = shape_of(%var_6002, dtype="int32") /* ty=Tensor[(3), int32] */;
    %744 = cast(%var_6002, dtype="bool") /* ty=Tensor[(12, 13, 12), bool] */;
    %745 = dyn.reshape(%742, %743, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    equal(%744, %745) /* ty=Tensor[(12, 13, 12), bool] */
  };
  %746(%var_6010) /* ty=Tensor[(12, 13, 12), bool] */
}

def @func_6635(%var_6634: Tensor[(55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32]) {
  %753 = fn (%var_6631: Tensor[(55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32]) {
    %747 = @func_6444() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %748 = cast(%var_6631, dtype="int32") /* ty=Tensor[(55), int32] */;
    %749 = reshape(%748, newshape=[55]) /* ty=Tensor[(55), int32] */;
    %750 = @func_4109(%749) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */;
    %751 = %747.0;
    %752 = %750.0;
    (%751, %752, %var_6631)
  };
  %753(%var_6634) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32]) */
}

def @func_6016() -> (Tensor[(8, 11, 16), int32],) {
  %754 = @func_5057() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %755 = %754.0;
  (%755,)
}

def @func_10090() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_10088() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_3063(%var_3062: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(7, 9, 9), float64], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408), uint64]) {
  %770 = fn (%var_3057: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(7, 9, 9), float64], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408), uint64]) {
    %756 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %757 = cast(meta[relay.Constant][45] /* ty=Tensor[(567), int8] */, dtype="int8") /* ty=Tensor[(567), int8] */;
    %758 = cast(%var_3057, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %759 = reshape(%757, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
    %760 = reshape(%758, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
    %761 = @func_694(%759, %760) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
    %762 = %756.0;
    %763 = cast(%762, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %764 = cast(%var_3057, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %765 = reshape(%763, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
    %766 = reshape(%764, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %767 = @func_2746(%765, %766) /* ty=(Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) */;
    %768 = %761.0;
    %769 = %767.3;
    (%762, %768, meta[relay.Constant][45] /* ty=Tensor[(567), int8] */, %var_3057, %769)
  };
  %770(%var_3062) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(7, 9, 9), float64], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408), uint64]) */
}

def @func_10512() -> Tensor[(1408), uint64] {
  @func_10510() /* ty=Tensor[(1408), uint64] */
}

def @func_6712() -> (Tensor[(2, 16, 3), float64],) {
  %771 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %772 = %771.0;
  (%772,)
}

def @func_5999() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %773 = @func_2838() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(75), float64], Tensor[(1408), uint64]) */;
  %774 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  %775 = %773.0;
  (%774, %775)
}

def @func_8766() -> Tensor[(2, 16, 3), float64] {
  %777 = fn () -> Tensor[(2, 16, 3), float64] {
    %776 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
    %776.1
  };
  %777() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_5270() -> (Tensor[(2, 16, 3), float64],) {
  %780 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %778 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %779 = %778.0;
    (%779,)
  };
  %780() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_9217() -> (Tensor[(1408), uint64], Tensor[(2, 7, 7), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64]) {
  @func_9215() /* ty=(Tensor[(1408), uint64], Tensor[(2, 7, 7), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64]) */
}

def @func_2675() -> (Tensor[(2, 16, 3), float64],) {
  @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_7969() -> (Tensor[(2, 16, 3), float64],) {
  %782 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %781 = @func_6107() /* ty=Tensor[(2, 16, 3), float64] */;
    (%781,)
  };
  %782() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_11723() -> (Tensor[(2, 16, 3), float64],) {
  %783 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
  (%783,)
}

def @func_3023() -> (Tensor[(2, 16, 3), float64],) {
  %786 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %784 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %785 = %784.0;
    (%785,)
  };
  %786() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_10410(%var_10408: Tensor[(9, 4, 5), uint64], %var_10409: Tensor[(9, 4, 5), uint64]) -> (Tensor[(9, 4, 5), bool],) {
  %792 = fn (%var_10394: Tensor[(9, 4, 5), uint64], %var_10395: Tensor[(9, 4, 5), uint64]) -> (Tensor[(9, 4, 5), bool],) {
    %787 = cast(%var_10395, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
    %788 = shape_of(%var_10394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %789 = cast(%var_10394, dtype="bool") /* ty=Tensor[(9, 4, 5), bool] */;
    %790 = dyn.reshape(%787, %788, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %791 = greater(%789, %790) /* ty=Tensor[(9, 4, 5), bool] */;
    (%791,)
  };
  %792(%var_10408, %var_10409) /* ty=(Tensor[(9, 4, 5), bool],) */
}

def @func_8504() -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) {
  @func_8502() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) */
}

def @func_7120() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %796 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %793 = @func_6712() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %794 = %793.0;
    %795 = @func_6527() /* ty=Tensor[(2, 16, 3), float64] */;
    (%794, %795)
  };
  %796() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_10037(%var_10023: Tensor[(648), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64]) {
  %797 = cast(%var_10023, dtype="float64") /* ty=Tensor[(648), float64] */;
  %798 = reshape(%797, newshape=[18, 36]) /* ty=Tensor[(18, 36), float64] */;
  %799 = @func_7262(%798) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(18, 36), float64]) */;
  %800 = @func_7058() /* ty=Tensor[(2, 16, 3), float64] */;
  %801 = @func_5521() /* ty=Tensor[(2, 16, 3), float64] */;
  %802 = %799.1;
  (%800, %801, %802, %var_10023)
}

def @func_2653() -> (Tensor[(2, 16, 3), float64],) {
  %805 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %803 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %804 = %803.0;
    (%804,)
  };
  %805() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_10764() -> (Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64]) {
  @func_10762() /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64]) */
}

def @func_3623() -> (Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) {
  %806 = cast(meta[relay.Constant][46] /* ty=Tensor[(480), bool] */, dtype="bool") /* ty=Tensor[(480), bool] */;
  %807 = reshape(%806, newshape=[4, 10, 12]) /* ty=Tensor[(4, 10, 12), bool] */;
  %808 = @func_1587(%807) /* ty=(Tensor[(4, 10, 12), bool],) */;
  %809 = @func_3507() /* ty=Tensor[(2, 16, 3), float64] */;
  %810 = %808.0;
  (%809, %810, meta[relay.Constant][46] /* ty=Tensor[(480), bool] */)
}

def @func_8515() -> (Tensor[(2, 7, 7), float64],) {
  @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */
}

def @func_2750(%var_2748: Tensor[(2, 16, 3), float64], %var_2749: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) {
  @func_2746(%var_2748, %var_2749) /* ty=(Tensor[(2, 16, 3), uint16], Tensor[(15, 10, 14), float32], Tensor[(2100, 1), float32], Tensor[(1408), uint64]) */
}

def @func_5413() -> (Tensor[(2, 16, 3), float64],) {
  %813 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %811 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %812 = %811.0;
    (%812,)
  };
  %813() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_3964() -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) {
  @func_3962() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) */
}

def @func_5521() -> Tensor[(2, 16, 3), float64] {
  %814 = @func_5269() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %814.0
}

def @func_7264(%var_7263: Tensor[(18, 36), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(18, 36), float64]) {
  %821 = fn (%var_7251: Tensor[(18, 36), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(18, 36), float64]) {
    %815 = @func_5412() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %816 = cast(%var_7251, dtype="float64") /* ty=Tensor[(18, 36), float64] */;
    %817 = reshape(%816, newshape=[648]) /* ty=Tensor[(648), float64] */;
    %818 = @func_6257(%817) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(72), float64], Tensor[(648), float64], Tensor[(480), bool]) */;
    %819 = %815.0;
    %820 = %818.1;
    (%819, %820, %var_7251)
  };
  %821(%var_7263) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(18, 36), float64]) */
}

def @func_2801(%var_2790: Tensor[(75), float64], %var_2795: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) {
  %822 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %823 = cast(%var_2790, dtype="float64") /* ty=Tensor[(75), float64] */;
  %824 = cast(meta[relay.Constant][47] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %825 = reshape(%823, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %826 = reshape(%824, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %827 = @func_2212(%825, %826) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %828 = cast(%var_2795, dtype="bool") /* ty=Tensor[(75), bool] */;
  %829 = shape_of(%var_2790, dtype="int32") /* ty=Tensor[(1), int32] */;
  %830 = cast(%var_2790, dtype="bool") /* ty=Tensor[(75), bool] */;
  %831 = dyn.reshape(%828, %829, newshape=[]) /* ty=Tensor[(?), bool] */;
  %832 = %822.0;
  %833 = %827.4;
  %834 = less(%830, %831) /* ty=Tensor[(75), bool] */;
  (%832, %833, meta[relay.Constant][47] /* ty=Tensor[(1408), uint64] */, %834)
}

def @func_3566() -> Tensor[(2, 16, 3), float64] {
  @func_3564() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_6400(%var_6346: Tensor[(2, 16, 3), float64], %var_6364: Tensor[(120), float32], %var_6365: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) {
  %835 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %836 = %835.0;
  %837 = cast(%var_6346, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %838 = shape_of(%836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %839 = cast(%836, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
  %840 = dyn.reshape(%837, %838, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %841 = cast(%836, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
  %842 = cast(%var_6364, dtype="float32") /* ty=Tensor[(120), float32] */;
  %843 = cast(%var_6365, dtype="int32") /* ty=Tensor[(715), int32] */;
  %844 = reshape(%842, newshape=[120]) /* ty=Tensor[(120), float32] */;
  %845 = reshape(%843, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %846 = @func_4636(%844, %845) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(715), int32]) */;
  %847 = cast(%var_6365, dtype="float32") /* ty=Tensor[(715), float32] */;
  %848 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %849 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %850 = @func_5173() /* ty=(Tensor[(1408), uint64],) */;
  %851 = logical_or(%839, %840) /* ty=Tensor[(2, 16, 3), bool] */;
  %852 = rsqrt(%841) /* ty=Tensor[(2, 16, 3), float32] */;
  %853 = %846.3;
  %854 = cos(%847) /* ty=Tensor[(715), float32] */;
  %855 = %848.0;
  %856 = %849.0;
  %857 = %850.0;
  (%851, %852, %853, %var_6364, %854, %855, %856, %857)
}

def @func_5835() -> Tensor[(2, 16, 3), float64] {
  %859 = fn () -> Tensor[(2, 16, 3), float64] {
    %858 = @func_2652() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %858.0
  };
  %859() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_6222(%var_6219: int64, %var_6220: Tensor[(75), float64], %var_6221: Tensor[(1408), uint64]) -> (Tensor[(12, 8, 6), bool], Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2100), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(715), int32]) {
  %875 = fn (%var_6173: int64, %var_6206: Tensor[(75), float64], %var_6207: Tensor[(1408), uint64]) -> (Tensor[(12, 8, 6), bool], Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2100), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(715), int32]) {
    %860 = cast(%var_6173, dtype="bool") /* ty=bool */;
    %861 = cast(meta[relay.Constant][48] /* ty=Tensor[(12, 8, 6), int64] */, dtype="bool") /* ty=Tensor[(12, 8, 6), bool] */;
    %862 = @func_3773() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
    %863 = @func_4324() /* ty=(Tensor[(480), bool],) */;
    %864 = cast(%var_6206, dtype="float64") /* ty=Tensor[(75), float64] */;
    %865 = cast(%var_6207, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %866 = cast(meta[relay.Constant][49] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %867 = reshape(%864, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
    %868 = reshape(%865, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %869 = reshape(%866, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %870 = @func_1857(%867, %868, %869) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
    %871 = greater(%860, %861) /* ty=Tensor[(12, 8, 6), bool] */;
    %872 = %862.0;
    %873 = %863.0;
    %874 = %870.1;
    (%871, %872, %873, %874, %var_6206, %var_6207, meta[relay.Constant][49] /* ty=Tensor[(715), int32] */)
  };
  %875(%var_6219, %var_6220, %var_6221) /* ty=(Tensor[(12, 8, 6), bool], Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2100), float32], Tensor[(75), float64], Tensor[(1408), uint64], Tensor[(715), int32]) */
}

def @func_7389() -> Tensor[(2, 16, 3), float64] {
  @func_7058() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_4324() -> (Tensor[(480), bool],) {
  %876 = @func_3623() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(4, 10, 12), bool], Tensor[(480), bool]) */;
  %877 = %876.2;
  (%877,)
}

def @func_9377() -> (Tensor[(9, 11, 15), int8], Tensor[(2, 16, 3), float64]) {
  %878 = cast(meta[relay.Constant][51] /* ty=Tensor[(9, 11, 15), int8] */, dtype="int8") /* ty=Tensor[(9, 11, 15), int8] */;
  %879 = shape_of(meta[relay.Constant][50] /* ty=Tensor[(9, 11, 15), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %880 = cast(meta[relay.Constant][50] /* ty=Tensor[(9, 11, 15), int8] */, dtype="int8") /* ty=Tensor[(9, 11, 15), int8] */;
  %881 = dyn.reshape(%878, %879, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %882 = subtract(%880, %881) /* ty=Tensor[(9, 11, 15), int8] */;
  %883 = @func_5834() /* ty=Tensor[(2, 16, 3), float64] */;
  (%882, %883)
}

def @func_4326() -> (Tensor[(480), bool],) {
  @func_4324() /* ty=(Tensor[(480), bool],) */
}

def @func_2412() -> (Tensor[(2, 16, 3), float64],) {
  @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_7060() -> Tensor[(2, 16, 3), float64] {
  @func_7058() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_11751() -> (Tensor[(1408), uint64],) {
  @func_11749() /* ty=(Tensor[(1408), uint64],) */
}

def @func_11198(%var_11155: Tensor[(7, 14, 5), uint16], %var_11156: Tensor[(7, 14, 5), uint16]) -> (Tensor[(7, 14, 5), bool], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(7, 14, 5), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float32], Tensor[(1, 120), float32], Tensor[(715), int32]) {
  %884 = cast(%var_11156, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %885 = shape_of(%var_11155, dtype="int32") /* ty=Tensor[(3), int32] */;
  %886 = cast(%var_11155, dtype="bool") /* ty=Tensor[(7, 14, 5), bool] */;
  %887 = dyn.reshape(%884, %885, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %888 = @func_5465() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %889 = cast(%var_11155, dtype="float32") /* ty=Tensor[(7, 14, 5), float32] */;
  %890 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %891 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 120), float32] */, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %892 = cast(meta[relay.Constant][52] /* ty=Tensor[(1, 120), float32] */, dtype="float32") /* ty=Tensor[(1, 120), float32] */;
  %893 = cast(meta[relay.Constant][53] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
  %894 = reshape(%891, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %895 = reshape(%892, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %896 = reshape(%893, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %897 = @func_1402(%894, %895, %896) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %898 = less_equal(%886, %887) /* ty=Tensor[(7, 14, 5), bool] */;
  %899 = @func_8489() /* ty=Tensor[(2, 16, 3), float64] */;
  %900 = %888.0;
  %901 = sqrt(%889) /* ty=Tensor[(7, 14, 5), float32] */;
  %902 = %890.0;
  %903 = @func_6527() /* ty=Tensor[(2, 16, 3), float64] */;
  %904 = %897.0;
  (%898, %899, %900, %901, %902, %903, %904, meta[relay.Constant][52] /* ty=Tensor[(1, 120), float32] */, meta[relay.Constant][53] /* ty=Tensor[(715), int32] */)
}

def @func_9444() -> (Tensor[(2, 16, 3), float64],) {
  %905 = @func_5226() /* ty=Tensor[(2, 16, 3), float64] */;
  (%905,)
}

def @func_11202(%var_11200: Tensor[(7, 14, 5), uint16], %var_11201: Tensor[(7, 14, 5), uint16]) -> (Tensor[(7, 14, 5), bool], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(7, 14, 5), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float32], Tensor[(1, 120), float32], Tensor[(715), int32]) {
  @func_11198(%var_11200, %var_11201) /* ty=(Tensor[(7, 14, 5), bool], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(7, 14, 5), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(6, 4, 5), float32], Tensor[(1, 120), float32], Tensor[(715), int32]) */
}

def @func_810(%var_776: Tensor[(1, 11, 5), int32], %var_777: Tensor[(13, 11, 5), int32]) -> (Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) {
  %906 = cast(meta[relay.Constant][54] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %907 = reshape(%906, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %908 = @func_569(%907) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %909 = cast(%var_776, dtype="int32") /* ty=Tensor[(1, 11, 5), int32] */;
  %910 = cast(%var_777, dtype="int32") /* ty=Tensor[(13, 11, 5), int32] */;
  %911 = minimum(%909, %910) /* ty=Tensor[(13, 11, 5), int32] */;
  %912 = cast(%911, dtype="float64") /* ty=Tensor[(13, 11, 5), float64] */;
  %913 = %908.0;
  %914 = cast(%913, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
  %915 = reshape(%914, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %916 = @func_569(%915) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %917 = acosh(%912) /* ty=Tensor[(13, 11, 5), float64] */;
  %918 = %916.1;
  (%913, meta[relay.Constant][54] /* ty=Tensor[(1408), uint64] */, %917, %918)
}

def @func_9835(%var_9833: Tensor[(75), float64], %var_9834: Tensor[(600), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), float32], Tensor[(10, 12, 5), bool], Tensor[(3, 20), bool], Tensor[(600), bool]) {
  %947 = fn (%var_9744: Tensor[(75), float64], %var_9821: Tensor[(600), bool]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), float32], Tensor[(10, 12, 5), bool], Tensor[(3, 20), bool], Tensor[(600), bool]) {
    %919 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %920 = @func_8373() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
    %921 = cast(%var_9744, dtype="float64") /* ty=Tensor[(75), float64] */;
    %922 = cast(%var_9744, dtype="float64") /* ty=Tensor[(75), float64] */;
    %923 = reshape(%921, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %924 = reshape(%922, newshape=[75]) /* ty=Tensor[(75), float64] */;
    %925 = @func_2801(%923, %924) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(715), int32], Tensor[(1408), uint64], Tensor[(75), bool]) */;
    %926 = @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */;
    %927 = %926.0;
    %928 = cast(%927, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
    %929 = cos(%928) /* ty=Tensor[(8, 11, 16), float64] */;
    %930 = cast(%929, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
    %931 = cast(%929, dtype="float64") /* ty=Tensor[(8, 11, 16), float64] */;
    %932 = cosh(%931) /* ty=Tensor[(8, 11, 16), float64] */;
    %933 = cast(%929, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
    %934 = shape_of(%932, dtype="int32") /* ty=Tensor[(3), int32] */;
    %935 = cast(%932, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
    %936 = dyn.reshape(%933, %934, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %937 = cast(meta[relay.Constant][55] /* ty=Tensor[(3, 20), bool] */, dtype="bool") /* ty=Tensor[(3, 20), bool] */;
    %938 = cast(%var_9821, dtype="bool") /* ty=Tensor[(600), bool] */;
    %939 = reshape(%937, newshape=[1, 12, 5]) /* ty=Tensor[(1, 12, 5), bool] */;
    %940 = reshape(%938, newshape=[10, 12, 5]) /* ty=Tensor[(10, 12, 5), bool] */;
    %941 = %919.0;
    %942 = %920.0;
    %943 = %925.0;
    %944 = atanh(%930) /* ty=Tensor[(8, 11, 16), float64] */;
    %945 = multiply(%935, %936) /* ty=Tensor[(8, 11, 16), float32] */;
    %946 = @func_4715(%939, %940) /* ty=Tensor[(10, 12, 5), bool] */;
    (%941, %942, %943, %var_9744, %944, %945, %946, meta[relay.Constant][55] /* ty=Tensor[(3, 20), bool] */, %var_9821)
  };
  %947(%var_9833, %var_9834) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(75), float64], Tensor[(8, 11, 16), float64], Tensor[(8, 11, 16), float32], Tensor[(10, 12, 5), bool], Tensor[(3, 20), bool], Tensor[(600), bool]) */
}

def @func_8277(%var_8276: Tensor[(1, 715), int32]) -> (Tensor[(98), float64], Tensor[(2, 16, 3), bool], Tensor[(8, 12), float64], Tensor[(120), float32], Tensor[(1, 715), int32]) {
  %958 = fn (%var_8273: Tensor[(1, 715), int32]) -> (Tensor[(98), float64], Tensor[(2, 16, 3), bool], Tensor[(8, 12), float64], Tensor[(120), float32], Tensor[(1, 715), int32]) {
    %948 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
    %949 = cast(meta[relay.Constant][56] /* ty=Tensor[(8, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 12), float64] */;
    %950 = cast(meta[relay.Constant][57] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %951 = cast(%var_8273, dtype="int32") /* ty=Tensor[(1, 715), int32] */;
    %952 = reshape(%949, newshape=[2, 16, 3]) /* ty=Tensor[(2, 16, 3), float64] */;
    %953 = reshape(%950, newshape=[120]) /* ty=Tensor[(120), float32] */;
    %954 = reshape(%951, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %955 = @func_6400(%952, %953, %954) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) */;
    %956 = %948.2;
    %957 = %955.0;
    (%956, %957, meta[relay.Constant][56] /* ty=Tensor[(8, 12), float64] */, meta[relay.Constant][57] /* ty=Tensor[(120), float32] */, %var_8273)
  };
  %958(%var_8276) /* ty=(Tensor[(98), float64], Tensor[(2, 16, 3), bool], Tensor[(8, 12), float64], Tensor[(120), float32], Tensor[(1, 715), int32]) */
}

def @func_9293() -> Tensor[(8, 11, 16), float32] {
  %959 = @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %960 = %959.0;
  %961 = cast(%960, dtype="float32") /* ty=Tensor[(8, 11, 16), float32] */;
  acosh(%961) /* ty=Tensor[(8, 11, 16), float32] */
}

def @func_2673() -> (Tensor[(2, 16, 3), float64],) {
  %962 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %963 = %962.0;
  (%963,)
}

def @func_8491() -> Tensor[(2, 16, 3), float64] {
  @func_8489() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_7767(%var_7718: Tensor[(98), float64], %var_7736: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(98), float64], Tensor[(98), float64], Tensor[(8, 11, 16), int32], Tensor[(1408), int16]) {
  %964 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %965 = cast(%var_7718, dtype="float64") /* ty=Tensor[(98), float64] */;
  %966 = reshape(%965, newshape=[98]) /* ty=Tensor[(98), float64] */;
  %967 = @func_2453(%966) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
  %968 = @func_6016() /* ty=(Tensor[(8, 11, 16), int32],) */;
  %969 = @func_5278() /* ty=(Tensor[(1408), uint64],) */;
  %970 = %969.0;
  %971 = cast(%var_7736, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %972 = shape_of(%970, dtype="int32") /* ty=Tensor[(1), int32] */;
  %973 = cast(%970, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %974 = dyn.reshape(%971, %972, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %975 = maximum(%973, %974) /* ty=Tensor[(1408), uint64] */;
  %976 = cast(%var_7736, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %977 = shape_of(%975, dtype="int32") /* ty=Tensor[(1), int32] */;
  %978 = cast(%975, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %979 = dyn.reshape(%976, %977, newshape=[]) /* ty=Tensor[(?), int16] */;
  %980 = %964.0;
  %981 = %967.2;
  %982 = %968.0;
  %983 = logical_xor(%978, %979) /* ty=Tensor[(1408), int16] */;
  (%980, %981, %var_7718, %982, %983)
}

def @func_3197(%var_3195: Tensor[(3, 4, 3), float64]) -> Tensor[(3, 4, 3), float64] {
  @func_3194(%var_3195) /* ty=Tensor[(3, 4, 3), float64] */
}

def @func_10484() -> (Tensor[(2, 16, 3), float64],) {
  %985 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %984 = @func_4147() /* ty=Tensor[(2, 16, 3), float64] */;
    (%984,)
  };
  %985() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_11540() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %986 = @func_10483() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %987 = @func_5540() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %988 = %986.0;
  %989 = %987.0;
  (%988, %989)
}

def @func_7771(%var_7769: Tensor[(98), float64], %var_7770: Tensor[(1408), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(98), float64], Tensor[(98), float64], Tensor[(8, 11, 16), int32], Tensor[(1408), int16]) {
  @func_7767(%var_7769, %var_7770) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(98), float64], Tensor[(98), float64], Tensor[(8, 11, 16), int32], Tensor[(1408), int16]) */
}

def @func_3775() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_3773() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_7011() -> Tensor[(2, 16, 3), float64] {
  @func_7009() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_5738() -> (Tensor[(2, 16, 3), float64],) {
  %991 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %990 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
    (%990,)
  };
  %991() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_5059() -> (Tensor[(8, 11, 16), int32],) {
  @func_5057() /* ty=(Tensor[(8, 11, 16), int32],) */
}

def @func_10658() -> (Tensor[(2, 16, 3), float64], Tensor[(72), float64], Tensor[(648), float64]) {
  @func_10656() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(72), float64], Tensor[(648), float64]) */
}

def @func_2156() -> Tensor[(2, 16, 3), float64] {
  %992 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %993 = acosh(%992) /* ty=Tensor[(2, 16, 3), float64] */;
  %994 = cast(meta[relay.Constant][58] /* ty=Tensor[(2, 16, 3), float64] */, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %995 = shape_of(%993, dtype="int32") /* ty=Tensor[(3), int32] */;
  %996 = cast(%993, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
  %997 = dyn.reshape(%994, %995, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  subtract(%996, %997) /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_3962() -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) {
  %998 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %999 = cast(meta[relay.Constant][59] /* ty=Tensor[(75), float64] */, dtype="float64") /* ty=Tensor[(75), float64] */;
  %1000 = cast(meta[relay.Constant][60] /* ty=Tensor[(88, 16), uint64] */, dtype="uint64") /* ty=Tensor[(88, 16), uint64] */;
  %1001 = reshape(%999, newshape=[75]) /* ty=Tensor[(75), float64] */;
  %1002 = reshape(%1000, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %1003 = @func_2212(%1001, %1002) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */;
  %1004 = %998.0;
  %1005 = %1003.5;
  (%1004, %1005, meta[relay.Constant][59] /* ty=Tensor[(75), float64] */, meta[relay.Constant][60] /* ty=Tensor[(88, 16), uint64] */)
}

def @func_697(%var_695: Tensor[(7, 9, 9), int8], %var_696: Tensor[(88, 16), uint64]) -> (Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) {
  %1017 = fn (%var_676: Tensor[(7, 9, 9), int8], %var_689: Tensor[(88, 16), uint64]) -> (Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) {
    %1006 = cast(%var_676, dtype="int8") /* ty=Tensor[(7, 9, 9), int8] */;
    %1007 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(7, 9, 9), int8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1008 = cast(meta[relay.Constant][61] /* ty=Tensor[(7, 9, 9), int8] */, dtype="int8") /* ty=Tensor[(7, 9, 9), int8] */;
    %1009 = dyn.reshape(%1006, %1007, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1010 = bitwise_and(%1008, %1009) /* ty=Tensor[(7, 9, 9), int8] */;
    %1011 = cast(%1010, dtype="float64") /* ty=Tensor[(7, 9, 9), float64] */;
    %1012 = cast(%var_689, dtype="uint64") /* ty=Tensor[(88, 16), uint64] */;
    %1013 = reshape(%1012, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
    %1014 = @func_569(%1013) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
    %1015 = erf(%1011) /* ty=Tensor[(7, 9, 9), float64] */;
    %1016 = %1014.1;
    (%1015, %1016, %var_689)
  };
  %1017(%var_695, %var_696) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */
}

def @func_1490(%var_1477: Tensor[(15, 10, 14), float32], %var_1483: Tensor[(1408), uint64]) -> (Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) {
  %1018 = cast(%var_1477, dtype="float32") /* ty=Tensor[(15, 10, 14), float32] */;
  %1019 = cast(%var_1483, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1020 = reshape(%1019, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
  %1021 = @func_569(%1020) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
  %1022 = cosh(%1018) /* ty=Tensor[(15, 10, 14), float32] */;
  %1023 = %1021.0;
  (%1022, %1023, %var_1483)
}

def @func_8400(%var_8398: Tensor[(75), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(75), float64]) {
  @func_8397(%var_8398) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(75), float64]) */
}

def @func_1406(%var_1403: Tensor[(6, 4, 5), float32], %var_1404: Tensor[(6, 4, 5), float32], %var_1405: Tensor[(715), int32]) -> (Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) {
  %1037 = fn (%var_1353: Tensor[(6, 4, 5), float32], %var_1354: Tensor[(6, 4, 5), float32], %var_1360: Tensor[(715), int32]) -> (Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) {
    %1024 = cast(%var_1354, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
    %1025 = shape_of(%var_1353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1026 = cast(%var_1353, dtype="float32") /* ty=Tensor[(6, 4, 5), float32] */;
    %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1028 = cast(meta[relay.Constant][62] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
    %1029 = cast(%var_1360, dtype="int32") /* ty=Tensor[(715), int32] */;
    %1030 = reshape(%1028, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
    %1031 = reshape(%1029, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
    %1032 = @func_810(%1030, %1031) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
    %1033 = cast(%var_1353, dtype="float64") /* ty=Tensor[(6, 4, 5), float64] */;
    %1034 = floor_divide(%1026, %1027) /* ty=Tensor[(6, 4, 5), float32] */;
    %1035 = %1032.0;
    %1036 = sigmoid(%1033) /* ty=Tensor[(6, 4, 5), float64] */;
    (%1034, %1035, meta[relay.Constant][62] /* ty=Tensor[(55), int32] */, %var_1360, %1036)
  };
  %1037(%var_1403, %var_1404, %var_1405) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */
}

def @func_5523() -> Tensor[(2, 16, 3), float64] {
  @func_5521() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_4783() -> Tensor[(2, 16, 3), float64] {
  %1039 = fn () -> Tensor[(2, 16, 3), float64] {
    %1038 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1038.0
  };
  %1039() /* ty=Tensor[(2, 16, 3), float64] */
}

def @main(%var_11762: Tensor[(1, 72), float64], %var_11770: Tensor[(1, 72), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(9, 9, 8), bool], Tensor[(3, 216), float64], Tensor[(?, 72), int32]) {
  %1040 = cast(%var_11762, dtype="float64") /* ty=Tensor[(1, 72), float64] */;
  %1041 = cast(meta[relay.Constant][63] /* ty=Tensor[(3, 216), float64] */, dtype="float64") /* ty=Tensor[(3, 216), float64] */;
  %1042 = reshape(%1040, newshape=[9, 1, 8]) /* ty=Tensor[(9, 1, 8), float64] */;
  %1043 = reshape(%1041, newshape=[9, 9, 8]) /* ty=Tensor[(9, 9, 8), float64] */;
  %1044 = @func_5883(%1042, %1043) /* ty=(Tensor[(9, 9, 8), bool], Tensor[(9, ?, 8), bool]) */;
  %1045 = cast(%var_11770, dtype="int32") /* ty=Tensor[(1, 72), int32] */;
  %1046 = shape_of(%var_11762, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1047 = cast(%var_11762, dtype="int32") /* ty=Tensor[(1, 72), int32] */;
  %1048 = dyn.reshape(%1045, %1046, newshape=[]) /* ty=Tensor[(?, ?), int32] */;
  %1049 = @func_10866() /* ty=Tensor[(2, 16, 3), float64] */;
  %1050 = %1044.0;
  %1051 = bitwise_and(%1047, %1048) /* ty=Tensor[(?, 72), int32] */;
  (%1049, %1050, meta[relay.Constant][63] /* ty=Tensor[(3, 216), float64] */, %1051)
}

def @func_1857(%var_1771: Tensor[(15, 5, 1), float64], %var_1787: Tensor[(1408), uint64], %var_1800: Tensor[(715), int32]) -> (Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  %1052 = cast(meta[relay.Constant][64] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %1053 = cast(%var_1787, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1054 = reshape(%1052, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %1055 = reshape(%1053, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1056 = @func_1490(%1054, %1055) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %1057 = cast(meta[relay.Constant][65] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1058 = cast(meta[relay.Constant][65] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
  %1059 = cast(%var_1800, dtype="int32") /* ty=Tensor[(715), int32] */;
  %1060 = reshape(%1057, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %1061 = reshape(%1058, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
  %1062 = reshape(%1059, newshape=[715]) /* ty=Tensor[(715), int32] */;
  %1063 = @func_1402(%1060, %1061, %1062) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
  %1064 = cast(meta[relay.Constant][66] /* ty=Tensor[(567), int8] */, dtype="int8") /* ty=Tensor[(567), int8] */;
  %1065 = cast(%var_1787, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1066 = reshape(%1064, newshape=[7, 9, 9]) /* ty=Tensor[(7, 9, 9), int8] */;
  %1067 = reshape(%1065, newshape=[88, 16]) /* ty=Tensor[(88, 16), uint64] */;
  %1068 = @func_694(%1066, %1067) /* ty=(Tensor[(7, 9, 9), float64], Tensor[(8, 11, 16), int32], Tensor[(88, 16), uint64]) */;
  %1069 = cast(meta[relay.Constant][64] /* ty=Tensor[(2100), float32] */, dtype="float32") /* ty=Tensor[(2100), float32] */;
  %1070 = cast(%var_1787, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1071 = reshape(%1069, newshape=[15, 10, 14]) /* ty=Tensor[(15, 10, 14), float32] */;
  %1072 = reshape(%1070, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
  %1073 = @func_1490(%1071, %1072) /* ty=(Tensor[(15, 10, 14), float32], Tensor[(8, 11, 16), bool], Tensor[(1408), uint64]) */;
  %1074 = cast(%var_1771, dtype="float64") /* ty=Tensor[(15, 5, 1), float64] */;
  %1075 = erf(%1074) /* ty=Tensor[(15, 5, 1), float64] */;
  %1076 = cast(%var_1771, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1077 = shape_of(%1075, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1078 = cast(%1075, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1079 = dyn.reshape(%1076, %1077, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1080 = logical_and(%1078, %1079) /* ty=Tensor[(15, 5, ?), bool] */;
  %1081 = cast(%1075, dtype="bool") /* ty=Tensor[(15, 5, 1), bool] */;
  %1082 = shape_of(%1080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1083 = cast(%1080, dtype="bool") /* ty=Tensor[(15, 5, ?), bool] */;
  %1084 = dyn.reshape(%1081, %1082, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %1085 = logical_or(%1083, %1084) /* ty=Tensor[(15, 5, ?), bool] */;
  %1086 = cast(%1085, dtype="float64") /* ty=Tensor[(15, 5, ?), float64] */;
  %1087 = shape_of(%1080, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1088 = cast(%1080, dtype="float64") /* ty=Tensor[(15, 5, ?), float64] */;
  %1089 = dyn.reshape(%1086, %1087, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1090 = mod(%1088, %1089) /* ty=Tensor[(15, 5, ?), float64] */;
  %1091 = cast(%1090, dtype="bool") /* ty=Tensor[(15, 5, ?), bool] */;
  %1092 = cast(%var_1800, dtype="bool") /* ty=Tensor[(715), bool] */;
  %1093 = cast(meta[relay.Constant][67] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %1094 = cast(meta[relay.Constant][67] /* ty=Tensor[(98), float64] */, dtype="float64") /* ty=Tensor[(98), float64] */;
  %1095 = reshape(%1093, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %1096 = reshape(%1094, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
  %1097 = %1056.1;
  %1098 = %1063.4;
  %1099 = %1068.1;
  %1100 = %1073.2;
  %1101 = greater_equal(%1091, %1092) /* ty=Tensor[(15, 5, 715), bool] */;
  %1102 = @func_667(%1095, %1096) /* ty=Tensor[(2, 7, 7), float64] */;
  (%1097, meta[relay.Constant][64] /* ty=Tensor[(2100), float32] */, %var_1787, %1098, meta[relay.Constant][65] /* ty=Tensor[(120), float32] */, %1099, meta[relay.Constant][66] /* ty=Tensor[(567), int8] */, %1100, %1101, %1102, meta[relay.Constant][67] /* ty=Tensor[(98), float64] */)
}

def @func_1862(%var_1859: Tensor[(15, 5, 1), float64], %var_1860: Tensor[(1408), uint64], %var_1861: Tensor[(715), int32]) -> (Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  @func_1857(%var_1859, %var_1860, %var_1861) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */
}

def @func_3929(%var_3924: Tensor[(1408), uint64], %var_3925: Tensor[(88, 16), uint64], %var_3926: Tensor[(88, 16), uint8], %var_3927: Tensor[(55), int32], %var_3928: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(189, 3), int8], Tensor[(1408), uint64], Tensor[(88, 16), bool], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(88, 16), float32]) {
  @func_3922(%var_3924, %var_3925, %var_3926, %var_3927, %var_3928) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(189, 3), int8], Tensor[(1408), uint64], Tensor[(88, 16), bool], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(88, 16), float32]) */
}

def @func_4111(%var_4110: Tensor[(55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) {
  %1110 = fn (%var_4091: Tensor[(55), int32]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) {
    %1103 = cast(%var_4091, dtype="int32") /* ty=Tensor[(55), int32] */;
    %1104 = cast(meta[relay.Constant][68] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %1105 = reshape(%1103, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
    %1106 = reshape(%1104, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
    %1107 = @func_810(%1105, %1106) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
    %1108 = @func_3726() /* ty=Tensor[(2, 16, 3), float64] */;
    %1109 = %1107.3;
    (%1108, %1109, %var_4091, meta[relay.Constant][68] /* ty=Tensor[(715), int32] */)
  };
  %1110(%var_4110) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(715), int32]) */
}

def @func_10881() -> (Tensor[(2, 7, 7), float64],) {
  %1113 = fn () -> (Tensor[(2, 7, 7), float64],) {
    %1111 = @func_9503() /* ty=(Tensor[(2, 7, 7), float64],) */;
    %1112 = %1111.0;
    (%1112,)
  };
  %1113() /* ty=(Tensor[(2, 7, 7), float64],) */
}

def @func_7509() -> (Tensor[(2, 16, 3), float64],) {
  @func_7507() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_4042() -> (Tensor[(2, 16, 3), float64],) {
  @func_4040() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_10743(%var_10741: Tensor[(1, 10, 4), float64]) -> Tensor[(1, 10, 4), float64] {
  @func_10740(%var_10741) /* ty=Tensor[(1, 10, 4), float64] */
}

def @func_8116(%var_8111: Tensor[(1050, 2), float32]) -> (Tensor[(1050, 2), float32],) {
  %1114 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %1115 = %1114.2;
  %1116 = cast(%var_8111, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %1117 = shape_of(%1115, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1118 = cast(%1115, dtype="float32") /* ty=Tensor[(1050, 2), float32] */;
  %1119 = dyn.reshape(%1116, %1117, newshape=[]) /* ty=Tensor[(?, ?), float32] */;
  %1120 = floor_mod(%1118, %1119) /* ty=Tensor[(1050, 2), float32] */;
  (%1120,)
}

def @func_10762() -> (Tensor[(2, 16, 3), float32], Tensor[(2, 16, 3), float64]) {
  %1121 = @func_6944() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float32]) */;
  %1122 = %1121.1;
  %1123 = @func_4782() /* ty=Tensor[(2, 16, 3), float64] */;
  (%1122, %1123)
}

def @func_571(%var_570: Tensor[(8, 11, 16), uint64]) -> (Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) {
  %1134 = fn (%var_547: Tensor[(8, 11, 16), uint64]) -> (Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) {
    %1124 = cast(%var_547, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
    %1125 = shape_of(meta[relay.Constant][69] /* ty=Tensor[(8, 11, 16), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1126 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 11, 16), uint64] */, dtype="bool") /* ty=Tensor[(8, 11, 16), bool] */;
    %1127 = dyn.reshape(%1124, %1125, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1128 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 11, 16), uint64] */, dtype="int32") /* ty=Tensor[(8, 11, 16), int32] */;
    %1129 = shape_of(%var_547, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1130 = cast(%var_547, dtype="int32") /* ty=Tensor[(8, 11, 16), int32] */;
    %1131 = dyn.reshape(%1128, %1129, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1132 = less_equal(%1126, %1127) /* ty=Tensor[(8, 11, 16), bool] */;
    %1133 = left_shift(%1130, %1131) /* ty=Tensor[(8, 11, 16), int32] */;
    (%1132, %1133)
  };
  %1134(%var_570) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */
}

def @func_11121() -> (Tensor[(8, 11, 16), float32],) {
  @func_11119() /* ty=(Tensor[(8, 11, 16), float32],) */
}

def @func_4845() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %1139 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
    %1135 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1136 = @func_2410() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1137 = %1135.0;
    %1138 = %1136.0;
    (%1137, %1138)
  };
  %1139() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_7166(%var_7164: Tensor[(2, 16, 3), float64], %var_7165: Tensor[(65, 11), int32]) -> (Tensor[(2, 16, 3), bool], Tensor[(55), int32], Tensor[(120), float32], Tensor[(65, 11), int32]) {
  %1155 = fn (%var_7153: Tensor[(2, 16, 3), float64], %var_7161: Tensor[(65, 11), int32]) -> (Tensor[(2, 16, 3), bool], Tensor[(55), int32], Tensor[(120), float32], Tensor[(65, 11), int32]) {
    %1140 = @func_3146() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(98), float64]) */;
    %1141 = %1140.1;
    %1142 = cast(%var_7153, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
    %1143 = shape_of(%1141, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1144 = cast(%1141, dtype="bool") /* ty=Tensor[(2, 16, 3), bool] */;
    %1145 = dyn.reshape(%1142, %1143, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1146 = cast(meta[relay.Constant][70] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %1147 = cast(meta[relay.Constant][70] /* ty=Tensor[(120), float32] */, dtype="float32") /* ty=Tensor[(120), float32] */;
    %1148 = cast(%var_7161, dtype="int32") /* ty=Tensor[(65, 11), int32] */;
    %1149 = reshape(%1146, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
    %1150 = reshape(%1147, newshape=[6, 4, 5]) /* ty=Tensor[(6, 4, 5), float32] */;
    %1151 = reshape(%1148, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %1152 = @func_1402(%1149, %1150, %1151) /* ty=(Tensor[(6, 4, 5), float32], Tensor[(8, 11, 16), bool], Tensor[(55), int32], Tensor[(715), int32], Tensor[(6, 4, 5), float64]) */;
    %1153 = greater_equal(%1144, %1145) /* ty=Tensor[(2, 16, 3), bool] */;
    %1154 = %1152.2;
    (%1153, %1154, meta[relay.Constant][70] /* ty=Tensor[(120), float32] */, %var_7161)
  };
  %1155(%var_7164, %var_7165) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(55), int32], Tensor[(120), float32], Tensor[(65, 11), int32]) */
}

def @func_3564() -> Tensor[(2, 16, 3), float64] {
  %1156 = @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1156.0
}

def @func_5599() -> Tensor[(2, 16, 3), float64] {
  %1158 = fn () -> Tensor[(2, 16, 3), float64] {
    %1157 = @func_4569() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(55), int32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
    %1157.0
  };
  %1158() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_11542() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  @func_11540() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */
}

def @func_9899() -> (Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(1050, 2), float32]) {
  @func_9897() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64], Tensor[(1050, 2), float32]) */
}

def @func_7507() -> (Tensor[(2, 16, 3), float64],) {
  %1159 = @func_6854() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 704), uint64]) */;
  %1160 = %1159.0;
  (%1160,)
}

def @func_10388() -> Tensor[(2, 16, 3), float64] {
  %1161 = @func_7587() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) */;
  %1161.1
}

def @func_10510() -> Tensor[(1408), uint64] {
  %1162 = @func_4469() /* ty=(Tensor[(1408), uint64],) */;
  %1162.0
}

def @func_6405(%var_6402: Tensor[(2, 16, 3), float64], %var_6403: Tensor[(120), float32], %var_6404: Tensor[(715), int32]) -> (Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) {
  @func_6400(%var_6402, %var_6403, %var_6404) /* ty=(Tensor[(2, 16, 3), bool], Tensor[(2, 16, 3), float32], Tensor[(715), int32], Tensor[(120), float32], Tensor[(715), float32], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(1408), uint64]) */
}

def @func_8905() -> Tensor[(2, 16, 3), float64] {
  @func_6527() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_8907() -> Tensor[(2, 16, 3), float64] {
  @func_8905() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_7199() -> Tensor[(2, 16, 3), float64] {
  @func_7197() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_8883() -> (Tensor[(2, 16, 3), float64],) {
  %1167 = fn () -> (Tensor[(2, 16, 3), float64],) {
    %1163 = @func_6875() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1164 = %1163.0;
    %1165 = cast(%1164, dtype="float64") /* ty=Tensor[(2, 16, 3), float64] */;
    %1166 = sinh(%1165) /* ty=Tensor[(2, 16, 3), float64] */;
    (%1166,)
  };
  %1167() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_5173() -> (Tensor[(1408), uint64],) {
  %1168 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %1169 = %1168.3;
  (%1169,)
}

def @func_4022() -> Tensor[(2, 16, 3), float64] {
  %1171 = fn () -> Tensor[(2, 16, 3), float64] {
    %1170 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1170.0
  };
  %1171() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_4040() -> (Tensor[(2, 16, 3), float64],) {
  %1172 = @func_3304() /* ty=Tensor[(2, 16, 3), float64] */;
  (%1172,)
}

def @func_5372(%var_5299: Tensor[(16, 12, 1), float32], %var_5304: Tensor[(567), int8]) -> (Tensor[(16, 12, 1), float32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(1408, ?), int16], Tensor[(16, 12, 1408), uint32], Tensor[(8, 11, 16), int32]) {
  %1173 = cast(%var_5299, dtype="float32") /* ty=Tensor[(16, 12, 1), float32] */;
  %1174 = cast(meta[relay.Constant][71] /* ty=Tensor[(1408), uint64] */, dtype="float64") /* ty=Tensor[(1408), float64] */;
  %1175 = atan(%1174) /* ty=Tensor[(1408), float64] */;
  %1176 = cast(%var_5304, dtype="int8") /* ty=Tensor[(567), int8] */;
  %1177 = cast(meta[relay.Constant][71] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1178 = reshape(%1176, newshape=[189, 3]) /* ty=Tensor[(189, 3), int8] */;
  %1179 = reshape(%1177, newshape=[1408, 1]) /* ty=Tensor[(1408, 1), uint64] */;
  %1180 = @func_4801(%1178, %1179) /* ty=(Tensor[(189, 3), int8], Tensor[(1408, 1), uint64], Tensor[(2, 16, 3), float64]) */;
  %1181 = %1180.1;
  %1182 = cast(%1181, dtype="bool") /* ty=Tensor[(1408, 1), bool] */;
  %1183 = shape_of(meta[relay.Constant][71] /* ty=Tensor[(1408), uint64] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1184 = cast(meta[relay.Constant][71] /* ty=Tensor[(1408), uint64] */, dtype="bool") /* ty=Tensor[(1408), bool] */;
  %1185 = dyn.reshape(%1182, %1183, newshape=[]) /* ty=Tensor[(?), bool] */;
  %1186 = less_equal(%1184, %1185) /* ty=Tensor[(1408), bool] */;
  %1187 = cast(%1186, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1188 = shape_of(%1175, dtype="int32") /* ty=Tensor[(1), int32] */;
  %1189 = cast(%1175, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
  %1190 = dyn.reshape(%1187, %1188, newshape=[]) /* ty=Tensor[(?), uint64] */;
  %1191 = cast(meta[relay.Constant][71] /* ty=Tensor[(1408), uint64] */, dtype="int16") /* ty=Tensor[(1408), int16] */;
  %1192 = shape_of(%1181, dtype="int32") /* ty=Tensor[(2), int32] */;
  %1193 = cast(%1181, dtype="int16") /* ty=Tensor[(1408, 1), int16] */;
  %1194 = dyn.reshape(%1191, %1192, newshape=[]) /* ty=Tensor[(?, ?), int16] */;
  %1195 = cast(%1175, dtype="uint32") /* ty=Tensor[(1408), uint32] */;
  %1196 = cast(%var_5299, dtype="uint32") /* ty=Tensor[(16, 12, 1), uint32] */;
  %1197 = @func_3962() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), int32], Tensor[(75), float64], Tensor[(88, 16), uint64]) */;
  %1198 = sin(%1173) /* ty=Tensor[(16, 12, 1), float32] */;
  %1199 = bitwise_xor(%1189, %1190) /* ty=Tensor[(1408), uint64] */;
  %1200 = left_shift(%1193, %1194) /* ty=Tensor[(1408, ?), int16] */;
  %1201 = subtract(%1195, %1196) /* ty=Tensor[(16, 12, 1408), uint32] */;
  %1202 = %1197.1;
  (%1198, %var_5304, %1199, %1200, %1201, %1202)
}

def @func_9215() -> (Tensor[(1408), uint64], Tensor[(2, 7, 7), float64], Tensor[(1408), uint64], Tensor[(2, 16, 3), float64]) {
  %1203 = @func_8502() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(1408), uint64], Tensor[(1408), uint64]) */;
  %1204 = @func_8513() /* ty=(Tensor[(2, 7, 7), float64],) */;
  %1205 = @func_5278() /* ty=(Tensor[(1408), uint64],) */;
  %1206 = @func_2673() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1207 = %1203.1;
  %1208 = %1204.0;
  %1209 = %1205.0;
  %1210 = %1206.0;
  (%1207, %1208, %1209, %1210)
}

def @func_8489() -> Tensor[(2, 16, 3), float64] {
  @func_4574() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_4149() -> Tensor[(2, 16, 3), float64] {
  @func_4147() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_5044() -> (Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) {
  @func_5042() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(480), bool], Tensor[(2, 16, 3), float64]) */
}

def @func_9295() -> Tensor[(8, 11, 16), float32] {
  @func_9293() /* ty=Tensor[(8, 11, 16), float32] */
}

def @func_6945() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float32]) {
  %1215 = fn () -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float32]) {
    %1211 = @func_4574() /* ty=Tensor[(2, 16, 3), float64] */;
    %1212 = cast(%1211, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
    %1213 = @func_3507() /* ty=Tensor[(2, 16, 3), float64] */;
    %1214 = cosh(%1212) /* ty=Tensor[(2, 16, 3), float32] */;
    (%1213, %1214)
  };
  %1215() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float32]) */
}

def @func_3509() -> Tensor[(2, 16, 3), float64] {
  @func_3507() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_5175() -> (Tensor[(1408), uint64],) {
  @func_5173() /* ty=(Tensor[(1408), uint64],) */
}

def @func_2313(%var_2311: Tensor[(98), float64], %var_2312: Tensor[(2, 16, 3), float32]) -> (Tensor[(2, 16, 3), float32], Tensor[(2, 7, 7), float64], Tensor[(98), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), int32], Tensor[(8, 11, 16), int32], Tensor[(1408), uint64]) {
  %1240 = fn (%var_2242: Tensor[(98), float64], %var_2255: Tensor[(2, 16, 3), float32]) -> (Tensor[(2, 16, 3), float32], Tensor[(2, 7, 7), float64], Tensor[(98), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), int32], Tensor[(8, 11, 16), int32], Tensor[(1408), uint64]) {
    %1216 = @func_2156() /* ty=Tensor[(2, 16, 3), float64] */;
    %1217 = cast(%1216, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
    %1218 = erf(%1217) /* ty=Tensor[(2, 16, 3), float32] */;
    %1219 = cast(%1218, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
    %1220 = shape_of(%1216, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1221 = cast(%1216, dtype="float32") /* ty=Tensor[(2, 16, 3), float32] */;
    %1222 = dyn.reshape(%1219, %1220, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %1223 = cast(%var_2242, dtype="float64") /* ty=Tensor[(98), float64] */;
    %1224 = cast(%var_2242, dtype="float64") /* ty=Tensor[(98), float64] */;
    %1225 = reshape(%1223, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
    %1226 = reshape(%1224, newshape=[2, 7, 7]) /* ty=Tensor[(2, 7, 7), float64] */;
    %1227 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1228 = cast(%var_2255, dtype="int32") /* ty=Tensor[(2, 16, 3), int32] */;
    %1229 = shape_of(%1218, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1230 = cast(%1218, dtype="int32") /* ty=Tensor[(2, 16, 3), int32] */;
    %1231 = dyn.reshape(%1228, %1229, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1232 = cast(meta[relay.Constant][72] /* ty=Tensor[(1408), uint64] */, dtype="uint64") /* ty=Tensor[(1408), uint64] */;
    %1233 = reshape(%1232, newshape=[8, 11, 16]) /* ty=Tensor[(8, 11, 16), uint64] */;
    %1234 = @func_569(%1233) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(8, 11, 16), int32]) */;
    %1235 = floor_mod(%1221, %1222) /* ty=Tensor[(2, 16, 3), float32] */;
    %1236 = @func_667(%1225, %1226) /* ty=Tensor[(2, 7, 7), float64] */;
    %1237 = %1227.0;
    %1238 = right_shift(%1230, %1231) /* ty=Tensor[(2, 16, 3), int32] */;
    %1239 = %1234.1;
    (%1235, %1236, %var_2242, %1237, %1238, %1239, meta[relay.Constant][72] /* ty=Tensor[(1408), uint64] */)
  };
  %1240(%var_2311, %var_2312) /* ty=(Tensor[(2, 16, 3), float32], Tensor[(2, 7, 7), float64], Tensor[(98), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), int32], Tensor[(8, 11, 16), int32], Tensor[(1408), uint64]) */
}

def @func_2215(%var_2213: Tensor[(75), float64], %var_2214: Tensor[(1408, 1), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) {
  %1265 = fn (%var_2187: Tensor[(75), float64], %var_2188: Tensor[(1408, 1), uint64]) -> (Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) {
    %1241 = @func_2166() /* ty=(Tensor[(2, 16, 3), float64],) */;
    %1242 = cast(%var_2187, dtype="float64") /* ty=Tensor[(75), float64] */;
    %1243 = cast(%var_2188, dtype="uint64") /* ty=Tensor[(1408, 1), uint64] */;
    %1244 = cast(meta[relay.Constant][73] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %1245 = reshape(%1242, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
    %1246 = reshape(%1243, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %1247 = reshape(%1244, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %1248 = @func_1857(%1245, %1246, %1247) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
    %1249 = cast(meta[relay.Constant][74] /* ty=Tensor[(55), int32] */, dtype="int32") /* ty=Tensor[(55), int32] */;
    %1250 = cast(meta[relay.Constant][73] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %1251 = reshape(%1249, newshape=[1, 11, 5]) /* ty=Tensor[(1, 11, 5), int32] */;
    %1252 = reshape(%1250, newshape=[13, 11, 5]) /* ty=Tensor[(13, 11, 5), int32] */;
    %1253 = @func_810(%1251, %1252) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(1408), uint64], Tensor[(13, 11, 5), float64], Tensor[(8, 11, 16), int32]) */;
    %1254 = cast(%var_2187, dtype="float64") /* ty=Tensor[(75), float64] */;
    %1255 = %1248.0;
    %1256 = cast(%1255, dtype="uint64") /* ty=Tensor[(8, 11, 16), uint64] */;
    %1257 = cast(meta[relay.Constant][73] /* ty=Tensor[(715), int32] */, dtype="int32") /* ty=Tensor[(715), int32] */;
    %1258 = reshape(%1254, newshape=[15, 5, 1]) /* ty=Tensor[(15, 5, 1), float64] */;
    %1259 = reshape(%1256, newshape=[1408]) /* ty=Tensor[(1408), uint64] */;
    %1260 = reshape(%1257, newshape=[715]) /* ty=Tensor[(715), int32] */;
    %1261 = @func_1857(%1258, %1259, %1260) /* ty=(Tensor[(8, 11, 16), bool], Tensor[(2100), float32], Tensor[(1408), uint64], Tensor[(6, 4, 5), float64], Tensor[(120), float32], Tensor[(8, 11, 16), int32], Tensor[(567), int8], Tensor[(1408), uint64], Tensor[(15, 5, 715), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */;
    %1262 = %1241.0;
    %1263 = %1253.3;
    %1264 = %1261.5;
    (%1262, %1255, %var_2187, %var_2188, meta[relay.Constant][73] /* ty=Tensor[(715), int32] */, %1263, meta[relay.Constant][74] /* ty=Tensor[(55), int32] */, %1264)
  };
  %1265(%var_2213, %var_2214) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(8, 11, 16), bool], Tensor[(75), float64], Tensor[(1408, 1), uint64], Tensor[(715), int32], Tensor[(8, 11, 16), int32], Tensor[(55), int32], Tensor[(8, 11, 16), int32]) */
}

def @func_10040(%var_10038: Tensor[(648), float64]) -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64]) {
  @func_10037(%var_10038) /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(9, ?, 8), bool], Tensor[(648), float64]) */
}

def @func_2339() -> (Tensor[(2, 16, 3), float64],) {
  @func_2337() /* ty=(Tensor[(2, 16, 3), float64],) */
}

def @func_667(%var_662: Tensor[(2, 7, 7), float64], %var_663: Tensor[(2, 7, 7), float64]) -> Tensor[(2, 7, 7), float64] {
  %1266 = cast(%var_663, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %1267 = shape_of(%var_662, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1268 = cast(%var_662, dtype="float64") /* ty=Tensor[(2, 7, 7), float64] */;
  %1269 = dyn.reshape(%1266, %1267, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%1268, %1269) /* ty=Tensor[(2, 7, 7), float64] */
}

def @func_3726() -> Tensor[(2, 16, 3), float64] {
  @func_3507() /* ty=Tensor[(2, 16, 3), float64] */
}

def @func_5278() -> (Tensor[(1408), uint64],) {
  %1270 = @func_3104() /* ty=(Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), bool], Tensor[(1050, 2), float32], Tensor[(1408), uint64]) */;
  %1271 = %1270.3;
  (%1271,)
}

def @func_8319() -> (Tensor[(480), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) {
  @func_8317() /* ty=(Tensor[(480), bool], Tensor[(2, 7, 7), float64], Tensor[(98), float64]) */
}

def @func_3773() -> (Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64], Tensor[(2, 16, 3), float64]) {
  %1272 = @func_3022() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1273 = @func_3456() /* ty=(Tensor[(2, 16, 3), float64],) */;
  %1274 = %1272.0;
  %1275 = %1273.0;
  %1276 = @func_3304() /* ty=Tensor[(2, 16, 3), float64] */;
  (%1274, %1275, %1276)
}

def @func_6108() -> Tensor[(2, 16, 3), float64] {
  %1277 = fn () -> Tensor[(2, 16, 3), float64] {
    @func_4147() /* ty=Tensor[(2, 16, 3), float64] */
  };
  %1277() /* ty=Tensor[(2, 16, 3), float64] */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen481/build/output.py", line 3635, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  98: TVMFuncCall
  97: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  96: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  95: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  94: tvm::transform::Pass::operator()(tvm::IRModule) const
  93: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  92: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  91: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  90: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  89: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  88: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  87: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  86: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  85: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  84: _ZN3tvm5relay1
  83: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  82: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  81: _ZZN3tvm5relay11ExprFunc
  80: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  79: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  78: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  77: tvm::relay::DynamicToStaticMutator::DispatchVisitExpr(tvm::RelayExpr const&)
  76: _ZN3tvm5relay1
  75: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  74: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  73: _ZZN3tvm5relay11ExprFunc
  72: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  71: tvm::relay::DynamicToStaticMutator::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  70: std::_Function_handler<tvm::RelayExpr (tvm::relay::CallNode const*), tvm::relay::DynamicToStaticMutator::DynamicToStaticMutator(tvm::IRModule, tvm::relay::Function)::{lambda(tvm::relay::CallNode const*)#1}>::_M_invoke(std::_Any_data const&, tvm::relay::CallNode const*&&)
  69: tvm::relay::DynamicToStaticMutator::PrepareArgs(tvm::relay::CallNode const*)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:22:21] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

