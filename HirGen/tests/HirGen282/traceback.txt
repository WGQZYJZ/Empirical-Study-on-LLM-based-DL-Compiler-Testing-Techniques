==========mod==========
#[version = "0.0.5"]
def @func_5238() -> Tensor[(?, ?, 14), int8] {
  %0 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %0.0
}

def @func_5591(%var_5580: Tensor[(12, 14, 4), int64], %var_5581: Tensor[(12, 14, 4), int64]) -> Tensor[(12, 14, 4), int64] {
  %1 = cast(%var_5581, dtype="int64") /* ty=Tensor[(12, 14, 4), int64] */;
  %2 = shape_of(%var_5580, dtype="int32") /* ty=Tensor[(3), int32] */;
  %3 = cast(%var_5580, dtype="int64") /* ty=Tensor[(12, 14, 4), int64] */;
  %4 = dyn.reshape(%1, %2, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  subtract(%3, %4) /* ty=Tensor[(12, 14, 4), int64] */
}

def @func_89(%var_75: Tensor[(16, 5, 8), uint16]) -> (Tensor[(16, 5, 8), bool], Tensor[(16, 5, 8), float32]) {
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 5, 8), uint16] */, dtype="bool") /* ty=Tensor[(16, 5, 8), bool] */;
  %6 = shape_of(%var_75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %7 = cast(%var_75, dtype="bool") /* ty=Tensor[(16, 5, 8), bool] */;
  %8 = dyn.reshape(%5, %6, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %9 = cast(meta[relay.Constant][0] /* ty=Tensor[(16, 5, 8), uint16] */, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %10 = less_equal(%7, %8) /* ty=Tensor[(16, 5, 8), bool] */;
  %11 = tan(%9) /* ty=Tensor[(16, 5, 8), float32] */;
  (%10, %11)
}

def @func_5396(%var_5370: Tensor[(75, 2), float32], %var_5376: Tensor[(75, 2), float32], %var_5386: Tensor[(896), float32]) -> (Tensor[(9, 4, 14), uint64], Tensor[(5, 10, 3), float32], Tensor[(75, 2), uint16], Tensor[(9, 4, 14), float64], Tensor[(4, 14, 16), float32], Tensor[(896), float32], Tensor[(75, 2), float32]) {
  %12 = @func_5238() /* ty=Tensor[(?, ?, 14), int8] */;
  %13 = cast(%12, dtype="uint64") /* ty=Tensor[(?, ?, 14), uint64] */;
  %14 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 4, 14), int8] */, dtype="uint64") /* ty=Tensor[(9, 4, 14), uint64] */;
  %15 = cast(%var_5370, dtype="float32") /* ty=Tensor[(75, 2), float32] */;
  %16 = reshape(%15, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %17 = @func_281(%16) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %18 = cast(%var_5376, dtype="uint16") /* ty=Tensor[(75, 2), uint16] */;
  %19 = shape_of(%var_5370, dtype="int32") /* ty=Tensor[(2), int32] */;
  %20 = cast(%var_5370, dtype="uint16") /* ty=Tensor[(75, 2), uint16] */;
  %21 = dyn.reshape(%18, %19, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %22 = cast(meta[relay.Constant][1] /* ty=Tensor[(9, 4, 14), int8] */, dtype="float64") /* ty=Tensor[(9, 4, 14), float64] */;
  %23 = cast(%var_5386, dtype="float32") /* ty=Tensor[(896), float32] */;
  %24 = reshape(%23, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float32] */;
  %25 = @func_3832(%24) /* ty=(Tensor[(4, 14, 16), float32],) */;
  %26 = cast(%var_5370, dtype="float32") /* ty=Tensor[(75, 2), float32] */;
  %27 = multiply(%13, %14) /* ty=Tensor[(9, 4, 14), uint64] */;
  %28 = %17.0;
  %29 = right_shift(%20, %21) /* ty=Tensor[(75, 2), uint16] */;
  %30 = sqrt(%22) /* ty=Tensor[(9, 4, 14), float64] */;
  %31 = %25.0;
  %32 = asinh(%26) /* ty=Tensor[(75, 2), float32] */;
  (%27, %28, %29, %30, %31, %var_5386, %32)
}

def @func_7295() -> Tensor[(10, 16, 15), float32] {
  %33 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
  %33.0
}

def @func_7866() -> Tensor[(?, ?, 14), int8] {
  %34 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %34.0
}

def @func_6131(%var_6064: Tensor[(10, 1, 6), float32], %var_6078: Tensor[(450), float64], %var_6086: Tensor[(432), float32]) -> (Tensor[(10, 1, 6), float32], Tensor[(588), float64], Tensor[(192), float32], Tensor[(7, 6), float64], Tensor[(5, 6, 15), float32], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 12, 5), float32], Tensor[(432), float32], Tensor[(?, ?, 14), int8]) {
  %35 = cast(%var_6064, dtype="float32") /* ty=Tensor[(10, 1, 6), float32] */;
  %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %37 = cast(meta[relay.Constant][3] /* ty=Tensor[(7, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %38 = reshape(%36, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %39 = reshape(%37, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %40 = @func_5869(%38, %39) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %41 = cast(%var_6078, dtype="float64") /* ty=Tensor[(450), float64] */;
  %42 = cast(meta[relay.Constant][4] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %43 = cast(meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %44 = cast(meta[relay.Constant][6] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %45 = reshape(%41, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %46 = reshape(%42, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %47 = reshape(%43, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %48 = reshape(%44, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %49 = @func_4545(%45, %46, %47, %48) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */;
  %50 = cast(%var_6086, dtype="float32") /* ty=Tensor[(432), float32] */;
  %51 = reshape(%50, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %52 = @func_2142(%51) /* ty=(Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) */;
  %53 = log2(%35) /* ty=Tensor[(10, 1, 6), float32] */;
  %54 = %40.2;
  %55 = %49.9;
  %56 = %52.1;
  %57 = @func_5321() /* ty=Tensor[(?, ?, 14), int8] */;
  (%53, %54, meta[relay.Constant][2] /* ty=Tensor[(192), float32] */, meta[relay.Constant][3] /* ty=Tensor[(7, 6), float64] */, %55, %var_6078, meta[relay.Constant][4] /* ty=Tensor[(84), bool] */, meta[relay.Constant][5] /* ty=Tensor[(480), float64] */, meta[relay.Constant][6] /* ty=Tensor[(120), bool] */, %56, %var_6086, %57)
}

def @func_1421(%var_1394: Tensor[(3, 8, 2), float64], %var_1395: Tensor[(3, 8, 2), float64], %var_1414: Tensor[(150), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), bool], Tensor[(560), uint64], Tensor[(117, 2), float32], Tensor[(150), float32], Tensor[(5, 10, 3), float32]) {
  %58 = cast(%var_1395, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %59 = shape_of(%var_1394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %60 = cast(%var_1394, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
  %61 = dyn.reshape(%58, %59, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %62 = cast(%var_1395, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %63 = shape_of(%var_1394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %64 = cast(%var_1394, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
  %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %66 = cast(meta[relay.Constant][7] /* ty=Tensor[(117, 2), float32] */, dtype="float32") /* ty=Tensor[(117, 2), float32] */;
  %67 = cast(%var_1414, dtype="float32") /* ty=Tensor[(150), float32] */;
  %68 = reshape(%66, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %69 = reshape(%67, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %70 = @func_754(%68, %69) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %71 = cast(%var_1414, dtype="float32") /* ty=Tensor[(150), float32] */;
  %72 = reshape(%71, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %73 = @func_281(%72) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %74 = minimum(%60, %61) /* ty=Tensor[(3, 8, 2), float64] */;
  %75 = equal(%64, %65) /* ty=Tensor[(3, 8, 2), bool] */;
  %76 = %70.3;
  %77 = %73.0;
  (%74, %75, %76, meta[relay.Constant][7] /* ty=Tensor[(117, 2), float32] */, %var_1414, %77)
}

def @func_7272(%var_7246: Tensor[(512), bool], %var_7258: Tensor[(1232), int8]) -> (Tensor[(?, ?, 14), float64], Tensor[(16, 4, 8), bool], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(165), float64], Tensor[(1232), int8], Tensor[(33, 5), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(70, 6), float32]) {
  %78 = cast(meta[relay.Constant][8] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %79 = cast(%var_7246, dtype="bool") /* ty=Tensor[(512), bool] */;
  %80 = reshape(%78, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %81 = reshape(%79, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %82 = @func_397(%80, %81) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
  %83 = cast(%var_7258, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %84 = cast(%var_7258, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %85 = cast(meta[relay.Constant][9] /* ty=Tensor[(33, 5), float64] */, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %86 = cast(meta[relay.Constant][10] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %87 = cast(meta[relay.Constant][11] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %88 = cast(meta[relay.Constant][12] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %89 = reshape(%83, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %90 = reshape(%84, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %91 = reshape(%85, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %92 = reshape(%86, newshape=[1, 420]) /* ty=Tensor[(1, 420), float64] */;
  %93 = reshape(%87, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %94 = reshape(%88, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %95 = @func_5297(%89, %90, %91, %92, %93, %94) /* ty=(Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) */;
  %96 = cast(meta[relay.Constant][10] /* ty=Tensor[(70, 6), float64] */, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %97 = @func_5708() /* ty=Tensor[(?, ?, 14), float64] */;
  %98 = %82.2;
  %99 = %95.1;
  %100 = exp(%96) /* ty=Tensor[(70, 6), float32] */;
  (%97, %98, meta[relay.Constant][8] /* ty=Tensor[(560), uint64] */, %var_7246, %99, %var_7258, meta[relay.Constant][9] /* ty=Tensor[(33, 5), float64] */, meta[relay.Constant][11] /* ty=Tensor[(150), float32] */, meta[relay.Constant][12] /* ty=Tensor[(1344), uint8] */, %100)
}

def @func_397(%var_365: Tensor[(560), uint64], %var_384: Tensor[(512), bool]) -> (Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) {
  %101 = cast(%var_365, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %102 = cast(%var_365, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %103 = reshape(%101, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %104 = reshape(%102, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %105 = cast(%var_384, dtype="bool") /* ty=Tensor[(512), bool] */;
  %106 = cast(%var_384, dtype="bool") /* ty=Tensor[(512), bool] */;
  %107 = reshape(%105, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), bool] */;
  %108 = reshape(%106, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), bool] */;
  %109 = @func_125(%107, %108) /* ty=(Tensor[(16, 4, 8), bool],) */;
  %110 = cast(meta[relay.Constant][13] /* ty=Tensor[(6, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 11), float32] */;
  %111 = sinh(%110) /* ty=Tensor[(6, 4, 11), float32] */;
  %112 = cast(meta[relay.Constant][14] /* ty=Tensor[(6, 4, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 4, 11), bool] */;
  %113 = shape_of(%111, dtype="int32") /* ty=Tensor[(3), int32] */;
  %114 = cast(%111, dtype="bool") /* ty=Tensor[(6, 4, 11), bool] */;
  %115 = dyn.reshape(%112, %113, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %116 = @func_340(%103, %104) /* ty=Tensor[(7, 5, 16), uint64] */;
  %117 = %109.0;
  %118 = greater_equal(%114, %115) /* ty=Tensor[(6, 4, 11), bool] */;
  (%116, %var_365, %117, %var_384, %118)
}

def @func_7777(%var_7743: Tensor[(7, 5, 8), float32]) -> (Tensor[(7, 5, 8), bool], Tensor[(7, 5, 8), bool]) {
  %119 = @func_7689() /* ty=(Tensor[(7, 5, 8), float32],) */;
  %120 = %119.0;
  %121 = cast(%var_7743, dtype="uint16") /* ty=Tensor[(7, 5, 8), uint16] */;
  %122 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %123 = cast(%120, dtype="uint16") /* ty=Tensor[(7, 5, 8), uint16] */;
  %124 = dyn.reshape(%121, %122, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %125 = maximum(%123, %124) /* ty=Tensor[(7, 5, 8), uint16] */;
  %126 = cast(%125, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
  %127 = shape_of(%120, dtype="int32") /* ty=Tensor[(3), int32] */;
  %128 = cast(%120, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
  %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %130 = cast(%120, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
  %131 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
  %132 = cast(%125, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
  %133 = dyn.reshape(%130, %131, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %134 = greater_equal(%128, %129) /* ty=Tensor[(7, 5, 8), bool] */;
  %135 = logical_and(%132, %133) /* ty=Tensor[(7, 5, 8), bool] */;
  (%134, %135)
}

def @func_3983(%var_3980: Tensor[(120), bool]) -> (Tensor[(9, 9), float32], Tensor[(40), bool], Tensor[(1, 480), float64], Tensor[(120), bool]) {
  %136 = cast(meta[relay.Constant][15] /* ty=Tensor[(9, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
  %137 = cast(meta[relay.Constant][16] /* ty=Tensor[(1, 480), float64] */, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
  %138 = cast(%var_3980, dtype="bool") /* ty=Tensor[(120), bool] */;
  %139 = reshape(%137, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %140 = reshape(%138, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %141 = @func_2402(%139, %140) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) */;
  %142 = atan(%136) /* ty=Tensor[(9, 9), float32] */;
  %143 = %141.2;
  (%142, %143, meta[relay.Constant][16] /* ty=Tensor[(1, 480), float64] */, %var_3980)
}

def @func_4868(%var_4839: Tensor[(1344, 1), uint8]) -> (Tensor[(11, 11, 9), bool], Tensor[(2, 9, 13), bool], Tensor[(1, 234), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(1344, 1), uint8], Tensor[(11, 11, 9), float32]) {
  %144 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="bool") /* ty=Tensor[(11, 11, 9), bool] */;
  %145 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="bool") /* ty=Tensor[(11, 11, 9), bool] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %148 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 234), float32] */, dtype="float32") /* ty=Tensor[(1, 234), float32] */;
  %149 = cast(meta[relay.Constant][20] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %150 = reshape(%148, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %151 = reshape(%149, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %152 = @func_754(%150, %151) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %153 = cast(%var_4839, dtype="uint8") /* ty=Tensor[(1344, 1), uint8] */;
  %154 = cast(%var_4839, dtype="uint8") /* ty=Tensor[(1344, 1), uint8] */;
  %155 = %152.0;
  %156 = cast(%155, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
  %157 = reshape(%153, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %158 = reshape(%154, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %159 = reshape(%156, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %160 = @func_3676(%157, %158, %159) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */;
  %161 = cast(meta[relay.Constant][18] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="float32") /* ty=Tensor[(11, 11, 9), float32] */;
  %162 = greater(%146, %147) /* ty=Tensor[(11, 11, 9), bool] */;
  %163 = %160.1;
  %164 = atan(%161) /* ty=Tensor[(11, 11, 9), float32] */;
  (%162, %155, meta[relay.Constant][19] /* ty=Tensor[(1, 234), float32] */, meta[relay.Constant][20] /* ty=Tensor[(150), float32] */, %163, %var_4839, %164)
}

def @func_8539(%var_8483: Tensor[(1, 420), float64], %var_8484: Tensor[(150), float32]) -> (Tensor[(?, ?, 14), float64], Tensor[(7, 5, 8), float32], Tensor[(1344), uint8], Tensor[(1232), int8], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8]) {
  %165 = @func_7829() /* ty=(Tensor[(7, 5, 8), float32],) */;
  %166 = cast(meta[relay.Constant][21] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %167 = cast(meta[relay.Constant][21] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %168 = cast(meta[relay.Constant][22] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %169 = cast(%var_8483, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %170 = cast(%var_8484, dtype="float32") /* ty=Tensor[(150), float32] */;
  %171 = cast(meta[relay.Constant][23] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %172 = reshape(%166, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %173 = reshape(%167, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %174 = reshape(%168, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %175 = reshape(%169, newshape=[1, 420]) /* ty=Tensor[(1, 420), float64] */;
  %176 = reshape(%170, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %177 = reshape(%171, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %178 = @func_5297(%172, %173, %174, %175, %176, %177) /* ty=(Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) */;
  %179 = @func_5708() /* ty=Tensor[(?, ?, 14), float64] */;
  %180 = %165.0;
  %181 = %178.4;
  (%179, %180, %181, meta[relay.Constant][21] /* ty=Tensor[(1232), int8] */, meta[relay.Constant][22] /* ty=Tensor[(165), float64] */, %var_8483, %var_8484, meta[relay.Constant][23] /* ty=Tensor[(1344), uint8] */)
}

def @func_8209() -> (Tensor[(11, 13, 14), float64],) {
  %182 = @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */;
  %183 = %182.0;
  (%183,)
}

def @func_6981(%var_6920: Tensor[(72), bool]) -> (Tensor[(4, 3, 6), bool], Tensor[(72), bool], Tensor[(16, 13, 14), float64], Tensor[(16, 13, 14), float64], Tensor[(108), float64], Tensor[(10, 16, 15), float32]) {
  %184 = cast(%var_6920, dtype="bool") /* ty=Tensor[(72), bool] */;
  %185 = cast(%var_6920, dtype="bool") /* ty=Tensor[(72), bool] */;
  %186 = reshape(%184, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), bool] */;
  %187 = reshape(%185, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), bool] */;
  %188 = @func_2892(%186, %187) /* ty=(Tensor[(4, 3, 6), bool],) */;
  %189 = @func_6832() /* ty=Tensor[(16, 13, 14), float32] */;
  %190 = cast(%189, dtype="float64") /* ty=Tensor[(16, 13, 14), float64] */;
  %191 = cast(%189, dtype="float64") /* ty=Tensor[(16, 13, 14), float64] */;
  %192 = @func_6705() /* ty=(Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(450), float64], Tensor[(120), bool]) */;
  %193 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
  %194 = %188.0;
  %195 = sqrt(%190) /* ty=Tensor[(16, 13, 14), float64] */;
  %196 = acos(%191) /* ty=Tensor[(16, 13, 14), float64] */;
  %197 = %192.2;
  %198 = %193.0;
  (%194, %var_6920, %195, %196, %197, %198)
}

def @func_2402(%var_2381: Tensor[(3, 10, 16), float64], %var_2395: Tensor[(120), bool]) -> (Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) {
  %199 = cast(meta[relay.Constant][24] /* ty=Tensor[(3, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %200 = shape_of(%var_2381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %201 = cast(%var_2381, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %202 = dyn.reshape(%199, %200, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %203 = cast(meta[relay.Constant][25] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %204 = cast(%var_2395, dtype="bool") /* ty=Tensor[(120), bool] */;
  %205 = reshape(%203, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), bool] */;
  %206 = reshape(%204, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), bool] */;
  %207 = floor_mod(%201, %202) /* ty=Tensor[(3, 10, 16), float64] */;
  %208 = @func_2013(%205, %206) /* ty=Tensor[(3, 5, 8), bool] */;
  (%207, %208, meta[relay.Constant][25] /* ty=Tensor[(40), bool] */, %var_2395)
}

def @func_5535(%var_5522: int32, %var_5523: Tensor[(5, 7, 7), int32]) -> Tensor[(5, 7, 7), int32] {
  %209 = cast(%var_5522, dtype="int32") /* ty=int32 */;
  %210 = cast(%var_5523, dtype="int32") /* ty=Tensor[(5, 7, 7), int32] */;
  bitwise_and(%209, %210) /* ty=Tensor[(5, 7, 7), int32] */
}

def @func_6832() -> Tensor[(16, 13, 14), float32] {
  %211 = @func_6049() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %212 = %211.0;
  %213 = cast(%212, dtype="float32") /* ty=Tensor[(?, ?, 14), float32] */;
  %214 = cast(meta[relay.Constant][26] /* ty=Tensor[(16, 13, 14), int8] */, dtype="float32") /* ty=Tensor[(16, 13, 14), float32] */;
  minimum(%213, %214) /* ty=Tensor[(16, 13, 14), float32] */
}

def @func_6840() -> Tensor[(?, ?, 14), int8] {
  %215 = @func_6450() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %215.0
}

def @func_5869(%var_5837: Tensor[(4, 6, 8), float32], %var_5849: Tensor[(7, 6), float64]) -> (Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) {
  %216 = cast(%var_5849, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %217 = cast(meta[relay.Constant][27] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %218 = reshape(%216, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
  %219 = reshape(%217, newshape=[3, 14, 14]) /* ty=Tensor[(3, 14, 14), float64] */;
  %220 = @func_4987(%218, %219) /* ty=(Tensor[(3, 14, 14), float64],) */;
  %221 = cast(%var_5837, dtype="float32") /* ty=Tensor[(4, 6, 8), float32] */;
  %222 = tan(%221) /* ty=Tensor[(4, 6, 8), float32] */;
  %223 = cast(%222, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %224 = shape_of(%var_5837, dtype="int32") /* ty=Tensor[(3), int32] */;
  %225 = cast(%var_5837, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
  %226 = dyn.reshape(%223, %224, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %227 = greater_equal(%225, %226) /* ty=Tensor[(4, 6, 8), bool] */;
  %228 = cast(%222, dtype="uint8") /* ty=Tensor[(4, 6, 8), uint8] */;
  %229 = shape_of(%227, dtype="int32") /* ty=Tensor[(3), int32] */;
  %230 = cast(%227, dtype="uint8") /* ty=Tensor[(4, 6, 8), uint8] */;
  %231 = dyn.reshape(%228, %229, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %232 = %220.0;
  %233 = add(%230, %231) /* ty=Tensor[(4, 6, 8), uint8] */;
  (%232, %var_5849, meta[relay.Constant][27] /* ty=Tensor[(588), float64] */, %233)
}

def @func_4318(%var_4304: Tensor[(14, 6, 1), bool], %var_4305: Tensor[(14, 6, 8), bool], %var_4315: Tensor[(512), bool]) -> (Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) {
  %234 = cast(%var_4304, dtype="bool") /* ty=Tensor[(14, 6, 1), bool] */;
  %235 = cast(%var_4305, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
  %236 = logical_or(%234, %235) /* ty=Tensor[(14, 6, 8), bool] */;
  %237 = cast(%236, dtype="float32") /* ty=Tensor[(14, 6, 8), float32] */;
  %238 = cast(meta[relay.Constant][28] /* ty=Tensor[(4, 140), uint64] */, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
  %239 = cast(%var_4315, dtype="bool") /* ty=Tensor[(512), bool] */;
  %240 = reshape(%238, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %241 = reshape(%239, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %242 = @func_397(%240, %241) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
  %243 = log(%237) /* ty=Tensor[(14, 6, 8), float32] */;
  %244 = %242.0;
  (%243, %244, meta[relay.Constant][28] /* ty=Tensor[(4, 140), uint64] */, %var_4315)
}

def @func_700(%var_692: Tensor[(5, 12, 5), float32]) -> Tensor[(5, 12, 5), float32] {
  %245 = cast(meta[relay.Constant][29] /* ty=Tensor[(5, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 5), float32] */;
  %246 = shape_of(%var_692, dtype="int32") /* ty=Tensor[(3), int32] */;
  %247 = cast(%var_692, dtype="float32") /* ty=Tensor[(5, 12, 5), float32] */;
  %248 = dyn.reshape(%245, %246, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  floor_mod(%247, %248) /* ty=Tensor[(5, 12, 5), float32] */
}

def @func_7187(%var_7181: Tensor[(4, 1, 1), uint16], %var_7182: Tensor[(4, 13, 14), uint16]) -> (Tensor[(4, 13, 14), uint16],) {
  %249 = cast(%var_7181, dtype="uint16") /* ty=Tensor[(4, 1, 1), uint16] */;
  %250 = cast(%var_7182, dtype="uint16") /* ty=Tensor[(4, 13, 14), uint16] */;
  %251 = right_shift(%249, %250) /* ty=Tensor[(4, 13, 14), uint16] */;
  (%251,)
}

def @func_6818() -> Tensor[(6, ?, 5), bool] {
  %252 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %252.0
}

def @func_5708() -> Tensor[(?, ?, 14), float64] {
  %253 = @func_5464() /* ty=Tensor[(?, ?, 14), int64] */;
  %254 = cast(%253, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
  exp(%254) /* ty=Tensor[(?, ?, 14), float64] */
}

def @func_1000(%var_963: Tensor[(9, 3, 4), float64], %var_966: Tensor[(9, 3, 4), float64]) -> (Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) {
  %255 = cast(%var_963, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
  %256 = atan(%255) /* ty=Tensor[(9, 3, 4), float64] */;
  %257 = cast(%var_966, dtype="int16") /* ty=Tensor[(9, 3, 4), int16] */;
  %258 = shape_of(%256, dtype="int32") /* ty=Tensor[(3), int32] */;
  %259 = cast(%256, dtype="int16") /* ty=Tensor[(9, 3, 4), int16] */;
  %260 = dyn.reshape(%257, %258, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %261 = cast(meta[relay.Constant][30] /* ty=Tensor[(20, 32), uint16] */, dtype="uint16") /* ty=Tensor[(20, 32), uint16] */;
  %262 = reshape(%261, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), uint16] */;
  %263 = @func_89(%262) /* ty=(Tensor[(16, 5, 8), bool], Tensor[(16, 5, 8), float32]) */;
  %264 = left_shift(%259, %260) /* ty=Tensor[(9, 3, 4), int16] */;
  %265 = %263.1;
  (%264, %265, meta[relay.Constant][30] /* ty=Tensor[(20, 32), uint16] */)
}

def @func_4545(%var_4456: Tensor[(5, 6, 15), float64], %var_4490: Tensor[(84), bool], %var_4507: Tensor[(480), float64], %var_4508: Tensor[(120), bool]) -> (Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) {
  %266 = cast(%var_4490, dtype="bool") /* ty=Tensor[(84), bool] */;
  %267 = cast(meta[relay.Constant][31] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %268 = cast(meta[relay.Constant][32] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %269 = reshape(%266, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), bool] */;
  %270 = reshape(%267, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), bool] */;
  %271 = reshape(%268, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %272 = @func_4318(%269, %270, %271) /* ty=(Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) */;
  %273 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %274 = cast(meta[relay.Constant][33] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %275 = reshape(%273, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %276 = reshape(%274, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %277 = cast(%var_4507, dtype="float64") /* ty=Tensor[(480), float64] */;
  %278 = cast(%var_4508, dtype="bool") /* ty=Tensor[(120), bool] */;
  %279 = reshape(%277, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %280 = reshape(%278, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %281 = @func_2402(%279, %280) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) */;
  %282 = cast(%var_4456, dtype="float64") /* ty=Tensor[(5, 6, 15), float64] */;
  %283 = sqrt(%282) /* ty=Tensor[(5, 6, 15), float64] */;
  %284 = cast(%283, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %285 = cosh(%284) /* ty=Tensor[(5, 6, 15), float32] */;
  %286 = cast(%285, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %287 = cast(%285, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %288 = %272.3;
  %289 = @func_340(%275, %276) /* ty=Tensor[(7, 5, 16), uint64] */;
  %290 = %281.0;
  %291 = sinh(%286) /* ty=Tensor[(5, 6, 15), float32] */;
  %292 = asinh(%287) /* ty=Tensor[(5, 6, 15), float32] */;
  (%288, %var_4490, meta[relay.Constant][31] /* ty=Tensor[(672), bool] */, meta[relay.Constant][32] /* ty=Tensor[(512), bool] */, %289, meta[relay.Constant][33] /* ty=Tensor[(560), uint64] */, %290, %var_4507, %var_4508, %291, %292)
}

def @func_7516() -> Tensor[(?, ?, 14), int16] {
  %293 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %294 = %293.0;
  %295 = cast(%294, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
  %296 = acosh(%295) /* ty=Tensor[(?, ?, 14), float64] */;
  %297 = cast(%294, dtype="int16") /* ty=Tensor[(?, ?, 14), int16] */;
  %298 = shape_of(%296, dtype="int32") /* ty=Tensor[(3), int32] */;
  %299 = cast(%296, dtype="int16") /* ty=Tensor[(?, ?, 14), int16] */;
  %300 = dyn.reshape(%297, %298, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  logical_xor(%299, %300) /* ty=Tensor[(?, ?, 14), int16] */
}

def @func_8192() -> Tensor[(11, 13, 14), float64] {
  %301 = @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */;
  %301.0
}

def @func_4931(%var_4905: Tensor[(15, 11, 1), float64], %var_4917: Tensor[(420), float64], %var_4920: Tensor[(5, 30), float32]) -> (Tensor[(15, 11, ?), float64], Tensor[(14, 5, 6), float64], Tensor[(420), float64], Tensor[(5, 10, 3), float32], Tensor[(5, 30), float32]) {
  %302 = cast(%var_4905, dtype="float64") /* ty=Tensor[(15, 11, 1), float64] */;
  %303 = shape_of(meta[relay.Constant][34] /* ty=Tensor[(15, 11, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %304 = cast(meta[relay.Constant][34] /* ty=Tensor[(15, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 1), float64] */;
  %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %306 = cast(%var_4917, dtype="float64") /* ty=Tensor[(420), float64] */;
  %307 = cast(%var_4917, dtype="float64") /* ty=Tensor[(420), float64] */;
  %308 = reshape(%306, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %309 = reshape(%307, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %310 = @func_1109(%308, %309) /* ty=(Tensor[(14, 5, 6), float64],) */;
  %311 = cast(%var_4920, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %312 = reshape(%311, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %313 = @func_281(%312) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %314 = power(%304, %305) /* ty=Tensor[(15, 11, ?), float64] */;
  %315 = %310.0;
  %316 = %313.0;
  (%314, %315, %var_4917, %316, %var_4920)
}

def @func_5506() -> (Tensor[(?, ?, 14), int64],) {
  %317 = @func_5464() /* ty=Tensor[(?, ?, 14), int64] */;
  (%317,)
}

def @func_6450() -> (Tensor[(?, ?, 14), int8],) {
  %318 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %319 = %318.0;
  (%319,)
}

def @func_8317(%var_8253: Tensor[(192), float32], %var_8254: Tensor[(42), float64], %var_8292: Tensor[(560), uint64]) -> (Tensor[(?, ?, 14), int8], Tensor[(192), float32], Tensor[(42), float64], Tensor[(10, 16, 15), float32], Tensor[(?, ?, 14), int8], Tensor[(300, 588), bool], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(7, 5, 8), float32]) {
  %320 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %321 = cast(%var_8253, dtype="float32") /* ty=Tensor[(192), float32] */;
  %322 = cast(%var_8254, dtype="float64") /* ty=Tensor[(42), float64] */;
  %323 = reshape(%321, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %324 = reshape(%322, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %325 = @func_5869(%323, %324) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %326 = %325.2;
  %327 = cast(%326, dtype="float64") /* ty=Tensor[(588), float64] */;
  %328 = exp(%327) /* ty=Tensor[(588), float64] */;
  %329 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %330 = %329.1;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(588), bool] */;
  %332 = cast(%330, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %333 = cast(%var_8292, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %334 = cast(meta[relay.Constant][35] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %335 = reshape(%333, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %336 = reshape(%334, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %337 = @func_397(%335, %336) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
  %338 = @func_7829() /* ty=(Tensor[(7, 5, 8), float32],) */;
  %339 = %320.0;
  %340 = @func_8126() /* ty=Tensor[(10, 16, 15), float32] */;
  %341 = @func_5238() /* ty=Tensor[(?, ?, 14), int8] */;
  %342 = less(%331, %332) /* ty=Tensor[(300, 588), bool] */;
  %343 = %337.1;
  %344 = %338.0;
  (%339, %var_8253, %var_8254, %340, %341, %342, %343, %var_8292, meta[relay.Constant][35] /* ty=Tensor[(512), bool] */, %344)
}

def @func_6264(%var_6234: Tensor[(450), float64], %var_6236: Tensor[(480), float64], %var_6242: Tensor[(108), float64]) -> (Tensor[(1, 42), float64], Tensor[(4, 12, 14), int8], Tensor[(13, 3, 6), bool], Tensor[(234), int64], Tensor[(3, 14, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(7, 5, 16), uint64], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(9, 3, 4), int16], Tensor[(108), float64]) {
  %345 = @func_5506() /* ty=(Tensor[(?, ?, 14), int64],) */;
  %346 = %345.0;
  %347 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 14), int64] */, dtype="int8") /* ty=Tensor[(4, 12, 14), int8] */;
  %348 = cast(%346, dtype="int8") /* ty=Tensor[(?, ?, 14), int8] */;
  %349 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
  %350 = cast(meta[relay.Constant][38] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
  %351 = reshape(%349, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int64] */;
  %352 = reshape(%350, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int64] */;
  %353 = @func_3325(%351, %352) /* ty=(Tensor[(13, 3, 6), bool],) */;
  %354 = cast(meta[relay.Constant][36] /* ty=Tensor[(1, 42), float64] */, dtype="float64") /* ty=Tensor[(1, 42), float64] */;
  %355 = cast(meta[relay.Constant][39] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
  %356 = reshape(%354, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
  %357 = reshape(%355, newshape=[3, 14, 14]) /* ty=Tensor[(3, 14, 14), float64] */;
  %358 = @func_4987(%356, %357) /* ty=(Tensor[(3, 14, 14), float64],) */;
  %359 = %358.0;
  %360 = cast(meta[relay.Constant][39] /* ty=Tensor[(588), float64] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %361 = shape_of(%359, dtype="int32") /* ty=Tensor[(3), int32] */;
  %362 = cast(%359, dtype="float32") /* ty=Tensor[(3, 14, 14), float32] */;
  %363 = dyn.reshape(%360, %361, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %364 = cast(%346, dtype="int32") /* ty=Tensor[(?, ?, 14), int32] */;
  %365 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 14), int64] */, dtype="int32") /* ty=Tensor[(4, 12, 14), int32] */;
  %366 = add(%364, %365) /* ty=Tensor[(4, 12, 14), int32] */;
  %367 = cast(meta[relay.Constant][37] /* ty=Tensor[(4, 12, 14), int64] */, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = cast(%var_6234, dtype="float64") /* ty=Tensor[(450), float64] */;
  %372 = cast(meta[relay.Constant][40] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %373 = cast(%var_6236, dtype="float64") /* ty=Tensor[(480), float64] */;
  %374 = cast(meta[relay.Constant][41] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %375 = reshape(%371, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %376 = reshape(%372, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %377 = reshape(%373, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %378 = reshape(%374, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %379 = @func_4545(%375, %376, %377, %378) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */;
  %380 = cast(%var_6242, dtype="float64") /* ty=Tensor[(108), float64] */;
  %381 = cast(%var_6242, dtype="float64") /* ty=Tensor[(108), float64] */;
  %382 = reshape(%380, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
  %383 = reshape(%381, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
  %384 = @func_1000(%382, %383) /* ty=(Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) */;
  %385 = bitwise_or(%347, %348) /* ty=Tensor[(4, 12, 14), int8] */;
  %386 = %353.0;
  %387 = maximum(%362, %363) /* ty=Tensor[(3, 14, 14), float32] */;
  %388 = greater_equal(%369, %370) /* ty=Tensor[(4, 12, 14), bool] */;
  %389 = %379.4;
  %390 = %384.0;
  (meta[relay.Constant][36] /* ty=Tensor[(1, 42), float64] */, %385, %386, meta[relay.Constant][38] /* ty=Tensor[(234), int64] */, %387, %388, %389, %var_6234, meta[relay.Constant][40] /* ty=Tensor[(84), bool] */, %var_6236, meta[relay.Constant][41] /* ty=Tensor[(120), bool] */, %390, %var_6242)
}

def @func_2204(%var_2193: Tensor[(16, 11, 8), int32], %var_2194: Tensor[(16, 11, 8), int32]) -> Tensor[(16, 11, 8), int32] {
  %391 = cast(%var_2194, dtype="int32") /* ty=Tensor[(16, 11, 8), int32] */;
  %392 = shape_of(%var_2193, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%var_2193, dtype="int32") /* ty=Tensor[(16, 11, 8), int32] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  multiply(%393, %394) /* ty=Tensor[(16, 11, 8), int32] */
}

def @func_5738() -> (Tensor[(?, ?, 14), int8],) {
  %395 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %396 = %395.0;
  (%396,)
}

def @func_5980(%var_5937: Tensor[(108), float64], %var_5955: Tensor[(10, 45), float64], %var_5958: Tensor[(120), bool]) -> (Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(120), bool], Tensor[(21, 4), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(10, 45), float64]) {
  %397 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %398 = cast(%var_5937, dtype="float64") /* ty=Tensor[(108), float64] */;
  %399 = cast(%var_5937, dtype="float64") /* ty=Tensor[(108), float64] */;
  %400 = reshape(%398, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
  %401 = reshape(%399, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
  %402 = @func_1000(%400, %401) /* ty=(Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) */;
  %403 = cast(%var_5955, dtype="float64") /* ty=Tensor[(10, 45), float64] */;
  %404 = cast(meta[relay.Constant][42] /* ty=Tensor[(21, 4), bool] */, dtype="bool") /* ty=Tensor[(21, 4), bool] */;
  %405 = cast(meta[relay.Constant][43] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %406 = cast(%var_5958, dtype="bool") /* ty=Tensor[(120), bool] */;
  %407 = reshape(%403, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %408 = reshape(%404, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %409 = reshape(%405, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %410 = reshape(%406, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %411 = @func_4545(%407, %408, %409, %410) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */;
  %412 = cast(%var_5955, dtype="float64") /* ty=Tensor[(10, 45), float64] */;
  %413 = %397.0;
  %414 = %402.1;
  %415 = %411.8;
  %416 = cosh(%412) /* ty=Tensor[(10, 45), float64] */;
  (%413, %414, %var_5937, %415, meta[relay.Constant][42] /* ty=Tensor[(21, 4), bool] */, meta[relay.Constant][43] /* ty=Tensor[(480), float64] */, %var_5958, %416)
}

def @func_2736(%var_2706: Tensor[(8, 6, 13), uint16], %var_2707: Tensor[(8, 6, 13), uint16]) -> Tensor[(8, 6, 13), bool] {
  %417 = cast(%var_2707, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %418 = shape_of(%var_2706, dtype="int32") /* ty=Tensor[(3), int32] */;
  %419 = cast(%var_2706, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%419, %420) /* ty=Tensor[(8, 6, 13), bool] */
}

def @func_1313(%var_1302: Tensor[(5, 7, 1), float64]) -> (Tensor[(5, 7, 1), float64], Tensor[(14, 5, 6), float64], Tensor[(10, 42), float64]) {
  %421 = cast(%var_1302, dtype="float64") /* ty=Tensor[(5, 7, 1), float64] */;
  %422 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %423 = cast(meta[relay.Constant][44] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %424 = reshape(%422, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %425 = reshape(%423, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %426 = @func_1109(%424, %425) /* ty=(Tensor[(14, 5, 6), float64],) */;
  %427 = asin(%421) /* ty=Tensor[(5, 7, 1), float64] */;
  %428 = %426.0;
  (%427, %428, meta[relay.Constant][44] /* ty=Tensor[(10, 42), float64] */)
}

def @func_8418() -> Tensor[(?, ?, 14), int64] {
  %429 = @func_5506() /* ty=(Tensor[(?, ?, 14), int64],) */;
  %429.0
}

def @func_2930(%var_2916: Tensor[(1, 7, 4), float64]) -> (Tensor[(1, 7, 4), float64],) {
  %430 = cast(%var_2916, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %431 = tan(%430) /* ty=Tensor[(1, 7, 4), float64] */;
  (%431,)
}

def @func_6372() -> (Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) {
  %432 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %433 = rsqrt(%432) /* ty=Tensor[(6, 1, 5), float32] */;
  %434 = cast(%433, dtype="int64") /* ty=Tensor[(6, 1, 5), int64] */;
  %435 = shape_of(meta[relay.Constant][45] /* ty=Tensor[(6, 1, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 1, 5), float32] */, dtype="int64") /* ty=Tensor[(6, 1, 5), int64] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %438 = maximum(%436, %437) /* ty=Tensor[(6, ?, 5), int64] */;
  %439 = cast(meta[relay.Constant][45] /* ty=Tensor[(6, 1, 5), float32] */, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %440 = shape_of(%438, dtype="int32") /* ty=Tensor[(3), int32] */;
  %441 = cast(%438, dtype="bool") /* ty=Tensor[(6, ?, 5), bool] */;
  %442 = dyn.reshape(%439, %440, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %443 = cast(meta[relay.Constant][46] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %444 = reshape(%443, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %445 = @func_2142(%444) /* ty=(Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) */;
  %446 = not_equal(%441, %442) /* ty=Tensor[(6, ?, 5), bool] */;
  %447 = %445.2;
  (%446, %447, meta[relay.Constant][46] /* ty=Tensor[(432), float32] */)
}

def @func_7921(%var_7890: Tensor[(8, 15, 14), int8]) -> (Tensor[(8, 15, 14), int16], Tensor[(4, 8, 13), int8], Tensor[(416), int8], Tensor[(?, ?, 14), float32]) {
  %448 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %449 = %448.0;
  %450 = cast(%449, dtype="bool") /* ty=Tensor[(?, ?, 14), bool] */;
  %451 = cast(%var_7890, dtype="bool") /* ty=Tensor[(8, 15, 14), bool] */;
  %452 = logical_and(%450, %451) /* ty=Tensor[(8, 15, 14), bool] */;
  %453 = cast(%452, dtype="int16") /* ty=Tensor[(8, 15, 14), int16] */;
  %454 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%var_7890, dtype="int16") /* ty=Tensor[(8, 15, 14), int16] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %457 = cast(meta[relay.Constant][47] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
  %458 = cast(meta[relay.Constant][47] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
  %459 = reshape(%457, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), int8] */;
  %460 = reshape(%458, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), int8] */;
  %461 = @func_6401(%459, %460) /* ty=(Tensor[(4, 8, 13), int8],) */;
  %462 = cast(%449, dtype="float32") /* ty=Tensor[(?, ?, 14), float32] */;
  %463 = minimum(%455, %456) /* ty=Tensor[(8, 15, 14), int16] */;
  %464 = %461.0;
  %465 = sqrt(%462) /* ty=Tensor[(?, ?, 14), float32] */;
  (%463, %464, meta[relay.Constant][47] /* ty=Tensor[(416), int8] */, %465)
}

def @func_3832(%var_3819: Tensor[(4, 14, 16), float32]) -> (Tensor[(4, 14, 16), float32],) {
  %466 = cast(%var_3819, dtype="float32") /* ty=Tensor[(4, 14, 16), float32] */;
  %467 = atan(%466) /* ty=Tensor[(4, 14, 16), float32] */;
  (%467,)
}

def @func_1109(%var_1103: Tensor[(14, 5, 6), float64], %var_1104: Tensor[(14, 5, 6), float64]) -> (Tensor[(14, 5, 6), float64],) {
  %468 = cast(%var_1104, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %469 = shape_of(%var_1103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %470 = cast(%var_1103, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %471 = dyn.reshape(%468, %469, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %472 = power(%470, %471) /* ty=Tensor[(14, 5, 6), float64] */;
  (%472,)
}

def @func_3344(%var_3335: Tensor[(1, 16, 14), float32]) -> (Tensor[(1, 16, 14), float32], Tensor[(150), float32], Tensor[(234), float32], Tensor[(150), float32]) {
  %473 = cast(%var_3335, dtype="float32") /* ty=Tensor[(1, 16, 14), float32] */;
  %474 = cast(meta[relay.Constant][48] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %475 = cast(meta[relay.Constant][49] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %476 = reshape(%474, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %477 = reshape(%475, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %478 = @func_754(%476, %477) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %479 = log2(%473) /* ty=Tensor[(1, 16, 14), float32] */;
  %480 = %478.2;
  (%479, %480, meta[relay.Constant][48] /* ty=Tensor[(234), float32] */, meta[relay.Constant][49] /* ty=Tensor[(150), float32] */)
}

def @func_5793(%var_5771: Tensor[(11, 13, 14), float64]) -> (Tensor[(11, 13, 14), float32], Tensor[(234), float32], Tensor[(1344), uint8], Tensor[(234), float32]) {
  %481 = @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */;
  %482 = %481.0;
  %483 = cast(%var_5771, dtype="float32") /* ty=Tensor[(11, 13, 14), float32] */;
  %484 = shape_of(%482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %485 = cast(%482, dtype="float32") /* ty=Tensor[(11, 13, 14), float32] */;
  %486 = dyn.reshape(%483, %484, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %487 = cast(meta[relay.Constant][50] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %488 = cast(meta[relay.Constant][50] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %489 = cast(meta[relay.Constant][51] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %490 = reshape(%487, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %491 = reshape(%488, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %492 = reshape(%489, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %493 = @func_3676(%490, %491, %492) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */;
  %494 = divide(%485, %486) /* ty=Tensor[(11, 13, 14), float32] */;
  %495 = %493.2;
  (%494, %495, meta[relay.Constant][50] /* ty=Tensor[(1344), uint8] */, meta[relay.Constant][51] /* ty=Tensor[(234), float32] */)
}

def @func_8034() -> (Tensor[(?, ?, 14), int64], Tensor[(?, ?, 14), float32]) {
  %496 = @func_5238() /* ty=Tensor[(?, ?, 14), int8] */;
  %497 = cast(%496, dtype="float32") /* ty=Tensor[(?, ?, 14), float32] */;
  %498 = @func_5464() /* ty=Tensor[(?, ?, 14), int64] */;
  %499 = erf(%497) /* ty=Tensor[(?, ?, 14), float32] */;
  (%498, %499)
}

def @func_281(%var_274: Tensor[(5, 10, 3), float32]) -> (Tensor[(5, 10, 3), float32],) {
  %500 = cast(%var_274, dtype="float32") /* ty=Tensor[(5, 10, 3), float32] */;
  %501 = cosh(%500) /* ty=Tensor[(5, 10, 3), float32] */;
  (%501,)
}

def @func_3325(%var_3319: Tensor[(13, 3, 6), int64], %var_3320: Tensor[(13, 3, 6), int64]) -> (Tensor[(13, 3, 6), bool],) {
  %502 = cast(%var_3320, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %503 = shape_of(%var_3319, dtype="int32") /* ty=Tensor[(3), int32] */;
  %504 = cast(%var_3319, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
  %505 = dyn.reshape(%502, %503, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %506 = not_equal(%504, %505) /* ty=Tensor[(13, 3, 6), bool] */;
  (%506,)
}

def @func_5297(%var_5247: Tensor[(11, 8, 14), int8], %var_5248: Tensor[(11, 8, 14), int8], %var_5272: Tensor[(165), float64], %var_5273: Tensor[(1, 420), float64], %var_5274: Tensor[(150), float32], %var_5280: Tensor[(1344), uint8]) -> (Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) {
  %507 = cast(%var_5248, dtype="int8") /* ty=Tensor[(11, 8, 14), int8] */;
  %508 = shape_of(%var_5247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %509 = cast(%var_5247, dtype="int8") /* ty=Tensor[(11, 8, 14), int8] */;
  %510 = dyn.reshape(%507, %508, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %511 = logical_xor(%509, %510) /* ty=Tensor[(11, 8, 14), int8] */;
  %512 = cast(%var_5248, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
  %513 = shape_of(%511, dtype="int32") /* ty=Tensor[(3), int32] */;
  %514 = cast(%511, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
  %515 = dyn.reshape(%512, %513, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %516 = cast(%var_5280, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %517 = cast(%var_5280, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %518 = cast(meta[relay.Constant][52] /* ty=Tensor[(39, 6), float32] */, dtype="float32") /* ty=Tensor[(39, 6), float32] */;
  %519 = reshape(%516, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %520 = reshape(%517, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %521 = reshape(%518, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %522 = @func_3676(%519, %520, %521) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */;
  %523 = %522.3;
  %524 = cast(%var_5272, dtype="float64") /* ty=Tensor[(165), float64] */;
  %525 = cast(%var_5273, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %526 = cast(%var_5274, dtype="float32") /* ty=Tensor[(150), float32] */;
  %527 = reshape(%524, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), float64] */;
  %528 = reshape(%525, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %529 = reshape(%526, newshape=[5, 30]) /* ty=Tensor[(5, 30), float32] */;
  %530 = @func_4931(%527, %528, %529) /* ty=(Tensor[(15, 11, ?), float64], Tensor[(14, 5, 6), float64], Tensor[(420), float64], Tensor[(5, 10, 3), float32], Tensor[(5, 30), float32]) */;
  %531 = %530.4;
  %532 = cast(%531, dtype="int16") /* ty=Tensor[(5, 30), int16] */;
  %533 = shape_of(%523, dtype="int32") /* ty=Tensor[(1), int32] */;
  %534 = cast(%523, dtype="int16") /* ty=Tensor[(150), int16] */;
  %535 = dyn.reshape(%532, %533, newshape=[]) /* ty=Tensor[(?), int16] */;
  %536 = left_shift(%514, %515) /* ty=Tensor[(11, 8, 14), int16] */;
  %537 = subtract(%534, %535) /* ty=Tensor[(150), int16] */;
  (%536, %var_5272, %var_5273, %var_5274, %var_5280, meta[relay.Constant][52] /* ty=Tensor[(39, 6), float32] */, %537)
}

def @func_5569() -> (Tensor[(11, 13, 14), float64],) {
  %538 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %539 = %538.0;
  %540 = cast(%539, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
  %541 = cast(meta[relay.Constant][53] /* ty=Tensor[(11, 13, 14), int8] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %542 = floor_mod(%540, %541) /* ty=Tensor[(11, 13, 14), float64] */;
  (%542,)
}

def @func_2013(%var_2008: Tensor[(1, 5, 8), bool], %var_2009: Tensor[(3, 5, 8), bool]) -> Tensor[(3, 5, 8), bool] {
  %543 = cast(%var_2008, dtype="bool") /* ty=Tensor[(1, 5, 8), bool] */;
  %544 = cast(%var_2009, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  logical_or(%543, %544) /* ty=Tensor[(3, 5, 8), bool] */
}

def @func_8126() -> Tensor[(10, 16, 15), float32] {
  %545 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
  %545.0
}

def @func_7829() -> (Tensor[(7, 5, 8), float32],) {
  %546 = @func_7689() /* ty=(Tensor[(7, 5, 8), float32],) */;
  %547 = %546.0;
  (%547,)
}

def @func_6290() -> (Tensor[(10, 16, 15), float32],) {
  %548 = cast(meta[relay.Constant][54] /* ty=Tensor[(10, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 15), float32] */;
  %549 = asin(%548) /* ty=Tensor[(10, 16, 15), float32] */;
  (%549,)
}

def @func_3676(%var_3653: Tensor[(14, 8, 12), uint8], %var_3654: Tensor[(14, 8, 12), uint8], %var_3670: Tensor[(234), float32]) -> (Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) {
  %550 = cast(%var_3654, dtype="uint8") /* ty=Tensor[(14, 8, 12), uint8] */;
  %551 = shape_of(%var_3653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %552 = cast(%var_3653, dtype="uint8") /* ty=Tensor[(14, 8, 12), uint8] */;
  %553 = dyn.reshape(%550, %551, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %554 = bitwise_and(%552, %553) /* ty=Tensor[(14, 8, 12), uint8] */;
  %555 = cast(%554, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %556 = shape_of(%var_3654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%var_3654, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %559 = cast(%var_3670, dtype="float32") /* ty=Tensor[(234), float32] */;
  %560 = cast(meta[relay.Constant][55] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %561 = reshape(%559, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %562 = reshape(%560, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %563 = @func_754(%561, %562) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %564 = divide(%557, %558) /* ty=Tensor[(14, 8, 12), float64] */;
  %565 = %563.4;
  (%564, %565, %var_3670, meta[relay.Constant][55] /* ty=Tensor[(150), float32] */)
}

def @func_6568(%var_6553: Tensor[(7, 15, 14), int8], %var_6563: Tensor[(2, 96), float32], %var_6564: Tensor[(42), float64]) -> (Tensor[(7, 15, 14), int16], Tensor[(?, ?, 14), float64], Tensor[(588), float64], Tensor[(2, 96), float32], Tensor[(42), float64]) {
  %566 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %567 = %566.0;
  %568 = cast(%567, dtype="int16") /* ty=Tensor[(?, ?, 14), int16] */;
  %569 = cast(%var_6553, dtype="int16") /* ty=Tensor[(7, 15, 14), int16] */;
  %570 = cast(%567, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
  %571 = cast(%var_6563, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %572 = cast(%var_6564, dtype="float64") /* ty=Tensor[(42), float64] */;
  %573 = reshape(%571, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %574 = reshape(%572, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %575 = @func_5869(%573, %574) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %576 = bitwise_or(%568, %569) /* ty=Tensor[(7, 15, 14), int16] */;
  %577 = atanh(%570) /* ty=Tensor[(?, ?, 14), float64] */;
  %578 = %575.2;
  (%576, %577, %578, %var_6563, %var_6564)
}

def @func_6655(%var_6609: Tensor[(12, 2, 3), int8], %var_6614: Tensor[(12, 2, 3), int8]) -> (Tensor[(12, 2, 3), int64], Tensor[(6, ?, 5), bool], Tensor[(?, ?, 14), float64], Tensor[(300, 1), float32]) {
  %579 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 2, 3), int8] */, dtype="int8") /* ty=Tensor[(12, 2, 3), int8] */;
  %580 = shape_of(%var_6609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %581 = cast(%var_6609, dtype="int8") /* ty=Tensor[(12, 2, 3), int8] */;
  %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %583 = minimum(%581, %582) /* ty=Tensor[(12, 2, 3), int8] */;
  %584 = cast(%var_6614, dtype="uint32") /* ty=Tensor[(12, 2, 3), uint32] */;
  %585 = shape_of(%583, dtype="int32") /* ty=Tensor[(3), int32] */;
  %586 = cast(%583, dtype="uint32") /* ty=Tensor[(12, 2, 3), uint32] */;
  %587 = dyn.reshape(%584, %585, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %588 = bitwise_and(%586, %587) /* ty=Tensor[(12, 2, 3), uint32] */;
  %589 = cast(meta[relay.Constant][56] /* ty=Tensor[(12, 2, 3), int8] */, dtype="int64") /* ty=Tensor[(12, 2, 3), int64] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="int64") /* ty=Tensor[(12, 2, 3), int64] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %593 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %594 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %595 = logical_xor(%591, %592) /* ty=Tensor[(12, 2, 3), int64] */;
  %596 = %593.0;
  %597 = @func_5708() /* ty=Tensor[(?, ?, 14), float64] */;
  %598 = %594.1;
  (%595, %596, %597, %598)
}

def @func_8159() -> (Tensor[(?, ?, 14), int8],) {
  %599 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %600 = %599.0;
  (%600,)
}

def @func_2892(%var_2885: Tensor[(4, 3, 6), bool], %var_2886: Tensor[(4, 3, 6), bool]) -> (Tensor[(4, 3, 6), bool],) {
  %601 = cast(%var_2886, dtype="bool") /* ty=Tensor[(4, 3, 6), bool] */;
  %602 = shape_of(%var_2885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %603 = cast(%var_2885, dtype="bool") /* ty=Tensor[(4, 3, 6), bool] */;
  %604 = dyn.reshape(%601, %602, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %605 = logical_or(%603, %604) /* ty=Tensor[(4, 3, 6), bool] */;
  (%605,)
}

def @func_7156(%var_7145: Tensor[(3, 14, 5), int64]) -> (Tensor[(3, 14, 5), bool], Tensor[(?, ?, 14), int8]) {
  %606 = cast(%var_7145, dtype="int64") /* ty=Tensor[(3, 14, 5), int64] */;
  %607 = shape_of(meta[relay.Constant][57] /* ty=Tensor[(3, 14, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %608 = cast(meta[relay.Constant][57] /* ty=Tensor[(3, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(3, 14, 5), int64] */;
  %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %610 = right_shift(%608, %609) /* ty=Tensor[(3, 14, 5), int64] */;
  %611 = cast(%var_7145, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
  %612 = shape_of(%610, dtype="int32") /* ty=Tensor[(3), int32] */;
  %613 = cast(%610, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
  %614 = dyn.reshape(%611, %612, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %615 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %616 = logical_or(%613, %614) /* ty=Tensor[(3, 14, 5), bool] */;
  %617 = %615.0;
  (%616, %617)
}

def @func_5464() -> Tensor[(?, ?, 14), int64] {
  %618 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %619 = %618.0;
  %620 = @func_5321() /* ty=Tensor[(?, ?, 14), int8] */;
  %621 = cast(%620, dtype="int64") /* ty=Tensor[(?, ?, 14), int64] */;
  %622 = shape_of(%619, dtype="int32") /* ty=Tensor[(3), int32] */;
  %623 = cast(%619, dtype="int64") /* ty=Tensor[(?, ?, 14), int64] */;
  %624 = dyn.reshape(%621, %622, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%623, %624) /* ty=Tensor[(?, ?, 14), int64] */
}

def @func_6741(%var_6720: float64, %var_6721: Tensor[(4, 6, 4), float64], %var_6735: Tensor[(84), bool], %var_6737: Tensor[(512), bool]) -> (Tensor[(4, 6, 4), float64], Tensor[(7, 5, 16), uint64], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool]) {
  %625 = cast(%var_6720, dtype="float64") /* ty=float64 */;
  %626 = cast(%var_6721, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
  %627 = cast(%var_6735, dtype="bool") /* ty=Tensor[(84), bool] */;
  %628 = cast(meta[relay.Constant][58] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %629 = cast(%var_6737, dtype="bool") /* ty=Tensor[(512), bool] */;
  %630 = reshape(%627, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), bool] */;
  %631 = reshape(%628, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), bool] */;
  %632 = reshape(%629, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %633 = @func_4318(%630, %631, %632) /* ty=(Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) */;
  %634 = mod(%625, %626) /* ty=Tensor[(4, 6, 4), float64] */;
  %635 = %633.1;
  (%634, %635, %var_6735, meta[relay.Constant][58] /* ty=Tensor[(672), bool] */, %var_6737)
}

def @func_5988() -> Tensor[(?, ?, 14), int8] {
  %636 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %636.0
}

def @func_5211() -> (Tensor[(?, ?, 14), int8],) {
  %637 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 14), float64] */;
  %638 = log2(%637) /* ty=Tensor[(1, 1, 14), float64] */;
  %639 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 1, 14), float64] */, dtype="int8") /* ty=Tensor[(1, 1, 14), int8] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
  %641 = cast(%638, dtype="int8") /* ty=Tensor[(1, 1, 14), int8] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %643 = add(%641, %642) /* ty=Tensor[(?, ?, 14), int8] */;
  (%643,)
}

def @func_6401(%var_6394: Tensor[(4, 8, 13), int8], %var_6395: Tensor[(4, 8, 13), int8]) -> (Tensor[(4, 8, 13), int8],) {
  %644 = cast(%var_6395, dtype="int8") /* ty=Tensor[(4, 8, 13), int8] */;
  %645 = shape_of(%var_6394, dtype="int32") /* ty=Tensor[(3), int32] */;
  %646 = cast(%var_6394, dtype="int8") /* ty=Tensor[(4, 8, 13), int8] */;
  %647 = dyn.reshape(%644, %645, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %648 = bitwise_xor(%646, %647) /* ty=Tensor[(4, 8, 13), int8] */;
  (%648,)
}

def @func_7651() -> (Tensor[(10, 16, 15), float32], Tensor[(5, 10, 3), float32], Tensor[(150), float32]) {
  %649 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
  %650 = cast(meta[relay.Constant][60] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %651 = reshape(%650, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %652 = @func_281(%651) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %653 = %649.0;
  %654 = %652.0;
  (%653, %654, meta[relay.Constant][60] /* ty=Tensor[(150), float32] */)
}

def @func_8592() -> Tensor[(?, ?, 14), int8] {
  %655 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %655.0
}

def @func_7536() -> (Tensor[(?, ?, 14), int8],) {
  %656 = @func_6450() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %657 = %656.0;
  (%657,)
}

def @func_5321() -> Tensor[(?, ?, 14), int8] {
  @func_5238() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_6705() -> (Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(450), float64], Tensor[(120), bool]) {
  %658 = @func_6049() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %659 = cast(meta[relay.Constant][61] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
  %660 = cast(meta[relay.Constant][62] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
  %661 = cast(meta[relay.Constant][63] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %662 = reshape(%659, newshape=[108]) /* ty=Tensor[(108), float64] */;
  %663 = reshape(%660, newshape=[10, 45]) /* ty=Tensor[(10, 45), float64] */;
  %664 = reshape(%661, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %665 = @func_5980(%662, %663, %664) /* ty=(Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(120), bool], Tensor[(21, 4), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(10, 45), float64]) */;
  %666 = %658.0;
  %667 = %665.1;
  (%666, %667, meta[relay.Constant][61] /* ty=Tensor[(108), float64] */, meta[relay.Constant][62] /* ty=Tensor[(450), float64] */, meta[relay.Constant][63] /* ty=Tensor[(120), bool] */)
}

def @func_7450(%var_7373: Tensor[(15, 1, 10), float32], %var_7432: Tensor[(234), float32]) -> (Tensor[(1, 480), float64], Tensor[(120), bool], Tensor[(7, 6), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(15, ?, 10), bool], Tensor[(15, ?, 10), uint8]) {
  %668 = cast(meta[relay.Constant][64] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %669 = reshape(%668, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %670 = @func_3983(%669) /* ty=(Tensor[(9, 9), float32], Tensor[(40), bool], Tensor[(1, 480), float64], Tensor[(120), bool]) */;
  %671 = cast(meta[relay.Constant][65] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %672 = cast(meta[relay.Constant][66] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %673 = reshape(%671, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %674 = reshape(%672, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %675 = @func_5869(%673, %674) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %676 = cast(%var_7432, dtype="float32") /* ty=Tensor[(234), float32] */;
  %677 = cast(%var_7373, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %678 = log10(%677) /* ty=Tensor[(15, 1, 10), float32] */;
  %679 = cast(%var_7373, dtype="bool") /* ty=Tensor[(15, 1, 10), bool] */;
  %680 = shape_of(%678, dtype="int32") /* ty=Tensor[(3), int32] */;
  %681 = cast(%678, dtype="bool") /* ty=Tensor[(15, 1, 10), bool] */;
  %682 = dyn.reshape(%679, %680, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %683 = greater(%681, %682) /* ty=Tensor[(15, ?, 10), bool] */;
  %684 = cast(%683, dtype="float32") /* ty=Tensor[(15, ?, 10), float32] */;
  %685 = sigmoid(%684) /* ty=Tensor[(15, ?, 10), float32] */;
  %686 = cast(%685, dtype="float32") /* ty=Tensor[(15, ?, 10), float32] */;
  %687 = reshape(%676, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %688 = reshape(%686, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %689 = @func_754(%687, %688) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %690 = cast(%683, dtype="bool") /* ty=Tensor[(15, ?, 10), bool] */;
  %691 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %692 = cast(%685, dtype="bool") /* ty=Tensor[(15, ?, 10), bool] */;
  %693 = dyn.reshape(%690, %691, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %694 = cast(%683, dtype="uint8") /* ty=Tensor[(15, ?, 10), uint8] */;
  %695 = shape_of(%685, dtype="int32") /* ty=Tensor[(3), int32] */;
  %696 = cast(%685, dtype="uint8") /* ty=Tensor[(15, ?, 10), uint8] */;
  %697 = dyn.reshape(%694, %695, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %698 = %670.2;
  %699 = %675.1;
  %700 = %689.3;
  %701 = logical_and(%692, %693) /* ty=Tensor[(15, ?, 10), bool] */;
  %702 = minimum(%696, %697) /* ty=Tensor[(15, ?, 10), uint8] */;
  (%698, meta[relay.Constant][64] /* ty=Tensor[(120), bool] */, %699, meta[relay.Constant][65] /* ty=Tensor[(192), float32] */, meta[relay.Constant][66] /* ty=Tensor[(42), float64] */, %700, %var_7432, %701, %702)
}

def @func_125(%var_116: Tensor[(16, 4, 8), bool], %var_117: Tensor[(16, 4, 8), bool]) -> (Tensor[(16, 4, 8), bool],) {
  %703 = cast(%var_117, dtype="bool") /* ty=Tensor[(16, 4, 8), bool] */;
  %704 = shape_of(%var_116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %705 = cast(%var_116, dtype="bool") /* ty=Tensor[(16, 4, 8), bool] */;
  %706 = dyn.reshape(%703, %704, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %707 = logical_and(%705, %706) /* ty=Tensor[(16, 4, 8), bool] */;
  (%707,)
}

def @func_7017(%var_6989: Tensor[(6, 1, 13), uint32], %var_6990: Tensor[(6, 10, 13), uint32]) -> (Tensor[(6, 10, 13), uint32], Tensor[(1344), uint8], Tensor[(2002), float64]) {
  %708 = cast(%var_6989, dtype="uint32") /* ty=Tensor[(6, 1, 13), uint32] */;
  %709 = cast(%var_6990, dtype="uint32") /* ty=Tensor[(6, 10, 13), uint32] */;
  %710 = cast(meta[relay.Constant][67] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
  %711 = reshape(%710, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), float64] */;
  %712 = @func_5793(%711) /* ty=(Tensor[(11, 13, 14), float32], Tensor[(234), float32], Tensor[(1344), uint8], Tensor[(234), float32]) */;
  %713 = subtract(%708, %709) /* ty=Tensor[(6, 10, 13), uint32] */;
  %714 = %712.2;
  (%713, %714, meta[relay.Constant][67] /* ty=Tensor[(2002), float64] */)
}

def @func_4987(%var_4976: Tensor[(3, 1, 14), float64], %var_4977: Tensor[(3, 14, 14), float64]) -> (Tensor[(3, 14, 14), float64],) {
  %715 = cast(%var_4976, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %716 = cast(%var_4977, dtype="float64") /* ty=Tensor[(3, 14, 14), float64] */;
  %717 = multiply(%715, %716) /* ty=Tensor[(3, 14, 14), float64] */;
  (%717,)
}

def @func_754(%var_724: Tensor[(2, 9, 13), float32], %var_743: Tensor[(150), float32]) -> (Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) {
  %718 = cast(%var_724, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %719 = shape_of(meta[relay.Constant][68] /* ty=Tensor[(2, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(meta[relay.Constant][68] /* ty=Tensor[(2, 9, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %722 = cast(%var_743, dtype="float32") /* ty=Tensor[(150), float32] */;
  %723 = reshape(%722, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %724 = @func_281(%723) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %725 = cast(meta[relay.Constant][69] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %726 = cast(meta[relay.Constant][70] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %727 = reshape(%725, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %728 = reshape(%726, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %729 = @func_397(%727, %728) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
  %730 = greater(%720, %721) /* ty=Tensor[(2, 9, 13), bool] */;
  %731 = %724.0;
  %732 = %729.1;
  (%730, %731, %var_743, %732, meta[relay.Constant][69] /* ty=Tensor[(560), uint64] */, meta[relay.Constant][70] /* ty=Tensor[(512), bool] */)
}

def @func_2142(%var_2114: Tensor[(8, 9, 6), float32]) -> (Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) {
  %733 = cast(%var_2114, dtype="float32") /* ty=Tensor[(8, 9, 6), float32] */;
  %734 = cast(meta[relay.Constant][71] /* ty=Tensor[(300, 1), float32] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %735 = reshape(%734, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float32] */;
  %736 = sigmoid(%733) /* ty=Tensor[(8, 9, 6), float32] */;
  %737 = @func_700(%735) /* ty=Tensor[(5, 12, 5), float32] */;
  (%736, %737, meta[relay.Constant][71] /* ty=Tensor[(300, 1), float32] */)
}

def @main(%var_8659: Tensor[(11, 13, 14), float64]) -> Tensor[(11, 13, 14), uint16] {
  %738 = @func_8192() /* ty=Tensor[(11, 13, 14), float64] */;
  %739 = cast(%var_8659, dtype="uint16") /* ty=Tensor[(11, 13, 14), uint16] */;
  %740 = shape_of(%738, dtype="int32") /* ty=Tensor[(3), int32] */;
  %741 = cast(%738, dtype="uint16") /* ty=Tensor[(11, 13, 14), uint16] */;
  %742 = dyn.reshape(%739, %740, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%741, %742) /* ty=Tensor[(11, 13, 14), uint16] */
}

def @func_340(%var_329: Tensor[(7, 5, 16), uint64], %var_330: Tensor[(7, 5, 16), uint64]) -> Tensor[(7, 5, 16), uint64] {
  %743 = cast(%var_330, dtype="uint64") /* ty=Tensor[(7, 5, 16), uint64] */;
  %744 = shape_of(%var_329, dtype="int32") /* ty=Tensor[(3), int32] */;
  %745 = cast(%var_329, dtype="uint64") /* ty=Tensor[(7, 5, 16), uint64] */;
  %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  multiply(%745, %746) /* ty=Tensor[(7, 5, 16), uint64] */
}

def @func_6049() -> (Tensor[(?, ?, 14), int8],) {
  %747 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %748 = %747.0;
  (%748,)
}

def @func_6794() -> Tensor[(6, ?, 5), bool] {
  %749 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %749.0
}

def @func_7689() -> (Tensor[(7, 5, 8), float32],) {
  %750 = cast(meta[relay.Constant][72] /* ty=Tensor[(7, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 8), float32] */;
  %751 = erf(%750) /* ty=Tensor[(7, 5, 8), float32] */;
  %752 = cast(%751, dtype="float32") /* ty=Tensor[(7, 5, 8), float32] */;
  %753 = acosh(%752) /* ty=Tensor[(7, 5, 8), float32] */;
  (%753,)
}

def @func_7818() -> Tensor[(?, ?, 14), int8] {
  %754 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %754.0
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_7191(%var_7189: Tensor[(4, 1, 1), uint16], %var_7190: Tensor[(4, 13, 14), uint16]) -> (Tensor[(4, 13, 14), uint16],) {
  @func_7187(%var_7189, %var_7190) /* ty=(Tensor[(4, 13, 14), uint16],) */
}

def @func_4936(%var_4933: Tensor[(15, 11, 1), float64], %var_4934: Tensor[(420), float64], %var_4935: Tensor[(5, 30), float32]) -> (Tensor[(15, 11, ?), float64], Tensor[(14, 5, 6), float64], Tensor[(420), float64], Tensor[(5, 10, 3), float32], Tensor[(5, 30), float32]) {
  @func_4931(%var_4933, %var_4934, %var_4935) /* ty=(Tensor[(15, 11, ?), float64], Tensor[(14, 5, 6), float64], Tensor[(420), float64], Tensor[(5, 10, 3), float32], Tensor[(5, 30), float32]) */
}

def @func_2145(%var_2143: Tensor[(8, 9, 6), float32]) -> (Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) {
  @func_2142(%var_2143) /* ty=(Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) */
}

def @func_3328(%var_3326: Tensor[(13, 3, 6), int64], %var_3327: Tensor[(13, 3, 6), int64]) -> (Tensor[(13, 3, 6), bool],) {
  %5 = fn (%var_3319: Tensor[(13, 3, 6), int64], %var_3320: Tensor[(13, 3, 6), int64]) -> (Tensor[(13, 3, 6), bool],) {
    %0 = cast(%var_3320, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
    %1 = shape_of(%var_3319, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_3319, dtype="bool") /* ty=Tensor[(13, 3, 6), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = not_equal(%2, %3) /* ty=Tensor[(13, 3, 6), bool] */;
    (%4,)
  };
  %5(%var_3326, %var_3327) /* ty=(Tensor[(13, 3, 6), bool],) */
}

def @func_6568(%var_6553: Tensor[(7, 15, 14), int8], %var_6563: Tensor[(2, 96), float32], %var_6564: Tensor[(42), float64]) -> (Tensor[(7, 15, 14), int16], Tensor[(?, ?, 14), float64], Tensor[(588), float64], Tensor[(2, 96), float32], Tensor[(42), float64]) {
  %6 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %7 = %6.0;
  %8 = cast(%7, dtype="int16") /* ty=Tensor[(?, ?, 14), int16] */;
  %9 = cast(%var_6553, dtype="int16") /* ty=Tensor[(7, 15, 14), int16] */;
  %10 = cast(%7, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
  %11 = cast(%var_6563, dtype="float32") /* ty=Tensor[(2, 96), float32] */;
  %12 = cast(%var_6564, dtype="float64") /* ty=Tensor[(42), float64] */;
  %13 = reshape(%11, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %14 = reshape(%12, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %15 = @func_5869(%13, %14) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %16 = bitwise_or(%8, %9) /* ty=Tensor[(7, 15, 14), int16] */;
  %17 = atanh(%10) /* ty=Tensor[(?, ?, 14), float64] */;
  %18 = %15.2;
  (%16, %17, %18, %var_6563, %var_6564)
}

def @func_7272(%var_7246: Tensor[(512), bool], %var_7258: Tensor[(1232), int8]) -> (Tensor[(?, ?, 14), float64], Tensor[(16, 4, 8), bool], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(165), float64], Tensor[(1232), int8], Tensor[(33, 5), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(70, 6), float32]) {
  %19 = cast(meta[relay.Constant][0] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %20 = cast(%var_7246, dtype="bool") /* ty=Tensor[(512), bool] */;
  %21 = reshape(%19, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %22 = reshape(%20, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %23 = @func_397(%21, %22) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
  %24 = cast(%var_7258, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %25 = cast(%var_7258, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(33, 5), float64] */, dtype="float64") /* ty=Tensor[(33, 5), float64] */;
  %27 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 6), float64] */, dtype="float64") /* ty=Tensor[(70, 6), float64] */;
  %28 = cast(meta[relay.Constant][3] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %29 = cast(meta[relay.Constant][4] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %30 = reshape(%24, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %31 = reshape(%25, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %32 = reshape(%26, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %33 = reshape(%27, newshape=[1, 420]) /* ty=Tensor[(1, 420), float64] */;
  %34 = reshape(%28, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %35 = reshape(%29, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %36 = @func_5297(%30, %31, %32, %33, %34, %35) /* ty=(Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) */;
  %37 = cast(meta[relay.Constant][2] /* ty=Tensor[(70, 6), float64] */, dtype="float32") /* ty=Tensor[(70, 6), float32] */;
  %38 = @func_5708() /* ty=Tensor[(?, ?, 14), float64] */;
  %39 = %23.2;
  %40 = %36.1;
  %41 = exp(%37) /* ty=Tensor[(70, 6), float32] */;
  (%38, %39, meta[relay.Constant][0] /* ty=Tensor[(560), uint64] */, %var_7246, %40, %var_7258, meta[relay.Constant][1] /* ty=Tensor[(33, 5), float64] */, meta[relay.Constant][3] /* ty=Tensor[(150), float32] */, meta[relay.Constant][4] /* ty=Tensor[(1344), uint8] */, %41)
}

def @func_5793(%var_5771: Tensor[(11, 13, 14), float64]) -> (Tensor[(11, 13, 14), float32], Tensor[(234), float32], Tensor[(1344), uint8], Tensor[(234), float32]) {
  %42 = @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */;
  %43 = %42.0;
  %44 = cast(%var_5771, dtype="float32") /* ty=Tensor[(11, 13, 14), float32] */;
  %45 = shape_of(%43, dtype="int32") /* ty=Tensor[(3), int32] */;
  %46 = cast(%43, dtype="float32") /* ty=Tensor[(11, 13, 14), float32] */;
  %47 = dyn.reshape(%44, %45, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %48 = cast(meta[relay.Constant][5] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %49 = cast(meta[relay.Constant][5] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %50 = cast(meta[relay.Constant][6] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %51 = reshape(%48, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %52 = reshape(%49, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %53 = reshape(%50, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %54 = @func_3676(%51, %52, %53) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */;
  %55 = divide(%46, %47) /* ty=Tensor[(11, 13, 14), float32] */;
  %56 = %54.2;
  (%55, %56, meta[relay.Constant][5] /* ty=Tensor[(1344), uint8] */, meta[relay.Constant][6] /* ty=Tensor[(234), float32] */)
}

def @func_6796() -> Tensor[(6, ?, 5), bool] {
  @func_6794() /* ty=Tensor[(6, ?, 5), bool] */
}

def @func_7454(%var_7452: Tensor[(15, 1, 10), float32], %var_7453: Tensor[(234), float32]) -> (Tensor[(1, 480), float64], Tensor[(120), bool], Tensor[(7, 6), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(15, ?, 10), bool], Tensor[(15, ?, 10), uint8]) {
  @func_7450(%var_7452, %var_7453) /* ty=(Tensor[(1, 480), float64], Tensor[(120), bool], Tensor[(7, 6), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(15, ?, 10), bool], Tensor[(15, ?, 10), uint8]) */
}

def @func_5507() -> (Tensor[(?, ?, 14), int64],) {
  %58 = fn () -> (Tensor[(?, ?, 14), int64],) {
    %57 = @func_5464() /* ty=Tensor[(?, ?, 14), int64] */;
    (%57,)
  };
  %58() /* ty=(Tensor[(?, ?, 14), int64],) */
}

def @func_6292() -> (Tensor[(10, 16, 15), float32],) {
  @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */
}

def @func_7158(%var_7157: Tensor[(3, 14, 5), int64]) -> (Tensor[(3, 14, 5), bool], Tensor[(?, ?, 14), int8]) {
  %71 = fn (%var_7145: Tensor[(3, 14, 5), int64]) -> (Tensor[(3, 14, 5), bool], Tensor[(?, ?, 14), int8]) {
    %59 = cast(%var_7145, dtype="int64") /* ty=Tensor[(3, 14, 5), int64] */;
    %60 = shape_of(meta[relay.Constant][7] /* ty=Tensor[(3, 14, 5), int64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %61 = cast(meta[relay.Constant][7] /* ty=Tensor[(3, 14, 5), int64] */, dtype="int64") /* ty=Tensor[(3, 14, 5), int64] */;
    %62 = dyn.reshape(%59, %60, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %63 = right_shift(%61, %62) /* ty=Tensor[(3, 14, 5), int64] */;
    %64 = cast(%var_7145, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
    %65 = shape_of(%63, dtype="int32") /* ty=Tensor[(3), int32] */;
    %66 = cast(%63, dtype="bool") /* ty=Tensor[(3, 14, 5), bool] */;
    %67 = dyn.reshape(%64, %65, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %68 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %69 = logical_or(%66, %67) /* ty=Tensor[(3, 14, 5), bool] */;
    %70 = %68.0;
    (%69, %70)
  };
  %71(%var_7157) /* ty=(Tensor[(3, 14, 5), bool], Tensor[(?, ?, 14), int8]) */
}

def @func_7818() -> Tensor[(?, ?, 14), int8] {
  %72 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %72.0
}

def @func_1313(%var_1302: Tensor[(5, 7, 1), float64]) -> (Tensor[(5, 7, 1), float64], Tensor[(14, 5, 6), float64], Tensor[(10, 42), float64]) {
  %73 = cast(%var_1302, dtype="float64") /* ty=Tensor[(5, 7, 1), float64] */;
  %74 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %75 = cast(meta[relay.Constant][8] /* ty=Tensor[(10, 42), float64] */, dtype="float64") /* ty=Tensor[(10, 42), float64] */;
  %76 = reshape(%74, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %77 = reshape(%75, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %78 = @func_1109(%76, %77) /* ty=(Tensor[(14, 5, 6), float64],) */;
  %79 = asin(%73) /* ty=Tensor[(5, 7, 1), float64] */;
  %80 = %78.0;
  (%79, %80, meta[relay.Constant][8] /* ty=Tensor[(10, 42), float64] */)
}

def @func_6404(%var_6402: Tensor[(4, 8, 13), int8], %var_6403: Tensor[(4, 8, 13), int8]) -> (Tensor[(4, 8, 13), int8],) {
  %86 = fn (%var_6394: Tensor[(4, 8, 13), int8], %var_6395: Tensor[(4, 8, 13), int8]) -> (Tensor[(4, 8, 13), int8],) {
    %81 = cast(%var_6395, dtype="int8") /* ty=Tensor[(4, 8, 13), int8] */;
    %82 = shape_of(%var_6394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %83 = cast(%var_6394, dtype="int8") /* ty=Tensor[(4, 8, 13), int8] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %85 = bitwise_xor(%83, %84) /* ty=Tensor[(4, 8, 13), int8] */;
    (%85,)
  };
  %86(%var_6402, %var_6403) /* ty=(Tensor[(4, 8, 13), int8],) */
}

def @func_7923(%var_7922: Tensor[(8, 15, 14), int8]) -> (Tensor[(8, 15, 14), int16], Tensor[(4, 8, 13), int8], Tensor[(416), int8], Tensor[(?, ?, 14), float32]) {
  %105 = fn (%var_7890: Tensor[(8, 15, 14), int8]) -> (Tensor[(8, 15, 14), int16], Tensor[(4, 8, 13), int8], Tensor[(416), int8], Tensor[(?, ?, 14), float32]) {
    %87 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %88 = %87.0;
    %89 = cast(%88, dtype="bool") /* ty=Tensor[(?, ?, 14), bool] */;
    %90 = cast(%var_7890, dtype="bool") /* ty=Tensor[(8, 15, 14), bool] */;
    %91 = logical_and(%89, %90) /* ty=Tensor[(8, 15, 14), bool] */;
    %92 = cast(%91, dtype="int16") /* ty=Tensor[(8, 15, 14), int16] */;
    %93 = shape_of(%var_7890, dtype="int32") /* ty=Tensor[(3), int32] */;
    %94 = cast(%var_7890, dtype="int16") /* ty=Tensor[(8, 15, 14), int16] */;
    %95 = dyn.reshape(%92, %93, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %96 = cast(meta[relay.Constant][9] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
    %97 = cast(meta[relay.Constant][9] /* ty=Tensor[(416), int8] */, dtype="int8") /* ty=Tensor[(416), int8] */;
    %98 = reshape(%96, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), int8] */;
    %99 = reshape(%97, newshape=[4, 8, 13]) /* ty=Tensor[(4, 8, 13), int8] */;
    %100 = @func_6401(%98, %99) /* ty=(Tensor[(4, 8, 13), int8],) */;
    %101 = cast(%88, dtype="float32") /* ty=Tensor[(?, ?, 14), float32] */;
    %102 = minimum(%94, %95) /* ty=Tensor[(8, 15, 14), int16] */;
    %103 = %100.0;
    %104 = sqrt(%101) /* ty=Tensor[(?, ?, 14), float32] */;
    (%102, %103, meta[relay.Constant][9] /* ty=Tensor[(416), int8] */, %104)
  };
  %105(%var_7922) /* ty=(Tensor[(8, 15, 14), int16], Tensor[(4, 8, 13), int8], Tensor[(416), int8], Tensor[(?, ?, 14), float32]) */
}

def @func_125(%var_116: Tensor[(16, 4, 8), bool], %var_117: Tensor[(16, 4, 8), bool]) -> (Tensor[(16, 4, 8), bool],) {
  %106 = cast(%var_117, dtype="bool") /* ty=Tensor[(16, 4, 8), bool] */;
  %107 = shape_of(%var_116, dtype="int32") /* ty=Tensor[(3), int32] */;
  %108 = cast(%var_116, dtype="bool") /* ty=Tensor[(16, 4, 8), bool] */;
  %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %110 = logical_and(%108, %109) /* ty=Tensor[(16, 4, 8), bool] */;
  (%110,)
}

def @func_6268(%var_6265: Tensor[(450), float64], %var_6266: Tensor[(480), float64], %var_6267: Tensor[(108), float64]) -> (Tensor[(1, 42), float64], Tensor[(4, 12, 14), int8], Tensor[(13, 3, 6), bool], Tensor[(234), int64], Tensor[(3, 14, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(7, 5, 16), uint64], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(9, 3, 4), int16], Tensor[(108), float64]) {
  %157 = fn (%var_6234: Tensor[(450), float64], %var_6236: Tensor[(480), float64], %var_6242: Tensor[(108), float64]) -> (Tensor[(1, 42), float64], Tensor[(4, 12, 14), int8], Tensor[(13, 3, 6), bool], Tensor[(234), int64], Tensor[(3, 14, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(7, 5, 16), uint64], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(9, 3, 4), int16], Tensor[(108), float64]) {
    %111 = @func_5506() /* ty=(Tensor[(?, ?, 14), int64],) */;
    %112 = %111.0;
    %113 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 14), int64] */, dtype="int8") /* ty=Tensor[(4, 12, 14), int8] */;
    %114 = cast(%112, dtype="int8") /* ty=Tensor[(?, ?, 14), int8] */;
    %115 = cast(meta[relay.Constant][12] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
    %116 = cast(meta[relay.Constant][12] /* ty=Tensor[(234), int64] */, dtype="int64") /* ty=Tensor[(234), int64] */;
    %117 = reshape(%115, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int64] */;
    %118 = reshape(%116, newshape=[13, 3, 6]) /* ty=Tensor[(13, 3, 6), int64] */;
    %119 = @func_3325(%117, %118) /* ty=(Tensor[(13, 3, 6), bool],) */;
    %120 = cast(meta[relay.Constant][10] /* ty=Tensor[(1, 42), float64] */, dtype="float64") /* ty=Tensor[(1, 42), float64] */;
    %121 = cast(meta[relay.Constant][13] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
    %122 = reshape(%120, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
    %123 = reshape(%121, newshape=[3, 14, 14]) /* ty=Tensor[(3, 14, 14), float64] */;
    %124 = @func_4987(%122, %123) /* ty=(Tensor[(3, 14, 14), float64],) */;
    %125 = %124.0;
    %126 = cast(meta[relay.Constant][13] /* ty=Tensor[(588), float64] */, dtype="float32") /* ty=Tensor[(588), float32] */;
    %127 = shape_of(%125, dtype="int32") /* ty=Tensor[(3), int32] */;
    %128 = cast(%125, dtype="float32") /* ty=Tensor[(3, 14, 14), float32] */;
    %129 = dyn.reshape(%126, %127, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %130 = cast(%112, dtype="int32") /* ty=Tensor[(?, ?, 14), int32] */;
    %131 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 14), int64] */, dtype="int32") /* ty=Tensor[(4, 12, 14), int32] */;
    %132 = add(%130, %131) /* ty=Tensor[(4, 12, 14), int32] */;
    %133 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 12, 14), int64] */, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
    %134 = shape_of(%132, dtype="int32") /* ty=Tensor[(3), int32] */;
    %135 = cast(%132, dtype="bool") /* ty=Tensor[(4, 12, 14), bool] */;
    %136 = dyn.reshape(%133, %134, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %137 = cast(%var_6234, dtype="float64") /* ty=Tensor[(450), float64] */;
    %138 = cast(meta[relay.Constant][14] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
    %139 = cast(%var_6236, dtype="float64") /* ty=Tensor[(480), float64] */;
    %140 = cast(meta[relay.Constant][15] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %141 = reshape(%137, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
    %142 = reshape(%138, newshape=[84]) /* ty=Tensor[(84), bool] */;
    %143 = reshape(%139, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %144 = reshape(%140, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %145 = @func_4545(%141, %142, %143, %144) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */;
    %146 = cast(%var_6242, dtype="float64") /* ty=Tensor[(108), float64] */;
    %147 = cast(%var_6242, dtype="float64") /* ty=Tensor[(108), float64] */;
    %148 = reshape(%146, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
    %149 = reshape(%147, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
    %150 = @func_1000(%148, %149) /* ty=(Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) */;
    %151 = bitwise_or(%113, %114) /* ty=Tensor[(4, 12, 14), int8] */;
    %152 = %119.0;
    %153 = maximum(%128, %129) /* ty=Tensor[(3, 14, 14), float32] */;
    %154 = greater_equal(%135, %136) /* ty=Tensor[(4, 12, 14), bool] */;
    %155 = %145.4;
    %156 = %150.0;
    (meta[relay.Constant][10] /* ty=Tensor[(1, 42), float64] */, %151, %152, meta[relay.Constant][12] /* ty=Tensor[(234), int64] */, %153, %154, %155, %var_6234, meta[relay.Constant][14] /* ty=Tensor[(84), bool] */, %var_6236, meta[relay.Constant][15] /* ty=Tensor[(120), bool] */, %156, %var_6242)
  };
  %157(%var_6265, %var_6266, %var_6267) /* ty=(Tensor[(1, 42), float64], Tensor[(4, 12, 14), int8], Tensor[(13, 3, 6), bool], Tensor[(234), int64], Tensor[(3, 14, 14), float32], Tensor[(4, 12, 14), bool], Tensor[(7, 5, 16), uint64], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(9, 3, 4), int16], Tensor[(108), float64]) */
}

def @func_8593() -> Tensor[(?, ?, 14), int8] {
  %159 = fn () -> Tensor[(?, ?, 14), int8] {
    %158 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %158.0
  };
  %159() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_2933(%var_2931: Tensor[(1, 7, 4), float64]) -> (Tensor[(1, 7, 4), float64],) {
  @func_2930(%var_2931) /* ty=(Tensor[(1, 7, 4), float64],) */
}

def @func_1113(%var_1111: Tensor[(14, 5, 6), float64], %var_1112: Tensor[(14, 5, 6), float64]) -> (Tensor[(14, 5, 6), float64],) {
  @func_1109(%var_1111, %var_1112) /* ty=(Tensor[(14, 5, 6), float64],) */
}

def @func_3832(%var_3819: Tensor[(4, 14, 16), float32]) -> (Tensor[(4, 14, 16), float32],) {
  %160 = cast(%var_3819, dtype="float32") /* ty=Tensor[(4, 14, 16), float32] */;
  %161 = atan(%160) /* ty=Tensor[(4, 14, 16), float32] */;
  (%161,)
}

def @func_5571() -> (Tensor[(11, 13, 14), float64],) {
  @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */
}

def @func_4991(%var_4989: Tensor[(3, 1, 14), float64], %var_4990: Tensor[(3, 14, 14), float64]) -> (Tensor[(3, 14, 14), float64],) {
  @func_4987(%var_4989, %var_4990) /* ty=(Tensor[(3, 14, 14), float64],) */
}

def @func_7517() -> Tensor[(?, ?, 14), int16] {
  %170 = fn () -> Tensor[(?, ?, 14), int16] {
    %162 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %163 = %162.0;
    %164 = cast(%163, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
    %165 = acosh(%164) /* ty=Tensor[(?, ?, 14), float64] */;
    %166 = cast(%163, dtype="int16") /* ty=Tensor[(?, ?, 14), int16] */;
    %167 = shape_of(%165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %168 = cast(%165, dtype="int16") /* ty=Tensor[(?, ?, 14), int16] */;
    %169 = dyn.reshape(%166, %167, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    logical_xor(%168, %169) /* ty=Tensor[(?, ?, 14), int16] */
  };
  %170() /* ty=Tensor[(?, ?, 14), int16] */
}

def @func_5322() -> Tensor[(?, ?, 14), int8] {
  %171 = fn () -> Tensor[(?, ?, 14), int8] {
    @func_5238() /* ty=Tensor[(?, ?, 14), int8] */
  };
  %171() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_3676(%var_3653: Tensor[(14, 8, 12), uint8], %var_3654: Tensor[(14, 8, 12), uint8], %var_3670: Tensor[(234), float32]) -> (Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) {
  %172 = cast(%var_3654, dtype="uint8") /* ty=Tensor[(14, 8, 12), uint8] */;
  %173 = shape_of(%var_3653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %174 = cast(%var_3653, dtype="uint8") /* ty=Tensor[(14, 8, 12), uint8] */;
  %175 = dyn.reshape(%172, %173, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %176 = bitwise_and(%174, %175) /* ty=Tensor[(14, 8, 12), uint8] */;
  %177 = cast(%176, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %178 = shape_of(%var_3654, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%var_3654, dtype="float64") /* ty=Tensor[(14, 8, 12), float64] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %181 = cast(%var_3670, dtype="float32") /* ty=Tensor[(234), float32] */;
  %182 = cast(meta[relay.Constant][16] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %183 = reshape(%181, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %184 = reshape(%182, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %185 = @func_754(%183, %184) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %186 = divide(%179, %180) /* ty=Tensor[(14, 8, 12), float64] */;
  %187 = %185.4;
  (%186, %187, %var_3670, meta[relay.Constant][16] /* ty=Tensor[(150), float32] */)
}

def @func_129(%var_127: Tensor[(16, 4, 8), bool], %var_128: Tensor[(16, 4, 8), bool]) -> (Tensor[(16, 4, 8), bool],) {
  @func_125(%var_127, %var_128) /* ty=(Tensor[(16, 4, 8), bool],) */
}

def @func_7187(%var_7181: Tensor[(4, 1, 1), uint16], %var_7182: Tensor[(4, 13, 14), uint16]) -> (Tensor[(4, 13, 14), uint16],) {
  %188 = cast(%var_7181, dtype="uint16") /* ty=Tensor[(4, 1, 1), uint16] */;
  %189 = cast(%var_7182, dtype="uint16") /* ty=Tensor[(4, 13, 14), uint16] */;
  %190 = right_shift(%188, %189) /* ty=Tensor[(4, 13, 14), uint16] */;
  (%190,)
}

def @func_2013(%var_2008: Tensor[(1, 5, 8), bool], %var_2009: Tensor[(3, 5, 8), bool]) -> Tensor[(3, 5, 8), bool] {
  %191 = cast(%var_2008, dtype="bool") /* ty=Tensor[(1, 5, 8), bool] */;
  %192 = cast(%var_2009, dtype="bool") /* ty=Tensor[(3, 5, 8), bool] */;
  logical_or(%191, %192) /* ty=Tensor[(3, 5, 8), bool] */
}

def @func_3835(%var_3833: Tensor[(4, 14, 16), float32]) -> (Tensor[(4, 14, 16), float32],) {
  @func_3832(%var_3833) /* ty=(Tensor[(4, 14, 16), float32],) */
}

def @func_5872(%var_5870: Tensor[(4, 6, 8), float32], %var_5871: Tensor[(7, 6), float64]) -> (Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) {
  %211 = fn (%var_5837: Tensor[(4, 6, 8), float32], %var_5849: Tensor[(7, 6), float64]) -> (Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) {
    %193 = cast(%var_5849, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
    %194 = cast(meta[relay.Constant][17] /* ty=Tensor[(588), float64] */, dtype="float64") /* ty=Tensor[(588), float64] */;
    %195 = reshape(%193, newshape=[3, 1, 14]) /* ty=Tensor[(3, 1, 14), float64] */;
    %196 = reshape(%194, newshape=[3, 14, 14]) /* ty=Tensor[(3, 14, 14), float64] */;
    %197 = @func_4987(%195, %196) /* ty=(Tensor[(3, 14, 14), float64],) */;
    %198 = cast(%var_5837, dtype="float32") /* ty=Tensor[(4, 6, 8), float32] */;
    %199 = tan(%198) /* ty=Tensor[(4, 6, 8), float32] */;
    %200 = cast(%199, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
    %201 = shape_of(%var_5837, dtype="int32") /* ty=Tensor[(3), int32] */;
    %202 = cast(%var_5837, dtype="bool") /* ty=Tensor[(4, 6, 8), bool] */;
    %203 = dyn.reshape(%200, %201, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %204 = greater_equal(%202, %203) /* ty=Tensor[(4, 6, 8), bool] */;
    %205 = cast(%199, dtype="uint8") /* ty=Tensor[(4, 6, 8), uint8] */;
    %206 = shape_of(%204, dtype="int32") /* ty=Tensor[(3), int32] */;
    %207 = cast(%204, dtype="uint8") /* ty=Tensor[(4, 6, 8), uint8] */;
    %208 = dyn.reshape(%205, %206, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %209 = %197.0;
    %210 = add(%207, %208) /* ty=Tensor[(4, 6, 8), uint8] */;
    (%209, %var_5849, meta[relay.Constant][17] /* ty=Tensor[(588), float64] */, %210)
  };
  %211(%var_5870, %var_5871) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */
}

def @func_1109(%var_1103: Tensor[(14, 5, 6), float64], %var_1104: Tensor[(14, 5, 6), float64]) -> (Tensor[(14, 5, 6), float64],) {
  %212 = cast(%var_1104, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %213 = shape_of(%var_1103, dtype="int32") /* ty=Tensor[(3), int32] */;
  %214 = cast(%var_1103, dtype="float64") /* ty=Tensor[(14, 5, 6), float64] */;
  %215 = dyn.reshape(%212, %213, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %216 = power(%214, %215) /* ty=Tensor[(14, 5, 6), float64] */;
  (%216,)
}

def @func_6372() -> (Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) {
  %217 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 1, 5), float32] */, dtype="float32") /* ty=Tensor[(6, 1, 5), float32] */;
  %218 = rsqrt(%217) /* ty=Tensor[(6, 1, 5), float32] */;
  %219 = cast(%218, dtype="int64") /* ty=Tensor[(6, 1, 5), int64] */;
  %220 = shape_of(meta[relay.Constant][18] /* ty=Tensor[(6, 1, 5), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 1, 5), float32] */, dtype="int64") /* ty=Tensor[(6, 1, 5), int64] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %223 = maximum(%221, %222) /* ty=Tensor[(6, ?, 5), int64] */;
  %224 = cast(meta[relay.Constant][18] /* ty=Tensor[(6, 1, 5), float32] */, dtype="bool") /* ty=Tensor[(6, 1, 5), bool] */;
  %225 = shape_of(%223, dtype="int32") /* ty=Tensor[(3), int32] */;
  %226 = cast(%223, dtype="bool") /* ty=Tensor[(6, ?, 5), bool] */;
  %227 = dyn.reshape(%224, %225, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %228 = cast(meta[relay.Constant][19] /* ty=Tensor[(432), float32] */, dtype="float32") /* ty=Tensor[(432), float32] */;
  %229 = reshape(%228, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %230 = @func_2142(%229) /* ty=(Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) */;
  %231 = not_equal(%226, %227) /* ty=Tensor[(6, ?, 5), bool] */;
  %232 = %230.2;
  (%231, %232, meta[relay.Constant][19] /* ty=Tensor[(432), float32] */)
}

def @func_2142(%var_2114: Tensor[(8, 9, 6), float32]) -> (Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) {
  %233 = cast(%var_2114, dtype="float32") /* ty=Tensor[(8, 9, 6), float32] */;
  %234 = cast(meta[relay.Constant][20] /* ty=Tensor[(300, 1), float32] */, dtype="float32") /* ty=Tensor[(300, 1), float32] */;
  %235 = reshape(%234, newshape=[5, 12, 5]) /* ty=Tensor[(5, 12, 5), float32] */;
  %236 = sigmoid(%233) /* ty=Tensor[(8, 9, 6), float32] */;
  %237 = @func_700(%235) /* ty=Tensor[(5, 12, 5), float32] */;
  (%236, %237, meta[relay.Constant][20] /* ty=Tensor[(300, 1), float32] */)
}

def @func_92(%var_90: Tensor[(16, 5, 8), uint16]) -> (Tensor[(16, 5, 8), bool], Tensor[(16, 5, 8), float32]) {
  @func_89(%var_90) /* ty=(Tensor[(16, 5, 8), bool], Tensor[(16, 5, 8), float32]) */
}

def @func_4931(%var_4905: Tensor[(15, 11, 1), float64], %var_4917: Tensor[(420), float64], %var_4920: Tensor[(5, 30), float32]) -> (Tensor[(15, 11, ?), float64], Tensor[(14, 5, 6), float64], Tensor[(420), float64], Tensor[(5, 10, 3), float32], Tensor[(5, 30), float32]) {
  %238 = cast(%var_4905, dtype="float64") /* ty=Tensor[(15, 11, 1), float64] */;
  %239 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 1), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %240 = cast(meta[relay.Constant][21] /* ty=Tensor[(15, 11, 1), float64] */, dtype="float64") /* ty=Tensor[(15, 11, 1), float64] */;
  %241 = dyn.reshape(%238, %239, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %242 = cast(%var_4917, dtype="float64") /* ty=Tensor[(420), float64] */;
  %243 = cast(%var_4917, dtype="float64") /* ty=Tensor[(420), float64] */;
  %244 = reshape(%242, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %245 = reshape(%243, newshape=[14, 5, 6]) /* ty=Tensor[(14, 5, 6), float64] */;
  %246 = @func_1109(%244, %245) /* ty=(Tensor[(14, 5, 6), float64],) */;
  %247 = cast(%var_4920, dtype="float32") /* ty=Tensor[(5, 30), float32] */;
  %248 = reshape(%247, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %249 = @func_281(%248) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %250 = power(%240, %241) /* ty=Tensor[(15, 11, ?), float64] */;
  %251 = %246.0;
  %252 = %249.0;
  (%250, %251, %var_4917, %252, %var_4920)
}

def @func_281(%var_274: Tensor[(5, 10, 3), float32]) -> (Tensor[(5, 10, 3), float32],) {
  %253 = cast(%var_274, dtype="float32") /* ty=Tensor[(5, 10, 3), float32] */;
  %254 = cosh(%253) /* ty=Tensor[(5, 10, 3), float32] */;
  (%254,)
}

def @func_5989() -> Tensor[(?, ?, 14), int8] {
  %256 = fn () -> Tensor[(?, ?, 14), int8] {
    %255 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %255.0
  };
  %256() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_2406(%var_2404: Tensor[(3, 10, 16), float64], %var_2405: Tensor[(120), bool]) -> (Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) {
  @func_2402(%var_2404, %var_2405) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) */
}

def @func_397(%var_365: Tensor[(560), uint64], %var_384: Tensor[(512), bool]) -> (Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) {
  %257 = cast(%var_365, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %258 = cast(%var_365, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %259 = reshape(%257, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %260 = reshape(%258, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %261 = cast(%var_384, dtype="bool") /* ty=Tensor[(512), bool] */;
  %262 = cast(%var_384, dtype="bool") /* ty=Tensor[(512), bool] */;
  %263 = reshape(%261, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), bool] */;
  %264 = reshape(%262, newshape=[16, 4, 8]) /* ty=Tensor[(16, 4, 8), bool] */;
  %265 = @func_125(%263, %264) /* ty=(Tensor[(16, 4, 8), bool],) */;
  %266 = cast(meta[relay.Constant][22] /* ty=Tensor[(6, 4, 11), float32] */, dtype="float32") /* ty=Tensor[(6, 4, 11), float32] */;
  %267 = sinh(%266) /* ty=Tensor[(6, 4, 11), float32] */;
  %268 = cast(meta[relay.Constant][23] /* ty=Tensor[(6, 4, 11), float32] */, dtype="bool") /* ty=Tensor[(6, 4, 11), bool] */;
  %269 = shape_of(%267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %270 = cast(%267, dtype="bool") /* ty=Tensor[(6, 4, 11), bool] */;
  %271 = dyn.reshape(%268, %269, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %272 = @func_340(%259, %260) /* ty=Tensor[(7, 5, 16), uint64] */;
  %273 = %265.0;
  %274 = greater_equal(%270, %271) /* ty=Tensor[(6, 4, 11), bool] */;
  (%272, %var_365, %273, %var_384, %274)
}

def @func_5466() -> Tensor[(?, ?, 14), int64] {
  @func_5464() /* ty=Tensor[(?, ?, 14), int64] */
}

def @func_89(%var_75: Tensor[(16, 5, 8), uint16]) -> (Tensor[(16, 5, 8), bool], Tensor[(16, 5, 8), float32]) {
  %275 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 5, 8), uint16] */, dtype="bool") /* ty=Tensor[(16, 5, 8), bool] */;
  %276 = shape_of(%var_75, dtype="int32") /* ty=Tensor[(3), int32] */;
  %277 = cast(%var_75, dtype="bool") /* ty=Tensor[(16, 5, 8), bool] */;
  %278 = dyn.reshape(%275, %276, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %279 = cast(meta[relay.Constant][24] /* ty=Tensor[(16, 5, 8), uint16] */, dtype="float32") /* ty=Tensor[(16, 5, 8), float32] */;
  %280 = less_equal(%277, %278) /* ty=Tensor[(16, 5, 8), bool] */;
  %281 = tan(%279) /* ty=Tensor[(16, 5, 8), float32] */;
  (%280, %281)
}

def @func_401(%var_399: Tensor[(560), uint64], %var_400: Tensor[(512), bool]) -> (Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) {
  @func_397(%var_399, %var_400) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */
}

def @func_7536() -> (Tensor[(?, ?, 14), int8],) {
  %282 = @func_6450() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %283 = %282.0;
  (%283,)
}

def @func_7538() -> (Tensor[(?, ?, 14), int8],) {
  @func_7536() /* ty=(Tensor[(?, ?, 14), int8],) */
}

def @func_2739(%var_2737: Tensor[(8, 6, 13), uint16], %var_2738: Tensor[(8, 6, 13), uint16]) -> Tensor[(8, 6, 13), bool] {
  %288 = fn (%var_2706: Tensor[(8, 6, 13), uint16], %var_2707: Tensor[(8, 6, 13), uint16]) -> Tensor[(8, 6, 13), bool] {
    %284 = cast(%var_2707, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
    %285 = shape_of(%var_2706, dtype="int32") /* ty=Tensor[(3), int32] */;
    %286 = cast(%var_2706, dtype="bool") /* ty=Tensor[(8, 6, 13), bool] */;
    %287 = dyn.reshape(%284, %285, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%286, %287) /* ty=Tensor[(8, 6, 13), bool] */
  };
  %288(%var_2737, %var_2738) /* ty=Tensor[(8, 6, 13), bool] */
}

def @func_6983(%var_6982: Tensor[(72), bool]) -> (Tensor[(4, 3, 6), bool], Tensor[(72), bool], Tensor[(16, 13, 14), float64], Tensor[(16, 13, 14), float64], Tensor[(108), float64], Tensor[(10, 16, 15), float32]) {
  %304 = fn (%var_6920: Tensor[(72), bool]) -> (Tensor[(4, 3, 6), bool], Tensor[(72), bool], Tensor[(16, 13, 14), float64], Tensor[(16, 13, 14), float64], Tensor[(108), float64], Tensor[(10, 16, 15), float32]) {
    %289 = cast(%var_6920, dtype="bool") /* ty=Tensor[(72), bool] */;
    %290 = cast(%var_6920, dtype="bool") /* ty=Tensor[(72), bool] */;
    %291 = reshape(%289, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), bool] */;
    %292 = reshape(%290, newshape=[4, 3, 6]) /* ty=Tensor[(4, 3, 6), bool] */;
    %293 = @func_2892(%291, %292) /* ty=(Tensor[(4, 3, 6), bool],) */;
    %294 = @func_6832() /* ty=Tensor[(16, 13, 14), float32] */;
    %295 = cast(%294, dtype="float64") /* ty=Tensor[(16, 13, 14), float64] */;
    %296 = cast(%294, dtype="float64") /* ty=Tensor[(16, 13, 14), float64] */;
    %297 = @func_6705() /* ty=(Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(450), float64], Tensor[(120), bool]) */;
    %298 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
    %299 = %293.0;
    %300 = sqrt(%295) /* ty=Tensor[(16, 13, 14), float64] */;
    %301 = acos(%296) /* ty=Tensor[(16, 13, 14), float64] */;
    %302 = %297.2;
    %303 = %298.0;
    (%299, %var_6920, %300, %301, %302, %303)
  };
  %304(%var_6982) /* ty=(Tensor[(4, 3, 6), bool], Tensor[(72), bool], Tensor[(16, 13, 14), float64], Tensor[(16, 13, 14), float64], Tensor[(108), float64], Tensor[(10, 16, 15), float32]) */
}

def @func_4545(%var_4456: Tensor[(5, 6, 15), float64], %var_4490: Tensor[(84), bool], %var_4507: Tensor[(480), float64], %var_4508: Tensor[(120), bool]) -> (Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) {
  %305 = cast(%var_4490, dtype="bool") /* ty=Tensor[(84), bool] */;
  %306 = cast(meta[relay.Constant][25] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
  %307 = cast(meta[relay.Constant][26] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %308 = reshape(%305, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), bool] */;
  %309 = reshape(%306, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), bool] */;
  %310 = reshape(%307, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %311 = @func_4318(%308, %309, %310) /* ty=(Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) */;
  %312 = cast(meta[relay.Constant][27] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %313 = cast(meta[relay.Constant][27] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %314 = reshape(%312, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %315 = reshape(%313, newshape=[7, 5, 16]) /* ty=Tensor[(7, 5, 16), uint64] */;
  %316 = cast(%var_4507, dtype="float64") /* ty=Tensor[(480), float64] */;
  %317 = cast(%var_4508, dtype="bool") /* ty=Tensor[(120), bool] */;
  %318 = reshape(%316, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
  %319 = reshape(%317, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %320 = @func_2402(%318, %319) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) */;
  %321 = cast(%var_4456, dtype="float64") /* ty=Tensor[(5, 6, 15), float64] */;
  %322 = sqrt(%321) /* ty=Tensor[(5, 6, 15), float64] */;
  %323 = cast(%322, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %324 = cosh(%323) /* ty=Tensor[(5, 6, 15), float32] */;
  %325 = cast(%324, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %326 = cast(%324, dtype="float32") /* ty=Tensor[(5, 6, 15), float32] */;
  %327 = %311.3;
  %328 = @func_340(%314, %315) /* ty=Tensor[(7, 5, 16), uint64] */;
  %329 = %320.0;
  %330 = sinh(%325) /* ty=Tensor[(5, 6, 15), float32] */;
  %331 = asinh(%326) /* ty=Tensor[(5, 6, 15), float32] */;
  (%327, %var_4490, meta[relay.Constant][25] /* ty=Tensor[(672), bool] */, meta[relay.Constant][26] /* ty=Tensor[(512), bool] */, %328, meta[relay.Constant][27] /* ty=Tensor[(560), uint64] */, %329, %var_4507, %var_4508, %330, %331)
}

def @func_5211() -> (Tensor[(?, ?, 14), int8],) {
  %332 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 1, 14), float64] */, dtype="float64") /* ty=Tensor[(1, 1, 14), float64] */;
  %333 = log2(%332) /* ty=Tensor[(1, 1, 14), float64] */;
  %334 = cast(meta[relay.Constant][28] /* ty=Tensor[(1, 1, 14), float64] */, dtype="int8") /* ty=Tensor[(1, 1, 14), int8] */;
  %335 = shape_of(%333, dtype="int32") /* ty=Tensor[(3), int32] */;
  %336 = cast(%333, dtype="int8") /* ty=Tensor[(1, 1, 14), int8] */;
  %337 = dyn.reshape(%334, %335, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %338 = add(%336, %337) /* ty=Tensor[(?, ?, 14), int8] */;
  (%338,)
}

def @func_8418() -> Tensor[(?, ?, 14), int64] {
  %339 = @func_5506() /* ty=(Tensor[(?, ?, 14), int64],) */;
  %339.0
}

def @func_1425(%var_1422: Tensor[(3, 8, 2), float64], %var_1423: Tensor[(3, 8, 2), float64], %var_1424: Tensor[(150), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), bool], Tensor[(560), uint64], Tensor[(117, 2), float32], Tensor[(150), float32], Tensor[(5, 10, 3), float32]) {
  %360 = fn (%var_1394: Tensor[(3, 8, 2), float64], %var_1395: Tensor[(3, 8, 2), float64], %var_1414: Tensor[(150), float32]) -> (Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), bool], Tensor[(560), uint64], Tensor[(117, 2), float32], Tensor[(150), float32], Tensor[(5, 10, 3), float32]) {
    %340 = cast(%var_1395, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %341 = shape_of(%var_1394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %342 = cast(%var_1394, dtype="float64") /* ty=Tensor[(3, 8, 2), float64] */;
    %343 = dyn.reshape(%340, %341, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %344 = cast(%var_1395, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
    %345 = shape_of(%var_1394, dtype="int32") /* ty=Tensor[(3), int32] */;
    %346 = cast(%var_1394, dtype="bool") /* ty=Tensor[(3, 8, 2), bool] */;
    %347 = dyn.reshape(%344, %345, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %348 = cast(meta[relay.Constant][29] /* ty=Tensor[(117, 2), float32] */, dtype="float32") /* ty=Tensor[(117, 2), float32] */;
    %349 = cast(%var_1414, dtype="float32") /* ty=Tensor[(150), float32] */;
    %350 = reshape(%348, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
    %351 = reshape(%349, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %352 = @func_754(%350, %351) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
    %353 = cast(%var_1414, dtype="float32") /* ty=Tensor[(150), float32] */;
    %354 = reshape(%353, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
    %355 = @func_281(%354) /* ty=(Tensor[(5, 10, 3), float32],) */;
    %356 = minimum(%342, %343) /* ty=Tensor[(3, 8, 2), float64] */;
    %357 = equal(%346, %347) /* ty=Tensor[(3, 8, 2), bool] */;
    %358 = %352.3;
    %359 = %355.0;
    (%356, %357, %358, meta[relay.Constant][29] /* ty=Tensor[(117, 2), float32] */, %var_1414, %359)
  };
  %360(%var_1422, %var_1423, %var_1424) /* ty=(Tensor[(3, 8, 2), float64], Tensor[(3, 8, 2), bool], Tensor[(560), uint64], Tensor[(117, 2), float32], Tensor[(150), float32], Tensor[(5, 10, 3), float32]) */
}

def @func_4322(%var_4319: Tensor[(14, 6, 1), bool], %var_4320: Tensor[(14, 6, 8), bool], %var_4321: Tensor[(512), bool]) -> (Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) {
  %372 = fn (%var_4304: Tensor[(14, 6, 1), bool], %var_4305: Tensor[(14, 6, 8), bool], %var_4315: Tensor[(512), bool]) -> (Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) {
    %361 = cast(%var_4304, dtype="bool") /* ty=Tensor[(14, 6, 1), bool] */;
    %362 = cast(%var_4305, dtype="bool") /* ty=Tensor[(14, 6, 8), bool] */;
    %363 = logical_or(%361, %362) /* ty=Tensor[(14, 6, 8), bool] */;
    %364 = cast(%363, dtype="float32") /* ty=Tensor[(14, 6, 8), float32] */;
    %365 = cast(meta[relay.Constant][30] /* ty=Tensor[(4, 140), uint64] */, dtype="uint64") /* ty=Tensor[(4, 140), uint64] */;
    %366 = cast(%var_4315, dtype="bool") /* ty=Tensor[(512), bool] */;
    %367 = reshape(%365, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %368 = reshape(%366, newshape=[512]) /* ty=Tensor[(512), bool] */;
    %369 = @func_397(%367, %368) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
    %370 = log(%364) /* ty=Tensor[(14, 6, 8), float32] */;
    %371 = %369.0;
    (%370, %371, meta[relay.Constant][30] /* ty=Tensor[(4, 140), uint64] */, %var_4315)
  };
  %372(%var_4319, %var_4320, %var_4321) /* ty=(Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) */
}

def @func_6658(%var_6656: Tensor[(12, 2, 3), int8], %var_6657: Tensor[(12, 2, 3), int8]) -> (Tensor[(12, 2, 3), int64], Tensor[(6, ?, 5), bool], Tensor[(?, ?, 14), float64], Tensor[(300, 1), float32]) {
  %393 = fn (%var_6609: Tensor[(12, 2, 3), int8], %var_6614: Tensor[(12, 2, 3), int8]) -> (Tensor[(12, 2, 3), int64], Tensor[(6, ?, 5), bool], Tensor[(?, ?, 14), float64], Tensor[(300, 1), float32]) {
    %373 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 2, 3), int8] */, dtype="int8") /* ty=Tensor[(12, 2, 3), int8] */;
    %374 = shape_of(%var_6609, dtype="int32") /* ty=Tensor[(3), int32] */;
    %375 = cast(%var_6609, dtype="int8") /* ty=Tensor[(12, 2, 3), int8] */;
    %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %377 = minimum(%375, %376) /* ty=Tensor[(12, 2, 3), int8] */;
    %378 = cast(%var_6614, dtype="uint32") /* ty=Tensor[(12, 2, 3), uint32] */;
    %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
    %380 = cast(%377, dtype="uint32") /* ty=Tensor[(12, 2, 3), uint32] */;
    %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %382 = bitwise_and(%380, %381) /* ty=Tensor[(12, 2, 3), uint32] */;
    %383 = cast(meta[relay.Constant][31] /* ty=Tensor[(12, 2, 3), int8] */, dtype="int64") /* ty=Tensor[(12, 2, 3), int64] */;
    %384 = shape_of(%382, dtype="int32") /* ty=Tensor[(3), int32] */;
    %385 = cast(%382, dtype="int64") /* ty=Tensor[(12, 2, 3), int64] */;
    %386 = dyn.reshape(%383, %384, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %387 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
    %388 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
    %389 = logical_xor(%385, %386) /* ty=Tensor[(12, 2, 3), int64] */;
    %390 = %387.0;
    %391 = @func_5708() /* ty=Tensor[(?, ?, 14), float64] */;
    %392 = %388.1;
    (%389, %390, %391, %392)
  };
  %393(%var_6656, %var_6657) /* ty=(Tensor[(12, 2, 3), int64], Tensor[(6, ?, 5), bool], Tensor[(?, ?, 14), float64], Tensor[(300, 1), float32]) */
}

def @func_5709() -> Tensor[(?, ?, 14), float64] {
  %396 = fn () -> Tensor[(?, ?, 14), float64] {
    %394 = @func_5464() /* ty=Tensor[(?, ?, 14), int64] */;
    %395 = cast(%394, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
    exp(%395) /* ty=Tensor[(?, ?, 14), float64] */
  };
  %396() /* ty=Tensor[(?, ?, 14), float64] */
}

def @func_6131(%var_6064: Tensor[(10, 1, 6), float32], %var_6078: Tensor[(450), float64], %var_6086: Tensor[(432), float32]) -> (Tensor[(10, 1, 6), float32], Tensor[(588), float64], Tensor[(192), float32], Tensor[(7, 6), float64], Tensor[(5, 6, 15), float32], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 12, 5), float32], Tensor[(432), float32], Tensor[(?, ?, 14), int8]) {
  %397 = cast(%var_6064, dtype="float32") /* ty=Tensor[(10, 1, 6), float32] */;
  %398 = cast(meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %399 = cast(meta[relay.Constant][33] /* ty=Tensor[(7, 6), float64] */, dtype="float64") /* ty=Tensor[(7, 6), float64] */;
  %400 = reshape(%398, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %401 = reshape(%399, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %402 = @func_5869(%400, %401) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %403 = cast(%var_6078, dtype="float64") /* ty=Tensor[(450), float64] */;
  %404 = cast(meta[relay.Constant][34] /* ty=Tensor[(84), bool] */, dtype="bool") /* ty=Tensor[(84), bool] */;
  %405 = cast(meta[relay.Constant][35] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
  %406 = cast(meta[relay.Constant][36] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %407 = reshape(%403, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
  %408 = reshape(%404, newshape=[84]) /* ty=Tensor[(84), bool] */;
  %409 = reshape(%405, newshape=[480]) /* ty=Tensor[(480), float64] */;
  %410 = reshape(%406, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %411 = @func_4545(%407, %408, %409, %410) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */;
  %412 = cast(%var_6086, dtype="float32") /* ty=Tensor[(432), float32] */;
  %413 = reshape(%412, newshape=[8, 9, 6]) /* ty=Tensor[(8, 9, 6), float32] */;
  %414 = @func_2142(%413) /* ty=(Tensor[(8, 9, 6), float32], Tensor[(5, 12, 5), float32], Tensor[(300, 1), float32]) */;
  %415 = log2(%397) /* ty=Tensor[(10, 1, 6), float32] */;
  %416 = %402.2;
  %417 = %411.9;
  %418 = %414.1;
  %419 = @func_5321() /* ty=Tensor[(?, ?, 14), int8] */;
  (%415, %416, meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, meta[relay.Constant][33] /* ty=Tensor[(7, 6), float64] */, %417, %var_6078, meta[relay.Constant][34] /* ty=Tensor[(84), bool] */, meta[relay.Constant][35] /* ty=Tensor[(480), float64] */, meta[relay.Constant][36] /* ty=Tensor[(120), bool] */, %418, %var_6086, %419)
}

def @func_8128() -> Tensor[(10, 16, 15), float32] {
  @func_8126() /* ty=Tensor[(10, 16, 15), float32] */
}

def @func_7866() -> Tensor[(?, ?, 14), int8] {
  %420 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %420.0
}

def @func_2017(%var_2015: Tensor[(1, 5, 8), bool], %var_2016: Tensor[(3, 5, 8), bool]) -> Tensor[(3, 5, 8), bool] {
  @func_2013(%var_2015, %var_2016) /* ty=Tensor[(3, 5, 8), bool] */
}

def @func_5239() -> Tensor[(?, ?, 14), int8] {
  %422 = fn () -> Tensor[(?, ?, 14), int8] {
    %421 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %421.0
  };
  %422() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_1316(%var_1314: Tensor[(5, 7, 1), float64]) -> (Tensor[(5, 7, 1), float64], Tensor[(14, 5, 6), float64], Tensor[(10, 42), float64]) {
  @func_1313(%var_1314) /* ty=(Tensor[(5, 7, 1), float64], Tensor[(14, 5, 6), float64], Tensor[(10, 42), float64]) */
}

def @func_1004(%var_1002: Tensor[(9, 3, 4), float64], %var_1003: Tensor[(9, 3, 4), float64]) -> (Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) {
  @func_1000(%var_1002, %var_1003) /* ty=(Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) */
}

def @func_8192() -> Tensor[(11, 13, 14), float64] {
  %423 = @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */;
  %423.0
}

def @func_8543(%var_8541: Tensor[(1, 420), float64], %var_8542: Tensor[(150), float32]) -> (Tensor[(?, ?, 14), float64], Tensor[(7, 5, 8), float32], Tensor[(1344), uint8], Tensor[(1232), int8], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8]) {
  @func_8539(%var_8541, %var_8542) /* ty=(Tensor[(?, ?, 14), float64], Tensor[(7, 5, 8), float32], Tensor[(1344), uint8], Tensor[(1232), int8], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8]) */
}

def @func_5213() -> (Tensor[(?, ?, 14), int8],) {
  @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */
}

def @func_6746(%var_6742: float64, %var_6743: Tensor[(4, 6, 4), float64], %var_6744: Tensor[(84), bool], %var_6745: Tensor[(512), bool]) -> (Tensor[(4, 6, 4), float64], Tensor[(7, 5, 16), uint64], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool]) {
  %435 = fn (%var_6720: float64, %var_6721: Tensor[(4, 6, 4), float64], %var_6735: Tensor[(84), bool], %var_6737: Tensor[(512), bool]) -> (Tensor[(4, 6, 4), float64], Tensor[(7, 5, 16), uint64], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool]) {
    %424 = cast(%var_6720, dtype="float64") /* ty=float64 */;
    %425 = cast(%var_6721, dtype="float64") /* ty=Tensor[(4, 6, 4), float64] */;
    %426 = cast(%var_6735, dtype="bool") /* ty=Tensor[(84), bool] */;
    %427 = cast(meta[relay.Constant][37] /* ty=Tensor[(672), bool] */, dtype="bool") /* ty=Tensor[(672), bool] */;
    %428 = cast(%var_6737, dtype="bool") /* ty=Tensor[(512), bool] */;
    %429 = reshape(%426, newshape=[14, 6, 1]) /* ty=Tensor[(14, 6, 1), bool] */;
    %430 = reshape(%427, newshape=[14, 6, 8]) /* ty=Tensor[(14, 6, 8), bool] */;
    %431 = reshape(%428, newshape=[512]) /* ty=Tensor[(512), bool] */;
    %432 = @func_4318(%429, %430, %431) /* ty=(Tensor[(14, 6, 8), float32], Tensor[(7, 5, 16), uint64], Tensor[(4, 140), uint64], Tensor[(512), bool]) */;
    %433 = mod(%424, %425) /* ty=Tensor[(4, 6, 4), float64] */;
    %434 = %432.1;
    (%433, %434, %var_6735, meta[relay.Constant][37] /* ty=Tensor[(672), bool] */, %var_6737)
  };
  %435(%var_6742, %var_6743, %var_6744, %var_6745) /* ty=(Tensor[(4, 6, 4), float64], Tensor[(7, 5, 16), uint64], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool]) */
}

def @func_7276(%var_7274: Tensor[(512), bool], %var_7275: Tensor[(1232), int8]) -> (Tensor[(?, ?, 14), float64], Tensor[(16, 4, 8), bool], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(165), float64], Tensor[(1232), int8], Tensor[(33, 5), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(70, 6), float32]) {
  @func_7272(%var_7274, %var_7275) /* ty=(Tensor[(?, ?, 14), float64], Tensor[(16, 4, 8), bool], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(165), float64], Tensor[(1232), int8], Tensor[(33, 5), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(70, 6), float32]) */
}

def @func_5401(%var_5398: Tensor[(75, 2), float32], %var_5399: Tensor[(75, 2), float32], %var_5400: Tensor[(896), float32]) -> (Tensor[(9, 4, 14), uint64], Tensor[(5, 10, 3), float32], Tensor[(75, 2), uint16], Tensor[(9, 4, 14), float64], Tensor[(4, 14, 16), float32], Tensor[(896), float32], Tensor[(75, 2), float32]) {
  @func_5396(%var_5398, %var_5399, %var_5400) /* ty=(Tensor[(9, 4, 14), uint64], Tensor[(5, 10, 3), float32], Tensor[(75, 2), uint16], Tensor[(9, 4, 14), float64], Tensor[(4, 14, 16), float32], Tensor[(896), float32], Tensor[(75, 2), float32]) */
}

def @func_1000(%var_963: Tensor[(9, 3, 4), float64], %var_966: Tensor[(9, 3, 4), float64]) -> (Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) {
  %436 = cast(%var_963, dtype="float64") /* ty=Tensor[(9, 3, 4), float64] */;
  %437 = atan(%436) /* ty=Tensor[(9, 3, 4), float64] */;
  %438 = cast(%var_966, dtype="int16") /* ty=Tensor[(9, 3, 4), int16] */;
  %439 = shape_of(%437, dtype="int32") /* ty=Tensor[(3), int32] */;
  %440 = cast(%437, dtype="int16") /* ty=Tensor[(9, 3, 4), int16] */;
  %441 = dyn.reshape(%438, %439, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %442 = cast(meta[relay.Constant][38] /* ty=Tensor[(20, 32), uint16] */, dtype="uint16") /* ty=Tensor[(20, 32), uint16] */;
  %443 = reshape(%442, newshape=[16, 5, 8]) /* ty=Tensor[(16, 5, 8), uint16] */;
  %444 = @func_89(%443) /* ty=(Tensor[(16, 5, 8), bool], Tensor[(16, 5, 8), float32]) */;
  %445 = left_shift(%440, %441) /* ty=Tensor[(9, 3, 4), int16] */;
  %446 = %444.1;
  (%445, %446, meta[relay.Constant][38] /* ty=Tensor[(20, 32), uint16] */)
}

def @func_3344(%var_3335: Tensor[(1, 16, 14), float32]) -> (Tensor[(1, 16, 14), float32], Tensor[(150), float32], Tensor[(234), float32], Tensor[(150), float32]) {
  %447 = cast(%var_3335, dtype="float32") /* ty=Tensor[(1, 16, 14), float32] */;
  %448 = cast(meta[relay.Constant][39] /* ty=Tensor[(234), float32] */, dtype="float32") /* ty=Tensor[(234), float32] */;
  %449 = cast(meta[relay.Constant][40] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
  %450 = reshape(%448, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %451 = reshape(%449, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %452 = @func_754(%450, %451) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %453 = log2(%447) /* ty=Tensor[(1, 16, 14), float32] */;
  %454 = %452.2;
  (%453, %454, meta[relay.Constant][39] /* ty=Tensor[(234), float32] */, meta[relay.Constant][40] /* ty=Tensor[(150), float32] */)
}

def @func_6451() -> (Tensor[(?, ?, 14), int8],) {
  %457 = fn () -> (Tensor[(?, ?, 14), int8],) {
    %455 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %456 = %455.0;
    (%456,)
  };
  %457() /* ty=(Tensor[(?, ?, 14), int8],) */
}

def @func_2930(%var_2916: Tensor[(1, 7, 4), float64]) -> (Tensor[(1, 7, 4), float64],) {
  %458 = cast(%var_2916, dtype="float64") /* ty=Tensor[(1, 7, 4), float64] */;
  %459 = tan(%458) /* ty=Tensor[(1, 7, 4), float64] */;
  (%459,)
}

def @main(%var_8659: Tensor[(11, 13, 14), float64]) -> Tensor[(11, 13, 14), uint16] {
  %460 = @func_8192() /* ty=Tensor[(11, 13, 14), float64] */;
  %461 = cast(%var_8659, dtype="uint16") /* ty=Tensor[(11, 13, 14), uint16] */;
  %462 = shape_of(%460, dtype="int32") /* ty=Tensor[(3), int32] */;
  %463 = cast(%460, dtype="uint16") /* ty=Tensor[(11, 13, 14), uint16] */;
  %464 = dyn.reshape(%461, %462, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  right_shift(%463, %464) /* ty=Tensor[(11, 13, 14), uint16] */
}

def @func_6842() -> Tensor[(?, ?, 14), int8] {
  @func_6840() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_7868() -> Tensor[(?, ?, 14), int8] {
  @func_7866() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_7296() -> Tensor[(10, 16, 15), float32] {
  %466 = fn () -> Tensor[(10, 16, 15), float32] {
    %465 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
    %465.0
  };
  %466() /* ty=Tensor[(10, 16, 15), float32] */
}

def @func_8539(%var_8483: Tensor[(1, 420), float64], %var_8484: Tensor[(150), float32]) -> (Tensor[(?, ?, 14), float64], Tensor[(7, 5, 8), float32], Tensor[(1344), uint8], Tensor[(1232), int8], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8]) {
  %467 = @func_7829() /* ty=(Tensor[(7, 5, 8), float32],) */;
  %468 = cast(meta[relay.Constant][41] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %469 = cast(meta[relay.Constant][41] /* ty=Tensor[(1232), int8] */, dtype="int8") /* ty=Tensor[(1232), int8] */;
  %470 = cast(meta[relay.Constant][42] /* ty=Tensor[(165), float64] */, dtype="float64") /* ty=Tensor[(165), float64] */;
  %471 = cast(%var_8483, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %472 = cast(%var_8484, dtype="float32") /* ty=Tensor[(150), float32] */;
  %473 = cast(meta[relay.Constant][43] /* ty=Tensor[(1344), uint8] */, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %474 = reshape(%468, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %475 = reshape(%469, newshape=[11, 8, 14]) /* ty=Tensor[(11, 8, 14), int8] */;
  %476 = reshape(%470, newshape=[165]) /* ty=Tensor[(165), float64] */;
  %477 = reshape(%471, newshape=[1, 420]) /* ty=Tensor[(1, 420), float64] */;
  %478 = reshape(%472, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %479 = reshape(%473, newshape=[1344]) /* ty=Tensor[(1344), uint8] */;
  %480 = @func_5297(%474, %475, %476, %477, %478, %479) /* ty=(Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) */;
  %481 = @func_5708() /* ty=Tensor[(?, ?, 14), float64] */;
  %482 = %467.0;
  %483 = %480.4;
  (%481, %482, %483, meta[relay.Constant][41] /* ty=Tensor[(1232), int8] */, meta[relay.Constant][42] /* ty=Tensor[(165), float64] */, %var_8483, %var_8484, meta[relay.Constant][43] /* ty=Tensor[(1344), uint8] */)
}

def @func_2402(%var_2381: Tensor[(3, 10, 16), float64], %var_2395: Tensor[(120), bool]) -> (Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) {
  %484 = cast(meta[relay.Constant][44] /* ty=Tensor[(3, 10, 16), float64] */, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %485 = shape_of(%var_2381, dtype="int32") /* ty=Tensor[(3), int32] */;
  %486 = cast(%var_2381, dtype="float64") /* ty=Tensor[(3, 10, 16), float64] */;
  %487 = dyn.reshape(%484, %485, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %488 = cast(meta[relay.Constant][45] /* ty=Tensor[(40), bool] */, dtype="bool") /* ty=Tensor[(40), bool] */;
  %489 = cast(%var_2395, dtype="bool") /* ty=Tensor[(120), bool] */;
  %490 = reshape(%488, newshape=[1, 5, 8]) /* ty=Tensor[(1, 5, 8), bool] */;
  %491 = reshape(%489, newshape=[3, 5, 8]) /* ty=Tensor[(3, 5, 8), bool] */;
  %492 = floor_mod(%486, %487) /* ty=Tensor[(3, 10, 16), float64] */;
  %493 = @func_2013(%490, %491) /* ty=Tensor[(3, 5, 8), bool] */;
  (%492, %493, meta[relay.Constant][45] /* ty=Tensor[(40), bool] */, %var_2395)
}

def @func_702(%var_701: Tensor[(5, 12, 5), float32]) -> Tensor[(5, 12, 5), float32] {
  %498 = fn (%var_692: Tensor[(5, 12, 5), float32]) -> Tensor[(5, 12, 5), float32] {
    %494 = cast(meta[relay.Constant][46] /* ty=Tensor[(5, 12, 5), float32] */, dtype="float32") /* ty=Tensor[(5, 12, 5), float32] */;
    %495 = shape_of(%var_692, dtype="int32") /* ty=Tensor[(3), int32] */;
    %496 = cast(%var_692, dtype="float32") /* ty=Tensor[(5, 12, 5), float32] */;
    %497 = dyn.reshape(%494, %495, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    floor_mod(%496, %497) /* ty=Tensor[(5, 12, 5), float32] */
  };
  %498(%var_701) /* ty=Tensor[(5, 12, 5), float32] */
}

def @func_8194() -> Tensor[(11, 13, 14), float64] {
  @func_8192() /* ty=Tensor[(11, 13, 14), float64] */
}

def @func_8322(%var_8319: Tensor[(192), float32], %var_8320: Tensor[(42), float64], %var_8321: Tensor[(560), uint64]) -> (Tensor[(?, ?, 14), int8], Tensor[(192), float32], Tensor[(42), float64], Tensor[(10, 16, 15), float32], Tensor[(?, ?, 14), int8], Tensor[(300, 588), bool], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(7, 5, 8), float32]) {
  @func_8317(%var_8319, %var_8320, %var_8321) /* ty=(Tensor[(?, ?, 14), int8], Tensor[(192), float32], Tensor[(42), float64], Tensor[(10, 16, 15), float32], Tensor[(?, ?, 14), int8], Tensor[(300, 588), bool], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(7, 5, 8), float32]) */
}

def @func_8034() -> (Tensor[(?, ?, 14), int64], Tensor[(?, ?, 14), float32]) {
  %499 = @func_5238() /* ty=Tensor[(?, ?, 14), int8] */;
  %500 = cast(%499, dtype="float32") /* ty=Tensor[(?, ?, 14), float32] */;
  %501 = @func_5464() /* ty=Tensor[(?, ?, 14), int64] */;
  %502 = erf(%500) /* ty=Tensor[(?, ?, 14), float32] */;
  (%501, %502)
}

def @func_2896(%var_2894: Tensor[(4, 3, 6), bool], %var_2895: Tensor[(4, 3, 6), bool]) -> (Tensor[(4, 3, 6), bool],) {
  @func_2892(%var_2894, %var_2895) /* ty=(Tensor[(4, 3, 6), bool],) */
}

def @func_5738() -> (Tensor[(?, ?, 14), int8],) {
  %503 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %504 = %503.0;
  (%504,)
}

def @func_6050() -> (Tensor[(?, ?, 14), int8],) {
  %507 = fn () -> (Tensor[(?, ?, 14), int8],) {
    %505 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %506 = %505.0;
    (%506,)
  };
  %507() /* ty=(Tensor[(?, ?, 14), int8],) */
}

def @func_6834() -> Tensor[(16, 13, 14), float32] {
  @func_6832() /* ty=Tensor[(16, 13, 14), float32] */
}

def @func_343(%var_341: Tensor[(7, 5, 16), uint64], %var_342: Tensor[(7, 5, 16), uint64]) -> Tensor[(7, 5, 16), uint64] {
  %512 = fn (%var_329: Tensor[(7, 5, 16), uint64], %var_330: Tensor[(7, 5, 16), uint64]) -> Tensor[(7, 5, 16), uint64] {
    %508 = cast(%var_330, dtype="uint64") /* ty=Tensor[(7, 5, 16), uint64] */;
    %509 = shape_of(%var_329, dtype="int32") /* ty=Tensor[(3), int32] */;
    %510 = cast(%var_329, dtype="uint64") /* ty=Tensor[(7, 5, 16), uint64] */;
    %511 = dyn.reshape(%508, %509, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    multiply(%510, %511) /* ty=Tensor[(7, 5, 16), uint64] */
  };
  %512(%var_341, %var_342) /* ty=Tensor[(7, 5, 16), uint64] */
}

def @func_5297(%var_5247: Tensor[(11, 8, 14), int8], %var_5248: Tensor[(11, 8, 14), int8], %var_5272: Tensor[(165), float64], %var_5273: Tensor[(1, 420), float64], %var_5274: Tensor[(150), float32], %var_5280: Tensor[(1344), uint8]) -> (Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) {
  %513 = cast(%var_5248, dtype="int8") /* ty=Tensor[(11, 8, 14), int8] */;
  %514 = shape_of(%var_5247, dtype="int32") /* ty=Tensor[(3), int32] */;
  %515 = cast(%var_5247, dtype="int8") /* ty=Tensor[(11, 8, 14), int8] */;
  %516 = dyn.reshape(%513, %514, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %517 = logical_xor(%515, %516) /* ty=Tensor[(11, 8, 14), int8] */;
  %518 = cast(%var_5248, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
  %519 = shape_of(%517, dtype="int32") /* ty=Tensor[(3), int32] */;
  %520 = cast(%517, dtype="int16") /* ty=Tensor[(11, 8, 14), int16] */;
  %521 = dyn.reshape(%518, %519, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %522 = cast(%var_5280, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %523 = cast(%var_5280, dtype="uint8") /* ty=Tensor[(1344), uint8] */;
  %524 = cast(meta[relay.Constant][47] /* ty=Tensor[(39, 6), float32] */, dtype="float32") /* ty=Tensor[(39, 6), float32] */;
  %525 = reshape(%522, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %526 = reshape(%523, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
  %527 = reshape(%524, newshape=[234]) /* ty=Tensor[(234), float32] */;
  %528 = @func_3676(%525, %526, %527) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */;
  %529 = %528.3;
  %530 = cast(%var_5272, dtype="float64") /* ty=Tensor[(165), float64] */;
  %531 = cast(%var_5273, dtype="float64") /* ty=Tensor[(1, 420), float64] */;
  %532 = cast(%var_5274, dtype="float32") /* ty=Tensor[(150), float32] */;
  %533 = reshape(%530, newshape=[15, 11, 1]) /* ty=Tensor[(15, 11, 1), float64] */;
  %534 = reshape(%531, newshape=[420]) /* ty=Tensor[(420), float64] */;
  %535 = reshape(%532, newshape=[5, 30]) /* ty=Tensor[(5, 30), float32] */;
  %536 = @func_4931(%533, %534, %535) /* ty=(Tensor[(15, 11, ?), float64], Tensor[(14, 5, 6), float64], Tensor[(420), float64], Tensor[(5, 10, 3), float32], Tensor[(5, 30), float32]) */;
  %537 = %536.4;
  %538 = cast(%537, dtype="int16") /* ty=Tensor[(5, 30), int16] */;
  %539 = shape_of(%529, dtype="int32") /* ty=Tensor[(1), int32] */;
  %540 = cast(%529, dtype="int16") /* ty=Tensor[(150), int16] */;
  %541 = dyn.reshape(%538, %539, newshape=[]) /* ty=Tensor[(?), int16] */;
  %542 = left_shift(%520, %521) /* ty=Tensor[(11, 8, 14), int16] */;
  %543 = subtract(%540, %541) /* ty=Tensor[(150), int16] */;
  (%542, %var_5272, %var_5273, %var_5274, %var_5280, meta[relay.Constant][47] /* ty=Tensor[(39, 6), float32] */, %543)
}

def @func_5594(%var_5592: Tensor[(12, 14, 4), int64], %var_5593: Tensor[(12, 14, 4), int64]) -> Tensor[(12, 14, 4), int64] {
  %548 = fn (%var_5580: Tensor[(12, 14, 4), int64], %var_5581: Tensor[(12, 14, 4), int64]) -> Tensor[(12, 14, 4), int64] {
    %544 = cast(%var_5581, dtype="int64") /* ty=Tensor[(12, 14, 4), int64] */;
    %545 = shape_of(%var_5580, dtype="int32") /* ty=Tensor[(3), int32] */;
    %546 = cast(%var_5580, dtype="int64") /* ty=Tensor[(12, 14, 4), int64] */;
    %547 = dyn.reshape(%544, %545, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    subtract(%546, %547) /* ty=Tensor[(12, 14, 4), int64] */
  };
  %548(%var_5592, %var_5593) /* ty=Tensor[(12, 14, 4), int64] */
}

def @func_6819() -> Tensor[(6, ?, 5), bool] {
  %550 = fn () -> Tensor[(6, ?, 5), bool] {
    %549 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
    %549.0
  };
  %550() /* ty=Tensor[(6, ?, 5), bool] */
}

def @func_6374() -> (Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) {
  @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */
}

def @func_7779(%var_7778: Tensor[(7, 5, 8), float32]) -> (Tensor[(7, 5, 8), bool], Tensor[(7, 5, 8), bool]) {
  %568 = fn (%var_7743: Tensor[(7, 5, 8), float32]) -> (Tensor[(7, 5, 8), bool], Tensor[(7, 5, 8), bool]) {
    %551 = @func_7689() /* ty=(Tensor[(7, 5, 8), float32],) */;
    %552 = %551.0;
    %553 = cast(%var_7743, dtype="uint16") /* ty=Tensor[(7, 5, 8), uint16] */;
    %554 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
    %555 = cast(%552, dtype="uint16") /* ty=Tensor[(7, 5, 8), uint16] */;
    %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %557 = maximum(%555, %556) /* ty=Tensor[(7, 5, 8), uint16] */;
    %558 = cast(%557, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
    %559 = shape_of(%552, dtype="int32") /* ty=Tensor[(3), int32] */;
    %560 = cast(%552, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
    %561 = dyn.reshape(%558, %559, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %562 = cast(%552, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
    %563 = shape_of(%557, dtype="int32") /* ty=Tensor[(3), int32] */;
    %564 = cast(%557, dtype="bool") /* ty=Tensor[(7, 5, 8), bool] */;
    %565 = dyn.reshape(%562, %563, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %566 = greater_equal(%560, %561) /* ty=Tensor[(7, 5, 8), bool] */;
    %567 = logical_and(%564, %565) /* ty=Tensor[(7, 5, 8), bool] */;
    (%566, %567)
  };
  %568(%var_7778) /* ty=(Tensor[(7, 5, 8), bool], Tensor[(7, 5, 8), bool]) */
}

def @func_7020(%var_7018: Tensor[(6, 1, 13), uint32], %var_7019: Tensor[(6, 10, 13), uint32]) -> (Tensor[(6, 10, 13), uint32], Tensor[(1344), uint8], Tensor[(2002), float64]) {
  %576 = fn (%var_6989: Tensor[(6, 1, 13), uint32], %var_6990: Tensor[(6, 10, 13), uint32]) -> (Tensor[(6, 10, 13), uint32], Tensor[(1344), uint8], Tensor[(2002), float64]) {
    %569 = cast(%var_6989, dtype="uint32") /* ty=Tensor[(6, 1, 13), uint32] */;
    %570 = cast(%var_6990, dtype="uint32") /* ty=Tensor[(6, 10, 13), uint32] */;
    %571 = cast(meta[relay.Constant][48] /* ty=Tensor[(2002), float64] */, dtype="float64") /* ty=Tensor[(2002), float64] */;
    %572 = reshape(%571, newshape=[11, 13, 14]) /* ty=Tensor[(11, 13, 14), float64] */;
    %573 = @func_5793(%572) /* ty=(Tensor[(11, 13, 14), float32], Tensor[(234), float32], Tensor[(1344), uint8], Tensor[(234), float32]) */;
    %574 = subtract(%569, %570) /* ty=Tensor[(6, 10, 13), uint32] */;
    %575 = %573.2;
    (%574, %575, meta[relay.Constant][48] /* ty=Tensor[(2002), float64] */)
  };
  %576(%var_7018, %var_7019) /* ty=(Tensor[(6, 10, 13), uint32], Tensor[(1344), uint8], Tensor[(2002), float64]) */
}

def @func_8126() -> Tensor[(10, 16, 15), float32] {
  %577 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
  %577.0
}

def @func_5538(%var_5536: int32, %var_5537: Tensor[(5, 7, 7), int32]) -> Tensor[(5, 7, 7), int32] {
  %580 = fn (%var_5522: int32, %var_5523: Tensor[(5, 7, 7), int32]) -> Tensor[(5, 7, 7), int32] {
    %578 = cast(%var_5522, dtype="int32") /* ty=int32 */;
    %579 = cast(%var_5523, dtype="int32") /* ty=Tensor[(5, 7, 7), int32] */;
    bitwise_and(%578, %579) /* ty=Tensor[(5, 7, 7), int32] */
  };
  %580(%var_5536, %var_5537) /* ty=Tensor[(5, 7, 7), int32] */
}

def @func_3985(%var_3984: Tensor[(120), bool]) -> (Tensor[(9, 9), float32], Tensor[(40), bool], Tensor[(1, 480), float64], Tensor[(120), bool]) {
  %589 = fn (%var_3980: Tensor[(120), bool]) -> (Tensor[(9, 9), float32], Tensor[(40), bool], Tensor[(1, 480), float64], Tensor[(120), bool]) {
    %581 = cast(meta[relay.Constant][49] /* ty=Tensor[(9, 9), float32] */, dtype="float32") /* ty=Tensor[(9, 9), float32] */;
    %582 = cast(meta[relay.Constant][50] /* ty=Tensor[(1, 480), float64] */, dtype="float64") /* ty=Tensor[(1, 480), float64] */;
    %583 = cast(%var_3980, dtype="bool") /* ty=Tensor[(120), bool] */;
    %584 = reshape(%582, newshape=[3, 10, 16]) /* ty=Tensor[(3, 10, 16), float64] */;
    %585 = reshape(%583, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %586 = @func_2402(%584, %585) /* ty=(Tensor[(3, 10, 16), float64], Tensor[(3, 5, 8), bool], Tensor[(40), bool], Tensor[(120), bool]) */;
    %587 = atan(%581) /* ty=Tensor[(9, 9), float32] */;
    %588 = %586.2;
    (%587, %588, meta[relay.Constant][50] /* ty=Tensor[(1, 480), float64] */, %var_3980)
  };
  %589(%var_3984) /* ty=(Tensor[(9, 9), float32], Tensor[(40), bool], Tensor[(1, 480), float64], Tensor[(120), bool]) */
}

def @func_8036() -> (Tensor[(?, ?, 14), int64], Tensor[(?, ?, 14), float32]) {
  @func_8034() /* ty=(Tensor[(?, ?, 14), int64], Tensor[(?, ?, 14), float32]) */
}

def @func_3347(%var_3345: Tensor[(1, 16, 14), float32]) -> (Tensor[(1, 16, 14), float32], Tensor[(150), float32], Tensor[(234), float32], Tensor[(150), float32]) {
  @func_3344(%var_3345) /* ty=(Tensor[(1, 16, 14), float32], Tensor[(150), float32], Tensor[(234), float32], Tensor[(150), float32]) */
}

def @func_757(%var_755: Tensor[(2, 9, 13), float32], %var_756: Tensor[(150), float32]) -> (Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) {
  %605 = fn (%var_724: Tensor[(2, 9, 13), float32], %var_743: Tensor[(150), float32]) -> (Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) {
    %590 = cast(%var_724, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
    %591 = shape_of(meta[relay.Constant][51] /* ty=Tensor[(2, 9, 13), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %592 = cast(meta[relay.Constant][51] /* ty=Tensor[(2, 9, 13), float32] */, dtype="bool") /* ty=Tensor[(2, 9, 13), bool] */;
    %593 = dyn.reshape(%590, %591, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %594 = cast(%var_743, dtype="float32") /* ty=Tensor[(150), float32] */;
    %595 = reshape(%594, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
    %596 = @func_281(%595) /* ty=(Tensor[(5, 10, 3), float32],) */;
    %597 = cast(meta[relay.Constant][52] /* ty=Tensor[(560), uint64] */, dtype="uint64") /* ty=Tensor[(560), uint64] */;
    %598 = cast(meta[relay.Constant][53] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
    %599 = reshape(%597, newshape=[560]) /* ty=Tensor[(560), uint64] */;
    %600 = reshape(%598, newshape=[512]) /* ty=Tensor[(512), bool] */;
    %601 = @func_397(%599, %600) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
    %602 = greater(%592, %593) /* ty=Tensor[(2, 9, 13), bool] */;
    %603 = %596.0;
    %604 = %601.1;
    (%602, %603, %var_743, %604, meta[relay.Constant][52] /* ty=Tensor[(560), uint64] */, meta[relay.Constant][53] /* ty=Tensor[(512), bool] */)
  };
  %605(%var_755, %var_756) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */
}

def @func_2207(%var_2205: Tensor[(16, 11, 8), int32], %var_2206: Tensor[(16, 11, 8), int32]) -> Tensor[(16, 11, 8), int32] {
  %610 = fn (%var_2193: Tensor[(16, 11, 8), int32], %var_2194: Tensor[(16, 11, 8), int32]) -> Tensor[(16, 11, 8), int32] {
    %606 = cast(%var_2194, dtype="int32") /* ty=Tensor[(16, 11, 8), int32] */;
    %607 = shape_of(%var_2193, dtype="int32") /* ty=Tensor[(3), int32] */;
    %608 = cast(%var_2193, dtype="int32") /* ty=Tensor[(16, 11, 8), int32] */;
    %609 = dyn.reshape(%606, %607, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    multiply(%608, %609) /* ty=Tensor[(16, 11, 8), int32] */
  };
  %610(%var_2205, %var_2206) /* ty=Tensor[(16, 11, 8), int32] */
}

def @func_8420() -> Tensor[(?, ?, 14), int64] {
  @func_8418() /* ty=Tensor[(?, ?, 14), int64] */
}

def @func_284(%var_282: Tensor[(5, 10, 3), float32]) -> (Tensor[(5, 10, 3), float32],) {
  @func_281(%var_282) /* ty=(Tensor[(5, 10, 3), float32],) */
}

def @func_5740() -> (Tensor[(?, ?, 14), int8],) {
  @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */
}

def @func_7450(%var_7373: Tensor[(15, 1, 10), float32], %var_7432: Tensor[(234), float32]) -> (Tensor[(1, 480), float64], Tensor[(120), bool], Tensor[(7, 6), float64], Tensor[(192), float32], Tensor[(42), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(15, ?, 10), bool], Tensor[(15, ?, 10), uint8]) {
  %611 = cast(meta[relay.Constant][54] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
  %612 = reshape(%611, newshape=[120]) /* ty=Tensor[(120), bool] */;
  %613 = @func_3983(%612) /* ty=(Tensor[(9, 9), float32], Tensor[(40), bool], Tensor[(1, 480), float64], Tensor[(120), bool]) */;
  %614 = cast(meta[relay.Constant][55] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %615 = cast(meta[relay.Constant][56] /* ty=Tensor[(42), float64] */, dtype="float64") /* ty=Tensor[(42), float64] */;
  %616 = reshape(%614, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %617 = reshape(%615, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %618 = @func_5869(%616, %617) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %619 = cast(%var_7432, dtype="float32") /* ty=Tensor[(234), float32] */;
  %620 = cast(%var_7373, dtype="float32") /* ty=Tensor[(15, 1, 10), float32] */;
  %621 = log10(%620) /* ty=Tensor[(15, 1, 10), float32] */;
  %622 = cast(%var_7373, dtype="bool") /* ty=Tensor[(15, 1, 10), bool] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="bool") /* ty=Tensor[(15, 1, 10), bool] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %626 = greater(%624, %625) /* ty=Tensor[(15, ?, 10), bool] */;
  %627 = cast(%626, dtype="float32") /* ty=Tensor[(15, ?, 10), float32] */;
  %628 = sigmoid(%627) /* ty=Tensor[(15, ?, 10), float32] */;
  %629 = cast(%628, dtype="float32") /* ty=Tensor[(15, ?, 10), float32] */;
  %630 = reshape(%619, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
  %631 = reshape(%629, newshape=[150]) /* ty=Tensor[(150), float32] */;
  %632 = @func_754(%630, %631) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
  %633 = cast(%626, dtype="bool") /* ty=Tensor[(15, ?, 10), bool] */;
  %634 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %635 = cast(%628, dtype="bool") /* ty=Tensor[(15, ?, 10), bool] */;
  %636 = dyn.reshape(%633, %634, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %637 = cast(%626, dtype="uint8") /* ty=Tensor[(15, ?, 10), uint8] */;
  %638 = shape_of(%628, dtype="int32") /* ty=Tensor[(3), int32] */;
  %639 = cast(%628, dtype="uint8") /* ty=Tensor[(15, ?, 10), uint8] */;
  %640 = dyn.reshape(%637, %638, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %641 = %613.2;
  %642 = %618.1;
  %643 = %632.3;
  %644 = logical_and(%635, %636) /* ty=Tensor[(15, ?, 10), bool] */;
  %645 = minimum(%639, %640) /* ty=Tensor[(15, ?, 10), uint8] */;
  (%641, meta[relay.Constant][54] /* ty=Tensor[(120), bool] */, %642, meta[relay.Constant][55] /* ty=Tensor[(192), float32] */, meta[relay.Constant][56] /* ty=Tensor[(42), float64] */, %643, %var_7432, %644, %645)
}

def @func_7820() -> Tensor[(?, ?, 14), int8] {
  @func_7818() /* ty=Tensor[(?, ?, 14), int8] */
}

def @func_6832() -> Tensor[(16, 13, 14), float32] {
  %646 = @func_6049() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %647 = %646.0;
  %648 = cast(%647, dtype="float32") /* ty=Tensor[(?, ?, 14), float32] */;
  %649 = cast(meta[relay.Constant][57] /* ty=Tensor[(16, 13, 14), int8] */, dtype="float32") /* ty=Tensor[(16, 13, 14), float32] */;
  minimum(%648, %649) /* ty=Tensor[(16, 13, 14), float32] */
}

def @func_6290() -> (Tensor[(10, 16, 15), float32],) {
  %650 = cast(meta[relay.Constant][58] /* ty=Tensor[(10, 16, 15), float32] */, dtype="float32") /* ty=Tensor[(10, 16, 15), float32] */;
  %651 = asin(%650) /* ty=Tensor[(10, 16, 15), float32] */;
  (%651,)
}

def @func_6573(%var_6570: Tensor[(7, 15, 14), int8], %var_6571: Tensor[(2, 96), float32], %var_6572: Tensor[(42), float64]) -> (Tensor[(7, 15, 14), int16], Tensor[(?, ?, 14), float64], Tensor[(588), float64], Tensor[(2, 96), float32], Tensor[(42), float64]) {
  @func_6568(%var_6570, %var_6571, %var_6572) /* ty=(Tensor[(7, 15, 14), int16], Tensor[(?, ?, 14), float64], Tensor[(588), float64], Tensor[(2, 96), float32], Tensor[(42), float64]) */
}

def @func_2892(%var_2885: Tensor[(4, 3, 6), bool], %var_2886: Tensor[(4, 3, 6), bool]) -> (Tensor[(4, 3, 6), bool],) {
  %652 = cast(%var_2886, dtype="bool") /* ty=Tensor[(4, 3, 6), bool] */;
  %653 = shape_of(%var_2885, dtype="int32") /* ty=Tensor[(3), int32] */;
  %654 = cast(%var_2885, dtype="bool") /* ty=Tensor[(4, 3, 6), bool] */;
  %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %656 = logical_or(%654, %655) /* ty=Tensor[(4, 3, 6), bool] */;
  (%656,)
}

def @func_5569() -> (Tensor[(11, 13, 14), float64],) {
  %657 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %658 = %657.0;
  %659 = cast(%658, dtype="float64") /* ty=Tensor[(?, ?, 14), float64] */;
  %660 = cast(meta[relay.Constant][59] /* ty=Tensor[(11, 13, 14), int8] */, dtype="float64") /* ty=Tensor[(11, 13, 14), float64] */;
  %661 = floor_mod(%659, %660) /* ty=Tensor[(11, 13, 14), float64] */;
  (%661,)
}

def @func_7690() -> (Tensor[(7, 5, 8), float32],) {
  %666 = fn () -> (Tensor[(7, 5, 8), float32],) {
    %662 = cast(meta[relay.Constant][60] /* ty=Tensor[(7, 5, 8), float32] */, dtype="float32") /* ty=Tensor[(7, 5, 8), float32] */;
    %663 = erf(%662) /* ty=Tensor[(7, 5, 8), float32] */;
    %664 = cast(%663, dtype="float32") /* ty=Tensor[(7, 5, 8), float32] */;
    %665 = acosh(%664) /* ty=Tensor[(7, 5, 8), float32] */;
    (%665,)
  };
  %666() /* ty=(Tensor[(7, 5, 8), float32],) */
}

def @func_8317(%var_8253: Tensor[(192), float32], %var_8254: Tensor[(42), float64], %var_8292: Tensor[(560), uint64]) -> (Tensor[(?, ?, 14), int8], Tensor[(192), float32], Tensor[(42), float64], Tensor[(10, 16, 15), float32], Tensor[(?, ?, 14), int8], Tensor[(300, 588), bool], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool], Tensor[(7, 5, 8), float32]) {
  %667 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %668 = cast(%var_8253, dtype="float32") /* ty=Tensor[(192), float32] */;
  %669 = cast(%var_8254, dtype="float64") /* ty=Tensor[(42), float64] */;
  %670 = reshape(%668, newshape=[4, 6, 8]) /* ty=Tensor[(4, 6, 8), float32] */;
  %671 = reshape(%669, newshape=[7, 6]) /* ty=Tensor[(7, 6), float64] */;
  %672 = @func_5869(%670, %671) /* ty=(Tensor[(3, 14, 14), float64], Tensor[(7, 6), float64], Tensor[(588), float64], Tensor[(4, 6, 8), uint8]) */;
  %673 = %672.2;
  %674 = cast(%673, dtype="float64") /* ty=Tensor[(588), float64] */;
  %675 = exp(%674) /* ty=Tensor[(588), float64] */;
  %676 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %677 = %676.1;
  %678 = cast(%675, dtype="bool") /* ty=Tensor[(588), bool] */;
  %679 = cast(%677, dtype="bool") /* ty=Tensor[(300, 1), bool] */;
  %680 = cast(%var_8292, dtype="uint64") /* ty=Tensor[(560), uint64] */;
  %681 = cast(meta[relay.Constant][61] /* ty=Tensor[(512), bool] */, dtype="bool") /* ty=Tensor[(512), bool] */;
  %682 = reshape(%680, newshape=[560]) /* ty=Tensor[(560), uint64] */;
  %683 = reshape(%681, newshape=[512]) /* ty=Tensor[(512), bool] */;
  %684 = @func_397(%682, %683) /* ty=(Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(16, 4, 8), bool], Tensor[(512), bool], Tensor[(6, 4, 11), bool]) */;
  %685 = @func_7829() /* ty=(Tensor[(7, 5, 8), float32],) */;
  %686 = %667.0;
  %687 = @func_8126() /* ty=Tensor[(10, 16, 15), float32] */;
  %688 = @func_5238() /* ty=Tensor[(?, ?, 14), int8] */;
  %689 = less(%678, %679) /* ty=Tensor[(300, 588), bool] */;
  %690 = %684.1;
  %691 = %685.0;
  (%686, %var_8253, %var_8254, %687, %688, %689, %690, %var_8292, meta[relay.Constant][61] /* ty=Tensor[(512), bool] */, %691)
}

def @func_6840() -> Tensor[(?, ?, 14), int8] {
  %692 = @func_6450() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %692.0
}

def @func_6136(%var_6133: Tensor[(10, 1, 6), float32], %var_6134: Tensor[(450), float64], %var_6135: Tensor[(432), float32]) -> (Tensor[(10, 1, 6), float32], Tensor[(588), float64], Tensor[(192), float32], Tensor[(7, 6), float64], Tensor[(5, 6, 15), float32], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 12, 5), float32], Tensor[(432), float32], Tensor[(?, ?, 14), int8]) {
  @func_6131(%var_6133, %var_6134, %var_6135) /* ty=(Tensor[(10, 1, 6), float32], Tensor[(588), float64], Tensor[(192), float32], Tensor[(7, 6), float64], Tensor[(5, 6, 15), float32], Tensor[(450), float64], Tensor[(84), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 12, 5), float32], Tensor[(432), float32], Tensor[(?, ?, 14), int8]) */
}

def @func_4987(%var_4976: Tensor[(3, 1, 14), float64], %var_4977: Tensor[(3, 14, 14), float64]) -> (Tensor[(3, 14, 14), float64],) {
  %693 = cast(%var_4976, dtype="float64") /* ty=Tensor[(3, 1, 14), float64] */;
  %694 = cast(%var_4977, dtype="float64") /* ty=Tensor[(3, 14, 14), float64] */;
  %695 = multiply(%693, %694) /* ty=Tensor[(3, 14, 14), float64] */;
  (%695,)
}

def @func_5984(%var_5981: Tensor[(108), float64], %var_5982: Tensor[(10, 45), float64], %var_5983: Tensor[(120), bool]) -> (Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(120), bool], Tensor[(21, 4), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(10, 45), float64]) {
  %716 = fn (%var_5937: Tensor[(108), float64], %var_5955: Tensor[(10, 45), float64], %var_5958: Tensor[(120), bool]) -> (Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(120), bool], Tensor[(21, 4), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(10, 45), float64]) {
    %696 = @func_5738() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %697 = cast(%var_5937, dtype="float64") /* ty=Tensor[(108), float64] */;
    %698 = cast(%var_5937, dtype="float64") /* ty=Tensor[(108), float64] */;
    %699 = reshape(%697, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
    %700 = reshape(%698, newshape=[9, 3, 4]) /* ty=Tensor[(9, 3, 4), float64] */;
    %701 = @func_1000(%699, %700) /* ty=(Tensor[(9, 3, 4), int16], Tensor[(16, 5, 8), float32], Tensor[(20, 32), uint16]) */;
    %702 = cast(%var_5955, dtype="float64") /* ty=Tensor[(10, 45), float64] */;
    %703 = cast(meta[relay.Constant][62] /* ty=Tensor[(21, 4), bool] */, dtype="bool") /* ty=Tensor[(21, 4), bool] */;
    %704 = cast(meta[relay.Constant][63] /* ty=Tensor[(480), float64] */, dtype="float64") /* ty=Tensor[(480), float64] */;
    %705 = cast(%var_5958, dtype="bool") /* ty=Tensor[(120), bool] */;
    %706 = reshape(%702, newshape=[5, 6, 15]) /* ty=Tensor[(5, 6, 15), float64] */;
    %707 = reshape(%703, newshape=[84]) /* ty=Tensor[(84), bool] */;
    %708 = reshape(%704, newshape=[480]) /* ty=Tensor[(480), float64] */;
    %709 = reshape(%705, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %710 = @func_4545(%706, %707, %708, %709) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */;
    %711 = cast(%var_5955, dtype="float64") /* ty=Tensor[(10, 45), float64] */;
    %712 = %696.0;
    %713 = %701.1;
    %714 = %710.8;
    %715 = cosh(%711) /* ty=Tensor[(10, 45), float64] */;
    (%712, %713, %var_5937, %714, meta[relay.Constant][62] /* ty=Tensor[(21, 4), bool] */, meta[relay.Constant][63] /* ty=Tensor[(480), float64] */, %var_5958, %715)
  };
  %716(%var_5981, %var_5982, %var_5983) /* ty=(Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(120), bool], Tensor[(21, 4), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(10, 45), float64]) */
}

def @func_4870(%var_4869: Tensor[(1344, 1), uint8]) -> (Tensor[(11, 11, 9), bool], Tensor[(2, 9, 13), bool], Tensor[(1, 234), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(1344, 1), uint8], Tensor[(11, 11, 9), float32]) {
  %738 = fn (%var_4839: Tensor[(1344, 1), uint8]) -> (Tensor[(11, 11, 9), bool], Tensor[(2, 9, 13), bool], Tensor[(1, 234), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(1344, 1), uint8], Tensor[(11, 11, 9), float32]) {
    %717 = cast(meta[relay.Constant][65] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="bool") /* ty=Tensor[(11, 11, 9), bool] */;
    %718 = shape_of(meta[relay.Constant][64] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %719 = cast(meta[relay.Constant][64] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="bool") /* ty=Tensor[(11, 11, 9), bool] */;
    %720 = dyn.reshape(%717, %718, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %721 = cast(meta[relay.Constant][66] /* ty=Tensor[(1, 234), float32] */, dtype="float32") /* ty=Tensor[(1, 234), float32] */;
    %722 = cast(meta[relay.Constant][67] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %723 = reshape(%721, newshape=[2, 9, 13]) /* ty=Tensor[(2, 9, 13), float32] */;
    %724 = reshape(%722, newshape=[150]) /* ty=Tensor[(150), float32] */;
    %725 = @func_754(%723, %724) /* ty=(Tensor[(2, 9, 13), bool], Tensor[(5, 10, 3), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(560), uint64], Tensor[(512), bool]) */;
    %726 = cast(%var_4839, dtype="uint8") /* ty=Tensor[(1344, 1), uint8] */;
    %727 = cast(%var_4839, dtype="uint8") /* ty=Tensor[(1344, 1), uint8] */;
    %728 = %725.0;
    %729 = cast(%728, dtype="float32") /* ty=Tensor[(2, 9, 13), float32] */;
    %730 = reshape(%726, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
    %731 = reshape(%727, newshape=[14, 8, 12]) /* ty=Tensor[(14, 8, 12), uint8] */;
    %732 = reshape(%729, newshape=[234]) /* ty=Tensor[(234), float32] */;
    %733 = @func_3676(%730, %731, %732) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */;
    %734 = cast(meta[relay.Constant][65] /* ty=Tensor[(11, 11, 9), uint16] */, dtype="float32") /* ty=Tensor[(11, 11, 9), float32] */;
    %735 = greater(%719, %720) /* ty=Tensor[(11, 11, 9), bool] */;
    %736 = %733.1;
    %737 = atan(%734) /* ty=Tensor[(11, 11, 9), float32] */;
    (%735, %728, meta[relay.Constant][66] /* ty=Tensor[(1, 234), float32] */, meta[relay.Constant][67] /* ty=Tensor[(150), float32] */, %736, %var_4839, %737)
  };
  %738(%var_4869) /* ty=(Tensor[(11, 11, 9), bool], Tensor[(2, 9, 13), bool], Tensor[(1, 234), float32], Tensor[(150), float32], Tensor[(560), uint64], Tensor[(1344, 1), uint8], Tensor[(11, 11, 9), float32]) */
}

def @func_8210() -> (Tensor[(11, 13, 14), float64],) {
  %741 = fn () -> (Tensor[(11, 13, 14), float64],) {
    %739 = @func_5569() /* ty=(Tensor[(11, 13, 14), float64],) */;
    %740 = %739.0;
    (%740,)
  };
  %741() /* ty=(Tensor[(11, 13, 14), float64],) */
}

def @func_5305(%var_5299: Tensor[(11, 8, 14), int8], %var_5300: Tensor[(11, 8, 14), int8], %var_5301: Tensor[(165), float64], %var_5302: Tensor[(1, 420), float64], %var_5303: Tensor[(150), float32], %var_5304: Tensor[(1344), uint8]) -> (Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) {
  @func_5297(%var_5299, %var_5300, %var_5301, %var_5302, %var_5303, %var_5304) /* ty=(Tensor[(11, 8, 14), int16], Tensor[(165), float64], Tensor[(1, 420), float64], Tensor[(150), float32], Tensor[(1344), uint8], Tensor[(39, 6), float32], Tensor[(150), int16]) */
}

def @func_5396(%var_5370: Tensor[(75, 2), float32], %var_5376: Tensor[(75, 2), float32], %var_5386: Tensor[(896), float32]) -> (Tensor[(9, 4, 14), uint64], Tensor[(5, 10, 3), float32], Tensor[(75, 2), uint16], Tensor[(9, 4, 14), float64], Tensor[(4, 14, 16), float32], Tensor[(896), float32], Tensor[(75, 2), float32]) {
  %742 = @func_5238() /* ty=Tensor[(?, ?, 14), int8] */;
  %743 = cast(%742, dtype="uint64") /* ty=Tensor[(?, ?, 14), uint64] */;
  %744 = cast(meta[relay.Constant][68] /* ty=Tensor[(9, 4, 14), int8] */, dtype="uint64") /* ty=Tensor[(9, 4, 14), uint64] */;
  %745 = cast(%var_5370, dtype="float32") /* ty=Tensor[(75, 2), float32] */;
  %746 = reshape(%745, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
  %747 = @func_281(%746) /* ty=(Tensor[(5, 10, 3), float32],) */;
  %748 = cast(%var_5376, dtype="uint16") /* ty=Tensor[(75, 2), uint16] */;
  %749 = shape_of(%var_5370, dtype="int32") /* ty=Tensor[(2), int32] */;
  %750 = cast(%var_5370, dtype="uint16") /* ty=Tensor[(75, 2), uint16] */;
  %751 = dyn.reshape(%748, %749, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  %752 = cast(meta[relay.Constant][68] /* ty=Tensor[(9, 4, 14), int8] */, dtype="float64") /* ty=Tensor[(9, 4, 14), float64] */;
  %753 = cast(%var_5386, dtype="float32") /* ty=Tensor[(896), float32] */;
  %754 = reshape(%753, newshape=[4, 14, 16]) /* ty=Tensor[(4, 14, 16), float32] */;
  %755 = @func_3832(%754) /* ty=(Tensor[(4, 14, 16), float32],) */;
  %756 = cast(%var_5370, dtype="float32") /* ty=Tensor[(75, 2), float32] */;
  %757 = multiply(%743, %744) /* ty=Tensor[(9, 4, 14), uint64] */;
  %758 = %747.0;
  %759 = right_shift(%750, %751) /* ty=Tensor[(75, 2), uint16] */;
  %760 = sqrt(%752) /* ty=Tensor[(9, 4, 14), float64] */;
  %761 = %755.0;
  %762 = asinh(%756) /* ty=Tensor[(75, 2), float32] */;
  (%757, %758, %759, %760, %761, %var_5386, %762)
}

def @func_3681(%var_3678: Tensor[(14, 8, 12), uint8], %var_3679: Tensor[(14, 8, 12), uint8], %var_3680: Tensor[(234), float32]) -> (Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) {
  @func_3676(%var_3678, %var_3679, %var_3680) /* ty=(Tensor[(14, 8, 12), float64], Tensor[(560), uint64], Tensor[(234), float32], Tensor[(150), float32]) */
}

def @func_6706() -> (Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(450), float64], Tensor[(120), bool]) {
  %773 = fn () -> (Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(450), float64], Tensor[(120), bool]) {
    %763 = @func_6049() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %764 = cast(meta[relay.Constant][69] /* ty=Tensor[(108), float64] */, dtype="float64") /* ty=Tensor[(108), float64] */;
    %765 = cast(meta[relay.Constant][70] /* ty=Tensor[(450), float64] */, dtype="float64") /* ty=Tensor[(450), float64] */;
    %766 = cast(meta[relay.Constant][71] /* ty=Tensor[(120), bool] */, dtype="bool") /* ty=Tensor[(120), bool] */;
    %767 = reshape(%764, newshape=[108]) /* ty=Tensor[(108), float64] */;
    %768 = reshape(%765, newshape=[10, 45]) /* ty=Tensor[(10, 45), float64] */;
    %769 = reshape(%766, newshape=[120]) /* ty=Tensor[(120), bool] */;
    %770 = @func_5980(%767, %768, %769) /* ty=(Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(120), bool], Tensor[(21, 4), bool], Tensor[(480), float64], Tensor[(120), bool], Tensor[(10, 45), float64]) */;
    %771 = %763.0;
    %772 = %770.1;
    (%771, %772, meta[relay.Constant][69] /* ty=Tensor[(108), float64] */, meta[relay.Constant][70] /* ty=Tensor[(450), float64] */, meta[relay.Constant][71] /* ty=Tensor[(120), bool] */)
  };
  %773() /* ty=(Tensor[(?, ?, 14), int8], Tensor[(16, 5, 8), float32], Tensor[(108), float64], Tensor[(450), float64], Tensor[(120), bool]) */
}

def @func_7830() -> (Tensor[(7, 5, 8), float32],) {
  %776 = fn () -> (Tensor[(7, 5, 8), float32],) {
    %774 = @func_7689() /* ty=(Tensor[(7, 5, 8), float32],) */;
    %775 = %774.0;
    (%775,)
  };
  %776() /* ty=(Tensor[(7, 5, 8), float32],) */
}

def @func_5796(%var_5794: Tensor[(11, 13, 14), float64]) -> (Tensor[(11, 13, 14), float32], Tensor[(234), float32], Tensor[(1344), uint8], Tensor[(234), float32]) {
  @func_5793(%var_5794) /* ty=(Tensor[(11, 13, 14), float32], Tensor[(234), float32], Tensor[(1344), uint8], Tensor[(234), float32]) */
}

def @func_7652() -> (Tensor[(10, 16, 15), float32], Tensor[(5, 10, 3), float32], Tensor[(150), float32]) {
  %783 = fn () -> (Tensor[(10, 16, 15), float32], Tensor[(5, 10, 3), float32], Tensor[(150), float32]) {
    %777 = @func_6290() /* ty=(Tensor[(10, 16, 15), float32],) */;
    %778 = cast(meta[relay.Constant][72] /* ty=Tensor[(150), float32] */, dtype="float32") /* ty=Tensor[(150), float32] */;
    %779 = reshape(%778, newshape=[5, 10, 3]) /* ty=Tensor[(5, 10, 3), float32] */;
    %780 = @func_281(%779) /* ty=(Tensor[(5, 10, 3), float32],) */;
    %781 = %777.0;
    %782 = %780.0;
    (%781, %782, meta[relay.Constant][72] /* ty=Tensor[(150), float32] */)
  };
  %783() /* ty=(Tensor[(10, 16, 15), float32], Tensor[(5, 10, 3), float32], Tensor[(150), float32]) */
}

def @func_6794() -> Tensor[(6, ?, 5), bool] {
  %784 = @func_6372() /* ty=(Tensor[(6, ?, 5), bool], Tensor[(300, 1), float32], Tensor[(432), float32]) */;
  %784.0
}

def @func_4551(%var_4547: Tensor[(5, 6, 15), float64], %var_4548: Tensor[(84), bool], %var_4549: Tensor[(480), float64], %var_4550: Tensor[(120), bool]) -> (Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) {
  @func_4545(%var_4547, %var_4548, %var_4549, %var_4550) /* ty=(Tensor[(512), bool], Tensor[(84), bool], Tensor[(672), bool], Tensor[(512), bool], Tensor[(7, 5, 16), uint64], Tensor[(560), uint64], Tensor[(3, 10, 16), float64], Tensor[(480), float64], Tensor[(120), bool], Tensor[(5, 6, 15), float32], Tensor[(5, 6, 15), float32]) */
}

def @func_5464() -> Tensor[(?, ?, 14), int64] {
  %785 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
  %786 = %785.0;
  %787 = @func_5321() /* ty=Tensor[(?, ?, 14), int8] */;
  %788 = cast(%787, dtype="int64") /* ty=Tensor[(?, ?, 14), int64] */;
  %789 = shape_of(%786, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%786, dtype="int64") /* ty=Tensor[(?, ?, 14), int64] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_xor(%790, %791) /* ty=Tensor[(?, ?, 14), int64] */
}

def @func_8160() -> (Tensor[(?, ?, 14), int8],) {
  %794 = fn () -> (Tensor[(?, ?, 14), int8],) {
    %792 = @func_5211() /* ty=(Tensor[(?, ?, 14), int8],) */;
    %793 = %792.0;
    (%793,)
  };
  %794() /* ty=(Tensor[(?, ?, 14), int8],) */
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen282/build/output.py", line 1793, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:03:25] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

