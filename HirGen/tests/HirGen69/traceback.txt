==========mod==========
#[version = "0.0.5"]
def @func_3485() -> (Tensor[(8, 15, 12), float64],) {
  %0 = @func_784() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %1 = %0.1;
  (%1,)
}

def @func_4399() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 12, 13), int32], Tensor[(1248), float64]) {
  %2 = cast(meta[relay.Constant][0] /* ty=Tensor[(1248), int32] */, dtype="int32") /* ty=Tensor[(1248), int32] */;
  %3 = reshape(%2, newshape=[8, 12, 13]) /* ty=Tensor[(8, 12, 13), int32] */;
  %4 = @func_3179(%3) /* ty=(Tensor[(8, 12, 13), int32],) */;
  %5 = cast(meta[relay.Constant][0] /* ty=Tensor[(1248), int32] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
  %6 = @func_3308() /* ty=Tensor[(8, 15, 12), float64] */;
  %7 = %4.0;
  %8 = sigmoid(%5) /* ty=Tensor[(1248), float64] */;
  (%6, %7, %8)
}

def @func_668() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %9 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %10 = %9.0;
  %11 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  (%10, %11)
}

def @func_1829() -> (Tensor[(8, 15, 12), float32],) {
  %12 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %13 = %12.0;
  %14 = cast(%13, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %15 = sigmoid(%14) /* ty=Tensor[(8, 15, 12), float32] */;
  (%15,)
}

def @func_311() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %16 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %17 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  (%16, %17)
}

def @func_4204() -> (Tensor[(8, 15, 12), int32], Tensor[(2, 12, 9), int16], Tensor[(36, 6), int16]) {
  %18 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %19 = %18.0;
  %20 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 15, 12), float64] */, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
  %21 = shape_of(%19, dtype="int32") /* ty=Tensor[(3), int32] */;
  %22 = cast(%19, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
  %23 = dyn.reshape(%20, %21, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %24 = cast(meta[relay.Constant][2] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
  %25 = cast(meta[relay.Constant][2] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
  %26 = reshape(%24, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
  %27 = reshape(%25, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
  %28 = @func_1896(%26, %27) /* ty=(Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) */;
  %29 = minimum(%22, %23) /* ty=Tensor[(8, 15, 12), int32] */;
  %30 = %28.0;
  (%29, %30, meta[relay.Constant][2] /* ty=Tensor[(36, 6), int16] */)
}

def @func_842() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %31 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %32 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %33 = %31.0;
  %34 = %32.0;
  (%33, %34)
}

def @func_784() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %35 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %36 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %37 = %35.1;
  %38 = %36.0;
  (%37, %38)
}

def @func_1684() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %39 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %40 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %41 = %39.0;
  %42 = %40.1;
  (%41, %42)
}

def @func_5738(%var_5703: Tensor[(1440), float64], %var_5717: Tensor[(8, 24), float32]) -> (Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), int64], Tensor[(1440), float64], Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 24), float32], Tensor[(8, 15, 12), float64]) {
  %43 = @func_4204() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(2, 12, 9), int16], Tensor[(36, 6), int16]) */;
  %44 = %43.1;
  %45 = cast(%44, dtype="float64") /* ty=Tensor[(2, 12, 9), float64] */;
  %46 = cast(%var_5703, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %47 = reshape(%46, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %48 = @func_1585(%47) /* ty=(Tensor[(8, 15, 12), int64],) */;
  %49 = cast(%44, dtype="float64") /* ty=Tensor[(2, 12, 9), float64] */;
  %50 = cast(%var_5717, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %51 = reshape(%50, newshape=[48, 4]) /* ty=Tensor[(48, 4), float32] */;
  %52 = @func_5348(%51) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) */;
  %53 = cosh(%45) /* ty=Tensor[(2, 12, 9), float64] */;
  %54 = %48.0;
  %55 = atanh(%49) /* ty=Tensor[(2, 12, 9), float64] */;
  %56 = %52.1;
  %57 = @func_4512() /* ty=Tensor[(8, 15, 12), float64] */;
  (%53, %54, %var_5703, %55, %56, %var_5717, %57)
}

def @func_6080() -> (Tensor[(8, 15, 12), float64],) {
  %58 = @func_5357() /* ty=Tensor[(8, 15, 12), float64] */;
  (%58,)
}

def @func_6134(%var_6126: Tensor[(9, 1, 1), float64]) -> Tensor[(9, 1, 1), float64] {
  %59 = cast(%var_6126, dtype="float64") /* ty=Tensor[(9, 1, 1), float64] */;
  sigmoid(%59) /* ty=Tensor[(9, 1, 1), float64] */
}

def @func_5601() -> (Tensor[(8, 15, 12), float64],) {
  %60 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %61 = %60.1;
  (%61,)
}

def @func_6227() -> (Tensor[(8, 15, 12), float64],) {
  %62 = @func_4208() /* ty=Tensor[(8, 15, 12), float64] */;
  (%62,)
}

def @func_1143(%var_1124: Tensor[(8, 15, 12), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %63 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %64 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
  %65 = %64.0;
  %66 = cast(%var_1124, dtype="uint64") /* ty=Tensor[(8, 15, 12), uint64] */;
  %67 = shape_of(%65, dtype="int32") /* ty=Tensor[(3), int32] */;
  %68 = cast(%65, dtype="uint64") /* ty=Tensor[(8, 15, 12), uint64] */;
  %69 = dyn.reshape(%66, %67, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %70 = @func_978() /* ty=(Tensor[(8, 15, 12), bool],) */;
  %71 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %72 = %63.0;
  %73 = bitwise_or(%68, %69) /* ty=Tensor[(8, 15, 12), uint64] */;
  %74 = %70.0;
  %75 = %71.0;
  (%72, %73, %74, %75)
}

def @func_5192() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %76 = @func_2238() /* ty=Tensor[(8, 15, 12), bool] */;
  %77 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  (%76, %77)
}

def @func_2278(%var_2258: Tensor[(1, 16, 15), int8], %var_2259: Tensor[(6, 16, 15), int8]) -> Tensor[(6, 16, 15), bool] {
  %78 = cast(%var_2258, dtype="bool") /* ty=Tensor[(1, 16, 15), bool] */;
  %79 = cast(%var_2259, dtype="bool") /* ty=Tensor[(6, 16, 15), bool] */;
  greater_equal(%78, %79) /* ty=Tensor[(6, 16, 15), bool] */
}

def @func_3406(%var_3389: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), uint16], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %80 = @func_2401() /* ty=Tensor[(8, 15, 12), float64] */;
  %81 = cast(%var_3389, dtype="uint16") /* ty=Tensor[(8, 15, 12), uint16] */;
  %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(3), int32] */;
  %83 = cast(%80, dtype="uint16") /* ty=Tensor[(8, 15, 12), uint16] */;
  %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %85 = @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */;
  %86 = cast(%var_3389, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %87 = reshape(%86, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float32] */;
  %88 = @func_2972() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %89 = multiply(%83, %84) /* ty=Tensor[(8, 15, 12), uint16] */;
  %90 = %85.0;
  %91 = @func_3031(%87) /* ty=Tensor[(8, 15, 12), bool] */;
  %92 = %88.0;
  (%89, %90, %91, %92)
}

def @func_3844(%var_3768: Tensor[(25, 1), uint8], %var_3769: Tensor[(275), uint8], %var_3812: Tensor[(25, 10), float32], %var_3816: Tensor[(25, 10), bool]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(5, 5, 11), uint8], Tensor[(25, 275), int16], Tensor[(25, 10), float32], Tensor[(25, 10), uint64]) {
  %93 = @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %94 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %95 = cast(%var_3768, dtype="uint8") /* ty=Tensor[(25, 1), uint8] */;
  %96 = cast(%var_3769, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %97 = reshape(%95, newshape=[5, 5, 1]) /* ty=Tensor[(5, 5, 1), uint8] */;
  %98 = reshape(%96, newshape=[5, 5, 11]) /* ty=Tensor[(5, 5, 11), uint8] */;
  %99 = @func_2177(%97, %98) /* ty=(Tensor[(5, 5, 11), uint8],) */;
  %100 = cast(%var_3769, dtype="float32") /* ty=Tensor[(275), float32] */;
  %101 = cast(%var_3768, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %102 = mod(%100, %101) /* ty=Tensor[(25, 275), float32] */;
  %103 = cast(%102, dtype="int16") /* ty=Tensor[(25, 275), int16] */;
  %104 = cast(%var_3768, dtype="int16") /* ty=Tensor[(25, 1), int16] */;
  %105 = cast(%var_3768, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %106 = atan(%105) /* ty=Tensor[(25, 1), float32] */;
  %107 = cast(%106, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %108 = asin(%107) /* ty=Tensor[(25, 1), float32] */;
  %109 = cast(%108, dtype="bool") /* ty=Tensor[(25, 1), bool] */;
  %110 = cast(%var_3812, dtype="bool") /* ty=Tensor[(25, 10), bool] */;
  %111 = greater(%109, %110) /* ty=Tensor[(25, 10), bool] */;
  %112 = cast(%111, dtype="float32") /* ty=Tensor[(25, 10), float32] */;
  %113 = cast(%106, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %114 = cast(%var_3816, dtype="bool") /* ty=Tensor[(25, 10), bool] */;
  %115 = shape_of(%111, dtype="int32") /* ty=Tensor[(2), int32] */;
  %116 = cast(%111, dtype="bool") /* ty=Tensor[(25, 10), bool] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %118 = less_equal(%116, %117) /* ty=Tensor[(25, 10), bool] */;
  %119 = cast(%106, dtype="uint64") /* ty=Tensor[(25, 1), uint64] */;
  %120 = cast(%118, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %121 = %93.0;
  %122 = %94.1;
  %123 = %99.0;
  %124 = logical_xor(%103, %104) /* ty=Tensor[(25, 275), int16] */;
  %125 = mod(%112, %113) /* ty=Tensor[(25, 10), float32] */;
  %126 = bitwise_or(%119, %120) /* ty=Tensor[(25, 10), uint64] */;
  (%121, %122, %123, %124, %125, %126)
}

def @func_1526() -> Tensor[(8, 15, 12), float64] {
  @func_643() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3657() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %127 = @func_2527() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %128 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %129 = @func_3485() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %130 = @func_1526() /* ty=Tensor[(8, 15, 12), float64] */;
  %131 = %127.1;
  %132 = %128.0;
  %133 = %129.0;
  (%130, %131, %132, %133)
}

def @func_643() -> Tensor[(8, 15, 12), float64] {
  %134 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %134.0
}

def @func_2238() -> Tensor[(8, 15, 12), bool] {
  %135 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %135.1
}

def @func_2680() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %136 = @func_978() /* ty=(Tensor[(8, 15, 12), bool],) */;
  %137 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %138 = %136.0;
  %139 = %137.0;
  (%138, %139)
}

def @func_4732() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %140 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %141 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  %142 = cast(%141, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %143 = reshape(%142, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float32] */;
  %144 = %140.0;
  %145 = @func_3031(%143) /* ty=Tensor[(8, 15, 12), bool] */;
  %146 = @func_2560() /* ty=Tensor[(8, 15, 12), float64] */;
  (%141, %144, %145, %146)
}

def @func_5303() -> (Tensor[(8, 15, 12), float64],) {
  %147 = @func_2560() /* ty=Tensor[(8, 15, 12), float64] */;
  (%147,)
}

def @func_5986() -> (Tensor[(8, 15, 12), float64], Tensor[(605), uint8], Tensor[(8, 15, 12), float64]) {
  %148 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %149 = cast(meta[relay.Constant][3] /* ty=Tensor[(605), int8] */, dtype="int8") /* ty=Tensor[(605), int8] */;
  %150 = reshape(%149, newshape=[11, 5, 11]) /* ty=Tensor[(11, 5, 11), int8] */;
  %151 = @func_5873(%150) /* ty=Tensor[(11, 5, 11), int8] */;
  %152 = cast(%151, dtype="bool") /* ty=Tensor[(11, 5, 11), bool] */;
  %153 = shape_of(meta[relay.Constant][3] /* ty=Tensor[(605), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %154 = cast(meta[relay.Constant][3] /* ty=Tensor[(605), int8] */, dtype="bool") /* ty=Tensor[(605), bool] */;
  %155 = dyn.reshape(%152, %153, newshape=[]) /* ty=Tensor[(?), bool] */;
  %156 = not_equal(%154, %155) /* ty=Tensor[(605), bool] */;
  %157 = cast(meta[relay.Constant][3] /* ty=Tensor[(605), int8] */, dtype="uint8") /* ty=Tensor[(605), uint8] */;
  %158 = shape_of(%156, dtype="int32") /* ty=Tensor[(1), int32] */;
  %159 = cast(%156, dtype="uint8") /* ty=Tensor[(605), uint8] */;
  %160 = dyn.reshape(%157, %158, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %161 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %162 = %148.1;
  %163 = logical_xor(%159, %160) /* ty=Tensor[(605), uint8] */;
  %164 = %161.1;
  (%162, %163, %164)
}

def @func_6383(%var_6335: Tensor[(1, 4, 12), float32], %var_6374: Tensor[(3, 4, 12), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(?, 4, 12), bool], Tensor[(3, 4, 12), uint64]) {
  %165 = @func_2348() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %166 = cast(%var_6335, dtype="float32") /* ty=Tensor[(1, 4, 12), float32] */;
  %167 = log10(%166) /* ty=Tensor[(1, 4, 12), float32] */;
  %168 = cast(%167, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %169 = shape_of(%var_6335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %170 = cast(%var_6335, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %171 = dyn.reshape(%168, %169, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %172 = cast(%167, dtype="uint64") /* ty=Tensor[(1, 4, 12), uint64] */;
  %173 = cast(%var_6374, dtype="uint64") /* ty=Tensor[(3, 4, 12), uint64] */;
  %174 = %165.0;
  %175 = equal(%170, %171) /* ty=Tensor[(?, 4, 12), bool] */;
  %176 = left_shift(%172, %173) /* ty=Tensor[(3, 4, 12), uint64] */;
  (%174, %175, %176)
}

def @func_3873(%var_3864: Tensor[(5, 14, 1), int16]) -> (Tensor[(5, 14, 1), int16], Tensor[(8, 15, 12), float64]) {
  %177 = cast(meta[relay.Constant][4] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %178 = cast(%var_3864, dtype="int16") /* ty=Tensor[(5, 14, 1), int16] */;
  %179 = @func_2745() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %180 = logical_xor(%177, %178) /* ty=Tensor[(5, 14, 1), int16] */;
  %181 = %179.0;
  (%180, %181)
}

def @func_4282() -> (Tensor[(8, 15, 12), float64], Tensor[(6, 16, 15), bool], Tensor[(240), int8]) {
  %182 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %183 = cast(meta[relay.Constant][5] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %184 = %182.1;
  %185 = cast(%184, dtype="int8") /* ty=Tensor[(8, 15, 12), int8] */;
  %186 = reshape(%183, newshape=[1, 16, 15]) /* ty=Tensor[(1, 16, 15), int8] */;
  %187 = reshape(%185, newshape=[6, 16, 15]) /* ty=Tensor[(6, 16, 15), int8] */;
  %188 = @func_2278(%186, %187) /* ty=Tensor[(6, 16, 15), bool] */;
  (%184, %188, meta[relay.Constant][5] /* ty=Tensor[(240), int8] */)
}

def @func_3953(%var_3920: Tensor[(2, 16, 1), float32]) -> (Tensor[(2, 16, ?), float64], Tensor[(8, 15, 12), float64]) {
  %189 = cast(%var_3920, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %190 = sqrt(%189) /* ty=Tensor[(2, 16, 1), float32] */;
  %191 = cast(%var_3920, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %192 = shape_of(%190, dtype="int32") /* ty=Tensor[(3), int32] */;
  %193 = cast(%190, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %194 = dyn.reshape(%191, %192, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %195 = add(%193, %194) /* ty=Tensor[(2, 16, ?), float32] */;
  %196 = cast(%195, dtype="float32") /* ty=Tensor[(2, 16, ?), float32] */;
  %197 = rsqrt(%196) /* ty=Tensor[(2, 16, ?), float32] */;
  %198 = cast(%197, dtype="float64") /* ty=Tensor[(2, 16, ?), float64] */;
  %199 = erf(%198) /* ty=Tensor[(2, 16, ?), float64] */;
  %200 = cast(%199, dtype="float64") /* ty=Tensor[(2, 16, ?), float64] */;
  %201 = cosh(%200) /* ty=Tensor[(2, 16, ?), float64] */;
  %202 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  (%201, %202)
}

def @func_248() -> Tensor[(8, 15, 12), float64] {
  @func_11() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4984() -> (Tensor[(8, 15, 12), float64],) {
  %203 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %204 = %203.1;
  (%204,)
}

def @func_3308() -> Tensor[(8, 15, 12), float64] {
  %205 = @func_2815() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %205.0
}

def @func_5583(%var_5569: Tensor[(11, 15, 13), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(11, 15, 13), int64]) {
  %206 = cast(%var_5569, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %207 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(11, 15, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %208 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 15, 13), bool] */, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %209 = dyn.reshape(%206, %207, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %210 = cast(%var_5569, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
  %211 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(11, 15, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %212 = cast(meta[relay.Constant][6] /* ty=Tensor[(11, 15, 13), bool] */, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
  %213 = dyn.reshape(%210, %211, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %214 = logical_or(%208, %209) /* ty=Tensor[(11, 15, 13), bool] */;
  %215 = right_shift(%212, %213) /* ty=Tensor[(11, 15, 13), int64] */;
  (%214, %215)
}

def @func_2221() -> (Tensor[(8, 15, 12), float64],) {
  %216 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %217 = %216.0;
  (%217,)
}

def @func_17() -> Tensor[(8, 15, 12), float64] {
  @func_11() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_1075(%var_1066: Tensor[(8, 15, 12), float64]) -> Tensor[(8, 15, 12), float32] {
  %218 = @func_814() /* ty=Tensor[(8, 15, 12), float64] */;
  %219 = cast(%var_1066, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %220 = shape_of(%218, dtype="int32") /* ty=Tensor[(3), int32] */;
  %221 = cast(%218, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %222 = dyn.reshape(%219, %220, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%221, %222) /* ty=Tensor[(8, 15, 12), float32] */
}

def @func_4043(%var_4025: Tensor[(36), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(216), int16], Tensor[(11, 5, 10), float64], Tensor[(36), float32], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) {
  %223 = @func_2221() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %224 = @func_2203() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) */;
  %225 = cast(%var_4025, dtype="float32") /* ty=Tensor[(36), float32] */;
  %226 = reshape(%225, newshape=[36]) /* ty=Tensor[(36), float32] */;
  %227 = @func_2330(%226) /* ty=(Tensor[(11, 5, 10), float64], Tensor[(3, 12), float32], Tensor[(36), float32]) */;
  %228 = @func_3157() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */;
  %229 = %223.0;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %231 = reshape(%230, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %232 = @func_1324(%231) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %233 = %224.2;
  %234 = %227.0;
  %235 = %228.2;
  %236 = %232.1;
  (%229, %233, %234, %var_4025, %235, %236)
}

def @func_2040() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) {
  %237 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %238 = cast(meta[relay.Constant][7] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
  %239 = reshape(%238, newshape=[2, 13, 16]) /* ty=Tensor[(2, 13, 16), float64] */;
  %240 = @func_1445(%239) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(2, 13, 16), float32], Tensor[(2, 13, 16), int16]) */;
  %241 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
  %242 = %241.2;
  %243 = cast(%242, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %244 = %237.0;
  %245 = %240.0;
  %246 = atan(%243) /* ty=Tensor[(8, 15, 12), float32] */;
  (%244, %245, meta[relay.Constant][7] /* ty=Tensor[(416), float64] */, %246)
}

def @func_4631(%var_4592: Tensor[(4, 14, 5), uint8], %var_4593: Tensor[(4, 14, 5), uint8]) -> (Tensor[(4, 14, 5), uint8], Tensor[(4, 14, 5), int64], Tensor[(4, 14, 5), float64]) {
  %247 = cast(%var_4593, dtype="uint8") /* ty=Tensor[(4, 14, 5), uint8] */;
  %248 = shape_of(%var_4592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %249 = cast(%var_4592, dtype="uint8") /* ty=Tensor[(4, 14, 5), uint8] */;
  %250 = dyn.reshape(%247, %248, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %251 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
  %252 = shape_of(%var_4593, dtype="int32") /* ty=Tensor[(3), int32] */;
  %253 = cast(%var_4593, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %255 = greater_equal(%253, %254) /* ty=Tensor[(4, 14, 5), bool] */;
  %256 = cast(%255, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
  %257 = shape_of(%var_4592, dtype="int32") /* ty=Tensor[(3), int32] */;
  %258 = cast(%var_4592, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
  %259 = dyn.reshape(%256, %257, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %260 = cast(meta[relay.Constant][9] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %261 = shape_of(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %262 = cast(meta[relay.Constant][8] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
  %263 = dyn.reshape(%260, %261, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %264 = subtract(%249, %250) /* ty=Tensor[(4, 14, 5), uint8] */;
  %265 = bitwise_xor(%258, %259) /* ty=Tensor[(4, 14, 5), int64] */;
  %266 = floor_mod(%262, %263) /* ty=Tensor[(4, 14, 5), float64] */;
  (%264, %265, %266)
}

def @func_683() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %267 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %268 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %269 = %267.0;
  (%268, %269)
}

def @func_5629(%var_5609: Tensor[(12, 5, 15), float64], %var_5625: Tensor[(12, 5, 15), float64]) -> (Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), uint32]) {
  %270 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %271 = shape_of(%var_5609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %272 = cast(%var_5609, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %273 = dyn.reshape(%270, %271, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %274 = cast(%var_5625, dtype="uint32") /* ty=Tensor[(12, 5, 15), uint32] */;
  %275 = shape_of(meta[relay.Constant][10] /* ty=Tensor[(12, 5, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %276 = cast(meta[relay.Constant][10] /* ty=Tensor[(12, 5, 15), float64] */, dtype="uint32") /* ty=Tensor[(12, 5, 15), uint32] */;
  %277 = dyn.reshape(%274, %275, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %278 = floor_mod(%272, %273) /* ty=Tensor[(12, 5, 15), float64] */;
  %279 = left_shift(%276, %277) /* ty=Tensor[(12, 5, 15), uint32] */;
  (%278, %279)
}

def @func_1234() -> Tensor[(8, 15, 12), float64] {
  @func_248() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3281() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %280 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %281 = @func_2953() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %282 = %281.1;
  %283 = cast(%282, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %284 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %285 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %286 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %287 = %280.1;
  %288 = sqrt(%283) /* ty=Tensor[(8, 15, 12), float32] */;
  %289 = %284.1;
  %290 = %285.1;
  %291 = %286.2;
  (%287, %288, %289, %290, %291)
}

def @func_5076() -> Tensor[(8, 15, 12), float64] {
  @func_3308() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4418() -> (Tensor[(8, 15, 12), float64],) {
  %292 = @func_1684() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %293 = %292.1;
  (%293,)
}

def @func_2901() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) {
  %294 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %295 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
  %296 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
  %297 = %294.2;
  %298 = %295.2;
  %299 = %296.1;
  (%297, %298, %299)
}

def @func_435() -> Tensor[(8, 15, 12), bool] {
  %300 = @func_248() /* ty=Tensor[(8, 15, 12), float64] */;
  %301 = cast(meta[relay.Constant][11] /* ty=Tensor[(8, 15, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %302 = shape_of(%300, dtype="int32") /* ty=Tensor[(3), int32] */;
  %303 = cast(%300, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %304 = dyn.reshape(%301, %302, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater(%303, %304) /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_5481(%var_5460: Tensor[(8, 12, 13), int32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(192), float32], Tensor[(8, 15, 12), float32], Tensor[(8, 12, 13), int8], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) {
  %305 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %306 = cast(meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %307 = reshape(%306, newshape=[48, 4]) /* ty=Tensor[(48, 4), float32] */;
  %308 = @func_5348(%307) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) */;
  %309 = @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */;
  %310 = @func_4399() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 12, 13), int32], Tensor[(1248), float64]) */;
  %311 = %310.1;
  %312 = cast(%var_5460, dtype="int8") /* ty=Tensor[(8, 12, 13), int8] */;
  %313 = shape_of(%311, dtype="int32") /* ty=Tensor[(3), int32] */;
  %314 = cast(%311, dtype="int8") /* ty=Tensor[(8, 12, 13), int8] */;
  %315 = dyn.reshape(%312, %313, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %316 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %317 = %316.0;
  %318 = cast(%317, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %319 = reshape(%318, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float32] */;
  %320 = %305.0;
  %321 = %308.0;
  %322 = %309.0;
  %323 = logical_xor(%314, %315) /* ty=Tensor[(8, 12, 13), int8] */;
  %324 = @func_3031(%319) /* ty=Tensor[(8, 15, 12), bool] */;
  (%320, %321, meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, %322, %323, %317, %324)
}

def @func_5873(%var_5857: Tensor[(11, 5, 11), int8]) -> Tensor[(11, 5, 11), int8] {
  %325 = cast(meta[relay.Constant][13] /* ty=Tensor[(1, 5, 11), int8] */, dtype="int8") /* ty=Tensor[(1, 5, 11), int8] */;
  %326 = cast(%var_5857, dtype="int8") /* ty=Tensor[(11, 5, 11), int8] */;
  minimum(%325, %326) /* ty=Tensor[(11, 5, 11), int8] */
}

def @func_6310(%var_6302: Tensor[(9), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(9, 1, 1), float64], Tensor[(9), float64]) {
  %327 = @func_5601() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %328 = @func_2527() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %329 = cast(%var_6302, dtype="float64") /* ty=Tensor[(9), float64] */;
  %330 = reshape(%329, newshape=[9, 1, 1]) /* ty=Tensor[(9, 1, 1), float64] */;
  %331 = %327.0;
  %332 = %328.1;
  %333 = @func_6134(%330) /* ty=Tensor[(9, 1, 1), float64] */;
  (%331, %332, %333, %var_6302)
}

def @func_2527() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %334 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %335 = %334.1;
  %336 = @func_248() /* ty=Tensor[(8, 15, 12), float64] */;
  (%335, %336)
}

def @func_5082() -> Tensor[(8, 15, 12), float64] {
  @func_3308() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4492() -> Tensor[(8, 15, 12), float64] {
  %337 = @func_2221() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %337.0
}

def @func_2953() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %338 = @func_2680() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %339 = @func_2040() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) */;
  %340 = %338.0;
  %341 = %339.0;
  (%340, %341)
}

def @func_6073(%var_6019: Tensor[(12, 11, 15), float64], %var_6067: Tensor[(12, 11, 15), float32]) -> (Tensor[(10, 12, 9), bool], Tensor[(1080), uint64], Tensor[(12, 11, 15), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint8], Tensor[(12, 11, 15), bool]) {
  %342 = cast(meta[relay.Constant][14] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %343 = reshape(%342, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), uint64] */;
  %344 = cast(%var_6019, dtype="float64") /* ty=Tensor[(12, 11, 15), float64] */;
  %345 = sin(%344) /* ty=Tensor[(12, 11, 15), float64] */;
  %346 = cast(%345, dtype="float32") /* ty=Tensor[(12, 11, 15), float32] */;
  %347 = @func_5192() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %348 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  %349 = cast(%348, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %350 = reshape(%349, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %351 = @func_532(%350) /* ty=(Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) */;
  %352 = cast(%345, dtype="float32") /* ty=Tensor[(12, 11, 15), float32] */;
  %353 = sigmoid(%352) /* ty=Tensor[(12, 11, 15), float32] */;
  %354 = cast(%345, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
  %356 = cast(%353, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %358 = greater(%356, %357) /* ty=Tensor[(12, 11, 15), bool] */;
  %359 = cast(%358, dtype="float32") /* ty=Tensor[(12, 11, 15), float32] */;
  %360 = sinh(%359) /* ty=Tensor[(12, 11, 15), float32] */;
  %361 = cast(%var_6067, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %362 = shape_of(%360, dtype="int32") /* ty=Tensor[(3), int32] */;
  %363 = cast(%360, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
  %364 = dyn.reshape(%361, %362, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %365 = @func_2245(%343) /* ty=Tensor[(10, 12, 9), bool] */;
  %366 = atan(%346) /* ty=Tensor[(12, 11, 15), float32] */;
  %367 = %347.0;
  %368 = @func_4512() /* ty=Tensor[(8, 15, 12), float64] */;
  %369 = %351.0;
  %370 = logical_and(%363, %364) /* ty=Tensor[(12, 11, 15), bool] */;
  (%365, meta[relay.Constant][14] /* ty=Tensor[(1080), uint64] */, %366, %367, %368, %348, %369, %370)
}

def @func_3338() -> (Tensor[(8, 15, 12), float64],) {
  %371 = @func_1526() /* ty=Tensor[(8, 15, 12), float64] */;
  (%371,)
}

def @func_1896(%var_1852: Tensor[(2, 12, 9), int16], %var_1853: Tensor[(2, 12, 9), int16]) -> (Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) {
  %372 = cast(%var_1853, dtype="int16") /* ty=Tensor[(2, 12, 9), int16] */;
  %373 = shape_of(%var_1852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %374 = cast(%var_1852, dtype="int16") /* ty=Tensor[(2, 12, 9), int16] */;
  %375 = dyn.reshape(%372, %373, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %376 = cast(%var_1852, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
  %377 = tan(%376) /* ty=Tensor[(2, 12, 9), float32] */;
  %378 = cast(%377, dtype="float64") /* ty=Tensor[(2, 12, 9), float64] */;
  %379 = multiply(%374, %375) /* ty=Tensor[(2, 12, 9), int16] */;
  %380 = acosh(%378) /* ty=Tensor[(2, 12, 9), float64] */;
  (%379, %380)
}

def @func_2841(%var_2836: Tensor[(6, 6, 15), float32], %var_2837: Tensor[(6, 6, 15), float32]) -> Tensor[(6, 6, 15), float32] {
  %381 = cast(%var_2837, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %382 = shape_of(%var_2836, dtype="int32") /* ty=Tensor[(3), int32] */;
  %383 = cast(%var_2836, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
  %384 = dyn.reshape(%381, %382, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%383, %384) /* ty=Tensor[(6, 6, 15), float32] */
}

def @func_6178() -> (Tensor[(2, 12, 9), int16],) {
  %385 = @func_2203() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) */;
  %386 = %385.1;
  (%386,)
}

def @func_4512() -> Tensor[(8, 15, 12), float64] {
  %387 = @func_1730() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %387.0
}

def @func_3978() -> (Tensor[(8, 15, 12), float64],) {
  %388 = @func_3518() /* ty=(Tensor[(15, 7, 16), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %389 = %388.2;
  (%389,)
}

def @func_73() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %390 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %391 = @func_11() /* ty=Tensor[(8, 15, 12), float64] */;
  %392 = @func_11() /* ty=Tensor[(8, 15, 12), float64] */;
  (%390, %391, %392)
}

def @func_141() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %393 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %394 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %395 = %393.0;
  (%394, %395)
}

def @func_1477(%var_1453: Tensor[(15, 6, 3), uint16]) -> (Tensor[(15, 6, 3), uint16], Tensor[(15, 6, 3), float64], Tensor[(8, 15, 12), float64]) {
  %396 = cast(meta[relay.Constant][15] /* ty=Tensor[(15, 1, 3), uint16] */, dtype="uint16") /* ty=Tensor[(15, 1, 3), uint16] */;
  %397 = cast(%var_1453, dtype="uint16") /* ty=Tensor[(15, 6, 3), uint16] */;
  %398 = cast(%var_1453, dtype="float64") /* ty=Tensor[(15, 6, 3), float64] */;
  %399 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %400 = bitwise_xor(%396, %397) /* ty=Tensor[(15, 6, 3), uint16] */;
  %401 = atan(%398) /* ty=Tensor[(15, 6, 3), float64] */;
  %402 = %399.1;
  (%400, %401, %402)
}

def @func_5276() -> (Tensor[(8, 15, 12), float64], Tensor[(10, 12, 9), bool], Tensor[(1080), uint64]) {
  %403 = cast(meta[relay.Constant][16] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %404 = reshape(%403, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), uint64] */;
  %405 = @func_4328() /* ty=Tensor[(8, 15, 12), float64] */;
  %406 = @func_2245(%404) /* ty=Tensor[(10, 12, 9), bool] */;
  (%405, %406, meta[relay.Constant][16] /* ty=Tensor[(1080), uint64] */)
}

def @func_3692(%var_3666: Tensor[(15, 9, 9), uint16]) -> (Tensor[(15, 9, 9), bool], Tensor[(15, 9, 9), float32]) {
  %407 = cast(meta[relay.Constant][17] /* ty=Tensor[(15, 1, 9), uint16] */, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %408 = cast(%var_3666, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %409 = cast(%var_3666, dtype="float32") /* ty=Tensor[(15, 9, 9), float32] */;
  %410 = less(%407, %408) /* ty=Tensor[(15, 9, 9), bool] */;
  %411 = log10(%409) /* ty=Tensor[(15, 9, 9), float32] */;
  (%410, %411)
}

def @func_2348() -> (Tensor[(8, 15, 12), float64],) {
  %412 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %413 = %412.0;
  (%413,)
}

def @func_4328() -> Tensor[(8, 15, 12), float64] {
  %414 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %414.1
}

def @func_4208() -> Tensor[(8, 15, 12), float64] {
  %415 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %415.1
}

def @func_2715() -> (Tensor[(8, 15, 12), float64],) {
  %416 = @func_1730() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %417 = %416.0;
  (%417,)
}

def @func_2401() -> Tensor[(8, 15, 12), float64] {
  @func_1234() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3568(%var_3534: uint32, %var_3535: Tensor[(10, 5, 1), uint32]) -> (Tensor[(10, 5, ?), bool], Tensor[(8, 15, 12), uint8], Tensor[(1440), float64]) {
  %418 = cast(%var_3534, dtype="uint32") /* ty=uint32 */;
  %419 = cast(%var_3535, dtype="uint32") /* ty=Tensor[(10, 5, 1), uint32] */;
  %420 = bitwise_xor(%418, %419) /* ty=Tensor[(10, 5, 1), uint32] */;
  %421 = cast(%420, dtype="float32") /* ty=Tensor[(10, 5, 1), float32] */;
  %422 = acos(%421) /* ty=Tensor[(10, 5, 1), float32] */;
  %423 = cast(%var_3535, dtype="bool") /* ty=Tensor[(10, 5, 1), bool] */;
  %424 = shape_of(%422, dtype="int32") /* ty=Tensor[(3), int32] */;
  %425 = cast(%422, dtype="bool") /* ty=Tensor[(10, 5, 1), bool] */;
  %426 = dyn.reshape(%423, %424, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %427 = cast(meta[relay.Constant][18] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %428 = reshape(%427, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %429 = @func_532(%428) /* ty=(Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) */;
  %430 = equal(%425, %426) /* ty=Tensor[(10, 5, ?), bool] */;
  %431 = %429.0;
  (%430, %431, meta[relay.Constant][18] /* ty=Tensor[(1440), float64] */)
}

def @func_5433() -> Tensor[(8, 15, 12), float64] {
  %432 = @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %432.0
}

def @func_5524() -> Tensor[(8, 15, 12), float64] {
  %433 = @func_2972() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %433.0
}

def @func_941() -> (Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) {
  %434 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %435 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %436 = @func_11() /* ty=Tensor[(8, 15, 12), float64] */;
  %437 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %438 = %437.1;
  %439 = cast(%438, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %440 = exp(%439) /* ty=Tensor[(8, 15, 12), float64] */;
  %441 = cast(%440, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %442 = asinh(%441) /* ty=Tensor[(8, 15, 12), float64] */;
  %443 = cast(%440, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
  %444 = shape_of(%442, dtype="int32") /* ty=Tensor[(3), int32] */;
  %445 = cast(%442, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
  %446 = dyn.reshape(%443, %444, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %447 = bitwise_xor(%445, %446) /* ty=Tensor[(8, 15, 12), uint8] */;
  %448 = cast(%447, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %449 = shape_of(%436, dtype="int32") /* ty=Tensor[(3), int32] */;
  %450 = cast(%436, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %451 = dyn.reshape(%448, %449, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %452 = %434.2;
  %453 = %435.0;
  %454 = floor_divide(%450, %451) /* ty=Tensor[(8, 15, 12), float32] */;
  %455 = @func_248() /* ty=Tensor[(8, 15, 12), float64] */;
  (%452, %453, %454, %455)
}

def @func_3418() -> Tensor[(8, 15, 12), float64] {
  %456 = @func_2953() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %456.1
}

def @func_3363() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %457 = @func_2401() /* ty=Tensor[(8, 15, 12), float64] */;
  %458 = @func_2560() /* ty=Tensor[(8, 15, 12), float64] */;
  (%457, %458)
}

def @func_814() -> Tensor[(8, 15, 12), float64] {
  %459 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %459.1
}

def @func_1730() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %460 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %461 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %462 = %461.0;
  %463 = cast(%462, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %464 = %460.0;
  %465 = sin(%463) /* ty=Tensor[(8, 15, 12), float64] */;
  (%464, %465)
}

def @func_2972() -> (Tensor[(8, 15, 12), float64],) {
  %466 = @func_814() /* ty=Tensor[(8, 15, 12), float64] */;
  (%466,)
}

def @func_5348(%var_5341: Tensor[(48, 4), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) {
  %467 = @func_2348() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %468 = @func_2040() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) */;
  %469 = cast(%var_5341, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
  %470 = reshape(%469, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float32] */;
  %471 = @func_4850(%470) /* ty=(Tensor[(1, 16, 12), float32],) */;
  %472 = %471.0;
  %473 = cast(%472, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
  %474 = %467.0;
  %475 = %468.0;
  %476 = atan(%473) /* ty=Tensor[(1, 16, 12), float32] */;
  (%474, %475, %var_5341, %476)
}

def @func_3157() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) {
  %477 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %478 = @func_2924() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %479 = %477.0;
  %480 = cast(%479, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %481 = reshape(%480, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %482 = @func_1585(%481) /* ty=(Tensor[(8, 15, 12), int64],) */;
  %483 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %484 = %478.1;
  %485 = %482.0;
  %486 = %483.2;
  (%479, %484, %485, %486)
}

def @main() -> (Tensor[(8, 15, 12), float64], Tensor[(240, 1), uint16], Tensor[(8, 15, 12), float64], Tensor[(10, 3, 8), float64]) {
  %487 = @func_2953() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %488 = cast(meta[relay.Constant][19] /* ty=Tensor[(240, 1), uint16] */, dtype="uint16") /* ty=Tensor[(240, 1), uint16] */;
  %489 = cast(meta[relay.Constant][19] /* ty=Tensor[(240, 1), uint16] */, dtype="uint16") /* ty=Tensor[(240, 1), uint16] */;
  %490 = reshape(%488, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), uint16] */;
  %491 = reshape(%489, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), uint16] */;
  %492 = @func_3059(%490, %491) /* ty=(Tensor[(10, 3, 8), uint16],) */;
  %493 = %492.0;
  %494 = cast(%493, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %495 = %487.1;
  %496 = @func_1526() /* ty=Tensor[(8, 15, 12), float64] */;
  %497 = atanh(%494) /* ty=Tensor[(10, 3, 8), float64] */;
  (%495, meta[relay.Constant][19] /* ty=Tensor[(240, 1), uint16] */, %496, %497)
}

def @func_2245(%var_2240: Tensor[(10, 12, 9), uint64]) -> Tensor[(10, 12, 9), bool] {
  %498 = cast(meta[relay.Constant][20] /* ty=Tensor[(10, 12, 9), uint64] */, dtype="bool") /* ty=Tensor[(10, 12, 9), bool] */;
  %499 = shape_of(%var_2240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %500 = cast(%var_2240, dtype="bool") /* ty=Tensor[(10, 12, 9), bool] */;
  %501 = dyn.reshape(%498, %499, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%500, %501) /* ty=Tensor[(10, 12, 9), bool] */
}

def @func_2745() -> (Tensor[(8, 15, 12), float64],) {
  %502 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %503 = %502.0;
  (%503,)
}

def @func_4760() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %504 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %505 = @func_4492() /* ty=Tensor[(8, 15, 12), float64] */;
  %506 = %504.0;
  (%505, %506)
}

def @func_4825() -> (Tensor[(8, 15, 12), float64],) {
  %507 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %508 = %507.2;
  (%508,)
}

def @func_11() -> Tensor[(8, 15, 12), float64] {
  %509 = cast(meta[relay.Constant][21] /* ty=Tensor[(8, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  rsqrt(%509) /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4810() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %510 = @func_3157() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */;
  %511 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %512 = %510.0;
  %513 = %511.0;
  (%512, %513)
}

def @func_1756(%var_1753: Tensor[(3, 12), float32]) -> (Tensor[(3, 12), float32],) {
  %514 = cast(%var_1753, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
  %515 = sinh(%514) /* ty=Tensor[(3, 12), float32] */;
  (%515,)
}

def @func_2177(%var_2149: Tensor[(5, 5, 1), uint8], %var_2150: Tensor[(5, 5, 11), uint8]) -> (Tensor[(5, 5, 11), uint8],) {
  %516 = cast(%var_2149, dtype="uint8") /* ty=Tensor[(5, 5, 1), uint8] */;
  %517 = cast(%var_2150, dtype="uint8") /* ty=Tensor[(5, 5, 11), uint8] */;
  %518 = minimum(%516, %517) /* ty=Tensor[(5, 5, 11), uint8] */;
  %519 = cast(%var_2149, dtype="float32") /* ty=Tensor[(5, 5, 1), float32] */;
  %520 = log2(%519) /* ty=Tensor[(5, 5, 1), float32] */;
  %521 = cast(%518, dtype="uint8") /* ty=Tensor[(5, 5, 11), uint8] */;
  %522 = cast(%520, dtype="uint8") /* ty=Tensor[(5, 5, 1), uint8] */;
  %523 = subtract(%521, %522) /* ty=Tensor[(5, 5, 11), uint8] */;
  (%523,)
}

def @func_5667(%var_5651: uint16, %var_5652: Tensor[(9, 13, 5), uint16]) -> (Tensor[(9, 13, 5), uint16], Tensor[(9, 13, 5), int64]) {
  %524 = cast(%var_5651, dtype="uint16") /* ty=uint16 */;
  %525 = cast(%var_5652, dtype="uint16") /* ty=Tensor[(9, 13, 5), uint16] */;
  %526 = cast(%var_5651, dtype="int64") /* ty=int64 */;
  %527 = cast(%var_5652, dtype="int64") /* ty=Tensor[(9, 13, 5), int64] */;
  %528 = bitwise_and(%524, %525) /* ty=Tensor[(9, 13, 5), uint16] */;
  %529 = left_shift(%526, %527) /* ty=Tensor[(9, 13, 5), int64] */;
  (%528, %529)
}

def @func_494() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) {
  %530 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %531 = @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %532 = @func_435() /* ty=Tensor[(8, 15, 12), bool] */;
  %533 = cast(%532, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %534 = atanh(%533) /* ty=Tensor[(8, 15, 12), float64] */;
  %535 = cast(%534, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %536 = %530.0;
  %537 = %531.2;
  %538 = sinh(%535) /* ty=Tensor[(8, 15, 12), float32] */;
  (%536, %537, %538)
}

def @func_3518() -> (Tensor[(15, 7, 16), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %539 = cast(meta[relay.Constant][22] /* ty=Tensor[(15, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 16), float64] */;
  %540 = asinh(%539) /* ty=Tensor[(15, 7, 16), float64] */;
  %541 = cast(%540, dtype="float32") /* ty=Tensor[(15, 7, 16), float32] */;
  %542 = @func_3157() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */;
  %543 = acosh(%541) /* ty=Tensor[(15, 7, 16), float32] */;
  %544 = %542.1;
  %545 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  (%543, %544, %545)
}

def @func_109() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) {
  %546 = @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %547 = @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %548 = %547.0;
  %549 = cast(%548, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %550 = %546.2;
  %551 = log(%549) /* ty=Tensor[(8, 15, 12), float32] */;
  (%550, %551)
}

def @func_4549() -> Tensor[(8, 15, 12), bool] {
  %552 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %552.1
}

def @func_1585(%var_1570: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), int64],) {
  %553 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %554 = %553.0;
  %555 = cast(%var_1570, dtype="int64") /* ty=Tensor[(8, 15, 12), int64] */;
  %556 = shape_of(%554, dtype="int32") /* ty=Tensor[(3), int32] */;
  %557 = cast(%554, dtype="int64") /* ty=Tensor[(8, 15, 12), int64] */;
  %558 = dyn.reshape(%555, %556, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %559 = bitwise_and(%557, %558) /* ty=Tensor[(8, 15, 12), int64] */;
  (%559,)
}

def @func_3179(%var_3165: Tensor[(8, 12, 13), int32]) -> (Tensor[(8, 12, 13), int32],) {
  %560 = cast(meta[relay.Constant][23] /* ty=Tensor[(8, 12, 13), int32] */, dtype="int32") /* ty=Tensor[(8, 12, 13), int32] */;
  %561 = shape_of(%var_3165, dtype="int32") /* ty=Tensor[(3), int32] */;
  %562 = cast(%var_3165, dtype="int32") /* ty=Tensor[(8, 12, 13), int32] */;
  %563 = dyn.reshape(%560, %561, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %564 = left_shift(%562, %563) /* ty=Tensor[(8, 12, 13), int32] */;
  (%564,)
}

def @func_4850(%var_4842: Tensor[(1, 16, 12), float32]) -> (Tensor[(1, 16, 12), float32],) {
  %565 = cast(%var_4842, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
  %566 = asinh(%565) /* ty=Tensor[(1, 16, 12), float32] */;
  (%566,)
}

def @func_978() -> (Tensor[(8, 15, 12), bool],) {
  %567 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %568 = %567.0;
  %569 = cast(meta[relay.Constant][24] /* ty=Tensor[(8, 15, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %570 = shape_of(%568, dtype="int32") /* ty=Tensor[(3), int32] */;
  %571 = cast(%568, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %572 = dyn.reshape(%569, %570, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %573 = logical_and(%571, %572) /* ty=Tensor[(8, 15, 12), bool] */;
  (%573,)
}

def @func_1324(%var_1281: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %574 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %575 = @func_814() /* ty=Tensor[(8, 15, 12), float64] */;
  %576 = cast(%var_1281, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %577 = shape_of(%575, dtype="int32") /* ty=Tensor[(3), int32] */;
  %578 = cast(%575, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %579 = dyn.reshape(%576, %577, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %580 = greater_equal(%578, %579) /* ty=Tensor[(8, 15, 12), bool] */;
  %581 = cast(%580, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %582 = tan(%581) /* ty=Tensor[(8, 15, 12), float64] */;
  %583 = cast(%582, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %584 = %574.0;
  %585 = acos(%583) /* ty=Tensor[(8, 15, 12), float64] */;
  (%584, %585)
}

def @func_588() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) {
  %586 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %587 = @func_435() /* ty=Tensor[(8, 15, 12), bool] */;
  (%586, %587)
}

def @func_532(%var_517: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) {
  %588 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %589 = cast(%var_517, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
  %590 = shape_of(%588, dtype="int32") /* ty=Tensor[(3), int32] */;
  %591 = cast(%588, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
  %592 = dyn.reshape(%589, %590, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %593 = cast(%588, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %594 = subtract(%591, %592) /* ty=Tensor[(8, 15, 12), uint8] */;
  %595 = erf(%593) /* ty=Tensor[(8, 15, 12), float32] */;
  (%594, %595)
}

def @func_2642() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) {
  %596 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %597 = %596.1;
  %598 = cast(%597, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %599 = reshape(%598, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %600 = @func_1585(%599) /* ty=(Tensor[(8, 15, 12), int64],) */;
  %601 = @func_1684() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %602 = %600.0;
  %603 = %601.1;
  (%597, %602, %603)
}

def @func_2330(%var_2312: Tensor[(36), float32]) -> (Tensor[(11, 5, 10), float64], Tensor[(3, 12), float32], Tensor[(36), float32]) {
  %604 = cast(5.1741f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
  %605 = cast(meta[relay.Constant][25] /* ty=Tensor[(11, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 10), float64] */;
  %606 = cast(%var_2312, dtype="float32") /* ty=Tensor[(36), float32] */;
  %607 = reshape(%606, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
  %608 = @func_1756(%607) /* ty=(Tensor[(3, 12), float32],) */;
  %609 = divide(%604, %605) /* ty=Tensor[(11, 5, 10), float64] */;
  %610 = %608.0;
  (%609, %610, %var_2312)
}

def @func_5164() -> (Tensor[(8, 15, 12), float64],) {
  %611 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  (%611,)
}

def @func_5781() -> Tensor[(8, 15, 12), bool] {
  @func_4549() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_4883() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %612 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %613 = @func_3978() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %614 = %612.2;
  %615 = %613.0;
  (%614, %615)
}

def @func_6153(%var_6142: Tensor[(1, 1, 15), float64]) -> (Tensor[(1, 1, 15), float64], Tensor[(8, 15, 12), float64]) {
  %616 = cast(%var_6142, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %617 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %618 = rsqrt(%616) /* ty=Tensor[(1, 1, 15), float64] */;
  %619 = %617.0;
  (%618, %619)
}

def @func_5357() -> Tensor[(8, 15, 12), float64] {
  @func_5082() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3103(%var_3084: Tensor[(12, 14, 13), float32]) -> (Tensor[(12, 14, 13), float32],) {
  %620 = cast(%var_3084, dtype="float32") /* ty=Tensor[(12, 14, 13), float32] */;
  %621 = acos(%620) /* ty=Tensor[(12, 14, 13), float32] */;
  (%621,)
}

def @func_1445(%var_1402: Tensor[(2, 13, 16), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(2, 13, 16), float32], Tensor[(2, 13, 16), int16]) {
  %622 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %623 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %624 = cast(9.71171f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
  %625 = cast(%var_1402, dtype="bool") /* ty=Tensor[(2, 13, 16), bool] */;
  %626 = less_equal(%624, %625) /* ty=Tensor[(2, 13, 16), bool] */;
  %627 = cast(%626, dtype="float32") /* ty=Tensor[(2, 13, 16), float32] */;
  %628 = shape_of(%var_1402, dtype="int32") /* ty=Tensor[(3), int32] */;
  %629 = cast(%var_1402, dtype="float32") /* ty=Tensor[(2, 13, 16), float32] */;
  %630 = dyn.reshape(%627, %628, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %631 = cast(%626, dtype="int16") /* ty=Tensor[(2, 13, 16), int16] */;
  %632 = cast(9.71171f64 /* ty=float64 */, dtype="int16") /* ty=int16 */;
  %633 = %622.0;
  %634 = %623.0;
  %635 = multiply(%629, %630) /* ty=Tensor[(2, 13, 16), float32] */;
  %636 = bitwise_or(%631, %632) /* ty=Tensor[(2, 13, 16), int16] */;
  (%633, %634, %635, %636)
}

def @func_3603(%var_3594: Tensor[(9, 2, 9), float32]) -> (Tensor[(9, 2, 9), float32],) {
  %637 = cast(%var_3594, dtype="float32") /* ty=Tensor[(9, 2, 9), float32] */;
  %638 = cosh(%637) /* ty=Tensor[(9, 2, 9), float32] */;
  (%638,)
}

def @func_2924() -> (Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %639 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %640 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %641 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %642 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %643 = %639.1;
  %644 = %640.1;
  %645 = %641.1;
  %646 = %642.1;
  (%643, %644, %645, %646)
}

def @func_3031(%var_3014: Tensor[(8, 15, 12), float32]) -> Tensor[(8, 15, 12), bool] {
  %647 = @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */;
  %648 = %647.0;
  %649 = cast(%var_3014, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %650 = shape_of(%648, dtype="int32") /* ty=Tensor[(3), int32] */;
  %651 = cast(%648, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
  %652 = dyn.reshape(%649, %650, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  logical_or(%651, %652) /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_2510() -> (Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) {
  %653 = @func_2238() /* ty=Tensor[(8, 15, 12), bool] */;
  %654 = cast(meta[relay.Constant][26] /* ty=Tensor[(8, 15, 12), bool] */, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
  %655 = shape_of(%653, dtype="int32") /* ty=Tensor[(3), int32] */;
  %656 = cast(%653, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
  %657 = dyn.reshape(%654, %655, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %658 = logical_xor(%656, %657) /* ty=Tensor[(8, 15, 12), int32] */;
  %659 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  (%658, %659)
}

def @func_4095(%var_4084: Tensor[(9, 4, 13), float32]) -> (Tensor[(9, 4, 13), float32], Tensor[(9, 4, 13), float32], Tensor[(3, 12), float32], Tensor[(36), float32]) {
  %660 = cast(%var_4084, dtype="float32") /* ty=Tensor[(9, 4, 13), float32] */;
  %661 = cast(%var_4084, dtype="float32") /* ty=Tensor[(9, 4, 13), float32] */;
  %662 = cast(meta[relay.Constant][27] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
  %663 = reshape(%662, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
  %664 = @func_1756(%663) /* ty=(Tensor[(3, 12), float32],) */;
  %665 = sin(%660) /* ty=Tensor[(9, 4, 13), float32] */;
  %666 = sigmoid(%661) /* ty=Tensor[(9, 4, 13), float32] */;
  %667 = %664.0;
  (%665, %666, %667, meta[relay.Constant][27] /* ty=Tensor[(36), float32] */)
}

def @func_5145() -> (Tensor[(8, 15, 12), float64],) {
  %668 = @func_3657() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %669 = %668.3;
  (%669,)
}

def @func_5909() -> (Tensor[(8, 15, 12), float64],) {
  %670 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %671 = %670.1;
  (%671,)
}

def @func_5131() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(8, 15, 12), float64]) {
  %672 = @func_4883() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %673 = cast(meta[relay.Constant][28] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %674 = reshape(%673, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %675 = @func_3103(%674) /* ty=(Tensor[(12, 14, 13), float32],) */;
  %676 = @func_5082() /* ty=Tensor[(8, 15, 12), float64] */;
  %677 = %672.0;
  %678 = %675.0;
  %679 = @func_2401() /* ty=Tensor[(8, 15, 12), float64] */;
  (%676, %677, %678, meta[relay.Constant][28] /* ty=Tensor[(2184), float32] */, %679)
}

def @func_1966() -> (Tensor[(8, 15, 12), float64],) {
  %680 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %681 = %680.0;
  (%681,)
}

def @func_4261() -> Tensor[(8, 15, 12), bool] {
  %682 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %682.1
}

def @func_2203() -> (Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) {
  %683 = cast(meta[relay.Constant][29] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %684 = cast(meta[relay.Constant][29] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
  %685 = reshape(%683, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
  %686 = reshape(%684, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
  %687 = @func_1896(%685, %686) /* ty=(Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) */;
  %688 = @func_435() /* ty=Tensor[(8, 15, 12), bool] */;
  %689 = %687.0;
  (%688, %689, meta[relay.Constant][29] /* ty=Tensor[(216), int16] */)
}

def @func_1782() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %690 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  %691 = cast(%690, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %692 = reshape(%691, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %693 = @func_1324(%692) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %694 = %693.1;
  (%690, %694)
}

def @func_2560() -> Tensor[(8, 15, 12), float64] {
  %695 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %695.0
}

def @func_3059(%var_3051: Tensor[(10, 3, 8), uint16], %var_3052: Tensor[(10, 3, 8), uint16]) -> (Tensor[(10, 3, 8), uint16],) {
  %696 = cast(%var_3052, dtype="uint16") /* ty=Tensor[(10, 3, 8), uint16] */;
  %697 = shape_of(%var_3051, dtype="int32") /* ty=Tensor[(3), int32] */;
  %698 = cast(%var_3051, dtype="uint16") /* ty=Tensor[(10, 3, 8), uint16] */;
  %699 = dyn.reshape(%696, %697, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %700 = minimum(%698, %699) /* ty=Tensor[(10, 3, 8), uint16] */;
  (%700,)
}

def @func_2815() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %701 = @func_2348() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %702 = @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %703 = @func_643() /* ty=Tensor[(8, 15, 12), float64] */;
  %704 = %701.0;
  %705 = %702.0;
  (%703, %704, %705)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_2682() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  @func_2680() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */
}

def @func_1526() -> Tensor[(8, 15, 12), float64] {
  @func_643() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_6179() -> (Tensor[(2, 12, 9), int16],) {
  %2 = fn () -> (Tensor[(2, 12, 9), int16],) {
    %0 = @func_2203() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) */;
    %1 = %0.1;
    (%1,)
  };
  %2() /* ty=(Tensor[(2, 12, 9), int16],) */
}

def @func_6383(%var_6335: Tensor[(1, 4, 12), float32], %var_6374: Tensor[(3, 4, 12), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(?, 4, 12), bool], Tensor[(3, 4, 12), uint64]) {
  %3 = @func_2348() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %4 = cast(%var_6335, dtype="float32") /* ty=Tensor[(1, 4, 12), float32] */;
  %5 = log10(%4) /* ty=Tensor[(1, 4, 12), float32] */;
  %6 = cast(%5, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %7 = shape_of(%var_6335, dtype="int32") /* ty=Tensor[(3), int32] */;
  %8 = cast(%var_6335, dtype="bool") /* ty=Tensor[(1, 4, 12), bool] */;
  %9 = dyn.reshape(%6, %7, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %10 = cast(%5, dtype="uint64") /* ty=Tensor[(1, 4, 12), uint64] */;
  %11 = cast(%var_6374, dtype="uint64") /* ty=Tensor[(3, 4, 12), uint64] */;
  %12 = %3.0;
  %13 = equal(%8, %9) /* ty=Tensor[(?, 4, 12), bool] */;
  %14 = left_shift(%10, %11) /* ty=Tensor[(3, 4, 12), uint64] */;
  (%12, %13, %14)
}

def @func_6081() -> (Tensor[(8, 15, 12), float64],) {
  %16 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %15 = @func_5357() /* ty=Tensor[(8, 15, 12), float64] */;
    (%15,)
  };
  %16() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_3571(%var_3569: uint32, %var_3570: Tensor[(10, 5, 1), uint32]) -> (Tensor[(10, 5, ?), bool], Tensor[(8, 15, 12), uint8], Tensor[(1440), float64]) {
  %31 = fn (%var_3534: uint32, %var_3535: Tensor[(10, 5, 1), uint32]) -> (Tensor[(10, 5, ?), bool], Tensor[(8, 15, 12), uint8], Tensor[(1440), float64]) {
    %17 = cast(%var_3534, dtype="uint32") /* ty=uint32 */;
    %18 = cast(%var_3535, dtype="uint32") /* ty=Tensor[(10, 5, 1), uint32] */;
    %19 = bitwise_xor(%17, %18) /* ty=Tensor[(10, 5, 1), uint32] */;
    %20 = cast(%19, dtype="float32") /* ty=Tensor[(10, 5, 1), float32] */;
    %21 = acos(%20) /* ty=Tensor[(10, 5, 1), float32] */;
    %22 = cast(%var_3535, dtype="bool") /* ty=Tensor[(10, 5, 1), bool] */;
    %23 = shape_of(%21, dtype="int32") /* ty=Tensor[(3), int32] */;
    %24 = cast(%21, dtype="bool") /* ty=Tensor[(10, 5, 1), bool] */;
    %25 = dyn.reshape(%22, %23, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %26 = cast(meta[relay.Constant][0] /* ty=Tensor[(1440), float64] */, dtype="float64") /* ty=Tensor[(1440), float64] */;
    %27 = reshape(%26, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
    %28 = @func_532(%27) /* ty=(Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) */;
    %29 = equal(%24, %25) /* ty=Tensor[(10, 5, ?), bool] */;
    %30 = %28.0;
    (%29, %30, meta[relay.Constant][0] /* ty=Tensor[(1440), float64] */)
  };
  %31(%var_3569, %var_3570) /* ty=(Tensor[(10, 5, ?), bool], Tensor[(8, 15, 12), uint8], Tensor[(1440), float64]) */
}

def @func_1447(%var_1446: Tensor[(2, 13, 16), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(2, 13, 16), float32], Tensor[(2, 13, 16), int16]) {
  %47 = fn (%var_1402: Tensor[(2, 13, 16), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(2, 13, 16), float32], Tensor[(2, 13, 16), int16]) {
    %32 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %33 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %34 = cast(9.71171f64 /* ty=float64 */, dtype="bool") /* ty=bool */;
    %35 = cast(%var_1402, dtype="bool") /* ty=Tensor[(2, 13, 16), bool] */;
    %36 = less_equal(%34, %35) /* ty=Tensor[(2, 13, 16), bool] */;
    %37 = cast(%36, dtype="float32") /* ty=Tensor[(2, 13, 16), float32] */;
    %38 = shape_of(%var_1402, dtype="int32") /* ty=Tensor[(3), int32] */;
    %39 = cast(%var_1402, dtype="float32") /* ty=Tensor[(2, 13, 16), float32] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %41 = cast(%36, dtype="int16") /* ty=Tensor[(2, 13, 16), int16] */;
    %42 = cast(9.71171f64 /* ty=float64 */, dtype="int16") /* ty=int16 */;
    %43 = %32.0;
    %44 = %33.0;
    %45 = multiply(%39, %40) /* ty=Tensor[(2, 13, 16), float32] */;
    %46 = bitwise_or(%41, %42) /* ty=Tensor[(2, 13, 16), int16] */;
    (%43, %44, %45, %46)
  };
  %47(%var_1446) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(2, 13, 16), float32], Tensor[(2, 13, 16), int16]) */
}

def @func_2715() -> (Tensor[(8, 15, 12), float64],) {
  %48 = @func_1730() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %49 = %48.0;
  (%49,)
}

def @func_4400() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 12, 13), int32], Tensor[(1248), float64]) {
  %57 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 12, 13), int32], Tensor[(1248), float64]) {
    %50 = cast(meta[relay.Constant][1] /* ty=Tensor[(1248), int32] */, dtype="int32") /* ty=Tensor[(1248), int32] */;
    %51 = reshape(%50, newshape=[8, 12, 13]) /* ty=Tensor[(8, 12, 13), int32] */;
    %52 = @func_3179(%51) /* ty=(Tensor[(8, 12, 13), int32],) */;
    %53 = cast(meta[relay.Constant][1] /* ty=Tensor[(1248), int32] */, dtype="float64") /* ty=Tensor[(1248), float64] */;
    %54 = @func_3308() /* ty=Tensor[(8, 15, 12), float64] */;
    %55 = %52.0;
    %56 = sigmoid(%53) /* ty=Tensor[(1248), float64] */;
    (%54, %55, %56)
  };
  %57() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 12, 13), int32], Tensor[(1248), float64]) */
}

def @func_5133() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(8, 15, 12), float64]) {
  @func_5131() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(8, 15, 12), float64]) */
}

def @func_4984() -> (Tensor[(8, 15, 12), float64],) {
  %58 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %59 = %58.1;
  (%59,)
}

def @func_17() -> Tensor[(8, 15, 12), float64] {
  @func_11() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3181(%var_3180: Tensor[(8, 12, 13), int32]) -> (Tensor[(8, 12, 13), int32],) {
  %65 = fn (%var_3165: Tensor[(8, 12, 13), int32]) -> (Tensor[(8, 12, 13), int32],) {
    %60 = cast(meta[relay.Constant][2] /* ty=Tensor[(8, 12, 13), int32] */, dtype="int32") /* ty=Tensor[(8, 12, 13), int32] */;
    %61 = shape_of(%var_3165, dtype="int32") /* ty=Tensor[(3), int32] */;
    %62 = cast(%var_3165, dtype="int32") /* ty=Tensor[(8, 12, 13), int32] */;
    %63 = dyn.reshape(%60, %61, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %64 = left_shift(%62, %63) /* ty=Tensor[(8, 12, 13), int32] */;
    (%64,)
  };
  %65(%var_3180) /* ty=(Tensor[(8, 12, 13), int32],) */
}

def @func_1143(%var_1124: Tensor[(8, 15, 12), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %66 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %67 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
  %68 = %67.0;
  %69 = cast(%var_1124, dtype="uint64") /* ty=Tensor[(8, 15, 12), uint64] */;
  %70 = shape_of(%68, dtype="int32") /* ty=Tensor[(3), int32] */;
  %71 = cast(%68, dtype="uint64") /* ty=Tensor[(8, 15, 12), uint64] */;
  %72 = dyn.reshape(%69, %70, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %73 = @func_978() /* ty=(Tensor[(8, 15, 12), bool],) */;
  %74 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %75 = %66.0;
  %76 = bitwise_or(%71, %72) /* ty=Tensor[(8, 15, 12), uint64] */;
  %77 = %73.0;
  %78 = %74.0;
  (%75, %76, %77, %78)
}

def @func_589() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) {
  %81 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) {
    %79 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
    %80 = @func_435() /* ty=Tensor[(8, 15, 12), bool] */;
    (%79, %80)
  };
  %81() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */
}

def @func_2529() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_2527() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_143() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5435() -> Tensor[(8, 15, 12), float64] {
  @func_5433() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_5988() -> (Tensor[(8, 15, 12), float64], Tensor[(605), uint8], Tensor[(8, 15, 12), float64]) {
  @func_5986() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(605), uint8], Tensor[(8, 15, 12), float64]) */
}

def @func_6228() -> (Tensor[(8, 15, 12), float64],) {
  %83 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %82 = @func_4208() /* ty=Tensor[(8, 15, 12), float64] */;
    (%82,)
  };
  %83() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_19() -> Tensor[(8, 15, 12), float64] {
  @func_17() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4097(%var_4096: Tensor[(9, 4, 13), float32]) -> (Tensor[(9, 4, 13), float32], Tensor[(9, 4, 13), float32], Tensor[(3, 12), float32], Tensor[(36), float32]) {
  %92 = fn (%var_4084: Tensor[(9, 4, 13), float32]) -> (Tensor[(9, 4, 13), float32], Tensor[(9, 4, 13), float32], Tensor[(3, 12), float32], Tensor[(36), float32]) {
    %84 = cast(%var_4084, dtype="float32") /* ty=Tensor[(9, 4, 13), float32] */;
    %85 = cast(%var_4084, dtype="float32") /* ty=Tensor[(9, 4, 13), float32] */;
    %86 = cast(meta[relay.Constant][3] /* ty=Tensor[(36), float32] */, dtype="float32") /* ty=Tensor[(36), float32] */;
    %87 = reshape(%86, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
    %88 = @func_1756(%87) /* ty=(Tensor[(3, 12), float32],) */;
    %89 = sin(%84) /* ty=Tensor[(9, 4, 13), float32] */;
    %90 = sigmoid(%85) /* ty=Tensor[(9, 4, 13), float32] */;
    %91 = %88.0;
    (%89, %90, %91, meta[relay.Constant][3] /* ty=Tensor[(36), float32] */)
  };
  %92(%var_4096) /* ty=(Tensor[(9, 4, 13), float32], Tensor[(9, 4, 13), float32], Tensor[(3, 12), float32], Tensor[(36), float32]) */
}

def @func_111() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) {
  @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */
}

def @func_1146(%var_1144: Tensor[(8, 15, 12), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  @func_1143(%var_1144) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */
}

def @func_2902() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) {
  %99 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) {
    %93 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
    %94 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
    %95 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
    %96 = %93.2;
    %97 = %94.2;
    %98 = %95.1;
    (%96, %97, %98)
  };
  %99() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */
}

def @func_109() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) {
  %100 = @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %101 = @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %102 = %101.0;
  %103 = cast(%102, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %104 = %100.2;
  %105 = log(%103) /* ty=Tensor[(8, 15, 12), float32] */;
  (%104, %105)
}

def @func_814() -> Tensor[(8, 15, 12), float64] {
  %106 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %106.1
}

def @func_6137(%var_6135: Tensor[(9, 1, 1), float64]) -> Tensor[(9, 1, 1), float64] {
  @func_6134(%var_6135) /* ty=Tensor[(9, 1, 1), float64] */
}

def @func_2644() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) {
  @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */
}

def @func_12() -> Tensor[(8, 15, 12), float64] {
  %108 = fn () -> Tensor[(8, 15, 12), float64] {
    %107 = cast(meta[relay.Constant][4] /* ty=Tensor[(8, 15, 12), float64] */, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    rsqrt(%107) /* ty=Tensor[(8, 15, 12), float64] */
  };
  %108() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4493() -> Tensor[(8, 15, 12), float64] {
  %110 = fn () -> Tensor[(8, 15, 12), float64] {
    %109 = @func_2221() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %109.0
  };
  %110() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_5145() -> (Tensor[(8, 15, 12), float64],) {
  %111 = @func_3657() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %112 = %111.3;
  (%112,)
}

def @func_4760() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %113 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %114 = @func_4492() /* ty=Tensor[(8, 15, 12), float64] */;
  %115 = %113.0;
  (%114, %115)
}

def @func_3339() -> (Tensor[(8, 15, 12), float64],) {
  %117 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %116 = @func_1526() /* ty=Tensor[(8, 15, 12), float64] */;
    (%116,)
  };
  %117() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5586(%var_5584: Tensor[(11, 15, 13), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(11, 15, 13), int64]) {
  @func_5583(%var_5584) /* ty=(Tensor[(11, 15, 13), bool], Tensor[(11, 15, 13), int64]) */
}

def @func_943() -> (Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) {
  @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */
}

def @func_5305() -> (Tensor[(8, 15, 12), float64],) {
  @func_5303() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_6313(%var_6311: Tensor[(9), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(9, 1, 1), float64], Tensor[(9), float64]) {
  @func_6310(%var_6311) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(9, 1, 1), float64], Tensor[(9), float64]) */
}

def @func_4418() -> (Tensor[(8, 15, 12), float64],) {
  %118 = @func_1684() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %119 = %118.1;
  (%119,)
}

def @func_1685() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %124 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %120 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %121 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %122 = %120.0;
    %123 = %121.1;
    (%122, %123)
  };
  %124() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_3979() -> (Tensor[(8, 15, 12), float64],) {
  %127 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %125 = @func_3518() /* ty=(Tensor[(15, 7, 16), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %126 = %125.2;
    (%126,)
  };
  %127() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5147() -> (Tensor[(8, 15, 12), float64],) {
  @func_5145() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5358() -> Tensor[(8, 15, 12), float64] {
  %128 = fn () -> Tensor[(8, 15, 12), float64] {
    @func_5082() /* ty=Tensor[(8, 15, 12), float64] */
  };
  %128() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_5192() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %129 = @func_2238() /* ty=Tensor[(8, 15, 12), bool] */;
  %130 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  (%129, %130)
}

def @func_4812() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_4810() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_669() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %134 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %131 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %132 = %131.0;
    %133 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
    (%132, %133)
  };
  %134() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_3485() -> (Tensor[(8, 15, 12), float64],) {
  %135 = @func_784() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %136 = %135.1;
  (%136,)
}

def @func_3695(%var_3693: Tensor[(15, 9, 9), uint16]) -> (Tensor[(15, 9, 9), bool], Tensor[(15, 9, 9), float32]) {
  @func_3692(%var_3693) /* ty=(Tensor[(15, 9, 9), bool], Tensor[(15, 9, 9), float32]) */
}

def @func_1758(%var_1757: Tensor[(3, 12), float32]) -> (Tensor[(3, 12), float32],) {
  %139 = fn (%var_1753: Tensor[(3, 12), float32]) -> (Tensor[(3, 12), float32],) {
    %137 = cast(%var_1753, dtype="float32") /* ty=Tensor[(3, 12), float32] */;
    %138 = sinh(%137) /* ty=Tensor[(3, 12), float32] */;
    (%138,)
  };
  %139(%var_1757) /* ty=(Tensor[(3, 12), float32],) */
}

def @func_2974() -> (Tensor[(8, 15, 12), float64],) {
  @func_2972() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5276() -> (Tensor[(8, 15, 12), float64], Tensor[(10, 12, 9), bool], Tensor[(1080), uint64]) {
  %140 = cast(meta[relay.Constant][5] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
  %141 = reshape(%140, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), uint64] */;
  %142 = @func_4328() /* ty=Tensor[(8, 15, 12), float64] */;
  %143 = @func_2245(%141) /* ty=Tensor[(10, 12, 9), bool] */;
  (%142, %143, meta[relay.Constant][5] /* ty=Tensor[(1080), uint64] */)
}

def @func_4810() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %144 = @func_3157() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */;
  %145 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %146 = %144.0;
  %147 = %145.0;
  (%146, %147)
}

def @func_5876(%var_5874: Tensor[(11, 5, 11), int8]) -> Tensor[(11, 5, 11), int8] {
  @func_5873(%var_5874) /* ty=Tensor[(11, 5, 11), int8] */
}

def @func_3657() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %148 = @func_2527() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %149 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %150 = @func_3485() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %151 = @func_1526() /* ty=Tensor[(8, 15, 12), float64] */;
  %152 = %148.1;
  %153 = %149.0;
  %154 = %150.0;
  (%151, %152, %153, %154)
}

def @func_5350(%var_5349: Tensor[(48, 4), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) {
  %165 = fn (%var_5341: Tensor[(48, 4), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) {
    %155 = @func_2348() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %156 = @func_2040() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) */;
    %157 = cast(%var_5341, dtype="float32") /* ty=Tensor[(48, 4), float32] */;
    %158 = reshape(%157, newshape=[1, 16, 12]) /* ty=Tensor[(1, 16, 12), float32] */;
    %159 = @func_4850(%158) /* ty=(Tensor[(1, 16, 12), float32],) */;
    %160 = %159.0;
    %161 = cast(%160, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
    %162 = %155.0;
    %163 = %156.0;
    %164 = atan(%161) /* ty=Tensor[(1, 16, 12), float32] */;
    (%162, %163, %var_5341, %164)
  };
  %165(%var_5349) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) */
}

def @func_6153(%var_6142: Tensor[(1, 1, 15), float64]) -> (Tensor[(1, 1, 15), float64], Tensor[(8, 15, 12), float64]) {
  %166 = cast(%var_6142, dtype="float64") /* ty=Tensor[(1, 1, 15), float64] */;
  %167 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %168 = rsqrt(%166) /* ty=Tensor[(1, 1, 15), float64] */;
  %169 = %167.0;
  (%168, %169)
}

def @func_2747() -> (Tensor[(8, 15, 12), float64],) {
  @func_2745() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5629(%var_5609: Tensor[(12, 5, 15), float64], %var_5625: Tensor[(12, 5, 15), float64]) -> (Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), uint32]) {
  %170 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 5, 15), float64] */, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %171 = shape_of(%var_5609, dtype="int32") /* ty=Tensor[(3), int32] */;
  %172 = cast(%var_5609, dtype="float64") /* ty=Tensor[(12, 5, 15), float64] */;
  %173 = dyn.reshape(%170, %171, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %174 = cast(%var_5625, dtype="uint32") /* ty=Tensor[(12, 5, 15), uint32] */;
  %175 = shape_of(meta[relay.Constant][6] /* ty=Tensor[(12, 5, 15), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %176 = cast(meta[relay.Constant][6] /* ty=Tensor[(12, 5, 15), float64] */, dtype="uint32") /* ty=Tensor[(12, 5, 15), uint32] */;
  %177 = dyn.reshape(%174, %175, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %178 = floor_mod(%172, %173) /* ty=Tensor[(12, 5, 15), float64] */;
  %179 = left_shift(%176, %177) /* ty=Tensor[(12, 5, 15), uint32] */;
  (%178, %179)
}

def @func_4263() -> Tensor[(8, 15, 12), bool] {
  @func_4261() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_141() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %180 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %181 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %182 = %180.0;
  (%181, %182)
}

def @func_3519() -> (Tensor[(15, 7, 16), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %190 = fn () -> (Tensor[(15, 7, 16), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %183 = cast(meta[relay.Constant][7] /* ty=Tensor[(15, 7, 16), float64] */, dtype="float64") /* ty=Tensor[(15, 7, 16), float64] */;
    %184 = asinh(%183) /* ty=Tensor[(15, 7, 16), float64] */;
    %185 = cast(%184, dtype="float32") /* ty=Tensor[(15, 7, 16), float32] */;
    %186 = @func_3157() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */;
    %187 = acosh(%185) /* ty=Tensor[(15, 7, 16), float32] */;
    %188 = %186.1;
    %189 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
    (%187, %188, %189)
  };
  %190() /* ty=(Tensor[(15, 7, 16), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5165() -> (Tensor[(8, 15, 12), float64],) {
  %192 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %191 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
    (%191,)
  };
  %192() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_1078(%var_1076: Tensor[(8, 15, 12), float64]) -> Tensor[(8, 15, 12), float32] {
  @func_1075(%var_1076) /* ty=Tensor[(8, 15, 12), float32] */
}

def @func_495() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) {
  %202 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) {
    %193 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %194 = @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %195 = @func_435() /* ty=Tensor[(8, 15, 12), bool] */;
    %196 = cast(%195, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %197 = atanh(%196) /* ty=Tensor[(8, 15, 12), float64] */;
    %198 = cast(%197, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
    %199 = %193.0;
    %200 = %194.2;
    %201 = sinh(%198) /* ty=Tensor[(8, 15, 12), float32] */;
    (%199, %200, %201)
  };
  %202() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */
}

def @func_1236() -> Tensor[(8, 15, 12), float64] {
  @func_1234() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_2177(%var_2149: Tensor[(5, 5, 1), uint8], %var_2150: Tensor[(5, 5, 11), uint8]) -> (Tensor[(5, 5, 11), uint8],) {
  %203 = cast(%var_2149, dtype="uint8") /* ty=Tensor[(5, 5, 1), uint8] */;
  %204 = cast(%var_2150, dtype="uint8") /* ty=Tensor[(5, 5, 11), uint8] */;
  %205 = minimum(%203, %204) /* ty=Tensor[(5, 5, 11), uint8] */;
  %206 = cast(%var_2149, dtype="float32") /* ty=Tensor[(5, 5, 1), float32] */;
  %207 = log2(%206) /* ty=Tensor[(5, 5, 1), float32] */;
  %208 = cast(%205, dtype="uint8") /* ty=Tensor[(5, 5, 11), uint8] */;
  %209 = cast(%207, dtype="uint8") /* ty=Tensor[(5, 5, 1), uint8] */;
  %210 = subtract(%208, %209) /* ty=Tensor[(5, 5, 11), uint8] */;
  (%210,)
}

def @func_1782() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %211 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  %212 = cast(%211, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %213 = reshape(%212, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %214 = @func_1324(%213) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %215 = %214.1;
  (%211, %215)
}

def @func_4826() -> (Tensor[(8, 15, 12), float64],) {
  %218 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %216 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
    %217 = %216.2;
    (%217,)
  };
  %218() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5194() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  @func_5192() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */
}

def @func_2222() -> (Tensor[(8, 15, 12), float64],) {
  %221 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %219 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %220 = %219.0;
    (%220,)
  };
  %221() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_2204() -> (Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) {
  %229 = fn () -> (Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) {
    %222 = cast(meta[relay.Constant][8] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
    %223 = cast(meta[relay.Constant][8] /* ty=Tensor[(216), int16] */, dtype="int16") /* ty=Tensor[(216), int16] */;
    %224 = reshape(%222, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
    %225 = reshape(%223, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
    %226 = @func_1896(%224, %225) /* ty=(Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) */;
    %227 = @func_435() /* ty=Tensor[(8, 15, 12), bool] */;
    %228 = %226.0;
    (%227, %228, meta[relay.Constant][8] /* ty=Tensor[(216), int16] */)
  };
  %229() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) */
}

def @func_3844(%var_3768: Tensor[(25, 1), uint8], %var_3769: Tensor[(275), uint8], %var_3812: Tensor[(25, 10), float32], %var_3816: Tensor[(25, 10), bool]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(5, 5, 11), uint8], Tensor[(25, 275), int16], Tensor[(25, 10), float32], Tensor[(25, 10), uint64]) {
  %230 = @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %231 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %232 = cast(%var_3768, dtype="uint8") /* ty=Tensor[(25, 1), uint8] */;
  %233 = cast(%var_3769, dtype="uint8") /* ty=Tensor[(275), uint8] */;
  %234 = reshape(%232, newshape=[5, 5, 1]) /* ty=Tensor[(5, 5, 1), uint8] */;
  %235 = reshape(%233, newshape=[5, 5, 11]) /* ty=Tensor[(5, 5, 11), uint8] */;
  %236 = @func_2177(%234, %235) /* ty=(Tensor[(5, 5, 11), uint8],) */;
  %237 = cast(%var_3769, dtype="float32") /* ty=Tensor[(275), float32] */;
  %238 = cast(%var_3768, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %239 = mod(%237, %238) /* ty=Tensor[(25, 275), float32] */;
  %240 = cast(%239, dtype="int16") /* ty=Tensor[(25, 275), int16] */;
  %241 = cast(%var_3768, dtype="int16") /* ty=Tensor[(25, 1), int16] */;
  %242 = cast(%var_3768, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %243 = atan(%242) /* ty=Tensor[(25, 1), float32] */;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %245 = asin(%244) /* ty=Tensor[(25, 1), float32] */;
  %246 = cast(%245, dtype="bool") /* ty=Tensor[(25, 1), bool] */;
  %247 = cast(%var_3812, dtype="bool") /* ty=Tensor[(25, 10), bool] */;
  %248 = greater(%246, %247) /* ty=Tensor[(25, 10), bool] */;
  %249 = cast(%248, dtype="float32") /* ty=Tensor[(25, 10), float32] */;
  %250 = cast(%243, dtype="float32") /* ty=Tensor[(25, 1), float32] */;
  %251 = cast(%var_3816, dtype="bool") /* ty=Tensor[(25, 10), bool] */;
  %252 = shape_of(%248, dtype="int32") /* ty=Tensor[(2), int32] */;
  %253 = cast(%248, dtype="bool") /* ty=Tensor[(25, 10), bool] */;
  %254 = dyn.reshape(%251, %252, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %255 = less_equal(%253, %254) /* ty=Tensor[(25, 10), bool] */;
  %256 = cast(%243, dtype="uint64") /* ty=Tensor[(25, 1), uint64] */;
  %257 = cast(%255, dtype="uint64") /* ty=Tensor[(25, 10), uint64] */;
  %258 = %230.0;
  %259 = %231.1;
  %260 = %236.0;
  %261 = logical_xor(%240, %241) /* ty=Tensor[(25, 275), int16] */;
  %262 = mod(%249, %250) /* ty=Tensor[(25, 10), float32] */;
  %263 = bitwise_or(%256, %257) /* ty=Tensor[(25, 10), uint64] */;
  (%258, %259, %260, %261, %262, %263)
}

def @func_1831() -> (Tensor[(8, 15, 12), float32],) {
  @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */
}

def @func_5526() -> Tensor[(8, 15, 12), float64] {
  @func_5524() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_979() -> (Tensor[(8, 15, 12), bool],) {
  %271 = fn () -> (Tensor[(8, 15, 12), bool],) {
    %264 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %265 = %264.0;
    %266 = cast(meta[relay.Constant][9] /* ty=Tensor[(8, 15, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %267 = shape_of(%265, dtype="int32") /* ty=Tensor[(3), int32] */;
    %268 = cast(%265, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %269 = dyn.reshape(%266, %267, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %270 = logical_and(%268, %269) /* ty=Tensor[(8, 15, 12), bool] */;
    (%270,)
  };
  %271() /* ty=(Tensor[(8, 15, 12), bool],) */
}

def @func_2245(%var_2240: Tensor[(10, 12, 9), uint64]) -> Tensor[(10, 12, 9), bool] {
  %272 = cast(meta[relay.Constant][10] /* ty=Tensor[(10, 12, 9), uint64] */, dtype="bool") /* ty=Tensor[(10, 12, 9), bool] */;
  %273 = shape_of(%var_2240, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%var_2240, dtype="bool") /* ty=Tensor[(10, 12, 9), bool] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%274, %275) /* ty=Tensor[(10, 12, 9), bool] */
}

def @func_1585(%var_1570: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), int64],) {
  %276 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %277 = %276.0;
  %278 = cast(%var_1570, dtype="int64") /* ty=Tensor[(8, 15, 12), int64] */;
  %279 = shape_of(%277, dtype="int32") /* ty=Tensor[(3), int32] */;
  %280 = cast(%277, dtype="int64") /* ty=Tensor[(8, 15, 12), int64] */;
  %281 = dyn.reshape(%278, %279, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %282 = bitwise_and(%280, %281) /* ty=Tensor[(8, 15, 12), int64] */;
  (%282,)
}

def @func_683() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %283 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %284 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %285 = %283.0;
  (%284, %285)
}

def @func_4634(%var_4632: Tensor[(4, 14, 5), uint8], %var_4633: Tensor[(4, 14, 5), uint8]) -> (Tensor[(4, 14, 5), uint8], Tensor[(4, 14, 5), int64], Tensor[(4, 14, 5), float64]) {
  %306 = fn (%var_4592: Tensor[(4, 14, 5), uint8], %var_4593: Tensor[(4, 14, 5), uint8]) -> (Tensor[(4, 14, 5), uint8], Tensor[(4, 14, 5), int64], Tensor[(4, 14, 5), float64]) {
    %286 = cast(%var_4593, dtype="uint8") /* ty=Tensor[(4, 14, 5), uint8] */;
    %287 = shape_of(%var_4592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %288 = cast(%var_4592, dtype="uint8") /* ty=Tensor[(4, 14, 5), uint8] */;
    %289 = dyn.reshape(%286, %287, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %290 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
    %291 = shape_of(%var_4593, dtype="int32") /* ty=Tensor[(3), int32] */;
    %292 = cast(%var_4593, dtype="bool") /* ty=Tensor[(4, 14, 5), bool] */;
    %293 = dyn.reshape(%290, %291, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %294 = greater_equal(%292, %293) /* ty=Tensor[(4, 14, 5), bool] */;
    %295 = cast(%294, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
    %296 = shape_of(%var_4592, dtype="int32") /* ty=Tensor[(3), int32] */;
    %297 = cast(%var_4592, dtype="int64") /* ty=Tensor[(4, 14, 5), int64] */;
    %298 = dyn.reshape(%295, %296, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    %299 = cast(meta[relay.Constant][12] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %300 = shape_of(meta[relay.Constant][11] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %301 = cast(meta[relay.Constant][11] /* ty=Tensor[(4, 14, 5), uint8] */, dtype="float64") /* ty=Tensor[(4, 14, 5), float64] */;
    %302 = dyn.reshape(%299, %300, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %303 = subtract(%288, %289) /* ty=Tensor[(4, 14, 5), uint8] */;
    %304 = bitwise_xor(%297, %298) /* ty=Tensor[(4, 14, 5), int64] */;
    %305 = floor_mod(%301, %302) /* ty=Tensor[(4, 14, 5), float64] */;
    (%303, %304, %305)
  };
  %306(%var_4632, %var_4633) /* ty=(Tensor[(4, 14, 5), uint8], Tensor[(4, 14, 5), int64], Tensor[(4, 14, 5), float64]) */
}

def @func_2745() -> (Tensor[(8, 15, 12), float64],) {
  %307 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %308 = %307.0;
  (%308,)
}

def @func_3956(%var_3954: Tensor[(2, 16, 1), float32]) -> (Tensor[(2, 16, ?), float64], Tensor[(8, 15, 12), float64]) {
  @func_3953(%var_3954) /* ty=(Tensor[(2, 16, ?), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_685() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5909() -> (Tensor[(8, 15, 12), float64],) {
  %309 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %310 = %309.1;
  (%310,)
}

def @func_2816() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %316 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %311 = @func_2348() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %312 = @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %313 = @func_643() /* ty=Tensor[(8, 15, 12), float64] */;
    %314 = %311.0;
    %315 = %312.0;
    (%313, %314, %315)
  };
  %316() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_785() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %321 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %317 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %318 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %319 = %317.1;
    %320 = %318.0;
    (%319, %320)
  };
  %321() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_3158() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) {
  %332 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) {
    %322 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %323 = @func_2924() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %324 = %322.0;
    %325 = cast(%324, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %326 = reshape(%325, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
    %327 = @func_1585(%326) /* ty=(Tensor[(8, 15, 12), int64],) */;
    %328 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %329 = %323.1;
    %330 = %327.0;
    %331 = %328.2;
    (%324, %329, %330, %331)
  };
  %332() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */
}

def @func_5781() -> Tensor[(8, 15, 12), bool] {
  @func_4549() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_5738(%var_5703: Tensor[(1440), float64], %var_5717: Tensor[(8, 24), float32]) -> (Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), int64], Tensor[(1440), float64], Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 24), float32], Tensor[(8, 15, 12), float64]) {
  %333 = @func_4204() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(2, 12, 9), int16], Tensor[(36, 6), int16]) */;
  %334 = %333.1;
  %335 = cast(%334, dtype="float64") /* ty=Tensor[(2, 12, 9), float64] */;
  %336 = cast(%var_5703, dtype="float64") /* ty=Tensor[(1440), float64] */;
  %337 = reshape(%336, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %338 = @func_1585(%337) /* ty=(Tensor[(8, 15, 12), int64],) */;
  %339 = cast(%334, dtype="float64") /* ty=Tensor[(2, 12, 9), float64] */;
  %340 = cast(%var_5717, dtype="float32") /* ty=Tensor[(8, 24), float32] */;
  %341 = reshape(%340, newshape=[48, 4]) /* ty=Tensor[(48, 4), float32] */;
  %342 = @func_5348(%341) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) */;
  %343 = cosh(%335) /* ty=Tensor[(2, 12, 9), float64] */;
  %344 = %338.0;
  %345 = atanh(%339) /* ty=Tensor[(2, 12, 9), float64] */;
  %346 = %342.1;
  %347 = @func_4512() /* ty=Tensor[(8, 15, 12), float64] */;
  (%343, %344, %var_5703, %345, %346, %var_5717, %347)
}

def @func_3953(%var_3920: Tensor[(2, 16, 1), float32]) -> (Tensor[(2, 16, ?), float64], Tensor[(8, 15, 12), float64]) {
  %348 = cast(%var_3920, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %349 = sqrt(%348) /* ty=Tensor[(2, 16, 1), float32] */;
  %350 = cast(%var_3920, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %351 = shape_of(%349, dtype="int32") /* ty=Tensor[(3), int32] */;
  %352 = cast(%349, dtype="float32") /* ty=Tensor[(2, 16, 1), float32] */;
  %353 = dyn.reshape(%350, %351, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %354 = add(%352, %353) /* ty=Tensor[(2, 16, ?), float32] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(2, 16, ?), float32] */;
  %356 = rsqrt(%355) /* ty=Tensor[(2, 16, ?), float32] */;
  %357 = cast(%356, dtype="float64") /* ty=Tensor[(2, 16, ?), float64] */;
  %358 = erf(%357) /* ty=Tensor[(2, 16, ?), float64] */;
  %359 = cast(%358, dtype="float64") /* ty=Tensor[(2, 16, ?), float64] */;
  %360 = cosh(%359) /* ty=Tensor[(2, 16, ?), float64] */;
  %361 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  (%360, %361)
}

def @func_2562() -> Tensor[(8, 15, 12), float64] {
  @func_2560() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4852(%var_4851: Tensor[(1, 16, 12), float32]) -> (Tensor[(1, 16, 12), float32],) {
  %364 = fn (%var_4842: Tensor[(1, 16, 12), float32]) -> (Tensor[(1, 16, 12), float32],) {
    %362 = cast(%var_4842, dtype="float32") /* ty=Tensor[(1, 16, 12), float32] */;
    %363 = asinh(%362) /* ty=Tensor[(1, 16, 12), float32] */;
    (%363,)
  };
  %364(%var_4851) /* ty=(Tensor[(1, 16, 12), float32],) */
}

def @func_3692(%var_3666: Tensor[(15, 9, 9), uint16]) -> (Tensor[(15, 9, 9), bool], Tensor[(15, 9, 9), float32]) {
  %365 = cast(meta[relay.Constant][13] /* ty=Tensor[(15, 1, 9), uint16] */, dtype="bool") /* ty=Tensor[(15, 1, 9), bool] */;
  %366 = cast(%var_3666, dtype="bool") /* ty=Tensor[(15, 9, 9), bool] */;
  %367 = cast(%var_3666, dtype="float32") /* ty=Tensor[(15, 9, 9), float32] */;
  %368 = less(%365, %366) /* ty=Tensor[(15, 9, 9), bool] */;
  %369 = log10(%367) /* ty=Tensor[(15, 9, 9), float32] */;
  (%368, %369)
}

def @func_4261() -> Tensor[(8, 15, 12), bool] {
  %370 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %370.1
}

def @func_5986() -> (Tensor[(8, 15, 12), float64], Tensor[(605), uint8], Tensor[(8, 15, 12), float64]) {
  %371 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %372 = cast(meta[relay.Constant][14] /* ty=Tensor[(605), int8] */, dtype="int8") /* ty=Tensor[(605), int8] */;
  %373 = reshape(%372, newshape=[11, 5, 11]) /* ty=Tensor[(11, 5, 11), int8] */;
  %374 = @func_5873(%373) /* ty=Tensor[(11, 5, 11), int8] */;
  %375 = cast(%374, dtype="bool") /* ty=Tensor[(11, 5, 11), bool] */;
  %376 = shape_of(meta[relay.Constant][14] /* ty=Tensor[(605), int8] */, dtype="int32") /* ty=Tensor[(1), int32] */;
  %377 = cast(meta[relay.Constant][14] /* ty=Tensor[(605), int8] */, dtype="bool") /* ty=Tensor[(605), bool] */;
  %378 = dyn.reshape(%375, %376, newshape=[]) /* ty=Tensor[(?), bool] */;
  %379 = not_equal(%377, %378) /* ty=Tensor[(605), bool] */;
  %380 = cast(meta[relay.Constant][14] /* ty=Tensor[(605), int8] */, dtype="uint8") /* ty=Tensor[(605), uint8] */;
  %381 = shape_of(%379, dtype="int32") /* ty=Tensor[(1), int32] */;
  %382 = cast(%379, dtype="uint8") /* ty=Tensor[(605), uint8] */;
  %383 = dyn.reshape(%380, %381, newshape=[]) /* ty=Tensor[(?), uint8] */;
  %384 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %385 = %371.1;
  %386 = logical_xor(%382, %383) /* ty=Tensor[(605), uint8] */;
  %387 = %384.1;
  (%385, %386, %387)
}

def @func_6387(%var_6385: Tensor[(1, 4, 12), float32], %var_6386: Tensor[(3, 4, 12), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(?, 4, 12), bool], Tensor[(3, 4, 12), uint64]) {
  @func_6383(%var_6385, %var_6386) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(?, 4, 12), bool], Tensor[(3, 4, 12), uint64]) */
}

def @func_1075(%var_1066: Tensor[(8, 15, 12), float64]) -> Tensor[(8, 15, 12), float32] {
  %388 = @func_814() /* ty=Tensor[(8, 15, 12), float64] */;
  %389 = cast(%var_1066, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  power(%391, %392) /* ty=Tensor[(8, 15, 12), float32] */
}

def @func_4734() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  @func_4732() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */
}

def @func_2527() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %393 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %394 = %393.1;
  %395 = @func_248() /* ty=Tensor[(8, 15, 12), float64] */;
  (%394, %395)
}

def @func_3281() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %396 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %397 = @func_2953() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %398 = %397.1;
  %399 = cast(%398, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %400 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %401 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %402 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %403 = %396.1;
  %404 = sqrt(%399) /* ty=Tensor[(8, 15, 12), float32] */;
  %405 = %400.1;
  %406 = %401.1;
  %407 = %402.2;
  (%403, %404, %405, %406, %407)
}

def @func_75() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_73() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5078() -> Tensor[(8, 15, 12), float64] {
  @func_5076() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4330() -> Tensor[(8, 15, 12), float64] {
  @func_4328() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_2349() -> (Tensor[(8, 15, 12), float64],) {
  %410 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %408 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %409 = %408.0;
    (%409,)
  };
  %410() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_2332(%var_2331: Tensor[(36), float32]) -> (Tensor[(11, 5, 10), float64], Tensor[(3, 12), float32], Tensor[(36), float32]) {
  %418 = fn (%var_2312: Tensor[(36), float32]) -> (Tensor[(11, 5, 10), float64], Tensor[(3, 12), float32], Tensor[(36), float32]) {
    %411 = cast(5.1741f64 /* ty=float64 */, dtype="float64") /* ty=float64 */;
    %412 = cast(meta[relay.Constant][15] /* ty=Tensor[(11, 5, 10), float64] */, dtype="float64") /* ty=Tensor[(11, 5, 10), float64] */;
    %413 = cast(%var_2312, dtype="float32") /* ty=Tensor[(36), float32] */;
    %414 = reshape(%413, newshape=[3, 12]) /* ty=Tensor[(3, 12), float32] */;
    %415 = @func_1756(%414) /* ty=(Tensor[(3, 12), float32],) */;
    %416 = divide(%411, %412) /* ty=Tensor[(11, 5, 10), float64] */;
    %417 = %415.0;
    (%416, %417, %var_2312)
  };
  %418(%var_2331) /* ty=(Tensor[(11, 5, 10), float64], Tensor[(3, 12), float32], Tensor[(36), float32]) */
}

def @func_4282() -> (Tensor[(8, 15, 12), float64], Tensor[(6, 16, 15), bool], Tensor[(240), int8]) {
  %419 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %420 = cast(meta[relay.Constant][16] /* ty=Tensor[(240), int8] */, dtype="int8") /* ty=Tensor[(240), int8] */;
  %421 = %419.1;
  %422 = cast(%421, dtype="int8") /* ty=Tensor[(8, 15, 12), int8] */;
  %423 = reshape(%420, newshape=[1, 16, 15]) /* ty=Tensor[(1, 16, 15), int8] */;
  %424 = reshape(%422, newshape=[6, 16, 15]) /* ty=Tensor[(6, 16, 15), int8] */;
  %425 = @func_2278(%423, %424) /* ty=Tensor[(6, 16, 15), bool] */;
  (%421, %425, meta[relay.Constant][16] /* ty=Tensor[(240), int8] */)
}

def @func_5278() -> (Tensor[(8, 15, 12), float64], Tensor[(10, 12, 9), bool], Tensor[(1080), uint64]) {
  @func_5276() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(10, 12, 9), bool], Tensor[(1080), uint64]) */
}

def @func_941() -> (Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) {
  %426 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %427 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
  %428 = @func_11() /* ty=Tensor[(8, 15, 12), float64] */;
  %429 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %430 = %429.1;
  %431 = cast(%430, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %432 = exp(%431) /* ty=Tensor[(8, 15, 12), float64] */;
  %433 = cast(%432, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %434 = asinh(%433) /* ty=Tensor[(8, 15, 12), float64] */;
  %435 = cast(%432, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
  %436 = shape_of(%434, dtype="int32") /* ty=Tensor[(3), int32] */;
  %437 = cast(%434, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
  %438 = dyn.reshape(%435, %436, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %439 = bitwise_xor(%437, %438) /* ty=Tensor[(8, 15, 12), uint8] */;
  %440 = cast(%439, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %441 = shape_of(%428, dtype="int32") /* ty=Tensor[(3), int32] */;
  %442 = cast(%428, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %443 = dyn.reshape(%440, %441, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %444 = %426.2;
  %445 = %427.0;
  %446 = floor_divide(%442, %443) /* ty=Tensor[(8, 15, 12), float32] */;
  %447 = @func_248() /* ty=Tensor[(8, 15, 12), float64] */;
  (%444, %445, %446, %447)
}

def @func_313() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_2560() -> Tensor[(8, 15, 12), float64] {
  %448 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %448.0
}

def @func_3363() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %449 = @func_2401() /* ty=Tensor[(8, 15, 12), float64] */;
  %450 = @func_2560() /* ty=Tensor[(8, 15, 12), float64] */;
  (%449, %450)
}

def @func_4986() -> (Tensor[(8, 15, 12), float64],) {
  @func_4984() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5583(%var_5569: Tensor[(11, 15, 13), bool]) -> (Tensor[(11, 15, 13), bool], Tensor[(11, 15, 13), int64]) {
  %451 = cast(%var_5569, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %452 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 15, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %453 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 15, 13), bool] */, dtype="bool") /* ty=Tensor[(11, 15, 13), bool] */;
  %454 = dyn.reshape(%451, %452, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %455 = cast(%var_5569, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
  %456 = shape_of(meta[relay.Constant][17] /* ty=Tensor[(11, 15, 13), bool] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %457 = cast(meta[relay.Constant][17] /* ty=Tensor[(11, 15, 13), bool] */, dtype="int64") /* ty=Tensor[(11, 15, 13), int64] */;
  %458 = dyn.reshape(%455, %456, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %459 = logical_or(%453, %454) /* ty=Tensor[(11, 15, 13), bool] */;
  %460 = right_shift(%457, %458) /* ty=Tensor[(11, 15, 13), int64] */;
  (%459, %460)
}

def @func_5670(%var_5668: uint16, %var_5669: Tensor[(9, 13, 5), uint16]) -> (Tensor[(9, 13, 5), uint16], Tensor[(9, 13, 5), int64]) {
  %467 = fn (%var_5651: uint16, %var_5652: Tensor[(9, 13, 5), uint16]) -> (Tensor[(9, 13, 5), uint16], Tensor[(9, 13, 5), int64]) {
    %461 = cast(%var_5651, dtype="uint16") /* ty=uint16 */;
    %462 = cast(%var_5652, dtype="uint16") /* ty=Tensor[(9, 13, 5), uint16] */;
    %463 = cast(%var_5651, dtype="int64") /* ty=int64 */;
    %464 = cast(%var_5652, dtype="int64") /* ty=Tensor[(9, 13, 5), int64] */;
    %465 = bitwise_and(%461, %462) /* ty=Tensor[(9, 13, 5), uint16] */;
    %466 = left_shift(%463, %464) /* ty=Tensor[(9, 13, 5), int64] */;
    (%465, %466)
  };
  %467(%var_5668, %var_5669) /* ty=(Tensor[(9, 13, 5), uint16], Tensor[(9, 13, 5), int64]) */
}

def @func_4550() -> Tensor[(8, 15, 12), bool] {
  %469 = fn () -> Tensor[(8, 15, 12), bool] {
    %468 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
    %468.1
  };
  %469() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_3062(%var_3060: Tensor[(10, 3, 8), uint16], %var_3061: Tensor[(10, 3, 8), uint16]) -> (Tensor[(10, 3, 8), uint16],) {
  %475 = fn (%var_3051: Tensor[(10, 3, 8), uint16], %var_3052: Tensor[(10, 3, 8), uint16]) -> (Tensor[(10, 3, 8), uint16],) {
    %470 = cast(%var_3052, dtype="uint16") /* ty=Tensor[(10, 3, 8), uint16] */;
    %471 = shape_of(%var_3051, dtype="int32") /* ty=Tensor[(3), int32] */;
    %472 = cast(%var_3051, dtype="uint16") /* ty=Tensor[(10, 3, 8), uint16] */;
    %473 = dyn.reshape(%470, %471, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %474 = minimum(%472, %473) /* ty=Tensor[(10, 3, 8), uint16] */;
    (%474,)
  };
  %475(%var_3060, %var_3061) /* ty=(Tensor[(10, 3, 8), uint16],) */
}

def @func_2402() -> Tensor[(8, 15, 12), float64] {
  %476 = fn () -> Tensor[(8, 15, 12), float64] {
    @func_1234() /* ty=Tensor[(8, 15, 12), float64] */
  };
  %476() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_2717() -> (Tensor[(8, 15, 12), float64],) {
  @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_816() -> Tensor[(8, 15, 12), float64] {
  @func_814() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_2041() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) {
  %487 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) {
    %477 = @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %478 = cast(meta[relay.Constant][18] /* ty=Tensor[(416), float64] */, dtype="float64") /* ty=Tensor[(416), float64] */;
    %479 = reshape(%478, newshape=[2, 13, 16]) /* ty=Tensor[(2, 13, 16), float64] */;
    %480 = @func_1445(%479) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(2, 13, 16), float32], Tensor[(2, 13, 16), int16]) */;
    %481 = @func_941() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64]) */;
    %482 = %481.2;
    %483 = cast(%482, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
    %484 = %477.0;
    %485 = %480.0;
    %486 = atan(%483) /* ty=Tensor[(8, 15, 12), float32] */;
    (%484, %485, meta[relay.Constant][18] /* ty=Tensor[(416), float64] */, %486)
  };
  %487() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) */
}

def @func_6134(%var_6126: Tensor[(9, 1, 1), float64]) -> Tensor[(9, 1, 1), float64] {
  %488 = cast(%var_6126, dtype="float64") /* ty=Tensor[(9, 1, 1), float64] */;
  sigmoid(%488) /* ty=Tensor[(9, 1, 1), float64] */
}

def @func_6310(%var_6302: Tensor[(9), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(9, 1, 1), float64], Tensor[(9), float64]) {
  %489 = @func_5601() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %490 = @func_2527() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %491 = cast(%var_6302, dtype="float64") /* ty=Tensor[(9), float64] */;
  %492 = reshape(%491, newshape=[9, 1, 1]) /* ty=Tensor[(9, 1, 1), float64] */;
  %493 = %489.0;
  %494 = %490.1;
  %495 = @func_6134(%492) /* ty=Tensor[(9, 1, 1), float64] */;
  (%493, %494, %495, %var_6302)
}

def @func_4209() -> Tensor[(8, 15, 12), float64] {
  %497 = fn () -> Tensor[(8, 15, 12), float64] {
    %496 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %496.1
  };
  %497() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4205() -> (Tensor[(8, 15, 12), int32], Tensor[(2, 12, 9), int16], Tensor[(36, 6), int16]) {
  %511 = fn () -> (Tensor[(8, 15, 12), int32], Tensor[(2, 12, 9), int16], Tensor[(36, 6), int16]) {
    %498 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %499 = %498.0;
    %500 = cast(meta[relay.Constant][19] /* ty=Tensor[(8, 15, 12), float64] */, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
    %501 = shape_of(%499, dtype="int32") /* ty=Tensor[(3), int32] */;
    %502 = cast(%499, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
    %503 = dyn.reshape(%500, %501, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %504 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
    %505 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 6), int16] */, dtype="int16") /* ty=Tensor[(36, 6), int16] */;
    %506 = reshape(%504, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
    %507 = reshape(%505, newshape=[2, 12, 9]) /* ty=Tensor[(2, 12, 9), int16] */;
    %508 = @func_1896(%506, %507) /* ty=(Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) */;
    %509 = minimum(%502, %503) /* ty=Tensor[(8, 15, 12), int32] */;
    %510 = %508.0;
    (%509, %510, meta[relay.Constant][20] /* ty=Tensor[(36, 6), int16] */)
  };
  %511() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(2, 12, 9), int16], Tensor[(36, 6), int16]) */
}

def @func_2925() -> (Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %520 = fn () -> (Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %512 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %513 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
    %514 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %515 = @func_141() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %516 = %512.1;
    %517 = %513.1;
    %518 = %514.1;
    %519 = %515.1;
    (%516, %517, %518, %519)
  };
  %520() /* ty=(Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_4513() -> Tensor[(8, 15, 12), float64] {
  %522 = fn () -> Tensor[(8, 15, 12), float64] {
    %521 = @func_1730() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %521.0
  };
  %522() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3487() -> (Tensor[(8, 15, 12), float64],) {
  @func_3485() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5633(%var_5631: Tensor[(12, 5, 15), float64], %var_5632: Tensor[(12, 5, 15), float64]) -> (Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), uint32]) {
  @func_5629(%var_5631, %var_5632) /* ty=(Tensor[(12, 5, 15), float64], Tensor[(12, 5, 15), uint32]) */
}

def @func_1784() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_645() -> Tensor[(8, 15, 12), float64] {
  @func_643() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_1588(%var_1586: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), int64],) {
  @func_1585(%var_1586) /* ty=(Tensor[(8, 15, 12), int64],) */
}

def @func_5131() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(12, 14, 13), float32], Tensor[(2184), float32], Tensor[(8, 15, 12), float64]) {
  %523 = @func_4883() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %524 = cast(meta[relay.Constant][21] /* ty=Tensor[(2184), float32] */, dtype="float32") /* ty=Tensor[(2184), float32] */;
  %525 = reshape(%524, newshape=[12, 14, 13]) /* ty=Tensor[(12, 14, 13), float32] */;
  %526 = @func_3103(%525) /* ty=(Tensor[(12, 14, 13), float32],) */;
  %527 = @func_5082() /* ty=Tensor[(8, 15, 12), float64] */;
  %528 = %523.0;
  %529 = %526.0;
  %530 = @func_2401() /* ty=Tensor[(8, 15, 12), float64] */;
  (%527, %528, %529, meta[relay.Constant][21] /* ty=Tensor[(2184), float32] */, %530)
}

def @func_4328() -> Tensor[(8, 15, 12), float64] {
  %531 = @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */;
  %531.1
}

def @func_2239() -> Tensor[(8, 15, 12), bool] {
  %533 = fn () -> Tensor[(8, 15, 12), bool] {
    %532 = @func_588() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */;
    %532.1
  };
  %533() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_3876(%var_3874: Tensor[(5, 14, 1), int16]) -> (Tensor[(5, 14, 1), int16], Tensor[(8, 15, 12), float64]) {
  @func_3873(%var_3874) /* ty=(Tensor[(5, 14, 1), int16], Tensor[(8, 15, 12), float64]) */
}

def @func_73() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %534 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %535 = @func_11() /* ty=Tensor[(8, 15, 12), float64] */;
  %536 = @func_11() /* ty=Tensor[(8, 15, 12), float64] */;
  (%534, %535, %536)
}

def @func_5083() -> Tensor[(8, 15, 12), float64] {
  %537 = fn () -> Tensor[(8, 15, 12), float64] {
    @func_3308() /* ty=Tensor[(8, 15, 12), float64] */
  };
  %537() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_2248(%var_2246: Tensor[(10, 12, 9), uint64]) -> Tensor[(10, 12, 9), bool] {
  @func_2245(%var_2246) /* ty=Tensor[(10, 12, 9), bool] */
}

def @func_249() -> Tensor[(8, 15, 12), float64] {
  %538 = fn () -> Tensor[(8, 15, 12), float64] {
    @func_11() /* ty=Tensor[(8, 15, 12), float64] */
  };
  %538() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3309() -> Tensor[(8, 15, 12), float64] {
  %540 = fn () -> Tensor[(8, 15, 12), float64] {
    %539 = @func_2815() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %539.0
  };
  %540() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3105(%var_3104: Tensor[(12, 14, 13), float32]) -> (Tensor[(12, 14, 13), float32],) {
  %543 = fn (%var_3084: Tensor[(12, 14, 13), float32]) -> (Tensor[(12, 14, 13), float32],) {
    %541 = cast(%var_3084, dtype="float32") /* ty=Tensor[(12, 14, 13), float32] */;
    %542 = acos(%541) /* ty=Tensor[(12, 14, 13), float32] */;
    (%542,)
  };
  %543(%var_3104) /* ty=(Tensor[(12, 14, 13), float32],) */
}

def @func_4762() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_4760() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_3873(%var_3864: Tensor[(5, 14, 1), int16]) -> (Tensor[(5, 14, 1), int16], Tensor[(8, 15, 12), float64]) {
  %544 = cast(meta[relay.Constant][22] /* ty=int16 */, dtype="int16") /* ty=int16 */;
  %545 = cast(%var_3864, dtype="int16") /* ty=Tensor[(5, 14, 1), int16] */;
  %546 = @func_2745() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %547 = logical_xor(%544, %545) /* ty=Tensor[(5, 14, 1), int16] */;
  %548 = %546.0;
  (%547, %548)
}

def @func_4420() -> (Tensor[(8, 15, 12), float64],) {
  @func_4418() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_5433() -> Tensor[(8, 15, 12), float64] {
  %549 = @func_2715() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %549.0
}

def @func_3408(%var_3407: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), uint16], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %563 = fn (%var_3389: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), uint16], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
    %550 = @func_2401() /* ty=Tensor[(8, 15, 12), float64] */;
    %551 = cast(%var_3389, dtype="uint16") /* ty=Tensor[(8, 15, 12), uint16] */;
    %552 = shape_of(%550, dtype="int32") /* ty=Tensor[(3), int32] */;
    %553 = cast(%550, dtype="uint16") /* ty=Tensor[(8, 15, 12), uint16] */;
    %554 = dyn.reshape(%551, %552, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %555 = @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */;
    %556 = cast(%var_3389, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
    %557 = reshape(%556, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float32] */;
    %558 = @func_2972() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %559 = multiply(%553, %554) /* ty=Tensor[(8, 15, 12), uint16] */;
    %560 = %555.0;
    %561 = @func_3031(%557) /* ty=Tensor[(8, 15, 12), bool] */;
    %562 = %558.0;
    (%559, %560, %561, %562)
  };
  %563(%var_3407) /* ty=(Tensor[(8, 15, 12), uint16], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */
}

def @func_2955() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  @func_2953() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */
}

def @func_3283() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_3281() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5524() -> Tensor[(8, 15, 12), float64] {
  %564 = @func_2972() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %564.0
}

def @func_3365() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_3363() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5873(%var_5857: Tensor[(11, 5, 11), int8]) -> Tensor[(11, 5, 11), int8] {
  %565 = cast(meta[relay.Constant][23] /* ty=Tensor[(1, 5, 11), int8] */, dtype="int8") /* ty=Tensor[(1, 5, 11), int8] */;
  %566 = cast(%var_5857, dtype="int8") /* ty=Tensor[(11, 5, 11), int8] */;
  minimum(%565, %566) /* ty=Tensor[(11, 5, 11), int8] */
}

def @func_6156(%var_6154: Tensor[(1, 1, 15), float64]) -> (Tensor[(1, 1, 15), float64], Tensor[(8, 15, 12), float64]) {
  @func_6153(%var_6154) /* ty=(Tensor[(1, 1, 15), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_311() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %567 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  %568 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
  (%567, %568)
}

def @func_3419() -> Tensor[(8, 15, 12), float64] {
  %570 = fn () -> Tensor[(8, 15, 12), float64] {
    %569 = @func_2953() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
    %569.1
  };
  %570() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_2278(%var_2258: Tensor[(1, 16, 15), int8], %var_2259: Tensor[(6, 16, 15), int8]) -> Tensor[(6, 16, 15), bool] {
  %571 = cast(%var_2258, dtype="bool") /* ty=Tensor[(1, 16, 15), bool] */;
  %572 = cast(%var_2259, dtype="bool") /* ty=Tensor[(6, 16, 15), bool] */;
  greater_equal(%571, %572) /* ty=Tensor[(6, 16, 15), bool] */
}

def @func_2642() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) {
  %573 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %574 = %573.1;
  %575 = cast(%574, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
  %576 = reshape(%575, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
  %577 = @func_1585(%576) /* ty=(Tensor[(8, 15, 12), int64],) */;
  %578 = @func_1684() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %579 = %577.0;
  %580 = %578.1;
  (%574, %579, %580)
}

def @func_643() -> Tensor[(8, 15, 12), float64] {
  %581 = @func_109() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
  %581.0
}

def @func_1899(%var_1897: Tensor[(2, 12, 9), int16], %var_1898: Tensor[(2, 12, 9), int16]) -> (Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) {
  %591 = fn (%var_1852: Tensor[(2, 12, 9), int16], %var_1853: Tensor[(2, 12, 9), int16]) -> (Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) {
    %582 = cast(%var_1853, dtype="int16") /* ty=Tensor[(2, 12, 9), int16] */;
    %583 = shape_of(%var_1852, dtype="int32") /* ty=Tensor[(3), int32] */;
    %584 = cast(%var_1852, dtype="int16") /* ty=Tensor[(2, 12, 9), int16] */;
    %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %586 = cast(%var_1852, dtype="float32") /* ty=Tensor[(2, 12, 9), float32] */;
    %587 = tan(%586) /* ty=Tensor[(2, 12, 9), float32] */;
    %588 = cast(%587, dtype="float64") /* ty=Tensor[(2, 12, 9), float64] */;
    %589 = multiply(%584, %585) /* ty=Tensor[(2, 12, 9), int16] */;
    %590 = acosh(%588) /* ty=Tensor[(2, 12, 9), float64] */;
    (%589, %590)
  };
  %591(%var_1897, %var_1898) /* ty=(Tensor[(2, 12, 9), int16], Tensor[(2, 12, 9), float64]) */
}

def @func_843() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %596 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %592 = @func_311() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %593 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %594 = %592.0;
    %595 = %593.0;
    (%594, %595)
  };
  %596() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_4284() -> (Tensor[(8, 15, 12), float64], Tensor[(6, 16, 15), bool], Tensor[(240), int8]) {
  @func_4282() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(6, 16, 15), bool], Tensor[(240), int8]) */
}

def @func_2512() -> (Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) {
  @func_2510() /* ty=(Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) */
}

def @func_2181(%var_2179: Tensor[(5, 5, 1), uint8], %var_2180: Tensor[(5, 5, 11), uint8]) -> (Tensor[(5, 5, 11), uint8],) {
  @func_2177(%var_2179, %var_2180) /* ty=(Tensor[(5, 5, 11), uint8],) */
}

def @func_2953() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %597 = @func_2680() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %598 = @func_2040() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(416), float64], Tensor[(8, 15, 12), float32]) */;
  %599 = %597.0;
  %600 = %598.0;
  (%599, %600)
}

def @func_3033(%var_3032: Tensor[(8, 15, 12), float32]) -> Tensor[(8, 15, 12), bool] {
  %607 = fn (%var_3014: Tensor[(8, 15, 12), float32]) -> Tensor[(8, 15, 12), bool] {
    %601 = @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */;
    %602 = %601.0;
    %603 = cast(%var_3014, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %604 = shape_of(%602, dtype="int32") /* ty=Tensor[(3), int32] */;
    %605 = cast(%602, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %606 = dyn.reshape(%603, %604, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    logical_or(%605, %606) /* ty=Tensor[(8, 15, 12), bool] */
  };
  %607(%var_3032) /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_2680() -> (Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %608 = @func_978() /* ty=(Tensor[(8, 15, 12), bool],) */;
  %609 = @func_1782() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %610 = %608.0;
  %611 = %609.0;
  (%610, %611)
}

def @func_4045(%var_4044: Tensor[(36), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(216), int16], Tensor[(11, 5, 10), float64], Tensor[(36), float32], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) {
  %626 = fn (%var_4025: Tensor[(36), float32]) -> (Tensor[(8, 15, 12), float64], Tensor[(216), int16], Tensor[(11, 5, 10), float64], Tensor[(36), float32], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) {
    %612 = @func_2221() /* ty=(Tensor[(8, 15, 12), float64],) */;
    %613 = @func_2203() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(2, 12, 9), int16], Tensor[(216), int16]) */;
    %614 = cast(%var_4025, dtype="float32") /* ty=Tensor[(36), float32] */;
    %615 = reshape(%614, newshape=[36]) /* ty=Tensor[(36), float32] */;
    %616 = @func_2330(%615) /* ty=(Tensor[(11, 5, 10), float64], Tensor[(3, 12), float32], Tensor[(36), float32]) */;
    %617 = @func_3157() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float32]) */;
    %618 = %612.0;
    %619 = cast(%618, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %620 = reshape(%619, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
    %621 = @func_1324(%620) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %622 = %613.2;
    %623 = %616.0;
    %624 = %617.2;
    %625 = %621.1;
    (%618, %622, %623, %var_4025, %624, %625)
  };
  %626(%var_4044) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(216), int16], Tensor[(11, 5, 10), float64], Tensor[(36), float32], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */
}

def @func_4883() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %627 = @func_2642() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), int64], Tensor[(8, 15, 12), float64]) */;
  %628 = @func_3978() /* ty=(Tensor[(8, 15, 12), float64],) */;
  %629 = %627.2;
  %630 = %628.0;
  (%629, %630)
}

def @func_3850(%var_3846: Tensor[(25, 1), uint8], %var_3847: Tensor[(275), uint8], %var_3848: Tensor[(25, 10), float32], %var_3849: Tensor[(25, 10), bool]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(5, 5, 11), uint8], Tensor[(25, 275), int16], Tensor[(25, 10), float32], Tensor[(25, 10), uint64]) {
  @func_3844(%var_3846, %var_3847, %var_3848, %var_3849) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(5, 5, 11), uint8], Tensor[(25, 275), int16], Tensor[(25, 10), float32], Tensor[(25, 10), uint64]) */
}

def @func_5911() -> (Tensor[(8, 15, 12), float64],) {
  @func_5909() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_2282(%var_2280: Tensor[(1, 16, 15), int8], %var_2281: Tensor[(6, 16, 15), int8]) -> Tensor[(6, 16, 15), bool] {
  @func_2278(%var_2280, %var_2281) /* ty=Tensor[(6, 16, 15), bool] */
}

def @main() -> (Tensor[(8, 15, 12), float64], Tensor[(240, 1), uint16], Tensor[(8, 15, 12), float64], Tensor[(10, 3, 8), float64]) {
  %631 = @func_2955() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
  %632 = cast(meta[relay.Constant][24] /* ty=Tensor[(240, 1), uint16] */, dtype="uint16") /* ty=Tensor[(240, 1), uint16] */;
  %633 = cast(meta[relay.Constant][24] /* ty=Tensor[(240, 1), uint16] */, dtype="uint16") /* ty=Tensor[(240, 1), uint16] */;
  %634 = reshape(%632, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), uint16] */;
  %635 = reshape(%633, newshape=[10, 3, 8]) /* ty=Tensor[(10, 3, 8), uint16] */;
  %636 = @func_3062(%634, %635) /* ty=(Tensor[(10, 3, 8), uint16],) */;
  %637 = %636.0;
  %638 = cast(%637, dtype="float64") /* ty=Tensor[(10, 3, 8), float64] */;
  %639 = %631.1;
  %640 = @func_1526() /* ty=Tensor[(8, 15, 12), float64] */;
  %641 = atanh(%638) /* ty=Tensor[(10, 3, 8), float64] */;
  (%639, meta[relay.Constant][24] /* ty=Tensor[(240, 1), uint16] */, %640, %641)
}

def @func_5742(%var_5740: Tensor[(1440), float64], %var_5741: Tensor[(8, 24), float32]) -> (Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), int64], Tensor[(1440), float64], Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 24), float32], Tensor[(8, 15, 12), float64]) {
  @func_5738(%var_5740, %var_5741) /* ty=(Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), int64], Tensor[(1440), float64], Tensor[(2, 12, 9), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 24), float32], Tensor[(8, 15, 12), float64]) */
}

def @func_5783() -> Tensor[(8, 15, 12), bool] {
  @func_5781() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_1528() -> Tensor[(8, 15, 12), float64] {
  @func_1526() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_3605(%var_3604: Tensor[(9, 2, 9), float32]) -> (Tensor[(9, 2, 9), float32],) {
  %644 = fn (%var_3594: Tensor[(9, 2, 9), float32]) -> (Tensor[(9, 2, 9), float32],) {
    %642 = cast(%var_3594, dtype="float32") /* ty=Tensor[(9, 2, 9), float32] */;
    %643 = cosh(%642) /* ty=Tensor[(9, 2, 9), float32] */;
    (%643,)
  };
  %644(%var_3604) /* ty=(Tensor[(9, 2, 9), float32],) */
}

def @func_1234() -> Tensor[(8, 15, 12), float64] {
  @func_248() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_534(%var_533: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) {
  %653 = fn (%var_517: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) {
    %645 = @func_17() /* ty=Tensor[(8, 15, 12), float64] */;
    %646 = cast(%var_517, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
    %647 = shape_of(%645, dtype="int32") /* ty=Tensor[(3), int32] */;
    %648 = cast(%645, dtype="uint8") /* ty=Tensor[(8, 15, 12), uint8] */;
    %649 = dyn.reshape(%646, %647, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
    %650 = cast(%645, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
    %651 = subtract(%648, %649) /* ty=Tensor[(8, 15, 12), uint8] */;
    %652 = erf(%650) /* ty=Tensor[(8, 15, 12), float32] */;
    (%651, %652)
  };
  %653(%var_533) /* ty=(Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) */
}

def @func_5484(%var_5482: Tensor[(8, 12, 13), int32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(192), float32], Tensor[(8, 15, 12), float32], Tensor[(8, 12, 13), int8], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) {
  @func_5481(%var_5482) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(192), float32], Tensor[(8, 15, 12), float32], Tensor[(8, 12, 13), int8], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) */
}

def @func_1829() -> (Tensor[(8, 15, 12), float32],) {
  %654 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %655 = %654.0;
  %656 = cast(%655, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %657 = sigmoid(%656) /* ty=Tensor[(8, 15, 12), float32] */;
  (%657,)
}

def @func_1479(%var_1478: Tensor[(15, 6, 3), uint16]) -> (Tensor[(15, 6, 3), uint16], Tensor[(15, 6, 3), float64], Tensor[(8, 15, 12), float64]) {
  %665 = fn (%var_1453: Tensor[(15, 6, 3), uint16]) -> (Tensor[(15, 6, 3), uint16], Tensor[(15, 6, 3), float64], Tensor[(8, 15, 12), float64]) {
    %658 = cast(meta[relay.Constant][25] /* ty=Tensor[(15, 1, 3), uint16] */, dtype="uint16") /* ty=Tensor[(15, 1, 3), uint16] */;
    %659 = cast(%var_1453, dtype="uint16") /* ty=Tensor[(15, 6, 3), uint16] */;
    %660 = cast(%var_1453, dtype="float64") /* ty=Tensor[(15, 6, 3), float64] */;
    %661 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %662 = bitwise_xor(%658, %659) /* ty=Tensor[(15, 6, 3), uint16] */;
    %663 = atan(%660) /* ty=Tensor[(15, 6, 3), float64] */;
    %664 = %661.1;
    (%662, %663, %664)
  };
  %665(%var_1478) /* ty=(Tensor[(15, 6, 3), uint16], Tensor[(15, 6, 3), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_1731() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %672 = fn () -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %666 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %667 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %668 = %667.0;
    %669 = cast(%668, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %670 = %666.0;
    %671 = sin(%669) /* ty=Tensor[(8, 15, 12), float64] */;
    (%670, %671)
  };
  %672() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_5602() -> (Tensor[(8, 15, 12), float64],) {
  %675 = fn () -> (Tensor[(8, 15, 12), float64],) {
    %673 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
    %674 = %673.1;
    (%674,)
  };
  %675() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_2972() -> (Tensor[(8, 15, 12), float64],) {
  %676 = @func_814() /* ty=Tensor[(8, 15, 12), float64] */;
  (%676,)
}

def @func_5481(%var_5460: Tensor[(8, 12, 13), int32]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(192), float32], Tensor[(8, 15, 12), float32], Tensor[(8, 12, 13), int8], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool]) {
  %677 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %678 = cast(meta[relay.Constant][26] /* ty=Tensor[(192), float32] */, dtype="float32") /* ty=Tensor[(192), float32] */;
  %679 = reshape(%678, newshape=[48, 4]) /* ty=Tensor[(48, 4), float32] */;
  %680 = @func_5348(%679) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(48, 4), float32], Tensor[(1, 16, 12), float32]) */;
  %681 = @func_1829() /* ty=(Tensor[(8, 15, 12), float32],) */;
  %682 = @func_4399() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 12, 13), int32], Tensor[(1248), float64]) */;
  %683 = %682.1;
  %684 = cast(%var_5460, dtype="int8") /* ty=Tensor[(8, 12, 13), int8] */;
  %685 = shape_of(%683, dtype="int32") /* ty=Tensor[(3), int32] */;
  %686 = cast(%683, dtype="int8") /* ty=Tensor[(8, 12, 13), int8] */;
  %687 = dyn.reshape(%684, %685, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %688 = @func_683() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %689 = %688.0;
  %690 = cast(%689, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %691 = reshape(%690, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float32] */;
  %692 = %677.0;
  %693 = %680.0;
  %694 = %681.0;
  %695 = logical_xor(%686, %687) /* ty=Tensor[(8, 12, 13), int8] */;
  %696 = @func_3031(%691) /* ty=Tensor[(8, 15, 12), bool] */;
  (%692, %693, meta[relay.Constant][26] /* ty=Tensor[(192), float32] */, %694, %695, %689, %696)
}

def @func_6076(%var_6074: Tensor[(12, 11, 15), float64], %var_6075: Tensor[(12, 11, 15), float32]) -> (Tensor[(10, 12, 9), bool], Tensor[(1080), uint64], Tensor[(12, 11, 15), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint8], Tensor[(12, 11, 15), bool]) {
  %726 = fn (%var_6019: Tensor[(12, 11, 15), float64], %var_6067: Tensor[(12, 11, 15), float32]) -> (Tensor[(10, 12, 9), bool], Tensor[(1080), uint64], Tensor[(12, 11, 15), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint8], Tensor[(12, 11, 15), bool]) {
    %697 = cast(meta[relay.Constant][27] /* ty=Tensor[(1080), uint64] */, dtype="uint64") /* ty=Tensor[(1080), uint64] */;
    %698 = reshape(%697, newshape=[10, 12, 9]) /* ty=Tensor[(10, 12, 9), uint64] */;
    %699 = cast(%var_6019, dtype="float64") /* ty=Tensor[(12, 11, 15), float64] */;
    %700 = sin(%699) /* ty=Tensor[(12, 11, 15), float64] */;
    %701 = cast(%700, dtype="float32") /* ty=Tensor[(12, 11, 15), float32] */;
    %702 = @func_5192() /* ty=(Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) */;
    %703 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
    %704 = cast(%703, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %705 = reshape(%704, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float64] */;
    %706 = @func_532(%705) /* ty=(Tensor[(8, 15, 12), uint8], Tensor[(8, 15, 12), float32]) */;
    %707 = cast(%700, dtype="float32") /* ty=Tensor[(12, 11, 15), float32] */;
    %708 = sigmoid(%707) /* ty=Tensor[(12, 11, 15), float32] */;
    %709 = cast(%700, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
    %710 = shape_of(%708, dtype="int32") /* ty=Tensor[(3), int32] */;
    %711 = cast(%708, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
    %712 = dyn.reshape(%709, %710, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %713 = greater(%711, %712) /* ty=Tensor[(12, 11, 15), bool] */;
    %714 = cast(%713, dtype="float32") /* ty=Tensor[(12, 11, 15), float32] */;
    %715 = sinh(%714) /* ty=Tensor[(12, 11, 15), float32] */;
    %716 = cast(%var_6067, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
    %717 = shape_of(%715, dtype="int32") /* ty=Tensor[(3), int32] */;
    %718 = cast(%715, dtype="bool") /* ty=Tensor[(12, 11, 15), bool] */;
    %719 = dyn.reshape(%716, %717, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %720 = @func_2245(%698) /* ty=Tensor[(10, 12, 9), bool] */;
    %721 = atan(%701) /* ty=Tensor[(12, 11, 15), float32] */;
    %722 = %702.0;
    %723 = @func_4512() /* ty=Tensor[(8, 15, 12), float64] */;
    %724 = %706.0;
    %725 = logical_and(%718, %719) /* ty=Tensor[(12, 11, 15), bool] */;
    (%720, meta[relay.Constant][27] /* ty=Tensor[(1080), uint64] */, %721, %722, %723, %703, %724, %725)
  };
  %726(%var_6074, %var_6075) /* ty=(Tensor[(10, 12, 9), bool], Tensor[(1080), uint64], Tensor[(12, 11, 15), float32], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), uint8], Tensor[(12, 11, 15), bool]) */
}

def @func_1968() -> (Tensor[(8, 15, 12), float64],) {
  @func_1966() /* ty=(Tensor[(8, 15, 12), float64],) */
}

def @func_3659() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_3657() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_4885() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  @func_4883() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_436() -> Tensor[(8, 15, 12), bool] {
  %732 = fn () -> Tensor[(8, 15, 12), bool] {
    %727 = @func_248() /* ty=Tensor[(8, 15, 12), float64] */;
    %728 = cast(meta[relay.Constant][28] /* ty=Tensor[(8, 15, 12), float64] */, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %729 = shape_of(%727, dtype="int32") /* ty=Tensor[(3), int32] */;
    %730 = cast(%727, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %731 = dyn.reshape(%728, %729, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    greater(%730, %731) /* ty=Tensor[(8, 15, 12), bool] */
  };
  %732() /* ty=Tensor[(8, 15, 12), bool] */
}

def @func_5303() -> (Tensor[(8, 15, 12), float64],) {
  %733 = @func_2560() /* ty=Tensor[(8, 15, 12), float64] */;
  (%733,)
}

def @func_5076() -> Tensor[(8, 15, 12), float64] {
  @func_3308() /* ty=Tensor[(8, 15, 12), float64] */
}

def @func_4732() -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), bool], Tensor[(8, 15, 12), float64]) {
  %734 = @func_842() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %735 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(8, 15, 12), float32] */;
  %737 = reshape(%736, newshape=[8, 15, 12]) /* ty=Tensor[(8, 15, 12), float32] */;
  %738 = %734.0;
  %739 = @func_3031(%737) /* ty=Tensor[(8, 15, 12), bool] */;
  %740 = @func_2560() /* ty=Tensor[(8, 15, 12), float64] */;
  (%735, %738, %739, %740)
}

def @func_1326(%var_1325: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
  %753 = fn (%var_1281: Tensor[(8, 15, 12), float64]) -> (Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) {
    %741 = @func_494() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float32]) */;
    %742 = @func_814() /* ty=Tensor[(8, 15, 12), float64] */;
    %743 = cast(%var_1281, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %744 = shape_of(%742, dtype="int32") /* ty=Tensor[(3), int32] */;
    %745 = cast(%742, dtype="bool") /* ty=Tensor[(8, 15, 12), bool] */;
    %746 = dyn.reshape(%743, %744, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %747 = greater_equal(%745, %746) /* ty=Tensor[(8, 15, 12), bool] */;
    %748 = cast(%747, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %749 = tan(%748) /* ty=Tensor[(8, 15, 12), float64] */;
    %750 = cast(%749, dtype="float64") /* ty=Tensor[(8, 15, 12), float64] */;
    %751 = %741.0;
    %752 = acos(%750) /* ty=Tensor[(8, 15, 12), float64] */;
    (%751, %752)
  };
  %753(%var_1325) /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */
}

def @func_2510() -> (Tensor[(8, 15, 12), int32], Tensor[(8, 15, 12), float64]) {
  %754 = @func_2238() /* ty=Tensor[(8, 15, 12), bool] */;
  %755 = cast(meta[relay.Constant][29] /* ty=Tensor[(8, 15, 12), bool] */, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
  %756 = shape_of(%754, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%754, dtype="int32") /* ty=Tensor[(8, 15, 12), int32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %759 = logical_xor(%757, %758) /* ty=Tensor[(8, 15, 12), int32] */;
  %760 = @func_1234() /* ty=Tensor[(8, 15, 12), float64] */;
  (%759, %760)
}

def @func_2844(%var_2842: Tensor[(6, 6, 15), float32], %var_2843: Tensor[(6, 6, 15), float32]) -> Tensor[(6, 6, 15), float32] {
  %765 = fn (%var_2836: Tensor[(6, 6, 15), float32], %var_2837: Tensor[(6, 6, 15), float32]) -> Tensor[(6, 6, 15), float32] {
    %761 = cast(%var_2837, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
    %762 = shape_of(%var_2836, dtype="int32") /* ty=Tensor[(3), int32] */;
    %763 = cast(%var_2836, dtype="float32") /* ty=Tensor[(6, 6, 15), float32] */;
    %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%763, %764) /* ty=Tensor[(6, 6, 15), float32] */
  };
  %765(%var_2842, %var_2843) /* ty=Tensor[(6, 6, 15), float32] */
}

def @func_1966() -> (Tensor[(8, 15, 12), float64],) {
  %766 = @func_668() /* ty=(Tensor[(8, 15, 12), float64], Tensor[(8, 15, 12), float64]) */;
  %767 = %766.0;
  (%767,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen69/build/output.py", line 2534, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [12:47:37] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

