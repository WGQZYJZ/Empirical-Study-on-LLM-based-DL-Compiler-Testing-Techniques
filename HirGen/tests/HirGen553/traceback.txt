==========mod==========
#[version = "0.0.5"]
def @func_6784(%var_6740: Tensor[(11, 12, 7), float32], %var_6759: Tensor[(11, 12, 7), float32]) -> (Tensor[(11, 12, 7), int8], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
  %0 = cast(%var_6740, dtype="float32") /* ty=Tensor[(11, 12, 7), float32] */;
  %1 = asin(%0) /* ty=Tensor[(11, 12, 7), float32] */;
  %2 = cast(%var_6759, dtype="int8") /* ty=Tensor[(11, 12, 7), int8] */;
  %3 = shape_of(%1, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%1, dtype="int8") /* ty=Tensor[(11, 12, 7), int8] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %7 = cast(meta[relay.Constant][0] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %8 = reshape(%6, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %9 = reshape(%7, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %10 = bitwise_and(%4, %5) /* ty=Tensor[(11, 12, 7), int8] */;
  %11 = @func_4366(%8, %9) /* ty=Tensor[(15, 11, 14), int64] */;
  (%10, %11, meta[relay.Constant][0] /* ty=Tensor[(2310), int64] */)
}

def @func_11144() -> (Tensor[(7, 7, 6), float32],) {
  %12 = @func_9642() /* ty=Tensor[(7, 7, 6), float32] */;
  (%12,)
}

def @func_6639() -> (Tensor[(13, 12, 10), float32],) {
  %13 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %14 = %13.1;
  (%14,)
}

def @func_4366(%var_4361: Tensor[(15, 11, 14), int64], %var_4362: Tensor[(15, 11, 14), int64]) -> Tensor[(15, 11, 14), int64] {
  %15 = cast(%var_4362, dtype="int64") /* ty=Tensor[(15, 11, 14), int64] */;
  %16 = shape_of(%var_4361, dtype="int32") /* ty=Tensor[(3), int32] */;
  %17 = cast(%var_4361, dtype="int64") /* ty=Tensor[(15, 11, 14), int64] */;
  %18 = dyn.reshape(%15, %16, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  maximum(%17, %18) /* ty=Tensor[(15, 11, 14), int64] */
}

def @func_8380() -> (Tensor[(693), float32],) {
  %19 = @func_6736() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */;
  %20 = %19.2;
  %21 = cast(%20, dtype="float32") /* ty=Tensor[(693), float32] */;
  %22 = atan(%21) /* ty=Tensor[(693), float32] */;
  (%22,)
}

def @func_5738() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) {
  %23 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %24 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  %25 = cast(%24, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %26 = sigmoid(%25) /* ty=Tensor[(7, 7, 6), float32] */;
  %27 = cast(%26, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %28 = reshape(%27, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float64] */;
  %29 = %23.0;
  %30 = @func_5578(%28) /* ty=Tensor[(7, 7, 6), bool] */;
  (%29, %26, %30)
}

def @func_9083() -> (Tensor[(13, 12, 10), float32], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  %31 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
  %32 = cast(meta[relay.Constant][1] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %33 = cast(meta[relay.Constant][1] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %34 = reshape(%32, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %35 = reshape(%33, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %36 = %31.0;
  %37 = @func_3956(%34, %35) /* ty=Tensor[(13, 15, 13), float64] */;
  (%36, %37, meta[relay.Constant][1] /* ty=Tensor[(2535), float64] */)
}

def @func_4855(%var_4838: Tensor[(8, 1, 2), float32]) -> (Tensor[(8, 1, 2), float32], Tensor[(8, 1, 2), float32]) {
  %38 = cast(%var_4838, dtype="float32") /* ty=Tensor[(8, 1, 2), float32] */;
  %39 = cast(%var_4838, dtype="float32") /* ty=Tensor[(8, 1, 2), float32] */;
  %40 = cosh(%38) /* ty=Tensor[(8, 1, 2), float32] */;
  %41 = asin(%39) /* ty=Tensor[(8, 1, 2), float32] */;
  (%40, %41)
}

def @func_9652() -> Tensor[(7, 7, 6), uint64] {
  %42 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %42.0
}

def @func_9960(%var_9942: Tensor[(2535), float64]) -> (uint64, Tensor[(7, 7, 6), float64], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  %43 = @func_6896() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) */;
  %44 = @func_9921() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(315), uint64], Tensor[(5, 1, 13), float64], Tensor[(65), float64]) */;
  %45 = cast(%var_9942, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %46 = cast(%var_9942, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %47 = reshape(%45, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %48 = reshape(%46, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %49 = %43.2;
  %50 = %44.0;
  %51 = @func_3956(%47, %48) /* ty=Tensor[(13, 15, 13), float64] */;
  (%49, %50, %51, %var_9942)
}

def @func_10607(%var_10600: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), uint32],) {
  %52 = @func_7851() /* ty=Tensor[(7, 7, 6), float32] */;
  %53 = cast(%var_10600, dtype="uint32") /* ty=Tensor[(7, 7, 6), uint32] */;
  %54 = shape_of(%52, dtype="int32") /* ty=Tensor[(3), int32] */;
  %55 = cast(%52, dtype="uint32") /* ty=Tensor[(7, 7, 6), uint32] */;
  %56 = dyn.reshape(%53, %54, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %57 = maximum(%55, %56) /* ty=Tensor[(7, 7, 6), uint32] */;
  (%57,)
}

def @func_7495() -> (Tensor[(7, 7, 6), float32],) {
  %58 = @func_6260() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %59 = %58.0;
  (%59,)
}

def @func_5004() -> Tensor[(7, 7, 6), uint64] {
  %60 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  %61 = cast(meta[relay.Constant][2] /* ty=Tensor[(7, 7, 6), float32] */, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
  %62 = shape_of(%60, dtype="int32") /* ty=Tensor[(3), int32] */;
  %63 = cast(%60, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
  %64 = dyn.reshape(%61, %62, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  minimum(%63, %64) /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_10847() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) {
  %65 = @func_6968() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %66 = @func_7851() /* ty=Tensor[(7, 7, 6), float32] */;
  %67 = @func_6920() /* ty=Tensor[(7, 7, 6), float32] */;
  %68 = %65.0;
  (%66, %67, %68)
}

def @func_10289() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) {
  %69 = @func_9394() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) */;
  %70 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %71 = %70.1;
  %72 = cast(%71, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %73 = @func_9394() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) */;
  %74 = %69.1;
  %75 = sinh(%72) /* ty=Tensor[(7, 7, 6), float64] */;
  %76 = %73.1;
  (%74, %75, %76)
}

def @func_11030() -> (Tensor[(7, 7, 6), bool],) {
  %77 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
  %78 = %77.0;
  (%78,)
}

def @func_6553() -> (Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) {
  %79 = @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %80 = cast(meta[relay.Constant][3] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %81 = reshape(%80, newshape=[14, 14, 3]) /* ty=Tensor[(14, 14, 3), float32] */;
  %82 = @func_3801(%81) /* ty=(Tensor[(14, 14, 3), float32],) */;
  %83 = %79.0;
  %84 = %82.0;
  (%83, %84, meta[relay.Constant][3] /* ty=Tensor[(588), float32] */)
}

def @func_8641() -> (Tensor[(7, 7, 6), float64],) {
  %85 = @func_8587() /* ty=(Tensor[(7, 7, 6), float64],) */;
  %86 = %85.0;
  (%86,)
}

def @func_6615(%var_6582: Tensor[(7, 7, 6), float32]) -> Tensor[(7, 7, 6), uint64] {
  %87 = @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %88 = %87.0;
  %89 = cast(%var_6582, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
  %90 = shape_of(%88, dtype="int32") /* ty=Tensor[(3), int32] */;
  %91 = cast(%88, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
  %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  bitwise_xor(%91, %92) /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_4012(%var_3976: Tensor[(8, 9, 13), float64], %var_3990: Tensor[(588), float32], %var_4004: Tensor[(180), float32]) -> (Tensor[(8, 9, 13), float64], Tensor[(14, 14, 3), float32], Tensor[(588), float32], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) {
  %93 = cast(%var_3976, dtype="float64") /* ty=Tensor[(8, 9, 13), float64] */;
  %94 = cast(%var_3990, dtype="float32") /* ty=Tensor[(588), float32] */;
  %95 = reshape(%94, newshape=[14, 14, 3]) /* ty=Tensor[(14, 14, 3), float32] */;
  %96 = @func_3801(%95) /* ty=(Tensor[(14, 14, 3), float32],) */;
  %97 = cast(%var_4004, dtype="float32") /* ty=Tensor[(180), float32] */;
  %98 = reshape(%97, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %99 = @func_357(%98) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %100 = acosh(%93) /* ty=Tensor[(8, 9, 13), float64] */;
  %101 = %96.0;
  %102 = %99.0;
  (%100, %101, %var_3990, %102, %var_4004)
}

def @func_6798() -> Tensor[(14, 14, 3), float32] {
  %103 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
  %103.1
}

def @func_827(%var_823: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), float64],) {
  %104 = cast(%var_823, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %105 = sinh(%104) /* ty=Tensor[(3, 4, 5), float64] */;
  (%105,)
}

def @func_6736() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) {
  %106 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %107 = @func_5754() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %108 = @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */;
  %109 = %108.2;
  %110 = cast(%109, dtype="float64") /* ty=Tensor[(693), float64] */;
  %111 = acosh(%110) /* ty=Tensor[(693), float64] */;
  %112 = cast(%109, dtype="float64") /* ty=Tensor[(693), float64] */;
  %113 = log2(%112) /* ty=Tensor[(693), float64] */;
  %114 = cast(%113, dtype="int32") /* ty=Tensor[(693), int32] */;
  %115 = shape_of(%111, dtype="int32") /* ty=Tensor[(1), int32] */;
  %116 = cast(%111, dtype="int32") /* ty=Tensor[(693), int32] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?), int32] */;
  %118 = cast(meta[relay.Constant][4] /* ty=Tensor[(693), float64] */, dtype="float32") /* ty=Tensor[(693), float32] */;
  %119 = shape_of(%111, dtype="int32") /* ty=Tensor[(1), int32] */;
  %120 = cast(%111, dtype="float32") /* ty=Tensor[(693), float32] */;
  %121 = dyn.reshape(%118, %119, newshape=[]) /* ty=Tensor[(?), float32] */;
  %122 = %106.0;
  %123 = %107.0;
  %124 = left_shift(%116, %117) /* ty=Tensor[(693), int32] */;
  %125 = divide(%120, %121) /* ty=Tensor[(693), float32] */;
  (%122, %123, %124, %125)
}

def @func_9136(%var_9097: Tensor[(78), float32]) -> (Tensor[(7, 7, 6), bool], Tensor[(15, 11, 14), int64], Tensor[(2310), int64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(200), float32], Tensor[(7, 7, 6), float64], Tensor[(2, 10, 10), bool], Tensor[(7, 7, 6), uint64]) {
  %126 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %127 = cast(meta[relay.Constant][5] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %128 = cast(meta[relay.Constant][5] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %129 = reshape(%127, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %130 = reshape(%128, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %131 = cast(%var_9097, dtype="float32") /* ty=Tensor[(78), float32] */;
  %132 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %133 = reshape(%131, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float32] */;
  %134 = reshape(%132, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %135 = @func_2406(%133, %134) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) */;
  %136 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %137 = cast(meta[relay.Constant][6] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %138 = reshape(%136, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %139 = reshape(%137, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %140 = @func_114(%138, %139) /* ty=(Tensor[(2, 10, 10), bool],) */;
  %141 = %126.2;
  %142 = @func_4366(%129, %130) /* ty=Tensor[(15, 11, 14), int64] */;
  %143 = %135.0;
  %144 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  %145 = %140.0;
  %146 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  (%141, %142, meta[relay.Constant][5] /* ty=Tensor[(2310), int64] */, %143, %var_9097, meta[relay.Constant][6] /* ty=Tensor[(200), float32] */, %144, %145, %146)
}

def @func_7241(%var_7220: uint64, %var_7221: Tensor[(315), uint64]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(7, 7, 6), float64]) {
  %147 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %148 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %149 = cast(%var_7220, dtype="uint64") /* ty=uint64 */;
  %150 = cast(%var_7221, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %151 = reshape(%149, newshape=[]) /* ty=uint64 */;
  %152 = reshape(%150, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %153 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %154 = %147.0;
  %155 = %148.0;
  %156 = @func_5125(%151, %152) /* ty=Tensor[(15, 3, 7), bool] */;
  %157 = %153.1;
  (%154, %155, %156, %var_7220, %var_7221, %157)
}

def @func_8256(%var_8188: Tensor[(200), float32], %var_8200: Tensor[(936), float64], %var_8201: Tensor[(588, 1), float32]) -> (Tensor[(7, 7, 6), bool], Tensor[(200), float32], Tensor[(180), float32], Tensor[(936), float64], Tensor[(588, 1), float32], Tensor[(7, 7, 6), uint64], Tensor[(2, 10, 10), bool]) {
  %158 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
  %159 = cast(%var_8200, dtype="float64") /* ty=Tensor[(936), float64] */;
  %160 = cast(%var_8201, dtype="float32") /* ty=Tensor[(588, 1), float32] */;
  %161 = reshape(%159, newshape=[936]) /* ty=Tensor[(936), float64] */;
  %162 = reshape(%160, newshape=[294, 2]) /* ty=Tensor[(294, 2), float32] */;
  %163 = @func_5243(%161, %162) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(588), float32], Tensor[(936), float64], Tensor[(294, 2), float32], Tensor[(180), float32]) */;
  %164 = %158.0;
  %165 = cast(%164, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %166 = reshape(%165, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %167 = cast(%var_8188, dtype="float32") /* ty=Tensor[(200), float32] */;
  %168 = cast(%var_8188, dtype="float32") /* ty=Tensor[(200), float32] */;
  %169 = reshape(%167, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %170 = reshape(%168, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %171 = @func_114(%169, %170) /* ty=(Tensor[(2, 10, 10), bool],) */;
  %172 = %171.0;
  %173 = cast(%172, dtype="float64") /* ty=Tensor[(2, 10, 10), float64] */;
  %174 = erf(%173) /* ty=Tensor[(2, 10, 10), float64] */;
  %175 = cast(%174, dtype="float32") /* ty=Tensor[(2, 10, 10), float32] */;
  %176 = cos(%175) /* ty=Tensor[(2, 10, 10), float32] */;
  %177 = cast(%176, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %178 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %179 = cast(%174, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %180 = dyn.reshape(%177, %178, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %181 = %163.4;
  %182 = @func_6615(%166) /* ty=Tensor[(7, 7, 6), uint64] */;
  %183 = logical_or(%179, %180) /* ty=Tensor[(2, 10, 10), bool] */;
  (%164, %var_8188, %181, %var_8200, %var_8201, %182, %183)
}

def @func_11195() -> (Tensor[(13, 12, 10), float64], Tensor[(6, 260), float32]) {
  %184 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
  %185 = %184.0;
  %186 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  %187 = cast(%186, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %188 = shape_of(%185, dtype="int32") /* ty=Tensor[(3), int32] */;
  %189 = cast(%185, dtype="float64") /* ty=Tensor[(13, 12, 10), float64] */;
  %190 = dyn.reshape(%187, %188, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %191 = cast(%186, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %192 = exp(%191) /* ty=Tensor[(6, 260), float32] */;
  %193 = cast(%186, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %194 = shape_of(%192, dtype="int32") /* ty=Tensor[(2), int32] */;
  %195 = cast(%192, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %197 = divide(%195, %196) /* ty=Tensor[(6, 260), float64] */;
  %198 = cast(%197, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %199 = floor_divide(%189, %190) /* ty=Tensor[(13, 12, 10), float64] */;
  %200 = sqrt(%198) /* ty=Tensor[(6, 260), float32] */;
  (%199, %200)
}

def @func_11501(%var_11483: Tensor[(1, 7, 7), float64]) -> (Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(1, 7, 7), float32]) {
  %201 = cast(meta[relay.Constant][7] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %202 = reshape(%201, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), float32] */;
  %203 = @func_1766(%202) /* ty=(Tensor[(1, 13, 15), float32],) */;
  %204 = cast(%var_11483, dtype="float64") /* ty=Tensor[(1, 7, 7), float64] */;
  %205 = log10(%204) /* ty=Tensor[(1, 7, 7), float64] */;
  %206 = cast(%205, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
  %207 = %203.0;
  %208 = sigmoid(%206) /* ty=Tensor[(1, 7, 7), float32] */;
  (%207, meta[relay.Constant][7] /* ty=Tensor[(195), float32] */, %208)
}

def @func_10945(%var_10926: Tensor[(12, 7, 11), float64]) -> (Tensor[(12, 7, 11), float64],) {
  %209 = cast(%var_10926, dtype="float64") /* ty=Tensor[(12, 7, 11), float64] */;
  %210 = sinh(%209) /* ty=Tensor[(12, 7, 11), float64] */;
  (%210,)
}

def @func_10095(%var_10079: Tensor[(13, 16, 3), float32], %var_10080: Tensor[(13, 16, 3), float32]) -> (Tensor[(13, 16, 3), bool],) {
  %211 = cast(%var_10080, dtype="bool") /* ty=Tensor[(13, 16, 3), bool] */;
  %212 = shape_of(%var_10079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %213 = cast(%var_10079, dtype="bool") /* ty=Tensor[(13, 16, 3), bool] */;
  %214 = dyn.reshape(%211, %212, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %215 = greater_equal(%213, %214) /* ty=Tensor[(13, 16, 3), bool] */;
  (%215,)
}

def @func_4700(%var_4693: Tensor[(13, 12, 10), float32]) -> Tensor[(13, 12, 10), float32] {
  %216 = cast(%var_4693, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  acosh(%216) /* ty=Tensor[(13, 12, 10), float32] */
}

def @func_4924() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) {
  %217 = cast(meta[relay.Constant][8] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %218 = cast(meta[relay.Constant][9] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
  %219 = reshape(%218, newshape=[7, 7]) /* ty=Tensor[(7, 7), float64] */;
  %220 = @func_2447(%219) /* ty=(Tensor[(7, 7), float64],) */;
  %221 = cast(meta[relay.Constant][10] /* ty=Tensor[(6, 260), float32] */, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %222 = reshape(%221, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
  %223 = acos(%217) /* ty=Tensor[(7, 7, 6), float32] */;
  %224 = %220.0;
  %225 = @func_4700(%222) /* ty=Tensor[(13, 12, 10), float32] */;
  (%223, %224, meta[relay.Constant][9] /* ty=Tensor[(1, 49), float64] */, %225, meta[relay.Constant][10] /* ty=Tensor[(6, 260), float32] */)
}

def @func_5696() -> Tensor[(7, 7, 6), float64] {
  @func_5496() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_3956(%var_3951: Tensor[(13, 15, 13), float64], %var_3952: Tensor[(13, 15, 13), float64]) -> Tensor[(13, 15, 13), float64] {
  %226 = cast(%var_3952, dtype="float64") /* ty=Tensor[(13, 15, 13), float64] */;
  %227 = shape_of(%var_3951, dtype="int32") /* ty=Tensor[(3), int32] */;
  %228 = cast(%var_3951, dtype="float64") /* ty=Tensor[(13, 15, 13), float64] */;
  %229 = dyn.reshape(%226, %227, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%228, %229) /* ty=Tensor[(13, 15, 13), float64] */
}

def @func_5389() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) {
  %230 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %231 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %232 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  %233 = cast(%232, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %234 = log2(%233) /* ty=Tensor[(7, 7, 6), float64] */;
  %235 = cast(%234, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %236 = %230.0;
  %237 = %231.1;
  %238 = exp(%235) /* ty=Tensor[(7, 7, 6), float64] */;
  (%236, %237, %238)
}

def @func_5628(%var_5620: Tensor[(3, 4, 15), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(3, 4, 15), bool]) {
  %239 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %240 = cast(meta[relay.Constant][11] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %241 = reshape(%240, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %242 = @func_357(%241) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %243 = %242.0;
  %244 = cast(%var_5620, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %245 = shape_of(%243, dtype="int32") /* ty=Tensor[(3), int32] */;
  %246 = cast(%243, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %247 = dyn.reshape(%244, %245, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %248 = %239.1;
  %249 = logical_and(%246, %247) /* ty=Tensor[(3, 4, 15), bool] */;
  (%248, meta[relay.Constant][11] /* ty=Tensor[(180), float32] */, %249)
}

def @func_5849() -> (Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) {
  %250 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %251 = cast(meta[relay.Constant][12] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %252 = reshape(%251, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float64] */;
  %253 = @func_2323(%252) /* ty=(Tensor[(9, 7, 11), float64],) */;
  %254 = %250.0;
  %255 = %253.0;
  (%254, %255, meta[relay.Constant][12] /* ty=Tensor[(693), float64] */)
}

def @func_5125(%var_5116: uint64, %var_5117: Tensor[(15, 3, 7), uint64]) -> Tensor[(15, 3, 7), bool] {
  %256 = cast(%var_5116, dtype="bool") /* ty=bool */;
  %257 = cast(%var_5117, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  not_equal(%256, %257) /* ty=Tensor[(15, 3, 7), bool] */
}

def @func_964(%var_955: uint16, %var_956: Tensor[(11, 7, 7), uint16]) -> (Tensor[(11, 7, 7), bool], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) {
  %258 = cast(%var_955, dtype="bool") /* ty=bool */;
  %259 = cast(%var_956, dtype="bool") /* ty=Tensor[(11, 7, 7), bool] */;
  %260 = cast(meta[relay.Constant][13] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %261 = reshape(%260, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %262 = @func_357(%261) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %263 = greater_equal(%258, %259) /* ty=Tensor[(11, 7, 7), bool] */;
  %264 = %262.0;
  (%263, %264, meta[relay.Constant][13] /* ty=Tensor[(180), float32] */)
}

def @func_2447(%var_2428: Tensor[(7, 7), float64]) -> (Tensor[(7, 7), float64],) {
  %265 = cast(%var_2428, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
  %266 = atanh(%265) /* ty=Tensor[(7, 7), float64] */;
  (%266,)
}

def @func_6995() -> Tensor[(7, 7, 6), uint64] {
  %267 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %267.0
}

def @func_9712() -> Tensor[(315), uint64] {
  %268 = @func_8984() /* ty=(Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) */;
  %268.1
}

def @func_11086() -> (Tensor[(7, 7, 6), uint64],) {
  %269 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  (%269,)
}

def @func_9753() -> (Tensor[(315), uint64],) {
  %270 = @func_9712() /* ty=Tensor[(315), uint64] */;
  (%270,)
}

def @func_6920() -> Tensor[(7, 7, 6), float32] {
  @func_4944() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_10591(%var_10429: Tensor[(24, 26), float32], %var_10438: Tensor[(525), uint32], %var_10444: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(13, 16, 3), bool], Tensor[(24, 26), float32], Tensor[(7, 5, 15), int16], Tensor[(525), uint32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 5, 15), uint32], Tensor[(7, 7, 6), float64], Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(7, 7, 6), float64]) {
  %271 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %272 = cast(%var_10429, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %273 = cast(%var_10429, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %274 = reshape(%272, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), float32] */;
  %275 = reshape(%273, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), float32] */;
  %276 = @func_10095(%274, %275) /* ty=(Tensor[(13, 16, 3), bool],) */;
  %277 = cast(%var_10438, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %278 = cast(%var_10438, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %279 = cast(%var_10438, dtype="float64") /* ty=Tensor[(525), float64] */;
  %280 = reshape(%277, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %281 = reshape(%278, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %282 = reshape(%279, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), float64] */;
  %283 = @func_8442(%280, %281, %282) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */;
  %284 = @func_8984() /* ty=(Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) */;
  %285 = cast(%var_10444, dtype="float32") /* ty=Tensor[(180), float32] */;
  %286 = reshape(%285, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %287 = @func_10193(%286) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(2, 2, 4), uint8], Tensor[(1, 16), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32]) */;
  %288 = %284.2;
  %289 = cast(%288, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %290 = reshape(%289, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float64] */;
  %291 = @func_8036() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) */;
  %292 = @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %293 = cast(%var_10438, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %294 = %283.1;
  %295 = cast(%294, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
  %296 = cast(%294, dtype="float64") /* ty=Tensor[(7, 5, 15), float64] */;
  %297 = reshape(%293, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %298 = reshape(%295, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %299 = reshape(%296, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), float64] */;
  %300 = @func_8442(%297, %298, %299) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */;
  %301 = cast(%var_10444, dtype="float32") /* ty=Tensor[(180), float32] */;
  %302 = reshape(%301, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %303 = @func_9900(%302) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(13, 12, 10), float32]) */;
  %304 = cast(meta[relay.Constant][14] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %305 = reshape(%304, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), float32] */;
  %306 = @func_1766(%305) /* ty=(Tensor[(1, 13, 15), float32],) */;
  %307 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %308 = %271.1;
  %309 = %276.0;
  %310 = %287.3;
  %311 = @func_5578(%290) /* ty=Tensor[(7, 7, 6), bool] */;
  %312 = @func_9827() /* ty=Tensor[(7, 7, 6), uint64] */;
  %313 = %291.0;
  %314 = %292.0;
  %315 = %300.0;
  %316 = %303.1;
  %317 = %306.0;
  %318 = %307.1;
  (%308, %309, %var_10429, %294, %var_10438, %288, %310, %var_10444, %311, %312, %313, %314, %315, %316, %317, meta[relay.Constant][14] /* ty=Tensor[(195), float32] */, %318)
}

def @func_9574() -> (Tensor[(7, 7, 6), float32],) {
  %319 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %320 = %319.0;
  (%320,)
}

def @func_8538() -> (Tensor[(7, 7, 6), float32], Tensor[(693), float32]) {
  %321 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %322 = @func_8380() /* ty=(Tensor[(693), float32],) */;
  %323 = %321.1;
  %324 = %322.0;
  (%323, %324)
}

def @func_10193(%var_10181: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(2, 2, 4), uint8], Tensor[(1, 16), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32]) {
  %325 = cast(meta[relay.Constant][15] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
  %326 = reshape(%325, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float64] */;
  %327 = cast(%var_10181, dtype="float32") /* ty=Tensor[(180), float32] */;
  %328 = reshape(%327, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %329 = @func_7673(%328) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */;
  %330 = @func_6376() /* ty=Tensor[(7, 7, 6), float64] */;
  %331 = @func_9785(%326) /* ty=Tensor[(2, 2, 4), uint8] */;
  %332 = %329.3;
  (%330, %331, meta[relay.Constant][15] /* ty=Tensor[(1, 16), float64] */, %332, %var_10181)
}

def @func_5903() -> (Tensor[(7, 7, 6), float32],) {
  %333 = @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */;
  %334 = %333.0;
  (%334,)
}

def @func_9394() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) {
  %335 = @func_6968() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %336 = %335.0;
  %337 = cast(%336, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %338 = reshape(%337, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
  %339 = @func_6615(%338) /* ty=Tensor[(7, 7, 6), uint64] */;
  (%336, %339)
}

def @func_7137(%var_7123: Tensor[(693), int32]) -> (Tensor[(693), bool],) {
  %340 = @func_6736() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */;
  %341 = %340.2;
  %342 = cast(%var_7123, dtype="bool") /* ty=Tensor[(693), bool] */;
  %343 = shape_of(%341, dtype="int32") /* ty=Tensor[(1), int32] */;
  %344 = cast(%341, dtype="bool") /* ty=Tensor[(693), bool] */;
  %345 = dyn.reshape(%342, %343, newshape=[]) /* ty=Tensor[(?), bool] */;
  %346 = logical_or(%344, %345) /* ty=Tensor[(693), bool] */;
  (%346,)
}

def @func_11215() -> Tensor[(7, 7, 6), uint64] {
  %347 = @func_10289() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) */;
  %347.0
}

def @func_1766(%var_1761: Tensor[(1, 13, 15), float32]) -> (Tensor[(1, 13, 15), float32],) {
  %348 = cast(%var_1761, dtype="float32") /* ty=Tensor[(1, 13, 15), float32] */;
  %349 = exp(%348) /* ty=Tensor[(1, 13, 15), float32] */;
  (%349,)
}

def @func_11253() -> (Tensor[(7, 7, 6), float32],) {
  %350 = @func_7851() /* ty=Tensor[(7, 7, 6), float32] */;
  (%350,)
}

def @func_5517() -> (Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) {
  %351 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
  %352 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %353 = %351.3;
  (%352, %353)
}

def @func_6260() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) {
  %354 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %355 = cast(%354, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %356 = asinh(%355) /* ty=Tensor[(7, 7, 6), float32] */;
  %357 = @func_5696() /* ty=Tensor[(7, 7, 6), float64] */;
  (%356, %357)
}

def @func_8984() -> (Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) {
  %358 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %359 = cast(meta[relay.Constant][17] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %360 = reshape(%358, newshape=[]) /* ty=uint64 */;
  %361 = reshape(%359, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %362 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
  %363 = %362.0;
  %364 = cast(%363, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %365 = cast(meta[relay.Constant][16] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
  %366 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
  %367 = @func_5125(%360, %361) /* ty=Tensor[(15, 3, 7), bool] */;
  %368 = floor_divide(%364, %365) /* ty=Tensor[(7, 7, 6), float64] */;
  %369 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  %370 = %366.0;
  %371 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  (%367, meta[relay.Constant][17] /* ty=Tensor[(315), uint64] */, %368, %369, %370, %371)
}

def @func_6192() -> Tensor[(7, 7, 6), uint64] {
  @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_10735(%var_10670: Tensor[(14, 14, 3), float32]) -> (Tensor[(14, 14, 3), int8], Tensor[(13, 12, 10), float32], Tensor[(1560), float32], Tensor[(7, 7, 6), float64], Tensor[(14, 14, 3), int64]) {
  %372 = @func_6798() /* ty=Tensor[(14, 14, 3), float32] */;
  %373 = cast(%var_10670, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %374 = shape_of(%372, dtype="int32") /* ty=Tensor[(3), int32] */;
  %375 = cast(%372, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %376 = dyn.reshape(%373, %374, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %377 = subtract(%375, %376) /* ty=Tensor[(14, 14, 3), float64] */;
  %378 = cast(%var_10670, dtype="int8") /* ty=Tensor[(14, 14, 3), int8] */;
  %379 = shape_of(%377, dtype="int32") /* ty=Tensor[(3), int32] */;
  %380 = cast(%377, dtype="int8") /* ty=Tensor[(14, 14, 3), int8] */;
  %381 = dyn.reshape(%378, %379, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %382 = cast(meta[relay.Constant][18] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %383 = reshape(%382, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
  %384 = @func_8036() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) */;
  %385 = cast(%377, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %386 = sigmoid(%385) /* ty=Tensor[(14, 14, 3), float64] */;
  %387 = cast(%377, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %388 = shape_of(%386, dtype="int32") /* ty=Tensor[(3), int32] */;
  %389 = cast(%386, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %390 = dyn.reshape(%387, %388, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %391 = power(%389, %390) /* ty=Tensor[(14, 14, 3), float64] */;
  %392 = cast(%var_10670, dtype="int64") /* ty=Tensor[(14, 14, 3), int64] */;
  %393 = shape_of(%391, dtype="int32") /* ty=Tensor[(3), int32] */;
  %394 = cast(%391, dtype="int64") /* ty=Tensor[(14, 14, 3), int64] */;
  %395 = dyn.reshape(%392, %393, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %396 = right_shift(%380, %381) /* ty=Tensor[(14, 14, 3), int8] */;
  %397 = @func_4700(%383) /* ty=Tensor[(13, 12, 10), float32] */;
  %398 = %384.0;
  %399 = minimum(%394, %395) /* ty=Tensor[(14, 14, 3), int64] */;
  (%396, %397, meta[relay.Constant][18] /* ty=Tensor[(1560), float32] */, %398, %399)
}

def @func_9301() -> (Tensor[(7, 7, 6), float64], Tensor[(15, 11, 14), int64], Tensor[(1, 2310), int64], Tensor[(7, 7, 6), float64]) {
  %400 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %401 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 2310), int64] */, dtype="int64") /* ty=Tensor[(1, 2310), int64] */;
  %402 = cast(meta[relay.Constant][19] /* ty=Tensor[(1, 2310), int64] */, dtype="int64") /* ty=Tensor[(1, 2310), int64] */;
  %403 = reshape(%401, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %404 = reshape(%402, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %405 = %400.1;
  %406 = @func_4366(%403, %404) /* ty=Tensor[(15, 11, 14), int64] */;
  %407 = @func_6376() /* ty=Tensor[(7, 7, 6), float64] */;
  (%405, %406, meta[relay.Constant][19] /* ty=Tensor[(1, 2310), int64] */, %407)
}

def @func_7986(%var_7960: Tensor[(5, 63), uint64]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) {
  %408 = @func_5903() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %409 = @func_5903() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %410 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %411 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 130), float32] */, dtype="float32") /* ty=Tensor[(12, 130), float32] */;
  %412 = cast(%var_7960, dtype="uint64") /* ty=Tensor[(5, 63), uint64] */;
  %413 = reshape(%411, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
  %414 = reshape(%412, newshape=[315]) /* ty=Tensor[(315), uint64] */;
  %415 = @func_5323(%413, %414) /* ty=(Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) */;
  %416 = %415.5;
  %417 = cast(%416, dtype="bool") /* ty=Tensor[(13, 12, 10), bool] */;
  %418 = shape_of(meta[relay.Constant][20] /* ty=Tensor[(12, 130), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
  %419 = cast(meta[relay.Constant][20] /* ty=Tensor[(12, 130), float32] */, dtype="bool") /* ty=Tensor[(12, 130), bool] */;
  %420 = dyn.reshape(%417, %418, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %421 = greater(%419, %420) /* ty=Tensor[(12, 130), bool] */;
  %422 = cast(%421, dtype="float32") /* ty=Tensor[(12, 130), float32] */;
  %423 = %408.0;
  %424 = %409.0;
  %425 = %410.0;
  %426 = atanh(%422) /* ty=Tensor[(12, 130), float32] */;
  (%423, %424, %425, %var_7960, %426)
}

def @func_11658(%var_11633: Tensor[(231, 3), float64], %var_11644: Tensor[(30, 6), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(231, 3), float64], Tensor[(14, 14, 3), float32], Tensor[(180), float32], Tensor[(30, 6), float32]) {
  %427 = cast(%var_11633, dtype="float64") /* ty=Tensor[(231, 3), float64] */;
  %428 = reshape(%427, newshape=[693, 1]) /* ty=Tensor[(693, 1), float64] */;
  %429 = @func_7061(%428) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693, 1), float64], Tensor[(7, 7, 6), uint64], Tensor[(9, 7, 11), float32]) */;
  %430 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
  %431 = %430.1;
  %432 = cast(%431, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
  %433 = erf(%432) /* ty=Tensor[(14, 14, 3), float32] */;
  %434 = cast(%433, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
  %435 = cast(%var_11644, dtype="float32") /* ty=Tensor[(30, 6), float32] */;
  %436 = reshape(%435, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %437 = @func_7673(%436) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */;
  %438 = %429.0;
  %439 = log(%434) /* ty=Tensor[(14, 14, 3), float32] */;
  %440 = %437.2;
  (%438, %var_11633, %439, %440, %var_11644)
}

def @main() -> Tensor[(3, 12, 8), uint64] {
  %441 = cast(meta[relay.Constant][22] /* ty=Tensor[(3, 12, 8), uint64] */, dtype="uint64") /* ty=Tensor[(3, 12, 8), uint64] */;
  %442 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(3, 12, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %443 = cast(meta[relay.Constant][21] /* ty=Tensor[(3, 12, 8), uint64] */, dtype="uint64") /* ty=Tensor[(3, 12, 8), uint64] */;
  %444 = dyn.reshape(%441, %442, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%443, %444) /* ty=Tensor[(3, 12, 8), uint64] */
}

def @func_5496() -> Tensor[(7, 7, 6), float64] {
  %445 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  %446 = cast(%445, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  sqrt(%446) /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_6376() -> Tensor[(7, 7, 6), float64] {
  @func_6144() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_6280() -> (Tensor[(7, 7, 6), float64],) {
  %447 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  %448 = cast(%447, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %449 = log10(%448) /* ty=Tensor[(7, 7, 6), float64] */;
  (%449,)
}

def @func_9410() -> Tensor[(7, 7, 6), float64] {
  %450 = @func_9064() /* ty=(Tensor[(7, 7, 6), float64],) */;
  %450.0
}

def @func_114(%var_97: Tensor[(2, 10, 10), float32], %var_108: Tensor[(2, 10, 10), float32]) -> (Tensor[(2, 10, 10), bool],) {
  %451 = cast(%var_97, dtype="float32") /* ty=Tensor[(2, 10, 10), float32] */;
  %452 = asinh(%451) /* ty=Tensor[(2, 10, 10), float32] */;
  %453 = cast(%var_108, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %454 = shape_of(%452, dtype="int32") /* ty=Tensor[(3), int32] */;
  %455 = cast(%452, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
  %456 = dyn.reshape(%453, %454, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %457 = greater(%455, %456) /* ty=Tensor[(2, 10, 10), bool] */;
  (%457,)
}

def @func_11291() -> (Tensor[(693), float32], Tensor[(7, 7, 6), float64]) {
  %458 = @func_8538() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693), float32]) */;
  %459 = @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %460 = %458.1;
  %461 = %459.1;
  (%460, %461)
}

def @func_5754() -> (Tensor[(7, 7, 6), float32],) {
  %462 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %463 = %462.0;
  (%463,)
}

def @func_2323(%var_2318: Tensor[(9, 7, 11), float64]) -> (Tensor[(9, 7, 11), float64],) {
  %464 = cast(%var_2318, dtype="float64") /* ty=Tensor[(9, 7, 11), float64] */;
  %465 = asinh(%464) /* ty=Tensor[(9, 7, 11), float64] */;
  (%465,)
}

def @func_7061(%var_7046: Tensor[(693, 1), float64]) -> (Tensor[(7, 7, 6), float32], Tensor[(693, 1), float64], Tensor[(7, 7, 6), uint64], Tensor[(9, 7, 11), float32]) {
  %466 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %467 = cast(%var_7046, dtype="float64") /* ty=Tensor[(693, 1), float64] */;
  %468 = reshape(%467, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float64] */;
  %469 = @func_2323(%468) /* ty=(Tensor[(9, 7, 11), float64],) */;
  %470 = %469.0;
  %471 = cast(%470, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
  %472 = %466.0;
  %473 = @func_6192() /* ty=Tensor[(7, 7, 6), uint64] */;
  %474 = sqrt(%471) /* ty=Tensor[(9, 7, 11), float32] */;
  (%472, %var_7046, %473, %474)
}

def @func_11021() -> (Tensor[(6, 260), float32],) {
  %475 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  (%475,)
}

def @func_9176() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
  %476 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %477 = cast(meta[relay.Constant][23] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %478 = cast(meta[relay.Constant][23] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %479 = reshape(%477, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %480 = reshape(%478, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %481 = %476.0;
  %482 = @func_6920() /* ty=Tensor[(7, 7, 6), float32] */;
  %483 = @func_4366(%479, %480) /* ty=Tensor[(15, 11, 14), int64] */;
  (%481, %482, %483, meta[relay.Constant][23] /* ty=Tensor[(2310), int64] */)
}

def @func_5895() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) {
  %484 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %485 = %484.0;
  %486 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  (%485, %486)
}

def @func_5578(%var_5569: Tensor[(7, 7, 6), float64]) -> Tensor[(7, 7, 6), bool] {
  %487 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %488 = %487.1;
  %489 = cast(%var_5569, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %490 = shape_of(%488, dtype="int32") /* ty=Tensor[(3), int32] */;
  %491 = cast(%488, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %492 = dyn.reshape(%489, %490, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%491, %492) /* ty=Tensor[(7, 7, 6), bool] */
}

def @func_11309() -> Tensor[(7, 7, 6), float64] {
  %493 = @func_10289() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) */;
  %493.1
}

def @func_7851() -> Tensor[(7, 7, 6), float32] {
  %494 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
  %494.0
}

def @func_9064() -> (Tensor[(7, 7, 6), float64],) {
  %495 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  (%495,)
}

def @func_11000(%var_10994: Tensor[(78), float32], %var_10995: Tensor[(100, 2), float32]) -> (Tensor[(13, 10, 13), float64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(100, 2), float32]) {
  %496 = cast(meta[relay.Constant][24] /* ty=Tensor[(13, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 13), float64] */;
  %497 = cast(%var_10994, dtype="float32") /* ty=Tensor[(78), float32] */;
  %498 = cast(%var_10995, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %499 = reshape(%497, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float32] */;
  %500 = reshape(%498, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %501 = @func_2406(%499, %500) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) */;
  %502 = sqrt(%496) /* ty=Tensor[(13, 10, 13), float64] */;
  %503 = %501.0;
  (%502, %503, %var_10994, %var_10995)
}

def @func_9589(%var_9583: Tensor[(5, 1, 13), float64]) -> (Tensor[(5, 1, 13), float64],) {
  %504 = cast(%var_9583, dtype="float64") /* ty=Tensor[(5, 1, 13), float64] */;
  %505 = log(%504) /* ty=Tensor[(5, 1, 13), float64] */;
  (%505,)
}

def @func_10005(%var_9995: uint8) -> (Tensor[(1, 7, 1), uint8],) {
  %506 = cast(%var_9995, dtype="uint8") /* ty=uint8 */;
  %507 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 7, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1, 7, 1), uint8] */;
  %508 = left_shift(%506, %507) /* ty=Tensor[(1, 7, 1), uint8] */;
  (%508,)
}

def @func_6009(%var_5998: Tensor[(2310), int64]) -> (Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
  %509 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %510 = cast(%var_5998, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %511 = cast(%var_5998, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %512 = reshape(%510, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %513 = reshape(%511, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %514 = %509.1;
  %515 = @func_4366(%512, %513) /* ty=Tensor[(15, 11, 14), int64] */;
  (%514, %515, %var_5998)
}

def @func_3801(%var_3791: Tensor[(14, 14, 3), float32]) -> (Tensor[(14, 14, 3), float32],) {
  %516 = cast(%var_3791, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
  %517 = atanh(%516) /* ty=Tensor[(14, 14, 3), float32] */;
  (%517,)
}

def @func_5215() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) {
  %518 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %519 = cast(%518, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %520 = cast(%518, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %521 = tan(%519) /* ty=Tensor[(7, 7, 6), float32] */;
  %522 = cos(%520) /* ty=Tensor[(7, 7, 6), float64] */;
  (%521, %522)
}

def @func_9485(%var_9431: Tensor[(6, 260), float32], %var_9440: Tensor[(6, 260), float32]) -> (Tensor[(6, 260), bool], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), float64], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64]) {
  %523 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  %524 = cast(%var_9431, dtype="bool") /* ty=Tensor[(6, 260), bool] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(2), int32] */;
  %526 = cast(%523, dtype="bool") /* ty=Tensor[(6, 260), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %528 = cast(%var_9431, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %529 = acos(%528) /* ty=Tensor[(6, 260), float32] */;
  %530 = cast(%var_9440, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
  %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(2), int32] */;
  %532 = cast(%529, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
  %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %534 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %535 = cast(%529, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %536 = tan(%535) /* ty=Tensor[(6, 260), float32] */;
  %537 = cast(%529, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
  %538 = shape_of(%536, dtype="int32") /* ty=Tensor[(2), int32] */;
  %539 = cast(%536, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
  %540 = dyn.reshape(%537, %538, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
  %541 = logical_or(%526, %527) /* ty=Tensor[(6, 260), bool] */;
  %542 = logical_xor(%532, %533) /* ty=Tensor[(6, 260), uint64] */;
  %543 = %534.2;
  %544 = bitwise_and(%539, %540) /* ty=Tensor[(6, 260), uint64] */;
  %545 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  %546 = @func_9410() /* ty=Tensor[(7, 7, 6), float64] */;
  (%541, %542, %543, %544, %545, %546)
}

def @func_7561() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) {
  %547 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %548 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
  %549 = %548.0;
  %550 = cast(%549, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %551 = %547.0;
  %552 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  %553 = acos(%550) /* ty=Tensor[(13, 12, 10), float32] */;
  %554 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  (%551, %552, %553, %554)
}

def @func_8313() -> (Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), float32], Tensor[(315), uint64]) {
  %555 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
  %556 = cast(meta[relay.Constant][26] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %557 = reshape(%556, newshape=[5, 63]) /* ty=Tensor[(5, 63), uint64] */;
  %558 = @func_7986(%557) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */;
  %559 = %555.0;
  %560 = %558.1;
  (%559, %560, meta[relay.Constant][26] /* ty=Tensor[(315), uint64] */)
}

def @func_8664(%var_8659: Tensor[(14, 10, 2), float32]) -> (Tensor[(14, 10, 2), float32], Tensor[(7, 7, 6), float32]) {
  %561 = cast(%var_8659, dtype="float32") /* ty=Tensor[(14, 10, 2), float32] */;
  %562 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %563 = sqrt(%561) /* ty=Tensor[(14, 10, 2), float32] */;
  %564 = %562.1;
  (%563, %564)
}

def @func_9242() -> (Tensor[(588), float32],) {
  %565 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
  %566 = %565.2;
  (%566,)
}

def @func_9642() -> Tensor[(7, 7, 6), float32] {
  %567 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %567.1
}

def @func_11127(%var_11111: uint64) -> (Tensor[(7, 7, 6), float64], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(15, 3, 7), bool]) {
  %568 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %569 = cast(%var_11111, dtype="uint64") /* ty=uint64 */;
  %570 = cast(meta[relay.Constant][27] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %571 = reshape(%569, newshape=[]) /* ty=uint64 */;
  %572 = reshape(%570, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %573 = cast(%var_11111, dtype="uint64") /* ty=uint64 */;
  %574 = cast(meta[relay.Constant][27] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %575 = reshape(%573, newshape=[]) /* ty=uint64 */;
  %576 = reshape(%574, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %577 = %568.1;
  %578 = @func_5125(%571, %572) /* ty=Tensor[(15, 3, 7), bool] */;
  %579 = @func_5125(%575, %576) /* ty=Tensor[(15, 3, 7), bool] */;
  (%577, %578, %var_11111, meta[relay.Constant][27] /* ty=Tensor[(315), uint64] */, %579)
}

def @func_6540() -> (Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) {
  %580 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %581 = %580.1;
  %582 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %583 = shape_of(%581, dtype="int32") /* ty=Tensor[(3), int32] */;
  %584 = cast(%581, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %585 = dyn.reshape(%582, %583, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %586 = floor_mod(%584, %585) /* ty=Tensor[(7, 7, 6), float64] */;
  %587 = cast(%586, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %588 = shape_of(meta[relay.Constant][28] /* ty=Tensor[(7, 7, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %589 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 7, 6), float32] */, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %590 = dyn.reshape(%587, %588, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %591 = cast(meta[relay.Constant][28] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %592 = less(%589, %590) /* ty=Tensor[(7, 7, 6), bool] */;
  %593 = asin(%591) /* ty=Tensor[(7, 7, 6), float32] */;
  (%592, %593)
}

def @func_9900(%var_9869: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(13, 12, 10), float32]) {
  %594 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %595 = cast(%var_9869, dtype="float32") /* ty=Tensor[(180), float32] */;
  %596 = reshape(%595, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %597 = @func_7673(%596) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */;
  %598 = @func_7561() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) */;
  %599 = %594.1;
  %600 = %597.1;
  %601 = %598.2;
  (%599, %600, %var_9869, %601)
}

def @func_7673(%var_7640: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) {
  %602 = @func_7495() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %603 = cast(%var_7640, dtype="float32") /* ty=Tensor[(180), float32] */;
  %604 = reshape(%603, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %605 = @func_5628(%604) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(3, 4, 15), bool]) */;
  %606 = @func_7495() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %607 = %602.0;
  %608 = %605.0;
  %609 = %606.0;
  (%607, %608, %var_7640, %609)
}

def @func_10230() -> Tensor[(7, 7, 6), float32] {
  %610 = @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %610.0
}

def @func_8036() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) {
  %611 = @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %612 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  %613 = %611.0;
  (%612, %613)
}

def @func_4944() -> Tensor[(7, 7, 6), float32] {
  %614 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
  %614.0
}

def @func_7425(%var_7421: Tensor[(30, 6), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(3, 4, 15), float32], Tensor[(30, 6), float32]) {
  %615 = cast(%var_7421, dtype="float32") /* ty=Tensor[(30, 6), float32] */;
  %616 = reshape(%615, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %617 = @func_357(%616) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %618 = @func_5696() /* ty=Tensor[(7, 7, 6), float64] */;
  %619 = %617.0;
  (%618, %619, %var_7421)
}

def @func_7271(%var_7266: Tensor[(7, 7, 6), float32]) -> Tensor[(7, 7, 6), float32] {
  %620 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %621 = %620.0;
  %622 = cast(%var_7266, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %623 = shape_of(%621, dtype="int32") /* ty=Tensor[(3), int32] */;
  %624 = cast(%621, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %625 = dyn.reshape(%622, %623, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%624, %625) /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_6144() -> Tensor[(7, 7, 6), float64] {
  %626 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %627 = %626.0;
  %628 = cast(meta[relay.Constant][29] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %629 = shape_of(%627, dtype="int32") /* ty=Tensor[(3), int32] */;
  %630 = cast(%627, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %631 = dyn.reshape(%628, %629, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%630, %631) /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_7723() -> (Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) {
  %632 = cast(meta[relay.Constant][30] /* ty=Tensor[(2, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %633 = tan(%632) /* ty=Tensor[(2, 2, 4), float64] */;
  %634 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  (%633, %634)
}

def @func_8587() -> (Tensor[(7, 7, 6), float64],) {
  %635 = @func_5696() /* ty=Tensor[(7, 7, 6), float64] */;
  (%635,)
}

def @func_10145(%var_10119: Tensor[(693), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(693), bool], Tensor[(7, 7, 6), float32], Tensor[(525), uint32]) {
  %636 = @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %637 = @func_6736() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */;
  %638 = %637.3;
  %639 = cast(%var_10119, dtype="bool") /* ty=Tensor[(693), bool] */;
  %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(1), int32] */;
  %641 = cast(%638, dtype="bool") /* ty=Tensor[(693), bool] */;
  %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?), bool] */;
  %643 = cast(meta[relay.Constant][31] /* ty=Tensor[(525), uint32] */, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %644 = cast(meta[relay.Constant][31] /* ty=Tensor[(525), uint32] */, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %645 = cast(meta[relay.Constant][31] /* ty=Tensor[(525), uint32] */, dtype="float64") /* ty=Tensor[(525), float64] */;
  %646 = reshape(%643, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %647 = reshape(%644, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %648 = reshape(%645, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), float64] */;
  %649 = @func_8442(%646, %647, %648) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */;
  %650 = %636.0;
  %651 = not_equal(%641, %642) /* ty=Tensor[(693), bool] */;
  %652 = %649.2;
  (%650, %651, %652, meta[relay.Constant][31] /* ty=Tensor[(525), uint32] */)
}

def @func_9827() -> Tensor[(7, 7, 6), uint64] {
  %653 = @func_7561() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) */;
  %653.0
}

def @func_9921() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(315), uint64], Tensor[(5, 1, 13), float64], Tensor[(65), float64]) {
  %654 = @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %655 = cast(meta[relay.Constant][32] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %656 = reshape(%655, newshape=[5, 63]) /* ty=Tensor[(5, 63), uint64] */;
  %657 = @func_7986(%656) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */;
  %658 = cast(meta[relay.Constant][33] /* ty=Tensor[(65), float64] */, dtype="float64") /* ty=Tensor[(65), float64] */;
  %659 = reshape(%658, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float64] */;
  %660 = @func_9589(%659) /* ty=(Tensor[(5, 1, 13), float64],) */;
  %661 = %654.0;
  %662 = %657.1;
  %663 = %660.0;
  (%661, %662, meta[relay.Constant][32] /* ty=Tensor[(315), uint64] */, %663, meta[relay.Constant][33] /* ty=Tensor[(65), float64] */)
}

def @func_10348(%var_10315: Tensor[(14, 2, 16), float64]) -> (Tensor[(14, 2, 16), bool], Tensor[(12, 130), float32], Tensor[(315), uint64]) {
  %664 = cast(%var_10315, dtype="float64") /* ty=Tensor[(14, 2, 16), float64] */;
  %665 = sin(%664) /* ty=Tensor[(14, 2, 16), float64] */;
  %666 = cast(%665, dtype="bool") /* ty=Tensor[(14, 2, 16), bool] */;
  %667 = shape_of(%var_10315, dtype="int32") /* ty=Tensor[(3), int32] */;
  %668 = cast(%var_10315, dtype="bool") /* ty=Tensor[(14, 2, 16), bool] */;
  %669 = dyn.reshape(%666, %667, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %670 = cast(meta[relay.Constant][34] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %671 = reshape(%670, newshape=[5, 63]) /* ty=Tensor[(5, 63), uint64] */;
  %672 = @func_7986(%671) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */;
  %673 = less(%668, %669) /* ty=Tensor[(14, 2, 16), bool] */;
  %674 = %672.4;
  (%673, %674, meta[relay.Constant][34] /* ty=Tensor[(315), uint64] */)
}

def @func_5243(%var_5231: Tensor[(936), float64], %var_5232: Tensor[(294, 2), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(588), float32], Tensor[(936), float64], Tensor[(294, 2), float32], Tensor[(180), float32]) {
  %675 = cast(%var_5231, dtype="float64") /* ty=Tensor[(936), float64] */;
  %676 = cast(%var_5232, dtype="float32") /* ty=Tensor[(294, 2), float32] */;
  %677 = cast(meta[relay.Constant][35] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %678 = reshape(%675, newshape=[8, 9, 13]) /* ty=Tensor[(8, 9, 13), float64] */;
  %679 = reshape(%676, newshape=[588]) /* ty=Tensor[(588), float32] */;
  %680 = reshape(%677, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %681 = @func_4012(%678, %679, %680) /* ty=(Tensor[(8, 9, 13), float64], Tensor[(14, 14, 3), float32], Tensor[(588), float32], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) */;
  %682 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  %683 = %681.2;
  (%682, %683, %var_5231, %var_5232, meta[relay.Constant][35] /* ty=Tensor[(180), float32] */)
}

def @func_9204() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) {
  %684 = @func_9064() /* ty=(Tensor[(7, 7, 6), float64],) */;
  %685 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  %686 = %684.0;
  (%685, %686)
}

def @func_8738() -> (Tensor[(14, 14, 3), float32], Tensor[(7, 7, 6), float32]) {
  %687 = @func_6896() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) */;
  %688 = @func_6798() /* ty=Tensor[(14, 14, 3), float32] */;
  %689 = %687.0;
  (%688, %689)
}

def @func_6943() -> (Tensor[(7, 7, 6), float32],) {
  %690 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %691 = %690.2;
  %692 = cast(%691, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %693 = rsqrt(%692) /* ty=Tensor[(7, 7, 6), float32] */;
  (%693,)
}

def @func_9701() -> (Tensor[(7, 7, 6), float32],) {
  %694 = @func_8538() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693), float32]) */;
  %695 = %694.0;
  (%695,)
}

def @func_5323(%var_5267: Tensor[(13, 12, 10), float32], %var_5291: Tensor[(315), uint64]) -> (Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) {
  %696 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
  %697 = %696.3;
  %698 = cast(%var_5267, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %699 = shape_of(%697, dtype="int32") /* ty=Tensor[(3), int32] */;
  %700 = cast(%697, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %701 = dyn.reshape(%698, %699, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %702 = cast(meta[relay.Constant][36] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
  %703 = cast(%var_5291, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %704 = reshape(%702, newshape=[]) /* ty=uint64 */;
  %705 = reshape(%703, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %706 = cast(%var_5267, dtype="float64") /* ty=Tensor[(13, 12, 10), float64] */;
  %707 = log(%706) /* ty=Tensor[(13, 12, 10), float64] */;
  %708 = cast(%697, dtype="uint64") /* ty=Tensor[(13, 12, 10), uint64] */;
  %709 = shape_of(%707, dtype="int32") /* ty=Tensor[(3), int32] */;
  %710 = cast(%707, dtype="uint64") /* ty=Tensor[(13, 12, 10), uint64] */;
  %711 = dyn.reshape(%708, %709, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %712 = bitwise_or(%710, %711) /* ty=Tensor[(13, 12, 10), uint64] */;
  %713 = cast(%var_5267, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %714 = shape_of(%712, dtype="int32") /* ty=Tensor[(3), int32] */;
  %715 = cast(%712, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %716 = dyn.reshape(%713, %714, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %717 = cast(%var_5267, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %718 = divide(%700, %701) /* ty=Tensor[(13, 12, 10), float32] */;
  %719 = @func_5125(%704, %705) /* ty=Tensor[(15, 3, 7), bool] */;
  %720 = floor_mod(%715, %716) /* ty=Tensor[(13, 12, 10), float32] */;
  %721 = log10(%717) /* ty=Tensor[(13, 12, 10), float32] */;
  (%718, %719, meta[relay.Constant][36] /* ty=uint64 */, %var_5291, %720, %721)
}

def @func_7360(%var_7352: Tensor[(2535), float64]) -> (Tensor[(6, 260), float32], Tensor[(7, 7, 6), uint8], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  %722 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %723 = %722.0;
  %724 = cast(meta[relay.Constant][37] /* ty=Tensor[(7, 7, 6), float32] */, dtype="uint8") /* ty=Tensor[(7, 7, 6), uint8] */;
  %725 = shape_of(%723, dtype="int32") /* ty=Tensor[(3), int32] */;
  %726 = cast(%723, dtype="uint8") /* ty=Tensor[(7, 7, 6), uint8] */;
  %727 = dyn.reshape(%724, %725, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %728 = cast(%var_7352, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %729 = cast(%var_7352, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %730 = reshape(%728, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %731 = reshape(%729, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %732 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  %733 = multiply(%726, %727) /* ty=Tensor[(7, 7, 6), uint8] */;
  %734 = @func_3956(%730, %731) /* ty=Tensor[(13, 15, 13), float64] */;
  (%732, %733, %734, %var_7352)
}

def @func_6896() -> (Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) {
  %735 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %736 = cast(%735, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %737 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %739 = cast(meta[relay.Constant][38] /* ty=Tensor[(315, 1), uint64] */, dtype="uint64") /* ty=Tensor[(315, 1), uint64] */;
  %740 = reshape(%738, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
  %741 = reshape(%739, newshape=[315]) /* ty=Tensor[(315), uint64] */;
  %742 = @func_5323(%740, %741) /* ty=(Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) */;
  %743 = cast(meta[relay.Constant][39] /* ty=Tensor[(770, 3), int64] */, dtype="int64") /* ty=Tensor[(770, 3), int64] */;
  %744 = reshape(%743, newshape=[2310]) /* ty=Tensor[(2310), int64] */;
  %745 = @func_6009(%744) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) */;
  %746 = sin(%736) /* ty=Tensor[(7, 7, 6), float32] */;
  %747 = %742.2;
  %748 = %745.0;
  (%746, %737, %747, meta[relay.Constant][38] /* ty=Tensor[(315, 1), uint64] */, %748, meta[relay.Constant][39] /* ty=Tensor[(770, 3), int64] */)
}

def @func_9785(%var_9779: Tensor[(2, 2, 4), float64]) -> Tensor[(2, 2, 4), uint8] {
  %749 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %750 = %749.0;
  %751 = cast(%var_9779, dtype="uint8") /* ty=Tensor[(2, 2, 4), uint8] */;
  %752 = shape_of(%750, dtype="int32") /* ty=Tensor[(3), int32] */;
  %753 = cast(%750, dtype="uint8") /* ty=Tensor[(2, 2, 4), uint8] */;
  %754 = dyn.reshape(%751, %752, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%753, %754) /* ty=Tensor[(2, 2, 4), uint8] */
}

def @func_8442(%var_8403: Tensor[(7, 5, 15), uint32], %var_8404: Tensor[(7, 5, 15), uint32], %var_8426: Tensor[(7, 5, 15), float64]) -> (Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) {
  %755 = cast(%var_8404, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
  %756 = shape_of(%var_8403, dtype="int32") /* ty=Tensor[(3), int32] */;
  %757 = cast(%var_8403, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
  %758 = dyn.reshape(%755, %756, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %759 = cast(%var_8404, dtype="float64") /* ty=Tensor[(7, 5, 15), float64] */;
  %760 = exp(%759) /* ty=Tensor[(7, 5, 15), float64] */;
  %761 = cast(%var_8426, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
  %762 = shape_of(%760, dtype="int32") /* ty=Tensor[(3), int32] */;
  %763 = cast(%760, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
  %764 = dyn.reshape(%761, %762, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %765 = maximum(%763, %764) /* ty=Tensor[(7, 5, 15), uint32] */;
  %766 = cast(%var_8404, dtype="int16") /* ty=Tensor[(7, 5, 15), int16] */;
  %767 = shape_of(%765, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(%765, dtype="int16") /* ty=Tensor[(7, 5, 15), int16] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %770 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %771 = bitwise_xor(%757, %758) /* ty=Tensor[(7, 5, 15), uint32] */;
  %772 = left_shift(%768, %769) /* ty=Tensor[(7, 5, 15), int16] */;
  %773 = %770.1;
  (%771, %772, %773)
}

def @func_10022(%var_10017: Tensor[(1, 3, 9), float64]) -> (Tensor[(1, 3, 9), float64],) {
  %774 = cast(%var_10017, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
  %775 = sin(%774) /* ty=Tensor[(1, 3, 9), float64] */;
  (%775,)
}

def @func_10875() -> (Tensor[(10, 15, 14), float64], Tensor[(7, 7, 6), float32]) {
  %776 = cast(meta[relay.Constant][40] /* ty=Tensor[(10, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
  %777 = @func_8313() /* ty=(Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), float32], Tensor[(315), uint64]) */;
  %778 = sin(%776) /* ty=Tensor[(10, 15, 14), float64] */;
  %779 = %777.1;
  (%778, %779)
}

def @func_6087() -> Tensor[(6, 260), float32] {
  %780 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
  %780.4
}

def @func_5970() -> (Tensor[(7, 7, 6), float32],) {
  %781 = @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */;
  %782 = %781.0;
  (%782,)
}

def @func_259(%var_238: Tensor[(1, 16, 3), uint64], %var_239: Tensor[(8, 16, 3), uint64], %var_249: Tensor[(8, 16, 3), uint64]) -> (Tensor[(8, 16, 3), uint64], Tensor[(2, 10, 10), bool], Tensor[(200), float32], Tensor[(8, 16, 3), float32]) {
  %783 = cast(%var_238, dtype="uint64") /* ty=Tensor[(1, 16, 3), uint64] */;
  %784 = cast(%var_239, dtype="uint64") /* ty=Tensor[(8, 16, 3), uint64] */;
  %785 = cast(meta[relay.Constant][41] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %786 = cast(meta[relay.Constant][41] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %787 = reshape(%785, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %788 = reshape(%786, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %789 = @func_114(%787, %788) /* ty=(Tensor[(2, 10, 10), bool],) */;
  %790 = cast(%var_249, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %791 = shape_of(%var_239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %792 = cast(%var_239, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %794 = power(%792, %793) /* ty=Tensor[(8, 16, 3), float32] */;
  %795 = cast(%794, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %796 = left_shift(%783, %784) /* ty=Tensor[(8, 16, 3), uint64] */;
  %797 = %789.0;
  %798 = log10(%795) /* ty=Tensor[(8, 16, 3), float32] */;
  (%796, %797, meta[relay.Constant][41] /* ty=Tensor[(200), float32] */, %798)
}

def @func_6968() -> (Tensor[(7, 7, 6), float32],) {
  %799 = @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %800 = %799.0;
  (%800,)
}

def @func_2406(%var_2396: Tensor[(1, 13, 6), float32], %var_2400: Tensor[(200), float32]) -> (Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) {
  %801 = cast(%var_2396, dtype="float32") /* ty=Tensor[(1, 13, 6), float32] */;
  %802 = cast(%var_2400, dtype="float32") /* ty=Tensor[(200), float32] */;
  %803 = cast(%var_2400, dtype="float32") /* ty=Tensor[(200), float32] */;
  %804 = reshape(%802, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %805 = reshape(%803, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %806 = @func_114(%804, %805) /* ty=(Tensor[(2, 10, 10), bool],) */;
  %807 = asin(%801) /* ty=Tensor[(1, 13, 6), float32] */;
  %808 = %806.0;
  (%807, %808, %var_2400)
}

def @func_357(%var_351: Tensor[(3, 4, 15), float32]) -> (Tensor[(3, 4, 15), float32],) {
  %809 = cast(%var_351, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %810 = log(%809) /* ty=Tensor[(3, 4, 15), float32] */;
  (%810,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_5217() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) {
  @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */
}

def @func_9206() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) {
  @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */
}

def @func_4858(%var_4856: Tensor[(8, 1, 2), float32]) -> (Tensor[(8, 1, 2), float32], Tensor[(8, 1, 2), float32]) {
  @func_4855(%var_4856) /* ty=(Tensor[(8, 1, 2), float32], Tensor[(8, 1, 2), float32]) */
}

def @func_9788(%var_9786: Tensor[(2, 2, 4), float64]) -> Tensor[(2, 2, 4), uint8] {
  @func_9785(%var_9786) /* ty=Tensor[(2, 2, 4), uint8] */
}

def @func_6997() -> Tensor[(7, 7, 6), uint64] {
  @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_10007(%var_10006: uint8) -> (Tensor[(1, 7, 1), uint8],) {
  %3 = fn (%var_9995: uint8) -> (Tensor[(1, 7, 1), uint8],) {
    %0 = cast(%var_9995, dtype="uint8") /* ty=uint8 */;
    %1 = cast(meta[relay.Constant][0] /* ty=Tensor[(1, 7, 1), uint8] */, dtype="uint8") /* ty=Tensor[(1, 7, 1), uint8] */;
    %2 = left_shift(%0, %1) /* ty=Tensor[(1, 7, 1), uint8] */;
    (%2,)
  };
  %3(%var_10006) /* ty=(Tensor[(1, 7, 1), uint8],) */
}

def @func_6995() -> Tensor[(7, 7, 6), uint64] {
  %4 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %4.0
}

def @func_259(%var_238: Tensor[(1, 16, 3), uint64], %var_239: Tensor[(8, 16, 3), uint64], %var_249: Tensor[(8, 16, 3), uint64]) -> (Tensor[(8, 16, 3), uint64], Tensor[(2, 10, 10), bool], Tensor[(200), float32], Tensor[(8, 16, 3), float32]) {
  %5 = cast(%var_238, dtype="uint64") /* ty=Tensor[(1, 16, 3), uint64] */;
  %6 = cast(%var_239, dtype="uint64") /* ty=Tensor[(8, 16, 3), uint64] */;
  %7 = cast(meta[relay.Constant][1] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %8 = cast(meta[relay.Constant][1] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %9 = reshape(%7, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %10 = reshape(%8, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %11 = @func_114(%9, %10) /* ty=(Tensor[(2, 10, 10), bool],) */;
  %12 = cast(%var_249, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %13 = shape_of(%var_239, dtype="int32") /* ty=Tensor[(3), int32] */;
  %14 = cast(%var_239, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %16 = power(%14, %15) /* ty=Tensor[(8, 16, 3), float32] */;
  %17 = cast(%16, dtype="float32") /* ty=Tensor[(8, 16, 3), float32] */;
  %18 = left_shift(%5, %6) /* ty=Tensor[(8, 16, 3), uint64] */;
  %19 = %11.0;
  %20 = log10(%17) /* ty=Tensor[(8, 16, 3), float32] */;
  (%18, %19, meta[relay.Constant][1] /* ty=Tensor[(200), float32] */, %20)
}

def @func_11000(%var_10994: Tensor[(78), float32], %var_10995: Tensor[(100, 2), float32]) -> (Tensor[(13, 10, 13), float64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(100, 2), float32]) {
  %21 = cast(meta[relay.Constant][2] /* ty=Tensor[(13, 10, 13), float64] */, dtype="float64") /* ty=Tensor[(13, 10, 13), float64] */;
  %22 = cast(%var_10994, dtype="float32") /* ty=Tensor[(78), float32] */;
  %23 = cast(%var_10995, dtype="float32") /* ty=Tensor[(100, 2), float32] */;
  %24 = reshape(%22, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float32] */;
  %25 = reshape(%23, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %26 = @func_2406(%24, %25) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) */;
  %27 = sqrt(%21) /* ty=Tensor[(13, 10, 13), float64] */;
  %28 = %26.0;
  (%27, %28, %var_10994, %var_10995)
}

def @func_6737() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) {
  %49 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) {
    %29 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
    %30 = @func_5754() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %31 = @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */;
    %32 = %31.2;
    %33 = cast(%32, dtype="float64") /* ty=Tensor[(693), float64] */;
    %34 = acosh(%33) /* ty=Tensor[(693), float64] */;
    %35 = cast(%32, dtype="float64") /* ty=Tensor[(693), float64] */;
    %36 = log2(%35) /* ty=Tensor[(693), float64] */;
    %37 = cast(%36, dtype="int32") /* ty=Tensor[(693), int32] */;
    %38 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
    %39 = cast(%34, dtype="int32") /* ty=Tensor[(693), int32] */;
    %40 = dyn.reshape(%37, %38, newshape=[]) /* ty=Tensor[(?), int32] */;
    %41 = cast(meta[relay.Constant][3] /* ty=Tensor[(693), float64] */, dtype="float32") /* ty=Tensor[(693), float32] */;
    %42 = shape_of(%34, dtype="int32") /* ty=Tensor[(1), int32] */;
    %43 = cast(%34, dtype="float32") /* ty=Tensor[(693), float32] */;
    %44 = dyn.reshape(%41, %42, newshape=[]) /* ty=Tensor[(?), float32] */;
    %45 = %29.0;
    %46 = %30.0;
    %47 = left_shift(%39, %40) /* ty=Tensor[(693), int32] */;
    %48 = divide(%43, %44) /* ty=Tensor[(693), float32] */;
    (%45, %46, %47, %48)
  };
  %49() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */
}

def @func_7428(%var_7426: Tensor[(30, 6), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(3, 4, 15), float32], Tensor[(30, 6), float32]) {
  @func_7425(%var_7426) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(3, 4, 15), float32], Tensor[(30, 6), float32]) */
}

def @func_9702() -> (Tensor[(7, 7, 6), float32],) {
  %52 = fn () -> (Tensor[(7, 7, 6), float32],) {
    %50 = @func_8538() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693), float32]) */;
    %51 = %50.0;
    (%51,)
  };
  %52() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_7988(%var_7987: Tensor[(5, 63), uint64]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) {
  %72 = fn (%var_7960: Tensor[(5, 63), uint64]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) {
    %53 = @func_5903() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %54 = @func_5903() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %55 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
    %56 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 130), float32] */, dtype="float32") /* ty=Tensor[(12, 130), float32] */;
    %57 = cast(%var_7960, dtype="uint64") /* ty=Tensor[(5, 63), uint64] */;
    %58 = reshape(%56, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
    %59 = reshape(%57, newshape=[315]) /* ty=Tensor[(315), uint64] */;
    %60 = @func_5323(%58, %59) /* ty=(Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) */;
    %61 = %60.5;
    %62 = cast(%61, dtype="bool") /* ty=Tensor[(13, 12, 10), bool] */;
    %63 = shape_of(meta[relay.Constant][4] /* ty=Tensor[(12, 130), float32] */, dtype="int32") /* ty=Tensor[(2), int32] */;
    %64 = cast(meta[relay.Constant][4] /* ty=Tensor[(12, 130), float32] */, dtype="bool") /* ty=Tensor[(12, 130), bool] */;
    %65 = dyn.reshape(%62, %63, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %66 = greater(%64, %65) /* ty=Tensor[(12, 130), bool] */;
    %67 = cast(%66, dtype="float32") /* ty=Tensor[(12, 130), float32] */;
    %68 = %53.0;
    %69 = %54.0;
    %70 = %55.0;
    %71 = atanh(%67) /* ty=Tensor[(12, 130), float32] */;
    (%68, %69, %70, %var_7960, %71)
  };
  %72(%var_7987) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */
}

def @func_8587() -> (Tensor[(7, 7, 6), float64],) {
  %73 = @func_5696() /* ty=Tensor[(7, 7, 6), float64] */;
  (%73,)
}

def @func_5896() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) {
  %77 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) {
    %74 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
    %75 = %74.0;
    %76 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
    (%75, %76)
  };
  %77() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */
}

def @func_11310() -> Tensor[(7, 7, 6), float64] {
  %79 = fn () -> Tensor[(7, 7, 6), float64] {
    %78 = @func_10289() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) */;
    %78.1
  };
  %79() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_9488(%var_9486: Tensor[(6, 260), float32], %var_9487: Tensor[(6, 260), float32]) -> (Tensor[(6, 260), bool], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), float64], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64]) {
  %104 = fn (%var_9431: Tensor[(6, 260), float32], %var_9440: Tensor[(6, 260), float32]) -> (Tensor[(6, 260), bool], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), float64], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64]) {
    %80 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
    %81 = cast(%var_9431, dtype="bool") /* ty=Tensor[(6, 260), bool] */;
    %82 = shape_of(%80, dtype="int32") /* ty=Tensor[(2), int32] */;
    %83 = cast(%80, dtype="bool") /* ty=Tensor[(6, 260), bool] */;
    %84 = dyn.reshape(%81, %82, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %85 = cast(%var_9431, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
    %86 = acos(%85) /* ty=Tensor[(6, 260), float32] */;
    %87 = cast(%var_9440, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
    %88 = shape_of(%86, dtype="int32") /* ty=Tensor[(2), int32] */;
    %89 = cast(%86, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
    %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %91 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
    %92 = cast(%86, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
    %93 = tan(%92) /* ty=Tensor[(6, 260), float32] */;
    %94 = cast(%86, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
    %95 = shape_of(%93, dtype="int32") /* ty=Tensor[(2), int32] */;
    %96 = cast(%93, dtype="uint64") /* ty=Tensor[(6, 260), uint64] */;
    %97 = dyn.reshape(%94, %95, newshape=[]) /* ty=Tensor[(?, ?), uint64] */;
    %98 = logical_or(%83, %84) /* ty=Tensor[(6, 260), bool] */;
    %99 = logical_xor(%89, %90) /* ty=Tensor[(6, 260), uint64] */;
    %100 = %91.2;
    %101 = bitwise_and(%96, %97) /* ty=Tensor[(6, 260), uint64] */;
    %102 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
    %103 = @func_9410() /* ty=Tensor[(7, 7, 6), float64] */;
    (%98, %99, %100, %101, %102, %103)
  };
  %104(%var_9486, %var_9487) /* ty=(Tensor[(6, 260), bool], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), float64], Tensor[(6, 260), uint64], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64]) */
}

def @func_5005() -> Tensor[(7, 7, 6), uint64] {
  %110 = fn () -> Tensor[(7, 7, 6), uint64] {
    %105 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
    %106 = cast(meta[relay.Constant][5] /* ty=Tensor[(7, 7, 6), float32] */, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
    %107 = shape_of(%105, dtype="int32") /* ty=Tensor[(3), int32] */;
    %108 = cast(%105, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
    %109 = dyn.reshape(%106, %107, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    minimum(%108, %109) /* ty=Tensor[(7, 7, 6), uint64] */
  };
  %110() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_9136(%var_9097: Tensor[(78), float32]) -> (Tensor[(7, 7, 6), bool], Tensor[(15, 11, 14), int64], Tensor[(2310), int64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(200), float32], Tensor[(7, 7, 6), float64], Tensor[(2, 10, 10), bool], Tensor[(7, 7, 6), uint64]) {
  %111 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %112 = cast(meta[relay.Constant][6] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %113 = cast(meta[relay.Constant][6] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
  %114 = reshape(%112, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %115 = reshape(%113, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %116 = cast(%var_9097, dtype="float32") /* ty=Tensor[(78), float32] */;
  %117 = cast(meta[relay.Constant][7] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %118 = reshape(%116, newshape=[1, 13, 6]) /* ty=Tensor[(1, 13, 6), float32] */;
  %119 = reshape(%117, newshape=[200]) /* ty=Tensor[(200), float32] */;
  %120 = @func_2406(%118, %119) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) */;
  %121 = cast(meta[relay.Constant][7] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %122 = cast(meta[relay.Constant][7] /* ty=Tensor[(200), float32] */, dtype="float32") /* ty=Tensor[(200), float32] */;
  %123 = reshape(%121, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %124 = reshape(%122, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
  %125 = @func_114(%123, %124) /* ty=(Tensor[(2, 10, 10), bool],) */;
  %126 = %111.2;
  %127 = @func_4366(%114, %115) /* ty=Tensor[(15, 11, 14), int64] */;
  %128 = %120.0;
  %129 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  %130 = %125.0;
  %131 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  (%126, %127, meta[relay.Constant][6] /* ty=Tensor[(2310), int64] */, %128, %var_9097, meta[relay.Constant][7] /* ty=Tensor[(200), float32] */, %129, %130, %131)
}

def @func_830(%var_828: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), float64],) {
  @func_827(%var_828) /* ty=(Tensor[(3, 4, 5), float64],) */
}

def @func_9139(%var_9137: Tensor[(78), float32]) -> (Tensor[(7, 7, 6), bool], Tensor[(15, 11, 14), int64], Tensor[(2310), int64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(200), float32], Tensor[(7, 7, 6), float64], Tensor[(2, 10, 10), bool], Tensor[(7, 7, 6), uint64]) {
  @func_9136(%var_9137) /* ty=(Tensor[(7, 7, 6), bool], Tensor[(15, 11, 14), int64], Tensor[(2310), int64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(200), float32], Tensor[(7, 7, 6), float64], Tensor[(2, 10, 10), bool], Tensor[(7, 7, 6), uint64]) */
}

def @func_7853() -> Tensor[(7, 7, 6), float32] {
  @func_7851() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_9243() -> (Tensor[(588), float32],) {
  %134 = fn () -> (Tensor[(588), float32],) {
    %132 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
    %133 = %132.2;
    (%133,)
  };
  %134() /* ty=(Tensor[(588), float32],) */
}

def @func_4017(%var_4014: Tensor[(8, 9, 13), float64], %var_4015: Tensor[(588), float32], %var_4016: Tensor[(180), float32]) -> (Tensor[(8, 9, 13), float64], Tensor[(14, 14, 3), float32], Tensor[(588), float32], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) {
  @func_4012(%var_4014, %var_4015, %var_4016) /* ty=(Tensor[(8, 9, 13), float64], Tensor[(14, 14, 3), float32], Tensor[(588), float32], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) */
}

def @func_10024(%var_10023: Tensor[(1, 3, 9), float64]) -> (Tensor[(1, 3, 9), float64],) {
  %137 = fn (%var_10017: Tensor[(1, 3, 9), float64]) -> (Tensor[(1, 3, 9), float64],) {
    %135 = cast(%var_10017, dtype="float64") /* ty=Tensor[(1, 3, 9), float64] */;
    %136 = sin(%135) /* ty=Tensor[(1, 3, 9), float64] */;
    (%136,)
  };
  %137(%var_10023) /* ty=(Tensor[(1, 3, 9), float64],) */
}

def @func_7723() -> (Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) {
  %138 = cast(meta[relay.Constant][8] /* ty=Tensor[(2, 2, 4), float64] */, dtype="float64") /* ty=Tensor[(2, 2, 4), float64] */;
  %139 = tan(%138) /* ty=Tensor[(2, 2, 4), float64] */;
  %140 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  (%139, %140)
}

def @func_6193() -> Tensor[(7, 7, 6), uint64] {
  %141 = fn () -> Tensor[(7, 7, 6), uint64] {
    @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */
  };
  %141() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_8038() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) {
  @func_8036() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) */
}

def @func_5581(%var_5579: Tensor[(7, 7, 6), float64]) -> Tensor[(7, 7, 6), bool] {
  @func_5578(%var_5579) /* ty=Tensor[(7, 7, 6), bool] */
}

def @func_7360(%var_7352: Tensor[(2535), float64]) -> (Tensor[(6, 260), float32], Tensor[(7, 7, 6), uint8], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  %142 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %143 = %142.0;
  %144 = cast(meta[relay.Constant][9] /* ty=Tensor[(7, 7, 6), float32] */, dtype="uint8") /* ty=Tensor[(7, 7, 6), uint8] */;
  %145 = shape_of(%143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %146 = cast(%143, dtype="uint8") /* ty=Tensor[(7, 7, 6), uint8] */;
  %147 = dyn.reshape(%144, %145, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  %148 = cast(%var_7352, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %149 = cast(%var_7352, dtype="float64") /* ty=Tensor[(2535), float64] */;
  %150 = reshape(%148, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %151 = reshape(%149, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
  %152 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  %153 = multiply(%146, %147) /* ty=Tensor[(7, 7, 6), uint8] */;
  %154 = @func_3956(%150, %151) /* ty=Tensor[(13, 15, 13), float64] */;
  (%152, %153, %154, %var_7352)
}

def @func_6970() -> (Tensor[(7, 7, 6), float32],) {
  @func_6968() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_9643() -> Tensor[(7, 7, 6), float32] {
  %156 = fn () -> Tensor[(7, 7, 6), float32] {
    %155 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
    %155.1
  };
  %156() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_10947(%var_10946: Tensor[(12, 7, 11), float64]) -> (Tensor[(12, 7, 11), float64],) {
  %159 = fn (%var_10926: Tensor[(12, 7, 11), float64]) -> (Tensor[(12, 7, 11), float64],) {
    %157 = cast(%var_10926, dtype="float64") /* ty=Tensor[(12, 7, 11), float64] */;
    %158 = sinh(%157) /* ty=Tensor[(12, 7, 11), float64] */;
    (%158,)
  };
  %159(%var_10946) /* ty=(Tensor[(12, 7, 11), float64],) */
}

def @func_7425(%var_7421: Tensor[(30, 6), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(3, 4, 15), float32], Tensor[(30, 6), float32]) {
  %160 = cast(%var_7421, dtype="float32") /* ty=Tensor[(30, 6), float32] */;
  %161 = reshape(%160, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %162 = @func_357(%161) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %163 = @func_5696() /* ty=Tensor[(7, 7, 6), float64] */;
  %164 = %162.0;
  (%163, %164, %var_7421)
}

def @func_11127(%var_11111: uint64) -> (Tensor[(7, 7, 6), float64], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(15, 3, 7), bool]) {
  %165 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %166 = cast(%var_11111, dtype="uint64") /* ty=uint64 */;
  %167 = cast(meta[relay.Constant][10] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %168 = reshape(%166, newshape=[]) /* ty=uint64 */;
  %169 = reshape(%167, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %170 = cast(%var_11111, dtype="uint64") /* ty=uint64 */;
  %171 = cast(meta[relay.Constant][10] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
  %172 = reshape(%170, newshape=[]) /* ty=uint64 */;
  %173 = reshape(%171, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
  %174 = %165.1;
  %175 = @func_5125(%168, %169) /* ty=Tensor[(15, 3, 7), bool] */;
  %176 = @func_5125(%172, %173) /* ty=Tensor[(15, 3, 7), bool] */;
  (%174, %175, %var_11111, meta[relay.Constant][10] /* ty=Tensor[(315), uint64] */, %176)
}

def @func_2325(%var_2324: Tensor[(9, 7, 11), float64]) -> (Tensor[(9, 7, 11), float64],) {
  %179 = fn (%var_2318: Tensor[(9, 7, 11), float64]) -> (Tensor[(9, 7, 11), float64],) {
    %177 = cast(%var_2318, dtype="float64") /* ty=Tensor[(9, 7, 11), float64] */;
    %178 = asinh(%177) /* ty=Tensor[(9, 7, 11), float64] */;
    (%178,)
  };
  %179(%var_2324) /* ty=(Tensor[(9, 7, 11), float64],) */
}

def @func_4012(%var_3976: Tensor[(8, 9, 13), float64], %var_3990: Tensor[(588), float32], %var_4004: Tensor[(180), float32]) -> (Tensor[(8, 9, 13), float64], Tensor[(14, 14, 3), float32], Tensor[(588), float32], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) {
  %180 = cast(%var_3976, dtype="float64") /* ty=Tensor[(8, 9, 13), float64] */;
  %181 = cast(%var_3990, dtype="float32") /* ty=Tensor[(588), float32] */;
  %182 = reshape(%181, newshape=[14, 14, 3]) /* ty=Tensor[(14, 14, 3), float32] */;
  %183 = @func_3801(%182) /* ty=(Tensor[(14, 14, 3), float32],) */;
  %184 = cast(%var_4004, dtype="float32") /* ty=Tensor[(180), float32] */;
  %185 = reshape(%184, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %186 = @func_357(%185) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %187 = acosh(%180) /* ty=Tensor[(8, 9, 13), float64] */;
  %188 = %183.0;
  %189 = %186.0;
  (%187, %188, %var_3990, %189, %var_4004)
}

def @func_7563() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) {
  @func_7561() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) */
}

def @func_9204() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) {
  %190 = @func_9064() /* ty=(Tensor[(7, 7, 6), float64],) */;
  %191 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  %192 = %190.0;
  (%191, %192)
}

def @func_4369(%var_4367: Tensor[(15, 11, 14), int64], %var_4368: Tensor[(15, 11, 14), int64]) -> Tensor[(15, 11, 14), int64] {
  %197 = fn (%var_4361: Tensor[(15, 11, 14), int64], %var_4362: Tensor[(15, 11, 14), int64]) -> Tensor[(15, 11, 14), int64] {
    %193 = cast(%var_4362, dtype="int64") /* ty=Tensor[(15, 11, 14), int64] */;
    %194 = shape_of(%var_4361, dtype="int32") /* ty=Tensor[(3), int32] */;
    %195 = cast(%var_4361, dtype="int64") /* ty=Tensor[(15, 11, 14), int64] */;
    %196 = dyn.reshape(%193, %194, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
    maximum(%195, %196) /* ty=Tensor[(15, 11, 14), int64] */
  };
  %197(%var_4367, %var_4368) /* ty=Tensor[(15, 11, 14), int64] */
}

def @func_10231() -> Tensor[(7, 7, 6), float32] {
  %199 = fn () -> Tensor[(7, 7, 6), float32] {
    %198 = @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %198.0
  };
  %199() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_11197() -> (Tensor[(13, 12, 10), float64], Tensor[(6, 260), float32]) {
  @func_11195() /* ty=(Tensor[(13, 12, 10), float64], Tensor[(6, 260), float32]) */
}

def @func_8380() -> (Tensor[(693), float32],) {
  %200 = @func_6736() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */;
  %201 = %200.2;
  %202 = cast(%201, dtype="float32") /* ty=Tensor[(693), float32] */;
  %203 = atan(%202) /* ty=Tensor[(693), float32] */;
  (%203,)
}

def @func_5498() -> Tensor[(7, 7, 6), float64] {
  @func_5496() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_9962(%var_9961: Tensor[(2535), float64]) -> (uint64, Tensor[(7, 7, 6), float64], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  %213 = fn (%var_9942: Tensor[(2535), float64]) -> (uint64, Tensor[(7, 7, 6), float64], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
    %204 = @func_6896() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) */;
    %205 = @func_9921() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(315), uint64], Tensor[(5, 1, 13), float64], Tensor[(65), float64]) */;
    %206 = cast(%var_9942, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %207 = cast(%var_9942, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %208 = reshape(%206, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
    %209 = reshape(%207, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
    %210 = %204.2;
    %211 = %205.0;
    %212 = @func_3956(%208, %209) /* ty=Tensor[(13, 15, 13), float64] */;
    (%210, %211, %212, %var_9942)
  };
  %213(%var_9961) /* ty=(uint64, Tensor[(7, 7, 6), float64], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) */
}

def @func_9714() -> Tensor[(315), uint64] {
  @func_9712() /* ty=Tensor[(315), uint64] */
}

def @func_6262() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) {
  @func_6260() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */
}

def @func_10147(%var_10146: Tensor[(693), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(693), bool], Tensor[(7, 7, 6), float32], Tensor[(525), uint32]) {
  %231 = fn (%var_10119: Tensor[(693), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(693), bool], Tensor[(7, 7, 6), float32], Tensor[(525), uint32]) {
    %214 = @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %215 = @func_6736() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */;
    %216 = %215.3;
    %217 = cast(%var_10119, dtype="bool") /* ty=Tensor[(693), bool] */;
    %218 = shape_of(%216, dtype="int32") /* ty=Tensor[(1), int32] */;
    %219 = cast(%216, dtype="bool") /* ty=Tensor[(693), bool] */;
    %220 = dyn.reshape(%217, %218, newshape=[]) /* ty=Tensor[(?), bool] */;
    %221 = cast(meta[relay.Constant][11] /* ty=Tensor[(525), uint32] */, dtype="uint32") /* ty=Tensor[(525), uint32] */;
    %222 = cast(meta[relay.Constant][11] /* ty=Tensor[(525), uint32] */, dtype="uint32") /* ty=Tensor[(525), uint32] */;
    %223 = cast(meta[relay.Constant][11] /* ty=Tensor[(525), uint32] */, dtype="float64") /* ty=Tensor[(525), float64] */;
    %224 = reshape(%221, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
    %225 = reshape(%222, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
    %226 = reshape(%223, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), float64] */;
    %227 = @func_8442(%224, %225, %226) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */;
    %228 = %214.0;
    %229 = not_equal(%219, %220) /* ty=Tensor[(693), bool] */;
    %230 = %227.2;
    (%228, %229, %230, meta[relay.Constant][11] /* ty=Tensor[(525), uint32] */)
  };
  %231(%var_10146) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693), bool], Tensor[(7, 7, 6), float32], Tensor[(525), uint32]) */
}

def @func_9654() -> Tensor[(7, 7, 6), uint64] {
  @func_9652() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_4702(%var_4701: Tensor[(13, 12, 10), float32]) -> Tensor[(13, 12, 10), float32] {
  %233 = fn (%var_4693: Tensor[(13, 12, 10), float32]) -> Tensor[(13, 12, 10), float32] {
    %232 = cast(%var_4693, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    acosh(%232) /* ty=Tensor[(13, 12, 10), float32] */
  };
  %233(%var_4701) /* ty=Tensor[(13, 12, 10), float32] */
}

def @func_11195() -> (Tensor[(13, 12, 10), float64], Tensor[(6, 260), float32]) {
  %234 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
  %235 = %234.0;
  %236 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
  %237 = cast(%236, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %238 = shape_of(%235, dtype="int32") /* ty=Tensor[(3), int32] */;
  %239 = cast(%235, dtype="float64") /* ty=Tensor[(13, 12, 10), float64] */;
  %240 = dyn.reshape(%237, %238, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %241 = cast(%236, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %242 = exp(%241) /* ty=Tensor[(6, 260), float32] */;
  %243 = cast(%236, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %244 = shape_of(%242, dtype="int32") /* ty=Tensor[(2), int32] */;
  %245 = cast(%242, dtype="float64") /* ty=Tensor[(6, 260), float64] */;
  %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %247 = divide(%245, %246) /* ty=Tensor[(6, 260), float64] */;
  %248 = cast(%247, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
  %249 = floor_divide(%239, %240) /* ty=Tensor[(13, 12, 10), float64] */;
  %250 = sqrt(%248) /* ty=Tensor[(6, 260), float32] */;
  (%249, %250)
}

def @func_7139(%var_7138: Tensor[(693), int32]) -> (Tensor[(693), bool],) {
  %258 = fn (%var_7123: Tensor[(693), int32]) -> (Tensor[(693), bool],) {
    %251 = @func_6736() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(693), int32], Tensor[(693), float32]) */;
    %252 = %251.2;
    %253 = cast(%var_7123, dtype="bool") /* ty=Tensor[(693), bool] */;
    %254 = shape_of(%252, dtype="int32") /* ty=Tensor[(1), int32] */;
    %255 = cast(%252, dtype="bool") /* ty=Tensor[(693), bool] */;
    %256 = dyn.reshape(%253, %254, newshape=[]) /* ty=Tensor[(?), bool] */;
    %257 = logical_or(%255, %256) /* ty=Tensor[(693), bool] */;
    (%257,)
  };
  %258(%var_7138) /* ty=(Tensor[(693), bool],) */
}

def @func_4945() -> Tensor[(7, 7, 6), float32] {
  %260 = fn () -> Tensor[(7, 7, 6), float32] {
    %259 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
    %259.0
  };
  %260() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_5903() -> (Tensor[(7, 7, 6), float32],) {
  %261 = @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */;
  %262 = %261.0;
  (%262,)
}

def @func_8382() -> (Tensor[(693), float32],) {
  @func_8380() /* ty=(Tensor[(693), float32],) */
}

def @func_6617(%var_6616: Tensor[(7, 7, 6), float32]) -> Tensor[(7, 7, 6), uint64] {
  %269 = fn (%var_6582: Tensor[(7, 7, 6), float32]) -> Tensor[(7, 7, 6), uint64] {
    %263 = @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %264 = %263.0;
    %265 = cast(%var_6582, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
    %266 = shape_of(%264, dtype="int32") /* ty=Tensor[(3), int32] */;
    %267 = cast(%264, dtype="uint64") /* ty=Tensor[(7, 7, 6), uint64] */;
    %268 = dyn.reshape(%265, %266, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    bitwise_xor(%267, %268) /* ty=Tensor[(7, 7, 6), uint64] */
  };
  %269(%var_6616) /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_11004(%var_11002: Tensor[(78), float32], %var_11003: Tensor[(100, 2), float32]) -> (Tensor[(13, 10, 13), float64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(100, 2), float32]) {
  @func_11000(%var_11002, %var_11003) /* ty=(Tensor[(13, 10, 13), float64], Tensor[(1, 13, 6), float32], Tensor[(78), float32], Tensor[(100, 2), float32]) */
}

def @func_4855(%var_4838: Tensor[(8, 1, 2), float32]) -> (Tensor[(8, 1, 2), float32], Tensor[(8, 1, 2), float32]) {
  %270 = cast(%var_4838, dtype="float32") /* ty=Tensor[(8, 1, 2), float32] */;
  %271 = cast(%var_4838, dtype="float32") /* ty=Tensor[(8, 1, 2), float32] */;
  %272 = cosh(%270) /* ty=Tensor[(8, 1, 2), float32] */;
  %273 = asin(%271) /* ty=Tensor[(8, 1, 2), float32] */;
  (%272, %273)
}

def @func_8642() -> (Tensor[(7, 7, 6), float64],) {
  %276 = fn () -> (Tensor[(7, 7, 6), float64],) {
    %274 = @func_8587() /* ty=(Tensor[(7, 7, 6), float64],) */;
    %275 = %274.0;
    (%275,)
  };
  %276() /* ty=(Tensor[(7, 7, 6), float64],) */
}

def @func_9712() -> Tensor[(315), uint64] {
  %277 = @func_8984() /* ty=(Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) */;
  %277.1
}

def @func_10847() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) {
  %278 = @func_6968() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %279 = @func_7851() /* ty=Tensor[(7, 7, 6), float32] */;
  %280 = @func_6920() /* ty=Tensor[(7, 7, 6), float32] */;
  %281 = %278.0;
  (%279, %280, %281)
}

def @func_5755() -> (Tensor[(7, 7, 6), float32],) {
  %284 = fn () -> (Tensor[(7, 7, 6), float32],) {
    %282 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
    %283 = %282.0;
    (%283,)
  };
  %284() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_9574() -> (Tensor[(7, 7, 6), float32],) {
  %285 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %286 = %285.0;
  (%286,)
}

def @func_11022() -> (Tensor[(6, 260), float32],) {
  %288 = fn () -> (Tensor[(6, 260), float32],) {
    %287 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
    (%287,)
  };
  %288() /* ty=(Tensor[(6, 260), float32],) */
}

def @func_5125(%var_5116: uint64, %var_5117: Tensor[(15, 3, 7), uint64]) -> Tensor[(15, 3, 7), bool] {
  %289 = cast(%var_5116, dtype="bool") /* ty=bool */;
  %290 = cast(%var_5117, dtype="bool") /* ty=Tensor[(15, 3, 7), bool] */;
  not_equal(%289, %290) /* ty=Tensor[(15, 3, 7), bool] */
}

def @func_11030() -> (Tensor[(7, 7, 6), bool],) {
  %291 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
  %292 = %291.0;
  (%292,)
}

def @func_964(%var_955: uint16, %var_956: Tensor[(11, 7, 7), uint16]) -> (Tensor[(11, 7, 7), bool], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) {
  %293 = cast(%var_955, dtype="bool") /* ty=bool */;
  %294 = cast(%var_956, dtype="bool") /* ty=Tensor[(11, 7, 7), bool] */;
  %295 = cast(meta[relay.Constant][12] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %296 = reshape(%295, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %297 = @func_357(%296) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %298 = greater_equal(%293, %294) /* ty=Tensor[(11, 7, 7), bool] */;
  %299 = %297.0;
  (%298, %299, meta[relay.Constant][12] /* ty=Tensor[(180), float32] */)
}

def @func_6787(%var_6785: Tensor[(11, 12, 7), float32], %var_6786: Tensor[(11, 12, 7), float32]) -> (Tensor[(11, 12, 7), int8], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
  %312 = fn (%var_6740: Tensor[(11, 12, 7), float32], %var_6759: Tensor[(11, 12, 7), float32]) -> (Tensor[(11, 12, 7), int8], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
    %300 = cast(%var_6740, dtype="float32") /* ty=Tensor[(11, 12, 7), float32] */;
    %301 = asin(%300) /* ty=Tensor[(11, 12, 7), float32] */;
    %302 = cast(%var_6759, dtype="int8") /* ty=Tensor[(11, 12, 7), int8] */;
    %303 = shape_of(%301, dtype="int32") /* ty=Tensor[(3), int32] */;
    %304 = cast(%301, dtype="int8") /* ty=Tensor[(11, 12, 7), int8] */;
    %305 = dyn.reshape(%302, %303, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %306 = cast(meta[relay.Constant][13] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %307 = cast(meta[relay.Constant][13] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %308 = reshape(%306, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
    %309 = reshape(%307, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
    %310 = bitwise_and(%304, %305) /* ty=Tensor[(11, 12, 7), int8] */;
    %311 = @func_4366(%308, %309) /* ty=Tensor[(15, 11, 14), int64] */;
    (%310, %311, meta[relay.Constant][13] /* ty=Tensor[(2310), int64] */)
  };
  %312(%var_6785, %var_6786) /* ty=(Tensor[(11, 12, 7), int8], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) */
}

def @func_10735(%var_10670: Tensor[(14, 14, 3), float32]) -> (Tensor[(14, 14, 3), int8], Tensor[(13, 12, 10), float32], Tensor[(1560), float32], Tensor[(7, 7, 6), float64], Tensor[(14, 14, 3), int64]) {
  %313 = @func_6798() /* ty=Tensor[(14, 14, 3), float32] */;
  %314 = cast(%var_10670, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %315 = shape_of(%313, dtype="int32") /* ty=Tensor[(3), int32] */;
  %316 = cast(%313, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %317 = dyn.reshape(%314, %315, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %318 = subtract(%316, %317) /* ty=Tensor[(14, 14, 3), float64] */;
  %319 = cast(%var_10670, dtype="int8") /* ty=Tensor[(14, 14, 3), int8] */;
  %320 = shape_of(%318, dtype="int32") /* ty=Tensor[(3), int32] */;
  %321 = cast(%318, dtype="int8") /* ty=Tensor[(14, 14, 3), int8] */;
  %322 = dyn.reshape(%319, %320, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %323 = cast(meta[relay.Constant][14] /* ty=Tensor[(1560), float32] */, dtype="float32") /* ty=Tensor[(1560), float32] */;
  %324 = reshape(%323, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
  %325 = @func_8036() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) */;
  %326 = cast(%318, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %327 = sigmoid(%326) /* ty=Tensor[(14, 14, 3), float64] */;
  %328 = cast(%318, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %329 = shape_of(%327, dtype="int32") /* ty=Tensor[(3), int32] */;
  %330 = cast(%327, dtype="float64") /* ty=Tensor[(14, 14, 3), float64] */;
  %331 = dyn.reshape(%328, %329, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %332 = power(%330, %331) /* ty=Tensor[(14, 14, 3), float64] */;
  %333 = cast(%var_10670, dtype="int64") /* ty=Tensor[(14, 14, 3), int64] */;
  %334 = shape_of(%332, dtype="int32") /* ty=Tensor[(3), int32] */;
  %335 = cast(%332, dtype="int64") /* ty=Tensor[(14, 14, 3), int64] */;
  %336 = dyn.reshape(%333, %334, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  %337 = right_shift(%321, %322) /* ty=Tensor[(14, 14, 3), int8] */;
  %338 = @func_4700(%324) /* ty=Tensor[(13, 12, 10), float32] */;
  %339 = %325.0;
  %340 = minimum(%335, %336) /* ty=Tensor[(14, 14, 3), int64] */;
  (%337, %338, meta[relay.Constant][14] /* ty=Tensor[(1560), float32] */, %339, %340)
}

def @func_7063(%var_7062: Tensor[(693, 1), float64]) -> (Tensor[(7, 7, 6), float32], Tensor[(693, 1), float64], Tensor[(7, 7, 6), uint64], Tensor[(9, 7, 11), float32]) {
  %350 = fn (%var_7046: Tensor[(693, 1), float64]) -> (Tensor[(7, 7, 6), float32], Tensor[(693, 1), float64], Tensor[(7, 7, 6), uint64], Tensor[(9, 7, 11), float32]) {
    %341 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
    %342 = cast(%var_7046, dtype="float64") /* ty=Tensor[(693, 1), float64] */;
    %343 = reshape(%342, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float64] */;
    %344 = @func_2323(%343) /* ty=(Tensor[(9, 7, 11), float64],) */;
    %345 = %344.0;
    %346 = cast(%345, dtype="float32") /* ty=Tensor[(9, 7, 11), float32] */;
    %347 = %341.0;
    %348 = @func_6192() /* ty=Tensor[(7, 7, 6), uint64] */;
    %349 = sqrt(%346) /* ty=Tensor[(9, 7, 11), float32] */;
    (%347, %var_7046, %348, %349)
  };
  %350(%var_7062) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693, 1), float64], Tensor[(7, 7, 6), uint64], Tensor[(9, 7, 11), float32]) */
}

def @func_9922() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(315), uint64], Tensor[(5, 1, 13), float64], Tensor[(65), float64]) {
  %361 = fn () -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(315), uint64], Tensor[(5, 1, 13), float64], Tensor[(65), float64]) {
    %351 = @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
    %352 = cast(meta[relay.Constant][15] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %353 = reshape(%352, newshape=[5, 63]) /* ty=Tensor[(5, 63), uint64] */;
    %354 = @func_7986(%353) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */;
    %355 = cast(meta[relay.Constant][16] /* ty=Tensor[(65), float64] */, dtype="float64") /* ty=Tensor[(65), float64] */;
    %356 = reshape(%355, newshape=[5, 1, 13]) /* ty=Tensor[(5, 1, 13), float64] */;
    %357 = @func_9589(%356) /* ty=(Tensor[(5, 1, 13), float64],) */;
    %358 = %351.0;
    %359 = %354.1;
    %360 = %357.0;
    (%358, %359, meta[relay.Constant][15] /* ty=Tensor[(315), uint64] */, %360, meta[relay.Constant][16] /* ty=Tensor[(65), float64] */)
  };
  %361() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(315), uint64], Tensor[(5, 1, 13), float64], Tensor[(65), float64]) */
}

def @func_5631(%var_5629: Tensor[(3, 4, 15), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(3, 4, 15), bool]) {
  @func_5628(%var_5629) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(3, 4, 15), bool]) */
}

def @func_5696() -> Tensor[(7, 7, 6), float64] {
  @func_5496() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_5628(%var_5620: Tensor[(3, 4, 15), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(3, 4, 15), bool]) {
  %362 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %363 = cast(meta[relay.Constant][17] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %364 = reshape(%363, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
  %365 = @func_357(%364) /* ty=(Tensor[(3, 4, 15), float32],) */;
  %366 = %365.0;
  %367 = cast(%var_5620, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %368 = shape_of(%366, dtype="int32") /* ty=Tensor[(3), int32] */;
  %369 = cast(%366, dtype="bool") /* ty=Tensor[(3, 4, 15), bool] */;
  %370 = dyn.reshape(%367, %368, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %371 = %362.1;
  %372 = logical_and(%369, %370) /* ty=Tensor[(3, 4, 15), bool] */;
  (%371, meta[relay.Constant][17] /* ty=Tensor[(180), float32] */, %372)
}

def @func_10195(%var_10194: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(2, 2, 4), uint8], Tensor[(1, 16), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32]) {
  %381 = fn (%var_10181: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(2, 2, 4), uint8], Tensor[(1, 16), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32]) {
    %373 = cast(meta[relay.Constant][18] /* ty=Tensor[(1, 16), float64] */, dtype="float64") /* ty=Tensor[(1, 16), float64] */;
    %374 = reshape(%373, newshape=[2, 2, 4]) /* ty=Tensor[(2, 2, 4), float64] */;
    %375 = cast(%var_10181, dtype="float32") /* ty=Tensor[(180), float32] */;
    %376 = reshape(%375, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %377 = @func_7673(%376) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */;
    %378 = @func_6376() /* ty=Tensor[(7, 7, 6), float64] */;
    %379 = @func_9785(%374) /* ty=Tensor[(2, 2, 4), uint8] */;
    %380 = %377.3;
    (%378, %379, meta[relay.Constant][18] /* ty=Tensor[(1, 16), float64] */, %380, %var_10181)
  };
  %381(%var_10194) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(2, 2, 4), uint8], Tensor[(1, 16), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32]) */
}

def @func_7273(%var_7272: Tensor[(7, 7, 6), float32]) -> Tensor[(7, 7, 6), float32] {
  %388 = fn (%var_7266: Tensor[(7, 7, 6), float32]) -> Tensor[(7, 7, 6), float32] {
    %382 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
    %383 = %382.0;
    %384 = cast(%var_7266, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %385 = shape_of(%383, dtype="int32") /* ty=Tensor[(3), int32] */;
    %386 = cast(%383, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %387 = dyn.reshape(%384, %385, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%386, %387) /* ty=Tensor[(7, 7, 6), float32] */
  };
  %388(%var_7272) /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_9785(%var_9779: Tensor[(2, 2, 4), float64]) -> Tensor[(2, 2, 4), uint8] {
  %389 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %390 = %389.0;
  %391 = cast(%var_9779, dtype="uint8") /* ty=Tensor[(2, 2, 4), uint8] */;
  %392 = shape_of(%390, dtype="int32") /* ty=Tensor[(3), int32] */;
  %393 = cast(%390, dtype="uint8") /* ty=Tensor[(2, 2, 4), uint8] */;
  %394 = dyn.reshape(%391, %392, newshape=[]) /* ty=Tensor[(?, ?, ?), uint8] */;
  right_shift(%393, %394) /* ty=Tensor[(2, 2, 4), uint8] */
}

def @func_7675(%var_7674: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) {
  %403 = fn (%var_7640: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) {
    %395 = @func_7495() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %396 = cast(%var_7640, dtype="float32") /* ty=Tensor[(180), float32] */;
    %397 = reshape(%396, newshape=[3, 4, 15]) /* ty=Tensor[(3, 4, 15), float32] */;
    %398 = @func_5628(%397) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(3, 4, 15), bool]) */;
    %399 = @func_7495() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %400 = %395.0;
    %401 = %398.0;
    %402 = %399.0;
    (%400, %401, %var_7640, %402)
  };
  %403(%var_7674) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */
}

def @func_7851() -> Tensor[(7, 7, 6), float32] {
  %404 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
  %404.0
}

def @func_5972() -> (Tensor[(7, 7, 6), float32],) {
  @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_9576() -> (Tensor[(7, 7, 6), float32],) {
  @func_9574() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_6260() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) {
  %405 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %406 = cast(%405, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %407 = asinh(%406) /* ty=Tensor[(7, 7, 6), float32] */;
  %408 = @func_5696() /* ty=Tensor[(7, 7, 6), float64] */;
  (%407, %408)
}

def @func_5326(%var_5324: Tensor[(13, 12, 10), float32], %var_5325: Tensor[(315), uint64]) -> (Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) {
  %435 = fn (%var_5267: Tensor[(13, 12, 10), float32], %var_5291: Tensor[(315), uint64]) -> (Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) {
    %409 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
    %410 = %409.3;
    %411 = cast(%var_5267, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %412 = shape_of(%410, dtype="int32") /* ty=Tensor[(3), int32] */;
    %413 = cast(%410, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %414 = dyn.reshape(%411, %412, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %415 = cast(meta[relay.Constant][19] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %416 = cast(%var_5291, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %417 = reshape(%415, newshape=[]) /* ty=uint64 */;
    %418 = reshape(%416, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
    %419 = cast(%var_5267, dtype="float64") /* ty=Tensor[(13, 12, 10), float64] */;
    %420 = log(%419) /* ty=Tensor[(13, 12, 10), float64] */;
    %421 = cast(%410, dtype="uint64") /* ty=Tensor[(13, 12, 10), uint64] */;
    %422 = shape_of(%420, dtype="int32") /* ty=Tensor[(3), int32] */;
    %423 = cast(%420, dtype="uint64") /* ty=Tensor[(13, 12, 10), uint64] */;
    %424 = dyn.reshape(%421, %422, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %425 = bitwise_or(%423, %424) /* ty=Tensor[(13, 12, 10), uint64] */;
    %426 = cast(%var_5267, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %427 = shape_of(%425, dtype="int32") /* ty=Tensor[(3), int32] */;
    %428 = cast(%425, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %429 = dyn.reshape(%426, %427, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %430 = cast(%var_5267, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
    %431 = divide(%413, %414) /* ty=Tensor[(13, 12, 10), float32] */;
    %432 = @func_5125(%417, %418) /* ty=Tensor[(15, 3, 7), bool] */;
    %433 = floor_mod(%428, %429) /* ty=Tensor[(13, 12, 10), float32] */;
    %434 = log10(%430) /* ty=Tensor[(13, 12, 10), float32] */;
    (%431, %432, meta[relay.Constant][19] /* ty=uint64 */, %var_5291, %433, %434)
  };
  %435(%var_5324, %var_5325) /* ty=(Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) */
}

def @func_6282() -> (Tensor[(7, 7, 6), float64],) {
  @func_6280() /* ty=(Tensor[(7, 7, 6), float64],) */
}

def @func_7363(%var_7361: Tensor[(2535), float64]) -> (Tensor[(6, 260), float32], Tensor[(7, 7, 6), uint8], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  @func_7360(%var_7361) /* ty=(Tensor[(6, 260), float32], Tensor[(7, 7, 6), uint8], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) */
}

def @func_6800() -> Tensor[(14, 14, 3), float32] {
  @func_6798() /* ty=Tensor[(14, 14, 3), float32] */
}

def @func_6897() -> (Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) {
  %450 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) {
    %436 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
    %437 = cast(%436, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %438 = @func_6087() /* ty=Tensor[(6, 260), float32] */;
    %439 = cast(%438, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
    %440 = cast(meta[relay.Constant][20] /* ty=Tensor[(315, 1), uint64] */, dtype="uint64") /* ty=Tensor[(315, 1), uint64] */;
    %441 = reshape(%439, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
    %442 = reshape(%440, newshape=[315]) /* ty=Tensor[(315), uint64] */;
    %443 = @func_5323(%441, %442) /* ty=(Tensor[(13, 12, 10), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(13, 12, 10), float32], Tensor[(13, 12, 10), float32]) */;
    %444 = cast(meta[relay.Constant][21] /* ty=Tensor[(770, 3), int64] */, dtype="int64") /* ty=Tensor[(770, 3), int64] */;
    %445 = reshape(%444, newshape=[2310]) /* ty=Tensor[(2310), int64] */;
    %446 = @func_6009(%445) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) */;
    %447 = sin(%437) /* ty=Tensor[(7, 7, 6), float32] */;
    %448 = %443.2;
    %449 = %446.0;
    (%447, %438, %448, meta[relay.Constant][20] /* ty=Tensor[(315, 1), uint64] */, %449, meta[relay.Constant][21] /* ty=Tensor[(770, 3), int64] */)
  };
  %450() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) */
}

def @func_9065() -> (Tensor[(7, 7, 6), float64],) {
  %452 = fn () -> (Tensor[(7, 7, 6), float64],) {
    %451 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
    (%451,)
  };
  %452() /* ty=(Tensor[(7, 7, 6), float64],) */
}

def @func_8260(%var_8257: Tensor[(200), float32], %var_8258: Tensor[(936), float64], %var_8259: Tensor[(588, 1), float32]) -> (Tensor[(7, 7, 6), bool], Tensor[(200), float32], Tensor[(180), float32], Tensor[(936), float64], Tensor[(588, 1), float32], Tensor[(7, 7, 6), uint64], Tensor[(2, 10, 10), bool]) {
  %479 = fn (%var_8188: Tensor[(200), float32], %var_8200: Tensor[(936), float64], %var_8201: Tensor[(588, 1), float32]) -> (Tensor[(7, 7, 6), bool], Tensor[(200), float32], Tensor[(180), float32], Tensor[(936), float64], Tensor[(588, 1), float32], Tensor[(7, 7, 6), uint64], Tensor[(2, 10, 10), bool]) {
    %453 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
    %454 = cast(%var_8200, dtype="float64") /* ty=Tensor[(936), float64] */;
    %455 = cast(%var_8201, dtype="float32") /* ty=Tensor[(588, 1), float32] */;
    %456 = reshape(%454, newshape=[936]) /* ty=Tensor[(936), float64] */;
    %457 = reshape(%455, newshape=[294, 2]) /* ty=Tensor[(294, 2), float32] */;
    %458 = @func_5243(%456, %457) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(588), float32], Tensor[(936), float64], Tensor[(294, 2), float32], Tensor[(180), float32]) */;
    %459 = %453.0;
    %460 = cast(%459, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %461 = reshape(%460, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
    %462 = cast(%var_8188, dtype="float32") /* ty=Tensor[(200), float32] */;
    %463 = cast(%var_8188, dtype="float32") /* ty=Tensor[(200), float32] */;
    %464 = reshape(%462, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
    %465 = reshape(%463, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
    %466 = @func_114(%464, %465) /* ty=(Tensor[(2, 10, 10), bool],) */;
    %467 = %466.0;
    %468 = cast(%467, dtype="float64") /* ty=Tensor[(2, 10, 10), float64] */;
    %469 = erf(%468) /* ty=Tensor[(2, 10, 10), float64] */;
    %470 = cast(%469, dtype="float32") /* ty=Tensor[(2, 10, 10), float32] */;
    %471 = cos(%470) /* ty=Tensor[(2, 10, 10), float32] */;
    %472 = cast(%471, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
    %473 = shape_of(%469, dtype="int32") /* ty=Tensor[(3), int32] */;
    %474 = cast(%469, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
    %475 = dyn.reshape(%472, %473, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %476 = %458.4;
    %477 = @func_6615(%461) /* ty=Tensor[(7, 7, 6), uint64] */;
    %478 = logical_or(%474, %475) /* ty=Tensor[(2, 10, 10), bool] */;
    (%459, %var_8188, %476, %var_8200, %var_8201, %477, %478)
  };
  %479(%var_8257, %var_8258, %var_8259) /* ty=(Tensor[(7, 7, 6), bool], Tensor[(200), float32], Tensor[(180), float32], Tensor[(936), float64], Tensor[(588, 1), float32], Tensor[(7, 7, 6), uint64], Tensor[(2, 10, 10), bool]) */
}

def @func_9754() -> (Tensor[(315), uint64],) {
  %481 = fn () -> (Tensor[(315), uint64],) {
    %480 = @func_9712() /* ty=Tensor[(315), uint64] */;
    (%480,)
  };
  %481() /* ty=(Tensor[(315), uint64],) */
}

def @func_9301() -> (Tensor[(7, 7, 6), float64], Tensor[(15, 11, 14), int64], Tensor[(1, 2310), int64], Tensor[(7, 7, 6), float64]) {
  %482 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
  %483 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 2310), int64] */, dtype="int64") /* ty=Tensor[(1, 2310), int64] */;
  %484 = cast(meta[relay.Constant][22] /* ty=Tensor[(1, 2310), int64] */, dtype="int64") /* ty=Tensor[(1, 2310), int64] */;
  %485 = reshape(%483, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %486 = reshape(%484, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
  %487 = %482.1;
  %488 = @func_4366(%485, %486) /* ty=Tensor[(15, 11, 14), int64] */;
  %489 = @func_6376() /* ty=Tensor[(7, 7, 6), float64] */;
  (%487, %488, meta[relay.Constant][22] /* ty=Tensor[(1, 2310), int64] */, %489)
}

def @func_11661(%var_11659: Tensor[(231, 3), float64], %var_11660: Tensor[(30, 6), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(231, 3), float64], Tensor[(14, 14, 3), float32], Tensor[(180), float32], Tensor[(30, 6), float32]) {
  %504 = fn (%var_11633: Tensor[(231, 3), float64], %var_11644: Tensor[(30, 6), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(231, 3), float64], Tensor[(14, 14, 3), float32], Tensor[(180), float32], Tensor[(30, 6), float32]) {
    %490 = cast(%var_11633, dtype="float64") /* ty=Tensor[(231, 3), float64] */;
    %491 = reshape(%490, newshape=[693, 1]) /* ty=Tensor[(693, 1), float64] */;
    %492 = @func_7061(%491) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693, 1), float64], Tensor[(7, 7, 6), uint64], Tensor[(9, 7, 11), float32]) */;
    %493 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
    %494 = %493.1;
    %495 = cast(%494, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
    %496 = erf(%495) /* ty=Tensor[(14, 14, 3), float32] */;
    %497 = cast(%496, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
    %498 = cast(%var_11644, dtype="float32") /* ty=Tensor[(30, 6), float32] */;
    %499 = reshape(%498, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %500 = @func_7673(%499) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */;
    %501 = %492.0;
    %502 = log(%497) /* ty=Tensor[(14, 14, 3), float32] */;
    %503 = %500.2;
    (%501, %var_11633, %502, %503, %var_11644)
  };
  %504(%var_11659, %var_11660) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(231, 3), float64], Tensor[(14, 14, 3), float32], Tensor[(180), float32], Tensor[(30, 6), float32]) */
}

def @func_10609(%var_10608: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), uint32],) {
  %511 = fn (%var_10600: Tensor[(7, 7, 6), float32]) -> (Tensor[(7, 7, 6), uint32],) {
    %505 = @func_7851() /* ty=Tensor[(7, 7, 6), float32] */;
    %506 = cast(%var_10600, dtype="uint32") /* ty=Tensor[(7, 7, 6), uint32] */;
    %507 = shape_of(%505, dtype="int32") /* ty=Tensor[(3), int32] */;
    %508 = cast(%505, dtype="uint32") /* ty=Tensor[(7, 7, 6), uint32] */;
    %509 = dyn.reshape(%506, %507, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %510 = maximum(%508, %509) /* ty=Tensor[(7, 7, 6), uint32] */;
    (%510,)
  };
  %511(%var_10608) /* ty=(Tensor[(7, 7, 6), uint32],) */
}

def @func_5519() -> (Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) {
  @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */
}

def @func_10291() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) {
  @func_10289() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) */
}

def @func_11255() -> (Tensor[(7, 7, 6), float32],) {
  @func_11253() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_11503(%var_11502: Tensor[(1, 7, 7), float64]) -> (Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(1, 7, 7), float32]) {
  %520 = fn (%var_11483: Tensor[(1, 7, 7), float64]) -> (Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(1, 7, 7), float32]) {
    %512 = cast(meta[relay.Constant][23] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
    %513 = reshape(%512, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), float32] */;
    %514 = @func_1766(%513) /* ty=(Tensor[(1, 13, 15), float32],) */;
    %515 = cast(%var_11483, dtype="float64") /* ty=Tensor[(1, 7, 7), float64] */;
    %516 = log10(%515) /* ty=Tensor[(1, 7, 7), float64] */;
    %517 = cast(%516, dtype="float32") /* ty=Tensor[(1, 7, 7), float32] */;
    %518 = %514.0;
    %519 = sigmoid(%517) /* ty=Tensor[(1, 7, 7), float32] */;
    (%518, meta[relay.Constant][23] /* ty=Tensor[(195), float32] */, %519)
  };
  %520(%var_11502) /* ty=(Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(1, 7, 7), float32]) */
}

def @func_11215() -> Tensor[(7, 7, 6), uint64] {
  %521 = @func_10289() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) */;
  %521.0
}

def @func_5578(%var_5569: Tensor[(7, 7, 6), float64]) -> Tensor[(7, 7, 6), bool] {
  %522 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %523 = %522.1;
  %524 = cast(%var_5569, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %525 = shape_of(%523, dtype="int32") /* ty=Tensor[(3), int32] */;
  %526 = cast(%523, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
  %527 = dyn.reshape(%524, %525, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  less_equal(%526, %527) /* ty=Tensor[(7, 7, 6), bool] */
}

def @func_117(%var_115: Tensor[(2, 10, 10), float32], %var_116: Tensor[(2, 10, 10), float32]) -> (Tensor[(2, 10, 10), bool],) {
  %535 = fn (%var_97: Tensor[(2, 10, 10), float32], %var_108: Tensor[(2, 10, 10), float32]) -> (Tensor[(2, 10, 10), bool],) {
    %528 = cast(%var_97, dtype="float32") /* ty=Tensor[(2, 10, 10), float32] */;
    %529 = asinh(%528) /* ty=Tensor[(2, 10, 10), float32] */;
    %530 = cast(%var_108, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
    %531 = shape_of(%529, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%529, dtype="bool") /* ty=Tensor[(2, 10, 10), bool] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %534 = greater(%532, %533) /* ty=Tensor[(2, 10, 10), bool] */;
    (%534,)
  };
  %535(%var_115, %var_116) /* ty=(Tensor[(2, 10, 10), bool],) */
}

def @func_3801(%var_3791: Tensor[(14, 14, 3), float32]) -> (Tensor[(14, 14, 3), float32],) {
  %536 = cast(%var_3791, dtype="float32") /* ty=Tensor[(14, 14, 3), float32] */;
  %537 = atanh(%536) /* ty=Tensor[(14, 14, 3), float32] */;
  (%537,)
}

def @func_9829() -> Tensor[(7, 7, 6), uint64] {
  @func_9827() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_5970() -> (Tensor[(7, 7, 6), float32],) {
  %538 = @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */;
  %539 = %538.0;
  (%539,)
}

def @func_9902(%var_9901: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(13, 12, 10), float32]) {
  %548 = fn (%var_9869: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(13, 12, 10), float32]) {
    %540 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
    %541 = cast(%var_9869, dtype="float32") /* ty=Tensor[(180), float32] */;
    %542 = reshape(%541, newshape=[180]) /* ty=Tensor[(180), float32] */;
    %543 = @func_7673(%542) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(7, 7, 6), float32]) */;
    %544 = @func_7561() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) */;
    %545 = %540.1;
    %546 = %543.1;
    %547 = %544.2;
    (%545, %546, %var_9869, %547)
  };
  %548(%var_9901) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(13, 12, 10), float32]) */
}

def @func_3956(%var_3951: Tensor[(13, 15, 13), float64], %var_3952: Tensor[(13, 15, 13), float64]) -> Tensor[(13, 15, 13), float64] {
  %549 = cast(%var_3952, dtype="float64") /* ty=Tensor[(13, 15, 13), float64] */;
  %550 = shape_of(%var_3951, dtype="int32") /* ty=Tensor[(3), int32] */;
  %551 = cast(%var_3951, dtype="float64") /* ty=Tensor[(13, 15, 13), float64] */;
  %552 = dyn.reshape(%549, %550, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%551, %552) /* ty=Tensor[(13, 15, 13), float64] */
}

def @func_2450(%var_2448: Tensor[(7, 7), float64]) -> (Tensor[(7, 7), float64],) {
  @func_2447(%var_2448) /* ty=(Tensor[(7, 7), float64],) */
}

def @func_5215() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) {
  %553 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %554 = cast(%553, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %555 = cast(%553, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %556 = tan(%554) /* ty=Tensor[(7, 7, 6), float32] */;
  %557 = cos(%555) /* ty=Tensor[(7, 7, 6), float64] */;
  (%556, %557)
}

def @func_6945() -> (Tensor[(7, 7, 6), float32],) {
  @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_6943() -> (Tensor[(7, 7, 6), float32],) {
  %558 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %559 = %558.2;
  %560 = cast(%559, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %561 = rsqrt(%560) /* ty=Tensor[(7, 7, 6), float32] */;
  (%561,)
}

def @func_4925() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) {
  %571 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) {
    %562 = cast(meta[relay.Constant][24] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %563 = cast(meta[relay.Constant][25] /* ty=Tensor[(1, 49), float64] */, dtype="float64") /* ty=Tensor[(1, 49), float64] */;
    %564 = reshape(%563, newshape=[7, 7]) /* ty=Tensor[(7, 7), float64] */;
    %565 = @func_2447(%564) /* ty=(Tensor[(7, 7), float64],) */;
    %566 = cast(meta[relay.Constant][26] /* ty=Tensor[(6, 260), float32] */, dtype="float32") /* ty=Tensor[(6, 260), float32] */;
    %567 = reshape(%566, newshape=[13, 12, 10]) /* ty=Tensor[(13, 12, 10), float32] */;
    %568 = acos(%562) /* ty=Tensor[(7, 7, 6), float32] */;
    %569 = %565.0;
    %570 = @func_4700(%567) /* ty=Tensor[(13, 12, 10), float32] */;
    (%568, %569, meta[relay.Constant][25] /* ty=Tensor[(1, 49), float64] */, %570, meta[relay.Constant][26] /* ty=Tensor[(6, 260), float32] */)
  };
  %571() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */
}

def @func_8667(%var_8665: Tensor[(14, 10, 2), float32]) -> (Tensor[(14, 10, 2), float32], Tensor[(7, 7, 6), float32]) {
  @func_8664(%var_8665) /* ty=(Tensor[(14, 10, 2), float32], Tensor[(7, 7, 6), float32]) */
}

def @func_6541() -> (Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) {
  %586 = fn () -> (Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) {
    %572 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
    %573 = %572.1;
    %574 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %575 = shape_of(%573, dtype="int32") /* ty=Tensor[(3), int32] */;
    %576 = cast(%573, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %578 = floor_mod(%576, %577) /* ty=Tensor[(7, 7, 6), float64] */;
    %579 = cast(%578, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
    %580 = shape_of(meta[relay.Constant][27] /* ty=Tensor[(7, 7, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %581 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 7, 6), float32] */, dtype="bool") /* ty=Tensor[(7, 7, 6), bool] */;
    %582 = dyn.reshape(%579, %580, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %583 = cast(meta[relay.Constant][27] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %584 = less(%581, %582) /* ty=Tensor[(7, 7, 6), bool] */;
    %585 = asin(%583) /* ty=Tensor[(7, 7, 6), float32] */;
    (%584, %585)
  };
  %586() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */
}

def @func_5738() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) {
  %587 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %588 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
  %590 = sigmoid(%589) /* ty=Tensor[(7, 7, 6), float32] */;
  %591 = cast(%590, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %592 = reshape(%591, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float64] */;
  %593 = %587.0;
  %594 = @func_5578(%592) /* ty=Tensor[(7, 7, 6), bool] */;
  (%593, %590, %594)
}

def @func_7561() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) {
  %595 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %596 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
  %597 = %596.0;
  %598 = cast(%597, dtype="float32") /* ty=Tensor[(13, 12, 10), float32] */;
  %599 = %595.0;
  %600 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  %601 = acos(%598) /* ty=Tensor[(13, 12, 10), float32] */;
  %602 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
  (%599, %600, %601, %602)
}

def @func_3804(%var_3802: Tensor[(14, 14, 3), float32]) -> (Tensor[(14, 14, 3), float32],) {
  @func_3801(%var_3802) /* ty=(Tensor[(14, 14, 3), float32],) */
}

def @func_8036() -> (Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) {
  %603 = @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %604 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
  %605 = %603.0;
  (%604, %605)
}

def @func_7725() -> (Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) {
  @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */
}

def @func_968(%var_966: uint16, %var_967: Tensor[(11, 7, 7), uint16]) -> (Tensor[(11, 7, 7), bool], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) {
  @func_964(%var_966, %var_967) /* ty=(Tensor[(11, 7, 7), bool], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) */
}

def @func_6553() -> (Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) {
  %606 = @func_5970() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %607 = cast(meta[relay.Constant][28] /* ty=Tensor[(588), float32] */, dtype="float32") /* ty=Tensor[(588), float32] */;
  %608 = reshape(%607, newshape=[14, 14, 3]) /* ty=Tensor[(14, 14, 3), float32] */;
  %609 = @func_3801(%608) /* ty=(Tensor[(14, 14, 3), float32],) */;
  %610 = %606.0;
  %611 = %609.0;
  (%610, %611, meta[relay.Constant][28] /* ty=Tensor[(588), float32] */)
}

def @func_6555() -> (Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) {
  @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */
}

def @func_9827() -> Tensor[(7, 7, 6), uint64] {
  %612 = @func_7561() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), uint64]) */;
  %612.0
}

def @func_11253() -> (Tensor[(7, 7, 6), float32],) {
  %613 = @func_7851() /* ty=Tensor[(7, 7, 6), float32] */;
  (%613,)
}

def @func_11293() -> (Tensor[(693), float32], Tensor[(7, 7, 6), float64]) {
  @func_11291() /* ty=(Tensor[(693), float32], Tensor[(7, 7, 6), float64]) */
}

def @func_7496() -> (Tensor[(7, 7, 6), float32],) {
  %616 = fn () -> (Tensor[(7, 7, 6), float32],) {
    %614 = @func_6260() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
    %615 = %614.0;
    (%615,)
  };
  %616() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_9084() -> (Tensor[(13, 12, 10), float32], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
  %624 = fn () -> (Tensor[(13, 12, 10), float32], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) {
    %617 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
    %618 = cast(meta[relay.Constant][29] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %619 = cast(meta[relay.Constant][29] /* ty=Tensor[(2535), float64] */, dtype="float64") /* ty=Tensor[(2535), float64] */;
    %620 = reshape(%618, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
    %621 = reshape(%619, newshape=[13, 15, 13]) /* ty=Tensor[(13, 15, 13), float64] */;
    %622 = %617.0;
    %623 = @func_3956(%620, %621) /* ty=Tensor[(13, 15, 13), float64] */;
    (%622, %623, meta[relay.Constant][29] /* ty=Tensor[(2535), float64] */)
  };
  %624() /* ty=(Tensor[(13, 12, 10), float32], Tensor[(13, 15, 13), float64], Tensor[(2535), float64]) */
}

def @func_357(%var_351: Tensor[(3, 4, 15), float32]) -> (Tensor[(3, 4, 15), float32],) {
  %625 = cast(%var_351, dtype="float32") /* ty=Tensor[(3, 4, 15), float32] */;
  %626 = log(%625) /* ty=Tensor[(3, 4, 15), float32] */;
  (%626,)
}

def @func_9395() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) {
  %632 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) {
    %627 = @func_6968() /* ty=(Tensor[(7, 7, 6), float32],) */;
    %628 = %627.0;
    %629 = cast(%628, dtype="float32") /* ty=Tensor[(7, 7, 6), float32] */;
    %630 = reshape(%629, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float32] */;
    %631 = @func_6615(%630) /* ty=Tensor[(7, 7, 6), uint64] */;
    (%628, %631)
  };
  %632() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) */
}

def @func_6011(%var_6010: Tensor[(2310), int64]) -> (Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
  %640 = fn (%var_5998: Tensor[(2310), int64]) -> (Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
    %633 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
    %634 = cast(%var_5998, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %635 = cast(%var_5998, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %636 = reshape(%634, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
    %637 = reshape(%635, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
    %638 = %633.1;
    %639 = @func_4366(%636, %637) /* ty=Tensor[(15, 11, 14), int64] */;
    (%638, %639, %var_5998)
  };
  %640(%var_6010) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) */
}

def @func_264(%var_261: Tensor[(1, 16, 3), uint64], %var_262: Tensor[(8, 16, 3), uint64], %var_263: Tensor[(8, 16, 3), uint64]) -> (Tensor[(8, 16, 3), uint64], Tensor[(2, 10, 10), bool], Tensor[(200), float32], Tensor[(8, 16, 3), float32]) {
  @func_259(%var_261, %var_262, %var_263) /* ty=(Tensor[(8, 16, 3), uint64], Tensor[(2, 10, 10), bool], Tensor[(200), float32], Tensor[(8, 16, 3), float32]) */
}

def @func_6968() -> (Tensor[(7, 7, 6), float32],) {
  %641 = @func_6943() /* ty=(Tensor[(7, 7, 6), float32],) */;
  %642 = %641.0;
  (%642,)
}

def @func_6640() -> (Tensor[(13, 12, 10), float32],) {
  %645 = fn () -> (Tensor[(13, 12, 10), float32],) {
    %643 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
    %644 = %643.1;
    (%644,)
  };
  %645() /* ty=(Tensor[(13, 12, 10), float32],) */
}

def @func_9592(%var_9590: Tensor[(5, 1, 13), float64]) -> (Tensor[(5, 1, 13), float64],) {
  @func_9589(%var_9590) /* ty=(Tensor[(5, 1, 13), float64],) */
}

def @func_8539() -> (Tensor[(7, 7, 6), float32], Tensor[(693), float32]) {
  %650 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(693), float32]) {
    %646 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
    %647 = @func_8380() /* ty=(Tensor[(693), float32],) */;
    %648 = %646.1;
    %649 = %647.0;
    (%648, %649)
  };
  %650() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693), float32]) */
}

def @func_10099(%var_10097: Tensor[(13, 16, 3), float32], %var_10098: Tensor[(13, 16, 3), float32]) -> (Tensor[(13, 16, 3), bool],) {
  @func_10095(%var_10097, %var_10098) /* ty=(Tensor[(13, 16, 3), bool],) */
}

def @func_5851() -> (Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) {
  @func_5849() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) */
}

def @func_5905() -> (Tensor[(7, 7, 6), float32],) {
  @func_5903() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @func_5390() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) {
  %660 = fn () -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) {
    %651 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
    %652 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
    %653 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
    %654 = cast(%653, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %655 = log2(%654) /* ty=Tensor[(7, 7, 6), float64] */;
    %656 = cast(%655, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %657 = %651.0;
    %658 = %652.1;
    %659 = exp(%656) /* ty=Tensor[(7, 7, 6), float64] */;
    (%657, %658, %659)
  };
  %660() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */
}

def @func_5243(%var_5231: Tensor[(936), float64], %var_5232: Tensor[(294, 2), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(588), float32], Tensor[(936), float64], Tensor[(294, 2), float32], Tensor[(180), float32]) {
  %661 = cast(%var_5231, dtype="float64") /* ty=Tensor[(936), float64] */;
  %662 = cast(%var_5232, dtype="float32") /* ty=Tensor[(294, 2), float32] */;
  %663 = cast(meta[relay.Constant][30] /* ty=Tensor[(180), float32] */, dtype="float32") /* ty=Tensor[(180), float32] */;
  %664 = reshape(%661, newshape=[8, 9, 13]) /* ty=Tensor[(8, 9, 13), float64] */;
  %665 = reshape(%662, newshape=[588]) /* ty=Tensor[(588), float32] */;
  %666 = reshape(%663, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %667 = @func_4012(%664, %665, %666) /* ty=(Tensor[(8, 9, 13), float64], Tensor[(14, 14, 3), float32], Tensor[(588), float32], Tensor[(3, 4, 15), float32], Tensor[(180), float32]) */;
  %668 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  %669 = %667.2;
  (%668, %669, %var_5231, %var_5232, meta[relay.Constant][30] /* ty=Tensor[(180), float32] */)
}

def @func_1768(%var_1767: Tensor[(1, 13, 15), float32]) -> (Tensor[(1, 13, 15), float32],) {
  %672 = fn (%var_1761: Tensor[(1, 13, 15), float32]) -> (Tensor[(1, 13, 15), float32],) {
    %670 = cast(%var_1761, dtype="float32") /* ty=Tensor[(1, 13, 15), float32] */;
    %671 = exp(%670) /* ty=Tensor[(1, 13, 15), float32] */;
    (%671,)
  };
  %672(%var_1767) /* ty=(Tensor[(1, 13, 15), float32],) */
}

def @func_9177() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
  %681 = fn () -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) {
    %673 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
    %674 = cast(meta[relay.Constant][31] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %675 = cast(meta[relay.Constant][31] /* ty=Tensor[(2310), int64] */, dtype="int64") /* ty=Tensor[(2310), int64] */;
    %676 = reshape(%674, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
    %677 = reshape(%675, newshape=[15, 11, 14]) /* ty=Tensor[(15, 11, 14), int64] */;
    %678 = %673.0;
    %679 = @func_6920() /* ty=Tensor[(7, 7, 6), float32] */;
    %680 = @func_4366(%676, %677) /* ty=Tensor[(15, 11, 14), int64] */;
    (%678, %679, %680, meta[relay.Constant][31] /* ty=Tensor[(2310), int64] */)
  };
  %681() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float32], Tensor[(15, 11, 14), int64], Tensor[(2310), int64]) */
}

def @func_10876() -> (Tensor[(10, 15, 14), float64], Tensor[(7, 7, 6), float32]) {
  %686 = fn () -> (Tensor[(10, 15, 14), float64], Tensor[(7, 7, 6), float32]) {
    %682 = cast(meta[relay.Constant][32] /* ty=Tensor[(10, 15, 14), float64] */, dtype="float64") /* ty=Tensor[(10, 15, 14), float64] */;
    %683 = @func_8313() /* ty=(Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), float32], Tensor[(315), uint64]) */;
    %684 = sin(%682) /* ty=Tensor[(10, 15, 14), float64] */;
    %685 = %683.1;
    (%684, %685)
  };
  %686() /* ty=(Tensor[(10, 15, 14), float64], Tensor[(7, 7, 6), float32]) */
}

def @func_11217() -> Tensor[(7, 7, 6), uint64] {
  @func_11215() /* ty=Tensor[(7, 7, 6), uint64] */
}

def @func_5247(%var_5245: Tensor[(936), float64], %var_5246: Tensor[(294, 2), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(588), float32], Tensor[(936), float64], Tensor[(294, 2), float32], Tensor[(180), float32]) {
  @func_5243(%var_5245, %var_5246) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(588), float32], Tensor[(936), float64], Tensor[(294, 2), float32], Tensor[(180), float32]) */
}

def @func_11145() -> (Tensor[(7, 7, 6), float32],) {
  %688 = fn () -> (Tensor[(7, 7, 6), float32],) {
    %687 = @func_9642() /* ty=Tensor[(7, 7, 6), float32] */;
    (%687,)
  };
  %688() /* ty=(Tensor[(7, 7, 6), float32],) */
}

def @main() -> Tensor[(3, 12, 8), uint64] {
  %689 = cast(meta[relay.Constant][34] /* ty=Tensor[(3, 12, 8), uint64] */, dtype="uint64") /* ty=Tensor[(3, 12, 8), uint64] */;
  %690 = shape_of(meta[relay.Constant][33] /* ty=Tensor[(3, 12, 8), uint64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %691 = cast(meta[relay.Constant][33] /* ty=Tensor[(3, 12, 8), uint64] */, dtype="uint64") /* ty=Tensor[(3, 12, 8), uint64] */;
  %692 = dyn.reshape(%689, %690, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  right_shift(%691, %692) /* ty=Tensor[(3, 12, 8), uint64] */
}

def @func_8446(%var_8443: Tensor[(7, 5, 15), uint32], %var_8444: Tensor[(7, 5, 15), uint32], %var_8445: Tensor[(7, 5, 15), float64]) -> (Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) {
  %712 = fn (%var_8403: Tensor[(7, 5, 15), uint32], %var_8404: Tensor[(7, 5, 15), uint32], %var_8426: Tensor[(7, 5, 15), float64]) -> (Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) {
    %693 = cast(%var_8404, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
    %694 = shape_of(%var_8403, dtype="int32") /* ty=Tensor[(3), int32] */;
    %695 = cast(%var_8403, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
    %696 = dyn.reshape(%693, %694, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %697 = cast(%var_8404, dtype="float64") /* ty=Tensor[(7, 5, 15), float64] */;
    %698 = exp(%697) /* ty=Tensor[(7, 5, 15), float64] */;
    %699 = cast(%var_8426, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
    %700 = shape_of(%698, dtype="int32") /* ty=Tensor[(3), int32] */;
    %701 = cast(%698, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
    %702 = dyn.reshape(%699, %700, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %703 = maximum(%701, %702) /* ty=Tensor[(7, 5, 15), uint32] */;
    %704 = cast(%var_8404, dtype="int16") /* ty=Tensor[(7, 5, 15), int16] */;
    %705 = shape_of(%703, dtype="int32") /* ty=Tensor[(3), int32] */;
    %706 = cast(%703, dtype="int16") /* ty=Tensor[(7, 5, 15), int16] */;
    %707 = dyn.reshape(%704, %705, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %708 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
    %709 = bitwise_xor(%695, %696) /* ty=Tensor[(7, 5, 15), uint32] */;
    %710 = left_shift(%706, %707) /* ty=Tensor[(7, 5, 15), int16] */;
    %711 = %708.1;
    (%709, %710, %711)
  };
  %712(%var_8443, %var_8444, %var_8445) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */
}

def @func_827(%var_823: Tensor[(3, 4, 5), float64]) -> (Tensor[(3, 4, 5), float64],) {
  %713 = cast(%var_823, dtype="float64") /* ty=Tensor[(3, 4, 5), float64] */;
  %714 = sinh(%713) /* ty=Tensor[(3, 4, 5), float64] */;
  (%714,)
}

def @func_11087() -> (Tensor[(7, 7, 6), uint64],) {
  %716 = fn () -> (Tensor[(7, 7, 6), uint64],) {
    %715 = @func_6995() /* ty=Tensor[(7, 7, 6), uint64] */;
    (%715,)
  };
  %716() /* ty=(Tensor[(7, 7, 6), uint64],) */
}

def @func_8314() -> (Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), float32], Tensor[(315), uint64]) {
  %723 = fn () -> (Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), float32], Tensor[(315), uint64]) {
    %717 = @func_6639() /* ty=(Tensor[(13, 12, 10), float32],) */;
    %718 = cast(meta[relay.Constant][35] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %719 = reshape(%718, newshape=[5, 63]) /* ty=Tensor[(5, 63), uint64] */;
    %720 = @func_7986(%719) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */;
    %721 = %717.0;
    %722 = %720.1;
    (%721, %722, meta[relay.Constant][35] /* ty=Tensor[(315), uint64] */)
  };
  %723() /* ty=(Tensor[(13, 12, 10), float32], Tensor[(7, 7, 6), float32], Tensor[(315), uint64]) */
}

def @func_6280() -> (Tensor[(7, 7, 6), float64],) {
  %724 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
  %725 = cast(%724, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %726 = log10(%725) /* ty=Tensor[(7, 7, 6), float64] */;
  (%726,)
}

def @func_9589(%var_9583: Tensor[(5, 1, 13), float64]) -> (Tensor[(5, 1, 13), float64],) {
  %727 = cast(%var_9583, dtype="float64") /* ty=Tensor[(5, 1, 13), float64] */;
  %728 = log(%727) /* ty=Tensor[(5, 1, 13), float64] */;
  (%728,)
}

def @func_10596(%var_10593: Tensor[(24, 26), float32], %var_10594: Tensor[(525), uint32], %var_10595: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(13, 16, 3), bool], Tensor[(24, 26), float32], Tensor[(7, 5, 15), int16], Tensor[(525), uint32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 5, 15), uint32], Tensor[(7, 7, 6), float64], Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(7, 7, 6), float64]) {
  @func_10591(%var_10593, %var_10594, %var_10595) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(13, 16, 3), bool], Tensor[(24, 26), float32], Tensor[(7, 5, 15), int16], Tensor[(525), uint32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 5, 15), uint32], Tensor[(7, 7, 6), float64], Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(7, 7, 6), float64]) */
}

def @func_3960(%var_3958: Tensor[(13, 15, 13), float64], %var_3959: Tensor[(13, 15, 13), float64]) -> Tensor[(13, 15, 13), float64] {
  @func_3956(%var_3958, %var_3959) /* ty=Tensor[(13, 15, 13), float64] */
}

def @func_6921() -> Tensor[(7, 7, 6), float32] {
  %729 = fn () -> Tensor[(7, 7, 6), float32] {
    @func_4944() /* ty=Tensor[(7, 7, 6), float32] */
  };
  %729() /* ty=Tensor[(7, 7, 6), float32] */
}

def @func_6377() -> Tensor[(7, 7, 6), float64] {
  %730 = fn () -> Tensor[(7, 7, 6), float64] {
    @func_6144() /* ty=Tensor[(7, 7, 6), float64] */
  };
  %730() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_5496() -> Tensor[(7, 7, 6), float64] {
  %731 = @func_4944() /* ty=Tensor[(7, 7, 6), float32] */;
  %732 = cast(%731, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  sqrt(%732) /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_5129(%var_5127: uint64, %var_5128: Tensor[(15, 3, 7), uint64]) -> Tensor[(15, 3, 7), bool] {
  @func_5125(%var_5127, %var_5128) /* ty=Tensor[(15, 3, 7), bool] */
}

def @func_11032() -> (Tensor[(7, 7, 6), bool],) {
  @func_11030() /* ty=(Tensor[(7, 7, 6), bool],) */
}

def @func_7244(%var_7242: uint64, %var_7243: Tensor[(315), uint64]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(7, 7, 6), float64]) {
  %744 = fn (%var_7220: uint64, %var_7221: Tensor[(315), uint64]) -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(7, 7, 6), float64]) {
    %733 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
    %734 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
    %735 = cast(%var_7220, dtype="uint64") /* ty=uint64 */;
    %736 = cast(%var_7221, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %737 = reshape(%735, newshape=[]) /* ty=uint64 */;
    %738 = reshape(%736, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
    %739 = @func_5215() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64]) */;
    %740 = %733.0;
    %741 = %734.0;
    %742 = @func_5125(%737, %738) /* ty=Tensor[(15, 3, 7), bool] */;
    %743 = %739.1;
    (%740, %741, %742, %var_7220, %var_7221, %743)
  };
  %744(%var_7242, %var_7243) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(7, 7, 6), float64]) */
}

def @func_5517() -> (Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) {
  %745 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
  %746 = @func_5004() /* ty=Tensor[(7, 7, 6), uint64] */;
  %747 = %745.3;
  (%746, %747)
}

def @func_10849() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) {
  @func_10847() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */
}

def @func_360(%var_358: Tensor[(3, 4, 15), float32]) -> (Tensor[(3, 4, 15), float32],) {
  @func_357(%var_358) /* ty=(Tensor[(3, 4, 15), float32],) */
}

def @func_11130(%var_11128: uint64) -> (Tensor[(7, 7, 6), float64], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(15, 3, 7), bool]) {
  @func_11127(%var_11128) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(15, 3, 7), bool], uint64, Tensor[(315), uint64], Tensor[(15, 3, 7), bool]) */
}

def @func_10289() -> (Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), uint64]) {
  %748 = @func_9394() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) */;
  %749 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %750 = %749.1;
  %751 = cast(%750, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %752 = @func_9394() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), uint64]) */;
  %753 = %748.1;
  %754 = sinh(%751) /* ty=Tensor[(7, 7, 6), float64] */;
  %755 = %752.1;
  (%753, %754, %755)
}

def @func_5698() -> Tensor[(7, 7, 6), float64] {
  @func_5696() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_2447(%var_2428: Tensor[(7, 7), float64]) -> (Tensor[(7, 7), float64],) {
  %756 = cast(%var_2428, dtype="float64") /* ty=Tensor[(7, 7), float64] */;
  %757 = atanh(%756) /* ty=Tensor[(7, 7), float64] */;
  (%757,)
}

def @func_5849() -> (Tensor[(7, 7, 6), float32], Tensor[(9, 7, 11), float64], Tensor[(693), float64]) {
  %758 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %759 = cast(meta[relay.Constant][36] /* ty=Tensor[(693), float64] */, dtype="float64") /* ty=Tensor[(693), float64] */;
  %760 = reshape(%759, newshape=[9, 7, 11]) /* ty=Tensor[(9, 7, 11), float64] */;
  %761 = @func_2323(%760) /* ty=(Tensor[(9, 7, 11), float64],) */;
  %762 = %758.0;
  %763 = %761.0;
  (%762, %763, meta[relay.Constant][36] /* ty=Tensor[(693), float64] */)
}

def @func_6088() -> Tensor[(6, 260), float32] {
  %765 = fn () -> Tensor[(6, 260), float32] {
    %764 = @func_4924() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7), float64], Tensor[(1, 49), float64], Tensor[(13, 12, 10), float32], Tensor[(6, 260), float32]) */;
    %764.4
  };
  %765() /* ty=Tensor[(6, 260), float32] */
}

def @func_8664(%var_8659: Tensor[(14, 10, 2), float32]) -> (Tensor[(14, 10, 2), float32], Tensor[(7, 7, 6), float32]) {
  %766 = cast(%var_8659, dtype="float32") /* ty=Tensor[(14, 10, 2), float32] */;
  %767 = @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */;
  %768 = sqrt(%766) /* ty=Tensor[(14, 10, 2), float32] */;
  %769 = %767.1;
  (%768, %769)
}

def @func_9303() -> (Tensor[(7, 7, 6), float64], Tensor[(15, 11, 14), int64], Tensor[(1, 2310), int64], Tensor[(7, 7, 6), float64]) {
  @func_9301() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(15, 11, 14), int64], Tensor[(1, 2310), int64], Tensor[(7, 7, 6), float64]) */
}

def @func_8739() -> (Tensor[(14, 14, 3), float32], Tensor[(7, 7, 6), float32]) {
  %773 = fn () -> (Tensor[(14, 14, 3), float32], Tensor[(7, 7, 6), float32]) {
    %770 = @func_6896() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(6, 260), float32], uint64, Tensor[(315, 1), uint64], Tensor[(7, 7, 6), float32], Tensor[(770, 3), int64]) */;
    %771 = @func_6798() /* ty=Tensor[(14, 14, 3), float32] */;
    %772 = %770.0;
    (%771, %772)
  };
  %773() /* ty=(Tensor[(14, 14, 3), float32], Tensor[(7, 7, 6), float32]) */
}

def @func_10095(%var_10079: Tensor[(13, 16, 3), float32], %var_10080: Tensor[(13, 16, 3), float32]) -> (Tensor[(13, 16, 3), bool],) {
  %774 = cast(%var_10080, dtype="bool") /* ty=Tensor[(13, 16, 3), bool] */;
  %775 = shape_of(%var_10079, dtype="int32") /* ty=Tensor[(3), int32] */;
  %776 = cast(%var_10079, dtype="bool") /* ty=Tensor[(13, 16, 3), bool] */;
  %777 = dyn.reshape(%774, %775, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %778 = greater_equal(%776, %777) /* ty=Tensor[(13, 16, 3), bool] */;
  (%778,)
}

def @func_2409(%var_2407: Tensor[(1, 13, 6), float32], %var_2408: Tensor[(200), float32]) -> (Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) {
  %787 = fn (%var_2396: Tensor[(1, 13, 6), float32], %var_2400: Tensor[(200), float32]) -> (Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) {
    %779 = cast(%var_2396, dtype="float32") /* ty=Tensor[(1, 13, 6), float32] */;
    %780 = cast(%var_2400, dtype="float32") /* ty=Tensor[(200), float32] */;
    %781 = cast(%var_2400, dtype="float32") /* ty=Tensor[(200), float32] */;
    %782 = reshape(%780, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
    %783 = reshape(%781, newshape=[2, 10, 10]) /* ty=Tensor[(2, 10, 10), float32] */;
    %784 = @func_114(%782, %783) /* ty=(Tensor[(2, 10, 10), bool],) */;
    %785 = asin(%779) /* ty=Tensor[(1, 13, 6), float32] */;
    %786 = %784.0;
    (%785, %786, %var_2400)
  };
  %787(%var_2407, %var_2408) /* ty=(Tensor[(1, 13, 6), float32], Tensor[(2, 10, 10), bool], Tensor[(200), float32]) */
}

def @func_10350(%var_10349: Tensor[(14, 2, 16), float64]) -> (Tensor[(14, 2, 16), bool], Tensor[(12, 130), float32], Tensor[(315), uint64]) {
  %799 = fn (%var_10315: Tensor[(14, 2, 16), float64]) -> (Tensor[(14, 2, 16), bool], Tensor[(12, 130), float32], Tensor[(315), uint64]) {
    %788 = cast(%var_10315, dtype="float64") /* ty=Tensor[(14, 2, 16), float64] */;
    %789 = sin(%788) /* ty=Tensor[(14, 2, 16), float64] */;
    %790 = cast(%789, dtype="bool") /* ty=Tensor[(14, 2, 16), bool] */;
    %791 = shape_of(%var_10315, dtype="int32") /* ty=Tensor[(3), int32] */;
    %792 = cast(%var_10315, dtype="bool") /* ty=Tensor[(14, 2, 16), bool] */;
    %793 = dyn.reshape(%790, %791, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %794 = cast(meta[relay.Constant][37] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %795 = reshape(%794, newshape=[5, 63]) /* ty=Tensor[(5, 63), uint64] */;
    %796 = @func_7986(%795) /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(5, 63), uint64], Tensor[(12, 130), float32]) */;
    %797 = less(%792, %793) /* ty=Tensor[(14, 2, 16), bool] */;
    %798 = %796.4;
    (%797, %798, meta[relay.Constant][37] /* ty=Tensor[(315), uint64] */)
  };
  %799(%var_10349) /* ty=(Tensor[(14, 2, 16), bool], Tensor[(12, 130), float32], Tensor[(315), uint64]) */
}

def @func_10738(%var_10736: Tensor[(14, 14, 3), float32]) -> (Tensor[(14, 14, 3), int8], Tensor[(13, 12, 10), float32], Tensor[(1560), float32], Tensor[(7, 7, 6), float64], Tensor[(14, 14, 3), int64]) {
  @func_10735(%var_10736) /* ty=(Tensor[(14, 14, 3), int8], Tensor[(13, 12, 10), float32], Tensor[(1560), float32], Tensor[(7, 7, 6), float64], Tensor[(14, 14, 3), int64]) */
}

def @func_8589() -> (Tensor[(7, 7, 6), float64],) {
  @func_8587() /* ty=(Tensor[(7, 7, 6), float64],) */
}

def @func_6145() -> Tensor[(7, 7, 6), float64] {
  %806 = fn () -> Tensor[(7, 7, 6), float64] {
    %800 = @func_5389() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
    %801 = %800.0;
    %802 = cast(meta[relay.Constant][38] /* ty=Tensor[(7, 7, 6), float32] */, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %803 = shape_of(%801, dtype="int32") /* ty=Tensor[(3), int32] */;
    %804 = cast(%801, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %805 = dyn.reshape(%802, %803, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    divide(%804, %805) /* ty=Tensor[(7, 7, 6), float64] */
  };
  %806() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_6798() -> Tensor[(14, 14, 3), float32] {
  %807 = @func_6553() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(14, 14, 3), float32], Tensor[(588), float32]) */;
  %807.1
}

def @func_9411() -> Tensor[(7, 7, 6), float64] {
  %809 = fn () -> Tensor[(7, 7, 6), float64] {
    %808 = @func_9064() /* ty=(Tensor[(7, 7, 6), float64],) */;
    %808.0
  };
  %809() /* ty=Tensor[(7, 7, 6), float64] */
}

def @func_9652() -> Tensor[(7, 7, 6), uint64] {
  %810 = @func_5517() /* ty=(Tensor[(7, 7, 6), uint64], Tensor[(13, 12, 10), float32]) */;
  %810.0
}

def @func_10591(%var_10429: Tensor[(24, 26), float32], %var_10438: Tensor[(525), uint32], %var_10444: Tensor[(180), float32]) -> (Tensor[(7, 7, 6), float32], Tensor[(13, 16, 3), bool], Tensor[(24, 26), float32], Tensor[(7, 5, 15), int16], Tensor[(525), uint32], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 5, 15), uint32], Tensor[(7, 7, 6), float64], Tensor[(1, 13, 15), float32], Tensor[(195), float32], Tensor[(7, 7, 6), float64]) {
  %811 = @func_5895() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32]) */;
  %812 = cast(%var_10429, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %813 = cast(%var_10429, dtype="float32") /* ty=Tensor[(24, 26), float32] */;
  %814 = reshape(%812, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), float32] */;
  %815 = reshape(%813, newshape=[13, 16, 3]) /* ty=Tensor[(13, 16, 3), float32] */;
  %816 = @func_10095(%814, %815) /* ty=(Tensor[(13, 16, 3), bool],) */;
  %817 = cast(%var_10438, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %818 = cast(%var_10438, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %819 = cast(%var_10438, dtype="float64") /* ty=Tensor[(525), float64] */;
  %820 = reshape(%817, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %821 = reshape(%818, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %822 = reshape(%819, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), float64] */;
  %823 = @func_8442(%820, %821, %822) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */;
  %824 = @func_8984() /* ty=(Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) */;
  %825 = cast(%var_10444, dtype="float32") /* ty=Tensor[(180), float32] */;
  %826 = reshape(%825, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %827 = @func_10193(%826) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(2, 2, 4), uint8], Tensor[(1, 16), float64], Tensor[(7, 7, 6), float32], Tensor[(180), float32]) */;
  %828 = %824.2;
  %829 = cast(%828, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
  %830 = reshape(%829, newshape=[7, 7, 6]) /* ty=Tensor[(7, 7, 6), float64] */;
  %831 = @func_8036() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float32]) */;
  %832 = @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %833 = cast(%var_10438, dtype="uint32") /* ty=Tensor[(525), uint32] */;
  %834 = %823.1;
  %835 = cast(%834, dtype="uint32") /* ty=Tensor[(7, 5, 15), uint32] */;
  %836 = cast(%834, dtype="float64") /* ty=Tensor[(7, 5, 15), float64] */;
  %837 = reshape(%833, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %838 = reshape(%835, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), uint32] */;
  %839 = reshape(%836, newshape=[7, 5, 15]) /* ty=Tensor[(7, 5, 15), float64] */;
  %840 = @func_8442(%837, %838, %839) /* ty=(Tensor[(7, 5, 15), uint32], Tensor[(7, 5, 15), int16], Tensor[(7, 7, 6), float32]) */;
  %841 = cast(%var_10444, dtype="float32") /* ty=Tensor[(180), float32] */;
  %842 = reshape(%841, newshape=[180]) /* ty=Tensor[(180), float32] */;
  %843 = @func_9900(%842) /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(180), float32], Tensor[(13, 12, 10), float32]) */;
  %844 = cast(meta[relay.Constant][39] /* ty=Tensor[(195), float32] */, dtype="float32") /* ty=Tensor[(195), float32] */;
  %845 = reshape(%844, newshape=[1, 13, 15]) /* ty=Tensor[(1, 13, 15), float32] */;
  %846 = @func_1766(%845) /* ty=(Tensor[(1, 13, 15), float32],) */;
  %847 = @func_7723() /* ty=(Tensor[(2, 2, 4), float64], Tensor[(7, 7, 6), float64]) */;
  %848 = %811.1;
  %849 = %816.0;
  %850 = %827.3;
  %851 = @func_5578(%830) /* ty=Tensor[(7, 7, 6), bool] */;
  %852 = @func_9827() /* ty=Tensor[(7, 7, 6), uint64] */;
  %853 = %831.0;
  %854 = %832.0;
  %855 = %840.0;
  %856 = %843.1;
  %857 = %846.0;
  %858 = %847.1;
  (%848, %849, %var_10429, %834, %var_10438, %828, %850, %var_10444, %851, %852, %853, %854, %855, %856, %857, meta[relay.Constant][39] /* ty=Tensor[(195), float32] */, %858)
}

def @func_5740() -> (Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) {
  @func_5738() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), float32], Tensor[(7, 7, 6), bool]) */
}

def @func_8985() -> (Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) {
  %873 = fn () -> (Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) {
    %859 = cast(meta[relay.Constant][40] /* ty=uint64 */, dtype="uint64") /* ty=uint64 */;
    %860 = cast(meta[relay.Constant][41] /* ty=Tensor[(315), uint64] */, dtype="uint64") /* ty=Tensor[(315), uint64] */;
    %861 = reshape(%859, newshape=[]) /* ty=uint64 */;
    %862 = reshape(%860, newshape=[15, 3, 7]) /* ty=Tensor[(15, 3, 7), uint64] */;
    %863 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
    %864 = %863.0;
    %865 = cast(%864, dtype="float64") /* ty=Tensor[(7, 7, 6), float64] */;
    %866 = cast(meta[relay.Constant][40] /* ty=uint64 */, dtype="float64") /* ty=float64 */;
    %867 = @func_6540() /* ty=(Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float32]) */;
    %868 = @func_5125(%861, %862) /* ty=Tensor[(15, 3, 7), bool] */;
    %869 = floor_divide(%865, %866) /* ty=Tensor[(7, 7, 6), float64] */;
    %870 = @func_5496() /* ty=Tensor[(7, 7, 6), float64] */;
    %871 = %867.0;
    %872 = @func_6144() /* ty=Tensor[(7, 7, 6), float64] */;
    (%868, meta[relay.Constant][41] /* ty=Tensor[(315), uint64] */, %869, %870, %871, %872)
  };
  %873() /* ty=(Tensor[(15, 3, 7), bool], Tensor[(315), uint64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), bool], Tensor[(7, 7, 6), float64]) */
}

def @func_11291() -> (Tensor[(693), float32], Tensor[(7, 7, 6), float64]) {
  %874 = @func_8538() /* ty=(Tensor[(7, 7, 6), float32], Tensor[(693), float32]) */;
  %875 = @func_9204() /* ty=(Tensor[(7, 7, 6), float64], Tensor[(7, 7, 6), float64]) */;
  %876 = %874.1;
  %877 = %875.1;
  (%876, %877)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 *//home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen553/build/output.py:2545: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='llvm')
/home/yujunzhe/tvm/python/tvm/contrib/graph_runtime.py:25: UserWarning: This function has been moved to tvm.contrib.graph_executor and will be removed in the next TVM release
  warnings.warn(
/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen553/build/output.py:2550: DeprecationWarning: legacy graph executor behavior of producing json / lib / params will be removed in the next release. Please see documents of tvm.contrib.graph_executor.GraphModule for the  new recommended usage.
  graph, lib, params = relay.build(mod, target='cuda')

===================================
#[version = "0.0.5"]
type GradCell[T] {
  Raw(T),
  One(fn () -> T),
  Zero(fn () -> T),
}

def @FromGradCell[T](%g: GradCell[T]) -> T {
  let %x = match (%g) {
    Raw(%x1: T) => {
      %x1
    },
    One(%x2: fn () -> T) => {
      let %x3 = %x2();
      %x3
    },
    Zero(%x4: fn () -> T) => {
      let %x5 = %x4();
      %x5
    },
  };
  %x
}

def @main() -> (Tensor[(3, 12, 8), uint64], ()) {
  let %x6 = fn () -> (GradCell[Tensor[(3, 12, 8), uint64]], ()) {
    let %x7 = meta[relay.Constant][0] /* ty=Tensor[(3, 12, 8), uint64] */;
    let %x8 = Raw(%x7);
    let %x9 = fn () -> Tensor[(3, 12, 8), uint64] {
      let %x10 = meta[relay.Constant][1];
      %x10
    };
    let %x11 = One(%x9);
    let %x12 = ();
    let %x13 = (%x8, %x12);
    %x13
  };
  let %x14 = meta[relay.Constant][0] /* ty=Tensor[(3, 12, 8), uint64] */;
  let %x15 = Raw(%x14);
  let %x16 = fn () -> Tensor[(3, 12, 8), uint64] {
    let %x17 = meta[relay.Constant][2];
    %x17
  };
  let %x18 = One(%x16);
  let %x19 = ();
  let %x20 = (%x15, %x19);
  let %x21 = ();
  let %x22 = (%x14, %x21);
  %x22
}

def @AddGradCell[T](%add: fn (T, T) -> T, %l: GradCell[T], %r: GradCell[T]) -> GradCell[T] {
  let %x23 = (%l, %r);
  let %x24 = match (%x23) {
    (Zero(_), _) => {
      %r
    },
    (_, Zero(_)) => {
      %l
    },
    _ => {
      let %x25 = match (%l) {
        Raw(%x26: T) => {
          %x26
        },
        One(%x27: fn () -> T) => {
          let %x28 = %x27();
          %x28
        },
        Zero(%x29: fn () -> T) => {
          let %x30 = %x29();
          %x30
        },
      };
      let %x31 = match (%r) {
        Raw(%x32: T) => {
          %x32
        },
        One(%x33: fn () -> T) => {
          let %x34 = %x33();
          %x34
        },
        Zero(%x35: fn () -> T) => {
          let %x36 = %x35();
          %x36
        },
      };
      let %x37 = %add(%x25, %x31);
      let %x38 = Raw(%x37);
      %x38
    },
  };
  %x24
}

def @MultiplyGradCell[T](%multiply: fn (T, T) -> T, %l1: GradCell[T], %r1: GradCell[T]) -> GradCell[T] {
  let %x39 = (%l1, %r1);
  let %x40 = match (%x39) {
    (Zero(_), _) => {
      %l1
    },
    (_, Zero(_)) => {
      %r1
    },
    (One(_), _) => {
      %r1
    },
    (_, One(_)) => {
      %l1
    },
    _ => {
      let %x41 = match (%l1) {
        Raw(%x42: T) => {
          %x42
        },
        One(%x43: fn () -> T) => {
          let %x44 = %x43();
          %x44
        },
        Zero(%x45: fn () -> T) => {
          let %x46 = %x45();
          %x46
        },
      };
      let %x47 = match (%r1) {
        Raw(%x48: T) => {
          %x48
        },
        One(%x49: fn () -> T) => {
          let %x50 = %x49();
          %x50
        },
        Zero(%x51: fn () -> T) => {
          let %x52 = %x51();
          %x52
        },
      };
      let %x53 = %multiply(%x41, %x47);
      let %x54 = Raw(%x53);
      %x54
    },
  };
  %x40
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen553/build/output.py", line 2574, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  27: TVMFuncCall
  26: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  25: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  24: tvm::relay::backend::ExecutorCodegen::Codegen(tvm::relay::Function const&, tvm::runtime::String)
  23: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::GraphExecutorCodegenModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  22: tvm::relay::backend::GraphExecutorCodegen::Codegen(tvm::relay::Function, tvm::runtime::String)
  21: tvm::IRModule::FromExpr(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&)
  20: tvm::IRModule::FromExprInContext(tvm::RelayExpr const&, tvm::runtime::Map<tvm::GlobalVar, tvm::BaseFunc, void, void> const&, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void> const&, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >)
  19: tvm::IRModuleNode::Add(tvm::GlobalVar const&, tvm::BaseFunc const&, bool)
  18: tvm::WarnIfMalformed(tvm::IRModule const&, tvm::relay::Function)
  17: tvm::relay::FreeTypeVars(tvm::RelayExpr const&, tvm::IRModule const&)
  16: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  15: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  14: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  12: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  11: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  10: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  9: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  8: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  7: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  6: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::relay::LetNode const*)
  5: tvm::relay::ExpandANormalForm(tvm::relay::LetNode const*, std::function<void (tvm::relay::LetNode const*)>, std::function<void (tvm::relay::LetNode const*)>)
  4: tvm::relay::MixedModeVisitor::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::MixedModeVisitor::VisitLeaf(tvm::RelayExpr const&)
  2: tvm::relay::TypeVarEVisitor::VisitExpr_(tvm::ConstructorNode const*)
  1: tvm::IRModuleNode::LookupTypeDef(tvm::GlobalTypeVar const&) const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/src/ir/module.cc", line 279
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------
  Check failed: (it != type_definitions.end()) is false: There is no definition of GradCell
