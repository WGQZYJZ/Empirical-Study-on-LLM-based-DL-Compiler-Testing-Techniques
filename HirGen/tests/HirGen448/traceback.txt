==========mod==========
#[version = "0.0.5"]
def @func_9325() -> (Tensor[(5, 5, 15), bool],) {
  %0 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %1 = %0.0;
  (%1,)
}

def @func_5155(%var_5143: Tensor[(13, 4, 2), int16], %var_5144: Tensor[(13, 4, 2), int16], %var_5150: Tensor[(6, 30), float64]) -> (Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) {
  %2 = cast(%var_5144, dtype="int16") /* ty=Tensor[(13, 4, 2), int16] */;
  %3 = shape_of(%var_5143, dtype="int32") /* ty=Tensor[(3), int32] */;
  %4 = cast(%var_5143, dtype="int16") /* ty=Tensor[(13, 4, 2), int16] */;
  %5 = dyn.reshape(%2, %3, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %6 = cast(meta[relay.Constant][0] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %7 = cast(%var_5150, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %8 = reshape(%6, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint64] */;
  %9 = reshape(%7, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %10 = @func_1310(%8, %9) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */;
  %11 = multiply(%4, %5) /* ty=Tensor[(13, 4, 2), int16] */;
  %12 = %10.1;
  (%11, %12, meta[relay.Constant][0] /* ty=Tensor[(48), uint64] */, %var_5150)
}

def @func_9060() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %13 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
  %14 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  (%13, %14)
}

def @func_11394() -> Tensor[(5, 5, 15), float32] {
  %15 = @func_10619() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) */;
  %15.1
}

def @func_12215() -> Tensor[(5, 5, 15), bool] {
  @func_11923() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_11447(%var_11434: Tensor[(52, 2), int16]) -> (Tensor[(5, 5, 15), bool], Tensor[(13, 4, 2), int16], Tensor[(52, 2), int16], Tensor[(180), float64]) {
  %16 = @func_9682() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %17 = cast(%var_11434, dtype="int16") /* ty=Tensor[(52, 2), int16] */;
  %18 = cast(%var_11434, dtype="int16") /* ty=Tensor[(52, 2), int16] */;
  %19 = cast(meta[relay.Constant][1] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %20 = reshape(%17, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %21 = reshape(%18, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %22 = reshape(%19, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %23 = @func_5155(%20, %21, %22) /* ty=(Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) */;
  %24 = %16.1;
  %25 = %23.0;
  (%24, %25, %var_11434, meta[relay.Constant][1] /* ty=Tensor[(180), float64] */)
}

def @func_3821(%var_3813: Tensor[(360), uint16]) -> (Tensor[(2, 12, 4), float64], Tensor[(12, 3, 10), bool], Tensor[(360), uint16]) {
  %26 = cast(meta[relay.Constant][2] /* ty=Tensor[(2, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %27 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %28 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %29 = reshape(%27, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %30 = reshape(%28, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %31 = @func_1777(%29, %30) /* ty=(Tensor[(12, 3, 10), bool],) */;
  %32 = cosh(%26) /* ty=Tensor[(2, 12, 4), float64] */;
  %33 = %31.0;
  (%32, %33, %var_3813)
}

def @func_8936() -> Tensor[(5, 5, 15), bool] {
  %34 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %34.0
}

def @func_3857(%var_3848: Tensor[(3, 11, 14), float64]) -> Tensor[(3, 11, 14), float64] {
  %35 = cast(meta[relay.Constant][3] /* ty=Tensor[(3, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 14), float64] */;
  %36 = shape_of(%var_3848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %37 = cast(%var_3848, dtype="float64") /* ty=Tensor[(3, 11, 14), float64] */;
  %38 = dyn.reshape(%35, %36, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%37, %38) /* ty=Tensor[(3, 11, 14), float64] */
}

def @func_9277() -> (Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) {
  %39 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %40 = cast(meta[relay.Constant][4] /* ty=Tensor[(195, 2), int16] */, dtype="int16") /* ty=Tensor[(195, 2), int16] */;
  %41 = cast(meta[relay.Constant][4] /* ty=Tensor[(195, 2), int16] */, dtype="int16") /* ty=Tensor[(195, 2), int16] */;
  %42 = reshape(%40, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %43 = reshape(%41, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %44 = %39.0;
  %45 = @func_1977(%42, %43) /* ty=Tensor[(13, 15, 2), bool] */;
  (%44, %45, meta[relay.Constant][4] /* ty=Tensor[(195, 2), int16] */)
}

def @func_10989(%var_10978: Tensor[(294), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(294), float64], Tensor[(7, 6, 7), float64]) {
  %46 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %47 = cast(%var_10978, dtype="float64") /* ty=Tensor[(294), float64] */;
  %48 = reshape(%47, newshape=[7, 6, 7]) /* ty=Tensor[(7, 6, 7), float64] */;
  %49 = @func_3270(%48) /* ty=(Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) */;
  %50 = %49.0;
  %51 = cast(%50, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %52 = %46.0;
  %53 = sqrt(%51) /* ty=Tensor[(7, 6, 7), float64] */;
  (%52, %var_10978, %53)
}

def @func_12501(%var_12481: Tensor[(4, 8, 7), uint32], %var_12482: Tensor[(4, 8, 7), uint32], %var_12494: Tensor[(1980), float32]) -> (Tensor[(4, 8, 7), uint32], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  %54 = cast(%var_12482, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
  %55 = shape_of(%var_12481, dtype="int32") /* ty=Tensor[(3), int32] */;
  %56 = cast(%var_12481, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
  %57 = dyn.reshape(%54, %55, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %58 = cast(%var_12494, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %59 = reshape(%58, newshape=[90, 22]) /* ty=Tensor[(90, 22), float32] */;
  %60 = @func_11475(%59) /* ty=(Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) */;
  %61 = bitwise_or(%56, %57) /* ty=Tensor[(4, 8, 7), uint32] */;
  %62 = %60.1;
  (%61, %62, %var_12494)
}

def @func_10435(%var_10429: Tensor[(16, 22), float32]) -> (Tensor[(5, 5, 15), float64], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(180), float64], Tensor[(144), float64], Tensor[(4, 9, 2), uint32], Tensor[(72), uint32], Tensor[(11, 16, 2), float32], Tensor[(16, 22), float32]) {
  %63 = @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %64 = %63.0;
  %65 = cast(%64, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
  %66 = cast(meta[relay.Constant][5] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %67 = cast(meta[relay.Constant][5] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %68 = reshape(%66, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %69 = reshape(%67, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %70 = @func_19(%68, %69) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %71 = cast(meta[relay.Constant][6] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %72 = reshape(%71, newshape=[9, 4, 4]) /* ty=Tensor[(9, 4, 4), float64] */;
  %73 = @func_3104(%72) /* ty=(Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) */;
  %74 = cast(meta[relay.Constant][7] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %75 = cast(meta[relay.Constant][7] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
  %76 = reshape(%74, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), uint32] */;
  %77 = reshape(%75, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), uint32] */;
  %78 = @func_8275(%76, %77) /* ty=(Tensor[(4, 9, 2), uint32],) */;
  %79 = cast(%var_10429, dtype="float32") /* ty=Tensor[(16, 22), float32] */;
  %80 = reshape(%79, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
  %81 = @func_7456(%80) /* ty=(Tensor[(11, 16, 2), float32],) */;
  %82 = exp(%65) /* ty=Tensor[(5, 5, 15), float64] */;
  %83 = %70.0;
  %84 = %73.3;
  %85 = %78.0;
  %86 = %81.0;
  (%82, %83, meta[relay.Constant][5] /* ty=Tensor[(42), float32] */, %84, meta[relay.Constant][6] /* ty=Tensor[(144), float64] */, %85, meta[relay.Constant][7] /* ty=Tensor[(72), uint32] */, %86, %var_10429)
}

def @func_2029(%var_2020: Tensor[(4, 13), uint16], %var_2021: Tensor[(4, 13), uint16]) -> Tensor[(4, 13), uint16] {
  %87 = cast(%var_2021, dtype="uint16") /* ty=Tensor[(4, 13), uint16] */;
  %88 = shape_of(%var_2020, dtype="int32") /* ty=Tensor[(2), int32] */;
  %89 = cast(%var_2020, dtype="uint16") /* ty=Tensor[(4, 13), uint16] */;
  %90 = dyn.reshape(%87, %88, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
  logical_xor(%89, %90) /* ty=Tensor[(4, 13), uint16] */
}

def @func_8864() -> (Tensor[(5, 5, 15), bool],) {
  %91 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %92 = %91.0;
  (%92,)
}

def @func_8884(%var_8882: Tensor[(24, 6), int8]) -> (Tensor[(5, 5, 15), bool], Tensor[(4, 3, 12), int8], Tensor[(24, 6), int8]) {
  %93 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %94 = cast(%var_8882, dtype="int8") /* ty=Tensor[(24, 6), int8] */;
  %95 = reshape(%94, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), int8] */;
  %96 = %93.0;
  %97 = @func_7605(%95) /* ty=Tensor[(4, 3, 12), int8] */;
  (%96, %97, %var_8882)
}

def @func_11021() -> Tensor[(5, 5, 15), bool] {
  @func_10504() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_9029() -> Tensor[(5, 5, 15), bool] {
  %98 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %98.0
}

def @func_11111(%var_11094: Tensor[(192), uint32], %var_11105: Tensor[(210), float32]) -> (Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) {
  %99 = @func_10551() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) */;
  %100 = %99.2;
  %101 = cast(%var_11094, dtype="bool") /* ty=Tensor[(192), bool] */;
  %102 = shape_of(%100, dtype="int32") /* ty=Tensor[(1), int32] */;
  %103 = cast(%100, dtype="bool") /* ty=Tensor[(192), bool] */;
  %104 = dyn.reshape(%101, %102, newshape=[]) /* ty=Tensor[(?), bool] */;
  %105 = cast(%var_11105, dtype="float32") /* ty=Tensor[(210), float32] */;
  %106 = cast(%var_11105, dtype="float32") /* ty=Tensor[(210), float32] */;
  %107 = reshape(%105, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), float32] */;
  %108 = reshape(%106, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), float32] */;
  %109 = @func_8262(%107, %108) /* ty=(Tensor[(14, 3, 5), uint32],) */;
  %110 = greater_equal(%103, %104) /* ty=Tensor[(192), bool] */;
  %111 = %109.0;
  (%110, %111, %var_11105)
}

def @func_10345(%var_10311: Tensor[(5, 5, 15), float64]) -> (Tensor[(5, 5, 15), int8], Tensor[(5, 5, 15), bool]) {
  %112 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %113 = %112.0;
  %114 = cast(%var_10311, dtype="int8") /* ty=Tensor[(5, 5, 15), int8] */;
  %115 = shape_of(%113, dtype="int32") /* ty=Tensor[(3), int32] */;
  %116 = cast(%113, dtype="int8") /* ty=Tensor[(5, 5, 15), int8] */;
  %117 = dyn.reshape(%114, %115, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %118 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %119 = right_shift(%116, %117) /* ty=Tensor[(5, 5, 15), int8] */;
  %120 = %118.0;
  (%119, %120)
}

def @func_10663() -> Tensor[(15, 12, 11), float64] {
  %121 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %121.1
}

def @func_7196(%var_7170: Tensor[(13, 3, 16), int8], %var_7178: Tensor[(300), float64]) -> (Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) {
  %122 = cast(meta[relay.Constant][8] /* ty=Tensor[(13, 3, 16), int8] */, dtype="int8") /* ty=Tensor[(13, 3, 16), int8] */;
  %123 = shape_of(%var_7170, dtype="int32") /* ty=Tensor[(3), int32] */;
  %124 = cast(%var_7170, dtype="int8") /* ty=Tensor[(13, 3, 16), int8] */;
  %125 = dyn.reshape(%122, %123, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %126 = cast(%var_7178, dtype="float64") /* ty=Tensor[(300), float64] */;
  %127 = cast(%var_7178, dtype="float64") /* ty=Tensor[(300), float64] */;
  %128 = reshape(%126, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %129 = reshape(%127, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %130 = @func_880(%128, %129) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %131 = right_shift(%124, %125) /* ty=Tensor[(13, 3, 16), int8] */;
  %132 = %130.0;
  (%131, %132, %var_7178)
}

def @func_9924(%var_9908: Tensor[(6, 10, 10), float32]) -> (Tensor[(6, 10, 10), bool],) {
  %133 = cast(%var_9908, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
  %134 = exp(%133) /* ty=Tensor[(6, 10, 10), float32] */;
  %135 = cast(%var_9908, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %136 = shape_of(%134, dtype="int32") /* ty=Tensor[(3), int32] */;
  %137 = cast(%134, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
  %138 = dyn.reshape(%135, %136, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %139 = logical_and(%137, %138) /* ty=Tensor[(6, 10, 10), bool] */;
  (%139,)
}

def @func_8275(%var_8267: Tensor[(4, 9, 2), uint32], %var_8268: Tensor[(4, 9, 2), uint32]) -> (Tensor[(4, 9, 2), uint32],) {
  %140 = cast(%var_8268, dtype="uint32") /* ty=Tensor[(4, 9, 2), uint32] */;
  %141 = shape_of(%var_8267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %142 = cast(%var_8267, dtype="uint32") /* ty=Tensor[(4, 9, 2), uint32] */;
  %143 = dyn.reshape(%140, %141, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %144 = add(%142, %143) /* ty=Tensor[(4, 9, 2), uint32] */;
  (%144,)
}

def @func_10388() -> (Tensor[(5, 5, 15), float32],) {
  %145 = @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */;
  %146 = %145.0;
  (%146,)
}

def @func_3104(%var_3094: Tensor[(9, 4, 4), float64]) -> (Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) {
  %147 = cast(%var_3094, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
  %148 = cast(meta[relay.Constant][9] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %149 = cast(meta[relay.Constant][10] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %150 = reshape(%148, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint64] */;
  %151 = reshape(%149, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %152 = @func_1310(%150, %151) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */;
  %153 = sigmoid(%147) /* ty=Tensor[(9, 4, 4), float64] */;
  %154 = %152.1;
  (%153, %154, meta[relay.Constant][9] /* ty=Tensor[(48), uint64] */, meta[relay.Constant][10] /* ty=Tensor[(180), float64] */)
}

def @func_614(%var_576: Tensor[(10, 3, 6), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) {
  %155 = cast(meta[relay.Constant][11] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %156 = cast(meta[relay.Constant][11] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %157 = reshape(%155, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %158 = reshape(%156, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %159 = @func_19(%157, %158) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %160 = cast(meta[relay.Constant][12] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %161 = cast(meta[relay.Constant][11] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %162 = cast(meta[relay.Constant][12] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %163 = reshape(%160, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %164 = reshape(%161, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %165 = reshape(%162, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
  %166 = @func_568(%163, %164, %165) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
  %167 = cast(meta[relay.Constant][11] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %168 = %159.0;
  %169 = cast(%168, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %170 = reshape(%167, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %171 = reshape(%169, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %172 = @func_19(%170, %171) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %173 = cast(%var_576, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %174 = cosh(%173) /* ty=Tensor[(10, 3, 6), float64] */;
  %175 = cast(%var_576, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %176 = shape_of(%174, dtype="int32") /* ty=Tensor[(3), int32] */;
  %177 = cast(%174, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %178 = dyn.reshape(%175, %176, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %179 = cast(%174, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %180 = tan(%179) /* ty=Tensor[(10, 3, 6), float32] */;
  %181 = cast(%180, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %182 = %166.3;
  %183 = %172.0;
  %184 = greater_equal(%177, %178) /* ty=Tensor[(10, 3, 6), bool] */;
  %185 = log(%181) /* ty=Tensor[(10, 3, 6), float32] */;
  (%168, meta[relay.Constant][11] /* ty=Tensor[(42), float32] */, %182, meta[relay.Constant][12] /* ty=Tensor[(728), float32] */, %183, %184, %185)
}

def @func_8828(%var_8814: Tensor[(5, 5, 15), bool]) -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float64]) {
  %186 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %187 = %186.0;
  %188 = cast(%var_8814, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %189 = shape_of(%187, dtype="int32") /* ty=Tensor[(3), int32] */;
  %190 = cast(%187, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %191 = dyn.reshape(%188, %189, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %192 = cast(%var_8814, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
  %193 = logical_or(%190, %191) /* ty=Tensor[(5, 5, 15), bool] */;
  %194 = sin(%192) /* ty=Tensor[(5, 5, 15), float64] */;
  (%193, %194)
}

def @func_19(%var_12: Tensor[(3, 7, 2), float32], %var_13: Tensor[(3, 7, 2), float32]) -> (Tensor[(3, 7, 2), bool],) {
  %195 = cast(%var_13, dtype="bool") /* ty=Tensor[(3, 7, 2), bool] */;
  %196 = shape_of(%var_12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %197 = cast(%var_12, dtype="bool") /* ty=Tensor[(3, 7, 2), bool] */;
  %198 = dyn.reshape(%195, %196, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %199 = greater_equal(%197, %198) /* ty=Tensor[(3, 7, 2), bool] */;
  (%199,)
}

def @func_10924() -> (Tensor[(5, 5, 15), float32],) {
  %200 = @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */;
  %201 = %200.0;
  (%201,)
}

def @func_7690(%var_7649: Tensor[(5, 2, 9), float64], %var_7650: Tensor[(5, 2, 9), float64], %var_7667: Tensor[(5, 2, 9), float64], %var_7680: Tensor[(104), int16]) -> (Tensor[(5, 2, 9), float64], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(5, 2, 9), bool], Tensor[(48), uint64], Tensor[(104), int16]) {
  %202 = cast(%var_7650, dtype="float64") /* ty=Tensor[(5, 2, 9), float64] */;
  %203 = shape_of(%var_7649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %204 = cast(%var_7649, dtype="float64") /* ty=Tensor[(5, 2, 9), float64] */;
  %205 = dyn.reshape(%202, %203, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %206 = cast(meta[relay.Constant][13] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %207 = reshape(%206, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %208 = @func_614(%207) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
  %209 = cast(%var_7667, dtype="bool") /* ty=Tensor[(5, 2, 9), bool] */;
  %210 = shape_of(%var_7649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %211 = cast(%var_7649, dtype="bool") /* ty=Tensor[(5, 2, 9), bool] */;
  %212 = dyn.reshape(%209, %210, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %213 = cast(%var_7680, dtype="int16") /* ty=Tensor[(104), int16] */;
  %214 = cast(%var_7680, dtype="int16") /* ty=Tensor[(104), int16] */;
  %215 = cast(meta[relay.Constant][13] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %216 = reshape(%213, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %217 = reshape(%214, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %218 = reshape(%215, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %219 = @func_5155(%216, %217, %218) /* ty=(Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) */;
  %220 = power(%204, %205) /* ty=Tensor[(5, 2, 9), float64] */;
  %221 = %208.2;
  %222 = greater(%211, %212) /* ty=Tensor[(5, 2, 9), bool] */;
  %223 = %219.2;
  (%220, %221, meta[relay.Constant][13] /* ty=Tensor[(180), float64] */, %222, %223, %var_7680)
}

def @func_10569() -> (Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) {
  %224 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %225 = @func_10551() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) */;
  %226 = %224.1;
  %227 = %225.3;
  (%226, %227)
}

def @func_11812() -> (Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float64], Tensor[(5, 5, 15), bool]) {
  %228 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %229 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
  %230 = cast(%229, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
  %231 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %232 = %228.2;
  %233 = log2(%230) /* ty=Tensor[(5, 5, 15), float64] */;
  %234 = %231.0;
  (%232, %233, %234)
}

def @func_568(%var_423: Tensor[(4, 13, 14), float32], %var_429: Tensor[(42), float32], %var_534: Tensor[(4, 13, 14), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) {
  %235 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
  %236 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
  %237 = reshape(%235, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %238 = reshape(%236, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %239 = @func_19(%237, %238) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %240 = cast(%var_423, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %241 = sqrt(%240) /* ty=Tensor[(4, 13, 14), float32] */;
  %242 = cast(%241, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %243 = %239.0;
  %244 = cast(%243, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %245 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
  %246 = reshape(%244, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %247 = reshape(%245, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %248 = @func_19(%246, %247) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %249 = cast(%243, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %250 = %248.0;
  %251 = cast(%250, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %252 = reshape(%249, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %253 = reshape(%251, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %254 = @func_19(%252, %253) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %255 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
  %256 = cast(%250, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %257 = reshape(%255, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %258 = reshape(%256, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %259 = @func_19(%257, %258) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %260 = cast(%241, dtype="float64") /* ty=Tensor[(4, 13, 14), float64] */;
  %261 = cosh(%260) /* ty=Tensor[(4, 13, 14), float64] */;
  %262 = cast(%var_534, dtype="int8") /* ty=Tensor[(4, 13, 14), int8] */;
  %263 = shape_of(%261, dtype="int32") /* ty=Tensor[(3), int32] */;
  %264 = cast(%261, dtype="int8") /* ty=Tensor[(4, 13, 14), int8] */;
  %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %266 = bitwise_or(%264, %265) /* ty=Tensor[(4, 13, 14), int8] */;
  %267 = cast(%266, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %268 = cast(%243, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %269 = cast(%250, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %270 = reshape(%268, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %271 = reshape(%269, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %272 = @func_19(%270, %271) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %273 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
  %274 = %272.0;
  %275 = cast(%274, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %276 = reshape(%273, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %277 = reshape(%275, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %278 = @func_19(%276, %277) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %279 = log(%242) /* ty=Tensor[(4, 13, 14), float32] */;
  %280 = %254.0;
  %281 = %259.0;
  %282 = rsqrt(%267) /* ty=Tensor[(4, 13, 14), float32] */;
  %283 = %278.0;
  (%243, %var_429, %279, %250, %280, %281, %282, %274, %283)
}

def @func_9827() -> (Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) {
  %284 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %285 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %286 = %284.0;
  %287 = %285.2;
  (%286, %287)
}

def @func_880(%var_872: Tensor[(10, 2, 15), float64], %var_873: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), bool],) {
  %288 = cast(%var_873, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %289 = shape_of(%var_872, dtype="int32") /* ty=Tensor[(3), int32] */;
  %290 = cast(%var_872, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
  %291 = dyn.reshape(%288, %289, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %292 = greater(%290, %291) /* ty=Tensor[(10, 2, 15), bool] */;
  (%292,)
}

def @func_8668(%var_8608: Tensor[(1, 14), float32], %var_8609: Tensor[(1, 14), float32], %var_8637: Tensor[(121), float32], %var_8638: uint16, %var_8639: Tensor[(12, 30), uint16], %var_8650: Tensor[(300), float64]) -> (Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) {
  %293 = cast(%var_8609, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
  %294 = shape_of(%var_8608, dtype="int32") /* ty=Tensor[(2), int32] */;
  %295 = cast(%var_8608, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
  %296 = dyn.reshape(%293, %294, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
  %297 = cast(meta[relay.Constant][14] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
  %298 = reshape(%297, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), float32] */;
  %299 = @func_7086(%298) /* ty=(Tensor[(2, 2, 6), bool],) */;
  %300 = cast(meta[relay.Constant][15] /* ty=Tensor[(52, 1), uint16] */, dtype="uint16") /* ty=Tensor[(52, 1), uint16] */;
  %301 = cast(meta[relay.Constant][15] /* ty=Tensor[(52, 1), uint16] */, dtype="uint16") /* ty=Tensor[(52, 1), uint16] */;
  %302 = reshape(%300, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
  %303 = reshape(%301, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
  %304 = cast(%var_8637, dtype="float32") /* ty=Tensor[(121), float32] */;
  %305 = cast(%var_8638, dtype="uint16") /* ty=uint16 */;
  %306 = cast(%var_8639, dtype="uint16") /* ty=Tensor[(12, 30), uint16] */;
  %307 = reshape(%304, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float32] */;
  %308 = reshape(%305, newshape=[]) /* ty=uint16 */;
  %309 = reshape(%306, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
  %310 = @func_7388(%307, %308, %309) /* ty=(Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) */;
  %311 = cast(%var_8650, dtype="float64") /* ty=Tensor[(300), float64] */;
  %312 = cast(%var_8650, dtype="float64") /* ty=Tensor[(300), float64] */;
  %313 = reshape(%311, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %314 = reshape(%312, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %315 = @func_880(%313, %314) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %316 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %317 = not_equal(%295, %296) /* ty=Tensor[(?, 14), bool] */;
  %318 = %299.0;
  %319 = @func_2029(%302, %303) /* ty=Tensor[(4, 13), uint16] */;
  %320 = %310.5;
  %321 = %315.0;
  %322 = %316.1;
  (%317, %318, meta[relay.Constant][14] /* ty=Tensor[(24), float32] */, %319, meta[relay.Constant][15] /* ty=Tensor[(52, 1), uint16] */, %320, %var_8637, %var_8638, %var_8639, %321, %var_8650, %322)
}

def @func_12692() -> (Tensor[(5, 5, 15), bool], Tensor[(3, 3, 5), bool], Tensor[(45), float64]) {
  %323 = cast(meta[relay.Constant][16] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %324 = reshape(%323, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), float64] */;
  %325 = @func_7289(%324) /* ty=(Tensor[(3, 3, 5), bool],) */;
  %326 = @func_11625() /* ty=Tensor[(5, 5, 15), bool] */;
  %327 = %325.0;
  (%326, %327, meta[relay.Constant][16] /* ty=Tensor[(45), float64] */)
}

def @func_12474(%var_12436: Tensor[(5, 5, 15), bool], %var_12444: Tensor[(546), uint16]) -> (Tensor[(5, 5, 15), bool], Tensor[(7, 6, 13), bool], Tensor[(546), uint16]) {
  %328 = @func_8936() /* ty=Tensor[(5, 5, 15), bool] */;
  %329 = cast(%var_12436, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %330 = shape_of(%328, dtype="int32") /* ty=Tensor[(3), int32] */;
  %331 = cast(%328, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %332 = dyn.reshape(%329, %330, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %333 = cast(%var_12444, dtype="uint16") /* ty=Tensor[(546), uint16] */;
  %334 = cast(%var_12444, dtype="uint16") /* ty=Tensor[(546), uint16] */;
  %335 = reshape(%333, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint16] */;
  %336 = reshape(%334, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint16] */;
  %337 = @func_6378(%335, %336) /* ty=(Tensor[(7, 6, 13), bool],) */;
  %338 = greater(%331, %332) /* ty=Tensor[(5, 5, 15), bool] */;
  %339 = %337.0;
  (%338, %339, %var_12444)
}

def @func_11558(%var_11537: Tensor[(1980), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64], Tensor[(1980), float32]) {
  %340 = cast(%var_11537, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %341 = reshape(%340, newshape=[90, 22]) /* ty=Tensor[(90, 22), float32] */;
  %342 = @func_11475(%341) /* ty=(Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) */;
  %343 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  %344 = %342.0;
  (%343, %344, %var_11537)
}

def @func_11351() -> (Tensor[(5, 5, 15), float32], Tensor[(11, 11, 390), bool], Tensor[(14), float32], Tensor[(121), float32], uint16, Tensor[(36, 10), uint16], Tensor[(300), float64]) {
  %345 = @func_11318() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %346 = %345.0;
  %347 = cast(%346, dtype="float32") /* ty=Tensor[(5, 5, 15), float32] */;
  %348 = cast(meta[relay.Constant][17] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %349 = cast(meta[relay.Constant][17] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %350 = cast(meta[relay.Constant][18] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %351 = cast(meta[relay.Constant][19] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %352 = cast(meta[relay.Constant][20] /* ty=Tensor[(36, 10), uint16] */, dtype="uint16") /* ty=Tensor[(36, 10), uint16] */;
  %353 = cast(meta[relay.Constant][21] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %354 = reshape(%348, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %355 = reshape(%349, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %356 = reshape(%350, newshape=[121]) /* ty=Tensor[(121), float32] */;
  %357 = reshape(%351, newshape=[]) /* ty=uint16 */;
  %358 = reshape(%352, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
  %359 = reshape(%353, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %360 = @func_8668(%354, %355, %356, %357, %358, %359) /* ty=(Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) */;
  %361 = sigmoid(%347) /* ty=Tensor[(5, 5, 15), float32] */;
  %362 = %360.5;
  (%361, %362, meta[relay.Constant][17] /* ty=Tensor[(14), float32] */, meta[relay.Constant][18] /* ty=Tensor[(121), float32] */, meta[relay.Constant][19] /* ty=uint16 */, meta[relay.Constant][20] /* ty=Tensor[(36, 10), uint16] */, meta[relay.Constant][21] /* ty=Tensor[(300), float64] */)
}

def @func_9135() -> (Tensor[(5, 5, 15), bool],) {
  %363 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %364 = %363.1;
  (%364,)
}

def @func_13004(%var_13002: Tensor[(352), float32]) -> (Tensor[(1365), float32], Tensor[(396), float32], Tensor[(396), float32], Tensor[(294), float64], Tensor[(5, 5, 15), float64], Tensor[(352), float32]) {
  %365 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
  %366 = cast(meta[relay.Constant][22] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
  %367 = cast(meta[relay.Constant][23] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %368 = reshape(%366, newshape=[396]) /* ty=Tensor[(396), float32] */;
  %369 = reshape(%367, newshape=[49, 6]) /* ty=Tensor[(49, 6), float64] */;
  %370 = @func_12342(%368, %369) /* ty=(Tensor[(1365), int16], Tensor[(3, 12, 11), float32], Tensor[(396), float32], Tensor[(49, 6), float64]) */;
  %371 = cast(%var_13002, dtype="float32") /* ty=Tensor[(352), float32] */;
  %372 = reshape(%371, newshape=[16, 22]) /* ty=Tensor[(16, 22), float32] */;
  %373 = @func_10435(%372) /* ty=(Tensor[(5, 5, 15), float64], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(180), float64], Tensor[(144), float64], Tensor[(4, 9, 2), uint32], Tensor[(72), uint32], Tensor[(11, 16, 2), float32], Tensor[(16, 22), float32]) */;
  %374 = %365.1;
  %375 = %370.2;
  %376 = %373.0;
  (%374, %375, meta[relay.Constant][22] /* ty=Tensor[(396), float32] */, meta[relay.Constant][23] /* ty=Tensor[(294), float64] */, %376, %var_13002)
}

def @func_8444(%var_8423: Tensor[(12), uint16], %var_8424: Tensor[(360), uint16]) -> (Tensor[(1980), float32], Tensor[(10, 30), float64], uint16, Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16]) {
  %377 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %378 = cast(meta[relay.Constant][24] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %379 = cast(%var_8423, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %380 = cast(%var_8424, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %381 = cast(meta[relay.Constant][25] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %382 = reshape(%378, newshape=[]) /* ty=uint16 */;
  %383 = reshape(%379, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
  %384 = reshape(%380, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %385 = reshape(%381, newshape=[390]) /* ty=Tensor[(390), int16] */;
  %386 = @func_2951(%382, %383, %384, %385) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %387 = %377.2;
  %388 = %386.5;
  (%387, %388, meta[relay.Constant][24] /* ty=uint16 */, %var_8423, %var_8424, meta[relay.Constant][25] /* ty=Tensor[(390), int16] */)
}

def @func_3185(%var_3171: Tensor[(1, 13, 7), float32], %var_3180: Tensor[(15, 13, 7), float32]) -> (Tensor[(15, 13, 7), bool],) {
  %389 = cast(%var_3171, dtype="float32") /* ty=Tensor[(1, 13, 7), float32] */;
  %390 = sqrt(%389) /* ty=Tensor[(1, 13, 7), float32] */;
  %391 = cast(%390, dtype="bool") /* ty=Tensor[(1, 13, 7), bool] */;
  %392 = cast(%var_3180, dtype="bool") /* ty=Tensor[(15, 13, 7), bool] */;
  %393 = not_equal(%391, %392) /* ty=Tensor[(15, 13, 7), bool] */;
  (%393,)
}

def @func_4166(%var_4140: Tensor[(12, 5, 14), float32]) -> (Tensor[(12, 5, 14), float32], Tensor[(1, 6, 11), float32], Tensor[(1, 66), float32]) {
  %394 = cast(%var_4140, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
  %395 = shape_of(meta[relay.Constant][26] /* ty=Tensor[(12, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %396 = cast(meta[relay.Constant][26] /* ty=Tensor[(12, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
  %397 = dyn.reshape(%394, %395, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %398 = cast(meta[relay.Constant][27] /* ty=Tensor[(1, 66), float32] */, dtype="float32") /* ty=Tensor[(1, 66), float32] */;
  %399 = reshape(%398, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %400 = @func_2145(%399) /* ty=(Tensor[(1, 6, 11), float32],) */;
  %401 = floor_mod(%396, %397) /* ty=Tensor[(12, 5, 14), float32] */;
  %402 = %400.0;
  (%401, %402, meta[relay.Constant][27] /* ty=Tensor[(1, 66), float32] */)
}

def @func_6084(%var_6054: Tensor[(16, 1, 1), float64], %var_6063: Tensor[(16, 11, 1), float64], %var_6078: Tensor[(360, 1), uint16]) -> (Tensor[(16, 1, 1), float64], Tensor[(16, 11, 1), bool], Tensor[(12, 3, 10), bool], Tensor[(360, 1), uint16]) {
  %403 = cast(%var_6054, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %404 = cast(%var_6054, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
  %405 = cast(%var_6063, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %406 = cast(%var_6078, dtype="uint16") /* ty=Tensor[(360, 1), uint16] */;
  %407 = cast(%var_6078, dtype="uint16") /* ty=Tensor[(360, 1), uint16] */;
  %408 = reshape(%406, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %409 = reshape(%407, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %410 = @func_1777(%408, %409) /* ty=(Tensor[(12, 3, 10), bool],) */;
  %411 = sinh(%403) /* ty=Tensor[(16, 1, 1), float64] */;
  %412 = less(%404, %405) /* ty=Tensor[(16, 11, 1), bool] */;
  %413 = %410.0;
  (%411, %412, %413, %var_6078)
}

def @func_7785(%var_7762: Tensor[(7, 14, 14), uint64], %var_7763: Tensor[(7, 14, 14), uint64]) -> (Tensor[(7, 14, 14), float64], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 11, 14), float64], Tensor[(462), float64]) {
  %414 = cast(%var_7763, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %415 = shape_of(%var_7762, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%var_7762, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %418 = less_equal(%416, %417) /* ty=Tensor[(7, 14, 14), bool] */;
  %419 = cast(%418, dtype="float64") /* ty=Tensor[(7, 14, 14), float64] */;
  %420 = cast(meta[relay.Constant][28] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %421 = cast(meta[relay.Constant][29] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %422 = cast(meta[relay.Constant][28] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %423 = reshape(%420, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %424 = reshape(%421, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %425 = reshape(%422, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
  %426 = @func_568(%423, %424, %425) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
  %427 = cast(meta[relay.Constant][30] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %428 = reshape(%427, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float64] */;
  %429 = sinh(%419) /* ty=Tensor[(7, 14, 14), float64] */;
  %430 = %426.0;
  %431 = @func_3857(%428) /* ty=Tensor[(3, 11, 14), float64] */;
  (%429, %430, meta[relay.Constant][28] /* ty=Tensor[(728), float32] */, meta[relay.Constant][29] /* ty=Tensor[(42), float32] */, %431, meta[relay.Constant][30] /* ty=Tensor[(462), float64] */)
}

def @func_8178() -> (Tensor[(5, 5, 15), bool],) {
  %432 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 15), float32] */;
  %433 = log(%432) /* ty=Tensor[(5, 5, 15), float32] */;
  %434 = cast(meta[relay.Constant][31] /* ty=Tensor[(5, 5, 15), float32] */, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %435 = shape_of(%433, dtype="int32") /* ty=Tensor[(3), int32] */;
  %436 = cast(%433, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %437 = dyn.reshape(%434, %435, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %438 = not_equal(%436, %437) /* ty=Tensor[(5, 5, 15), bool] */;
  (%438,)
}

def @func_12867(%var_12863: Tensor[(630), int16]) -> (Tensor[(5, 5, 15), bool], Tensor[(4), float64], Tensor[(630), int16], Tensor[(180), float64], Tensor[(4), float64]) {
  %439 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %440 = cast(%var_12863, dtype="int16") /* ty=Tensor[(630), int16] */;
  %441 = cast(%var_12863, dtype="int16") /* ty=Tensor[(630), int16] */;
  %442 = cast(meta[relay.Constant][32] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %443 = cast(meta[relay.Constant][33] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
  %444 = reshape(%440, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
  %445 = reshape(%441, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
  %446 = reshape(%442, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %447 = reshape(%443, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %448 = @func_5532(%444, %445, %446, %447) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) */;
  %449 = %439.0;
  %450 = %448.5;
  (%449, %450, %var_12863, meta[relay.Constant][32] /* ty=Tensor[(180), float64] */, meta[relay.Constant][33] /* ty=Tensor[(4), float64] */)
}

def @func_8735() -> (Tensor[(5, 5, 15), bool], Tensor[(462), float64], Tensor[(1372), uint64]) {
  %451 = cast(meta[relay.Constant][34] /* ty=Tensor[(1372), uint64] */, dtype="uint64") /* ty=Tensor[(1372), uint64] */;
  %452 = cast(meta[relay.Constant][34] /* ty=Tensor[(1372), uint64] */, dtype="uint64") /* ty=Tensor[(1372), uint64] */;
  %453 = reshape(%451, newshape=[7, 14, 14]) /* ty=Tensor[(7, 14, 14), uint64] */;
  %454 = reshape(%452, newshape=[7, 14, 14]) /* ty=Tensor[(7, 14, 14), uint64] */;
  %455 = @func_7785(%453, %454) /* ty=(Tensor[(7, 14, 14), float64], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 11, 14), float64], Tensor[(462), float64]) */;
  %456 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
  %457 = %455.5;
  (%456, %457, meta[relay.Constant][34] /* ty=Tensor[(1372), uint64] */)
}

def @func_8990() -> (Tensor[(5, 5, 15), bool],) {
  %458 = @func_8936() /* ty=Tensor[(5, 5, 15), bool] */;
  (%458,)
}

def @func_10852() -> (Tensor[(5, 5, 15), bool], Tensor[(1365), int16], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(1365), float32], Tensor[(300), float64], Tensor[(8, 78), int8], Tensor[(300), float64]) {
  %459 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
  %460 = %459.1;
  %461 = cast(%460, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %462 = acosh(%461) /* ty=Tensor[(1365), float32] */;
  %463 = cast(%460, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %464 = shape_of(%462, dtype="int32") /* ty=Tensor[(1), int32] */;
  %465 = cast(%462, dtype="int16") /* ty=Tensor[(1365), int16] */;
  %466 = dyn.reshape(%463, %464, newshape=[]) /* ty=Tensor[(?), int16] */;
  %467 = cast(meta[relay.Constant][35] /* ty=Tensor[(144), int8] */, dtype="int8") /* ty=Tensor[(144), int8] */;
  %468 = reshape(%467, newshape=[24, 6]) /* ty=Tensor[(24, 6), int8] */;
  %469 = @func_8884(%468) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(4, 3, 12), int8], Tensor[(24, 6), int8]) */;
  %470 = cast(%462, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %471 = cast(meta[relay.Constant][36] /* ty=Tensor[(8, 78), int8] */, dtype="int8") /* ty=Tensor[(8, 78), int8] */;
  %472 = cast(meta[relay.Constant][37] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %473 = reshape(%471, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), int8] */;
  %474 = reshape(%472, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %475 = @func_7196(%473, %474) /* ty=(Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */;
  %476 = @func_9166() /* ty=Tensor[(5, 5, 15), bool] */;
  %477 = bitwise_xor(%465, %466) /* ty=Tensor[(1365), int16] */;
  %478 = %469.1;
  %479 = atanh(%470) /* ty=Tensor[(1365), float32] */;
  %480 = %475.2;
  (%476, %477, %478, meta[relay.Constant][35] /* ty=Tensor[(144), int8] */, %479, %480, meta[relay.Constant][36] /* ty=Tensor[(8, 78), int8] */, meta[relay.Constant][37] /* ty=Tensor[(300), float64] */)
}

def @func_11266(%var_11261: Tensor[(210), float32]) -> (Tensor[(12, 5, 14), float64], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) {
  %481 = @func_9827() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) */;
  %482 = cast(meta[relay.Constant][38] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %483 = cast(%var_11261, dtype="float32") /* ty=Tensor[(210), float32] */;
  %484 = reshape(%482, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %485 = reshape(%483, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %486 = @func_11111(%484, %485) /* ty=(Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) */;
  %487 = %481.1;
  %488 = %486.2;
  (%487, %488, meta[relay.Constant][38] /* ty=Tensor[(192), uint32] */, %var_11261)
}

def @func_11980() -> Tensor[(1, 9), bool] {
  %489 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %490 = cast(meta[relay.Constant][39] /* ty=Tensor[(1, 9), bool] */, dtype="bool") /* ty=Tensor[(1, 9), bool] */;
  logical_and(%489, %490) /* ty=Tensor[(1, 9), bool] */
}

def @func_9166() -> Tensor[(5, 5, 15), bool] {
  @func_9029() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_11897() -> (Tensor[(15, 12, 11), float64],) {
  %491 = @func_10663() /* ty=Tensor[(15, 12, 11), float64] */;
  (%491,)
}

def @func_12601() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %492 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %493 = @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %494 = %492.0;
  %495 = %493.0;
  (%494, %495)
}

def @func_12105() -> Tensor[(1, 9), bool] {
  @func_11980() /* ty=Tensor[(1, 9), bool] */
}

def @func_9189(%var_9184: uint16) -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(11, 11), float32], uint16, Tensor[(360), uint16]) {
  %496 = cast(meta[relay.Constant][40] /* ty=Tensor[(11, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 11), float32] */;
  %497 = cast(%var_9184, dtype="uint16") /* ty=uint16 */;
  %498 = cast(meta[relay.Constant][41] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %499 = reshape(%496, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float32] */;
  %500 = reshape(%497, newshape=[]) /* ty=uint16 */;
  %501 = reshape(%498, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
  %502 = @func_7388(%499, %500, %501) /* ty=(Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) */;
  %503 = @func_8936() /* ty=Tensor[(5, 5, 15), bool] */;
  %504 = %502.4;
  (%503, %504, meta[relay.Constant][40] /* ty=Tensor[(11, 11), float32] */, %var_9184, meta[relay.Constant][41] /* ty=Tensor[(360), uint16] */)
}

def @func_3792(%var_3778: Tensor[(2, 10, 12), int64], %var_3779: Tensor[(2, 10, 12), int64]) -> Tensor[(2, 10, 12), int64] {
  %505 = cast(%var_3779, dtype="int64") /* ty=Tensor[(2, 10, 12), int64] */;
  %506 = shape_of(%var_3778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %507 = cast(%var_3778, dtype="int64") /* ty=Tensor[(2, 10, 12), int64] */;
  %508 = dyn.reshape(%505, %506, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%507, %508) /* ty=Tensor[(2, 10, 12), int64] */
}

def @func_11073() -> (Tensor[(5, 5, 15), bool],) {
  %509 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %510 = %509.0;
  (%510,)
}

def @func_11475(%var_11468: Tensor[(90, 22), float32]) -> (Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) {
  %511 = @func_9827() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) */;
  %512 = cast(%var_11468, dtype="float32") /* ty=Tensor[(90, 22), float32] */;
  %513 = reshape(%512, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %514 = @func_2365(%513) /* ty=(Tensor[(15, 12, 11), float64],) */;
  %515 = %511.1;
  %516 = %514.0;
  (%515, %516, %var_11468)
}

def @func_12723() -> Tensor[(13, 15, 2), float64] {
  %517 = @func_11199() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) */;
  %518 = %517.1;
  %519 = cast(meta[relay.Constant][42] /* ty=Tensor[(13, 15, 2), float32] */, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %520 = shape_of(%518, dtype="int32") /* ty=Tensor[(3), int32] */;
  %521 = cast(%518, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %522 = dyn.reshape(%519, %520, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%521, %522) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_9283() -> (Tensor[(5, 5, 15), bool],) {
  %523 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %524 = %523.0;
  (%524,)
}

def @func_2951(%var_2905: uint16, %var_2906: Tensor[(1, 1, 12), uint16], %var_2911: Tensor[(360), uint16], %var_2927: Tensor[(390), int16]) -> (Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  %525 = cast(%var_2905, dtype="bool") /* ty=bool */;
  %526 = cast(%var_2906, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
  %527 = cast(%var_2911, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %528 = cast(%var_2911, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %529 = reshape(%527, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %530 = reshape(%528, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %531 = @func_1777(%529, %530) /* ty=(Tensor[(12, 3, 10), bool],) */;
  %532 = cast(%var_2906, dtype="uint64") /* ty=Tensor[(1, 1, 12), uint64] */;
  %533 = cast(%var_2905, dtype="uint64") /* ty=uint64 */;
  %534 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 30), float64] */, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
  %535 = cast(meta[relay.Constant][43] /* ty=Tensor[(10, 30), float64] */, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
  %536 = reshape(%534, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %537 = reshape(%535, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %538 = @func_880(%536, %537) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %539 = cast(%var_2927, dtype="int16") /* ty=Tensor[(390), int16] */;
  %540 = cast(%var_2927, dtype="int16") /* ty=Tensor[(390), int16] */;
  %541 = reshape(%539, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %542 = reshape(%540, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %543 = cast(meta[relay.Constant][44] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %544 = reshape(%543, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %545 = @func_2365(%544) /* ty=(Tensor[(15, 12, 11), float64],) */;
  %546 = equal(%525, %526) /* ty=Tensor[(1, 1, 12), bool] */;
  %547 = %531.0;
  %548 = logical_xor(%532, %533) /* ty=Tensor[(1, 1, 12), uint64] */;
  %549 = %538.0;
  %550 = @func_1977(%541, %542) /* ty=Tensor[(13, 15, 2), bool] */;
  %551 = %545.0;
  (%546, %547, %var_2911, %548, %549, meta[relay.Constant][43] /* ty=Tensor[(10, 30), float64] */, %550, %var_2927, %551, meta[relay.Constant][44] /* ty=Tensor[(1980), float32] */)
}

def @func_11199() -> (Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) {
  %552 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %553 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
  %554 = %553.0;
  %555 = cast(%554, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %556 = cast(%554, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %557 = %552.0;
  %558 = log10(%555) /* ty=Tensor[(13, 15, 2), float32] */;
  %559 = sin(%556) /* ty=Tensor[(13, 15, 2), float32] */;
  %560 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  (%557, %558, %559, %560)
}

def @func_12276() -> (Tensor[(5, 5, 15), bool],) {
  %561 = @func_11700() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %562 = %561.0;
  (%562,)
}

def @func_7751(%var_7745: Tensor[(1, 3, 13), uint16]) -> (Tensor[(16, 3, 13), bool],) {
  %563 = cast(%var_7745, dtype="bool") /* ty=Tensor[(1, 3, 13), bool] */;
  %564 = cast(meta[relay.Constant][45] /* ty=Tensor[(16, 3, 13), uint16] */, dtype="bool") /* ty=Tensor[(16, 3, 13), bool] */;
  %565 = equal(%563, %564) /* ty=Tensor[(16, 3, 13), bool] */;
  (%565,)
}

def @func_12574() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %566 = @func_9283() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %567 = %566.0;
  %568 = cast(%567, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %569 = reshape(%568, newshape=[5, 5, 15]) /* ty=Tensor[(5, 5, 15), bool] */;
  %570 = @func_8828(%569) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float64]) */;
  %571 = %570.0;
  (%567, %571)
}

def @func_7289(%var_7275: Tensor[(3, 3, 5), float64]) -> (Tensor[(3, 3, 5), bool],) {
  %572 = cast(%var_7275, dtype="float64") /* ty=Tensor[(3, 3, 5), float64] */;
  %573 = tan(%572) /* ty=Tensor[(3, 3, 5), float64] */;
  %574 = cast(%573, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
  %575 = shape_of(%var_7275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %576 = cast(%var_7275, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
  %577 = dyn.reshape(%574, %575, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %578 = greater_equal(%576, %577) /* ty=Tensor[(3, 3, 5), bool] */;
  (%578,)
}

def @func_7388(%var_7343: Tensor[(11, 11, 1), float32], %var_7363: uint16, %var_7365: Tensor[(12, 30), uint16]) -> (Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) {
  %579 = cast(%var_7363, dtype="uint16") /* ty=uint16 */;
  %580 = cast(meta[relay.Constant][46] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %581 = cast(%var_7365, dtype="uint16") /* ty=Tensor[(12, 30), uint16] */;
  %582 = cast(meta[relay.Constant][47] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %583 = reshape(%579, newshape=[]) /* ty=uint16 */;
  %584 = reshape(%580, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
  %585 = reshape(%581, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %586 = reshape(%582, newshape=[390]) /* ty=Tensor[(390), int16] */;
  %587 = @func_2951(%583, %584, %585, %586) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %588 = %587.9;
  %589 = cast(%588, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %590 = reshape(%589, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %591 = @func_2365(%590) /* ty=(Tensor[(15, 12, 11), float64],) */;
  %592 = cast(%var_7343, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
  %593 = erf(%592) /* ty=Tensor[(11, 11, 1), float32] */;
  %594 = cast(%593, dtype="int16") /* ty=Tensor[(11, 11, 1), int16] */;
  %595 = cast(meta[relay.Constant][47] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %596 = multiply(%594, %595) /* ty=Tensor[(11, 11, 390), int16] */;
  %597 = cast(%596, dtype="bool") /* ty=Tensor[(11, 11, 390), bool] */;
  %598 = cast(%593, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %599 = %591.0;
  %600 = less_equal(%597, %598) /* ty=Tensor[(11, 11, 390), bool] */;
  (%588, %var_7363, meta[relay.Constant][46] /* ty=Tensor[(12), uint16] */, %var_7365, %599, %600)
}

def @func_9471(%var_9427: uint16, %var_9434: Tensor[(1, 121), float32], %var_9435: Tensor[(360), uint16], %var_9454: Tensor[(231, 2), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], uint16, Tensor[(11, 11, 390), bool], Tensor[(14, 1), float32], Tensor[(1, 121), float32], Tensor[(360), uint16], Tensor[(300), float64], Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(231, 2), float64]) {
  %601 = cast(%var_9427, dtype="uint16") /* ty=uint16 */;
  %602 = reshape(%601, newshape=[]) /* ty=uint16 */;
  %603 = @func_9189(%602) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(11, 11), float32], uint16, Tensor[(360), uint16]) */;
  %604 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %605 = cast(meta[relay.Constant][48] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %606 = cast(%var_9434, dtype="float32") /* ty=Tensor[(1, 121), float32] */;
  %607 = cast(%var_9427, dtype="uint16") /* ty=uint16 */;
  %608 = cast(%var_9435, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %609 = cast(meta[relay.Constant][49] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %610 = reshape(%604, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %611 = reshape(%605, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %612 = reshape(%606, newshape=[121]) /* ty=Tensor[(121), float32] */;
  %613 = reshape(%607, newshape=[]) /* ty=uint16 */;
  %614 = reshape(%608, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
  %615 = reshape(%609, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %616 = @func_8668(%610, %611, %612, %613, %614, %615) /* ty=(Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) */;
  %617 = @func_9135() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %618 = cast(%var_9454, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
  %619 = reshape(%618, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float64] */;
  %620 = @func_9166() /* ty=Tensor[(5, 5, 15), bool] */;
  %621 = %603.1;
  %622 = %616.5;
  %623 = %617.0;
  %624 = @func_3857(%619) /* ty=Tensor[(3, 11, 14), float64] */;
  (%620, %621, %var_9427, %622, meta[relay.Constant][48] /* ty=Tensor[(14, 1), float32] */, %var_9434, %var_9435, meta[relay.Constant][49] /* ty=Tensor[(300), float64] */, %623, %624, %var_9454)
}

def @func_4406(%var_4378: Tensor[(3, 12, 11), float32], %var_4400: Tensor[(294), float64]) -> (Tensor[(3, 12, 11), float32], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) {
  %625 = cast(%var_4378, dtype="float32") /* ty=Tensor[(3, 12, 11), float32] */;
  %626 = cast(%var_4400, dtype="float64") /* ty=Tensor[(294), float64] */;
  %627 = reshape(%626, newshape=[7, 6, 7]) /* ty=Tensor[(7, 6, 7), float64] */;
  %628 = @func_3270(%627) /* ty=(Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) */;
  %629 = log10(%625) /* ty=Tensor[(3, 12, 11), float32] */;
  %630 = %628.1;
  (%629, %630, %var_4400)
}

def @func_5532(%var_5482: Tensor[(6, 7, 15), int16], %var_5483: Tensor[(6, 7, 15), int16], %var_5497: Tensor[(6, 30), float64], %var_5523: Tensor[(4), float64]) -> (Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) {
  %631 = cast(%var_5483, dtype="int16") /* ty=Tensor[(6, 7, 15), int16] */;
  %632 = shape_of(%var_5482, dtype="int32") /* ty=Tensor[(3), int32] */;
  %633 = cast(%var_5482, dtype="int16") /* ty=Tensor[(6, 7, 15), int16] */;
  %634 = dyn.reshape(%631, %632, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
  %635 = cast(%var_5497, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %636 = reshape(%635, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %637 = @func_614(%636) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
  %638 = cast(%var_5497, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
  %639 = reshape(%638, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %640 = @func_614(%639) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
  %641 = cast(%var_5523, dtype="float64") /* ty=Tensor[(4), float64] */;
  %642 = reshape(%641, newshape=[2, 1, 2]) /* ty=Tensor[(2, 1, 2), float64] */;
  %643 = @func_2008(%642) /* ty=(Tensor[(2, 1, 2), float64],) */;
  %644 = maximum(%633, %634) /* ty=Tensor[(6, 7, 15), int16] */;
  %645 = %637.5;
  %646 = %640.1;
  %647 = %643.0;
  (%644, %645, %var_5497, %646, %647, %var_5523)
}

def @func_10551() -> (Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) {
  %648 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %649 = cast(meta[relay.Constant][50] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %650 = cast(meta[relay.Constant][51] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %651 = reshape(%649, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), uint32] */;
  %652 = reshape(%650, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
  %653 = @func_6340(%651, %652) /* ty=(Tensor[(16, 3, 4), bool], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(1365), float32]) */;
  %654 = %648.0;
  %655 = %653.3;
  (%654, %655, meta[relay.Constant][50] /* ty=Tensor[(192), uint32] */, meta[relay.Constant][51] /* ty=Tensor[(1365), float32] */)
}

def @func_12775() -> (Tensor[(5, 5, 15), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) {
  %656 = @func_11812() /* ty=(Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float64], Tensor[(5, 5, 15), bool]) */;
  %657 = cast(meta[relay.Constant][52] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %658 = cast(meta[relay.Constant][52] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %659 = reshape(%657, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %660 = reshape(%658, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %661 = @func_880(%659, %660) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %662 = cast(meta[relay.Constant][53] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %663 = reshape(%662, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %664 = @func_10989(%663) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(294), float64], Tensor[(7, 6, 7), float64]) */;
  %665 = %656.1;
  %666 = %661.0;
  %667 = %664.2;
  (%665, %666, meta[relay.Constant][52] /* ty=Tensor[(300), float64] */, %667, meta[relay.Constant][53] /* ty=Tensor[(294), float64] */)
}

def @func_12844() -> (Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32], Tensor[(5, 5, 15), bool]) {
  %668 = cast(meta[relay.Constant][54] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %669 = reshape(%668, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), float32] */;
  %670 = @func_5755(%669) /* ty=(Tensor[(6, 1, 14), float32],) */;
  %671 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %672 = @func_11923() /* ty=Tensor[(5, 5, 15), bool] */;
  %673 = %670.0;
  %674 = %671.0;
  (%672, %673, meta[relay.Constant][54] /* ty=Tensor[(84), float32] */, %674)
}

def @func_2008(%var_2000: Tensor[(2, 1, 2), float64]) -> (Tensor[(2, 1, 2), float64],) {
  %675 = cast(%var_2000, dtype="float64") /* ty=Tensor[(2, 1, 2), float64] */;
  %676 = sigmoid(%675) /* ty=Tensor[(2, 1, 2), float64] */;
  (%676,)
}

def @func_12887() -> Tensor[(5, 5, 15), bool] {
  %677 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %677.0
}

def @func_6378(%var_6370: Tensor[(7, 6, 13), uint16], %var_6371: Tensor[(7, 6, 13), uint16]) -> (Tensor[(7, 6, 13), bool],) {
  %678 = cast(%var_6371, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %679 = shape_of(%var_6370, dtype="int32") /* ty=Tensor[(3), int32] */;
  %680 = cast(%var_6370, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
  %681 = dyn.reshape(%678, %679, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %682 = less_equal(%680, %681) /* ty=Tensor[(7, 6, 13), bool] */;
  (%682,)
}

def @main() -> (Tensor[(13, 15, 2), float32],) {
  %683 = @func_11199() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) */;
  %684 = %683.2;
  %685 = cast(%684, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %686 = tan(%685) /* ty=Tensor[(13, 15, 2), float64] */;
  %687 = cast(%686, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %688 = shape_of(%684, dtype="int32") /* ty=Tensor[(3), int32] */;
  %689 = cast(%684, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %690 = dyn.reshape(%687, %688, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %691 = greater(%689, %690) /* ty=Tensor[(13, 15, 2), bool] */;
  %692 = cast(%684, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %693 = shape_of(%691, dtype="int32") /* ty=Tensor[(3), int32] */;
  %694 = cast(%691, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %695 = dyn.reshape(%692, %693, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %696 = power(%694, %695) /* ty=Tensor[(13, 15, 2), float32] */;
  (%696,)
}

def @func_3270(%var_3244: Tensor[(7, 6, 7), float64]) -> (Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) {
  %697 = cast(%var_3244, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %698 = shape_of(meta[relay.Constant][55] /* ty=Tensor[(7, 6, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %699 = cast(meta[relay.Constant][55] /* ty=Tensor[(7, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %700 = dyn.reshape(%697, %698, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %701 = cast(%var_3244, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %702 = sinh(%701) /* ty=Tensor[(7, 6, 7), float64] */;
  %703 = cast(%702, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %704 = power(%699, %700) /* ty=Tensor[(7, 6, 7), float64] */;
  %705 = rsqrt(%703) /* ty=Tensor[(7, 6, 7), float64] */;
  (%704, %705)
}

def @func_12342(%var_12335: Tensor[(396), float32], %var_12336: Tensor[(49, 6), float64]) -> (Tensor[(1365), int16], Tensor[(3, 12, 11), float32], Tensor[(396), float32], Tensor[(49, 6), float64]) {
  %706 = @func_10852() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), int16], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(1365), float32], Tensor[(300), float64], Tensor[(8, 78), int8], Tensor[(300), float64]) */;
  %707 = cast(%var_12335, dtype="float32") /* ty=Tensor[(396), float32] */;
  %708 = cast(%var_12336, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
  %709 = reshape(%707, newshape=[3, 12, 11]) /* ty=Tensor[(3, 12, 11), float32] */;
  %710 = reshape(%708, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %711 = @func_4406(%709, %710) /* ty=(Tensor[(3, 12, 11), float32], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) */;
  %712 = cast(meta[relay.Constant][56] /* ty=Tensor[(49, 6), float64] */, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
  %713 = shape_of(%var_12336, dtype="int32") /* ty=Tensor[(2), int32] */;
  %714 = cast(%var_12336, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
  %715 = dyn.reshape(%712, %713, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
  %716 = %706.1;
  %717 = %711.0;
  %718 = floor_divide(%714, %715) /* ty=Tensor[(49, 6), float64] */;
  (%716, %717, %var_12335, %718)
}

def @func_7605(%var_7586: Tensor[(4, 3, 12), int8]) -> Tensor[(4, 3, 12), int8] {
  %719 = cast(meta[relay.Constant][57] /* ty=Tensor[(4, 3, 12), int8] */, dtype="int8") /* ty=Tensor[(4, 3, 12), int8] */;
  %720 = shape_of(%var_7586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %721 = cast(%var_7586, dtype="int8") /* ty=Tensor[(4, 3, 12), int8] */;
  %722 = dyn.reshape(%719, %720, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%721, %722) /* ty=Tensor[(4, 3, 12), int8] */
}

def @func_11380() -> Tensor[(15, 12, 11), float64] {
  %723 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %723.1
}

def @func_12623() -> (Tensor[(15, 12, 11), float64],) {
  %724 = @func_11380() /* ty=Tensor[(15, 12, 11), float64] */;
  (%724,)
}

def @func_1977(%var_1969: Tensor[(13, 15, 2), int16], %var_1970: Tensor[(13, 15, 2), int16]) -> Tensor[(13, 15, 2), bool] {
  %725 = cast(%var_1970, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %726 = shape_of(%var_1969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %727 = cast(%var_1969, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %728 = dyn.reshape(%725, %726, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%727, %728) /* ty=Tensor[(13, 15, 2), bool] */
}

def @func_10627() -> Tensor[(5, 5, 15), bool] {
  %729 = @func_9283() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %729.0
}

def @func_7456(%var_7439: Tensor[(11, 16, 2), float32]) -> (Tensor[(11, 16, 2), float32],) {
  %730 = cast(%var_7439, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %731 = shape_of(meta[relay.Constant][58] /* ty=Tensor[(11, 16, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %732 = cast(meta[relay.Constant][58] /* ty=Tensor[(11, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %733 = dyn.reshape(%730, %731, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %734 = power(%732, %733) /* ty=Tensor[(11, 16, 2), float32] */;
  (%734,)
}

def @func_2145(%var_2130: Tensor[(1, 6, 11), float32]) -> (Tensor[(1, 6, 11), float32],) {
  %735 = cast(%var_2130, dtype="float32") /* ty=Tensor[(1, 6, 11), float32] */;
  %736 = exp(%735) /* ty=Tensor[(1, 6, 11), float32] */;
  (%736,)
}

def @func_10124() -> (Tensor[(5, 5, 15), float32],) {
  %737 = @func_9166() /* ty=Tensor[(5, 5, 15), bool] */;
  %738 = cast(%737, dtype="float32") /* ty=Tensor[(5, 5, 15), float32] */;
  %739 = log10(%738) /* ty=Tensor[(5, 5, 15), float32] */;
  (%739,)
}

def @func_1777(%var_1746: Tensor[(12, 3, 10), uint16], %var_1747: Tensor[(12, 3, 10), uint16]) -> (Tensor[(12, 3, 10), bool],) {
  %740 = cast(%var_1747, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %741 = shape_of(%var_1746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %742 = cast(%var_1746, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %743 = dyn.reshape(%740, %741, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %744 = less_equal(%742, %743) /* ty=Tensor[(12, 3, 10), bool] */;
  (%744,)
}

def @func_8214() -> (Tensor[(5, 5, 15), bool],) {
  %745 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %746 = %745.0;
  (%746,)
}

def @func_12933() -> (Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float32], Tensor[(13, 15, 2), bool], Tensor[(390), int16]) {
  %747 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %748 = @func_10619() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) */;
  %749 = cast(meta[relay.Constant][59] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %750 = cast(meta[relay.Constant][59] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %751 = reshape(%749, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %752 = reshape(%750, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %753 = %747.2;
  %754 = %748.1;
  %755 = @func_1977(%751, %752) /* ty=Tensor[(13, 15, 2), bool] */;
  (%753, %754, %755, meta[relay.Constant][59] /* ty=Tensor[(390), int16] */)
}

def @func_5755(%var_5741: Tensor[(6, 1, 14), float32]) -> (Tensor[(6, 1, 14), float32],) {
  %756 = cast(%var_5741, dtype="float32") /* ty=Tensor[(6, 1, 14), float32] */;
  %757 = rsqrt(%756) /* ty=Tensor[(6, 1, 14), float32] */;
  (%757,)
}

def @func_9087(%var_9080: Tensor[(84), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32]) {
  %758 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %759 = cast(%var_9080, dtype="float32") /* ty=Tensor[(84), float32] */;
  %760 = reshape(%759, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), float32] */;
  %761 = @func_5755(%760) /* ty=(Tensor[(6, 1, 14), float32],) */;
  %762 = %758.0;
  %763 = %761.0;
  (%762, %763, %var_9080)
}

def @func_11673() -> (Tensor[(5, 5, 15), bool],) {
  %764 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %765 = %764.1;
  (%765,)
}

def @func_6340(%var_6311: Tensor[(16, 3, 4), uint32], %var_6325: Tensor[(1365), float32]) -> (Tensor[(16, 3, 4), bool], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(1365), float32]) {
  %766 = cast(%var_6311, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %767 = shape_of(meta[relay.Constant][60] /* ty=Tensor[(16, 3, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %768 = cast(meta[relay.Constant][60] /* ty=Tensor[(16, 3, 4), uint32] */, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %769 = dyn.reshape(%766, %767, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %770 = cast(meta[relay.Constant][61] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
  %771 = cast(%var_6325, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %772 = reshape(%770, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float32] */;
  %773 = reshape(%771, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %774 = @func_3185(%772, %773) /* ty=(Tensor[(15, 13, 7), bool],) */;
  %775 = equal(%768, %769) /* ty=Tensor[(16, 3, 4), bool] */;
  %776 = %774.0;
  (%775, %776, meta[relay.Constant][61] /* ty=Tensor[(91), float32] */, %var_6325)
}

def @func_10068() -> Tensor[(5, 5, 15), bool] {
  %777 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %777.0
}

def @func_9513(%var_9488: Tensor[(7, 66), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(7, 66), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) {
  %778 = cast(%var_9488, dtype="float64") /* ty=Tensor[(7, 66), float64] */;
  %779 = reshape(%778, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float64] */;
  %780 = cast(meta[relay.Constant][62] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %781 = cast(meta[relay.Constant][62] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %782 = reshape(%780, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %783 = reshape(%781, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %784 = @func_880(%782, %783) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %785 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  %786 = @func_3857(%779) /* ty=Tensor[(3, 11, 14), float64] */;
  %787 = %784.0;
  (%785, %786, %var_9488, %787, meta[relay.Constant][62] /* ty=Tensor[(300), float64] */)
}

def @func_4366(%var_4284: Tensor[(3, 16, 3), int32], %var_4285: Tensor[(3, 16, 3), int32], %var_4298: uint16, %var_4301: Tensor[(1, 390), int16], %var_4313: Tensor[(91), float32], %var_4319: Tensor[(42), float32], %var_4346: Tensor[(66), float32], %var_4352: Tensor[(300), float64], %var_4359: Tensor[(1, 48), uint64]) -> (Tensor[(3, 16, 3), int32], Tensor[(360), uint16], uint16, Tensor[(12, 1), uint16], Tensor[(360), uint16], Tensor[(1, 390), int16], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(91, 15), float32], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 16, 3), bool], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(728), float32], Tensor[(1, 48), uint64], Tensor[(180), float64]) {
  %788 = cast(%var_4285, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
  %789 = shape_of(%var_4284, dtype="int32") /* ty=Tensor[(3), int32] */;
  %790 = cast(%var_4284, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
  %791 = dyn.reshape(%788, %789, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %792 = cast(%var_4298, dtype="uint16") /* ty=uint16 */;
  %793 = cast(meta[relay.Constant][63] /* ty=Tensor[(12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
  %794 = cast(meta[relay.Constant][64] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %795 = cast(%var_4301, dtype="int16") /* ty=Tensor[(1, 390), int16] */;
  %796 = reshape(%792, newshape=[]) /* ty=uint16 */;
  %797 = reshape(%793, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
  %798 = reshape(%794, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %799 = reshape(%795, newshape=[390]) /* ty=Tensor[(390), int16] */;
  %800 = @func_2951(%796, %797, %798, %799) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %801 = cast(%var_4313, dtype="float32") /* ty=Tensor[(91), float32] */;
  %802 = cast(meta[relay.Constant][65] /* ty=Tensor[(91, 15), float32] */, dtype="float32") /* ty=Tensor[(91, 15), float32] */;
  %803 = reshape(%801, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float32] */;
  %804 = reshape(%802, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %805 = @func_3185(%803, %804) /* ty=(Tensor[(15, 13, 7), bool],) */;
  %806 = cast(%var_4319, dtype="float32") /* ty=Tensor[(42), float32] */;
  %807 = cast(%var_4319, dtype="float32") /* ty=Tensor[(42), float32] */;
  %808 = reshape(%806, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %809 = reshape(%807, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %810 = @func_19(%808, %809) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %811 = cast(%var_4285, dtype="float32") /* ty=Tensor[(3, 16, 3), float32] */;
  %812 = atanh(%811) /* ty=Tensor[(3, 16, 3), float32] */;
  %813 = cast(%var_4285, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %814 = shape_of(%812, dtype="int32") /* ty=Tensor[(3), int32] */;
  %815 = cast(%812, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
  %816 = dyn.reshape(%813, %814, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %817 = cast(%var_4346, dtype="float32") /* ty=Tensor[(66), float32] */;
  %818 = reshape(%817, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %819 = @func_2145(%818) /* ty=(Tensor[(1, 6, 11), float32],) */;
  %820 = cast(%var_4352, dtype="float64") /* ty=Tensor[(300), float64] */;
  %821 = cast(%var_4352, dtype="float64") /* ty=Tensor[(300), float64] */;
  %822 = reshape(%820, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %823 = reshape(%821, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %824 = @func_880(%822, %823) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %825 = cast(%var_4359, dtype="uint64") /* ty=Tensor[(1, 48), uint64] */;
  %826 = cast(meta[relay.Constant][66] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %827 = reshape(%825, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint64] */;
  %828 = reshape(%826, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %829 = @func_1310(%827, %828) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */;
  %830 = bitwise_xor(%790, %791) /* ty=Tensor[(3, 16, 3), int32] */;
  %831 = %800.2;
  %832 = %805.0;
  %833 = %810.0;
  %834 = not_equal(%815, %816) /* ty=Tensor[(3, 16, 3), bool] */;
  %835 = %819.0;
  %836 = %824.0;
  %837 = %829.1;
  (%830, %831, %var_4298, meta[relay.Constant][63] /* ty=Tensor[(12, 1), uint16] */, meta[relay.Constant][64] /* ty=Tensor[(360), uint16] */, %var_4301, %832, %var_4313, meta[relay.Constant][65] /* ty=Tensor[(91, 15), float32] */, %833, %var_4319, %834, %835, %var_4346, %836, %var_4352, %837, %var_4359, meta[relay.Constant][66] /* ty=Tensor[(180), float64] */)
}

def @func_11655() -> (Tensor[(5, 5, 15), bool],) {
  %838 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %839 = %838.0;
  (%839,)
}

def @func_9400() -> (Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) {
  %840 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %841 = %840.0;
  %842 = cast(%841, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
  %843 = cast(meta[relay.Constant][67] /* ty=Tensor[(6, 140), float32] */, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
  %844 = reshape(%843, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float32] */;
  %845 = @func_4166(%844) /* ty=(Tensor[(12, 5, 14), float32], Tensor[(1, 6, 11), float32], Tensor[(1, 66), float32]) */;
  %846 = %845.0;
  %847 = cast(%846, dtype="float64") /* ty=Tensor[(12, 5, 14), float64] */;
  %848 = atan(%842) /* ty=Tensor[(5, 5, 15), float64] */;
  %849 = acosh(%847) /* ty=Tensor[(12, 5, 14), float64] */;
  (%848, meta[relay.Constant][67] /* ty=Tensor[(6, 140), float32] */, %849)
}

def @func_11923() -> Tensor[(5, 5, 15), bool] {
  %850 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %850.0
}

def @func_7541(%var_7484: Tensor[(8, 3, 8), float32], %var_7496: Tensor[(8, 3, 8), float32], %var_7517: Tensor[(624), int8]) -> (Tensor[(8, 3, 8), float32], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(8, 3, 8), uint16], Tensor[(13, 3, 16), int8], Tensor[(624), int8], Tensor[(300), float64]) {
  %851 = cast(%var_7484, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
  %852 = acosh(%851) /* ty=Tensor[(8, 3, 8), float32] */;
  %853 = cast(%852, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
  %854 = shape_of(%var_7484, dtype="int32") /* ty=Tensor[(3), int32] */;
  %855 = cast(%var_7484, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
  %856 = dyn.reshape(%853, %854, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %857 = cast(meta[relay.Constant][68] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %858 = cast(meta[relay.Constant][68] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %859 = reshape(%857, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %860 = reshape(%858, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %861 = @func_1777(%859, %860) /* ty=(Tensor[(12, 3, 10), bool],) */;
  %862 = cast(%var_7496, dtype="float64") /* ty=Tensor[(8, 3, 8), float64] */;
  %863 = shape_of(%852, dtype="int32") /* ty=Tensor[(3), int32] */;
  %864 = cast(%852, dtype="float64") /* ty=Tensor[(8, 3, 8), float64] */;
  %865 = dyn.reshape(%862, %863, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %866 = power(%864, %865) /* ty=Tensor[(8, 3, 8), float64] */;
  %867 = cast(meta[relay.Constant][69] /* ty=Tensor[(8, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(8, 3, 8), int32] */;
  %868 = shape_of(%866, dtype="int32") /* ty=Tensor[(3), int32] */;
  %869 = cast(%866, dtype="int32") /* ty=Tensor[(8, 3, 8), int32] */;
  %870 = dyn.reshape(%867, %868, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
  %871 = bitwise_and(%869, %870) /* ty=Tensor[(8, 3, 8), int32] */;
  %872 = cast(%852, dtype="uint16") /* ty=Tensor[(8, 3, 8), uint16] */;
  %873 = shape_of(%871, dtype="int32") /* ty=Tensor[(3), int32] */;
  %874 = cast(%871, dtype="uint16") /* ty=Tensor[(8, 3, 8), uint16] */;
  %875 = dyn.reshape(%872, %873, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
  %876 = cast(%var_7517, dtype="int8") /* ty=Tensor[(624), int8] */;
  %877 = cast(meta[relay.Constant][70] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %878 = reshape(%876, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), int8] */;
  %879 = reshape(%877, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %880 = @func_7196(%878, %879) /* ty=(Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */;
  %881 = floor_mod(%855, %856) /* ty=Tensor[(8, 3, 8), float32] */;
  %882 = %861.0;
  %883 = right_shift(%874, %875) /* ty=Tensor[(8, 3, 8), uint16] */;
  %884 = %880.0;
  (%881, %882, meta[relay.Constant][68] /* ty=Tensor[(360), uint16] */, %883, %884, %var_7517, meta[relay.Constant][70] /* ty=Tensor[(300), float64] */)
}

def @func_10619() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) {
  %885 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %886 = @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */;
  %887 = %885.0;
  %888 = %886.0;
  (%887, %888)
}

def @func_9682() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %889 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %890 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
  %891 = %889.0;
  (%890, %891)
}

def @func_11880() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %892 = @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %893 = %892.0;
  %894 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  (%893, %894)
}

def @func_12040(%var_12023: Tensor[(1365), float32]) -> (Tensor[(5, 5, 15), float32], Tensor[(1365), bool]) {
  %895 = @func_10924() /* ty=(Tensor[(5, 5, 15), float32],) */;
  %896 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
  %897 = %896.1;
  %898 = cast(%var_12023, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %899 = shape_of(%897, dtype="int32") /* ty=Tensor[(1), int32] */;
  %900 = cast(%897, dtype="bool") /* ty=Tensor[(1365), bool] */;
  %901 = dyn.reshape(%898, %899, newshape=[]) /* ty=Tensor[(?), bool] */;
  %902 = %895.0;
  %903 = not_equal(%900, %901) /* ty=Tensor[(1365), bool] */;
  (%902, %903)
}

def @func_1310(%var_1199: Tensor[(2, 6, 4), uint64], %var_1244: Tensor[(180), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) {
  %904 = cast(meta[relay.Constant][71] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %905 = cast(meta[relay.Constant][72] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %906 = cast(meta[relay.Constant][71] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %907 = reshape(%904, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %908 = reshape(%905, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %909 = reshape(%906, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
  %910 = @func_568(%907, %908, %909) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
  %911 = cast(%var_1244, dtype="float64") /* ty=Tensor[(180), float64] */;
  %912 = reshape(%911, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %913 = @func_614(%912) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
  %914 = cast(meta[relay.Constant][71] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %915 = %910.7;
  %916 = cast(%915, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %917 = cast(meta[relay.Constant][71] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %918 = reshape(%914, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %919 = reshape(%916, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %920 = reshape(%917, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
  %921 = @func_568(%918, %919, %920) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
  %922 = %921.6;
  %923 = cast(%922, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
  %924 = cast(%915, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %925 = cast(meta[relay.Constant][71] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %926 = reshape(%923, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %927 = reshape(%924, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %928 = reshape(%925, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
  %929 = @func_568(%926, %927, %928) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
  %930 = cast(meta[relay.Constant][73] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %931 = cast(meta[relay.Constant][73] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %932 = reshape(%930, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %933 = reshape(%931, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %934 = @func_880(%932, %933) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %935 = cast(meta[relay.Constant][74] /* ty=Tensor[(2, 6, 4), uint64] */, dtype="uint64") /* ty=Tensor[(2, 6, 4), uint64] */;
  %936 = shape_of(%var_1199, dtype="int32") /* ty=Tensor[(3), int32] */;
  %937 = cast(%var_1199, dtype="uint64") /* ty=Tensor[(2, 6, 4), uint64] */;
  %938 = dyn.reshape(%935, %936, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
  %939 = bitwise_or(%937, %938) /* ty=Tensor[(2, 6, 4), uint64] */;
  %940 = cast(%939, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
  %941 = asinh(%940) /* ty=Tensor[(2, 6, 4), float32] */;
  %942 = cast(%941, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
  %943 = cast(meta[relay.Constant][73] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %944 = %934.0;
  %945 = cast(%944, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
  %946 = reshape(%943, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %947 = reshape(%945, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %948 = @func_880(%946, %947) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %949 = cast(meta[relay.Constant][74] /* ty=Tensor[(2, 6, 4), uint64] */, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
  %950 = cos(%949) /* ty=Tensor[(2, 6, 4), float32] */;
  %951 = cast(%950, dtype="int8") /* ty=Tensor[(2, 6, 4), int8] */;
  %952 = shape_of(%941, dtype="int32") /* ty=Tensor[(3), int32] */;
  %953 = cast(%941, dtype="int8") /* ty=Tensor[(2, 6, 4), int8] */;
  %954 = dyn.reshape(%951, %952, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %955 = %913.0;
  %956 = %929.2;
  %957 = sin(%942) /* ty=Tensor[(2, 6, 4), float32] */;
  %958 = %948.0;
  %959 = logical_xor(%953, %954) /* ty=Tensor[(2, 6, 4), int8] */;
  (%915, meta[relay.Constant][71] /* ty=Tensor[(728), float32] */, meta[relay.Constant][72] /* ty=Tensor[(42), float32] */, %955, %var_1244, %922, %956, %944, meta[relay.Constant][73] /* ty=Tensor[(300), float64] */, %957, %958, %959)
}

def @func_8709() -> Tensor[(5, 5, 15), bool] {
  %960 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %960.0
}

def @func_11966() -> (Tensor[(5, 5, 15), bool],) {
  %961 = @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %962 = %961.0;
  (%962,)
}

def @func_9788(%var_9729: Tensor[(630), int16], %var_9730: Tensor[(180), float64], %var_9739: Tensor[(144), int8], %var_9749: Tensor[(52), uint16]) -> (Tensor[(5, 5, 15), bool], Tensor[(10, 3, 6), bool], Tensor[(630), int16], Tensor[(180), float64], Tensor[(1, 4), float64], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(4, 13), uint16], Tensor[(52), uint16], Tensor[(3, 11, 14), float64], Tensor[(462), float64], Tensor[(462), float64]) {
  %963 = @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %964 = cast(%var_9729, dtype="int16") /* ty=Tensor[(630), int16] */;
  %965 = cast(%var_9729, dtype="int16") /* ty=Tensor[(630), int16] */;
  %966 = cast(%var_9730, dtype="float64") /* ty=Tensor[(180), float64] */;
  %967 = cast(meta[relay.Constant][75] /* ty=Tensor[(1, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 4), float64] */;
  %968 = reshape(%964, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
  %969 = reshape(%965, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
  %970 = reshape(%966, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %971 = reshape(%967, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %972 = @func_5532(%968, %969, %970, %971) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) */;
  %973 = cast(%var_9739, dtype="int8") /* ty=Tensor[(144), int8] */;
  %974 = reshape(%973, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), int8] */;
  %975 = cast(%var_9749, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %976 = cast(%var_9749, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %977 = reshape(%975, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
  %978 = reshape(%976, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
  %979 = cast(meta[relay.Constant][76] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %980 = reshape(%979, newshape=[7, 66]) /* ty=Tensor[(7, 66), float64] */;
  %981 = @func_9513(%980) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(7, 66), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */;
  %982 = @func_8735() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(462), float64], Tensor[(1372), uint64]) */;
  %983 = %963.0;
  %984 = %972.1;
  %985 = @func_7605(%974) /* ty=Tensor[(4, 3, 12), int8] */;
  %986 = @func_2029(%977, %978) /* ty=Tensor[(4, 13), uint16] */;
  %987 = %981.1;
  %988 = %982.1;
  (%983, %984, %var_9729, %var_9730, meta[relay.Constant][75] /* ty=Tensor[(1, 4), float64] */, %985, %var_9739, %986, %var_9749, %987, meta[relay.Constant][76] /* ty=Tensor[(462), float64] */, %988)
}

def @func_7086(%var_7077: Tensor[(2, 2, 6), float32]) -> (Tensor[(2, 2, 6), bool],) {
  %989 = cast(%var_7077, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %990 = shape_of(meta[relay.Constant][77] /* ty=Tensor[(2, 2, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %991 = cast(meta[relay.Constant][77] /* ty=Tensor[(2, 2, 6), float32] */, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %992 = dyn.reshape(%989, %990, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %993 = not_equal(%991, %992) /* ty=Tensor[(2, 2, 6), bool] */;
  (%993,)
}

def @func_12802(%var_12787: Tensor[(90), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(180), float64], Tensor[(90), float64], Tensor[(2, 52), int16], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) {
  %994 = @func_11673() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %995 = cast(%var_12787, dtype="float64") /* ty=Tensor[(90), float64] */;
  %996 = cast(%var_12787, dtype="float64") /* ty=Tensor[(90), float64] */;
  %997 = cast(%var_12787, dtype="float64") /* ty=Tensor[(90), float64] */;
  %998 = cast(meta[relay.Constant][78] /* ty=Tensor[(2, 52), int16] */, dtype="int16") /* ty=Tensor[(2, 52), int16] */;
  %999 = reshape(%995, newshape=[5, 2, 9]) /* ty=Tensor[(5, 2, 9), float64] */;
  %1000 = reshape(%996, newshape=[5, 2, 9]) /* ty=Tensor[(5, 2, 9), float64] */;
  %1001 = reshape(%997, newshape=[5, 2, 9]) /* ty=Tensor[(5, 2, 9), float64] */;
  %1002 = reshape(%998, newshape=[104]) /* ty=Tensor[(104), int16] */;
  %1003 = @func_7690(%999, %1000, %1001, %1002) /* ty=(Tensor[(5, 2, 9), float64], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(5, 2, 9), bool], Tensor[(48), uint64], Tensor[(104), int16]) */;
  %1004 = cast(meta[relay.Constant][79] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %1005 = cast(meta[relay.Constant][80] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %1006 = reshape(%1004, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %1007 = reshape(%1005, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %1008 = @func_11111(%1006, %1007) /* ty=(Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) */;
  %1009 = %994.0;
  %1010 = %1003.2;
  %1011 = %1008.2;
  (%1009, %1010, %var_12787, meta[relay.Constant][78] /* ty=Tensor[(2, 52), int16] */, %1011, meta[relay.Constant][79] /* ty=Tensor[(192), uint32] */, meta[relay.Constant][80] /* ty=Tensor[(210), float32] */)
}

def @func_11625() -> Tensor[(5, 5, 15), bool] {
  @func_9166() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_11700() -> (Tensor[(5, 5, 15), bool],) {
  %1012 = @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %1013 = %1012.0;
  (%1013,)
}

def @func_13046(%var_13037: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float32] {
  %1014 = @func_10663() /* ty=Tensor[(15, 12, 11), float64] */;
  %1015 = cast(%var_13037, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %1016 = shape_of(%1014, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1017 = cast(%1014, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %1018 = dyn.reshape(%1015, %1016, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  mod(%1017, %1018) /* ty=Tensor[(15, 12, 11), float32] */
}

def @func_8262(%var_8245: Tensor[(14, 3, 5), float32], %var_8246: Tensor[(14, 3, 5), float32]) -> (Tensor[(14, 3, 5), uint32],) {
  %1019 = cast(%var_8246, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
  %1020 = shape_of(%var_8245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1021 = cast(%var_8245, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
  %1022 = dyn.reshape(%1019, %1020, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1023 = floor_divide(%1021, %1022) /* ty=Tensor[(14, 3, 5), float32] */;
  %1024 = cast(%1023, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
  %1025 = shape_of(%var_8245, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1026 = cast(%var_8245, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
  %1027 = dyn.reshape(%1024, %1025, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %1028 = right_shift(%1026, %1027) /* ty=Tensor[(14, 3, 5), uint32] */;
  (%1028,)
}

def @func_10504() -> Tensor[(5, 5, 15), bool] {
  @func_10068() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_8508(%var_8470: Tensor[(360), uint16], %var_8471: Tensor[(1, 66), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(1, 6, 11), float32], bool, Tensor[(6), bool], Tensor[(360), uint16], Tensor[(1, 66), float32], Tensor[(48), uint64], Tensor[(144), float64]) {
  %1029 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %1030 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %1031 = cast(meta[relay.Constant][81] /* ty=Tensor[(6), bool] */, dtype="bool") /* ty=Tensor[(6), bool] */;
  %1032 = cast(%var_8470, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %1033 = cast(%var_8471, dtype="float32") /* ty=Tensor[(1, 66), float32] */;
  %1034 = reshape(%1030, newshape=[]) /* ty=bool */;
  %1035 = reshape(%1031, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), bool] */;
  %1036 = reshape(%1032, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %1037 = reshape(%1033, newshape=[66]) /* ty=Tensor[(66), float32] */;
  %1038 = @func_4046(%1034, %1035, %1036, %1037) /* ty=(Tensor[(3, 1, 2), bool], Tensor[(360), uint16], Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16], Tensor[(1, 6, 11), float32], Tensor[(66), float32]) */;
  %1039 = cast(meta[relay.Constant][82] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %1040 = reshape(%1039, newshape=[9, 4, 4]) /* ty=Tensor[(9, 4, 4), float64] */;
  %1041 = @func_3104(%1040) /* ty=(Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) */;
  %1042 = %1029.0;
  %1043 = %1038.5;
  %1044 = %1041.2;
  (%1042, %1043, False /* ty=bool */, meta[relay.Constant][81] /* ty=Tensor[(6), bool] */, %var_8470, %var_8471, %1044, meta[relay.Constant][82] /* ty=Tensor[(144), float64] */)
}

def @func_8394() -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  %1045 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %1046 = cast(meta[relay.Constant][83] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %1047 = reshape(%1046, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %1048 = @func_2365(%1047) /* ty=(Tensor[(15, 12, 11), float64],) */;
  %1049 = %1045.0;
  %1050 = %1048.0;
  (%1049, %1050, meta[relay.Constant][83] /* ty=Tensor[(1980), float32] */)
}

def @func_2365(%var_2346: Tensor[(15, 12, 11), float32]) -> (Tensor[(15, 12, 11), float64],) {
  %1051 = cast(%var_2346, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %1052 = cos(%1051) /* ty=Tensor[(15, 12, 11), float32] */;
  %1053 = cast(%var_2346, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  %1054 = shape_of(%1052, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1055 = cast(%1052, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  %1056 = dyn.reshape(%1053, %1054, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %1057 = floor_divide(%1055, %1056) /* ty=Tensor[(15, 12, 11), float64] */;
  (%1057,)
}

def @func_4046(%var_4028: bool, %var_4029: Tensor[(3, 1, 2), bool], %var_4039: Tensor[(360), uint16], %var_4043: Tensor[(66), float32]) -> (Tensor[(3, 1, 2), bool], Tensor[(360), uint16], Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16], Tensor[(1, 6, 11), float32], Tensor[(66), float32]) {
  %1058 = cast(%var_4028, dtype="bool") /* ty=bool */;
  %1059 = cast(%var_4029, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %1060 = cast(%var_4028, dtype="uint16") /* ty=uint16 */;
  %1061 = cast(meta[relay.Constant][84] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %1062 = cast(%var_4039, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %1063 = cast(meta[relay.Constant][85] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %1064 = reshape(%1060, newshape=[]) /* ty=uint16 */;
  %1065 = reshape(%1061, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
  %1066 = reshape(%1062, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %1067 = reshape(%1063, newshape=[390]) /* ty=Tensor[(390), int16] */;
  %1068 = @func_2951(%1064, %1065, %1066, %1067) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %1069 = cast(%var_4043, dtype="float32") /* ty=Tensor[(66), float32] */;
  %1070 = reshape(%1069, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %1071 = @func_2145(%1070) /* ty=(Tensor[(1, 6, 11), float32],) */;
  %1072 = logical_and(%1058, %1059) /* ty=Tensor[(3, 1, 2), bool] */;
  %1073 = %1068.2;
  %1074 = %1071.0;
  (%1072, %1073, meta[relay.Constant][84] /* ty=Tensor[(12), uint16] */, %var_4039, meta[relay.Constant][85] /* ty=Tensor[(390), int16] */, %1074, %var_4043)
}

def @func_11318() -> (Tensor[(5, 5, 15), bool],) {
  %1075 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %1076 = %1075.0;
  (%1076,)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
==========mutated_mod==========
#[version = "0.0.5"]
def @func_6381(%var_6379: Tensor[(7, 6, 13), uint16], %var_6380: Tensor[(7, 6, 13), uint16]) -> (Tensor[(7, 6, 13), bool],) {
  %5 = fn (%var_6370: Tensor[(7, 6, 13), uint16], %var_6371: Tensor[(7, 6, 13), uint16]) -> (Tensor[(7, 6, 13), bool],) {
    %0 = cast(%var_6371, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
    %1 = shape_of(%var_6370, dtype="int32") /* ty=Tensor[(3), int32] */;
    %2 = cast(%var_6370, dtype="bool") /* ty=Tensor[(7, 6, 13), bool] */;
    %3 = dyn.reshape(%0, %1, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %4 = less_equal(%2, %3) /* ty=Tensor[(7, 6, 13), bool] */;
    (%4,)
  };
  %5(%var_6379, %var_6380) /* ty=(Tensor[(7, 6, 13), bool],) */
}

def @func_10569() -> (Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) {
  %6 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %7 = @func_10551() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) */;
  %8 = %6.1;
  %9 = %7.3;
  (%8, %9)
}

def @func_7545(%var_7542: Tensor[(8, 3, 8), float32], %var_7543: Tensor[(8, 3, 8), float32], %var_7544: Tensor[(624), int8]) -> (Tensor[(8, 3, 8), float32], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(8, 3, 8), uint16], Tensor[(13, 3, 16), int8], Tensor[(624), int8], Tensor[(300), float64]) {
  %44 = fn (%var_7484: Tensor[(8, 3, 8), float32], %var_7496: Tensor[(8, 3, 8), float32], %var_7517: Tensor[(624), int8]) -> (Tensor[(8, 3, 8), float32], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(8, 3, 8), uint16], Tensor[(13, 3, 16), int8], Tensor[(624), int8], Tensor[(300), float64]) {
    %10 = cast(%var_7484, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
    %11 = acosh(%10) /* ty=Tensor[(8, 3, 8), float32] */;
    %12 = cast(%11, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
    %13 = shape_of(%var_7484, dtype="int32") /* ty=Tensor[(3), int32] */;
    %14 = cast(%var_7484, dtype="float32") /* ty=Tensor[(8, 3, 8), float32] */;
    %15 = dyn.reshape(%12, %13, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %16 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %17 = cast(meta[relay.Constant][0] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %18 = reshape(%16, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
    %19 = reshape(%17, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
    %20 = @func_1777(%18, %19) /* ty=(Tensor[(12, 3, 10), bool],) */;
    %21 = cast(%var_7496, dtype="float64") /* ty=Tensor[(8, 3, 8), float64] */;
    %22 = shape_of(%11, dtype="int32") /* ty=Tensor[(3), int32] */;
    %23 = cast(%11, dtype="float64") /* ty=Tensor[(8, 3, 8), float64] */;
    %24 = dyn.reshape(%21, %22, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
    %25 = power(%23, %24) /* ty=Tensor[(8, 3, 8), float64] */;
    %26 = cast(meta[relay.Constant][1] /* ty=Tensor[(8, 3, 8), float64] */, dtype="int32") /* ty=Tensor[(8, 3, 8), int32] */;
    %27 = shape_of(%25, dtype="int32") /* ty=Tensor[(3), int32] */;
    %28 = cast(%25, dtype="int32") /* ty=Tensor[(8, 3, 8), int32] */;
    %29 = dyn.reshape(%26, %27, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %30 = bitwise_and(%28, %29) /* ty=Tensor[(8, 3, 8), int32] */;
    %31 = cast(%11, dtype="uint16") /* ty=Tensor[(8, 3, 8), uint16] */;
    %32 = shape_of(%30, dtype="int32") /* ty=Tensor[(3), int32] */;
    %33 = cast(%30, dtype="uint16") /* ty=Tensor[(8, 3, 8), uint16] */;
    %34 = dyn.reshape(%31, %32, newshape=[]) /* ty=Tensor[(?, ?, ?), uint16] */;
    %35 = cast(%var_7517, dtype="int8") /* ty=Tensor[(624), int8] */;
    %36 = cast(meta[relay.Constant][2] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %37 = reshape(%35, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), int8] */;
    %38 = reshape(%36, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %39 = @func_7196(%37, %38) /* ty=(Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */;
    %40 = floor_mod(%14, %15) /* ty=Tensor[(8, 3, 8), float32] */;
    %41 = %20.0;
    %42 = right_shift(%33, %34) /* ty=Tensor[(8, 3, 8), uint16] */;
    %43 = %39.0;
    (%40, %41, meta[relay.Constant][0] /* ty=Tensor[(360), uint16] */, %42, %43, %var_7517, meta[relay.Constant][2] /* ty=Tensor[(300), float64] */)
  };
  %44(%var_7542, %var_7543, %var_7544) /* ty=(Tensor[(8, 3, 8), float32], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(8, 3, 8), uint16], Tensor[(13, 3, 16), int8], Tensor[(624), int8], Tensor[(300), float64]) */
}

def @func_7289(%var_7275: Tensor[(3, 3, 5), float64]) -> (Tensor[(3, 3, 5), bool],) {
  %45 = cast(%var_7275, dtype="float64") /* ty=Tensor[(3, 3, 5), float64] */;
  %46 = tan(%45) /* ty=Tensor[(3, 3, 5), float64] */;
  %47 = cast(%46, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
  %48 = shape_of(%var_7275, dtype="int32") /* ty=Tensor[(3), int32] */;
  %49 = cast(%var_7275, dtype="bool") /* ty=Tensor[(3, 3, 5), bool] */;
  %50 = dyn.reshape(%47, %48, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %51 = greater_equal(%49, %50) /* ty=Tensor[(3, 3, 5), bool] */;
  (%51,)
}

def @func_11115(%var_11113: Tensor[(192), uint32], %var_11114: Tensor[(210), float32]) -> (Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) {
  @func_11111(%var_11113, %var_11114) /* ty=(Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) */
}

def @func_9136() -> (Tensor[(5, 5, 15), bool],) {
  %54 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %52 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
    %53 = %52.1;
    (%53,)
  };
  %54() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_11075() -> (Tensor[(5, 5, 15), bool],) {
  @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_9401() -> (Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) {
  %65 = fn () -> (Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) {
    %55 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
    %56 = %55.0;
    %57 = cast(%56, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
    %58 = cast(meta[relay.Constant][3] /* ty=Tensor[(6, 140), float32] */, dtype="float32") /* ty=Tensor[(6, 140), float32] */;
    %59 = reshape(%58, newshape=[12, 5, 14]) /* ty=Tensor[(12, 5, 14), float32] */;
    %60 = @func_4166(%59) /* ty=(Tensor[(12, 5, 14), float32], Tensor[(1, 6, 11), float32], Tensor[(1, 66), float32]) */;
    %61 = %60.0;
    %62 = cast(%61, dtype="float64") /* ty=Tensor[(12, 5, 14), float64] */;
    %63 = atan(%57) /* ty=Tensor[(5, 5, 15), float64] */;
    %64 = acosh(%62) /* ty=Tensor[(12, 5, 14), float64] */;
    (%63, meta[relay.Constant][3] /* ty=Tensor[(6, 140), float32] */, %64)
  };
  %65() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */
}

def @func_11111(%var_11094: Tensor[(192), uint32], %var_11105: Tensor[(210), float32]) -> (Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) {
  %66 = @func_10551() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) */;
  %67 = %66.2;
  %68 = cast(%var_11094, dtype="bool") /* ty=Tensor[(192), bool] */;
  %69 = shape_of(%67, dtype="int32") /* ty=Tensor[(1), int32] */;
  %70 = cast(%67, dtype="bool") /* ty=Tensor[(192), bool] */;
  %71 = dyn.reshape(%68, %69, newshape=[]) /* ty=Tensor[(?), bool] */;
  %72 = cast(%var_11105, dtype="float32") /* ty=Tensor[(210), float32] */;
  %73 = cast(%var_11105, dtype="float32") /* ty=Tensor[(210), float32] */;
  %74 = reshape(%72, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), float32] */;
  %75 = reshape(%73, newshape=[14, 3, 5]) /* ty=Tensor[(14, 3, 5), float32] */;
  %76 = @func_8262(%74, %75) /* ty=(Tensor[(14, 3, 5), uint32],) */;
  %77 = greater_equal(%70, %71) /* ty=Tensor[(192), bool] */;
  %78 = %76.0;
  (%77, %78, %var_11105)
}

def @func_3188(%var_3186: Tensor[(1, 13, 7), float32], %var_3187: Tensor[(15, 13, 7), float32]) -> (Tensor[(15, 13, 7), bool],) {
  %84 = fn (%var_3171: Tensor[(1, 13, 7), float32], %var_3180: Tensor[(15, 13, 7), float32]) -> (Tensor[(15, 13, 7), bool],) {
    %79 = cast(%var_3171, dtype="float32") /* ty=Tensor[(1, 13, 7), float32] */;
    %80 = sqrt(%79) /* ty=Tensor[(1, 13, 7), float32] */;
    %81 = cast(%80, dtype="bool") /* ty=Tensor[(1, 13, 7), bool] */;
    %82 = cast(%var_3180, dtype="bool") /* ty=Tensor[(15, 13, 7), bool] */;
    %83 = not_equal(%81, %82) /* ty=Tensor[(15, 13, 7), bool] */;
    (%83,)
  };
  %84(%var_3186, %var_3187) /* ty=(Tensor[(15, 13, 7), bool],) */
}

def @func_7605(%var_7586: Tensor[(4, 3, 12), int8]) -> Tensor[(4, 3, 12), int8] {
  %85 = cast(meta[relay.Constant][4] /* ty=Tensor[(4, 3, 12), int8] */, dtype="int8") /* ty=Tensor[(4, 3, 12), int8] */;
  %86 = shape_of(%var_7586, dtype="int32") /* ty=Tensor[(3), int32] */;
  %87 = cast(%var_7586, dtype="int8") /* ty=Tensor[(4, 3, 12), int8] */;
  %88 = dyn.reshape(%85, %86, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  right_shift(%87, %88) /* ty=Tensor[(4, 3, 12), int8] */
}

def @func_7788(%var_7786: Tensor[(7, 14, 14), uint64], %var_7787: Tensor[(7, 14, 14), uint64]) -> (Tensor[(7, 14, 14), float64], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 11, 14), float64], Tensor[(462), float64]) {
  %107 = fn (%var_7762: Tensor[(7, 14, 14), uint64], %var_7763: Tensor[(7, 14, 14), uint64]) -> (Tensor[(7, 14, 14), float64], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 11, 14), float64], Tensor[(462), float64]) {
    %89 = cast(%var_7763, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %90 = shape_of(%var_7762, dtype="int32") /* ty=Tensor[(3), int32] */;
    %91 = cast(%var_7762, dtype="bool") /* ty=Tensor[(7, 14, 14), bool] */;
    %92 = dyn.reshape(%89, %90, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %93 = less_equal(%91, %92) /* ty=Tensor[(7, 14, 14), bool] */;
    %94 = cast(%93, dtype="float64") /* ty=Tensor[(7, 14, 14), float64] */;
    %95 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %96 = cast(meta[relay.Constant][6] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %97 = cast(meta[relay.Constant][5] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %98 = reshape(%95, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %99 = reshape(%96, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %100 = reshape(%97, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
    %101 = @func_568(%98, %99, %100) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
    %102 = cast(meta[relay.Constant][7] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
    %103 = reshape(%102, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float64] */;
    %104 = sinh(%94) /* ty=Tensor[(7, 14, 14), float64] */;
    %105 = %101.0;
    %106 = @func_3857(%103) /* ty=Tensor[(3, 11, 14), float64] */;
    (%104, %105, meta[relay.Constant][5] /* ty=Tensor[(728), float32] */, meta[relay.Constant][6] /* ty=Tensor[(42), float32] */, %106, meta[relay.Constant][7] /* ty=Tensor[(462), float64] */)
  };
  %107(%var_7786, %var_7787) /* ty=(Tensor[(7, 14, 14), float64], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 11, 14), float64], Tensor[(462), float64]) */
}

def @func_10571() -> (Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) {
  @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */
}

def @func_7459(%var_7457: Tensor[(11, 16, 2), float32]) -> (Tensor[(11, 16, 2), float32],) {
  @func_7456(%var_7457) /* ty=(Tensor[(11, 16, 2), float32],) */
}

def @func_10663() -> Tensor[(15, 12, 11), float64] {
  %108 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %108.1
}

def @func_11023() -> Tensor[(5, 5, 15), bool] {
  @func_11021() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_9277() -> (Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) {
  %109 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %110 = cast(meta[relay.Constant][8] /* ty=Tensor[(195, 2), int16] */, dtype="int16") /* ty=Tensor[(195, 2), int16] */;
  %111 = cast(meta[relay.Constant][8] /* ty=Tensor[(195, 2), int16] */, dtype="int16") /* ty=Tensor[(195, 2), int16] */;
  %112 = reshape(%110, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %113 = reshape(%111, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %114 = %109.0;
  %115 = @func_1977(%112, %113) /* ty=Tensor[(13, 15, 2), bool] */;
  (%114, %115, meta[relay.Constant][8] /* ty=Tensor[(195, 2), int16] */)
}

def @func_10619() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) {
  %116 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %117 = @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */;
  %118 = %116.0;
  %119 = %117.0;
  (%118, %119)
}

def @func_11269(%var_11267: Tensor[(210), float32]) -> (Tensor[(12, 5, 14), float64], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) {
  @func_11266(%var_11267) /* ty=(Tensor[(12, 5, 14), float64], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) */
}

def @func_7393(%var_7390: Tensor[(11, 11, 1), float32], %var_7391: uint16, %var_7392: Tensor[(12, 30), uint16]) -> (Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) {
  @func_7388(%var_7390, %var_7391, %var_7392) /* ty=(Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) */
}

def @func_8215() -> (Tensor[(5, 5, 15), bool],) {
  %122 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %120 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %121 = %120.0;
    (%121,)
  };
  %122() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_10506() -> Tensor[(5, 5, 15), bool] {
  @func_10504() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_13006(%var_13005: Tensor[(352), float32]) -> (Tensor[(1365), float32], Tensor[(396), float32], Tensor[(396), float32], Tensor[(294), float64], Tensor[(5, 5, 15), float64], Tensor[(352), float32]) {
  %135 = fn (%var_13002: Tensor[(352), float32]) -> (Tensor[(1365), float32], Tensor[(396), float32], Tensor[(396), float32], Tensor[(294), float64], Tensor[(5, 5, 15), float64], Tensor[(352), float32]) {
    %123 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
    %124 = cast(meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, dtype="float32") /* ty=Tensor[(396), float32] */;
    %125 = cast(meta[relay.Constant][10] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
    %126 = reshape(%124, newshape=[396]) /* ty=Tensor[(396), float32] */;
    %127 = reshape(%125, newshape=[49, 6]) /* ty=Tensor[(49, 6), float64] */;
    %128 = @func_12342(%126, %127) /* ty=(Tensor[(1365), int16], Tensor[(3, 12, 11), float32], Tensor[(396), float32], Tensor[(49, 6), float64]) */;
    %129 = cast(%var_13002, dtype="float32") /* ty=Tensor[(352), float32] */;
    %130 = reshape(%129, newshape=[16, 22]) /* ty=Tensor[(16, 22), float32] */;
    %131 = @func_10435(%130) /* ty=(Tensor[(5, 5, 15), float64], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(180), float64], Tensor[(144), float64], Tensor[(4, 9, 2), uint32], Tensor[(72), uint32], Tensor[(11, 16, 2), float32], Tensor[(16, 22), float32]) */;
    %132 = %123.1;
    %133 = %128.2;
    %134 = %131.0;
    (%132, %133, meta[relay.Constant][9] /* ty=Tensor[(396), float32] */, meta[relay.Constant][10] /* ty=Tensor[(294), float64] */, %134, %var_13002)
  };
  %135(%var_13005) /* ty=(Tensor[(1365), float32], Tensor[(396), float32], Tensor[(396), float32], Tensor[(294), float64], Tensor[(5, 5, 15), float64], Tensor[(352), float32]) */
}

def @func_6344(%var_6342: Tensor[(16, 3, 4), uint32], %var_6343: Tensor[(1365), float32]) -> (Tensor[(16, 3, 4), bool], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(1365), float32]) {
  @func_6340(%var_6342, %var_6343) /* ty=(Tensor[(16, 3, 4), bool], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(1365), float32]) */
}

def @func_7388(%var_7343: Tensor[(11, 11, 1), float32], %var_7363: uint16, %var_7365: Tensor[(12, 30), uint16]) -> (Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) {
  %136 = cast(%var_7363, dtype="uint16") /* ty=uint16 */;
  %137 = cast(meta[relay.Constant][11] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %138 = cast(%var_7365, dtype="uint16") /* ty=Tensor[(12, 30), uint16] */;
  %139 = cast(meta[relay.Constant][12] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %140 = reshape(%136, newshape=[]) /* ty=uint16 */;
  %141 = reshape(%137, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
  %142 = reshape(%138, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %143 = reshape(%139, newshape=[390]) /* ty=Tensor[(390), int16] */;
  %144 = @func_2951(%140, %141, %142, %143) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %145 = %144.9;
  %146 = cast(%145, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %147 = reshape(%146, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %148 = @func_2365(%147) /* ty=(Tensor[(15, 12, 11), float64],) */;
  %149 = cast(%var_7343, dtype="float32") /* ty=Tensor[(11, 11, 1), float32] */;
  %150 = erf(%149) /* ty=Tensor[(11, 11, 1), float32] */;
  %151 = cast(%150, dtype="int16") /* ty=Tensor[(11, 11, 1), int16] */;
  %152 = cast(meta[relay.Constant][12] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %153 = multiply(%151, %152) /* ty=Tensor[(11, 11, 390), int16] */;
  %154 = cast(%153, dtype="bool") /* ty=Tensor[(11, 11, 390), bool] */;
  %155 = cast(%150, dtype="bool") /* ty=Tensor[(11, 11, 1), bool] */;
  %156 = %148.0;
  %157 = less_equal(%154, %155) /* ty=Tensor[(11, 11, 390), bool] */;
  (%145, %var_7363, meta[relay.Constant][11] /* ty=Tensor[(12), uint16] */, %var_7365, %156, %157)
}

def @func_11073() -> (Tensor[(5, 5, 15), bool],) {
  %158 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %159 = %158.0;
  (%159,)
}

def @func_2956(%var_2952: uint16, %var_2953: Tensor[(1, 1, 12), uint16], %var_2954: Tensor[(360), uint16], %var_2955: Tensor[(390), int16]) -> (Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  %187 = fn (%var_2905: uint16, %var_2906: Tensor[(1, 1, 12), uint16], %var_2911: Tensor[(360), uint16], %var_2927: Tensor[(390), int16]) -> (Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
    %160 = cast(%var_2905, dtype="bool") /* ty=bool */;
    %161 = cast(%var_2906, dtype="bool") /* ty=Tensor[(1, 1, 12), bool] */;
    %162 = cast(%var_2911, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %163 = cast(%var_2911, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %164 = reshape(%162, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
    %165 = reshape(%163, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
    %166 = @func_1777(%164, %165) /* ty=(Tensor[(12, 3, 10), bool],) */;
    %167 = cast(%var_2906, dtype="uint64") /* ty=Tensor[(1, 1, 12), uint64] */;
    %168 = cast(%var_2905, dtype="uint64") /* ty=uint64 */;
    %169 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 30), float64] */, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
    %170 = cast(meta[relay.Constant][13] /* ty=Tensor[(10, 30), float64] */, dtype="float64") /* ty=Tensor[(10, 30), float64] */;
    %171 = reshape(%169, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %172 = reshape(%170, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %173 = @func_880(%171, %172) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %174 = cast(%var_2927, dtype="int16") /* ty=Tensor[(390), int16] */;
    %175 = cast(%var_2927, dtype="int16") /* ty=Tensor[(390), int16] */;
    %176 = reshape(%174, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
    %177 = reshape(%175, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
    %178 = cast(meta[relay.Constant][14] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %179 = reshape(%178, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
    %180 = @func_2365(%179) /* ty=(Tensor[(15, 12, 11), float64],) */;
    %181 = equal(%160, %161) /* ty=Tensor[(1, 1, 12), bool] */;
    %182 = %166.0;
    %183 = logical_xor(%167, %168) /* ty=Tensor[(1, 1, 12), uint64] */;
    %184 = %173.0;
    %185 = @func_1977(%176, %177) /* ty=Tensor[(13, 15, 2), bool] */;
    %186 = %180.0;
    (%181, %182, %var_2911, %183, %184, meta[relay.Constant][13] /* ty=Tensor[(10, 30), float64] */, %185, %var_2927, %186, meta[relay.Constant][14] /* ty=Tensor[(1980), float32] */)
  };
  %187(%var_2952, %var_2953, %var_2954, %var_2955) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */
}

def @func_10989(%var_10978: Tensor[(294), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(294), float64], Tensor[(7, 6, 7), float64]) {
  %188 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %189 = cast(%var_10978, dtype="float64") /* ty=Tensor[(294), float64] */;
  %190 = reshape(%189, newshape=[7, 6, 7]) /* ty=Tensor[(7, 6, 7), float64] */;
  %191 = @func_3270(%190) /* ty=(Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) */;
  %192 = %191.0;
  %193 = cast(%192, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %194 = %188.0;
  %195 = sqrt(%193) /* ty=Tensor[(7, 6, 7), float64] */;
  (%194, %var_10978, %195)
}

def @func_1313(%var_1311: Tensor[(2, 6, 4), uint64], %var_1312: Tensor[(180), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) {
  %252 = fn (%var_1199: Tensor[(2, 6, 4), uint64], %var_1244: Tensor[(180), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) {
    %196 = cast(meta[relay.Constant][15] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %197 = cast(meta[relay.Constant][16] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %198 = cast(meta[relay.Constant][15] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %199 = reshape(%196, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %200 = reshape(%197, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %201 = reshape(%198, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
    %202 = @func_568(%199, %200, %201) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
    %203 = cast(%var_1244, dtype="float64") /* ty=Tensor[(180), float64] */;
    %204 = reshape(%203, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
    %205 = @func_614(%204) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
    %206 = cast(meta[relay.Constant][15] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
    %207 = %202.7;
    %208 = cast(%207, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %209 = cast(meta[relay.Constant][15] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %210 = reshape(%206, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %211 = reshape(%208, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %212 = reshape(%209, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
    %213 = @func_568(%210, %211, %212) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
    %214 = %213.6;
    %215 = cast(%214, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
    %216 = cast(%207, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %217 = cast(meta[relay.Constant][15] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
    %218 = reshape(%215, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
    %219 = reshape(%216, newshape=[42]) /* ty=Tensor[(42), float32] */;
    %220 = reshape(%217, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
    %221 = @func_568(%218, %219, %220) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
    %222 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %223 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %224 = reshape(%222, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %225 = reshape(%223, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %226 = @func_880(%224, %225) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %227 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 6, 4), uint64] */, dtype="uint64") /* ty=Tensor[(2, 6, 4), uint64] */;
    %228 = shape_of(%var_1199, dtype="int32") /* ty=Tensor[(3), int32] */;
    %229 = cast(%var_1199, dtype="uint64") /* ty=Tensor[(2, 6, 4), uint64] */;
    %230 = dyn.reshape(%227, %228, newshape=[]) /* ty=Tensor[(?, ?, ?), uint64] */;
    %231 = bitwise_or(%229, %230) /* ty=Tensor[(2, 6, 4), uint64] */;
    %232 = cast(%231, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
    %233 = asinh(%232) /* ty=Tensor[(2, 6, 4), float32] */;
    %234 = cast(%233, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
    %235 = cast(meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %236 = %226.0;
    %237 = cast(%236, dtype="float64") /* ty=Tensor[(10, 2, 15), float64] */;
    %238 = reshape(%235, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %239 = reshape(%237, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %240 = @func_880(%238, %239) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %241 = cast(meta[relay.Constant][18] /* ty=Tensor[(2, 6, 4), uint64] */, dtype="float32") /* ty=Tensor[(2, 6, 4), float32] */;
    %242 = cos(%241) /* ty=Tensor[(2, 6, 4), float32] */;
    %243 = cast(%242, dtype="int8") /* ty=Tensor[(2, 6, 4), int8] */;
    %244 = shape_of(%233, dtype="int32") /* ty=Tensor[(3), int32] */;
    %245 = cast(%233, dtype="int8") /* ty=Tensor[(2, 6, 4), int8] */;
    %246 = dyn.reshape(%243, %244, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %247 = %205.0;
    %248 = %221.2;
    %249 = sin(%234) /* ty=Tensor[(2, 6, 4), float32] */;
    %250 = %240.0;
    %251 = logical_xor(%245, %246) /* ty=Tensor[(2, 6, 4), int8] */;
    (%207, meta[relay.Constant][15] /* ty=Tensor[(728), float32] */, meta[relay.Constant][16] /* ty=Tensor[(42), float32] */, %247, %var_1244, %214, %248, %236, meta[relay.Constant][17] /* ty=Tensor[(300), float64] */, %249, %250, %251)
  };
  %252(%var_1311, %var_1312) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */
}

def @func_617(%var_615: Tensor[(10, 3, 6), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) {
  @func_614(%var_615) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */
}

def @func_11561(%var_11559: Tensor[(1980), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64], Tensor[(1980), float32]) {
  @func_11558(%var_11559) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64], Tensor[(1980), float32]) */
}

def @func_7751(%var_7745: Tensor[(1, 3, 13), uint16]) -> (Tensor[(16, 3, 13), bool],) {
  %253 = cast(%var_7745, dtype="bool") /* ty=Tensor[(1, 3, 13), bool] */;
  %254 = cast(meta[relay.Constant][19] /* ty=Tensor[(16, 3, 13), uint16] */, dtype="bool") /* ty=Tensor[(16, 3, 13), bool] */;
  %255 = equal(%253, %254) /* ty=Tensor[(16, 3, 13), bool] */;
  (%255,)
}

def @func_9794(%var_9790: Tensor[(630), int16], %var_9791: Tensor[(180), float64], %var_9792: Tensor[(144), int8], %var_9793: Tensor[(52), uint16]) -> (Tensor[(5, 5, 15), bool], Tensor[(10, 3, 6), bool], Tensor[(630), int16], Tensor[(180), float64], Tensor[(1, 4), float64], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(4, 13), uint16], Tensor[(52), uint16], Tensor[(3, 11, 14), float64], Tensor[(462), float64], Tensor[(462), float64]) {
  @func_9788(%var_9790, %var_9791, %var_9792, %var_9793) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(10, 3, 6), bool], Tensor[(630), int16], Tensor[(180), float64], Tensor[(1, 4), float64], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(4, 13), uint16], Tensor[(52), uint16], Tensor[(3, 11, 14), float64], Tensor[(462), float64], Tensor[(462), float64]) */
}

def @func_9062() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */
}

def @func_8279(%var_8277: Tensor[(4, 9, 2), uint32], %var_8278: Tensor[(4, 9, 2), uint32]) -> (Tensor[(4, 9, 2), uint32],) {
  @func_8275(%var_8277, %var_8278) /* ty=(Tensor[(4, 9, 2), uint32],) */
}

def @func_3107(%var_3105: Tensor[(9, 4, 4), float64]) -> (Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) {
  @func_3104(%var_3105) /* ty=(Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) */
}

def @func_12603() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  @func_12601() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */
}

def @func_12345(%var_12343: Tensor[(396), float32], %var_12344: Tensor[(49, 6), float64]) -> (Tensor[(1365), int16], Tensor[(3, 12, 11), float32], Tensor[(396), float32], Tensor[(49, 6), float64]) {
  %269 = fn (%var_12335: Tensor[(396), float32], %var_12336: Tensor[(49, 6), float64]) -> (Tensor[(1365), int16], Tensor[(3, 12, 11), float32], Tensor[(396), float32], Tensor[(49, 6), float64]) {
    %256 = @func_10852() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), int16], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(1365), float32], Tensor[(300), float64], Tensor[(8, 78), int8], Tensor[(300), float64]) */;
    %257 = cast(%var_12335, dtype="float32") /* ty=Tensor[(396), float32] */;
    %258 = cast(%var_12336, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
    %259 = reshape(%257, newshape=[3, 12, 11]) /* ty=Tensor[(3, 12, 11), float32] */;
    %260 = reshape(%258, newshape=[294]) /* ty=Tensor[(294), float64] */;
    %261 = @func_4406(%259, %260) /* ty=(Tensor[(3, 12, 11), float32], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) */;
    %262 = cast(meta[relay.Constant][20] /* ty=Tensor[(49, 6), float64] */, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
    %263 = shape_of(%var_12336, dtype="int32") /* ty=Tensor[(2), int32] */;
    %264 = cast(%var_12336, dtype="float64") /* ty=Tensor[(49, 6), float64] */;
    %265 = dyn.reshape(%262, %263, newshape=[]) /* ty=Tensor[(?, ?), float64] */;
    %266 = %256.1;
    %267 = %261.0;
    %268 = floor_divide(%264, %265) /* ty=Tensor[(49, 6), float64] */;
    (%266, %267, %var_12335, %268)
  };
  %269(%var_12343, %var_12344) /* ty=(Tensor[(1365), int16], Tensor[(3, 12, 11), float32], Tensor[(396), float32], Tensor[(49, 6), float64]) */
}

def @func_8396() -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */
}

def @func_12846() -> (Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32], Tensor[(5, 5, 15), bool]) {
  @func_12844() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32], Tensor[(5, 5, 15), bool]) */
}

def @func_3860(%var_3858: Tensor[(3, 11, 14), float64]) -> Tensor[(3, 11, 14), float64] {
  @func_3857(%var_3858) /* ty=Tensor[(3, 11, 14), float64] */
}

def @func_2365(%var_2346: Tensor[(15, 12, 11), float32]) -> (Tensor[(15, 12, 11), float64],) {
  %270 = cast(%var_2346, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
  %271 = cos(%270) /* ty=Tensor[(15, 12, 11), float32] */;
  %272 = cast(%var_2346, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  %273 = shape_of(%271, dtype="int32") /* ty=Tensor[(3), int32] */;
  %274 = cast(%271, dtype="float64") /* ty=Tensor[(15, 12, 11), float64] */;
  %275 = dyn.reshape(%272, %273, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %276 = floor_divide(%274, %275) /* ty=Tensor[(15, 12, 11), float64] */;
  (%276,)
}

def @func_10124() -> (Tensor[(5, 5, 15), float32],) {
  %277 = @func_9166() /* ty=Tensor[(5, 5, 15), bool] */;
  %278 = cast(%277, dtype="float32") /* ty=Tensor[(5, 5, 15), float32] */;
  %279 = log10(%278) /* ty=Tensor[(5, 5, 15), float32] */;
  (%279,)
}

def @func_3792(%var_3778: Tensor[(2, 10, 12), int64], %var_3779: Tensor[(2, 10, 12), int64]) -> Tensor[(2, 10, 12), int64] {
  %280 = cast(%var_3779, dtype="int64") /* ty=Tensor[(2, 10, 12), int64] */;
  %281 = shape_of(%var_3778, dtype="int32") /* ty=Tensor[(3), int32] */;
  %282 = cast(%var_3778, dtype="int64") /* ty=Tensor[(2, 10, 12), int64] */;
  %283 = dyn.reshape(%280, %281, newshape=[]) /* ty=Tensor[(?, ?, ?), int64] */;
  bitwise_or(%282, %283) /* ty=Tensor[(2, 10, 12), int64] */
}

def @func_3273(%var_3271: Tensor[(7, 6, 7), float64]) -> (Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) {
  @func_3270(%var_3271) /* ty=(Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) */
}

def @func_8711() -> Tensor[(5, 5, 15), bool] {
  @func_8709() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_7089(%var_7087: Tensor[(2, 2, 6), float32]) -> (Tensor[(2, 2, 6), bool],) {
  @func_7086(%var_7087) /* ty=(Tensor[(2, 2, 6), bool],) */
}

def @func_11558(%var_11537: Tensor[(1980), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64], Tensor[(1980), float32]) {
  %284 = cast(%var_11537, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %285 = reshape(%284, newshape=[90, 22]) /* ty=Tensor[(90, 22), float32] */;
  %286 = @func_11475(%285) /* ty=(Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) */;
  %287 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  %288 = %286.0;
  (%287, %288, %var_11537)
}

def @func_11199() -> (Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) {
  %289 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %290 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
  %291 = %290.0;
  %292 = cast(%291, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %293 = cast(%291, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %294 = %289.0;
  %295 = log10(%292) /* ty=Tensor[(13, 15, 2), float32] */;
  %296 = sin(%293) /* ty=Tensor[(13, 15, 2), float32] */;
  %297 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  (%294, %295, %296, %297)
}

def @func_11702() -> (Tensor[(5, 5, 15), bool],) {
  @func_11700() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_6089(%var_6086: Tensor[(16, 1, 1), float64], %var_6087: Tensor[(16, 11, 1), float64], %var_6088: Tensor[(360, 1), uint16]) -> (Tensor[(16, 1, 1), float64], Tensor[(16, 11, 1), bool], Tensor[(12, 3, 10), bool], Tensor[(360, 1), uint16]) {
  @func_6084(%var_6086, %var_6087, %var_6088) /* ty=(Tensor[(16, 1, 1), float64], Tensor[(16, 11, 1), bool], Tensor[(12, 3, 10), bool], Tensor[(360, 1), uint16]) */
}

def @func_2148(%var_2146: Tensor[(1, 6, 11), float32]) -> (Tensor[(1, 6, 11), float32],) {
  @func_2145(%var_2146) /* ty=(Tensor[(1, 6, 11), float32],) */
}

def @func_7086(%var_7077: Tensor[(2, 2, 6), float32]) -> (Tensor[(2, 2, 6), bool],) {
  %298 = cast(%var_7077, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %299 = shape_of(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 6), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %300 = cast(meta[relay.Constant][21] /* ty=Tensor[(2, 2, 6), float32] */, dtype="bool") /* ty=Tensor[(2, 2, 6), bool] */;
  %301 = dyn.reshape(%298, %299, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %302 = not_equal(%300, %301) /* ty=Tensor[(2, 2, 6), bool] */;
  (%302,)
}

def @func_8737() -> (Tensor[(5, 5, 15), bool], Tensor[(462), float64], Tensor[(1372), uint64]) {
  @func_8735() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(462), float64], Tensor[(1372), uint64]) */
}

def @func_11898() -> (Tensor[(15, 12, 11), float64],) {
  %304 = fn () -> (Tensor[(15, 12, 11), float64],) {
    %303 = @func_10663() /* ty=Tensor[(15, 12, 11), float64] */;
    (%303,)
  };
  %304() /* ty=(Tensor[(15, 12, 11), float64],) */
}

def @func_11266(%var_11261: Tensor[(210), float32]) -> (Tensor[(12, 5, 14), float64], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) {
  %305 = @func_9827() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) */;
  %306 = cast(meta[relay.Constant][22] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %307 = cast(%var_11261, dtype="float32") /* ty=Tensor[(210), float32] */;
  %308 = reshape(%306, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %309 = reshape(%307, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %310 = @func_11111(%308, %309) /* ty=(Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) */;
  %311 = %305.1;
  %312 = %310.2;
  (%311, %312, meta[relay.Constant][22] /* ty=Tensor[(192), uint32] */, %var_11261)
}

def @func_11967() -> (Tensor[(5, 5, 15), bool],) {
  %315 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %313 = @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %314 = %313.0;
    (%314,)
  };
  %315() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_19(%var_12: Tensor[(3, 7, 2), float32], %var_13: Tensor[(3, 7, 2), float32]) -> (Tensor[(3, 7, 2), bool],) {
  %316 = cast(%var_13, dtype="bool") /* ty=Tensor[(3, 7, 2), bool] */;
  %317 = shape_of(%var_12, dtype="int32") /* ty=Tensor[(3), int32] */;
  %318 = cast(%var_12, dtype="bool") /* ty=Tensor[(3, 7, 2), bool] */;
  %319 = dyn.reshape(%316, %317, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %320 = greater_equal(%318, %319) /* ty=Tensor[(3, 7, 2), bool] */;
  (%320,)
}

def @func_11625() -> Tensor[(5, 5, 15), bool] {
  @func_9166() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_2145(%var_2130: Tensor[(1, 6, 11), float32]) -> (Tensor[(1, 6, 11), float32],) {
  %321 = cast(%var_2130, dtype="float32") /* ty=Tensor[(1, 6, 11), float32] */;
  %322 = exp(%321) /* ty=Tensor[(1, 6, 11), float32] */;
  (%322,)
}

def @func_11447(%var_11434: Tensor[(52, 2), int16]) -> (Tensor[(5, 5, 15), bool], Tensor[(13, 4, 2), int16], Tensor[(52, 2), int16], Tensor[(180), float64]) {
  %323 = @func_9682() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %324 = cast(%var_11434, dtype="int16") /* ty=Tensor[(52, 2), int16] */;
  %325 = cast(%var_11434, dtype="int16") /* ty=Tensor[(52, 2), int16] */;
  %326 = cast(meta[relay.Constant][23] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %327 = reshape(%324, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %328 = reshape(%325, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %329 = reshape(%326, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %330 = @func_5155(%327, %328, %329) /* ty=(Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) */;
  %331 = %323.1;
  %332 = %330.0;
  (%331, %332, %var_11434, meta[relay.Constant][23] /* ty=Tensor[(180), float64] */)
}

def @func_8735() -> (Tensor[(5, 5, 15), bool], Tensor[(462), float64], Tensor[(1372), uint64]) {
  %333 = cast(meta[relay.Constant][24] /* ty=Tensor[(1372), uint64] */, dtype="uint64") /* ty=Tensor[(1372), uint64] */;
  %334 = cast(meta[relay.Constant][24] /* ty=Tensor[(1372), uint64] */, dtype="uint64") /* ty=Tensor[(1372), uint64] */;
  %335 = reshape(%333, newshape=[7, 14, 14]) /* ty=Tensor[(7, 14, 14), uint64] */;
  %336 = reshape(%334, newshape=[7, 14, 14]) /* ty=Tensor[(7, 14, 14), uint64] */;
  %337 = @func_7785(%335, %336) /* ty=(Tensor[(7, 14, 14), float64], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 11, 14), float64], Tensor[(462), float64]) */;
  %338 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
  %339 = %337.5;
  (%338, %339, meta[relay.Constant][24] /* ty=Tensor[(1372), uint64] */)
}

def @func_10992(%var_10990: Tensor[(294), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(294), float64], Tensor[(7, 6, 7), float64]) {
  @func_10989(%var_10990) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(294), float64], Tensor[(7, 6, 7), float64]) */
}

def @func_10126() -> (Tensor[(5, 5, 15), float32],) {
  @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */
}

def @func_8884(%var_8882: Tensor[(24, 6), int8]) -> (Tensor[(5, 5, 15), bool], Tensor[(4, 3, 12), int8], Tensor[(24, 6), int8]) {
  %340 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %341 = cast(%var_8882, dtype="int8") /* ty=Tensor[(24, 6), int8] */;
  %342 = reshape(%341, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), int8] */;
  %343 = %340.0;
  %344 = @func_7605(%342) /* ty=Tensor[(4, 3, 12), int8] */;
  (%343, %344, %var_8882)
}

def @func_1781(%var_1779: Tensor[(12, 3, 10), uint16], %var_1780: Tensor[(12, 3, 10), uint16]) -> (Tensor[(12, 3, 10), bool],) {
  @func_1777(%var_1779, %var_1780) /* ty=(Tensor[(12, 3, 10), bool],) */
}

def @func_11021() -> Tensor[(5, 5, 15), bool] {
  @func_10504() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_3104(%var_3094: Tensor[(9, 4, 4), float64]) -> (Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) {
  %345 = cast(%var_3094, dtype="float64") /* ty=Tensor[(9, 4, 4), float64] */;
  %346 = cast(meta[relay.Constant][25] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
  %347 = cast(meta[relay.Constant][26] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %348 = reshape(%346, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint64] */;
  %349 = reshape(%347, newshape=[180]) /* ty=Tensor[(180), float64] */;
  %350 = @func_1310(%348, %349) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */;
  %351 = sigmoid(%345) /* ty=Tensor[(9, 4, 4), float64] */;
  %352 = %350.1;
  (%351, %352, meta[relay.Constant][25] /* ty=Tensor[(48), uint64] */, meta[relay.Constant][26] /* ty=Tensor[(180), float64] */)
}

def @func_8512(%var_8510: Tensor[(360), uint16], %var_8511: Tensor[(1, 66), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(1, 6, 11), float32], bool, Tensor[(6), bool], Tensor[(360), uint16], Tensor[(1, 66), float32], Tensor[(48), uint64], Tensor[(144), float64]) {
  @func_8508(%var_8510, %var_8511) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1, 6, 11), float32], bool, Tensor[(6), bool], Tensor[(360), uint16], Tensor[(1, 66), float32], Tensor[(48), uint64], Tensor[(144), float64]) */
}

def @func_9516(%var_9514: Tensor[(7, 66), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(7, 66), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) {
  @func_9513(%var_9514) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(7, 66), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */
}

def @func_13048(%var_13047: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float32] {
  %358 = fn (%var_13037: Tensor[(15, 12, 11), float64]) -> Tensor[(15, 12, 11), float32] {
    %353 = @func_10663() /* ty=Tensor[(15, 12, 11), float64] */;
    %354 = cast(%var_13037, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
    %355 = shape_of(%353, dtype="int32") /* ty=Tensor[(3), int32] */;
    %356 = cast(%353, dtype="float32") /* ty=Tensor[(15, 12, 11), float32] */;
    %357 = dyn.reshape(%354, %355, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    mod(%356, %357) /* ty=Tensor[(15, 12, 11), float32] */
  };
  %358(%var_13047) /* ty=Tensor[(15, 12, 11), float32] */
}

def @func_8709() -> Tensor[(5, 5, 15), bool] {
  %359 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %359.0
}

def @func_9283() -> (Tensor[(5, 5, 15), bool],) {
  %360 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %361 = %360.0;
  (%361,)
}

def @func_10437(%var_10436: Tensor[(16, 22), float32]) -> (Tensor[(5, 5, 15), float64], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(180), float64], Tensor[(144), float64], Tensor[(4, 9, 2), uint32], Tensor[(72), uint32], Tensor[(11, 16, 2), float32], Tensor[(16, 22), float32]) {
  %386 = fn (%var_10429: Tensor[(16, 22), float32]) -> (Tensor[(5, 5, 15), float64], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(180), float64], Tensor[(144), float64], Tensor[(4, 9, 2), uint32], Tensor[(72), uint32], Tensor[(11, 16, 2), float32], Tensor[(16, 22), float32]) {
    %362 = @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %363 = %362.0;
    %364 = cast(%363, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
    %365 = cast(meta[relay.Constant][27] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %366 = cast(meta[relay.Constant][27] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
    %367 = reshape(%365, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %368 = reshape(%366, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %369 = @func_19(%367, %368) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %370 = cast(meta[relay.Constant][28] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
    %371 = reshape(%370, newshape=[9, 4, 4]) /* ty=Tensor[(9, 4, 4), float64] */;
    %372 = @func_3104(%371) /* ty=(Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) */;
    %373 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
    %374 = cast(meta[relay.Constant][29] /* ty=Tensor[(72), uint32] */, dtype="uint32") /* ty=Tensor[(72), uint32] */;
    %375 = reshape(%373, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), uint32] */;
    %376 = reshape(%374, newshape=[4, 9, 2]) /* ty=Tensor[(4, 9, 2), uint32] */;
    %377 = @func_8275(%375, %376) /* ty=(Tensor[(4, 9, 2), uint32],) */;
    %378 = cast(%var_10429, dtype="float32") /* ty=Tensor[(16, 22), float32] */;
    %379 = reshape(%378, newshape=[11, 16, 2]) /* ty=Tensor[(11, 16, 2), float32] */;
    %380 = @func_7456(%379) /* ty=(Tensor[(11, 16, 2), float32],) */;
    %381 = exp(%364) /* ty=Tensor[(5, 5, 15), float64] */;
    %382 = %369.0;
    %383 = %372.3;
    %384 = %377.0;
    %385 = %380.0;
    (%381, %382, meta[relay.Constant][27] /* ty=Tensor[(42), float32] */, %383, meta[relay.Constant][28] /* ty=Tensor[(144), float64] */, %384, meta[relay.Constant][29] /* ty=Tensor[(72), uint32] */, %385, %var_10429)
  };
  %386(%var_10436) /* ty=(Tensor[(5, 5, 15), float64], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(180), float64], Tensor[(144), float64], Tensor[(4, 9, 2), uint32], Tensor[(72), uint32], Tensor[(11, 16, 2), float32], Tensor[(16, 22), float32]) */
}

def @func_12217() -> Tensor[(5, 5, 15), bool] {
  @func_12215() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_12723() -> Tensor[(13, 15, 2), float64] {
  %387 = @func_11199() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) */;
  %388 = %387.1;
  %389 = cast(meta[relay.Constant][30] /* ty=Tensor[(13, 15, 2), float32] */, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %390 = shape_of(%388, dtype="int32") /* ty=Tensor[(3), int32] */;
  %391 = cast(%388, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %392 = dyn.reshape(%389, %390, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  divide(%391, %392) /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_11381() -> Tensor[(15, 12, 11), float64] {
  %394 = fn () -> Tensor[(15, 12, 11), float64] {
    %393 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
    %393.1
  };
  %394() /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_11353() -> (Tensor[(5, 5, 15), float32], Tensor[(11, 11, 390), bool], Tensor[(14), float32], Tensor[(121), float32], uint16, Tensor[(36, 10), uint16], Tensor[(300), float64]) {
  @func_11351() /* ty=(Tensor[(5, 5, 15), float32], Tensor[(11, 11, 390), bool], Tensor[(14), float32], Tensor[(121), float32], uint16, Tensor[(36, 10), uint16], Tensor[(300), float64]) */
}

def @func_9191(%var_9190: uint16) -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(11, 11), float32], uint16, Tensor[(360), uint16]) {
  %404 = fn (%var_9184: uint16) -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(11, 11), float32], uint16, Tensor[(360), uint16]) {
    %395 = cast(meta[relay.Constant][31] /* ty=Tensor[(11, 11), float32] */, dtype="float32") /* ty=Tensor[(11, 11), float32] */;
    %396 = cast(%var_9184, dtype="uint16") /* ty=uint16 */;
    %397 = cast(meta[relay.Constant][32] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %398 = reshape(%395, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float32] */;
    %399 = reshape(%396, newshape=[]) /* ty=uint16 */;
    %400 = reshape(%397, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
    %401 = @func_7388(%398, %399, %400) /* ty=(Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) */;
    %402 = @func_8936() /* ty=Tensor[(5, 5, 15), bool] */;
    %403 = %401.4;
    (%402, %403, meta[relay.Constant][31] /* ty=Tensor[(11, 11), float32] */, %var_9184, meta[relay.Constant][32] /* ty=Tensor[(360), uint16] */)
  };
  %404(%var_9190) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(11, 11), float32], uint16, Tensor[(360), uint16]) */
}

def @main() -> (Tensor[(13, 15, 2), float32],) {
  %405 = @func_11201() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) */;
  %406 = %405.2;
  %407 = cast(%406, dtype="float64") /* ty=Tensor[(13, 15, 2), float64] */;
  %408 = tan(%407) /* ty=Tensor[(13, 15, 2), float64] */;
  %409 = cast(%408, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %410 = shape_of(%406, dtype="int32") /* ty=Tensor[(3), int32] */;
  %411 = cast(%406, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %412 = dyn.reshape(%409, %410, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %413 = greater(%411, %412) /* ty=Tensor[(13, 15, 2), bool] */;
  %414 = cast(%406, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %415 = shape_of(%413, dtype="int32") /* ty=Tensor[(3), int32] */;
  %416 = cast(%413, dtype="float32") /* ty=Tensor[(13, 15, 2), float32] */;
  %417 = dyn.reshape(%414, %415, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %418 = power(%416, %417) /* ty=Tensor[(13, 15, 2), float32] */;
  (%418,)
}

def @func_11982() -> Tensor[(1, 9), bool] {
  @func_11980() /* ty=Tensor[(1, 9), bool] */
}

def @func_12933() -> (Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float32], Tensor[(13, 15, 2), bool], Tensor[(390), int16]) {
  %419 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %420 = @func_10619() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) */;
  %421 = cast(meta[relay.Constant][33] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %422 = cast(meta[relay.Constant][33] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %423 = reshape(%421, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %424 = reshape(%422, newshape=[13, 15, 2]) /* ty=Tensor[(13, 15, 2), int16] */;
  %425 = %419.2;
  %426 = %420.1;
  %427 = @func_1977(%423, %424) /* ty=Tensor[(13, 15, 2), bool] */;
  (%425, %426, %427, meta[relay.Constant][33] /* ty=Tensor[(390), int16] */)
}

def @func_9788(%var_9729: Tensor[(630), int16], %var_9730: Tensor[(180), float64], %var_9739: Tensor[(144), int8], %var_9749: Tensor[(52), uint16]) -> (Tensor[(5, 5, 15), bool], Tensor[(10, 3, 6), bool], Tensor[(630), int16], Tensor[(180), float64], Tensor[(1, 4), float64], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(4, 13), uint16], Tensor[(52), uint16], Tensor[(3, 11, 14), float64], Tensor[(462), float64], Tensor[(462), float64]) {
  %428 = @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %429 = cast(%var_9729, dtype="int16") /* ty=Tensor[(630), int16] */;
  %430 = cast(%var_9729, dtype="int16") /* ty=Tensor[(630), int16] */;
  %431 = cast(%var_9730, dtype="float64") /* ty=Tensor[(180), float64] */;
  %432 = cast(meta[relay.Constant][34] /* ty=Tensor[(1, 4), float64] */, dtype="float64") /* ty=Tensor[(1, 4), float64] */;
  %433 = reshape(%429, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
  %434 = reshape(%430, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
  %435 = reshape(%431, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %436 = reshape(%432, newshape=[4]) /* ty=Tensor[(4), float64] */;
  %437 = @func_5532(%433, %434, %435, %436) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) */;
  %438 = cast(%var_9739, dtype="int8") /* ty=Tensor[(144), int8] */;
  %439 = reshape(%438, newshape=[4, 3, 12]) /* ty=Tensor[(4, 3, 12), int8] */;
  %440 = cast(%var_9749, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %441 = cast(%var_9749, dtype="uint16") /* ty=Tensor[(52), uint16] */;
  %442 = reshape(%440, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
  %443 = reshape(%441, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
  %444 = cast(meta[relay.Constant][35] /* ty=Tensor[(462), float64] */, dtype="float64") /* ty=Tensor[(462), float64] */;
  %445 = reshape(%444, newshape=[7, 66]) /* ty=Tensor[(7, 66), float64] */;
  %446 = @func_9513(%445) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(7, 66), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */;
  %447 = @func_8735() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(462), float64], Tensor[(1372), uint64]) */;
  %448 = %428.0;
  %449 = %437.1;
  %450 = @func_7605(%439) /* ty=Tensor[(4, 3, 12), int8] */;
  %451 = @func_2029(%442, %443) /* ty=Tensor[(4, 13), uint16] */;
  %452 = %446.1;
  %453 = %447.1;
  (%448, %449, %var_9729, %var_9730, meta[relay.Constant][34] /* ty=Tensor[(1, 4), float64] */, %450, %var_9739, %451, %var_9749, %452, meta[relay.Constant][35] /* ty=Tensor[(462), float64] */, %453)
}

def @func_8179() -> (Tensor[(5, 5, 15), bool],) {
  %461 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %454 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 15), float32] */, dtype="float32") /* ty=Tensor[(5, 5, 15), float32] */;
    %455 = log(%454) /* ty=Tensor[(5, 5, 15), float32] */;
    %456 = cast(meta[relay.Constant][36] /* ty=Tensor[(5, 5, 15), float32] */, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
    %457 = shape_of(%455, dtype="int32") /* ty=Tensor[(3), int32] */;
    %458 = cast(%455, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
    %459 = dyn.reshape(%456, %457, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %460 = not_equal(%458, %459) /* ty=Tensor[(5, 5, 15), bool] */;
    (%460,)
  };
  %461() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_9513(%var_9488: Tensor[(7, 66), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(7, 66), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) {
  %462 = cast(%var_9488, dtype="float64") /* ty=Tensor[(7, 66), float64] */;
  %463 = reshape(%462, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float64] */;
  %464 = cast(meta[relay.Constant][37] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %465 = cast(meta[relay.Constant][37] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %466 = reshape(%464, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %467 = reshape(%465, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %468 = @func_880(%466, %467) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %469 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  %470 = @func_3857(%463) /* ty=Tensor[(3, 11, 14), float64] */;
  %471 = %468.0;
  (%469, %470, %var_9488, %471, meta[relay.Constant][37] /* ty=Tensor[(300), float64] */)
}

def @func_11320() -> (Tensor[(5, 5, 15), bool],) {
  @func_11318() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_12042(%var_12041: Tensor[(1365), float32]) -> (Tensor[(5, 5, 15), float32], Tensor[(1365), bool]) {
  %481 = fn (%var_12023: Tensor[(1365), float32]) -> (Tensor[(5, 5, 15), float32], Tensor[(1365), bool]) {
    %472 = @func_10924() /* ty=(Tensor[(5, 5, 15), float32],) */;
    %473 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
    %474 = %473.1;
    %475 = cast(%var_12023, dtype="bool") /* ty=Tensor[(1365), bool] */;
    %476 = shape_of(%474, dtype="int32") /* ty=Tensor[(1), int32] */;
    %477 = cast(%474, dtype="bool") /* ty=Tensor[(1365), bool] */;
    %478 = dyn.reshape(%475, %476, newshape=[]) /* ty=Tensor[(?), bool] */;
    %479 = %472.0;
    %480 = not_equal(%477, %478) /* ty=Tensor[(1365), bool] */;
    (%479, %480)
  };
  %481(%var_12041) /* ty=(Tensor[(5, 5, 15), float32], Tensor[(1365), bool]) */
}

def @func_1777(%var_1746: Tensor[(12, 3, 10), uint16], %var_1747: Tensor[(12, 3, 10), uint16]) -> (Tensor[(12, 3, 10), bool],) {
  %482 = cast(%var_1747, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %483 = shape_of(%var_1746, dtype="int32") /* ty=Tensor[(3), int32] */;
  %484 = cast(%var_1746, dtype="bool") /* ty=Tensor[(12, 3, 10), bool] */;
  %485 = dyn.reshape(%482, %483, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %486 = less_equal(%484, %485) /* ty=Tensor[(12, 3, 10), bool] */;
  (%486,)
}

def @func_9279() -> (Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) {
  @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */
}

def @func_11925() -> Tensor[(5, 5, 15), bool] {
  @func_11923() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_10628() -> Tensor[(5, 5, 15), bool] {
  %488 = fn () -> Tensor[(5, 5, 15), bool] {
    %487 = @func_9283() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %487.0
  };
  %488() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_11923() -> Tensor[(5, 5, 15), bool] {
  %489 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %489.0
}

def @func_12692() -> (Tensor[(5, 5, 15), bool], Tensor[(3, 3, 5), bool], Tensor[(45), float64]) {
  %490 = cast(meta[relay.Constant][38] /* ty=Tensor[(45), float64] */, dtype="float64") /* ty=Tensor[(45), float64] */;
  %491 = reshape(%490, newshape=[3, 3, 5]) /* ty=Tensor[(3, 3, 5), float64] */;
  %492 = @func_7289(%491) /* ty=(Tensor[(3, 3, 5), bool],) */;
  %493 = @func_11625() /* ty=Tensor[(5, 5, 15), bool] */;
  %494 = %492.0;
  (%493, %494, meta[relay.Constant][38] /* ty=Tensor[(45), float64] */)
}

def @func_8675(%var_8669: Tensor[(1, 14), float32], %var_8670: Tensor[(1, 14), float32], %var_8671: Tensor[(121), float32], %var_8672: uint16, %var_8673: Tensor[(12, 30), uint16], %var_8674: Tensor[(300), float64]) -> (Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) {
  %525 = fn (%var_8608: Tensor[(1, 14), float32], %var_8609: Tensor[(1, 14), float32], %var_8637: Tensor[(121), float32], %var_8638: uint16, %var_8639: Tensor[(12, 30), uint16], %var_8650: Tensor[(300), float64]) -> (Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) {
    %495 = cast(%var_8609, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
    %496 = shape_of(%var_8608, dtype="int32") /* ty=Tensor[(2), int32] */;
    %497 = cast(%var_8608, dtype="bool") /* ty=Tensor[(1, 14), bool] */;
    %498 = dyn.reshape(%495, %496, newshape=[]) /* ty=Tensor[(?, ?), bool] */;
    %499 = cast(meta[relay.Constant][39] /* ty=Tensor[(24), float32] */, dtype="float32") /* ty=Tensor[(24), float32] */;
    %500 = reshape(%499, newshape=[2, 2, 6]) /* ty=Tensor[(2, 2, 6), float32] */;
    %501 = @func_7086(%500) /* ty=(Tensor[(2, 2, 6), bool],) */;
    %502 = cast(meta[relay.Constant][40] /* ty=Tensor[(52, 1), uint16] */, dtype="uint16") /* ty=Tensor[(52, 1), uint16] */;
    %503 = cast(meta[relay.Constant][40] /* ty=Tensor[(52, 1), uint16] */, dtype="uint16") /* ty=Tensor[(52, 1), uint16] */;
    %504 = reshape(%502, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
    %505 = reshape(%503, newshape=[4, 13]) /* ty=Tensor[(4, 13), uint16] */;
    %506 = cast(%var_8637, dtype="float32") /* ty=Tensor[(121), float32] */;
    %507 = cast(%var_8638, dtype="uint16") /* ty=uint16 */;
    %508 = cast(%var_8639, dtype="uint16") /* ty=Tensor[(12, 30), uint16] */;
    %509 = reshape(%506, newshape=[11, 11, 1]) /* ty=Tensor[(11, 11, 1), float32] */;
    %510 = reshape(%507, newshape=[]) /* ty=uint16 */;
    %511 = reshape(%508, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
    %512 = @func_7388(%509, %510, %511) /* ty=(Tensor[(1980), float32], uint16, Tensor[(12), uint16], Tensor[(12, 30), uint16], Tensor[(15, 12, 11), float64], Tensor[(11, 11, 390), bool]) */;
    %513 = cast(%var_8650, dtype="float64") /* ty=Tensor[(300), float64] */;
    %514 = cast(%var_8650, dtype="float64") /* ty=Tensor[(300), float64] */;
    %515 = reshape(%513, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %516 = reshape(%514, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %517 = @func_880(%515, %516) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %518 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
    %519 = not_equal(%497, %498) /* ty=Tensor[(?, 14), bool] */;
    %520 = %501.0;
    %521 = @func_2029(%504, %505) /* ty=Tensor[(4, 13), uint16] */;
    %522 = %512.5;
    %523 = %517.0;
    %524 = %518.1;
    (%519, %520, meta[relay.Constant][39] /* ty=Tensor[(24), float32] */, %521, meta[relay.Constant][40] /* ty=Tensor[(52, 1), uint16] */, %522, %var_8637, %var_8638, %var_8639, %523, %var_8650, %524)
  };
  %525(%var_8669, %var_8670, %var_8671, %var_8672, %var_8673, %var_8674) /* ty=(Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) */
}

def @func_10069() -> Tensor[(5, 5, 15), bool] {
  %527 = fn () -> Tensor[(5, 5, 15), bool] {
    %526 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %526.0
  };
  %527() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_12889() -> Tensor[(5, 5, 15), bool] {
  @func_12887() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_12777() -> (Tensor[(5, 5, 15), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) {
  @func_12775() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) */
}

def @func_10924() -> (Tensor[(5, 5, 15), float32],) {
  %528 = @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */;
  %529 = %528.0;
  (%529,)
}

def @func_12505(%var_12502: Tensor[(4, 8, 7), uint32], %var_12503: Tensor[(4, 8, 7), uint32], %var_12504: Tensor[(1980), float32]) -> (Tensor[(4, 8, 7), uint32], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  %539 = fn (%var_12481: Tensor[(4, 8, 7), uint32], %var_12482: Tensor[(4, 8, 7), uint32], %var_12494: Tensor[(1980), float32]) -> (Tensor[(4, 8, 7), uint32], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
    %530 = cast(%var_12482, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
    %531 = shape_of(%var_12481, dtype="int32") /* ty=Tensor[(3), int32] */;
    %532 = cast(%var_12481, dtype="uint32") /* ty=Tensor[(4, 8, 7), uint32] */;
    %533 = dyn.reshape(%530, %531, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %534 = cast(%var_12494, dtype="float32") /* ty=Tensor[(1980), float32] */;
    %535 = reshape(%534, newshape=[90, 22]) /* ty=Tensor[(90, 22), float32] */;
    %536 = @func_11475(%535) /* ty=(Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) */;
    %537 = bitwise_or(%532, %533) /* ty=Tensor[(4, 8, 7), uint32] */;
    %538 = %536.1;
    (%537, %538, %var_12494)
  };
  %539(%var_12502, %var_12503, %var_12504) /* ty=(Tensor[(4, 8, 7), uint32], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */
}

def @func_883(%var_881: Tensor[(10, 2, 15), float64], %var_882: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), bool],) {
  %545 = fn (%var_872: Tensor[(10, 2, 15), float64], %var_873: Tensor[(10, 2, 15), float64]) -> (Tensor[(10, 2, 15), bool],) {
    %540 = cast(%var_873, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
    %541 = shape_of(%var_872, dtype="int32") /* ty=Tensor[(3), int32] */;
    %542 = cast(%var_872, dtype="bool") /* ty=Tensor[(10, 2, 15), bool] */;
    %543 = dyn.reshape(%540, %541, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %544 = greater(%542, %543) /* ty=Tensor[(10, 2, 15), bool] */;
    (%544,)
  };
  %545(%var_881, %var_882) /* ty=(Tensor[(10, 2, 15), bool],) */
}

def @func_11450(%var_11448: Tensor[(52, 2), int16]) -> (Tensor[(5, 5, 15), bool], Tensor[(13, 4, 2), int16], Tensor[(52, 2), int16], Tensor[(180), float64]) {
  @func_11447(%var_11448) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 4, 2), int16], Tensor[(52, 2), int16], Tensor[(180), float64]) */
}

def @func_12844() -> (Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32], Tensor[(5, 5, 15), bool]) {
  %546 = cast(meta[relay.Constant][41] /* ty=Tensor[(84), float32] */, dtype="float32") /* ty=Tensor[(84), float32] */;
  %547 = reshape(%546, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), float32] */;
  %548 = @func_5755(%547) /* ty=(Tensor[(6, 1, 14), float32],) */;
  %549 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %550 = @func_11923() /* ty=Tensor[(5, 5, 15), bool] */;
  %551 = %548.0;
  %552 = %549.0;
  (%550, %551, meta[relay.Constant][41] /* ty=Tensor[(84), float32] */, %552)
}

def @func_8275(%var_8267: Tensor[(4, 9, 2), uint32], %var_8268: Tensor[(4, 9, 2), uint32]) -> (Tensor[(4, 9, 2), uint32],) {
  %553 = cast(%var_8268, dtype="uint32") /* ty=Tensor[(4, 9, 2), uint32] */;
  %554 = shape_of(%var_8267, dtype="int32") /* ty=Tensor[(3), int32] */;
  %555 = cast(%var_8267, dtype="uint32") /* ty=Tensor[(4, 9, 2), uint32] */;
  %556 = dyn.reshape(%553, %554, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
  %557 = add(%555, %556) /* ty=Tensor[(4, 9, 2), uint32] */;
  (%557,)
}

def @func_23(%var_21: Tensor[(3, 7, 2), float32], %var_22: Tensor[(3, 7, 2), float32]) -> (Tensor[(3, 7, 2), bool],) {
  @func_19(%var_21, %var_22) /* ty=(Tensor[(3, 7, 2), bool],) */
}

def @func_1981(%var_1979: Tensor[(13, 15, 2), int16], %var_1980: Tensor[(13, 15, 2), int16]) -> Tensor[(13, 15, 2), bool] {
  @func_1977(%var_1979, %var_1980) /* ty=Tensor[(13, 15, 2), bool] */
}

def @func_3796(%var_3794: Tensor[(2, 10, 12), int64], %var_3795: Tensor[(2, 10, 12), int64]) -> Tensor[(2, 10, 12), int64] {
  @func_3792(%var_3794, %var_3795) /* ty=Tensor[(2, 10, 12), int64] */
}

def @func_8887(%var_8885: Tensor[(24, 6), int8]) -> (Tensor[(5, 5, 15), bool], Tensor[(4, 3, 12), int8], Tensor[(24, 6), int8]) {
  @func_8884(%var_8885) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(4, 3, 12), int8], Tensor[(24, 6), int8]) */
}

def @func_3821(%var_3813: Tensor[(360), uint16]) -> (Tensor[(2, 12, 4), float64], Tensor[(12, 3, 10), bool], Tensor[(360), uint16]) {
  %558 = cast(meta[relay.Constant][42] /* ty=Tensor[(2, 12, 4), float64] */, dtype="float64") /* ty=Tensor[(2, 12, 4), float64] */;
  %559 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %560 = cast(%var_3813, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %561 = reshape(%559, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %562 = reshape(%560, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %563 = @func_1777(%561, %562) /* ty=(Tensor[(12, 3, 10), bool],) */;
  %564 = cosh(%558) /* ty=Tensor[(2, 12, 4), float64] */;
  %565 = %563.0;
  (%564, %565, %var_3813)
}

def @func_8828(%var_8814: Tensor[(5, 5, 15), bool]) -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float64]) {
  %566 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %567 = %566.0;
  %568 = cast(%var_8814, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %569 = shape_of(%567, dtype="int32") /* ty=Tensor[(3), int32] */;
  %570 = cast(%567, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
  %571 = dyn.reshape(%568, %569, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %572 = cast(%var_8814, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
  %573 = logical_or(%570, %571) /* ty=Tensor[(5, 5, 15), bool] */;
  %574 = sin(%572) /* ty=Tensor[(5, 5, 15), float64] */;
  (%573, %574)
}

def @func_12775() -> (Tensor[(5, 5, 15), float64], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) {
  %575 = @func_11812() /* ty=(Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float64], Tensor[(5, 5, 15), bool]) */;
  %576 = cast(meta[relay.Constant][43] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %577 = cast(meta[relay.Constant][43] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %578 = reshape(%576, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %579 = reshape(%577, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
  %580 = @func_880(%578, %579) /* ty=(Tensor[(10, 2, 15), bool],) */;
  %581 = cast(meta[relay.Constant][44] /* ty=Tensor[(294), float64] */, dtype="float64") /* ty=Tensor[(294), float64] */;
  %582 = reshape(%581, newshape=[294]) /* ty=Tensor[(294), float64] */;
  %583 = @func_10989(%582) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(294), float64], Tensor[(7, 6, 7), float64]) */;
  %584 = %575.1;
  %585 = %580.0;
  %586 = %583.2;
  (%584, %585, meta[relay.Constant][43] /* ty=Tensor[(300), float64] */, %586, meta[relay.Constant][44] /* ty=Tensor[(294), float64] */)
}

def @func_12106() -> Tensor[(1, 9), bool] {
  %587 = fn () -> Tensor[(1, 9), bool] {
    @func_11980() /* ty=Tensor[(1, 9), bool] */
  };
  %587() /* ty=Tensor[(1, 9), bool] */
}

def @func_2010(%var_2009: Tensor[(2, 1, 2), float64]) -> (Tensor[(2, 1, 2), float64],) {
  %590 = fn (%var_2000: Tensor[(2, 1, 2), float64]) -> (Tensor[(2, 1, 2), float64],) {
    %588 = cast(%var_2000, dtype="float64") /* ty=Tensor[(2, 1, 2), float64] */;
    %589 = sigmoid(%588) /* ty=Tensor[(2, 1, 2), float64] */;
    (%589,)
  };
  %590(%var_2009) /* ty=(Tensor[(2, 1, 2), float64],) */
}

def @func_8937() -> Tensor[(5, 5, 15), bool] {
  %592 = fn () -> Tensor[(5, 5, 15), bool] {
    %591 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %591.0
  };
  %592() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_8265(%var_8263: Tensor[(14, 3, 5), float32], %var_8264: Tensor[(14, 3, 5), float32]) -> (Tensor[(14, 3, 5), uint32],) {
  %603 = fn (%var_8245: Tensor[(14, 3, 5), float32], %var_8246: Tensor[(14, 3, 5), float32]) -> (Tensor[(14, 3, 5), uint32],) {
    %593 = cast(%var_8246, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
    %594 = shape_of(%var_8245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %595 = cast(%var_8245, dtype="float32") /* ty=Tensor[(14, 3, 5), float32] */;
    %596 = dyn.reshape(%593, %594, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %597 = floor_divide(%595, %596) /* ty=Tensor[(14, 3, 5), float32] */;
    %598 = cast(%597, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
    %599 = shape_of(%var_8245, dtype="int32") /* ty=Tensor[(3), int32] */;
    %600 = cast(%var_8245, dtype="uint32") /* ty=Tensor[(14, 3, 5), uint32] */;
    %601 = dyn.reshape(%598, %599, newshape=[]) /* ty=Tensor[(?, ?, ?), uint32] */;
    %602 = right_shift(%600, %601) /* ty=Tensor[(14, 3, 5), uint32] */;
    (%602,)
  };
  %603(%var_8263, %var_8264) /* ty=(Tensor[(14, 3, 5), uint32],) */
}

def @func_8864() -> (Tensor[(5, 5, 15), bool],) {
  %604 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %605 = %604.0;
  (%605,)
}

def @func_10552() -> (Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) {
  %614 = fn () -> (Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) {
    %606 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
    %607 = cast(meta[relay.Constant][45] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
    %608 = cast(meta[relay.Constant][46] /* ty=Tensor[(1365), float32] */, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %609 = reshape(%607, newshape=[16, 3, 4]) /* ty=Tensor[(16, 3, 4), uint32] */;
    %610 = reshape(%608, newshape=[1365]) /* ty=Tensor[(1365), float32] */;
    %611 = @func_6340(%609, %610) /* ty=(Tensor[(16, 3, 4), bool], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(1365), float32]) */;
    %612 = %606.0;
    %613 = %611.3;
    (%612, %613, meta[relay.Constant][45] /* ty=Tensor[(192), uint32] */, meta[relay.Constant][46] /* ty=Tensor[(1365), float32] */)
  };
  %614() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), float32], Tensor[(192), uint32], Tensor[(1365), float32]) */
}

def @func_10926() -> (Tensor[(5, 5, 15), float32],) {
  @func_10924() /* ty=(Tensor[(5, 5, 15), float32],) */
}

def @func_6340(%var_6311: Tensor[(16, 3, 4), uint32], %var_6325: Tensor[(1365), float32]) -> (Tensor[(16, 3, 4), bool], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(1365), float32]) {
  %615 = cast(%var_6311, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %616 = shape_of(meta[relay.Constant][47] /* ty=Tensor[(16, 3, 4), uint32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %617 = cast(meta[relay.Constant][47] /* ty=Tensor[(16, 3, 4), uint32] */, dtype="bool") /* ty=Tensor[(16, 3, 4), bool] */;
  %618 = dyn.reshape(%615, %616, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %619 = cast(meta[relay.Constant][48] /* ty=Tensor[(91), float32] */, dtype="float32") /* ty=Tensor[(91), float32] */;
  %620 = cast(%var_6325, dtype="float32") /* ty=Tensor[(1365), float32] */;
  %621 = reshape(%619, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float32] */;
  %622 = reshape(%620, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
  %623 = @func_3185(%621, %622) /* ty=(Tensor[(15, 13, 7), bool],) */;
  %624 = equal(%617, %618) /* ty=Tensor[(16, 3, 4), bool] */;
  %625 = %623.0;
  (%624, %625, meta[relay.Constant][48] /* ty=Tensor[(91), float32] */, %var_6325)
}

def @func_11655() -> (Tensor[(5, 5, 15), bool],) {
  %626 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %627 = %626.0;
  (%627,)
}

def @func_9827() -> (Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) {
  %628 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %629 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %630 = %628.0;
  %631 = %629.2;
  (%630, %631)
}

def @func_11674() -> (Tensor[(5, 5, 15), bool],) {
  %634 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %632 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
    %633 = %632.1;
    (%633,)
  };
  %634() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_9477(%var_9473: uint16, %var_9474: Tensor[(1, 121), float32], %var_9475: Tensor[(360), uint16], %var_9476: Tensor[(231, 2), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], uint16, Tensor[(11, 11, 390), bool], Tensor[(14, 1), float32], Tensor[(1, 121), float32], Tensor[(360), uint16], Tensor[(300), float64], Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(231, 2), float64]) {
  @func_9471(%var_9473, %var_9474, %var_9475, %var_9476) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], uint16, Tensor[(11, 11, 390), bool], Tensor[(14, 1), float32], Tensor[(1, 121), float32], Tensor[(360), uint16], Tensor[(300), float64], Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(231, 2), float64]) */
}

def @func_10389() -> (Tensor[(5, 5, 15), float32],) {
  %637 = fn () -> (Tensor[(5, 5, 15), float32],) {
    %635 = @func_10124() /* ty=(Tensor[(5, 5, 15), float32],) */;
    %636 = %635.0;
    (%636,)
  };
  %637() /* ty=(Tensor[(5, 5, 15), float32],) */
}

def @func_11882() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  @func_11880() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */
}

def @func_12477(%var_12475: Tensor[(5, 5, 15), bool], %var_12476: Tensor[(546), uint16]) -> (Tensor[(5, 5, 15), bool], Tensor[(7, 6, 13), bool], Tensor[(546), uint16]) {
  %650 = fn (%var_12436: Tensor[(5, 5, 15), bool], %var_12444: Tensor[(546), uint16]) -> (Tensor[(5, 5, 15), bool], Tensor[(7, 6, 13), bool], Tensor[(546), uint16]) {
    %638 = @func_8936() /* ty=Tensor[(5, 5, 15), bool] */;
    %639 = cast(%var_12436, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
    %640 = shape_of(%638, dtype="int32") /* ty=Tensor[(3), int32] */;
    %641 = cast(%638, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
    %642 = dyn.reshape(%639, %640, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %643 = cast(%var_12444, dtype="uint16") /* ty=Tensor[(546), uint16] */;
    %644 = cast(%var_12444, dtype="uint16") /* ty=Tensor[(546), uint16] */;
    %645 = reshape(%643, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint16] */;
    %646 = reshape(%644, newshape=[7, 6, 13]) /* ty=Tensor[(7, 6, 13), uint16] */;
    %647 = @func_6378(%645, %646) /* ty=(Tensor[(7, 6, 13), bool],) */;
    %648 = greater(%641, %642) /* ty=Tensor[(5, 5, 15), bool] */;
    %649 = %647.0;
    (%648, %649, %var_12444)
  };
  %650(%var_12475, %var_12476) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(7, 6, 13), bool], Tensor[(546), uint16]) */
}

def @func_12725() -> Tensor[(13, 15, 2), float64] {
  @func_12723() /* ty=Tensor[(13, 15, 2), float64] */
}

def @func_9167() -> Tensor[(5, 5, 15), bool] {
  %651 = fn () -> Tensor[(5, 5, 15), bool] {
    @func_9029() /* ty=Tensor[(5, 5, 15), bool] */
  };
  %651() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_11201() -> (Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) {
  @func_11199() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), float32], Tensor[(13, 15, 2), float32], Tensor[(5, 5, 15), bool]) */
}

def @func_5159(%var_5156: Tensor[(13, 4, 2), int16], %var_5157: Tensor[(13, 4, 2), int16], %var_5158: Tensor[(6, 30), float64]) -> (Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) {
  %663 = fn (%var_5143: Tensor[(13, 4, 2), int16], %var_5144: Tensor[(13, 4, 2), int16], %var_5150: Tensor[(6, 30), float64]) -> (Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) {
    %652 = cast(%var_5144, dtype="int16") /* ty=Tensor[(13, 4, 2), int16] */;
    %653 = shape_of(%var_5143, dtype="int32") /* ty=Tensor[(3), int32] */;
    %654 = cast(%var_5143, dtype="int16") /* ty=Tensor[(13, 4, 2), int16] */;
    %655 = dyn.reshape(%652, %653, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %656 = cast(meta[relay.Constant][49] /* ty=Tensor[(48), uint64] */, dtype="uint64") /* ty=Tensor[(48), uint64] */;
    %657 = cast(%var_5150, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %658 = reshape(%656, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint64] */;
    %659 = reshape(%657, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %660 = @func_1310(%658, %659) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */;
    %661 = multiply(%654, %655) /* ty=Tensor[(13, 4, 2), int16] */;
    %662 = %660.1;
    (%661, %662, meta[relay.Constant][49] /* ty=Tensor[(48), uint64] */, %var_5150)
  };
  %663(%var_5156, %var_5157, %var_5158) /* ty=(Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) */
}

def @func_7199(%var_7197: Tensor[(13, 3, 16), int8], %var_7198: Tensor[(300), float64]) -> (Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) {
  %675 = fn (%var_7170: Tensor[(13, 3, 16), int8], %var_7178: Tensor[(300), float64]) -> (Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) {
    %664 = cast(meta[relay.Constant][50] /* ty=Tensor[(13, 3, 16), int8] */, dtype="int8") /* ty=Tensor[(13, 3, 16), int8] */;
    %665 = shape_of(%var_7170, dtype="int32") /* ty=Tensor[(3), int32] */;
    %666 = cast(%var_7170, dtype="int8") /* ty=Tensor[(13, 3, 16), int8] */;
    %667 = dyn.reshape(%664, %665, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %668 = cast(%var_7178, dtype="float64") /* ty=Tensor[(300), float64] */;
    %669 = cast(%var_7178, dtype="float64") /* ty=Tensor[(300), float64] */;
    %670 = reshape(%668, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %671 = reshape(%669, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %672 = @func_880(%670, %671) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %673 = right_shift(%666, %667) /* ty=Tensor[(13, 3, 16), int8] */;
    %674 = %672.0;
    (%673, %674, %var_7178)
  };
  %675(%var_7197, %var_7198) /* ty=(Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */
}

def @func_2032(%var_2030: Tensor[(4, 13), uint16], %var_2031: Tensor[(4, 13), uint16]) -> Tensor[(4, 13), uint16] {
  %680 = fn (%var_2020: Tensor[(4, 13), uint16], %var_2021: Tensor[(4, 13), uint16]) -> Tensor[(4, 13), uint16] {
    %676 = cast(%var_2021, dtype="uint16") /* ty=Tensor[(4, 13), uint16] */;
    %677 = shape_of(%var_2020, dtype="int32") /* ty=Tensor[(2), int32] */;
    %678 = cast(%var_2020, dtype="uint16") /* ty=Tensor[(4, 13), uint16] */;
    %679 = dyn.reshape(%676, %677, newshape=[]) /* ty=Tensor[(?, ?), uint16] */;
    logical_xor(%678, %679) /* ty=Tensor[(4, 13), uint16] */
  };
  %680(%var_2030, %var_2031) /* ty=Tensor[(4, 13), uint16] */
}

def @func_12694() -> (Tensor[(5, 5, 15), bool], Tensor[(3, 3, 5), bool], Tensor[(45), float64]) {
  @func_12692() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(3, 3, 5), bool], Tensor[(45), float64]) */
}

def @func_12887() -> Tensor[(5, 5, 15), bool] {
  %681 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %681.0
}

def @func_8991() -> (Tensor[(5, 5, 15), bool],) {
  %683 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %682 = @func_8936() /* ty=Tensor[(5, 5, 15), bool] */;
    (%682,)
  };
  %683() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_10853() -> (Tensor[(5, 5, 15), bool], Tensor[(1365), int16], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(1365), float32], Tensor[(300), float64], Tensor[(8, 78), int8], Tensor[(300), float64]) {
  %706 = fn () -> (Tensor[(5, 5, 15), bool], Tensor[(1365), int16], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(1365), float32], Tensor[(300), float64], Tensor[(8, 78), int8], Tensor[(300), float64]) {
    %684 = @func_10569() /* ty=(Tensor[(13, 15, 2), bool], Tensor[(1365), float32]) */;
    %685 = %684.1;
    %686 = cast(%685, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %687 = acosh(%686) /* ty=Tensor[(1365), float32] */;
    %688 = cast(%685, dtype="int16") /* ty=Tensor[(1365), int16] */;
    %689 = shape_of(%687, dtype="int32") /* ty=Tensor[(1), int32] */;
    %690 = cast(%687, dtype="int16") /* ty=Tensor[(1365), int16] */;
    %691 = dyn.reshape(%688, %689, newshape=[]) /* ty=Tensor[(?), int16] */;
    %692 = cast(meta[relay.Constant][51] /* ty=Tensor[(144), int8] */, dtype="int8") /* ty=Tensor[(144), int8] */;
    %693 = reshape(%692, newshape=[24, 6]) /* ty=Tensor[(24, 6), int8] */;
    %694 = @func_8884(%693) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(4, 3, 12), int8], Tensor[(24, 6), int8]) */;
    %695 = cast(%687, dtype="float32") /* ty=Tensor[(1365), float32] */;
    %696 = cast(meta[relay.Constant][52] /* ty=Tensor[(8, 78), int8] */, dtype="int8") /* ty=Tensor[(8, 78), int8] */;
    %697 = cast(meta[relay.Constant][53] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
    %698 = reshape(%696, newshape=[13, 3, 16]) /* ty=Tensor[(13, 3, 16), int8] */;
    %699 = reshape(%697, newshape=[300]) /* ty=Tensor[(300), float64] */;
    %700 = @func_7196(%698, %699) /* ty=(Tensor[(13, 3, 16), int8], Tensor[(10, 2, 15), bool], Tensor[(300), float64]) */;
    %701 = @func_9166() /* ty=Tensor[(5, 5, 15), bool] */;
    %702 = bitwise_xor(%690, %691) /* ty=Tensor[(1365), int16] */;
    %703 = %694.1;
    %704 = atanh(%695) /* ty=Tensor[(1365), float32] */;
    %705 = %700.2;
    (%701, %702, %703, meta[relay.Constant][51] /* ty=Tensor[(144), int8] */, %704, %705, meta[relay.Constant][52] /* ty=Tensor[(8, 78), int8] */, meta[relay.Constant][53] /* ty=Tensor[(300), float64] */)
  };
  %706() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(1365), int16], Tensor[(4, 3, 12), int8], Tensor[(144), int8], Tensor[(1365), float32], Tensor[(300), float64], Tensor[(8, 78), int8], Tensor[(300), float64]) */
}

def @func_11477(%var_11476: Tensor[(90, 22), float32]) -> (Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) {
  %713 = fn (%var_11468: Tensor[(90, 22), float32]) -> (Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) {
    %707 = @func_9827() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) */;
    %708 = cast(%var_11468, dtype="float32") /* ty=Tensor[(90, 22), float32] */;
    %709 = reshape(%708, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
    %710 = @func_2365(%709) /* ty=(Tensor[(15, 12, 11), float64],) */;
    %711 = %707.1;
    %712 = %710.0;
    (%711, %712, %var_11468)
  };
  %713(%var_11476) /* ty=(Tensor[(12, 5, 14), float64], Tensor[(15, 12, 11), float64], Tensor[(90, 22), float32]) */
}

def @func_11395() -> Tensor[(5, 5, 15), float32] {
  %715 = fn () -> Tensor[(5, 5, 15), float32] {
    %714 = @func_10619() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) */;
    %714.1
  };
  %715() /* ty=Tensor[(5, 5, 15), float32] */
}

def @func_7696(%var_7692: Tensor[(5, 2, 9), float64], %var_7693: Tensor[(5, 2, 9), float64], %var_7694: Tensor[(5, 2, 9), float64], %var_7695: Tensor[(104), int16]) -> (Tensor[(5, 2, 9), float64], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(5, 2, 9), bool], Tensor[(48), uint64], Tensor[(104), int16]) {
  @func_7690(%var_7692, %var_7693, %var_7694, %var_7695) /* ty=(Tensor[(5, 2, 9), float64], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(5, 2, 9), bool], Tensor[(48), uint64], Tensor[(104), int16]) */
}

def @func_11700() -> (Tensor[(5, 5, 15), bool],) {
  %716 = @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %717 = %716.0;
  (%717,)
}

def @func_3270(%var_3244: Tensor[(7, 6, 7), float64]) -> (Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) {
  %718 = cast(%var_3244, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %719 = shape_of(meta[relay.Constant][54] /* ty=Tensor[(7, 6, 7), float64] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %720 = cast(meta[relay.Constant][54] /* ty=Tensor[(7, 6, 7), float64] */, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %721 = dyn.reshape(%718, %719, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %722 = cast(%var_3244, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %723 = sinh(%722) /* ty=Tensor[(7, 6, 7), float64] */;
  %724 = cast(%723, dtype="float64") /* ty=Tensor[(7, 6, 7), float64] */;
  %725 = power(%720, %721) /* ty=Tensor[(7, 6, 7), float64] */;
  %726 = rsqrt(%724) /* ty=Tensor[(7, 6, 7), float64] */;
  (%725, %726)
}

def @func_8508(%var_8470: Tensor[(360), uint16], %var_8471: Tensor[(1, 66), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(1, 6, 11), float32], bool, Tensor[(6), bool], Tensor[(360), uint16], Tensor[(1, 66), float32], Tensor[(48), uint64], Tensor[(144), float64]) {
  %727 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %728 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %729 = cast(meta[relay.Constant][55] /* ty=Tensor[(6), bool] */, dtype="bool") /* ty=Tensor[(6), bool] */;
  %730 = cast(%var_8470, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %731 = cast(%var_8471, dtype="float32") /* ty=Tensor[(1, 66), float32] */;
  %732 = reshape(%728, newshape=[]) /* ty=bool */;
  %733 = reshape(%729, newshape=[3, 1, 2]) /* ty=Tensor[(3, 1, 2), bool] */;
  %734 = reshape(%730, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %735 = reshape(%731, newshape=[66]) /* ty=Tensor[(66), float32] */;
  %736 = @func_4046(%732, %733, %734, %735) /* ty=(Tensor[(3, 1, 2), bool], Tensor[(360), uint16], Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16], Tensor[(1, 6, 11), float32], Tensor[(66), float32]) */;
  %737 = cast(meta[relay.Constant][56] /* ty=Tensor[(144), float64] */, dtype="float64") /* ty=Tensor[(144), float64] */;
  %738 = reshape(%737, newshape=[9, 4, 4]) /* ty=Tensor[(9, 4, 4), float64] */;
  %739 = @func_3104(%738) /* ty=(Tensor[(9, 4, 4), float64], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(180), float64]) */;
  %740 = %727.0;
  %741 = %736.5;
  %742 = %739.2;
  (%740, %741, False /* ty=bool */, meta[relay.Constant][55] /* ty=Tensor[(6), bool] */, %var_8470, %var_8471, %742, meta[relay.Constant][56] /* ty=Tensor[(144), float64] */)
}

def @func_9285() -> (Tensor[(5, 5, 15), bool],) {
  @func_9283() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_11880() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %743 = @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %744 = %743.0;
  %745 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  (%744, %745)
}

def @func_7754(%var_7752: Tensor[(1, 3, 13), uint16]) -> (Tensor[(16, 3, 13), bool],) {
  @func_7751(%var_7752) /* ty=(Tensor[(16, 3, 13), bool],) */
}

def @func_4406(%var_4378: Tensor[(3, 12, 11), float32], %var_4400: Tensor[(294), float64]) -> (Tensor[(3, 12, 11), float32], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) {
  %746 = cast(%var_4378, dtype="float32") /* ty=Tensor[(3, 12, 11), float32] */;
  %747 = cast(%var_4400, dtype="float64") /* ty=Tensor[(294), float64] */;
  %748 = reshape(%747, newshape=[7, 6, 7]) /* ty=Tensor[(7, 6, 7), float64] */;
  %749 = @func_3270(%748) /* ty=(Tensor[(7, 6, 7), float64], Tensor[(7, 6, 7), float64]) */;
  %750 = log10(%746) /* ty=Tensor[(3, 12, 11), float32] */;
  %751 = %749.1;
  (%750, %751, %var_4400)
}

def @func_10665() -> Tensor[(15, 12, 11), float64] {
  @func_10663() /* ty=Tensor[(15, 12, 11), float64] */
}

def @func_614(%var_576: Tensor[(10, 3, 6), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) {
  %752 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %753 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %754 = reshape(%752, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %755 = reshape(%753, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %756 = @func_19(%754, %755) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %757 = cast(meta[relay.Constant][58] /* ty=Tensor[(728), float32] */, dtype="float32") /* ty=Tensor[(728), float32] */;
  %758 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %759 = cast(meta[relay.Constant][58] /* ty=Tensor[(728), float32] */, dtype="float64") /* ty=Tensor[(728), float64] */;
  %760 = reshape(%757, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float32] */;
  %761 = reshape(%758, newshape=[42]) /* ty=Tensor[(42), float32] */;
  %762 = reshape(%759, newshape=[4, 13, 14]) /* ty=Tensor[(4, 13, 14), float64] */;
  %763 = @func_568(%760, %761, %762) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */;
  %764 = cast(meta[relay.Constant][57] /* ty=Tensor[(42), float32] */, dtype="float32") /* ty=Tensor[(42), float32] */;
  %765 = %756.0;
  %766 = cast(%765, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
  %767 = reshape(%764, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %768 = reshape(%766, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
  %769 = @func_19(%767, %768) /* ty=(Tensor[(3, 7, 2), bool],) */;
  %770 = cast(%var_576, dtype="float64") /* ty=Tensor[(10, 3, 6), float64] */;
  %771 = cosh(%770) /* ty=Tensor[(10, 3, 6), float64] */;
  %772 = cast(%var_576, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %773 = shape_of(%771, dtype="int32") /* ty=Tensor[(3), int32] */;
  %774 = cast(%771, dtype="bool") /* ty=Tensor[(10, 3, 6), bool] */;
  %775 = dyn.reshape(%772, %773, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %776 = cast(%771, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %777 = tan(%776) /* ty=Tensor[(10, 3, 6), float32] */;
  %778 = cast(%777, dtype="float32") /* ty=Tensor[(10, 3, 6), float32] */;
  %779 = %763.3;
  %780 = %769.0;
  %781 = greater_equal(%774, %775) /* ty=Tensor[(10, 3, 6), bool] */;
  %782 = log(%778) /* ty=Tensor[(10, 3, 6), float32] */;
  (%765, meta[relay.Constant][57] /* ty=Tensor[(42), float32] */, %779, meta[relay.Constant][58] /* ty=Tensor[(728), float32] */, %780, %781, %782)
}

def @func_11980() -> Tensor[(1, 9), bool] {
  %783 = cast(False /* ty=bool */, dtype="bool") /* ty=bool */;
  %784 = cast(meta[relay.Constant][59] /* ty=Tensor[(1, 9), bool] */, dtype="bool") /* ty=Tensor[(1, 9), bool] */;
  logical_and(%783, %784) /* ty=Tensor[(1, 9), bool] */
}

def @func_7690(%var_7649: Tensor[(5, 2, 9), float64], %var_7650: Tensor[(5, 2, 9), float64], %var_7667: Tensor[(5, 2, 9), float64], %var_7680: Tensor[(104), int16]) -> (Tensor[(5, 2, 9), float64], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(5, 2, 9), bool], Tensor[(48), uint64], Tensor[(104), int16]) {
  %785 = cast(%var_7650, dtype="float64") /* ty=Tensor[(5, 2, 9), float64] */;
  %786 = shape_of(%var_7649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %787 = cast(%var_7649, dtype="float64") /* ty=Tensor[(5, 2, 9), float64] */;
  %788 = dyn.reshape(%785, %786, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  %789 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %790 = reshape(%789, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
  %791 = @func_614(%790) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
  %792 = cast(%var_7667, dtype="bool") /* ty=Tensor[(5, 2, 9), bool] */;
  %793 = shape_of(%var_7649, dtype="int32") /* ty=Tensor[(3), int32] */;
  %794 = cast(%var_7649, dtype="bool") /* ty=Tensor[(5, 2, 9), bool] */;
  %795 = dyn.reshape(%792, %793, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  %796 = cast(%var_7680, dtype="int16") /* ty=Tensor[(104), int16] */;
  %797 = cast(%var_7680, dtype="int16") /* ty=Tensor[(104), int16] */;
  %798 = cast(meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
  %799 = reshape(%796, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %800 = reshape(%797, newshape=[13, 4, 2]) /* ty=Tensor[(13, 4, 2), int16] */;
  %801 = reshape(%798, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
  %802 = @func_5155(%799, %800, %801) /* ty=(Tensor[(13, 4, 2), int16], Tensor[(728), float32], Tensor[(48), uint64], Tensor[(6, 30), float64]) */;
  %803 = power(%787, %788) /* ty=Tensor[(5, 2, 9), float64] */;
  %804 = %791.2;
  %805 = greater(%794, %795) /* ty=Tensor[(5, 2, 9), bool] */;
  %806 = %802.2;
  (%803, %804, meta[relay.Constant][60] /* ty=Tensor[(180), float64] */, %805, %806, %var_7680)
}

def @func_9327() -> (Tensor[(5, 5, 15), bool],) {
  @func_9325() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_11627() -> Tensor[(5, 5, 15), bool] {
  @func_11625() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_9325() -> (Tensor[(5, 5, 15), bool],) {
  %807 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %808 = %807.0;
  (%808,)
}

def @func_2368(%var_2366: Tensor[(15, 12, 11), float32]) -> (Tensor[(15, 12, 11), float64],) {
  @func_2365(%var_2366) /* ty=(Tensor[(15, 12, 11), float64],) */
}

def @func_4168(%var_4167: Tensor[(12, 5, 14), float32]) -> (Tensor[(12, 5, 14), float32], Tensor[(1, 6, 11), float32], Tensor[(1, 66), float32]) {
  %818 = fn (%var_4140: Tensor[(12, 5, 14), float32]) -> (Tensor[(12, 5, 14), float32], Tensor[(1, 6, 11), float32], Tensor[(1, 66), float32]) {
    %809 = cast(%var_4140, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
    %810 = shape_of(meta[relay.Constant][61] /* ty=Tensor[(12, 5, 14), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
    %811 = cast(meta[relay.Constant][61] /* ty=Tensor[(12, 5, 14), float32] */, dtype="float32") /* ty=Tensor[(12, 5, 14), float32] */;
    %812 = dyn.reshape(%809, %810, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
    %813 = cast(meta[relay.Constant][62] /* ty=Tensor[(1, 66), float32] */, dtype="float32") /* ty=Tensor[(1, 66), float32] */;
    %814 = reshape(%813, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
    %815 = @func_2145(%814) /* ty=(Tensor[(1, 6, 11), float32],) */;
    %816 = floor_mod(%811, %812) /* ty=Tensor[(12, 5, 14), float32] */;
    %817 = %815.0;
    (%816, %817, meta[relay.Constant][62] /* ty=Tensor[(1, 66), float32] */)
  };
  %818(%var_4167) /* ty=(Tensor[(12, 5, 14), float32], Tensor[(1, 6, 11), float32], Tensor[(1, 66), float32]) */
}

def @func_11813() -> (Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float64], Tensor[(5, 5, 15), bool]) {
  %826 = fn () -> (Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float64], Tensor[(5, 5, 15), bool]) {
    %819 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
    %820 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
    %821 = cast(%820, dtype="float64") /* ty=Tensor[(5, 5, 15), float64] */;
    %822 = @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %823 = %819.2;
    %824 = log2(%821) /* ty=Tensor[(5, 5, 15), float64] */;
    %825 = %822.0;
    (%823, %824, %825)
  };
  %826() /* ty=(Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float64], Tensor[(5, 5, 15), bool]) */
}

def @func_9030() -> Tensor[(5, 5, 15), bool] {
  %828 = fn () -> Tensor[(5, 5, 15), bool] {
    %827 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %827.0
  };
  %828() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_12575() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %835 = fn () -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
    %829 = @func_9283() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %830 = %829.0;
    %831 = cast(%830, dtype="bool") /* ty=Tensor[(5, 5, 15), bool] */;
    %832 = reshape(%831, newshape=[5, 5, 15]) /* ty=Tensor[(5, 5, 15), bool] */;
    %833 = @func_8828(%832) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float64]) */;
    %834 = %833.0;
    (%830, %834)
  };
  %835() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */
}

def @func_12802(%var_12787: Tensor[(90), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(180), float64], Tensor[(90), float64], Tensor[(2, 52), int16], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) {
  %836 = @func_11673() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %837 = cast(%var_12787, dtype="float64") /* ty=Tensor[(90), float64] */;
  %838 = cast(%var_12787, dtype="float64") /* ty=Tensor[(90), float64] */;
  %839 = cast(%var_12787, dtype="float64") /* ty=Tensor[(90), float64] */;
  %840 = cast(meta[relay.Constant][63] /* ty=Tensor[(2, 52), int16] */, dtype="int16") /* ty=Tensor[(2, 52), int16] */;
  %841 = reshape(%837, newshape=[5, 2, 9]) /* ty=Tensor[(5, 2, 9), float64] */;
  %842 = reshape(%838, newshape=[5, 2, 9]) /* ty=Tensor[(5, 2, 9), float64] */;
  %843 = reshape(%839, newshape=[5, 2, 9]) /* ty=Tensor[(5, 2, 9), float64] */;
  %844 = reshape(%840, newshape=[104]) /* ty=Tensor[(104), int16] */;
  %845 = @func_7690(%841, %842, %843, %844) /* ty=(Tensor[(5, 2, 9), float64], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(5, 2, 9), bool], Tensor[(48), uint64], Tensor[(104), int16]) */;
  %846 = cast(meta[relay.Constant][64] /* ty=Tensor[(192), uint32] */, dtype="uint32") /* ty=Tensor[(192), uint32] */;
  %847 = cast(meta[relay.Constant][65] /* ty=Tensor[(210), float32] */, dtype="float32") /* ty=Tensor[(210), float32] */;
  %848 = reshape(%846, newshape=[192]) /* ty=Tensor[(192), uint32] */;
  %849 = reshape(%847, newshape=[210]) /* ty=Tensor[(210), float32] */;
  %850 = @func_11111(%848, %849) /* ty=(Tensor[(192), bool], Tensor[(14, 3, 5), uint32], Tensor[(210), float32]) */;
  %851 = %836.0;
  %852 = %845.2;
  %853 = %850.2;
  (%851, %852, %var_12787, meta[relay.Constant][63] /* ty=Tensor[(2, 52), int16] */, %853, meta[relay.Constant][64] /* ty=Tensor[(192), uint32] */, meta[relay.Constant][65] /* ty=Tensor[(210), float32] */)
}

def @func_9087(%var_9080: Tensor[(84), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32]) {
  %854 = @func_8990() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %855 = cast(%var_9080, dtype="float32") /* ty=Tensor[(84), float32] */;
  %856 = reshape(%855, newshape=[6, 1, 14]) /* ty=Tensor[(6, 1, 14), float32] */;
  %857 = @func_5755(%856) /* ty=(Tensor[(6, 1, 14), float32],) */;
  %858 = %854.0;
  %859 = %857.0;
  (%858, %859, %var_9080)
}

def @func_6084(%var_6054: Tensor[(16, 1, 1), float64], %var_6063: Tensor[(16, 11, 1), float64], %var_6078: Tensor[(360, 1), uint16]) -> (Tensor[(16, 1, 1), float64], Tensor[(16, 11, 1), bool], Tensor[(12, 3, 10), bool], Tensor[(360, 1), uint16]) {
  %860 = cast(%var_6054, dtype="float64") /* ty=Tensor[(16, 1, 1), float64] */;
  %861 = cast(%var_6054, dtype="bool") /* ty=Tensor[(16, 1, 1), bool] */;
  %862 = cast(%var_6063, dtype="bool") /* ty=Tensor[(16, 11, 1), bool] */;
  %863 = cast(%var_6078, dtype="uint16") /* ty=Tensor[(360, 1), uint16] */;
  %864 = cast(%var_6078, dtype="uint16") /* ty=Tensor[(360, 1), uint16] */;
  %865 = reshape(%863, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %866 = reshape(%864, newshape=[12, 3, 10]) /* ty=Tensor[(12, 3, 10), uint16] */;
  %867 = @func_1777(%865, %866) /* ty=(Tensor[(12, 3, 10), bool],) */;
  %868 = sinh(%860) /* ty=Tensor[(16, 1, 1), float64] */;
  %869 = less(%861, %862) /* ty=Tensor[(16, 11, 1), bool] */;
  %870 = %867.0;
  (%868, %869, %870, %var_6078)
}

def @func_5537(%var_5533: Tensor[(6, 7, 15), int16], %var_5534: Tensor[(6, 7, 15), int16], %var_5535: Tensor[(6, 30), float64], %var_5536: Tensor[(4), float64]) -> (Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) {
  %888 = fn (%var_5482: Tensor[(6, 7, 15), int16], %var_5483: Tensor[(6, 7, 15), int16], %var_5497: Tensor[(6, 30), float64], %var_5523: Tensor[(4), float64]) -> (Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) {
    %871 = cast(%var_5483, dtype="int16") /* ty=Tensor[(6, 7, 15), int16] */;
    %872 = shape_of(%var_5482, dtype="int32") /* ty=Tensor[(3), int32] */;
    %873 = cast(%var_5482, dtype="int16") /* ty=Tensor[(6, 7, 15), int16] */;
    %874 = dyn.reshape(%871, %872, newshape=[]) /* ty=Tensor[(?, ?, ?), int16] */;
    %875 = cast(%var_5497, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %876 = reshape(%875, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
    %877 = @func_614(%876) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
    %878 = cast(%var_5497, dtype="float64") /* ty=Tensor[(6, 30), float64] */;
    %879 = reshape(%878, newshape=[10, 3, 6]) /* ty=Tensor[(10, 3, 6), float64] */;
    %880 = @func_614(%879) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(3, 7, 2), bool], Tensor[(10, 3, 6), bool], Tensor[(10, 3, 6), float32]) */;
    %881 = cast(%var_5523, dtype="float64") /* ty=Tensor[(4), float64] */;
    %882 = reshape(%881, newshape=[2, 1, 2]) /* ty=Tensor[(2, 1, 2), float64] */;
    %883 = @func_2008(%882) /* ty=(Tensor[(2, 1, 2), float64],) */;
    %884 = maximum(%873, %874) /* ty=Tensor[(6, 7, 15), int16] */;
    %885 = %877.5;
    %886 = %880.1;
    %887 = %883.0;
    (%884, %885, %var_5497, %886, %887, %var_5523)
  };
  %888(%var_5533, %var_5534, %var_5535, %var_5536) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) */
}

def @func_12935() -> (Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float32], Tensor[(13, 15, 2), bool], Tensor[(390), int16]) {
  @func_12933() /* ty=(Tensor[(12, 5, 14), float64], Tensor[(5, 5, 15), float32], Tensor[(13, 15, 2), bool], Tensor[(390), int16]) */
}

def @func_8394() -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) {
  %889 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %890 = cast(meta[relay.Constant][66] /* ty=Tensor[(1980), float32] */, dtype="float32") /* ty=Tensor[(1980), float32] */;
  %891 = reshape(%890, newshape=[15, 12, 11]) /* ty=Tensor[(15, 12, 11), float32] */;
  %892 = @func_2365(%891) /* ty=(Tensor[(15, 12, 11), float64],) */;
  %893 = %889.0;
  %894 = %892.0;
  (%893, %894, meta[relay.Constant][66] /* ty=Tensor[(1980), float32] */)
}

def @func_7608(%var_7606: Tensor[(4, 3, 12), int8]) -> Tensor[(4, 3, 12), int8] {
  @func_7605(%var_7606) /* ty=Tensor[(4, 3, 12), int8] */
}

def @func_8866() -> (Tensor[(5, 5, 15), bool],) {
  @func_8864() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_10504() -> Tensor[(5, 5, 15), bool] {
  @func_10068() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_11657() -> (Tensor[(5, 5, 15), bool],) {
  @func_11655() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_9090(%var_9088: Tensor[(84), float32]) -> (Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32]) {
  @func_9087(%var_9088) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(6, 1, 14), float32], Tensor[(84), float32]) */
}

def @func_9060() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %895 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
  %896 = @func_9029() /* ty=Tensor[(5, 5, 15), bool] */;
  (%895, %896)
}

def @func_4046(%var_4028: bool, %var_4029: Tensor[(3, 1, 2), bool], %var_4039: Tensor[(360), uint16], %var_4043: Tensor[(66), float32]) -> (Tensor[(3, 1, 2), bool], Tensor[(360), uint16], Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16], Tensor[(1, 6, 11), float32], Tensor[(66), float32]) {
  %897 = cast(%var_4028, dtype="bool") /* ty=bool */;
  %898 = cast(%var_4029, dtype="bool") /* ty=Tensor[(3, 1, 2), bool] */;
  %899 = cast(%var_4028, dtype="uint16") /* ty=uint16 */;
  %900 = cast(meta[relay.Constant][67] /* ty=Tensor[(12), uint16] */, dtype="uint16") /* ty=Tensor[(12), uint16] */;
  %901 = cast(%var_4039, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %902 = cast(meta[relay.Constant][68] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
  %903 = reshape(%899, newshape=[]) /* ty=uint16 */;
  %904 = reshape(%900, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
  %905 = reshape(%901, newshape=[360]) /* ty=Tensor[(360), uint16] */;
  %906 = reshape(%902, newshape=[390]) /* ty=Tensor[(390), int16] */;
  %907 = @func_2951(%903, %904, %905, %906) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
  %908 = cast(%var_4043, dtype="float32") /* ty=Tensor[(66), float32] */;
  %909 = reshape(%908, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
  %910 = @func_2145(%909) /* ty=(Tensor[(1, 6, 11), float32],) */;
  %911 = logical_and(%897, %898) /* ty=Tensor[(3, 1, 2), bool] */;
  %912 = %907.2;
  %913 = %910.0;
  (%911, %912, meta[relay.Constant][67] /* ty=Tensor[(12), uint16] */, %var_4039, meta[relay.Constant][68] /* ty=Tensor[(390), int16] */, %913, %var_4043)
}

def @func_4410(%var_4408: Tensor[(3, 12, 11), float32], %var_4409: Tensor[(294), float64]) -> (Tensor[(3, 12, 11), float32], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) {
  @func_4406(%var_4408, %var_4409) /* ty=(Tensor[(3, 12, 11), float32], Tensor[(7, 6, 7), float64], Tensor[(294), float64]) */
}

def @func_1977(%var_1969: Tensor[(13, 15, 2), int16], %var_1970: Tensor[(13, 15, 2), int16]) -> Tensor[(13, 15, 2), bool] {
  %914 = cast(%var_1970, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %915 = shape_of(%var_1969, dtype="int32") /* ty=Tensor[(3), int32] */;
  %916 = cast(%var_1969, dtype="bool") /* ty=Tensor[(13, 15, 2), bool] */;
  %917 = dyn.reshape(%914, %915, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
  greater_equal(%916, %917) /* ty=Tensor[(13, 15, 2), bool] */
}

def @func_11318() -> (Tensor[(5, 5, 15), bool],) {
  %918 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %919 = %918.0;
  (%919,)
}

def @func_9926(%var_9925: Tensor[(6, 10, 10), float32]) -> (Tensor[(6, 10, 10), bool],) {
  %927 = fn (%var_9908: Tensor[(6, 10, 10), float32]) -> (Tensor[(6, 10, 10), bool],) {
    %920 = cast(%var_9908, dtype="float32") /* ty=Tensor[(6, 10, 10), float32] */;
    %921 = exp(%920) /* ty=Tensor[(6, 10, 10), float32] */;
    %922 = cast(%var_9908, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
    %923 = shape_of(%921, dtype="int32") /* ty=Tensor[(3), int32] */;
    %924 = cast(%921, dtype="bool") /* ty=Tensor[(6, 10, 10), bool] */;
    %925 = dyn.reshape(%922, %923, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %926 = logical_and(%924, %925) /* ty=Tensor[(6, 10, 10), bool] */;
    (%926,)
  };
  %927(%var_9925) /* ty=(Tensor[(6, 10, 10), bool],) */
}

def @func_10621() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) {
  @func_10619() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float32]) */
}

def @func_12624() -> (Tensor[(15, 12, 11), float64],) {
  %929 = fn () -> (Tensor[(15, 12, 11), float64],) {
    %928 = @func_11380() /* ty=Tensor[(15, 12, 11), float64] */;
    (%928,)
  };
  %929() /* ty=(Tensor[(15, 12, 11), float64],) */
}

def @func_12869(%var_12868: Tensor[(630), int16]) -> (Tensor[(5, 5, 15), bool], Tensor[(4), float64], Tensor[(630), int16], Tensor[(180), float64], Tensor[(4), float64]) {
  %942 = fn (%var_12863: Tensor[(630), int16]) -> (Tensor[(5, 5, 15), bool], Tensor[(4), float64], Tensor[(630), int16], Tensor[(180), float64], Tensor[(4), float64]) {
    %930 = @func_8178() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %931 = cast(%var_12863, dtype="int16") /* ty=Tensor[(630), int16] */;
    %932 = cast(%var_12863, dtype="int16") /* ty=Tensor[(630), int16] */;
    %933 = cast(meta[relay.Constant][69] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %934 = cast(meta[relay.Constant][70] /* ty=Tensor[(4), float64] */, dtype="float64") /* ty=Tensor[(4), float64] */;
    %935 = reshape(%931, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
    %936 = reshape(%932, newshape=[6, 7, 15]) /* ty=Tensor[(6, 7, 15), int16] */;
    %937 = reshape(%933, newshape=[6, 30]) /* ty=Tensor[(6, 30), float64] */;
    %938 = reshape(%934, newshape=[4]) /* ty=Tensor[(4), float64] */;
    %939 = @func_5532(%935, %936, %937, %938) /* ty=(Tensor[(6, 7, 15), int16], Tensor[(10, 3, 6), bool], Tensor[(6, 30), float64], Tensor[(42), float32], Tensor[(2, 1, 2), float64], Tensor[(4), float64]) */;
    %940 = %930.0;
    %941 = %939.5;
    (%940, %941, %var_12863, meta[relay.Constant][69] /* ty=Tensor[(180), float64] */, meta[relay.Constant][70] /* ty=Tensor[(4), float64] */)
  };
  %942(%var_12868) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(4), float64], Tensor[(630), int16], Tensor[(180), float64], Tensor[(4), float64]) */
}

def @func_9829() -> (Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) {
  @func_9827() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(12, 5, 14), float64]) */
}

def @func_3824(%var_3822: Tensor[(360), uint16]) -> (Tensor[(2, 12, 4), float64], Tensor[(12, 3, 10), bool], Tensor[(360), uint16]) {
  @func_3821(%var_3822) /* ty=(Tensor[(2, 12, 4), float64], Tensor[(12, 3, 10), bool], Tensor[(360), uint16]) */
}

def @func_10345(%var_10311: Tensor[(5, 5, 15), float64]) -> (Tensor[(5, 5, 15), int8], Tensor[(5, 5, 15), bool]) {
  %943 = @func_9400() /* ty=(Tensor[(5, 5, 15), float64], Tensor[(6, 140), float32], Tensor[(12, 5, 14), float64]) */;
  %944 = %943.0;
  %945 = cast(%var_10311, dtype="int8") /* ty=Tensor[(5, 5, 15), int8] */;
  %946 = shape_of(%944, dtype="int32") /* ty=Tensor[(3), int32] */;
  %947 = cast(%944, dtype="int8") /* ty=Tensor[(5, 5, 15), int8] */;
  %948 = dyn.reshape(%945, %946, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
  %949 = @func_9060() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */;
  %950 = right_shift(%947, %948) /* ty=Tensor[(5, 5, 15), int8] */;
  %951 = %949.0;
  (%950, %951)
}

def @func_12277() -> (Tensor[(5, 5, 15), bool],) {
  %954 = fn () -> (Tensor[(5, 5, 15), bool],) {
    %952 = @func_11700() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %953 = %952.0;
    (%953,)
  };
  %954() /* ty=(Tensor[(5, 5, 15), bool],) */
}

def @func_9471(%var_9427: uint16, %var_9434: Tensor[(1, 121), float32], %var_9435: Tensor[(360), uint16], %var_9454: Tensor[(231, 2), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], uint16, Tensor[(11, 11, 390), bool], Tensor[(14, 1), float32], Tensor[(1, 121), float32], Tensor[(360), uint16], Tensor[(300), float64], Tensor[(5, 5, 15), bool], Tensor[(3, 11, 14), float64], Tensor[(231, 2), float64]) {
  %955 = cast(%var_9427, dtype="uint16") /* ty=uint16 */;
  %956 = reshape(%955, newshape=[]) /* ty=uint16 */;
  %957 = @func_9189(%956) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(11, 11), float32], uint16, Tensor[(360), uint16]) */;
  %958 = cast(meta[relay.Constant][71] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %959 = cast(meta[relay.Constant][71] /* ty=Tensor[(14, 1), float32] */, dtype="float32") /* ty=Tensor[(14, 1), float32] */;
  %960 = cast(%var_9434, dtype="float32") /* ty=Tensor[(1, 121), float32] */;
  %961 = cast(%var_9427, dtype="uint16") /* ty=uint16 */;
  %962 = cast(%var_9435, dtype="uint16") /* ty=Tensor[(360), uint16] */;
  %963 = cast(meta[relay.Constant][72] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %964 = reshape(%958, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %965 = reshape(%959, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %966 = reshape(%960, newshape=[121]) /* ty=Tensor[(121), float32] */;
  %967 = reshape(%961, newshape=[]) /* ty=uint16 */;
  %968 = reshape(%962, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
  %969 = reshape(%963, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %970 = @func_8668(%964, %965, %966, %967, %968, %969) /* ty=(Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) */;
  %971 = @func_9135() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %972 = cast(%var_9454, dtype="float64") /* ty=Tensor[(231, 2), float64] */;
  %973 = reshape(%972, newshape=[3, 11, 14]) /* ty=Tensor[(3, 11, 14), float64] */;
  %974 = @func_9166() /* ty=Tensor[(5, 5, 15), bool] */;
  %975 = %957.1;
  %976 = %970.5;
  %977 = %971.0;
  %978 = @func_3857(%973) /* ty=Tensor[(3, 11, 14), float64] */;
  (%974, %975, %var_9427, %976, meta[relay.Constant][71] /* ty=Tensor[(14, 1), float32] */, %var_9434, %var_9435, meta[relay.Constant][72] /* ty=Tensor[(300), float64] */, %977, %978, %var_9454)
}

def @func_11351() -> (Tensor[(5, 5, 15), float32], Tensor[(11, 11, 390), bool], Tensor[(14), float32], Tensor[(121), float32], uint16, Tensor[(36, 10), uint16], Tensor[(300), float64]) {
  %979 = @func_11318() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %980 = %979.0;
  %981 = cast(%980, dtype="float32") /* ty=Tensor[(5, 5, 15), float32] */;
  %982 = cast(meta[relay.Constant][73] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %983 = cast(meta[relay.Constant][73] /* ty=Tensor[(14), float32] */, dtype="float32") /* ty=Tensor[(14), float32] */;
  %984 = cast(meta[relay.Constant][74] /* ty=Tensor[(121), float32] */, dtype="float32") /* ty=Tensor[(121), float32] */;
  %985 = cast(meta[relay.Constant][75] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
  %986 = cast(meta[relay.Constant][76] /* ty=Tensor[(36, 10), uint16] */, dtype="uint16") /* ty=Tensor[(36, 10), uint16] */;
  %987 = cast(meta[relay.Constant][77] /* ty=Tensor[(300), float64] */, dtype="float64") /* ty=Tensor[(300), float64] */;
  %988 = reshape(%982, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %989 = reshape(%983, newshape=[1, 14]) /* ty=Tensor[(1, 14), float32] */;
  %990 = reshape(%984, newshape=[121]) /* ty=Tensor[(121), float32] */;
  %991 = reshape(%985, newshape=[]) /* ty=uint16 */;
  %992 = reshape(%986, newshape=[12, 30]) /* ty=Tensor[(12, 30), uint16] */;
  %993 = reshape(%987, newshape=[300]) /* ty=Tensor[(300), float64] */;
  %994 = @func_8668(%988, %989, %990, %991, %992, %993) /* ty=(Tensor[(?, 14), bool], Tensor[(2, 2, 6), bool], Tensor[(24), float32], Tensor[(4, 13), uint16], Tensor[(52, 1), uint16], Tensor[(11, 11, 390), bool], Tensor[(121), float32], uint16, Tensor[(12, 30), uint16], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(15, 12, 11), float64]) */;
  %995 = sigmoid(%981) /* ty=Tensor[(5, 5, 15), float32] */;
  %996 = %994.5;
  (%995, %996, meta[relay.Constant][73] /* ty=Tensor[(14), float32] */, meta[relay.Constant][74] /* ty=Tensor[(121), float32] */, meta[relay.Constant][75] /* ty=uint16 */, meta[relay.Constant][76] /* ty=Tensor[(36, 10), uint16] */, meta[relay.Constant][77] /* ty=Tensor[(300), float64] */)
}

def @func_3857(%var_3848: Tensor[(3, 11, 14), float64]) -> Tensor[(3, 11, 14), float64] {
  %997 = cast(meta[relay.Constant][78] /* ty=Tensor[(3, 11, 14), float64] */, dtype="float64") /* ty=Tensor[(3, 11, 14), float64] */;
  %998 = shape_of(%var_3848, dtype="int32") /* ty=Tensor[(3), int32] */;
  %999 = cast(%var_3848, dtype="float64") /* ty=Tensor[(3, 11, 14), float64] */;
  %1000 = dyn.reshape(%997, %998, newshape=[]) /* ty=Tensor[(?, ?, ?), float64] */;
  mod(%999, %1000) /* ty=Tensor[(3, 11, 14), float64] */
}

def @func_8447(%var_8445: Tensor[(12), uint16], %var_8446: Tensor[(360), uint16]) -> (Tensor[(1980), float32], Tensor[(10, 30), float64], uint16, Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16]) {
  %1013 = fn (%var_8423: Tensor[(12), uint16], %var_8424: Tensor[(360), uint16]) -> (Tensor[(1980), float32], Tensor[(10, 30), float64], uint16, Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16]) {
    %1001 = @func_8394() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
    %1002 = cast(meta[relay.Constant][79] /* ty=uint16 */, dtype="uint16") /* ty=uint16 */;
    %1003 = cast(%var_8423, dtype="uint16") /* ty=Tensor[(12), uint16] */;
    %1004 = cast(%var_8424, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %1005 = cast(meta[relay.Constant][80] /* ty=Tensor[(390), int16] */, dtype="int16") /* ty=Tensor[(390), int16] */;
    %1006 = reshape(%1002, newshape=[]) /* ty=uint16 */;
    %1007 = reshape(%1003, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
    %1008 = reshape(%1004, newshape=[360]) /* ty=Tensor[(360), uint16] */;
    %1009 = reshape(%1005, newshape=[390]) /* ty=Tensor[(390), int16] */;
    %1010 = @func_2951(%1006, %1007, %1008, %1009) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
    %1011 = %1001.2;
    %1012 = %1010.5;
    (%1011, %1012, meta[relay.Constant][79] /* ty=uint16 */, %var_8423, %var_8424, meta[relay.Constant][80] /* ty=Tensor[(390), int16] */)
  };
  %1013(%var_8445, %var_8446) /* ty=(Tensor[(1980), float32], Tensor[(10, 30), float64], uint16, Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16]) */
}

def @func_4376(%var_4367: Tensor[(3, 16, 3), int32], %var_4368: Tensor[(3, 16, 3), int32], %var_4369: uint16, %var_4370: Tensor[(1, 390), int16], %var_4371: Tensor[(91), float32], %var_4372: Tensor[(42), float32], %var_4373: Tensor[(66), float32], %var_4374: Tensor[(300), float64], %var_4375: Tensor[(1, 48), uint64]) -> (Tensor[(3, 16, 3), int32], Tensor[(360), uint16], uint16, Tensor[(12, 1), uint16], Tensor[(360), uint16], Tensor[(1, 390), int16], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(91, 15), float32], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 16, 3), bool], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(728), float32], Tensor[(1, 48), uint64], Tensor[(180), float64]) {
  %1064 = fn (%var_4284: Tensor[(3, 16, 3), int32], %var_4285: Tensor[(3, 16, 3), int32], %var_4298: uint16, %var_4301: Tensor[(1, 390), int16], %var_4313: Tensor[(91), float32], %var_4319: Tensor[(42), float32], %var_4346: Tensor[(66), float32], %var_4352: Tensor[(300), float64], %var_4359: Tensor[(1, 48), uint64]) -> (Tensor[(3, 16, 3), int32], Tensor[(360), uint16], uint16, Tensor[(12, 1), uint16], Tensor[(360), uint16], Tensor[(1, 390), int16], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(91, 15), float32], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 16, 3), bool], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(728), float32], Tensor[(1, 48), uint64], Tensor[(180), float64]) {
    %1014 = cast(%var_4285, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
    %1015 = shape_of(%var_4284, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1016 = cast(%var_4284, dtype="int32") /* ty=Tensor[(3, 16, 3), int32] */;
    %1017 = dyn.reshape(%1014, %1015, newshape=[]) /* ty=Tensor[(?, ?, ?), int32] */;
    %1018 = cast(%var_4298, dtype="uint16") /* ty=uint16 */;
    %1019 = cast(meta[relay.Constant][81] /* ty=Tensor[(12, 1), uint16] */, dtype="uint16") /* ty=Tensor[(12, 1), uint16] */;
    %1020 = cast(meta[relay.Constant][82] /* ty=Tensor[(360), uint16] */, dtype="uint16") /* ty=Tensor[(360), uint16] */;
    %1021 = cast(%var_4301, dtype="int16") /* ty=Tensor[(1, 390), int16] */;
    %1022 = reshape(%1018, newshape=[]) /* ty=uint16 */;
    %1023 = reshape(%1019, newshape=[1, 1, 12]) /* ty=Tensor[(1, 1, 12), uint16] */;
    %1024 = reshape(%1020, newshape=[360]) /* ty=Tensor[(360), uint16] */;
    %1025 = reshape(%1021, newshape=[390]) /* ty=Tensor[(390), int16] */;
    %1026 = @func_2951(%1022, %1023, %1024, %1025) /* ty=(Tensor[(1, 1, 12), bool], Tensor[(12, 3, 10), bool], Tensor[(360), uint16], Tensor[(1, 1, 12), uint64], Tensor[(10, 2, 15), bool], Tensor[(10, 30), float64], Tensor[(13, 15, 2), bool], Tensor[(390), int16], Tensor[(15, 12, 11), float64], Tensor[(1980), float32]) */;
    %1027 = cast(%var_4313, dtype="float32") /* ty=Tensor[(91), float32] */;
    %1028 = cast(meta[relay.Constant][83] /* ty=Tensor[(91, 15), float32] */, dtype="float32") /* ty=Tensor[(91, 15), float32] */;
    %1029 = reshape(%1027, newshape=[1, 13, 7]) /* ty=Tensor[(1, 13, 7), float32] */;
    %1030 = reshape(%1028, newshape=[15, 13, 7]) /* ty=Tensor[(15, 13, 7), float32] */;
    %1031 = @func_3185(%1029, %1030) /* ty=(Tensor[(15, 13, 7), bool],) */;
    %1032 = cast(%var_4319, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1033 = cast(%var_4319, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1034 = reshape(%1032, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1035 = reshape(%1033, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1036 = @func_19(%1034, %1035) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1037 = cast(%var_4285, dtype="float32") /* ty=Tensor[(3, 16, 3), float32] */;
    %1038 = atanh(%1037) /* ty=Tensor[(3, 16, 3), float32] */;
    %1039 = cast(%var_4285, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %1040 = shape_of(%1038, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1041 = cast(%1038, dtype="bool") /* ty=Tensor[(3, 16, 3), bool] */;
    %1042 = dyn.reshape(%1039, %1040, newshape=[]) /* ty=Tensor[(?, ?, ?), bool] */;
    %1043 = cast(%var_4346, dtype="float32") /* ty=Tensor[(66), float32] */;
    %1044 = reshape(%1043, newshape=[1, 6, 11]) /* ty=Tensor[(1, 6, 11), float32] */;
    %1045 = @func_2145(%1044) /* ty=(Tensor[(1, 6, 11), float32],) */;
    %1046 = cast(%var_4352, dtype="float64") /* ty=Tensor[(300), float64] */;
    %1047 = cast(%var_4352, dtype="float64") /* ty=Tensor[(300), float64] */;
    %1048 = reshape(%1046, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %1049 = reshape(%1047, newshape=[10, 2, 15]) /* ty=Tensor[(10, 2, 15), float64] */;
    %1050 = @func_880(%1048, %1049) /* ty=(Tensor[(10, 2, 15), bool],) */;
    %1051 = cast(%var_4359, dtype="uint64") /* ty=Tensor[(1, 48), uint64] */;
    %1052 = cast(meta[relay.Constant][84] /* ty=Tensor[(180), float64] */, dtype="float64") /* ty=Tensor[(180), float64] */;
    %1053 = reshape(%1051, newshape=[2, 6, 4]) /* ty=Tensor[(2, 6, 4), uint64] */;
    %1054 = reshape(%1052, newshape=[180]) /* ty=Tensor[(180), float64] */;
    %1055 = @func_1310(%1053, %1054) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(728), float32], Tensor[(42), float32], Tensor[(3, 7, 2), bool], Tensor[(180), float64], Tensor[(4, 13, 14), float32], Tensor[(4, 13, 14), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(2, 6, 4), float32], Tensor[(10, 2, 15), bool], Tensor[(2, 6, 4), int8]) */;
    %1056 = bitwise_xor(%1016, %1017) /* ty=Tensor[(3, 16, 3), int32] */;
    %1057 = %1026.2;
    %1058 = %1031.0;
    %1059 = %1036.0;
    %1060 = not_equal(%1041, %1042) /* ty=Tensor[(3, 16, 3), bool] */;
    %1061 = %1045.0;
    %1062 = %1050.0;
    %1063 = %1055.1;
    (%1056, %1057, %var_4298, meta[relay.Constant][81] /* ty=Tensor[(12, 1), uint16] */, meta[relay.Constant][82] /* ty=Tensor[(360), uint16] */, %var_4301, %1058, %var_4313, meta[relay.Constant][83] /* ty=Tensor[(91, 15), float32] */, %1059, %var_4319, %1060, %1061, %var_4346, %1062, %var_4352, %1063, %var_4359, meta[relay.Constant][84] /* ty=Tensor[(180), float64] */)
  };
  %1064(%var_4367, %var_4368, %var_4369, %var_4370, %var_4371, %var_4372, %var_4373, %var_4374, %var_4375) /* ty=(Tensor[(3, 16, 3), int32], Tensor[(360), uint16], uint16, Tensor[(12, 1), uint16], Tensor[(360), uint16], Tensor[(1, 390), int16], Tensor[(15, 13, 7), bool], Tensor[(91), float32], Tensor[(91, 15), float32], Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(3, 16, 3), bool], Tensor[(1, 6, 11), float32], Tensor[(66), float32], Tensor[(10, 2, 15), bool], Tensor[(300), float64], Tensor[(728), float32], Tensor[(1, 48), uint64], Tensor[(180), float64]) */
}

def @func_12215() -> Tensor[(5, 5, 15), bool] {
  @func_11923() /* ty=Tensor[(5, 5, 15), bool] */
}

def @func_7292(%var_7290: Tensor[(3, 3, 5), float64]) -> (Tensor[(3, 3, 5), bool],) {
  @func_7289(%var_7290) /* ty=(Tensor[(3, 3, 5), bool],) */
}

def @func_8831(%var_8829: Tensor[(5, 5, 15), bool]) -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float64]) {
  @func_8828(%var_8829) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), float64]) */
}

def @func_572(%var_569: Tensor[(4, 13, 14), float32], %var_570: Tensor[(42), float32], %var_571: Tensor[(4, 13, 14), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) {
  %1114 = fn (%var_423: Tensor[(4, 13, 14), float32], %var_429: Tensor[(42), float32], %var_534: Tensor[(4, 13, 14), float64]) -> (Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) {
    %1065 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1066 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1067 = reshape(%1065, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1068 = reshape(%1066, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1069 = @func_19(%1067, %1068) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1070 = cast(%var_423, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
    %1071 = sqrt(%1070) /* ty=Tensor[(4, 13, 14), float32] */;
    %1072 = cast(%1071, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
    %1073 = %1069.0;
    %1074 = cast(%1073, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1075 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1076 = reshape(%1074, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1077 = reshape(%1075, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1078 = @func_19(%1076, %1077) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1079 = cast(%1073, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1080 = %1078.0;
    %1081 = cast(%1080, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1082 = reshape(%1079, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1083 = reshape(%1081, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1084 = @func_19(%1082, %1083) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1085 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1086 = cast(%1080, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1087 = reshape(%1085, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1088 = reshape(%1086, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1089 = @func_19(%1087, %1088) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1090 = cast(%1071, dtype="float64") /* ty=Tensor[(4, 13, 14), float64] */;
    %1091 = cosh(%1090) /* ty=Tensor[(4, 13, 14), float64] */;
    %1092 = cast(%var_534, dtype="int8") /* ty=Tensor[(4, 13, 14), int8] */;
    %1093 = shape_of(%1091, dtype="int32") /* ty=Tensor[(3), int32] */;
    %1094 = cast(%1091, dtype="int8") /* ty=Tensor[(4, 13, 14), int8] */;
    %1095 = dyn.reshape(%1092, %1093, newshape=[]) /* ty=Tensor[(?, ?, ?), int8] */;
    %1096 = bitwise_or(%1094, %1095) /* ty=Tensor[(4, 13, 14), int8] */;
    %1097 = cast(%1096, dtype="float32") /* ty=Tensor[(4, 13, 14), float32] */;
    %1098 = cast(%1073, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1099 = cast(%1080, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1100 = reshape(%1098, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1101 = reshape(%1099, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1102 = @func_19(%1100, %1101) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1103 = cast(%var_429, dtype="float32") /* ty=Tensor[(42), float32] */;
    %1104 = %1102.0;
    %1105 = cast(%1104, dtype="float32") /* ty=Tensor[(3, 7, 2), float32] */;
    %1106 = reshape(%1103, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1107 = reshape(%1105, newshape=[3, 7, 2]) /* ty=Tensor[(3, 7, 2), float32] */;
    %1108 = @func_19(%1106, %1107) /* ty=(Tensor[(3, 7, 2), bool],) */;
    %1109 = log(%1072) /* ty=Tensor[(4, 13, 14), float32] */;
    %1110 = %1084.0;
    %1111 = %1089.0;
    %1112 = rsqrt(%1097) /* ty=Tensor[(4, 13, 14), float32] */;
    %1113 = %1108.0;
    (%1073, %var_429, %1109, %1080, %1110, %1111, %1112, %1104, %1113)
  };
  %1114(%var_569, %var_570, %var_571) /* ty=(Tensor[(3, 7, 2), bool], Tensor[(42), float32], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool], Tensor[(4, 13, 14), float32], Tensor[(3, 7, 2), bool], Tensor[(3, 7, 2), bool]) */
}

def @func_12805(%var_12803: Tensor[(90), float64]) -> (Tensor[(5, 5, 15), bool], Tensor[(180), float64], Tensor[(90), float64], Tensor[(2, 52), int16], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) {
  @func_12802(%var_12803) /* ty=(Tensor[(5, 5, 15), bool], Tensor[(180), float64], Tensor[(90), float64], Tensor[(2, 52), int16], Tensor[(210), float32], Tensor[(192), uint32], Tensor[(210), float32]) */
}

def @func_10348(%var_10346: Tensor[(5, 5, 15), float64]) -> (Tensor[(5, 5, 15), int8], Tensor[(5, 5, 15), bool]) {
  @func_10345(%var_10346) /* ty=(Tensor[(5, 5, 15), int8], Tensor[(5, 5, 15), bool]) */
}

def @func_9683() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %1118 = fn () -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
    %1115 = @func_8214() /* ty=(Tensor[(5, 5, 15), bool],) */;
    %1116 = @func_8709() /* ty=Tensor[(5, 5, 15), bool] */;
    %1117 = %1115.0;
    (%1116, %1117)
  };
  %1118() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) */
}

def @func_4052(%var_4048: bool, %var_4049: Tensor[(3, 1, 2), bool], %var_4050: Tensor[(360), uint16], %var_4051: Tensor[(66), float32]) -> (Tensor[(3, 1, 2), bool], Tensor[(360), uint16], Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16], Tensor[(1, 6, 11), float32], Tensor[(66), float32]) {
  @func_4046(%var_4048, %var_4049, %var_4050, %var_4051) /* ty=(Tensor[(3, 1, 2), bool], Tensor[(360), uint16], Tensor[(12), uint16], Tensor[(360), uint16], Tensor[(390), int16], Tensor[(1, 6, 11), float32], Tensor[(66), float32]) */
}

def @func_7456(%var_7439: Tensor[(11, 16, 2), float32]) -> (Tensor[(11, 16, 2), float32],) {
  %1119 = cast(%var_7439, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %1120 = shape_of(meta[relay.Constant][85] /* ty=Tensor[(11, 16, 2), float32] */, dtype="int32") /* ty=Tensor[(3), int32] */;
  %1121 = cast(meta[relay.Constant][85] /* ty=Tensor[(11, 16, 2), float32] */, dtype="float32") /* ty=Tensor[(11, 16, 2), float32] */;
  %1122 = dyn.reshape(%1119, %1120, newshape=[]) /* ty=Tensor[(?, ?, ?), float32] */;
  %1123 = power(%1121, %1122) /* ty=Tensor[(11, 16, 2), float32] */;
  (%1123,)
}

def @func_5757(%var_5756: Tensor[(6, 1, 14), float32]) -> (Tensor[(6, 1, 14), float32],) {
  %1126 = fn (%var_5741: Tensor[(6, 1, 14), float32]) -> (Tensor[(6, 1, 14), float32],) {
    %1124 = cast(%var_5741, dtype="float32") /* ty=Tensor[(6, 1, 14), float32] */;
    %1125 = rsqrt(%1124) /* ty=Tensor[(6, 1, 14), float32] */;
    (%1125,)
  };
  %1126(%var_5756) /* ty=(Tensor[(6, 1, 14), float32],) */
}

def @func_12601() -> (Tensor[(5, 5, 15), bool], Tensor[(5, 5, 15), bool]) {
  %1127 = @func_9277() /* ty=(Tensor[(5, 5, 15), bool], Tensor[(13, 15, 2), bool], Tensor[(195, 2), int16]) */;
  %1128 = @func_11073() /* ty=(Tensor[(5, 5, 15), bool],) */;
  %1129 = %1127.0;
  %1130 = %1128.0;
  (%1129, %1130)
}

/* For debugging purposes the metadata section has been omitted.
 * If you would like to see the full metadata section you can set the 
 * option to `True` when invoking `astext`. 
 */
===================================
Traceback (most recent call last):
  File "/home/yujunzhe/Hirgen_generated/tvm0.8_test/HirGen448/build/output.py", line 2689, in <module>
    graph, lib, params = relay.build(mod, target='llvm')
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 369, in build
    executor_config, runtime_mod, params = bld_mod.build(
  File "/home/yujunzhe/tvm/python/tvm/relay/build_module.py", line 177, in build
    self._build(mod, target, target_host, executor, mod_name)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  79: TVMFuncCall
  78: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::relay::backend::RelayBuildModule::GetFunction(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, tvm::runtime::ObjectPtr<tvm::runtime::Object> const&)::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#3}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  77: tvm::relay::backend::RelayBuildModule::BuildRelay(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&, tvm::runtime::String)
  76: tvm::relay::backend::RelayBuildModule::OptimizeImpl(tvm::IRModule, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, tvm::runtime::NDArray, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, tvm::runtime::NDArray> > > const&)
  75: tvm::transform::Pass::operator()(tvm::IRModule) const
  74: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  73: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  72: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  71: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  70: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::DynamicToStatic()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  69: tvm::relay::DynamicToStatic(tvm::relay::Function, tvm::IRModule)
  68: tvm::relay::DynamicToStaticMutator::PrepareInput(tvm::RelayExpr const&)
  67: tvm::transform::Pass::operator()(tvm::IRModule) const
  66: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  65: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  64: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::transform::FoldConstant()::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  63: tvm::relay::transform::FoldConstantExpr(tvm::RelayExpr const&, tvm::IRModule const&)
  62: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  61: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  60: _ZN3tvm5relay1
  59: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  58: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  57: _ZZN3tvm5relay11ExprFunc
  56: tvm::relay::transform::(anonymous namespace)::ConstantFolder::VisitExpr_(tvm::relay::FunctionNode const*)
  55: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  54: tvm::relay::MixedModeMutator::VisitExpr(tvm::RelayExpr const&)
  53: tvm::relay::MixedModeMutator::VisitLeaf(tvm::RelayExpr const&)
  52: _ZN3tvm5relay1
  51: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  50: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  49: _ZZN3tvm5relay11ExprFunc
  48: tvm::relay::MixedModeMutator::VisitExpr_(tvm::relay::CallNode const*)
  47: tvm::relay::transform::(anonymous namespace)::ConstantFolder::Rewrite_(tvm::relay::CallNode const*, tvm::RelayExpr const&)
  46: tvm::relay::transform::(anonymous namespace)::ConstantFolder::ConstEvaluate(tvm::RelayExpr const&)
  45: tvm::relay::Eval(tvm::RelayExpr, tvm::runtime::Map<tvm::GlobalTypeVar, tvm::TypeData, void, void>, std::unordered_set<tvm::runtime::String, std::hash<tvm::runtime::String>, std::equal_to<tvm::runtime::String>, std::allocator<tvm::runtime::String> >, DLDevice, tvm::Target)
  44: tvm::relay::Prepare(tvm::IRModule, tvm::CompilationConfig)
  43: tvm::transform::Pass::operator()(tvm::IRModule) const
  42: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  41: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  40: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  39: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  38: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  37: tvm::transform::ModulePassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  36: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::IRModule (tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTEPass(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)::{lambda(tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  35: tvm::relay::tec::LowerTE(tvm::IRModule const&, std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, std::function<void (tvm::relay::Function)>)
  34: tvm::transform::Pass::operator()(tvm::IRModule) const
  33: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  32: tvm::relay::transform::FunctionPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  31: tvm::runtime::TypedPackedFunc<tvm::relay::Function (tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::relay::tec::LowerTensorExpr(std::unordered_map<DLDeviceType, tvm::Target, tvm::relay::backend::EnumClassHash, std::equal_to<DLDeviceType>, std::allocator<std::pair<DLDeviceType const, tvm::Target> > >, tvm::runtime::String const&, tvm::relay::tec::TECompiler, std::function<void (tvm::relay::Function)>)::{lambda(tvm::relay::Function, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  30: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  29: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  28: _ZZN3tvm5relay11ExprFunc
  27: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  26: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::FunctionNode const*)
  25: _ZN3tvm5relay9
  24: tvm::relay::ExprMutator::VisitExpr_(tvm::relay::FunctionNode const*)
  23: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  22: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  21: _ZZN3tvm5relay11ExprFunc
  20: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::LetNode const*)
  19: tvm::relay::tec::LowerTensorExprMutator::PreVisitLetBinding_(tvm::relay::Var const&, tvm::RelayExpr const&)
  18: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  17: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  16: _ZZN3tvm5relay11ExprFunc
  15: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  14: tvm::relay::ExprMutator::VisitExpr(tvm::RelayExpr const&)
  13: tvm::relay::ExprFunctor<tvm::RelayExpr (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  12: _ZZN3tvm5relay11ExprFunc
  11: tvm::relay::transform::DeviceAwareExprMutator::VisitExpr_(tvm::relay::CallNode const*)
  10: tvm::relay::tec::LowerTensorExprMutator::DeviceAwareVisitExpr_(tvm::relay::CallNode const*)
  9: tvm::relay::tec::LowerTensorExprMutator::MakeLoweredCall(tvm::relay::Function, tvm::runtime::Array<tvm::RelayExpr, void>, tvm::runtime::Array<tvm::Type, void>, tvm::Span, tvm::Target)
  8: tvm::relay::tec::TECompilerImpl::LowerShapeFuncInternal(tvm::relay::tec::CCacheKey const&)
  7: tvm::relay::tec::ShapeFuncFor(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  6: tvm::relay::tec::MakeShapeFunc::Create(tvm::relay::Function const&, tvm::Target const&, std::function<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)>)
  5: tvm::relay::tec::MakeShapeFunc::VisitExpr(tvm::RelayExpr const&)
  4: tvm::relay::backend::MemoizedExprTranslator<tvm::runtime::Array<tvm::te::Tensor, void> >::VisitExpr(tvm::RelayExpr const&)
  3: tvm::relay::ExprFunctor<tvm::runtime::Array<tvm::te::Tensor, void> (tvm::RelayExpr const&)>::VisitExpr(tvm::RelayExpr const&)
  2: _ZZN3tvm5relay11ExprFunc
  1: tvm::relay::tec::MakeShapeFunc::VisitExpr_(tvm::relay::CallNode const*)
  0: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&) [clone .cold]
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/yujunzhe/tvm/python/tvm/relay/op/dyn/_transform.py", line 92, in dynamic_reshape_shape_func
    return [_reshape_shape_func_input_data(*inputs, out_ndims[0])]
  File "/home/yujunzhe/.local/lib/python3.9/site-packages/decorator.py", line 232, in fun
    return caller(func, *(extras + args), **kw)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/__init__.py", line 60, in wrapped_func
    return source_to_op(src, args, func.__globals__, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 634, in source_to_op
    parser = parse_python(src, args, symbols, closure_vars)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 604, in parse_python
    parser.parsed_body = parser.visit(root)
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 229, in visit_Module
    return self.visit(node.body[0])
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 242, in visit_FunctionDef
    res = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 506, in visit_For
    body = visit_list_to_block(self.visit, node.body)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 419, in visit_If
    else_body = visit_list_to_block(self.visit, node.orelse)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in visit_list_to_block
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 58, in <listcomp>
    lst = [visit(stmt) for stmt in lst if not utils.is_docstring(stmt)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 406, in visit_If
    cond = self.analyzer.simplify(self.visit(node.test))
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 432, in visit_Compare
    ops = [self.visit(node.left)]
  File "/home/yujunzhe/anaconda3/envs/tvm0.8/lib/python3.9/ast.py", line 409, in visit
    return visitor(node)
  File "/home/yujunzhe/tvm/python/tvm/te/hybrid/parser.py", line 389, in visit_Subscript
    return tvm.tir.ProducerLoad(arr, args)
  File "/home/yujunzhe/tvm/python/tvm/tir/expr.py", line 1078, in __init__
    self.__init_handle_by_constructor__(
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/object.py", line 136, in __init_handle_by_constructor__
    handle = __init_by_constructor__(fconstructor, args)
  File "/home/yujunzhe/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 260, in __init_handle_by_constructor__
    raise get_last_ffi_error()
  3: TVMFuncCall
  2: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  1: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  4: TVMFuncCall
  3: std::_Function_handler<void (tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*), tvm::runtime::TypedPackedFunc<tvm::tir::ProducerLoad (tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)>::AssignTypedLambda<tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}>(tvm::tir::__mk_TVM137::{lambda(tvm::tir::DataProducer, tvm::runtime::Array<tvm::PrimExpr, void>, tvm::Span)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}>::_M_invoke(std::_Any_data const&, tvm::runtime::TVMArgs&&, tvm::runtime::TVMRetValue*&&)
  2: tvm::runtime::TVMMovableArgValueWithContext_::operator tvm::runtime::Array<tvm::PrimExpr, void><tvm::runtime::Array<tvm::PrimExpr, void> >() const
  1: tvm::runtime::Array<tvm::PrimExpr, void> tvm::runtime::TVMPODValue_::AsObjectRef<tvm::runtime::Array<tvm::PrimExpr, void> >() const
  0: _ZN3tvm7runtime6deta
  File "/home/yujunzhe/tvm/include/tvm/runtime/packed_func.h", line 714
TVMError: In function tir.ProducerLoad: error while converting argument 1: [13:18:58] /home/yujunzhe/tvm/include/tvm/runtime/packed_func.h:1611: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: type_code_ == kTVMObjectHandle (0 vs. 8) : expected Object but got int

